
alias2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4ac  08020000  08020000  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0802a4ac  0802a4ac  0002a4ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a4cc  0802a4cc  00030020  2**0
                  CONTENTS
  4 .ARM          00000008  0802a4cc  0802a4cc  0002a4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a4d4  0802a4d4  00030020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802a4d4  0802a4d4  0002a4d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a4dc  0802a4dc  0002a4dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0802a4e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a1c  20000020  0802a500  00030020  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a3c  0802a500  00030a3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024bda  00000000  00000000  00030050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000415e  00000000  00000000  00054c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015f0  00000000  00000000  00058d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001458  00000000  00000000  0005a378  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002503c  00000000  00000000  0005b7d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000140bf  00000000  00000000  0008080c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb284  00000000  00000000  000948cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015fb4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d60  00000000  00000000  0015fbcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08020000 <__do_global_dtors_aux>:
 8020000:	b510      	push	{r4, lr}
 8020002:	4c05      	ldr	r4, [pc, #20]	; (8020018 <__do_global_dtors_aux+0x18>)
 8020004:	7823      	ldrb	r3, [r4, #0]
 8020006:	b933      	cbnz	r3, 8020016 <__do_global_dtors_aux+0x16>
 8020008:	4b04      	ldr	r3, [pc, #16]	; (802001c <__do_global_dtors_aux+0x1c>)
 802000a:	b113      	cbz	r3, 8020012 <__do_global_dtors_aux+0x12>
 802000c:	4804      	ldr	r0, [pc, #16]	; (8020020 <__do_global_dtors_aux+0x20>)
 802000e:	f3af 8000 	nop.w
 8020012:	2301      	movs	r3, #1
 8020014:	7023      	strb	r3, [r4, #0]
 8020016:	bd10      	pop	{r4, pc}
 8020018:	20000020 	.word	0x20000020
 802001c:	00000000 	.word	0x00000000
 8020020:	0802a494 	.word	0x0802a494

08020024 <frame_dummy>:
 8020024:	b508      	push	{r3, lr}
 8020026:	4b03      	ldr	r3, [pc, #12]	; (8020034 <frame_dummy+0x10>)
 8020028:	b11b      	cbz	r3, 8020032 <frame_dummy+0xe>
 802002a:	4903      	ldr	r1, [pc, #12]	; (8020038 <frame_dummy+0x14>)
 802002c:	4803      	ldr	r0, [pc, #12]	; (802003c <frame_dummy+0x18>)
 802002e:	f3af 8000 	nop.w
 8020032:	bd08      	pop	{r3, pc}
 8020034:	00000000 	.word	0x00000000
 8020038:	20000024 	.word	0x20000024
 802003c:	0802a494 	.word	0x0802a494

08020040 <__aeabi_drsub>:
 8020040:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8020044:	e002      	b.n	802004c <__adddf3>
 8020046:	bf00      	nop

08020048 <__aeabi_dsub>:
 8020048:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0802004c <__adddf3>:
 802004c:	b530      	push	{r4, r5, lr}
 802004e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8020052:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8020056:	ea94 0f05 	teq	r4, r5
 802005a:	bf08      	it	eq
 802005c:	ea90 0f02 	teqeq	r0, r2
 8020060:	bf1f      	itttt	ne
 8020062:	ea54 0c00 	orrsne.w	ip, r4, r0
 8020066:	ea55 0c02 	orrsne.w	ip, r5, r2
 802006a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 802006e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020072:	f000 80e2 	beq.w	802023a <__adddf3+0x1ee>
 8020076:	ea4f 5454 	mov.w	r4, r4, lsr #21
 802007a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 802007e:	bfb8      	it	lt
 8020080:	426d      	neglt	r5, r5
 8020082:	dd0c      	ble.n	802009e <__adddf3+0x52>
 8020084:	442c      	add	r4, r5
 8020086:	ea80 0202 	eor.w	r2, r0, r2
 802008a:	ea81 0303 	eor.w	r3, r1, r3
 802008e:	ea82 0000 	eor.w	r0, r2, r0
 8020092:	ea83 0101 	eor.w	r1, r3, r1
 8020096:	ea80 0202 	eor.w	r2, r0, r2
 802009a:	ea81 0303 	eor.w	r3, r1, r3
 802009e:	2d36      	cmp	r5, #54	; 0x36
 80200a0:	bf88      	it	hi
 80200a2:	bd30      	pophi	{r4, r5, pc}
 80200a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80200a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80200ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80200b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80200b4:	d002      	beq.n	80200bc <__adddf3+0x70>
 80200b6:	4240      	negs	r0, r0
 80200b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80200bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80200c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80200c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80200c8:	d002      	beq.n	80200d0 <__adddf3+0x84>
 80200ca:	4252      	negs	r2, r2
 80200cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80200d0:	ea94 0f05 	teq	r4, r5
 80200d4:	f000 80a7 	beq.w	8020226 <__adddf3+0x1da>
 80200d8:	f1a4 0401 	sub.w	r4, r4, #1
 80200dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80200e0:	db0d      	blt.n	80200fe <__adddf3+0xb2>
 80200e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80200e6:	fa22 f205 	lsr.w	r2, r2, r5
 80200ea:	1880      	adds	r0, r0, r2
 80200ec:	f141 0100 	adc.w	r1, r1, #0
 80200f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80200f4:	1880      	adds	r0, r0, r2
 80200f6:	fa43 f305 	asr.w	r3, r3, r5
 80200fa:	4159      	adcs	r1, r3
 80200fc:	e00e      	b.n	802011c <__adddf3+0xd0>
 80200fe:	f1a5 0520 	sub.w	r5, r5, #32
 8020102:	f10e 0e20 	add.w	lr, lr, #32
 8020106:	2a01      	cmp	r2, #1
 8020108:	fa03 fc0e 	lsl.w	ip, r3, lr
 802010c:	bf28      	it	cs
 802010e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020112:	fa43 f305 	asr.w	r3, r3, r5
 8020116:	18c0      	adds	r0, r0, r3
 8020118:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802011c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020120:	d507      	bpl.n	8020132 <__adddf3+0xe6>
 8020122:	f04f 0e00 	mov.w	lr, #0
 8020126:	f1dc 0c00 	rsbs	ip, ip, #0
 802012a:	eb7e 0000 	sbcs.w	r0, lr, r0
 802012e:	eb6e 0101 	sbc.w	r1, lr, r1
 8020132:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8020136:	d31b      	bcc.n	8020170 <__adddf3+0x124>
 8020138:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 802013c:	d30c      	bcc.n	8020158 <__adddf3+0x10c>
 802013e:	0849      	lsrs	r1, r1, #1
 8020140:	ea5f 0030 	movs.w	r0, r0, rrx
 8020144:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8020148:	f104 0401 	add.w	r4, r4, #1
 802014c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8020150:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8020154:	f080 809a 	bcs.w	802028c <__adddf3+0x240>
 8020158:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802015c:	bf08      	it	eq
 802015e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020162:	f150 0000 	adcs.w	r0, r0, #0
 8020166:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802016a:	ea41 0105 	orr.w	r1, r1, r5
 802016e:	bd30      	pop	{r4, r5, pc}
 8020170:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8020174:	4140      	adcs	r0, r0
 8020176:	eb41 0101 	adc.w	r1, r1, r1
 802017a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 802017e:	f1a4 0401 	sub.w	r4, r4, #1
 8020182:	d1e9      	bne.n	8020158 <__adddf3+0x10c>
 8020184:	f091 0f00 	teq	r1, #0
 8020188:	bf04      	itt	eq
 802018a:	4601      	moveq	r1, r0
 802018c:	2000      	moveq	r0, #0
 802018e:	fab1 f381 	clz	r3, r1
 8020192:	bf08      	it	eq
 8020194:	3320      	addeq	r3, #32
 8020196:	f1a3 030b 	sub.w	r3, r3, #11
 802019a:	f1b3 0220 	subs.w	r2, r3, #32
 802019e:	da0c      	bge.n	80201ba <__adddf3+0x16e>
 80201a0:	320c      	adds	r2, #12
 80201a2:	dd08      	ble.n	80201b6 <__adddf3+0x16a>
 80201a4:	f102 0c14 	add.w	ip, r2, #20
 80201a8:	f1c2 020c 	rsb	r2, r2, #12
 80201ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80201b0:	fa21 f102 	lsr.w	r1, r1, r2
 80201b4:	e00c      	b.n	80201d0 <__adddf3+0x184>
 80201b6:	f102 0214 	add.w	r2, r2, #20
 80201ba:	bfd8      	it	le
 80201bc:	f1c2 0c20 	rsble	ip, r2, #32
 80201c0:	fa01 f102 	lsl.w	r1, r1, r2
 80201c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80201c8:	bfdc      	itt	le
 80201ca:	ea41 010c 	orrle.w	r1, r1, ip
 80201ce:	4090      	lslle	r0, r2
 80201d0:	1ae4      	subs	r4, r4, r3
 80201d2:	bfa2      	ittt	ge
 80201d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80201d8:	4329      	orrge	r1, r5
 80201da:	bd30      	popge	{r4, r5, pc}
 80201dc:	ea6f 0404 	mvn.w	r4, r4
 80201e0:	3c1f      	subs	r4, #31
 80201e2:	da1c      	bge.n	802021e <__adddf3+0x1d2>
 80201e4:	340c      	adds	r4, #12
 80201e6:	dc0e      	bgt.n	8020206 <__adddf3+0x1ba>
 80201e8:	f104 0414 	add.w	r4, r4, #20
 80201ec:	f1c4 0220 	rsb	r2, r4, #32
 80201f0:	fa20 f004 	lsr.w	r0, r0, r4
 80201f4:	fa01 f302 	lsl.w	r3, r1, r2
 80201f8:	ea40 0003 	orr.w	r0, r0, r3
 80201fc:	fa21 f304 	lsr.w	r3, r1, r4
 8020200:	ea45 0103 	orr.w	r1, r5, r3
 8020204:	bd30      	pop	{r4, r5, pc}
 8020206:	f1c4 040c 	rsb	r4, r4, #12
 802020a:	f1c4 0220 	rsb	r2, r4, #32
 802020e:	fa20 f002 	lsr.w	r0, r0, r2
 8020212:	fa01 f304 	lsl.w	r3, r1, r4
 8020216:	ea40 0003 	orr.w	r0, r0, r3
 802021a:	4629      	mov	r1, r5
 802021c:	bd30      	pop	{r4, r5, pc}
 802021e:	fa21 f004 	lsr.w	r0, r1, r4
 8020222:	4629      	mov	r1, r5
 8020224:	bd30      	pop	{r4, r5, pc}
 8020226:	f094 0f00 	teq	r4, #0
 802022a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 802022e:	bf06      	itte	eq
 8020230:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8020234:	3401      	addeq	r4, #1
 8020236:	3d01      	subne	r5, #1
 8020238:	e74e      	b.n	80200d8 <__adddf3+0x8c>
 802023a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802023e:	bf18      	it	ne
 8020240:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020244:	d029      	beq.n	802029a <__adddf3+0x24e>
 8020246:	ea94 0f05 	teq	r4, r5
 802024a:	bf08      	it	eq
 802024c:	ea90 0f02 	teqeq	r0, r2
 8020250:	d005      	beq.n	802025e <__adddf3+0x212>
 8020252:	ea54 0c00 	orrs.w	ip, r4, r0
 8020256:	bf04      	itt	eq
 8020258:	4619      	moveq	r1, r3
 802025a:	4610      	moveq	r0, r2
 802025c:	bd30      	pop	{r4, r5, pc}
 802025e:	ea91 0f03 	teq	r1, r3
 8020262:	bf1e      	ittt	ne
 8020264:	2100      	movne	r1, #0
 8020266:	2000      	movne	r0, #0
 8020268:	bd30      	popne	{r4, r5, pc}
 802026a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 802026e:	d105      	bne.n	802027c <__adddf3+0x230>
 8020270:	0040      	lsls	r0, r0, #1
 8020272:	4149      	adcs	r1, r1
 8020274:	bf28      	it	cs
 8020276:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 802027a:	bd30      	pop	{r4, r5, pc}
 802027c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8020280:	bf3c      	itt	cc
 8020282:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8020286:	bd30      	popcc	{r4, r5, pc}
 8020288:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 802028c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8020290:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8020294:	f04f 0000 	mov.w	r0, #0
 8020298:	bd30      	pop	{r4, r5, pc}
 802029a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802029e:	bf1a      	itte	ne
 80202a0:	4619      	movne	r1, r3
 80202a2:	4610      	movne	r0, r2
 80202a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80202a8:	bf1c      	itt	ne
 80202aa:	460b      	movne	r3, r1
 80202ac:	4602      	movne	r2, r0
 80202ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80202b2:	bf06      	itte	eq
 80202b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80202b8:	ea91 0f03 	teqeq	r1, r3
 80202bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80202c0:	bd30      	pop	{r4, r5, pc}
 80202c2:	bf00      	nop

080202c4 <__aeabi_ui2d>:
 80202c4:	f090 0f00 	teq	r0, #0
 80202c8:	bf04      	itt	eq
 80202ca:	2100      	moveq	r1, #0
 80202cc:	4770      	bxeq	lr
 80202ce:	b530      	push	{r4, r5, lr}
 80202d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80202d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80202d8:	f04f 0500 	mov.w	r5, #0
 80202dc:	f04f 0100 	mov.w	r1, #0
 80202e0:	e750      	b.n	8020184 <__adddf3+0x138>
 80202e2:	bf00      	nop

080202e4 <__aeabi_i2d>:
 80202e4:	f090 0f00 	teq	r0, #0
 80202e8:	bf04      	itt	eq
 80202ea:	2100      	moveq	r1, #0
 80202ec:	4770      	bxeq	lr
 80202ee:	b530      	push	{r4, r5, lr}
 80202f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80202f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80202f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80202fc:	bf48      	it	mi
 80202fe:	4240      	negmi	r0, r0
 8020300:	f04f 0100 	mov.w	r1, #0
 8020304:	e73e      	b.n	8020184 <__adddf3+0x138>
 8020306:	bf00      	nop

08020308 <__aeabi_f2d>:
 8020308:	0042      	lsls	r2, r0, #1
 802030a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802030e:	ea4f 0131 	mov.w	r1, r1, rrx
 8020312:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020316:	bf1f      	itttt	ne
 8020318:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 802031c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8020320:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8020324:	4770      	bxne	lr
 8020326:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 802032a:	bf08      	it	eq
 802032c:	4770      	bxeq	lr
 802032e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8020332:	bf04      	itt	eq
 8020334:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8020338:	4770      	bxeq	lr
 802033a:	b530      	push	{r4, r5, lr}
 802033c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8020340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020344:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020348:	e71c      	b.n	8020184 <__adddf3+0x138>
 802034a:	bf00      	nop

0802034c <__aeabi_ul2d>:
 802034c:	ea50 0201 	orrs.w	r2, r0, r1
 8020350:	bf08      	it	eq
 8020352:	4770      	bxeq	lr
 8020354:	b530      	push	{r4, r5, lr}
 8020356:	f04f 0500 	mov.w	r5, #0
 802035a:	e00a      	b.n	8020372 <__aeabi_l2d+0x16>

0802035c <__aeabi_l2d>:
 802035c:	ea50 0201 	orrs.w	r2, r0, r1
 8020360:	bf08      	it	eq
 8020362:	4770      	bxeq	lr
 8020364:	b530      	push	{r4, r5, lr}
 8020366:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 802036a:	d502      	bpl.n	8020372 <__aeabi_l2d+0x16>
 802036c:	4240      	negs	r0, r0
 802036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020372:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020376:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802037a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 802037e:	f43f aed8 	beq.w	8020132 <__adddf3+0xe6>
 8020382:	f04f 0203 	mov.w	r2, #3
 8020386:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802038a:	bf18      	it	ne
 802038c:	3203      	addne	r2, #3
 802038e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8020392:	bf18      	it	ne
 8020394:	3203      	addne	r2, #3
 8020396:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 802039a:	f1c2 0320 	rsb	r3, r2, #32
 802039e:	fa00 fc03 	lsl.w	ip, r0, r3
 80203a2:	fa20 f002 	lsr.w	r0, r0, r2
 80203a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80203aa:	ea40 000e 	orr.w	r0, r0, lr
 80203ae:	fa21 f102 	lsr.w	r1, r1, r2
 80203b2:	4414      	add	r4, r2
 80203b4:	e6bd      	b.n	8020132 <__adddf3+0xe6>
 80203b6:	bf00      	nop

080203b8 <__aeabi_dmul>:
 80203b8:	b570      	push	{r4, r5, r6, lr}
 80203ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80203be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80203c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80203c6:	bf1d      	ittte	ne
 80203c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80203cc:	ea94 0f0c 	teqne	r4, ip
 80203d0:	ea95 0f0c 	teqne	r5, ip
 80203d4:	f000 f8de 	bleq	8020594 <__aeabi_dmul+0x1dc>
 80203d8:	442c      	add	r4, r5
 80203da:	ea81 0603 	eor.w	r6, r1, r3
 80203de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80203e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80203e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80203ea:	bf18      	it	ne
 80203ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80203f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80203f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80203f8:	d038      	beq.n	802046c <__aeabi_dmul+0xb4>
 80203fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80203fe:	f04f 0500 	mov.w	r5, #0
 8020402:	fbe1 e502 	umlal	lr, r5, r1, r2
 8020406:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 802040a:	fbe0 e503 	umlal	lr, r5, r0, r3
 802040e:	f04f 0600 	mov.w	r6, #0
 8020412:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020416:	f09c 0f00 	teq	ip, #0
 802041a:	bf18      	it	ne
 802041c:	f04e 0e01 	orrne.w	lr, lr, #1
 8020420:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8020424:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8020428:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 802042c:	d204      	bcs.n	8020438 <__aeabi_dmul+0x80>
 802042e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8020432:	416d      	adcs	r5, r5
 8020434:	eb46 0606 	adc.w	r6, r6, r6
 8020438:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 802043c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8020440:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8020444:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8020448:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 802044c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8020450:	bf88      	it	hi
 8020452:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020456:	d81e      	bhi.n	8020496 <__aeabi_dmul+0xde>
 8020458:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 802045c:	bf08      	it	eq
 802045e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8020462:	f150 0000 	adcs.w	r0, r0, #0
 8020466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802046a:	bd70      	pop	{r4, r5, r6, pc}
 802046c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8020470:	ea46 0101 	orr.w	r1, r6, r1
 8020474:	ea40 0002 	orr.w	r0, r0, r2
 8020478:	ea81 0103 	eor.w	r1, r1, r3
 802047c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8020480:	bfc2      	ittt	gt
 8020482:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020486:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 802048a:	bd70      	popgt	{r4, r5, r6, pc}
 802048c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020490:	f04f 0e00 	mov.w	lr, #0
 8020494:	3c01      	subs	r4, #1
 8020496:	f300 80ab 	bgt.w	80205f0 <__aeabi_dmul+0x238>
 802049a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 802049e:	bfde      	ittt	le
 80204a0:	2000      	movle	r0, #0
 80204a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80204a6:	bd70      	pople	{r4, r5, r6, pc}
 80204a8:	f1c4 0400 	rsb	r4, r4, #0
 80204ac:	3c20      	subs	r4, #32
 80204ae:	da35      	bge.n	802051c <__aeabi_dmul+0x164>
 80204b0:	340c      	adds	r4, #12
 80204b2:	dc1b      	bgt.n	80204ec <__aeabi_dmul+0x134>
 80204b4:	f104 0414 	add.w	r4, r4, #20
 80204b8:	f1c4 0520 	rsb	r5, r4, #32
 80204bc:	fa00 f305 	lsl.w	r3, r0, r5
 80204c0:	fa20 f004 	lsr.w	r0, r0, r4
 80204c4:	fa01 f205 	lsl.w	r2, r1, r5
 80204c8:	ea40 0002 	orr.w	r0, r0, r2
 80204cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80204d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80204d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80204d8:	fa21 f604 	lsr.w	r6, r1, r4
 80204dc:	eb42 0106 	adc.w	r1, r2, r6
 80204e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80204e4:	bf08      	it	eq
 80204e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80204ea:	bd70      	pop	{r4, r5, r6, pc}
 80204ec:	f1c4 040c 	rsb	r4, r4, #12
 80204f0:	f1c4 0520 	rsb	r5, r4, #32
 80204f4:	fa00 f304 	lsl.w	r3, r0, r4
 80204f8:	fa20 f005 	lsr.w	r0, r0, r5
 80204fc:	fa01 f204 	lsl.w	r2, r1, r4
 8020500:	ea40 0002 	orr.w	r0, r0, r2
 8020504:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020508:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802050c:	f141 0100 	adc.w	r1, r1, #0
 8020510:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020514:	bf08      	it	eq
 8020516:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802051a:	bd70      	pop	{r4, r5, r6, pc}
 802051c:	f1c4 0520 	rsb	r5, r4, #32
 8020520:	fa00 f205 	lsl.w	r2, r0, r5
 8020524:	ea4e 0e02 	orr.w	lr, lr, r2
 8020528:	fa20 f304 	lsr.w	r3, r0, r4
 802052c:	fa01 f205 	lsl.w	r2, r1, r5
 8020530:	ea43 0302 	orr.w	r3, r3, r2
 8020534:	fa21 f004 	lsr.w	r0, r1, r4
 8020538:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802053c:	fa21 f204 	lsr.w	r2, r1, r4
 8020540:	ea20 0002 	bic.w	r0, r0, r2
 8020544:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8020548:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802054c:	bf08      	it	eq
 802054e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020552:	bd70      	pop	{r4, r5, r6, pc}
 8020554:	f094 0f00 	teq	r4, #0
 8020558:	d10f      	bne.n	802057a <__aeabi_dmul+0x1c2>
 802055a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802055e:	0040      	lsls	r0, r0, #1
 8020560:	eb41 0101 	adc.w	r1, r1, r1
 8020564:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020568:	bf08      	it	eq
 802056a:	3c01      	subeq	r4, #1
 802056c:	d0f7      	beq.n	802055e <__aeabi_dmul+0x1a6>
 802056e:	ea41 0106 	orr.w	r1, r1, r6
 8020572:	f095 0f00 	teq	r5, #0
 8020576:	bf18      	it	ne
 8020578:	4770      	bxne	lr
 802057a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 802057e:	0052      	lsls	r2, r2, #1
 8020580:	eb43 0303 	adc.w	r3, r3, r3
 8020584:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8020588:	bf08      	it	eq
 802058a:	3d01      	subeq	r5, #1
 802058c:	d0f7      	beq.n	802057e <__aeabi_dmul+0x1c6>
 802058e:	ea43 0306 	orr.w	r3, r3, r6
 8020592:	4770      	bx	lr
 8020594:	ea94 0f0c 	teq	r4, ip
 8020598:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802059c:	bf18      	it	ne
 802059e:	ea95 0f0c 	teqne	r5, ip
 80205a2:	d00c      	beq.n	80205be <__aeabi_dmul+0x206>
 80205a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80205a8:	bf18      	it	ne
 80205aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80205ae:	d1d1      	bne.n	8020554 <__aeabi_dmul+0x19c>
 80205b0:	ea81 0103 	eor.w	r1, r1, r3
 80205b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205b8:	f04f 0000 	mov.w	r0, #0
 80205bc:	bd70      	pop	{r4, r5, r6, pc}
 80205be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80205c2:	bf06      	itte	eq
 80205c4:	4610      	moveq	r0, r2
 80205c6:	4619      	moveq	r1, r3
 80205c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80205cc:	d019      	beq.n	8020602 <__aeabi_dmul+0x24a>
 80205ce:	ea94 0f0c 	teq	r4, ip
 80205d2:	d102      	bne.n	80205da <__aeabi_dmul+0x222>
 80205d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80205d8:	d113      	bne.n	8020602 <__aeabi_dmul+0x24a>
 80205da:	ea95 0f0c 	teq	r5, ip
 80205de:	d105      	bne.n	80205ec <__aeabi_dmul+0x234>
 80205e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80205e4:	bf1c      	itt	ne
 80205e6:	4610      	movne	r0, r2
 80205e8:	4619      	movne	r1, r3
 80205ea:	d10a      	bne.n	8020602 <__aeabi_dmul+0x24a>
 80205ec:	ea81 0103 	eor.w	r1, r1, r3
 80205f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80205f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80205fc:	f04f 0000 	mov.w	r0, #0
 8020600:	bd70      	pop	{r4, r5, r6, pc}
 8020602:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020606:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 802060a:	bd70      	pop	{r4, r5, r6, pc}

0802060c <__aeabi_ddiv>:
 802060c:	b570      	push	{r4, r5, r6, lr}
 802060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802061a:	bf1d      	ittte	ne
 802061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020620:	ea94 0f0c 	teqne	r4, ip
 8020624:	ea95 0f0c 	teqne	r5, ip
 8020628:	f000 f8a7 	bleq	802077a <__aeabi_ddiv+0x16e>
 802062c:	eba4 0405 	sub.w	r4, r4, r5
 8020630:	ea81 0e03 	eor.w	lr, r1, r3
 8020634:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020638:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802063c:	f000 8088 	beq.w	8020750 <__aeabi_ddiv+0x144>
 8020640:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020644:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8020648:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 802064c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8020650:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020654:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020658:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802065c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8020660:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8020664:	429d      	cmp	r5, r3
 8020666:	bf08      	it	eq
 8020668:	4296      	cmpeq	r6, r2
 802066a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 802066e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8020672:	d202      	bcs.n	802067a <__aeabi_ddiv+0x6e>
 8020674:	085b      	lsrs	r3, r3, #1
 8020676:	ea4f 0232 	mov.w	r2, r2, rrx
 802067a:	1ab6      	subs	r6, r6, r2
 802067c:	eb65 0503 	sbc.w	r5, r5, r3
 8020680:	085b      	lsrs	r3, r3, #1
 8020682:	ea4f 0232 	mov.w	r2, r2, rrx
 8020686:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 802068a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 802068e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020692:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020696:	bf22      	ittt	cs
 8020698:	1ab6      	subcs	r6, r6, r2
 802069a:	4675      	movcs	r5, lr
 802069c:	ea40 000c 	orrcs.w	r0, r0, ip
 80206a0:	085b      	lsrs	r3, r3, #1
 80206a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80206a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80206aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206ae:	bf22      	ittt	cs
 80206b0:	1ab6      	subcs	r6, r6, r2
 80206b2:	4675      	movcs	r5, lr
 80206b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80206b8:	085b      	lsrs	r3, r3, #1
 80206ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80206be:	ebb6 0e02 	subs.w	lr, r6, r2
 80206c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206c6:	bf22      	ittt	cs
 80206c8:	1ab6      	subcs	r6, r6, r2
 80206ca:	4675      	movcs	r5, lr
 80206cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80206d0:	085b      	lsrs	r3, r3, #1
 80206d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80206d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80206da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206de:	bf22      	ittt	cs
 80206e0:	1ab6      	subcs	r6, r6, r2
 80206e2:	4675      	movcs	r5, lr
 80206e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80206e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80206ec:	d018      	beq.n	8020720 <__aeabi_ddiv+0x114>
 80206ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80206f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80206f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80206fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80206fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8020702:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8020706:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802070a:	d1c0      	bne.n	802068e <__aeabi_ddiv+0x82>
 802070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020710:	d10b      	bne.n	802072a <__aeabi_ddiv+0x11e>
 8020712:	ea41 0100 	orr.w	r1, r1, r0
 8020716:	f04f 0000 	mov.w	r0, #0
 802071a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 802071e:	e7b6      	b.n	802068e <__aeabi_ddiv+0x82>
 8020720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020724:	bf04      	itt	eq
 8020726:	4301      	orreq	r1, r0
 8020728:	2000      	moveq	r0, #0
 802072a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 802072e:	bf88      	it	hi
 8020730:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020734:	f63f aeaf 	bhi.w	8020496 <__aeabi_dmul+0xde>
 8020738:	ebb5 0c03 	subs.w	ip, r5, r3
 802073c:	bf04      	itt	eq
 802073e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8020742:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020746:	f150 0000 	adcs.w	r0, r0, #0
 802074a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802074e:	bd70      	pop	{r4, r5, r6, pc}
 8020750:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8020754:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020758:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 802075c:	bfc2      	ittt	gt
 802075e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020762:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020766:	bd70      	popgt	{r4, r5, r6, pc}
 8020768:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802076c:	f04f 0e00 	mov.w	lr, #0
 8020770:	3c01      	subs	r4, #1
 8020772:	e690      	b.n	8020496 <__aeabi_dmul+0xde>
 8020774:	ea45 0e06 	orr.w	lr, r5, r6
 8020778:	e68d      	b.n	8020496 <__aeabi_dmul+0xde>
 802077a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802077e:	ea94 0f0c 	teq	r4, ip
 8020782:	bf08      	it	eq
 8020784:	ea95 0f0c 	teqeq	r5, ip
 8020788:	f43f af3b 	beq.w	8020602 <__aeabi_dmul+0x24a>
 802078c:	ea94 0f0c 	teq	r4, ip
 8020790:	d10a      	bne.n	80207a8 <__aeabi_ddiv+0x19c>
 8020792:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020796:	f47f af34 	bne.w	8020602 <__aeabi_dmul+0x24a>
 802079a:	ea95 0f0c 	teq	r5, ip
 802079e:	f47f af25 	bne.w	80205ec <__aeabi_dmul+0x234>
 80207a2:	4610      	mov	r0, r2
 80207a4:	4619      	mov	r1, r3
 80207a6:	e72c      	b.n	8020602 <__aeabi_dmul+0x24a>
 80207a8:	ea95 0f0c 	teq	r5, ip
 80207ac:	d106      	bne.n	80207bc <__aeabi_ddiv+0x1b0>
 80207ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80207b2:	f43f aefd 	beq.w	80205b0 <__aeabi_dmul+0x1f8>
 80207b6:	4610      	mov	r0, r2
 80207b8:	4619      	mov	r1, r3
 80207ba:	e722      	b.n	8020602 <__aeabi_dmul+0x24a>
 80207bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80207c0:	bf18      	it	ne
 80207c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80207c6:	f47f aec5 	bne.w	8020554 <__aeabi_dmul+0x19c>
 80207ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80207ce:	f47f af0d 	bne.w	80205ec <__aeabi_dmul+0x234>
 80207d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80207d6:	f47f aeeb 	bne.w	80205b0 <__aeabi_dmul+0x1f8>
 80207da:	e712      	b.n	8020602 <__aeabi_dmul+0x24a>

080207dc <__gedf2>:
 80207dc:	f04f 3cff 	mov.w	ip, #4294967295
 80207e0:	e006      	b.n	80207f0 <__cmpdf2+0x4>
 80207e2:	bf00      	nop

080207e4 <__ledf2>:
 80207e4:	f04f 0c01 	mov.w	ip, #1
 80207e8:	e002      	b.n	80207f0 <__cmpdf2+0x4>
 80207ea:	bf00      	nop

080207ec <__cmpdf2>:
 80207ec:	f04f 0c01 	mov.w	ip, #1
 80207f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80207f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80207f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80207fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020800:	bf18      	it	ne
 8020802:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020806:	d01b      	beq.n	8020840 <__cmpdf2+0x54>
 8020808:	b001      	add	sp, #4
 802080a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 802080e:	bf0c      	ite	eq
 8020810:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020814:	ea91 0f03 	teqne	r1, r3
 8020818:	bf02      	ittt	eq
 802081a:	ea90 0f02 	teqeq	r0, r2
 802081e:	2000      	moveq	r0, #0
 8020820:	4770      	bxeq	lr
 8020822:	f110 0f00 	cmn.w	r0, #0
 8020826:	ea91 0f03 	teq	r1, r3
 802082a:	bf58      	it	pl
 802082c:	4299      	cmppl	r1, r3
 802082e:	bf08      	it	eq
 8020830:	4290      	cmpeq	r0, r2
 8020832:	bf2c      	ite	cs
 8020834:	17d8      	asrcs	r0, r3, #31
 8020836:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 802083a:	f040 0001 	orr.w	r0, r0, #1
 802083e:	4770      	bx	lr
 8020840:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020844:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020848:	d102      	bne.n	8020850 <__cmpdf2+0x64>
 802084a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 802084e:	d107      	bne.n	8020860 <__cmpdf2+0x74>
 8020850:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020854:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020858:	d1d6      	bne.n	8020808 <__cmpdf2+0x1c>
 802085a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 802085e:	d0d3      	beq.n	8020808 <__cmpdf2+0x1c>
 8020860:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020864:	4770      	bx	lr
 8020866:	bf00      	nop

08020868 <__aeabi_cdrcmple>:
 8020868:	4684      	mov	ip, r0
 802086a:	4610      	mov	r0, r2
 802086c:	4662      	mov	r2, ip
 802086e:	468c      	mov	ip, r1
 8020870:	4619      	mov	r1, r3
 8020872:	4663      	mov	r3, ip
 8020874:	e000      	b.n	8020878 <__aeabi_cdcmpeq>
 8020876:	bf00      	nop

08020878 <__aeabi_cdcmpeq>:
 8020878:	b501      	push	{r0, lr}
 802087a:	f7ff ffb7 	bl	80207ec <__cmpdf2>
 802087e:	2800      	cmp	r0, #0
 8020880:	bf48      	it	mi
 8020882:	f110 0f00 	cmnmi.w	r0, #0
 8020886:	bd01      	pop	{r0, pc}

08020888 <__aeabi_dcmpeq>:
 8020888:	f84d ed08 	str.w	lr, [sp, #-8]!
 802088c:	f7ff fff4 	bl	8020878 <__aeabi_cdcmpeq>
 8020890:	bf0c      	ite	eq
 8020892:	2001      	moveq	r0, #1
 8020894:	2000      	movne	r0, #0
 8020896:	f85d fb08 	ldr.w	pc, [sp], #8
 802089a:	bf00      	nop

0802089c <__aeabi_dcmplt>:
 802089c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208a0:	f7ff ffea 	bl	8020878 <__aeabi_cdcmpeq>
 80208a4:	bf34      	ite	cc
 80208a6:	2001      	movcc	r0, #1
 80208a8:	2000      	movcs	r0, #0
 80208aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80208ae:	bf00      	nop

080208b0 <__aeabi_dcmple>:
 80208b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208b4:	f7ff ffe0 	bl	8020878 <__aeabi_cdcmpeq>
 80208b8:	bf94      	ite	ls
 80208ba:	2001      	movls	r0, #1
 80208bc:	2000      	movhi	r0, #0
 80208be:	f85d fb08 	ldr.w	pc, [sp], #8
 80208c2:	bf00      	nop

080208c4 <__aeabi_dcmpge>:
 80208c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208c8:	f7ff ffce 	bl	8020868 <__aeabi_cdrcmple>
 80208cc:	bf94      	ite	ls
 80208ce:	2001      	movls	r0, #1
 80208d0:	2000      	movhi	r0, #0
 80208d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80208d6:	bf00      	nop

080208d8 <__aeabi_dcmpgt>:
 80208d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208dc:	f7ff ffc4 	bl	8020868 <__aeabi_cdrcmple>
 80208e0:	bf34      	ite	cc
 80208e2:	2001      	movcc	r0, #1
 80208e4:	2000      	movcs	r0, #0
 80208e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80208ea:	bf00      	nop

080208ec <__aeabi_d2f>:
 80208ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80208f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80208f4:	bf24      	itt	cs
 80208f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80208fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80208fe:	d90d      	bls.n	802091c <__aeabi_d2f+0x30>
 8020900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8020904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 802090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8020910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8020914:	bf08      	it	eq
 8020916:	f020 0001 	biceq.w	r0, r0, #1
 802091a:	4770      	bx	lr
 802091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8020920:	d121      	bne.n	8020966 <__aeabi_d2f+0x7a>
 8020922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8020926:	bfbc      	itt	lt
 8020928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 802092c:	4770      	bxlt	lr
 802092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8020936:	f1c2 0218 	rsb	r2, r2, #24
 802093a:	f1c2 0c20 	rsb	ip, r2, #32
 802093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8020942:	fa20 f002 	lsr.w	r0, r0, r2
 8020946:	bf18      	it	ne
 8020948:	f040 0001 	orrne.w	r0, r0, #1
 802094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8020954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8020958:	ea40 000c 	orr.w	r0, r0, ip
 802095c:	fa23 f302 	lsr.w	r3, r3, r2
 8020960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020964:	e7cc      	b.n	8020900 <__aeabi_d2f+0x14>
 8020966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 802096a:	d107      	bne.n	802097c <__aeabi_d2f+0x90>
 802096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8020970:	bf1e      	ittt	ne
 8020972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8020976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 802097a:	4770      	bxne	lr
 802097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8020980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8020984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020988:	4770      	bx	lr
 802098a:	bf00      	nop

0802098c <__aeabi_uldivmod>:
 802098c:	b953      	cbnz	r3, 80209a4 <__aeabi_uldivmod+0x18>
 802098e:	b94a      	cbnz	r2, 80209a4 <__aeabi_uldivmod+0x18>
 8020990:	2900      	cmp	r1, #0
 8020992:	bf08      	it	eq
 8020994:	2800      	cmpeq	r0, #0
 8020996:	bf1c      	itt	ne
 8020998:	f04f 31ff 	movne.w	r1, #4294967295
 802099c:	f04f 30ff 	movne.w	r0, #4294967295
 80209a0:	f000 b996 	b.w	8020cd0 <__aeabi_idiv0>
 80209a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80209a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80209ac:	f000 f82a 	bl	8020a04 <__udivmoddi4>
 80209b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80209b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80209b8:	b004      	add	sp, #16
 80209ba:	4770      	bx	lr

080209bc <__aeabi_f2ulz>:
 80209bc:	b5d0      	push	{r4, r6, r7, lr}
 80209be:	f7ff fca3 	bl	8020308 <__aeabi_f2d>
 80209c2:	2200      	movs	r2, #0
 80209c4:	4b0d      	ldr	r3, [pc, #52]	; (80209fc <__aeabi_f2ulz+0x40>)
 80209c6:	4606      	mov	r6, r0
 80209c8:	460f      	mov	r7, r1
 80209ca:	f7ff fcf5 	bl	80203b8 <__aeabi_dmul>
 80209ce:	f000 f981 	bl	8020cd4 <__aeabi_d2uiz>
 80209d2:	4604      	mov	r4, r0
 80209d4:	f7ff fc76 	bl	80202c4 <__aeabi_ui2d>
 80209d8:	2200      	movs	r2, #0
 80209da:	4b09      	ldr	r3, [pc, #36]	; (8020a00 <__aeabi_f2ulz+0x44>)
 80209dc:	f7ff fcec 	bl	80203b8 <__aeabi_dmul>
 80209e0:	4602      	mov	r2, r0
 80209e2:	460b      	mov	r3, r1
 80209e4:	4630      	mov	r0, r6
 80209e6:	4639      	mov	r1, r7
 80209e8:	f7ff fb2e 	bl	8020048 <__aeabi_dsub>
 80209ec:	f000 f972 	bl	8020cd4 <__aeabi_d2uiz>
 80209f0:	2200      	movs	r2, #0
 80209f2:	4623      	mov	r3, r4
 80209f4:	4310      	orrs	r0, r2
 80209f6:	4619      	mov	r1, r3
 80209f8:	bdd0      	pop	{r4, r6, r7, pc}
 80209fa:	bf00      	nop
 80209fc:	3df00000 	.word	0x3df00000
 8020a00:	41f00000 	.word	0x41f00000

08020a04 <__udivmoddi4>:
 8020a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020a08:	9e08      	ldr	r6, [sp, #32]
 8020a0a:	4604      	mov	r4, r0
 8020a0c:	4688      	mov	r8, r1
 8020a0e:	2b00      	cmp	r3, #0
 8020a10:	d14b      	bne.n	8020aaa <__udivmoddi4+0xa6>
 8020a12:	428a      	cmp	r2, r1
 8020a14:	4615      	mov	r5, r2
 8020a16:	d967      	bls.n	8020ae8 <__udivmoddi4+0xe4>
 8020a18:	fab2 f282 	clz	r2, r2
 8020a1c:	b14a      	cbz	r2, 8020a32 <__udivmoddi4+0x2e>
 8020a1e:	f1c2 0720 	rsb	r7, r2, #32
 8020a22:	fa01 f302 	lsl.w	r3, r1, r2
 8020a26:	fa20 f707 	lsr.w	r7, r0, r7
 8020a2a:	4095      	lsls	r5, r2
 8020a2c:	ea47 0803 	orr.w	r8, r7, r3
 8020a30:	4094      	lsls	r4, r2
 8020a32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020a36:	0c23      	lsrs	r3, r4, #16
 8020a38:	fbb8 f7fe 	udiv	r7, r8, lr
 8020a3c:	fa1f fc85 	uxth.w	ip, r5
 8020a40:	fb0e 8817 	mls	r8, lr, r7, r8
 8020a44:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8020a48:	fb07 f10c 	mul.w	r1, r7, ip
 8020a4c:	4299      	cmp	r1, r3
 8020a4e:	d909      	bls.n	8020a64 <__udivmoddi4+0x60>
 8020a50:	18eb      	adds	r3, r5, r3
 8020a52:	f107 30ff 	add.w	r0, r7, #4294967295
 8020a56:	f080 811b 	bcs.w	8020c90 <__udivmoddi4+0x28c>
 8020a5a:	4299      	cmp	r1, r3
 8020a5c:	f240 8118 	bls.w	8020c90 <__udivmoddi4+0x28c>
 8020a60:	3f02      	subs	r7, #2
 8020a62:	442b      	add	r3, r5
 8020a64:	1a5b      	subs	r3, r3, r1
 8020a66:	b2a4      	uxth	r4, r4
 8020a68:	fbb3 f0fe 	udiv	r0, r3, lr
 8020a6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8020a70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020a74:	fb00 fc0c 	mul.w	ip, r0, ip
 8020a78:	45a4      	cmp	ip, r4
 8020a7a:	d909      	bls.n	8020a90 <__udivmoddi4+0x8c>
 8020a7c:	192c      	adds	r4, r5, r4
 8020a7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8020a82:	f080 8107 	bcs.w	8020c94 <__udivmoddi4+0x290>
 8020a86:	45a4      	cmp	ip, r4
 8020a88:	f240 8104 	bls.w	8020c94 <__udivmoddi4+0x290>
 8020a8c:	3802      	subs	r0, #2
 8020a8e:	442c      	add	r4, r5
 8020a90:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8020a94:	eba4 040c 	sub.w	r4, r4, ip
 8020a98:	2700      	movs	r7, #0
 8020a9a:	b11e      	cbz	r6, 8020aa4 <__udivmoddi4+0xa0>
 8020a9c:	40d4      	lsrs	r4, r2
 8020a9e:	2300      	movs	r3, #0
 8020aa0:	e9c6 4300 	strd	r4, r3, [r6]
 8020aa4:	4639      	mov	r1, r7
 8020aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020aaa:	428b      	cmp	r3, r1
 8020aac:	d909      	bls.n	8020ac2 <__udivmoddi4+0xbe>
 8020aae:	2e00      	cmp	r6, #0
 8020ab0:	f000 80eb 	beq.w	8020c8a <__udivmoddi4+0x286>
 8020ab4:	2700      	movs	r7, #0
 8020ab6:	e9c6 0100 	strd	r0, r1, [r6]
 8020aba:	4638      	mov	r0, r7
 8020abc:	4639      	mov	r1, r7
 8020abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020ac2:	fab3 f783 	clz	r7, r3
 8020ac6:	2f00      	cmp	r7, #0
 8020ac8:	d147      	bne.n	8020b5a <__udivmoddi4+0x156>
 8020aca:	428b      	cmp	r3, r1
 8020acc:	d302      	bcc.n	8020ad4 <__udivmoddi4+0xd0>
 8020ace:	4282      	cmp	r2, r0
 8020ad0:	f200 80fa 	bhi.w	8020cc8 <__udivmoddi4+0x2c4>
 8020ad4:	1a84      	subs	r4, r0, r2
 8020ad6:	eb61 0303 	sbc.w	r3, r1, r3
 8020ada:	2001      	movs	r0, #1
 8020adc:	4698      	mov	r8, r3
 8020ade:	2e00      	cmp	r6, #0
 8020ae0:	d0e0      	beq.n	8020aa4 <__udivmoddi4+0xa0>
 8020ae2:	e9c6 4800 	strd	r4, r8, [r6]
 8020ae6:	e7dd      	b.n	8020aa4 <__udivmoddi4+0xa0>
 8020ae8:	b902      	cbnz	r2, 8020aec <__udivmoddi4+0xe8>
 8020aea:	deff      	udf	#255	; 0xff
 8020aec:	fab2 f282 	clz	r2, r2
 8020af0:	2a00      	cmp	r2, #0
 8020af2:	f040 808f 	bne.w	8020c14 <__udivmoddi4+0x210>
 8020af6:	1b49      	subs	r1, r1, r5
 8020af8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020afc:	fa1f f885 	uxth.w	r8, r5
 8020b00:	2701      	movs	r7, #1
 8020b02:	fbb1 fcfe 	udiv	ip, r1, lr
 8020b06:	0c23      	lsrs	r3, r4, #16
 8020b08:	fb0e 111c 	mls	r1, lr, ip, r1
 8020b0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020b10:	fb08 f10c 	mul.w	r1, r8, ip
 8020b14:	4299      	cmp	r1, r3
 8020b16:	d907      	bls.n	8020b28 <__udivmoddi4+0x124>
 8020b18:	18eb      	adds	r3, r5, r3
 8020b1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8020b1e:	d202      	bcs.n	8020b26 <__udivmoddi4+0x122>
 8020b20:	4299      	cmp	r1, r3
 8020b22:	f200 80cd 	bhi.w	8020cc0 <__udivmoddi4+0x2bc>
 8020b26:	4684      	mov	ip, r0
 8020b28:	1a59      	subs	r1, r3, r1
 8020b2a:	b2a3      	uxth	r3, r4
 8020b2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8020b30:	fb0e 1410 	mls	r4, lr, r0, r1
 8020b34:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8020b38:	fb08 f800 	mul.w	r8, r8, r0
 8020b3c:	45a0      	cmp	r8, r4
 8020b3e:	d907      	bls.n	8020b50 <__udivmoddi4+0x14c>
 8020b40:	192c      	adds	r4, r5, r4
 8020b42:	f100 33ff 	add.w	r3, r0, #4294967295
 8020b46:	d202      	bcs.n	8020b4e <__udivmoddi4+0x14a>
 8020b48:	45a0      	cmp	r8, r4
 8020b4a:	f200 80b6 	bhi.w	8020cba <__udivmoddi4+0x2b6>
 8020b4e:	4618      	mov	r0, r3
 8020b50:	eba4 0408 	sub.w	r4, r4, r8
 8020b54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8020b58:	e79f      	b.n	8020a9a <__udivmoddi4+0x96>
 8020b5a:	f1c7 0c20 	rsb	ip, r7, #32
 8020b5e:	40bb      	lsls	r3, r7
 8020b60:	fa22 fe0c 	lsr.w	lr, r2, ip
 8020b64:	ea4e 0e03 	orr.w	lr, lr, r3
 8020b68:	fa01 f407 	lsl.w	r4, r1, r7
 8020b6c:	fa20 f50c 	lsr.w	r5, r0, ip
 8020b70:	fa21 f30c 	lsr.w	r3, r1, ip
 8020b74:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8020b78:	4325      	orrs	r5, r4
 8020b7a:	fbb3 f9f8 	udiv	r9, r3, r8
 8020b7e:	0c2c      	lsrs	r4, r5, #16
 8020b80:	fb08 3319 	mls	r3, r8, r9, r3
 8020b84:	fa1f fa8e 	uxth.w	sl, lr
 8020b88:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8020b8c:	fb09 f40a 	mul.w	r4, r9, sl
 8020b90:	429c      	cmp	r4, r3
 8020b92:	fa02 f207 	lsl.w	r2, r2, r7
 8020b96:	fa00 f107 	lsl.w	r1, r0, r7
 8020b9a:	d90b      	bls.n	8020bb4 <__udivmoddi4+0x1b0>
 8020b9c:	eb1e 0303 	adds.w	r3, lr, r3
 8020ba0:	f109 30ff 	add.w	r0, r9, #4294967295
 8020ba4:	f080 8087 	bcs.w	8020cb6 <__udivmoddi4+0x2b2>
 8020ba8:	429c      	cmp	r4, r3
 8020baa:	f240 8084 	bls.w	8020cb6 <__udivmoddi4+0x2b2>
 8020bae:	f1a9 0902 	sub.w	r9, r9, #2
 8020bb2:	4473      	add	r3, lr
 8020bb4:	1b1b      	subs	r3, r3, r4
 8020bb6:	b2ad      	uxth	r5, r5
 8020bb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8020bbc:	fb08 3310 	mls	r3, r8, r0, r3
 8020bc0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8020bc4:	fb00 fa0a 	mul.w	sl, r0, sl
 8020bc8:	45a2      	cmp	sl, r4
 8020bca:	d908      	bls.n	8020bde <__udivmoddi4+0x1da>
 8020bcc:	eb1e 0404 	adds.w	r4, lr, r4
 8020bd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8020bd4:	d26b      	bcs.n	8020cae <__udivmoddi4+0x2aa>
 8020bd6:	45a2      	cmp	sl, r4
 8020bd8:	d969      	bls.n	8020cae <__udivmoddi4+0x2aa>
 8020bda:	3802      	subs	r0, #2
 8020bdc:	4474      	add	r4, lr
 8020bde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020be2:	fba0 8902 	umull	r8, r9, r0, r2
 8020be6:	eba4 040a 	sub.w	r4, r4, sl
 8020bea:	454c      	cmp	r4, r9
 8020bec:	46c2      	mov	sl, r8
 8020bee:	464b      	mov	r3, r9
 8020bf0:	d354      	bcc.n	8020c9c <__udivmoddi4+0x298>
 8020bf2:	d051      	beq.n	8020c98 <__udivmoddi4+0x294>
 8020bf4:	2e00      	cmp	r6, #0
 8020bf6:	d069      	beq.n	8020ccc <__udivmoddi4+0x2c8>
 8020bf8:	ebb1 050a 	subs.w	r5, r1, sl
 8020bfc:	eb64 0403 	sbc.w	r4, r4, r3
 8020c00:	fa04 fc0c 	lsl.w	ip, r4, ip
 8020c04:	40fd      	lsrs	r5, r7
 8020c06:	40fc      	lsrs	r4, r7
 8020c08:	ea4c 0505 	orr.w	r5, ip, r5
 8020c0c:	e9c6 5400 	strd	r5, r4, [r6]
 8020c10:	2700      	movs	r7, #0
 8020c12:	e747      	b.n	8020aa4 <__udivmoddi4+0xa0>
 8020c14:	f1c2 0320 	rsb	r3, r2, #32
 8020c18:	fa20 f703 	lsr.w	r7, r0, r3
 8020c1c:	4095      	lsls	r5, r2
 8020c1e:	fa01 f002 	lsl.w	r0, r1, r2
 8020c22:	fa21 f303 	lsr.w	r3, r1, r3
 8020c26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020c2a:	4338      	orrs	r0, r7
 8020c2c:	0c01      	lsrs	r1, r0, #16
 8020c2e:	fbb3 f7fe 	udiv	r7, r3, lr
 8020c32:	fa1f f885 	uxth.w	r8, r5
 8020c36:	fb0e 3317 	mls	r3, lr, r7, r3
 8020c3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020c3e:	fb07 f308 	mul.w	r3, r7, r8
 8020c42:	428b      	cmp	r3, r1
 8020c44:	fa04 f402 	lsl.w	r4, r4, r2
 8020c48:	d907      	bls.n	8020c5a <__udivmoddi4+0x256>
 8020c4a:	1869      	adds	r1, r5, r1
 8020c4c:	f107 3cff 	add.w	ip, r7, #4294967295
 8020c50:	d22f      	bcs.n	8020cb2 <__udivmoddi4+0x2ae>
 8020c52:	428b      	cmp	r3, r1
 8020c54:	d92d      	bls.n	8020cb2 <__udivmoddi4+0x2ae>
 8020c56:	3f02      	subs	r7, #2
 8020c58:	4429      	add	r1, r5
 8020c5a:	1acb      	subs	r3, r1, r3
 8020c5c:	b281      	uxth	r1, r0
 8020c5e:	fbb3 f0fe 	udiv	r0, r3, lr
 8020c62:	fb0e 3310 	mls	r3, lr, r0, r3
 8020c66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020c6a:	fb00 f308 	mul.w	r3, r0, r8
 8020c6e:	428b      	cmp	r3, r1
 8020c70:	d907      	bls.n	8020c82 <__udivmoddi4+0x27e>
 8020c72:	1869      	adds	r1, r5, r1
 8020c74:	f100 3cff 	add.w	ip, r0, #4294967295
 8020c78:	d217      	bcs.n	8020caa <__udivmoddi4+0x2a6>
 8020c7a:	428b      	cmp	r3, r1
 8020c7c:	d915      	bls.n	8020caa <__udivmoddi4+0x2a6>
 8020c7e:	3802      	subs	r0, #2
 8020c80:	4429      	add	r1, r5
 8020c82:	1ac9      	subs	r1, r1, r3
 8020c84:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8020c88:	e73b      	b.n	8020b02 <__udivmoddi4+0xfe>
 8020c8a:	4637      	mov	r7, r6
 8020c8c:	4630      	mov	r0, r6
 8020c8e:	e709      	b.n	8020aa4 <__udivmoddi4+0xa0>
 8020c90:	4607      	mov	r7, r0
 8020c92:	e6e7      	b.n	8020a64 <__udivmoddi4+0x60>
 8020c94:	4618      	mov	r0, r3
 8020c96:	e6fb      	b.n	8020a90 <__udivmoddi4+0x8c>
 8020c98:	4541      	cmp	r1, r8
 8020c9a:	d2ab      	bcs.n	8020bf4 <__udivmoddi4+0x1f0>
 8020c9c:	ebb8 0a02 	subs.w	sl, r8, r2
 8020ca0:	eb69 020e 	sbc.w	r2, r9, lr
 8020ca4:	3801      	subs	r0, #1
 8020ca6:	4613      	mov	r3, r2
 8020ca8:	e7a4      	b.n	8020bf4 <__udivmoddi4+0x1f0>
 8020caa:	4660      	mov	r0, ip
 8020cac:	e7e9      	b.n	8020c82 <__udivmoddi4+0x27e>
 8020cae:	4618      	mov	r0, r3
 8020cb0:	e795      	b.n	8020bde <__udivmoddi4+0x1da>
 8020cb2:	4667      	mov	r7, ip
 8020cb4:	e7d1      	b.n	8020c5a <__udivmoddi4+0x256>
 8020cb6:	4681      	mov	r9, r0
 8020cb8:	e77c      	b.n	8020bb4 <__udivmoddi4+0x1b0>
 8020cba:	3802      	subs	r0, #2
 8020cbc:	442c      	add	r4, r5
 8020cbe:	e747      	b.n	8020b50 <__udivmoddi4+0x14c>
 8020cc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8020cc4:	442b      	add	r3, r5
 8020cc6:	e72f      	b.n	8020b28 <__udivmoddi4+0x124>
 8020cc8:	4638      	mov	r0, r7
 8020cca:	e708      	b.n	8020ade <__udivmoddi4+0xda>
 8020ccc:	4637      	mov	r7, r6
 8020cce:	e6e9      	b.n	8020aa4 <__udivmoddi4+0xa0>

08020cd0 <__aeabi_idiv0>:
 8020cd0:	4770      	bx	lr
 8020cd2:	bf00      	nop

08020cd4 <__aeabi_d2uiz>:
 8020cd4:	004a      	lsls	r2, r1, #1
 8020cd6:	d211      	bcs.n	8020cfc <__aeabi_d2uiz+0x28>
 8020cd8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020cdc:	d211      	bcs.n	8020d02 <__aeabi_d2uiz+0x2e>
 8020cde:	d50d      	bpl.n	8020cfc <__aeabi_d2uiz+0x28>
 8020ce0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020ce4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020ce8:	d40e      	bmi.n	8020d08 <__aeabi_d2uiz+0x34>
 8020cea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020cee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020cf2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020cf6:	fa23 f002 	lsr.w	r0, r3, r2
 8020cfa:	4770      	bx	lr
 8020cfc:	f04f 0000 	mov.w	r0, #0
 8020d00:	4770      	bx	lr
 8020d02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020d06:	d102      	bne.n	8020d0e <__aeabi_d2uiz+0x3a>
 8020d08:	f04f 30ff 	mov.w	r0, #4294967295
 8020d0c:	4770      	bx	lr
 8020d0e:	f04f 0000 	mov.w	r0, #0
 8020d12:	4770      	bx	lr

08020d14 <_ZN7EncoderC1Ev>:
#include "encoder.hpp"
#include "declare_extern.h"

Encoder::Encoder() : distance_(0)
 8020d14:	b480      	push	{r7}
 8020d16:	b083      	sub	sp, #12
 8020d18:	af00      	add	r7, sp, #0
 8020d1a:	6078      	str	r0, [r7, #4]
				   , distance_stack_(0)
				   , distance_difference_(0) {}
 8020d1c:	687b      	ldr	r3, [r7, #4]
 8020d1e:	f04f 0200 	mov.w	r2, #0
 8020d22:	601a      	str	r2, [r3, #0]
 8020d24:	687b      	ldr	r3, [r7, #4]
 8020d26:	f04f 0200 	mov.w	r2, #0
 8020d2a:	605a      	str	r2, [r3, #4]
 8020d2c:	687b      	ldr	r3, [r7, #4]
 8020d2e:	f04f 0200 	mov.w	r2, #0
 8020d32:	609a      	str	r2, [r3, #8]
 8020d34:	687b      	ldr	r3, [r7, #4]
 8020d36:	4618      	mov	r0, r3
 8020d38:	370c      	adds	r7, #12
 8020d3a:	46bd      	mov	sp, r7
 8020d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d40:	4770      	bx	lr
	...

08020d44 <_ZN7Encoder4InitEv>:

void Encoder::Init()
{
 8020d44:	b580      	push	{r7, lr}
 8020d46:	b082      	sub	sp, #8
 8020d48:	af00      	add	r7, sp, #0
 8020d4a:	6078      	str	r0, [r7, #4]
	if(HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL) != HAL_OK)
 8020d4c:	213c      	movs	r1, #60	; 0x3c
 8020d4e:	4812      	ldr	r0, [pc, #72]	; (8020d98 <_ZN7Encoder4InitEv+0x54>)
 8020d50:	f008 fc80 	bl	8029654 <HAL_TIM_Encoder_Start>
 8020d54:	4603      	mov	r3, r0
 8020d56:	2b00      	cmp	r3, #0
 8020d58:	bf14      	ite	ne
 8020d5a:	2301      	movne	r3, #1
 8020d5c:	2300      	moveq	r3, #0
 8020d5e:	b2db      	uxtb	r3, r3
 8020d60:	2b00      	cmp	r3, #0
 8020d62:	d004      	beq.n	8020d6e <_ZN7Encoder4InitEv+0x2a>
	{
#ifdef DEBUG_MODE
        g_error_handler_tim8 = true;
 8020d64:	4b0d      	ldr	r3, [pc, #52]	; (8020d9c <_ZN7Encoder4InitEv+0x58>)
 8020d66:	2201      	movs	r2, #1
 8020d68:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

		Error_Handler();
 8020d6a:	f003 f8d9 	bl	8023f20 <Error_Handler>
	}

	if(HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL) != HAL_OK)
 8020d6e:	213c      	movs	r1, #60	; 0x3c
 8020d70:	480b      	ldr	r0, [pc, #44]	; (8020da0 <_ZN7Encoder4InitEv+0x5c>)
 8020d72:	f008 fc6f 	bl	8029654 <HAL_TIM_Encoder_Start>
 8020d76:	4603      	mov	r3, r0
 8020d78:	2b00      	cmp	r3, #0
 8020d7a:	bf14      	ite	ne
 8020d7c:	2301      	movne	r3, #1
 8020d7e:	2300      	moveq	r3, #0
 8020d80:	b2db      	uxtb	r3, r3
 8020d82:	2b00      	cmp	r3, #0
 8020d84:	d004      	beq.n	8020d90 <_ZN7Encoder4InitEv+0x4c>
	{
#ifdef DEBUG_MODE
        g_error_handler_tim4 = true;
 8020d86:	4b07      	ldr	r3, [pc, #28]	; (8020da4 <_ZN7Encoder4InitEv+0x60>)
 8020d88:	2201      	movs	r2, #1
 8020d8a:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

		Error_Handler();
 8020d8c:	f003 f8c8 	bl	8023f20 <Error_Handler>
	}
}
 8020d90:	bf00      	nop
 8020d92:	3708      	adds	r7, #8
 8020d94:	46bd      	mov	sp, r7
 8020d96:	bd80      	pop	{r7, pc}
 8020d98:	20000644 	.word	0x20000644
 8020d9c:	200000c2 	.word	0x200000c2
 8020da0:	20000684 	.word	0x20000684
 8020da4:	200000c1 	.word	0x200000c1

08020da8 <_ZN7Encoder6UpdateEv>:

void Encoder::Update()
{
 8020da8:	b590      	push	{r4, r7, lr}
 8020daa:	b087      	sub	sp, #28
 8020dac:	af00      	add	r7, sp, #0
 8020dae:	6078      	str	r0, [r7, #4]
	int16_t count_l = static_cast<int16_t>((TIM8 -> CNT) - START_COUNT);
 8020db0:	4b39      	ldr	r3, [pc, #228]	; (8020e98 <_ZN7Encoder6UpdateEv+0xf0>)
 8020db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020db4:	b29b      	uxth	r3, r3
 8020db6:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8020dba:	3b7f      	subs	r3, #127	; 0x7f
 8020dbc:	b29b      	uxth	r3, r3
 8020dbe:	82fb      	strh	r3, [r7, #22]
	int16_t count_r = static_cast<int16_t>(START_COUNT - (TIM4 -> CNT));
 8020dc0:	4b36      	ldr	r3, [pc, #216]	; (8020e9c <_ZN7Encoder6UpdateEv+0xf4>)
 8020dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020dc4:	b29b      	uxth	r3, r3
 8020dc6:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 8020dca:	337f      	adds	r3, #127	; 0x7f
 8020dcc:	b29b      	uxth	r3, r3
 8020dce:	82bb      	strh	r3, [r7, #20]
	TIM8 -> CNT = START_COUNT;
 8020dd0:	4b31      	ldr	r3, [pc, #196]	; (8020e98 <_ZN7Encoder6UpdateEv+0xf0>)
 8020dd2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020dd6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = START_COUNT;
 8020dd8:	4b30      	ldr	r3, [pc, #192]	; (8020e9c <_ZN7Encoder6UpdateEv+0xf4>)
 8020dda:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020dde:	625a      	str	r2, [r3, #36]	; 0x24
	float distance_l = static_cast<float>(count_l * DISTANCE_PER_COUNT);
 8020de0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020de4:	4618      	mov	r0, r3
 8020de6:	f7ff fa7d 	bl	80202e4 <__aeabi_i2d>
 8020dea:	a329      	add	r3, pc, #164	; (adr r3, 8020e90 <_ZN7Encoder6UpdateEv+0xe8>)
 8020dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020df0:	f7ff fae2 	bl	80203b8 <__aeabi_dmul>
 8020df4:	4603      	mov	r3, r0
 8020df6:	460c      	mov	r4, r1
 8020df8:	4618      	mov	r0, r3
 8020dfa:	4621      	mov	r1, r4
 8020dfc:	f7ff fd76 	bl	80208ec <__aeabi_d2f>
 8020e00:	4603      	mov	r3, r0
 8020e02:	613b      	str	r3, [r7, #16]
	float distance_r = static_cast<float>(count_r * DISTANCE_PER_COUNT);
 8020e04:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8020e08:	4618      	mov	r0, r3
 8020e0a:	f7ff fa6b 	bl	80202e4 <__aeabi_i2d>
 8020e0e:	a320      	add	r3, pc, #128	; (adr r3, 8020e90 <_ZN7Encoder6UpdateEv+0xe8>)
 8020e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e14:	f7ff fad0 	bl	80203b8 <__aeabi_dmul>
 8020e18:	4603      	mov	r3, r0
 8020e1a:	460c      	mov	r4, r1
 8020e1c:	4618      	mov	r0, r3
 8020e1e:	4621      	mov	r1, r4
 8020e20:	f7ff fd64 	bl	80208ec <__aeabi_d2f>
 8020e24:	4603      	mov	r3, r0
 8020e26:	60fb      	str	r3, [r7, #12]
	float distance = (distance_l + distance_r) / 2.0;
 8020e28:	ed97 7a04 	vldr	s14, [r7, #16]
 8020e2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8020e30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8020e34:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8020e38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8020e3c:	edc7 7a02 	vstr	s15, [r7, #8]

	distance_ = distance;
 8020e40:	687b      	ldr	r3, [r7, #4]
 8020e42:	68ba      	ldr	r2, [r7, #8]
 8020e44:	601a      	str	r2, [r3, #0]
	distance_stack_ += distance;
 8020e46:	687b      	ldr	r3, [r7, #4]
 8020e48:	ed93 7a01 	vldr	s14, [r3, #4]
 8020e4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8020e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020e54:	687b      	ldr	r3, [r7, #4]
 8020e56:	edc3 7a01 	vstr	s15, [r3, #4]
	distance_difference_ = distance_r - distance_l;
 8020e5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8020e5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8020e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8020e66:	687b      	ldr	r3, [r7, #4]
 8020e68:	edc3 7a02 	vstr	s15, [r3, #8]

#ifdef DEBUG_MODE
	g_enc_cnt_l = count_l;
 8020e6c:	4a0c      	ldr	r2, [pc, #48]	; (8020ea0 <_ZN7Encoder6UpdateEv+0xf8>)
 8020e6e:	8afb      	ldrh	r3, [r7, #22]
 8020e70:	8013      	strh	r3, [r2, #0]
	g_enc_cnt_r = count_r;
 8020e72:	4a0c      	ldr	r2, [pc, #48]	; (8020ea4 <_ZN7Encoder6UpdateEv+0xfc>)
 8020e74:	8abb      	ldrh	r3, [r7, #20]
 8020e76:	8013      	strh	r3, [r2, #0]
	g_distance_l = distance_l;
 8020e78:	4a0b      	ldr	r2, [pc, #44]	; (8020ea8 <_ZN7Encoder6UpdateEv+0x100>)
 8020e7a:	693b      	ldr	r3, [r7, #16]
 8020e7c:	6013      	str	r3, [r2, #0]
	g_distance_r = distance_r;
 8020e7e:	4a0b      	ldr	r2, [pc, #44]	; (8020eac <_ZN7Encoder6UpdateEv+0x104>)
 8020e80:	68fb      	ldr	r3, [r7, #12]
 8020e82:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8020e84:	bf00      	nop
 8020e86:	371c      	adds	r7, #28
 8020e88:	46bd      	mov	sp, r7
 8020e8a:	bd90      	pop	{r4, r7, pc}
 8020e8c:	f3af 8000 	nop.w
 8020e90:	5d35653d 	.word	0x5d35653d
 8020e94:	3f7d744f 	.word	0x3f7d744f
 8020e98:	40010400 	.word	0x40010400
 8020e9c:	40000800 	.word	0x40000800
 8020ea0:	200002a0 	.word	0x200002a0
 8020ea4:	200002a2 	.word	0x200002a2
 8020ea8:	200002a4 	.word	0x200002a4
 8020eac:	200002a8 	.word	0x200002a8

08020eb0 <_ZN7Encoder18ResetDistanceStackEv>:
	TIM8 -> CNT = START_COUNT;
	TIM4 -> CNT = START_COUNT;
}

void Encoder::ResetDistanceStack()
{
 8020eb0:	b480      	push	{r7}
 8020eb2:	b083      	sub	sp, #12
 8020eb4:	af00      	add	r7, sp, #0
 8020eb6:	6078      	str	r0, [r7, #4]
	distance_stack_ = 0.0;
 8020eb8:	687b      	ldr	r3, [r7, #4]
 8020eba:	f04f 0200 	mov.w	r2, #0
 8020ebe:	605a      	str	r2, [r3, #4]
}
 8020ec0:	bf00      	nop
 8020ec2:	370c      	adds	r7, #12
 8020ec4:	46bd      	mov	sp, r7
 8020ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eca:	4770      	bx	lr

08020ecc <_ZN7Encoder11GetDistanceEv>:

float Encoder::GetDistance()
{
 8020ecc:	b480      	push	{r7}
 8020ece:	b083      	sub	sp, #12
 8020ed0:	af00      	add	r7, sp, #0
 8020ed2:	6078      	str	r0, [r7, #4]
	return distance_;
 8020ed4:	687b      	ldr	r3, [r7, #4]
 8020ed6:	681b      	ldr	r3, [r3, #0]
 8020ed8:	ee07 3a90 	vmov	s15, r3
}
 8020edc:	eeb0 0a67 	vmov.f32	s0, s15
 8020ee0:	370c      	adds	r7, #12
 8020ee2:	46bd      	mov	sp, r7
 8020ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ee8:	4770      	bx	lr

08020eea <_ZN7Encoder16GetDistanceStackEv>:

float Encoder::GetDistanceStack()
{
 8020eea:	b480      	push	{r7}
 8020eec:	b083      	sub	sp, #12
 8020eee:	af00      	add	r7, sp, #0
 8020ef0:	6078      	str	r0, [r7, #4]
	return distance_stack_;
 8020ef2:	687b      	ldr	r3, [r7, #4]
 8020ef4:	685b      	ldr	r3, [r3, #4]
 8020ef6:	ee07 3a90 	vmov	s15, r3
}
 8020efa:	eeb0 0a67 	vmov.f32	s0, s15
 8020efe:	370c      	adds	r7, #12
 8020f00:	46bd      	mov	sp, r7
 8020f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f06:	4770      	bx	lr

08020f08 <_ZN7Encoder15AngularVelocityEv>:

float Encoder::AngularVelocity()
{
 8020f08:	b590      	push	{r4, r7, lr}
 8020f0a:	b083      	sub	sp, #12
 8020f0c:	af00      	add	r7, sp, #0
 8020f0e:	6078      	str	r0, [r7, #4]
	return distance_difference_ / (TIM6_PERIOD * MACHINE_TREAD);
 8020f10:	687b      	ldr	r3, [r7, #4]
 8020f12:	689b      	ldr	r3, [r3, #8]
 8020f14:	4618      	mov	r0, r3
 8020f16:	f7ff f9f7 	bl	8020308 <__aeabi_f2d>
 8020f1a:	a309      	add	r3, pc, #36	; (adr r3, 8020f40 <_ZN7Encoder15AngularVelocityEv+0x38>)
 8020f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f20:	f7ff fb74 	bl	802060c <__aeabi_ddiv>
 8020f24:	4603      	mov	r3, r0
 8020f26:	460c      	mov	r4, r1
 8020f28:	4618      	mov	r0, r3
 8020f2a:	4621      	mov	r1, r4
 8020f2c:	f7ff fcde 	bl	80208ec <__aeabi_d2f>
 8020f30:	4603      	mov	r3, r0
 8020f32:	ee07 3a90 	vmov	s15, r3
 8020f36:	eeb0 0a67 	vmov.f32	s0, s15
 8020f3a:	370c      	adds	r7, #12
 8020f3c:	46bd      	mov	sp, r7
 8020f3e:	bd90      	pop	{r4, r7, pc}
 8020f40:	00000000 	.word	0x00000000
 8020f44:	4063d800 	.word	0x4063d800

08020f48 <_ZN5Flash5ClearEv>:
#include "flash.hpp"
#include "declare_extern.h"
#include <string.h>

bool Flash::Clear()
{
 8020f48:	b580      	push	{r7, lr}
 8020f4a:	b088      	sub	sp, #32
 8020f4c:	af00      	add	r7, sp, #0
 8020f4e:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 8020f50:	f006 fb34 	bl	80275bc <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef erase;

    erase.TypeErase    = FLASH_TYPEERASE_SECTORS; // Erasure range : Sectors
 8020f54:	2300      	movs	r3, #0
 8020f56:	60fb      	str	r3, [r7, #12]
    erase.Sector       = FLASH_SECTOR_1;          // Which sector : 1
 8020f58:	2301      	movs	r3, #1
 8020f5a:	617b      	str	r3, [r7, #20]
    erase.NbSectors    = 4;                       // How many sector : 4 (1,2,3,4)
 8020f5c:	2304      	movs	r3, #4
 8020f5e:	61bb      	str	r3, [r7, #24]
    erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;   // Voltage range : 2.7 ~ 3.6 [V]
 8020f60:	2302      	movs	r3, #2
 8020f62:	61fb      	str	r3, [r7, #28]

    // Success => 0xFFFFFFFF is stored.
    // Fail => Sector number is stored.
    uint32_t failed_sector = 0;
 8020f64:	2300      	movs	r3, #0
 8020f66:	60bb      	str	r3, [r7, #8]

    if(HAL_FLASHEx_Erase(&erase, &failed_sector) != HAL_OK)
 8020f68:	f107 0208 	add.w	r2, r7, #8
 8020f6c:	f107 030c 	add.w	r3, r7, #12
 8020f70:	4611      	mov	r1, r2
 8020f72:	4618      	mov	r0, r3
 8020f74:	f006 fc82 	bl	802787c <HAL_FLASHEx_Erase>
 8020f78:	4603      	mov	r3, r0
 8020f7a:	2b00      	cmp	r3, #0
 8020f7c:	bf14      	ite	ne
 8020f7e:	2301      	movne	r3, #1
 8020f80:	2300      	moveq	r3, #0
 8020f82:	b2db      	uxtb	r3, r3
 8020f84:	2b00      	cmp	r3, #0
 8020f86:	d004      	beq.n	8020f92 <_ZN5Flash5ClearEv+0x4a>
    {
#ifdef DEBUG_MODE
        g_erase_failed_sector = failed_sector;
 8020f88:	68bb      	ldr	r3, [r7, #8]
 8020f8a:	4a08      	ldr	r2, [pc, #32]	; (8020fac <_ZN5Flash5ClearEv+0x64>)
 8020f8c:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

        return false;
 8020f8e:	2300      	movs	r3, #0
 8020f90:	e008      	b.n	8020fa4 <_ZN5Flash5ClearEv+0x5c>
    }

    HAL_FLASH_Lock();
 8020f92:	f006 fb35 	bl	8027600 <HAL_FLASH_Lock>

    return failed_sector == 0xFFFFFFFF;
 8020f96:	68bb      	ldr	r3, [r7, #8]
 8020f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020f9c:	bf0c      	ite	eq
 8020f9e:	2301      	moveq	r3, #1
 8020fa0:	2300      	movne	r3, #0
 8020fa2:	b2db      	uxtb	r3, r3
}
 8020fa4:	4618      	mov	r0, r3
 8020fa6:	3720      	adds	r7, #32
 8020fa8:	46bd      	mov	sp, r7
 8020faa:	bd80      	pop	{r7, pc}
 8020fac:	200002d8 	.word	0x200002d8

08020fb0 <_ZN5Flash10StoreUint8EmPhm>:

bool Flash::StoreUint8(uint32_t address, uint8_t *data, uint32_t number)
{
 8020fb0:	b590      	push	{r4, r7, lr}
 8020fb2:	b087      	sub	sp, #28
 8020fb4:	af00      	add	r7, sp, #0
 8020fb6:	60f8      	str	r0, [r7, #12]
 8020fb8:	60b9      	str	r1, [r7, #8]
 8020fba:	607a      	str	r2, [r7, #4]
 8020fbc:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8020fbe:	f006 fafd 	bl	80275bc <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 8020fc2:	2300      	movs	r3, #0
 8020fc4:	613b      	str	r3, [r7, #16]
 8020fc6:	693a      	ldr	r2, [r7, #16]
 8020fc8:	683b      	ldr	r3, [r7, #0]
 8020fca:	429a      	cmp	r2, r3
 8020fcc:	d218      	bcs.n	8021000 <_ZN5Flash10StoreUint8EmPhm+0x50>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address++, *data++);
 8020fce:	68b9      	ldr	r1, [r7, #8]
 8020fd0:	1c4b      	adds	r3, r1, #1
 8020fd2:	60bb      	str	r3, [r7, #8]
 8020fd4:	687b      	ldr	r3, [r7, #4]
 8020fd6:	1c5a      	adds	r2, r3, #1
 8020fd8:	607a      	str	r2, [r7, #4]
 8020fda:	781b      	ldrb	r3, [r3, #0]
 8020fdc:	b2db      	uxtb	r3, r3
 8020fde:	f04f 0400 	mov.w	r4, #0
 8020fe2:	461a      	mov	r2, r3
 8020fe4:	4623      	mov	r3, r4
 8020fe6:	2000      	movs	r0, #0
 8020fe8:	f006 fa94 	bl	8027514 <HAL_FLASH_Program>
 8020fec:	4603      	mov	r3, r0
 8020fee:	75fb      	strb	r3, [r7, #23]
        if(result != HAL_OK) break;
 8020ff0:	7dfb      	ldrb	r3, [r7, #23]
 8020ff2:	2b00      	cmp	r3, #0
 8020ff4:	d103      	bne.n	8020ffe <_ZN5Flash10StoreUint8EmPhm+0x4e>
    for(uint32_t i = 0; i < number; i++)
 8020ff6:	693b      	ldr	r3, [r7, #16]
 8020ff8:	3301      	adds	r3, #1
 8020ffa:	613b      	str	r3, [r7, #16]
 8020ffc:	e7e3      	b.n	8020fc6 <_ZN5Flash10StoreUint8EmPhm+0x16>
        if(result != HAL_OK) break;
 8020ffe:	bf00      	nop
    }

    HAL_FLASH_Lock();
 8021000:	f006 fafe 	bl	8027600 <HAL_FLASH_Lock>

    return result == HAL_OK;
 8021004:	7dfb      	ldrb	r3, [r7, #23]
 8021006:	2b00      	cmp	r3, #0
 8021008:	bf0c      	ite	eq
 802100a:	2301      	moveq	r3, #1
 802100c:	2300      	movne	r3, #0
 802100e:	b2db      	uxtb	r3, r3
}
 8021010:	4618      	mov	r0, r3
 8021012:	371c      	adds	r7, #28
 8021014:	46bd      	mov	sp, r7
 8021016:	bd90      	pop	{r4, r7, pc}

08021018 <_ZN5Flash11StoreUint16EmPtm>:

bool Flash::StoreUint16(uint32_t address, uint16_t *data, uint32_t number)
{
 8021018:	b590      	push	{r4, r7, lr}
 802101a:	b087      	sub	sp, #28
 802101c:	af00      	add	r7, sp, #0
 802101e:	60f8      	str	r0, [r7, #12]
 8021020:	60b9      	str	r1, [r7, #8]
 8021022:	607a      	str	r2, [r7, #4]
 8021024:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8021026:	f006 fac9 	bl	80275bc <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 802102a:	2300      	movs	r3, #0
 802102c:	613b      	str	r3, [r7, #16]
 802102e:	693a      	ldr	r2, [r7, #16]
 8021030:	683b      	ldr	r3, [r7, #0]
 8021032:	429a      	cmp	r2, r3
 8021034:	d219      	bcs.n	802106a <_ZN5Flash11StoreUint16EmPtm+0x52>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, *data++);
 8021036:	687b      	ldr	r3, [r7, #4]
 8021038:	1c9a      	adds	r2, r3, #2
 802103a:	607a      	str	r2, [r7, #4]
 802103c:	881b      	ldrh	r3, [r3, #0]
 802103e:	b29b      	uxth	r3, r3
 8021040:	f04f 0400 	mov.w	r4, #0
 8021044:	461a      	mov	r2, r3
 8021046:	4623      	mov	r3, r4
 8021048:	68b9      	ldr	r1, [r7, #8]
 802104a:	2001      	movs	r0, #1
 802104c:	f006 fa62 	bl	8027514 <HAL_FLASH_Program>
 8021050:	4603      	mov	r3, r0
 8021052:	75fb      	strb	r3, [r7, #23]
        address += 2;
 8021054:	68bb      	ldr	r3, [r7, #8]
 8021056:	3302      	adds	r3, #2
 8021058:	60bb      	str	r3, [r7, #8]
        if(result != HAL_OK) break;
 802105a:	7dfb      	ldrb	r3, [r7, #23]
 802105c:	2b00      	cmp	r3, #0
 802105e:	d103      	bne.n	8021068 <_ZN5Flash11StoreUint16EmPtm+0x50>
    for(uint32_t i = 0; i < number; i++)
 8021060:	693b      	ldr	r3, [r7, #16]
 8021062:	3301      	adds	r3, #1
 8021064:	613b      	str	r3, [r7, #16]
 8021066:	e7e2      	b.n	802102e <_ZN5Flash11StoreUint16EmPtm+0x16>
        if(result != HAL_OK) break;
 8021068:	bf00      	nop
    }

    HAL_FLASH_Lock();
 802106a:	f006 fac9 	bl	8027600 <HAL_FLASH_Lock>

    return result == HAL_OK;
 802106e:	7dfb      	ldrb	r3, [r7, #23]
 8021070:	2b00      	cmp	r3, #0
 8021072:	bf0c      	ite	eq
 8021074:	2301      	moveq	r3, #1
 8021076:	2300      	movne	r3, #0
 8021078:	b2db      	uxtb	r3, r3
}
 802107a:	4618      	mov	r0, r3
 802107c:	371c      	adds	r7, #28
 802107e:	46bd      	mov	sp, r7
 8021080:	bd90      	pop	{r4, r7, pc}

08021082 <_ZN5Flash10StoreFloatEmPfm>:

    return result == HAL_OK;
}

bool Flash::StoreFloat(uint32_t address, float *data, uint32_t number)
{
 8021082:	b590      	push	{r4, r7, lr}
 8021084:	b087      	sub	sp, #28
 8021086:	af00      	add	r7, sp, #0
 8021088:	60f8      	str	r0, [r7, #12]
 802108a:	60b9      	str	r1, [r7, #8]
 802108c:	607a      	str	r2, [r7, #4]
 802108e:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8021090:	f006 fa94 	bl	80275bc <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 8021094:	2300      	movs	r3, #0
 8021096:	613b      	str	r3, [r7, #16]
 8021098:	693a      	ldr	r2, [r7, #16]
 802109a:	683b      	ldr	r3, [r7, #0]
 802109c:	429a      	cmp	r2, r3
 802109e:	d21b      	bcs.n	80210d8 <_ZN5Flash10StoreFloatEmPfm+0x56>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, *data++);
 80210a0:	687b      	ldr	r3, [r7, #4]
 80210a2:	1d1a      	adds	r2, r3, #4
 80210a4:	607a      	str	r2, [r7, #4]
 80210a6:	681b      	ldr	r3, [r3, #0]
 80210a8:	4618      	mov	r0, r3
 80210aa:	f7ff fc87 	bl	80209bc <__aeabi_f2ulz>
 80210ae:	4603      	mov	r3, r0
 80210b0:	460c      	mov	r4, r1
 80210b2:	461a      	mov	r2, r3
 80210b4:	4623      	mov	r3, r4
 80210b6:	68b9      	ldr	r1, [r7, #8]
 80210b8:	2002      	movs	r0, #2
 80210ba:	f006 fa2b 	bl	8027514 <HAL_FLASH_Program>
 80210be:	4603      	mov	r3, r0
 80210c0:	75fb      	strb	r3, [r7, #23]
        address += 4;
 80210c2:	68bb      	ldr	r3, [r7, #8]
 80210c4:	3304      	adds	r3, #4
 80210c6:	60bb      	str	r3, [r7, #8]
        if(result != HAL_OK) break;
 80210c8:	7dfb      	ldrb	r3, [r7, #23]
 80210ca:	2b00      	cmp	r3, #0
 80210cc:	d103      	bne.n	80210d6 <_ZN5Flash10StoreFloatEmPfm+0x54>
    for(uint32_t i = 0; i < number; i++)
 80210ce:	693b      	ldr	r3, [r7, #16]
 80210d0:	3301      	adds	r3, #1
 80210d2:	613b      	str	r3, [r7, #16]
 80210d4:	e7e0      	b.n	8021098 <_ZN5Flash10StoreFloatEmPfm+0x16>
        if(result != HAL_OK) break;
 80210d6:	bf00      	nop
    }

    HAL_FLASH_Lock();
 80210d8:	f006 fa92 	bl	8027600 <HAL_FLASH_Lock>

    return result == HAL_OK;
 80210dc:	7dfb      	ldrb	r3, [r7, #23]
 80210de:	2b00      	cmp	r3, #0
 80210e0:	bf0c      	ite	eq
 80210e2:	2301      	moveq	r3, #1
 80210e4:	2300      	movne	r3, #0
 80210e6:	b2db      	uxtb	r3, r3
}
 80210e8:	4618      	mov	r0, r3
 80210ea:	371c      	adds	r7, #28
 80210ec:	46bd      	mov	sp, r7
 80210ee:	bd90      	pop	{r4, r7, pc}

080210f0 <_ZN5Flash14CheckBlankByteEmm>:
{
    memcpy(data, reinterpret_cast<uint32_t*>(address), size);
}

bool Flash::CheckBlankByte(uint32_t address, uint32_t number)
{
 80210f0:	b5b0      	push	{r4, r5, r7, lr}
 80210f2:	b088      	sub	sp, #32
 80210f4:	af00      	add	r7, sp, #0
 80210f6:	60f8      	str	r0, [r7, #12]
 80210f8:	60b9      	str	r1, [r7, #8]
 80210fa:	607a      	str	r2, [r7, #4]

    memcpy(byte, reinterpret_cast<uint32_t*>(address), number);

    for(uint32_t i = 0; i < number; i++) if(byte[i] != 0xFF) return false;

    return true;
 80210fc:	466b      	mov	r3, sp
 80210fe:	461d      	mov	r5, r3
    uint8_t byte[number];
 8021100:	687b      	ldr	r3, [r7, #4]
 8021102:	1e58      	subs	r0, r3, #1
 8021104:	61b8      	str	r0, [r7, #24]
 8021106:	4603      	mov	r3, r0
 8021108:	3301      	adds	r3, #1
 802110a:	4619      	mov	r1, r3
 802110c:	f04f 0200 	mov.w	r2, #0
 8021110:	f04f 0300 	mov.w	r3, #0
 8021114:	f04f 0400 	mov.w	r4, #0
 8021118:	00d4      	lsls	r4, r2, #3
 802111a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 802111e:	00cb      	lsls	r3, r1, #3
 8021120:	4603      	mov	r3, r0
 8021122:	3301      	adds	r3, #1
 8021124:	4619      	mov	r1, r3
 8021126:	f04f 0200 	mov.w	r2, #0
 802112a:	f04f 0300 	mov.w	r3, #0
 802112e:	f04f 0400 	mov.w	r4, #0
 8021132:	00d4      	lsls	r4, r2, #3
 8021134:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8021138:	00cb      	lsls	r3, r1, #3
 802113a:	4603      	mov	r3, r0
 802113c:	3301      	adds	r3, #1
 802113e:	3307      	adds	r3, #7
 8021140:	08db      	lsrs	r3, r3, #3
 8021142:	00db      	lsls	r3, r3, #3
 8021144:	ebad 0d03 	sub.w	sp, sp, r3
 8021148:	466b      	mov	r3, sp
 802114a:	3300      	adds	r3, #0
 802114c:	617b      	str	r3, [r7, #20]
    memcpy(byte, reinterpret_cast<uint32_t*>(address), number);
 802114e:	697b      	ldr	r3, [r7, #20]
 8021150:	68b9      	ldr	r1, [r7, #8]
 8021152:	687a      	ldr	r2, [r7, #4]
 8021154:	4618      	mov	r0, r3
 8021156:	f009 f989 	bl	802a46c <memcpy>
    for(uint32_t i = 0; i < number; i++) if(byte[i] != 0xFF) return false;
 802115a:	2300      	movs	r3, #0
 802115c:	61fb      	str	r3, [r7, #28]
 802115e:	69fa      	ldr	r2, [r7, #28]
 8021160:	687b      	ldr	r3, [r7, #4]
 8021162:	429a      	cmp	r2, r3
 8021164:	d20b      	bcs.n	802117e <_ZN5Flash14CheckBlankByteEmm+0x8e>
 8021166:	697a      	ldr	r2, [r7, #20]
 8021168:	69fb      	ldr	r3, [r7, #28]
 802116a:	4413      	add	r3, r2
 802116c:	781b      	ldrb	r3, [r3, #0]
 802116e:	2bff      	cmp	r3, #255	; 0xff
 8021170:	d001      	beq.n	8021176 <_ZN5Flash14CheckBlankByteEmm+0x86>
 8021172:	2300      	movs	r3, #0
 8021174:	e004      	b.n	8021180 <_ZN5Flash14CheckBlankByteEmm+0x90>
 8021176:	69fb      	ldr	r3, [r7, #28]
 8021178:	3301      	adds	r3, #1
 802117a:	61fb      	str	r3, [r7, #28]
 802117c:	e7ef      	b.n	802115e <_ZN5Flash14CheckBlankByteEmm+0x6e>
    return true;
 802117e:	2301      	movs	r3, #1
 8021180:	46ad      	mov	sp, r5
}
 8021182:	4618      	mov	r0, r3
 8021184:	3720      	adds	r7, #32
 8021186:	46bd      	mov	sp, r7
 8021188:	bdb0      	pop	{r4, r5, r7, pc}

0802118a <_ZN5Flash18CheckBlankHalfwordEmm>:

bool Flash::CheckBlankHalfword(uint32_t address, uint32_t number)
{
 802118a:	b5b0      	push	{r4, r5, r7, lr}
 802118c:	b088      	sub	sp, #32
 802118e:	af00      	add	r7, sp, #0
 8021190:	60f8      	str	r0, [r7, #12]
 8021192:	60b9      	str	r1, [r7, #8]
 8021194:	607a      	str	r2, [r7, #4]

    memcpy(half, reinterpret_cast<uint32_t*>(address), number*2);

    for(uint32_t i = 0; i < number; i++) if(half[i] != 0xFFFF) return false;

    return true;
 8021196:	466b      	mov	r3, sp
 8021198:	461d      	mov	r5, r3
    uint16_t half[number];
 802119a:	687b      	ldr	r3, [r7, #4]
 802119c:	1e58      	subs	r0, r3, #1
 802119e:	61b8      	str	r0, [r7, #24]
 80211a0:	4603      	mov	r3, r0
 80211a2:	3301      	adds	r3, #1
 80211a4:	4619      	mov	r1, r3
 80211a6:	f04f 0200 	mov.w	r2, #0
 80211aa:	f04f 0300 	mov.w	r3, #0
 80211ae:	f04f 0400 	mov.w	r4, #0
 80211b2:	0114      	lsls	r4, r2, #4
 80211b4:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80211b8:	010b      	lsls	r3, r1, #4
 80211ba:	4603      	mov	r3, r0
 80211bc:	3301      	adds	r3, #1
 80211be:	4619      	mov	r1, r3
 80211c0:	f04f 0200 	mov.w	r2, #0
 80211c4:	f04f 0300 	mov.w	r3, #0
 80211c8:	f04f 0400 	mov.w	r4, #0
 80211cc:	0114      	lsls	r4, r2, #4
 80211ce:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80211d2:	010b      	lsls	r3, r1, #4
 80211d4:	4603      	mov	r3, r0
 80211d6:	3301      	adds	r3, #1
 80211d8:	005b      	lsls	r3, r3, #1
 80211da:	3301      	adds	r3, #1
 80211dc:	3307      	adds	r3, #7
 80211de:	08db      	lsrs	r3, r3, #3
 80211e0:	00db      	lsls	r3, r3, #3
 80211e2:	ebad 0d03 	sub.w	sp, sp, r3
 80211e6:	466b      	mov	r3, sp
 80211e8:	3301      	adds	r3, #1
 80211ea:	085b      	lsrs	r3, r3, #1
 80211ec:	005b      	lsls	r3, r3, #1
 80211ee:	617b      	str	r3, [r7, #20]
    memcpy(half, reinterpret_cast<uint32_t*>(address), number*2);
 80211f0:	6978      	ldr	r0, [r7, #20]
 80211f2:	68b9      	ldr	r1, [r7, #8]
 80211f4:	687b      	ldr	r3, [r7, #4]
 80211f6:	005b      	lsls	r3, r3, #1
 80211f8:	461a      	mov	r2, r3
 80211fa:	f009 f937 	bl	802a46c <memcpy>
    for(uint32_t i = 0; i < number; i++) if(half[i] != 0xFFFF) return false;
 80211fe:	2300      	movs	r3, #0
 8021200:	61fb      	str	r3, [r7, #28]
 8021202:	69fa      	ldr	r2, [r7, #28]
 8021204:	687b      	ldr	r3, [r7, #4]
 8021206:	429a      	cmp	r2, r3
 8021208:	d20d      	bcs.n	8021226 <_ZN5Flash18CheckBlankHalfwordEmm+0x9c>
 802120a:	697b      	ldr	r3, [r7, #20]
 802120c:	69fa      	ldr	r2, [r7, #28]
 802120e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8021212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021216:	4293      	cmp	r3, r2
 8021218:	d001      	beq.n	802121e <_ZN5Flash18CheckBlankHalfwordEmm+0x94>
 802121a:	2300      	movs	r3, #0
 802121c:	e004      	b.n	8021228 <_ZN5Flash18CheckBlankHalfwordEmm+0x9e>
 802121e:	69fb      	ldr	r3, [r7, #28]
 8021220:	3301      	adds	r3, #1
 8021222:	61fb      	str	r3, [r7, #28]
 8021224:	e7ed      	b.n	8021202 <_ZN5Flash18CheckBlankHalfwordEmm+0x78>
    return true;
 8021226:	2301      	movs	r3, #1
 8021228:	46ad      	mov	sp, r5
}
 802122a:	4618      	mov	r0, r3
 802122c:	3720      	adds	r7, #32
 802122e:	46bd      	mov	sp, r7
 8021230:	bdb0      	pop	{r4, r5, r7, pc}

08021232 <_ZN5Flash14CheckBlankWordEmm>:

bool Flash::CheckBlankWord(uint32_t address, uint32_t number)
{
 8021232:	b5b0      	push	{r4, r5, r7, lr}
 8021234:	b088      	sub	sp, #32
 8021236:	af00      	add	r7, sp, #0
 8021238:	60f8      	str	r0, [r7, #12]
 802123a:	60b9      	str	r1, [r7, #8]
 802123c:	607a      	str	r2, [r7, #4]

    memcpy(word, reinterpret_cast<uint32_t*>(address), number*4);

    for(uint32_t i = 0; i < number; i++) if(word[i] != 0xFFFFFFFF) return false;

    return true;
 802123e:	466b      	mov	r3, sp
 8021240:	461d      	mov	r5, r3
    uint32_t word[number];
 8021242:	687b      	ldr	r3, [r7, #4]
 8021244:	1e58      	subs	r0, r3, #1
 8021246:	61b8      	str	r0, [r7, #24]
 8021248:	4603      	mov	r3, r0
 802124a:	3301      	adds	r3, #1
 802124c:	4619      	mov	r1, r3
 802124e:	f04f 0200 	mov.w	r2, #0
 8021252:	f04f 0300 	mov.w	r3, #0
 8021256:	f04f 0400 	mov.w	r4, #0
 802125a:	0154      	lsls	r4, r2, #5
 802125c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8021260:	014b      	lsls	r3, r1, #5
 8021262:	4603      	mov	r3, r0
 8021264:	3301      	adds	r3, #1
 8021266:	4619      	mov	r1, r3
 8021268:	f04f 0200 	mov.w	r2, #0
 802126c:	f04f 0300 	mov.w	r3, #0
 8021270:	f04f 0400 	mov.w	r4, #0
 8021274:	0154      	lsls	r4, r2, #5
 8021276:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 802127a:	014b      	lsls	r3, r1, #5
 802127c:	4603      	mov	r3, r0
 802127e:	3301      	adds	r3, #1
 8021280:	009b      	lsls	r3, r3, #2
 8021282:	3303      	adds	r3, #3
 8021284:	3307      	adds	r3, #7
 8021286:	08db      	lsrs	r3, r3, #3
 8021288:	00db      	lsls	r3, r3, #3
 802128a:	ebad 0d03 	sub.w	sp, sp, r3
 802128e:	466b      	mov	r3, sp
 8021290:	3303      	adds	r3, #3
 8021292:	089b      	lsrs	r3, r3, #2
 8021294:	009b      	lsls	r3, r3, #2
 8021296:	617b      	str	r3, [r7, #20]
    memcpy(word, reinterpret_cast<uint32_t*>(address), number*4);
 8021298:	6978      	ldr	r0, [r7, #20]
 802129a:	68b9      	ldr	r1, [r7, #8]
 802129c:	687b      	ldr	r3, [r7, #4]
 802129e:	009b      	lsls	r3, r3, #2
 80212a0:	461a      	mov	r2, r3
 80212a2:	f009 f8e3 	bl	802a46c <memcpy>
    for(uint32_t i = 0; i < number; i++) if(word[i] != 0xFFFFFFFF) return false;
 80212a6:	2300      	movs	r3, #0
 80212a8:	61fb      	str	r3, [r7, #28]
 80212aa:	69fa      	ldr	r2, [r7, #28]
 80212ac:	687b      	ldr	r3, [r7, #4]
 80212ae:	429a      	cmp	r2, r3
 80212b0:	d20c      	bcs.n	80212cc <_ZN5Flash14CheckBlankWordEmm+0x9a>
 80212b2:	697b      	ldr	r3, [r7, #20]
 80212b4:	69fa      	ldr	r2, [r7, #28]
 80212b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80212ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80212be:	d001      	beq.n	80212c4 <_ZN5Flash14CheckBlankWordEmm+0x92>
 80212c0:	2300      	movs	r3, #0
 80212c2:	e004      	b.n	80212ce <_ZN5Flash14CheckBlankWordEmm+0x9c>
 80212c4:	69fb      	ldr	r3, [r7, #28]
 80212c6:	3301      	adds	r3, #1
 80212c8:	61fb      	str	r3, [r7, #28]
 80212ca:	e7ee      	b.n	80212aa <_ZN5Flash14CheckBlankWordEmm+0x78>
    return true;
 80212cc:	2301      	movs	r3, #1
 80212ce:	46ad      	mov	sp, r5
 80212d0:	4618      	mov	r0, r3
 80212d2:	3720      	adds	r7, #32
 80212d4:	46bd      	mov	sp, r7
 80212d6:	bdb0      	pop	{r4, r5, r7, pc}

080212d8 <_ZN8Iim42652C1Ev>:
#include "iim_42652.hpp"
#include "declare_extern.h"

Iim42652::Iim42652() : degree_stack_z_(0) {}
 80212d8:	b490      	push	{r4, r7}
 80212da:	b082      	sub	sp, #8
 80212dc:	af00      	add	r7, sp, #0
 80212de:	6078      	str	r0, [r7, #4]
 80212e0:	687a      	ldr	r2, [r7, #4]
 80212e2:	f04f 0300 	mov.w	r3, #0
 80212e6:	f04f 0400 	mov.w	r4, #0
 80212ea:	e9c2 3400 	strd	r3, r4, [r2]
 80212ee:	687b      	ldr	r3, [r7, #4]
 80212f0:	4618      	mov	r0, r3
 80212f2:	3708      	adds	r7, #8
 80212f4:	46bd      	mov	sp, r7
 80212f6:	bc90      	pop	{r4, r7}
 80212f8:	4770      	bx	lr
	...

080212fc <_ZN8Iim426524InitEv>:

uint8_t Iim42652::Init()
{
 80212fc:	b580      	push	{r7, lr}
 80212fe:	b084      	sub	sp, #16
 8021300:	af00      	add	r7, sp, #0
 8021302:	6078      	str	r0, [r7, #4]
    Write(REG_BANK_SEL_ADD, REG_BANK_SEL_RES, 'L');
 8021304:	234c      	movs	r3, #76	; 0x4c
 8021306:	2200      	movs	r2, #0
 8021308:	2176      	movs	r1, #118	; 0x76
 802130a:	6878      	ldr	r0, [r7, #4]
 802130c:	f000 f8f6 	bl	80214fc <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 8021310:	2064      	movs	r0, #100	; 0x64
 8021312:	f005 f869 	bl	80263e8 <HAL_Delay>
    Write(REG_BANK_SEL_ADD, REG_BANK_SEL_RES, 'R');
 8021316:	2352      	movs	r3, #82	; 0x52
 8021318:	2200      	movs	r2, #0
 802131a:	2176      	movs	r1, #118	; 0x76
 802131c:	6878      	ldr	r0, [r7, #4]
 802131e:	f000 f8ed 	bl	80214fc <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 8021322:	2064      	movs	r0, #100	; 0x64
 8021324:	f005 f860 	bl	80263e8 <HAL_Delay>

    uint8_t who_l  = Read(WHO_AM_I_ADD, 'L');
 8021328:	224c      	movs	r2, #76	; 0x4c
 802132a:	2175      	movs	r1, #117	; 0x75
 802132c:	6878      	ldr	r0, [r7, #4]
 802132e:	f000 f897 	bl	8021460 <_ZN8Iim426524ReadEhc>
 8021332:	4603      	mov	r3, r0
 8021334:	73fb      	strb	r3, [r7, #15]
    uint8_t who_r  = Read(WHO_AM_I_ADD, 'R');
 8021336:	2252      	movs	r2, #82	; 0x52
 8021338:	2175      	movs	r1, #117	; 0x75
 802133a:	6878      	ldr	r0, [r7, #4]
 802133c:	f000 f890 	bl	8021460 <_ZN8Iim426524ReadEhc>
 8021340:	4603      	mov	r3, r0
 8021342:	73bb      	strb	r3, [r7, #14]
    uint8_t bank_l = Read(REG_BANK_SEL_ADD, 'L');
 8021344:	224c      	movs	r2, #76	; 0x4c
 8021346:	2176      	movs	r1, #118	; 0x76
 8021348:	6878      	ldr	r0, [r7, #4]
 802134a:	f000 f889 	bl	8021460 <_ZN8Iim426524ReadEhc>
 802134e:	4603      	mov	r3, r0
 8021350:	737b      	strb	r3, [r7, #13]
    uint8_t bank_r = Read(REG_BANK_SEL_ADD, 'R');
 8021352:	2252      	movs	r2, #82	; 0x52
 8021354:	2176      	movs	r1, #118	; 0x76
 8021356:	6878      	ldr	r0, [r7, #4]
 8021358:	f000 f882 	bl	8021460 <_ZN8Iim426524ReadEhc>
 802135c:	4603      	mov	r3, r0
 802135e:	733b      	strb	r3, [r7, #12]
    uint8_t pwr_l  = Read(PWR_MGMT0_ADD, 'L');
 8021360:	224c      	movs	r2, #76	; 0x4c
 8021362:	214e      	movs	r1, #78	; 0x4e
 8021364:	6878      	ldr	r0, [r7, #4]
 8021366:	f000 f87b 	bl	8021460 <_ZN8Iim426524ReadEhc>
 802136a:	4603      	mov	r3, r0
 802136c:	72fb      	strb	r3, [r7, #11]
    uint8_t pwr_r  = Read(PWR_MGMT0_ADD, 'R');
 802136e:	2252      	movs	r2, #82	; 0x52
 8021370:	214e      	movs	r1, #78	; 0x4e
 8021372:	6878      	ldr	r0, [r7, #4]
 8021374:	f000 f874 	bl	8021460 <_ZN8Iim426524ReadEhc>
 8021378:	4603      	mov	r3, r0
 802137a:	72bb      	strb	r3, [r7, #10]

#ifdef DEBUG_MODE
    g_imu_who_l  = who_l;  g_imu_who_r  = who_r;
 802137c:	4a32      	ldr	r2, [pc, #200]	; (8021448 <_ZN8Iim426524InitEv+0x14c>)
 802137e:	7bfb      	ldrb	r3, [r7, #15]
 8021380:	7013      	strb	r3, [r2, #0]
 8021382:	4a32      	ldr	r2, [pc, #200]	; (802144c <_ZN8Iim426524InitEv+0x150>)
 8021384:	7bbb      	ldrb	r3, [r7, #14]
 8021386:	7013      	strb	r3, [r2, #0]
    g_imu_bank_l = bank_l; g_imu_bank_r = bank_r;
 8021388:	4a31      	ldr	r2, [pc, #196]	; (8021450 <_ZN8Iim426524InitEv+0x154>)
 802138a:	7b7b      	ldrb	r3, [r7, #13]
 802138c:	7013      	strb	r3, [r2, #0]
 802138e:	4a31      	ldr	r2, [pc, #196]	; (8021454 <_ZN8Iim426524InitEv+0x158>)
 8021390:	7b3b      	ldrb	r3, [r7, #12]
 8021392:	7013      	strb	r3, [r2, #0]
    g_imu_pwr_l  = pwr_l;  g_imu_pwr_r  = pwr_r;
 8021394:	4a30      	ldr	r2, [pc, #192]	; (8021458 <_ZN8Iim426524InitEv+0x15c>)
 8021396:	7afb      	ldrb	r3, [r7, #11]
 8021398:	7013      	strb	r3, [r2, #0]
 802139a:	4a30      	ldr	r2, [pc, #192]	; (802145c <_ZN8Iim426524InitEv+0x160>)
 802139c:	7abb      	ldrb	r3, [r7, #10]
 802139e:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(who_l != WHO_AM_I_RES)      return 0x01;
 80213a0:	7bfb      	ldrb	r3, [r7, #15]
 80213a2:	2b6f      	cmp	r3, #111	; 0x6f
 80213a4:	d001      	beq.n	80213aa <_ZN8Iim426524InitEv+0xae>
 80213a6:	2301      	movs	r3, #1
 80213a8:	e049      	b.n	802143e <_ZN8Iim426524InitEv+0x142>
    if(who_r != WHO_AM_I_RES)      return 0x02;
 80213aa:	7bbb      	ldrb	r3, [r7, #14]
 80213ac:	2b6f      	cmp	r3, #111	; 0x6f
 80213ae:	d001      	beq.n	80213b4 <_ZN8Iim426524InitEv+0xb8>
 80213b0:	2302      	movs	r3, #2
 80213b2:	e044      	b.n	802143e <_ZN8Iim426524InitEv+0x142>
    if(bank_l != REG_BANK_SEL_RES) return 0x03;
 80213b4:	7b7b      	ldrb	r3, [r7, #13]
 80213b6:	2b00      	cmp	r3, #0
 80213b8:	d001      	beq.n	80213be <_ZN8Iim426524InitEv+0xc2>
 80213ba:	2303      	movs	r3, #3
 80213bc:	e03f      	b.n	802143e <_ZN8Iim426524InitEv+0x142>
    if(bank_r != REG_BANK_SEL_RES) return 0x04;
 80213be:	7b3b      	ldrb	r3, [r7, #12]
 80213c0:	2b00      	cmp	r3, #0
 80213c2:	d001      	beq.n	80213c8 <_ZN8Iim426524InitEv+0xcc>
 80213c4:	2304      	movs	r3, #4
 80213c6:	e03a      	b.n	802143e <_ZN8Iim426524InitEv+0x142>
    if(pwr_l != PWR_MGMT0_RES)     return 0x05;
 80213c8:	7afb      	ldrb	r3, [r7, #11]
 80213ca:	2b00      	cmp	r3, #0
 80213cc:	d001      	beq.n	80213d2 <_ZN8Iim426524InitEv+0xd6>
 80213ce:	2305      	movs	r3, #5
 80213d0:	e035      	b.n	802143e <_ZN8Iim426524InitEv+0x142>
    if(pwr_r != PWR_MGMT0_RES)     return 0x06;
 80213d2:	7abb      	ldrb	r3, [r7, #10]
 80213d4:	2b00      	cmp	r3, #0
 80213d6:	d001      	beq.n	80213dc <_ZN8Iim426524InitEv+0xe0>
 80213d8:	2306      	movs	r3, #6
 80213da:	e030      	b.n	802143e <_ZN8Iim426524InitEv+0x142>

    Write(PWR_MGMT0_ADD, PWR_MGMT0_ON, 'L');
 80213dc:	234c      	movs	r3, #76	; 0x4c
 80213de:	220f      	movs	r2, #15
 80213e0:	214e      	movs	r1, #78	; 0x4e
 80213e2:	6878      	ldr	r0, [r7, #4]
 80213e4:	f000 f88a 	bl	80214fc <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 80213e8:	2064      	movs	r0, #100	; 0x64
 80213ea:	f004 fffd 	bl	80263e8 <HAL_Delay>
    Write(PWR_MGMT0_ADD, PWR_MGMT0_ON, 'R');
 80213ee:	2352      	movs	r3, #82	; 0x52
 80213f0:	220f      	movs	r2, #15
 80213f2:	214e      	movs	r1, #78	; 0x4e
 80213f4:	6878      	ldr	r0, [r7, #4]
 80213f6:	f000 f881 	bl	80214fc <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 80213fa:	2064      	movs	r0, #100	; 0x64
 80213fc:	f004 fff4 	bl	80263e8 <HAL_Delay>
    pwr_l = Read(PWR_MGMT0_ADD, 'L');
 8021400:	224c      	movs	r2, #76	; 0x4c
 8021402:	214e      	movs	r1, #78	; 0x4e
 8021404:	6878      	ldr	r0, [r7, #4]
 8021406:	f000 f82b 	bl	8021460 <_ZN8Iim426524ReadEhc>
 802140a:	4603      	mov	r3, r0
 802140c:	72fb      	strb	r3, [r7, #11]
    pwr_r = Read(PWR_MGMT0_ADD, 'R');
 802140e:	2252      	movs	r2, #82	; 0x52
 8021410:	214e      	movs	r1, #78	; 0x4e
 8021412:	6878      	ldr	r0, [r7, #4]
 8021414:	f000 f824 	bl	8021460 <_ZN8Iim426524ReadEhc>
 8021418:	4603      	mov	r3, r0
 802141a:	72bb      	strb	r3, [r7, #10]

#ifdef DEBUG_MODE
    g_imu_pwr_l  = pwr_l;  g_imu_pwr_r  = pwr_r;
 802141c:	4a0e      	ldr	r2, [pc, #56]	; (8021458 <_ZN8Iim426524InitEv+0x15c>)
 802141e:	7afb      	ldrb	r3, [r7, #11]
 8021420:	7013      	strb	r3, [r2, #0]
 8021422:	4a0e      	ldr	r2, [pc, #56]	; (802145c <_ZN8Iim426524InitEv+0x160>)
 8021424:	7abb      	ldrb	r3, [r7, #10]
 8021426:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(pwr_l != PWR_MGMT0_ON) return 0x07;
 8021428:	7afb      	ldrb	r3, [r7, #11]
 802142a:	2b0f      	cmp	r3, #15
 802142c:	d001      	beq.n	8021432 <_ZN8Iim426524InitEv+0x136>
 802142e:	2307      	movs	r3, #7
 8021430:	e005      	b.n	802143e <_ZN8Iim426524InitEv+0x142>
    if(pwr_r != PWR_MGMT0_ON) return 0x08;
 8021432:	7abb      	ldrb	r3, [r7, #10]
 8021434:	2b0f      	cmp	r3, #15
 8021436:	d001      	beq.n	802143c <_ZN8Iim426524InitEv+0x140>
 8021438:	2308      	movs	r3, #8
 802143a:	e000      	b.n	802143e <_ZN8Iim426524InitEv+0x142>

    return 0x09;
 802143c:	2309      	movs	r3, #9
}
 802143e:	4618      	mov	r0, r3
 8021440:	3710      	adds	r7, #16
 8021442:	46bd      	mov	sp, r7
 8021444:	bd80      	pop	{r7, pc}
 8021446:	bf00      	nop
 8021448:	2000026b 	.word	0x2000026b
 802144c:	2000026c 	.word	0x2000026c
 8021450:	2000026d 	.word	0x2000026d
 8021454:	2000026e 	.word	0x2000026e
 8021458:	2000026f 	.word	0x2000026f
 802145c:	20000270 	.word	0x20000270

08021460 <_ZN8Iim426524ReadEhc>:

uint8_t Iim42652::Read(uint8_t send_address, char imu_ic_lr)
{
 8021460:	b580      	push	{r7, lr}
 8021462:	b084      	sub	sp, #16
 8021464:	af00      	add	r7, sp, #0
 8021466:	6078      	str	r0, [r7, #4]
 8021468:	460b      	mov	r3, r1
 802146a:	70fb      	strb	r3, [r7, #3]
 802146c:	4613      	mov	r3, r2
 802146e:	70bb      	strb	r3, [r7, #2]
    uint8_t receive_reset_value = 0x00;
 8021470:	2300      	movs	r3, #0
 8021472:	73fb      	strb	r3, [r7, #15]

    send_address = send_address | 0x80; // Read 1--- ----
 8021474:	78fb      	ldrb	r3, [r7, #3]
 8021476:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802147a:	b2db      	uxtb	r3, r3
 802147c:	70fb      	strb	r3, [r7, #3]

    if(imu_ic_lr == 'L') CS_RESET_L;
 802147e:	78bb      	ldrb	r3, [r7, #2]
 8021480:	2b4c      	cmp	r3, #76	; 0x4c
 8021482:	d106      	bne.n	8021492 <_ZN8Iim426524ReadEhc+0x32>
 8021484:	2200      	movs	r2, #0
 8021486:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802148a:	4819      	ldr	r0, [pc, #100]	; (80214f0 <_ZN8Iim426524ReadEhc+0x90>)
 802148c:	f006 fcca 	bl	8027e24 <HAL_GPIO_WritePin>
 8021490:	e008      	b.n	80214a4 <_ZN8Iim426524ReadEhc+0x44>
    else if(imu_ic_lr == 'R') CS_RESET_R;
 8021492:	78bb      	ldrb	r3, [r7, #2]
 8021494:	2b52      	cmp	r3, #82	; 0x52
 8021496:	d105      	bne.n	80214a4 <_ZN8Iim426524ReadEhc+0x44>
 8021498:	2200      	movs	r2, #0
 802149a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802149e:	4815      	ldr	r0, [pc, #84]	; (80214f4 <_ZN8Iim426524ReadEhc+0x94>)
 80214a0:	f006 fcc0 	bl	8027e24 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi3, &send_address, 1, 100);
 80214a4:	1cf9      	adds	r1, r7, #3
 80214a6:	2364      	movs	r3, #100	; 0x64
 80214a8:	2201      	movs	r2, #1
 80214aa:	4813      	ldr	r0, [pc, #76]	; (80214f8 <_ZN8Iim426524ReadEhc+0x98>)
 80214ac:	f007 fa98 	bl	80289e0 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, &receive_reset_value, 1, 100);
 80214b0:	f107 010f 	add.w	r1, r7, #15
 80214b4:	2364      	movs	r3, #100	; 0x64
 80214b6:	2201      	movs	r2, #1
 80214b8:	480f      	ldr	r0, [pc, #60]	; (80214f8 <_ZN8Iim426524ReadEhc+0x98>)
 80214ba:	f007 fbc5 	bl	8028c48 <HAL_SPI_Receive>

    if(imu_ic_lr == 'L') CS_SET_L;
 80214be:	78bb      	ldrb	r3, [r7, #2]
 80214c0:	2b4c      	cmp	r3, #76	; 0x4c
 80214c2:	d106      	bne.n	80214d2 <_ZN8Iim426524ReadEhc+0x72>
 80214c4:	2201      	movs	r2, #1
 80214c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80214ca:	4809      	ldr	r0, [pc, #36]	; (80214f0 <_ZN8Iim426524ReadEhc+0x90>)
 80214cc:	f006 fcaa 	bl	8027e24 <HAL_GPIO_WritePin>
 80214d0:	e008      	b.n	80214e4 <_ZN8Iim426524ReadEhc+0x84>
    else if(imu_ic_lr == 'R') CS_SET_R;
 80214d2:	78bb      	ldrb	r3, [r7, #2]
 80214d4:	2b52      	cmp	r3, #82	; 0x52
 80214d6:	d105      	bne.n	80214e4 <_ZN8Iim426524ReadEhc+0x84>
 80214d8:	2201      	movs	r2, #1
 80214da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80214de:	4805      	ldr	r0, [pc, #20]	; (80214f4 <_ZN8Iim426524ReadEhc+0x94>)
 80214e0:	f006 fca0 	bl	8027e24 <HAL_GPIO_WritePin>
    
    return receive_reset_value;
 80214e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80214e6:	4618      	mov	r0, r3
 80214e8:	3710      	adds	r7, #16
 80214ea:	46bd      	mov	sp, r7
 80214ec:	bd80      	pop	{r7, pc}
 80214ee:	bf00      	nop
 80214f0:	40020400 	.word	0x40020400
 80214f4:	40020000 	.word	0x40020000
 80214f8:	20000798 	.word	0x20000798

080214fc <_ZN8Iim426525WriteEhhc>:

void Iim42652::Write(uint8_t send_address, uint8_t send_data, char imu_ic_lr)
{
 80214fc:	b580      	push	{r7, lr}
 80214fe:	b082      	sub	sp, #8
 8021500:	af00      	add	r7, sp, #0
 8021502:	6078      	str	r0, [r7, #4]
 8021504:	4608      	mov	r0, r1
 8021506:	4611      	mov	r1, r2
 8021508:	461a      	mov	r2, r3
 802150a:	4603      	mov	r3, r0
 802150c:	70fb      	strb	r3, [r7, #3]
 802150e:	460b      	mov	r3, r1
 8021510:	70bb      	strb	r3, [r7, #2]
 8021512:	4613      	mov	r3, r2
 8021514:	707b      	strb	r3, [r7, #1]
    send_address = send_address & 0x7F; // Write 0--- ----
 8021516:	78fb      	ldrb	r3, [r7, #3]
 8021518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802151c:	b2db      	uxtb	r3, r3
 802151e:	70fb      	strb	r3, [r7, #3]

    if(imu_ic_lr == 'L') CS_RESET_L;
 8021520:	787b      	ldrb	r3, [r7, #1]
 8021522:	2b4c      	cmp	r3, #76	; 0x4c
 8021524:	d106      	bne.n	8021534 <_ZN8Iim426525WriteEhhc+0x38>
 8021526:	2200      	movs	r2, #0
 8021528:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802152c:	4817      	ldr	r0, [pc, #92]	; (802158c <_ZN8Iim426525WriteEhhc+0x90>)
 802152e:	f006 fc79 	bl	8027e24 <HAL_GPIO_WritePin>
 8021532:	e008      	b.n	8021546 <_ZN8Iim426525WriteEhhc+0x4a>
    else if(imu_ic_lr == 'R') CS_RESET_R;
 8021534:	787b      	ldrb	r3, [r7, #1]
 8021536:	2b52      	cmp	r3, #82	; 0x52
 8021538:	d105      	bne.n	8021546 <_ZN8Iim426525WriteEhhc+0x4a>
 802153a:	2200      	movs	r2, #0
 802153c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021540:	4813      	ldr	r0, [pc, #76]	; (8021590 <_ZN8Iim426525WriteEhhc+0x94>)
 8021542:	f006 fc6f 	bl	8027e24 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi3, &send_address, 1, 100);
 8021546:	1cf9      	adds	r1, r7, #3
 8021548:	2364      	movs	r3, #100	; 0x64
 802154a:	2201      	movs	r2, #1
 802154c:	4811      	ldr	r0, [pc, #68]	; (8021594 <_ZN8Iim426525WriteEhhc+0x98>)
 802154e:	f007 fa47 	bl	80289e0 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, &send_data, 1, 100);
 8021552:	1cb9      	adds	r1, r7, #2
 8021554:	2364      	movs	r3, #100	; 0x64
 8021556:	2201      	movs	r2, #1
 8021558:	480e      	ldr	r0, [pc, #56]	; (8021594 <_ZN8Iim426525WriteEhhc+0x98>)
 802155a:	f007 fa41 	bl	80289e0 <HAL_SPI_Transmit>

    if(imu_ic_lr == 'L') CS_SET_L;
 802155e:	787b      	ldrb	r3, [r7, #1]
 8021560:	2b4c      	cmp	r3, #76	; 0x4c
 8021562:	d106      	bne.n	8021572 <_ZN8Iim426525WriteEhhc+0x76>
 8021564:	2201      	movs	r2, #1
 8021566:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802156a:	4808      	ldr	r0, [pc, #32]	; (802158c <_ZN8Iim426525WriteEhhc+0x90>)
 802156c:	f006 fc5a 	bl	8027e24 <HAL_GPIO_WritePin>
    else if(imu_ic_lr == 'R') CS_SET_R;
}
 8021570:	e008      	b.n	8021584 <_ZN8Iim426525WriteEhhc+0x88>
    else if(imu_ic_lr == 'R') CS_SET_R;
 8021572:	787b      	ldrb	r3, [r7, #1]
 8021574:	2b52      	cmp	r3, #82	; 0x52
 8021576:	d105      	bne.n	8021584 <_ZN8Iim426525WriteEhhc+0x88>
 8021578:	2201      	movs	r2, #1
 802157a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802157e:	4804      	ldr	r0, [pc, #16]	; (8021590 <_ZN8Iim426525WriteEhhc+0x94>)
 8021580:	f006 fc50 	bl	8027e24 <HAL_GPIO_WritePin>
}
 8021584:	bf00      	nop
 8021586:	3708      	adds	r7, #8
 8021588:	46bd      	mov	sp, r7
 802158a:	bd80      	pop	{r7, pc}
 802158c:	40020400 	.word	0x40020400
 8021590:	40020000 	.word	0x40020000
 8021594:	20000798 	.word	0x20000798

08021598 <_ZN8Iim426529Read2ByteEhhc>:

    return CheckRead(send_address, send_data, imu_ic_lr);
}

int16_t Iim42652::Read2Byte(uint8_t upper_address, uint8_t lower_address, char imu_ic_lr)
{
 8021598:	b580      	push	{r7, lr}
 802159a:	b084      	sub	sp, #16
 802159c:	af00      	add	r7, sp, #0
 802159e:	6078      	str	r0, [r7, #4]
 80215a0:	4608      	mov	r0, r1
 80215a2:	4611      	mov	r1, r2
 80215a4:	461a      	mov	r2, r3
 80215a6:	4603      	mov	r3, r0
 80215a8:	70fb      	strb	r3, [r7, #3]
 80215aa:	460b      	mov	r3, r1
 80215ac:	70bb      	strb	r3, [r7, #2]
 80215ae:	4613      	mov	r3, r2
 80215b0:	707b      	strb	r3, [r7, #1]
    int16_t upper_receive, lower_receive;

    upper_receive = static_cast<int16_t>(Read(upper_address, imu_ic_lr));
 80215b2:	787a      	ldrb	r2, [r7, #1]
 80215b4:	78fb      	ldrb	r3, [r7, #3]
 80215b6:	4619      	mov	r1, r3
 80215b8:	6878      	ldr	r0, [r7, #4]
 80215ba:	f7ff ff51 	bl	8021460 <_ZN8Iim426524ReadEhc>
 80215be:	4603      	mov	r3, r0
 80215c0:	81fb      	strh	r3, [r7, #14]
    lower_receive = static_cast<int16_t>(Read(lower_address, imu_ic_lr));
 80215c2:	787a      	ldrb	r2, [r7, #1]
 80215c4:	78bb      	ldrb	r3, [r7, #2]
 80215c6:	4619      	mov	r1, r3
 80215c8:	6878      	ldr	r0, [r7, #4]
 80215ca:	f7ff ff49 	bl	8021460 <_ZN8Iim426524ReadEhc>
 80215ce:	4603      	mov	r3, r0
 80215d0:	81bb      	strh	r3, [r7, #12]

    return (upper_receive << 8) | lower_receive;
 80215d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80215d6:	021b      	lsls	r3, r3, #8
 80215d8:	b21a      	sxth	r2, r3
 80215da:	89bb      	ldrh	r3, [r7, #12]
 80215dc:	4313      	orrs	r3, r2
 80215de:	b21b      	sxth	r3, r3
}
 80215e0:	4618      	mov	r0, r3
 80215e2:	3710      	adds	r7, #16
 80215e4:	46bd      	mov	sp, r7
 80215e6:	bd80      	pop	{r7, pc}

080215e8 <_ZN8Iim426526UpdateEv>:

void Iim42652::Update()
{
 80215e8:	b590      	push	{r4, r7, lr}
 80215ea:	b089      	sub	sp, #36	; 0x24
 80215ec:	af00      	add	r7, sp, #0
 80215ee:	6078      	str	r0, [r7, #4]
    int16_t raw_z_l = Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'L');
 80215f0:	234c      	movs	r3, #76	; 0x4c
 80215f2:	222a      	movs	r2, #42	; 0x2a
 80215f4:	2129      	movs	r1, #41	; 0x29
 80215f6:	6878      	ldr	r0, [r7, #4]
 80215f8:	f7ff ffce 	bl	8021598 <_ZN8Iim426529Read2ByteEhhc>
 80215fc:	4603      	mov	r3, r0
 80215fe:	83fb      	strh	r3, [r7, #30]
    int16_t raw_z_r = Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'R');
 8021600:	2352      	movs	r3, #82	; 0x52
 8021602:	222a      	movs	r2, #42	; 0x2a
 8021604:	2129      	movs	r1, #41	; 0x29
 8021606:	6878      	ldr	r0, [r7, #4]
 8021608:	f7ff ffc6 	bl	8021598 <_ZN8Iim426529Read2ByteEhhc>
 802160c:	4603      	mov	r3, r0
 802160e:	83bb      	strh	r3, [r7, #28]
    double avg_raw_z = static_cast<double>(raw_z_l + raw_z_r) / 2.0;
 8021610:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8021614:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8021618:	4413      	add	r3, r2
 802161a:	4618      	mov	r0, r3
 802161c:	f7fe fe62 	bl	80202e4 <__aeabi_i2d>
 8021620:	f04f 0200 	mov.w	r2, #0
 8021624:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021628:	f7fe fff0 	bl	802060c <__aeabi_ddiv>
 802162c:	4603      	mov	r3, r0
 802162e:	460c      	mov	r4, r1
 8021630:	e9c7 3404 	strd	r3, r4, [r7, #16]
    double degree_z = avg_raw_z * NORMAL_FUCOR_DPS * TIM6_PERIOD;
 8021634:	a316      	add	r3, pc, #88	; (adr r3, 8021690 <_ZN8Iim426526UpdateEv+0xa8>)
 8021636:	e9d3 2300 	ldrd	r2, r3, [r3]
 802163a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 802163e:	f7fe febb 	bl	80203b8 <__aeabi_dmul>
 8021642:	4603      	mov	r3, r0
 8021644:	460c      	mov	r4, r1
 8021646:	4618      	mov	r0, r3
 8021648:	4621      	mov	r1, r4
 802164a:	f04f 0200 	mov.w	r2, #0
 802164e:	4b0e      	ldr	r3, [pc, #56]	; (8021688 <_ZN8Iim426526UpdateEv+0xa0>)
 8021650:	f7fe feb2 	bl	80203b8 <__aeabi_dmul>
 8021654:	4603      	mov	r3, r0
 8021656:	460c      	mov	r4, r1
 8021658:	e9c7 3402 	strd	r3, r4, [r7, #8]

    degree_stack_z_ += degree_z;
 802165c:	687b      	ldr	r3, [r7, #4]
 802165e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8021662:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8021666:	f7fe fcf1 	bl	802004c <__adddf3>
 802166a:	4603      	mov	r3, r0
 802166c:	460c      	mov	r4, r1
 802166e:	687a      	ldr	r2, [r7, #4]
 8021670:	e9c2 3400 	strd	r3, r4, [r2]

#ifdef DEBUG_MODE
    g_deg_z = degree_z;
 8021674:	4a05      	ldr	r2, [pc, #20]	; (802168c <_ZN8Iim426526UpdateEv+0xa4>)
 8021676:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 802167a:	e9c2 3400 	strd	r3, r4, [r2]
#endif // DEBUG_MODE
}
 802167e:	bf00      	nop
 8021680:	3724      	adds	r7, #36	; 0x24
 8021682:	46bd      	mov	sp, r7
 8021684:	bd90      	pop	{r4, r7, pc}
 8021686:	bf00      	nop
 8021688:	3ff40000 	.word	0x3ff40000
 802168c:	20000280 	.word	0x20000280
 8021690:	ddb1209f 	.word	0xddb1209f
 8021694:	3faf403d 	.word	0x3faf403d

08021698 <_ZN8Iim4265217ResetDegreeStackZEv>:

void Iim42652::ResetDegreeStackZ()
{
 8021698:	b490      	push	{r4, r7}
 802169a:	b082      	sub	sp, #8
 802169c:	af00      	add	r7, sp, #0
 802169e:	6078      	str	r0, [r7, #4]
    degree_stack_z_ = 0.0;
 80216a0:	687a      	ldr	r2, [r7, #4]
 80216a2:	f04f 0300 	mov.w	r3, #0
 80216a6:	f04f 0400 	mov.w	r4, #0
 80216aa:	e9c2 3400 	strd	r3, r4, [r2]
}
 80216ae:	bf00      	nop
 80216b0:	3708      	adds	r7, #8
 80216b2:	46bd      	mov	sp, r7
 80216b4:	bc90      	pop	{r4, r7}
 80216b6:	4770      	bx	lr

080216b8 <_ZN8Iim4265215GetDegreeStackZEv>:

double Iim42652::GetDegreeStackZ()
{
 80216b8:	b490      	push	{r4, r7}
 80216ba:	b082      	sub	sp, #8
 80216bc:	af00      	add	r7, sp, #0
 80216be:	6078      	str	r0, [r7, #4]
    return degree_stack_z_;
 80216c0:	687b      	ldr	r3, [r7, #4]
 80216c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80216c6:	ec44 3b17 	vmov	d7, r3, r4
}
 80216ca:	eeb0 0a47 	vmov.f32	s0, s14
 80216ce:	eef0 0a67 	vmov.f32	s1, s15
 80216d2:	3708      	adds	r7, #8
 80216d4:	46bd      	mov	sp, r7
 80216d6:	bc90      	pop	{r4, r7}
 80216d8:	4770      	bx	lr

080216da <_ZN8Iim426529GyroXLeftEv>:

int16_t Iim42652::GyroXLeft()
{
 80216da:	b580      	push	{r7, lr}
 80216dc:	b082      	sub	sp, #8
 80216de:	af00      	add	r7, sp, #0
 80216e0:	6078      	str	r0, [r7, #4]
    return Read2Byte(GYRO_DATA_X1_ADD, GYRO_DATA_X0_ADD, 'L');
 80216e2:	234c      	movs	r3, #76	; 0x4c
 80216e4:	2226      	movs	r2, #38	; 0x26
 80216e6:	2125      	movs	r1, #37	; 0x25
 80216e8:	6878      	ldr	r0, [r7, #4]
 80216ea:	f7ff ff55 	bl	8021598 <_ZN8Iim426529Read2ByteEhhc>
 80216ee:	4603      	mov	r3, r0
}
 80216f0:	4618      	mov	r0, r3
 80216f2:	3708      	adds	r7, #8
 80216f4:	46bd      	mov	sp, r7
 80216f6:	bd80      	pop	{r7, pc}

080216f8 <_ZN8Iim4265210GyroXRightEv>:

int16_t Iim42652::GyroXRight()
{
 80216f8:	b580      	push	{r7, lr}
 80216fa:	b082      	sub	sp, #8
 80216fc:	af00      	add	r7, sp, #0
 80216fe:	6078      	str	r0, [r7, #4]
    return Read2Byte(GYRO_DATA_X1_ADD, GYRO_DATA_X0_ADD, 'R');
 8021700:	2352      	movs	r3, #82	; 0x52
 8021702:	2226      	movs	r2, #38	; 0x26
 8021704:	2125      	movs	r1, #37	; 0x25
 8021706:	6878      	ldr	r0, [r7, #4]
 8021708:	f7ff ff46 	bl	8021598 <_ZN8Iim426529Read2ByteEhhc>
 802170c:	4603      	mov	r3, r0
}
 802170e:	4618      	mov	r0, r3
 8021710:	3708      	adds	r7, #8
 8021712:	46bd      	mov	sp, r7
 8021714:	bd80      	pop	{r7, pc}

08021716 <_ZN8Iim426529GyroYLeftEv>:

int16_t Iim42652::GyroYLeft()
{
 8021716:	b580      	push	{r7, lr}
 8021718:	b082      	sub	sp, #8
 802171a:	af00      	add	r7, sp, #0
 802171c:	6078      	str	r0, [r7, #4]
    return Read2Byte(GYRO_DATA_Y1_ADD, GYRO_DATA_Y0_ADD, 'L');
 802171e:	234c      	movs	r3, #76	; 0x4c
 8021720:	2228      	movs	r2, #40	; 0x28
 8021722:	2127      	movs	r1, #39	; 0x27
 8021724:	6878      	ldr	r0, [r7, #4]
 8021726:	f7ff ff37 	bl	8021598 <_ZN8Iim426529Read2ByteEhhc>
 802172a:	4603      	mov	r3, r0
}
 802172c:	4618      	mov	r0, r3
 802172e:	3708      	adds	r7, #8
 8021730:	46bd      	mov	sp, r7
 8021732:	bd80      	pop	{r7, pc}

08021734 <_ZN8Iim4265210GyroYRightEv>:

int16_t Iim42652::GyroYRight()
{
 8021734:	b580      	push	{r7, lr}
 8021736:	b082      	sub	sp, #8
 8021738:	af00      	add	r7, sp, #0
 802173a:	6078      	str	r0, [r7, #4]
    return Read2Byte(GYRO_DATA_Y1_ADD, GYRO_DATA_Y0_ADD, 'R');
 802173c:	2352      	movs	r3, #82	; 0x52
 802173e:	2228      	movs	r2, #40	; 0x28
 8021740:	2127      	movs	r1, #39	; 0x27
 8021742:	6878      	ldr	r0, [r7, #4]
 8021744:	f7ff ff28 	bl	8021598 <_ZN8Iim426529Read2ByteEhhc>
 8021748:	4603      	mov	r3, r0
}
 802174a:	4618      	mov	r0, r3
 802174c:	3708      	adds	r7, #8
 802174e:	46bd      	mov	sp, r7
 8021750:	bd80      	pop	{r7, pc}

08021752 <_ZN8Iim426529GyroZLeftEv>:

int16_t Iim42652::GyroZLeft()
{
 8021752:	b580      	push	{r7, lr}
 8021754:	b082      	sub	sp, #8
 8021756:	af00      	add	r7, sp, #0
 8021758:	6078      	str	r0, [r7, #4]
    return Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'L');
 802175a:	234c      	movs	r3, #76	; 0x4c
 802175c:	222a      	movs	r2, #42	; 0x2a
 802175e:	2129      	movs	r1, #41	; 0x29
 8021760:	6878      	ldr	r0, [r7, #4]
 8021762:	f7ff ff19 	bl	8021598 <_ZN8Iim426529Read2ByteEhhc>
 8021766:	4603      	mov	r3, r0
}
 8021768:	4618      	mov	r0, r3
 802176a:	3708      	adds	r7, #8
 802176c:	46bd      	mov	sp, r7
 802176e:	bd80      	pop	{r7, pc}

08021770 <_ZN8Iim4265210GyroZRightEv>:

int16_t Iim42652::GyroZRight()
{
 8021770:	b580      	push	{r7, lr}
 8021772:	b082      	sub	sp, #8
 8021774:	af00      	add	r7, sp, #0
 8021776:	6078      	str	r0, [r7, #4]
    return Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'R');
 8021778:	2352      	movs	r3, #82	; 0x52
 802177a:	222a      	movs	r2, #42	; 0x2a
 802177c:	2129      	movs	r1, #41	; 0x29
 802177e:	6878      	ldr	r0, [r7, #4]
 8021780:	f7ff ff0a 	bl	8021598 <_ZN8Iim426529Read2ByteEhhc>
 8021784:	4603      	mov	r3, r0
}
 8021786:	4618      	mov	r0, r3
 8021788:	3708      	adds	r7, #8
 802178a:	46bd      	mov	sp, r7
 802178c:	bd80      	pop	{r7, pc}

0802178e <_ZN8Iim4265210AccelXLeftEv>:

int16_t Iim42652::AccelXLeft()
{
 802178e:	b580      	push	{r7, lr}
 8021790:	b082      	sub	sp, #8
 8021792:	af00      	add	r7, sp, #0
 8021794:	6078      	str	r0, [r7, #4]
    return Read2Byte(ACCEL_DATA_X1_ADD, ACCEL_DATA_X0_ADD, 'L');
 8021796:	234c      	movs	r3, #76	; 0x4c
 8021798:	2220      	movs	r2, #32
 802179a:	211f      	movs	r1, #31
 802179c:	6878      	ldr	r0, [r7, #4]
 802179e:	f7ff fefb 	bl	8021598 <_ZN8Iim426529Read2ByteEhhc>
 80217a2:	4603      	mov	r3, r0
}
 80217a4:	4618      	mov	r0, r3
 80217a6:	3708      	adds	r7, #8
 80217a8:	46bd      	mov	sp, r7
 80217aa:	bd80      	pop	{r7, pc}

080217ac <_ZN8Iim4265211AccelXRightEv>:

int16_t Iim42652::AccelXRight()
{
 80217ac:	b580      	push	{r7, lr}
 80217ae:	b082      	sub	sp, #8
 80217b0:	af00      	add	r7, sp, #0
 80217b2:	6078      	str	r0, [r7, #4]
    return Read2Byte(ACCEL_DATA_X1_ADD, ACCEL_DATA_X0_ADD, 'R');
 80217b4:	2352      	movs	r3, #82	; 0x52
 80217b6:	2220      	movs	r2, #32
 80217b8:	211f      	movs	r1, #31
 80217ba:	6878      	ldr	r0, [r7, #4]
 80217bc:	f7ff feec 	bl	8021598 <_ZN8Iim426529Read2ByteEhhc>
 80217c0:	4603      	mov	r3, r0
}
 80217c2:	4618      	mov	r0, r3
 80217c4:	3708      	adds	r7, #8
 80217c6:	46bd      	mov	sp, r7
 80217c8:	bd80      	pop	{r7, pc}

080217ca <_ZN8Iim4265210AccelYLeftEv>:

int16_t Iim42652::AccelYLeft()
{
 80217ca:	b580      	push	{r7, lr}
 80217cc:	b082      	sub	sp, #8
 80217ce:	af00      	add	r7, sp, #0
 80217d0:	6078      	str	r0, [r7, #4]
    return Read2Byte(ACCEL_DATA_Y1_ADD, ACCEL_DATA_Y0_ADD, 'L');
 80217d2:	234c      	movs	r3, #76	; 0x4c
 80217d4:	2222      	movs	r2, #34	; 0x22
 80217d6:	2121      	movs	r1, #33	; 0x21
 80217d8:	6878      	ldr	r0, [r7, #4]
 80217da:	f7ff fedd 	bl	8021598 <_ZN8Iim426529Read2ByteEhhc>
 80217de:	4603      	mov	r3, r0
}
 80217e0:	4618      	mov	r0, r3
 80217e2:	3708      	adds	r7, #8
 80217e4:	46bd      	mov	sp, r7
 80217e6:	bd80      	pop	{r7, pc}

080217e8 <_ZN8Iim4265211AccelYRightEv>:

int16_t Iim42652::AccelYRight()
{
 80217e8:	b580      	push	{r7, lr}
 80217ea:	b082      	sub	sp, #8
 80217ec:	af00      	add	r7, sp, #0
 80217ee:	6078      	str	r0, [r7, #4]
    return Read2Byte(ACCEL_DATA_Y1_ADD, ACCEL_DATA_Y0_ADD, 'R');
 80217f0:	2352      	movs	r3, #82	; 0x52
 80217f2:	2222      	movs	r2, #34	; 0x22
 80217f4:	2121      	movs	r1, #33	; 0x21
 80217f6:	6878      	ldr	r0, [r7, #4]
 80217f8:	f7ff fece 	bl	8021598 <_ZN8Iim426529Read2ByteEhhc>
 80217fc:	4603      	mov	r3, r0
}
 80217fe:	4618      	mov	r0, r3
 8021800:	3708      	adds	r7, #8
 8021802:	46bd      	mov	sp, r7
 8021804:	bd80      	pop	{r7, pc}

08021806 <_ZN8Iim4265210AccelZLeftEv>:

int16_t Iim42652::AccelZLeft()
{
 8021806:	b580      	push	{r7, lr}
 8021808:	b082      	sub	sp, #8
 802180a:	af00      	add	r7, sp, #0
 802180c:	6078      	str	r0, [r7, #4]
    return Read2Byte(ACCEL_DATA_Z1_ADD, ACCEL_DATA_Z0_ADD, 'L');
 802180e:	234c      	movs	r3, #76	; 0x4c
 8021810:	2224      	movs	r2, #36	; 0x24
 8021812:	2123      	movs	r1, #35	; 0x23
 8021814:	6878      	ldr	r0, [r7, #4]
 8021816:	f7ff febf 	bl	8021598 <_ZN8Iim426529Read2ByteEhhc>
 802181a:	4603      	mov	r3, r0
}
 802181c:	4618      	mov	r0, r3
 802181e:	3708      	adds	r7, #8
 8021820:	46bd      	mov	sp, r7
 8021822:	bd80      	pop	{r7, pc}

08021824 <_ZN8Iim4265211AccelZRightEv>:

int16_t Iim42652::AccelZRight()
{
 8021824:	b580      	push	{r7, lr}
 8021826:	b082      	sub	sp, #8
 8021828:	af00      	add	r7, sp, #0
 802182a:	6078      	str	r0, [r7, #4]
    return Read2Byte(ACCEL_DATA_Z1_ADD, ACCEL_DATA_Z0_ADD, 'R');
 802182c:	2352      	movs	r3, #82	; 0x52
 802182e:	2224      	movs	r2, #36	; 0x24
 8021830:	2123      	movs	r1, #35	; 0x23
 8021832:	6878      	ldr	r0, [r7, #4]
 8021834:	f7ff feb0 	bl	8021598 <_ZN8Iim426529Read2ByteEhhc>
 8021838:	4603      	mov	r3, r0
 802183a:	4618      	mov	r0, r3
 802183c:	3708      	adds	r7, #8
 802183e:	46bd      	mov	sp, r7
 8021840:	bd80      	pop	{r7, pc}

08021842 <_ZN3LedC1Ev>:
#include "led.hpp"

Led::Led() : interrupt_count_(0)
 8021842:	b480      	push	{r7}
 8021844:	b083      	sub	sp, #12
 8021846:	af00      	add	r7, sp, #0
 8021848:	6078      	str	r0, [r7, #4]
           , interrupt_timer_(0) {}
 802184a:	687b      	ldr	r3, [r7, #4]
 802184c:	2200      	movs	r2, #0
 802184e:	701a      	strb	r2, [r3, #0]
 8021850:	687b      	ldr	r3, [r7, #4]
 8021852:	2200      	movs	r2, #0
 8021854:	705a      	strb	r2, [r3, #1]
 8021856:	687b      	ldr	r3, [r7, #4]
 8021858:	4618      	mov	r0, r3
 802185a:	370c      	adds	r7, #12
 802185c:	46bd      	mov	sp, r7
 802185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021862:	4770      	bx	lr

08021864 <_ZN3Led10ColorOrderEc>:

void Led::ColorOrder(char color)
{
 8021864:	b580      	push	{r7, lr}
 8021866:	b082      	sub	sp, #8
 8021868:	af00      	add	r7, sp, #0
 802186a:	6078      	str	r0, [r7, #4]
 802186c:	460b      	mov	r3, r1
 802186e:	70fb      	strb	r3, [r7, #3]
    switch(color)
 8021870:	78fb      	ldrb	r3, [r7, #3]
 8021872:	3b42      	subs	r3, #66	; 0x42
 8021874:	2b17      	cmp	r3, #23
 8021876:	f200 80b8 	bhi.w	80219ea <_ZN3Led10ColorOrderEc+0x186>
 802187a:	a201      	add	r2, pc, #4	; (adr r2, 8021880 <_ZN3Led10ColorOrderEc+0x1c>)
 802187c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021880:	0802192d 	.word	0x0802192d
 8021884:	08021979 	.word	0x08021979
 8021888:	080219eb 	.word	0x080219eb
 802188c:	080219eb 	.word	0x080219eb
 8021890:	080219eb 	.word	0x080219eb
 8021894:	08021907 	.word	0x08021907
 8021898:	080219eb 	.word	0x080219eb
 802189c:	080219eb 	.word	0x080219eb
 80218a0:	080219eb 	.word	0x080219eb
 80218a4:	080219eb 	.word	0x080219eb
 80218a8:	080219eb 	.word	0x080219eb
 80218ac:	0802199f 	.word	0x0802199f
 80218b0:	080219eb 	.word	0x080219eb
 80218b4:	080219eb 	.word	0x080219eb
 80218b8:	080219eb 	.word	0x080219eb
 80218bc:	080219eb 	.word	0x080219eb
 80218c0:	080218e1 	.word	0x080218e1
 80218c4:	080219eb 	.word	0x080219eb
 80218c8:	080219eb 	.word	0x080219eb
 80218cc:	080219eb 	.word	0x080219eb
 80218d0:	080219eb 	.word	0x080219eb
 80218d4:	080219c5 	.word	0x080219c5
 80218d8:	080219eb 	.word	0x080219eb
 80218dc:	08021953 	.word	0x08021953
    {
        case 'R': R_ON;  G_OFF; B_OFF; break;
 80218e0:	2200      	movs	r2, #0
 80218e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80218e6:	484c      	ldr	r0, [pc, #304]	; (8021a18 <_ZN3Led10ColorOrderEc+0x1b4>)
 80218e8:	f006 fa9c 	bl	8027e24 <HAL_GPIO_WritePin>
 80218ec:	2201      	movs	r2, #1
 80218ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80218f2:	4849      	ldr	r0, [pc, #292]	; (8021a18 <_ZN3Led10ColorOrderEc+0x1b4>)
 80218f4:	f006 fa96 	bl	8027e24 <HAL_GPIO_WritePin>
 80218f8:	2201      	movs	r2, #1
 80218fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80218fe:	4846      	ldr	r0, [pc, #280]	; (8021a18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021900:	f006 fa90 	bl	8027e24 <HAL_GPIO_WritePin>
 8021904:	e084      	b.n	8021a10 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'G': R_OFF; G_ON;  B_OFF; break;
 8021906:	2201      	movs	r2, #1
 8021908:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802190c:	4842      	ldr	r0, [pc, #264]	; (8021a18 <_ZN3Led10ColorOrderEc+0x1b4>)
 802190e:	f006 fa89 	bl	8027e24 <HAL_GPIO_WritePin>
 8021912:	2200      	movs	r2, #0
 8021914:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021918:	483f      	ldr	r0, [pc, #252]	; (8021a18 <_ZN3Led10ColorOrderEc+0x1b4>)
 802191a:	f006 fa83 	bl	8027e24 <HAL_GPIO_WritePin>
 802191e:	2201      	movs	r2, #1
 8021920:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021924:	483c      	ldr	r0, [pc, #240]	; (8021a18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021926:	f006 fa7d 	bl	8027e24 <HAL_GPIO_WritePin>
 802192a:	e071      	b.n	8021a10 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'B': R_OFF; G_OFF; B_ON;  break;
 802192c:	2201      	movs	r2, #1
 802192e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021932:	4839      	ldr	r0, [pc, #228]	; (8021a18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021934:	f006 fa76 	bl	8027e24 <HAL_GPIO_WritePin>
 8021938:	2201      	movs	r2, #1
 802193a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802193e:	4836      	ldr	r0, [pc, #216]	; (8021a18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021940:	f006 fa70 	bl	8027e24 <HAL_GPIO_WritePin>
 8021944:	2200      	movs	r2, #0
 8021946:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802194a:	4833      	ldr	r0, [pc, #204]	; (8021a18 <_ZN3Led10ColorOrderEc+0x1b4>)
 802194c:	f006 fa6a 	bl	8027e24 <HAL_GPIO_WritePin>
 8021950:	e05e      	b.n	8021a10 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'Y': R_ON;  G_ON;  B_OFF; break;
 8021952:	2200      	movs	r2, #0
 8021954:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021958:	482f      	ldr	r0, [pc, #188]	; (8021a18 <_ZN3Led10ColorOrderEc+0x1b4>)
 802195a:	f006 fa63 	bl	8027e24 <HAL_GPIO_WritePin>
 802195e:	2200      	movs	r2, #0
 8021960:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021964:	482c      	ldr	r0, [pc, #176]	; (8021a18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021966:	f006 fa5d 	bl	8027e24 <HAL_GPIO_WritePin>
 802196a:	2201      	movs	r2, #1
 802196c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021970:	4829      	ldr	r0, [pc, #164]	; (8021a18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021972:	f006 fa57 	bl	8027e24 <HAL_GPIO_WritePin>
 8021976:	e04b      	b.n	8021a10 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'C': R_OFF; G_ON;  B_ON;  break;
 8021978:	2201      	movs	r2, #1
 802197a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802197e:	4826      	ldr	r0, [pc, #152]	; (8021a18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021980:	f006 fa50 	bl	8027e24 <HAL_GPIO_WritePin>
 8021984:	2200      	movs	r2, #0
 8021986:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802198a:	4823      	ldr	r0, [pc, #140]	; (8021a18 <_ZN3Led10ColorOrderEc+0x1b4>)
 802198c:	f006 fa4a 	bl	8027e24 <HAL_GPIO_WritePin>
 8021990:	2200      	movs	r2, #0
 8021992:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021996:	4820      	ldr	r0, [pc, #128]	; (8021a18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021998:	f006 fa44 	bl	8027e24 <HAL_GPIO_WritePin>
 802199c:	e038      	b.n	8021a10 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'M': R_ON;  G_OFF; B_ON;  break;
 802199e:	2200      	movs	r2, #0
 80219a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80219a4:	481c      	ldr	r0, [pc, #112]	; (8021a18 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219a6:	f006 fa3d 	bl	8027e24 <HAL_GPIO_WritePin>
 80219aa:	2201      	movs	r2, #1
 80219ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80219b0:	4819      	ldr	r0, [pc, #100]	; (8021a18 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219b2:	f006 fa37 	bl	8027e24 <HAL_GPIO_WritePin>
 80219b6:	2200      	movs	r2, #0
 80219b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80219bc:	4816      	ldr	r0, [pc, #88]	; (8021a18 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219be:	f006 fa31 	bl	8027e24 <HAL_GPIO_WritePin>
 80219c2:	e025      	b.n	8021a10 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'W': R_ON;  G_ON;  B_ON;  break;
 80219c4:	2200      	movs	r2, #0
 80219c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80219ca:	4813      	ldr	r0, [pc, #76]	; (8021a18 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219cc:	f006 fa2a 	bl	8027e24 <HAL_GPIO_WritePin>
 80219d0:	2200      	movs	r2, #0
 80219d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80219d6:	4810      	ldr	r0, [pc, #64]	; (8021a18 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219d8:	f006 fa24 	bl	8027e24 <HAL_GPIO_WritePin>
 80219dc:	2200      	movs	r2, #0
 80219de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80219e2:	480d      	ldr	r0, [pc, #52]	; (8021a18 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219e4:	f006 fa1e 	bl	8027e24 <HAL_GPIO_WritePin>
 80219e8:	e012      	b.n	8021a10 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'X': // fall through
        default:  R_OFF; G_OFF; B_OFF; break;
 80219ea:	2201      	movs	r2, #1
 80219ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80219f0:	4809      	ldr	r0, [pc, #36]	; (8021a18 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219f2:	f006 fa17 	bl	8027e24 <HAL_GPIO_WritePin>
 80219f6:	2201      	movs	r2, #1
 80219f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80219fc:	4806      	ldr	r0, [pc, #24]	; (8021a18 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219fe:	f006 fa11 	bl	8027e24 <HAL_GPIO_WritePin>
 8021a02:	2201      	movs	r2, #1
 8021a04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021a08:	4803      	ldr	r0, [pc, #12]	; (8021a18 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021a0a:	f006 fa0b 	bl	8027e24 <HAL_GPIO_WritePin>
 8021a0e:	bf00      	nop
    }
}
 8021a10:	bf00      	nop
 8021a12:	3708      	adds	r7, #8
 8021a14:	46bd      	mov	sp, r7
 8021a16:	bd80      	pop	{r7, pc}
 8021a18:	40020800 	.word	0x40020800

08021a1c <_ZN3Led5BlinkEhcc>:

void Led::Blink(uint8_t times, char color_1, char color_2)
{
 8021a1c:	b580      	push	{r7, lr}
 8021a1e:	b084      	sub	sp, #16
 8021a20:	af00      	add	r7, sp, #0
 8021a22:	6078      	str	r0, [r7, #4]
 8021a24:	4608      	mov	r0, r1
 8021a26:	4611      	mov	r1, r2
 8021a28:	461a      	mov	r2, r3
 8021a2a:	4603      	mov	r3, r0
 8021a2c:	70fb      	strb	r3, [r7, #3]
 8021a2e:	460b      	mov	r3, r1
 8021a30:	70bb      	strb	r3, [r7, #2]
 8021a32:	4613      	mov	r3, r2
 8021a34:	707b      	strb	r3, [r7, #1]
    for(uint8_t i = 0; i < times; i++)
 8021a36:	2300      	movs	r3, #0
 8021a38:	73fb      	strb	r3, [r7, #15]
 8021a3a:	7bfa      	ldrb	r2, [r7, #15]
 8021a3c:	78fb      	ldrb	r3, [r7, #3]
 8021a3e:	429a      	cmp	r2, r3
 8021a40:	d215      	bcs.n	8021a6e <_ZN3Led5BlinkEhcc+0x52>
    {
        ColorOrder(color_1);
 8021a42:	78bb      	ldrb	r3, [r7, #2]
 8021a44:	4619      	mov	r1, r3
 8021a46:	6878      	ldr	r0, [r7, #4]
 8021a48:	f7ff ff0c 	bl	8021864 <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 8021a4c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021a50:	f004 fcca 	bl	80263e8 <HAL_Delay>
        ColorOrder(color_2);
 8021a54:	787b      	ldrb	r3, [r7, #1]
 8021a56:	4619      	mov	r1, r3
 8021a58:	6878      	ldr	r0, [r7, #4]
 8021a5a:	f7ff ff03 	bl	8021864 <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 8021a5e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021a62:	f004 fcc1 	bl	80263e8 <HAL_Delay>
    for(uint8_t i = 0; i < times; i++)
 8021a66:	7bfb      	ldrb	r3, [r7, #15]
 8021a68:	3301      	adds	r3, #1
 8021a6a:	73fb      	strb	r3, [r7, #15]
 8021a6c:	e7e5      	b.n	8021a3a <_ZN3Led5BlinkEhcc+0x1e>
    }
}
 8021a6e:	bf00      	nop
 8021a70:	3710      	adds	r7, #16
 8021a72:	46bd      	mov	sp, r7
 8021a74:	bd80      	pop	{r7, pc}

08021a76 <_ZN3Led7RainbowEh>:

void Led::Rainbow(uint8_t times)
{
 8021a76:	b580      	push	{r7, lr}
 8021a78:	b084      	sub	sp, #16
 8021a7a:	af00      	add	r7, sp, #0
 8021a7c:	6078      	str	r0, [r7, #4]
 8021a7e:	460b      	mov	r3, r1
 8021a80:	70fb      	strb	r3, [r7, #3]
    for(uint8_t i = 0; i < times; i++)
 8021a82:	2300      	movs	r3, #0
 8021a84:	73fb      	strb	r3, [r7, #15]
 8021a86:	7bfa      	ldrb	r2, [r7, #15]
 8021a88:	78fb      	ldrb	r3, [r7, #3]
 8021a8a:	429a      	cmp	r2, r3
 8021a8c:	d233      	bcs.n	8021af6 <_ZN3Led7RainbowEh+0x80>
    {
        ColorOrder('R');
 8021a8e:	2152      	movs	r1, #82	; 0x52
 8021a90:	6878      	ldr	r0, [r7, #4]
 8021a92:	f7ff fee7 	bl	8021864 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021a96:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021a9a:	f004 fca5 	bl	80263e8 <HAL_Delay>
        ColorOrder('Y');
 8021a9e:	2159      	movs	r1, #89	; 0x59
 8021aa0:	6878      	ldr	r0, [r7, #4]
 8021aa2:	f7ff fedf 	bl	8021864 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021aa6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021aaa:	f004 fc9d 	bl	80263e8 <HAL_Delay>
        ColorOrder('G');
 8021aae:	2147      	movs	r1, #71	; 0x47
 8021ab0:	6878      	ldr	r0, [r7, #4]
 8021ab2:	f7ff fed7 	bl	8021864 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021ab6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021aba:	f004 fc95 	bl	80263e8 <HAL_Delay>
        ColorOrder('C');
 8021abe:	2143      	movs	r1, #67	; 0x43
 8021ac0:	6878      	ldr	r0, [r7, #4]
 8021ac2:	f7ff fecf 	bl	8021864 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021ac6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021aca:	f004 fc8d 	bl	80263e8 <HAL_Delay>
        ColorOrder('B');
 8021ace:	2142      	movs	r1, #66	; 0x42
 8021ad0:	6878      	ldr	r0, [r7, #4]
 8021ad2:	f7ff fec7 	bl	8021864 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021ad6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021ada:	f004 fc85 	bl	80263e8 <HAL_Delay>
        ColorOrder('M');
 8021ade:	214d      	movs	r1, #77	; 0x4d
 8021ae0:	6878      	ldr	r0, [r7, #4]
 8021ae2:	f7ff febf 	bl	8021864 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021ae6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021aea:	f004 fc7d 	bl	80263e8 <HAL_Delay>
    for(uint8_t i = 0; i < times; i++)
 8021aee:	7bfb      	ldrb	r3, [r7, #15]
 8021af0:	3301      	adds	r3, #1
 8021af2:	73fb      	strb	r3, [r7, #15]
 8021af4:	e7c7      	b.n	8021a86 <_ZN3Led7RainbowEh+0x10>
    }
}
 8021af6:	bf00      	nop
 8021af8:	3710      	adds	r7, #16
 8021afa:	46bd      	mov	sp, r7
 8021afc:	bd80      	pop	{r7, pc}

08021afe <_ZN3Led14BlinkInterruptEhcc>:

bool Led::BlinkInterrupt(uint8_t times, char color_1, char color_2)
{
 8021afe:	b580      	push	{r7, lr}
 8021b00:	b084      	sub	sp, #16
 8021b02:	af00      	add	r7, sp, #0
 8021b04:	6078      	str	r0, [r7, #4]
 8021b06:	4608      	mov	r0, r1
 8021b08:	4611      	mov	r1, r2
 8021b0a:	461a      	mov	r2, r3
 8021b0c:	4603      	mov	r3, r0
 8021b0e:	70fb      	strb	r3, [r7, #3]
 8021b10:	460b      	mov	r3, r1
 8021b12:	70bb      	strb	r3, [r7, #2]
 8021b14:	4613      	mov	r3, r2
 8021b16:	707b      	strb	r3, [r7, #1]
    uint8_t count = interrupt_count_;
 8021b18:	687b      	ldr	r3, [r7, #4]
 8021b1a:	781b      	ldrb	r3, [r3, #0]
 8021b1c:	73fb      	strb	r3, [r7, #15]
    uint8_t timer = interrupt_timer_;
 8021b1e:	687b      	ldr	r3, [r7, #4]
 8021b20:	785b      	ldrb	r3, [r3, #1]
 8021b22:	73bb      	strb	r3, [r7, #14]
    bool blink_continue = true;
 8021b24:	2301      	movs	r3, #1
 8021b26:	737b      	strb	r3, [r7, #13]

    if(count < times){
 8021b28:	7bfa      	ldrb	r2, [r7, #15]
 8021b2a:	78fb      	ldrb	r3, [r7, #3]
 8021b2c:	429a      	cmp	r2, r3
 8021b2e:	d21d      	bcs.n	8021b6c <_ZN3Led14BlinkInterruptEhcc+0x6e>
        if(timer < BLINK_INTERVAL_TIMX){
 8021b30:	7bbb      	ldrb	r3, [r7, #14]
 8021b32:	2b27      	cmp	r3, #39	; 0x27
 8021b34:	d808      	bhi.n	8021b48 <_ZN3Led14BlinkInterruptEhcc+0x4a>
            ColorOrder(color_1);
 8021b36:	78bb      	ldrb	r3, [r7, #2]
 8021b38:	4619      	mov	r1, r3
 8021b3a:	6878      	ldr	r0, [r7, #4]
 8021b3c:	f7ff fe92 	bl	8021864 <_ZN3Led10ColorOrderEc>
            timer++;
 8021b40:	7bbb      	ldrb	r3, [r7, #14]
 8021b42:	3301      	adds	r3, #1
 8021b44:	73bb      	strb	r3, [r7, #14]
 8021b46:	e019      	b.n	8021b7c <_ZN3Led14BlinkInterruptEhcc+0x7e>
        }else if(timer < (BLINK_INTERVAL_TIMX + BLINK_INTERVAL_TIMX)){
 8021b48:	7bbb      	ldrb	r3, [r7, #14]
 8021b4a:	2b4f      	cmp	r3, #79	; 0x4f
 8021b4c:	d808      	bhi.n	8021b60 <_ZN3Led14BlinkInterruptEhcc+0x62>
            ColorOrder(color_2);
 8021b4e:	787b      	ldrb	r3, [r7, #1]
 8021b50:	4619      	mov	r1, r3
 8021b52:	6878      	ldr	r0, [r7, #4]
 8021b54:	f7ff fe86 	bl	8021864 <_ZN3Led10ColorOrderEc>
            timer++;
 8021b58:	7bbb      	ldrb	r3, [r7, #14]
 8021b5a:	3301      	adds	r3, #1
 8021b5c:	73bb      	strb	r3, [r7, #14]
 8021b5e:	e00d      	b.n	8021b7c <_ZN3Led14BlinkInterruptEhcc+0x7e>
        }else{
            count++;
 8021b60:	7bfb      	ldrb	r3, [r7, #15]
 8021b62:	3301      	adds	r3, #1
 8021b64:	73fb      	strb	r3, [r7, #15]
            timer = 0;
 8021b66:	2300      	movs	r3, #0
 8021b68:	73bb      	strb	r3, [r7, #14]
 8021b6a:	e007      	b.n	8021b7c <_ZN3Led14BlinkInterruptEhcc+0x7e>
        }
    }else{
        ColorOrder('X');
 8021b6c:	2158      	movs	r1, #88	; 0x58
 8021b6e:	6878      	ldr	r0, [r7, #4]
 8021b70:	f7ff fe78 	bl	8021864 <_ZN3Led10ColorOrderEc>
        count = 0;
 8021b74:	2300      	movs	r3, #0
 8021b76:	73fb      	strb	r3, [r7, #15]
        blink_continue = false;
 8021b78:	2300      	movs	r3, #0
 8021b7a:	737b      	strb	r3, [r7, #13]
    }

    interrupt_count_ = count;
 8021b7c:	687b      	ldr	r3, [r7, #4]
 8021b7e:	7bfa      	ldrb	r2, [r7, #15]
 8021b80:	701a      	strb	r2, [r3, #0]
    interrupt_timer_ = timer;
 8021b82:	687b      	ldr	r3, [r7, #4]
 8021b84:	7bba      	ldrb	r2, [r7, #14]
 8021b86:	705a      	strb	r2, [r3, #1]

    return blink_continue;
 8021b88:	7b7b      	ldrb	r3, [r7, #13]
}
 8021b8a:	4618      	mov	r0, r3
 8021b8c:	3710      	adds	r7, #16
 8021b8e:	46bd      	mov	sp, r7
 8021b90:	bd80      	pop	{r7, pc}

08021b92 <_ZN3Led14ResetInterruptEv>:

void Led::ResetInterrupt()
{
 8021b92:	b480      	push	{r7}
 8021b94:	b083      	sub	sp, #12
 8021b96:	af00      	add	r7, sp, #0
 8021b98:	6078      	str	r0, [r7, #4]
    interrupt_count_ = 0;
 8021b9a:	687b      	ldr	r3, [r7, #4]
 8021b9c:	2200      	movs	r2, #0
 8021b9e:	701a      	strb	r2, [r3, #0]
    interrupt_timer_ = 0;
 8021ba0:	687b      	ldr	r3, [r7, #4]
 8021ba2:	2200      	movs	r2, #0
 8021ba4:	705a      	strb	r2, [r3, #1]
 8021ba6:	bf00      	nop
 8021ba8:	370c      	adds	r7, #12
 8021baa:	46bd      	mov	sp, r7
 8021bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bb0:	4770      	bx	lr

08021bb2 <_ZN10LineSensorC1Ev>:
#include "line_sensor.hpp"

LineSensor::LineSensor() : line_sensors_buff_()
 8021bb2:	b490      	push	{r4, r7}
 8021bb4:	b082      	sub	sp, #8
 8021bb6:	af00      	add	r7, sp, #0
 8021bb8:	6078      	str	r0, [r7, #4]
                         , consecutive_line_sensors_buff_()
                         , max_line_sensors_valu_()
                         , min_line_sensors_valu_()
                         , line_sensors_valu_()
                         , emergency_stop_flag_(false) {}
 8021bba:	687a      	ldr	r2, [r7, #4]
 8021bbc:	230d      	movs	r3, #13
 8021bbe:	2b00      	cmp	r3, #0
 8021bc0:	db04      	blt.n	8021bcc <_ZN10LineSensorC1Ev+0x1a>
 8021bc2:	2100      	movs	r1, #0
 8021bc4:	8011      	strh	r1, [r2, #0]
 8021bc6:	3202      	adds	r2, #2
 8021bc8:	3b01      	subs	r3, #1
 8021bca:	e7f8      	b.n	8021bbe <_ZN10LineSensorC1Ev+0xc>
 8021bcc:	687b      	ldr	r3, [r7, #4]
 8021bce:	f103 021c 	add.w	r2, r3, #28
 8021bd2:	2309      	movs	r3, #9
 8021bd4:	4610      	mov	r0, r2
 8021bd6:	2b00      	cmp	r3, #0
 8021bd8:	db0b      	blt.n	8021bf2 <_ZN10LineSensorC1Ev+0x40>
 8021bda:	4601      	mov	r1, r0
 8021bdc:	220d      	movs	r2, #13
 8021bde:	2a00      	cmp	r2, #0
 8021be0:	db04      	blt.n	8021bec <_ZN10LineSensorC1Ev+0x3a>
 8021be2:	2400      	movs	r4, #0
 8021be4:	800c      	strh	r4, [r1, #0]
 8021be6:	3102      	adds	r1, #2
 8021be8:	3a01      	subs	r2, #1
 8021bea:	e7f8      	b.n	8021bde <_ZN10LineSensorC1Ev+0x2c>
 8021bec:	301c      	adds	r0, #28
 8021bee:	3b01      	subs	r3, #1
 8021bf0:	e7f1      	b.n	8021bd6 <_ZN10LineSensorC1Ev+0x24>
 8021bf2:	687b      	ldr	r3, [r7, #4]
 8021bf4:	f503 729a 	add.w	r2, r3, #308	; 0x134
 8021bf8:	230d      	movs	r3, #13
 8021bfa:	2b00      	cmp	r3, #0
 8021bfc:	db04      	blt.n	8021c08 <_ZN10LineSensorC1Ev+0x56>
 8021bfe:	2100      	movs	r1, #0
 8021c00:	8011      	strh	r1, [r2, #0]
 8021c02:	3202      	adds	r2, #2
 8021c04:	3b01      	subs	r3, #1
 8021c06:	e7f8      	b.n	8021bfa <_ZN10LineSensorC1Ev+0x48>
 8021c08:	687b      	ldr	r3, [r7, #4]
 8021c0a:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 8021c0e:	230d      	movs	r3, #13
 8021c10:	2b00      	cmp	r3, #0
 8021c12:	db04      	blt.n	8021c1e <_ZN10LineSensorC1Ev+0x6c>
 8021c14:	2100      	movs	r1, #0
 8021c16:	8011      	strh	r1, [r2, #0]
 8021c18:	3202      	adds	r2, #2
 8021c1a:	3b01      	subs	r3, #1
 8021c1c:	e7f8      	b.n	8021c10 <_ZN10LineSensorC1Ev+0x5e>
 8021c1e:	687b      	ldr	r3, [r7, #4]
 8021c20:	f503 72b6 	add.w	r2, r3, #364	; 0x16c
 8021c24:	230d      	movs	r3, #13
 8021c26:	2b00      	cmp	r3, #0
 8021c28:	db04      	blt.n	8021c34 <_ZN10LineSensorC1Ev+0x82>
 8021c2a:	2100      	movs	r1, #0
 8021c2c:	8011      	strh	r1, [r2, #0]
 8021c2e:	3202      	adds	r2, #2
 8021c30:	3b01      	subs	r3, #1
 8021c32:	e7f8      	b.n	8021c26 <_ZN10LineSensorC1Ev+0x74>
 8021c34:	687b      	ldr	r3, [r7, #4]
 8021c36:	2200      	movs	r2, #0
 8021c38:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 8021c3c:	687b      	ldr	r3, [r7, #4]
 8021c3e:	4618      	mov	r0, r3
 8021c40:	3708      	adds	r7, #8
 8021c42:	46bd      	mov	sp, r7
 8021c44:	bc90      	pop	{r4, r7}
 8021c46:	4770      	bx	lr

08021c48 <_ZN10LineSensor4InitEv>:

void LineSensor::Init()
{
 8021c48:	b580      	push	{r7, lr}
 8021c4a:	b082      	sub	sp, #8
 8021c4c:	af00      	add	r7, sp, #0
 8021c4e:	6078      	str	r0, [r7, #4]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)line_sensors_buff_, NUM_OF_LINE_SENSORS) != HAL_OK)
 8021c50:	687b      	ldr	r3, [r7, #4]
 8021c52:	220e      	movs	r2, #14
 8021c54:	4619      	mov	r1, r3
 8021c56:	4815      	ldr	r0, [pc, #84]	; (8021cac <_ZN10LineSensor4InitEv+0x64>)
 8021c58:	f004 fc2c 	bl	80264b4 <HAL_ADC_Start_DMA>
 8021c5c:	4603      	mov	r3, r0
 8021c5e:	2b00      	cmp	r3, #0
 8021c60:	bf14      	ite	ne
 8021c62:	2301      	movne	r3, #1
 8021c64:	2300      	moveq	r3, #0
 8021c66:	b2db      	uxtb	r3, r3
 8021c68:	2b00      	cmp	r3, #0
 8021c6a:	d004      	beq.n	8021c76 <_ZN10LineSensor4InitEv+0x2e>
    {
#ifdef DEBUG_MODE
        g_error_handler_adc1 = true;
 8021c6c:	4b10      	ldr	r3, [pc, #64]	; (8021cb0 <_ZN10LineSensor4InitEv+0x68>)
 8021c6e:	2201      	movs	r2, #1
 8021c70:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8021c72:	f002 f955 	bl	8023f20 <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1) != HAL_OK)
 8021c76:	2100      	movs	r1, #0
 8021c78:	480e      	ldr	r0, [pc, #56]	; (8021cb4 <_ZN10LineSensor4InitEv+0x6c>)
 8021c7a:	f007 fc1b 	bl	80294b4 <HAL_TIM_PWM_Start>
 8021c7e:	4603      	mov	r3, r0
 8021c80:	2b00      	cmp	r3, #0
 8021c82:	bf14      	ite	ne
 8021c84:	2301      	movne	r3, #1
 8021c86:	2300      	moveq	r3, #0
 8021c88:	b2db      	uxtb	r3, r3
 8021c8a:	2b00      	cmp	r3, #0
 8021c8c:	d004      	beq.n	8021c98 <_ZN10LineSensor4InitEv+0x50>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim11 = true;
 8021c8e:	4b0a      	ldr	r3, [pc, #40]	; (8021cb8 <_ZN10LineSensor4InitEv+0x70>)
 8021c90:	2201      	movs	r2, #1
 8021c92:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8021c94:	f002 f944 	bl	8023f20 <Error_Handler>
    }

    __HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, LINE_SENSORS_LED_COMPARE);
 8021c98:	4b06      	ldr	r3, [pc, #24]	; (8021cb4 <_ZN10LineSensor4InitEv+0x6c>)
 8021c9a:	681b      	ldr	r3, [r3, #0]
 8021c9c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8021ca0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8021ca2:	bf00      	nop
 8021ca4:	3708      	adds	r7, #8
 8021ca6:	46bd      	mov	sp, r7
 8021ca8:	bd80      	pop	{r7, pc}
 8021caa:	bf00      	nop
 8021cac:	200007f0 	.word	0x200007f0
 8021cb0:	200000bd 	.word	0x200000bd
 8021cb4:	20000838 	.word	0x20000838
 8021cb8:	200000be 	.word	0x200000be

08021cbc <_ZN10LineSensor20StoreConsecutiveBuffEv>:

void LineSensor::StoreConsecutiveBuff()
{
 8021cbc:	b480      	push	{r7}
 8021cbe:	b085      	sub	sp, #20
 8021cc0:	af00      	add	r7, sp, #0
 8021cc2:	6078      	str	r0, [r7, #4]
    static uint8_t times = 0;

    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021cc4:	2300      	movs	r3, #0
 8021cc6:	60fb      	str	r3, [r7, #12]
 8021cc8:	68fb      	ldr	r3, [r7, #12]
 8021cca:	2b0d      	cmp	r3, #13
 8021ccc:	dc16      	bgt.n	8021cfc <_ZN10LineSensor20StoreConsecutiveBuffEv+0x40>
    {
        consecutive_line_sensors_buff_[times][i] = line_sensors_buff_[i];
 8021cce:	4b15      	ldr	r3, [pc, #84]	; (8021d24 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021cd0:	781b      	ldrb	r3, [r3, #0]
 8021cd2:	4619      	mov	r1, r3
 8021cd4:	687b      	ldr	r3, [r7, #4]
 8021cd6:	68fa      	ldr	r2, [r7, #12]
 8021cd8:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8021cdc:	687a      	ldr	r2, [r7, #4]
 8021cde:	460b      	mov	r3, r1
 8021ce0:	00db      	lsls	r3, r3, #3
 8021ce2:	1a5b      	subs	r3, r3, r1
 8021ce4:	005b      	lsls	r3, r3, #1
 8021ce6:	68f9      	ldr	r1, [r7, #12]
 8021ce8:	440b      	add	r3, r1
 8021cea:	330c      	adds	r3, #12
 8021cec:	005b      	lsls	r3, r3, #1
 8021cee:	4413      	add	r3, r2
 8021cf0:	4602      	mov	r2, r0
 8021cf2:	809a      	strh	r2, [r3, #4]
    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021cf4:	68fb      	ldr	r3, [r7, #12]
 8021cf6:	3301      	adds	r3, #1
 8021cf8:	60fb      	str	r3, [r7, #12]
 8021cfa:	e7e5      	b.n	8021cc8 <_ZN10LineSensor20StoreConsecutiveBuffEv+0xc>
    }

    if(times < CONSECUTIVE_TIMES) times++;
 8021cfc:	4b09      	ldr	r3, [pc, #36]	; (8021d24 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021cfe:	781b      	ldrb	r3, [r3, #0]
 8021d00:	2b09      	cmp	r3, #9
 8021d02:	d806      	bhi.n	8021d12 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x56>
 8021d04:	4b07      	ldr	r3, [pc, #28]	; (8021d24 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021d06:	781b      	ldrb	r3, [r3, #0]
 8021d08:	3301      	adds	r3, #1
 8021d0a:	b2da      	uxtb	r2, r3
 8021d0c:	4b05      	ldr	r3, [pc, #20]	; (8021d24 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021d0e:	701a      	strb	r2, [r3, #0]
    else times = 0;
}
 8021d10:	e002      	b.n	8021d18 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x5c>
    else times = 0;
 8021d12:	4b04      	ldr	r3, [pc, #16]	; (8021d24 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021d14:	2200      	movs	r2, #0
 8021d16:	701a      	strb	r2, [r3, #0]
}
 8021d18:	bf00      	nop
 8021d1a:	3714      	adds	r7, #20
 8021d1c:	46bd      	mov	sp, r7
 8021d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d22:	4770      	bx	lr
 8021d24:	2000003c 	.word	0x2000003c

08021d28 <_ZN10LineSensor9MergeSortEPthh>:

void LineSensor::MergeSort(uint16_t array[], uint8_t first_index, uint8_t last_index)
{
 8021d28:	b5b0      	push	{r4, r5, r7, lr}
 8021d2a:	b088      	sub	sp, #32
 8021d2c:	af00      	add	r7, sp, #0
 8021d2e:	60f8      	str	r0, [r7, #12]
 8021d30:	60b9      	str	r1, [r7, #8]
 8021d32:	4611      	mov	r1, r2
 8021d34:	461a      	mov	r2, r3
 8021d36:	460b      	mov	r3, r1
 8021d38:	71fb      	strb	r3, [r7, #7]
 8021d3a:	4613      	mov	r3, r2
 8021d3c:	71bb      	strb	r3, [r7, #6]

    for(i = first_index; i <= last_index; i++)
    {
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
        else                                     array[i] = temp_array[right--];
    }
 8021d3e:	466b      	mov	r3, sp
 8021d40:	461d      	mov	r5, r3
    if(first_index >= last_index) return;
 8021d42:	79fa      	ldrb	r2, [r7, #7]
 8021d44:	79bb      	ldrb	r3, [r7, #6]
 8021d46:	429a      	cmp	r2, r3
 8021d48:	f080 80ba 	bcs.w	8021ec0 <_ZN10LineSensor9MergeSortEPthh+0x198>
    uint16_t temp_array[last_index+1];
 8021d4c:	79b8      	ldrb	r0, [r7, #6]
 8021d4e:	61b8      	str	r0, [r7, #24]
 8021d50:	4603      	mov	r3, r0
 8021d52:	3301      	adds	r3, #1
 8021d54:	4619      	mov	r1, r3
 8021d56:	f04f 0200 	mov.w	r2, #0
 8021d5a:	f04f 0300 	mov.w	r3, #0
 8021d5e:	f04f 0400 	mov.w	r4, #0
 8021d62:	0114      	lsls	r4, r2, #4
 8021d64:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8021d68:	010b      	lsls	r3, r1, #4
 8021d6a:	4603      	mov	r3, r0
 8021d6c:	3301      	adds	r3, #1
 8021d6e:	4619      	mov	r1, r3
 8021d70:	f04f 0200 	mov.w	r2, #0
 8021d74:	f04f 0300 	mov.w	r3, #0
 8021d78:	f04f 0400 	mov.w	r4, #0
 8021d7c:	0114      	lsls	r4, r2, #4
 8021d7e:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8021d82:	010b      	lsls	r3, r1, #4
 8021d84:	4603      	mov	r3, r0
 8021d86:	3301      	adds	r3, #1
 8021d88:	005b      	lsls	r3, r3, #1
 8021d8a:	3301      	adds	r3, #1
 8021d8c:	3307      	adds	r3, #7
 8021d8e:	08db      	lsrs	r3, r3, #3
 8021d90:	00db      	lsls	r3, r3, #3
 8021d92:	ebad 0d03 	sub.w	sp, sp, r3
 8021d96:	466b      	mov	r3, sp
 8021d98:	3301      	adds	r3, #1
 8021d9a:	085b      	lsrs	r3, r3, #1
 8021d9c:	005b      	lsls	r3, r3, #1
 8021d9e:	617b      	str	r3, [r7, #20]
    middle = (first_index + last_index) / 2;
 8021da0:	79fa      	ldrb	r2, [r7, #7]
 8021da2:	79bb      	ldrb	r3, [r7, #6]
 8021da4:	4413      	add	r3, r2
 8021da6:	0fda      	lsrs	r2, r3, #31
 8021da8:	4413      	add	r3, r2
 8021daa:	105b      	asrs	r3, r3, #1
 8021dac:	74fb      	strb	r3, [r7, #19]
    MergeSort(array, first_index, middle);
 8021dae:	7cfb      	ldrb	r3, [r7, #19]
 8021db0:	79fa      	ldrb	r2, [r7, #7]
 8021db2:	68b9      	ldr	r1, [r7, #8]
 8021db4:	68f8      	ldr	r0, [r7, #12]
 8021db6:	f7ff ffb7 	bl	8021d28 <_ZN10LineSensor9MergeSortEPthh>
    MergeSort(array, middle+1, last_index);
 8021dba:	7cfb      	ldrb	r3, [r7, #19]
 8021dbc:	3301      	adds	r3, #1
 8021dbe:	b2da      	uxtb	r2, r3
 8021dc0:	79bb      	ldrb	r3, [r7, #6]
 8021dc2:	68b9      	ldr	r1, [r7, #8]
 8021dc4:	68f8      	ldr	r0, [r7, #12]
 8021dc6:	f7ff ffaf 	bl	8021d28 <_ZN10LineSensor9MergeSortEPthh>
    for(i = middle; i >= first_index; i--)
 8021dca:	7cfb      	ldrb	r3, [r7, #19]
 8021dcc:	77bb      	strb	r3, [r7, #30]
 8021dce:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021dd2:	79fb      	ldrb	r3, [r7, #7]
 8021dd4:	429a      	cmp	r2, r3
 8021dd6:	db11      	blt.n	8021dfc <_ZN10LineSensor9MergeSortEPthh+0xd4>
        temp_array[i] = array[i];
 8021dd8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021ddc:	005b      	lsls	r3, r3, #1
 8021dde:	68ba      	ldr	r2, [r7, #8]
 8021de0:	4413      	add	r3, r2
 8021de2:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021de6:	8819      	ldrh	r1, [r3, #0]
 8021de8:	697b      	ldr	r3, [r7, #20]
 8021dea:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle; i >= first_index; i--)
 8021dee:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021df2:	b2db      	uxtb	r3, r3
 8021df4:	3b01      	subs	r3, #1
 8021df6:	b2db      	uxtb	r3, r3
 8021df8:	77bb      	strb	r3, [r7, #30]
 8021dfa:	e7e8      	b.n	8021dce <_ZN10LineSensor9MergeSortEPthh+0xa6>
    for(i = middle+1; i <= last_index; i++)
 8021dfc:	7cfb      	ldrb	r3, [r7, #19]
 8021dfe:	3301      	adds	r3, #1
 8021e00:	b2db      	uxtb	r3, r3
 8021e02:	77bb      	strb	r3, [r7, #30]
 8021e04:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021e08:	79bb      	ldrb	r3, [r7, #6]
 8021e0a:	429a      	cmp	r2, r3
 8021e0c:	dc17      	bgt.n	8021e3e <_ZN10LineSensor9MergeSortEPthh+0x116>
        temp_array[last_index - (i - (middle+1))] = array[i];
 8021e0e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021e12:	005b      	lsls	r3, r3, #1
 8021e14:	68ba      	ldr	r2, [r7, #8]
 8021e16:	4413      	add	r3, r2
 8021e18:	79b9      	ldrb	r1, [r7, #6]
 8021e1a:	f997 001e 	ldrsb.w	r0, [r7, #30]
 8021e1e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8021e22:	3201      	adds	r2, #1
 8021e24:	1a82      	subs	r2, r0, r2
 8021e26:	1a8a      	subs	r2, r1, r2
 8021e28:	8819      	ldrh	r1, [r3, #0]
 8021e2a:	697b      	ldr	r3, [r7, #20]
 8021e2c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle+1; i <= last_index; i++)
 8021e30:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021e34:	b2db      	uxtb	r3, r3
 8021e36:	3301      	adds	r3, #1
 8021e38:	b2db      	uxtb	r3, r3
 8021e3a:	77bb      	strb	r3, [r7, #30]
 8021e3c:	e7e2      	b.n	8021e04 <_ZN10LineSensor9MergeSortEPthh+0xdc>
    left  = first_index;
 8021e3e:	79fb      	ldrb	r3, [r7, #7]
 8021e40:	77fb      	strb	r3, [r7, #31]
    right = last_index;
 8021e42:	79bb      	ldrb	r3, [r7, #6]
 8021e44:	777b      	strb	r3, [r7, #29]
    for(i = first_index; i <= last_index; i++)
 8021e46:	79fb      	ldrb	r3, [r7, #7]
 8021e48:	77bb      	strb	r3, [r7, #30]
 8021e4a:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021e4e:	79bb      	ldrb	r3, [r7, #6]
 8021e50:	429a      	cmp	r2, r3
 8021e52:	dc33      	bgt.n	8021ebc <_ZN10LineSensor9MergeSortEPthh+0x194>
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
 8021e54:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8021e58:	697b      	ldr	r3, [r7, #20]
 8021e5a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8021e5e:	f997 101d 	ldrsb.w	r1, [r7, #29]
 8021e62:	697b      	ldr	r3, [r7, #20]
 8021e64:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8021e68:	429a      	cmp	r2, r3
 8021e6a:	d210      	bcs.n	8021e8e <_ZN10LineSensor9MergeSortEPthh+0x166>
 8021e6c:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8021e70:	b2d3      	uxtb	r3, r2
 8021e72:	3301      	adds	r3, #1
 8021e74:	b2db      	uxtb	r3, r3
 8021e76:	77fb      	strb	r3, [r7, #31]
 8021e78:	4611      	mov	r1, r2
 8021e7a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021e7e:	005b      	lsls	r3, r3, #1
 8021e80:	68ba      	ldr	r2, [r7, #8]
 8021e82:	4413      	add	r3, r2
 8021e84:	697a      	ldr	r2, [r7, #20]
 8021e86:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8021e8a:	801a      	strh	r2, [r3, #0]
 8021e8c:	e00f      	b.n	8021eae <_ZN10LineSensor9MergeSortEPthh+0x186>
        else                                     array[i] = temp_array[right--];
 8021e8e:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8021e92:	b2d3      	uxtb	r3, r2
 8021e94:	3b01      	subs	r3, #1
 8021e96:	b2db      	uxtb	r3, r3
 8021e98:	777b      	strb	r3, [r7, #29]
 8021e9a:	4611      	mov	r1, r2
 8021e9c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021ea0:	005b      	lsls	r3, r3, #1
 8021ea2:	68ba      	ldr	r2, [r7, #8]
 8021ea4:	4413      	add	r3, r2
 8021ea6:	697a      	ldr	r2, [r7, #20]
 8021ea8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8021eac:	801a      	strh	r2, [r3, #0]
    for(i = first_index; i <= last_index; i++)
 8021eae:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021eb2:	b2db      	uxtb	r3, r3
 8021eb4:	3301      	adds	r3, #1
 8021eb6:	b2db      	uxtb	r3, r3
 8021eb8:	77bb      	strb	r3, [r7, #30]
 8021eba:	e7c6      	b.n	8021e4a <_ZN10LineSensor9MergeSortEPthh+0x122>
 8021ebc:	46ad      	mov	sp, r5
 8021ebe:	e001      	b.n	8021ec4 <_ZN10LineSensor9MergeSortEPthh+0x19c>
    if(first_index >= last_index) return;
 8021ec0:	bf00      	nop
 8021ec2:	46ad      	mov	sp, r5
}
 8021ec4:	3720      	adds	r7, #32
 8021ec6:	46bd      	mov	sp, r7
 8021ec8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08021ecc <_ZN10LineSensor6UpdateEv>:

void LineSensor::Update()
{
 8021ecc:	b590      	push	{r4, r7, lr}
 8021ece:	b08b      	sub	sp, #44	; 0x2c
 8021ed0:	af00      	add	r7, sp, #0
 8021ed2:	6078      	str	r0, [r7, #4]
    uint8_t i, j;
    uint16_t temp_array[CONSECUTIVE_TIMES];
    uint16_t median, max, min, normalized;
    bool emergency = true;
 8021ed4:	2301      	movs	r3, #1
 8021ed6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021eda:	2300      	movs	r3, #0
 8021edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021ee4:	2b0d      	cmp	r3, #13
 8021ee6:	f200 80a6 	bhi.w	8022036 <_ZN10LineSensor6UpdateEv+0x16a>
    {
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021eea:	2300      	movs	r3, #0
 8021eec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021ef0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021ef4:	2b09      	cmp	r3, #9
 8021ef6:	d81b      	bhi.n	8021f30 <_ZN10LineSensor6UpdateEv+0x64>
        {
            temp_array[j] = consecutive_line_sensors_buff_[j][i];
 8021ef8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8021efc:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8021f00:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8021f04:	6878      	ldr	r0, [r7, #4]
 8021f06:	4613      	mov	r3, r2
 8021f08:	00db      	lsls	r3, r3, #3
 8021f0a:	1a9b      	subs	r3, r3, r2
 8021f0c:	005b      	lsls	r3, r3, #1
 8021f0e:	4423      	add	r3, r4
 8021f10:	330c      	adds	r3, #12
 8021f12:	005b      	lsls	r3, r3, #1
 8021f14:	4403      	add	r3, r0
 8021f16:	889a      	ldrh	r2, [r3, #4]
 8021f18:	004b      	lsls	r3, r1, #1
 8021f1a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8021f1e:	440b      	add	r3, r1
 8021f20:	f823 2c20 	strh.w	r2, [r3, #-32]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021f24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021f28:	3301      	adds	r3, #1
 8021f2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021f2e:	e7df      	b.n	8021ef0 <_ZN10LineSensor6UpdateEv+0x24>
        }

        MergeSort(temp_array, 0, CONSECUTIVE_TIMES-1);
 8021f30:	f107 0108 	add.w	r1, r7, #8
 8021f34:	2309      	movs	r3, #9
 8021f36:	2200      	movs	r2, #0
 8021f38:	6878      	ldr	r0, [r7, #4]
 8021f3a:	f7ff fef5 	bl	8021d28 <_ZN10LineSensor9MergeSortEPthh>
        median = temp_array[HALF_CONSECUTIVE_TIMES];
 8021f3e:	8a7b      	ldrh	r3, [r7, #18]
 8021f40:	83fb      	strh	r3, [r7, #30]

#ifdef DEBUG_MODE
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021f42:	2300      	movs	r3, #0
 8021f44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021f48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021f4c:	2b09      	cmp	r3, #9
 8021f4e:	d81a      	bhi.n	8021f86 <_ZN10LineSensor6UpdateEv+0xba>
        {
            g_consecutive_line_buff[i][j] = temp_array[j];
 8021f50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021f54:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021f58:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8021f5c:	005b      	lsls	r3, r3, #1
 8021f5e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8021f62:	4403      	add	r3, r0
 8021f64:	f833 4c20 	ldrh.w	r4, [r3, #-32]
 8021f68:	4837      	ldr	r0, [pc, #220]	; (8022048 <_ZN10LineSensor6UpdateEv+0x17c>)
 8021f6a:	4613      	mov	r3, r2
 8021f6c:	009b      	lsls	r3, r3, #2
 8021f6e:	4413      	add	r3, r2
 8021f70:	005b      	lsls	r3, r3, #1
 8021f72:	440b      	add	r3, r1
 8021f74:	4622      	mov	r2, r4
 8021f76:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021f7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021f7e:	3301      	adds	r3, #1
 8021f80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021f84:	e7e0      	b.n	8021f48 <_ZN10LineSensor6UpdateEv+0x7c>
        }
#endif // DEBUG_MODE

        max = max_line_sensors_valu_[i];
 8021f86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021f8a:	687a      	ldr	r2, [r7, #4]
 8021f8c:	3398      	adds	r3, #152	; 0x98
 8021f8e:	005b      	lsls	r3, r3, #1
 8021f90:	4413      	add	r3, r2
 8021f92:	889b      	ldrh	r3, [r3, #4]
 8021f94:	84bb      	strh	r3, [r7, #36]	; 0x24
        min = min_line_sensors_valu_[i];
 8021f96:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021f9a:	687b      	ldr	r3, [r7, #4]
 8021f9c:	32a8      	adds	r2, #168	; 0xa8
 8021f9e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8021fa2:	847b      	strh	r3, [r7, #34]	; 0x22
        if(max < median)      max = median;
 8021fa4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021fa6:	8bfb      	ldrh	r3, [r7, #30]
 8021fa8:	429a      	cmp	r2, r3
 8021faa:	d202      	bcs.n	8021fb2 <_ZN10LineSensor6UpdateEv+0xe6>
 8021fac:	8bfb      	ldrh	r3, [r7, #30]
 8021fae:	84bb      	strh	r3, [r7, #36]	; 0x24
 8021fb0:	e00b      	b.n	8021fca <_ZN10LineSensor6UpdateEv+0xfe>
        else if(min > median) min = median;
 8021fb2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8021fb4:	8bfb      	ldrh	r3, [r7, #30]
 8021fb6:	429a      	cmp	r2, r3
 8021fb8:	d902      	bls.n	8021fc0 <_ZN10LineSensor6UpdateEv+0xf4>
 8021fba:	8bfb      	ldrh	r3, [r7, #30]
 8021fbc:	847b      	strh	r3, [r7, #34]	; 0x22
 8021fbe:	e004      	b.n	8021fca <_ZN10LineSensor6UpdateEv+0xfe>
        else if(min == 0)     min = median;
 8021fc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021fc2:	2b00      	cmp	r3, #0
 8021fc4:	d101      	bne.n	8021fca <_ZN10LineSensor6UpdateEv+0xfe>
 8021fc6:	8bfb      	ldrh	r3, [r7, #30]
 8021fc8:	847b      	strh	r3, [r7, #34]	; 0x22
        max_line_sensors_valu_[i] = max;
 8021fca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021fce:	687a      	ldr	r2, [r7, #4]
 8021fd0:	3398      	adds	r3, #152	; 0x98
 8021fd2:	005b      	lsls	r3, r3, #1
 8021fd4:	4413      	add	r3, r2
 8021fd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021fd8:	809a      	strh	r2, [r3, #4]
        min_line_sensors_valu_[i] = min;
 8021fda:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021fde:	687b      	ldr	r3, [r7, #4]
 8021fe0:	32a8      	adds	r2, #168	; 0xa8
 8021fe2:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8021fe4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

        if(max > min)
 8021fe8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021fea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021fec:	429a      	cmp	r2, r3
 8021fee:	d91c      	bls.n	802202a <_ZN10LineSensor6UpdateEv+0x15e>
        {
            normalized = MAX_NORMALIZED_VALU * (median - min) / (max - min);
 8021ff0:	8bfa      	ldrh	r2, [r7, #30]
 8021ff2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021ff4:	1ad3      	subs	r3, r2, r3
 8021ff6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8021ffa:	fb02 f203 	mul.w	r2, r2, r3
 8021ffe:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8022000:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022002:	1acb      	subs	r3, r1, r3
 8022004:	fb92 f3f3 	sdiv	r3, r2, r3
 8022008:	83bb      	strh	r3, [r7, #28]
            line_sensors_valu_[i] = normalized;
 802200a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802200e:	687a      	ldr	r2, [r7, #4]
 8022010:	33b4      	adds	r3, #180	; 0xb4
 8022012:	005b      	lsls	r3, r3, #1
 8022014:	4413      	add	r3, r2
 8022016:	8bba      	ldrh	r2, [r7, #28]
 8022018:	809a      	strh	r2, [r3, #4]

            if(normalized < EMERGENCY_STOP_BORDER) emergency = false;
 802201a:	8bbb      	ldrh	r3, [r7, #28]
 802201c:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8022020:	4293      	cmp	r3, r2
 8022022:	d802      	bhi.n	802202a <_ZN10LineSensor6UpdateEv+0x15e>
 8022024:	2300      	movs	r3, #0
 8022026:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 802202a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802202e:	3301      	adds	r3, #1
 8022030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8022034:	e754      	b.n	8021ee0 <_ZN10LineSensor6UpdateEv+0x14>
        }
    }

    emergency_stop_flag_ = emergency;
 8022036:	687b      	ldr	r3, [r7, #4]
 8022038:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 802203c:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
}
 8022040:	bf00      	nop
 8022042:	372c      	adds	r7, #44	; 0x2c
 8022044:	46bd      	mov	sp, r7
 8022046:	bd90      	pop	{r4, r7, pc}
 8022048:	200000e0 	.word	0x200000e0

0802204c <_ZN10LineSensor20GetEmergencyStopFlagEv>:

bool LineSensor::GetEmergencyStopFlag()
{
 802204c:	b480      	push	{r7}
 802204e:	b083      	sub	sp, #12
 8022050:	af00      	add	r7, sp, #0
 8022052:	6078      	str	r0, [r7, #4]
    return emergency_stop_flag_;
 8022054:	687b      	ldr	r3, [r7, #4]
 8022056:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
}
 802205a:	4618      	mov	r0, r3
 802205c:	370c      	adds	r7, #12
 802205e:	46bd      	mov	sp, r7
 8022060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022064:	4770      	bx	lr
	...

08022068 <_ZN10LineSensor19LeftRightDifferenceEv>:

float LineSensor::LeftRightDifference()
{
 8022068:	b5b0      	push	{r4, r5, r7, lr}
 802206a:	b086      	sub	sp, #24
 802206c:	af00      	add	r7, sp, #0
 802206e:	6078      	str	r0, [r7, #4]
    uint8_t i;
    uint32_t left = 0, right = 0;
 8022070:	2300      	movs	r3, #0
 8022072:	613b      	str	r3, [r7, #16]
 8022074:	2300      	movs	r3, #0
 8022076:	60fb      	str	r3, [r7, #12]

    for(i = 0; i < HALF_NUM_OF_LINE_SENSORS; i++)
 8022078:	2300      	movs	r3, #0
 802207a:	75fb      	strb	r3, [r7, #23]
 802207c:	7dfb      	ldrb	r3, [r7, #23]
 802207e:	2b06      	cmp	r3, #6
 8022080:	d80d      	bhi.n	802209e <_ZN10LineSensor19LeftRightDifferenceEv+0x36>
    {
        left += line_sensors_valu_[i];
 8022082:	7dfb      	ldrb	r3, [r7, #23]
 8022084:	687a      	ldr	r2, [r7, #4]
 8022086:	33b4      	adds	r3, #180	; 0xb4
 8022088:	005b      	lsls	r3, r3, #1
 802208a:	4413      	add	r3, r2
 802208c:	889b      	ldrh	r3, [r3, #4]
 802208e:	461a      	mov	r2, r3
 8022090:	693b      	ldr	r3, [r7, #16]
 8022092:	4413      	add	r3, r2
 8022094:	613b      	str	r3, [r7, #16]
    for(i = 0; i < HALF_NUM_OF_LINE_SENSORS; i++)
 8022096:	7dfb      	ldrb	r3, [r7, #23]
 8022098:	3301      	adds	r3, #1
 802209a:	75fb      	strb	r3, [r7, #23]
 802209c:	e7ee      	b.n	802207c <_ZN10LineSensor19LeftRightDifferenceEv+0x14>
    }
    for(i = HALF_NUM_OF_LINE_SENSORS; i < NUM_OF_LINE_SENSORS; i++)
 802209e:	2307      	movs	r3, #7
 80220a0:	75fb      	strb	r3, [r7, #23]
 80220a2:	7dfb      	ldrb	r3, [r7, #23]
 80220a4:	2b0d      	cmp	r3, #13
 80220a6:	d80d      	bhi.n	80220c4 <_ZN10LineSensor19LeftRightDifferenceEv+0x5c>
    {
        right += line_sensors_valu_[i];
 80220a8:	7dfb      	ldrb	r3, [r7, #23]
 80220aa:	687a      	ldr	r2, [r7, #4]
 80220ac:	33b4      	adds	r3, #180	; 0xb4
 80220ae:	005b      	lsls	r3, r3, #1
 80220b0:	4413      	add	r3, r2
 80220b2:	889b      	ldrh	r3, [r3, #4]
 80220b4:	461a      	mov	r2, r3
 80220b6:	68fb      	ldr	r3, [r7, #12]
 80220b8:	4413      	add	r3, r2
 80220ba:	60fb      	str	r3, [r7, #12]
    for(i = HALF_NUM_OF_LINE_SENSORS; i < NUM_OF_LINE_SENSORS; i++)
 80220bc:	7dfb      	ldrb	r3, [r7, #23]
 80220be:	3301      	adds	r3, #1
 80220c0:	75fb      	strb	r3, [r7, #23]
 80220c2:	e7ee      	b.n	80220a2 <_ZN10LineSensor19LeftRightDifferenceEv+0x3a>
    }

#ifdef DEBUG_MODE
    g_line_left = left;
 80220c4:	4a18      	ldr	r2, [pc, #96]	; (8022128 <_ZN10LineSensor19LeftRightDifferenceEv+0xc0>)
 80220c6:	693b      	ldr	r3, [r7, #16]
 80220c8:	6013      	str	r3, [r2, #0]
    g_line_right = right;
 80220ca:	4a18      	ldr	r2, [pc, #96]	; (802212c <_ZN10LineSensor19LeftRightDifferenceEv+0xc4>)
 80220cc:	68fb      	ldr	r3, [r7, #12]
 80220ce:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    float difference = right * LINE_SENSOR_CORRECTION - left;
 80220d0:	68f8      	ldr	r0, [r7, #12]
 80220d2:	f7fe f8f7 	bl	80202c4 <__aeabi_ui2d>
 80220d6:	a312      	add	r3, pc, #72	; (adr r3, 8022120 <_ZN10LineSensor19LeftRightDifferenceEv+0xb8>)
 80220d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220dc:	f7fe f96c 	bl	80203b8 <__aeabi_dmul>
 80220e0:	4603      	mov	r3, r0
 80220e2:	460c      	mov	r4, r1
 80220e4:	4625      	mov	r5, r4
 80220e6:	461c      	mov	r4, r3
 80220e8:	6938      	ldr	r0, [r7, #16]
 80220ea:	f7fe f8eb 	bl	80202c4 <__aeabi_ui2d>
 80220ee:	4602      	mov	r2, r0
 80220f0:	460b      	mov	r3, r1
 80220f2:	4620      	mov	r0, r4
 80220f4:	4629      	mov	r1, r5
 80220f6:	f7fd ffa7 	bl	8020048 <__aeabi_dsub>
 80220fa:	4603      	mov	r3, r0
 80220fc:	460c      	mov	r4, r1
 80220fe:	4618      	mov	r0, r3
 8022100:	4621      	mov	r1, r4
 8022102:	f7fe fbf3 	bl	80208ec <__aeabi_d2f>
 8022106:	4603      	mov	r3, r0
 8022108:	60bb      	str	r3, [r7, #8]

    return difference;
 802210a:	68bb      	ldr	r3, [r7, #8]
 802210c:	ee07 3a90 	vmov	s15, r3
}
 8022110:	eeb0 0a67 	vmov.f32	s0, s15
 8022114:	3718      	adds	r7, #24
 8022116:	46bd      	mov	sp, r7
 8022118:	bdb0      	pop	{r4, r5, r7, pc}
 802211a:	bf00      	nop
 802211c:	f3af 8000 	nop.w
 8022120:	66666666 	.word	0x66666666
 8022124:	3fee6666 	.word	0x3fee6666
 8022128:	2000024c 	.word	0x2000024c
 802212c:	20000250 	.word	0x20000250

08022130 <_ZN10LineSensor16CheckCalibrationEv>:

bool LineSensor::CheckCalibration()
{
 8022130:	b480      	push	{r7}
 8022132:	b085      	sub	sp, #20
 8022134:	af00      	add	r7, sp, #0
 8022136:	6078      	str	r0, [r7, #4]
    static uint16_t timer = 0;
    static uint16_t pre_max[NUM_OF_LINE_SENSORS] = {0};
    static uint16_t pre_min[NUM_OF_LINE_SENSORS] = {0};
    uint16_t max, min;
    bool result = true;
 8022138:	2301      	movs	r3, #1
 802213a:	73fb      	strb	r3, [r7, #15]

    for(uint8_t i = 0; i > NUM_OF_LINE_SENSORS; i++)
 802213c:	2300      	movs	r3, #0
 802213e:	73bb      	strb	r3, [r7, #14]
 8022140:	7bbb      	ldrb	r3, [r7, #14]
 8022142:	2b0e      	cmp	r3, #14
 8022144:	d92d      	bls.n	80221a2 <_ZN10LineSensor16CheckCalibrationEv+0x72>
    {
        max = max_line_sensors_valu_[i];
 8022146:	7bbb      	ldrb	r3, [r7, #14]
 8022148:	687a      	ldr	r2, [r7, #4]
 802214a:	3398      	adds	r3, #152	; 0x98
 802214c:	005b      	lsls	r3, r3, #1
 802214e:	4413      	add	r3, r2
 8022150:	889b      	ldrh	r3, [r3, #4]
 8022152:	81bb      	strh	r3, [r7, #12]
        min = min_line_sensors_valu_[i];
 8022154:	7bba      	ldrb	r2, [r7, #14]
 8022156:	687b      	ldr	r3, [r7, #4]
 8022158:	32a8      	adds	r2, #168	; 0xa8
 802215a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802215e:	817b      	strh	r3, [r7, #10]

        if(pre_max[i] != max)      result = false;
 8022160:	7bbb      	ldrb	r3, [r7, #14]
 8022162:	4a1e      	ldr	r2, [pc, #120]	; (80221dc <_ZN10LineSensor16CheckCalibrationEv+0xac>)
 8022164:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8022168:	89ba      	ldrh	r2, [r7, #12]
 802216a:	429a      	cmp	r2, r3
 802216c:	d002      	beq.n	8022174 <_ZN10LineSensor16CheckCalibrationEv+0x44>
 802216e:	2300      	movs	r3, #0
 8022170:	73fb      	strb	r3, [r7, #15]
 8022172:	e008      	b.n	8022186 <_ZN10LineSensor16CheckCalibrationEv+0x56>
        else if(pre_min[i] != min) result = false;
 8022174:	7bbb      	ldrb	r3, [r7, #14]
 8022176:	4a1a      	ldr	r2, [pc, #104]	; (80221e0 <_ZN10LineSensor16CheckCalibrationEv+0xb0>)
 8022178:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802217c:	897a      	ldrh	r2, [r7, #10]
 802217e:	429a      	cmp	r2, r3
 8022180:	d001      	beq.n	8022186 <_ZN10LineSensor16CheckCalibrationEv+0x56>
 8022182:	2300      	movs	r3, #0
 8022184:	73fb      	strb	r3, [r7, #15]

        pre_max[i] = max;
 8022186:	7bbb      	ldrb	r3, [r7, #14]
 8022188:	4914      	ldr	r1, [pc, #80]	; (80221dc <_ZN10LineSensor16CheckCalibrationEv+0xac>)
 802218a:	89ba      	ldrh	r2, [r7, #12]
 802218c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        pre_min[i] = min;
 8022190:	7bbb      	ldrb	r3, [r7, #14]
 8022192:	4913      	ldr	r1, [pc, #76]	; (80221e0 <_ZN10LineSensor16CheckCalibrationEv+0xb0>)
 8022194:	897a      	ldrh	r2, [r7, #10]
 8022196:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(uint8_t i = 0; i > NUM_OF_LINE_SENSORS; i++)
 802219a:	7bbb      	ldrb	r3, [r7, #14]
 802219c:	3301      	adds	r3, #1
 802219e:	73bb      	strb	r3, [r7, #14]
 80221a0:	e7ce      	b.n	8022140 <_ZN10LineSensor16CheckCalibrationEv+0x10>
    }

    if(result)
 80221a2:	7bfb      	ldrb	r3, [r7, #15]
 80221a4:	2b00      	cmp	r3, #0
 80221a6:	d00e      	beq.n	80221c6 <_ZN10LineSensor16CheckCalibrationEv+0x96>
    {
        if(timer < CALIBRATION_SUCCESS_TIME)
 80221a8:	4b0e      	ldr	r3, [pc, #56]	; (80221e4 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 80221aa:	881b      	ldrh	r3, [r3, #0]
 80221ac:	f240 52db 	movw	r2, #1499	; 0x5db
 80221b0:	4293      	cmp	r3, r2
 80221b2:	d80b      	bhi.n	80221cc <_ZN10LineSensor16CheckCalibrationEv+0x9c>
        {
            timer++;
 80221b4:	4b0b      	ldr	r3, [pc, #44]	; (80221e4 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 80221b6:	881b      	ldrh	r3, [r3, #0]
 80221b8:	3301      	adds	r3, #1
 80221ba:	b29a      	uxth	r2, r3
 80221bc:	4b09      	ldr	r3, [pc, #36]	; (80221e4 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 80221be:	801a      	strh	r2, [r3, #0]
            result = false;
 80221c0:	2300      	movs	r3, #0
 80221c2:	73fb      	strb	r3, [r7, #15]
 80221c4:	e002      	b.n	80221cc <_ZN10LineSensor16CheckCalibrationEv+0x9c>
        }
    }
    else timer = 0;
 80221c6:	4b07      	ldr	r3, [pc, #28]	; (80221e4 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 80221c8:	2200      	movs	r2, #0
 80221ca:	801a      	strh	r2, [r3, #0]
    
    return result;
 80221cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80221ce:	4618      	mov	r0, r3
 80221d0:	3714      	adds	r7, #20
 80221d2:	46bd      	mov	sp, r7
 80221d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221d8:	4770      	bx	lr
 80221da:	bf00      	nop
 80221dc:	20000040 	.word	0x20000040
 80221e0:	2000005c 	.word	0x2000005c
 80221e4:	2000003e 	.word	0x2000003e

080221e8 <_ZN10LineSensor13MonitorArraysEv>:

#ifdef DEBUG_MODE
void LineSensor::MonitorArrays()
{
 80221e8:	b480      	push	{r7}
 80221ea:	b085      	sub	sp, #20
 80221ec:	af00      	add	r7, sp, #0
 80221ee:	6078      	str	r0, [r7, #4]
    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 80221f0:	2300      	movs	r3, #0
 80221f2:	73fb      	strb	r3, [r7, #15]
 80221f4:	7bfb      	ldrb	r3, [r7, #15]
 80221f6:	2b0d      	cmp	r3, #13
 80221f8:	d828      	bhi.n	802224c <_ZN10LineSensor13MonitorArraysEv+0x64>
    {
        g_line_buff[i] = line_sensors_buff_[i];
 80221fa:	7bf9      	ldrb	r1, [r7, #15]
 80221fc:	7bfb      	ldrb	r3, [r7, #15]
 80221fe:	687a      	ldr	r2, [r7, #4]
 8022200:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8022204:	4a14      	ldr	r2, [pc, #80]	; (8022258 <_ZN10LineSensor13MonitorArraysEv+0x70>)
 8022206:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        g_max_line_valu[i] = max_line_sensors_valu_[i];
 802220a:	7bfb      	ldrb	r3, [r7, #15]
 802220c:	7bfa      	ldrb	r2, [r7, #15]
 802220e:	6879      	ldr	r1, [r7, #4]
 8022210:	3398      	adds	r3, #152	; 0x98
 8022212:	005b      	lsls	r3, r3, #1
 8022214:	440b      	add	r3, r1
 8022216:	8899      	ldrh	r1, [r3, #4]
 8022218:	4b10      	ldr	r3, [pc, #64]	; (802225c <_ZN10LineSensor13MonitorArraysEv+0x74>)
 802221a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        g_min_line_valu[i] = min_line_sensors_valu_[i];
 802221e:	7bf9      	ldrb	r1, [r7, #15]
 8022220:	7bfb      	ldrb	r3, [r7, #15]
 8022222:	687a      	ldr	r2, [r7, #4]
 8022224:	31a8      	adds	r1, #168	; 0xa8
 8022226:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 802222a:	4a0d      	ldr	r2, [pc, #52]	; (8022260 <_ZN10LineSensor13MonitorArraysEv+0x78>)
 802222c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        g_line_valu[i] = line_sensors_valu_[i];
 8022230:	7bfb      	ldrb	r3, [r7, #15]
 8022232:	7bfa      	ldrb	r2, [r7, #15]
 8022234:	6879      	ldr	r1, [r7, #4]
 8022236:	33b4      	adds	r3, #180	; 0xb4
 8022238:	005b      	lsls	r3, r3, #1
 802223a:	440b      	add	r3, r1
 802223c:	8899      	ldrh	r1, [r3, #4]
 802223e:	4b09      	ldr	r3, [pc, #36]	; (8022264 <_ZN10LineSensor13MonitorArraysEv+0x7c>)
 8022240:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8022244:	7bfb      	ldrb	r3, [r7, #15]
 8022246:	3301      	adds	r3, #1
 8022248:	73fb      	strb	r3, [r7, #15]
 802224a:	e7d3      	b.n	80221f4 <_ZN10LineSensor13MonitorArraysEv+0xc>
    }
}
 802224c:	bf00      	nop
 802224e:	3714      	adds	r7, #20
 8022250:	46bd      	mov	sp, r7
 8022252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022256:	4770      	bx	lr
 8022258:	200000c4 	.word	0x200000c4
 802225c:	200001f8 	.word	0x200001f8
 8022260:	20000214 	.word	0x20000214
 8022264:	20000230 	.word	0x20000230

08022268 <_ZN9LineTraceC1EP10LineSensor>:
#include "line_trace.hpp"

LineTrace::LineTrace(LineSensor *line_sensor) : integral_error_(0)
 8022268:	b480      	push	{r7}
 802226a:	b083      	sub	sp, #12
 802226c:	af00      	add	r7, sp, #0
 802226e:	6078      	str	r0, [r7, #4]
 8022270:	6039      	str	r1, [r7, #0]
 8022272:	687b      	ldr	r3, [r7, #4]
 8022274:	f04f 0200 	mov.w	r2, #0
 8022278:	601a      	str	r2, [r3, #0]
{
    line_sensor_ = line_sensor;
 802227a:	687b      	ldr	r3, [r7, #4]
 802227c:	683a      	ldr	r2, [r7, #0]
 802227e:	605a      	str	r2, [r3, #4]
}
 8022280:	687b      	ldr	r3, [r7, #4]
 8022282:	4618      	mov	r0, r3
 8022284:	370c      	adds	r7, #12
 8022286:	46bd      	mov	sp, r7
 8022288:	f85d 7b04 	ldr.w	r7, [sp], #4
 802228c:	4770      	bx	lr

0802228e <_ZN9LineTrace13LineTraceOnlyEv>:

float LineTrace::LineTraceOnly()
{
 802228e:	b580      	push	{r7, lr}
 8022290:	b086      	sub	sp, #24
 8022292:	af00      	add	r7, sp, #0
 8022294:	6078      	str	r0, [r7, #4]
    float p_gain = LINE_ONLY_P_GAIN;
 8022296:	f04f 0300 	mov.w	r3, #0
 802229a:	617b      	str	r3, [r7, #20]
    float i_gain = LINE_ONLY_I_GAIN;
 802229c:	f04f 0300 	mov.w	r3, #0
 80222a0:	613b      	str	r3, [r7, #16]
    float d_gain = LINE_ONLY_D_GAIN;
 80222a2:	f04f 0300 	mov.w	r3, #0
 80222a6:	60fb      	str	r3, [r7, #12]

    return PidControl(p_gain, i_gain, d_gain);
 80222a8:	ed97 1a03 	vldr	s2, [r7, #12]
 80222ac:	edd7 0a04 	vldr	s1, [r7, #16]
 80222b0:	ed97 0a05 	vldr	s0, [r7, #20]
 80222b4:	6878      	ldr	r0, [r7, #4]
 80222b6:	f000 f84f 	bl	8022358 <_ZN9LineTrace10PidControlEfff>
 80222ba:	eef0 7a40 	vmov.f32	s15, s0
}
 80222be:	eeb0 0a67 	vmov.f32	s0, s15
 80222c2:	3718      	adds	r7, #24
 80222c4:	46bd      	mov	sp, r7
 80222c6:	bd80      	pop	{r7, pc}

080222c8 <_ZN9LineTrace16DeterminePidGainEf>:

float LineTrace::DeterminePidGain(float target_velocity)
{
 80222c8:	b580      	push	{r7, lr}
 80222ca:	b086      	sub	sp, #24
 80222cc:	af00      	add	r7, sp, #0
 80222ce:	6078      	str	r0, [r7, #4]
 80222d0:	ed87 0a00 	vstr	s0, [r7]
    float p_gain, i_gain, d_gain;

    if(target_velocity < TARGET_VELOCITY_0)
 80222d4:	edd7 7a00 	vldr	s15, [r7]
 80222d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80222dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80222e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80222e4:	d509      	bpl.n	80222fa <_ZN9LineTrace16DeterminePidGainEf+0x32>
    {
        p_gain = LINE_P_GAIN_0;
 80222e6:	f04f 0300 	mov.w	r3, #0
 80222ea:	617b      	str	r3, [r7, #20]
        i_gain = LINE_I_GAIN_0;
 80222ec:	f04f 0300 	mov.w	r3, #0
 80222f0:	613b      	str	r3, [r7, #16]
        d_gain = LINE_D_GAIN_0;
 80222f2:	f04f 0300 	mov.w	r3, #0
 80222f6:	60fb      	str	r3, [r7, #12]
 80222f8:	e01b      	b.n	8022332 <_ZN9LineTrace16DeterminePidGainEf+0x6a>
    }
    else if(target_velocity < TARGET_VELOCITY_1)
 80222fa:	edd7 7a00 	vldr	s15, [r7]
 80222fe:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8022302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802230a:	d509      	bpl.n	8022320 <_ZN9LineTrace16DeterminePidGainEf+0x58>
    {
        p_gain = LINE_P_GAIN_1;
 802230c:	f04f 0300 	mov.w	r3, #0
 8022310:	617b      	str	r3, [r7, #20]
        i_gain = LINE_I_GAIN_1;
 8022312:	f04f 0300 	mov.w	r3, #0
 8022316:	613b      	str	r3, [r7, #16]
        d_gain = LINE_D_GAIN_1;
 8022318:	f04f 0300 	mov.w	r3, #0
 802231c:	60fb      	str	r3, [r7, #12]
 802231e:	e008      	b.n	8022332 <_ZN9LineTrace16DeterminePidGainEf+0x6a>
    }
    else // Error handler
    {
        p_gain = 0;
 8022320:	f04f 0300 	mov.w	r3, #0
 8022324:	617b      	str	r3, [r7, #20]
        i_gain = 0;
 8022326:	f04f 0300 	mov.w	r3, #0
 802232a:	613b      	str	r3, [r7, #16]
        d_gain = 0;
 802232c:	f04f 0300 	mov.w	r3, #0
 8022330:	60fb      	str	r3, [r7, #12]
    }

    return PidControl(p_gain, i_gain, d_gain);
 8022332:	ed97 1a03 	vldr	s2, [r7, #12]
 8022336:	edd7 0a04 	vldr	s1, [r7, #16]
 802233a:	ed97 0a05 	vldr	s0, [r7, #20]
 802233e:	6878      	ldr	r0, [r7, #4]
 8022340:	f000 f80a 	bl	8022358 <_ZN9LineTrace10PidControlEfff>
 8022344:	eef0 7a40 	vmov.f32	s15, s0
}
 8022348:	eeb0 0a67 	vmov.f32	s0, s15
 802234c:	3718      	adds	r7, #24
 802234e:	46bd      	mov	sp, r7
 8022350:	bd80      	pop	{r7, pc}
 8022352:	0000      	movs	r0, r0
 8022354:	0000      	movs	r0, r0
	...

08022358 <_ZN9LineTrace10PidControlEfff>:

float LineTrace::PidControl(float p_gain, float i_gain, float d_gain)
{
 8022358:	b590      	push	{r4, r7, lr}
 802235a:	b08b      	sub	sp, #44	; 0x2c
 802235c:	af00      	add	r7, sp, #0
 802235e:	60f8      	str	r0, [r7, #12]
 8022360:	ed87 0a02 	vstr	s0, [r7, #8]
 8022364:	edc7 0a01 	vstr	s1, [r7, #4]
 8022368:	ed87 1a00 	vstr	s2, [r7]
    static float pre_error = line_sensor_->LeftRightDifference();
 802236c:	4b52      	ldr	r3, [pc, #328]	; (80224b8 <_ZN9LineTrace10PidControlEfff+0x160>)
 802236e:	781b      	ldrb	r3, [r3, #0]
 8022370:	f3bf 8f5b 	dmb	ish
 8022374:	b2db      	uxtb	r3, r3
 8022376:	f003 0301 	and.w	r3, r3, #1
 802237a:	2b00      	cmp	r3, #0
 802237c:	bf0c      	ite	eq
 802237e:	2301      	moveq	r3, #1
 8022380:	2300      	movne	r3, #0
 8022382:	b2db      	uxtb	r3, r3
 8022384:	2b00      	cmp	r3, #0
 8022386:	d017      	beq.n	80223b8 <_ZN9LineTrace10PidControlEfff+0x60>
 8022388:	484b      	ldr	r0, [pc, #300]	; (80224b8 <_ZN9LineTrace10PidControlEfff+0x160>)
 802238a:	f008 f83b 	bl	802a404 <__cxa_guard_acquire>
 802238e:	4603      	mov	r3, r0
 8022390:	2b00      	cmp	r3, #0
 8022392:	bf14      	ite	ne
 8022394:	2301      	movne	r3, #1
 8022396:	2300      	moveq	r3, #0
 8022398:	b2db      	uxtb	r3, r3
 802239a:	2b00      	cmp	r3, #0
 802239c:	d00c      	beq.n	80223b8 <_ZN9LineTrace10PidControlEfff+0x60>
 802239e:	68fb      	ldr	r3, [r7, #12]
 80223a0:	685b      	ldr	r3, [r3, #4]
 80223a2:	4618      	mov	r0, r3
 80223a4:	f7ff fe60 	bl	8022068 <_ZN10LineSensor19LeftRightDifferenceEv>
 80223a8:	eef0 7a40 	vmov.f32	s15, s0
 80223ac:	4b43      	ldr	r3, [pc, #268]	; (80224bc <_ZN9LineTrace10PidControlEfff+0x164>)
 80223ae:	edc3 7a00 	vstr	s15, [r3]
 80223b2:	4841      	ldr	r0, [pc, #260]	; (80224b8 <_ZN9LineTrace10PidControlEfff+0x160>)
 80223b4:	f008 f832 	bl	802a41c <__cxa_guard_release>
    float error, differential_error, integral_error;
    float p, d, i;

    error = line_sensor_->LeftRightDifference();
 80223b8:	68fb      	ldr	r3, [r7, #12]
 80223ba:	685b      	ldr	r3, [r3, #4]
 80223bc:	4618      	mov	r0, r3
 80223be:	f7ff fe53 	bl	8022068 <_ZN10LineSensor19LeftRightDifferenceEv>
 80223c2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    differential_error = (error - pre_error) / TIM6_PERIOD_S;
 80223c6:	4b3d      	ldr	r3, [pc, #244]	; (80224bc <_ZN9LineTrace10PidControlEfff+0x164>)
 80223c8:	edd3 7a00 	vldr	s15, [r3]
 80223cc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80223d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80223d4:	ee17 0a90 	vmov	r0, s15
 80223d8:	f7fd ff96 	bl	8020308 <__aeabi_f2d>
 80223dc:	a334      	add	r3, pc, #208	; (adr r3, 80224b0 <_ZN9LineTrace10PidControlEfff+0x158>)
 80223de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223e2:	f7fe f913 	bl	802060c <__aeabi_ddiv>
 80223e6:	4603      	mov	r3, r0
 80223e8:	460c      	mov	r4, r1
 80223ea:	4618      	mov	r0, r3
 80223ec:	4621      	mov	r1, r4
 80223ee:	f7fe fa7d 	bl	80208ec <__aeabi_d2f>
 80223f2:	4603      	mov	r3, r0
 80223f4:	623b      	str	r3, [r7, #32]
    integral_error = (error + pre_error) / 2.0 * TIM6_PERIOD_S;
 80223f6:	4b31      	ldr	r3, [pc, #196]	; (80224bc <_ZN9LineTrace10PidControlEfff+0x164>)
 80223f8:	ed93 7a00 	vldr	s14, [r3]
 80223fc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8022400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022404:	ee17 0a90 	vmov	r0, s15
 8022408:	f7fd ff7e 	bl	8020308 <__aeabi_f2d>
 802240c:	f04f 0200 	mov.w	r2, #0
 8022410:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8022414:	f7fe f8fa 	bl	802060c <__aeabi_ddiv>
 8022418:	4603      	mov	r3, r0
 802241a:	460c      	mov	r4, r1
 802241c:	4618      	mov	r0, r3
 802241e:	4621      	mov	r1, r4
 8022420:	a323      	add	r3, pc, #140	; (adr r3, 80224b0 <_ZN9LineTrace10PidControlEfff+0x158>)
 8022422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022426:	f7fd ffc7 	bl	80203b8 <__aeabi_dmul>
 802242a:	4603      	mov	r3, r0
 802242c:	460c      	mov	r4, r1
 802242e:	4618      	mov	r0, r3
 8022430:	4621      	mov	r1, r4
 8022432:	f7fe fa5b 	bl	80208ec <__aeabi_d2f>
 8022436:	4603      	mov	r3, r0
 8022438:	61fb      	str	r3, [r7, #28]
    SetIntegralError(integral_error);
 802243a:	ed97 0a07 	vldr	s0, [r7, #28]
 802243e:	68f8      	ldr	r0, [r7, #12]
 8022440:	f000 f844 	bl	80224cc <_ZN9LineTrace16SetIntegralErrorEf>

    p = p_gain * error;
 8022444:	ed97 7a02 	vldr	s14, [r7, #8]
 8022448:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 802244c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022450:	edc7 7a06 	vstr	s15, [r7, #24]
    d = d_gain * differential_error;
 8022454:	ed97 7a00 	vldr	s14, [r7]
 8022458:	edd7 7a08 	vldr	s15, [r7, #32]
 802245c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022460:	edc7 7a05 	vstr	s15, [r7, #20]
    i = i_gain * integral_error_;
 8022464:	68fb      	ldr	r3, [r7, #12]
 8022466:	edd3 7a00 	vldr	s15, [r3]
 802246a:	ed97 7a01 	vldr	s14, [r7, #4]
 802246e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022472:	edc7 7a04 	vstr	s15, [r7, #16]

#ifdef DEBUG_MODE
    g_trace_p = p;
 8022476:	4a12      	ldr	r2, [pc, #72]	; (80224c0 <_ZN9LineTrace10PidControlEfff+0x168>)
 8022478:	69bb      	ldr	r3, [r7, #24]
 802247a:	6013      	str	r3, [r2, #0]
    g_trace_d = d;
 802247c:	4a11      	ldr	r2, [pc, #68]	; (80224c4 <_ZN9LineTrace10PidControlEfff+0x16c>)
 802247e:	697b      	ldr	r3, [r7, #20]
 8022480:	6013      	str	r3, [r2, #0]
    g_trace_i = i;
 8022482:	4a11      	ldr	r2, [pc, #68]	; (80224c8 <_ZN9LineTrace10PidControlEfff+0x170>)
 8022484:	693b      	ldr	r3, [r7, #16]
 8022486:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    pre_error = error;
 8022488:	4a0c      	ldr	r2, [pc, #48]	; (80224bc <_ZN9LineTrace10PidControlEfff+0x164>)
 802248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802248c:	6013      	str	r3, [r2, #0]

    return p + d + i;
 802248e:	ed97 7a06 	vldr	s14, [r7, #24]
 8022492:	edd7 7a05 	vldr	s15, [r7, #20]
 8022496:	ee37 7a27 	vadd.f32	s14, s14, s15
 802249a:	edd7 7a04 	vldr	s15, [r7, #16]
 802249e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80224a2:	eeb0 0a67 	vmov.f32	s0, s15
 80224a6:	372c      	adds	r7, #44	; 0x2c
 80224a8:	46bd      	mov	sp, r7
 80224aa:	bd90      	pop	{r4, r7, pc}
 80224ac:	f3af 8000 	nop.w
 80224b0:	47ae147b 	.word	0x47ae147b
 80224b4:	3f547ae1 	.word	0x3f547ae1
 80224b8:	2000007c 	.word	0x2000007c
 80224bc:	20000078 	.word	0x20000078
 80224c0:	200002dc 	.word	0x200002dc
 80224c4:	200002e4 	.word	0x200002e4
 80224c8:	200002e0 	.word	0x200002e0

080224cc <_ZN9LineTrace16SetIntegralErrorEf>:

void LineTrace::SetIntegralError(float integral_error)
{
 80224cc:	b480      	push	{r7}
 80224ce:	b083      	sub	sp, #12
 80224d0:	af00      	add	r7, sp, #0
 80224d2:	6078      	str	r0, [r7, #4]
 80224d4:	ed87 0a00 	vstr	s0, [r7]
    integral_error_ += integral_error;
 80224d8:	687b      	ldr	r3, [r7, #4]
 80224da:	ed93 7a00 	vldr	s14, [r3]
 80224de:	edd7 7a00 	vldr	s15, [r7]
 80224e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80224e6:	687b      	ldr	r3, [r7, #4]
 80224e8:	edc3 7a00 	vstr	s15, [r3]
}
 80224ec:	bf00      	nop
 80224ee:	370c      	adds	r7, #12
 80224f0:	46bd      	mov	sp, r7
 80224f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224f6:	4770      	bx	lr

080224f8 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 80224f8:	b480      	push	{r7}
 80224fa:	b083      	sub	sp, #12
 80224fc:	af00      	add	r7, sp, #0
 80224fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8022502:	edd7 7a01 	vldr	s15, [r7, #4]
 8022506:	eef0 7ae7 	vabs.f32	s15, s15
 802250a:	eeb0 0a67 	vmov.f32	s0, s15
 802250e:	370c      	adds	r7, #12
 8022510:	46bd      	mov	sp, r7
 8022512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022516:	4770      	bx	lr

08022518 <_ZN6LoggerC1Ev>:
#include "logger.hpp"
#include <math.h>
#include <string.h>

Logger::Logger() : const_distance_log_(), radian_log_(), various_log_(), const_distance_copy_(), radian_copy_(), various_copy_(), accel_address_(), decel_address_(), periodic_write_enable_(0), accel_position_write_enable_(0), excess_stack_(0), target_velocity_(MIN_VELOCITY) {}
 8022518:	b580      	push	{r7, lr}
 802251a:	b082      	sub	sp, #8
 802251c:	af00      	add	r7, sp, #0
 802251e:	6078      	str	r0, [r7, #4]
 8022520:	687a      	ldr	r2, [r7, #4]
 8022522:	2309      	movs	r3, #9
 8022524:	2b00      	cmp	r3, #0
 8022526:	db05      	blt.n	8022534 <_ZN6LoggerC1Ev+0x1c>
 8022528:	f04f 0100 	mov.w	r1, #0
 802252c:	6011      	str	r1, [r2, #0]
 802252e:	3204      	adds	r2, #4
 8022530:	3b01      	subs	r3, #1
 8022532:	e7f7      	b.n	8022524 <_ZN6LoggerC1Ev+0xc>
 8022534:	687b      	ldr	r3, [r7, #4]
 8022536:	f103 0228 	add.w	r2, r3, #40	; 0x28
 802253a:	2309      	movs	r3, #9
 802253c:	2b00      	cmp	r3, #0
 802253e:	db05      	blt.n	802254c <_ZN6LoggerC1Ev+0x34>
 8022540:	f04f 0100 	mov.w	r1, #0
 8022544:	6011      	str	r1, [r2, #0]
 8022546:	3204      	adds	r2, #4
 8022548:	3b01      	subs	r3, #1
 802254a:	e7f7      	b.n	802253c <_ZN6LoggerC1Ev+0x24>
 802254c:	687b      	ldr	r3, [r7, #4]
 802254e:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8022552:	2309      	movs	r3, #9
 8022554:	2b00      	cmp	r3, #0
 8022556:	db04      	blt.n	8022562 <_ZN6LoggerC1Ev+0x4a>
 8022558:	2100      	movs	r1, #0
 802255a:	8011      	strh	r1, [r2, #0]
 802255c:	3202      	adds	r2, #2
 802255e:	3b01      	subs	r3, #1
 8022560:	e7f8      	b.n	8022554 <_ZN6LoggerC1Ev+0x3c>
 8022562:	687b      	ldr	r3, [r7, #4]
 8022564:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8022568:	2309      	movs	r3, #9
 802256a:	2b00      	cmp	r3, #0
 802256c:	db05      	blt.n	802257a <_ZN6LoggerC1Ev+0x62>
 802256e:	f04f 0100 	mov.w	r1, #0
 8022572:	6011      	str	r1, [r2, #0]
 8022574:	3204      	adds	r2, #4
 8022576:	3b01      	subs	r3, #1
 8022578:	e7f7      	b.n	802256a <_ZN6LoggerC1Ev+0x52>
 802257a:	687b      	ldr	r3, [r7, #4]
 802257c:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 8022580:	2309      	movs	r3, #9
 8022582:	2b00      	cmp	r3, #0
 8022584:	db05      	blt.n	8022592 <_ZN6LoggerC1Ev+0x7a>
 8022586:	f04f 0100 	mov.w	r1, #0
 802258a:	6011      	str	r1, [r2, #0]
 802258c:	3204      	adds	r2, #4
 802258e:	3b01      	subs	r3, #1
 8022590:	e7f7      	b.n	8022582 <_ZN6LoggerC1Ev+0x6a>
 8022592:	687b      	ldr	r3, [r7, #4]
 8022594:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8022598:	2309      	movs	r3, #9
 802259a:	2b00      	cmp	r3, #0
 802259c:	db04      	blt.n	80225a8 <_ZN6LoggerC1Ev+0x90>
 802259e:	2100      	movs	r1, #0
 80225a0:	8011      	strh	r1, [r2, #0]
 80225a2:	3202      	adds	r2, #2
 80225a4:	3b01      	subs	r3, #1
 80225a6:	e7f8      	b.n	802259a <_ZN6LoggerC1Ev+0x82>
 80225a8:	687b      	ldr	r3, [r7, #4]
 80225aa:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 80225ae:	2304      	movs	r3, #4
 80225b0:	2b00      	cmp	r3, #0
 80225b2:	db04      	blt.n	80225be <_ZN6LoggerC1Ev+0xa6>
 80225b4:	2100      	movs	r1, #0
 80225b6:	8011      	strh	r1, [r2, #0]
 80225b8:	3202      	adds	r2, #2
 80225ba:	3b01      	subs	r3, #1
 80225bc:	e7f8      	b.n	80225b0 <_ZN6LoggerC1Ev+0x98>
 80225be:	687b      	ldr	r3, [r7, #4]
 80225c0:	f103 02d2 	add.w	r2, r3, #210	; 0xd2
 80225c4:	2304      	movs	r3, #4
 80225c6:	2b00      	cmp	r3, #0
 80225c8:	db04      	blt.n	80225d4 <_ZN6LoggerC1Ev+0xbc>
 80225ca:	2100      	movs	r1, #0
 80225cc:	8011      	strh	r1, [r2, #0]
 80225ce:	3202      	adds	r2, #2
 80225d0:	3b01      	subs	r3, #1
 80225d2:	e7f8      	b.n	80225c6 <_ZN6LoggerC1Ev+0xae>
 80225d4:	687b      	ldr	r3, [r7, #4]
 80225d6:	2200      	movs	r2, #0
 80225d8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80225dc:	687b      	ldr	r3, [r7, #4]
 80225de:	2200      	movs	r2, #0
 80225e0:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 80225e4:	687b      	ldr	r3, [r7, #4]
 80225e6:	f04f 0200 	mov.w	r2, #0
 80225ea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80225ee:	687b      	ldr	r3, [r7, #4]
 80225f0:	4a0b      	ldr	r2, [pc, #44]	; (8022620 <_ZN6LoggerC1Ev+0x108>)
 80225f2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80225f6:	687b      	ldr	r3, [r7, #4]
 80225f8:	33e8      	adds	r3, #232	; 0xe8
 80225fa:	4618      	mov	r0, r3
 80225fc:	f7fe fb8a 	bl	8020d14 <_ZN7EncoderC1Ev>
 8022600:	687b      	ldr	r3, [r7, #4]
 8022602:	33f8      	adds	r3, #248	; 0xf8
 8022604:	4618      	mov	r0, r3
 8022606:	f7fe fe67 	bl	80212d8 <_ZN8Iim42652C1Ev>
 802260a:	687b      	ldr	r3, [r7, #4]
 802260c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022610:	4618      	mov	r0, r3
 8022612:	f002 fd33 	bl	802507c <_ZN10SideSensorC1Ev>
 8022616:	687b      	ldr	r3, [r7, #4]
 8022618:	4618      	mov	r0, r3
 802261a:	3708      	adds	r7, #8
 802261c:	46bd      	mov	sp, r7
 802261e:	bd80      	pop	{r7, pc}
 8022620:	3fa66666 	.word	0x3fa66666
 8022624:	00000000 	.word	0x00000000

08022628 <_ZN6Logger7LoggingEh>:

void Logger::Logging(uint8_t process_complete)
{
 8022628:	b5b0      	push	{r4, r5, r7, lr}
 802262a:	b08c      	sub	sp, #48	; 0x30
 802262c:	af00      	add	r7, sp, #0
 802262e:	6078      	str	r0, [r7, #4]
 8022630:	460b      	mov	r3, r1
 8022632:	70fb      	strb	r3, [r7, #3]
    float distance = encoder.GetDistanceStack();
 8022634:	687b      	ldr	r3, [r7, #4]
 8022636:	33e8      	adds	r3, #232	; 0xe8
 8022638:	4618      	mov	r0, r3
 802263a:	f7fe fc56 	bl	8020eea <_ZN7Encoder16GetDistanceStackEv>
 802263e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    if(distance < LOGGING_CONST_DISTANCE) return;
 8022642:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8022646:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 802264a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802264e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022652:	f100 81f5 	bmi.w	8022a40 <_ZN6Logger7LoggingEh+0x418>
    encoder.ResetDistanceStack();
 8022656:	687b      	ldr	r3, [r7, #4]
 8022658:	33e8      	adds	r3, #232	; 0xe8
 802265a:	4618      	mov	r0, r3
 802265c:	f7fe fc28 	bl	8020eb0 <_ZN7Encoder18ResetDistanceStackEv>

    static uint16_t now_address = 0; // flash address count. (0 ~ 6199)
    static uint16_t log_index = 0;   // Count up when interrupt.

    /* Mapping data of distance */
    const_distance_log_[log_index] = distance;
 8022660:	4bb3      	ldr	r3, [pc, #716]	; (8022930 <_ZN6Logger7LoggingEh+0x308>)
 8022662:	881b      	ldrh	r3, [r3, #0]
 8022664:	687a      	ldr	r2, [r7, #4]
 8022666:	009b      	lsls	r3, r3, #2
 8022668:	4413      	add	r3, r2
 802266a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802266c:	601a      	str	r2, [r3, #0]

    /* Mapping data of radian */
    double degree = iim_42652.GetDegreeStackZ();
 802266e:	687b      	ldr	r3, [r7, #4]
 8022670:	33f8      	adds	r3, #248	; 0xf8
 8022672:	4618      	mov	r0, r3
 8022674:	f7ff f820 	bl	80216b8 <_ZN8Iim4265215GetDegreeStackZEv>
 8022678:	ed87 0b06 	vstr	d0, [r7, #24]
    float radian = static_cast<float>(degree * M_PI / 180.0);
 802267c:	a3aa      	add	r3, pc, #680	; (adr r3, 8022928 <_ZN6Logger7LoggingEh+0x300>)
 802267e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022682:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8022686:	f7fd fe97 	bl	80203b8 <__aeabi_dmul>
 802268a:	4603      	mov	r3, r0
 802268c:	460c      	mov	r4, r1
 802268e:	4618      	mov	r0, r3
 8022690:	4621      	mov	r1, r4
 8022692:	f04f 0200 	mov.w	r2, #0
 8022696:	4ba7      	ldr	r3, [pc, #668]	; (8022934 <_ZN6Logger7LoggingEh+0x30c>)
 8022698:	f7fd ffb8 	bl	802060c <__aeabi_ddiv>
 802269c:	4603      	mov	r3, r0
 802269e:	460c      	mov	r4, r1
 80226a0:	4618      	mov	r0, r3
 80226a2:	4621      	mov	r1, r4
 80226a4:	f7fe f922 	bl	80208ec <__aeabi_d2f>
 80226a8:	4603      	mov	r3, r0
 80226aa:	617b      	str	r3, [r7, #20]
    radian_log_[log_index] = radian;
 80226ac:	4ba0      	ldr	r3, [pc, #640]	; (8022930 <_ZN6Logger7LoggingEh+0x308>)
 80226ae:	881b      	ldrh	r3, [r3, #0]
 80226b0:	687a      	ldr	r2, [r7, #4]
 80226b2:	330a      	adds	r3, #10
 80226b4:	009b      	lsls	r3, r3, #2
 80226b6:	4413      	add	r3, r2
 80226b8:	697a      	ldr	r2, [r7, #20]
 80226ba:	601a      	str	r2, [r3, #0]
    iim_42652.ResetDegreeStackZ();
 80226bc:	687b      	ldr	r3, [r7, #4]
 80226be:	33f8      	adds	r3, #248	; 0xf8
 80226c0:	4618      	mov	r0, r3
 80226c2:	f7fe ffe9 	bl	8021698 <_ZN8Iim4265217ResetDegreeStackZEv>

    /* Various log */
    static uint8_t pre_corner_cnt = side_sensor.GetCornerMarkerCount();
 80226c6:	4b9c      	ldr	r3, [pc, #624]	; (8022938 <_ZN6Logger7LoggingEh+0x310>)
 80226c8:	781b      	ldrb	r3, [r3, #0]
 80226ca:	f3bf 8f5b 	dmb	ish
 80226ce:	b2db      	uxtb	r3, r3
 80226d0:	f003 0301 	and.w	r3, r3, #1
 80226d4:	2b00      	cmp	r3, #0
 80226d6:	bf0c      	ite	eq
 80226d8:	2301      	moveq	r3, #1
 80226da:	2300      	movne	r3, #0
 80226dc:	b2db      	uxtb	r3, r3
 80226de:	2b00      	cmp	r3, #0
 80226e0:	d017      	beq.n	8022712 <_ZN6Logger7LoggingEh+0xea>
 80226e2:	4895      	ldr	r0, [pc, #596]	; (8022938 <_ZN6Logger7LoggingEh+0x310>)
 80226e4:	f007 fe8e 	bl	802a404 <__cxa_guard_acquire>
 80226e8:	4603      	mov	r3, r0
 80226ea:	2b00      	cmp	r3, #0
 80226ec:	bf14      	ite	ne
 80226ee:	2301      	movne	r3, #1
 80226f0:	2300      	moveq	r3, #0
 80226f2:	b2db      	uxtb	r3, r3
 80226f4:	2b00      	cmp	r3, #0
 80226f6:	d00c      	beq.n	8022712 <_ZN6Logger7LoggingEh+0xea>
 80226f8:	687b      	ldr	r3, [r7, #4]
 80226fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80226fe:	4618      	mov	r0, r3
 8022700:	f002 ffb2 	bl	8025668 <_ZN10SideSensor20GetCornerMarkerCountEv>
 8022704:	4603      	mov	r3, r0
 8022706:	461a      	mov	r2, r3
 8022708:	4b8c      	ldr	r3, [pc, #560]	; (802293c <_ZN6Logger7LoggingEh+0x314>)
 802270a:	701a      	strb	r2, [r3, #0]
 802270c:	488a      	ldr	r0, [pc, #552]	; (8022938 <_ZN6Logger7LoggingEh+0x310>)
 802270e:	f007 fe85 	bl	802a41c <__cxa_guard_release>
    static uint8_t pre_cross_cnt  = side_sensor.GetCrossLineCount();
 8022712:	4b8b      	ldr	r3, [pc, #556]	; (8022940 <_ZN6Logger7LoggingEh+0x318>)
 8022714:	781b      	ldrb	r3, [r3, #0]
 8022716:	f3bf 8f5b 	dmb	ish
 802271a:	b2db      	uxtb	r3, r3
 802271c:	f003 0301 	and.w	r3, r3, #1
 8022720:	2b00      	cmp	r3, #0
 8022722:	bf0c      	ite	eq
 8022724:	2301      	moveq	r3, #1
 8022726:	2300      	movne	r3, #0
 8022728:	b2db      	uxtb	r3, r3
 802272a:	2b00      	cmp	r3, #0
 802272c:	d017      	beq.n	802275e <_ZN6Logger7LoggingEh+0x136>
 802272e:	4884      	ldr	r0, [pc, #528]	; (8022940 <_ZN6Logger7LoggingEh+0x318>)
 8022730:	f007 fe68 	bl	802a404 <__cxa_guard_acquire>
 8022734:	4603      	mov	r3, r0
 8022736:	2b00      	cmp	r3, #0
 8022738:	bf14      	ite	ne
 802273a:	2301      	movne	r3, #1
 802273c:	2300      	moveq	r3, #0
 802273e:	b2db      	uxtb	r3, r3
 8022740:	2b00      	cmp	r3, #0
 8022742:	d00c      	beq.n	802275e <_ZN6Logger7LoggingEh+0x136>
 8022744:	687b      	ldr	r3, [r7, #4]
 8022746:	f503 7380 	add.w	r3, r3, #256	; 0x100
 802274a:	4618      	mov	r0, r3
 802274c:	f002 ff98 	bl	8025680 <_ZN10SideSensor17GetCrossLineCountEv>
 8022750:	4603      	mov	r3, r0
 8022752:	461a      	mov	r2, r3
 8022754:	4b7b      	ldr	r3, [pc, #492]	; (8022944 <_ZN6Logger7LoggingEh+0x31c>)
 8022756:	701a      	strb	r2, [r3, #0]
 8022758:	4879      	ldr	r0, [pc, #484]	; (8022940 <_ZN6Logger7LoggingEh+0x318>)
 802275a:	f007 fe5f 	bl	802a41c <__cxa_guard_release>
    uint8_t corner_cnt = side_sensor.GetCornerMarkerCount();
 802275e:	687b      	ldr	r3, [r7, #4]
 8022760:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022764:	4618      	mov	r0, r3
 8022766:	f002 ff7f 	bl	8025668 <_ZN10SideSensor20GetCornerMarkerCountEv>
 802276a:	4603      	mov	r3, r0
 802276c:	74fb      	strb	r3, [r7, #19]
    uint8_t cross_cnt  = side_sensor.GetCrossLineCount();
 802276e:	687b      	ldr	r3, [r7, #4]
 8022770:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022774:	4618      	mov	r0, r3
 8022776:	f002 ff83 	bl	8025680 <_ZN10SideSensor17GetCrossLineCountEv>
 802277a:	4603      	mov	r3, r0
 802277c:	74bb      	strb	r3, [r7, #18]
    uint16_t various_buff = 0;
 802277e:	2300      	movs	r3, #0
 8022780:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(process_complete != 0)        various_buff |= 0x0004;
 8022782:	78fb      	ldrb	r3, [r7, #3]
 8022784:	2b00      	cmp	r3, #0
 8022786:	d003      	beq.n	8022790 <_ZN6Logger7LoggingEh+0x168>
 8022788:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802278a:	f043 0304 	orr.w	r3, r3, #4
 802278e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(pre_corner_cnt != corner_cnt) various_buff |= 0x0002;
 8022790:	4b6a      	ldr	r3, [pc, #424]	; (802293c <_ZN6Logger7LoggingEh+0x314>)
 8022792:	781b      	ldrb	r3, [r3, #0]
 8022794:	7cfa      	ldrb	r2, [r7, #19]
 8022796:	429a      	cmp	r2, r3
 8022798:	d003      	beq.n	80227a2 <_ZN6Logger7LoggingEh+0x17a>
 802279a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 802279c:	f043 0302 	orr.w	r3, r3, #2
 80227a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(pre_cross_cnt != cross_cnt)   various_buff |= 0x0001;
 80227a2:	4b68      	ldr	r3, [pc, #416]	; (8022944 <_ZN6Logger7LoggingEh+0x31c>)
 80227a4:	781b      	ldrb	r3, [r3, #0]
 80227a6:	7cba      	ldrb	r2, [r7, #18]
 80227a8:	429a      	cmp	r2, r3
 80227aa:	d003      	beq.n	80227b4 <_ZN6Logger7LoggingEh+0x18c>
 80227ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80227ae:	f043 0301 	orr.w	r3, r3, #1
 80227b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    pre_corner_cnt = corner_cnt;
 80227b4:	4a61      	ldr	r2, [pc, #388]	; (802293c <_ZN6Logger7LoggingEh+0x314>)
 80227b6:	7cfb      	ldrb	r3, [r7, #19]
 80227b8:	7013      	strb	r3, [r2, #0]
    pre_cross_cnt  = cross_cnt;
 80227ba:	4a62      	ldr	r2, [pc, #392]	; (8022944 <_ZN6Logger7LoggingEh+0x31c>)
 80227bc:	7cbb      	ldrb	r3, [r7, #18]
 80227be:	7013      	strb	r3, [r2, #0]
    various_log_[log_index] = various_buff;
 80227c0:	4b5b      	ldr	r3, [pc, #364]	; (8022930 <_ZN6Logger7LoggingEh+0x308>)
 80227c2:	881b      	ldrh	r3, [r3, #0]
 80227c4:	461a      	mov	r2, r3
 80227c6:	687b      	ldr	r3, [r7, #4]
 80227c8:	3228      	adds	r2, #40	; 0x28
 80227ca:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80227cc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    /* Copy periodic log */
    if(log_index == LAST_LOG_INDEX)
 80227d0:	4b57      	ldr	r3, [pc, #348]	; (8022930 <_ZN6Logger7LoggingEh+0x308>)
 80227d2:	881b      	ldrh	r3, [r3, #0]
 80227d4:	2b09      	cmp	r3, #9
 80227d6:	d120      	bne.n	802281a <_ZN6Logger7LoggingEh+0x1f2>
    {
        log_index = 0;
 80227d8:	4b55      	ldr	r3, [pc, #340]	; (8022930 <_ZN6Logger7LoggingEh+0x308>)
 80227da:	2200      	movs	r2, #0
 80227dc:	801a      	strh	r2, [r3, #0]
        memcpy(const_distance_copy_, const_distance_log_, (4 * NUM_OF_LOG));
 80227de:	687b      	ldr	r3, [r7, #4]
 80227e0:	3364      	adds	r3, #100	; 0x64
 80227e2:	6879      	ldr	r1, [r7, #4]
 80227e4:	2228      	movs	r2, #40	; 0x28
 80227e6:	4618      	mov	r0, r3
 80227e8:	f007 fe40 	bl	802a46c <memcpy>
        memcpy(radian_copy_, radian_log_, (4 * NUM_OF_LOG));
 80227ec:	687b      	ldr	r3, [r7, #4]
 80227ee:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 80227f2:	687b      	ldr	r3, [r7, #4]
 80227f4:	3328      	adds	r3, #40	; 0x28
 80227f6:	2228      	movs	r2, #40	; 0x28
 80227f8:	4619      	mov	r1, r3
 80227fa:	f007 fe37 	bl	802a46c <memcpy>
        memcpy(various_copy_, various_log_, (2 * NUM_OF_LOG));
 80227fe:	687b      	ldr	r3, [r7, #4]
 8022800:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 8022804:	687b      	ldr	r3, [r7, #4]
 8022806:	3350      	adds	r3, #80	; 0x50
 8022808:	2214      	movs	r2, #20
 802280a:	4619      	mov	r1, r3
 802280c:	f007 fe2e 	bl	802a46c <memcpy>
        periodic_write_enable_ = 1;
 8022810:	687b      	ldr	r3, [r7, #4]
 8022812:	2201      	movs	r2, #1
 8022814:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8022818:	e005      	b.n	8022826 <_ZN6Logger7LoggingEh+0x1fe>
    }
    else log_index++;
 802281a:	4b45      	ldr	r3, [pc, #276]	; (8022930 <_ZN6Logger7LoggingEh+0x308>)
 802281c:	881b      	ldrh	r3, [r3, #0]
 802281e:	3301      	adds	r3, #1
 8022820:	b29a      	uxth	r2, r3
 8022822:	4b43      	ldr	r3, [pc, #268]	; (8022930 <_ZN6Logger7LoggingEh+0x308>)
 8022824:	801a      	strh	r2, [r3, #0]

    /* Distance correction */
    uint16_t correction_address = now_address;
 8022826:	4b48      	ldr	r3, [pc, #288]	; (8022948 <_ZN6Logger7LoggingEh+0x320>)
 8022828:	881b      	ldrh	r3, [r3, #0]
 802282a:	823b      	strh	r3, [r7, #16]
    float excess = excess_stack_;
 802282c:	687b      	ldr	r3, [r7, #4]
 802282e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8022832:	60fb      	str	r3, [r7, #12]
    excess += distance - LOGGING_CONST_DISTANCE;
 8022834:	68f8      	ldr	r0, [r7, #12]
 8022836:	f7fd fd67 	bl	8020308 <__aeabi_f2d>
 802283a:	4604      	mov	r4, r0
 802283c:	460d      	mov	r5, r1
 802283e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022840:	f7fd fd62 	bl	8020308 <__aeabi_f2d>
 8022844:	f04f 0200 	mov.w	r2, #0
 8022848:	4b40      	ldr	r3, [pc, #256]	; (802294c <_ZN6Logger7LoggingEh+0x324>)
 802284a:	f7fd fbfd 	bl	8020048 <__aeabi_dsub>
 802284e:	4602      	mov	r2, r0
 8022850:	460b      	mov	r3, r1
 8022852:	4620      	mov	r0, r4
 8022854:	4629      	mov	r1, r5
 8022856:	f7fd fbf9 	bl	802004c <__adddf3>
 802285a:	4603      	mov	r3, r0
 802285c:	460c      	mov	r4, r1
 802285e:	4618      	mov	r0, r3
 8022860:	4621      	mov	r1, r4
 8022862:	f7fe f843 	bl	80208ec <__aeabi_d2f>
 8022866:	4603      	mov	r3, r0
 8022868:	60fb      	str	r3, [r7, #12]
    if(excess > LOGGING_CONST_DISTANCE)
 802286a:	edd7 7a03 	vldr	s15, [r7, #12]
 802286e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8022872:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802287a:	dd6b      	ble.n	8022954 <_ZN6Logger7LoggingEh+0x32c>
    {
        const_distance_log_[log_index] = excess;
 802287c:	4b2c      	ldr	r3, [pc, #176]	; (8022930 <_ZN6Logger7LoggingEh+0x308>)
 802287e:	881b      	ldrh	r3, [r3, #0]
 8022880:	687a      	ldr	r2, [r7, #4]
 8022882:	009b      	lsls	r3, r3, #2
 8022884:	4413      	add	r3, r2
 8022886:	68fa      	ldr	r2, [r7, #12]
 8022888:	601a      	str	r2, [r3, #0]
        radian_log_[log_index] = radian;
 802288a:	4b29      	ldr	r3, [pc, #164]	; (8022930 <_ZN6Logger7LoggingEh+0x308>)
 802288c:	881b      	ldrh	r3, [r3, #0]
 802288e:	687a      	ldr	r2, [r7, #4]
 8022890:	330a      	adds	r3, #10
 8022892:	009b      	lsls	r3, r3, #2
 8022894:	4413      	add	r3, r2
 8022896:	697a      	ldr	r2, [r7, #20]
 8022898:	601a      	str	r2, [r3, #0]
        various_log_[log_index] = VARIOUS_LOG_DATA_WHEN_COPY;
 802289a:	4b25      	ldr	r3, [pc, #148]	; (8022930 <_ZN6Logger7LoggingEh+0x308>)
 802289c:	881b      	ldrh	r3, [r3, #0]
 802289e:	461a      	mov	r2, r3
 80228a0:	687b      	ldr	r3, [r7, #4]
 80228a2:	3228      	adds	r2, #40	; 0x28
 80228a4:	f24f 01f0 	movw	r1, #61680	; 0xf0f0
 80228a8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        excess_stack_ = excess - LOGGING_CONST_DISTANCE;
 80228ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80228b0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80228b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80228b8:	687b      	ldr	r3, [r7, #4]
 80228ba:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
        now_address++;
 80228be:	4b22      	ldr	r3, [pc, #136]	; (8022948 <_ZN6Logger7LoggingEh+0x320>)
 80228c0:	881b      	ldrh	r3, [r3, #0]
 80228c2:	3301      	adds	r3, #1
 80228c4:	b29a      	uxth	r2, r3
 80228c6:	4b20      	ldr	r3, [pc, #128]	; (8022948 <_ZN6Logger7LoggingEh+0x320>)
 80228c8:	801a      	strh	r2, [r3, #0]

        /* Copy periodic log */
        if(log_index == LAST_LOG_INDEX)
 80228ca:	4b19      	ldr	r3, [pc, #100]	; (8022930 <_ZN6Logger7LoggingEh+0x308>)
 80228cc:	881b      	ldrh	r3, [r3, #0]
 80228ce:	2b09      	cmp	r3, #9
 80228d0:	d120      	bne.n	8022914 <_ZN6Logger7LoggingEh+0x2ec>
        {
            log_index = 0;
 80228d2:	4b17      	ldr	r3, [pc, #92]	; (8022930 <_ZN6Logger7LoggingEh+0x308>)
 80228d4:	2200      	movs	r2, #0
 80228d6:	801a      	strh	r2, [r3, #0]
            memcpy(const_distance_copy_, const_distance_log_, (4 * NUM_OF_LOG));
 80228d8:	687b      	ldr	r3, [r7, #4]
 80228da:	3364      	adds	r3, #100	; 0x64
 80228dc:	6879      	ldr	r1, [r7, #4]
 80228de:	2228      	movs	r2, #40	; 0x28
 80228e0:	4618      	mov	r0, r3
 80228e2:	f007 fdc3 	bl	802a46c <memcpy>
            memcpy(radian_copy_, radian_log_, (4 * NUM_OF_LOG));
 80228e6:	687b      	ldr	r3, [r7, #4]
 80228e8:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 80228ec:	687b      	ldr	r3, [r7, #4]
 80228ee:	3328      	adds	r3, #40	; 0x28
 80228f0:	2228      	movs	r2, #40	; 0x28
 80228f2:	4619      	mov	r1, r3
 80228f4:	f007 fdba 	bl	802a46c <memcpy>
            memcpy(various_copy_, various_log_, (2 * NUM_OF_LOG));
 80228f8:	687b      	ldr	r3, [r7, #4]
 80228fa:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 80228fe:	687b      	ldr	r3, [r7, #4]
 8022900:	3350      	adds	r3, #80	; 0x50
 8022902:	2214      	movs	r2, #20
 8022904:	4619      	mov	r1, r3
 8022906:	f007 fdb1 	bl	802a46c <memcpy>
            periodic_write_enable_ = 1;
 802290a:	687b      	ldr	r3, [r7, #4]
 802290c:	2201      	movs	r2, #1
 802290e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8022912:	e023      	b.n	802295c <_ZN6Logger7LoggingEh+0x334>
        }
        else log_index++;
 8022914:	4b06      	ldr	r3, [pc, #24]	; (8022930 <_ZN6Logger7LoggingEh+0x308>)
 8022916:	881b      	ldrh	r3, [r3, #0]
 8022918:	3301      	adds	r3, #1
 802291a:	b29a      	uxth	r2, r3
 802291c:	4b04      	ldr	r3, [pc, #16]	; (8022930 <_ZN6Logger7LoggingEh+0x308>)
 802291e:	801a      	strh	r2, [r3, #0]
 8022920:	e01c      	b.n	802295c <_ZN6Logger7LoggingEh+0x334>
 8022922:	bf00      	nop
 8022924:	f3af 8000 	nop.w
 8022928:	54442d18 	.word	0x54442d18
 802292c:	400921fb 	.word	0x400921fb
 8022930:	20000082 	.word	0x20000082
 8022934:	40668000 	.word	0x40668000
 8022938:	20000088 	.word	0x20000088
 802293c:	20000084 	.word	0x20000084
 8022940:	20000090 	.word	0x20000090
 8022944:	2000008c 	.word	0x2000008c
 8022948:	20000080 	.word	0x20000080
 802294c:	40340000 	.word	0x40340000
 8022950:	43ca0000 	.word	0x43ca0000
    }
    else excess_stack_ = excess;
 8022954:	687b      	ldr	r3, [r7, #4]
 8022956:	68fa      	ldr	r2, [r7, #12]
 8022958:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    /* Accel position log */
    static uint16_t accel_straight_cnt = 0;
    static uint8_t accel_step = 0;
    if(fabs(encoder.AngularVelocity()) < STRAIGHT_BORDER_OMEGA)
 802295c:	687b      	ldr	r3, [r7, #4]
 802295e:	33e8      	adds	r3, #232	; 0xe8
 8022960:	4618      	mov	r0, r3
 8022962:	f7fe fad1 	bl	8020f08 <_ZN7Encoder15AngularVelocityEv>
 8022966:	eef0 7a40 	vmov.f32	s15, s0
 802296a:	eeb0 0a67 	vmov.f32	s0, s15
 802296e:	f7ff fdc3 	bl	80224f8 <_ZSt4fabsf>
 8022972:	eeb0 7a40 	vmov.f32	s14, s0
 8022976:	ed5f 7a0a 	vldr	s15, [pc, #-40]	; 8022950 <_ZN6Logger7LoggingEh+0x328>
 802297a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802297e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022982:	bf4c      	ite	mi
 8022984:	2301      	movmi	r3, #1
 8022986:	2300      	movpl	r3, #0
 8022988:	b2db      	uxtb	r3, r3
 802298a:	2b00      	cmp	r3, #0
 802298c:	d021      	beq.n	80229d2 <_ZN6Logger7LoggingEh+0x3aa>
    {
        accel_straight_cnt++;
 802298e:	4b2e      	ldr	r3, [pc, #184]	; (8022a48 <_ZN6Logger7LoggingEh+0x420>)
 8022990:	881b      	ldrh	r3, [r3, #0]
 8022992:	3301      	adds	r3, #1
 8022994:	b29a      	uxth	r2, r3
 8022996:	4b2c      	ldr	r3, [pc, #176]	; (8022a48 <_ZN6Logger7LoggingEh+0x420>)
 8022998:	801a      	strh	r2, [r3, #0]
        if(accel_straight_cnt >= CNT_OF_ACCEL_STEP_UP && accel_step < NUM_OF_ACCEL_STEP)
 802299a:	4b2b      	ldr	r3, [pc, #172]	; (8022a48 <_ZN6Logger7LoggingEh+0x420>)
 802299c:	881b      	ldrh	r3, [r3, #0]
 802299e:	2b07      	cmp	r3, #7
 80229a0:	d947      	bls.n	8022a32 <_ZN6Logger7LoggingEh+0x40a>
 80229a2:	4b2a      	ldr	r3, [pc, #168]	; (8022a4c <_ZN6Logger7LoggingEh+0x424>)
 80229a4:	781b      	ldrb	r3, [r3, #0]
 80229a6:	2b04      	cmp	r3, #4
 80229a8:	d843      	bhi.n	8022a32 <_ZN6Logger7LoggingEh+0x40a>
        {
            accel_step++;
 80229aa:	4b28      	ldr	r3, [pc, #160]	; (8022a4c <_ZN6Logger7LoggingEh+0x424>)
 80229ac:	781b      	ldrb	r3, [r3, #0]
 80229ae:	3301      	adds	r3, #1
 80229b0:	b2da      	uxtb	r2, r3
 80229b2:	4b26      	ldr	r3, [pc, #152]	; (8022a4c <_ZN6Logger7LoggingEh+0x424>)
 80229b4:	701a      	strb	r2, [r3, #0]
            accel_address_[accel_step-1] = correction_address - CNT_OF_ACCEL_STEP_UP;
 80229b6:	4b25      	ldr	r3, [pc, #148]	; (8022a4c <_ZN6Logger7LoggingEh+0x424>)
 80229b8:	781b      	ldrb	r3, [r3, #0]
 80229ba:	1e5a      	subs	r2, r3, #1
 80229bc:	8a3b      	ldrh	r3, [r7, #16]
 80229be:	3b08      	subs	r3, #8
 80229c0:	b299      	uxth	r1, r3
 80229c2:	687b      	ldr	r3, [r7, #4]
 80229c4:	3264      	adds	r2, #100	; 0x64
 80229c6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            accel_straight_cnt = 0;
 80229ca:	4b1f      	ldr	r3, [pc, #124]	; (8022a48 <_ZN6Logger7LoggingEh+0x420>)
 80229cc:	2200      	movs	r2, #0
 80229ce:	801a      	strh	r2, [r3, #0]
 80229d0:	e02f      	b.n	8022a32 <_ZN6Logger7LoggingEh+0x40a>
        }
    }
    else if(accel_step != 0)
 80229d2:	4b1e      	ldr	r3, [pc, #120]	; (8022a4c <_ZN6Logger7LoggingEh+0x424>)
 80229d4:	781b      	ldrb	r3, [r3, #0]
 80229d6:	2b00      	cmp	r3, #0
 80229d8:	d028      	beq.n	8022a2c <_ZN6Logger7LoggingEh+0x404>
    {
        for(int i = 1; i <= accel_step; i++)
 80229da:	2301      	movs	r3, #1
 80229dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80229de:	4b1b      	ldr	r3, [pc, #108]	; (8022a4c <_ZN6Logger7LoggingEh+0x424>)
 80229e0:	781b      	ldrb	r3, [r3, #0]
 80229e2:	461a      	mov	r2, r3
 80229e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80229e6:	4293      	cmp	r3, r2
 80229e8:	dc14      	bgt.n	8022a14 <_ZN6Logger7LoggingEh+0x3ec>
        {
            decel_address_[i-1] = (correction_address-1) - (DIFF_NEXT_ACCEL_STEP * i);
 80229ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80229ec:	b29b      	uxth	r3, r3
 80229ee:	009b      	lsls	r3, r3, #2
 80229f0:	b29b      	uxth	r3, r3
 80229f2:	8a3a      	ldrh	r2, [r7, #16]
 80229f4:	1ad3      	subs	r3, r2, r3
 80229f6:	b29a      	uxth	r2, r3
 80229f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80229fa:	3b01      	subs	r3, #1
 80229fc:	3a01      	subs	r2, #1
 80229fe:	b291      	uxth	r1, r2
 8022a00:	687a      	ldr	r2, [r7, #4]
 8022a02:	3368      	adds	r3, #104	; 0x68
 8022a04:	005b      	lsls	r3, r3, #1
 8022a06:	4413      	add	r3, r2
 8022a08:	460a      	mov	r2, r1
 8022a0a:	805a      	strh	r2, [r3, #2]
        for(int i = 1; i <= accel_step; i++)
 8022a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022a0e:	3301      	adds	r3, #1
 8022a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8022a12:	e7e4      	b.n	80229de <_ZN6Logger7LoggingEh+0x3b6>
        }
        accel_position_write_enable_ = accel_step;
 8022a14:	4b0d      	ldr	r3, [pc, #52]	; (8022a4c <_ZN6Logger7LoggingEh+0x424>)
 8022a16:	781a      	ldrb	r2, [r3, #0]
 8022a18:	687b      	ldr	r3, [r7, #4]
 8022a1a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        accel_step = 0;
 8022a1e:	4b0b      	ldr	r3, [pc, #44]	; (8022a4c <_ZN6Logger7LoggingEh+0x424>)
 8022a20:	2200      	movs	r2, #0
 8022a22:	701a      	strb	r2, [r3, #0]
        accel_straight_cnt = 0;
 8022a24:	4b08      	ldr	r3, [pc, #32]	; (8022a48 <_ZN6Logger7LoggingEh+0x420>)
 8022a26:	2200      	movs	r2, #0
 8022a28:	801a      	strh	r2, [r3, #0]
 8022a2a:	e002      	b.n	8022a32 <_ZN6Logger7LoggingEh+0x40a>
    }
    else accel_straight_cnt = 0;
 8022a2c:	4b06      	ldr	r3, [pc, #24]	; (8022a48 <_ZN6Logger7LoggingEh+0x420>)
 8022a2e:	2200      	movs	r2, #0
 8022a30:	801a      	strh	r2, [r3, #0]

    now_address++;
 8022a32:	4b07      	ldr	r3, [pc, #28]	; (8022a50 <_ZN6Logger7LoggingEh+0x428>)
 8022a34:	881b      	ldrh	r3, [r3, #0]
 8022a36:	3301      	adds	r3, #1
 8022a38:	b29a      	uxth	r2, r3
 8022a3a:	4b05      	ldr	r3, [pc, #20]	; (8022a50 <_ZN6Logger7LoggingEh+0x428>)
 8022a3c:	801a      	strh	r2, [r3, #0]
 8022a3e:	e000      	b.n	8022a42 <_ZN6Logger7LoggingEh+0x41a>
    if(distance < LOGGING_CONST_DISTANCE) return;
 8022a40:	bf00      	nop
}
 8022a42:	3730      	adds	r7, #48	; 0x30
 8022a44:	46bd      	mov	sp, r7
 8022a46:	bdb0      	pop	{r4, r5, r7, pc}
 8022a48:	20000094 	.word	0x20000094
 8022a4c:	20000096 	.word	0x20000096
 8022a50:	20000080 	.word	0x20000080

08022a54 <_ZN6Logger16StorePeriodicLogEv>:

uint8_t Logger::StorePeriodicLog()
{
 8022a54:	b580      	push	{r7, lr}
 8022a56:	b084      	sub	sp, #16
 8022a58:	af00      	add	r7, sp, #0
 8022a5a:	6078      	str	r0, [r7, #4]
    if(periodic_write_enable_ == 0) return 0;
 8022a5c:	687b      	ldr	r3, [r7, #4]
 8022a5e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8022a62:	2b00      	cmp	r3, #0
 8022a64:	d101      	bne.n	8022a6a <_ZN6Logger16StorePeriodicLogEv+0x16>
 8022a66:	2300      	movs	r3, #0
 8022a68:	e087      	b.n	8022b7a <_ZN6Logger16StorePeriodicLogEv+0x126>
    else periodic_write_enable_ = 0;
 8022a6a:	687b      	ldr	r3, [r7, #4]
 8022a6c:	2200      	movs	r2, #0
 8022a6e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    static uint32_t address_a = HEAD_ADDRESS_BLOCK_A;
    static uint32_t address_b = HEAD_ADDRESS_BLOCK_B;
    static uint32_t address_c = HEAD_ADDRESS_BLOCK_C;
    uint8_t result = 0;
 8022a72:	2300      	movs	r3, #0
 8022a74:	73fb      	strb	r3, [r7, #15]

    if(!flash.CheckBlankWord(address_a, NUM_OF_LOG))     return 0x10;
 8022a76:	687b      	ldr	r3, [r7, #4]
 8022a78:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022a7c:	4b41      	ldr	r3, [pc, #260]	; (8022b84 <_ZN6Logger16StorePeriodicLogEv+0x130>)
 8022a7e:	681b      	ldr	r3, [r3, #0]
 8022a80:	220a      	movs	r2, #10
 8022a82:	4619      	mov	r1, r3
 8022a84:	f7fe fbd5 	bl	8021232 <_ZN5Flash14CheckBlankWordEmm>
 8022a88:	4603      	mov	r3, r0
 8022a8a:	f083 0301 	eor.w	r3, r3, #1
 8022a8e:	b2db      	uxtb	r3, r3
 8022a90:	2b00      	cmp	r3, #0
 8022a92:	d001      	beq.n	8022a98 <_ZN6Logger16StorePeriodicLogEv+0x44>
 8022a94:	2310      	movs	r3, #16
 8022a96:	e070      	b.n	8022b7a <_ZN6Logger16StorePeriodicLogEv+0x126>
    if(!flash.CheckBlankWord(address_b, NUM_OF_LOG))     return 0x20;
 8022a98:	687b      	ldr	r3, [r7, #4]
 8022a9a:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022a9e:	4b3a      	ldr	r3, [pc, #232]	; (8022b88 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 8022aa0:	681b      	ldr	r3, [r3, #0]
 8022aa2:	220a      	movs	r2, #10
 8022aa4:	4619      	mov	r1, r3
 8022aa6:	f7fe fbc4 	bl	8021232 <_ZN5Flash14CheckBlankWordEmm>
 8022aaa:	4603      	mov	r3, r0
 8022aac:	f083 0301 	eor.w	r3, r3, #1
 8022ab0:	b2db      	uxtb	r3, r3
 8022ab2:	2b00      	cmp	r3, #0
 8022ab4:	d001      	beq.n	8022aba <_ZN6Logger16StorePeriodicLogEv+0x66>
 8022ab6:	2320      	movs	r3, #32
 8022ab8:	e05f      	b.n	8022b7a <_ZN6Logger16StorePeriodicLogEv+0x126>
    if(!flash.CheckBlankHalfword(address_c, NUM_OF_LOG)) return 0x40;
 8022aba:	687b      	ldr	r3, [r7, #4]
 8022abc:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022ac0:	4b32      	ldr	r3, [pc, #200]	; (8022b8c <_ZN6Logger16StorePeriodicLogEv+0x138>)
 8022ac2:	681b      	ldr	r3, [r3, #0]
 8022ac4:	220a      	movs	r2, #10
 8022ac6:	4619      	mov	r1, r3
 8022ac8:	f7fe fb5f 	bl	802118a <_ZN5Flash18CheckBlankHalfwordEmm>
 8022acc:	4603      	mov	r3, r0
 8022ace:	f083 0301 	eor.w	r3, r3, #1
 8022ad2:	b2db      	uxtb	r3, r3
 8022ad4:	2b00      	cmp	r3, #0
 8022ad6:	d001      	beq.n	8022adc <_ZN6Logger16StorePeriodicLogEv+0x88>
 8022ad8:	2340      	movs	r3, #64	; 0x40
 8022ada:	e04e      	b.n	8022b7a <_ZN6Logger16StorePeriodicLogEv+0x126>

    if(!flash.StoreFloat(address_a, const_distance_copy_, NUM_OF_LOG)) result |= 0x01;
 8022adc:	687b      	ldr	r3, [r7, #4]
 8022ade:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022ae2:	4b28      	ldr	r3, [pc, #160]	; (8022b84 <_ZN6Logger16StorePeriodicLogEv+0x130>)
 8022ae4:	6819      	ldr	r1, [r3, #0]
 8022ae6:	687b      	ldr	r3, [r7, #4]
 8022ae8:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8022aec:	230a      	movs	r3, #10
 8022aee:	f7fe fac8 	bl	8021082 <_ZN5Flash10StoreFloatEmPfm>
 8022af2:	4603      	mov	r3, r0
 8022af4:	f083 0301 	eor.w	r3, r3, #1
 8022af8:	b2db      	uxtb	r3, r3
 8022afa:	2b00      	cmp	r3, #0
 8022afc:	d003      	beq.n	8022b06 <_ZN6Logger16StorePeriodicLogEv+0xb2>
 8022afe:	7bfb      	ldrb	r3, [r7, #15]
 8022b00:	f043 0301 	orr.w	r3, r3, #1
 8022b04:	73fb      	strb	r3, [r7, #15]
    if(!flash.StoreFloat(address_b, radian_copy_, NUM_OF_LOG))         result |= 0x02;
 8022b06:	687b      	ldr	r3, [r7, #4]
 8022b08:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022b0c:	4b1e      	ldr	r3, [pc, #120]	; (8022b88 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 8022b0e:	6819      	ldr	r1, [r3, #0]
 8022b10:	687b      	ldr	r3, [r7, #4]
 8022b12:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 8022b16:	230a      	movs	r3, #10
 8022b18:	f7fe fab3 	bl	8021082 <_ZN5Flash10StoreFloatEmPfm>
 8022b1c:	4603      	mov	r3, r0
 8022b1e:	f083 0301 	eor.w	r3, r3, #1
 8022b22:	b2db      	uxtb	r3, r3
 8022b24:	2b00      	cmp	r3, #0
 8022b26:	d003      	beq.n	8022b30 <_ZN6Logger16StorePeriodicLogEv+0xdc>
 8022b28:	7bfb      	ldrb	r3, [r7, #15]
 8022b2a:	f043 0302 	orr.w	r3, r3, #2
 8022b2e:	73fb      	strb	r3, [r7, #15]
    if(!flash.StoreUint16(address_c, various_copy_, NUM_OF_LOG))       result |= 0x04;
 8022b30:	687b      	ldr	r3, [r7, #4]
 8022b32:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022b36:	4b15      	ldr	r3, [pc, #84]	; (8022b8c <_ZN6Logger16StorePeriodicLogEv+0x138>)
 8022b38:	6819      	ldr	r1, [r3, #0]
 8022b3a:	687b      	ldr	r3, [r7, #4]
 8022b3c:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8022b40:	230a      	movs	r3, #10
 8022b42:	f7fe fa69 	bl	8021018 <_ZN5Flash11StoreUint16EmPtm>
 8022b46:	4603      	mov	r3, r0
 8022b48:	f083 0301 	eor.w	r3, r3, #1
 8022b4c:	b2db      	uxtb	r3, r3
 8022b4e:	2b00      	cmp	r3, #0
 8022b50:	d003      	beq.n	8022b5a <_ZN6Logger16StorePeriodicLogEv+0x106>
 8022b52:	7bfb      	ldrb	r3, [r7, #15]
 8022b54:	f043 0304 	orr.w	r3, r3, #4
 8022b58:	73fb      	strb	r3, [r7, #15]

    address_a += NUM_OF_LOG * 4;
 8022b5a:	4b0a      	ldr	r3, [pc, #40]	; (8022b84 <_ZN6Logger16StorePeriodicLogEv+0x130>)
 8022b5c:	681b      	ldr	r3, [r3, #0]
 8022b5e:	3328      	adds	r3, #40	; 0x28
 8022b60:	4a08      	ldr	r2, [pc, #32]	; (8022b84 <_ZN6Logger16StorePeriodicLogEv+0x130>)
 8022b62:	6013      	str	r3, [r2, #0]
    address_b += NUM_OF_LOG * 4;
 8022b64:	4b08      	ldr	r3, [pc, #32]	; (8022b88 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 8022b66:	681b      	ldr	r3, [r3, #0]
 8022b68:	3328      	adds	r3, #40	; 0x28
 8022b6a:	4a07      	ldr	r2, [pc, #28]	; (8022b88 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 8022b6c:	6013      	str	r3, [r2, #0]
    address_c += NUM_OF_LOG * 2;
 8022b6e:	4b07      	ldr	r3, [pc, #28]	; (8022b8c <_ZN6Logger16StorePeriodicLogEv+0x138>)
 8022b70:	681b      	ldr	r3, [r3, #0]
 8022b72:	3314      	adds	r3, #20
 8022b74:	4a05      	ldr	r2, [pc, #20]	; (8022b8c <_ZN6Logger16StorePeriodicLogEv+0x138>)
 8022b76:	6013      	str	r3, [r2, #0]

    return result;
 8022b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8022b7a:	4618      	mov	r0, r3
 8022b7c:	3710      	adds	r7, #16
 8022b7e:	46bd      	mov	sp, r7
 8022b80:	bd80      	pop	{r7, pc}
 8022b82:	bf00      	nop
 8022b84:	20000000 	.word	0x20000000
 8022b88:	20000004 	.word	0x20000004
 8022b8c:	20000008 	.word	0x20000008

08022b90 <_ZN6Logger21StoreAccelPositionLogEv>:

uint8_t Logger::StoreAccelPositionLog()
{
 8022b90:	b580      	push	{r7, lr}
 8022b92:	b086      	sub	sp, #24
 8022b94:	af00      	add	r7, sp, #0
 8022b96:	6078      	str	r0, [r7, #4]
    uint8_t accel_step = accel_position_write_enable_;
 8022b98:	687b      	ldr	r3, [r7, #4]
 8022b9a:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8022b9e:	75bb      	strb	r3, [r7, #22]
    if(accel_step == 0) return 0;
 8022ba0:	7dbb      	ldrb	r3, [r7, #22]
 8022ba2:	2b00      	cmp	r3, #0
 8022ba4:	d101      	bne.n	8022baa <_ZN6Logger21StoreAccelPositionLogEv+0x1a>
 8022ba6:	2300      	movs	r3, #0
 8022ba8:	e079      	b.n	8022c9e <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
    else accel_position_write_enable_ = 0;
 8022baa:	687b      	ldr	r3, [r7, #4]
 8022bac:	2200      	movs	r2, #0
 8022bae:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    uint32_t address;
    uint8_t accel = 0; // step 0x01, 0x02, 0x03, 0x04, 0x05.
 8022bb2:	2300      	movs	r3, #0
 8022bb4:	73fb      	strb	r3, [r7, #15]
    uint8_t decel = 0; // step 0x10, 0x20, 0x30, 0x40, 0x50.
 8022bb6:	2300      	movs	r3, #0
 8022bb8:	73bb      	strb	r3, [r7, #14]
    uint8_t i;

    for(i = 1; i <= accel_step; i++)
 8022bba:	2301      	movs	r3, #1
 8022bbc:	75fb      	strb	r3, [r7, #23]
 8022bbe:	7dfa      	ldrb	r2, [r7, #23]
 8022bc0:	7dbb      	ldrb	r3, [r7, #22]
 8022bc2:	429a      	cmp	r2, r3
 8022bc4:	d830      	bhi.n	8022c28 <_ZN6Logger21StoreAccelPositionLogEv+0x98>
    {
        accel = i;
 8022bc6:	7dfb      	ldrb	r3, [r7, #23]
 8022bc8:	73fb      	strb	r3, [r7, #15]
        address = HEAD_ADDRESS_BLOCK_D + accel_address_[i-1];
 8022bca:	7dfb      	ldrb	r3, [r7, #23]
 8022bcc:	1e5a      	subs	r2, r3, #1
 8022bce:	687b      	ldr	r3, [r7, #4]
 8022bd0:	3264      	adds	r2, #100	; 0x64
 8022bd2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8022bd6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022bda:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8022bde:	613b      	str	r3, [r7, #16]
        if(!flash.CheckBlankByte(address, 1))      return 0x10;
 8022be0:	687b      	ldr	r3, [r7, #4]
 8022be2:	33f4      	adds	r3, #244	; 0xf4
 8022be4:	2201      	movs	r2, #1
 8022be6:	6939      	ldr	r1, [r7, #16]
 8022be8:	4618      	mov	r0, r3
 8022bea:	f7fe fa81 	bl	80210f0 <_ZN5Flash14CheckBlankByteEmm>
 8022bee:	4603      	mov	r3, r0
 8022bf0:	f083 0301 	eor.w	r3, r3, #1
 8022bf4:	b2db      	uxtb	r3, r3
 8022bf6:	2b00      	cmp	r3, #0
 8022bf8:	d001      	beq.n	8022bfe <_ZN6Logger21StoreAccelPositionLogEv+0x6e>
 8022bfa:	2310      	movs	r3, #16
 8022bfc:	e04f      	b.n	8022c9e <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
        if(!flash.StoreUint8(address, &accel, 1)) return 0x20;
 8022bfe:	687b      	ldr	r3, [r7, #4]
 8022c00:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022c04:	f107 020f 	add.w	r2, r7, #15
 8022c08:	2301      	movs	r3, #1
 8022c0a:	6939      	ldr	r1, [r7, #16]
 8022c0c:	f7fe f9d0 	bl	8020fb0 <_ZN5Flash10StoreUint8EmPhm>
 8022c10:	4603      	mov	r3, r0
 8022c12:	f083 0301 	eor.w	r3, r3, #1
 8022c16:	b2db      	uxtb	r3, r3
 8022c18:	2b00      	cmp	r3, #0
 8022c1a:	d001      	beq.n	8022c20 <_ZN6Logger21StoreAccelPositionLogEv+0x90>
 8022c1c:	2320      	movs	r3, #32
 8022c1e:	e03e      	b.n	8022c9e <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
    for(i = 1; i <= accel_step; i++)
 8022c20:	7dfb      	ldrb	r3, [r7, #23]
 8022c22:	3301      	adds	r3, #1
 8022c24:	75fb      	strb	r3, [r7, #23]
 8022c26:	e7ca      	b.n	8022bbe <_ZN6Logger21StoreAccelPositionLogEv+0x2e>
    }
    for(i = 1; i <= accel_step; i++)
 8022c28:	2301      	movs	r3, #1
 8022c2a:	75fb      	strb	r3, [r7, #23]
 8022c2c:	7dfa      	ldrb	r2, [r7, #23]
 8022c2e:	7dbb      	ldrb	r3, [r7, #22]
 8022c30:	429a      	cmp	r2, r3
 8022c32:	d833      	bhi.n	8022c9c <_ZN6Logger21StoreAccelPositionLogEv+0x10c>
    {
        decel = i << 4;
 8022c34:	7dfb      	ldrb	r3, [r7, #23]
 8022c36:	011b      	lsls	r3, r3, #4
 8022c38:	b2db      	uxtb	r3, r3
 8022c3a:	73bb      	strb	r3, [r7, #14]
        address = HEAD_ADDRESS_BLOCK_D + decel_address_[i-1];
 8022c3c:	7dfb      	ldrb	r3, [r7, #23]
 8022c3e:	3b01      	subs	r3, #1
 8022c40:	687a      	ldr	r2, [r7, #4]
 8022c42:	3368      	adds	r3, #104	; 0x68
 8022c44:	005b      	lsls	r3, r3, #1
 8022c46:	4413      	add	r3, r2
 8022c48:	885b      	ldrh	r3, [r3, #2]
 8022c4a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022c4e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8022c52:	613b      	str	r3, [r7, #16]
        if(!flash.CheckBlankByte(address, 1))      return 0x30;
 8022c54:	687b      	ldr	r3, [r7, #4]
 8022c56:	33f4      	adds	r3, #244	; 0xf4
 8022c58:	2201      	movs	r2, #1
 8022c5a:	6939      	ldr	r1, [r7, #16]
 8022c5c:	4618      	mov	r0, r3
 8022c5e:	f7fe fa47 	bl	80210f0 <_ZN5Flash14CheckBlankByteEmm>
 8022c62:	4603      	mov	r3, r0
 8022c64:	f083 0301 	eor.w	r3, r3, #1
 8022c68:	b2db      	uxtb	r3, r3
 8022c6a:	2b00      	cmp	r3, #0
 8022c6c:	d001      	beq.n	8022c72 <_ZN6Logger21StoreAccelPositionLogEv+0xe2>
 8022c6e:	2330      	movs	r3, #48	; 0x30
 8022c70:	e015      	b.n	8022c9e <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
        if(!flash.StoreUint8(address, &decel, 1)) return 0x40;
 8022c72:	687b      	ldr	r3, [r7, #4]
 8022c74:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022c78:	f107 020e 	add.w	r2, r7, #14
 8022c7c:	2301      	movs	r3, #1
 8022c7e:	6939      	ldr	r1, [r7, #16]
 8022c80:	f7fe f996 	bl	8020fb0 <_ZN5Flash10StoreUint8EmPhm>
 8022c84:	4603      	mov	r3, r0
 8022c86:	f083 0301 	eor.w	r3, r3, #1
 8022c8a:	b2db      	uxtb	r3, r3
 8022c8c:	2b00      	cmp	r3, #0
 8022c8e:	d001      	beq.n	8022c94 <_ZN6Logger21StoreAccelPositionLogEv+0x104>
 8022c90:	2340      	movs	r3, #64	; 0x40
 8022c92:	e004      	b.n	8022c9e <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
    for(i = 1; i <= accel_step; i++)
 8022c94:	7dfb      	ldrb	r3, [r7, #23]
 8022c96:	3301      	adds	r3, #1
 8022c98:	75fb      	strb	r3, [r7, #23]
 8022c9a:	e7c7      	b.n	8022c2c <_ZN6Logger21StoreAccelPositionLogEv+0x9c>
    }
    
    return 0;
 8022c9c:	2300      	movs	r3, #0
}
 8022c9e:	4618      	mov	r0, r3
 8022ca0:	3718      	adds	r7, #24
 8022ca2:	46bd      	mov	sp, r7
 8022ca4:	bd80      	pop	{r7, pc}
	...

08022ca8 <_ZN6Logger7LoadingEv>:

void Logger::Loading()
{
 8022ca8:	b580      	push	{r7, lr}
 8022caa:	b08c      	sub	sp, #48	; 0x30
 8022cac:	af00      	add	r7, sp, #0
 8022cae:	6078      	str	r0, [r7, #4]
    float distance = encoder.GetDistanceStack();
 8022cb0:	687b      	ldr	r3, [r7, #4]
 8022cb2:	33e8      	adds	r3, #232	; 0xe8
 8022cb4:	4618      	mov	r0, r3
 8022cb6:	f7fe f918 	bl	8020eea <_ZN7Encoder16GetDistanceStackEv>
 8022cba:	ed87 0a08 	vstr	s0, [r7, #32]

    if(distance < LOGGING_CONST_DISTANCE) return;
 8022cbe:	edd7 7a08 	vldr	s15, [r7, #32]
 8022cc2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8022cc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022cce:	f100 8299 	bmi.w	8023204 <_ZN6Logger7LoadingEv+0x55c>
    encoder.ResetDistanceStack();
 8022cd2:	687b      	ldr	r3, [r7, #4]
 8022cd4:	33e8      	adds	r3, #232	; 0xe8
 8022cd6:	4618      	mov	r0, r3
 8022cd8:	f7fe f8ea 	bl	8020eb0 <_ZN7Encoder18ResetDistanceStackEv>

    static uint16_t now_address = 0;

    /* Load curvature radius */
    float log_distance = *(reinterpret_cast<float*>(now_address + HEAD_ADDRESS_BLOCK_A));
 8022cdc:	4bad      	ldr	r3, [pc, #692]	; (8022f94 <_ZN6Logger7LoadingEv+0x2ec>)
 8022cde:	881b      	ldrh	r3, [r3, #0]
 8022ce0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022ce4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8022ce8:	681b      	ldr	r3, [r3, #0]
 8022cea:	61fb      	str	r3, [r7, #28]
    float log_radian = *(reinterpret_cast<float*>(now_address + HEAD_ADDRESS_BLOCK_B));
 8022cec:	4ba9      	ldr	r3, [pc, #676]	; (8022f94 <_ZN6Logger7LoadingEv+0x2ec>)
 8022cee:	881b      	ldrh	r3, [r3, #0]
 8022cf0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022cf4:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8022cf8:	681b      	ldr	r3, [r3, #0]
 8022cfa:	61bb      	str	r3, [r7, #24]
    float radius = log_distance / log_radian;
 8022cfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8022d00:	ed97 7a06 	vldr	s14, [r7, #24]
 8022d04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022d08:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Load correction position */
    uint16_t log_various = *(reinterpret_cast<uint16_t*>(now_address + HEAD_ADDRESS_BLOCK_C));
 8022d0c:	4ba1      	ldr	r3, [pc, #644]	; (8022f94 <_ZN6Logger7LoadingEv+0x2ec>)
 8022d0e:	881b      	ldrh	r3, [r3, #0]
 8022d10:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022d14:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8022d18:	881b      	ldrh	r3, [r3, #0]
 8022d1a:	827b      	strh	r3, [r7, #18]
    bool log_corner = false, log_corner_pass = false;
 8022d1c:	2300      	movs	r3, #0
 8022d1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8022d22:	2300      	movs	r3, #0
 8022d24:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    bool log_cross = false, log_cross_pass = false;
 8022d28:	2300      	movs	r3, #0
 8022d2a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8022d2e:	2300      	movs	r3, #0
 8022d30:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    if((log_various & 0x0002) == 0x0002) log_corner = true;
 8022d34:	8a7b      	ldrh	r3, [r7, #18]
 8022d36:	f003 0302 	and.w	r3, r3, #2
 8022d3a:	2b00      	cmp	r3, #0
 8022d3c:	d002      	beq.n	8022d44 <_ZN6Logger7LoadingEv+0x9c>
 8022d3e:	2301      	movs	r3, #1
 8022d40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if((log_various & 0x0001) == 0x0001) log_cross = true;
 8022d44:	8a7b      	ldrh	r3, [r7, #18]
 8022d46:	f003 0301 	and.w	r3, r3, #1
 8022d4a:	2b00      	cmp	r3, #0
 8022d4c:	d002      	beq.n	8022d54 <_ZN6Logger7LoadingEv+0xac>
 8022d4e:	2301      	movs	r3, #1
 8022d50:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    /* Get correction position */
    bool run_corner = false, run_corner_pass = false;
 8022d54:	2300      	movs	r3, #0
 8022d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022d5a:	2300      	movs	r3, #0
 8022d5c:	747b      	strb	r3, [r7, #17]
    bool run_cross = false, run_cross_pass = false;
 8022d5e:	2300      	movs	r3, #0
 8022d60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8022d64:	2300      	movs	r3, #0
 8022d66:	743b      	strb	r3, [r7, #16]
    uint8_t corner = side_sensor.GetCornerMarkerCount();
 8022d68:	687b      	ldr	r3, [r7, #4]
 8022d6a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022d6e:	4618      	mov	r0, r3
 8022d70:	f002 fc7a 	bl	8025668 <_ZN10SideSensor20GetCornerMarkerCountEv>
 8022d74:	4603      	mov	r3, r0
 8022d76:	73fb      	strb	r3, [r7, #15]
    uint8_t cross = side_sensor.GetCrossLineCount();
 8022d78:	687b      	ldr	r3, [r7, #4]
 8022d7a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022d7e:	4618      	mov	r0, r3
 8022d80:	f002 fc7e 	bl	8025680 <_ZN10SideSensor17GetCrossLineCountEv>
 8022d84:	4603      	mov	r3, r0
 8022d86:	73bb      	strb	r3, [r7, #14]
    static uint8_t pre_corner = corner;
 8022d88:	4b83      	ldr	r3, [pc, #524]	; (8022f98 <_ZN6Logger7LoadingEv+0x2f0>)
 8022d8a:	781b      	ldrb	r3, [r3, #0]
 8022d8c:	f3bf 8f5b 	dmb	ish
 8022d90:	b2db      	uxtb	r3, r3
 8022d92:	f003 0301 	and.w	r3, r3, #1
 8022d96:	2b00      	cmp	r3, #0
 8022d98:	bf0c      	ite	eq
 8022d9a:	2301      	moveq	r3, #1
 8022d9c:	2300      	movne	r3, #0
 8022d9e:	b2db      	uxtb	r3, r3
 8022da0:	2b00      	cmp	r3, #0
 8022da2:	d010      	beq.n	8022dc6 <_ZN6Logger7LoadingEv+0x11e>
 8022da4:	487c      	ldr	r0, [pc, #496]	; (8022f98 <_ZN6Logger7LoadingEv+0x2f0>)
 8022da6:	f007 fb2d 	bl	802a404 <__cxa_guard_acquire>
 8022daa:	4603      	mov	r3, r0
 8022dac:	2b00      	cmp	r3, #0
 8022dae:	bf14      	ite	ne
 8022db0:	2301      	movne	r3, #1
 8022db2:	2300      	moveq	r3, #0
 8022db4:	b2db      	uxtb	r3, r3
 8022db6:	2b00      	cmp	r3, #0
 8022db8:	d005      	beq.n	8022dc6 <_ZN6Logger7LoadingEv+0x11e>
 8022dba:	4a78      	ldr	r2, [pc, #480]	; (8022f9c <_ZN6Logger7LoadingEv+0x2f4>)
 8022dbc:	7bfb      	ldrb	r3, [r7, #15]
 8022dbe:	7013      	strb	r3, [r2, #0]
 8022dc0:	4875      	ldr	r0, [pc, #468]	; (8022f98 <_ZN6Logger7LoadingEv+0x2f0>)
 8022dc2:	f007 fb2b 	bl	802a41c <__cxa_guard_release>
    static uint8_t pre_cross = cross;
 8022dc6:	4b76      	ldr	r3, [pc, #472]	; (8022fa0 <_ZN6Logger7LoadingEv+0x2f8>)
 8022dc8:	781b      	ldrb	r3, [r3, #0]
 8022dca:	f3bf 8f5b 	dmb	ish
 8022dce:	b2db      	uxtb	r3, r3
 8022dd0:	f003 0301 	and.w	r3, r3, #1
 8022dd4:	2b00      	cmp	r3, #0
 8022dd6:	bf0c      	ite	eq
 8022dd8:	2301      	moveq	r3, #1
 8022dda:	2300      	movne	r3, #0
 8022ddc:	b2db      	uxtb	r3, r3
 8022dde:	2b00      	cmp	r3, #0
 8022de0:	d010      	beq.n	8022e04 <_ZN6Logger7LoadingEv+0x15c>
 8022de2:	486f      	ldr	r0, [pc, #444]	; (8022fa0 <_ZN6Logger7LoadingEv+0x2f8>)
 8022de4:	f007 fb0e 	bl	802a404 <__cxa_guard_acquire>
 8022de8:	4603      	mov	r3, r0
 8022dea:	2b00      	cmp	r3, #0
 8022dec:	bf14      	ite	ne
 8022dee:	2301      	movne	r3, #1
 8022df0:	2300      	moveq	r3, #0
 8022df2:	b2db      	uxtb	r3, r3
 8022df4:	2b00      	cmp	r3, #0
 8022df6:	d005      	beq.n	8022e04 <_ZN6Logger7LoadingEv+0x15c>
 8022df8:	4a6a      	ldr	r2, [pc, #424]	; (8022fa4 <_ZN6Logger7LoadingEv+0x2fc>)
 8022dfa:	7bbb      	ldrb	r3, [r7, #14]
 8022dfc:	7013      	strb	r3, [r2, #0]
 8022dfe:	4868      	ldr	r0, [pc, #416]	; (8022fa0 <_ZN6Logger7LoadingEv+0x2f8>)
 8022e00:	f007 fb0c 	bl	802a41c <__cxa_guard_release>
    static uint8_t straight_cnt = 0;
    bool straight = false;
 8022e04:	2300      	movs	r3, #0
 8022e06:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    if(fabs(encoder.AngularVelocity()) < STRAIGHT_BORDER_OMEGA){
 8022e0a:	687b      	ldr	r3, [r7, #4]
 8022e0c:	33e8      	adds	r3, #232	; 0xe8
 8022e0e:	4618      	mov	r0, r3
 8022e10:	f7fe f87a 	bl	8020f08 <_ZN7Encoder15AngularVelocityEv>
 8022e14:	eef0 7a40 	vmov.f32	s15, s0
 8022e18:	eeb0 0a67 	vmov.f32	s0, s15
 8022e1c:	f7ff fb6c 	bl	80224f8 <_ZSt4fabsf>
 8022e20:	eeb0 7a40 	vmov.f32	s14, s0
 8022e24:	eddf 7a60 	vldr	s15, [pc, #384]	; 8022fa8 <_ZN6Logger7LoadingEv+0x300>
 8022e28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022e30:	bf4c      	ite	mi
 8022e32:	2301      	movmi	r3, #1
 8022e34:	2300      	movpl	r3, #0
 8022e36:	b2db      	uxtb	r3, r3
 8022e38:	2b00      	cmp	r3, #0
 8022e3a:	d00e      	beq.n	8022e5a <_ZN6Logger7LoadingEv+0x1b2>
        if(straight_cnt <= STRAIGHT_JUDGE_COUNT) straight_cnt++;
 8022e3c:	4b5b      	ldr	r3, [pc, #364]	; (8022fac <_ZN6Logger7LoadingEv+0x304>)
 8022e3e:	781b      	ldrb	r3, [r3, #0]
 8022e40:	2b05      	cmp	r3, #5
 8022e42:	d806      	bhi.n	8022e52 <_ZN6Logger7LoadingEv+0x1aa>
 8022e44:	4b59      	ldr	r3, [pc, #356]	; (8022fac <_ZN6Logger7LoadingEv+0x304>)
 8022e46:	781b      	ldrb	r3, [r3, #0]
 8022e48:	3301      	adds	r3, #1
 8022e4a:	b2da      	uxtb	r2, r3
 8022e4c:	4b57      	ldr	r3, [pc, #348]	; (8022fac <_ZN6Logger7LoadingEv+0x304>)
 8022e4e:	701a      	strb	r2, [r3, #0]
 8022e50:	e006      	b.n	8022e60 <_ZN6Logger7LoadingEv+0x1b8>
        else straight = true;
 8022e52:	2301      	movs	r3, #1
 8022e54:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8022e58:	e002      	b.n	8022e60 <_ZN6Logger7LoadingEv+0x1b8>
    }else straight_cnt = 0;
 8022e5a:	4b54      	ldr	r3, [pc, #336]	; (8022fac <_ZN6Logger7LoadingEv+0x304>)
 8022e5c:	2200      	movs	r2, #0
 8022e5e:	701a      	strb	r2, [r3, #0]
    if(corner > pre_corner && straight) run_corner = true;
 8022e60:	4b4e      	ldr	r3, [pc, #312]	; (8022f9c <_ZN6Logger7LoadingEv+0x2f4>)
 8022e62:	781b      	ldrb	r3, [r3, #0]
 8022e64:	7bfa      	ldrb	r2, [r7, #15]
 8022e66:	429a      	cmp	r2, r3
 8022e68:	d906      	bls.n	8022e78 <_ZN6Logger7LoadingEv+0x1d0>
 8022e6a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8022e6e:	2b00      	cmp	r3, #0
 8022e70:	d002      	beq.n	8022e78 <_ZN6Logger7LoadingEv+0x1d0>
 8022e72:	2301      	movs	r3, #1
 8022e74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if(cross > pre_cross) run_cross = true;
 8022e78:	4b4a      	ldr	r3, [pc, #296]	; (8022fa4 <_ZN6Logger7LoadingEv+0x2fc>)
 8022e7a:	781b      	ldrb	r3, [r3, #0]
 8022e7c:	7bba      	ldrb	r2, [r7, #14]
 8022e7e:	429a      	cmp	r2, r3
 8022e80:	d902      	bls.n	8022e88 <_ZN6Logger7LoadingEv+0x1e0>
 8022e82:	2301      	movs	r3, #1
 8022e84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    pre_corner = corner;
 8022e88:	4a44      	ldr	r2, [pc, #272]	; (8022f9c <_ZN6Logger7LoadingEv+0x2f4>)
 8022e8a:	7bfb      	ldrb	r3, [r7, #15]
 8022e8c:	7013      	strb	r3, [r2, #0]
    pre_cross = cross;
 8022e8e:	4a45      	ldr	r2, [pc, #276]	; (8022fa4 <_ZN6Logger7LoadingEv+0x2fc>)
 8022e90:	7bbb      	ldrb	r3, [r7, #14]
 8022e92:	7013      	strb	r3, [r2, #0]

    /* Position correction at corner marker */
    static uint16_t log_corner_address, run_corner_address;
    static uint8_t log_corner_wait = 0, run_corner_wait = 0;
    if(log_corner == true){
 8022e94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8022e98:	2b00      	cmp	r3, #0
 8022e9a:	d01f      	beq.n	8022edc <_ZN6Logger7LoadingEv+0x234>
        if(run_corner_pass == true){
 8022e9c:	7c7b      	ldrb	r3, [r7, #17]
 8022e9e:	2b00      	cmp	r3, #0
 8022ea0:	d011      	beq.n	8022ec6 <_ZN6Logger7LoadingEv+0x21e>
            now_address += now_address - run_corner_address;
 8022ea2:	4b3c      	ldr	r3, [pc, #240]	; (8022f94 <_ZN6Logger7LoadingEv+0x2ec>)
 8022ea4:	881a      	ldrh	r2, [r3, #0]
 8022ea6:	4b42      	ldr	r3, [pc, #264]	; (8022fb0 <_ZN6Logger7LoadingEv+0x308>)
 8022ea8:	881b      	ldrh	r3, [r3, #0]
 8022eaa:	1ad3      	subs	r3, r2, r3
 8022eac:	b29a      	uxth	r2, r3
 8022eae:	4b39      	ldr	r3, [pc, #228]	; (8022f94 <_ZN6Logger7LoadingEv+0x2ec>)
 8022eb0:	881b      	ldrh	r3, [r3, #0]
 8022eb2:	4413      	add	r3, r2
 8022eb4:	b29a      	uxth	r2, r3
 8022eb6:	4b37      	ldr	r3, [pc, #220]	; (8022f94 <_ZN6Logger7LoadingEv+0x2ec>)
 8022eb8:	801a      	strh	r2, [r3, #0]
            run_corner_wait = 0;
 8022eba:	4b3e      	ldr	r3, [pc, #248]	; (8022fb4 <_ZN6Logger7LoadingEv+0x30c>)
 8022ebc:	2200      	movs	r2, #0
 8022ebe:	701a      	strb	r2, [r3, #0]
            run_corner_pass = false;
 8022ec0:	2300      	movs	r3, #0
 8022ec2:	747b      	strb	r3, [r7, #17]
 8022ec4:	e017      	b.n	8022ef6 <_ZN6Logger7LoadingEv+0x24e>
        }else{
            log_corner_address = now_address;
 8022ec6:	4b33      	ldr	r3, [pc, #204]	; (8022f94 <_ZN6Logger7LoadingEv+0x2ec>)
 8022ec8:	881a      	ldrh	r2, [r3, #0]
 8022eca:	4b3b      	ldr	r3, [pc, #236]	; (8022fb8 <_ZN6Logger7LoadingEv+0x310>)
 8022ecc:	801a      	strh	r2, [r3, #0]
            log_corner_pass = true;
 8022ece:	2301      	movs	r3, #1
 8022ed0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            log_corner_wait = CORRECTION_WAIT_COUNT;
 8022ed4:	4b39      	ldr	r3, [pc, #228]	; (8022fbc <_ZN6Logger7LoadingEv+0x314>)
 8022ed6:	2203      	movs	r2, #3
 8022ed8:	701a      	strb	r2, [r3, #0]
 8022eda:	e00c      	b.n	8022ef6 <_ZN6Logger7LoadingEv+0x24e>
        }
    }else{
        if(run_corner_wait > 0) run_corner_wait--;
 8022edc:	4b35      	ldr	r3, [pc, #212]	; (8022fb4 <_ZN6Logger7LoadingEv+0x30c>)
 8022ede:	781b      	ldrb	r3, [r3, #0]
 8022ee0:	2b00      	cmp	r3, #0
 8022ee2:	d006      	beq.n	8022ef2 <_ZN6Logger7LoadingEv+0x24a>
 8022ee4:	4b33      	ldr	r3, [pc, #204]	; (8022fb4 <_ZN6Logger7LoadingEv+0x30c>)
 8022ee6:	781b      	ldrb	r3, [r3, #0]
 8022ee8:	3b01      	subs	r3, #1
 8022eea:	b2da      	uxtb	r2, r3
 8022eec:	4b31      	ldr	r3, [pc, #196]	; (8022fb4 <_ZN6Logger7LoadingEv+0x30c>)
 8022eee:	701a      	strb	r2, [r3, #0]
 8022ef0:	e001      	b.n	8022ef6 <_ZN6Logger7LoadingEv+0x24e>
        else run_corner_pass = false;
 8022ef2:	2300      	movs	r3, #0
 8022ef4:	747b      	strb	r3, [r7, #17]
    }
    if(run_corner == true){
 8022ef6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8022efa:	2b00      	cmp	r3, #0
 8022efc:	d018      	beq.n	8022f30 <_ZN6Logger7LoadingEv+0x288>
        if(log_corner_pass == true){
 8022efe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8022f02:	2b00      	cmp	r3, #0
 8022f04:	d00a      	beq.n	8022f1c <_ZN6Logger7LoadingEv+0x274>
            now_address = log_corner_address;
 8022f06:	4b2c      	ldr	r3, [pc, #176]	; (8022fb8 <_ZN6Logger7LoadingEv+0x310>)
 8022f08:	881a      	ldrh	r2, [r3, #0]
 8022f0a:	4b22      	ldr	r3, [pc, #136]	; (8022f94 <_ZN6Logger7LoadingEv+0x2ec>)
 8022f0c:	801a      	strh	r2, [r3, #0]
            log_corner_wait = 0;
 8022f0e:	4b2b      	ldr	r3, [pc, #172]	; (8022fbc <_ZN6Logger7LoadingEv+0x314>)
 8022f10:	2200      	movs	r2, #0
 8022f12:	701a      	strb	r2, [r3, #0]
            log_corner_pass = false;
 8022f14:	2300      	movs	r3, #0
 8022f16:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8022f1a:	e017      	b.n	8022f4c <_ZN6Logger7LoadingEv+0x2a4>
        }else{
            run_corner_address = now_address;
 8022f1c:	4b1d      	ldr	r3, [pc, #116]	; (8022f94 <_ZN6Logger7LoadingEv+0x2ec>)
 8022f1e:	881a      	ldrh	r2, [r3, #0]
 8022f20:	4b23      	ldr	r3, [pc, #140]	; (8022fb0 <_ZN6Logger7LoadingEv+0x308>)
 8022f22:	801a      	strh	r2, [r3, #0]
            run_corner_pass = true;
 8022f24:	2301      	movs	r3, #1
 8022f26:	747b      	strb	r3, [r7, #17]
            run_corner_wait = CORRECTION_WAIT_COUNT;
 8022f28:	4b22      	ldr	r3, [pc, #136]	; (8022fb4 <_ZN6Logger7LoadingEv+0x30c>)
 8022f2a:	2203      	movs	r2, #3
 8022f2c:	701a      	strb	r2, [r3, #0]
 8022f2e:	e00d      	b.n	8022f4c <_ZN6Logger7LoadingEv+0x2a4>
        }
    }else{
        if(log_corner_wait > 0) log_corner_wait--;
 8022f30:	4b22      	ldr	r3, [pc, #136]	; (8022fbc <_ZN6Logger7LoadingEv+0x314>)
 8022f32:	781b      	ldrb	r3, [r3, #0]
 8022f34:	2b00      	cmp	r3, #0
 8022f36:	d006      	beq.n	8022f46 <_ZN6Logger7LoadingEv+0x29e>
 8022f38:	4b20      	ldr	r3, [pc, #128]	; (8022fbc <_ZN6Logger7LoadingEv+0x314>)
 8022f3a:	781b      	ldrb	r3, [r3, #0]
 8022f3c:	3b01      	subs	r3, #1
 8022f3e:	b2da      	uxtb	r2, r3
 8022f40:	4b1e      	ldr	r3, [pc, #120]	; (8022fbc <_ZN6Logger7LoadingEv+0x314>)
 8022f42:	701a      	strb	r2, [r3, #0]
 8022f44:	e002      	b.n	8022f4c <_ZN6Logger7LoadingEv+0x2a4>
        else log_corner_pass = false;
 8022f46:	2300      	movs	r3, #0
 8022f48:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    }

    /* Position correction at cross line */
    static uint16_t log_cross_address, run_cross_address;
    static uint8_t log_cross_wait = 0, run_cross_wait = 0;
    if(log_cross == true){
 8022f4c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8022f50:	2b00      	cmp	r3, #0
 8022f52:	d03d      	beq.n	8022fd0 <_ZN6Logger7LoadingEv+0x328>
        if(run_cross_pass == true){
 8022f54:	7c3b      	ldrb	r3, [r7, #16]
 8022f56:	2b00      	cmp	r3, #0
 8022f58:	d011      	beq.n	8022f7e <_ZN6Logger7LoadingEv+0x2d6>
            now_address += now_address - run_cross_address;
 8022f5a:	4b0e      	ldr	r3, [pc, #56]	; (8022f94 <_ZN6Logger7LoadingEv+0x2ec>)
 8022f5c:	881a      	ldrh	r2, [r3, #0]
 8022f5e:	4b18      	ldr	r3, [pc, #96]	; (8022fc0 <_ZN6Logger7LoadingEv+0x318>)
 8022f60:	881b      	ldrh	r3, [r3, #0]
 8022f62:	1ad3      	subs	r3, r2, r3
 8022f64:	b29a      	uxth	r2, r3
 8022f66:	4b0b      	ldr	r3, [pc, #44]	; (8022f94 <_ZN6Logger7LoadingEv+0x2ec>)
 8022f68:	881b      	ldrh	r3, [r3, #0]
 8022f6a:	4413      	add	r3, r2
 8022f6c:	b29a      	uxth	r2, r3
 8022f6e:	4b09      	ldr	r3, [pc, #36]	; (8022f94 <_ZN6Logger7LoadingEv+0x2ec>)
 8022f70:	801a      	strh	r2, [r3, #0]
            run_cross_wait = 0;
 8022f72:	4b14      	ldr	r3, [pc, #80]	; (8022fc4 <_ZN6Logger7LoadingEv+0x31c>)
 8022f74:	2200      	movs	r2, #0
 8022f76:	701a      	strb	r2, [r3, #0]
            run_cross_pass = false;
 8022f78:	2300      	movs	r3, #0
 8022f7a:	743b      	strb	r3, [r7, #16]
 8022f7c:	e035      	b.n	8022fea <_ZN6Logger7LoadingEv+0x342>
        }else{
            log_cross_address = now_address;
 8022f7e:	4b05      	ldr	r3, [pc, #20]	; (8022f94 <_ZN6Logger7LoadingEv+0x2ec>)
 8022f80:	881a      	ldrh	r2, [r3, #0]
 8022f82:	4b11      	ldr	r3, [pc, #68]	; (8022fc8 <_ZN6Logger7LoadingEv+0x320>)
 8022f84:	801a      	strh	r2, [r3, #0]
            log_cross_pass = true;
 8022f86:	2301      	movs	r3, #1
 8022f88:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
            log_cross_wait = CORRECTION_WAIT_COUNT;
 8022f8c:	4b0f      	ldr	r3, [pc, #60]	; (8022fcc <_ZN6Logger7LoadingEv+0x324>)
 8022f8e:	2203      	movs	r2, #3
 8022f90:	701a      	strb	r2, [r3, #0]
 8022f92:	e02a      	b.n	8022fea <_ZN6Logger7LoadingEv+0x342>
 8022f94:	20000098 	.word	0x20000098
 8022f98:	2000009c 	.word	0x2000009c
 8022f9c:	2000009a 	.word	0x2000009a
 8022fa0:	200000a4 	.word	0x200000a4
 8022fa4:	200000a0 	.word	0x200000a0
 8022fa8:	43ca0000 	.word	0x43ca0000
 8022fac:	200000a8 	.word	0x200000a8
 8022fb0:	200000ac 	.word	0x200000ac
 8022fb4:	200000af 	.word	0x200000af
 8022fb8:	200000aa 	.word	0x200000aa
 8022fbc:	200000ae 	.word	0x200000ae
 8022fc0:	200000b2 	.word	0x200000b2
 8022fc4:	200000b5 	.word	0x200000b5
 8022fc8:	200000b0 	.word	0x200000b0
 8022fcc:	200000b4 	.word	0x200000b4
        }
    }else{
        if(run_cross_wait > 0) run_cross_wait--;
 8022fd0:	4b8e      	ldr	r3, [pc, #568]	; (802320c <_ZN6Logger7LoadingEv+0x564>)
 8022fd2:	781b      	ldrb	r3, [r3, #0]
 8022fd4:	2b00      	cmp	r3, #0
 8022fd6:	d006      	beq.n	8022fe6 <_ZN6Logger7LoadingEv+0x33e>
 8022fd8:	4b8c      	ldr	r3, [pc, #560]	; (802320c <_ZN6Logger7LoadingEv+0x564>)
 8022fda:	781b      	ldrb	r3, [r3, #0]
 8022fdc:	3b01      	subs	r3, #1
 8022fde:	b2da      	uxtb	r2, r3
 8022fe0:	4b8a      	ldr	r3, [pc, #552]	; (802320c <_ZN6Logger7LoadingEv+0x564>)
 8022fe2:	701a      	strb	r2, [r3, #0]
 8022fe4:	e001      	b.n	8022fea <_ZN6Logger7LoadingEv+0x342>
        else run_cross_pass = false;
 8022fe6:	2300      	movs	r3, #0
 8022fe8:	743b      	strb	r3, [r7, #16]
    }
    if(run_cross == true){
 8022fea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8022fee:	2b00      	cmp	r3, #0
 8022ff0:	d018      	beq.n	8023024 <_ZN6Logger7LoadingEv+0x37c>
        if(log_cross_pass == true){
 8022ff2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8022ff6:	2b00      	cmp	r3, #0
 8022ff8:	d00a      	beq.n	8023010 <_ZN6Logger7LoadingEv+0x368>
            now_address = log_cross_address;
 8022ffa:	4b85      	ldr	r3, [pc, #532]	; (8023210 <_ZN6Logger7LoadingEv+0x568>)
 8022ffc:	881a      	ldrh	r2, [r3, #0]
 8022ffe:	4b85      	ldr	r3, [pc, #532]	; (8023214 <_ZN6Logger7LoadingEv+0x56c>)
 8023000:	801a      	strh	r2, [r3, #0]
            log_cross_wait = 0;
 8023002:	4b85      	ldr	r3, [pc, #532]	; (8023218 <_ZN6Logger7LoadingEv+0x570>)
 8023004:	2200      	movs	r2, #0
 8023006:	701a      	strb	r2, [r3, #0]
            log_cross_pass = false;
 8023008:	2300      	movs	r3, #0
 802300a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 802300e:	e017      	b.n	8023040 <_ZN6Logger7LoadingEv+0x398>
        }else{
            run_cross_address = now_address;
 8023010:	4b80      	ldr	r3, [pc, #512]	; (8023214 <_ZN6Logger7LoadingEv+0x56c>)
 8023012:	881a      	ldrh	r2, [r3, #0]
 8023014:	4b81      	ldr	r3, [pc, #516]	; (802321c <_ZN6Logger7LoadingEv+0x574>)
 8023016:	801a      	strh	r2, [r3, #0]
            run_cross_pass = true;
 8023018:	2301      	movs	r3, #1
 802301a:	743b      	strb	r3, [r7, #16]
            run_cross_wait = CORRECTION_WAIT_COUNT;
 802301c:	4b7b      	ldr	r3, [pc, #492]	; (802320c <_ZN6Logger7LoadingEv+0x564>)
 802301e:	2203      	movs	r2, #3
 8023020:	701a      	strb	r2, [r3, #0]
 8023022:	e00d      	b.n	8023040 <_ZN6Logger7LoadingEv+0x398>
        }
    }else{
        if(log_cross_wait > 0) log_cross_wait--;
 8023024:	4b7c      	ldr	r3, [pc, #496]	; (8023218 <_ZN6Logger7LoadingEv+0x570>)
 8023026:	781b      	ldrb	r3, [r3, #0]
 8023028:	2b00      	cmp	r3, #0
 802302a:	d006      	beq.n	802303a <_ZN6Logger7LoadingEv+0x392>
 802302c:	4b7a      	ldr	r3, [pc, #488]	; (8023218 <_ZN6Logger7LoadingEv+0x570>)
 802302e:	781b      	ldrb	r3, [r3, #0]
 8023030:	3b01      	subs	r3, #1
 8023032:	b2da      	uxtb	r2, r3
 8023034:	4b78      	ldr	r3, [pc, #480]	; (8023218 <_ZN6Logger7LoadingEv+0x570>)
 8023036:	701a      	strb	r2, [r3, #0]
 8023038:	e002      	b.n	8023040 <_ZN6Logger7LoadingEv+0x398>
        else log_cross_pass = false;
 802303a:	2300      	movs	r3, #0
 802303c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    /* Accel straight */
    uint8_t accel_step = *(reinterpret_cast<uint8_t*>(now_address + HEAD_ADDRESS_BLOCK_D));
 8023040:	4b74      	ldr	r3, [pc, #464]	; (8023214 <_ZN6Logger7LoadingEv+0x56c>)
 8023042:	881b      	ldrh	r3, [r3, #0]
 8023044:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8023048:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 802304c:	781b      	ldrb	r3, [r3, #0]
 802304e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    if(!straight) accel_step = 0x10;
 8023052:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8023056:	f083 0301 	eor.w	r3, r3, #1
 802305a:	b2db      	uxtb	r3, r3
 802305c:	2b00      	cmp	r3, #0
 802305e:	d002      	beq.n	8023066 <_ZN6Logger7LoadingEv+0x3be>
 8023060:	2310      	movs	r3, #16
 8023062:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    float target = MIN_VELOCITY;
 8023066:	4b6e      	ldr	r3, [pc, #440]	; (8023220 <_ZN6Logger7LoadingEv+0x578>)
 8023068:	627b      	str	r3, [r7, #36]	; 0x24
    static float pre_target = MIN_VELOCITY;
    switch(accel_step){
 802306a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802306e:	3b01      	subs	r3, #1
 8023070:	2b4f      	cmp	r3, #79	; 0x4f
 8023072:	f200 80b5 	bhi.w	80231e0 <_ZN6Logger7LoadingEv+0x538>
 8023076:	a201      	add	r2, pc, #4	; (adr r2, 802307c <_ZN6Logger7LoadingEv+0x3d4>)
 8023078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802307c:	080231c3 	.word	0x080231c3
 8023080:	080231c9 	.word	0x080231c9
 8023084:	080231cf 	.word	0x080231cf
 8023088:	080231d5 	.word	0x080231d5
 802308c:	080231db 	.word	0x080231db
 8023090:	080231e1 	.word	0x080231e1
 8023094:	080231e1 	.word	0x080231e1
 8023098:	080231e1 	.word	0x080231e1
 802309c:	080231e1 	.word	0x080231e1
 80230a0:	080231e1 	.word	0x080231e1
 80230a4:	080231e1 	.word	0x080231e1
 80230a8:	080231e1 	.word	0x080231e1
 80230ac:	080231e1 	.word	0x080231e1
 80230b0:	080231e1 	.word	0x080231e1
 80230b4:	080231e1 	.word	0x080231e1
 80230b8:	080231bd 	.word	0x080231bd
 80230bc:	080231e1 	.word	0x080231e1
 80230c0:	080231e1 	.word	0x080231e1
 80230c4:	080231e1 	.word	0x080231e1
 80230c8:	080231e1 	.word	0x080231e1
 80230cc:	080231e1 	.word	0x080231e1
 80230d0:	080231e1 	.word	0x080231e1
 80230d4:	080231e1 	.word	0x080231e1
 80230d8:	080231e1 	.word	0x080231e1
 80230dc:	080231e1 	.word	0x080231e1
 80230e0:	080231e1 	.word	0x080231e1
 80230e4:	080231e1 	.word	0x080231e1
 80230e8:	080231e1 	.word	0x080231e1
 80230ec:	080231e1 	.word	0x080231e1
 80230f0:	080231e1 	.word	0x080231e1
 80230f4:	080231e1 	.word	0x080231e1
 80230f8:	080231c3 	.word	0x080231c3
 80230fc:	080231e1 	.word	0x080231e1
 8023100:	080231e1 	.word	0x080231e1
 8023104:	080231e1 	.word	0x080231e1
 8023108:	080231e1 	.word	0x080231e1
 802310c:	080231e1 	.word	0x080231e1
 8023110:	080231e1 	.word	0x080231e1
 8023114:	080231e1 	.word	0x080231e1
 8023118:	080231e1 	.word	0x080231e1
 802311c:	080231e1 	.word	0x080231e1
 8023120:	080231e1 	.word	0x080231e1
 8023124:	080231e1 	.word	0x080231e1
 8023128:	080231e1 	.word	0x080231e1
 802312c:	080231e1 	.word	0x080231e1
 8023130:	080231e1 	.word	0x080231e1
 8023134:	080231e1 	.word	0x080231e1
 8023138:	080231c9 	.word	0x080231c9
 802313c:	080231e1 	.word	0x080231e1
 8023140:	080231e1 	.word	0x080231e1
 8023144:	080231e1 	.word	0x080231e1
 8023148:	080231e1 	.word	0x080231e1
 802314c:	080231e1 	.word	0x080231e1
 8023150:	080231e1 	.word	0x080231e1
 8023154:	080231e1 	.word	0x080231e1
 8023158:	080231e1 	.word	0x080231e1
 802315c:	080231e1 	.word	0x080231e1
 8023160:	080231e1 	.word	0x080231e1
 8023164:	080231e1 	.word	0x080231e1
 8023168:	080231e1 	.word	0x080231e1
 802316c:	080231e1 	.word	0x080231e1
 8023170:	080231e1 	.word	0x080231e1
 8023174:	080231e1 	.word	0x080231e1
 8023178:	080231cf 	.word	0x080231cf
 802317c:	080231e1 	.word	0x080231e1
 8023180:	080231e1 	.word	0x080231e1
 8023184:	080231e1 	.word	0x080231e1
 8023188:	080231e1 	.word	0x080231e1
 802318c:	080231e1 	.word	0x080231e1
 8023190:	080231e1 	.word	0x080231e1
 8023194:	080231e1 	.word	0x080231e1
 8023198:	080231e1 	.word	0x080231e1
 802319c:	080231e1 	.word	0x080231e1
 80231a0:	080231e1 	.word	0x080231e1
 80231a4:	080231e1 	.word	0x080231e1
 80231a8:	080231e1 	.word	0x080231e1
 80231ac:	080231e1 	.word	0x080231e1
 80231b0:	080231e1 	.word	0x080231e1
 80231b4:	080231e1 	.word	0x080231e1
 80231b8:	080231d5 	.word	0x080231d5
        case 0x10: target = MIN_VELOCITY; break;
 80231bc:	4b18      	ldr	r3, [pc, #96]	; (8023220 <_ZN6Logger7LoadingEv+0x578>)
 80231be:	627b      	str	r3, [r7, #36]	; 0x24
 80231c0:	e012      	b.n	80231e8 <_ZN6Logger7LoadingEv+0x540>
        case 0x01:
        case 0x20: target = MIN_VELOCITY + (ACCEL_VELOCITY * 1); break;
 80231c2:	4b18      	ldr	r3, [pc, #96]	; (8023224 <_ZN6Logger7LoadingEv+0x57c>)
 80231c4:	627b      	str	r3, [r7, #36]	; 0x24
 80231c6:	e00f      	b.n	80231e8 <_ZN6Logger7LoadingEv+0x540>
        case 0x02:
        case 0x30: target = MIN_VELOCITY + (ACCEL_VELOCITY * 2); break;
 80231c8:	4b17      	ldr	r3, [pc, #92]	; (8023228 <_ZN6Logger7LoadingEv+0x580>)
 80231ca:	627b      	str	r3, [r7, #36]	; 0x24
 80231cc:	e00c      	b.n	80231e8 <_ZN6Logger7LoadingEv+0x540>
        case 0x03:
        case 0x40: target = MIN_VELOCITY + (ACCEL_VELOCITY * 3); break;
 80231ce:	4b17      	ldr	r3, [pc, #92]	; (802322c <_ZN6Logger7LoadingEv+0x584>)
 80231d0:	627b      	str	r3, [r7, #36]	; 0x24
 80231d2:	e009      	b.n	80231e8 <_ZN6Logger7LoadingEv+0x540>
        case 0x04:
        case 0x50: target = MIN_VELOCITY + (ACCEL_VELOCITY * 4); break;
 80231d4:	4b16      	ldr	r3, [pc, #88]	; (8023230 <_ZN6Logger7LoadingEv+0x588>)
 80231d6:	627b      	str	r3, [r7, #36]	; 0x24
 80231d8:	e006      	b.n	80231e8 <_ZN6Logger7LoadingEv+0x540>
        case 0x05: target = MIN_VELOCITY + (ACCEL_VELOCITY * 5); break;
 80231da:	4b16      	ldr	r3, [pc, #88]	; (8023234 <_ZN6Logger7LoadingEv+0x58c>)
 80231dc:	627b      	str	r3, [r7, #36]	; 0x24
 80231de:	e003      	b.n	80231e8 <_ZN6Logger7LoadingEv+0x540>
        default: target = pre_target; break;
 80231e0:	4b15      	ldr	r3, [pc, #84]	; (8023238 <_ZN6Logger7LoadingEv+0x590>)
 80231e2:	681b      	ldr	r3, [r3, #0]
 80231e4:	627b      	str	r3, [r7, #36]	; 0x24
 80231e6:	bf00      	nop
    }
    pre_target = target;
 80231e8:	4a13      	ldr	r2, [pc, #76]	; (8023238 <_ZN6Logger7LoadingEv+0x590>)
 80231ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80231ec:	6013      	str	r3, [r2, #0]
    target_velocity_ = target;
 80231ee:	687b      	ldr	r3, [r7, #4]
 80231f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80231f2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

    now_address++;
 80231f6:	4b07      	ldr	r3, [pc, #28]	; (8023214 <_ZN6Logger7LoadingEv+0x56c>)
 80231f8:	881b      	ldrh	r3, [r3, #0]
 80231fa:	3301      	adds	r3, #1
 80231fc:	b29a      	uxth	r2, r3
 80231fe:	4b05      	ldr	r3, [pc, #20]	; (8023214 <_ZN6Logger7LoadingEv+0x56c>)
 8023200:	801a      	strh	r2, [r3, #0]
 8023202:	e000      	b.n	8023206 <_ZN6Logger7LoadingEv+0x55e>
    if(distance < LOGGING_CONST_DISTANCE) return;
 8023204:	bf00      	nop
}
 8023206:	3730      	adds	r7, #48	; 0x30
 8023208:	46bd      	mov	sp, r7
 802320a:	bd80      	pop	{r7, pc}
 802320c:	200000b5 	.word	0x200000b5
 8023210:	200000b0 	.word	0x200000b0
 8023214:	20000098 	.word	0x20000098
 8023218:	200000b4 	.word	0x200000b4
 802321c:	200000b2 	.word	0x200000b2
 8023220:	3fa66666 	.word	0x3fa66666
 8023224:	3fe66666 	.word	0x3fe66666
 8023228:	40133333 	.word	0x40133333
 802322c:	40333333 	.word	0x40333333
 8023230:	40533333 	.word	0x40533333
 8023234:	40733333 	.word	0x40733333
 8023238:	2000000c 	.word	0x2000000c

0802323c <_ZN6Logger17GetTargetVelocityEv>:

float Logger::GetTargetVelocity()
{
 802323c:	b480      	push	{r7}
 802323e:	b083      	sub	sp, #12
 8023240:	af00      	add	r7, sp, #0
 8023242:	6078      	str	r0, [r7, #4]
    return target_velocity_;
 8023244:	687b      	ldr	r3, [r7, #4]
 8023246:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 802324a:	ee07 3a90 	vmov	s15, r3
 802324e:	eeb0 0a67 	vmov.f32	s0, s15
 8023252:	370c      	adds	r7, #12
 8023254:	46bd      	mov	sp, r7
 8023256:	f85d 7b04 	ldr.w	r7, [sp], #4
 802325a:	4770      	bx	lr

0802325c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 802325c:	b580      	push	{r7, lr}
 802325e:	b082      	sub	sp, #8
 8023260:	af00      	add	r7, sp, #0
 8023262:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 8023264:	687b      	ldr	r3, [r7, #4]
 8023266:	681b      	ldr	r3, [r3, #0]
 8023268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802326c:	d101      	bne.n	8023272 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    InterruptTim2();
 802326e:	f002 ffad 	bl	80261cc <InterruptTim2>
  }
  if(htim->Instance == TIM6)
 8023272:	687b      	ldr	r3, [r7, #4]
 8023274:	681b      	ldr	r3, [r3, #0]
 8023276:	4a08      	ldr	r2, [pc, #32]	; (8023298 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8023278:	4293      	cmp	r3, r2
 802327a:	d101      	bne.n	8023280 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
    InterruptTim6();
 802327c:	f002 ff96 	bl	80261ac <InterruptTim6>
  }
  if(htim->Instance == TIM7)
 8023280:	687b      	ldr	r3, [r7, #4]
 8023282:	681b      	ldr	r3, [r3, #0]
 8023284:	4a05      	ldr	r2, [pc, #20]	; (802329c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8023286:	4293      	cmp	r3, r2
 8023288:	d101      	bne.n	802328e <HAL_TIM_PeriodElapsedCallback+0x32>
  {
    InterruptTim7();
 802328a:	f002 ff7f 	bl	802618c <InterruptTim7>
  }
}
 802328e:	bf00      	nop
 8023290:	3708      	adds	r7, #8
 8023292:	46bd      	mov	sp, r7
 8023294:	bd80      	pop	{r7, pc}
 8023296:	bf00      	nop
 8023298:	40001000 	.word	0x40001000
 802329c:	40001400 	.word	0x40001400

080232a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80232a0:	b580      	push	{r7, lr}
 80232a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80232a4:	f003 f82e 	bl	8026304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80232a8:	f000 f822 	bl	80232f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80232ac:	f000 fd68 	bl	8023d80 <MX_GPIO_Init>
  MX_DMA_Init();
 80232b0:	f000 fd46 	bl	8023d40 <MX_DMA_Init>
  MX_ADC1_Init();
 80232b4:	f000 f886 	bl	80233c4 <MX_ADC1_Init>
  MX_I2C2_Init();
 80232b8:	f000 f98c 	bl	80235d4 <MX_I2C2_Init>
  MX_SPI3_Init();
 80232bc:	f000 f9b8 	bl	8023630 <MX_SPI3_Init>
  MX_TIM1_Init();
 80232c0:	f000 f9ec 	bl	802369c <MX_TIM1_Init>
  MX_TIM3_Init();
 80232c4:	f000 fac8 	bl	8023858 <MX_TIM3_Init>
  MX_TIM4_Init();
 80232c8:	f000 fb40 	bl	802394c <MX_TIM4_Init>
  MX_TIM6_Init();
 80232cc:	f000 fbe0 	bl	8023a90 <MX_TIM6_Init>
  MX_TIM7_Init();
 80232d0:	f000 fc14 	bl	8023afc <MX_TIM7_Init>
  MX_TIM8_Init();
 80232d4:	f000 fc48 	bl	8023b68 <MX_TIM8_Init>
  MX_TIM11_Init();
 80232d8:	f000 fc9e 	bl	8023c18 <MX_TIM11_Init>
  MX_TIM12_Init();
 80232dc:	f000 fcea 	bl	8023cb4 <MX_TIM12_Init>
  MX_TIM2_Init();
 80232e0:	f000 fa6c 	bl	80237bc <MX_TIM2_Init>
  MX_TIM5_Init();
 80232e4:	f000 fb86 	bl	80239f4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  Init();
 80232e8:	f002 ff46 	bl	8026178 <Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80232ec:	e7fe      	b.n	80232ec <main+0x4c>
	...

080232f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80232f0:	b580      	push	{r7, lr}
 80232f2:	b094      	sub	sp, #80	; 0x50
 80232f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80232f6:	f107 0320 	add.w	r3, r7, #32
 80232fa:	2230      	movs	r2, #48	; 0x30
 80232fc:	2100      	movs	r1, #0
 80232fe:	4618      	mov	r0, r3
 8023300:	f007 f8bf 	bl	802a482 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8023304:	f107 030c 	add.w	r3, r7, #12
 8023308:	2200      	movs	r2, #0
 802330a:	601a      	str	r2, [r3, #0]
 802330c:	605a      	str	r2, [r3, #4]
 802330e:	609a      	str	r2, [r3, #8]
 8023310:	60da      	str	r2, [r3, #12]
 8023312:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8023314:	2300      	movs	r3, #0
 8023316:	60bb      	str	r3, [r7, #8]
 8023318:	4b28      	ldr	r3, [pc, #160]	; (80233bc <SystemClock_Config+0xcc>)
 802331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802331c:	4a27      	ldr	r2, [pc, #156]	; (80233bc <SystemClock_Config+0xcc>)
 802331e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8023322:	6413      	str	r3, [r2, #64]	; 0x40
 8023324:	4b25      	ldr	r3, [pc, #148]	; (80233bc <SystemClock_Config+0xcc>)
 8023326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802332c:	60bb      	str	r3, [r7, #8]
 802332e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8023330:	2300      	movs	r3, #0
 8023332:	607b      	str	r3, [r7, #4]
 8023334:	4b22      	ldr	r3, [pc, #136]	; (80233c0 <SystemClock_Config+0xd0>)
 8023336:	681b      	ldr	r3, [r3, #0]
 8023338:	4a21      	ldr	r2, [pc, #132]	; (80233c0 <SystemClock_Config+0xd0>)
 802333a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802333e:	6013      	str	r3, [r2, #0]
 8023340:	4b1f      	ldr	r3, [pc, #124]	; (80233c0 <SystemClock_Config+0xd0>)
 8023342:	681b      	ldr	r3, [r3, #0]
 8023344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8023348:	607b      	str	r3, [r7, #4]
 802334a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 802334c:	2301      	movs	r3, #1
 802334e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8023350:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8023354:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8023356:	2302      	movs	r3, #2
 8023358:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 802335a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802335e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8023360:	2306      	movs	r3, #6
 8023362:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8023364:	23a8      	movs	r3, #168	; 0xa8
 8023366:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8023368:	2302      	movs	r3, #2
 802336a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 802336c:	2304      	movs	r3, #4
 802336e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8023370:	f107 0320 	add.w	r3, r7, #32
 8023374:	4618      	mov	r0, r3
 8023376:	f004 fea7 	bl	80280c8 <HAL_RCC_OscConfig>
 802337a:	4603      	mov	r3, r0
 802337c:	2b00      	cmp	r3, #0
 802337e:	d001      	beq.n	8023384 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8023380:	f000 fdce 	bl	8023f20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8023384:	230f      	movs	r3, #15
 8023386:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8023388:	2302      	movs	r3, #2
 802338a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 802338c:	2300      	movs	r3, #0
 802338e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8023390:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8023394:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8023396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802339a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 802339c:	f107 030c 	add.w	r3, r7, #12
 80233a0:	2105      	movs	r1, #5
 80233a2:	4618      	mov	r0, r3
 80233a4:	f005 f900 	bl	80285a8 <HAL_RCC_ClockConfig>
 80233a8:	4603      	mov	r3, r0
 80233aa:	2b00      	cmp	r3, #0
 80233ac:	d001      	beq.n	80233b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80233ae:	f000 fdb7 	bl	8023f20 <Error_Handler>
  }
}
 80233b2:	bf00      	nop
 80233b4:	3750      	adds	r7, #80	; 0x50
 80233b6:	46bd      	mov	sp, r7
 80233b8:	bd80      	pop	{r7, pc}
 80233ba:	bf00      	nop
 80233bc:	40023800 	.word	0x40023800
 80233c0:	40007000 	.word	0x40007000

080233c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80233c4:	b580      	push	{r7, lr}
 80233c6:	b084      	sub	sp, #16
 80233c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80233ca:	463b      	mov	r3, r7
 80233cc:	2200      	movs	r2, #0
 80233ce:	601a      	str	r2, [r3, #0]
 80233d0:	605a      	str	r2, [r3, #4]
 80233d2:	609a      	str	r2, [r3, #8]
 80233d4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80233d6:	4b7c      	ldr	r3, [pc, #496]	; (80235c8 <MX_ADC1_Init+0x204>)
 80233d8:	4a7c      	ldr	r2, [pc, #496]	; (80235cc <MX_ADC1_Init+0x208>)
 80233da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80233dc:	4b7a      	ldr	r3, [pc, #488]	; (80235c8 <MX_ADC1_Init+0x204>)
 80233de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80233e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80233e4:	4b78      	ldr	r3, [pc, #480]	; (80235c8 <MX_ADC1_Init+0x204>)
 80233e6:	2200      	movs	r2, #0
 80233e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80233ea:	4b77      	ldr	r3, [pc, #476]	; (80235c8 <MX_ADC1_Init+0x204>)
 80233ec:	2201      	movs	r2, #1
 80233ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80233f0:	4b75      	ldr	r3, [pc, #468]	; (80235c8 <MX_ADC1_Init+0x204>)
 80233f2:	2201      	movs	r2, #1
 80233f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80233f6:	4b74      	ldr	r3, [pc, #464]	; (80235c8 <MX_ADC1_Init+0x204>)
 80233f8:	2200      	movs	r2, #0
 80233fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80233fe:	4b72      	ldr	r3, [pc, #456]	; (80235c8 <MX_ADC1_Init+0x204>)
 8023400:	2200      	movs	r2, #0
 8023402:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8023404:	4b70      	ldr	r3, [pc, #448]	; (80235c8 <MX_ADC1_Init+0x204>)
 8023406:	4a72      	ldr	r2, [pc, #456]	; (80235d0 <MX_ADC1_Init+0x20c>)
 8023408:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 802340a:	4b6f      	ldr	r3, [pc, #444]	; (80235c8 <MX_ADC1_Init+0x204>)
 802340c:	2200      	movs	r2, #0
 802340e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8023410:	4b6d      	ldr	r3, [pc, #436]	; (80235c8 <MX_ADC1_Init+0x204>)
 8023412:	220e      	movs	r2, #14
 8023414:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8023416:	4b6c      	ldr	r3, [pc, #432]	; (80235c8 <MX_ADC1_Init+0x204>)
 8023418:	2201      	movs	r2, #1
 802341a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 802341e:	4b6a      	ldr	r3, [pc, #424]	; (80235c8 <MX_ADC1_Init+0x204>)
 8023420:	2201      	movs	r2, #1
 8023422:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8023424:	4868      	ldr	r0, [pc, #416]	; (80235c8 <MX_ADC1_Init+0x204>)
 8023426:	f003 f801 	bl	802642c <HAL_ADC_Init>
 802342a:	4603      	mov	r3, r0
 802342c:	2b00      	cmp	r3, #0
 802342e:	d001      	beq.n	8023434 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8023430:	f000 fd76 	bl	8023f20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8023434:	2303      	movs	r3, #3
 8023436:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8023438:	2301      	movs	r3, #1
 802343a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 802343c:	2301      	movs	r3, #1
 802343e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023440:	463b      	mov	r3, r7
 8023442:	4619      	mov	r1, r3
 8023444:	4860      	ldr	r0, [pc, #384]	; (80235c8 <MX_ADC1_Init+0x204>)
 8023446:	f003 f945 	bl	80266d4 <HAL_ADC_ConfigChannel>
 802344a:	4603      	mov	r3, r0
 802344c:	2b00      	cmp	r3, #0
 802344e:	d001      	beq.n	8023454 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8023450:	f000 fd66 	bl	8023f20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8023454:	2304      	movs	r3, #4
 8023456:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8023458:	2302      	movs	r3, #2
 802345a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802345c:	463b      	mov	r3, r7
 802345e:	4619      	mov	r1, r3
 8023460:	4859      	ldr	r0, [pc, #356]	; (80235c8 <MX_ADC1_Init+0x204>)
 8023462:	f003 f937 	bl	80266d4 <HAL_ADC_ConfigChannel>
 8023466:	4603      	mov	r3, r0
 8023468:	2b00      	cmp	r3, #0
 802346a:	d001      	beq.n	8023470 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 802346c:	f000 fd58 	bl	8023f20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8023470:	2305      	movs	r3, #5
 8023472:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8023474:	2303      	movs	r3, #3
 8023476:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023478:	463b      	mov	r3, r7
 802347a:	4619      	mov	r1, r3
 802347c:	4852      	ldr	r0, [pc, #328]	; (80235c8 <MX_ADC1_Init+0x204>)
 802347e:	f003 f929 	bl	80266d4 <HAL_ADC_ConfigChannel>
 8023482:	4603      	mov	r3, r0
 8023484:	2b00      	cmp	r3, #0
 8023486:	d001      	beq.n	802348c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8023488:	f000 fd4a 	bl	8023f20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 802348c:	2306      	movs	r3, #6
 802348e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8023490:	2304      	movs	r3, #4
 8023492:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023494:	463b      	mov	r3, r7
 8023496:	4619      	mov	r1, r3
 8023498:	484b      	ldr	r0, [pc, #300]	; (80235c8 <MX_ADC1_Init+0x204>)
 802349a:	f003 f91b 	bl	80266d4 <HAL_ADC_ConfigChannel>
 802349e:	4603      	mov	r3, r0
 80234a0:	2b00      	cmp	r3, #0
 80234a2:	d001      	beq.n	80234a8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80234a4:	f000 fd3c 	bl	8023f20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80234a8:	2307      	movs	r3, #7
 80234aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80234ac:	2305      	movs	r3, #5
 80234ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80234b0:	463b      	mov	r3, r7
 80234b2:	4619      	mov	r1, r3
 80234b4:	4844      	ldr	r0, [pc, #272]	; (80235c8 <MX_ADC1_Init+0x204>)
 80234b6:	f003 f90d 	bl	80266d4 <HAL_ADC_ConfigChannel>
 80234ba:	4603      	mov	r3, r0
 80234bc:	2b00      	cmp	r3, #0
 80234be:	d001      	beq.n	80234c4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80234c0:	f000 fd2e 	bl	8023f20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80234c4:	230e      	movs	r3, #14
 80234c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80234c8:	2306      	movs	r3, #6
 80234ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80234cc:	463b      	mov	r3, r7
 80234ce:	4619      	mov	r1, r3
 80234d0:	483d      	ldr	r0, [pc, #244]	; (80235c8 <MX_ADC1_Init+0x204>)
 80234d2:	f003 f8ff 	bl	80266d4 <HAL_ADC_ConfigChannel>
 80234d6:	4603      	mov	r3, r0
 80234d8:	2b00      	cmp	r3, #0
 80234da:	d001      	beq.n	80234e0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80234dc:	f000 fd20 	bl	8023f20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80234e0:	230f      	movs	r3, #15
 80234e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80234e4:	2307      	movs	r3, #7
 80234e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80234e8:	463b      	mov	r3, r7
 80234ea:	4619      	mov	r1, r3
 80234ec:	4836      	ldr	r0, [pc, #216]	; (80235c8 <MX_ADC1_Init+0x204>)
 80234ee:	f003 f8f1 	bl	80266d4 <HAL_ADC_ConfigChannel>
 80234f2:	4603      	mov	r3, r0
 80234f4:	2b00      	cmp	r3, #0
 80234f6:	d001      	beq.n	80234fc <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80234f8:	f000 fd12 	bl	8023f20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80234fc:	230a      	movs	r3, #10
 80234fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8023500:	2308      	movs	r3, #8
 8023502:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023504:	463b      	mov	r3, r7
 8023506:	4619      	mov	r1, r3
 8023508:	482f      	ldr	r0, [pc, #188]	; (80235c8 <MX_ADC1_Init+0x204>)
 802350a:	f003 f8e3 	bl	80266d4 <HAL_ADC_ConfigChannel>
 802350e:	4603      	mov	r3, r0
 8023510:	2b00      	cmp	r3, #0
 8023512:	d001      	beq.n	8023518 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8023514:	f000 fd04 	bl	8023f20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8023518:	230b      	movs	r3, #11
 802351a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 802351c:	2309      	movs	r3, #9
 802351e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023520:	463b      	mov	r3, r7
 8023522:	4619      	mov	r1, r3
 8023524:	4828      	ldr	r0, [pc, #160]	; (80235c8 <MX_ADC1_Init+0x204>)
 8023526:	f003 f8d5 	bl	80266d4 <HAL_ADC_ConfigChannel>
 802352a:	4603      	mov	r3, r0
 802352c:	2b00      	cmp	r3, #0
 802352e:	d001      	beq.n	8023534 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8023530:	f000 fcf6 	bl	8023f20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8023534:	230c      	movs	r3, #12
 8023536:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8023538:	230a      	movs	r3, #10
 802353a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802353c:	463b      	mov	r3, r7
 802353e:	4619      	mov	r1, r3
 8023540:	4821      	ldr	r0, [pc, #132]	; (80235c8 <MX_ADC1_Init+0x204>)
 8023542:	f003 f8c7 	bl	80266d4 <HAL_ADC_ConfigChannel>
 8023546:	4603      	mov	r3, r0
 8023548:	2b00      	cmp	r3, #0
 802354a:	d001      	beq.n	8023550 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 802354c:	f000 fce8 	bl	8023f20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8023550:	230d      	movs	r3, #13
 8023552:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8023554:	230b      	movs	r3, #11
 8023556:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023558:	463b      	mov	r3, r7
 802355a:	4619      	mov	r1, r3
 802355c:	481a      	ldr	r0, [pc, #104]	; (80235c8 <MX_ADC1_Init+0x204>)
 802355e:	f003 f8b9 	bl	80266d4 <HAL_ADC_ConfigChannel>
 8023562:	4603      	mov	r3, r0
 8023564:	2b00      	cmp	r3, #0
 8023566:	d001      	beq.n	802356c <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8023568:	f000 fcda 	bl	8023f20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 802356c:	2302      	movs	r3, #2
 802356e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8023570:	230c      	movs	r3, #12
 8023572:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023574:	463b      	mov	r3, r7
 8023576:	4619      	mov	r1, r3
 8023578:	4813      	ldr	r0, [pc, #76]	; (80235c8 <MX_ADC1_Init+0x204>)
 802357a:	f003 f8ab 	bl	80266d4 <HAL_ADC_ConfigChannel>
 802357e:	4603      	mov	r3, r0
 8023580:	2b00      	cmp	r3, #0
 8023582:	d001      	beq.n	8023588 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8023584:	f000 fccc 	bl	8023f20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8023588:	2301      	movs	r3, #1
 802358a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 802358c:	230d      	movs	r3, #13
 802358e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023590:	463b      	mov	r3, r7
 8023592:	4619      	mov	r1, r3
 8023594:	480c      	ldr	r0, [pc, #48]	; (80235c8 <MX_ADC1_Init+0x204>)
 8023596:	f003 f89d 	bl	80266d4 <HAL_ADC_ConfigChannel>
 802359a:	4603      	mov	r3, r0
 802359c:	2b00      	cmp	r3, #0
 802359e:	d001      	beq.n	80235a4 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 80235a0:	f000 fcbe 	bl	8023f20 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80235a4:	2300      	movs	r3, #0
 80235a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80235a8:	230e      	movs	r3, #14
 80235aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80235ac:	463b      	mov	r3, r7
 80235ae:	4619      	mov	r1, r3
 80235b0:	4805      	ldr	r0, [pc, #20]	; (80235c8 <MX_ADC1_Init+0x204>)
 80235b2:	f003 f88f 	bl	80266d4 <HAL_ADC_ConfigChannel>
 80235b6:	4603      	mov	r3, r0
 80235b8:	2b00      	cmp	r3, #0
 80235ba:	d001      	beq.n	80235c0 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 80235bc:	f000 fcb0 	bl	8023f20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80235c0:	bf00      	nop
 80235c2:	3710      	adds	r7, #16
 80235c4:	46bd      	mov	sp, r7
 80235c6:	bd80      	pop	{r7, pc}
 80235c8:	200007f0 	.word	0x200007f0
 80235cc:	40012000 	.word	0x40012000
 80235d0:	0f000001 	.word	0x0f000001

080235d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80235d4:	b580      	push	{r7, lr}
 80235d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80235d8:	4b12      	ldr	r3, [pc, #72]	; (8023624 <MX_I2C2_Init+0x50>)
 80235da:	4a13      	ldr	r2, [pc, #76]	; (8023628 <MX_I2C2_Init+0x54>)
 80235dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80235de:	4b11      	ldr	r3, [pc, #68]	; (8023624 <MX_I2C2_Init+0x50>)
 80235e0:	4a12      	ldr	r2, [pc, #72]	; (802362c <MX_I2C2_Init+0x58>)
 80235e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80235e4:	4b0f      	ldr	r3, [pc, #60]	; (8023624 <MX_I2C2_Init+0x50>)
 80235e6:	2200      	movs	r2, #0
 80235e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80235ea:	4b0e      	ldr	r3, [pc, #56]	; (8023624 <MX_I2C2_Init+0x50>)
 80235ec:	2200      	movs	r2, #0
 80235ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80235f0:	4b0c      	ldr	r3, [pc, #48]	; (8023624 <MX_I2C2_Init+0x50>)
 80235f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80235f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80235f8:	4b0a      	ldr	r3, [pc, #40]	; (8023624 <MX_I2C2_Init+0x50>)
 80235fa:	2200      	movs	r2, #0
 80235fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80235fe:	4b09      	ldr	r3, [pc, #36]	; (8023624 <MX_I2C2_Init+0x50>)
 8023600:	2200      	movs	r2, #0
 8023602:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8023604:	4b07      	ldr	r3, [pc, #28]	; (8023624 <MX_I2C2_Init+0x50>)
 8023606:	2200      	movs	r2, #0
 8023608:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 802360a:	4b06      	ldr	r3, [pc, #24]	; (8023624 <MX_I2C2_Init+0x50>)
 802360c:	2200      	movs	r2, #0
 802360e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8023610:	4804      	ldr	r0, [pc, #16]	; (8023624 <MX_I2C2_Init+0x50>)
 8023612:	f004 fc21 	bl	8027e58 <HAL_I2C_Init>
 8023616:	4603      	mov	r3, r0
 8023618:	2b00      	cmp	r3, #0
 802361a:	d001      	beq.n	8023620 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 802361c:	f000 fc80 	bl	8023f20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8023620:	bf00      	nop
 8023622:	bd80      	pop	{r7, pc}
 8023624:	200006c4 	.word	0x200006c4
 8023628:	40005800 	.word	0x40005800
 802362c:	000186a0 	.word	0x000186a0

08023630 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8023630:	b580      	push	{r7, lr}
 8023632:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8023634:	4b17      	ldr	r3, [pc, #92]	; (8023694 <MX_SPI3_Init+0x64>)
 8023636:	4a18      	ldr	r2, [pc, #96]	; (8023698 <MX_SPI3_Init+0x68>)
 8023638:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 802363a:	4b16      	ldr	r3, [pc, #88]	; (8023694 <MX_SPI3_Init+0x64>)
 802363c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8023640:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8023642:	4b14      	ldr	r3, [pc, #80]	; (8023694 <MX_SPI3_Init+0x64>)
 8023644:	2200      	movs	r2, #0
 8023646:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8023648:	4b12      	ldr	r3, [pc, #72]	; (8023694 <MX_SPI3_Init+0x64>)
 802364a:	2200      	movs	r2, #0
 802364c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 802364e:	4b11      	ldr	r3, [pc, #68]	; (8023694 <MX_SPI3_Init+0x64>)
 8023650:	2200      	movs	r2, #0
 8023652:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8023654:	4b0f      	ldr	r3, [pc, #60]	; (8023694 <MX_SPI3_Init+0x64>)
 8023656:	2200      	movs	r2, #0
 8023658:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 802365a:	4b0e      	ldr	r3, [pc, #56]	; (8023694 <MX_SPI3_Init+0x64>)
 802365c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8023660:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8023662:	4b0c      	ldr	r3, [pc, #48]	; (8023694 <MX_SPI3_Init+0x64>)
 8023664:	2238      	movs	r2, #56	; 0x38
 8023666:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8023668:	4b0a      	ldr	r3, [pc, #40]	; (8023694 <MX_SPI3_Init+0x64>)
 802366a:	2200      	movs	r2, #0
 802366c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 802366e:	4b09      	ldr	r3, [pc, #36]	; (8023694 <MX_SPI3_Init+0x64>)
 8023670:	2200      	movs	r2, #0
 8023672:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8023674:	4b07      	ldr	r3, [pc, #28]	; (8023694 <MX_SPI3_Init+0x64>)
 8023676:	2200      	movs	r2, #0
 8023678:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 802367a:	4b06      	ldr	r3, [pc, #24]	; (8023694 <MX_SPI3_Init+0x64>)
 802367c:	220a      	movs	r2, #10
 802367e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8023680:	4804      	ldr	r0, [pc, #16]	; (8023694 <MX_SPI3_Init+0x64>)
 8023682:	f005 f949 	bl	8028918 <HAL_SPI_Init>
 8023686:	4603      	mov	r3, r0
 8023688:	2b00      	cmp	r3, #0
 802368a:	d001      	beq.n	8023690 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 802368c:	f000 fc48 	bl	8023f20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8023690:	bf00      	nop
 8023692:	bd80      	pop	{r7, pc}
 8023694:	20000798 	.word	0x20000798
 8023698:	40003c00 	.word	0x40003c00

0802369c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 802369c:	b580      	push	{r7, lr}
 802369e:	b092      	sub	sp, #72	; 0x48
 80236a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80236a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80236a6:	2200      	movs	r2, #0
 80236a8:	601a      	str	r2, [r3, #0]
 80236aa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80236ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80236b0:	2200      	movs	r2, #0
 80236b2:	601a      	str	r2, [r3, #0]
 80236b4:	605a      	str	r2, [r3, #4]
 80236b6:	609a      	str	r2, [r3, #8]
 80236b8:	60da      	str	r2, [r3, #12]
 80236ba:	611a      	str	r2, [r3, #16]
 80236bc:	615a      	str	r2, [r3, #20]
 80236be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80236c0:	1d3b      	adds	r3, r7, #4
 80236c2:	2220      	movs	r2, #32
 80236c4:	2100      	movs	r1, #0
 80236c6:	4618      	mov	r0, r3
 80236c8:	f006 fedb 	bl	802a482 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80236cc:	4b39      	ldr	r3, [pc, #228]	; (80237b4 <MX_TIM1_Init+0x118>)
 80236ce:	4a3a      	ldr	r2, [pc, #232]	; (80237b8 <MX_TIM1_Init+0x11c>)
 80236d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80236d2:	4b38      	ldr	r3, [pc, #224]	; (80237b4 <MX_TIM1_Init+0x118>)
 80236d4:	2201      	movs	r2, #1
 80236d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80236d8:	4b36      	ldr	r3, [pc, #216]	; (80237b4 <MX_TIM1_Init+0x118>)
 80236da:	2200      	movs	r2, #0
 80236dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1049;
 80236de:	4b35      	ldr	r3, [pc, #212]	; (80237b4 <MX_TIM1_Init+0x118>)
 80236e0:	f240 4219 	movw	r2, #1049	; 0x419
 80236e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80236e6:	4b33      	ldr	r3, [pc, #204]	; (80237b4 <MX_TIM1_Init+0x118>)
 80236e8:	2200      	movs	r2, #0
 80236ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80236ec:	4b31      	ldr	r3, [pc, #196]	; (80237b4 <MX_TIM1_Init+0x118>)
 80236ee:	2200      	movs	r2, #0
 80236f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80236f2:	4b30      	ldr	r3, [pc, #192]	; (80237b4 <MX_TIM1_Init+0x118>)
 80236f4:	2200      	movs	r2, #0
 80236f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80236f8:	482e      	ldr	r0, [pc, #184]	; (80237b4 <MX_TIM1_Init+0x118>)
 80236fa:	f005 feb0 	bl	802945e <HAL_TIM_PWM_Init>
 80236fe:	4603      	mov	r3, r0
 8023700:	2b00      	cmp	r3, #0
 8023702:	d001      	beq.n	8023708 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8023704:	f000 fc0c 	bl	8023f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023708:	2300      	movs	r3, #0
 802370a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802370c:	2300      	movs	r3, #0
 802370e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8023710:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8023714:	4619      	mov	r1, r3
 8023716:	4827      	ldr	r0, [pc, #156]	; (80237b4 <MX_TIM1_Init+0x118>)
 8023718:	f006 fd92 	bl	802a240 <HAL_TIMEx_MasterConfigSynchronization>
 802371c:	4603      	mov	r3, r0
 802371e:	2b00      	cmp	r3, #0
 8023720:	d001      	beq.n	8023726 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8023722:	f000 fbfd 	bl	8023f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023726:	2360      	movs	r3, #96	; 0x60
 8023728:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 802372a:	2300      	movs	r3, #0
 802372c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 802372e:	2300      	movs	r3, #0
 8023730:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8023732:	2300      	movs	r3, #0
 8023734:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8023736:	2300      	movs	r3, #0
 8023738:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 802373a:	2300      	movs	r3, #0
 802373c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 802373e:	2300      	movs	r3, #0
 8023740:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8023742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8023746:	2204      	movs	r2, #4
 8023748:	4619      	mov	r1, r3
 802374a:	481a      	ldr	r0, [pc, #104]	; (80237b4 <MX_TIM1_Init+0x118>)
 802374c:	f006 f8c2 	bl	80298d4 <HAL_TIM_PWM_ConfigChannel>
 8023750:	4603      	mov	r3, r0
 8023752:	2b00      	cmp	r3, #0
 8023754:	d001      	beq.n	802375a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8023756:	f000 fbe3 	bl	8023f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 802375a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802375e:	220c      	movs	r2, #12
 8023760:	4619      	mov	r1, r3
 8023762:	4814      	ldr	r0, [pc, #80]	; (80237b4 <MX_TIM1_Init+0x118>)
 8023764:	f006 f8b6 	bl	80298d4 <HAL_TIM_PWM_ConfigChannel>
 8023768:	4603      	mov	r3, r0
 802376a:	2b00      	cmp	r3, #0
 802376c:	d001      	beq.n	8023772 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 802376e:	f000 fbd7 	bl	8023f20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8023772:	2300      	movs	r3, #0
 8023774:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8023776:	2300      	movs	r3, #0
 8023778:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 802377a:	2300      	movs	r3, #0
 802377c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 802377e:	2300      	movs	r3, #0
 8023780:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8023782:	2300      	movs	r3, #0
 8023784:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8023786:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802378a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 802378c:	2300      	movs	r3, #0
 802378e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8023790:	1d3b      	adds	r3, r7, #4
 8023792:	4619      	mov	r1, r3
 8023794:	4807      	ldr	r0, [pc, #28]	; (80237b4 <MX_TIM1_Init+0x118>)
 8023796:	f006 fdcf 	bl	802a338 <HAL_TIMEx_ConfigBreakDeadTime>
 802379a:	4603      	mov	r3, r0
 802379c:	2b00      	cmp	r3, #0
 802379e:	d001      	beq.n	80237a4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80237a0:	f000 fbbe 	bl	8023f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80237a4:	4803      	ldr	r0, [pc, #12]	; (80237b4 <MX_TIM1_Init+0x118>)
 80237a6:	f002 fa25 	bl	8025bf4 <HAL_TIM_MspPostInit>

}
 80237aa:	bf00      	nop
 80237ac:	3748      	adds	r7, #72	; 0x48
 80237ae:	46bd      	mov	sp, r7
 80237b0:	bd80      	pop	{r7, pc}
 80237b2:	bf00      	nop
 80237b4:	20000918 	.word	0x20000918
 80237b8:	40010000 	.word	0x40010000

080237bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80237bc:	b580      	push	{r7, lr}
 80237be:	b086      	sub	sp, #24
 80237c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80237c2:	f107 0308 	add.w	r3, r7, #8
 80237c6:	2200      	movs	r2, #0
 80237c8:	601a      	str	r2, [r3, #0]
 80237ca:	605a      	str	r2, [r3, #4]
 80237cc:	609a      	str	r2, [r3, #8]
 80237ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80237d0:	463b      	mov	r3, r7
 80237d2:	2200      	movs	r2, #0
 80237d4:	601a      	str	r2, [r3, #0]
 80237d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80237d8:	4b1d      	ldr	r3, [pc, #116]	; (8023850 <MX_TIM2_Init+0x94>)
 80237da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80237de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 80237e0:	4b1b      	ldr	r3, [pc, #108]	; (8023850 <MX_TIM2_Init+0x94>)
 80237e2:	2204      	movs	r2, #4
 80237e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80237e6:	4b1a      	ldr	r3, [pc, #104]	; (8023850 <MX_TIM2_Init+0x94>)
 80237e8:	2200      	movs	r2, #0
 80237ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 104999;
 80237ec:	4b18      	ldr	r3, [pc, #96]	; (8023850 <MX_TIM2_Init+0x94>)
 80237ee:	4a19      	ldr	r2, [pc, #100]	; (8023854 <MX_TIM2_Init+0x98>)
 80237f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80237f2:	4b17      	ldr	r3, [pc, #92]	; (8023850 <MX_TIM2_Init+0x94>)
 80237f4:	2200      	movs	r2, #0
 80237f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80237f8:	4b15      	ldr	r3, [pc, #84]	; (8023850 <MX_TIM2_Init+0x94>)
 80237fa:	2200      	movs	r2, #0
 80237fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80237fe:	4814      	ldr	r0, [pc, #80]	; (8023850 <MX_TIM2_Init+0x94>)
 8023800:	f005 fdde 	bl	80293c0 <HAL_TIM_Base_Init>
 8023804:	4603      	mov	r3, r0
 8023806:	2b00      	cmp	r3, #0
 8023808:	d001      	beq.n	802380e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 802380a:	f000 fb89 	bl	8023f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802380e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023812:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8023814:	f107 0308 	add.w	r3, r7, #8
 8023818:	4619      	mov	r1, r3
 802381a:	480d      	ldr	r0, [pc, #52]	; (8023850 <MX_TIM2_Init+0x94>)
 802381c:	f006 f920 	bl	8029a60 <HAL_TIM_ConfigClockSource>
 8023820:	4603      	mov	r3, r0
 8023822:	2b00      	cmp	r3, #0
 8023824:	d001      	beq.n	802382a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8023826:	f000 fb7b 	bl	8023f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802382a:	2300      	movs	r3, #0
 802382c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802382e:	2300      	movs	r3, #0
 8023830:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8023832:	463b      	mov	r3, r7
 8023834:	4619      	mov	r1, r3
 8023836:	4806      	ldr	r0, [pc, #24]	; (8023850 <MX_TIM2_Init+0x94>)
 8023838:	f006 fd02 	bl	802a240 <HAL_TIMEx_MasterConfigSynchronization>
 802383c:	4603      	mov	r3, r0
 802383e:	2b00      	cmp	r3, #0
 8023840:	d001      	beq.n	8023846 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8023842:	f000 fb6d 	bl	8023f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8023846:	bf00      	nop
 8023848:	3718      	adds	r7, #24
 802384a:	46bd      	mov	sp, r7
 802384c:	bd80      	pop	{r7, pc}
 802384e:	bf00      	nop
 8023850:	20000958 	.word	0x20000958
 8023854:	00019a27 	.word	0x00019a27

08023858 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8023858:	b580      	push	{r7, lr}
 802385a:	b08a      	sub	sp, #40	; 0x28
 802385c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802385e:	f107 0320 	add.w	r3, r7, #32
 8023862:	2200      	movs	r2, #0
 8023864:	601a      	str	r2, [r3, #0]
 8023866:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8023868:	1d3b      	adds	r3, r7, #4
 802386a:	2200      	movs	r2, #0
 802386c:	601a      	str	r2, [r3, #0]
 802386e:	605a      	str	r2, [r3, #4]
 8023870:	609a      	str	r2, [r3, #8]
 8023872:	60da      	str	r2, [r3, #12]
 8023874:	611a      	str	r2, [r3, #16]
 8023876:	615a      	str	r2, [r3, #20]
 8023878:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 802387a:	4b32      	ldr	r3, [pc, #200]	; (8023944 <MX_TIM3_Init+0xec>)
 802387c:	4a32      	ldr	r2, [pc, #200]	; (8023948 <MX_TIM3_Init+0xf0>)
 802387e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8023880:	4b30      	ldr	r3, [pc, #192]	; (8023944 <MX_TIM3_Init+0xec>)
 8023882:	2200      	movs	r2, #0
 8023884:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023886:	4b2f      	ldr	r3, [pc, #188]	; (8023944 <MX_TIM3_Init+0xec>)
 8023888:	2200      	movs	r2, #0
 802388a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 802388c:	4b2d      	ldr	r3, [pc, #180]	; (8023944 <MX_TIM3_Init+0xec>)
 802388e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023892:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023894:	4b2b      	ldr	r3, [pc, #172]	; (8023944 <MX_TIM3_Init+0xec>)
 8023896:	2200      	movs	r2, #0
 8023898:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802389a:	4b2a      	ldr	r3, [pc, #168]	; (8023944 <MX_TIM3_Init+0xec>)
 802389c:	2200      	movs	r2, #0
 802389e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80238a0:	4828      	ldr	r0, [pc, #160]	; (8023944 <MX_TIM3_Init+0xec>)
 80238a2:	f005 fddc 	bl	802945e <HAL_TIM_PWM_Init>
 80238a6:	4603      	mov	r3, r0
 80238a8:	2b00      	cmp	r3, #0
 80238aa:	d001      	beq.n	80238b0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80238ac:	f000 fb38 	bl	8023f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80238b0:	2300      	movs	r3, #0
 80238b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80238b4:	2300      	movs	r3, #0
 80238b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80238b8:	f107 0320 	add.w	r3, r7, #32
 80238bc:	4619      	mov	r1, r3
 80238be:	4821      	ldr	r0, [pc, #132]	; (8023944 <MX_TIM3_Init+0xec>)
 80238c0:	f006 fcbe 	bl	802a240 <HAL_TIMEx_MasterConfigSynchronization>
 80238c4:	4603      	mov	r3, r0
 80238c6:	2b00      	cmp	r3, #0
 80238c8:	d001      	beq.n	80238ce <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80238ca:	f000 fb29 	bl	8023f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80238ce:	2360      	movs	r3, #96	; 0x60
 80238d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80238d2:	2300      	movs	r3, #0
 80238d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80238d6:	2300      	movs	r3, #0
 80238d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80238da:	2300      	movs	r3, #0
 80238dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80238de:	1d3b      	adds	r3, r7, #4
 80238e0:	2200      	movs	r2, #0
 80238e2:	4619      	mov	r1, r3
 80238e4:	4817      	ldr	r0, [pc, #92]	; (8023944 <MX_TIM3_Init+0xec>)
 80238e6:	f005 fff5 	bl	80298d4 <HAL_TIM_PWM_ConfigChannel>
 80238ea:	4603      	mov	r3, r0
 80238ec:	2b00      	cmp	r3, #0
 80238ee:	d001      	beq.n	80238f4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80238f0:	f000 fb16 	bl	8023f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80238f4:	1d3b      	adds	r3, r7, #4
 80238f6:	2204      	movs	r2, #4
 80238f8:	4619      	mov	r1, r3
 80238fa:	4812      	ldr	r0, [pc, #72]	; (8023944 <MX_TIM3_Init+0xec>)
 80238fc:	f005 ffea 	bl	80298d4 <HAL_TIM_PWM_ConfigChannel>
 8023900:	4603      	mov	r3, r0
 8023902:	2b00      	cmp	r3, #0
 8023904:	d001      	beq.n	802390a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8023906:	f000 fb0b 	bl	8023f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 802390a:	1d3b      	adds	r3, r7, #4
 802390c:	2208      	movs	r2, #8
 802390e:	4619      	mov	r1, r3
 8023910:	480c      	ldr	r0, [pc, #48]	; (8023944 <MX_TIM3_Init+0xec>)
 8023912:	f005 ffdf 	bl	80298d4 <HAL_TIM_PWM_ConfigChannel>
 8023916:	4603      	mov	r3, r0
 8023918:	2b00      	cmp	r3, #0
 802391a:	d001      	beq.n	8023920 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 802391c:	f000 fb00 	bl	8023f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8023920:	1d3b      	adds	r3, r7, #4
 8023922:	220c      	movs	r2, #12
 8023924:	4619      	mov	r1, r3
 8023926:	4807      	ldr	r0, [pc, #28]	; (8023944 <MX_TIM3_Init+0xec>)
 8023928:	f005 ffd4 	bl	80298d4 <HAL_TIM_PWM_ConfigChannel>
 802392c:	4603      	mov	r3, r0
 802392e:	2b00      	cmp	r3, #0
 8023930:	d001      	beq.n	8023936 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8023932:	f000 faf5 	bl	8023f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8023936:	4803      	ldr	r0, [pc, #12]	; (8023944 <MX_TIM3_Init+0xec>)
 8023938:	f002 f95c 	bl	8025bf4 <HAL_TIM_MspPostInit>

}
 802393c:	bf00      	nop
 802393e:	3728      	adds	r7, #40	; 0x28
 8023940:	46bd      	mov	sp, r7
 8023942:	bd80      	pop	{r7, pc}
 8023944:	20000758 	.word	0x20000758
 8023948:	40000400 	.word	0x40000400

0802394c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 802394c:	b580      	push	{r7, lr}
 802394e:	b08c      	sub	sp, #48	; 0x30
 8023950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8023952:	f107 030c 	add.w	r3, r7, #12
 8023956:	2224      	movs	r2, #36	; 0x24
 8023958:	2100      	movs	r1, #0
 802395a:	4618      	mov	r0, r3
 802395c:	f006 fd91 	bl	802a482 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023960:	1d3b      	adds	r3, r7, #4
 8023962:	2200      	movs	r2, #0
 8023964:	601a      	str	r2, [r3, #0]
 8023966:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8023968:	4b20      	ldr	r3, [pc, #128]	; (80239ec <MX_TIM4_Init+0xa0>)
 802396a:	4a21      	ldr	r2, [pc, #132]	; (80239f0 <MX_TIM4_Init+0xa4>)
 802396c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 802396e:	4b1f      	ldr	r3, [pc, #124]	; (80239ec <MX_TIM4_Init+0xa0>)
 8023970:	2200      	movs	r2, #0
 8023972:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023974:	4b1d      	ldr	r3, [pc, #116]	; (80239ec <MX_TIM4_Init+0xa0>)
 8023976:	2200      	movs	r2, #0
 8023978:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 802397a:	4b1c      	ldr	r3, [pc, #112]	; (80239ec <MX_TIM4_Init+0xa0>)
 802397c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023980:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023982:	4b1a      	ldr	r3, [pc, #104]	; (80239ec <MX_TIM4_Init+0xa0>)
 8023984:	2200      	movs	r2, #0
 8023986:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023988:	4b18      	ldr	r3, [pc, #96]	; (80239ec <MX_TIM4_Init+0xa0>)
 802398a:	2200      	movs	r2, #0
 802398c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 802398e:	2303      	movs	r3, #3
 8023990:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8023992:	2300      	movs	r3, #0
 8023994:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8023996:	2301      	movs	r3, #1
 8023998:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 802399a:	2300      	movs	r3, #0
 802399c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 802399e:	2300      	movs	r3, #0
 80239a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80239a2:	2300      	movs	r3, #0
 80239a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80239a6:	2301      	movs	r3, #1
 80239a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80239aa:	2300      	movs	r3, #0
 80239ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80239ae:	2300      	movs	r3, #0
 80239b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80239b2:	f107 030c 	add.w	r3, r7, #12
 80239b6:	4619      	mov	r1, r3
 80239b8:	480c      	ldr	r0, [pc, #48]	; (80239ec <MX_TIM4_Init+0xa0>)
 80239ba:	f005 fdb9 	bl	8029530 <HAL_TIM_Encoder_Init>
 80239be:	4603      	mov	r3, r0
 80239c0:	2b00      	cmp	r3, #0
 80239c2:	d001      	beq.n	80239c8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80239c4:	f000 faac 	bl	8023f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80239c8:	2300      	movs	r3, #0
 80239ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80239cc:	2300      	movs	r3, #0
 80239ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80239d0:	1d3b      	adds	r3, r7, #4
 80239d2:	4619      	mov	r1, r3
 80239d4:	4805      	ldr	r0, [pc, #20]	; (80239ec <MX_TIM4_Init+0xa0>)
 80239d6:	f006 fc33 	bl	802a240 <HAL_TIMEx_MasterConfigSynchronization>
 80239da:	4603      	mov	r3, r0
 80239dc:	2b00      	cmp	r3, #0
 80239de:	d001      	beq.n	80239e4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80239e0:	f000 fa9e 	bl	8023f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80239e4:	bf00      	nop
 80239e6:	3730      	adds	r7, #48	; 0x30
 80239e8:	46bd      	mov	sp, r7
 80239ea:	bd80      	pop	{r7, pc}
 80239ec:	20000684 	.word	0x20000684
 80239f0:	40000800 	.word	0x40000800

080239f4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80239f4:	b580      	push	{r7, lr}
 80239f6:	b086      	sub	sp, #24
 80239f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80239fa:	f107 0308 	add.w	r3, r7, #8
 80239fe:	2200      	movs	r2, #0
 8023a00:	601a      	str	r2, [r3, #0]
 8023a02:	605a      	str	r2, [r3, #4]
 8023a04:	609a      	str	r2, [r3, #8]
 8023a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023a08:	463b      	mov	r3, r7
 8023a0a:	2200      	movs	r2, #0
 8023a0c:	601a      	str	r2, [r3, #0]
 8023a0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8023a10:	4b1d      	ldr	r3, [pc, #116]	; (8023a88 <MX_TIM5_Init+0x94>)
 8023a12:	4a1e      	ldr	r2, [pc, #120]	; (8023a8c <MX_TIM5_Init+0x98>)
 8023a14:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4;
 8023a16:	4b1c      	ldr	r3, [pc, #112]	; (8023a88 <MX_TIM5_Init+0x94>)
 8023a18:	2204      	movs	r2, #4
 8023a1a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023a1c:	4b1a      	ldr	r3, [pc, #104]	; (8023a88 <MX_TIM5_Init+0x94>)
 8023a1e:	2200      	movs	r2, #0
 8023a20:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20999;
 8023a22:	4b19      	ldr	r3, [pc, #100]	; (8023a88 <MX_TIM5_Init+0x94>)
 8023a24:	f245 2207 	movw	r2, #20999	; 0x5207
 8023a28:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023a2a:	4b17      	ldr	r3, [pc, #92]	; (8023a88 <MX_TIM5_Init+0x94>)
 8023a2c:	2200      	movs	r2, #0
 8023a2e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023a30:	4b15      	ldr	r3, [pc, #84]	; (8023a88 <MX_TIM5_Init+0x94>)
 8023a32:	2200      	movs	r2, #0
 8023a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8023a36:	4814      	ldr	r0, [pc, #80]	; (8023a88 <MX_TIM5_Init+0x94>)
 8023a38:	f005 fcc2 	bl	80293c0 <HAL_TIM_Base_Init>
 8023a3c:	4603      	mov	r3, r0
 8023a3e:	2b00      	cmp	r3, #0
 8023a40:	d001      	beq.n	8023a46 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8023a42:	f000 fa6d 	bl	8023f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8023a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023a4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8023a4c:	f107 0308 	add.w	r3, r7, #8
 8023a50:	4619      	mov	r1, r3
 8023a52:	480d      	ldr	r0, [pc, #52]	; (8023a88 <MX_TIM5_Init+0x94>)
 8023a54:	f006 f804 	bl	8029a60 <HAL_TIM_ConfigClockSource>
 8023a58:	4603      	mov	r3, r0
 8023a5a:	2b00      	cmp	r3, #0
 8023a5c:	d001      	beq.n	8023a62 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8023a5e:	f000 fa5f 	bl	8023f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023a62:	2300      	movs	r3, #0
 8023a64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023a66:	2300      	movs	r3, #0
 8023a68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8023a6a:	463b      	mov	r3, r7
 8023a6c:	4619      	mov	r1, r3
 8023a6e:	4806      	ldr	r0, [pc, #24]	; (8023a88 <MX_TIM5_Init+0x94>)
 8023a70:	f006 fbe6 	bl	802a240 <HAL_TIMEx_MasterConfigSynchronization>
 8023a74:	4603      	mov	r3, r0
 8023a76:	2b00      	cmp	r3, #0
 8023a78:	d001      	beq.n	8023a7e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8023a7a:	f000 fa51 	bl	8023f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8023a7e:	bf00      	nop
 8023a80:	3718      	adds	r7, #24
 8023a82:	46bd      	mov	sp, r7
 8023a84:	bd80      	pop	{r7, pc}
 8023a86:	bf00      	nop
 8023a88:	20000718 	.word	0x20000718
 8023a8c:	40000c00 	.word	0x40000c00

08023a90 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8023a90:	b580      	push	{r7, lr}
 8023a92:	b082      	sub	sp, #8
 8023a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023a96:	463b      	mov	r3, r7
 8023a98:	2200      	movs	r2, #0
 8023a9a:	601a      	str	r2, [r3, #0]
 8023a9c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8023a9e:	4b15      	ldr	r3, [pc, #84]	; (8023af4 <MX_TIM6_Init+0x64>)
 8023aa0:	4a15      	ldr	r2, [pc, #84]	; (8023af8 <MX_TIM6_Init+0x68>)
 8023aa2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 8023aa4:	4b13      	ldr	r3, [pc, #76]	; (8023af4 <MX_TIM6_Init+0x64>)
 8023aa6:	2204      	movs	r2, #4
 8023aa8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023aaa:	4b12      	ldr	r3, [pc, #72]	; (8023af4 <MX_TIM6_Init+0x64>)
 8023aac:	2200      	movs	r2, #0
 8023aae:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10499;
 8023ab0:	4b10      	ldr	r3, [pc, #64]	; (8023af4 <MX_TIM6_Init+0x64>)
 8023ab2:	f642 1203 	movw	r2, #10499	; 0x2903
 8023ab6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023ab8:	4b0e      	ldr	r3, [pc, #56]	; (8023af4 <MX_TIM6_Init+0x64>)
 8023aba:	2200      	movs	r2, #0
 8023abc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8023abe:	480d      	ldr	r0, [pc, #52]	; (8023af4 <MX_TIM6_Init+0x64>)
 8023ac0:	f005 fc7e 	bl	80293c0 <HAL_TIM_Base_Init>
 8023ac4:	4603      	mov	r3, r0
 8023ac6:	2b00      	cmp	r3, #0
 8023ac8:	d001      	beq.n	8023ace <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8023aca:	f000 fa29 	bl	8023f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023ace:	2300      	movs	r3, #0
 8023ad0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023ad2:	2300      	movs	r3, #0
 8023ad4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8023ad6:	463b      	mov	r3, r7
 8023ad8:	4619      	mov	r1, r3
 8023ada:	4806      	ldr	r0, [pc, #24]	; (8023af4 <MX_TIM6_Init+0x64>)
 8023adc:	f006 fbb0 	bl	802a240 <HAL_TIMEx_MasterConfigSynchronization>
 8023ae0:	4603      	mov	r3, r0
 8023ae2:	2b00      	cmp	r3, #0
 8023ae4:	d001      	beq.n	8023aea <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8023ae6:	f000 fa1b 	bl	8023f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8023aea:	bf00      	nop
 8023aec:	3708      	adds	r7, #8
 8023aee:	46bd      	mov	sp, r7
 8023af0:	bd80      	pop	{r7, pc}
 8023af2:	bf00      	nop
 8023af4:	200008d8 	.word	0x200008d8
 8023af8:	40001000 	.word	0x40001000

08023afc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8023afc:	b580      	push	{r7, lr}
 8023afe:	b082      	sub	sp, #8
 8023b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023b02:	463b      	mov	r3, r7
 8023b04:	2200      	movs	r2, #0
 8023b06:	601a      	str	r2, [r3, #0]
 8023b08:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8023b0a:	4b15      	ldr	r3, [pc, #84]	; (8023b60 <MX_TIM7_Init+0x64>)
 8023b0c:	4a15      	ldr	r2, [pc, #84]	; (8023b64 <MX_TIM7_Init+0x68>)
 8023b0e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 8023b10:	4b13      	ldr	r3, [pc, #76]	; (8023b60 <MX_TIM7_Init+0x64>)
 8023b12:	2204      	movs	r2, #4
 8023b14:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023b16:	4b12      	ldr	r3, [pc, #72]	; (8023b60 <MX_TIM7_Init+0x64>)
 8023b18:	2200      	movs	r2, #0
 8023b1a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1049;
 8023b1c:	4b10      	ldr	r3, [pc, #64]	; (8023b60 <MX_TIM7_Init+0x64>)
 8023b1e:	f240 4219 	movw	r2, #1049	; 0x419
 8023b22:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023b24:	4b0e      	ldr	r3, [pc, #56]	; (8023b60 <MX_TIM7_Init+0x64>)
 8023b26:	2200      	movs	r2, #0
 8023b28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8023b2a:	480d      	ldr	r0, [pc, #52]	; (8023b60 <MX_TIM7_Init+0x64>)
 8023b2c:	f005 fc48 	bl	80293c0 <HAL_TIM_Base_Init>
 8023b30:	4603      	mov	r3, r0
 8023b32:	2b00      	cmp	r3, #0
 8023b34:	d001      	beq.n	8023b3a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8023b36:	f000 f9f3 	bl	8023f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023b3a:	2300      	movs	r3, #0
 8023b3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023b3e:	2300      	movs	r3, #0
 8023b40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8023b42:	463b      	mov	r3, r7
 8023b44:	4619      	mov	r1, r3
 8023b46:	4806      	ldr	r0, [pc, #24]	; (8023b60 <MX_TIM7_Init+0x64>)
 8023b48:	f006 fb7a 	bl	802a240 <HAL_TIMEx_MasterConfigSynchronization>
 8023b4c:	4603      	mov	r3, r0
 8023b4e:	2b00      	cmp	r3, #0
 8023b50:	d001      	beq.n	8023b56 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8023b52:	f000 f9e5 	bl	8023f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8023b56:	bf00      	nop
 8023b58:	3708      	adds	r7, #8
 8023b5a:	46bd      	mov	sp, r7
 8023b5c:	bd80      	pop	{r7, pc}
 8023b5e:	bf00      	nop
 8023b60:	200009d8 	.word	0x200009d8
 8023b64:	40001400 	.word	0x40001400

08023b68 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8023b68:	b580      	push	{r7, lr}
 8023b6a:	b08c      	sub	sp, #48	; 0x30
 8023b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8023b6e:	f107 030c 	add.w	r3, r7, #12
 8023b72:	2224      	movs	r2, #36	; 0x24
 8023b74:	2100      	movs	r1, #0
 8023b76:	4618      	mov	r0, r3
 8023b78:	f006 fc83 	bl	802a482 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023b7c:	1d3b      	adds	r3, r7, #4
 8023b7e:	2200      	movs	r2, #0
 8023b80:	601a      	str	r2, [r3, #0]
 8023b82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8023b84:	4b22      	ldr	r3, [pc, #136]	; (8023c10 <MX_TIM8_Init+0xa8>)
 8023b86:	4a23      	ldr	r2, [pc, #140]	; (8023c14 <MX_TIM8_Init+0xac>)
 8023b88:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8023b8a:	4b21      	ldr	r3, [pc, #132]	; (8023c10 <MX_TIM8_Init+0xa8>)
 8023b8c:	2200      	movs	r2, #0
 8023b8e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023b90:	4b1f      	ldr	r3, [pc, #124]	; (8023c10 <MX_TIM8_Init+0xa8>)
 8023b92:	2200      	movs	r2, #0
 8023b94:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8023b96:	4b1e      	ldr	r3, [pc, #120]	; (8023c10 <MX_TIM8_Init+0xa8>)
 8023b98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023b9c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023b9e:	4b1c      	ldr	r3, [pc, #112]	; (8023c10 <MX_TIM8_Init+0xa8>)
 8023ba0:	2200      	movs	r2, #0
 8023ba2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8023ba4:	4b1a      	ldr	r3, [pc, #104]	; (8023c10 <MX_TIM8_Init+0xa8>)
 8023ba6:	2200      	movs	r2, #0
 8023ba8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023baa:	4b19      	ldr	r3, [pc, #100]	; (8023c10 <MX_TIM8_Init+0xa8>)
 8023bac:	2200      	movs	r2, #0
 8023bae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8023bb0:	2303      	movs	r3, #3
 8023bb2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8023bb4:	2300      	movs	r3, #0
 8023bb6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8023bb8:	2301      	movs	r3, #1
 8023bba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8023bbc:	2300      	movs	r3, #0
 8023bbe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8023bc0:	2300      	movs	r3, #0
 8023bc2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8023bc4:	2300      	movs	r3, #0
 8023bc6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8023bc8:	2301      	movs	r3, #1
 8023bca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8023bcc:	2300      	movs	r3, #0
 8023bce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8023bd0:	2300      	movs	r3, #0
 8023bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8023bd4:	f107 030c 	add.w	r3, r7, #12
 8023bd8:	4619      	mov	r1, r3
 8023bda:	480d      	ldr	r0, [pc, #52]	; (8023c10 <MX_TIM8_Init+0xa8>)
 8023bdc:	f005 fca8 	bl	8029530 <HAL_TIM_Encoder_Init>
 8023be0:	4603      	mov	r3, r0
 8023be2:	2b00      	cmp	r3, #0
 8023be4:	d001      	beq.n	8023bea <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8023be6:	f000 f99b 	bl	8023f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023bea:	2300      	movs	r3, #0
 8023bec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023bee:	2300      	movs	r3, #0
 8023bf0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8023bf2:	1d3b      	adds	r3, r7, #4
 8023bf4:	4619      	mov	r1, r3
 8023bf6:	4806      	ldr	r0, [pc, #24]	; (8023c10 <MX_TIM8_Init+0xa8>)
 8023bf8:	f006 fb22 	bl	802a240 <HAL_TIMEx_MasterConfigSynchronization>
 8023bfc:	4603      	mov	r3, r0
 8023bfe:	2b00      	cmp	r3, #0
 8023c00:	d001      	beq.n	8023c06 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8023c02:	f000 f98d 	bl	8023f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8023c06:	bf00      	nop
 8023c08:	3730      	adds	r7, #48	; 0x30
 8023c0a:	46bd      	mov	sp, r7
 8023c0c:	bd80      	pop	{r7, pc}
 8023c0e:	bf00      	nop
 8023c10:	20000644 	.word	0x20000644
 8023c14:	40010400 	.word	0x40010400

08023c18 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8023c18:	b580      	push	{r7, lr}
 8023c1a:	b088      	sub	sp, #32
 8023c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8023c1e:	1d3b      	adds	r3, r7, #4
 8023c20:	2200      	movs	r2, #0
 8023c22:	601a      	str	r2, [r3, #0]
 8023c24:	605a      	str	r2, [r3, #4]
 8023c26:	609a      	str	r2, [r3, #8]
 8023c28:	60da      	str	r2, [r3, #12]
 8023c2a:	611a      	str	r2, [r3, #16]
 8023c2c:	615a      	str	r2, [r3, #20]
 8023c2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8023c30:	4b1e      	ldr	r3, [pc, #120]	; (8023cac <MX_TIM11_Init+0x94>)
 8023c32:	4a1f      	ldr	r2, [pc, #124]	; (8023cb0 <MX_TIM11_Init+0x98>)
 8023c34:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8023c36:	4b1d      	ldr	r3, [pc, #116]	; (8023cac <MX_TIM11_Init+0x94>)
 8023c38:	2200      	movs	r2, #0
 8023c3a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023c3c:	4b1b      	ldr	r3, [pc, #108]	; (8023cac <MX_TIM11_Init+0x94>)
 8023c3e:	2200      	movs	r2, #0
 8023c40:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1679;
 8023c42:	4b1a      	ldr	r3, [pc, #104]	; (8023cac <MX_TIM11_Init+0x94>)
 8023c44:	f240 628f 	movw	r2, #1679	; 0x68f
 8023c48:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023c4a:	4b18      	ldr	r3, [pc, #96]	; (8023cac <MX_TIM11_Init+0x94>)
 8023c4c:	2200      	movs	r2, #0
 8023c4e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023c50:	4b16      	ldr	r3, [pc, #88]	; (8023cac <MX_TIM11_Init+0x94>)
 8023c52:	2200      	movs	r2, #0
 8023c54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8023c56:	4815      	ldr	r0, [pc, #84]	; (8023cac <MX_TIM11_Init+0x94>)
 8023c58:	f005 fbb2 	bl	80293c0 <HAL_TIM_Base_Init>
 8023c5c:	4603      	mov	r3, r0
 8023c5e:	2b00      	cmp	r3, #0
 8023c60:	d001      	beq.n	8023c66 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8023c62:	f000 f95d 	bl	8023f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8023c66:	4811      	ldr	r0, [pc, #68]	; (8023cac <MX_TIM11_Init+0x94>)
 8023c68:	f005 fbf9 	bl	802945e <HAL_TIM_PWM_Init>
 8023c6c:	4603      	mov	r3, r0
 8023c6e:	2b00      	cmp	r3, #0
 8023c70:	d001      	beq.n	8023c76 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8023c72:	f000 f955 	bl	8023f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023c76:	2360      	movs	r3, #96	; 0x60
 8023c78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8023c7a:	2300      	movs	r3, #0
 8023c7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8023c7e:	2300      	movs	r3, #0
 8023c80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8023c82:	2300      	movs	r3, #0
 8023c84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8023c86:	1d3b      	adds	r3, r7, #4
 8023c88:	2200      	movs	r2, #0
 8023c8a:	4619      	mov	r1, r3
 8023c8c:	4807      	ldr	r0, [pc, #28]	; (8023cac <MX_TIM11_Init+0x94>)
 8023c8e:	f005 fe21 	bl	80298d4 <HAL_TIM_PWM_ConfigChannel>
 8023c92:	4603      	mov	r3, r0
 8023c94:	2b00      	cmp	r3, #0
 8023c96:	d001      	beq.n	8023c9c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8023c98:	f000 f942 	bl	8023f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8023c9c:	4803      	ldr	r0, [pc, #12]	; (8023cac <MX_TIM11_Init+0x94>)
 8023c9e:	f001 ffa9 	bl	8025bf4 <HAL_TIM_MspPostInit>

}
 8023ca2:	bf00      	nop
 8023ca4:	3720      	adds	r7, #32
 8023ca6:	46bd      	mov	sp, r7
 8023ca8:	bd80      	pop	{r7, pc}
 8023caa:	bf00      	nop
 8023cac:	20000838 	.word	0x20000838
 8023cb0:	40014800 	.word	0x40014800

08023cb4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8023cb4:	b580      	push	{r7, lr}
 8023cb6:	b088      	sub	sp, #32
 8023cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8023cba:	1d3b      	adds	r3, r7, #4
 8023cbc:	2200      	movs	r2, #0
 8023cbe:	601a      	str	r2, [r3, #0]
 8023cc0:	605a      	str	r2, [r3, #4]
 8023cc2:	609a      	str	r2, [r3, #8]
 8023cc4:	60da      	str	r2, [r3, #12]
 8023cc6:	611a      	str	r2, [r3, #16]
 8023cc8:	615a      	str	r2, [r3, #20]
 8023cca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8023ccc:	4b1a      	ldr	r3, [pc, #104]	; (8023d38 <MX_TIM12_Init+0x84>)
 8023cce:	4a1b      	ldr	r2, [pc, #108]	; (8023d3c <MX_TIM12_Init+0x88>)
 8023cd0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 880;
 8023cd2:	4b19      	ldr	r3, [pc, #100]	; (8023d38 <MX_TIM12_Init+0x84>)
 8023cd4:	f44f 725c 	mov.w	r2, #880	; 0x370
 8023cd8:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023cda:	4b17      	ldr	r3, [pc, #92]	; (8023d38 <MX_TIM12_Init+0x84>)
 8023cdc:	2200      	movs	r2, #0
 8023cde:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 53;
 8023ce0:	4b15      	ldr	r3, [pc, #84]	; (8023d38 <MX_TIM12_Init+0x84>)
 8023ce2:	2235      	movs	r2, #53	; 0x35
 8023ce4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023ce6:	4b14      	ldr	r3, [pc, #80]	; (8023d38 <MX_TIM12_Init+0x84>)
 8023ce8:	2200      	movs	r2, #0
 8023cea:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023cec:	4b12      	ldr	r3, [pc, #72]	; (8023d38 <MX_TIM12_Init+0x84>)
 8023cee:	2200      	movs	r2, #0
 8023cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8023cf2:	4811      	ldr	r0, [pc, #68]	; (8023d38 <MX_TIM12_Init+0x84>)
 8023cf4:	f005 fbb3 	bl	802945e <HAL_TIM_PWM_Init>
 8023cf8:	4603      	mov	r3, r0
 8023cfa:	2b00      	cmp	r3, #0
 8023cfc:	d001      	beq.n	8023d02 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8023cfe:	f000 f90f 	bl	8023f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023d02:	2360      	movs	r3, #96	; 0x60
 8023d04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8023d06:	2300      	movs	r3, #0
 8023d08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8023d0a:	2300      	movs	r3, #0
 8023d0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8023d0e:	2300      	movs	r3, #0
 8023d10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8023d12:	1d3b      	adds	r3, r7, #4
 8023d14:	2204      	movs	r2, #4
 8023d16:	4619      	mov	r1, r3
 8023d18:	4807      	ldr	r0, [pc, #28]	; (8023d38 <MX_TIM12_Init+0x84>)
 8023d1a:	f005 fddb 	bl	80298d4 <HAL_TIM_PWM_ConfigChannel>
 8023d1e:	4603      	mov	r3, r0
 8023d20:	2b00      	cmp	r3, #0
 8023d22:	d001      	beq.n	8023d28 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8023d24:	f000 f8fc 	bl	8023f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8023d28:	4803      	ldr	r0, [pc, #12]	; (8023d38 <MX_TIM12_Init+0x84>)
 8023d2a:	f001 ff63 	bl	8025bf4 <HAL_TIM_MspPostInit>

}
 8023d2e:	bf00      	nop
 8023d30:	3720      	adds	r7, #32
 8023d32:	46bd      	mov	sp, r7
 8023d34:	bd80      	pop	{r7, pc}
 8023d36:	bf00      	nop
 8023d38:	20000998 	.word	0x20000998
 8023d3c:	40001800 	.word	0x40001800

08023d40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8023d40:	b580      	push	{r7, lr}
 8023d42:	b082      	sub	sp, #8
 8023d44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8023d46:	2300      	movs	r3, #0
 8023d48:	607b      	str	r3, [r7, #4]
 8023d4a:	4b0c      	ldr	r3, [pc, #48]	; (8023d7c <MX_DMA_Init+0x3c>)
 8023d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023d4e:	4a0b      	ldr	r2, [pc, #44]	; (8023d7c <MX_DMA_Init+0x3c>)
 8023d50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8023d54:	6313      	str	r3, [r2, #48]	; 0x30
 8023d56:	4b09      	ldr	r3, [pc, #36]	; (8023d7c <MX_DMA_Init+0x3c>)
 8023d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8023d5e:	607b      	str	r3, [r7, #4]
 8023d60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8023d62:	2200      	movs	r2, #0
 8023d64:	2100      	movs	r1, #0
 8023d66:	2038      	movs	r0, #56	; 0x38
 8023d68:	f003 f82f 	bl	8026dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8023d6c:	2038      	movs	r0, #56	; 0x38
 8023d6e:	f003 f848 	bl	8026e02 <HAL_NVIC_EnableIRQ>

}
 8023d72:	bf00      	nop
 8023d74:	3708      	adds	r7, #8
 8023d76:	46bd      	mov	sp, r7
 8023d78:	bd80      	pop	{r7, pc}
 8023d7a:	bf00      	nop
 8023d7c:	40023800 	.word	0x40023800

08023d80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8023d80:	b580      	push	{r7, lr}
 8023d82:	b08a      	sub	sp, #40	; 0x28
 8023d84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023d86:	f107 0314 	add.w	r3, r7, #20
 8023d8a:	2200      	movs	r2, #0
 8023d8c:	601a      	str	r2, [r3, #0]
 8023d8e:	605a      	str	r2, [r3, #4]
 8023d90:	609a      	str	r2, [r3, #8]
 8023d92:	60da      	str	r2, [r3, #12]
 8023d94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8023d96:	2300      	movs	r3, #0
 8023d98:	613b      	str	r3, [r7, #16]
 8023d9a:	4b5c      	ldr	r3, [pc, #368]	; (8023f0c <MX_GPIO_Init+0x18c>)
 8023d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023d9e:	4a5b      	ldr	r2, [pc, #364]	; (8023f0c <MX_GPIO_Init+0x18c>)
 8023da0:	f043 0304 	orr.w	r3, r3, #4
 8023da4:	6313      	str	r3, [r2, #48]	; 0x30
 8023da6:	4b59      	ldr	r3, [pc, #356]	; (8023f0c <MX_GPIO_Init+0x18c>)
 8023da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023daa:	f003 0304 	and.w	r3, r3, #4
 8023dae:	613b      	str	r3, [r7, #16]
 8023db0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8023db2:	2300      	movs	r3, #0
 8023db4:	60fb      	str	r3, [r7, #12]
 8023db6:	4b55      	ldr	r3, [pc, #340]	; (8023f0c <MX_GPIO_Init+0x18c>)
 8023db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023dba:	4a54      	ldr	r2, [pc, #336]	; (8023f0c <MX_GPIO_Init+0x18c>)
 8023dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8023dc2:	4b52      	ldr	r3, [pc, #328]	; (8023f0c <MX_GPIO_Init+0x18c>)
 8023dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023dca:	60fb      	str	r3, [r7, #12]
 8023dcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8023dce:	2300      	movs	r3, #0
 8023dd0:	60bb      	str	r3, [r7, #8]
 8023dd2:	4b4e      	ldr	r3, [pc, #312]	; (8023f0c <MX_GPIO_Init+0x18c>)
 8023dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023dd6:	4a4d      	ldr	r2, [pc, #308]	; (8023f0c <MX_GPIO_Init+0x18c>)
 8023dd8:	f043 0301 	orr.w	r3, r3, #1
 8023ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8023dde:	4b4b      	ldr	r3, [pc, #300]	; (8023f0c <MX_GPIO_Init+0x18c>)
 8023de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023de2:	f003 0301 	and.w	r3, r3, #1
 8023de6:	60bb      	str	r3, [r7, #8]
 8023de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8023dea:	2300      	movs	r3, #0
 8023dec:	607b      	str	r3, [r7, #4]
 8023dee:	4b47      	ldr	r3, [pc, #284]	; (8023f0c <MX_GPIO_Init+0x18c>)
 8023df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023df2:	4a46      	ldr	r2, [pc, #280]	; (8023f0c <MX_GPIO_Init+0x18c>)
 8023df4:	f043 0302 	orr.w	r3, r3, #2
 8023df8:	6313      	str	r3, [r2, #48]	; 0x30
 8023dfa:	4b44      	ldr	r3, [pc, #272]	; (8023f0c <MX_GPIO_Init+0x18c>)
 8023dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023dfe:	f003 0302 	and.w	r3, r3, #2
 8023e02:	607b      	str	r3, [r7, #4]
 8023e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8023e06:	2300      	movs	r3, #0
 8023e08:	603b      	str	r3, [r7, #0]
 8023e0a:	4b40      	ldr	r3, [pc, #256]	; (8023f0c <MX_GPIO_Init+0x18c>)
 8023e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023e0e:	4a3f      	ldr	r2, [pc, #252]	; (8023f0c <MX_GPIO_Init+0x18c>)
 8023e10:	f043 0308 	orr.w	r3, r3, #8
 8023e14:	6313      	str	r3, [r2, #48]	; 0x30
 8023e16:	4b3d      	ldr	r3, [pc, #244]	; (8023f0c <MX_GPIO_Init+0x18c>)
 8023e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023e1a:	f003 0308 	and.w	r3, r3, #8
 8023e1e:	603b      	str	r3, [r7, #0]
 8023e20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8023e22:	2200      	movs	r2, #0
 8023e24:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8023e28:	4839      	ldr	r0, [pc, #228]	; (8023f10 <MX_GPIO_Init+0x190>)
 8023e2a:	f003 fffb 	bl	8027e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8023e2e:	2201      	movs	r2, #1
 8023e30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8023e34:	4837      	ldr	r0, [pc, #220]	; (8023f14 <MX_GPIO_Init+0x194>)
 8023e36:	f003 fff5 	bl	8027e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8023e3a:	2200      	movs	r2, #0
 8023e3c:	f44f 4105 	mov.w	r1, #34048	; 0x8500
 8023e40:	4835      	ldr	r0, [pc, #212]	; (8023f18 <MX_GPIO_Init+0x198>)
 8023e42:	f003 ffef 	bl	8027e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8023e46:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8023e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023e4c:	2301      	movs	r3, #1
 8023e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023e50:	2300      	movs	r3, #0
 8023e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023e54:	2300      	movs	r3, #0
 8023e56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023e58:	f107 0314 	add.w	r3, r7, #20
 8023e5c:	4619      	mov	r1, r3
 8023e5e:	482c      	ldr	r0, [pc, #176]	; (8023f10 <MX_GPIO_Init+0x190>)
 8023e60:	f003 fe2e 	bl	8027ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8023e64:	2307      	movs	r3, #7
 8023e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023e68:	2300      	movs	r3, #0
 8023e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023e6c:	2301      	movs	r3, #1
 8023e6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023e70:	f107 0314 	add.w	r3, r7, #20
 8023e74:	4619      	mov	r1, r3
 8023e76:	4827      	ldr	r0, [pc, #156]	; (8023f14 <MX_GPIO_Init+0x194>)
 8023e78:	f003 fe22 	bl	8027ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8023e7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023e80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023e82:	2301      	movs	r3, #1
 8023e84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023e86:	2300      	movs	r3, #0
 8023e88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023e8a:	2300      	movs	r3, #0
 8023e8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023e8e:	f107 0314 	add.w	r3, r7, #20
 8023e92:	4619      	mov	r1, r3
 8023e94:	481f      	ldr	r0, [pc, #124]	; (8023f14 <MX_GPIO_Init+0x194>)
 8023e96:	f003 fe13 	bl	8027ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_8;
 8023e9a:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8023e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023ea0:	2300      	movs	r3, #0
 8023ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023ea4:	2300      	movs	r3, #0
 8023ea6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023ea8:	f107 0314 	add.w	r3, r7, #20
 8023eac:	4619      	mov	r1, r3
 8023eae:	4819      	ldr	r0, [pc, #100]	; (8023f14 <MX_GPIO_Init+0x194>)
 8023eb0:	f003 fe06 	bl	8027ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15;
 8023eb4:	f44f 4305 	mov.w	r3, #34048	; 0x8500
 8023eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023eba:	2301      	movs	r3, #1
 8023ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023ebe:	2300      	movs	r3, #0
 8023ec0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023ec2:	2300      	movs	r3, #0
 8023ec4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023ec6:	f107 0314 	add.w	r3, r7, #20
 8023eca:	4619      	mov	r1, r3
 8023ecc:	4812      	ldr	r0, [pc, #72]	; (8023f18 <MX_GPIO_Init+0x198>)
 8023ece:	f003 fdf7 	bl	8027ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8023ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023ed8:	2300      	movs	r3, #0
 8023eda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023edc:	2301      	movs	r3, #1
 8023ede:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023ee0:	f107 0314 	add.w	r3, r7, #20
 8023ee4:	4619      	mov	r1, r3
 8023ee6:	480c      	ldr	r0, [pc, #48]	; (8023f18 <MX_GPIO_Init+0x198>)
 8023ee8:	f003 fdea 	bl	8027ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8023eec:	2304      	movs	r3, #4
 8023eee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023ef0:	2300      	movs	r3, #0
 8023ef2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023ef4:	2300      	movs	r3, #0
 8023ef6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8023ef8:	f107 0314 	add.w	r3, r7, #20
 8023efc:	4619      	mov	r1, r3
 8023efe:	4807      	ldr	r0, [pc, #28]	; (8023f1c <MX_GPIO_Init+0x19c>)
 8023f00:	f003 fdde 	bl	8027ac0 <HAL_GPIO_Init>

}
 8023f04:	bf00      	nop
 8023f06:	3728      	adds	r7, #40	; 0x28
 8023f08:	46bd      	mov	sp, r7
 8023f0a:	bd80      	pop	{r7, pc}
 8023f0c:	40023800 	.word	0x40023800
 8023f10:	40020800 	.word	0x40020800
 8023f14:	40020400 	.word	0x40020400
 8023f18:	40020000 	.word	0x40020000
 8023f1c:	40020c00 	.word	0x40020c00

08023f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8023f20:	b480      	push	{r7}
 8023f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8023f24:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8023f26:	e7fe      	b.n	8023f26 <Error_Handler+0x6>

08023f28 <_ZN5Motor4InitEv>:
#include "motor.hpp"
#include "declare_extern.h"

void Motor::Init()
{
 8023f28:	b580      	push	{r7, lr}
 8023f2a:	b082      	sub	sp, #8
 8023f2c:	af00      	add	r7, sp, #0
 8023f2e:	6078      	str	r0, [r7, #4]
    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 8023f30:	2104      	movs	r1, #4
 8023f32:	4812      	ldr	r0, [pc, #72]	; (8023f7c <_ZN5Motor4InitEv+0x54>)
 8023f34:	f005 fabe 	bl	80294b4 <HAL_TIM_PWM_Start>
 8023f38:	4603      	mov	r3, r0
 8023f3a:	2b00      	cmp	r3, #0
 8023f3c:	bf14      	ite	ne
 8023f3e:	2301      	movne	r3, #1
 8023f40:	2300      	moveq	r3, #0
 8023f42:	b2db      	uxtb	r3, r3
 8023f44:	2b00      	cmp	r3, #0
 8023f46:	d004      	beq.n	8023f52 <_ZN5Motor4InitEv+0x2a>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim1_ch2 = true; // MOTOR_R
 8023f48:	4b0d      	ldr	r3, [pc, #52]	; (8023f80 <_ZN5Motor4InitEv+0x58>)
 8023f4a:	2201      	movs	r2, #1
 8023f4c:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8023f4e:	f7ff ffe7 	bl	8023f20 <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8023f52:	210c      	movs	r1, #12
 8023f54:	4809      	ldr	r0, [pc, #36]	; (8023f7c <_ZN5Motor4InitEv+0x54>)
 8023f56:	f005 faad 	bl	80294b4 <HAL_TIM_PWM_Start>
 8023f5a:	4603      	mov	r3, r0
 8023f5c:	2b00      	cmp	r3, #0
 8023f5e:	bf14      	ite	ne
 8023f60:	2301      	movne	r3, #1
 8023f62:	2300      	moveq	r3, #0
 8023f64:	b2db      	uxtb	r3, r3
 8023f66:	2b00      	cmp	r3, #0
 8023f68:	d004      	beq.n	8023f74 <_ZN5Motor4InitEv+0x4c>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim1_ch4 = true; // MOTOR_L
 8023f6a:	4b06      	ldr	r3, [pc, #24]	; (8023f84 <_ZN5Motor4InitEv+0x5c>)
 8023f6c:	2201      	movs	r2, #1
 8023f6e:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8023f70:	f7ff ffd6 	bl	8023f20 <Error_Handler>
    }
}
 8023f74:	bf00      	nop
 8023f76:	3708      	adds	r7, #8
 8023f78:	46bd      	mov	sp, r7
 8023f7a:	bd80      	pop	{r7, pc}
 8023f7c:	20000918 	.word	0x20000918
 8023f80:	200000bf 	.word	0x200000bf
 8023f84:	200000c0 	.word	0x200000c0

08023f88 <_ZN5Motor5DriveEff>:

void Motor::Drive(float translation_ratio, float rotation_ratio)
{
 8023f88:	b580      	push	{r7, lr}
 8023f8a:	b08a      	sub	sp, #40	; 0x28
 8023f8c:	af00      	add	r7, sp, #0
 8023f8e:	60f8      	str	r0, [r7, #12]
 8023f90:	ed87 0a02 	vstr	s0, [r7, #8]
 8023f94:	edc7 0a01 	vstr	s1, [r7, #4]
#ifdef DEBUG_MODE
    g_translation_ratio = translation_ratio;
 8023f98:	4a89      	ldr	r2, [pc, #548]	; (80241c0 <_ZN5Motor5DriveEff+0x238>)
 8023f9a:	68bb      	ldr	r3, [r7, #8]
 8023f9c:	6013      	str	r3, [r2, #0]
    g_rotation_ratio    = rotation_ratio;
 8023f9e:	4a89      	ldr	r2, [pc, #548]	; (80241c4 <_ZN5Motor5DriveEff+0x23c>)
 8023fa0:	687b      	ldr	r3, [r7, #4]
 8023fa2:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    if(translation_ratio > LIMIT_TRANS_DUTY)       translation_ratio =  LIMIT_TRANS_DUTY;
 8023fa4:	68b8      	ldr	r0, [r7, #8]
 8023fa6:	f7fc f9af 	bl	8020308 <__aeabi_f2d>
 8023faa:	a381      	add	r3, pc, #516	; (adr r3, 80241b0 <_ZN5Motor5DriveEff+0x228>)
 8023fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fb0:	f7fc fc92 	bl	80208d8 <__aeabi_dcmpgt>
 8023fb4:	4603      	mov	r3, r0
 8023fb6:	2b00      	cmp	r3, #0
 8023fb8:	d002      	beq.n	8023fc0 <_ZN5Motor5DriveEff+0x38>
 8023fba:	4b83      	ldr	r3, [pc, #524]	; (80241c8 <_ZN5Motor5DriveEff+0x240>)
 8023fbc:	60bb      	str	r3, [r7, #8]
 8023fbe:	e00c      	b.n	8023fda <_ZN5Motor5DriveEff+0x52>
    else if(translation_ratio < -LIMIT_TRANS_DUTY) translation_ratio = -LIMIT_TRANS_DUTY;
 8023fc0:	68b8      	ldr	r0, [r7, #8]
 8023fc2:	f7fc f9a1 	bl	8020308 <__aeabi_f2d>
 8023fc6:	a37c      	add	r3, pc, #496	; (adr r3, 80241b8 <_ZN5Motor5DriveEff+0x230>)
 8023fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fcc:	f7fc fc66 	bl	802089c <__aeabi_dcmplt>
 8023fd0:	4603      	mov	r3, r0
 8023fd2:	2b00      	cmp	r3, #0
 8023fd4:	d001      	beq.n	8023fda <_ZN5Motor5DriveEff+0x52>
 8023fd6:	4b7d      	ldr	r3, [pc, #500]	; (80241cc <_ZN5Motor5DriveEff+0x244>)
 8023fd8:	60bb      	str	r3, [r7, #8]

    float sum = translation_ratio + rotation_ratio;
 8023fda:	ed97 7a02 	vldr	s14, [r7, #8]
 8023fde:	edd7 7a01 	vldr	s15, [r7, #4]
 8023fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023fe6:	edc7 7a06 	vstr	s15, [r7, #24]
    float excess = 0;
 8023fea:	f04f 0300 	mov.w	r3, #0
 8023fee:	627b      	str	r3, [r7, #36]	; 0x24

    if(sum > 1.0)       excess = sum - 1.0;
 8023ff0:	edd7 7a06 	vldr	s15, [r7, #24]
 8023ff4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023ff8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024000:	dd08      	ble.n	8024014 <_ZN5Motor5DriveEff+0x8c>
 8024002:	edd7 7a06 	vldr	s15, [r7, #24]
 8024006:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802400a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802400e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8024012:	e010      	b.n	8024036 <_ZN5Motor5DriveEff+0xae>
    else if(sum < -1.0) excess = sum + 1.0;
 8024014:	edd7 7a06 	vldr	s15, [r7, #24]
 8024018:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 802401c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8024020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024024:	d507      	bpl.n	8024036 <_ZN5Motor5DriveEff+0xae>
 8024026:	edd7 7a06 	vldr	s15, [r7, #24]
 802402a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802402e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8024032:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    translation_ratio -= excess;
 8024036:	ed97 7a02 	vldr	s14, [r7, #8]
 802403a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 802403e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8024042:	edc7 7a02 	vstr	s15, [r7, #8]

#ifdef DEBUG_MODE
    g_sum_raito = sum;
 8024046:	4a62      	ldr	r2, [pc, #392]	; (80241d0 <_ZN5Motor5DriveEff+0x248>)
 8024048:	69bb      	ldr	r3, [r7, #24]
 802404a:	6013      	str	r3, [r2, #0]
    g_excess_ratio = excess;
 802404c:	4a61      	ldr	r2, [pc, #388]	; (80241d4 <_ZN5Motor5DriveEff+0x24c>)
 802404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024050:	6013      	str	r3, [r2, #0]
    g_reduced_translation = translation_ratio;
 8024052:	4a61      	ldr	r2, [pc, #388]	; (80241d8 <_ZN5Motor5DriveEff+0x250>)
 8024054:	68bb      	ldr	r3, [r7, #8]
 8024056:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    float duty_l = translation_ratio - rotation_ratio;
 8024058:	ed97 7a02 	vldr	s14, [r7, #8]
 802405c:	edd7 7a01 	vldr	s15, [r7, #4]
 8024060:	ee77 7a67 	vsub.f32	s15, s14, s15
 8024064:	edc7 7a08 	vstr	s15, [r7, #32]
    float duty_r = translation_ratio + rotation_ratio;
 8024068:	ed97 7a02 	vldr	s14, [r7, #8]
 802406c:	edd7 7a01 	vldr	s15, [r7, #4]
 8024070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024074:	edc7 7a07 	vstr	s15, [r7, #28]

    if(duty_l > 1.0)       duty_l =  1.0;
 8024078:	edd7 7a08 	vldr	s15, [r7, #32]
 802407c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024080:	eef4 7ac7 	vcmpe.f32	s15, s14
 8024084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024088:	dd03      	ble.n	8024092 <_ZN5Motor5DriveEff+0x10a>
 802408a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 802408e:	623b      	str	r3, [r7, #32]
 8024090:	e00a      	b.n	80240a8 <_ZN5Motor5DriveEff+0x120>
    else if(duty_l < -1.0) duty_l = -1.0;
 8024092:	edd7 7a08 	vldr	s15, [r7, #32]
 8024096:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 802409a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802409e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80240a2:	d501      	bpl.n	80240a8 <_ZN5Motor5DriveEff+0x120>
 80240a4:	4b4d      	ldr	r3, [pc, #308]	; (80241dc <_ZN5Motor5DriveEff+0x254>)
 80240a6:	623b      	str	r3, [r7, #32]

    if(duty_r > 1.0)       duty_r =  1.0;
 80240a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80240ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80240b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80240b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80240b8:	dd03      	ble.n	80240c2 <_ZN5Motor5DriveEff+0x13a>
 80240ba:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80240be:	61fb      	str	r3, [r7, #28]
 80240c0:	e00a      	b.n	80240d8 <_ZN5Motor5DriveEff+0x150>
    else if(duty_r < -1.0) duty_r = -1.0;
 80240c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80240c6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80240ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80240ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80240d2:	d501      	bpl.n	80240d8 <_ZN5Motor5DriveEff+0x150>
 80240d4:	4b41      	ldr	r3, [pc, #260]	; (80241dc <_ZN5Motor5DriveEff+0x254>)
 80240d6:	61fb      	str	r3, [r7, #28]

#ifdef DEBUG_MODE
    g_duty_l = duty_l;
 80240d8:	4a41      	ldr	r2, [pc, #260]	; (80241e0 <_ZN5Motor5DriveEff+0x258>)
 80240da:	6a3b      	ldr	r3, [r7, #32]
 80240dc:	6013      	str	r3, [r2, #0]
    g_duty_r = duty_r;
 80240de:	4a41      	ldr	r2, [pc, #260]	; (80241e4 <_ZN5Motor5DriveEff+0x25c>)
 80240e0:	69fb      	ldr	r3, [r7, #28]
 80240e2:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    int16_t count_l = static_cast<int16_t>(COUNTER_PERIOD * duty_l);
 80240e4:	edd7 7a08 	vldr	s15, [r7, #32]
 80240e8:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80241e8 <_ZN5Motor5DriveEff+0x260>
 80240ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80240f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80240f4:	ee17 3a90 	vmov	r3, s15
 80240f8:	b21b      	sxth	r3, r3
 80240fa:	82fb      	strh	r3, [r7, #22]
    int16_t count_r = static_cast<int16_t>(COUNTER_PERIOD * duty_r);
 80240fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8024100:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80241e8 <_ZN5Motor5DriveEff+0x260>
 8024104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024108:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802410c:	ee17 3a90 	vmov	r3, s15
 8024110:	b21b      	sxth	r3, r3
 8024112:	82bb      	strh	r3, [r7, #20]

    if(count_l < 0) { count_l *= -1; BACKWARD_L; }
 8024114:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8024118:	2b00      	cmp	r3, #0
 802411a:	da0d      	bge.n	8024138 <_ZN5Motor5DriveEff+0x1b0>
 802411c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8024120:	b29b      	uxth	r3, r3
 8024122:	425b      	negs	r3, r3
 8024124:	b29b      	uxth	r3, r3
 8024126:	b21b      	sxth	r3, r3
 8024128:	82fb      	strh	r3, [r7, #22]
 802412a:	2200      	movs	r2, #0
 802412c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8024130:	482e      	ldr	r0, [pc, #184]	; (80241ec <_ZN5Motor5DriveEff+0x264>)
 8024132:	f003 fe77 	bl	8027e24 <HAL_GPIO_WritePin>
 8024136:	e009      	b.n	802414c <_ZN5Motor5DriveEff+0x1c4>
    else if(count_l >= 0) FORWARD_L;
 8024138:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802413c:	2b00      	cmp	r3, #0
 802413e:	db05      	blt.n	802414c <_ZN5Motor5DriveEff+0x1c4>
 8024140:	2201      	movs	r2, #1
 8024142:	f44f 7180 	mov.w	r1, #256	; 0x100
 8024146:	4829      	ldr	r0, [pc, #164]	; (80241ec <_ZN5Motor5DriveEff+0x264>)
 8024148:	f003 fe6c 	bl	8027e24 <HAL_GPIO_WritePin>

    if(count_r < 0) { count_r *= -1; BACKWARD_R; }
 802414c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8024150:	2b00      	cmp	r3, #0
 8024152:	da0d      	bge.n	8024170 <_ZN5Motor5DriveEff+0x1e8>
 8024154:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8024158:	b29b      	uxth	r3, r3
 802415a:	425b      	negs	r3, r3
 802415c:	b29b      	uxth	r3, r3
 802415e:	b21b      	sxth	r3, r3
 8024160:	82bb      	strh	r3, [r7, #20]
 8024162:	2201      	movs	r2, #1
 8024164:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8024168:	4820      	ldr	r0, [pc, #128]	; (80241ec <_ZN5Motor5DriveEff+0x264>)
 802416a:	f003 fe5b 	bl	8027e24 <HAL_GPIO_WritePin>
 802416e:	e009      	b.n	8024184 <_ZN5Motor5DriveEff+0x1fc>
    else if(count_r >= 0) FORWARD_R;
 8024170:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8024174:	2b00      	cmp	r3, #0
 8024176:	db05      	blt.n	8024184 <_ZN5Motor5DriveEff+0x1fc>
 8024178:	2200      	movs	r2, #0
 802417a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802417e:	481b      	ldr	r0, [pc, #108]	; (80241ec <_ZN5Motor5DriveEff+0x264>)
 8024180:	f003 fe50 	bl	8027e24 <HAL_GPIO_WritePin>

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, count_l);
 8024184:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8024188:	4b19      	ldr	r3, [pc, #100]	; (80241f0 <_ZN5Motor5DriveEff+0x268>)
 802418a:	681b      	ldr	r3, [r3, #0]
 802418c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, count_r);
 802418e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8024192:	4b17      	ldr	r3, [pc, #92]	; (80241f0 <_ZN5Motor5DriveEff+0x268>)
 8024194:	681b      	ldr	r3, [r3, #0]
 8024196:	641a      	str	r2, [r3, #64]	; 0x40

#ifdef DEBUG_MODE
    g_motor_compare_l = count_l;
 8024198:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802419c:	4b15      	ldr	r3, [pc, #84]	; (80241f4 <_ZN5Motor5DriveEff+0x26c>)
 802419e:	801a      	strh	r2, [r3, #0]
    g_motor_compare_r = count_r;
 80241a0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80241a4:	4b14      	ldr	r3, [pc, #80]	; (80241f8 <_ZN5Motor5DriveEff+0x270>)
 80241a6:	801a      	strh	r2, [r3, #0]
#endif // DEBUG_MODE
 80241a8:	bf00      	nop
 80241aa:	3728      	adds	r7, #40	; 0x28
 80241ac:	46bd      	mov	sp, r7
 80241ae:	bd80      	pop	{r7, pc}
 80241b0:	cccccccd 	.word	0xcccccccd
 80241b4:	3feccccc 	.word	0x3feccccc
 80241b8:	cccccccd 	.word	0xcccccccd
 80241bc:	bfeccccc 	.word	0xbfeccccc
 80241c0:	200002b8 	.word	0x200002b8
 80241c4:	200002bc 	.word	0x200002bc
 80241c8:	3f666666 	.word	0x3f666666
 80241cc:	bf666666 	.word	0xbf666666
 80241d0:	200002c0 	.word	0x200002c0
 80241d4:	200002c4 	.word	0x200002c4
 80241d8:	200002c8 	.word	0x200002c8
 80241dc:	bf800000 	.word	0xbf800000
 80241e0:	200002cc 	.word	0x200002cc
 80241e4:	200002d0 	.word	0x200002d0
 80241e8:	44832000 	.word	0x44832000
 80241ec:	40020000 	.word	0x40020000
 80241f0:	20000918 	.word	0x20000918
 80241f4:	200002d4 	.word	0x200002d4
 80241f8:	200002d6 	.word	0x200002d6

080241fc <_ZN12RotarySwitch5StateEv>:
#include "rotary_switch.hpp"

uint8_t RotarySwitch::State()
{
 80241fc:	b580      	push	{r7, lr}
 80241fe:	b084      	sub	sp, #16
 8024200:	af00      	add	r7, sp, #0
 8024202:	6078      	str	r0, [r7, #4]
    uint8_t switch_state = 0x00;
 8024204:	2300      	movs	r3, #0
 8024206:	73fb      	strb	r3, [r7, #15]

    if(PIN_1 == 0) switch_state |= 0x01;
 8024208:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802420c:	4821      	ldr	r0, [pc, #132]	; (8024294 <_ZN12RotarySwitch5StateEv+0x98>)
 802420e:	f003 fdf1 	bl	8027df4 <HAL_GPIO_ReadPin>
 8024212:	4603      	mov	r3, r0
 8024214:	2b00      	cmp	r3, #0
 8024216:	bf0c      	ite	eq
 8024218:	2301      	moveq	r3, #1
 802421a:	2300      	movne	r3, #0
 802421c:	b2db      	uxtb	r3, r3
 802421e:	2b00      	cmp	r3, #0
 8024220:	d003      	beq.n	802422a <_ZN12RotarySwitch5StateEv+0x2e>
 8024222:	7bfb      	ldrb	r3, [r7, #15]
 8024224:	f043 0301 	orr.w	r3, r3, #1
 8024228:	73fb      	strb	r3, [r7, #15]
    if(PIN_2 == 0) switch_state |= 0x02;
 802422a:	2104      	movs	r1, #4
 802422c:	481a      	ldr	r0, [pc, #104]	; (8024298 <_ZN12RotarySwitch5StateEv+0x9c>)
 802422e:	f003 fde1 	bl	8027df4 <HAL_GPIO_ReadPin>
 8024232:	4603      	mov	r3, r0
 8024234:	2b00      	cmp	r3, #0
 8024236:	bf0c      	ite	eq
 8024238:	2301      	moveq	r3, #1
 802423a:	2300      	movne	r3, #0
 802423c:	b2db      	uxtb	r3, r3
 802423e:	2b00      	cmp	r3, #0
 8024240:	d003      	beq.n	802424a <_ZN12RotarySwitch5StateEv+0x4e>
 8024242:	7bfb      	ldrb	r3, [r7, #15]
 8024244:	f043 0302 	orr.w	r3, r3, #2
 8024248:	73fb      	strb	r3, [r7, #15]
    if(PIN_4 == 0) switch_state |= 0x04;
 802424a:	2102      	movs	r1, #2
 802424c:	4812      	ldr	r0, [pc, #72]	; (8024298 <_ZN12RotarySwitch5StateEv+0x9c>)
 802424e:	f003 fdd1 	bl	8027df4 <HAL_GPIO_ReadPin>
 8024252:	4603      	mov	r3, r0
 8024254:	2b00      	cmp	r3, #0
 8024256:	bf0c      	ite	eq
 8024258:	2301      	moveq	r3, #1
 802425a:	2300      	movne	r3, #0
 802425c:	b2db      	uxtb	r3, r3
 802425e:	2b00      	cmp	r3, #0
 8024260:	d003      	beq.n	802426a <_ZN12RotarySwitch5StateEv+0x6e>
 8024262:	7bfb      	ldrb	r3, [r7, #15]
 8024264:	f043 0304 	orr.w	r3, r3, #4
 8024268:	73fb      	strb	r3, [r7, #15]
    if(PIN_8 == 0) switch_state |= 0x08;
 802426a:	2101      	movs	r1, #1
 802426c:	480a      	ldr	r0, [pc, #40]	; (8024298 <_ZN12RotarySwitch5StateEv+0x9c>)
 802426e:	f003 fdc1 	bl	8027df4 <HAL_GPIO_ReadPin>
 8024272:	4603      	mov	r3, r0
 8024274:	2b00      	cmp	r3, #0
 8024276:	bf0c      	ite	eq
 8024278:	2301      	moveq	r3, #1
 802427a:	2300      	movne	r3, #0
 802427c:	b2db      	uxtb	r3, r3
 802427e:	2b00      	cmp	r3, #0
 8024280:	d003      	beq.n	802428a <_ZN12RotarySwitch5StateEv+0x8e>
 8024282:	7bfb      	ldrb	r3, [r7, #15]
 8024284:	f043 0308 	orr.w	r3, r3, #8
 8024288:	73fb      	strb	r3, [r7, #15]

    return switch_state;
 802428a:	7bfb      	ldrb	r3, [r7, #15]
 802428c:	4618      	mov	r0, r3
 802428e:	3710      	adds	r7, #16
 8024290:	46bd      	mov	sp, r7
 8024292:	bd80      	pop	{r7, pc}
 8024294:	40020000 	.word	0x40020000
 8024298:	40020400 	.word	0x40020400

0802429c <_ZN3RunC1EP7EncoderP5FlashP8Iim42652P3LedP10LineSensorP9LineTraceP6LoggerP5MotorP12RotarySwitchP10SideSensorP15VelocityControl>:
#include "run.hpp"
#include "declare_extern.h"

Run::Run(Encoder *encoder,
 802429c:	b480      	push	{r7}
 802429e:	b085      	sub	sp, #20
 80242a0:	af00      	add	r7, sp, #0
 80242a2:	60f8      	str	r0, [r7, #12]
 80242a4:	60b9      	str	r1, [r7, #8]
 80242a6:	607a      	str	r2, [r7, #4]
 80242a8:	603b      	str	r3, [r7, #0]
         ) : run_mode_(0)
           , switch_interval_wait_timer_(0)
           , switch_interval_wait_enable_(true)
           , switch_interval_led_enable_(true)
           , mode_complete_(true)
           , store_log_failed_(true)
 80242aa:	68fb      	ldr	r3, [r7, #12]
 80242ac:	2200      	movs	r2, #0
 80242ae:	701a      	strb	r2, [r3, #0]
 80242b0:	68fb      	ldr	r3, [r7, #12]
 80242b2:	2200      	movs	r2, #0
 80242b4:	705a      	strb	r2, [r3, #1]
 80242b6:	68fb      	ldr	r3, [r7, #12]
 80242b8:	2201      	movs	r2, #1
 80242ba:	709a      	strb	r2, [r3, #2]
 80242bc:	68fb      	ldr	r3, [r7, #12]
 80242be:	2201      	movs	r2, #1
 80242c0:	70da      	strb	r2, [r3, #3]
 80242c2:	68fb      	ldr	r3, [r7, #12]
 80242c4:	2201      	movs	r2, #1
 80242c6:	711a      	strb	r2, [r3, #4]
 80242c8:	68fb      	ldr	r3, [r7, #12]
 80242ca:	2201      	movs	r2, #1
 80242cc:	715a      	strb	r2, [r3, #5]
{
    encoder_          = encoder;
 80242ce:	68fb      	ldr	r3, [r7, #12]
 80242d0:	68ba      	ldr	r2, [r7, #8]
 80242d2:	609a      	str	r2, [r3, #8]
    flash_            = flash;
 80242d4:	68fb      	ldr	r3, [r7, #12]
 80242d6:	687a      	ldr	r2, [r7, #4]
 80242d8:	60da      	str	r2, [r3, #12]
    iim_42652_        = iim_42652;
 80242da:	68fb      	ldr	r3, [r7, #12]
 80242dc:	683a      	ldr	r2, [r7, #0]
 80242de:	611a      	str	r2, [r3, #16]
    led_              = led;
 80242e0:	68fb      	ldr	r3, [r7, #12]
 80242e2:	69ba      	ldr	r2, [r7, #24]
 80242e4:	615a      	str	r2, [r3, #20]
    line_sensor_      = line_sensor;
 80242e6:	68fb      	ldr	r3, [r7, #12]
 80242e8:	69fa      	ldr	r2, [r7, #28]
 80242ea:	619a      	str	r2, [r3, #24]
    line_trace_       = line_trace;
 80242ec:	68fb      	ldr	r3, [r7, #12]
 80242ee:	6a3a      	ldr	r2, [r7, #32]
 80242f0:	61da      	str	r2, [r3, #28]
    logger_           = logger;
 80242f2:	68fb      	ldr	r3, [r7, #12]
 80242f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80242f6:	621a      	str	r2, [r3, #32]
    motor_            = motor;
 80242f8:	68fb      	ldr	r3, [r7, #12]
 80242fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80242fc:	625a      	str	r2, [r3, #36]	; 0x24
    rotary_switch_    = rotary_switch;
 80242fe:	68fb      	ldr	r3, [r7, #12]
 8024300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024302:	629a      	str	r2, [r3, #40]	; 0x28
    side_sensor_      = side_sensor;
 8024304:	68fb      	ldr	r3, [r7, #12]
 8024306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8024308:	62da      	str	r2, [r3, #44]	; 0x2c
    velocity_control_ = velocity_control;
 802430a:	68fb      	ldr	r3, [r7, #12]
 802430c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802430e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8024310:	68fb      	ldr	r3, [r7, #12]
 8024312:	4618      	mov	r0, r3
 8024314:	3714      	adds	r7, #20
 8024316:	46bd      	mov	sp, r7
 8024318:	f85d 7b04 	ldr.w	r7, [sp], #4
 802431c:	4770      	bx	lr
	...

08024320 <_ZN3Run4InitEv>:

void Run::Init()
{
 8024320:	b580      	push	{r7, lr}
 8024322:	b084      	sub	sp, #16
 8024324:	af00      	add	r7, sp, #0
 8024326:	6078      	str	r0, [r7, #4]
    line_sensor_->Init();
 8024328:	687b      	ldr	r3, [r7, #4]
 802432a:	699b      	ldr	r3, [r3, #24]
 802432c:	4618      	mov	r0, r3
 802432e:	f7fd fc8b 	bl	8021c48 <_ZN10LineSensor4InitEv>
    encoder_->Init();
 8024332:	687b      	ldr	r3, [r7, #4]
 8024334:	689b      	ldr	r3, [r3, #8]
 8024336:	4618      	mov	r0, r3
 8024338:	f7fc fd04 	bl	8020d44 <_ZN7Encoder4InitEv>
    motor_->Init();
 802433c:	687b      	ldr	r3, [r7, #4]
 802433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024340:	4618      	mov	r0, r3
 8024342:	f7ff fdf1 	bl	8023f28 <_ZN5Motor4InitEv>
    uint8_t imu_init = iim_42652_->Init();
 8024346:	687b      	ldr	r3, [r7, #4]
 8024348:	691b      	ldr	r3, [r3, #16]
 802434a:	4618      	mov	r0, r3
 802434c:	f7fc ffd6 	bl	80212fc <_ZN8Iim426524InitEv>
 8024350:	4603      	mov	r3, r0
 8024352:	73bb      	strb	r3, [r7, #14]

    bool flash_erase = true;
 8024354:	2301      	movs	r3, #1
 8024356:	73fb      	strb	r3, [r7, #15]
    uint8_t switch_state = rotary_switch_->State();
 8024358:	687b      	ldr	r3, [r7, #4]
 802435a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802435c:	4618      	mov	r0, r3
 802435e:	f7ff ff4d 	bl	80241fc <_ZN12RotarySwitch5StateEv>
 8024362:	4603      	mov	r3, r0
 8024364:	737b      	strb	r3, [r7, #13]
    if(switch_state == 0x0E)
 8024366:	7b7b      	ldrb	r3, [r7, #13]
 8024368:	2b0e      	cmp	r3, #14
 802436a:	d113      	bne.n	8024394 <_ZN3Run4InitEv+0x74>
    {
        led_->Blink(3, 'R', 'X');
 802436c:	687b      	ldr	r3, [r7, #4]
 802436e:	6958      	ldr	r0, [r3, #20]
 8024370:	2358      	movs	r3, #88	; 0x58
 8024372:	2252      	movs	r2, #82	; 0x52
 8024374:	2103      	movs	r1, #3
 8024376:	f7fd fb51 	bl	8021a1c <_ZN3Led5BlinkEhcc>
        if(!flash_->Clear()) flash_erase = false;
 802437a:	687b      	ldr	r3, [r7, #4]
 802437c:	68db      	ldr	r3, [r3, #12]
 802437e:	4618      	mov	r0, r3
 8024380:	f7fc fde2 	bl	8020f48 <_ZN5Flash5ClearEv>
 8024384:	4603      	mov	r3, r0
 8024386:	f083 0301 	eor.w	r3, r3, #1
 802438a:	b2db      	uxtb	r3, r3
 802438c:	2b00      	cmp	r3, #0
 802438e:	d001      	beq.n	8024394 <_ZN3Run4InitEv+0x74>
 8024390:	2300      	movs	r3, #0
 8024392:	73fb      	strb	r3, [r7, #15]
    }

#ifdef DEBUG_MODE
    g_imu_init = imu_init;
 8024394:	4a19      	ldr	r2, [pc, #100]	; (80243fc <_ZN3Run4InitEv+0xdc>)
 8024396:	7bbb      	ldrb	r3, [r7, #14]
 8024398:	7013      	strb	r3, [r2, #0]
    g_flash_erase = flash_erase;
 802439a:	7bfa      	ldrb	r2, [r7, #15]
 802439c:	4b18      	ldr	r3, [pc, #96]	; (8024400 <_ZN3Run4InitEv+0xe0>)
 802439e:	701a      	strb	r2, [r3, #0]
    g_switch_state = switch_state;
 80243a0:	4a18      	ldr	r2, [pc, #96]	; (8024404 <_ZN3Run4InitEv+0xe4>)
 80243a2:	7b7b      	ldrb	r3, [r7, #13]
 80243a4:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(flash_erase && imu_init == 0x09)
 80243a6:	7bfb      	ldrb	r3, [r7, #15]
 80243a8:	2b00      	cmp	r3, #0
 80243aa:	d012      	beq.n	80243d2 <_ZN3Run4InitEv+0xb2>
 80243ac:	7bbb      	ldrb	r3, [r7, #14]
 80243ae:	2b09      	cmp	r3, #9
 80243b0:	d10f      	bne.n	80243d2 <_ZN3Run4InitEv+0xb2>
    {
        led_->Rainbow(1);
 80243b2:	687b      	ldr	r3, [r7, #4]
 80243b4:	695b      	ldr	r3, [r3, #20]
 80243b6:	2101      	movs	r1, #1
 80243b8:	4618      	mov	r0, r3
 80243ba:	f7fd fb5c 	bl	8021a76 <_ZN3Led7RainbowEh>
        HAL_TIM_Base_Start_IT(&htim2);
 80243be:	4812      	ldr	r0, [pc, #72]	; (8024408 <_ZN3Run4InitEv+0xe8>)
 80243c0:	f005 f829 	bl	8029416 <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start_IT(&htim6);
 80243c4:	4811      	ldr	r0, [pc, #68]	; (802440c <_ZN3Run4InitEv+0xec>)
 80243c6:	f005 f826 	bl	8029416 <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start_IT(&htim7);
 80243ca:	4811      	ldr	r0, [pc, #68]	; (8024410 <_ZN3Run4InitEv+0xf0>)
 80243cc:	f005 f823 	bl	8029416 <HAL_TIM_Base_Start_IT>
    }
    else if(flash_erase) led_->ColorOrder('Y');
    else led_->ColorOrder('R');
}
 80243d0:	e00f      	b.n	80243f2 <_ZN3Run4InitEv+0xd2>
    else if(flash_erase) led_->ColorOrder('Y');
 80243d2:	7bfb      	ldrb	r3, [r7, #15]
 80243d4:	2b00      	cmp	r3, #0
 80243d6:	d006      	beq.n	80243e6 <_ZN3Run4InitEv+0xc6>
 80243d8:	687b      	ldr	r3, [r7, #4]
 80243da:	695b      	ldr	r3, [r3, #20]
 80243dc:	2159      	movs	r1, #89	; 0x59
 80243de:	4618      	mov	r0, r3
 80243e0:	f7fd fa40 	bl	8021864 <_ZN3Led10ColorOrderEc>
}
 80243e4:	e005      	b.n	80243f2 <_ZN3Run4InitEv+0xd2>
    else led_->ColorOrder('R');
 80243e6:	687b      	ldr	r3, [r7, #4]
 80243e8:	695b      	ldr	r3, [r3, #20]
 80243ea:	2152      	movs	r1, #82	; 0x52
 80243ec:	4618      	mov	r0, r3
 80243ee:	f7fd fa39 	bl	8021864 <_ZN3Led10ColorOrderEc>
}
 80243f2:	bf00      	nop
 80243f4:	3710      	adds	r7, #16
 80243f6:	46bd      	mov	sp, r7
 80243f8:	bd80      	pop	{r7, pc}
 80243fa:	bf00      	nop
 80243fc:	20000271 	.word	0x20000271
 8024400:	2000031f 	.word	0x2000031f
 8024404:	2000031c 	.word	0x2000031c
 8024408:	20000958 	.word	0x20000958
 802440c:	200008d8 	.word	0x200008d8
 8024410:	200009d8 	.word	0x200009d8

08024414 <_ZN3Run6Timer7Ev>:

void Run::Timer7()
{
 8024414:	b580      	push	{r7, lr}
 8024416:	b082      	sub	sp, #8
 8024418:	af00      	add	r7, sp, #0
 802441a:	6078      	str	r0, [r7, #4]
    line_sensor_->StoreConsecutiveBuff();
 802441c:	687b      	ldr	r3, [r7, #4]
 802441e:	699b      	ldr	r3, [r3, #24]
 8024420:	4618      	mov	r0, r3
 8024422:	f7fd fc4b 	bl	8021cbc <_ZN10LineSensor20StoreConsecutiveBuffEv>
}
 8024426:	bf00      	nop
 8024428:	3708      	adds	r7, #8
 802442a:	46bd      	mov	sp, r7
 802442c:	bd80      	pop	{r7, pc}
	...

08024430 <_ZN3Run13UpdateRunModeEv>:

void Run::UpdateRunMode()
{
 8024430:	b580      	push	{r7, lr}
 8024432:	b084      	sub	sp, #16
 8024434:	af00      	add	r7, sp, #0
 8024436:	6078      	str	r0, [r7, #4]
    uint8_t switch_state = rotary_switch_->State();
 8024438:	687b      	ldr	r3, [r7, #4]
 802443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802443c:	4618      	mov	r0, r3
 802443e:	f7ff fedd 	bl	80241fc <_ZN12RotarySwitch5StateEv>
 8024442:	4603      	mov	r3, r0
 8024444:	73fb      	strb	r3, [r7, #15]
    static uint8_t pre_switch_state = switch_state;
 8024446:	4b53      	ldr	r3, [pc, #332]	; (8024594 <_ZN3Run13UpdateRunModeEv+0x164>)
 8024448:	781b      	ldrb	r3, [r3, #0]
 802444a:	f3bf 8f5b 	dmb	ish
 802444e:	b2db      	uxtb	r3, r3
 8024450:	f003 0301 	and.w	r3, r3, #1
 8024454:	2b00      	cmp	r3, #0
 8024456:	bf0c      	ite	eq
 8024458:	2301      	moveq	r3, #1
 802445a:	2300      	movne	r3, #0
 802445c:	b2db      	uxtb	r3, r3
 802445e:	2b00      	cmp	r3, #0
 8024460:	d010      	beq.n	8024484 <_ZN3Run13UpdateRunModeEv+0x54>
 8024462:	484c      	ldr	r0, [pc, #304]	; (8024594 <_ZN3Run13UpdateRunModeEv+0x164>)
 8024464:	f005 ffce 	bl	802a404 <__cxa_guard_acquire>
 8024468:	4603      	mov	r3, r0
 802446a:	2b00      	cmp	r3, #0
 802446c:	bf14      	ite	ne
 802446e:	2301      	movne	r3, #1
 8024470:	2300      	moveq	r3, #0
 8024472:	b2db      	uxtb	r3, r3
 8024474:	2b00      	cmp	r3, #0
 8024476:	d005      	beq.n	8024484 <_ZN3Run13UpdateRunModeEv+0x54>
 8024478:	4a47      	ldr	r2, [pc, #284]	; (8024598 <_ZN3Run13UpdateRunModeEv+0x168>)
 802447a:	7bfb      	ldrb	r3, [r7, #15]
 802447c:	7013      	strb	r3, [r2, #0]
 802447e:	4845      	ldr	r0, [pc, #276]	; (8024594 <_ZN3Run13UpdateRunModeEv+0x164>)
 8024480:	f005 ffcc 	bl	802a41c <__cxa_guard_release>
    static bool interval_enable = true;

#ifdef DEBUG_MODE
    g_switch_state = switch_state;
 8024484:	4a45      	ldr	r2, [pc, #276]	; (802459c <_ZN3Run13UpdateRunModeEv+0x16c>)
 8024486:	7bfb      	ldrb	r3, [r7, #15]
 8024488:	7013      	strb	r3, [r2, #0]
    g_interval_enable = interval_enable;
 802448a:	4b45      	ldr	r3, [pc, #276]	; (80245a0 <_ZN3Run13UpdateRunModeEv+0x170>)
 802448c:	781a      	ldrb	r2, [r3, #0]
 802448e:	4b45      	ldr	r3, [pc, #276]	; (80245a4 <_ZN3Run13UpdateRunModeEv+0x174>)
 8024490:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

    if(switch_state != pre_switch_state)
 8024492:	4b41      	ldr	r3, [pc, #260]	; (8024598 <_ZN3Run13UpdateRunModeEv+0x168>)
 8024494:	781b      	ldrb	r3, [r3, #0]
 8024496:	7bfa      	ldrb	r2, [r7, #15]
 8024498:	429a      	cmp	r2, r3
 802449a:	d00f      	beq.n	80244bc <_ZN3Run13UpdateRunModeEv+0x8c>
    {
        SetRunMode(STANDBY);
 802449c:	2100      	movs	r1, #0
 802449e:	6878      	ldr	r0, [r7, #4]
 80244a0:	f000 f882 	bl	80245a8 <_ZN3Run10SetRunModeEh>
        WhenSwitchChange();
 80244a4:	6878      	ldr	r0, [r7, #4]
 80244a6:	f000 f88e 	bl	80245c6 <_ZN3Run16WhenSwitchChangeEv>
        led_->ResetInterrupt();
 80244aa:	687b      	ldr	r3, [r7, #4]
 80244ac:	695b      	ldr	r3, [r3, #20]
 80244ae:	4618      	mov	r0, r3
 80244b0:	f7fd fb6f 	bl	8021b92 <_ZN3Led14ResetInterruptEv>
        interval_enable = true;
 80244b4:	4b3a      	ldr	r3, [pc, #232]	; (80245a0 <_ZN3Run13UpdateRunModeEv+0x170>)
 80244b6:	2201      	movs	r2, #1
 80244b8:	701a      	strb	r2, [r3, #0]
 80244ba:	e064      	b.n	8024586 <_ZN3Run13UpdateRunModeEv+0x156>
    }
    else if(interval_enable)
 80244bc:	4b38      	ldr	r3, [pc, #224]	; (80245a0 <_ZN3Run13UpdateRunModeEv+0x170>)
 80244be:	781b      	ldrb	r3, [r3, #0]
 80244c0:	2b00      	cmp	r3, #0
 80244c2:	d00d      	beq.n	80244e0 <_ZN3Run13UpdateRunModeEv+0xb0>
    {
        SetRunMode(STANDBY);
 80244c4:	2100      	movs	r1, #0
 80244c6:	6878      	ldr	r0, [r7, #4]
 80244c8:	f000 f86e 	bl	80245a8 <_ZN3Run10SetRunModeEh>
        interval_enable = SwitchChangeInterval(switch_state);
 80244cc:	7bfb      	ldrb	r3, [r7, #15]
 80244ce:	4619      	mov	r1, r3
 80244d0:	6878      	ldr	r0, [r7, #4]
 80244d2:	f000 f88b 	bl	80245ec <_ZN3Run20SwitchChangeIntervalEh>
 80244d6:	4603      	mov	r3, r0
 80244d8:	461a      	mov	r2, r3
 80244da:	4b31      	ldr	r3, [pc, #196]	; (80245a0 <_ZN3Run13UpdateRunModeEv+0x170>)
 80244dc:	701a      	strb	r2, [r3, #0]
 80244de:	e052      	b.n	8024586 <_ZN3Run13UpdateRunModeEv+0x156>
    }
    else
    {
        switch(switch_state)
 80244e0:	7bfb      	ldrb	r3, [r7, #15]
 80244e2:	3b01      	subs	r3, #1
 80244e4:	2b0e      	cmp	r3, #14
 80244e6:	d849      	bhi.n	802457c <_ZN3Run13UpdateRunModeEv+0x14c>
 80244e8:	a201      	add	r2, pc, #4	; (adr r2, 80244f0 <_ZN3Run13UpdateRunModeEv+0xc0>)
 80244ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80244ee:	bf00      	nop
 80244f0:	08024555 	.word	0x08024555
 80244f4:	0802455f 	.word	0x0802455f
 80244f8:	0802457d 	.word	0x0802457d
 80244fc:	0802457d 	.word	0x0802457d
 8024500:	0802457d 	.word	0x0802457d
 8024504:	0802457d 	.word	0x0802457d
 8024508:	08024569 	.word	0x08024569
 802450c:	08024573 	.word	0x08024573
 8024510:	0802457d 	.word	0x0802457d
 8024514:	0802457d 	.word	0x0802457d
 8024518:	0802452d 	.word	0x0802452d
 802451c:	08024537 	.word	0x08024537
 8024520:	08024541 	.word	0x08024541
 8024524:	0802457d 	.word	0x0802457d
 8024528:	0802454b 	.word	0x0802454b
        {
#ifdef DEBUG_MODE
            case 0x0B: SetRunMode(VELOCITY_CONTROL_DEBUG); break;
 802452c:	210b      	movs	r1, #11
 802452e:	6878      	ldr	r0, [r7, #4]
 8024530:	f000 f83a 	bl	80245a8 <_ZN3Run10SetRunModeEh>
 8024534:	e027      	b.n	8024586 <_ZN3Run13UpdateRunModeEv+0x156>
            case 0x0C: SetRunMode(LINE_TRACE_DEBUG); break;
 8024536:	210c      	movs	r1, #12
 8024538:	6878      	ldr	r0, [r7, #4]
 802453a:	f000 f835 	bl	80245a8 <_ZN3Run10SetRunModeEh>
 802453e:	e022      	b.n	8024586 <_ZN3Run13UpdateRunModeEv+0x156>
            case 0x0D: SetRunMode(INITIAL_DEBUG); break;
 8024540:	210d      	movs	r1, #13
 8024542:	6878      	ldr	r0, [r7, #4]
 8024544:	f000 f830 	bl	80245a8 <_ZN3Run10SetRunModeEh>
 8024548:	e01d      	b.n	8024586 <_ZN3Run13UpdateRunModeEv+0x156>
#endif // DEBUG_MODE

            case 0x0F: SetRunMode(READY); break;
 802454a:	210f      	movs	r1, #15
 802454c:	6878      	ldr	r0, [r7, #4]
 802454e:	f000 f82b 	bl	80245a8 <_ZN3Run10SetRunModeEh>
 8024552:	e018      	b.n	8024586 <_ZN3Run13UpdateRunModeEv+0x156>
            case 0x01: SetRunMode(FIRST_RUN); break;
 8024554:	2101      	movs	r1, #1
 8024556:	6878      	ldr	r0, [r7, #4]
 8024558:	f000 f826 	bl	80245a8 <_ZN3Run10SetRunModeEh>
 802455c:	e013      	b.n	8024586 <_ZN3Run13UpdateRunModeEv+0x156>
            case 0x02: SetRunMode(SECOND_RUN); break;
 802455e:	2102      	movs	r1, #2
 8024560:	6878      	ldr	r0, [r7, #4]
 8024562:	f000 f821 	bl	80245a8 <_ZN3Run10SetRunModeEh>
 8024566:	e00e      	b.n	8024586 <_ZN3Run13UpdateRunModeEv+0x156>
            case 0x07: SetRunMode(VELOCITY_CONTROL); break;
 8024568:	2107      	movs	r1, #7
 802456a:	6878      	ldr	r0, [r7, #4]
 802456c:	f000 f81c 	bl	80245a8 <_ZN3Run10SetRunModeEh>
 8024570:	e009      	b.n	8024586 <_ZN3Run13UpdateRunModeEv+0x156>
            case 0x08: SetRunMode(LINE_TRACE); break;
 8024572:	2108      	movs	r1, #8
 8024574:	6878      	ldr	r0, [r7, #4]
 8024576:	f000 f817 	bl	80245a8 <_ZN3Run10SetRunModeEh>
 802457a:	e004      	b.n	8024586 <_ZN3Run13UpdateRunModeEv+0x156>
            default:   SetRunMode(STANDBY); break;
 802457c:	2100      	movs	r1, #0
 802457e:	6878      	ldr	r0, [r7, #4]
 8024580:	f000 f812 	bl	80245a8 <_ZN3Run10SetRunModeEh>
 8024584:	bf00      	nop
        }
    }

    pre_switch_state = switch_state;
 8024586:	4a04      	ldr	r2, [pc, #16]	; (8024598 <_ZN3Run13UpdateRunModeEv+0x168>)
 8024588:	7bfb      	ldrb	r3, [r7, #15]
 802458a:	7013      	strb	r3, [r2, #0]
}
 802458c:	bf00      	nop
 802458e:	3710      	adds	r7, #16
 8024590:	46bd      	mov	sp, r7
 8024592:	bd80      	pop	{r7, pc}
 8024594:	20000324 	.word	0x20000324
 8024598:	20000320 	.word	0x20000320
 802459c:	2000031c 	.word	0x2000031c
 80245a0:	20000011 	.word	0x20000011
 80245a4:	20000010 	.word	0x20000010

080245a8 <_ZN3Run10SetRunModeEh>:

void Run::SetRunMode(uint8_t mode)
{
 80245a8:	b480      	push	{r7}
 80245aa:	b083      	sub	sp, #12
 80245ac:	af00      	add	r7, sp, #0
 80245ae:	6078      	str	r0, [r7, #4]
 80245b0:	460b      	mov	r3, r1
 80245b2:	70fb      	strb	r3, [r7, #3]
    run_mode_ = mode;
 80245b4:	687b      	ldr	r3, [r7, #4]
 80245b6:	78fa      	ldrb	r2, [r7, #3]
 80245b8:	701a      	strb	r2, [r3, #0]
}
 80245ba:	bf00      	nop
 80245bc:	370c      	adds	r7, #12
 80245be:	46bd      	mov	sp, r7
 80245c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245c4:	4770      	bx	lr

080245c6 <_ZN3Run16WhenSwitchChangeEv>:

void Run::WhenSwitchChange()
{
 80245c6:	b480      	push	{r7}
 80245c8:	b083      	sub	sp, #12
 80245ca:	af00      	add	r7, sp, #0
 80245cc:	6078      	str	r0, [r7, #4]
    switch_interval_led_enable_ = true;
 80245ce:	687b      	ldr	r3, [r7, #4]
 80245d0:	2201      	movs	r2, #1
 80245d2:	70da      	strb	r2, [r3, #3]
    switch_interval_wait_enable_ = true;
 80245d4:	687b      	ldr	r3, [r7, #4]
 80245d6:	2201      	movs	r2, #1
 80245d8:	709a      	strb	r2, [r3, #2]
    switch_interval_wait_timer_ = 0;
 80245da:	687b      	ldr	r3, [r7, #4]
 80245dc:	2200      	movs	r2, #0
 80245de:	705a      	strb	r2, [r3, #1]
}
 80245e0:	bf00      	nop
 80245e2:	370c      	adds	r7, #12
 80245e4:	46bd      	mov	sp, r7
 80245e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245ea:	4770      	bx	lr

080245ec <_ZN3Run20SwitchChangeIntervalEh>:

bool Run::SwitchChangeInterval(uint8_t switch_state)
{
 80245ec:	b580      	push	{r7, lr}
 80245ee:	b084      	sub	sp, #16
 80245f0:	af00      	add	r7, sp, #0
 80245f2:	6078      	str	r0, [r7, #4]
 80245f4:	460b      	mov	r3, r1
 80245f6:	70fb      	strb	r3, [r7, #3]
    uint8_t wait_timer = switch_interval_wait_timer_;
 80245f8:	687b      	ldr	r3, [r7, #4]
 80245fa:	785b      	ldrb	r3, [r3, #1]
 80245fc:	73fb      	strb	r3, [r7, #15]
    bool wait_enable = switch_interval_wait_enable_;
 80245fe:	687b      	ldr	r3, [r7, #4]
 8024600:	789b      	ldrb	r3, [r3, #2]
 8024602:	73bb      	strb	r3, [r7, #14]
    bool led_enable = switch_interval_led_enable_;
 8024604:	687b      	ldr	r3, [r7, #4]
 8024606:	78db      	ldrb	r3, [r3, #3]
 8024608:	737b      	strb	r3, [r7, #13]
    bool interval_continue = true;
 802460a:	2301      	movs	r3, #1
 802460c:	733b      	strb	r3, [r7, #12]

    if(led_enable)
 802460e:	7b7b      	ldrb	r3, [r7, #13]
 8024610:	2b00      	cmp	r3, #0
 8024612:	f000 8080 	beq.w	8024716 <_ZN3Run20SwitchChangeIntervalEh+0x12a>
    {
        switch(switch_state)
 8024616:	78fb      	ldrb	r3, [r7, #3]
 8024618:	3b01      	subs	r3, #1
 802461a:	2b0e      	cmp	r3, #14
 802461c:	d870      	bhi.n	8024700 <_ZN3Run20SwitchChangeIntervalEh+0x114>
 802461e:	a201      	add	r2, pc, #4	; (adr r2, 8024624 <_ZN3Run20SwitchChangeIntervalEh+0x38>)
 8024620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024624:	080246b1 	.word	0x080246b1
 8024628:	080246c5 	.word	0x080246c5
 802462c:	08024701 	.word	0x08024701
 8024630:	08024701 	.word	0x08024701
 8024634:	08024701 	.word	0x08024701
 8024638:	08024701 	.word	0x08024701
 802463c:	080246d9 	.word	0x080246d9
 8024640:	080246ed 	.word	0x080246ed
 8024644:	08024701 	.word	0x08024701
 8024648:	08024701 	.word	0x08024701
 802464c:	08024661 	.word	0x08024661
 8024650:	08024675 	.word	0x08024675
 8024654:	08024689 	.word	0x08024689
 8024658:	08024701 	.word	0x08024701
 802465c:	0802469d 	.word	0x0802469d
        {
#ifdef DEBUG_MODE
            case 0x0B: led_enable = led_->BlinkInterrupt(3, 'G', 'B'); break;
 8024660:	687b      	ldr	r3, [r7, #4]
 8024662:	6958      	ldr	r0, [r3, #20]
 8024664:	2342      	movs	r3, #66	; 0x42
 8024666:	2247      	movs	r2, #71	; 0x47
 8024668:	2103      	movs	r1, #3
 802466a:	f7fd fa48 	bl	8021afe <_ZN3Led14BlinkInterruptEhcc>
 802466e:	4603      	mov	r3, r0
 8024670:	737b      	strb	r3, [r7, #13]
 8024672:	e061      	b.n	8024738 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
            case 0x0C: led_enable = led_->BlinkInterrupt(3, 'G', 'Y'); break;
 8024674:	687b      	ldr	r3, [r7, #4]
 8024676:	6958      	ldr	r0, [r3, #20]
 8024678:	2359      	movs	r3, #89	; 0x59
 802467a:	2247      	movs	r2, #71	; 0x47
 802467c:	2103      	movs	r1, #3
 802467e:	f7fd fa3e 	bl	8021afe <_ZN3Led14BlinkInterruptEhcc>
 8024682:	4603      	mov	r3, r0
 8024684:	737b      	strb	r3, [r7, #13]
 8024686:	e057      	b.n	8024738 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
            case 0x0D: led_enable = led_->BlinkInterrupt(3, 'G', 'X'); break;
 8024688:	687b      	ldr	r3, [r7, #4]
 802468a:	6958      	ldr	r0, [r3, #20]
 802468c:	2358      	movs	r3, #88	; 0x58
 802468e:	2247      	movs	r2, #71	; 0x47
 8024690:	2103      	movs	r1, #3
 8024692:	f7fd fa34 	bl	8021afe <_ZN3Led14BlinkInterruptEhcc>
 8024696:	4603      	mov	r3, r0
 8024698:	737b      	strb	r3, [r7, #13]
 802469a:	e04d      	b.n	8024738 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
#endif // DEBUG_MODE

            case 0x0F: led_enable = led_->BlinkInterrupt(3, 'Y', 'X'); break;
 802469c:	687b      	ldr	r3, [r7, #4]
 802469e:	6958      	ldr	r0, [r3, #20]
 80246a0:	2358      	movs	r3, #88	; 0x58
 80246a2:	2259      	movs	r2, #89	; 0x59
 80246a4:	2103      	movs	r1, #3
 80246a6:	f7fd fa2a 	bl	8021afe <_ZN3Led14BlinkInterruptEhcc>
 80246aa:	4603      	mov	r3, r0
 80246ac:	737b      	strb	r3, [r7, #13]
 80246ae:	e043      	b.n	8024738 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
            case 0x01: led_enable = led_->BlinkInterrupt(3, 'B', 'X'); break;
 80246b0:	687b      	ldr	r3, [r7, #4]
 80246b2:	6958      	ldr	r0, [r3, #20]
 80246b4:	2358      	movs	r3, #88	; 0x58
 80246b6:	2242      	movs	r2, #66	; 0x42
 80246b8:	2103      	movs	r1, #3
 80246ba:	f7fd fa20 	bl	8021afe <_ZN3Led14BlinkInterruptEhcc>
 80246be:	4603      	mov	r3, r0
 80246c0:	737b      	strb	r3, [r7, #13]
 80246c2:	e039      	b.n	8024738 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
            case 0x02: led_enable = led_->BlinkInterrupt(3, 'M', 'X'); break;
 80246c4:	687b      	ldr	r3, [r7, #4]
 80246c6:	6958      	ldr	r0, [r3, #20]
 80246c8:	2358      	movs	r3, #88	; 0x58
 80246ca:	224d      	movs	r2, #77	; 0x4d
 80246cc:	2103      	movs	r1, #3
 80246ce:	f7fd fa16 	bl	8021afe <_ZN3Led14BlinkInterruptEhcc>
 80246d2:	4603      	mov	r3, r0
 80246d4:	737b      	strb	r3, [r7, #13]
 80246d6:	e02f      	b.n	8024738 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
            case 0x07: led_enable = led_->BlinkInterrupt(3, 'G', 'B'); break;
 80246d8:	687b      	ldr	r3, [r7, #4]
 80246da:	6958      	ldr	r0, [r3, #20]
 80246dc:	2342      	movs	r3, #66	; 0x42
 80246de:	2247      	movs	r2, #71	; 0x47
 80246e0:	2103      	movs	r1, #3
 80246e2:	f7fd fa0c 	bl	8021afe <_ZN3Led14BlinkInterruptEhcc>
 80246e6:	4603      	mov	r3, r0
 80246e8:	737b      	strb	r3, [r7, #13]
 80246ea:	e025      	b.n	8024738 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
            case 0x08: led_enable = led_->BlinkInterrupt(3, 'G', 'Y'); break;
 80246ec:	687b      	ldr	r3, [r7, #4]
 80246ee:	6958      	ldr	r0, [r3, #20]
 80246f0:	2359      	movs	r3, #89	; 0x59
 80246f2:	2247      	movs	r2, #71	; 0x47
 80246f4:	2103      	movs	r1, #3
 80246f6:	f7fd fa02 	bl	8021afe <_ZN3Led14BlinkInterruptEhcc>
 80246fa:	4603      	mov	r3, r0
 80246fc:	737b      	strb	r3, [r7, #13]
 80246fe:	e01b      	b.n	8024738 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
            default:   led_enable = led_->BlinkInterrupt(3, 'X', 'W'); break;
 8024700:	687b      	ldr	r3, [r7, #4]
 8024702:	6958      	ldr	r0, [r3, #20]
 8024704:	2357      	movs	r3, #87	; 0x57
 8024706:	2258      	movs	r2, #88	; 0x58
 8024708:	2103      	movs	r1, #3
 802470a:	f7fd f9f8 	bl	8021afe <_ZN3Led14BlinkInterruptEhcc>
 802470e:	4603      	mov	r3, r0
 8024710:	737b      	strb	r3, [r7, #13]
 8024712:	bf00      	nop
 8024714:	e010      	b.n	8024738 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
        }
    }
    else if(wait_enable)
 8024716:	7bbb      	ldrb	r3, [r7, #14]
 8024718:	2b00      	cmp	r3, #0
 802471a:	d00b      	beq.n	8024734 <_ZN3Run20SwitchChangeIntervalEh+0x148>
    {
        if(wait_timer < SWITCH_INTERVAL_WAIT_TIME)
 802471c:	7bfb      	ldrb	r3, [r7, #15]
 802471e:	2bc7      	cmp	r3, #199	; 0xc7
 8024720:	d805      	bhi.n	802472e <_ZN3Run20SwitchChangeIntervalEh+0x142>
        {
            wait_timer++;
 8024722:	7bfb      	ldrb	r3, [r7, #15]
 8024724:	3301      	adds	r3, #1
 8024726:	73fb      	strb	r3, [r7, #15]
            wait_enable = true;
 8024728:	2301      	movs	r3, #1
 802472a:	73bb      	strb	r3, [r7, #14]
 802472c:	e004      	b.n	8024738 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
        }
        else wait_enable = false;
 802472e:	2300      	movs	r3, #0
 8024730:	73bb      	strb	r3, [r7, #14]
 8024732:	e001      	b.n	8024738 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
    }
    else interval_continue = false;
 8024734:	2300      	movs	r3, #0
 8024736:	733b      	strb	r3, [r7, #12]
    
    switch_interval_led_enable_ = led_enable;
 8024738:	687b      	ldr	r3, [r7, #4]
 802473a:	7b7a      	ldrb	r2, [r7, #13]
 802473c:	70da      	strb	r2, [r3, #3]
    switch_interval_wait_enable_ = wait_enable;
 802473e:	687b      	ldr	r3, [r7, #4]
 8024740:	7bba      	ldrb	r2, [r7, #14]
 8024742:	709a      	strb	r2, [r3, #2]
    switch_interval_wait_timer_ = wait_timer;
 8024744:	687b      	ldr	r3, [r7, #4]
 8024746:	7bfa      	ldrb	r2, [r7, #15]
 8024748:	705a      	strb	r2, [r3, #1]

    return interval_continue;
 802474a:	7b3b      	ldrb	r3, [r7, #12]
}
 802474c:	4618      	mov	r0, r3
 802474e:	3710      	adds	r7, #16
 8024750:	46bd      	mov	sp, r7
 8024752:	bd80      	pop	{r7, pc}

08024754 <_ZN3Run13EmergencyStopEv>:

bool Run::EmergencyStop()
{
 8024754:	b580      	push	{r7, lr}
 8024756:	b084      	sub	sp, #16
 8024758:	af00      	add	r7, sp, #0
 802475a:	6078      	str	r0, [r7, #4]
    static uint8_t emergency_timer = 0;
    bool line_emergency = line_sensor_->GetEmergencyStopFlag();
 802475c:	687b      	ldr	r3, [r7, #4]
 802475e:	699b      	ldr	r3, [r3, #24]
 8024760:	4618      	mov	r0, r3
 8024762:	f7fd fc73 	bl	802204c <_ZN10LineSensor20GetEmergencyStopFlagEv>
 8024766:	4603      	mov	r3, r0
 8024768:	73fb      	strb	r3, [r7, #15]

    if(emergency_timer >= EMERGENCY_STOP_TIME)
 802476a:	4b0e      	ldr	r3, [pc, #56]	; (80247a4 <_ZN3Run13EmergencyStopEv+0x50>)
 802476c:	781b      	ldrb	r3, [r3, #0]
 802476e:	2b04      	cmp	r3, #4
 8024770:	d905      	bls.n	802477e <_ZN3Run13EmergencyStopEv+0x2a>
    {
        SetRunMode(EMERGENCY);
 8024772:	210e      	movs	r1, #14
 8024774:	6878      	ldr	r0, [r7, #4]
 8024776:	f7ff ff17 	bl	80245a8 <_ZN3Run10SetRunModeEh>
        return true;
 802477a:	2301      	movs	r3, #1
 802477c:	e00d      	b.n	802479a <_ZN3Run13EmergencyStopEv+0x46>
    }
    else if(line_emergency) emergency_timer++;
 802477e:	7bfb      	ldrb	r3, [r7, #15]
 8024780:	2b00      	cmp	r3, #0
 8024782:	d006      	beq.n	8024792 <_ZN3Run13EmergencyStopEv+0x3e>
 8024784:	4b07      	ldr	r3, [pc, #28]	; (80247a4 <_ZN3Run13EmergencyStopEv+0x50>)
 8024786:	781b      	ldrb	r3, [r3, #0]
 8024788:	3301      	adds	r3, #1
 802478a:	b2da      	uxtb	r2, r3
 802478c:	4b05      	ldr	r3, [pc, #20]	; (80247a4 <_ZN3Run13EmergencyStopEv+0x50>)
 802478e:	701a      	strb	r2, [r3, #0]
 8024790:	e002      	b.n	8024798 <_ZN3Run13EmergencyStopEv+0x44>
    else emergency_timer = 0;
 8024792:	4b04      	ldr	r3, [pc, #16]	; (80247a4 <_ZN3Run13EmergencyStopEv+0x50>)
 8024794:	2200      	movs	r2, #0
 8024796:	701a      	strb	r2, [r3, #0]

    return false;
 8024798:	2300      	movs	r3, #0
}
 802479a:	4618      	mov	r0, r3
 802479c:	3710      	adds	r7, #16
 802479e:	46bd      	mov	sp, r7
 80247a0:	bd80      	pop	{r7, pc}
 80247a2:	bf00      	nop
 80247a4:	20000328 	.word	0x20000328

080247a8 <_ZN3Run7RunModeEv>:

void Run::RunMode()
{
 80247a8:	b580      	push	{r7, lr}
 80247aa:	b082      	sub	sp, #8
 80247ac:	af00      	add	r7, sp, #0
 80247ae:	6078      	str	r0, [r7, #4]
    switch(run_mode_)
 80247b0:	687b      	ldr	r3, [r7, #4]
 80247b2:	781b      	ldrb	r3, [r3, #0]
 80247b4:	2b20      	cmp	r3, #32
 80247b6:	d875      	bhi.n	80248a4 <_ZN3Run7RunModeEv+0xfc>
 80247b8:	a201      	add	r2, pc, #4	; (adr r2, 80247c0 <_ZN3Run7RunModeEv+0x18>)
 80247ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80247be:	bf00      	nop
 80247c0:	0802486d 	.word	0x0802486d
 80247c4:	08024875 	.word	0x08024875
 80247c8:	08024885 	.word	0x08024885
 80247cc:	080248a5 	.word	0x080248a5
 80247d0:	080248a5 	.word	0x080248a5
 80247d4:	080248a5 	.word	0x080248a5
 80247d8:	080248a5 	.word	0x080248a5
 80247dc:	08024895 	.word	0x08024895
 80247e0:	0802489d 	.word	0x0802489d
 80247e4:	080248a5 	.word	0x080248a5
 80247e8:	080248a5 	.word	0x080248a5
 80247ec:	08024845 	.word	0x08024845
 80247f0:	0802484d 	.word	0x0802484d
 80247f4:	08024855 	.word	0x08024855
 80247f8:	0802485d 	.word	0x0802485d
 80247fc:	08024865 	.word	0x08024865
 8024800:	0802487d 	.word	0x0802487d
 8024804:	080248a5 	.word	0x080248a5
 8024808:	080248a5 	.word	0x080248a5
 802480c:	080248a5 	.word	0x080248a5
 8024810:	080248a5 	.word	0x080248a5
 8024814:	080248a5 	.word	0x080248a5
 8024818:	080248a5 	.word	0x080248a5
 802481c:	080248a5 	.word	0x080248a5
 8024820:	080248a5 	.word	0x080248a5
 8024824:	080248a5 	.word	0x080248a5
 8024828:	080248a5 	.word	0x080248a5
 802482c:	080248a5 	.word	0x080248a5
 8024830:	080248a5 	.word	0x080248a5
 8024834:	080248a5 	.word	0x080248a5
 8024838:	080248a5 	.word	0x080248a5
 802483c:	080248a5 	.word	0x080248a5
 8024840:	0802488d 	.word	0x0802488d
    {
#ifdef DEBUG_MODE
        case VELOCITY_CONTROL_DEBUG: ModeVelocityControlDebug(); break;
 8024844:	6878      	ldr	r0, [r7, #4]
 8024846:	f000 fa05 	bl	8024c54 <_ZN3Run24ModeVelocityControlDebugEv>
 802484a:	e02f      	b.n	80248ac <_ZN3Run7RunModeEv+0x104>
        case LINE_TRACE_DEBUG: ModeLineTraceDebug(); break;
 802484c:	6878      	ldr	r0, [r7, #4]
 802484e:	f000 fa2b 	bl	8024ca8 <_ZN3Run18ModeLineTraceDebugEv>
 8024852:	e02b      	b.n	80248ac <_ZN3Run7RunModeEv+0x104>
        case INITIAL_DEBUG: ModeInitialDebug(); break;
 8024854:	6878      	ldr	r0, [r7, #4]
 8024856:	f000 fa47 	bl	8024ce8 <_ZN3Run16ModeInitialDebugEv>
 802485a:	e027      	b.n	80248ac <_ZN3Run7RunModeEv+0x104>
#endif // DEBUG_MODE

        case EMERGENCY: ModeEmergency(); break;
 802485c:	6878      	ldr	r0, [r7, #4]
 802485e:	f000 f82d 	bl	80248bc <_ZN3Run13ModeEmergencyEv>
 8024862:	e023      	b.n	80248ac <_ZN3Run7RunModeEv+0x104>
        case READY: ModeReady(); break;
 8024864:	6878      	ldr	r0, [r7, #4]
 8024866:	f000 f83d 	bl	80248e4 <_ZN3Run9ModeReadyEv>
 802486a:	e01f      	b.n	80248ac <_ZN3Run7RunModeEv+0x104>
        case STANDBY: ModeStandby(); break;
 802486c:	6878      	ldr	r0, [r7, #4]
 802486e:	f000 f85b 	bl	8024928 <_ZN3Run11ModeStandbyEv>
 8024872:	e01b      	b.n	80248ac <_ZN3Run7RunModeEv+0x104>
        case FIRST_RUN: ModeFirstRun(); break;
 8024874:	6878      	ldr	r0, [r7, #4]
 8024876:	f000 f86b 	bl	8024950 <_ZN3Run12ModeFirstRunEv>
 802487a:	e017      	b.n	80248ac <_ZN3Run7RunModeEv+0x104>
        case FIRST_GOAL: ModeFirstGoal(); break;
 802487c:	6878      	ldr	r0, [r7, #4]
 802487e:	f000 f8d9 	bl	8024a34 <_ZN3Run13ModeFirstGoalEv>
 8024882:	e013      	b.n	80248ac <_ZN3Run7RunModeEv+0x104>
        case SECOND_RUN: ModeSecondRun(); break;
 8024884:	6878      	ldr	r0, [r7, #4]
 8024886:	f000 f8f9 	bl	8024a7c <_ZN3Run13ModeSecondRunEv>
 802488a:	e00f      	b.n	80248ac <_ZN3Run7RunModeEv+0x104>
        case SECOND_GOAL: ModeSecondGoal(); break;
 802488c:	6878      	ldr	r0, [r7, #4]
 802488e:	f000 f949 	bl	8024b24 <_ZN3Run14ModeSecondGoalEv>
 8024892:	e00b      	b.n	80248ac <_ZN3Run7RunModeEv+0x104>
        case VELOCITY_CONTROL: ModeVelocityControl(); break;
 8024894:	6878      	ldr	r0, [r7, #4]
 8024896:	f000 f95f 	bl	8024b58 <_ZN3Run19ModeVelocityControlEv>
 802489a:	e007      	b.n	80248ac <_ZN3Run7RunModeEv+0x104>
        case LINE_TRACE: ModeLineTrace(); break;
 802489c:	6878      	ldr	r0, [r7, #4]
 802489e:	f000 f9a2 	bl	8024be6 <_ZN3Run13ModeLineTraceEv>
 80248a2:	e003      	b.n	80248ac <_ZN3Run7RunModeEv+0x104>
        default: ModeStandby(); break;
 80248a4:	6878      	ldr	r0, [r7, #4]
 80248a6:	f000 f83f 	bl	8024928 <_ZN3Run11ModeStandbyEv>
 80248aa:	bf00      	nop
    }

    mode_complete_ = true;
 80248ac:	687b      	ldr	r3, [r7, #4]
 80248ae:	2201      	movs	r2, #1
 80248b0:	711a      	strb	r2, [r3, #4]
}
 80248b2:	bf00      	nop
 80248b4:	3708      	adds	r7, #8
 80248b6:	46bd      	mov	sp, r7
 80248b8:	bd80      	pop	{r7, pc}
 80248ba:	bf00      	nop

080248bc <_ZN3Run13ModeEmergencyEv>:

void Run::ModeEmergency()
{
 80248bc:	b580      	push	{r7, lr}
 80248be:	b082      	sub	sp, #8
 80248c0:	af00      	add	r7, sp, #0
 80248c2:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 80248c4:	687b      	ldr	r3, [r7, #4]
 80248c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80248c8:	eddf 0a05 	vldr	s1, [pc, #20]	; 80248e0 <_ZN3Run13ModeEmergencyEv+0x24>
 80248cc:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80248e0 <_ZN3Run13ModeEmergencyEv+0x24>
 80248d0:	4618      	mov	r0, r3
 80248d2:	f7ff fb59 	bl	8023f88 <_ZN5Motor5DriveEff>
}
 80248d6:	bf00      	nop
 80248d8:	3708      	adds	r7, #8
 80248da:	46bd      	mov	sp, r7
 80248dc:	bd80      	pop	{r7, pc}
 80248de:	bf00      	nop
 80248e0:	00000000 	.word	0x00000000

080248e4 <_ZN3Run9ModeReadyEv>:

void Run::ModeReady()
{
 80248e4:	b580      	push	{r7, lr}
 80248e6:	b082      	sub	sp, #8
 80248e8:	af00      	add	r7, sp, #0
 80248ea:	6078      	str	r0, [r7, #4]
    line_sensor_->Update();
 80248ec:	687b      	ldr	r3, [r7, #4]
 80248ee:	699b      	ldr	r3, [r3, #24]
 80248f0:	4618      	mov	r0, r3
 80248f2:	f7fd faeb 	bl	8021ecc <_ZN10LineSensor6UpdateEv>
    if(line_sensor_->CheckCalibration()) led_->ColorOrder('X');
 80248f6:	687b      	ldr	r3, [r7, #4]
 80248f8:	699b      	ldr	r3, [r3, #24]
 80248fa:	4618      	mov	r0, r3
 80248fc:	f7fd fc18 	bl	8022130 <_ZN10LineSensor16CheckCalibrationEv>
 8024900:	4603      	mov	r3, r0
 8024902:	2b00      	cmp	r3, #0
 8024904:	d006      	beq.n	8024914 <_ZN3Run9ModeReadyEv+0x30>
 8024906:	687b      	ldr	r3, [r7, #4]
 8024908:	695b      	ldr	r3, [r3, #20]
 802490a:	2158      	movs	r1, #88	; 0x58
 802490c:	4618      	mov	r0, r3
 802490e:	f7fc ffa9 	bl	8021864 <_ZN3Led10ColorOrderEc>
    else led_->ColorOrder('R');
}
 8024912:	e005      	b.n	8024920 <_ZN3Run9ModeReadyEv+0x3c>
    else led_->ColorOrder('R');
 8024914:	687b      	ldr	r3, [r7, #4]
 8024916:	695b      	ldr	r3, [r3, #20]
 8024918:	2152      	movs	r1, #82	; 0x52
 802491a:	4618      	mov	r0, r3
 802491c:	f7fc ffa2 	bl	8021864 <_ZN3Led10ColorOrderEc>
}
 8024920:	bf00      	nop
 8024922:	3708      	adds	r7, #8
 8024924:	46bd      	mov	sp, r7
 8024926:	bd80      	pop	{r7, pc}

08024928 <_ZN3Run11ModeStandbyEv>:

void Run::ModeStandby()
{
 8024928:	b580      	push	{r7, lr}
 802492a:	b082      	sub	sp, #8
 802492c:	af00      	add	r7, sp, #0
 802492e:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 8024930:	687b      	ldr	r3, [r7, #4]
 8024932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024934:	eddf 0a05 	vldr	s1, [pc, #20]	; 802494c <_ZN3Run11ModeStandbyEv+0x24>
 8024938:	ed9f 0a04 	vldr	s0, [pc, #16]	; 802494c <_ZN3Run11ModeStandbyEv+0x24>
 802493c:	4618      	mov	r0, r3
 802493e:	f7ff fb23 	bl	8023f88 <_ZN5Motor5DriveEff>
}
 8024942:	bf00      	nop
 8024944:	3708      	adds	r7, #8
 8024946:	46bd      	mov	sp, r7
 8024948:	bd80      	pop	{r7, pc}
 802494a:	bf00      	nop
 802494c:	00000000 	.word	0x00000000

08024950 <_ZN3Run12ModeFirstRunEv>:

void Run::ModeFirstRun()
{
 8024950:	b580      	push	{r7, lr}
 8024952:	b086      	sub	sp, #24
 8024954:	af00      	add	r7, sp, #0
 8024956:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8024958:	687b      	ldr	r3, [r7, #4]
 802495a:	699b      	ldr	r3, [r3, #24]
 802495c:	4618      	mov	r0, r3
 802495e:	f7fd fab5 	bl	8021ecc <_ZN10LineSensor6UpdateEv>
    encoder_->Update();
 8024962:	687b      	ldr	r3, [r7, #4]
 8024964:	689b      	ldr	r3, [r3, #8]
 8024966:	4618      	mov	r0, r3
 8024968:	f7fc fa1e 	bl	8020da8 <_ZN7Encoder6UpdateEv>
    iim_42652_->Update();
 802496c:	687b      	ldr	r3, [r7, #4]
 802496e:	691b      	ldr	r3, [r3, #16]
 8024970:	4618      	mov	r0, r3
 8024972:	f7fc fe39 	bl	80215e8 <_ZN8Iim426526UpdateEv>
    side_sensor_->IgnoreJudgment();
 8024976:	687b      	ldr	r3, [r7, #4]
 8024978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802497a:	4618      	mov	r0, r3
 802497c:	f000 fc3c 	bl	80251f8 <_ZN10SideSensor14IgnoreJudgmentEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 8024980:	6878      	ldr	r0, [r7, #4]
 8024982:	f7ff fee7 	bl	8024754 <_ZN3Run13EmergencyStopEv>
 8024986:	4603      	mov	r3, r0
 8024988:	2b00      	cmp	r3, #0
 802498a:	d14e      	bne.n	8024a2a <_ZN3Run12ModeFirstRunEv+0xda>
    /* Logging */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 802498c:	687b      	ldr	r3, [r7, #4]
 802498e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024990:	4618      	mov	r0, r3
 8024992:	f000 fe5b 	bl	802564c <_ZN10SideSensor18GetGoalMarkerCountEv>
 8024996:	4603      	mov	r3, r0
 8024998:	75fb      	strb	r3, [r7, #23]
    if(goal_count == 1) logger_->Logging(mode_complete_);
 802499a:	7dfb      	ldrb	r3, [r7, #23]
 802499c:	2b01      	cmp	r3, #1
 802499e:	d107      	bne.n	80249b0 <_ZN3Run12ModeFirstRunEv+0x60>
 80249a0:	687b      	ldr	r3, [r7, #4]
 80249a2:	6a1a      	ldr	r2, [r3, #32]
 80249a4:	687b      	ldr	r3, [r7, #4]
 80249a6:	791b      	ldrb	r3, [r3, #4]
 80249a8:	4619      	mov	r1, r3
 80249aa:	4610      	mov	r0, r2
 80249ac:	f7fd fe3c 	bl	8022628 <_ZN6Logger7LoggingEh>
    mode_complete_ = false;
 80249b0:	687b      	ldr	r3, [r7, #4]
 80249b2:	2200      	movs	r2, #0
 80249b4:	711a      	strb	r2, [r3, #4]
    uint8_t period_success = logger_->StorePeriodicLog();
 80249b6:	687b      	ldr	r3, [r7, #4]
 80249b8:	6a1b      	ldr	r3, [r3, #32]
 80249ba:	4618      	mov	r0, r3
 80249bc:	f7fe f84a 	bl	8022a54 <_ZN6Logger16StorePeriodicLogEv>
 80249c0:	4603      	mov	r3, r0
 80249c2:	75bb      	strb	r3, [r7, #22]
    uint8_t accel_success = logger_->StoreAccelPositionLog();
 80249c4:	687b      	ldr	r3, [r7, #4]
 80249c6:	6a1b      	ldr	r3, [r3, #32]
 80249c8:	4618      	mov	r0, r3
 80249ca:	f7fe f8e1 	bl	8022b90 <_ZN6Logger21StoreAccelPositionLogEv>
 80249ce:	4603      	mov	r3, r0
 80249d0:	757b      	strb	r3, [r7, #21]
    if(period_success != 0 || !accel_success != 0) store_log_failed_ = true;
 80249d2:	7dbb      	ldrb	r3, [r7, #22]
 80249d4:	2b00      	cmp	r3, #0
 80249d6:	d102      	bne.n	80249de <_ZN3Run12ModeFirstRunEv+0x8e>
 80249d8:	7d7b      	ldrb	r3, [r7, #21]
 80249da:	2b00      	cmp	r3, #0
 80249dc:	d102      	bne.n	80249e4 <_ZN3Run12ModeFirstRunEv+0x94>
 80249de:	687b      	ldr	r3, [r7, #4]
 80249e0:	2201      	movs	r2, #1
 80249e2:	715a      	strb	r2, [r3, #5]
    /* Motor control */
    float target_velocity = FirstTargetVelocity(goal_count);
 80249e4:	7dfb      	ldrb	r3, [r7, #23]
 80249e6:	4619      	mov	r1, r3
 80249e8:	6878      	ldr	r0, [r7, #4]
 80249ea:	f000 f989 	bl	8024d00 <_ZN3Run19FirstTargetVelocityEh>
 80249ee:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 80249f2:	687b      	ldr	r3, [r7, #4]
 80249f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80249f6:	ed97 0a04 	vldr	s0, [r7, #16]
 80249fa:	4618      	mov	r0, r3
 80249fc:	f001 fa51 	bl	8025ea2 <_ZN15VelocityControl16DeterminePidGainEf>
 8024a00:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 8024a04:	687b      	ldr	r3, [r7, #4]
 8024a06:	69db      	ldr	r3, [r3, #28]
 8024a08:	ed97 0a04 	vldr	s0, [r7, #16]
 8024a0c:	4618      	mov	r0, r3
 8024a0e:	f7fd fc5b 	bl	80222c8 <_ZN9LineTrace16DeterminePidGainEf>
 8024a12:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 8024a16:	687b      	ldr	r3, [r7, #4]
 8024a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024a1a:	edd7 0a02 	vldr	s1, [r7, #8]
 8024a1e:	ed97 0a03 	vldr	s0, [r7, #12]
 8024a22:	4618      	mov	r0, r3
 8024a24:	f7ff fab0 	bl	8023f88 <_ZN5Motor5DriveEff>
 8024a28:	e000      	b.n	8024a2c <_ZN3Run12ModeFirstRunEv+0xdc>
    if(EmergencyStop()) return;
 8024a2a:	bf00      	nop
}
 8024a2c:	3718      	adds	r7, #24
 8024a2e:	46bd      	mov	sp, r7
 8024a30:	bd80      	pop	{r7, pc}
	...

08024a34 <_ZN3Run13ModeFirstGoalEv>:

void Run::ModeFirstGoal()
{
 8024a34:	b580      	push	{r7, lr}
 8024a36:	b082      	sub	sp, #8
 8024a38:	af00      	add	r7, sp, #0
 8024a3a:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 8024a3c:	687b      	ldr	r3, [r7, #4]
 8024a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024a40:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8024a78 <_ZN3Run13ModeFirstGoalEv+0x44>
 8024a44:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8024a78 <_ZN3Run13ModeFirstGoalEv+0x44>
 8024a48:	4618      	mov	r0, r3
 8024a4a:	f7ff fa9d 	bl	8023f88 <_ZN5Motor5DriveEff>
    if(store_log_failed_) led_->ColorOrder('R');
 8024a4e:	687b      	ldr	r3, [r7, #4]
 8024a50:	795b      	ldrb	r3, [r3, #5]
 8024a52:	2b00      	cmp	r3, #0
 8024a54:	d006      	beq.n	8024a64 <_ZN3Run13ModeFirstGoalEv+0x30>
 8024a56:	687b      	ldr	r3, [r7, #4]
 8024a58:	695b      	ldr	r3, [r3, #20]
 8024a5a:	2152      	movs	r1, #82	; 0x52
 8024a5c:	4618      	mov	r0, r3
 8024a5e:	f7fc ff01 	bl	8021864 <_ZN3Led10ColorOrderEc>
    else led_->ColorOrder('B');
}
 8024a62:	e005      	b.n	8024a70 <_ZN3Run13ModeFirstGoalEv+0x3c>
    else led_->ColorOrder('B');
 8024a64:	687b      	ldr	r3, [r7, #4]
 8024a66:	695b      	ldr	r3, [r3, #20]
 8024a68:	2142      	movs	r1, #66	; 0x42
 8024a6a:	4618      	mov	r0, r3
 8024a6c:	f7fc fefa 	bl	8021864 <_ZN3Led10ColorOrderEc>
}
 8024a70:	bf00      	nop
 8024a72:	3708      	adds	r7, #8
 8024a74:	46bd      	mov	sp, r7
 8024a76:	bd80      	pop	{r7, pc}
 8024a78:	00000000 	.word	0x00000000

08024a7c <_ZN3Run13ModeSecondRunEv>:

void Run::ModeSecondRun()
{
 8024a7c:	b580      	push	{r7, lr}
 8024a7e:	b086      	sub	sp, #24
 8024a80:	af00      	add	r7, sp, #0
 8024a82:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8024a84:	687b      	ldr	r3, [r7, #4]
 8024a86:	699b      	ldr	r3, [r3, #24]
 8024a88:	4618      	mov	r0, r3
 8024a8a:	f7fd fa1f 	bl	8021ecc <_ZN10LineSensor6UpdateEv>
    encoder_->Update();
 8024a8e:	687b      	ldr	r3, [r7, #4]
 8024a90:	689b      	ldr	r3, [r3, #8]
 8024a92:	4618      	mov	r0, r3
 8024a94:	f7fc f988 	bl	8020da8 <_ZN7Encoder6UpdateEv>
    iim_42652_->Update();
 8024a98:	687b      	ldr	r3, [r7, #4]
 8024a9a:	691b      	ldr	r3, [r3, #16]
 8024a9c:	4618      	mov	r0, r3
 8024a9e:	f7fc fda3 	bl	80215e8 <_ZN8Iim426526UpdateEv>
    side_sensor_->IgnoreJudgment();
 8024aa2:	687b      	ldr	r3, [r7, #4]
 8024aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024aa6:	4618      	mov	r0, r3
 8024aa8:	f000 fba6 	bl	80251f8 <_ZN10SideSensor14IgnoreJudgmentEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 8024aac:	6878      	ldr	r0, [r7, #4]
 8024aae:	f7ff fe51 	bl	8024754 <_ZN3Run13EmergencyStopEv>
 8024ab2:	4603      	mov	r3, r0
 8024ab4:	2b00      	cmp	r3, #0
 8024ab6:	d131      	bne.n	8024b1c <_ZN3Run13ModeSecondRunEv+0xa0>
    /* Loading */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 8024ab8:	687b      	ldr	r3, [r7, #4]
 8024aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024abc:	4618      	mov	r0, r3
 8024abe:	f000 fdc5 	bl	802564c <_ZN10SideSensor18GetGoalMarkerCountEv>
 8024ac2:	4603      	mov	r3, r0
 8024ac4:	75fb      	strb	r3, [r7, #23]
    if(goal_count == 1) logger_->Loading();
 8024ac6:	7dfb      	ldrb	r3, [r7, #23]
 8024ac8:	2b01      	cmp	r3, #1
 8024aca:	d104      	bne.n	8024ad6 <_ZN3Run13ModeSecondRunEv+0x5a>
 8024acc:	687b      	ldr	r3, [r7, #4]
 8024ace:	6a1b      	ldr	r3, [r3, #32]
 8024ad0:	4618      	mov	r0, r3
 8024ad2:	f7fe f8e9 	bl	8022ca8 <_ZN6Logger7LoadingEv>
    /* Motor control */
    float target_velocity = SecondTargetVelocity(goal_count);
 8024ad6:	7dfb      	ldrb	r3, [r7, #23]
 8024ad8:	4619      	mov	r1, r3
 8024ada:	6878      	ldr	r0, [r7, #4]
 8024adc:	f000 f936 	bl	8024d4c <_ZN3Run20SecondTargetVelocityEh>
 8024ae0:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 8024ae4:	687b      	ldr	r3, [r7, #4]
 8024ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024ae8:	ed97 0a04 	vldr	s0, [r7, #16]
 8024aec:	4618      	mov	r0, r3
 8024aee:	f001 f9d8 	bl	8025ea2 <_ZN15VelocityControl16DeterminePidGainEf>
 8024af2:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 8024af6:	687b      	ldr	r3, [r7, #4]
 8024af8:	69db      	ldr	r3, [r3, #28]
 8024afa:	ed97 0a04 	vldr	s0, [r7, #16]
 8024afe:	4618      	mov	r0, r3
 8024b00:	f7fd fbe2 	bl	80222c8 <_ZN9LineTrace16DeterminePidGainEf>
 8024b04:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 8024b08:	687b      	ldr	r3, [r7, #4]
 8024b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024b0c:	edd7 0a02 	vldr	s1, [r7, #8]
 8024b10:	ed97 0a03 	vldr	s0, [r7, #12]
 8024b14:	4618      	mov	r0, r3
 8024b16:	f7ff fa37 	bl	8023f88 <_ZN5Motor5DriveEff>
 8024b1a:	e000      	b.n	8024b1e <_ZN3Run13ModeSecondRunEv+0xa2>
    if(EmergencyStop()) return;
 8024b1c:	bf00      	nop
}
 8024b1e:	3718      	adds	r7, #24
 8024b20:	46bd      	mov	sp, r7
 8024b22:	bd80      	pop	{r7, pc}

08024b24 <_ZN3Run14ModeSecondGoalEv>:

void Run::ModeSecondGoal()
{
 8024b24:	b580      	push	{r7, lr}
 8024b26:	b082      	sub	sp, #8
 8024b28:	af00      	add	r7, sp, #0
 8024b2a:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 8024b2c:	687b      	ldr	r3, [r7, #4]
 8024b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024b30:	eddf 0a08 	vldr	s1, [pc, #32]	; 8024b54 <_ZN3Run14ModeSecondGoalEv+0x30>
 8024b34:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8024b54 <_ZN3Run14ModeSecondGoalEv+0x30>
 8024b38:	4618      	mov	r0, r3
 8024b3a:	f7ff fa25 	bl	8023f88 <_ZN5Motor5DriveEff>
    led_->ColorOrder('M');
 8024b3e:	687b      	ldr	r3, [r7, #4]
 8024b40:	695b      	ldr	r3, [r3, #20]
 8024b42:	214d      	movs	r1, #77	; 0x4d
 8024b44:	4618      	mov	r0, r3
 8024b46:	f7fc fe8d 	bl	8021864 <_ZN3Led10ColorOrderEc>
}
 8024b4a:	bf00      	nop
 8024b4c:	3708      	adds	r7, #8
 8024b4e:	46bd      	mov	sp, r7
 8024b50:	bd80      	pop	{r7, pc}
 8024b52:	bf00      	nop
 8024b54:	00000000 	.word	0x00000000

08024b58 <_ZN3Run19ModeVelocityControlEv>:

void Run::ModeVelocityControl()
{
 8024b58:	b580      	push	{r7, lr}
 8024b5a:	b086      	sub	sp, #24
 8024b5c:	af00      	add	r7, sp, #0
 8024b5e:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8024b60:	687b      	ldr	r3, [r7, #4]
 8024b62:	699b      	ldr	r3, [r3, #24]
 8024b64:	4618      	mov	r0, r3
 8024b66:	f7fd f9b1 	bl	8021ecc <_ZN10LineSensor6UpdateEv>
    encoder_->Update();
 8024b6a:	687b      	ldr	r3, [r7, #4]
 8024b6c:	689b      	ldr	r3, [r3, #8]
 8024b6e:	4618      	mov	r0, r3
 8024b70:	f7fc f91a 	bl	8020da8 <_ZN7Encoder6UpdateEv>
    side_sensor_->IgnoreJudgment();
 8024b74:	687b      	ldr	r3, [r7, #4]
 8024b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024b78:	4618      	mov	r0, r3
 8024b7a:	f000 fb3d 	bl	80251f8 <_ZN10SideSensor14IgnoreJudgmentEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 8024b7e:	6878      	ldr	r0, [r7, #4]
 8024b80:	f7ff fde8 	bl	8024754 <_ZN3Run13EmergencyStopEv>
 8024b84:	4603      	mov	r3, r0
 8024b86:	2b00      	cmp	r3, #0
 8024b88:	d129      	bne.n	8024bde <_ZN3Run19ModeVelocityControlEv+0x86>
    /* Motor control */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 8024b8a:	687b      	ldr	r3, [r7, #4]
 8024b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024b8e:	4618      	mov	r0, r3
 8024b90:	f000 fd5c 	bl	802564c <_ZN10SideSensor18GetGoalMarkerCountEv>
 8024b94:	4603      	mov	r3, r0
 8024b96:	75fb      	strb	r3, [r7, #23]
    float target_velocity = VelocityControlTarget(goal_count);
 8024b98:	7dfb      	ldrb	r3, [r7, #23]
 8024b9a:	4619      	mov	r1, r3
 8024b9c:	6878      	ldr	r0, [r7, #4]
 8024b9e:	f000 f8fd 	bl	8024d9c <_ZN3Run21VelocityControlTargetEh>
 8024ba2:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 8024ba6:	687b      	ldr	r3, [r7, #4]
 8024ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024baa:	ed97 0a04 	vldr	s0, [r7, #16]
 8024bae:	4618      	mov	r0, r3
 8024bb0:	f001 f977 	bl	8025ea2 <_ZN15VelocityControl16DeterminePidGainEf>
 8024bb4:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 8024bb8:	687b      	ldr	r3, [r7, #4]
 8024bba:	69db      	ldr	r3, [r3, #28]
 8024bbc:	ed97 0a04 	vldr	s0, [r7, #16]
 8024bc0:	4618      	mov	r0, r3
 8024bc2:	f7fd fb81 	bl	80222c8 <_ZN9LineTrace16DeterminePidGainEf>
 8024bc6:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 8024bca:	687b      	ldr	r3, [r7, #4]
 8024bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024bce:	edd7 0a02 	vldr	s1, [r7, #8]
 8024bd2:	ed97 0a03 	vldr	s0, [r7, #12]
 8024bd6:	4618      	mov	r0, r3
 8024bd8:	f7ff f9d6 	bl	8023f88 <_ZN5Motor5DriveEff>
 8024bdc:	e000      	b.n	8024be0 <_ZN3Run19ModeVelocityControlEv+0x88>
    if(EmergencyStop()) return;
 8024bde:	bf00      	nop
}
 8024be0:	3718      	adds	r7, #24
 8024be2:	46bd      	mov	sp, r7
 8024be4:	bd80      	pop	{r7, pc}

08024be6 <_ZN3Run13ModeLineTraceEv>:

void Run::ModeLineTrace()
{
 8024be6:	b580      	push	{r7, lr}
 8024be8:	b086      	sub	sp, #24
 8024bea:	af00      	add	r7, sp, #0
 8024bec:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8024bee:	687b      	ldr	r3, [r7, #4]
 8024bf0:	699b      	ldr	r3, [r3, #24]
 8024bf2:	4618      	mov	r0, r3
 8024bf4:	f7fd f96a 	bl	8021ecc <_ZN10LineSensor6UpdateEv>
    side_sensor_->IgnoreJudgment();
 8024bf8:	687b      	ldr	r3, [r7, #4]
 8024bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024bfc:	4618      	mov	r0, r3
 8024bfe:	f000 fafb 	bl	80251f8 <_ZN10SideSensor14IgnoreJudgmentEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 8024c02:	6878      	ldr	r0, [r7, #4]
 8024c04:	f7ff fda6 	bl	8024754 <_ZN3Run13EmergencyStopEv>
 8024c08:	4603      	mov	r3, r0
 8024c0a:	2b00      	cmp	r3, #0
 8024c0c:	d11e      	bne.n	8024c4c <_ZN3Run13ModeLineTraceEv+0x66>
    /* Motor control */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 8024c0e:	687b      	ldr	r3, [r7, #4]
 8024c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024c12:	4618      	mov	r0, r3
 8024c14:	f000 fd1a 	bl	802564c <_ZN10SideSensor18GetGoalMarkerCountEv>
 8024c18:	4603      	mov	r3, r0
 8024c1a:	75fb      	strb	r3, [r7, #23]
    float trans_ratio = CommonDuty(goal_count);
 8024c1c:	7dfb      	ldrb	r3, [r7, #23]
 8024c1e:	4619      	mov	r1, r3
 8024c20:	6878      	ldr	r0, [r7, #4]
 8024c22:	f000 f8e1 	bl	8024de8 <_ZN3Run10CommonDutyEh>
 8024c26:	ed87 0a04 	vstr	s0, [r7, #16]
    float rotat_ratio = line_trace_->LineTraceOnly();
 8024c2a:	687b      	ldr	r3, [r7, #4]
 8024c2c:	69db      	ldr	r3, [r3, #28]
 8024c2e:	4618      	mov	r0, r3
 8024c30:	f7fd fb2d 	bl	802228e <_ZN9LineTrace13LineTraceOnlyEv>
 8024c34:	ed87 0a03 	vstr	s0, [r7, #12]
    motor_->Drive(trans_ratio, rotat_ratio);
 8024c38:	687b      	ldr	r3, [r7, #4]
 8024c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024c3c:	edd7 0a03 	vldr	s1, [r7, #12]
 8024c40:	ed97 0a04 	vldr	s0, [r7, #16]
 8024c44:	4618      	mov	r0, r3
 8024c46:	f7ff f99f 	bl	8023f88 <_ZN5Motor5DriveEff>
 8024c4a:	e000      	b.n	8024c4e <_ZN3Run13ModeLineTraceEv+0x68>
    if(EmergencyStop()) return;
 8024c4c:	bf00      	nop
}
 8024c4e:	3718      	adds	r7, #24
 8024c50:	46bd      	mov	sp, r7
 8024c52:	bd80      	pop	{r7, pc}

08024c54 <_ZN3Run24ModeVelocityControlDebugEv>:

#ifdef DEBUG_MODE
void Run::ModeVelocityControlDebug()
{
 8024c54:	b580      	push	{r7, lr}
 8024c56:	b084      	sub	sp, #16
 8024c58:	af00      	add	r7, sp, #0
 8024c5a:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8024c5c:	687b      	ldr	r3, [r7, #4]
 8024c5e:	699b      	ldr	r3, [r3, #24]
 8024c60:	4618      	mov	r0, r3
 8024c62:	f7fd f933 	bl	8021ecc <_ZN10LineSensor6UpdateEv>
    encoder_->Update();
 8024c66:	687b      	ldr	r3, [r7, #4]
 8024c68:	689b      	ldr	r3, [r3, #8]
 8024c6a:	4618      	mov	r0, r3
 8024c6c:	f7fc f89c 	bl	8020da8 <_ZN7Encoder6UpdateEv>
    /* Motor control */
    float target_velocity = VELOCITY_CONTROL_TARGET;
 8024c70:	4b0b      	ldr	r3, [pc, #44]	; (8024ca0 <_ZN3Run24ModeVelocityControlDebugEv+0x4c>)
 8024c72:	60fb      	str	r3, [r7, #12]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 8024c74:	687b      	ldr	r3, [r7, #4]
 8024c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024c78:	ed97 0a03 	vldr	s0, [r7, #12]
 8024c7c:	4618      	mov	r0, r3
 8024c7e:	f001 f910 	bl	8025ea2 <_ZN15VelocityControl16DeterminePidGainEf>
 8024c82:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, 0);
 8024c86:	687b      	ldr	r3, [r7, #4]
 8024c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024c8a:	eddf 0a06 	vldr	s1, [pc, #24]	; 8024ca4 <_ZN3Run24ModeVelocityControlDebugEv+0x50>
 8024c8e:	ed97 0a02 	vldr	s0, [r7, #8]
 8024c92:	4618      	mov	r0, r3
 8024c94:	f7ff f978 	bl	8023f88 <_ZN5Motor5DriveEff>
}
 8024c98:	bf00      	nop
 8024c9a:	3710      	adds	r7, #16
 8024c9c:	46bd      	mov	sp, r7
 8024c9e:	bd80      	pop	{r7, pc}
 8024ca0:	3f99999a 	.word	0x3f99999a
 8024ca4:	00000000 	.word	0x00000000

08024ca8 <_ZN3Run18ModeLineTraceDebugEv>:

void Run::ModeLineTraceDebug()
{
 8024ca8:	b580      	push	{r7, lr}
 8024caa:	b084      	sub	sp, #16
 8024cac:	af00      	add	r7, sp, #0
 8024cae:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8024cb0:	687b      	ldr	r3, [r7, #4]
 8024cb2:	699b      	ldr	r3, [r3, #24]
 8024cb4:	4618      	mov	r0, r3
 8024cb6:	f7fd f909 	bl	8021ecc <_ZN10LineSensor6UpdateEv>
    /* Motor control */
    float rotat_ratio = line_trace_->LineTraceOnly();
 8024cba:	687b      	ldr	r3, [r7, #4]
 8024cbc:	69db      	ldr	r3, [r3, #28]
 8024cbe:	4618      	mov	r0, r3
 8024cc0:	f7fd fae5 	bl	802228e <_ZN9LineTrace13LineTraceOnlyEv>
 8024cc4:	ed87 0a03 	vstr	s0, [r7, #12]
    motor_->Drive(0, rotat_ratio);
 8024cc8:	687b      	ldr	r3, [r7, #4]
 8024cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024ccc:	edd7 0a03 	vldr	s1, [r7, #12]
 8024cd0:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8024ce4 <_ZN3Run18ModeLineTraceDebugEv+0x3c>
 8024cd4:	4618      	mov	r0, r3
 8024cd6:	f7ff f957 	bl	8023f88 <_ZN5Motor5DriveEff>
}
 8024cda:	bf00      	nop
 8024cdc:	3710      	adds	r7, #16
 8024cde:	46bd      	mov	sp, r7
 8024ce0:	bd80      	pop	{r7, pc}
 8024ce2:	bf00      	nop
 8024ce4:	00000000 	.word	0x00000000

08024ce8 <_ZN3Run16ModeInitialDebugEv>:

void Run::ModeInitialDebug()
{
 8024ce8:	b580      	push	{r7, lr}
 8024cea:	b082      	sub	sp, #8
 8024cec:	af00      	add	r7, sp, #0
 8024cee:	6078      	str	r0, [r7, #4]
    InitialTest();
 8024cf0:	6878      	ldr	r0, [r7, #4]
 8024cf2:	f000 f89d 	bl	8024e30 <_ZN3Run11InitialTestEv>
}
 8024cf6:	bf00      	nop
 8024cf8:	3708      	adds	r7, #8
 8024cfa:	46bd      	mov	sp, r7
 8024cfc:	bd80      	pop	{r7, pc}
	...

08024d00 <_ZN3Run19FirstTargetVelocityEh>:
#endif // DEBUG_MODE

float Run::FirstTargetVelocity(uint8_t goal_count)
{
 8024d00:	b480      	push	{r7}
 8024d02:	b083      	sub	sp, #12
 8024d04:	af00      	add	r7, sp, #0
 8024d06:	6078      	str	r0, [r7, #4]
 8024d08:	460b      	mov	r3, r1
 8024d0a:	70fb      	strb	r3, [r7, #3]
    static uint8_t slow_timer = 0;
    static uint8_t stop_timer = 0;

    if(goal_count == 1)
 8024d0c:	78fb      	ldrb	r3, [r7, #3]
 8024d0e:	2b01      	cmp	r3, #1
 8024d10:	d101      	bne.n	8024d16 <_ZN3Run19FirstTargetVelocityEh+0x16>
    {
        return EXPLORE_VELOCITY;
 8024d12:	4b0c      	ldr	r3, [pc, #48]	; (8024d44 <_ZN3Run19FirstTargetVelocityEh+0x44>)
 8024d14:	e00c      	b.n	8024d30 <_ZN3Run19FirstTargetVelocityEh+0x30>
    }
    else if(goal_count >= 2)
 8024d16:	78fb      	ldrb	r3, [r7, #3]
 8024d18:	2b01      	cmp	r3, #1
 8024d1a:	d908      	bls.n	8024d2e <_ZN3Run19FirstTargetVelocityEh+0x2e>
    {
        if(slow_timer < SLOW_DRIVE_TIME)
        {
            slow_timer++;
 8024d1c:	4b0a      	ldr	r3, [pc, #40]	; (8024d48 <_ZN3Run19FirstTargetVelocityEh+0x48>)
 8024d1e:	781b      	ldrb	r3, [r3, #0]
 8024d20:	3301      	adds	r3, #1
 8024d22:	b2da      	uxtb	r2, r3
 8024d24:	4b08      	ldr	r3, [pc, #32]	; (8024d48 <_ZN3Run19FirstTargetVelocityEh+0x48>)
 8024d26:	701a      	strb	r2, [r3, #0]
            return SLOW_DRIVE_VELOCITY;
 8024d28:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8024d2c:	e000      	b.n	8024d30 <_ZN3Run19FirstTargetVelocityEh+0x30>
        {
            SetRunMode(FIRST_GOAL);
            return 0;
        }
    }
    else return EXPLORE_VELOCITY;
 8024d2e:	4b05      	ldr	r3, [pc, #20]	; (8024d44 <_ZN3Run19FirstTargetVelocityEh+0x44>)
 8024d30:	ee07 3a90 	vmov	s15, r3
}
 8024d34:	eeb0 0a67 	vmov.f32	s0, s15
 8024d38:	370c      	adds	r7, #12
 8024d3a:	46bd      	mov	sp, r7
 8024d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d40:	4770      	bx	lr
 8024d42:	bf00      	nop
 8024d44:	3f99999a 	.word	0x3f99999a
 8024d48:	20000329 	.word	0x20000329

08024d4c <_ZN3Run20SecondTargetVelocityEh>:

float Run::SecondTargetVelocity(uint8_t goal_count)
{
 8024d4c:	b580      	push	{r7, lr}
 8024d4e:	b082      	sub	sp, #8
 8024d50:	af00      	add	r7, sp, #0
 8024d52:	6078      	str	r0, [r7, #4]
 8024d54:	460b      	mov	r3, r1
 8024d56:	70fb      	strb	r3, [r7, #3]
    static uint8_t slow_timer = 0;
    static uint8_t stop_timer = 0;

    if(goal_count == 1)
 8024d58:	78fb      	ldrb	r3, [r7, #3]
 8024d5a:	2b01      	cmp	r3, #1
 8024d5c:	d107      	bne.n	8024d6e <_ZN3Run20SecondTargetVelocityEh+0x22>
    {
        return logger_->GetTargetVelocity();
 8024d5e:	687b      	ldr	r3, [r7, #4]
 8024d60:	6a1b      	ldr	r3, [r3, #32]
 8024d62:	4618      	mov	r0, r3
 8024d64:	f7fe fa6a 	bl	802323c <_ZN6Logger17GetTargetVelocityEv>
 8024d68:	eef0 7a40 	vmov.f32	s15, s0
 8024d6c:	e00d      	b.n	8024d8a <_ZN3Run20SecondTargetVelocityEh+0x3e>
    }
    else if(goal_count >= 2)
 8024d6e:	78fb      	ldrb	r3, [r7, #3]
 8024d70:	2b01      	cmp	r3, #1
 8024d72:	d908      	bls.n	8024d86 <_ZN3Run20SecondTargetVelocityEh+0x3a>
    {
        if(slow_timer < SLOW_DRIVE_TIME)
        {
            slow_timer++;
 8024d74:	4b07      	ldr	r3, [pc, #28]	; (8024d94 <_ZN3Run20SecondTargetVelocityEh+0x48>)
 8024d76:	781b      	ldrb	r3, [r3, #0]
 8024d78:	3301      	adds	r3, #1
 8024d7a:	b2da      	uxtb	r2, r3
 8024d7c:	4b05      	ldr	r3, [pc, #20]	; (8024d94 <_ZN3Run20SecondTargetVelocityEh+0x48>)
 8024d7e:	701a      	strb	r2, [r3, #0]
            return SLOW_DRIVE_VELOCITY;
 8024d80:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8024d84:	e001      	b.n	8024d8a <_ZN3Run20SecondTargetVelocityEh+0x3e>
        {
            SetRunMode(SECOND_GOAL);
            return 0;
        }
    }
    else return MIN_VELOCITY;
 8024d86:	eddf 7a04 	vldr	s15, [pc, #16]	; 8024d98 <_ZN3Run20SecondTargetVelocityEh+0x4c>
}
 8024d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8024d8e:	3708      	adds	r7, #8
 8024d90:	46bd      	mov	sp, r7
 8024d92:	bd80      	pop	{r7, pc}
 8024d94:	2000032a 	.word	0x2000032a
 8024d98:	3fa66666 	.word	0x3fa66666

08024d9c <_ZN3Run21VelocityControlTargetEh>:

float Run::VelocityControlTarget(uint8_t goal_count)
{
 8024d9c:	b480      	push	{r7}
 8024d9e:	b083      	sub	sp, #12
 8024da0:	af00      	add	r7, sp, #0
 8024da2:	6078      	str	r0, [r7, #4]
 8024da4:	460b      	mov	r3, r1
 8024da6:	70fb      	strb	r3, [r7, #3]
    static uint8_t slow_timer = 0;
    static uint8_t stop_timer = 0;

    if(goal_count == 1)
 8024da8:	78fb      	ldrb	r3, [r7, #3]
 8024daa:	2b01      	cmp	r3, #1
 8024dac:	d101      	bne.n	8024db2 <_ZN3Run21VelocityControlTargetEh+0x16>
    {
        return VELOCITY_CONTROL_TARGET;
 8024dae:	4b0c      	ldr	r3, [pc, #48]	; (8024de0 <_ZN3Run21VelocityControlTargetEh+0x44>)
 8024db0:	e00c      	b.n	8024dcc <_ZN3Run21VelocityControlTargetEh+0x30>
    }
    else if(goal_count >= 2)
 8024db2:	78fb      	ldrb	r3, [r7, #3]
 8024db4:	2b01      	cmp	r3, #1
 8024db6:	d908      	bls.n	8024dca <_ZN3Run21VelocityControlTargetEh+0x2e>
    {
        if(slow_timer < SLOW_DRIVE_TIME)
        {
            slow_timer++;
 8024db8:	4b0a      	ldr	r3, [pc, #40]	; (8024de4 <_ZN3Run21VelocityControlTargetEh+0x48>)
 8024dba:	781b      	ldrb	r3, [r3, #0]
 8024dbc:	3301      	adds	r3, #1
 8024dbe:	b2da      	uxtb	r2, r3
 8024dc0:	4b08      	ldr	r3, [pc, #32]	; (8024de4 <_ZN3Run21VelocityControlTargetEh+0x48>)
 8024dc2:	701a      	strb	r2, [r3, #0]
            return SLOW_DRIVE_VELOCITY;
 8024dc4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8024dc8:	e000      	b.n	8024dcc <_ZN3Run21VelocityControlTargetEh+0x30>
        {
            SetRunMode(STANDBY);
            return 0;
        }
    }
    else return VELOCITY_CONTROL_TARGET;
 8024dca:	4b05      	ldr	r3, [pc, #20]	; (8024de0 <_ZN3Run21VelocityControlTargetEh+0x44>)
 8024dcc:	ee07 3a90 	vmov	s15, r3
}
 8024dd0:	eeb0 0a67 	vmov.f32	s0, s15
 8024dd4:	370c      	adds	r7, #12
 8024dd6:	46bd      	mov	sp, r7
 8024dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ddc:	4770      	bx	lr
 8024dde:	bf00      	nop
 8024de0:	3f99999a 	.word	0x3f99999a
 8024de4:	2000032b 	.word	0x2000032b

08024de8 <_ZN3Run10CommonDutyEh>:

float Run::CommonDuty(uint8_t goal_count)
{
 8024de8:	b480      	push	{r7}
 8024dea:	b083      	sub	sp, #12
 8024dec:	af00      	add	r7, sp, #0
 8024dee:	6078      	str	r0, [r7, #4]
 8024df0:	460b      	mov	r3, r1
 8024df2:	70fb      	strb	r3, [r7, #3]
    static uint8_t slow_timer = 0;
    static uint8_t stop_timer = 0;

    if(goal_count == 1)
 8024df4:	78fb      	ldrb	r3, [r7, #3]
 8024df6:	2b01      	cmp	r3, #1
 8024df8:	d101      	bne.n	8024dfe <_ZN3Run10CommonDutyEh+0x16>
    {
        return COMMON_DUTY;
 8024dfa:	4b0b      	ldr	r3, [pc, #44]	; (8024e28 <_ZN3Run10CommonDutyEh+0x40>)
 8024dfc:	e00b      	b.n	8024e16 <_ZN3Run10CommonDutyEh+0x2e>
    }
    else if(goal_count >= 2)
 8024dfe:	78fb      	ldrb	r3, [r7, #3]
 8024e00:	2b01      	cmp	r3, #1
 8024e02:	d907      	bls.n	8024e14 <_ZN3Run10CommonDutyEh+0x2c>
    {
        if(slow_timer < SLOW_DRIVE_TIME)
        {
            slow_timer++;
 8024e04:	4b09      	ldr	r3, [pc, #36]	; (8024e2c <_ZN3Run10CommonDutyEh+0x44>)
 8024e06:	781b      	ldrb	r3, [r3, #0]
 8024e08:	3301      	adds	r3, #1
 8024e0a:	b2da      	uxtb	r2, r3
 8024e0c:	4b07      	ldr	r3, [pc, #28]	; (8024e2c <_ZN3Run10CommonDutyEh+0x44>)
 8024e0e:	701a      	strb	r2, [r3, #0]
            return SLOW_DRIVE_DUTY;
 8024e10:	4b05      	ldr	r3, [pc, #20]	; (8024e28 <_ZN3Run10CommonDutyEh+0x40>)
 8024e12:	e000      	b.n	8024e16 <_ZN3Run10CommonDutyEh+0x2e>
        {
            SetRunMode(STANDBY);
            return 0;
        }
    }
    else return COMMON_DUTY;
 8024e14:	4b04      	ldr	r3, [pc, #16]	; (8024e28 <_ZN3Run10CommonDutyEh+0x40>)
 8024e16:	ee07 3a90 	vmov	s15, r3
}
 8024e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8024e1e:	370c      	adds	r7, #12
 8024e20:	46bd      	mov	sp, r7
 8024e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e26:	4770      	bx	lr
 8024e28:	3e4ccccd 	.word	0x3e4ccccd
 8024e2c:	2000032c 	.word	0x2000032c

08024e30 <_ZN3Run11InitialTestEv>:
}
#endif // DEBUG_FLASH

#ifdef DEBUG_MODE
void Run::InitialTest()
{
 8024e30:	b580      	push	{r7, lr}
 8024e32:	b082      	sub	sp, #8
 8024e34:	af00      	add	r7, sp, #0
 8024e36:	6078      	str	r0, [r7, #4]
    /* Line sensor */
    line_sensor_->Update();
 8024e38:	687b      	ldr	r3, [r7, #4]
 8024e3a:	699b      	ldr	r3, [r3, #24]
 8024e3c:	4618      	mov	r0, r3
 8024e3e:	f7fd f845 	bl	8021ecc <_ZN10LineSensor6UpdateEv>
    line_sensor_->MonitorArrays();
 8024e42:	687b      	ldr	r3, [r7, #4]
 8024e44:	699b      	ldr	r3, [r3, #24]
 8024e46:	4618      	mov	r0, r3
 8024e48:	f7fd f9ce 	bl	80221e8 <_ZN10LineSensor13MonitorArraysEv>
    g_line_diff = line_sensor_->LeftRightDifference();
 8024e4c:	687b      	ldr	r3, [r7, #4]
 8024e4e:	699b      	ldr	r3, [r3, #24]
 8024e50:	4618      	mov	r0, r3
 8024e52:	f7fd f909 	bl	8022068 <_ZN10LineSensor19LeftRightDifferenceEv>
 8024e56:	eef0 7a40 	vmov.f32	s15, s0
 8024e5a:	4b71      	ldr	r3, [pc, #452]	; (8025020 <_ZN3Run11InitialTestEv+0x1f0>)
 8024e5c:	edc3 7a00 	vstr	s15, [r3]
    g_line_emer = line_sensor_->GetEmergencyStopFlag();
 8024e60:	687b      	ldr	r3, [r7, #4]
 8024e62:	699b      	ldr	r3, [r3, #24]
 8024e64:	4618      	mov	r0, r3
 8024e66:	f7fd f8f1 	bl	802204c <_ZN10LineSensor20GetEmergencyStopFlagEv>
 8024e6a:	4603      	mov	r3, r0
 8024e6c:	461a      	mov	r2, r3
 8024e6e:	4b6d      	ldr	r3, [pc, #436]	; (8025024 <_ZN3Run11InitialTestEv+0x1f4>)
 8024e70:	701a      	strb	r2, [r3, #0]
    g_line_calib = line_sensor_->CheckCalibration();
 8024e72:	687b      	ldr	r3, [r7, #4]
 8024e74:	699b      	ldr	r3, [r3, #24]
 8024e76:	4618      	mov	r0, r3
 8024e78:	f7fd f95a 	bl	8022130 <_ZN10LineSensor16CheckCalibrationEv>
 8024e7c:	4603      	mov	r3, r0
 8024e7e:	461a      	mov	r2, r3
 8024e80:	4b69      	ldr	r3, [pc, #420]	; (8025028 <_ZN3Run11InitialTestEv+0x1f8>)
 8024e82:	701a      	strb	r2, [r3, #0]

    /* Side seneor */
    side_sensor_->IgnoreJudgment();
 8024e84:	687b      	ldr	r3, [r7, #4]
 8024e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024e88:	4618      	mov	r0, r3
 8024e8a:	f000 f9b5 	bl	80251f8 <_ZN10SideSensor14IgnoreJudgmentEv>
    g_goal_cnt = side_sensor_->GetGoalMarkerCount();
 8024e8e:	687b      	ldr	r3, [r7, #4]
 8024e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024e92:	4618      	mov	r0, r3
 8024e94:	f000 fbda 	bl	802564c <_ZN10SideSensor18GetGoalMarkerCountEv>
 8024e98:	4603      	mov	r3, r0
 8024e9a:	461a      	mov	r2, r3
 8024e9c:	4b63      	ldr	r3, [pc, #396]	; (802502c <_ZN3Run11InitialTestEv+0x1fc>)
 8024e9e:	701a      	strb	r2, [r3, #0]
    g_corner_cnt = side_sensor_->GetCornerMarkerCount();
 8024ea0:	687b      	ldr	r3, [r7, #4]
 8024ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024ea4:	4618      	mov	r0, r3
 8024ea6:	f000 fbdf 	bl	8025668 <_ZN10SideSensor20GetCornerMarkerCountEv>
 8024eaa:	4603      	mov	r3, r0
 8024eac:	461a      	mov	r2, r3
 8024eae:	4b60      	ldr	r3, [pc, #384]	; (8025030 <_ZN3Run11InitialTestEv+0x200>)
 8024eb0:	701a      	strb	r2, [r3, #0]
    g_cross_cnt = side_sensor_->GetCrossLineCount();
 8024eb2:	687b      	ldr	r3, [r7, #4]
 8024eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024eb6:	4618      	mov	r0, r3
 8024eb8:	f000 fbe2 	bl	8025680 <_ZN10SideSensor17GetCrossLineCountEv>
 8024ebc:	4603      	mov	r3, r0
 8024ebe:	461a      	mov	r2, r3
 8024ec0:	4b5c      	ldr	r3, [pc, #368]	; (8025034 <_ZN3Run11InitialTestEv+0x204>)
 8024ec2:	701a      	strb	r2, [r3, #0]

    /* IMU */
    iim_42652_->Update();
 8024ec4:	687b      	ldr	r3, [r7, #4]
 8024ec6:	691b      	ldr	r3, [r3, #16]
 8024ec8:	4618      	mov	r0, r3
 8024eca:	f7fc fb8d 	bl	80215e8 <_ZN8Iim426526UpdateEv>
    g_deg_stack_z = iim_42652_->GetDegreeStackZ();
 8024ece:	687b      	ldr	r3, [r7, #4]
 8024ed0:	691b      	ldr	r3, [r3, #16]
 8024ed2:	4618      	mov	r0, r3
 8024ed4:	f7fc fbf0 	bl	80216b8 <_ZN8Iim4265215GetDegreeStackZEv>
 8024ed8:	eeb0 7a40 	vmov.f32	s14, s0
 8024edc:	eef0 7a60 	vmov.f32	s15, s1
 8024ee0:	4b55      	ldr	r3, [pc, #340]	; (8025038 <_ZN3Run11InitialTestEv+0x208>)
 8024ee2:	ed83 7b00 	vstr	d7, [r3]
    g_gyro_x_l = iim_42652_->GyroXLeft();
 8024ee6:	687b      	ldr	r3, [r7, #4]
 8024ee8:	691b      	ldr	r3, [r3, #16]
 8024eea:	4618      	mov	r0, r3
 8024eec:	f7fc fbf5 	bl	80216da <_ZN8Iim426529GyroXLeftEv>
 8024ef0:	4603      	mov	r3, r0
 8024ef2:	461a      	mov	r2, r3
 8024ef4:	4b51      	ldr	r3, [pc, #324]	; (802503c <_ZN3Run11InitialTestEv+0x20c>)
 8024ef6:	801a      	strh	r2, [r3, #0]
    g_gyro_x_r = iim_42652_->GyroXRight();
 8024ef8:	687b      	ldr	r3, [r7, #4]
 8024efa:	691b      	ldr	r3, [r3, #16]
 8024efc:	4618      	mov	r0, r3
 8024efe:	f7fc fbfb 	bl	80216f8 <_ZN8Iim4265210GyroXRightEv>
 8024f02:	4603      	mov	r3, r0
 8024f04:	461a      	mov	r2, r3
 8024f06:	4b4e      	ldr	r3, [pc, #312]	; (8025040 <_ZN3Run11InitialTestEv+0x210>)
 8024f08:	801a      	strh	r2, [r3, #0]
    g_gyro_y_l = iim_42652_->GyroYLeft();
 8024f0a:	687b      	ldr	r3, [r7, #4]
 8024f0c:	691b      	ldr	r3, [r3, #16]
 8024f0e:	4618      	mov	r0, r3
 8024f10:	f7fc fc01 	bl	8021716 <_ZN8Iim426529GyroYLeftEv>
 8024f14:	4603      	mov	r3, r0
 8024f16:	461a      	mov	r2, r3
 8024f18:	4b4a      	ldr	r3, [pc, #296]	; (8025044 <_ZN3Run11InitialTestEv+0x214>)
 8024f1a:	801a      	strh	r2, [r3, #0]
    g_gyro_y_r = iim_42652_->GyroYRight();
 8024f1c:	687b      	ldr	r3, [r7, #4]
 8024f1e:	691b      	ldr	r3, [r3, #16]
 8024f20:	4618      	mov	r0, r3
 8024f22:	f7fc fc07 	bl	8021734 <_ZN8Iim4265210GyroYRightEv>
 8024f26:	4603      	mov	r3, r0
 8024f28:	461a      	mov	r2, r3
 8024f2a:	4b47      	ldr	r3, [pc, #284]	; (8025048 <_ZN3Run11InitialTestEv+0x218>)
 8024f2c:	801a      	strh	r2, [r3, #0]
    g_gyro_z_l = iim_42652_->GyroZLeft();
 8024f2e:	687b      	ldr	r3, [r7, #4]
 8024f30:	691b      	ldr	r3, [r3, #16]
 8024f32:	4618      	mov	r0, r3
 8024f34:	f7fc fc0d 	bl	8021752 <_ZN8Iim426529GyroZLeftEv>
 8024f38:	4603      	mov	r3, r0
 8024f3a:	461a      	mov	r2, r3
 8024f3c:	4b43      	ldr	r3, [pc, #268]	; (802504c <_ZN3Run11InitialTestEv+0x21c>)
 8024f3e:	801a      	strh	r2, [r3, #0]
    g_gyro_z_r = iim_42652_->GyroZRight();
 8024f40:	687b      	ldr	r3, [r7, #4]
 8024f42:	691b      	ldr	r3, [r3, #16]
 8024f44:	4618      	mov	r0, r3
 8024f46:	f7fc fc13 	bl	8021770 <_ZN8Iim4265210GyroZRightEv>
 8024f4a:	4603      	mov	r3, r0
 8024f4c:	461a      	mov	r2, r3
 8024f4e:	4b40      	ldr	r3, [pc, #256]	; (8025050 <_ZN3Run11InitialTestEv+0x220>)
 8024f50:	801a      	strh	r2, [r3, #0]
    g_accel_x_l = iim_42652_->AccelXLeft();
 8024f52:	687b      	ldr	r3, [r7, #4]
 8024f54:	691b      	ldr	r3, [r3, #16]
 8024f56:	4618      	mov	r0, r3
 8024f58:	f7fc fc19 	bl	802178e <_ZN8Iim4265210AccelXLeftEv>
 8024f5c:	4603      	mov	r3, r0
 8024f5e:	461a      	mov	r2, r3
 8024f60:	4b3c      	ldr	r3, [pc, #240]	; (8025054 <_ZN3Run11InitialTestEv+0x224>)
 8024f62:	801a      	strh	r2, [r3, #0]
    g_accel_x_r = iim_42652_->AccelXRight();
 8024f64:	687b      	ldr	r3, [r7, #4]
 8024f66:	691b      	ldr	r3, [r3, #16]
 8024f68:	4618      	mov	r0, r3
 8024f6a:	f7fc fc1f 	bl	80217ac <_ZN8Iim4265211AccelXRightEv>
 8024f6e:	4603      	mov	r3, r0
 8024f70:	461a      	mov	r2, r3
 8024f72:	4b39      	ldr	r3, [pc, #228]	; (8025058 <_ZN3Run11InitialTestEv+0x228>)
 8024f74:	801a      	strh	r2, [r3, #0]
    g_accel_y_l = iim_42652_->AccelYLeft();
 8024f76:	687b      	ldr	r3, [r7, #4]
 8024f78:	691b      	ldr	r3, [r3, #16]
 8024f7a:	4618      	mov	r0, r3
 8024f7c:	f7fc fc25 	bl	80217ca <_ZN8Iim4265210AccelYLeftEv>
 8024f80:	4603      	mov	r3, r0
 8024f82:	461a      	mov	r2, r3
 8024f84:	4b35      	ldr	r3, [pc, #212]	; (802505c <_ZN3Run11InitialTestEv+0x22c>)
 8024f86:	801a      	strh	r2, [r3, #0]
    g_accel_y_r = iim_42652_->AccelYRight();
 8024f88:	687b      	ldr	r3, [r7, #4]
 8024f8a:	691b      	ldr	r3, [r3, #16]
 8024f8c:	4618      	mov	r0, r3
 8024f8e:	f7fc fc2b 	bl	80217e8 <_ZN8Iim4265211AccelYRightEv>
 8024f92:	4603      	mov	r3, r0
 8024f94:	461a      	mov	r2, r3
 8024f96:	4b32      	ldr	r3, [pc, #200]	; (8025060 <_ZN3Run11InitialTestEv+0x230>)
 8024f98:	801a      	strh	r2, [r3, #0]
    g_accel_z_l = iim_42652_->AccelZLeft();
 8024f9a:	687b      	ldr	r3, [r7, #4]
 8024f9c:	691b      	ldr	r3, [r3, #16]
 8024f9e:	4618      	mov	r0, r3
 8024fa0:	f7fc fc31 	bl	8021806 <_ZN8Iim4265210AccelZLeftEv>
 8024fa4:	4603      	mov	r3, r0
 8024fa6:	461a      	mov	r2, r3
 8024fa8:	4b2e      	ldr	r3, [pc, #184]	; (8025064 <_ZN3Run11InitialTestEv+0x234>)
 8024faa:	801a      	strh	r2, [r3, #0]
    g_accel_z_r = iim_42652_->AccelZRight();
 8024fac:	687b      	ldr	r3, [r7, #4]
 8024fae:	691b      	ldr	r3, [r3, #16]
 8024fb0:	4618      	mov	r0, r3
 8024fb2:	f7fc fc37 	bl	8021824 <_ZN8Iim4265211AccelZRightEv>
 8024fb6:	4603      	mov	r3, r0
 8024fb8:	461a      	mov	r2, r3
 8024fba:	4b2b      	ldr	r3, [pc, #172]	; (8025068 <_ZN3Run11InitialTestEv+0x238>)
 8024fbc:	801a      	strh	r2, [r3, #0]

    /* Encoder */
    encoder_->Update();
 8024fbe:	687b      	ldr	r3, [r7, #4]
 8024fc0:	689b      	ldr	r3, [r3, #8]
 8024fc2:	4618      	mov	r0, r3
 8024fc4:	f7fb fef0 	bl	8020da8 <_ZN7Encoder6UpdateEv>
    g_distance = encoder_->GetDistance();
 8024fc8:	687b      	ldr	r3, [r7, #4]
 8024fca:	689b      	ldr	r3, [r3, #8]
 8024fcc:	4618      	mov	r0, r3
 8024fce:	f7fb ff7d 	bl	8020ecc <_ZN7Encoder11GetDistanceEv>
 8024fd2:	eef0 7a40 	vmov.f32	s15, s0
 8024fd6:	4b25      	ldr	r3, [pc, #148]	; (802506c <_ZN3Run11InitialTestEv+0x23c>)
 8024fd8:	edc3 7a00 	vstr	s15, [r3]
    g_distance_stack = encoder_->GetDistanceStack();
 8024fdc:	687b      	ldr	r3, [r7, #4]
 8024fde:	689b      	ldr	r3, [r3, #8]
 8024fe0:	4618      	mov	r0, r3
 8024fe2:	f7fb ff82 	bl	8020eea <_ZN7Encoder16GetDistanceStackEv>
 8024fe6:	eef0 7a40 	vmov.f32	s15, s0
 8024fea:	4b21      	ldr	r3, [pc, #132]	; (8025070 <_ZN3Run11InitialTestEv+0x240>)
 8024fec:	edc3 7a00 	vstr	s15, [r3]
    g_distance_diff = encoder_->AngularVelocity();
 8024ff0:	687b      	ldr	r3, [r7, #4]
 8024ff2:	689b      	ldr	r3, [r3, #8]
 8024ff4:	4618      	mov	r0, r3
 8024ff6:	f7fb ff87 	bl	8020f08 <_ZN7Encoder15AngularVelocityEv>
 8024ffa:	eef0 7a40 	vmov.f32	s15, s0
 8024ffe:	4b1d      	ldr	r3, [pc, #116]	; (8025074 <_ZN3Run11InitialTestEv+0x244>)
 8025000:	edc3 7a00 	vstr	s15, [r3]

    /* Motor */
    motor_->Drive(INIT_DEBUG_MOTOR_DUTY, 0);
 8025004:	687b      	ldr	r3, [r7, #4]
 8025006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025008:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8025078 <_ZN3Run11InitialTestEv+0x248>
 802500c:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8025078 <_ZN3Run11InitialTestEv+0x248>
 8025010:	4618      	mov	r0, r3
 8025012:	f7fe ffb9 	bl	8023f88 <_ZN5Motor5DriveEff>
}
 8025016:	bf00      	nop
 8025018:	3708      	adds	r7, #8
 802501a:	46bd      	mov	sp, r7
 802501c:	bd80      	pop	{r7, pc}
 802501e:	bf00      	nop
 8025020:	200000b8 	.word	0x200000b8
 8025024:	200000bc 	.word	0x200000bc
 8025028:	2000031d 	.word	0x2000031d
 802502c:	2000031e 	.word	0x2000031e
 8025030:	20000255 	.word	0x20000255
 8025034:	20000256 	.word	0x20000256
 8025038:	20000278 	.word	0x20000278
 802503c:	20000288 	.word	0x20000288
 8025040:	2000028a 	.word	0x2000028a
 8025044:	2000028c 	.word	0x2000028c
 8025048:	2000028e 	.word	0x2000028e
 802504c:	20000290 	.word	0x20000290
 8025050:	20000292 	.word	0x20000292
 8025054:	20000294 	.word	0x20000294
 8025058:	20000296 	.word	0x20000296
 802505c:	20000298 	.word	0x20000298
 8025060:	2000029a 	.word	0x2000029a
 8025064:	2000029c 	.word	0x2000029c
 8025068:	2000029e 	.word	0x2000029e
 802506c:	200002ac 	.word	0x200002ac
 8025070:	200002b0 	.word	0x200002b0
 8025074:	200002b4 	.word	0x200002b4
 8025078:	00000000 	.word	0x00000000

0802507c <_ZN10SideSensorC1Ev>:
#include "side_sensor.hpp"
#include "declare_extern.h"

SideSensor::SideSensor() : read_state_flags_(0)
 802507c:	b480      	push	{r7}
 802507e:	b083      	sub	sp, #12
 8025080:	af00      	add	r7, sp, #0
 8025082:	6078      	str	r0, [r7, #4]
                         , write_state_flags_(0)
                         , exception_flags_(0)
                         , master_count_(0)
                         , corner_marker_count_(0)
                         , cross_line_count_(0) {}
 8025084:	687b      	ldr	r3, [r7, #4]
 8025086:	2200      	movs	r2, #0
 8025088:	701a      	strb	r2, [r3, #0]
 802508a:	687b      	ldr	r3, [r7, #4]
 802508c:	2200      	movs	r2, #0
 802508e:	705a      	strb	r2, [r3, #1]
 8025090:	687b      	ldr	r3, [r7, #4]
 8025092:	2200      	movs	r2, #0
 8025094:	709a      	strb	r2, [r3, #2]
 8025096:	687b      	ldr	r3, [r7, #4]
 8025098:	2200      	movs	r2, #0
 802509a:	70da      	strb	r2, [r3, #3]
 802509c:	687b      	ldr	r3, [r7, #4]
 802509e:	2200      	movs	r2, #0
 80250a0:	711a      	strb	r2, [r3, #4]
 80250a2:	687b      	ldr	r3, [r7, #4]
 80250a4:	2200      	movs	r2, #0
 80250a6:	715a      	strb	r2, [r3, #5]
 80250a8:	687b      	ldr	r3, [r7, #4]
 80250aa:	4618      	mov	r0, r3
 80250ac:	370c      	adds	r7, #12
 80250ae:	46bd      	mov	sp, r7
 80250b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250b4:	4770      	bx	lr
	...

080250b8 <_ZN10SideSensor12SensorUpdateEv>:

void SideSensor::SensorUpdate()
{
 80250b8:	b580      	push	{r7, lr}
 80250ba:	b084      	sub	sp, #16
 80250bc:	af00      	add	r7, sp, #0
 80250be:	6078      	str	r0, [r7, #4]
    uint8_t io_state = 0xFF; // Lower bits represent the positions of sensors.
 80250c0:	23ff      	movs	r3, #255	; 0xff
 80250c2:	73fb      	strb	r3, [r7, #15]

    if(IO_OUTSIDE_L == 0) io_state &= 0xF7; // 0111
 80250c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80250c8:	4849      	ldr	r0, [pc, #292]	; (80251f0 <_ZN10SideSensor12SensorUpdateEv+0x138>)
 80250ca:	f002 fe93 	bl	8027df4 <HAL_GPIO_ReadPin>
 80250ce:	4603      	mov	r3, r0
 80250d0:	2b00      	cmp	r3, #0
 80250d2:	bf0c      	ite	eq
 80250d4:	2301      	moveq	r3, #1
 80250d6:	2300      	movne	r3, #0
 80250d8:	b2db      	uxtb	r3, r3
 80250da:	2b00      	cmp	r3, #0
 80250dc:	d003      	beq.n	80250e6 <_ZN10SideSensor12SensorUpdateEv+0x2e>
 80250de:	7bfb      	ldrb	r3, [r7, #15]
 80250e0:	f023 0308 	bic.w	r3, r3, #8
 80250e4:	73fb      	strb	r3, [r7, #15]
    if(IO_INSIDE_L == 0)  io_state &= 0xFB; // 1011
 80250e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80250ea:	4841      	ldr	r0, [pc, #260]	; (80251f0 <_ZN10SideSensor12SensorUpdateEv+0x138>)
 80250ec:	f002 fe82 	bl	8027df4 <HAL_GPIO_ReadPin>
 80250f0:	4603      	mov	r3, r0
 80250f2:	2b00      	cmp	r3, #0
 80250f4:	bf0c      	ite	eq
 80250f6:	2301      	moveq	r3, #1
 80250f8:	2300      	movne	r3, #0
 80250fa:	b2db      	uxtb	r3, r3
 80250fc:	2b00      	cmp	r3, #0
 80250fe:	d003      	beq.n	8025108 <_ZN10SideSensor12SensorUpdateEv+0x50>
 8025100:	7bfb      	ldrb	r3, [r7, #15]
 8025102:	f023 0304 	bic.w	r3, r3, #4
 8025106:	73fb      	strb	r3, [r7, #15]
    if(IO_INSIDE_R == 0)  io_state &= 0xFD; // 1101
 8025108:	f44f 7180 	mov.w	r1, #256	; 0x100
 802510c:	4838      	ldr	r0, [pc, #224]	; (80251f0 <_ZN10SideSensor12SensorUpdateEv+0x138>)
 802510e:	f002 fe71 	bl	8027df4 <HAL_GPIO_ReadPin>
 8025112:	4603      	mov	r3, r0
 8025114:	2b00      	cmp	r3, #0
 8025116:	bf0c      	ite	eq
 8025118:	2301      	moveq	r3, #1
 802511a:	2300      	movne	r3, #0
 802511c:	b2db      	uxtb	r3, r3
 802511e:	2b00      	cmp	r3, #0
 8025120:	d003      	beq.n	802512a <_ZN10SideSensor12SensorUpdateEv+0x72>
 8025122:	7bfb      	ldrb	r3, [r7, #15]
 8025124:	f023 0302 	bic.w	r3, r3, #2
 8025128:	73fb      	strb	r3, [r7, #15]
    if(IO_OUTSIDE_R == 0) io_state &= 0xFE; // 1110
 802512a:	2104      	movs	r1, #4
 802512c:	4831      	ldr	r0, [pc, #196]	; (80251f4 <_ZN10SideSensor12SensorUpdateEv+0x13c>)
 802512e:	f002 fe61 	bl	8027df4 <HAL_GPIO_ReadPin>
 8025132:	4603      	mov	r3, r0
 8025134:	2b00      	cmp	r3, #0
 8025136:	bf0c      	ite	eq
 8025138:	2301      	moveq	r3, #1
 802513a:	2300      	movne	r3, #0
 802513c:	b2db      	uxtb	r3, r3
 802513e:	2b00      	cmp	r3, #0
 8025140:	d003      	beq.n	802514a <_ZN10SideSensor12SensorUpdateEv+0x92>
 8025142:	7bfb      	ldrb	r3, [r7, #15]
 8025144:	f023 0301 	bic.w	r3, r3, #1
 8025148:	73fb      	strb	r3, [r7, #15]

    read_state_flags_ <<= 4;
 802514a:	687b      	ldr	r3, [r7, #4]
 802514c:	781b      	ldrb	r3, [r3, #0]
 802514e:	011b      	lsls	r3, r3, #4
 8025150:	b2da      	uxtb	r2, r3
 8025152:	687b      	ldr	r3, [r7, #4]
 8025154:	701a      	strb	r2, [r3, #0]

    switch(io_state)
 8025156:	7bfb      	ldrb	r3, [r7, #15]
 8025158:	3bf0      	subs	r3, #240	; 0xf0
 802515a:	2b0f      	cmp	r3, #15
 802515c:	d842      	bhi.n	80251e4 <_ZN10SideSensor12SensorUpdateEv+0x12c>
 802515e:	a201      	add	r2, pc, #4	; (adr r2, 8025164 <_ZN10SideSensor12SensorUpdateEv+0xac>)
 8025160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025164:	080251d5 	.word	0x080251d5
 8025168:	080251d5 	.word	0x080251d5
 802516c:	080251d5 	.word	0x080251d5
 8025170:	080251c5 	.word	0x080251c5
 8025174:	080251d5 	.word	0x080251d5
 8025178:	080251e5 	.word	0x080251e5
 802517c:	080251d5 	.word	0x080251d5
 8025180:	080251c5 	.word	0x080251c5
 8025184:	080251d5 	.word	0x080251d5
 8025188:	080251d5 	.word	0x080251d5
 802518c:	080251e5 	.word	0x080251e5
 8025190:	080251c5 	.word	0x080251c5
 8025194:	080251b5 	.word	0x080251b5
 8025198:	080251e5 	.word	0x080251e5
 802519c:	080251e5 	.word	0x080251e5
 80251a0:	080251a5 	.word	0x080251a5
    {
        case 0xFF: // 1111
            read_state_flags_ |= 0x08; break;
 80251a4:	687b      	ldr	r3, [r7, #4]
 80251a6:	781b      	ldrb	r3, [r3, #0]
 80251a8:	f043 0308 	orr.w	r3, r3, #8
 80251ac:	b2da      	uxtb	r2, r3
 80251ae:	687b      	ldr	r3, [r7, #4]
 80251b0:	701a      	strb	r2, [r3, #0]
 80251b2:	e018      	b.n	80251e6 <_ZN10SideSensor12SensorUpdateEv+0x12e>
        case 0xFC: // 1100  If through goal, increase pattern.
            read_state_flags_ |= 0x04; break;
 80251b4:	687b      	ldr	r3, [r7, #4]
 80251b6:	781b      	ldrb	r3, [r3, #0]
 80251b8:	f043 0304 	orr.w	r3, r3, #4
 80251bc:	b2da      	uxtb	r2, r3
 80251be:	687b      	ldr	r3, [r7, #4]
 80251c0:	701a      	strb	r2, [r3, #0]
 80251c2:	e010      	b.n	80251e6 <_ZN10SideSensor12SensorUpdateEv+0x12e>
        case 0xFB: // 1011
        case 0xF7: // 0111
        case 0xF3: // 0011
            read_state_flags_ |= 0x02; break;
 80251c4:	687b      	ldr	r3, [r7, #4]
 80251c6:	781b      	ldrb	r3, [r3, #0]
 80251c8:	f043 0302 	orr.w	r3, r3, #2
 80251cc:	b2da      	uxtb	r2, r3
 80251ce:	687b      	ldr	r3, [r7, #4]
 80251d0:	701a      	strb	r2, [r3, #0]
 80251d2:	e008      	b.n	80251e6 <_ZN10SideSensor12SensorUpdateEv+0x12e>
        case 0xF4: // 0100
        case 0xF0: // 0000
        case 0xF1: // 0001
        case 0xF8: // 1000
        case 0xF9: // 1001
            read_state_flags_ |= 0x01; break;
 80251d4:	687b      	ldr	r3, [r7, #4]
 80251d6:	781b      	ldrb	r3, [r3, #0]
 80251d8:	f043 0301 	orr.w	r3, r3, #1
 80251dc:	b2da      	uxtb	r2, r3
 80251de:	687b      	ldr	r3, [r7, #4]
 80251e0:	701a      	strb	r2, [r3, #0]
 80251e2:	e000      	b.n	80251e6 <_ZN10SideSensor12SensorUpdateEv+0x12e>
        default: break;
 80251e4:	bf00      	nop
    }
}
 80251e6:	bf00      	nop
 80251e8:	3710      	adds	r7, #16
 80251ea:	46bd      	mov	sp, r7
 80251ec:	bd80      	pop	{r7, pc}
 80251ee:	bf00      	nop
 80251f0:	40020400 	.word	0x40020400
 80251f4:	40020c00 	.word	0x40020c00

080251f8 <_ZN10SideSensor14IgnoreJudgmentEv>:

void SideSensor::IgnoreJudgment()
{
 80251f8:	b580      	push	{r7, lr}
 80251fa:	b084      	sub	sp, #16
 80251fc:	af00      	add	r7, sp, #0
 80251fe:	6078      	str	r0, [r7, #4]
    uint8_t ignore_flag = exception_flags_ & 0x01;
 8025200:	687b      	ldr	r3, [r7, #4]
 8025202:	789b      	ldrb	r3, [r3, #2]
 8025204:	f003 0301 	and.w	r3, r3, #1
 8025208:	73fb      	strb	r3, [r7, #15]

#ifdef DEBUG_MODE
    g_ignore_flag = ignore_flag;
 802520a:	4a22      	ldr	r2, [pc, #136]	; (8025294 <_ZN10SideSensor14IgnoreJudgmentEv+0x9c>)
 802520c:	7bfb      	ldrb	r3, [r7, #15]
 802520e:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(ignore_flag == 0x01)
 8025210:	7bfb      	ldrb	r3, [r7, #15]
 8025212:	2b01      	cmp	r3, #1
 8025214:	d111      	bne.n	802523a <_ZN10SideSensor14IgnoreJudgmentEv+0x42>
    {
        if(master_count_ < IGNORE_COUNT) master_count_++;
 8025216:	687b      	ldr	r3, [r7, #4]
 8025218:	78db      	ldrb	r3, [r3, #3]
 802521a:	2b04      	cmp	r3, #4
 802521c:	d806      	bhi.n	802522c <_ZN10SideSensor14IgnoreJudgmentEv+0x34>
 802521e:	687b      	ldr	r3, [r7, #4]
 8025220:	78db      	ldrb	r3, [r3, #3]
 8025222:	3301      	adds	r3, #1
 8025224:	b2da      	uxtb	r2, r3
 8025226:	687b      	ldr	r3, [r7, #4]
 8025228:	70da      	strb	r2, [r3, #3]
        {
            exception_flags_ &= 0xF3;
            CountUp();
        }
    }
}
 802522a:	e02e      	b.n	802528a <_ZN10SideSensor14IgnoreJudgmentEv+0x92>
        else exception_flags_ >>= 1; 
 802522c:	687b      	ldr	r3, [r7, #4]
 802522e:	789b      	ldrb	r3, [r3, #2]
 8025230:	105b      	asrs	r3, r3, #1
 8025232:	b2da      	uxtb	r2, r3
 8025234:	687b      	ldr	r3, [r7, #4]
 8025236:	709a      	strb	r2, [r3, #2]
}
 8025238:	e027      	b.n	802528a <_ZN10SideSensor14IgnoreJudgmentEv+0x92>
    else if(ignore_flag == 0x00)
 802523a:	7bfb      	ldrb	r3, [r7, #15]
 802523c:	2b00      	cmp	r3, #0
 802523e:	d124      	bne.n	802528a <_ZN10SideSensor14IgnoreJudgmentEv+0x92>
        SensorUpdate();
 8025240:	6878      	ldr	r0, [r7, #4]
 8025242:	f7ff ff39 	bl	80250b8 <_ZN10SideSensor12SensorUpdateEv>
        uint8_t now_state = read_state_flags_;
 8025246:	687b      	ldr	r3, [r7, #4]
 8025248:	781b      	ldrb	r3, [r3, #0]
 802524a:	73bb      	strb	r3, [r7, #14]
        uint8_t pre_state = (now_state << 4) | (now_state >> 4);
 802524c:	7bbb      	ldrb	r3, [r7, #14]
 802524e:	011b      	lsls	r3, r3, #4
 8025250:	b25a      	sxtb	r2, r3
 8025252:	7bbb      	ldrb	r3, [r7, #14]
 8025254:	111b      	asrs	r3, r3, #4
 8025256:	b25b      	sxtb	r3, r3
 8025258:	4313      	orrs	r3, r2
 802525a:	b25b      	sxtb	r3, r3
 802525c:	737b      	strb	r3, [r7, #13]
        if(pre_state != now_state)
 802525e:	7b7a      	ldrb	r2, [r7, #13]
 8025260:	7bbb      	ldrb	r3, [r7, #14]
 8025262:	429a      	cmp	r2, r3
 8025264:	d003      	beq.n	802526e <_ZN10SideSensor14IgnoreJudgmentEv+0x76>
            NoiseTolerance();
 8025266:	6878      	ldr	r0, [r7, #4]
 8025268:	f000 f816 	bl	8025298 <_ZN10SideSensor14NoiseToleranceEv>
}
 802526c:	e00d      	b.n	802528a <_ZN10SideSensor14IgnoreJudgmentEv+0x92>
        else if(pre_state == now_state)
 802526e:	7b7a      	ldrb	r2, [r7, #13]
 8025270:	7bbb      	ldrb	r3, [r7, #14]
 8025272:	429a      	cmp	r2, r3
 8025274:	d109      	bne.n	802528a <_ZN10SideSensor14IgnoreJudgmentEv+0x92>
            exception_flags_ &= 0xF3;
 8025276:	687b      	ldr	r3, [r7, #4]
 8025278:	789b      	ldrb	r3, [r3, #2]
 802527a:	f023 030c 	bic.w	r3, r3, #12
 802527e:	b2da      	uxtb	r2, r3
 8025280:	687b      	ldr	r3, [r7, #4]
 8025282:	709a      	strb	r2, [r3, #2]
            CountUp();
 8025284:	6878      	ldr	r0, [r7, #4]
 8025286:	f000 f855 	bl	8025334 <_ZN10SideSensor7CountUpEv>
}
 802528a:	bf00      	nop
 802528c:	3710      	adds	r7, #16
 802528e:	46bd      	mov	sp, r7
 8025290:	bd80      	pop	{r7, pc}
 8025292:	bf00      	nop
 8025294:	20000254 	.word	0x20000254

08025298 <_ZN10SideSensor14NoiseToleranceEv>:

void SideSensor::NoiseTolerance()
{
 8025298:	b580      	push	{r7, lr}
 802529a:	b084      	sub	sp, #16
 802529c:	af00      	add	r7, sp, #0
 802529e:	6078      	str	r0, [r7, #4]
    uint8_t noise_count = (exception_flags_ & 0x0C) >> 2;
 80252a0:	687b      	ldr	r3, [r7, #4]
 80252a2:	789b      	ldrb	r3, [r3, #2]
 80252a4:	109b      	asrs	r3, r3, #2
 80252a6:	b2db      	uxtb	r3, r3
 80252a8:	f003 0303 	and.w	r3, r3, #3
 80252ac:	73fb      	strb	r3, [r7, #15]

    if(noise_count == 0x00)
 80252ae:	7bfb      	ldrb	r3, [r7, #15]
 80252b0:	2b00      	cmp	r3, #0
 80252b2:	d11f      	bne.n	80252f4 <_ZN10SideSensor14NoiseToleranceEv+0x5c>
    {
        exception_flags_ = (exception_flags_ & 0x0F) | (read_state_flags_ & 0xF0);
 80252b4:	687b      	ldr	r3, [r7, #4]
 80252b6:	789b      	ldrb	r3, [r3, #2]
 80252b8:	f003 030f 	and.w	r3, r3, #15
 80252bc:	b2da      	uxtb	r2, r3
 80252be:	687b      	ldr	r3, [r7, #4]
 80252c0:	781b      	ldrb	r3, [r3, #0]
 80252c2:	f023 030f 	bic.w	r3, r3, #15
 80252c6:	b2db      	uxtb	r3, r3
 80252c8:	4313      	orrs	r3, r2
 80252ca:	b2da      	uxtb	r2, r3
 80252cc:	687b      	ldr	r3, [r7, #4]
 80252ce:	709a      	strb	r2, [r3, #2]
        noise_count++;
 80252d0:	7bfb      	ldrb	r3, [r7, #15]
 80252d2:	3301      	adds	r3, #1
 80252d4:	73fb      	strb	r3, [r7, #15]
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
 80252d6:	687b      	ldr	r3, [r7, #4]
 80252d8:	789b      	ldrb	r3, [r3, #2]
 80252da:	b25b      	sxtb	r3, r3
 80252dc:	f023 030c 	bic.w	r3, r3, #12
 80252e0:	b25a      	sxtb	r2, r3
 80252e2:	7bfb      	ldrb	r3, [r7, #15]
 80252e4:	009b      	lsls	r3, r3, #2
 80252e6:	b25b      	sxtb	r3, r3
 80252e8:	4313      	orrs	r3, r2
 80252ea:	b25b      	sxtb	r3, r3
 80252ec:	b2da      	uxtb	r2, r3
 80252ee:	687b      	ldr	r3, [r7, #4]
 80252f0:	709a      	strb	r2, [r3, #2]
        noise_count++;
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
        CountUp();
    }
    else master_count_ = 0;
}
 80252f2:	e01a      	b.n	802532a <_ZN10SideSensor14NoiseToleranceEv+0x92>
    else if(noise_count == 0x01)
 80252f4:	7bfb      	ldrb	r3, [r7, #15]
 80252f6:	2b01      	cmp	r3, #1
 80252f8:	d114      	bne.n	8025324 <_ZN10SideSensor14NoiseToleranceEv+0x8c>
        noise_count++;
 80252fa:	7bfb      	ldrb	r3, [r7, #15]
 80252fc:	3301      	adds	r3, #1
 80252fe:	73fb      	strb	r3, [r7, #15]
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
 8025300:	687b      	ldr	r3, [r7, #4]
 8025302:	789b      	ldrb	r3, [r3, #2]
 8025304:	b25b      	sxtb	r3, r3
 8025306:	f023 030c 	bic.w	r3, r3, #12
 802530a:	b25a      	sxtb	r2, r3
 802530c:	7bfb      	ldrb	r3, [r7, #15]
 802530e:	009b      	lsls	r3, r3, #2
 8025310:	b25b      	sxtb	r3, r3
 8025312:	4313      	orrs	r3, r2
 8025314:	b25b      	sxtb	r3, r3
 8025316:	b2da      	uxtb	r2, r3
 8025318:	687b      	ldr	r3, [r7, #4]
 802531a:	709a      	strb	r2, [r3, #2]
        CountUp();
 802531c:	6878      	ldr	r0, [r7, #4]
 802531e:	f000 f809 	bl	8025334 <_ZN10SideSensor7CountUpEv>
}
 8025322:	e002      	b.n	802532a <_ZN10SideSensor14NoiseToleranceEv+0x92>
    else master_count_ = 0;
 8025324:	687b      	ldr	r3, [r7, #4]
 8025326:	2200      	movs	r2, #0
 8025328:	70da      	strb	r2, [r3, #3]
}
 802532a:	bf00      	nop
 802532c:	3710      	adds	r7, #16
 802532e:	46bd      	mov	sp, r7
 8025330:	bd80      	pop	{r7, pc}
	...

08025334 <_ZN10SideSensor7CountUpEv>:

void SideSensor::CountUp()
{
 8025334:	b480      	push	{r7}
 8025336:	b087      	sub	sp, #28
 8025338:	af00      	add	r7, sp, #0
 802533a:	6078      	str	r0, [r7, #4]
    uint8_t pre_noise_state = exception_flags_ >> 4;
 802533c:	687b      	ldr	r3, [r7, #4]
 802533e:	789b      	ldrb	r3, [r3, #2]
 8025340:	111b      	asrs	r3, r3, #4
 8025342:	75fb      	strb	r3, [r7, #23]
    uint8_t current_state   = read_state_flags_ & 0x0F;
 8025344:	687b      	ldr	r3, [r7, #4]
 8025346:	781b      	ldrb	r3, [r3, #0]
 8025348:	f003 030f 	and.w	r3, r3, #15
 802534c:	75bb      	strb	r3, [r7, #22]

    if(pre_noise_state != current_state)
 802534e:	7dfa      	ldrb	r2, [r7, #23]
 8025350:	7dbb      	ldrb	r3, [r7, #22]
 8025352:	429a      	cmp	r2, r3
 8025354:	d012      	beq.n	802537c <_ZN10SideSensor7CountUpEv+0x48>
    {
        exception_flags_ = (exception_flags_ & 0x0F) | (read_state_flags_ << 4);
 8025356:	687b      	ldr	r3, [r7, #4]
 8025358:	789b      	ldrb	r3, [r3, #2]
 802535a:	b25b      	sxtb	r3, r3
 802535c:	f003 030f 	and.w	r3, r3, #15
 8025360:	b25a      	sxtb	r2, r3
 8025362:	687b      	ldr	r3, [r7, #4]
 8025364:	781b      	ldrb	r3, [r3, #0]
 8025366:	011b      	lsls	r3, r3, #4
 8025368:	b25b      	sxtb	r3, r3
 802536a:	4313      	orrs	r3, r2
 802536c:	b25b      	sxtb	r3, r3
 802536e:	b2da      	uxtb	r2, r3
 8025370:	687b      	ldr	r3, [r7, #4]
 8025372:	709a      	strb	r2, [r3, #2]
        master_count_ = 0;
 8025374:	687b      	ldr	r3, [r7, #4]
 8025376:	2200      	movs	r2, #0
 8025378:	70da      	strb	r2, [r3, #3]
 802537a:	e009      	b.n	8025390 <_ZN10SideSensor7CountUpEv+0x5c>
    }
    else if(master_count_ < MAX_INTERRUPT_COUNT) master_count_++;
 802537c:	687b      	ldr	r3, [r7, #4]
 802537e:	78db      	ldrb	r3, [r3, #3]
 8025380:	2bf9      	cmp	r3, #249	; 0xf9
 8025382:	d805      	bhi.n	8025390 <_ZN10SideSensor7CountUpEv+0x5c>
 8025384:	687b      	ldr	r3, [r7, #4]
 8025386:	78db      	ldrb	r3, [r3, #3]
 8025388:	3301      	adds	r3, #1
 802538a:	b2da      	uxtb	r2, r3
 802538c:	687b      	ldr	r3, [r7, #4]
 802538e:	70da      	strb	r2, [r3, #3]

#ifdef DEBUG_MODE
    g_pre_noise_state_cntup = pre_noise_state;
 8025390:	4a9a      	ldr	r2, [pc, #616]	; (80255fc <_ZN10SideSensor7CountUpEv+0x2c8>)
 8025392:	7dfb      	ldrb	r3, [r7, #23]
 8025394:	7013      	strb	r3, [r2, #0]
    g_current_state_cntup   = current_state;
 8025396:	4a9a      	ldr	r2, [pc, #616]	; (8025600 <_ZN10SideSensor7CountUpEv+0x2cc>)
 8025398:	7dbb      	ldrb	r3, [r7, #22]
 802539a:	7013      	strb	r3, [r2, #0]
    g_exception_flags_cntup = exception_flags_;
 802539c:	687b      	ldr	r3, [r7, #4]
 802539e:	789a      	ldrb	r2, [r3, #2]
 80253a0:	4b98      	ldr	r3, [pc, #608]	; (8025604 <_ZN10SideSensor7CountUpEv+0x2d0>)
 80253a2:	701a      	strb	r2, [r3, #0]
    g_master_count_cntup    = master_count_;
 80253a4:	687b      	ldr	r3, [r7, #4]
 80253a6:	78da      	ldrb	r2, [r3, #3]
 80253a8:	4b97      	ldr	r3, [pc, #604]	; (8025608 <_ZN10SideSensor7CountUpEv+0x2d4>)
 80253aa:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

    if(current_state == 0x08 && master_count_ >= BLACK_BLACK_COUNT)
 80253ac:	7dbb      	ldrb	r3, [r7, #22]
 80253ae:	2b08      	cmp	r3, #8
 80253b0:	d10e      	bne.n	80253d0 <_ZN10SideSensor7CountUpEv+0x9c>
 80253b2:	687b      	ldr	r3, [r7, #4]
 80253b4:	78db      	ldrb	r3, [r3, #3]
 80253b6:	2b01      	cmp	r3, #1
 80253b8:	d90a      	bls.n	80253d0 <_ZN10SideSensor7CountUpEv+0x9c>
    {
        write_state_flags_ = (write_state_flags_ & 0xF0) | 0x08;
 80253ba:	687b      	ldr	r3, [r7, #4]
 80253bc:	785b      	ldrb	r3, [r3, #1]
 80253be:	f023 030f 	bic.w	r3, r3, #15
 80253c2:	b2db      	uxtb	r3, r3
 80253c4:	f043 0308 	orr.w	r3, r3, #8
 80253c8:	b2da      	uxtb	r2, r3
 80253ca:	687b      	ldr	r3, [r7, #4]
 80253cc:	705a      	strb	r2, [r3, #1]
 80253ce:	e037      	b.n	8025440 <_ZN10SideSensor7CountUpEv+0x10c>
    }
    else if(current_state == 0x04 && master_count_ >= BLACK_WHITE_COUNT)
 80253d0:	7dbb      	ldrb	r3, [r7, #22]
 80253d2:	2b04      	cmp	r3, #4
 80253d4:	d10b      	bne.n	80253ee <_ZN10SideSensor7CountUpEv+0xba>
 80253d6:	687b      	ldr	r3, [r7, #4]
 80253d8:	78db      	ldrb	r3, [r3, #3]
 80253da:	2b00      	cmp	r3, #0
 80253dc:	d007      	beq.n	80253ee <_ZN10SideSensor7CountUpEv+0xba>
    {
        write_state_flags_ |= 0x04;
 80253de:	687b      	ldr	r3, [r7, #4]
 80253e0:	785b      	ldrb	r3, [r3, #1]
 80253e2:	f043 0304 	orr.w	r3, r3, #4
 80253e6:	b2da      	uxtb	r2, r3
 80253e8:	687b      	ldr	r3, [r7, #4]
 80253ea:	705a      	strb	r2, [r3, #1]
 80253ec:	e028      	b.n	8025440 <_ZN10SideSensor7CountUpEv+0x10c>
    }
    else if(current_state == 0x02 && master_count_ >= WHITE_BLACK_COUNT)
 80253ee:	7dbb      	ldrb	r3, [r7, #22]
 80253f0:	2b02      	cmp	r3, #2
 80253f2:	d10b      	bne.n	802540c <_ZN10SideSensor7CountUpEv+0xd8>
 80253f4:	687b      	ldr	r3, [r7, #4]
 80253f6:	78db      	ldrb	r3, [r3, #3]
 80253f8:	2b00      	cmp	r3, #0
 80253fa:	d007      	beq.n	802540c <_ZN10SideSensor7CountUpEv+0xd8>
    {
        write_state_flags_ |= 0x02;
 80253fc:	687b      	ldr	r3, [r7, #4]
 80253fe:	785b      	ldrb	r3, [r3, #1]
 8025400:	f043 0302 	orr.w	r3, r3, #2
 8025404:	b2da      	uxtb	r2, r3
 8025406:	687b      	ldr	r3, [r7, #4]
 8025408:	705a      	strb	r2, [r3, #1]
 802540a:	e019      	b.n	8025440 <_ZN10SideSensor7CountUpEv+0x10c>
    }
    else if(current_state == 0x01 && master_count_ >= WHITE_WHITE_COUNT)
 802540c:	7dbb      	ldrb	r3, [r7, #22]
 802540e:	2b01      	cmp	r3, #1
 8025410:	d116      	bne.n	8025440 <_ZN10SideSensor7CountUpEv+0x10c>
    {
        write_state_flags_ = (write_state_flags_ & 0xC0) | 0x01;
 8025412:	687b      	ldr	r3, [r7, #4]
 8025414:	785b      	ldrb	r3, [r3, #1]
 8025416:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 802541a:	b2db      	uxtb	r3, r3
 802541c:	f043 0301 	orr.w	r3, r3, #1
 8025420:	b2da      	uxtb	r2, r3
 8025422:	687b      	ldr	r3, [r7, #4]
 8025424:	705a      	strb	r2, [r3, #1]
        exception_flags_ = (exception_flags_ << 8) | 0x01;
 8025426:	687b      	ldr	r3, [r7, #4]
 8025428:	789b      	ldrb	r3, [r3, #2]
 802542a:	021b      	lsls	r3, r3, #8
 802542c:	b25b      	sxtb	r3, r3
 802542e:	f043 0301 	orr.w	r3, r3, #1
 8025432:	b25b      	sxtb	r3, r3
 8025434:	b2da      	uxtb	r2, r3
 8025436:	687b      	ldr	r3, [r7, #4]
 8025438:	709a      	strb	r2, [r3, #2]
        master_count_ = 0;
 802543a:	687b      	ldr	r3, [r7, #4]
 802543c:	2200      	movs	r2, #0
 802543e:	70da      	strb	r2, [r3, #3]
    }

    uint8_t black_flag   = write_state_flags_ & 0x08;
 8025440:	687b      	ldr	r3, [r7, #4]
 8025442:	785b      	ldrb	r3, [r3, #1]
 8025444:	f003 0308 	and.w	r3, r3, #8
 8025448:	757b      	strb	r3, [r7, #21]
    uint8_t goal_flag    = write_state_flags_ & 0x04;
 802544a:	687b      	ldr	r3, [r7, #4]
 802544c:	785b      	ldrb	r3, [r3, #1]
 802544e:	f003 0304 	and.w	r3, r3, #4
 8025452:	753b      	strb	r3, [r7, #20]
    uint8_t goal_reach   = write_state_flags_ & 0x20;
 8025454:	687b      	ldr	r3, [r7, #4]
 8025456:	785b      	ldrb	r3, [r3, #1]
 8025458:	f003 0320 	and.w	r3, r3, #32
 802545c:	74fb      	strb	r3, [r7, #19]
    uint8_t goal_count   = (write_state_flags_ & 0xC0) >> 6;
 802545e:	687b      	ldr	r3, [r7, #4]
 8025460:	785b      	ldrb	r3, [r3, #1]
 8025462:	099b      	lsrs	r3, r3, #6
 8025464:	74bb      	strb	r3, [r7, #18]
    uint8_t corner_flag  = write_state_flags_ & 0x02;
 8025466:	687b      	ldr	r3, [r7, #4]
 8025468:	785b      	ldrb	r3, [r3, #1]
 802546a:	f003 0302 	and.w	r3, r3, #2
 802546e:	747b      	strb	r3, [r7, #17]
    uint8_t corner_reach = write_state_flags_ & 0x10;
 8025470:	687b      	ldr	r3, [r7, #4]
 8025472:	785b      	ldrb	r3, [r3, #1]
 8025474:	f003 0310 	and.w	r3, r3, #16
 8025478:	743b      	strb	r3, [r7, #16]
    uint8_t cross_flag   = write_state_flags_ & 0x01;
 802547a:	687b      	ldr	r3, [r7, #4]
 802547c:	785b      	ldrb	r3, [r3, #1]
 802547e:	f003 0301 	and.w	r3, r3, #1
 8025482:	73fb      	strb	r3, [r7, #15]

#ifdef DEBUG_MODE
    g_exception_flags_cross = exception_flags_;
 8025484:	687b      	ldr	r3, [r7, #4]
 8025486:	789a      	ldrb	r2, [r3, #2]
 8025488:	4b60      	ldr	r3, [pc, #384]	; (802560c <_ZN10SideSensor7CountUpEv+0x2d8>)
 802548a:	701a      	strb	r2, [r3, #0]
    g_master_count_cross    = master_count_;
 802548c:	687b      	ldr	r3, [r7, #4]
 802548e:	78da      	ldrb	r2, [r3, #3]
 8025490:	4b5f      	ldr	r3, [pc, #380]	; (8025610 <_ZN10SideSensor7CountUpEv+0x2dc>)
 8025492:	701a      	strb	r2, [r3, #0]
    g_write_state_cntup  = write_state_flags_;
 8025494:	687b      	ldr	r3, [r7, #4]
 8025496:	785a      	ldrb	r2, [r3, #1]
 8025498:	4b5e      	ldr	r3, [pc, #376]	; (8025614 <_ZN10SideSensor7CountUpEv+0x2e0>)
 802549a:	701a      	strb	r2, [r3, #0]
    g_goal_reach_cntup   = goal_reach   >> 5;
 802549c:	7cfb      	ldrb	r3, [r7, #19]
 802549e:	115b      	asrs	r3, r3, #5
 80254a0:	b2da      	uxtb	r2, r3
 80254a2:	4b5d      	ldr	r3, [pc, #372]	; (8025618 <_ZN10SideSensor7CountUpEv+0x2e4>)
 80254a4:	701a      	strb	r2, [r3, #0]
    g_corner_reach_cntup = corner_reach >> 4;
 80254a6:	7c3b      	ldrb	r3, [r7, #16]
 80254a8:	111b      	asrs	r3, r3, #4
 80254aa:	b2da      	uxtb	r2, r3
 80254ac:	4b5b      	ldr	r3, [pc, #364]	; (802561c <_ZN10SideSensor7CountUpEv+0x2e8>)
 80254ae:	701a      	strb	r2, [r3, #0]
    g_black_flag_cntup   = black_flag   >> 3;
 80254b0:	7d7b      	ldrb	r3, [r7, #21]
 80254b2:	10db      	asrs	r3, r3, #3
 80254b4:	b2da      	uxtb	r2, r3
 80254b6:	4b5a      	ldr	r3, [pc, #360]	; (8025620 <_ZN10SideSensor7CountUpEv+0x2ec>)
 80254b8:	701a      	strb	r2, [r3, #0]
    g_goal_flag_cntup    = goal_flag    >> 2;
 80254ba:	7d3b      	ldrb	r3, [r7, #20]
 80254bc:	109b      	asrs	r3, r3, #2
 80254be:	b2da      	uxtb	r2, r3
 80254c0:	4b58      	ldr	r3, [pc, #352]	; (8025624 <_ZN10SideSensor7CountUpEv+0x2f0>)
 80254c2:	701a      	strb	r2, [r3, #0]
    g_corner_flag_cntup  = corner_flag  >> 1;
 80254c4:	7c7b      	ldrb	r3, [r7, #17]
 80254c6:	105b      	asrs	r3, r3, #1
 80254c8:	b2da      	uxtb	r2, r3
 80254ca:	4b57      	ldr	r3, [pc, #348]	; (8025628 <_ZN10SideSensor7CountUpEv+0x2f4>)
 80254cc:	701a      	strb	r2, [r3, #0]
    g_cross_flag_cntup   = cross_flag;  // LSB
 80254ce:	4a57      	ldr	r2, [pc, #348]	; (802562c <_ZN10SideSensor7CountUpEv+0x2f8>)
 80254d0:	7bfb      	ldrb	r3, [r7, #15]
 80254d2:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE
    
    if(goal_flag == 0x04 && black_flag == 0x08)
 80254d4:	7d3b      	ldrb	r3, [r7, #20]
 80254d6:	2b04      	cmp	r3, #4
 80254d8:	d111      	bne.n	80254fe <_ZN10SideSensor7CountUpEv+0x1ca>
 80254da:	7d7b      	ldrb	r3, [r7, #21]
 80254dc:	2b08      	cmp	r3, #8
 80254de:	d10e      	bne.n	80254fe <_ZN10SideSensor7CountUpEv+0x1ca>
    {
        write_state_flags_ &= 0xF7;
 80254e0:	687b      	ldr	r3, [r7, #4]
 80254e2:	785b      	ldrb	r3, [r3, #1]
 80254e4:	f023 0308 	bic.w	r3, r3, #8
 80254e8:	b2da      	uxtb	r2, r3
 80254ea:	687b      	ldr	r3, [r7, #4]
 80254ec:	705a      	strb	r2, [r3, #1]
        write_state_flags_ |= 0x20;
 80254ee:	687b      	ldr	r3, [r7, #4]
 80254f0:	785b      	ldrb	r3, [r3, #1]
 80254f2:	f043 0320 	orr.w	r3, r3, #32
 80254f6:	b2da      	uxtb	r2, r3
 80254f8:	687b      	ldr	r3, [r7, #4]
 80254fa:	705a      	strb	r2, [r3, #1]
 80254fc:	e057      	b.n	80255ae <_ZN10SideSensor7CountUpEv+0x27a>
    }
    else if(goal_reach == 0x20 && black_flag == 0x08)
 80254fe:	7cfb      	ldrb	r3, [r7, #19]
 8025500:	2b20      	cmp	r3, #32
 8025502:	d11b      	bne.n	802553c <_ZN10SideSensor7CountUpEv+0x208>
 8025504:	7d7b      	ldrb	r3, [r7, #21]
 8025506:	2b08      	cmp	r3, #8
 8025508:	d118      	bne.n	802553c <_ZN10SideSensor7CountUpEv+0x208>
    {
        write_state_flags_ &= 0xDF;
 802550a:	687b      	ldr	r3, [r7, #4]
 802550c:	785b      	ldrb	r3, [r3, #1]
 802550e:	f023 0320 	bic.w	r3, r3, #32
 8025512:	b2da      	uxtb	r2, r3
 8025514:	687b      	ldr	r3, [r7, #4]
 8025516:	705a      	strb	r2, [r3, #1]
        goal_count++;
 8025518:	7cbb      	ldrb	r3, [r7, #18]
 802551a:	3301      	adds	r3, #1
 802551c:	74bb      	strb	r3, [r7, #18]
        write_state_flags_ = (write_state_flags_ & 0x3F) | (goal_count << 6);
 802551e:	687b      	ldr	r3, [r7, #4]
 8025520:	785b      	ldrb	r3, [r3, #1]
 8025522:	b25b      	sxtb	r3, r3
 8025524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8025528:	b25a      	sxtb	r2, r3
 802552a:	7cbb      	ldrb	r3, [r7, #18]
 802552c:	019b      	lsls	r3, r3, #6
 802552e:	b25b      	sxtb	r3, r3
 8025530:	4313      	orrs	r3, r2
 8025532:	b25b      	sxtb	r3, r3
 8025534:	b2da      	uxtb	r2, r3
 8025536:	687b      	ldr	r3, [r7, #4]
 8025538:	705a      	strb	r2, [r3, #1]
 802553a:	e038      	b.n	80255ae <_ZN10SideSensor7CountUpEv+0x27a>
    }
    else if(corner_flag == 0x02 && black_flag == 0x08)
 802553c:	7c7b      	ldrb	r3, [r7, #17]
 802553e:	2b02      	cmp	r3, #2
 8025540:	d111      	bne.n	8025566 <_ZN10SideSensor7CountUpEv+0x232>
 8025542:	7d7b      	ldrb	r3, [r7, #21]
 8025544:	2b08      	cmp	r3, #8
 8025546:	d10e      	bne.n	8025566 <_ZN10SideSensor7CountUpEv+0x232>
    {
        write_state_flags_ &= 0xF7;
 8025548:	687b      	ldr	r3, [r7, #4]
 802554a:	785b      	ldrb	r3, [r3, #1]
 802554c:	f023 0308 	bic.w	r3, r3, #8
 8025550:	b2da      	uxtb	r2, r3
 8025552:	687b      	ldr	r3, [r7, #4]
 8025554:	705a      	strb	r2, [r3, #1]
        write_state_flags_ |= 0x10;
 8025556:	687b      	ldr	r3, [r7, #4]
 8025558:	785b      	ldrb	r3, [r3, #1]
 802555a:	f043 0310 	orr.w	r3, r3, #16
 802555e:	b2da      	uxtb	r2, r3
 8025560:	687b      	ldr	r3, [r7, #4]
 8025562:	705a      	strb	r2, [r3, #1]
 8025564:	e023      	b.n	80255ae <_ZN10SideSensor7CountUpEv+0x27a>
    }
    else if(corner_reach == 0x10 && black_flag == 0x08)
 8025566:	7c3b      	ldrb	r3, [r7, #16]
 8025568:	2b10      	cmp	r3, #16
 802556a:	d110      	bne.n	802558e <_ZN10SideSensor7CountUpEv+0x25a>
 802556c:	7d7b      	ldrb	r3, [r7, #21]
 802556e:	2b08      	cmp	r3, #8
 8025570:	d10d      	bne.n	802558e <_ZN10SideSensor7CountUpEv+0x25a>
    {
        write_state_flags_ &= 0xEF;
 8025572:	687b      	ldr	r3, [r7, #4]
 8025574:	785b      	ldrb	r3, [r3, #1]
 8025576:	f023 0310 	bic.w	r3, r3, #16
 802557a:	b2da      	uxtb	r2, r3
 802557c:	687b      	ldr	r3, [r7, #4]
 802557e:	705a      	strb	r2, [r3, #1]
        corner_marker_count_++;
 8025580:	687b      	ldr	r3, [r7, #4]
 8025582:	791b      	ldrb	r3, [r3, #4]
 8025584:	3301      	adds	r3, #1
 8025586:	b2da      	uxtb	r2, r3
 8025588:	687b      	ldr	r3, [r7, #4]
 802558a:	711a      	strb	r2, [r3, #4]
 802558c:	e00f      	b.n	80255ae <_ZN10SideSensor7CountUpEv+0x27a>
    }
    else if(cross_flag == 0x01)
 802558e:	7bfb      	ldrb	r3, [r7, #15]
 8025590:	2b01      	cmp	r3, #1
 8025592:	d10c      	bne.n	80255ae <_ZN10SideSensor7CountUpEv+0x27a>
    {
        write_state_flags_ &= 0xFE;
 8025594:	687b      	ldr	r3, [r7, #4]
 8025596:	785b      	ldrb	r3, [r3, #1]
 8025598:	f023 0301 	bic.w	r3, r3, #1
 802559c:	b2da      	uxtb	r2, r3
 802559e:	687b      	ldr	r3, [r7, #4]
 80255a0:	705a      	strb	r2, [r3, #1]
        cross_line_count_++;
 80255a2:	687b      	ldr	r3, [r7, #4]
 80255a4:	795b      	ldrb	r3, [r3, #5]
 80255a6:	3301      	adds	r3, #1
 80255a8:	b2da      	uxtb	r2, r3
 80255aa:	687b      	ldr	r3, [r7, #4]
 80255ac:	715a      	strb	r2, [r3, #5]
    }

#ifdef DEBUG_MODE
    g_write_state_cntup_2  = write_state_flags_;
 80255ae:	687b      	ldr	r3, [r7, #4]
 80255b0:	785a      	ldrb	r2, [r3, #1]
 80255b2:	4b1f      	ldr	r3, [pc, #124]	; (8025630 <_ZN10SideSensor7CountUpEv+0x2fc>)
 80255b4:	701a      	strb	r2, [r3, #0]
    g_goal_reach_cntup_2   = goal_reach   >> 5;
 80255b6:	7cfb      	ldrb	r3, [r7, #19]
 80255b8:	115b      	asrs	r3, r3, #5
 80255ba:	b2da      	uxtb	r2, r3
 80255bc:	4b1d      	ldr	r3, [pc, #116]	; (8025634 <_ZN10SideSensor7CountUpEv+0x300>)
 80255be:	701a      	strb	r2, [r3, #0]
    g_corner_reach_cntup_2 = corner_reach >> 4;
 80255c0:	7c3b      	ldrb	r3, [r7, #16]
 80255c2:	111b      	asrs	r3, r3, #4
 80255c4:	b2da      	uxtb	r2, r3
 80255c6:	4b1c      	ldr	r3, [pc, #112]	; (8025638 <_ZN10SideSensor7CountUpEv+0x304>)
 80255c8:	701a      	strb	r2, [r3, #0]
    g_black_flag_cntup_2   = black_flag   >> 3;
 80255ca:	7d7b      	ldrb	r3, [r7, #21]
 80255cc:	10db      	asrs	r3, r3, #3
 80255ce:	b2da      	uxtb	r2, r3
 80255d0:	4b1a      	ldr	r3, [pc, #104]	; (802563c <_ZN10SideSensor7CountUpEv+0x308>)
 80255d2:	701a      	strb	r2, [r3, #0]
    g_goal_flag_cntup_2    = goal_flag    >> 2;
 80255d4:	7d3b      	ldrb	r3, [r7, #20]
 80255d6:	109b      	asrs	r3, r3, #2
 80255d8:	b2da      	uxtb	r2, r3
 80255da:	4b19      	ldr	r3, [pc, #100]	; (8025640 <_ZN10SideSensor7CountUpEv+0x30c>)
 80255dc:	701a      	strb	r2, [r3, #0]
    g_corner_flag_cntup_2  = corner_flag  >> 1;
 80255de:	7c7b      	ldrb	r3, [r7, #17]
 80255e0:	105b      	asrs	r3, r3, #1
 80255e2:	b2da      	uxtb	r2, r3
 80255e4:	4b17      	ldr	r3, [pc, #92]	; (8025644 <_ZN10SideSensor7CountUpEv+0x310>)
 80255e6:	701a      	strb	r2, [r3, #0]
    g_cross_flag_cntup_2   = cross_flag;  // LSB
 80255e8:	4a17      	ldr	r2, [pc, #92]	; (8025648 <_ZN10SideSensor7CountUpEv+0x314>)
 80255ea:	7bfb      	ldrb	r3, [r7, #15]
 80255ec:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE
}
 80255ee:	bf00      	nop
 80255f0:	371c      	adds	r7, #28
 80255f2:	46bd      	mov	sp, r7
 80255f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255f8:	4770      	bx	lr
 80255fa:	bf00      	nop
 80255fc:	20000257 	.word	0x20000257
 8025600:	20000258 	.word	0x20000258
 8025604:	20000259 	.word	0x20000259
 8025608:	2000025a 	.word	0x2000025a
 802560c:	2000025b 	.word	0x2000025b
 8025610:	2000025c 	.word	0x2000025c
 8025614:	2000025d 	.word	0x2000025d
 8025618:	2000025e 	.word	0x2000025e
 802561c:	2000025f 	.word	0x2000025f
 8025620:	20000260 	.word	0x20000260
 8025624:	20000261 	.word	0x20000261
 8025628:	20000262 	.word	0x20000262
 802562c:	20000263 	.word	0x20000263
 8025630:	20000264 	.word	0x20000264
 8025634:	20000265 	.word	0x20000265
 8025638:	20000266 	.word	0x20000266
 802563c:	20000267 	.word	0x20000267
 8025640:	20000268 	.word	0x20000268
 8025644:	20000269 	.word	0x20000269
 8025648:	2000026a 	.word	0x2000026a

0802564c <_ZN10SideSensor18GetGoalMarkerCountEv>:

uint8_t SideSensor::GetGoalMarkerCount()
{
 802564c:	b480      	push	{r7}
 802564e:	b083      	sub	sp, #12
 8025650:	af00      	add	r7, sp, #0
 8025652:	6078      	str	r0, [r7, #4]
    return (write_state_flags_ & 0xC0) >> 6;
 8025654:	687b      	ldr	r3, [r7, #4]
 8025656:	785b      	ldrb	r3, [r3, #1]
 8025658:	099b      	lsrs	r3, r3, #6
 802565a:	b2db      	uxtb	r3, r3
}
 802565c:	4618      	mov	r0, r3
 802565e:	370c      	adds	r7, #12
 8025660:	46bd      	mov	sp, r7
 8025662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025666:	4770      	bx	lr

08025668 <_ZN10SideSensor20GetCornerMarkerCountEv>:

uint8_t SideSensor::GetCornerMarkerCount()
{
 8025668:	b480      	push	{r7}
 802566a:	b083      	sub	sp, #12
 802566c:	af00      	add	r7, sp, #0
 802566e:	6078      	str	r0, [r7, #4]
    return corner_marker_count_;
 8025670:	687b      	ldr	r3, [r7, #4]
 8025672:	791b      	ldrb	r3, [r3, #4]
}
 8025674:	4618      	mov	r0, r3
 8025676:	370c      	adds	r7, #12
 8025678:	46bd      	mov	sp, r7
 802567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802567e:	4770      	bx	lr

08025680 <_ZN10SideSensor17GetCrossLineCountEv>:

uint8_t SideSensor::GetCrossLineCount()
{
 8025680:	b480      	push	{r7}
 8025682:	b083      	sub	sp, #12
 8025684:	af00      	add	r7, sp, #0
 8025686:	6078      	str	r0, [r7, #4]
    return cross_line_count_;
 8025688:	687b      	ldr	r3, [r7, #4]
 802568a:	795b      	ldrb	r3, [r3, #5]
 802568c:	4618      	mov	r0, r3
 802568e:	370c      	adds	r7, #12
 8025690:	46bd      	mov	sp, r7
 8025692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025696:	4770      	bx	lr

08025698 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8025698:	b480      	push	{r7}
 802569a:	b083      	sub	sp, #12
 802569c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802569e:	2300      	movs	r3, #0
 80256a0:	607b      	str	r3, [r7, #4]
 80256a2:	4b10      	ldr	r3, [pc, #64]	; (80256e4 <HAL_MspInit+0x4c>)
 80256a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80256a6:	4a0f      	ldr	r2, [pc, #60]	; (80256e4 <HAL_MspInit+0x4c>)
 80256a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80256ac:	6453      	str	r3, [r2, #68]	; 0x44
 80256ae:	4b0d      	ldr	r3, [pc, #52]	; (80256e4 <HAL_MspInit+0x4c>)
 80256b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80256b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80256b6:	607b      	str	r3, [r7, #4]
 80256b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80256ba:	2300      	movs	r3, #0
 80256bc:	603b      	str	r3, [r7, #0]
 80256be:	4b09      	ldr	r3, [pc, #36]	; (80256e4 <HAL_MspInit+0x4c>)
 80256c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80256c2:	4a08      	ldr	r2, [pc, #32]	; (80256e4 <HAL_MspInit+0x4c>)
 80256c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80256c8:	6413      	str	r3, [r2, #64]	; 0x40
 80256ca:	4b06      	ldr	r3, [pc, #24]	; (80256e4 <HAL_MspInit+0x4c>)
 80256cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80256ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80256d2:	603b      	str	r3, [r7, #0]
 80256d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80256d6:	bf00      	nop
 80256d8:	370c      	adds	r7, #12
 80256da:	46bd      	mov	sp, r7
 80256dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80256e0:	4770      	bx	lr
 80256e2:	bf00      	nop
 80256e4:	40023800 	.word	0x40023800

080256e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80256e8:	b580      	push	{r7, lr}
 80256ea:	b08a      	sub	sp, #40	; 0x28
 80256ec:	af00      	add	r7, sp, #0
 80256ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80256f0:	f107 0314 	add.w	r3, r7, #20
 80256f4:	2200      	movs	r2, #0
 80256f6:	601a      	str	r2, [r3, #0]
 80256f8:	605a      	str	r2, [r3, #4]
 80256fa:	609a      	str	r2, [r3, #8]
 80256fc:	60da      	str	r2, [r3, #12]
 80256fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8025700:	687b      	ldr	r3, [r7, #4]
 8025702:	681b      	ldr	r3, [r3, #0]
 8025704:	4a3c      	ldr	r2, [pc, #240]	; (80257f8 <HAL_ADC_MspInit+0x110>)
 8025706:	4293      	cmp	r3, r2
 8025708:	d171      	bne.n	80257ee <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 802570a:	2300      	movs	r3, #0
 802570c:	613b      	str	r3, [r7, #16]
 802570e:	4b3b      	ldr	r3, [pc, #236]	; (80257fc <HAL_ADC_MspInit+0x114>)
 8025710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025712:	4a3a      	ldr	r2, [pc, #232]	; (80257fc <HAL_ADC_MspInit+0x114>)
 8025714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8025718:	6453      	str	r3, [r2, #68]	; 0x44
 802571a:	4b38      	ldr	r3, [pc, #224]	; (80257fc <HAL_ADC_MspInit+0x114>)
 802571c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802571e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025722:	613b      	str	r3, [r7, #16]
 8025724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8025726:	2300      	movs	r3, #0
 8025728:	60fb      	str	r3, [r7, #12]
 802572a:	4b34      	ldr	r3, [pc, #208]	; (80257fc <HAL_ADC_MspInit+0x114>)
 802572c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802572e:	4a33      	ldr	r2, [pc, #204]	; (80257fc <HAL_ADC_MspInit+0x114>)
 8025730:	f043 0304 	orr.w	r3, r3, #4
 8025734:	6313      	str	r3, [r2, #48]	; 0x30
 8025736:	4b31      	ldr	r3, [pc, #196]	; (80257fc <HAL_ADC_MspInit+0x114>)
 8025738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802573a:	f003 0304 	and.w	r3, r3, #4
 802573e:	60fb      	str	r3, [r7, #12]
 8025740:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8025742:	2300      	movs	r3, #0
 8025744:	60bb      	str	r3, [r7, #8]
 8025746:	4b2d      	ldr	r3, [pc, #180]	; (80257fc <HAL_ADC_MspInit+0x114>)
 8025748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802574a:	4a2c      	ldr	r2, [pc, #176]	; (80257fc <HAL_ADC_MspInit+0x114>)
 802574c:	f043 0301 	orr.w	r3, r3, #1
 8025750:	6313      	str	r3, [r2, #48]	; 0x30
 8025752:	4b2a      	ldr	r3, [pc, #168]	; (80257fc <HAL_ADC_MspInit+0x114>)
 8025754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025756:	f003 0301 	and.w	r3, r3, #1
 802575a:	60bb      	str	r3, [r7, #8]
 802575c:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 802575e:	233f      	movs	r3, #63	; 0x3f
 8025760:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8025762:	2303      	movs	r3, #3
 8025764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025766:	2300      	movs	r3, #0
 8025768:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802576a:	f107 0314 	add.w	r3, r7, #20
 802576e:	4619      	mov	r1, r3
 8025770:	4823      	ldr	r0, [pc, #140]	; (8025800 <HAL_ADC_MspInit+0x118>)
 8025772:	f002 f9a5 	bl	8027ac0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8025776:	23ff      	movs	r3, #255	; 0xff
 8025778:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802577a:	2303      	movs	r3, #3
 802577c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802577e:	2300      	movs	r3, #0
 8025780:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8025782:	f107 0314 	add.w	r3, r7, #20
 8025786:	4619      	mov	r1, r3
 8025788:	481e      	ldr	r0, [pc, #120]	; (8025804 <HAL_ADC_MspInit+0x11c>)
 802578a:	f002 f999 	bl	8027ac0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 802578e:	4b1e      	ldr	r3, [pc, #120]	; (8025808 <HAL_ADC_MspInit+0x120>)
 8025790:	4a1e      	ldr	r2, [pc, #120]	; (802580c <HAL_ADC_MspInit+0x124>)
 8025792:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8025794:	4b1c      	ldr	r3, [pc, #112]	; (8025808 <HAL_ADC_MspInit+0x120>)
 8025796:	2200      	movs	r2, #0
 8025798:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 802579a:	4b1b      	ldr	r3, [pc, #108]	; (8025808 <HAL_ADC_MspInit+0x120>)
 802579c:	2200      	movs	r2, #0
 802579e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80257a0:	4b19      	ldr	r3, [pc, #100]	; (8025808 <HAL_ADC_MspInit+0x120>)
 80257a2:	2200      	movs	r2, #0
 80257a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80257a6:	4b18      	ldr	r3, [pc, #96]	; (8025808 <HAL_ADC_MspInit+0x120>)
 80257a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80257ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80257ae:	4b16      	ldr	r3, [pc, #88]	; (8025808 <HAL_ADC_MspInit+0x120>)
 80257b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80257b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80257b6:	4b14      	ldr	r3, [pc, #80]	; (8025808 <HAL_ADC_MspInit+0x120>)
 80257b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80257bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80257be:	4b12      	ldr	r3, [pc, #72]	; (8025808 <HAL_ADC_MspInit+0x120>)
 80257c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80257c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80257c6:	4b10      	ldr	r3, [pc, #64]	; (8025808 <HAL_ADC_MspInit+0x120>)
 80257c8:	2200      	movs	r2, #0
 80257ca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80257cc:	4b0e      	ldr	r3, [pc, #56]	; (8025808 <HAL_ADC_MspInit+0x120>)
 80257ce:	2200      	movs	r2, #0
 80257d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80257d2:	480d      	ldr	r0, [pc, #52]	; (8025808 <HAL_ADC_MspInit+0x120>)
 80257d4:	f001 fb30 	bl	8026e38 <HAL_DMA_Init>
 80257d8:	4603      	mov	r3, r0
 80257da:	2b00      	cmp	r3, #0
 80257dc:	d001      	beq.n	80257e2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80257de:	f7fe fb9f 	bl	8023f20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80257e2:	687b      	ldr	r3, [r7, #4]
 80257e4:	4a08      	ldr	r2, [pc, #32]	; (8025808 <HAL_ADC_MspInit+0x120>)
 80257e6:	639a      	str	r2, [r3, #56]	; 0x38
 80257e8:	4a07      	ldr	r2, [pc, #28]	; (8025808 <HAL_ADC_MspInit+0x120>)
 80257ea:	687b      	ldr	r3, [r7, #4]
 80257ec:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80257ee:	bf00      	nop
 80257f0:	3728      	adds	r7, #40	; 0x28
 80257f2:	46bd      	mov	sp, r7
 80257f4:	bd80      	pop	{r7, pc}
 80257f6:	bf00      	nop
 80257f8:	40012000 	.word	0x40012000
 80257fc:	40023800 	.word	0x40023800
 8025800:	40020800 	.word	0x40020800
 8025804:	40020000 	.word	0x40020000
 8025808:	20000878 	.word	0x20000878
 802580c:	40026410 	.word	0x40026410

08025810 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8025810:	b580      	push	{r7, lr}
 8025812:	b08a      	sub	sp, #40	; 0x28
 8025814:	af00      	add	r7, sp, #0
 8025816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025818:	f107 0314 	add.w	r3, r7, #20
 802581c:	2200      	movs	r2, #0
 802581e:	601a      	str	r2, [r3, #0]
 8025820:	605a      	str	r2, [r3, #4]
 8025822:	609a      	str	r2, [r3, #8]
 8025824:	60da      	str	r2, [r3, #12]
 8025826:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8025828:	687b      	ldr	r3, [r7, #4]
 802582a:	681b      	ldr	r3, [r3, #0]
 802582c:	4a19      	ldr	r2, [pc, #100]	; (8025894 <HAL_I2C_MspInit+0x84>)
 802582e:	4293      	cmp	r3, r2
 8025830:	d12c      	bne.n	802588c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8025832:	2300      	movs	r3, #0
 8025834:	613b      	str	r3, [r7, #16]
 8025836:	4b18      	ldr	r3, [pc, #96]	; (8025898 <HAL_I2C_MspInit+0x88>)
 8025838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802583a:	4a17      	ldr	r2, [pc, #92]	; (8025898 <HAL_I2C_MspInit+0x88>)
 802583c:	f043 0302 	orr.w	r3, r3, #2
 8025840:	6313      	str	r3, [r2, #48]	; 0x30
 8025842:	4b15      	ldr	r3, [pc, #84]	; (8025898 <HAL_I2C_MspInit+0x88>)
 8025844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025846:	f003 0302 	and.w	r3, r3, #2
 802584a:	613b      	str	r3, [r7, #16]
 802584c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 802584e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8025852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8025854:	2312      	movs	r3, #18
 8025856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8025858:	2301      	movs	r3, #1
 802585a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802585c:	2303      	movs	r3, #3
 802585e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8025860:	2304      	movs	r3, #4
 8025862:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8025864:	f107 0314 	add.w	r3, r7, #20
 8025868:	4619      	mov	r1, r3
 802586a:	480c      	ldr	r0, [pc, #48]	; (802589c <HAL_I2C_MspInit+0x8c>)
 802586c:	f002 f928 	bl	8027ac0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8025870:	2300      	movs	r3, #0
 8025872:	60fb      	str	r3, [r7, #12]
 8025874:	4b08      	ldr	r3, [pc, #32]	; (8025898 <HAL_I2C_MspInit+0x88>)
 8025876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025878:	4a07      	ldr	r2, [pc, #28]	; (8025898 <HAL_I2C_MspInit+0x88>)
 802587a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802587e:	6413      	str	r3, [r2, #64]	; 0x40
 8025880:	4b05      	ldr	r3, [pc, #20]	; (8025898 <HAL_I2C_MspInit+0x88>)
 8025882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8025888:	60fb      	str	r3, [r7, #12]
 802588a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 802588c:	bf00      	nop
 802588e:	3728      	adds	r7, #40	; 0x28
 8025890:	46bd      	mov	sp, r7
 8025892:	bd80      	pop	{r7, pc}
 8025894:	40005800 	.word	0x40005800
 8025898:	40023800 	.word	0x40023800
 802589c:	40020400 	.word	0x40020400

080258a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80258a0:	b580      	push	{r7, lr}
 80258a2:	b08a      	sub	sp, #40	; 0x28
 80258a4:	af00      	add	r7, sp, #0
 80258a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80258a8:	f107 0314 	add.w	r3, r7, #20
 80258ac:	2200      	movs	r2, #0
 80258ae:	601a      	str	r2, [r3, #0]
 80258b0:	605a      	str	r2, [r3, #4]
 80258b2:	609a      	str	r2, [r3, #8]
 80258b4:	60da      	str	r2, [r3, #12]
 80258b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80258b8:	687b      	ldr	r3, [r7, #4]
 80258ba:	681b      	ldr	r3, [r3, #0]
 80258bc:	4a19      	ldr	r2, [pc, #100]	; (8025924 <HAL_SPI_MspInit+0x84>)
 80258be:	4293      	cmp	r3, r2
 80258c0:	d12c      	bne.n	802591c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80258c2:	2300      	movs	r3, #0
 80258c4:	613b      	str	r3, [r7, #16]
 80258c6:	4b18      	ldr	r3, [pc, #96]	; (8025928 <HAL_SPI_MspInit+0x88>)
 80258c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80258ca:	4a17      	ldr	r2, [pc, #92]	; (8025928 <HAL_SPI_MspInit+0x88>)
 80258cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80258d0:	6413      	str	r3, [r2, #64]	; 0x40
 80258d2:	4b15      	ldr	r3, [pc, #84]	; (8025928 <HAL_SPI_MspInit+0x88>)
 80258d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80258d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80258da:	613b      	str	r3, [r7, #16]
 80258dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80258de:	2300      	movs	r3, #0
 80258e0:	60fb      	str	r3, [r7, #12]
 80258e2:	4b11      	ldr	r3, [pc, #68]	; (8025928 <HAL_SPI_MspInit+0x88>)
 80258e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80258e6:	4a10      	ldr	r2, [pc, #64]	; (8025928 <HAL_SPI_MspInit+0x88>)
 80258e8:	f043 0304 	orr.w	r3, r3, #4
 80258ec:	6313      	str	r3, [r2, #48]	; 0x30
 80258ee:	4b0e      	ldr	r3, [pc, #56]	; (8025928 <HAL_SPI_MspInit+0x88>)
 80258f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80258f2:	f003 0304 	and.w	r3, r3, #4
 80258f6:	60fb      	str	r3, [r7, #12]
 80258f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80258fa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80258fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025900:	2302      	movs	r3, #2
 8025902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025904:	2300      	movs	r3, #0
 8025906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8025908:	2303      	movs	r3, #3
 802590a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 802590c:	2306      	movs	r3, #6
 802590e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8025910:	f107 0314 	add.w	r3, r7, #20
 8025914:	4619      	mov	r1, r3
 8025916:	4805      	ldr	r0, [pc, #20]	; (802592c <HAL_SPI_MspInit+0x8c>)
 8025918:	f002 f8d2 	bl	8027ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 802591c:	bf00      	nop
 802591e:	3728      	adds	r7, #40	; 0x28
 8025920:	46bd      	mov	sp, r7
 8025922:	bd80      	pop	{r7, pc}
 8025924:	40003c00 	.word	0x40003c00
 8025928:	40023800 	.word	0x40023800
 802592c:	40020800 	.word	0x40020800

08025930 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8025930:	b480      	push	{r7}
 8025932:	b087      	sub	sp, #28
 8025934:	af00      	add	r7, sp, #0
 8025936:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8025938:	687b      	ldr	r3, [r7, #4]
 802593a:	681b      	ldr	r3, [r3, #0]
 802593c:	4a1f      	ldr	r2, [pc, #124]	; (80259bc <HAL_TIM_PWM_MspInit+0x8c>)
 802593e:	4293      	cmp	r3, r2
 8025940:	d10e      	bne.n	8025960 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8025942:	2300      	movs	r3, #0
 8025944:	617b      	str	r3, [r7, #20]
 8025946:	4b1e      	ldr	r3, [pc, #120]	; (80259c0 <HAL_TIM_PWM_MspInit+0x90>)
 8025948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802594a:	4a1d      	ldr	r2, [pc, #116]	; (80259c0 <HAL_TIM_PWM_MspInit+0x90>)
 802594c:	f043 0301 	orr.w	r3, r3, #1
 8025950:	6453      	str	r3, [r2, #68]	; 0x44
 8025952:	4b1b      	ldr	r3, [pc, #108]	; (80259c0 <HAL_TIM_PWM_MspInit+0x90>)
 8025954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025956:	f003 0301 	and.w	r3, r3, #1
 802595a:	617b      	str	r3, [r7, #20]
 802595c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 802595e:	e026      	b.n	80259ae <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8025960:	687b      	ldr	r3, [r7, #4]
 8025962:	681b      	ldr	r3, [r3, #0]
 8025964:	4a17      	ldr	r2, [pc, #92]	; (80259c4 <HAL_TIM_PWM_MspInit+0x94>)
 8025966:	4293      	cmp	r3, r2
 8025968:	d10e      	bne.n	8025988 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 802596a:	2300      	movs	r3, #0
 802596c:	613b      	str	r3, [r7, #16]
 802596e:	4b14      	ldr	r3, [pc, #80]	; (80259c0 <HAL_TIM_PWM_MspInit+0x90>)
 8025970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025972:	4a13      	ldr	r2, [pc, #76]	; (80259c0 <HAL_TIM_PWM_MspInit+0x90>)
 8025974:	f043 0302 	orr.w	r3, r3, #2
 8025978:	6413      	str	r3, [r2, #64]	; 0x40
 802597a:	4b11      	ldr	r3, [pc, #68]	; (80259c0 <HAL_TIM_PWM_MspInit+0x90>)
 802597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802597e:	f003 0302 	and.w	r3, r3, #2
 8025982:	613b      	str	r3, [r7, #16]
 8025984:	693b      	ldr	r3, [r7, #16]
}
 8025986:	e012      	b.n	80259ae <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 8025988:	687b      	ldr	r3, [r7, #4]
 802598a:	681b      	ldr	r3, [r3, #0]
 802598c:	4a0e      	ldr	r2, [pc, #56]	; (80259c8 <HAL_TIM_PWM_MspInit+0x98>)
 802598e:	4293      	cmp	r3, r2
 8025990:	d10d      	bne.n	80259ae <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8025992:	2300      	movs	r3, #0
 8025994:	60fb      	str	r3, [r7, #12]
 8025996:	4b0a      	ldr	r3, [pc, #40]	; (80259c0 <HAL_TIM_PWM_MspInit+0x90>)
 8025998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802599a:	4a09      	ldr	r2, [pc, #36]	; (80259c0 <HAL_TIM_PWM_MspInit+0x90>)
 802599c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80259a0:	6413      	str	r3, [r2, #64]	; 0x40
 80259a2:	4b07      	ldr	r3, [pc, #28]	; (80259c0 <HAL_TIM_PWM_MspInit+0x90>)
 80259a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80259a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80259aa:	60fb      	str	r3, [r7, #12]
 80259ac:	68fb      	ldr	r3, [r7, #12]
}
 80259ae:	bf00      	nop
 80259b0:	371c      	adds	r7, #28
 80259b2:	46bd      	mov	sp, r7
 80259b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80259b8:	4770      	bx	lr
 80259ba:	bf00      	nop
 80259bc:	40010000 	.word	0x40010000
 80259c0:	40023800 	.word	0x40023800
 80259c4:	40000400 	.word	0x40000400
 80259c8:	40001800 	.word	0x40001800

080259cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80259cc:	b580      	push	{r7, lr}
 80259ce:	b088      	sub	sp, #32
 80259d0:	af00      	add	r7, sp, #0
 80259d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80259d4:	687b      	ldr	r3, [r7, #4]
 80259d6:	681b      	ldr	r3, [r3, #0]
 80259d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80259dc:	d116      	bne.n	8025a0c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80259de:	2300      	movs	r3, #0
 80259e0:	61fb      	str	r3, [r7, #28]
 80259e2:	4b40      	ldr	r3, [pc, #256]	; (8025ae4 <HAL_TIM_Base_MspInit+0x118>)
 80259e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80259e6:	4a3f      	ldr	r2, [pc, #252]	; (8025ae4 <HAL_TIM_Base_MspInit+0x118>)
 80259e8:	f043 0301 	orr.w	r3, r3, #1
 80259ec:	6413      	str	r3, [r2, #64]	; 0x40
 80259ee:	4b3d      	ldr	r3, [pc, #244]	; (8025ae4 <HAL_TIM_Base_MspInit+0x118>)
 80259f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80259f2:	f003 0301 	and.w	r3, r3, #1
 80259f6:	61fb      	str	r3, [r7, #28]
 80259f8:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80259fa:	2200      	movs	r2, #0
 80259fc:	2100      	movs	r1, #0
 80259fe:	201c      	movs	r0, #28
 8025a00:	f001 f9e3 	bl	8026dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8025a04:	201c      	movs	r0, #28
 8025a06:	f001 f9fc 	bl	8026e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8025a0a:	e066      	b.n	8025ada <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM5)
 8025a0c:	687b      	ldr	r3, [r7, #4]
 8025a0e:	681b      	ldr	r3, [r3, #0]
 8025a10:	4a35      	ldr	r2, [pc, #212]	; (8025ae8 <HAL_TIM_Base_MspInit+0x11c>)
 8025a12:	4293      	cmp	r3, r2
 8025a14:	d116      	bne.n	8025a44 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8025a16:	2300      	movs	r3, #0
 8025a18:	61bb      	str	r3, [r7, #24]
 8025a1a:	4b32      	ldr	r3, [pc, #200]	; (8025ae4 <HAL_TIM_Base_MspInit+0x118>)
 8025a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025a1e:	4a31      	ldr	r2, [pc, #196]	; (8025ae4 <HAL_TIM_Base_MspInit+0x118>)
 8025a20:	f043 0308 	orr.w	r3, r3, #8
 8025a24:	6413      	str	r3, [r2, #64]	; 0x40
 8025a26:	4b2f      	ldr	r3, [pc, #188]	; (8025ae4 <HAL_TIM_Base_MspInit+0x118>)
 8025a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025a2a:	f003 0308 	and.w	r3, r3, #8
 8025a2e:	61bb      	str	r3, [r7, #24]
 8025a30:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8025a32:	2200      	movs	r2, #0
 8025a34:	2100      	movs	r1, #0
 8025a36:	2032      	movs	r0, #50	; 0x32
 8025a38:	f001 f9c7 	bl	8026dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8025a3c:	2032      	movs	r0, #50	; 0x32
 8025a3e:	f001 f9e0 	bl	8026e02 <HAL_NVIC_EnableIRQ>
}
 8025a42:	e04a      	b.n	8025ada <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM6)
 8025a44:	687b      	ldr	r3, [r7, #4]
 8025a46:	681b      	ldr	r3, [r3, #0]
 8025a48:	4a28      	ldr	r2, [pc, #160]	; (8025aec <HAL_TIM_Base_MspInit+0x120>)
 8025a4a:	4293      	cmp	r3, r2
 8025a4c:	d116      	bne.n	8025a7c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8025a4e:	2300      	movs	r3, #0
 8025a50:	617b      	str	r3, [r7, #20]
 8025a52:	4b24      	ldr	r3, [pc, #144]	; (8025ae4 <HAL_TIM_Base_MspInit+0x118>)
 8025a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025a56:	4a23      	ldr	r2, [pc, #140]	; (8025ae4 <HAL_TIM_Base_MspInit+0x118>)
 8025a58:	f043 0310 	orr.w	r3, r3, #16
 8025a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8025a5e:	4b21      	ldr	r3, [pc, #132]	; (8025ae4 <HAL_TIM_Base_MspInit+0x118>)
 8025a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025a62:	f003 0310 	and.w	r3, r3, #16
 8025a66:	617b      	str	r3, [r7, #20]
 8025a68:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8025a6a:	2200      	movs	r2, #0
 8025a6c:	2100      	movs	r1, #0
 8025a6e:	2036      	movs	r0, #54	; 0x36
 8025a70:	f001 f9ab 	bl	8026dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8025a74:	2036      	movs	r0, #54	; 0x36
 8025a76:	f001 f9c4 	bl	8026e02 <HAL_NVIC_EnableIRQ>
}
 8025a7a:	e02e      	b.n	8025ada <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 8025a7c:	687b      	ldr	r3, [r7, #4]
 8025a7e:	681b      	ldr	r3, [r3, #0]
 8025a80:	4a1b      	ldr	r2, [pc, #108]	; (8025af0 <HAL_TIM_Base_MspInit+0x124>)
 8025a82:	4293      	cmp	r3, r2
 8025a84:	d116      	bne.n	8025ab4 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8025a86:	2300      	movs	r3, #0
 8025a88:	613b      	str	r3, [r7, #16]
 8025a8a:	4b16      	ldr	r3, [pc, #88]	; (8025ae4 <HAL_TIM_Base_MspInit+0x118>)
 8025a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025a8e:	4a15      	ldr	r2, [pc, #84]	; (8025ae4 <HAL_TIM_Base_MspInit+0x118>)
 8025a90:	f043 0320 	orr.w	r3, r3, #32
 8025a94:	6413      	str	r3, [r2, #64]	; 0x40
 8025a96:	4b13      	ldr	r3, [pc, #76]	; (8025ae4 <HAL_TIM_Base_MspInit+0x118>)
 8025a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025a9a:	f003 0320 	and.w	r3, r3, #32
 8025a9e:	613b      	str	r3, [r7, #16]
 8025aa0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8025aa2:	2200      	movs	r2, #0
 8025aa4:	2100      	movs	r1, #0
 8025aa6:	2037      	movs	r0, #55	; 0x37
 8025aa8:	f001 f98f 	bl	8026dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8025aac:	2037      	movs	r0, #55	; 0x37
 8025aae:	f001 f9a8 	bl	8026e02 <HAL_NVIC_EnableIRQ>
}
 8025ab2:	e012      	b.n	8025ada <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 8025ab4:	687b      	ldr	r3, [r7, #4]
 8025ab6:	681b      	ldr	r3, [r3, #0]
 8025ab8:	4a0e      	ldr	r2, [pc, #56]	; (8025af4 <HAL_TIM_Base_MspInit+0x128>)
 8025aba:	4293      	cmp	r3, r2
 8025abc:	d10d      	bne.n	8025ada <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8025abe:	2300      	movs	r3, #0
 8025ac0:	60fb      	str	r3, [r7, #12]
 8025ac2:	4b08      	ldr	r3, [pc, #32]	; (8025ae4 <HAL_TIM_Base_MspInit+0x118>)
 8025ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025ac6:	4a07      	ldr	r2, [pc, #28]	; (8025ae4 <HAL_TIM_Base_MspInit+0x118>)
 8025ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8025acc:	6453      	str	r3, [r2, #68]	; 0x44
 8025ace:	4b05      	ldr	r3, [pc, #20]	; (8025ae4 <HAL_TIM_Base_MspInit+0x118>)
 8025ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025ad2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8025ad6:	60fb      	str	r3, [r7, #12]
 8025ad8:	68fb      	ldr	r3, [r7, #12]
}
 8025ada:	bf00      	nop
 8025adc:	3720      	adds	r7, #32
 8025ade:	46bd      	mov	sp, r7
 8025ae0:	bd80      	pop	{r7, pc}
 8025ae2:	bf00      	nop
 8025ae4:	40023800 	.word	0x40023800
 8025ae8:	40000c00 	.word	0x40000c00
 8025aec:	40001000 	.word	0x40001000
 8025af0:	40001400 	.word	0x40001400
 8025af4:	40014800 	.word	0x40014800

08025af8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8025af8:	b580      	push	{r7, lr}
 8025afa:	b08c      	sub	sp, #48	; 0x30
 8025afc:	af00      	add	r7, sp, #0
 8025afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025b00:	f107 031c 	add.w	r3, r7, #28
 8025b04:	2200      	movs	r2, #0
 8025b06:	601a      	str	r2, [r3, #0]
 8025b08:	605a      	str	r2, [r3, #4]
 8025b0a:	609a      	str	r2, [r3, #8]
 8025b0c:	60da      	str	r2, [r3, #12]
 8025b0e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8025b10:	687b      	ldr	r3, [r7, #4]
 8025b12:	681b      	ldr	r3, [r3, #0]
 8025b14:	4a32      	ldr	r2, [pc, #200]	; (8025be0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8025b16:	4293      	cmp	r3, r2
 8025b18:	d12c      	bne.n	8025b74 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8025b1a:	2300      	movs	r3, #0
 8025b1c:	61bb      	str	r3, [r7, #24]
 8025b1e:	4b31      	ldr	r3, [pc, #196]	; (8025be4 <HAL_TIM_Encoder_MspInit+0xec>)
 8025b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025b22:	4a30      	ldr	r2, [pc, #192]	; (8025be4 <HAL_TIM_Encoder_MspInit+0xec>)
 8025b24:	f043 0304 	orr.w	r3, r3, #4
 8025b28:	6413      	str	r3, [r2, #64]	; 0x40
 8025b2a:	4b2e      	ldr	r3, [pc, #184]	; (8025be4 <HAL_TIM_Encoder_MspInit+0xec>)
 8025b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025b2e:	f003 0304 	and.w	r3, r3, #4
 8025b32:	61bb      	str	r3, [r7, #24]
 8025b34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8025b36:	2300      	movs	r3, #0
 8025b38:	617b      	str	r3, [r7, #20]
 8025b3a:	4b2a      	ldr	r3, [pc, #168]	; (8025be4 <HAL_TIM_Encoder_MspInit+0xec>)
 8025b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025b3e:	4a29      	ldr	r2, [pc, #164]	; (8025be4 <HAL_TIM_Encoder_MspInit+0xec>)
 8025b40:	f043 0302 	orr.w	r3, r3, #2
 8025b44:	6313      	str	r3, [r2, #48]	; 0x30
 8025b46:	4b27      	ldr	r3, [pc, #156]	; (8025be4 <HAL_TIM_Encoder_MspInit+0xec>)
 8025b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025b4a:	f003 0302 	and.w	r3, r3, #2
 8025b4e:	617b      	str	r3, [r7, #20]
 8025b50:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8025b52:	23c0      	movs	r3, #192	; 0xc0
 8025b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025b56:	2302      	movs	r3, #2
 8025b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025b5a:	2300      	movs	r3, #0
 8025b5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025b5e:	2300      	movs	r3, #0
 8025b60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8025b62:	2302      	movs	r3, #2
 8025b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8025b66:	f107 031c 	add.w	r3, r7, #28
 8025b6a:	4619      	mov	r1, r3
 8025b6c:	481e      	ldr	r0, [pc, #120]	; (8025be8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8025b6e:	f001 ffa7 	bl	8027ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8025b72:	e030      	b.n	8025bd6 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8025b74:	687b      	ldr	r3, [r7, #4]
 8025b76:	681b      	ldr	r3, [r3, #0]
 8025b78:	4a1c      	ldr	r2, [pc, #112]	; (8025bec <HAL_TIM_Encoder_MspInit+0xf4>)
 8025b7a:	4293      	cmp	r3, r2
 8025b7c:	d12b      	bne.n	8025bd6 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8025b7e:	2300      	movs	r3, #0
 8025b80:	613b      	str	r3, [r7, #16]
 8025b82:	4b18      	ldr	r3, [pc, #96]	; (8025be4 <HAL_TIM_Encoder_MspInit+0xec>)
 8025b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025b86:	4a17      	ldr	r2, [pc, #92]	; (8025be4 <HAL_TIM_Encoder_MspInit+0xec>)
 8025b88:	f043 0302 	orr.w	r3, r3, #2
 8025b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8025b8e:	4b15      	ldr	r3, [pc, #84]	; (8025be4 <HAL_TIM_Encoder_MspInit+0xec>)
 8025b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025b92:	f003 0302 	and.w	r3, r3, #2
 8025b96:	613b      	str	r3, [r7, #16]
 8025b98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8025b9a:	2300      	movs	r3, #0
 8025b9c:	60fb      	str	r3, [r7, #12]
 8025b9e:	4b11      	ldr	r3, [pc, #68]	; (8025be4 <HAL_TIM_Encoder_MspInit+0xec>)
 8025ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025ba2:	4a10      	ldr	r2, [pc, #64]	; (8025be4 <HAL_TIM_Encoder_MspInit+0xec>)
 8025ba4:	f043 0304 	orr.w	r3, r3, #4
 8025ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8025baa:	4b0e      	ldr	r3, [pc, #56]	; (8025be4 <HAL_TIM_Encoder_MspInit+0xec>)
 8025bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025bae:	f003 0304 	and.w	r3, r3, #4
 8025bb2:	60fb      	str	r3, [r7, #12]
 8025bb4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8025bb6:	23c0      	movs	r3, #192	; 0xc0
 8025bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025bba:	2302      	movs	r3, #2
 8025bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025bbe:	2300      	movs	r3, #0
 8025bc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025bc2:	2300      	movs	r3, #0
 8025bc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8025bc6:	2303      	movs	r3, #3
 8025bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8025bca:	f107 031c 	add.w	r3, r7, #28
 8025bce:	4619      	mov	r1, r3
 8025bd0:	4807      	ldr	r0, [pc, #28]	; (8025bf0 <HAL_TIM_Encoder_MspInit+0xf8>)
 8025bd2:	f001 ff75 	bl	8027ac0 <HAL_GPIO_Init>
}
 8025bd6:	bf00      	nop
 8025bd8:	3730      	adds	r7, #48	; 0x30
 8025bda:	46bd      	mov	sp, r7
 8025bdc:	bd80      	pop	{r7, pc}
 8025bde:	bf00      	nop
 8025be0:	40000800 	.word	0x40000800
 8025be4:	40023800 	.word	0x40023800
 8025be8:	40020400 	.word	0x40020400
 8025bec:	40010400 	.word	0x40010400
 8025bf0:	40020800 	.word	0x40020800

08025bf4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8025bf4:	b580      	push	{r7, lr}
 8025bf6:	b08c      	sub	sp, #48	; 0x30
 8025bf8:	af00      	add	r7, sp, #0
 8025bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025bfc:	f107 031c 	add.w	r3, r7, #28
 8025c00:	2200      	movs	r2, #0
 8025c02:	601a      	str	r2, [r3, #0]
 8025c04:	605a      	str	r2, [r3, #4]
 8025c06:	609a      	str	r2, [r3, #8]
 8025c08:	60da      	str	r2, [r3, #12]
 8025c0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8025c0c:	687b      	ldr	r3, [r7, #4]
 8025c0e:	681b      	ldr	r3, [r3, #0]
 8025c10:	4a59      	ldr	r2, [pc, #356]	; (8025d78 <HAL_TIM_MspPostInit+0x184>)
 8025c12:	4293      	cmp	r3, r2
 8025c14:	d11f      	bne.n	8025c56 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8025c16:	2300      	movs	r3, #0
 8025c18:	61bb      	str	r3, [r7, #24]
 8025c1a:	4b58      	ldr	r3, [pc, #352]	; (8025d7c <HAL_TIM_MspPostInit+0x188>)
 8025c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025c1e:	4a57      	ldr	r2, [pc, #348]	; (8025d7c <HAL_TIM_MspPostInit+0x188>)
 8025c20:	f043 0301 	orr.w	r3, r3, #1
 8025c24:	6313      	str	r3, [r2, #48]	; 0x30
 8025c26:	4b55      	ldr	r3, [pc, #340]	; (8025d7c <HAL_TIM_MspPostInit+0x188>)
 8025c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025c2a:	f003 0301 	and.w	r3, r3, #1
 8025c2e:	61bb      	str	r3, [r7, #24]
 8025c30:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8025c32:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8025c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025c38:	2302      	movs	r3, #2
 8025c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025c3c:	2300      	movs	r3, #0
 8025c3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025c40:	2300      	movs	r3, #0
 8025c42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8025c44:	2301      	movs	r3, #1
 8025c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8025c48:	f107 031c 	add.w	r3, r7, #28
 8025c4c:	4619      	mov	r1, r3
 8025c4e:	484c      	ldr	r0, [pc, #304]	; (8025d80 <HAL_TIM_MspPostInit+0x18c>)
 8025c50:	f001 ff36 	bl	8027ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8025c54:	e08b      	b.n	8025d6e <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM3)
 8025c56:	687b      	ldr	r3, [r7, #4]
 8025c58:	681b      	ldr	r3, [r3, #0]
 8025c5a:	4a4a      	ldr	r2, [pc, #296]	; (8025d84 <HAL_TIM_MspPostInit+0x190>)
 8025c5c:	4293      	cmp	r3, r2
 8025c5e:	d13d      	bne.n	8025cdc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8025c60:	2300      	movs	r3, #0
 8025c62:	617b      	str	r3, [r7, #20]
 8025c64:	4b45      	ldr	r3, [pc, #276]	; (8025d7c <HAL_TIM_MspPostInit+0x188>)
 8025c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025c68:	4a44      	ldr	r2, [pc, #272]	; (8025d7c <HAL_TIM_MspPostInit+0x188>)
 8025c6a:	f043 0304 	orr.w	r3, r3, #4
 8025c6e:	6313      	str	r3, [r2, #48]	; 0x30
 8025c70:	4b42      	ldr	r3, [pc, #264]	; (8025d7c <HAL_TIM_MspPostInit+0x188>)
 8025c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025c74:	f003 0304 	and.w	r3, r3, #4
 8025c78:	617b      	str	r3, [r7, #20]
 8025c7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8025c7c:	2300      	movs	r3, #0
 8025c7e:	613b      	str	r3, [r7, #16]
 8025c80:	4b3e      	ldr	r3, [pc, #248]	; (8025d7c <HAL_TIM_MspPostInit+0x188>)
 8025c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025c84:	4a3d      	ldr	r2, [pc, #244]	; (8025d7c <HAL_TIM_MspPostInit+0x188>)
 8025c86:	f043 0302 	orr.w	r3, r3, #2
 8025c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8025c8c:	4b3b      	ldr	r3, [pc, #236]	; (8025d7c <HAL_TIM_MspPostInit+0x188>)
 8025c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025c90:	f003 0302 	and.w	r3, r3, #2
 8025c94:	613b      	str	r3, [r7, #16]
 8025c96:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8025c98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8025c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025c9e:	2302      	movs	r3, #2
 8025ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025ca2:	2300      	movs	r3, #0
 8025ca4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025ca6:	2300      	movs	r3, #0
 8025ca8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8025caa:	2302      	movs	r3, #2
 8025cac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8025cae:	f107 031c 	add.w	r3, r7, #28
 8025cb2:	4619      	mov	r1, r3
 8025cb4:	4834      	ldr	r0, [pc, #208]	; (8025d88 <HAL_TIM_MspPostInit+0x194>)
 8025cb6:	f001 ff03 	bl	8027ac0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8025cba:	2330      	movs	r3, #48	; 0x30
 8025cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025cbe:	2302      	movs	r3, #2
 8025cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025cc2:	2300      	movs	r3, #0
 8025cc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025cc6:	2300      	movs	r3, #0
 8025cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8025cca:	2302      	movs	r3, #2
 8025ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8025cce:	f107 031c 	add.w	r3, r7, #28
 8025cd2:	4619      	mov	r1, r3
 8025cd4:	482d      	ldr	r0, [pc, #180]	; (8025d8c <HAL_TIM_MspPostInit+0x198>)
 8025cd6:	f001 fef3 	bl	8027ac0 <HAL_GPIO_Init>
}
 8025cda:	e048      	b.n	8025d6e <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM11)
 8025cdc:	687b      	ldr	r3, [r7, #4]
 8025cde:	681b      	ldr	r3, [r3, #0]
 8025ce0:	4a2b      	ldr	r2, [pc, #172]	; (8025d90 <HAL_TIM_MspPostInit+0x19c>)
 8025ce2:	4293      	cmp	r3, r2
 8025ce4:	d11f      	bne.n	8025d26 <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8025ce6:	2300      	movs	r3, #0
 8025ce8:	60fb      	str	r3, [r7, #12]
 8025cea:	4b24      	ldr	r3, [pc, #144]	; (8025d7c <HAL_TIM_MspPostInit+0x188>)
 8025cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025cee:	4a23      	ldr	r2, [pc, #140]	; (8025d7c <HAL_TIM_MspPostInit+0x188>)
 8025cf0:	f043 0302 	orr.w	r3, r3, #2
 8025cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8025cf6:	4b21      	ldr	r3, [pc, #132]	; (8025d7c <HAL_TIM_MspPostInit+0x188>)
 8025cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025cfa:	f003 0302 	and.w	r3, r3, #2
 8025cfe:	60fb      	str	r3, [r7, #12]
 8025d00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8025d02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8025d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025d08:	2302      	movs	r3, #2
 8025d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025d0c:	2300      	movs	r3, #0
 8025d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025d10:	2300      	movs	r3, #0
 8025d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8025d14:	2303      	movs	r3, #3
 8025d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8025d18:	f107 031c 	add.w	r3, r7, #28
 8025d1c:	4619      	mov	r1, r3
 8025d1e:	481b      	ldr	r0, [pc, #108]	; (8025d8c <HAL_TIM_MspPostInit+0x198>)
 8025d20:	f001 fece 	bl	8027ac0 <HAL_GPIO_Init>
}
 8025d24:	e023      	b.n	8025d6e <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM12)
 8025d26:	687b      	ldr	r3, [r7, #4]
 8025d28:	681b      	ldr	r3, [r3, #0]
 8025d2a:	4a1a      	ldr	r2, [pc, #104]	; (8025d94 <HAL_TIM_MspPostInit+0x1a0>)
 8025d2c:	4293      	cmp	r3, r2
 8025d2e:	d11e      	bne.n	8025d6e <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8025d30:	2300      	movs	r3, #0
 8025d32:	60bb      	str	r3, [r7, #8]
 8025d34:	4b11      	ldr	r3, [pc, #68]	; (8025d7c <HAL_TIM_MspPostInit+0x188>)
 8025d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025d38:	4a10      	ldr	r2, [pc, #64]	; (8025d7c <HAL_TIM_MspPostInit+0x188>)
 8025d3a:	f043 0302 	orr.w	r3, r3, #2
 8025d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8025d40:	4b0e      	ldr	r3, [pc, #56]	; (8025d7c <HAL_TIM_MspPostInit+0x188>)
 8025d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025d44:	f003 0302 	and.w	r3, r3, #2
 8025d48:	60bb      	str	r3, [r7, #8]
 8025d4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8025d4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8025d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025d52:	2302      	movs	r3, #2
 8025d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025d56:	2300      	movs	r3, #0
 8025d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025d5a:	2300      	movs	r3, #0
 8025d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8025d5e:	2309      	movs	r3, #9
 8025d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8025d62:	f107 031c 	add.w	r3, r7, #28
 8025d66:	4619      	mov	r1, r3
 8025d68:	4808      	ldr	r0, [pc, #32]	; (8025d8c <HAL_TIM_MspPostInit+0x198>)
 8025d6a:	f001 fea9 	bl	8027ac0 <HAL_GPIO_Init>
}
 8025d6e:	bf00      	nop
 8025d70:	3730      	adds	r7, #48	; 0x30
 8025d72:	46bd      	mov	sp, r7
 8025d74:	bd80      	pop	{r7, pc}
 8025d76:	bf00      	nop
 8025d78:	40010000 	.word	0x40010000
 8025d7c:	40023800 	.word	0x40023800
 8025d80:	40020000 	.word	0x40020000
 8025d84:	40000400 	.word	0x40000400
 8025d88:	40020800 	.word	0x40020800
 8025d8c:	40020400 	.word	0x40020400
 8025d90:	40014800 	.word	0x40014800
 8025d94:	40001800 	.word	0x40001800

08025d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8025d98:	b480      	push	{r7}
 8025d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8025d9c:	e7fe      	b.n	8025d9c <NMI_Handler+0x4>

08025d9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8025d9e:	b480      	push	{r7}
 8025da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8025da2:	e7fe      	b.n	8025da2 <HardFault_Handler+0x4>

08025da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8025da4:	b480      	push	{r7}
 8025da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8025da8:	e7fe      	b.n	8025da8 <MemManage_Handler+0x4>

08025daa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8025daa:	b480      	push	{r7}
 8025dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8025dae:	e7fe      	b.n	8025dae <BusFault_Handler+0x4>

08025db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8025db0:	b480      	push	{r7}
 8025db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8025db4:	e7fe      	b.n	8025db4 <UsageFault_Handler+0x4>

08025db6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8025db6:	b480      	push	{r7}
 8025db8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8025dba:	bf00      	nop
 8025dbc:	46bd      	mov	sp, r7
 8025dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025dc2:	4770      	bx	lr

08025dc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8025dc4:	b480      	push	{r7}
 8025dc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8025dc8:	bf00      	nop
 8025dca:	46bd      	mov	sp, r7
 8025dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025dd0:	4770      	bx	lr

08025dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8025dd2:	b480      	push	{r7}
 8025dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8025dd6:	bf00      	nop
 8025dd8:	46bd      	mov	sp, r7
 8025dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025dde:	4770      	bx	lr

08025de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8025de0:	b580      	push	{r7, lr}
 8025de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8025de4:	f000 fae0 	bl	80263a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8025de8:	bf00      	nop
 8025dea:	bd80      	pop	{r7, pc}

08025dec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8025dec:	b580      	push	{r7, lr}
 8025dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8025df0:	4802      	ldr	r0, [pc, #8]	; (8025dfc <TIM2_IRQHandler+0x10>)
 8025df2:	f003 fc66 	bl	80296c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8025df6:	bf00      	nop
 8025df8:	bd80      	pop	{r7, pc}
 8025dfa:	bf00      	nop
 8025dfc:	20000958 	.word	0x20000958

08025e00 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8025e00:	b580      	push	{r7, lr}
 8025e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8025e04:	4802      	ldr	r0, [pc, #8]	; (8025e10 <TIM5_IRQHandler+0x10>)
 8025e06:	f003 fc5c 	bl	80296c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8025e0a:	bf00      	nop
 8025e0c:	bd80      	pop	{r7, pc}
 8025e0e:	bf00      	nop
 8025e10:	20000718 	.word	0x20000718

08025e14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8025e14:	b580      	push	{r7, lr}
 8025e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8025e18:	4802      	ldr	r0, [pc, #8]	; (8025e24 <TIM6_DAC_IRQHandler+0x10>)
 8025e1a:	f003 fc52 	bl	80296c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8025e1e:	bf00      	nop
 8025e20:	bd80      	pop	{r7, pc}
 8025e22:	bf00      	nop
 8025e24:	200008d8 	.word	0x200008d8

08025e28 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8025e28:	b580      	push	{r7, lr}
 8025e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8025e2c:	4802      	ldr	r0, [pc, #8]	; (8025e38 <TIM7_IRQHandler+0x10>)
 8025e2e:	f003 fc48 	bl	80296c2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8025e32:	bf00      	nop
 8025e34:	bd80      	pop	{r7, pc}
 8025e36:	bf00      	nop
 8025e38:	200009d8 	.word	0x200009d8

08025e3c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8025e3c:	b580      	push	{r7, lr}
 8025e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8025e40:	4802      	ldr	r0, [pc, #8]	; (8025e4c <DMA2_Stream0_IRQHandler+0x10>)
 8025e42:	f001 f8ff 	bl	8027044 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8025e46:	bf00      	nop
 8025e48:	bd80      	pop	{r7, pc}
 8025e4a:	bf00      	nop
 8025e4c:	20000878 	.word	0x20000878

08025e50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8025e50:	b480      	push	{r7}
 8025e52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8025e54:	4b08      	ldr	r3, [pc, #32]	; (8025e78 <SystemInit+0x28>)
 8025e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8025e5a:	4a07      	ldr	r2, [pc, #28]	; (8025e78 <SystemInit+0x28>)
 8025e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8025e60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8025e64:	4b04      	ldr	r3, [pc, #16]	; (8025e78 <SystemInit+0x28>)
 8025e66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8025e6a:	609a      	str	r2, [r3, #8]
#endif
}
 8025e6c:	bf00      	nop
 8025e6e:	46bd      	mov	sp, r7
 8025e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e74:	4770      	bx	lr
 8025e76:	bf00      	nop
 8025e78:	e000ed00 	.word	0xe000ed00

08025e7c <_ZN15VelocityControlC1EP7Encoder>:
#include "velocity_control.hpp"
#include "declare_extern.h"

VelocityControl::VelocityControl(Encoder *encoder) : integral_error_(0)
 8025e7c:	b480      	push	{r7}
 8025e7e:	b083      	sub	sp, #12
 8025e80:	af00      	add	r7, sp, #0
 8025e82:	6078      	str	r0, [r7, #4]
 8025e84:	6039      	str	r1, [r7, #0]
 8025e86:	687b      	ldr	r3, [r7, #4]
 8025e88:	f04f 0200 	mov.w	r2, #0
 8025e8c:	601a      	str	r2, [r3, #0]
{
    encoder_ = encoder;
 8025e8e:	687b      	ldr	r3, [r7, #4]
 8025e90:	683a      	ldr	r2, [r7, #0]
 8025e92:	605a      	str	r2, [r3, #4]
}
 8025e94:	687b      	ldr	r3, [r7, #4]
 8025e96:	4618      	mov	r0, r3
 8025e98:	370c      	adds	r7, #12
 8025e9a:	46bd      	mov	sp, r7
 8025e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025ea0:	4770      	bx	lr

08025ea2 <_ZN15VelocityControl16DeterminePidGainEf>:

float VelocityControl::DeterminePidGain(float target_velocity)
{
 8025ea2:	b580      	push	{r7, lr}
 8025ea4:	b086      	sub	sp, #24
 8025ea6:	af00      	add	r7, sp, #0
 8025ea8:	6078      	str	r0, [r7, #4]
 8025eaa:	ed87 0a00 	vstr	s0, [r7]
    float p_gain = 0, i_gain = 0, d_gain = 0;
 8025eae:	f04f 0300 	mov.w	r3, #0
 8025eb2:	617b      	str	r3, [r7, #20]
 8025eb4:	f04f 0300 	mov.w	r3, #0
 8025eb8:	613b      	str	r3, [r7, #16]
 8025eba:	f04f 0300 	mov.w	r3, #0
 8025ebe:	60fb      	str	r3, [r7, #12]

    if(target_velocity < MAX_VELOCITY)
 8025ec0:	edd7 7a00 	vldr	s15, [r7]
 8025ec4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8025ec8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8025ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025ed0:	d509      	bpl.n	8025ee6 <_ZN15VelocityControl16DeterminePidGainEf+0x44>
    {
        p_gain = VELOCITY_P_GAIN;
 8025ed2:	f04f 0300 	mov.w	r3, #0
 8025ed6:	617b      	str	r3, [r7, #20]
        i_gain = VELOCITY_I_GAIN;
 8025ed8:	f04f 0300 	mov.w	r3, #0
 8025edc:	613b      	str	r3, [r7, #16]
        d_gain = VELOCITY_D_GAIN;
 8025ede:	f04f 0300 	mov.w	r3, #0
 8025ee2:	60fb      	str	r3, [r7, #12]
 8025ee4:	e008      	b.n	8025ef8 <_ZN15VelocityControl16DeterminePidGainEf+0x56>
    }
    else // Error handler
    {
        p_gain = 0;
 8025ee6:	f04f 0300 	mov.w	r3, #0
 8025eea:	617b      	str	r3, [r7, #20]
        i_gain = 0;
 8025eec:	f04f 0300 	mov.w	r3, #0
 8025ef0:	613b      	str	r3, [r7, #16]
        d_gain = 0;
 8025ef2:	f04f 0300 	mov.w	r3, #0
 8025ef6:	60fb      	str	r3, [r7, #12]
    }

    return PidControl(target_velocity, p_gain, i_gain, d_gain);
 8025ef8:	edd7 1a03 	vldr	s3, [r7, #12]
 8025efc:	ed97 1a04 	vldr	s2, [r7, #16]
 8025f00:	edd7 0a05 	vldr	s1, [r7, #20]
 8025f04:	ed97 0a00 	vldr	s0, [r7]
 8025f08:	6878      	ldr	r0, [r7, #4]
 8025f0a:	f000 f809 	bl	8025f20 <_ZN15VelocityControl10PidControlEffff>
 8025f0e:	eef0 7a40 	vmov.f32	s15, s0
}
 8025f12:	eeb0 0a67 	vmov.f32	s0, s15
 8025f16:	3718      	adds	r7, #24
 8025f18:	46bd      	mov	sp, r7
 8025f1a:	bd80      	pop	{r7, pc}
 8025f1c:	0000      	movs	r0, r0
	...

08025f20 <_ZN15VelocityControl10PidControlEffff>:

float VelocityControl::PidControl(float target, float p_gain, float i_gain, float d_gain)
{
 8025f20:	b5b0      	push	{r4, r5, r7, lr}
 8025f22:	b08e      	sub	sp, #56	; 0x38
 8025f24:	af00      	add	r7, sp, #0
 8025f26:	6178      	str	r0, [r7, #20]
 8025f28:	ed87 0a04 	vstr	s0, [r7, #16]
 8025f2c:	edc7 0a03 	vstr	s1, [r7, #12]
 8025f30:	ed87 1a02 	vstr	s2, [r7, #8]
 8025f34:	edc7 1a01 	vstr	s3, [r7, #4]
    float current = encoder_->GetDistance() / TIM6_PERIOD; // [mm/ms]
 8025f38:	697b      	ldr	r3, [r7, #20]
 8025f3a:	685b      	ldr	r3, [r3, #4]
 8025f3c:	4618      	mov	r0, r3
 8025f3e:	f7fa ffc5 	bl	8020ecc <_ZN7Encoder11GetDistanceEv>
 8025f42:	eef0 6a40 	vmov.f32	s13, s0
 8025f46:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 8025f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8025f4e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    static float pre_filter = 0.0;
    float filter = pre_filter * (1.0 - VELOCITY_LPF_RATIO) + (current * VELOCITY_LPF_RATIO);
 8025f52:	4b71      	ldr	r3, [pc, #452]	; (8026118 <_ZN15VelocityControl10PidControlEffff+0x1f8>)
 8025f54:	681b      	ldr	r3, [r3, #0]
 8025f56:	4618      	mov	r0, r3
 8025f58:	f7fa f9d6 	bl	8020308 <__aeabi_f2d>
 8025f5c:	a368      	add	r3, pc, #416	; (adr r3, 8026100 <_ZN15VelocityControl10PidControlEffff+0x1e0>)
 8025f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f62:	f7fa fa29 	bl	80203b8 <__aeabi_dmul>
 8025f66:	4603      	mov	r3, r0
 8025f68:	460c      	mov	r4, r1
 8025f6a:	4625      	mov	r5, r4
 8025f6c:	461c      	mov	r4, r3
 8025f6e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025f70:	f7fa f9ca 	bl	8020308 <__aeabi_f2d>
 8025f74:	a364      	add	r3, pc, #400	; (adr r3, 8026108 <_ZN15VelocityControl10PidControlEffff+0x1e8>)
 8025f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f7a:	f7fa fa1d 	bl	80203b8 <__aeabi_dmul>
 8025f7e:	4602      	mov	r2, r0
 8025f80:	460b      	mov	r3, r1
 8025f82:	4620      	mov	r0, r4
 8025f84:	4629      	mov	r1, r5
 8025f86:	f7fa f861 	bl	802004c <__adddf3>
 8025f8a:	4603      	mov	r3, r0
 8025f8c:	460c      	mov	r4, r1
 8025f8e:	4618      	mov	r0, r3
 8025f90:	4621      	mov	r1, r4
 8025f92:	f7fa fcab 	bl	80208ec <__aeabi_d2f>
 8025f96:	4603      	mov	r3, r0
 8025f98:	633b      	str	r3, [r7, #48]	; 0x30
    pre_filter = filter;
 8025f9a:	4a5f      	ldr	r2, [pc, #380]	; (8026118 <_ZN15VelocityControl10PidControlEffff+0x1f8>)
 8025f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025f9e:	6013      	str	r3, [r2, #0]

    float error = target - filter;
 8025fa0:	ed97 7a04 	vldr	s14, [r7, #16]
 8025fa4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8025fa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025fac:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    static float pre_error = error;
 8025fb0:	4b5a      	ldr	r3, [pc, #360]	; (802611c <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8025fb2:	781b      	ldrb	r3, [r3, #0]
 8025fb4:	f3bf 8f5b 	dmb	ish
 8025fb8:	b2db      	uxtb	r3, r3
 8025fba:	f003 0301 	and.w	r3, r3, #1
 8025fbe:	2b00      	cmp	r3, #0
 8025fc0:	bf0c      	ite	eq
 8025fc2:	2301      	moveq	r3, #1
 8025fc4:	2300      	movne	r3, #0
 8025fc6:	b2db      	uxtb	r3, r3
 8025fc8:	2b00      	cmp	r3, #0
 8025fca:	d010      	beq.n	8025fee <_ZN15VelocityControl10PidControlEffff+0xce>
 8025fcc:	4853      	ldr	r0, [pc, #332]	; (802611c <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8025fce:	f004 fa19 	bl	802a404 <__cxa_guard_acquire>
 8025fd2:	4603      	mov	r3, r0
 8025fd4:	2b00      	cmp	r3, #0
 8025fd6:	bf14      	ite	ne
 8025fd8:	2301      	movne	r3, #1
 8025fda:	2300      	moveq	r3, #0
 8025fdc:	b2db      	uxtb	r3, r3
 8025fde:	2b00      	cmp	r3, #0
 8025fe0:	d005      	beq.n	8025fee <_ZN15VelocityControl10PidControlEffff+0xce>
 8025fe2:	4a4f      	ldr	r2, [pc, #316]	; (8026120 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8025fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025fe6:	6013      	str	r3, [r2, #0]
 8025fe8:	484c      	ldr	r0, [pc, #304]	; (802611c <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8025fea:	f004 fa17 	bl	802a41c <__cxa_guard_release>

    float differential_error = (error - pre_error) / TIM6_PERIOD_S;
 8025fee:	4b4c      	ldr	r3, [pc, #304]	; (8026120 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8025ff0:	edd3 7a00 	vldr	s15, [r3]
 8025ff4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8025ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025ffc:	ee17 0a90 	vmov	r0, s15
 8026000:	f7fa f982 	bl	8020308 <__aeabi_f2d>
 8026004:	a342      	add	r3, pc, #264	; (adr r3, 8026110 <_ZN15VelocityControl10PidControlEffff+0x1f0>)
 8026006:	e9d3 2300 	ldrd	r2, r3, [r3]
 802600a:	f7fa faff 	bl	802060c <__aeabi_ddiv>
 802600e:	4603      	mov	r3, r0
 8026010:	460c      	mov	r4, r1
 8026012:	4618      	mov	r0, r3
 8026014:	4621      	mov	r1, r4
 8026016:	f7fa fc69 	bl	80208ec <__aeabi_d2f>
 802601a:	4603      	mov	r3, r0
 802601c:	62bb      	str	r3, [r7, #40]	; 0x28
    float integral_error = (error + pre_error) / 2.0 * TIM6_PERIOD_S;
 802601e:	4b40      	ldr	r3, [pc, #256]	; (8026120 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8026020:	ed93 7a00 	vldr	s14, [r3]
 8026024:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8026028:	ee77 7a27 	vadd.f32	s15, s14, s15
 802602c:	ee17 0a90 	vmov	r0, s15
 8026030:	f7fa f96a 	bl	8020308 <__aeabi_f2d>
 8026034:	f04f 0200 	mov.w	r2, #0
 8026038:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802603c:	f7fa fae6 	bl	802060c <__aeabi_ddiv>
 8026040:	4603      	mov	r3, r0
 8026042:	460c      	mov	r4, r1
 8026044:	4618      	mov	r0, r3
 8026046:	4621      	mov	r1, r4
 8026048:	a331      	add	r3, pc, #196	; (adr r3, 8026110 <_ZN15VelocityControl10PidControlEffff+0x1f0>)
 802604a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802604e:	f7fa f9b3 	bl	80203b8 <__aeabi_dmul>
 8026052:	4603      	mov	r3, r0
 8026054:	460c      	mov	r4, r1
 8026056:	4618      	mov	r0, r3
 8026058:	4621      	mov	r1, r4
 802605a:	f7fa fc47 	bl	80208ec <__aeabi_d2f>
 802605e:	4603      	mov	r3, r0
 8026060:	627b      	str	r3, [r7, #36]	; 0x24
    SetIntegralError(integral_error);
 8026062:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8026066:	6978      	ldr	r0, [r7, #20]
 8026068:	f000 f870 	bl	802614c <_ZN15VelocityControl16SetIntegralErrorEf>
    pre_error = error;
 802606c:	4a2c      	ldr	r2, [pc, #176]	; (8026120 <_ZN15VelocityControl10PidControlEffff+0x200>)
 802606e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026070:	6013      	str	r3, [r2, #0]

    float p = p_gain * error;
 8026072:	ed97 7a03 	vldr	s14, [r7, #12]
 8026076:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 802607a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802607e:	edc7 7a08 	vstr	s15, [r7, #32]
    float d = d_gain * differential_error;
 8026082:	ed97 7a01 	vldr	s14, [r7, #4]
 8026086:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 802608a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802608e:	edc7 7a07 	vstr	s15, [r7, #28]
    float i = i_gain * integral_error_;
 8026092:	697b      	ldr	r3, [r7, #20]
 8026094:	edd3 7a00 	vldr	s15, [r3]
 8026098:	ed97 7a02 	vldr	s14, [r7, #8]
 802609c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80260a0:	edc7 7a06 	vstr	s15, [r7, #24]

#ifdef DEBUG_MODE
    g_target_velocity  = target;
 80260a4:	4a1f      	ldr	r2, [pc, #124]	; (8026124 <_ZN15VelocityControl10PidControlEffff+0x204>)
 80260a6:	693b      	ldr	r3, [r7, #16]
 80260a8:	6013      	str	r3, [r2, #0]
    g_current_velocity = current;
 80260aa:	4a1f      	ldr	r2, [pc, #124]	; (8026128 <_ZN15VelocityControl10PidControlEffff+0x208>)
 80260ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80260ae:	6013      	str	r3, [r2, #0]
    g_filter_velocity  = filter;
 80260b0:	4a1e      	ldr	r2, [pc, #120]	; (802612c <_ZN15VelocityControl10PidControlEffff+0x20c>)
 80260b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80260b4:	6013      	str	r3, [r2, #0]
    g_velocity_error   = error;
 80260b6:	4a1e      	ldr	r2, [pc, #120]	; (8026130 <_ZN15VelocityControl10PidControlEffff+0x210>)
 80260b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80260ba:	6013      	str	r3, [r2, #0]
    g_velocity_p = p;       g_velocity_d = d;       g_velocity_i = i;
 80260bc:	4a1d      	ldr	r2, [pc, #116]	; (8026134 <_ZN15VelocityControl10PidControlEffff+0x214>)
 80260be:	6a3b      	ldr	r3, [r7, #32]
 80260c0:	6013      	str	r3, [r2, #0]
 80260c2:	4a1d      	ldr	r2, [pc, #116]	; (8026138 <_ZN15VelocityControl10PidControlEffff+0x218>)
 80260c4:	69fb      	ldr	r3, [r7, #28]
 80260c6:	6013      	str	r3, [r2, #0]
 80260c8:	4a1c      	ldr	r2, [pc, #112]	; (802613c <_ZN15VelocityControl10PidControlEffff+0x21c>)
 80260ca:	69bb      	ldr	r3, [r7, #24]
 80260cc:	6013      	str	r3, [r2, #0]
    g_velocity_p_gain = p;  g_velocity_d_gain = p;  g_velocity_i_gain = p;
 80260ce:	4a1c      	ldr	r2, [pc, #112]	; (8026140 <_ZN15VelocityControl10PidControlEffff+0x220>)
 80260d0:	6a3b      	ldr	r3, [r7, #32]
 80260d2:	6013      	str	r3, [r2, #0]
 80260d4:	4a1b      	ldr	r2, [pc, #108]	; (8026144 <_ZN15VelocityControl10PidControlEffff+0x224>)
 80260d6:	6a3b      	ldr	r3, [r7, #32]
 80260d8:	6013      	str	r3, [r2, #0]
 80260da:	4a1b      	ldr	r2, [pc, #108]	; (8026148 <_ZN15VelocityControl10PidControlEffff+0x228>)
 80260dc:	6a3b      	ldr	r3, [r7, #32]
 80260de:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    return p + d + i;
 80260e0:	ed97 7a08 	vldr	s14, [r7, #32]
 80260e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80260e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80260ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80260f0:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80260f4:	eeb0 0a67 	vmov.f32	s0, s15
 80260f8:	3738      	adds	r7, #56	; 0x38
 80260fa:	46bd      	mov	sp, r7
 80260fc:	bdb0      	pop	{r4, r5, r7, pc}
 80260fe:	bf00      	nop
 8026100:	33333334 	.word	0x33333334
 8026104:	3fd33333 	.word	0x3fd33333
 8026108:	66666666 	.word	0x66666666
 802610c:	3fe66666 	.word	0x3fe66666
 8026110:	47ae147b 	.word	0x47ae147b
 8026114:	3f547ae1 	.word	0x3f547ae1
 8026118:	20000330 	.word	0x20000330
 802611c:	20000338 	.word	0x20000338
 8026120:	20000334 	.word	0x20000334
 8026124:	200002e8 	.word	0x200002e8
 8026128:	200002ec 	.word	0x200002ec
 802612c:	200002f0 	.word	0x200002f0
 8026130:	200002f4 	.word	0x200002f4
 8026134:	200002f8 	.word	0x200002f8
 8026138:	20000300 	.word	0x20000300
 802613c:	200002fc 	.word	0x200002fc
 8026140:	20000304 	.word	0x20000304
 8026144:	2000030c 	.word	0x2000030c
 8026148:	20000308 	.word	0x20000308

0802614c <_ZN15VelocityControl16SetIntegralErrorEf>:

void VelocityControl::SetIntegralError(float integral_error)
{
 802614c:	b480      	push	{r7}
 802614e:	b083      	sub	sp, #12
 8026150:	af00      	add	r7, sp, #0
 8026152:	6078      	str	r0, [r7, #4]
 8026154:	ed87 0a00 	vstr	s0, [r7]
    integral_error_ += integral_error;
 8026158:	687b      	ldr	r3, [r7, #4]
 802615a:	ed93 7a00 	vldr	s14, [r3]
 802615e:	edd7 7a00 	vldr	s15, [r7]
 8026162:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026166:	687b      	ldr	r3, [r7, #4]
 8026168:	edc3 7a00 	vstr	s15, [r3]
}
 802616c:	bf00      	nop
 802616e:	370c      	adds	r7, #12
 8026170:	46bd      	mov	sp, r7
 8026172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026176:	4770      	bx	lr

08026178 <Init>:
#else // TEST_MODE
Test test(&line_sensor, &led);
#endif // TEST_MODE

void Init()
{
 8026178:	b580      	push	{r7, lr}
 802617a:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Init();
 802617c:	4802      	ldr	r0, [pc, #8]	; (8026188 <Init+0x10>)
 802617e:	f7fe f8cf 	bl	8024320 <_ZN3Run4InitEv>
#else // TEST_MODE
    test.Init();
#endif // TEST_MODE
}
 8026182:	bf00      	nop
 8026184:	bd80      	pop	{r7, pc}
 8026186:	bf00      	nop
 8026188:	20000610 	.word	0x20000610

0802618c <InterruptTim7>:

void InterruptTim7()
{
 802618c:	b580      	push	{r7, lr}
 802618e:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Timer7();
 8026190:	4804      	ldr	r0, [pc, #16]	; (80261a4 <InterruptTim7+0x18>)
 8026192:	f7fe f93f 	bl	8024414 <_ZN3Run6Timer7Ev>
#else // TEST_MODE
    test.Timer7();
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim7++;
 8026196:	4b04      	ldr	r3, [pc, #16]	; (80261a8 <InterruptTim7+0x1c>)
 8026198:	681b      	ldr	r3, [r3, #0]
 802619a:	3301      	adds	r3, #1
 802619c:	4a02      	ldr	r2, [pc, #8]	; (80261a8 <InterruptTim7+0x1c>)
 802619e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 80261a0:	bf00      	nop
 80261a2:	bd80      	pop	{r7, pc}
 80261a4:	20000610 	.word	0x20000610
 80261a8:	20000310 	.word	0x20000310

080261ac <InterruptTim6>:

void InterruptTim6()
{
 80261ac:	b580      	push	{r7, lr}
 80261ae:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.RunMode();
 80261b0:	4804      	ldr	r0, [pc, #16]	; (80261c4 <InterruptTim6+0x18>)
 80261b2:	f7fe faf9 	bl	80247a8 <_ZN3Run7RunModeEv>
#else // TEST_MODE
    test.Timer6();
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim6++;
 80261b6:	4b04      	ldr	r3, [pc, #16]	; (80261c8 <InterruptTim6+0x1c>)
 80261b8:	681b      	ldr	r3, [r3, #0]
 80261ba:	3301      	adds	r3, #1
 80261bc:	4a02      	ldr	r2, [pc, #8]	; (80261c8 <InterruptTim6+0x1c>)
 80261be:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 80261c0:	bf00      	nop
 80261c2:	bd80      	pop	{r7, pc}
 80261c4:	20000610 	.word	0x20000610
 80261c8:	20000314 	.word	0x20000314

080261cc <InterruptTim2>:

void InterruptTim2()
{
 80261cc:	b580      	push	{r7, lr}
 80261ce:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.UpdateRunMode();
 80261d0:	4804      	ldr	r0, [pc, #16]	; (80261e4 <InterruptTim2+0x18>)
 80261d2:	f7fe f92d 	bl	8024430 <_ZN3Run13UpdateRunModeEv>
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim2++;
 80261d6:	4b04      	ldr	r3, [pc, #16]	; (80261e8 <InterruptTim2+0x1c>)
 80261d8:	681b      	ldr	r3, [r3, #0]
 80261da:	3301      	adds	r3, #1
 80261dc:	4a02      	ldr	r2, [pc, #8]	; (80261e8 <InterruptTim2+0x1c>)
 80261de:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
 80261e0:	bf00      	nop
 80261e2:	bd80      	pop	{r7, pc}
 80261e4:	20000610 	.word	0x20000610
 80261e8:	20000318 	.word	0x20000318

080261ec <_Z41__static_initialization_and_destruction_0ii>:
 80261ec:	b580      	push	{r7, lr}
 80261ee:	b08a      	sub	sp, #40	; 0x28
 80261f0:	af08      	add	r7, sp, #32
 80261f2:	6078      	str	r0, [r7, #4]
 80261f4:	6039      	str	r1, [r7, #0]
 80261f6:	687b      	ldr	r3, [r7, #4]
 80261f8:	2b01      	cmp	r3, #1
 80261fa:	d134      	bne.n	8026266 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 80261fc:	683b      	ldr	r3, [r7, #0]
 80261fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8026202:	4293      	cmp	r3, r2
 8026204:	d12f      	bne.n	8026266 <_Z41__static_initialization_and_destruction_0ii+0x7a>
Encoder encoder;
 8026206:	481a      	ldr	r0, [pc, #104]	; (8026270 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8026208:	f7fa fd84 	bl	8020d14 <_ZN7EncoderC1Ev>
Iim42652 iim_42652;
 802620c:	4819      	ldr	r0, [pc, #100]	; (8026274 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 802620e:	f7fb f863 	bl	80212d8 <_ZN8Iim42652C1Ev>
Led led;
 8026212:	4819      	ldr	r0, [pc, #100]	; (8026278 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8026214:	f7fb fb15 	bl	8021842 <_ZN3LedC1Ev>
LineSensor line_sensor;
 8026218:	4818      	ldr	r0, [pc, #96]	; (802627c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 802621a:	f7fb fcca 	bl	8021bb2 <_ZN10LineSensorC1Ev>
LineTrace line_trace(&line_sensor);
 802621e:	4917      	ldr	r1, [pc, #92]	; (802627c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8026220:	4817      	ldr	r0, [pc, #92]	; (8026280 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8026222:	f7fc f821 	bl	8022268 <_ZN9LineTraceC1EP10LineSensor>
Logger logger;
 8026226:	4817      	ldr	r0, [pc, #92]	; (8026284 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8026228:	f7fc f976 	bl	8022518 <_ZN6LoggerC1Ev>
SideSensor side_sensor;
 802622c:	4816      	ldr	r0, [pc, #88]	; (8026288 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 802622e:	f7fe ff25 	bl	802507c <_ZN10SideSensorC1Ev>
VelocityControl velocity_control(&encoder);
 8026232:	490f      	ldr	r1, [pc, #60]	; (8026270 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8026234:	4815      	ldr	r0, [pc, #84]	; (802628c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8026236:	f7ff fe21 	bl	8025e7c <_ZN15VelocityControlC1EP7Encoder>
);
 802623a:	4b14      	ldr	r3, [pc, #80]	; (802628c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 802623c:	9307      	str	r3, [sp, #28]
 802623e:	4b12      	ldr	r3, [pc, #72]	; (8026288 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8026240:	9306      	str	r3, [sp, #24]
 8026242:	4b13      	ldr	r3, [pc, #76]	; (8026290 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8026244:	9305      	str	r3, [sp, #20]
 8026246:	4b13      	ldr	r3, [pc, #76]	; (8026294 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8026248:	9304      	str	r3, [sp, #16]
 802624a:	4b0e      	ldr	r3, [pc, #56]	; (8026284 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 802624c:	9303      	str	r3, [sp, #12]
 802624e:	4b0c      	ldr	r3, [pc, #48]	; (8026280 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8026250:	9302      	str	r3, [sp, #8]
 8026252:	4b0a      	ldr	r3, [pc, #40]	; (802627c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8026254:	9301      	str	r3, [sp, #4]
 8026256:	4b08      	ldr	r3, [pc, #32]	; (8026278 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8026258:	9300      	str	r3, [sp, #0]
 802625a:	4b06      	ldr	r3, [pc, #24]	; (8026274 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 802625c:	4a0e      	ldr	r2, [pc, #56]	; (8026298 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 802625e:	4904      	ldr	r1, [pc, #16]	; (8026270 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8026260:	480e      	ldr	r0, [pc, #56]	; (802629c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8026262:	f7fe f81b 	bl	802429c <_ZN3RunC1EP7EncoderP5FlashP8Iim42652P3LedP10LineSensorP9LineTraceP6LoggerP5MotorP12RotarySwitchP10SideSensorP15VelocityControl>
 8026266:	bf00      	nop
 8026268:	3708      	adds	r7, #8
 802626a:	46bd      	mov	sp, r7
 802626c:	bd80      	pop	{r7, pc}
 802626e:	bf00      	nop
 8026270:	2000033c 	.word	0x2000033c
 8026274:	20000350 	.word	0x20000350
 8026278:	20000358 	.word	0x20000358
 802627c:	2000035c 	.word	0x2000035c
 8026280:	200004e8 	.word	0x200004e8
 8026284:	200004f0 	.word	0x200004f0
 8026288:	20000600 	.word	0x20000600
 802628c:	20000608 	.word	0x20000608
 8026290:	200005fc 	.word	0x200005fc
 8026294:	200005f8 	.word	0x200005f8
 8026298:	20000348 	.word	0x20000348
 802629c:	20000610 	.word	0x20000610

080262a0 <_GLOBAL__sub_I_encoder>:
 80262a0:	b580      	push	{r7, lr}
 80262a2:	af00      	add	r7, sp, #0
 80262a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80262a8:	2001      	movs	r0, #1
 80262aa:	f7ff ff9f 	bl	80261ec <_Z41__static_initialization_and_destruction_0ii>
 80262ae:	bd80      	pop	{r7, pc}

080262b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80262b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80262e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80262b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80262b6:	e003      	b.n	80262c0 <LoopCopyDataInit>

080262b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80262b8:	4b0c      	ldr	r3, [pc, #48]	; (80262ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80262ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80262bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80262be:	3104      	adds	r1, #4

080262c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80262c0:	480b      	ldr	r0, [pc, #44]	; (80262f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80262c2:	4b0c      	ldr	r3, [pc, #48]	; (80262f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80262c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80262c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80262c8:	d3f6      	bcc.n	80262b8 <CopyDataInit>
  ldr  r2, =_sbss
 80262ca:	4a0b      	ldr	r2, [pc, #44]	; (80262f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80262cc:	e002      	b.n	80262d4 <LoopFillZerobss>

080262ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80262ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80262d0:	f842 3b04 	str.w	r3, [r2], #4

080262d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80262d4:	4b09      	ldr	r3, [pc, #36]	; (80262fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80262d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80262d8:	d3f9      	bcc.n	80262ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80262da:	f7ff fdb9 	bl	8025e50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80262de:	f004 f8a1 	bl	802a424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80262e2:	f7fc ffdd 	bl	80232a0 <main>
  bx  lr    
 80262e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80262e8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80262ec:	0802a4e0 	.word	0x0802a4e0
  ldr  r0, =_sdata
 80262f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80262f4:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 80262f8:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 80262fc:	20000a3c 	.word	0x20000a3c

08026300 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8026300:	e7fe      	b.n	8026300 <ADC_IRQHandler>
	...

08026304 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8026304:	b580      	push	{r7, lr}
 8026306:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8026308:	4b0e      	ldr	r3, [pc, #56]	; (8026344 <HAL_Init+0x40>)
 802630a:	681b      	ldr	r3, [r3, #0]
 802630c:	4a0d      	ldr	r2, [pc, #52]	; (8026344 <HAL_Init+0x40>)
 802630e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8026312:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8026314:	4b0b      	ldr	r3, [pc, #44]	; (8026344 <HAL_Init+0x40>)
 8026316:	681b      	ldr	r3, [r3, #0]
 8026318:	4a0a      	ldr	r2, [pc, #40]	; (8026344 <HAL_Init+0x40>)
 802631a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802631e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8026320:	4b08      	ldr	r3, [pc, #32]	; (8026344 <HAL_Init+0x40>)
 8026322:	681b      	ldr	r3, [r3, #0]
 8026324:	4a07      	ldr	r2, [pc, #28]	; (8026344 <HAL_Init+0x40>)
 8026326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802632a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 802632c:	2003      	movs	r0, #3
 802632e:	f000 fd41 	bl	8026db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8026332:	2001      	movs	r0, #1
 8026334:	f000 f808 	bl	8026348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8026338:	f7ff f9ae 	bl	8025698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 802633c:	2300      	movs	r3, #0
}
 802633e:	4618      	mov	r0, r3
 8026340:	bd80      	pop	{r7, pc}
 8026342:	bf00      	nop
 8026344:	40023c00 	.word	0x40023c00

08026348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8026348:	b580      	push	{r7, lr}
 802634a:	b082      	sub	sp, #8
 802634c:	af00      	add	r7, sp, #0
 802634e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8026350:	4b12      	ldr	r3, [pc, #72]	; (802639c <HAL_InitTick+0x54>)
 8026352:	681a      	ldr	r2, [r3, #0]
 8026354:	4b12      	ldr	r3, [pc, #72]	; (80263a0 <HAL_InitTick+0x58>)
 8026356:	781b      	ldrb	r3, [r3, #0]
 8026358:	4619      	mov	r1, r3
 802635a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802635e:	fbb3 f3f1 	udiv	r3, r3, r1
 8026362:	fbb2 f3f3 	udiv	r3, r2, r3
 8026366:	4618      	mov	r0, r3
 8026368:	f000 fd59 	bl	8026e1e <HAL_SYSTICK_Config>
 802636c:	4603      	mov	r3, r0
 802636e:	2b00      	cmp	r3, #0
 8026370:	d001      	beq.n	8026376 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8026372:	2301      	movs	r3, #1
 8026374:	e00e      	b.n	8026394 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8026376:	687b      	ldr	r3, [r7, #4]
 8026378:	2b0f      	cmp	r3, #15
 802637a:	d80a      	bhi.n	8026392 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 802637c:	2200      	movs	r2, #0
 802637e:	6879      	ldr	r1, [r7, #4]
 8026380:	f04f 30ff 	mov.w	r0, #4294967295
 8026384:	f000 fd21 	bl	8026dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8026388:	4a06      	ldr	r2, [pc, #24]	; (80263a4 <HAL_InitTick+0x5c>)
 802638a:	687b      	ldr	r3, [r7, #4]
 802638c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 802638e:	2300      	movs	r3, #0
 8026390:	e000      	b.n	8026394 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8026392:	2301      	movs	r3, #1
}
 8026394:	4618      	mov	r0, r3
 8026396:	3708      	adds	r7, #8
 8026398:	46bd      	mov	sp, r7
 802639a:	bd80      	pop	{r7, pc}
 802639c:	20000014 	.word	0x20000014
 80263a0:	2000001c 	.word	0x2000001c
 80263a4:	20000018 	.word	0x20000018

080263a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80263a8:	b480      	push	{r7}
 80263aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80263ac:	4b06      	ldr	r3, [pc, #24]	; (80263c8 <HAL_IncTick+0x20>)
 80263ae:	781b      	ldrb	r3, [r3, #0]
 80263b0:	461a      	mov	r2, r3
 80263b2:	4b06      	ldr	r3, [pc, #24]	; (80263cc <HAL_IncTick+0x24>)
 80263b4:	681b      	ldr	r3, [r3, #0]
 80263b6:	4413      	add	r3, r2
 80263b8:	4a04      	ldr	r2, [pc, #16]	; (80263cc <HAL_IncTick+0x24>)
 80263ba:	6013      	str	r3, [r2, #0]
}
 80263bc:	bf00      	nop
 80263be:	46bd      	mov	sp, r7
 80263c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80263c4:	4770      	bx	lr
 80263c6:	bf00      	nop
 80263c8:	2000001c 	.word	0x2000001c
 80263cc:	20000a18 	.word	0x20000a18

080263d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80263d0:	b480      	push	{r7}
 80263d2:	af00      	add	r7, sp, #0
  return uwTick;
 80263d4:	4b03      	ldr	r3, [pc, #12]	; (80263e4 <HAL_GetTick+0x14>)
 80263d6:	681b      	ldr	r3, [r3, #0]
}
 80263d8:	4618      	mov	r0, r3
 80263da:	46bd      	mov	sp, r7
 80263dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80263e0:	4770      	bx	lr
 80263e2:	bf00      	nop
 80263e4:	20000a18 	.word	0x20000a18

080263e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80263e8:	b580      	push	{r7, lr}
 80263ea:	b084      	sub	sp, #16
 80263ec:	af00      	add	r7, sp, #0
 80263ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80263f0:	f7ff ffee 	bl	80263d0 <HAL_GetTick>
 80263f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80263f6:	687b      	ldr	r3, [r7, #4]
 80263f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80263fa:	68fb      	ldr	r3, [r7, #12]
 80263fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026400:	d005      	beq.n	802640e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8026402:	4b09      	ldr	r3, [pc, #36]	; (8026428 <HAL_Delay+0x40>)
 8026404:	781b      	ldrb	r3, [r3, #0]
 8026406:	461a      	mov	r2, r3
 8026408:	68fb      	ldr	r3, [r7, #12]
 802640a:	4413      	add	r3, r2
 802640c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 802640e:	bf00      	nop
 8026410:	f7ff ffde 	bl	80263d0 <HAL_GetTick>
 8026414:	4602      	mov	r2, r0
 8026416:	68bb      	ldr	r3, [r7, #8]
 8026418:	1ad3      	subs	r3, r2, r3
 802641a:	68fa      	ldr	r2, [r7, #12]
 802641c:	429a      	cmp	r2, r3
 802641e:	d8f7      	bhi.n	8026410 <HAL_Delay+0x28>
  {
  }
}
 8026420:	bf00      	nop
 8026422:	3710      	adds	r7, #16
 8026424:	46bd      	mov	sp, r7
 8026426:	bd80      	pop	{r7, pc}
 8026428:	2000001c 	.word	0x2000001c

0802642c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 802642c:	b580      	push	{r7, lr}
 802642e:	b084      	sub	sp, #16
 8026430:	af00      	add	r7, sp, #0
 8026432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8026434:	2300      	movs	r3, #0
 8026436:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8026438:	687b      	ldr	r3, [r7, #4]
 802643a:	2b00      	cmp	r3, #0
 802643c:	d101      	bne.n	8026442 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 802643e:	2301      	movs	r3, #1
 8026440:	e033      	b.n	80264aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8026442:	687b      	ldr	r3, [r7, #4]
 8026444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026446:	2b00      	cmp	r3, #0
 8026448:	d109      	bne.n	802645e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 802644a:	6878      	ldr	r0, [r7, #4]
 802644c:	f7ff f94c 	bl	80256e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8026450:	687b      	ldr	r3, [r7, #4]
 8026452:	2200      	movs	r2, #0
 8026454:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8026456:	687b      	ldr	r3, [r7, #4]
 8026458:	2200      	movs	r2, #0
 802645a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 802645e:	687b      	ldr	r3, [r7, #4]
 8026460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026462:	f003 0310 	and.w	r3, r3, #16
 8026466:	2b00      	cmp	r3, #0
 8026468:	d118      	bne.n	802649c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 802646a:	687b      	ldr	r3, [r7, #4]
 802646c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802646e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8026472:	f023 0302 	bic.w	r3, r3, #2
 8026476:	f043 0202 	orr.w	r2, r3, #2
 802647a:	687b      	ldr	r3, [r7, #4]
 802647c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 802647e:	6878      	ldr	r0, [r7, #4]
 8026480:	f000 fa4a 	bl	8026918 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8026484:	687b      	ldr	r3, [r7, #4]
 8026486:	2200      	movs	r2, #0
 8026488:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 802648a:	687b      	ldr	r3, [r7, #4]
 802648c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802648e:	f023 0303 	bic.w	r3, r3, #3
 8026492:	f043 0201 	orr.w	r2, r3, #1
 8026496:	687b      	ldr	r3, [r7, #4]
 8026498:	641a      	str	r2, [r3, #64]	; 0x40
 802649a:	e001      	b.n	80264a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 802649c:	2301      	movs	r3, #1
 802649e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80264a0:	687b      	ldr	r3, [r7, #4]
 80264a2:	2200      	movs	r2, #0
 80264a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80264a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80264aa:	4618      	mov	r0, r3
 80264ac:	3710      	adds	r7, #16
 80264ae:	46bd      	mov	sp, r7
 80264b0:	bd80      	pop	{r7, pc}
	...

080264b4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80264b4:	b580      	push	{r7, lr}
 80264b6:	b086      	sub	sp, #24
 80264b8:	af00      	add	r7, sp, #0
 80264ba:	60f8      	str	r0, [r7, #12]
 80264bc:	60b9      	str	r1, [r7, #8]
 80264be:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80264c0:	2300      	movs	r3, #0
 80264c2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80264c4:	68fb      	ldr	r3, [r7, #12]
 80264c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80264ca:	2b01      	cmp	r3, #1
 80264cc:	d101      	bne.n	80264d2 <HAL_ADC_Start_DMA+0x1e>
 80264ce:	2302      	movs	r3, #2
 80264d0:	e0cc      	b.n	802666c <HAL_ADC_Start_DMA+0x1b8>
 80264d2:	68fb      	ldr	r3, [r7, #12]
 80264d4:	2201      	movs	r2, #1
 80264d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80264da:	68fb      	ldr	r3, [r7, #12]
 80264dc:	681b      	ldr	r3, [r3, #0]
 80264de:	689b      	ldr	r3, [r3, #8]
 80264e0:	f003 0301 	and.w	r3, r3, #1
 80264e4:	2b01      	cmp	r3, #1
 80264e6:	d018      	beq.n	802651a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80264e8:	68fb      	ldr	r3, [r7, #12]
 80264ea:	681b      	ldr	r3, [r3, #0]
 80264ec:	689a      	ldr	r2, [r3, #8]
 80264ee:	68fb      	ldr	r3, [r7, #12]
 80264f0:	681b      	ldr	r3, [r3, #0]
 80264f2:	f042 0201 	orr.w	r2, r2, #1
 80264f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80264f8:	4b5e      	ldr	r3, [pc, #376]	; (8026674 <HAL_ADC_Start_DMA+0x1c0>)
 80264fa:	681b      	ldr	r3, [r3, #0]
 80264fc:	4a5e      	ldr	r2, [pc, #376]	; (8026678 <HAL_ADC_Start_DMA+0x1c4>)
 80264fe:	fba2 2303 	umull	r2, r3, r2, r3
 8026502:	0c9a      	lsrs	r2, r3, #18
 8026504:	4613      	mov	r3, r2
 8026506:	005b      	lsls	r3, r3, #1
 8026508:	4413      	add	r3, r2
 802650a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 802650c:	e002      	b.n	8026514 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 802650e:	693b      	ldr	r3, [r7, #16]
 8026510:	3b01      	subs	r3, #1
 8026512:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8026514:	693b      	ldr	r3, [r7, #16]
 8026516:	2b00      	cmp	r3, #0
 8026518:	d1f9      	bne.n	802650e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 802651a:	68fb      	ldr	r3, [r7, #12]
 802651c:	681b      	ldr	r3, [r3, #0]
 802651e:	689b      	ldr	r3, [r3, #8]
 8026520:	f003 0301 	and.w	r3, r3, #1
 8026524:	2b01      	cmp	r3, #1
 8026526:	f040 80a0 	bne.w	802666a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 802652a:	68fb      	ldr	r3, [r7, #12]
 802652c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802652e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8026532:	f023 0301 	bic.w	r3, r3, #1
 8026536:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 802653a:	68fb      	ldr	r3, [r7, #12]
 802653c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 802653e:	68fb      	ldr	r3, [r7, #12]
 8026540:	681b      	ldr	r3, [r3, #0]
 8026542:	685b      	ldr	r3, [r3, #4]
 8026544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8026548:	2b00      	cmp	r3, #0
 802654a:	d007      	beq.n	802655c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 802654c:	68fb      	ldr	r3, [r7, #12]
 802654e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026550:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8026554:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8026558:	68fb      	ldr	r3, [r7, #12]
 802655a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 802655c:	68fb      	ldr	r3, [r7, #12]
 802655e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026560:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8026564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8026568:	d106      	bne.n	8026578 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 802656a:	68fb      	ldr	r3, [r7, #12]
 802656c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802656e:	f023 0206 	bic.w	r2, r3, #6
 8026572:	68fb      	ldr	r3, [r7, #12]
 8026574:	645a      	str	r2, [r3, #68]	; 0x44
 8026576:	e002      	b.n	802657e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8026578:	68fb      	ldr	r3, [r7, #12]
 802657a:	2200      	movs	r2, #0
 802657c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 802657e:	68fb      	ldr	r3, [r7, #12]
 8026580:	2200      	movs	r2, #0
 8026582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8026586:	4b3d      	ldr	r3, [pc, #244]	; (802667c <HAL_ADC_Start_DMA+0x1c8>)
 8026588:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 802658a:	68fb      	ldr	r3, [r7, #12]
 802658c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802658e:	4a3c      	ldr	r2, [pc, #240]	; (8026680 <HAL_ADC_Start_DMA+0x1cc>)
 8026590:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8026592:	68fb      	ldr	r3, [r7, #12]
 8026594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026596:	4a3b      	ldr	r2, [pc, #236]	; (8026684 <HAL_ADC_Start_DMA+0x1d0>)
 8026598:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 802659a:	68fb      	ldr	r3, [r7, #12]
 802659c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802659e:	4a3a      	ldr	r2, [pc, #232]	; (8026688 <HAL_ADC_Start_DMA+0x1d4>)
 80265a0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80265a2:	68fb      	ldr	r3, [r7, #12]
 80265a4:	681b      	ldr	r3, [r3, #0]
 80265a6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80265aa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80265ac:	68fb      	ldr	r3, [r7, #12]
 80265ae:	681b      	ldr	r3, [r3, #0]
 80265b0:	685a      	ldr	r2, [r3, #4]
 80265b2:	68fb      	ldr	r3, [r7, #12]
 80265b4:	681b      	ldr	r3, [r3, #0]
 80265b6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80265ba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80265bc:	68fb      	ldr	r3, [r7, #12]
 80265be:	681b      	ldr	r3, [r3, #0]
 80265c0:	689a      	ldr	r2, [r3, #8]
 80265c2:	68fb      	ldr	r3, [r7, #12]
 80265c4:	681b      	ldr	r3, [r3, #0]
 80265c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80265ca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80265cc:	68fb      	ldr	r3, [r7, #12]
 80265ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80265d0:	68fb      	ldr	r3, [r7, #12]
 80265d2:	681b      	ldr	r3, [r3, #0]
 80265d4:	334c      	adds	r3, #76	; 0x4c
 80265d6:	4619      	mov	r1, r3
 80265d8:	68ba      	ldr	r2, [r7, #8]
 80265da:	687b      	ldr	r3, [r7, #4]
 80265dc:	f000 fcda 	bl	8026f94 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80265e0:	697b      	ldr	r3, [r7, #20]
 80265e2:	685b      	ldr	r3, [r3, #4]
 80265e4:	f003 031f 	and.w	r3, r3, #31
 80265e8:	2b00      	cmp	r3, #0
 80265ea:	d12a      	bne.n	8026642 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80265ec:	68fb      	ldr	r3, [r7, #12]
 80265ee:	681b      	ldr	r3, [r3, #0]
 80265f0:	4a26      	ldr	r2, [pc, #152]	; (802668c <HAL_ADC_Start_DMA+0x1d8>)
 80265f2:	4293      	cmp	r3, r2
 80265f4:	d015      	beq.n	8026622 <HAL_ADC_Start_DMA+0x16e>
 80265f6:	68fb      	ldr	r3, [r7, #12]
 80265f8:	681b      	ldr	r3, [r3, #0]
 80265fa:	4a25      	ldr	r2, [pc, #148]	; (8026690 <HAL_ADC_Start_DMA+0x1dc>)
 80265fc:	4293      	cmp	r3, r2
 80265fe:	d105      	bne.n	802660c <HAL_ADC_Start_DMA+0x158>
 8026600:	4b1e      	ldr	r3, [pc, #120]	; (802667c <HAL_ADC_Start_DMA+0x1c8>)
 8026602:	685b      	ldr	r3, [r3, #4]
 8026604:	f003 031f 	and.w	r3, r3, #31
 8026608:	2b00      	cmp	r3, #0
 802660a:	d00a      	beq.n	8026622 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 802660c:	68fb      	ldr	r3, [r7, #12]
 802660e:	681b      	ldr	r3, [r3, #0]
 8026610:	4a20      	ldr	r2, [pc, #128]	; (8026694 <HAL_ADC_Start_DMA+0x1e0>)
 8026612:	4293      	cmp	r3, r2
 8026614:	d129      	bne.n	802666a <HAL_ADC_Start_DMA+0x1b6>
 8026616:	4b19      	ldr	r3, [pc, #100]	; (802667c <HAL_ADC_Start_DMA+0x1c8>)
 8026618:	685b      	ldr	r3, [r3, #4]
 802661a:	f003 031f 	and.w	r3, r3, #31
 802661e:	2b0f      	cmp	r3, #15
 8026620:	d823      	bhi.n	802666a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8026622:	68fb      	ldr	r3, [r7, #12]
 8026624:	681b      	ldr	r3, [r3, #0]
 8026626:	689b      	ldr	r3, [r3, #8]
 8026628:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 802662c:	2b00      	cmp	r3, #0
 802662e:	d11c      	bne.n	802666a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8026630:	68fb      	ldr	r3, [r7, #12]
 8026632:	681b      	ldr	r3, [r3, #0]
 8026634:	689a      	ldr	r2, [r3, #8]
 8026636:	68fb      	ldr	r3, [r7, #12]
 8026638:	681b      	ldr	r3, [r3, #0]
 802663a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 802663e:	609a      	str	r2, [r3, #8]
 8026640:	e013      	b.n	802666a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8026642:	68fb      	ldr	r3, [r7, #12]
 8026644:	681b      	ldr	r3, [r3, #0]
 8026646:	4a11      	ldr	r2, [pc, #68]	; (802668c <HAL_ADC_Start_DMA+0x1d8>)
 8026648:	4293      	cmp	r3, r2
 802664a:	d10e      	bne.n	802666a <HAL_ADC_Start_DMA+0x1b6>
 802664c:	68fb      	ldr	r3, [r7, #12]
 802664e:	681b      	ldr	r3, [r3, #0]
 8026650:	689b      	ldr	r3, [r3, #8]
 8026652:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8026656:	2b00      	cmp	r3, #0
 8026658:	d107      	bne.n	802666a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 802665a:	68fb      	ldr	r3, [r7, #12]
 802665c:	681b      	ldr	r3, [r3, #0]
 802665e:	689a      	ldr	r2, [r3, #8]
 8026660:	68fb      	ldr	r3, [r7, #12]
 8026662:	681b      	ldr	r3, [r3, #0]
 8026664:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8026668:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 802666a:	2300      	movs	r3, #0
}
 802666c:	4618      	mov	r0, r3
 802666e:	3718      	adds	r7, #24
 8026670:	46bd      	mov	sp, r7
 8026672:	bd80      	pop	{r7, pc}
 8026674:	20000014 	.word	0x20000014
 8026678:	431bde83 	.word	0x431bde83
 802667c:	40012300 	.word	0x40012300
 8026680:	08026b11 	.word	0x08026b11
 8026684:	08026bcb 	.word	0x08026bcb
 8026688:	08026be7 	.word	0x08026be7
 802668c:	40012000 	.word	0x40012000
 8026690:	40012100 	.word	0x40012100
 8026694:	40012200 	.word	0x40012200

08026698 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8026698:	b480      	push	{r7}
 802669a:	b083      	sub	sp, #12
 802669c:	af00      	add	r7, sp, #0
 802669e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80266a0:	bf00      	nop
 80266a2:	370c      	adds	r7, #12
 80266a4:	46bd      	mov	sp, r7
 80266a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266aa:	4770      	bx	lr

080266ac <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80266ac:	b480      	push	{r7}
 80266ae:	b083      	sub	sp, #12
 80266b0:	af00      	add	r7, sp, #0
 80266b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80266b4:	bf00      	nop
 80266b6:	370c      	adds	r7, #12
 80266b8:	46bd      	mov	sp, r7
 80266ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266be:	4770      	bx	lr

080266c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80266c0:	b480      	push	{r7}
 80266c2:	b083      	sub	sp, #12
 80266c4:	af00      	add	r7, sp, #0
 80266c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80266c8:	bf00      	nop
 80266ca:	370c      	adds	r7, #12
 80266cc:	46bd      	mov	sp, r7
 80266ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266d2:	4770      	bx	lr

080266d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80266d4:	b480      	push	{r7}
 80266d6:	b085      	sub	sp, #20
 80266d8:	af00      	add	r7, sp, #0
 80266da:	6078      	str	r0, [r7, #4]
 80266dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80266de:	2300      	movs	r3, #0
 80266e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80266e2:	687b      	ldr	r3, [r7, #4]
 80266e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80266e8:	2b01      	cmp	r3, #1
 80266ea:	d101      	bne.n	80266f0 <HAL_ADC_ConfigChannel+0x1c>
 80266ec:	2302      	movs	r3, #2
 80266ee:	e105      	b.n	80268fc <HAL_ADC_ConfigChannel+0x228>
 80266f0:	687b      	ldr	r3, [r7, #4]
 80266f2:	2201      	movs	r2, #1
 80266f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80266f8:	683b      	ldr	r3, [r7, #0]
 80266fa:	681b      	ldr	r3, [r3, #0]
 80266fc:	2b09      	cmp	r3, #9
 80266fe:	d925      	bls.n	802674c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8026700:	687b      	ldr	r3, [r7, #4]
 8026702:	681b      	ldr	r3, [r3, #0]
 8026704:	68d9      	ldr	r1, [r3, #12]
 8026706:	683b      	ldr	r3, [r7, #0]
 8026708:	681b      	ldr	r3, [r3, #0]
 802670a:	b29b      	uxth	r3, r3
 802670c:	461a      	mov	r2, r3
 802670e:	4613      	mov	r3, r2
 8026710:	005b      	lsls	r3, r3, #1
 8026712:	4413      	add	r3, r2
 8026714:	3b1e      	subs	r3, #30
 8026716:	2207      	movs	r2, #7
 8026718:	fa02 f303 	lsl.w	r3, r2, r3
 802671c:	43da      	mvns	r2, r3
 802671e:	687b      	ldr	r3, [r7, #4]
 8026720:	681b      	ldr	r3, [r3, #0]
 8026722:	400a      	ands	r2, r1
 8026724:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8026726:	687b      	ldr	r3, [r7, #4]
 8026728:	681b      	ldr	r3, [r3, #0]
 802672a:	68d9      	ldr	r1, [r3, #12]
 802672c:	683b      	ldr	r3, [r7, #0]
 802672e:	689a      	ldr	r2, [r3, #8]
 8026730:	683b      	ldr	r3, [r7, #0]
 8026732:	681b      	ldr	r3, [r3, #0]
 8026734:	b29b      	uxth	r3, r3
 8026736:	4618      	mov	r0, r3
 8026738:	4603      	mov	r3, r0
 802673a:	005b      	lsls	r3, r3, #1
 802673c:	4403      	add	r3, r0
 802673e:	3b1e      	subs	r3, #30
 8026740:	409a      	lsls	r2, r3
 8026742:	687b      	ldr	r3, [r7, #4]
 8026744:	681b      	ldr	r3, [r3, #0]
 8026746:	430a      	orrs	r2, r1
 8026748:	60da      	str	r2, [r3, #12]
 802674a:	e022      	b.n	8026792 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 802674c:	687b      	ldr	r3, [r7, #4]
 802674e:	681b      	ldr	r3, [r3, #0]
 8026750:	6919      	ldr	r1, [r3, #16]
 8026752:	683b      	ldr	r3, [r7, #0]
 8026754:	681b      	ldr	r3, [r3, #0]
 8026756:	b29b      	uxth	r3, r3
 8026758:	461a      	mov	r2, r3
 802675a:	4613      	mov	r3, r2
 802675c:	005b      	lsls	r3, r3, #1
 802675e:	4413      	add	r3, r2
 8026760:	2207      	movs	r2, #7
 8026762:	fa02 f303 	lsl.w	r3, r2, r3
 8026766:	43da      	mvns	r2, r3
 8026768:	687b      	ldr	r3, [r7, #4]
 802676a:	681b      	ldr	r3, [r3, #0]
 802676c:	400a      	ands	r2, r1
 802676e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8026770:	687b      	ldr	r3, [r7, #4]
 8026772:	681b      	ldr	r3, [r3, #0]
 8026774:	6919      	ldr	r1, [r3, #16]
 8026776:	683b      	ldr	r3, [r7, #0]
 8026778:	689a      	ldr	r2, [r3, #8]
 802677a:	683b      	ldr	r3, [r7, #0]
 802677c:	681b      	ldr	r3, [r3, #0]
 802677e:	b29b      	uxth	r3, r3
 8026780:	4618      	mov	r0, r3
 8026782:	4603      	mov	r3, r0
 8026784:	005b      	lsls	r3, r3, #1
 8026786:	4403      	add	r3, r0
 8026788:	409a      	lsls	r2, r3
 802678a:	687b      	ldr	r3, [r7, #4]
 802678c:	681b      	ldr	r3, [r3, #0]
 802678e:	430a      	orrs	r2, r1
 8026790:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8026792:	683b      	ldr	r3, [r7, #0]
 8026794:	685b      	ldr	r3, [r3, #4]
 8026796:	2b06      	cmp	r3, #6
 8026798:	d824      	bhi.n	80267e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 802679a:	687b      	ldr	r3, [r7, #4]
 802679c:	681b      	ldr	r3, [r3, #0]
 802679e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80267a0:	683b      	ldr	r3, [r7, #0]
 80267a2:	685a      	ldr	r2, [r3, #4]
 80267a4:	4613      	mov	r3, r2
 80267a6:	009b      	lsls	r3, r3, #2
 80267a8:	4413      	add	r3, r2
 80267aa:	3b05      	subs	r3, #5
 80267ac:	221f      	movs	r2, #31
 80267ae:	fa02 f303 	lsl.w	r3, r2, r3
 80267b2:	43da      	mvns	r2, r3
 80267b4:	687b      	ldr	r3, [r7, #4]
 80267b6:	681b      	ldr	r3, [r3, #0]
 80267b8:	400a      	ands	r2, r1
 80267ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80267bc:	687b      	ldr	r3, [r7, #4]
 80267be:	681b      	ldr	r3, [r3, #0]
 80267c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80267c2:	683b      	ldr	r3, [r7, #0]
 80267c4:	681b      	ldr	r3, [r3, #0]
 80267c6:	b29b      	uxth	r3, r3
 80267c8:	4618      	mov	r0, r3
 80267ca:	683b      	ldr	r3, [r7, #0]
 80267cc:	685a      	ldr	r2, [r3, #4]
 80267ce:	4613      	mov	r3, r2
 80267d0:	009b      	lsls	r3, r3, #2
 80267d2:	4413      	add	r3, r2
 80267d4:	3b05      	subs	r3, #5
 80267d6:	fa00 f203 	lsl.w	r2, r0, r3
 80267da:	687b      	ldr	r3, [r7, #4]
 80267dc:	681b      	ldr	r3, [r3, #0]
 80267de:	430a      	orrs	r2, r1
 80267e0:	635a      	str	r2, [r3, #52]	; 0x34
 80267e2:	e04c      	b.n	802687e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80267e4:	683b      	ldr	r3, [r7, #0]
 80267e6:	685b      	ldr	r3, [r3, #4]
 80267e8:	2b0c      	cmp	r3, #12
 80267ea:	d824      	bhi.n	8026836 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80267ec:	687b      	ldr	r3, [r7, #4]
 80267ee:	681b      	ldr	r3, [r3, #0]
 80267f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80267f2:	683b      	ldr	r3, [r7, #0]
 80267f4:	685a      	ldr	r2, [r3, #4]
 80267f6:	4613      	mov	r3, r2
 80267f8:	009b      	lsls	r3, r3, #2
 80267fa:	4413      	add	r3, r2
 80267fc:	3b23      	subs	r3, #35	; 0x23
 80267fe:	221f      	movs	r2, #31
 8026800:	fa02 f303 	lsl.w	r3, r2, r3
 8026804:	43da      	mvns	r2, r3
 8026806:	687b      	ldr	r3, [r7, #4]
 8026808:	681b      	ldr	r3, [r3, #0]
 802680a:	400a      	ands	r2, r1
 802680c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 802680e:	687b      	ldr	r3, [r7, #4]
 8026810:	681b      	ldr	r3, [r3, #0]
 8026812:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8026814:	683b      	ldr	r3, [r7, #0]
 8026816:	681b      	ldr	r3, [r3, #0]
 8026818:	b29b      	uxth	r3, r3
 802681a:	4618      	mov	r0, r3
 802681c:	683b      	ldr	r3, [r7, #0]
 802681e:	685a      	ldr	r2, [r3, #4]
 8026820:	4613      	mov	r3, r2
 8026822:	009b      	lsls	r3, r3, #2
 8026824:	4413      	add	r3, r2
 8026826:	3b23      	subs	r3, #35	; 0x23
 8026828:	fa00 f203 	lsl.w	r2, r0, r3
 802682c:	687b      	ldr	r3, [r7, #4]
 802682e:	681b      	ldr	r3, [r3, #0]
 8026830:	430a      	orrs	r2, r1
 8026832:	631a      	str	r2, [r3, #48]	; 0x30
 8026834:	e023      	b.n	802687e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8026836:	687b      	ldr	r3, [r7, #4]
 8026838:	681b      	ldr	r3, [r3, #0]
 802683a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 802683c:	683b      	ldr	r3, [r7, #0]
 802683e:	685a      	ldr	r2, [r3, #4]
 8026840:	4613      	mov	r3, r2
 8026842:	009b      	lsls	r3, r3, #2
 8026844:	4413      	add	r3, r2
 8026846:	3b41      	subs	r3, #65	; 0x41
 8026848:	221f      	movs	r2, #31
 802684a:	fa02 f303 	lsl.w	r3, r2, r3
 802684e:	43da      	mvns	r2, r3
 8026850:	687b      	ldr	r3, [r7, #4]
 8026852:	681b      	ldr	r3, [r3, #0]
 8026854:	400a      	ands	r2, r1
 8026856:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8026858:	687b      	ldr	r3, [r7, #4]
 802685a:	681b      	ldr	r3, [r3, #0]
 802685c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 802685e:	683b      	ldr	r3, [r7, #0]
 8026860:	681b      	ldr	r3, [r3, #0]
 8026862:	b29b      	uxth	r3, r3
 8026864:	4618      	mov	r0, r3
 8026866:	683b      	ldr	r3, [r7, #0]
 8026868:	685a      	ldr	r2, [r3, #4]
 802686a:	4613      	mov	r3, r2
 802686c:	009b      	lsls	r3, r3, #2
 802686e:	4413      	add	r3, r2
 8026870:	3b41      	subs	r3, #65	; 0x41
 8026872:	fa00 f203 	lsl.w	r2, r0, r3
 8026876:	687b      	ldr	r3, [r7, #4]
 8026878:	681b      	ldr	r3, [r3, #0]
 802687a:	430a      	orrs	r2, r1
 802687c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 802687e:	4b22      	ldr	r3, [pc, #136]	; (8026908 <HAL_ADC_ConfigChannel+0x234>)
 8026880:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8026882:	687b      	ldr	r3, [r7, #4]
 8026884:	681b      	ldr	r3, [r3, #0]
 8026886:	4a21      	ldr	r2, [pc, #132]	; (802690c <HAL_ADC_ConfigChannel+0x238>)
 8026888:	4293      	cmp	r3, r2
 802688a:	d109      	bne.n	80268a0 <HAL_ADC_ConfigChannel+0x1cc>
 802688c:	683b      	ldr	r3, [r7, #0]
 802688e:	681b      	ldr	r3, [r3, #0]
 8026890:	2b12      	cmp	r3, #18
 8026892:	d105      	bne.n	80268a0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8026894:	68fb      	ldr	r3, [r7, #12]
 8026896:	685b      	ldr	r3, [r3, #4]
 8026898:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 802689c:	68fb      	ldr	r3, [r7, #12]
 802689e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80268a0:	687b      	ldr	r3, [r7, #4]
 80268a2:	681b      	ldr	r3, [r3, #0]
 80268a4:	4a19      	ldr	r2, [pc, #100]	; (802690c <HAL_ADC_ConfigChannel+0x238>)
 80268a6:	4293      	cmp	r3, r2
 80268a8:	d123      	bne.n	80268f2 <HAL_ADC_ConfigChannel+0x21e>
 80268aa:	683b      	ldr	r3, [r7, #0]
 80268ac:	681b      	ldr	r3, [r3, #0]
 80268ae:	2b10      	cmp	r3, #16
 80268b0:	d003      	beq.n	80268ba <HAL_ADC_ConfigChannel+0x1e6>
 80268b2:	683b      	ldr	r3, [r7, #0]
 80268b4:	681b      	ldr	r3, [r3, #0]
 80268b6:	2b11      	cmp	r3, #17
 80268b8:	d11b      	bne.n	80268f2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80268ba:	68fb      	ldr	r3, [r7, #12]
 80268bc:	685b      	ldr	r3, [r3, #4]
 80268be:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80268c2:	68fb      	ldr	r3, [r7, #12]
 80268c4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80268c6:	683b      	ldr	r3, [r7, #0]
 80268c8:	681b      	ldr	r3, [r3, #0]
 80268ca:	2b10      	cmp	r3, #16
 80268cc:	d111      	bne.n	80268f2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80268ce:	4b10      	ldr	r3, [pc, #64]	; (8026910 <HAL_ADC_ConfigChannel+0x23c>)
 80268d0:	681b      	ldr	r3, [r3, #0]
 80268d2:	4a10      	ldr	r2, [pc, #64]	; (8026914 <HAL_ADC_ConfigChannel+0x240>)
 80268d4:	fba2 2303 	umull	r2, r3, r2, r3
 80268d8:	0c9a      	lsrs	r2, r3, #18
 80268da:	4613      	mov	r3, r2
 80268dc:	009b      	lsls	r3, r3, #2
 80268de:	4413      	add	r3, r2
 80268e0:	005b      	lsls	r3, r3, #1
 80268e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80268e4:	e002      	b.n	80268ec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80268e6:	68bb      	ldr	r3, [r7, #8]
 80268e8:	3b01      	subs	r3, #1
 80268ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80268ec:	68bb      	ldr	r3, [r7, #8]
 80268ee:	2b00      	cmp	r3, #0
 80268f0:	d1f9      	bne.n	80268e6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80268f2:	687b      	ldr	r3, [r7, #4]
 80268f4:	2200      	movs	r2, #0
 80268f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80268fa:	2300      	movs	r3, #0
}
 80268fc:	4618      	mov	r0, r3
 80268fe:	3714      	adds	r7, #20
 8026900:	46bd      	mov	sp, r7
 8026902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026906:	4770      	bx	lr
 8026908:	40012300 	.word	0x40012300
 802690c:	40012000 	.word	0x40012000
 8026910:	20000014 	.word	0x20000014
 8026914:	431bde83 	.word	0x431bde83

08026918 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8026918:	b480      	push	{r7}
 802691a:	b085      	sub	sp, #20
 802691c:	af00      	add	r7, sp, #0
 802691e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8026920:	4b79      	ldr	r3, [pc, #484]	; (8026b08 <ADC_Init+0x1f0>)
 8026922:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8026924:	68fb      	ldr	r3, [r7, #12]
 8026926:	685b      	ldr	r3, [r3, #4]
 8026928:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 802692c:	68fb      	ldr	r3, [r7, #12]
 802692e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8026930:	68fb      	ldr	r3, [r7, #12]
 8026932:	685a      	ldr	r2, [r3, #4]
 8026934:	687b      	ldr	r3, [r7, #4]
 8026936:	685b      	ldr	r3, [r3, #4]
 8026938:	431a      	orrs	r2, r3
 802693a:	68fb      	ldr	r3, [r7, #12]
 802693c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 802693e:	687b      	ldr	r3, [r7, #4]
 8026940:	681b      	ldr	r3, [r3, #0]
 8026942:	685a      	ldr	r2, [r3, #4]
 8026944:	687b      	ldr	r3, [r7, #4]
 8026946:	681b      	ldr	r3, [r3, #0]
 8026948:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802694c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 802694e:	687b      	ldr	r3, [r7, #4]
 8026950:	681b      	ldr	r3, [r3, #0]
 8026952:	6859      	ldr	r1, [r3, #4]
 8026954:	687b      	ldr	r3, [r7, #4]
 8026956:	691b      	ldr	r3, [r3, #16]
 8026958:	021a      	lsls	r2, r3, #8
 802695a:	687b      	ldr	r3, [r7, #4]
 802695c:	681b      	ldr	r3, [r3, #0]
 802695e:	430a      	orrs	r2, r1
 8026960:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8026962:	687b      	ldr	r3, [r7, #4]
 8026964:	681b      	ldr	r3, [r3, #0]
 8026966:	685a      	ldr	r2, [r3, #4]
 8026968:	687b      	ldr	r3, [r7, #4]
 802696a:	681b      	ldr	r3, [r3, #0]
 802696c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8026970:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8026972:	687b      	ldr	r3, [r7, #4]
 8026974:	681b      	ldr	r3, [r3, #0]
 8026976:	6859      	ldr	r1, [r3, #4]
 8026978:	687b      	ldr	r3, [r7, #4]
 802697a:	689a      	ldr	r2, [r3, #8]
 802697c:	687b      	ldr	r3, [r7, #4]
 802697e:	681b      	ldr	r3, [r3, #0]
 8026980:	430a      	orrs	r2, r1
 8026982:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8026984:	687b      	ldr	r3, [r7, #4]
 8026986:	681b      	ldr	r3, [r3, #0]
 8026988:	689a      	ldr	r2, [r3, #8]
 802698a:	687b      	ldr	r3, [r7, #4]
 802698c:	681b      	ldr	r3, [r3, #0]
 802698e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8026992:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8026994:	687b      	ldr	r3, [r7, #4]
 8026996:	681b      	ldr	r3, [r3, #0]
 8026998:	6899      	ldr	r1, [r3, #8]
 802699a:	687b      	ldr	r3, [r7, #4]
 802699c:	68da      	ldr	r2, [r3, #12]
 802699e:	687b      	ldr	r3, [r7, #4]
 80269a0:	681b      	ldr	r3, [r3, #0]
 80269a2:	430a      	orrs	r2, r1
 80269a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80269a6:	687b      	ldr	r3, [r7, #4]
 80269a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80269aa:	4a58      	ldr	r2, [pc, #352]	; (8026b0c <ADC_Init+0x1f4>)
 80269ac:	4293      	cmp	r3, r2
 80269ae:	d022      	beq.n	80269f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80269b0:	687b      	ldr	r3, [r7, #4]
 80269b2:	681b      	ldr	r3, [r3, #0]
 80269b4:	689a      	ldr	r2, [r3, #8]
 80269b6:	687b      	ldr	r3, [r7, #4]
 80269b8:	681b      	ldr	r3, [r3, #0]
 80269ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80269be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80269c0:	687b      	ldr	r3, [r7, #4]
 80269c2:	681b      	ldr	r3, [r3, #0]
 80269c4:	6899      	ldr	r1, [r3, #8]
 80269c6:	687b      	ldr	r3, [r7, #4]
 80269c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80269ca:	687b      	ldr	r3, [r7, #4]
 80269cc:	681b      	ldr	r3, [r3, #0]
 80269ce:	430a      	orrs	r2, r1
 80269d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80269d2:	687b      	ldr	r3, [r7, #4]
 80269d4:	681b      	ldr	r3, [r3, #0]
 80269d6:	689a      	ldr	r2, [r3, #8]
 80269d8:	687b      	ldr	r3, [r7, #4]
 80269da:	681b      	ldr	r3, [r3, #0]
 80269dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80269e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80269e2:	687b      	ldr	r3, [r7, #4]
 80269e4:	681b      	ldr	r3, [r3, #0]
 80269e6:	6899      	ldr	r1, [r3, #8]
 80269e8:	687b      	ldr	r3, [r7, #4]
 80269ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80269ec:	687b      	ldr	r3, [r7, #4]
 80269ee:	681b      	ldr	r3, [r3, #0]
 80269f0:	430a      	orrs	r2, r1
 80269f2:	609a      	str	r2, [r3, #8]
 80269f4:	e00f      	b.n	8026a16 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80269f6:	687b      	ldr	r3, [r7, #4]
 80269f8:	681b      	ldr	r3, [r3, #0]
 80269fa:	689a      	ldr	r2, [r3, #8]
 80269fc:	687b      	ldr	r3, [r7, #4]
 80269fe:	681b      	ldr	r3, [r3, #0]
 8026a00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8026a04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8026a06:	687b      	ldr	r3, [r7, #4]
 8026a08:	681b      	ldr	r3, [r3, #0]
 8026a0a:	689a      	ldr	r2, [r3, #8]
 8026a0c:	687b      	ldr	r3, [r7, #4]
 8026a0e:	681b      	ldr	r3, [r3, #0]
 8026a10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8026a14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8026a16:	687b      	ldr	r3, [r7, #4]
 8026a18:	681b      	ldr	r3, [r3, #0]
 8026a1a:	689a      	ldr	r2, [r3, #8]
 8026a1c:	687b      	ldr	r3, [r7, #4]
 8026a1e:	681b      	ldr	r3, [r3, #0]
 8026a20:	f022 0202 	bic.w	r2, r2, #2
 8026a24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8026a26:	687b      	ldr	r3, [r7, #4]
 8026a28:	681b      	ldr	r3, [r3, #0]
 8026a2a:	6899      	ldr	r1, [r3, #8]
 8026a2c:	687b      	ldr	r3, [r7, #4]
 8026a2e:	7e1b      	ldrb	r3, [r3, #24]
 8026a30:	005a      	lsls	r2, r3, #1
 8026a32:	687b      	ldr	r3, [r7, #4]
 8026a34:	681b      	ldr	r3, [r3, #0]
 8026a36:	430a      	orrs	r2, r1
 8026a38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8026a3a:	687b      	ldr	r3, [r7, #4]
 8026a3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8026a40:	2b00      	cmp	r3, #0
 8026a42:	d01b      	beq.n	8026a7c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8026a44:	687b      	ldr	r3, [r7, #4]
 8026a46:	681b      	ldr	r3, [r3, #0]
 8026a48:	685a      	ldr	r2, [r3, #4]
 8026a4a:	687b      	ldr	r3, [r7, #4]
 8026a4c:	681b      	ldr	r3, [r3, #0]
 8026a4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8026a52:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8026a54:	687b      	ldr	r3, [r7, #4]
 8026a56:	681b      	ldr	r3, [r3, #0]
 8026a58:	685a      	ldr	r2, [r3, #4]
 8026a5a:	687b      	ldr	r3, [r7, #4]
 8026a5c:	681b      	ldr	r3, [r3, #0]
 8026a5e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8026a62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8026a64:	687b      	ldr	r3, [r7, #4]
 8026a66:	681b      	ldr	r3, [r3, #0]
 8026a68:	6859      	ldr	r1, [r3, #4]
 8026a6a:	687b      	ldr	r3, [r7, #4]
 8026a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026a6e:	3b01      	subs	r3, #1
 8026a70:	035a      	lsls	r2, r3, #13
 8026a72:	687b      	ldr	r3, [r7, #4]
 8026a74:	681b      	ldr	r3, [r3, #0]
 8026a76:	430a      	orrs	r2, r1
 8026a78:	605a      	str	r2, [r3, #4]
 8026a7a:	e007      	b.n	8026a8c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8026a7c:	687b      	ldr	r3, [r7, #4]
 8026a7e:	681b      	ldr	r3, [r3, #0]
 8026a80:	685a      	ldr	r2, [r3, #4]
 8026a82:	687b      	ldr	r3, [r7, #4]
 8026a84:	681b      	ldr	r3, [r3, #0]
 8026a86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8026a8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8026a8c:	687b      	ldr	r3, [r7, #4]
 8026a8e:	681b      	ldr	r3, [r3, #0]
 8026a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026a92:	687b      	ldr	r3, [r7, #4]
 8026a94:	681b      	ldr	r3, [r3, #0]
 8026a96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8026a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8026a9c:	687b      	ldr	r3, [r7, #4]
 8026a9e:	681b      	ldr	r3, [r3, #0]
 8026aa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8026aa2:	687b      	ldr	r3, [r7, #4]
 8026aa4:	69db      	ldr	r3, [r3, #28]
 8026aa6:	3b01      	subs	r3, #1
 8026aa8:	051a      	lsls	r2, r3, #20
 8026aaa:	687b      	ldr	r3, [r7, #4]
 8026aac:	681b      	ldr	r3, [r3, #0]
 8026aae:	430a      	orrs	r2, r1
 8026ab0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8026ab2:	687b      	ldr	r3, [r7, #4]
 8026ab4:	681b      	ldr	r3, [r3, #0]
 8026ab6:	689a      	ldr	r2, [r3, #8]
 8026ab8:	687b      	ldr	r3, [r7, #4]
 8026aba:	681b      	ldr	r3, [r3, #0]
 8026abc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8026ac0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8026ac2:	687b      	ldr	r3, [r7, #4]
 8026ac4:	681b      	ldr	r3, [r3, #0]
 8026ac6:	6899      	ldr	r1, [r3, #8]
 8026ac8:	687b      	ldr	r3, [r7, #4]
 8026aca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8026ace:	025a      	lsls	r2, r3, #9
 8026ad0:	687b      	ldr	r3, [r7, #4]
 8026ad2:	681b      	ldr	r3, [r3, #0]
 8026ad4:	430a      	orrs	r2, r1
 8026ad6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8026ad8:	687b      	ldr	r3, [r7, #4]
 8026ada:	681b      	ldr	r3, [r3, #0]
 8026adc:	689a      	ldr	r2, [r3, #8]
 8026ade:	687b      	ldr	r3, [r7, #4]
 8026ae0:	681b      	ldr	r3, [r3, #0]
 8026ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8026ae6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8026ae8:	687b      	ldr	r3, [r7, #4]
 8026aea:	681b      	ldr	r3, [r3, #0]
 8026aec:	6899      	ldr	r1, [r3, #8]
 8026aee:	687b      	ldr	r3, [r7, #4]
 8026af0:	695b      	ldr	r3, [r3, #20]
 8026af2:	029a      	lsls	r2, r3, #10
 8026af4:	687b      	ldr	r3, [r7, #4]
 8026af6:	681b      	ldr	r3, [r3, #0]
 8026af8:	430a      	orrs	r2, r1
 8026afa:	609a      	str	r2, [r3, #8]
}
 8026afc:	bf00      	nop
 8026afe:	3714      	adds	r7, #20
 8026b00:	46bd      	mov	sp, r7
 8026b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b06:	4770      	bx	lr
 8026b08:	40012300 	.word	0x40012300
 8026b0c:	0f000001 	.word	0x0f000001

08026b10 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8026b10:	b580      	push	{r7, lr}
 8026b12:	b084      	sub	sp, #16
 8026b14:	af00      	add	r7, sp, #0
 8026b16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8026b18:	687b      	ldr	r3, [r7, #4]
 8026b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026b1c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8026b1e:	68fb      	ldr	r3, [r7, #12]
 8026b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026b22:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8026b26:	2b00      	cmp	r3, #0
 8026b28:	d13c      	bne.n	8026ba4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8026b2a:	68fb      	ldr	r3, [r7, #12]
 8026b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026b2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8026b32:	68fb      	ldr	r3, [r7, #12]
 8026b34:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8026b36:	68fb      	ldr	r3, [r7, #12]
 8026b38:	681b      	ldr	r3, [r3, #0]
 8026b3a:	689b      	ldr	r3, [r3, #8]
 8026b3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8026b40:	2b00      	cmp	r3, #0
 8026b42:	d12b      	bne.n	8026b9c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8026b44:	68fb      	ldr	r3, [r7, #12]
 8026b46:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8026b48:	2b00      	cmp	r3, #0
 8026b4a:	d127      	bne.n	8026b9c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8026b4c:	68fb      	ldr	r3, [r7, #12]
 8026b4e:	681b      	ldr	r3, [r3, #0]
 8026b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026b52:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8026b56:	2b00      	cmp	r3, #0
 8026b58:	d006      	beq.n	8026b68 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8026b5a:	68fb      	ldr	r3, [r7, #12]
 8026b5c:	681b      	ldr	r3, [r3, #0]
 8026b5e:	689b      	ldr	r3, [r3, #8]
 8026b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8026b64:	2b00      	cmp	r3, #0
 8026b66:	d119      	bne.n	8026b9c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8026b68:	68fb      	ldr	r3, [r7, #12]
 8026b6a:	681b      	ldr	r3, [r3, #0]
 8026b6c:	685a      	ldr	r2, [r3, #4]
 8026b6e:	68fb      	ldr	r3, [r7, #12]
 8026b70:	681b      	ldr	r3, [r3, #0]
 8026b72:	f022 0220 	bic.w	r2, r2, #32
 8026b76:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8026b78:	68fb      	ldr	r3, [r7, #12]
 8026b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026b7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8026b80:	68fb      	ldr	r3, [r7, #12]
 8026b82:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8026b84:	68fb      	ldr	r3, [r7, #12]
 8026b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026b88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8026b8c:	2b00      	cmp	r3, #0
 8026b8e:	d105      	bne.n	8026b9c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8026b90:	68fb      	ldr	r3, [r7, #12]
 8026b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026b94:	f043 0201 	orr.w	r2, r3, #1
 8026b98:	68fb      	ldr	r3, [r7, #12]
 8026b9a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8026b9c:	68f8      	ldr	r0, [r7, #12]
 8026b9e:	f7ff fd7b 	bl	8026698 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8026ba2:	e00e      	b.n	8026bc2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8026ba4:	68fb      	ldr	r3, [r7, #12]
 8026ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026ba8:	f003 0310 	and.w	r3, r3, #16
 8026bac:	2b00      	cmp	r3, #0
 8026bae:	d003      	beq.n	8026bb8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8026bb0:	68f8      	ldr	r0, [r7, #12]
 8026bb2:	f7ff fd85 	bl	80266c0 <HAL_ADC_ErrorCallback>
}
 8026bb6:	e004      	b.n	8026bc2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8026bb8:	68fb      	ldr	r3, [r7, #12]
 8026bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8026bbe:	6878      	ldr	r0, [r7, #4]
 8026bc0:	4798      	blx	r3
}
 8026bc2:	bf00      	nop
 8026bc4:	3710      	adds	r7, #16
 8026bc6:	46bd      	mov	sp, r7
 8026bc8:	bd80      	pop	{r7, pc}

08026bca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8026bca:	b580      	push	{r7, lr}
 8026bcc:	b084      	sub	sp, #16
 8026bce:	af00      	add	r7, sp, #0
 8026bd0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8026bd2:	687b      	ldr	r3, [r7, #4]
 8026bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026bd6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8026bd8:	68f8      	ldr	r0, [r7, #12]
 8026bda:	f7ff fd67 	bl	80266ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8026bde:	bf00      	nop
 8026be0:	3710      	adds	r7, #16
 8026be2:	46bd      	mov	sp, r7
 8026be4:	bd80      	pop	{r7, pc}

08026be6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8026be6:	b580      	push	{r7, lr}
 8026be8:	b084      	sub	sp, #16
 8026bea:	af00      	add	r7, sp, #0
 8026bec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8026bee:	687b      	ldr	r3, [r7, #4]
 8026bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026bf2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8026bf4:	68fb      	ldr	r3, [r7, #12]
 8026bf6:	2240      	movs	r2, #64	; 0x40
 8026bf8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8026bfa:	68fb      	ldr	r3, [r7, #12]
 8026bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026bfe:	f043 0204 	orr.w	r2, r3, #4
 8026c02:	68fb      	ldr	r3, [r7, #12]
 8026c04:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8026c06:	68f8      	ldr	r0, [r7, #12]
 8026c08:	f7ff fd5a 	bl	80266c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8026c0c:	bf00      	nop
 8026c0e:	3710      	adds	r7, #16
 8026c10:	46bd      	mov	sp, r7
 8026c12:	bd80      	pop	{r7, pc}

08026c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8026c14:	b480      	push	{r7}
 8026c16:	b085      	sub	sp, #20
 8026c18:	af00      	add	r7, sp, #0
 8026c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8026c1c:	687b      	ldr	r3, [r7, #4]
 8026c1e:	f003 0307 	and.w	r3, r3, #7
 8026c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8026c24:	4b0c      	ldr	r3, [pc, #48]	; (8026c58 <__NVIC_SetPriorityGrouping+0x44>)
 8026c26:	68db      	ldr	r3, [r3, #12]
 8026c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8026c2a:	68ba      	ldr	r2, [r7, #8]
 8026c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8026c30:	4013      	ands	r3, r2
 8026c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8026c34:	68fb      	ldr	r3, [r7, #12]
 8026c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8026c38:	68bb      	ldr	r3, [r7, #8]
 8026c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8026c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8026c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8026c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8026c46:	4a04      	ldr	r2, [pc, #16]	; (8026c58 <__NVIC_SetPriorityGrouping+0x44>)
 8026c48:	68bb      	ldr	r3, [r7, #8]
 8026c4a:	60d3      	str	r3, [r2, #12]
}
 8026c4c:	bf00      	nop
 8026c4e:	3714      	adds	r7, #20
 8026c50:	46bd      	mov	sp, r7
 8026c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c56:	4770      	bx	lr
 8026c58:	e000ed00 	.word	0xe000ed00

08026c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8026c5c:	b480      	push	{r7}
 8026c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8026c60:	4b04      	ldr	r3, [pc, #16]	; (8026c74 <__NVIC_GetPriorityGrouping+0x18>)
 8026c62:	68db      	ldr	r3, [r3, #12]
 8026c64:	0a1b      	lsrs	r3, r3, #8
 8026c66:	f003 0307 	and.w	r3, r3, #7
}
 8026c6a:	4618      	mov	r0, r3
 8026c6c:	46bd      	mov	sp, r7
 8026c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c72:	4770      	bx	lr
 8026c74:	e000ed00 	.word	0xe000ed00

08026c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8026c78:	b480      	push	{r7}
 8026c7a:	b083      	sub	sp, #12
 8026c7c:	af00      	add	r7, sp, #0
 8026c7e:	4603      	mov	r3, r0
 8026c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8026c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026c86:	2b00      	cmp	r3, #0
 8026c88:	db0b      	blt.n	8026ca2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8026c8a:	79fb      	ldrb	r3, [r7, #7]
 8026c8c:	f003 021f 	and.w	r2, r3, #31
 8026c90:	4907      	ldr	r1, [pc, #28]	; (8026cb0 <__NVIC_EnableIRQ+0x38>)
 8026c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026c96:	095b      	lsrs	r3, r3, #5
 8026c98:	2001      	movs	r0, #1
 8026c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8026c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8026ca2:	bf00      	nop
 8026ca4:	370c      	adds	r7, #12
 8026ca6:	46bd      	mov	sp, r7
 8026ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026cac:	4770      	bx	lr
 8026cae:	bf00      	nop
 8026cb0:	e000e100 	.word	0xe000e100

08026cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8026cb4:	b480      	push	{r7}
 8026cb6:	b083      	sub	sp, #12
 8026cb8:	af00      	add	r7, sp, #0
 8026cba:	4603      	mov	r3, r0
 8026cbc:	6039      	str	r1, [r7, #0]
 8026cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8026cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026cc4:	2b00      	cmp	r3, #0
 8026cc6:	db0a      	blt.n	8026cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8026cc8:	683b      	ldr	r3, [r7, #0]
 8026cca:	b2da      	uxtb	r2, r3
 8026ccc:	490c      	ldr	r1, [pc, #48]	; (8026d00 <__NVIC_SetPriority+0x4c>)
 8026cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026cd2:	0112      	lsls	r2, r2, #4
 8026cd4:	b2d2      	uxtb	r2, r2
 8026cd6:	440b      	add	r3, r1
 8026cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8026cdc:	e00a      	b.n	8026cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8026cde:	683b      	ldr	r3, [r7, #0]
 8026ce0:	b2da      	uxtb	r2, r3
 8026ce2:	4908      	ldr	r1, [pc, #32]	; (8026d04 <__NVIC_SetPriority+0x50>)
 8026ce4:	79fb      	ldrb	r3, [r7, #7]
 8026ce6:	f003 030f 	and.w	r3, r3, #15
 8026cea:	3b04      	subs	r3, #4
 8026cec:	0112      	lsls	r2, r2, #4
 8026cee:	b2d2      	uxtb	r2, r2
 8026cf0:	440b      	add	r3, r1
 8026cf2:	761a      	strb	r2, [r3, #24]
}
 8026cf4:	bf00      	nop
 8026cf6:	370c      	adds	r7, #12
 8026cf8:	46bd      	mov	sp, r7
 8026cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026cfe:	4770      	bx	lr
 8026d00:	e000e100 	.word	0xe000e100
 8026d04:	e000ed00 	.word	0xe000ed00

08026d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8026d08:	b480      	push	{r7}
 8026d0a:	b089      	sub	sp, #36	; 0x24
 8026d0c:	af00      	add	r7, sp, #0
 8026d0e:	60f8      	str	r0, [r7, #12]
 8026d10:	60b9      	str	r1, [r7, #8]
 8026d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8026d14:	68fb      	ldr	r3, [r7, #12]
 8026d16:	f003 0307 	and.w	r3, r3, #7
 8026d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8026d1c:	69fb      	ldr	r3, [r7, #28]
 8026d1e:	f1c3 0307 	rsb	r3, r3, #7
 8026d22:	2b04      	cmp	r3, #4
 8026d24:	bf28      	it	cs
 8026d26:	2304      	movcs	r3, #4
 8026d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8026d2a:	69fb      	ldr	r3, [r7, #28]
 8026d2c:	3304      	adds	r3, #4
 8026d2e:	2b06      	cmp	r3, #6
 8026d30:	d902      	bls.n	8026d38 <NVIC_EncodePriority+0x30>
 8026d32:	69fb      	ldr	r3, [r7, #28]
 8026d34:	3b03      	subs	r3, #3
 8026d36:	e000      	b.n	8026d3a <NVIC_EncodePriority+0x32>
 8026d38:	2300      	movs	r3, #0
 8026d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8026d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8026d40:	69bb      	ldr	r3, [r7, #24]
 8026d42:	fa02 f303 	lsl.w	r3, r2, r3
 8026d46:	43da      	mvns	r2, r3
 8026d48:	68bb      	ldr	r3, [r7, #8]
 8026d4a:	401a      	ands	r2, r3
 8026d4c:	697b      	ldr	r3, [r7, #20]
 8026d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8026d50:	f04f 31ff 	mov.w	r1, #4294967295
 8026d54:	697b      	ldr	r3, [r7, #20]
 8026d56:	fa01 f303 	lsl.w	r3, r1, r3
 8026d5a:	43d9      	mvns	r1, r3
 8026d5c:	687b      	ldr	r3, [r7, #4]
 8026d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8026d60:	4313      	orrs	r3, r2
         );
}
 8026d62:	4618      	mov	r0, r3
 8026d64:	3724      	adds	r7, #36	; 0x24
 8026d66:	46bd      	mov	sp, r7
 8026d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d6c:	4770      	bx	lr
	...

08026d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8026d70:	b580      	push	{r7, lr}
 8026d72:	b082      	sub	sp, #8
 8026d74:	af00      	add	r7, sp, #0
 8026d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8026d78:	687b      	ldr	r3, [r7, #4]
 8026d7a:	3b01      	subs	r3, #1
 8026d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8026d80:	d301      	bcc.n	8026d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8026d82:	2301      	movs	r3, #1
 8026d84:	e00f      	b.n	8026da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8026d86:	4a0a      	ldr	r2, [pc, #40]	; (8026db0 <SysTick_Config+0x40>)
 8026d88:	687b      	ldr	r3, [r7, #4]
 8026d8a:	3b01      	subs	r3, #1
 8026d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8026d8e:	210f      	movs	r1, #15
 8026d90:	f04f 30ff 	mov.w	r0, #4294967295
 8026d94:	f7ff ff8e 	bl	8026cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8026d98:	4b05      	ldr	r3, [pc, #20]	; (8026db0 <SysTick_Config+0x40>)
 8026d9a:	2200      	movs	r2, #0
 8026d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8026d9e:	4b04      	ldr	r3, [pc, #16]	; (8026db0 <SysTick_Config+0x40>)
 8026da0:	2207      	movs	r2, #7
 8026da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8026da4:	2300      	movs	r3, #0
}
 8026da6:	4618      	mov	r0, r3
 8026da8:	3708      	adds	r7, #8
 8026daa:	46bd      	mov	sp, r7
 8026dac:	bd80      	pop	{r7, pc}
 8026dae:	bf00      	nop
 8026db0:	e000e010 	.word	0xe000e010

08026db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8026db4:	b580      	push	{r7, lr}
 8026db6:	b082      	sub	sp, #8
 8026db8:	af00      	add	r7, sp, #0
 8026dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8026dbc:	6878      	ldr	r0, [r7, #4]
 8026dbe:	f7ff ff29 	bl	8026c14 <__NVIC_SetPriorityGrouping>
}
 8026dc2:	bf00      	nop
 8026dc4:	3708      	adds	r7, #8
 8026dc6:	46bd      	mov	sp, r7
 8026dc8:	bd80      	pop	{r7, pc}

08026dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8026dca:	b580      	push	{r7, lr}
 8026dcc:	b086      	sub	sp, #24
 8026dce:	af00      	add	r7, sp, #0
 8026dd0:	4603      	mov	r3, r0
 8026dd2:	60b9      	str	r1, [r7, #8]
 8026dd4:	607a      	str	r2, [r7, #4]
 8026dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8026dd8:	2300      	movs	r3, #0
 8026dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8026ddc:	f7ff ff3e 	bl	8026c5c <__NVIC_GetPriorityGrouping>
 8026de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8026de2:	687a      	ldr	r2, [r7, #4]
 8026de4:	68b9      	ldr	r1, [r7, #8]
 8026de6:	6978      	ldr	r0, [r7, #20]
 8026de8:	f7ff ff8e 	bl	8026d08 <NVIC_EncodePriority>
 8026dec:	4602      	mov	r2, r0
 8026dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8026df2:	4611      	mov	r1, r2
 8026df4:	4618      	mov	r0, r3
 8026df6:	f7ff ff5d 	bl	8026cb4 <__NVIC_SetPriority>
}
 8026dfa:	bf00      	nop
 8026dfc:	3718      	adds	r7, #24
 8026dfe:	46bd      	mov	sp, r7
 8026e00:	bd80      	pop	{r7, pc}

08026e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8026e02:	b580      	push	{r7, lr}
 8026e04:	b082      	sub	sp, #8
 8026e06:	af00      	add	r7, sp, #0
 8026e08:	4603      	mov	r3, r0
 8026e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8026e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026e10:	4618      	mov	r0, r3
 8026e12:	f7ff ff31 	bl	8026c78 <__NVIC_EnableIRQ>
}
 8026e16:	bf00      	nop
 8026e18:	3708      	adds	r7, #8
 8026e1a:	46bd      	mov	sp, r7
 8026e1c:	bd80      	pop	{r7, pc}

08026e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8026e1e:	b580      	push	{r7, lr}
 8026e20:	b082      	sub	sp, #8
 8026e22:	af00      	add	r7, sp, #0
 8026e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8026e26:	6878      	ldr	r0, [r7, #4]
 8026e28:	f7ff ffa2 	bl	8026d70 <SysTick_Config>
 8026e2c:	4603      	mov	r3, r0
}
 8026e2e:	4618      	mov	r0, r3
 8026e30:	3708      	adds	r7, #8
 8026e32:	46bd      	mov	sp, r7
 8026e34:	bd80      	pop	{r7, pc}
	...

08026e38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8026e38:	b580      	push	{r7, lr}
 8026e3a:	b086      	sub	sp, #24
 8026e3c:	af00      	add	r7, sp, #0
 8026e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8026e40:	2300      	movs	r3, #0
 8026e42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8026e44:	f7ff fac4 	bl	80263d0 <HAL_GetTick>
 8026e48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8026e4a:	687b      	ldr	r3, [r7, #4]
 8026e4c:	2b00      	cmp	r3, #0
 8026e4e:	d101      	bne.n	8026e54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8026e50:	2301      	movs	r3, #1
 8026e52:	e099      	b.n	8026f88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8026e54:	687b      	ldr	r3, [r7, #4]
 8026e56:	2200      	movs	r2, #0
 8026e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8026e5c:	687b      	ldr	r3, [r7, #4]
 8026e5e:	2202      	movs	r2, #2
 8026e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8026e64:	687b      	ldr	r3, [r7, #4]
 8026e66:	681b      	ldr	r3, [r3, #0]
 8026e68:	681a      	ldr	r2, [r3, #0]
 8026e6a:	687b      	ldr	r3, [r7, #4]
 8026e6c:	681b      	ldr	r3, [r3, #0]
 8026e6e:	f022 0201 	bic.w	r2, r2, #1
 8026e72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8026e74:	e00f      	b.n	8026e96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8026e76:	f7ff faab 	bl	80263d0 <HAL_GetTick>
 8026e7a:	4602      	mov	r2, r0
 8026e7c:	693b      	ldr	r3, [r7, #16]
 8026e7e:	1ad3      	subs	r3, r2, r3
 8026e80:	2b05      	cmp	r3, #5
 8026e82:	d908      	bls.n	8026e96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8026e84:	687b      	ldr	r3, [r7, #4]
 8026e86:	2220      	movs	r2, #32
 8026e88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8026e8a:	687b      	ldr	r3, [r7, #4]
 8026e8c:	2203      	movs	r2, #3
 8026e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8026e92:	2303      	movs	r3, #3
 8026e94:	e078      	b.n	8026f88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8026e96:	687b      	ldr	r3, [r7, #4]
 8026e98:	681b      	ldr	r3, [r3, #0]
 8026e9a:	681b      	ldr	r3, [r3, #0]
 8026e9c:	f003 0301 	and.w	r3, r3, #1
 8026ea0:	2b00      	cmp	r3, #0
 8026ea2:	d1e8      	bne.n	8026e76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8026ea4:	687b      	ldr	r3, [r7, #4]
 8026ea6:	681b      	ldr	r3, [r3, #0]
 8026ea8:	681b      	ldr	r3, [r3, #0]
 8026eaa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8026eac:	697a      	ldr	r2, [r7, #20]
 8026eae:	4b38      	ldr	r3, [pc, #224]	; (8026f90 <HAL_DMA_Init+0x158>)
 8026eb0:	4013      	ands	r3, r2
 8026eb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8026eb4:	687b      	ldr	r3, [r7, #4]
 8026eb6:	685a      	ldr	r2, [r3, #4]
 8026eb8:	687b      	ldr	r3, [r7, #4]
 8026eba:	689b      	ldr	r3, [r3, #8]
 8026ebc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8026ebe:	687b      	ldr	r3, [r7, #4]
 8026ec0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8026ec2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8026ec4:	687b      	ldr	r3, [r7, #4]
 8026ec6:	691b      	ldr	r3, [r3, #16]
 8026ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8026eca:	687b      	ldr	r3, [r7, #4]
 8026ecc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8026ece:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8026ed0:	687b      	ldr	r3, [r7, #4]
 8026ed2:	699b      	ldr	r3, [r3, #24]
 8026ed4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8026ed6:	687b      	ldr	r3, [r7, #4]
 8026ed8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8026eda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8026edc:	687b      	ldr	r3, [r7, #4]
 8026ede:	6a1b      	ldr	r3, [r3, #32]
 8026ee0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8026ee2:	697a      	ldr	r2, [r7, #20]
 8026ee4:	4313      	orrs	r3, r2
 8026ee6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8026ee8:	687b      	ldr	r3, [r7, #4]
 8026eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026eec:	2b04      	cmp	r3, #4
 8026eee:	d107      	bne.n	8026f00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8026ef0:	687b      	ldr	r3, [r7, #4]
 8026ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026ef4:	687b      	ldr	r3, [r7, #4]
 8026ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026ef8:	4313      	orrs	r3, r2
 8026efa:	697a      	ldr	r2, [r7, #20]
 8026efc:	4313      	orrs	r3, r2
 8026efe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8026f00:	687b      	ldr	r3, [r7, #4]
 8026f02:	681b      	ldr	r3, [r3, #0]
 8026f04:	697a      	ldr	r2, [r7, #20]
 8026f06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8026f08:	687b      	ldr	r3, [r7, #4]
 8026f0a:	681b      	ldr	r3, [r3, #0]
 8026f0c:	695b      	ldr	r3, [r3, #20]
 8026f0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8026f10:	697b      	ldr	r3, [r7, #20]
 8026f12:	f023 0307 	bic.w	r3, r3, #7
 8026f16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8026f18:	687b      	ldr	r3, [r7, #4]
 8026f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026f1c:	697a      	ldr	r2, [r7, #20]
 8026f1e:	4313      	orrs	r3, r2
 8026f20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8026f22:	687b      	ldr	r3, [r7, #4]
 8026f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026f26:	2b04      	cmp	r3, #4
 8026f28:	d117      	bne.n	8026f5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8026f2a:	687b      	ldr	r3, [r7, #4]
 8026f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026f2e:	697a      	ldr	r2, [r7, #20]
 8026f30:	4313      	orrs	r3, r2
 8026f32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8026f34:	687b      	ldr	r3, [r7, #4]
 8026f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026f38:	2b00      	cmp	r3, #0
 8026f3a:	d00e      	beq.n	8026f5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8026f3c:	6878      	ldr	r0, [r7, #4]
 8026f3e:	f000 fa6f 	bl	8027420 <DMA_CheckFifoParam>
 8026f42:	4603      	mov	r3, r0
 8026f44:	2b00      	cmp	r3, #0
 8026f46:	d008      	beq.n	8026f5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8026f48:	687b      	ldr	r3, [r7, #4]
 8026f4a:	2240      	movs	r2, #64	; 0x40
 8026f4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8026f4e:	687b      	ldr	r3, [r7, #4]
 8026f50:	2201      	movs	r2, #1
 8026f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8026f56:	2301      	movs	r3, #1
 8026f58:	e016      	b.n	8026f88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8026f5a:	687b      	ldr	r3, [r7, #4]
 8026f5c:	681b      	ldr	r3, [r3, #0]
 8026f5e:	697a      	ldr	r2, [r7, #20]
 8026f60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8026f62:	6878      	ldr	r0, [r7, #4]
 8026f64:	f000 fa26 	bl	80273b4 <DMA_CalcBaseAndBitshift>
 8026f68:	4603      	mov	r3, r0
 8026f6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8026f6c:	687b      	ldr	r3, [r7, #4]
 8026f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026f70:	223f      	movs	r2, #63	; 0x3f
 8026f72:	409a      	lsls	r2, r3
 8026f74:	68fb      	ldr	r3, [r7, #12]
 8026f76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8026f78:	687b      	ldr	r3, [r7, #4]
 8026f7a:	2200      	movs	r2, #0
 8026f7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8026f7e:	687b      	ldr	r3, [r7, #4]
 8026f80:	2201      	movs	r2, #1
 8026f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8026f86:	2300      	movs	r3, #0
}
 8026f88:	4618      	mov	r0, r3
 8026f8a:	3718      	adds	r7, #24
 8026f8c:	46bd      	mov	sp, r7
 8026f8e:	bd80      	pop	{r7, pc}
 8026f90:	f010803f 	.word	0xf010803f

08026f94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8026f94:	b580      	push	{r7, lr}
 8026f96:	b086      	sub	sp, #24
 8026f98:	af00      	add	r7, sp, #0
 8026f9a:	60f8      	str	r0, [r7, #12]
 8026f9c:	60b9      	str	r1, [r7, #8]
 8026f9e:	607a      	str	r2, [r7, #4]
 8026fa0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8026fa2:	2300      	movs	r3, #0
 8026fa4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8026fa6:	68fb      	ldr	r3, [r7, #12]
 8026fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8026faa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8026fac:	68fb      	ldr	r3, [r7, #12]
 8026fae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8026fb2:	2b01      	cmp	r3, #1
 8026fb4:	d101      	bne.n	8026fba <HAL_DMA_Start_IT+0x26>
 8026fb6:	2302      	movs	r3, #2
 8026fb8:	e040      	b.n	802703c <HAL_DMA_Start_IT+0xa8>
 8026fba:	68fb      	ldr	r3, [r7, #12]
 8026fbc:	2201      	movs	r2, #1
 8026fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8026fc2:	68fb      	ldr	r3, [r7, #12]
 8026fc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8026fc8:	b2db      	uxtb	r3, r3
 8026fca:	2b01      	cmp	r3, #1
 8026fcc:	d12f      	bne.n	802702e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8026fce:	68fb      	ldr	r3, [r7, #12]
 8026fd0:	2202      	movs	r2, #2
 8026fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8026fd6:	68fb      	ldr	r3, [r7, #12]
 8026fd8:	2200      	movs	r2, #0
 8026fda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8026fdc:	683b      	ldr	r3, [r7, #0]
 8026fde:	687a      	ldr	r2, [r7, #4]
 8026fe0:	68b9      	ldr	r1, [r7, #8]
 8026fe2:	68f8      	ldr	r0, [r7, #12]
 8026fe4:	f000 f9b8 	bl	8027358 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8026fe8:	68fb      	ldr	r3, [r7, #12]
 8026fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026fec:	223f      	movs	r2, #63	; 0x3f
 8026fee:	409a      	lsls	r2, r3
 8026ff0:	693b      	ldr	r3, [r7, #16]
 8026ff2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8026ff4:	68fb      	ldr	r3, [r7, #12]
 8026ff6:	681b      	ldr	r3, [r3, #0]
 8026ff8:	681a      	ldr	r2, [r3, #0]
 8026ffa:	68fb      	ldr	r3, [r7, #12]
 8026ffc:	681b      	ldr	r3, [r3, #0]
 8026ffe:	f042 0216 	orr.w	r2, r2, #22
 8027002:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8027004:	68fb      	ldr	r3, [r7, #12]
 8027006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027008:	2b00      	cmp	r3, #0
 802700a:	d007      	beq.n	802701c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 802700c:	68fb      	ldr	r3, [r7, #12]
 802700e:	681b      	ldr	r3, [r3, #0]
 8027010:	681a      	ldr	r2, [r3, #0]
 8027012:	68fb      	ldr	r3, [r7, #12]
 8027014:	681b      	ldr	r3, [r3, #0]
 8027016:	f042 0208 	orr.w	r2, r2, #8
 802701a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 802701c:	68fb      	ldr	r3, [r7, #12]
 802701e:	681b      	ldr	r3, [r3, #0]
 8027020:	681a      	ldr	r2, [r3, #0]
 8027022:	68fb      	ldr	r3, [r7, #12]
 8027024:	681b      	ldr	r3, [r3, #0]
 8027026:	f042 0201 	orr.w	r2, r2, #1
 802702a:	601a      	str	r2, [r3, #0]
 802702c:	e005      	b.n	802703a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 802702e:	68fb      	ldr	r3, [r7, #12]
 8027030:	2200      	movs	r2, #0
 8027032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8027036:	2302      	movs	r3, #2
 8027038:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 802703a:	7dfb      	ldrb	r3, [r7, #23]
}
 802703c:	4618      	mov	r0, r3
 802703e:	3718      	adds	r7, #24
 8027040:	46bd      	mov	sp, r7
 8027042:	bd80      	pop	{r7, pc}

08027044 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8027044:	b580      	push	{r7, lr}
 8027046:	b086      	sub	sp, #24
 8027048:	af00      	add	r7, sp, #0
 802704a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 802704c:	2300      	movs	r3, #0
 802704e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8027050:	4b92      	ldr	r3, [pc, #584]	; (802729c <HAL_DMA_IRQHandler+0x258>)
 8027052:	681b      	ldr	r3, [r3, #0]
 8027054:	4a92      	ldr	r2, [pc, #584]	; (80272a0 <HAL_DMA_IRQHandler+0x25c>)
 8027056:	fba2 2303 	umull	r2, r3, r2, r3
 802705a:	0a9b      	lsrs	r3, r3, #10
 802705c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802705e:	687b      	ldr	r3, [r7, #4]
 8027060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8027062:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8027064:	693b      	ldr	r3, [r7, #16]
 8027066:	681b      	ldr	r3, [r3, #0]
 8027068:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 802706a:	687b      	ldr	r3, [r7, #4]
 802706c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802706e:	2208      	movs	r2, #8
 8027070:	409a      	lsls	r2, r3
 8027072:	68fb      	ldr	r3, [r7, #12]
 8027074:	4013      	ands	r3, r2
 8027076:	2b00      	cmp	r3, #0
 8027078:	d01a      	beq.n	80270b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 802707a:	687b      	ldr	r3, [r7, #4]
 802707c:	681b      	ldr	r3, [r3, #0]
 802707e:	681b      	ldr	r3, [r3, #0]
 8027080:	f003 0304 	and.w	r3, r3, #4
 8027084:	2b00      	cmp	r3, #0
 8027086:	d013      	beq.n	80270b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8027088:	687b      	ldr	r3, [r7, #4]
 802708a:	681b      	ldr	r3, [r3, #0]
 802708c:	681a      	ldr	r2, [r3, #0]
 802708e:	687b      	ldr	r3, [r7, #4]
 8027090:	681b      	ldr	r3, [r3, #0]
 8027092:	f022 0204 	bic.w	r2, r2, #4
 8027096:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8027098:	687b      	ldr	r3, [r7, #4]
 802709a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802709c:	2208      	movs	r2, #8
 802709e:	409a      	lsls	r2, r3
 80270a0:	693b      	ldr	r3, [r7, #16]
 80270a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80270a4:	687b      	ldr	r3, [r7, #4]
 80270a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80270a8:	f043 0201 	orr.w	r2, r3, #1
 80270ac:	687b      	ldr	r3, [r7, #4]
 80270ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80270b0:	687b      	ldr	r3, [r7, #4]
 80270b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80270b4:	2201      	movs	r2, #1
 80270b6:	409a      	lsls	r2, r3
 80270b8:	68fb      	ldr	r3, [r7, #12]
 80270ba:	4013      	ands	r3, r2
 80270bc:	2b00      	cmp	r3, #0
 80270be:	d012      	beq.n	80270e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80270c0:	687b      	ldr	r3, [r7, #4]
 80270c2:	681b      	ldr	r3, [r3, #0]
 80270c4:	695b      	ldr	r3, [r3, #20]
 80270c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80270ca:	2b00      	cmp	r3, #0
 80270cc:	d00b      	beq.n	80270e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80270ce:	687b      	ldr	r3, [r7, #4]
 80270d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80270d2:	2201      	movs	r2, #1
 80270d4:	409a      	lsls	r2, r3
 80270d6:	693b      	ldr	r3, [r7, #16]
 80270d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80270da:	687b      	ldr	r3, [r7, #4]
 80270dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80270de:	f043 0202 	orr.w	r2, r3, #2
 80270e2:	687b      	ldr	r3, [r7, #4]
 80270e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80270e6:	687b      	ldr	r3, [r7, #4]
 80270e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80270ea:	2204      	movs	r2, #4
 80270ec:	409a      	lsls	r2, r3
 80270ee:	68fb      	ldr	r3, [r7, #12]
 80270f0:	4013      	ands	r3, r2
 80270f2:	2b00      	cmp	r3, #0
 80270f4:	d012      	beq.n	802711c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80270f6:	687b      	ldr	r3, [r7, #4]
 80270f8:	681b      	ldr	r3, [r3, #0]
 80270fa:	681b      	ldr	r3, [r3, #0]
 80270fc:	f003 0302 	and.w	r3, r3, #2
 8027100:	2b00      	cmp	r3, #0
 8027102:	d00b      	beq.n	802711c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8027104:	687b      	ldr	r3, [r7, #4]
 8027106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027108:	2204      	movs	r2, #4
 802710a:	409a      	lsls	r2, r3
 802710c:	693b      	ldr	r3, [r7, #16]
 802710e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8027110:	687b      	ldr	r3, [r7, #4]
 8027112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027114:	f043 0204 	orr.w	r2, r3, #4
 8027118:	687b      	ldr	r3, [r7, #4]
 802711a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 802711c:	687b      	ldr	r3, [r7, #4]
 802711e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027120:	2210      	movs	r2, #16
 8027122:	409a      	lsls	r2, r3
 8027124:	68fb      	ldr	r3, [r7, #12]
 8027126:	4013      	ands	r3, r2
 8027128:	2b00      	cmp	r3, #0
 802712a:	d043      	beq.n	80271b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 802712c:	687b      	ldr	r3, [r7, #4]
 802712e:	681b      	ldr	r3, [r3, #0]
 8027130:	681b      	ldr	r3, [r3, #0]
 8027132:	f003 0308 	and.w	r3, r3, #8
 8027136:	2b00      	cmp	r3, #0
 8027138:	d03c      	beq.n	80271b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 802713a:	687b      	ldr	r3, [r7, #4]
 802713c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802713e:	2210      	movs	r2, #16
 8027140:	409a      	lsls	r2, r3
 8027142:	693b      	ldr	r3, [r7, #16]
 8027144:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8027146:	687b      	ldr	r3, [r7, #4]
 8027148:	681b      	ldr	r3, [r3, #0]
 802714a:	681b      	ldr	r3, [r3, #0]
 802714c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8027150:	2b00      	cmp	r3, #0
 8027152:	d018      	beq.n	8027186 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8027154:	687b      	ldr	r3, [r7, #4]
 8027156:	681b      	ldr	r3, [r3, #0]
 8027158:	681b      	ldr	r3, [r3, #0]
 802715a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802715e:	2b00      	cmp	r3, #0
 8027160:	d108      	bne.n	8027174 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8027162:	687b      	ldr	r3, [r7, #4]
 8027164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027166:	2b00      	cmp	r3, #0
 8027168:	d024      	beq.n	80271b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 802716a:	687b      	ldr	r3, [r7, #4]
 802716c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802716e:	6878      	ldr	r0, [r7, #4]
 8027170:	4798      	blx	r3
 8027172:	e01f      	b.n	80271b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8027174:	687b      	ldr	r3, [r7, #4]
 8027176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027178:	2b00      	cmp	r3, #0
 802717a:	d01b      	beq.n	80271b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 802717c:	687b      	ldr	r3, [r7, #4]
 802717e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027180:	6878      	ldr	r0, [r7, #4]
 8027182:	4798      	blx	r3
 8027184:	e016      	b.n	80271b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8027186:	687b      	ldr	r3, [r7, #4]
 8027188:	681b      	ldr	r3, [r3, #0]
 802718a:	681b      	ldr	r3, [r3, #0]
 802718c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027190:	2b00      	cmp	r3, #0
 8027192:	d107      	bne.n	80271a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8027194:	687b      	ldr	r3, [r7, #4]
 8027196:	681b      	ldr	r3, [r3, #0]
 8027198:	681a      	ldr	r2, [r3, #0]
 802719a:	687b      	ldr	r3, [r7, #4]
 802719c:	681b      	ldr	r3, [r3, #0]
 802719e:	f022 0208 	bic.w	r2, r2, #8
 80271a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80271a4:	687b      	ldr	r3, [r7, #4]
 80271a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80271a8:	2b00      	cmp	r3, #0
 80271aa:	d003      	beq.n	80271b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80271ac:	687b      	ldr	r3, [r7, #4]
 80271ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80271b0:	6878      	ldr	r0, [r7, #4]
 80271b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80271b4:	687b      	ldr	r3, [r7, #4]
 80271b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80271b8:	2220      	movs	r2, #32
 80271ba:	409a      	lsls	r2, r3
 80271bc:	68fb      	ldr	r3, [r7, #12]
 80271be:	4013      	ands	r3, r2
 80271c0:	2b00      	cmp	r3, #0
 80271c2:	f000 808e 	beq.w	80272e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80271c6:	687b      	ldr	r3, [r7, #4]
 80271c8:	681b      	ldr	r3, [r3, #0]
 80271ca:	681b      	ldr	r3, [r3, #0]
 80271cc:	f003 0310 	and.w	r3, r3, #16
 80271d0:	2b00      	cmp	r3, #0
 80271d2:	f000 8086 	beq.w	80272e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80271d6:	687b      	ldr	r3, [r7, #4]
 80271d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80271da:	2220      	movs	r2, #32
 80271dc:	409a      	lsls	r2, r3
 80271de:	693b      	ldr	r3, [r7, #16]
 80271e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80271e2:	687b      	ldr	r3, [r7, #4]
 80271e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80271e8:	b2db      	uxtb	r3, r3
 80271ea:	2b05      	cmp	r3, #5
 80271ec:	d136      	bne.n	802725c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80271ee:	687b      	ldr	r3, [r7, #4]
 80271f0:	681b      	ldr	r3, [r3, #0]
 80271f2:	681a      	ldr	r2, [r3, #0]
 80271f4:	687b      	ldr	r3, [r7, #4]
 80271f6:	681b      	ldr	r3, [r3, #0]
 80271f8:	f022 0216 	bic.w	r2, r2, #22
 80271fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80271fe:	687b      	ldr	r3, [r7, #4]
 8027200:	681b      	ldr	r3, [r3, #0]
 8027202:	695a      	ldr	r2, [r3, #20]
 8027204:	687b      	ldr	r3, [r7, #4]
 8027206:	681b      	ldr	r3, [r3, #0]
 8027208:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802720c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802720e:	687b      	ldr	r3, [r7, #4]
 8027210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027212:	2b00      	cmp	r3, #0
 8027214:	d103      	bne.n	802721e <HAL_DMA_IRQHandler+0x1da>
 8027216:	687b      	ldr	r3, [r7, #4]
 8027218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802721a:	2b00      	cmp	r3, #0
 802721c:	d007      	beq.n	802722e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 802721e:	687b      	ldr	r3, [r7, #4]
 8027220:	681b      	ldr	r3, [r3, #0]
 8027222:	681a      	ldr	r2, [r3, #0]
 8027224:	687b      	ldr	r3, [r7, #4]
 8027226:	681b      	ldr	r3, [r3, #0]
 8027228:	f022 0208 	bic.w	r2, r2, #8
 802722c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 802722e:	687b      	ldr	r3, [r7, #4]
 8027230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027232:	223f      	movs	r2, #63	; 0x3f
 8027234:	409a      	lsls	r2, r3
 8027236:	693b      	ldr	r3, [r7, #16]
 8027238:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802723a:	687b      	ldr	r3, [r7, #4]
 802723c:	2200      	movs	r2, #0
 802723e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8027242:	687b      	ldr	r3, [r7, #4]
 8027244:	2201      	movs	r2, #1
 8027246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 802724a:	687b      	ldr	r3, [r7, #4]
 802724c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802724e:	2b00      	cmp	r3, #0
 8027250:	d07d      	beq.n	802734e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8027252:	687b      	ldr	r3, [r7, #4]
 8027254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027256:	6878      	ldr	r0, [r7, #4]
 8027258:	4798      	blx	r3
        }
        return;
 802725a:	e078      	b.n	802734e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 802725c:	687b      	ldr	r3, [r7, #4]
 802725e:	681b      	ldr	r3, [r3, #0]
 8027260:	681b      	ldr	r3, [r3, #0]
 8027262:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8027266:	2b00      	cmp	r3, #0
 8027268:	d01c      	beq.n	80272a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 802726a:	687b      	ldr	r3, [r7, #4]
 802726c:	681b      	ldr	r3, [r3, #0]
 802726e:	681b      	ldr	r3, [r3, #0]
 8027270:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8027274:	2b00      	cmp	r3, #0
 8027276:	d108      	bne.n	802728a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8027278:	687b      	ldr	r3, [r7, #4]
 802727a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802727c:	2b00      	cmp	r3, #0
 802727e:	d030      	beq.n	80272e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8027280:	687b      	ldr	r3, [r7, #4]
 8027282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027284:	6878      	ldr	r0, [r7, #4]
 8027286:	4798      	blx	r3
 8027288:	e02b      	b.n	80272e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 802728a:	687b      	ldr	r3, [r7, #4]
 802728c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802728e:	2b00      	cmp	r3, #0
 8027290:	d027      	beq.n	80272e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8027292:	687b      	ldr	r3, [r7, #4]
 8027294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027296:	6878      	ldr	r0, [r7, #4]
 8027298:	4798      	blx	r3
 802729a:	e022      	b.n	80272e2 <HAL_DMA_IRQHandler+0x29e>
 802729c:	20000014 	.word	0x20000014
 80272a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80272a4:	687b      	ldr	r3, [r7, #4]
 80272a6:	681b      	ldr	r3, [r3, #0]
 80272a8:	681b      	ldr	r3, [r3, #0]
 80272aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80272ae:	2b00      	cmp	r3, #0
 80272b0:	d10f      	bne.n	80272d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80272b2:	687b      	ldr	r3, [r7, #4]
 80272b4:	681b      	ldr	r3, [r3, #0]
 80272b6:	681a      	ldr	r2, [r3, #0]
 80272b8:	687b      	ldr	r3, [r7, #4]
 80272ba:	681b      	ldr	r3, [r3, #0]
 80272bc:	f022 0210 	bic.w	r2, r2, #16
 80272c0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80272c2:	687b      	ldr	r3, [r7, #4]
 80272c4:	2200      	movs	r2, #0
 80272c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80272ca:	687b      	ldr	r3, [r7, #4]
 80272cc:	2201      	movs	r2, #1
 80272ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80272d2:	687b      	ldr	r3, [r7, #4]
 80272d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80272d6:	2b00      	cmp	r3, #0
 80272d8:	d003      	beq.n	80272e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80272da:	687b      	ldr	r3, [r7, #4]
 80272dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80272de:	6878      	ldr	r0, [r7, #4]
 80272e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80272e2:	687b      	ldr	r3, [r7, #4]
 80272e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80272e6:	2b00      	cmp	r3, #0
 80272e8:	d032      	beq.n	8027350 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80272ea:	687b      	ldr	r3, [r7, #4]
 80272ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80272ee:	f003 0301 	and.w	r3, r3, #1
 80272f2:	2b00      	cmp	r3, #0
 80272f4:	d022      	beq.n	802733c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80272f6:	687b      	ldr	r3, [r7, #4]
 80272f8:	2205      	movs	r2, #5
 80272fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80272fe:	687b      	ldr	r3, [r7, #4]
 8027300:	681b      	ldr	r3, [r3, #0]
 8027302:	681a      	ldr	r2, [r3, #0]
 8027304:	687b      	ldr	r3, [r7, #4]
 8027306:	681b      	ldr	r3, [r3, #0]
 8027308:	f022 0201 	bic.w	r2, r2, #1
 802730c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 802730e:	68bb      	ldr	r3, [r7, #8]
 8027310:	3301      	adds	r3, #1
 8027312:	60bb      	str	r3, [r7, #8]
 8027314:	697a      	ldr	r2, [r7, #20]
 8027316:	429a      	cmp	r2, r3
 8027318:	d307      	bcc.n	802732a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 802731a:	687b      	ldr	r3, [r7, #4]
 802731c:	681b      	ldr	r3, [r3, #0]
 802731e:	681b      	ldr	r3, [r3, #0]
 8027320:	f003 0301 	and.w	r3, r3, #1
 8027324:	2b00      	cmp	r3, #0
 8027326:	d1f2      	bne.n	802730e <HAL_DMA_IRQHandler+0x2ca>
 8027328:	e000      	b.n	802732c <HAL_DMA_IRQHandler+0x2e8>
          break;
 802732a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 802732c:	687b      	ldr	r3, [r7, #4]
 802732e:	2200      	movs	r2, #0
 8027330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8027334:	687b      	ldr	r3, [r7, #4]
 8027336:	2201      	movs	r2, #1
 8027338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 802733c:	687b      	ldr	r3, [r7, #4]
 802733e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8027340:	2b00      	cmp	r3, #0
 8027342:	d005      	beq.n	8027350 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8027344:	687b      	ldr	r3, [r7, #4]
 8027346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8027348:	6878      	ldr	r0, [r7, #4]
 802734a:	4798      	blx	r3
 802734c:	e000      	b.n	8027350 <HAL_DMA_IRQHandler+0x30c>
        return;
 802734e:	bf00      	nop
    }
  }
}
 8027350:	3718      	adds	r7, #24
 8027352:	46bd      	mov	sp, r7
 8027354:	bd80      	pop	{r7, pc}
 8027356:	bf00      	nop

08027358 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8027358:	b480      	push	{r7}
 802735a:	b085      	sub	sp, #20
 802735c:	af00      	add	r7, sp, #0
 802735e:	60f8      	str	r0, [r7, #12]
 8027360:	60b9      	str	r1, [r7, #8]
 8027362:	607a      	str	r2, [r7, #4]
 8027364:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8027366:	68fb      	ldr	r3, [r7, #12]
 8027368:	681b      	ldr	r3, [r3, #0]
 802736a:	681a      	ldr	r2, [r3, #0]
 802736c:	68fb      	ldr	r3, [r7, #12]
 802736e:	681b      	ldr	r3, [r3, #0]
 8027370:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8027374:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8027376:	68fb      	ldr	r3, [r7, #12]
 8027378:	681b      	ldr	r3, [r3, #0]
 802737a:	683a      	ldr	r2, [r7, #0]
 802737c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 802737e:	68fb      	ldr	r3, [r7, #12]
 8027380:	689b      	ldr	r3, [r3, #8]
 8027382:	2b40      	cmp	r3, #64	; 0x40
 8027384:	d108      	bne.n	8027398 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8027386:	68fb      	ldr	r3, [r7, #12]
 8027388:	681b      	ldr	r3, [r3, #0]
 802738a:	687a      	ldr	r2, [r7, #4]
 802738c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 802738e:	68fb      	ldr	r3, [r7, #12]
 8027390:	681b      	ldr	r3, [r3, #0]
 8027392:	68ba      	ldr	r2, [r7, #8]
 8027394:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8027396:	e007      	b.n	80273a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8027398:	68fb      	ldr	r3, [r7, #12]
 802739a:	681b      	ldr	r3, [r3, #0]
 802739c:	68ba      	ldr	r2, [r7, #8]
 802739e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80273a0:	68fb      	ldr	r3, [r7, #12]
 80273a2:	681b      	ldr	r3, [r3, #0]
 80273a4:	687a      	ldr	r2, [r7, #4]
 80273a6:	60da      	str	r2, [r3, #12]
}
 80273a8:	bf00      	nop
 80273aa:	3714      	adds	r7, #20
 80273ac:	46bd      	mov	sp, r7
 80273ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80273b2:	4770      	bx	lr

080273b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80273b4:	b480      	push	{r7}
 80273b6:	b085      	sub	sp, #20
 80273b8:	af00      	add	r7, sp, #0
 80273ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80273bc:	687b      	ldr	r3, [r7, #4]
 80273be:	681b      	ldr	r3, [r3, #0]
 80273c0:	b2db      	uxtb	r3, r3
 80273c2:	3b10      	subs	r3, #16
 80273c4:	4a14      	ldr	r2, [pc, #80]	; (8027418 <DMA_CalcBaseAndBitshift+0x64>)
 80273c6:	fba2 2303 	umull	r2, r3, r2, r3
 80273ca:	091b      	lsrs	r3, r3, #4
 80273cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80273ce:	4a13      	ldr	r2, [pc, #76]	; (802741c <DMA_CalcBaseAndBitshift+0x68>)
 80273d0:	68fb      	ldr	r3, [r7, #12]
 80273d2:	4413      	add	r3, r2
 80273d4:	781b      	ldrb	r3, [r3, #0]
 80273d6:	461a      	mov	r2, r3
 80273d8:	687b      	ldr	r3, [r7, #4]
 80273da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80273dc:	68fb      	ldr	r3, [r7, #12]
 80273de:	2b03      	cmp	r3, #3
 80273e0:	d909      	bls.n	80273f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80273e2:	687b      	ldr	r3, [r7, #4]
 80273e4:	681b      	ldr	r3, [r3, #0]
 80273e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80273ea:	f023 0303 	bic.w	r3, r3, #3
 80273ee:	1d1a      	adds	r2, r3, #4
 80273f0:	687b      	ldr	r3, [r7, #4]
 80273f2:	659a      	str	r2, [r3, #88]	; 0x58
 80273f4:	e007      	b.n	8027406 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80273f6:	687b      	ldr	r3, [r7, #4]
 80273f8:	681b      	ldr	r3, [r3, #0]
 80273fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80273fe:	f023 0303 	bic.w	r3, r3, #3
 8027402:	687a      	ldr	r2, [r7, #4]
 8027404:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8027406:	687b      	ldr	r3, [r7, #4]
 8027408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 802740a:	4618      	mov	r0, r3
 802740c:	3714      	adds	r7, #20
 802740e:	46bd      	mov	sp, r7
 8027410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027414:	4770      	bx	lr
 8027416:	bf00      	nop
 8027418:	aaaaaaab 	.word	0xaaaaaaab
 802741c:	0802a4c4 	.word	0x0802a4c4

08027420 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8027420:	b480      	push	{r7}
 8027422:	b085      	sub	sp, #20
 8027424:	af00      	add	r7, sp, #0
 8027426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8027428:	2300      	movs	r3, #0
 802742a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 802742c:	687b      	ldr	r3, [r7, #4]
 802742e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027430:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8027432:	687b      	ldr	r3, [r7, #4]
 8027434:	699b      	ldr	r3, [r3, #24]
 8027436:	2b00      	cmp	r3, #0
 8027438:	d11f      	bne.n	802747a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 802743a:	68bb      	ldr	r3, [r7, #8]
 802743c:	2b03      	cmp	r3, #3
 802743e:	d855      	bhi.n	80274ec <DMA_CheckFifoParam+0xcc>
 8027440:	a201      	add	r2, pc, #4	; (adr r2, 8027448 <DMA_CheckFifoParam+0x28>)
 8027442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027446:	bf00      	nop
 8027448:	08027459 	.word	0x08027459
 802744c:	0802746b 	.word	0x0802746b
 8027450:	08027459 	.word	0x08027459
 8027454:	080274ed 	.word	0x080274ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8027458:	687b      	ldr	r3, [r7, #4]
 802745a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802745c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8027460:	2b00      	cmp	r3, #0
 8027462:	d045      	beq.n	80274f0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8027464:	2301      	movs	r3, #1
 8027466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8027468:	e042      	b.n	80274f0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 802746a:	687b      	ldr	r3, [r7, #4]
 802746c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802746e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8027472:	d13f      	bne.n	80274f4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8027474:	2301      	movs	r3, #1
 8027476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8027478:	e03c      	b.n	80274f4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 802747a:	687b      	ldr	r3, [r7, #4]
 802747c:	699b      	ldr	r3, [r3, #24]
 802747e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8027482:	d121      	bne.n	80274c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8027484:	68bb      	ldr	r3, [r7, #8]
 8027486:	2b03      	cmp	r3, #3
 8027488:	d836      	bhi.n	80274f8 <DMA_CheckFifoParam+0xd8>
 802748a:	a201      	add	r2, pc, #4	; (adr r2, 8027490 <DMA_CheckFifoParam+0x70>)
 802748c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027490:	080274a1 	.word	0x080274a1
 8027494:	080274a7 	.word	0x080274a7
 8027498:	080274a1 	.word	0x080274a1
 802749c:	080274b9 	.word	0x080274b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80274a0:	2301      	movs	r3, #1
 80274a2:	73fb      	strb	r3, [r7, #15]
      break;
 80274a4:	e02f      	b.n	8027506 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80274a6:	687b      	ldr	r3, [r7, #4]
 80274a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80274aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80274ae:	2b00      	cmp	r3, #0
 80274b0:	d024      	beq.n	80274fc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80274b2:	2301      	movs	r3, #1
 80274b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80274b6:	e021      	b.n	80274fc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80274b8:	687b      	ldr	r3, [r7, #4]
 80274ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80274bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80274c0:	d11e      	bne.n	8027500 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80274c2:	2301      	movs	r3, #1
 80274c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80274c6:	e01b      	b.n	8027500 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80274c8:	68bb      	ldr	r3, [r7, #8]
 80274ca:	2b02      	cmp	r3, #2
 80274cc:	d902      	bls.n	80274d4 <DMA_CheckFifoParam+0xb4>
 80274ce:	2b03      	cmp	r3, #3
 80274d0:	d003      	beq.n	80274da <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80274d2:	e018      	b.n	8027506 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80274d4:	2301      	movs	r3, #1
 80274d6:	73fb      	strb	r3, [r7, #15]
      break;
 80274d8:	e015      	b.n	8027506 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80274da:	687b      	ldr	r3, [r7, #4]
 80274dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80274de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80274e2:	2b00      	cmp	r3, #0
 80274e4:	d00e      	beq.n	8027504 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80274e6:	2301      	movs	r3, #1
 80274e8:	73fb      	strb	r3, [r7, #15]
      break;
 80274ea:	e00b      	b.n	8027504 <DMA_CheckFifoParam+0xe4>
      break;
 80274ec:	bf00      	nop
 80274ee:	e00a      	b.n	8027506 <DMA_CheckFifoParam+0xe6>
      break;
 80274f0:	bf00      	nop
 80274f2:	e008      	b.n	8027506 <DMA_CheckFifoParam+0xe6>
      break;
 80274f4:	bf00      	nop
 80274f6:	e006      	b.n	8027506 <DMA_CheckFifoParam+0xe6>
      break;
 80274f8:	bf00      	nop
 80274fa:	e004      	b.n	8027506 <DMA_CheckFifoParam+0xe6>
      break;
 80274fc:	bf00      	nop
 80274fe:	e002      	b.n	8027506 <DMA_CheckFifoParam+0xe6>
      break;   
 8027500:	bf00      	nop
 8027502:	e000      	b.n	8027506 <DMA_CheckFifoParam+0xe6>
      break;
 8027504:	bf00      	nop
    }
  } 
  
  return status; 
 8027506:	7bfb      	ldrb	r3, [r7, #15]
}
 8027508:	4618      	mov	r0, r3
 802750a:	3714      	adds	r7, #20
 802750c:	46bd      	mov	sp, r7
 802750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027512:	4770      	bx	lr

08027514 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8027514:	b580      	push	{r7, lr}
 8027516:	b086      	sub	sp, #24
 8027518:	af00      	add	r7, sp, #0
 802751a:	60f8      	str	r0, [r7, #12]
 802751c:	60b9      	str	r1, [r7, #8]
 802751e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8027522:	2301      	movs	r3, #1
 8027524:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8027526:	4b23      	ldr	r3, [pc, #140]	; (80275b4 <HAL_FLASH_Program+0xa0>)
 8027528:	7e1b      	ldrb	r3, [r3, #24]
 802752a:	2b01      	cmp	r3, #1
 802752c:	d101      	bne.n	8027532 <HAL_FLASH_Program+0x1e>
 802752e:	2302      	movs	r3, #2
 8027530:	e03b      	b.n	80275aa <HAL_FLASH_Program+0x96>
 8027532:	4b20      	ldr	r3, [pc, #128]	; (80275b4 <HAL_FLASH_Program+0xa0>)
 8027534:	2201      	movs	r2, #1
 8027536:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027538:	f24c 3050 	movw	r0, #50000	; 0xc350
 802753c:	f000 f870 	bl	8027620 <FLASH_WaitForLastOperation>
 8027540:	4603      	mov	r3, r0
 8027542:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8027544:	7dfb      	ldrb	r3, [r7, #23]
 8027546:	2b00      	cmp	r3, #0
 8027548:	d12b      	bne.n	80275a2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 802754a:	68fb      	ldr	r3, [r7, #12]
 802754c:	2b00      	cmp	r3, #0
 802754e:	d105      	bne.n	802755c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8027550:	783b      	ldrb	r3, [r7, #0]
 8027552:	4619      	mov	r1, r3
 8027554:	68b8      	ldr	r0, [r7, #8]
 8027556:	f000 f919 	bl	802778c <FLASH_Program_Byte>
 802755a:	e016      	b.n	802758a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 802755c:	68fb      	ldr	r3, [r7, #12]
 802755e:	2b01      	cmp	r3, #1
 8027560:	d105      	bne.n	802756e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8027562:	883b      	ldrh	r3, [r7, #0]
 8027564:	4619      	mov	r1, r3
 8027566:	68b8      	ldr	r0, [r7, #8]
 8027568:	f000 f8ec 	bl	8027744 <FLASH_Program_HalfWord>
 802756c:	e00d      	b.n	802758a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 802756e:	68fb      	ldr	r3, [r7, #12]
 8027570:	2b02      	cmp	r3, #2
 8027572:	d105      	bne.n	8027580 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8027574:	683b      	ldr	r3, [r7, #0]
 8027576:	4619      	mov	r1, r3
 8027578:	68b8      	ldr	r0, [r7, #8]
 802757a:	f000 f8c1 	bl	8027700 <FLASH_Program_Word>
 802757e:	e004      	b.n	802758a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8027580:	e9d7 2300 	ldrd	r2, r3, [r7]
 8027584:	68b8      	ldr	r0, [r7, #8]
 8027586:	f000 f88b 	bl	80276a0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802758a:	f24c 3050 	movw	r0, #50000	; 0xc350
 802758e:	f000 f847 	bl	8027620 <FLASH_WaitForLastOperation>
 8027592:	4603      	mov	r3, r0
 8027594:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8027596:	4b08      	ldr	r3, [pc, #32]	; (80275b8 <HAL_FLASH_Program+0xa4>)
 8027598:	691b      	ldr	r3, [r3, #16]
 802759a:	4a07      	ldr	r2, [pc, #28]	; (80275b8 <HAL_FLASH_Program+0xa4>)
 802759c:	f023 0301 	bic.w	r3, r3, #1
 80275a0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80275a2:	4b04      	ldr	r3, [pc, #16]	; (80275b4 <HAL_FLASH_Program+0xa0>)
 80275a4:	2200      	movs	r2, #0
 80275a6:	761a      	strb	r2, [r3, #24]
  
  return status;
 80275a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80275aa:	4618      	mov	r0, r3
 80275ac:	3718      	adds	r7, #24
 80275ae:	46bd      	mov	sp, r7
 80275b0:	bd80      	pop	{r7, pc}
 80275b2:	bf00      	nop
 80275b4:	20000a1c 	.word	0x20000a1c
 80275b8:	40023c00 	.word	0x40023c00

080275bc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80275bc:	b480      	push	{r7}
 80275be:	b083      	sub	sp, #12
 80275c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80275c2:	2300      	movs	r3, #0
 80275c4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80275c6:	4b0b      	ldr	r3, [pc, #44]	; (80275f4 <HAL_FLASH_Unlock+0x38>)
 80275c8:	691b      	ldr	r3, [r3, #16]
 80275ca:	2b00      	cmp	r3, #0
 80275cc:	da0b      	bge.n	80275e6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80275ce:	4b09      	ldr	r3, [pc, #36]	; (80275f4 <HAL_FLASH_Unlock+0x38>)
 80275d0:	4a09      	ldr	r2, [pc, #36]	; (80275f8 <HAL_FLASH_Unlock+0x3c>)
 80275d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80275d4:	4b07      	ldr	r3, [pc, #28]	; (80275f4 <HAL_FLASH_Unlock+0x38>)
 80275d6:	4a09      	ldr	r2, [pc, #36]	; (80275fc <HAL_FLASH_Unlock+0x40>)
 80275d8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80275da:	4b06      	ldr	r3, [pc, #24]	; (80275f4 <HAL_FLASH_Unlock+0x38>)
 80275dc:	691b      	ldr	r3, [r3, #16]
 80275de:	2b00      	cmp	r3, #0
 80275e0:	da01      	bge.n	80275e6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80275e2:	2301      	movs	r3, #1
 80275e4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80275e6:	79fb      	ldrb	r3, [r7, #7]
}
 80275e8:	4618      	mov	r0, r3
 80275ea:	370c      	adds	r7, #12
 80275ec:	46bd      	mov	sp, r7
 80275ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80275f2:	4770      	bx	lr
 80275f4:	40023c00 	.word	0x40023c00
 80275f8:	45670123 	.word	0x45670123
 80275fc:	cdef89ab 	.word	0xcdef89ab

08027600 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8027600:	b480      	push	{r7}
 8027602:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8027604:	4b05      	ldr	r3, [pc, #20]	; (802761c <HAL_FLASH_Lock+0x1c>)
 8027606:	691b      	ldr	r3, [r3, #16]
 8027608:	4a04      	ldr	r2, [pc, #16]	; (802761c <HAL_FLASH_Lock+0x1c>)
 802760a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802760e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8027610:	2300      	movs	r3, #0
}
 8027612:	4618      	mov	r0, r3
 8027614:	46bd      	mov	sp, r7
 8027616:	f85d 7b04 	ldr.w	r7, [sp], #4
 802761a:	4770      	bx	lr
 802761c:	40023c00 	.word	0x40023c00

08027620 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8027620:	b580      	push	{r7, lr}
 8027622:	b084      	sub	sp, #16
 8027624:	af00      	add	r7, sp, #0
 8027626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8027628:	2300      	movs	r3, #0
 802762a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 802762c:	4b1a      	ldr	r3, [pc, #104]	; (8027698 <FLASH_WaitForLastOperation+0x78>)
 802762e:	2200      	movs	r2, #0
 8027630:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8027632:	f7fe fecd 	bl	80263d0 <HAL_GetTick>
 8027636:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8027638:	e010      	b.n	802765c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 802763a:	687b      	ldr	r3, [r7, #4]
 802763c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027640:	d00c      	beq.n	802765c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8027642:	687b      	ldr	r3, [r7, #4]
 8027644:	2b00      	cmp	r3, #0
 8027646:	d007      	beq.n	8027658 <FLASH_WaitForLastOperation+0x38>
 8027648:	f7fe fec2 	bl	80263d0 <HAL_GetTick>
 802764c:	4602      	mov	r2, r0
 802764e:	68fb      	ldr	r3, [r7, #12]
 8027650:	1ad3      	subs	r3, r2, r3
 8027652:	687a      	ldr	r2, [r7, #4]
 8027654:	429a      	cmp	r2, r3
 8027656:	d201      	bcs.n	802765c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8027658:	2303      	movs	r3, #3
 802765a:	e019      	b.n	8027690 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 802765c:	4b0f      	ldr	r3, [pc, #60]	; (802769c <FLASH_WaitForLastOperation+0x7c>)
 802765e:	68db      	ldr	r3, [r3, #12]
 8027660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8027664:	2b00      	cmp	r3, #0
 8027666:	d1e8      	bne.n	802763a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8027668:	4b0c      	ldr	r3, [pc, #48]	; (802769c <FLASH_WaitForLastOperation+0x7c>)
 802766a:	68db      	ldr	r3, [r3, #12]
 802766c:	f003 0301 	and.w	r3, r3, #1
 8027670:	2b00      	cmp	r3, #0
 8027672:	d002      	beq.n	802767a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8027674:	4b09      	ldr	r3, [pc, #36]	; (802769c <FLASH_WaitForLastOperation+0x7c>)
 8027676:	2201      	movs	r2, #1
 8027678:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 802767a:	4b08      	ldr	r3, [pc, #32]	; (802769c <FLASH_WaitForLastOperation+0x7c>)
 802767c:	68db      	ldr	r3, [r3, #12]
 802767e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8027682:	2b00      	cmp	r3, #0
 8027684:	d003      	beq.n	802768e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8027686:	f000 f8a3 	bl	80277d0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 802768a:	2301      	movs	r3, #1
 802768c:	e000      	b.n	8027690 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 802768e:	2300      	movs	r3, #0
  
}  
 8027690:	4618      	mov	r0, r3
 8027692:	3710      	adds	r7, #16
 8027694:	46bd      	mov	sp, r7
 8027696:	bd80      	pop	{r7, pc}
 8027698:	20000a1c 	.word	0x20000a1c
 802769c:	40023c00 	.word	0x40023c00

080276a0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80276a0:	b490      	push	{r4, r7}
 80276a2:	b084      	sub	sp, #16
 80276a4:	af00      	add	r7, sp, #0
 80276a6:	60f8      	str	r0, [r7, #12]
 80276a8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80276ac:	4b13      	ldr	r3, [pc, #76]	; (80276fc <FLASH_Program_DoubleWord+0x5c>)
 80276ae:	691b      	ldr	r3, [r3, #16]
 80276b0:	4a12      	ldr	r2, [pc, #72]	; (80276fc <FLASH_Program_DoubleWord+0x5c>)
 80276b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80276b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80276b8:	4b10      	ldr	r3, [pc, #64]	; (80276fc <FLASH_Program_DoubleWord+0x5c>)
 80276ba:	691b      	ldr	r3, [r3, #16]
 80276bc:	4a0f      	ldr	r2, [pc, #60]	; (80276fc <FLASH_Program_DoubleWord+0x5c>)
 80276be:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80276c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80276c4:	4b0d      	ldr	r3, [pc, #52]	; (80276fc <FLASH_Program_DoubleWord+0x5c>)
 80276c6:	691b      	ldr	r3, [r3, #16]
 80276c8:	4a0c      	ldr	r2, [pc, #48]	; (80276fc <FLASH_Program_DoubleWord+0x5c>)
 80276ca:	f043 0301 	orr.w	r3, r3, #1
 80276ce:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80276d0:	68fb      	ldr	r3, [r7, #12]
 80276d2:	683a      	ldr	r2, [r7, #0]
 80276d4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80276d6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80276da:	e9d7 1200 	ldrd	r1, r2, [r7]
 80276de:	f04f 0300 	mov.w	r3, #0
 80276e2:	f04f 0400 	mov.w	r4, #0
 80276e6:	0013      	movs	r3, r2
 80276e8:	2400      	movs	r4, #0
 80276ea:	68fa      	ldr	r2, [r7, #12]
 80276ec:	3204      	adds	r2, #4
 80276ee:	6013      	str	r3, [r2, #0]
}
 80276f0:	bf00      	nop
 80276f2:	3710      	adds	r7, #16
 80276f4:	46bd      	mov	sp, r7
 80276f6:	bc90      	pop	{r4, r7}
 80276f8:	4770      	bx	lr
 80276fa:	bf00      	nop
 80276fc:	40023c00 	.word	0x40023c00

08027700 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8027700:	b480      	push	{r7}
 8027702:	b083      	sub	sp, #12
 8027704:	af00      	add	r7, sp, #0
 8027706:	6078      	str	r0, [r7, #4]
 8027708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802770a:	4b0d      	ldr	r3, [pc, #52]	; (8027740 <FLASH_Program_Word+0x40>)
 802770c:	691b      	ldr	r3, [r3, #16]
 802770e:	4a0c      	ldr	r2, [pc, #48]	; (8027740 <FLASH_Program_Word+0x40>)
 8027710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027714:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8027716:	4b0a      	ldr	r3, [pc, #40]	; (8027740 <FLASH_Program_Word+0x40>)
 8027718:	691b      	ldr	r3, [r3, #16]
 802771a:	4a09      	ldr	r2, [pc, #36]	; (8027740 <FLASH_Program_Word+0x40>)
 802771c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8027720:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027722:	4b07      	ldr	r3, [pc, #28]	; (8027740 <FLASH_Program_Word+0x40>)
 8027724:	691b      	ldr	r3, [r3, #16]
 8027726:	4a06      	ldr	r2, [pc, #24]	; (8027740 <FLASH_Program_Word+0x40>)
 8027728:	f043 0301 	orr.w	r3, r3, #1
 802772c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 802772e:	687b      	ldr	r3, [r7, #4]
 8027730:	683a      	ldr	r2, [r7, #0]
 8027732:	601a      	str	r2, [r3, #0]
}
 8027734:	bf00      	nop
 8027736:	370c      	adds	r7, #12
 8027738:	46bd      	mov	sp, r7
 802773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802773e:	4770      	bx	lr
 8027740:	40023c00 	.word	0x40023c00

08027744 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8027744:	b480      	push	{r7}
 8027746:	b083      	sub	sp, #12
 8027748:	af00      	add	r7, sp, #0
 802774a:	6078      	str	r0, [r7, #4]
 802774c:	460b      	mov	r3, r1
 802774e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027750:	4b0d      	ldr	r3, [pc, #52]	; (8027788 <FLASH_Program_HalfWord+0x44>)
 8027752:	691b      	ldr	r3, [r3, #16]
 8027754:	4a0c      	ldr	r2, [pc, #48]	; (8027788 <FLASH_Program_HalfWord+0x44>)
 8027756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802775a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 802775c:	4b0a      	ldr	r3, [pc, #40]	; (8027788 <FLASH_Program_HalfWord+0x44>)
 802775e:	691b      	ldr	r3, [r3, #16]
 8027760:	4a09      	ldr	r2, [pc, #36]	; (8027788 <FLASH_Program_HalfWord+0x44>)
 8027762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027766:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027768:	4b07      	ldr	r3, [pc, #28]	; (8027788 <FLASH_Program_HalfWord+0x44>)
 802776a:	691b      	ldr	r3, [r3, #16]
 802776c:	4a06      	ldr	r2, [pc, #24]	; (8027788 <FLASH_Program_HalfWord+0x44>)
 802776e:	f043 0301 	orr.w	r3, r3, #1
 8027772:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8027774:	687b      	ldr	r3, [r7, #4]
 8027776:	887a      	ldrh	r2, [r7, #2]
 8027778:	801a      	strh	r2, [r3, #0]
}
 802777a:	bf00      	nop
 802777c:	370c      	adds	r7, #12
 802777e:	46bd      	mov	sp, r7
 8027780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027784:	4770      	bx	lr
 8027786:	bf00      	nop
 8027788:	40023c00 	.word	0x40023c00

0802778c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 802778c:	b480      	push	{r7}
 802778e:	b083      	sub	sp, #12
 8027790:	af00      	add	r7, sp, #0
 8027792:	6078      	str	r0, [r7, #4]
 8027794:	460b      	mov	r3, r1
 8027796:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027798:	4b0c      	ldr	r3, [pc, #48]	; (80277cc <FLASH_Program_Byte+0x40>)
 802779a:	691b      	ldr	r3, [r3, #16]
 802779c:	4a0b      	ldr	r2, [pc, #44]	; (80277cc <FLASH_Program_Byte+0x40>)
 802779e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80277a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80277a4:	4b09      	ldr	r3, [pc, #36]	; (80277cc <FLASH_Program_Byte+0x40>)
 80277a6:	4a09      	ldr	r2, [pc, #36]	; (80277cc <FLASH_Program_Byte+0x40>)
 80277a8:	691b      	ldr	r3, [r3, #16]
 80277aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80277ac:	4b07      	ldr	r3, [pc, #28]	; (80277cc <FLASH_Program_Byte+0x40>)
 80277ae:	691b      	ldr	r3, [r3, #16]
 80277b0:	4a06      	ldr	r2, [pc, #24]	; (80277cc <FLASH_Program_Byte+0x40>)
 80277b2:	f043 0301 	orr.w	r3, r3, #1
 80277b6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80277b8:	687b      	ldr	r3, [r7, #4]
 80277ba:	78fa      	ldrb	r2, [r7, #3]
 80277bc:	701a      	strb	r2, [r3, #0]
}
 80277be:	bf00      	nop
 80277c0:	370c      	adds	r7, #12
 80277c2:	46bd      	mov	sp, r7
 80277c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277c8:	4770      	bx	lr
 80277ca:	bf00      	nop
 80277cc:	40023c00 	.word	0x40023c00

080277d0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80277d0:	b480      	push	{r7}
 80277d2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80277d4:	4b27      	ldr	r3, [pc, #156]	; (8027874 <FLASH_SetErrorCode+0xa4>)
 80277d6:	68db      	ldr	r3, [r3, #12]
 80277d8:	f003 0310 	and.w	r3, r3, #16
 80277dc:	2b00      	cmp	r3, #0
 80277de:	d008      	beq.n	80277f2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80277e0:	4b25      	ldr	r3, [pc, #148]	; (8027878 <FLASH_SetErrorCode+0xa8>)
 80277e2:	69db      	ldr	r3, [r3, #28]
 80277e4:	f043 0310 	orr.w	r3, r3, #16
 80277e8:	4a23      	ldr	r2, [pc, #140]	; (8027878 <FLASH_SetErrorCode+0xa8>)
 80277ea:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80277ec:	4b21      	ldr	r3, [pc, #132]	; (8027874 <FLASH_SetErrorCode+0xa4>)
 80277ee:	2210      	movs	r2, #16
 80277f0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80277f2:	4b20      	ldr	r3, [pc, #128]	; (8027874 <FLASH_SetErrorCode+0xa4>)
 80277f4:	68db      	ldr	r3, [r3, #12]
 80277f6:	f003 0320 	and.w	r3, r3, #32
 80277fa:	2b00      	cmp	r3, #0
 80277fc:	d008      	beq.n	8027810 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80277fe:	4b1e      	ldr	r3, [pc, #120]	; (8027878 <FLASH_SetErrorCode+0xa8>)
 8027800:	69db      	ldr	r3, [r3, #28]
 8027802:	f043 0308 	orr.w	r3, r3, #8
 8027806:	4a1c      	ldr	r2, [pc, #112]	; (8027878 <FLASH_SetErrorCode+0xa8>)
 8027808:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 802780a:	4b1a      	ldr	r3, [pc, #104]	; (8027874 <FLASH_SetErrorCode+0xa4>)
 802780c:	2220      	movs	r2, #32
 802780e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8027810:	4b18      	ldr	r3, [pc, #96]	; (8027874 <FLASH_SetErrorCode+0xa4>)
 8027812:	68db      	ldr	r3, [r3, #12]
 8027814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027818:	2b00      	cmp	r3, #0
 802781a:	d008      	beq.n	802782e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 802781c:	4b16      	ldr	r3, [pc, #88]	; (8027878 <FLASH_SetErrorCode+0xa8>)
 802781e:	69db      	ldr	r3, [r3, #28]
 8027820:	f043 0304 	orr.w	r3, r3, #4
 8027824:	4a14      	ldr	r2, [pc, #80]	; (8027878 <FLASH_SetErrorCode+0xa8>)
 8027826:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8027828:	4b12      	ldr	r3, [pc, #72]	; (8027874 <FLASH_SetErrorCode+0xa4>)
 802782a:	2240      	movs	r2, #64	; 0x40
 802782c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 802782e:	4b11      	ldr	r3, [pc, #68]	; (8027874 <FLASH_SetErrorCode+0xa4>)
 8027830:	68db      	ldr	r3, [r3, #12]
 8027832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027836:	2b00      	cmp	r3, #0
 8027838:	d008      	beq.n	802784c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 802783a:	4b0f      	ldr	r3, [pc, #60]	; (8027878 <FLASH_SetErrorCode+0xa8>)
 802783c:	69db      	ldr	r3, [r3, #28]
 802783e:	f043 0302 	orr.w	r3, r3, #2
 8027842:	4a0d      	ldr	r2, [pc, #52]	; (8027878 <FLASH_SetErrorCode+0xa8>)
 8027844:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8027846:	4b0b      	ldr	r3, [pc, #44]	; (8027874 <FLASH_SetErrorCode+0xa4>)
 8027848:	2280      	movs	r2, #128	; 0x80
 802784a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 802784c:	4b09      	ldr	r3, [pc, #36]	; (8027874 <FLASH_SetErrorCode+0xa4>)
 802784e:	68db      	ldr	r3, [r3, #12]
 8027850:	f003 0302 	and.w	r3, r3, #2
 8027854:	2b00      	cmp	r3, #0
 8027856:	d008      	beq.n	802786a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8027858:	4b07      	ldr	r3, [pc, #28]	; (8027878 <FLASH_SetErrorCode+0xa8>)
 802785a:	69db      	ldr	r3, [r3, #28]
 802785c:	f043 0320 	orr.w	r3, r3, #32
 8027860:	4a05      	ldr	r2, [pc, #20]	; (8027878 <FLASH_SetErrorCode+0xa8>)
 8027862:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8027864:	4b03      	ldr	r3, [pc, #12]	; (8027874 <FLASH_SetErrorCode+0xa4>)
 8027866:	2202      	movs	r2, #2
 8027868:	60da      	str	r2, [r3, #12]
  }
}
 802786a:	bf00      	nop
 802786c:	46bd      	mov	sp, r7
 802786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027872:	4770      	bx	lr
 8027874:	40023c00 	.word	0x40023c00
 8027878:	20000a1c 	.word	0x20000a1c

0802787c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 802787c:	b580      	push	{r7, lr}
 802787e:	b084      	sub	sp, #16
 8027880:	af00      	add	r7, sp, #0
 8027882:	6078      	str	r0, [r7, #4]
 8027884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8027886:	2301      	movs	r3, #1
 8027888:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 802788a:	2300      	movs	r3, #0
 802788c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 802788e:	4b31      	ldr	r3, [pc, #196]	; (8027954 <HAL_FLASHEx_Erase+0xd8>)
 8027890:	7e1b      	ldrb	r3, [r3, #24]
 8027892:	2b01      	cmp	r3, #1
 8027894:	d101      	bne.n	802789a <HAL_FLASHEx_Erase+0x1e>
 8027896:	2302      	movs	r3, #2
 8027898:	e058      	b.n	802794c <HAL_FLASHEx_Erase+0xd0>
 802789a:	4b2e      	ldr	r3, [pc, #184]	; (8027954 <HAL_FLASHEx_Erase+0xd8>)
 802789c:	2201      	movs	r2, #1
 802789e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80278a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80278a4:	f7ff febc 	bl	8027620 <FLASH_WaitForLastOperation>
 80278a8:	4603      	mov	r3, r0
 80278aa:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80278ac:	7bfb      	ldrb	r3, [r7, #15]
 80278ae:	2b00      	cmp	r3, #0
 80278b0:	d148      	bne.n	8027944 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80278b2:	683b      	ldr	r3, [r7, #0]
 80278b4:	f04f 32ff 	mov.w	r2, #4294967295
 80278b8:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80278ba:	687b      	ldr	r3, [r7, #4]
 80278bc:	681b      	ldr	r3, [r3, #0]
 80278be:	2b01      	cmp	r3, #1
 80278c0:	d115      	bne.n	80278ee <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80278c2:	687b      	ldr	r3, [r7, #4]
 80278c4:	691b      	ldr	r3, [r3, #16]
 80278c6:	b2da      	uxtb	r2, r3
 80278c8:	687b      	ldr	r3, [r7, #4]
 80278ca:	685b      	ldr	r3, [r3, #4]
 80278cc:	4619      	mov	r1, r3
 80278ce:	4610      	mov	r0, r2
 80278d0:	f000 f844 	bl	802795c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80278d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80278d8:	f7ff fea2 	bl	8027620 <FLASH_WaitForLastOperation>
 80278dc:	4603      	mov	r3, r0
 80278de:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80278e0:	4b1d      	ldr	r3, [pc, #116]	; (8027958 <HAL_FLASHEx_Erase+0xdc>)
 80278e2:	691b      	ldr	r3, [r3, #16]
 80278e4:	4a1c      	ldr	r2, [pc, #112]	; (8027958 <HAL_FLASHEx_Erase+0xdc>)
 80278e6:	f023 0304 	bic.w	r3, r3, #4
 80278ea:	6113      	str	r3, [r2, #16]
 80278ec:	e028      	b.n	8027940 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80278ee:	687b      	ldr	r3, [r7, #4]
 80278f0:	689b      	ldr	r3, [r3, #8]
 80278f2:	60bb      	str	r3, [r7, #8]
 80278f4:	e01c      	b.n	8027930 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80278f6:	687b      	ldr	r3, [r7, #4]
 80278f8:	691b      	ldr	r3, [r3, #16]
 80278fa:	b2db      	uxtb	r3, r3
 80278fc:	4619      	mov	r1, r3
 80278fe:	68b8      	ldr	r0, [r7, #8]
 8027900:	f000 f850 	bl	80279a4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027904:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027908:	f7ff fe8a 	bl	8027620 <FLASH_WaitForLastOperation>
 802790c:	4603      	mov	r3, r0
 802790e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8027910:	4b11      	ldr	r3, [pc, #68]	; (8027958 <HAL_FLASHEx_Erase+0xdc>)
 8027912:	691b      	ldr	r3, [r3, #16]
 8027914:	4a10      	ldr	r2, [pc, #64]	; (8027958 <HAL_FLASHEx_Erase+0xdc>)
 8027916:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 802791a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 802791c:	7bfb      	ldrb	r3, [r7, #15]
 802791e:	2b00      	cmp	r3, #0
 8027920:	d003      	beq.n	802792a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8027922:	683b      	ldr	r3, [r7, #0]
 8027924:	68ba      	ldr	r2, [r7, #8]
 8027926:	601a      	str	r2, [r3, #0]
          break;
 8027928:	e00a      	b.n	8027940 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 802792a:	68bb      	ldr	r3, [r7, #8]
 802792c:	3301      	adds	r3, #1
 802792e:	60bb      	str	r3, [r7, #8]
 8027930:	687b      	ldr	r3, [r7, #4]
 8027932:	68da      	ldr	r2, [r3, #12]
 8027934:	687b      	ldr	r3, [r7, #4]
 8027936:	689b      	ldr	r3, [r3, #8]
 8027938:	4413      	add	r3, r2
 802793a:	68ba      	ldr	r2, [r7, #8]
 802793c:	429a      	cmp	r2, r3
 802793e:	d3da      	bcc.n	80278f6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8027940:	f000 f878 	bl	8027a34 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8027944:	4b03      	ldr	r3, [pc, #12]	; (8027954 <HAL_FLASHEx_Erase+0xd8>)
 8027946:	2200      	movs	r2, #0
 8027948:	761a      	strb	r2, [r3, #24]

  return status;
 802794a:	7bfb      	ldrb	r3, [r7, #15]
}
 802794c:	4618      	mov	r0, r3
 802794e:	3710      	adds	r7, #16
 8027950:	46bd      	mov	sp, r7
 8027952:	bd80      	pop	{r7, pc}
 8027954:	20000a1c 	.word	0x20000a1c
 8027958:	40023c00 	.word	0x40023c00

0802795c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 802795c:	b480      	push	{r7}
 802795e:	b083      	sub	sp, #12
 8027960:	af00      	add	r7, sp, #0
 8027962:	4603      	mov	r3, r0
 8027964:	6039      	str	r1, [r7, #0]
 8027966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027968:	4b0d      	ldr	r3, [pc, #52]	; (80279a0 <FLASH_MassErase+0x44>)
 802796a:	691b      	ldr	r3, [r3, #16]
 802796c:	4a0c      	ldr	r2, [pc, #48]	; (80279a0 <FLASH_MassErase+0x44>)
 802796e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027972:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8027974:	4b0a      	ldr	r3, [pc, #40]	; (80279a0 <FLASH_MassErase+0x44>)
 8027976:	691b      	ldr	r3, [r3, #16]
 8027978:	4a09      	ldr	r2, [pc, #36]	; (80279a0 <FLASH_MassErase+0x44>)
 802797a:	f043 0304 	orr.w	r3, r3, #4
 802797e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8027980:	4b07      	ldr	r3, [pc, #28]	; (80279a0 <FLASH_MassErase+0x44>)
 8027982:	691a      	ldr	r2, [r3, #16]
 8027984:	79fb      	ldrb	r3, [r7, #7]
 8027986:	021b      	lsls	r3, r3, #8
 8027988:	4313      	orrs	r3, r2
 802798a:	4a05      	ldr	r2, [pc, #20]	; (80279a0 <FLASH_MassErase+0x44>)
 802798c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027990:	6113      	str	r3, [r2, #16]
}
 8027992:	bf00      	nop
 8027994:	370c      	adds	r7, #12
 8027996:	46bd      	mov	sp, r7
 8027998:	f85d 7b04 	ldr.w	r7, [sp], #4
 802799c:	4770      	bx	lr
 802799e:	bf00      	nop
 80279a0:	40023c00 	.word	0x40023c00

080279a4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80279a4:	b480      	push	{r7}
 80279a6:	b085      	sub	sp, #20
 80279a8:	af00      	add	r7, sp, #0
 80279aa:	6078      	str	r0, [r7, #4]
 80279ac:	460b      	mov	r3, r1
 80279ae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80279b0:	2300      	movs	r3, #0
 80279b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80279b4:	78fb      	ldrb	r3, [r7, #3]
 80279b6:	2b00      	cmp	r3, #0
 80279b8:	d102      	bne.n	80279c0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80279ba:	2300      	movs	r3, #0
 80279bc:	60fb      	str	r3, [r7, #12]
 80279be:	e010      	b.n	80279e2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80279c0:	78fb      	ldrb	r3, [r7, #3]
 80279c2:	2b01      	cmp	r3, #1
 80279c4:	d103      	bne.n	80279ce <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80279c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80279ca:	60fb      	str	r3, [r7, #12]
 80279cc:	e009      	b.n	80279e2 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80279ce:	78fb      	ldrb	r3, [r7, #3]
 80279d0:	2b02      	cmp	r3, #2
 80279d2:	d103      	bne.n	80279dc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80279d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80279d8:	60fb      	str	r3, [r7, #12]
 80279da:	e002      	b.n	80279e2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80279dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80279e0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80279e2:	4b13      	ldr	r3, [pc, #76]	; (8027a30 <FLASH_Erase_Sector+0x8c>)
 80279e4:	691b      	ldr	r3, [r3, #16]
 80279e6:	4a12      	ldr	r2, [pc, #72]	; (8027a30 <FLASH_Erase_Sector+0x8c>)
 80279e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80279ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80279ee:	4b10      	ldr	r3, [pc, #64]	; (8027a30 <FLASH_Erase_Sector+0x8c>)
 80279f0:	691a      	ldr	r2, [r3, #16]
 80279f2:	490f      	ldr	r1, [pc, #60]	; (8027a30 <FLASH_Erase_Sector+0x8c>)
 80279f4:	68fb      	ldr	r3, [r7, #12]
 80279f6:	4313      	orrs	r3, r2
 80279f8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80279fa:	4b0d      	ldr	r3, [pc, #52]	; (8027a30 <FLASH_Erase_Sector+0x8c>)
 80279fc:	691b      	ldr	r3, [r3, #16]
 80279fe:	4a0c      	ldr	r2, [pc, #48]	; (8027a30 <FLASH_Erase_Sector+0x8c>)
 8027a00:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8027a04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8027a06:	4b0a      	ldr	r3, [pc, #40]	; (8027a30 <FLASH_Erase_Sector+0x8c>)
 8027a08:	691a      	ldr	r2, [r3, #16]
 8027a0a:	687b      	ldr	r3, [r7, #4]
 8027a0c:	00db      	lsls	r3, r3, #3
 8027a0e:	4313      	orrs	r3, r2
 8027a10:	4a07      	ldr	r2, [pc, #28]	; (8027a30 <FLASH_Erase_Sector+0x8c>)
 8027a12:	f043 0302 	orr.w	r3, r3, #2
 8027a16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8027a18:	4b05      	ldr	r3, [pc, #20]	; (8027a30 <FLASH_Erase_Sector+0x8c>)
 8027a1a:	691b      	ldr	r3, [r3, #16]
 8027a1c:	4a04      	ldr	r2, [pc, #16]	; (8027a30 <FLASH_Erase_Sector+0x8c>)
 8027a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027a22:	6113      	str	r3, [r2, #16]
}
 8027a24:	bf00      	nop
 8027a26:	3714      	adds	r7, #20
 8027a28:	46bd      	mov	sp, r7
 8027a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a2e:	4770      	bx	lr
 8027a30:	40023c00 	.word	0x40023c00

08027a34 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8027a34:	b480      	push	{r7}
 8027a36:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8027a38:	4b20      	ldr	r3, [pc, #128]	; (8027abc <FLASH_FlushCaches+0x88>)
 8027a3a:	681b      	ldr	r3, [r3, #0]
 8027a3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8027a40:	2b00      	cmp	r3, #0
 8027a42:	d017      	beq.n	8027a74 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8027a44:	4b1d      	ldr	r3, [pc, #116]	; (8027abc <FLASH_FlushCaches+0x88>)
 8027a46:	681b      	ldr	r3, [r3, #0]
 8027a48:	4a1c      	ldr	r2, [pc, #112]	; (8027abc <FLASH_FlushCaches+0x88>)
 8027a4a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8027a4e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8027a50:	4b1a      	ldr	r3, [pc, #104]	; (8027abc <FLASH_FlushCaches+0x88>)
 8027a52:	681b      	ldr	r3, [r3, #0]
 8027a54:	4a19      	ldr	r2, [pc, #100]	; (8027abc <FLASH_FlushCaches+0x88>)
 8027a56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8027a5a:	6013      	str	r3, [r2, #0]
 8027a5c:	4b17      	ldr	r3, [pc, #92]	; (8027abc <FLASH_FlushCaches+0x88>)
 8027a5e:	681b      	ldr	r3, [r3, #0]
 8027a60:	4a16      	ldr	r2, [pc, #88]	; (8027abc <FLASH_FlushCaches+0x88>)
 8027a62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8027a66:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8027a68:	4b14      	ldr	r3, [pc, #80]	; (8027abc <FLASH_FlushCaches+0x88>)
 8027a6a:	681b      	ldr	r3, [r3, #0]
 8027a6c:	4a13      	ldr	r2, [pc, #76]	; (8027abc <FLASH_FlushCaches+0x88>)
 8027a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8027a72:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8027a74:	4b11      	ldr	r3, [pc, #68]	; (8027abc <FLASH_FlushCaches+0x88>)
 8027a76:	681b      	ldr	r3, [r3, #0]
 8027a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027a7c:	2b00      	cmp	r3, #0
 8027a7e:	d017      	beq.n	8027ab0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8027a80:	4b0e      	ldr	r3, [pc, #56]	; (8027abc <FLASH_FlushCaches+0x88>)
 8027a82:	681b      	ldr	r3, [r3, #0]
 8027a84:	4a0d      	ldr	r2, [pc, #52]	; (8027abc <FLASH_FlushCaches+0x88>)
 8027a86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8027a8a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8027a8c:	4b0b      	ldr	r3, [pc, #44]	; (8027abc <FLASH_FlushCaches+0x88>)
 8027a8e:	681b      	ldr	r3, [r3, #0]
 8027a90:	4a0a      	ldr	r2, [pc, #40]	; (8027abc <FLASH_FlushCaches+0x88>)
 8027a92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8027a96:	6013      	str	r3, [r2, #0]
 8027a98:	4b08      	ldr	r3, [pc, #32]	; (8027abc <FLASH_FlushCaches+0x88>)
 8027a9a:	681b      	ldr	r3, [r3, #0]
 8027a9c:	4a07      	ldr	r2, [pc, #28]	; (8027abc <FLASH_FlushCaches+0x88>)
 8027a9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8027aa2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8027aa4:	4b05      	ldr	r3, [pc, #20]	; (8027abc <FLASH_FlushCaches+0x88>)
 8027aa6:	681b      	ldr	r3, [r3, #0]
 8027aa8:	4a04      	ldr	r2, [pc, #16]	; (8027abc <FLASH_FlushCaches+0x88>)
 8027aaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8027aae:	6013      	str	r3, [r2, #0]
  }
}
 8027ab0:	bf00      	nop
 8027ab2:	46bd      	mov	sp, r7
 8027ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ab8:	4770      	bx	lr
 8027aba:	bf00      	nop
 8027abc:	40023c00 	.word	0x40023c00

08027ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8027ac0:	b480      	push	{r7}
 8027ac2:	b089      	sub	sp, #36	; 0x24
 8027ac4:	af00      	add	r7, sp, #0
 8027ac6:	6078      	str	r0, [r7, #4]
 8027ac8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8027aca:	2300      	movs	r3, #0
 8027acc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8027ace:	2300      	movs	r3, #0
 8027ad0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8027ad2:	2300      	movs	r3, #0
 8027ad4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8027ad6:	2300      	movs	r3, #0
 8027ad8:	61fb      	str	r3, [r7, #28]
 8027ada:	e16b      	b.n	8027db4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8027adc:	2201      	movs	r2, #1
 8027ade:	69fb      	ldr	r3, [r7, #28]
 8027ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8027ae4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8027ae6:	683b      	ldr	r3, [r7, #0]
 8027ae8:	681b      	ldr	r3, [r3, #0]
 8027aea:	697a      	ldr	r2, [r7, #20]
 8027aec:	4013      	ands	r3, r2
 8027aee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8027af0:	693a      	ldr	r2, [r7, #16]
 8027af2:	697b      	ldr	r3, [r7, #20]
 8027af4:	429a      	cmp	r2, r3
 8027af6:	f040 815a 	bne.w	8027dae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8027afa:	683b      	ldr	r3, [r7, #0]
 8027afc:	685b      	ldr	r3, [r3, #4]
 8027afe:	2b01      	cmp	r3, #1
 8027b00:	d00b      	beq.n	8027b1a <HAL_GPIO_Init+0x5a>
 8027b02:	683b      	ldr	r3, [r7, #0]
 8027b04:	685b      	ldr	r3, [r3, #4]
 8027b06:	2b02      	cmp	r3, #2
 8027b08:	d007      	beq.n	8027b1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8027b0a:	683b      	ldr	r3, [r7, #0]
 8027b0c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8027b0e:	2b11      	cmp	r3, #17
 8027b10:	d003      	beq.n	8027b1a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8027b12:	683b      	ldr	r3, [r7, #0]
 8027b14:	685b      	ldr	r3, [r3, #4]
 8027b16:	2b12      	cmp	r3, #18
 8027b18:	d130      	bne.n	8027b7c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8027b1a:	687b      	ldr	r3, [r7, #4]
 8027b1c:	689b      	ldr	r3, [r3, #8]
 8027b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8027b20:	69fb      	ldr	r3, [r7, #28]
 8027b22:	005b      	lsls	r3, r3, #1
 8027b24:	2203      	movs	r2, #3
 8027b26:	fa02 f303 	lsl.w	r3, r2, r3
 8027b2a:	43db      	mvns	r3, r3
 8027b2c:	69ba      	ldr	r2, [r7, #24]
 8027b2e:	4013      	ands	r3, r2
 8027b30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8027b32:	683b      	ldr	r3, [r7, #0]
 8027b34:	68da      	ldr	r2, [r3, #12]
 8027b36:	69fb      	ldr	r3, [r7, #28]
 8027b38:	005b      	lsls	r3, r3, #1
 8027b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8027b3e:	69ba      	ldr	r2, [r7, #24]
 8027b40:	4313      	orrs	r3, r2
 8027b42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8027b44:	687b      	ldr	r3, [r7, #4]
 8027b46:	69ba      	ldr	r2, [r7, #24]
 8027b48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8027b4a:	687b      	ldr	r3, [r7, #4]
 8027b4c:	685b      	ldr	r3, [r3, #4]
 8027b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8027b50:	2201      	movs	r2, #1
 8027b52:	69fb      	ldr	r3, [r7, #28]
 8027b54:	fa02 f303 	lsl.w	r3, r2, r3
 8027b58:	43db      	mvns	r3, r3
 8027b5a:	69ba      	ldr	r2, [r7, #24]
 8027b5c:	4013      	ands	r3, r2
 8027b5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8027b60:	683b      	ldr	r3, [r7, #0]
 8027b62:	685b      	ldr	r3, [r3, #4]
 8027b64:	091b      	lsrs	r3, r3, #4
 8027b66:	f003 0201 	and.w	r2, r3, #1
 8027b6a:	69fb      	ldr	r3, [r7, #28]
 8027b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8027b70:	69ba      	ldr	r2, [r7, #24]
 8027b72:	4313      	orrs	r3, r2
 8027b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8027b76:	687b      	ldr	r3, [r7, #4]
 8027b78:	69ba      	ldr	r2, [r7, #24]
 8027b7a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8027b7c:	687b      	ldr	r3, [r7, #4]
 8027b7e:	68db      	ldr	r3, [r3, #12]
 8027b80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8027b82:	69fb      	ldr	r3, [r7, #28]
 8027b84:	005b      	lsls	r3, r3, #1
 8027b86:	2203      	movs	r2, #3
 8027b88:	fa02 f303 	lsl.w	r3, r2, r3
 8027b8c:	43db      	mvns	r3, r3
 8027b8e:	69ba      	ldr	r2, [r7, #24]
 8027b90:	4013      	ands	r3, r2
 8027b92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8027b94:	683b      	ldr	r3, [r7, #0]
 8027b96:	689a      	ldr	r2, [r3, #8]
 8027b98:	69fb      	ldr	r3, [r7, #28]
 8027b9a:	005b      	lsls	r3, r3, #1
 8027b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8027ba0:	69ba      	ldr	r2, [r7, #24]
 8027ba2:	4313      	orrs	r3, r2
 8027ba4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8027ba6:	687b      	ldr	r3, [r7, #4]
 8027ba8:	69ba      	ldr	r2, [r7, #24]
 8027baa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8027bac:	683b      	ldr	r3, [r7, #0]
 8027bae:	685b      	ldr	r3, [r3, #4]
 8027bb0:	2b02      	cmp	r3, #2
 8027bb2:	d003      	beq.n	8027bbc <HAL_GPIO_Init+0xfc>
 8027bb4:	683b      	ldr	r3, [r7, #0]
 8027bb6:	685b      	ldr	r3, [r3, #4]
 8027bb8:	2b12      	cmp	r3, #18
 8027bba:	d123      	bne.n	8027c04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8027bbc:	69fb      	ldr	r3, [r7, #28]
 8027bbe:	08da      	lsrs	r2, r3, #3
 8027bc0:	687b      	ldr	r3, [r7, #4]
 8027bc2:	3208      	adds	r2, #8
 8027bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8027bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8027bca:	69fb      	ldr	r3, [r7, #28]
 8027bcc:	f003 0307 	and.w	r3, r3, #7
 8027bd0:	009b      	lsls	r3, r3, #2
 8027bd2:	220f      	movs	r2, #15
 8027bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8027bd8:	43db      	mvns	r3, r3
 8027bda:	69ba      	ldr	r2, [r7, #24]
 8027bdc:	4013      	ands	r3, r2
 8027bde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8027be0:	683b      	ldr	r3, [r7, #0]
 8027be2:	691a      	ldr	r2, [r3, #16]
 8027be4:	69fb      	ldr	r3, [r7, #28]
 8027be6:	f003 0307 	and.w	r3, r3, #7
 8027bea:	009b      	lsls	r3, r3, #2
 8027bec:	fa02 f303 	lsl.w	r3, r2, r3
 8027bf0:	69ba      	ldr	r2, [r7, #24]
 8027bf2:	4313      	orrs	r3, r2
 8027bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8027bf6:	69fb      	ldr	r3, [r7, #28]
 8027bf8:	08da      	lsrs	r2, r3, #3
 8027bfa:	687b      	ldr	r3, [r7, #4]
 8027bfc:	3208      	adds	r2, #8
 8027bfe:	69b9      	ldr	r1, [r7, #24]
 8027c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8027c04:	687b      	ldr	r3, [r7, #4]
 8027c06:	681b      	ldr	r3, [r3, #0]
 8027c08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8027c0a:	69fb      	ldr	r3, [r7, #28]
 8027c0c:	005b      	lsls	r3, r3, #1
 8027c0e:	2203      	movs	r2, #3
 8027c10:	fa02 f303 	lsl.w	r3, r2, r3
 8027c14:	43db      	mvns	r3, r3
 8027c16:	69ba      	ldr	r2, [r7, #24]
 8027c18:	4013      	ands	r3, r2
 8027c1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8027c1c:	683b      	ldr	r3, [r7, #0]
 8027c1e:	685b      	ldr	r3, [r3, #4]
 8027c20:	f003 0203 	and.w	r2, r3, #3
 8027c24:	69fb      	ldr	r3, [r7, #28]
 8027c26:	005b      	lsls	r3, r3, #1
 8027c28:	fa02 f303 	lsl.w	r3, r2, r3
 8027c2c:	69ba      	ldr	r2, [r7, #24]
 8027c2e:	4313      	orrs	r3, r2
 8027c30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8027c32:	687b      	ldr	r3, [r7, #4]
 8027c34:	69ba      	ldr	r2, [r7, #24]
 8027c36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8027c38:	683b      	ldr	r3, [r7, #0]
 8027c3a:	685b      	ldr	r3, [r3, #4]
 8027c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8027c40:	2b00      	cmp	r3, #0
 8027c42:	f000 80b4 	beq.w	8027dae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8027c46:	2300      	movs	r3, #0
 8027c48:	60fb      	str	r3, [r7, #12]
 8027c4a:	4b5f      	ldr	r3, [pc, #380]	; (8027dc8 <HAL_GPIO_Init+0x308>)
 8027c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027c4e:	4a5e      	ldr	r2, [pc, #376]	; (8027dc8 <HAL_GPIO_Init+0x308>)
 8027c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8027c54:	6453      	str	r3, [r2, #68]	; 0x44
 8027c56:	4b5c      	ldr	r3, [pc, #368]	; (8027dc8 <HAL_GPIO_Init+0x308>)
 8027c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8027c5e:	60fb      	str	r3, [r7, #12]
 8027c60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8027c62:	4a5a      	ldr	r2, [pc, #360]	; (8027dcc <HAL_GPIO_Init+0x30c>)
 8027c64:	69fb      	ldr	r3, [r7, #28]
 8027c66:	089b      	lsrs	r3, r3, #2
 8027c68:	3302      	adds	r3, #2
 8027c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8027c70:	69fb      	ldr	r3, [r7, #28]
 8027c72:	f003 0303 	and.w	r3, r3, #3
 8027c76:	009b      	lsls	r3, r3, #2
 8027c78:	220f      	movs	r2, #15
 8027c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8027c7e:	43db      	mvns	r3, r3
 8027c80:	69ba      	ldr	r2, [r7, #24]
 8027c82:	4013      	ands	r3, r2
 8027c84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8027c86:	687b      	ldr	r3, [r7, #4]
 8027c88:	4a51      	ldr	r2, [pc, #324]	; (8027dd0 <HAL_GPIO_Init+0x310>)
 8027c8a:	4293      	cmp	r3, r2
 8027c8c:	d02b      	beq.n	8027ce6 <HAL_GPIO_Init+0x226>
 8027c8e:	687b      	ldr	r3, [r7, #4]
 8027c90:	4a50      	ldr	r2, [pc, #320]	; (8027dd4 <HAL_GPIO_Init+0x314>)
 8027c92:	4293      	cmp	r3, r2
 8027c94:	d025      	beq.n	8027ce2 <HAL_GPIO_Init+0x222>
 8027c96:	687b      	ldr	r3, [r7, #4]
 8027c98:	4a4f      	ldr	r2, [pc, #316]	; (8027dd8 <HAL_GPIO_Init+0x318>)
 8027c9a:	4293      	cmp	r3, r2
 8027c9c:	d01f      	beq.n	8027cde <HAL_GPIO_Init+0x21e>
 8027c9e:	687b      	ldr	r3, [r7, #4]
 8027ca0:	4a4e      	ldr	r2, [pc, #312]	; (8027ddc <HAL_GPIO_Init+0x31c>)
 8027ca2:	4293      	cmp	r3, r2
 8027ca4:	d019      	beq.n	8027cda <HAL_GPIO_Init+0x21a>
 8027ca6:	687b      	ldr	r3, [r7, #4]
 8027ca8:	4a4d      	ldr	r2, [pc, #308]	; (8027de0 <HAL_GPIO_Init+0x320>)
 8027caa:	4293      	cmp	r3, r2
 8027cac:	d013      	beq.n	8027cd6 <HAL_GPIO_Init+0x216>
 8027cae:	687b      	ldr	r3, [r7, #4]
 8027cb0:	4a4c      	ldr	r2, [pc, #304]	; (8027de4 <HAL_GPIO_Init+0x324>)
 8027cb2:	4293      	cmp	r3, r2
 8027cb4:	d00d      	beq.n	8027cd2 <HAL_GPIO_Init+0x212>
 8027cb6:	687b      	ldr	r3, [r7, #4]
 8027cb8:	4a4b      	ldr	r2, [pc, #300]	; (8027de8 <HAL_GPIO_Init+0x328>)
 8027cba:	4293      	cmp	r3, r2
 8027cbc:	d007      	beq.n	8027cce <HAL_GPIO_Init+0x20e>
 8027cbe:	687b      	ldr	r3, [r7, #4]
 8027cc0:	4a4a      	ldr	r2, [pc, #296]	; (8027dec <HAL_GPIO_Init+0x32c>)
 8027cc2:	4293      	cmp	r3, r2
 8027cc4:	d101      	bne.n	8027cca <HAL_GPIO_Init+0x20a>
 8027cc6:	2307      	movs	r3, #7
 8027cc8:	e00e      	b.n	8027ce8 <HAL_GPIO_Init+0x228>
 8027cca:	2308      	movs	r3, #8
 8027ccc:	e00c      	b.n	8027ce8 <HAL_GPIO_Init+0x228>
 8027cce:	2306      	movs	r3, #6
 8027cd0:	e00a      	b.n	8027ce8 <HAL_GPIO_Init+0x228>
 8027cd2:	2305      	movs	r3, #5
 8027cd4:	e008      	b.n	8027ce8 <HAL_GPIO_Init+0x228>
 8027cd6:	2304      	movs	r3, #4
 8027cd8:	e006      	b.n	8027ce8 <HAL_GPIO_Init+0x228>
 8027cda:	2303      	movs	r3, #3
 8027cdc:	e004      	b.n	8027ce8 <HAL_GPIO_Init+0x228>
 8027cde:	2302      	movs	r3, #2
 8027ce0:	e002      	b.n	8027ce8 <HAL_GPIO_Init+0x228>
 8027ce2:	2301      	movs	r3, #1
 8027ce4:	e000      	b.n	8027ce8 <HAL_GPIO_Init+0x228>
 8027ce6:	2300      	movs	r3, #0
 8027ce8:	69fa      	ldr	r2, [r7, #28]
 8027cea:	f002 0203 	and.w	r2, r2, #3
 8027cee:	0092      	lsls	r2, r2, #2
 8027cf0:	4093      	lsls	r3, r2
 8027cf2:	69ba      	ldr	r2, [r7, #24]
 8027cf4:	4313      	orrs	r3, r2
 8027cf6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8027cf8:	4934      	ldr	r1, [pc, #208]	; (8027dcc <HAL_GPIO_Init+0x30c>)
 8027cfa:	69fb      	ldr	r3, [r7, #28]
 8027cfc:	089b      	lsrs	r3, r3, #2
 8027cfe:	3302      	adds	r3, #2
 8027d00:	69ba      	ldr	r2, [r7, #24]
 8027d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8027d06:	4b3a      	ldr	r3, [pc, #232]	; (8027df0 <HAL_GPIO_Init+0x330>)
 8027d08:	681b      	ldr	r3, [r3, #0]
 8027d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027d0c:	693b      	ldr	r3, [r7, #16]
 8027d0e:	43db      	mvns	r3, r3
 8027d10:	69ba      	ldr	r2, [r7, #24]
 8027d12:	4013      	ands	r3, r2
 8027d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8027d16:	683b      	ldr	r3, [r7, #0]
 8027d18:	685b      	ldr	r3, [r3, #4]
 8027d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8027d1e:	2b00      	cmp	r3, #0
 8027d20:	d003      	beq.n	8027d2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8027d22:	69ba      	ldr	r2, [r7, #24]
 8027d24:	693b      	ldr	r3, [r7, #16]
 8027d26:	4313      	orrs	r3, r2
 8027d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8027d2a:	4a31      	ldr	r2, [pc, #196]	; (8027df0 <HAL_GPIO_Init+0x330>)
 8027d2c:	69bb      	ldr	r3, [r7, #24]
 8027d2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8027d30:	4b2f      	ldr	r3, [pc, #188]	; (8027df0 <HAL_GPIO_Init+0x330>)
 8027d32:	685b      	ldr	r3, [r3, #4]
 8027d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027d36:	693b      	ldr	r3, [r7, #16]
 8027d38:	43db      	mvns	r3, r3
 8027d3a:	69ba      	ldr	r2, [r7, #24]
 8027d3c:	4013      	ands	r3, r2
 8027d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8027d40:	683b      	ldr	r3, [r7, #0]
 8027d42:	685b      	ldr	r3, [r3, #4]
 8027d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027d48:	2b00      	cmp	r3, #0
 8027d4a:	d003      	beq.n	8027d54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8027d4c:	69ba      	ldr	r2, [r7, #24]
 8027d4e:	693b      	ldr	r3, [r7, #16]
 8027d50:	4313      	orrs	r3, r2
 8027d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8027d54:	4a26      	ldr	r2, [pc, #152]	; (8027df0 <HAL_GPIO_Init+0x330>)
 8027d56:	69bb      	ldr	r3, [r7, #24]
 8027d58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8027d5a:	4b25      	ldr	r3, [pc, #148]	; (8027df0 <HAL_GPIO_Init+0x330>)
 8027d5c:	689b      	ldr	r3, [r3, #8]
 8027d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027d60:	693b      	ldr	r3, [r7, #16]
 8027d62:	43db      	mvns	r3, r3
 8027d64:	69ba      	ldr	r2, [r7, #24]
 8027d66:	4013      	ands	r3, r2
 8027d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8027d6a:	683b      	ldr	r3, [r7, #0]
 8027d6c:	685b      	ldr	r3, [r3, #4]
 8027d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8027d72:	2b00      	cmp	r3, #0
 8027d74:	d003      	beq.n	8027d7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8027d76:	69ba      	ldr	r2, [r7, #24]
 8027d78:	693b      	ldr	r3, [r7, #16]
 8027d7a:	4313      	orrs	r3, r2
 8027d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8027d7e:	4a1c      	ldr	r2, [pc, #112]	; (8027df0 <HAL_GPIO_Init+0x330>)
 8027d80:	69bb      	ldr	r3, [r7, #24]
 8027d82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8027d84:	4b1a      	ldr	r3, [pc, #104]	; (8027df0 <HAL_GPIO_Init+0x330>)
 8027d86:	68db      	ldr	r3, [r3, #12]
 8027d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027d8a:	693b      	ldr	r3, [r7, #16]
 8027d8c:	43db      	mvns	r3, r3
 8027d8e:	69ba      	ldr	r2, [r7, #24]
 8027d90:	4013      	ands	r3, r2
 8027d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8027d94:	683b      	ldr	r3, [r7, #0]
 8027d96:	685b      	ldr	r3, [r3, #4]
 8027d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8027d9c:	2b00      	cmp	r3, #0
 8027d9e:	d003      	beq.n	8027da8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8027da0:	69ba      	ldr	r2, [r7, #24]
 8027da2:	693b      	ldr	r3, [r7, #16]
 8027da4:	4313      	orrs	r3, r2
 8027da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8027da8:	4a11      	ldr	r2, [pc, #68]	; (8027df0 <HAL_GPIO_Init+0x330>)
 8027daa:	69bb      	ldr	r3, [r7, #24]
 8027dac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8027dae:	69fb      	ldr	r3, [r7, #28]
 8027db0:	3301      	adds	r3, #1
 8027db2:	61fb      	str	r3, [r7, #28]
 8027db4:	69fb      	ldr	r3, [r7, #28]
 8027db6:	2b0f      	cmp	r3, #15
 8027db8:	f67f ae90 	bls.w	8027adc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8027dbc:	bf00      	nop
 8027dbe:	3724      	adds	r7, #36	; 0x24
 8027dc0:	46bd      	mov	sp, r7
 8027dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027dc6:	4770      	bx	lr
 8027dc8:	40023800 	.word	0x40023800
 8027dcc:	40013800 	.word	0x40013800
 8027dd0:	40020000 	.word	0x40020000
 8027dd4:	40020400 	.word	0x40020400
 8027dd8:	40020800 	.word	0x40020800
 8027ddc:	40020c00 	.word	0x40020c00
 8027de0:	40021000 	.word	0x40021000
 8027de4:	40021400 	.word	0x40021400
 8027de8:	40021800 	.word	0x40021800
 8027dec:	40021c00 	.word	0x40021c00
 8027df0:	40013c00 	.word	0x40013c00

08027df4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8027df4:	b480      	push	{r7}
 8027df6:	b085      	sub	sp, #20
 8027df8:	af00      	add	r7, sp, #0
 8027dfa:	6078      	str	r0, [r7, #4]
 8027dfc:	460b      	mov	r3, r1
 8027dfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8027e00:	687b      	ldr	r3, [r7, #4]
 8027e02:	691a      	ldr	r2, [r3, #16]
 8027e04:	887b      	ldrh	r3, [r7, #2]
 8027e06:	4013      	ands	r3, r2
 8027e08:	2b00      	cmp	r3, #0
 8027e0a:	d002      	beq.n	8027e12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8027e0c:	2301      	movs	r3, #1
 8027e0e:	73fb      	strb	r3, [r7, #15]
 8027e10:	e001      	b.n	8027e16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8027e12:	2300      	movs	r3, #0
 8027e14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8027e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8027e18:	4618      	mov	r0, r3
 8027e1a:	3714      	adds	r7, #20
 8027e1c:	46bd      	mov	sp, r7
 8027e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e22:	4770      	bx	lr

08027e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8027e24:	b480      	push	{r7}
 8027e26:	b083      	sub	sp, #12
 8027e28:	af00      	add	r7, sp, #0
 8027e2a:	6078      	str	r0, [r7, #4]
 8027e2c:	460b      	mov	r3, r1
 8027e2e:	807b      	strh	r3, [r7, #2]
 8027e30:	4613      	mov	r3, r2
 8027e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8027e34:	787b      	ldrb	r3, [r7, #1]
 8027e36:	2b00      	cmp	r3, #0
 8027e38:	d003      	beq.n	8027e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8027e3a:	887a      	ldrh	r2, [r7, #2]
 8027e3c:	687b      	ldr	r3, [r7, #4]
 8027e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8027e40:	e003      	b.n	8027e4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8027e42:	887b      	ldrh	r3, [r7, #2]
 8027e44:	041a      	lsls	r2, r3, #16
 8027e46:	687b      	ldr	r3, [r7, #4]
 8027e48:	619a      	str	r2, [r3, #24]
}
 8027e4a:	bf00      	nop
 8027e4c:	370c      	adds	r7, #12
 8027e4e:	46bd      	mov	sp, r7
 8027e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e54:	4770      	bx	lr
	...

08027e58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8027e58:	b580      	push	{r7, lr}
 8027e5a:	b084      	sub	sp, #16
 8027e5c:	af00      	add	r7, sp, #0
 8027e5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8027e60:	687b      	ldr	r3, [r7, #4]
 8027e62:	2b00      	cmp	r3, #0
 8027e64:	d101      	bne.n	8027e6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8027e66:	2301      	movs	r3, #1
 8027e68:	e11f      	b.n	80280aa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8027e6a:	687b      	ldr	r3, [r7, #4]
 8027e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8027e70:	b2db      	uxtb	r3, r3
 8027e72:	2b00      	cmp	r3, #0
 8027e74:	d106      	bne.n	8027e84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8027e76:	687b      	ldr	r3, [r7, #4]
 8027e78:	2200      	movs	r2, #0
 8027e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8027e7e:	6878      	ldr	r0, [r7, #4]
 8027e80:	f7fd fcc6 	bl	8025810 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8027e84:	687b      	ldr	r3, [r7, #4]
 8027e86:	2224      	movs	r2, #36	; 0x24
 8027e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8027e8c:	687b      	ldr	r3, [r7, #4]
 8027e8e:	681b      	ldr	r3, [r3, #0]
 8027e90:	681a      	ldr	r2, [r3, #0]
 8027e92:	687b      	ldr	r3, [r7, #4]
 8027e94:	681b      	ldr	r3, [r3, #0]
 8027e96:	f022 0201 	bic.w	r2, r2, #1
 8027e9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8027e9c:	687b      	ldr	r3, [r7, #4]
 8027e9e:	681b      	ldr	r3, [r3, #0]
 8027ea0:	681a      	ldr	r2, [r3, #0]
 8027ea2:	687b      	ldr	r3, [r7, #4]
 8027ea4:	681b      	ldr	r3, [r3, #0]
 8027ea6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8027eaa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8027eac:	687b      	ldr	r3, [r7, #4]
 8027eae:	681b      	ldr	r3, [r3, #0]
 8027eb0:	681a      	ldr	r2, [r3, #0]
 8027eb2:	687b      	ldr	r3, [r7, #4]
 8027eb4:	681b      	ldr	r3, [r3, #0]
 8027eb6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8027eba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8027ebc:	f000 fd18 	bl	80288f0 <HAL_RCC_GetPCLK1Freq>
 8027ec0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8027ec2:	687b      	ldr	r3, [r7, #4]
 8027ec4:	685b      	ldr	r3, [r3, #4]
 8027ec6:	4a7b      	ldr	r2, [pc, #492]	; (80280b4 <HAL_I2C_Init+0x25c>)
 8027ec8:	4293      	cmp	r3, r2
 8027eca:	d807      	bhi.n	8027edc <HAL_I2C_Init+0x84>
 8027ecc:	68fb      	ldr	r3, [r7, #12]
 8027ece:	4a7a      	ldr	r2, [pc, #488]	; (80280b8 <HAL_I2C_Init+0x260>)
 8027ed0:	4293      	cmp	r3, r2
 8027ed2:	bf94      	ite	ls
 8027ed4:	2301      	movls	r3, #1
 8027ed6:	2300      	movhi	r3, #0
 8027ed8:	b2db      	uxtb	r3, r3
 8027eda:	e006      	b.n	8027eea <HAL_I2C_Init+0x92>
 8027edc:	68fb      	ldr	r3, [r7, #12]
 8027ede:	4a77      	ldr	r2, [pc, #476]	; (80280bc <HAL_I2C_Init+0x264>)
 8027ee0:	4293      	cmp	r3, r2
 8027ee2:	bf94      	ite	ls
 8027ee4:	2301      	movls	r3, #1
 8027ee6:	2300      	movhi	r3, #0
 8027ee8:	b2db      	uxtb	r3, r3
 8027eea:	2b00      	cmp	r3, #0
 8027eec:	d001      	beq.n	8027ef2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8027eee:	2301      	movs	r3, #1
 8027ef0:	e0db      	b.n	80280aa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8027ef2:	68fb      	ldr	r3, [r7, #12]
 8027ef4:	4a72      	ldr	r2, [pc, #456]	; (80280c0 <HAL_I2C_Init+0x268>)
 8027ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8027efa:	0c9b      	lsrs	r3, r3, #18
 8027efc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8027efe:	687b      	ldr	r3, [r7, #4]
 8027f00:	681b      	ldr	r3, [r3, #0]
 8027f02:	685b      	ldr	r3, [r3, #4]
 8027f04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8027f08:	687b      	ldr	r3, [r7, #4]
 8027f0a:	681b      	ldr	r3, [r3, #0]
 8027f0c:	68ba      	ldr	r2, [r7, #8]
 8027f0e:	430a      	orrs	r2, r1
 8027f10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8027f12:	687b      	ldr	r3, [r7, #4]
 8027f14:	681b      	ldr	r3, [r3, #0]
 8027f16:	6a1b      	ldr	r3, [r3, #32]
 8027f18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8027f1c:	687b      	ldr	r3, [r7, #4]
 8027f1e:	685b      	ldr	r3, [r3, #4]
 8027f20:	4a64      	ldr	r2, [pc, #400]	; (80280b4 <HAL_I2C_Init+0x25c>)
 8027f22:	4293      	cmp	r3, r2
 8027f24:	d802      	bhi.n	8027f2c <HAL_I2C_Init+0xd4>
 8027f26:	68bb      	ldr	r3, [r7, #8]
 8027f28:	3301      	adds	r3, #1
 8027f2a:	e009      	b.n	8027f40 <HAL_I2C_Init+0xe8>
 8027f2c:	68bb      	ldr	r3, [r7, #8]
 8027f2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8027f32:	fb02 f303 	mul.w	r3, r2, r3
 8027f36:	4a63      	ldr	r2, [pc, #396]	; (80280c4 <HAL_I2C_Init+0x26c>)
 8027f38:	fba2 2303 	umull	r2, r3, r2, r3
 8027f3c:	099b      	lsrs	r3, r3, #6
 8027f3e:	3301      	adds	r3, #1
 8027f40:	687a      	ldr	r2, [r7, #4]
 8027f42:	6812      	ldr	r2, [r2, #0]
 8027f44:	430b      	orrs	r3, r1
 8027f46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8027f48:	687b      	ldr	r3, [r7, #4]
 8027f4a:	681b      	ldr	r3, [r3, #0]
 8027f4c:	69db      	ldr	r3, [r3, #28]
 8027f4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8027f52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8027f56:	687b      	ldr	r3, [r7, #4]
 8027f58:	685b      	ldr	r3, [r3, #4]
 8027f5a:	4956      	ldr	r1, [pc, #344]	; (80280b4 <HAL_I2C_Init+0x25c>)
 8027f5c:	428b      	cmp	r3, r1
 8027f5e:	d80d      	bhi.n	8027f7c <HAL_I2C_Init+0x124>
 8027f60:	68fb      	ldr	r3, [r7, #12]
 8027f62:	1e59      	subs	r1, r3, #1
 8027f64:	687b      	ldr	r3, [r7, #4]
 8027f66:	685b      	ldr	r3, [r3, #4]
 8027f68:	005b      	lsls	r3, r3, #1
 8027f6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8027f6e:	3301      	adds	r3, #1
 8027f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027f74:	2b04      	cmp	r3, #4
 8027f76:	bf38      	it	cc
 8027f78:	2304      	movcc	r3, #4
 8027f7a:	e04f      	b.n	802801c <HAL_I2C_Init+0x1c4>
 8027f7c:	687b      	ldr	r3, [r7, #4]
 8027f7e:	689b      	ldr	r3, [r3, #8]
 8027f80:	2b00      	cmp	r3, #0
 8027f82:	d111      	bne.n	8027fa8 <HAL_I2C_Init+0x150>
 8027f84:	68fb      	ldr	r3, [r7, #12]
 8027f86:	1e58      	subs	r0, r3, #1
 8027f88:	687b      	ldr	r3, [r7, #4]
 8027f8a:	6859      	ldr	r1, [r3, #4]
 8027f8c:	460b      	mov	r3, r1
 8027f8e:	005b      	lsls	r3, r3, #1
 8027f90:	440b      	add	r3, r1
 8027f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8027f96:	3301      	adds	r3, #1
 8027f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027f9c:	2b00      	cmp	r3, #0
 8027f9e:	bf0c      	ite	eq
 8027fa0:	2301      	moveq	r3, #1
 8027fa2:	2300      	movne	r3, #0
 8027fa4:	b2db      	uxtb	r3, r3
 8027fa6:	e012      	b.n	8027fce <HAL_I2C_Init+0x176>
 8027fa8:	68fb      	ldr	r3, [r7, #12]
 8027faa:	1e58      	subs	r0, r3, #1
 8027fac:	687b      	ldr	r3, [r7, #4]
 8027fae:	6859      	ldr	r1, [r3, #4]
 8027fb0:	460b      	mov	r3, r1
 8027fb2:	009b      	lsls	r3, r3, #2
 8027fb4:	440b      	add	r3, r1
 8027fb6:	0099      	lsls	r1, r3, #2
 8027fb8:	440b      	add	r3, r1
 8027fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8027fbe:	3301      	adds	r3, #1
 8027fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027fc4:	2b00      	cmp	r3, #0
 8027fc6:	bf0c      	ite	eq
 8027fc8:	2301      	moveq	r3, #1
 8027fca:	2300      	movne	r3, #0
 8027fcc:	b2db      	uxtb	r3, r3
 8027fce:	2b00      	cmp	r3, #0
 8027fd0:	d001      	beq.n	8027fd6 <HAL_I2C_Init+0x17e>
 8027fd2:	2301      	movs	r3, #1
 8027fd4:	e022      	b.n	802801c <HAL_I2C_Init+0x1c4>
 8027fd6:	687b      	ldr	r3, [r7, #4]
 8027fd8:	689b      	ldr	r3, [r3, #8]
 8027fda:	2b00      	cmp	r3, #0
 8027fdc:	d10e      	bne.n	8027ffc <HAL_I2C_Init+0x1a4>
 8027fde:	68fb      	ldr	r3, [r7, #12]
 8027fe0:	1e58      	subs	r0, r3, #1
 8027fe2:	687b      	ldr	r3, [r7, #4]
 8027fe4:	6859      	ldr	r1, [r3, #4]
 8027fe6:	460b      	mov	r3, r1
 8027fe8:	005b      	lsls	r3, r3, #1
 8027fea:	440b      	add	r3, r1
 8027fec:	fbb0 f3f3 	udiv	r3, r0, r3
 8027ff0:	3301      	adds	r3, #1
 8027ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8027ffa:	e00f      	b.n	802801c <HAL_I2C_Init+0x1c4>
 8027ffc:	68fb      	ldr	r3, [r7, #12]
 8027ffe:	1e58      	subs	r0, r3, #1
 8028000:	687b      	ldr	r3, [r7, #4]
 8028002:	6859      	ldr	r1, [r3, #4]
 8028004:	460b      	mov	r3, r1
 8028006:	009b      	lsls	r3, r3, #2
 8028008:	440b      	add	r3, r1
 802800a:	0099      	lsls	r1, r3, #2
 802800c:	440b      	add	r3, r1
 802800e:	fbb0 f3f3 	udiv	r3, r0, r3
 8028012:	3301      	adds	r3, #1
 8028014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028018:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 802801c:	6879      	ldr	r1, [r7, #4]
 802801e:	6809      	ldr	r1, [r1, #0]
 8028020:	4313      	orrs	r3, r2
 8028022:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8028024:	687b      	ldr	r3, [r7, #4]
 8028026:	681b      	ldr	r3, [r3, #0]
 8028028:	681b      	ldr	r3, [r3, #0]
 802802a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 802802e:	687b      	ldr	r3, [r7, #4]
 8028030:	69da      	ldr	r2, [r3, #28]
 8028032:	687b      	ldr	r3, [r7, #4]
 8028034:	6a1b      	ldr	r3, [r3, #32]
 8028036:	431a      	orrs	r2, r3
 8028038:	687b      	ldr	r3, [r7, #4]
 802803a:	681b      	ldr	r3, [r3, #0]
 802803c:	430a      	orrs	r2, r1
 802803e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8028040:	687b      	ldr	r3, [r7, #4]
 8028042:	681b      	ldr	r3, [r3, #0]
 8028044:	689b      	ldr	r3, [r3, #8]
 8028046:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 802804a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 802804e:	687a      	ldr	r2, [r7, #4]
 8028050:	6911      	ldr	r1, [r2, #16]
 8028052:	687a      	ldr	r2, [r7, #4]
 8028054:	68d2      	ldr	r2, [r2, #12]
 8028056:	4311      	orrs	r1, r2
 8028058:	687a      	ldr	r2, [r7, #4]
 802805a:	6812      	ldr	r2, [r2, #0]
 802805c:	430b      	orrs	r3, r1
 802805e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8028060:	687b      	ldr	r3, [r7, #4]
 8028062:	681b      	ldr	r3, [r3, #0]
 8028064:	68db      	ldr	r3, [r3, #12]
 8028066:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 802806a:	687b      	ldr	r3, [r7, #4]
 802806c:	695a      	ldr	r2, [r3, #20]
 802806e:	687b      	ldr	r3, [r7, #4]
 8028070:	699b      	ldr	r3, [r3, #24]
 8028072:	431a      	orrs	r2, r3
 8028074:	687b      	ldr	r3, [r7, #4]
 8028076:	681b      	ldr	r3, [r3, #0]
 8028078:	430a      	orrs	r2, r1
 802807a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 802807c:	687b      	ldr	r3, [r7, #4]
 802807e:	681b      	ldr	r3, [r3, #0]
 8028080:	681a      	ldr	r2, [r3, #0]
 8028082:	687b      	ldr	r3, [r7, #4]
 8028084:	681b      	ldr	r3, [r3, #0]
 8028086:	f042 0201 	orr.w	r2, r2, #1
 802808a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 802808c:	687b      	ldr	r3, [r7, #4]
 802808e:	2200      	movs	r2, #0
 8028090:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8028092:	687b      	ldr	r3, [r7, #4]
 8028094:	2220      	movs	r2, #32
 8028096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 802809a:	687b      	ldr	r3, [r7, #4]
 802809c:	2200      	movs	r2, #0
 802809e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80280a0:	687b      	ldr	r3, [r7, #4]
 80280a2:	2200      	movs	r2, #0
 80280a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80280a8:	2300      	movs	r3, #0
}
 80280aa:	4618      	mov	r0, r3
 80280ac:	3710      	adds	r7, #16
 80280ae:	46bd      	mov	sp, r7
 80280b0:	bd80      	pop	{r7, pc}
 80280b2:	bf00      	nop
 80280b4:	000186a0 	.word	0x000186a0
 80280b8:	001e847f 	.word	0x001e847f
 80280bc:	003d08ff 	.word	0x003d08ff
 80280c0:	431bde83 	.word	0x431bde83
 80280c4:	10624dd3 	.word	0x10624dd3

080280c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80280c8:	b580      	push	{r7, lr}
 80280ca:	b086      	sub	sp, #24
 80280cc:	af00      	add	r7, sp, #0
 80280ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80280d0:	687b      	ldr	r3, [r7, #4]
 80280d2:	2b00      	cmp	r3, #0
 80280d4:	d101      	bne.n	80280da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80280d6:	2301      	movs	r3, #1
 80280d8:	e25b      	b.n	8028592 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80280da:	687b      	ldr	r3, [r7, #4]
 80280dc:	681b      	ldr	r3, [r3, #0]
 80280de:	f003 0301 	and.w	r3, r3, #1
 80280e2:	2b00      	cmp	r3, #0
 80280e4:	d075      	beq.n	80281d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80280e6:	4ba3      	ldr	r3, [pc, #652]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 80280e8:	689b      	ldr	r3, [r3, #8]
 80280ea:	f003 030c 	and.w	r3, r3, #12
 80280ee:	2b04      	cmp	r3, #4
 80280f0:	d00c      	beq.n	802810c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80280f2:	4ba0      	ldr	r3, [pc, #640]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 80280f4:	689b      	ldr	r3, [r3, #8]
 80280f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80280fa:	2b08      	cmp	r3, #8
 80280fc:	d112      	bne.n	8028124 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80280fe:	4b9d      	ldr	r3, [pc, #628]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 8028100:	685b      	ldr	r3, [r3, #4]
 8028102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8028106:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802810a:	d10b      	bne.n	8028124 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802810c:	4b99      	ldr	r3, [pc, #612]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 802810e:	681b      	ldr	r3, [r3, #0]
 8028110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028114:	2b00      	cmp	r3, #0
 8028116:	d05b      	beq.n	80281d0 <HAL_RCC_OscConfig+0x108>
 8028118:	687b      	ldr	r3, [r7, #4]
 802811a:	685b      	ldr	r3, [r3, #4]
 802811c:	2b00      	cmp	r3, #0
 802811e:	d157      	bne.n	80281d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8028120:	2301      	movs	r3, #1
 8028122:	e236      	b.n	8028592 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8028124:	687b      	ldr	r3, [r7, #4]
 8028126:	685b      	ldr	r3, [r3, #4]
 8028128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802812c:	d106      	bne.n	802813c <HAL_RCC_OscConfig+0x74>
 802812e:	4b91      	ldr	r3, [pc, #580]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 8028130:	681b      	ldr	r3, [r3, #0]
 8028132:	4a90      	ldr	r2, [pc, #576]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 8028134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8028138:	6013      	str	r3, [r2, #0]
 802813a:	e01d      	b.n	8028178 <HAL_RCC_OscConfig+0xb0>
 802813c:	687b      	ldr	r3, [r7, #4]
 802813e:	685b      	ldr	r3, [r3, #4]
 8028140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8028144:	d10c      	bne.n	8028160 <HAL_RCC_OscConfig+0x98>
 8028146:	4b8b      	ldr	r3, [pc, #556]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 8028148:	681b      	ldr	r3, [r3, #0]
 802814a:	4a8a      	ldr	r2, [pc, #552]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 802814c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8028150:	6013      	str	r3, [r2, #0]
 8028152:	4b88      	ldr	r3, [pc, #544]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 8028154:	681b      	ldr	r3, [r3, #0]
 8028156:	4a87      	ldr	r2, [pc, #540]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 8028158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802815c:	6013      	str	r3, [r2, #0]
 802815e:	e00b      	b.n	8028178 <HAL_RCC_OscConfig+0xb0>
 8028160:	4b84      	ldr	r3, [pc, #528]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 8028162:	681b      	ldr	r3, [r3, #0]
 8028164:	4a83      	ldr	r2, [pc, #524]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 8028166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802816a:	6013      	str	r3, [r2, #0]
 802816c:	4b81      	ldr	r3, [pc, #516]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 802816e:	681b      	ldr	r3, [r3, #0]
 8028170:	4a80      	ldr	r2, [pc, #512]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 8028172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8028176:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8028178:	687b      	ldr	r3, [r7, #4]
 802817a:	685b      	ldr	r3, [r3, #4]
 802817c:	2b00      	cmp	r3, #0
 802817e:	d013      	beq.n	80281a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028180:	f7fe f926 	bl	80263d0 <HAL_GetTick>
 8028184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8028186:	e008      	b.n	802819a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8028188:	f7fe f922 	bl	80263d0 <HAL_GetTick>
 802818c:	4602      	mov	r2, r0
 802818e:	693b      	ldr	r3, [r7, #16]
 8028190:	1ad3      	subs	r3, r2, r3
 8028192:	2b64      	cmp	r3, #100	; 0x64
 8028194:	d901      	bls.n	802819a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8028196:	2303      	movs	r3, #3
 8028198:	e1fb      	b.n	8028592 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802819a:	4b76      	ldr	r3, [pc, #472]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 802819c:	681b      	ldr	r3, [r3, #0]
 802819e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80281a2:	2b00      	cmp	r3, #0
 80281a4:	d0f0      	beq.n	8028188 <HAL_RCC_OscConfig+0xc0>
 80281a6:	e014      	b.n	80281d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80281a8:	f7fe f912 	bl	80263d0 <HAL_GetTick>
 80281ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80281ae:	e008      	b.n	80281c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80281b0:	f7fe f90e 	bl	80263d0 <HAL_GetTick>
 80281b4:	4602      	mov	r2, r0
 80281b6:	693b      	ldr	r3, [r7, #16]
 80281b8:	1ad3      	subs	r3, r2, r3
 80281ba:	2b64      	cmp	r3, #100	; 0x64
 80281bc:	d901      	bls.n	80281c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80281be:	2303      	movs	r3, #3
 80281c0:	e1e7      	b.n	8028592 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80281c2:	4b6c      	ldr	r3, [pc, #432]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 80281c4:	681b      	ldr	r3, [r3, #0]
 80281c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80281ca:	2b00      	cmp	r3, #0
 80281cc:	d1f0      	bne.n	80281b0 <HAL_RCC_OscConfig+0xe8>
 80281ce:	e000      	b.n	80281d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80281d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80281d2:	687b      	ldr	r3, [r7, #4]
 80281d4:	681b      	ldr	r3, [r3, #0]
 80281d6:	f003 0302 	and.w	r3, r3, #2
 80281da:	2b00      	cmp	r3, #0
 80281dc:	d063      	beq.n	80282a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80281de:	4b65      	ldr	r3, [pc, #404]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 80281e0:	689b      	ldr	r3, [r3, #8]
 80281e2:	f003 030c 	and.w	r3, r3, #12
 80281e6:	2b00      	cmp	r3, #0
 80281e8:	d00b      	beq.n	8028202 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80281ea:	4b62      	ldr	r3, [pc, #392]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 80281ec:	689b      	ldr	r3, [r3, #8]
 80281ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80281f2:	2b08      	cmp	r3, #8
 80281f4:	d11c      	bne.n	8028230 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80281f6:	4b5f      	ldr	r3, [pc, #380]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 80281f8:	685b      	ldr	r3, [r3, #4]
 80281fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80281fe:	2b00      	cmp	r3, #0
 8028200:	d116      	bne.n	8028230 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8028202:	4b5c      	ldr	r3, [pc, #368]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 8028204:	681b      	ldr	r3, [r3, #0]
 8028206:	f003 0302 	and.w	r3, r3, #2
 802820a:	2b00      	cmp	r3, #0
 802820c:	d005      	beq.n	802821a <HAL_RCC_OscConfig+0x152>
 802820e:	687b      	ldr	r3, [r7, #4]
 8028210:	68db      	ldr	r3, [r3, #12]
 8028212:	2b01      	cmp	r3, #1
 8028214:	d001      	beq.n	802821a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8028216:	2301      	movs	r3, #1
 8028218:	e1bb      	b.n	8028592 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802821a:	4b56      	ldr	r3, [pc, #344]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 802821c:	681b      	ldr	r3, [r3, #0]
 802821e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8028222:	687b      	ldr	r3, [r7, #4]
 8028224:	691b      	ldr	r3, [r3, #16]
 8028226:	00db      	lsls	r3, r3, #3
 8028228:	4952      	ldr	r1, [pc, #328]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 802822a:	4313      	orrs	r3, r2
 802822c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 802822e:	e03a      	b.n	80282a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8028230:	687b      	ldr	r3, [r7, #4]
 8028232:	68db      	ldr	r3, [r3, #12]
 8028234:	2b00      	cmp	r3, #0
 8028236:	d020      	beq.n	802827a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8028238:	4b4f      	ldr	r3, [pc, #316]	; (8028378 <HAL_RCC_OscConfig+0x2b0>)
 802823a:	2201      	movs	r2, #1
 802823c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802823e:	f7fe f8c7 	bl	80263d0 <HAL_GetTick>
 8028242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8028244:	e008      	b.n	8028258 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8028246:	f7fe f8c3 	bl	80263d0 <HAL_GetTick>
 802824a:	4602      	mov	r2, r0
 802824c:	693b      	ldr	r3, [r7, #16]
 802824e:	1ad3      	subs	r3, r2, r3
 8028250:	2b02      	cmp	r3, #2
 8028252:	d901      	bls.n	8028258 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8028254:	2303      	movs	r3, #3
 8028256:	e19c      	b.n	8028592 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8028258:	4b46      	ldr	r3, [pc, #280]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 802825a:	681b      	ldr	r3, [r3, #0]
 802825c:	f003 0302 	and.w	r3, r3, #2
 8028260:	2b00      	cmp	r3, #0
 8028262:	d0f0      	beq.n	8028246 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8028264:	4b43      	ldr	r3, [pc, #268]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 8028266:	681b      	ldr	r3, [r3, #0]
 8028268:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 802826c:	687b      	ldr	r3, [r7, #4]
 802826e:	691b      	ldr	r3, [r3, #16]
 8028270:	00db      	lsls	r3, r3, #3
 8028272:	4940      	ldr	r1, [pc, #256]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 8028274:	4313      	orrs	r3, r2
 8028276:	600b      	str	r3, [r1, #0]
 8028278:	e015      	b.n	80282a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802827a:	4b3f      	ldr	r3, [pc, #252]	; (8028378 <HAL_RCC_OscConfig+0x2b0>)
 802827c:	2200      	movs	r2, #0
 802827e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8028280:	f7fe f8a6 	bl	80263d0 <HAL_GetTick>
 8028284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8028286:	e008      	b.n	802829a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8028288:	f7fe f8a2 	bl	80263d0 <HAL_GetTick>
 802828c:	4602      	mov	r2, r0
 802828e:	693b      	ldr	r3, [r7, #16]
 8028290:	1ad3      	subs	r3, r2, r3
 8028292:	2b02      	cmp	r3, #2
 8028294:	d901      	bls.n	802829a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8028296:	2303      	movs	r3, #3
 8028298:	e17b      	b.n	8028592 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802829a:	4b36      	ldr	r3, [pc, #216]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 802829c:	681b      	ldr	r3, [r3, #0]
 802829e:	f003 0302 	and.w	r3, r3, #2
 80282a2:	2b00      	cmp	r3, #0
 80282a4:	d1f0      	bne.n	8028288 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80282a6:	687b      	ldr	r3, [r7, #4]
 80282a8:	681b      	ldr	r3, [r3, #0]
 80282aa:	f003 0308 	and.w	r3, r3, #8
 80282ae:	2b00      	cmp	r3, #0
 80282b0:	d030      	beq.n	8028314 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80282b2:	687b      	ldr	r3, [r7, #4]
 80282b4:	695b      	ldr	r3, [r3, #20]
 80282b6:	2b00      	cmp	r3, #0
 80282b8:	d016      	beq.n	80282e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80282ba:	4b30      	ldr	r3, [pc, #192]	; (802837c <HAL_RCC_OscConfig+0x2b4>)
 80282bc:	2201      	movs	r2, #1
 80282be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80282c0:	f7fe f886 	bl	80263d0 <HAL_GetTick>
 80282c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80282c6:	e008      	b.n	80282da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80282c8:	f7fe f882 	bl	80263d0 <HAL_GetTick>
 80282cc:	4602      	mov	r2, r0
 80282ce:	693b      	ldr	r3, [r7, #16]
 80282d0:	1ad3      	subs	r3, r2, r3
 80282d2:	2b02      	cmp	r3, #2
 80282d4:	d901      	bls.n	80282da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80282d6:	2303      	movs	r3, #3
 80282d8:	e15b      	b.n	8028592 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80282da:	4b26      	ldr	r3, [pc, #152]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 80282dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80282de:	f003 0302 	and.w	r3, r3, #2
 80282e2:	2b00      	cmp	r3, #0
 80282e4:	d0f0      	beq.n	80282c8 <HAL_RCC_OscConfig+0x200>
 80282e6:	e015      	b.n	8028314 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80282e8:	4b24      	ldr	r3, [pc, #144]	; (802837c <HAL_RCC_OscConfig+0x2b4>)
 80282ea:	2200      	movs	r2, #0
 80282ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80282ee:	f7fe f86f 	bl	80263d0 <HAL_GetTick>
 80282f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80282f4:	e008      	b.n	8028308 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80282f6:	f7fe f86b 	bl	80263d0 <HAL_GetTick>
 80282fa:	4602      	mov	r2, r0
 80282fc:	693b      	ldr	r3, [r7, #16]
 80282fe:	1ad3      	subs	r3, r2, r3
 8028300:	2b02      	cmp	r3, #2
 8028302:	d901      	bls.n	8028308 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8028304:	2303      	movs	r3, #3
 8028306:	e144      	b.n	8028592 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8028308:	4b1a      	ldr	r3, [pc, #104]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 802830a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802830c:	f003 0302 	and.w	r3, r3, #2
 8028310:	2b00      	cmp	r3, #0
 8028312:	d1f0      	bne.n	80282f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8028314:	687b      	ldr	r3, [r7, #4]
 8028316:	681b      	ldr	r3, [r3, #0]
 8028318:	f003 0304 	and.w	r3, r3, #4
 802831c:	2b00      	cmp	r3, #0
 802831e:	f000 80a0 	beq.w	8028462 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8028322:	2300      	movs	r3, #0
 8028324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8028326:	4b13      	ldr	r3, [pc, #76]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 8028328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802832a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802832e:	2b00      	cmp	r3, #0
 8028330:	d10f      	bne.n	8028352 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8028332:	2300      	movs	r3, #0
 8028334:	60bb      	str	r3, [r7, #8]
 8028336:	4b0f      	ldr	r3, [pc, #60]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 8028338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802833a:	4a0e      	ldr	r2, [pc, #56]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 802833c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8028340:	6413      	str	r3, [r2, #64]	; 0x40
 8028342:	4b0c      	ldr	r3, [pc, #48]	; (8028374 <HAL_RCC_OscConfig+0x2ac>)
 8028344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802834a:	60bb      	str	r3, [r7, #8]
 802834c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 802834e:	2301      	movs	r3, #1
 8028350:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8028352:	4b0b      	ldr	r3, [pc, #44]	; (8028380 <HAL_RCC_OscConfig+0x2b8>)
 8028354:	681b      	ldr	r3, [r3, #0]
 8028356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802835a:	2b00      	cmp	r3, #0
 802835c:	d121      	bne.n	80283a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 802835e:	4b08      	ldr	r3, [pc, #32]	; (8028380 <HAL_RCC_OscConfig+0x2b8>)
 8028360:	681b      	ldr	r3, [r3, #0]
 8028362:	4a07      	ldr	r2, [pc, #28]	; (8028380 <HAL_RCC_OscConfig+0x2b8>)
 8028364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8028368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 802836a:	f7fe f831 	bl	80263d0 <HAL_GetTick>
 802836e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8028370:	e011      	b.n	8028396 <HAL_RCC_OscConfig+0x2ce>
 8028372:	bf00      	nop
 8028374:	40023800 	.word	0x40023800
 8028378:	42470000 	.word	0x42470000
 802837c:	42470e80 	.word	0x42470e80
 8028380:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8028384:	f7fe f824 	bl	80263d0 <HAL_GetTick>
 8028388:	4602      	mov	r2, r0
 802838a:	693b      	ldr	r3, [r7, #16]
 802838c:	1ad3      	subs	r3, r2, r3
 802838e:	2b02      	cmp	r3, #2
 8028390:	d901      	bls.n	8028396 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8028392:	2303      	movs	r3, #3
 8028394:	e0fd      	b.n	8028592 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8028396:	4b81      	ldr	r3, [pc, #516]	; (802859c <HAL_RCC_OscConfig+0x4d4>)
 8028398:	681b      	ldr	r3, [r3, #0]
 802839a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802839e:	2b00      	cmp	r3, #0
 80283a0:	d0f0      	beq.n	8028384 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80283a2:	687b      	ldr	r3, [r7, #4]
 80283a4:	689b      	ldr	r3, [r3, #8]
 80283a6:	2b01      	cmp	r3, #1
 80283a8:	d106      	bne.n	80283b8 <HAL_RCC_OscConfig+0x2f0>
 80283aa:	4b7d      	ldr	r3, [pc, #500]	; (80285a0 <HAL_RCC_OscConfig+0x4d8>)
 80283ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80283ae:	4a7c      	ldr	r2, [pc, #496]	; (80285a0 <HAL_RCC_OscConfig+0x4d8>)
 80283b0:	f043 0301 	orr.w	r3, r3, #1
 80283b4:	6713      	str	r3, [r2, #112]	; 0x70
 80283b6:	e01c      	b.n	80283f2 <HAL_RCC_OscConfig+0x32a>
 80283b8:	687b      	ldr	r3, [r7, #4]
 80283ba:	689b      	ldr	r3, [r3, #8]
 80283bc:	2b05      	cmp	r3, #5
 80283be:	d10c      	bne.n	80283da <HAL_RCC_OscConfig+0x312>
 80283c0:	4b77      	ldr	r3, [pc, #476]	; (80285a0 <HAL_RCC_OscConfig+0x4d8>)
 80283c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80283c4:	4a76      	ldr	r2, [pc, #472]	; (80285a0 <HAL_RCC_OscConfig+0x4d8>)
 80283c6:	f043 0304 	orr.w	r3, r3, #4
 80283ca:	6713      	str	r3, [r2, #112]	; 0x70
 80283cc:	4b74      	ldr	r3, [pc, #464]	; (80285a0 <HAL_RCC_OscConfig+0x4d8>)
 80283ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80283d0:	4a73      	ldr	r2, [pc, #460]	; (80285a0 <HAL_RCC_OscConfig+0x4d8>)
 80283d2:	f043 0301 	orr.w	r3, r3, #1
 80283d6:	6713      	str	r3, [r2, #112]	; 0x70
 80283d8:	e00b      	b.n	80283f2 <HAL_RCC_OscConfig+0x32a>
 80283da:	4b71      	ldr	r3, [pc, #452]	; (80285a0 <HAL_RCC_OscConfig+0x4d8>)
 80283dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80283de:	4a70      	ldr	r2, [pc, #448]	; (80285a0 <HAL_RCC_OscConfig+0x4d8>)
 80283e0:	f023 0301 	bic.w	r3, r3, #1
 80283e4:	6713      	str	r3, [r2, #112]	; 0x70
 80283e6:	4b6e      	ldr	r3, [pc, #440]	; (80285a0 <HAL_RCC_OscConfig+0x4d8>)
 80283e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80283ea:	4a6d      	ldr	r2, [pc, #436]	; (80285a0 <HAL_RCC_OscConfig+0x4d8>)
 80283ec:	f023 0304 	bic.w	r3, r3, #4
 80283f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80283f2:	687b      	ldr	r3, [r7, #4]
 80283f4:	689b      	ldr	r3, [r3, #8]
 80283f6:	2b00      	cmp	r3, #0
 80283f8:	d015      	beq.n	8028426 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80283fa:	f7fd ffe9 	bl	80263d0 <HAL_GetTick>
 80283fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8028400:	e00a      	b.n	8028418 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8028402:	f7fd ffe5 	bl	80263d0 <HAL_GetTick>
 8028406:	4602      	mov	r2, r0
 8028408:	693b      	ldr	r3, [r7, #16]
 802840a:	1ad3      	subs	r3, r2, r3
 802840c:	f241 3288 	movw	r2, #5000	; 0x1388
 8028410:	4293      	cmp	r3, r2
 8028412:	d901      	bls.n	8028418 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8028414:	2303      	movs	r3, #3
 8028416:	e0bc      	b.n	8028592 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8028418:	4b61      	ldr	r3, [pc, #388]	; (80285a0 <HAL_RCC_OscConfig+0x4d8>)
 802841a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802841c:	f003 0302 	and.w	r3, r3, #2
 8028420:	2b00      	cmp	r3, #0
 8028422:	d0ee      	beq.n	8028402 <HAL_RCC_OscConfig+0x33a>
 8028424:	e014      	b.n	8028450 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8028426:	f7fd ffd3 	bl	80263d0 <HAL_GetTick>
 802842a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802842c:	e00a      	b.n	8028444 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802842e:	f7fd ffcf 	bl	80263d0 <HAL_GetTick>
 8028432:	4602      	mov	r2, r0
 8028434:	693b      	ldr	r3, [r7, #16]
 8028436:	1ad3      	subs	r3, r2, r3
 8028438:	f241 3288 	movw	r2, #5000	; 0x1388
 802843c:	4293      	cmp	r3, r2
 802843e:	d901      	bls.n	8028444 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8028440:	2303      	movs	r3, #3
 8028442:	e0a6      	b.n	8028592 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8028444:	4b56      	ldr	r3, [pc, #344]	; (80285a0 <HAL_RCC_OscConfig+0x4d8>)
 8028446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028448:	f003 0302 	and.w	r3, r3, #2
 802844c:	2b00      	cmp	r3, #0
 802844e:	d1ee      	bne.n	802842e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8028450:	7dfb      	ldrb	r3, [r7, #23]
 8028452:	2b01      	cmp	r3, #1
 8028454:	d105      	bne.n	8028462 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8028456:	4b52      	ldr	r3, [pc, #328]	; (80285a0 <HAL_RCC_OscConfig+0x4d8>)
 8028458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802845a:	4a51      	ldr	r2, [pc, #324]	; (80285a0 <HAL_RCC_OscConfig+0x4d8>)
 802845c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8028460:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8028462:	687b      	ldr	r3, [r7, #4]
 8028464:	699b      	ldr	r3, [r3, #24]
 8028466:	2b00      	cmp	r3, #0
 8028468:	f000 8092 	beq.w	8028590 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 802846c:	4b4c      	ldr	r3, [pc, #304]	; (80285a0 <HAL_RCC_OscConfig+0x4d8>)
 802846e:	689b      	ldr	r3, [r3, #8]
 8028470:	f003 030c 	and.w	r3, r3, #12
 8028474:	2b08      	cmp	r3, #8
 8028476:	d05c      	beq.n	8028532 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8028478:	687b      	ldr	r3, [r7, #4]
 802847a:	699b      	ldr	r3, [r3, #24]
 802847c:	2b02      	cmp	r3, #2
 802847e:	d141      	bne.n	8028504 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8028480:	4b48      	ldr	r3, [pc, #288]	; (80285a4 <HAL_RCC_OscConfig+0x4dc>)
 8028482:	2200      	movs	r2, #0
 8028484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028486:	f7fd ffa3 	bl	80263d0 <HAL_GetTick>
 802848a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802848c:	e008      	b.n	80284a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802848e:	f7fd ff9f 	bl	80263d0 <HAL_GetTick>
 8028492:	4602      	mov	r2, r0
 8028494:	693b      	ldr	r3, [r7, #16]
 8028496:	1ad3      	subs	r3, r2, r3
 8028498:	2b02      	cmp	r3, #2
 802849a:	d901      	bls.n	80284a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 802849c:	2303      	movs	r3, #3
 802849e:	e078      	b.n	8028592 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80284a0:	4b3f      	ldr	r3, [pc, #252]	; (80285a0 <HAL_RCC_OscConfig+0x4d8>)
 80284a2:	681b      	ldr	r3, [r3, #0]
 80284a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80284a8:	2b00      	cmp	r3, #0
 80284aa:	d1f0      	bne.n	802848e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80284ac:	687b      	ldr	r3, [r7, #4]
 80284ae:	69da      	ldr	r2, [r3, #28]
 80284b0:	687b      	ldr	r3, [r7, #4]
 80284b2:	6a1b      	ldr	r3, [r3, #32]
 80284b4:	431a      	orrs	r2, r3
 80284b6:	687b      	ldr	r3, [r7, #4]
 80284b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80284ba:	019b      	lsls	r3, r3, #6
 80284bc:	431a      	orrs	r2, r3
 80284be:	687b      	ldr	r3, [r7, #4]
 80284c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80284c2:	085b      	lsrs	r3, r3, #1
 80284c4:	3b01      	subs	r3, #1
 80284c6:	041b      	lsls	r3, r3, #16
 80284c8:	431a      	orrs	r2, r3
 80284ca:	687b      	ldr	r3, [r7, #4]
 80284cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80284ce:	061b      	lsls	r3, r3, #24
 80284d0:	4933      	ldr	r1, [pc, #204]	; (80285a0 <HAL_RCC_OscConfig+0x4d8>)
 80284d2:	4313      	orrs	r3, r2
 80284d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80284d6:	4b33      	ldr	r3, [pc, #204]	; (80285a4 <HAL_RCC_OscConfig+0x4dc>)
 80284d8:	2201      	movs	r2, #1
 80284da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80284dc:	f7fd ff78 	bl	80263d0 <HAL_GetTick>
 80284e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80284e2:	e008      	b.n	80284f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80284e4:	f7fd ff74 	bl	80263d0 <HAL_GetTick>
 80284e8:	4602      	mov	r2, r0
 80284ea:	693b      	ldr	r3, [r7, #16]
 80284ec:	1ad3      	subs	r3, r2, r3
 80284ee:	2b02      	cmp	r3, #2
 80284f0:	d901      	bls.n	80284f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80284f2:	2303      	movs	r3, #3
 80284f4:	e04d      	b.n	8028592 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80284f6:	4b2a      	ldr	r3, [pc, #168]	; (80285a0 <HAL_RCC_OscConfig+0x4d8>)
 80284f8:	681b      	ldr	r3, [r3, #0]
 80284fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80284fe:	2b00      	cmp	r3, #0
 8028500:	d0f0      	beq.n	80284e4 <HAL_RCC_OscConfig+0x41c>
 8028502:	e045      	b.n	8028590 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8028504:	4b27      	ldr	r3, [pc, #156]	; (80285a4 <HAL_RCC_OscConfig+0x4dc>)
 8028506:	2200      	movs	r2, #0
 8028508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802850a:	f7fd ff61 	bl	80263d0 <HAL_GetTick>
 802850e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8028510:	e008      	b.n	8028524 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8028512:	f7fd ff5d 	bl	80263d0 <HAL_GetTick>
 8028516:	4602      	mov	r2, r0
 8028518:	693b      	ldr	r3, [r7, #16]
 802851a:	1ad3      	subs	r3, r2, r3
 802851c:	2b02      	cmp	r3, #2
 802851e:	d901      	bls.n	8028524 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8028520:	2303      	movs	r3, #3
 8028522:	e036      	b.n	8028592 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8028524:	4b1e      	ldr	r3, [pc, #120]	; (80285a0 <HAL_RCC_OscConfig+0x4d8>)
 8028526:	681b      	ldr	r3, [r3, #0]
 8028528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802852c:	2b00      	cmp	r3, #0
 802852e:	d1f0      	bne.n	8028512 <HAL_RCC_OscConfig+0x44a>
 8028530:	e02e      	b.n	8028590 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8028532:	687b      	ldr	r3, [r7, #4]
 8028534:	699b      	ldr	r3, [r3, #24]
 8028536:	2b01      	cmp	r3, #1
 8028538:	d101      	bne.n	802853e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 802853a:	2301      	movs	r3, #1
 802853c:	e029      	b.n	8028592 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 802853e:	4b18      	ldr	r3, [pc, #96]	; (80285a0 <HAL_RCC_OscConfig+0x4d8>)
 8028540:	685b      	ldr	r3, [r3, #4]
 8028542:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8028544:	68fb      	ldr	r3, [r7, #12]
 8028546:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 802854a:	687b      	ldr	r3, [r7, #4]
 802854c:	69db      	ldr	r3, [r3, #28]
 802854e:	429a      	cmp	r2, r3
 8028550:	d11c      	bne.n	802858c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8028552:	68fb      	ldr	r3, [r7, #12]
 8028554:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8028558:	687b      	ldr	r3, [r7, #4]
 802855a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802855c:	429a      	cmp	r2, r3
 802855e:	d115      	bne.n	802858c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8028560:	68fa      	ldr	r2, [r7, #12]
 8028562:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8028566:	4013      	ands	r3, r2
 8028568:	687a      	ldr	r2, [r7, #4]
 802856a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 802856c:	4293      	cmp	r3, r2
 802856e:	d10d      	bne.n	802858c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8028570:	68fb      	ldr	r3, [r7, #12]
 8028572:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8028576:	687b      	ldr	r3, [r7, #4]
 8028578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 802857a:	429a      	cmp	r2, r3
 802857c:	d106      	bne.n	802858c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 802857e:	68fb      	ldr	r3, [r7, #12]
 8028580:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8028584:	687b      	ldr	r3, [r7, #4]
 8028586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8028588:	429a      	cmp	r2, r3
 802858a:	d001      	beq.n	8028590 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 802858c:	2301      	movs	r3, #1
 802858e:	e000      	b.n	8028592 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8028590:	2300      	movs	r3, #0
}
 8028592:	4618      	mov	r0, r3
 8028594:	3718      	adds	r7, #24
 8028596:	46bd      	mov	sp, r7
 8028598:	bd80      	pop	{r7, pc}
 802859a:	bf00      	nop
 802859c:	40007000 	.word	0x40007000
 80285a0:	40023800 	.word	0x40023800
 80285a4:	42470060 	.word	0x42470060

080285a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80285a8:	b580      	push	{r7, lr}
 80285aa:	b084      	sub	sp, #16
 80285ac:	af00      	add	r7, sp, #0
 80285ae:	6078      	str	r0, [r7, #4]
 80285b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80285b2:	687b      	ldr	r3, [r7, #4]
 80285b4:	2b00      	cmp	r3, #0
 80285b6:	d101      	bne.n	80285bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80285b8:	2301      	movs	r3, #1
 80285ba:	e0cc      	b.n	8028756 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80285bc:	4b68      	ldr	r3, [pc, #416]	; (8028760 <HAL_RCC_ClockConfig+0x1b8>)
 80285be:	681b      	ldr	r3, [r3, #0]
 80285c0:	f003 030f 	and.w	r3, r3, #15
 80285c4:	683a      	ldr	r2, [r7, #0]
 80285c6:	429a      	cmp	r2, r3
 80285c8:	d90c      	bls.n	80285e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80285ca:	4b65      	ldr	r3, [pc, #404]	; (8028760 <HAL_RCC_ClockConfig+0x1b8>)
 80285cc:	683a      	ldr	r2, [r7, #0]
 80285ce:	b2d2      	uxtb	r2, r2
 80285d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80285d2:	4b63      	ldr	r3, [pc, #396]	; (8028760 <HAL_RCC_ClockConfig+0x1b8>)
 80285d4:	681b      	ldr	r3, [r3, #0]
 80285d6:	f003 030f 	and.w	r3, r3, #15
 80285da:	683a      	ldr	r2, [r7, #0]
 80285dc:	429a      	cmp	r2, r3
 80285de:	d001      	beq.n	80285e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80285e0:	2301      	movs	r3, #1
 80285e2:	e0b8      	b.n	8028756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80285e4:	687b      	ldr	r3, [r7, #4]
 80285e6:	681b      	ldr	r3, [r3, #0]
 80285e8:	f003 0302 	and.w	r3, r3, #2
 80285ec:	2b00      	cmp	r3, #0
 80285ee:	d020      	beq.n	8028632 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80285f0:	687b      	ldr	r3, [r7, #4]
 80285f2:	681b      	ldr	r3, [r3, #0]
 80285f4:	f003 0304 	and.w	r3, r3, #4
 80285f8:	2b00      	cmp	r3, #0
 80285fa:	d005      	beq.n	8028608 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80285fc:	4b59      	ldr	r3, [pc, #356]	; (8028764 <HAL_RCC_ClockConfig+0x1bc>)
 80285fe:	689b      	ldr	r3, [r3, #8]
 8028600:	4a58      	ldr	r2, [pc, #352]	; (8028764 <HAL_RCC_ClockConfig+0x1bc>)
 8028602:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8028606:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8028608:	687b      	ldr	r3, [r7, #4]
 802860a:	681b      	ldr	r3, [r3, #0]
 802860c:	f003 0308 	and.w	r3, r3, #8
 8028610:	2b00      	cmp	r3, #0
 8028612:	d005      	beq.n	8028620 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8028614:	4b53      	ldr	r3, [pc, #332]	; (8028764 <HAL_RCC_ClockConfig+0x1bc>)
 8028616:	689b      	ldr	r3, [r3, #8]
 8028618:	4a52      	ldr	r2, [pc, #328]	; (8028764 <HAL_RCC_ClockConfig+0x1bc>)
 802861a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 802861e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8028620:	4b50      	ldr	r3, [pc, #320]	; (8028764 <HAL_RCC_ClockConfig+0x1bc>)
 8028622:	689b      	ldr	r3, [r3, #8]
 8028624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8028628:	687b      	ldr	r3, [r7, #4]
 802862a:	689b      	ldr	r3, [r3, #8]
 802862c:	494d      	ldr	r1, [pc, #308]	; (8028764 <HAL_RCC_ClockConfig+0x1bc>)
 802862e:	4313      	orrs	r3, r2
 8028630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8028632:	687b      	ldr	r3, [r7, #4]
 8028634:	681b      	ldr	r3, [r3, #0]
 8028636:	f003 0301 	and.w	r3, r3, #1
 802863a:	2b00      	cmp	r3, #0
 802863c:	d044      	beq.n	80286c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802863e:	687b      	ldr	r3, [r7, #4]
 8028640:	685b      	ldr	r3, [r3, #4]
 8028642:	2b01      	cmp	r3, #1
 8028644:	d107      	bne.n	8028656 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8028646:	4b47      	ldr	r3, [pc, #284]	; (8028764 <HAL_RCC_ClockConfig+0x1bc>)
 8028648:	681b      	ldr	r3, [r3, #0]
 802864a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802864e:	2b00      	cmp	r3, #0
 8028650:	d119      	bne.n	8028686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8028652:	2301      	movs	r3, #1
 8028654:	e07f      	b.n	8028756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8028656:	687b      	ldr	r3, [r7, #4]
 8028658:	685b      	ldr	r3, [r3, #4]
 802865a:	2b02      	cmp	r3, #2
 802865c:	d003      	beq.n	8028666 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 802865e:	687b      	ldr	r3, [r7, #4]
 8028660:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8028662:	2b03      	cmp	r3, #3
 8028664:	d107      	bne.n	8028676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8028666:	4b3f      	ldr	r3, [pc, #252]	; (8028764 <HAL_RCC_ClockConfig+0x1bc>)
 8028668:	681b      	ldr	r3, [r3, #0]
 802866a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802866e:	2b00      	cmp	r3, #0
 8028670:	d109      	bne.n	8028686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8028672:	2301      	movs	r3, #1
 8028674:	e06f      	b.n	8028756 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8028676:	4b3b      	ldr	r3, [pc, #236]	; (8028764 <HAL_RCC_ClockConfig+0x1bc>)
 8028678:	681b      	ldr	r3, [r3, #0]
 802867a:	f003 0302 	and.w	r3, r3, #2
 802867e:	2b00      	cmp	r3, #0
 8028680:	d101      	bne.n	8028686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8028682:	2301      	movs	r3, #1
 8028684:	e067      	b.n	8028756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8028686:	4b37      	ldr	r3, [pc, #220]	; (8028764 <HAL_RCC_ClockConfig+0x1bc>)
 8028688:	689b      	ldr	r3, [r3, #8]
 802868a:	f023 0203 	bic.w	r2, r3, #3
 802868e:	687b      	ldr	r3, [r7, #4]
 8028690:	685b      	ldr	r3, [r3, #4]
 8028692:	4934      	ldr	r1, [pc, #208]	; (8028764 <HAL_RCC_ClockConfig+0x1bc>)
 8028694:	4313      	orrs	r3, r2
 8028696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8028698:	f7fd fe9a 	bl	80263d0 <HAL_GetTick>
 802869c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802869e:	e00a      	b.n	80286b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80286a0:	f7fd fe96 	bl	80263d0 <HAL_GetTick>
 80286a4:	4602      	mov	r2, r0
 80286a6:	68fb      	ldr	r3, [r7, #12]
 80286a8:	1ad3      	subs	r3, r2, r3
 80286aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80286ae:	4293      	cmp	r3, r2
 80286b0:	d901      	bls.n	80286b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80286b2:	2303      	movs	r3, #3
 80286b4:	e04f      	b.n	8028756 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80286b6:	4b2b      	ldr	r3, [pc, #172]	; (8028764 <HAL_RCC_ClockConfig+0x1bc>)
 80286b8:	689b      	ldr	r3, [r3, #8]
 80286ba:	f003 020c 	and.w	r2, r3, #12
 80286be:	687b      	ldr	r3, [r7, #4]
 80286c0:	685b      	ldr	r3, [r3, #4]
 80286c2:	009b      	lsls	r3, r3, #2
 80286c4:	429a      	cmp	r2, r3
 80286c6:	d1eb      	bne.n	80286a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80286c8:	4b25      	ldr	r3, [pc, #148]	; (8028760 <HAL_RCC_ClockConfig+0x1b8>)
 80286ca:	681b      	ldr	r3, [r3, #0]
 80286cc:	f003 030f 	and.w	r3, r3, #15
 80286d0:	683a      	ldr	r2, [r7, #0]
 80286d2:	429a      	cmp	r2, r3
 80286d4:	d20c      	bcs.n	80286f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80286d6:	4b22      	ldr	r3, [pc, #136]	; (8028760 <HAL_RCC_ClockConfig+0x1b8>)
 80286d8:	683a      	ldr	r2, [r7, #0]
 80286da:	b2d2      	uxtb	r2, r2
 80286dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80286de:	4b20      	ldr	r3, [pc, #128]	; (8028760 <HAL_RCC_ClockConfig+0x1b8>)
 80286e0:	681b      	ldr	r3, [r3, #0]
 80286e2:	f003 030f 	and.w	r3, r3, #15
 80286e6:	683a      	ldr	r2, [r7, #0]
 80286e8:	429a      	cmp	r2, r3
 80286ea:	d001      	beq.n	80286f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80286ec:	2301      	movs	r3, #1
 80286ee:	e032      	b.n	8028756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80286f0:	687b      	ldr	r3, [r7, #4]
 80286f2:	681b      	ldr	r3, [r3, #0]
 80286f4:	f003 0304 	and.w	r3, r3, #4
 80286f8:	2b00      	cmp	r3, #0
 80286fa:	d008      	beq.n	802870e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80286fc:	4b19      	ldr	r3, [pc, #100]	; (8028764 <HAL_RCC_ClockConfig+0x1bc>)
 80286fe:	689b      	ldr	r3, [r3, #8]
 8028700:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8028704:	687b      	ldr	r3, [r7, #4]
 8028706:	68db      	ldr	r3, [r3, #12]
 8028708:	4916      	ldr	r1, [pc, #88]	; (8028764 <HAL_RCC_ClockConfig+0x1bc>)
 802870a:	4313      	orrs	r3, r2
 802870c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802870e:	687b      	ldr	r3, [r7, #4]
 8028710:	681b      	ldr	r3, [r3, #0]
 8028712:	f003 0308 	and.w	r3, r3, #8
 8028716:	2b00      	cmp	r3, #0
 8028718:	d009      	beq.n	802872e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 802871a:	4b12      	ldr	r3, [pc, #72]	; (8028764 <HAL_RCC_ClockConfig+0x1bc>)
 802871c:	689b      	ldr	r3, [r3, #8]
 802871e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8028722:	687b      	ldr	r3, [r7, #4]
 8028724:	691b      	ldr	r3, [r3, #16]
 8028726:	00db      	lsls	r3, r3, #3
 8028728:	490e      	ldr	r1, [pc, #56]	; (8028764 <HAL_RCC_ClockConfig+0x1bc>)
 802872a:	4313      	orrs	r3, r2
 802872c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 802872e:	f000 f821 	bl	8028774 <HAL_RCC_GetSysClockFreq>
 8028732:	4601      	mov	r1, r0
 8028734:	4b0b      	ldr	r3, [pc, #44]	; (8028764 <HAL_RCC_ClockConfig+0x1bc>)
 8028736:	689b      	ldr	r3, [r3, #8]
 8028738:	091b      	lsrs	r3, r3, #4
 802873a:	f003 030f 	and.w	r3, r3, #15
 802873e:	4a0a      	ldr	r2, [pc, #40]	; (8028768 <HAL_RCC_ClockConfig+0x1c0>)
 8028740:	5cd3      	ldrb	r3, [r2, r3]
 8028742:	fa21 f303 	lsr.w	r3, r1, r3
 8028746:	4a09      	ldr	r2, [pc, #36]	; (802876c <HAL_RCC_ClockConfig+0x1c4>)
 8028748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 802874a:	4b09      	ldr	r3, [pc, #36]	; (8028770 <HAL_RCC_ClockConfig+0x1c8>)
 802874c:	681b      	ldr	r3, [r3, #0]
 802874e:	4618      	mov	r0, r3
 8028750:	f7fd fdfa 	bl	8026348 <HAL_InitTick>

  return HAL_OK;
 8028754:	2300      	movs	r3, #0
}
 8028756:	4618      	mov	r0, r3
 8028758:	3710      	adds	r7, #16
 802875a:	46bd      	mov	sp, r7
 802875c:	bd80      	pop	{r7, pc}
 802875e:	bf00      	nop
 8028760:	40023c00 	.word	0x40023c00
 8028764:	40023800 	.word	0x40023800
 8028768:	0802a4ac 	.word	0x0802a4ac
 802876c:	20000014 	.word	0x20000014
 8028770:	20000018 	.word	0x20000018

08028774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8028774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028776:	b085      	sub	sp, #20
 8028778:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 802877a:	2300      	movs	r3, #0
 802877c:	607b      	str	r3, [r7, #4]
 802877e:	2300      	movs	r3, #0
 8028780:	60fb      	str	r3, [r7, #12]
 8028782:	2300      	movs	r3, #0
 8028784:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8028786:	2300      	movs	r3, #0
 8028788:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 802878a:	4b50      	ldr	r3, [pc, #320]	; (80288cc <HAL_RCC_GetSysClockFreq+0x158>)
 802878c:	689b      	ldr	r3, [r3, #8]
 802878e:	f003 030c 	and.w	r3, r3, #12
 8028792:	2b04      	cmp	r3, #4
 8028794:	d007      	beq.n	80287a6 <HAL_RCC_GetSysClockFreq+0x32>
 8028796:	2b08      	cmp	r3, #8
 8028798:	d008      	beq.n	80287ac <HAL_RCC_GetSysClockFreq+0x38>
 802879a:	2b00      	cmp	r3, #0
 802879c:	f040 808d 	bne.w	80288ba <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80287a0:	4b4b      	ldr	r3, [pc, #300]	; (80288d0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80287a2:	60bb      	str	r3, [r7, #8]
       break;
 80287a4:	e08c      	b.n	80288c0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80287a6:	4b4b      	ldr	r3, [pc, #300]	; (80288d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80287a8:	60bb      	str	r3, [r7, #8]
      break;
 80287aa:	e089      	b.n	80288c0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80287ac:	4b47      	ldr	r3, [pc, #284]	; (80288cc <HAL_RCC_GetSysClockFreq+0x158>)
 80287ae:	685b      	ldr	r3, [r3, #4]
 80287b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80287b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80287b6:	4b45      	ldr	r3, [pc, #276]	; (80288cc <HAL_RCC_GetSysClockFreq+0x158>)
 80287b8:	685b      	ldr	r3, [r3, #4]
 80287ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80287be:	2b00      	cmp	r3, #0
 80287c0:	d023      	beq.n	802880a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80287c2:	4b42      	ldr	r3, [pc, #264]	; (80288cc <HAL_RCC_GetSysClockFreq+0x158>)
 80287c4:	685b      	ldr	r3, [r3, #4]
 80287c6:	099b      	lsrs	r3, r3, #6
 80287c8:	f04f 0400 	mov.w	r4, #0
 80287cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80287d0:	f04f 0200 	mov.w	r2, #0
 80287d4:	ea03 0501 	and.w	r5, r3, r1
 80287d8:	ea04 0602 	and.w	r6, r4, r2
 80287dc:	4a3d      	ldr	r2, [pc, #244]	; (80288d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80287de:	fb02 f106 	mul.w	r1, r2, r6
 80287e2:	2200      	movs	r2, #0
 80287e4:	fb02 f205 	mul.w	r2, r2, r5
 80287e8:	440a      	add	r2, r1
 80287ea:	493a      	ldr	r1, [pc, #232]	; (80288d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80287ec:	fba5 0101 	umull	r0, r1, r5, r1
 80287f0:	1853      	adds	r3, r2, r1
 80287f2:	4619      	mov	r1, r3
 80287f4:	687b      	ldr	r3, [r7, #4]
 80287f6:	f04f 0400 	mov.w	r4, #0
 80287fa:	461a      	mov	r2, r3
 80287fc:	4623      	mov	r3, r4
 80287fe:	f7f8 f8c5 	bl	802098c <__aeabi_uldivmod>
 8028802:	4603      	mov	r3, r0
 8028804:	460c      	mov	r4, r1
 8028806:	60fb      	str	r3, [r7, #12]
 8028808:	e049      	b.n	802889e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802880a:	4b30      	ldr	r3, [pc, #192]	; (80288cc <HAL_RCC_GetSysClockFreq+0x158>)
 802880c:	685b      	ldr	r3, [r3, #4]
 802880e:	099b      	lsrs	r3, r3, #6
 8028810:	f04f 0400 	mov.w	r4, #0
 8028814:	f240 11ff 	movw	r1, #511	; 0x1ff
 8028818:	f04f 0200 	mov.w	r2, #0
 802881c:	ea03 0501 	and.w	r5, r3, r1
 8028820:	ea04 0602 	and.w	r6, r4, r2
 8028824:	4629      	mov	r1, r5
 8028826:	4632      	mov	r2, r6
 8028828:	f04f 0300 	mov.w	r3, #0
 802882c:	f04f 0400 	mov.w	r4, #0
 8028830:	0154      	lsls	r4, r2, #5
 8028832:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8028836:	014b      	lsls	r3, r1, #5
 8028838:	4619      	mov	r1, r3
 802883a:	4622      	mov	r2, r4
 802883c:	1b49      	subs	r1, r1, r5
 802883e:	eb62 0206 	sbc.w	r2, r2, r6
 8028842:	f04f 0300 	mov.w	r3, #0
 8028846:	f04f 0400 	mov.w	r4, #0
 802884a:	0194      	lsls	r4, r2, #6
 802884c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8028850:	018b      	lsls	r3, r1, #6
 8028852:	1a5b      	subs	r3, r3, r1
 8028854:	eb64 0402 	sbc.w	r4, r4, r2
 8028858:	f04f 0100 	mov.w	r1, #0
 802885c:	f04f 0200 	mov.w	r2, #0
 8028860:	00e2      	lsls	r2, r4, #3
 8028862:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8028866:	00d9      	lsls	r1, r3, #3
 8028868:	460b      	mov	r3, r1
 802886a:	4614      	mov	r4, r2
 802886c:	195b      	adds	r3, r3, r5
 802886e:	eb44 0406 	adc.w	r4, r4, r6
 8028872:	f04f 0100 	mov.w	r1, #0
 8028876:	f04f 0200 	mov.w	r2, #0
 802887a:	02a2      	lsls	r2, r4, #10
 802887c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8028880:	0299      	lsls	r1, r3, #10
 8028882:	460b      	mov	r3, r1
 8028884:	4614      	mov	r4, r2
 8028886:	4618      	mov	r0, r3
 8028888:	4621      	mov	r1, r4
 802888a:	687b      	ldr	r3, [r7, #4]
 802888c:	f04f 0400 	mov.w	r4, #0
 8028890:	461a      	mov	r2, r3
 8028892:	4623      	mov	r3, r4
 8028894:	f7f8 f87a 	bl	802098c <__aeabi_uldivmod>
 8028898:	4603      	mov	r3, r0
 802889a:	460c      	mov	r4, r1
 802889c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 802889e:	4b0b      	ldr	r3, [pc, #44]	; (80288cc <HAL_RCC_GetSysClockFreq+0x158>)
 80288a0:	685b      	ldr	r3, [r3, #4]
 80288a2:	0c1b      	lsrs	r3, r3, #16
 80288a4:	f003 0303 	and.w	r3, r3, #3
 80288a8:	3301      	adds	r3, #1
 80288aa:	005b      	lsls	r3, r3, #1
 80288ac:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80288ae:	68fa      	ldr	r2, [r7, #12]
 80288b0:	683b      	ldr	r3, [r7, #0]
 80288b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80288b6:	60bb      	str	r3, [r7, #8]
      break;
 80288b8:	e002      	b.n	80288c0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80288ba:	4b05      	ldr	r3, [pc, #20]	; (80288d0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80288bc:	60bb      	str	r3, [r7, #8]
      break;
 80288be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80288c0:	68bb      	ldr	r3, [r7, #8]
}
 80288c2:	4618      	mov	r0, r3
 80288c4:	3714      	adds	r7, #20
 80288c6:	46bd      	mov	sp, r7
 80288c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80288ca:	bf00      	nop
 80288cc:	40023800 	.word	0x40023800
 80288d0:	00f42400 	.word	0x00f42400
 80288d4:	00b71b00 	.word	0x00b71b00

080288d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80288d8:	b480      	push	{r7}
 80288da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80288dc:	4b03      	ldr	r3, [pc, #12]	; (80288ec <HAL_RCC_GetHCLKFreq+0x14>)
 80288de:	681b      	ldr	r3, [r3, #0]
}
 80288e0:	4618      	mov	r0, r3
 80288e2:	46bd      	mov	sp, r7
 80288e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80288e8:	4770      	bx	lr
 80288ea:	bf00      	nop
 80288ec:	20000014 	.word	0x20000014

080288f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80288f0:	b580      	push	{r7, lr}
 80288f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80288f4:	f7ff fff0 	bl	80288d8 <HAL_RCC_GetHCLKFreq>
 80288f8:	4601      	mov	r1, r0
 80288fa:	4b05      	ldr	r3, [pc, #20]	; (8028910 <HAL_RCC_GetPCLK1Freq+0x20>)
 80288fc:	689b      	ldr	r3, [r3, #8]
 80288fe:	0a9b      	lsrs	r3, r3, #10
 8028900:	f003 0307 	and.w	r3, r3, #7
 8028904:	4a03      	ldr	r2, [pc, #12]	; (8028914 <HAL_RCC_GetPCLK1Freq+0x24>)
 8028906:	5cd3      	ldrb	r3, [r2, r3]
 8028908:	fa21 f303 	lsr.w	r3, r1, r3
}
 802890c:	4618      	mov	r0, r3
 802890e:	bd80      	pop	{r7, pc}
 8028910:	40023800 	.word	0x40023800
 8028914:	0802a4bc 	.word	0x0802a4bc

08028918 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8028918:	b580      	push	{r7, lr}
 802891a:	b082      	sub	sp, #8
 802891c:	af00      	add	r7, sp, #0
 802891e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8028920:	687b      	ldr	r3, [r7, #4]
 8028922:	2b00      	cmp	r3, #0
 8028924:	d101      	bne.n	802892a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8028926:	2301      	movs	r3, #1
 8028928:	e056      	b.n	80289d8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802892a:	687b      	ldr	r3, [r7, #4]
 802892c:	2200      	movs	r2, #0
 802892e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8028930:	687b      	ldr	r3, [r7, #4]
 8028932:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028936:	b2db      	uxtb	r3, r3
 8028938:	2b00      	cmp	r3, #0
 802893a:	d106      	bne.n	802894a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 802893c:	687b      	ldr	r3, [r7, #4]
 802893e:	2200      	movs	r2, #0
 8028940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8028944:	6878      	ldr	r0, [r7, #4]
 8028946:	f7fc ffab 	bl	80258a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 802894a:	687b      	ldr	r3, [r7, #4]
 802894c:	2202      	movs	r2, #2
 802894e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8028952:	687b      	ldr	r3, [r7, #4]
 8028954:	681b      	ldr	r3, [r3, #0]
 8028956:	681a      	ldr	r2, [r3, #0]
 8028958:	687b      	ldr	r3, [r7, #4]
 802895a:	681b      	ldr	r3, [r3, #0]
 802895c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028960:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8028962:	687b      	ldr	r3, [r7, #4]
 8028964:	685a      	ldr	r2, [r3, #4]
 8028966:	687b      	ldr	r3, [r7, #4]
 8028968:	689b      	ldr	r3, [r3, #8]
 802896a:	431a      	orrs	r2, r3
 802896c:	687b      	ldr	r3, [r7, #4]
 802896e:	68db      	ldr	r3, [r3, #12]
 8028970:	431a      	orrs	r2, r3
 8028972:	687b      	ldr	r3, [r7, #4]
 8028974:	691b      	ldr	r3, [r3, #16]
 8028976:	431a      	orrs	r2, r3
 8028978:	687b      	ldr	r3, [r7, #4]
 802897a:	695b      	ldr	r3, [r3, #20]
 802897c:	431a      	orrs	r2, r3
 802897e:	687b      	ldr	r3, [r7, #4]
 8028980:	699b      	ldr	r3, [r3, #24]
 8028982:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8028986:	431a      	orrs	r2, r3
 8028988:	687b      	ldr	r3, [r7, #4]
 802898a:	69db      	ldr	r3, [r3, #28]
 802898c:	431a      	orrs	r2, r3
 802898e:	687b      	ldr	r3, [r7, #4]
 8028990:	6a1b      	ldr	r3, [r3, #32]
 8028992:	ea42 0103 	orr.w	r1, r2, r3
 8028996:	687b      	ldr	r3, [r7, #4]
 8028998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802899a:	687b      	ldr	r3, [r7, #4]
 802899c:	681b      	ldr	r3, [r3, #0]
 802899e:	430a      	orrs	r2, r1
 80289a0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80289a2:	687b      	ldr	r3, [r7, #4]
 80289a4:	699b      	ldr	r3, [r3, #24]
 80289a6:	0c1b      	lsrs	r3, r3, #16
 80289a8:	f003 0104 	and.w	r1, r3, #4
 80289ac:	687b      	ldr	r3, [r7, #4]
 80289ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80289b0:	687b      	ldr	r3, [r7, #4]
 80289b2:	681b      	ldr	r3, [r3, #0]
 80289b4:	430a      	orrs	r2, r1
 80289b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80289b8:	687b      	ldr	r3, [r7, #4]
 80289ba:	681b      	ldr	r3, [r3, #0]
 80289bc:	69da      	ldr	r2, [r3, #28]
 80289be:	687b      	ldr	r3, [r7, #4]
 80289c0:	681b      	ldr	r3, [r3, #0]
 80289c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80289c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80289c8:	687b      	ldr	r3, [r7, #4]
 80289ca:	2200      	movs	r2, #0
 80289cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80289ce:	687b      	ldr	r3, [r7, #4]
 80289d0:	2201      	movs	r2, #1
 80289d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80289d6:	2300      	movs	r3, #0
}
 80289d8:	4618      	mov	r0, r3
 80289da:	3708      	adds	r7, #8
 80289dc:	46bd      	mov	sp, r7
 80289de:	bd80      	pop	{r7, pc}

080289e0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80289e0:	b580      	push	{r7, lr}
 80289e2:	b088      	sub	sp, #32
 80289e4:	af00      	add	r7, sp, #0
 80289e6:	60f8      	str	r0, [r7, #12]
 80289e8:	60b9      	str	r1, [r7, #8]
 80289ea:	603b      	str	r3, [r7, #0]
 80289ec:	4613      	mov	r3, r2
 80289ee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80289f0:	2300      	movs	r3, #0
 80289f2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80289f4:	68fb      	ldr	r3, [r7, #12]
 80289f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80289fa:	2b01      	cmp	r3, #1
 80289fc:	d101      	bne.n	8028a02 <HAL_SPI_Transmit+0x22>
 80289fe:	2302      	movs	r3, #2
 8028a00:	e11e      	b.n	8028c40 <HAL_SPI_Transmit+0x260>
 8028a02:	68fb      	ldr	r3, [r7, #12]
 8028a04:	2201      	movs	r2, #1
 8028a06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8028a0a:	f7fd fce1 	bl	80263d0 <HAL_GetTick>
 8028a0e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8028a10:	88fb      	ldrh	r3, [r7, #6]
 8028a12:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8028a14:	68fb      	ldr	r3, [r7, #12]
 8028a16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028a1a:	b2db      	uxtb	r3, r3
 8028a1c:	2b01      	cmp	r3, #1
 8028a1e:	d002      	beq.n	8028a26 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8028a20:	2302      	movs	r3, #2
 8028a22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8028a24:	e103      	b.n	8028c2e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8028a26:	68bb      	ldr	r3, [r7, #8]
 8028a28:	2b00      	cmp	r3, #0
 8028a2a:	d002      	beq.n	8028a32 <HAL_SPI_Transmit+0x52>
 8028a2c:	88fb      	ldrh	r3, [r7, #6]
 8028a2e:	2b00      	cmp	r3, #0
 8028a30:	d102      	bne.n	8028a38 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8028a32:	2301      	movs	r3, #1
 8028a34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8028a36:	e0fa      	b.n	8028c2e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8028a38:	68fb      	ldr	r3, [r7, #12]
 8028a3a:	2203      	movs	r2, #3
 8028a3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028a40:	68fb      	ldr	r3, [r7, #12]
 8028a42:	2200      	movs	r2, #0
 8028a44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8028a46:	68fb      	ldr	r3, [r7, #12]
 8028a48:	68ba      	ldr	r2, [r7, #8]
 8028a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8028a4c:	68fb      	ldr	r3, [r7, #12]
 8028a4e:	88fa      	ldrh	r2, [r7, #6]
 8028a50:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8028a52:	68fb      	ldr	r3, [r7, #12]
 8028a54:	88fa      	ldrh	r2, [r7, #6]
 8028a56:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8028a58:	68fb      	ldr	r3, [r7, #12]
 8028a5a:	2200      	movs	r2, #0
 8028a5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8028a5e:	68fb      	ldr	r3, [r7, #12]
 8028a60:	2200      	movs	r2, #0
 8028a62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8028a64:	68fb      	ldr	r3, [r7, #12]
 8028a66:	2200      	movs	r2, #0
 8028a68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8028a6a:	68fb      	ldr	r3, [r7, #12]
 8028a6c:	2200      	movs	r2, #0
 8028a6e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8028a70:	68fb      	ldr	r3, [r7, #12]
 8028a72:	2200      	movs	r2, #0
 8028a74:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028a76:	68fb      	ldr	r3, [r7, #12]
 8028a78:	689b      	ldr	r3, [r3, #8]
 8028a7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028a7e:	d107      	bne.n	8028a90 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8028a80:	68fb      	ldr	r3, [r7, #12]
 8028a82:	681b      	ldr	r3, [r3, #0]
 8028a84:	681a      	ldr	r2, [r3, #0]
 8028a86:	68fb      	ldr	r3, [r7, #12]
 8028a88:	681b      	ldr	r3, [r3, #0]
 8028a8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8028a8e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028a90:	68fb      	ldr	r3, [r7, #12]
 8028a92:	681b      	ldr	r3, [r3, #0]
 8028a94:	681b      	ldr	r3, [r3, #0]
 8028a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028a9a:	2b40      	cmp	r3, #64	; 0x40
 8028a9c:	d007      	beq.n	8028aae <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8028a9e:	68fb      	ldr	r3, [r7, #12]
 8028aa0:	681b      	ldr	r3, [r3, #0]
 8028aa2:	681a      	ldr	r2, [r3, #0]
 8028aa4:	68fb      	ldr	r3, [r7, #12]
 8028aa6:	681b      	ldr	r3, [r3, #0]
 8028aa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028aac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8028aae:	68fb      	ldr	r3, [r7, #12]
 8028ab0:	68db      	ldr	r3, [r3, #12]
 8028ab2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8028ab6:	d14b      	bne.n	8028b50 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028ab8:	68fb      	ldr	r3, [r7, #12]
 8028aba:	685b      	ldr	r3, [r3, #4]
 8028abc:	2b00      	cmp	r3, #0
 8028abe:	d002      	beq.n	8028ac6 <HAL_SPI_Transmit+0xe6>
 8028ac0:	8afb      	ldrh	r3, [r7, #22]
 8028ac2:	2b01      	cmp	r3, #1
 8028ac4:	d13e      	bne.n	8028b44 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028ac6:	68fb      	ldr	r3, [r7, #12]
 8028ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028aca:	881a      	ldrh	r2, [r3, #0]
 8028acc:	68fb      	ldr	r3, [r7, #12]
 8028ace:	681b      	ldr	r3, [r3, #0]
 8028ad0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8028ad2:	68fb      	ldr	r3, [r7, #12]
 8028ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028ad6:	1c9a      	adds	r2, r3, #2
 8028ad8:	68fb      	ldr	r3, [r7, #12]
 8028ada:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028adc:	68fb      	ldr	r3, [r7, #12]
 8028ade:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028ae0:	b29b      	uxth	r3, r3
 8028ae2:	3b01      	subs	r3, #1
 8028ae4:	b29a      	uxth	r2, r3
 8028ae6:	68fb      	ldr	r3, [r7, #12]
 8028ae8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8028aea:	e02b      	b.n	8028b44 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8028aec:	68fb      	ldr	r3, [r7, #12]
 8028aee:	681b      	ldr	r3, [r3, #0]
 8028af0:	689b      	ldr	r3, [r3, #8]
 8028af2:	f003 0302 	and.w	r3, r3, #2
 8028af6:	2b02      	cmp	r3, #2
 8028af8:	d112      	bne.n	8028b20 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028afa:	68fb      	ldr	r3, [r7, #12]
 8028afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028afe:	881a      	ldrh	r2, [r3, #0]
 8028b00:	68fb      	ldr	r3, [r7, #12]
 8028b02:	681b      	ldr	r3, [r3, #0]
 8028b04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8028b06:	68fb      	ldr	r3, [r7, #12]
 8028b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028b0a:	1c9a      	adds	r2, r3, #2
 8028b0c:	68fb      	ldr	r3, [r7, #12]
 8028b0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028b10:	68fb      	ldr	r3, [r7, #12]
 8028b12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028b14:	b29b      	uxth	r3, r3
 8028b16:	3b01      	subs	r3, #1
 8028b18:	b29a      	uxth	r2, r3
 8028b1a:	68fb      	ldr	r3, [r7, #12]
 8028b1c:	86da      	strh	r2, [r3, #54]	; 0x36
 8028b1e:	e011      	b.n	8028b44 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028b20:	f7fd fc56 	bl	80263d0 <HAL_GetTick>
 8028b24:	4602      	mov	r2, r0
 8028b26:	69bb      	ldr	r3, [r7, #24]
 8028b28:	1ad3      	subs	r3, r2, r3
 8028b2a:	683a      	ldr	r2, [r7, #0]
 8028b2c:	429a      	cmp	r2, r3
 8028b2e:	d803      	bhi.n	8028b38 <HAL_SPI_Transmit+0x158>
 8028b30:	683b      	ldr	r3, [r7, #0]
 8028b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028b36:	d102      	bne.n	8028b3e <HAL_SPI_Transmit+0x15e>
 8028b38:	683b      	ldr	r3, [r7, #0]
 8028b3a:	2b00      	cmp	r3, #0
 8028b3c:	d102      	bne.n	8028b44 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8028b3e:	2303      	movs	r3, #3
 8028b40:	77fb      	strb	r3, [r7, #31]
          goto error;
 8028b42:	e074      	b.n	8028c2e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8028b44:	68fb      	ldr	r3, [r7, #12]
 8028b46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028b48:	b29b      	uxth	r3, r3
 8028b4a:	2b00      	cmp	r3, #0
 8028b4c:	d1ce      	bne.n	8028aec <HAL_SPI_Transmit+0x10c>
 8028b4e:	e04c      	b.n	8028bea <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028b50:	68fb      	ldr	r3, [r7, #12]
 8028b52:	685b      	ldr	r3, [r3, #4]
 8028b54:	2b00      	cmp	r3, #0
 8028b56:	d002      	beq.n	8028b5e <HAL_SPI_Transmit+0x17e>
 8028b58:	8afb      	ldrh	r3, [r7, #22]
 8028b5a:	2b01      	cmp	r3, #1
 8028b5c:	d140      	bne.n	8028be0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8028b5e:	68fb      	ldr	r3, [r7, #12]
 8028b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028b62:	68fb      	ldr	r3, [r7, #12]
 8028b64:	681b      	ldr	r3, [r3, #0]
 8028b66:	330c      	adds	r3, #12
 8028b68:	7812      	ldrb	r2, [r2, #0]
 8028b6a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8028b6c:	68fb      	ldr	r3, [r7, #12]
 8028b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028b70:	1c5a      	adds	r2, r3, #1
 8028b72:	68fb      	ldr	r3, [r7, #12]
 8028b74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028b76:	68fb      	ldr	r3, [r7, #12]
 8028b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028b7a:	b29b      	uxth	r3, r3
 8028b7c:	3b01      	subs	r3, #1
 8028b7e:	b29a      	uxth	r2, r3
 8028b80:	68fb      	ldr	r3, [r7, #12]
 8028b82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8028b84:	e02c      	b.n	8028be0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8028b86:	68fb      	ldr	r3, [r7, #12]
 8028b88:	681b      	ldr	r3, [r3, #0]
 8028b8a:	689b      	ldr	r3, [r3, #8]
 8028b8c:	f003 0302 	and.w	r3, r3, #2
 8028b90:	2b02      	cmp	r3, #2
 8028b92:	d113      	bne.n	8028bbc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8028b94:	68fb      	ldr	r3, [r7, #12]
 8028b96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028b98:	68fb      	ldr	r3, [r7, #12]
 8028b9a:	681b      	ldr	r3, [r3, #0]
 8028b9c:	330c      	adds	r3, #12
 8028b9e:	7812      	ldrb	r2, [r2, #0]
 8028ba0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8028ba2:	68fb      	ldr	r3, [r7, #12]
 8028ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028ba6:	1c5a      	adds	r2, r3, #1
 8028ba8:	68fb      	ldr	r3, [r7, #12]
 8028baa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028bac:	68fb      	ldr	r3, [r7, #12]
 8028bae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028bb0:	b29b      	uxth	r3, r3
 8028bb2:	3b01      	subs	r3, #1
 8028bb4:	b29a      	uxth	r2, r3
 8028bb6:	68fb      	ldr	r3, [r7, #12]
 8028bb8:	86da      	strh	r2, [r3, #54]	; 0x36
 8028bba:	e011      	b.n	8028be0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028bbc:	f7fd fc08 	bl	80263d0 <HAL_GetTick>
 8028bc0:	4602      	mov	r2, r0
 8028bc2:	69bb      	ldr	r3, [r7, #24]
 8028bc4:	1ad3      	subs	r3, r2, r3
 8028bc6:	683a      	ldr	r2, [r7, #0]
 8028bc8:	429a      	cmp	r2, r3
 8028bca:	d803      	bhi.n	8028bd4 <HAL_SPI_Transmit+0x1f4>
 8028bcc:	683b      	ldr	r3, [r7, #0]
 8028bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028bd2:	d102      	bne.n	8028bda <HAL_SPI_Transmit+0x1fa>
 8028bd4:	683b      	ldr	r3, [r7, #0]
 8028bd6:	2b00      	cmp	r3, #0
 8028bd8:	d102      	bne.n	8028be0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8028bda:	2303      	movs	r3, #3
 8028bdc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8028bde:	e026      	b.n	8028c2e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8028be0:	68fb      	ldr	r3, [r7, #12]
 8028be2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028be4:	b29b      	uxth	r3, r3
 8028be6:	2b00      	cmp	r3, #0
 8028be8:	d1cd      	bne.n	8028b86 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028bea:	69ba      	ldr	r2, [r7, #24]
 8028bec:	6839      	ldr	r1, [r7, #0]
 8028bee:	68f8      	ldr	r0, [r7, #12]
 8028bf0:	f000 fba4 	bl	802933c <SPI_EndRxTxTransaction>
 8028bf4:	4603      	mov	r3, r0
 8028bf6:	2b00      	cmp	r3, #0
 8028bf8:	d002      	beq.n	8028c00 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028bfa:	68fb      	ldr	r3, [r7, #12]
 8028bfc:	2220      	movs	r2, #32
 8028bfe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8028c00:	68fb      	ldr	r3, [r7, #12]
 8028c02:	689b      	ldr	r3, [r3, #8]
 8028c04:	2b00      	cmp	r3, #0
 8028c06:	d10a      	bne.n	8028c1e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8028c08:	2300      	movs	r3, #0
 8028c0a:	613b      	str	r3, [r7, #16]
 8028c0c:	68fb      	ldr	r3, [r7, #12]
 8028c0e:	681b      	ldr	r3, [r3, #0]
 8028c10:	68db      	ldr	r3, [r3, #12]
 8028c12:	613b      	str	r3, [r7, #16]
 8028c14:	68fb      	ldr	r3, [r7, #12]
 8028c16:	681b      	ldr	r3, [r3, #0]
 8028c18:	689b      	ldr	r3, [r3, #8]
 8028c1a:	613b      	str	r3, [r7, #16]
 8028c1c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8028c1e:	68fb      	ldr	r3, [r7, #12]
 8028c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028c22:	2b00      	cmp	r3, #0
 8028c24:	d002      	beq.n	8028c2c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8028c26:	2301      	movs	r3, #1
 8028c28:	77fb      	strb	r3, [r7, #31]
 8028c2a:	e000      	b.n	8028c2e <HAL_SPI_Transmit+0x24e>
  }

error:
 8028c2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8028c2e:	68fb      	ldr	r3, [r7, #12]
 8028c30:	2201      	movs	r2, #1
 8028c32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8028c36:	68fb      	ldr	r3, [r7, #12]
 8028c38:	2200      	movs	r2, #0
 8028c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8028c3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8028c40:	4618      	mov	r0, r3
 8028c42:	3720      	adds	r7, #32
 8028c44:	46bd      	mov	sp, r7
 8028c46:	bd80      	pop	{r7, pc}

08028c48 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8028c48:	b580      	push	{r7, lr}
 8028c4a:	b088      	sub	sp, #32
 8028c4c:	af02      	add	r7, sp, #8
 8028c4e:	60f8      	str	r0, [r7, #12]
 8028c50:	60b9      	str	r1, [r7, #8]
 8028c52:	603b      	str	r3, [r7, #0]
 8028c54:	4613      	mov	r3, r2
 8028c56:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8028c58:	2300      	movs	r3, #0
 8028c5a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8028c5c:	68fb      	ldr	r3, [r7, #12]
 8028c5e:	685b      	ldr	r3, [r3, #4]
 8028c60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028c64:	d112      	bne.n	8028c8c <HAL_SPI_Receive+0x44>
 8028c66:	68fb      	ldr	r3, [r7, #12]
 8028c68:	689b      	ldr	r3, [r3, #8]
 8028c6a:	2b00      	cmp	r3, #0
 8028c6c:	d10e      	bne.n	8028c8c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8028c6e:	68fb      	ldr	r3, [r7, #12]
 8028c70:	2204      	movs	r2, #4
 8028c72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8028c76:	88fa      	ldrh	r2, [r7, #6]
 8028c78:	683b      	ldr	r3, [r7, #0]
 8028c7a:	9300      	str	r3, [sp, #0]
 8028c7c:	4613      	mov	r3, r2
 8028c7e:	68ba      	ldr	r2, [r7, #8]
 8028c80:	68b9      	ldr	r1, [r7, #8]
 8028c82:	68f8      	ldr	r0, [r7, #12]
 8028c84:	f000 f8e9 	bl	8028e5a <HAL_SPI_TransmitReceive>
 8028c88:	4603      	mov	r3, r0
 8028c8a:	e0e2      	b.n	8028e52 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8028c8c:	68fb      	ldr	r3, [r7, #12]
 8028c8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8028c92:	2b01      	cmp	r3, #1
 8028c94:	d101      	bne.n	8028c9a <HAL_SPI_Receive+0x52>
 8028c96:	2302      	movs	r3, #2
 8028c98:	e0db      	b.n	8028e52 <HAL_SPI_Receive+0x20a>
 8028c9a:	68fb      	ldr	r3, [r7, #12]
 8028c9c:	2201      	movs	r2, #1
 8028c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8028ca2:	f7fd fb95 	bl	80263d0 <HAL_GetTick>
 8028ca6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8028ca8:	68fb      	ldr	r3, [r7, #12]
 8028caa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028cae:	b2db      	uxtb	r3, r3
 8028cb0:	2b01      	cmp	r3, #1
 8028cb2:	d002      	beq.n	8028cba <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8028cb4:	2302      	movs	r3, #2
 8028cb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8028cb8:	e0c2      	b.n	8028e40 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8028cba:	68bb      	ldr	r3, [r7, #8]
 8028cbc:	2b00      	cmp	r3, #0
 8028cbe:	d002      	beq.n	8028cc6 <HAL_SPI_Receive+0x7e>
 8028cc0:	88fb      	ldrh	r3, [r7, #6]
 8028cc2:	2b00      	cmp	r3, #0
 8028cc4:	d102      	bne.n	8028ccc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8028cc6:	2301      	movs	r3, #1
 8028cc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8028cca:	e0b9      	b.n	8028e40 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8028ccc:	68fb      	ldr	r3, [r7, #12]
 8028cce:	2204      	movs	r2, #4
 8028cd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028cd4:	68fb      	ldr	r3, [r7, #12]
 8028cd6:	2200      	movs	r2, #0
 8028cd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8028cda:	68fb      	ldr	r3, [r7, #12]
 8028cdc:	68ba      	ldr	r2, [r7, #8]
 8028cde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8028ce0:	68fb      	ldr	r3, [r7, #12]
 8028ce2:	88fa      	ldrh	r2, [r7, #6]
 8028ce4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8028ce6:	68fb      	ldr	r3, [r7, #12]
 8028ce8:	88fa      	ldrh	r2, [r7, #6]
 8028cea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8028cec:	68fb      	ldr	r3, [r7, #12]
 8028cee:	2200      	movs	r2, #0
 8028cf0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8028cf2:	68fb      	ldr	r3, [r7, #12]
 8028cf4:	2200      	movs	r2, #0
 8028cf6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8028cf8:	68fb      	ldr	r3, [r7, #12]
 8028cfa:	2200      	movs	r2, #0
 8028cfc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8028cfe:	68fb      	ldr	r3, [r7, #12]
 8028d00:	2200      	movs	r2, #0
 8028d02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8028d04:	68fb      	ldr	r3, [r7, #12]
 8028d06:	2200      	movs	r2, #0
 8028d08:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028d0a:	68fb      	ldr	r3, [r7, #12]
 8028d0c:	689b      	ldr	r3, [r3, #8]
 8028d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028d12:	d107      	bne.n	8028d24 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8028d14:	68fb      	ldr	r3, [r7, #12]
 8028d16:	681b      	ldr	r3, [r3, #0]
 8028d18:	681a      	ldr	r2, [r3, #0]
 8028d1a:	68fb      	ldr	r3, [r7, #12]
 8028d1c:	681b      	ldr	r3, [r3, #0]
 8028d1e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8028d22:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028d24:	68fb      	ldr	r3, [r7, #12]
 8028d26:	681b      	ldr	r3, [r3, #0]
 8028d28:	681b      	ldr	r3, [r3, #0]
 8028d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028d2e:	2b40      	cmp	r3, #64	; 0x40
 8028d30:	d007      	beq.n	8028d42 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8028d32:	68fb      	ldr	r3, [r7, #12]
 8028d34:	681b      	ldr	r3, [r3, #0]
 8028d36:	681a      	ldr	r2, [r3, #0]
 8028d38:	68fb      	ldr	r3, [r7, #12]
 8028d3a:	681b      	ldr	r3, [r3, #0]
 8028d3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028d40:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8028d42:	68fb      	ldr	r3, [r7, #12]
 8028d44:	68db      	ldr	r3, [r3, #12]
 8028d46:	2b00      	cmp	r3, #0
 8028d48:	d162      	bne.n	8028e10 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8028d4a:	e02e      	b.n	8028daa <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8028d4c:	68fb      	ldr	r3, [r7, #12]
 8028d4e:	681b      	ldr	r3, [r3, #0]
 8028d50:	689b      	ldr	r3, [r3, #8]
 8028d52:	f003 0301 	and.w	r3, r3, #1
 8028d56:	2b01      	cmp	r3, #1
 8028d58:	d115      	bne.n	8028d86 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8028d5a:	68fb      	ldr	r3, [r7, #12]
 8028d5c:	681b      	ldr	r3, [r3, #0]
 8028d5e:	f103 020c 	add.w	r2, r3, #12
 8028d62:	68fb      	ldr	r3, [r7, #12]
 8028d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028d66:	7812      	ldrb	r2, [r2, #0]
 8028d68:	b2d2      	uxtb	r2, r2
 8028d6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8028d6c:	68fb      	ldr	r3, [r7, #12]
 8028d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028d70:	1c5a      	adds	r2, r3, #1
 8028d72:	68fb      	ldr	r3, [r7, #12]
 8028d74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028d76:	68fb      	ldr	r3, [r7, #12]
 8028d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028d7a:	b29b      	uxth	r3, r3
 8028d7c:	3b01      	subs	r3, #1
 8028d7e:	b29a      	uxth	r2, r3
 8028d80:	68fb      	ldr	r3, [r7, #12]
 8028d82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8028d84:	e011      	b.n	8028daa <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028d86:	f7fd fb23 	bl	80263d0 <HAL_GetTick>
 8028d8a:	4602      	mov	r2, r0
 8028d8c:	693b      	ldr	r3, [r7, #16]
 8028d8e:	1ad3      	subs	r3, r2, r3
 8028d90:	683a      	ldr	r2, [r7, #0]
 8028d92:	429a      	cmp	r2, r3
 8028d94:	d803      	bhi.n	8028d9e <HAL_SPI_Receive+0x156>
 8028d96:	683b      	ldr	r3, [r7, #0]
 8028d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028d9c:	d102      	bne.n	8028da4 <HAL_SPI_Receive+0x15c>
 8028d9e:	683b      	ldr	r3, [r7, #0]
 8028da0:	2b00      	cmp	r3, #0
 8028da2:	d102      	bne.n	8028daa <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8028da4:	2303      	movs	r3, #3
 8028da6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8028da8:	e04a      	b.n	8028e40 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8028daa:	68fb      	ldr	r3, [r7, #12]
 8028dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028dae:	b29b      	uxth	r3, r3
 8028db0:	2b00      	cmp	r3, #0
 8028db2:	d1cb      	bne.n	8028d4c <HAL_SPI_Receive+0x104>
 8028db4:	e031      	b.n	8028e1a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8028db6:	68fb      	ldr	r3, [r7, #12]
 8028db8:	681b      	ldr	r3, [r3, #0]
 8028dba:	689b      	ldr	r3, [r3, #8]
 8028dbc:	f003 0301 	and.w	r3, r3, #1
 8028dc0:	2b01      	cmp	r3, #1
 8028dc2:	d113      	bne.n	8028dec <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8028dc4:	68fb      	ldr	r3, [r7, #12]
 8028dc6:	681b      	ldr	r3, [r3, #0]
 8028dc8:	68da      	ldr	r2, [r3, #12]
 8028dca:	68fb      	ldr	r3, [r7, #12]
 8028dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028dce:	b292      	uxth	r2, r2
 8028dd0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8028dd2:	68fb      	ldr	r3, [r7, #12]
 8028dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028dd6:	1c9a      	adds	r2, r3, #2
 8028dd8:	68fb      	ldr	r3, [r7, #12]
 8028dda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028ddc:	68fb      	ldr	r3, [r7, #12]
 8028dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028de0:	b29b      	uxth	r3, r3
 8028de2:	3b01      	subs	r3, #1
 8028de4:	b29a      	uxth	r2, r3
 8028de6:	68fb      	ldr	r3, [r7, #12]
 8028de8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8028dea:	e011      	b.n	8028e10 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028dec:	f7fd faf0 	bl	80263d0 <HAL_GetTick>
 8028df0:	4602      	mov	r2, r0
 8028df2:	693b      	ldr	r3, [r7, #16]
 8028df4:	1ad3      	subs	r3, r2, r3
 8028df6:	683a      	ldr	r2, [r7, #0]
 8028df8:	429a      	cmp	r2, r3
 8028dfa:	d803      	bhi.n	8028e04 <HAL_SPI_Receive+0x1bc>
 8028dfc:	683b      	ldr	r3, [r7, #0]
 8028dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028e02:	d102      	bne.n	8028e0a <HAL_SPI_Receive+0x1c2>
 8028e04:	683b      	ldr	r3, [r7, #0]
 8028e06:	2b00      	cmp	r3, #0
 8028e08:	d102      	bne.n	8028e10 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8028e0a:	2303      	movs	r3, #3
 8028e0c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8028e0e:	e017      	b.n	8028e40 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8028e10:	68fb      	ldr	r3, [r7, #12]
 8028e12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028e14:	b29b      	uxth	r3, r3
 8028e16:	2b00      	cmp	r3, #0
 8028e18:	d1cd      	bne.n	8028db6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028e1a:	693a      	ldr	r2, [r7, #16]
 8028e1c:	6839      	ldr	r1, [r7, #0]
 8028e1e:	68f8      	ldr	r0, [r7, #12]
 8028e20:	f000 fa27 	bl	8029272 <SPI_EndRxTransaction>
 8028e24:	4603      	mov	r3, r0
 8028e26:	2b00      	cmp	r3, #0
 8028e28:	d002      	beq.n	8028e30 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028e2a:	68fb      	ldr	r3, [r7, #12]
 8028e2c:	2220      	movs	r2, #32
 8028e2e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8028e30:	68fb      	ldr	r3, [r7, #12]
 8028e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028e34:	2b00      	cmp	r3, #0
 8028e36:	d002      	beq.n	8028e3e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8028e38:	2301      	movs	r3, #1
 8028e3a:	75fb      	strb	r3, [r7, #23]
 8028e3c:	e000      	b.n	8028e40 <HAL_SPI_Receive+0x1f8>
  }

error :
 8028e3e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8028e40:	68fb      	ldr	r3, [r7, #12]
 8028e42:	2201      	movs	r2, #1
 8028e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8028e48:	68fb      	ldr	r3, [r7, #12]
 8028e4a:	2200      	movs	r2, #0
 8028e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8028e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8028e52:	4618      	mov	r0, r3
 8028e54:	3718      	adds	r7, #24
 8028e56:	46bd      	mov	sp, r7
 8028e58:	bd80      	pop	{r7, pc}

08028e5a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8028e5a:	b580      	push	{r7, lr}
 8028e5c:	b08c      	sub	sp, #48	; 0x30
 8028e5e:	af00      	add	r7, sp, #0
 8028e60:	60f8      	str	r0, [r7, #12]
 8028e62:	60b9      	str	r1, [r7, #8]
 8028e64:	607a      	str	r2, [r7, #4]
 8028e66:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8028e68:	2301      	movs	r3, #1
 8028e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8028e6c:	2300      	movs	r3, #0
 8028e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8028e72:	68fb      	ldr	r3, [r7, #12]
 8028e74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8028e78:	2b01      	cmp	r3, #1
 8028e7a:	d101      	bne.n	8028e80 <HAL_SPI_TransmitReceive+0x26>
 8028e7c:	2302      	movs	r3, #2
 8028e7e:	e18a      	b.n	8029196 <HAL_SPI_TransmitReceive+0x33c>
 8028e80:	68fb      	ldr	r3, [r7, #12]
 8028e82:	2201      	movs	r2, #1
 8028e84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8028e88:	f7fd faa2 	bl	80263d0 <HAL_GetTick>
 8028e8c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8028e8e:	68fb      	ldr	r3, [r7, #12]
 8028e90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028e94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8028e98:	68fb      	ldr	r3, [r7, #12]
 8028e9a:	685b      	ldr	r3, [r3, #4]
 8028e9c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8028e9e:	887b      	ldrh	r3, [r7, #2]
 8028ea0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8028ea2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8028ea6:	2b01      	cmp	r3, #1
 8028ea8:	d00f      	beq.n	8028eca <HAL_SPI_TransmitReceive+0x70>
 8028eaa:	69fb      	ldr	r3, [r7, #28]
 8028eac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028eb0:	d107      	bne.n	8028ec2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8028eb2:	68fb      	ldr	r3, [r7, #12]
 8028eb4:	689b      	ldr	r3, [r3, #8]
 8028eb6:	2b00      	cmp	r3, #0
 8028eb8:	d103      	bne.n	8028ec2 <HAL_SPI_TransmitReceive+0x68>
 8028eba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8028ebe:	2b04      	cmp	r3, #4
 8028ec0:	d003      	beq.n	8028eca <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8028ec2:	2302      	movs	r3, #2
 8028ec4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8028ec8:	e15b      	b.n	8029182 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8028eca:	68bb      	ldr	r3, [r7, #8]
 8028ecc:	2b00      	cmp	r3, #0
 8028ece:	d005      	beq.n	8028edc <HAL_SPI_TransmitReceive+0x82>
 8028ed0:	687b      	ldr	r3, [r7, #4]
 8028ed2:	2b00      	cmp	r3, #0
 8028ed4:	d002      	beq.n	8028edc <HAL_SPI_TransmitReceive+0x82>
 8028ed6:	887b      	ldrh	r3, [r7, #2]
 8028ed8:	2b00      	cmp	r3, #0
 8028eda:	d103      	bne.n	8028ee4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8028edc:	2301      	movs	r3, #1
 8028ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8028ee2:	e14e      	b.n	8029182 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8028ee4:	68fb      	ldr	r3, [r7, #12]
 8028ee6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028eea:	b2db      	uxtb	r3, r3
 8028eec:	2b04      	cmp	r3, #4
 8028eee:	d003      	beq.n	8028ef8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8028ef0:	68fb      	ldr	r3, [r7, #12]
 8028ef2:	2205      	movs	r2, #5
 8028ef4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028ef8:	68fb      	ldr	r3, [r7, #12]
 8028efa:	2200      	movs	r2, #0
 8028efc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8028efe:	68fb      	ldr	r3, [r7, #12]
 8028f00:	687a      	ldr	r2, [r7, #4]
 8028f02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8028f04:	68fb      	ldr	r3, [r7, #12]
 8028f06:	887a      	ldrh	r2, [r7, #2]
 8028f08:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8028f0a:	68fb      	ldr	r3, [r7, #12]
 8028f0c:	887a      	ldrh	r2, [r7, #2]
 8028f0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8028f10:	68fb      	ldr	r3, [r7, #12]
 8028f12:	68ba      	ldr	r2, [r7, #8]
 8028f14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8028f16:	68fb      	ldr	r3, [r7, #12]
 8028f18:	887a      	ldrh	r2, [r7, #2]
 8028f1a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8028f1c:	68fb      	ldr	r3, [r7, #12]
 8028f1e:	887a      	ldrh	r2, [r7, #2]
 8028f20:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8028f22:	68fb      	ldr	r3, [r7, #12]
 8028f24:	2200      	movs	r2, #0
 8028f26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8028f28:	68fb      	ldr	r3, [r7, #12]
 8028f2a:	2200      	movs	r2, #0
 8028f2c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028f2e:	68fb      	ldr	r3, [r7, #12]
 8028f30:	681b      	ldr	r3, [r3, #0]
 8028f32:	681b      	ldr	r3, [r3, #0]
 8028f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028f38:	2b40      	cmp	r3, #64	; 0x40
 8028f3a:	d007      	beq.n	8028f4c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8028f3c:	68fb      	ldr	r3, [r7, #12]
 8028f3e:	681b      	ldr	r3, [r3, #0]
 8028f40:	681a      	ldr	r2, [r3, #0]
 8028f42:	68fb      	ldr	r3, [r7, #12]
 8028f44:	681b      	ldr	r3, [r3, #0]
 8028f46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028f4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8028f4c:	68fb      	ldr	r3, [r7, #12]
 8028f4e:	68db      	ldr	r3, [r3, #12]
 8028f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8028f54:	d178      	bne.n	8029048 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028f56:	68fb      	ldr	r3, [r7, #12]
 8028f58:	685b      	ldr	r3, [r3, #4]
 8028f5a:	2b00      	cmp	r3, #0
 8028f5c:	d002      	beq.n	8028f64 <HAL_SPI_TransmitReceive+0x10a>
 8028f5e:	8b7b      	ldrh	r3, [r7, #26]
 8028f60:	2b01      	cmp	r3, #1
 8028f62:	d166      	bne.n	8029032 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028f64:	68fb      	ldr	r3, [r7, #12]
 8028f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028f68:	881a      	ldrh	r2, [r3, #0]
 8028f6a:	68fb      	ldr	r3, [r7, #12]
 8028f6c:	681b      	ldr	r3, [r3, #0]
 8028f6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8028f70:	68fb      	ldr	r3, [r7, #12]
 8028f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028f74:	1c9a      	adds	r2, r3, #2
 8028f76:	68fb      	ldr	r3, [r7, #12]
 8028f78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028f7a:	68fb      	ldr	r3, [r7, #12]
 8028f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028f7e:	b29b      	uxth	r3, r3
 8028f80:	3b01      	subs	r3, #1
 8028f82:	b29a      	uxth	r2, r3
 8028f84:	68fb      	ldr	r3, [r7, #12]
 8028f86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028f88:	e053      	b.n	8029032 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8028f8a:	68fb      	ldr	r3, [r7, #12]
 8028f8c:	681b      	ldr	r3, [r3, #0]
 8028f8e:	689b      	ldr	r3, [r3, #8]
 8028f90:	f003 0302 	and.w	r3, r3, #2
 8028f94:	2b02      	cmp	r3, #2
 8028f96:	d11b      	bne.n	8028fd0 <HAL_SPI_TransmitReceive+0x176>
 8028f98:	68fb      	ldr	r3, [r7, #12]
 8028f9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028f9c:	b29b      	uxth	r3, r3
 8028f9e:	2b00      	cmp	r3, #0
 8028fa0:	d016      	beq.n	8028fd0 <HAL_SPI_TransmitReceive+0x176>
 8028fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028fa4:	2b01      	cmp	r3, #1
 8028fa6:	d113      	bne.n	8028fd0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028fa8:	68fb      	ldr	r3, [r7, #12]
 8028faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028fac:	881a      	ldrh	r2, [r3, #0]
 8028fae:	68fb      	ldr	r3, [r7, #12]
 8028fb0:	681b      	ldr	r3, [r3, #0]
 8028fb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8028fb4:	68fb      	ldr	r3, [r7, #12]
 8028fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028fb8:	1c9a      	adds	r2, r3, #2
 8028fba:	68fb      	ldr	r3, [r7, #12]
 8028fbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028fbe:	68fb      	ldr	r3, [r7, #12]
 8028fc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028fc2:	b29b      	uxth	r3, r3
 8028fc4:	3b01      	subs	r3, #1
 8028fc6:	b29a      	uxth	r2, r3
 8028fc8:	68fb      	ldr	r3, [r7, #12]
 8028fca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8028fcc:	2300      	movs	r3, #0
 8028fce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8028fd0:	68fb      	ldr	r3, [r7, #12]
 8028fd2:	681b      	ldr	r3, [r3, #0]
 8028fd4:	689b      	ldr	r3, [r3, #8]
 8028fd6:	f003 0301 	and.w	r3, r3, #1
 8028fda:	2b01      	cmp	r3, #1
 8028fdc:	d119      	bne.n	8029012 <HAL_SPI_TransmitReceive+0x1b8>
 8028fde:	68fb      	ldr	r3, [r7, #12]
 8028fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028fe2:	b29b      	uxth	r3, r3
 8028fe4:	2b00      	cmp	r3, #0
 8028fe6:	d014      	beq.n	8029012 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8028fe8:	68fb      	ldr	r3, [r7, #12]
 8028fea:	681b      	ldr	r3, [r3, #0]
 8028fec:	68da      	ldr	r2, [r3, #12]
 8028fee:	68fb      	ldr	r3, [r7, #12]
 8028ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028ff2:	b292      	uxth	r2, r2
 8028ff4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8028ff6:	68fb      	ldr	r3, [r7, #12]
 8028ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028ffa:	1c9a      	adds	r2, r3, #2
 8028ffc:	68fb      	ldr	r3, [r7, #12]
 8028ffe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8029000:	68fb      	ldr	r3, [r7, #12]
 8029002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8029004:	b29b      	uxth	r3, r3
 8029006:	3b01      	subs	r3, #1
 8029008:	b29a      	uxth	r2, r3
 802900a:	68fb      	ldr	r3, [r7, #12]
 802900c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 802900e:	2301      	movs	r3, #1
 8029010:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8029012:	f7fd f9dd 	bl	80263d0 <HAL_GetTick>
 8029016:	4602      	mov	r2, r0
 8029018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802901a:	1ad3      	subs	r3, r2, r3
 802901c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802901e:	429a      	cmp	r2, r3
 8029020:	d807      	bhi.n	8029032 <HAL_SPI_TransmitReceive+0x1d8>
 8029022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029028:	d003      	beq.n	8029032 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 802902a:	2303      	movs	r3, #3
 802902c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8029030:	e0a7      	b.n	8029182 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8029032:	68fb      	ldr	r3, [r7, #12]
 8029034:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029036:	b29b      	uxth	r3, r3
 8029038:	2b00      	cmp	r3, #0
 802903a:	d1a6      	bne.n	8028f8a <HAL_SPI_TransmitReceive+0x130>
 802903c:	68fb      	ldr	r3, [r7, #12]
 802903e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8029040:	b29b      	uxth	r3, r3
 8029042:	2b00      	cmp	r3, #0
 8029044:	d1a1      	bne.n	8028f8a <HAL_SPI_TransmitReceive+0x130>
 8029046:	e07c      	b.n	8029142 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8029048:	68fb      	ldr	r3, [r7, #12]
 802904a:	685b      	ldr	r3, [r3, #4]
 802904c:	2b00      	cmp	r3, #0
 802904e:	d002      	beq.n	8029056 <HAL_SPI_TransmitReceive+0x1fc>
 8029050:	8b7b      	ldrh	r3, [r7, #26]
 8029052:	2b01      	cmp	r3, #1
 8029054:	d16b      	bne.n	802912e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8029056:	68fb      	ldr	r3, [r7, #12]
 8029058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802905a:	68fb      	ldr	r3, [r7, #12]
 802905c:	681b      	ldr	r3, [r3, #0]
 802905e:	330c      	adds	r3, #12
 8029060:	7812      	ldrb	r2, [r2, #0]
 8029062:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8029064:	68fb      	ldr	r3, [r7, #12]
 8029066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029068:	1c5a      	adds	r2, r3, #1
 802906a:	68fb      	ldr	r3, [r7, #12]
 802906c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 802906e:	68fb      	ldr	r3, [r7, #12]
 8029070:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029072:	b29b      	uxth	r3, r3
 8029074:	3b01      	subs	r3, #1
 8029076:	b29a      	uxth	r2, r3
 8029078:	68fb      	ldr	r3, [r7, #12]
 802907a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 802907c:	e057      	b.n	802912e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 802907e:	68fb      	ldr	r3, [r7, #12]
 8029080:	681b      	ldr	r3, [r3, #0]
 8029082:	689b      	ldr	r3, [r3, #8]
 8029084:	f003 0302 	and.w	r3, r3, #2
 8029088:	2b02      	cmp	r3, #2
 802908a:	d11c      	bne.n	80290c6 <HAL_SPI_TransmitReceive+0x26c>
 802908c:	68fb      	ldr	r3, [r7, #12]
 802908e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029090:	b29b      	uxth	r3, r3
 8029092:	2b00      	cmp	r3, #0
 8029094:	d017      	beq.n	80290c6 <HAL_SPI_TransmitReceive+0x26c>
 8029096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029098:	2b01      	cmp	r3, #1
 802909a:	d114      	bne.n	80290c6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 802909c:	68fb      	ldr	r3, [r7, #12]
 802909e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80290a0:	68fb      	ldr	r3, [r7, #12]
 80290a2:	681b      	ldr	r3, [r3, #0]
 80290a4:	330c      	adds	r3, #12
 80290a6:	7812      	ldrb	r2, [r2, #0]
 80290a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80290aa:	68fb      	ldr	r3, [r7, #12]
 80290ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80290ae:	1c5a      	adds	r2, r3, #1
 80290b0:	68fb      	ldr	r3, [r7, #12]
 80290b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80290b4:	68fb      	ldr	r3, [r7, #12]
 80290b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80290b8:	b29b      	uxth	r3, r3
 80290ba:	3b01      	subs	r3, #1
 80290bc:	b29a      	uxth	r2, r3
 80290be:	68fb      	ldr	r3, [r7, #12]
 80290c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80290c2:	2300      	movs	r3, #0
 80290c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80290c6:	68fb      	ldr	r3, [r7, #12]
 80290c8:	681b      	ldr	r3, [r3, #0]
 80290ca:	689b      	ldr	r3, [r3, #8]
 80290cc:	f003 0301 	and.w	r3, r3, #1
 80290d0:	2b01      	cmp	r3, #1
 80290d2:	d119      	bne.n	8029108 <HAL_SPI_TransmitReceive+0x2ae>
 80290d4:	68fb      	ldr	r3, [r7, #12]
 80290d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80290d8:	b29b      	uxth	r3, r3
 80290da:	2b00      	cmp	r3, #0
 80290dc:	d014      	beq.n	8029108 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80290de:	68fb      	ldr	r3, [r7, #12]
 80290e0:	681b      	ldr	r3, [r3, #0]
 80290e2:	68da      	ldr	r2, [r3, #12]
 80290e4:	68fb      	ldr	r3, [r7, #12]
 80290e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80290e8:	b2d2      	uxtb	r2, r2
 80290ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80290ec:	68fb      	ldr	r3, [r7, #12]
 80290ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80290f0:	1c5a      	adds	r2, r3, #1
 80290f2:	68fb      	ldr	r3, [r7, #12]
 80290f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80290f6:	68fb      	ldr	r3, [r7, #12]
 80290f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80290fa:	b29b      	uxth	r3, r3
 80290fc:	3b01      	subs	r3, #1
 80290fe:	b29a      	uxth	r2, r3
 8029100:	68fb      	ldr	r3, [r7, #12]
 8029102:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8029104:	2301      	movs	r3, #1
 8029106:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8029108:	f7fd f962 	bl	80263d0 <HAL_GetTick>
 802910c:	4602      	mov	r2, r0
 802910e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029110:	1ad3      	subs	r3, r2, r3
 8029112:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8029114:	429a      	cmp	r2, r3
 8029116:	d803      	bhi.n	8029120 <HAL_SPI_TransmitReceive+0x2c6>
 8029118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802911a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802911e:	d102      	bne.n	8029126 <HAL_SPI_TransmitReceive+0x2cc>
 8029120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029122:	2b00      	cmp	r3, #0
 8029124:	d103      	bne.n	802912e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8029126:	2303      	movs	r3, #3
 8029128:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 802912c:	e029      	b.n	8029182 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 802912e:	68fb      	ldr	r3, [r7, #12]
 8029130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029132:	b29b      	uxth	r3, r3
 8029134:	2b00      	cmp	r3, #0
 8029136:	d1a2      	bne.n	802907e <HAL_SPI_TransmitReceive+0x224>
 8029138:	68fb      	ldr	r3, [r7, #12]
 802913a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802913c:	b29b      	uxth	r3, r3
 802913e:	2b00      	cmp	r3, #0
 8029140:	d19d      	bne.n	802907e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8029142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029144:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8029146:	68f8      	ldr	r0, [r7, #12]
 8029148:	f000 f8f8 	bl	802933c <SPI_EndRxTxTransaction>
 802914c:	4603      	mov	r3, r0
 802914e:	2b00      	cmp	r3, #0
 8029150:	d006      	beq.n	8029160 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8029152:	2301      	movs	r3, #1
 8029154:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8029158:	68fb      	ldr	r3, [r7, #12]
 802915a:	2220      	movs	r2, #32
 802915c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 802915e:	e010      	b.n	8029182 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8029160:	68fb      	ldr	r3, [r7, #12]
 8029162:	689b      	ldr	r3, [r3, #8]
 8029164:	2b00      	cmp	r3, #0
 8029166:	d10b      	bne.n	8029180 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8029168:	2300      	movs	r3, #0
 802916a:	617b      	str	r3, [r7, #20]
 802916c:	68fb      	ldr	r3, [r7, #12]
 802916e:	681b      	ldr	r3, [r3, #0]
 8029170:	68db      	ldr	r3, [r3, #12]
 8029172:	617b      	str	r3, [r7, #20]
 8029174:	68fb      	ldr	r3, [r7, #12]
 8029176:	681b      	ldr	r3, [r3, #0]
 8029178:	689b      	ldr	r3, [r3, #8]
 802917a:	617b      	str	r3, [r7, #20]
 802917c:	697b      	ldr	r3, [r7, #20]
 802917e:	e000      	b.n	8029182 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8029180:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8029182:	68fb      	ldr	r3, [r7, #12]
 8029184:	2201      	movs	r2, #1
 8029186:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 802918a:	68fb      	ldr	r3, [r7, #12]
 802918c:	2200      	movs	r2, #0
 802918e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8029192:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8029196:	4618      	mov	r0, r3
 8029198:	3730      	adds	r7, #48	; 0x30
 802919a:	46bd      	mov	sp, r7
 802919c:	bd80      	pop	{r7, pc}

0802919e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 802919e:	b580      	push	{r7, lr}
 80291a0:	b084      	sub	sp, #16
 80291a2:	af00      	add	r7, sp, #0
 80291a4:	60f8      	str	r0, [r7, #12]
 80291a6:	60b9      	str	r1, [r7, #8]
 80291a8:	603b      	str	r3, [r7, #0]
 80291aa:	4613      	mov	r3, r2
 80291ac:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80291ae:	e04c      	b.n	802924a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80291b0:	683b      	ldr	r3, [r7, #0]
 80291b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80291b6:	d048      	beq.n	802924a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80291b8:	f7fd f90a 	bl	80263d0 <HAL_GetTick>
 80291bc:	4602      	mov	r2, r0
 80291be:	69bb      	ldr	r3, [r7, #24]
 80291c0:	1ad3      	subs	r3, r2, r3
 80291c2:	683a      	ldr	r2, [r7, #0]
 80291c4:	429a      	cmp	r2, r3
 80291c6:	d902      	bls.n	80291ce <SPI_WaitFlagStateUntilTimeout+0x30>
 80291c8:	683b      	ldr	r3, [r7, #0]
 80291ca:	2b00      	cmp	r3, #0
 80291cc:	d13d      	bne.n	802924a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80291ce:	68fb      	ldr	r3, [r7, #12]
 80291d0:	681b      	ldr	r3, [r3, #0]
 80291d2:	685a      	ldr	r2, [r3, #4]
 80291d4:	68fb      	ldr	r3, [r7, #12]
 80291d6:	681b      	ldr	r3, [r3, #0]
 80291d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80291dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80291de:	68fb      	ldr	r3, [r7, #12]
 80291e0:	685b      	ldr	r3, [r3, #4]
 80291e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80291e6:	d111      	bne.n	802920c <SPI_WaitFlagStateUntilTimeout+0x6e>
 80291e8:	68fb      	ldr	r3, [r7, #12]
 80291ea:	689b      	ldr	r3, [r3, #8]
 80291ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80291f0:	d004      	beq.n	80291fc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80291f2:	68fb      	ldr	r3, [r7, #12]
 80291f4:	689b      	ldr	r3, [r3, #8]
 80291f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80291fa:	d107      	bne.n	802920c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80291fc:	68fb      	ldr	r3, [r7, #12]
 80291fe:	681b      	ldr	r3, [r3, #0]
 8029200:	681a      	ldr	r2, [r3, #0]
 8029202:	68fb      	ldr	r3, [r7, #12]
 8029204:	681b      	ldr	r3, [r3, #0]
 8029206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802920a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 802920c:	68fb      	ldr	r3, [r7, #12]
 802920e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8029214:	d10f      	bne.n	8029236 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8029216:	68fb      	ldr	r3, [r7, #12]
 8029218:	681b      	ldr	r3, [r3, #0]
 802921a:	681a      	ldr	r2, [r3, #0]
 802921c:	68fb      	ldr	r3, [r7, #12]
 802921e:	681b      	ldr	r3, [r3, #0]
 8029220:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8029224:	601a      	str	r2, [r3, #0]
 8029226:	68fb      	ldr	r3, [r7, #12]
 8029228:	681b      	ldr	r3, [r3, #0]
 802922a:	681a      	ldr	r2, [r3, #0]
 802922c:	68fb      	ldr	r3, [r7, #12]
 802922e:	681b      	ldr	r3, [r3, #0]
 8029230:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8029234:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8029236:	68fb      	ldr	r3, [r7, #12]
 8029238:	2201      	movs	r2, #1
 802923a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 802923e:	68fb      	ldr	r3, [r7, #12]
 8029240:	2200      	movs	r2, #0
 8029242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8029246:	2303      	movs	r3, #3
 8029248:	e00f      	b.n	802926a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802924a:	68fb      	ldr	r3, [r7, #12]
 802924c:	681b      	ldr	r3, [r3, #0]
 802924e:	689a      	ldr	r2, [r3, #8]
 8029250:	68bb      	ldr	r3, [r7, #8]
 8029252:	4013      	ands	r3, r2
 8029254:	68ba      	ldr	r2, [r7, #8]
 8029256:	429a      	cmp	r2, r3
 8029258:	bf0c      	ite	eq
 802925a:	2301      	moveq	r3, #1
 802925c:	2300      	movne	r3, #0
 802925e:	b2db      	uxtb	r3, r3
 8029260:	461a      	mov	r2, r3
 8029262:	79fb      	ldrb	r3, [r7, #7]
 8029264:	429a      	cmp	r2, r3
 8029266:	d1a3      	bne.n	80291b0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8029268:	2300      	movs	r3, #0
}
 802926a:	4618      	mov	r0, r3
 802926c:	3710      	adds	r7, #16
 802926e:	46bd      	mov	sp, r7
 8029270:	bd80      	pop	{r7, pc}

08029272 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8029272:	b580      	push	{r7, lr}
 8029274:	b086      	sub	sp, #24
 8029276:	af02      	add	r7, sp, #8
 8029278:	60f8      	str	r0, [r7, #12]
 802927a:	60b9      	str	r1, [r7, #8]
 802927c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802927e:	68fb      	ldr	r3, [r7, #12]
 8029280:	685b      	ldr	r3, [r3, #4]
 8029282:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8029286:	d111      	bne.n	80292ac <SPI_EndRxTransaction+0x3a>
 8029288:	68fb      	ldr	r3, [r7, #12]
 802928a:	689b      	ldr	r3, [r3, #8]
 802928c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8029290:	d004      	beq.n	802929c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8029292:	68fb      	ldr	r3, [r7, #12]
 8029294:	689b      	ldr	r3, [r3, #8]
 8029296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802929a:	d107      	bne.n	80292ac <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 802929c:	68fb      	ldr	r3, [r7, #12]
 802929e:	681b      	ldr	r3, [r3, #0]
 80292a0:	681a      	ldr	r2, [r3, #0]
 80292a2:	68fb      	ldr	r3, [r7, #12]
 80292a4:	681b      	ldr	r3, [r3, #0]
 80292a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80292aa:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80292ac:	68fb      	ldr	r3, [r7, #12]
 80292ae:	685b      	ldr	r3, [r3, #4]
 80292b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80292b4:	d12a      	bne.n	802930c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80292b6:	68fb      	ldr	r3, [r7, #12]
 80292b8:	689b      	ldr	r3, [r3, #8]
 80292ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80292be:	d012      	beq.n	80292e6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80292c0:	687b      	ldr	r3, [r7, #4]
 80292c2:	9300      	str	r3, [sp, #0]
 80292c4:	68bb      	ldr	r3, [r7, #8]
 80292c6:	2200      	movs	r2, #0
 80292c8:	2180      	movs	r1, #128	; 0x80
 80292ca:	68f8      	ldr	r0, [r7, #12]
 80292cc:	f7ff ff67 	bl	802919e <SPI_WaitFlagStateUntilTimeout>
 80292d0:	4603      	mov	r3, r0
 80292d2:	2b00      	cmp	r3, #0
 80292d4:	d02d      	beq.n	8029332 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80292d6:	68fb      	ldr	r3, [r7, #12]
 80292d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80292da:	f043 0220 	orr.w	r2, r3, #32
 80292de:	68fb      	ldr	r3, [r7, #12]
 80292e0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80292e2:	2303      	movs	r3, #3
 80292e4:	e026      	b.n	8029334 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80292e6:	687b      	ldr	r3, [r7, #4]
 80292e8:	9300      	str	r3, [sp, #0]
 80292ea:	68bb      	ldr	r3, [r7, #8]
 80292ec:	2200      	movs	r2, #0
 80292ee:	2101      	movs	r1, #1
 80292f0:	68f8      	ldr	r0, [r7, #12]
 80292f2:	f7ff ff54 	bl	802919e <SPI_WaitFlagStateUntilTimeout>
 80292f6:	4603      	mov	r3, r0
 80292f8:	2b00      	cmp	r3, #0
 80292fa:	d01a      	beq.n	8029332 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80292fc:	68fb      	ldr	r3, [r7, #12]
 80292fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029300:	f043 0220 	orr.w	r2, r3, #32
 8029304:	68fb      	ldr	r3, [r7, #12]
 8029306:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8029308:	2303      	movs	r3, #3
 802930a:	e013      	b.n	8029334 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 802930c:	687b      	ldr	r3, [r7, #4]
 802930e:	9300      	str	r3, [sp, #0]
 8029310:	68bb      	ldr	r3, [r7, #8]
 8029312:	2200      	movs	r2, #0
 8029314:	2101      	movs	r1, #1
 8029316:	68f8      	ldr	r0, [r7, #12]
 8029318:	f7ff ff41 	bl	802919e <SPI_WaitFlagStateUntilTimeout>
 802931c:	4603      	mov	r3, r0
 802931e:	2b00      	cmp	r3, #0
 8029320:	d007      	beq.n	8029332 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8029322:	68fb      	ldr	r3, [r7, #12]
 8029324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029326:	f043 0220 	orr.w	r2, r3, #32
 802932a:	68fb      	ldr	r3, [r7, #12]
 802932c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 802932e:	2303      	movs	r3, #3
 8029330:	e000      	b.n	8029334 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8029332:	2300      	movs	r3, #0
}
 8029334:	4618      	mov	r0, r3
 8029336:	3710      	adds	r7, #16
 8029338:	46bd      	mov	sp, r7
 802933a:	bd80      	pop	{r7, pc}

0802933c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 802933c:	b580      	push	{r7, lr}
 802933e:	b088      	sub	sp, #32
 8029340:	af02      	add	r7, sp, #8
 8029342:	60f8      	str	r0, [r7, #12]
 8029344:	60b9      	str	r1, [r7, #8]
 8029346:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8029348:	4b1b      	ldr	r3, [pc, #108]	; (80293b8 <SPI_EndRxTxTransaction+0x7c>)
 802934a:	681b      	ldr	r3, [r3, #0]
 802934c:	4a1b      	ldr	r2, [pc, #108]	; (80293bc <SPI_EndRxTxTransaction+0x80>)
 802934e:	fba2 2303 	umull	r2, r3, r2, r3
 8029352:	0d5b      	lsrs	r3, r3, #21
 8029354:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8029358:	fb02 f303 	mul.w	r3, r2, r3
 802935c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 802935e:	68fb      	ldr	r3, [r7, #12]
 8029360:	685b      	ldr	r3, [r3, #4]
 8029362:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8029366:	d112      	bne.n	802938e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8029368:	687b      	ldr	r3, [r7, #4]
 802936a:	9300      	str	r3, [sp, #0]
 802936c:	68bb      	ldr	r3, [r7, #8]
 802936e:	2200      	movs	r2, #0
 8029370:	2180      	movs	r1, #128	; 0x80
 8029372:	68f8      	ldr	r0, [r7, #12]
 8029374:	f7ff ff13 	bl	802919e <SPI_WaitFlagStateUntilTimeout>
 8029378:	4603      	mov	r3, r0
 802937a:	2b00      	cmp	r3, #0
 802937c:	d016      	beq.n	80293ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802937e:	68fb      	ldr	r3, [r7, #12]
 8029380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029382:	f043 0220 	orr.w	r2, r3, #32
 8029386:	68fb      	ldr	r3, [r7, #12]
 8029388:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 802938a:	2303      	movs	r3, #3
 802938c:	e00f      	b.n	80293ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 802938e:	697b      	ldr	r3, [r7, #20]
 8029390:	2b00      	cmp	r3, #0
 8029392:	d00a      	beq.n	80293aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8029394:	697b      	ldr	r3, [r7, #20]
 8029396:	3b01      	subs	r3, #1
 8029398:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 802939a:	68fb      	ldr	r3, [r7, #12]
 802939c:	681b      	ldr	r3, [r3, #0]
 802939e:	689b      	ldr	r3, [r3, #8]
 80293a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80293a4:	2b80      	cmp	r3, #128	; 0x80
 80293a6:	d0f2      	beq.n	802938e <SPI_EndRxTxTransaction+0x52>
 80293a8:	e000      	b.n	80293ac <SPI_EndRxTxTransaction+0x70>
        break;
 80293aa:	bf00      	nop
  }

  return HAL_OK;
 80293ac:	2300      	movs	r3, #0
}
 80293ae:	4618      	mov	r0, r3
 80293b0:	3718      	adds	r7, #24
 80293b2:	46bd      	mov	sp, r7
 80293b4:	bd80      	pop	{r7, pc}
 80293b6:	bf00      	nop
 80293b8:	20000014 	.word	0x20000014
 80293bc:	165e9f81 	.word	0x165e9f81

080293c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80293c0:	b580      	push	{r7, lr}
 80293c2:	b082      	sub	sp, #8
 80293c4:	af00      	add	r7, sp, #0
 80293c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80293c8:	687b      	ldr	r3, [r7, #4]
 80293ca:	2b00      	cmp	r3, #0
 80293cc:	d101      	bne.n	80293d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80293ce:	2301      	movs	r3, #1
 80293d0:	e01d      	b.n	802940e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80293d2:	687b      	ldr	r3, [r7, #4]
 80293d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80293d8:	b2db      	uxtb	r3, r3
 80293da:	2b00      	cmp	r3, #0
 80293dc:	d106      	bne.n	80293ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80293de:	687b      	ldr	r3, [r7, #4]
 80293e0:	2200      	movs	r2, #0
 80293e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80293e6:	6878      	ldr	r0, [r7, #4]
 80293e8:	f7fc faf0 	bl	80259cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80293ec:	687b      	ldr	r3, [r7, #4]
 80293ee:	2202      	movs	r2, #2
 80293f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80293f4:	687b      	ldr	r3, [r7, #4]
 80293f6:	681a      	ldr	r2, [r3, #0]
 80293f8:	687b      	ldr	r3, [r7, #4]
 80293fa:	3304      	adds	r3, #4
 80293fc:	4619      	mov	r1, r3
 80293fe:	4610      	mov	r0, r2
 8029400:	f000 fc0e 	bl	8029c20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8029404:	687b      	ldr	r3, [r7, #4]
 8029406:	2201      	movs	r2, #1
 8029408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802940c:	2300      	movs	r3, #0
}
 802940e:	4618      	mov	r0, r3
 8029410:	3708      	adds	r7, #8
 8029412:	46bd      	mov	sp, r7
 8029414:	bd80      	pop	{r7, pc}

08029416 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8029416:	b480      	push	{r7}
 8029418:	b085      	sub	sp, #20
 802941a:	af00      	add	r7, sp, #0
 802941c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 802941e:	687b      	ldr	r3, [r7, #4]
 8029420:	681b      	ldr	r3, [r3, #0]
 8029422:	68da      	ldr	r2, [r3, #12]
 8029424:	687b      	ldr	r3, [r7, #4]
 8029426:	681b      	ldr	r3, [r3, #0]
 8029428:	f042 0201 	orr.w	r2, r2, #1
 802942c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802942e:	687b      	ldr	r3, [r7, #4]
 8029430:	681b      	ldr	r3, [r3, #0]
 8029432:	689b      	ldr	r3, [r3, #8]
 8029434:	f003 0307 	and.w	r3, r3, #7
 8029438:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802943a:	68fb      	ldr	r3, [r7, #12]
 802943c:	2b06      	cmp	r3, #6
 802943e:	d007      	beq.n	8029450 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8029440:	687b      	ldr	r3, [r7, #4]
 8029442:	681b      	ldr	r3, [r3, #0]
 8029444:	681a      	ldr	r2, [r3, #0]
 8029446:	687b      	ldr	r3, [r7, #4]
 8029448:	681b      	ldr	r3, [r3, #0]
 802944a:	f042 0201 	orr.w	r2, r2, #1
 802944e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8029450:	2300      	movs	r3, #0
}
 8029452:	4618      	mov	r0, r3
 8029454:	3714      	adds	r7, #20
 8029456:	46bd      	mov	sp, r7
 8029458:	f85d 7b04 	ldr.w	r7, [sp], #4
 802945c:	4770      	bx	lr

0802945e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 802945e:	b580      	push	{r7, lr}
 8029460:	b082      	sub	sp, #8
 8029462:	af00      	add	r7, sp, #0
 8029464:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8029466:	687b      	ldr	r3, [r7, #4]
 8029468:	2b00      	cmp	r3, #0
 802946a:	d101      	bne.n	8029470 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 802946c:	2301      	movs	r3, #1
 802946e:	e01d      	b.n	80294ac <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8029470:	687b      	ldr	r3, [r7, #4]
 8029472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8029476:	b2db      	uxtb	r3, r3
 8029478:	2b00      	cmp	r3, #0
 802947a:	d106      	bne.n	802948a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802947c:	687b      	ldr	r3, [r7, #4]
 802947e:	2200      	movs	r2, #0
 8029480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8029484:	6878      	ldr	r0, [r7, #4]
 8029486:	f7fc fa53 	bl	8025930 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802948a:	687b      	ldr	r3, [r7, #4]
 802948c:	2202      	movs	r2, #2
 802948e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8029492:	687b      	ldr	r3, [r7, #4]
 8029494:	681a      	ldr	r2, [r3, #0]
 8029496:	687b      	ldr	r3, [r7, #4]
 8029498:	3304      	adds	r3, #4
 802949a:	4619      	mov	r1, r3
 802949c:	4610      	mov	r0, r2
 802949e:	f000 fbbf 	bl	8029c20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80294a2:	687b      	ldr	r3, [r7, #4]
 80294a4:	2201      	movs	r2, #1
 80294a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80294aa:	2300      	movs	r3, #0
}
 80294ac:	4618      	mov	r0, r3
 80294ae:	3708      	adds	r7, #8
 80294b0:	46bd      	mov	sp, r7
 80294b2:	bd80      	pop	{r7, pc}

080294b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80294b4:	b580      	push	{r7, lr}
 80294b6:	b084      	sub	sp, #16
 80294b8:	af00      	add	r7, sp, #0
 80294ba:	6078      	str	r0, [r7, #4]
 80294bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80294be:	687b      	ldr	r3, [r7, #4]
 80294c0:	681b      	ldr	r3, [r3, #0]
 80294c2:	2201      	movs	r2, #1
 80294c4:	6839      	ldr	r1, [r7, #0]
 80294c6:	4618      	mov	r0, r3
 80294c8:	f000 fe94 	bl	802a1f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80294cc:	687b      	ldr	r3, [r7, #4]
 80294ce:	681b      	ldr	r3, [r3, #0]
 80294d0:	4a15      	ldr	r2, [pc, #84]	; (8029528 <HAL_TIM_PWM_Start+0x74>)
 80294d2:	4293      	cmp	r3, r2
 80294d4:	d004      	beq.n	80294e0 <HAL_TIM_PWM_Start+0x2c>
 80294d6:	687b      	ldr	r3, [r7, #4]
 80294d8:	681b      	ldr	r3, [r3, #0]
 80294da:	4a14      	ldr	r2, [pc, #80]	; (802952c <HAL_TIM_PWM_Start+0x78>)
 80294dc:	4293      	cmp	r3, r2
 80294de:	d101      	bne.n	80294e4 <HAL_TIM_PWM_Start+0x30>
 80294e0:	2301      	movs	r3, #1
 80294e2:	e000      	b.n	80294e6 <HAL_TIM_PWM_Start+0x32>
 80294e4:	2300      	movs	r3, #0
 80294e6:	2b00      	cmp	r3, #0
 80294e8:	d007      	beq.n	80294fa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80294ea:	687b      	ldr	r3, [r7, #4]
 80294ec:	681b      	ldr	r3, [r3, #0]
 80294ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80294f0:	687b      	ldr	r3, [r7, #4]
 80294f2:	681b      	ldr	r3, [r3, #0]
 80294f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80294f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80294fa:	687b      	ldr	r3, [r7, #4]
 80294fc:	681b      	ldr	r3, [r3, #0]
 80294fe:	689b      	ldr	r3, [r3, #8]
 8029500:	f003 0307 	and.w	r3, r3, #7
 8029504:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8029506:	68fb      	ldr	r3, [r7, #12]
 8029508:	2b06      	cmp	r3, #6
 802950a:	d007      	beq.n	802951c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 802950c:	687b      	ldr	r3, [r7, #4]
 802950e:	681b      	ldr	r3, [r3, #0]
 8029510:	681a      	ldr	r2, [r3, #0]
 8029512:	687b      	ldr	r3, [r7, #4]
 8029514:	681b      	ldr	r3, [r3, #0]
 8029516:	f042 0201 	orr.w	r2, r2, #1
 802951a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 802951c:	2300      	movs	r3, #0
}
 802951e:	4618      	mov	r0, r3
 8029520:	3710      	adds	r7, #16
 8029522:	46bd      	mov	sp, r7
 8029524:	bd80      	pop	{r7, pc}
 8029526:	bf00      	nop
 8029528:	40010000 	.word	0x40010000
 802952c:	40010400 	.word	0x40010400

08029530 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8029530:	b580      	push	{r7, lr}
 8029532:	b086      	sub	sp, #24
 8029534:	af00      	add	r7, sp, #0
 8029536:	6078      	str	r0, [r7, #4]
 8029538:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 802953a:	687b      	ldr	r3, [r7, #4]
 802953c:	2b00      	cmp	r3, #0
 802953e:	d101      	bne.n	8029544 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8029540:	2301      	movs	r3, #1
 8029542:	e083      	b.n	802964c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8029544:	687b      	ldr	r3, [r7, #4]
 8029546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802954a:	b2db      	uxtb	r3, r3
 802954c:	2b00      	cmp	r3, #0
 802954e:	d106      	bne.n	802955e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8029550:	687b      	ldr	r3, [r7, #4]
 8029552:	2200      	movs	r2, #0
 8029554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8029558:	6878      	ldr	r0, [r7, #4]
 802955a:	f7fc facd 	bl	8025af8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802955e:	687b      	ldr	r3, [r7, #4]
 8029560:	2202      	movs	r2, #2
 8029562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8029566:	687b      	ldr	r3, [r7, #4]
 8029568:	681b      	ldr	r3, [r3, #0]
 802956a:	689b      	ldr	r3, [r3, #8]
 802956c:	687a      	ldr	r2, [r7, #4]
 802956e:	6812      	ldr	r2, [r2, #0]
 8029570:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8029574:	f023 0307 	bic.w	r3, r3, #7
 8029578:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802957a:	687b      	ldr	r3, [r7, #4]
 802957c:	681a      	ldr	r2, [r3, #0]
 802957e:	687b      	ldr	r3, [r7, #4]
 8029580:	3304      	adds	r3, #4
 8029582:	4619      	mov	r1, r3
 8029584:	4610      	mov	r0, r2
 8029586:	f000 fb4b 	bl	8029c20 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802958a:	687b      	ldr	r3, [r7, #4]
 802958c:	681b      	ldr	r3, [r3, #0]
 802958e:	689b      	ldr	r3, [r3, #8]
 8029590:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8029592:	687b      	ldr	r3, [r7, #4]
 8029594:	681b      	ldr	r3, [r3, #0]
 8029596:	699b      	ldr	r3, [r3, #24]
 8029598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 802959a:	687b      	ldr	r3, [r7, #4]
 802959c:	681b      	ldr	r3, [r3, #0]
 802959e:	6a1b      	ldr	r3, [r3, #32]
 80295a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80295a2:	683b      	ldr	r3, [r7, #0]
 80295a4:	681b      	ldr	r3, [r3, #0]
 80295a6:	697a      	ldr	r2, [r7, #20]
 80295a8:	4313      	orrs	r3, r2
 80295aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80295ac:	693b      	ldr	r3, [r7, #16]
 80295ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80295b2:	f023 0303 	bic.w	r3, r3, #3
 80295b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80295b8:	683b      	ldr	r3, [r7, #0]
 80295ba:	689a      	ldr	r2, [r3, #8]
 80295bc:	683b      	ldr	r3, [r7, #0]
 80295be:	699b      	ldr	r3, [r3, #24]
 80295c0:	021b      	lsls	r3, r3, #8
 80295c2:	4313      	orrs	r3, r2
 80295c4:	693a      	ldr	r2, [r7, #16]
 80295c6:	4313      	orrs	r3, r2
 80295c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80295ca:	693b      	ldr	r3, [r7, #16]
 80295cc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80295d0:	f023 030c 	bic.w	r3, r3, #12
 80295d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80295d6:	693b      	ldr	r3, [r7, #16]
 80295d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80295dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80295e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80295e2:	683b      	ldr	r3, [r7, #0]
 80295e4:	68da      	ldr	r2, [r3, #12]
 80295e6:	683b      	ldr	r3, [r7, #0]
 80295e8:	69db      	ldr	r3, [r3, #28]
 80295ea:	021b      	lsls	r3, r3, #8
 80295ec:	4313      	orrs	r3, r2
 80295ee:	693a      	ldr	r2, [r7, #16]
 80295f0:	4313      	orrs	r3, r2
 80295f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80295f4:	683b      	ldr	r3, [r7, #0]
 80295f6:	691b      	ldr	r3, [r3, #16]
 80295f8:	011a      	lsls	r2, r3, #4
 80295fa:	683b      	ldr	r3, [r7, #0]
 80295fc:	6a1b      	ldr	r3, [r3, #32]
 80295fe:	031b      	lsls	r3, r3, #12
 8029600:	4313      	orrs	r3, r2
 8029602:	693a      	ldr	r2, [r7, #16]
 8029604:	4313      	orrs	r3, r2
 8029606:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8029608:	68fb      	ldr	r3, [r7, #12]
 802960a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 802960e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8029610:	68fb      	ldr	r3, [r7, #12]
 8029612:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8029616:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8029618:	683b      	ldr	r3, [r7, #0]
 802961a:	685a      	ldr	r2, [r3, #4]
 802961c:	683b      	ldr	r3, [r7, #0]
 802961e:	695b      	ldr	r3, [r3, #20]
 8029620:	011b      	lsls	r3, r3, #4
 8029622:	4313      	orrs	r3, r2
 8029624:	68fa      	ldr	r2, [r7, #12]
 8029626:	4313      	orrs	r3, r2
 8029628:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 802962a:	687b      	ldr	r3, [r7, #4]
 802962c:	681b      	ldr	r3, [r3, #0]
 802962e:	697a      	ldr	r2, [r7, #20]
 8029630:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8029632:	687b      	ldr	r3, [r7, #4]
 8029634:	681b      	ldr	r3, [r3, #0]
 8029636:	693a      	ldr	r2, [r7, #16]
 8029638:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 802963a:	687b      	ldr	r3, [r7, #4]
 802963c:	681b      	ldr	r3, [r3, #0]
 802963e:	68fa      	ldr	r2, [r7, #12]
 8029640:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8029642:	687b      	ldr	r3, [r7, #4]
 8029644:	2201      	movs	r2, #1
 8029646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802964a:	2300      	movs	r3, #0
}
 802964c:	4618      	mov	r0, r3
 802964e:	3718      	adds	r7, #24
 8029650:	46bd      	mov	sp, r7
 8029652:	bd80      	pop	{r7, pc}

08029654 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8029654:	b580      	push	{r7, lr}
 8029656:	b082      	sub	sp, #8
 8029658:	af00      	add	r7, sp, #0
 802965a:	6078      	str	r0, [r7, #4]
 802965c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 802965e:	683b      	ldr	r3, [r7, #0]
 8029660:	2b00      	cmp	r3, #0
 8029662:	d002      	beq.n	802966a <HAL_TIM_Encoder_Start+0x16>
 8029664:	2b04      	cmp	r3, #4
 8029666:	d008      	beq.n	802967a <HAL_TIM_Encoder_Start+0x26>
 8029668:	e00f      	b.n	802968a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 802966a:	687b      	ldr	r3, [r7, #4]
 802966c:	681b      	ldr	r3, [r3, #0]
 802966e:	2201      	movs	r2, #1
 8029670:	2100      	movs	r1, #0
 8029672:	4618      	mov	r0, r3
 8029674:	f000 fdbe 	bl	802a1f4 <TIM_CCxChannelCmd>
      break;
 8029678:	e016      	b.n	80296a8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 802967a:	687b      	ldr	r3, [r7, #4]
 802967c:	681b      	ldr	r3, [r3, #0]
 802967e:	2201      	movs	r2, #1
 8029680:	2104      	movs	r1, #4
 8029682:	4618      	mov	r0, r3
 8029684:	f000 fdb6 	bl	802a1f4 <TIM_CCxChannelCmd>
      break;
 8029688:	e00e      	b.n	80296a8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 802968a:	687b      	ldr	r3, [r7, #4]
 802968c:	681b      	ldr	r3, [r3, #0]
 802968e:	2201      	movs	r2, #1
 8029690:	2100      	movs	r1, #0
 8029692:	4618      	mov	r0, r3
 8029694:	f000 fdae 	bl	802a1f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8029698:	687b      	ldr	r3, [r7, #4]
 802969a:	681b      	ldr	r3, [r3, #0]
 802969c:	2201      	movs	r2, #1
 802969e:	2104      	movs	r1, #4
 80296a0:	4618      	mov	r0, r3
 80296a2:	f000 fda7 	bl	802a1f4 <TIM_CCxChannelCmd>
      break;
 80296a6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80296a8:	687b      	ldr	r3, [r7, #4]
 80296aa:	681b      	ldr	r3, [r3, #0]
 80296ac:	681a      	ldr	r2, [r3, #0]
 80296ae:	687b      	ldr	r3, [r7, #4]
 80296b0:	681b      	ldr	r3, [r3, #0]
 80296b2:	f042 0201 	orr.w	r2, r2, #1
 80296b6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80296b8:	2300      	movs	r3, #0
}
 80296ba:	4618      	mov	r0, r3
 80296bc:	3708      	adds	r7, #8
 80296be:	46bd      	mov	sp, r7
 80296c0:	bd80      	pop	{r7, pc}

080296c2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80296c2:	b580      	push	{r7, lr}
 80296c4:	b082      	sub	sp, #8
 80296c6:	af00      	add	r7, sp, #0
 80296c8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80296ca:	687b      	ldr	r3, [r7, #4]
 80296cc:	681b      	ldr	r3, [r3, #0]
 80296ce:	691b      	ldr	r3, [r3, #16]
 80296d0:	f003 0302 	and.w	r3, r3, #2
 80296d4:	2b02      	cmp	r3, #2
 80296d6:	d122      	bne.n	802971e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80296d8:	687b      	ldr	r3, [r7, #4]
 80296da:	681b      	ldr	r3, [r3, #0]
 80296dc:	68db      	ldr	r3, [r3, #12]
 80296de:	f003 0302 	and.w	r3, r3, #2
 80296e2:	2b02      	cmp	r3, #2
 80296e4:	d11b      	bne.n	802971e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80296e6:	687b      	ldr	r3, [r7, #4]
 80296e8:	681b      	ldr	r3, [r3, #0]
 80296ea:	f06f 0202 	mvn.w	r2, #2
 80296ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80296f0:	687b      	ldr	r3, [r7, #4]
 80296f2:	2201      	movs	r2, #1
 80296f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80296f6:	687b      	ldr	r3, [r7, #4]
 80296f8:	681b      	ldr	r3, [r3, #0]
 80296fa:	699b      	ldr	r3, [r3, #24]
 80296fc:	f003 0303 	and.w	r3, r3, #3
 8029700:	2b00      	cmp	r3, #0
 8029702:	d003      	beq.n	802970c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8029704:	6878      	ldr	r0, [r7, #4]
 8029706:	f000 fa6c 	bl	8029be2 <HAL_TIM_IC_CaptureCallback>
 802970a:	e005      	b.n	8029718 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 802970c:	6878      	ldr	r0, [r7, #4]
 802970e:	f000 fa5e 	bl	8029bce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029712:	6878      	ldr	r0, [r7, #4]
 8029714:	f000 fa6f 	bl	8029bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029718:	687b      	ldr	r3, [r7, #4]
 802971a:	2200      	movs	r2, #0
 802971c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 802971e:	687b      	ldr	r3, [r7, #4]
 8029720:	681b      	ldr	r3, [r3, #0]
 8029722:	691b      	ldr	r3, [r3, #16]
 8029724:	f003 0304 	and.w	r3, r3, #4
 8029728:	2b04      	cmp	r3, #4
 802972a:	d122      	bne.n	8029772 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 802972c:	687b      	ldr	r3, [r7, #4]
 802972e:	681b      	ldr	r3, [r3, #0]
 8029730:	68db      	ldr	r3, [r3, #12]
 8029732:	f003 0304 	and.w	r3, r3, #4
 8029736:	2b04      	cmp	r3, #4
 8029738:	d11b      	bne.n	8029772 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 802973a:	687b      	ldr	r3, [r7, #4]
 802973c:	681b      	ldr	r3, [r3, #0]
 802973e:	f06f 0204 	mvn.w	r2, #4
 8029742:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8029744:	687b      	ldr	r3, [r7, #4]
 8029746:	2202      	movs	r2, #2
 8029748:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 802974a:	687b      	ldr	r3, [r7, #4]
 802974c:	681b      	ldr	r3, [r3, #0]
 802974e:	699b      	ldr	r3, [r3, #24]
 8029750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8029754:	2b00      	cmp	r3, #0
 8029756:	d003      	beq.n	8029760 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029758:	6878      	ldr	r0, [r7, #4]
 802975a:	f000 fa42 	bl	8029be2 <HAL_TIM_IC_CaptureCallback>
 802975e:	e005      	b.n	802976c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029760:	6878      	ldr	r0, [r7, #4]
 8029762:	f000 fa34 	bl	8029bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029766:	6878      	ldr	r0, [r7, #4]
 8029768:	f000 fa45 	bl	8029bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802976c:	687b      	ldr	r3, [r7, #4]
 802976e:	2200      	movs	r2, #0
 8029770:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8029772:	687b      	ldr	r3, [r7, #4]
 8029774:	681b      	ldr	r3, [r3, #0]
 8029776:	691b      	ldr	r3, [r3, #16]
 8029778:	f003 0308 	and.w	r3, r3, #8
 802977c:	2b08      	cmp	r3, #8
 802977e:	d122      	bne.n	80297c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8029780:	687b      	ldr	r3, [r7, #4]
 8029782:	681b      	ldr	r3, [r3, #0]
 8029784:	68db      	ldr	r3, [r3, #12]
 8029786:	f003 0308 	and.w	r3, r3, #8
 802978a:	2b08      	cmp	r3, #8
 802978c:	d11b      	bne.n	80297c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 802978e:	687b      	ldr	r3, [r7, #4]
 8029790:	681b      	ldr	r3, [r3, #0]
 8029792:	f06f 0208 	mvn.w	r2, #8
 8029796:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8029798:	687b      	ldr	r3, [r7, #4]
 802979a:	2204      	movs	r2, #4
 802979c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 802979e:	687b      	ldr	r3, [r7, #4]
 80297a0:	681b      	ldr	r3, [r3, #0]
 80297a2:	69db      	ldr	r3, [r3, #28]
 80297a4:	f003 0303 	and.w	r3, r3, #3
 80297a8:	2b00      	cmp	r3, #0
 80297aa:	d003      	beq.n	80297b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80297ac:	6878      	ldr	r0, [r7, #4]
 80297ae:	f000 fa18 	bl	8029be2 <HAL_TIM_IC_CaptureCallback>
 80297b2:	e005      	b.n	80297c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80297b4:	6878      	ldr	r0, [r7, #4]
 80297b6:	f000 fa0a 	bl	8029bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80297ba:	6878      	ldr	r0, [r7, #4]
 80297bc:	f000 fa1b 	bl	8029bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80297c0:	687b      	ldr	r3, [r7, #4]
 80297c2:	2200      	movs	r2, #0
 80297c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80297c6:	687b      	ldr	r3, [r7, #4]
 80297c8:	681b      	ldr	r3, [r3, #0]
 80297ca:	691b      	ldr	r3, [r3, #16]
 80297cc:	f003 0310 	and.w	r3, r3, #16
 80297d0:	2b10      	cmp	r3, #16
 80297d2:	d122      	bne.n	802981a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80297d4:	687b      	ldr	r3, [r7, #4]
 80297d6:	681b      	ldr	r3, [r3, #0]
 80297d8:	68db      	ldr	r3, [r3, #12]
 80297da:	f003 0310 	and.w	r3, r3, #16
 80297de:	2b10      	cmp	r3, #16
 80297e0:	d11b      	bne.n	802981a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80297e2:	687b      	ldr	r3, [r7, #4]
 80297e4:	681b      	ldr	r3, [r3, #0]
 80297e6:	f06f 0210 	mvn.w	r2, #16
 80297ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80297ec:	687b      	ldr	r3, [r7, #4]
 80297ee:	2208      	movs	r2, #8
 80297f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80297f2:	687b      	ldr	r3, [r7, #4]
 80297f4:	681b      	ldr	r3, [r3, #0]
 80297f6:	69db      	ldr	r3, [r3, #28]
 80297f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80297fc:	2b00      	cmp	r3, #0
 80297fe:	d003      	beq.n	8029808 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029800:	6878      	ldr	r0, [r7, #4]
 8029802:	f000 f9ee 	bl	8029be2 <HAL_TIM_IC_CaptureCallback>
 8029806:	e005      	b.n	8029814 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029808:	6878      	ldr	r0, [r7, #4]
 802980a:	f000 f9e0 	bl	8029bce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802980e:	6878      	ldr	r0, [r7, #4]
 8029810:	f000 f9f1 	bl	8029bf6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029814:	687b      	ldr	r3, [r7, #4]
 8029816:	2200      	movs	r2, #0
 8029818:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 802981a:	687b      	ldr	r3, [r7, #4]
 802981c:	681b      	ldr	r3, [r3, #0]
 802981e:	691b      	ldr	r3, [r3, #16]
 8029820:	f003 0301 	and.w	r3, r3, #1
 8029824:	2b01      	cmp	r3, #1
 8029826:	d10e      	bne.n	8029846 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8029828:	687b      	ldr	r3, [r7, #4]
 802982a:	681b      	ldr	r3, [r3, #0]
 802982c:	68db      	ldr	r3, [r3, #12]
 802982e:	f003 0301 	and.w	r3, r3, #1
 8029832:	2b01      	cmp	r3, #1
 8029834:	d107      	bne.n	8029846 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8029836:	687b      	ldr	r3, [r7, #4]
 8029838:	681b      	ldr	r3, [r3, #0]
 802983a:	f06f 0201 	mvn.w	r2, #1
 802983e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8029840:	6878      	ldr	r0, [r7, #4]
 8029842:	f7f9 fd0b 	bl	802325c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8029846:	687b      	ldr	r3, [r7, #4]
 8029848:	681b      	ldr	r3, [r3, #0]
 802984a:	691b      	ldr	r3, [r3, #16]
 802984c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029850:	2b80      	cmp	r3, #128	; 0x80
 8029852:	d10e      	bne.n	8029872 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8029854:	687b      	ldr	r3, [r7, #4]
 8029856:	681b      	ldr	r3, [r3, #0]
 8029858:	68db      	ldr	r3, [r3, #12]
 802985a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802985e:	2b80      	cmp	r3, #128	; 0x80
 8029860:	d107      	bne.n	8029872 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8029862:	687b      	ldr	r3, [r7, #4]
 8029864:	681b      	ldr	r3, [r3, #0]
 8029866:	f06f 0280 	mvn.w	r2, #128	; 0x80
 802986a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 802986c:	6878      	ldr	r0, [r7, #4]
 802986e:	f000 fdbf 	bl	802a3f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8029872:	687b      	ldr	r3, [r7, #4]
 8029874:	681b      	ldr	r3, [r3, #0]
 8029876:	691b      	ldr	r3, [r3, #16]
 8029878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802987c:	2b40      	cmp	r3, #64	; 0x40
 802987e:	d10e      	bne.n	802989e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8029880:	687b      	ldr	r3, [r7, #4]
 8029882:	681b      	ldr	r3, [r3, #0]
 8029884:	68db      	ldr	r3, [r3, #12]
 8029886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802988a:	2b40      	cmp	r3, #64	; 0x40
 802988c:	d107      	bne.n	802989e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 802988e:	687b      	ldr	r3, [r7, #4]
 8029890:	681b      	ldr	r3, [r3, #0]
 8029892:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8029896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8029898:	6878      	ldr	r0, [r7, #4]
 802989a:	f000 f9b6 	bl	8029c0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 802989e:	687b      	ldr	r3, [r7, #4]
 80298a0:	681b      	ldr	r3, [r3, #0]
 80298a2:	691b      	ldr	r3, [r3, #16]
 80298a4:	f003 0320 	and.w	r3, r3, #32
 80298a8:	2b20      	cmp	r3, #32
 80298aa:	d10e      	bne.n	80298ca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80298ac:	687b      	ldr	r3, [r7, #4]
 80298ae:	681b      	ldr	r3, [r3, #0]
 80298b0:	68db      	ldr	r3, [r3, #12]
 80298b2:	f003 0320 	and.w	r3, r3, #32
 80298b6:	2b20      	cmp	r3, #32
 80298b8:	d107      	bne.n	80298ca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80298ba:	687b      	ldr	r3, [r7, #4]
 80298bc:	681b      	ldr	r3, [r3, #0]
 80298be:	f06f 0220 	mvn.w	r2, #32
 80298c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80298c4:	6878      	ldr	r0, [r7, #4]
 80298c6:	f000 fd89 	bl	802a3dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80298ca:	bf00      	nop
 80298cc:	3708      	adds	r7, #8
 80298ce:	46bd      	mov	sp, r7
 80298d0:	bd80      	pop	{r7, pc}
	...

080298d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80298d4:	b580      	push	{r7, lr}
 80298d6:	b084      	sub	sp, #16
 80298d8:	af00      	add	r7, sp, #0
 80298da:	60f8      	str	r0, [r7, #12]
 80298dc:	60b9      	str	r1, [r7, #8]
 80298de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80298e0:	68fb      	ldr	r3, [r7, #12]
 80298e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80298e6:	2b01      	cmp	r3, #1
 80298e8:	d101      	bne.n	80298ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80298ea:	2302      	movs	r3, #2
 80298ec:	e0b4      	b.n	8029a58 <HAL_TIM_PWM_ConfigChannel+0x184>
 80298ee:	68fb      	ldr	r3, [r7, #12]
 80298f0:	2201      	movs	r2, #1
 80298f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80298f6:	68fb      	ldr	r3, [r7, #12]
 80298f8:	2202      	movs	r2, #2
 80298fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80298fe:	687b      	ldr	r3, [r7, #4]
 8029900:	2b0c      	cmp	r3, #12
 8029902:	f200 809f 	bhi.w	8029a44 <HAL_TIM_PWM_ConfigChannel+0x170>
 8029906:	a201      	add	r2, pc, #4	; (adr r2, 802990c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8029908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802990c:	08029941 	.word	0x08029941
 8029910:	08029a45 	.word	0x08029a45
 8029914:	08029a45 	.word	0x08029a45
 8029918:	08029a45 	.word	0x08029a45
 802991c:	08029981 	.word	0x08029981
 8029920:	08029a45 	.word	0x08029a45
 8029924:	08029a45 	.word	0x08029a45
 8029928:	08029a45 	.word	0x08029a45
 802992c:	080299c3 	.word	0x080299c3
 8029930:	08029a45 	.word	0x08029a45
 8029934:	08029a45 	.word	0x08029a45
 8029938:	08029a45 	.word	0x08029a45
 802993c:	08029a03 	.word	0x08029a03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8029940:	68fb      	ldr	r3, [r7, #12]
 8029942:	681b      	ldr	r3, [r3, #0]
 8029944:	68b9      	ldr	r1, [r7, #8]
 8029946:	4618      	mov	r0, r3
 8029948:	f000 fa0a 	bl	8029d60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 802994c:	68fb      	ldr	r3, [r7, #12]
 802994e:	681b      	ldr	r3, [r3, #0]
 8029950:	699a      	ldr	r2, [r3, #24]
 8029952:	68fb      	ldr	r3, [r7, #12]
 8029954:	681b      	ldr	r3, [r3, #0]
 8029956:	f042 0208 	orr.w	r2, r2, #8
 802995a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 802995c:	68fb      	ldr	r3, [r7, #12]
 802995e:	681b      	ldr	r3, [r3, #0]
 8029960:	699a      	ldr	r2, [r3, #24]
 8029962:	68fb      	ldr	r3, [r7, #12]
 8029964:	681b      	ldr	r3, [r3, #0]
 8029966:	f022 0204 	bic.w	r2, r2, #4
 802996a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 802996c:	68fb      	ldr	r3, [r7, #12]
 802996e:	681b      	ldr	r3, [r3, #0]
 8029970:	6999      	ldr	r1, [r3, #24]
 8029972:	68bb      	ldr	r3, [r7, #8]
 8029974:	691a      	ldr	r2, [r3, #16]
 8029976:	68fb      	ldr	r3, [r7, #12]
 8029978:	681b      	ldr	r3, [r3, #0]
 802997a:	430a      	orrs	r2, r1
 802997c:	619a      	str	r2, [r3, #24]
      break;
 802997e:	e062      	b.n	8029a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8029980:	68fb      	ldr	r3, [r7, #12]
 8029982:	681b      	ldr	r3, [r3, #0]
 8029984:	68b9      	ldr	r1, [r7, #8]
 8029986:	4618      	mov	r0, r3
 8029988:	f000 fa5a 	bl	8029e40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 802998c:	68fb      	ldr	r3, [r7, #12]
 802998e:	681b      	ldr	r3, [r3, #0]
 8029990:	699a      	ldr	r2, [r3, #24]
 8029992:	68fb      	ldr	r3, [r7, #12]
 8029994:	681b      	ldr	r3, [r3, #0]
 8029996:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802999a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 802999c:	68fb      	ldr	r3, [r7, #12]
 802999e:	681b      	ldr	r3, [r3, #0]
 80299a0:	699a      	ldr	r2, [r3, #24]
 80299a2:	68fb      	ldr	r3, [r7, #12]
 80299a4:	681b      	ldr	r3, [r3, #0]
 80299a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80299aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80299ac:	68fb      	ldr	r3, [r7, #12]
 80299ae:	681b      	ldr	r3, [r3, #0]
 80299b0:	6999      	ldr	r1, [r3, #24]
 80299b2:	68bb      	ldr	r3, [r7, #8]
 80299b4:	691b      	ldr	r3, [r3, #16]
 80299b6:	021a      	lsls	r2, r3, #8
 80299b8:	68fb      	ldr	r3, [r7, #12]
 80299ba:	681b      	ldr	r3, [r3, #0]
 80299bc:	430a      	orrs	r2, r1
 80299be:	619a      	str	r2, [r3, #24]
      break;
 80299c0:	e041      	b.n	8029a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80299c2:	68fb      	ldr	r3, [r7, #12]
 80299c4:	681b      	ldr	r3, [r3, #0]
 80299c6:	68b9      	ldr	r1, [r7, #8]
 80299c8:	4618      	mov	r0, r3
 80299ca:	f000 faaf 	bl	8029f2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80299ce:	68fb      	ldr	r3, [r7, #12]
 80299d0:	681b      	ldr	r3, [r3, #0]
 80299d2:	69da      	ldr	r2, [r3, #28]
 80299d4:	68fb      	ldr	r3, [r7, #12]
 80299d6:	681b      	ldr	r3, [r3, #0]
 80299d8:	f042 0208 	orr.w	r2, r2, #8
 80299dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80299de:	68fb      	ldr	r3, [r7, #12]
 80299e0:	681b      	ldr	r3, [r3, #0]
 80299e2:	69da      	ldr	r2, [r3, #28]
 80299e4:	68fb      	ldr	r3, [r7, #12]
 80299e6:	681b      	ldr	r3, [r3, #0]
 80299e8:	f022 0204 	bic.w	r2, r2, #4
 80299ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80299ee:	68fb      	ldr	r3, [r7, #12]
 80299f0:	681b      	ldr	r3, [r3, #0]
 80299f2:	69d9      	ldr	r1, [r3, #28]
 80299f4:	68bb      	ldr	r3, [r7, #8]
 80299f6:	691a      	ldr	r2, [r3, #16]
 80299f8:	68fb      	ldr	r3, [r7, #12]
 80299fa:	681b      	ldr	r3, [r3, #0]
 80299fc:	430a      	orrs	r2, r1
 80299fe:	61da      	str	r2, [r3, #28]
      break;
 8029a00:	e021      	b.n	8029a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8029a02:	68fb      	ldr	r3, [r7, #12]
 8029a04:	681b      	ldr	r3, [r3, #0]
 8029a06:	68b9      	ldr	r1, [r7, #8]
 8029a08:	4618      	mov	r0, r3
 8029a0a:	f000 fb03 	bl	802a014 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8029a0e:	68fb      	ldr	r3, [r7, #12]
 8029a10:	681b      	ldr	r3, [r3, #0]
 8029a12:	69da      	ldr	r2, [r3, #28]
 8029a14:	68fb      	ldr	r3, [r7, #12]
 8029a16:	681b      	ldr	r3, [r3, #0]
 8029a18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8029a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8029a1e:	68fb      	ldr	r3, [r7, #12]
 8029a20:	681b      	ldr	r3, [r3, #0]
 8029a22:	69da      	ldr	r2, [r3, #28]
 8029a24:	68fb      	ldr	r3, [r7, #12]
 8029a26:	681b      	ldr	r3, [r3, #0]
 8029a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8029a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8029a2e:	68fb      	ldr	r3, [r7, #12]
 8029a30:	681b      	ldr	r3, [r3, #0]
 8029a32:	69d9      	ldr	r1, [r3, #28]
 8029a34:	68bb      	ldr	r3, [r7, #8]
 8029a36:	691b      	ldr	r3, [r3, #16]
 8029a38:	021a      	lsls	r2, r3, #8
 8029a3a:	68fb      	ldr	r3, [r7, #12]
 8029a3c:	681b      	ldr	r3, [r3, #0]
 8029a3e:	430a      	orrs	r2, r1
 8029a40:	61da      	str	r2, [r3, #28]
      break;
 8029a42:	e000      	b.n	8029a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8029a44:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8029a46:	68fb      	ldr	r3, [r7, #12]
 8029a48:	2201      	movs	r2, #1
 8029a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8029a4e:	68fb      	ldr	r3, [r7, #12]
 8029a50:	2200      	movs	r2, #0
 8029a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8029a56:	2300      	movs	r3, #0
}
 8029a58:	4618      	mov	r0, r3
 8029a5a:	3710      	adds	r7, #16
 8029a5c:	46bd      	mov	sp, r7
 8029a5e:	bd80      	pop	{r7, pc}

08029a60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8029a60:	b580      	push	{r7, lr}
 8029a62:	b084      	sub	sp, #16
 8029a64:	af00      	add	r7, sp, #0
 8029a66:	6078      	str	r0, [r7, #4]
 8029a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8029a6a:	687b      	ldr	r3, [r7, #4]
 8029a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029a70:	2b01      	cmp	r3, #1
 8029a72:	d101      	bne.n	8029a78 <HAL_TIM_ConfigClockSource+0x18>
 8029a74:	2302      	movs	r3, #2
 8029a76:	e0a6      	b.n	8029bc6 <HAL_TIM_ConfigClockSource+0x166>
 8029a78:	687b      	ldr	r3, [r7, #4]
 8029a7a:	2201      	movs	r2, #1
 8029a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8029a80:	687b      	ldr	r3, [r7, #4]
 8029a82:	2202      	movs	r2, #2
 8029a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8029a88:	687b      	ldr	r3, [r7, #4]
 8029a8a:	681b      	ldr	r3, [r3, #0]
 8029a8c:	689b      	ldr	r3, [r3, #8]
 8029a8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8029a90:	68fb      	ldr	r3, [r7, #12]
 8029a92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8029a96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8029a98:	68fb      	ldr	r3, [r7, #12]
 8029a9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8029a9e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8029aa0:	687b      	ldr	r3, [r7, #4]
 8029aa2:	681b      	ldr	r3, [r3, #0]
 8029aa4:	68fa      	ldr	r2, [r7, #12]
 8029aa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8029aa8:	683b      	ldr	r3, [r7, #0]
 8029aaa:	681b      	ldr	r3, [r3, #0]
 8029aac:	2b40      	cmp	r3, #64	; 0x40
 8029aae:	d067      	beq.n	8029b80 <HAL_TIM_ConfigClockSource+0x120>
 8029ab0:	2b40      	cmp	r3, #64	; 0x40
 8029ab2:	d80b      	bhi.n	8029acc <HAL_TIM_ConfigClockSource+0x6c>
 8029ab4:	2b10      	cmp	r3, #16
 8029ab6:	d073      	beq.n	8029ba0 <HAL_TIM_ConfigClockSource+0x140>
 8029ab8:	2b10      	cmp	r3, #16
 8029aba:	d802      	bhi.n	8029ac2 <HAL_TIM_ConfigClockSource+0x62>
 8029abc:	2b00      	cmp	r3, #0
 8029abe:	d06f      	beq.n	8029ba0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8029ac0:	e078      	b.n	8029bb4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8029ac2:	2b20      	cmp	r3, #32
 8029ac4:	d06c      	beq.n	8029ba0 <HAL_TIM_ConfigClockSource+0x140>
 8029ac6:	2b30      	cmp	r3, #48	; 0x30
 8029ac8:	d06a      	beq.n	8029ba0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8029aca:	e073      	b.n	8029bb4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8029acc:	2b70      	cmp	r3, #112	; 0x70
 8029ace:	d00d      	beq.n	8029aec <HAL_TIM_ConfigClockSource+0x8c>
 8029ad0:	2b70      	cmp	r3, #112	; 0x70
 8029ad2:	d804      	bhi.n	8029ade <HAL_TIM_ConfigClockSource+0x7e>
 8029ad4:	2b50      	cmp	r3, #80	; 0x50
 8029ad6:	d033      	beq.n	8029b40 <HAL_TIM_ConfigClockSource+0xe0>
 8029ad8:	2b60      	cmp	r3, #96	; 0x60
 8029ada:	d041      	beq.n	8029b60 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8029adc:	e06a      	b.n	8029bb4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8029ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029ae2:	d066      	beq.n	8029bb2 <HAL_TIM_ConfigClockSource+0x152>
 8029ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8029ae8:	d017      	beq.n	8029b1a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8029aea:	e063      	b.n	8029bb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8029aec:	687b      	ldr	r3, [r7, #4]
 8029aee:	6818      	ldr	r0, [r3, #0]
 8029af0:	683b      	ldr	r3, [r7, #0]
 8029af2:	6899      	ldr	r1, [r3, #8]
 8029af4:	683b      	ldr	r3, [r7, #0]
 8029af6:	685a      	ldr	r2, [r3, #4]
 8029af8:	683b      	ldr	r3, [r7, #0]
 8029afa:	68db      	ldr	r3, [r3, #12]
 8029afc:	f000 fb5a 	bl	802a1b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8029b00:	687b      	ldr	r3, [r7, #4]
 8029b02:	681b      	ldr	r3, [r3, #0]
 8029b04:	689b      	ldr	r3, [r3, #8]
 8029b06:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8029b08:	68fb      	ldr	r3, [r7, #12]
 8029b0a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8029b0e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8029b10:	687b      	ldr	r3, [r7, #4]
 8029b12:	681b      	ldr	r3, [r3, #0]
 8029b14:	68fa      	ldr	r2, [r7, #12]
 8029b16:	609a      	str	r2, [r3, #8]
      break;
 8029b18:	e04c      	b.n	8029bb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8029b1a:	687b      	ldr	r3, [r7, #4]
 8029b1c:	6818      	ldr	r0, [r3, #0]
 8029b1e:	683b      	ldr	r3, [r7, #0]
 8029b20:	6899      	ldr	r1, [r3, #8]
 8029b22:	683b      	ldr	r3, [r7, #0]
 8029b24:	685a      	ldr	r2, [r3, #4]
 8029b26:	683b      	ldr	r3, [r7, #0]
 8029b28:	68db      	ldr	r3, [r3, #12]
 8029b2a:	f000 fb43 	bl	802a1b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8029b2e:	687b      	ldr	r3, [r7, #4]
 8029b30:	681b      	ldr	r3, [r3, #0]
 8029b32:	689a      	ldr	r2, [r3, #8]
 8029b34:	687b      	ldr	r3, [r7, #4]
 8029b36:	681b      	ldr	r3, [r3, #0]
 8029b38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8029b3c:	609a      	str	r2, [r3, #8]
      break;
 8029b3e:	e039      	b.n	8029bb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8029b40:	687b      	ldr	r3, [r7, #4]
 8029b42:	6818      	ldr	r0, [r3, #0]
 8029b44:	683b      	ldr	r3, [r7, #0]
 8029b46:	6859      	ldr	r1, [r3, #4]
 8029b48:	683b      	ldr	r3, [r7, #0]
 8029b4a:	68db      	ldr	r3, [r3, #12]
 8029b4c:	461a      	mov	r2, r3
 8029b4e:	f000 fab7 	bl	802a0c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8029b52:	687b      	ldr	r3, [r7, #4]
 8029b54:	681b      	ldr	r3, [r3, #0]
 8029b56:	2150      	movs	r1, #80	; 0x50
 8029b58:	4618      	mov	r0, r3
 8029b5a:	f000 fb10 	bl	802a17e <TIM_ITRx_SetConfig>
      break;
 8029b5e:	e029      	b.n	8029bb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8029b60:	687b      	ldr	r3, [r7, #4]
 8029b62:	6818      	ldr	r0, [r3, #0]
 8029b64:	683b      	ldr	r3, [r7, #0]
 8029b66:	6859      	ldr	r1, [r3, #4]
 8029b68:	683b      	ldr	r3, [r7, #0]
 8029b6a:	68db      	ldr	r3, [r3, #12]
 8029b6c:	461a      	mov	r2, r3
 8029b6e:	f000 fad6 	bl	802a11e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8029b72:	687b      	ldr	r3, [r7, #4]
 8029b74:	681b      	ldr	r3, [r3, #0]
 8029b76:	2160      	movs	r1, #96	; 0x60
 8029b78:	4618      	mov	r0, r3
 8029b7a:	f000 fb00 	bl	802a17e <TIM_ITRx_SetConfig>
      break;
 8029b7e:	e019      	b.n	8029bb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8029b80:	687b      	ldr	r3, [r7, #4]
 8029b82:	6818      	ldr	r0, [r3, #0]
 8029b84:	683b      	ldr	r3, [r7, #0]
 8029b86:	6859      	ldr	r1, [r3, #4]
 8029b88:	683b      	ldr	r3, [r7, #0]
 8029b8a:	68db      	ldr	r3, [r3, #12]
 8029b8c:	461a      	mov	r2, r3
 8029b8e:	f000 fa97 	bl	802a0c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8029b92:	687b      	ldr	r3, [r7, #4]
 8029b94:	681b      	ldr	r3, [r3, #0]
 8029b96:	2140      	movs	r1, #64	; 0x40
 8029b98:	4618      	mov	r0, r3
 8029b9a:	f000 faf0 	bl	802a17e <TIM_ITRx_SetConfig>
      break;
 8029b9e:	e009      	b.n	8029bb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8029ba0:	687b      	ldr	r3, [r7, #4]
 8029ba2:	681a      	ldr	r2, [r3, #0]
 8029ba4:	683b      	ldr	r3, [r7, #0]
 8029ba6:	681b      	ldr	r3, [r3, #0]
 8029ba8:	4619      	mov	r1, r3
 8029baa:	4610      	mov	r0, r2
 8029bac:	f000 fae7 	bl	802a17e <TIM_ITRx_SetConfig>
      break;
 8029bb0:	e000      	b.n	8029bb4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8029bb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8029bb4:	687b      	ldr	r3, [r7, #4]
 8029bb6:	2201      	movs	r2, #1
 8029bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8029bbc:	687b      	ldr	r3, [r7, #4]
 8029bbe:	2200      	movs	r2, #0
 8029bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8029bc4:	2300      	movs	r3, #0
}
 8029bc6:	4618      	mov	r0, r3
 8029bc8:	3710      	adds	r7, #16
 8029bca:	46bd      	mov	sp, r7
 8029bcc:	bd80      	pop	{r7, pc}

08029bce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8029bce:	b480      	push	{r7}
 8029bd0:	b083      	sub	sp, #12
 8029bd2:	af00      	add	r7, sp, #0
 8029bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8029bd6:	bf00      	nop
 8029bd8:	370c      	adds	r7, #12
 8029bda:	46bd      	mov	sp, r7
 8029bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029be0:	4770      	bx	lr

08029be2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8029be2:	b480      	push	{r7}
 8029be4:	b083      	sub	sp, #12
 8029be6:	af00      	add	r7, sp, #0
 8029be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8029bea:	bf00      	nop
 8029bec:	370c      	adds	r7, #12
 8029bee:	46bd      	mov	sp, r7
 8029bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029bf4:	4770      	bx	lr

08029bf6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8029bf6:	b480      	push	{r7}
 8029bf8:	b083      	sub	sp, #12
 8029bfa:	af00      	add	r7, sp, #0
 8029bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8029bfe:	bf00      	nop
 8029c00:	370c      	adds	r7, #12
 8029c02:	46bd      	mov	sp, r7
 8029c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c08:	4770      	bx	lr

08029c0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8029c0a:	b480      	push	{r7}
 8029c0c:	b083      	sub	sp, #12
 8029c0e:	af00      	add	r7, sp, #0
 8029c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8029c12:	bf00      	nop
 8029c14:	370c      	adds	r7, #12
 8029c16:	46bd      	mov	sp, r7
 8029c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c1c:	4770      	bx	lr
	...

08029c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8029c20:	b480      	push	{r7}
 8029c22:	b085      	sub	sp, #20
 8029c24:	af00      	add	r7, sp, #0
 8029c26:	6078      	str	r0, [r7, #4]
 8029c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8029c2a:	687b      	ldr	r3, [r7, #4]
 8029c2c:	681b      	ldr	r3, [r3, #0]
 8029c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8029c30:	687b      	ldr	r3, [r7, #4]
 8029c32:	4a40      	ldr	r2, [pc, #256]	; (8029d34 <TIM_Base_SetConfig+0x114>)
 8029c34:	4293      	cmp	r3, r2
 8029c36:	d013      	beq.n	8029c60 <TIM_Base_SetConfig+0x40>
 8029c38:	687b      	ldr	r3, [r7, #4]
 8029c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029c3e:	d00f      	beq.n	8029c60 <TIM_Base_SetConfig+0x40>
 8029c40:	687b      	ldr	r3, [r7, #4]
 8029c42:	4a3d      	ldr	r2, [pc, #244]	; (8029d38 <TIM_Base_SetConfig+0x118>)
 8029c44:	4293      	cmp	r3, r2
 8029c46:	d00b      	beq.n	8029c60 <TIM_Base_SetConfig+0x40>
 8029c48:	687b      	ldr	r3, [r7, #4]
 8029c4a:	4a3c      	ldr	r2, [pc, #240]	; (8029d3c <TIM_Base_SetConfig+0x11c>)
 8029c4c:	4293      	cmp	r3, r2
 8029c4e:	d007      	beq.n	8029c60 <TIM_Base_SetConfig+0x40>
 8029c50:	687b      	ldr	r3, [r7, #4]
 8029c52:	4a3b      	ldr	r2, [pc, #236]	; (8029d40 <TIM_Base_SetConfig+0x120>)
 8029c54:	4293      	cmp	r3, r2
 8029c56:	d003      	beq.n	8029c60 <TIM_Base_SetConfig+0x40>
 8029c58:	687b      	ldr	r3, [r7, #4]
 8029c5a:	4a3a      	ldr	r2, [pc, #232]	; (8029d44 <TIM_Base_SetConfig+0x124>)
 8029c5c:	4293      	cmp	r3, r2
 8029c5e:	d108      	bne.n	8029c72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8029c60:	68fb      	ldr	r3, [r7, #12]
 8029c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8029c68:	683b      	ldr	r3, [r7, #0]
 8029c6a:	685b      	ldr	r3, [r3, #4]
 8029c6c:	68fa      	ldr	r2, [r7, #12]
 8029c6e:	4313      	orrs	r3, r2
 8029c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8029c72:	687b      	ldr	r3, [r7, #4]
 8029c74:	4a2f      	ldr	r2, [pc, #188]	; (8029d34 <TIM_Base_SetConfig+0x114>)
 8029c76:	4293      	cmp	r3, r2
 8029c78:	d02b      	beq.n	8029cd2 <TIM_Base_SetConfig+0xb2>
 8029c7a:	687b      	ldr	r3, [r7, #4]
 8029c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029c80:	d027      	beq.n	8029cd2 <TIM_Base_SetConfig+0xb2>
 8029c82:	687b      	ldr	r3, [r7, #4]
 8029c84:	4a2c      	ldr	r2, [pc, #176]	; (8029d38 <TIM_Base_SetConfig+0x118>)
 8029c86:	4293      	cmp	r3, r2
 8029c88:	d023      	beq.n	8029cd2 <TIM_Base_SetConfig+0xb2>
 8029c8a:	687b      	ldr	r3, [r7, #4]
 8029c8c:	4a2b      	ldr	r2, [pc, #172]	; (8029d3c <TIM_Base_SetConfig+0x11c>)
 8029c8e:	4293      	cmp	r3, r2
 8029c90:	d01f      	beq.n	8029cd2 <TIM_Base_SetConfig+0xb2>
 8029c92:	687b      	ldr	r3, [r7, #4]
 8029c94:	4a2a      	ldr	r2, [pc, #168]	; (8029d40 <TIM_Base_SetConfig+0x120>)
 8029c96:	4293      	cmp	r3, r2
 8029c98:	d01b      	beq.n	8029cd2 <TIM_Base_SetConfig+0xb2>
 8029c9a:	687b      	ldr	r3, [r7, #4]
 8029c9c:	4a29      	ldr	r2, [pc, #164]	; (8029d44 <TIM_Base_SetConfig+0x124>)
 8029c9e:	4293      	cmp	r3, r2
 8029ca0:	d017      	beq.n	8029cd2 <TIM_Base_SetConfig+0xb2>
 8029ca2:	687b      	ldr	r3, [r7, #4]
 8029ca4:	4a28      	ldr	r2, [pc, #160]	; (8029d48 <TIM_Base_SetConfig+0x128>)
 8029ca6:	4293      	cmp	r3, r2
 8029ca8:	d013      	beq.n	8029cd2 <TIM_Base_SetConfig+0xb2>
 8029caa:	687b      	ldr	r3, [r7, #4]
 8029cac:	4a27      	ldr	r2, [pc, #156]	; (8029d4c <TIM_Base_SetConfig+0x12c>)
 8029cae:	4293      	cmp	r3, r2
 8029cb0:	d00f      	beq.n	8029cd2 <TIM_Base_SetConfig+0xb2>
 8029cb2:	687b      	ldr	r3, [r7, #4]
 8029cb4:	4a26      	ldr	r2, [pc, #152]	; (8029d50 <TIM_Base_SetConfig+0x130>)
 8029cb6:	4293      	cmp	r3, r2
 8029cb8:	d00b      	beq.n	8029cd2 <TIM_Base_SetConfig+0xb2>
 8029cba:	687b      	ldr	r3, [r7, #4]
 8029cbc:	4a25      	ldr	r2, [pc, #148]	; (8029d54 <TIM_Base_SetConfig+0x134>)
 8029cbe:	4293      	cmp	r3, r2
 8029cc0:	d007      	beq.n	8029cd2 <TIM_Base_SetConfig+0xb2>
 8029cc2:	687b      	ldr	r3, [r7, #4]
 8029cc4:	4a24      	ldr	r2, [pc, #144]	; (8029d58 <TIM_Base_SetConfig+0x138>)
 8029cc6:	4293      	cmp	r3, r2
 8029cc8:	d003      	beq.n	8029cd2 <TIM_Base_SetConfig+0xb2>
 8029cca:	687b      	ldr	r3, [r7, #4]
 8029ccc:	4a23      	ldr	r2, [pc, #140]	; (8029d5c <TIM_Base_SetConfig+0x13c>)
 8029cce:	4293      	cmp	r3, r2
 8029cd0:	d108      	bne.n	8029ce4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8029cd2:	68fb      	ldr	r3, [r7, #12]
 8029cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8029cda:	683b      	ldr	r3, [r7, #0]
 8029cdc:	68db      	ldr	r3, [r3, #12]
 8029cde:	68fa      	ldr	r2, [r7, #12]
 8029ce0:	4313      	orrs	r3, r2
 8029ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8029ce4:	68fb      	ldr	r3, [r7, #12]
 8029ce6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8029cea:	683b      	ldr	r3, [r7, #0]
 8029cec:	695b      	ldr	r3, [r3, #20]
 8029cee:	4313      	orrs	r3, r2
 8029cf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8029cf2:	687b      	ldr	r3, [r7, #4]
 8029cf4:	68fa      	ldr	r2, [r7, #12]
 8029cf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8029cf8:	683b      	ldr	r3, [r7, #0]
 8029cfa:	689a      	ldr	r2, [r3, #8]
 8029cfc:	687b      	ldr	r3, [r7, #4]
 8029cfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8029d00:	683b      	ldr	r3, [r7, #0]
 8029d02:	681a      	ldr	r2, [r3, #0]
 8029d04:	687b      	ldr	r3, [r7, #4]
 8029d06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8029d08:	687b      	ldr	r3, [r7, #4]
 8029d0a:	4a0a      	ldr	r2, [pc, #40]	; (8029d34 <TIM_Base_SetConfig+0x114>)
 8029d0c:	4293      	cmp	r3, r2
 8029d0e:	d003      	beq.n	8029d18 <TIM_Base_SetConfig+0xf8>
 8029d10:	687b      	ldr	r3, [r7, #4]
 8029d12:	4a0c      	ldr	r2, [pc, #48]	; (8029d44 <TIM_Base_SetConfig+0x124>)
 8029d14:	4293      	cmp	r3, r2
 8029d16:	d103      	bne.n	8029d20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8029d18:	683b      	ldr	r3, [r7, #0]
 8029d1a:	691a      	ldr	r2, [r3, #16]
 8029d1c:	687b      	ldr	r3, [r7, #4]
 8029d1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8029d20:	687b      	ldr	r3, [r7, #4]
 8029d22:	2201      	movs	r2, #1
 8029d24:	615a      	str	r2, [r3, #20]
}
 8029d26:	bf00      	nop
 8029d28:	3714      	adds	r7, #20
 8029d2a:	46bd      	mov	sp, r7
 8029d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d30:	4770      	bx	lr
 8029d32:	bf00      	nop
 8029d34:	40010000 	.word	0x40010000
 8029d38:	40000400 	.word	0x40000400
 8029d3c:	40000800 	.word	0x40000800
 8029d40:	40000c00 	.word	0x40000c00
 8029d44:	40010400 	.word	0x40010400
 8029d48:	40014000 	.word	0x40014000
 8029d4c:	40014400 	.word	0x40014400
 8029d50:	40014800 	.word	0x40014800
 8029d54:	40001800 	.word	0x40001800
 8029d58:	40001c00 	.word	0x40001c00
 8029d5c:	40002000 	.word	0x40002000

08029d60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029d60:	b480      	push	{r7}
 8029d62:	b087      	sub	sp, #28
 8029d64:	af00      	add	r7, sp, #0
 8029d66:	6078      	str	r0, [r7, #4]
 8029d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8029d6a:	687b      	ldr	r3, [r7, #4]
 8029d6c:	6a1b      	ldr	r3, [r3, #32]
 8029d6e:	f023 0201 	bic.w	r2, r3, #1
 8029d72:	687b      	ldr	r3, [r7, #4]
 8029d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029d76:	687b      	ldr	r3, [r7, #4]
 8029d78:	6a1b      	ldr	r3, [r3, #32]
 8029d7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029d7c:	687b      	ldr	r3, [r7, #4]
 8029d7e:	685b      	ldr	r3, [r3, #4]
 8029d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8029d82:	687b      	ldr	r3, [r7, #4]
 8029d84:	699b      	ldr	r3, [r3, #24]
 8029d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8029d88:	68fb      	ldr	r3, [r7, #12]
 8029d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8029d90:	68fb      	ldr	r3, [r7, #12]
 8029d92:	f023 0303 	bic.w	r3, r3, #3
 8029d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8029d98:	683b      	ldr	r3, [r7, #0]
 8029d9a:	681b      	ldr	r3, [r3, #0]
 8029d9c:	68fa      	ldr	r2, [r7, #12]
 8029d9e:	4313      	orrs	r3, r2
 8029da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8029da2:	697b      	ldr	r3, [r7, #20]
 8029da4:	f023 0302 	bic.w	r3, r3, #2
 8029da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8029daa:	683b      	ldr	r3, [r7, #0]
 8029dac:	689b      	ldr	r3, [r3, #8]
 8029dae:	697a      	ldr	r2, [r7, #20]
 8029db0:	4313      	orrs	r3, r2
 8029db2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8029db4:	687b      	ldr	r3, [r7, #4]
 8029db6:	4a20      	ldr	r2, [pc, #128]	; (8029e38 <TIM_OC1_SetConfig+0xd8>)
 8029db8:	4293      	cmp	r3, r2
 8029dba:	d003      	beq.n	8029dc4 <TIM_OC1_SetConfig+0x64>
 8029dbc:	687b      	ldr	r3, [r7, #4]
 8029dbe:	4a1f      	ldr	r2, [pc, #124]	; (8029e3c <TIM_OC1_SetConfig+0xdc>)
 8029dc0:	4293      	cmp	r3, r2
 8029dc2:	d10c      	bne.n	8029dde <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8029dc4:	697b      	ldr	r3, [r7, #20]
 8029dc6:	f023 0308 	bic.w	r3, r3, #8
 8029dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8029dcc:	683b      	ldr	r3, [r7, #0]
 8029dce:	68db      	ldr	r3, [r3, #12]
 8029dd0:	697a      	ldr	r2, [r7, #20]
 8029dd2:	4313      	orrs	r3, r2
 8029dd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8029dd6:	697b      	ldr	r3, [r7, #20]
 8029dd8:	f023 0304 	bic.w	r3, r3, #4
 8029ddc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029dde:	687b      	ldr	r3, [r7, #4]
 8029de0:	4a15      	ldr	r2, [pc, #84]	; (8029e38 <TIM_OC1_SetConfig+0xd8>)
 8029de2:	4293      	cmp	r3, r2
 8029de4:	d003      	beq.n	8029dee <TIM_OC1_SetConfig+0x8e>
 8029de6:	687b      	ldr	r3, [r7, #4]
 8029de8:	4a14      	ldr	r2, [pc, #80]	; (8029e3c <TIM_OC1_SetConfig+0xdc>)
 8029dea:	4293      	cmp	r3, r2
 8029dec:	d111      	bne.n	8029e12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8029dee:	693b      	ldr	r3, [r7, #16]
 8029df0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8029df4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8029df6:	693b      	ldr	r3, [r7, #16]
 8029df8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8029dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8029dfe:	683b      	ldr	r3, [r7, #0]
 8029e00:	695b      	ldr	r3, [r3, #20]
 8029e02:	693a      	ldr	r2, [r7, #16]
 8029e04:	4313      	orrs	r3, r2
 8029e06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8029e08:	683b      	ldr	r3, [r7, #0]
 8029e0a:	699b      	ldr	r3, [r3, #24]
 8029e0c:	693a      	ldr	r2, [r7, #16]
 8029e0e:	4313      	orrs	r3, r2
 8029e10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8029e12:	687b      	ldr	r3, [r7, #4]
 8029e14:	693a      	ldr	r2, [r7, #16]
 8029e16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8029e18:	687b      	ldr	r3, [r7, #4]
 8029e1a:	68fa      	ldr	r2, [r7, #12]
 8029e1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8029e1e:	683b      	ldr	r3, [r7, #0]
 8029e20:	685a      	ldr	r2, [r3, #4]
 8029e22:	687b      	ldr	r3, [r7, #4]
 8029e24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8029e26:	687b      	ldr	r3, [r7, #4]
 8029e28:	697a      	ldr	r2, [r7, #20]
 8029e2a:	621a      	str	r2, [r3, #32]
}
 8029e2c:	bf00      	nop
 8029e2e:	371c      	adds	r7, #28
 8029e30:	46bd      	mov	sp, r7
 8029e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e36:	4770      	bx	lr
 8029e38:	40010000 	.word	0x40010000
 8029e3c:	40010400 	.word	0x40010400

08029e40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029e40:	b480      	push	{r7}
 8029e42:	b087      	sub	sp, #28
 8029e44:	af00      	add	r7, sp, #0
 8029e46:	6078      	str	r0, [r7, #4]
 8029e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8029e4a:	687b      	ldr	r3, [r7, #4]
 8029e4c:	6a1b      	ldr	r3, [r3, #32]
 8029e4e:	f023 0210 	bic.w	r2, r3, #16
 8029e52:	687b      	ldr	r3, [r7, #4]
 8029e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029e56:	687b      	ldr	r3, [r7, #4]
 8029e58:	6a1b      	ldr	r3, [r3, #32]
 8029e5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029e5c:	687b      	ldr	r3, [r7, #4]
 8029e5e:	685b      	ldr	r3, [r3, #4]
 8029e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8029e62:	687b      	ldr	r3, [r7, #4]
 8029e64:	699b      	ldr	r3, [r3, #24]
 8029e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8029e68:	68fb      	ldr	r3, [r7, #12]
 8029e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8029e70:	68fb      	ldr	r3, [r7, #12]
 8029e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8029e78:	683b      	ldr	r3, [r7, #0]
 8029e7a:	681b      	ldr	r3, [r3, #0]
 8029e7c:	021b      	lsls	r3, r3, #8
 8029e7e:	68fa      	ldr	r2, [r7, #12]
 8029e80:	4313      	orrs	r3, r2
 8029e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8029e84:	697b      	ldr	r3, [r7, #20]
 8029e86:	f023 0320 	bic.w	r3, r3, #32
 8029e8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8029e8c:	683b      	ldr	r3, [r7, #0]
 8029e8e:	689b      	ldr	r3, [r3, #8]
 8029e90:	011b      	lsls	r3, r3, #4
 8029e92:	697a      	ldr	r2, [r7, #20]
 8029e94:	4313      	orrs	r3, r2
 8029e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8029e98:	687b      	ldr	r3, [r7, #4]
 8029e9a:	4a22      	ldr	r2, [pc, #136]	; (8029f24 <TIM_OC2_SetConfig+0xe4>)
 8029e9c:	4293      	cmp	r3, r2
 8029e9e:	d003      	beq.n	8029ea8 <TIM_OC2_SetConfig+0x68>
 8029ea0:	687b      	ldr	r3, [r7, #4]
 8029ea2:	4a21      	ldr	r2, [pc, #132]	; (8029f28 <TIM_OC2_SetConfig+0xe8>)
 8029ea4:	4293      	cmp	r3, r2
 8029ea6:	d10d      	bne.n	8029ec4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8029ea8:	697b      	ldr	r3, [r7, #20]
 8029eaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8029eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8029eb0:	683b      	ldr	r3, [r7, #0]
 8029eb2:	68db      	ldr	r3, [r3, #12]
 8029eb4:	011b      	lsls	r3, r3, #4
 8029eb6:	697a      	ldr	r2, [r7, #20]
 8029eb8:	4313      	orrs	r3, r2
 8029eba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8029ebc:	697b      	ldr	r3, [r7, #20]
 8029ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029ec2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029ec4:	687b      	ldr	r3, [r7, #4]
 8029ec6:	4a17      	ldr	r2, [pc, #92]	; (8029f24 <TIM_OC2_SetConfig+0xe4>)
 8029ec8:	4293      	cmp	r3, r2
 8029eca:	d003      	beq.n	8029ed4 <TIM_OC2_SetConfig+0x94>
 8029ecc:	687b      	ldr	r3, [r7, #4]
 8029ece:	4a16      	ldr	r2, [pc, #88]	; (8029f28 <TIM_OC2_SetConfig+0xe8>)
 8029ed0:	4293      	cmp	r3, r2
 8029ed2:	d113      	bne.n	8029efc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8029ed4:	693b      	ldr	r3, [r7, #16]
 8029ed6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8029eda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8029edc:	693b      	ldr	r3, [r7, #16]
 8029ede:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8029ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8029ee4:	683b      	ldr	r3, [r7, #0]
 8029ee6:	695b      	ldr	r3, [r3, #20]
 8029ee8:	009b      	lsls	r3, r3, #2
 8029eea:	693a      	ldr	r2, [r7, #16]
 8029eec:	4313      	orrs	r3, r2
 8029eee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8029ef0:	683b      	ldr	r3, [r7, #0]
 8029ef2:	699b      	ldr	r3, [r3, #24]
 8029ef4:	009b      	lsls	r3, r3, #2
 8029ef6:	693a      	ldr	r2, [r7, #16]
 8029ef8:	4313      	orrs	r3, r2
 8029efa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8029efc:	687b      	ldr	r3, [r7, #4]
 8029efe:	693a      	ldr	r2, [r7, #16]
 8029f00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8029f02:	687b      	ldr	r3, [r7, #4]
 8029f04:	68fa      	ldr	r2, [r7, #12]
 8029f06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8029f08:	683b      	ldr	r3, [r7, #0]
 8029f0a:	685a      	ldr	r2, [r3, #4]
 8029f0c:	687b      	ldr	r3, [r7, #4]
 8029f0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8029f10:	687b      	ldr	r3, [r7, #4]
 8029f12:	697a      	ldr	r2, [r7, #20]
 8029f14:	621a      	str	r2, [r3, #32]
}
 8029f16:	bf00      	nop
 8029f18:	371c      	adds	r7, #28
 8029f1a:	46bd      	mov	sp, r7
 8029f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f20:	4770      	bx	lr
 8029f22:	bf00      	nop
 8029f24:	40010000 	.word	0x40010000
 8029f28:	40010400 	.word	0x40010400

08029f2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029f2c:	b480      	push	{r7}
 8029f2e:	b087      	sub	sp, #28
 8029f30:	af00      	add	r7, sp, #0
 8029f32:	6078      	str	r0, [r7, #4]
 8029f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8029f36:	687b      	ldr	r3, [r7, #4]
 8029f38:	6a1b      	ldr	r3, [r3, #32]
 8029f3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8029f3e:	687b      	ldr	r3, [r7, #4]
 8029f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029f42:	687b      	ldr	r3, [r7, #4]
 8029f44:	6a1b      	ldr	r3, [r3, #32]
 8029f46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029f48:	687b      	ldr	r3, [r7, #4]
 8029f4a:	685b      	ldr	r3, [r3, #4]
 8029f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8029f4e:	687b      	ldr	r3, [r7, #4]
 8029f50:	69db      	ldr	r3, [r3, #28]
 8029f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8029f54:	68fb      	ldr	r3, [r7, #12]
 8029f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8029f5c:	68fb      	ldr	r3, [r7, #12]
 8029f5e:	f023 0303 	bic.w	r3, r3, #3
 8029f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8029f64:	683b      	ldr	r3, [r7, #0]
 8029f66:	681b      	ldr	r3, [r3, #0]
 8029f68:	68fa      	ldr	r2, [r7, #12]
 8029f6a:	4313      	orrs	r3, r2
 8029f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8029f6e:	697b      	ldr	r3, [r7, #20]
 8029f70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8029f74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8029f76:	683b      	ldr	r3, [r7, #0]
 8029f78:	689b      	ldr	r3, [r3, #8]
 8029f7a:	021b      	lsls	r3, r3, #8
 8029f7c:	697a      	ldr	r2, [r7, #20]
 8029f7e:	4313      	orrs	r3, r2
 8029f80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8029f82:	687b      	ldr	r3, [r7, #4]
 8029f84:	4a21      	ldr	r2, [pc, #132]	; (802a00c <TIM_OC3_SetConfig+0xe0>)
 8029f86:	4293      	cmp	r3, r2
 8029f88:	d003      	beq.n	8029f92 <TIM_OC3_SetConfig+0x66>
 8029f8a:	687b      	ldr	r3, [r7, #4]
 8029f8c:	4a20      	ldr	r2, [pc, #128]	; (802a010 <TIM_OC3_SetConfig+0xe4>)
 8029f8e:	4293      	cmp	r3, r2
 8029f90:	d10d      	bne.n	8029fae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8029f92:	697b      	ldr	r3, [r7, #20]
 8029f94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8029f98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8029f9a:	683b      	ldr	r3, [r7, #0]
 8029f9c:	68db      	ldr	r3, [r3, #12]
 8029f9e:	021b      	lsls	r3, r3, #8
 8029fa0:	697a      	ldr	r2, [r7, #20]
 8029fa2:	4313      	orrs	r3, r2
 8029fa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8029fa6:	697b      	ldr	r3, [r7, #20]
 8029fa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8029fac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029fae:	687b      	ldr	r3, [r7, #4]
 8029fb0:	4a16      	ldr	r2, [pc, #88]	; (802a00c <TIM_OC3_SetConfig+0xe0>)
 8029fb2:	4293      	cmp	r3, r2
 8029fb4:	d003      	beq.n	8029fbe <TIM_OC3_SetConfig+0x92>
 8029fb6:	687b      	ldr	r3, [r7, #4]
 8029fb8:	4a15      	ldr	r2, [pc, #84]	; (802a010 <TIM_OC3_SetConfig+0xe4>)
 8029fba:	4293      	cmp	r3, r2
 8029fbc:	d113      	bne.n	8029fe6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8029fbe:	693b      	ldr	r3, [r7, #16]
 8029fc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8029fc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8029fc6:	693b      	ldr	r3, [r7, #16]
 8029fc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8029fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8029fce:	683b      	ldr	r3, [r7, #0]
 8029fd0:	695b      	ldr	r3, [r3, #20]
 8029fd2:	011b      	lsls	r3, r3, #4
 8029fd4:	693a      	ldr	r2, [r7, #16]
 8029fd6:	4313      	orrs	r3, r2
 8029fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8029fda:	683b      	ldr	r3, [r7, #0]
 8029fdc:	699b      	ldr	r3, [r3, #24]
 8029fde:	011b      	lsls	r3, r3, #4
 8029fe0:	693a      	ldr	r2, [r7, #16]
 8029fe2:	4313      	orrs	r3, r2
 8029fe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8029fe6:	687b      	ldr	r3, [r7, #4]
 8029fe8:	693a      	ldr	r2, [r7, #16]
 8029fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8029fec:	687b      	ldr	r3, [r7, #4]
 8029fee:	68fa      	ldr	r2, [r7, #12]
 8029ff0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8029ff2:	683b      	ldr	r3, [r7, #0]
 8029ff4:	685a      	ldr	r2, [r3, #4]
 8029ff6:	687b      	ldr	r3, [r7, #4]
 8029ff8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8029ffa:	687b      	ldr	r3, [r7, #4]
 8029ffc:	697a      	ldr	r2, [r7, #20]
 8029ffe:	621a      	str	r2, [r3, #32]
}
 802a000:	bf00      	nop
 802a002:	371c      	adds	r7, #28
 802a004:	46bd      	mov	sp, r7
 802a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a00a:	4770      	bx	lr
 802a00c:	40010000 	.word	0x40010000
 802a010:	40010400 	.word	0x40010400

0802a014 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802a014:	b480      	push	{r7}
 802a016:	b087      	sub	sp, #28
 802a018:	af00      	add	r7, sp, #0
 802a01a:	6078      	str	r0, [r7, #4]
 802a01c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 802a01e:	687b      	ldr	r3, [r7, #4]
 802a020:	6a1b      	ldr	r3, [r3, #32]
 802a022:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802a026:	687b      	ldr	r3, [r7, #4]
 802a028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802a02a:	687b      	ldr	r3, [r7, #4]
 802a02c:	6a1b      	ldr	r3, [r3, #32]
 802a02e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802a030:	687b      	ldr	r3, [r7, #4]
 802a032:	685b      	ldr	r3, [r3, #4]
 802a034:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802a036:	687b      	ldr	r3, [r7, #4]
 802a038:	69db      	ldr	r3, [r3, #28]
 802a03a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 802a03c:	68fb      	ldr	r3, [r7, #12]
 802a03e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802a042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 802a044:	68fb      	ldr	r3, [r7, #12]
 802a046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a04a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 802a04c:	683b      	ldr	r3, [r7, #0]
 802a04e:	681b      	ldr	r3, [r3, #0]
 802a050:	021b      	lsls	r3, r3, #8
 802a052:	68fa      	ldr	r2, [r7, #12]
 802a054:	4313      	orrs	r3, r2
 802a056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 802a058:	693b      	ldr	r3, [r7, #16]
 802a05a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802a05e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 802a060:	683b      	ldr	r3, [r7, #0]
 802a062:	689b      	ldr	r3, [r3, #8]
 802a064:	031b      	lsls	r3, r3, #12
 802a066:	693a      	ldr	r2, [r7, #16]
 802a068:	4313      	orrs	r3, r2
 802a06a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802a06c:	687b      	ldr	r3, [r7, #4]
 802a06e:	4a12      	ldr	r2, [pc, #72]	; (802a0b8 <TIM_OC4_SetConfig+0xa4>)
 802a070:	4293      	cmp	r3, r2
 802a072:	d003      	beq.n	802a07c <TIM_OC4_SetConfig+0x68>
 802a074:	687b      	ldr	r3, [r7, #4]
 802a076:	4a11      	ldr	r2, [pc, #68]	; (802a0bc <TIM_OC4_SetConfig+0xa8>)
 802a078:	4293      	cmp	r3, r2
 802a07a:	d109      	bne.n	802a090 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 802a07c:	697b      	ldr	r3, [r7, #20]
 802a07e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 802a082:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 802a084:	683b      	ldr	r3, [r7, #0]
 802a086:	695b      	ldr	r3, [r3, #20]
 802a088:	019b      	lsls	r3, r3, #6
 802a08a:	697a      	ldr	r2, [r7, #20]
 802a08c:	4313      	orrs	r3, r2
 802a08e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802a090:	687b      	ldr	r3, [r7, #4]
 802a092:	697a      	ldr	r2, [r7, #20]
 802a094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802a096:	687b      	ldr	r3, [r7, #4]
 802a098:	68fa      	ldr	r2, [r7, #12]
 802a09a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 802a09c:	683b      	ldr	r3, [r7, #0]
 802a09e:	685a      	ldr	r2, [r3, #4]
 802a0a0:	687b      	ldr	r3, [r7, #4]
 802a0a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802a0a4:	687b      	ldr	r3, [r7, #4]
 802a0a6:	693a      	ldr	r2, [r7, #16]
 802a0a8:	621a      	str	r2, [r3, #32]
}
 802a0aa:	bf00      	nop
 802a0ac:	371c      	adds	r7, #28
 802a0ae:	46bd      	mov	sp, r7
 802a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a0b4:	4770      	bx	lr
 802a0b6:	bf00      	nop
 802a0b8:	40010000 	.word	0x40010000
 802a0bc:	40010400 	.word	0x40010400

0802a0c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802a0c0:	b480      	push	{r7}
 802a0c2:	b087      	sub	sp, #28
 802a0c4:	af00      	add	r7, sp, #0
 802a0c6:	60f8      	str	r0, [r7, #12]
 802a0c8:	60b9      	str	r1, [r7, #8]
 802a0ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 802a0cc:	68fb      	ldr	r3, [r7, #12]
 802a0ce:	6a1b      	ldr	r3, [r3, #32]
 802a0d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802a0d2:	68fb      	ldr	r3, [r7, #12]
 802a0d4:	6a1b      	ldr	r3, [r3, #32]
 802a0d6:	f023 0201 	bic.w	r2, r3, #1
 802a0da:	68fb      	ldr	r3, [r7, #12]
 802a0dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802a0de:	68fb      	ldr	r3, [r7, #12]
 802a0e0:	699b      	ldr	r3, [r3, #24]
 802a0e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 802a0e4:	693b      	ldr	r3, [r7, #16]
 802a0e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802a0ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 802a0ec:	687b      	ldr	r3, [r7, #4]
 802a0ee:	011b      	lsls	r3, r3, #4
 802a0f0:	693a      	ldr	r2, [r7, #16]
 802a0f2:	4313      	orrs	r3, r2
 802a0f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802a0f6:	697b      	ldr	r3, [r7, #20]
 802a0f8:	f023 030a 	bic.w	r3, r3, #10
 802a0fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 802a0fe:	697a      	ldr	r2, [r7, #20]
 802a100:	68bb      	ldr	r3, [r7, #8]
 802a102:	4313      	orrs	r3, r2
 802a104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 802a106:	68fb      	ldr	r3, [r7, #12]
 802a108:	693a      	ldr	r2, [r7, #16]
 802a10a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802a10c:	68fb      	ldr	r3, [r7, #12]
 802a10e:	697a      	ldr	r2, [r7, #20]
 802a110:	621a      	str	r2, [r3, #32]
}
 802a112:	bf00      	nop
 802a114:	371c      	adds	r7, #28
 802a116:	46bd      	mov	sp, r7
 802a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a11c:	4770      	bx	lr

0802a11e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802a11e:	b480      	push	{r7}
 802a120:	b087      	sub	sp, #28
 802a122:	af00      	add	r7, sp, #0
 802a124:	60f8      	str	r0, [r7, #12]
 802a126:	60b9      	str	r1, [r7, #8]
 802a128:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802a12a:	68fb      	ldr	r3, [r7, #12]
 802a12c:	6a1b      	ldr	r3, [r3, #32]
 802a12e:	f023 0210 	bic.w	r2, r3, #16
 802a132:	68fb      	ldr	r3, [r7, #12]
 802a134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802a136:	68fb      	ldr	r3, [r7, #12]
 802a138:	699b      	ldr	r3, [r3, #24]
 802a13a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802a13c:	68fb      	ldr	r3, [r7, #12]
 802a13e:	6a1b      	ldr	r3, [r3, #32]
 802a140:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 802a142:	697b      	ldr	r3, [r7, #20]
 802a144:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802a148:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 802a14a:	687b      	ldr	r3, [r7, #4]
 802a14c:	031b      	lsls	r3, r3, #12
 802a14e:	697a      	ldr	r2, [r7, #20]
 802a150:	4313      	orrs	r3, r2
 802a152:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 802a154:	693b      	ldr	r3, [r7, #16]
 802a156:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 802a15a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 802a15c:	68bb      	ldr	r3, [r7, #8]
 802a15e:	011b      	lsls	r3, r3, #4
 802a160:	693a      	ldr	r2, [r7, #16]
 802a162:	4313      	orrs	r3, r2
 802a164:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 802a166:	68fb      	ldr	r3, [r7, #12]
 802a168:	697a      	ldr	r2, [r7, #20]
 802a16a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802a16c:	68fb      	ldr	r3, [r7, #12]
 802a16e:	693a      	ldr	r2, [r7, #16]
 802a170:	621a      	str	r2, [r3, #32]
}
 802a172:	bf00      	nop
 802a174:	371c      	adds	r7, #28
 802a176:	46bd      	mov	sp, r7
 802a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a17c:	4770      	bx	lr

0802a17e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 802a17e:	b480      	push	{r7}
 802a180:	b085      	sub	sp, #20
 802a182:	af00      	add	r7, sp, #0
 802a184:	6078      	str	r0, [r7, #4]
 802a186:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 802a188:	687b      	ldr	r3, [r7, #4]
 802a18a:	689b      	ldr	r3, [r3, #8]
 802a18c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 802a18e:	68fb      	ldr	r3, [r7, #12]
 802a190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a194:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 802a196:	683a      	ldr	r2, [r7, #0]
 802a198:	68fb      	ldr	r3, [r7, #12]
 802a19a:	4313      	orrs	r3, r2
 802a19c:	f043 0307 	orr.w	r3, r3, #7
 802a1a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802a1a2:	687b      	ldr	r3, [r7, #4]
 802a1a4:	68fa      	ldr	r2, [r7, #12]
 802a1a6:	609a      	str	r2, [r3, #8]
}
 802a1a8:	bf00      	nop
 802a1aa:	3714      	adds	r7, #20
 802a1ac:	46bd      	mov	sp, r7
 802a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1b2:	4770      	bx	lr

0802a1b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 802a1b4:	b480      	push	{r7}
 802a1b6:	b087      	sub	sp, #28
 802a1b8:	af00      	add	r7, sp, #0
 802a1ba:	60f8      	str	r0, [r7, #12]
 802a1bc:	60b9      	str	r1, [r7, #8]
 802a1be:	607a      	str	r2, [r7, #4]
 802a1c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 802a1c2:	68fb      	ldr	r3, [r7, #12]
 802a1c4:	689b      	ldr	r3, [r3, #8]
 802a1c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802a1c8:	697b      	ldr	r3, [r7, #20]
 802a1ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802a1ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 802a1d0:	683b      	ldr	r3, [r7, #0]
 802a1d2:	021a      	lsls	r2, r3, #8
 802a1d4:	687b      	ldr	r3, [r7, #4]
 802a1d6:	431a      	orrs	r2, r3
 802a1d8:	68bb      	ldr	r3, [r7, #8]
 802a1da:	4313      	orrs	r3, r2
 802a1dc:	697a      	ldr	r2, [r7, #20]
 802a1de:	4313      	orrs	r3, r2
 802a1e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802a1e2:	68fb      	ldr	r3, [r7, #12]
 802a1e4:	697a      	ldr	r2, [r7, #20]
 802a1e6:	609a      	str	r2, [r3, #8]
}
 802a1e8:	bf00      	nop
 802a1ea:	371c      	adds	r7, #28
 802a1ec:	46bd      	mov	sp, r7
 802a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1f2:	4770      	bx	lr

0802a1f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 802a1f4:	b480      	push	{r7}
 802a1f6:	b087      	sub	sp, #28
 802a1f8:	af00      	add	r7, sp, #0
 802a1fa:	60f8      	str	r0, [r7, #12]
 802a1fc:	60b9      	str	r1, [r7, #8]
 802a1fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 802a200:	68bb      	ldr	r3, [r7, #8]
 802a202:	f003 031f 	and.w	r3, r3, #31
 802a206:	2201      	movs	r2, #1
 802a208:	fa02 f303 	lsl.w	r3, r2, r3
 802a20c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 802a20e:	68fb      	ldr	r3, [r7, #12]
 802a210:	6a1a      	ldr	r2, [r3, #32]
 802a212:	697b      	ldr	r3, [r7, #20]
 802a214:	43db      	mvns	r3, r3
 802a216:	401a      	ands	r2, r3
 802a218:	68fb      	ldr	r3, [r7, #12]
 802a21a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 802a21c:	68fb      	ldr	r3, [r7, #12]
 802a21e:	6a1a      	ldr	r2, [r3, #32]
 802a220:	68bb      	ldr	r3, [r7, #8]
 802a222:	f003 031f 	and.w	r3, r3, #31
 802a226:	6879      	ldr	r1, [r7, #4]
 802a228:	fa01 f303 	lsl.w	r3, r1, r3
 802a22c:	431a      	orrs	r2, r3
 802a22e:	68fb      	ldr	r3, [r7, #12]
 802a230:	621a      	str	r2, [r3, #32]
}
 802a232:	bf00      	nop
 802a234:	371c      	adds	r7, #28
 802a236:	46bd      	mov	sp, r7
 802a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a23c:	4770      	bx	lr
	...

0802a240 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 802a240:	b480      	push	{r7}
 802a242:	b085      	sub	sp, #20
 802a244:	af00      	add	r7, sp, #0
 802a246:	6078      	str	r0, [r7, #4]
 802a248:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 802a24a:	687b      	ldr	r3, [r7, #4]
 802a24c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802a250:	2b01      	cmp	r3, #1
 802a252:	d101      	bne.n	802a258 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 802a254:	2302      	movs	r3, #2
 802a256:	e05a      	b.n	802a30e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 802a258:	687b      	ldr	r3, [r7, #4]
 802a25a:	2201      	movs	r2, #1
 802a25c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 802a260:	687b      	ldr	r3, [r7, #4]
 802a262:	2202      	movs	r2, #2
 802a264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 802a268:	687b      	ldr	r3, [r7, #4]
 802a26a:	681b      	ldr	r3, [r3, #0]
 802a26c:	685b      	ldr	r3, [r3, #4]
 802a26e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802a270:	687b      	ldr	r3, [r7, #4]
 802a272:	681b      	ldr	r3, [r3, #0]
 802a274:	689b      	ldr	r3, [r3, #8]
 802a276:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 802a278:	68fb      	ldr	r3, [r7, #12]
 802a27a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a27e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 802a280:	683b      	ldr	r3, [r7, #0]
 802a282:	681b      	ldr	r3, [r3, #0]
 802a284:	68fa      	ldr	r2, [r7, #12]
 802a286:	4313      	orrs	r3, r2
 802a288:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802a28a:	687b      	ldr	r3, [r7, #4]
 802a28c:	681b      	ldr	r3, [r3, #0]
 802a28e:	68fa      	ldr	r2, [r7, #12]
 802a290:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802a292:	687b      	ldr	r3, [r7, #4]
 802a294:	681b      	ldr	r3, [r3, #0]
 802a296:	4a21      	ldr	r2, [pc, #132]	; (802a31c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 802a298:	4293      	cmp	r3, r2
 802a29a:	d022      	beq.n	802a2e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a29c:	687b      	ldr	r3, [r7, #4]
 802a29e:	681b      	ldr	r3, [r3, #0]
 802a2a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802a2a4:	d01d      	beq.n	802a2e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a2a6:	687b      	ldr	r3, [r7, #4]
 802a2a8:	681b      	ldr	r3, [r3, #0]
 802a2aa:	4a1d      	ldr	r2, [pc, #116]	; (802a320 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 802a2ac:	4293      	cmp	r3, r2
 802a2ae:	d018      	beq.n	802a2e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a2b0:	687b      	ldr	r3, [r7, #4]
 802a2b2:	681b      	ldr	r3, [r3, #0]
 802a2b4:	4a1b      	ldr	r2, [pc, #108]	; (802a324 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 802a2b6:	4293      	cmp	r3, r2
 802a2b8:	d013      	beq.n	802a2e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a2ba:	687b      	ldr	r3, [r7, #4]
 802a2bc:	681b      	ldr	r3, [r3, #0]
 802a2be:	4a1a      	ldr	r2, [pc, #104]	; (802a328 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 802a2c0:	4293      	cmp	r3, r2
 802a2c2:	d00e      	beq.n	802a2e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a2c4:	687b      	ldr	r3, [r7, #4]
 802a2c6:	681b      	ldr	r3, [r3, #0]
 802a2c8:	4a18      	ldr	r2, [pc, #96]	; (802a32c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 802a2ca:	4293      	cmp	r3, r2
 802a2cc:	d009      	beq.n	802a2e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a2ce:	687b      	ldr	r3, [r7, #4]
 802a2d0:	681b      	ldr	r3, [r3, #0]
 802a2d2:	4a17      	ldr	r2, [pc, #92]	; (802a330 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 802a2d4:	4293      	cmp	r3, r2
 802a2d6:	d004      	beq.n	802a2e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a2d8:	687b      	ldr	r3, [r7, #4]
 802a2da:	681b      	ldr	r3, [r3, #0]
 802a2dc:	4a15      	ldr	r2, [pc, #84]	; (802a334 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 802a2de:	4293      	cmp	r3, r2
 802a2e0:	d10c      	bne.n	802a2fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 802a2e2:	68bb      	ldr	r3, [r7, #8]
 802a2e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802a2e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802a2ea:	683b      	ldr	r3, [r7, #0]
 802a2ec:	685b      	ldr	r3, [r3, #4]
 802a2ee:	68ba      	ldr	r2, [r7, #8]
 802a2f0:	4313      	orrs	r3, r2
 802a2f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 802a2f4:	687b      	ldr	r3, [r7, #4]
 802a2f6:	681b      	ldr	r3, [r3, #0]
 802a2f8:	68ba      	ldr	r2, [r7, #8]
 802a2fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802a2fc:	687b      	ldr	r3, [r7, #4]
 802a2fe:	2201      	movs	r2, #1
 802a300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802a304:	687b      	ldr	r3, [r7, #4]
 802a306:	2200      	movs	r2, #0
 802a308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802a30c:	2300      	movs	r3, #0
}
 802a30e:	4618      	mov	r0, r3
 802a310:	3714      	adds	r7, #20
 802a312:	46bd      	mov	sp, r7
 802a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a318:	4770      	bx	lr
 802a31a:	bf00      	nop
 802a31c:	40010000 	.word	0x40010000
 802a320:	40000400 	.word	0x40000400
 802a324:	40000800 	.word	0x40000800
 802a328:	40000c00 	.word	0x40000c00
 802a32c:	40010400 	.word	0x40010400
 802a330:	40014000 	.word	0x40014000
 802a334:	40001800 	.word	0x40001800

0802a338 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 802a338:	b480      	push	{r7}
 802a33a:	b085      	sub	sp, #20
 802a33c:	af00      	add	r7, sp, #0
 802a33e:	6078      	str	r0, [r7, #4]
 802a340:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 802a342:	2300      	movs	r3, #0
 802a344:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 802a346:	687b      	ldr	r3, [r7, #4]
 802a348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802a34c:	2b01      	cmp	r3, #1
 802a34e:	d101      	bne.n	802a354 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 802a350:	2302      	movs	r3, #2
 802a352:	e03d      	b.n	802a3d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 802a354:	687b      	ldr	r3, [r7, #4]
 802a356:	2201      	movs	r2, #1
 802a358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 802a35c:	68fb      	ldr	r3, [r7, #12]
 802a35e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 802a362:	683b      	ldr	r3, [r7, #0]
 802a364:	68db      	ldr	r3, [r3, #12]
 802a366:	4313      	orrs	r3, r2
 802a368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 802a36a:	68fb      	ldr	r3, [r7, #12]
 802a36c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 802a370:	683b      	ldr	r3, [r7, #0]
 802a372:	689b      	ldr	r3, [r3, #8]
 802a374:	4313      	orrs	r3, r2
 802a376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 802a378:	68fb      	ldr	r3, [r7, #12]
 802a37a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 802a37e:	683b      	ldr	r3, [r7, #0]
 802a380:	685b      	ldr	r3, [r3, #4]
 802a382:	4313      	orrs	r3, r2
 802a384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 802a386:	68fb      	ldr	r3, [r7, #12]
 802a388:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 802a38c:	683b      	ldr	r3, [r7, #0]
 802a38e:	681b      	ldr	r3, [r3, #0]
 802a390:	4313      	orrs	r3, r2
 802a392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 802a394:	68fb      	ldr	r3, [r7, #12]
 802a396:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802a39a:	683b      	ldr	r3, [r7, #0]
 802a39c:	691b      	ldr	r3, [r3, #16]
 802a39e:	4313      	orrs	r3, r2
 802a3a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 802a3a2:	68fb      	ldr	r3, [r7, #12]
 802a3a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 802a3a8:	683b      	ldr	r3, [r7, #0]
 802a3aa:	695b      	ldr	r3, [r3, #20]
 802a3ac:	4313      	orrs	r3, r2
 802a3ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 802a3b0:	68fb      	ldr	r3, [r7, #12]
 802a3b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 802a3b6:	683b      	ldr	r3, [r7, #0]
 802a3b8:	69db      	ldr	r3, [r3, #28]
 802a3ba:	4313      	orrs	r3, r2
 802a3bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 802a3be:	687b      	ldr	r3, [r7, #4]
 802a3c0:	681b      	ldr	r3, [r3, #0]
 802a3c2:	68fa      	ldr	r2, [r7, #12]
 802a3c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 802a3c6:	687b      	ldr	r3, [r7, #4]
 802a3c8:	2200      	movs	r2, #0
 802a3ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802a3ce:	2300      	movs	r3, #0
}
 802a3d0:	4618      	mov	r0, r3
 802a3d2:	3714      	adds	r7, #20
 802a3d4:	46bd      	mov	sp, r7
 802a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a3da:	4770      	bx	lr

0802a3dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 802a3dc:	b480      	push	{r7}
 802a3de:	b083      	sub	sp, #12
 802a3e0:	af00      	add	r7, sp, #0
 802a3e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 802a3e4:	bf00      	nop
 802a3e6:	370c      	adds	r7, #12
 802a3e8:	46bd      	mov	sp, r7
 802a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a3ee:	4770      	bx	lr

0802a3f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 802a3f0:	b480      	push	{r7}
 802a3f2:	b083      	sub	sp, #12
 802a3f4:	af00      	add	r7, sp, #0
 802a3f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 802a3f8:	bf00      	nop
 802a3fa:	370c      	adds	r7, #12
 802a3fc:	46bd      	mov	sp, r7
 802a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a402:	4770      	bx	lr

0802a404 <__cxa_guard_acquire>:
 802a404:	6803      	ldr	r3, [r0, #0]
 802a406:	07db      	lsls	r3, r3, #31
 802a408:	d406      	bmi.n	802a418 <__cxa_guard_acquire+0x14>
 802a40a:	7843      	ldrb	r3, [r0, #1]
 802a40c:	b103      	cbz	r3, 802a410 <__cxa_guard_acquire+0xc>
 802a40e:	deff      	udf	#255	; 0xff
 802a410:	2301      	movs	r3, #1
 802a412:	7043      	strb	r3, [r0, #1]
 802a414:	4618      	mov	r0, r3
 802a416:	4770      	bx	lr
 802a418:	2000      	movs	r0, #0
 802a41a:	4770      	bx	lr

0802a41c <__cxa_guard_release>:
 802a41c:	2301      	movs	r3, #1
 802a41e:	6003      	str	r3, [r0, #0]
 802a420:	4770      	bx	lr
	...

0802a424 <__libc_init_array>:
 802a424:	b570      	push	{r4, r5, r6, lr}
 802a426:	4e0d      	ldr	r6, [pc, #52]	; (802a45c <__libc_init_array+0x38>)
 802a428:	4c0d      	ldr	r4, [pc, #52]	; (802a460 <__libc_init_array+0x3c>)
 802a42a:	1ba4      	subs	r4, r4, r6
 802a42c:	10a4      	asrs	r4, r4, #2
 802a42e:	2500      	movs	r5, #0
 802a430:	42a5      	cmp	r5, r4
 802a432:	d109      	bne.n	802a448 <__libc_init_array+0x24>
 802a434:	4e0b      	ldr	r6, [pc, #44]	; (802a464 <__libc_init_array+0x40>)
 802a436:	4c0c      	ldr	r4, [pc, #48]	; (802a468 <__libc_init_array+0x44>)
 802a438:	f000 f82c 	bl	802a494 <_init>
 802a43c:	1ba4      	subs	r4, r4, r6
 802a43e:	10a4      	asrs	r4, r4, #2
 802a440:	2500      	movs	r5, #0
 802a442:	42a5      	cmp	r5, r4
 802a444:	d105      	bne.n	802a452 <__libc_init_array+0x2e>
 802a446:	bd70      	pop	{r4, r5, r6, pc}
 802a448:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802a44c:	4798      	blx	r3
 802a44e:	3501      	adds	r5, #1
 802a450:	e7ee      	b.n	802a430 <__libc_init_array+0xc>
 802a452:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802a456:	4798      	blx	r3
 802a458:	3501      	adds	r5, #1
 802a45a:	e7f2      	b.n	802a442 <__libc_init_array+0x1e>
 802a45c:	0802a4d4 	.word	0x0802a4d4
 802a460:	0802a4d4 	.word	0x0802a4d4
 802a464:	0802a4d4 	.word	0x0802a4d4
 802a468:	0802a4dc 	.word	0x0802a4dc

0802a46c <memcpy>:
 802a46c:	b510      	push	{r4, lr}
 802a46e:	1e43      	subs	r3, r0, #1
 802a470:	440a      	add	r2, r1
 802a472:	4291      	cmp	r1, r2
 802a474:	d100      	bne.n	802a478 <memcpy+0xc>
 802a476:	bd10      	pop	{r4, pc}
 802a478:	f811 4b01 	ldrb.w	r4, [r1], #1
 802a47c:	f803 4f01 	strb.w	r4, [r3, #1]!
 802a480:	e7f7      	b.n	802a472 <memcpy+0x6>

0802a482 <memset>:
 802a482:	4402      	add	r2, r0
 802a484:	4603      	mov	r3, r0
 802a486:	4293      	cmp	r3, r2
 802a488:	d100      	bne.n	802a48c <memset+0xa>
 802a48a:	4770      	bx	lr
 802a48c:	f803 1b01 	strb.w	r1, [r3], #1
 802a490:	e7f9      	b.n	802a486 <memset+0x4>
	...

0802a494 <_init>:
 802a494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a496:	bf00      	nop
 802a498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a49a:	bc08      	pop	{r3}
 802a49c:	469e      	mov	lr, r3
 802a49e:	4770      	bx	lr

0802a4a0 <_fini>:
 802a4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a4a2:	bf00      	nop
 802a4a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a4a6:	bc08      	pop	{r3}
 802a4a8:	469e      	mov	lr, r3
 802a4aa:	4770      	bx	lr
