
alias2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbe8  08020000  08020000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  0802cbe8  0802cbe8  0002cbe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802cfb8  0802cfb8  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  0802cfb8  0802cfb8  0002cfb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802cfc0  0802cfc0  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802cfc0  0802cfc0  0002cfc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802cfc8  0802cfc8  0002cfc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0802cfcc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00017448  200001e0  0802d1ac  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20017628  0802d1ac  00037628  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002dea0  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004df4  00000000  00000000  0005e0b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001860  00000000  00000000  00062ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001660  00000000  00000000  00064708  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026f64  00000000  00000000  00065d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000168c5  00000000  00000000  0008cccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ce082  00000000  00000000  000a3591  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00171613  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072c8  00000000  00000000  00171690  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08020000 <__do_global_dtors_aux>:
 8020000:	b510      	push	{r4, lr}
 8020002:	4c05      	ldr	r4, [pc, #20]	; (8020018 <__do_global_dtors_aux+0x18>)
 8020004:	7823      	ldrb	r3, [r4, #0]
 8020006:	b933      	cbnz	r3, 8020016 <__do_global_dtors_aux+0x16>
 8020008:	4b04      	ldr	r3, [pc, #16]	; (802001c <__do_global_dtors_aux+0x1c>)
 802000a:	b113      	cbz	r3, 8020012 <__do_global_dtors_aux+0x12>
 802000c:	4804      	ldr	r0, [pc, #16]	; (8020020 <__do_global_dtors_aux+0x20>)
 802000e:	f3af 8000 	nop.w
 8020012:	2301      	movs	r3, #1
 8020014:	7023      	strb	r3, [r4, #0]
 8020016:	bd10      	pop	{r4, pc}
 8020018:	200001e0 	.word	0x200001e0
 802001c:	00000000 	.word	0x00000000
 8020020:	0802cbd0 	.word	0x0802cbd0

08020024 <frame_dummy>:
 8020024:	b508      	push	{r3, lr}
 8020026:	4b03      	ldr	r3, [pc, #12]	; (8020034 <frame_dummy+0x10>)
 8020028:	b11b      	cbz	r3, 8020032 <frame_dummy+0xe>
 802002a:	4903      	ldr	r1, [pc, #12]	; (8020038 <frame_dummy+0x14>)
 802002c:	4803      	ldr	r0, [pc, #12]	; (802003c <frame_dummy+0x18>)
 802002e:	f3af 8000 	nop.w
 8020032:	bd08      	pop	{r3, pc}
 8020034:	00000000 	.word	0x00000000
 8020038:	200001e4 	.word	0x200001e4
 802003c:	0802cbd0 	.word	0x0802cbd0

08020040 <strlen>:
 8020040:	4603      	mov	r3, r0
 8020042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020046:	2a00      	cmp	r2, #0
 8020048:	d1fb      	bne.n	8020042 <strlen+0x2>
 802004a:	1a18      	subs	r0, r3, r0
 802004c:	3801      	subs	r0, #1
 802004e:	4770      	bx	lr

08020050 <memchr>:
 8020050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8020054:	2a10      	cmp	r2, #16
 8020056:	db2b      	blt.n	80200b0 <memchr+0x60>
 8020058:	f010 0f07 	tst.w	r0, #7
 802005c:	d008      	beq.n	8020070 <memchr+0x20>
 802005e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020062:	3a01      	subs	r2, #1
 8020064:	428b      	cmp	r3, r1
 8020066:	d02d      	beq.n	80200c4 <memchr+0x74>
 8020068:	f010 0f07 	tst.w	r0, #7
 802006c:	b342      	cbz	r2, 80200c0 <memchr+0x70>
 802006e:	d1f6      	bne.n	802005e <memchr+0xe>
 8020070:	b4f0      	push	{r4, r5, r6, r7}
 8020072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802007a:	f022 0407 	bic.w	r4, r2, #7
 802007e:	f07f 0700 	mvns.w	r7, #0
 8020082:	2300      	movs	r3, #0
 8020084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020088:	3c08      	subs	r4, #8
 802008a:	ea85 0501 	eor.w	r5, r5, r1
 802008e:	ea86 0601 	eor.w	r6, r6, r1
 8020092:	fa85 f547 	uadd8	r5, r5, r7
 8020096:	faa3 f587 	sel	r5, r3, r7
 802009a:	fa86 f647 	uadd8	r6, r6, r7
 802009e:	faa5 f687 	sel	r6, r5, r7
 80200a2:	b98e      	cbnz	r6, 80200c8 <memchr+0x78>
 80200a4:	d1ee      	bne.n	8020084 <memchr+0x34>
 80200a6:	bcf0      	pop	{r4, r5, r6, r7}
 80200a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80200ac:	f002 0207 	and.w	r2, r2, #7
 80200b0:	b132      	cbz	r2, 80200c0 <memchr+0x70>
 80200b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80200b6:	3a01      	subs	r2, #1
 80200b8:	ea83 0301 	eor.w	r3, r3, r1
 80200bc:	b113      	cbz	r3, 80200c4 <memchr+0x74>
 80200be:	d1f8      	bne.n	80200b2 <memchr+0x62>
 80200c0:	2000      	movs	r0, #0
 80200c2:	4770      	bx	lr
 80200c4:	3801      	subs	r0, #1
 80200c6:	4770      	bx	lr
 80200c8:	2d00      	cmp	r5, #0
 80200ca:	bf06      	itte	eq
 80200cc:	4635      	moveq	r5, r6
 80200ce:	3803      	subeq	r0, #3
 80200d0:	3807      	subne	r0, #7
 80200d2:	f015 0f01 	tst.w	r5, #1
 80200d6:	d107      	bne.n	80200e8 <memchr+0x98>
 80200d8:	3001      	adds	r0, #1
 80200da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80200de:	bf02      	ittt	eq
 80200e0:	3001      	addeq	r0, #1
 80200e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80200e6:	3001      	addeq	r0, #1
 80200e8:	bcf0      	pop	{r4, r5, r6, r7}
 80200ea:	3801      	subs	r0, #1
 80200ec:	4770      	bx	lr
 80200ee:	bf00      	nop

080200f0 <__aeabi_drsub>:
 80200f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80200f4:	e002      	b.n	80200fc <__adddf3>
 80200f6:	bf00      	nop

080200f8 <__aeabi_dsub>:
 80200f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080200fc <__adddf3>:
 80200fc:	b530      	push	{r4, r5, lr}
 80200fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8020102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8020106:	ea94 0f05 	teq	r4, r5
 802010a:	bf08      	it	eq
 802010c:	ea90 0f02 	teqeq	r0, r2
 8020110:	bf1f      	itttt	ne
 8020112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8020116:	ea55 0c02 	orrsne.w	ip, r5, r2
 802011a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 802011e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020122:	f000 80e2 	beq.w	80202ea <__adddf3+0x1ee>
 8020126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 802012a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 802012e:	bfb8      	it	lt
 8020130:	426d      	neglt	r5, r5
 8020132:	dd0c      	ble.n	802014e <__adddf3+0x52>
 8020134:	442c      	add	r4, r5
 8020136:	ea80 0202 	eor.w	r2, r0, r2
 802013a:	ea81 0303 	eor.w	r3, r1, r3
 802013e:	ea82 0000 	eor.w	r0, r2, r0
 8020142:	ea83 0101 	eor.w	r1, r3, r1
 8020146:	ea80 0202 	eor.w	r2, r0, r2
 802014a:	ea81 0303 	eor.w	r3, r1, r3
 802014e:	2d36      	cmp	r5, #54	; 0x36
 8020150:	bf88      	it	hi
 8020152:	bd30      	pophi	{r4, r5, pc}
 8020154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8020158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802015c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8020160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8020164:	d002      	beq.n	802016c <__adddf3+0x70>
 8020166:	4240      	negs	r0, r0
 8020168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802016c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8020170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8020178:	d002      	beq.n	8020180 <__adddf3+0x84>
 802017a:	4252      	negs	r2, r2
 802017c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8020180:	ea94 0f05 	teq	r4, r5
 8020184:	f000 80a7 	beq.w	80202d6 <__adddf3+0x1da>
 8020188:	f1a4 0401 	sub.w	r4, r4, #1
 802018c:	f1d5 0e20 	rsbs	lr, r5, #32
 8020190:	db0d      	blt.n	80201ae <__adddf3+0xb2>
 8020192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8020196:	fa22 f205 	lsr.w	r2, r2, r5
 802019a:	1880      	adds	r0, r0, r2
 802019c:	f141 0100 	adc.w	r1, r1, #0
 80201a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80201a4:	1880      	adds	r0, r0, r2
 80201a6:	fa43 f305 	asr.w	r3, r3, r5
 80201aa:	4159      	adcs	r1, r3
 80201ac:	e00e      	b.n	80201cc <__adddf3+0xd0>
 80201ae:	f1a5 0520 	sub.w	r5, r5, #32
 80201b2:	f10e 0e20 	add.w	lr, lr, #32
 80201b6:	2a01      	cmp	r2, #1
 80201b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80201bc:	bf28      	it	cs
 80201be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80201c2:	fa43 f305 	asr.w	r3, r3, r5
 80201c6:	18c0      	adds	r0, r0, r3
 80201c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80201cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80201d0:	d507      	bpl.n	80201e2 <__adddf3+0xe6>
 80201d2:	f04f 0e00 	mov.w	lr, #0
 80201d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80201da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80201de:	eb6e 0101 	sbc.w	r1, lr, r1
 80201e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80201e6:	d31b      	bcc.n	8020220 <__adddf3+0x124>
 80201e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80201ec:	d30c      	bcc.n	8020208 <__adddf3+0x10c>
 80201ee:	0849      	lsrs	r1, r1, #1
 80201f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80201f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80201f8:	f104 0401 	add.w	r4, r4, #1
 80201fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8020200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8020204:	f080 809a 	bcs.w	802033c <__adddf3+0x240>
 8020208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802020c:	bf08      	it	eq
 802020e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020212:	f150 0000 	adcs.w	r0, r0, #0
 8020216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802021a:	ea41 0105 	orr.w	r1, r1, r5
 802021e:	bd30      	pop	{r4, r5, pc}
 8020220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8020224:	4140      	adcs	r0, r0
 8020226:	eb41 0101 	adc.w	r1, r1, r1
 802022a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 802022e:	f1a4 0401 	sub.w	r4, r4, #1
 8020232:	d1e9      	bne.n	8020208 <__adddf3+0x10c>
 8020234:	f091 0f00 	teq	r1, #0
 8020238:	bf04      	itt	eq
 802023a:	4601      	moveq	r1, r0
 802023c:	2000      	moveq	r0, #0
 802023e:	fab1 f381 	clz	r3, r1
 8020242:	bf08      	it	eq
 8020244:	3320      	addeq	r3, #32
 8020246:	f1a3 030b 	sub.w	r3, r3, #11
 802024a:	f1b3 0220 	subs.w	r2, r3, #32
 802024e:	da0c      	bge.n	802026a <__adddf3+0x16e>
 8020250:	320c      	adds	r2, #12
 8020252:	dd08      	ble.n	8020266 <__adddf3+0x16a>
 8020254:	f102 0c14 	add.w	ip, r2, #20
 8020258:	f1c2 020c 	rsb	r2, r2, #12
 802025c:	fa01 f00c 	lsl.w	r0, r1, ip
 8020260:	fa21 f102 	lsr.w	r1, r1, r2
 8020264:	e00c      	b.n	8020280 <__adddf3+0x184>
 8020266:	f102 0214 	add.w	r2, r2, #20
 802026a:	bfd8      	it	le
 802026c:	f1c2 0c20 	rsble	ip, r2, #32
 8020270:	fa01 f102 	lsl.w	r1, r1, r2
 8020274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8020278:	bfdc      	itt	le
 802027a:	ea41 010c 	orrle.w	r1, r1, ip
 802027e:	4090      	lslle	r0, r2
 8020280:	1ae4      	subs	r4, r4, r3
 8020282:	bfa2      	ittt	ge
 8020284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8020288:	4329      	orrge	r1, r5
 802028a:	bd30      	popge	{r4, r5, pc}
 802028c:	ea6f 0404 	mvn.w	r4, r4
 8020290:	3c1f      	subs	r4, #31
 8020292:	da1c      	bge.n	80202ce <__adddf3+0x1d2>
 8020294:	340c      	adds	r4, #12
 8020296:	dc0e      	bgt.n	80202b6 <__adddf3+0x1ba>
 8020298:	f104 0414 	add.w	r4, r4, #20
 802029c:	f1c4 0220 	rsb	r2, r4, #32
 80202a0:	fa20 f004 	lsr.w	r0, r0, r4
 80202a4:	fa01 f302 	lsl.w	r3, r1, r2
 80202a8:	ea40 0003 	orr.w	r0, r0, r3
 80202ac:	fa21 f304 	lsr.w	r3, r1, r4
 80202b0:	ea45 0103 	orr.w	r1, r5, r3
 80202b4:	bd30      	pop	{r4, r5, pc}
 80202b6:	f1c4 040c 	rsb	r4, r4, #12
 80202ba:	f1c4 0220 	rsb	r2, r4, #32
 80202be:	fa20 f002 	lsr.w	r0, r0, r2
 80202c2:	fa01 f304 	lsl.w	r3, r1, r4
 80202c6:	ea40 0003 	orr.w	r0, r0, r3
 80202ca:	4629      	mov	r1, r5
 80202cc:	bd30      	pop	{r4, r5, pc}
 80202ce:	fa21 f004 	lsr.w	r0, r1, r4
 80202d2:	4629      	mov	r1, r5
 80202d4:	bd30      	pop	{r4, r5, pc}
 80202d6:	f094 0f00 	teq	r4, #0
 80202da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80202de:	bf06      	itte	eq
 80202e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80202e4:	3401      	addeq	r4, #1
 80202e6:	3d01      	subne	r5, #1
 80202e8:	e74e      	b.n	8020188 <__adddf3+0x8c>
 80202ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80202ee:	bf18      	it	ne
 80202f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80202f4:	d029      	beq.n	802034a <__adddf3+0x24e>
 80202f6:	ea94 0f05 	teq	r4, r5
 80202fa:	bf08      	it	eq
 80202fc:	ea90 0f02 	teqeq	r0, r2
 8020300:	d005      	beq.n	802030e <__adddf3+0x212>
 8020302:	ea54 0c00 	orrs.w	ip, r4, r0
 8020306:	bf04      	itt	eq
 8020308:	4619      	moveq	r1, r3
 802030a:	4610      	moveq	r0, r2
 802030c:	bd30      	pop	{r4, r5, pc}
 802030e:	ea91 0f03 	teq	r1, r3
 8020312:	bf1e      	ittt	ne
 8020314:	2100      	movne	r1, #0
 8020316:	2000      	movne	r0, #0
 8020318:	bd30      	popne	{r4, r5, pc}
 802031a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 802031e:	d105      	bne.n	802032c <__adddf3+0x230>
 8020320:	0040      	lsls	r0, r0, #1
 8020322:	4149      	adcs	r1, r1
 8020324:	bf28      	it	cs
 8020326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 802032a:	bd30      	pop	{r4, r5, pc}
 802032c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8020330:	bf3c      	itt	cc
 8020332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8020336:	bd30      	popcc	{r4, r5, pc}
 8020338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 802033c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8020340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8020344:	f04f 0000 	mov.w	r0, #0
 8020348:	bd30      	pop	{r4, r5, pc}
 802034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802034e:	bf1a      	itte	ne
 8020350:	4619      	movne	r1, r3
 8020352:	4610      	movne	r0, r2
 8020354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8020358:	bf1c      	itt	ne
 802035a:	460b      	movne	r3, r1
 802035c:	4602      	movne	r2, r0
 802035e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020362:	bf06      	itte	eq
 8020364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8020368:	ea91 0f03 	teqeq	r1, r3
 802036c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8020370:	bd30      	pop	{r4, r5, pc}
 8020372:	bf00      	nop

08020374 <__aeabi_ui2d>:
 8020374:	f090 0f00 	teq	r0, #0
 8020378:	bf04      	itt	eq
 802037a:	2100      	moveq	r1, #0
 802037c:	4770      	bxeq	lr
 802037e:	b530      	push	{r4, r5, lr}
 8020380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020388:	f04f 0500 	mov.w	r5, #0
 802038c:	f04f 0100 	mov.w	r1, #0
 8020390:	e750      	b.n	8020234 <__adddf3+0x138>
 8020392:	bf00      	nop

08020394 <__aeabi_i2d>:
 8020394:	f090 0f00 	teq	r0, #0
 8020398:	bf04      	itt	eq
 802039a:	2100      	moveq	r1, #0
 802039c:	4770      	bxeq	lr
 802039e:	b530      	push	{r4, r5, lr}
 80203a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80203a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80203a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80203ac:	bf48      	it	mi
 80203ae:	4240      	negmi	r0, r0
 80203b0:	f04f 0100 	mov.w	r1, #0
 80203b4:	e73e      	b.n	8020234 <__adddf3+0x138>
 80203b6:	bf00      	nop

080203b8 <__aeabi_f2d>:
 80203b8:	0042      	lsls	r2, r0, #1
 80203ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80203be:	ea4f 0131 	mov.w	r1, r1, rrx
 80203c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80203c6:	bf1f      	itttt	ne
 80203c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80203cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80203d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80203d4:	4770      	bxne	lr
 80203d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80203da:	bf08      	it	eq
 80203dc:	4770      	bxeq	lr
 80203de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80203e2:	bf04      	itt	eq
 80203e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80203e8:	4770      	bxeq	lr
 80203ea:	b530      	push	{r4, r5, lr}
 80203ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80203f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80203f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80203f8:	e71c      	b.n	8020234 <__adddf3+0x138>
 80203fa:	bf00      	nop

080203fc <__aeabi_ul2d>:
 80203fc:	ea50 0201 	orrs.w	r2, r0, r1
 8020400:	bf08      	it	eq
 8020402:	4770      	bxeq	lr
 8020404:	b530      	push	{r4, r5, lr}
 8020406:	f04f 0500 	mov.w	r5, #0
 802040a:	e00a      	b.n	8020422 <__aeabi_l2d+0x16>

0802040c <__aeabi_l2d>:
 802040c:	ea50 0201 	orrs.w	r2, r0, r1
 8020410:	bf08      	it	eq
 8020412:	4770      	bxeq	lr
 8020414:	b530      	push	{r4, r5, lr}
 8020416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 802041a:	d502      	bpl.n	8020422 <__aeabi_l2d+0x16>
 802041c:	4240      	negs	r0, r0
 802041e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802042a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 802042e:	f43f aed8 	beq.w	80201e2 <__adddf3+0xe6>
 8020432:	f04f 0203 	mov.w	r2, #3
 8020436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802043a:	bf18      	it	ne
 802043c:	3203      	addne	r2, #3
 802043e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8020442:	bf18      	it	ne
 8020444:	3203      	addne	r2, #3
 8020446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 802044a:	f1c2 0320 	rsb	r3, r2, #32
 802044e:	fa00 fc03 	lsl.w	ip, r0, r3
 8020452:	fa20 f002 	lsr.w	r0, r0, r2
 8020456:	fa01 fe03 	lsl.w	lr, r1, r3
 802045a:	ea40 000e 	orr.w	r0, r0, lr
 802045e:	fa21 f102 	lsr.w	r1, r1, r2
 8020462:	4414      	add	r4, r2
 8020464:	e6bd      	b.n	80201e2 <__adddf3+0xe6>
 8020466:	bf00      	nop

08020468 <__aeabi_dmul>:
 8020468:	b570      	push	{r4, r5, r6, lr}
 802046a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 802046e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8020476:	bf1d      	ittte	ne
 8020478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 802047c:	ea94 0f0c 	teqne	r4, ip
 8020480:	ea95 0f0c 	teqne	r5, ip
 8020484:	f000 f8de 	bleq	8020644 <__aeabi_dmul+0x1dc>
 8020488:	442c      	add	r4, r5
 802048a:	ea81 0603 	eor.w	r6, r1, r3
 802048e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8020492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8020496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 802049a:	bf18      	it	ne
 802049c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80204a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80204a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80204a8:	d038      	beq.n	802051c <__aeabi_dmul+0xb4>
 80204aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80204ae:	f04f 0500 	mov.w	r5, #0
 80204b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80204b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80204ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80204be:	f04f 0600 	mov.w	r6, #0
 80204c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80204c6:	f09c 0f00 	teq	ip, #0
 80204ca:	bf18      	it	ne
 80204cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80204d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80204d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80204d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80204dc:	d204      	bcs.n	80204e8 <__aeabi_dmul+0x80>
 80204de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80204e2:	416d      	adcs	r5, r5
 80204e4:	eb46 0606 	adc.w	r6, r6, r6
 80204e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80204ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80204f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80204f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80204f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80204fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8020500:	bf88      	it	hi
 8020502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020506:	d81e      	bhi.n	8020546 <__aeabi_dmul+0xde>
 8020508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 802050c:	bf08      	it	eq
 802050e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8020512:	f150 0000 	adcs.w	r0, r0, #0
 8020516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802051a:	bd70      	pop	{r4, r5, r6, pc}
 802051c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8020520:	ea46 0101 	orr.w	r1, r6, r1
 8020524:	ea40 0002 	orr.w	r0, r0, r2
 8020528:	ea81 0103 	eor.w	r1, r1, r3
 802052c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8020530:	bfc2      	ittt	gt
 8020532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 802053a:	bd70      	popgt	{r4, r5, r6, pc}
 802053c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020540:	f04f 0e00 	mov.w	lr, #0
 8020544:	3c01      	subs	r4, #1
 8020546:	f300 80ab 	bgt.w	80206a0 <__aeabi_dmul+0x238>
 802054a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 802054e:	bfde      	ittt	le
 8020550:	2000      	movle	r0, #0
 8020552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8020556:	bd70      	pople	{r4, r5, r6, pc}
 8020558:	f1c4 0400 	rsb	r4, r4, #0
 802055c:	3c20      	subs	r4, #32
 802055e:	da35      	bge.n	80205cc <__aeabi_dmul+0x164>
 8020560:	340c      	adds	r4, #12
 8020562:	dc1b      	bgt.n	802059c <__aeabi_dmul+0x134>
 8020564:	f104 0414 	add.w	r4, r4, #20
 8020568:	f1c4 0520 	rsb	r5, r4, #32
 802056c:	fa00 f305 	lsl.w	r3, r0, r5
 8020570:	fa20 f004 	lsr.w	r0, r0, r4
 8020574:	fa01 f205 	lsl.w	r2, r1, r5
 8020578:	ea40 0002 	orr.w	r0, r0, r2
 802057c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8020580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8020588:	fa21 f604 	lsr.w	r6, r1, r4
 802058c:	eb42 0106 	adc.w	r1, r2, r6
 8020590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020594:	bf08      	it	eq
 8020596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802059a:	bd70      	pop	{r4, r5, r6, pc}
 802059c:	f1c4 040c 	rsb	r4, r4, #12
 80205a0:	f1c4 0520 	rsb	r5, r4, #32
 80205a4:	fa00 f304 	lsl.w	r3, r0, r4
 80205a8:	fa20 f005 	lsr.w	r0, r0, r5
 80205ac:	fa01 f204 	lsl.w	r2, r1, r4
 80205b0:	ea40 0002 	orr.w	r0, r0, r2
 80205b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80205bc:	f141 0100 	adc.w	r1, r1, #0
 80205c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80205c4:	bf08      	it	eq
 80205c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80205ca:	bd70      	pop	{r4, r5, r6, pc}
 80205cc:	f1c4 0520 	rsb	r5, r4, #32
 80205d0:	fa00 f205 	lsl.w	r2, r0, r5
 80205d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80205d8:	fa20 f304 	lsr.w	r3, r0, r4
 80205dc:	fa01 f205 	lsl.w	r2, r1, r5
 80205e0:	ea43 0302 	orr.w	r3, r3, r2
 80205e4:	fa21 f004 	lsr.w	r0, r1, r4
 80205e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205ec:	fa21 f204 	lsr.w	r2, r1, r4
 80205f0:	ea20 0002 	bic.w	r0, r0, r2
 80205f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80205f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80205fc:	bf08      	it	eq
 80205fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020602:	bd70      	pop	{r4, r5, r6, pc}
 8020604:	f094 0f00 	teq	r4, #0
 8020608:	d10f      	bne.n	802062a <__aeabi_dmul+0x1c2>
 802060a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802060e:	0040      	lsls	r0, r0, #1
 8020610:	eb41 0101 	adc.w	r1, r1, r1
 8020614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020618:	bf08      	it	eq
 802061a:	3c01      	subeq	r4, #1
 802061c:	d0f7      	beq.n	802060e <__aeabi_dmul+0x1a6>
 802061e:	ea41 0106 	orr.w	r1, r1, r6
 8020622:	f095 0f00 	teq	r5, #0
 8020626:	bf18      	it	ne
 8020628:	4770      	bxne	lr
 802062a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 802062e:	0052      	lsls	r2, r2, #1
 8020630:	eb43 0303 	adc.w	r3, r3, r3
 8020634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8020638:	bf08      	it	eq
 802063a:	3d01      	subeq	r5, #1
 802063c:	d0f7      	beq.n	802062e <__aeabi_dmul+0x1c6>
 802063e:	ea43 0306 	orr.w	r3, r3, r6
 8020642:	4770      	bx	lr
 8020644:	ea94 0f0c 	teq	r4, ip
 8020648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802064c:	bf18      	it	ne
 802064e:	ea95 0f0c 	teqne	r5, ip
 8020652:	d00c      	beq.n	802066e <__aeabi_dmul+0x206>
 8020654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020658:	bf18      	it	ne
 802065a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802065e:	d1d1      	bne.n	8020604 <__aeabi_dmul+0x19c>
 8020660:	ea81 0103 	eor.w	r1, r1, r3
 8020664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020668:	f04f 0000 	mov.w	r0, #0
 802066c:	bd70      	pop	{r4, r5, r6, pc}
 802066e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020672:	bf06      	itte	eq
 8020674:	4610      	moveq	r0, r2
 8020676:	4619      	moveq	r1, r3
 8020678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802067c:	d019      	beq.n	80206b2 <__aeabi_dmul+0x24a>
 802067e:	ea94 0f0c 	teq	r4, ip
 8020682:	d102      	bne.n	802068a <__aeabi_dmul+0x222>
 8020684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8020688:	d113      	bne.n	80206b2 <__aeabi_dmul+0x24a>
 802068a:	ea95 0f0c 	teq	r5, ip
 802068e:	d105      	bne.n	802069c <__aeabi_dmul+0x234>
 8020690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8020694:	bf1c      	itt	ne
 8020696:	4610      	movne	r0, r2
 8020698:	4619      	movne	r1, r3
 802069a:	d10a      	bne.n	80206b2 <__aeabi_dmul+0x24a>
 802069c:	ea81 0103 	eor.w	r1, r1, r3
 80206a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80206a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80206a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80206ac:	f04f 0000 	mov.w	r0, #0
 80206b0:	bd70      	pop	{r4, r5, r6, pc}
 80206b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80206b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80206ba:	bd70      	pop	{r4, r5, r6, pc}

080206bc <__aeabi_ddiv>:
 80206bc:	b570      	push	{r4, r5, r6, lr}
 80206be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80206c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80206c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80206ca:	bf1d      	ittte	ne
 80206cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80206d0:	ea94 0f0c 	teqne	r4, ip
 80206d4:	ea95 0f0c 	teqne	r5, ip
 80206d8:	f000 f8a7 	bleq	802082a <__aeabi_ddiv+0x16e>
 80206dc:	eba4 0405 	sub.w	r4, r4, r5
 80206e0:	ea81 0e03 	eor.w	lr, r1, r3
 80206e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80206e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80206ec:	f000 8088 	beq.w	8020800 <__aeabi_ddiv+0x144>
 80206f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80206f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80206f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80206fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8020700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802070c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8020710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8020714:	429d      	cmp	r5, r3
 8020716:	bf08      	it	eq
 8020718:	4296      	cmpeq	r6, r2
 802071a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 802071e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8020722:	d202      	bcs.n	802072a <__aeabi_ddiv+0x6e>
 8020724:	085b      	lsrs	r3, r3, #1
 8020726:	ea4f 0232 	mov.w	r2, r2, rrx
 802072a:	1ab6      	subs	r6, r6, r2
 802072c:	eb65 0503 	sbc.w	r5, r5, r3
 8020730:	085b      	lsrs	r3, r3, #1
 8020732:	ea4f 0232 	mov.w	r2, r2, rrx
 8020736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 802073a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 802073e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020746:	bf22      	ittt	cs
 8020748:	1ab6      	subcs	r6, r6, r2
 802074a:	4675      	movcs	r5, lr
 802074c:	ea40 000c 	orrcs.w	r0, r0, ip
 8020750:	085b      	lsrs	r3, r3, #1
 8020752:	ea4f 0232 	mov.w	r2, r2, rrx
 8020756:	ebb6 0e02 	subs.w	lr, r6, r2
 802075a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802075e:	bf22      	ittt	cs
 8020760:	1ab6      	subcs	r6, r6, r2
 8020762:	4675      	movcs	r5, lr
 8020764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8020768:	085b      	lsrs	r3, r3, #1
 802076a:	ea4f 0232 	mov.w	r2, r2, rrx
 802076e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020776:	bf22      	ittt	cs
 8020778:	1ab6      	subcs	r6, r6, r2
 802077a:	4675      	movcs	r5, lr
 802077c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8020780:	085b      	lsrs	r3, r3, #1
 8020782:	ea4f 0232 	mov.w	r2, r2, rrx
 8020786:	ebb6 0e02 	subs.w	lr, r6, r2
 802078a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802078e:	bf22      	ittt	cs
 8020790:	1ab6      	subcs	r6, r6, r2
 8020792:	4675      	movcs	r5, lr
 8020794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8020798:	ea55 0e06 	orrs.w	lr, r5, r6
 802079c:	d018      	beq.n	80207d0 <__aeabi_ddiv+0x114>
 802079e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80207a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80207a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80207aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80207ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80207b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80207b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80207ba:	d1c0      	bne.n	802073e <__aeabi_ddiv+0x82>
 80207bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80207c0:	d10b      	bne.n	80207da <__aeabi_ddiv+0x11e>
 80207c2:	ea41 0100 	orr.w	r1, r1, r0
 80207c6:	f04f 0000 	mov.w	r0, #0
 80207ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80207ce:	e7b6      	b.n	802073e <__aeabi_ddiv+0x82>
 80207d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80207d4:	bf04      	itt	eq
 80207d6:	4301      	orreq	r1, r0
 80207d8:	2000      	moveq	r0, #0
 80207da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80207de:	bf88      	it	hi
 80207e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80207e4:	f63f aeaf 	bhi.w	8020546 <__aeabi_dmul+0xde>
 80207e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80207ec:	bf04      	itt	eq
 80207ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80207f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80207f6:	f150 0000 	adcs.w	r0, r0, #0
 80207fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80207fe:	bd70      	pop	{r4, r5, r6, pc}
 8020800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8020804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 802080c:	bfc2      	ittt	gt
 802080e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020816:	bd70      	popgt	{r4, r5, r6, pc}
 8020818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802081c:	f04f 0e00 	mov.w	lr, #0
 8020820:	3c01      	subs	r4, #1
 8020822:	e690      	b.n	8020546 <__aeabi_dmul+0xde>
 8020824:	ea45 0e06 	orr.w	lr, r5, r6
 8020828:	e68d      	b.n	8020546 <__aeabi_dmul+0xde>
 802082a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802082e:	ea94 0f0c 	teq	r4, ip
 8020832:	bf08      	it	eq
 8020834:	ea95 0f0c 	teqeq	r5, ip
 8020838:	f43f af3b 	beq.w	80206b2 <__aeabi_dmul+0x24a>
 802083c:	ea94 0f0c 	teq	r4, ip
 8020840:	d10a      	bne.n	8020858 <__aeabi_ddiv+0x19c>
 8020842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020846:	f47f af34 	bne.w	80206b2 <__aeabi_dmul+0x24a>
 802084a:	ea95 0f0c 	teq	r5, ip
 802084e:	f47f af25 	bne.w	802069c <__aeabi_dmul+0x234>
 8020852:	4610      	mov	r0, r2
 8020854:	4619      	mov	r1, r3
 8020856:	e72c      	b.n	80206b2 <__aeabi_dmul+0x24a>
 8020858:	ea95 0f0c 	teq	r5, ip
 802085c:	d106      	bne.n	802086c <__aeabi_ddiv+0x1b0>
 802085e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020862:	f43f aefd 	beq.w	8020660 <__aeabi_dmul+0x1f8>
 8020866:	4610      	mov	r0, r2
 8020868:	4619      	mov	r1, r3
 802086a:	e722      	b.n	80206b2 <__aeabi_dmul+0x24a>
 802086c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020870:	bf18      	it	ne
 8020872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8020876:	f47f aec5 	bne.w	8020604 <__aeabi_dmul+0x19c>
 802087a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 802087e:	f47f af0d 	bne.w	802069c <__aeabi_dmul+0x234>
 8020882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8020886:	f47f aeeb 	bne.w	8020660 <__aeabi_dmul+0x1f8>
 802088a:	e712      	b.n	80206b2 <__aeabi_dmul+0x24a>

0802088c <__gedf2>:
 802088c:	f04f 3cff 	mov.w	ip, #4294967295
 8020890:	e006      	b.n	80208a0 <__cmpdf2+0x4>
 8020892:	bf00      	nop

08020894 <__ledf2>:
 8020894:	f04f 0c01 	mov.w	ip, #1
 8020898:	e002      	b.n	80208a0 <__cmpdf2+0x4>
 802089a:	bf00      	nop

0802089c <__cmpdf2>:
 802089c:	f04f 0c01 	mov.w	ip, #1
 80208a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80208a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80208a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80208ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80208b0:	bf18      	it	ne
 80208b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80208b6:	d01b      	beq.n	80208f0 <__cmpdf2+0x54>
 80208b8:	b001      	add	sp, #4
 80208ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80208be:	bf0c      	ite	eq
 80208c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80208c4:	ea91 0f03 	teqne	r1, r3
 80208c8:	bf02      	ittt	eq
 80208ca:	ea90 0f02 	teqeq	r0, r2
 80208ce:	2000      	moveq	r0, #0
 80208d0:	4770      	bxeq	lr
 80208d2:	f110 0f00 	cmn.w	r0, #0
 80208d6:	ea91 0f03 	teq	r1, r3
 80208da:	bf58      	it	pl
 80208dc:	4299      	cmppl	r1, r3
 80208de:	bf08      	it	eq
 80208e0:	4290      	cmpeq	r0, r2
 80208e2:	bf2c      	ite	cs
 80208e4:	17d8      	asrcs	r0, r3, #31
 80208e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80208ea:	f040 0001 	orr.w	r0, r0, #1
 80208ee:	4770      	bx	lr
 80208f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80208f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80208f8:	d102      	bne.n	8020900 <__cmpdf2+0x64>
 80208fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80208fe:	d107      	bne.n	8020910 <__cmpdf2+0x74>
 8020900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020908:	d1d6      	bne.n	80208b8 <__cmpdf2+0x1c>
 802090a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 802090e:	d0d3      	beq.n	80208b8 <__cmpdf2+0x1c>
 8020910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020914:	4770      	bx	lr
 8020916:	bf00      	nop

08020918 <__aeabi_cdrcmple>:
 8020918:	4684      	mov	ip, r0
 802091a:	4610      	mov	r0, r2
 802091c:	4662      	mov	r2, ip
 802091e:	468c      	mov	ip, r1
 8020920:	4619      	mov	r1, r3
 8020922:	4663      	mov	r3, ip
 8020924:	e000      	b.n	8020928 <__aeabi_cdcmpeq>
 8020926:	bf00      	nop

08020928 <__aeabi_cdcmpeq>:
 8020928:	b501      	push	{r0, lr}
 802092a:	f7ff ffb7 	bl	802089c <__cmpdf2>
 802092e:	2800      	cmp	r0, #0
 8020930:	bf48      	it	mi
 8020932:	f110 0f00 	cmnmi.w	r0, #0
 8020936:	bd01      	pop	{r0, pc}

08020938 <__aeabi_dcmpeq>:
 8020938:	f84d ed08 	str.w	lr, [sp, #-8]!
 802093c:	f7ff fff4 	bl	8020928 <__aeabi_cdcmpeq>
 8020940:	bf0c      	ite	eq
 8020942:	2001      	moveq	r0, #1
 8020944:	2000      	movne	r0, #0
 8020946:	f85d fb08 	ldr.w	pc, [sp], #8
 802094a:	bf00      	nop

0802094c <__aeabi_dcmplt>:
 802094c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020950:	f7ff ffea 	bl	8020928 <__aeabi_cdcmpeq>
 8020954:	bf34      	ite	cc
 8020956:	2001      	movcc	r0, #1
 8020958:	2000      	movcs	r0, #0
 802095a:	f85d fb08 	ldr.w	pc, [sp], #8
 802095e:	bf00      	nop

08020960 <__aeabi_dcmple>:
 8020960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020964:	f7ff ffe0 	bl	8020928 <__aeabi_cdcmpeq>
 8020968:	bf94      	ite	ls
 802096a:	2001      	movls	r0, #1
 802096c:	2000      	movhi	r0, #0
 802096e:	f85d fb08 	ldr.w	pc, [sp], #8
 8020972:	bf00      	nop

08020974 <__aeabi_dcmpge>:
 8020974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020978:	f7ff ffce 	bl	8020918 <__aeabi_cdrcmple>
 802097c:	bf94      	ite	ls
 802097e:	2001      	movls	r0, #1
 8020980:	2000      	movhi	r0, #0
 8020982:	f85d fb08 	ldr.w	pc, [sp], #8
 8020986:	bf00      	nop

08020988 <__aeabi_dcmpgt>:
 8020988:	f84d ed08 	str.w	lr, [sp, #-8]!
 802098c:	f7ff ffc4 	bl	8020918 <__aeabi_cdrcmple>
 8020990:	bf34      	ite	cc
 8020992:	2001      	movcc	r0, #1
 8020994:	2000      	movcs	r0, #0
 8020996:	f85d fb08 	ldr.w	pc, [sp], #8
 802099a:	bf00      	nop

0802099c <__aeabi_dcmpun>:
 802099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80209a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80209a4:	d102      	bne.n	80209ac <__aeabi_dcmpun+0x10>
 80209a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80209aa:	d10a      	bne.n	80209c2 <__aeabi_dcmpun+0x26>
 80209ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80209b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80209b4:	d102      	bne.n	80209bc <__aeabi_dcmpun+0x20>
 80209b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80209ba:	d102      	bne.n	80209c2 <__aeabi_dcmpun+0x26>
 80209bc:	f04f 0000 	mov.w	r0, #0
 80209c0:	4770      	bx	lr
 80209c2:	f04f 0001 	mov.w	r0, #1
 80209c6:	4770      	bx	lr

080209c8 <__aeabi_d2iz>:
 80209c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80209cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80209d0:	d215      	bcs.n	80209fe <__aeabi_d2iz+0x36>
 80209d2:	d511      	bpl.n	80209f8 <__aeabi_d2iz+0x30>
 80209d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80209d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80209dc:	d912      	bls.n	8020a04 <__aeabi_d2iz+0x3c>
 80209de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80209e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80209e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80209ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80209ee:	fa23 f002 	lsr.w	r0, r3, r2
 80209f2:	bf18      	it	ne
 80209f4:	4240      	negne	r0, r0
 80209f6:	4770      	bx	lr
 80209f8:	f04f 0000 	mov.w	r0, #0
 80209fc:	4770      	bx	lr
 80209fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020a02:	d105      	bne.n	8020a10 <__aeabi_d2iz+0x48>
 8020a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8020a08:	bf08      	it	eq
 8020a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8020a0e:	4770      	bx	lr
 8020a10:	f04f 0000 	mov.w	r0, #0
 8020a14:	4770      	bx	lr
 8020a16:	bf00      	nop

08020a18 <__aeabi_d2f>:
 8020a18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020a1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8020a20:	bf24      	itt	cs
 8020a22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8020a26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8020a2a:	d90d      	bls.n	8020a48 <__aeabi_d2f+0x30>
 8020a2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8020a30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020a34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8020a38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8020a3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8020a40:	bf08      	it	eq
 8020a42:	f020 0001 	biceq.w	r0, r0, #1
 8020a46:	4770      	bx	lr
 8020a48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8020a4c:	d121      	bne.n	8020a92 <__aeabi_d2f+0x7a>
 8020a4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8020a52:	bfbc      	itt	lt
 8020a54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8020a58:	4770      	bxlt	lr
 8020a5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020a5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8020a62:	f1c2 0218 	rsb	r2, r2, #24
 8020a66:	f1c2 0c20 	rsb	ip, r2, #32
 8020a6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8020a6e:	fa20 f002 	lsr.w	r0, r0, r2
 8020a72:	bf18      	it	ne
 8020a74:	f040 0001 	orrne.w	r0, r0, #1
 8020a78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020a7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8020a80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8020a84:	ea40 000c 	orr.w	r0, r0, ip
 8020a88:	fa23 f302 	lsr.w	r3, r3, r2
 8020a8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020a90:	e7cc      	b.n	8020a2c <__aeabi_d2f+0x14>
 8020a92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8020a96:	d107      	bne.n	8020aa8 <__aeabi_d2f+0x90>
 8020a98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8020a9c:	bf1e      	ittt	ne
 8020a9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8020aa2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8020aa6:	4770      	bxne	lr
 8020aa8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8020aac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8020ab0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020ab4:	4770      	bx	lr
 8020ab6:	bf00      	nop

08020ab8 <__aeabi_uldivmod>:
 8020ab8:	b953      	cbnz	r3, 8020ad0 <__aeabi_uldivmod+0x18>
 8020aba:	b94a      	cbnz	r2, 8020ad0 <__aeabi_uldivmod+0x18>
 8020abc:	2900      	cmp	r1, #0
 8020abe:	bf08      	it	eq
 8020ac0:	2800      	cmpeq	r0, #0
 8020ac2:	bf1c      	itt	ne
 8020ac4:	f04f 31ff 	movne.w	r1, #4294967295
 8020ac8:	f04f 30ff 	movne.w	r0, #4294967295
 8020acc:	f000 b972 	b.w	8020db4 <__aeabi_idiv0>
 8020ad0:	f1ad 0c08 	sub.w	ip, sp, #8
 8020ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020ad8:	f000 f806 	bl	8020ae8 <__udivmoddi4>
 8020adc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020ae4:	b004      	add	sp, #16
 8020ae6:	4770      	bx	lr

08020ae8 <__udivmoddi4>:
 8020ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020aec:	9e08      	ldr	r6, [sp, #32]
 8020aee:	4604      	mov	r4, r0
 8020af0:	4688      	mov	r8, r1
 8020af2:	2b00      	cmp	r3, #0
 8020af4:	d14b      	bne.n	8020b8e <__udivmoddi4+0xa6>
 8020af6:	428a      	cmp	r2, r1
 8020af8:	4615      	mov	r5, r2
 8020afa:	d967      	bls.n	8020bcc <__udivmoddi4+0xe4>
 8020afc:	fab2 f282 	clz	r2, r2
 8020b00:	b14a      	cbz	r2, 8020b16 <__udivmoddi4+0x2e>
 8020b02:	f1c2 0720 	rsb	r7, r2, #32
 8020b06:	fa01 f302 	lsl.w	r3, r1, r2
 8020b0a:	fa20 f707 	lsr.w	r7, r0, r7
 8020b0e:	4095      	lsls	r5, r2
 8020b10:	ea47 0803 	orr.w	r8, r7, r3
 8020b14:	4094      	lsls	r4, r2
 8020b16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020b1a:	0c23      	lsrs	r3, r4, #16
 8020b1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8020b20:	fa1f fc85 	uxth.w	ip, r5
 8020b24:	fb0e 8817 	mls	r8, lr, r7, r8
 8020b28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8020b2c:	fb07 f10c 	mul.w	r1, r7, ip
 8020b30:	4299      	cmp	r1, r3
 8020b32:	d909      	bls.n	8020b48 <__udivmoddi4+0x60>
 8020b34:	18eb      	adds	r3, r5, r3
 8020b36:	f107 30ff 	add.w	r0, r7, #4294967295
 8020b3a:	f080 811b 	bcs.w	8020d74 <__udivmoddi4+0x28c>
 8020b3e:	4299      	cmp	r1, r3
 8020b40:	f240 8118 	bls.w	8020d74 <__udivmoddi4+0x28c>
 8020b44:	3f02      	subs	r7, #2
 8020b46:	442b      	add	r3, r5
 8020b48:	1a5b      	subs	r3, r3, r1
 8020b4a:	b2a4      	uxth	r4, r4
 8020b4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8020b50:	fb0e 3310 	mls	r3, lr, r0, r3
 8020b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020b58:	fb00 fc0c 	mul.w	ip, r0, ip
 8020b5c:	45a4      	cmp	ip, r4
 8020b5e:	d909      	bls.n	8020b74 <__udivmoddi4+0x8c>
 8020b60:	192c      	adds	r4, r5, r4
 8020b62:	f100 33ff 	add.w	r3, r0, #4294967295
 8020b66:	f080 8107 	bcs.w	8020d78 <__udivmoddi4+0x290>
 8020b6a:	45a4      	cmp	ip, r4
 8020b6c:	f240 8104 	bls.w	8020d78 <__udivmoddi4+0x290>
 8020b70:	3802      	subs	r0, #2
 8020b72:	442c      	add	r4, r5
 8020b74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8020b78:	eba4 040c 	sub.w	r4, r4, ip
 8020b7c:	2700      	movs	r7, #0
 8020b7e:	b11e      	cbz	r6, 8020b88 <__udivmoddi4+0xa0>
 8020b80:	40d4      	lsrs	r4, r2
 8020b82:	2300      	movs	r3, #0
 8020b84:	e9c6 4300 	strd	r4, r3, [r6]
 8020b88:	4639      	mov	r1, r7
 8020b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b8e:	428b      	cmp	r3, r1
 8020b90:	d909      	bls.n	8020ba6 <__udivmoddi4+0xbe>
 8020b92:	2e00      	cmp	r6, #0
 8020b94:	f000 80eb 	beq.w	8020d6e <__udivmoddi4+0x286>
 8020b98:	2700      	movs	r7, #0
 8020b9a:	e9c6 0100 	strd	r0, r1, [r6]
 8020b9e:	4638      	mov	r0, r7
 8020ba0:	4639      	mov	r1, r7
 8020ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020ba6:	fab3 f783 	clz	r7, r3
 8020baa:	2f00      	cmp	r7, #0
 8020bac:	d147      	bne.n	8020c3e <__udivmoddi4+0x156>
 8020bae:	428b      	cmp	r3, r1
 8020bb0:	d302      	bcc.n	8020bb8 <__udivmoddi4+0xd0>
 8020bb2:	4282      	cmp	r2, r0
 8020bb4:	f200 80fa 	bhi.w	8020dac <__udivmoddi4+0x2c4>
 8020bb8:	1a84      	subs	r4, r0, r2
 8020bba:	eb61 0303 	sbc.w	r3, r1, r3
 8020bbe:	2001      	movs	r0, #1
 8020bc0:	4698      	mov	r8, r3
 8020bc2:	2e00      	cmp	r6, #0
 8020bc4:	d0e0      	beq.n	8020b88 <__udivmoddi4+0xa0>
 8020bc6:	e9c6 4800 	strd	r4, r8, [r6]
 8020bca:	e7dd      	b.n	8020b88 <__udivmoddi4+0xa0>
 8020bcc:	b902      	cbnz	r2, 8020bd0 <__udivmoddi4+0xe8>
 8020bce:	deff      	udf	#255	; 0xff
 8020bd0:	fab2 f282 	clz	r2, r2
 8020bd4:	2a00      	cmp	r2, #0
 8020bd6:	f040 808f 	bne.w	8020cf8 <__udivmoddi4+0x210>
 8020bda:	1b49      	subs	r1, r1, r5
 8020bdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020be0:	fa1f f885 	uxth.w	r8, r5
 8020be4:	2701      	movs	r7, #1
 8020be6:	fbb1 fcfe 	udiv	ip, r1, lr
 8020bea:	0c23      	lsrs	r3, r4, #16
 8020bec:	fb0e 111c 	mls	r1, lr, ip, r1
 8020bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020bf4:	fb08 f10c 	mul.w	r1, r8, ip
 8020bf8:	4299      	cmp	r1, r3
 8020bfa:	d907      	bls.n	8020c0c <__udivmoddi4+0x124>
 8020bfc:	18eb      	adds	r3, r5, r3
 8020bfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8020c02:	d202      	bcs.n	8020c0a <__udivmoddi4+0x122>
 8020c04:	4299      	cmp	r1, r3
 8020c06:	f200 80cd 	bhi.w	8020da4 <__udivmoddi4+0x2bc>
 8020c0a:	4684      	mov	ip, r0
 8020c0c:	1a59      	subs	r1, r3, r1
 8020c0e:	b2a3      	uxth	r3, r4
 8020c10:	fbb1 f0fe 	udiv	r0, r1, lr
 8020c14:	fb0e 1410 	mls	r4, lr, r0, r1
 8020c18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8020c1c:	fb08 f800 	mul.w	r8, r8, r0
 8020c20:	45a0      	cmp	r8, r4
 8020c22:	d907      	bls.n	8020c34 <__udivmoddi4+0x14c>
 8020c24:	192c      	adds	r4, r5, r4
 8020c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8020c2a:	d202      	bcs.n	8020c32 <__udivmoddi4+0x14a>
 8020c2c:	45a0      	cmp	r8, r4
 8020c2e:	f200 80b6 	bhi.w	8020d9e <__udivmoddi4+0x2b6>
 8020c32:	4618      	mov	r0, r3
 8020c34:	eba4 0408 	sub.w	r4, r4, r8
 8020c38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8020c3c:	e79f      	b.n	8020b7e <__udivmoddi4+0x96>
 8020c3e:	f1c7 0c20 	rsb	ip, r7, #32
 8020c42:	40bb      	lsls	r3, r7
 8020c44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8020c48:	ea4e 0e03 	orr.w	lr, lr, r3
 8020c4c:	fa01 f407 	lsl.w	r4, r1, r7
 8020c50:	fa20 f50c 	lsr.w	r5, r0, ip
 8020c54:	fa21 f30c 	lsr.w	r3, r1, ip
 8020c58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8020c5c:	4325      	orrs	r5, r4
 8020c5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8020c62:	0c2c      	lsrs	r4, r5, #16
 8020c64:	fb08 3319 	mls	r3, r8, r9, r3
 8020c68:	fa1f fa8e 	uxth.w	sl, lr
 8020c6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8020c70:	fb09 f40a 	mul.w	r4, r9, sl
 8020c74:	429c      	cmp	r4, r3
 8020c76:	fa02 f207 	lsl.w	r2, r2, r7
 8020c7a:	fa00 f107 	lsl.w	r1, r0, r7
 8020c7e:	d90b      	bls.n	8020c98 <__udivmoddi4+0x1b0>
 8020c80:	eb1e 0303 	adds.w	r3, lr, r3
 8020c84:	f109 30ff 	add.w	r0, r9, #4294967295
 8020c88:	f080 8087 	bcs.w	8020d9a <__udivmoddi4+0x2b2>
 8020c8c:	429c      	cmp	r4, r3
 8020c8e:	f240 8084 	bls.w	8020d9a <__udivmoddi4+0x2b2>
 8020c92:	f1a9 0902 	sub.w	r9, r9, #2
 8020c96:	4473      	add	r3, lr
 8020c98:	1b1b      	subs	r3, r3, r4
 8020c9a:	b2ad      	uxth	r5, r5
 8020c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8020ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8020ca4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8020ca8:	fb00 fa0a 	mul.w	sl, r0, sl
 8020cac:	45a2      	cmp	sl, r4
 8020cae:	d908      	bls.n	8020cc2 <__udivmoddi4+0x1da>
 8020cb0:	eb1e 0404 	adds.w	r4, lr, r4
 8020cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8020cb8:	d26b      	bcs.n	8020d92 <__udivmoddi4+0x2aa>
 8020cba:	45a2      	cmp	sl, r4
 8020cbc:	d969      	bls.n	8020d92 <__udivmoddi4+0x2aa>
 8020cbe:	3802      	subs	r0, #2
 8020cc0:	4474      	add	r4, lr
 8020cc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020cc6:	fba0 8902 	umull	r8, r9, r0, r2
 8020cca:	eba4 040a 	sub.w	r4, r4, sl
 8020cce:	454c      	cmp	r4, r9
 8020cd0:	46c2      	mov	sl, r8
 8020cd2:	464b      	mov	r3, r9
 8020cd4:	d354      	bcc.n	8020d80 <__udivmoddi4+0x298>
 8020cd6:	d051      	beq.n	8020d7c <__udivmoddi4+0x294>
 8020cd8:	2e00      	cmp	r6, #0
 8020cda:	d069      	beq.n	8020db0 <__udivmoddi4+0x2c8>
 8020cdc:	ebb1 050a 	subs.w	r5, r1, sl
 8020ce0:	eb64 0403 	sbc.w	r4, r4, r3
 8020ce4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8020ce8:	40fd      	lsrs	r5, r7
 8020cea:	40fc      	lsrs	r4, r7
 8020cec:	ea4c 0505 	orr.w	r5, ip, r5
 8020cf0:	e9c6 5400 	strd	r5, r4, [r6]
 8020cf4:	2700      	movs	r7, #0
 8020cf6:	e747      	b.n	8020b88 <__udivmoddi4+0xa0>
 8020cf8:	f1c2 0320 	rsb	r3, r2, #32
 8020cfc:	fa20 f703 	lsr.w	r7, r0, r3
 8020d00:	4095      	lsls	r5, r2
 8020d02:	fa01 f002 	lsl.w	r0, r1, r2
 8020d06:	fa21 f303 	lsr.w	r3, r1, r3
 8020d0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020d0e:	4338      	orrs	r0, r7
 8020d10:	0c01      	lsrs	r1, r0, #16
 8020d12:	fbb3 f7fe 	udiv	r7, r3, lr
 8020d16:	fa1f f885 	uxth.w	r8, r5
 8020d1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8020d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020d22:	fb07 f308 	mul.w	r3, r7, r8
 8020d26:	428b      	cmp	r3, r1
 8020d28:	fa04 f402 	lsl.w	r4, r4, r2
 8020d2c:	d907      	bls.n	8020d3e <__udivmoddi4+0x256>
 8020d2e:	1869      	adds	r1, r5, r1
 8020d30:	f107 3cff 	add.w	ip, r7, #4294967295
 8020d34:	d22f      	bcs.n	8020d96 <__udivmoddi4+0x2ae>
 8020d36:	428b      	cmp	r3, r1
 8020d38:	d92d      	bls.n	8020d96 <__udivmoddi4+0x2ae>
 8020d3a:	3f02      	subs	r7, #2
 8020d3c:	4429      	add	r1, r5
 8020d3e:	1acb      	subs	r3, r1, r3
 8020d40:	b281      	uxth	r1, r0
 8020d42:	fbb3 f0fe 	udiv	r0, r3, lr
 8020d46:	fb0e 3310 	mls	r3, lr, r0, r3
 8020d4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020d4e:	fb00 f308 	mul.w	r3, r0, r8
 8020d52:	428b      	cmp	r3, r1
 8020d54:	d907      	bls.n	8020d66 <__udivmoddi4+0x27e>
 8020d56:	1869      	adds	r1, r5, r1
 8020d58:	f100 3cff 	add.w	ip, r0, #4294967295
 8020d5c:	d217      	bcs.n	8020d8e <__udivmoddi4+0x2a6>
 8020d5e:	428b      	cmp	r3, r1
 8020d60:	d915      	bls.n	8020d8e <__udivmoddi4+0x2a6>
 8020d62:	3802      	subs	r0, #2
 8020d64:	4429      	add	r1, r5
 8020d66:	1ac9      	subs	r1, r1, r3
 8020d68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8020d6c:	e73b      	b.n	8020be6 <__udivmoddi4+0xfe>
 8020d6e:	4637      	mov	r7, r6
 8020d70:	4630      	mov	r0, r6
 8020d72:	e709      	b.n	8020b88 <__udivmoddi4+0xa0>
 8020d74:	4607      	mov	r7, r0
 8020d76:	e6e7      	b.n	8020b48 <__udivmoddi4+0x60>
 8020d78:	4618      	mov	r0, r3
 8020d7a:	e6fb      	b.n	8020b74 <__udivmoddi4+0x8c>
 8020d7c:	4541      	cmp	r1, r8
 8020d7e:	d2ab      	bcs.n	8020cd8 <__udivmoddi4+0x1f0>
 8020d80:	ebb8 0a02 	subs.w	sl, r8, r2
 8020d84:	eb69 020e 	sbc.w	r2, r9, lr
 8020d88:	3801      	subs	r0, #1
 8020d8a:	4613      	mov	r3, r2
 8020d8c:	e7a4      	b.n	8020cd8 <__udivmoddi4+0x1f0>
 8020d8e:	4660      	mov	r0, ip
 8020d90:	e7e9      	b.n	8020d66 <__udivmoddi4+0x27e>
 8020d92:	4618      	mov	r0, r3
 8020d94:	e795      	b.n	8020cc2 <__udivmoddi4+0x1da>
 8020d96:	4667      	mov	r7, ip
 8020d98:	e7d1      	b.n	8020d3e <__udivmoddi4+0x256>
 8020d9a:	4681      	mov	r9, r0
 8020d9c:	e77c      	b.n	8020c98 <__udivmoddi4+0x1b0>
 8020d9e:	3802      	subs	r0, #2
 8020da0:	442c      	add	r4, r5
 8020da2:	e747      	b.n	8020c34 <__udivmoddi4+0x14c>
 8020da4:	f1ac 0c02 	sub.w	ip, ip, #2
 8020da8:	442b      	add	r3, r5
 8020daa:	e72f      	b.n	8020c0c <__udivmoddi4+0x124>
 8020dac:	4638      	mov	r0, r7
 8020dae:	e708      	b.n	8020bc2 <__udivmoddi4+0xda>
 8020db0:	4637      	mov	r7, r6
 8020db2:	e6e9      	b.n	8020b88 <__udivmoddi4+0xa0>

08020db4 <__aeabi_idiv0>:
 8020db4:	4770      	bx	lr
 8020db6:	bf00      	nop

08020db8 <_ZN7EncoderC1Ev>:
#include "encoder.hpp"
#include "declare_extern.h"

Encoder::Encoder() : distance_(0)
 8020db8:	b480      	push	{r7}
 8020dba:	b083      	sub	sp, #12
 8020dbc:	af00      	add	r7, sp, #0
 8020dbe:	6078      	str	r0, [r7, #4]
                   , distance_stack_(0)
                   , distance_difference_(0) {}
 8020dc0:	687b      	ldr	r3, [r7, #4]
 8020dc2:	f04f 0200 	mov.w	r2, #0
 8020dc6:	601a      	str	r2, [r3, #0]
 8020dc8:	687b      	ldr	r3, [r7, #4]
 8020dca:	f04f 0200 	mov.w	r2, #0
 8020dce:	605a      	str	r2, [r3, #4]
 8020dd0:	687b      	ldr	r3, [r7, #4]
 8020dd2:	f04f 0200 	mov.w	r2, #0
 8020dd6:	609a      	str	r2, [r3, #8]
 8020dd8:	687b      	ldr	r3, [r7, #4]
 8020dda:	4618      	mov	r0, r3
 8020ddc:	370c      	adds	r7, #12
 8020dde:	46bd      	mov	sp, r7
 8020de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020de4:	4770      	bx	lr
	...

08020de8 <_ZN7Encoder4InitEv>:

void Encoder::Init()
{
 8020de8:	b580      	push	{r7, lr}
 8020dea:	b082      	sub	sp, #8
 8020dec:	af00      	add	r7, sp, #0
 8020dee:	6078      	str	r0, [r7, #4]
	if(HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL) != HAL_OK)
 8020df0:	213c      	movs	r1, #60	; 0x3c
 8020df2:	4812      	ldr	r0, [pc, #72]	; (8020e3c <_ZN7Encoder4InitEv+0x54>)
 8020df4:	f008 fc46 	bl	8029684 <HAL_TIM_Encoder_Start>
 8020df8:	4603      	mov	r3, r0
 8020dfa:	2b00      	cmp	r3, #0
 8020dfc:	bf14      	ite	ne
 8020dfe:	2301      	movne	r3, #1
 8020e00:	2300      	moveq	r3, #0
 8020e02:	b2db      	uxtb	r3, r3
 8020e04:	2b00      	cmp	r3, #0
 8020e06:	d004      	beq.n	8020e12 <_ZN7Encoder4InitEv+0x2a>
	{
#ifdef DEBUG_MODE
        g_error_handler_tim8 = true;
 8020e08:	4b0d      	ldr	r3, [pc, #52]	; (8020e40 <_ZN7Encoder4InitEv+0x58>)
 8020e0a:	2201      	movs	r2, #1
 8020e0c:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

		Error_Handler();
 8020e0e:	f002 fe4f 	bl	8023ab0 <Error_Handler>
	}

	if(HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL) != HAL_OK)
 8020e12:	213c      	movs	r1, #60	; 0x3c
 8020e14:	480b      	ldr	r0, [pc, #44]	; (8020e44 <_ZN7Encoder4InitEv+0x5c>)
 8020e16:	f008 fc35 	bl	8029684 <HAL_TIM_Encoder_Start>
 8020e1a:	4603      	mov	r3, r0
 8020e1c:	2b00      	cmp	r3, #0
 8020e1e:	bf14      	ite	ne
 8020e20:	2301      	movne	r3, #1
 8020e22:	2300      	moveq	r3, #0
 8020e24:	b2db      	uxtb	r3, r3
 8020e26:	2b00      	cmp	r3, #0
 8020e28:	d004      	beq.n	8020e34 <_ZN7Encoder4InitEv+0x4c>
	{
#ifdef DEBUG_MODE
        g_error_handler_tim4 = true;
 8020e2a:	4b07      	ldr	r3, [pc, #28]	; (8020e48 <_ZN7Encoder4InitEv+0x60>)
 8020e2c:	2201      	movs	r2, #1
 8020e2e:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

		Error_Handler();
 8020e30:	f002 fe3e 	bl	8023ab0 <Error_Handler>
	}
}
 8020e34:	bf00      	nop
 8020e36:	3708      	adds	r7, #8
 8020e38:	46bd      	mov	sp, r7
 8020e3a:	bd80      	pop	{r7, pc}
 8020e3c:	2001114c 	.word	0x2001114c
 8020e40:	20000274 	.word	0x20000274
 8020e44:	2001118c 	.word	0x2001118c
 8020e48:	20000273 	.word	0x20000273
 8020e4c:	00000000 	.word	0x00000000

08020e50 <_ZN7Encoder6UpdateEv>:

void Encoder::Update()
{
 8020e50:	b590      	push	{r4, r7, lr}
 8020e52:	b087      	sub	sp, #28
 8020e54:	af00      	add	r7, sp, #0
 8020e56:	6078      	str	r0, [r7, #4]
	int16_t count_l = static_cast<int16_t>((TIM8 -> CNT) - START_COUNT);
 8020e58:	4b39      	ldr	r3, [pc, #228]	; (8020f40 <_ZN7Encoder6UpdateEv+0xf0>)
 8020e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020e5c:	b29b      	uxth	r3, r3
 8020e5e:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8020e62:	3b7f      	subs	r3, #127	; 0x7f
 8020e64:	b29b      	uxth	r3, r3
 8020e66:	82fb      	strh	r3, [r7, #22]
	int16_t count_r = static_cast<int16_t>(START_COUNT - (TIM4 -> CNT));
 8020e68:	4b36      	ldr	r3, [pc, #216]	; (8020f44 <_ZN7Encoder6UpdateEv+0xf4>)
 8020e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020e6c:	b29b      	uxth	r3, r3
 8020e6e:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 8020e72:	337f      	adds	r3, #127	; 0x7f
 8020e74:	b29b      	uxth	r3, r3
 8020e76:	82bb      	strh	r3, [r7, #20]
	TIM8 -> CNT = START_COUNT;
 8020e78:	4b31      	ldr	r3, [pc, #196]	; (8020f40 <_ZN7Encoder6UpdateEv+0xf0>)
 8020e7a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020e7e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = START_COUNT;
 8020e80:	4b30      	ldr	r3, [pc, #192]	; (8020f44 <_ZN7Encoder6UpdateEv+0xf4>)
 8020e82:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020e86:	625a      	str	r2, [r3, #36]	; 0x24
	float distance_l = static_cast<float>(count_l * DISTANCE_PER_COUNT);
 8020e88:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020e8c:	4618      	mov	r0, r3
 8020e8e:	f7ff fa81 	bl	8020394 <__aeabi_i2d>
 8020e92:	a329      	add	r3, pc, #164	; (adr r3, 8020f38 <_ZN7Encoder6UpdateEv+0xe8>)
 8020e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e98:	f7ff fae6 	bl	8020468 <__aeabi_dmul>
 8020e9c:	4603      	mov	r3, r0
 8020e9e:	460c      	mov	r4, r1
 8020ea0:	4618      	mov	r0, r3
 8020ea2:	4621      	mov	r1, r4
 8020ea4:	f7ff fdb8 	bl	8020a18 <__aeabi_d2f>
 8020ea8:	4603      	mov	r3, r0
 8020eaa:	613b      	str	r3, [r7, #16]
	float distance_r = static_cast<float>(count_r * DISTANCE_PER_COUNT);
 8020eac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8020eb0:	4618      	mov	r0, r3
 8020eb2:	f7ff fa6f 	bl	8020394 <__aeabi_i2d>
 8020eb6:	a320      	add	r3, pc, #128	; (adr r3, 8020f38 <_ZN7Encoder6UpdateEv+0xe8>)
 8020eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ebc:	f7ff fad4 	bl	8020468 <__aeabi_dmul>
 8020ec0:	4603      	mov	r3, r0
 8020ec2:	460c      	mov	r4, r1
 8020ec4:	4618      	mov	r0, r3
 8020ec6:	4621      	mov	r1, r4
 8020ec8:	f7ff fda6 	bl	8020a18 <__aeabi_d2f>
 8020ecc:	4603      	mov	r3, r0
 8020ece:	60fb      	str	r3, [r7, #12]
	float distance = (distance_l + distance_r) / 2.0;
 8020ed0:	ed97 7a04 	vldr	s14, [r7, #16]
 8020ed4:	edd7 7a03 	vldr	s15, [r7, #12]
 8020ed8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8020edc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8020ee0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8020ee4:	edc7 7a02 	vstr	s15, [r7, #8]

	distance_ = distance;
 8020ee8:	687b      	ldr	r3, [r7, #4]
 8020eea:	68ba      	ldr	r2, [r7, #8]
 8020eec:	601a      	str	r2, [r3, #0]
	distance_stack_ += distance;
 8020eee:	687b      	ldr	r3, [r7, #4]
 8020ef0:	ed93 7a01 	vldr	s14, [r3, #4]
 8020ef4:	edd7 7a02 	vldr	s15, [r7, #8]
 8020ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020efc:	687b      	ldr	r3, [r7, #4]
 8020efe:	edc3 7a01 	vstr	s15, [r3, #4]
	distance_difference_ = distance_r - distance_l;
 8020f02:	ed97 7a03 	vldr	s14, [r7, #12]
 8020f06:	edd7 7a04 	vldr	s15, [r7, #16]
 8020f0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8020f0e:	687b      	ldr	r3, [r7, #4]
 8020f10:	edc3 7a02 	vstr	s15, [r3, #8]

#ifdef DEBUG_MODE
	g_enc_cnt_l = count_l;
 8020f14:	4a0c      	ldr	r2, [pc, #48]	; (8020f48 <_ZN7Encoder6UpdateEv+0xf8>)
 8020f16:	8afb      	ldrh	r3, [r7, #22]
 8020f18:	8013      	strh	r3, [r2, #0]
	g_enc_cnt_r = count_r;
 8020f1a:	4a0c      	ldr	r2, [pc, #48]	; (8020f4c <_ZN7Encoder6UpdateEv+0xfc>)
 8020f1c:	8abb      	ldrh	r3, [r7, #20]
 8020f1e:	8013      	strh	r3, [r2, #0]
	g_distance_l = distance_l;
 8020f20:	4a0b      	ldr	r2, [pc, #44]	; (8020f50 <_ZN7Encoder6UpdateEv+0x100>)
 8020f22:	693b      	ldr	r3, [r7, #16]
 8020f24:	6013      	str	r3, [r2, #0]
	g_distance_r = distance_r;
 8020f26:	4a0b      	ldr	r2, [pc, #44]	; (8020f54 <_ZN7Encoder6UpdateEv+0x104>)
 8020f28:	68fb      	ldr	r3, [r7, #12]
 8020f2a:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8020f2c:	bf00      	nop
 8020f2e:	371c      	adds	r7, #28
 8020f30:	46bd      	mov	sp, r7
 8020f32:	bd90      	pop	{r4, r7, pc}
 8020f34:	f3af 8000 	nop.w
 8020f38:	5d35653d 	.word	0x5d35653d
 8020f3c:	3f7d744f 	.word	0x3f7d744f
 8020f40:	40010400 	.word	0x40010400
 8020f44:	40000800 	.word	0x40000800
 8020f48:	20000408 	.word	0x20000408
 8020f4c:	2000040a 	.word	0x2000040a
 8020f50:	2000040c 	.word	0x2000040c
 8020f54:	20000410 	.word	0x20000410

08020f58 <_ZN7Encoder18ResetDistanceStackEv>:
	TIM8 -> CNT = START_COUNT;
	TIM4 -> CNT = START_COUNT;
}

void Encoder::ResetDistanceStack()
{
 8020f58:	b480      	push	{r7}
 8020f5a:	b083      	sub	sp, #12
 8020f5c:	af00      	add	r7, sp, #0
 8020f5e:	6078      	str	r0, [r7, #4]
	distance_stack_ = 0.0;
 8020f60:	687b      	ldr	r3, [r7, #4]
 8020f62:	f04f 0200 	mov.w	r2, #0
 8020f66:	605a      	str	r2, [r3, #4]
}
 8020f68:	bf00      	nop
 8020f6a:	370c      	adds	r7, #12
 8020f6c:	46bd      	mov	sp, r7
 8020f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f72:	4770      	bx	lr

08020f74 <_ZN7Encoder11GetDistanceEv>:

float Encoder::GetDistance()
{
 8020f74:	b480      	push	{r7}
 8020f76:	b083      	sub	sp, #12
 8020f78:	af00      	add	r7, sp, #0
 8020f7a:	6078      	str	r0, [r7, #4]
	return distance_;
 8020f7c:	687b      	ldr	r3, [r7, #4]
 8020f7e:	681b      	ldr	r3, [r3, #0]
 8020f80:	ee07 3a90 	vmov	s15, r3
}
 8020f84:	eeb0 0a67 	vmov.f32	s0, s15
 8020f88:	370c      	adds	r7, #12
 8020f8a:	46bd      	mov	sp, r7
 8020f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f90:	4770      	bx	lr

08020f92 <_ZN7Encoder16GetDistanceStackEv>:

float Encoder::GetDistanceStack()
{
 8020f92:	b480      	push	{r7}
 8020f94:	b083      	sub	sp, #12
 8020f96:	af00      	add	r7, sp, #0
 8020f98:	6078      	str	r0, [r7, #4]
	return distance_stack_;
 8020f9a:	687b      	ldr	r3, [r7, #4]
 8020f9c:	685b      	ldr	r3, [r3, #4]
 8020f9e:	ee07 3a90 	vmov	s15, r3
}
 8020fa2:	eeb0 0a67 	vmov.f32	s0, s15
 8020fa6:	370c      	adds	r7, #12
 8020fa8:	46bd      	mov	sp, r7
 8020faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fae:	4770      	bx	lr

08020fb0 <_ZN7Encoder15AngularVelocityEv>:

float Encoder::AngularVelocity()
{
 8020fb0:	b590      	push	{r4, r7, lr}
 8020fb2:	b083      	sub	sp, #12
 8020fb4:	af00      	add	r7, sp, #0
 8020fb6:	6078      	str	r0, [r7, #4]
	return distance_difference_ / (TIM6_PERIOD * MACHINE_TREAD);
 8020fb8:	687b      	ldr	r3, [r7, #4]
 8020fba:	689b      	ldr	r3, [r3, #8]
 8020fbc:	4618      	mov	r0, r3
 8020fbe:	f7ff f9fb 	bl	80203b8 <__aeabi_f2d>
 8020fc2:	a309      	add	r3, pc, #36	; (adr r3, 8020fe8 <_ZN7Encoder15AngularVelocityEv+0x38>)
 8020fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fc8:	f7ff fb78 	bl	80206bc <__aeabi_ddiv>
 8020fcc:	4603      	mov	r3, r0
 8020fce:	460c      	mov	r4, r1
 8020fd0:	4618      	mov	r0, r3
 8020fd2:	4621      	mov	r1, r4
 8020fd4:	f7ff fd20 	bl	8020a18 <__aeabi_d2f>
 8020fd8:	4603      	mov	r3, r0
 8020fda:	ee07 3a90 	vmov	s15, r3
 8020fde:	eeb0 0a67 	vmov.f32	s0, s15
 8020fe2:	370c      	adds	r7, #12
 8020fe4:	46bd      	mov	sp, r7
 8020fe6:	bd90      	pop	{r4, r7, pc}
 8020fe8:	00000000 	.word	0x00000000
 8020fec:	4063d800 	.word	0x4063d800

08020ff0 <_ZN5Flash5ClearEv>:
#include "flash.hpp"
#include "declare_extern.h"
#include <string.h>

bool Flash::Clear()
{
 8020ff0:	b580      	push	{r7, lr}
 8020ff2:	b088      	sub	sp, #32
 8020ff4:	af00      	add	r7, sp, #0
 8020ff6:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 8020ff8:	f006 facc 	bl	8027594 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef erase;

    erase.TypeErase    = FLASH_TYPEERASE_SECTORS; // Erasure range : Sectors
 8020ffc:	2300      	movs	r3, #0
 8020ffe:	60fb      	str	r3, [r7, #12]
    erase.Sector       = FLASH_SECTOR_1;          // Which sector : 1
 8021000:	2301      	movs	r3, #1
 8021002:	617b      	str	r3, [r7, #20]
    erase.NbSectors    = 4;                       // How many sector : 4 (1,2,3,4)
 8021004:	2304      	movs	r3, #4
 8021006:	61bb      	str	r3, [r7, #24]
    erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;   // Voltage range : 2.7 ~ 3.6 [V]
 8021008:	2302      	movs	r3, #2
 802100a:	61fb      	str	r3, [r7, #28]

    // Success => 0xFFFFFFFF is stored.
    // Fail => Sector number is stored.
    uint32_t failed_sector = 0;
 802100c:	2300      	movs	r3, #0
 802100e:	60bb      	str	r3, [r7, #8]

    if(HAL_FLASHEx_Erase(&erase, &failed_sector) != HAL_OK)
 8021010:	f107 0208 	add.w	r2, r7, #8
 8021014:	f107 030c 	add.w	r3, r7, #12
 8021018:	4611      	mov	r1, r2
 802101a:	4618      	mov	r0, r3
 802101c:	f006 fc1a 	bl	8027854 <HAL_FLASHEx_Erase>
 8021020:	4603      	mov	r3, r0
 8021022:	2b00      	cmp	r3, #0
 8021024:	bf14      	ite	ne
 8021026:	2301      	movne	r3, #1
 8021028:	2300      	moveq	r3, #0
 802102a:	b2db      	uxtb	r3, r3
 802102c:	2b00      	cmp	r3, #0
 802102e:	d004      	beq.n	802103a <_ZN5Flash5ClearEv+0x4a>
    {
#ifdef DEBUG_MODE
        g_erase_failed_sector = failed_sector;
 8021030:	68bb      	ldr	r3, [r7, #8]
 8021032:	4a08      	ldr	r2, [pc, #32]	; (8021054 <_ZN5Flash5ClearEv+0x64>)
 8021034:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

        return false;
 8021036:	2300      	movs	r3, #0
 8021038:	e008      	b.n	802104c <_ZN5Flash5ClearEv+0x5c>
    }

    HAL_FLASH_Lock();
 802103a:	f006 facd 	bl	80275d8 <HAL_FLASH_Lock>

    return failed_sector == 0xFFFFFFFF;
 802103e:	68bb      	ldr	r3, [r7, #8]
 8021040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021044:	bf0c      	ite	eq
 8021046:	2301      	moveq	r3, #1
 8021048:	2300      	movne	r3, #0
 802104a:	b2db      	uxtb	r3, r3
}
 802104c:	4618      	mov	r0, r3
 802104e:	3720      	adds	r7, #32
 8021050:	46bd      	mov	sp, r7
 8021052:	bd80      	pop	{r7, pc}
 8021054:	20000434 	.word	0x20000434

08021058 <_ZN5Flash10StoreUint8EmPhm>:

bool Flash::StoreUint8(uint32_t address, uint8_t *data, uint32_t number)
{
 8021058:	b590      	push	{r4, r7, lr}
 802105a:	b087      	sub	sp, #28
 802105c:	af00      	add	r7, sp, #0
 802105e:	60f8      	str	r0, [r7, #12]
 8021060:	60b9      	str	r1, [r7, #8]
 8021062:	607a      	str	r2, [r7, #4]
 8021064:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8021066:	f006 fa95 	bl	8027594 <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 802106a:	2300      	movs	r3, #0
 802106c:	613b      	str	r3, [r7, #16]
 802106e:	693a      	ldr	r2, [r7, #16]
 8021070:	683b      	ldr	r3, [r7, #0]
 8021072:	429a      	cmp	r2, r3
 8021074:	d218      	bcs.n	80210a8 <_ZN5Flash10StoreUint8EmPhm+0x50>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address++, *data++);
 8021076:	68b9      	ldr	r1, [r7, #8]
 8021078:	1c4b      	adds	r3, r1, #1
 802107a:	60bb      	str	r3, [r7, #8]
 802107c:	687b      	ldr	r3, [r7, #4]
 802107e:	1c5a      	adds	r2, r3, #1
 8021080:	607a      	str	r2, [r7, #4]
 8021082:	781b      	ldrb	r3, [r3, #0]
 8021084:	b2db      	uxtb	r3, r3
 8021086:	f04f 0400 	mov.w	r4, #0
 802108a:	461a      	mov	r2, r3
 802108c:	4623      	mov	r3, r4
 802108e:	2000      	movs	r0, #0
 8021090:	f006 fa2c 	bl	80274ec <HAL_FLASH_Program>
 8021094:	4603      	mov	r3, r0
 8021096:	75fb      	strb	r3, [r7, #23]
        if(result != HAL_OK) break;
 8021098:	7dfb      	ldrb	r3, [r7, #23]
 802109a:	2b00      	cmp	r3, #0
 802109c:	d103      	bne.n	80210a6 <_ZN5Flash10StoreUint8EmPhm+0x4e>
    for(uint32_t i = 0; i < number; i++)
 802109e:	693b      	ldr	r3, [r7, #16]
 80210a0:	3301      	adds	r3, #1
 80210a2:	613b      	str	r3, [r7, #16]
 80210a4:	e7e3      	b.n	802106e <_ZN5Flash10StoreUint8EmPhm+0x16>
        if(result != HAL_OK) break;
 80210a6:	bf00      	nop
    }

    HAL_FLASH_Lock();
 80210a8:	f006 fa96 	bl	80275d8 <HAL_FLASH_Lock>

    return result == HAL_OK;
 80210ac:	7dfb      	ldrb	r3, [r7, #23]
 80210ae:	2b00      	cmp	r3, #0
 80210b0:	bf0c      	ite	eq
 80210b2:	2301      	moveq	r3, #1
 80210b4:	2300      	movne	r3, #0
 80210b6:	b2db      	uxtb	r3, r3
}
 80210b8:	4618      	mov	r0, r3
 80210ba:	371c      	adds	r7, #28
 80210bc:	46bd      	mov	sp, r7
 80210be:	bd90      	pop	{r4, r7, pc}

080210c0 <_ZN5Flash11StoreUint16EmPtm>:

bool Flash::StoreUint16(uint32_t address, uint16_t *data, uint32_t number)
{
 80210c0:	b590      	push	{r4, r7, lr}
 80210c2:	b087      	sub	sp, #28
 80210c4:	af00      	add	r7, sp, #0
 80210c6:	60f8      	str	r0, [r7, #12]
 80210c8:	60b9      	str	r1, [r7, #8]
 80210ca:	607a      	str	r2, [r7, #4]
 80210cc:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 80210ce:	f006 fa61 	bl	8027594 <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 80210d2:	2300      	movs	r3, #0
 80210d4:	613b      	str	r3, [r7, #16]
 80210d6:	693a      	ldr	r2, [r7, #16]
 80210d8:	683b      	ldr	r3, [r7, #0]
 80210da:	429a      	cmp	r2, r3
 80210dc:	d219      	bcs.n	8021112 <_ZN5Flash11StoreUint16EmPtm+0x52>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, *data++);
 80210de:	687b      	ldr	r3, [r7, #4]
 80210e0:	1c9a      	adds	r2, r3, #2
 80210e2:	607a      	str	r2, [r7, #4]
 80210e4:	881b      	ldrh	r3, [r3, #0]
 80210e6:	b29b      	uxth	r3, r3
 80210e8:	f04f 0400 	mov.w	r4, #0
 80210ec:	461a      	mov	r2, r3
 80210ee:	4623      	mov	r3, r4
 80210f0:	68b9      	ldr	r1, [r7, #8]
 80210f2:	2001      	movs	r0, #1
 80210f4:	f006 f9fa 	bl	80274ec <HAL_FLASH_Program>
 80210f8:	4603      	mov	r3, r0
 80210fa:	75fb      	strb	r3, [r7, #23]
        address += 2;
 80210fc:	68bb      	ldr	r3, [r7, #8]
 80210fe:	3302      	adds	r3, #2
 8021100:	60bb      	str	r3, [r7, #8]
        if(result != HAL_OK) break;
 8021102:	7dfb      	ldrb	r3, [r7, #23]
 8021104:	2b00      	cmp	r3, #0
 8021106:	d103      	bne.n	8021110 <_ZN5Flash11StoreUint16EmPtm+0x50>
    for(uint32_t i = 0; i < number; i++)
 8021108:	693b      	ldr	r3, [r7, #16]
 802110a:	3301      	adds	r3, #1
 802110c:	613b      	str	r3, [r7, #16]
 802110e:	e7e2      	b.n	80210d6 <_ZN5Flash11StoreUint16EmPtm+0x16>
        if(result != HAL_OK) break;
 8021110:	bf00      	nop
    }

    HAL_FLASH_Lock();
 8021112:	f006 fa61 	bl	80275d8 <HAL_FLASH_Lock>

    return result == HAL_OK;
 8021116:	7dfb      	ldrb	r3, [r7, #23]
 8021118:	2b00      	cmp	r3, #0
 802111a:	bf0c      	ite	eq
 802111c:	2301      	moveq	r3, #1
 802111e:	2300      	movne	r3, #0
 8021120:	b2db      	uxtb	r3, r3
}
 8021122:	4618      	mov	r0, r3
 8021124:	371c      	adds	r7, #28
 8021126:	46bd      	mov	sp, r7
 8021128:	bd90      	pop	{r4, r7, pc}

0802112a <_ZN5Flash10StoreInt32EmPlm>:

    return result == HAL_OK;
}

bool Flash::StoreInt32(uint32_t address, int32_t *data, uint32_t number)
{
 802112a:	b590      	push	{r4, r7, lr}
 802112c:	b087      	sub	sp, #28
 802112e:	af00      	add	r7, sp, #0
 8021130:	60f8      	str	r0, [r7, #12]
 8021132:	60b9      	str	r1, [r7, #8]
 8021134:	607a      	str	r2, [r7, #4]
 8021136:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8021138:	f006 fa2c 	bl	8027594 <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 802113c:	2300      	movs	r3, #0
 802113e:	613b      	str	r3, [r7, #16]
 8021140:	693a      	ldr	r2, [r7, #16]
 8021142:	683b      	ldr	r3, [r7, #0]
 8021144:	429a      	cmp	r2, r3
 8021146:	d218      	bcs.n	802117a <_ZN5Flash10StoreInt32EmPlm+0x50>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, *data++);
 8021148:	687b      	ldr	r3, [r7, #4]
 802114a:	1d1a      	adds	r2, r3, #4
 802114c:	607a      	str	r2, [r7, #4]
 802114e:	681b      	ldr	r3, [r3, #0]
 8021150:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8021154:	461a      	mov	r2, r3
 8021156:	4623      	mov	r3, r4
 8021158:	68b9      	ldr	r1, [r7, #8]
 802115a:	2002      	movs	r0, #2
 802115c:	f006 f9c6 	bl	80274ec <HAL_FLASH_Program>
 8021160:	4603      	mov	r3, r0
 8021162:	75fb      	strb	r3, [r7, #23]
        address += 4;
 8021164:	68bb      	ldr	r3, [r7, #8]
 8021166:	3304      	adds	r3, #4
 8021168:	60bb      	str	r3, [r7, #8]
        if(result != HAL_OK) break;
 802116a:	7dfb      	ldrb	r3, [r7, #23]
 802116c:	2b00      	cmp	r3, #0
 802116e:	d103      	bne.n	8021178 <_ZN5Flash10StoreInt32EmPlm+0x4e>
    for(uint32_t i = 0; i < number; i++)
 8021170:	693b      	ldr	r3, [r7, #16]
 8021172:	3301      	adds	r3, #1
 8021174:	613b      	str	r3, [r7, #16]
 8021176:	e7e3      	b.n	8021140 <_ZN5Flash10StoreInt32EmPlm+0x16>
        if(result != HAL_OK) break;
 8021178:	bf00      	nop
    }

    HAL_FLASH_Lock();
 802117a:	f006 fa2d 	bl	80275d8 <HAL_FLASH_Lock>

    return result == HAL_OK;
 802117e:	7dfb      	ldrb	r3, [r7, #23]
 8021180:	2b00      	cmp	r3, #0
 8021182:	bf0c      	ite	eq
 8021184:	2301      	moveq	r3, #1
 8021186:	2300      	movne	r3, #0
 8021188:	b2db      	uxtb	r3, r3
}
 802118a:	4618      	mov	r0, r3
 802118c:	371c      	adds	r7, #28
 802118e:	46bd      	mov	sp, r7
 8021190:	bd90      	pop	{r4, r7, pc}

08021192 <_ZN5Flash4LoadEPvmm>:

    return result == HAL_OK;
}

void Flash::Load(void *data, uint32_t address, uint32_t size)
{
 8021192:	b580      	push	{r7, lr}
 8021194:	b084      	sub	sp, #16
 8021196:	af00      	add	r7, sp, #0
 8021198:	60f8      	str	r0, [r7, #12]
 802119a:	60b9      	str	r1, [r7, #8]
 802119c:	607a      	str	r2, [r7, #4]
 802119e:	603b      	str	r3, [r7, #0]
    memcpy(data, reinterpret_cast<uint32_t*>(address), size);
 80211a0:	687b      	ldr	r3, [r7, #4]
 80211a2:	683a      	ldr	r2, [r7, #0]
 80211a4:	4619      	mov	r1, r3
 80211a6:	68b8      	ldr	r0, [r7, #8]
 80211a8:	f009 f97e 	bl	802a4a8 <memcpy>
}
 80211ac:	bf00      	nop
 80211ae:	3710      	adds	r7, #16
 80211b0:	46bd      	mov	sp, r7
 80211b2:	bd80      	pop	{r7, pc}

080211b4 <_ZN5Flash14CheckBlankByteEmm>:

bool Flash::CheckBlankByte(uint32_t address, uint32_t number)
{
 80211b4:	b5b0      	push	{r4, r5, r7, lr}
 80211b6:	b088      	sub	sp, #32
 80211b8:	af00      	add	r7, sp, #0
 80211ba:	60f8      	str	r0, [r7, #12]
 80211bc:	60b9      	str	r1, [r7, #8]
 80211be:	607a      	str	r2, [r7, #4]

    memcpy(byte, reinterpret_cast<uint32_t*>(address), number);

    for(uint32_t i = 0; i < number; i++) if(byte[i] != 0xFF) return false;

    return true;
 80211c0:	466b      	mov	r3, sp
 80211c2:	461d      	mov	r5, r3
    uint8_t byte[number];
 80211c4:	687b      	ldr	r3, [r7, #4]
 80211c6:	1e58      	subs	r0, r3, #1
 80211c8:	61b8      	str	r0, [r7, #24]
 80211ca:	4603      	mov	r3, r0
 80211cc:	3301      	adds	r3, #1
 80211ce:	4619      	mov	r1, r3
 80211d0:	f04f 0200 	mov.w	r2, #0
 80211d4:	f04f 0300 	mov.w	r3, #0
 80211d8:	f04f 0400 	mov.w	r4, #0
 80211dc:	00d4      	lsls	r4, r2, #3
 80211de:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80211e2:	00cb      	lsls	r3, r1, #3
 80211e4:	4603      	mov	r3, r0
 80211e6:	3301      	adds	r3, #1
 80211e8:	4619      	mov	r1, r3
 80211ea:	f04f 0200 	mov.w	r2, #0
 80211ee:	f04f 0300 	mov.w	r3, #0
 80211f2:	f04f 0400 	mov.w	r4, #0
 80211f6:	00d4      	lsls	r4, r2, #3
 80211f8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80211fc:	00cb      	lsls	r3, r1, #3
 80211fe:	4603      	mov	r3, r0
 8021200:	3301      	adds	r3, #1
 8021202:	3307      	adds	r3, #7
 8021204:	08db      	lsrs	r3, r3, #3
 8021206:	00db      	lsls	r3, r3, #3
 8021208:	ebad 0d03 	sub.w	sp, sp, r3
 802120c:	466b      	mov	r3, sp
 802120e:	3300      	adds	r3, #0
 8021210:	617b      	str	r3, [r7, #20]
    memcpy(byte, reinterpret_cast<uint32_t*>(address), number);
 8021212:	697b      	ldr	r3, [r7, #20]
 8021214:	68b9      	ldr	r1, [r7, #8]
 8021216:	687a      	ldr	r2, [r7, #4]
 8021218:	4618      	mov	r0, r3
 802121a:	f009 f945 	bl	802a4a8 <memcpy>
    for(uint32_t i = 0; i < number; i++) if(byte[i] != 0xFF) return false;
 802121e:	2300      	movs	r3, #0
 8021220:	61fb      	str	r3, [r7, #28]
 8021222:	69fa      	ldr	r2, [r7, #28]
 8021224:	687b      	ldr	r3, [r7, #4]
 8021226:	429a      	cmp	r2, r3
 8021228:	d20b      	bcs.n	8021242 <_ZN5Flash14CheckBlankByteEmm+0x8e>
 802122a:	697a      	ldr	r2, [r7, #20]
 802122c:	69fb      	ldr	r3, [r7, #28]
 802122e:	4413      	add	r3, r2
 8021230:	781b      	ldrb	r3, [r3, #0]
 8021232:	2bff      	cmp	r3, #255	; 0xff
 8021234:	d001      	beq.n	802123a <_ZN5Flash14CheckBlankByteEmm+0x86>
 8021236:	2300      	movs	r3, #0
 8021238:	e004      	b.n	8021244 <_ZN5Flash14CheckBlankByteEmm+0x90>
 802123a:	69fb      	ldr	r3, [r7, #28]
 802123c:	3301      	adds	r3, #1
 802123e:	61fb      	str	r3, [r7, #28]
 8021240:	e7ef      	b.n	8021222 <_ZN5Flash14CheckBlankByteEmm+0x6e>
    return true;
 8021242:	2301      	movs	r3, #1
 8021244:	46ad      	mov	sp, r5
}
 8021246:	4618      	mov	r0, r3
 8021248:	3720      	adds	r7, #32
 802124a:	46bd      	mov	sp, r7
 802124c:	bdb0      	pop	{r4, r5, r7, pc}

0802124e <_ZN5Flash18CheckBlankHalfwordEmm>:

bool Flash::CheckBlankHalfword(uint32_t address, uint32_t number)
{
 802124e:	b5b0      	push	{r4, r5, r7, lr}
 8021250:	b088      	sub	sp, #32
 8021252:	af00      	add	r7, sp, #0
 8021254:	60f8      	str	r0, [r7, #12]
 8021256:	60b9      	str	r1, [r7, #8]
 8021258:	607a      	str	r2, [r7, #4]

    memcpy(half, reinterpret_cast<uint32_t*>(address), number*2);

    for(uint32_t i = 0; i < number; i++) if(half[i] != 0xFFFF) return false;

    return true;
 802125a:	466b      	mov	r3, sp
 802125c:	461d      	mov	r5, r3
    uint16_t half[number];
 802125e:	687b      	ldr	r3, [r7, #4]
 8021260:	1e58      	subs	r0, r3, #1
 8021262:	61b8      	str	r0, [r7, #24]
 8021264:	4603      	mov	r3, r0
 8021266:	3301      	adds	r3, #1
 8021268:	4619      	mov	r1, r3
 802126a:	f04f 0200 	mov.w	r2, #0
 802126e:	f04f 0300 	mov.w	r3, #0
 8021272:	f04f 0400 	mov.w	r4, #0
 8021276:	0114      	lsls	r4, r2, #4
 8021278:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 802127c:	010b      	lsls	r3, r1, #4
 802127e:	4603      	mov	r3, r0
 8021280:	3301      	adds	r3, #1
 8021282:	4619      	mov	r1, r3
 8021284:	f04f 0200 	mov.w	r2, #0
 8021288:	f04f 0300 	mov.w	r3, #0
 802128c:	f04f 0400 	mov.w	r4, #0
 8021290:	0114      	lsls	r4, r2, #4
 8021292:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8021296:	010b      	lsls	r3, r1, #4
 8021298:	4603      	mov	r3, r0
 802129a:	3301      	adds	r3, #1
 802129c:	005b      	lsls	r3, r3, #1
 802129e:	3301      	adds	r3, #1
 80212a0:	3307      	adds	r3, #7
 80212a2:	08db      	lsrs	r3, r3, #3
 80212a4:	00db      	lsls	r3, r3, #3
 80212a6:	ebad 0d03 	sub.w	sp, sp, r3
 80212aa:	466b      	mov	r3, sp
 80212ac:	3301      	adds	r3, #1
 80212ae:	085b      	lsrs	r3, r3, #1
 80212b0:	005b      	lsls	r3, r3, #1
 80212b2:	617b      	str	r3, [r7, #20]
    memcpy(half, reinterpret_cast<uint32_t*>(address), number*2);
 80212b4:	6978      	ldr	r0, [r7, #20]
 80212b6:	68b9      	ldr	r1, [r7, #8]
 80212b8:	687b      	ldr	r3, [r7, #4]
 80212ba:	005b      	lsls	r3, r3, #1
 80212bc:	461a      	mov	r2, r3
 80212be:	f009 f8f3 	bl	802a4a8 <memcpy>
    for(uint32_t i = 0; i < number; i++) if(half[i] != 0xFFFF) return false;
 80212c2:	2300      	movs	r3, #0
 80212c4:	61fb      	str	r3, [r7, #28]
 80212c6:	69fa      	ldr	r2, [r7, #28]
 80212c8:	687b      	ldr	r3, [r7, #4]
 80212ca:	429a      	cmp	r2, r3
 80212cc:	d20d      	bcs.n	80212ea <_ZN5Flash18CheckBlankHalfwordEmm+0x9c>
 80212ce:	697b      	ldr	r3, [r7, #20]
 80212d0:	69fa      	ldr	r2, [r7, #28]
 80212d2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80212d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80212da:	4293      	cmp	r3, r2
 80212dc:	d001      	beq.n	80212e2 <_ZN5Flash18CheckBlankHalfwordEmm+0x94>
 80212de:	2300      	movs	r3, #0
 80212e0:	e004      	b.n	80212ec <_ZN5Flash18CheckBlankHalfwordEmm+0x9e>
 80212e2:	69fb      	ldr	r3, [r7, #28]
 80212e4:	3301      	adds	r3, #1
 80212e6:	61fb      	str	r3, [r7, #28]
 80212e8:	e7ed      	b.n	80212c6 <_ZN5Flash18CheckBlankHalfwordEmm+0x78>
    return true;
 80212ea:	2301      	movs	r3, #1
 80212ec:	46ad      	mov	sp, r5
}
 80212ee:	4618      	mov	r0, r3
 80212f0:	3720      	adds	r7, #32
 80212f2:	46bd      	mov	sp, r7
 80212f4:	bdb0      	pop	{r4, r5, r7, pc}

080212f6 <_ZN5Flash14CheckBlankWordEmm>:

bool Flash::CheckBlankWord(uint32_t address, uint32_t number)
{
 80212f6:	b5b0      	push	{r4, r5, r7, lr}
 80212f8:	b088      	sub	sp, #32
 80212fa:	af00      	add	r7, sp, #0
 80212fc:	60f8      	str	r0, [r7, #12]
 80212fe:	60b9      	str	r1, [r7, #8]
 8021300:	607a      	str	r2, [r7, #4]

    memcpy(word, reinterpret_cast<uint32_t*>(address), number*4);

    for(uint32_t i = 0; i < number; i++) if(word[i] != 0xFFFFFFFF) return false;

    return true;
 8021302:	466b      	mov	r3, sp
 8021304:	461d      	mov	r5, r3
    uint32_t word[number];
 8021306:	687b      	ldr	r3, [r7, #4]
 8021308:	1e58      	subs	r0, r3, #1
 802130a:	61b8      	str	r0, [r7, #24]
 802130c:	4603      	mov	r3, r0
 802130e:	3301      	adds	r3, #1
 8021310:	4619      	mov	r1, r3
 8021312:	f04f 0200 	mov.w	r2, #0
 8021316:	f04f 0300 	mov.w	r3, #0
 802131a:	f04f 0400 	mov.w	r4, #0
 802131e:	0154      	lsls	r4, r2, #5
 8021320:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8021324:	014b      	lsls	r3, r1, #5
 8021326:	4603      	mov	r3, r0
 8021328:	3301      	adds	r3, #1
 802132a:	4619      	mov	r1, r3
 802132c:	f04f 0200 	mov.w	r2, #0
 8021330:	f04f 0300 	mov.w	r3, #0
 8021334:	f04f 0400 	mov.w	r4, #0
 8021338:	0154      	lsls	r4, r2, #5
 802133a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 802133e:	014b      	lsls	r3, r1, #5
 8021340:	4603      	mov	r3, r0
 8021342:	3301      	adds	r3, #1
 8021344:	009b      	lsls	r3, r3, #2
 8021346:	3303      	adds	r3, #3
 8021348:	3307      	adds	r3, #7
 802134a:	08db      	lsrs	r3, r3, #3
 802134c:	00db      	lsls	r3, r3, #3
 802134e:	ebad 0d03 	sub.w	sp, sp, r3
 8021352:	466b      	mov	r3, sp
 8021354:	3303      	adds	r3, #3
 8021356:	089b      	lsrs	r3, r3, #2
 8021358:	009b      	lsls	r3, r3, #2
 802135a:	617b      	str	r3, [r7, #20]
    memcpy(word, reinterpret_cast<uint32_t*>(address), number*4);
 802135c:	6978      	ldr	r0, [r7, #20]
 802135e:	68b9      	ldr	r1, [r7, #8]
 8021360:	687b      	ldr	r3, [r7, #4]
 8021362:	009b      	lsls	r3, r3, #2
 8021364:	461a      	mov	r2, r3
 8021366:	f009 f89f 	bl	802a4a8 <memcpy>
    for(uint32_t i = 0; i < number; i++) if(word[i] != 0xFFFFFFFF) return false;
 802136a:	2300      	movs	r3, #0
 802136c:	61fb      	str	r3, [r7, #28]
 802136e:	69fa      	ldr	r2, [r7, #28]
 8021370:	687b      	ldr	r3, [r7, #4]
 8021372:	429a      	cmp	r2, r3
 8021374:	d20c      	bcs.n	8021390 <_ZN5Flash14CheckBlankWordEmm+0x9a>
 8021376:	697b      	ldr	r3, [r7, #20]
 8021378:	69fa      	ldr	r2, [r7, #28]
 802137a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802137e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021382:	d001      	beq.n	8021388 <_ZN5Flash14CheckBlankWordEmm+0x92>
 8021384:	2300      	movs	r3, #0
 8021386:	e004      	b.n	8021392 <_ZN5Flash14CheckBlankWordEmm+0x9c>
 8021388:	69fb      	ldr	r3, [r7, #28]
 802138a:	3301      	adds	r3, #1
 802138c:	61fb      	str	r3, [r7, #28]
 802138e:	e7ee      	b.n	802136e <_ZN5Flash14CheckBlankWordEmm+0x78>
    return true;
 8021390:	2301      	movs	r3, #1
 8021392:	46ad      	mov	sp, r5
 8021394:	4618      	mov	r0, r3
 8021396:	3720      	adds	r7, #32
 8021398:	46bd      	mov	sp, r7
 802139a:	bdb0      	pop	{r4, r5, r7, pc}

0802139c <_ZN8Iim426524InitEv>:
#include "iim_42652.hpp"
#include "declare_extern.h"

uint8_t Iim42652::Init()
{
 802139c:	b580      	push	{r7, lr}
 802139e:	b084      	sub	sp, #16
 80213a0:	af00      	add	r7, sp, #0
 80213a2:	6078      	str	r0, [r7, #4]
    /* bank_select */
    Write(REG_BANK_SEL_ADD, REG_BANK_SEL_RES, 'L');
 80213a4:	234c      	movs	r3, #76	; 0x4c
 80213a6:	2200      	movs	r2, #0
 80213a8:	2176      	movs	r1, #118	; 0x76
 80213aa:	6878      	ldr	r0, [r7, #4]
 80213ac:	f000 f908 	bl	80215c0 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 80213b0:	2064      	movs	r0, #100	; 0x64
 80213b2:	f005 f805 	bl	80263c0 <HAL_Delay>
    Write(REG_BANK_SEL_ADD, REG_BANK_SEL_RES, 'R');
 80213b6:	2352      	movs	r3, #82	; 0x52
 80213b8:	2200      	movs	r2, #0
 80213ba:	2176      	movs	r1, #118	; 0x76
 80213bc:	6878      	ldr	r0, [r7, #4]
 80213be:	f000 f8ff 	bl	80215c0 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 80213c2:	2064      	movs	r0, #100	; 0x64
 80213c4:	f004 fffc 	bl	80263c0 <HAL_Delay>
    /* power_off */
    Write(PWR_MGMT0_ADD, PWR_MGMT0_RES, 'L');
 80213c8:	234c      	movs	r3, #76	; 0x4c
 80213ca:	2200      	movs	r2, #0
 80213cc:	214e      	movs	r1, #78	; 0x4e
 80213ce:	6878      	ldr	r0, [r7, #4]
 80213d0:	f000 f8f6 	bl	80215c0 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 80213d4:	2064      	movs	r0, #100	; 0x64
 80213d6:	f004 fff3 	bl	80263c0 <HAL_Delay>
    Write(PWR_MGMT0_ADD, PWR_MGMT0_RES, 'R');
 80213da:	2352      	movs	r3, #82	; 0x52
 80213dc:	2200      	movs	r2, #0
 80213de:	214e      	movs	r1, #78	; 0x4e
 80213e0:	6878      	ldr	r0, [r7, #4]
 80213e2:	f000 f8ed 	bl	80215c0 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 80213e6:	2064      	movs	r0, #100	; 0x64
 80213e8:	f004 ffea 	bl	80263c0 <HAL_Delay>

    uint8_t who_l  = Read(WHO_AM_I_ADD, 'L');
 80213ec:	224c      	movs	r2, #76	; 0x4c
 80213ee:	2175      	movs	r1, #117	; 0x75
 80213f0:	6878      	ldr	r0, [r7, #4]
 80213f2:	f000 f897 	bl	8021524 <_ZN8Iim426524ReadEhc>
 80213f6:	4603      	mov	r3, r0
 80213f8:	73fb      	strb	r3, [r7, #15]
    uint8_t who_r  = Read(WHO_AM_I_ADD, 'R');
 80213fa:	2252      	movs	r2, #82	; 0x52
 80213fc:	2175      	movs	r1, #117	; 0x75
 80213fe:	6878      	ldr	r0, [r7, #4]
 8021400:	f000 f890 	bl	8021524 <_ZN8Iim426524ReadEhc>
 8021404:	4603      	mov	r3, r0
 8021406:	73bb      	strb	r3, [r7, #14]
    uint8_t bank_l = Read(REG_BANK_SEL_ADD, 'L');
 8021408:	224c      	movs	r2, #76	; 0x4c
 802140a:	2176      	movs	r1, #118	; 0x76
 802140c:	6878      	ldr	r0, [r7, #4]
 802140e:	f000 f889 	bl	8021524 <_ZN8Iim426524ReadEhc>
 8021412:	4603      	mov	r3, r0
 8021414:	737b      	strb	r3, [r7, #13]
    uint8_t bank_r = Read(REG_BANK_SEL_ADD, 'R');
 8021416:	2252      	movs	r2, #82	; 0x52
 8021418:	2176      	movs	r1, #118	; 0x76
 802141a:	6878      	ldr	r0, [r7, #4]
 802141c:	f000 f882 	bl	8021524 <_ZN8Iim426524ReadEhc>
 8021420:	4603      	mov	r3, r0
 8021422:	733b      	strb	r3, [r7, #12]
    uint8_t pwr_l  = Read(PWR_MGMT0_ADD, 'L');
 8021424:	224c      	movs	r2, #76	; 0x4c
 8021426:	214e      	movs	r1, #78	; 0x4e
 8021428:	6878      	ldr	r0, [r7, #4]
 802142a:	f000 f87b 	bl	8021524 <_ZN8Iim426524ReadEhc>
 802142e:	4603      	mov	r3, r0
 8021430:	72fb      	strb	r3, [r7, #11]
    uint8_t pwr_r  = Read(PWR_MGMT0_ADD, 'R');
 8021432:	2252      	movs	r2, #82	; 0x52
 8021434:	214e      	movs	r1, #78	; 0x4e
 8021436:	6878      	ldr	r0, [r7, #4]
 8021438:	f000 f874 	bl	8021524 <_ZN8Iim426524ReadEhc>
 802143c:	4603      	mov	r3, r0
 802143e:	72bb      	strb	r3, [r7, #10]

#ifdef DEBUG_MODE
    g_imu_who_l  = who_l;  g_imu_who_r  = who_r;
 8021440:	4a32      	ldr	r2, [pc, #200]	; (802150c <_ZN8Iim426524InitEv+0x170>)
 8021442:	7bfb      	ldrb	r3, [r7, #15]
 8021444:	7013      	strb	r3, [r2, #0]
 8021446:	4a32      	ldr	r2, [pc, #200]	; (8021510 <_ZN8Iim426524InitEv+0x174>)
 8021448:	7bbb      	ldrb	r3, [r7, #14]
 802144a:	7013      	strb	r3, [r2, #0]
    g_imu_bank_l = bank_l; g_imu_bank_r = bank_r;
 802144c:	4a31      	ldr	r2, [pc, #196]	; (8021514 <_ZN8Iim426524InitEv+0x178>)
 802144e:	7b7b      	ldrb	r3, [r7, #13]
 8021450:	7013      	strb	r3, [r2, #0]
 8021452:	4a31      	ldr	r2, [pc, #196]	; (8021518 <_ZN8Iim426524InitEv+0x17c>)
 8021454:	7b3b      	ldrb	r3, [r7, #12]
 8021456:	7013      	strb	r3, [r2, #0]
    g_imu_pwr_l  = pwr_l;  g_imu_pwr_r  = pwr_r;
 8021458:	4a30      	ldr	r2, [pc, #192]	; (802151c <_ZN8Iim426524InitEv+0x180>)
 802145a:	7afb      	ldrb	r3, [r7, #11]
 802145c:	7013      	strb	r3, [r2, #0]
 802145e:	4a30      	ldr	r2, [pc, #192]	; (8021520 <_ZN8Iim426524InitEv+0x184>)
 8021460:	7abb      	ldrb	r3, [r7, #10]
 8021462:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(who_l != WHO_AM_I_RES)      return 0x01;
 8021464:	7bfb      	ldrb	r3, [r7, #15]
 8021466:	2b6f      	cmp	r3, #111	; 0x6f
 8021468:	d001      	beq.n	802146e <_ZN8Iim426524InitEv+0xd2>
 802146a:	2301      	movs	r3, #1
 802146c:	e049      	b.n	8021502 <_ZN8Iim426524InitEv+0x166>
    if(who_r != WHO_AM_I_RES)      return 0x02;
 802146e:	7bbb      	ldrb	r3, [r7, #14]
 8021470:	2b6f      	cmp	r3, #111	; 0x6f
 8021472:	d001      	beq.n	8021478 <_ZN8Iim426524InitEv+0xdc>
 8021474:	2302      	movs	r3, #2
 8021476:	e044      	b.n	8021502 <_ZN8Iim426524InitEv+0x166>
    if(bank_l != REG_BANK_SEL_RES) return 0x03;
 8021478:	7b7b      	ldrb	r3, [r7, #13]
 802147a:	2b00      	cmp	r3, #0
 802147c:	d001      	beq.n	8021482 <_ZN8Iim426524InitEv+0xe6>
 802147e:	2303      	movs	r3, #3
 8021480:	e03f      	b.n	8021502 <_ZN8Iim426524InitEv+0x166>
    if(bank_r != REG_BANK_SEL_RES) return 0x04;
 8021482:	7b3b      	ldrb	r3, [r7, #12]
 8021484:	2b00      	cmp	r3, #0
 8021486:	d001      	beq.n	802148c <_ZN8Iim426524InitEv+0xf0>
 8021488:	2304      	movs	r3, #4
 802148a:	e03a      	b.n	8021502 <_ZN8Iim426524InitEv+0x166>
    if(pwr_l != PWR_MGMT0_RES)     return 0x05;
 802148c:	7afb      	ldrb	r3, [r7, #11]
 802148e:	2b00      	cmp	r3, #0
 8021490:	d001      	beq.n	8021496 <_ZN8Iim426524InitEv+0xfa>
 8021492:	2305      	movs	r3, #5
 8021494:	e035      	b.n	8021502 <_ZN8Iim426524InitEv+0x166>
    if(pwr_r != PWR_MGMT0_RES)     return 0x06;
 8021496:	7abb      	ldrb	r3, [r7, #10]
 8021498:	2b00      	cmp	r3, #0
 802149a:	d001      	beq.n	80214a0 <_ZN8Iim426524InitEv+0x104>
 802149c:	2306      	movs	r3, #6
 802149e:	e030      	b.n	8021502 <_ZN8Iim426524InitEv+0x166>

    /* power_on */
    Write(PWR_MGMT0_ADD, PWR_MGMT0_ON, 'L');
 80214a0:	234c      	movs	r3, #76	; 0x4c
 80214a2:	220f      	movs	r2, #15
 80214a4:	214e      	movs	r1, #78	; 0x4e
 80214a6:	6878      	ldr	r0, [r7, #4]
 80214a8:	f000 f88a 	bl	80215c0 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 80214ac:	2064      	movs	r0, #100	; 0x64
 80214ae:	f004 ff87 	bl	80263c0 <HAL_Delay>
    Write(PWR_MGMT0_ADD, PWR_MGMT0_ON, 'R');
 80214b2:	2352      	movs	r3, #82	; 0x52
 80214b4:	220f      	movs	r2, #15
 80214b6:	214e      	movs	r1, #78	; 0x4e
 80214b8:	6878      	ldr	r0, [r7, #4]
 80214ba:	f000 f881 	bl	80215c0 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 80214be:	2064      	movs	r0, #100	; 0x64
 80214c0:	f004 ff7e 	bl	80263c0 <HAL_Delay>
    pwr_l = Read(PWR_MGMT0_ADD, 'L');
 80214c4:	224c      	movs	r2, #76	; 0x4c
 80214c6:	214e      	movs	r1, #78	; 0x4e
 80214c8:	6878      	ldr	r0, [r7, #4]
 80214ca:	f000 f82b 	bl	8021524 <_ZN8Iim426524ReadEhc>
 80214ce:	4603      	mov	r3, r0
 80214d0:	72fb      	strb	r3, [r7, #11]
    pwr_r = Read(PWR_MGMT0_ADD, 'R');
 80214d2:	2252      	movs	r2, #82	; 0x52
 80214d4:	214e      	movs	r1, #78	; 0x4e
 80214d6:	6878      	ldr	r0, [r7, #4]
 80214d8:	f000 f824 	bl	8021524 <_ZN8Iim426524ReadEhc>
 80214dc:	4603      	mov	r3, r0
 80214de:	72bb      	strb	r3, [r7, #10]

#ifdef DEBUG_MODE
    g_imu_pwr_l  = pwr_l;  g_imu_pwr_r  = pwr_r;
 80214e0:	4a0e      	ldr	r2, [pc, #56]	; (802151c <_ZN8Iim426524InitEv+0x180>)
 80214e2:	7afb      	ldrb	r3, [r7, #11]
 80214e4:	7013      	strb	r3, [r2, #0]
 80214e6:	4a0e      	ldr	r2, [pc, #56]	; (8021520 <_ZN8Iim426524InitEv+0x184>)
 80214e8:	7abb      	ldrb	r3, [r7, #10]
 80214ea:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(pwr_l != PWR_MGMT0_ON) return 0x07;
 80214ec:	7afb      	ldrb	r3, [r7, #11]
 80214ee:	2b0f      	cmp	r3, #15
 80214f0:	d001      	beq.n	80214f6 <_ZN8Iim426524InitEv+0x15a>
 80214f2:	2307      	movs	r3, #7
 80214f4:	e005      	b.n	8021502 <_ZN8Iim426524InitEv+0x166>
    if(pwr_r != PWR_MGMT0_ON) return 0x08;
 80214f6:	7abb      	ldrb	r3, [r7, #10]
 80214f8:	2b0f      	cmp	r3, #15
 80214fa:	d001      	beq.n	8021500 <_ZN8Iim426524InitEv+0x164>
 80214fc:	2308      	movs	r3, #8
 80214fe:	e000      	b.n	8021502 <_ZN8Iim426524InitEv+0x166>

    return 0x09;
 8021500:	2309      	movs	r3, #9
}
 8021502:	4618      	mov	r0, r3
 8021504:	3710      	adds	r7, #16
 8021506:	46bd      	mov	sp, r7
 8021508:	bd80      	pop	{r7, pc}
 802150a:	bf00      	nop
 802150c:	20000401 	.word	0x20000401
 8021510:	20000402 	.word	0x20000402
 8021514:	20000403 	.word	0x20000403
 8021518:	20000404 	.word	0x20000404
 802151c:	20000405 	.word	0x20000405
 8021520:	20000406 	.word	0x20000406

08021524 <_ZN8Iim426524ReadEhc>:

uint8_t Iim42652::Read(uint8_t send_address, char imu_ic_lr)
{
 8021524:	b580      	push	{r7, lr}
 8021526:	b084      	sub	sp, #16
 8021528:	af00      	add	r7, sp, #0
 802152a:	6078      	str	r0, [r7, #4]
 802152c:	460b      	mov	r3, r1
 802152e:	70fb      	strb	r3, [r7, #3]
 8021530:	4613      	mov	r3, r2
 8021532:	70bb      	strb	r3, [r7, #2]
    uint8_t receive_reset_value = 0x00;
 8021534:	2300      	movs	r3, #0
 8021536:	73fb      	strb	r3, [r7, #15]

    send_address = send_address | 0x80; // Read 1--- ----
 8021538:	78fb      	ldrb	r3, [r7, #3]
 802153a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802153e:	b2db      	uxtb	r3, r3
 8021540:	70fb      	strb	r3, [r7, #3]

    if(imu_ic_lr == 'L') CS_RESET_L;
 8021542:	78bb      	ldrb	r3, [r7, #2]
 8021544:	2b4c      	cmp	r3, #76	; 0x4c
 8021546:	d106      	bne.n	8021556 <_ZN8Iim426524ReadEhc+0x32>
 8021548:	2200      	movs	r2, #0
 802154a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802154e:	4819      	ldr	r0, [pc, #100]	; (80215b4 <_ZN8Iim426524ReadEhc+0x90>)
 8021550:	f006 fc54 	bl	8027dfc <HAL_GPIO_WritePin>
 8021554:	e008      	b.n	8021568 <_ZN8Iim426524ReadEhc+0x44>
    else if(imu_ic_lr == 'R') CS_RESET_R;
 8021556:	78bb      	ldrb	r3, [r7, #2]
 8021558:	2b52      	cmp	r3, #82	; 0x52
 802155a:	d105      	bne.n	8021568 <_ZN8Iim426524ReadEhc+0x44>
 802155c:	2200      	movs	r2, #0
 802155e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021562:	4815      	ldr	r0, [pc, #84]	; (80215b8 <_ZN8Iim426524ReadEhc+0x94>)
 8021564:	f006 fc4a 	bl	8027dfc <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi3, &send_address, 1, 100);
 8021568:	1cf9      	adds	r1, r7, #3
 802156a:	2364      	movs	r3, #100	; 0x64
 802156c:	2201      	movs	r2, #1
 802156e:	4813      	ldr	r0, [pc, #76]	; (80215bc <_ZN8Iim426524ReadEhc+0x98>)
 8021570:	f007 fa22 	bl	80289b8 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, &receive_reset_value, 1, 100);
 8021574:	f107 010f 	add.w	r1, r7, #15
 8021578:	2364      	movs	r3, #100	; 0x64
 802157a:	2201      	movs	r2, #1
 802157c:	480f      	ldr	r0, [pc, #60]	; (80215bc <_ZN8Iim426524ReadEhc+0x98>)
 802157e:	f007 fb4f 	bl	8028c20 <HAL_SPI_Receive>

    if(imu_ic_lr == 'L') CS_SET_L;
 8021582:	78bb      	ldrb	r3, [r7, #2]
 8021584:	2b4c      	cmp	r3, #76	; 0x4c
 8021586:	d106      	bne.n	8021596 <_ZN8Iim426524ReadEhc+0x72>
 8021588:	2201      	movs	r2, #1
 802158a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802158e:	4809      	ldr	r0, [pc, #36]	; (80215b4 <_ZN8Iim426524ReadEhc+0x90>)
 8021590:	f006 fc34 	bl	8027dfc <HAL_GPIO_WritePin>
 8021594:	e008      	b.n	80215a8 <_ZN8Iim426524ReadEhc+0x84>
    else if(imu_ic_lr == 'R') CS_SET_R;
 8021596:	78bb      	ldrb	r3, [r7, #2]
 8021598:	2b52      	cmp	r3, #82	; 0x52
 802159a:	d105      	bne.n	80215a8 <_ZN8Iim426524ReadEhc+0x84>
 802159c:	2201      	movs	r2, #1
 802159e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80215a2:	4805      	ldr	r0, [pc, #20]	; (80215b8 <_ZN8Iim426524ReadEhc+0x94>)
 80215a4:	f006 fc2a 	bl	8027dfc <HAL_GPIO_WritePin>
    
    return receive_reset_value;
 80215a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80215aa:	4618      	mov	r0, r3
 80215ac:	3710      	adds	r7, #16
 80215ae:	46bd      	mov	sp, r7
 80215b0:	bd80      	pop	{r7, pc}
 80215b2:	bf00      	nop
 80215b4:	40020400 	.word	0x40020400
 80215b8:	40020000 	.word	0x40020000
 80215bc:	20014310 	.word	0x20014310

080215c0 <_ZN8Iim426525WriteEhhc>:

void Iim42652::Write(uint8_t send_address, uint8_t send_data, char imu_ic_lr)
{
 80215c0:	b580      	push	{r7, lr}
 80215c2:	b082      	sub	sp, #8
 80215c4:	af00      	add	r7, sp, #0
 80215c6:	6078      	str	r0, [r7, #4]
 80215c8:	4608      	mov	r0, r1
 80215ca:	4611      	mov	r1, r2
 80215cc:	461a      	mov	r2, r3
 80215ce:	4603      	mov	r3, r0
 80215d0:	70fb      	strb	r3, [r7, #3]
 80215d2:	460b      	mov	r3, r1
 80215d4:	70bb      	strb	r3, [r7, #2]
 80215d6:	4613      	mov	r3, r2
 80215d8:	707b      	strb	r3, [r7, #1]
    send_address = send_address & 0x7F; // Write 0--- ----
 80215da:	78fb      	ldrb	r3, [r7, #3]
 80215dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80215e0:	b2db      	uxtb	r3, r3
 80215e2:	70fb      	strb	r3, [r7, #3]

    if(imu_ic_lr == 'L') CS_RESET_L;
 80215e4:	787b      	ldrb	r3, [r7, #1]
 80215e6:	2b4c      	cmp	r3, #76	; 0x4c
 80215e8:	d106      	bne.n	80215f8 <_ZN8Iim426525WriteEhhc+0x38>
 80215ea:	2200      	movs	r2, #0
 80215ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80215f0:	4817      	ldr	r0, [pc, #92]	; (8021650 <_ZN8Iim426525WriteEhhc+0x90>)
 80215f2:	f006 fc03 	bl	8027dfc <HAL_GPIO_WritePin>
 80215f6:	e008      	b.n	802160a <_ZN8Iim426525WriteEhhc+0x4a>
    else if(imu_ic_lr == 'R') CS_RESET_R;
 80215f8:	787b      	ldrb	r3, [r7, #1]
 80215fa:	2b52      	cmp	r3, #82	; 0x52
 80215fc:	d105      	bne.n	802160a <_ZN8Iim426525WriteEhhc+0x4a>
 80215fe:	2200      	movs	r2, #0
 8021600:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021604:	4813      	ldr	r0, [pc, #76]	; (8021654 <_ZN8Iim426525WriteEhhc+0x94>)
 8021606:	f006 fbf9 	bl	8027dfc <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi3, &send_address, 1, 100);
 802160a:	1cf9      	adds	r1, r7, #3
 802160c:	2364      	movs	r3, #100	; 0x64
 802160e:	2201      	movs	r2, #1
 8021610:	4811      	ldr	r0, [pc, #68]	; (8021658 <_ZN8Iim426525WriteEhhc+0x98>)
 8021612:	f007 f9d1 	bl	80289b8 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, &send_data, 1, 100);
 8021616:	1cb9      	adds	r1, r7, #2
 8021618:	2364      	movs	r3, #100	; 0x64
 802161a:	2201      	movs	r2, #1
 802161c:	480e      	ldr	r0, [pc, #56]	; (8021658 <_ZN8Iim426525WriteEhhc+0x98>)
 802161e:	f007 f9cb 	bl	80289b8 <HAL_SPI_Transmit>

    if(imu_ic_lr == 'L') CS_SET_L;
 8021622:	787b      	ldrb	r3, [r7, #1]
 8021624:	2b4c      	cmp	r3, #76	; 0x4c
 8021626:	d106      	bne.n	8021636 <_ZN8Iim426525WriteEhhc+0x76>
 8021628:	2201      	movs	r2, #1
 802162a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802162e:	4808      	ldr	r0, [pc, #32]	; (8021650 <_ZN8Iim426525WriteEhhc+0x90>)
 8021630:	f006 fbe4 	bl	8027dfc <HAL_GPIO_WritePin>
    else if(imu_ic_lr == 'R') CS_SET_R;
}
 8021634:	e008      	b.n	8021648 <_ZN8Iim426525WriteEhhc+0x88>
    else if(imu_ic_lr == 'R') CS_SET_R;
 8021636:	787b      	ldrb	r3, [r7, #1]
 8021638:	2b52      	cmp	r3, #82	; 0x52
 802163a:	d105      	bne.n	8021648 <_ZN8Iim426525WriteEhhc+0x88>
 802163c:	2201      	movs	r2, #1
 802163e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021642:	4804      	ldr	r0, [pc, #16]	; (8021654 <_ZN8Iim426525WriteEhhc+0x94>)
 8021644:	f006 fbda 	bl	8027dfc <HAL_GPIO_WritePin>
}
 8021648:	bf00      	nop
 802164a:	3708      	adds	r7, #8
 802164c:	46bd      	mov	sp, r7
 802164e:	bd80      	pop	{r7, pc}
 8021650:	40020400 	.word	0x40020400
 8021654:	40020000 	.word	0x40020000
 8021658:	20014310 	.word	0x20014310

0802165c <_ZN8Iim426529Read2ByteEhhc>:

    return CheckRead(send_address, send_data, imu_ic_lr);
}

int16_t Iim42652::Read2Byte(uint8_t upper_address, uint8_t lower_address, char imu_ic_lr)
{
 802165c:	b580      	push	{r7, lr}
 802165e:	b084      	sub	sp, #16
 8021660:	af00      	add	r7, sp, #0
 8021662:	6078      	str	r0, [r7, #4]
 8021664:	4608      	mov	r0, r1
 8021666:	4611      	mov	r1, r2
 8021668:	461a      	mov	r2, r3
 802166a:	4603      	mov	r3, r0
 802166c:	70fb      	strb	r3, [r7, #3]
 802166e:	460b      	mov	r3, r1
 8021670:	70bb      	strb	r3, [r7, #2]
 8021672:	4613      	mov	r3, r2
 8021674:	707b      	strb	r3, [r7, #1]
    int16_t upper_receive, lower_receive;

    upper_receive = static_cast<int16_t>(Read(upper_address, imu_ic_lr));
 8021676:	787a      	ldrb	r2, [r7, #1]
 8021678:	78fb      	ldrb	r3, [r7, #3]
 802167a:	4619      	mov	r1, r3
 802167c:	6878      	ldr	r0, [r7, #4]
 802167e:	f7ff ff51 	bl	8021524 <_ZN8Iim426524ReadEhc>
 8021682:	4603      	mov	r3, r0
 8021684:	81fb      	strh	r3, [r7, #14]
    lower_receive = static_cast<int16_t>(Read(lower_address, imu_ic_lr));
 8021686:	787a      	ldrb	r2, [r7, #1]
 8021688:	78bb      	ldrb	r3, [r7, #2]
 802168a:	4619      	mov	r1, r3
 802168c:	6878      	ldr	r0, [r7, #4]
 802168e:	f7ff ff49 	bl	8021524 <_ZN8Iim426524ReadEhc>
 8021692:	4603      	mov	r3, r0
 8021694:	81bb      	strh	r3, [r7, #12]

    return (upper_receive << 8) | lower_receive;
 8021696:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802169a:	021b      	lsls	r3, r3, #8
 802169c:	b21a      	sxth	r2, r3
 802169e:	89bb      	ldrh	r3, [r7, #12]
 80216a0:	4313      	orrs	r3, r2
 80216a2:	b21b      	sxth	r3, r3
}
 80216a4:	4618      	mov	r0, r3
 80216a6:	3710      	adds	r7, #16
 80216a8:	46bd      	mov	sp, r7
 80216aa:	bd80      	pop	{r7, pc}

080216ac <_ZN8Iim426529GyroZLeftEv>:
{
    return Read2Byte(GYRO_DATA_Y1_ADD, GYRO_DATA_Y0_ADD, 'R');
}

int16_t Iim42652::GyroZLeft()
{
 80216ac:	b580      	push	{r7, lr}
 80216ae:	b082      	sub	sp, #8
 80216b0:	af00      	add	r7, sp, #0
 80216b2:	6078      	str	r0, [r7, #4]
    return Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'L');
 80216b4:	234c      	movs	r3, #76	; 0x4c
 80216b6:	222a      	movs	r2, #42	; 0x2a
 80216b8:	2129      	movs	r1, #41	; 0x29
 80216ba:	6878      	ldr	r0, [r7, #4]
 80216bc:	f7ff ffce 	bl	802165c <_ZN8Iim426529Read2ByteEhhc>
 80216c0:	4603      	mov	r3, r0
}
 80216c2:	4618      	mov	r0, r3
 80216c4:	3708      	adds	r7, #8
 80216c6:	46bd      	mov	sp, r7
 80216c8:	bd80      	pop	{r7, pc}

080216ca <_ZN8Iim4265210GyroZRightEv>:

int16_t Iim42652::GyroZRight()
{
 80216ca:	b580      	push	{r7, lr}
 80216cc:	b082      	sub	sp, #8
 80216ce:	af00      	add	r7, sp, #0
 80216d0:	6078      	str	r0, [r7, #4]
    return Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'R');
 80216d2:	2352      	movs	r3, #82	; 0x52
 80216d4:	222a      	movs	r2, #42	; 0x2a
 80216d6:	2129      	movs	r1, #41	; 0x29
 80216d8:	6878      	ldr	r0, [r7, #4]
 80216da:	f7ff ffbf 	bl	802165c <_ZN8Iim426529Read2ByteEhhc>
 80216de:	4603      	mov	r3, r0
}
 80216e0:	4618      	mov	r0, r3
 80216e2:	3708      	adds	r7, #8
 80216e4:	46bd      	mov	sp, r7
 80216e6:	bd80      	pop	{r7, pc}

080216e8 <_ZN3ImuC1EP8Iim42652>:
#include "imu.hpp"
#include "declare_extern.h"

Imu::Imu(Iim42652 *iim_42652) : rad_z_(0)
 80216e8:	b480      	push	{r7}
 80216ea:	b083      	sub	sp, #12
 80216ec:	af00      	add	r7, sp, #0
 80216ee:	6078      	str	r0, [r7, #4]
 80216f0:	6039      	str	r1, [r7, #0]
                              , rad_stack_z_(0)
                              , clear_integral_error_(0)
 80216f2:	687b      	ldr	r3, [r7, #4]
 80216f4:	f04f 0200 	mov.w	r2, #0
 80216f8:	605a      	str	r2, [r3, #4]
 80216fa:	687b      	ldr	r3, [r7, #4]
 80216fc:	f04f 0200 	mov.w	r2, #0
 8021700:	609a      	str	r2, [r3, #8]
 8021702:	687b      	ldr	r3, [r7, #4]
 8021704:	2200      	movs	r2, #0
 8021706:	731a      	strb	r2, [r3, #12]
{
    iim_42652_ = iim_42652;
 8021708:	687b      	ldr	r3, [r7, #4]
 802170a:	683a      	ldr	r2, [r7, #0]
 802170c:	601a      	str	r2, [r3, #0]
}
 802170e:	687b      	ldr	r3, [r7, #4]
 8021710:	4618      	mov	r0, r3
 8021712:	370c      	adds	r7, #12
 8021714:	46bd      	mov	sp, r7
 8021716:	f85d 7b04 	ldr.w	r7, [sp], #4
 802171a:	4770      	bx	lr
 802171c:	0000      	movs	r0, r0
	...

08021720 <_ZN3Imu6UpdateEv>:

void Imu::Update()
{
 8021720:	b5b0      	push	{r4, r5, r7, lr}
 8021722:	b086      	sub	sp, #24
 8021724:	af00      	add	r7, sp, #0
 8021726:	6078      	str	r0, [r7, #4]
    int16_t raw_gyro_z_l = iim_42652_->GyroZLeft();
 8021728:	687b      	ldr	r3, [r7, #4]
 802172a:	681b      	ldr	r3, [r3, #0]
 802172c:	4618      	mov	r0, r3
 802172e:	f7ff ffbd 	bl	80216ac <_ZN8Iim426529GyroZLeftEv>
 8021732:	4603      	mov	r3, r0
 8021734:	82fb      	strh	r3, [r7, #22]
    int16_t raw_gyro_z_r = iim_42652_->GyroZRight();
 8021736:	687b      	ldr	r3, [r7, #4]
 8021738:	681b      	ldr	r3, [r3, #0]
 802173a:	4618      	mov	r0, r3
 802173c:	f7ff ffc5 	bl	80216ca <_ZN8Iim4265210GyroZRightEv>
 8021740:	4603      	mov	r3, r0
 8021742:	82bb      	strh	r3, [r7, #20]
    float avg_raw_gyro_z = (raw_gyro_z_l + raw_gyro_z_r) / 2.0;
 8021744:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8021748:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 802174c:	4413      	add	r3, r2
 802174e:	4618      	mov	r0, r3
 8021750:	f7fe fe20 	bl	8020394 <__aeabi_i2d>
 8021754:	f04f 0200 	mov.w	r2, #0
 8021758:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802175c:	f7fe ffae 	bl	80206bc <__aeabi_ddiv>
 8021760:	4603      	mov	r3, r0
 8021762:	460c      	mov	r4, r1
 8021764:	4618      	mov	r0, r3
 8021766:	4621      	mov	r1, r4
 8021768:	f7ff f956 	bl	8020a18 <__aeabi_d2f>
 802176c:	4603      	mov	r3, r0
 802176e:	613b      	str	r3, [r7, #16]
    float rad_z = avg_raw_gyro_z * CONST_RAD_CALC * TIM6_PERIOD_S;
 8021770:	6938      	ldr	r0, [r7, #16]
 8021772:	f7fe fe21 	bl	80203b8 <__aeabi_f2d>
 8021776:	a331      	add	r3, pc, #196	; (adr r3, 802183c <_ZN3Imu6UpdateEv+0x11c>)
 8021778:	e9d3 2300 	ldrd	r2, r3, [r3]
 802177c:	f7fe fe74 	bl	8020468 <__aeabi_dmul>
 8021780:	4603      	mov	r3, r0
 8021782:	460c      	mov	r4, r1
 8021784:	4618      	mov	r0, r3
 8021786:	4621      	mov	r1, r4
 8021788:	a32e      	add	r3, pc, #184	; (adr r3, 8021844 <_ZN3Imu6UpdateEv+0x124>)
 802178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802178e:	f7fe fe6b 	bl	8020468 <__aeabi_dmul>
 8021792:	4603      	mov	r3, r0
 8021794:	460c      	mov	r4, r1
 8021796:	4618      	mov	r0, r3
 8021798:	4621      	mov	r1, r4
 802179a:	f7ff f93d 	bl	8020a18 <__aeabi_d2f>
 802179e:	4603      	mov	r3, r0
 80217a0:	60fb      	str	r3, [r7, #12]

    /* low pass filter */
    static float pre_filter = 0;
    float filter = pre_filter * (1.0 - RAD_LPF_RATIO) + (rad_z * RAD_LPF_RATIO);
 80217a2:	4b23      	ldr	r3, [pc, #140]	; (8021830 <_ZN3Imu6UpdateEv+0x110>)
 80217a4:	681b      	ldr	r3, [r3, #0]
 80217a6:	4618      	mov	r0, r3
 80217a8:	f7fe fe06 	bl	80203b8 <__aeabi_f2d>
 80217ac:	a31c      	add	r3, pc, #112	; (adr r3, 8021820 <_ZN3Imu6UpdateEv+0x100>)
 80217ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80217b2:	f7fe fe59 	bl	8020468 <__aeabi_dmul>
 80217b6:	4603      	mov	r3, r0
 80217b8:	460c      	mov	r4, r1
 80217ba:	4625      	mov	r5, r4
 80217bc:	461c      	mov	r4, r3
 80217be:	68f8      	ldr	r0, [r7, #12]
 80217c0:	f7fe fdfa 	bl	80203b8 <__aeabi_f2d>
 80217c4:	a318      	add	r3, pc, #96	; (adr r3, 8021828 <_ZN3Imu6UpdateEv+0x108>)
 80217c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80217ca:	f7fe fe4d 	bl	8020468 <__aeabi_dmul>
 80217ce:	4602      	mov	r2, r0
 80217d0:	460b      	mov	r3, r1
 80217d2:	4620      	mov	r0, r4
 80217d4:	4629      	mov	r1, r5
 80217d6:	f7fe fc91 	bl	80200fc <__adddf3>
 80217da:	4603      	mov	r3, r0
 80217dc:	460c      	mov	r4, r1
 80217de:	4618      	mov	r0, r3
 80217e0:	4621      	mov	r1, r4
 80217e2:	f7ff f919 	bl	8020a18 <__aeabi_d2f>
 80217e6:	4603      	mov	r3, r0
 80217e8:	60bb      	str	r3, [r7, #8]
    pre_filter = filter;
 80217ea:	4a11      	ldr	r2, [pc, #68]	; (8021830 <_ZN3Imu6UpdateEv+0x110>)
 80217ec:	68bb      	ldr	r3, [r7, #8]
 80217ee:	6013      	str	r3, [r2, #0]

    rad_z_ = filter;
 80217f0:	687b      	ldr	r3, [r7, #4]
 80217f2:	68ba      	ldr	r2, [r7, #8]
 80217f4:	605a      	str	r2, [r3, #4]
    rad_stack_z_ += filter;
 80217f6:	687b      	ldr	r3, [r7, #4]
 80217f8:	ed93 7a02 	vldr	s14, [r3, #8]
 80217fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8021800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021804:	687b      	ldr	r3, [r7, #4]
 8021806:	edc3 7a02 	vstr	s15, [r3, #8]

#ifdef DEBUG_MODE
    g_rad_z = rad_z;
 802180a:	4a0a      	ldr	r2, [pc, #40]	; (8021834 <_ZN3Imu6UpdateEv+0x114>)
 802180c:	68fb      	ldr	r3, [r7, #12]
 802180e:	6013      	str	r3, [r2, #0]
    g_rad_stack_z = rad_stack_z_;
 8021810:	687b      	ldr	r3, [r7, #4]
 8021812:	689b      	ldr	r3, [r3, #8]
 8021814:	4a08      	ldr	r2, [pc, #32]	; (8021838 <_ZN3Imu6UpdateEv+0x118>)
 8021816:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8021818:	bf00      	nop
 802181a:	3718      	adds	r7, #24
 802181c:	46bd      	mov	sp, r7
 802181e:	bdb0      	pop	{r4, r5, r7, pc}
 8021820:	33333334 	.word	0x33333334
 8021824:	3fd33333 	.word	0x3fd33333
 8021828:	66666666 	.word	0x66666666
 802182c:	3fe66666 	.word	0x3fe66666
 8021830:	200001fc 	.word	0x200001fc
 8021834:	20000264 	.word	0x20000264
 8021838:	20000260 	.word	0x20000260
 802183c:	0ae53650 	.word	0x0ae53650
 8021840:	3f5172ef 	.word	0x3f5172ef
 8021844:	47ae147b 	.word	0x47ae147b
 8021848:	3f547ae1 	.word	0x3f547ae1

0802184c <_ZN3Imu14ClearRadStackZEv>:

void Imu::ClearRadStackZ()
{
 802184c:	b480      	push	{r7}
 802184e:	b083      	sub	sp, #12
 8021850:	af00      	add	r7, sp, #0
 8021852:	6078      	str	r0, [r7, #4]
    rad_stack_z_ = 0;
 8021854:	687b      	ldr	r3, [r7, #4]
 8021856:	f04f 0200 	mov.w	r2, #0
 802185a:	609a      	str	r2, [r3, #8]
}
 802185c:	bf00      	nop
 802185e:	370c      	adds	r7, #12
 8021860:	46bd      	mov	sp, r7
 8021862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021866:	4770      	bx	lr

08021868 <_ZN3Imu12GetRadStackZEv>:

float Imu::GetRadStackZ()
{
 8021868:	b480      	push	{r7}
 802186a:	b083      	sub	sp, #12
 802186c:	af00      	add	r7, sp, #0
 802186e:	6078      	str	r0, [r7, #4]
    return rad_stack_z_;
 8021870:	687b      	ldr	r3, [r7, #4]
 8021872:	689b      	ldr	r3, [r3, #8]
 8021874:	ee07 3a90 	vmov	s15, r3
}
 8021878:	eeb0 0a67 	vmov.f32	s0, s15
 802187c:	370c      	adds	r7, #12
 802187e:	46bd      	mov	sp, r7
 8021880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021884:	4770      	bx	lr

08021886 <_ZN3LedC1Ev>:
#include "led.hpp"

Led::Led() : interrupt_count_(0)
 8021886:	b480      	push	{r7}
 8021888:	b083      	sub	sp, #12
 802188a:	af00      	add	r7, sp, #0
 802188c:	6078      	str	r0, [r7, #4]
           , interrupt_timer_(0) {}
 802188e:	687b      	ldr	r3, [r7, #4]
 8021890:	2200      	movs	r2, #0
 8021892:	701a      	strb	r2, [r3, #0]
 8021894:	687b      	ldr	r3, [r7, #4]
 8021896:	2200      	movs	r2, #0
 8021898:	705a      	strb	r2, [r3, #1]
 802189a:	687b      	ldr	r3, [r7, #4]
 802189c:	4618      	mov	r0, r3
 802189e:	370c      	adds	r7, #12
 80218a0:	46bd      	mov	sp, r7
 80218a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218a6:	4770      	bx	lr

080218a8 <_ZN3Led10ColorOrderEc>:

void Led::ColorOrder(char color)
{
 80218a8:	b580      	push	{r7, lr}
 80218aa:	b082      	sub	sp, #8
 80218ac:	af00      	add	r7, sp, #0
 80218ae:	6078      	str	r0, [r7, #4]
 80218b0:	460b      	mov	r3, r1
 80218b2:	70fb      	strb	r3, [r7, #3]
    switch(color)
 80218b4:	78fb      	ldrb	r3, [r7, #3]
 80218b6:	3b42      	subs	r3, #66	; 0x42
 80218b8:	2b17      	cmp	r3, #23
 80218ba:	f200 80b8 	bhi.w	8021a2e <_ZN3Led10ColorOrderEc+0x186>
 80218be:	a201      	add	r2, pc, #4	; (adr r2, 80218c4 <_ZN3Led10ColorOrderEc+0x1c>)
 80218c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80218c4:	08021971 	.word	0x08021971
 80218c8:	080219bd 	.word	0x080219bd
 80218cc:	08021a2f 	.word	0x08021a2f
 80218d0:	08021a2f 	.word	0x08021a2f
 80218d4:	08021a2f 	.word	0x08021a2f
 80218d8:	0802194b 	.word	0x0802194b
 80218dc:	08021a2f 	.word	0x08021a2f
 80218e0:	08021a2f 	.word	0x08021a2f
 80218e4:	08021a2f 	.word	0x08021a2f
 80218e8:	08021a2f 	.word	0x08021a2f
 80218ec:	08021a2f 	.word	0x08021a2f
 80218f0:	080219e3 	.word	0x080219e3
 80218f4:	08021a2f 	.word	0x08021a2f
 80218f8:	08021a2f 	.word	0x08021a2f
 80218fc:	08021a2f 	.word	0x08021a2f
 8021900:	08021a2f 	.word	0x08021a2f
 8021904:	08021925 	.word	0x08021925
 8021908:	08021a2f 	.word	0x08021a2f
 802190c:	08021a2f 	.word	0x08021a2f
 8021910:	08021a2f 	.word	0x08021a2f
 8021914:	08021a2f 	.word	0x08021a2f
 8021918:	08021a09 	.word	0x08021a09
 802191c:	08021a2f 	.word	0x08021a2f
 8021920:	08021997 	.word	0x08021997
    {
        case 'R': R_ON;  G_OFF; B_OFF; break;
 8021924:	2200      	movs	r2, #0
 8021926:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802192a:	484c      	ldr	r0, [pc, #304]	; (8021a5c <_ZN3Led10ColorOrderEc+0x1b4>)
 802192c:	f006 fa66 	bl	8027dfc <HAL_GPIO_WritePin>
 8021930:	2201      	movs	r2, #1
 8021932:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021936:	4849      	ldr	r0, [pc, #292]	; (8021a5c <_ZN3Led10ColorOrderEc+0x1b4>)
 8021938:	f006 fa60 	bl	8027dfc <HAL_GPIO_WritePin>
 802193c:	2201      	movs	r2, #1
 802193e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021942:	4846      	ldr	r0, [pc, #280]	; (8021a5c <_ZN3Led10ColorOrderEc+0x1b4>)
 8021944:	f006 fa5a 	bl	8027dfc <HAL_GPIO_WritePin>
 8021948:	e084      	b.n	8021a54 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'G': R_OFF; G_ON;  B_OFF; break;
 802194a:	2201      	movs	r2, #1
 802194c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021950:	4842      	ldr	r0, [pc, #264]	; (8021a5c <_ZN3Led10ColorOrderEc+0x1b4>)
 8021952:	f006 fa53 	bl	8027dfc <HAL_GPIO_WritePin>
 8021956:	2200      	movs	r2, #0
 8021958:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802195c:	483f      	ldr	r0, [pc, #252]	; (8021a5c <_ZN3Led10ColorOrderEc+0x1b4>)
 802195e:	f006 fa4d 	bl	8027dfc <HAL_GPIO_WritePin>
 8021962:	2201      	movs	r2, #1
 8021964:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021968:	483c      	ldr	r0, [pc, #240]	; (8021a5c <_ZN3Led10ColorOrderEc+0x1b4>)
 802196a:	f006 fa47 	bl	8027dfc <HAL_GPIO_WritePin>
 802196e:	e071      	b.n	8021a54 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'B': R_OFF; G_OFF; B_ON;  break;
 8021970:	2201      	movs	r2, #1
 8021972:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021976:	4839      	ldr	r0, [pc, #228]	; (8021a5c <_ZN3Led10ColorOrderEc+0x1b4>)
 8021978:	f006 fa40 	bl	8027dfc <HAL_GPIO_WritePin>
 802197c:	2201      	movs	r2, #1
 802197e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021982:	4836      	ldr	r0, [pc, #216]	; (8021a5c <_ZN3Led10ColorOrderEc+0x1b4>)
 8021984:	f006 fa3a 	bl	8027dfc <HAL_GPIO_WritePin>
 8021988:	2200      	movs	r2, #0
 802198a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802198e:	4833      	ldr	r0, [pc, #204]	; (8021a5c <_ZN3Led10ColorOrderEc+0x1b4>)
 8021990:	f006 fa34 	bl	8027dfc <HAL_GPIO_WritePin>
 8021994:	e05e      	b.n	8021a54 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'Y': R_ON;  G_ON;  B_OFF; break;
 8021996:	2200      	movs	r2, #0
 8021998:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802199c:	482f      	ldr	r0, [pc, #188]	; (8021a5c <_ZN3Led10ColorOrderEc+0x1b4>)
 802199e:	f006 fa2d 	bl	8027dfc <HAL_GPIO_WritePin>
 80219a2:	2200      	movs	r2, #0
 80219a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80219a8:	482c      	ldr	r0, [pc, #176]	; (8021a5c <_ZN3Led10ColorOrderEc+0x1b4>)
 80219aa:	f006 fa27 	bl	8027dfc <HAL_GPIO_WritePin>
 80219ae:	2201      	movs	r2, #1
 80219b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80219b4:	4829      	ldr	r0, [pc, #164]	; (8021a5c <_ZN3Led10ColorOrderEc+0x1b4>)
 80219b6:	f006 fa21 	bl	8027dfc <HAL_GPIO_WritePin>
 80219ba:	e04b      	b.n	8021a54 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'C': R_OFF; G_ON;  B_ON;  break;
 80219bc:	2201      	movs	r2, #1
 80219be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80219c2:	4826      	ldr	r0, [pc, #152]	; (8021a5c <_ZN3Led10ColorOrderEc+0x1b4>)
 80219c4:	f006 fa1a 	bl	8027dfc <HAL_GPIO_WritePin>
 80219c8:	2200      	movs	r2, #0
 80219ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80219ce:	4823      	ldr	r0, [pc, #140]	; (8021a5c <_ZN3Led10ColorOrderEc+0x1b4>)
 80219d0:	f006 fa14 	bl	8027dfc <HAL_GPIO_WritePin>
 80219d4:	2200      	movs	r2, #0
 80219d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80219da:	4820      	ldr	r0, [pc, #128]	; (8021a5c <_ZN3Led10ColorOrderEc+0x1b4>)
 80219dc:	f006 fa0e 	bl	8027dfc <HAL_GPIO_WritePin>
 80219e0:	e038      	b.n	8021a54 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'M': R_ON;  G_OFF; B_ON;  break;
 80219e2:	2200      	movs	r2, #0
 80219e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80219e8:	481c      	ldr	r0, [pc, #112]	; (8021a5c <_ZN3Led10ColorOrderEc+0x1b4>)
 80219ea:	f006 fa07 	bl	8027dfc <HAL_GPIO_WritePin>
 80219ee:	2201      	movs	r2, #1
 80219f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80219f4:	4819      	ldr	r0, [pc, #100]	; (8021a5c <_ZN3Led10ColorOrderEc+0x1b4>)
 80219f6:	f006 fa01 	bl	8027dfc <HAL_GPIO_WritePin>
 80219fa:	2200      	movs	r2, #0
 80219fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021a00:	4816      	ldr	r0, [pc, #88]	; (8021a5c <_ZN3Led10ColorOrderEc+0x1b4>)
 8021a02:	f006 f9fb 	bl	8027dfc <HAL_GPIO_WritePin>
 8021a06:	e025      	b.n	8021a54 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'W': R_ON;  G_ON;  B_ON;  break;
 8021a08:	2200      	movs	r2, #0
 8021a0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021a0e:	4813      	ldr	r0, [pc, #76]	; (8021a5c <_ZN3Led10ColorOrderEc+0x1b4>)
 8021a10:	f006 f9f4 	bl	8027dfc <HAL_GPIO_WritePin>
 8021a14:	2200      	movs	r2, #0
 8021a16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021a1a:	4810      	ldr	r0, [pc, #64]	; (8021a5c <_ZN3Led10ColorOrderEc+0x1b4>)
 8021a1c:	f006 f9ee 	bl	8027dfc <HAL_GPIO_WritePin>
 8021a20:	2200      	movs	r2, #0
 8021a22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021a26:	480d      	ldr	r0, [pc, #52]	; (8021a5c <_ZN3Led10ColorOrderEc+0x1b4>)
 8021a28:	f006 f9e8 	bl	8027dfc <HAL_GPIO_WritePin>
 8021a2c:	e012      	b.n	8021a54 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'X': // fall through
        default:  R_OFF; G_OFF; B_OFF; break;
 8021a2e:	2201      	movs	r2, #1
 8021a30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021a34:	4809      	ldr	r0, [pc, #36]	; (8021a5c <_ZN3Led10ColorOrderEc+0x1b4>)
 8021a36:	f006 f9e1 	bl	8027dfc <HAL_GPIO_WritePin>
 8021a3a:	2201      	movs	r2, #1
 8021a3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021a40:	4806      	ldr	r0, [pc, #24]	; (8021a5c <_ZN3Led10ColorOrderEc+0x1b4>)
 8021a42:	f006 f9db 	bl	8027dfc <HAL_GPIO_WritePin>
 8021a46:	2201      	movs	r2, #1
 8021a48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021a4c:	4803      	ldr	r0, [pc, #12]	; (8021a5c <_ZN3Led10ColorOrderEc+0x1b4>)
 8021a4e:	f006 f9d5 	bl	8027dfc <HAL_GPIO_WritePin>
 8021a52:	bf00      	nop
    }
}
 8021a54:	bf00      	nop
 8021a56:	3708      	adds	r7, #8
 8021a58:	46bd      	mov	sp, r7
 8021a5a:	bd80      	pop	{r7, pc}
 8021a5c:	40020800 	.word	0x40020800

08021a60 <_ZN3Led5BlinkEhcc>:

void Led::Blink(uint8_t times, char color_1, char color_2)
{
 8021a60:	b580      	push	{r7, lr}
 8021a62:	b084      	sub	sp, #16
 8021a64:	af00      	add	r7, sp, #0
 8021a66:	6078      	str	r0, [r7, #4]
 8021a68:	4608      	mov	r0, r1
 8021a6a:	4611      	mov	r1, r2
 8021a6c:	461a      	mov	r2, r3
 8021a6e:	4603      	mov	r3, r0
 8021a70:	70fb      	strb	r3, [r7, #3]
 8021a72:	460b      	mov	r3, r1
 8021a74:	70bb      	strb	r3, [r7, #2]
 8021a76:	4613      	mov	r3, r2
 8021a78:	707b      	strb	r3, [r7, #1]
    for(uint8_t i = 0; i < times; i++)
 8021a7a:	2300      	movs	r3, #0
 8021a7c:	73fb      	strb	r3, [r7, #15]
 8021a7e:	7bfa      	ldrb	r2, [r7, #15]
 8021a80:	78fb      	ldrb	r3, [r7, #3]
 8021a82:	429a      	cmp	r2, r3
 8021a84:	d215      	bcs.n	8021ab2 <_ZN3Led5BlinkEhcc+0x52>
    {
        ColorOrder(color_1);
 8021a86:	78bb      	ldrb	r3, [r7, #2]
 8021a88:	4619      	mov	r1, r3
 8021a8a:	6878      	ldr	r0, [r7, #4]
 8021a8c:	f7ff ff0c 	bl	80218a8 <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 8021a90:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021a94:	f004 fc94 	bl	80263c0 <HAL_Delay>
        ColorOrder(color_2);
 8021a98:	787b      	ldrb	r3, [r7, #1]
 8021a9a:	4619      	mov	r1, r3
 8021a9c:	6878      	ldr	r0, [r7, #4]
 8021a9e:	f7ff ff03 	bl	80218a8 <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 8021aa2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021aa6:	f004 fc8b 	bl	80263c0 <HAL_Delay>
    for(uint8_t i = 0; i < times; i++)
 8021aaa:	7bfb      	ldrb	r3, [r7, #15]
 8021aac:	3301      	adds	r3, #1
 8021aae:	73fb      	strb	r3, [r7, #15]
 8021ab0:	e7e5      	b.n	8021a7e <_ZN3Led5BlinkEhcc+0x1e>
    }
}
 8021ab2:	bf00      	nop
 8021ab4:	3710      	adds	r7, #16
 8021ab6:	46bd      	mov	sp, r7
 8021ab8:	bd80      	pop	{r7, pc}

08021aba <_ZN3Led7RainbowEh>:

void Led::Rainbow(uint8_t times)
{
 8021aba:	b580      	push	{r7, lr}
 8021abc:	b084      	sub	sp, #16
 8021abe:	af00      	add	r7, sp, #0
 8021ac0:	6078      	str	r0, [r7, #4]
 8021ac2:	460b      	mov	r3, r1
 8021ac4:	70fb      	strb	r3, [r7, #3]
    for(uint8_t i = 0; i < times; i++)
 8021ac6:	2300      	movs	r3, #0
 8021ac8:	73fb      	strb	r3, [r7, #15]
 8021aca:	7bfa      	ldrb	r2, [r7, #15]
 8021acc:	78fb      	ldrb	r3, [r7, #3]
 8021ace:	429a      	cmp	r2, r3
 8021ad0:	d233      	bcs.n	8021b3a <_ZN3Led7RainbowEh+0x80>
    {
        ColorOrder('R');
 8021ad2:	2152      	movs	r1, #82	; 0x52
 8021ad4:	6878      	ldr	r0, [r7, #4]
 8021ad6:	f7ff fee7 	bl	80218a8 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021ada:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021ade:	f004 fc6f 	bl	80263c0 <HAL_Delay>
        ColorOrder('Y');
 8021ae2:	2159      	movs	r1, #89	; 0x59
 8021ae4:	6878      	ldr	r0, [r7, #4]
 8021ae6:	f7ff fedf 	bl	80218a8 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021aea:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021aee:	f004 fc67 	bl	80263c0 <HAL_Delay>
        ColorOrder('G');
 8021af2:	2147      	movs	r1, #71	; 0x47
 8021af4:	6878      	ldr	r0, [r7, #4]
 8021af6:	f7ff fed7 	bl	80218a8 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021afa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021afe:	f004 fc5f 	bl	80263c0 <HAL_Delay>
        ColorOrder('C');
 8021b02:	2143      	movs	r1, #67	; 0x43
 8021b04:	6878      	ldr	r0, [r7, #4]
 8021b06:	f7ff fecf 	bl	80218a8 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021b0a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021b0e:	f004 fc57 	bl	80263c0 <HAL_Delay>
        ColorOrder('B');
 8021b12:	2142      	movs	r1, #66	; 0x42
 8021b14:	6878      	ldr	r0, [r7, #4]
 8021b16:	f7ff fec7 	bl	80218a8 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021b1a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021b1e:	f004 fc4f 	bl	80263c0 <HAL_Delay>
        ColorOrder('M');
 8021b22:	214d      	movs	r1, #77	; 0x4d
 8021b24:	6878      	ldr	r0, [r7, #4]
 8021b26:	f7ff febf 	bl	80218a8 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021b2a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021b2e:	f004 fc47 	bl	80263c0 <HAL_Delay>
    for(uint8_t i = 0; i < times; i++)
 8021b32:	7bfb      	ldrb	r3, [r7, #15]
 8021b34:	3301      	adds	r3, #1
 8021b36:	73fb      	strb	r3, [r7, #15]
 8021b38:	e7c7      	b.n	8021aca <_ZN3Led7RainbowEh+0x10>
    }
}
 8021b3a:	bf00      	nop
 8021b3c:	3710      	adds	r7, #16
 8021b3e:	46bd      	mov	sp, r7
 8021b40:	bd80      	pop	{r7, pc}

08021b42 <_ZN3Led14BlinkInterruptEhcc>:

bool Led::BlinkInterrupt(uint8_t times, char color_1, char color_2)
{
 8021b42:	b580      	push	{r7, lr}
 8021b44:	b084      	sub	sp, #16
 8021b46:	af00      	add	r7, sp, #0
 8021b48:	6078      	str	r0, [r7, #4]
 8021b4a:	4608      	mov	r0, r1
 8021b4c:	4611      	mov	r1, r2
 8021b4e:	461a      	mov	r2, r3
 8021b50:	4603      	mov	r3, r0
 8021b52:	70fb      	strb	r3, [r7, #3]
 8021b54:	460b      	mov	r3, r1
 8021b56:	70bb      	strb	r3, [r7, #2]
 8021b58:	4613      	mov	r3, r2
 8021b5a:	707b      	strb	r3, [r7, #1]
    uint8_t count = interrupt_count_;
 8021b5c:	687b      	ldr	r3, [r7, #4]
 8021b5e:	781b      	ldrb	r3, [r3, #0]
 8021b60:	73fb      	strb	r3, [r7, #15]
    uint8_t timer = interrupt_timer_;
 8021b62:	687b      	ldr	r3, [r7, #4]
 8021b64:	785b      	ldrb	r3, [r3, #1]
 8021b66:	73bb      	strb	r3, [r7, #14]
    bool blink_continue = true;
 8021b68:	2301      	movs	r3, #1
 8021b6a:	737b      	strb	r3, [r7, #13]

    if(count < times){
 8021b6c:	7bfa      	ldrb	r2, [r7, #15]
 8021b6e:	78fb      	ldrb	r3, [r7, #3]
 8021b70:	429a      	cmp	r2, r3
 8021b72:	d21d      	bcs.n	8021bb0 <_ZN3Led14BlinkInterruptEhcc+0x6e>
        if(timer < BLINK_INTERVAL_TIMX){
 8021b74:	7bbb      	ldrb	r3, [r7, #14]
 8021b76:	2b27      	cmp	r3, #39	; 0x27
 8021b78:	d808      	bhi.n	8021b8c <_ZN3Led14BlinkInterruptEhcc+0x4a>
            ColorOrder(color_1);
 8021b7a:	78bb      	ldrb	r3, [r7, #2]
 8021b7c:	4619      	mov	r1, r3
 8021b7e:	6878      	ldr	r0, [r7, #4]
 8021b80:	f7ff fe92 	bl	80218a8 <_ZN3Led10ColorOrderEc>
            timer++;
 8021b84:	7bbb      	ldrb	r3, [r7, #14]
 8021b86:	3301      	adds	r3, #1
 8021b88:	73bb      	strb	r3, [r7, #14]
 8021b8a:	e019      	b.n	8021bc0 <_ZN3Led14BlinkInterruptEhcc+0x7e>
        }else if(timer < (BLINK_INTERVAL_TIMX + BLINK_INTERVAL_TIMX)){
 8021b8c:	7bbb      	ldrb	r3, [r7, #14]
 8021b8e:	2b4f      	cmp	r3, #79	; 0x4f
 8021b90:	d808      	bhi.n	8021ba4 <_ZN3Led14BlinkInterruptEhcc+0x62>
            ColorOrder(color_2);
 8021b92:	787b      	ldrb	r3, [r7, #1]
 8021b94:	4619      	mov	r1, r3
 8021b96:	6878      	ldr	r0, [r7, #4]
 8021b98:	f7ff fe86 	bl	80218a8 <_ZN3Led10ColorOrderEc>
            timer++;
 8021b9c:	7bbb      	ldrb	r3, [r7, #14]
 8021b9e:	3301      	adds	r3, #1
 8021ba0:	73bb      	strb	r3, [r7, #14]
 8021ba2:	e00d      	b.n	8021bc0 <_ZN3Led14BlinkInterruptEhcc+0x7e>
        }else{
            count++;
 8021ba4:	7bfb      	ldrb	r3, [r7, #15]
 8021ba6:	3301      	adds	r3, #1
 8021ba8:	73fb      	strb	r3, [r7, #15]
            timer = 0;
 8021baa:	2300      	movs	r3, #0
 8021bac:	73bb      	strb	r3, [r7, #14]
 8021bae:	e007      	b.n	8021bc0 <_ZN3Led14BlinkInterruptEhcc+0x7e>
        }
    }else{
        ColorOrder('X');
 8021bb0:	2158      	movs	r1, #88	; 0x58
 8021bb2:	6878      	ldr	r0, [r7, #4]
 8021bb4:	f7ff fe78 	bl	80218a8 <_ZN3Led10ColorOrderEc>
        count = 0;
 8021bb8:	2300      	movs	r3, #0
 8021bba:	73fb      	strb	r3, [r7, #15]
        blink_continue = false;
 8021bbc:	2300      	movs	r3, #0
 8021bbe:	737b      	strb	r3, [r7, #13]
    }

    interrupt_count_ = count;
 8021bc0:	687b      	ldr	r3, [r7, #4]
 8021bc2:	7bfa      	ldrb	r2, [r7, #15]
 8021bc4:	701a      	strb	r2, [r3, #0]
    interrupt_timer_ = timer;
 8021bc6:	687b      	ldr	r3, [r7, #4]
 8021bc8:	7bba      	ldrb	r2, [r7, #14]
 8021bca:	705a      	strb	r2, [r3, #1]

    return blink_continue;
 8021bcc:	7b7b      	ldrb	r3, [r7, #13]
}
 8021bce:	4618      	mov	r0, r3
 8021bd0:	3710      	adds	r7, #16
 8021bd2:	46bd      	mov	sp, r7
 8021bd4:	bd80      	pop	{r7, pc}

08021bd6 <_ZN3Led14ResetInterruptEv>:

void Led::ResetInterrupt()
{
 8021bd6:	b480      	push	{r7}
 8021bd8:	b083      	sub	sp, #12
 8021bda:	af00      	add	r7, sp, #0
 8021bdc:	6078      	str	r0, [r7, #4]
    interrupt_count_ = 0;
 8021bde:	687b      	ldr	r3, [r7, #4]
 8021be0:	2200      	movs	r2, #0
 8021be2:	701a      	strb	r2, [r3, #0]
    interrupt_timer_ = 0;
 8021be4:	687b      	ldr	r3, [r7, #4]
 8021be6:	2200      	movs	r2, #0
 8021be8:	705a      	strb	r2, [r3, #1]
 8021bea:	bf00      	nop
 8021bec:	370c      	adds	r7, #12
 8021bee:	46bd      	mov	sp, r7
 8021bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bf4:	4770      	bx	lr

08021bf6 <_ZN10LineSensorC1Ev>:
#include "line_sensor.hpp"

LineSensor::LineSensor() : line_sensors_buff_{0}
 8021bf6:	b580      	push	{r7, lr}
 8021bf8:	b082      	sub	sp, #8
 8021bfa:	af00      	add	r7, sp, #0
 8021bfc:	6078      	str	r0, [r7, #4]
                         , consecutive_line_sensors_buff_{{0}}
                         , max_line_sensors_valu_{0}
                         , min_line_sensors_valu_{0}
                         , line_sensors_valu_{0}
                         , emergency_stop_flag_(false) {}
 8021bfe:	687b      	ldr	r3, [r7, #4]
 8021c00:	461a      	mov	r2, r3
 8021c02:	2300      	movs	r3, #0
 8021c04:	6013      	str	r3, [r2, #0]
 8021c06:	6053      	str	r3, [r2, #4]
 8021c08:	6093      	str	r3, [r2, #8]
 8021c0a:	60d3      	str	r3, [r2, #12]
 8021c0c:	6113      	str	r3, [r2, #16]
 8021c0e:	6153      	str	r3, [r2, #20]
 8021c10:	6193      	str	r3, [r2, #24]
 8021c12:	687b      	ldr	r3, [r7, #4]
 8021c14:	331c      	adds	r3, #28
 8021c16:	f44f 728c 	mov.w	r2, #280	; 0x118
 8021c1a:	2100      	movs	r1, #0
 8021c1c:	4618      	mov	r0, r3
 8021c1e:	f008 fc4e 	bl	802a4be <memset>
 8021c22:	687b      	ldr	r3, [r7, #4]
 8021c24:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8021c28:	2200      	movs	r2, #0
 8021c2a:	601a      	str	r2, [r3, #0]
 8021c2c:	605a      	str	r2, [r3, #4]
 8021c2e:	609a      	str	r2, [r3, #8]
 8021c30:	60da      	str	r2, [r3, #12]
 8021c32:	611a      	str	r2, [r3, #16]
 8021c34:	615a      	str	r2, [r3, #20]
 8021c36:	619a      	str	r2, [r3, #24]
 8021c38:	687b      	ldr	r3, [r7, #4]
 8021c3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8021c3e:	2200      	movs	r2, #0
 8021c40:	601a      	str	r2, [r3, #0]
 8021c42:	605a      	str	r2, [r3, #4]
 8021c44:	609a      	str	r2, [r3, #8]
 8021c46:	60da      	str	r2, [r3, #12]
 8021c48:	611a      	str	r2, [r3, #16]
 8021c4a:	615a      	str	r2, [r3, #20]
 8021c4c:	619a      	str	r2, [r3, #24]
 8021c4e:	687b      	ldr	r3, [r7, #4]
 8021c50:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8021c54:	2200      	movs	r2, #0
 8021c56:	601a      	str	r2, [r3, #0]
 8021c58:	605a      	str	r2, [r3, #4]
 8021c5a:	609a      	str	r2, [r3, #8]
 8021c5c:	60da      	str	r2, [r3, #12]
 8021c5e:	611a      	str	r2, [r3, #16]
 8021c60:	615a      	str	r2, [r3, #20]
 8021c62:	619a      	str	r2, [r3, #24]
 8021c64:	687b      	ldr	r3, [r7, #4]
 8021c66:	2200      	movs	r2, #0
 8021c68:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 8021c6c:	687b      	ldr	r3, [r7, #4]
 8021c6e:	4618      	mov	r0, r3
 8021c70:	3708      	adds	r7, #8
 8021c72:	46bd      	mov	sp, r7
 8021c74:	bd80      	pop	{r7, pc}
	...

08021c78 <_ZN10LineSensor4InitEv>:

void LineSensor::Init()
{
 8021c78:	b580      	push	{r7, lr}
 8021c7a:	b082      	sub	sp, #8
 8021c7c:	af00      	add	r7, sp, #0
 8021c7e:	6078      	str	r0, [r7, #4]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)line_sensors_buff_, NUM_OF_LINE_SENSORS) != HAL_OK)
 8021c80:	687b      	ldr	r3, [r7, #4]
 8021c82:	220e      	movs	r2, #14
 8021c84:	4619      	mov	r1, r3
 8021c86:	4815      	ldr	r0, [pc, #84]	; (8021cdc <_ZN10LineSensor4InitEv+0x64>)
 8021c88:	f004 fc00 	bl	802648c <HAL_ADC_Start_DMA>
 8021c8c:	4603      	mov	r3, r0
 8021c8e:	2b00      	cmp	r3, #0
 8021c90:	bf14      	ite	ne
 8021c92:	2301      	movne	r3, #1
 8021c94:	2300      	moveq	r3, #0
 8021c96:	b2db      	uxtb	r3, r3
 8021c98:	2b00      	cmp	r3, #0
 8021c9a:	d004      	beq.n	8021ca6 <_ZN10LineSensor4InitEv+0x2e>
    {
#ifdef DEBUG_MODE
        g_error_handler_adc1 = true;
 8021c9c:	4b10      	ldr	r3, [pc, #64]	; (8021ce0 <_ZN10LineSensor4InitEv+0x68>)
 8021c9e:	2201      	movs	r2, #1
 8021ca0:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8021ca2:	f001 ff05 	bl	8023ab0 <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1) != HAL_OK)
 8021ca6:	2100      	movs	r1, #0
 8021ca8:	480e      	ldr	r0, [pc, #56]	; (8021ce4 <_ZN10LineSensor4InitEv+0x6c>)
 8021caa:	f007 fc1b 	bl	80294e4 <HAL_TIM_PWM_Start>
 8021cae:	4603      	mov	r3, r0
 8021cb0:	2b00      	cmp	r3, #0
 8021cb2:	bf14      	ite	ne
 8021cb4:	2301      	movne	r3, #1
 8021cb6:	2300      	moveq	r3, #0
 8021cb8:	b2db      	uxtb	r3, r3
 8021cba:	2b00      	cmp	r3, #0
 8021cbc:	d004      	beq.n	8021cc8 <_ZN10LineSensor4InitEv+0x50>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim11 = true;
 8021cbe:	4b0a      	ldr	r3, [pc, #40]	; (8021ce8 <_ZN10LineSensor4InitEv+0x70>)
 8021cc0:	2201      	movs	r2, #1
 8021cc2:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8021cc4:	f001 fef4 	bl	8023ab0 <Error_Handler>
    }

    __HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, LINE_SENSORS_LED_COMPARE);
 8021cc8:	4b06      	ldr	r3, [pc, #24]	; (8021ce4 <_ZN10LineSensor4InitEv+0x6c>)
 8021cca:	681b      	ldr	r3, [r3, #0]
 8021ccc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8021cd0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8021cd2:	bf00      	nop
 8021cd4:	3708      	adds	r7, #8
 8021cd6:	46bd      	mov	sp, r7
 8021cd8:	bd80      	pop	{r7, pc}
 8021cda:	bf00      	nop
 8021cdc:	20014368 	.word	0x20014368
 8021ce0:	2000026f 	.word	0x2000026f
 8021ce4:	200143b0 	.word	0x200143b0
 8021ce8:	20000270 	.word	0x20000270

08021cec <_ZN10LineSensor20StoreConsecutiveBuffEv>:

void LineSensor::StoreConsecutiveBuff()
{
 8021cec:	b480      	push	{r7}
 8021cee:	b085      	sub	sp, #20
 8021cf0:	af00      	add	r7, sp, #0
 8021cf2:	6078      	str	r0, [r7, #4]
    static uint8_t times = 0;

    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021cf4:	2300      	movs	r3, #0
 8021cf6:	60fb      	str	r3, [r7, #12]
 8021cf8:	68fb      	ldr	r3, [r7, #12]
 8021cfa:	2b0d      	cmp	r3, #13
 8021cfc:	dc16      	bgt.n	8021d2c <_ZN10LineSensor20StoreConsecutiveBuffEv+0x40>
    {
        consecutive_line_sensors_buff_[times][i] = line_sensors_buff_[i];
 8021cfe:	4b15      	ldr	r3, [pc, #84]	; (8021d54 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021d00:	781b      	ldrb	r3, [r3, #0]
 8021d02:	4619      	mov	r1, r3
 8021d04:	687b      	ldr	r3, [r7, #4]
 8021d06:	68fa      	ldr	r2, [r7, #12]
 8021d08:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8021d0c:	687a      	ldr	r2, [r7, #4]
 8021d0e:	460b      	mov	r3, r1
 8021d10:	00db      	lsls	r3, r3, #3
 8021d12:	1a5b      	subs	r3, r3, r1
 8021d14:	005b      	lsls	r3, r3, #1
 8021d16:	68f9      	ldr	r1, [r7, #12]
 8021d18:	440b      	add	r3, r1
 8021d1a:	330c      	adds	r3, #12
 8021d1c:	005b      	lsls	r3, r3, #1
 8021d1e:	4413      	add	r3, r2
 8021d20:	4602      	mov	r2, r0
 8021d22:	809a      	strh	r2, [r3, #4]
    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021d24:	68fb      	ldr	r3, [r7, #12]
 8021d26:	3301      	adds	r3, #1
 8021d28:	60fb      	str	r3, [r7, #12]
 8021d2a:	e7e5      	b.n	8021cf8 <_ZN10LineSensor20StoreConsecutiveBuffEv+0xc>
    }

    times++;
 8021d2c:	4b09      	ldr	r3, [pc, #36]	; (8021d54 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021d2e:	781b      	ldrb	r3, [r3, #0]
 8021d30:	3301      	adds	r3, #1
 8021d32:	b2da      	uxtb	r2, r3
 8021d34:	4b07      	ldr	r3, [pc, #28]	; (8021d54 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021d36:	701a      	strb	r2, [r3, #0]
    if(times >= CONSECUTIVE_TIMES) times = 0;
 8021d38:	4b06      	ldr	r3, [pc, #24]	; (8021d54 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021d3a:	781b      	ldrb	r3, [r3, #0]
 8021d3c:	2b09      	cmp	r3, #9
 8021d3e:	d902      	bls.n	8021d46 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x5a>
 8021d40:	4b04      	ldr	r3, [pc, #16]	; (8021d54 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021d42:	2200      	movs	r2, #0
 8021d44:	701a      	strb	r2, [r3, #0]
}
 8021d46:	bf00      	nop
 8021d48:	3714      	adds	r7, #20
 8021d4a:	46bd      	mov	sp, r7
 8021d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d50:	4770      	bx	lr
 8021d52:	bf00      	nop
 8021d54:	20000200 	.word	0x20000200

08021d58 <_ZN10LineSensor9MergeSortEPthh>:

void LineSensor::MergeSort(uint16_t array[], uint8_t first_index, uint8_t last_index)
{
 8021d58:	b5b0      	push	{r4, r5, r7, lr}
 8021d5a:	b088      	sub	sp, #32
 8021d5c:	af00      	add	r7, sp, #0
 8021d5e:	60f8      	str	r0, [r7, #12]
 8021d60:	60b9      	str	r1, [r7, #8]
 8021d62:	4611      	mov	r1, r2
 8021d64:	461a      	mov	r2, r3
 8021d66:	460b      	mov	r3, r1
 8021d68:	71fb      	strb	r3, [r7, #7]
 8021d6a:	4613      	mov	r3, r2
 8021d6c:	71bb      	strb	r3, [r7, #6]

    for(i = first_index; i <= last_index; i++)
    {
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
        else                                     array[i] = temp_array[right--];
    }
 8021d6e:	466b      	mov	r3, sp
 8021d70:	461d      	mov	r5, r3
    if(first_index >= last_index) return;
 8021d72:	79fa      	ldrb	r2, [r7, #7]
 8021d74:	79bb      	ldrb	r3, [r7, #6]
 8021d76:	429a      	cmp	r2, r3
 8021d78:	f080 80ba 	bcs.w	8021ef0 <_ZN10LineSensor9MergeSortEPthh+0x198>
    uint16_t temp_array[last_index+1];
 8021d7c:	79b8      	ldrb	r0, [r7, #6]
 8021d7e:	61b8      	str	r0, [r7, #24]
 8021d80:	4603      	mov	r3, r0
 8021d82:	3301      	adds	r3, #1
 8021d84:	4619      	mov	r1, r3
 8021d86:	f04f 0200 	mov.w	r2, #0
 8021d8a:	f04f 0300 	mov.w	r3, #0
 8021d8e:	f04f 0400 	mov.w	r4, #0
 8021d92:	0114      	lsls	r4, r2, #4
 8021d94:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8021d98:	010b      	lsls	r3, r1, #4
 8021d9a:	4603      	mov	r3, r0
 8021d9c:	3301      	adds	r3, #1
 8021d9e:	4619      	mov	r1, r3
 8021da0:	f04f 0200 	mov.w	r2, #0
 8021da4:	f04f 0300 	mov.w	r3, #0
 8021da8:	f04f 0400 	mov.w	r4, #0
 8021dac:	0114      	lsls	r4, r2, #4
 8021dae:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8021db2:	010b      	lsls	r3, r1, #4
 8021db4:	4603      	mov	r3, r0
 8021db6:	3301      	adds	r3, #1
 8021db8:	005b      	lsls	r3, r3, #1
 8021dba:	3301      	adds	r3, #1
 8021dbc:	3307      	adds	r3, #7
 8021dbe:	08db      	lsrs	r3, r3, #3
 8021dc0:	00db      	lsls	r3, r3, #3
 8021dc2:	ebad 0d03 	sub.w	sp, sp, r3
 8021dc6:	466b      	mov	r3, sp
 8021dc8:	3301      	adds	r3, #1
 8021dca:	085b      	lsrs	r3, r3, #1
 8021dcc:	005b      	lsls	r3, r3, #1
 8021dce:	617b      	str	r3, [r7, #20]
    middle = (first_index + last_index) / 2;
 8021dd0:	79fa      	ldrb	r2, [r7, #7]
 8021dd2:	79bb      	ldrb	r3, [r7, #6]
 8021dd4:	4413      	add	r3, r2
 8021dd6:	0fda      	lsrs	r2, r3, #31
 8021dd8:	4413      	add	r3, r2
 8021dda:	105b      	asrs	r3, r3, #1
 8021ddc:	74fb      	strb	r3, [r7, #19]
    MergeSort(array, first_index, middle);
 8021dde:	7cfb      	ldrb	r3, [r7, #19]
 8021de0:	79fa      	ldrb	r2, [r7, #7]
 8021de2:	68b9      	ldr	r1, [r7, #8]
 8021de4:	68f8      	ldr	r0, [r7, #12]
 8021de6:	f7ff ffb7 	bl	8021d58 <_ZN10LineSensor9MergeSortEPthh>
    MergeSort(array, middle+1, last_index);
 8021dea:	7cfb      	ldrb	r3, [r7, #19]
 8021dec:	3301      	adds	r3, #1
 8021dee:	b2da      	uxtb	r2, r3
 8021df0:	79bb      	ldrb	r3, [r7, #6]
 8021df2:	68b9      	ldr	r1, [r7, #8]
 8021df4:	68f8      	ldr	r0, [r7, #12]
 8021df6:	f7ff ffaf 	bl	8021d58 <_ZN10LineSensor9MergeSortEPthh>
    for(i = middle; i >= first_index; i--)
 8021dfa:	7cfb      	ldrb	r3, [r7, #19]
 8021dfc:	77bb      	strb	r3, [r7, #30]
 8021dfe:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021e02:	79fb      	ldrb	r3, [r7, #7]
 8021e04:	429a      	cmp	r2, r3
 8021e06:	db11      	blt.n	8021e2c <_ZN10LineSensor9MergeSortEPthh+0xd4>
        temp_array[i] = array[i];
 8021e08:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021e0c:	005b      	lsls	r3, r3, #1
 8021e0e:	68ba      	ldr	r2, [r7, #8]
 8021e10:	4413      	add	r3, r2
 8021e12:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021e16:	8819      	ldrh	r1, [r3, #0]
 8021e18:	697b      	ldr	r3, [r7, #20]
 8021e1a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle; i >= first_index; i--)
 8021e1e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021e22:	b2db      	uxtb	r3, r3
 8021e24:	3b01      	subs	r3, #1
 8021e26:	b2db      	uxtb	r3, r3
 8021e28:	77bb      	strb	r3, [r7, #30]
 8021e2a:	e7e8      	b.n	8021dfe <_ZN10LineSensor9MergeSortEPthh+0xa6>
    for(i = middle+1; i <= last_index; i++)
 8021e2c:	7cfb      	ldrb	r3, [r7, #19]
 8021e2e:	3301      	adds	r3, #1
 8021e30:	b2db      	uxtb	r3, r3
 8021e32:	77bb      	strb	r3, [r7, #30]
 8021e34:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021e38:	79bb      	ldrb	r3, [r7, #6]
 8021e3a:	429a      	cmp	r2, r3
 8021e3c:	dc17      	bgt.n	8021e6e <_ZN10LineSensor9MergeSortEPthh+0x116>
        temp_array[last_index - (i - (middle+1))] = array[i];
 8021e3e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021e42:	005b      	lsls	r3, r3, #1
 8021e44:	68ba      	ldr	r2, [r7, #8]
 8021e46:	4413      	add	r3, r2
 8021e48:	79b9      	ldrb	r1, [r7, #6]
 8021e4a:	f997 001e 	ldrsb.w	r0, [r7, #30]
 8021e4e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8021e52:	3201      	adds	r2, #1
 8021e54:	1a82      	subs	r2, r0, r2
 8021e56:	1a8a      	subs	r2, r1, r2
 8021e58:	8819      	ldrh	r1, [r3, #0]
 8021e5a:	697b      	ldr	r3, [r7, #20]
 8021e5c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle+1; i <= last_index; i++)
 8021e60:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021e64:	b2db      	uxtb	r3, r3
 8021e66:	3301      	adds	r3, #1
 8021e68:	b2db      	uxtb	r3, r3
 8021e6a:	77bb      	strb	r3, [r7, #30]
 8021e6c:	e7e2      	b.n	8021e34 <_ZN10LineSensor9MergeSortEPthh+0xdc>
    left  = first_index;
 8021e6e:	79fb      	ldrb	r3, [r7, #7]
 8021e70:	77fb      	strb	r3, [r7, #31]
    right = last_index;
 8021e72:	79bb      	ldrb	r3, [r7, #6]
 8021e74:	777b      	strb	r3, [r7, #29]
    for(i = first_index; i <= last_index; i++)
 8021e76:	79fb      	ldrb	r3, [r7, #7]
 8021e78:	77bb      	strb	r3, [r7, #30]
 8021e7a:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021e7e:	79bb      	ldrb	r3, [r7, #6]
 8021e80:	429a      	cmp	r2, r3
 8021e82:	dc33      	bgt.n	8021eec <_ZN10LineSensor9MergeSortEPthh+0x194>
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
 8021e84:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8021e88:	697b      	ldr	r3, [r7, #20]
 8021e8a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8021e8e:	f997 101d 	ldrsb.w	r1, [r7, #29]
 8021e92:	697b      	ldr	r3, [r7, #20]
 8021e94:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8021e98:	429a      	cmp	r2, r3
 8021e9a:	d210      	bcs.n	8021ebe <_ZN10LineSensor9MergeSortEPthh+0x166>
 8021e9c:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8021ea0:	b2d3      	uxtb	r3, r2
 8021ea2:	3301      	adds	r3, #1
 8021ea4:	b2db      	uxtb	r3, r3
 8021ea6:	77fb      	strb	r3, [r7, #31]
 8021ea8:	4611      	mov	r1, r2
 8021eaa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021eae:	005b      	lsls	r3, r3, #1
 8021eb0:	68ba      	ldr	r2, [r7, #8]
 8021eb2:	4413      	add	r3, r2
 8021eb4:	697a      	ldr	r2, [r7, #20]
 8021eb6:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8021eba:	801a      	strh	r2, [r3, #0]
 8021ebc:	e00f      	b.n	8021ede <_ZN10LineSensor9MergeSortEPthh+0x186>
        else                                     array[i] = temp_array[right--];
 8021ebe:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8021ec2:	b2d3      	uxtb	r3, r2
 8021ec4:	3b01      	subs	r3, #1
 8021ec6:	b2db      	uxtb	r3, r3
 8021ec8:	777b      	strb	r3, [r7, #29]
 8021eca:	4611      	mov	r1, r2
 8021ecc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021ed0:	005b      	lsls	r3, r3, #1
 8021ed2:	68ba      	ldr	r2, [r7, #8]
 8021ed4:	4413      	add	r3, r2
 8021ed6:	697a      	ldr	r2, [r7, #20]
 8021ed8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8021edc:	801a      	strh	r2, [r3, #0]
    for(i = first_index; i <= last_index; i++)
 8021ede:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021ee2:	b2db      	uxtb	r3, r3
 8021ee4:	3301      	adds	r3, #1
 8021ee6:	b2db      	uxtb	r3, r3
 8021ee8:	77bb      	strb	r3, [r7, #30]
 8021eea:	e7c6      	b.n	8021e7a <_ZN10LineSensor9MergeSortEPthh+0x122>
 8021eec:	46ad      	mov	sp, r5
 8021eee:	e001      	b.n	8021ef4 <_ZN10LineSensor9MergeSortEPthh+0x19c>
    if(first_index >= last_index) return;
 8021ef0:	bf00      	nop
 8021ef2:	46ad      	mov	sp, r5
}
 8021ef4:	3720      	adds	r7, #32
 8021ef6:	46bd      	mov	sp, r7
 8021ef8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08021efc <_ZN10LineSensor6UpdateEv>:

void LineSensor::Update()
{
 8021efc:	b590      	push	{r4, r7, lr}
 8021efe:	b08b      	sub	sp, #44	; 0x2c
 8021f00:	af00      	add	r7, sp, #0
 8021f02:	6078      	str	r0, [r7, #4]
    uint8_t i, j;
    uint16_t temp_array[CONSECUTIVE_TIMES];
    uint16_t median, max, min, normalized;
    bool emergency = true;
 8021f04:	2301      	movs	r3, #1
 8021f06:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021f0a:	2300      	movs	r3, #0
 8021f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021f10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021f14:	2b0d      	cmp	r3, #13
 8021f16:	f200 80c8 	bhi.w	80220aa <_ZN10LineSensor6UpdateEv+0x1ae>
    {
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021f1a:	2300      	movs	r3, #0
 8021f1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021f20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021f24:	2b09      	cmp	r3, #9
 8021f26:	d81b      	bhi.n	8021f60 <_ZN10LineSensor6UpdateEv+0x64>
        {
            temp_array[j] = consecutive_line_sensors_buff_[j][i];
 8021f28:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8021f2c:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8021f30:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8021f34:	6878      	ldr	r0, [r7, #4]
 8021f36:	4613      	mov	r3, r2
 8021f38:	00db      	lsls	r3, r3, #3
 8021f3a:	1a9b      	subs	r3, r3, r2
 8021f3c:	005b      	lsls	r3, r3, #1
 8021f3e:	4423      	add	r3, r4
 8021f40:	330c      	adds	r3, #12
 8021f42:	005b      	lsls	r3, r3, #1
 8021f44:	4403      	add	r3, r0
 8021f46:	889a      	ldrh	r2, [r3, #4]
 8021f48:	004b      	lsls	r3, r1, #1
 8021f4a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8021f4e:	440b      	add	r3, r1
 8021f50:	f823 2c20 	strh.w	r2, [r3, #-32]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021f54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021f58:	3301      	adds	r3, #1
 8021f5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021f5e:	e7df      	b.n	8021f20 <_ZN10LineSensor6UpdateEv+0x24>
        }

        MergeSort(temp_array, 0, CONSECUTIVE_TIMES-1);
 8021f60:	f107 0108 	add.w	r1, r7, #8
 8021f64:	2309      	movs	r3, #9
 8021f66:	2200      	movs	r2, #0
 8021f68:	6878      	ldr	r0, [r7, #4]
 8021f6a:	f7ff fef5 	bl	8021d58 <_ZN10LineSensor9MergeSortEPthh>
        median = temp_array[HALF_CONSECUTIVE_TIMES];
 8021f6e:	8a7b      	ldrh	r3, [r7, #18]
 8021f70:	83fb      	strh	r3, [r7, #30]

#ifdef DEBUG_MODE
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021f72:	2300      	movs	r3, #0
 8021f74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021f78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021f7c:	2b09      	cmp	r3, #9
 8021f7e:	d81a      	bhi.n	8021fb6 <_ZN10LineSensor6UpdateEv+0xba>
        {
            g_consecutive_line_buff[i][j] = temp_array[j];
 8021f80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021f84:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021f88:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8021f8c:	005b      	lsls	r3, r3, #1
 8021f8e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8021f92:	4403      	add	r3, r0
 8021f94:	f833 4c20 	ldrh.w	r4, [r3, #-32]
 8021f98:	4848      	ldr	r0, [pc, #288]	; (80220bc <_ZN10LineSensor6UpdateEv+0x1c0>)
 8021f9a:	4613      	mov	r3, r2
 8021f9c:	009b      	lsls	r3, r3, #2
 8021f9e:	4413      	add	r3, r2
 8021fa0:	005b      	lsls	r3, r3, #1
 8021fa2:	440b      	add	r3, r1
 8021fa4:	4622      	mov	r2, r4
 8021fa6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021faa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021fae:	3301      	adds	r3, #1
 8021fb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021fb4:	e7e0      	b.n	8021f78 <_ZN10LineSensor6UpdateEv+0x7c>
        }
#endif // DEBUG_MODE

        max = max_line_sensors_valu_[i];
 8021fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021fba:	687a      	ldr	r2, [r7, #4]
 8021fbc:	3398      	adds	r3, #152	; 0x98
 8021fbe:	005b      	lsls	r3, r3, #1
 8021fc0:	4413      	add	r3, r2
 8021fc2:	889b      	ldrh	r3, [r3, #4]
 8021fc4:	84bb      	strh	r3, [r7, #36]	; 0x24
        min = min_line_sensors_valu_[i];
 8021fc6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021fca:	687b      	ldr	r3, [r7, #4]
 8021fcc:	32a8      	adds	r2, #168	; 0xa8
 8021fce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8021fd2:	847b      	strh	r3, [r7, #34]	; 0x22
        if(max < median || max == 0) max = median;
 8021fd4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021fd6:	8bfb      	ldrh	r3, [r7, #30]
 8021fd8:	429a      	cmp	r2, r3
 8021fda:	d302      	bcc.n	8021fe2 <_ZN10LineSensor6UpdateEv+0xe6>
 8021fdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021fde:	2b00      	cmp	r3, #0
 8021fe0:	d101      	bne.n	8021fe6 <_ZN10LineSensor6UpdateEv+0xea>
 8021fe2:	8bfb      	ldrh	r3, [r7, #30]
 8021fe4:	84bb      	strh	r3, [r7, #36]	; 0x24
        if(min > median || min == 0) min = median;
 8021fe6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8021fe8:	8bfb      	ldrh	r3, [r7, #30]
 8021fea:	429a      	cmp	r2, r3
 8021fec:	d802      	bhi.n	8021ff4 <_ZN10LineSensor6UpdateEv+0xf8>
 8021fee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021ff0:	2b00      	cmp	r3, #0
 8021ff2:	d101      	bne.n	8021ff8 <_ZN10LineSensor6UpdateEv+0xfc>
 8021ff4:	8bfb      	ldrh	r3, [r7, #30]
 8021ff6:	847b      	strh	r3, [r7, #34]	; 0x22
        max_line_sensors_valu_[i] = max;
 8021ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021ffc:	687a      	ldr	r2, [r7, #4]
 8021ffe:	3398      	adds	r3, #152	; 0x98
 8022000:	005b      	lsls	r3, r3, #1
 8022002:	4413      	add	r3, r2
 8022004:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8022006:	809a      	strh	r2, [r3, #4]
        min_line_sensors_valu_[i] = min;
 8022008:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802200c:	687b      	ldr	r3, [r7, #4]
 802200e:	32a8      	adds	r2, #168	; 0xa8
 8022010:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8022012:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

#ifdef DEBUG_MODE
        g_max_line_valu[i] = max_line_sensors_valu_[i];
 8022016:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802201a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802201e:	6879      	ldr	r1, [r7, #4]
 8022020:	3398      	adds	r3, #152	; 0x98
 8022022:	005b      	lsls	r3, r3, #1
 8022024:	440b      	add	r3, r1
 8022026:	8899      	ldrh	r1, [r3, #4]
 8022028:	4b25      	ldr	r3, [pc, #148]	; (80220c0 <_ZN10LineSensor6UpdateEv+0x1c4>)
 802202a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        g_min_line_valu[i] = min_line_sensors_valu_[i];
 802202e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8022032:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022036:	687a      	ldr	r2, [r7, #4]
 8022038:	31a8      	adds	r1, #168	; 0xa8
 802203a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 802203e:	4a21      	ldr	r2, [pc, #132]	; (80220c4 <_ZN10LineSensor6UpdateEv+0x1c8>)
 8022040:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#endif // DEBUG_MODE

        if(max > min)
 8022044:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8022046:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022048:	429a      	cmp	r2, r3
 802204a:	d928      	bls.n	802209e <_ZN10LineSensor6UpdateEv+0x1a2>
        {
            normalized = MAX_NORMALIZED_VALU * (median - min) / (max - min);
 802204c:	8bfa      	ldrh	r2, [r7, #30]
 802204e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022050:	1ad3      	subs	r3, r2, r3
 8022052:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8022056:	fb02 f203 	mul.w	r2, r2, r3
 802205a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 802205c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802205e:	1acb      	subs	r3, r1, r3
 8022060:	fb92 f3f3 	sdiv	r3, r2, r3
 8022064:	83bb      	strh	r3, [r7, #28]
            line_sensors_valu_[i] = normalized;
 8022066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802206a:	687a      	ldr	r2, [r7, #4]
 802206c:	33b4      	adds	r3, #180	; 0xb4
 802206e:	005b      	lsls	r3, r3, #1
 8022070:	4413      	add	r3, r2
 8022072:	8bba      	ldrh	r2, [r7, #28]
 8022074:	809a      	strh	r2, [r3, #4]

#ifdef DEBUG_MODE
            g_line_valu[i] = line_sensors_valu_[i];
 8022076:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802207a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802207e:	6879      	ldr	r1, [r7, #4]
 8022080:	33b4      	adds	r3, #180	; 0xb4
 8022082:	005b      	lsls	r3, r3, #1
 8022084:	440b      	add	r3, r1
 8022086:	8899      	ldrh	r1, [r3, #4]
 8022088:	4b0f      	ldr	r3, [pc, #60]	; (80220c8 <_ZN10LineSensor6UpdateEv+0x1cc>)
 802208a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
#endif // DEBUG_MODE

            if(normalized < EMERGENCY_STOP_BORDER) emergency = false;
 802208e:	8bbb      	ldrh	r3, [r7, #28]
 8022090:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8022094:	4293      	cmp	r3, r2
 8022096:	d802      	bhi.n	802209e <_ZN10LineSensor6UpdateEv+0x1a2>
 8022098:	2300      	movs	r3, #0
 802209a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 802209e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80220a2:	3301      	adds	r3, #1
 80220a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80220a8:	e732      	b.n	8021f10 <_ZN10LineSensor6UpdateEv+0x14>
        }
    }
    emergency_stop_flag_ = emergency;
 80220aa:	687b      	ldr	r3, [r7, #4]
 80220ac:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80220b0:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
}
 80220b4:	bf00      	nop
 80220b6:	372c      	adds	r7, #44	; 0x2c
 80220b8:	46bd      	mov	sp, r7
 80220ba:	bd90      	pop	{r4, r7, pc}
 80220bc:	20000278 	.word	0x20000278
 80220c0:	20000390 	.word	0x20000390
 80220c4:	200003ac 	.word	0x200003ac
 80220c8:	200003c8 	.word	0x200003c8

080220cc <_ZN10LineSensor19LeftRightDifferenceEv>:

float LineSensor::LeftRightDifference()
{
 80220cc:	b5b0      	push	{r4, r5, r7, lr}
 80220ce:	b086      	sub	sp, #24
 80220d0:	af00      	add	r7, sp, #0
 80220d2:	6078      	str	r0, [r7, #4]
    uint8_t i;
    uint32_t left = 0, right = 0;
 80220d4:	2300      	movs	r3, #0
 80220d6:	613b      	str	r3, [r7, #16]
 80220d8:	2300      	movs	r3, #0
 80220da:	60fb      	str	r3, [r7, #12]

    for(i = 0; i < HALF_NUM_OF_LINE_SENSORS; i++)
 80220dc:	2300      	movs	r3, #0
 80220de:	75fb      	strb	r3, [r7, #23]
 80220e0:	7dfb      	ldrb	r3, [r7, #23]
 80220e2:	2b06      	cmp	r3, #6
 80220e4:	d80d      	bhi.n	8022102 <_ZN10LineSensor19LeftRightDifferenceEv+0x36>
    {
        left += line_sensors_valu_[i];
 80220e6:	7dfb      	ldrb	r3, [r7, #23]
 80220e8:	687a      	ldr	r2, [r7, #4]
 80220ea:	33b4      	adds	r3, #180	; 0xb4
 80220ec:	005b      	lsls	r3, r3, #1
 80220ee:	4413      	add	r3, r2
 80220f0:	889b      	ldrh	r3, [r3, #4]
 80220f2:	461a      	mov	r2, r3
 80220f4:	693b      	ldr	r3, [r7, #16]
 80220f6:	4413      	add	r3, r2
 80220f8:	613b      	str	r3, [r7, #16]
    for(i = 0; i < HALF_NUM_OF_LINE_SENSORS; i++)
 80220fa:	7dfb      	ldrb	r3, [r7, #23]
 80220fc:	3301      	adds	r3, #1
 80220fe:	75fb      	strb	r3, [r7, #23]
 8022100:	e7ee      	b.n	80220e0 <_ZN10LineSensor19LeftRightDifferenceEv+0x14>
    }
    for(i = HALF_NUM_OF_LINE_SENSORS; i < NUM_OF_LINE_SENSORS; i++)
 8022102:	2307      	movs	r3, #7
 8022104:	75fb      	strb	r3, [r7, #23]
 8022106:	7dfb      	ldrb	r3, [r7, #23]
 8022108:	2b0d      	cmp	r3, #13
 802210a:	d80d      	bhi.n	8022128 <_ZN10LineSensor19LeftRightDifferenceEv+0x5c>
    {
        right += line_sensors_valu_[i];
 802210c:	7dfb      	ldrb	r3, [r7, #23]
 802210e:	687a      	ldr	r2, [r7, #4]
 8022110:	33b4      	adds	r3, #180	; 0xb4
 8022112:	005b      	lsls	r3, r3, #1
 8022114:	4413      	add	r3, r2
 8022116:	889b      	ldrh	r3, [r3, #4]
 8022118:	461a      	mov	r2, r3
 802211a:	68fb      	ldr	r3, [r7, #12]
 802211c:	4413      	add	r3, r2
 802211e:	60fb      	str	r3, [r7, #12]
    for(i = HALF_NUM_OF_LINE_SENSORS; i < NUM_OF_LINE_SENSORS; i++)
 8022120:	7dfb      	ldrb	r3, [r7, #23]
 8022122:	3301      	adds	r3, #1
 8022124:	75fb      	strb	r3, [r7, #23]
 8022126:	e7ee      	b.n	8022106 <_ZN10LineSensor19LeftRightDifferenceEv+0x3a>
    }

#ifdef DEBUG_MODE
    g_line_left = left;
 8022128:	4a11      	ldr	r2, [pc, #68]	; (8022170 <_ZN10LineSensor19LeftRightDifferenceEv+0xa4>)
 802212a:	693b      	ldr	r3, [r7, #16]
 802212c:	6013      	str	r3, [r2, #0]
    g_line_right = right;
 802212e:	4a11      	ldr	r2, [pc, #68]	; (8022174 <_ZN10LineSensor19LeftRightDifferenceEv+0xa8>)
 8022130:	68fb      	ldr	r3, [r7, #12]
 8022132:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    float difference = right * LINE_SENSOR_CORRECTION - left;
 8022134:	68f8      	ldr	r0, [r7, #12]
 8022136:	f7fe f91d 	bl	8020374 <__aeabi_ui2d>
 802213a:	4604      	mov	r4, r0
 802213c:	460d      	mov	r5, r1
 802213e:	6938      	ldr	r0, [r7, #16]
 8022140:	f7fe f918 	bl	8020374 <__aeabi_ui2d>
 8022144:	4602      	mov	r2, r0
 8022146:	460b      	mov	r3, r1
 8022148:	4620      	mov	r0, r4
 802214a:	4629      	mov	r1, r5
 802214c:	f7fd ffd4 	bl	80200f8 <__aeabi_dsub>
 8022150:	4603      	mov	r3, r0
 8022152:	460c      	mov	r4, r1
 8022154:	4618      	mov	r0, r3
 8022156:	4621      	mov	r1, r4
 8022158:	f7fe fc5e 	bl	8020a18 <__aeabi_d2f>
 802215c:	4603      	mov	r3, r0
 802215e:	60bb      	str	r3, [r7, #8]

    return difference;
 8022160:	68bb      	ldr	r3, [r7, #8]
 8022162:	ee07 3a90 	vmov	s15, r3
}
 8022166:	eeb0 0a67 	vmov.f32	s0, s15
 802216a:	3718      	adds	r7, #24
 802216c:	46bd      	mov	sp, r7
 802216e:	bdb0      	pop	{r4, r5, r7, pc}
 8022170:	200003e4 	.word	0x200003e4
 8022174:	200003e8 	.word	0x200003e8

08022178 <_ZN10LineSensor20GetEmergencyStopFlagEv>:

bool LineSensor::GetEmergencyStopFlag()
{
 8022178:	b480      	push	{r7}
 802217a:	b083      	sub	sp, #12
 802217c:	af00      	add	r7, sp, #0
 802217e:	6078      	str	r0, [r7, #4]
    return emergency_stop_flag_;
 8022180:	687b      	ldr	r3, [r7, #4]
 8022182:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
}
 8022186:	4618      	mov	r0, r3
 8022188:	370c      	adds	r7, #12
 802218a:	46bd      	mov	sp, r7
 802218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022190:	4770      	bx	lr
	...

08022194 <_ZN10LineSensor16CheckCalibrationEv>:

bool LineSensor::CheckCalibration()
{
 8022194:	b480      	push	{r7}
 8022196:	b085      	sub	sp, #20
 8022198:	af00      	add	r7, sp, #0
 802219a:	6078      	str	r0, [r7, #4]
    static uint16_t timer = 0;
    static uint16_t pre_max[NUM_OF_LINE_SENSORS] = {0};
    static uint16_t pre_min[NUM_OF_LINE_SENSORS] = {0};
    uint16_t max, min;
    bool result = true;
 802219c:	2301      	movs	r3, #1
 802219e:	73fb      	strb	r3, [r7, #15]

    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 80221a0:	2300      	movs	r3, #0
 80221a2:	73bb      	strb	r3, [r7, #14]
 80221a4:	7bbb      	ldrb	r3, [r7, #14]
 80221a6:	2b0d      	cmp	r3, #13
 80221a8:	d82d      	bhi.n	8022206 <_ZN10LineSensor16CheckCalibrationEv+0x72>
    {
        max = max_line_sensors_valu_[i];
 80221aa:	7bbb      	ldrb	r3, [r7, #14]
 80221ac:	687a      	ldr	r2, [r7, #4]
 80221ae:	3398      	adds	r3, #152	; 0x98
 80221b0:	005b      	lsls	r3, r3, #1
 80221b2:	4413      	add	r3, r2
 80221b4:	889b      	ldrh	r3, [r3, #4]
 80221b6:	81bb      	strh	r3, [r7, #12]
        min = min_line_sensors_valu_[i];
 80221b8:	7bba      	ldrb	r2, [r7, #14]
 80221ba:	687b      	ldr	r3, [r7, #4]
 80221bc:	32a8      	adds	r2, #168	; 0xa8
 80221be:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80221c2:	817b      	strh	r3, [r7, #10]

        if(pre_max[i] != max)      result = false;
 80221c4:	7bbb      	ldrb	r3, [r7, #14]
 80221c6:	4a1e      	ldr	r2, [pc, #120]	; (8022240 <_ZN10LineSensor16CheckCalibrationEv+0xac>)
 80221c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80221cc:	89ba      	ldrh	r2, [r7, #12]
 80221ce:	429a      	cmp	r2, r3
 80221d0:	d002      	beq.n	80221d8 <_ZN10LineSensor16CheckCalibrationEv+0x44>
 80221d2:	2300      	movs	r3, #0
 80221d4:	73fb      	strb	r3, [r7, #15]
 80221d6:	e008      	b.n	80221ea <_ZN10LineSensor16CheckCalibrationEv+0x56>
        else if(pre_min[i] != min) result = false;
 80221d8:	7bbb      	ldrb	r3, [r7, #14]
 80221da:	4a1a      	ldr	r2, [pc, #104]	; (8022244 <_ZN10LineSensor16CheckCalibrationEv+0xb0>)
 80221dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80221e0:	897a      	ldrh	r2, [r7, #10]
 80221e2:	429a      	cmp	r2, r3
 80221e4:	d001      	beq.n	80221ea <_ZN10LineSensor16CheckCalibrationEv+0x56>
 80221e6:	2300      	movs	r3, #0
 80221e8:	73fb      	strb	r3, [r7, #15]

        pre_max[i] = max;
 80221ea:	7bbb      	ldrb	r3, [r7, #14]
 80221ec:	4914      	ldr	r1, [pc, #80]	; (8022240 <_ZN10LineSensor16CheckCalibrationEv+0xac>)
 80221ee:	89ba      	ldrh	r2, [r7, #12]
 80221f0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        pre_min[i] = min;
 80221f4:	7bbb      	ldrb	r3, [r7, #14]
 80221f6:	4913      	ldr	r1, [pc, #76]	; (8022244 <_ZN10LineSensor16CheckCalibrationEv+0xb0>)
 80221f8:	897a      	ldrh	r2, [r7, #10]
 80221fa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 80221fe:	7bbb      	ldrb	r3, [r7, #14]
 8022200:	3301      	adds	r3, #1
 8022202:	73bb      	strb	r3, [r7, #14]
 8022204:	e7ce      	b.n	80221a4 <_ZN10LineSensor16CheckCalibrationEv+0x10>
    }

    if(result)
 8022206:	7bfb      	ldrb	r3, [r7, #15]
 8022208:	2b00      	cmp	r3, #0
 802220a:	d00e      	beq.n	802222a <_ZN10LineSensor16CheckCalibrationEv+0x96>
    {
        if(timer < CALIBRATION_SUCCESS_TIME)
 802220c:	4b0e      	ldr	r3, [pc, #56]	; (8022248 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 802220e:	881b      	ldrh	r3, [r3, #0]
 8022210:	f240 52db 	movw	r2, #1499	; 0x5db
 8022214:	4293      	cmp	r3, r2
 8022216:	d80b      	bhi.n	8022230 <_ZN10LineSensor16CheckCalibrationEv+0x9c>
        {
            timer++;
 8022218:	4b0b      	ldr	r3, [pc, #44]	; (8022248 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 802221a:	881b      	ldrh	r3, [r3, #0]
 802221c:	3301      	adds	r3, #1
 802221e:	b29a      	uxth	r2, r3
 8022220:	4b09      	ldr	r3, [pc, #36]	; (8022248 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 8022222:	801a      	strh	r2, [r3, #0]
            result = false;
 8022224:	2300      	movs	r3, #0
 8022226:	73fb      	strb	r3, [r7, #15]
 8022228:	e002      	b.n	8022230 <_ZN10LineSensor16CheckCalibrationEv+0x9c>
        }
    }
    else timer = 0;
 802222a:	4b07      	ldr	r3, [pc, #28]	; (8022248 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 802222c:	2200      	movs	r2, #0
 802222e:	801a      	strh	r2, [r3, #0]
    
    return result;
 8022230:	7bfb      	ldrb	r3, [r7, #15]
}
 8022232:	4618      	mov	r0, r3
 8022234:	3714      	adds	r7, #20
 8022236:	46bd      	mov	sp, r7
 8022238:	f85d 7b04 	ldr.w	r7, [sp], #4
 802223c:	4770      	bx	lr
 802223e:	bf00      	nop
 8022240:	20000204 	.word	0x20000204
 8022244:	20000220 	.word	0x20000220
 8022248:	20000202 	.word	0x20000202

0802224c <_ZN9LineTraceC1EP10LineSensor>:
#include "line_trace.hpp"

LineTrace::LineTrace(LineSensor *line_sensor) : integral_error_(0)
 802224c:	b480      	push	{r7}
 802224e:	b083      	sub	sp, #12
 8022250:	af00      	add	r7, sp, #0
 8022252:	6078      	str	r0, [r7, #4]
 8022254:	6039      	str	r1, [r7, #0]
 8022256:	687b      	ldr	r3, [r7, #4]
 8022258:	f04f 0200 	mov.w	r2, #0
 802225c:	601a      	str	r2, [r3, #0]
{
    line_sensor_ = line_sensor;
 802225e:	687b      	ldr	r3, [r7, #4]
 8022260:	683a      	ldr	r2, [r7, #0]
 8022262:	605a      	str	r2, [r3, #4]
}
 8022264:	687b      	ldr	r3, [r7, #4]
 8022266:	4618      	mov	r0, r3
 8022268:	370c      	adds	r7, #12
 802226a:	46bd      	mov	sp, r7
 802226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022270:	4770      	bx	lr
	...

08022274 <_ZN9LineTrace13LineTraceOnlyEv>:

float LineTrace::LineTraceOnly()
{
 8022274:	b580      	push	{r7, lr}
 8022276:	b086      	sub	sp, #24
 8022278:	af00      	add	r7, sp, #0
 802227a:	6078      	str	r0, [r7, #4]
    float p_gain = LINE_ONLY_P_GAIN;
 802227c:	4b0b      	ldr	r3, [pc, #44]	; (80222ac <_ZN9LineTrace13LineTraceOnlyEv+0x38>)
 802227e:	617b      	str	r3, [r7, #20]
    float i_gain = LINE_ONLY_I_GAIN;
 8022280:	f04f 0300 	mov.w	r3, #0
 8022284:	613b      	str	r3, [r7, #16]
    float d_gain = LINE_ONLY_D_GAIN;
 8022286:	f04f 0300 	mov.w	r3, #0
 802228a:	60fb      	str	r3, [r7, #12]

    return PidControl(p_gain, i_gain, d_gain);
 802228c:	ed97 1a03 	vldr	s2, [r7, #12]
 8022290:	edd7 0a04 	vldr	s1, [r7, #16]
 8022294:	ed97 0a05 	vldr	s0, [r7, #20]
 8022298:	6878      	ldr	r0, [r7, #4]
 802229a:	f000 f851 	bl	8022340 <_ZN9LineTrace10PidControlEfff>
 802229e:	eef0 7a40 	vmov.f32	s15, s0
}
 80222a2:	eeb0 0a67 	vmov.f32	s0, s15
 80222a6:	3718      	adds	r7, #24
 80222a8:	46bd      	mov	sp, r7
 80222aa:	bd80      	pop	{r7, pc}
 80222ac:	38d1b717 	.word	0x38d1b717

080222b0 <_ZN9LineTrace16DeterminePidGainEf>:

float LineTrace::DeterminePidGain(float target_velocity)
{
 80222b0:	b580      	push	{r7, lr}
 80222b2:	b086      	sub	sp, #24
 80222b4:	af00      	add	r7, sp, #0
 80222b6:	6078      	str	r0, [r7, #4]
 80222b8:	ed87 0a00 	vstr	s0, [r7]
    float p_gain, i_gain, d_gain;

    if(target_velocity < TARGET_VELOCITY_0)
 80222bc:	edd7 7a00 	vldr	s15, [r7]
 80222c0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80222c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80222c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80222cc:	d507      	bpl.n	80222de <_ZN9LineTrace16DeterminePidGainEf+0x2e>
    {
        p_gain = LINE_P_GAIN_0;
 80222ce:	4b1a      	ldr	r3, [pc, #104]	; (8022338 <_ZN9LineTrace16DeterminePidGainEf+0x88>)
 80222d0:	617b      	str	r3, [r7, #20]
        i_gain = LINE_I_GAIN_0;
 80222d2:	f04f 0300 	mov.w	r3, #0
 80222d6:	613b      	str	r3, [r7, #16]
        d_gain = LINE_D_GAIN_0;
 80222d8:	4b18      	ldr	r3, [pc, #96]	; (802233c <_ZN9LineTrace16DeterminePidGainEf+0x8c>)
 80222da:	60fb      	str	r3, [r7, #12]
 80222dc:	e01b      	b.n	8022316 <_ZN9LineTrace16DeterminePidGainEf+0x66>
    }
    else if(target_velocity < TARGET_VELOCITY_1)
 80222de:	edd7 7a00 	vldr	s15, [r7]
 80222e2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80222e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80222ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80222ee:	d509      	bpl.n	8022304 <_ZN9LineTrace16DeterminePidGainEf+0x54>
    {
        p_gain = LINE_P_GAIN_1;
 80222f0:	f04f 0300 	mov.w	r3, #0
 80222f4:	617b      	str	r3, [r7, #20]
        i_gain = LINE_I_GAIN_1;
 80222f6:	f04f 0300 	mov.w	r3, #0
 80222fa:	613b      	str	r3, [r7, #16]
        d_gain = LINE_D_GAIN_1;
 80222fc:	f04f 0300 	mov.w	r3, #0
 8022300:	60fb      	str	r3, [r7, #12]
 8022302:	e008      	b.n	8022316 <_ZN9LineTrace16DeterminePidGainEf+0x66>
    }
    else // Error handler
    {
        p_gain = 0;
 8022304:	f04f 0300 	mov.w	r3, #0
 8022308:	617b      	str	r3, [r7, #20]
        i_gain = 0;
 802230a:	f04f 0300 	mov.w	r3, #0
 802230e:	613b      	str	r3, [r7, #16]
        d_gain = 0;
 8022310:	f04f 0300 	mov.w	r3, #0
 8022314:	60fb      	str	r3, [r7, #12]
    }

    return PidControl(p_gain, i_gain, d_gain);
 8022316:	ed97 1a03 	vldr	s2, [r7, #12]
 802231a:	edd7 0a04 	vldr	s1, [r7, #16]
 802231e:	ed97 0a05 	vldr	s0, [r7, #20]
 8022322:	6878      	ldr	r0, [r7, #4]
 8022324:	f000 f80c 	bl	8022340 <_ZN9LineTrace10PidControlEfff>
 8022328:	eef0 7a40 	vmov.f32	s15, s0
}
 802232c:	eeb0 0a67 	vmov.f32	s0, s15
 8022330:	3718      	adds	r7, #24
 8022332:	46bd      	mov	sp, r7
 8022334:	bd80      	pop	{r7, pc}
 8022336:	bf00      	nop
 8022338:	3916feb5 	.word	0x3916feb5
 802233c:	3693a3b6 	.word	0x3693a3b6

08022340 <_ZN9LineTrace10PidControlEfff>:

float LineTrace::PidControl(float p_gain, float i_gain, float d_gain)
{
 8022340:	b590      	push	{r4, r7, lr}
 8022342:	b08b      	sub	sp, #44	; 0x2c
 8022344:	af00      	add	r7, sp, #0
 8022346:	60f8      	str	r0, [r7, #12]
 8022348:	ed87 0a02 	vstr	s0, [r7, #8]
 802234c:	edc7 0a01 	vstr	s1, [r7, #4]
 8022350:	ed87 1a00 	vstr	s2, [r7]
    static float pre_error = line_sensor_->LeftRightDifference();
 8022354:	4b52      	ldr	r3, [pc, #328]	; (80224a0 <_ZN9LineTrace10PidControlEfff+0x160>)
 8022356:	781b      	ldrb	r3, [r3, #0]
 8022358:	f3bf 8f5b 	dmb	ish
 802235c:	b2db      	uxtb	r3, r3
 802235e:	f003 0301 	and.w	r3, r3, #1
 8022362:	2b00      	cmp	r3, #0
 8022364:	bf0c      	ite	eq
 8022366:	2301      	moveq	r3, #1
 8022368:	2300      	movne	r3, #0
 802236a:	b2db      	uxtb	r3, r3
 802236c:	2b00      	cmp	r3, #0
 802236e:	d017      	beq.n	80223a0 <_ZN9LineTrace10PidControlEfff+0x60>
 8022370:	484b      	ldr	r0, [pc, #300]	; (80224a0 <_ZN9LineTrace10PidControlEfff+0x160>)
 8022372:	f008 f85f 	bl	802a434 <__cxa_guard_acquire>
 8022376:	4603      	mov	r3, r0
 8022378:	2b00      	cmp	r3, #0
 802237a:	bf14      	ite	ne
 802237c:	2301      	movne	r3, #1
 802237e:	2300      	moveq	r3, #0
 8022380:	b2db      	uxtb	r3, r3
 8022382:	2b00      	cmp	r3, #0
 8022384:	d00c      	beq.n	80223a0 <_ZN9LineTrace10PidControlEfff+0x60>
 8022386:	68fb      	ldr	r3, [r7, #12]
 8022388:	685b      	ldr	r3, [r3, #4]
 802238a:	4618      	mov	r0, r3
 802238c:	f7ff fe9e 	bl	80220cc <_ZN10LineSensor19LeftRightDifferenceEv>
 8022390:	eef0 7a40 	vmov.f32	s15, s0
 8022394:	4b43      	ldr	r3, [pc, #268]	; (80224a4 <_ZN9LineTrace10PidControlEfff+0x164>)
 8022396:	edc3 7a00 	vstr	s15, [r3]
 802239a:	4841      	ldr	r0, [pc, #260]	; (80224a0 <_ZN9LineTrace10PidControlEfff+0x160>)
 802239c:	f008 f856 	bl	802a44c <__cxa_guard_release>
    float error, differential_error, integral_error;
    float p, d, i;

    error = line_sensor_->LeftRightDifference();
 80223a0:	68fb      	ldr	r3, [r7, #12]
 80223a2:	685b      	ldr	r3, [r3, #4]
 80223a4:	4618      	mov	r0, r3
 80223a6:	f7ff fe91 	bl	80220cc <_ZN10LineSensor19LeftRightDifferenceEv>
 80223aa:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    differential_error = (error - pre_error) / TIM6_PERIOD_S;
 80223ae:	4b3d      	ldr	r3, [pc, #244]	; (80224a4 <_ZN9LineTrace10PidControlEfff+0x164>)
 80223b0:	edd3 7a00 	vldr	s15, [r3]
 80223b4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80223b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80223bc:	ee17 0a90 	vmov	r0, s15
 80223c0:	f7fd fffa 	bl	80203b8 <__aeabi_f2d>
 80223c4:	a334      	add	r3, pc, #208	; (adr r3, 8022498 <_ZN9LineTrace10PidControlEfff+0x158>)
 80223c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223ca:	f7fe f977 	bl	80206bc <__aeabi_ddiv>
 80223ce:	4603      	mov	r3, r0
 80223d0:	460c      	mov	r4, r1
 80223d2:	4618      	mov	r0, r3
 80223d4:	4621      	mov	r1, r4
 80223d6:	f7fe fb1f 	bl	8020a18 <__aeabi_d2f>
 80223da:	4603      	mov	r3, r0
 80223dc:	623b      	str	r3, [r7, #32]
    integral_error = (error + pre_error) / 2.0 * TIM6_PERIOD_S;
 80223de:	4b31      	ldr	r3, [pc, #196]	; (80224a4 <_ZN9LineTrace10PidControlEfff+0x164>)
 80223e0:	ed93 7a00 	vldr	s14, [r3]
 80223e4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80223e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80223ec:	ee17 0a90 	vmov	r0, s15
 80223f0:	f7fd ffe2 	bl	80203b8 <__aeabi_f2d>
 80223f4:	f04f 0200 	mov.w	r2, #0
 80223f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80223fc:	f7fe f95e 	bl	80206bc <__aeabi_ddiv>
 8022400:	4603      	mov	r3, r0
 8022402:	460c      	mov	r4, r1
 8022404:	4618      	mov	r0, r3
 8022406:	4621      	mov	r1, r4
 8022408:	a323      	add	r3, pc, #140	; (adr r3, 8022498 <_ZN9LineTrace10PidControlEfff+0x158>)
 802240a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802240e:	f7fe f82b 	bl	8020468 <__aeabi_dmul>
 8022412:	4603      	mov	r3, r0
 8022414:	460c      	mov	r4, r1
 8022416:	4618      	mov	r0, r3
 8022418:	4621      	mov	r1, r4
 802241a:	f7fe fafd 	bl	8020a18 <__aeabi_d2f>
 802241e:	4603      	mov	r3, r0
 8022420:	61fb      	str	r3, [r7, #28]
    SetIntegralError(integral_error);
 8022422:	ed97 0a07 	vldr	s0, [r7, #28]
 8022426:	68f8      	ldr	r0, [r7, #12]
 8022428:	f000 f844 	bl	80224b4 <_ZN9LineTrace16SetIntegralErrorEf>

    p = p_gain * error;
 802242c:	ed97 7a02 	vldr	s14, [r7, #8]
 8022430:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8022434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022438:	edc7 7a06 	vstr	s15, [r7, #24]
    d = d_gain * differential_error;
 802243c:	ed97 7a00 	vldr	s14, [r7]
 8022440:	edd7 7a08 	vldr	s15, [r7, #32]
 8022444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022448:	edc7 7a05 	vstr	s15, [r7, #20]
    i = i_gain * integral_error_;
 802244c:	68fb      	ldr	r3, [r7, #12]
 802244e:	edd3 7a00 	vldr	s15, [r3]
 8022452:	ed97 7a01 	vldr	s14, [r7, #4]
 8022456:	ee67 7a27 	vmul.f32	s15, s14, s15
 802245a:	edc7 7a04 	vstr	s15, [r7, #16]

#ifdef DEBUG_MODE
    g_trace_p = p;
 802245e:	4a12      	ldr	r2, [pc, #72]	; (80224a8 <_ZN9LineTrace10PidControlEfff+0x168>)
 8022460:	69bb      	ldr	r3, [r7, #24]
 8022462:	6013      	str	r3, [r2, #0]
    g_trace_d = d;
 8022464:	4a11      	ldr	r2, [pc, #68]	; (80224ac <_ZN9LineTrace10PidControlEfff+0x16c>)
 8022466:	697b      	ldr	r3, [r7, #20]
 8022468:	6013      	str	r3, [r2, #0]
    g_trace_i = i;
 802246a:	4a11      	ldr	r2, [pc, #68]	; (80224b0 <_ZN9LineTrace10PidControlEfff+0x170>)
 802246c:	693b      	ldr	r3, [r7, #16]
 802246e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    pre_error = error;
 8022470:	4a0c      	ldr	r2, [pc, #48]	; (80224a4 <_ZN9LineTrace10PidControlEfff+0x164>)
 8022472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022474:	6013      	str	r3, [r2, #0]

    return p + d + i;
 8022476:	ed97 7a06 	vldr	s14, [r7, #24]
 802247a:	edd7 7a05 	vldr	s15, [r7, #20]
 802247e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8022482:	edd7 7a04 	vldr	s15, [r7, #16]
 8022486:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 802248a:	eeb0 0a67 	vmov.f32	s0, s15
 802248e:	372c      	adds	r7, #44	; 0x2c
 8022490:	46bd      	mov	sp, r7
 8022492:	bd90      	pop	{r4, r7, pc}
 8022494:	f3af 8000 	nop.w
 8022498:	47ae147b 	.word	0x47ae147b
 802249c:	3f547ae1 	.word	0x3f547ae1
 80224a0:	20000240 	.word	0x20000240
 80224a4:	2000023c 	.word	0x2000023c
 80224a8:	20000438 	.word	0x20000438
 80224ac:	20000440 	.word	0x20000440
 80224b0:	2000043c 	.word	0x2000043c

080224b4 <_ZN9LineTrace16SetIntegralErrorEf>:

void LineTrace::SetIntegralError(float integral_error)
{
 80224b4:	b480      	push	{r7}
 80224b6:	b083      	sub	sp, #12
 80224b8:	af00      	add	r7, sp, #0
 80224ba:	6078      	str	r0, [r7, #4]
 80224bc:	ed87 0a00 	vstr	s0, [r7]
    integral_error_ += integral_error;
 80224c0:	687b      	ldr	r3, [r7, #4]
 80224c2:	ed93 7a00 	vldr	s14, [r3]
 80224c6:	edd7 7a00 	vldr	s15, [r7]
 80224ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80224ce:	687b      	ldr	r3, [r7, #4]
 80224d0:	edc3 7a00 	vstr	s15, [r3]
}
 80224d4:	bf00      	nop
 80224d6:	370c      	adds	r7, #12
 80224d8:	46bd      	mov	sp, r7
 80224da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224de:	4770      	bx	lr

080224e0 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 80224e0:	b480      	push	{r7}
 80224e2:	b083      	sub	sp, #12
 80224e4:	af00      	add	r7, sp, #0
 80224e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80224ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80224ee:	eef0 7ae7 	vabs.f32	s15, s15
 80224f2:	eeb0 0a67 	vmov.f32	s0, s15
 80224f6:	370c      	adds	r7, #12
 80224f8:	46bd      	mov	sp, r7
 80224fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224fe:	4770      	bx	lr

08022500 <_ZN6LoggerC1EP7EncoderP5FlashP3LedP3ImuP10SideSensor>:
#include "logger.hpp"
#include "declare_extern.h"
#include <math.h>

Logger::Logger(Encoder *encoder,
 8022500:	b480      	push	{r7}
 8022502:	b085      	sub	sp, #20
 8022504:	af00      	add	r7, sp, #0
 8022506:	60f8      	str	r0, [r7, #12]
 8022508:	60b9      	str	r1, [r7, #8]
 802250a:	607a      	str	r2, [r7, #4]
 802250c:	603b      	str	r3, [r7, #0]
                   , success_emergency_code_store_(false)
                   , logging_radian_buff_(0)
                   , loading_now_address_(0)
                   , uncorrected_address_buff_(0)
                   , logging_now_address_(0)
                   , target_velocity_(MIN_VELOCITY)
 802250e:	68fb      	ldr	r3, [r7, #12]
 8022510:	2200      	movs	r2, #0
 8022512:	701a      	strb	r2, [r3, #0]
 8022514:	68fb      	ldr	r3, [r7, #12]
 8022516:	2200      	movs	r2, #0
 8022518:	705a      	strb	r2, [r3, #1]
 802251a:	68fb      	ldr	r3, [r7, #12]
 802251c:	f04f 0200 	mov.w	r2, #0
 8022520:	605a      	str	r2, [r3, #4]
 8022522:	68fb      	ldr	r3, [r7, #12]
 8022524:	2200      	movs	r2, #0
 8022526:	811a      	strh	r2, [r3, #8]
 8022528:	68fb      	ldr	r3, [r7, #12]
 802252a:	2200      	movs	r2, #0
 802252c:	815a      	strh	r2, [r3, #10]
 802252e:	68fb      	ldr	r3, [r7, #12]
 8022530:	2200      	movs	r2, #0
 8022532:	819a      	strh	r2, [r3, #12]
 8022534:	68fb      	ldr	r3, [r7, #12]
 8022536:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 802253a:	611a      	str	r2, [r3, #16]
{
    encoder_ = encoder;
 802253c:	68fb      	ldr	r3, [r7, #12]
 802253e:	68ba      	ldr	r2, [r7, #8]
 8022540:	615a      	str	r2, [r3, #20]
    flash_ = flash;
 8022542:	68fb      	ldr	r3, [r7, #12]
 8022544:	687a      	ldr	r2, [r7, #4]
 8022546:	619a      	str	r2, [r3, #24]
    led_ = led;
 8022548:	68fb      	ldr	r3, [r7, #12]
 802254a:	683a      	ldr	r2, [r7, #0]
 802254c:	61da      	str	r2, [r3, #28]
    imu_ = imu;
 802254e:	68fb      	ldr	r3, [r7, #12]
 8022550:	69ba      	ldr	r2, [r7, #24]
 8022552:	621a      	str	r2, [r3, #32]
    side_sensor_ = side_sensor;
 8022554:	68fb      	ldr	r3, [r7, #12]
 8022556:	69fa      	ldr	r2, [r7, #28]
 8022558:	625a      	str	r2, [r3, #36]	; 0x24
}
 802255a:	68fb      	ldr	r3, [r7, #12]
 802255c:	4618      	mov	r0, r3
 802255e:	3714      	adds	r7, #20
 8022560:	46bd      	mov	sp, r7
 8022562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022566:	4770      	bx	lr

08022568 <_ZN6Logger7LoggingEv>:

void Logger::Logging()
{
 8022568:	b580      	push	{r7, lr}
 802256a:	b084      	sub	sp, #16
 802256c:	af00      	add	r7, sp, #0
 802256e:	6078      	str	r0, [r7, #4]
    float distance = encoder_->GetDistanceStack();
 8022570:	687b      	ldr	r3, [r7, #4]
 8022572:	695b      	ldr	r3, [r3, #20]
 8022574:	4618      	mov	r0, r3
 8022576:	f7fe fd0c 	bl	8020f92 <_ZN7Encoder16GetDistanceStackEv>
 802257a:	ed87 0a03 	vstr	s0, [r7, #12]
    if(distance < LOGGING_CONST_DISTANCE) return;
 802257e:	edd7 7a03 	vldr	s15, [r7, #12]
 8022582:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8022586:	eef4 7ac7 	vcmpe.f32	s15, s14
 802258a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802258e:	d43f      	bmi.n	8022610 <_ZN6Logger7LoggingEv+0xa8>
    encoder_->ResetDistanceStack();
 8022590:	687b      	ldr	r3, [r7, #4]
 8022592:	695b      	ldr	r3, [r3, #20]
 8022594:	4618      	mov	r0, r3
 8022596:	f7fe fcdf 	bl	8020f58 <_ZN7Encoder18ResetDistanceStackEv>

    uint8_t result = StoreDistanceLog(distance);
 802259a:	ed97 0a03 	vldr	s0, [r7, #12]
 802259e:	6878      	ldr	r0, [r7, #4]
 80225a0:	f000 f890 	bl	80226c4 <_ZN6Logger16StoreDistanceLogEf>
 80225a4:	4603      	mov	r3, r0
 80225a6:	72fb      	strb	r3, [r7, #11]
#ifdef DEBUG_MODE
    g_store_distance = result;
 80225a8:	4a1b      	ldr	r2, [pc, #108]	; (8022618 <_ZN6Logger7LoggingEv+0xb0>)
 80225aa:	7afb      	ldrb	r3, [r7, #11]
 80225ac:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE
    CheckLoggingSuccess(ERROR_CODE_STORE_DISTANCE, result);
 80225ae:	7afb      	ldrb	r3, [r7, #11]
 80225b0:	461a      	mov	r2, r3
 80225b2:	491a      	ldr	r1, [pc, #104]	; (802261c <_ZN6Logger7LoggingEv+0xb4>)
 80225b4:	6878      	ldr	r0, [r7, #4]
 80225b6:	f000 fa9d 	bl	8022af4 <_ZN6Logger19CheckLoggingSuccessEmh>

    result = StoreRadianLog();
 80225ba:	6878      	ldr	r0, [r7, #4]
 80225bc:	f000 f8c4 	bl	8022748 <_ZN6Logger14StoreRadianLogEv>
 80225c0:	4603      	mov	r3, r0
 80225c2:	72fb      	strb	r3, [r7, #11]
#ifdef DEBUG_MODE
    g_store_radian = result;
 80225c4:	4a16      	ldr	r2, [pc, #88]	; (8022620 <_ZN6Logger7LoggingEv+0xb8>)
 80225c6:	7afb      	ldrb	r3, [r7, #11]
 80225c8:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE
    CheckLoggingSuccess(ERROR_CODE_STORE_RADIAN, result);
 80225ca:	7afb      	ldrb	r3, [r7, #11]
 80225cc:	461a      	mov	r2, r3
 80225ce:	4915      	ldr	r1, [pc, #84]	; (8022624 <_ZN6Logger7LoggingEv+0xbc>)
 80225d0:	6878      	ldr	r0, [r7, #4]
 80225d2:	f000 fa8f 	bl	8022af4 <_ZN6Logger19CheckLoggingSuccessEmh>

    result = StoreVariousLog();
 80225d6:	6878      	ldr	r0, [r7, #4]
 80225d8:	f000 f954 	bl	8022884 <_ZN6Logger15StoreVariousLogEv>
 80225dc:	4603      	mov	r3, r0
 80225de:	72fb      	strb	r3, [r7, #11]
#ifdef DEBUG_MODE
    g_store_various = result;
 80225e0:	4a11      	ldr	r2, [pc, #68]	; (8022628 <_ZN6Logger7LoggingEv+0xc0>)
 80225e2:	7afb      	ldrb	r3, [r7, #11]
 80225e4:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE
    CheckLoggingSuccess(ERROR_CODE_STORE_VARIOUS, result);
 80225e6:	7afb      	ldrb	r3, [r7, #11]
 80225e8:	461a      	mov	r2, r3
 80225ea:	4910      	ldr	r1, [pc, #64]	; (802262c <_ZN6Logger7LoggingEv+0xc4>)
 80225ec:	6878      	ldr	r0, [r7, #4]
 80225ee:	f000 fa81 	bl	8022af4 <_ZN6Logger19CheckLoggingSuccessEmh>

    DistanceCorrection(distance);
 80225f2:	ed97 0a03 	vldr	s0, [r7, #12]
 80225f6:	6878      	ldr	r0, [r7, #4]
 80225f8:	f000 fa02 	bl	8022a00 <_ZN6Logger18DistanceCorrectionEf>

    LoggingAccelPosition();
 80225fc:	6878      	ldr	r0, [r7, #4]
 80225fe:	f000 facf 	bl	8022ba0 <_ZN6Logger20LoggingAccelPositionEv>

    logging_now_address_++;
 8022602:	687b      	ldr	r3, [r7, #4]
 8022604:	899b      	ldrh	r3, [r3, #12]
 8022606:	3301      	adds	r3, #1
 8022608:	b29a      	uxth	r2, r3
 802260a:	687b      	ldr	r3, [r7, #4]
 802260c:	819a      	strh	r2, [r3, #12]
 802260e:	e000      	b.n	8022612 <_ZN6Logger7LoggingEv+0xaa>
    if(distance < LOGGING_CONST_DISTANCE) return;
 8022610:	bf00      	nop
}
 8022612:	3710      	adds	r7, #16
 8022614:	46bd      	mov	sp, r7
 8022616:	bd80      	pop	{r7, pc}
 8022618:	20000269 	.word	0x20000269
 802261c:	08018000 	.word	0x08018000
 8022620:	2000026a 	.word	0x2000026a
 8022624:	08018100 	.word	0x08018100
 8022628:	2000026b 	.word	0x2000026b
 802262c:	08018200 	.word	0x08018200

08022630 <_ZN6Logger7RammingEv>:

#ifdef DEBUG_MODE
void Logger::Ramming()
{
 8022630:	b580      	push	{r7, lr}
 8022632:	b084      	sub	sp, #16
 8022634:	af00      	add	r7, sp, #0
 8022636:	6078      	str	r0, [r7, #4]
    float distance = encoder_->GetDistanceStack();
 8022638:	687b      	ldr	r3, [r7, #4]
 802263a:	695b      	ldr	r3, [r3, #20]
 802263c:	4618      	mov	r0, r3
 802263e:	f7fe fca8 	bl	8020f92 <_ZN7Encoder16GetDistanceStackEv>
 8022642:	ed87 0a03 	vstr	s0, [r7, #12]
    if(distance < LOGGING_CONST_DISTANCE) return;
 8022646:	edd7 7a03 	vldr	s15, [r7, #12]
 802264a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 802264e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022656:	d42b      	bmi.n	80226b0 <_ZN6Logger7RammingEv+0x80>
    encoder_->ResetDistanceStack();
 8022658:	687b      	ldr	r3, [r7, #4]
 802265a:	695b      	ldr	r3, [r3, #20]
 802265c:	4618      	mov	r0, r3
 802265e:	f7fe fc7b 	bl	8020f58 <_ZN7Encoder18ResetDistanceStackEv>

    static uint16_t index = 0;
    
    g_ram_distance[index] = distance;
 8022662:	4b15      	ldr	r3, [pc, #84]	; (80226b8 <_ZN6Logger7RammingEv+0x88>)
 8022664:	881b      	ldrh	r3, [r3, #0]
 8022666:	4a15      	ldr	r2, [pc, #84]	; (80226bc <_ZN6Logger7RammingEv+0x8c>)
 8022668:	009b      	lsls	r3, r3, #2
 802266a:	4413      	add	r3, r2
 802266c:	68fa      	ldr	r2, [r7, #12]
 802266e:	601a      	str	r2, [r3, #0]

    float radian = imu_->GetRadStackZ();
 8022670:	687b      	ldr	r3, [r7, #4]
 8022672:	6a1b      	ldr	r3, [r3, #32]
 8022674:	4618      	mov	r0, r3
 8022676:	f7ff f8f7 	bl	8021868 <_ZN3Imu12GetRadStackZEv>
 802267a:	ed87 0a02 	vstr	s0, [r7, #8]
    imu_->ClearRadStackZ();
 802267e:	687b      	ldr	r3, [r7, #4]
 8022680:	6a1b      	ldr	r3, [r3, #32]
 8022682:	4618      	mov	r0, r3
 8022684:	f7ff f8e2 	bl	802184c <_ZN3Imu14ClearRadStackZEv>
    g_ram_radian[index] = radian;
 8022688:	4b0b      	ldr	r3, [pc, #44]	; (80226b8 <_ZN6Logger7RammingEv+0x88>)
 802268a:	881b      	ldrh	r3, [r3, #0]
 802268c:	4a0c      	ldr	r2, [pc, #48]	; (80226c0 <_ZN6Logger7RammingEv+0x90>)
 802268e:	009b      	lsls	r3, r3, #2
 8022690:	4413      	add	r3, r2
 8022692:	68ba      	ldr	r2, [r7, #8]
 8022694:	601a      	str	r2, [r3, #0]

    if(index < 3100) index++;
 8022696:	4b08      	ldr	r3, [pc, #32]	; (80226b8 <_ZN6Logger7RammingEv+0x88>)
 8022698:	881b      	ldrh	r3, [r3, #0]
 802269a:	f640 421b 	movw	r2, #3099	; 0xc1b
 802269e:	4293      	cmp	r3, r2
 80226a0:	d807      	bhi.n	80226b2 <_ZN6Logger7RammingEv+0x82>
 80226a2:	4b05      	ldr	r3, [pc, #20]	; (80226b8 <_ZN6Logger7RammingEv+0x88>)
 80226a4:	881b      	ldrh	r3, [r3, #0]
 80226a6:	3301      	adds	r3, #1
 80226a8:	b29a      	uxth	r2, r3
 80226aa:	4b03      	ldr	r3, [pc, #12]	; (80226b8 <_ZN6Logger7RammingEv+0x88>)
 80226ac:	801a      	strh	r2, [r3, #0]
 80226ae:	e000      	b.n	80226b2 <_ZN6Logger7RammingEv+0x82>
    if(distance < LOGGING_CONST_DISTANCE) return;
 80226b0:	bf00      	nop
}
 80226b2:	3710      	adds	r7, #16
 80226b4:	46bd      	mov	sp, r7
 80226b6:	bd80      	pop	{r7, pc}
 80226b8:	20000244 	.word	0x20000244
 80226bc:	20014490 	.word	0x20014490
 80226c0:	20011220 	.word	0x20011220

080226c4 <_ZN6Logger16StoreDistanceLogEf>:
    if(now_address == logging_now_address_) return true;
    else return false;
}

uint8_t Logger::StoreDistanceLog(float distance)
{
 80226c4:	b580      	push	{r7, lr}
 80226c6:	b086      	sub	sp, #24
 80226c8:	af00      	add	r7, sp, #0
 80226ca:	6078      	str	r0, [r7, #4]
 80226cc:	ed87 0a00 	vstr	s0, [r7]
    uint32_t address = logging_now_address_ * 4 + HEAD_ADDRESS_BLOCK_A;
 80226d0:	687b      	ldr	r3, [r7, #4]
 80226d2:	899b      	ldrh	r3, [r3, #12]
 80226d4:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80226d8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80226dc:	009b      	lsls	r3, r3, #2
 80226de:	613b      	str	r3, [r7, #16]
    uint8_t result = 0;
 80226e0:	2300      	movs	r3, #0
 80226e2:	75fb      	strb	r3, [r7, #23]

    int32_t int_distance = distance * 100000;
 80226e4:	edd7 7a00 	vldr	s15, [r7]
 80226e8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8022744 <_ZN6Logger16StoreDistanceLogEf+0x80>
 80226ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80226f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80226f4:	ee17 3a90 	vmov	r3, s15
 80226f8:	60fb      	str	r3, [r7, #12]

    if(!flash_->CheckBlankWord(address, 1)) result = 0x02;
 80226fa:	687b      	ldr	r3, [r7, #4]
 80226fc:	699b      	ldr	r3, [r3, #24]
 80226fe:	2201      	movs	r2, #1
 8022700:	6939      	ldr	r1, [r7, #16]
 8022702:	4618      	mov	r0, r3
 8022704:	f7fe fdf7 	bl	80212f6 <_ZN5Flash14CheckBlankWordEmm>
 8022708:	4603      	mov	r3, r0
 802270a:	f083 0301 	eor.w	r3, r3, #1
 802270e:	b2db      	uxtb	r3, r3
 8022710:	2b00      	cmp	r3, #0
 8022712:	d002      	beq.n	802271a <_ZN6Logger16StoreDistanceLogEf+0x56>
 8022714:	2302      	movs	r3, #2
 8022716:	75fb      	strb	r3, [r7, #23]
 8022718:	e00f      	b.n	802273a <_ZN6Logger16StoreDistanceLogEf+0x76>
    else if(!flash_->StoreInt32(address, &int_distance, 1)) result = 0x03;
 802271a:	687b      	ldr	r3, [r7, #4]
 802271c:	6998      	ldr	r0, [r3, #24]
 802271e:	f107 020c 	add.w	r2, r7, #12
 8022722:	2301      	movs	r3, #1
 8022724:	6939      	ldr	r1, [r7, #16]
 8022726:	f7fe fd00 	bl	802112a <_ZN5Flash10StoreInt32EmPlm>
 802272a:	4603      	mov	r3, r0
 802272c:	f083 0301 	eor.w	r3, r3, #1
 8022730:	b2db      	uxtb	r3, r3
 8022732:	2b00      	cmp	r3, #0
 8022734:	d001      	beq.n	802273a <_ZN6Logger16StoreDistanceLogEf+0x76>
 8022736:	2303      	movs	r3, #3
 8022738:	75fb      	strb	r3, [r7, #23]

    return result;
 802273a:	7dfb      	ldrb	r3, [r7, #23]
}
 802273c:	4618      	mov	r0, r3
 802273e:	3718      	adds	r7, #24
 8022740:	46bd      	mov	sp, r7
 8022742:	bd80      	pop	{r7, pc}
 8022744:	47c35000 	.word	0x47c35000

08022748 <_ZN6Logger14StoreRadianLogEv>:

uint8_t Logger::StoreRadianLog()
{
 8022748:	b580      	push	{r7, lr}
 802274a:	b086      	sub	sp, #24
 802274c:	af00      	add	r7, sp, #0
 802274e:	6078      	str	r0, [r7, #4]
    uint32_t address = logging_now_address_ * 4 + HEAD_ADDRESS_BLOCK_B;
 8022750:	687b      	ldr	r3, [r7, #4]
 8022752:	899b      	ldrh	r3, [r3, #12]
 8022754:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8022758:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 802275c:	009b      	lsls	r3, r3, #2
 802275e:	613b      	str	r3, [r7, #16]
    uint8_t result = 0;
 8022760:	2300      	movs	r3, #0
 8022762:	75fb      	strb	r3, [r7, #23]

    float radian = imu_->GetRadStackZ();
 8022764:	687b      	ldr	r3, [r7, #4]
 8022766:	6a1b      	ldr	r3, [r3, #32]
 8022768:	4618      	mov	r0, r3
 802276a:	f7ff f87d 	bl	8021868 <_ZN3Imu12GetRadStackZEv>
 802276e:	ed87 0a03 	vstr	s0, [r7, #12]
    imu_->ClearRadStackZ();
 8022772:	687b      	ldr	r3, [r7, #4]
 8022774:	6a1b      	ldr	r3, [r3, #32]
 8022776:	4618      	mov	r0, r3
 8022778:	f7ff f868 	bl	802184c <_ZN3Imu14ClearRadStackZEv>
    logging_radian_buff_ = radian;
 802277c:	687b      	ldr	r3, [r7, #4]
 802277e:	68fa      	ldr	r2, [r7, #12]
 8022780:	605a      	str	r2, [r3, #4]

#ifdef DEBUG_MODE
    g_radian = radian;
 8022782:	4a1a      	ldr	r2, [pc, #104]	; (80227ec <_ZN6Logger14StoreRadianLogEv+0xa4>)
 8022784:	68fb      	ldr	r3, [r7, #12]
 8022786:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    int32_t int_radian = logging_radian_buff_ * 100000;
 8022788:	687b      	ldr	r3, [r7, #4]
 802278a:	edd3 7a01 	vldr	s15, [r3, #4]
 802278e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80227f0 <_ZN6Logger14StoreRadianLogEv+0xa8>
 8022792:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022796:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802279a:	ee17 3a90 	vmov	r3, s15
 802279e:	60bb      	str	r3, [r7, #8]

    if(!flash_->CheckBlankWord(address, 1)) result = 0x02;
 80227a0:	687b      	ldr	r3, [r7, #4]
 80227a2:	699b      	ldr	r3, [r3, #24]
 80227a4:	2201      	movs	r2, #1
 80227a6:	6939      	ldr	r1, [r7, #16]
 80227a8:	4618      	mov	r0, r3
 80227aa:	f7fe fda4 	bl	80212f6 <_ZN5Flash14CheckBlankWordEmm>
 80227ae:	4603      	mov	r3, r0
 80227b0:	f083 0301 	eor.w	r3, r3, #1
 80227b4:	b2db      	uxtb	r3, r3
 80227b6:	2b00      	cmp	r3, #0
 80227b8:	d002      	beq.n	80227c0 <_ZN6Logger14StoreRadianLogEv+0x78>
 80227ba:	2302      	movs	r3, #2
 80227bc:	75fb      	strb	r3, [r7, #23]
 80227be:	e00f      	b.n	80227e0 <_ZN6Logger14StoreRadianLogEv+0x98>
    else if(!flash_->StoreInt32(address, &int_radian, 1)) result = 0x03;
 80227c0:	687b      	ldr	r3, [r7, #4]
 80227c2:	6998      	ldr	r0, [r3, #24]
 80227c4:	f107 0208 	add.w	r2, r7, #8
 80227c8:	2301      	movs	r3, #1
 80227ca:	6939      	ldr	r1, [r7, #16]
 80227cc:	f7fe fcad 	bl	802112a <_ZN5Flash10StoreInt32EmPlm>
 80227d0:	4603      	mov	r3, r0
 80227d2:	f083 0301 	eor.w	r3, r3, #1
 80227d6:	b2db      	uxtb	r3, r3
 80227d8:	2b00      	cmp	r3, #0
 80227da:	d001      	beq.n	80227e0 <_ZN6Logger14StoreRadianLogEv+0x98>
 80227dc:	2303      	movs	r3, #3
 80227de:	75fb      	strb	r3, [r7, #23]

    return result;
 80227e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80227e2:	4618      	mov	r0, r3
 80227e4:	3718      	adds	r7, #24
 80227e6:	46bd      	mov	sp, r7
 80227e8:	bd80      	pop	{r7, pc}
 80227ea:	bf00      	nop
 80227ec:	2000025c 	.word	0x2000025c
 80227f0:	47c35000 	.word	0x47c35000

080227f4 <_ZN6Logger18StoreRadianCorrectEv>:

uint8_t Logger::StoreRadianCorrect()
{
 80227f4:	b580      	push	{r7, lr}
 80227f6:	b086      	sub	sp, #24
 80227f8:	af00      	add	r7, sp, #0
 80227fa:	6078      	str	r0, [r7, #4]
    uint32_t address = logging_now_address_ * 4 + HEAD_ADDRESS_BLOCK_B;
 80227fc:	687b      	ldr	r3, [r7, #4]
 80227fe:	899b      	ldrh	r3, [r3, #12]
 8022800:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8022804:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8022808:	009b      	lsls	r3, r3, #2
 802280a:	613b      	str	r3, [r7, #16]
    uint8_t result = 0;
 802280c:	2300      	movs	r3, #0
 802280e:	75fb      	strb	r3, [r7, #23]

    int32_t int_radian = logging_radian_buff_ * 100000;
 8022810:	687b      	ldr	r3, [r7, #4]
 8022812:	edd3 7a01 	vldr	s15, [r3, #4]
 8022816:	ed9f 7a19 	vldr	s14, [pc, #100]	; 802287c <_ZN6Logger18StoreRadianCorrectEv+0x88>
 802281a:	ee67 7a87 	vmul.f32	s15, s15, s14
 802281e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8022822:	ee17 3a90 	vmov	r3, s15
 8022826:	60fb      	str	r3, [r7, #12]

#ifdef DEBUG_MODE
    g_radian = logging_radian_buff_;
 8022828:	687b      	ldr	r3, [r7, #4]
 802282a:	685b      	ldr	r3, [r3, #4]
 802282c:	4a14      	ldr	r2, [pc, #80]	; (8022880 <_ZN6Logger18StoreRadianCorrectEv+0x8c>)
 802282e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    if(!flash_->CheckBlankWord(address, 1)) result = 0x02;
 8022830:	687b      	ldr	r3, [r7, #4]
 8022832:	699b      	ldr	r3, [r3, #24]
 8022834:	2201      	movs	r2, #1
 8022836:	6939      	ldr	r1, [r7, #16]
 8022838:	4618      	mov	r0, r3
 802283a:	f7fe fd5c 	bl	80212f6 <_ZN5Flash14CheckBlankWordEmm>
 802283e:	4603      	mov	r3, r0
 8022840:	f083 0301 	eor.w	r3, r3, #1
 8022844:	b2db      	uxtb	r3, r3
 8022846:	2b00      	cmp	r3, #0
 8022848:	d002      	beq.n	8022850 <_ZN6Logger18StoreRadianCorrectEv+0x5c>
 802284a:	2302      	movs	r3, #2
 802284c:	75fb      	strb	r3, [r7, #23]
 802284e:	e00f      	b.n	8022870 <_ZN6Logger18StoreRadianCorrectEv+0x7c>
    else if(!flash_->StoreInt32(address, &int_radian, 1)) result = 0x03;
 8022850:	687b      	ldr	r3, [r7, #4]
 8022852:	6998      	ldr	r0, [r3, #24]
 8022854:	f107 020c 	add.w	r2, r7, #12
 8022858:	2301      	movs	r3, #1
 802285a:	6939      	ldr	r1, [r7, #16]
 802285c:	f7fe fc65 	bl	802112a <_ZN5Flash10StoreInt32EmPlm>
 8022860:	4603      	mov	r3, r0
 8022862:	f083 0301 	eor.w	r3, r3, #1
 8022866:	b2db      	uxtb	r3, r3
 8022868:	2b00      	cmp	r3, #0
 802286a:	d001      	beq.n	8022870 <_ZN6Logger18StoreRadianCorrectEv+0x7c>
 802286c:	2303      	movs	r3, #3
 802286e:	75fb      	strb	r3, [r7, #23]

    return result;
 8022870:	7dfb      	ldrb	r3, [r7, #23]
}
 8022872:	4618      	mov	r0, r3
 8022874:	3718      	adds	r7, #24
 8022876:	46bd      	mov	sp, r7
 8022878:	bd80      	pop	{r7, pc}
 802287a:	bf00      	nop
 802287c:	47c35000 	.word	0x47c35000
 8022880:	2000025c 	.word	0x2000025c

08022884 <_ZN6Logger15StoreVariousLogEv>:

uint8_t Logger::StoreVariousLog()
{
 8022884:	b580      	push	{r7, lr}
 8022886:	b086      	sub	sp, #24
 8022888:	af00      	add	r7, sp, #0
 802288a:	6078      	str	r0, [r7, #4]
    uint32_t address = logging_now_address_ * 2 + HEAD_ADDRESS_BLOCK_C;
 802288c:	687b      	ldr	r3, [r7, #4]
 802288e:	899b      	ldrh	r3, [r3, #12]
 8022890:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 8022894:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8022898:	005b      	lsls	r3, r3, #1
 802289a:	613b      	str	r3, [r7, #16]
    uint8_t result = 0;
 802289c:	2300      	movs	r3, #0
 802289e:	75fb      	strb	r3, [r7, #23]

    uint8_t corner_count = side_sensor_->GetCornerMarkerCount();
 80228a0:	687b      	ldr	r3, [r7, #4]
 80228a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80228a4:	4618      	mov	r0, r3
 80228a6:	f002 fd50 	bl	802534a <_ZN10SideSensor20GetCornerMarkerCountEv>
 80228aa:	4603      	mov	r3, r0
 80228ac:	73fb      	strb	r3, [r7, #15]
    uint8_t cross_count  = side_sensor_->GetCrossLineCount();
 80228ae:	687b      	ldr	r3, [r7, #4]
 80228b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80228b2:	4618      	mov	r0, r3
 80228b4:	f002 fd55 	bl	8025362 <_ZN10SideSensor17GetCrossLineCountEv>
 80228b8:	4603      	mov	r3, r0
 80228ba:	73bb      	strb	r3, [r7, #14]
    static uint8_t pre_corner_count = corner_count;
 80228bc:	4b4c      	ldr	r3, [pc, #304]	; (80229f0 <_ZN6Logger15StoreVariousLogEv+0x16c>)
 80228be:	781b      	ldrb	r3, [r3, #0]
 80228c0:	f3bf 8f5b 	dmb	ish
 80228c4:	b2db      	uxtb	r3, r3
 80228c6:	f003 0301 	and.w	r3, r3, #1
 80228ca:	2b00      	cmp	r3, #0
 80228cc:	bf0c      	ite	eq
 80228ce:	2301      	moveq	r3, #1
 80228d0:	2300      	movne	r3, #0
 80228d2:	b2db      	uxtb	r3, r3
 80228d4:	2b00      	cmp	r3, #0
 80228d6:	d010      	beq.n	80228fa <_ZN6Logger15StoreVariousLogEv+0x76>
 80228d8:	4845      	ldr	r0, [pc, #276]	; (80229f0 <_ZN6Logger15StoreVariousLogEv+0x16c>)
 80228da:	f007 fdab 	bl	802a434 <__cxa_guard_acquire>
 80228de:	4603      	mov	r3, r0
 80228e0:	2b00      	cmp	r3, #0
 80228e2:	bf14      	ite	ne
 80228e4:	2301      	movne	r3, #1
 80228e6:	2300      	moveq	r3, #0
 80228e8:	b2db      	uxtb	r3, r3
 80228ea:	2b00      	cmp	r3, #0
 80228ec:	d005      	beq.n	80228fa <_ZN6Logger15StoreVariousLogEv+0x76>
 80228ee:	4a41      	ldr	r2, [pc, #260]	; (80229f4 <_ZN6Logger15StoreVariousLogEv+0x170>)
 80228f0:	7bfb      	ldrb	r3, [r7, #15]
 80228f2:	7013      	strb	r3, [r2, #0]
 80228f4:	483e      	ldr	r0, [pc, #248]	; (80229f0 <_ZN6Logger15StoreVariousLogEv+0x16c>)
 80228f6:	f007 fda9 	bl	802a44c <__cxa_guard_release>
    static uint8_t pre_cross_count  = cross_count;
 80228fa:	4b3f      	ldr	r3, [pc, #252]	; (80229f8 <_ZN6Logger15StoreVariousLogEv+0x174>)
 80228fc:	781b      	ldrb	r3, [r3, #0]
 80228fe:	f3bf 8f5b 	dmb	ish
 8022902:	b2db      	uxtb	r3, r3
 8022904:	f003 0301 	and.w	r3, r3, #1
 8022908:	2b00      	cmp	r3, #0
 802290a:	bf0c      	ite	eq
 802290c:	2301      	moveq	r3, #1
 802290e:	2300      	movne	r3, #0
 8022910:	b2db      	uxtb	r3, r3
 8022912:	2b00      	cmp	r3, #0
 8022914:	d010      	beq.n	8022938 <_ZN6Logger15StoreVariousLogEv+0xb4>
 8022916:	4838      	ldr	r0, [pc, #224]	; (80229f8 <_ZN6Logger15StoreVariousLogEv+0x174>)
 8022918:	f007 fd8c 	bl	802a434 <__cxa_guard_acquire>
 802291c:	4603      	mov	r3, r0
 802291e:	2b00      	cmp	r3, #0
 8022920:	bf14      	ite	ne
 8022922:	2301      	movne	r3, #1
 8022924:	2300      	moveq	r3, #0
 8022926:	b2db      	uxtb	r3, r3
 8022928:	2b00      	cmp	r3, #0
 802292a:	d005      	beq.n	8022938 <_ZN6Logger15StoreVariousLogEv+0xb4>
 802292c:	4a33      	ldr	r2, [pc, #204]	; (80229fc <_ZN6Logger15StoreVariousLogEv+0x178>)
 802292e:	7bbb      	ldrb	r3, [r7, #14]
 8022930:	7013      	strb	r3, [r2, #0]
 8022932:	4831      	ldr	r0, [pc, #196]	; (80229f8 <_ZN6Logger15StoreVariousLogEv+0x174>)
 8022934:	f007 fd8a 	bl	802a44c <__cxa_guard_release>
    uint16_t various = 0;
 8022938:	2300      	movs	r3, #0
 802293a:	81bb      	strh	r3, [r7, #12]

    if(pre_corner_count != corner_count) various |= 0x0002;
 802293c:	4b2d      	ldr	r3, [pc, #180]	; (80229f4 <_ZN6Logger15StoreVariousLogEv+0x170>)
 802293e:	781b      	ldrb	r3, [r3, #0]
 8022940:	7bfa      	ldrb	r2, [r7, #15]
 8022942:	429a      	cmp	r2, r3
 8022944:	d004      	beq.n	8022950 <_ZN6Logger15StoreVariousLogEv+0xcc>
 8022946:	89bb      	ldrh	r3, [r7, #12]
 8022948:	f043 0302 	orr.w	r3, r3, #2
 802294c:	b29b      	uxth	r3, r3
 802294e:	81bb      	strh	r3, [r7, #12]
    if(pre_cross_count != cross_count)   various |= 0x0001;
 8022950:	4b2a      	ldr	r3, [pc, #168]	; (80229fc <_ZN6Logger15StoreVariousLogEv+0x178>)
 8022952:	781b      	ldrb	r3, [r3, #0]
 8022954:	7bba      	ldrb	r2, [r7, #14]
 8022956:	429a      	cmp	r2, r3
 8022958:	d004      	beq.n	8022964 <_ZN6Logger15StoreVariousLogEv+0xe0>
 802295a:	89bb      	ldrh	r3, [r7, #12]
 802295c:	f043 0301 	orr.w	r3, r3, #1
 8022960:	b29b      	uxth	r3, r3
 8022962:	81bb      	strh	r3, [r7, #12]

    pre_corner_count = corner_count;
 8022964:	4a23      	ldr	r2, [pc, #140]	; (80229f4 <_ZN6Logger15StoreVariousLogEv+0x170>)
 8022966:	7bfb      	ldrb	r3, [r7, #15]
 8022968:	7013      	strb	r3, [r2, #0]
    pre_cross_count  = cross_count;
 802296a:	4a24      	ldr	r2, [pc, #144]	; (80229fc <_ZN6Logger15StoreVariousLogEv+0x178>)
 802296c:	7bbb      	ldrb	r3, [r7, #14]
 802296e:	7013      	strb	r3, [r2, #0]

    if(fabs(logging_radian_buff_) < 2)
 8022970:	687b      	ldr	r3, [r7, #4]
 8022972:	edd3 7a01 	vldr	s15, [r3, #4]
 8022976:	eeb0 0a67 	vmov.f32	s0, s15
 802297a:	f7ff fdb1 	bl	80224e0 <_ZSt4fabsf>
 802297e:	eeb0 7a40 	vmov.f32	s14, s0
 8022982:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8022986:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802298a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802298e:	bf4c      	ite	mi
 8022990:	2301      	movmi	r3, #1
 8022992:	2300      	movpl	r3, #0
 8022994:	b2db      	uxtb	r3, r3
 8022996:	2b00      	cmp	r3, #0
 8022998:	d002      	beq.n	80229a0 <_ZN6Logger15StoreVariousLogEv+0x11c>
    {
        various = 1;
 802299a:	2301      	movs	r3, #1
 802299c:	81bb      	strh	r3, [r7, #12]
 802299e:	e001      	b.n	80229a4 <_ZN6Logger15StoreVariousLogEv+0x120>
    }
    else various = 0;
 80229a0:	2300      	movs	r3, #0
 80229a2:	81bb      	strh	r3, [r7, #12]

    if(!flash_->CheckBlankHalfword(address, 1)) result = 0x02;
 80229a4:	687b      	ldr	r3, [r7, #4]
 80229a6:	699b      	ldr	r3, [r3, #24]
 80229a8:	2201      	movs	r2, #1
 80229aa:	6939      	ldr	r1, [r7, #16]
 80229ac:	4618      	mov	r0, r3
 80229ae:	f7fe fc4e 	bl	802124e <_ZN5Flash18CheckBlankHalfwordEmm>
 80229b2:	4603      	mov	r3, r0
 80229b4:	f083 0301 	eor.w	r3, r3, #1
 80229b8:	b2db      	uxtb	r3, r3
 80229ba:	2b00      	cmp	r3, #0
 80229bc:	d002      	beq.n	80229c4 <_ZN6Logger15StoreVariousLogEv+0x140>
 80229be:	2302      	movs	r3, #2
 80229c0:	75fb      	strb	r3, [r7, #23]
 80229c2:	e00f      	b.n	80229e4 <_ZN6Logger15StoreVariousLogEv+0x160>
    else if(!flash_->StoreUint16(address, &various, 1)) result = 0x03;
 80229c4:	687b      	ldr	r3, [r7, #4]
 80229c6:	6998      	ldr	r0, [r3, #24]
 80229c8:	f107 020c 	add.w	r2, r7, #12
 80229cc:	2301      	movs	r3, #1
 80229ce:	6939      	ldr	r1, [r7, #16]
 80229d0:	f7fe fb76 	bl	80210c0 <_ZN5Flash11StoreUint16EmPtm>
 80229d4:	4603      	mov	r3, r0
 80229d6:	f083 0301 	eor.w	r3, r3, #1
 80229da:	b2db      	uxtb	r3, r3
 80229dc:	2b00      	cmp	r3, #0
 80229de:	d001      	beq.n	80229e4 <_ZN6Logger15StoreVariousLogEv+0x160>
 80229e0:	2303      	movs	r3, #3
 80229e2:	75fb      	strb	r3, [r7, #23]

    return result;
 80229e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80229e6:	4618      	mov	r0, r3
 80229e8:	3718      	adds	r7, #24
 80229ea:	46bd      	mov	sp, r7
 80229ec:	bd80      	pop	{r7, pc}
 80229ee:	bf00      	nop
 80229f0:	20000248 	.word	0x20000248
 80229f4:	20000246 	.word	0x20000246
 80229f8:	20000250 	.word	0x20000250
 80229fc:	2000024c 	.word	0x2000024c

08022a00 <_ZN6Logger18DistanceCorrectionEf>:

void Logger::DistanceCorrection(float distance)
{
 8022a00:	b5b0      	push	{r4, r5, r7, lr}
 8022a02:	b084      	sub	sp, #16
 8022a04:	af00      	add	r7, sp, #0
 8022a06:	6078      	str	r0, [r7, #4]
 8022a08:	ed87 0a00 	vstr	s0, [r7]
    uncorrected_address_buff_ = logging_now_address_;
 8022a0c:	687b      	ldr	r3, [r7, #4]
 8022a0e:	899a      	ldrh	r2, [r3, #12]
 8022a10:	687b      	ldr	r3, [r7, #4]
 8022a12:	815a      	strh	r2, [r3, #10]

    static float excess_stack = 0;
    excess_stack += distance - LOGGING_CONST_DISTANCE;
 8022a14:	4b31      	ldr	r3, [pc, #196]	; (8022adc <_ZN6Logger18DistanceCorrectionEf+0xdc>)
 8022a16:	681b      	ldr	r3, [r3, #0]
 8022a18:	4618      	mov	r0, r3
 8022a1a:	f7fd fccd 	bl	80203b8 <__aeabi_f2d>
 8022a1e:	4604      	mov	r4, r0
 8022a20:	460d      	mov	r5, r1
 8022a22:	6838      	ldr	r0, [r7, #0]
 8022a24:	f7fd fcc8 	bl	80203b8 <__aeabi_f2d>
 8022a28:	f04f 0200 	mov.w	r2, #0
 8022a2c:	4b2c      	ldr	r3, [pc, #176]	; (8022ae0 <_ZN6Logger18DistanceCorrectionEf+0xe0>)
 8022a2e:	f7fd fb63 	bl	80200f8 <__aeabi_dsub>
 8022a32:	4602      	mov	r2, r0
 8022a34:	460b      	mov	r3, r1
 8022a36:	4620      	mov	r0, r4
 8022a38:	4629      	mov	r1, r5
 8022a3a:	f7fd fb5f 	bl	80200fc <__adddf3>
 8022a3e:	4603      	mov	r3, r0
 8022a40:	460c      	mov	r4, r1
 8022a42:	4618      	mov	r0, r3
 8022a44:	4621      	mov	r1, r4
 8022a46:	f7fd ffe7 	bl	8020a18 <__aeabi_d2f>
 8022a4a:	4602      	mov	r2, r0
 8022a4c:	4b23      	ldr	r3, [pc, #140]	; (8022adc <_ZN6Logger18DistanceCorrectionEf+0xdc>)
 8022a4e:	601a      	str	r2, [r3, #0]

    if(excess_stack > LOGGING_CONST_DISTANCE)
 8022a50:	4b22      	ldr	r3, [pc, #136]	; (8022adc <_ZN6Logger18DistanceCorrectionEf+0xdc>)
 8022a52:	edd3 7a00 	vldr	s15, [r3]
 8022a56:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8022a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022a62:	dc00      	bgt.n	8022a66 <_ZN6Logger18DistanceCorrectionEf+0x66>
        result = StoreVariousLog();
        CheckLoggingSuccess(ERROR_CODE_STORE_VARIOUS, result);

        excess_stack -= LOGGING_CONST_DISTANCE;
    }
}
 8022a64:	e035      	b.n	8022ad2 <_ZN6Logger18DistanceCorrectionEf+0xd2>
        logging_now_address_++;
 8022a66:	687b      	ldr	r3, [r7, #4]
 8022a68:	899b      	ldrh	r3, [r3, #12]
 8022a6a:	3301      	adds	r3, #1
 8022a6c:	b29a      	uxth	r2, r3
 8022a6e:	687b      	ldr	r3, [r7, #4]
 8022a70:	819a      	strh	r2, [r3, #12]
        uint8_t result = StoreDistanceLog(distance);
 8022a72:	ed97 0a00 	vldr	s0, [r7]
 8022a76:	6878      	ldr	r0, [r7, #4]
 8022a78:	f7ff fe24 	bl	80226c4 <_ZN6Logger16StoreDistanceLogEf>
 8022a7c:	4603      	mov	r3, r0
 8022a7e:	73fb      	strb	r3, [r7, #15]
        g_store_correct = result;
 8022a80:	4a18      	ldr	r2, [pc, #96]	; (8022ae4 <_ZN6Logger18DistanceCorrectionEf+0xe4>)
 8022a82:	7bfb      	ldrb	r3, [r7, #15]
 8022a84:	7013      	strb	r3, [r2, #0]
        CheckLoggingSuccess(ERROR_CODE_STORE_DISTANCE, result);
 8022a86:	7bfb      	ldrb	r3, [r7, #15]
 8022a88:	461a      	mov	r2, r3
 8022a8a:	4917      	ldr	r1, [pc, #92]	; (8022ae8 <_ZN6Logger18DistanceCorrectionEf+0xe8>)
 8022a8c:	6878      	ldr	r0, [r7, #4]
 8022a8e:	f000 f831 	bl	8022af4 <_ZN6Logger19CheckLoggingSuccessEmh>
        result = StoreRadianCorrect();
 8022a92:	6878      	ldr	r0, [r7, #4]
 8022a94:	f7ff feae 	bl	80227f4 <_ZN6Logger18StoreRadianCorrectEv>
 8022a98:	4603      	mov	r3, r0
 8022a9a:	73fb      	strb	r3, [r7, #15]
        CheckLoggingSuccess(ERROR_CODE_STORE_RADIAN, result);
 8022a9c:	7bfb      	ldrb	r3, [r7, #15]
 8022a9e:	461a      	mov	r2, r3
 8022aa0:	4912      	ldr	r1, [pc, #72]	; (8022aec <_ZN6Logger18DistanceCorrectionEf+0xec>)
 8022aa2:	6878      	ldr	r0, [r7, #4]
 8022aa4:	f000 f826 	bl	8022af4 <_ZN6Logger19CheckLoggingSuccessEmh>
        result = StoreVariousLog();
 8022aa8:	6878      	ldr	r0, [r7, #4]
 8022aaa:	f7ff feeb 	bl	8022884 <_ZN6Logger15StoreVariousLogEv>
 8022aae:	4603      	mov	r3, r0
 8022ab0:	73fb      	strb	r3, [r7, #15]
        CheckLoggingSuccess(ERROR_CODE_STORE_VARIOUS, result);
 8022ab2:	7bfb      	ldrb	r3, [r7, #15]
 8022ab4:	461a      	mov	r2, r3
 8022ab6:	490e      	ldr	r1, [pc, #56]	; (8022af0 <_ZN6Logger18DistanceCorrectionEf+0xf0>)
 8022ab8:	6878      	ldr	r0, [r7, #4]
 8022aba:	f000 f81b 	bl	8022af4 <_ZN6Logger19CheckLoggingSuccessEmh>
        excess_stack -= LOGGING_CONST_DISTANCE;
 8022abe:	4b07      	ldr	r3, [pc, #28]	; (8022adc <_ZN6Logger18DistanceCorrectionEf+0xdc>)
 8022ac0:	edd3 7a00 	vldr	s15, [r3]
 8022ac4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8022ac8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022acc:	4b03      	ldr	r3, [pc, #12]	; (8022adc <_ZN6Logger18DistanceCorrectionEf+0xdc>)
 8022ace:	edc3 7a00 	vstr	s15, [r3]
}
 8022ad2:	bf00      	nop
 8022ad4:	3710      	adds	r7, #16
 8022ad6:	46bd      	mov	sp, r7
 8022ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8022ada:	bf00      	nop
 8022adc:	20000254 	.word	0x20000254
 8022ae0:	40340000 	.word	0x40340000
 8022ae4:	2000026c 	.word	0x2000026c
 8022ae8:	08018000 	.word	0x08018000
 8022aec:	08018100 	.word	0x08018100
 8022af0:	08018200 	.word	0x08018200

08022af4 <_ZN6Logger19CheckLoggingSuccessEmh>:

void Logger::CheckLoggingSuccess(uint32_t address, uint8_t data)
{
 8022af4:	b580      	push	{r7, lr}
 8022af6:	b084      	sub	sp, #16
 8022af8:	af00      	add	r7, sp, #0
 8022afa:	60f8      	str	r0, [r7, #12]
 8022afc:	60b9      	str	r1, [r7, #8]
 8022afe:	4613      	mov	r3, r2
 8022b00:	71fb      	strb	r3, [r7, #7]
    if(data != 0)
 8022b02:	79fb      	ldrb	r3, [r7, #7]
 8022b04:	2b00      	cmp	r3, #0
 8022b06:	d011      	beq.n	8022b2c <_ZN6Logger19CheckLoggingSuccessEmh+0x38>
    {
        SetEmergencyStopFlag(true);
 8022b08:	2101      	movs	r1, #1
 8022b0a:	68f8      	ldr	r0, [r7, #12]
 8022b0c:	f000 f812 	bl	8022b34 <_ZN6Logger20SetEmergencyStopFlagEb>

        if(flash_->StoreUint8(address, &data, 1))
 8022b10:	68fb      	ldr	r3, [r7, #12]
 8022b12:	6998      	ldr	r0, [r3, #24]
 8022b14:	1dfa      	adds	r2, r7, #7
 8022b16:	2301      	movs	r3, #1
 8022b18:	68b9      	ldr	r1, [r7, #8]
 8022b1a:	f7fe fa9d 	bl	8021058 <_ZN5Flash10StoreUint8EmPhm>
 8022b1e:	4603      	mov	r3, r0
 8022b20:	2b00      	cmp	r3, #0
 8022b22:	d003      	beq.n	8022b2c <_ZN6Logger19CheckLoggingSuccessEmh+0x38>
        {
            SetSuccessEmergencyCodeStore(true);
 8022b24:	2101      	movs	r1, #1
 8022b26:	68f8      	ldr	r0, [r7, #12]
 8022b28:	f000 f81f 	bl	8022b6a <_ZN6Logger28SetSuccessEmergencyCodeStoreEb>
        }
    }
}
 8022b2c:	bf00      	nop
 8022b2e:	3710      	adds	r7, #16
 8022b30:	46bd      	mov	sp, r7
 8022b32:	bd80      	pop	{r7, pc}

08022b34 <_ZN6Logger20SetEmergencyStopFlagEb>:

void Logger::SetEmergencyStopFlag(bool boolean)
{
 8022b34:	b480      	push	{r7}
 8022b36:	b083      	sub	sp, #12
 8022b38:	af00      	add	r7, sp, #0
 8022b3a:	6078      	str	r0, [r7, #4]
 8022b3c:	460b      	mov	r3, r1
 8022b3e:	70fb      	strb	r3, [r7, #3]
    emergency_stop_flag_ = boolean;
 8022b40:	687b      	ldr	r3, [r7, #4]
 8022b42:	78fa      	ldrb	r2, [r7, #3]
 8022b44:	701a      	strb	r2, [r3, #0]
}
 8022b46:	bf00      	nop
 8022b48:	370c      	adds	r7, #12
 8022b4a:	46bd      	mov	sp, r7
 8022b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b50:	4770      	bx	lr

08022b52 <_ZN6Logger20GetEmergencyStopFlagEv>:

bool Logger::GetEmergencyStopFlag()
{
 8022b52:	b480      	push	{r7}
 8022b54:	b083      	sub	sp, #12
 8022b56:	af00      	add	r7, sp, #0
 8022b58:	6078      	str	r0, [r7, #4]
    return emergency_stop_flag_;
 8022b5a:	687b      	ldr	r3, [r7, #4]
 8022b5c:	781b      	ldrb	r3, [r3, #0]
}
 8022b5e:	4618      	mov	r0, r3
 8022b60:	370c      	adds	r7, #12
 8022b62:	46bd      	mov	sp, r7
 8022b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b68:	4770      	bx	lr

08022b6a <_ZN6Logger28SetSuccessEmergencyCodeStoreEb>:

void Logger::SetSuccessEmergencyCodeStore(bool boolean)
{
 8022b6a:	b480      	push	{r7}
 8022b6c:	b083      	sub	sp, #12
 8022b6e:	af00      	add	r7, sp, #0
 8022b70:	6078      	str	r0, [r7, #4]
 8022b72:	460b      	mov	r3, r1
 8022b74:	70fb      	strb	r3, [r7, #3]
    success_emergency_code_store_ = boolean;
 8022b76:	687b      	ldr	r3, [r7, #4]
 8022b78:	78fa      	ldrb	r2, [r7, #3]
 8022b7a:	705a      	strb	r2, [r3, #1]
}
 8022b7c:	bf00      	nop
 8022b7e:	370c      	adds	r7, #12
 8022b80:	46bd      	mov	sp, r7
 8022b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b86:	4770      	bx	lr

08022b88 <_ZN6Logger28GetSuccessEmergencyCodeStoreEv>:

bool Logger::GetSuccessEmergencyCodeStore()
{
 8022b88:	b480      	push	{r7}
 8022b8a:	b083      	sub	sp, #12
 8022b8c:	af00      	add	r7, sp, #0
 8022b8e:	6078      	str	r0, [r7, #4]
    return success_emergency_code_store_;
 8022b90:	687b      	ldr	r3, [r7, #4]
 8022b92:	785b      	ldrb	r3, [r3, #1]
}
 8022b94:	4618      	mov	r0, r3
 8022b96:	370c      	adds	r7, #12
 8022b98:	46bd      	mov	sp, r7
 8022b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b9e:	4770      	bx	lr

08022ba0 <_ZN6Logger20LoggingAccelPositionEv>:

void Logger::LoggingAccelPosition()
{
 8022ba0:	b580      	push	{r7, lr}
 8022ba2:	b088      	sub	sp, #32
 8022ba4:	af00      	add	r7, sp, #0
 8022ba6:	6078      	str	r0, [r7, #4]
    static uint16_t accel_straight_count = 0;
    static uint8_t accel_step = 0;
    bool straight = false;
 8022ba8:	2300      	movs	r3, #0
 8022baa:	77fb      	strb	r3, [r7, #31]

    if(fabs(encoder_->AngularVelocity()) < STRAIGHT_BORDER_ENCODER)
 8022bac:	687b      	ldr	r3, [r7, #4]
 8022bae:	695b      	ldr	r3, [r3, #20]
 8022bb0:	4618      	mov	r0, r3
 8022bb2:	f7fe f9fd 	bl	8020fb0 <_ZN7Encoder15AngularVelocityEv>
 8022bb6:	eef0 7a40 	vmov.f32	s15, s0
 8022bba:	eeb0 0a67 	vmov.f32	s0, s15
 8022bbe:	f7ff fc8f 	bl	80224e0 <_ZSt4fabsf>
 8022bc2:	eeb0 7a40 	vmov.f32	s14, s0
 8022bc6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8022bca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022bd2:	bf4c      	ite	mi
 8022bd4:	2301      	movmi	r3, #1
 8022bd6:	2300      	movpl	r3, #0
 8022bd8:	b2db      	uxtb	r3, r3
 8022bda:	2b00      	cmp	r3, #0
 8022bdc:	d008      	beq.n	8022bf0 <_ZN6Logger20LoggingAccelPositionEv+0x50>
    {
        led_->ColorOrder('X');
 8022bde:	687b      	ldr	r3, [r7, #4]
 8022be0:	69db      	ldr	r3, [r3, #28]
 8022be2:	2158      	movs	r1, #88	; 0x58
 8022be4:	4618      	mov	r0, r3
 8022be6:	f7fe fe5f 	bl	80218a8 <_ZN3Led10ColorOrderEc>
        straight = true;
 8022bea:	2301      	movs	r3, #1
 8022bec:	77fb      	strb	r3, [r7, #31]
 8022bee:	e005      	b.n	8022bfc <_ZN6Logger20LoggingAccelPositionEv+0x5c>
    }
    else led_->ColorOrder('M');
 8022bf0:	687b      	ldr	r3, [r7, #4]
 8022bf2:	69db      	ldr	r3, [r3, #28]
 8022bf4:	214d      	movs	r1, #77	; 0x4d
 8022bf6:	4618      	mov	r0, r3
 8022bf8:	f7fe fe56 	bl	80218a8 <_ZN3Led10ColorOrderEc>

    if(straight)
 8022bfc:	7ffb      	ldrb	r3, [r7, #31]
 8022bfe:	2b00      	cmp	r3, #0
 8022c00:	d02d      	beq.n	8022c5e <_ZN6Logger20LoggingAccelPositionEv+0xbe>
    {
        accel_straight_count++;
 8022c02:	4b33      	ldr	r3, [pc, #204]	; (8022cd0 <_ZN6Logger20LoggingAccelPositionEv+0x130>)
 8022c04:	881b      	ldrh	r3, [r3, #0]
 8022c06:	3301      	adds	r3, #1
 8022c08:	b29a      	uxth	r2, r3
 8022c0a:	4b31      	ldr	r3, [pc, #196]	; (8022cd0 <_ZN6Logger20LoggingAccelPositionEv+0x130>)
 8022c0c:	801a      	strh	r2, [r3, #0]
        if(accel_straight_count >= CNT_OF_ACCEL_STEP_UP && accel_step < NUM_OF_ACCEL_STEP)
 8022c0e:	4b30      	ldr	r3, [pc, #192]	; (8022cd0 <_ZN6Logger20LoggingAccelPositionEv+0x130>)
 8022c10:	881b      	ldrh	r3, [r3, #0]
 8022c12:	2b03      	cmp	r3, #3
 8022c14:	d957      	bls.n	8022cc6 <_ZN6Logger20LoggingAccelPositionEv+0x126>
 8022c16:	4b2f      	ldr	r3, [pc, #188]	; (8022cd4 <_ZN6Logger20LoggingAccelPositionEv+0x134>)
 8022c18:	781b      	ldrb	r3, [r3, #0]
 8022c1a:	2b04      	cmp	r3, #4
 8022c1c:	d853      	bhi.n	8022cc6 <_ZN6Logger20LoggingAccelPositionEv+0x126>
        {
            accel_step++;
 8022c1e:	4b2d      	ldr	r3, [pc, #180]	; (8022cd4 <_ZN6Logger20LoggingAccelPositionEv+0x134>)
 8022c20:	781b      	ldrb	r3, [r3, #0]
 8022c22:	3301      	adds	r3, #1
 8022c24:	b2da      	uxtb	r2, r3
 8022c26:	4b2b      	ldr	r3, [pc, #172]	; (8022cd4 <_ZN6Logger20LoggingAccelPositionEv+0x134>)
 8022c28:	701a      	strb	r2, [r3, #0]

            uint32_t accel_address = uncorrected_address_buff_ - CNT_OF_ACCEL_STEP_UP;
 8022c2a:	687b      	ldr	r3, [r7, #4]
 8022c2c:	895b      	ldrh	r3, [r3, #10]
 8022c2e:	3b04      	subs	r3, #4
 8022c30:	613b      	str	r3, [r7, #16]

            uint8_t result = StoreAccelPosition(accel_address, accel_step);
 8022c32:	4b28      	ldr	r3, [pc, #160]	; (8022cd4 <_ZN6Logger20LoggingAccelPositionEv+0x134>)
 8022c34:	781b      	ldrb	r3, [r3, #0]
 8022c36:	461a      	mov	r2, r3
 8022c38:	6939      	ldr	r1, [r7, #16]
 8022c3a:	6878      	ldr	r0, [r7, #4]
 8022c3c:	f000 f854 	bl	8022ce8 <_ZN6Logger18StoreAccelPositionEmh>
 8022c40:	4603      	mov	r3, r0
 8022c42:	73fb      	strb	r3, [r7, #15]
#ifdef DEBUG_MODE
    g_store_accel = result;
 8022c44:	4a24      	ldr	r2, [pc, #144]	; (8022cd8 <_ZN6Logger20LoggingAccelPositionEv+0x138>)
 8022c46:	7bfb      	ldrb	r3, [r7, #15]
 8022c48:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE
            CheckLoggingSuccess(ERROR_CODE_STORE_ACCEL, result);
 8022c4a:	7bfb      	ldrb	r3, [r7, #15]
 8022c4c:	461a      	mov	r2, r3
 8022c4e:	4923      	ldr	r1, [pc, #140]	; (8022cdc <_ZN6Logger20LoggingAccelPositionEv+0x13c>)
 8022c50:	6878      	ldr	r0, [r7, #4]
 8022c52:	f7ff ff4f 	bl	8022af4 <_ZN6Logger19CheckLoggingSuccessEmh>

            accel_straight_count = 0;
 8022c56:	4b1e      	ldr	r3, [pc, #120]	; (8022cd0 <_ZN6Logger20LoggingAccelPositionEv+0x130>)
 8022c58:	2200      	movs	r2, #0
 8022c5a:	801a      	strh	r2, [r3, #0]
        }
        accel_step = 0;
        accel_straight_count = 0;
    }
    else accel_straight_count = 0;
}
 8022c5c:	e033      	b.n	8022cc6 <_ZN6Logger20LoggingAccelPositionEv+0x126>
    else if(accel_step != 0)
 8022c5e:	4b1d      	ldr	r3, [pc, #116]	; (8022cd4 <_ZN6Logger20LoggingAccelPositionEv+0x134>)
 8022c60:	781b      	ldrb	r3, [r3, #0]
 8022c62:	2b00      	cmp	r3, #0
 8022c64:	d02c      	beq.n	8022cc0 <_ZN6Logger20LoggingAccelPositionEv+0x120>
        for(uint8_t i = 1; i <= accel_step; i++)
 8022c66:	2301      	movs	r3, #1
 8022c68:	77bb      	strb	r3, [r7, #30]
 8022c6a:	4b1a      	ldr	r3, [pc, #104]	; (8022cd4 <_ZN6Logger20LoggingAccelPositionEv+0x134>)
 8022c6c:	781b      	ldrb	r3, [r3, #0]
 8022c6e:	7fba      	ldrb	r2, [r7, #30]
 8022c70:	429a      	cmp	r2, r3
 8022c72:	d81e      	bhi.n	8022cb2 <_ZN6Logger20LoggingAccelPositionEv+0x112>
            uint32_t decel_address = (uncorrected_address_buff_-1) - (DIFF_NEXT_ACCEL_STEP * i);
 8022c74:	687b      	ldr	r3, [r7, #4]
 8022c76:	895b      	ldrh	r3, [r3, #10]
 8022c78:	1e5a      	subs	r2, r3, #1
 8022c7a:	7fbb      	ldrb	r3, [r7, #30]
 8022c7c:	005b      	lsls	r3, r3, #1
 8022c7e:	1ad3      	subs	r3, r2, r3
 8022c80:	61bb      	str	r3, [r7, #24]
            uint8_t decel_step = i << 4;
 8022c82:	7fbb      	ldrb	r3, [r7, #30]
 8022c84:	011b      	lsls	r3, r3, #4
 8022c86:	75fb      	strb	r3, [r7, #23]
            uint8_t result = StoreAccelPosition(decel_address, decel_step);
 8022c88:	7dfb      	ldrb	r3, [r7, #23]
 8022c8a:	461a      	mov	r2, r3
 8022c8c:	69b9      	ldr	r1, [r7, #24]
 8022c8e:	6878      	ldr	r0, [r7, #4]
 8022c90:	f000 f82a 	bl	8022ce8 <_ZN6Logger18StoreAccelPositionEmh>
 8022c94:	4603      	mov	r3, r0
 8022c96:	75bb      	strb	r3, [r7, #22]
    g_store_decel = result;
 8022c98:	4a11      	ldr	r2, [pc, #68]	; (8022ce0 <_ZN6Logger20LoggingAccelPositionEv+0x140>)
 8022c9a:	7dbb      	ldrb	r3, [r7, #22]
 8022c9c:	7013      	strb	r3, [r2, #0]
            CheckLoggingSuccess(ERROR_CODE_STORE_DECEL, result);
 8022c9e:	7dbb      	ldrb	r3, [r7, #22]
 8022ca0:	461a      	mov	r2, r3
 8022ca2:	4910      	ldr	r1, [pc, #64]	; (8022ce4 <_ZN6Logger20LoggingAccelPositionEv+0x144>)
 8022ca4:	6878      	ldr	r0, [r7, #4]
 8022ca6:	f7ff ff25 	bl	8022af4 <_ZN6Logger19CheckLoggingSuccessEmh>
        for(uint8_t i = 1; i <= accel_step; i++)
 8022caa:	7fbb      	ldrb	r3, [r7, #30]
 8022cac:	3301      	adds	r3, #1
 8022cae:	77bb      	strb	r3, [r7, #30]
 8022cb0:	e7db      	b.n	8022c6a <_ZN6Logger20LoggingAccelPositionEv+0xca>
        accel_step = 0;
 8022cb2:	4b08      	ldr	r3, [pc, #32]	; (8022cd4 <_ZN6Logger20LoggingAccelPositionEv+0x134>)
 8022cb4:	2200      	movs	r2, #0
 8022cb6:	701a      	strb	r2, [r3, #0]
        accel_straight_count = 0;
 8022cb8:	4b05      	ldr	r3, [pc, #20]	; (8022cd0 <_ZN6Logger20LoggingAccelPositionEv+0x130>)
 8022cba:	2200      	movs	r2, #0
 8022cbc:	801a      	strh	r2, [r3, #0]
}
 8022cbe:	e002      	b.n	8022cc6 <_ZN6Logger20LoggingAccelPositionEv+0x126>
    else accel_straight_count = 0;
 8022cc0:	4b03      	ldr	r3, [pc, #12]	; (8022cd0 <_ZN6Logger20LoggingAccelPositionEv+0x130>)
 8022cc2:	2200      	movs	r2, #0
 8022cc4:	801a      	strh	r2, [r3, #0]
}
 8022cc6:	bf00      	nop
 8022cc8:	3720      	adds	r7, #32
 8022cca:	46bd      	mov	sp, r7
 8022ccc:	bd80      	pop	{r7, pc}
 8022cce:	bf00      	nop
 8022cd0:	20000258 	.word	0x20000258
 8022cd4:	2000025a 	.word	0x2000025a
 8022cd8:	2000026d 	.word	0x2000026d
 8022cdc:	08018300 	.word	0x08018300
 8022ce0:	2000026e 	.word	0x2000026e
 8022ce4:	08018400 	.word	0x08018400

08022ce8 <_ZN6Logger18StoreAccelPositionEmh>:

uint8_t Logger::StoreAccelPosition(uint32_t address, uint8_t data)
{
 8022ce8:	b580      	push	{r7, lr}
 8022cea:	b084      	sub	sp, #16
 8022cec:	af00      	add	r7, sp, #0
 8022cee:	60f8      	str	r0, [r7, #12]
 8022cf0:	60b9      	str	r1, [r7, #8]
 8022cf2:	4613      	mov	r3, r2
 8022cf4:	71fb      	strb	r3, [r7, #7]
    address += HEAD_ADDRESS_BLOCK_D;
 8022cf6:	68bb      	ldr	r3, [r7, #8]
 8022cf8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022cfc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8022d00:	60bb      	str	r3, [r7, #8]

    if(!flash_->CheckBlankByte(address, 1)) return 0x01;
 8022d02:	68fb      	ldr	r3, [r7, #12]
 8022d04:	699b      	ldr	r3, [r3, #24]
 8022d06:	2201      	movs	r2, #1
 8022d08:	68b9      	ldr	r1, [r7, #8]
 8022d0a:	4618      	mov	r0, r3
 8022d0c:	f7fe fa52 	bl	80211b4 <_ZN5Flash14CheckBlankByteEmm>
 8022d10:	4603      	mov	r3, r0
 8022d12:	f083 0301 	eor.w	r3, r3, #1
 8022d16:	b2db      	uxtb	r3, r3
 8022d18:	2b00      	cmp	r3, #0
 8022d1a:	d001      	beq.n	8022d20 <_ZN6Logger18StoreAccelPositionEmh+0x38>
 8022d1c:	2301      	movs	r3, #1
 8022d1e:	e00f      	b.n	8022d40 <_ZN6Logger18StoreAccelPositionEmh+0x58>
    else if(!flash_->StoreUint8(address, &data, 1)) return 0x02;
 8022d20:	68fb      	ldr	r3, [r7, #12]
 8022d22:	6998      	ldr	r0, [r3, #24]
 8022d24:	1dfa      	adds	r2, r7, #7
 8022d26:	2301      	movs	r3, #1
 8022d28:	68b9      	ldr	r1, [r7, #8]
 8022d2a:	f7fe f995 	bl	8021058 <_ZN5Flash10StoreUint8EmPhm>
 8022d2e:	4603      	mov	r3, r0
 8022d30:	f083 0301 	eor.w	r3, r3, #1
 8022d34:	b2db      	uxtb	r3, r3
 8022d36:	2b00      	cmp	r3, #0
 8022d38:	d001      	beq.n	8022d3e <_ZN6Logger18StoreAccelPositionEmh+0x56>
 8022d3a:	2302      	movs	r3, #2
 8022d3c:	e000      	b.n	8022d40 <_ZN6Logger18StoreAccelPositionEmh+0x58>

    return 0;
 8022d3e:	2300      	movs	r3, #0
}
 8022d40:	4618      	mov	r0, r3
 8022d42:	3710      	adds	r7, #16
 8022d44:	46bd      	mov	sp, r7
 8022d46:	bd80      	pop	{r7, pc}

08022d48 <_ZN6Logger7LoadingEv>:

void Logger::Loading()
{
 8022d48:	b580      	push	{r7, lr}
 8022d4a:	b084      	sub	sp, #16
 8022d4c:	af00      	add	r7, sp, #0
 8022d4e:	6078      	str	r0, [r7, #4]
    {
        target_velocity_ = 0.80;
        led_->ColorOrder('Y');
    }
    */
    uint8_t count = side_sensor_->GetCornerMarkerCount();
 8022d50:	687b      	ldr	r3, [r7, #4]
 8022d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022d54:	4618      	mov	r0, r3
 8022d56:	f002 faf8 	bl	802534a <_ZN10SideSensor20GetCornerMarkerCountEv>
 8022d5a:	4603      	mov	r3, r0
 8022d5c:	73fb      	strb	r3, [r7, #15]

    switch(count)
 8022d5e:	7bfb      	ldrb	r3, [r7, #15]
 8022d60:	2b06      	cmp	r3, #6
 8022d62:	d822      	bhi.n	8022daa <_ZN6Logger7LoadingEv+0x62>
 8022d64:	a201      	add	r2, pc, #4	; (adr r2, 8022d6c <_ZN6Logger7LoadingEv+0x24>)
 8022d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022d6a:	bf00      	nop
 8022d6c:	08022d89 	.word	0x08022d89
 8022d70:	08022dab 	.word	0x08022dab
 8022d74:	08022d91 	.word	0x08022d91
 8022d78:	08022d99 	.word	0x08022d99
 8022d7c:	08022dab 	.word	0x08022dab
 8022d80:	08022dab 	.word	0x08022dab
 8022d84:	08022da3 	.word	0x08022da3
    {
        case 0: target_velocity_ = 0.9; break;
 8022d88:	687b      	ldr	r3, [r7, #4]
 8022d8a:	4a0f      	ldr	r2, [pc, #60]	; (8022dc8 <_ZN6Logger7LoadingEv+0x80>)
 8022d8c:	611a      	str	r2, [r3, #16]
 8022d8e:	e011      	b.n	8022db4 <_ZN6Logger7LoadingEv+0x6c>
        case 2: target_velocity_ = 0.9; break;
 8022d90:	687b      	ldr	r3, [r7, #4]
 8022d92:	4a0d      	ldr	r2, [pc, #52]	; (8022dc8 <_ZN6Logger7LoadingEv+0x80>)
 8022d94:	611a      	str	r2, [r3, #16]
 8022d96:	e00d      	b.n	8022db4 <_ZN6Logger7LoadingEv+0x6c>
        case 3: target_velocity_ = MIN_VELOCITY; break;
 8022d98:	687b      	ldr	r3, [r7, #4]
 8022d9a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8022d9e:	611a      	str	r2, [r3, #16]
 8022da0:	e008      	b.n	8022db4 <_ZN6Logger7LoadingEv+0x6c>
        case 6: target_velocity_ = 0.9; break;
 8022da2:	687b      	ldr	r3, [r7, #4]
 8022da4:	4a08      	ldr	r2, [pc, #32]	; (8022dc8 <_ZN6Logger7LoadingEv+0x80>)
 8022da6:	611a      	str	r2, [r3, #16]
 8022da8:	e004      	b.n	8022db4 <_ZN6Logger7LoadingEv+0x6c>
        default:  target_velocity_ = MIN_VELOCITY; break;
 8022daa:	687b      	ldr	r3, [r7, #4]
 8022dac:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8022db0:	611a      	str	r2, [r3, #16]
 8022db2:	bf00      	nop





    loading_now_address_++;
 8022db4:	687b      	ldr	r3, [r7, #4]
 8022db6:	891b      	ldrh	r3, [r3, #8]
 8022db8:	3301      	adds	r3, #1
 8022dba:	b29a      	uxth	r2, r3
 8022dbc:	687b      	ldr	r3, [r7, #4]
 8022dbe:	811a      	strh	r2, [r3, #8]
}
 8022dc0:	bf00      	nop
 8022dc2:	3710      	adds	r7, #16
 8022dc4:	46bd      	mov	sp, r7
 8022dc6:	bd80      	pop	{r7, pc}
 8022dc8:	3f666666 	.word	0x3f666666

08022dcc <_ZN6Logger17GetTargetVelocityEv>:
    target_velocity_ = target;
    pre_target = target;
}

float Logger::GetTargetVelocity()
{
 8022dcc:	b480      	push	{r7}
 8022dce:	b083      	sub	sp, #12
 8022dd0:	af00      	add	r7, sp, #0
 8022dd2:	6078      	str	r0, [r7, #4]
    return target_velocity_;
 8022dd4:	687b      	ldr	r3, [r7, #4]
 8022dd6:	691b      	ldr	r3, [r3, #16]
 8022dd8:	ee07 3a90 	vmov	s15, r3
}
 8022ddc:	eeb0 0a67 	vmov.f32	s0, s15
 8022de0:	370c      	adds	r7, #12
 8022de2:	46bd      	mov	sp, r7
 8022de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022de8:	4770      	bx	lr
	...

08022dec <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8022dec:	b580      	push	{r7, lr}
 8022dee:	b082      	sub	sp, #8
 8022df0:	af00      	add	r7, sp, #0
 8022df2:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 8022df4:	687b      	ldr	r3, [r7, #4]
 8022df6:	681b      	ldr	r3, [r3, #0]
 8022df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8022dfc:	d101      	bne.n	8022e02 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    InterruptTim2();
 8022dfe:	f003 f9bd 	bl	802617c <InterruptTim2>
  }
  if(htim->Instance == TIM6)
 8022e02:	687b      	ldr	r3, [r7, #4]
 8022e04:	681b      	ldr	r3, [r3, #0]
 8022e06:	4a08      	ldr	r2, [pc, #32]	; (8022e28 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8022e08:	4293      	cmp	r3, r2
 8022e0a:	d101      	bne.n	8022e10 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
    InterruptTim6();
 8022e0c:	f003 f9a6 	bl	802615c <InterruptTim6>
  }
  if(htim->Instance == TIM7)
 8022e10:	687b      	ldr	r3, [r7, #4]
 8022e12:	681b      	ldr	r3, [r3, #0]
 8022e14:	4a05      	ldr	r2, [pc, #20]	; (8022e2c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8022e16:	4293      	cmp	r3, r2
 8022e18:	d101      	bne.n	8022e1e <HAL_TIM_PeriodElapsedCallback+0x32>
  {
    InterruptTim7();
 8022e1a:	f003 f98f 	bl	802613c <InterruptTim7>
  }
}
 8022e1e:	bf00      	nop
 8022e20:	3708      	adds	r7, #8
 8022e22:	46bd      	mov	sp, r7
 8022e24:	bd80      	pop	{r7, pc}
 8022e26:	bf00      	nop
 8022e28:	40001000 	.word	0x40001000
 8022e2c:	40001400 	.word	0x40001400

08022e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8022e30:	b580      	push	{r7, lr}
 8022e32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8022e34:	f003 fa52 	bl	80262dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8022e38:	f000 f822 	bl	8022e80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8022e3c:	f000 fd68 	bl	8023910 <MX_GPIO_Init>
  MX_DMA_Init();
 8022e40:	f000 fd46 	bl	80238d0 <MX_DMA_Init>
  MX_ADC1_Init();
 8022e44:	f000 f886 	bl	8022f54 <MX_ADC1_Init>
  MX_I2C2_Init();
 8022e48:	f000 f98c 	bl	8023164 <MX_I2C2_Init>
  MX_SPI3_Init();
 8022e4c:	f000 f9b8 	bl	80231c0 <MX_SPI3_Init>
  MX_TIM1_Init();
 8022e50:	f000 f9ec 	bl	802322c <MX_TIM1_Init>
  MX_TIM3_Init();
 8022e54:	f000 fac8 	bl	80233e8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8022e58:	f000 fb40 	bl	80234dc <MX_TIM4_Init>
  MX_TIM6_Init();
 8022e5c:	f000 fbe0 	bl	8023620 <MX_TIM6_Init>
  MX_TIM7_Init();
 8022e60:	f000 fc14 	bl	802368c <MX_TIM7_Init>
  MX_TIM8_Init();
 8022e64:	f000 fc48 	bl	80236f8 <MX_TIM8_Init>
  MX_TIM11_Init();
 8022e68:	f000 fc9e 	bl	80237a8 <MX_TIM11_Init>
  MX_TIM12_Init();
 8022e6c:	f000 fcea 	bl	8023844 <MX_TIM12_Init>
  MX_TIM2_Init();
 8022e70:	f000 fa6c 	bl	802334c <MX_TIM2_Init>
  MX_TIM5_Init();
 8022e74:	f000 fb86 	bl	8023584 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  Init();
 8022e78:	f003 f956 	bl	8026128 <Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8022e7c:	e7fe      	b.n	8022e7c <main+0x4c>
	...

08022e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8022e80:	b580      	push	{r7, lr}
 8022e82:	b094      	sub	sp, #80	; 0x50
 8022e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8022e86:	f107 0320 	add.w	r3, r7, #32
 8022e8a:	2230      	movs	r2, #48	; 0x30
 8022e8c:	2100      	movs	r1, #0
 8022e8e:	4618      	mov	r0, r3
 8022e90:	f007 fb15 	bl	802a4be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8022e94:	f107 030c 	add.w	r3, r7, #12
 8022e98:	2200      	movs	r2, #0
 8022e9a:	601a      	str	r2, [r3, #0]
 8022e9c:	605a      	str	r2, [r3, #4]
 8022e9e:	609a      	str	r2, [r3, #8]
 8022ea0:	60da      	str	r2, [r3, #12]
 8022ea2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8022ea4:	2300      	movs	r3, #0
 8022ea6:	60bb      	str	r3, [r7, #8]
 8022ea8:	4b28      	ldr	r3, [pc, #160]	; (8022f4c <SystemClock_Config+0xcc>)
 8022eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022eac:	4a27      	ldr	r2, [pc, #156]	; (8022f4c <SystemClock_Config+0xcc>)
 8022eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8022eb2:	6413      	str	r3, [r2, #64]	; 0x40
 8022eb4:	4b25      	ldr	r3, [pc, #148]	; (8022f4c <SystemClock_Config+0xcc>)
 8022eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022ebc:	60bb      	str	r3, [r7, #8]
 8022ebe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8022ec0:	2300      	movs	r3, #0
 8022ec2:	607b      	str	r3, [r7, #4]
 8022ec4:	4b22      	ldr	r3, [pc, #136]	; (8022f50 <SystemClock_Config+0xd0>)
 8022ec6:	681b      	ldr	r3, [r3, #0]
 8022ec8:	4a21      	ldr	r2, [pc, #132]	; (8022f50 <SystemClock_Config+0xd0>)
 8022eca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8022ece:	6013      	str	r3, [r2, #0]
 8022ed0:	4b1f      	ldr	r3, [pc, #124]	; (8022f50 <SystemClock_Config+0xd0>)
 8022ed2:	681b      	ldr	r3, [r3, #0]
 8022ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8022ed8:	607b      	str	r3, [r7, #4]
 8022eda:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8022edc:	2301      	movs	r3, #1
 8022ede:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8022ee0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8022ee4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8022ee6:	2302      	movs	r3, #2
 8022ee8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8022eea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8022eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8022ef0:	2306      	movs	r3, #6
 8022ef2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8022ef4:	23a8      	movs	r3, #168	; 0xa8
 8022ef6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8022ef8:	2302      	movs	r3, #2
 8022efa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8022efc:	2304      	movs	r3, #4
 8022efe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8022f00:	f107 0320 	add.w	r3, r7, #32
 8022f04:	4618      	mov	r0, r3
 8022f06:	f005 f8cb 	bl	80280a0 <HAL_RCC_OscConfig>
 8022f0a:	4603      	mov	r3, r0
 8022f0c:	2b00      	cmp	r3, #0
 8022f0e:	d001      	beq.n	8022f14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8022f10:	f000 fdce 	bl	8023ab0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8022f14:	230f      	movs	r3, #15
 8022f16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8022f18:	2302      	movs	r3, #2
 8022f1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8022f1c:	2300      	movs	r3, #0
 8022f1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8022f20:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8022f24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8022f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8022f2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8022f2c:	f107 030c 	add.w	r3, r7, #12
 8022f30:	2105      	movs	r1, #5
 8022f32:	4618      	mov	r0, r3
 8022f34:	f005 fb24 	bl	8028580 <HAL_RCC_ClockConfig>
 8022f38:	4603      	mov	r3, r0
 8022f3a:	2b00      	cmp	r3, #0
 8022f3c:	d001      	beq.n	8022f42 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8022f3e:	f000 fdb7 	bl	8023ab0 <Error_Handler>
  }
}
 8022f42:	bf00      	nop
 8022f44:	3750      	adds	r7, #80	; 0x50
 8022f46:	46bd      	mov	sp, r7
 8022f48:	bd80      	pop	{r7, pc}
 8022f4a:	bf00      	nop
 8022f4c:	40023800 	.word	0x40023800
 8022f50:	40007000 	.word	0x40007000

08022f54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8022f54:	b580      	push	{r7, lr}
 8022f56:	b084      	sub	sp, #16
 8022f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8022f5a:	463b      	mov	r3, r7
 8022f5c:	2200      	movs	r2, #0
 8022f5e:	601a      	str	r2, [r3, #0]
 8022f60:	605a      	str	r2, [r3, #4]
 8022f62:	609a      	str	r2, [r3, #8]
 8022f64:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8022f66:	4b7c      	ldr	r3, [pc, #496]	; (8023158 <MX_ADC1_Init+0x204>)
 8022f68:	4a7c      	ldr	r2, [pc, #496]	; (802315c <MX_ADC1_Init+0x208>)
 8022f6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8022f6c:	4b7a      	ldr	r3, [pc, #488]	; (8023158 <MX_ADC1_Init+0x204>)
 8022f6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8022f72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8022f74:	4b78      	ldr	r3, [pc, #480]	; (8023158 <MX_ADC1_Init+0x204>)
 8022f76:	2200      	movs	r2, #0
 8022f78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8022f7a:	4b77      	ldr	r3, [pc, #476]	; (8023158 <MX_ADC1_Init+0x204>)
 8022f7c:	2201      	movs	r2, #1
 8022f7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8022f80:	4b75      	ldr	r3, [pc, #468]	; (8023158 <MX_ADC1_Init+0x204>)
 8022f82:	2201      	movs	r2, #1
 8022f84:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8022f86:	4b74      	ldr	r3, [pc, #464]	; (8023158 <MX_ADC1_Init+0x204>)
 8022f88:	2200      	movs	r2, #0
 8022f8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8022f8e:	4b72      	ldr	r3, [pc, #456]	; (8023158 <MX_ADC1_Init+0x204>)
 8022f90:	2200      	movs	r2, #0
 8022f92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8022f94:	4b70      	ldr	r3, [pc, #448]	; (8023158 <MX_ADC1_Init+0x204>)
 8022f96:	4a72      	ldr	r2, [pc, #456]	; (8023160 <MX_ADC1_Init+0x20c>)
 8022f98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8022f9a:	4b6f      	ldr	r3, [pc, #444]	; (8023158 <MX_ADC1_Init+0x204>)
 8022f9c:	2200      	movs	r2, #0
 8022f9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8022fa0:	4b6d      	ldr	r3, [pc, #436]	; (8023158 <MX_ADC1_Init+0x204>)
 8022fa2:	220e      	movs	r2, #14
 8022fa4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8022fa6:	4b6c      	ldr	r3, [pc, #432]	; (8023158 <MX_ADC1_Init+0x204>)
 8022fa8:	2201      	movs	r2, #1
 8022faa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8022fae:	4b6a      	ldr	r3, [pc, #424]	; (8023158 <MX_ADC1_Init+0x204>)
 8022fb0:	2201      	movs	r2, #1
 8022fb2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8022fb4:	4868      	ldr	r0, [pc, #416]	; (8023158 <MX_ADC1_Init+0x204>)
 8022fb6:	f003 fa25 	bl	8026404 <HAL_ADC_Init>
 8022fba:	4603      	mov	r3, r0
 8022fbc:	2b00      	cmp	r3, #0
 8022fbe:	d001      	beq.n	8022fc4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8022fc0:	f000 fd76 	bl	8023ab0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8022fc4:	2303      	movs	r3, #3
 8022fc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8022fc8:	2301      	movs	r3, #1
 8022fca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8022fcc:	2301      	movs	r3, #1
 8022fce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8022fd0:	463b      	mov	r3, r7
 8022fd2:	4619      	mov	r1, r3
 8022fd4:	4860      	ldr	r0, [pc, #384]	; (8023158 <MX_ADC1_Init+0x204>)
 8022fd6:	f003 fb69 	bl	80266ac <HAL_ADC_ConfigChannel>
 8022fda:	4603      	mov	r3, r0
 8022fdc:	2b00      	cmp	r3, #0
 8022fde:	d001      	beq.n	8022fe4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8022fe0:	f000 fd66 	bl	8023ab0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8022fe4:	2304      	movs	r3, #4
 8022fe6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8022fe8:	2302      	movs	r3, #2
 8022fea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8022fec:	463b      	mov	r3, r7
 8022fee:	4619      	mov	r1, r3
 8022ff0:	4859      	ldr	r0, [pc, #356]	; (8023158 <MX_ADC1_Init+0x204>)
 8022ff2:	f003 fb5b 	bl	80266ac <HAL_ADC_ConfigChannel>
 8022ff6:	4603      	mov	r3, r0
 8022ff8:	2b00      	cmp	r3, #0
 8022ffa:	d001      	beq.n	8023000 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8022ffc:	f000 fd58 	bl	8023ab0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8023000:	2305      	movs	r3, #5
 8023002:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8023004:	2303      	movs	r3, #3
 8023006:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023008:	463b      	mov	r3, r7
 802300a:	4619      	mov	r1, r3
 802300c:	4852      	ldr	r0, [pc, #328]	; (8023158 <MX_ADC1_Init+0x204>)
 802300e:	f003 fb4d 	bl	80266ac <HAL_ADC_ConfigChannel>
 8023012:	4603      	mov	r3, r0
 8023014:	2b00      	cmp	r3, #0
 8023016:	d001      	beq.n	802301c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8023018:	f000 fd4a 	bl	8023ab0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 802301c:	2306      	movs	r3, #6
 802301e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8023020:	2304      	movs	r3, #4
 8023022:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023024:	463b      	mov	r3, r7
 8023026:	4619      	mov	r1, r3
 8023028:	484b      	ldr	r0, [pc, #300]	; (8023158 <MX_ADC1_Init+0x204>)
 802302a:	f003 fb3f 	bl	80266ac <HAL_ADC_ConfigChannel>
 802302e:	4603      	mov	r3, r0
 8023030:	2b00      	cmp	r3, #0
 8023032:	d001      	beq.n	8023038 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8023034:	f000 fd3c 	bl	8023ab0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8023038:	2307      	movs	r3, #7
 802303a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 802303c:	2305      	movs	r3, #5
 802303e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023040:	463b      	mov	r3, r7
 8023042:	4619      	mov	r1, r3
 8023044:	4844      	ldr	r0, [pc, #272]	; (8023158 <MX_ADC1_Init+0x204>)
 8023046:	f003 fb31 	bl	80266ac <HAL_ADC_ConfigChannel>
 802304a:	4603      	mov	r3, r0
 802304c:	2b00      	cmp	r3, #0
 802304e:	d001      	beq.n	8023054 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8023050:	f000 fd2e 	bl	8023ab0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8023054:	230e      	movs	r3, #14
 8023056:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8023058:	2306      	movs	r3, #6
 802305a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802305c:	463b      	mov	r3, r7
 802305e:	4619      	mov	r1, r3
 8023060:	483d      	ldr	r0, [pc, #244]	; (8023158 <MX_ADC1_Init+0x204>)
 8023062:	f003 fb23 	bl	80266ac <HAL_ADC_ConfigChannel>
 8023066:	4603      	mov	r3, r0
 8023068:	2b00      	cmp	r3, #0
 802306a:	d001      	beq.n	8023070 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 802306c:	f000 fd20 	bl	8023ab0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8023070:	230f      	movs	r3, #15
 8023072:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8023074:	2307      	movs	r3, #7
 8023076:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023078:	463b      	mov	r3, r7
 802307a:	4619      	mov	r1, r3
 802307c:	4836      	ldr	r0, [pc, #216]	; (8023158 <MX_ADC1_Init+0x204>)
 802307e:	f003 fb15 	bl	80266ac <HAL_ADC_ConfigChannel>
 8023082:	4603      	mov	r3, r0
 8023084:	2b00      	cmp	r3, #0
 8023086:	d001      	beq.n	802308c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8023088:	f000 fd12 	bl	8023ab0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 802308c:	230a      	movs	r3, #10
 802308e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8023090:	2308      	movs	r3, #8
 8023092:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023094:	463b      	mov	r3, r7
 8023096:	4619      	mov	r1, r3
 8023098:	482f      	ldr	r0, [pc, #188]	; (8023158 <MX_ADC1_Init+0x204>)
 802309a:	f003 fb07 	bl	80266ac <HAL_ADC_ConfigChannel>
 802309e:	4603      	mov	r3, r0
 80230a0:	2b00      	cmp	r3, #0
 80230a2:	d001      	beq.n	80230a8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80230a4:	f000 fd04 	bl	8023ab0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80230a8:	230b      	movs	r3, #11
 80230aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80230ac:	2309      	movs	r3, #9
 80230ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80230b0:	463b      	mov	r3, r7
 80230b2:	4619      	mov	r1, r3
 80230b4:	4828      	ldr	r0, [pc, #160]	; (8023158 <MX_ADC1_Init+0x204>)
 80230b6:	f003 faf9 	bl	80266ac <HAL_ADC_ConfigChannel>
 80230ba:	4603      	mov	r3, r0
 80230bc:	2b00      	cmp	r3, #0
 80230be:	d001      	beq.n	80230c4 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80230c0:	f000 fcf6 	bl	8023ab0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80230c4:	230c      	movs	r3, #12
 80230c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80230c8:	230a      	movs	r3, #10
 80230ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80230cc:	463b      	mov	r3, r7
 80230ce:	4619      	mov	r1, r3
 80230d0:	4821      	ldr	r0, [pc, #132]	; (8023158 <MX_ADC1_Init+0x204>)
 80230d2:	f003 faeb 	bl	80266ac <HAL_ADC_ConfigChannel>
 80230d6:	4603      	mov	r3, r0
 80230d8:	2b00      	cmp	r3, #0
 80230da:	d001      	beq.n	80230e0 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80230dc:	f000 fce8 	bl	8023ab0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80230e0:	230d      	movs	r3, #13
 80230e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80230e4:	230b      	movs	r3, #11
 80230e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80230e8:	463b      	mov	r3, r7
 80230ea:	4619      	mov	r1, r3
 80230ec:	481a      	ldr	r0, [pc, #104]	; (8023158 <MX_ADC1_Init+0x204>)
 80230ee:	f003 fadd 	bl	80266ac <HAL_ADC_ConfigChannel>
 80230f2:	4603      	mov	r3, r0
 80230f4:	2b00      	cmp	r3, #0
 80230f6:	d001      	beq.n	80230fc <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 80230f8:	f000 fcda 	bl	8023ab0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80230fc:	2302      	movs	r3, #2
 80230fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8023100:	230c      	movs	r3, #12
 8023102:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023104:	463b      	mov	r3, r7
 8023106:	4619      	mov	r1, r3
 8023108:	4813      	ldr	r0, [pc, #76]	; (8023158 <MX_ADC1_Init+0x204>)
 802310a:	f003 facf 	bl	80266ac <HAL_ADC_ConfigChannel>
 802310e:	4603      	mov	r3, r0
 8023110:	2b00      	cmp	r3, #0
 8023112:	d001      	beq.n	8023118 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8023114:	f000 fccc 	bl	8023ab0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8023118:	2301      	movs	r3, #1
 802311a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 802311c:	230d      	movs	r3, #13
 802311e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023120:	463b      	mov	r3, r7
 8023122:	4619      	mov	r1, r3
 8023124:	480c      	ldr	r0, [pc, #48]	; (8023158 <MX_ADC1_Init+0x204>)
 8023126:	f003 fac1 	bl	80266ac <HAL_ADC_ConfigChannel>
 802312a:	4603      	mov	r3, r0
 802312c:	2b00      	cmp	r3, #0
 802312e:	d001      	beq.n	8023134 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8023130:	f000 fcbe 	bl	8023ab0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8023134:	2300      	movs	r3, #0
 8023136:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8023138:	230e      	movs	r3, #14
 802313a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802313c:	463b      	mov	r3, r7
 802313e:	4619      	mov	r1, r3
 8023140:	4805      	ldr	r0, [pc, #20]	; (8023158 <MX_ADC1_Init+0x204>)
 8023142:	f003 fab3 	bl	80266ac <HAL_ADC_ConfigChannel>
 8023146:	4603      	mov	r3, r0
 8023148:	2b00      	cmp	r3, #0
 802314a:	d001      	beq.n	8023150 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 802314c:	f000 fcb0 	bl	8023ab0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8023150:	bf00      	nop
 8023152:	3710      	adds	r7, #16
 8023154:	46bd      	mov	sp, r7
 8023156:	bd80      	pop	{r7, pc}
 8023158:	20014368 	.word	0x20014368
 802315c:	40012000 	.word	0x40012000
 8023160:	0f000001 	.word	0x0f000001

08023164 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8023164:	b580      	push	{r7, lr}
 8023166:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8023168:	4b12      	ldr	r3, [pc, #72]	; (80231b4 <MX_I2C2_Init+0x50>)
 802316a:	4a13      	ldr	r2, [pc, #76]	; (80231b8 <MX_I2C2_Init+0x54>)
 802316c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 802316e:	4b11      	ldr	r3, [pc, #68]	; (80231b4 <MX_I2C2_Init+0x50>)
 8023170:	4a12      	ldr	r2, [pc, #72]	; (80231bc <MX_I2C2_Init+0x58>)
 8023172:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8023174:	4b0f      	ldr	r3, [pc, #60]	; (80231b4 <MX_I2C2_Init+0x50>)
 8023176:	2200      	movs	r2, #0
 8023178:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 802317a:	4b0e      	ldr	r3, [pc, #56]	; (80231b4 <MX_I2C2_Init+0x50>)
 802317c:	2200      	movs	r2, #0
 802317e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8023180:	4b0c      	ldr	r3, [pc, #48]	; (80231b4 <MX_I2C2_Init+0x50>)
 8023182:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8023186:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8023188:	4b0a      	ldr	r3, [pc, #40]	; (80231b4 <MX_I2C2_Init+0x50>)
 802318a:	2200      	movs	r2, #0
 802318c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 802318e:	4b09      	ldr	r3, [pc, #36]	; (80231b4 <MX_I2C2_Init+0x50>)
 8023190:	2200      	movs	r2, #0
 8023192:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8023194:	4b07      	ldr	r3, [pc, #28]	; (80231b4 <MX_I2C2_Init+0x50>)
 8023196:	2200      	movs	r2, #0
 8023198:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 802319a:	4b06      	ldr	r3, [pc, #24]	; (80231b4 <MX_I2C2_Init+0x50>)
 802319c:	2200      	movs	r2, #0
 802319e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80231a0:	4804      	ldr	r0, [pc, #16]	; (80231b4 <MX_I2C2_Init+0x50>)
 80231a2:	f004 fe45 	bl	8027e30 <HAL_I2C_Init>
 80231a6:	4603      	mov	r3, r0
 80231a8:	2b00      	cmp	r3, #0
 80231aa:	d001      	beq.n	80231b0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80231ac:	f000 fc80 	bl	8023ab0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80231b0:	bf00      	nop
 80231b2:	bd80      	pop	{r7, pc}
 80231b4:	200111cc 	.word	0x200111cc
 80231b8:	40005800 	.word	0x40005800
 80231bc:	000186a0 	.word	0x000186a0

080231c0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80231c0:	b580      	push	{r7, lr}
 80231c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80231c4:	4b17      	ldr	r3, [pc, #92]	; (8023224 <MX_SPI3_Init+0x64>)
 80231c6:	4a18      	ldr	r2, [pc, #96]	; (8023228 <MX_SPI3_Init+0x68>)
 80231c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80231ca:	4b16      	ldr	r3, [pc, #88]	; (8023224 <MX_SPI3_Init+0x64>)
 80231cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80231d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80231d2:	4b14      	ldr	r3, [pc, #80]	; (8023224 <MX_SPI3_Init+0x64>)
 80231d4:	2200      	movs	r2, #0
 80231d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80231d8:	4b12      	ldr	r3, [pc, #72]	; (8023224 <MX_SPI3_Init+0x64>)
 80231da:	2200      	movs	r2, #0
 80231dc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80231de:	4b11      	ldr	r3, [pc, #68]	; (8023224 <MX_SPI3_Init+0x64>)
 80231e0:	2200      	movs	r2, #0
 80231e2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80231e4:	4b0f      	ldr	r3, [pc, #60]	; (8023224 <MX_SPI3_Init+0x64>)
 80231e6:	2200      	movs	r2, #0
 80231e8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80231ea:	4b0e      	ldr	r3, [pc, #56]	; (8023224 <MX_SPI3_Init+0x64>)
 80231ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80231f0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80231f2:	4b0c      	ldr	r3, [pc, #48]	; (8023224 <MX_SPI3_Init+0x64>)
 80231f4:	2238      	movs	r2, #56	; 0x38
 80231f6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80231f8:	4b0a      	ldr	r3, [pc, #40]	; (8023224 <MX_SPI3_Init+0x64>)
 80231fa:	2200      	movs	r2, #0
 80231fc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80231fe:	4b09      	ldr	r3, [pc, #36]	; (8023224 <MX_SPI3_Init+0x64>)
 8023200:	2200      	movs	r2, #0
 8023202:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8023204:	4b07      	ldr	r3, [pc, #28]	; (8023224 <MX_SPI3_Init+0x64>)
 8023206:	2200      	movs	r2, #0
 8023208:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 802320a:	4b06      	ldr	r3, [pc, #24]	; (8023224 <MX_SPI3_Init+0x64>)
 802320c:	220a      	movs	r2, #10
 802320e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8023210:	4804      	ldr	r0, [pc, #16]	; (8023224 <MX_SPI3_Init+0x64>)
 8023212:	f005 fb6d 	bl	80288f0 <HAL_SPI_Init>
 8023216:	4603      	mov	r3, r0
 8023218:	2b00      	cmp	r3, #0
 802321a:	d001      	beq.n	8023220 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 802321c:	f000 fc48 	bl	8023ab0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8023220:	bf00      	nop
 8023222:	bd80      	pop	{r7, pc}
 8023224:	20014310 	.word	0x20014310
 8023228:	40003c00 	.word	0x40003c00

0802322c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 802322c:	b580      	push	{r7, lr}
 802322e:	b092      	sub	sp, #72	; 0x48
 8023230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023232:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8023236:	2200      	movs	r2, #0
 8023238:	601a      	str	r2, [r3, #0]
 802323a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 802323c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8023240:	2200      	movs	r2, #0
 8023242:	601a      	str	r2, [r3, #0]
 8023244:	605a      	str	r2, [r3, #4]
 8023246:	609a      	str	r2, [r3, #8]
 8023248:	60da      	str	r2, [r3, #12]
 802324a:	611a      	str	r2, [r3, #16]
 802324c:	615a      	str	r2, [r3, #20]
 802324e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8023250:	1d3b      	adds	r3, r7, #4
 8023252:	2220      	movs	r2, #32
 8023254:	2100      	movs	r1, #0
 8023256:	4618      	mov	r0, r3
 8023258:	f007 f931 	bl	802a4be <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 802325c:	4b39      	ldr	r3, [pc, #228]	; (8023344 <MX_TIM1_Init+0x118>)
 802325e:	4a3a      	ldr	r2, [pc, #232]	; (8023348 <MX_TIM1_Init+0x11c>)
 8023260:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8023262:	4b38      	ldr	r3, [pc, #224]	; (8023344 <MX_TIM1_Init+0x118>)
 8023264:	2201      	movs	r2, #1
 8023266:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023268:	4b36      	ldr	r3, [pc, #216]	; (8023344 <MX_TIM1_Init+0x118>)
 802326a:	2200      	movs	r2, #0
 802326c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1049;
 802326e:	4b35      	ldr	r3, [pc, #212]	; (8023344 <MX_TIM1_Init+0x118>)
 8023270:	f240 4219 	movw	r2, #1049	; 0x419
 8023274:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023276:	4b33      	ldr	r3, [pc, #204]	; (8023344 <MX_TIM1_Init+0x118>)
 8023278:	2200      	movs	r2, #0
 802327a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 802327c:	4b31      	ldr	r3, [pc, #196]	; (8023344 <MX_TIM1_Init+0x118>)
 802327e:	2200      	movs	r2, #0
 8023280:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023282:	4b30      	ldr	r3, [pc, #192]	; (8023344 <MX_TIM1_Init+0x118>)
 8023284:	2200      	movs	r2, #0
 8023286:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8023288:	482e      	ldr	r0, [pc, #184]	; (8023344 <MX_TIM1_Init+0x118>)
 802328a:	f006 f8ff 	bl	802948c <HAL_TIM_PWM_Init>
 802328e:	4603      	mov	r3, r0
 8023290:	2b00      	cmp	r3, #0
 8023292:	d001      	beq.n	8023298 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8023294:	f000 fc0c 	bl	8023ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023298:	2300      	movs	r3, #0
 802329a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802329c:	2300      	movs	r3, #0
 802329e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80232a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80232a4:	4619      	mov	r1, r3
 80232a6:	4827      	ldr	r0, [pc, #156]	; (8023344 <MX_TIM1_Init+0x118>)
 80232a8:	f006 ffe2 	bl	802a270 <HAL_TIMEx_MasterConfigSynchronization>
 80232ac:	4603      	mov	r3, r0
 80232ae:	2b00      	cmp	r3, #0
 80232b0:	d001      	beq.n	80232b6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80232b2:	f000 fbfd 	bl	8023ab0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80232b6:	2360      	movs	r3, #96	; 0x60
 80232b8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80232ba:	2300      	movs	r3, #0
 80232bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80232be:	2300      	movs	r3, #0
 80232c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80232c2:	2300      	movs	r3, #0
 80232c4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80232c6:	2300      	movs	r3, #0
 80232c8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80232ca:	2300      	movs	r3, #0
 80232cc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80232ce:	2300      	movs	r3, #0
 80232d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80232d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80232d6:	2204      	movs	r2, #4
 80232d8:	4619      	mov	r1, r3
 80232da:	481a      	ldr	r0, [pc, #104]	; (8023344 <MX_TIM1_Init+0x118>)
 80232dc:	f006 fb12 	bl	8029904 <HAL_TIM_PWM_ConfigChannel>
 80232e0:	4603      	mov	r3, r0
 80232e2:	2b00      	cmp	r3, #0
 80232e4:	d001      	beq.n	80232ea <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80232e6:	f000 fbe3 	bl	8023ab0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80232ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80232ee:	220c      	movs	r2, #12
 80232f0:	4619      	mov	r1, r3
 80232f2:	4814      	ldr	r0, [pc, #80]	; (8023344 <MX_TIM1_Init+0x118>)
 80232f4:	f006 fb06 	bl	8029904 <HAL_TIM_PWM_ConfigChannel>
 80232f8:	4603      	mov	r3, r0
 80232fa:	2b00      	cmp	r3, #0
 80232fc:	d001      	beq.n	8023302 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80232fe:	f000 fbd7 	bl	8023ab0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8023302:	2300      	movs	r3, #0
 8023304:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8023306:	2300      	movs	r3, #0
 8023308:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 802330a:	2300      	movs	r3, #0
 802330c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 802330e:	2300      	movs	r3, #0
 8023310:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8023312:	2300      	movs	r3, #0
 8023314:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8023316:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802331a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 802331c:	2300      	movs	r3, #0
 802331e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8023320:	1d3b      	adds	r3, r7, #4
 8023322:	4619      	mov	r1, r3
 8023324:	4807      	ldr	r0, [pc, #28]	; (8023344 <MX_TIM1_Init+0x118>)
 8023326:	f007 f81f 	bl	802a368 <HAL_TIMEx_ConfigBreakDeadTime>
 802332a:	4603      	mov	r3, r0
 802332c:	2b00      	cmp	r3, #0
 802332e:	d001      	beq.n	8023334 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8023330:	f000 fbbe 	bl	8023ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8023334:	4803      	ldr	r0, [pc, #12]	; (8023344 <MX_TIM1_Init+0x118>)
 8023336:	f002 fb6d 	bl	8025a14 <HAL_TIM_MspPostInit>

}
 802333a:	bf00      	nop
 802333c:	3748      	adds	r7, #72	; 0x48
 802333e:	46bd      	mov	sp, r7
 8023340:	bd80      	pop	{r7, pc}
 8023342:	bf00      	nop
 8023344:	20017500 	.word	0x20017500
 8023348:	40010000 	.word	0x40010000

0802334c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 802334c:	b580      	push	{r7, lr}
 802334e:	b086      	sub	sp, #24
 8023350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8023352:	f107 0308 	add.w	r3, r7, #8
 8023356:	2200      	movs	r2, #0
 8023358:	601a      	str	r2, [r3, #0]
 802335a:	605a      	str	r2, [r3, #4]
 802335c:	609a      	str	r2, [r3, #8]
 802335e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023360:	463b      	mov	r3, r7
 8023362:	2200      	movs	r2, #0
 8023364:	601a      	str	r2, [r3, #0]
 8023366:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8023368:	4b1d      	ldr	r3, [pc, #116]	; (80233e0 <MX_TIM2_Init+0x94>)
 802336a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802336e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8023370:	4b1b      	ldr	r3, [pc, #108]	; (80233e0 <MX_TIM2_Init+0x94>)
 8023372:	2204      	movs	r2, #4
 8023374:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023376:	4b1a      	ldr	r3, [pc, #104]	; (80233e0 <MX_TIM2_Init+0x94>)
 8023378:	2200      	movs	r2, #0
 802337a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 104999;
 802337c:	4b18      	ldr	r3, [pc, #96]	; (80233e0 <MX_TIM2_Init+0x94>)
 802337e:	4a19      	ldr	r2, [pc, #100]	; (80233e4 <MX_TIM2_Init+0x98>)
 8023380:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023382:	4b17      	ldr	r3, [pc, #92]	; (80233e0 <MX_TIM2_Init+0x94>)
 8023384:	2200      	movs	r2, #0
 8023386:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023388:	4b15      	ldr	r3, [pc, #84]	; (80233e0 <MX_TIM2_Init+0x94>)
 802338a:	2200      	movs	r2, #0
 802338c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 802338e:	4814      	ldr	r0, [pc, #80]	; (80233e0 <MX_TIM2_Init+0x94>)
 8023390:	f006 f802 	bl	8029398 <HAL_TIM_Base_Init>
 8023394:	4603      	mov	r3, r0
 8023396:	2b00      	cmp	r3, #0
 8023398:	d001      	beq.n	802339e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 802339a:	f000 fb89 	bl	8023ab0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802339e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80233a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80233a4:	f107 0308 	add.w	r3, r7, #8
 80233a8:	4619      	mov	r1, r3
 80233aa:	480d      	ldr	r0, [pc, #52]	; (80233e0 <MX_TIM2_Init+0x94>)
 80233ac:	f006 fb70 	bl	8029a90 <HAL_TIM_ConfigClockSource>
 80233b0:	4603      	mov	r3, r0
 80233b2:	2b00      	cmp	r3, #0
 80233b4:	d001      	beq.n	80233ba <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80233b6:	f000 fb7b 	bl	8023ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80233ba:	2300      	movs	r3, #0
 80233bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80233be:	2300      	movs	r3, #0
 80233c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80233c2:	463b      	mov	r3, r7
 80233c4:	4619      	mov	r1, r3
 80233c6:	4806      	ldr	r0, [pc, #24]	; (80233e0 <MX_TIM2_Init+0x94>)
 80233c8:	f006 ff52 	bl	802a270 <HAL_TIMEx_MasterConfigSynchronization>
 80233cc:	4603      	mov	r3, r0
 80233ce:	2b00      	cmp	r3, #0
 80233d0:	d001      	beq.n	80233d6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80233d2:	f000 fb6d 	bl	8023ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80233d6:	bf00      	nop
 80233d8:	3718      	adds	r7, #24
 80233da:	46bd      	mov	sp, r7
 80233dc:	bd80      	pop	{r7, pc}
 80233de:	bf00      	nop
 80233e0:	20017540 	.word	0x20017540
 80233e4:	00019a27 	.word	0x00019a27

080233e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80233e8:	b580      	push	{r7, lr}
 80233ea:	b08a      	sub	sp, #40	; 0x28
 80233ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80233ee:	f107 0320 	add.w	r3, r7, #32
 80233f2:	2200      	movs	r2, #0
 80233f4:	601a      	str	r2, [r3, #0]
 80233f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80233f8:	1d3b      	adds	r3, r7, #4
 80233fa:	2200      	movs	r2, #0
 80233fc:	601a      	str	r2, [r3, #0]
 80233fe:	605a      	str	r2, [r3, #4]
 8023400:	609a      	str	r2, [r3, #8]
 8023402:	60da      	str	r2, [r3, #12]
 8023404:	611a      	str	r2, [r3, #16]
 8023406:	615a      	str	r2, [r3, #20]
 8023408:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 802340a:	4b32      	ldr	r3, [pc, #200]	; (80234d4 <MX_TIM3_Init+0xec>)
 802340c:	4a32      	ldr	r2, [pc, #200]	; (80234d8 <MX_TIM3_Init+0xf0>)
 802340e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8023410:	4b30      	ldr	r3, [pc, #192]	; (80234d4 <MX_TIM3_Init+0xec>)
 8023412:	2200      	movs	r2, #0
 8023414:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023416:	4b2f      	ldr	r3, [pc, #188]	; (80234d4 <MX_TIM3_Init+0xec>)
 8023418:	2200      	movs	r2, #0
 802341a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 802341c:	4b2d      	ldr	r3, [pc, #180]	; (80234d4 <MX_TIM3_Init+0xec>)
 802341e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023422:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023424:	4b2b      	ldr	r3, [pc, #172]	; (80234d4 <MX_TIM3_Init+0xec>)
 8023426:	2200      	movs	r2, #0
 8023428:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802342a:	4b2a      	ldr	r3, [pc, #168]	; (80234d4 <MX_TIM3_Init+0xec>)
 802342c:	2200      	movs	r2, #0
 802342e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8023430:	4828      	ldr	r0, [pc, #160]	; (80234d4 <MX_TIM3_Init+0xec>)
 8023432:	f006 f82b 	bl	802948c <HAL_TIM_PWM_Init>
 8023436:	4603      	mov	r3, r0
 8023438:	2b00      	cmp	r3, #0
 802343a:	d001      	beq.n	8023440 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 802343c:	f000 fb38 	bl	8023ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023440:	2300      	movs	r3, #0
 8023442:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023444:	2300      	movs	r3, #0
 8023446:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8023448:	f107 0320 	add.w	r3, r7, #32
 802344c:	4619      	mov	r1, r3
 802344e:	4821      	ldr	r0, [pc, #132]	; (80234d4 <MX_TIM3_Init+0xec>)
 8023450:	f006 ff0e 	bl	802a270 <HAL_TIMEx_MasterConfigSynchronization>
 8023454:	4603      	mov	r3, r0
 8023456:	2b00      	cmp	r3, #0
 8023458:	d001      	beq.n	802345e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 802345a:	f000 fb29 	bl	8023ab0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 802345e:	2360      	movs	r3, #96	; 0x60
 8023460:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8023462:	2300      	movs	r3, #0
 8023464:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8023466:	2300      	movs	r3, #0
 8023468:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 802346a:	2300      	movs	r3, #0
 802346c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 802346e:	1d3b      	adds	r3, r7, #4
 8023470:	2200      	movs	r2, #0
 8023472:	4619      	mov	r1, r3
 8023474:	4817      	ldr	r0, [pc, #92]	; (80234d4 <MX_TIM3_Init+0xec>)
 8023476:	f006 fa45 	bl	8029904 <HAL_TIM_PWM_ConfigChannel>
 802347a:	4603      	mov	r3, r0
 802347c:	2b00      	cmp	r3, #0
 802347e:	d001      	beq.n	8023484 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8023480:	f000 fb16 	bl	8023ab0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8023484:	1d3b      	adds	r3, r7, #4
 8023486:	2204      	movs	r2, #4
 8023488:	4619      	mov	r1, r3
 802348a:	4812      	ldr	r0, [pc, #72]	; (80234d4 <MX_TIM3_Init+0xec>)
 802348c:	f006 fa3a 	bl	8029904 <HAL_TIM_PWM_ConfigChannel>
 8023490:	4603      	mov	r3, r0
 8023492:	2b00      	cmp	r3, #0
 8023494:	d001      	beq.n	802349a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8023496:	f000 fb0b 	bl	8023ab0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 802349a:	1d3b      	adds	r3, r7, #4
 802349c:	2208      	movs	r2, #8
 802349e:	4619      	mov	r1, r3
 80234a0:	480c      	ldr	r0, [pc, #48]	; (80234d4 <MX_TIM3_Init+0xec>)
 80234a2:	f006 fa2f 	bl	8029904 <HAL_TIM_PWM_ConfigChannel>
 80234a6:	4603      	mov	r3, r0
 80234a8:	2b00      	cmp	r3, #0
 80234aa:	d001      	beq.n	80234b0 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80234ac:	f000 fb00 	bl	8023ab0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80234b0:	1d3b      	adds	r3, r7, #4
 80234b2:	220c      	movs	r2, #12
 80234b4:	4619      	mov	r1, r3
 80234b6:	4807      	ldr	r0, [pc, #28]	; (80234d4 <MX_TIM3_Init+0xec>)
 80234b8:	f006 fa24 	bl	8029904 <HAL_TIM_PWM_ConfigChannel>
 80234bc:	4603      	mov	r3, r0
 80234be:	2b00      	cmp	r3, #0
 80234c0:	d001      	beq.n	80234c6 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80234c2:	f000 faf5 	bl	8023ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80234c6:	4803      	ldr	r0, [pc, #12]	; (80234d4 <MX_TIM3_Init+0xec>)
 80234c8:	f002 faa4 	bl	8025a14 <HAL_TIM_MspPostInit>

}
 80234cc:	bf00      	nop
 80234ce:	3728      	adds	r7, #40	; 0x28
 80234d0:	46bd      	mov	sp, r7
 80234d2:	bd80      	pop	{r7, pc}
 80234d4:	200142d0 	.word	0x200142d0
 80234d8:	40000400 	.word	0x40000400

080234dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80234dc:	b580      	push	{r7, lr}
 80234de:	b08c      	sub	sp, #48	; 0x30
 80234e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80234e2:	f107 030c 	add.w	r3, r7, #12
 80234e6:	2224      	movs	r2, #36	; 0x24
 80234e8:	2100      	movs	r1, #0
 80234ea:	4618      	mov	r0, r3
 80234ec:	f006 ffe7 	bl	802a4be <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80234f0:	1d3b      	adds	r3, r7, #4
 80234f2:	2200      	movs	r2, #0
 80234f4:	601a      	str	r2, [r3, #0]
 80234f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80234f8:	4b20      	ldr	r3, [pc, #128]	; (802357c <MX_TIM4_Init+0xa0>)
 80234fa:	4a21      	ldr	r2, [pc, #132]	; (8023580 <MX_TIM4_Init+0xa4>)
 80234fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80234fe:	4b1f      	ldr	r3, [pc, #124]	; (802357c <MX_TIM4_Init+0xa0>)
 8023500:	2200      	movs	r2, #0
 8023502:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023504:	4b1d      	ldr	r3, [pc, #116]	; (802357c <MX_TIM4_Init+0xa0>)
 8023506:	2200      	movs	r2, #0
 8023508:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 802350a:	4b1c      	ldr	r3, [pc, #112]	; (802357c <MX_TIM4_Init+0xa0>)
 802350c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023510:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023512:	4b1a      	ldr	r3, [pc, #104]	; (802357c <MX_TIM4_Init+0xa0>)
 8023514:	2200      	movs	r2, #0
 8023516:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023518:	4b18      	ldr	r3, [pc, #96]	; (802357c <MX_TIM4_Init+0xa0>)
 802351a:	2200      	movs	r2, #0
 802351c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 802351e:	2303      	movs	r3, #3
 8023520:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8023522:	2300      	movs	r3, #0
 8023524:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8023526:	2301      	movs	r3, #1
 8023528:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 802352a:	2300      	movs	r3, #0
 802352c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 802352e:	2300      	movs	r3, #0
 8023530:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8023532:	2300      	movs	r3, #0
 8023534:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8023536:	2301      	movs	r3, #1
 8023538:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 802353a:	2300      	movs	r3, #0
 802353c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 802353e:	2300      	movs	r3, #0
 8023540:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8023542:	f107 030c 	add.w	r3, r7, #12
 8023546:	4619      	mov	r1, r3
 8023548:	480c      	ldr	r0, [pc, #48]	; (802357c <MX_TIM4_Init+0xa0>)
 802354a:	f006 f809 	bl	8029560 <HAL_TIM_Encoder_Init>
 802354e:	4603      	mov	r3, r0
 8023550:	2b00      	cmp	r3, #0
 8023552:	d001      	beq.n	8023558 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8023554:	f000 faac 	bl	8023ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023558:	2300      	movs	r3, #0
 802355a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802355c:	2300      	movs	r3, #0
 802355e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8023560:	1d3b      	adds	r3, r7, #4
 8023562:	4619      	mov	r1, r3
 8023564:	4805      	ldr	r0, [pc, #20]	; (802357c <MX_TIM4_Init+0xa0>)
 8023566:	f006 fe83 	bl	802a270 <HAL_TIMEx_MasterConfigSynchronization>
 802356a:	4603      	mov	r3, r0
 802356c:	2b00      	cmp	r3, #0
 802356e:	d001      	beq.n	8023574 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8023570:	f000 fa9e 	bl	8023ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8023574:	bf00      	nop
 8023576:	3730      	adds	r7, #48	; 0x30
 8023578:	46bd      	mov	sp, r7
 802357a:	bd80      	pop	{r7, pc}
 802357c:	2001118c 	.word	0x2001118c
 8023580:	40000800 	.word	0x40000800

08023584 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8023584:	b580      	push	{r7, lr}
 8023586:	b086      	sub	sp, #24
 8023588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802358a:	f107 0308 	add.w	r3, r7, #8
 802358e:	2200      	movs	r2, #0
 8023590:	601a      	str	r2, [r3, #0]
 8023592:	605a      	str	r2, [r3, #4]
 8023594:	609a      	str	r2, [r3, #8]
 8023596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023598:	463b      	mov	r3, r7
 802359a:	2200      	movs	r2, #0
 802359c:	601a      	str	r2, [r3, #0]
 802359e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80235a0:	4b1d      	ldr	r3, [pc, #116]	; (8023618 <MX_TIM5_Init+0x94>)
 80235a2:	4a1e      	ldr	r2, [pc, #120]	; (802361c <MX_TIM5_Init+0x98>)
 80235a4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4;
 80235a6:	4b1c      	ldr	r3, [pc, #112]	; (8023618 <MX_TIM5_Init+0x94>)
 80235a8:	2204      	movs	r2, #4
 80235aa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80235ac:	4b1a      	ldr	r3, [pc, #104]	; (8023618 <MX_TIM5_Init+0x94>)
 80235ae:	2200      	movs	r2, #0
 80235b0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20999;
 80235b2:	4b19      	ldr	r3, [pc, #100]	; (8023618 <MX_TIM5_Init+0x94>)
 80235b4:	f245 2207 	movw	r2, #20999	; 0x5207
 80235b8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80235ba:	4b17      	ldr	r3, [pc, #92]	; (8023618 <MX_TIM5_Init+0x94>)
 80235bc:	2200      	movs	r2, #0
 80235be:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80235c0:	4b15      	ldr	r3, [pc, #84]	; (8023618 <MX_TIM5_Init+0x94>)
 80235c2:	2200      	movs	r2, #0
 80235c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80235c6:	4814      	ldr	r0, [pc, #80]	; (8023618 <MX_TIM5_Init+0x94>)
 80235c8:	f005 fee6 	bl	8029398 <HAL_TIM_Base_Init>
 80235cc:	4603      	mov	r3, r0
 80235ce:	2b00      	cmp	r3, #0
 80235d0:	d001      	beq.n	80235d6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80235d2:	f000 fa6d 	bl	8023ab0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80235d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80235da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80235dc:	f107 0308 	add.w	r3, r7, #8
 80235e0:	4619      	mov	r1, r3
 80235e2:	480d      	ldr	r0, [pc, #52]	; (8023618 <MX_TIM5_Init+0x94>)
 80235e4:	f006 fa54 	bl	8029a90 <HAL_TIM_ConfigClockSource>
 80235e8:	4603      	mov	r3, r0
 80235ea:	2b00      	cmp	r3, #0
 80235ec:	d001      	beq.n	80235f2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80235ee:	f000 fa5f 	bl	8023ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80235f2:	2300      	movs	r3, #0
 80235f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80235f6:	2300      	movs	r3, #0
 80235f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80235fa:	463b      	mov	r3, r7
 80235fc:	4619      	mov	r1, r3
 80235fe:	4806      	ldr	r0, [pc, #24]	; (8023618 <MX_TIM5_Init+0x94>)
 8023600:	f006 fe36 	bl	802a270 <HAL_TIMEx_MasterConfigSynchronization>
 8023604:	4603      	mov	r3, r0
 8023606:	2b00      	cmp	r3, #0
 8023608:	d001      	beq.n	802360e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 802360a:	f000 fa51 	bl	8023ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 802360e:	bf00      	nop
 8023610:	3718      	adds	r7, #24
 8023612:	46bd      	mov	sp, r7
 8023614:	bd80      	pop	{r7, pc}
 8023616:	bf00      	nop
 8023618:	20014290 	.word	0x20014290
 802361c:	40000c00 	.word	0x40000c00

08023620 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8023620:	b580      	push	{r7, lr}
 8023622:	b082      	sub	sp, #8
 8023624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023626:	463b      	mov	r3, r7
 8023628:	2200      	movs	r2, #0
 802362a:	601a      	str	r2, [r3, #0]
 802362c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 802362e:	4b15      	ldr	r3, [pc, #84]	; (8023684 <MX_TIM6_Init+0x64>)
 8023630:	4a15      	ldr	r2, [pc, #84]	; (8023688 <MX_TIM6_Init+0x68>)
 8023632:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 8023634:	4b13      	ldr	r3, [pc, #76]	; (8023684 <MX_TIM6_Init+0x64>)
 8023636:	2204      	movs	r2, #4
 8023638:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 802363a:	4b12      	ldr	r3, [pc, #72]	; (8023684 <MX_TIM6_Init+0x64>)
 802363c:	2200      	movs	r2, #0
 802363e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10499;
 8023640:	4b10      	ldr	r3, [pc, #64]	; (8023684 <MX_TIM6_Init+0x64>)
 8023642:	f642 1203 	movw	r2, #10499	; 0x2903
 8023646:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023648:	4b0e      	ldr	r3, [pc, #56]	; (8023684 <MX_TIM6_Init+0x64>)
 802364a:	2200      	movs	r2, #0
 802364c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 802364e:	480d      	ldr	r0, [pc, #52]	; (8023684 <MX_TIM6_Init+0x64>)
 8023650:	f005 fea2 	bl	8029398 <HAL_TIM_Base_Init>
 8023654:	4603      	mov	r3, r0
 8023656:	2b00      	cmp	r3, #0
 8023658:	d001      	beq.n	802365e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 802365a:	f000 fa29 	bl	8023ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802365e:	2300      	movs	r3, #0
 8023660:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023662:	2300      	movs	r3, #0
 8023664:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8023666:	463b      	mov	r3, r7
 8023668:	4619      	mov	r1, r3
 802366a:	4806      	ldr	r0, [pc, #24]	; (8023684 <MX_TIM6_Init+0x64>)
 802366c:	f006 fe00 	bl	802a270 <HAL_TIMEx_MasterConfigSynchronization>
 8023670:	4603      	mov	r3, r0
 8023672:	2b00      	cmp	r3, #0
 8023674:	d001      	beq.n	802367a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8023676:	f000 fa1b 	bl	8023ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 802367a:	bf00      	nop
 802367c:	3708      	adds	r7, #8
 802367e:	46bd      	mov	sp, r7
 8023680:	bd80      	pop	{r7, pc}
 8023682:	bf00      	nop
 8023684:	20014450 	.word	0x20014450
 8023688:	40001000 	.word	0x40001000

0802368c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 802368c:	b580      	push	{r7, lr}
 802368e:	b082      	sub	sp, #8
 8023690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023692:	463b      	mov	r3, r7
 8023694:	2200      	movs	r2, #0
 8023696:	601a      	str	r2, [r3, #0]
 8023698:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 802369a:	4b15      	ldr	r3, [pc, #84]	; (80236f0 <MX_TIM7_Init+0x64>)
 802369c:	4a15      	ldr	r2, [pc, #84]	; (80236f4 <MX_TIM7_Init+0x68>)
 802369e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 80236a0:	4b13      	ldr	r3, [pc, #76]	; (80236f0 <MX_TIM7_Init+0x64>)
 80236a2:	2204      	movs	r2, #4
 80236a4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80236a6:	4b12      	ldr	r3, [pc, #72]	; (80236f0 <MX_TIM7_Init+0x64>)
 80236a8:	2200      	movs	r2, #0
 80236aa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1049;
 80236ac:	4b10      	ldr	r3, [pc, #64]	; (80236f0 <MX_TIM7_Init+0x64>)
 80236ae:	f240 4219 	movw	r2, #1049	; 0x419
 80236b2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80236b4:	4b0e      	ldr	r3, [pc, #56]	; (80236f0 <MX_TIM7_Init+0x64>)
 80236b6:	2200      	movs	r2, #0
 80236b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80236ba:	480d      	ldr	r0, [pc, #52]	; (80236f0 <MX_TIM7_Init+0x64>)
 80236bc:	f005 fe6c 	bl	8029398 <HAL_TIM_Base_Init>
 80236c0:	4603      	mov	r3, r0
 80236c2:	2b00      	cmp	r3, #0
 80236c4:	d001      	beq.n	80236ca <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80236c6:	f000 f9f3 	bl	8023ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80236ca:	2300      	movs	r3, #0
 80236cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80236ce:	2300      	movs	r3, #0
 80236d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80236d2:	463b      	mov	r3, r7
 80236d4:	4619      	mov	r1, r3
 80236d6:	4806      	ldr	r0, [pc, #24]	; (80236f0 <MX_TIM7_Init+0x64>)
 80236d8:	f006 fdca 	bl	802a270 <HAL_TIMEx_MasterConfigSynchronization>
 80236dc:	4603      	mov	r3, r0
 80236de:	2b00      	cmp	r3, #0
 80236e0:	d001      	beq.n	80236e6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80236e2:	f000 f9e5 	bl	8023ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80236e6:	bf00      	nop
 80236e8:	3708      	adds	r7, #8
 80236ea:	46bd      	mov	sp, r7
 80236ec:	bd80      	pop	{r7, pc}
 80236ee:	bf00      	nop
 80236f0:	200175c0 	.word	0x200175c0
 80236f4:	40001400 	.word	0x40001400

080236f8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80236f8:	b580      	push	{r7, lr}
 80236fa:	b08c      	sub	sp, #48	; 0x30
 80236fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80236fe:	f107 030c 	add.w	r3, r7, #12
 8023702:	2224      	movs	r2, #36	; 0x24
 8023704:	2100      	movs	r1, #0
 8023706:	4618      	mov	r0, r3
 8023708:	f006 fed9 	bl	802a4be <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802370c:	1d3b      	adds	r3, r7, #4
 802370e:	2200      	movs	r2, #0
 8023710:	601a      	str	r2, [r3, #0]
 8023712:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8023714:	4b22      	ldr	r3, [pc, #136]	; (80237a0 <MX_TIM8_Init+0xa8>)
 8023716:	4a23      	ldr	r2, [pc, #140]	; (80237a4 <MX_TIM8_Init+0xac>)
 8023718:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 802371a:	4b21      	ldr	r3, [pc, #132]	; (80237a0 <MX_TIM8_Init+0xa8>)
 802371c:	2200      	movs	r2, #0
 802371e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023720:	4b1f      	ldr	r3, [pc, #124]	; (80237a0 <MX_TIM8_Init+0xa8>)
 8023722:	2200      	movs	r2, #0
 8023724:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8023726:	4b1e      	ldr	r3, [pc, #120]	; (80237a0 <MX_TIM8_Init+0xa8>)
 8023728:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802372c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802372e:	4b1c      	ldr	r3, [pc, #112]	; (80237a0 <MX_TIM8_Init+0xa8>)
 8023730:	2200      	movs	r2, #0
 8023732:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8023734:	4b1a      	ldr	r3, [pc, #104]	; (80237a0 <MX_TIM8_Init+0xa8>)
 8023736:	2200      	movs	r2, #0
 8023738:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802373a:	4b19      	ldr	r3, [pc, #100]	; (80237a0 <MX_TIM8_Init+0xa8>)
 802373c:	2200      	movs	r2, #0
 802373e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8023740:	2303      	movs	r3, #3
 8023742:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8023744:	2300      	movs	r3, #0
 8023746:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8023748:	2301      	movs	r3, #1
 802374a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 802374c:	2300      	movs	r3, #0
 802374e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8023750:	2300      	movs	r3, #0
 8023752:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8023754:	2300      	movs	r3, #0
 8023756:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8023758:	2301      	movs	r3, #1
 802375a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 802375c:	2300      	movs	r3, #0
 802375e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8023760:	2300      	movs	r3, #0
 8023762:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8023764:	f107 030c 	add.w	r3, r7, #12
 8023768:	4619      	mov	r1, r3
 802376a:	480d      	ldr	r0, [pc, #52]	; (80237a0 <MX_TIM8_Init+0xa8>)
 802376c:	f005 fef8 	bl	8029560 <HAL_TIM_Encoder_Init>
 8023770:	4603      	mov	r3, r0
 8023772:	2b00      	cmp	r3, #0
 8023774:	d001      	beq.n	802377a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8023776:	f000 f99b 	bl	8023ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802377a:	2300      	movs	r3, #0
 802377c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802377e:	2300      	movs	r3, #0
 8023780:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8023782:	1d3b      	adds	r3, r7, #4
 8023784:	4619      	mov	r1, r3
 8023786:	4806      	ldr	r0, [pc, #24]	; (80237a0 <MX_TIM8_Init+0xa8>)
 8023788:	f006 fd72 	bl	802a270 <HAL_TIMEx_MasterConfigSynchronization>
 802378c:	4603      	mov	r3, r0
 802378e:	2b00      	cmp	r3, #0
 8023790:	d001      	beq.n	8023796 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8023792:	f000 f98d 	bl	8023ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8023796:	bf00      	nop
 8023798:	3730      	adds	r7, #48	; 0x30
 802379a:	46bd      	mov	sp, r7
 802379c:	bd80      	pop	{r7, pc}
 802379e:	bf00      	nop
 80237a0:	2001114c 	.word	0x2001114c
 80237a4:	40010400 	.word	0x40010400

080237a8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80237a8:	b580      	push	{r7, lr}
 80237aa:	b088      	sub	sp, #32
 80237ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80237ae:	1d3b      	adds	r3, r7, #4
 80237b0:	2200      	movs	r2, #0
 80237b2:	601a      	str	r2, [r3, #0]
 80237b4:	605a      	str	r2, [r3, #4]
 80237b6:	609a      	str	r2, [r3, #8]
 80237b8:	60da      	str	r2, [r3, #12]
 80237ba:	611a      	str	r2, [r3, #16]
 80237bc:	615a      	str	r2, [r3, #20]
 80237be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80237c0:	4b1e      	ldr	r3, [pc, #120]	; (802383c <MX_TIM11_Init+0x94>)
 80237c2:	4a1f      	ldr	r2, [pc, #124]	; (8023840 <MX_TIM11_Init+0x98>)
 80237c4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80237c6:	4b1d      	ldr	r3, [pc, #116]	; (802383c <MX_TIM11_Init+0x94>)
 80237c8:	2200      	movs	r2, #0
 80237ca:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80237cc:	4b1b      	ldr	r3, [pc, #108]	; (802383c <MX_TIM11_Init+0x94>)
 80237ce:	2200      	movs	r2, #0
 80237d0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1679;
 80237d2:	4b1a      	ldr	r3, [pc, #104]	; (802383c <MX_TIM11_Init+0x94>)
 80237d4:	f240 628f 	movw	r2, #1679	; 0x68f
 80237d8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80237da:	4b18      	ldr	r3, [pc, #96]	; (802383c <MX_TIM11_Init+0x94>)
 80237dc:	2200      	movs	r2, #0
 80237de:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80237e0:	4b16      	ldr	r3, [pc, #88]	; (802383c <MX_TIM11_Init+0x94>)
 80237e2:	2200      	movs	r2, #0
 80237e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80237e6:	4815      	ldr	r0, [pc, #84]	; (802383c <MX_TIM11_Init+0x94>)
 80237e8:	f005 fdd6 	bl	8029398 <HAL_TIM_Base_Init>
 80237ec:	4603      	mov	r3, r0
 80237ee:	2b00      	cmp	r3, #0
 80237f0:	d001      	beq.n	80237f6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80237f2:	f000 f95d 	bl	8023ab0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80237f6:	4811      	ldr	r0, [pc, #68]	; (802383c <MX_TIM11_Init+0x94>)
 80237f8:	f005 fe48 	bl	802948c <HAL_TIM_PWM_Init>
 80237fc:	4603      	mov	r3, r0
 80237fe:	2b00      	cmp	r3, #0
 8023800:	d001      	beq.n	8023806 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8023802:	f000 f955 	bl	8023ab0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023806:	2360      	movs	r3, #96	; 0x60
 8023808:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 802380a:	2300      	movs	r3, #0
 802380c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 802380e:	2300      	movs	r3, #0
 8023810:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8023812:	2300      	movs	r3, #0
 8023814:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8023816:	1d3b      	adds	r3, r7, #4
 8023818:	2200      	movs	r2, #0
 802381a:	4619      	mov	r1, r3
 802381c:	4807      	ldr	r0, [pc, #28]	; (802383c <MX_TIM11_Init+0x94>)
 802381e:	f006 f871 	bl	8029904 <HAL_TIM_PWM_ConfigChannel>
 8023822:	4603      	mov	r3, r0
 8023824:	2b00      	cmp	r3, #0
 8023826:	d001      	beq.n	802382c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8023828:	f000 f942 	bl	8023ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 802382c:	4803      	ldr	r0, [pc, #12]	; (802383c <MX_TIM11_Init+0x94>)
 802382e:	f002 f8f1 	bl	8025a14 <HAL_TIM_MspPostInit>

}
 8023832:	bf00      	nop
 8023834:	3720      	adds	r7, #32
 8023836:	46bd      	mov	sp, r7
 8023838:	bd80      	pop	{r7, pc}
 802383a:	bf00      	nop
 802383c:	200143b0 	.word	0x200143b0
 8023840:	40014800 	.word	0x40014800

08023844 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8023844:	b580      	push	{r7, lr}
 8023846:	b088      	sub	sp, #32
 8023848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 802384a:	1d3b      	adds	r3, r7, #4
 802384c:	2200      	movs	r2, #0
 802384e:	601a      	str	r2, [r3, #0]
 8023850:	605a      	str	r2, [r3, #4]
 8023852:	609a      	str	r2, [r3, #8]
 8023854:	60da      	str	r2, [r3, #12]
 8023856:	611a      	str	r2, [r3, #16]
 8023858:	615a      	str	r2, [r3, #20]
 802385a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 802385c:	4b1a      	ldr	r3, [pc, #104]	; (80238c8 <MX_TIM12_Init+0x84>)
 802385e:	4a1b      	ldr	r2, [pc, #108]	; (80238cc <MX_TIM12_Init+0x88>)
 8023860:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 880;
 8023862:	4b19      	ldr	r3, [pc, #100]	; (80238c8 <MX_TIM12_Init+0x84>)
 8023864:	f44f 725c 	mov.w	r2, #880	; 0x370
 8023868:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 802386a:	4b17      	ldr	r3, [pc, #92]	; (80238c8 <MX_TIM12_Init+0x84>)
 802386c:	2200      	movs	r2, #0
 802386e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 53;
 8023870:	4b15      	ldr	r3, [pc, #84]	; (80238c8 <MX_TIM12_Init+0x84>)
 8023872:	2235      	movs	r2, #53	; 0x35
 8023874:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023876:	4b14      	ldr	r3, [pc, #80]	; (80238c8 <MX_TIM12_Init+0x84>)
 8023878:	2200      	movs	r2, #0
 802387a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802387c:	4b12      	ldr	r3, [pc, #72]	; (80238c8 <MX_TIM12_Init+0x84>)
 802387e:	2200      	movs	r2, #0
 8023880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8023882:	4811      	ldr	r0, [pc, #68]	; (80238c8 <MX_TIM12_Init+0x84>)
 8023884:	f005 fe02 	bl	802948c <HAL_TIM_PWM_Init>
 8023888:	4603      	mov	r3, r0
 802388a:	2b00      	cmp	r3, #0
 802388c:	d001      	beq.n	8023892 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 802388e:	f000 f90f 	bl	8023ab0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023892:	2360      	movs	r3, #96	; 0x60
 8023894:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8023896:	2300      	movs	r3, #0
 8023898:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 802389a:	2300      	movs	r3, #0
 802389c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 802389e:	2300      	movs	r3, #0
 80238a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80238a2:	1d3b      	adds	r3, r7, #4
 80238a4:	2204      	movs	r2, #4
 80238a6:	4619      	mov	r1, r3
 80238a8:	4807      	ldr	r0, [pc, #28]	; (80238c8 <MX_TIM12_Init+0x84>)
 80238aa:	f006 f82b 	bl	8029904 <HAL_TIM_PWM_ConfigChannel>
 80238ae:	4603      	mov	r3, r0
 80238b0:	2b00      	cmp	r3, #0
 80238b2:	d001      	beq.n	80238b8 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80238b4:	f000 f8fc 	bl	8023ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80238b8:	4803      	ldr	r0, [pc, #12]	; (80238c8 <MX_TIM12_Init+0x84>)
 80238ba:	f002 f8ab 	bl	8025a14 <HAL_TIM_MspPostInit>

}
 80238be:	bf00      	nop
 80238c0:	3720      	adds	r7, #32
 80238c2:	46bd      	mov	sp, r7
 80238c4:	bd80      	pop	{r7, pc}
 80238c6:	bf00      	nop
 80238c8:	20017580 	.word	0x20017580
 80238cc:	40001800 	.word	0x40001800

080238d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80238d0:	b580      	push	{r7, lr}
 80238d2:	b082      	sub	sp, #8
 80238d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80238d6:	2300      	movs	r3, #0
 80238d8:	607b      	str	r3, [r7, #4]
 80238da:	4b0c      	ldr	r3, [pc, #48]	; (802390c <MX_DMA_Init+0x3c>)
 80238dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80238de:	4a0b      	ldr	r2, [pc, #44]	; (802390c <MX_DMA_Init+0x3c>)
 80238e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80238e4:	6313      	str	r3, [r2, #48]	; 0x30
 80238e6:	4b09      	ldr	r3, [pc, #36]	; (802390c <MX_DMA_Init+0x3c>)
 80238e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80238ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80238ee:	607b      	str	r3, [r7, #4]
 80238f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80238f2:	2200      	movs	r2, #0
 80238f4:	2100      	movs	r1, #0
 80238f6:	2038      	movs	r0, #56	; 0x38
 80238f8:	f003 fa53 	bl	8026da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80238fc:	2038      	movs	r0, #56	; 0x38
 80238fe:	f003 fa6c 	bl	8026dda <HAL_NVIC_EnableIRQ>

}
 8023902:	bf00      	nop
 8023904:	3708      	adds	r7, #8
 8023906:	46bd      	mov	sp, r7
 8023908:	bd80      	pop	{r7, pc}
 802390a:	bf00      	nop
 802390c:	40023800 	.word	0x40023800

08023910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8023910:	b580      	push	{r7, lr}
 8023912:	b08a      	sub	sp, #40	; 0x28
 8023914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023916:	f107 0314 	add.w	r3, r7, #20
 802391a:	2200      	movs	r2, #0
 802391c:	601a      	str	r2, [r3, #0]
 802391e:	605a      	str	r2, [r3, #4]
 8023920:	609a      	str	r2, [r3, #8]
 8023922:	60da      	str	r2, [r3, #12]
 8023924:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8023926:	2300      	movs	r3, #0
 8023928:	613b      	str	r3, [r7, #16]
 802392a:	4b5c      	ldr	r3, [pc, #368]	; (8023a9c <MX_GPIO_Init+0x18c>)
 802392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802392e:	4a5b      	ldr	r2, [pc, #364]	; (8023a9c <MX_GPIO_Init+0x18c>)
 8023930:	f043 0304 	orr.w	r3, r3, #4
 8023934:	6313      	str	r3, [r2, #48]	; 0x30
 8023936:	4b59      	ldr	r3, [pc, #356]	; (8023a9c <MX_GPIO_Init+0x18c>)
 8023938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802393a:	f003 0304 	and.w	r3, r3, #4
 802393e:	613b      	str	r3, [r7, #16]
 8023940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8023942:	2300      	movs	r3, #0
 8023944:	60fb      	str	r3, [r7, #12]
 8023946:	4b55      	ldr	r3, [pc, #340]	; (8023a9c <MX_GPIO_Init+0x18c>)
 8023948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802394a:	4a54      	ldr	r2, [pc, #336]	; (8023a9c <MX_GPIO_Init+0x18c>)
 802394c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023950:	6313      	str	r3, [r2, #48]	; 0x30
 8023952:	4b52      	ldr	r3, [pc, #328]	; (8023a9c <MX_GPIO_Init+0x18c>)
 8023954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802395a:	60fb      	str	r3, [r7, #12]
 802395c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802395e:	2300      	movs	r3, #0
 8023960:	60bb      	str	r3, [r7, #8]
 8023962:	4b4e      	ldr	r3, [pc, #312]	; (8023a9c <MX_GPIO_Init+0x18c>)
 8023964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023966:	4a4d      	ldr	r2, [pc, #308]	; (8023a9c <MX_GPIO_Init+0x18c>)
 8023968:	f043 0301 	orr.w	r3, r3, #1
 802396c:	6313      	str	r3, [r2, #48]	; 0x30
 802396e:	4b4b      	ldr	r3, [pc, #300]	; (8023a9c <MX_GPIO_Init+0x18c>)
 8023970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023972:	f003 0301 	and.w	r3, r3, #1
 8023976:	60bb      	str	r3, [r7, #8]
 8023978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 802397a:	2300      	movs	r3, #0
 802397c:	607b      	str	r3, [r7, #4]
 802397e:	4b47      	ldr	r3, [pc, #284]	; (8023a9c <MX_GPIO_Init+0x18c>)
 8023980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023982:	4a46      	ldr	r2, [pc, #280]	; (8023a9c <MX_GPIO_Init+0x18c>)
 8023984:	f043 0302 	orr.w	r3, r3, #2
 8023988:	6313      	str	r3, [r2, #48]	; 0x30
 802398a:	4b44      	ldr	r3, [pc, #272]	; (8023a9c <MX_GPIO_Init+0x18c>)
 802398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802398e:	f003 0302 	and.w	r3, r3, #2
 8023992:	607b      	str	r3, [r7, #4]
 8023994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8023996:	2300      	movs	r3, #0
 8023998:	603b      	str	r3, [r7, #0]
 802399a:	4b40      	ldr	r3, [pc, #256]	; (8023a9c <MX_GPIO_Init+0x18c>)
 802399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802399e:	4a3f      	ldr	r2, [pc, #252]	; (8023a9c <MX_GPIO_Init+0x18c>)
 80239a0:	f043 0308 	orr.w	r3, r3, #8
 80239a4:	6313      	str	r3, [r2, #48]	; 0x30
 80239a6:	4b3d      	ldr	r3, [pc, #244]	; (8023a9c <MX_GPIO_Init+0x18c>)
 80239a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80239aa:	f003 0308 	and.w	r3, r3, #8
 80239ae:	603b      	str	r3, [r7, #0]
 80239b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80239b2:	2200      	movs	r2, #0
 80239b4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80239b8:	4839      	ldr	r0, [pc, #228]	; (8023aa0 <MX_GPIO_Init+0x190>)
 80239ba:	f004 fa1f 	bl	8027dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80239be:	2201      	movs	r2, #1
 80239c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80239c4:	4837      	ldr	r0, [pc, #220]	; (8023aa4 <MX_GPIO_Init+0x194>)
 80239c6:	f004 fa19 	bl	8027dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 80239ca:	2200      	movs	r2, #0
 80239cc:	f44f 4105 	mov.w	r1, #34048	; 0x8500
 80239d0:	4835      	ldr	r0, [pc, #212]	; (8023aa8 <MX_GPIO_Init+0x198>)
 80239d2:	f004 fa13 	bl	8027dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80239d6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80239da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80239dc:	2301      	movs	r3, #1
 80239de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80239e0:	2300      	movs	r3, #0
 80239e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80239e4:	2300      	movs	r3, #0
 80239e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80239e8:	f107 0314 	add.w	r3, r7, #20
 80239ec:	4619      	mov	r1, r3
 80239ee:	482c      	ldr	r0, [pc, #176]	; (8023aa0 <MX_GPIO_Init+0x190>)
 80239f0:	f004 f852 	bl	8027a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80239f4:	2307      	movs	r3, #7
 80239f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80239f8:	2300      	movs	r3, #0
 80239fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80239fc:	2301      	movs	r3, #1
 80239fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023a00:	f107 0314 	add.w	r3, r7, #20
 8023a04:	4619      	mov	r1, r3
 8023a06:	4827      	ldr	r0, [pc, #156]	; (8023aa4 <MX_GPIO_Init+0x194>)
 8023a08:	f004 f846 	bl	8027a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8023a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023a12:	2301      	movs	r3, #1
 8023a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023a16:	2300      	movs	r3, #0
 8023a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023a1a:	2300      	movs	r3, #0
 8023a1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023a1e:	f107 0314 	add.w	r3, r7, #20
 8023a22:	4619      	mov	r1, r3
 8023a24:	481f      	ldr	r0, [pc, #124]	; (8023aa4 <MX_GPIO_Init+0x194>)
 8023a26:	f004 f837 	bl	8027a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_8;
 8023a2a:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8023a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023a30:	2300      	movs	r3, #0
 8023a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023a34:	2300      	movs	r3, #0
 8023a36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023a38:	f107 0314 	add.w	r3, r7, #20
 8023a3c:	4619      	mov	r1, r3
 8023a3e:	4819      	ldr	r0, [pc, #100]	; (8023aa4 <MX_GPIO_Init+0x194>)
 8023a40:	f004 f82a 	bl	8027a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15;
 8023a44:	f44f 4305 	mov.w	r3, #34048	; 0x8500
 8023a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023a4a:	2301      	movs	r3, #1
 8023a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023a4e:	2300      	movs	r3, #0
 8023a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023a52:	2300      	movs	r3, #0
 8023a54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023a56:	f107 0314 	add.w	r3, r7, #20
 8023a5a:	4619      	mov	r1, r3
 8023a5c:	4812      	ldr	r0, [pc, #72]	; (8023aa8 <MX_GPIO_Init+0x198>)
 8023a5e:	f004 f81b 	bl	8027a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8023a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023a68:	2300      	movs	r3, #0
 8023a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023a6c:	2301      	movs	r3, #1
 8023a6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023a70:	f107 0314 	add.w	r3, r7, #20
 8023a74:	4619      	mov	r1, r3
 8023a76:	480c      	ldr	r0, [pc, #48]	; (8023aa8 <MX_GPIO_Init+0x198>)
 8023a78:	f004 f80e 	bl	8027a98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8023a7c:	2304      	movs	r3, #4
 8023a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023a80:	2300      	movs	r3, #0
 8023a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023a84:	2300      	movs	r3, #0
 8023a86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8023a88:	f107 0314 	add.w	r3, r7, #20
 8023a8c:	4619      	mov	r1, r3
 8023a8e:	4807      	ldr	r0, [pc, #28]	; (8023aac <MX_GPIO_Init+0x19c>)
 8023a90:	f004 f802 	bl	8027a98 <HAL_GPIO_Init>

}
 8023a94:	bf00      	nop
 8023a96:	3728      	adds	r7, #40	; 0x28
 8023a98:	46bd      	mov	sp, r7
 8023a9a:	bd80      	pop	{r7, pc}
 8023a9c:	40023800 	.word	0x40023800
 8023aa0:	40020800 	.word	0x40020800
 8023aa4:	40020400 	.word	0x40020400
 8023aa8:	40020000 	.word	0x40020000
 8023aac:	40020c00 	.word	0x40020c00

08023ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8023ab0:	b480      	push	{r7}
 8023ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8023ab4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8023ab6:	e7fe      	b.n	8023ab6 <Error_Handler+0x6>

08023ab8 <_ZN5Motor4InitEv>:
#include "motor.hpp"
#include "declare_extern.h"

void Motor::Init()
{
 8023ab8:	b580      	push	{r7, lr}
 8023aba:	b082      	sub	sp, #8
 8023abc:	af00      	add	r7, sp, #0
 8023abe:	6078      	str	r0, [r7, #4]
    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 8023ac0:	2104      	movs	r1, #4
 8023ac2:	4812      	ldr	r0, [pc, #72]	; (8023b0c <_ZN5Motor4InitEv+0x54>)
 8023ac4:	f005 fd0e 	bl	80294e4 <HAL_TIM_PWM_Start>
 8023ac8:	4603      	mov	r3, r0
 8023aca:	2b00      	cmp	r3, #0
 8023acc:	bf14      	ite	ne
 8023ace:	2301      	movne	r3, #1
 8023ad0:	2300      	moveq	r3, #0
 8023ad2:	b2db      	uxtb	r3, r3
 8023ad4:	2b00      	cmp	r3, #0
 8023ad6:	d004      	beq.n	8023ae2 <_ZN5Motor4InitEv+0x2a>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim1_ch2 = true; // MOTOR_R
 8023ad8:	4b0d      	ldr	r3, [pc, #52]	; (8023b10 <_ZN5Motor4InitEv+0x58>)
 8023ada:	2201      	movs	r2, #1
 8023adc:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8023ade:	f7ff ffe7 	bl	8023ab0 <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8023ae2:	210c      	movs	r1, #12
 8023ae4:	4809      	ldr	r0, [pc, #36]	; (8023b0c <_ZN5Motor4InitEv+0x54>)
 8023ae6:	f005 fcfd 	bl	80294e4 <HAL_TIM_PWM_Start>
 8023aea:	4603      	mov	r3, r0
 8023aec:	2b00      	cmp	r3, #0
 8023aee:	bf14      	ite	ne
 8023af0:	2301      	movne	r3, #1
 8023af2:	2300      	moveq	r3, #0
 8023af4:	b2db      	uxtb	r3, r3
 8023af6:	2b00      	cmp	r3, #0
 8023af8:	d004      	beq.n	8023b04 <_ZN5Motor4InitEv+0x4c>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim1_ch4 = true; // MOTOR_L
 8023afa:	4b06      	ldr	r3, [pc, #24]	; (8023b14 <_ZN5Motor4InitEv+0x5c>)
 8023afc:	2201      	movs	r2, #1
 8023afe:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8023b00:	f7ff ffd6 	bl	8023ab0 <Error_Handler>
    }
}
 8023b04:	bf00      	nop
 8023b06:	3708      	adds	r7, #8
 8023b08:	46bd      	mov	sp, r7
 8023b0a:	bd80      	pop	{r7, pc}
 8023b0c:	20017500 	.word	0x20017500
 8023b10:	20000271 	.word	0x20000271
 8023b14:	20000272 	.word	0x20000272

08023b18 <_ZN5Motor5DriveEff>:

void Motor::Drive(float translation_ratio, float rotation_ratio)
{
 8023b18:	b580      	push	{r7, lr}
 8023b1a:	b08a      	sub	sp, #40	; 0x28
 8023b1c:	af00      	add	r7, sp, #0
 8023b1e:	60f8      	str	r0, [r7, #12]
 8023b20:	ed87 0a02 	vstr	s0, [r7, #8]
 8023b24:	edc7 0a01 	vstr	s1, [r7, #4]
#ifdef DEBUG_MODE
    g_translation_ratio = translation_ratio;
 8023b28:	4a89      	ldr	r2, [pc, #548]	; (8023d50 <_ZN5Motor5DriveEff+0x238>)
 8023b2a:	68bb      	ldr	r3, [r7, #8]
 8023b2c:	6013      	str	r3, [r2, #0]
    g_rotation_ratio    = rotation_ratio;
 8023b2e:	4a89      	ldr	r2, [pc, #548]	; (8023d54 <_ZN5Motor5DriveEff+0x23c>)
 8023b30:	687b      	ldr	r3, [r7, #4]
 8023b32:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    if(translation_ratio > LIMIT_TRANS_DUTY)       translation_ratio =  LIMIT_TRANS_DUTY;
 8023b34:	68b8      	ldr	r0, [r7, #8]
 8023b36:	f7fc fc3f 	bl	80203b8 <__aeabi_f2d>
 8023b3a:	a381      	add	r3, pc, #516	; (adr r3, 8023d40 <_ZN5Motor5DriveEff+0x228>)
 8023b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b40:	f7fc ff22 	bl	8020988 <__aeabi_dcmpgt>
 8023b44:	4603      	mov	r3, r0
 8023b46:	2b00      	cmp	r3, #0
 8023b48:	d002      	beq.n	8023b50 <_ZN5Motor5DriveEff+0x38>
 8023b4a:	4b83      	ldr	r3, [pc, #524]	; (8023d58 <_ZN5Motor5DriveEff+0x240>)
 8023b4c:	60bb      	str	r3, [r7, #8]
 8023b4e:	e00c      	b.n	8023b6a <_ZN5Motor5DriveEff+0x52>
    else if(translation_ratio < -LIMIT_TRANS_DUTY) translation_ratio = -LIMIT_TRANS_DUTY;
 8023b50:	68b8      	ldr	r0, [r7, #8]
 8023b52:	f7fc fc31 	bl	80203b8 <__aeabi_f2d>
 8023b56:	a37c      	add	r3, pc, #496	; (adr r3, 8023d48 <_ZN5Motor5DriveEff+0x230>)
 8023b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b5c:	f7fc fef6 	bl	802094c <__aeabi_dcmplt>
 8023b60:	4603      	mov	r3, r0
 8023b62:	2b00      	cmp	r3, #0
 8023b64:	d001      	beq.n	8023b6a <_ZN5Motor5DriveEff+0x52>
 8023b66:	4b7d      	ldr	r3, [pc, #500]	; (8023d5c <_ZN5Motor5DriveEff+0x244>)
 8023b68:	60bb      	str	r3, [r7, #8]

    float sum = translation_ratio + rotation_ratio;
 8023b6a:	ed97 7a02 	vldr	s14, [r7, #8]
 8023b6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8023b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023b76:	edc7 7a06 	vstr	s15, [r7, #24]
    float excess = 0;
 8023b7a:	f04f 0300 	mov.w	r3, #0
 8023b7e:	627b      	str	r3, [r7, #36]	; 0x24

    if(sum > 1.0)       excess = sum - 1.0;
 8023b80:	edd7 7a06 	vldr	s15, [r7, #24]
 8023b84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023b88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b90:	dd08      	ble.n	8023ba4 <_ZN5Motor5DriveEff+0x8c>
 8023b92:	edd7 7a06 	vldr	s15, [r7, #24]
 8023b96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023b9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023b9e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8023ba2:	e010      	b.n	8023bc6 <_ZN5Motor5DriveEff+0xae>
    else if(sum < -1.0) excess = sum + 1.0;
 8023ba4:	edd7 7a06 	vldr	s15, [r7, #24]
 8023ba8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8023bac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023bb4:	d507      	bpl.n	8023bc6 <_ZN5Motor5DriveEff+0xae>
 8023bb6:	edd7 7a06 	vldr	s15, [r7, #24]
 8023bba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023bbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023bc2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    translation_ratio -= excess;
 8023bc6:	ed97 7a02 	vldr	s14, [r7, #8]
 8023bca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8023bce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023bd2:	edc7 7a02 	vstr	s15, [r7, #8]

#ifdef DEBUG_MODE
    g_sum_raito = sum;
 8023bd6:	4a62      	ldr	r2, [pc, #392]	; (8023d60 <_ZN5Motor5DriveEff+0x248>)
 8023bd8:	69bb      	ldr	r3, [r7, #24]
 8023bda:	6013      	str	r3, [r2, #0]
    g_excess_ratio = excess;
 8023bdc:	4a61      	ldr	r2, [pc, #388]	; (8023d64 <_ZN5Motor5DriveEff+0x24c>)
 8023bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023be0:	6013      	str	r3, [r2, #0]
    g_reduced_translation = translation_ratio;
 8023be2:	4a61      	ldr	r2, [pc, #388]	; (8023d68 <_ZN5Motor5DriveEff+0x250>)
 8023be4:	68bb      	ldr	r3, [r7, #8]
 8023be6:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    float duty_l = translation_ratio - rotation_ratio;
 8023be8:	ed97 7a02 	vldr	s14, [r7, #8]
 8023bec:	edd7 7a01 	vldr	s15, [r7, #4]
 8023bf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023bf4:	edc7 7a08 	vstr	s15, [r7, #32]
    float duty_r = translation_ratio + rotation_ratio;
 8023bf8:	ed97 7a02 	vldr	s14, [r7, #8]
 8023bfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8023c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023c04:	edc7 7a07 	vstr	s15, [r7, #28]

    if(duty_l > 1.0)       duty_l =  1.0;
 8023c08:	edd7 7a08 	vldr	s15, [r7, #32]
 8023c0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c18:	dd03      	ble.n	8023c22 <_ZN5Motor5DriveEff+0x10a>
 8023c1a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8023c1e:	623b      	str	r3, [r7, #32]
 8023c20:	e00a      	b.n	8023c38 <_ZN5Motor5DriveEff+0x120>
    else if(duty_l < -1.0) duty_l = -1.0;
 8023c22:	edd7 7a08 	vldr	s15, [r7, #32]
 8023c26:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8023c2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c32:	d501      	bpl.n	8023c38 <_ZN5Motor5DriveEff+0x120>
 8023c34:	4b4d      	ldr	r3, [pc, #308]	; (8023d6c <_ZN5Motor5DriveEff+0x254>)
 8023c36:	623b      	str	r3, [r7, #32]

    if(duty_r > 1.0)       duty_r =  1.0;
 8023c38:	edd7 7a07 	vldr	s15, [r7, #28]
 8023c3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023c40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c48:	dd03      	ble.n	8023c52 <_ZN5Motor5DriveEff+0x13a>
 8023c4a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8023c4e:	61fb      	str	r3, [r7, #28]
 8023c50:	e00a      	b.n	8023c68 <_ZN5Motor5DriveEff+0x150>
    else if(duty_r < -1.0) duty_r = -1.0;
 8023c52:	edd7 7a07 	vldr	s15, [r7, #28]
 8023c56:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8023c5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023c62:	d501      	bpl.n	8023c68 <_ZN5Motor5DriveEff+0x150>
 8023c64:	4b41      	ldr	r3, [pc, #260]	; (8023d6c <_ZN5Motor5DriveEff+0x254>)
 8023c66:	61fb      	str	r3, [r7, #28]

#ifdef DEBUG_MODE
    g_duty_l = duty_l;
 8023c68:	4a41      	ldr	r2, [pc, #260]	; (8023d70 <_ZN5Motor5DriveEff+0x258>)
 8023c6a:	6a3b      	ldr	r3, [r7, #32]
 8023c6c:	6013      	str	r3, [r2, #0]
    g_duty_r = duty_r;
 8023c6e:	4a41      	ldr	r2, [pc, #260]	; (8023d74 <_ZN5Motor5DriveEff+0x25c>)
 8023c70:	69fb      	ldr	r3, [r7, #28]
 8023c72:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    int16_t count_l = static_cast<int16_t>(COUNTER_PERIOD * duty_l);
 8023c74:	edd7 7a08 	vldr	s15, [r7, #32]
 8023c78:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8023d78 <_ZN5Motor5DriveEff+0x260>
 8023c7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023c80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023c84:	ee17 3a90 	vmov	r3, s15
 8023c88:	b21b      	sxth	r3, r3
 8023c8a:	82fb      	strh	r3, [r7, #22]
    int16_t count_r = static_cast<int16_t>(COUNTER_PERIOD * duty_r);
 8023c8c:	edd7 7a07 	vldr	s15, [r7, #28]
 8023c90:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8023d78 <_ZN5Motor5DriveEff+0x260>
 8023c94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023c98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023c9c:	ee17 3a90 	vmov	r3, s15
 8023ca0:	b21b      	sxth	r3, r3
 8023ca2:	82bb      	strh	r3, [r7, #20]

    if(count_l < 0) { count_l *= -1; BACKWARD_L; }
 8023ca4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023ca8:	2b00      	cmp	r3, #0
 8023caa:	da0d      	bge.n	8023cc8 <_ZN5Motor5DriveEff+0x1b0>
 8023cac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023cb0:	b29b      	uxth	r3, r3
 8023cb2:	425b      	negs	r3, r3
 8023cb4:	b29b      	uxth	r3, r3
 8023cb6:	b21b      	sxth	r3, r3
 8023cb8:	82fb      	strh	r3, [r7, #22]
 8023cba:	2200      	movs	r2, #0
 8023cbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8023cc0:	482e      	ldr	r0, [pc, #184]	; (8023d7c <_ZN5Motor5DriveEff+0x264>)
 8023cc2:	f004 f89b 	bl	8027dfc <HAL_GPIO_WritePin>
 8023cc6:	e009      	b.n	8023cdc <_ZN5Motor5DriveEff+0x1c4>
    else if(count_l >= 0) FORWARD_L;
 8023cc8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023ccc:	2b00      	cmp	r3, #0
 8023cce:	db05      	blt.n	8023cdc <_ZN5Motor5DriveEff+0x1c4>
 8023cd0:	2201      	movs	r2, #1
 8023cd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8023cd6:	4829      	ldr	r0, [pc, #164]	; (8023d7c <_ZN5Motor5DriveEff+0x264>)
 8023cd8:	f004 f890 	bl	8027dfc <HAL_GPIO_WritePin>

    if(count_r < 0) { count_r *= -1; BACKWARD_R; }
 8023cdc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8023ce0:	2b00      	cmp	r3, #0
 8023ce2:	da0d      	bge.n	8023d00 <_ZN5Motor5DriveEff+0x1e8>
 8023ce4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8023ce8:	b29b      	uxth	r3, r3
 8023cea:	425b      	negs	r3, r3
 8023cec:	b29b      	uxth	r3, r3
 8023cee:	b21b      	sxth	r3, r3
 8023cf0:	82bb      	strh	r3, [r7, #20]
 8023cf2:	2201      	movs	r2, #1
 8023cf4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8023cf8:	4820      	ldr	r0, [pc, #128]	; (8023d7c <_ZN5Motor5DriveEff+0x264>)
 8023cfa:	f004 f87f 	bl	8027dfc <HAL_GPIO_WritePin>
 8023cfe:	e009      	b.n	8023d14 <_ZN5Motor5DriveEff+0x1fc>
    else if(count_r >= 0) FORWARD_R;
 8023d00:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8023d04:	2b00      	cmp	r3, #0
 8023d06:	db05      	blt.n	8023d14 <_ZN5Motor5DriveEff+0x1fc>
 8023d08:	2200      	movs	r2, #0
 8023d0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8023d0e:	481b      	ldr	r0, [pc, #108]	; (8023d7c <_ZN5Motor5DriveEff+0x264>)
 8023d10:	f004 f874 	bl	8027dfc <HAL_GPIO_WritePin>

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, count_l);
 8023d14:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023d18:	4b19      	ldr	r3, [pc, #100]	; (8023d80 <_ZN5Motor5DriveEff+0x268>)
 8023d1a:	681b      	ldr	r3, [r3, #0]
 8023d1c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, count_r);
 8023d1e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8023d22:	4b17      	ldr	r3, [pc, #92]	; (8023d80 <_ZN5Motor5DriveEff+0x268>)
 8023d24:	681b      	ldr	r3, [r3, #0]
 8023d26:	641a      	str	r2, [r3, #64]	; 0x40

#ifdef DEBUG_MODE
    g_motor_compare_l = count_l;
 8023d28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023d2c:	4b15      	ldr	r3, [pc, #84]	; (8023d84 <_ZN5Motor5DriveEff+0x26c>)
 8023d2e:	801a      	strh	r2, [r3, #0]
    g_motor_compare_r = count_r;
 8023d30:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8023d34:	4b14      	ldr	r3, [pc, #80]	; (8023d88 <_ZN5Motor5DriveEff+0x270>)
 8023d36:	801a      	strh	r2, [r3, #0]
#endif // DEBUG_MODE
 8023d38:	bf00      	nop
 8023d3a:	3728      	adds	r7, #40	; 0x28
 8023d3c:	46bd      	mov	sp, r7
 8023d3e:	bd80      	pop	{r7, pc}
 8023d40:	cccccccd 	.word	0xcccccccd
 8023d44:	3feccccc 	.word	0x3feccccc
 8023d48:	cccccccd 	.word	0xcccccccd
 8023d4c:	bfeccccc 	.word	0xbfeccccc
 8023d50:	20000414 	.word	0x20000414
 8023d54:	20000418 	.word	0x20000418
 8023d58:	3f666666 	.word	0x3f666666
 8023d5c:	bf666666 	.word	0xbf666666
 8023d60:	2000041c 	.word	0x2000041c
 8023d64:	20000420 	.word	0x20000420
 8023d68:	20000424 	.word	0x20000424
 8023d6c:	bf800000 	.word	0xbf800000
 8023d70:	20000428 	.word	0x20000428
 8023d74:	2000042c 	.word	0x2000042c
 8023d78:	44832000 	.word	0x44832000
 8023d7c:	40020000 	.word	0x40020000
 8023d80:	20017500 	.word	0x20017500
 8023d84:	20000430 	.word	0x20000430
 8023d88:	20000432 	.word	0x20000432

08023d8c <_ZN5PrintC1EP5Flash>:
#include <stdio.h>
#include <string.h>

extern float g_swo_test;

Print::Print(Flash *flash)
 8023d8c:	b480      	push	{r7}
 8023d8e:	b083      	sub	sp, #12
 8023d90:	af00      	add	r7, sp, #0
 8023d92:	6078      	str	r0, [r7, #4]
 8023d94:	6039      	str	r1, [r7, #0]
{
    flash_ = flash;
 8023d96:	687b      	ldr	r3, [r7, #4]
 8023d98:	f503 3385 	add.w	r3, r3, #68096	; 0x10a00
 8023d9c:	3368      	adds	r3, #104	; 0x68
 8023d9e:	683a      	ldr	r2, [r7, #0]
 8023da0:	601a      	str	r2, [r3, #0]
}
 8023da2:	687b      	ldr	r3, [r7, #4]
 8023da4:	4618      	mov	r0, r3
 8023da6:	370c      	adds	r7, #12
 8023da8:	46bd      	mov	sp, r7
 8023daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023dae:	4770      	bx	lr

08023db0 <_ZN5Print3LogEv>:
{
    printf("Hello, world!\r\n");
}

void Print::Log()
{
 8023db0:	b580      	push	{r7, lr}
 8023db2:	b082      	sub	sp, #8
 8023db4:	af00      	add	r7, sp, #0
 8023db6:	6078      	str	r0, [r7, #4]
    printf("<<< Distance Log >>>\n");
 8023db8:	4804      	ldr	r0, [pc, #16]	; (8023dcc <_ZN5Print3LogEv+0x1c>)
 8023dba:	f007 f859 	bl	802ae70 <puts>
    //DistanceLog();
    RadianLog();
 8023dbe:	6878      	ldr	r0, [r7, #4]
 8023dc0:	f000 f806 	bl	8023dd0 <_ZN5Print9RadianLogEv>
}
 8023dc4:	bf00      	nop
 8023dc6:	3708      	adds	r7, #8
 8023dc8:	46bd      	mov	sp, r7
 8023dca:	bd80      	pop	{r7, pc}
 8023dcc:	0802cbf8 	.word	0x0802cbf8

08023dd0 <_ZN5Print9RadianLogEv>:
        address += 4;
    }
}

void Print::RadianLog()
{
 8023dd0:	b590      	push	{r4, r7, lr}
 8023dd2:	b087      	sub	sp, #28
 8023dd4:	af00      	add	r7, sp, #0
 8023dd6:	6078      	str	r0, [r7, #4]
    uint32_t address = SECTOR_3_ADDRESS_HEAD;
 8023dd8:	4b21      	ldr	r3, [pc, #132]	; (8023e60 <_ZN5Print9RadianLogEv+0x90>)
 8023dda:	617b      	str	r3, [r7, #20]
    int32_t int_data = 666666;
 8023ddc:	4b21      	ldr	r3, [pc, #132]	; (8023e64 <_ZN5Print9RadianLogEv+0x94>)
 8023dde:	60bb      	str	r3, [r7, #8]
    float data = 66.6666;
 8023de0:	4b21      	ldr	r3, [pc, #132]	; (8023e68 <_ZN5Print9RadianLogEv+0x98>)
 8023de2:	60fb      	str	r3, [r7, #12]

    for(uint16_t index = 0; index < LOG_LENGTH; index++)
 8023de4:	2300      	movs	r3, #0
 8023de6:	827b      	strh	r3, [r7, #18]
 8023de8:	8a7b      	ldrh	r3, [r7, #18]
 8023dea:	f641 0237 	movw	r2, #6199	; 0x1837
 8023dee:	4293      	cmp	r3, r2
 8023df0:	d82c      	bhi.n	8023e4c <_ZN5Print9RadianLogEv+0x7c>
    {
        flash_->Load(&int_data, address, 4); // suspicious
 8023df2:	687b      	ldr	r3, [r7, #4]
 8023df4:	f503 3385 	add.w	r3, r3, #68096	; 0x10a00
 8023df8:	3368      	adds	r3, #104	; 0x68
 8023dfa:	6818      	ldr	r0, [r3, #0]
 8023dfc:	f107 0108 	add.w	r1, r7, #8
 8023e00:	2304      	movs	r3, #4
 8023e02:	697a      	ldr	r2, [r7, #20]
 8023e04:	f7fd f9c5 	bl	8021192 <_ZN5Flash4LoadEPvmm>

        data = int_data * 0.00001;
 8023e08:	68bb      	ldr	r3, [r7, #8]
 8023e0a:	4618      	mov	r0, r3
 8023e0c:	f7fc fac2 	bl	8020394 <__aeabi_i2d>
 8023e10:	a311      	add	r3, pc, #68	; (adr r3, 8023e58 <_ZN5Print9RadianLogEv+0x88>)
 8023e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e16:	f7fc fb27 	bl	8020468 <__aeabi_dmul>
 8023e1a:	4603      	mov	r3, r0
 8023e1c:	460c      	mov	r4, r1
 8023e1e:	4618      	mov	r0, r3
 8023e20:	4621      	mov	r1, r4
 8023e22:	f7fc fdf9 	bl	8020a18 <__aeabi_d2f>
 8023e26:	4603      	mov	r3, r0
 8023e28:	60fb      	str	r3, [r7, #12]

        //printf("%d\r\n", int_data);
        printf("%f\r\n", data);
 8023e2a:	68f8      	ldr	r0, [r7, #12]
 8023e2c:	f7fc fac4 	bl	80203b8 <__aeabi_f2d>
 8023e30:	4603      	mov	r3, r0
 8023e32:	460c      	mov	r4, r1
 8023e34:	461a      	mov	r2, r3
 8023e36:	4623      	mov	r3, r4
 8023e38:	480c      	ldr	r0, [pc, #48]	; (8023e6c <_ZN5Print9RadianLogEv+0x9c>)
 8023e3a:	f006 ffa5 	bl	802ad88 <iprintf>

        address += 4;
 8023e3e:	697b      	ldr	r3, [r7, #20]
 8023e40:	3304      	adds	r3, #4
 8023e42:	617b      	str	r3, [r7, #20]
    for(uint16_t index = 0; index < LOG_LENGTH; index++)
 8023e44:	8a7b      	ldrh	r3, [r7, #18]
 8023e46:	3301      	adds	r3, #1
 8023e48:	827b      	strh	r3, [r7, #18]
 8023e4a:	e7cd      	b.n	8023de8 <_ZN5Print9RadianLogEv+0x18>
    }
}
 8023e4c:	bf00      	nop
 8023e4e:	371c      	adds	r7, #28
 8023e50:	46bd      	mov	sp, r7
 8023e52:	bd90      	pop	{r4, r7, pc}
 8023e54:	f3af 8000 	nop.w
 8023e58:	88e368f1 	.word	0x88e368f1
 8023e5c:	3ee4f8b5 	.word	0x3ee4f8b5
 8023e60:	0800c000 	.word	0x0800c000
 8023e64:	000a2c2a 	.word	0x000a2c2a
 8023e68:	4285554d 	.word	0x4285554d
 8023e6c:	0802cca0 	.word	0x0802cca0

08023e70 <_ZN5Print6RamLogEv>:

}

#ifdef DEBUG_MODE
void Print::RamLog()
{
 8023e70:	b590      	push	{r4, r7, lr}
 8023e72:	b085      	sub	sp, #20
 8023e74:	af00      	add	r7, sp, #0
 8023e76:	6078      	str	r0, [r7, #4]
    printf("<<< print ram distance >>>\n");
 8023e78:	4820      	ldr	r0, [pc, #128]	; (8023efc <_ZN5Print6RamLogEv+0x8c>)
 8023e7a:	f006 fff9 	bl	802ae70 <puts>

    for(uint16_t i = 0; i < 3100; i++)
 8023e7e:	2300      	movs	r3, #0
 8023e80:	81fb      	strh	r3, [r7, #14]
 8023e82:	89fb      	ldrh	r3, [r7, #14]
 8023e84:	f640 421b 	movw	r2, #3099	; 0xc1b
 8023e88:	4293      	cmp	r3, r2
 8023e8a:	d812      	bhi.n	8023eb2 <_ZN5Print6RamLogEv+0x42>
    {
        printf("%f\r\n", g_ram_distance[i]);
 8023e8c:	89fb      	ldrh	r3, [r7, #14]
 8023e8e:	4a1c      	ldr	r2, [pc, #112]	; (8023f00 <_ZN5Print6RamLogEv+0x90>)
 8023e90:	009b      	lsls	r3, r3, #2
 8023e92:	4413      	add	r3, r2
 8023e94:	681b      	ldr	r3, [r3, #0]
 8023e96:	4618      	mov	r0, r3
 8023e98:	f7fc fa8e 	bl	80203b8 <__aeabi_f2d>
 8023e9c:	4603      	mov	r3, r0
 8023e9e:	460c      	mov	r4, r1
 8023ea0:	461a      	mov	r2, r3
 8023ea2:	4623      	mov	r3, r4
 8023ea4:	4817      	ldr	r0, [pc, #92]	; (8023f04 <_ZN5Print6RamLogEv+0x94>)
 8023ea6:	f006 ff6f 	bl	802ad88 <iprintf>
    for(uint16_t i = 0; i < 3100; i++)
 8023eaa:	89fb      	ldrh	r3, [r7, #14]
 8023eac:	3301      	adds	r3, #1
 8023eae:	81fb      	strh	r3, [r7, #14]
 8023eb0:	e7e7      	b.n	8023e82 <_ZN5Print6RamLogEv+0x12>
    }

    printf("<<< print ram distance >>>\n");
 8023eb2:	4812      	ldr	r0, [pc, #72]	; (8023efc <_ZN5Print6RamLogEv+0x8c>)
 8023eb4:	f006 ffdc 	bl	802ae70 <puts>

    for(uint16_t i = 0; i < 3100; i++)
 8023eb8:	2300      	movs	r3, #0
 8023eba:	81bb      	strh	r3, [r7, #12]
 8023ebc:	89bb      	ldrh	r3, [r7, #12]
 8023ebe:	f640 421b 	movw	r2, #3099	; 0xc1b
 8023ec2:	4293      	cmp	r3, r2
 8023ec4:	d812      	bhi.n	8023eec <_ZN5Print6RamLogEv+0x7c>
    {
        printf("%f\r\n", g_ram_radian[i]);
 8023ec6:	89bb      	ldrh	r3, [r7, #12]
 8023ec8:	4a0f      	ldr	r2, [pc, #60]	; (8023f08 <_ZN5Print6RamLogEv+0x98>)
 8023eca:	009b      	lsls	r3, r3, #2
 8023ecc:	4413      	add	r3, r2
 8023ece:	681b      	ldr	r3, [r3, #0]
 8023ed0:	4618      	mov	r0, r3
 8023ed2:	f7fc fa71 	bl	80203b8 <__aeabi_f2d>
 8023ed6:	4603      	mov	r3, r0
 8023ed8:	460c      	mov	r4, r1
 8023eda:	461a      	mov	r2, r3
 8023edc:	4623      	mov	r3, r4
 8023ede:	4809      	ldr	r0, [pc, #36]	; (8023f04 <_ZN5Print6RamLogEv+0x94>)
 8023ee0:	f006 ff52 	bl	802ad88 <iprintf>
    for(uint16_t i = 0; i < 3100; i++)
 8023ee4:	89bb      	ldrh	r3, [r7, #12]
 8023ee6:	3301      	adds	r3, #1
 8023ee8:	81bb      	strh	r3, [r7, #12]
 8023eea:	e7e7      	b.n	8023ebc <_ZN5Print6RamLogEv+0x4c>
    }

    printf("<<< print end >>>\n");
 8023eec:	4807      	ldr	r0, [pc, #28]	; (8023f0c <_ZN5Print6RamLogEv+0x9c>)
 8023eee:	f006 ffbf 	bl	802ae70 <puts>
}
 8023ef2:	bf00      	nop
 8023ef4:	3714      	adds	r7, #20
 8023ef6:	46bd      	mov	sp, r7
 8023ef8:	bd90      	pop	{r4, r7, pc}
 8023efa:	bf00      	nop
 8023efc:	0802cca8 	.word	0x0802cca8
 8023f00:	20014490 	.word	0x20014490
 8023f04:	0802cca0 	.word	0x0802cca0
 8023f08:	20011220 	.word	0x20011220
 8023f0c:	0802ccc4 	.word	0x0802ccc4

08023f10 <_ZN12RotarySwitch5StateEv>:
#include "rotary_switch.hpp"

uint8_t RotarySwitch::State()
{
 8023f10:	b580      	push	{r7, lr}
 8023f12:	b084      	sub	sp, #16
 8023f14:	af00      	add	r7, sp, #0
 8023f16:	6078      	str	r0, [r7, #4]
    uint8_t switch_state = 0x00;
 8023f18:	2300      	movs	r3, #0
 8023f1a:	73fb      	strb	r3, [r7, #15]

    if(PIN_1 == 0) switch_state |= 0x01;
 8023f1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8023f20:	4821      	ldr	r0, [pc, #132]	; (8023fa8 <_ZN12RotarySwitch5StateEv+0x98>)
 8023f22:	f003 ff53 	bl	8027dcc <HAL_GPIO_ReadPin>
 8023f26:	4603      	mov	r3, r0
 8023f28:	2b00      	cmp	r3, #0
 8023f2a:	bf0c      	ite	eq
 8023f2c:	2301      	moveq	r3, #1
 8023f2e:	2300      	movne	r3, #0
 8023f30:	b2db      	uxtb	r3, r3
 8023f32:	2b00      	cmp	r3, #0
 8023f34:	d003      	beq.n	8023f3e <_ZN12RotarySwitch5StateEv+0x2e>
 8023f36:	7bfb      	ldrb	r3, [r7, #15]
 8023f38:	f043 0301 	orr.w	r3, r3, #1
 8023f3c:	73fb      	strb	r3, [r7, #15]
    if(PIN_2 == 0) switch_state |= 0x02;
 8023f3e:	2104      	movs	r1, #4
 8023f40:	481a      	ldr	r0, [pc, #104]	; (8023fac <_ZN12RotarySwitch5StateEv+0x9c>)
 8023f42:	f003 ff43 	bl	8027dcc <HAL_GPIO_ReadPin>
 8023f46:	4603      	mov	r3, r0
 8023f48:	2b00      	cmp	r3, #0
 8023f4a:	bf0c      	ite	eq
 8023f4c:	2301      	moveq	r3, #1
 8023f4e:	2300      	movne	r3, #0
 8023f50:	b2db      	uxtb	r3, r3
 8023f52:	2b00      	cmp	r3, #0
 8023f54:	d003      	beq.n	8023f5e <_ZN12RotarySwitch5StateEv+0x4e>
 8023f56:	7bfb      	ldrb	r3, [r7, #15]
 8023f58:	f043 0302 	orr.w	r3, r3, #2
 8023f5c:	73fb      	strb	r3, [r7, #15]
    if(PIN_4 == 0) switch_state |= 0x04;
 8023f5e:	2102      	movs	r1, #2
 8023f60:	4812      	ldr	r0, [pc, #72]	; (8023fac <_ZN12RotarySwitch5StateEv+0x9c>)
 8023f62:	f003 ff33 	bl	8027dcc <HAL_GPIO_ReadPin>
 8023f66:	4603      	mov	r3, r0
 8023f68:	2b00      	cmp	r3, #0
 8023f6a:	bf0c      	ite	eq
 8023f6c:	2301      	moveq	r3, #1
 8023f6e:	2300      	movne	r3, #0
 8023f70:	b2db      	uxtb	r3, r3
 8023f72:	2b00      	cmp	r3, #0
 8023f74:	d003      	beq.n	8023f7e <_ZN12RotarySwitch5StateEv+0x6e>
 8023f76:	7bfb      	ldrb	r3, [r7, #15]
 8023f78:	f043 0304 	orr.w	r3, r3, #4
 8023f7c:	73fb      	strb	r3, [r7, #15]
    if(PIN_8 == 0) switch_state |= 0x08;
 8023f7e:	2101      	movs	r1, #1
 8023f80:	480a      	ldr	r0, [pc, #40]	; (8023fac <_ZN12RotarySwitch5StateEv+0x9c>)
 8023f82:	f003 ff23 	bl	8027dcc <HAL_GPIO_ReadPin>
 8023f86:	4603      	mov	r3, r0
 8023f88:	2b00      	cmp	r3, #0
 8023f8a:	bf0c      	ite	eq
 8023f8c:	2301      	moveq	r3, #1
 8023f8e:	2300      	movne	r3, #0
 8023f90:	b2db      	uxtb	r3, r3
 8023f92:	2b00      	cmp	r3, #0
 8023f94:	d003      	beq.n	8023f9e <_ZN12RotarySwitch5StateEv+0x8e>
 8023f96:	7bfb      	ldrb	r3, [r7, #15]
 8023f98:	f043 0308 	orr.w	r3, r3, #8
 8023f9c:	73fb      	strb	r3, [r7, #15]

    return switch_state;
 8023f9e:	7bfb      	ldrb	r3, [r7, #15]
 8023fa0:	4618      	mov	r0, r3
 8023fa2:	3710      	adds	r7, #16
 8023fa4:	46bd      	mov	sp, r7
 8023fa6:	bd80      	pop	{r7, pc}
 8023fa8:	40020000 	.word	0x40020000
 8023fac:	40020400 	.word	0x40020400

08023fb0 <_ZN3RunC1EP7EncoderP5FlashP8Iim42652P3ImuP3LedP10LineSensorP9LineTraceP6LoggerP5MotorP5PrintP12RotarySwitchP10SideSensorP15VelocityControl>:
#include "run.hpp"
#include "declare_extern.h"

Run::Run(Encoder *encoder,
 8023fb0:	b480      	push	{r7}
 8023fb2:	b085      	sub	sp, #20
 8023fb4:	af00      	add	r7, sp, #0
 8023fb6:	60f8      	str	r0, [r7, #12]
 8023fb8:	60b9      	str	r1, [r7, #8]
 8023fba:	607a      	str	r2, [r7, #4]
 8023fbc:	603b      	str	r3, [r7, #0]
           , run_mode_changed_internal_(false)
           , switch_interval_wait_timer_(0)
           , switch_interval_wait_enable_(true)
           , switch_interval_led_enable_(true)
           , mode_complete_(true)
           , store_log_failed_(true)
 8023fbe:	68fb      	ldr	r3, [r7, #12]
 8023fc0:	2200      	movs	r2, #0
 8023fc2:	701a      	strb	r2, [r3, #0]
 8023fc4:	68fb      	ldr	r3, [r7, #12]
 8023fc6:	2200      	movs	r2, #0
 8023fc8:	705a      	strb	r2, [r3, #1]
 8023fca:	68fb      	ldr	r3, [r7, #12]
 8023fcc:	2200      	movs	r2, #0
 8023fce:	709a      	strb	r2, [r3, #2]
 8023fd0:	68fb      	ldr	r3, [r7, #12]
 8023fd2:	2201      	movs	r2, #1
 8023fd4:	70da      	strb	r2, [r3, #3]
 8023fd6:	68fb      	ldr	r3, [r7, #12]
 8023fd8:	2201      	movs	r2, #1
 8023fda:	711a      	strb	r2, [r3, #4]
 8023fdc:	68fb      	ldr	r3, [r7, #12]
 8023fde:	2201      	movs	r2, #1
 8023fe0:	715a      	strb	r2, [r3, #5]
 8023fe2:	68fb      	ldr	r3, [r7, #12]
 8023fe4:	2201      	movs	r2, #1
 8023fe6:	719a      	strb	r2, [r3, #6]
{
    encoder_          = encoder;
 8023fe8:	68fb      	ldr	r3, [r7, #12]
 8023fea:	68ba      	ldr	r2, [r7, #8]
 8023fec:	609a      	str	r2, [r3, #8]
    flash_            = flash;
 8023fee:	68fb      	ldr	r3, [r7, #12]
 8023ff0:	687a      	ldr	r2, [r7, #4]
 8023ff2:	60da      	str	r2, [r3, #12]
    iim_42652_        = iim_42652;
 8023ff4:	68fb      	ldr	r3, [r7, #12]
 8023ff6:	683a      	ldr	r2, [r7, #0]
 8023ff8:	611a      	str	r2, [r3, #16]
    imu_              = imu;
 8023ffa:	68fb      	ldr	r3, [r7, #12]
 8023ffc:	69ba      	ldr	r2, [r7, #24]
 8023ffe:	615a      	str	r2, [r3, #20]
    led_              = led;
 8024000:	68fb      	ldr	r3, [r7, #12]
 8024002:	69fa      	ldr	r2, [r7, #28]
 8024004:	619a      	str	r2, [r3, #24]
    line_sensor_      = line_sensor;
 8024006:	68fb      	ldr	r3, [r7, #12]
 8024008:	6a3a      	ldr	r2, [r7, #32]
 802400a:	61da      	str	r2, [r3, #28]
    line_trace_       = line_trace;
 802400c:	68fb      	ldr	r3, [r7, #12]
 802400e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024010:	621a      	str	r2, [r3, #32]
    logger_           = logger;
 8024012:	68fb      	ldr	r3, [r7, #12]
 8024014:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8024016:	625a      	str	r2, [r3, #36]	; 0x24
    motor_            = motor;
 8024018:	68fb      	ldr	r3, [r7, #12]
 802401a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802401c:	629a      	str	r2, [r3, #40]	; 0x28
    print_            = print;
 802401e:	68fb      	ldr	r3, [r7, #12]
 8024020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8024022:	62da      	str	r2, [r3, #44]	; 0x2c
    rotary_switch_    = rotary_switch;
 8024024:	68fb      	ldr	r3, [r7, #12]
 8024026:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024028:	631a      	str	r2, [r3, #48]	; 0x30
    side_sensor_      = side_sensor;
 802402a:	68fb      	ldr	r3, [r7, #12]
 802402c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802402e:	635a      	str	r2, [r3, #52]	; 0x34
    velocity_control_ = velocity_control;
 8024030:	68fb      	ldr	r3, [r7, #12]
 8024032:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8024034:	639a      	str	r2, [r3, #56]	; 0x38
}
 8024036:	68fb      	ldr	r3, [r7, #12]
 8024038:	4618      	mov	r0, r3
 802403a:	3714      	adds	r7, #20
 802403c:	46bd      	mov	sp, r7
 802403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024042:	4770      	bx	lr

08024044 <_ZN3Run4InitEv>:

void Run::Init()
{
 8024044:	b580      	push	{r7, lr}
 8024046:	b084      	sub	sp, #16
 8024048:	af00      	add	r7, sp, #0
 802404a:	6078      	str	r0, [r7, #4]
    line_sensor_->Init();
 802404c:	687b      	ldr	r3, [r7, #4]
 802404e:	69db      	ldr	r3, [r3, #28]
 8024050:	4618      	mov	r0, r3
 8024052:	f7fd fe11 	bl	8021c78 <_ZN10LineSensor4InitEv>
    encoder_->Init();
 8024056:	687b      	ldr	r3, [r7, #4]
 8024058:	689b      	ldr	r3, [r3, #8]
 802405a:	4618      	mov	r0, r3
 802405c:	f7fc fec4 	bl	8020de8 <_ZN7Encoder4InitEv>
    motor_->Init();
 8024060:	687b      	ldr	r3, [r7, #4]
 8024062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024064:	4618      	mov	r0, r3
 8024066:	f7ff fd27 	bl	8023ab8 <_ZN5Motor4InitEv>
    uint8_t imu_init = iim_42652_->Init();
 802406a:	687b      	ldr	r3, [r7, #4]
 802406c:	691b      	ldr	r3, [r3, #16]
 802406e:	4618      	mov	r0, r3
 8024070:	f7fd f994 	bl	802139c <_ZN8Iim426524InitEv>
 8024074:	4603      	mov	r3, r0
 8024076:	73bb      	strb	r3, [r7, #14]

    bool flash_erase = true;
 8024078:	2301      	movs	r3, #1
 802407a:	73fb      	strb	r3, [r7, #15]
    uint8_t switch_state = rotary_switch_->State();
 802407c:	687b      	ldr	r3, [r7, #4]
 802407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024080:	4618      	mov	r0, r3
 8024082:	f7ff ff45 	bl	8023f10 <_ZN12RotarySwitch5StateEv>
 8024086:	4603      	mov	r3, r0
 8024088:	737b      	strb	r3, [r7, #13]

    if(switch_state == 0x0F)
 802408a:	7b7b      	ldrb	r3, [r7, #13]
 802408c:	2b0f      	cmp	r3, #15
 802408e:	d114      	bne.n	80240ba <_ZN3Run4InitEv+0x76>
    {
        led_->Blink(3, 'R', 'X');
 8024090:	687b      	ldr	r3, [r7, #4]
 8024092:	6998      	ldr	r0, [r3, #24]
 8024094:	2358      	movs	r3, #88	; 0x58
 8024096:	2252      	movs	r2, #82	; 0x52
 8024098:	2103      	movs	r1, #3
 802409a:	f7fd fce1 	bl	8021a60 <_ZN3Led5BlinkEhcc>
        if(!flash_->Clear()) flash_erase = false;
 802409e:	687b      	ldr	r3, [r7, #4]
 80240a0:	68db      	ldr	r3, [r3, #12]
 80240a2:	4618      	mov	r0, r3
 80240a4:	f7fc ffa4 	bl	8020ff0 <_ZN5Flash5ClearEv>
 80240a8:	4603      	mov	r3, r0
 80240aa:	f083 0301 	eor.w	r3, r3, #1
 80240ae:	b2db      	uxtb	r3, r3
 80240b0:	2b00      	cmp	r3, #0
 80240b2:	d012      	beq.n	80240da <_ZN3Run4InitEv+0x96>
 80240b4:	2300      	movs	r3, #0
 80240b6:	73fb      	strb	r3, [r7, #15]
 80240b8:	e00f      	b.n	80240da <_ZN3Run4InitEv+0x96>
    }
    else if(switch_state == 0x0B)
 80240ba:	7b7b      	ldrb	r3, [r7, #13]
 80240bc:	2b0b      	cmp	r3, #11
 80240be:	d10c      	bne.n	80240da <_ZN3Run4InitEv+0x96>
    {
        led_->Blink(3, 'M', 'X');
 80240c0:	687b      	ldr	r3, [r7, #4]
 80240c2:	6998      	ldr	r0, [r3, #24]
 80240c4:	2358      	movs	r3, #88	; 0x58
 80240c6:	224d      	movs	r2, #77	; 0x4d
 80240c8:	2103      	movs	r1, #3
 80240ca:	f7fd fcc9 	bl	8021a60 <_ZN3Led5BlinkEhcc>
        print_->Log();
 80240ce:	687b      	ldr	r3, [r7, #4]
 80240d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80240d2:	4618      	mov	r0, r3
 80240d4:	f7ff fe6c 	bl	8023db0 <_ZN5Print3LogEv>
        return;
 80240d8:	e02e      	b.n	8024138 <_ZN3Run4InitEv+0xf4>
    }

#ifdef DEBUG_MODE
    g_imu_init = imu_init;
 80240da:	4a19      	ldr	r2, [pc, #100]	; (8024140 <_ZN3Run4InitEv+0xfc>)
 80240dc:	7bbb      	ldrb	r3, [r7, #14]
 80240de:	7013      	strb	r3, [r2, #0]
    g_flash_erase = flash_erase;
 80240e0:	7bfa      	ldrb	r2, [r7, #15]
 80240e2:	4b18      	ldr	r3, [pc, #96]	; (8024144 <_ZN3Run4InitEv+0x100>)
 80240e4:	701a      	strb	r2, [r3, #0]
    g_switch_state = switch_state;
 80240e6:	4a18      	ldr	r2, [pc, #96]	; (8024148 <_ZN3Run4InitEv+0x104>)
 80240e8:	7b7b      	ldrb	r3, [r7, #13]
 80240ea:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(flash_erase && imu_init == 0x09)
 80240ec:	7bfb      	ldrb	r3, [r7, #15]
 80240ee:	2b00      	cmp	r3, #0
 80240f0:	d012      	beq.n	8024118 <_ZN3Run4InitEv+0xd4>
 80240f2:	7bbb      	ldrb	r3, [r7, #14]
 80240f4:	2b09      	cmp	r3, #9
 80240f6:	d10f      	bne.n	8024118 <_ZN3Run4InitEv+0xd4>
    {
        led_->Rainbow(1);
 80240f8:	687b      	ldr	r3, [r7, #4]
 80240fa:	699b      	ldr	r3, [r3, #24]
 80240fc:	2101      	movs	r1, #1
 80240fe:	4618      	mov	r0, r3
 8024100:	f7fd fcdb 	bl	8021aba <_ZN3Led7RainbowEh>
        HAL_TIM_Base_Start_IT(&htim2);
 8024104:	4811      	ldr	r0, [pc, #68]	; (802414c <_ZN3Run4InitEv+0x108>)
 8024106:	f005 f972 	bl	80293ee <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start_IT(&htim6);
 802410a:	4811      	ldr	r0, [pc, #68]	; (8024150 <_ZN3Run4InitEv+0x10c>)
 802410c:	f005 f96f 	bl	80293ee <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start_IT(&htim7);
 8024110:	4810      	ldr	r0, [pc, #64]	; (8024154 <_ZN3Run4InitEv+0x110>)
 8024112:	f005 f96c 	bl	80293ee <HAL_TIM_Base_Start_IT>
 8024116:	e00f      	b.n	8024138 <_ZN3Run4InitEv+0xf4>
    }
    else if(flash_erase) led_->ColorOrder('Y');
 8024118:	7bfb      	ldrb	r3, [r7, #15]
 802411a:	2b00      	cmp	r3, #0
 802411c:	d006      	beq.n	802412c <_ZN3Run4InitEv+0xe8>
 802411e:	687b      	ldr	r3, [r7, #4]
 8024120:	699b      	ldr	r3, [r3, #24]
 8024122:	2159      	movs	r1, #89	; 0x59
 8024124:	4618      	mov	r0, r3
 8024126:	f7fd fbbf 	bl	80218a8 <_ZN3Led10ColorOrderEc>
 802412a:	e005      	b.n	8024138 <_ZN3Run4InitEv+0xf4>
    else led_->ColorOrder('R');
 802412c:	687b      	ldr	r3, [r7, #4]
 802412e:	699b      	ldr	r3, [r3, #24]
 8024130:	2152      	movs	r1, #82	; 0x52
 8024132:	4618      	mov	r0, r3
 8024134:	f7fd fbb8 	bl	80218a8 <_ZN3Led10ColorOrderEc>
}
 8024138:	3710      	adds	r7, #16
 802413a:	46bd      	mov	sp, r7
 802413c:	bd80      	pop	{r7, pc}
 802413e:	bf00      	nop
 8024140:	20000407 	.word	0x20000407
 8024144:	20000479 	.word	0x20000479
 8024148:	20000478 	.word	0x20000478
 802414c:	20017540 	.word	0x20017540
 8024150:	20014450 	.word	0x20014450
 8024154:	200175c0 	.word	0x200175c0

08024158 <_ZN3Run6Timer7Ev>:

void Run::Timer7()
{
 8024158:	b580      	push	{r7, lr}
 802415a:	b082      	sub	sp, #8
 802415c:	af00      	add	r7, sp, #0
 802415e:	6078      	str	r0, [r7, #4]
    line_sensor_->StoreConsecutiveBuff();
 8024160:	687b      	ldr	r3, [r7, #4]
 8024162:	69db      	ldr	r3, [r3, #28]
 8024164:	4618      	mov	r0, r3
 8024166:	f7fd fdc1 	bl	8021cec <_ZN10LineSensor20StoreConsecutiveBuffEv>
}
 802416a:	bf00      	nop
 802416c:	3708      	adds	r7, #8
 802416e:	46bd      	mov	sp, r7
 8024170:	bd80      	pop	{r7, pc}
	...

08024174 <_ZN3Run6Timer2Ev>:

void Run::Timer2()
{
 8024174:	b580      	push	{r7, lr}
 8024176:	b084      	sub	sp, #16
 8024178:	af00      	add	r7, sp, #0
 802417a:	6078      	str	r0, [r7, #4]
    uint8_t switch_state = rotary_switch_->State();
 802417c:	687b      	ldr	r3, [r7, #4]
 802417e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024180:	4618      	mov	r0, r3
 8024182:	f7ff fec5 	bl	8023f10 <_ZN12RotarySwitch5StateEv>
 8024186:	4603      	mov	r3, r0
 8024188:	73fb      	strb	r3, [r7, #15]
    static uint8_t pre_switch_state = switch_state;
 802418a:	4b2c      	ldr	r3, [pc, #176]	; (802423c <_ZN3Run6Timer2Ev+0xc8>)
 802418c:	781b      	ldrb	r3, [r3, #0]
 802418e:	f3bf 8f5b 	dmb	ish
 8024192:	b2db      	uxtb	r3, r3
 8024194:	f003 0301 	and.w	r3, r3, #1
 8024198:	2b00      	cmp	r3, #0
 802419a:	bf0c      	ite	eq
 802419c:	2301      	moveq	r3, #1
 802419e:	2300      	movne	r3, #0
 80241a0:	b2db      	uxtb	r3, r3
 80241a2:	2b00      	cmp	r3, #0
 80241a4:	d010      	beq.n	80241c8 <_ZN3Run6Timer2Ev+0x54>
 80241a6:	4825      	ldr	r0, [pc, #148]	; (802423c <_ZN3Run6Timer2Ev+0xc8>)
 80241a8:	f006 f944 	bl	802a434 <__cxa_guard_acquire>
 80241ac:	4603      	mov	r3, r0
 80241ae:	2b00      	cmp	r3, #0
 80241b0:	bf14      	ite	ne
 80241b2:	2301      	movne	r3, #1
 80241b4:	2300      	moveq	r3, #0
 80241b6:	b2db      	uxtb	r3, r3
 80241b8:	2b00      	cmp	r3, #0
 80241ba:	d005      	beq.n	80241c8 <_ZN3Run6Timer2Ev+0x54>
 80241bc:	4a20      	ldr	r2, [pc, #128]	; (8024240 <_ZN3Run6Timer2Ev+0xcc>)
 80241be:	7bfb      	ldrb	r3, [r7, #15]
 80241c0:	7013      	strb	r3, [r2, #0]
 80241c2:	481e      	ldr	r0, [pc, #120]	; (802423c <_ZN3Run6Timer2Ev+0xc8>)
 80241c4:	f006 f942 	bl	802a44c <__cxa_guard_release>
    static bool interval_enable = true;

#ifdef DEBUG_MODE
    g_switch_state = switch_state;
 80241c8:	4a1e      	ldr	r2, [pc, #120]	; (8024244 <_ZN3Run6Timer2Ev+0xd0>)
 80241ca:	7bfb      	ldrb	r3, [r7, #15]
 80241cc:	7013      	strb	r3, [r2, #0]
    g_interval_enable = interval_enable;
 80241ce:	4b1e      	ldr	r3, [pc, #120]	; (8024248 <_ZN3Run6Timer2Ev+0xd4>)
 80241d0:	781a      	ldrb	r2, [r3, #0]
 80241d2:	4b1e      	ldr	r3, [pc, #120]	; (802424c <_ZN3Run6Timer2Ev+0xd8>)
 80241d4:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

    if(switch_state != pre_switch_state)
 80241d6:	4b1a      	ldr	r3, [pc, #104]	; (8024240 <_ZN3Run6Timer2Ev+0xcc>)
 80241d8:	781b      	ldrb	r3, [r3, #0]
 80241da:	7bfa      	ldrb	r2, [r7, #15]
 80241dc:	429a      	cmp	r2, r3
 80241de:	d00f      	beq.n	8024200 <_ZN3Run6Timer2Ev+0x8c>
    {
        SetRunMode(STANDBY);
 80241e0:	2100      	movs	r1, #0
 80241e2:	6878      	ldr	r0, [r7, #4]
 80241e4:	f000 f89a 	bl	802431c <_ZN3Run10SetRunModeEh>
        WhenSwitchChange();
 80241e8:	6878      	ldr	r0, [r7, #4]
 80241ea:	f000 f8bf 	bl	802436c <_ZN3Run16WhenSwitchChangeEv>
        led_->ResetInterrupt();
 80241ee:	687b      	ldr	r3, [r7, #4]
 80241f0:	699b      	ldr	r3, [r3, #24]
 80241f2:	4618      	mov	r0, r3
 80241f4:	f7fd fcef 	bl	8021bd6 <_ZN3Led14ResetInterruptEv>
        interval_enable = true;
 80241f8:	4b13      	ldr	r3, [pc, #76]	; (8024248 <_ZN3Run6Timer2Ev+0xd4>)
 80241fa:	2201      	movs	r2, #1
 80241fc:	701a      	strb	r2, [r3, #0]
 80241fe:	e016      	b.n	802422e <_ZN3Run6Timer2Ev+0xba>
    }
    else if(interval_enable)
 8024200:	4b11      	ldr	r3, [pc, #68]	; (8024248 <_ZN3Run6Timer2Ev+0xd4>)
 8024202:	781b      	ldrb	r3, [r3, #0]
 8024204:	2b00      	cmp	r3, #0
 8024206:	d00d      	beq.n	8024224 <_ZN3Run6Timer2Ev+0xb0>
    {
        SetRunMode(STANDBY);
 8024208:	2100      	movs	r1, #0
 802420a:	6878      	ldr	r0, [r7, #4]
 802420c:	f000 f886 	bl	802431c <_ZN3Run10SetRunModeEh>
        interval_enable = SwitchChangeInterval(switch_state);
 8024210:	7bfb      	ldrb	r3, [r7, #15]
 8024212:	4619      	mov	r1, r3
 8024214:	6878      	ldr	r0, [r7, #4]
 8024216:	f000 f8bf 	bl	8024398 <_ZN3Run20SwitchChangeIntervalEh>
 802421a:	4603      	mov	r3, r0
 802421c:	461a      	mov	r2, r3
 802421e:	4b0a      	ldr	r3, [pc, #40]	; (8024248 <_ZN3Run6Timer2Ev+0xd4>)
 8024220:	701a      	strb	r2, [r3, #0]
 8024222:	e004      	b.n	802422e <_ZN3Run6Timer2Ev+0xba>
    }
    else UpdateRunMode(switch_state);
 8024224:	7bfb      	ldrb	r3, [r7, #15]
 8024226:	4619      	mov	r1, r3
 8024228:	6878      	ldr	r0, [r7, #4]
 802422a:	f000 f811 	bl	8024250 <_ZN3Run13UpdateRunModeEh>

    pre_switch_state = switch_state;
 802422e:	4a04      	ldr	r2, [pc, #16]	; (8024240 <_ZN3Run6Timer2Ev+0xcc>)
 8024230:	7bfb      	ldrb	r3, [r7, #15]
 8024232:	7013      	strb	r3, [r2, #0]
}
 8024234:	bf00      	nop
 8024236:	3710      	adds	r7, #16
 8024238:	46bd      	mov	sp, r7
 802423a:	bd80      	pop	{r7, pc}
 802423c:	2000047c 	.word	0x2000047c
 8024240:	2000047a 	.word	0x2000047a
 8024244:	20000478 	.word	0x20000478
 8024248:	20000001 	.word	0x20000001
 802424c:	20000000 	.word	0x20000000

08024250 <_ZN3Run13UpdateRunModeEh>:

void Run::UpdateRunMode(uint8_t switch_state)
{
 8024250:	b580      	push	{r7, lr}
 8024252:	b082      	sub	sp, #8
 8024254:	af00      	add	r7, sp, #0
 8024256:	6078      	str	r0, [r7, #4]
 8024258:	460b      	mov	r3, r1
 802425a:	70fb      	strb	r3, [r7, #3]
    if(run_mode_changed_internal_) return;
 802425c:	687b      	ldr	r3, [r7, #4]
 802425e:	785b      	ldrb	r3, [r3, #1]
 8024260:	2b00      	cmp	r3, #0
 8024262:	d156      	bne.n	8024312 <_ZN3Run13UpdateRunModeEh+0xc2>

    switch(switch_state)
 8024264:	78fb      	ldrb	r3, [r7, #3]
 8024266:	3b01      	subs	r3, #1
 8024268:	2b0d      	cmp	r3, #13
 802426a:	d84c      	bhi.n	8024306 <_ZN3Run13UpdateRunModeEh+0xb6>
 802426c:	a201      	add	r2, pc, #4	; (adr r2, 8024274 <_ZN3Run13UpdateRunModeEh+0x24>)
 802426e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024272:	bf00      	nop
 8024274:	080242cb 	.word	0x080242cb
 8024278:	080242c1 	.word	0x080242c1
 802427c:	080242ad 	.word	0x080242ad
 8024280:	080242b7 	.word	0x080242b7
 8024284:	08024307 	.word	0x08024307
 8024288:	080242fd 	.word	0x080242fd
 802428c:	08024307 	.word	0x08024307
 8024290:	080242f3 	.word	0x080242f3
 8024294:	08024307 	.word	0x08024307
 8024298:	080242e9 	.word	0x080242e9
 802429c:	08024307 	.word	0x08024307
 80242a0:	080242df 	.word	0x080242df
 80242a4:	08024307 	.word	0x08024307
 80242a8:	080242d5 	.word	0x080242d5
    {
#ifdef DEBUG_MODE
        case 0x03: SetRunMode(RAM_LOG); break;
 80242ac:	2103      	movs	r1, #3
 80242ae:	6878      	ldr	r0, [r7, #4]
 80242b0:	f000 f834 	bl	802431c <_ZN3Run10SetRunModeEh>
 80242b4:	e02e      	b.n	8024314 <_ZN3Run13UpdateRunModeEh+0xc4>
        case 0x04: SetRunMode(RAM_DEV); break;
 80242b6:	2104      	movs	r1, #4
 80242b8:	6878      	ldr	r0, [r7, #4]
 80242ba:	f000 f82f 	bl	802431c <_ZN3Run10SetRunModeEh>
 80242be:	e029      	b.n	8024314 <_ZN3Run13UpdateRunModeEh+0xc4>
        //case 0x03: SetRunMode(GYRO_TEST); break;
        case 0x02: SetRunMode(LINE_TRACE_DEBUG); break;
 80242c0:	2102      	movs	r1, #2
 80242c2:	6878      	ldr	r0, [r7, #4]
 80242c4:	f000 f82a 	bl	802431c <_ZN3Run10SetRunModeEh>
 80242c8:	e024      	b.n	8024314 <_ZN3Run13UpdateRunModeEh+0xc4>
        case 0x01: SetRunMode(VELOCITY_CONTROL_DEBUG); break;
 80242ca:	2101      	movs	r1, #1
 80242cc:	6878      	ldr	r0, [r7, #4]
 80242ce:	f000 f825 	bl	802431c <_ZN3Run10SetRunModeEh>
 80242d2:	e01f      	b.n	8024314 <_ZN3Run13UpdateRunModeEh+0xc4>
#else // DEBUG_MODE
        case 0x02: SetRunMode(LINE_TRACE); break;
        case 0x01: SetRunMode(VELOCITY_CONTROL); break;
#endif // DEBUG_MODE

        case 0x0E: SetRunMode(READY); break;
 80242d4:	210e      	movs	r1, #14
 80242d6:	6878      	ldr	r0, [r7, #4]
 80242d8:	f000 f820 	bl	802431c <_ZN3Run10SetRunModeEh>
 80242dc:	e01a      	b.n	8024314 <_ZN3Run13UpdateRunModeEh+0xc4>
        case 0x0C: SetRunMode(DEV); break;
 80242de:	210c      	movs	r1, #12
 80242e0:	6878      	ldr	r0, [r7, #4]
 80242e2:	f000 f81b 	bl	802431c <_ZN3Run10SetRunModeEh>
 80242e6:	e015      	b.n	8024314 <_ZN3Run13UpdateRunModeEh+0xc4>
        case 0x0A: SetRunMode(DEV_ACCEL); break;
 80242e8:	210a      	movs	r1, #10
 80242ea:	6878      	ldr	r0, [r7, #4]
 80242ec:	f000 f816 	bl	802431c <_ZN3Run10SetRunModeEh>
 80242f0:	e010      	b.n	8024314 <_ZN3Run13UpdateRunModeEh+0xc4>
        case 0x08: SetRunMode(THIRD_RUN); break;
 80242f2:	2108      	movs	r1, #8
 80242f4:	6878      	ldr	r0, [r7, #4]
 80242f6:	f000 f811 	bl	802431c <_ZN3Run10SetRunModeEh>
 80242fa:	e00b      	b.n	8024314 <_ZN3Run13UpdateRunModeEh+0xc4>
        case 0x06: SetRunMode(FORTH_RUN); break;
 80242fc:	2106      	movs	r1, #6
 80242fe:	6878      	ldr	r0, [r7, #4]
 8024300:	f000 f80c 	bl	802431c <_ZN3Run10SetRunModeEh>
 8024304:	e006      	b.n	8024314 <_ZN3Run13UpdateRunModeEh+0xc4>
        //case 0x04: SetRunMode(FIFTH_RUN); break;
        default:   SetRunMode(STANDBY); break;
 8024306:	2100      	movs	r1, #0
 8024308:	6878      	ldr	r0, [r7, #4]
 802430a:	f000 f807 	bl	802431c <_ZN3Run10SetRunModeEh>
 802430e:	bf00      	nop
 8024310:	e000      	b.n	8024314 <_ZN3Run13UpdateRunModeEh+0xc4>
    if(run_mode_changed_internal_) return;
 8024312:	bf00      	nop
    }
}
 8024314:	3708      	adds	r7, #8
 8024316:	46bd      	mov	sp, r7
 8024318:	bd80      	pop	{r7, pc}
 802431a:	bf00      	nop

0802431c <_ZN3Run10SetRunModeEh>:

void Run::SetRunMode(uint8_t mode)
{
 802431c:	b480      	push	{r7}
 802431e:	b083      	sub	sp, #12
 8024320:	af00      	add	r7, sp, #0
 8024322:	6078      	str	r0, [r7, #4]
 8024324:	460b      	mov	r3, r1
 8024326:	70fb      	strb	r3, [r7, #3]
    run_mode_ = mode;
 8024328:	687b      	ldr	r3, [r7, #4]
 802432a:	78fa      	ldrb	r2, [r7, #3]
 802432c:	701a      	strb	r2, [r3, #0]
}
 802432e:	bf00      	nop
 8024330:	370c      	adds	r7, #12
 8024332:	46bd      	mov	sp, r7
 8024334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024338:	4770      	bx	lr
	...

0802433c <_ZN3Run25SetRunModeChangedInternalEb>:

void Run::SetRunModeChangedInternal(bool boolean)
{
 802433c:	b480      	push	{r7}
 802433e:	b083      	sub	sp, #12
 8024340:	af00      	add	r7, sp, #0
 8024342:	6078      	str	r0, [r7, #4]
 8024344:	460b      	mov	r3, r1
 8024346:	70fb      	strb	r3, [r7, #3]
    run_mode_changed_internal_ = boolean;
 8024348:	687b      	ldr	r3, [r7, #4]
 802434a:	78fa      	ldrb	r2, [r7, #3]
 802434c:	705a      	strb	r2, [r3, #1]

#ifdef DEBUG_MODE
    g_run_mode_changed_internal_cnt++;
 802434e:	4b06      	ldr	r3, [pc, #24]	; (8024368 <_ZN3Run25SetRunModeChangedInternalEb+0x2c>)
 8024350:	781b      	ldrb	r3, [r3, #0]
 8024352:	3301      	adds	r3, #1
 8024354:	b2da      	uxtb	r2, r3
 8024356:	4b04      	ldr	r3, [pc, #16]	; (8024368 <_ZN3Run25SetRunModeChangedInternalEb+0x2c>)
 8024358:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE
}
 802435a:	bf00      	nop
 802435c:	370c      	adds	r7, #12
 802435e:	46bd      	mov	sp, r7
 8024360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024364:	4770      	bx	lr
 8024366:	bf00      	nop
 8024368:	20000268 	.word	0x20000268

0802436c <_ZN3Run16WhenSwitchChangeEv>:

void Run::WhenSwitchChange()
{
 802436c:	b580      	push	{r7, lr}
 802436e:	b082      	sub	sp, #8
 8024370:	af00      	add	r7, sp, #0
 8024372:	6078      	str	r0, [r7, #4]
    SetRunModeChangedInternal(false);
 8024374:	2100      	movs	r1, #0
 8024376:	6878      	ldr	r0, [r7, #4]
 8024378:	f7ff ffe0 	bl	802433c <_ZN3Run25SetRunModeChangedInternalEb>
    switch_interval_led_enable_ = true;
 802437c:	687b      	ldr	r3, [r7, #4]
 802437e:	2201      	movs	r2, #1
 8024380:	711a      	strb	r2, [r3, #4]
    switch_interval_wait_enable_ = true;
 8024382:	687b      	ldr	r3, [r7, #4]
 8024384:	2201      	movs	r2, #1
 8024386:	70da      	strb	r2, [r3, #3]
    switch_interval_wait_timer_ = 0;
 8024388:	687b      	ldr	r3, [r7, #4]
 802438a:	2200      	movs	r2, #0
 802438c:	709a      	strb	r2, [r3, #2]
}
 802438e:	bf00      	nop
 8024390:	3708      	adds	r7, #8
 8024392:	46bd      	mov	sp, r7
 8024394:	bd80      	pop	{r7, pc}
	...

08024398 <_ZN3Run20SwitchChangeIntervalEh>:

bool Run::SwitchChangeInterval(uint8_t switch_state)
{
 8024398:	b580      	push	{r7, lr}
 802439a:	b084      	sub	sp, #16
 802439c:	af00      	add	r7, sp, #0
 802439e:	6078      	str	r0, [r7, #4]
 80243a0:	460b      	mov	r3, r1
 80243a2:	70fb      	strb	r3, [r7, #3]
    uint8_t wait_timer = switch_interval_wait_timer_;
 80243a4:	687b      	ldr	r3, [r7, #4]
 80243a6:	789b      	ldrb	r3, [r3, #2]
 80243a8:	73fb      	strb	r3, [r7, #15]
    bool wait_enable = switch_interval_wait_enable_;
 80243aa:	687b      	ldr	r3, [r7, #4]
 80243ac:	78db      	ldrb	r3, [r3, #3]
 80243ae:	73bb      	strb	r3, [r7, #14]
    bool led_enable = switch_interval_led_enable_;
 80243b0:	687b      	ldr	r3, [r7, #4]
 80243b2:	791b      	ldrb	r3, [r3, #4]
 80243b4:	737b      	strb	r3, [r7, #13]
    bool interval_continue = true;
 80243b6:	2301      	movs	r3, #1
 80243b8:	733b      	strb	r3, [r7, #12]

    if(led_enable)
 80243ba:	7b7b      	ldrb	r3, [r7, #13]
 80243bc:	2b00      	cmp	r3, #0
 80243be:	f000 8096 	beq.w	80244ee <_ZN3Run20SwitchChangeIntervalEh+0x156>
    {
        switch(switch_state)
 80243c2:	78fb      	ldrb	r3, [r7, #3]
 80243c4:	3b01      	subs	r3, #1
 80243c6:	2b0e      	cmp	r3, #14
 80243c8:	f200 8086 	bhi.w	80244d8 <_ZN3Run20SwitchChangeIntervalEh+0x140>
 80243cc:	a201      	add	r2, pc, #4	; (adr r2, 80243d4 <_ZN3Run20SwitchChangeIntervalEh+0x3c>)
 80243ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80243d2:	bf00      	nop
 80243d4:	08024475 	.word	0x08024475
 80243d8:	08024489 	.word	0x08024489
 80243dc:	080244c5 	.word	0x080244c5
 80243e0:	080244d9 	.word	0x080244d9
 80243e4:	080244d9 	.word	0x080244d9
 80243e8:	080244d9 	.word	0x080244d9
 80243ec:	0802449d 	.word	0x0802449d
 80243f0:	080244b1 	.word	0x080244b1
 80243f4:	080244d9 	.word	0x080244d9
 80243f8:	08024411 	.word	0x08024411
 80243fc:	08024425 	.word	0x08024425
 8024400:	08024439 	.word	0x08024439
 8024404:	0802444d 	.word	0x0802444d
 8024408:	080244d9 	.word	0x080244d9
 802440c:	08024461 	.word	0x08024461
        {
#ifdef DEBUG_MODE
            case 0x0A: led_enable = led_->BlinkInterrupt(3, 'G', 'B'); break;
 8024410:	687b      	ldr	r3, [r7, #4]
 8024412:	6998      	ldr	r0, [r3, #24]
 8024414:	2342      	movs	r3, #66	; 0x42
 8024416:	2247      	movs	r2, #71	; 0x47
 8024418:	2103      	movs	r1, #3
 802441a:	f7fd fb92 	bl	8021b42 <_ZN3Led14BlinkInterruptEhcc>
 802441e:	4603      	mov	r3, r0
 8024420:	737b      	strb	r3, [r7, #13]
 8024422:	e075      	b.n	8024510 <_ZN3Run20SwitchChangeIntervalEh+0x178>
            case 0x0B: led_enable = led_->BlinkInterrupt(3, 'G', 'Y'); break;
 8024424:	687b      	ldr	r3, [r7, #4]
 8024426:	6998      	ldr	r0, [r3, #24]
 8024428:	2359      	movs	r3, #89	; 0x59
 802442a:	2247      	movs	r2, #71	; 0x47
 802442c:	2103      	movs	r1, #3
 802442e:	f7fd fb88 	bl	8021b42 <_ZN3Led14BlinkInterruptEhcc>
 8024432:	4603      	mov	r3, r0
 8024434:	737b      	strb	r3, [r7, #13]
 8024436:	e06b      	b.n	8024510 <_ZN3Run20SwitchChangeIntervalEh+0x178>
#endif // DEBUG_MODE

            case 0x0C: led_enable = led_->BlinkInterrupt(3, 'B', 'M'); break;
 8024438:	687b      	ldr	r3, [r7, #4]
 802443a:	6998      	ldr	r0, [r3, #24]
 802443c:	234d      	movs	r3, #77	; 0x4d
 802443e:	2242      	movs	r2, #66	; 0x42
 8024440:	2103      	movs	r1, #3
 8024442:	f7fd fb7e 	bl	8021b42 <_ZN3Led14BlinkInterruptEhcc>
 8024446:	4603      	mov	r3, r0
 8024448:	737b      	strb	r3, [r7, #13]
 802444a:	e061      	b.n	8024510 <_ZN3Run20SwitchChangeIntervalEh+0x178>
            case 0x0D: led_enable = led_->BlinkInterrupt(3, 'G', 'X'); break;
 802444c:	687b      	ldr	r3, [r7, #4]
 802444e:	6998      	ldr	r0, [r3, #24]
 8024450:	2358      	movs	r3, #88	; 0x58
 8024452:	2247      	movs	r2, #71	; 0x47
 8024454:	2103      	movs	r1, #3
 8024456:	f7fd fb74 	bl	8021b42 <_ZN3Led14BlinkInterruptEhcc>
 802445a:	4603      	mov	r3, r0
 802445c:	737b      	strb	r3, [r7, #13]
 802445e:	e057      	b.n	8024510 <_ZN3Run20SwitchChangeIntervalEh+0x178>
            case 0x0F: led_enable = led_->BlinkInterrupt(3, 'Y', 'X'); break;
 8024460:	687b      	ldr	r3, [r7, #4]
 8024462:	6998      	ldr	r0, [r3, #24]
 8024464:	2358      	movs	r3, #88	; 0x58
 8024466:	2259      	movs	r2, #89	; 0x59
 8024468:	2103      	movs	r1, #3
 802446a:	f7fd fb6a 	bl	8021b42 <_ZN3Led14BlinkInterruptEhcc>
 802446e:	4603      	mov	r3, r0
 8024470:	737b      	strb	r3, [r7, #13]
 8024472:	e04d      	b.n	8024510 <_ZN3Run20SwitchChangeIntervalEh+0x178>
            case 0x01: led_enable = led_->BlinkInterrupt(3, 'B', 'X'); break;
 8024474:	687b      	ldr	r3, [r7, #4]
 8024476:	6998      	ldr	r0, [r3, #24]
 8024478:	2358      	movs	r3, #88	; 0x58
 802447a:	2242      	movs	r2, #66	; 0x42
 802447c:	2103      	movs	r1, #3
 802447e:	f7fd fb60 	bl	8021b42 <_ZN3Led14BlinkInterruptEhcc>
 8024482:	4603      	mov	r3, r0
 8024484:	737b      	strb	r3, [r7, #13]
 8024486:	e043      	b.n	8024510 <_ZN3Run20SwitchChangeIntervalEh+0x178>
            case 0x02: led_enable = led_->BlinkInterrupt(3, 'M', 'X'); break;
 8024488:	687b      	ldr	r3, [r7, #4]
 802448a:	6998      	ldr	r0, [r3, #24]
 802448c:	2358      	movs	r3, #88	; 0x58
 802448e:	224d      	movs	r2, #77	; 0x4d
 8024490:	2103      	movs	r1, #3
 8024492:	f7fd fb56 	bl	8021b42 <_ZN3Led14BlinkInterruptEhcc>
 8024496:	4603      	mov	r3, r0
 8024498:	737b      	strb	r3, [r7, #13]
 802449a:	e039      	b.n	8024510 <_ZN3Run20SwitchChangeIntervalEh+0x178>
            case 0x07: led_enable = led_->BlinkInterrupt(3, 'G', 'B'); break;
 802449c:	687b      	ldr	r3, [r7, #4]
 802449e:	6998      	ldr	r0, [r3, #24]
 80244a0:	2342      	movs	r3, #66	; 0x42
 80244a2:	2247      	movs	r2, #71	; 0x47
 80244a4:	2103      	movs	r1, #3
 80244a6:	f7fd fb4c 	bl	8021b42 <_ZN3Led14BlinkInterruptEhcc>
 80244aa:	4603      	mov	r3, r0
 80244ac:	737b      	strb	r3, [r7, #13]
 80244ae:	e02f      	b.n	8024510 <_ZN3Run20SwitchChangeIntervalEh+0x178>
            case 0x08: led_enable = led_->BlinkInterrupt(3, 'G', 'Y'); break;
 80244b0:	687b      	ldr	r3, [r7, #4]
 80244b2:	6998      	ldr	r0, [r3, #24]
 80244b4:	2359      	movs	r3, #89	; 0x59
 80244b6:	2247      	movs	r2, #71	; 0x47
 80244b8:	2103      	movs	r1, #3
 80244ba:	f7fd fb42 	bl	8021b42 <_ZN3Led14BlinkInterruptEhcc>
 80244be:	4603      	mov	r3, r0
 80244c0:	737b      	strb	r3, [r7, #13]
 80244c2:	e025      	b.n	8024510 <_ZN3Run20SwitchChangeIntervalEh+0x178>
            case 0x03: led_enable = led_->BlinkInterrupt(3, 'G', 'B'); break;
 80244c4:	687b      	ldr	r3, [r7, #4]
 80244c6:	6998      	ldr	r0, [r3, #24]
 80244c8:	2342      	movs	r3, #66	; 0x42
 80244ca:	2247      	movs	r2, #71	; 0x47
 80244cc:	2103      	movs	r1, #3
 80244ce:	f7fd fb38 	bl	8021b42 <_ZN3Led14BlinkInterruptEhcc>
 80244d2:	4603      	mov	r3, r0
 80244d4:	737b      	strb	r3, [r7, #13]
 80244d6:	e01b      	b.n	8024510 <_ZN3Run20SwitchChangeIntervalEh+0x178>
            default:   led_enable = led_->BlinkInterrupt(3, 'X', 'W'); break;
 80244d8:	687b      	ldr	r3, [r7, #4]
 80244da:	6998      	ldr	r0, [r3, #24]
 80244dc:	2357      	movs	r3, #87	; 0x57
 80244de:	2258      	movs	r2, #88	; 0x58
 80244e0:	2103      	movs	r1, #3
 80244e2:	f7fd fb2e 	bl	8021b42 <_ZN3Led14BlinkInterruptEhcc>
 80244e6:	4603      	mov	r3, r0
 80244e8:	737b      	strb	r3, [r7, #13]
 80244ea:	bf00      	nop
 80244ec:	e010      	b.n	8024510 <_ZN3Run20SwitchChangeIntervalEh+0x178>
        }
    }
    else if(wait_enable)
 80244ee:	7bbb      	ldrb	r3, [r7, #14]
 80244f0:	2b00      	cmp	r3, #0
 80244f2:	d00b      	beq.n	802450c <_ZN3Run20SwitchChangeIntervalEh+0x174>
    {
        if(wait_timer < SWITCH_INTERVAL_WAIT_TIME)
 80244f4:	7bfb      	ldrb	r3, [r7, #15]
 80244f6:	2bc7      	cmp	r3, #199	; 0xc7
 80244f8:	d805      	bhi.n	8024506 <_ZN3Run20SwitchChangeIntervalEh+0x16e>
        {
            wait_timer++;
 80244fa:	7bfb      	ldrb	r3, [r7, #15]
 80244fc:	3301      	adds	r3, #1
 80244fe:	73fb      	strb	r3, [r7, #15]
            wait_enable = true;
 8024500:	2301      	movs	r3, #1
 8024502:	73bb      	strb	r3, [r7, #14]
 8024504:	e004      	b.n	8024510 <_ZN3Run20SwitchChangeIntervalEh+0x178>
        }
        else wait_enable = false;
 8024506:	2300      	movs	r3, #0
 8024508:	73bb      	strb	r3, [r7, #14]
 802450a:	e001      	b.n	8024510 <_ZN3Run20SwitchChangeIntervalEh+0x178>
    }
    else interval_continue = false;
 802450c:	2300      	movs	r3, #0
 802450e:	733b      	strb	r3, [r7, #12]
    
    switch_interval_led_enable_ = led_enable;
 8024510:	687b      	ldr	r3, [r7, #4]
 8024512:	7b7a      	ldrb	r2, [r7, #13]
 8024514:	711a      	strb	r2, [r3, #4]
    switch_interval_wait_enable_ = wait_enable;
 8024516:	687b      	ldr	r3, [r7, #4]
 8024518:	7bba      	ldrb	r2, [r7, #14]
 802451a:	70da      	strb	r2, [r3, #3]
    switch_interval_wait_timer_ = wait_timer;
 802451c:	687b      	ldr	r3, [r7, #4]
 802451e:	7bfa      	ldrb	r2, [r7, #15]
 8024520:	709a      	strb	r2, [r3, #2]

    return interval_continue;
 8024522:	7b3b      	ldrb	r3, [r7, #12]
}
 8024524:	4618      	mov	r0, r3
 8024526:	3710      	adds	r7, #16
 8024528:	46bd      	mov	sp, r7
 802452a:	bd80      	pop	{r7, pc}

0802452c <_ZN3Run13EmergencyStopEv>:

bool Run::EmergencyStop()
{
 802452c:	b580      	push	{r7, lr}
 802452e:	b084      	sub	sp, #16
 8024530:	af00      	add	r7, sp, #0
 8024532:	6078      	str	r0, [r7, #4]
    static uint8_t emergency_timer = 0;
    bool line_emergency = line_sensor_->GetEmergencyStopFlag();
 8024534:	687b      	ldr	r3, [r7, #4]
 8024536:	69db      	ldr	r3, [r3, #28]
 8024538:	4618      	mov	r0, r3
 802453a:	f7fd fe1d 	bl	8022178 <_ZN10LineSensor20GetEmergencyStopFlagEv>
 802453e:	4603      	mov	r3, r0
 8024540:	73fb      	strb	r3, [r7, #15]

    if(emergency_timer >= EMERGENCY_STOP_TIME)
 8024542:	4b0e      	ldr	r3, [pc, #56]	; (802457c <_ZN3Run13EmergencyStopEv+0x50>)
 8024544:	781b      	ldrb	r3, [r3, #0]
 8024546:	2b04      	cmp	r3, #4
 8024548:	d905      	bls.n	8024556 <_ZN3Run13EmergencyStopEv+0x2a>
    {
        SetRunMode(EMERGENCY);
 802454a:	21ee      	movs	r1, #238	; 0xee
 802454c:	6878      	ldr	r0, [r7, #4]
 802454e:	f7ff fee5 	bl	802431c <_ZN3Run10SetRunModeEh>
        return true;
 8024552:	2301      	movs	r3, #1
 8024554:	e00d      	b.n	8024572 <_ZN3Run13EmergencyStopEv+0x46>
    }
    else if(line_emergency) emergency_timer++;
 8024556:	7bfb      	ldrb	r3, [r7, #15]
 8024558:	2b00      	cmp	r3, #0
 802455a:	d006      	beq.n	802456a <_ZN3Run13EmergencyStopEv+0x3e>
 802455c:	4b07      	ldr	r3, [pc, #28]	; (802457c <_ZN3Run13EmergencyStopEv+0x50>)
 802455e:	781b      	ldrb	r3, [r3, #0]
 8024560:	3301      	adds	r3, #1
 8024562:	b2da      	uxtb	r2, r3
 8024564:	4b05      	ldr	r3, [pc, #20]	; (802457c <_ZN3Run13EmergencyStopEv+0x50>)
 8024566:	701a      	strb	r2, [r3, #0]
 8024568:	e002      	b.n	8024570 <_ZN3Run13EmergencyStopEv+0x44>
    else emergency_timer = 0;
 802456a:	4b04      	ldr	r3, [pc, #16]	; (802457c <_ZN3Run13EmergencyStopEv+0x50>)
 802456c:	2200      	movs	r2, #0
 802456e:	701a      	strb	r2, [r3, #0]

    return false;
 8024570:	2300      	movs	r3, #0
}
 8024572:	4618      	mov	r0, r3
 8024574:	3710      	adds	r7, #16
 8024576:	46bd      	mov	sp, r7
 8024578:	bd80      	pop	{r7, pc}
 802457a:	bf00      	nop
 802457c:	20000480 	.word	0x20000480

08024580 <_ZN3Run7RunModeEv>:

void Run::RunMode()
{
 8024580:	b580      	push	{r7, lr}
 8024582:	b082      	sub	sp, #8
 8024584:	af00      	add	r7, sp, #0
 8024586:	6078      	str	r0, [r7, #4]
    switch(run_mode_)
 8024588:	687b      	ldr	r3, [r7, #4]
 802458a:	781b      	ldrb	r3, [r3, #0]
 802458c:	2b0c      	cmp	r3, #12
 802458e:	d037      	beq.n	8024600 <_ZN3Run7RunModeEv+0x80>
 8024590:	2b0c      	cmp	r3, #12
 8024592:	dc0f      	bgt.n	80245b4 <_ZN3Run7RunModeEv+0x34>
 8024594:	2b02      	cmp	r3, #2
 8024596:	d01f      	beq.n	80245d8 <_ZN3Run7RunModeEv+0x58>
 8024598:	2b02      	cmp	r3, #2
 802459a:	dc04      	bgt.n	80245a6 <_ZN3Run7RunModeEv+0x26>
 802459c:	2b00      	cmp	r3, #0
 802459e:	d027      	beq.n	80245f0 <_ZN3Run7RunModeEv+0x70>
 80245a0:	2b01      	cmp	r3, #1
 80245a2:	d01d      	beq.n	80245e0 <_ZN3Run7RunModeEv+0x60>
 80245a4:	e050      	b.n	8024648 <_ZN3Run7RunModeEv+0xc8>
 80245a6:	2b04      	cmp	r3, #4
 80245a8:	d04a      	beq.n	8024640 <_ZN3Run7RunModeEv+0xc0>
 80245aa:	2b04      	cmp	r3, #4
 80245ac:	db44      	blt.n	8024638 <_ZN3Run7RunModeEv+0xb8>
 80245ae:	2b0a      	cmp	r3, #10
 80245b0:	d02a      	beq.n	8024608 <_ZN3Run7RunModeEv+0x88>
 80245b2:	e049      	b.n	8024648 <_ZN3Run7RunModeEv+0xc8>
 80245b4:	2bca      	cmp	r3, #202	; 0xca
 80245b6:	d02b      	beq.n	8024610 <_ZN3Run7RunModeEv+0x90>
 80245b8:	2bca      	cmp	r3, #202	; 0xca
 80245ba:	dc06      	bgt.n	80245ca <_ZN3Run7RunModeEv+0x4a>
 80245bc:	2b1f      	cmp	r3, #31
 80245be:	d02b      	beq.n	8024618 <_ZN3Run7RunModeEv+0x98>
 80245c0:	2b2f      	cmp	r3, #47	; 0x2f
 80245c2:	d031      	beq.n	8024628 <_ZN3Run7RunModeEv+0xa8>
 80245c4:	2b0e      	cmp	r3, #14
 80245c6:	d017      	beq.n	80245f8 <_ZN3Run7RunModeEv+0x78>
 80245c8:	e03e      	b.n	8024648 <_ZN3Run7RunModeEv+0xc8>
 80245ca:	2bf1      	cmp	r3, #241	; 0xf1
 80245cc:	d028      	beq.n	8024620 <_ZN3Run7RunModeEv+0xa0>
 80245ce:	2bf2      	cmp	r3, #242	; 0xf2
 80245d0:	d02e      	beq.n	8024630 <_ZN3Run7RunModeEv+0xb0>
 80245d2:	2bee      	cmp	r3, #238	; 0xee
 80245d4:	d008      	beq.n	80245e8 <_ZN3Run7RunModeEv+0x68>
 80245d6:	e037      	b.n	8024648 <_ZN3Run7RunModeEv+0xc8>
    {
#ifdef DEBUG_MODE
        case LINE_TRACE_DEBUG: ModeLineTraceDebug(); break;
 80245d8:	6878      	ldr	r0, [r7, #4]
 80245da:	f000 fbad 	bl	8024d38 <_ZN3Run18ModeLineTraceDebugEv>
 80245de:	e037      	b.n	8024650 <_ZN3Run7RunModeEv+0xd0>
        case VELOCITY_CONTROL_DEBUG: ModeVelocityControlDebug(); break;
 80245e0:	6878      	ldr	r0, [r7, #4]
 80245e2:	f000 fb7f 	bl	8024ce4 <_ZN3Run24ModeVelocityControlDebugEv>
 80245e6:	e033      	b.n	8024650 <_ZN3Run7RunModeEv+0xd0>
#else // DEBUG_MODE
        case LINE_TRACE: ModeLineTrace(); break;
        case VELOCITY_CONTROL: ModeVelocityControl(); break;
#endif // DEBUG_MODE

        case EMERGENCY: ModeEmergency(); break;
 80245e8:	6878      	ldr	r0, [r7, #4]
 80245ea:	f000 f839 	bl	8024660 <_ZN3Run13ModeEmergencyEv>
 80245ee:	e02f      	b.n	8024650 <_ZN3Run7RunModeEv+0xd0>
        case STANDBY: ModeStandby(); break;
 80245f0:	6878      	ldr	r0, [r7, #4]
 80245f2:	f000 f881 	bl	80246f8 <_ZN3Run11ModeStandbyEv>
 80245f6:	e02b      	b.n	8024650 <_ZN3Run7RunModeEv+0xd0>
        case READY: ModeReady(); break;
 80245f8:	6878      	ldr	r0, [r7, #4]
 80245fa:	f000 f85b 	bl	80246b4 <_ZN3Run9ModeReadyEv>
 80245fe:	e027      	b.n	8024650 <_ZN3Run7RunModeEv+0xd0>
        case DEV: ModeDevelopment(); break;
 8024600:	6878      	ldr	r0, [r7, #4]
 8024602:	f000 f8fb 	bl	80247fc <_ZN3Run15ModeDevelopmentEv>
 8024606:	e023      	b.n	8024650 <_ZN3Run7RunModeEv+0xd0>
        case DEV_ACCEL: ModeDevAccel(); break;
 8024608:	6878      	ldr	r0, [r7, #4]
 802460a:	f000 f951 	bl	80248b0 <_ZN3Run12ModeDevAccelEv>
 802460e:	e01f      	b.n	8024650 <_ZN3Run7RunModeEv+0xd0>
        case DEV_GOAL: ModeDevGoal(); break;
 8024610:	6878      	ldr	r0, [r7, #4]
 8024612:	f000 fa6f 	bl	8024af4 <_ZN3Run11ModeDevGoalEv>
 8024616:	e01b      	b.n	8024650 <_ZN3Run7RunModeEv+0xd0>
        case FIRST_RUN: ModeFirstRun(); break;
 8024618:	6878      	ldr	r0, [r7, #4]
 802461a:	f000 fa85 	bl	8024b28 <_ZN3Run12ModeFirstRunEv>
 802461e:	e017      	b.n	8024650 <_ZN3Run7RunModeEv+0xd0>
        case FIRST_GOAL: ModeFirstGoal(); break;
 8024620:	6878      	ldr	r0, [r7, #4]
 8024622:	f000 facd 	bl	8024bc0 <_ZN3Run13ModeFirstGoalEv>
 8024626:	e013      	b.n	8024650 <_ZN3Run7RunModeEv+0xd0>
        case SECOND_RUN: ModeSecondRun(); break;
 8024628:	6878      	ldr	r0, [r7, #4]
 802462a:	f000 faed 	bl	8024c08 <_ZN3Run13ModeSecondRunEv>
 802462e:	e00f      	b.n	8024650 <_ZN3Run7RunModeEv+0xd0>
        case SECOND_GOAL: ModeSecondGoal(); break;
 8024630:	6878      	ldr	r0, [r7, #4]
 8024632:	f000 fb3d 	bl	8024cb0 <_ZN3Run14ModeSecondGoalEv>
 8024636:	e00b      	b.n	8024650 <_ZN3Run7RunModeEv+0xd0>
        //case GYRO_TEST: ModeGyroTest(); break;
        case RAM_LOG: ModeStopIntrrupt(); break;
 8024638:	6878      	ldr	r0, [r7, #4]
 802463a:	f000 f8c3 	bl	80247c4 <_ZN3Run16ModeStopIntrruptEv>
 802463e:	e007      	b.n	8024650 <_ZN3Run7RunModeEv+0xd0>
        case RAM_DEV: ModeRamDev(); break;
 8024640:	6878      	ldr	r0, [r7, #4]
 8024642:	f000 f86d 	bl	8024720 <_ZN3Run10ModeRamDevEv>
 8024646:	e003      	b.n	8024650 <_ZN3Run7RunModeEv+0xd0>
        default: ModeStandby(); break;
 8024648:	6878      	ldr	r0, [r7, #4]
 802464a:	f000 f855 	bl	80246f8 <_ZN3Run11ModeStandbyEv>
 802464e:	bf00      	nop
    }

    mode_complete_ = true;
 8024650:	687b      	ldr	r3, [r7, #4]
 8024652:	2201      	movs	r2, #1
 8024654:	715a      	strb	r2, [r3, #5]
}
 8024656:	bf00      	nop
 8024658:	3708      	adds	r7, #8
 802465a:	46bd      	mov	sp, r7
 802465c:	bd80      	pop	{r7, pc}
	...

08024660 <_ZN3Run13ModeEmergencyEv>:

void Run::ModeEmergency()
{
 8024660:	b580      	push	{r7, lr}
 8024662:	b084      	sub	sp, #16
 8024664:	af00      	add	r7, sp, #0
 8024666:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 8024668:	687b      	ldr	r3, [r7, #4]
 802466a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802466c:	eddf 0a10 	vldr	s1, [pc, #64]	; 80246b0 <_ZN3Run13ModeEmergencyEv+0x50>
 8024670:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80246b0 <_ZN3Run13ModeEmergencyEv+0x50>
 8024674:	4618      	mov	r0, r3
 8024676:	f7ff fa4f 	bl	8023b18 <_ZN5Motor5DriveEff>

    bool result = logger_->GetSuccessEmergencyCodeStore();
 802467a:	687b      	ldr	r3, [r7, #4]
 802467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802467e:	4618      	mov	r0, r3
 8024680:	f7fe fa82 	bl	8022b88 <_ZN6Logger28GetSuccessEmergencyCodeStoreEv>
 8024684:	4603      	mov	r3, r0
 8024686:	73fb      	strb	r3, [r7, #15]
    if(result) led_->ColorOrder('R');
 8024688:	7bfb      	ldrb	r3, [r7, #15]
 802468a:	2b00      	cmp	r3, #0
 802468c:	d006      	beq.n	802469c <_ZN3Run13ModeEmergencyEv+0x3c>
 802468e:	687b      	ldr	r3, [r7, #4]
 8024690:	699b      	ldr	r3, [r3, #24]
 8024692:	2152      	movs	r1, #82	; 0x52
 8024694:	4618      	mov	r0, r3
 8024696:	f7fd f907 	bl	80218a8 <_ZN3Led10ColorOrderEc>
    else led_->ColorOrder('G');
}
 802469a:	e005      	b.n	80246a8 <_ZN3Run13ModeEmergencyEv+0x48>
    else led_->ColorOrder('G');
 802469c:	687b      	ldr	r3, [r7, #4]
 802469e:	699b      	ldr	r3, [r3, #24]
 80246a0:	2147      	movs	r1, #71	; 0x47
 80246a2:	4618      	mov	r0, r3
 80246a4:	f7fd f900 	bl	80218a8 <_ZN3Led10ColorOrderEc>
}
 80246a8:	bf00      	nop
 80246aa:	3710      	adds	r7, #16
 80246ac:	46bd      	mov	sp, r7
 80246ae:	bd80      	pop	{r7, pc}
 80246b0:	00000000 	.word	0x00000000

080246b4 <_ZN3Run9ModeReadyEv>:

void Run::ModeReady()
{
 80246b4:	b580      	push	{r7, lr}
 80246b6:	b082      	sub	sp, #8
 80246b8:	af00      	add	r7, sp, #0
 80246ba:	6078      	str	r0, [r7, #4]
    line_sensor_->Update();
 80246bc:	687b      	ldr	r3, [r7, #4]
 80246be:	69db      	ldr	r3, [r3, #28]
 80246c0:	4618      	mov	r0, r3
 80246c2:	f7fd fc1b 	bl	8021efc <_ZN10LineSensor6UpdateEv>
    if(line_sensor_->CheckCalibration()) led_->ColorOrder('X');
 80246c6:	687b      	ldr	r3, [r7, #4]
 80246c8:	69db      	ldr	r3, [r3, #28]
 80246ca:	4618      	mov	r0, r3
 80246cc:	f7fd fd62 	bl	8022194 <_ZN10LineSensor16CheckCalibrationEv>
 80246d0:	4603      	mov	r3, r0
 80246d2:	2b00      	cmp	r3, #0
 80246d4:	d006      	beq.n	80246e4 <_ZN3Run9ModeReadyEv+0x30>
 80246d6:	687b      	ldr	r3, [r7, #4]
 80246d8:	699b      	ldr	r3, [r3, #24]
 80246da:	2158      	movs	r1, #88	; 0x58
 80246dc:	4618      	mov	r0, r3
 80246de:	f7fd f8e3 	bl	80218a8 <_ZN3Led10ColorOrderEc>
    else led_->ColorOrder('R');
}
 80246e2:	e005      	b.n	80246f0 <_ZN3Run9ModeReadyEv+0x3c>
    else led_->ColorOrder('R');
 80246e4:	687b      	ldr	r3, [r7, #4]
 80246e6:	699b      	ldr	r3, [r3, #24]
 80246e8:	2152      	movs	r1, #82	; 0x52
 80246ea:	4618      	mov	r0, r3
 80246ec:	f7fd f8dc 	bl	80218a8 <_ZN3Led10ColorOrderEc>
}
 80246f0:	bf00      	nop
 80246f2:	3708      	adds	r7, #8
 80246f4:	46bd      	mov	sp, r7
 80246f6:	bd80      	pop	{r7, pc}

080246f8 <_ZN3Run11ModeStandbyEv>:

void Run::ModeStandby()
{
 80246f8:	b580      	push	{r7, lr}
 80246fa:	b082      	sub	sp, #8
 80246fc:	af00      	add	r7, sp, #0
 80246fe:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 8024700:	687b      	ldr	r3, [r7, #4]
 8024702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024704:	eddf 0a05 	vldr	s1, [pc, #20]	; 802471c <_ZN3Run11ModeStandbyEv+0x24>
 8024708:	ed9f 0a04 	vldr	s0, [pc, #16]	; 802471c <_ZN3Run11ModeStandbyEv+0x24>
 802470c:	4618      	mov	r0, r3
 802470e:	f7ff fa03 	bl	8023b18 <_ZN5Motor5DriveEff>
}
 8024712:	bf00      	nop
 8024714:	3708      	adds	r7, #8
 8024716:	46bd      	mov	sp, r7
 8024718:	bd80      	pop	{r7, pc}
 802471a:	bf00      	nop
 802471c:	00000000 	.word	0x00000000

08024720 <_ZN3Run10ModeRamDevEv>:
}

/* ram test */

void Run::ModeRamDev()
{
 8024720:	b580      	push	{r7, lr}
 8024722:	b086      	sub	sp, #24
 8024724:	af00      	add	r7, sp, #0
 8024726:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    encoder_->Update();
 8024728:	687b      	ldr	r3, [r7, #4]
 802472a:	689b      	ldr	r3, [r3, #8]
 802472c:	4618      	mov	r0, r3
 802472e:	f7fc fb8f 	bl	8020e50 <_ZN7Encoder6UpdateEv>
    line_sensor_->Update();
 8024732:	687b      	ldr	r3, [r7, #4]
 8024734:	69db      	ldr	r3, [r3, #28]
 8024736:	4618      	mov	r0, r3
 8024738:	f7fd fbe0 	bl	8021efc <_ZN10LineSensor6UpdateEv>
    side_sensor_->Update();
 802473c:	687b      	ldr	r3, [r7, #4]
 802473e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024740:	4618      	mov	r0, r3
 8024742:	f000 fc27 	bl	8024f94 <_ZN10SideSensor6UpdateEv>
    imu_->Update();
 8024746:	687b      	ldr	r3, [r7, #4]
 8024748:	695b      	ldr	r3, [r3, #20]
 802474a:	4618      	mov	r0, r3
 802474c:	f7fc ffe8 	bl	8021720 <_ZN3Imu6UpdateEv>
    logger_->Ramming();
 8024750:	687b      	ldr	r3, [r7, #4]
 8024752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024754:	4618      	mov	r0, r3
 8024756:	f7fd ff6b 	bl	8022630 <_ZN6Logger7RammingEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 802475a:	6878      	ldr	r0, [r7, #4]
 802475c:	f7ff fee6 	bl	802452c <_ZN3Run13EmergencyStopEv>
 8024760:	4603      	mov	r3, r0
 8024762:	2b00      	cmp	r3, #0
 8024764:	d129      	bne.n	80247ba <_ZN3Run10ModeRamDevEv+0x9a>
    /* Motor control */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 8024766:	687b      	ldr	r3, [r7, #4]
 8024768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802476a:	4618      	mov	r0, r3
 802476c:	f000 fde1 	bl	8025332 <_ZN10SideSensor18GetGoalMarkerCountEv>
 8024770:	4603      	mov	r3, r0
 8024772:	75fb      	strb	r3, [r7, #23]
    float target_velocity = DevTargetVelocity(goal_count);
 8024774:	7dfb      	ldrb	r3, [r7, #23]
 8024776:	4619      	mov	r1, r3
 8024778:	6878      	ldr	r0, [r7, #4]
 802477a:	f000 f927 	bl	80249cc <_ZN3Run17DevTargetVelocityEh>
 802477e:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 8024782:	687b      	ldr	r3, [r7, #4]
 8024784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024786:	ed97 0a04 	vldr	s0, [r7, #16]
 802478a:	4618      	mov	r0, r3
 802478c:	f001 fb63 	bl	8025e56 <_ZN15VelocityControl16DeterminePidGainEf>
 8024790:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 8024794:	687b      	ldr	r3, [r7, #4]
 8024796:	6a1b      	ldr	r3, [r3, #32]
 8024798:	ed97 0a04 	vldr	s0, [r7, #16]
 802479c:	4618      	mov	r0, r3
 802479e:	f7fd fd87 	bl	80222b0 <_ZN9LineTrace16DeterminePidGainEf>
 80247a2:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 80247a6:	687b      	ldr	r3, [r7, #4]
 80247a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80247aa:	edd7 0a02 	vldr	s1, [r7, #8]
 80247ae:	ed97 0a03 	vldr	s0, [r7, #12]
 80247b2:	4618      	mov	r0, r3
 80247b4:	f7ff f9b0 	bl	8023b18 <_ZN5Motor5DriveEff>
 80247b8:	e000      	b.n	80247bc <_ZN3Run10ModeRamDevEv+0x9c>
    if(EmergencyStop()) return;
 80247ba:	bf00      	nop
}
 80247bc:	3718      	adds	r7, #24
 80247be:	46bd      	mov	sp, r7
 80247c0:	bd80      	pop	{r7, pc}
	...

080247c4 <_ZN3Run16ModeStopIntrruptEv>:

void Run::ModeStopIntrrupt()
{
 80247c4:	b580      	push	{r7, lr}
 80247c6:	b082      	sub	sp, #8
 80247c8:	af00      	add	r7, sp, #0
 80247ca:	6078      	str	r0, [r7, #4]
    HAL_TIM_Base_Stop_IT(&htim2);
 80247cc:	4808      	ldr	r0, [pc, #32]	; (80247f0 <_ZN3Run16ModeStopIntrruptEv+0x2c>)
 80247ce:	f004 fe32 	bl	8029436 <HAL_TIM_Base_Stop_IT>
    HAL_TIM_Base_Stop_IT(&htim6);
 80247d2:	4808      	ldr	r0, [pc, #32]	; (80247f4 <_ZN3Run16ModeStopIntrruptEv+0x30>)
 80247d4:	f004 fe2f 	bl	8029436 <HAL_TIM_Base_Stop_IT>
    HAL_TIM_Base_Stop_IT(&htim7);
 80247d8:	4807      	ldr	r0, [pc, #28]	; (80247f8 <_ZN3Run16ModeStopIntrruptEv+0x34>)
 80247da:	f004 fe2c 	bl	8029436 <HAL_TIM_Base_Stop_IT>
    
    print_->RamLog();
 80247de:	687b      	ldr	r3, [r7, #4]
 80247e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80247e2:	4618      	mov	r0, r3
 80247e4:	f7ff fb44 	bl	8023e70 <_ZN5Print6RamLogEv>
}
 80247e8:	bf00      	nop
 80247ea:	3708      	adds	r7, #8
 80247ec:	46bd      	mov	sp, r7
 80247ee:	bd80      	pop	{r7, pc}
 80247f0:	20017540 	.word	0x20017540
 80247f4:	20014450 	.word	0x20014450
 80247f8:	200175c0 	.word	0x200175c0

080247fc <_ZN3Run15ModeDevelopmentEv>:

/* ram test end */

void Run::ModeDevelopment()
{
 80247fc:	b580      	push	{r7, lr}
 80247fe:	b086      	sub	sp, #24
 8024800:	af00      	add	r7, sp, #0
 8024802:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    encoder_->Update();
 8024804:	687b      	ldr	r3, [r7, #4]
 8024806:	689b      	ldr	r3, [r3, #8]
 8024808:	4618      	mov	r0, r3
 802480a:	f7fc fb21 	bl	8020e50 <_ZN7Encoder6UpdateEv>
    line_sensor_->Update();
 802480e:	687b      	ldr	r3, [r7, #4]
 8024810:	69db      	ldr	r3, [r3, #28]
 8024812:	4618      	mov	r0, r3
 8024814:	f7fd fb72 	bl	8021efc <_ZN10LineSensor6UpdateEv>
    side_sensor_->Update();
 8024818:	687b      	ldr	r3, [r7, #4]
 802481a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802481c:	4618      	mov	r0, r3
 802481e:	f000 fbb9 	bl	8024f94 <_ZN10SideSensor6UpdateEv>
    imu_->Update();
 8024822:	687b      	ldr	r3, [r7, #4]
 8024824:	695b      	ldr	r3, [r3, #20]
 8024826:	4618      	mov	r0, r3
 8024828:	f7fc ff7a 	bl	8021720 <_ZN3Imu6UpdateEv>
    logger_->Logging();
 802482c:	687b      	ldr	r3, [r7, #4]
 802482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024830:	4618      	mov	r0, r3
 8024832:	f7fd fe99 	bl	8022568 <_ZN6Logger7LoggingEv>
    /* Emergency stop */
    if(DevEmergencyStop()) return;
 8024836:	6878      	ldr	r0, [r7, #4]
 8024838:	f000 f886 	bl	8024948 <_ZN3Run16DevEmergencyStopEv>
 802483c:	4603      	mov	r3, r0
 802483e:	2b00      	cmp	r3, #0
 8024840:	d12f      	bne.n	80248a2 <_ZN3Run15ModeDevelopmentEv+0xa6>
    /* Motor control */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 8024842:	687b      	ldr	r3, [r7, #4]
 8024844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024846:	4618      	mov	r0, r3
 8024848:	f000 fd73 	bl	8025332 <_ZN10SideSensor18GetGoalMarkerCountEv>
 802484c:	4603      	mov	r3, r0
 802484e:	75fb      	strb	r3, [r7, #23]
    float target_velocity = DevTargetVelocity(goal_count);
 8024850:	7dfb      	ldrb	r3, [r7, #23]
 8024852:	4619      	mov	r1, r3
 8024854:	6878      	ldr	r0, [r7, #4]
 8024856:	f000 f8b9 	bl	80249cc <_ZN3Run17DevTargetVelocityEh>
 802485a:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 802485e:	687b      	ldr	r3, [r7, #4]
 8024860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024862:	ed97 0a04 	vldr	s0, [r7, #16]
 8024866:	4618      	mov	r0, r3
 8024868:	f001 faf5 	bl	8025e56 <_ZN15VelocityControl16DeterminePidGainEf>
 802486c:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 8024870:	687b      	ldr	r3, [r7, #4]
 8024872:	6a1b      	ldr	r3, [r3, #32]
 8024874:	ed97 0a04 	vldr	s0, [r7, #16]
 8024878:	4618      	mov	r0, r3
 802487a:	f7fd fd19 	bl	80222b0 <_ZN9LineTrace16DeterminePidGainEf>
 802487e:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 8024882:	687b      	ldr	r3, [r7, #4]
 8024884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024886:	edd7 0a02 	vldr	s1, [r7, #8]
 802488a:	ed97 0a03 	vldr	s0, [r7, #12]
 802488e:	4618      	mov	r0, r3
 8024890:	f7ff f942 	bl	8023b18 <_ZN5Motor5DriveEff>
    monitor_count++;
 8024894:	4b05      	ldr	r3, [pc, #20]	; (80248ac <_ZN3Run15ModeDevelopmentEv+0xb0>)
 8024896:	881b      	ldrh	r3, [r3, #0]
 8024898:	3301      	adds	r3, #1
 802489a:	b29a      	uxth	r2, r3
 802489c:	4b03      	ldr	r3, [pc, #12]	; (80248ac <_ZN3Run15ModeDevelopmentEv+0xb0>)
 802489e:	801a      	strh	r2, [r3, #0]
 80248a0:	e000      	b.n	80248a4 <_ZN3Run15ModeDevelopmentEv+0xa8>
    if(DevEmergencyStop()) return;
 80248a2:	bf00      	nop
}
 80248a4:	3718      	adds	r7, #24
 80248a6:	46bd      	mov	sp, r7
 80248a8:	bd80      	pop	{r7, pc}
 80248aa:	bf00      	nop
 80248ac:	20011148 	.word	0x20011148

080248b0 <_ZN3Run12ModeDevAccelEv>:

void Run::ModeDevAccel()
{
 80248b0:	b580      	push	{r7, lr}
 80248b2:	b086      	sub	sp, #24
 80248b4:	af00      	add	r7, sp, #0
 80248b6:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    encoder_->Update();
 80248b8:	687b      	ldr	r3, [r7, #4]
 80248ba:	689b      	ldr	r3, [r3, #8]
 80248bc:	4618      	mov	r0, r3
 80248be:	f7fc fac7 	bl	8020e50 <_ZN7Encoder6UpdateEv>
    line_sensor_->Update();
 80248c2:	687b      	ldr	r3, [r7, #4]
 80248c4:	69db      	ldr	r3, [r3, #28]
 80248c6:	4618      	mov	r0, r3
 80248c8:	f7fd fb18 	bl	8021efc <_ZN10LineSensor6UpdateEv>
    side_sensor_->Update();
 80248cc:	687b      	ldr	r3, [r7, #4]
 80248ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80248d0:	4618      	mov	r0, r3
 80248d2:	f000 fb5f 	bl	8024f94 <_ZN10SideSensor6UpdateEv>
    logger_->Loading();
 80248d6:	687b      	ldr	r3, [r7, #4]
 80248d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80248da:	4618      	mov	r0, r3
 80248dc:	f7fe fa34 	bl	8022d48 <_ZN6Logger7LoadingEv>
    /* Motor control */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 80248e0:	687b      	ldr	r3, [r7, #4]
 80248e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80248e4:	4618      	mov	r0, r3
 80248e6:	f000 fd24 	bl	8025332 <_ZN10SideSensor18GetGoalMarkerCountEv>
 80248ea:	4603      	mov	r3, r0
 80248ec:	75fb      	strb	r3, [r7, #23]
    float target_velocity = DevAccelTarget(goal_count);
 80248ee:	7dfb      	ldrb	r3, [r7, #23]
 80248f0:	4619      	mov	r1, r3
 80248f2:	6878      	ldr	r0, [r7, #4]
 80248f4:	f000 f8b0 	bl	8024a58 <_ZN3Run14DevAccelTargetEh>
 80248f8:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 80248fc:	687b      	ldr	r3, [r7, #4]
 80248fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024900:	ed97 0a04 	vldr	s0, [r7, #16]
 8024904:	4618      	mov	r0, r3
 8024906:	f001 faa6 	bl	8025e56 <_ZN15VelocityControl16DeterminePidGainEf>
 802490a:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 802490e:	687b      	ldr	r3, [r7, #4]
 8024910:	6a1b      	ldr	r3, [r3, #32]
 8024912:	ed97 0a04 	vldr	s0, [r7, #16]
 8024916:	4618      	mov	r0, r3
 8024918:	f7fd fcca 	bl	80222b0 <_ZN9LineTrace16DeterminePidGainEf>
 802491c:	ed87 0a02 	vstr	s0, [r7, #8]
    /* Emergency stop */
    if(DevEmergencyStop()) return;
 8024920:	6878      	ldr	r0, [r7, #4]
 8024922:	f000 f811 	bl	8024948 <_ZN3Run16DevEmergencyStopEv>
 8024926:	4603      	mov	r3, r0
 8024928:	2b00      	cmp	r3, #0
 802492a:	d109      	bne.n	8024940 <_ZN3Run12ModeDevAccelEv+0x90>
    motor_->Drive(trans_ratio, rotat_ratio);
 802492c:	687b      	ldr	r3, [r7, #4]
 802492e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024930:	edd7 0a02 	vldr	s1, [r7, #8]
 8024934:	ed97 0a03 	vldr	s0, [r7, #12]
 8024938:	4618      	mov	r0, r3
 802493a:	f7ff f8ed 	bl	8023b18 <_ZN5Motor5DriveEff>
 802493e:	e000      	b.n	8024942 <_ZN3Run12ModeDevAccelEv+0x92>
    if(DevEmergencyStop()) return;
 8024940:	bf00      	nop
}
 8024942:	3718      	adds	r7, #24
 8024944:	46bd      	mov	sp, r7
 8024946:	bd80      	pop	{r7, pc}

08024948 <_ZN3Run16DevEmergencyStopEv>:

bool Run::DevEmergencyStop()
{
 8024948:	b580      	push	{r7, lr}
 802494a:	b084      	sub	sp, #16
 802494c:	af00      	add	r7, sp, #0
 802494e:	6078      	str	r0, [r7, #4]
    static uint8_t emergency_timer = 0;
    bool line_emergency = line_sensor_->GetEmergencyStopFlag();
 8024950:	687b      	ldr	r3, [r7, #4]
 8024952:	69db      	ldr	r3, [r3, #28]
 8024954:	4618      	mov	r0, r3
 8024956:	f7fd fc0f 	bl	8022178 <_ZN10LineSensor20GetEmergencyStopFlagEv>
 802495a:	4603      	mov	r3, r0
 802495c:	73fb      	strb	r3, [r7, #15]
    bool logging_emergency = logger_->GetEmergencyStopFlag();
 802495e:	687b      	ldr	r3, [r7, #4]
 8024960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024962:	4618      	mov	r0, r3
 8024964:	f7fe f8f5 	bl	8022b52 <_ZN6Logger20GetEmergencyStopFlagEv>
 8024968:	4603      	mov	r3, r0
 802496a:	73bb      	strb	r3, [r7, #14]

    if(logging_emergency)
 802496c:	7bbb      	ldrb	r3, [r7, #14]
 802496e:	2b00      	cmp	r3, #0
 8024970:	d009      	beq.n	8024986 <_ZN3Run16DevEmergencyStopEv+0x3e>
    {
        SetRunMode(EMERGENCY);
 8024972:	21ee      	movs	r1, #238	; 0xee
 8024974:	6878      	ldr	r0, [r7, #4]
 8024976:	f7ff fcd1 	bl	802431c <_ZN3Run10SetRunModeEh>
        SetRunModeChangedInternal(true);
 802497a:	2101      	movs	r1, #1
 802497c:	6878      	ldr	r0, [r7, #4]
 802497e:	f7ff fcdd 	bl	802433c <_ZN3Run25SetRunModeChangedInternalEb>
        return true;
 8024982:	2301      	movs	r3, #1
 8024984:	e01b      	b.n	80249be <_ZN3Run16DevEmergencyStopEv+0x76>
    }

    if(line_emergency)
 8024986:	7bfb      	ldrb	r3, [r7, #15]
 8024988:	2b00      	cmp	r3, #0
 802498a:	d014      	beq.n	80249b6 <_ZN3Run16DevEmergencyStopEv+0x6e>
    {
        if(emergency_timer >= EMERGENCY_STOP_TIME)
 802498c:	4b0e      	ldr	r3, [pc, #56]	; (80249c8 <_ZN3Run16DevEmergencyStopEv+0x80>)
 802498e:	781b      	ldrb	r3, [r3, #0]
 8024990:	2b04      	cmp	r3, #4
 8024992:	d909      	bls.n	80249a8 <_ZN3Run16DevEmergencyStopEv+0x60>
        {
            SetRunMode(EMERGENCY);
 8024994:	21ee      	movs	r1, #238	; 0xee
 8024996:	6878      	ldr	r0, [r7, #4]
 8024998:	f7ff fcc0 	bl	802431c <_ZN3Run10SetRunModeEh>
            SetRunModeChangedInternal(true);
 802499c:	2101      	movs	r1, #1
 802499e:	6878      	ldr	r0, [r7, #4]
 80249a0:	f7ff fccc 	bl	802433c <_ZN3Run25SetRunModeChangedInternalEb>
            return true;
 80249a4:	2301      	movs	r3, #1
 80249a6:	e00a      	b.n	80249be <_ZN3Run16DevEmergencyStopEv+0x76>
        }
        else emergency_timer++;
 80249a8:	4b07      	ldr	r3, [pc, #28]	; (80249c8 <_ZN3Run16DevEmergencyStopEv+0x80>)
 80249aa:	781b      	ldrb	r3, [r3, #0]
 80249ac:	3301      	adds	r3, #1
 80249ae:	b2da      	uxtb	r2, r3
 80249b0:	4b05      	ldr	r3, [pc, #20]	; (80249c8 <_ZN3Run16DevEmergencyStopEv+0x80>)
 80249b2:	701a      	strb	r2, [r3, #0]
 80249b4:	e002      	b.n	80249bc <_ZN3Run16DevEmergencyStopEv+0x74>
    }
    else emergency_timer = 0;
 80249b6:	4b04      	ldr	r3, [pc, #16]	; (80249c8 <_ZN3Run16DevEmergencyStopEv+0x80>)
 80249b8:	2200      	movs	r2, #0
 80249ba:	701a      	strb	r2, [r3, #0]

    return false;
 80249bc:	2300      	movs	r3, #0
}
 80249be:	4618      	mov	r0, r3
 80249c0:	3710      	adds	r7, #16
 80249c2:	46bd      	mov	sp, r7
 80249c4:	bd80      	pop	{r7, pc}
 80249c6:	bf00      	nop
 80249c8:	20000481 	.word	0x20000481

080249cc <_ZN3Run17DevTargetVelocityEh>:

float Run::DevTargetVelocity(uint8_t goal_count)
{
 80249cc:	b580      	push	{r7, lr}
 80249ce:	b084      	sub	sp, #16
 80249d0:	af00      	add	r7, sp, #0
 80249d2:	6078      	str	r0, [r7, #4]
 80249d4:	460b      	mov	r3, r1
 80249d6:	70fb      	strb	r3, [r7, #3]
    static uint16_t slow_timer = 0;
    static uint16_t stop_timer = 0;
    float target_velocity;

    switch(goal_count)
 80249d8:	78fb      	ldrb	r3, [r7, #3]
 80249da:	3300      	adds	r3, #0
 80249dc:	2b01      	cmp	r3, #1
 80249de:	d802      	bhi.n	80249e6 <_ZN3Run17DevTargetVelocityEh+0x1a>
    {
        case 0:
        case 1: target_velocity = EXPLORE_VELOCITY; break;
 80249e0:	4b19      	ldr	r3, [pc, #100]	; (8024a48 <_ZN3Run17DevTargetVelocityEh+0x7c>)
 80249e2:	60fb      	str	r3, [r7, #12]
 80249e4:	e027      	b.n	8024a36 <_ZN3Run17DevTargetVelocityEh+0x6a>
        default:

            if(slow_timer < SLOW_DRIVE_TIME)
 80249e6:	4b19      	ldr	r3, [pc, #100]	; (8024a4c <_ZN3Run17DevTargetVelocityEh+0x80>)
 80249e8:	881b      	ldrh	r3, [r3, #0]
 80249ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80249ee:	d208      	bcs.n	8024a02 <_ZN3Run17DevTargetVelocityEh+0x36>
            {
                slow_timer++;
 80249f0:	4b16      	ldr	r3, [pc, #88]	; (8024a4c <_ZN3Run17DevTargetVelocityEh+0x80>)
 80249f2:	881b      	ldrh	r3, [r3, #0]
 80249f4:	3301      	adds	r3, #1
 80249f6:	b29a      	uxth	r2, r3
 80249f8:	4b14      	ldr	r3, [pc, #80]	; (8024a4c <_ZN3Run17DevTargetVelocityEh+0x80>)
 80249fa:	801a      	strh	r2, [r3, #0]
                target_velocity = SLOW_DRIVE_VELOCITY;
 80249fc:	4b14      	ldr	r3, [pc, #80]	; (8024a50 <_ZN3Run17DevTargetVelocityEh+0x84>)
 80249fe:	60fb      	str	r3, [r7, #12]
                    SetRunMode(DEV_GOAL);
                    SetRunModeChangedInternal(true);
                    target_velocity = 0;
                }
            }
            break;
 8024a00:	e018      	b.n	8024a34 <_ZN3Run17DevTargetVelocityEh+0x68>
                if(stop_timer < STOP_TIME)
 8024a02:	4b14      	ldr	r3, [pc, #80]	; (8024a54 <_ZN3Run17DevTargetVelocityEh+0x88>)
 8024a04:	881b      	ldrh	r3, [r3, #0]
 8024a06:	2bc7      	cmp	r3, #199	; 0xc7
 8024a08:	d809      	bhi.n	8024a1e <_ZN3Run17DevTargetVelocityEh+0x52>
                    stop_timer++;
 8024a0a:	4b12      	ldr	r3, [pc, #72]	; (8024a54 <_ZN3Run17DevTargetVelocityEh+0x88>)
 8024a0c:	881b      	ldrh	r3, [r3, #0]
 8024a0e:	3301      	adds	r3, #1
 8024a10:	b29a      	uxth	r2, r3
 8024a12:	4b10      	ldr	r3, [pc, #64]	; (8024a54 <_ZN3Run17DevTargetVelocityEh+0x88>)
 8024a14:	801a      	strh	r2, [r3, #0]
                    target_velocity = 0;
 8024a16:	f04f 0300 	mov.w	r3, #0
 8024a1a:	60fb      	str	r3, [r7, #12]
            break;
 8024a1c:	e00a      	b.n	8024a34 <_ZN3Run17DevTargetVelocityEh+0x68>
                    SetRunMode(DEV_GOAL);
 8024a1e:	21ca      	movs	r1, #202	; 0xca
 8024a20:	6878      	ldr	r0, [r7, #4]
 8024a22:	f7ff fc7b 	bl	802431c <_ZN3Run10SetRunModeEh>
                    SetRunModeChangedInternal(true);
 8024a26:	2101      	movs	r1, #1
 8024a28:	6878      	ldr	r0, [r7, #4]
 8024a2a:	f7ff fc87 	bl	802433c <_ZN3Run25SetRunModeChangedInternalEb>
                    target_velocity = 0;
 8024a2e:	f04f 0300 	mov.w	r3, #0
 8024a32:	60fb      	str	r3, [r7, #12]
            break;
 8024a34:	bf00      	nop
    }

    return target_velocity;
 8024a36:	68fb      	ldr	r3, [r7, #12]
 8024a38:	ee07 3a90 	vmov	s15, r3
}
 8024a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8024a40:	3710      	adds	r7, #16
 8024a42:	46bd      	mov	sp, r7
 8024a44:	bd80      	pop	{r7, pc}
 8024a46:	bf00      	nop
 8024a48:	3f19999a 	.word	0x3f19999a
 8024a4c:	20000482 	.word	0x20000482
 8024a50:	3dcccccd 	.word	0x3dcccccd
 8024a54:	20000484 	.word	0x20000484

08024a58 <_ZN3Run14DevAccelTargetEh>:

float Run::DevAccelTarget(uint8_t goal_count)
{
 8024a58:	b580      	push	{r7, lr}
 8024a5a:	b084      	sub	sp, #16
 8024a5c:	af00      	add	r7, sp, #0
 8024a5e:	6078      	str	r0, [r7, #4]
 8024a60:	460b      	mov	r3, r1
 8024a62:	70fb      	strb	r3, [r7, #3]
    static uint16_t slow_timer = 0;
    static uint16_t stop_timer = 0;
    float target_velocity;

    switch(goal_count)
 8024a64:	78fb      	ldrb	r3, [r7, #3]
 8024a66:	2b00      	cmp	r3, #0
 8024a68:	d002      	beq.n	8024a70 <_ZN3Run14DevAccelTargetEh+0x18>
 8024a6a:	2b01      	cmp	r3, #1
 8024a6c:	d004      	beq.n	8024a78 <_ZN3Run14DevAccelTargetEh+0x20>
 8024a6e:	e00b      	b.n	8024a88 <_ZN3Run14DevAccelTargetEh+0x30>
    {
        case 0: target_velocity = MIN_VELOCITY; break;
 8024a70:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8024a74:	60fb      	str	r3, [r7, #12]
 8024a76:	e02f      	b.n	8024ad8 <_ZN3Run14DevAccelTargetEh+0x80>
        case 1:
            target_velocity = logger_->GetTargetVelocity();
 8024a78:	687b      	ldr	r3, [r7, #4]
 8024a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024a7c:	4618      	mov	r0, r3
 8024a7e:	f7fe f9a5 	bl	8022dcc <_ZN6Logger17GetTargetVelocityEv>
 8024a82:	ed87 0a03 	vstr	s0, [r7, #12]
            break;
 8024a86:	e027      	b.n	8024ad8 <_ZN3Run14DevAccelTargetEh+0x80>
        default:

            if(slow_timer < SLOW_DRIVE_TIME)
 8024a88:	4b17      	ldr	r3, [pc, #92]	; (8024ae8 <_ZN3Run14DevAccelTargetEh+0x90>)
 8024a8a:	881b      	ldrh	r3, [r3, #0]
 8024a8c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8024a90:	d208      	bcs.n	8024aa4 <_ZN3Run14DevAccelTargetEh+0x4c>
            {
                slow_timer++;
 8024a92:	4b15      	ldr	r3, [pc, #84]	; (8024ae8 <_ZN3Run14DevAccelTargetEh+0x90>)
 8024a94:	881b      	ldrh	r3, [r3, #0]
 8024a96:	3301      	adds	r3, #1
 8024a98:	b29a      	uxth	r2, r3
 8024a9a:	4b13      	ldr	r3, [pc, #76]	; (8024ae8 <_ZN3Run14DevAccelTargetEh+0x90>)
 8024a9c:	801a      	strh	r2, [r3, #0]
                target_velocity = SLOW_DRIVE_VELOCITY;
 8024a9e:	4b13      	ldr	r3, [pc, #76]	; (8024aec <_ZN3Run14DevAccelTargetEh+0x94>)
 8024aa0:	60fb      	str	r3, [r7, #12]
                    SetRunMode(DEV_GOAL);
                    SetRunModeChangedInternal(true);
                    target_velocity = 0;
                }
            }
            break;
 8024aa2:	e018      	b.n	8024ad6 <_ZN3Run14DevAccelTargetEh+0x7e>
                if(stop_timer < STOP_TIME)
 8024aa4:	4b12      	ldr	r3, [pc, #72]	; (8024af0 <_ZN3Run14DevAccelTargetEh+0x98>)
 8024aa6:	881b      	ldrh	r3, [r3, #0]
 8024aa8:	2bc7      	cmp	r3, #199	; 0xc7
 8024aaa:	d809      	bhi.n	8024ac0 <_ZN3Run14DevAccelTargetEh+0x68>
                    stop_timer++;
 8024aac:	4b10      	ldr	r3, [pc, #64]	; (8024af0 <_ZN3Run14DevAccelTargetEh+0x98>)
 8024aae:	881b      	ldrh	r3, [r3, #0]
 8024ab0:	3301      	adds	r3, #1
 8024ab2:	b29a      	uxth	r2, r3
 8024ab4:	4b0e      	ldr	r3, [pc, #56]	; (8024af0 <_ZN3Run14DevAccelTargetEh+0x98>)
 8024ab6:	801a      	strh	r2, [r3, #0]
                    target_velocity = 0;
 8024ab8:	f04f 0300 	mov.w	r3, #0
 8024abc:	60fb      	str	r3, [r7, #12]
            break;
 8024abe:	e00a      	b.n	8024ad6 <_ZN3Run14DevAccelTargetEh+0x7e>
                    SetRunMode(DEV_GOAL);
 8024ac0:	21ca      	movs	r1, #202	; 0xca
 8024ac2:	6878      	ldr	r0, [r7, #4]
 8024ac4:	f7ff fc2a 	bl	802431c <_ZN3Run10SetRunModeEh>
                    SetRunModeChangedInternal(true);
 8024ac8:	2101      	movs	r1, #1
 8024aca:	6878      	ldr	r0, [r7, #4]
 8024acc:	f7ff fc36 	bl	802433c <_ZN3Run25SetRunModeChangedInternalEb>
                    target_velocity = 0;
 8024ad0:	f04f 0300 	mov.w	r3, #0
 8024ad4:	60fb      	str	r3, [r7, #12]
            break;
 8024ad6:	bf00      	nop
    }

    return target_velocity;
 8024ad8:	68fb      	ldr	r3, [r7, #12]
 8024ada:	ee07 3a90 	vmov	s15, r3
}
 8024ade:	eeb0 0a67 	vmov.f32	s0, s15
 8024ae2:	3710      	adds	r7, #16
 8024ae4:	46bd      	mov	sp, r7
 8024ae6:	bd80      	pop	{r7, pc}
 8024ae8:	20000486 	.word	0x20000486
 8024aec:	3dcccccd 	.word	0x3dcccccd
 8024af0:	20000488 	.word	0x20000488

08024af4 <_ZN3Run11ModeDevGoalEv>:

void Run::ModeDevGoal()
{
 8024af4:	b580      	push	{r7, lr}
 8024af6:	b082      	sub	sp, #8
 8024af8:	af00      	add	r7, sp, #0
 8024afa:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 8024afc:	687b      	ldr	r3, [r7, #4]
 8024afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024b00:	eddf 0a08 	vldr	s1, [pc, #32]	; 8024b24 <_ZN3Run11ModeDevGoalEv+0x30>
 8024b04:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8024b24 <_ZN3Run11ModeDevGoalEv+0x30>
 8024b08:	4618      	mov	r0, r3
 8024b0a:	f7ff f805 	bl	8023b18 <_ZN5Motor5DriveEff>
    led_->ColorOrder('M');
 8024b0e:	687b      	ldr	r3, [r7, #4]
 8024b10:	699b      	ldr	r3, [r3, #24]
 8024b12:	214d      	movs	r1, #77	; 0x4d
 8024b14:	4618      	mov	r0, r3
 8024b16:	f7fc fec7 	bl	80218a8 <_ZN3Led10ColorOrderEc>
}
 8024b1a:	bf00      	nop
 8024b1c:	3708      	adds	r7, #8
 8024b1e:	46bd      	mov	sp, r7
 8024b20:	bd80      	pop	{r7, pc}
 8024b22:	bf00      	nop
 8024b24:	00000000 	.word	0x00000000

08024b28 <_ZN3Run12ModeFirstRunEv>:

void Run::ModeFirstRun()
{
 8024b28:	b580      	push	{r7, lr}
 8024b2a:	b086      	sub	sp, #24
 8024b2c:	af00      	add	r7, sp, #0
 8024b2e:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8024b30:	687b      	ldr	r3, [r7, #4]
 8024b32:	69db      	ldr	r3, [r3, #28]
 8024b34:	4618      	mov	r0, r3
 8024b36:	f7fd f9e1 	bl	8021efc <_ZN10LineSensor6UpdateEv>
    encoder_->Update();
 8024b3a:	687b      	ldr	r3, [r7, #4]
 8024b3c:	689b      	ldr	r3, [r3, #8]
 8024b3e:	4618      	mov	r0, r3
 8024b40:	f7fc f986 	bl	8020e50 <_ZN7Encoder6UpdateEv>
    imu_->Update();
 8024b44:	687b      	ldr	r3, [r7, #4]
 8024b46:	695b      	ldr	r3, [r3, #20]
 8024b48:	4618      	mov	r0, r3
 8024b4a:	f7fc fde9 	bl	8021720 <_ZN3Imu6UpdateEv>
    side_sensor_->Update();
 8024b4e:	687b      	ldr	r3, [r7, #4]
 8024b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024b52:	4618      	mov	r0, r3
 8024b54:	f000 fa1e 	bl	8024f94 <_ZN10SideSensor6UpdateEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 8024b58:	6878      	ldr	r0, [r7, #4]
 8024b5a:	f7ff fce7 	bl	802452c <_ZN3Run13EmergencyStopEv>
 8024b5e:	4603      	mov	r3, r0
 8024b60:	2b00      	cmp	r3, #0
 8024b62:	d129      	bne.n	8024bb8 <_ZN3Run12ModeFirstRunEv+0x90>
    /* Logging */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 8024b64:	687b      	ldr	r3, [r7, #4]
 8024b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024b68:	4618      	mov	r0, r3
 8024b6a:	f000 fbe2 	bl	8025332 <_ZN10SideSensor18GetGoalMarkerCountEv>
 8024b6e:	4603      	mov	r3, r0
 8024b70:	75fb      	strb	r3, [r7, #23]
    //mode_complete_ = false;
    //uint8_t period_success = logger_->StorePeriodicLog();
    //uint8_t accel_success = logger_->StoreAccelPositionLog();
    //if(period_success != 0 || !accel_success != 0) store_log_failed_ = true;
    /* Motor control */
    float target_velocity = FirstTargetVelocity(goal_count);
 8024b72:	7dfb      	ldrb	r3, [r7, #23]
 8024b74:	4619      	mov	r1, r3
 8024b76:	6878      	ldr	r0, [r7, #4]
 8024b78:	f000 f8fe 	bl	8024d78 <_ZN3Run19FirstTargetVelocityEh>
 8024b7c:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 8024b80:	687b      	ldr	r3, [r7, #4]
 8024b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024b84:	ed97 0a04 	vldr	s0, [r7, #16]
 8024b88:	4618      	mov	r0, r3
 8024b8a:	f001 f964 	bl	8025e56 <_ZN15VelocityControl16DeterminePidGainEf>
 8024b8e:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 8024b92:	687b      	ldr	r3, [r7, #4]
 8024b94:	6a1b      	ldr	r3, [r3, #32]
 8024b96:	ed97 0a04 	vldr	s0, [r7, #16]
 8024b9a:	4618      	mov	r0, r3
 8024b9c:	f7fd fb88 	bl	80222b0 <_ZN9LineTrace16DeterminePidGainEf>
 8024ba0:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 8024ba4:	687b      	ldr	r3, [r7, #4]
 8024ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024ba8:	edd7 0a02 	vldr	s1, [r7, #8]
 8024bac:	ed97 0a03 	vldr	s0, [r7, #12]
 8024bb0:	4618      	mov	r0, r3
 8024bb2:	f7fe ffb1 	bl	8023b18 <_ZN5Motor5DriveEff>
 8024bb6:	e000      	b.n	8024bba <_ZN3Run12ModeFirstRunEv+0x92>
    if(EmergencyStop()) return;
 8024bb8:	bf00      	nop
}
 8024bba:	3718      	adds	r7, #24
 8024bbc:	46bd      	mov	sp, r7
 8024bbe:	bd80      	pop	{r7, pc}

08024bc0 <_ZN3Run13ModeFirstGoalEv>:

void Run::ModeFirstGoal()
{
 8024bc0:	b580      	push	{r7, lr}
 8024bc2:	b082      	sub	sp, #8
 8024bc4:	af00      	add	r7, sp, #0
 8024bc6:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 8024bc8:	687b      	ldr	r3, [r7, #4]
 8024bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024bcc:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8024c04 <_ZN3Run13ModeFirstGoalEv+0x44>
 8024bd0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8024c04 <_ZN3Run13ModeFirstGoalEv+0x44>
 8024bd4:	4618      	mov	r0, r3
 8024bd6:	f7fe ff9f 	bl	8023b18 <_ZN5Motor5DriveEff>
    if(store_log_failed_) led_->ColorOrder('R');
 8024bda:	687b      	ldr	r3, [r7, #4]
 8024bdc:	799b      	ldrb	r3, [r3, #6]
 8024bde:	2b00      	cmp	r3, #0
 8024be0:	d006      	beq.n	8024bf0 <_ZN3Run13ModeFirstGoalEv+0x30>
 8024be2:	687b      	ldr	r3, [r7, #4]
 8024be4:	699b      	ldr	r3, [r3, #24]
 8024be6:	2152      	movs	r1, #82	; 0x52
 8024be8:	4618      	mov	r0, r3
 8024bea:	f7fc fe5d 	bl	80218a8 <_ZN3Led10ColorOrderEc>
    else led_->ColorOrder('B');
}
 8024bee:	e005      	b.n	8024bfc <_ZN3Run13ModeFirstGoalEv+0x3c>
    else led_->ColorOrder('B');
 8024bf0:	687b      	ldr	r3, [r7, #4]
 8024bf2:	699b      	ldr	r3, [r3, #24]
 8024bf4:	2142      	movs	r1, #66	; 0x42
 8024bf6:	4618      	mov	r0, r3
 8024bf8:	f7fc fe56 	bl	80218a8 <_ZN3Led10ColorOrderEc>
}
 8024bfc:	bf00      	nop
 8024bfe:	3708      	adds	r7, #8
 8024c00:	46bd      	mov	sp, r7
 8024c02:	bd80      	pop	{r7, pc}
 8024c04:	00000000 	.word	0x00000000

08024c08 <_ZN3Run13ModeSecondRunEv>:

void Run::ModeSecondRun()
{
 8024c08:	b580      	push	{r7, lr}
 8024c0a:	b086      	sub	sp, #24
 8024c0c:	af00      	add	r7, sp, #0
 8024c0e:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8024c10:	687b      	ldr	r3, [r7, #4]
 8024c12:	69db      	ldr	r3, [r3, #28]
 8024c14:	4618      	mov	r0, r3
 8024c16:	f7fd f971 	bl	8021efc <_ZN10LineSensor6UpdateEv>
    encoder_->Update();
 8024c1a:	687b      	ldr	r3, [r7, #4]
 8024c1c:	689b      	ldr	r3, [r3, #8]
 8024c1e:	4618      	mov	r0, r3
 8024c20:	f7fc f916 	bl	8020e50 <_ZN7Encoder6UpdateEv>
    imu_->Update();
 8024c24:	687b      	ldr	r3, [r7, #4]
 8024c26:	695b      	ldr	r3, [r3, #20]
 8024c28:	4618      	mov	r0, r3
 8024c2a:	f7fc fd79 	bl	8021720 <_ZN3Imu6UpdateEv>
    side_sensor_->Update();
 8024c2e:	687b      	ldr	r3, [r7, #4]
 8024c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024c32:	4618      	mov	r0, r3
 8024c34:	f000 f9ae 	bl	8024f94 <_ZN10SideSensor6UpdateEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 8024c38:	6878      	ldr	r0, [r7, #4]
 8024c3a:	f7ff fc77 	bl	802452c <_ZN3Run13EmergencyStopEv>
 8024c3e:	4603      	mov	r3, r0
 8024c40:	2b00      	cmp	r3, #0
 8024c42:	d131      	bne.n	8024ca8 <_ZN3Run13ModeSecondRunEv+0xa0>
    /* Loading */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 8024c44:	687b      	ldr	r3, [r7, #4]
 8024c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024c48:	4618      	mov	r0, r3
 8024c4a:	f000 fb72 	bl	8025332 <_ZN10SideSensor18GetGoalMarkerCountEv>
 8024c4e:	4603      	mov	r3, r0
 8024c50:	75fb      	strb	r3, [r7, #23]
    if(goal_count == 1) logger_->Loading();
 8024c52:	7dfb      	ldrb	r3, [r7, #23]
 8024c54:	2b01      	cmp	r3, #1
 8024c56:	d104      	bne.n	8024c62 <_ZN3Run13ModeSecondRunEv+0x5a>
 8024c58:	687b      	ldr	r3, [r7, #4]
 8024c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024c5c:	4618      	mov	r0, r3
 8024c5e:	f7fe f873 	bl	8022d48 <_ZN6Logger7LoadingEv>
    /* Motor control */
    float target_velocity = SecondTargetVelocity(goal_count);
 8024c62:	7dfb      	ldrb	r3, [r7, #23]
 8024c64:	4619      	mov	r1, r3
 8024c66:	6878      	ldr	r0, [r7, #4]
 8024c68:	f000 f8ac 	bl	8024dc4 <_ZN3Run20SecondTargetVelocityEh>
 8024c6c:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 8024c70:	687b      	ldr	r3, [r7, #4]
 8024c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024c74:	ed97 0a04 	vldr	s0, [r7, #16]
 8024c78:	4618      	mov	r0, r3
 8024c7a:	f001 f8ec 	bl	8025e56 <_ZN15VelocityControl16DeterminePidGainEf>
 8024c7e:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 8024c82:	687b      	ldr	r3, [r7, #4]
 8024c84:	6a1b      	ldr	r3, [r3, #32]
 8024c86:	ed97 0a04 	vldr	s0, [r7, #16]
 8024c8a:	4618      	mov	r0, r3
 8024c8c:	f7fd fb10 	bl	80222b0 <_ZN9LineTrace16DeterminePidGainEf>
 8024c90:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 8024c94:	687b      	ldr	r3, [r7, #4]
 8024c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024c98:	edd7 0a02 	vldr	s1, [r7, #8]
 8024c9c:	ed97 0a03 	vldr	s0, [r7, #12]
 8024ca0:	4618      	mov	r0, r3
 8024ca2:	f7fe ff39 	bl	8023b18 <_ZN5Motor5DriveEff>
 8024ca6:	e000      	b.n	8024caa <_ZN3Run13ModeSecondRunEv+0xa2>
    if(EmergencyStop()) return;
 8024ca8:	bf00      	nop
}
 8024caa:	3718      	adds	r7, #24
 8024cac:	46bd      	mov	sp, r7
 8024cae:	bd80      	pop	{r7, pc}

08024cb0 <_ZN3Run14ModeSecondGoalEv>:

void Run::ModeSecondGoal()
{
 8024cb0:	b580      	push	{r7, lr}
 8024cb2:	b082      	sub	sp, #8
 8024cb4:	af00      	add	r7, sp, #0
 8024cb6:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 8024cb8:	687b      	ldr	r3, [r7, #4]
 8024cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024cbc:	eddf 0a08 	vldr	s1, [pc, #32]	; 8024ce0 <_ZN3Run14ModeSecondGoalEv+0x30>
 8024cc0:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8024ce0 <_ZN3Run14ModeSecondGoalEv+0x30>
 8024cc4:	4618      	mov	r0, r3
 8024cc6:	f7fe ff27 	bl	8023b18 <_ZN5Motor5DriveEff>
    led_->ColorOrder('M');
 8024cca:	687b      	ldr	r3, [r7, #4]
 8024ccc:	699b      	ldr	r3, [r3, #24]
 8024cce:	214d      	movs	r1, #77	; 0x4d
 8024cd0:	4618      	mov	r0, r3
 8024cd2:	f7fc fde9 	bl	80218a8 <_ZN3Led10ColorOrderEc>
}
 8024cd6:	bf00      	nop
 8024cd8:	3708      	adds	r7, #8
 8024cda:	46bd      	mov	sp, r7
 8024cdc:	bd80      	pop	{r7, pc}
 8024cde:	bf00      	nop
 8024ce0:	00000000 	.word	0x00000000

08024ce4 <_ZN3Run24ModeVelocityControlDebugEv>:
    motor_->Drive(trans_ratio, rotat_ratio);
}

#ifdef DEBUG_MODE
void Run::ModeVelocityControlDebug()
{
 8024ce4:	b580      	push	{r7, lr}
 8024ce6:	b084      	sub	sp, #16
 8024ce8:	af00      	add	r7, sp, #0
 8024cea:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8024cec:	687b      	ldr	r3, [r7, #4]
 8024cee:	69db      	ldr	r3, [r3, #28]
 8024cf0:	4618      	mov	r0, r3
 8024cf2:	f7fd f903 	bl	8021efc <_ZN10LineSensor6UpdateEv>
    encoder_->Update();
 8024cf6:	687b      	ldr	r3, [r7, #4]
 8024cf8:	689b      	ldr	r3, [r3, #8]
 8024cfa:	4618      	mov	r0, r3
 8024cfc:	f7fc f8a8 	bl	8020e50 <_ZN7Encoder6UpdateEv>
    /* Motor control */
    float target_velocity = VELOCITY_CONTROL_TARGET;
 8024d00:	4b0b      	ldr	r3, [pc, #44]	; (8024d30 <_ZN3Run24ModeVelocityControlDebugEv+0x4c>)
 8024d02:	60fb      	str	r3, [r7, #12]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 8024d04:	687b      	ldr	r3, [r7, #4]
 8024d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024d08:	ed97 0a03 	vldr	s0, [r7, #12]
 8024d0c:	4618      	mov	r0, r3
 8024d0e:	f001 f8a2 	bl	8025e56 <_ZN15VelocityControl16DeterminePidGainEf>
 8024d12:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, 0);
 8024d16:	687b      	ldr	r3, [r7, #4]
 8024d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024d1a:	eddf 0a06 	vldr	s1, [pc, #24]	; 8024d34 <_ZN3Run24ModeVelocityControlDebugEv+0x50>
 8024d1e:	ed97 0a02 	vldr	s0, [r7, #8]
 8024d22:	4618      	mov	r0, r3
 8024d24:	f7fe fef8 	bl	8023b18 <_ZN5Motor5DriveEff>
}
 8024d28:	bf00      	nop
 8024d2a:	3710      	adds	r7, #16
 8024d2c:	46bd      	mov	sp, r7
 8024d2e:	bd80      	pop	{r7, pc}
 8024d30:	3f99999a 	.word	0x3f99999a
 8024d34:	00000000 	.word	0x00000000

08024d38 <_ZN3Run18ModeLineTraceDebugEv>:

void Run::ModeLineTraceDebug()
{
 8024d38:	b580      	push	{r7, lr}
 8024d3a:	b084      	sub	sp, #16
 8024d3c:	af00      	add	r7, sp, #0
 8024d3e:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8024d40:	687b      	ldr	r3, [r7, #4]
 8024d42:	69db      	ldr	r3, [r3, #28]
 8024d44:	4618      	mov	r0, r3
 8024d46:	f7fd f8d9 	bl	8021efc <_ZN10LineSensor6UpdateEv>
    /* Motor control */
    float rotat_ratio = line_trace_->LineTraceOnly();
 8024d4a:	687b      	ldr	r3, [r7, #4]
 8024d4c:	6a1b      	ldr	r3, [r3, #32]
 8024d4e:	4618      	mov	r0, r3
 8024d50:	f7fd fa90 	bl	8022274 <_ZN9LineTrace13LineTraceOnlyEv>
 8024d54:	ed87 0a03 	vstr	s0, [r7, #12]
    motor_->Drive(0, rotat_ratio);
 8024d58:	687b      	ldr	r3, [r7, #4]
 8024d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024d5c:	edd7 0a03 	vldr	s1, [r7, #12]
 8024d60:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8024d74 <_ZN3Run18ModeLineTraceDebugEv+0x3c>
 8024d64:	4618      	mov	r0, r3
 8024d66:	f7fe fed7 	bl	8023b18 <_ZN5Motor5DriveEff>
}
 8024d6a:	bf00      	nop
 8024d6c:	3710      	adds	r7, #16
 8024d6e:	46bd      	mov	sp, r7
 8024d70:	bd80      	pop	{r7, pc}
 8024d72:	bf00      	nop
 8024d74:	00000000 	.word	0x00000000

08024d78 <_ZN3Run19FirstTargetVelocityEh>:
    InitialTest();
}
#endif // DEBUG_MODE

float Run::FirstTargetVelocity(uint8_t goal_count)
{
 8024d78:	b480      	push	{r7}
 8024d7a:	b083      	sub	sp, #12
 8024d7c:	af00      	add	r7, sp, #0
 8024d7e:	6078      	str	r0, [r7, #4]
 8024d80:	460b      	mov	r3, r1
 8024d82:	70fb      	strb	r3, [r7, #3]
    static uint8_t slow_timer = 0;
    static uint8_t stop_timer = 0;

    if(goal_count == 1)
 8024d84:	78fb      	ldrb	r3, [r7, #3]
 8024d86:	2b01      	cmp	r3, #1
 8024d88:	d101      	bne.n	8024d8e <_ZN3Run19FirstTargetVelocityEh+0x16>
    {
        return EXPLORE_VELOCITY;
 8024d8a:	4b0b      	ldr	r3, [pc, #44]	; (8024db8 <_ZN3Run19FirstTargetVelocityEh+0x40>)
 8024d8c:	e00b      	b.n	8024da6 <_ZN3Run19FirstTargetVelocityEh+0x2e>
    }
    else if(goal_count >= 2)
 8024d8e:	78fb      	ldrb	r3, [r7, #3]
 8024d90:	2b01      	cmp	r3, #1
 8024d92:	d907      	bls.n	8024da4 <_ZN3Run19FirstTargetVelocityEh+0x2c>
    {
        if(slow_timer < SLOW_DRIVE_TIME)
        {
            slow_timer++;
 8024d94:	4b09      	ldr	r3, [pc, #36]	; (8024dbc <_ZN3Run19FirstTargetVelocityEh+0x44>)
 8024d96:	781b      	ldrb	r3, [r3, #0]
 8024d98:	3301      	adds	r3, #1
 8024d9a:	b2da      	uxtb	r2, r3
 8024d9c:	4b07      	ldr	r3, [pc, #28]	; (8024dbc <_ZN3Run19FirstTargetVelocityEh+0x44>)
 8024d9e:	701a      	strb	r2, [r3, #0]
            return SLOW_DRIVE_VELOCITY;
 8024da0:	4b07      	ldr	r3, [pc, #28]	; (8024dc0 <_ZN3Run19FirstTargetVelocityEh+0x48>)
 8024da2:	e000      	b.n	8024da6 <_ZN3Run19FirstTargetVelocityEh+0x2e>
        {
            SetRunMode(FIRST_GOAL);
            return 0;
        }
    }
    else return EXPLORE_VELOCITY;
 8024da4:	4b04      	ldr	r3, [pc, #16]	; (8024db8 <_ZN3Run19FirstTargetVelocityEh+0x40>)
 8024da6:	ee07 3a90 	vmov	s15, r3
}
 8024daa:	eeb0 0a67 	vmov.f32	s0, s15
 8024dae:	370c      	adds	r7, #12
 8024db0:	46bd      	mov	sp, r7
 8024db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024db6:	4770      	bx	lr
 8024db8:	3f19999a 	.word	0x3f19999a
 8024dbc:	2000048a 	.word	0x2000048a
 8024dc0:	3dcccccd 	.word	0x3dcccccd

08024dc4 <_ZN3Run20SecondTargetVelocityEh>:

float Run::SecondTargetVelocity(uint8_t goal_count)
{
 8024dc4:	b580      	push	{r7, lr}
 8024dc6:	b082      	sub	sp, #8
 8024dc8:	af00      	add	r7, sp, #0
 8024dca:	6078      	str	r0, [r7, #4]
 8024dcc:	460b      	mov	r3, r1
 8024dce:	70fb      	strb	r3, [r7, #3]
    static uint8_t slow_timer = 0;
    static uint8_t stop_timer = 0;

    if(goal_count == 1)
 8024dd0:	78fb      	ldrb	r3, [r7, #3]
 8024dd2:	2b01      	cmp	r3, #1
 8024dd4:	d107      	bne.n	8024de6 <_ZN3Run20SecondTargetVelocityEh+0x22>
    {
        return logger_->GetTargetVelocity();
 8024dd6:	687b      	ldr	r3, [r7, #4]
 8024dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024dda:	4618      	mov	r0, r3
 8024ddc:	f7fd fff6 	bl	8022dcc <_ZN6Logger17GetTargetVelocityEv>
 8024de0:	eef0 7a40 	vmov.f32	s15, s0
 8024de4:	e00d      	b.n	8024e02 <_ZN3Run20SecondTargetVelocityEh+0x3e>
    }
    else if(goal_count >= 2)
 8024de6:	78fb      	ldrb	r3, [r7, #3]
 8024de8:	2b01      	cmp	r3, #1
 8024dea:	d908      	bls.n	8024dfe <_ZN3Run20SecondTargetVelocityEh+0x3a>
    {
        if(slow_timer < SLOW_DRIVE_TIME)
        {
            slow_timer++;
 8024dec:	4b07      	ldr	r3, [pc, #28]	; (8024e0c <_ZN3Run20SecondTargetVelocityEh+0x48>)
 8024dee:	781b      	ldrb	r3, [r3, #0]
 8024df0:	3301      	adds	r3, #1
 8024df2:	b2da      	uxtb	r2, r3
 8024df4:	4b05      	ldr	r3, [pc, #20]	; (8024e0c <_ZN3Run20SecondTargetVelocityEh+0x48>)
 8024df6:	701a      	strb	r2, [r3, #0]
            return SLOW_DRIVE_VELOCITY;
 8024df8:	eddf 7a05 	vldr	s15, [pc, #20]	; 8024e10 <_ZN3Run20SecondTargetVelocityEh+0x4c>
 8024dfc:	e001      	b.n	8024e02 <_ZN3Run20SecondTargetVelocityEh+0x3e>
        {
            SetRunMode(SECOND_GOAL);
            return 0;
        }
    }
    else return MIN_VELOCITY;
 8024dfe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
}
 8024e02:	eeb0 0a67 	vmov.f32	s0, s15
 8024e06:	3708      	adds	r7, #8
 8024e08:	46bd      	mov	sp, r7
 8024e0a:	bd80      	pop	{r7, pc}
 8024e0c:	2000048b 	.word	0x2000048b
 8024e10:	3dcccccd 	.word	0x3dcccccd

08024e14 <_ZN10SideSensorC1Ev>:
#include "side_sensor.hpp"

SideSensor::SideSensor() : read_state_flags_(0)
 8024e14:	b480      	push	{r7}
 8024e16:	b083      	sub	sp, #12
 8024e18:	af00      	add	r7, sp, #0
 8024e1a:	6078      	str	r0, [r7, #4]
                         , write_state_flags_(0)
                         , exception_flags_(0)
                         , master_count_(0)
                         , goal_marker_count_(0)
                         , corner_marker_count_(0)
                         , cross_line_count_(0) {}
 8024e1c:	687b      	ldr	r3, [r7, #4]
 8024e1e:	2200      	movs	r2, #0
 8024e20:	701a      	strb	r2, [r3, #0]
 8024e22:	687b      	ldr	r3, [r7, #4]
 8024e24:	2200      	movs	r2, #0
 8024e26:	705a      	strb	r2, [r3, #1]
 8024e28:	687b      	ldr	r3, [r7, #4]
 8024e2a:	2200      	movs	r2, #0
 8024e2c:	709a      	strb	r2, [r3, #2]
 8024e2e:	687b      	ldr	r3, [r7, #4]
 8024e30:	2200      	movs	r2, #0
 8024e32:	70da      	strb	r2, [r3, #3]
 8024e34:	687b      	ldr	r3, [r7, #4]
 8024e36:	2200      	movs	r2, #0
 8024e38:	711a      	strb	r2, [r3, #4]
 8024e3a:	687b      	ldr	r3, [r7, #4]
 8024e3c:	2200      	movs	r2, #0
 8024e3e:	715a      	strb	r2, [r3, #5]
 8024e40:	687b      	ldr	r3, [r7, #4]
 8024e42:	2200      	movs	r2, #0
 8024e44:	719a      	strb	r2, [r3, #6]
 8024e46:	687b      	ldr	r3, [r7, #4]
 8024e48:	4618      	mov	r0, r3
 8024e4a:	370c      	adds	r7, #12
 8024e4c:	46bd      	mov	sp, r7
 8024e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e52:	4770      	bx	lr

08024e54 <_ZN10SideSensor11UpdateStateEv>:

void SideSensor::UpdateState()
{
 8024e54:	b580      	push	{r7, lr}
 8024e56:	b084      	sub	sp, #16
 8024e58:	af00      	add	r7, sp, #0
 8024e5a:	6078      	str	r0, [r7, #4]
    uint8_t io_state = 0xFF; // Lower bits represent the positions of sensors.
 8024e5c:	23ff      	movs	r3, #255	; 0xff
 8024e5e:	73fb      	strb	r3, [r7, #15]

    if(IO_OUTSIDE_L == 0) io_state &= 0xF7; // 0111
 8024e60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8024e64:	4849      	ldr	r0, [pc, #292]	; (8024f8c <_ZN10SideSensor11UpdateStateEv+0x138>)
 8024e66:	f002 ffb1 	bl	8027dcc <HAL_GPIO_ReadPin>
 8024e6a:	4603      	mov	r3, r0
 8024e6c:	2b00      	cmp	r3, #0
 8024e6e:	bf0c      	ite	eq
 8024e70:	2301      	moveq	r3, #1
 8024e72:	2300      	movne	r3, #0
 8024e74:	b2db      	uxtb	r3, r3
 8024e76:	2b00      	cmp	r3, #0
 8024e78:	d003      	beq.n	8024e82 <_ZN10SideSensor11UpdateStateEv+0x2e>
 8024e7a:	7bfb      	ldrb	r3, [r7, #15]
 8024e7c:	f023 0308 	bic.w	r3, r3, #8
 8024e80:	73fb      	strb	r3, [r7, #15]
    if(IO_INSIDE_L == 0)  io_state &= 0xFB; // 1011
 8024e82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8024e86:	4841      	ldr	r0, [pc, #260]	; (8024f8c <_ZN10SideSensor11UpdateStateEv+0x138>)
 8024e88:	f002 ffa0 	bl	8027dcc <HAL_GPIO_ReadPin>
 8024e8c:	4603      	mov	r3, r0
 8024e8e:	2b00      	cmp	r3, #0
 8024e90:	bf0c      	ite	eq
 8024e92:	2301      	moveq	r3, #1
 8024e94:	2300      	movne	r3, #0
 8024e96:	b2db      	uxtb	r3, r3
 8024e98:	2b00      	cmp	r3, #0
 8024e9a:	d003      	beq.n	8024ea4 <_ZN10SideSensor11UpdateStateEv+0x50>
 8024e9c:	7bfb      	ldrb	r3, [r7, #15]
 8024e9e:	f023 0304 	bic.w	r3, r3, #4
 8024ea2:	73fb      	strb	r3, [r7, #15]
    if(IO_INSIDE_R == 0)  io_state &= 0xFD; // 1101
 8024ea4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8024ea8:	4838      	ldr	r0, [pc, #224]	; (8024f8c <_ZN10SideSensor11UpdateStateEv+0x138>)
 8024eaa:	f002 ff8f 	bl	8027dcc <HAL_GPIO_ReadPin>
 8024eae:	4603      	mov	r3, r0
 8024eb0:	2b00      	cmp	r3, #0
 8024eb2:	bf0c      	ite	eq
 8024eb4:	2301      	moveq	r3, #1
 8024eb6:	2300      	movne	r3, #0
 8024eb8:	b2db      	uxtb	r3, r3
 8024eba:	2b00      	cmp	r3, #0
 8024ebc:	d003      	beq.n	8024ec6 <_ZN10SideSensor11UpdateStateEv+0x72>
 8024ebe:	7bfb      	ldrb	r3, [r7, #15]
 8024ec0:	f023 0302 	bic.w	r3, r3, #2
 8024ec4:	73fb      	strb	r3, [r7, #15]
    if(IO_OUTSIDE_R == 0) io_state &= 0xFE; // 1110
 8024ec6:	2104      	movs	r1, #4
 8024ec8:	4831      	ldr	r0, [pc, #196]	; (8024f90 <_ZN10SideSensor11UpdateStateEv+0x13c>)
 8024eca:	f002 ff7f 	bl	8027dcc <HAL_GPIO_ReadPin>
 8024ece:	4603      	mov	r3, r0
 8024ed0:	2b00      	cmp	r3, #0
 8024ed2:	bf0c      	ite	eq
 8024ed4:	2301      	moveq	r3, #1
 8024ed6:	2300      	movne	r3, #0
 8024ed8:	b2db      	uxtb	r3, r3
 8024eda:	2b00      	cmp	r3, #0
 8024edc:	d003      	beq.n	8024ee6 <_ZN10SideSensor11UpdateStateEv+0x92>
 8024ede:	7bfb      	ldrb	r3, [r7, #15]
 8024ee0:	f023 0301 	bic.w	r3, r3, #1
 8024ee4:	73fb      	strb	r3, [r7, #15]

    read_state_flags_ <<= 4;
 8024ee6:	687b      	ldr	r3, [r7, #4]
 8024ee8:	781b      	ldrb	r3, [r3, #0]
 8024eea:	011b      	lsls	r3, r3, #4
 8024eec:	b2da      	uxtb	r2, r3
 8024eee:	687b      	ldr	r3, [r7, #4]
 8024ef0:	701a      	strb	r2, [r3, #0]

    switch(io_state)
 8024ef2:	7bfb      	ldrb	r3, [r7, #15]
 8024ef4:	3bf0      	subs	r3, #240	; 0xf0
 8024ef6:	2b0f      	cmp	r3, #15
 8024ef8:	d842      	bhi.n	8024f80 <_ZN10SideSensor11UpdateStateEv+0x12c>
 8024efa:	a201      	add	r2, pc, #4	; (adr r2, 8024f00 <_ZN10SideSensor11UpdateStateEv+0xac>)
 8024efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024f00:	08024f71 	.word	0x08024f71
 8024f04:	08024f71 	.word	0x08024f71
 8024f08:	08024f71 	.word	0x08024f71
 8024f0c:	08024f61 	.word	0x08024f61
 8024f10:	08024f71 	.word	0x08024f71
 8024f14:	08024f81 	.word	0x08024f81
 8024f18:	08024f71 	.word	0x08024f71
 8024f1c:	08024f61 	.word	0x08024f61
 8024f20:	08024f71 	.word	0x08024f71
 8024f24:	08024f71 	.word	0x08024f71
 8024f28:	08024f81 	.word	0x08024f81
 8024f2c:	08024f61 	.word	0x08024f61
 8024f30:	08024f51 	.word	0x08024f51
 8024f34:	08024f81 	.word	0x08024f81
 8024f38:	08024f81 	.word	0x08024f81
 8024f3c:	08024f41 	.word	0x08024f41
    {
        case 0xFF: // 1111
            read_state_flags_ |= 0x08; break;
 8024f40:	687b      	ldr	r3, [r7, #4]
 8024f42:	781b      	ldrb	r3, [r3, #0]
 8024f44:	f043 0308 	orr.w	r3, r3, #8
 8024f48:	b2da      	uxtb	r2, r3
 8024f4a:	687b      	ldr	r3, [r7, #4]
 8024f4c:	701a      	strb	r2, [r3, #0]
 8024f4e:	e018      	b.n	8024f82 <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xFC: // 1100  If through goal, increase pattern.
            read_state_flags_ |= 0x04; break;
 8024f50:	687b      	ldr	r3, [r7, #4]
 8024f52:	781b      	ldrb	r3, [r3, #0]
 8024f54:	f043 0304 	orr.w	r3, r3, #4
 8024f58:	b2da      	uxtb	r2, r3
 8024f5a:	687b      	ldr	r3, [r7, #4]
 8024f5c:	701a      	strb	r2, [r3, #0]
 8024f5e:	e010      	b.n	8024f82 <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xFB: // 1011
        case 0xF7: // 0111
        case 0xF3: // 0011
            read_state_flags_ |= 0x02; break;
 8024f60:	687b      	ldr	r3, [r7, #4]
 8024f62:	781b      	ldrb	r3, [r3, #0]
 8024f64:	f043 0302 	orr.w	r3, r3, #2
 8024f68:	b2da      	uxtb	r2, r3
 8024f6a:	687b      	ldr	r3, [r7, #4]
 8024f6c:	701a      	strb	r2, [r3, #0]
 8024f6e:	e008      	b.n	8024f82 <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xF4: // 0100
        case 0xF0: // 0000
        case 0xF1: // 0001
        case 0xF8: // 1000
        case 0xF9: // 1001
            read_state_flags_ |= 0x01; break;
 8024f70:	687b      	ldr	r3, [r7, #4]
 8024f72:	781b      	ldrb	r3, [r3, #0]
 8024f74:	f043 0301 	orr.w	r3, r3, #1
 8024f78:	b2da      	uxtb	r2, r3
 8024f7a:	687b      	ldr	r3, [r7, #4]
 8024f7c:	701a      	strb	r2, [r3, #0]
 8024f7e:	e000      	b.n	8024f82 <_ZN10SideSensor11UpdateStateEv+0x12e>
        default: break;
 8024f80:	bf00      	nop
    }
}
 8024f82:	bf00      	nop
 8024f84:	3710      	adds	r7, #16
 8024f86:	46bd      	mov	sp, r7
 8024f88:	bd80      	pop	{r7, pc}
 8024f8a:	bf00      	nop
 8024f8c:	40020400 	.word	0x40020400
 8024f90:	40020c00 	.word	0x40020c00

08024f94 <_ZN10SideSensor6UpdateEv>:

void SideSensor::Update()
{
 8024f94:	b580      	push	{r7, lr}
 8024f96:	b084      	sub	sp, #16
 8024f98:	af00      	add	r7, sp, #0
 8024f9a:	6078      	str	r0, [r7, #4]
    uint8_t ignore_flag = exception_flags_ & 0x01;
 8024f9c:	687b      	ldr	r3, [r7, #4]
 8024f9e:	789b      	ldrb	r3, [r3, #2]
 8024fa0:	f003 0301 	and.w	r3, r3, #1
 8024fa4:	73fb      	strb	r3, [r7, #15]

    /* Ignore judgment */
    if(ignore_flag == 0x01)
 8024fa6:	7bfb      	ldrb	r3, [r7, #15]
 8024fa8:	2b01      	cmp	r3, #1
 8024faa:	d111      	bne.n	8024fd0 <_ZN10SideSensor6UpdateEv+0x3c>
    {
        if(master_count_ < IGNORE_COUNT) master_count_++;
 8024fac:	687b      	ldr	r3, [r7, #4]
 8024fae:	78db      	ldrb	r3, [r3, #3]
 8024fb0:	2b04      	cmp	r3, #4
 8024fb2:	d806      	bhi.n	8024fc2 <_ZN10SideSensor6UpdateEv+0x2e>
 8024fb4:	687b      	ldr	r3, [r7, #4]
 8024fb6:	78db      	ldrb	r3, [r3, #3]
 8024fb8:	3301      	adds	r3, #1
 8024fba:	b2da      	uxtb	r2, r3
 8024fbc:	687b      	ldr	r3, [r7, #4]
 8024fbe:	70da      	strb	r2, [r3, #3]
 8024fc0:	e031      	b.n	8025026 <_ZN10SideSensor6UpdateEv+0x92>
        else exception_flags_ >>= 1; 
 8024fc2:	687b      	ldr	r3, [r7, #4]
 8024fc4:	789b      	ldrb	r3, [r3, #2]
 8024fc6:	105b      	asrs	r3, r3, #1
 8024fc8:	b2da      	uxtb	r2, r3
 8024fca:	687b      	ldr	r3, [r7, #4]
 8024fcc:	709a      	strb	r2, [r3, #2]
 8024fce:	e02a      	b.n	8025026 <_ZN10SideSensor6UpdateEv+0x92>
    }
    else if(ignore_flag == 0x00)
 8024fd0:	7bfb      	ldrb	r3, [r7, #15]
 8024fd2:	2b00      	cmp	r3, #0
 8024fd4:	d127      	bne.n	8025026 <_ZN10SideSensor6UpdateEv+0x92>
    {
        UpdateState();
 8024fd6:	6878      	ldr	r0, [r7, #4]
 8024fd8:	f7ff ff3c 	bl	8024e54 <_ZN10SideSensor11UpdateStateEv>

        uint8_t now_state = read_state_flags_;
 8024fdc:	687b      	ldr	r3, [r7, #4]
 8024fde:	781b      	ldrb	r3, [r3, #0]
 8024fe0:	73bb      	strb	r3, [r7, #14]
        uint8_t pre_state = (now_state << 4) | (now_state >> 4);
 8024fe2:	7bbb      	ldrb	r3, [r7, #14]
 8024fe4:	011b      	lsls	r3, r3, #4
 8024fe6:	b25a      	sxtb	r2, r3
 8024fe8:	7bbb      	ldrb	r3, [r7, #14]
 8024fea:	111b      	asrs	r3, r3, #4
 8024fec:	b25b      	sxtb	r3, r3
 8024fee:	4313      	orrs	r3, r2
 8024ff0:	b25b      	sxtb	r3, r3
 8024ff2:	737b      	strb	r3, [r7, #13]

        if(pre_state != now_state)
 8024ff4:	7b7a      	ldrb	r2, [r7, #13]
 8024ff6:	7bbb      	ldrb	r3, [r7, #14]
 8024ff8:	429a      	cmp	r2, r3
 8024ffa:	d003      	beq.n	8025004 <_ZN10SideSensor6UpdateEv+0x70>
        {
            NoiseTolerance();
 8024ffc:	6878      	ldr	r0, [r7, #4]
 8024ffe:	f000 f819 	bl	8025034 <_ZN10SideSensor14NoiseToleranceEv>
 8025002:	e010      	b.n	8025026 <_ZN10SideSensor6UpdateEv+0x92>
        }
        else if(pre_state == now_state)
 8025004:	7b7a      	ldrb	r2, [r7, #13]
 8025006:	7bbb      	ldrb	r3, [r7, #14]
 8025008:	429a      	cmp	r2, r3
 802500a:	d10c      	bne.n	8025026 <_ZN10SideSensor6UpdateEv+0x92>
        {
            exception_flags_ &= 0xF3; // noise_count = 0
 802500c:	687b      	ldr	r3, [r7, #4]
 802500e:	789b      	ldrb	r3, [r3, #2]
 8025010:	f023 030c 	bic.w	r3, r3, #12
 8025014:	b2da      	uxtb	r2, r3
 8025016:	687b      	ldr	r3, [r7, #4]
 8025018:	709a      	strb	r2, [r3, #2]
            ConfirmState();
 802501a:	6878      	ldr	r0, [r7, #4]
 802501c:	f000 f85a 	bl	80250d4 <_ZN10SideSensor12ConfirmStateEv>
            CountUp();
 8025020:	6878      	ldr	r0, [r7, #4]
 8025022:	f000 f8c6 	bl	80251b2 <_ZN10SideSensor7CountUpEv>
        }
    }

#ifdef DEBUG_MODE
    Monitor();
 8025026:	6878      	ldr	r0, [r7, #4]
 8025028:	f000 f9a8 	bl	802537c <_ZN10SideSensor7MonitorEv>
#endif // DEBUG_MODE
}
 802502c:	bf00      	nop
 802502e:	3710      	adds	r7, #16
 8025030:	46bd      	mov	sp, r7
 8025032:	bd80      	pop	{r7, pc}

08025034 <_ZN10SideSensor14NoiseToleranceEv>:

void SideSensor::NoiseTolerance()
{
 8025034:	b580      	push	{r7, lr}
 8025036:	b084      	sub	sp, #16
 8025038:	af00      	add	r7, sp, #0
 802503a:	6078      	str	r0, [r7, #4]
    uint8_t noise_count = (exception_flags_ & 0x0C) >> 2;
 802503c:	687b      	ldr	r3, [r7, #4]
 802503e:	789b      	ldrb	r3, [r3, #2]
 8025040:	109b      	asrs	r3, r3, #2
 8025042:	b2db      	uxtb	r3, r3
 8025044:	f003 0303 	and.w	r3, r3, #3
 8025048:	73fb      	strb	r3, [r7, #15]

    if(noise_count == 0x00)
 802504a:	7bfb      	ldrb	r3, [r7, #15]
 802504c:	2b00      	cmp	r3, #0
 802504e:	d11f      	bne.n	8025090 <_ZN10SideSensor14NoiseToleranceEv+0x5c>
    {
        /* Update before_noise_state */
        exception_flags_ = (exception_flags_ & 0x0F) | (read_state_flags_ & 0xF0);
 8025050:	687b      	ldr	r3, [r7, #4]
 8025052:	789b      	ldrb	r3, [r3, #2]
 8025054:	f003 030f 	and.w	r3, r3, #15
 8025058:	b2da      	uxtb	r2, r3
 802505a:	687b      	ldr	r3, [r7, #4]
 802505c:	781b      	ldrb	r3, [r3, #0]
 802505e:	f023 030f 	bic.w	r3, r3, #15
 8025062:	b2db      	uxtb	r3, r3
 8025064:	4313      	orrs	r3, r2
 8025066:	b2da      	uxtb	r2, r3
 8025068:	687b      	ldr	r3, [r7, #4]
 802506a:	709a      	strb	r2, [r3, #2]
        /* Count up noise_count */
        noise_count++;
 802506c:	7bfb      	ldrb	r3, [r7, #15]
 802506e:	3301      	adds	r3, #1
 8025070:	73fb      	strb	r3, [r7, #15]
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
 8025072:	687b      	ldr	r3, [r7, #4]
 8025074:	789b      	ldrb	r3, [r3, #2]
 8025076:	b25b      	sxtb	r3, r3
 8025078:	f023 030c 	bic.w	r3, r3, #12
 802507c:	b25a      	sxtb	r2, r3
 802507e:	7bfb      	ldrb	r3, [r7, #15]
 8025080:	009b      	lsls	r3, r3, #2
 8025082:	b25b      	sxtb	r3, r3
 8025084:	4313      	orrs	r3, r2
 8025086:	b25b      	sxtb	r3, r3
 8025088:	b2da      	uxtb	r2, r3
 802508a:	687b      	ldr	r3, [r7, #4]
 802508c:	709a      	strb	r2, [r3, #2]

        ConfirmState();
        CountUp();
    }
    else master_count_ = 0;
}
 802508e:	e01d      	b.n	80250cc <_ZN10SideSensor14NoiseToleranceEv+0x98>
    else if(noise_count == 0x01)
 8025090:	7bfb      	ldrb	r3, [r7, #15]
 8025092:	2b01      	cmp	r3, #1
 8025094:	d117      	bne.n	80250c6 <_ZN10SideSensor14NoiseToleranceEv+0x92>
        noise_count++;
 8025096:	7bfb      	ldrb	r3, [r7, #15]
 8025098:	3301      	adds	r3, #1
 802509a:	73fb      	strb	r3, [r7, #15]
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
 802509c:	687b      	ldr	r3, [r7, #4]
 802509e:	789b      	ldrb	r3, [r3, #2]
 80250a0:	b25b      	sxtb	r3, r3
 80250a2:	f023 030c 	bic.w	r3, r3, #12
 80250a6:	b25a      	sxtb	r2, r3
 80250a8:	7bfb      	ldrb	r3, [r7, #15]
 80250aa:	009b      	lsls	r3, r3, #2
 80250ac:	b25b      	sxtb	r3, r3
 80250ae:	4313      	orrs	r3, r2
 80250b0:	b25b      	sxtb	r3, r3
 80250b2:	b2da      	uxtb	r2, r3
 80250b4:	687b      	ldr	r3, [r7, #4]
 80250b6:	709a      	strb	r2, [r3, #2]
        ConfirmState();
 80250b8:	6878      	ldr	r0, [r7, #4]
 80250ba:	f000 f80b 	bl	80250d4 <_ZN10SideSensor12ConfirmStateEv>
        CountUp();
 80250be:	6878      	ldr	r0, [r7, #4]
 80250c0:	f000 f877 	bl	80251b2 <_ZN10SideSensor7CountUpEv>
}
 80250c4:	e002      	b.n	80250cc <_ZN10SideSensor14NoiseToleranceEv+0x98>
    else master_count_ = 0;
 80250c6:	687b      	ldr	r3, [r7, #4]
 80250c8:	2200      	movs	r2, #0
 80250ca:	70da      	strb	r2, [r3, #3]
}
 80250cc:	bf00      	nop
 80250ce:	3710      	adds	r7, #16
 80250d0:	46bd      	mov	sp, r7
 80250d2:	bd80      	pop	{r7, pc}

080250d4 <_ZN10SideSensor12ConfirmStateEv>:

void SideSensor::ConfirmState()
{
 80250d4:	b480      	push	{r7}
 80250d6:	b085      	sub	sp, #20
 80250d8:	af00      	add	r7, sp, #0
 80250da:	6078      	str	r0, [r7, #4]
    uint8_t before_noise_state = exception_flags_ >> 4;
 80250dc:	687b      	ldr	r3, [r7, #4]
 80250de:	789b      	ldrb	r3, [r3, #2]
 80250e0:	111b      	asrs	r3, r3, #4
 80250e2:	73bb      	strb	r3, [r7, #14]
    uint8_t now_state = read_state_flags_ & 0x0F;
 80250e4:	687b      	ldr	r3, [r7, #4]
 80250e6:	781b      	ldrb	r3, [r3, #0]
 80250e8:	f003 030f 	and.w	r3, r3, #15
 80250ec:	737b      	strb	r3, [r7, #13]
    uint8_t count = master_count_;
 80250ee:	687b      	ldr	r3, [r7, #4]
 80250f0:	78db      	ldrb	r3, [r3, #3]
 80250f2:	73fb      	strb	r3, [r7, #15]

    if(before_noise_state != now_state)
 80250f4:	7bba      	ldrb	r2, [r7, #14]
 80250f6:	7b7b      	ldrb	r3, [r7, #13]
 80250f8:	429a      	cmp	r2, r3
 80250fa:	d010      	beq.n	802511e <_ZN10SideSensor12ConfirmStateEv+0x4a>
    {
        /* Update before_noise_state */
        exception_flags_ = (exception_flags_ & 0x0F) | (now_state << 4);
 80250fc:	687b      	ldr	r3, [r7, #4]
 80250fe:	789b      	ldrb	r3, [r3, #2]
 8025100:	b25b      	sxtb	r3, r3
 8025102:	f003 030f 	and.w	r3, r3, #15
 8025106:	b25a      	sxtb	r2, r3
 8025108:	7b7b      	ldrb	r3, [r7, #13]
 802510a:	011b      	lsls	r3, r3, #4
 802510c:	b25b      	sxtb	r3, r3
 802510e:	4313      	orrs	r3, r2
 8025110:	b25b      	sxtb	r3, r3
 8025112:	b2da      	uxtb	r2, r3
 8025114:	687b      	ldr	r3, [r7, #4]
 8025116:	709a      	strb	r2, [r3, #2]
        count = 0;
 8025118:	2300      	movs	r3, #0
 802511a:	73fb      	strb	r3, [r7, #15]
 802511c:	e005      	b.n	802512a <_ZN10SideSensor12ConfirmStateEv+0x56>
    }
    else if(count < MAX_INTERRUPT_COUNT) count++;
 802511e:	7bfb      	ldrb	r3, [r7, #15]
 8025120:	2bf9      	cmp	r3, #249	; 0xf9
 8025122:	d802      	bhi.n	802512a <_ZN10SideSensor12ConfirmStateEv+0x56>
 8025124:	7bfb      	ldrb	r3, [r7, #15]
 8025126:	3301      	adds	r3, #1
 8025128:	73fb      	strb	r3, [r7, #15]

    master_count_ = count;
 802512a:	687b      	ldr	r3, [r7, #4]
 802512c:	7bfa      	ldrb	r2, [r7, #15]
 802512e:	70da      	strb	r2, [r3, #3]

    if(now_state == 0x08 && count >= BLACK_BLACK_COUNT)
 8025130:	7b7b      	ldrb	r3, [r7, #13]
 8025132:	2b08      	cmp	r3, #8
 8025134:	d10d      	bne.n	8025152 <_ZN10SideSensor12ConfirmStateEv+0x7e>
 8025136:	7bfb      	ldrb	r3, [r7, #15]
 8025138:	2b13      	cmp	r3, #19
 802513a:	d90a      	bls.n	8025152 <_ZN10SideSensor12ConfirmStateEv+0x7e>
    {
        write_state_flags_ = (write_state_flags_ & 0xF0) | 0x08;
 802513c:	687b      	ldr	r3, [r7, #4]
 802513e:	785b      	ldrb	r3, [r3, #1]
 8025140:	f023 030f 	bic.w	r3, r3, #15
 8025144:	b2db      	uxtb	r3, r3
 8025146:	f043 0308 	orr.w	r3, r3, #8
 802514a:	b2da      	uxtb	r2, r3
 802514c:	687b      	ldr	r3, [r7, #4]
 802514e:	705a      	strb	r2, [r3, #1]
 8025150:	e029      	b.n	80251a6 <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x04 && count >= BLACK_WHITE_COUNT)
 8025152:	7b7b      	ldrb	r3, [r7, #13]
 8025154:	2b04      	cmp	r3, #4
 8025156:	d10a      	bne.n	802516e <_ZN10SideSensor12ConfirmStateEv+0x9a>
 8025158:	7bfb      	ldrb	r3, [r7, #15]
 802515a:	2b00      	cmp	r3, #0
 802515c:	d007      	beq.n	802516e <_ZN10SideSensor12ConfirmStateEv+0x9a>
    {
        write_state_flags_ |= 0x04;
 802515e:	687b      	ldr	r3, [r7, #4]
 8025160:	785b      	ldrb	r3, [r3, #1]
 8025162:	f043 0304 	orr.w	r3, r3, #4
 8025166:	b2da      	uxtb	r2, r3
 8025168:	687b      	ldr	r3, [r7, #4]
 802516a:	705a      	strb	r2, [r3, #1]
 802516c:	e01b      	b.n	80251a6 <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x02 && count >= WHITE_BLACK_COUNT)
 802516e:	7b7b      	ldrb	r3, [r7, #13]
 8025170:	2b02      	cmp	r3, #2
 8025172:	d10a      	bne.n	802518a <_ZN10SideSensor12ConfirmStateEv+0xb6>
 8025174:	7bfb      	ldrb	r3, [r7, #15]
 8025176:	2b00      	cmp	r3, #0
 8025178:	d007      	beq.n	802518a <_ZN10SideSensor12ConfirmStateEv+0xb6>
    {
        write_state_flags_ |= 0x02;
 802517a:	687b      	ldr	r3, [r7, #4]
 802517c:	785b      	ldrb	r3, [r3, #1]
 802517e:	f043 0302 	orr.w	r3, r3, #2
 8025182:	b2da      	uxtb	r2, r3
 8025184:	687b      	ldr	r3, [r7, #4]
 8025186:	705a      	strb	r2, [r3, #1]
 8025188:	e00d      	b.n	80251a6 <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x01 && count >= WHITE_WHITE_COUNT)
 802518a:	7b7b      	ldrb	r3, [r7, #13]
 802518c:	2b01      	cmp	r3, #1
 802518e:	d10a      	bne.n	80251a6 <_ZN10SideSensor12ConfirmStateEv+0xd2>
    {
        write_state_flags_ = (write_state_flags_ & 0xF8) | 0x01;
 8025190:	687b      	ldr	r3, [r7, #4]
 8025192:	785b      	ldrb	r3, [r3, #1]
 8025194:	f023 0307 	bic.w	r3, r3, #7
 8025198:	b2db      	uxtb	r3, r3
 802519a:	f043 0301 	orr.w	r3, r3, #1
 802519e:	b2da      	uxtb	r2, r3
 80251a0:	687b      	ldr	r3, [r7, #4]
 80251a2:	705a      	strb	r2, [r3, #1]
    }
}
 80251a4:	e7ff      	b.n	80251a6 <_ZN10SideSensor12ConfirmStateEv+0xd2>
 80251a6:	bf00      	nop
 80251a8:	3714      	adds	r7, #20
 80251aa:	46bd      	mov	sp, r7
 80251ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251b0:	4770      	bx	lr

080251b2 <_ZN10SideSensor7CountUpEv>:

void SideSensor::CountUp()
{
 80251b2:	b480      	push	{r7}
 80251b4:	b085      	sub	sp, #20
 80251b6:	af00      	add	r7, sp, #0
 80251b8:	6078      	str	r0, [r7, #4]
    uint8_t state = write_state_flags_;
 80251ba:	687b      	ldr	r3, [r7, #4]
 80251bc:	785b      	ldrb	r3, [r3, #1]
 80251be:	73fb      	strb	r3, [r7, #15]
    uint8_t black_flag   = (state & 0x08) >> 3;
 80251c0:	7bfb      	ldrb	r3, [r7, #15]
 80251c2:	10db      	asrs	r3, r3, #3
 80251c4:	b2db      	uxtb	r3, r3
 80251c6:	f003 0301 	and.w	r3, r3, #1
 80251ca:	73bb      	strb	r3, [r7, #14]
    uint8_t goal_flag    = (state & 0x04) >> 2;
 80251cc:	7bfb      	ldrb	r3, [r7, #15]
 80251ce:	109b      	asrs	r3, r3, #2
 80251d0:	b2db      	uxtb	r3, r3
 80251d2:	f003 0301 	and.w	r3, r3, #1
 80251d6:	737b      	strb	r3, [r7, #13]
    uint8_t corner_flag  = (state & 0x02) >> 1;
 80251d8:	7bfb      	ldrb	r3, [r7, #15]
 80251da:	105b      	asrs	r3, r3, #1
 80251dc:	b2db      	uxtb	r3, r3
 80251de:	f003 0301 	and.w	r3, r3, #1
 80251e2:	733b      	strb	r3, [r7, #12]
    uint8_t cross_flag   =  state & 0x01;
 80251e4:	7bfb      	ldrb	r3, [r7, #15]
 80251e6:	f003 0301 	and.w	r3, r3, #1
 80251ea:	72fb      	strb	r3, [r7, #11]
    uint8_t goal_reach   = (state & 0x80) >> 7;
 80251ec:	7bfb      	ldrb	r3, [r7, #15]
 80251ee:	09db      	lsrs	r3, r3, #7
 80251f0:	72bb      	strb	r3, [r7, #10]
    uint8_t corner_reach = (state & 0x40) >> 6;
 80251f2:	7bfb      	ldrb	r3, [r7, #15]
 80251f4:	119b      	asrs	r3, r3, #6
 80251f6:	b2db      	uxtb	r3, r3
 80251f8:	f003 0301 	and.w	r3, r3, #1
 80251fc:	727b      	strb	r3, [r7, #9]
    uint8_t cross_reach  = (state & 0x20) >> 5;
 80251fe:	7bfb      	ldrb	r3, [r7, #15]
 8025200:	115b      	asrs	r3, r3, #5
 8025202:	b2db      	uxtb	r3, r3
 8025204:	f003 0301 	and.w	r3, r3, #1
 8025208:	723b      	strb	r3, [r7, #8]

    if(cross_flag == 0x01 && black_flag == 0x01)
 802520a:	7afb      	ldrb	r3, [r7, #11]
 802520c:	2b01      	cmp	r3, #1
 802520e:	d10b      	bne.n	8025228 <_ZN10SideSensor7CountUpEv+0x76>
 8025210:	7bbb      	ldrb	r3, [r7, #14]
 8025212:	2b01      	cmp	r3, #1
 8025214:	d108      	bne.n	8025228 <_ZN10SideSensor7CountUpEv+0x76>
    {
        state &= 0xF7; // black_flag = false
 8025216:	7bfb      	ldrb	r3, [r7, #15]
 8025218:	f023 0308 	bic.w	r3, r3, #8
 802521c:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 802521e:	7bfb      	ldrb	r3, [r7, #15]
 8025220:	f043 0320 	orr.w	r3, r3, #32
 8025224:	73fb      	strb	r3, [r7, #15]
 8025226:	e02d      	b.n	8025284 <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_flag == 0x01 && goal_reach == 0x01)
 8025228:	7afb      	ldrb	r3, [r7, #11]
 802522a:	2b01      	cmp	r3, #1
 802522c:	d10b      	bne.n	8025246 <_ZN10SideSensor7CountUpEv+0x94>
 802522e:	7abb      	ldrb	r3, [r7, #10]
 8025230:	2b01      	cmp	r3, #1
 8025232:	d108      	bne.n	8025246 <_ZN10SideSensor7CountUpEv+0x94>
    {
        state &= 0x7F; // goal_reach = false
 8025234:	7bfb      	ldrb	r3, [r7, #15]
 8025236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802523a:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 802523c:	7bfb      	ldrb	r3, [r7, #15]
 802523e:	f043 0320 	orr.w	r3, r3, #32
 8025242:	73fb      	strb	r3, [r7, #15]
 8025244:	e01e      	b.n	8025284 <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_flag == 0x01 && corner_reach == 0x01)
 8025246:	7afb      	ldrb	r3, [r7, #11]
 8025248:	2b01      	cmp	r3, #1
 802524a:	d10b      	bne.n	8025264 <_ZN10SideSensor7CountUpEv+0xb2>
 802524c:	7a7b      	ldrb	r3, [r7, #9]
 802524e:	2b01      	cmp	r3, #1
 8025250:	d108      	bne.n	8025264 <_ZN10SideSensor7CountUpEv+0xb2>
    {
        state &= 0xBF; // corner_reach = false
 8025252:	7bfb      	ldrb	r3, [r7, #15]
 8025254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8025258:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 802525a:	7bfb      	ldrb	r3, [r7, #15]
 802525c:	f043 0320 	orr.w	r3, r3, #32
 8025260:	73fb      	strb	r3, [r7, #15]
 8025262:	e00f      	b.n	8025284 <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_reach == 0x01 && black_flag == 0x01)
 8025264:	7a3b      	ldrb	r3, [r7, #8]
 8025266:	2b01      	cmp	r3, #1
 8025268:	d10c      	bne.n	8025284 <_ZN10SideSensor7CountUpEv+0xd2>
 802526a:	7bbb      	ldrb	r3, [r7, #14]
 802526c:	2b01      	cmp	r3, #1
 802526e:	d109      	bne.n	8025284 <_ZN10SideSensor7CountUpEv+0xd2>
    {
        state &= 0xDF; // cross_reach = false
 8025270:	7bfb      	ldrb	r3, [r7, #15]
 8025272:	f023 0320 	bic.w	r3, r3, #32
 8025276:	73fb      	strb	r3, [r7, #15]
        cross_line_count_++;
 8025278:	687b      	ldr	r3, [r7, #4]
 802527a:	799b      	ldrb	r3, [r3, #6]
 802527c:	3301      	adds	r3, #1
 802527e:	b2da      	uxtb	r2, r3
 8025280:	687b      	ldr	r3, [r7, #4]
 8025282:	719a      	strb	r2, [r3, #6]
    }

    black_flag   = (state & 0x08) >> 3;
 8025284:	7bfb      	ldrb	r3, [r7, #15]
 8025286:	10db      	asrs	r3, r3, #3
 8025288:	b2db      	uxtb	r3, r3
 802528a:	f003 0301 	and.w	r3, r3, #1
 802528e:	73bb      	strb	r3, [r7, #14]
    goal_reach   = (state & 0x80) >> 7;
 8025290:	7bfb      	ldrb	r3, [r7, #15]
 8025292:	09db      	lsrs	r3, r3, #7
 8025294:	72bb      	strb	r3, [r7, #10]
    corner_reach = (state & 0x40) >> 6;
 8025296:	7bfb      	ldrb	r3, [r7, #15]
 8025298:	119b      	asrs	r3, r3, #6
 802529a:	b2db      	uxtb	r3, r3
 802529c:	f003 0301 	and.w	r3, r3, #1
 80252a0:	727b      	strb	r3, [r7, #9]
    
    if(goal_flag == 0x01 && black_flag == 0x01)
 80252a2:	7b7b      	ldrb	r3, [r7, #13]
 80252a4:	2b01      	cmp	r3, #1
 80252a6:	d10b      	bne.n	80252c0 <_ZN10SideSensor7CountUpEv+0x10e>
 80252a8:	7bbb      	ldrb	r3, [r7, #14]
 80252aa:	2b01      	cmp	r3, #1
 80252ac:	d108      	bne.n	80252c0 <_ZN10SideSensor7CountUpEv+0x10e>
    {
        state &= 0xF7; // black_flag = false
 80252ae:	7bfb      	ldrb	r3, [r7, #15]
 80252b0:	f023 0308 	bic.w	r3, r3, #8
 80252b4:	73fb      	strb	r3, [r7, #15]
        state |= 0x80; // goal_reach = true
 80252b6:	7bfb      	ldrb	r3, [r7, #15]
 80252b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80252bc:	73fb      	strb	r3, [r7, #15]
 80252be:	e02f      	b.n	8025320 <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(goal_reach == 0x01 && black_flag == 0x01)
 80252c0:	7abb      	ldrb	r3, [r7, #10]
 80252c2:	2b01      	cmp	r3, #1
 80252c4:	d10d      	bne.n	80252e2 <_ZN10SideSensor7CountUpEv+0x130>
 80252c6:	7bbb      	ldrb	r3, [r7, #14]
 80252c8:	2b01      	cmp	r3, #1
 80252ca:	d10a      	bne.n	80252e2 <_ZN10SideSensor7CountUpEv+0x130>
    {
        state &= 0x7F; // goal_reach = false
 80252cc:	7bfb      	ldrb	r3, [r7, #15]
 80252ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80252d2:	73fb      	strb	r3, [r7, #15]
        goal_marker_count_++;
 80252d4:	687b      	ldr	r3, [r7, #4]
 80252d6:	791b      	ldrb	r3, [r3, #4]
 80252d8:	3301      	adds	r3, #1
 80252da:	b2da      	uxtb	r2, r3
 80252dc:	687b      	ldr	r3, [r7, #4]
 80252de:	711a      	strb	r2, [r3, #4]
 80252e0:	e01e      	b.n	8025320 <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(corner_flag == 0x01 && black_flag == 0x01)
 80252e2:	7b3b      	ldrb	r3, [r7, #12]
 80252e4:	2b01      	cmp	r3, #1
 80252e6:	d10b      	bne.n	8025300 <_ZN10SideSensor7CountUpEv+0x14e>
 80252e8:	7bbb      	ldrb	r3, [r7, #14]
 80252ea:	2b01      	cmp	r3, #1
 80252ec:	d108      	bne.n	8025300 <_ZN10SideSensor7CountUpEv+0x14e>
    {
        state &= 0xF7; // black_flag = false
 80252ee:	7bfb      	ldrb	r3, [r7, #15]
 80252f0:	f023 0308 	bic.w	r3, r3, #8
 80252f4:	73fb      	strb	r3, [r7, #15]
        state |= 0x40; // corner_reach = true
 80252f6:	7bfb      	ldrb	r3, [r7, #15]
 80252f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80252fc:	73fb      	strb	r3, [r7, #15]
 80252fe:	e00f      	b.n	8025320 <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(corner_reach == 0x01 && black_flag == 0x01)
 8025300:	7a7b      	ldrb	r3, [r7, #9]
 8025302:	2b01      	cmp	r3, #1
 8025304:	d10c      	bne.n	8025320 <_ZN10SideSensor7CountUpEv+0x16e>
 8025306:	7bbb      	ldrb	r3, [r7, #14]
 8025308:	2b01      	cmp	r3, #1
 802530a:	d109      	bne.n	8025320 <_ZN10SideSensor7CountUpEv+0x16e>
    {
        state &= 0xBF; // corner_reach = false
 802530c:	7bfb      	ldrb	r3, [r7, #15]
 802530e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8025312:	73fb      	strb	r3, [r7, #15]
        corner_marker_count_++;
 8025314:	687b      	ldr	r3, [r7, #4]
 8025316:	795b      	ldrb	r3, [r3, #5]
 8025318:	3301      	adds	r3, #1
 802531a:	b2da      	uxtb	r2, r3
 802531c:	687b      	ldr	r3, [r7, #4]
 802531e:	715a      	strb	r2, [r3, #5]
    }

    write_state_flags_ = state;
 8025320:	687b      	ldr	r3, [r7, #4]
 8025322:	7bfa      	ldrb	r2, [r7, #15]
 8025324:	705a      	strb	r2, [r3, #1]
}
 8025326:	bf00      	nop
 8025328:	3714      	adds	r7, #20
 802532a:	46bd      	mov	sp, r7
 802532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025330:	4770      	bx	lr

08025332 <_ZN10SideSensor18GetGoalMarkerCountEv>:

uint8_t SideSensor::GetGoalMarkerCount()
{
 8025332:	b480      	push	{r7}
 8025334:	b083      	sub	sp, #12
 8025336:	af00      	add	r7, sp, #0
 8025338:	6078      	str	r0, [r7, #4]
    return goal_marker_count_;
 802533a:	687b      	ldr	r3, [r7, #4]
 802533c:	791b      	ldrb	r3, [r3, #4]
}
 802533e:	4618      	mov	r0, r3
 8025340:	370c      	adds	r7, #12
 8025342:	46bd      	mov	sp, r7
 8025344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025348:	4770      	bx	lr

0802534a <_ZN10SideSensor20GetCornerMarkerCountEv>:

uint8_t SideSensor::GetCornerMarkerCount()
{
 802534a:	b480      	push	{r7}
 802534c:	b083      	sub	sp, #12
 802534e:	af00      	add	r7, sp, #0
 8025350:	6078      	str	r0, [r7, #4]
    return corner_marker_count_;
 8025352:	687b      	ldr	r3, [r7, #4]
 8025354:	795b      	ldrb	r3, [r3, #5]
}
 8025356:	4618      	mov	r0, r3
 8025358:	370c      	adds	r7, #12
 802535a:	46bd      	mov	sp, r7
 802535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025360:	4770      	bx	lr

08025362 <_ZN10SideSensor17GetCrossLineCountEv>:

uint8_t SideSensor::GetCrossLineCount()
{
 8025362:	b480      	push	{r7}
 8025364:	b083      	sub	sp, #12
 8025366:	af00      	add	r7, sp, #0
 8025368:	6078      	str	r0, [r7, #4]
    return cross_line_count_;
 802536a:	687b      	ldr	r3, [r7, #4]
 802536c:	799b      	ldrb	r3, [r3, #6]
}
 802536e:	4618      	mov	r0, r3
 8025370:	370c      	adds	r7, #12
 8025372:	46bd      	mov	sp, r7
 8025374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025378:	4770      	bx	lr
	...

0802537c <_ZN10SideSensor7MonitorEv>:

#ifdef DEBUG_MODE
void SideSensor::Monitor()
{
 802537c:	b480      	push	{r7}
 802537e:	b083      	sub	sp, #12
 8025380:	af00      	add	r7, sp, #0
 8025382:	6078      	str	r0, [r7, #4]
    /* read_state_flags_ */
    g_side_pre_state = (read_state_flags_ & 0xF0) >> 4;
 8025384:	687b      	ldr	r3, [r7, #4]
 8025386:	781b      	ldrb	r3, [r3, #0]
 8025388:	091b      	lsrs	r3, r3, #4
 802538a:	b2da      	uxtb	r2, r3
 802538c:	4b3a      	ldr	r3, [pc, #232]	; (8025478 <_ZN10SideSensor7MonitorEv+0xfc>)
 802538e:	701a      	strb	r2, [r3, #0]
    g_side_now_state =  read_state_flags_ & 0x0F;
 8025390:	687b      	ldr	r3, [r7, #4]
 8025392:	781b      	ldrb	r3, [r3, #0]
 8025394:	f003 030f 	and.w	r3, r3, #15
 8025398:	b2da      	uxtb	r2, r3
 802539a:	4b38      	ldr	r3, [pc, #224]	; (802547c <_ZN10SideSensor7MonitorEv+0x100>)
 802539c:	701a      	strb	r2, [r3, #0]

    if(g_side_pre_state != g_side_now_state) g_side_change_state_count++;
 802539e:	4b36      	ldr	r3, [pc, #216]	; (8025478 <_ZN10SideSensor7MonitorEv+0xfc>)
 80253a0:	781a      	ldrb	r2, [r3, #0]
 80253a2:	4b36      	ldr	r3, [pc, #216]	; (802547c <_ZN10SideSensor7MonitorEv+0x100>)
 80253a4:	781b      	ldrb	r3, [r3, #0]
 80253a6:	429a      	cmp	r2, r3
 80253a8:	d004      	beq.n	80253b4 <_ZN10SideSensor7MonitorEv+0x38>
 80253aa:	4b35      	ldr	r3, [pc, #212]	; (8025480 <_ZN10SideSensor7MonitorEv+0x104>)
 80253ac:	681b      	ldr	r3, [r3, #0]
 80253ae:	3301      	adds	r3, #1
 80253b0:	4a33      	ldr	r2, [pc, #204]	; (8025480 <_ZN10SideSensor7MonitorEv+0x104>)
 80253b2:	6013      	str	r3, [r2, #0]

    /* write_state_flags_ upper bit */
    g_side_goal_reach   = (write_state_flags_ & 0x80) >> 7;
 80253b4:	687b      	ldr	r3, [r7, #4]
 80253b6:	785b      	ldrb	r3, [r3, #1]
 80253b8:	09db      	lsrs	r3, r3, #7
 80253ba:	b2da      	uxtb	r2, r3
 80253bc:	4b31      	ldr	r3, [pc, #196]	; (8025484 <_ZN10SideSensor7MonitorEv+0x108>)
 80253be:	701a      	strb	r2, [r3, #0]
    g_side_corner_reach = (write_state_flags_ & 0x40) >> 6;
 80253c0:	687b      	ldr	r3, [r7, #4]
 80253c2:	785b      	ldrb	r3, [r3, #1]
 80253c4:	119b      	asrs	r3, r3, #6
 80253c6:	b2db      	uxtb	r3, r3
 80253c8:	f003 0301 	and.w	r3, r3, #1
 80253cc:	b2da      	uxtb	r2, r3
 80253ce:	4b2e      	ldr	r3, [pc, #184]	; (8025488 <_ZN10SideSensor7MonitorEv+0x10c>)
 80253d0:	701a      	strb	r2, [r3, #0]
    g_side_cross_reach  = (write_state_flags_ & 0x20) >> 5;
 80253d2:	687b      	ldr	r3, [r7, #4]
 80253d4:	785b      	ldrb	r3, [r3, #1]
 80253d6:	115b      	asrs	r3, r3, #5
 80253d8:	b2db      	uxtb	r3, r3
 80253da:	f003 0301 	and.w	r3, r3, #1
 80253de:	b2da      	uxtb	r2, r3
 80253e0:	4b2a      	ldr	r3, [pc, #168]	; (802548c <_ZN10SideSensor7MonitorEv+0x110>)
 80253e2:	701a      	strb	r2, [r3, #0]

    /* write_state_flags_ lower bit */
    g_side_black_flag  = (write_state_flags_ & 0x08) >> 3;
 80253e4:	687b      	ldr	r3, [r7, #4]
 80253e6:	785b      	ldrb	r3, [r3, #1]
 80253e8:	10db      	asrs	r3, r3, #3
 80253ea:	b2db      	uxtb	r3, r3
 80253ec:	f003 0301 	and.w	r3, r3, #1
 80253f0:	b2da      	uxtb	r2, r3
 80253f2:	4b27      	ldr	r3, [pc, #156]	; (8025490 <_ZN10SideSensor7MonitorEv+0x114>)
 80253f4:	701a      	strb	r2, [r3, #0]
    g_side_goal_flag   = (write_state_flags_ & 0x04) >> 2;
 80253f6:	687b      	ldr	r3, [r7, #4]
 80253f8:	785b      	ldrb	r3, [r3, #1]
 80253fa:	109b      	asrs	r3, r3, #2
 80253fc:	b2db      	uxtb	r3, r3
 80253fe:	f003 0301 	and.w	r3, r3, #1
 8025402:	b2da      	uxtb	r2, r3
 8025404:	4b23      	ldr	r3, [pc, #140]	; (8025494 <_ZN10SideSensor7MonitorEv+0x118>)
 8025406:	701a      	strb	r2, [r3, #0]
    g_side_corner_flag = (write_state_flags_ & 0x02) >> 1;
 8025408:	687b      	ldr	r3, [r7, #4]
 802540a:	785b      	ldrb	r3, [r3, #1]
 802540c:	105b      	asrs	r3, r3, #1
 802540e:	b2db      	uxtb	r3, r3
 8025410:	f003 0301 	and.w	r3, r3, #1
 8025414:	b2da      	uxtb	r2, r3
 8025416:	4b20      	ldr	r3, [pc, #128]	; (8025498 <_ZN10SideSensor7MonitorEv+0x11c>)
 8025418:	701a      	strb	r2, [r3, #0]
    g_side_cross_flag  =  write_state_flags_ & 0x01;
 802541a:	687b      	ldr	r3, [r7, #4]
 802541c:	785b      	ldrb	r3, [r3, #1]
 802541e:	f003 0301 	and.w	r3, r3, #1
 8025422:	b2da      	uxtb	r2, r3
 8025424:	4b1d      	ldr	r3, [pc, #116]	; (802549c <_ZN10SideSensor7MonitorEv+0x120>)
 8025426:	701a      	strb	r2, [r3, #0]

    /* exception_flags_ */
    g_side_before_noise_state = (exception_flags_ & 0xF0) >> 4;
 8025428:	687b      	ldr	r3, [r7, #4]
 802542a:	789b      	ldrb	r3, [r3, #2]
 802542c:	091b      	lsrs	r3, r3, #4
 802542e:	b2da      	uxtb	r2, r3
 8025430:	4b1b      	ldr	r3, [pc, #108]	; (80254a0 <_ZN10SideSensor7MonitorEv+0x124>)
 8025432:	701a      	strb	r2, [r3, #0]
    g_side_noise_count        = (exception_flags_ & 0x0C) >> 2;
 8025434:	687b      	ldr	r3, [r7, #4]
 8025436:	789b      	ldrb	r3, [r3, #2]
 8025438:	109b      	asrs	r3, r3, #2
 802543a:	b2db      	uxtb	r3, r3
 802543c:	f003 0303 	and.w	r3, r3, #3
 8025440:	b2da      	uxtb	r2, r3
 8025442:	4b18      	ldr	r3, [pc, #96]	; (80254a4 <_ZN10SideSensor7MonitorEv+0x128>)
 8025444:	701a      	strb	r2, [r3, #0]
    g_side_ignore_flag        =  exception_flags_ & 0x01;
 8025446:	687b      	ldr	r3, [r7, #4]
 8025448:	789b      	ldrb	r3, [r3, #2]
 802544a:	f003 0301 	and.w	r3, r3, #1
 802544e:	b2da      	uxtb	r2, r3
 8025450:	4b15      	ldr	r3, [pc, #84]	; (80254a8 <_ZN10SideSensor7MonitorEv+0x12c>)
 8025452:	701a      	strb	r2, [r3, #0]

    g_goal_count   = goal_marker_count_;
 8025454:	687b      	ldr	r3, [r7, #4]
 8025456:	791a      	ldrb	r2, [r3, #4]
 8025458:	4b14      	ldr	r3, [pc, #80]	; (80254ac <_ZN10SideSensor7MonitorEv+0x130>)
 802545a:	701a      	strb	r2, [r3, #0]
    g_corner_count = corner_marker_count_;
 802545c:	687b      	ldr	r3, [r7, #4]
 802545e:	795a      	ldrb	r2, [r3, #5]
 8025460:	4b13      	ldr	r3, [pc, #76]	; (80254b0 <_ZN10SideSensor7MonitorEv+0x134>)
 8025462:	701a      	strb	r2, [r3, #0]
    g_cross_count  = cross_line_count_;
 8025464:	687b      	ldr	r3, [r7, #4]
 8025466:	799a      	ldrb	r2, [r3, #6]
 8025468:	4b12      	ldr	r3, [pc, #72]	; (80254b4 <_ZN10SideSensor7MonitorEv+0x138>)
 802546a:	701a      	strb	r2, [r3, #0]
}
 802546c:	bf00      	nop
 802546e:	370c      	adds	r7, #12
 8025470:	46bd      	mov	sp, r7
 8025472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025476:	4770      	bx	lr
 8025478:	200003ec 	.word	0x200003ec
 802547c:	200003ed 	.word	0x200003ed
 8025480:	200003f0 	.word	0x200003f0
 8025484:	200003f4 	.word	0x200003f4
 8025488:	200003f5 	.word	0x200003f5
 802548c:	200003f6 	.word	0x200003f6
 8025490:	200003f7 	.word	0x200003f7
 8025494:	200003f8 	.word	0x200003f8
 8025498:	200003f9 	.word	0x200003f9
 802549c:	200003fa 	.word	0x200003fa
 80254a0:	200003fb 	.word	0x200003fb
 80254a4:	200003fc 	.word	0x200003fc
 80254a8:	200003fd 	.word	0x200003fd
 80254ac:	200003fe 	.word	0x200003fe
 80254b0:	200003ff 	.word	0x200003ff
 80254b4:	20000400 	.word	0x20000400

080254b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80254b8:	b480      	push	{r7}
 80254ba:	b083      	sub	sp, #12
 80254bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80254be:	2300      	movs	r3, #0
 80254c0:	607b      	str	r3, [r7, #4]
 80254c2:	4b10      	ldr	r3, [pc, #64]	; (8025504 <HAL_MspInit+0x4c>)
 80254c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80254c6:	4a0f      	ldr	r2, [pc, #60]	; (8025504 <HAL_MspInit+0x4c>)
 80254c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80254cc:	6453      	str	r3, [r2, #68]	; 0x44
 80254ce:	4b0d      	ldr	r3, [pc, #52]	; (8025504 <HAL_MspInit+0x4c>)
 80254d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80254d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80254d6:	607b      	str	r3, [r7, #4]
 80254d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80254da:	2300      	movs	r3, #0
 80254dc:	603b      	str	r3, [r7, #0]
 80254de:	4b09      	ldr	r3, [pc, #36]	; (8025504 <HAL_MspInit+0x4c>)
 80254e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80254e2:	4a08      	ldr	r2, [pc, #32]	; (8025504 <HAL_MspInit+0x4c>)
 80254e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80254e8:	6413      	str	r3, [r2, #64]	; 0x40
 80254ea:	4b06      	ldr	r3, [pc, #24]	; (8025504 <HAL_MspInit+0x4c>)
 80254ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80254ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80254f2:	603b      	str	r3, [r7, #0]
 80254f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80254f6:	bf00      	nop
 80254f8:	370c      	adds	r7, #12
 80254fa:	46bd      	mov	sp, r7
 80254fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025500:	4770      	bx	lr
 8025502:	bf00      	nop
 8025504:	40023800 	.word	0x40023800

08025508 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8025508:	b580      	push	{r7, lr}
 802550a:	b08a      	sub	sp, #40	; 0x28
 802550c:	af00      	add	r7, sp, #0
 802550e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025510:	f107 0314 	add.w	r3, r7, #20
 8025514:	2200      	movs	r2, #0
 8025516:	601a      	str	r2, [r3, #0]
 8025518:	605a      	str	r2, [r3, #4]
 802551a:	609a      	str	r2, [r3, #8]
 802551c:	60da      	str	r2, [r3, #12]
 802551e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8025520:	687b      	ldr	r3, [r7, #4]
 8025522:	681b      	ldr	r3, [r3, #0]
 8025524:	4a3c      	ldr	r2, [pc, #240]	; (8025618 <HAL_ADC_MspInit+0x110>)
 8025526:	4293      	cmp	r3, r2
 8025528:	d171      	bne.n	802560e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 802552a:	2300      	movs	r3, #0
 802552c:	613b      	str	r3, [r7, #16]
 802552e:	4b3b      	ldr	r3, [pc, #236]	; (802561c <HAL_ADC_MspInit+0x114>)
 8025530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025532:	4a3a      	ldr	r2, [pc, #232]	; (802561c <HAL_ADC_MspInit+0x114>)
 8025534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8025538:	6453      	str	r3, [r2, #68]	; 0x44
 802553a:	4b38      	ldr	r3, [pc, #224]	; (802561c <HAL_ADC_MspInit+0x114>)
 802553c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802553e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025542:	613b      	str	r3, [r7, #16]
 8025544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8025546:	2300      	movs	r3, #0
 8025548:	60fb      	str	r3, [r7, #12]
 802554a:	4b34      	ldr	r3, [pc, #208]	; (802561c <HAL_ADC_MspInit+0x114>)
 802554c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802554e:	4a33      	ldr	r2, [pc, #204]	; (802561c <HAL_ADC_MspInit+0x114>)
 8025550:	f043 0304 	orr.w	r3, r3, #4
 8025554:	6313      	str	r3, [r2, #48]	; 0x30
 8025556:	4b31      	ldr	r3, [pc, #196]	; (802561c <HAL_ADC_MspInit+0x114>)
 8025558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802555a:	f003 0304 	and.w	r3, r3, #4
 802555e:	60fb      	str	r3, [r7, #12]
 8025560:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8025562:	2300      	movs	r3, #0
 8025564:	60bb      	str	r3, [r7, #8]
 8025566:	4b2d      	ldr	r3, [pc, #180]	; (802561c <HAL_ADC_MspInit+0x114>)
 8025568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802556a:	4a2c      	ldr	r2, [pc, #176]	; (802561c <HAL_ADC_MspInit+0x114>)
 802556c:	f043 0301 	orr.w	r3, r3, #1
 8025570:	6313      	str	r3, [r2, #48]	; 0x30
 8025572:	4b2a      	ldr	r3, [pc, #168]	; (802561c <HAL_ADC_MspInit+0x114>)
 8025574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025576:	f003 0301 	and.w	r3, r3, #1
 802557a:	60bb      	str	r3, [r7, #8]
 802557c:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 802557e:	233f      	movs	r3, #63	; 0x3f
 8025580:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8025582:	2303      	movs	r3, #3
 8025584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025586:	2300      	movs	r3, #0
 8025588:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802558a:	f107 0314 	add.w	r3, r7, #20
 802558e:	4619      	mov	r1, r3
 8025590:	4823      	ldr	r0, [pc, #140]	; (8025620 <HAL_ADC_MspInit+0x118>)
 8025592:	f002 fa81 	bl	8027a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8025596:	23ff      	movs	r3, #255	; 0xff
 8025598:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802559a:	2303      	movs	r3, #3
 802559c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802559e:	2300      	movs	r3, #0
 80255a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80255a2:	f107 0314 	add.w	r3, r7, #20
 80255a6:	4619      	mov	r1, r3
 80255a8:	481e      	ldr	r0, [pc, #120]	; (8025624 <HAL_ADC_MspInit+0x11c>)
 80255aa:	f002 fa75 	bl	8027a98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80255ae:	4b1e      	ldr	r3, [pc, #120]	; (8025628 <HAL_ADC_MspInit+0x120>)
 80255b0:	4a1e      	ldr	r2, [pc, #120]	; (802562c <HAL_ADC_MspInit+0x124>)
 80255b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80255b4:	4b1c      	ldr	r3, [pc, #112]	; (8025628 <HAL_ADC_MspInit+0x120>)
 80255b6:	2200      	movs	r2, #0
 80255b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80255ba:	4b1b      	ldr	r3, [pc, #108]	; (8025628 <HAL_ADC_MspInit+0x120>)
 80255bc:	2200      	movs	r2, #0
 80255be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80255c0:	4b19      	ldr	r3, [pc, #100]	; (8025628 <HAL_ADC_MspInit+0x120>)
 80255c2:	2200      	movs	r2, #0
 80255c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80255c6:	4b18      	ldr	r3, [pc, #96]	; (8025628 <HAL_ADC_MspInit+0x120>)
 80255c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80255cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80255ce:	4b16      	ldr	r3, [pc, #88]	; (8025628 <HAL_ADC_MspInit+0x120>)
 80255d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80255d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80255d6:	4b14      	ldr	r3, [pc, #80]	; (8025628 <HAL_ADC_MspInit+0x120>)
 80255d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80255dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80255de:	4b12      	ldr	r3, [pc, #72]	; (8025628 <HAL_ADC_MspInit+0x120>)
 80255e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80255e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80255e6:	4b10      	ldr	r3, [pc, #64]	; (8025628 <HAL_ADC_MspInit+0x120>)
 80255e8:	2200      	movs	r2, #0
 80255ea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80255ec:	4b0e      	ldr	r3, [pc, #56]	; (8025628 <HAL_ADC_MspInit+0x120>)
 80255ee:	2200      	movs	r2, #0
 80255f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80255f2:	480d      	ldr	r0, [pc, #52]	; (8025628 <HAL_ADC_MspInit+0x120>)
 80255f4:	f001 fc0c 	bl	8026e10 <HAL_DMA_Init>
 80255f8:	4603      	mov	r3, r0
 80255fa:	2b00      	cmp	r3, #0
 80255fc:	d001      	beq.n	8025602 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80255fe:	f7fe fa57 	bl	8023ab0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8025602:	687b      	ldr	r3, [r7, #4]
 8025604:	4a08      	ldr	r2, [pc, #32]	; (8025628 <HAL_ADC_MspInit+0x120>)
 8025606:	639a      	str	r2, [r3, #56]	; 0x38
 8025608:	4a07      	ldr	r2, [pc, #28]	; (8025628 <HAL_ADC_MspInit+0x120>)
 802560a:	687b      	ldr	r3, [r7, #4]
 802560c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 802560e:	bf00      	nop
 8025610:	3728      	adds	r7, #40	; 0x28
 8025612:	46bd      	mov	sp, r7
 8025614:	bd80      	pop	{r7, pc}
 8025616:	bf00      	nop
 8025618:	40012000 	.word	0x40012000
 802561c:	40023800 	.word	0x40023800
 8025620:	40020800 	.word	0x40020800
 8025624:	40020000 	.word	0x40020000
 8025628:	200143f0 	.word	0x200143f0
 802562c:	40026410 	.word	0x40026410

08025630 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8025630:	b580      	push	{r7, lr}
 8025632:	b08a      	sub	sp, #40	; 0x28
 8025634:	af00      	add	r7, sp, #0
 8025636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025638:	f107 0314 	add.w	r3, r7, #20
 802563c:	2200      	movs	r2, #0
 802563e:	601a      	str	r2, [r3, #0]
 8025640:	605a      	str	r2, [r3, #4]
 8025642:	609a      	str	r2, [r3, #8]
 8025644:	60da      	str	r2, [r3, #12]
 8025646:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8025648:	687b      	ldr	r3, [r7, #4]
 802564a:	681b      	ldr	r3, [r3, #0]
 802564c:	4a19      	ldr	r2, [pc, #100]	; (80256b4 <HAL_I2C_MspInit+0x84>)
 802564e:	4293      	cmp	r3, r2
 8025650:	d12c      	bne.n	80256ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8025652:	2300      	movs	r3, #0
 8025654:	613b      	str	r3, [r7, #16]
 8025656:	4b18      	ldr	r3, [pc, #96]	; (80256b8 <HAL_I2C_MspInit+0x88>)
 8025658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802565a:	4a17      	ldr	r2, [pc, #92]	; (80256b8 <HAL_I2C_MspInit+0x88>)
 802565c:	f043 0302 	orr.w	r3, r3, #2
 8025660:	6313      	str	r3, [r2, #48]	; 0x30
 8025662:	4b15      	ldr	r3, [pc, #84]	; (80256b8 <HAL_I2C_MspInit+0x88>)
 8025664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025666:	f003 0302 	and.w	r3, r3, #2
 802566a:	613b      	str	r3, [r7, #16]
 802566c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 802566e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8025672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8025674:	2312      	movs	r3, #18
 8025676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8025678:	2301      	movs	r3, #1
 802567a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802567c:	2303      	movs	r3, #3
 802567e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8025680:	2304      	movs	r3, #4
 8025682:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8025684:	f107 0314 	add.w	r3, r7, #20
 8025688:	4619      	mov	r1, r3
 802568a:	480c      	ldr	r0, [pc, #48]	; (80256bc <HAL_I2C_MspInit+0x8c>)
 802568c:	f002 fa04 	bl	8027a98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8025690:	2300      	movs	r3, #0
 8025692:	60fb      	str	r3, [r7, #12]
 8025694:	4b08      	ldr	r3, [pc, #32]	; (80256b8 <HAL_I2C_MspInit+0x88>)
 8025696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025698:	4a07      	ldr	r2, [pc, #28]	; (80256b8 <HAL_I2C_MspInit+0x88>)
 802569a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802569e:	6413      	str	r3, [r2, #64]	; 0x40
 80256a0:	4b05      	ldr	r3, [pc, #20]	; (80256b8 <HAL_I2C_MspInit+0x88>)
 80256a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80256a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80256a8:	60fb      	str	r3, [r7, #12]
 80256aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80256ac:	bf00      	nop
 80256ae:	3728      	adds	r7, #40	; 0x28
 80256b0:	46bd      	mov	sp, r7
 80256b2:	bd80      	pop	{r7, pc}
 80256b4:	40005800 	.word	0x40005800
 80256b8:	40023800 	.word	0x40023800
 80256bc:	40020400 	.word	0x40020400

080256c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80256c0:	b580      	push	{r7, lr}
 80256c2:	b08a      	sub	sp, #40	; 0x28
 80256c4:	af00      	add	r7, sp, #0
 80256c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80256c8:	f107 0314 	add.w	r3, r7, #20
 80256cc:	2200      	movs	r2, #0
 80256ce:	601a      	str	r2, [r3, #0]
 80256d0:	605a      	str	r2, [r3, #4]
 80256d2:	609a      	str	r2, [r3, #8]
 80256d4:	60da      	str	r2, [r3, #12]
 80256d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80256d8:	687b      	ldr	r3, [r7, #4]
 80256da:	681b      	ldr	r3, [r3, #0]
 80256dc:	4a19      	ldr	r2, [pc, #100]	; (8025744 <HAL_SPI_MspInit+0x84>)
 80256de:	4293      	cmp	r3, r2
 80256e0:	d12c      	bne.n	802573c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80256e2:	2300      	movs	r3, #0
 80256e4:	613b      	str	r3, [r7, #16]
 80256e6:	4b18      	ldr	r3, [pc, #96]	; (8025748 <HAL_SPI_MspInit+0x88>)
 80256e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80256ea:	4a17      	ldr	r2, [pc, #92]	; (8025748 <HAL_SPI_MspInit+0x88>)
 80256ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80256f0:	6413      	str	r3, [r2, #64]	; 0x40
 80256f2:	4b15      	ldr	r3, [pc, #84]	; (8025748 <HAL_SPI_MspInit+0x88>)
 80256f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80256f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80256fa:	613b      	str	r3, [r7, #16]
 80256fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80256fe:	2300      	movs	r3, #0
 8025700:	60fb      	str	r3, [r7, #12]
 8025702:	4b11      	ldr	r3, [pc, #68]	; (8025748 <HAL_SPI_MspInit+0x88>)
 8025704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025706:	4a10      	ldr	r2, [pc, #64]	; (8025748 <HAL_SPI_MspInit+0x88>)
 8025708:	f043 0304 	orr.w	r3, r3, #4
 802570c:	6313      	str	r3, [r2, #48]	; 0x30
 802570e:	4b0e      	ldr	r3, [pc, #56]	; (8025748 <HAL_SPI_MspInit+0x88>)
 8025710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025712:	f003 0304 	and.w	r3, r3, #4
 8025716:	60fb      	str	r3, [r7, #12]
 8025718:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 802571a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 802571e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025720:	2302      	movs	r3, #2
 8025722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025724:	2300      	movs	r3, #0
 8025726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8025728:	2303      	movs	r3, #3
 802572a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 802572c:	2306      	movs	r3, #6
 802572e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8025730:	f107 0314 	add.w	r3, r7, #20
 8025734:	4619      	mov	r1, r3
 8025736:	4805      	ldr	r0, [pc, #20]	; (802574c <HAL_SPI_MspInit+0x8c>)
 8025738:	f002 f9ae 	bl	8027a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 802573c:	bf00      	nop
 802573e:	3728      	adds	r7, #40	; 0x28
 8025740:	46bd      	mov	sp, r7
 8025742:	bd80      	pop	{r7, pc}
 8025744:	40003c00 	.word	0x40003c00
 8025748:	40023800 	.word	0x40023800
 802574c:	40020800 	.word	0x40020800

08025750 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8025750:	b480      	push	{r7}
 8025752:	b087      	sub	sp, #28
 8025754:	af00      	add	r7, sp, #0
 8025756:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8025758:	687b      	ldr	r3, [r7, #4]
 802575a:	681b      	ldr	r3, [r3, #0]
 802575c:	4a1f      	ldr	r2, [pc, #124]	; (80257dc <HAL_TIM_PWM_MspInit+0x8c>)
 802575e:	4293      	cmp	r3, r2
 8025760:	d10e      	bne.n	8025780 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8025762:	2300      	movs	r3, #0
 8025764:	617b      	str	r3, [r7, #20]
 8025766:	4b1e      	ldr	r3, [pc, #120]	; (80257e0 <HAL_TIM_PWM_MspInit+0x90>)
 8025768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802576a:	4a1d      	ldr	r2, [pc, #116]	; (80257e0 <HAL_TIM_PWM_MspInit+0x90>)
 802576c:	f043 0301 	orr.w	r3, r3, #1
 8025770:	6453      	str	r3, [r2, #68]	; 0x44
 8025772:	4b1b      	ldr	r3, [pc, #108]	; (80257e0 <HAL_TIM_PWM_MspInit+0x90>)
 8025774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025776:	f003 0301 	and.w	r3, r3, #1
 802577a:	617b      	str	r3, [r7, #20]
 802577c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 802577e:	e026      	b.n	80257ce <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8025780:	687b      	ldr	r3, [r7, #4]
 8025782:	681b      	ldr	r3, [r3, #0]
 8025784:	4a17      	ldr	r2, [pc, #92]	; (80257e4 <HAL_TIM_PWM_MspInit+0x94>)
 8025786:	4293      	cmp	r3, r2
 8025788:	d10e      	bne.n	80257a8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 802578a:	2300      	movs	r3, #0
 802578c:	613b      	str	r3, [r7, #16]
 802578e:	4b14      	ldr	r3, [pc, #80]	; (80257e0 <HAL_TIM_PWM_MspInit+0x90>)
 8025790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025792:	4a13      	ldr	r2, [pc, #76]	; (80257e0 <HAL_TIM_PWM_MspInit+0x90>)
 8025794:	f043 0302 	orr.w	r3, r3, #2
 8025798:	6413      	str	r3, [r2, #64]	; 0x40
 802579a:	4b11      	ldr	r3, [pc, #68]	; (80257e0 <HAL_TIM_PWM_MspInit+0x90>)
 802579c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802579e:	f003 0302 	and.w	r3, r3, #2
 80257a2:	613b      	str	r3, [r7, #16]
 80257a4:	693b      	ldr	r3, [r7, #16]
}
 80257a6:	e012      	b.n	80257ce <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 80257a8:	687b      	ldr	r3, [r7, #4]
 80257aa:	681b      	ldr	r3, [r3, #0]
 80257ac:	4a0e      	ldr	r2, [pc, #56]	; (80257e8 <HAL_TIM_PWM_MspInit+0x98>)
 80257ae:	4293      	cmp	r3, r2
 80257b0:	d10d      	bne.n	80257ce <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80257b2:	2300      	movs	r3, #0
 80257b4:	60fb      	str	r3, [r7, #12]
 80257b6:	4b0a      	ldr	r3, [pc, #40]	; (80257e0 <HAL_TIM_PWM_MspInit+0x90>)
 80257b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80257ba:	4a09      	ldr	r2, [pc, #36]	; (80257e0 <HAL_TIM_PWM_MspInit+0x90>)
 80257bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80257c0:	6413      	str	r3, [r2, #64]	; 0x40
 80257c2:	4b07      	ldr	r3, [pc, #28]	; (80257e0 <HAL_TIM_PWM_MspInit+0x90>)
 80257c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80257c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80257ca:	60fb      	str	r3, [r7, #12]
 80257cc:	68fb      	ldr	r3, [r7, #12]
}
 80257ce:	bf00      	nop
 80257d0:	371c      	adds	r7, #28
 80257d2:	46bd      	mov	sp, r7
 80257d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80257d8:	4770      	bx	lr
 80257da:	bf00      	nop
 80257dc:	40010000 	.word	0x40010000
 80257e0:	40023800 	.word	0x40023800
 80257e4:	40000400 	.word	0x40000400
 80257e8:	40001800 	.word	0x40001800

080257ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80257ec:	b580      	push	{r7, lr}
 80257ee:	b088      	sub	sp, #32
 80257f0:	af00      	add	r7, sp, #0
 80257f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80257f4:	687b      	ldr	r3, [r7, #4]
 80257f6:	681b      	ldr	r3, [r3, #0]
 80257f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80257fc:	d116      	bne.n	802582c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80257fe:	2300      	movs	r3, #0
 8025800:	61fb      	str	r3, [r7, #28]
 8025802:	4b40      	ldr	r3, [pc, #256]	; (8025904 <HAL_TIM_Base_MspInit+0x118>)
 8025804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025806:	4a3f      	ldr	r2, [pc, #252]	; (8025904 <HAL_TIM_Base_MspInit+0x118>)
 8025808:	f043 0301 	orr.w	r3, r3, #1
 802580c:	6413      	str	r3, [r2, #64]	; 0x40
 802580e:	4b3d      	ldr	r3, [pc, #244]	; (8025904 <HAL_TIM_Base_MspInit+0x118>)
 8025810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025812:	f003 0301 	and.w	r3, r3, #1
 8025816:	61fb      	str	r3, [r7, #28]
 8025818:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 802581a:	2200      	movs	r2, #0
 802581c:	2100      	movs	r1, #0
 802581e:	201c      	movs	r0, #28
 8025820:	f001 fabf 	bl	8026da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8025824:	201c      	movs	r0, #28
 8025826:	f001 fad8 	bl	8026dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 802582a:	e066      	b.n	80258fa <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM5)
 802582c:	687b      	ldr	r3, [r7, #4]
 802582e:	681b      	ldr	r3, [r3, #0]
 8025830:	4a35      	ldr	r2, [pc, #212]	; (8025908 <HAL_TIM_Base_MspInit+0x11c>)
 8025832:	4293      	cmp	r3, r2
 8025834:	d116      	bne.n	8025864 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8025836:	2300      	movs	r3, #0
 8025838:	61bb      	str	r3, [r7, #24]
 802583a:	4b32      	ldr	r3, [pc, #200]	; (8025904 <HAL_TIM_Base_MspInit+0x118>)
 802583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802583e:	4a31      	ldr	r2, [pc, #196]	; (8025904 <HAL_TIM_Base_MspInit+0x118>)
 8025840:	f043 0308 	orr.w	r3, r3, #8
 8025844:	6413      	str	r3, [r2, #64]	; 0x40
 8025846:	4b2f      	ldr	r3, [pc, #188]	; (8025904 <HAL_TIM_Base_MspInit+0x118>)
 8025848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802584a:	f003 0308 	and.w	r3, r3, #8
 802584e:	61bb      	str	r3, [r7, #24]
 8025850:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8025852:	2200      	movs	r2, #0
 8025854:	2100      	movs	r1, #0
 8025856:	2032      	movs	r0, #50	; 0x32
 8025858:	f001 faa3 	bl	8026da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 802585c:	2032      	movs	r0, #50	; 0x32
 802585e:	f001 fabc 	bl	8026dda <HAL_NVIC_EnableIRQ>
}
 8025862:	e04a      	b.n	80258fa <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM6)
 8025864:	687b      	ldr	r3, [r7, #4]
 8025866:	681b      	ldr	r3, [r3, #0]
 8025868:	4a28      	ldr	r2, [pc, #160]	; (802590c <HAL_TIM_Base_MspInit+0x120>)
 802586a:	4293      	cmp	r3, r2
 802586c:	d116      	bne.n	802589c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 802586e:	2300      	movs	r3, #0
 8025870:	617b      	str	r3, [r7, #20]
 8025872:	4b24      	ldr	r3, [pc, #144]	; (8025904 <HAL_TIM_Base_MspInit+0x118>)
 8025874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025876:	4a23      	ldr	r2, [pc, #140]	; (8025904 <HAL_TIM_Base_MspInit+0x118>)
 8025878:	f043 0310 	orr.w	r3, r3, #16
 802587c:	6413      	str	r3, [r2, #64]	; 0x40
 802587e:	4b21      	ldr	r3, [pc, #132]	; (8025904 <HAL_TIM_Base_MspInit+0x118>)
 8025880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025882:	f003 0310 	and.w	r3, r3, #16
 8025886:	617b      	str	r3, [r7, #20]
 8025888:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 802588a:	2200      	movs	r2, #0
 802588c:	2101      	movs	r1, #1
 802588e:	2036      	movs	r0, #54	; 0x36
 8025890:	f001 fa87 	bl	8026da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8025894:	2036      	movs	r0, #54	; 0x36
 8025896:	f001 faa0 	bl	8026dda <HAL_NVIC_EnableIRQ>
}
 802589a:	e02e      	b.n	80258fa <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 802589c:	687b      	ldr	r3, [r7, #4]
 802589e:	681b      	ldr	r3, [r3, #0]
 80258a0:	4a1b      	ldr	r2, [pc, #108]	; (8025910 <HAL_TIM_Base_MspInit+0x124>)
 80258a2:	4293      	cmp	r3, r2
 80258a4:	d116      	bne.n	80258d4 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80258a6:	2300      	movs	r3, #0
 80258a8:	613b      	str	r3, [r7, #16]
 80258aa:	4b16      	ldr	r3, [pc, #88]	; (8025904 <HAL_TIM_Base_MspInit+0x118>)
 80258ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80258ae:	4a15      	ldr	r2, [pc, #84]	; (8025904 <HAL_TIM_Base_MspInit+0x118>)
 80258b0:	f043 0320 	orr.w	r3, r3, #32
 80258b4:	6413      	str	r3, [r2, #64]	; 0x40
 80258b6:	4b13      	ldr	r3, [pc, #76]	; (8025904 <HAL_TIM_Base_MspInit+0x118>)
 80258b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80258ba:	f003 0320 	and.w	r3, r3, #32
 80258be:	613b      	str	r3, [r7, #16]
 80258c0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80258c2:	2200      	movs	r2, #0
 80258c4:	2100      	movs	r1, #0
 80258c6:	2037      	movs	r0, #55	; 0x37
 80258c8:	f001 fa6b 	bl	8026da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80258cc:	2037      	movs	r0, #55	; 0x37
 80258ce:	f001 fa84 	bl	8026dda <HAL_NVIC_EnableIRQ>
}
 80258d2:	e012      	b.n	80258fa <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 80258d4:	687b      	ldr	r3, [r7, #4]
 80258d6:	681b      	ldr	r3, [r3, #0]
 80258d8:	4a0e      	ldr	r2, [pc, #56]	; (8025914 <HAL_TIM_Base_MspInit+0x128>)
 80258da:	4293      	cmp	r3, r2
 80258dc:	d10d      	bne.n	80258fa <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80258de:	2300      	movs	r3, #0
 80258e0:	60fb      	str	r3, [r7, #12]
 80258e2:	4b08      	ldr	r3, [pc, #32]	; (8025904 <HAL_TIM_Base_MspInit+0x118>)
 80258e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80258e6:	4a07      	ldr	r2, [pc, #28]	; (8025904 <HAL_TIM_Base_MspInit+0x118>)
 80258e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80258ec:	6453      	str	r3, [r2, #68]	; 0x44
 80258ee:	4b05      	ldr	r3, [pc, #20]	; (8025904 <HAL_TIM_Base_MspInit+0x118>)
 80258f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80258f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80258f6:	60fb      	str	r3, [r7, #12]
 80258f8:	68fb      	ldr	r3, [r7, #12]
}
 80258fa:	bf00      	nop
 80258fc:	3720      	adds	r7, #32
 80258fe:	46bd      	mov	sp, r7
 8025900:	bd80      	pop	{r7, pc}
 8025902:	bf00      	nop
 8025904:	40023800 	.word	0x40023800
 8025908:	40000c00 	.word	0x40000c00
 802590c:	40001000 	.word	0x40001000
 8025910:	40001400 	.word	0x40001400
 8025914:	40014800 	.word	0x40014800

08025918 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8025918:	b580      	push	{r7, lr}
 802591a:	b08c      	sub	sp, #48	; 0x30
 802591c:	af00      	add	r7, sp, #0
 802591e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025920:	f107 031c 	add.w	r3, r7, #28
 8025924:	2200      	movs	r2, #0
 8025926:	601a      	str	r2, [r3, #0]
 8025928:	605a      	str	r2, [r3, #4]
 802592a:	609a      	str	r2, [r3, #8]
 802592c:	60da      	str	r2, [r3, #12]
 802592e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8025930:	687b      	ldr	r3, [r7, #4]
 8025932:	681b      	ldr	r3, [r3, #0]
 8025934:	4a32      	ldr	r2, [pc, #200]	; (8025a00 <HAL_TIM_Encoder_MspInit+0xe8>)
 8025936:	4293      	cmp	r3, r2
 8025938:	d12c      	bne.n	8025994 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 802593a:	2300      	movs	r3, #0
 802593c:	61bb      	str	r3, [r7, #24]
 802593e:	4b31      	ldr	r3, [pc, #196]	; (8025a04 <HAL_TIM_Encoder_MspInit+0xec>)
 8025940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025942:	4a30      	ldr	r2, [pc, #192]	; (8025a04 <HAL_TIM_Encoder_MspInit+0xec>)
 8025944:	f043 0304 	orr.w	r3, r3, #4
 8025948:	6413      	str	r3, [r2, #64]	; 0x40
 802594a:	4b2e      	ldr	r3, [pc, #184]	; (8025a04 <HAL_TIM_Encoder_MspInit+0xec>)
 802594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802594e:	f003 0304 	and.w	r3, r3, #4
 8025952:	61bb      	str	r3, [r7, #24]
 8025954:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8025956:	2300      	movs	r3, #0
 8025958:	617b      	str	r3, [r7, #20]
 802595a:	4b2a      	ldr	r3, [pc, #168]	; (8025a04 <HAL_TIM_Encoder_MspInit+0xec>)
 802595c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802595e:	4a29      	ldr	r2, [pc, #164]	; (8025a04 <HAL_TIM_Encoder_MspInit+0xec>)
 8025960:	f043 0302 	orr.w	r3, r3, #2
 8025964:	6313      	str	r3, [r2, #48]	; 0x30
 8025966:	4b27      	ldr	r3, [pc, #156]	; (8025a04 <HAL_TIM_Encoder_MspInit+0xec>)
 8025968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802596a:	f003 0302 	and.w	r3, r3, #2
 802596e:	617b      	str	r3, [r7, #20]
 8025970:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8025972:	23c0      	movs	r3, #192	; 0xc0
 8025974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025976:	2302      	movs	r3, #2
 8025978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802597a:	2300      	movs	r3, #0
 802597c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802597e:	2300      	movs	r3, #0
 8025980:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8025982:	2302      	movs	r3, #2
 8025984:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8025986:	f107 031c 	add.w	r3, r7, #28
 802598a:	4619      	mov	r1, r3
 802598c:	481e      	ldr	r0, [pc, #120]	; (8025a08 <HAL_TIM_Encoder_MspInit+0xf0>)
 802598e:	f002 f883 	bl	8027a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8025992:	e030      	b.n	80259f6 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8025994:	687b      	ldr	r3, [r7, #4]
 8025996:	681b      	ldr	r3, [r3, #0]
 8025998:	4a1c      	ldr	r2, [pc, #112]	; (8025a0c <HAL_TIM_Encoder_MspInit+0xf4>)
 802599a:	4293      	cmp	r3, r2
 802599c:	d12b      	bne.n	80259f6 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 802599e:	2300      	movs	r3, #0
 80259a0:	613b      	str	r3, [r7, #16]
 80259a2:	4b18      	ldr	r3, [pc, #96]	; (8025a04 <HAL_TIM_Encoder_MspInit+0xec>)
 80259a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80259a6:	4a17      	ldr	r2, [pc, #92]	; (8025a04 <HAL_TIM_Encoder_MspInit+0xec>)
 80259a8:	f043 0302 	orr.w	r3, r3, #2
 80259ac:	6453      	str	r3, [r2, #68]	; 0x44
 80259ae:	4b15      	ldr	r3, [pc, #84]	; (8025a04 <HAL_TIM_Encoder_MspInit+0xec>)
 80259b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80259b2:	f003 0302 	and.w	r3, r3, #2
 80259b6:	613b      	str	r3, [r7, #16]
 80259b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80259ba:	2300      	movs	r3, #0
 80259bc:	60fb      	str	r3, [r7, #12]
 80259be:	4b11      	ldr	r3, [pc, #68]	; (8025a04 <HAL_TIM_Encoder_MspInit+0xec>)
 80259c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80259c2:	4a10      	ldr	r2, [pc, #64]	; (8025a04 <HAL_TIM_Encoder_MspInit+0xec>)
 80259c4:	f043 0304 	orr.w	r3, r3, #4
 80259c8:	6313      	str	r3, [r2, #48]	; 0x30
 80259ca:	4b0e      	ldr	r3, [pc, #56]	; (8025a04 <HAL_TIM_Encoder_MspInit+0xec>)
 80259cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80259ce:	f003 0304 	and.w	r3, r3, #4
 80259d2:	60fb      	str	r3, [r7, #12]
 80259d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80259d6:	23c0      	movs	r3, #192	; 0xc0
 80259d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80259da:	2302      	movs	r3, #2
 80259dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80259de:	2300      	movs	r3, #0
 80259e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80259e2:	2300      	movs	r3, #0
 80259e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80259e6:	2303      	movs	r3, #3
 80259e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80259ea:	f107 031c 	add.w	r3, r7, #28
 80259ee:	4619      	mov	r1, r3
 80259f0:	4807      	ldr	r0, [pc, #28]	; (8025a10 <HAL_TIM_Encoder_MspInit+0xf8>)
 80259f2:	f002 f851 	bl	8027a98 <HAL_GPIO_Init>
}
 80259f6:	bf00      	nop
 80259f8:	3730      	adds	r7, #48	; 0x30
 80259fa:	46bd      	mov	sp, r7
 80259fc:	bd80      	pop	{r7, pc}
 80259fe:	bf00      	nop
 8025a00:	40000800 	.word	0x40000800
 8025a04:	40023800 	.word	0x40023800
 8025a08:	40020400 	.word	0x40020400
 8025a0c:	40010400 	.word	0x40010400
 8025a10:	40020800 	.word	0x40020800

08025a14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8025a14:	b580      	push	{r7, lr}
 8025a16:	b08c      	sub	sp, #48	; 0x30
 8025a18:	af00      	add	r7, sp, #0
 8025a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025a1c:	f107 031c 	add.w	r3, r7, #28
 8025a20:	2200      	movs	r2, #0
 8025a22:	601a      	str	r2, [r3, #0]
 8025a24:	605a      	str	r2, [r3, #4]
 8025a26:	609a      	str	r2, [r3, #8]
 8025a28:	60da      	str	r2, [r3, #12]
 8025a2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8025a2c:	687b      	ldr	r3, [r7, #4]
 8025a2e:	681b      	ldr	r3, [r3, #0]
 8025a30:	4a59      	ldr	r2, [pc, #356]	; (8025b98 <HAL_TIM_MspPostInit+0x184>)
 8025a32:	4293      	cmp	r3, r2
 8025a34:	d11f      	bne.n	8025a76 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8025a36:	2300      	movs	r3, #0
 8025a38:	61bb      	str	r3, [r7, #24]
 8025a3a:	4b58      	ldr	r3, [pc, #352]	; (8025b9c <HAL_TIM_MspPostInit+0x188>)
 8025a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025a3e:	4a57      	ldr	r2, [pc, #348]	; (8025b9c <HAL_TIM_MspPostInit+0x188>)
 8025a40:	f043 0301 	orr.w	r3, r3, #1
 8025a44:	6313      	str	r3, [r2, #48]	; 0x30
 8025a46:	4b55      	ldr	r3, [pc, #340]	; (8025b9c <HAL_TIM_MspPostInit+0x188>)
 8025a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025a4a:	f003 0301 	and.w	r3, r3, #1
 8025a4e:	61bb      	str	r3, [r7, #24]
 8025a50:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8025a52:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8025a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025a58:	2302      	movs	r3, #2
 8025a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025a5c:	2300      	movs	r3, #0
 8025a5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025a60:	2300      	movs	r3, #0
 8025a62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8025a64:	2301      	movs	r3, #1
 8025a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8025a68:	f107 031c 	add.w	r3, r7, #28
 8025a6c:	4619      	mov	r1, r3
 8025a6e:	484c      	ldr	r0, [pc, #304]	; (8025ba0 <HAL_TIM_MspPostInit+0x18c>)
 8025a70:	f002 f812 	bl	8027a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8025a74:	e08b      	b.n	8025b8e <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM3)
 8025a76:	687b      	ldr	r3, [r7, #4]
 8025a78:	681b      	ldr	r3, [r3, #0]
 8025a7a:	4a4a      	ldr	r2, [pc, #296]	; (8025ba4 <HAL_TIM_MspPostInit+0x190>)
 8025a7c:	4293      	cmp	r3, r2
 8025a7e:	d13d      	bne.n	8025afc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8025a80:	2300      	movs	r3, #0
 8025a82:	617b      	str	r3, [r7, #20]
 8025a84:	4b45      	ldr	r3, [pc, #276]	; (8025b9c <HAL_TIM_MspPostInit+0x188>)
 8025a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025a88:	4a44      	ldr	r2, [pc, #272]	; (8025b9c <HAL_TIM_MspPostInit+0x188>)
 8025a8a:	f043 0304 	orr.w	r3, r3, #4
 8025a8e:	6313      	str	r3, [r2, #48]	; 0x30
 8025a90:	4b42      	ldr	r3, [pc, #264]	; (8025b9c <HAL_TIM_MspPostInit+0x188>)
 8025a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025a94:	f003 0304 	and.w	r3, r3, #4
 8025a98:	617b      	str	r3, [r7, #20]
 8025a9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8025a9c:	2300      	movs	r3, #0
 8025a9e:	613b      	str	r3, [r7, #16]
 8025aa0:	4b3e      	ldr	r3, [pc, #248]	; (8025b9c <HAL_TIM_MspPostInit+0x188>)
 8025aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025aa4:	4a3d      	ldr	r2, [pc, #244]	; (8025b9c <HAL_TIM_MspPostInit+0x188>)
 8025aa6:	f043 0302 	orr.w	r3, r3, #2
 8025aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8025aac:	4b3b      	ldr	r3, [pc, #236]	; (8025b9c <HAL_TIM_MspPostInit+0x188>)
 8025aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025ab0:	f003 0302 	and.w	r3, r3, #2
 8025ab4:	613b      	str	r3, [r7, #16]
 8025ab6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8025ab8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8025abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025abe:	2302      	movs	r3, #2
 8025ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025ac2:	2300      	movs	r3, #0
 8025ac4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025ac6:	2300      	movs	r3, #0
 8025ac8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8025aca:	2302      	movs	r3, #2
 8025acc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8025ace:	f107 031c 	add.w	r3, r7, #28
 8025ad2:	4619      	mov	r1, r3
 8025ad4:	4834      	ldr	r0, [pc, #208]	; (8025ba8 <HAL_TIM_MspPostInit+0x194>)
 8025ad6:	f001 ffdf 	bl	8027a98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8025ada:	2330      	movs	r3, #48	; 0x30
 8025adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025ade:	2302      	movs	r3, #2
 8025ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025ae2:	2300      	movs	r3, #0
 8025ae4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025ae6:	2300      	movs	r3, #0
 8025ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8025aea:	2302      	movs	r3, #2
 8025aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8025aee:	f107 031c 	add.w	r3, r7, #28
 8025af2:	4619      	mov	r1, r3
 8025af4:	482d      	ldr	r0, [pc, #180]	; (8025bac <HAL_TIM_MspPostInit+0x198>)
 8025af6:	f001 ffcf 	bl	8027a98 <HAL_GPIO_Init>
}
 8025afa:	e048      	b.n	8025b8e <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM11)
 8025afc:	687b      	ldr	r3, [r7, #4]
 8025afe:	681b      	ldr	r3, [r3, #0]
 8025b00:	4a2b      	ldr	r2, [pc, #172]	; (8025bb0 <HAL_TIM_MspPostInit+0x19c>)
 8025b02:	4293      	cmp	r3, r2
 8025b04:	d11f      	bne.n	8025b46 <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8025b06:	2300      	movs	r3, #0
 8025b08:	60fb      	str	r3, [r7, #12]
 8025b0a:	4b24      	ldr	r3, [pc, #144]	; (8025b9c <HAL_TIM_MspPostInit+0x188>)
 8025b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025b0e:	4a23      	ldr	r2, [pc, #140]	; (8025b9c <HAL_TIM_MspPostInit+0x188>)
 8025b10:	f043 0302 	orr.w	r3, r3, #2
 8025b14:	6313      	str	r3, [r2, #48]	; 0x30
 8025b16:	4b21      	ldr	r3, [pc, #132]	; (8025b9c <HAL_TIM_MspPostInit+0x188>)
 8025b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025b1a:	f003 0302 	and.w	r3, r3, #2
 8025b1e:	60fb      	str	r3, [r7, #12]
 8025b20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8025b22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8025b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025b28:	2302      	movs	r3, #2
 8025b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025b2c:	2300      	movs	r3, #0
 8025b2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025b30:	2300      	movs	r3, #0
 8025b32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8025b34:	2303      	movs	r3, #3
 8025b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8025b38:	f107 031c 	add.w	r3, r7, #28
 8025b3c:	4619      	mov	r1, r3
 8025b3e:	481b      	ldr	r0, [pc, #108]	; (8025bac <HAL_TIM_MspPostInit+0x198>)
 8025b40:	f001 ffaa 	bl	8027a98 <HAL_GPIO_Init>
}
 8025b44:	e023      	b.n	8025b8e <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM12)
 8025b46:	687b      	ldr	r3, [r7, #4]
 8025b48:	681b      	ldr	r3, [r3, #0]
 8025b4a:	4a1a      	ldr	r2, [pc, #104]	; (8025bb4 <HAL_TIM_MspPostInit+0x1a0>)
 8025b4c:	4293      	cmp	r3, r2
 8025b4e:	d11e      	bne.n	8025b8e <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8025b50:	2300      	movs	r3, #0
 8025b52:	60bb      	str	r3, [r7, #8]
 8025b54:	4b11      	ldr	r3, [pc, #68]	; (8025b9c <HAL_TIM_MspPostInit+0x188>)
 8025b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025b58:	4a10      	ldr	r2, [pc, #64]	; (8025b9c <HAL_TIM_MspPostInit+0x188>)
 8025b5a:	f043 0302 	orr.w	r3, r3, #2
 8025b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8025b60:	4b0e      	ldr	r3, [pc, #56]	; (8025b9c <HAL_TIM_MspPostInit+0x188>)
 8025b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025b64:	f003 0302 	and.w	r3, r3, #2
 8025b68:	60bb      	str	r3, [r7, #8]
 8025b6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8025b6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8025b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025b72:	2302      	movs	r3, #2
 8025b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025b76:	2300      	movs	r3, #0
 8025b78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025b7a:	2300      	movs	r3, #0
 8025b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8025b7e:	2309      	movs	r3, #9
 8025b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8025b82:	f107 031c 	add.w	r3, r7, #28
 8025b86:	4619      	mov	r1, r3
 8025b88:	4808      	ldr	r0, [pc, #32]	; (8025bac <HAL_TIM_MspPostInit+0x198>)
 8025b8a:	f001 ff85 	bl	8027a98 <HAL_GPIO_Init>
}
 8025b8e:	bf00      	nop
 8025b90:	3730      	adds	r7, #48	; 0x30
 8025b92:	46bd      	mov	sp, r7
 8025b94:	bd80      	pop	{r7, pc}
 8025b96:	bf00      	nop
 8025b98:	40010000 	.word	0x40010000
 8025b9c:	40023800 	.word	0x40023800
 8025ba0:	40020000 	.word	0x40020000
 8025ba4:	40000400 	.word	0x40000400
 8025ba8:	40020800 	.word	0x40020800
 8025bac:	40020400 	.word	0x40020400
 8025bb0:	40014800 	.word	0x40014800
 8025bb4:	40001800 	.word	0x40001800

08025bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8025bb8:	b480      	push	{r7}
 8025bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8025bbc:	e7fe      	b.n	8025bbc <NMI_Handler+0x4>

08025bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8025bbe:	b480      	push	{r7}
 8025bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8025bc2:	e7fe      	b.n	8025bc2 <HardFault_Handler+0x4>

08025bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8025bc4:	b480      	push	{r7}
 8025bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8025bc8:	e7fe      	b.n	8025bc8 <MemManage_Handler+0x4>

08025bca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8025bca:	b480      	push	{r7}
 8025bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8025bce:	e7fe      	b.n	8025bce <BusFault_Handler+0x4>

08025bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8025bd0:	b480      	push	{r7}
 8025bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8025bd4:	e7fe      	b.n	8025bd4 <UsageFault_Handler+0x4>

08025bd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8025bd6:	b480      	push	{r7}
 8025bd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8025bda:	bf00      	nop
 8025bdc:	46bd      	mov	sp, r7
 8025bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025be2:	4770      	bx	lr

08025be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8025be4:	b480      	push	{r7}
 8025be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8025be8:	bf00      	nop
 8025bea:	46bd      	mov	sp, r7
 8025bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025bf0:	4770      	bx	lr

08025bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8025bf2:	b480      	push	{r7}
 8025bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8025bf6:	bf00      	nop
 8025bf8:	46bd      	mov	sp, r7
 8025bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025bfe:	4770      	bx	lr

08025c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8025c00:	b580      	push	{r7, lr}
 8025c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8025c04:	f000 fbbc 	bl	8026380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8025c08:	bf00      	nop
 8025c0a:	bd80      	pop	{r7, pc}

08025c0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8025c0c:	b580      	push	{r7, lr}
 8025c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8025c10:	4802      	ldr	r0, [pc, #8]	; (8025c1c <TIM2_IRQHandler+0x10>)
 8025c12:	f003 fd6e 	bl	80296f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8025c16:	bf00      	nop
 8025c18:	bd80      	pop	{r7, pc}
 8025c1a:	bf00      	nop
 8025c1c:	20017540 	.word	0x20017540

08025c20 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8025c20:	b580      	push	{r7, lr}
 8025c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8025c24:	4802      	ldr	r0, [pc, #8]	; (8025c30 <TIM5_IRQHandler+0x10>)
 8025c26:	f003 fd64 	bl	80296f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8025c2a:	bf00      	nop
 8025c2c:	bd80      	pop	{r7, pc}
 8025c2e:	bf00      	nop
 8025c30:	20014290 	.word	0x20014290

08025c34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8025c34:	b580      	push	{r7, lr}
 8025c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8025c38:	4802      	ldr	r0, [pc, #8]	; (8025c44 <TIM6_DAC_IRQHandler+0x10>)
 8025c3a:	f003 fd5a 	bl	80296f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8025c3e:	bf00      	nop
 8025c40:	bd80      	pop	{r7, pc}
 8025c42:	bf00      	nop
 8025c44:	20014450 	.word	0x20014450

08025c48 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8025c48:	b580      	push	{r7, lr}
 8025c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8025c4c:	4802      	ldr	r0, [pc, #8]	; (8025c58 <TIM7_IRQHandler+0x10>)
 8025c4e:	f003 fd50 	bl	80296f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8025c52:	bf00      	nop
 8025c54:	bd80      	pop	{r7, pc}
 8025c56:	bf00      	nop
 8025c58:	200175c0 	.word	0x200175c0

08025c5c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8025c5c:	b580      	push	{r7, lr}
 8025c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8025c60:	4802      	ldr	r0, [pc, #8]	; (8025c6c <DMA2_Stream0_IRQHandler+0x10>)
 8025c62:	f001 f9db 	bl	802701c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8025c66:	bf00      	nop
 8025c68:	bd80      	pop	{r7, pc}
 8025c6a:	bf00      	nop
 8025c6c:	200143f0 	.word	0x200143f0

08025c70 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8025c70:	b480      	push	{r7}
 8025c72:	b083      	sub	sp, #12
 8025c74:	af00      	add	r7, sp, #0
 8025c76:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8025c78:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8025c7c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8025c80:	f003 0301 	and.w	r3, r3, #1
 8025c84:	2b00      	cmp	r3, #0
 8025c86:	d013      	beq.n	8025cb0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8025c88:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8025c8c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8025c90:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8025c94:	2b00      	cmp	r3, #0
 8025c96:	d00b      	beq.n	8025cb0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8025c98:	e000      	b.n	8025c9c <ITM_SendChar+0x2c>
    {
      __NOP();
 8025c9a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8025c9c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8025ca0:	681b      	ldr	r3, [r3, #0]
 8025ca2:	2b00      	cmp	r3, #0
 8025ca4:	d0f9      	beq.n	8025c9a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8025ca6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8025caa:	687a      	ldr	r2, [r7, #4]
 8025cac:	b2d2      	uxtb	r2, r2
 8025cae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8025cb0:	687b      	ldr	r3, [r7, #4]
}
 8025cb2:	4618      	mov	r0, r3
 8025cb4:	370c      	adds	r7, #12
 8025cb6:	46bd      	mov	sp, r7
 8025cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025cbc:	4770      	bx	lr

08025cbe <_write>:
#include "swo_setting.h"

int _write(int file, char *ptr, int len)
{
 8025cbe:	b580      	push	{r7, lr}
 8025cc0:	b086      	sub	sp, #24
 8025cc2:	af00      	add	r7, sp, #0
 8025cc4:	60f8      	str	r0, [r7, #12]
 8025cc6:	60b9      	str	r1, [r7, #8]
 8025cc8:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for(DataIdx = 0; DataIdx < len; DataIdx++)
 8025cca:	2300      	movs	r3, #0
 8025ccc:	617b      	str	r3, [r7, #20]
 8025cce:	e009      	b.n	8025ce4 <_write+0x26>
    {
        ITM_SendChar(*ptr++);
 8025cd0:	68bb      	ldr	r3, [r7, #8]
 8025cd2:	1c5a      	adds	r2, r3, #1
 8025cd4:	60ba      	str	r2, [r7, #8]
 8025cd6:	781b      	ldrb	r3, [r3, #0]
 8025cd8:	4618      	mov	r0, r3
 8025cda:	f7ff ffc9 	bl	8025c70 <ITM_SendChar>
    for(DataIdx = 0; DataIdx < len; DataIdx++)
 8025cde:	697b      	ldr	r3, [r7, #20]
 8025ce0:	3301      	adds	r3, #1
 8025ce2:	617b      	str	r3, [r7, #20]
 8025ce4:	697a      	ldr	r2, [r7, #20]
 8025ce6:	687b      	ldr	r3, [r7, #4]
 8025ce8:	429a      	cmp	r2, r3
 8025cea:	dbf1      	blt.n	8025cd0 <_write+0x12>
    }

    return len;
 8025cec:	687b      	ldr	r3, [r7, #4]
 8025cee:	4618      	mov	r0, r3
 8025cf0:	3718      	adds	r7, #24
 8025cf2:	46bd      	mov	sp, r7
 8025cf4:	bd80      	pop	{r7, pc}

08025cf6 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8025cf6:	b580      	push	{r7, lr}
 8025cf8:	b086      	sub	sp, #24
 8025cfa:	af00      	add	r7, sp, #0
 8025cfc:	60f8      	str	r0, [r7, #12]
 8025cfe:	60b9      	str	r1, [r7, #8]
 8025d00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8025d02:	2300      	movs	r3, #0
 8025d04:	617b      	str	r3, [r7, #20]
 8025d06:	e00a      	b.n	8025d1e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8025d08:	f3af 8000 	nop.w
 8025d0c:	4601      	mov	r1, r0
 8025d0e:	68bb      	ldr	r3, [r7, #8]
 8025d10:	1c5a      	adds	r2, r3, #1
 8025d12:	60ba      	str	r2, [r7, #8]
 8025d14:	b2ca      	uxtb	r2, r1
 8025d16:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8025d18:	697b      	ldr	r3, [r7, #20]
 8025d1a:	3301      	adds	r3, #1
 8025d1c:	617b      	str	r3, [r7, #20]
 8025d1e:	697a      	ldr	r2, [r7, #20]
 8025d20:	687b      	ldr	r3, [r7, #4]
 8025d22:	429a      	cmp	r2, r3
 8025d24:	dbf0      	blt.n	8025d08 <_read+0x12>
	}

return len;
 8025d26:	687b      	ldr	r3, [r7, #4]
}
 8025d28:	4618      	mov	r0, r3
 8025d2a:	3718      	adds	r7, #24
 8025d2c:	46bd      	mov	sp, r7
 8025d2e:	bd80      	pop	{r7, pc}

08025d30 <_close>:
	}
	return len;
}

int _close(int file)
{
 8025d30:	b480      	push	{r7}
 8025d32:	b083      	sub	sp, #12
 8025d34:	af00      	add	r7, sp, #0
 8025d36:	6078      	str	r0, [r7, #4]
	return -1;
 8025d38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8025d3c:	4618      	mov	r0, r3
 8025d3e:	370c      	adds	r7, #12
 8025d40:	46bd      	mov	sp, r7
 8025d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d46:	4770      	bx	lr

08025d48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8025d48:	b480      	push	{r7}
 8025d4a:	b083      	sub	sp, #12
 8025d4c:	af00      	add	r7, sp, #0
 8025d4e:	6078      	str	r0, [r7, #4]
 8025d50:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8025d52:	683b      	ldr	r3, [r7, #0]
 8025d54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8025d58:	605a      	str	r2, [r3, #4]
	return 0;
 8025d5a:	2300      	movs	r3, #0
}
 8025d5c:	4618      	mov	r0, r3
 8025d5e:	370c      	adds	r7, #12
 8025d60:	46bd      	mov	sp, r7
 8025d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d66:	4770      	bx	lr

08025d68 <_isatty>:

int _isatty(int file)
{
 8025d68:	b480      	push	{r7}
 8025d6a:	b083      	sub	sp, #12
 8025d6c:	af00      	add	r7, sp, #0
 8025d6e:	6078      	str	r0, [r7, #4]
	return 1;
 8025d70:	2301      	movs	r3, #1
}
 8025d72:	4618      	mov	r0, r3
 8025d74:	370c      	adds	r7, #12
 8025d76:	46bd      	mov	sp, r7
 8025d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d7c:	4770      	bx	lr

08025d7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8025d7e:	b480      	push	{r7}
 8025d80:	b085      	sub	sp, #20
 8025d82:	af00      	add	r7, sp, #0
 8025d84:	60f8      	str	r0, [r7, #12]
 8025d86:	60b9      	str	r1, [r7, #8]
 8025d88:	607a      	str	r2, [r7, #4]
	return 0;
 8025d8a:	2300      	movs	r3, #0
}
 8025d8c:	4618      	mov	r0, r3
 8025d8e:	3714      	adds	r7, #20
 8025d90:	46bd      	mov	sp, r7
 8025d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d96:	4770      	bx	lr

08025d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8025d98:	b580      	push	{r7, lr}
 8025d9a:	b086      	sub	sp, #24
 8025d9c:	af00      	add	r7, sp, #0
 8025d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8025da0:	4a14      	ldr	r2, [pc, #80]	; (8025df4 <_sbrk+0x5c>)
 8025da2:	4b15      	ldr	r3, [pc, #84]	; (8025df8 <_sbrk+0x60>)
 8025da4:	1ad3      	subs	r3, r2, r3
 8025da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8025da8:	697b      	ldr	r3, [r7, #20]
 8025daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8025dac:	4b13      	ldr	r3, [pc, #76]	; (8025dfc <_sbrk+0x64>)
 8025dae:	681b      	ldr	r3, [r3, #0]
 8025db0:	2b00      	cmp	r3, #0
 8025db2:	d102      	bne.n	8025dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8025db4:	4b11      	ldr	r3, [pc, #68]	; (8025dfc <_sbrk+0x64>)
 8025db6:	4a12      	ldr	r2, [pc, #72]	; (8025e00 <_sbrk+0x68>)
 8025db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8025dba:	4b10      	ldr	r3, [pc, #64]	; (8025dfc <_sbrk+0x64>)
 8025dbc:	681a      	ldr	r2, [r3, #0]
 8025dbe:	687b      	ldr	r3, [r7, #4]
 8025dc0:	4413      	add	r3, r2
 8025dc2:	693a      	ldr	r2, [r7, #16]
 8025dc4:	429a      	cmp	r2, r3
 8025dc6:	d207      	bcs.n	8025dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8025dc8:	f004 fb44 	bl	802a454 <__errno>
 8025dcc:	4602      	mov	r2, r0
 8025dce:	230c      	movs	r3, #12
 8025dd0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8025dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8025dd6:	e009      	b.n	8025dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8025dd8:	4b08      	ldr	r3, [pc, #32]	; (8025dfc <_sbrk+0x64>)
 8025dda:	681b      	ldr	r3, [r3, #0]
 8025ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8025dde:	4b07      	ldr	r3, [pc, #28]	; (8025dfc <_sbrk+0x64>)
 8025de0:	681a      	ldr	r2, [r3, #0]
 8025de2:	687b      	ldr	r3, [r7, #4]
 8025de4:	4413      	add	r3, r2
 8025de6:	4a05      	ldr	r2, [pc, #20]	; (8025dfc <_sbrk+0x64>)
 8025de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8025dea:	68fb      	ldr	r3, [r7, #12]
}
 8025dec:	4618      	mov	r0, r3
 8025dee:	3718      	adds	r7, #24
 8025df0:	46bd      	mov	sp, r7
 8025df2:	bd80      	pop	{r7, pc}
 8025df4:	20020000 	.word	0x20020000
 8025df8:	00000400 	.word	0x00000400
 8025dfc:	2000048c 	.word	0x2000048c
 8025e00:	20017628 	.word	0x20017628

08025e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8025e04:	b480      	push	{r7}
 8025e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8025e08:	4b08      	ldr	r3, [pc, #32]	; (8025e2c <SystemInit+0x28>)
 8025e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8025e0e:	4a07      	ldr	r2, [pc, #28]	; (8025e2c <SystemInit+0x28>)
 8025e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8025e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8025e18:	4b04      	ldr	r3, [pc, #16]	; (8025e2c <SystemInit+0x28>)
 8025e1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8025e1e:	609a      	str	r2, [r3, #8]
#endif
}
 8025e20:	bf00      	nop
 8025e22:	46bd      	mov	sp, r7
 8025e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e28:	4770      	bx	lr
 8025e2a:	bf00      	nop
 8025e2c:	e000ed00 	.word	0xe000ed00

08025e30 <_ZN15VelocityControlC1EP7Encoder>:
#include "velocity_control.hpp"
#include "declare_extern.h"

VelocityControl::VelocityControl(Encoder *encoder) : integral_error_(0)
 8025e30:	b480      	push	{r7}
 8025e32:	b083      	sub	sp, #12
 8025e34:	af00      	add	r7, sp, #0
 8025e36:	6078      	str	r0, [r7, #4]
 8025e38:	6039      	str	r1, [r7, #0]
 8025e3a:	687b      	ldr	r3, [r7, #4]
 8025e3c:	f04f 0200 	mov.w	r2, #0
 8025e40:	601a      	str	r2, [r3, #0]
{
    encoder_ = encoder;
 8025e42:	687b      	ldr	r3, [r7, #4]
 8025e44:	683a      	ldr	r2, [r7, #0]
 8025e46:	605a      	str	r2, [r3, #4]
}
 8025e48:	687b      	ldr	r3, [r7, #4]
 8025e4a:	4618      	mov	r0, r3
 8025e4c:	370c      	adds	r7, #12
 8025e4e:	46bd      	mov	sp, r7
 8025e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e54:	4770      	bx	lr

08025e56 <_ZN15VelocityControl16DeterminePidGainEf>:

float VelocityControl::DeterminePidGain(float target_velocity)
{
 8025e56:	b580      	push	{r7, lr}
 8025e58:	b086      	sub	sp, #24
 8025e5a:	af00      	add	r7, sp, #0
 8025e5c:	6078      	str	r0, [r7, #4]
 8025e5e:	ed87 0a00 	vstr	s0, [r7]
    float p_gain = 0, i_gain = 0, d_gain = 0;
 8025e62:	f04f 0300 	mov.w	r3, #0
 8025e66:	617b      	str	r3, [r7, #20]
 8025e68:	f04f 0300 	mov.w	r3, #0
 8025e6c:	613b      	str	r3, [r7, #16]
 8025e6e:	f04f 0300 	mov.w	r3, #0
 8025e72:	60fb      	str	r3, [r7, #12]

    if(target_velocity < MAX_VELOCITY)
 8025e74:	edd7 7a00 	vldr	s15, [r7]
 8025e78:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8025e7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8025e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025e84:	d509      	bpl.n	8025e9a <_ZN15VelocityControl16DeterminePidGainEf+0x44>
    {
        p_gain = VELOCITY_P_GAIN;
 8025e86:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8025e8a:	617b      	str	r3, [r7, #20]
        i_gain = VELOCITY_I_GAIN;
 8025e8c:	f04f 0300 	mov.w	r3, #0
 8025e90:	613b      	str	r3, [r7, #16]
        d_gain = VELOCITY_D_GAIN;
 8025e92:	f04f 0300 	mov.w	r3, #0
 8025e96:	60fb      	str	r3, [r7, #12]
 8025e98:	e008      	b.n	8025eac <_ZN15VelocityControl16DeterminePidGainEf+0x56>
    }
    else // Error handler
    {
        p_gain = 0;
 8025e9a:	f04f 0300 	mov.w	r3, #0
 8025e9e:	617b      	str	r3, [r7, #20]
        i_gain = 0;
 8025ea0:	f04f 0300 	mov.w	r3, #0
 8025ea4:	613b      	str	r3, [r7, #16]
        d_gain = 0;
 8025ea6:	f04f 0300 	mov.w	r3, #0
 8025eaa:	60fb      	str	r3, [r7, #12]
    }

    return PidControl(target_velocity, p_gain, i_gain, d_gain);
 8025eac:	edd7 1a03 	vldr	s3, [r7, #12]
 8025eb0:	ed97 1a04 	vldr	s2, [r7, #16]
 8025eb4:	edd7 0a05 	vldr	s1, [r7, #20]
 8025eb8:	ed97 0a00 	vldr	s0, [r7]
 8025ebc:	6878      	ldr	r0, [r7, #4]
 8025ebe:	f000 f807 	bl	8025ed0 <_ZN15VelocityControl10PidControlEffff>
 8025ec2:	eef0 7a40 	vmov.f32	s15, s0
}
 8025ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8025eca:	3718      	adds	r7, #24
 8025ecc:	46bd      	mov	sp, r7
 8025ece:	bd80      	pop	{r7, pc}

08025ed0 <_ZN15VelocityControl10PidControlEffff>:

float VelocityControl::PidControl(float target, float p_gain, float i_gain, float d_gain)
{
 8025ed0:	b5b0      	push	{r4, r5, r7, lr}
 8025ed2:	b08e      	sub	sp, #56	; 0x38
 8025ed4:	af00      	add	r7, sp, #0
 8025ed6:	6178      	str	r0, [r7, #20]
 8025ed8:	ed87 0a04 	vstr	s0, [r7, #16]
 8025edc:	edc7 0a03 	vstr	s1, [r7, #12]
 8025ee0:	ed87 1a02 	vstr	s2, [r7, #8]
 8025ee4:	edc7 1a01 	vstr	s3, [r7, #4]
    float current = encoder_->GetDistance() / TIM6_PERIOD; // [mm/ms]
 8025ee8:	697b      	ldr	r3, [r7, #20]
 8025eea:	685b      	ldr	r3, [r3, #4]
 8025eec:	4618      	mov	r0, r3
 8025eee:	f7fb f841 	bl	8020f74 <_ZN7Encoder11GetDistanceEv>
 8025ef2:	eef0 6a40 	vmov.f32	s13, s0
 8025ef6:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 8025efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8025efe:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    static float pre_filter = 0.0;
    float filter = pre_filter * (1.0 - VELOCITY_LPF_RATIO) + (current * VELOCITY_LPF_RATIO);
 8025f02:	4b71      	ldr	r3, [pc, #452]	; (80260c8 <_ZN15VelocityControl10PidControlEffff+0x1f8>)
 8025f04:	681b      	ldr	r3, [r3, #0]
 8025f06:	4618      	mov	r0, r3
 8025f08:	f7fa fa56 	bl	80203b8 <__aeabi_f2d>
 8025f0c:	a368      	add	r3, pc, #416	; (adr r3, 80260b0 <_ZN15VelocityControl10PidControlEffff+0x1e0>)
 8025f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f12:	f7fa faa9 	bl	8020468 <__aeabi_dmul>
 8025f16:	4603      	mov	r3, r0
 8025f18:	460c      	mov	r4, r1
 8025f1a:	4625      	mov	r5, r4
 8025f1c:	461c      	mov	r4, r3
 8025f1e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025f20:	f7fa fa4a 	bl	80203b8 <__aeabi_f2d>
 8025f24:	a364      	add	r3, pc, #400	; (adr r3, 80260b8 <_ZN15VelocityControl10PidControlEffff+0x1e8>)
 8025f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025f2a:	f7fa fa9d 	bl	8020468 <__aeabi_dmul>
 8025f2e:	4602      	mov	r2, r0
 8025f30:	460b      	mov	r3, r1
 8025f32:	4620      	mov	r0, r4
 8025f34:	4629      	mov	r1, r5
 8025f36:	f7fa f8e1 	bl	80200fc <__adddf3>
 8025f3a:	4603      	mov	r3, r0
 8025f3c:	460c      	mov	r4, r1
 8025f3e:	4618      	mov	r0, r3
 8025f40:	4621      	mov	r1, r4
 8025f42:	f7fa fd69 	bl	8020a18 <__aeabi_d2f>
 8025f46:	4603      	mov	r3, r0
 8025f48:	633b      	str	r3, [r7, #48]	; 0x30
    pre_filter = filter;
 8025f4a:	4a5f      	ldr	r2, [pc, #380]	; (80260c8 <_ZN15VelocityControl10PidControlEffff+0x1f8>)
 8025f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025f4e:	6013      	str	r3, [r2, #0]

    float error = target - filter;
 8025f50:	ed97 7a04 	vldr	s14, [r7, #16]
 8025f54:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8025f58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025f5c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    static float pre_error = error;
 8025f60:	4b5a      	ldr	r3, [pc, #360]	; (80260cc <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8025f62:	781b      	ldrb	r3, [r3, #0]
 8025f64:	f3bf 8f5b 	dmb	ish
 8025f68:	b2db      	uxtb	r3, r3
 8025f6a:	f003 0301 	and.w	r3, r3, #1
 8025f6e:	2b00      	cmp	r3, #0
 8025f70:	bf0c      	ite	eq
 8025f72:	2301      	moveq	r3, #1
 8025f74:	2300      	movne	r3, #0
 8025f76:	b2db      	uxtb	r3, r3
 8025f78:	2b00      	cmp	r3, #0
 8025f7a:	d010      	beq.n	8025f9e <_ZN15VelocityControl10PidControlEffff+0xce>
 8025f7c:	4853      	ldr	r0, [pc, #332]	; (80260cc <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8025f7e:	f004 fa59 	bl	802a434 <__cxa_guard_acquire>
 8025f82:	4603      	mov	r3, r0
 8025f84:	2b00      	cmp	r3, #0
 8025f86:	bf14      	ite	ne
 8025f88:	2301      	movne	r3, #1
 8025f8a:	2300      	moveq	r3, #0
 8025f8c:	b2db      	uxtb	r3, r3
 8025f8e:	2b00      	cmp	r3, #0
 8025f90:	d005      	beq.n	8025f9e <_ZN15VelocityControl10PidControlEffff+0xce>
 8025f92:	4a4f      	ldr	r2, [pc, #316]	; (80260d0 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8025f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025f96:	6013      	str	r3, [r2, #0]
 8025f98:	484c      	ldr	r0, [pc, #304]	; (80260cc <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8025f9a:	f004 fa57 	bl	802a44c <__cxa_guard_release>

    float differential_error = (error - pre_error) / TIM6_PERIOD_S;
 8025f9e:	4b4c      	ldr	r3, [pc, #304]	; (80260d0 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8025fa0:	edd3 7a00 	vldr	s15, [r3]
 8025fa4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8025fa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8025fac:	ee17 0a90 	vmov	r0, s15
 8025fb0:	f7fa fa02 	bl	80203b8 <__aeabi_f2d>
 8025fb4:	a342      	add	r3, pc, #264	; (adr r3, 80260c0 <_ZN15VelocityControl10PidControlEffff+0x1f0>)
 8025fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025fba:	f7fa fb7f 	bl	80206bc <__aeabi_ddiv>
 8025fbe:	4603      	mov	r3, r0
 8025fc0:	460c      	mov	r4, r1
 8025fc2:	4618      	mov	r0, r3
 8025fc4:	4621      	mov	r1, r4
 8025fc6:	f7fa fd27 	bl	8020a18 <__aeabi_d2f>
 8025fca:	4603      	mov	r3, r0
 8025fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    float integral_error = (error + pre_error) / 2.0 * TIM6_PERIOD_S;
 8025fce:	4b40      	ldr	r3, [pc, #256]	; (80260d0 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8025fd0:	ed93 7a00 	vldr	s14, [r3]
 8025fd4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8025fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8025fdc:	ee17 0a90 	vmov	r0, s15
 8025fe0:	f7fa f9ea 	bl	80203b8 <__aeabi_f2d>
 8025fe4:	f04f 0200 	mov.w	r2, #0
 8025fe8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8025fec:	f7fa fb66 	bl	80206bc <__aeabi_ddiv>
 8025ff0:	4603      	mov	r3, r0
 8025ff2:	460c      	mov	r4, r1
 8025ff4:	4618      	mov	r0, r3
 8025ff6:	4621      	mov	r1, r4
 8025ff8:	a331      	add	r3, pc, #196	; (adr r3, 80260c0 <_ZN15VelocityControl10PidControlEffff+0x1f0>)
 8025ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025ffe:	f7fa fa33 	bl	8020468 <__aeabi_dmul>
 8026002:	4603      	mov	r3, r0
 8026004:	460c      	mov	r4, r1
 8026006:	4618      	mov	r0, r3
 8026008:	4621      	mov	r1, r4
 802600a:	f7fa fd05 	bl	8020a18 <__aeabi_d2f>
 802600e:	4603      	mov	r3, r0
 8026010:	627b      	str	r3, [r7, #36]	; 0x24
    SetIntegralError(integral_error);
 8026012:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8026016:	6978      	ldr	r0, [r7, #20]
 8026018:	f000 f870 	bl	80260fc <_ZN15VelocityControl16SetIntegralErrorEf>
    pre_error = error;
 802601c:	4a2c      	ldr	r2, [pc, #176]	; (80260d0 <_ZN15VelocityControl10PidControlEffff+0x200>)
 802601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026020:	6013      	str	r3, [r2, #0]

    float p = p_gain * error;
 8026022:	ed97 7a03 	vldr	s14, [r7, #12]
 8026026:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 802602a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802602e:	edc7 7a08 	vstr	s15, [r7, #32]
    float d = d_gain * differential_error;
 8026032:	ed97 7a01 	vldr	s14, [r7, #4]
 8026036:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 802603a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802603e:	edc7 7a07 	vstr	s15, [r7, #28]
    float i = i_gain * integral_error_;
 8026042:	697b      	ldr	r3, [r7, #20]
 8026044:	edd3 7a00 	vldr	s15, [r3]
 8026048:	ed97 7a02 	vldr	s14, [r7, #8]
 802604c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8026050:	edc7 7a06 	vstr	s15, [r7, #24]

#ifdef DEBUG_MODE
    g_target_velocity  = target;
 8026054:	4a1f      	ldr	r2, [pc, #124]	; (80260d4 <_ZN15VelocityControl10PidControlEffff+0x204>)
 8026056:	693b      	ldr	r3, [r7, #16]
 8026058:	6013      	str	r3, [r2, #0]
    g_current_velocity = current;
 802605a:	4a1f      	ldr	r2, [pc, #124]	; (80260d8 <_ZN15VelocityControl10PidControlEffff+0x208>)
 802605c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802605e:	6013      	str	r3, [r2, #0]
    g_filter_velocity  = filter;
 8026060:	4a1e      	ldr	r2, [pc, #120]	; (80260dc <_ZN15VelocityControl10PidControlEffff+0x20c>)
 8026062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026064:	6013      	str	r3, [r2, #0]
    g_velocity_error   = error;
 8026066:	4a1e      	ldr	r2, [pc, #120]	; (80260e0 <_ZN15VelocityControl10PidControlEffff+0x210>)
 8026068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802606a:	6013      	str	r3, [r2, #0]
    g_velocity_p = p;       g_velocity_d = d;       g_velocity_i = i;
 802606c:	4a1d      	ldr	r2, [pc, #116]	; (80260e4 <_ZN15VelocityControl10PidControlEffff+0x214>)
 802606e:	6a3b      	ldr	r3, [r7, #32]
 8026070:	6013      	str	r3, [r2, #0]
 8026072:	4a1d      	ldr	r2, [pc, #116]	; (80260e8 <_ZN15VelocityControl10PidControlEffff+0x218>)
 8026074:	69fb      	ldr	r3, [r7, #28]
 8026076:	6013      	str	r3, [r2, #0]
 8026078:	4a1c      	ldr	r2, [pc, #112]	; (80260ec <_ZN15VelocityControl10PidControlEffff+0x21c>)
 802607a:	69bb      	ldr	r3, [r7, #24]
 802607c:	6013      	str	r3, [r2, #0]
    g_velocity_p_gain = p;  g_velocity_d_gain = p;  g_velocity_i_gain = p;
 802607e:	4a1c      	ldr	r2, [pc, #112]	; (80260f0 <_ZN15VelocityControl10PidControlEffff+0x220>)
 8026080:	6a3b      	ldr	r3, [r7, #32]
 8026082:	6013      	str	r3, [r2, #0]
 8026084:	4a1b      	ldr	r2, [pc, #108]	; (80260f4 <_ZN15VelocityControl10PidControlEffff+0x224>)
 8026086:	6a3b      	ldr	r3, [r7, #32]
 8026088:	6013      	str	r3, [r2, #0]
 802608a:	4a1b      	ldr	r2, [pc, #108]	; (80260f8 <_ZN15VelocityControl10PidControlEffff+0x228>)
 802608c:	6a3b      	ldr	r3, [r7, #32]
 802608e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    return p + d + i;
 8026090:	ed97 7a08 	vldr	s14, [r7, #32]
 8026094:	edd7 7a07 	vldr	s15, [r7, #28]
 8026098:	ee37 7a27 	vadd.f32	s14, s14, s15
 802609c:	edd7 7a06 	vldr	s15, [r7, #24]
 80260a0:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80260a4:	eeb0 0a67 	vmov.f32	s0, s15
 80260a8:	3738      	adds	r7, #56	; 0x38
 80260aa:	46bd      	mov	sp, r7
 80260ac:	bdb0      	pop	{r4, r5, r7, pc}
 80260ae:	bf00      	nop
 80260b0:	33333334 	.word	0x33333334
 80260b4:	3fd33333 	.word	0x3fd33333
 80260b8:	66666666 	.word	0x66666666
 80260bc:	3fe66666 	.word	0x3fe66666
 80260c0:	47ae147b 	.word	0x47ae147b
 80260c4:	3f547ae1 	.word	0x3f547ae1
 80260c8:	20000490 	.word	0x20000490
 80260cc:	20000498 	.word	0x20000498
 80260d0:	20000494 	.word	0x20000494
 80260d4:	20000444 	.word	0x20000444
 80260d8:	20000448 	.word	0x20000448
 80260dc:	2000044c 	.word	0x2000044c
 80260e0:	20000450 	.word	0x20000450
 80260e4:	20000454 	.word	0x20000454
 80260e8:	2000045c 	.word	0x2000045c
 80260ec:	20000458 	.word	0x20000458
 80260f0:	20000460 	.word	0x20000460
 80260f4:	20000468 	.word	0x20000468
 80260f8:	20000464 	.word	0x20000464

080260fc <_ZN15VelocityControl16SetIntegralErrorEf>:

void VelocityControl::SetIntegralError(float integral_error)
{
 80260fc:	b480      	push	{r7}
 80260fe:	b083      	sub	sp, #12
 8026100:	af00      	add	r7, sp, #0
 8026102:	6078      	str	r0, [r7, #4]
 8026104:	ed87 0a00 	vstr	s0, [r7]
    integral_error_ += integral_error;
 8026108:	687b      	ldr	r3, [r7, #4]
 802610a:	ed93 7a00 	vldr	s14, [r3]
 802610e:	edd7 7a00 	vldr	s15, [r7]
 8026112:	ee77 7a27 	vadd.f32	s15, s14, s15
 8026116:	687b      	ldr	r3, [r7, #4]
 8026118:	edc3 7a00 	vstr	s15, [r3]
}
 802611c:	bf00      	nop
 802611e:	370c      	adds	r7, #12
 8026120:	46bd      	mov	sp, r7
 8026122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026126:	4770      	bx	lr

08026128 <Init>:
    &velocity_control
);
#endif // TEST_MODE

void Init()
{
 8026128:	b580      	push	{r7, lr}
 802612a:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Init();
 802612c:	4802      	ldr	r0, [pc, #8]	; (8026138 <Init+0x10>)
 802612e:	f7fd ff89 	bl	8024044 <_ZN3Run4InitEv>
#else // TEST_MODE
    test.Init();
#endif // TEST_MODE
}
 8026132:	bf00      	nop
 8026134:	bd80      	pop	{r7, pc}
 8026136:	bf00      	nop
 8026138:	20011104 	.word	0x20011104

0802613c <InterruptTim7>:

void InterruptTim7()
{
 802613c:	b580      	push	{r7, lr}
 802613e:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Timer7();
 8026140:	4804      	ldr	r0, [pc, #16]	; (8026154 <InterruptTim7+0x18>)
 8026142:	f7fe f809 	bl	8024158 <_ZN3Run6Timer7Ev>
#else // TEST_MODE
    test.Timer7();
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim7++;
 8026146:	4b04      	ldr	r3, [pc, #16]	; (8026158 <InterruptTim7+0x1c>)
 8026148:	681b      	ldr	r3, [r3, #0]
 802614a:	3301      	adds	r3, #1
 802614c:	4a02      	ldr	r2, [pc, #8]	; (8026158 <InterruptTim7+0x1c>)
 802614e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8026150:	bf00      	nop
 8026152:	bd80      	pop	{r7, pc}
 8026154:	20011104 	.word	0x20011104
 8026158:	2000046c 	.word	0x2000046c

0802615c <InterruptTim6>:

void InterruptTim6()
{
 802615c:	b580      	push	{r7, lr}
 802615e:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.RunMode();
 8026160:	4804      	ldr	r0, [pc, #16]	; (8026174 <InterruptTim6+0x18>)
 8026162:	f7fe fa0d 	bl	8024580 <_ZN3Run7RunModeEv>
#else // TEST_MODE
    test.Timer6();
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim6++;
 8026166:	4b04      	ldr	r3, [pc, #16]	; (8026178 <InterruptTim6+0x1c>)
 8026168:	681b      	ldr	r3, [r3, #0]
 802616a:	3301      	adds	r3, #1
 802616c:	4a02      	ldr	r2, [pc, #8]	; (8026178 <InterruptTim6+0x1c>)
 802616e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8026170:	bf00      	nop
 8026172:	bd80      	pop	{r7, pc}
 8026174:	20011104 	.word	0x20011104
 8026178:	20000470 	.word	0x20000470

0802617c <InterruptTim2>:

void InterruptTim2()
{
 802617c:	b580      	push	{r7, lr}
 802617e:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Timer2();
 8026180:	4804      	ldr	r0, [pc, #16]	; (8026194 <InterruptTim2+0x18>)
 8026182:	f7fd fff7 	bl	8024174 <_ZN3Run6Timer2Ev>
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim2++;
 8026186:	4b04      	ldr	r3, [pc, #16]	; (8026198 <InterruptTim2+0x1c>)
 8026188:	681b      	ldr	r3, [r3, #0]
 802618a:	3301      	adds	r3, #1
 802618c:	4a02      	ldr	r2, [pc, #8]	; (8026198 <InterruptTim2+0x1c>)
 802618e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
 8026190:	bf00      	nop
 8026192:	bd80      	pop	{r7, pc}
 8026194:	20011104 	.word	0x20011104
 8026198:	20000474 	.word	0x20000474

0802619c <_Z41__static_initialization_and_destruction_0ii>:
 802619c:	b580      	push	{r7, lr}
 802619e:	b08c      	sub	sp, #48	; 0x30
 80261a0:	af0a      	add	r7, sp, #40	; 0x28
 80261a2:	6078      	str	r0, [r7, #4]
 80261a4:	6039      	str	r1, [r7, #0]
 80261a6:	687b      	ldr	r3, [r7, #4]
 80261a8:	2b01      	cmp	r3, #1
 80261aa:	d144      	bne.n	8026236 <_Z41__static_initialization_and_destruction_0ii+0x9a>
 80261ac:	683b      	ldr	r3, [r7, #0]
 80261ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80261b2:	4293      	cmp	r3, r2
 80261b4:	d13f      	bne.n	8026236 <_Z41__static_initialization_and_destruction_0ii+0x9a>
Encoder encoder;
 80261b6:	4822      	ldr	r0, [pc, #136]	; (8026240 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80261b8:	f7fa fdfe 	bl	8020db8 <_ZN7EncoderC1Ev>
Imu imu(&iim_42652);
 80261bc:	4921      	ldr	r1, [pc, #132]	; (8026244 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80261be:	4822      	ldr	r0, [pc, #136]	; (8026248 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80261c0:	f7fb fa92 	bl	80216e8 <_ZN3ImuC1EP8Iim42652>
Led led;
 80261c4:	4821      	ldr	r0, [pc, #132]	; (802624c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80261c6:	f7fb fb5e 	bl	8021886 <_ZN3LedC1Ev>
LineSensor line_sensor;
 80261ca:	4821      	ldr	r0, [pc, #132]	; (8026250 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80261cc:	f7fb fd13 	bl	8021bf6 <_ZN10LineSensorC1Ev>
LineTrace line_trace(&line_sensor);
 80261d0:	491f      	ldr	r1, [pc, #124]	; (8026250 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80261d2:	4820      	ldr	r0, [pc, #128]	; (8026254 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80261d4:	f7fc f83a 	bl	802224c <_ZN9LineTraceC1EP10LineSensor>
Print print(&flash);
 80261d8:	491f      	ldr	r1, [pc, #124]	; (8026258 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80261da:	4820      	ldr	r0, [pc, #128]	; (802625c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80261dc:	f7fd fdd6 	bl	8023d8c <_ZN5PrintC1EP5Flash>
SideSensor side_sensor;
 80261e0:	481f      	ldr	r0, [pc, #124]	; (8026260 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80261e2:	f7fe fe17 	bl	8024e14 <_ZN10SideSensorC1Ev>
VelocityControl velocity_control(&encoder);
 80261e6:	4916      	ldr	r1, [pc, #88]	; (8026240 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80261e8:	481e      	ldr	r0, [pc, #120]	; (8026264 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80261ea:	f7ff fe21 	bl	8025e30 <_ZN15VelocityControlC1EP7Encoder>
Logger logger(&encoder, &flash, &led, &imu, &side_sensor);
 80261ee:	4b1c      	ldr	r3, [pc, #112]	; (8026260 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80261f0:	9301      	str	r3, [sp, #4]
 80261f2:	4b15      	ldr	r3, [pc, #84]	; (8026248 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80261f4:	9300      	str	r3, [sp, #0]
 80261f6:	4b15      	ldr	r3, [pc, #84]	; (802624c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80261f8:	4a17      	ldr	r2, [pc, #92]	; (8026258 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80261fa:	4911      	ldr	r1, [pc, #68]	; (8026240 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80261fc:	481a      	ldr	r0, [pc, #104]	; (8026268 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 80261fe:	f7fc f97f 	bl	8022500 <_ZN6LoggerC1EP7EncoderP5FlashP3LedP3ImuP10SideSensor>
);
 8026202:	4b18      	ldr	r3, [pc, #96]	; (8026264 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8026204:	9309      	str	r3, [sp, #36]	; 0x24
 8026206:	4b16      	ldr	r3, [pc, #88]	; (8026260 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8026208:	9308      	str	r3, [sp, #32]
 802620a:	4b18      	ldr	r3, [pc, #96]	; (802626c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 802620c:	9307      	str	r3, [sp, #28]
 802620e:	4b13      	ldr	r3, [pc, #76]	; (802625c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8026210:	9306      	str	r3, [sp, #24]
 8026212:	4b17      	ldr	r3, [pc, #92]	; (8026270 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8026214:	9305      	str	r3, [sp, #20]
 8026216:	4b14      	ldr	r3, [pc, #80]	; (8026268 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8026218:	9304      	str	r3, [sp, #16]
 802621a:	4b0e      	ldr	r3, [pc, #56]	; (8026254 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802621c:	9303      	str	r3, [sp, #12]
 802621e:	4b0c      	ldr	r3, [pc, #48]	; (8026250 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8026220:	9302      	str	r3, [sp, #8]
 8026222:	4b0a      	ldr	r3, [pc, #40]	; (802624c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8026224:	9301      	str	r3, [sp, #4]
 8026226:	4b08      	ldr	r3, [pc, #32]	; (8026248 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8026228:	9300      	str	r3, [sp, #0]
 802622a:	4b06      	ldr	r3, [pc, #24]	; (8026244 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 802622c:	4a0a      	ldr	r2, [pc, #40]	; (8026258 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 802622e:	4904      	ldr	r1, [pc, #16]	; (8026240 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8026230:	4810      	ldr	r0, [pc, #64]	; (8026274 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8026232:	f7fd febd 	bl	8023fb0 <_ZN3RunC1EP7EncoderP5FlashP8Iim42652P3ImuP3LedP10LineSensorP9LineTraceP6LoggerP5MotorP5PrintP12RotarySwitchP10SideSensorP15VelocityControl>
 8026236:	bf00      	nop
 8026238:	3708      	adds	r7, #8
 802623a:	46bd      	mov	sp, r7
 802623c:	bd80      	pop	{r7, pc}
 802623e:	bf00      	nop
 8026240:	2000049c 	.word	0x2000049c
 8026244:	200004ac 	.word	0x200004ac
 8026248:	200004b0 	.word	0x200004b0
 802624c:	200004c0 	.word	0x200004c0
 8026250:	200004c4 	.word	0x200004c4
 8026254:	20000650 	.word	0x20000650
 8026258:	200004a8 	.word	0x200004a8
 802625c:	2000065c 	.word	0x2000065c
 8026260:	200110cc 	.word	0x200110cc
 8026264:	200110d4 	.word	0x200110d4
 8026268:	200110dc 	.word	0x200110dc
 802626c:	200110c8 	.word	0x200110c8
 8026270:	20000658 	.word	0x20000658
 8026274:	20011104 	.word	0x20011104

08026278 <_GLOBAL__sub_I_encoder>:
 8026278:	b580      	push	{r7, lr}
 802627a:	af00      	add	r7, sp, #0
 802627c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8026280:	2001      	movs	r0, #1
 8026282:	f7ff ff8b 	bl	802619c <_Z41__static_initialization_and_destruction_0ii>
 8026286:	bd80      	pop	{r7, pc}

08026288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8026288:	f8df d034 	ldr.w	sp, [pc, #52]	; 80262c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 802628c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 802628e:	e003      	b.n	8026298 <LoopCopyDataInit>

08026290 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8026290:	4b0c      	ldr	r3, [pc, #48]	; (80262c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8026292:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8026294:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8026296:	3104      	adds	r1, #4

08026298 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8026298:	480b      	ldr	r0, [pc, #44]	; (80262c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 802629a:	4b0c      	ldr	r3, [pc, #48]	; (80262cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 802629c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 802629e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80262a0:	d3f6      	bcc.n	8026290 <CopyDataInit>
  ldr  r2, =_sbss
 80262a2:	4a0b      	ldr	r2, [pc, #44]	; (80262d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80262a4:	e002      	b.n	80262ac <LoopFillZerobss>

080262a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80262a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80262a8:	f842 3b04 	str.w	r3, [r2], #4

080262ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80262ac:	4b09      	ldr	r3, [pc, #36]	; (80262d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80262ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80262b0:	d3f9      	bcc.n	80262a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80262b2:	f7ff fda7 	bl	8025e04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80262b6:	f004 f8d3 	bl	802a460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80262ba:	f7fc fdb9 	bl	8022e30 <main>
  bx  lr    
 80262be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80262c0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80262c4:	0802cfcc 	.word	0x0802cfcc
  ldr  r0, =_sdata
 80262c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80262cc:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 80262d0:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80262d4:	20017628 	.word	0x20017628

080262d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80262d8:	e7fe      	b.n	80262d8 <ADC_IRQHandler>
	...

080262dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80262dc:	b580      	push	{r7, lr}
 80262de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80262e0:	4b0e      	ldr	r3, [pc, #56]	; (802631c <HAL_Init+0x40>)
 80262e2:	681b      	ldr	r3, [r3, #0]
 80262e4:	4a0d      	ldr	r2, [pc, #52]	; (802631c <HAL_Init+0x40>)
 80262e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80262ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80262ec:	4b0b      	ldr	r3, [pc, #44]	; (802631c <HAL_Init+0x40>)
 80262ee:	681b      	ldr	r3, [r3, #0]
 80262f0:	4a0a      	ldr	r2, [pc, #40]	; (802631c <HAL_Init+0x40>)
 80262f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80262f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80262f8:	4b08      	ldr	r3, [pc, #32]	; (802631c <HAL_Init+0x40>)
 80262fa:	681b      	ldr	r3, [r3, #0]
 80262fc:	4a07      	ldr	r2, [pc, #28]	; (802631c <HAL_Init+0x40>)
 80262fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8026302:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8026304:	2003      	movs	r0, #3
 8026306:	f000 fd41 	bl	8026d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 802630a:	2001      	movs	r0, #1
 802630c:	f000 f808 	bl	8026320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8026310:	f7ff f8d2 	bl	80254b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8026314:	2300      	movs	r3, #0
}
 8026316:	4618      	mov	r0, r3
 8026318:	bd80      	pop	{r7, pc}
 802631a:	bf00      	nop
 802631c:	40023c00 	.word	0x40023c00

08026320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8026320:	b580      	push	{r7, lr}
 8026322:	b082      	sub	sp, #8
 8026324:	af00      	add	r7, sp, #0
 8026326:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8026328:	4b12      	ldr	r3, [pc, #72]	; (8026374 <HAL_InitTick+0x54>)
 802632a:	681a      	ldr	r2, [r3, #0]
 802632c:	4b12      	ldr	r3, [pc, #72]	; (8026378 <HAL_InitTick+0x58>)
 802632e:	781b      	ldrb	r3, [r3, #0]
 8026330:	4619      	mov	r1, r3
 8026332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8026336:	fbb3 f3f1 	udiv	r3, r3, r1
 802633a:	fbb2 f3f3 	udiv	r3, r2, r3
 802633e:	4618      	mov	r0, r3
 8026340:	f000 fd59 	bl	8026df6 <HAL_SYSTICK_Config>
 8026344:	4603      	mov	r3, r0
 8026346:	2b00      	cmp	r3, #0
 8026348:	d001      	beq.n	802634e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 802634a:	2301      	movs	r3, #1
 802634c:	e00e      	b.n	802636c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 802634e:	687b      	ldr	r3, [r7, #4]
 8026350:	2b0f      	cmp	r3, #15
 8026352:	d80a      	bhi.n	802636a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8026354:	2200      	movs	r2, #0
 8026356:	6879      	ldr	r1, [r7, #4]
 8026358:	f04f 30ff 	mov.w	r0, #4294967295
 802635c:	f000 fd21 	bl	8026da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8026360:	4a06      	ldr	r2, [pc, #24]	; (802637c <HAL_InitTick+0x5c>)
 8026362:	687b      	ldr	r3, [r7, #4]
 8026364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8026366:	2300      	movs	r3, #0
 8026368:	e000      	b.n	802636c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 802636a:	2301      	movs	r3, #1
}
 802636c:	4618      	mov	r0, r3
 802636e:	3708      	adds	r7, #8
 8026370:	46bd      	mov	sp, r7
 8026372:	bd80      	pop	{r7, pc}
 8026374:	20000004 	.word	0x20000004
 8026378:	2000000c 	.word	0x2000000c
 802637c:	20000008 	.word	0x20000008

08026380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8026380:	b480      	push	{r7}
 8026382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8026384:	4b06      	ldr	r3, [pc, #24]	; (80263a0 <HAL_IncTick+0x20>)
 8026386:	781b      	ldrb	r3, [r3, #0]
 8026388:	461a      	mov	r2, r3
 802638a:	4b06      	ldr	r3, [pc, #24]	; (80263a4 <HAL_IncTick+0x24>)
 802638c:	681b      	ldr	r3, [r3, #0]
 802638e:	4413      	add	r3, r2
 8026390:	4a04      	ldr	r2, [pc, #16]	; (80263a4 <HAL_IncTick+0x24>)
 8026392:	6013      	str	r3, [r2, #0]
}
 8026394:	bf00      	nop
 8026396:	46bd      	mov	sp, r7
 8026398:	f85d 7b04 	ldr.w	r7, [sp], #4
 802639c:	4770      	bx	lr
 802639e:	bf00      	nop
 80263a0:	2000000c 	.word	0x2000000c
 80263a4:	20017600 	.word	0x20017600

080263a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80263a8:	b480      	push	{r7}
 80263aa:	af00      	add	r7, sp, #0
  return uwTick;
 80263ac:	4b03      	ldr	r3, [pc, #12]	; (80263bc <HAL_GetTick+0x14>)
 80263ae:	681b      	ldr	r3, [r3, #0]
}
 80263b0:	4618      	mov	r0, r3
 80263b2:	46bd      	mov	sp, r7
 80263b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80263b8:	4770      	bx	lr
 80263ba:	bf00      	nop
 80263bc:	20017600 	.word	0x20017600

080263c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80263c0:	b580      	push	{r7, lr}
 80263c2:	b084      	sub	sp, #16
 80263c4:	af00      	add	r7, sp, #0
 80263c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80263c8:	f7ff ffee 	bl	80263a8 <HAL_GetTick>
 80263cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80263ce:	687b      	ldr	r3, [r7, #4]
 80263d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80263d2:	68fb      	ldr	r3, [r7, #12]
 80263d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80263d8:	d005      	beq.n	80263e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80263da:	4b09      	ldr	r3, [pc, #36]	; (8026400 <HAL_Delay+0x40>)
 80263dc:	781b      	ldrb	r3, [r3, #0]
 80263de:	461a      	mov	r2, r3
 80263e0:	68fb      	ldr	r3, [r7, #12]
 80263e2:	4413      	add	r3, r2
 80263e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80263e6:	bf00      	nop
 80263e8:	f7ff ffde 	bl	80263a8 <HAL_GetTick>
 80263ec:	4602      	mov	r2, r0
 80263ee:	68bb      	ldr	r3, [r7, #8]
 80263f0:	1ad3      	subs	r3, r2, r3
 80263f2:	68fa      	ldr	r2, [r7, #12]
 80263f4:	429a      	cmp	r2, r3
 80263f6:	d8f7      	bhi.n	80263e8 <HAL_Delay+0x28>
  {
  }
}
 80263f8:	bf00      	nop
 80263fa:	3710      	adds	r7, #16
 80263fc:	46bd      	mov	sp, r7
 80263fe:	bd80      	pop	{r7, pc}
 8026400:	2000000c 	.word	0x2000000c

08026404 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8026404:	b580      	push	{r7, lr}
 8026406:	b084      	sub	sp, #16
 8026408:	af00      	add	r7, sp, #0
 802640a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 802640c:	2300      	movs	r3, #0
 802640e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8026410:	687b      	ldr	r3, [r7, #4]
 8026412:	2b00      	cmp	r3, #0
 8026414:	d101      	bne.n	802641a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8026416:	2301      	movs	r3, #1
 8026418:	e033      	b.n	8026482 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 802641a:	687b      	ldr	r3, [r7, #4]
 802641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802641e:	2b00      	cmp	r3, #0
 8026420:	d109      	bne.n	8026436 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8026422:	6878      	ldr	r0, [r7, #4]
 8026424:	f7ff f870 	bl	8025508 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8026428:	687b      	ldr	r3, [r7, #4]
 802642a:	2200      	movs	r2, #0
 802642c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 802642e:	687b      	ldr	r3, [r7, #4]
 8026430:	2200      	movs	r2, #0
 8026432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8026436:	687b      	ldr	r3, [r7, #4]
 8026438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802643a:	f003 0310 	and.w	r3, r3, #16
 802643e:	2b00      	cmp	r3, #0
 8026440:	d118      	bne.n	8026474 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8026442:	687b      	ldr	r3, [r7, #4]
 8026444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026446:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 802644a:	f023 0302 	bic.w	r3, r3, #2
 802644e:	f043 0202 	orr.w	r2, r3, #2
 8026452:	687b      	ldr	r3, [r7, #4]
 8026454:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8026456:	6878      	ldr	r0, [r7, #4]
 8026458:	f000 fa4a 	bl	80268f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 802645c:	687b      	ldr	r3, [r7, #4]
 802645e:	2200      	movs	r2, #0
 8026460:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8026462:	687b      	ldr	r3, [r7, #4]
 8026464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026466:	f023 0303 	bic.w	r3, r3, #3
 802646a:	f043 0201 	orr.w	r2, r3, #1
 802646e:	687b      	ldr	r3, [r7, #4]
 8026470:	641a      	str	r2, [r3, #64]	; 0x40
 8026472:	e001      	b.n	8026478 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8026474:	2301      	movs	r3, #1
 8026476:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8026478:	687b      	ldr	r3, [r7, #4]
 802647a:	2200      	movs	r2, #0
 802647c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8026480:	7bfb      	ldrb	r3, [r7, #15]
}
 8026482:	4618      	mov	r0, r3
 8026484:	3710      	adds	r7, #16
 8026486:	46bd      	mov	sp, r7
 8026488:	bd80      	pop	{r7, pc}
	...

0802648c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 802648c:	b580      	push	{r7, lr}
 802648e:	b086      	sub	sp, #24
 8026490:	af00      	add	r7, sp, #0
 8026492:	60f8      	str	r0, [r7, #12]
 8026494:	60b9      	str	r1, [r7, #8]
 8026496:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8026498:	2300      	movs	r3, #0
 802649a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 802649c:	68fb      	ldr	r3, [r7, #12]
 802649e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80264a2:	2b01      	cmp	r3, #1
 80264a4:	d101      	bne.n	80264aa <HAL_ADC_Start_DMA+0x1e>
 80264a6:	2302      	movs	r3, #2
 80264a8:	e0cc      	b.n	8026644 <HAL_ADC_Start_DMA+0x1b8>
 80264aa:	68fb      	ldr	r3, [r7, #12]
 80264ac:	2201      	movs	r2, #1
 80264ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80264b2:	68fb      	ldr	r3, [r7, #12]
 80264b4:	681b      	ldr	r3, [r3, #0]
 80264b6:	689b      	ldr	r3, [r3, #8]
 80264b8:	f003 0301 	and.w	r3, r3, #1
 80264bc:	2b01      	cmp	r3, #1
 80264be:	d018      	beq.n	80264f2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80264c0:	68fb      	ldr	r3, [r7, #12]
 80264c2:	681b      	ldr	r3, [r3, #0]
 80264c4:	689a      	ldr	r2, [r3, #8]
 80264c6:	68fb      	ldr	r3, [r7, #12]
 80264c8:	681b      	ldr	r3, [r3, #0]
 80264ca:	f042 0201 	orr.w	r2, r2, #1
 80264ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80264d0:	4b5e      	ldr	r3, [pc, #376]	; (802664c <HAL_ADC_Start_DMA+0x1c0>)
 80264d2:	681b      	ldr	r3, [r3, #0]
 80264d4:	4a5e      	ldr	r2, [pc, #376]	; (8026650 <HAL_ADC_Start_DMA+0x1c4>)
 80264d6:	fba2 2303 	umull	r2, r3, r2, r3
 80264da:	0c9a      	lsrs	r2, r3, #18
 80264dc:	4613      	mov	r3, r2
 80264de:	005b      	lsls	r3, r3, #1
 80264e0:	4413      	add	r3, r2
 80264e2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80264e4:	e002      	b.n	80264ec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80264e6:	693b      	ldr	r3, [r7, #16]
 80264e8:	3b01      	subs	r3, #1
 80264ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80264ec:	693b      	ldr	r3, [r7, #16]
 80264ee:	2b00      	cmp	r3, #0
 80264f0:	d1f9      	bne.n	80264e6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80264f2:	68fb      	ldr	r3, [r7, #12]
 80264f4:	681b      	ldr	r3, [r3, #0]
 80264f6:	689b      	ldr	r3, [r3, #8]
 80264f8:	f003 0301 	and.w	r3, r3, #1
 80264fc:	2b01      	cmp	r3, #1
 80264fe:	f040 80a0 	bne.w	8026642 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8026502:	68fb      	ldr	r3, [r7, #12]
 8026504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026506:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 802650a:	f023 0301 	bic.w	r3, r3, #1
 802650e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8026512:	68fb      	ldr	r3, [r7, #12]
 8026514:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8026516:	68fb      	ldr	r3, [r7, #12]
 8026518:	681b      	ldr	r3, [r3, #0]
 802651a:	685b      	ldr	r3, [r3, #4]
 802651c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8026520:	2b00      	cmp	r3, #0
 8026522:	d007      	beq.n	8026534 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8026524:	68fb      	ldr	r3, [r7, #12]
 8026526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026528:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 802652c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8026530:	68fb      	ldr	r3, [r7, #12]
 8026532:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8026534:	68fb      	ldr	r3, [r7, #12]
 8026536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 802653c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8026540:	d106      	bne.n	8026550 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8026542:	68fb      	ldr	r3, [r7, #12]
 8026544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026546:	f023 0206 	bic.w	r2, r3, #6
 802654a:	68fb      	ldr	r3, [r7, #12]
 802654c:	645a      	str	r2, [r3, #68]	; 0x44
 802654e:	e002      	b.n	8026556 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8026550:	68fb      	ldr	r3, [r7, #12]
 8026552:	2200      	movs	r2, #0
 8026554:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8026556:	68fb      	ldr	r3, [r7, #12]
 8026558:	2200      	movs	r2, #0
 802655a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 802655e:	4b3d      	ldr	r3, [pc, #244]	; (8026654 <HAL_ADC_Start_DMA+0x1c8>)
 8026560:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8026562:	68fb      	ldr	r3, [r7, #12]
 8026564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026566:	4a3c      	ldr	r2, [pc, #240]	; (8026658 <HAL_ADC_Start_DMA+0x1cc>)
 8026568:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 802656a:	68fb      	ldr	r3, [r7, #12]
 802656c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802656e:	4a3b      	ldr	r2, [pc, #236]	; (802665c <HAL_ADC_Start_DMA+0x1d0>)
 8026570:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8026572:	68fb      	ldr	r3, [r7, #12]
 8026574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026576:	4a3a      	ldr	r2, [pc, #232]	; (8026660 <HAL_ADC_Start_DMA+0x1d4>)
 8026578:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 802657a:	68fb      	ldr	r3, [r7, #12]
 802657c:	681b      	ldr	r3, [r3, #0]
 802657e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8026582:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8026584:	68fb      	ldr	r3, [r7, #12]
 8026586:	681b      	ldr	r3, [r3, #0]
 8026588:	685a      	ldr	r2, [r3, #4]
 802658a:	68fb      	ldr	r3, [r7, #12]
 802658c:	681b      	ldr	r3, [r3, #0]
 802658e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8026592:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8026594:	68fb      	ldr	r3, [r7, #12]
 8026596:	681b      	ldr	r3, [r3, #0]
 8026598:	689a      	ldr	r2, [r3, #8]
 802659a:	68fb      	ldr	r3, [r7, #12]
 802659c:	681b      	ldr	r3, [r3, #0]
 802659e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80265a2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80265a4:	68fb      	ldr	r3, [r7, #12]
 80265a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80265a8:	68fb      	ldr	r3, [r7, #12]
 80265aa:	681b      	ldr	r3, [r3, #0]
 80265ac:	334c      	adds	r3, #76	; 0x4c
 80265ae:	4619      	mov	r1, r3
 80265b0:	68ba      	ldr	r2, [r7, #8]
 80265b2:	687b      	ldr	r3, [r7, #4]
 80265b4:	f000 fcda 	bl	8026f6c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80265b8:	697b      	ldr	r3, [r7, #20]
 80265ba:	685b      	ldr	r3, [r3, #4]
 80265bc:	f003 031f 	and.w	r3, r3, #31
 80265c0:	2b00      	cmp	r3, #0
 80265c2:	d12a      	bne.n	802661a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80265c4:	68fb      	ldr	r3, [r7, #12]
 80265c6:	681b      	ldr	r3, [r3, #0]
 80265c8:	4a26      	ldr	r2, [pc, #152]	; (8026664 <HAL_ADC_Start_DMA+0x1d8>)
 80265ca:	4293      	cmp	r3, r2
 80265cc:	d015      	beq.n	80265fa <HAL_ADC_Start_DMA+0x16e>
 80265ce:	68fb      	ldr	r3, [r7, #12]
 80265d0:	681b      	ldr	r3, [r3, #0]
 80265d2:	4a25      	ldr	r2, [pc, #148]	; (8026668 <HAL_ADC_Start_DMA+0x1dc>)
 80265d4:	4293      	cmp	r3, r2
 80265d6:	d105      	bne.n	80265e4 <HAL_ADC_Start_DMA+0x158>
 80265d8:	4b1e      	ldr	r3, [pc, #120]	; (8026654 <HAL_ADC_Start_DMA+0x1c8>)
 80265da:	685b      	ldr	r3, [r3, #4]
 80265dc:	f003 031f 	and.w	r3, r3, #31
 80265e0:	2b00      	cmp	r3, #0
 80265e2:	d00a      	beq.n	80265fa <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80265e4:	68fb      	ldr	r3, [r7, #12]
 80265e6:	681b      	ldr	r3, [r3, #0]
 80265e8:	4a20      	ldr	r2, [pc, #128]	; (802666c <HAL_ADC_Start_DMA+0x1e0>)
 80265ea:	4293      	cmp	r3, r2
 80265ec:	d129      	bne.n	8026642 <HAL_ADC_Start_DMA+0x1b6>
 80265ee:	4b19      	ldr	r3, [pc, #100]	; (8026654 <HAL_ADC_Start_DMA+0x1c8>)
 80265f0:	685b      	ldr	r3, [r3, #4]
 80265f2:	f003 031f 	and.w	r3, r3, #31
 80265f6:	2b0f      	cmp	r3, #15
 80265f8:	d823      	bhi.n	8026642 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80265fa:	68fb      	ldr	r3, [r7, #12]
 80265fc:	681b      	ldr	r3, [r3, #0]
 80265fe:	689b      	ldr	r3, [r3, #8]
 8026600:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8026604:	2b00      	cmp	r3, #0
 8026606:	d11c      	bne.n	8026642 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8026608:	68fb      	ldr	r3, [r7, #12]
 802660a:	681b      	ldr	r3, [r3, #0]
 802660c:	689a      	ldr	r2, [r3, #8]
 802660e:	68fb      	ldr	r3, [r7, #12]
 8026610:	681b      	ldr	r3, [r3, #0]
 8026612:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8026616:	609a      	str	r2, [r3, #8]
 8026618:	e013      	b.n	8026642 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 802661a:	68fb      	ldr	r3, [r7, #12]
 802661c:	681b      	ldr	r3, [r3, #0]
 802661e:	4a11      	ldr	r2, [pc, #68]	; (8026664 <HAL_ADC_Start_DMA+0x1d8>)
 8026620:	4293      	cmp	r3, r2
 8026622:	d10e      	bne.n	8026642 <HAL_ADC_Start_DMA+0x1b6>
 8026624:	68fb      	ldr	r3, [r7, #12]
 8026626:	681b      	ldr	r3, [r3, #0]
 8026628:	689b      	ldr	r3, [r3, #8]
 802662a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 802662e:	2b00      	cmp	r3, #0
 8026630:	d107      	bne.n	8026642 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8026632:	68fb      	ldr	r3, [r7, #12]
 8026634:	681b      	ldr	r3, [r3, #0]
 8026636:	689a      	ldr	r2, [r3, #8]
 8026638:	68fb      	ldr	r3, [r7, #12]
 802663a:	681b      	ldr	r3, [r3, #0]
 802663c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8026640:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8026642:	2300      	movs	r3, #0
}
 8026644:	4618      	mov	r0, r3
 8026646:	3718      	adds	r7, #24
 8026648:	46bd      	mov	sp, r7
 802664a:	bd80      	pop	{r7, pc}
 802664c:	20000004 	.word	0x20000004
 8026650:	431bde83 	.word	0x431bde83
 8026654:	40012300 	.word	0x40012300
 8026658:	08026ae9 	.word	0x08026ae9
 802665c:	08026ba3 	.word	0x08026ba3
 8026660:	08026bbf 	.word	0x08026bbf
 8026664:	40012000 	.word	0x40012000
 8026668:	40012100 	.word	0x40012100
 802666c:	40012200 	.word	0x40012200

08026670 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8026670:	b480      	push	{r7}
 8026672:	b083      	sub	sp, #12
 8026674:	af00      	add	r7, sp, #0
 8026676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8026678:	bf00      	nop
 802667a:	370c      	adds	r7, #12
 802667c:	46bd      	mov	sp, r7
 802667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026682:	4770      	bx	lr

08026684 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8026684:	b480      	push	{r7}
 8026686:	b083      	sub	sp, #12
 8026688:	af00      	add	r7, sp, #0
 802668a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 802668c:	bf00      	nop
 802668e:	370c      	adds	r7, #12
 8026690:	46bd      	mov	sp, r7
 8026692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026696:	4770      	bx	lr

08026698 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8026698:	b480      	push	{r7}
 802669a:	b083      	sub	sp, #12
 802669c:	af00      	add	r7, sp, #0
 802669e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80266a0:	bf00      	nop
 80266a2:	370c      	adds	r7, #12
 80266a4:	46bd      	mov	sp, r7
 80266a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266aa:	4770      	bx	lr

080266ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80266ac:	b480      	push	{r7}
 80266ae:	b085      	sub	sp, #20
 80266b0:	af00      	add	r7, sp, #0
 80266b2:	6078      	str	r0, [r7, #4]
 80266b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80266b6:	2300      	movs	r3, #0
 80266b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80266ba:	687b      	ldr	r3, [r7, #4]
 80266bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80266c0:	2b01      	cmp	r3, #1
 80266c2:	d101      	bne.n	80266c8 <HAL_ADC_ConfigChannel+0x1c>
 80266c4:	2302      	movs	r3, #2
 80266c6:	e105      	b.n	80268d4 <HAL_ADC_ConfigChannel+0x228>
 80266c8:	687b      	ldr	r3, [r7, #4]
 80266ca:	2201      	movs	r2, #1
 80266cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80266d0:	683b      	ldr	r3, [r7, #0]
 80266d2:	681b      	ldr	r3, [r3, #0]
 80266d4:	2b09      	cmp	r3, #9
 80266d6:	d925      	bls.n	8026724 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80266d8:	687b      	ldr	r3, [r7, #4]
 80266da:	681b      	ldr	r3, [r3, #0]
 80266dc:	68d9      	ldr	r1, [r3, #12]
 80266de:	683b      	ldr	r3, [r7, #0]
 80266e0:	681b      	ldr	r3, [r3, #0]
 80266e2:	b29b      	uxth	r3, r3
 80266e4:	461a      	mov	r2, r3
 80266e6:	4613      	mov	r3, r2
 80266e8:	005b      	lsls	r3, r3, #1
 80266ea:	4413      	add	r3, r2
 80266ec:	3b1e      	subs	r3, #30
 80266ee:	2207      	movs	r2, #7
 80266f0:	fa02 f303 	lsl.w	r3, r2, r3
 80266f4:	43da      	mvns	r2, r3
 80266f6:	687b      	ldr	r3, [r7, #4]
 80266f8:	681b      	ldr	r3, [r3, #0]
 80266fa:	400a      	ands	r2, r1
 80266fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80266fe:	687b      	ldr	r3, [r7, #4]
 8026700:	681b      	ldr	r3, [r3, #0]
 8026702:	68d9      	ldr	r1, [r3, #12]
 8026704:	683b      	ldr	r3, [r7, #0]
 8026706:	689a      	ldr	r2, [r3, #8]
 8026708:	683b      	ldr	r3, [r7, #0]
 802670a:	681b      	ldr	r3, [r3, #0]
 802670c:	b29b      	uxth	r3, r3
 802670e:	4618      	mov	r0, r3
 8026710:	4603      	mov	r3, r0
 8026712:	005b      	lsls	r3, r3, #1
 8026714:	4403      	add	r3, r0
 8026716:	3b1e      	subs	r3, #30
 8026718:	409a      	lsls	r2, r3
 802671a:	687b      	ldr	r3, [r7, #4]
 802671c:	681b      	ldr	r3, [r3, #0]
 802671e:	430a      	orrs	r2, r1
 8026720:	60da      	str	r2, [r3, #12]
 8026722:	e022      	b.n	802676a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8026724:	687b      	ldr	r3, [r7, #4]
 8026726:	681b      	ldr	r3, [r3, #0]
 8026728:	6919      	ldr	r1, [r3, #16]
 802672a:	683b      	ldr	r3, [r7, #0]
 802672c:	681b      	ldr	r3, [r3, #0]
 802672e:	b29b      	uxth	r3, r3
 8026730:	461a      	mov	r2, r3
 8026732:	4613      	mov	r3, r2
 8026734:	005b      	lsls	r3, r3, #1
 8026736:	4413      	add	r3, r2
 8026738:	2207      	movs	r2, #7
 802673a:	fa02 f303 	lsl.w	r3, r2, r3
 802673e:	43da      	mvns	r2, r3
 8026740:	687b      	ldr	r3, [r7, #4]
 8026742:	681b      	ldr	r3, [r3, #0]
 8026744:	400a      	ands	r2, r1
 8026746:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8026748:	687b      	ldr	r3, [r7, #4]
 802674a:	681b      	ldr	r3, [r3, #0]
 802674c:	6919      	ldr	r1, [r3, #16]
 802674e:	683b      	ldr	r3, [r7, #0]
 8026750:	689a      	ldr	r2, [r3, #8]
 8026752:	683b      	ldr	r3, [r7, #0]
 8026754:	681b      	ldr	r3, [r3, #0]
 8026756:	b29b      	uxth	r3, r3
 8026758:	4618      	mov	r0, r3
 802675a:	4603      	mov	r3, r0
 802675c:	005b      	lsls	r3, r3, #1
 802675e:	4403      	add	r3, r0
 8026760:	409a      	lsls	r2, r3
 8026762:	687b      	ldr	r3, [r7, #4]
 8026764:	681b      	ldr	r3, [r3, #0]
 8026766:	430a      	orrs	r2, r1
 8026768:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 802676a:	683b      	ldr	r3, [r7, #0]
 802676c:	685b      	ldr	r3, [r3, #4]
 802676e:	2b06      	cmp	r3, #6
 8026770:	d824      	bhi.n	80267bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8026772:	687b      	ldr	r3, [r7, #4]
 8026774:	681b      	ldr	r3, [r3, #0]
 8026776:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8026778:	683b      	ldr	r3, [r7, #0]
 802677a:	685a      	ldr	r2, [r3, #4]
 802677c:	4613      	mov	r3, r2
 802677e:	009b      	lsls	r3, r3, #2
 8026780:	4413      	add	r3, r2
 8026782:	3b05      	subs	r3, #5
 8026784:	221f      	movs	r2, #31
 8026786:	fa02 f303 	lsl.w	r3, r2, r3
 802678a:	43da      	mvns	r2, r3
 802678c:	687b      	ldr	r3, [r7, #4]
 802678e:	681b      	ldr	r3, [r3, #0]
 8026790:	400a      	ands	r2, r1
 8026792:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8026794:	687b      	ldr	r3, [r7, #4]
 8026796:	681b      	ldr	r3, [r3, #0]
 8026798:	6b59      	ldr	r1, [r3, #52]	; 0x34
 802679a:	683b      	ldr	r3, [r7, #0]
 802679c:	681b      	ldr	r3, [r3, #0]
 802679e:	b29b      	uxth	r3, r3
 80267a0:	4618      	mov	r0, r3
 80267a2:	683b      	ldr	r3, [r7, #0]
 80267a4:	685a      	ldr	r2, [r3, #4]
 80267a6:	4613      	mov	r3, r2
 80267a8:	009b      	lsls	r3, r3, #2
 80267aa:	4413      	add	r3, r2
 80267ac:	3b05      	subs	r3, #5
 80267ae:	fa00 f203 	lsl.w	r2, r0, r3
 80267b2:	687b      	ldr	r3, [r7, #4]
 80267b4:	681b      	ldr	r3, [r3, #0]
 80267b6:	430a      	orrs	r2, r1
 80267b8:	635a      	str	r2, [r3, #52]	; 0x34
 80267ba:	e04c      	b.n	8026856 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80267bc:	683b      	ldr	r3, [r7, #0]
 80267be:	685b      	ldr	r3, [r3, #4]
 80267c0:	2b0c      	cmp	r3, #12
 80267c2:	d824      	bhi.n	802680e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80267c4:	687b      	ldr	r3, [r7, #4]
 80267c6:	681b      	ldr	r3, [r3, #0]
 80267c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80267ca:	683b      	ldr	r3, [r7, #0]
 80267cc:	685a      	ldr	r2, [r3, #4]
 80267ce:	4613      	mov	r3, r2
 80267d0:	009b      	lsls	r3, r3, #2
 80267d2:	4413      	add	r3, r2
 80267d4:	3b23      	subs	r3, #35	; 0x23
 80267d6:	221f      	movs	r2, #31
 80267d8:	fa02 f303 	lsl.w	r3, r2, r3
 80267dc:	43da      	mvns	r2, r3
 80267de:	687b      	ldr	r3, [r7, #4]
 80267e0:	681b      	ldr	r3, [r3, #0]
 80267e2:	400a      	ands	r2, r1
 80267e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80267e6:	687b      	ldr	r3, [r7, #4]
 80267e8:	681b      	ldr	r3, [r3, #0]
 80267ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80267ec:	683b      	ldr	r3, [r7, #0]
 80267ee:	681b      	ldr	r3, [r3, #0]
 80267f0:	b29b      	uxth	r3, r3
 80267f2:	4618      	mov	r0, r3
 80267f4:	683b      	ldr	r3, [r7, #0]
 80267f6:	685a      	ldr	r2, [r3, #4]
 80267f8:	4613      	mov	r3, r2
 80267fa:	009b      	lsls	r3, r3, #2
 80267fc:	4413      	add	r3, r2
 80267fe:	3b23      	subs	r3, #35	; 0x23
 8026800:	fa00 f203 	lsl.w	r2, r0, r3
 8026804:	687b      	ldr	r3, [r7, #4]
 8026806:	681b      	ldr	r3, [r3, #0]
 8026808:	430a      	orrs	r2, r1
 802680a:	631a      	str	r2, [r3, #48]	; 0x30
 802680c:	e023      	b.n	8026856 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 802680e:	687b      	ldr	r3, [r7, #4]
 8026810:	681b      	ldr	r3, [r3, #0]
 8026812:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8026814:	683b      	ldr	r3, [r7, #0]
 8026816:	685a      	ldr	r2, [r3, #4]
 8026818:	4613      	mov	r3, r2
 802681a:	009b      	lsls	r3, r3, #2
 802681c:	4413      	add	r3, r2
 802681e:	3b41      	subs	r3, #65	; 0x41
 8026820:	221f      	movs	r2, #31
 8026822:	fa02 f303 	lsl.w	r3, r2, r3
 8026826:	43da      	mvns	r2, r3
 8026828:	687b      	ldr	r3, [r7, #4]
 802682a:	681b      	ldr	r3, [r3, #0]
 802682c:	400a      	ands	r2, r1
 802682e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8026830:	687b      	ldr	r3, [r7, #4]
 8026832:	681b      	ldr	r3, [r3, #0]
 8026834:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8026836:	683b      	ldr	r3, [r7, #0]
 8026838:	681b      	ldr	r3, [r3, #0]
 802683a:	b29b      	uxth	r3, r3
 802683c:	4618      	mov	r0, r3
 802683e:	683b      	ldr	r3, [r7, #0]
 8026840:	685a      	ldr	r2, [r3, #4]
 8026842:	4613      	mov	r3, r2
 8026844:	009b      	lsls	r3, r3, #2
 8026846:	4413      	add	r3, r2
 8026848:	3b41      	subs	r3, #65	; 0x41
 802684a:	fa00 f203 	lsl.w	r2, r0, r3
 802684e:	687b      	ldr	r3, [r7, #4]
 8026850:	681b      	ldr	r3, [r3, #0]
 8026852:	430a      	orrs	r2, r1
 8026854:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8026856:	4b22      	ldr	r3, [pc, #136]	; (80268e0 <HAL_ADC_ConfigChannel+0x234>)
 8026858:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 802685a:	687b      	ldr	r3, [r7, #4]
 802685c:	681b      	ldr	r3, [r3, #0]
 802685e:	4a21      	ldr	r2, [pc, #132]	; (80268e4 <HAL_ADC_ConfigChannel+0x238>)
 8026860:	4293      	cmp	r3, r2
 8026862:	d109      	bne.n	8026878 <HAL_ADC_ConfigChannel+0x1cc>
 8026864:	683b      	ldr	r3, [r7, #0]
 8026866:	681b      	ldr	r3, [r3, #0]
 8026868:	2b12      	cmp	r3, #18
 802686a:	d105      	bne.n	8026878 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 802686c:	68fb      	ldr	r3, [r7, #12]
 802686e:	685b      	ldr	r3, [r3, #4]
 8026870:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8026874:	68fb      	ldr	r3, [r7, #12]
 8026876:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8026878:	687b      	ldr	r3, [r7, #4]
 802687a:	681b      	ldr	r3, [r3, #0]
 802687c:	4a19      	ldr	r2, [pc, #100]	; (80268e4 <HAL_ADC_ConfigChannel+0x238>)
 802687e:	4293      	cmp	r3, r2
 8026880:	d123      	bne.n	80268ca <HAL_ADC_ConfigChannel+0x21e>
 8026882:	683b      	ldr	r3, [r7, #0]
 8026884:	681b      	ldr	r3, [r3, #0]
 8026886:	2b10      	cmp	r3, #16
 8026888:	d003      	beq.n	8026892 <HAL_ADC_ConfigChannel+0x1e6>
 802688a:	683b      	ldr	r3, [r7, #0]
 802688c:	681b      	ldr	r3, [r3, #0]
 802688e:	2b11      	cmp	r3, #17
 8026890:	d11b      	bne.n	80268ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8026892:	68fb      	ldr	r3, [r7, #12]
 8026894:	685b      	ldr	r3, [r3, #4]
 8026896:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 802689a:	68fb      	ldr	r3, [r7, #12]
 802689c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 802689e:	683b      	ldr	r3, [r7, #0]
 80268a0:	681b      	ldr	r3, [r3, #0]
 80268a2:	2b10      	cmp	r3, #16
 80268a4:	d111      	bne.n	80268ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80268a6:	4b10      	ldr	r3, [pc, #64]	; (80268e8 <HAL_ADC_ConfigChannel+0x23c>)
 80268a8:	681b      	ldr	r3, [r3, #0]
 80268aa:	4a10      	ldr	r2, [pc, #64]	; (80268ec <HAL_ADC_ConfigChannel+0x240>)
 80268ac:	fba2 2303 	umull	r2, r3, r2, r3
 80268b0:	0c9a      	lsrs	r2, r3, #18
 80268b2:	4613      	mov	r3, r2
 80268b4:	009b      	lsls	r3, r3, #2
 80268b6:	4413      	add	r3, r2
 80268b8:	005b      	lsls	r3, r3, #1
 80268ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80268bc:	e002      	b.n	80268c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80268be:	68bb      	ldr	r3, [r7, #8]
 80268c0:	3b01      	subs	r3, #1
 80268c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80268c4:	68bb      	ldr	r3, [r7, #8]
 80268c6:	2b00      	cmp	r3, #0
 80268c8:	d1f9      	bne.n	80268be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80268ca:	687b      	ldr	r3, [r7, #4]
 80268cc:	2200      	movs	r2, #0
 80268ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80268d2:	2300      	movs	r3, #0
}
 80268d4:	4618      	mov	r0, r3
 80268d6:	3714      	adds	r7, #20
 80268d8:	46bd      	mov	sp, r7
 80268da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80268de:	4770      	bx	lr
 80268e0:	40012300 	.word	0x40012300
 80268e4:	40012000 	.word	0x40012000
 80268e8:	20000004 	.word	0x20000004
 80268ec:	431bde83 	.word	0x431bde83

080268f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80268f0:	b480      	push	{r7}
 80268f2:	b085      	sub	sp, #20
 80268f4:	af00      	add	r7, sp, #0
 80268f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80268f8:	4b79      	ldr	r3, [pc, #484]	; (8026ae0 <ADC_Init+0x1f0>)
 80268fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80268fc:	68fb      	ldr	r3, [r7, #12]
 80268fe:	685b      	ldr	r3, [r3, #4]
 8026900:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8026904:	68fb      	ldr	r3, [r7, #12]
 8026906:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8026908:	68fb      	ldr	r3, [r7, #12]
 802690a:	685a      	ldr	r2, [r3, #4]
 802690c:	687b      	ldr	r3, [r7, #4]
 802690e:	685b      	ldr	r3, [r3, #4]
 8026910:	431a      	orrs	r2, r3
 8026912:	68fb      	ldr	r3, [r7, #12]
 8026914:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8026916:	687b      	ldr	r3, [r7, #4]
 8026918:	681b      	ldr	r3, [r3, #0]
 802691a:	685a      	ldr	r2, [r3, #4]
 802691c:	687b      	ldr	r3, [r7, #4]
 802691e:	681b      	ldr	r3, [r3, #0]
 8026920:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8026924:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8026926:	687b      	ldr	r3, [r7, #4]
 8026928:	681b      	ldr	r3, [r3, #0]
 802692a:	6859      	ldr	r1, [r3, #4]
 802692c:	687b      	ldr	r3, [r7, #4]
 802692e:	691b      	ldr	r3, [r3, #16]
 8026930:	021a      	lsls	r2, r3, #8
 8026932:	687b      	ldr	r3, [r7, #4]
 8026934:	681b      	ldr	r3, [r3, #0]
 8026936:	430a      	orrs	r2, r1
 8026938:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 802693a:	687b      	ldr	r3, [r7, #4]
 802693c:	681b      	ldr	r3, [r3, #0]
 802693e:	685a      	ldr	r2, [r3, #4]
 8026940:	687b      	ldr	r3, [r7, #4]
 8026942:	681b      	ldr	r3, [r3, #0]
 8026944:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8026948:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 802694a:	687b      	ldr	r3, [r7, #4]
 802694c:	681b      	ldr	r3, [r3, #0]
 802694e:	6859      	ldr	r1, [r3, #4]
 8026950:	687b      	ldr	r3, [r7, #4]
 8026952:	689a      	ldr	r2, [r3, #8]
 8026954:	687b      	ldr	r3, [r7, #4]
 8026956:	681b      	ldr	r3, [r3, #0]
 8026958:	430a      	orrs	r2, r1
 802695a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 802695c:	687b      	ldr	r3, [r7, #4]
 802695e:	681b      	ldr	r3, [r3, #0]
 8026960:	689a      	ldr	r2, [r3, #8]
 8026962:	687b      	ldr	r3, [r7, #4]
 8026964:	681b      	ldr	r3, [r3, #0]
 8026966:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802696a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 802696c:	687b      	ldr	r3, [r7, #4]
 802696e:	681b      	ldr	r3, [r3, #0]
 8026970:	6899      	ldr	r1, [r3, #8]
 8026972:	687b      	ldr	r3, [r7, #4]
 8026974:	68da      	ldr	r2, [r3, #12]
 8026976:	687b      	ldr	r3, [r7, #4]
 8026978:	681b      	ldr	r3, [r3, #0]
 802697a:	430a      	orrs	r2, r1
 802697c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 802697e:	687b      	ldr	r3, [r7, #4]
 8026980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026982:	4a58      	ldr	r2, [pc, #352]	; (8026ae4 <ADC_Init+0x1f4>)
 8026984:	4293      	cmp	r3, r2
 8026986:	d022      	beq.n	80269ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8026988:	687b      	ldr	r3, [r7, #4]
 802698a:	681b      	ldr	r3, [r3, #0]
 802698c:	689a      	ldr	r2, [r3, #8]
 802698e:	687b      	ldr	r3, [r7, #4]
 8026990:	681b      	ldr	r3, [r3, #0]
 8026992:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8026996:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8026998:	687b      	ldr	r3, [r7, #4]
 802699a:	681b      	ldr	r3, [r3, #0]
 802699c:	6899      	ldr	r1, [r3, #8]
 802699e:	687b      	ldr	r3, [r7, #4]
 80269a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80269a2:	687b      	ldr	r3, [r7, #4]
 80269a4:	681b      	ldr	r3, [r3, #0]
 80269a6:	430a      	orrs	r2, r1
 80269a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80269aa:	687b      	ldr	r3, [r7, #4]
 80269ac:	681b      	ldr	r3, [r3, #0]
 80269ae:	689a      	ldr	r2, [r3, #8]
 80269b0:	687b      	ldr	r3, [r7, #4]
 80269b2:	681b      	ldr	r3, [r3, #0]
 80269b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80269b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80269ba:	687b      	ldr	r3, [r7, #4]
 80269bc:	681b      	ldr	r3, [r3, #0]
 80269be:	6899      	ldr	r1, [r3, #8]
 80269c0:	687b      	ldr	r3, [r7, #4]
 80269c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80269c4:	687b      	ldr	r3, [r7, #4]
 80269c6:	681b      	ldr	r3, [r3, #0]
 80269c8:	430a      	orrs	r2, r1
 80269ca:	609a      	str	r2, [r3, #8]
 80269cc:	e00f      	b.n	80269ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80269ce:	687b      	ldr	r3, [r7, #4]
 80269d0:	681b      	ldr	r3, [r3, #0]
 80269d2:	689a      	ldr	r2, [r3, #8]
 80269d4:	687b      	ldr	r3, [r7, #4]
 80269d6:	681b      	ldr	r3, [r3, #0]
 80269d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80269dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80269de:	687b      	ldr	r3, [r7, #4]
 80269e0:	681b      	ldr	r3, [r3, #0]
 80269e2:	689a      	ldr	r2, [r3, #8]
 80269e4:	687b      	ldr	r3, [r7, #4]
 80269e6:	681b      	ldr	r3, [r3, #0]
 80269e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80269ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80269ee:	687b      	ldr	r3, [r7, #4]
 80269f0:	681b      	ldr	r3, [r3, #0]
 80269f2:	689a      	ldr	r2, [r3, #8]
 80269f4:	687b      	ldr	r3, [r7, #4]
 80269f6:	681b      	ldr	r3, [r3, #0]
 80269f8:	f022 0202 	bic.w	r2, r2, #2
 80269fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80269fe:	687b      	ldr	r3, [r7, #4]
 8026a00:	681b      	ldr	r3, [r3, #0]
 8026a02:	6899      	ldr	r1, [r3, #8]
 8026a04:	687b      	ldr	r3, [r7, #4]
 8026a06:	7e1b      	ldrb	r3, [r3, #24]
 8026a08:	005a      	lsls	r2, r3, #1
 8026a0a:	687b      	ldr	r3, [r7, #4]
 8026a0c:	681b      	ldr	r3, [r3, #0]
 8026a0e:	430a      	orrs	r2, r1
 8026a10:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8026a12:	687b      	ldr	r3, [r7, #4]
 8026a14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8026a18:	2b00      	cmp	r3, #0
 8026a1a:	d01b      	beq.n	8026a54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8026a1c:	687b      	ldr	r3, [r7, #4]
 8026a1e:	681b      	ldr	r3, [r3, #0]
 8026a20:	685a      	ldr	r2, [r3, #4]
 8026a22:	687b      	ldr	r3, [r7, #4]
 8026a24:	681b      	ldr	r3, [r3, #0]
 8026a26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8026a2a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8026a2c:	687b      	ldr	r3, [r7, #4]
 8026a2e:	681b      	ldr	r3, [r3, #0]
 8026a30:	685a      	ldr	r2, [r3, #4]
 8026a32:	687b      	ldr	r3, [r7, #4]
 8026a34:	681b      	ldr	r3, [r3, #0]
 8026a36:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8026a3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8026a3c:	687b      	ldr	r3, [r7, #4]
 8026a3e:	681b      	ldr	r3, [r3, #0]
 8026a40:	6859      	ldr	r1, [r3, #4]
 8026a42:	687b      	ldr	r3, [r7, #4]
 8026a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026a46:	3b01      	subs	r3, #1
 8026a48:	035a      	lsls	r2, r3, #13
 8026a4a:	687b      	ldr	r3, [r7, #4]
 8026a4c:	681b      	ldr	r3, [r3, #0]
 8026a4e:	430a      	orrs	r2, r1
 8026a50:	605a      	str	r2, [r3, #4]
 8026a52:	e007      	b.n	8026a64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8026a54:	687b      	ldr	r3, [r7, #4]
 8026a56:	681b      	ldr	r3, [r3, #0]
 8026a58:	685a      	ldr	r2, [r3, #4]
 8026a5a:	687b      	ldr	r3, [r7, #4]
 8026a5c:	681b      	ldr	r3, [r3, #0]
 8026a5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8026a62:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8026a64:	687b      	ldr	r3, [r7, #4]
 8026a66:	681b      	ldr	r3, [r3, #0]
 8026a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026a6a:	687b      	ldr	r3, [r7, #4]
 8026a6c:	681b      	ldr	r3, [r3, #0]
 8026a6e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8026a72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8026a74:	687b      	ldr	r3, [r7, #4]
 8026a76:	681b      	ldr	r3, [r3, #0]
 8026a78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8026a7a:	687b      	ldr	r3, [r7, #4]
 8026a7c:	69db      	ldr	r3, [r3, #28]
 8026a7e:	3b01      	subs	r3, #1
 8026a80:	051a      	lsls	r2, r3, #20
 8026a82:	687b      	ldr	r3, [r7, #4]
 8026a84:	681b      	ldr	r3, [r3, #0]
 8026a86:	430a      	orrs	r2, r1
 8026a88:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8026a8a:	687b      	ldr	r3, [r7, #4]
 8026a8c:	681b      	ldr	r3, [r3, #0]
 8026a8e:	689a      	ldr	r2, [r3, #8]
 8026a90:	687b      	ldr	r3, [r7, #4]
 8026a92:	681b      	ldr	r3, [r3, #0]
 8026a94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8026a98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8026a9a:	687b      	ldr	r3, [r7, #4]
 8026a9c:	681b      	ldr	r3, [r3, #0]
 8026a9e:	6899      	ldr	r1, [r3, #8]
 8026aa0:	687b      	ldr	r3, [r7, #4]
 8026aa2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8026aa6:	025a      	lsls	r2, r3, #9
 8026aa8:	687b      	ldr	r3, [r7, #4]
 8026aaa:	681b      	ldr	r3, [r3, #0]
 8026aac:	430a      	orrs	r2, r1
 8026aae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8026ab0:	687b      	ldr	r3, [r7, #4]
 8026ab2:	681b      	ldr	r3, [r3, #0]
 8026ab4:	689a      	ldr	r2, [r3, #8]
 8026ab6:	687b      	ldr	r3, [r7, #4]
 8026ab8:	681b      	ldr	r3, [r3, #0]
 8026aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8026abe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8026ac0:	687b      	ldr	r3, [r7, #4]
 8026ac2:	681b      	ldr	r3, [r3, #0]
 8026ac4:	6899      	ldr	r1, [r3, #8]
 8026ac6:	687b      	ldr	r3, [r7, #4]
 8026ac8:	695b      	ldr	r3, [r3, #20]
 8026aca:	029a      	lsls	r2, r3, #10
 8026acc:	687b      	ldr	r3, [r7, #4]
 8026ace:	681b      	ldr	r3, [r3, #0]
 8026ad0:	430a      	orrs	r2, r1
 8026ad2:	609a      	str	r2, [r3, #8]
}
 8026ad4:	bf00      	nop
 8026ad6:	3714      	adds	r7, #20
 8026ad8:	46bd      	mov	sp, r7
 8026ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ade:	4770      	bx	lr
 8026ae0:	40012300 	.word	0x40012300
 8026ae4:	0f000001 	.word	0x0f000001

08026ae8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8026ae8:	b580      	push	{r7, lr}
 8026aea:	b084      	sub	sp, #16
 8026aec:	af00      	add	r7, sp, #0
 8026aee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8026af0:	687b      	ldr	r3, [r7, #4]
 8026af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026af4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8026af6:	68fb      	ldr	r3, [r7, #12]
 8026af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026afa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8026afe:	2b00      	cmp	r3, #0
 8026b00:	d13c      	bne.n	8026b7c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8026b02:	68fb      	ldr	r3, [r7, #12]
 8026b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026b06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8026b0a:	68fb      	ldr	r3, [r7, #12]
 8026b0c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8026b0e:	68fb      	ldr	r3, [r7, #12]
 8026b10:	681b      	ldr	r3, [r3, #0]
 8026b12:	689b      	ldr	r3, [r3, #8]
 8026b14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8026b18:	2b00      	cmp	r3, #0
 8026b1a:	d12b      	bne.n	8026b74 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8026b1c:	68fb      	ldr	r3, [r7, #12]
 8026b1e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8026b20:	2b00      	cmp	r3, #0
 8026b22:	d127      	bne.n	8026b74 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8026b24:	68fb      	ldr	r3, [r7, #12]
 8026b26:	681b      	ldr	r3, [r3, #0]
 8026b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026b2a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8026b2e:	2b00      	cmp	r3, #0
 8026b30:	d006      	beq.n	8026b40 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8026b32:	68fb      	ldr	r3, [r7, #12]
 8026b34:	681b      	ldr	r3, [r3, #0]
 8026b36:	689b      	ldr	r3, [r3, #8]
 8026b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8026b3c:	2b00      	cmp	r3, #0
 8026b3e:	d119      	bne.n	8026b74 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8026b40:	68fb      	ldr	r3, [r7, #12]
 8026b42:	681b      	ldr	r3, [r3, #0]
 8026b44:	685a      	ldr	r2, [r3, #4]
 8026b46:	68fb      	ldr	r3, [r7, #12]
 8026b48:	681b      	ldr	r3, [r3, #0]
 8026b4a:	f022 0220 	bic.w	r2, r2, #32
 8026b4e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8026b50:	68fb      	ldr	r3, [r7, #12]
 8026b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026b54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8026b58:	68fb      	ldr	r3, [r7, #12]
 8026b5a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8026b5c:	68fb      	ldr	r3, [r7, #12]
 8026b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026b60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8026b64:	2b00      	cmp	r3, #0
 8026b66:	d105      	bne.n	8026b74 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8026b68:	68fb      	ldr	r3, [r7, #12]
 8026b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026b6c:	f043 0201 	orr.w	r2, r3, #1
 8026b70:	68fb      	ldr	r3, [r7, #12]
 8026b72:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8026b74:	68f8      	ldr	r0, [r7, #12]
 8026b76:	f7ff fd7b 	bl	8026670 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8026b7a:	e00e      	b.n	8026b9a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8026b7c:	68fb      	ldr	r3, [r7, #12]
 8026b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026b80:	f003 0310 	and.w	r3, r3, #16
 8026b84:	2b00      	cmp	r3, #0
 8026b86:	d003      	beq.n	8026b90 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8026b88:	68f8      	ldr	r0, [r7, #12]
 8026b8a:	f7ff fd85 	bl	8026698 <HAL_ADC_ErrorCallback>
}
 8026b8e:	e004      	b.n	8026b9a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8026b90:	68fb      	ldr	r3, [r7, #12]
 8026b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8026b96:	6878      	ldr	r0, [r7, #4]
 8026b98:	4798      	blx	r3
}
 8026b9a:	bf00      	nop
 8026b9c:	3710      	adds	r7, #16
 8026b9e:	46bd      	mov	sp, r7
 8026ba0:	bd80      	pop	{r7, pc}

08026ba2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8026ba2:	b580      	push	{r7, lr}
 8026ba4:	b084      	sub	sp, #16
 8026ba6:	af00      	add	r7, sp, #0
 8026ba8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8026baa:	687b      	ldr	r3, [r7, #4]
 8026bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026bae:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8026bb0:	68f8      	ldr	r0, [r7, #12]
 8026bb2:	f7ff fd67 	bl	8026684 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8026bb6:	bf00      	nop
 8026bb8:	3710      	adds	r7, #16
 8026bba:	46bd      	mov	sp, r7
 8026bbc:	bd80      	pop	{r7, pc}

08026bbe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8026bbe:	b580      	push	{r7, lr}
 8026bc0:	b084      	sub	sp, #16
 8026bc2:	af00      	add	r7, sp, #0
 8026bc4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8026bc6:	687b      	ldr	r3, [r7, #4]
 8026bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026bca:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8026bcc:	68fb      	ldr	r3, [r7, #12]
 8026bce:	2240      	movs	r2, #64	; 0x40
 8026bd0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8026bd2:	68fb      	ldr	r3, [r7, #12]
 8026bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026bd6:	f043 0204 	orr.w	r2, r3, #4
 8026bda:	68fb      	ldr	r3, [r7, #12]
 8026bdc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8026bde:	68f8      	ldr	r0, [r7, #12]
 8026be0:	f7ff fd5a 	bl	8026698 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8026be4:	bf00      	nop
 8026be6:	3710      	adds	r7, #16
 8026be8:	46bd      	mov	sp, r7
 8026bea:	bd80      	pop	{r7, pc}

08026bec <__NVIC_SetPriorityGrouping>:
{
 8026bec:	b480      	push	{r7}
 8026bee:	b085      	sub	sp, #20
 8026bf0:	af00      	add	r7, sp, #0
 8026bf2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8026bf4:	687b      	ldr	r3, [r7, #4]
 8026bf6:	f003 0307 	and.w	r3, r3, #7
 8026bfa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8026bfc:	4b0c      	ldr	r3, [pc, #48]	; (8026c30 <__NVIC_SetPriorityGrouping+0x44>)
 8026bfe:	68db      	ldr	r3, [r3, #12]
 8026c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8026c02:	68ba      	ldr	r2, [r7, #8]
 8026c04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8026c08:	4013      	ands	r3, r2
 8026c0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8026c0c:	68fb      	ldr	r3, [r7, #12]
 8026c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8026c10:	68bb      	ldr	r3, [r7, #8]
 8026c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8026c14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8026c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8026c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8026c1e:	4a04      	ldr	r2, [pc, #16]	; (8026c30 <__NVIC_SetPriorityGrouping+0x44>)
 8026c20:	68bb      	ldr	r3, [r7, #8]
 8026c22:	60d3      	str	r3, [r2, #12]
}
 8026c24:	bf00      	nop
 8026c26:	3714      	adds	r7, #20
 8026c28:	46bd      	mov	sp, r7
 8026c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c2e:	4770      	bx	lr
 8026c30:	e000ed00 	.word	0xe000ed00

08026c34 <__NVIC_GetPriorityGrouping>:
{
 8026c34:	b480      	push	{r7}
 8026c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8026c38:	4b04      	ldr	r3, [pc, #16]	; (8026c4c <__NVIC_GetPriorityGrouping+0x18>)
 8026c3a:	68db      	ldr	r3, [r3, #12]
 8026c3c:	0a1b      	lsrs	r3, r3, #8
 8026c3e:	f003 0307 	and.w	r3, r3, #7
}
 8026c42:	4618      	mov	r0, r3
 8026c44:	46bd      	mov	sp, r7
 8026c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c4a:	4770      	bx	lr
 8026c4c:	e000ed00 	.word	0xe000ed00

08026c50 <__NVIC_EnableIRQ>:
{
 8026c50:	b480      	push	{r7}
 8026c52:	b083      	sub	sp, #12
 8026c54:	af00      	add	r7, sp, #0
 8026c56:	4603      	mov	r3, r0
 8026c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8026c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026c5e:	2b00      	cmp	r3, #0
 8026c60:	db0b      	blt.n	8026c7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8026c62:	79fb      	ldrb	r3, [r7, #7]
 8026c64:	f003 021f 	and.w	r2, r3, #31
 8026c68:	4907      	ldr	r1, [pc, #28]	; (8026c88 <__NVIC_EnableIRQ+0x38>)
 8026c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026c6e:	095b      	lsrs	r3, r3, #5
 8026c70:	2001      	movs	r0, #1
 8026c72:	fa00 f202 	lsl.w	r2, r0, r2
 8026c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8026c7a:	bf00      	nop
 8026c7c:	370c      	adds	r7, #12
 8026c7e:	46bd      	mov	sp, r7
 8026c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c84:	4770      	bx	lr
 8026c86:	bf00      	nop
 8026c88:	e000e100 	.word	0xe000e100

08026c8c <__NVIC_SetPriority>:
{
 8026c8c:	b480      	push	{r7}
 8026c8e:	b083      	sub	sp, #12
 8026c90:	af00      	add	r7, sp, #0
 8026c92:	4603      	mov	r3, r0
 8026c94:	6039      	str	r1, [r7, #0]
 8026c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8026c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026c9c:	2b00      	cmp	r3, #0
 8026c9e:	db0a      	blt.n	8026cb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8026ca0:	683b      	ldr	r3, [r7, #0]
 8026ca2:	b2da      	uxtb	r2, r3
 8026ca4:	490c      	ldr	r1, [pc, #48]	; (8026cd8 <__NVIC_SetPriority+0x4c>)
 8026ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026caa:	0112      	lsls	r2, r2, #4
 8026cac:	b2d2      	uxtb	r2, r2
 8026cae:	440b      	add	r3, r1
 8026cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8026cb4:	e00a      	b.n	8026ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8026cb6:	683b      	ldr	r3, [r7, #0]
 8026cb8:	b2da      	uxtb	r2, r3
 8026cba:	4908      	ldr	r1, [pc, #32]	; (8026cdc <__NVIC_SetPriority+0x50>)
 8026cbc:	79fb      	ldrb	r3, [r7, #7]
 8026cbe:	f003 030f 	and.w	r3, r3, #15
 8026cc2:	3b04      	subs	r3, #4
 8026cc4:	0112      	lsls	r2, r2, #4
 8026cc6:	b2d2      	uxtb	r2, r2
 8026cc8:	440b      	add	r3, r1
 8026cca:	761a      	strb	r2, [r3, #24]
}
 8026ccc:	bf00      	nop
 8026cce:	370c      	adds	r7, #12
 8026cd0:	46bd      	mov	sp, r7
 8026cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026cd6:	4770      	bx	lr
 8026cd8:	e000e100 	.word	0xe000e100
 8026cdc:	e000ed00 	.word	0xe000ed00

08026ce0 <NVIC_EncodePriority>:
{
 8026ce0:	b480      	push	{r7}
 8026ce2:	b089      	sub	sp, #36	; 0x24
 8026ce4:	af00      	add	r7, sp, #0
 8026ce6:	60f8      	str	r0, [r7, #12]
 8026ce8:	60b9      	str	r1, [r7, #8]
 8026cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8026cec:	68fb      	ldr	r3, [r7, #12]
 8026cee:	f003 0307 	and.w	r3, r3, #7
 8026cf2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8026cf4:	69fb      	ldr	r3, [r7, #28]
 8026cf6:	f1c3 0307 	rsb	r3, r3, #7
 8026cfa:	2b04      	cmp	r3, #4
 8026cfc:	bf28      	it	cs
 8026cfe:	2304      	movcs	r3, #4
 8026d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8026d02:	69fb      	ldr	r3, [r7, #28]
 8026d04:	3304      	adds	r3, #4
 8026d06:	2b06      	cmp	r3, #6
 8026d08:	d902      	bls.n	8026d10 <NVIC_EncodePriority+0x30>
 8026d0a:	69fb      	ldr	r3, [r7, #28]
 8026d0c:	3b03      	subs	r3, #3
 8026d0e:	e000      	b.n	8026d12 <NVIC_EncodePriority+0x32>
 8026d10:	2300      	movs	r3, #0
 8026d12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8026d14:	f04f 32ff 	mov.w	r2, #4294967295
 8026d18:	69bb      	ldr	r3, [r7, #24]
 8026d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8026d1e:	43da      	mvns	r2, r3
 8026d20:	68bb      	ldr	r3, [r7, #8]
 8026d22:	401a      	ands	r2, r3
 8026d24:	697b      	ldr	r3, [r7, #20]
 8026d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8026d28:	f04f 31ff 	mov.w	r1, #4294967295
 8026d2c:	697b      	ldr	r3, [r7, #20]
 8026d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8026d32:	43d9      	mvns	r1, r3
 8026d34:	687b      	ldr	r3, [r7, #4]
 8026d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8026d38:	4313      	orrs	r3, r2
}
 8026d3a:	4618      	mov	r0, r3
 8026d3c:	3724      	adds	r7, #36	; 0x24
 8026d3e:	46bd      	mov	sp, r7
 8026d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d44:	4770      	bx	lr
	...

08026d48 <SysTick_Config>:
{
 8026d48:	b580      	push	{r7, lr}
 8026d4a:	b082      	sub	sp, #8
 8026d4c:	af00      	add	r7, sp, #0
 8026d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8026d50:	687b      	ldr	r3, [r7, #4]
 8026d52:	3b01      	subs	r3, #1
 8026d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8026d58:	d301      	bcc.n	8026d5e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8026d5a:	2301      	movs	r3, #1
 8026d5c:	e00f      	b.n	8026d7e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8026d5e:	4a0a      	ldr	r2, [pc, #40]	; (8026d88 <SysTick_Config+0x40>)
 8026d60:	687b      	ldr	r3, [r7, #4]
 8026d62:	3b01      	subs	r3, #1
 8026d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8026d66:	210f      	movs	r1, #15
 8026d68:	f04f 30ff 	mov.w	r0, #4294967295
 8026d6c:	f7ff ff8e 	bl	8026c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8026d70:	4b05      	ldr	r3, [pc, #20]	; (8026d88 <SysTick_Config+0x40>)
 8026d72:	2200      	movs	r2, #0
 8026d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8026d76:	4b04      	ldr	r3, [pc, #16]	; (8026d88 <SysTick_Config+0x40>)
 8026d78:	2207      	movs	r2, #7
 8026d7a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8026d7c:	2300      	movs	r3, #0
}
 8026d7e:	4618      	mov	r0, r3
 8026d80:	3708      	adds	r7, #8
 8026d82:	46bd      	mov	sp, r7
 8026d84:	bd80      	pop	{r7, pc}
 8026d86:	bf00      	nop
 8026d88:	e000e010 	.word	0xe000e010

08026d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8026d8c:	b580      	push	{r7, lr}
 8026d8e:	b082      	sub	sp, #8
 8026d90:	af00      	add	r7, sp, #0
 8026d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8026d94:	6878      	ldr	r0, [r7, #4]
 8026d96:	f7ff ff29 	bl	8026bec <__NVIC_SetPriorityGrouping>
}
 8026d9a:	bf00      	nop
 8026d9c:	3708      	adds	r7, #8
 8026d9e:	46bd      	mov	sp, r7
 8026da0:	bd80      	pop	{r7, pc}

08026da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8026da2:	b580      	push	{r7, lr}
 8026da4:	b086      	sub	sp, #24
 8026da6:	af00      	add	r7, sp, #0
 8026da8:	4603      	mov	r3, r0
 8026daa:	60b9      	str	r1, [r7, #8]
 8026dac:	607a      	str	r2, [r7, #4]
 8026dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8026db0:	2300      	movs	r3, #0
 8026db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8026db4:	f7ff ff3e 	bl	8026c34 <__NVIC_GetPriorityGrouping>
 8026db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8026dba:	687a      	ldr	r2, [r7, #4]
 8026dbc:	68b9      	ldr	r1, [r7, #8]
 8026dbe:	6978      	ldr	r0, [r7, #20]
 8026dc0:	f7ff ff8e 	bl	8026ce0 <NVIC_EncodePriority>
 8026dc4:	4602      	mov	r2, r0
 8026dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8026dca:	4611      	mov	r1, r2
 8026dcc:	4618      	mov	r0, r3
 8026dce:	f7ff ff5d 	bl	8026c8c <__NVIC_SetPriority>
}
 8026dd2:	bf00      	nop
 8026dd4:	3718      	adds	r7, #24
 8026dd6:	46bd      	mov	sp, r7
 8026dd8:	bd80      	pop	{r7, pc}

08026dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8026dda:	b580      	push	{r7, lr}
 8026ddc:	b082      	sub	sp, #8
 8026dde:	af00      	add	r7, sp, #0
 8026de0:	4603      	mov	r3, r0
 8026de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8026de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026de8:	4618      	mov	r0, r3
 8026dea:	f7ff ff31 	bl	8026c50 <__NVIC_EnableIRQ>
}
 8026dee:	bf00      	nop
 8026df0:	3708      	adds	r7, #8
 8026df2:	46bd      	mov	sp, r7
 8026df4:	bd80      	pop	{r7, pc}

08026df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8026df6:	b580      	push	{r7, lr}
 8026df8:	b082      	sub	sp, #8
 8026dfa:	af00      	add	r7, sp, #0
 8026dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8026dfe:	6878      	ldr	r0, [r7, #4]
 8026e00:	f7ff ffa2 	bl	8026d48 <SysTick_Config>
 8026e04:	4603      	mov	r3, r0
}
 8026e06:	4618      	mov	r0, r3
 8026e08:	3708      	adds	r7, #8
 8026e0a:	46bd      	mov	sp, r7
 8026e0c:	bd80      	pop	{r7, pc}
	...

08026e10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8026e10:	b580      	push	{r7, lr}
 8026e12:	b086      	sub	sp, #24
 8026e14:	af00      	add	r7, sp, #0
 8026e16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8026e18:	2300      	movs	r3, #0
 8026e1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8026e1c:	f7ff fac4 	bl	80263a8 <HAL_GetTick>
 8026e20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8026e22:	687b      	ldr	r3, [r7, #4]
 8026e24:	2b00      	cmp	r3, #0
 8026e26:	d101      	bne.n	8026e2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8026e28:	2301      	movs	r3, #1
 8026e2a:	e099      	b.n	8026f60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8026e2c:	687b      	ldr	r3, [r7, #4]
 8026e2e:	2200      	movs	r2, #0
 8026e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8026e34:	687b      	ldr	r3, [r7, #4]
 8026e36:	2202      	movs	r2, #2
 8026e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8026e3c:	687b      	ldr	r3, [r7, #4]
 8026e3e:	681b      	ldr	r3, [r3, #0]
 8026e40:	681a      	ldr	r2, [r3, #0]
 8026e42:	687b      	ldr	r3, [r7, #4]
 8026e44:	681b      	ldr	r3, [r3, #0]
 8026e46:	f022 0201 	bic.w	r2, r2, #1
 8026e4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8026e4c:	e00f      	b.n	8026e6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8026e4e:	f7ff faab 	bl	80263a8 <HAL_GetTick>
 8026e52:	4602      	mov	r2, r0
 8026e54:	693b      	ldr	r3, [r7, #16]
 8026e56:	1ad3      	subs	r3, r2, r3
 8026e58:	2b05      	cmp	r3, #5
 8026e5a:	d908      	bls.n	8026e6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8026e5c:	687b      	ldr	r3, [r7, #4]
 8026e5e:	2220      	movs	r2, #32
 8026e60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8026e62:	687b      	ldr	r3, [r7, #4]
 8026e64:	2203      	movs	r2, #3
 8026e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8026e6a:	2303      	movs	r3, #3
 8026e6c:	e078      	b.n	8026f60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8026e6e:	687b      	ldr	r3, [r7, #4]
 8026e70:	681b      	ldr	r3, [r3, #0]
 8026e72:	681b      	ldr	r3, [r3, #0]
 8026e74:	f003 0301 	and.w	r3, r3, #1
 8026e78:	2b00      	cmp	r3, #0
 8026e7a:	d1e8      	bne.n	8026e4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8026e7c:	687b      	ldr	r3, [r7, #4]
 8026e7e:	681b      	ldr	r3, [r3, #0]
 8026e80:	681b      	ldr	r3, [r3, #0]
 8026e82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8026e84:	697a      	ldr	r2, [r7, #20]
 8026e86:	4b38      	ldr	r3, [pc, #224]	; (8026f68 <HAL_DMA_Init+0x158>)
 8026e88:	4013      	ands	r3, r2
 8026e8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8026e8c:	687b      	ldr	r3, [r7, #4]
 8026e8e:	685a      	ldr	r2, [r3, #4]
 8026e90:	687b      	ldr	r3, [r7, #4]
 8026e92:	689b      	ldr	r3, [r3, #8]
 8026e94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8026e96:	687b      	ldr	r3, [r7, #4]
 8026e98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8026e9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8026e9c:	687b      	ldr	r3, [r7, #4]
 8026e9e:	691b      	ldr	r3, [r3, #16]
 8026ea0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8026ea2:	687b      	ldr	r3, [r7, #4]
 8026ea4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8026ea6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8026ea8:	687b      	ldr	r3, [r7, #4]
 8026eaa:	699b      	ldr	r3, [r3, #24]
 8026eac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8026eae:	687b      	ldr	r3, [r7, #4]
 8026eb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8026eb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8026eb4:	687b      	ldr	r3, [r7, #4]
 8026eb6:	6a1b      	ldr	r3, [r3, #32]
 8026eb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8026eba:	697a      	ldr	r2, [r7, #20]
 8026ebc:	4313      	orrs	r3, r2
 8026ebe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8026ec0:	687b      	ldr	r3, [r7, #4]
 8026ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026ec4:	2b04      	cmp	r3, #4
 8026ec6:	d107      	bne.n	8026ed8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8026ec8:	687b      	ldr	r3, [r7, #4]
 8026eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026ecc:	687b      	ldr	r3, [r7, #4]
 8026ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026ed0:	4313      	orrs	r3, r2
 8026ed2:	697a      	ldr	r2, [r7, #20]
 8026ed4:	4313      	orrs	r3, r2
 8026ed6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8026ed8:	687b      	ldr	r3, [r7, #4]
 8026eda:	681b      	ldr	r3, [r3, #0]
 8026edc:	697a      	ldr	r2, [r7, #20]
 8026ede:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8026ee0:	687b      	ldr	r3, [r7, #4]
 8026ee2:	681b      	ldr	r3, [r3, #0]
 8026ee4:	695b      	ldr	r3, [r3, #20]
 8026ee6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8026ee8:	697b      	ldr	r3, [r7, #20]
 8026eea:	f023 0307 	bic.w	r3, r3, #7
 8026eee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8026ef0:	687b      	ldr	r3, [r7, #4]
 8026ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026ef4:	697a      	ldr	r2, [r7, #20]
 8026ef6:	4313      	orrs	r3, r2
 8026ef8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8026efa:	687b      	ldr	r3, [r7, #4]
 8026efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026efe:	2b04      	cmp	r3, #4
 8026f00:	d117      	bne.n	8026f32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8026f02:	687b      	ldr	r3, [r7, #4]
 8026f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026f06:	697a      	ldr	r2, [r7, #20]
 8026f08:	4313      	orrs	r3, r2
 8026f0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8026f0c:	687b      	ldr	r3, [r7, #4]
 8026f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026f10:	2b00      	cmp	r3, #0
 8026f12:	d00e      	beq.n	8026f32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8026f14:	6878      	ldr	r0, [r7, #4]
 8026f16:	f000 fa6f 	bl	80273f8 <DMA_CheckFifoParam>
 8026f1a:	4603      	mov	r3, r0
 8026f1c:	2b00      	cmp	r3, #0
 8026f1e:	d008      	beq.n	8026f32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8026f20:	687b      	ldr	r3, [r7, #4]
 8026f22:	2240      	movs	r2, #64	; 0x40
 8026f24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8026f26:	687b      	ldr	r3, [r7, #4]
 8026f28:	2201      	movs	r2, #1
 8026f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8026f2e:	2301      	movs	r3, #1
 8026f30:	e016      	b.n	8026f60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8026f32:	687b      	ldr	r3, [r7, #4]
 8026f34:	681b      	ldr	r3, [r3, #0]
 8026f36:	697a      	ldr	r2, [r7, #20]
 8026f38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8026f3a:	6878      	ldr	r0, [r7, #4]
 8026f3c:	f000 fa26 	bl	802738c <DMA_CalcBaseAndBitshift>
 8026f40:	4603      	mov	r3, r0
 8026f42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8026f44:	687b      	ldr	r3, [r7, #4]
 8026f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026f48:	223f      	movs	r2, #63	; 0x3f
 8026f4a:	409a      	lsls	r2, r3
 8026f4c:	68fb      	ldr	r3, [r7, #12]
 8026f4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8026f50:	687b      	ldr	r3, [r7, #4]
 8026f52:	2200      	movs	r2, #0
 8026f54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8026f56:	687b      	ldr	r3, [r7, #4]
 8026f58:	2201      	movs	r2, #1
 8026f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8026f5e:	2300      	movs	r3, #0
}
 8026f60:	4618      	mov	r0, r3
 8026f62:	3718      	adds	r7, #24
 8026f64:	46bd      	mov	sp, r7
 8026f66:	bd80      	pop	{r7, pc}
 8026f68:	f010803f 	.word	0xf010803f

08026f6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8026f6c:	b580      	push	{r7, lr}
 8026f6e:	b086      	sub	sp, #24
 8026f70:	af00      	add	r7, sp, #0
 8026f72:	60f8      	str	r0, [r7, #12]
 8026f74:	60b9      	str	r1, [r7, #8]
 8026f76:	607a      	str	r2, [r7, #4]
 8026f78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8026f7a:	2300      	movs	r3, #0
 8026f7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8026f7e:	68fb      	ldr	r3, [r7, #12]
 8026f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8026f82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8026f84:	68fb      	ldr	r3, [r7, #12]
 8026f86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8026f8a:	2b01      	cmp	r3, #1
 8026f8c:	d101      	bne.n	8026f92 <HAL_DMA_Start_IT+0x26>
 8026f8e:	2302      	movs	r3, #2
 8026f90:	e040      	b.n	8027014 <HAL_DMA_Start_IT+0xa8>
 8026f92:	68fb      	ldr	r3, [r7, #12]
 8026f94:	2201      	movs	r2, #1
 8026f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8026f9a:	68fb      	ldr	r3, [r7, #12]
 8026f9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8026fa0:	b2db      	uxtb	r3, r3
 8026fa2:	2b01      	cmp	r3, #1
 8026fa4:	d12f      	bne.n	8027006 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8026fa6:	68fb      	ldr	r3, [r7, #12]
 8026fa8:	2202      	movs	r2, #2
 8026faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8026fae:	68fb      	ldr	r3, [r7, #12]
 8026fb0:	2200      	movs	r2, #0
 8026fb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8026fb4:	683b      	ldr	r3, [r7, #0]
 8026fb6:	687a      	ldr	r2, [r7, #4]
 8026fb8:	68b9      	ldr	r1, [r7, #8]
 8026fba:	68f8      	ldr	r0, [r7, #12]
 8026fbc:	f000 f9b8 	bl	8027330 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8026fc0:	68fb      	ldr	r3, [r7, #12]
 8026fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8026fc4:	223f      	movs	r2, #63	; 0x3f
 8026fc6:	409a      	lsls	r2, r3
 8026fc8:	693b      	ldr	r3, [r7, #16]
 8026fca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8026fcc:	68fb      	ldr	r3, [r7, #12]
 8026fce:	681b      	ldr	r3, [r3, #0]
 8026fd0:	681a      	ldr	r2, [r3, #0]
 8026fd2:	68fb      	ldr	r3, [r7, #12]
 8026fd4:	681b      	ldr	r3, [r3, #0]
 8026fd6:	f042 0216 	orr.w	r2, r2, #22
 8026fda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8026fdc:	68fb      	ldr	r3, [r7, #12]
 8026fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026fe0:	2b00      	cmp	r3, #0
 8026fe2:	d007      	beq.n	8026ff4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8026fe4:	68fb      	ldr	r3, [r7, #12]
 8026fe6:	681b      	ldr	r3, [r3, #0]
 8026fe8:	681a      	ldr	r2, [r3, #0]
 8026fea:	68fb      	ldr	r3, [r7, #12]
 8026fec:	681b      	ldr	r3, [r3, #0]
 8026fee:	f042 0208 	orr.w	r2, r2, #8
 8026ff2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8026ff4:	68fb      	ldr	r3, [r7, #12]
 8026ff6:	681b      	ldr	r3, [r3, #0]
 8026ff8:	681a      	ldr	r2, [r3, #0]
 8026ffa:	68fb      	ldr	r3, [r7, #12]
 8026ffc:	681b      	ldr	r3, [r3, #0]
 8026ffe:	f042 0201 	orr.w	r2, r2, #1
 8027002:	601a      	str	r2, [r3, #0]
 8027004:	e005      	b.n	8027012 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8027006:	68fb      	ldr	r3, [r7, #12]
 8027008:	2200      	movs	r2, #0
 802700a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 802700e:	2302      	movs	r3, #2
 8027010:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8027012:	7dfb      	ldrb	r3, [r7, #23]
}
 8027014:	4618      	mov	r0, r3
 8027016:	3718      	adds	r7, #24
 8027018:	46bd      	mov	sp, r7
 802701a:	bd80      	pop	{r7, pc}

0802701c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 802701c:	b580      	push	{r7, lr}
 802701e:	b086      	sub	sp, #24
 8027020:	af00      	add	r7, sp, #0
 8027022:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8027024:	2300      	movs	r3, #0
 8027026:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8027028:	4b92      	ldr	r3, [pc, #584]	; (8027274 <HAL_DMA_IRQHandler+0x258>)
 802702a:	681b      	ldr	r3, [r3, #0]
 802702c:	4a92      	ldr	r2, [pc, #584]	; (8027278 <HAL_DMA_IRQHandler+0x25c>)
 802702e:	fba2 2303 	umull	r2, r3, r2, r3
 8027032:	0a9b      	lsrs	r3, r3, #10
 8027034:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8027036:	687b      	ldr	r3, [r7, #4]
 8027038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802703a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 802703c:	693b      	ldr	r3, [r7, #16]
 802703e:	681b      	ldr	r3, [r3, #0]
 8027040:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8027042:	687b      	ldr	r3, [r7, #4]
 8027044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027046:	2208      	movs	r2, #8
 8027048:	409a      	lsls	r2, r3
 802704a:	68fb      	ldr	r3, [r7, #12]
 802704c:	4013      	ands	r3, r2
 802704e:	2b00      	cmp	r3, #0
 8027050:	d01a      	beq.n	8027088 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8027052:	687b      	ldr	r3, [r7, #4]
 8027054:	681b      	ldr	r3, [r3, #0]
 8027056:	681b      	ldr	r3, [r3, #0]
 8027058:	f003 0304 	and.w	r3, r3, #4
 802705c:	2b00      	cmp	r3, #0
 802705e:	d013      	beq.n	8027088 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8027060:	687b      	ldr	r3, [r7, #4]
 8027062:	681b      	ldr	r3, [r3, #0]
 8027064:	681a      	ldr	r2, [r3, #0]
 8027066:	687b      	ldr	r3, [r7, #4]
 8027068:	681b      	ldr	r3, [r3, #0]
 802706a:	f022 0204 	bic.w	r2, r2, #4
 802706e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8027070:	687b      	ldr	r3, [r7, #4]
 8027072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027074:	2208      	movs	r2, #8
 8027076:	409a      	lsls	r2, r3
 8027078:	693b      	ldr	r3, [r7, #16]
 802707a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 802707c:	687b      	ldr	r3, [r7, #4]
 802707e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027080:	f043 0201 	orr.w	r2, r3, #1
 8027084:	687b      	ldr	r3, [r7, #4]
 8027086:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8027088:	687b      	ldr	r3, [r7, #4]
 802708a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802708c:	2201      	movs	r2, #1
 802708e:	409a      	lsls	r2, r3
 8027090:	68fb      	ldr	r3, [r7, #12]
 8027092:	4013      	ands	r3, r2
 8027094:	2b00      	cmp	r3, #0
 8027096:	d012      	beq.n	80270be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8027098:	687b      	ldr	r3, [r7, #4]
 802709a:	681b      	ldr	r3, [r3, #0]
 802709c:	695b      	ldr	r3, [r3, #20]
 802709e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80270a2:	2b00      	cmp	r3, #0
 80270a4:	d00b      	beq.n	80270be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80270a6:	687b      	ldr	r3, [r7, #4]
 80270a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80270aa:	2201      	movs	r2, #1
 80270ac:	409a      	lsls	r2, r3
 80270ae:	693b      	ldr	r3, [r7, #16]
 80270b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80270b2:	687b      	ldr	r3, [r7, #4]
 80270b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80270b6:	f043 0202 	orr.w	r2, r3, #2
 80270ba:	687b      	ldr	r3, [r7, #4]
 80270bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80270be:	687b      	ldr	r3, [r7, #4]
 80270c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80270c2:	2204      	movs	r2, #4
 80270c4:	409a      	lsls	r2, r3
 80270c6:	68fb      	ldr	r3, [r7, #12]
 80270c8:	4013      	ands	r3, r2
 80270ca:	2b00      	cmp	r3, #0
 80270cc:	d012      	beq.n	80270f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80270ce:	687b      	ldr	r3, [r7, #4]
 80270d0:	681b      	ldr	r3, [r3, #0]
 80270d2:	681b      	ldr	r3, [r3, #0]
 80270d4:	f003 0302 	and.w	r3, r3, #2
 80270d8:	2b00      	cmp	r3, #0
 80270da:	d00b      	beq.n	80270f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80270dc:	687b      	ldr	r3, [r7, #4]
 80270de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80270e0:	2204      	movs	r2, #4
 80270e2:	409a      	lsls	r2, r3
 80270e4:	693b      	ldr	r3, [r7, #16]
 80270e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80270e8:	687b      	ldr	r3, [r7, #4]
 80270ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80270ec:	f043 0204 	orr.w	r2, r3, #4
 80270f0:	687b      	ldr	r3, [r7, #4]
 80270f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80270f4:	687b      	ldr	r3, [r7, #4]
 80270f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80270f8:	2210      	movs	r2, #16
 80270fa:	409a      	lsls	r2, r3
 80270fc:	68fb      	ldr	r3, [r7, #12]
 80270fe:	4013      	ands	r3, r2
 8027100:	2b00      	cmp	r3, #0
 8027102:	d043      	beq.n	802718c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8027104:	687b      	ldr	r3, [r7, #4]
 8027106:	681b      	ldr	r3, [r3, #0]
 8027108:	681b      	ldr	r3, [r3, #0]
 802710a:	f003 0308 	and.w	r3, r3, #8
 802710e:	2b00      	cmp	r3, #0
 8027110:	d03c      	beq.n	802718c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8027112:	687b      	ldr	r3, [r7, #4]
 8027114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027116:	2210      	movs	r2, #16
 8027118:	409a      	lsls	r2, r3
 802711a:	693b      	ldr	r3, [r7, #16]
 802711c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 802711e:	687b      	ldr	r3, [r7, #4]
 8027120:	681b      	ldr	r3, [r3, #0]
 8027122:	681b      	ldr	r3, [r3, #0]
 8027124:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8027128:	2b00      	cmp	r3, #0
 802712a:	d018      	beq.n	802715e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 802712c:	687b      	ldr	r3, [r7, #4]
 802712e:	681b      	ldr	r3, [r3, #0]
 8027130:	681b      	ldr	r3, [r3, #0]
 8027132:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8027136:	2b00      	cmp	r3, #0
 8027138:	d108      	bne.n	802714c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 802713a:	687b      	ldr	r3, [r7, #4]
 802713c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802713e:	2b00      	cmp	r3, #0
 8027140:	d024      	beq.n	802718c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8027142:	687b      	ldr	r3, [r7, #4]
 8027144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027146:	6878      	ldr	r0, [r7, #4]
 8027148:	4798      	blx	r3
 802714a:	e01f      	b.n	802718c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 802714c:	687b      	ldr	r3, [r7, #4]
 802714e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027150:	2b00      	cmp	r3, #0
 8027152:	d01b      	beq.n	802718c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8027154:	687b      	ldr	r3, [r7, #4]
 8027156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027158:	6878      	ldr	r0, [r7, #4]
 802715a:	4798      	blx	r3
 802715c:	e016      	b.n	802718c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 802715e:	687b      	ldr	r3, [r7, #4]
 8027160:	681b      	ldr	r3, [r3, #0]
 8027162:	681b      	ldr	r3, [r3, #0]
 8027164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027168:	2b00      	cmp	r3, #0
 802716a:	d107      	bne.n	802717c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 802716c:	687b      	ldr	r3, [r7, #4]
 802716e:	681b      	ldr	r3, [r3, #0]
 8027170:	681a      	ldr	r2, [r3, #0]
 8027172:	687b      	ldr	r3, [r7, #4]
 8027174:	681b      	ldr	r3, [r3, #0]
 8027176:	f022 0208 	bic.w	r2, r2, #8
 802717a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 802717c:	687b      	ldr	r3, [r7, #4]
 802717e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027180:	2b00      	cmp	r3, #0
 8027182:	d003      	beq.n	802718c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8027184:	687b      	ldr	r3, [r7, #4]
 8027186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027188:	6878      	ldr	r0, [r7, #4]
 802718a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 802718c:	687b      	ldr	r3, [r7, #4]
 802718e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027190:	2220      	movs	r2, #32
 8027192:	409a      	lsls	r2, r3
 8027194:	68fb      	ldr	r3, [r7, #12]
 8027196:	4013      	ands	r3, r2
 8027198:	2b00      	cmp	r3, #0
 802719a:	f000 808e 	beq.w	80272ba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 802719e:	687b      	ldr	r3, [r7, #4]
 80271a0:	681b      	ldr	r3, [r3, #0]
 80271a2:	681b      	ldr	r3, [r3, #0]
 80271a4:	f003 0310 	and.w	r3, r3, #16
 80271a8:	2b00      	cmp	r3, #0
 80271aa:	f000 8086 	beq.w	80272ba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80271ae:	687b      	ldr	r3, [r7, #4]
 80271b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80271b2:	2220      	movs	r2, #32
 80271b4:	409a      	lsls	r2, r3
 80271b6:	693b      	ldr	r3, [r7, #16]
 80271b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80271ba:	687b      	ldr	r3, [r7, #4]
 80271bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80271c0:	b2db      	uxtb	r3, r3
 80271c2:	2b05      	cmp	r3, #5
 80271c4:	d136      	bne.n	8027234 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80271c6:	687b      	ldr	r3, [r7, #4]
 80271c8:	681b      	ldr	r3, [r3, #0]
 80271ca:	681a      	ldr	r2, [r3, #0]
 80271cc:	687b      	ldr	r3, [r7, #4]
 80271ce:	681b      	ldr	r3, [r3, #0]
 80271d0:	f022 0216 	bic.w	r2, r2, #22
 80271d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80271d6:	687b      	ldr	r3, [r7, #4]
 80271d8:	681b      	ldr	r3, [r3, #0]
 80271da:	695a      	ldr	r2, [r3, #20]
 80271dc:	687b      	ldr	r3, [r7, #4]
 80271de:	681b      	ldr	r3, [r3, #0]
 80271e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80271e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80271e6:	687b      	ldr	r3, [r7, #4]
 80271e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80271ea:	2b00      	cmp	r3, #0
 80271ec:	d103      	bne.n	80271f6 <HAL_DMA_IRQHandler+0x1da>
 80271ee:	687b      	ldr	r3, [r7, #4]
 80271f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80271f2:	2b00      	cmp	r3, #0
 80271f4:	d007      	beq.n	8027206 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80271f6:	687b      	ldr	r3, [r7, #4]
 80271f8:	681b      	ldr	r3, [r3, #0]
 80271fa:	681a      	ldr	r2, [r3, #0]
 80271fc:	687b      	ldr	r3, [r7, #4]
 80271fe:	681b      	ldr	r3, [r3, #0]
 8027200:	f022 0208 	bic.w	r2, r2, #8
 8027204:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8027206:	687b      	ldr	r3, [r7, #4]
 8027208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802720a:	223f      	movs	r2, #63	; 0x3f
 802720c:	409a      	lsls	r2, r3
 802720e:	693b      	ldr	r3, [r7, #16]
 8027210:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8027212:	687b      	ldr	r3, [r7, #4]
 8027214:	2200      	movs	r2, #0
 8027216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 802721a:	687b      	ldr	r3, [r7, #4]
 802721c:	2201      	movs	r2, #1
 802721e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8027222:	687b      	ldr	r3, [r7, #4]
 8027224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027226:	2b00      	cmp	r3, #0
 8027228:	d07d      	beq.n	8027326 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 802722a:	687b      	ldr	r3, [r7, #4]
 802722c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802722e:	6878      	ldr	r0, [r7, #4]
 8027230:	4798      	blx	r3
        }
        return;
 8027232:	e078      	b.n	8027326 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8027234:	687b      	ldr	r3, [r7, #4]
 8027236:	681b      	ldr	r3, [r3, #0]
 8027238:	681b      	ldr	r3, [r3, #0]
 802723a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802723e:	2b00      	cmp	r3, #0
 8027240:	d01c      	beq.n	802727c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8027242:	687b      	ldr	r3, [r7, #4]
 8027244:	681b      	ldr	r3, [r3, #0]
 8027246:	681b      	ldr	r3, [r3, #0]
 8027248:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802724c:	2b00      	cmp	r3, #0
 802724e:	d108      	bne.n	8027262 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8027250:	687b      	ldr	r3, [r7, #4]
 8027252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027254:	2b00      	cmp	r3, #0
 8027256:	d030      	beq.n	80272ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8027258:	687b      	ldr	r3, [r7, #4]
 802725a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802725c:	6878      	ldr	r0, [r7, #4]
 802725e:	4798      	blx	r3
 8027260:	e02b      	b.n	80272ba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8027262:	687b      	ldr	r3, [r7, #4]
 8027264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027266:	2b00      	cmp	r3, #0
 8027268:	d027      	beq.n	80272ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 802726a:	687b      	ldr	r3, [r7, #4]
 802726c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802726e:	6878      	ldr	r0, [r7, #4]
 8027270:	4798      	blx	r3
 8027272:	e022      	b.n	80272ba <HAL_DMA_IRQHandler+0x29e>
 8027274:	20000004 	.word	0x20000004
 8027278:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 802727c:	687b      	ldr	r3, [r7, #4]
 802727e:	681b      	ldr	r3, [r3, #0]
 8027280:	681b      	ldr	r3, [r3, #0]
 8027282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027286:	2b00      	cmp	r3, #0
 8027288:	d10f      	bne.n	80272aa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 802728a:	687b      	ldr	r3, [r7, #4]
 802728c:	681b      	ldr	r3, [r3, #0]
 802728e:	681a      	ldr	r2, [r3, #0]
 8027290:	687b      	ldr	r3, [r7, #4]
 8027292:	681b      	ldr	r3, [r3, #0]
 8027294:	f022 0210 	bic.w	r2, r2, #16
 8027298:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 802729a:	687b      	ldr	r3, [r7, #4]
 802729c:	2200      	movs	r2, #0
 802729e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80272a2:	687b      	ldr	r3, [r7, #4]
 80272a4:	2201      	movs	r2, #1
 80272a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80272aa:	687b      	ldr	r3, [r7, #4]
 80272ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80272ae:	2b00      	cmp	r3, #0
 80272b0:	d003      	beq.n	80272ba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80272b2:	687b      	ldr	r3, [r7, #4]
 80272b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80272b6:	6878      	ldr	r0, [r7, #4]
 80272b8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80272ba:	687b      	ldr	r3, [r7, #4]
 80272bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80272be:	2b00      	cmp	r3, #0
 80272c0:	d032      	beq.n	8027328 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80272c2:	687b      	ldr	r3, [r7, #4]
 80272c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80272c6:	f003 0301 	and.w	r3, r3, #1
 80272ca:	2b00      	cmp	r3, #0
 80272cc:	d022      	beq.n	8027314 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80272ce:	687b      	ldr	r3, [r7, #4]
 80272d0:	2205      	movs	r2, #5
 80272d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80272d6:	687b      	ldr	r3, [r7, #4]
 80272d8:	681b      	ldr	r3, [r3, #0]
 80272da:	681a      	ldr	r2, [r3, #0]
 80272dc:	687b      	ldr	r3, [r7, #4]
 80272de:	681b      	ldr	r3, [r3, #0]
 80272e0:	f022 0201 	bic.w	r2, r2, #1
 80272e4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80272e6:	68bb      	ldr	r3, [r7, #8]
 80272e8:	3301      	adds	r3, #1
 80272ea:	60bb      	str	r3, [r7, #8]
 80272ec:	697a      	ldr	r2, [r7, #20]
 80272ee:	429a      	cmp	r2, r3
 80272f0:	d307      	bcc.n	8027302 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80272f2:	687b      	ldr	r3, [r7, #4]
 80272f4:	681b      	ldr	r3, [r3, #0]
 80272f6:	681b      	ldr	r3, [r3, #0]
 80272f8:	f003 0301 	and.w	r3, r3, #1
 80272fc:	2b00      	cmp	r3, #0
 80272fe:	d1f2      	bne.n	80272e6 <HAL_DMA_IRQHandler+0x2ca>
 8027300:	e000      	b.n	8027304 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8027302:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8027304:	687b      	ldr	r3, [r7, #4]
 8027306:	2200      	movs	r2, #0
 8027308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 802730c:	687b      	ldr	r3, [r7, #4]
 802730e:	2201      	movs	r2, #1
 8027310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8027314:	687b      	ldr	r3, [r7, #4]
 8027316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8027318:	2b00      	cmp	r3, #0
 802731a:	d005      	beq.n	8027328 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 802731c:	687b      	ldr	r3, [r7, #4]
 802731e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8027320:	6878      	ldr	r0, [r7, #4]
 8027322:	4798      	blx	r3
 8027324:	e000      	b.n	8027328 <HAL_DMA_IRQHandler+0x30c>
        return;
 8027326:	bf00      	nop
    }
  }
}
 8027328:	3718      	adds	r7, #24
 802732a:	46bd      	mov	sp, r7
 802732c:	bd80      	pop	{r7, pc}
 802732e:	bf00      	nop

08027330 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8027330:	b480      	push	{r7}
 8027332:	b085      	sub	sp, #20
 8027334:	af00      	add	r7, sp, #0
 8027336:	60f8      	str	r0, [r7, #12]
 8027338:	60b9      	str	r1, [r7, #8]
 802733a:	607a      	str	r2, [r7, #4]
 802733c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 802733e:	68fb      	ldr	r3, [r7, #12]
 8027340:	681b      	ldr	r3, [r3, #0]
 8027342:	681a      	ldr	r2, [r3, #0]
 8027344:	68fb      	ldr	r3, [r7, #12]
 8027346:	681b      	ldr	r3, [r3, #0]
 8027348:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 802734c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 802734e:	68fb      	ldr	r3, [r7, #12]
 8027350:	681b      	ldr	r3, [r3, #0]
 8027352:	683a      	ldr	r2, [r7, #0]
 8027354:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8027356:	68fb      	ldr	r3, [r7, #12]
 8027358:	689b      	ldr	r3, [r3, #8]
 802735a:	2b40      	cmp	r3, #64	; 0x40
 802735c:	d108      	bne.n	8027370 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 802735e:	68fb      	ldr	r3, [r7, #12]
 8027360:	681b      	ldr	r3, [r3, #0]
 8027362:	687a      	ldr	r2, [r7, #4]
 8027364:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8027366:	68fb      	ldr	r3, [r7, #12]
 8027368:	681b      	ldr	r3, [r3, #0]
 802736a:	68ba      	ldr	r2, [r7, #8]
 802736c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 802736e:	e007      	b.n	8027380 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8027370:	68fb      	ldr	r3, [r7, #12]
 8027372:	681b      	ldr	r3, [r3, #0]
 8027374:	68ba      	ldr	r2, [r7, #8]
 8027376:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8027378:	68fb      	ldr	r3, [r7, #12]
 802737a:	681b      	ldr	r3, [r3, #0]
 802737c:	687a      	ldr	r2, [r7, #4]
 802737e:	60da      	str	r2, [r3, #12]
}
 8027380:	bf00      	nop
 8027382:	3714      	adds	r7, #20
 8027384:	46bd      	mov	sp, r7
 8027386:	f85d 7b04 	ldr.w	r7, [sp], #4
 802738a:	4770      	bx	lr

0802738c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 802738c:	b480      	push	{r7}
 802738e:	b085      	sub	sp, #20
 8027390:	af00      	add	r7, sp, #0
 8027392:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8027394:	687b      	ldr	r3, [r7, #4]
 8027396:	681b      	ldr	r3, [r3, #0]
 8027398:	b2db      	uxtb	r3, r3
 802739a:	3b10      	subs	r3, #16
 802739c:	4a14      	ldr	r2, [pc, #80]	; (80273f0 <DMA_CalcBaseAndBitshift+0x64>)
 802739e:	fba2 2303 	umull	r2, r3, r2, r3
 80273a2:	091b      	lsrs	r3, r3, #4
 80273a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80273a6:	4a13      	ldr	r2, [pc, #76]	; (80273f4 <DMA_CalcBaseAndBitshift+0x68>)
 80273a8:	68fb      	ldr	r3, [r7, #12]
 80273aa:	4413      	add	r3, r2
 80273ac:	781b      	ldrb	r3, [r3, #0]
 80273ae:	461a      	mov	r2, r3
 80273b0:	687b      	ldr	r3, [r7, #4]
 80273b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80273b4:	68fb      	ldr	r3, [r7, #12]
 80273b6:	2b03      	cmp	r3, #3
 80273b8:	d909      	bls.n	80273ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80273ba:	687b      	ldr	r3, [r7, #4]
 80273bc:	681b      	ldr	r3, [r3, #0]
 80273be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80273c2:	f023 0303 	bic.w	r3, r3, #3
 80273c6:	1d1a      	adds	r2, r3, #4
 80273c8:	687b      	ldr	r3, [r7, #4]
 80273ca:	659a      	str	r2, [r3, #88]	; 0x58
 80273cc:	e007      	b.n	80273de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80273ce:	687b      	ldr	r3, [r7, #4]
 80273d0:	681b      	ldr	r3, [r3, #0]
 80273d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80273d6:	f023 0303 	bic.w	r3, r3, #3
 80273da:	687a      	ldr	r2, [r7, #4]
 80273dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80273de:	687b      	ldr	r3, [r7, #4]
 80273e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80273e2:	4618      	mov	r0, r3
 80273e4:	3714      	adds	r7, #20
 80273e6:	46bd      	mov	sp, r7
 80273e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80273ec:	4770      	bx	lr
 80273ee:	bf00      	nop
 80273f0:	aaaaaaab 	.word	0xaaaaaaab
 80273f4:	0802ccf0 	.word	0x0802ccf0

080273f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80273f8:	b480      	push	{r7}
 80273fa:	b085      	sub	sp, #20
 80273fc:	af00      	add	r7, sp, #0
 80273fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8027400:	2300      	movs	r3, #0
 8027402:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8027404:	687b      	ldr	r3, [r7, #4]
 8027406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027408:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 802740a:	687b      	ldr	r3, [r7, #4]
 802740c:	699b      	ldr	r3, [r3, #24]
 802740e:	2b00      	cmp	r3, #0
 8027410:	d11f      	bne.n	8027452 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8027412:	68bb      	ldr	r3, [r7, #8]
 8027414:	2b03      	cmp	r3, #3
 8027416:	d855      	bhi.n	80274c4 <DMA_CheckFifoParam+0xcc>
 8027418:	a201      	add	r2, pc, #4	; (adr r2, 8027420 <DMA_CheckFifoParam+0x28>)
 802741a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802741e:	bf00      	nop
 8027420:	08027431 	.word	0x08027431
 8027424:	08027443 	.word	0x08027443
 8027428:	08027431 	.word	0x08027431
 802742c:	080274c5 	.word	0x080274c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8027430:	687b      	ldr	r3, [r7, #4]
 8027432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027434:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8027438:	2b00      	cmp	r3, #0
 802743a:	d045      	beq.n	80274c8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 802743c:	2301      	movs	r3, #1
 802743e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8027440:	e042      	b.n	80274c8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8027442:	687b      	ldr	r3, [r7, #4]
 8027444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027446:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802744a:	d13f      	bne.n	80274cc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 802744c:	2301      	movs	r3, #1
 802744e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8027450:	e03c      	b.n	80274cc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8027452:	687b      	ldr	r3, [r7, #4]
 8027454:	699b      	ldr	r3, [r3, #24]
 8027456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802745a:	d121      	bne.n	80274a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 802745c:	68bb      	ldr	r3, [r7, #8]
 802745e:	2b03      	cmp	r3, #3
 8027460:	d836      	bhi.n	80274d0 <DMA_CheckFifoParam+0xd8>
 8027462:	a201      	add	r2, pc, #4	; (adr r2, 8027468 <DMA_CheckFifoParam+0x70>)
 8027464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027468:	08027479 	.word	0x08027479
 802746c:	0802747f 	.word	0x0802747f
 8027470:	08027479 	.word	0x08027479
 8027474:	08027491 	.word	0x08027491
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8027478:	2301      	movs	r3, #1
 802747a:	73fb      	strb	r3, [r7, #15]
      break;
 802747c:	e02f      	b.n	80274de <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802747e:	687b      	ldr	r3, [r7, #4]
 8027480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027482:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8027486:	2b00      	cmp	r3, #0
 8027488:	d024      	beq.n	80274d4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 802748a:	2301      	movs	r3, #1
 802748c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 802748e:	e021      	b.n	80274d4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8027490:	687b      	ldr	r3, [r7, #4]
 8027492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027494:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8027498:	d11e      	bne.n	80274d8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 802749a:	2301      	movs	r3, #1
 802749c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 802749e:	e01b      	b.n	80274d8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80274a0:	68bb      	ldr	r3, [r7, #8]
 80274a2:	2b02      	cmp	r3, #2
 80274a4:	d902      	bls.n	80274ac <DMA_CheckFifoParam+0xb4>
 80274a6:	2b03      	cmp	r3, #3
 80274a8:	d003      	beq.n	80274b2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80274aa:	e018      	b.n	80274de <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80274ac:	2301      	movs	r3, #1
 80274ae:	73fb      	strb	r3, [r7, #15]
      break;
 80274b0:	e015      	b.n	80274de <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80274b2:	687b      	ldr	r3, [r7, #4]
 80274b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80274b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80274ba:	2b00      	cmp	r3, #0
 80274bc:	d00e      	beq.n	80274dc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80274be:	2301      	movs	r3, #1
 80274c0:	73fb      	strb	r3, [r7, #15]
      break;
 80274c2:	e00b      	b.n	80274dc <DMA_CheckFifoParam+0xe4>
      break;
 80274c4:	bf00      	nop
 80274c6:	e00a      	b.n	80274de <DMA_CheckFifoParam+0xe6>
      break;
 80274c8:	bf00      	nop
 80274ca:	e008      	b.n	80274de <DMA_CheckFifoParam+0xe6>
      break;
 80274cc:	bf00      	nop
 80274ce:	e006      	b.n	80274de <DMA_CheckFifoParam+0xe6>
      break;
 80274d0:	bf00      	nop
 80274d2:	e004      	b.n	80274de <DMA_CheckFifoParam+0xe6>
      break;
 80274d4:	bf00      	nop
 80274d6:	e002      	b.n	80274de <DMA_CheckFifoParam+0xe6>
      break;   
 80274d8:	bf00      	nop
 80274da:	e000      	b.n	80274de <DMA_CheckFifoParam+0xe6>
      break;
 80274dc:	bf00      	nop
    }
  } 
  
  return status; 
 80274de:	7bfb      	ldrb	r3, [r7, #15]
}
 80274e0:	4618      	mov	r0, r3
 80274e2:	3714      	adds	r7, #20
 80274e4:	46bd      	mov	sp, r7
 80274e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80274ea:	4770      	bx	lr

080274ec <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80274ec:	b580      	push	{r7, lr}
 80274ee:	b086      	sub	sp, #24
 80274f0:	af00      	add	r7, sp, #0
 80274f2:	60f8      	str	r0, [r7, #12]
 80274f4:	60b9      	str	r1, [r7, #8]
 80274f6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80274fa:	2301      	movs	r3, #1
 80274fc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80274fe:	4b23      	ldr	r3, [pc, #140]	; (802758c <HAL_FLASH_Program+0xa0>)
 8027500:	7e1b      	ldrb	r3, [r3, #24]
 8027502:	2b01      	cmp	r3, #1
 8027504:	d101      	bne.n	802750a <HAL_FLASH_Program+0x1e>
 8027506:	2302      	movs	r3, #2
 8027508:	e03b      	b.n	8027582 <HAL_FLASH_Program+0x96>
 802750a:	4b20      	ldr	r3, [pc, #128]	; (802758c <HAL_FLASH_Program+0xa0>)
 802750c:	2201      	movs	r2, #1
 802750e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027510:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027514:	f000 f870 	bl	80275f8 <FLASH_WaitForLastOperation>
 8027518:	4603      	mov	r3, r0
 802751a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 802751c:	7dfb      	ldrb	r3, [r7, #23]
 802751e:	2b00      	cmp	r3, #0
 8027520:	d12b      	bne.n	802757a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8027522:	68fb      	ldr	r3, [r7, #12]
 8027524:	2b00      	cmp	r3, #0
 8027526:	d105      	bne.n	8027534 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8027528:	783b      	ldrb	r3, [r7, #0]
 802752a:	4619      	mov	r1, r3
 802752c:	68b8      	ldr	r0, [r7, #8]
 802752e:	f000 f919 	bl	8027764 <FLASH_Program_Byte>
 8027532:	e016      	b.n	8027562 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8027534:	68fb      	ldr	r3, [r7, #12]
 8027536:	2b01      	cmp	r3, #1
 8027538:	d105      	bne.n	8027546 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 802753a:	883b      	ldrh	r3, [r7, #0]
 802753c:	4619      	mov	r1, r3
 802753e:	68b8      	ldr	r0, [r7, #8]
 8027540:	f000 f8ec 	bl	802771c <FLASH_Program_HalfWord>
 8027544:	e00d      	b.n	8027562 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8027546:	68fb      	ldr	r3, [r7, #12]
 8027548:	2b02      	cmp	r3, #2
 802754a:	d105      	bne.n	8027558 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 802754c:	683b      	ldr	r3, [r7, #0]
 802754e:	4619      	mov	r1, r3
 8027550:	68b8      	ldr	r0, [r7, #8]
 8027552:	f000 f8c1 	bl	80276d8 <FLASH_Program_Word>
 8027556:	e004      	b.n	8027562 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8027558:	e9d7 2300 	ldrd	r2, r3, [r7]
 802755c:	68b8      	ldr	r0, [r7, #8]
 802755e:	f000 f88b 	bl	8027678 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027562:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027566:	f000 f847 	bl	80275f8 <FLASH_WaitForLastOperation>
 802756a:	4603      	mov	r3, r0
 802756c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 802756e:	4b08      	ldr	r3, [pc, #32]	; (8027590 <HAL_FLASH_Program+0xa4>)
 8027570:	691b      	ldr	r3, [r3, #16]
 8027572:	4a07      	ldr	r2, [pc, #28]	; (8027590 <HAL_FLASH_Program+0xa4>)
 8027574:	f023 0301 	bic.w	r3, r3, #1
 8027578:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 802757a:	4b04      	ldr	r3, [pc, #16]	; (802758c <HAL_FLASH_Program+0xa0>)
 802757c:	2200      	movs	r2, #0
 802757e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8027580:	7dfb      	ldrb	r3, [r7, #23]
}
 8027582:	4618      	mov	r0, r3
 8027584:	3718      	adds	r7, #24
 8027586:	46bd      	mov	sp, r7
 8027588:	bd80      	pop	{r7, pc}
 802758a:	bf00      	nop
 802758c:	20017604 	.word	0x20017604
 8027590:	40023c00 	.word	0x40023c00

08027594 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8027594:	b480      	push	{r7}
 8027596:	b083      	sub	sp, #12
 8027598:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 802759a:	2300      	movs	r3, #0
 802759c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 802759e:	4b0b      	ldr	r3, [pc, #44]	; (80275cc <HAL_FLASH_Unlock+0x38>)
 80275a0:	691b      	ldr	r3, [r3, #16]
 80275a2:	2b00      	cmp	r3, #0
 80275a4:	da0b      	bge.n	80275be <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80275a6:	4b09      	ldr	r3, [pc, #36]	; (80275cc <HAL_FLASH_Unlock+0x38>)
 80275a8:	4a09      	ldr	r2, [pc, #36]	; (80275d0 <HAL_FLASH_Unlock+0x3c>)
 80275aa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80275ac:	4b07      	ldr	r3, [pc, #28]	; (80275cc <HAL_FLASH_Unlock+0x38>)
 80275ae:	4a09      	ldr	r2, [pc, #36]	; (80275d4 <HAL_FLASH_Unlock+0x40>)
 80275b0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80275b2:	4b06      	ldr	r3, [pc, #24]	; (80275cc <HAL_FLASH_Unlock+0x38>)
 80275b4:	691b      	ldr	r3, [r3, #16]
 80275b6:	2b00      	cmp	r3, #0
 80275b8:	da01      	bge.n	80275be <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80275ba:	2301      	movs	r3, #1
 80275bc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80275be:	79fb      	ldrb	r3, [r7, #7]
}
 80275c0:	4618      	mov	r0, r3
 80275c2:	370c      	adds	r7, #12
 80275c4:	46bd      	mov	sp, r7
 80275c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80275ca:	4770      	bx	lr
 80275cc:	40023c00 	.word	0x40023c00
 80275d0:	45670123 	.word	0x45670123
 80275d4:	cdef89ab 	.word	0xcdef89ab

080275d8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80275d8:	b480      	push	{r7}
 80275da:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80275dc:	4b05      	ldr	r3, [pc, #20]	; (80275f4 <HAL_FLASH_Lock+0x1c>)
 80275de:	691b      	ldr	r3, [r3, #16]
 80275e0:	4a04      	ldr	r2, [pc, #16]	; (80275f4 <HAL_FLASH_Lock+0x1c>)
 80275e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80275e6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80275e8:	2300      	movs	r3, #0
}
 80275ea:	4618      	mov	r0, r3
 80275ec:	46bd      	mov	sp, r7
 80275ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80275f2:	4770      	bx	lr
 80275f4:	40023c00 	.word	0x40023c00

080275f8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80275f8:	b580      	push	{r7, lr}
 80275fa:	b084      	sub	sp, #16
 80275fc:	af00      	add	r7, sp, #0
 80275fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8027600:	2300      	movs	r3, #0
 8027602:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8027604:	4b1a      	ldr	r3, [pc, #104]	; (8027670 <FLASH_WaitForLastOperation+0x78>)
 8027606:	2200      	movs	r2, #0
 8027608:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 802760a:	f7fe fecd 	bl	80263a8 <HAL_GetTick>
 802760e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8027610:	e010      	b.n	8027634 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8027612:	687b      	ldr	r3, [r7, #4]
 8027614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027618:	d00c      	beq.n	8027634 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 802761a:	687b      	ldr	r3, [r7, #4]
 802761c:	2b00      	cmp	r3, #0
 802761e:	d007      	beq.n	8027630 <FLASH_WaitForLastOperation+0x38>
 8027620:	f7fe fec2 	bl	80263a8 <HAL_GetTick>
 8027624:	4602      	mov	r2, r0
 8027626:	68fb      	ldr	r3, [r7, #12]
 8027628:	1ad3      	subs	r3, r2, r3
 802762a:	687a      	ldr	r2, [r7, #4]
 802762c:	429a      	cmp	r2, r3
 802762e:	d201      	bcs.n	8027634 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8027630:	2303      	movs	r3, #3
 8027632:	e019      	b.n	8027668 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8027634:	4b0f      	ldr	r3, [pc, #60]	; (8027674 <FLASH_WaitForLastOperation+0x7c>)
 8027636:	68db      	ldr	r3, [r3, #12]
 8027638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802763c:	2b00      	cmp	r3, #0
 802763e:	d1e8      	bne.n	8027612 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8027640:	4b0c      	ldr	r3, [pc, #48]	; (8027674 <FLASH_WaitForLastOperation+0x7c>)
 8027642:	68db      	ldr	r3, [r3, #12]
 8027644:	f003 0301 	and.w	r3, r3, #1
 8027648:	2b00      	cmp	r3, #0
 802764a:	d002      	beq.n	8027652 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 802764c:	4b09      	ldr	r3, [pc, #36]	; (8027674 <FLASH_WaitForLastOperation+0x7c>)
 802764e:	2201      	movs	r2, #1
 8027650:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8027652:	4b08      	ldr	r3, [pc, #32]	; (8027674 <FLASH_WaitForLastOperation+0x7c>)
 8027654:	68db      	ldr	r3, [r3, #12]
 8027656:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 802765a:	2b00      	cmp	r3, #0
 802765c:	d003      	beq.n	8027666 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 802765e:	f000 f8a3 	bl	80277a8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8027662:	2301      	movs	r3, #1
 8027664:	e000      	b.n	8027668 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8027666:	2300      	movs	r3, #0
  
}  
 8027668:	4618      	mov	r0, r3
 802766a:	3710      	adds	r7, #16
 802766c:	46bd      	mov	sp, r7
 802766e:	bd80      	pop	{r7, pc}
 8027670:	20017604 	.word	0x20017604
 8027674:	40023c00 	.word	0x40023c00

08027678 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8027678:	b490      	push	{r4, r7}
 802767a:	b084      	sub	sp, #16
 802767c:	af00      	add	r7, sp, #0
 802767e:	60f8      	str	r0, [r7, #12]
 8027680:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027684:	4b13      	ldr	r3, [pc, #76]	; (80276d4 <FLASH_Program_DoubleWord+0x5c>)
 8027686:	691b      	ldr	r3, [r3, #16]
 8027688:	4a12      	ldr	r2, [pc, #72]	; (80276d4 <FLASH_Program_DoubleWord+0x5c>)
 802768a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802768e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8027690:	4b10      	ldr	r3, [pc, #64]	; (80276d4 <FLASH_Program_DoubleWord+0x5c>)
 8027692:	691b      	ldr	r3, [r3, #16]
 8027694:	4a0f      	ldr	r2, [pc, #60]	; (80276d4 <FLASH_Program_DoubleWord+0x5c>)
 8027696:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 802769a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802769c:	4b0d      	ldr	r3, [pc, #52]	; (80276d4 <FLASH_Program_DoubleWord+0x5c>)
 802769e:	691b      	ldr	r3, [r3, #16]
 80276a0:	4a0c      	ldr	r2, [pc, #48]	; (80276d4 <FLASH_Program_DoubleWord+0x5c>)
 80276a2:	f043 0301 	orr.w	r3, r3, #1
 80276a6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80276a8:	68fb      	ldr	r3, [r7, #12]
 80276aa:	683a      	ldr	r2, [r7, #0]
 80276ac:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80276ae:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80276b2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80276b6:	f04f 0300 	mov.w	r3, #0
 80276ba:	f04f 0400 	mov.w	r4, #0
 80276be:	0013      	movs	r3, r2
 80276c0:	2400      	movs	r4, #0
 80276c2:	68fa      	ldr	r2, [r7, #12]
 80276c4:	3204      	adds	r2, #4
 80276c6:	6013      	str	r3, [r2, #0]
}
 80276c8:	bf00      	nop
 80276ca:	3710      	adds	r7, #16
 80276cc:	46bd      	mov	sp, r7
 80276ce:	bc90      	pop	{r4, r7}
 80276d0:	4770      	bx	lr
 80276d2:	bf00      	nop
 80276d4:	40023c00 	.word	0x40023c00

080276d8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80276d8:	b480      	push	{r7}
 80276da:	b083      	sub	sp, #12
 80276dc:	af00      	add	r7, sp, #0
 80276de:	6078      	str	r0, [r7, #4]
 80276e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80276e2:	4b0d      	ldr	r3, [pc, #52]	; (8027718 <FLASH_Program_Word+0x40>)
 80276e4:	691b      	ldr	r3, [r3, #16]
 80276e6:	4a0c      	ldr	r2, [pc, #48]	; (8027718 <FLASH_Program_Word+0x40>)
 80276e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80276ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80276ee:	4b0a      	ldr	r3, [pc, #40]	; (8027718 <FLASH_Program_Word+0x40>)
 80276f0:	691b      	ldr	r3, [r3, #16]
 80276f2:	4a09      	ldr	r2, [pc, #36]	; (8027718 <FLASH_Program_Word+0x40>)
 80276f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80276f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80276fa:	4b07      	ldr	r3, [pc, #28]	; (8027718 <FLASH_Program_Word+0x40>)
 80276fc:	691b      	ldr	r3, [r3, #16]
 80276fe:	4a06      	ldr	r2, [pc, #24]	; (8027718 <FLASH_Program_Word+0x40>)
 8027700:	f043 0301 	orr.w	r3, r3, #1
 8027704:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8027706:	687b      	ldr	r3, [r7, #4]
 8027708:	683a      	ldr	r2, [r7, #0]
 802770a:	601a      	str	r2, [r3, #0]
}
 802770c:	bf00      	nop
 802770e:	370c      	adds	r7, #12
 8027710:	46bd      	mov	sp, r7
 8027712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027716:	4770      	bx	lr
 8027718:	40023c00 	.word	0x40023c00

0802771c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 802771c:	b480      	push	{r7}
 802771e:	b083      	sub	sp, #12
 8027720:	af00      	add	r7, sp, #0
 8027722:	6078      	str	r0, [r7, #4]
 8027724:	460b      	mov	r3, r1
 8027726:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027728:	4b0d      	ldr	r3, [pc, #52]	; (8027760 <FLASH_Program_HalfWord+0x44>)
 802772a:	691b      	ldr	r3, [r3, #16]
 802772c:	4a0c      	ldr	r2, [pc, #48]	; (8027760 <FLASH_Program_HalfWord+0x44>)
 802772e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027732:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8027734:	4b0a      	ldr	r3, [pc, #40]	; (8027760 <FLASH_Program_HalfWord+0x44>)
 8027736:	691b      	ldr	r3, [r3, #16]
 8027738:	4a09      	ldr	r2, [pc, #36]	; (8027760 <FLASH_Program_HalfWord+0x44>)
 802773a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802773e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027740:	4b07      	ldr	r3, [pc, #28]	; (8027760 <FLASH_Program_HalfWord+0x44>)
 8027742:	691b      	ldr	r3, [r3, #16]
 8027744:	4a06      	ldr	r2, [pc, #24]	; (8027760 <FLASH_Program_HalfWord+0x44>)
 8027746:	f043 0301 	orr.w	r3, r3, #1
 802774a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 802774c:	687b      	ldr	r3, [r7, #4]
 802774e:	887a      	ldrh	r2, [r7, #2]
 8027750:	801a      	strh	r2, [r3, #0]
}
 8027752:	bf00      	nop
 8027754:	370c      	adds	r7, #12
 8027756:	46bd      	mov	sp, r7
 8027758:	f85d 7b04 	ldr.w	r7, [sp], #4
 802775c:	4770      	bx	lr
 802775e:	bf00      	nop
 8027760:	40023c00 	.word	0x40023c00

08027764 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8027764:	b480      	push	{r7}
 8027766:	b083      	sub	sp, #12
 8027768:	af00      	add	r7, sp, #0
 802776a:	6078      	str	r0, [r7, #4]
 802776c:	460b      	mov	r3, r1
 802776e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027770:	4b0c      	ldr	r3, [pc, #48]	; (80277a4 <FLASH_Program_Byte+0x40>)
 8027772:	691b      	ldr	r3, [r3, #16]
 8027774:	4a0b      	ldr	r2, [pc, #44]	; (80277a4 <FLASH_Program_Byte+0x40>)
 8027776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802777a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 802777c:	4b09      	ldr	r3, [pc, #36]	; (80277a4 <FLASH_Program_Byte+0x40>)
 802777e:	4a09      	ldr	r2, [pc, #36]	; (80277a4 <FLASH_Program_Byte+0x40>)
 8027780:	691b      	ldr	r3, [r3, #16]
 8027782:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027784:	4b07      	ldr	r3, [pc, #28]	; (80277a4 <FLASH_Program_Byte+0x40>)
 8027786:	691b      	ldr	r3, [r3, #16]
 8027788:	4a06      	ldr	r2, [pc, #24]	; (80277a4 <FLASH_Program_Byte+0x40>)
 802778a:	f043 0301 	orr.w	r3, r3, #1
 802778e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8027790:	687b      	ldr	r3, [r7, #4]
 8027792:	78fa      	ldrb	r2, [r7, #3]
 8027794:	701a      	strb	r2, [r3, #0]
}
 8027796:	bf00      	nop
 8027798:	370c      	adds	r7, #12
 802779a:	46bd      	mov	sp, r7
 802779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277a0:	4770      	bx	lr
 80277a2:	bf00      	nop
 80277a4:	40023c00 	.word	0x40023c00

080277a8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80277a8:	b480      	push	{r7}
 80277aa:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80277ac:	4b27      	ldr	r3, [pc, #156]	; (802784c <FLASH_SetErrorCode+0xa4>)
 80277ae:	68db      	ldr	r3, [r3, #12]
 80277b0:	f003 0310 	and.w	r3, r3, #16
 80277b4:	2b00      	cmp	r3, #0
 80277b6:	d008      	beq.n	80277ca <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80277b8:	4b25      	ldr	r3, [pc, #148]	; (8027850 <FLASH_SetErrorCode+0xa8>)
 80277ba:	69db      	ldr	r3, [r3, #28]
 80277bc:	f043 0310 	orr.w	r3, r3, #16
 80277c0:	4a23      	ldr	r2, [pc, #140]	; (8027850 <FLASH_SetErrorCode+0xa8>)
 80277c2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80277c4:	4b21      	ldr	r3, [pc, #132]	; (802784c <FLASH_SetErrorCode+0xa4>)
 80277c6:	2210      	movs	r2, #16
 80277c8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80277ca:	4b20      	ldr	r3, [pc, #128]	; (802784c <FLASH_SetErrorCode+0xa4>)
 80277cc:	68db      	ldr	r3, [r3, #12]
 80277ce:	f003 0320 	and.w	r3, r3, #32
 80277d2:	2b00      	cmp	r3, #0
 80277d4:	d008      	beq.n	80277e8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80277d6:	4b1e      	ldr	r3, [pc, #120]	; (8027850 <FLASH_SetErrorCode+0xa8>)
 80277d8:	69db      	ldr	r3, [r3, #28]
 80277da:	f043 0308 	orr.w	r3, r3, #8
 80277de:	4a1c      	ldr	r2, [pc, #112]	; (8027850 <FLASH_SetErrorCode+0xa8>)
 80277e0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80277e2:	4b1a      	ldr	r3, [pc, #104]	; (802784c <FLASH_SetErrorCode+0xa4>)
 80277e4:	2220      	movs	r2, #32
 80277e6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80277e8:	4b18      	ldr	r3, [pc, #96]	; (802784c <FLASH_SetErrorCode+0xa4>)
 80277ea:	68db      	ldr	r3, [r3, #12]
 80277ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80277f0:	2b00      	cmp	r3, #0
 80277f2:	d008      	beq.n	8027806 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80277f4:	4b16      	ldr	r3, [pc, #88]	; (8027850 <FLASH_SetErrorCode+0xa8>)
 80277f6:	69db      	ldr	r3, [r3, #28]
 80277f8:	f043 0304 	orr.w	r3, r3, #4
 80277fc:	4a14      	ldr	r2, [pc, #80]	; (8027850 <FLASH_SetErrorCode+0xa8>)
 80277fe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8027800:	4b12      	ldr	r3, [pc, #72]	; (802784c <FLASH_SetErrorCode+0xa4>)
 8027802:	2240      	movs	r2, #64	; 0x40
 8027804:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8027806:	4b11      	ldr	r3, [pc, #68]	; (802784c <FLASH_SetErrorCode+0xa4>)
 8027808:	68db      	ldr	r3, [r3, #12]
 802780a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802780e:	2b00      	cmp	r3, #0
 8027810:	d008      	beq.n	8027824 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8027812:	4b0f      	ldr	r3, [pc, #60]	; (8027850 <FLASH_SetErrorCode+0xa8>)
 8027814:	69db      	ldr	r3, [r3, #28]
 8027816:	f043 0302 	orr.w	r3, r3, #2
 802781a:	4a0d      	ldr	r2, [pc, #52]	; (8027850 <FLASH_SetErrorCode+0xa8>)
 802781c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 802781e:	4b0b      	ldr	r3, [pc, #44]	; (802784c <FLASH_SetErrorCode+0xa4>)
 8027820:	2280      	movs	r2, #128	; 0x80
 8027822:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8027824:	4b09      	ldr	r3, [pc, #36]	; (802784c <FLASH_SetErrorCode+0xa4>)
 8027826:	68db      	ldr	r3, [r3, #12]
 8027828:	f003 0302 	and.w	r3, r3, #2
 802782c:	2b00      	cmp	r3, #0
 802782e:	d008      	beq.n	8027842 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8027830:	4b07      	ldr	r3, [pc, #28]	; (8027850 <FLASH_SetErrorCode+0xa8>)
 8027832:	69db      	ldr	r3, [r3, #28]
 8027834:	f043 0320 	orr.w	r3, r3, #32
 8027838:	4a05      	ldr	r2, [pc, #20]	; (8027850 <FLASH_SetErrorCode+0xa8>)
 802783a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 802783c:	4b03      	ldr	r3, [pc, #12]	; (802784c <FLASH_SetErrorCode+0xa4>)
 802783e:	2202      	movs	r2, #2
 8027840:	60da      	str	r2, [r3, #12]
  }
}
 8027842:	bf00      	nop
 8027844:	46bd      	mov	sp, r7
 8027846:	f85d 7b04 	ldr.w	r7, [sp], #4
 802784a:	4770      	bx	lr
 802784c:	40023c00 	.word	0x40023c00
 8027850:	20017604 	.word	0x20017604

08027854 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8027854:	b580      	push	{r7, lr}
 8027856:	b084      	sub	sp, #16
 8027858:	af00      	add	r7, sp, #0
 802785a:	6078      	str	r0, [r7, #4]
 802785c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 802785e:	2301      	movs	r3, #1
 8027860:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8027862:	2300      	movs	r3, #0
 8027864:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8027866:	4b31      	ldr	r3, [pc, #196]	; (802792c <HAL_FLASHEx_Erase+0xd8>)
 8027868:	7e1b      	ldrb	r3, [r3, #24]
 802786a:	2b01      	cmp	r3, #1
 802786c:	d101      	bne.n	8027872 <HAL_FLASHEx_Erase+0x1e>
 802786e:	2302      	movs	r3, #2
 8027870:	e058      	b.n	8027924 <HAL_FLASHEx_Erase+0xd0>
 8027872:	4b2e      	ldr	r3, [pc, #184]	; (802792c <HAL_FLASHEx_Erase+0xd8>)
 8027874:	2201      	movs	r2, #1
 8027876:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027878:	f24c 3050 	movw	r0, #50000	; 0xc350
 802787c:	f7ff febc 	bl	80275f8 <FLASH_WaitForLastOperation>
 8027880:	4603      	mov	r3, r0
 8027882:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8027884:	7bfb      	ldrb	r3, [r7, #15]
 8027886:	2b00      	cmp	r3, #0
 8027888:	d148      	bne.n	802791c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 802788a:	683b      	ldr	r3, [r7, #0]
 802788c:	f04f 32ff 	mov.w	r2, #4294967295
 8027890:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8027892:	687b      	ldr	r3, [r7, #4]
 8027894:	681b      	ldr	r3, [r3, #0]
 8027896:	2b01      	cmp	r3, #1
 8027898:	d115      	bne.n	80278c6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 802789a:	687b      	ldr	r3, [r7, #4]
 802789c:	691b      	ldr	r3, [r3, #16]
 802789e:	b2da      	uxtb	r2, r3
 80278a0:	687b      	ldr	r3, [r7, #4]
 80278a2:	685b      	ldr	r3, [r3, #4]
 80278a4:	4619      	mov	r1, r3
 80278a6:	4610      	mov	r0, r2
 80278a8:	f000 f844 	bl	8027934 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80278ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80278b0:	f7ff fea2 	bl	80275f8 <FLASH_WaitForLastOperation>
 80278b4:	4603      	mov	r3, r0
 80278b6:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80278b8:	4b1d      	ldr	r3, [pc, #116]	; (8027930 <HAL_FLASHEx_Erase+0xdc>)
 80278ba:	691b      	ldr	r3, [r3, #16]
 80278bc:	4a1c      	ldr	r2, [pc, #112]	; (8027930 <HAL_FLASHEx_Erase+0xdc>)
 80278be:	f023 0304 	bic.w	r3, r3, #4
 80278c2:	6113      	str	r3, [r2, #16]
 80278c4:	e028      	b.n	8027918 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80278c6:	687b      	ldr	r3, [r7, #4]
 80278c8:	689b      	ldr	r3, [r3, #8]
 80278ca:	60bb      	str	r3, [r7, #8]
 80278cc:	e01c      	b.n	8027908 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80278ce:	687b      	ldr	r3, [r7, #4]
 80278d0:	691b      	ldr	r3, [r3, #16]
 80278d2:	b2db      	uxtb	r3, r3
 80278d4:	4619      	mov	r1, r3
 80278d6:	68b8      	ldr	r0, [r7, #8]
 80278d8:	f000 f850 	bl	802797c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80278dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80278e0:	f7ff fe8a 	bl	80275f8 <FLASH_WaitForLastOperation>
 80278e4:	4603      	mov	r3, r0
 80278e6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80278e8:	4b11      	ldr	r3, [pc, #68]	; (8027930 <HAL_FLASHEx_Erase+0xdc>)
 80278ea:	691b      	ldr	r3, [r3, #16]
 80278ec:	4a10      	ldr	r2, [pc, #64]	; (8027930 <HAL_FLASHEx_Erase+0xdc>)
 80278ee:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80278f2:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80278f4:	7bfb      	ldrb	r3, [r7, #15]
 80278f6:	2b00      	cmp	r3, #0
 80278f8:	d003      	beq.n	8027902 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80278fa:	683b      	ldr	r3, [r7, #0]
 80278fc:	68ba      	ldr	r2, [r7, #8]
 80278fe:	601a      	str	r2, [r3, #0]
          break;
 8027900:	e00a      	b.n	8027918 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8027902:	68bb      	ldr	r3, [r7, #8]
 8027904:	3301      	adds	r3, #1
 8027906:	60bb      	str	r3, [r7, #8]
 8027908:	687b      	ldr	r3, [r7, #4]
 802790a:	68da      	ldr	r2, [r3, #12]
 802790c:	687b      	ldr	r3, [r7, #4]
 802790e:	689b      	ldr	r3, [r3, #8]
 8027910:	4413      	add	r3, r2
 8027912:	68ba      	ldr	r2, [r7, #8]
 8027914:	429a      	cmp	r2, r3
 8027916:	d3da      	bcc.n	80278ce <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8027918:	f000 f878 	bl	8027a0c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 802791c:	4b03      	ldr	r3, [pc, #12]	; (802792c <HAL_FLASHEx_Erase+0xd8>)
 802791e:	2200      	movs	r2, #0
 8027920:	761a      	strb	r2, [r3, #24]

  return status;
 8027922:	7bfb      	ldrb	r3, [r7, #15]
}
 8027924:	4618      	mov	r0, r3
 8027926:	3710      	adds	r7, #16
 8027928:	46bd      	mov	sp, r7
 802792a:	bd80      	pop	{r7, pc}
 802792c:	20017604 	.word	0x20017604
 8027930:	40023c00 	.word	0x40023c00

08027934 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8027934:	b480      	push	{r7}
 8027936:	b083      	sub	sp, #12
 8027938:	af00      	add	r7, sp, #0
 802793a:	4603      	mov	r3, r0
 802793c:	6039      	str	r1, [r7, #0]
 802793e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027940:	4b0d      	ldr	r3, [pc, #52]	; (8027978 <FLASH_MassErase+0x44>)
 8027942:	691b      	ldr	r3, [r3, #16]
 8027944:	4a0c      	ldr	r2, [pc, #48]	; (8027978 <FLASH_MassErase+0x44>)
 8027946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802794a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 802794c:	4b0a      	ldr	r3, [pc, #40]	; (8027978 <FLASH_MassErase+0x44>)
 802794e:	691b      	ldr	r3, [r3, #16]
 8027950:	4a09      	ldr	r2, [pc, #36]	; (8027978 <FLASH_MassErase+0x44>)
 8027952:	f043 0304 	orr.w	r3, r3, #4
 8027956:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8027958:	4b07      	ldr	r3, [pc, #28]	; (8027978 <FLASH_MassErase+0x44>)
 802795a:	691a      	ldr	r2, [r3, #16]
 802795c:	79fb      	ldrb	r3, [r7, #7]
 802795e:	021b      	lsls	r3, r3, #8
 8027960:	4313      	orrs	r3, r2
 8027962:	4a05      	ldr	r2, [pc, #20]	; (8027978 <FLASH_MassErase+0x44>)
 8027964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027968:	6113      	str	r3, [r2, #16]
}
 802796a:	bf00      	nop
 802796c:	370c      	adds	r7, #12
 802796e:	46bd      	mov	sp, r7
 8027970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027974:	4770      	bx	lr
 8027976:	bf00      	nop
 8027978:	40023c00 	.word	0x40023c00

0802797c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 802797c:	b480      	push	{r7}
 802797e:	b085      	sub	sp, #20
 8027980:	af00      	add	r7, sp, #0
 8027982:	6078      	str	r0, [r7, #4]
 8027984:	460b      	mov	r3, r1
 8027986:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8027988:	2300      	movs	r3, #0
 802798a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 802798c:	78fb      	ldrb	r3, [r7, #3]
 802798e:	2b00      	cmp	r3, #0
 8027990:	d102      	bne.n	8027998 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8027992:	2300      	movs	r3, #0
 8027994:	60fb      	str	r3, [r7, #12]
 8027996:	e010      	b.n	80279ba <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8027998:	78fb      	ldrb	r3, [r7, #3]
 802799a:	2b01      	cmp	r3, #1
 802799c:	d103      	bne.n	80279a6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 802799e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80279a2:	60fb      	str	r3, [r7, #12]
 80279a4:	e009      	b.n	80279ba <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80279a6:	78fb      	ldrb	r3, [r7, #3]
 80279a8:	2b02      	cmp	r3, #2
 80279aa:	d103      	bne.n	80279b4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80279ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80279b0:	60fb      	str	r3, [r7, #12]
 80279b2:	e002      	b.n	80279ba <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80279b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80279b8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80279ba:	4b13      	ldr	r3, [pc, #76]	; (8027a08 <FLASH_Erase_Sector+0x8c>)
 80279bc:	691b      	ldr	r3, [r3, #16]
 80279be:	4a12      	ldr	r2, [pc, #72]	; (8027a08 <FLASH_Erase_Sector+0x8c>)
 80279c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80279c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80279c6:	4b10      	ldr	r3, [pc, #64]	; (8027a08 <FLASH_Erase_Sector+0x8c>)
 80279c8:	691a      	ldr	r2, [r3, #16]
 80279ca:	490f      	ldr	r1, [pc, #60]	; (8027a08 <FLASH_Erase_Sector+0x8c>)
 80279cc:	68fb      	ldr	r3, [r7, #12]
 80279ce:	4313      	orrs	r3, r2
 80279d0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80279d2:	4b0d      	ldr	r3, [pc, #52]	; (8027a08 <FLASH_Erase_Sector+0x8c>)
 80279d4:	691b      	ldr	r3, [r3, #16]
 80279d6:	4a0c      	ldr	r2, [pc, #48]	; (8027a08 <FLASH_Erase_Sector+0x8c>)
 80279d8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80279dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80279de:	4b0a      	ldr	r3, [pc, #40]	; (8027a08 <FLASH_Erase_Sector+0x8c>)
 80279e0:	691a      	ldr	r2, [r3, #16]
 80279e2:	687b      	ldr	r3, [r7, #4]
 80279e4:	00db      	lsls	r3, r3, #3
 80279e6:	4313      	orrs	r3, r2
 80279e8:	4a07      	ldr	r2, [pc, #28]	; (8027a08 <FLASH_Erase_Sector+0x8c>)
 80279ea:	f043 0302 	orr.w	r3, r3, #2
 80279ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80279f0:	4b05      	ldr	r3, [pc, #20]	; (8027a08 <FLASH_Erase_Sector+0x8c>)
 80279f2:	691b      	ldr	r3, [r3, #16]
 80279f4:	4a04      	ldr	r2, [pc, #16]	; (8027a08 <FLASH_Erase_Sector+0x8c>)
 80279f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80279fa:	6113      	str	r3, [r2, #16]
}
 80279fc:	bf00      	nop
 80279fe:	3714      	adds	r7, #20
 8027a00:	46bd      	mov	sp, r7
 8027a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a06:	4770      	bx	lr
 8027a08:	40023c00 	.word	0x40023c00

08027a0c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8027a0c:	b480      	push	{r7}
 8027a0e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8027a10:	4b20      	ldr	r3, [pc, #128]	; (8027a94 <FLASH_FlushCaches+0x88>)
 8027a12:	681b      	ldr	r3, [r3, #0]
 8027a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8027a18:	2b00      	cmp	r3, #0
 8027a1a:	d017      	beq.n	8027a4c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8027a1c:	4b1d      	ldr	r3, [pc, #116]	; (8027a94 <FLASH_FlushCaches+0x88>)
 8027a1e:	681b      	ldr	r3, [r3, #0]
 8027a20:	4a1c      	ldr	r2, [pc, #112]	; (8027a94 <FLASH_FlushCaches+0x88>)
 8027a22:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8027a26:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8027a28:	4b1a      	ldr	r3, [pc, #104]	; (8027a94 <FLASH_FlushCaches+0x88>)
 8027a2a:	681b      	ldr	r3, [r3, #0]
 8027a2c:	4a19      	ldr	r2, [pc, #100]	; (8027a94 <FLASH_FlushCaches+0x88>)
 8027a2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8027a32:	6013      	str	r3, [r2, #0]
 8027a34:	4b17      	ldr	r3, [pc, #92]	; (8027a94 <FLASH_FlushCaches+0x88>)
 8027a36:	681b      	ldr	r3, [r3, #0]
 8027a38:	4a16      	ldr	r2, [pc, #88]	; (8027a94 <FLASH_FlushCaches+0x88>)
 8027a3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8027a3e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8027a40:	4b14      	ldr	r3, [pc, #80]	; (8027a94 <FLASH_FlushCaches+0x88>)
 8027a42:	681b      	ldr	r3, [r3, #0]
 8027a44:	4a13      	ldr	r2, [pc, #76]	; (8027a94 <FLASH_FlushCaches+0x88>)
 8027a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8027a4a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8027a4c:	4b11      	ldr	r3, [pc, #68]	; (8027a94 <FLASH_FlushCaches+0x88>)
 8027a4e:	681b      	ldr	r3, [r3, #0]
 8027a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027a54:	2b00      	cmp	r3, #0
 8027a56:	d017      	beq.n	8027a88 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8027a58:	4b0e      	ldr	r3, [pc, #56]	; (8027a94 <FLASH_FlushCaches+0x88>)
 8027a5a:	681b      	ldr	r3, [r3, #0]
 8027a5c:	4a0d      	ldr	r2, [pc, #52]	; (8027a94 <FLASH_FlushCaches+0x88>)
 8027a5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8027a62:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8027a64:	4b0b      	ldr	r3, [pc, #44]	; (8027a94 <FLASH_FlushCaches+0x88>)
 8027a66:	681b      	ldr	r3, [r3, #0]
 8027a68:	4a0a      	ldr	r2, [pc, #40]	; (8027a94 <FLASH_FlushCaches+0x88>)
 8027a6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8027a6e:	6013      	str	r3, [r2, #0]
 8027a70:	4b08      	ldr	r3, [pc, #32]	; (8027a94 <FLASH_FlushCaches+0x88>)
 8027a72:	681b      	ldr	r3, [r3, #0]
 8027a74:	4a07      	ldr	r2, [pc, #28]	; (8027a94 <FLASH_FlushCaches+0x88>)
 8027a76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8027a7a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8027a7c:	4b05      	ldr	r3, [pc, #20]	; (8027a94 <FLASH_FlushCaches+0x88>)
 8027a7e:	681b      	ldr	r3, [r3, #0]
 8027a80:	4a04      	ldr	r2, [pc, #16]	; (8027a94 <FLASH_FlushCaches+0x88>)
 8027a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8027a86:	6013      	str	r3, [r2, #0]
  }
}
 8027a88:	bf00      	nop
 8027a8a:	46bd      	mov	sp, r7
 8027a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a90:	4770      	bx	lr
 8027a92:	bf00      	nop
 8027a94:	40023c00 	.word	0x40023c00

08027a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8027a98:	b480      	push	{r7}
 8027a9a:	b089      	sub	sp, #36	; 0x24
 8027a9c:	af00      	add	r7, sp, #0
 8027a9e:	6078      	str	r0, [r7, #4]
 8027aa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8027aa2:	2300      	movs	r3, #0
 8027aa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8027aa6:	2300      	movs	r3, #0
 8027aa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8027aaa:	2300      	movs	r3, #0
 8027aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8027aae:	2300      	movs	r3, #0
 8027ab0:	61fb      	str	r3, [r7, #28]
 8027ab2:	e16b      	b.n	8027d8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8027ab4:	2201      	movs	r2, #1
 8027ab6:	69fb      	ldr	r3, [r7, #28]
 8027ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8027abc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8027abe:	683b      	ldr	r3, [r7, #0]
 8027ac0:	681b      	ldr	r3, [r3, #0]
 8027ac2:	697a      	ldr	r2, [r7, #20]
 8027ac4:	4013      	ands	r3, r2
 8027ac6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8027ac8:	693a      	ldr	r2, [r7, #16]
 8027aca:	697b      	ldr	r3, [r7, #20]
 8027acc:	429a      	cmp	r2, r3
 8027ace:	f040 815a 	bne.w	8027d86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8027ad2:	683b      	ldr	r3, [r7, #0]
 8027ad4:	685b      	ldr	r3, [r3, #4]
 8027ad6:	2b01      	cmp	r3, #1
 8027ad8:	d00b      	beq.n	8027af2 <HAL_GPIO_Init+0x5a>
 8027ada:	683b      	ldr	r3, [r7, #0]
 8027adc:	685b      	ldr	r3, [r3, #4]
 8027ade:	2b02      	cmp	r3, #2
 8027ae0:	d007      	beq.n	8027af2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8027ae2:	683b      	ldr	r3, [r7, #0]
 8027ae4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8027ae6:	2b11      	cmp	r3, #17
 8027ae8:	d003      	beq.n	8027af2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8027aea:	683b      	ldr	r3, [r7, #0]
 8027aec:	685b      	ldr	r3, [r3, #4]
 8027aee:	2b12      	cmp	r3, #18
 8027af0:	d130      	bne.n	8027b54 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8027af2:	687b      	ldr	r3, [r7, #4]
 8027af4:	689b      	ldr	r3, [r3, #8]
 8027af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8027af8:	69fb      	ldr	r3, [r7, #28]
 8027afa:	005b      	lsls	r3, r3, #1
 8027afc:	2203      	movs	r2, #3
 8027afe:	fa02 f303 	lsl.w	r3, r2, r3
 8027b02:	43db      	mvns	r3, r3
 8027b04:	69ba      	ldr	r2, [r7, #24]
 8027b06:	4013      	ands	r3, r2
 8027b08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8027b0a:	683b      	ldr	r3, [r7, #0]
 8027b0c:	68da      	ldr	r2, [r3, #12]
 8027b0e:	69fb      	ldr	r3, [r7, #28]
 8027b10:	005b      	lsls	r3, r3, #1
 8027b12:	fa02 f303 	lsl.w	r3, r2, r3
 8027b16:	69ba      	ldr	r2, [r7, #24]
 8027b18:	4313      	orrs	r3, r2
 8027b1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8027b1c:	687b      	ldr	r3, [r7, #4]
 8027b1e:	69ba      	ldr	r2, [r7, #24]
 8027b20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8027b22:	687b      	ldr	r3, [r7, #4]
 8027b24:	685b      	ldr	r3, [r3, #4]
 8027b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8027b28:	2201      	movs	r2, #1
 8027b2a:	69fb      	ldr	r3, [r7, #28]
 8027b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8027b30:	43db      	mvns	r3, r3
 8027b32:	69ba      	ldr	r2, [r7, #24]
 8027b34:	4013      	ands	r3, r2
 8027b36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8027b38:	683b      	ldr	r3, [r7, #0]
 8027b3a:	685b      	ldr	r3, [r3, #4]
 8027b3c:	091b      	lsrs	r3, r3, #4
 8027b3e:	f003 0201 	and.w	r2, r3, #1
 8027b42:	69fb      	ldr	r3, [r7, #28]
 8027b44:	fa02 f303 	lsl.w	r3, r2, r3
 8027b48:	69ba      	ldr	r2, [r7, #24]
 8027b4a:	4313      	orrs	r3, r2
 8027b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8027b4e:	687b      	ldr	r3, [r7, #4]
 8027b50:	69ba      	ldr	r2, [r7, #24]
 8027b52:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8027b54:	687b      	ldr	r3, [r7, #4]
 8027b56:	68db      	ldr	r3, [r3, #12]
 8027b58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8027b5a:	69fb      	ldr	r3, [r7, #28]
 8027b5c:	005b      	lsls	r3, r3, #1
 8027b5e:	2203      	movs	r2, #3
 8027b60:	fa02 f303 	lsl.w	r3, r2, r3
 8027b64:	43db      	mvns	r3, r3
 8027b66:	69ba      	ldr	r2, [r7, #24]
 8027b68:	4013      	ands	r3, r2
 8027b6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8027b6c:	683b      	ldr	r3, [r7, #0]
 8027b6e:	689a      	ldr	r2, [r3, #8]
 8027b70:	69fb      	ldr	r3, [r7, #28]
 8027b72:	005b      	lsls	r3, r3, #1
 8027b74:	fa02 f303 	lsl.w	r3, r2, r3
 8027b78:	69ba      	ldr	r2, [r7, #24]
 8027b7a:	4313      	orrs	r3, r2
 8027b7c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8027b7e:	687b      	ldr	r3, [r7, #4]
 8027b80:	69ba      	ldr	r2, [r7, #24]
 8027b82:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8027b84:	683b      	ldr	r3, [r7, #0]
 8027b86:	685b      	ldr	r3, [r3, #4]
 8027b88:	2b02      	cmp	r3, #2
 8027b8a:	d003      	beq.n	8027b94 <HAL_GPIO_Init+0xfc>
 8027b8c:	683b      	ldr	r3, [r7, #0]
 8027b8e:	685b      	ldr	r3, [r3, #4]
 8027b90:	2b12      	cmp	r3, #18
 8027b92:	d123      	bne.n	8027bdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8027b94:	69fb      	ldr	r3, [r7, #28]
 8027b96:	08da      	lsrs	r2, r3, #3
 8027b98:	687b      	ldr	r3, [r7, #4]
 8027b9a:	3208      	adds	r2, #8
 8027b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8027ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8027ba2:	69fb      	ldr	r3, [r7, #28]
 8027ba4:	f003 0307 	and.w	r3, r3, #7
 8027ba8:	009b      	lsls	r3, r3, #2
 8027baa:	220f      	movs	r2, #15
 8027bac:	fa02 f303 	lsl.w	r3, r2, r3
 8027bb0:	43db      	mvns	r3, r3
 8027bb2:	69ba      	ldr	r2, [r7, #24]
 8027bb4:	4013      	ands	r3, r2
 8027bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8027bb8:	683b      	ldr	r3, [r7, #0]
 8027bba:	691a      	ldr	r2, [r3, #16]
 8027bbc:	69fb      	ldr	r3, [r7, #28]
 8027bbe:	f003 0307 	and.w	r3, r3, #7
 8027bc2:	009b      	lsls	r3, r3, #2
 8027bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8027bc8:	69ba      	ldr	r2, [r7, #24]
 8027bca:	4313      	orrs	r3, r2
 8027bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8027bce:	69fb      	ldr	r3, [r7, #28]
 8027bd0:	08da      	lsrs	r2, r3, #3
 8027bd2:	687b      	ldr	r3, [r7, #4]
 8027bd4:	3208      	adds	r2, #8
 8027bd6:	69b9      	ldr	r1, [r7, #24]
 8027bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8027bdc:	687b      	ldr	r3, [r7, #4]
 8027bde:	681b      	ldr	r3, [r3, #0]
 8027be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8027be2:	69fb      	ldr	r3, [r7, #28]
 8027be4:	005b      	lsls	r3, r3, #1
 8027be6:	2203      	movs	r2, #3
 8027be8:	fa02 f303 	lsl.w	r3, r2, r3
 8027bec:	43db      	mvns	r3, r3
 8027bee:	69ba      	ldr	r2, [r7, #24]
 8027bf0:	4013      	ands	r3, r2
 8027bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8027bf4:	683b      	ldr	r3, [r7, #0]
 8027bf6:	685b      	ldr	r3, [r3, #4]
 8027bf8:	f003 0203 	and.w	r2, r3, #3
 8027bfc:	69fb      	ldr	r3, [r7, #28]
 8027bfe:	005b      	lsls	r3, r3, #1
 8027c00:	fa02 f303 	lsl.w	r3, r2, r3
 8027c04:	69ba      	ldr	r2, [r7, #24]
 8027c06:	4313      	orrs	r3, r2
 8027c08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8027c0a:	687b      	ldr	r3, [r7, #4]
 8027c0c:	69ba      	ldr	r2, [r7, #24]
 8027c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8027c10:	683b      	ldr	r3, [r7, #0]
 8027c12:	685b      	ldr	r3, [r3, #4]
 8027c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8027c18:	2b00      	cmp	r3, #0
 8027c1a:	f000 80b4 	beq.w	8027d86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8027c1e:	2300      	movs	r3, #0
 8027c20:	60fb      	str	r3, [r7, #12]
 8027c22:	4b5f      	ldr	r3, [pc, #380]	; (8027da0 <HAL_GPIO_Init+0x308>)
 8027c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027c26:	4a5e      	ldr	r2, [pc, #376]	; (8027da0 <HAL_GPIO_Init+0x308>)
 8027c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8027c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8027c2e:	4b5c      	ldr	r3, [pc, #368]	; (8027da0 <HAL_GPIO_Init+0x308>)
 8027c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8027c36:	60fb      	str	r3, [r7, #12]
 8027c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8027c3a:	4a5a      	ldr	r2, [pc, #360]	; (8027da4 <HAL_GPIO_Init+0x30c>)
 8027c3c:	69fb      	ldr	r3, [r7, #28]
 8027c3e:	089b      	lsrs	r3, r3, #2
 8027c40:	3302      	adds	r3, #2
 8027c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8027c48:	69fb      	ldr	r3, [r7, #28]
 8027c4a:	f003 0303 	and.w	r3, r3, #3
 8027c4e:	009b      	lsls	r3, r3, #2
 8027c50:	220f      	movs	r2, #15
 8027c52:	fa02 f303 	lsl.w	r3, r2, r3
 8027c56:	43db      	mvns	r3, r3
 8027c58:	69ba      	ldr	r2, [r7, #24]
 8027c5a:	4013      	ands	r3, r2
 8027c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8027c5e:	687b      	ldr	r3, [r7, #4]
 8027c60:	4a51      	ldr	r2, [pc, #324]	; (8027da8 <HAL_GPIO_Init+0x310>)
 8027c62:	4293      	cmp	r3, r2
 8027c64:	d02b      	beq.n	8027cbe <HAL_GPIO_Init+0x226>
 8027c66:	687b      	ldr	r3, [r7, #4]
 8027c68:	4a50      	ldr	r2, [pc, #320]	; (8027dac <HAL_GPIO_Init+0x314>)
 8027c6a:	4293      	cmp	r3, r2
 8027c6c:	d025      	beq.n	8027cba <HAL_GPIO_Init+0x222>
 8027c6e:	687b      	ldr	r3, [r7, #4]
 8027c70:	4a4f      	ldr	r2, [pc, #316]	; (8027db0 <HAL_GPIO_Init+0x318>)
 8027c72:	4293      	cmp	r3, r2
 8027c74:	d01f      	beq.n	8027cb6 <HAL_GPIO_Init+0x21e>
 8027c76:	687b      	ldr	r3, [r7, #4]
 8027c78:	4a4e      	ldr	r2, [pc, #312]	; (8027db4 <HAL_GPIO_Init+0x31c>)
 8027c7a:	4293      	cmp	r3, r2
 8027c7c:	d019      	beq.n	8027cb2 <HAL_GPIO_Init+0x21a>
 8027c7e:	687b      	ldr	r3, [r7, #4]
 8027c80:	4a4d      	ldr	r2, [pc, #308]	; (8027db8 <HAL_GPIO_Init+0x320>)
 8027c82:	4293      	cmp	r3, r2
 8027c84:	d013      	beq.n	8027cae <HAL_GPIO_Init+0x216>
 8027c86:	687b      	ldr	r3, [r7, #4]
 8027c88:	4a4c      	ldr	r2, [pc, #304]	; (8027dbc <HAL_GPIO_Init+0x324>)
 8027c8a:	4293      	cmp	r3, r2
 8027c8c:	d00d      	beq.n	8027caa <HAL_GPIO_Init+0x212>
 8027c8e:	687b      	ldr	r3, [r7, #4]
 8027c90:	4a4b      	ldr	r2, [pc, #300]	; (8027dc0 <HAL_GPIO_Init+0x328>)
 8027c92:	4293      	cmp	r3, r2
 8027c94:	d007      	beq.n	8027ca6 <HAL_GPIO_Init+0x20e>
 8027c96:	687b      	ldr	r3, [r7, #4]
 8027c98:	4a4a      	ldr	r2, [pc, #296]	; (8027dc4 <HAL_GPIO_Init+0x32c>)
 8027c9a:	4293      	cmp	r3, r2
 8027c9c:	d101      	bne.n	8027ca2 <HAL_GPIO_Init+0x20a>
 8027c9e:	2307      	movs	r3, #7
 8027ca0:	e00e      	b.n	8027cc0 <HAL_GPIO_Init+0x228>
 8027ca2:	2308      	movs	r3, #8
 8027ca4:	e00c      	b.n	8027cc0 <HAL_GPIO_Init+0x228>
 8027ca6:	2306      	movs	r3, #6
 8027ca8:	e00a      	b.n	8027cc0 <HAL_GPIO_Init+0x228>
 8027caa:	2305      	movs	r3, #5
 8027cac:	e008      	b.n	8027cc0 <HAL_GPIO_Init+0x228>
 8027cae:	2304      	movs	r3, #4
 8027cb0:	e006      	b.n	8027cc0 <HAL_GPIO_Init+0x228>
 8027cb2:	2303      	movs	r3, #3
 8027cb4:	e004      	b.n	8027cc0 <HAL_GPIO_Init+0x228>
 8027cb6:	2302      	movs	r3, #2
 8027cb8:	e002      	b.n	8027cc0 <HAL_GPIO_Init+0x228>
 8027cba:	2301      	movs	r3, #1
 8027cbc:	e000      	b.n	8027cc0 <HAL_GPIO_Init+0x228>
 8027cbe:	2300      	movs	r3, #0
 8027cc0:	69fa      	ldr	r2, [r7, #28]
 8027cc2:	f002 0203 	and.w	r2, r2, #3
 8027cc6:	0092      	lsls	r2, r2, #2
 8027cc8:	4093      	lsls	r3, r2
 8027cca:	69ba      	ldr	r2, [r7, #24]
 8027ccc:	4313      	orrs	r3, r2
 8027cce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8027cd0:	4934      	ldr	r1, [pc, #208]	; (8027da4 <HAL_GPIO_Init+0x30c>)
 8027cd2:	69fb      	ldr	r3, [r7, #28]
 8027cd4:	089b      	lsrs	r3, r3, #2
 8027cd6:	3302      	adds	r3, #2
 8027cd8:	69ba      	ldr	r2, [r7, #24]
 8027cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8027cde:	4b3a      	ldr	r3, [pc, #232]	; (8027dc8 <HAL_GPIO_Init+0x330>)
 8027ce0:	681b      	ldr	r3, [r3, #0]
 8027ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027ce4:	693b      	ldr	r3, [r7, #16]
 8027ce6:	43db      	mvns	r3, r3
 8027ce8:	69ba      	ldr	r2, [r7, #24]
 8027cea:	4013      	ands	r3, r2
 8027cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8027cee:	683b      	ldr	r3, [r7, #0]
 8027cf0:	685b      	ldr	r3, [r3, #4]
 8027cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8027cf6:	2b00      	cmp	r3, #0
 8027cf8:	d003      	beq.n	8027d02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8027cfa:	69ba      	ldr	r2, [r7, #24]
 8027cfc:	693b      	ldr	r3, [r7, #16]
 8027cfe:	4313      	orrs	r3, r2
 8027d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8027d02:	4a31      	ldr	r2, [pc, #196]	; (8027dc8 <HAL_GPIO_Init+0x330>)
 8027d04:	69bb      	ldr	r3, [r7, #24]
 8027d06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8027d08:	4b2f      	ldr	r3, [pc, #188]	; (8027dc8 <HAL_GPIO_Init+0x330>)
 8027d0a:	685b      	ldr	r3, [r3, #4]
 8027d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027d0e:	693b      	ldr	r3, [r7, #16]
 8027d10:	43db      	mvns	r3, r3
 8027d12:	69ba      	ldr	r2, [r7, #24]
 8027d14:	4013      	ands	r3, r2
 8027d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8027d18:	683b      	ldr	r3, [r7, #0]
 8027d1a:	685b      	ldr	r3, [r3, #4]
 8027d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027d20:	2b00      	cmp	r3, #0
 8027d22:	d003      	beq.n	8027d2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8027d24:	69ba      	ldr	r2, [r7, #24]
 8027d26:	693b      	ldr	r3, [r7, #16]
 8027d28:	4313      	orrs	r3, r2
 8027d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8027d2c:	4a26      	ldr	r2, [pc, #152]	; (8027dc8 <HAL_GPIO_Init+0x330>)
 8027d2e:	69bb      	ldr	r3, [r7, #24]
 8027d30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8027d32:	4b25      	ldr	r3, [pc, #148]	; (8027dc8 <HAL_GPIO_Init+0x330>)
 8027d34:	689b      	ldr	r3, [r3, #8]
 8027d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027d38:	693b      	ldr	r3, [r7, #16]
 8027d3a:	43db      	mvns	r3, r3
 8027d3c:	69ba      	ldr	r2, [r7, #24]
 8027d3e:	4013      	ands	r3, r2
 8027d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8027d42:	683b      	ldr	r3, [r7, #0]
 8027d44:	685b      	ldr	r3, [r3, #4]
 8027d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8027d4a:	2b00      	cmp	r3, #0
 8027d4c:	d003      	beq.n	8027d56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8027d4e:	69ba      	ldr	r2, [r7, #24]
 8027d50:	693b      	ldr	r3, [r7, #16]
 8027d52:	4313      	orrs	r3, r2
 8027d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8027d56:	4a1c      	ldr	r2, [pc, #112]	; (8027dc8 <HAL_GPIO_Init+0x330>)
 8027d58:	69bb      	ldr	r3, [r7, #24]
 8027d5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8027d5c:	4b1a      	ldr	r3, [pc, #104]	; (8027dc8 <HAL_GPIO_Init+0x330>)
 8027d5e:	68db      	ldr	r3, [r3, #12]
 8027d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027d62:	693b      	ldr	r3, [r7, #16]
 8027d64:	43db      	mvns	r3, r3
 8027d66:	69ba      	ldr	r2, [r7, #24]
 8027d68:	4013      	ands	r3, r2
 8027d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8027d6c:	683b      	ldr	r3, [r7, #0]
 8027d6e:	685b      	ldr	r3, [r3, #4]
 8027d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8027d74:	2b00      	cmp	r3, #0
 8027d76:	d003      	beq.n	8027d80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8027d78:	69ba      	ldr	r2, [r7, #24]
 8027d7a:	693b      	ldr	r3, [r7, #16]
 8027d7c:	4313      	orrs	r3, r2
 8027d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8027d80:	4a11      	ldr	r2, [pc, #68]	; (8027dc8 <HAL_GPIO_Init+0x330>)
 8027d82:	69bb      	ldr	r3, [r7, #24]
 8027d84:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8027d86:	69fb      	ldr	r3, [r7, #28]
 8027d88:	3301      	adds	r3, #1
 8027d8a:	61fb      	str	r3, [r7, #28]
 8027d8c:	69fb      	ldr	r3, [r7, #28]
 8027d8e:	2b0f      	cmp	r3, #15
 8027d90:	f67f ae90 	bls.w	8027ab4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8027d94:	bf00      	nop
 8027d96:	3724      	adds	r7, #36	; 0x24
 8027d98:	46bd      	mov	sp, r7
 8027d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027d9e:	4770      	bx	lr
 8027da0:	40023800 	.word	0x40023800
 8027da4:	40013800 	.word	0x40013800
 8027da8:	40020000 	.word	0x40020000
 8027dac:	40020400 	.word	0x40020400
 8027db0:	40020800 	.word	0x40020800
 8027db4:	40020c00 	.word	0x40020c00
 8027db8:	40021000 	.word	0x40021000
 8027dbc:	40021400 	.word	0x40021400
 8027dc0:	40021800 	.word	0x40021800
 8027dc4:	40021c00 	.word	0x40021c00
 8027dc8:	40013c00 	.word	0x40013c00

08027dcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8027dcc:	b480      	push	{r7}
 8027dce:	b085      	sub	sp, #20
 8027dd0:	af00      	add	r7, sp, #0
 8027dd2:	6078      	str	r0, [r7, #4]
 8027dd4:	460b      	mov	r3, r1
 8027dd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8027dd8:	687b      	ldr	r3, [r7, #4]
 8027dda:	691a      	ldr	r2, [r3, #16]
 8027ddc:	887b      	ldrh	r3, [r7, #2]
 8027dde:	4013      	ands	r3, r2
 8027de0:	2b00      	cmp	r3, #0
 8027de2:	d002      	beq.n	8027dea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8027de4:	2301      	movs	r3, #1
 8027de6:	73fb      	strb	r3, [r7, #15]
 8027de8:	e001      	b.n	8027dee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8027dea:	2300      	movs	r3, #0
 8027dec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8027dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8027df0:	4618      	mov	r0, r3
 8027df2:	3714      	adds	r7, #20
 8027df4:	46bd      	mov	sp, r7
 8027df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027dfa:	4770      	bx	lr

08027dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8027dfc:	b480      	push	{r7}
 8027dfe:	b083      	sub	sp, #12
 8027e00:	af00      	add	r7, sp, #0
 8027e02:	6078      	str	r0, [r7, #4]
 8027e04:	460b      	mov	r3, r1
 8027e06:	807b      	strh	r3, [r7, #2]
 8027e08:	4613      	mov	r3, r2
 8027e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8027e0c:	787b      	ldrb	r3, [r7, #1]
 8027e0e:	2b00      	cmp	r3, #0
 8027e10:	d003      	beq.n	8027e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8027e12:	887a      	ldrh	r2, [r7, #2]
 8027e14:	687b      	ldr	r3, [r7, #4]
 8027e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8027e18:	e003      	b.n	8027e22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8027e1a:	887b      	ldrh	r3, [r7, #2]
 8027e1c:	041a      	lsls	r2, r3, #16
 8027e1e:	687b      	ldr	r3, [r7, #4]
 8027e20:	619a      	str	r2, [r3, #24]
}
 8027e22:	bf00      	nop
 8027e24:	370c      	adds	r7, #12
 8027e26:	46bd      	mov	sp, r7
 8027e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e2c:	4770      	bx	lr
	...

08027e30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8027e30:	b580      	push	{r7, lr}
 8027e32:	b084      	sub	sp, #16
 8027e34:	af00      	add	r7, sp, #0
 8027e36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8027e38:	687b      	ldr	r3, [r7, #4]
 8027e3a:	2b00      	cmp	r3, #0
 8027e3c:	d101      	bne.n	8027e42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8027e3e:	2301      	movs	r3, #1
 8027e40:	e11f      	b.n	8028082 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8027e42:	687b      	ldr	r3, [r7, #4]
 8027e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8027e48:	b2db      	uxtb	r3, r3
 8027e4a:	2b00      	cmp	r3, #0
 8027e4c:	d106      	bne.n	8027e5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8027e4e:	687b      	ldr	r3, [r7, #4]
 8027e50:	2200      	movs	r2, #0
 8027e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8027e56:	6878      	ldr	r0, [r7, #4]
 8027e58:	f7fd fbea 	bl	8025630 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8027e5c:	687b      	ldr	r3, [r7, #4]
 8027e5e:	2224      	movs	r2, #36	; 0x24
 8027e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8027e64:	687b      	ldr	r3, [r7, #4]
 8027e66:	681b      	ldr	r3, [r3, #0]
 8027e68:	681a      	ldr	r2, [r3, #0]
 8027e6a:	687b      	ldr	r3, [r7, #4]
 8027e6c:	681b      	ldr	r3, [r3, #0]
 8027e6e:	f022 0201 	bic.w	r2, r2, #1
 8027e72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8027e74:	687b      	ldr	r3, [r7, #4]
 8027e76:	681b      	ldr	r3, [r3, #0]
 8027e78:	681a      	ldr	r2, [r3, #0]
 8027e7a:	687b      	ldr	r3, [r7, #4]
 8027e7c:	681b      	ldr	r3, [r3, #0]
 8027e7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8027e82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8027e84:	687b      	ldr	r3, [r7, #4]
 8027e86:	681b      	ldr	r3, [r3, #0]
 8027e88:	681a      	ldr	r2, [r3, #0]
 8027e8a:	687b      	ldr	r3, [r7, #4]
 8027e8c:	681b      	ldr	r3, [r3, #0]
 8027e8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8027e92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8027e94:	f000 fd18 	bl	80288c8 <HAL_RCC_GetPCLK1Freq>
 8027e98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8027e9a:	687b      	ldr	r3, [r7, #4]
 8027e9c:	685b      	ldr	r3, [r3, #4]
 8027e9e:	4a7b      	ldr	r2, [pc, #492]	; (802808c <HAL_I2C_Init+0x25c>)
 8027ea0:	4293      	cmp	r3, r2
 8027ea2:	d807      	bhi.n	8027eb4 <HAL_I2C_Init+0x84>
 8027ea4:	68fb      	ldr	r3, [r7, #12]
 8027ea6:	4a7a      	ldr	r2, [pc, #488]	; (8028090 <HAL_I2C_Init+0x260>)
 8027ea8:	4293      	cmp	r3, r2
 8027eaa:	bf94      	ite	ls
 8027eac:	2301      	movls	r3, #1
 8027eae:	2300      	movhi	r3, #0
 8027eb0:	b2db      	uxtb	r3, r3
 8027eb2:	e006      	b.n	8027ec2 <HAL_I2C_Init+0x92>
 8027eb4:	68fb      	ldr	r3, [r7, #12]
 8027eb6:	4a77      	ldr	r2, [pc, #476]	; (8028094 <HAL_I2C_Init+0x264>)
 8027eb8:	4293      	cmp	r3, r2
 8027eba:	bf94      	ite	ls
 8027ebc:	2301      	movls	r3, #1
 8027ebe:	2300      	movhi	r3, #0
 8027ec0:	b2db      	uxtb	r3, r3
 8027ec2:	2b00      	cmp	r3, #0
 8027ec4:	d001      	beq.n	8027eca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8027ec6:	2301      	movs	r3, #1
 8027ec8:	e0db      	b.n	8028082 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8027eca:	68fb      	ldr	r3, [r7, #12]
 8027ecc:	4a72      	ldr	r2, [pc, #456]	; (8028098 <HAL_I2C_Init+0x268>)
 8027ece:	fba2 2303 	umull	r2, r3, r2, r3
 8027ed2:	0c9b      	lsrs	r3, r3, #18
 8027ed4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8027ed6:	687b      	ldr	r3, [r7, #4]
 8027ed8:	681b      	ldr	r3, [r3, #0]
 8027eda:	685b      	ldr	r3, [r3, #4]
 8027edc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8027ee0:	687b      	ldr	r3, [r7, #4]
 8027ee2:	681b      	ldr	r3, [r3, #0]
 8027ee4:	68ba      	ldr	r2, [r7, #8]
 8027ee6:	430a      	orrs	r2, r1
 8027ee8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8027eea:	687b      	ldr	r3, [r7, #4]
 8027eec:	681b      	ldr	r3, [r3, #0]
 8027eee:	6a1b      	ldr	r3, [r3, #32]
 8027ef0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8027ef4:	687b      	ldr	r3, [r7, #4]
 8027ef6:	685b      	ldr	r3, [r3, #4]
 8027ef8:	4a64      	ldr	r2, [pc, #400]	; (802808c <HAL_I2C_Init+0x25c>)
 8027efa:	4293      	cmp	r3, r2
 8027efc:	d802      	bhi.n	8027f04 <HAL_I2C_Init+0xd4>
 8027efe:	68bb      	ldr	r3, [r7, #8]
 8027f00:	3301      	adds	r3, #1
 8027f02:	e009      	b.n	8027f18 <HAL_I2C_Init+0xe8>
 8027f04:	68bb      	ldr	r3, [r7, #8]
 8027f06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8027f0a:	fb02 f303 	mul.w	r3, r2, r3
 8027f0e:	4a63      	ldr	r2, [pc, #396]	; (802809c <HAL_I2C_Init+0x26c>)
 8027f10:	fba2 2303 	umull	r2, r3, r2, r3
 8027f14:	099b      	lsrs	r3, r3, #6
 8027f16:	3301      	adds	r3, #1
 8027f18:	687a      	ldr	r2, [r7, #4]
 8027f1a:	6812      	ldr	r2, [r2, #0]
 8027f1c:	430b      	orrs	r3, r1
 8027f1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8027f20:	687b      	ldr	r3, [r7, #4]
 8027f22:	681b      	ldr	r3, [r3, #0]
 8027f24:	69db      	ldr	r3, [r3, #28]
 8027f26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8027f2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8027f2e:	687b      	ldr	r3, [r7, #4]
 8027f30:	685b      	ldr	r3, [r3, #4]
 8027f32:	4956      	ldr	r1, [pc, #344]	; (802808c <HAL_I2C_Init+0x25c>)
 8027f34:	428b      	cmp	r3, r1
 8027f36:	d80d      	bhi.n	8027f54 <HAL_I2C_Init+0x124>
 8027f38:	68fb      	ldr	r3, [r7, #12]
 8027f3a:	1e59      	subs	r1, r3, #1
 8027f3c:	687b      	ldr	r3, [r7, #4]
 8027f3e:	685b      	ldr	r3, [r3, #4]
 8027f40:	005b      	lsls	r3, r3, #1
 8027f42:	fbb1 f3f3 	udiv	r3, r1, r3
 8027f46:	3301      	adds	r3, #1
 8027f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027f4c:	2b04      	cmp	r3, #4
 8027f4e:	bf38      	it	cc
 8027f50:	2304      	movcc	r3, #4
 8027f52:	e04f      	b.n	8027ff4 <HAL_I2C_Init+0x1c4>
 8027f54:	687b      	ldr	r3, [r7, #4]
 8027f56:	689b      	ldr	r3, [r3, #8]
 8027f58:	2b00      	cmp	r3, #0
 8027f5a:	d111      	bne.n	8027f80 <HAL_I2C_Init+0x150>
 8027f5c:	68fb      	ldr	r3, [r7, #12]
 8027f5e:	1e58      	subs	r0, r3, #1
 8027f60:	687b      	ldr	r3, [r7, #4]
 8027f62:	6859      	ldr	r1, [r3, #4]
 8027f64:	460b      	mov	r3, r1
 8027f66:	005b      	lsls	r3, r3, #1
 8027f68:	440b      	add	r3, r1
 8027f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8027f6e:	3301      	adds	r3, #1
 8027f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027f74:	2b00      	cmp	r3, #0
 8027f76:	bf0c      	ite	eq
 8027f78:	2301      	moveq	r3, #1
 8027f7a:	2300      	movne	r3, #0
 8027f7c:	b2db      	uxtb	r3, r3
 8027f7e:	e012      	b.n	8027fa6 <HAL_I2C_Init+0x176>
 8027f80:	68fb      	ldr	r3, [r7, #12]
 8027f82:	1e58      	subs	r0, r3, #1
 8027f84:	687b      	ldr	r3, [r7, #4]
 8027f86:	6859      	ldr	r1, [r3, #4]
 8027f88:	460b      	mov	r3, r1
 8027f8a:	009b      	lsls	r3, r3, #2
 8027f8c:	440b      	add	r3, r1
 8027f8e:	0099      	lsls	r1, r3, #2
 8027f90:	440b      	add	r3, r1
 8027f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8027f96:	3301      	adds	r3, #1
 8027f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027f9c:	2b00      	cmp	r3, #0
 8027f9e:	bf0c      	ite	eq
 8027fa0:	2301      	moveq	r3, #1
 8027fa2:	2300      	movne	r3, #0
 8027fa4:	b2db      	uxtb	r3, r3
 8027fa6:	2b00      	cmp	r3, #0
 8027fa8:	d001      	beq.n	8027fae <HAL_I2C_Init+0x17e>
 8027faa:	2301      	movs	r3, #1
 8027fac:	e022      	b.n	8027ff4 <HAL_I2C_Init+0x1c4>
 8027fae:	687b      	ldr	r3, [r7, #4]
 8027fb0:	689b      	ldr	r3, [r3, #8]
 8027fb2:	2b00      	cmp	r3, #0
 8027fb4:	d10e      	bne.n	8027fd4 <HAL_I2C_Init+0x1a4>
 8027fb6:	68fb      	ldr	r3, [r7, #12]
 8027fb8:	1e58      	subs	r0, r3, #1
 8027fba:	687b      	ldr	r3, [r7, #4]
 8027fbc:	6859      	ldr	r1, [r3, #4]
 8027fbe:	460b      	mov	r3, r1
 8027fc0:	005b      	lsls	r3, r3, #1
 8027fc2:	440b      	add	r3, r1
 8027fc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8027fc8:	3301      	adds	r3, #1
 8027fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8027fd2:	e00f      	b.n	8027ff4 <HAL_I2C_Init+0x1c4>
 8027fd4:	68fb      	ldr	r3, [r7, #12]
 8027fd6:	1e58      	subs	r0, r3, #1
 8027fd8:	687b      	ldr	r3, [r7, #4]
 8027fda:	6859      	ldr	r1, [r3, #4]
 8027fdc:	460b      	mov	r3, r1
 8027fde:	009b      	lsls	r3, r3, #2
 8027fe0:	440b      	add	r3, r1
 8027fe2:	0099      	lsls	r1, r3, #2
 8027fe4:	440b      	add	r3, r1
 8027fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8027fea:	3301      	adds	r3, #1
 8027fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8027ff0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8027ff4:	6879      	ldr	r1, [r7, #4]
 8027ff6:	6809      	ldr	r1, [r1, #0]
 8027ff8:	4313      	orrs	r3, r2
 8027ffa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8027ffc:	687b      	ldr	r3, [r7, #4]
 8027ffe:	681b      	ldr	r3, [r3, #0]
 8028000:	681b      	ldr	r3, [r3, #0]
 8028002:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8028006:	687b      	ldr	r3, [r7, #4]
 8028008:	69da      	ldr	r2, [r3, #28]
 802800a:	687b      	ldr	r3, [r7, #4]
 802800c:	6a1b      	ldr	r3, [r3, #32]
 802800e:	431a      	orrs	r2, r3
 8028010:	687b      	ldr	r3, [r7, #4]
 8028012:	681b      	ldr	r3, [r3, #0]
 8028014:	430a      	orrs	r2, r1
 8028016:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8028018:	687b      	ldr	r3, [r7, #4]
 802801a:	681b      	ldr	r3, [r3, #0]
 802801c:	689b      	ldr	r3, [r3, #8]
 802801e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8028022:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8028026:	687a      	ldr	r2, [r7, #4]
 8028028:	6911      	ldr	r1, [r2, #16]
 802802a:	687a      	ldr	r2, [r7, #4]
 802802c:	68d2      	ldr	r2, [r2, #12]
 802802e:	4311      	orrs	r1, r2
 8028030:	687a      	ldr	r2, [r7, #4]
 8028032:	6812      	ldr	r2, [r2, #0]
 8028034:	430b      	orrs	r3, r1
 8028036:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8028038:	687b      	ldr	r3, [r7, #4]
 802803a:	681b      	ldr	r3, [r3, #0]
 802803c:	68db      	ldr	r3, [r3, #12]
 802803e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8028042:	687b      	ldr	r3, [r7, #4]
 8028044:	695a      	ldr	r2, [r3, #20]
 8028046:	687b      	ldr	r3, [r7, #4]
 8028048:	699b      	ldr	r3, [r3, #24]
 802804a:	431a      	orrs	r2, r3
 802804c:	687b      	ldr	r3, [r7, #4]
 802804e:	681b      	ldr	r3, [r3, #0]
 8028050:	430a      	orrs	r2, r1
 8028052:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8028054:	687b      	ldr	r3, [r7, #4]
 8028056:	681b      	ldr	r3, [r3, #0]
 8028058:	681a      	ldr	r2, [r3, #0]
 802805a:	687b      	ldr	r3, [r7, #4]
 802805c:	681b      	ldr	r3, [r3, #0]
 802805e:	f042 0201 	orr.w	r2, r2, #1
 8028062:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8028064:	687b      	ldr	r3, [r7, #4]
 8028066:	2200      	movs	r2, #0
 8028068:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 802806a:	687b      	ldr	r3, [r7, #4]
 802806c:	2220      	movs	r2, #32
 802806e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8028072:	687b      	ldr	r3, [r7, #4]
 8028074:	2200      	movs	r2, #0
 8028076:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8028078:	687b      	ldr	r3, [r7, #4]
 802807a:	2200      	movs	r2, #0
 802807c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8028080:	2300      	movs	r3, #0
}
 8028082:	4618      	mov	r0, r3
 8028084:	3710      	adds	r7, #16
 8028086:	46bd      	mov	sp, r7
 8028088:	bd80      	pop	{r7, pc}
 802808a:	bf00      	nop
 802808c:	000186a0 	.word	0x000186a0
 8028090:	001e847f 	.word	0x001e847f
 8028094:	003d08ff 	.word	0x003d08ff
 8028098:	431bde83 	.word	0x431bde83
 802809c:	10624dd3 	.word	0x10624dd3

080280a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80280a0:	b580      	push	{r7, lr}
 80280a2:	b086      	sub	sp, #24
 80280a4:	af00      	add	r7, sp, #0
 80280a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80280a8:	687b      	ldr	r3, [r7, #4]
 80280aa:	2b00      	cmp	r3, #0
 80280ac:	d101      	bne.n	80280b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80280ae:	2301      	movs	r3, #1
 80280b0:	e25b      	b.n	802856a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80280b2:	687b      	ldr	r3, [r7, #4]
 80280b4:	681b      	ldr	r3, [r3, #0]
 80280b6:	f003 0301 	and.w	r3, r3, #1
 80280ba:	2b00      	cmp	r3, #0
 80280bc:	d075      	beq.n	80281aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80280be:	4ba3      	ldr	r3, [pc, #652]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 80280c0:	689b      	ldr	r3, [r3, #8]
 80280c2:	f003 030c 	and.w	r3, r3, #12
 80280c6:	2b04      	cmp	r3, #4
 80280c8:	d00c      	beq.n	80280e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80280ca:	4ba0      	ldr	r3, [pc, #640]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 80280cc:	689b      	ldr	r3, [r3, #8]
 80280ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80280d2:	2b08      	cmp	r3, #8
 80280d4:	d112      	bne.n	80280fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80280d6:	4b9d      	ldr	r3, [pc, #628]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 80280d8:	685b      	ldr	r3, [r3, #4]
 80280da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80280de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80280e2:	d10b      	bne.n	80280fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80280e4:	4b99      	ldr	r3, [pc, #612]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 80280e6:	681b      	ldr	r3, [r3, #0]
 80280e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80280ec:	2b00      	cmp	r3, #0
 80280ee:	d05b      	beq.n	80281a8 <HAL_RCC_OscConfig+0x108>
 80280f0:	687b      	ldr	r3, [r7, #4]
 80280f2:	685b      	ldr	r3, [r3, #4]
 80280f4:	2b00      	cmp	r3, #0
 80280f6:	d157      	bne.n	80281a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80280f8:	2301      	movs	r3, #1
 80280fa:	e236      	b.n	802856a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80280fc:	687b      	ldr	r3, [r7, #4]
 80280fe:	685b      	ldr	r3, [r3, #4]
 8028100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8028104:	d106      	bne.n	8028114 <HAL_RCC_OscConfig+0x74>
 8028106:	4b91      	ldr	r3, [pc, #580]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 8028108:	681b      	ldr	r3, [r3, #0]
 802810a:	4a90      	ldr	r2, [pc, #576]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 802810c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8028110:	6013      	str	r3, [r2, #0]
 8028112:	e01d      	b.n	8028150 <HAL_RCC_OscConfig+0xb0>
 8028114:	687b      	ldr	r3, [r7, #4]
 8028116:	685b      	ldr	r3, [r3, #4]
 8028118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 802811c:	d10c      	bne.n	8028138 <HAL_RCC_OscConfig+0x98>
 802811e:	4b8b      	ldr	r3, [pc, #556]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 8028120:	681b      	ldr	r3, [r3, #0]
 8028122:	4a8a      	ldr	r2, [pc, #552]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 8028124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8028128:	6013      	str	r3, [r2, #0]
 802812a:	4b88      	ldr	r3, [pc, #544]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 802812c:	681b      	ldr	r3, [r3, #0]
 802812e:	4a87      	ldr	r2, [pc, #540]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 8028130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8028134:	6013      	str	r3, [r2, #0]
 8028136:	e00b      	b.n	8028150 <HAL_RCC_OscConfig+0xb0>
 8028138:	4b84      	ldr	r3, [pc, #528]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 802813a:	681b      	ldr	r3, [r3, #0]
 802813c:	4a83      	ldr	r2, [pc, #524]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 802813e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8028142:	6013      	str	r3, [r2, #0]
 8028144:	4b81      	ldr	r3, [pc, #516]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 8028146:	681b      	ldr	r3, [r3, #0]
 8028148:	4a80      	ldr	r2, [pc, #512]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 802814a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802814e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8028150:	687b      	ldr	r3, [r7, #4]
 8028152:	685b      	ldr	r3, [r3, #4]
 8028154:	2b00      	cmp	r3, #0
 8028156:	d013      	beq.n	8028180 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028158:	f7fe f926 	bl	80263a8 <HAL_GetTick>
 802815c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802815e:	e008      	b.n	8028172 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8028160:	f7fe f922 	bl	80263a8 <HAL_GetTick>
 8028164:	4602      	mov	r2, r0
 8028166:	693b      	ldr	r3, [r7, #16]
 8028168:	1ad3      	subs	r3, r2, r3
 802816a:	2b64      	cmp	r3, #100	; 0x64
 802816c:	d901      	bls.n	8028172 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 802816e:	2303      	movs	r3, #3
 8028170:	e1fb      	b.n	802856a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8028172:	4b76      	ldr	r3, [pc, #472]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 8028174:	681b      	ldr	r3, [r3, #0]
 8028176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802817a:	2b00      	cmp	r3, #0
 802817c:	d0f0      	beq.n	8028160 <HAL_RCC_OscConfig+0xc0>
 802817e:	e014      	b.n	80281aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028180:	f7fe f912 	bl	80263a8 <HAL_GetTick>
 8028184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8028186:	e008      	b.n	802819a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8028188:	f7fe f90e 	bl	80263a8 <HAL_GetTick>
 802818c:	4602      	mov	r2, r0
 802818e:	693b      	ldr	r3, [r7, #16]
 8028190:	1ad3      	subs	r3, r2, r3
 8028192:	2b64      	cmp	r3, #100	; 0x64
 8028194:	d901      	bls.n	802819a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8028196:	2303      	movs	r3, #3
 8028198:	e1e7      	b.n	802856a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802819a:	4b6c      	ldr	r3, [pc, #432]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 802819c:	681b      	ldr	r3, [r3, #0]
 802819e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80281a2:	2b00      	cmp	r3, #0
 80281a4:	d1f0      	bne.n	8028188 <HAL_RCC_OscConfig+0xe8>
 80281a6:	e000      	b.n	80281aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80281a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80281aa:	687b      	ldr	r3, [r7, #4]
 80281ac:	681b      	ldr	r3, [r3, #0]
 80281ae:	f003 0302 	and.w	r3, r3, #2
 80281b2:	2b00      	cmp	r3, #0
 80281b4:	d063      	beq.n	802827e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80281b6:	4b65      	ldr	r3, [pc, #404]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 80281b8:	689b      	ldr	r3, [r3, #8]
 80281ba:	f003 030c 	and.w	r3, r3, #12
 80281be:	2b00      	cmp	r3, #0
 80281c0:	d00b      	beq.n	80281da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80281c2:	4b62      	ldr	r3, [pc, #392]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 80281c4:	689b      	ldr	r3, [r3, #8]
 80281c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80281ca:	2b08      	cmp	r3, #8
 80281cc:	d11c      	bne.n	8028208 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80281ce:	4b5f      	ldr	r3, [pc, #380]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 80281d0:	685b      	ldr	r3, [r3, #4]
 80281d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80281d6:	2b00      	cmp	r3, #0
 80281d8:	d116      	bne.n	8028208 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80281da:	4b5c      	ldr	r3, [pc, #368]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 80281dc:	681b      	ldr	r3, [r3, #0]
 80281de:	f003 0302 	and.w	r3, r3, #2
 80281e2:	2b00      	cmp	r3, #0
 80281e4:	d005      	beq.n	80281f2 <HAL_RCC_OscConfig+0x152>
 80281e6:	687b      	ldr	r3, [r7, #4]
 80281e8:	68db      	ldr	r3, [r3, #12]
 80281ea:	2b01      	cmp	r3, #1
 80281ec:	d001      	beq.n	80281f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80281ee:	2301      	movs	r3, #1
 80281f0:	e1bb      	b.n	802856a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80281f2:	4b56      	ldr	r3, [pc, #344]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 80281f4:	681b      	ldr	r3, [r3, #0]
 80281f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80281fa:	687b      	ldr	r3, [r7, #4]
 80281fc:	691b      	ldr	r3, [r3, #16]
 80281fe:	00db      	lsls	r3, r3, #3
 8028200:	4952      	ldr	r1, [pc, #328]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 8028202:	4313      	orrs	r3, r2
 8028204:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8028206:	e03a      	b.n	802827e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8028208:	687b      	ldr	r3, [r7, #4]
 802820a:	68db      	ldr	r3, [r3, #12]
 802820c:	2b00      	cmp	r3, #0
 802820e:	d020      	beq.n	8028252 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8028210:	4b4f      	ldr	r3, [pc, #316]	; (8028350 <HAL_RCC_OscConfig+0x2b0>)
 8028212:	2201      	movs	r2, #1
 8028214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8028216:	f7fe f8c7 	bl	80263a8 <HAL_GetTick>
 802821a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802821c:	e008      	b.n	8028230 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802821e:	f7fe f8c3 	bl	80263a8 <HAL_GetTick>
 8028222:	4602      	mov	r2, r0
 8028224:	693b      	ldr	r3, [r7, #16]
 8028226:	1ad3      	subs	r3, r2, r3
 8028228:	2b02      	cmp	r3, #2
 802822a:	d901      	bls.n	8028230 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 802822c:	2303      	movs	r3, #3
 802822e:	e19c      	b.n	802856a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8028230:	4b46      	ldr	r3, [pc, #280]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 8028232:	681b      	ldr	r3, [r3, #0]
 8028234:	f003 0302 	and.w	r3, r3, #2
 8028238:	2b00      	cmp	r3, #0
 802823a:	d0f0      	beq.n	802821e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 802823c:	4b43      	ldr	r3, [pc, #268]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 802823e:	681b      	ldr	r3, [r3, #0]
 8028240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8028244:	687b      	ldr	r3, [r7, #4]
 8028246:	691b      	ldr	r3, [r3, #16]
 8028248:	00db      	lsls	r3, r3, #3
 802824a:	4940      	ldr	r1, [pc, #256]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 802824c:	4313      	orrs	r3, r2
 802824e:	600b      	str	r3, [r1, #0]
 8028250:	e015      	b.n	802827e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8028252:	4b3f      	ldr	r3, [pc, #252]	; (8028350 <HAL_RCC_OscConfig+0x2b0>)
 8028254:	2200      	movs	r2, #0
 8028256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8028258:	f7fe f8a6 	bl	80263a8 <HAL_GetTick>
 802825c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802825e:	e008      	b.n	8028272 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8028260:	f7fe f8a2 	bl	80263a8 <HAL_GetTick>
 8028264:	4602      	mov	r2, r0
 8028266:	693b      	ldr	r3, [r7, #16]
 8028268:	1ad3      	subs	r3, r2, r3
 802826a:	2b02      	cmp	r3, #2
 802826c:	d901      	bls.n	8028272 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 802826e:	2303      	movs	r3, #3
 8028270:	e17b      	b.n	802856a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8028272:	4b36      	ldr	r3, [pc, #216]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 8028274:	681b      	ldr	r3, [r3, #0]
 8028276:	f003 0302 	and.w	r3, r3, #2
 802827a:	2b00      	cmp	r3, #0
 802827c:	d1f0      	bne.n	8028260 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802827e:	687b      	ldr	r3, [r7, #4]
 8028280:	681b      	ldr	r3, [r3, #0]
 8028282:	f003 0308 	and.w	r3, r3, #8
 8028286:	2b00      	cmp	r3, #0
 8028288:	d030      	beq.n	80282ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 802828a:	687b      	ldr	r3, [r7, #4]
 802828c:	695b      	ldr	r3, [r3, #20]
 802828e:	2b00      	cmp	r3, #0
 8028290:	d016      	beq.n	80282c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8028292:	4b30      	ldr	r3, [pc, #192]	; (8028354 <HAL_RCC_OscConfig+0x2b4>)
 8028294:	2201      	movs	r2, #1
 8028296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8028298:	f7fe f886 	bl	80263a8 <HAL_GetTick>
 802829c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802829e:	e008      	b.n	80282b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80282a0:	f7fe f882 	bl	80263a8 <HAL_GetTick>
 80282a4:	4602      	mov	r2, r0
 80282a6:	693b      	ldr	r3, [r7, #16]
 80282a8:	1ad3      	subs	r3, r2, r3
 80282aa:	2b02      	cmp	r3, #2
 80282ac:	d901      	bls.n	80282b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80282ae:	2303      	movs	r3, #3
 80282b0:	e15b      	b.n	802856a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80282b2:	4b26      	ldr	r3, [pc, #152]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 80282b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80282b6:	f003 0302 	and.w	r3, r3, #2
 80282ba:	2b00      	cmp	r3, #0
 80282bc:	d0f0      	beq.n	80282a0 <HAL_RCC_OscConfig+0x200>
 80282be:	e015      	b.n	80282ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80282c0:	4b24      	ldr	r3, [pc, #144]	; (8028354 <HAL_RCC_OscConfig+0x2b4>)
 80282c2:	2200      	movs	r2, #0
 80282c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80282c6:	f7fe f86f 	bl	80263a8 <HAL_GetTick>
 80282ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80282cc:	e008      	b.n	80282e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80282ce:	f7fe f86b 	bl	80263a8 <HAL_GetTick>
 80282d2:	4602      	mov	r2, r0
 80282d4:	693b      	ldr	r3, [r7, #16]
 80282d6:	1ad3      	subs	r3, r2, r3
 80282d8:	2b02      	cmp	r3, #2
 80282da:	d901      	bls.n	80282e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80282dc:	2303      	movs	r3, #3
 80282de:	e144      	b.n	802856a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80282e0:	4b1a      	ldr	r3, [pc, #104]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 80282e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80282e4:	f003 0302 	and.w	r3, r3, #2
 80282e8:	2b00      	cmp	r3, #0
 80282ea:	d1f0      	bne.n	80282ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80282ec:	687b      	ldr	r3, [r7, #4]
 80282ee:	681b      	ldr	r3, [r3, #0]
 80282f0:	f003 0304 	and.w	r3, r3, #4
 80282f4:	2b00      	cmp	r3, #0
 80282f6:	f000 80a0 	beq.w	802843a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80282fa:	2300      	movs	r3, #0
 80282fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80282fe:	4b13      	ldr	r3, [pc, #76]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 8028300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8028306:	2b00      	cmp	r3, #0
 8028308:	d10f      	bne.n	802832a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 802830a:	2300      	movs	r3, #0
 802830c:	60bb      	str	r3, [r7, #8]
 802830e:	4b0f      	ldr	r3, [pc, #60]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 8028310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028312:	4a0e      	ldr	r2, [pc, #56]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 8028314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8028318:	6413      	str	r3, [r2, #64]	; 0x40
 802831a:	4b0c      	ldr	r3, [pc, #48]	; (802834c <HAL_RCC_OscConfig+0x2ac>)
 802831c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802831e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8028322:	60bb      	str	r3, [r7, #8]
 8028324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8028326:	2301      	movs	r3, #1
 8028328:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802832a:	4b0b      	ldr	r3, [pc, #44]	; (8028358 <HAL_RCC_OscConfig+0x2b8>)
 802832c:	681b      	ldr	r3, [r3, #0]
 802832e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8028332:	2b00      	cmp	r3, #0
 8028334:	d121      	bne.n	802837a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8028336:	4b08      	ldr	r3, [pc, #32]	; (8028358 <HAL_RCC_OscConfig+0x2b8>)
 8028338:	681b      	ldr	r3, [r3, #0]
 802833a:	4a07      	ldr	r2, [pc, #28]	; (8028358 <HAL_RCC_OscConfig+0x2b8>)
 802833c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8028340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8028342:	f7fe f831 	bl	80263a8 <HAL_GetTick>
 8028346:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8028348:	e011      	b.n	802836e <HAL_RCC_OscConfig+0x2ce>
 802834a:	bf00      	nop
 802834c:	40023800 	.word	0x40023800
 8028350:	42470000 	.word	0x42470000
 8028354:	42470e80 	.word	0x42470e80
 8028358:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802835c:	f7fe f824 	bl	80263a8 <HAL_GetTick>
 8028360:	4602      	mov	r2, r0
 8028362:	693b      	ldr	r3, [r7, #16]
 8028364:	1ad3      	subs	r3, r2, r3
 8028366:	2b02      	cmp	r3, #2
 8028368:	d901      	bls.n	802836e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 802836a:	2303      	movs	r3, #3
 802836c:	e0fd      	b.n	802856a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802836e:	4b81      	ldr	r3, [pc, #516]	; (8028574 <HAL_RCC_OscConfig+0x4d4>)
 8028370:	681b      	ldr	r3, [r3, #0]
 8028372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8028376:	2b00      	cmp	r3, #0
 8028378:	d0f0      	beq.n	802835c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802837a:	687b      	ldr	r3, [r7, #4]
 802837c:	689b      	ldr	r3, [r3, #8]
 802837e:	2b01      	cmp	r3, #1
 8028380:	d106      	bne.n	8028390 <HAL_RCC_OscConfig+0x2f0>
 8028382:	4b7d      	ldr	r3, [pc, #500]	; (8028578 <HAL_RCC_OscConfig+0x4d8>)
 8028384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028386:	4a7c      	ldr	r2, [pc, #496]	; (8028578 <HAL_RCC_OscConfig+0x4d8>)
 8028388:	f043 0301 	orr.w	r3, r3, #1
 802838c:	6713      	str	r3, [r2, #112]	; 0x70
 802838e:	e01c      	b.n	80283ca <HAL_RCC_OscConfig+0x32a>
 8028390:	687b      	ldr	r3, [r7, #4]
 8028392:	689b      	ldr	r3, [r3, #8]
 8028394:	2b05      	cmp	r3, #5
 8028396:	d10c      	bne.n	80283b2 <HAL_RCC_OscConfig+0x312>
 8028398:	4b77      	ldr	r3, [pc, #476]	; (8028578 <HAL_RCC_OscConfig+0x4d8>)
 802839a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802839c:	4a76      	ldr	r2, [pc, #472]	; (8028578 <HAL_RCC_OscConfig+0x4d8>)
 802839e:	f043 0304 	orr.w	r3, r3, #4
 80283a2:	6713      	str	r3, [r2, #112]	; 0x70
 80283a4:	4b74      	ldr	r3, [pc, #464]	; (8028578 <HAL_RCC_OscConfig+0x4d8>)
 80283a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80283a8:	4a73      	ldr	r2, [pc, #460]	; (8028578 <HAL_RCC_OscConfig+0x4d8>)
 80283aa:	f043 0301 	orr.w	r3, r3, #1
 80283ae:	6713      	str	r3, [r2, #112]	; 0x70
 80283b0:	e00b      	b.n	80283ca <HAL_RCC_OscConfig+0x32a>
 80283b2:	4b71      	ldr	r3, [pc, #452]	; (8028578 <HAL_RCC_OscConfig+0x4d8>)
 80283b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80283b6:	4a70      	ldr	r2, [pc, #448]	; (8028578 <HAL_RCC_OscConfig+0x4d8>)
 80283b8:	f023 0301 	bic.w	r3, r3, #1
 80283bc:	6713      	str	r3, [r2, #112]	; 0x70
 80283be:	4b6e      	ldr	r3, [pc, #440]	; (8028578 <HAL_RCC_OscConfig+0x4d8>)
 80283c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80283c2:	4a6d      	ldr	r2, [pc, #436]	; (8028578 <HAL_RCC_OscConfig+0x4d8>)
 80283c4:	f023 0304 	bic.w	r3, r3, #4
 80283c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80283ca:	687b      	ldr	r3, [r7, #4]
 80283cc:	689b      	ldr	r3, [r3, #8]
 80283ce:	2b00      	cmp	r3, #0
 80283d0:	d015      	beq.n	80283fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80283d2:	f7fd ffe9 	bl	80263a8 <HAL_GetTick>
 80283d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80283d8:	e00a      	b.n	80283f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80283da:	f7fd ffe5 	bl	80263a8 <HAL_GetTick>
 80283de:	4602      	mov	r2, r0
 80283e0:	693b      	ldr	r3, [r7, #16]
 80283e2:	1ad3      	subs	r3, r2, r3
 80283e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80283e8:	4293      	cmp	r3, r2
 80283ea:	d901      	bls.n	80283f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80283ec:	2303      	movs	r3, #3
 80283ee:	e0bc      	b.n	802856a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80283f0:	4b61      	ldr	r3, [pc, #388]	; (8028578 <HAL_RCC_OscConfig+0x4d8>)
 80283f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80283f4:	f003 0302 	and.w	r3, r3, #2
 80283f8:	2b00      	cmp	r3, #0
 80283fa:	d0ee      	beq.n	80283da <HAL_RCC_OscConfig+0x33a>
 80283fc:	e014      	b.n	8028428 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80283fe:	f7fd ffd3 	bl	80263a8 <HAL_GetTick>
 8028402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8028404:	e00a      	b.n	802841c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8028406:	f7fd ffcf 	bl	80263a8 <HAL_GetTick>
 802840a:	4602      	mov	r2, r0
 802840c:	693b      	ldr	r3, [r7, #16]
 802840e:	1ad3      	subs	r3, r2, r3
 8028410:	f241 3288 	movw	r2, #5000	; 0x1388
 8028414:	4293      	cmp	r3, r2
 8028416:	d901      	bls.n	802841c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8028418:	2303      	movs	r3, #3
 802841a:	e0a6      	b.n	802856a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802841c:	4b56      	ldr	r3, [pc, #344]	; (8028578 <HAL_RCC_OscConfig+0x4d8>)
 802841e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028420:	f003 0302 	and.w	r3, r3, #2
 8028424:	2b00      	cmp	r3, #0
 8028426:	d1ee      	bne.n	8028406 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8028428:	7dfb      	ldrb	r3, [r7, #23]
 802842a:	2b01      	cmp	r3, #1
 802842c:	d105      	bne.n	802843a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 802842e:	4b52      	ldr	r3, [pc, #328]	; (8028578 <HAL_RCC_OscConfig+0x4d8>)
 8028430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028432:	4a51      	ldr	r2, [pc, #324]	; (8028578 <HAL_RCC_OscConfig+0x4d8>)
 8028434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8028438:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 802843a:	687b      	ldr	r3, [r7, #4]
 802843c:	699b      	ldr	r3, [r3, #24]
 802843e:	2b00      	cmp	r3, #0
 8028440:	f000 8092 	beq.w	8028568 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8028444:	4b4c      	ldr	r3, [pc, #304]	; (8028578 <HAL_RCC_OscConfig+0x4d8>)
 8028446:	689b      	ldr	r3, [r3, #8]
 8028448:	f003 030c 	and.w	r3, r3, #12
 802844c:	2b08      	cmp	r3, #8
 802844e:	d05c      	beq.n	802850a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8028450:	687b      	ldr	r3, [r7, #4]
 8028452:	699b      	ldr	r3, [r3, #24]
 8028454:	2b02      	cmp	r3, #2
 8028456:	d141      	bne.n	80284dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8028458:	4b48      	ldr	r3, [pc, #288]	; (802857c <HAL_RCC_OscConfig+0x4dc>)
 802845a:	2200      	movs	r2, #0
 802845c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802845e:	f7fd ffa3 	bl	80263a8 <HAL_GetTick>
 8028462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8028464:	e008      	b.n	8028478 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8028466:	f7fd ff9f 	bl	80263a8 <HAL_GetTick>
 802846a:	4602      	mov	r2, r0
 802846c:	693b      	ldr	r3, [r7, #16]
 802846e:	1ad3      	subs	r3, r2, r3
 8028470:	2b02      	cmp	r3, #2
 8028472:	d901      	bls.n	8028478 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8028474:	2303      	movs	r3, #3
 8028476:	e078      	b.n	802856a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8028478:	4b3f      	ldr	r3, [pc, #252]	; (8028578 <HAL_RCC_OscConfig+0x4d8>)
 802847a:	681b      	ldr	r3, [r3, #0]
 802847c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8028480:	2b00      	cmp	r3, #0
 8028482:	d1f0      	bne.n	8028466 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8028484:	687b      	ldr	r3, [r7, #4]
 8028486:	69da      	ldr	r2, [r3, #28]
 8028488:	687b      	ldr	r3, [r7, #4]
 802848a:	6a1b      	ldr	r3, [r3, #32]
 802848c:	431a      	orrs	r2, r3
 802848e:	687b      	ldr	r3, [r7, #4]
 8028490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028492:	019b      	lsls	r3, r3, #6
 8028494:	431a      	orrs	r2, r3
 8028496:	687b      	ldr	r3, [r7, #4]
 8028498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802849a:	085b      	lsrs	r3, r3, #1
 802849c:	3b01      	subs	r3, #1
 802849e:	041b      	lsls	r3, r3, #16
 80284a0:	431a      	orrs	r2, r3
 80284a2:	687b      	ldr	r3, [r7, #4]
 80284a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80284a6:	061b      	lsls	r3, r3, #24
 80284a8:	4933      	ldr	r1, [pc, #204]	; (8028578 <HAL_RCC_OscConfig+0x4d8>)
 80284aa:	4313      	orrs	r3, r2
 80284ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80284ae:	4b33      	ldr	r3, [pc, #204]	; (802857c <HAL_RCC_OscConfig+0x4dc>)
 80284b0:	2201      	movs	r2, #1
 80284b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80284b4:	f7fd ff78 	bl	80263a8 <HAL_GetTick>
 80284b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80284ba:	e008      	b.n	80284ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80284bc:	f7fd ff74 	bl	80263a8 <HAL_GetTick>
 80284c0:	4602      	mov	r2, r0
 80284c2:	693b      	ldr	r3, [r7, #16]
 80284c4:	1ad3      	subs	r3, r2, r3
 80284c6:	2b02      	cmp	r3, #2
 80284c8:	d901      	bls.n	80284ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80284ca:	2303      	movs	r3, #3
 80284cc:	e04d      	b.n	802856a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80284ce:	4b2a      	ldr	r3, [pc, #168]	; (8028578 <HAL_RCC_OscConfig+0x4d8>)
 80284d0:	681b      	ldr	r3, [r3, #0]
 80284d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80284d6:	2b00      	cmp	r3, #0
 80284d8:	d0f0      	beq.n	80284bc <HAL_RCC_OscConfig+0x41c>
 80284da:	e045      	b.n	8028568 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80284dc:	4b27      	ldr	r3, [pc, #156]	; (802857c <HAL_RCC_OscConfig+0x4dc>)
 80284de:	2200      	movs	r2, #0
 80284e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80284e2:	f7fd ff61 	bl	80263a8 <HAL_GetTick>
 80284e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80284e8:	e008      	b.n	80284fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80284ea:	f7fd ff5d 	bl	80263a8 <HAL_GetTick>
 80284ee:	4602      	mov	r2, r0
 80284f0:	693b      	ldr	r3, [r7, #16]
 80284f2:	1ad3      	subs	r3, r2, r3
 80284f4:	2b02      	cmp	r3, #2
 80284f6:	d901      	bls.n	80284fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80284f8:	2303      	movs	r3, #3
 80284fa:	e036      	b.n	802856a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80284fc:	4b1e      	ldr	r3, [pc, #120]	; (8028578 <HAL_RCC_OscConfig+0x4d8>)
 80284fe:	681b      	ldr	r3, [r3, #0]
 8028500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8028504:	2b00      	cmp	r3, #0
 8028506:	d1f0      	bne.n	80284ea <HAL_RCC_OscConfig+0x44a>
 8028508:	e02e      	b.n	8028568 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 802850a:	687b      	ldr	r3, [r7, #4]
 802850c:	699b      	ldr	r3, [r3, #24]
 802850e:	2b01      	cmp	r3, #1
 8028510:	d101      	bne.n	8028516 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8028512:	2301      	movs	r3, #1
 8028514:	e029      	b.n	802856a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8028516:	4b18      	ldr	r3, [pc, #96]	; (8028578 <HAL_RCC_OscConfig+0x4d8>)
 8028518:	685b      	ldr	r3, [r3, #4]
 802851a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802851c:	68fb      	ldr	r3, [r7, #12]
 802851e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8028522:	687b      	ldr	r3, [r7, #4]
 8028524:	69db      	ldr	r3, [r3, #28]
 8028526:	429a      	cmp	r2, r3
 8028528:	d11c      	bne.n	8028564 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 802852a:	68fb      	ldr	r3, [r7, #12]
 802852c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8028530:	687b      	ldr	r3, [r7, #4]
 8028532:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8028534:	429a      	cmp	r2, r3
 8028536:	d115      	bne.n	8028564 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8028538:	68fa      	ldr	r2, [r7, #12]
 802853a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 802853e:	4013      	ands	r3, r2
 8028540:	687a      	ldr	r2, [r7, #4]
 8028542:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8028544:	4293      	cmp	r3, r2
 8028546:	d10d      	bne.n	8028564 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8028548:	68fb      	ldr	r3, [r7, #12]
 802854a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 802854e:	687b      	ldr	r3, [r7, #4]
 8028550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8028552:	429a      	cmp	r2, r3
 8028554:	d106      	bne.n	8028564 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8028556:	68fb      	ldr	r3, [r7, #12]
 8028558:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 802855c:	687b      	ldr	r3, [r7, #4]
 802855e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8028560:	429a      	cmp	r2, r3
 8028562:	d001      	beq.n	8028568 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8028564:	2301      	movs	r3, #1
 8028566:	e000      	b.n	802856a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8028568:	2300      	movs	r3, #0
}
 802856a:	4618      	mov	r0, r3
 802856c:	3718      	adds	r7, #24
 802856e:	46bd      	mov	sp, r7
 8028570:	bd80      	pop	{r7, pc}
 8028572:	bf00      	nop
 8028574:	40007000 	.word	0x40007000
 8028578:	40023800 	.word	0x40023800
 802857c:	42470060 	.word	0x42470060

08028580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8028580:	b580      	push	{r7, lr}
 8028582:	b084      	sub	sp, #16
 8028584:	af00      	add	r7, sp, #0
 8028586:	6078      	str	r0, [r7, #4]
 8028588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 802858a:	687b      	ldr	r3, [r7, #4]
 802858c:	2b00      	cmp	r3, #0
 802858e:	d101      	bne.n	8028594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8028590:	2301      	movs	r3, #1
 8028592:	e0cc      	b.n	802872e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8028594:	4b68      	ldr	r3, [pc, #416]	; (8028738 <HAL_RCC_ClockConfig+0x1b8>)
 8028596:	681b      	ldr	r3, [r3, #0]
 8028598:	f003 030f 	and.w	r3, r3, #15
 802859c:	683a      	ldr	r2, [r7, #0]
 802859e:	429a      	cmp	r2, r3
 80285a0:	d90c      	bls.n	80285bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80285a2:	4b65      	ldr	r3, [pc, #404]	; (8028738 <HAL_RCC_ClockConfig+0x1b8>)
 80285a4:	683a      	ldr	r2, [r7, #0]
 80285a6:	b2d2      	uxtb	r2, r2
 80285a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80285aa:	4b63      	ldr	r3, [pc, #396]	; (8028738 <HAL_RCC_ClockConfig+0x1b8>)
 80285ac:	681b      	ldr	r3, [r3, #0]
 80285ae:	f003 030f 	and.w	r3, r3, #15
 80285b2:	683a      	ldr	r2, [r7, #0]
 80285b4:	429a      	cmp	r2, r3
 80285b6:	d001      	beq.n	80285bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80285b8:	2301      	movs	r3, #1
 80285ba:	e0b8      	b.n	802872e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80285bc:	687b      	ldr	r3, [r7, #4]
 80285be:	681b      	ldr	r3, [r3, #0]
 80285c0:	f003 0302 	and.w	r3, r3, #2
 80285c4:	2b00      	cmp	r3, #0
 80285c6:	d020      	beq.n	802860a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80285c8:	687b      	ldr	r3, [r7, #4]
 80285ca:	681b      	ldr	r3, [r3, #0]
 80285cc:	f003 0304 	and.w	r3, r3, #4
 80285d0:	2b00      	cmp	r3, #0
 80285d2:	d005      	beq.n	80285e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80285d4:	4b59      	ldr	r3, [pc, #356]	; (802873c <HAL_RCC_ClockConfig+0x1bc>)
 80285d6:	689b      	ldr	r3, [r3, #8]
 80285d8:	4a58      	ldr	r2, [pc, #352]	; (802873c <HAL_RCC_ClockConfig+0x1bc>)
 80285da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80285de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80285e0:	687b      	ldr	r3, [r7, #4]
 80285e2:	681b      	ldr	r3, [r3, #0]
 80285e4:	f003 0308 	and.w	r3, r3, #8
 80285e8:	2b00      	cmp	r3, #0
 80285ea:	d005      	beq.n	80285f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80285ec:	4b53      	ldr	r3, [pc, #332]	; (802873c <HAL_RCC_ClockConfig+0x1bc>)
 80285ee:	689b      	ldr	r3, [r3, #8]
 80285f0:	4a52      	ldr	r2, [pc, #328]	; (802873c <HAL_RCC_ClockConfig+0x1bc>)
 80285f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80285f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80285f8:	4b50      	ldr	r3, [pc, #320]	; (802873c <HAL_RCC_ClockConfig+0x1bc>)
 80285fa:	689b      	ldr	r3, [r3, #8]
 80285fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8028600:	687b      	ldr	r3, [r7, #4]
 8028602:	689b      	ldr	r3, [r3, #8]
 8028604:	494d      	ldr	r1, [pc, #308]	; (802873c <HAL_RCC_ClockConfig+0x1bc>)
 8028606:	4313      	orrs	r3, r2
 8028608:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802860a:	687b      	ldr	r3, [r7, #4]
 802860c:	681b      	ldr	r3, [r3, #0]
 802860e:	f003 0301 	and.w	r3, r3, #1
 8028612:	2b00      	cmp	r3, #0
 8028614:	d044      	beq.n	80286a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8028616:	687b      	ldr	r3, [r7, #4]
 8028618:	685b      	ldr	r3, [r3, #4]
 802861a:	2b01      	cmp	r3, #1
 802861c:	d107      	bne.n	802862e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802861e:	4b47      	ldr	r3, [pc, #284]	; (802873c <HAL_RCC_ClockConfig+0x1bc>)
 8028620:	681b      	ldr	r3, [r3, #0]
 8028622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028626:	2b00      	cmp	r3, #0
 8028628:	d119      	bne.n	802865e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802862a:	2301      	movs	r3, #1
 802862c:	e07f      	b.n	802872e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802862e:	687b      	ldr	r3, [r7, #4]
 8028630:	685b      	ldr	r3, [r3, #4]
 8028632:	2b02      	cmp	r3, #2
 8028634:	d003      	beq.n	802863e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8028636:	687b      	ldr	r3, [r7, #4]
 8028638:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802863a:	2b03      	cmp	r3, #3
 802863c:	d107      	bne.n	802864e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802863e:	4b3f      	ldr	r3, [pc, #252]	; (802873c <HAL_RCC_ClockConfig+0x1bc>)
 8028640:	681b      	ldr	r3, [r3, #0]
 8028642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8028646:	2b00      	cmp	r3, #0
 8028648:	d109      	bne.n	802865e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802864a:	2301      	movs	r3, #1
 802864c:	e06f      	b.n	802872e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802864e:	4b3b      	ldr	r3, [pc, #236]	; (802873c <HAL_RCC_ClockConfig+0x1bc>)
 8028650:	681b      	ldr	r3, [r3, #0]
 8028652:	f003 0302 	and.w	r3, r3, #2
 8028656:	2b00      	cmp	r3, #0
 8028658:	d101      	bne.n	802865e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802865a:	2301      	movs	r3, #1
 802865c:	e067      	b.n	802872e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 802865e:	4b37      	ldr	r3, [pc, #220]	; (802873c <HAL_RCC_ClockConfig+0x1bc>)
 8028660:	689b      	ldr	r3, [r3, #8]
 8028662:	f023 0203 	bic.w	r2, r3, #3
 8028666:	687b      	ldr	r3, [r7, #4]
 8028668:	685b      	ldr	r3, [r3, #4]
 802866a:	4934      	ldr	r1, [pc, #208]	; (802873c <HAL_RCC_ClockConfig+0x1bc>)
 802866c:	4313      	orrs	r3, r2
 802866e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8028670:	f7fd fe9a 	bl	80263a8 <HAL_GetTick>
 8028674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8028676:	e00a      	b.n	802868e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8028678:	f7fd fe96 	bl	80263a8 <HAL_GetTick>
 802867c:	4602      	mov	r2, r0
 802867e:	68fb      	ldr	r3, [r7, #12]
 8028680:	1ad3      	subs	r3, r2, r3
 8028682:	f241 3288 	movw	r2, #5000	; 0x1388
 8028686:	4293      	cmp	r3, r2
 8028688:	d901      	bls.n	802868e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 802868a:	2303      	movs	r3, #3
 802868c:	e04f      	b.n	802872e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802868e:	4b2b      	ldr	r3, [pc, #172]	; (802873c <HAL_RCC_ClockConfig+0x1bc>)
 8028690:	689b      	ldr	r3, [r3, #8]
 8028692:	f003 020c 	and.w	r2, r3, #12
 8028696:	687b      	ldr	r3, [r7, #4]
 8028698:	685b      	ldr	r3, [r3, #4]
 802869a:	009b      	lsls	r3, r3, #2
 802869c:	429a      	cmp	r2, r3
 802869e:	d1eb      	bne.n	8028678 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80286a0:	4b25      	ldr	r3, [pc, #148]	; (8028738 <HAL_RCC_ClockConfig+0x1b8>)
 80286a2:	681b      	ldr	r3, [r3, #0]
 80286a4:	f003 030f 	and.w	r3, r3, #15
 80286a8:	683a      	ldr	r2, [r7, #0]
 80286aa:	429a      	cmp	r2, r3
 80286ac:	d20c      	bcs.n	80286c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80286ae:	4b22      	ldr	r3, [pc, #136]	; (8028738 <HAL_RCC_ClockConfig+0x1b8>)
 80286b0:	683a      	ldr	r2, [r7, #0]
 80286b2:	b2d2      	uxtb	r2, r2
 80286b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80286b6:	4b20      	ldr	r3, [pc, #128]	; (8028738 <HAL_RCC_ClockConfig+0x1b8>)
 80286b8:	681b      	ldr	r3, [r3, #0]
 80286ba:	f003 030f 	and.w	r3, r3, #15
 80286be:	683a      	ldr	r2, [r7, #0]
 80286c0:	429a      	cmp	r2, r3
 80286c2:	d001      	beq.n	80286c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80286c4:	2301      	movs	r3, #1
 80286c6:	e032      	b.n	802872e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80286c8:	687b      	ldr	r3, [r7, #4]
 80286ca:	681b      	ldr	r3, [r3, #0]
 80286cc:	f003 0304 	and.w	r3, r3, #4
 80286d0:	2b00      	cmp	r3, #0
 80286d2:	d008      	beq.n	80286e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80286d4:	4b19      	ldr	r3, [pc, #100]	; (802873c <HAL_RCC_ClockConfig+0x1bc>)
 80286d6:	689b      	ldr	r3, [r3, #8]
 80286d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80286dc:	687b      	ldr	r3, [r7, #4]
 80286de:	68db      	ldr	r3, [r3, #12]
 80286e0:	4916      	ldr	r1, [pc, #88]	; (802873c <HAL_RCC_ClockConfig+0x1bc>)
 80286e2:	4313      	orrs	r3, r2
 80286e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80286e6:	687b      	ldr	r3, [r7, #4]
 80286e8:	681b      	ldr	r3, [r3, #0]
 80286ea:	f003 0308 	and.w	r3, r3, #8
 80286ee:	2b00      	cmp	r3, #0
 80286f0:	d009      	beq.n	8028706 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80286f2:	4b12      	ldr	r3, [pc, #72]	; (802873c <HAL_RCC_ClockConfig+0x1bc>)
 80286f4:	689b      	ldr	r3, [r3, #8]
 80286f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80286fa:	687b      	ldr	r3, [r7, #4]
 80286fc:	691b      	ldr	r3, [r3, #16]
 80286fe:	00db      	lsls	r3, r3, #3
 8028700:	490e      	ldr	r1, [pc, #56]	; (802873c <HAL_RCC_ClockConfig+0x1bc>)
 8028702:	4313      	orrs	r3, r2
 8028704:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8028706:	f000 f821 	bl	802874c <HAL_RCC_GetSysClockFreq>
 802870a:	4601      	mov	r1, r0
 802870c:	4b0b      	ldr	r3, [pc, #44]	; (802873c <HAL_RCC_ClockConfig+0x1bc>)
 802870e:	689b      	ldr	r3, [r3, #8]
 8028710:	091b      	lsrs	r3, r3, #4
 8028712:	f003 030f 	and.w	r3, r3, #15
 8028716:	4a0a      	ldr	r2, [pc, #40]	; (8028740 <HAL_RCC_ClockConfig+0x1c0>)
 8028718:	5cd3      	ldrb	r3, [r2, r3]
 802871a:	fa21 f303 	lsr.w	r3, r1, r3
 802871e:	4a09      	ldr	r2, [pc, #36]	; (8028744 <HAL_RCC_ClockConfig+0x1c4>)
 8028720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8028722:	4b09      	ldr	r3, [pc, #36]	; (8028748 <HAL_RCC_ClockConfig+0x1c8>)
 8028724:	681b      	ldr	r3, [r3, #0]
 8028726:	4618      	mov	r0, r3
 8028728:	f7fd fdfa 	bl	8026320 <HAL_InitTick>

  return HAL_OK;
 802872c:	2300      	movs	r3, #0
}
 802872e:	4618      	mov	r0, r3
 8028730:	3710      	adds	r7, #16
 8028732:	46bd      	mov	sp, r7
 8028734:	bd80      	pop	{r7, pc}
 8028736:	bf00      	nop
 8028738:	40023c00 	.word	0x40023c00
 802873c:	40023800 	.word	0x40023800
 8028740:	0802ccd8 	.word	0x0802ccd8
 8028744:	20000004 	.word	0x20000004
 8028748:	20000008 	.word	0x20000008

0802874c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 802874c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802874e:	b085      	sub	sp, #20
 8028750:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8028752:	2300      	movs	r3, #0
 8028754:	607b      	str	r3, [r7, #4]
 8028756:	2300      	movs	r3, #0
 8028758:	60fb      	str	r3, [r7, #12]
 802875a:	2300      	movs	r3, #0
 802875c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 802875e:	2300      	movs	r3, #0
 8028760:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8028762:	4b50      	ldr	r3, [pc, #320]	; (80288a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8028764:	689b      	ldr	r3, [r3, #8]
 8028766:	f003 030c 	and.w	r3, r3, #12
 802876a:	2b04      	cmp	r3, #4
 802876c:	d007      	beq.n	802877e <HAL_RCC_GetSysClockFreq+0x32>
 802876e:	2b08      	cmp	r3, #8
 8028770:	d008      	beq.n	8028784 <HAL_RCC_GetSysClockFreq+0x38>
 8028772:	2b00      	cmp	r3, #0
 8028774:	f040 808d 	bne.w	8028892 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8028778:	4b4b      	ldr	r3, [pc, #300]	; (80288a8 <HAL_RCC_GetSysClockFreq+0x15c>)
 802877a:	60bb      	str	r3, [r7, #8]
       break;
 802877c:	e08c      	b.n	8028898 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 802877e:	4b4b      	ldr	r3, [pc, #300]	; (80288ac <HAL_RCC_GetSysClockFreq+0x160>)
 8028780:	60bb      	str	r3, [r7, #8]
      break;
 8028782:	e089      	b.n	8028898 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8028784:	4b47      	ldr	r3, [pc, #284]	; (80288a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8028786:	685b      	ldr	r3, [r3, #4]
 8028788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802878c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 802878e:	4b45      	ldr	r3, [pc, #276]	; (80288a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8028790:	685b      	ldr	r3, [r3, #4]
 8028792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8028796:	2b00      	cmp	r3, #0
 8028798:	d023      	beq.n	80287e2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802879a:	4b42      	ldr	r3, [pc, #264]	; (80288a4 <HAL_RCC_GetSysClockFreq+0x158>)
 802879c:	685b      	ldr	r3, [r3, #4]
 802879e:	099b      	lsrs	r3, r3, #6
 80287a0:	f04f 0400 	mov.w	r4, #0
 80287a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80287a8:	f04f 0200 	mov.w	r2, #0
 80287ac:	ea03 0501 	and.w	r5, r3, r1
 80287b0:	ea04 0602 	and.w	r6, r4, r2
 80287b4:	4a3d      	ldr	r2, [pc, #244]	; (80288ac <HAL_RCC_GetSysClockFreq+0x160>)
 80287b6:	fb02 f106 	mul.w	r1, r2, r6
 80287ba:	2200      	movs	r2, #0
 80287bc:	fb02 f205 	mul.w	r2, r2, r5
 80287c0:	440a      	add	r2, r1
 80287c2:	493a      	ldr	r1, [pc, #232]	; (80288ac <HAL_RCC_GetSysClockFreq+0x160>)
 80287c4:	fba5 0101 	umull	r0, r1, r5, r1
 80287c8:	1853      	adds	r3, r2, r1
 80287ca:	4619      	mov	r1, r3
 80287cc:	687b      	ldr	r3, [r7, #4]
 80287ce:	f04f 0400 	mov.w	r4, #0
 80287d2:	461a      	mov	r2, r3
 80287d4:	4623      	mov	r3, r4
 80287d6:	f7f8 f96f 	bl	8020ab8 <__aeabi_uldivmod>
 80287da:	4603      	mov	r3, r0
 80287dc:	460c      	mov	r4, r1
 80287de:	60fb      	str	r3, [r7, #12]
 80287e0:	e049      	b.n	8028876 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80287e2:	4b30      	ldr	r3, [pc, #192]	; (80288a4 <HAL_RCC_GetSysClockFreq+0x158>)
 80287e4:	685b      	ldr	r3, [r3, #4]
 80287e6:	099b      	lsrs	r3, r3, #6
 80287e8:	f04f 0400 	mov.w	r4, #0
 80287ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80287f0:	f04f 0200 	mov.w	r2, #0
 80287f4:	ea03 0501 	and.w	r5, r3, r1
 80287f8:	ea04 0602 	and.w	r6, r4, r2
 80287fc:	4629      	mov	r1, r5
 80287fe:	4632      	mov	r2, r6
 8028800:	f04f 0300 	mov.w	r3, #0
 8028804:	f04f 0400 	mov.w	r4, #0
 8028808:	0154      	lsls	r4, r2, #5
 802880a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 802880e:	014b      	lsls	r3, r1, #5
 8028810:	4619      	mov	r1, r3
 8028812:	4622      	mov	r2, r4
 8028814:	1b49      	subs	r1, r1, r5
 8028816:	eb62 0206 	sbc.w	r2, r2, r6
 802881a:	f04f 0300 	mov.w	r3, #0
 802881e:	f04f 0400 	mov.w	r4, #0
 8028822:	0194      	lsls	r4, r2, #6
 8028824:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8028828:	018b      	lsls	r3, r1, #6
 802882a:	1a5b      	subs	r3, r3, r1
 802882c:	eb64 0402 	sbc.w	r4, r4, r2
 8028830:	f04f 0100 	mov.w	r1, #0
 8028834:	f04f 0200 	mov.w	r2, #0
 8028838:	00e2      	lsls	r2, r4, #3
 802883a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 802883e:	00d9      	lsls	r1, r3, #3
 8028840:	460b      	mov	r3, r1
 8028842:	4614      	mov	r4, r2
 8028844:	195b      	adds	r3, r3, r5
 8028846:	eb44 0406 	adc.w	r4, r4, r6
 802884a:	f04f 0100 	mov.w	r1, #0
 802884e:	f04f 0200 	mov.w	r2, #0
 8028852:	02a2      	lsls	r2, r4, #10
 8028854:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8028858:	0299      	lsls	r1, r3, #10
 802885a:	460b      	mov	r3, r1
 802885c:	4614      	mov	r4, r2
 802885e:	4618      	mov	r0, r3
 8028860:	4621      	mov	r1, r4
 8028862:	687b      	ldr	r3, [r7, #4]
 8028864:	f04f 0400 	mov.w	r4, #0
 8028868:	461a      	mov	r2, r3
 802886a:	4623      	mov	r3, r4
 802886c:	f7f8 f924 	bl	8020ab8 <__aeabi_uldivmod>
 8028870:	4603      	mov	r3, r0
 8028872:	460c      	mov	r4, r1
 8028874:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8028876:	4b0b      	ldr	r3, [pc, #44]	; (80288a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8028878:	685b      	ldr	r3, [r3, #4]
 802887a:	0c1b      	lsrs	r3, r3, #16
 802887c:	f003 0303 	and.w	r3, r3, #3
 8028880:	3301      	adds	r3, #1
 8028882:	005b      	lsls	r3, r3, #1
 8028884:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8028886:	68fa      	ldr	r2, [r7, #12]
 8028888:	683b      	ldr	r3, [r7, #0]
 802888a:	fbb2 f3f3 	udiv	r3, r2, r3
 802888e:	60bb      	str	r3, [r7, #8]
      break;
 8028890:	e002      	b.n	8028898 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8028892:	4b05      	ldr	r3, [pc, #20]	; (80288a8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8028894:	60bb      	str	r3, [r7, #8]
      break;
 8028896:	bf00      	nop
    }
  }
  return sysclockfreq;
 8028898:	68bb      	ldr	r3, [r7, #8]
}
 802889a:	4618      	mov	r0, r3
 802889c:	3714      	adds	r7, #20
 802889e:	46bd      	mov	sp, r7
 80288a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80288a2:	bf00      	nop
 80288a4:	40023800 	.word	0x40023800
 80288a8:	00f42400 	.word	0x00f42400
 80288ac:	00b71b00 	.word	0x00b71b00

080288b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80288b0:	b480      	push	{r7}
 80288b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80288b4:	4b03      	ldr	r3, [pc, #12]	; (80288c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80288b6:	681b      	ldr	r3, [r3, #0]
}
 80288b8:	4618      	mov	r0, r3
 80288ba:	46bd      	mov	sp, r7
 80288bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80288c0:	4770      	bx	lr
 80288c2:	bf00      	nop
 80288c4:	20000004 	.word	0x20000004

080288c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80288c8:	b580      	push	{r7, lr}
 80288ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80288cc:	f7ff fff0 	bl	80288b0 <HAL_RCC_GetHCLKFreq>
 80288d0:	4601      	mov	r1, r0
 80288d2:	4b05      	ldr	r3, [pc, #20]	; (80288e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80288d4:	689b      	ldr	r3, [r3, #8]
 80288d6:	0a9b      	lsrs	r3, r3, #10
 80288d8:	f003 0307 	and.w	r3, r3, #7
 80288dc:	4a03      	ldr	r2, [pc, #12]	; (80288ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80288de:	5cd3      	ldrb	r3, [r2, r3]
 80288e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80288e4:	4618      	mov	r0, r3
 80288e6:	bd80      	pop	{r7, pc}
 80288e8:	40023800 	.word	0x40023800
 80288ec:	0802cce8 	.word	0x0802cce8

080288f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80288f0:	b580      	push	{r7, lr}
 80288f2:	b082      	sub	sp, #8
 80288f4:	af00      	add	r7, sp, #0
 80288f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80288f8:	687b      	ldr	r3, [r7, #4]
 80288fa:	2b00      	cmp	r3, #0
 80288fc:	d101      	bne.n	8028902 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80288fe:	2301      	movs	r3, #1
 8028900:	e056      	b.n	80289b0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8028902:	687b      	ldr	r3, [r7, #4]
 8028904:	2200      	movs	r2, #0
 8028906:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8028908:	687b      	ldr	r3, [r7, #4]
 802890a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802890e:	b2db      	uxtb	r3, r3
 8028910:	2b00      	cmp	r3, #0
 8028912:	d106      	bne.n	8028922 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8028914:	687b      	ldr	r3, [r7, #4]
 8028916:	2200      	movs	r2, #0
 8028918:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 802891c:	6878      	ldr	r0, [r7, #4]
 802891e:	f7fc fecf 	bl	80256c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8028922:	687b      	ldr	r3, [r7, #4]
 8028924:	2202      	movs	r2, #2
 8028926:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 802892a:	687b      	ldr	r3, [r7, #4]
 802892c:	681b      	ldr	r3, [r3, #0]
 802892e:	681a      	ldr	r2, [r3, #0]
 8028930:	687b      	ldr	r3, [r7, #4]
 8028932:	681b      	ldr	r3, [r3, #0]
 8028934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8028938:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 802893a:	687b      	ldr	r3, [r7, #4]
 802893c:	685a      	ldr	r2, [r3, #4]
 802893e:	687b      	ldr	r3, [r7, #4]
 8028940:	689b      	ldr	r3, [r3, #8]
 8028942:	431a      	orrs	r2, r3
 8028944:	687b      	ldr	r3, [r7, #4]
 8028946:	68db      	ldr	r3, [r3, #12]
 8028948:	431a      	orrs	r2, r3
 802894a:	687b      	ldr	r3, [r7, #4]
 802894c:	691b      	ldr	r3, [r3, #16]
 802894e:	431a      	orrs	r2, r3
 8028950:	687b      	ldr	r3, [r7, #4]
 8028952:	695b      	ldr	r3, [r3, #20]
 8028954:	431a      	orrs	r2, r3
 8028956:	687b      	ldr	r3, [r7, #4]
 8028958:	699b      	ldr	r3, [r3, #24]
 802895a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802895e:	431a      	orrs	r2, r3
 8028960:	687b      	ldr	r3, [r7, #4]
 8028962:	69db      	ldr	r3, [r3, #28]
 8028964:	431a      	orrs	r2, r3
 8028966:	687b      	ldr	r3, [r7, #4]
 8028968:	6a1b      	ldr	r3, [r3, #32]
 802896a:	ea42 0103 	orr.w	r1, r2, r3
 802896e:	687b      	ldr	r3, [r7, #4]
 8028970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8028972:	687b      	ldr	r3, [r7, #4]
 8028974:	681b      	ldr	r3, [r3, #0]
 8028976:	430a      	orrs	r2, r1
 8028978:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 802897a:	687b      	ldr	r3, [r7, #4]
 802897c:	699b      	ldr	r3, [r3, #24]
 802897e:	0c1b      	lsrs	r3, r3, #16
 8028980:	f003 0104 	and.w	r1, r3, #4
 8028984:	687b      	ldr	r3, [r7, #4]
 8028986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8028988:	687b      	ldr	r3, [r7, #4]
 802898a:	681b      	ldr	r3, [r3, #0]
 802898c:	430a      	orrs	r2, r1
 802898e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8028990:	687b      	ldr	r3, [r7, #4]
 8028992:	681b      	ldr	r3, [r3, #0]
 8028994:	69da      	ldr	r2, [r3, #28]
 8028996:	687b      	ldr	r3, [r7, #4]
 8028998:	681b      	ldr	r3, [r3, #0]
 802899a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802899e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80289a0:	687b      	ldr	r3, [r7, #4]
 80289a2:	2200      	movs	r2, #0
 80289a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80289a6:	687b      	ldr	r3, [r7, #4]
 80289a8:	2201      	movs	r2, #1
 80289aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80289ae:	2300      	movs	r3, #0
}
 80289b0:	4618      	mov	r0, r3
 80289b2:	3708      	adds	r7, #8
 80289b4:	46bd      	mov	sp, r7
 80289b6:	bd80      	pop	{r7, pc}

080289b8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80289b8:	b580      	push	{r7, lr}
 80289ba:	b088      	sub	sp, #32
 80289bc:	af00      	add	r7, sp, #0
 80289be:	60f8      	str	r0, [r7, #12]
 80289c0:	60b9      	str	r1, [r7, #8]
 80289c2:	603b      	str	r3, [r7, #0]
 80289c4:	4613      	mov	r3, r2
 80289c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80289c8:	2300      	movs	r3, #0
 80289ca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80289cc:	68fb      	ldr	r3, [r7, #12]
 80289ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80289d2:	2b01      	cmp	r3, #1
 80289d4:	d101      	bne.n	80289da <HAL_SPI_Transmit+0x22>
 80289d6:	2302      	movs	r3, #2
 80289d8:	e11e      	b.n	8028c18 <HAL_SPI_Transmit+0x260>
 80289da:	68fb      	ldr	r3, [r7, #12]
 80289dc:	2201      	movs	r2, #1
 80289de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80289e2:	f7fd fce1 	bl	80263a8 <HAL_GetTick>
 80289e6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80289e8:	88fb      	ldrh	r3, [r7, #6]
 80289ea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80289ec:	68fb      	ldr	r3, [r7, #12]
 80289ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80289f2:	b2db      	uxtb	r3, r3
 80289f4:	2b01      	cmp	r3, #1
 80289f6:	d002      	beq.n	80289fe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80289f8:	2302      	movs	r3, #2
 80289fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80289fc:	e103      	b.n	8028c06 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80289fe:	68bb      	ldr	r3, [r7, #8]
 8028a00:	2b00      	cmp	r3, #0
 8028a02:	d002      	beq.n	8028a0a <HAL_SPI_Transmit+0x52>
 8028a04:	88fb      	ldrh	r3, [r7, #6]
 8028a06:	2b00      	cmp	r3, #0
 8028a08:	d102      	bne.n	8028a10 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8028a0a:	2301      	movs	r3, #1
 8028a0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8028a0e:	e0fa      	b.n	8028c06 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8028a10:	68fb      	ldr	r3, [r7, #12]
 8028a12:	2203      	movs	r2, #3
 8028a14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028a18:	68fb      	ldr	r3, [r7, #12]
 8028a1a:	2200      	movs	r2, #0
 8028a1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8028a1e:	68fb      	ldr	r3, [r7, #12]
 8028a20:	68ba      	ldr	r2, [r7, #8]
 8028a22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8028a24:	68fb      	ldr	r3, [r7, #12]
 8028a26:	88fa      	ldrh	r2, [r7, #6]
 8028a28:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8028a2a:	68fb      	ldr	r3, [r7, #12]
 8028a2c:	88fa      	ldrh	r2, [r7, #6]
 8028a2e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8028a30:	68fb      	ldr	r3, [r7, #12]
 8028a32:	2200      	movs	r2, #0
 8028a34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8028a36:	68fb      	ldr	r3, [r7, #12]
 8028a38:	2200      	movs	r2, #0
 8028a3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8028a3c:	68fb      	ldr	r3, [r7, #12]
 8028a3e:	2200      	movs	r2, #0
 8028a40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8028a42:	68fb      	ldr	r3, [r7, #12]
 8028a44:	2200      	movs	r2, #0
 8028a46:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8028a48:	68fb      	ldr	r3, [r7, #12]
 8028a4a:	2200      	movs	r2, #0
 8028a4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028a4e:	68fb      	ldr	r3, [r7, #12]
 8028a50:	689b      	ldr	r3, [r3, #8]
 8028a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028a56:	d107      	bne.n	8028a68 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8028a58:	68fb      	ldr	r3, [r7, #12]
 8028a5a:	681b      	ldr	r3, [r3, #0]
 8028a5c:	681a      	ldr	r2, [r3, #0]
 8028a5e:	68fb      	ldr	r3, [r7, #12]
 8028a60:	681b      	ldr	r3, [r3, #0]
 8028a62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8028a66:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028a68:	68fb      	ldr	r3, [r7, #12]
 8028a6a:	681b      	ldr	r3, [r3, #0]
 8028a6c:	681b      	ldr	r3, [r3, #0]
 8028a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028a72:	2b40      	cmp	r3, #64	; 0x40
 8028a74:	d007      	beq.n	8028a86 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8028a76:	68fb      	ldr	r3, [r7, #12]
 8028a78:	681b      	ldr	r3, [r3, #0]
 8028a7a:	681a      	ldr	r2, [r3, #0]
 8028a7c:	68fb      	ldr	r3, [r7, #12]
 8028a7e:	681b      	ldr	r3, [r3, #0]
 8028a80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028a84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8028a86:	68fb      	ldr	r3, [r7, #12]
 8028a88:	68db      	ldr	r3, [r3, #12]
 8028a8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8028a8e:	d14b      	bne.n	8028b28 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028a90:	68fb      	ldr	r3, [r7, #12]
 8028a92:	685b      	ldr	r3, [r3, #4]
 8028a94:	2b00      	cmp	r3, #0
 8028a96:	d002      	beq.n	8028a9e <HAL_SPI_Transmit+0xe6>
 8028a98:	8afb      	ldrh	r3, [r7, #22]
 8028a9a:	2b01      	cmp	r3, #1
 8028a9c:	d13e      	bne.n	8028b1c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028a9e:	68fb      	ldr	r3, [r7, #12]
 8028aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028aa2:	881a      	ldrh	r2, [r3, #0]
 8028aa4:	68fb      	ldr	r3, [r7, #12]
 8028aa6:	681b      	ldr	r3, [r3, #0]
 8028aa8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8028aaa:	68fb      	ldr	r3, [r7, #12]
 8028aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028aae:	1c9a      	adds	r2, r3, #2
 8028ab0:	68fb      	ldr	r3, [r7, #12]
 8028ab2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028ab4:	68fb      	ldr	r3, [r7, #12]
 8028ab6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028ab8:	b29b      	uxth	r3, r3
 8028aba:	3b01      	subs	r3, #1
 8028abc:	b29a      	uxth	r2, r3
 8028abe:	68fb      	ldr	r3, [r7, #12]
 8028ac0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8028ac2:	e02b      	b.n	8028b1c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8028ac4:	68fb      	ldr	r3, [r7, #12]
 8028ac6:	681b      	ldr	r3, [r3, #0]
 8028ac8:	689b      	ldr	r3, [r3, #8]
 8028aca:	f003 0302 	and.w	r3, r3, #2
 8028ace:	2b02      	cmp	r3, #2
 8028ad0:	d112      	bne.n	8028af8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028ad2:	68fb      	ldr	r3, [r7, #12]
 8028ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028ad6:	881a      	ldrh	r2, [r3, #0]
 8028ad8:	68fb      	ldr	r3, [r7, #12]
 8028ada:	681b      	ldr	r3, [r3, #0]
 8028adc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8028ade:	68fb      	ldr	r3, [r7, #12]
 8028ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028ae2:	1c9a      	adds	r2, r3, #2
 8028ae4:	68fb      	ldr	r3, [r7, #12]
 8028ae6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028ae8:	68fb      	ldr	r3, [r7, #12]
 8028aea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028aec:	b29b      	uxth	r3, r3
 8028aee:	3b01      	subs	r3, #1
 8028af0:	b29a      	uxth	r2, r3
 8028af2:	68fb      	ldr	r3, [r7, #12]
 8028af4:	86da      	strh	r2, [r3, #54]	; 0x36
 8028af6:	e011      	b.n	8028b1c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028af8:	f7fd fc56 	bl	80263a8 <HAL_GetTick>
 8028afc:	4602      	mov	r2, r0
 8028afe:	69bb      	ldr	r3, [r7, #24]
 8028b00:	1ad3      	subs	r3, r2, r3
 8028b02:	683a      	ldr	r2, [r7, #0]
 8028b04:	429a      	cmp	r2, r3
 8028b06:	d803      	bhi.n	8028b10 <HAL_SPI_Transmit+0x158>
 8028b08:	683b      	ldr	r3, [r7, #0]
 8028b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028b0e:	d102      	bne.n	8028b16 <HAL_SPI_Transmit+0x15e>
 8028b10:	683b      	ldr	r3, [r7, #0]
 8028b12:	2b00      	cmp	r3, #0
 8028b14:	d102      	bne.n	8028b1c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8028b16:	2303      	movs	r3, #3
 8028b18:	77fb      	strb	r3, [r7, #31]
          goto error;
 8028b1a:	e074      	b.n	8028c06 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8028b1c:	68fb      	ldr	r3, [r7, #12]
 8028b1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028b20:	b29b      	uxth	r3, r3
 8028b22:	2b00      	cmp	r3, #0
 8028b24:	d1ce      	bne.n	8028ac4 <HAL_SPI_Transmit+0x10c>
 8028b26:	e04c      	b.n	8028bc2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028b28:	68fb      	ldr	r3, [r7, #12]
 8028b2a:	685b      	ldr	r3, [r3, #4]
 8028b2c:	2b00      	cmp	r3, #0
 8028b2e:	d002      	beq.n	8028b36 <HAL_SPI_Transmit+0x17e>
 8028b30:	8afb      	ldrh	r3, [r7, #22]
 8028b32:	2b01      	cmp	r3, #1
 8028b34:	d140      	bne.n	8028bb8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8028b36:	68fb      	ldr	r3, [r7, #12]
 8028b38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028b3a:	68fb      	ldr	r3, [r7, #12]
 8028b3c:	681b      	ldr	r3, [r3, #0]
 8028b3e:	330c      	adds	r3, #12
 8028b40:	7812      	ldrb	r2, [r2, #0]
 8028b42:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8028b44:	68fb      	ldr	r3, [r7, #12]
 8028b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028b48:	1c5a      	adds	r2, r3, #1
 8028b4a:	68fb      	ldr	r3, [r7, #12]
 8028b4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028b4e:	68fb      	ldr	r3, [r7, #12]
 8028b50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028b52:	b29b      	uxth	r3, r3
 8028b54:	3b01      	subs	r3, #1
 8028b56:	b29a      	uxth	r2, r3
 8028b58:	68fb      	ldr	r3, [r7, #12]
 8028b5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8028b5c:	e02c      	b.n	8028bb8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8028b5e:	68fb      	ldr	r3, [r7, #12]
 8028b60:	681b      	ldr	r3, [r3, #0]
 8028b62:	689b      	ldr	r3, [r3, #8]
 8028b64:	f003 0302 	and.w	r3, r3, #2
 8028b68:	2b02      	cmp	r3, #2
 8028b6a:	d113      	bne.n	8028b94 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8028b6c:	68fb      	ldr	r3, [r7, #12]
 8028b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028b70:	68fb      	ldr	r3, [r7, #12]
 8028b72:	681b      	ldr	r3, [r3, #0]
 8028b74:	330c      	adds	r3, #12
 8028b76:	7812      	ldrb	r2, [r2, #0]
 8028b78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8028b7a:	68fb      	ldr	r3, [r7, #12]
 8028b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028b7e:	1c5a      	adds	r2, r3, #1
 8028b80:	68fb      	ldr	r3, [r7, #12]
 8028b82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028b84:	68fb      	ldr	r3, [r7, #12]
 8028b86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028b88:	b29b      	uxth	r3, r3
 8028b8a:	3b01      	subs	r3, #1
 8028b8c:	b29a      	uxth	r2, r3
 8028b8e:	68fb      	ldr	r3, [r7, #12]
 8028b90:	86da      	strh	r2, [r3, #54]	; 0x36
 8028b92:	e011      	b.n	8028bb8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028b94:	f7fd fc08 	bl	80263a8 <HAL_GetTick>
 8028b98:	4602      	mov	r2, r0
 8028b9a:	69bb      	ldr	r3, [r7, #24]
 8028b9c:	1ad3      	subs	r3, r2, r3
 8028b9e:	683a      	ldr	r2, [r7, #0]
 8028ba0:	429a      	cmp	r2, r3
 8028ba2:	d803      	bhi.n	8028bac <HAL_SPI_Transmit+0x1f4>
 8028ba4:	683b      	ldr	r3, [r7, #0]
 8028ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028baa:	d102      	bne.n	8028bb2 <HAL_SPI_Transmit+0x1fa>
 8028bac:	683b      	ldr	r3, [r7, #0]
 8028bae:	2b00      	cmp	r3, #0
 8028bb0:	d102      	bne.n	8028bb8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8028bb2:	2303      	movs	r3, #3
 8028bb4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8028bb6:	e026      	b.n	8028c06 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8028bb8:	68fb      	ldr	r3, [r7, #12]
 8028bba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028bbc:	b29b      	uxth	r3, r3
 8028bbe:	2b00      	cmp	r3, #0
 8028bc0:	d1cd      	bne.n	8028b5e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028bc2:	69ba      	ldr	r2, [r7, #24]
 8028bc4:	6839      	ldr	r1, [r7, #0]
 8028bc6:	68f8      	ldr	r0, [r7, #12]
 8028bc8:	f000 fba4 	bl	8029314 <SPI_EndRxTxTransaction>
 8028bcc:	4603      	mov	r3, r0
 8028bce:	2b00      	cmp	r3, #0
 8028bd0:	d002      	beq.n	8028bd8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028bd2:	68fb      	ldr	r3, [r7, #12]
 8028bd4:	2220      	movs	r2, #32
 8028bd6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8028bd8:	68fb      	ldr	r3, [r7, #12]
 8028bda:	689b      	ldr	r3, [r3, #8]
 8028bdc:	2b00      	cmp	r3, #0
 8028bde:	d10a      	bne.n	8028bf6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8028be0:	2300      	movs	r3, #0
 8028be2:	613b      	str	r3, [r7, #16]
 8028be4:	68fb      	ldr	r3, [r7, #12]
 8028be6:	681b      	ldr	r3, [r3, #0]
 8028be8:	68db      	ldr	r3, [r3, #12]
 8028bea:	613b      	str	r3, [r7, #16]
 8028bec:	68fb      	ldr	r3, [r7, #12]
 8028bee:	681b      	ldr	r3, [r3, #0]
 8028bf0:	689b      	ldr	r3, [r3, #8]
 8028bf2:	613b      	str	r3, [r7, #16]
 8028bf4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8028bf6:	68fb      	ldr	r3, [r7, #12]
 8028bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028bfa:	2b00      	cmp	r3, #0
 8028bfc:	d002      	beq.n	8028c04 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8028bfe:	2301      	movs	r3, #1
 8028c00:	77fb      	strb	r3, [r7, #31]
 8028c02:	e000      	b.n	8028c06 <HAL_SPI_Transmit+0x24e>
  }

error:
 8028c04:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8028c06:	68fb      	ldr	r3, [r7, #12]
 8028c08:	2201      	movs	r2, #1
 8028c0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8028c0e:	68fb      	ldr	r3, [r7, #12]
 8028c10:	2200      	movs	r2, #0
 8028c12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8028c16:	7ffb      	ldrb	r3, [r7, #31]
}
 8028c18:	4618      	mov	r0, r3
 8028c1a:	3720      	adds	r7, #32
 8028c1c:	46bd      	mov	sp, r7
 8028c1e:	bd80      	pop	{r7, pc}

08028c20 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8028c20:	b580      	push	{r7, lr}
 8028c22:	b088      	sub	sp, #32
 8028c24:	af02      	add	r7, sp, #8
 8028c26:	60f8      	str	r0, [r7, #12]
 8028c28:	60b9      	str	r1, [r7, #8]
 8028c2a:	603b      	str	r3, [r7, #0]
 8028c2c:	4613      	mov	r3, r2
 8028c2e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8028c30:	2300      	movs	r3, #0
 8028c32:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8028c34:	68fb      	ldr	r3, [r7, #12]
 8028c36:	685b      	ldr	r3, [r3, #4]
 8028c38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028c3c:	d112      	bne.n	8028c64 <HAL_SPI_Receive+0x44>
 8028c3e:	68fb      	ldr	r3, [r7, #12]
 8028c40:	689b      	ldr	r3, [r3, #8]
 8028c42:	2b00      	cmp	r3, #0
 8028c44:	d10e      	bne.n	8028c64 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8028c46:	68fb      	ldr	r3, [r7, #12]
 8028c48:	2204      	movs	r2, #4
 8028c4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8028c4e:	88fa      	ldrh	r2, [r7, #6]
 8028c50:	683b      	ldr	r3, [r7, #0]
 8028c52:	9300      	str	r3, [sp, #0]
 8028c54:	4613      	mov	r3, r2
 8028c56:	68ba      	ldr	r2, [r7, #8]
 8028c58:	68b9      	ldr	r1, [r7, #8]
 8028c5a:	68f8      	ldr	r0, [r7, #12]
 8028c5c:	f000 f8e9 	bl	8028e32 <HAL_SPI_TransmitReceive>
 8028c60:	4603      	mov	r3, r0
 8028c62:	e0e2      	b.n	8028e2a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8028c64:	68fb      	ldr	r3, [r7, #12]
 8028c66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8028c6a:	2b01      	cmp	r3, #1
 8028c6c:	d101      	bne.n	8028c72 <HAL_SPI_Receive+0x52>
 8028c6e:	2302      	movs	r3, #2
 8028c70:	e0db      	b.n	8028e2a <HAL_SPI_Receive+0x20a>
 8028c72:	68fb      	ldr	r3, [r7, #12]
 8028c74:	2201      	movs	r2, #1
 8028c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8028c7a:	f7fd fb95 	bl	80263a8 <HAL_GetTick>
 8028c7e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8028c80:	68fb      	ldr	r3, [r7, #12]
 8028c82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028c86:	b2db      	uxtb	r3, r3
 8028c88:	2b01      	cmp	r3, #1
 8028c8a:	d002      	beq.n	8028c92 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8028c8c:	2302      	movs	r3, #2
 8028c8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8028c90:	e0c2      	b.n	8028e18 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8028c92:	68bb      	ldr	r3, [r7, #8]
 8028c94:	2b00      	cmp	r3, #0
 8028c96:	d002      	beq.n	8028c9e <HAL_SPI_Receive+0x7e>
 8028c98:	88fb      	ldrh	r3, [r7, #6]
 8028c9a:	2b00      	cmp	r3, #0
 8028c9c:	d102      	bne.n	8028ca4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8028c9e:	2301      	movs	r3, #1
 8028ca0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8028ca2:	e0b9      	b.n	8028e18 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8028ca4:	68fb      	ldr	r3, [r7, #12]
 8028ca6:	2204      	movs	r2, #4
 8028ca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028cac:	68fb      	ldr	r3, [r7, #12]
 8028cae:	2200      	movs	r2, #0
 8028cb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8028cb2:	68fb      	ldr	r3, [r7, #12]
 8028cb4:	68ba      	ldr	r2, [r7, #8]
 8028cb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8028cb8:	68fb      	ldr	r3, [r7, #12]
 8028cba:	88fa      	ldrh	r2, [r7, #6]
 8028cbc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8028cbe:	68fb      	ldr	r3, [r7, #12]
 8028cc0:	88fa      	ldrh	r2, [r7, #6]
 8028cc2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8028cc4:	68fb      	ldr	r3, [r7, #12]
 8028cc6:	2200      	movs	r2, #0
 8028cc8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8028cca:	68fb      	ldr	r3, [r7, #12]
 8028ccc:	2200      	movs	r2, #0
 8028cce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8028cd0:	68fb      	ldr	r3, [r7, #12]
 8028cd2:	2200      	movs	r2, #0
 8028cd4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8028cd6:	68fb      	ldr	r3, [r7, #12]
 8028cd8:	2200      	movs	r2, #0
 8028cda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8028cdc:	68fb      	ldr	r3, [r7, #12]
 8028cde:	2200      	movs	r2, #0
 8028ce0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028ce2:	68fb      	ldr	r3, [r7, #12]
 8028ce4:	689b      	ldr	r3, [r3, #8]
 8028ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028cea:	d107      	bne.n	8028cfc <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8028cec:	68fb      	ldr	r3, [r7, #12]
 8028cee:	681b      	ldr	r3, [r3, #0]
 8028cf0:	681a      	ldr	r2, [r3, #0]
 8028cf2:	68fb      	ldr	r3, [r7, #12]
 8028cf4:	681b      	ldr	r3, [r3, #0]
 8028cf6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8028cfa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028cfc:	68fb      	ldr	r3, [r7, #12]
 8028cfe:	681b      	ldr	r3, [r3, #0]
 8028d00:	681b      	ldr	r3, [r3, #0]
 8028d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028d06:	2b40      	cmp	r3, #64	; 0x40
 8028d08:	d007      	beq.n	8028d1a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8028d0a:	68fb      	ldr	r3, [r7, #12]
 8028d0c:	681b      	ldr	r3, [r3, #0]
 8028d0e:	681a      	ldr	r2, [r3, #0]
 8028d10:	68fb      	ldr	r3, [r7, #12]
 8028d12:	681b      	ldr	r3, [r3, #0]
 8028d14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028d18:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8028d1a:	68fb      	ldr	r3, [r7, #12]
 8028d1c:	68db      	ldr	r3, [r3, #12]
 8028d1e:	2b00      	cmp	r3, #0
 8028d20:	d162      	bne.n	8028de8 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8028d22:	e02e      	b.n	8028d82 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8028d24:	68fb      	ldr	r3, [r7, #12]
 8028d26:	681b      	ldr	r3, [r3, #0]
 8028d28:	689b      	ldr	r3, [r3, #8]
 8028d2a:	f003 0301 	and.w	r3, r3, #1
 8028d2e:	2b01      	cmp	r3, #1
 8028d30:	d115      	bne.n	8028d5e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8028d32:	68fb      	ldr	r3, [r7, #12]
 8028d34:	681b      	ldr	r3, [r3, #0]
 8028d36:	f103 020c 	add.w	r2, r3, #12
 8028d3a:	68fb      	ldr	r3, [r7, #12]
 8028d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028d3e:	7812      	ldrb	r2, [r2, #0]
 8028d40:	b2d2      	uxtb	r2, r2
 8028d42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8028d44:	68fb      	ldr	r3, [r7, #12]
 8028d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028d48:	1c5a      	adds	r2, r3, #1
 8028d4a:	68fb      	ldr	r3, [r7, #12]
 8028d4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028d4e:	68fb      	ldr	r3, [r7, #12]
 8028d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028d52:	b29b      	uxth	r3, r3
 8028d54:	3b01      	subs	r3, #1
 8028d56:	b29a      	uxth	r2, r3
 8028d58:	68fb      	ldr	r3, [r7, #12]
 8028d5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8028d5c:	e011      	b.n	8028d82 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028d5e:	f7fd fb23 	bl	80263a8 <HAL_GetTick>
 8028d62:	4602      	mov	r2, r0
 8028d64:	693b      	ldr	r3, [r7, #16]
 8028d66:	1ad3      	subs	r3, r2, r3
 8028d68:	683a      	ldr	r2, [r7, #0]
 8028d6a:	429a      	cmp	r2, r3
 8028d6c:	d803      	bhi.n	8028d76 <HAL_SPI_Receive+0x156>
 8028d6e:	683b      	ldr	r3, [r7, #0]
 8028d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028d74:	d102      	bne.n	8028d7c <HAL_SPI_Receive+0x15c>
 8028d76:	683b      	ldr	r3, [r7, #0]
 8028d78:	2b00      	cmp	r3, #0
 8028d7a:	d102      	bne.n	8028d82 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8028d7c:	2303      	movs	r3, #3
 8028d7e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8028d80:	e04a      	b.n	8028e18 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8028d82:	68fb      	ldr	r3, [r7, #12]
 8028d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028d86:	b29b      	uxth	r3, r3
 8028d88:	2b00      	cmp	r3, #0
 8028d8a:	d1cb      	bne.n	8028d24 <HAL_SPI_Receive+0x104>
 8028d8c:	e031      	b.n	8028df2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8028d8e:	68fb      	ldr	r3, [r7, #12]
 8028d90:	681b      	ldr	r3, [r3, #0]
 8028d92:	689b      	ldr	r3, [r3, #8]
 8028d94:	f003 0301 	and.w	r3, r3, #1
 8028d98:	2b01      	cmp	r3, #1
 8028d9a:	d113      	bne.n	8028dc4 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8028d9c:	68fb      	ldr	r3, [r7, #12]
 8028d9e:	681b      	ldr	r3, [r3, #0]
 8028da0:	68da      	ldr	r2, [r3, #12]
 8028da2:	68fb      	ldr	r3, [r7, #12]
 8028da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028da6:	b292      	uxth	r2, r2
 8028da8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8028daa:	68fb      	ldr	r3, [r7, #12]
 8028dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028dae:	1c9a      	adds	r2, r3, #2
 8028db0:	68fb      	ldr	r3, [r7, #12]
 8028db2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028db4:	68fb      	ldr	r3, [r7, #12]
 8028db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028db8:	b29b      	uxth	r3, r3
 8028dba:	3b01      	subs	r3, #1
 8028dbc:	b29a      	uxth	r2, r3
 8028dbe:	68fb      	ldr	r3, [r7, #12]
 8028dc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8028dc2:	e011      	b.n	8028de8 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028dc4:	f7fd faf0 	bl	80263a8 <HAL_GetTick>
 8028dc8:	4602      	mov	r2, r0
 8028dca:	693b      	ldr	r3, [r7, #16]
 8028dcc:	1ad3      	subs	r3, r2, r3
 8028dce:	683a      	ldr	r2, [r7, #0]
 8028dd0:	429a      	cmp	r2, r3
 8028dd2:	d803      	bhi.n	8028ddc <HAL_SPI_Receive+0x1bc>
 8028dd4:	683b      	ldr	r3, [r7, #0]
 8028dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028dda:	d102      	bne.n	8028de2 <HAL_SPI_Receive+0x1c2>
 8028ddc:	683b      	ldr	r3, [r7, #0]
 8028dde:	2b00      	cmp	r3, #0
 8028de0:	d102      	bne.n	8028de8 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8028de2:	2303      	movs	r3, #3
 8028de4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8028de6:	e017      	b.n	8028e18 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8028de8:	68fb      	ldr	r3, [r7, #12]
 8028dea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028dec:	b29b      	uxth	r3, r3
 8028dee:	2b00      	cmp	r3, #0
 8028df0:	d1cd      	bne.n	8028d8e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028df2:	693a      	ldr	r2, [r7, #16]
 8028df4:	6839      	ldr	r1, [r7, #0]
 8028df6:	68f8      	ldr	r0, [r7, #12]
 8028df8:	f000 fa27 	bl	802924a <SPI_EndRxTransaction>
 8028dfc:	4603      	mov	r3, r0
 8028dfe:	2b00      	cmp	r3, #0
 8028e00:	d002      	beq.n	8028e08 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028e02:	68fb      	ldr	r3, [r7, #12]
 8028e04:	2220      	movs	r2, #32
 8028e06:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8028e08:	68fb      	ldr	r3, [r7, #12]
 8028e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028e0c:	2b00      	cmp	r3, #0
 8028e0e:	d002      	beq.n	8028e16 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8028e10:	2301      	movs	r3, #1
 8028e12:	75fb      	strb	r3, [r7, #23]
 8028e14:	e000      	b.n	8028e18 <HAL_SPI_Receive+0x1f8>
  }

error :
 8028e16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8028e18:	68fb      	ldr	r3, [r7, #12]
 8028e1a:	2201      	movs	r2, #1
 8028e1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8028e20:	68fb      	ldr	r3, [r7, #12]
 8028e22:	2200      	movs	r2, #0
 8028e24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8028e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8028e2a:	4618      	mov	r0, r3
 8028e2c:	3718      	adds	r7, #24
 8028e2e:	46bd      	mov	sp, r7
 8028e30:	bd80      	pop	{r7, pc}

08028e32 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8028e32:	b580      	push	{r7, lr}
 8028e34:	b08c      	sub	sp, #48	; 0x30
 8028e36:	af00      	add	r7, sp, #0
 8028e38:	60f8      	str	r0, [r7, #12]
 8028e3a:	60b9      	str	r1, [r7, #8]
 8028e3c:	607a      	str	r2, [r7, #4]
 8028e3e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8028e40:	2301      	movs	r3, #1
 8028e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8028e44:	2300      	movs	r3, #0
 8028e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8028e4a:	68fb      	ldr	r3, [r7, #12]
 8028e4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8028e50:	2b01      	cmp	r3, #1
 8028e52:	d101      	bne.n	8028e58 <HAL_SPI_TransmitReceive+0x26>
 8028e54:	2302      	movs	r3, #2
 8028e56:	e18a      	b.n	802916e <HAL_SPI_TransmitReceive+0x33c>
 8028e58:	68fb      	ldr	r3, [r7, #12]
 8028e5a:	2201      	movs	r2, #1
 8028e5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8028e60:	f7fd faa2 	bl	80263a8 <HAL_GetTick>
 8028e64:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8028e66:	68fb      	ldr	r3, [r7, #12]
 8028e68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028e6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8028e70:	68fb      	ldr	r3, [r7, #12]
 8028e72:	685b      	ldr	r3, [r3, #4]
 8028e74:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8028e76:	887b      	ldrh	r3, [r7, #2]
 8028e78:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8028e7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8028e7e:	2b01      	cmp	r3, #1
 8028e80:	d00f      	beq.n	8028ea2 <HAL_SPI_TransmitReceive+0x70>
 8028e82:	69fb      	ldr	r3, [r7, #28]
 8028e84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028e88:	d107      	bne.n	8028e9a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8028e8a:	68fb      	ldr	r3, [r7, #12]
 8028e8c:	689b      	ldr	r3, [r3, #8]
 8028e8e:	2b00      	cmp	r3, #0
 8028e90:	d103      	bne.n	8028e9a <HAL_SPI_TransmitReceive+0x68>
 8028e92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8028e96:	2b04      	cmp	r3, #4
 8028e98:	d003      	beq.n	8028ea2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8028e9a:	2302      	movs	r3, #2
 8028e9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8028ea0:	e15b      	b.n	802915a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8028ea2:	68bb      	ldr	r3, [r7, #8]
 8028ea4:	2b00      	cmp	r3, #0
 8028ea6:	d005      	beq.n	8028eb4 <HAL_SPI_TransmitReceive+0x82>
 8028ea8:	687b      	ldr	r3, [r7, #4]
 8028eaa:	2b00      	cmp	r3, #0
 8028eac:	d002      	beq.n	8028eb4 <HAL_SPI_TransmitReceive+0x82>
 8028eae:	887b      	ldrh	r3, [r7, #2]
 8028eb0:	2b00      	cmp	r3, #0
 8028eb2:	d103      	bne.n	8028ebc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8028eb4:	2301      	movs	r3, #1
 8028eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8028eba:	e14e      	b.n	802915a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8028ebc:	68fb      	ldr	r3, [r7, #12]
 8028ebe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028ec2:	b2db      	uxtb	r3, r3
 8028ec4:	2b04      	cmp	r3, #4
 8028ec6:	d003      	beq.n	8028ed0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8028ec8:	68fb      	ldr	r3, [r7, #12]
 8028eca:	2205      	movs	r2, #5
 8028ecc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028ed0:	68fb      	ldr	r3, [r7, #12]
 8028ed2:	2200      	movs	r2, #0
 8028ed4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8028ed6:	68fb      	ldr	r3, [r7, #12]
 8028ed8:	687a      	ldr	r2, [r7, #4]
 8028eda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8028edc:	68fb      	ldr	r3, [r7, #12]
 8028ede:	887a      	ldrh	r2, [r7, #2]
 8028ee0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8028ee2:	68fb      	ldr	r3, [r7, #12]
 8028ee4:	887a      	ldrh	r2, [r7, #2]
 8028ee6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8028ee8:	68fb      	ldr	r3, [r7, #12]
 8028eea:	68ba      	ldr	r2, [r7, #8]
 8028eec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8028eee:	68fb      	ldr	r3, [r7, #12]
 8028ef0:	887a      	ldrh	r2, [r7, #2]
 8028ef2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8028ef4:	68fb      	ldr	r3, [r7, #12]
 8028ef6:	887a      	ldrh	r2, [r7, #2]
 8028ef8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8028efa:	68fb      	ldr	r3, [r7, #12]
 8028efc:	2200      	movs	r2, #0
 8028efe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8028f00:	68fb      	ldr	r3, [r7, #12]
 8028f02:	2200      	movs	r2, #0
 8028f04:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028f06:	68fb      	ldr	r3, [r7, #12]
 8028f08:	681b      	ldr	r3, [r3, #0]
 8028f0a:	681b      	ldr	r3, [r3, #0]
 8028f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028f10:	2b40      	cmp	r3, #64	; 0x40
 8028f12:	d007      	beq.n	8028f24 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8028f14:	68fb      	ldr	r3, [r7, #12]
 8028f16:	681b      	ldr	r3, [r3, #0]
 8028f18:	681a      	ldr	r2, [r3, #0]
 8028f1a:	68fb      	ldr	r3, [r7, #12]
 8028f1c:	681b      	ldr	r3, [r3, #0]
 8028f1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028f22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8028f24:	68fb      	ldr	r3, [r7, #12]
 8028f26:	68db      	ldr	r3, [r3, #12]
 8028f28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8028f2c:	d178      	bne.n	8029020 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028f2e:	68fb      	ldr	r3, [r7, #12]
 8028f30:	685b      	ldr	r3, [r3, #4]
 8028f32:	2b00      	cmp	r3, #0
 8028f34:	d002      	beq.n	8028f3c <HAL_SPI_TransmitReceive+0x10a>
 8028f36:	8b7b      	ldrh	r3, [r7, #26]
 8028f38:	2b01      	cmp	r3, #1
 8028f3a:	d166      	bne.n	802900a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028f3c:	68fb      	ldr	r3, [r7, #12]
 8028f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028f40:	881a      	ldrh	r2, [r3, #0]
 8028f42:	68fb      	ldr	r3, [r7, #12]
 8028f44:	681b      	ldr	r3, [r3, #0]
 8028f46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8028f48:	68fb      	ldr	r3, [r7, #12]
 8028f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028f4c:	1c9a      	adds	r2, r3, #2
 8028f4e:	68fb      	ldr	r3, [r7, #12]
 8028f50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028f52:	68fb      	ldr	r3, [r7, #12]
 8028f54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028f56:	b29b      	uxth	r3, r3
 8028f58:	3b01      	subs	r3, #1
 8028f5a:	b29a      	uxth	r2, r3
 8028f5c:	68fb      	ldr	r3, [r7, #12]
 8028f5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8028f60:	e053      	b.n	802900a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8028f62:	68fb      	ldr	r3, [r7, #12]
 8028f64:	681b      	ldr	r3, [r3, #0]
 8028f66:	689b      	ldr	r3, [r3, #8]
 8028f68:	f003 0302 	and.w	r3, r3, #2
 8028f6c:	2b02      	cmp	r3, #2
 8028f6e:	d11b      	bne.n	8028fa8 <HAL_SPI_TransmitReceive+0x176>
 8028f70:	68fb      	ldr	r3, [r7, #12]
 8028f72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028f74:	b29b      	uxth	r3, r3
 8028f76:	2b00      	cmp	r3, #0
 8028f78:	d016      	beq.n	8028fa8 <HAL_SPI_TransmitReceive+0x176>
 8028f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028f7c:	2b01      	cmp	r3, #1
 8028f7e:	d113      	bne.n	8028fa8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028f80:	68fb      	ldr	r3, [r7, #12]
 8028f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028f84:	881a      	ldrh	r2, [r3, #0]
 8028f86:	68fb      	ldr	r3, [r7, #12]
 8028f88:	681b      	ldr	r3, [r3, #0]
 8028f8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8028f8c:	68fb      	ldr	r3, [r7, #12]
 8028f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028f90:	1c9a      	adds	r2, r3, #2
 8028f92:	68fb      	ldr	r3, [r7, #12]
 8028f94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028f96:	68fb      	ldr	r3, [r7, #12]
 8028f98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028f9a:	b29b      	uxth	r3, r3
 8028f9c:	3b01      	subs	r3, #1
 8028f9e:	b29a      	uxth	r2, r3
 8028fa0:	68fb      	ldr	r3, [r7, #12]
 8028fa2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8028fa4:	2300      	movs	r3, #0
 8028fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8028fa8:	68fb      	ldr	r3, [r7, #12]
 8028faa:	681b      	ldr	r3, [r3, #0]
 8028fac:	689b      	ldr	r3, [r3, #8]
 8028fae:	f003 0301 	and.w	r3, r3, #1
 8028fb2:	2b01      	cmp	r3, #1
 8028fb4:	d119      	bne.n	8028fea <HAL_SPI_TransmitReceive+0x1b8>
 8028fb6:	68fb      	ldr	r3, [r7, #12]
 8028fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028fba:	b29b      	uxth	r3, r3
 8028fbc:	2b00      	cmp	r3, #0
 8028fbe:	d014      	beq.n	8028fea <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8028fc0:	68fb      	ldr	r3, [r7, #12]
 8028fc2:	681b      	ldr	r3, [r3, #0]
 8028fc4:	68da      	ldr	r2, [r3, #12]
 8028fc6:	68fb      	ldr	r3, [r7, #12]
 8028fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028fca:	b292      	uxth	r2, r2
 8028fcc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8028fce:	68fb      	ldr	r3, [r7, #12]
 8028fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028fd2:	1c9a      	adds	r2, r3, #2
 8028fd4:	68fb      	ldr	r3, [r7, #12]
 8028fd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028fd8:	68fb      	ldr	r3, [r7, #12]
 8028fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028fdc:	b29b      	uxth	r3, r3
 8028fde:	3b01      	subs	r3, #1
 8028fe0:	b29a      	uxth	r2, r3
 8028fe2:	68fb      	ldr	r3, [r7, #12]
 8028fe4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8028fe6:	2301      	movs	r3, #1
 8028fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8028fea:	f7fd f9dd 	bl	80263a8 <HAL_GetTick>
 8028fee:	4602      	mov	r2, r0
 8028ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028ff2:	1ad3      	subs	r3, r2, r3
 8028ff4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8028ff6:	429a      	cmp	r2, r3
 8028ff8:	d807      	bhi.n	802900a <HAL_SPI_TransmitReceive+0x1d8>
 8028ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029000:	d003      	beq.n	802900a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8029002:	2303      	movs	r3, #3
 8029004:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8029008:	e0a7      	b.n	802915a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 802900a:	68fb      	ldr	r3, [r7, #12]
 802900c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802900e:	b29b      	uxth	r3, r3
 8029010:	2b00      	cmp	r3, #0
 8029012:	d1a6      	bne.n	8028f62 <HAL_SPI_TransmitReceive+0x130>
 8029014:	68fb      	ldr	r3, [r7, #12]
 8029016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8029018:	b29b      	uxth	r3, r3
 802901a:	2b00      	cmp	r3, #0
 802901c:	d1a1      	bne.n	8028f62 <HAL_SPI_TransmitReceive+0x130>
 802901e:	e07c      	b.n	802911a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8029020:	68fb      	ldr	r3, [r7, #12]
 8029022:	685b      	ldr	r3, [r3, #4]
 8029024:	2b00      	cmp	r3, #0
 8029026:	d002      	beq.n	802902e <HAL_SPI_TransmitReceive+0x1fc>
 8029028:	8b7b      	ldrh	r3, [r7, #26]
 802902a:	2b01      	cmp	r3, #1
 802902c:	d16b      	bne.n	8029106 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 802902e:	68fb      	ldr	r3, [r7, #12]
 8029030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8029032:	68fb      	ldr	r3, [r7, #12]
 8029034:	681b      	ldr	r3, [r3, #0]
 8029036:	330c      	adds	r3, #12
 8029038:	7812      	ldrb	r2, [r2, #0]
 802903a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 802903c:	68fb      	ldr	r3, [r7, #12]
 802903e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029040:	1c5a      	adds	r2, r3, #1
 8029042:	68fb      	ldr	r3, [r7, #12]
 8029044:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8029046:	68fb      	ldr	r3, [r7, #12]
 8029048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802904a:	b29b      	uxth	r3, r3
 802904c:	3b01      	subs	r3, #1
 802904e:	b29a      	uxth	r2, r3
 8029050:	68fb      	ldr	r3, [r7, #12]
 8029052:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8029054:	e057      	b.n	8029106 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8029056:	68fb      	ldr	r3, [r7, #12]
 8029058:	681b      	ldr	r3, [r3, #0]
 802905a:	689b      	ldr	r3, [r3, #8]
 802905c:	f003 0302 	and.w	r3, r3, #2
 8029060:	2b02      	cmp	r3, #2
 8029062:	d11c      	bne.n	802909e <HAL_SPI_TransmitReceive+0x26c>
 8029064:	68fb      	ldr	r3, [r7, #12]
 8029066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029068:	b29b      	uxth	r3, r3
 802906a:	2b00      	cmp	r3, #0
 802906c:	d017      	beq.n	802909e <HAL_SPI_TransmitReceive+0x26c>
 802906e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029070:	2b01      	cmp	r3, #1
 8029072:	d114      	bne.n	802909e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8029074:	68fb      	ldr	r3, [r7, #12]
 8029076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8029078:	68fb      	ldr	r3, [r7, #12]
 802907a:	681b      	ldr	r3, [r3, #0]
 802907c:	330c      	adds	r3, #12
 802907e:	7812      	ldrb	r2, [r2, #0]
 8029080:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8029082:	68fb      	ldr	r3, [r7, #12]
 8029084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029086:	1c5a      	adds	r2, r3, #1
 8029088:	68fb      	ldr	r3, [r7, #12]
 802908a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 802908c:	68fb      	ldr	r3, [r7, #12]
 802908e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029090:	b29b      	uxth	r3, r3
 8029092:	3b01      	subs	r3, #1
 8029094:	b29a      	uxth	r2, r3
 8029096:	68fb      	ldr	r3, [r7, #12]
 8029098:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 802909a:	2300      	movs	r3, #0
 802909c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 802909e:	68fb      	ldr	r3, [r7, #12]
 80290a0:	681b      	ldr	r3, [r3, #0]
 80290a2:	689b      	ldr	r3, [r3, #8]
 80290a4:	f003 0301 	and.w	r3, r3, #1
 80290a8:	2b01      	cmp	r3, #1
 80290aa:	d119      	bne.n	80290e0 <HAL_SPI_TransmitReceive+0x2ae>
 80290ac:	68fb      	ldr	r3, [r7, #12]
 80290ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80290b0:	b29b      	uxth	r3, r3
 80290b2:	2b00      	cmp	r3, #0
 80290b4:	d014      	beq.n	80290e0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80290b6:	68fb      	ldr	r3, [r7, #12]
 80290b8:	681b      	ldr	r3, [r3, #0]
 80290ba:	68da      	ldr	r2, [r3, #12]
 80290bc:	68fb      	ldr	r3, [r7, #12]
 80290be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80290c0:	b2d2      	uxtb	r2, r2
 80290c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80290c4:	68fb      	ldr	r3, [r7, #12]
 80290c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80290c8:	1c5a      	adds	r2, r3, #1
 80290ca:	68fb      	ldr	r3, [r7, #12]
 80290cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80290ce:	68fb      	ldr	r3, [r7, #12]
 80290d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80290d2:	b29b      	uxth	r3, r3
 80290d4:	3b01      	subs	r3, #1
 80290d6:	b29a      	uxth	r2, r3
 80290d8:	68fb      	ldr	r3, [r7, #12]
 80290da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80290dc:	2301      	movs	r3, #1
 80290de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80290e0:	f7fd f962 	bl	80263a8 <HAL_GetTick>
 80290e4:	4602      	mov	r2, r0
 80290e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80290e8:	1ad3      	subs	r3, r2, r3
 80290ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80290ec:	429a      	cmp	r2, r3
 80290ee:	d803      	bhi.n	80290f8 <HAL_SPI_TransmitReceive+0x2c6>
 80290f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80290f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80290f6:	d102      	bne.n	80290fe <HAL_SPI_TransmitReceive+0x2cc>
 80290f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80290fa:	2b00      	cmp	r3, #0
 80290fc:	d103      	bne.n	8029106 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80290fe:	2303      	movs	r3, #3
 8029100:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8029104:	e029      	b.n	802915a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8029106:	68fb      	ldr	r3, [r7, #12]
 8029108:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802910a:	b29b      	uxth	r3, r3
 802910c:	2b00      	cmp	r3, #0
 802910e:	d1a2      	bne.n	8029056 <HAL_SPI_TransmitReceive+0x224>
 8029110:	68fb      	ldr	r3, [r7, #12]
 8029112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8029114:	b29b      	uxth	r3, r3
 8029116:	2b00      	cmp	r3, #0
 8029118:	d19d      	bne.n	8029056 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 802911a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802911c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 802911e:	68f8      	ldr	r0, [r7, #12]
 8029120:	f000 f8f8 	bl	8029314 <SPI_EndRxTxTransaction>
 8029124:	4603      	mov	r3, r0
 8029126:	2b00      	cmp	r3, #0
 8029128:	d006      	beq.n	8029138 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 802912a:	2301      	movs	r3, #1
 802912c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8029130:	68fb      	ldr	r3, [r7, #12]
 8029132:	2220      	movs	r2, #32
 8029134:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8029136:	e010      	b.n	802915a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8029138:	68fb      	ldr	r3, [r7, #12]
 802913a:	689b      	ldr	r3, [r3, #8]
 802913c:	2b00      	cmp	r3, #0
 802913e:	d10b      	bne.n	8029158 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8029140:	2300      	movs	r3, #0
 8029142:	617b      	str	r3, [r7, #20]
 8029144:	68fb      	ldr	r3, [r7, #12]
 8029146:	681b      	ldr	r3, [r3, #0]
 8029148:	68db      	ldr	r3, [r3, #12]
 802914a:	617b      	str	r3, [r7, #20]
 802914c:	68fb      	ldr	r3, [r7, #12]
 802914e:	681b      	ldr	r3, [r3, #0]
 8029150:	689b      	ldr	r3, [r3, #8]
 8029152:	617b      	str	r3, [r7, #20]
 8029154:	697b      	ldr	r3, [r7, #20]
 8029156:	e000      	b.n	802915a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8029158:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 802915a:	68fb      	ldr	r3, [r7, #12]
 802915c:	2201      	movs	r2, #1
 802915e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8029162:	68fb      	ldr	r3, [r7, #12]
 8029164:	2200      	movs	r2, #0
 8029166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 802916a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 802916e:	4618      	mov	r0, r3
 8029170:	3730      	adds	r7, #48	; 0x30
 8029172:	46bd      	mov	sp, r7
 8029174:	bd80      	pop	{r7, pc}

08029176 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8029176:	b580      	push	{r7, lr}
 8029178:	b084      	sub	sp, #16
 802917a:	af00      	add	r7, sp, #0
 802917c:	60f8      	str	r0, [r7, #12]
 802917e:	60b9      	str	r1, [r7, #8]
 8029180:	603b      	str	r3, [r7, #0]
 8029182:	4613      	mov	r3, r2
 8029184:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8029186:	e04c      	b.n	8029222 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8029188:	683b      	ldr	r3, [r7, #0]
 802918a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802918e:	d048      	beq.n	8029222 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8029190:	f7fd f90a 	bl	80263a8 <HAL_GetTick>
 8029194:	4602      	mov	r2, r0
 8029196:	69bb      	ldr	r3, [r7, #24]
 8029198:	1ad3      	subs	r3, r2, r3
 802919a:	683a      	ldr	r2, [r7, #0]
 802919c:	429a      	cmp	r2, r3
 802919e:	d902      	bls.n	80291a6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80291a0:	683b      	ldr	r3, [r7, #0]
 80291a2:	2b00      	cmp	r3, #0
 80291a4:	d13d      	bne.n	8029222 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80291a6:	68fb      	ldr	r3, [r7, #12]
 80291a8:	681b      	ldr	r3, [r3, #0]
 80291aa:	685a      	ldr	r2, [r3, #4]
 80291ac:	68fb      	ldr	r3, [r7, #12]
 80291ae:	681b      	ldr	r3, [r3, #0]
 80291b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80291b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80291b6:	68fb      	ldr	r3, [r7, #12]
 80291b8:	685b      	ldr	r3, [r3, #4]
 80291ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80291be:	d111      	bne.n	80291e4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80291c0:	68fb      	ldr	r3, [r7, #12]
 80291c2:	689b      	ldr	r3, [r3, #8]
 80291c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80291c8:	d004      	beq.n	80291d4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80291ca:	68fb      	ldr	r3, [r7, #12]
 80291cc:	689b      	ldr	r3, [r3, #8]
 80291ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80291d2:	d107      	bne.n	80291e4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80291d4:	68fb      	ldr	r3, [r7, #12]
 80291d6:	681b      	ldr	r3, [r3, #0]
 80291d8:	681a      	ldr	r2, [r3, #0]
 80291da:	68fb      	ldr	r3, [r7, #12]
 80291dc:	681b      	ldr	r3, [r3, #0]
 80291de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80291e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80291e4:	68fb      	ldr	r3, [r7, #12]
 80291e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80291e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80291ec:	d10f      	bne.n	802920e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80291ee:	68fb      	ldr	r3, [r7, #12]
 80291f0:	681b      	ldr	r3, [r3, #0]
 80291f2:	681a      	ldr	r2, [r3, #0]
 80291f4:	68fb      	ldr	r3, [r7, #12]
 80291f6:	681b      	ldr	r3, [r3, #0]
 80291f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80291fc:	601a      	str	r2, [r3, #0]
 80291fe:	68fb      	ldr	r3, [r7, #12]
 8029200:	681b      	ldr	r3, [r3, #0]
 8029202:	681a      	ldr	r2, [r3, #0]
 8029204:	68fb      	ldr	r3, [r7, #12]
 8029206:	681b      	ldr	r3, [r3, #0]
 8029208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802920c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 802920e:	68fb      	ldr	r3, [r7, #12]
 8029210:	2201      	movs	r2, #1
 8029212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8029216:	68fb      	ldr	r3, [r7, #12]
 8029218:	2200      	movs	r2, #0
 802921a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 802921e:	2303      	movs	r3, #3
 8029220:	e00f      	b.n	8029242 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8029222:	68fb      	ldr	r3, [r7, #12]
 8029224:	681b      	ldr	r3, [r3, #0]
 8029226:	689a      	ldr	r2, [r3, #8]
 8029228:	68bb      	ldr	r3, [r7, #8]
 802922a:	4013      	ands	r3, r2
 802922c:	68ba      	ldr	r2, [r7, #8]
 802922e:	429a      	cmp	r2, r3
 8029230:	bf0c      	ite	eq
 8029232:	2301      	moveq	r3, #1
 8029234:	2300      	movne	r3, #0
 8029236:	b2db      	uxtb	r3, r3
 8029238:	461a      	mov	r2, r3
 802923a:	79fb      	ldrb	r3, [r7, #7]
 802923c:	429a      	cmp	r2, r3
 802923e:	d1a3      	bne.n	8029188 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8029240:	2300      	movs	r3, #0
}
 8029242:	4618      	mov	r0, r3
 8029244:	3710      	adds	r7, #16
 8029246:	46bd      	mov	sp, r7
 8029248:	bd80      	pop	{r7, pc}

0802924a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 802924a:	b580      	push	{r7, lr}
 802924c:	b086      	sub	sp, #24
 802924e:	af02      	add	r7, sp, #8
 8029250:	60f8      	str	r0, [r7, #12]
 8029252:	60b9      	str	r1, [r7, #8]
 8029254:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8029256:	68fb      	ldr	r3, [r7, #12]
 8029258:	685b      	ldr	r3, [r3, #4]
 802925a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802925e:	d111      	bne.n	8029284 <SPI_EndRxTransaction+0x3a>
 8029260:	68fb      	ldr	r3, [r7, #12]
 8029262:	689b      	ldr	r3, [r3, #8]
 8029264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8029268:	d004      	beq.n	8029274 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 802926a:	68fb      	ldr	r3, [r7, #12]
 802926c:	689b      	ldr	r3, [r3, #8]
 802926e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8029272:	d107      	bne.n	8029284 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8029274:	68fb      	ldr	r3, [r7, #12]
 8029276:	681b      	ldr	r3, [r3, #0]
 8029278:	681a      	ldr	r2, [r3, #0]
 802927a:	68fb      	ldr	r3, [r7, #12]
 802927c:	681b      	ldr	r3, [r3, #0]
 802927e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8029282:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8029284:	68fb      	ldr	r3, [r7, #12]
 8029286:	685b      	ldr	r3, [r3, #4]
 8029288:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802928c:	d12a      	bne.n	80292e4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 802928e:	68fb      	ldr	r3, [r7, #12]
 8029290:	689b      	ldr	r3, [r3, #8]
 8029292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8029296:	d012      	beq.n	80292be <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8029298:	687b      	ldr	r3, [r7, #4]
 802929a:	9300      	str	r3, [sp, #0]
 802929c:	68bb      	ldr	r3, [r7, #8]
 802929e:	2200      	movs	r2, #0
 80292a0:	2180      	movs	r1, #128	; 0x80
 80292a2:	68f8      	ldr	r0, [r7, #12]
 80292a4:	f7ff ff67 	bl	8029176 <SPI_WaitFlagStateUntilTimeout>
 80292a8:	4603      	mov	r3, r0
 80292aa:	2b00      	cmp	r3, #0
 80292ac:	d02d      	beq.n	802930a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80292ae:	68fb      	ldr	r3, [r7, #12]
 80292b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80292b2:	f043 0220 	orr.w	r2, r3, #32
 80292b6:	68fb      	ldr	r3, [r7, #12]
 80292b8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80292ba:	2303      	movs	r3, #3
 80292bc:	e026      	b.n	802930c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80292be:	687b      	ldr	r3, [r7, #4]
 80292c0:	9300      	str	r3, [sp, #0]
 80292c2:	68bb      	ldr	r3, [r7, #8]
 80292c4:	2200      	movs	r2, #0
 80292c6:	2101      	movs	r1, #1
 80292c8:	68f8      	ldr	r0, [r7, #12]
 80292ca:	f7ff ff54 	bl	8029176 <SPI_WaitFlagStateUntilTimeout>
 80292ce:	4603      	mov	r3, r0
 80292d0:	2b00      	cmp	r3, #0
 80292d2:	d01a      	beq.n	802930a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80292d4:	68fb      	ldr	r3, [r7, #12]
 80292d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80292d8:	f043 0220 	orr.w	r2, r3, #32
 80292dc:	68fb      	ldr	r3, [r7, #12]
 80292de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80292e0:	2303      	movs	r3, #3
 80292e2:	e013      	b.n	802930c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80292e4:	687b      	ldr	r3, [r7, #4]
 80292e6:	9300      	str	r3, [sp, #0]
 80292e8:	68bb      	ldr	r3, [r7, #8]
 80292ea:	2200      	movs	r2, #0
 80292ec:	2101      	movs	r1, #1
 80292ee:	68f8      	ldr	r0, [r7, #12]
 80292f0:	f7ff ff41 	bl	8029176 <SPI_WaitFlagStateUntilTimeout>
 80292f4:	4603      	mov	r3, r0
 80292f6:	2b00      	cmp	r3, #0
 80292f8:	d007      	beq.n	802930a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80292fa:	68fb      	ldr	r3, [r7, #12]
 80292fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80292fe:	f043 0220 	orr.w	r2, r3, #32
 8029302:	68fb      	ldr	r3, [r7, #12]
 8029304:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8029306:	2303      	movs	r3, #3
 8029308:	e000      	b.n	802930c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 802930a:	2300      	movs	r3, #0
}
 802930c:	4618      	mov	r0, r3
 802930e:	3710      	adds	r7, #16
 8029310:	46bd      	mov	sp, r7
 8029312:	bd80      	pop	{r7, pc}

08029314 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8029314:	b580      	push	{r7, lr}
 8029316:	b088      	sub	sp, #32
 8029318:	af02      	add	r7, sp, #8
 802931a:	60f8      	str	r0, [r7, #12]
 802931c:	60b9      	str	r1, [r7, #8]
 802931e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8029320:	4b1b      	ldr	r3, [pc, #108]	; (8029390 <SPI_EndRxTxTransaction+0x7c>)
 8029322:	681b      	ldr	r3, [r3, #0]
 8029324:	4a1b      	ldr	r2, [pc, #108]	; (8029394 <SPI_EndRxTxTransaction+0x80>)
 8029326:	fba2 2303 	umull	r2, r3, r2, r3
 802932a:	0d5b      	lsrs	r3, r3, #21
 802932c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8029330:	fb02 f303 	mul.w	r3, r2, r3
 8029334:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8029336:	68fb      	ldr	r3, [r7, #12]
 8029338:	685b      	ldr	r3, [r3, #4]
 802933a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802933e:	d112      	bne.n	8029366 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8029340:	687b      	ldr	r3, [r7, #4]
 8029342:	9300      	str	r3, [sp, #0]
 8029344:	68bb      	ldr	r3, [r7, #8]
 8029346:	2200      	movs	r2, #0
 8029348:	2180      	movs	r1, #128	; 0x80
 802934a:	68f8      	ldr	r0, [r7, #12]
 802934c:	f7ff ff13 	bl	8029176 <SPI_WaitFlagStateUntilTimeout>
 8029350:	4603      	mov	r3, r0
 8029352:	2b00      	cmp	r3, #0
 8029354:	d016      	beq.n	8029384 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8029356:	68fb      	ldr	r3, [r7, #12]
 8029358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802935a:	f043 0220 	orr.w	r2, r3, #32
 802935e:	68fb      	ldr	r3, [r7, #12]
 8029360:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8029362:	2303      	movs	r3, #3
 8029364:	e00f      	b.n	8029386 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8029366:	697b      	ldr	r3, [r7, #20]
 8029368:	2b00      	cmp	r3, #0
 802936a:	d00a      	beq.n	8029382 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 802936c:	697b      	ldr	r3, [r7, #20]
 802936e:	3b01      	subs	r3, #1
 8029370:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8029372:	68fb      	ldr	r3, [r7, #12]
 8029374:	681b      	ldr	r3, [r3, #0]
 8029376:	689b      	ldr	r3, [r3, #8]
 8029378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802937c:	2b80      	cmp	r3, #128	; 0x80
 802937e:	d0f2      	beq.n	8029366 <SPI_EndRxTxTransaction+0x52>
 8029380:	e000      	b.n	8029384 <SPI_EndRxTxTransaction+0x70>
        break;
 8029382:	bf00      	nop
  }

  return HAL_OK;
 8029384:	2300      	movs	r3, #0
}
 8029386:	4618      	mov	r0, r3
 8029388:	3718      	adds	r7, #24
 802938a:	46bd      	mov	sp, r7
 802938c:	bd80      	pop	{r7, pc}
 802938e:	bf00      	nop
 8029390:	20000004 	.word	0x20000004
 8029394:	165e9f81 	.word	0x165e9f81

08029398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8029398:	b580      	push	{r7, lr}
 802939a:	b082      	sub	sp, #8
 802939c:	af00      	add	r7, sp, #0
 802939e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80293a0:	687b      	ldr	r3, [r7, #4]
 80293a2:	2b00      	cmp	r3, #0
 80293a4:	d101      	bne.n	80293aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80293a6:	2301      	movs	r3, #1
 80293a8:	e01d      	b.n	80293e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80293aa:	687b      	ldr	r3, [r7, #4]
 80293ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80293b0:	b2db      	uxtb	r3, r3
 80293b2:	2b00      	cmp	r3, #0
 80293b4:	d106      	bne.n	80293c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80293b6:	687b      	ldr	r3, [r7, #4]
 80293b8:	2200      	movs	r2, #0
 80293ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80293be:	6878      	ldr	r0, [r7, #4]
 80293c0:	f7fc fa14 	bl	80257ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80293c4:	687b      	ldr	r3, [r7, #4]
 80293c6:	2202      	movs	r2, #2
 80293c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80293cc:	687b      	ldr	r3, [r7, #4]
 80293ce:	681a      	ldr	r2, [r3, #0]
 80293d0:	687b      	ldr	r3, [r7, #4]
 80293d2:	3304      	adds	r3, #4
 80293d4:	4619      	mov	r1, r3
 80293d6:	4610      	mov	r0, r2
 80293d8:	f000 fc3a 	bl	8029c50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80293dc:	687b      	ldr	r3, [r7, #4]
 80293de:	2201      	movs	r2, #1
 80293e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80293e4:	2300      	movs	r3, #0
}
 80293e6:	4618      	mov	r0, r3
 80293e8:	3708      	adds	r7, #8
 80293ea:	46bd      	mov	sp, r7
 80293ec:	bd80      	pop	{r7, pc}

080293ee <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80293ee:	b480      	push	{r7}
 80293f0:	b085      	sub	sp, #20
 80293f2:	af00      	add	r7, sp, #0
 80293f4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80293f6:	687b      	ldr	r3, [r7, #4]
 80293f8:	681b      	ldr	r3, [r3, #0]
 80293fa:	68da      	ldr	r2, [r3, #12]
 80293fc:	687b      	ldr	r3, [r7, #4]
 80293fe:	681b      	ldr	r3, [r3, #0]
 8029400:	f042 0201 	orr.w	r2, r2, #1
 8029404:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8029406:	687b      	ldr	r3, [r7, #4]
 8029408:	681b      	ldr	r3, [r3, #0]
 802940a:	689b      	ldr	r3, [r3, #8]
 802940c:	f003 0307 	and.w	r3, r3, #7
 8029410:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8029412:	68fb      	ldr	r3, [r7, #12]
 8029414:	2b06      	cmp	r3, #6
 8029416:	d007      	beq.n	8029428 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8029418:	687b      	ldr	r3, [r7, #4]
 802941a:	681b      	ldr	r3, [r3, #0]
 802941c:	681a      	ldr	r2, [r3, #0]
 802941e:	687b      	ldr	r3, [r7, #4]
 8029420:	681b      	ldr	r3, [r3, #0]
 8029422:	f042 0201 	orr.w	r2, r2, #1
 8029426:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8029428:	2300      	movs	r3, #0
}
 802942a:	4618      	mov	r0, r3
 802942c:	3714      	adds	r7, #20
 802942e:	46bd      	mov	sp, r7
 8029430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029434:	4770      	bx	lr

08029436 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8029436:	b480      	push	{r7}
 8029438:	b083      	sub	sp, #12
 802943a:	af00      	add	r7, sp, #0
 802943c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 802943e:	687b      	ldr	r3, [r7, #4]
 8029440:	681b      	ldr	r3, [r3, #0]
 8029442:	68da      	ldr	r2, [r3, #12]
 8029444:	687b      	ldr	r3, [r7, #4]
 8029446:	681b      	ldr	r3, [r3, #0]
 8029448:	f022 0201 	bic.w	r2, r2, #1
 802944c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 802944e:	687b      	ldr	r3, [r7, #4]
 8029450:	681b      	ldr	r3, [r3, #0]
 8029452:	6a1a      	ldr	r2, [r3, #32]
 8029454:	f241 1311 	movw	r3, #4369	; 0x1111
 8029458:	4013      	ands	r3, r2
 802945a:	2b00      	cmp	r3, #0
 802945c:	d10f      	bne.n	802947e <HAL_TIM_Base_Stop_IT+0x48>
 802945e:	687b      	ldr	r3, [r7, #4]
 8029460:	681b      	ldr	r3, [r3, #0]
 8029462:	6a1a      	ldr	r2, [r3, #32]
 8029464:	f240 4344 	movw	r3, #1092	; 0x444
 8029468:	4013      	ands	r3, r2
 802946a:	2b00      	cmp	r3, #0
 802946c:	d107      	bne.n	802947e <HAL_TIM_Base_Stop_IT+0x48>
 802946e:	687b      	ldr	r3, [r7, #4]
 8029470:	681b      	ldr	r3, [r3, #0]
 8029472:	681a      	ldr	r2, [r3, #0]
 8029474:	687b      	ldr	r3, [r7, #4]
 8029476:	681b      	ldr	r3, [r3, #0]
 8029478:	f022 0201 	bic.w	r2, r2, #1
 802947c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 802947e:	2300      	movs	r3, #0
}
 8029480:	4618      	mov	r0, r3
 8029482:	370c      	adds	r7, #12
 8029484:	46bd      	mov	sp, r7
 8029486:	f85d 7b04 	ldr.w	r7, [sp], #4
 802948a:	4770      	bx	lr

0802948c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 802948c:	b580      	push	{r7, lr}
 802948e:	b082      	sub	sp, #8
 8029490:	af00      	add	r7, sp, #0
 8029492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8029494:	687b      	ldr	r3, [r7, #4]
 8029496:	2b00      	cmp	r3, #0
 8029498:	d101      	bne.n	802949e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 802949a:	2301      	movs	r3, #1
 802949c:	e01d      	b.n	80294da <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802949e:	687b      	ldr	r3, [r7, #4]
 80294a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80294a4:	b2db      	uxtb	r3, r3
 80294a6:	2b00      	cmp	r3, #0
 80294a8:	d106      	bne.n	80294b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80294aa:	687b      	ldr	r3, [r7, #4]
 80294ac:	2200      	movs	r2, #0
 80294ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80294b2:	6878      	ldr	r0, [r7, #4]
 80294b4:	f7fc f94c 	bl	8025750 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80294b8:	687b      	ldr	r3, [r7, #4]
 80294ba:	2202      	movs	r2, #2
 80294bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80294c0:	687b      	ldr	r3, [r7, #4]
 80294c2:	681a      	ldr	r2, [r3, #0]
 80294c4:	687b      	ldr	r3, [r7, #4]
 80294c6:	3304      	adds	r3, #4
 80294c8:	4619      	mov	r1, r3
 80294ca:	4610      	mov	r0, r2
 80294cc:	f000 fbc0 	bl	8029c50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80294d0:	687b      	ldr	r3, [r7, #4]
 80294d2:	2201      	movs	r2, #1
 80294d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80294d8:	2300      	movs	r3, #0
}
 80294da:	4618      	mov	r0, r3
 80294dc:	3708      	adds	r7, #8
 80294de:	46bd      	mov	sp, r7
 80294e0:	bd80      	pop	{r7, pc}
	...

080294e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80294e4:	b580      	push	{r7, lr}
 80294e6:	b084      	sub	sp, #16
 80294e8:	af00      	add	r7, sp, #0
 80294ea:	6078      	str	r0, [r7, #4]
 80294ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80294ee:	687b      	ldr	r3, [r7, #4]
 80294f0:	681b      	ldr	r3, [r3, #0]
 80294f2:	2201      	movs	r2, #1
 80294f4:	6839      	ldr	r1, [r7, #0]
 80294f6:	4618      	mov	r0, r3
 80294f8:	f000 fe94 	bl	802a224 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80294fc:	687b      	ldr	r3, [r7, #4]
 80294fe:	681b      	ldr	r3, [r3, #0]
 8029500:	4a15      	ldr	r2, [pc, #84]	; (8029558 <HAL_TIM_PWM_Start+0x74>)
 8029502:	4293      	cmp	r3, r2
 8029504:	d004      	beq.n	8029510 <HAL_TIM_PWM_Start+0x2c>
 8029506:	687b      	ldr	r3, [r7, #4]
 8029508:	681b      	ldr	r3, [r3, #0]
 802950a:	4a14      	ldr	r2, [pc, #80]	; (802955c <HAL_TIM_PWM_Start+0x78>)
 802950c:	4293      	cmp	r3, r2
 802950e:	d101      	bne.n	8029514 <HAL_TIM_PWM_Start+0x30>
 8029510:	2301      	movs	r3, #1
 8029512:	e000      	b.n	8029516 <HAL_TIM_PWM_Start+0x32>
 8029514:	2300      	movs	r3, #0
 8029516:	2b00      	cmp	r3, #0
 8029518:	d007      	beq.n	802952a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 802951a:	687b      	ldr	r3, [r7, #4]
 802951c:	681b      	ldr	r3, [r3, #0]
 802951e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8029520:	687b      	ldr	r3, [r7, #4]
 8029522:	681b      	ldr	r3, [r3, #0]
 8029524:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8029528:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802952a:	687b      	ldr	r3, [r7, #4]
 802952c:	681b      	ldr	r3, [r3, #0]
 802952e:	689b      	ldr	r3, [r3, #8]
 8029530:	f003 0307 	and.w	r3, r3, #7
 8029534:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8029536:	68fb      	ldr	r3, [r7, #12]
 8029538:	2b06      	cmp	r3, #6
 802953a:	d007      	beq.n	802954c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 802953c:	687b      	ldr	r3, [r7, #4]
 802953e:	681b      	ldr	r3, [r3, #0]
 8029540:	681a      	ldr	r2, [r3, #0]
 8029542:	687b      	ldr	r3, [r7, #4]
 8029544:	681b      	ldr	r3, [r3, #0]
 8029546:	f042 0201 	orr.w	r2, r2, #1
 802954a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 802954c:	2300      	movs	r3, #0
}
 802954e:	4618      	mov	r0, r3
 8029550:	3710      	adds	r7, #16
 8029552:	46bd      	mov	sp, r7
 8029554:	bd80      	pop	{r7, pc}
 8029556:	bf00      	nop
 8029558:	40010000 	.word	0x40010000
 802955c:	40010400 	.word	0x40010400

08029560 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8029560:	b580      	push	{r7, lr}
 8029562:	b086      	sub	sp, #24
 8029564:	af00      	add	r7, sp, #0
 8029566:	6078      	str	r0, [r7, #4]
 8029568:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 802956a:	687b      	ldr	r3, [r7, #4]
 802956c:	2b00      	cmp	r3, #0
 802956e:	d101      	bne.n	8029574 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8029570:	2301      	movs	r3, #1
 8029572:	e083      	b.n	802967c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8029574:	687b      	ldr	r3, [r7, #4]
 8029576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802957a:	b2db      	uxtb	r3, r3
 802957c:	2b00      	cmp	r3, #0
 802957e:	d106      	bne.n	802958e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8029580:	687b      	ldr	r3, [r7, #4]
 8029582:	2200      	movs	r2, #0
 8029584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8029588:	6878      	ldr	r0, [r7, #4]
 802958a:	f7fc f9c5 	bl	8025918 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802958e:	687b      	ldr	r3, [r7, #4]
 8029590:	2202      	movs	r2, #2
 8029592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8029596:	687b      	ldr	r3, [r7, #4]
 8029598:	681b      	ldr	r3, [r3, #0]
 802959a:	689b      	ldr	r3, [r3, #8]
 802959c:	687a      	ldr	r2, [r7, #4]
 802959e:	6812      	ldr	r2, [r2, #0]
 80295a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80295a4:	f023 0307 	bic.w	r3, r3, #7
 80295a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80295aa:	687b      	ldr	r3, [r7, #4]
 80295ac:	681a      	ldr	r2, [r3, #0]
 80295ae:	687b      	ldr	r3, [r7, #4]
 80295b0:	3304      	adds	r3, #4
 80295b2:	4619      	mov	r1, r3
 80295b4:	4610      	mov	r0, r2
 80295b6:	f000 fb4b 	bl	8029c50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80295ba:	687b      	ldr	r3, [r7, #4]
 80295bc:	681b      	ldr	r3, [r3, #0]
 80295be:	689b      	ldr	r3, [r3, #8]
 80295c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80295c2:	687b      	ldr	r3, [r7, #4]
 80295c4:	681b      	ldr	r3, [r3, #0]
 80295c6:	699b      	ldr	r3, [r3, #24]
 80295c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80295ca:	687b      	ldr	r3, [r7, #4]
 80295cc:	681b      	ldr	r3, [r3, #0]
 80295ce:	6a1b      	ldr	r3, [r3, #32]
 80295d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80295d2:	683b      	ldr	r3, [r7, #0]
 80295d4:	681b      	ldr	r3, [r3, #0]
 80295d6:	697a      	ldr	r2, [r7, #20]
 80295d8:	4313      	orrs	r3, r2
 80295da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80295dc:	693b      	ldr	r3, [r7, #16]
 80295de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80295e2:	f023 0303 	bic.w	r3, r3, #3
 80295e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80295e8:	683b      	ldr	r3, [r7, #0]
 80295ea:	689a      	ldr	r2, [r3, #8]
 80295ec:	683b      	ldr	r3, [r7, #0]
 80295ee:	699b      	ldr	r3, [r3, #24]
 80295f0:	021b      	lsls	r3, r3, #8
 80295f2:	4313      	orrs	r3, r2
 80295f4:	693a      	ldr	r2, [r7, #16]
 80295f6:	4313      	orrs	r3, r2
 80295f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80295fa:	693b      	ldr	r3, [r7, #16]
 80295fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8029600:	f023 030c 	bic.w	r3, r3, #12
 8029604:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8029606:	693b      	ldr	r3, [r7, #16]
 8029608:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802960c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8029610:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8029612:	683b      	ldr	r3, [r7, #0]
 8029614:	68da      	ldr	r2, [r3, #12]
 8029616:	683b      	ldr	r3, [r7, #0]
 8029618:	69db      	ldr	r3, [r3, #28]
 802961a:	021b      	lsls	r3, r3, #8
 802961c:	4313      	orrs	r3, r2
 802961e:	693a      	ldr	r2, [r7, #16]
 8029620:	4313      	orrs	r3, r2
 8029622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8029624:	683b      	ldr	r3, [r7, #0]
 8029626:	691b      	ldr	r3, [r3, #16]
 8029628:	011a      	lsls	r2, r3, #4
 802962a:	683b      	ldr	r3, [r7, #0]
 802962c:	6a1b      	ldr	r3, [r3, #32]
 802962e:	031b      	lsls	r3, r3, #12
 8029630:	4313      	orrs	r3, r2
 8029632:	693a      	ldr	r2, [r7, #16]
 8029634:	4313      	orrs	r3, r2
 8029636:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8029638:	68fb      	ldr	r3, [r7, #12]
 802963a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 802963e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8029640:	68fb      	ldr	r3, [r7, #12]
 8029642:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8029646:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8029648:	683b      	ldr	r3, [r7, #0]
 802964a:	685a      	ldr	r2, [r3, #4]
 802964c:	683b      	ldr	r3, [r7, #0]
 802964e:	695b      	ldr	r3, [r3, #20]
 8029650:	011b      	lsls	r3, r3, #4
 8029652:	4313      	orrs	r3, r2
 8029654:	68fa      	ldr	r2, [r7, #12]
 8029656:	4313      	orrs	r3, r2
 8029658:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 802965a:	687b      	ldr	r3, [r7, #4]
 802965c:	681b      	ldr	r3, [r3, #0]
 802965e:	697a      	ldr	r2, [r7, #20]
 8029660:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8029662:	687b      	ldr	r3, [r7, #4]
 8029664:	681b      	ldr	r3, [r3, #0]
 8029666:	693a      	ldr	r2, [r7, #16]
 8029668:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 802966a:	687b      	ldr	r3, [r7, #4]
 802966c:	681b      	ldr	r3, [r3, #0]
 802966e:	68fa      	ldr	r2, [r7, #12]
 8029670:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8029672:	687b      	ldr	r3, [r7, #4]
 8029674:	2201      	movs	r2, #1
 8029676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802967a:	2300      	movs	r3, #0
}
 802967c:	4618      	mov	r0, r3
 802967e:	3718      	adds	r7, #24
 8029680:	46bd      	mov	sp, r7
 8029682:	bd80      	pop	{r7, pc}

08029684 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8029684:	b580      	push	{r7, lr}
 8029686:	b082      	sub	sp, #8
 8029688:	af00      	add	r7, sp, #0
 802968a:	6078      	str	r0, [r7, #4]
 802968c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 802968e:	683b      	ldr	r3, [r7, #0]
 8029690:	2b00      	cmp	r3, #0
 8029692:	d002      	beq.n	802969a <HAL_TIM_Encoder_Start+0x16>
 8029694:	2b04      	cmp	r3, #4
 8029696:	d008      	beq.n	80296aa <HAL_TIM_Encoder_Start+0x26>
 8029698:	e00f      	b.n	80296ba <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 802969a:	687b      	ldr	r3, [r7, #4]
 802969c:	681b      	ldr	r3, [r3, #0]
 802969e:	2201      	movs	r2, #1
 80296a0:	2100      	movs	r1, #0
 80296a2:	4618      	mov	r0, r3
 80296a4:	f000 fdbe 	bl	802a224 <TIM_CCxChannelCmd>
      break;
 80296a8:	e016      	b.n	80296d8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80296aa:	687b      	ldr	r3, [r7, #4]
 80296ac:	681b      	ldr	r3, [r3, #0]
 80296ae:	2201      	movs	r2, #1
 80296b0:	2104      	movs	r1, #4
 80296b2:	4618      	mov	r0, r3
 80296b4:	f000 fdb6 	bl	802a224 <TIM_CCxChannelCmd>
      break;
 80296b8:	e00e      	b.n	80296d8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80296ba:	687b      	ldr	r3, [r7, #4]
 80296bc:	681b      	ldr	r3, [r3, #0]
 80296be:	2201      	movs	r2, #1
 80296c0:	2100      	movs	r1, #0
 80296c2:	4618      	mov	r0, r3
 80296c4:	f000 fdae 	bl	802a224 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80296c8:	687b      	ldr	r3, [r7, #4]
 80296ca:	681b      	ldr	r3, [r3, #0]
 80296cc:	2201      	movs	r2, #1
 80296ce:	2104      	movs	r1, #4
 80296d0:	4618      	mov	r0, r3
 80296d2:	f000 fda7 	bl	802a224 <TIM_CCxChannelCmd>
      break;
 80296d6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80296d8:	687b      	ldr	r3, [r7, #4]
 80296da:	681b      	ldr	r3, [r3, #0]
 80296dc:	681a      	ldr	r2, [r3, #0]
 80296de:	687b      	ldr	r3, [r7, #4]
 80296e0:	681b      	ldr	r3, [r3, #0]
 80296e2:	f042 0201 	orr.w	r2, r2, #1
 80296e6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80296e8:	2300      	movs	r3, #0
}
 80296ea:	4618      	mov	r0, r3
 80296ec:	3708      	adds	r7, #8
 80296ee:	46bd      	mov	sp, r7
 80296f0:	bd80      	pop	{r7, pc}

080296f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80296f2:	b580      	push	{r7, lr}
 80296f4:	b082      	sub	sp, #8
 80296f6:	af00      	add	r7, sp, #0
 80296f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80296fa:	687b      	ldr	r3, [r7, #4]
 80296fc:	681b      	ldr	r3, [r3, #0]
 80296fe:	691b      	ldr	r3, [r3, #16]
 8029700:	f003 0302 	and.w	r3, r3, #2
 8029704:	2b02      	cmp	r3, #2
 8029706:	d122      	bne.n	802974e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8029708:	687b      	ldr	r3, [r7, #4]
 802970a:	681b      	ldr	r3, [r3, #0]
 802970c:	68db      	ldr	r3, [r3, #12]
 802970e:	f003 0302 	and.w	r3, r3, #2
 8029712:	2b02      	cmp	r3, #2
 8029714:	d11b      	bne.n	802974e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8029716:	687b      	ldr	r3, [r7, #4]
 8029718:	681b      	ldr	r3, [r3, #0]
 802971a:	f06f 0202 	mvn.w	r2, #2
 802971e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8029720:	687b      	ldr	r3, [r7, #4]
 8029722:	2201      	movs	r2, #1
 8029724:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8029726:	687b      	ldr	r3, [r7, #4]
 8029728:	681b      	ldr	r3, [r3, #0]
 802972a:	699b      	ldr	r3, [r3, #24]
 802972c:	f003 0303 	and.w	r3, r3, #3
 8029730:	2b00      	cmp	r3, #0
 8029732:	d003      	beq.n	802973c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8029734:	6878      	ldr	r0, [r7, #4]
 8029736:	f000 fa6c 	bl	8029c12 <HAL_TIM_IC_CaptureCallback>
 802973a:	e005      	b.n	8029748 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 802973c:	6878      	ldr	r0, [r7, #4]
 802973e:	f000 fa5e 	bl	8029bfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029742:	6878      	ldr	r0, [r7, #4]
 8029744:	f000 fa6f 	bl	8029c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029748:	687b      	ldr	r3, [r7, #4]
 802974a:	2200      	movs	r2, #0
 802974c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 802974e:	687b      	ldr	r3, [r7, #4]
 8029750:	681b      	ldr	r3, [r3, #0]
 8029752:	691b      	ldr	r3, [r3, #16]
 8029754:	f003 0304 	and.w	r3, r3, #4
 8029758:	2b04      	cmp	r3, #4
 802975a:	d122      	bne.n	80297a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 802975c:	687b      	ldr	r3, [r7, #4]
 802975e:	681b      	ldr	r3, [r3, #0]
 8029760:	68db      	ldr	r3, [r3, #12]
 8029762:	f003 0304 	and.w	r3, r3, #4
 8029766:	2b04      	cmp	r3, #4
 8029768:	d11b      	bne.n	80297a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 802976a:	687b      	ldr	r3, [r7, #4]
 802976c:	681b      	ldr	r3, [r3, #0]
 802976e:	f06f 0204 	mvn.w	r2, #4
 8029772:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8029774:	687b      	ldr	r3, [r7, #4]
 8029776:	2202      	movs	r2, #2
 8029778:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 802977a:	687b      	ldr	r3, [r7, #4]
 802977c:	681b      	ldr	r3, [r3, #0]
 802977e:	699b      	ldr	r3, [r3, #24]
 8029780:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8029784:	2b00      	cmp	r3, #0
 8029786:	d003      	beq.n	8029790 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029788:	6878      	ldr	r0, [r7, #4]
 802978a:	f000 fa42 	bl	8029c12 <HAL_TIM_IC_CaptureCallback>
 802978e:	e005      	b.n	802979c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029790:	6878      	ldr	r0, [r7, #4]
 8029792:	f000 fa34 	bl	8029bfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029796:	6878      	ldr	r0, [r7, #4]
 8029798:	f000 fa45 	bl	8029c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802979c:	687b      	ldr	r3, [r7, #4]
 802979e:	2200      	movs	r2, #0
 80297a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80297a2:	687b      	ldr	r3, [r7, #4]
 80297a4:	681b      	ldr	r3, [r3, #0]
 80297a6:	691b      	ldr	r3, [r3, #16]
 80297a8:	f003 0308 	and.w	r3, r3, #8
 80297ac:	2b08      	cmp	r3, #8
 80297ae:	d122      	bne.n	80297f6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80297b0:	687b      	ldr	r3, [r7, #4]
 80297b2:	681b      	ldr	r3, [r3, #0]
 80297b4:	68db      	ldr	r3, [r3, #12]
 80297b6:	f003 0308 	and.w	r3, r3, #8
 80297ba:	2b08      	cmp	r3, #8
 80297bc:	d11b      	bne.n	80297f6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80297be:	687b      	ldr	r3, [r7, #4]
 80297c0:	681b      	ldr	r3, [r3, #0]
 80297c2:	f06f 0208 	mvn.w	r2, #8
 80297c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80297c8:	687b      	ldr	r3, [r7, #4]
 80297ca:	2204      	movs	r2, #4
 80297cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80297ce:	687b      	ldr	r3, [r7, #4]
 80297d0:	681b      	ldr	r3, [r3, #0]
 80297d2:	69db      	ldr	r3, [r3, #28]
 80297d4:	f003 0303 	and.w	r3, r3, #3
 80297d8:	2b00      	cmp	r3, #0
 80297da:	d003      	beq.n	80297e4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80297dc:	6878      	ldr	r0, [r7, #4]
 80297de:	f000 fa18 	bl	8029c12 <HAL_TIM_IC_CaptureCallback>
 80297e2:	e005      	b.n	80297f0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80297e4:	6878      	ldr	r0, [r7, #4]
 80297e6:	f000 fa0a 	bl	8029bfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80297ea:	6878      	ldr	r0, [r7, #4]
 80297ec:	f000 fa1b 	bl	8029c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80297f0:	687b      	ldr	r3, [r7, #4]
 80297f2:	2200      	movs	r2, #0
 80297f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80297f6:	687b      	ldr	r3, [r7, #4]
 80297f8:	681b      	ldr	r3, [r3, #0]
 80297fa:	691b      	ldr	r3, [r3, #16]
 80297fc:	f003 0310 	and.w	r3, r3, #16
 8029800:	2b10      	cmp	r3, #16
 8029802:	d122      	bne.n	802984a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8029804:	687b      	ldr	r3, [r7, #4]
 8029806:	681b      	ldr	r3, [r3, #0]
 8029808:	68db      	ldr	r3, [r3, #12]
 802980a:	f003 0310 	and.w	r3, r3, #16
 802980e:	2b10      	cmp	r3, #16
 8029810:	d11b      	bne.n	802984a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8029812:	687b      	ldr	r3, [r7, #4]
 8029814:	681b      	ldr	r3, [r3, #0]
 8029816:	f06f 0210 	mvn.w	r2, #16
 802981a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 802981c:	687b      	ldr	r3, [r7, #4]
 802981e:	2208      	movs	r2, #8
 8029820:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8029822:	687b      	ldr	r3, [r7, #4]
 8029824:	681b      	ldr	r3, [r3, #0]
 8029826:	69db      	ldr	r3, [r3, #28]
 8029828:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802982c:	2b00      	cmp	r3, #0
 802982e:	d003      	beq.n	8029838 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029830:	6878      	ldr	r0, [r7, #4]
 8029832:	f000 f9ee 	bl	8029c12 <HAL_TIM_IC_CaptureCallback>
 8029836:	e005      	b.n	8029844 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029838:	6878      	ldr	r0, [r7, #4]
 802983a:	f000 f9e0 	bl	8029bfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802983e:	6878      	ldr	r0, [r7, #4]
 8029840:	f000 f9f1 	bl	8029c26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029844:	687b      	ldr	r3, [r7, #4]
 8029846:	2200      	movs	r2, #0
 8029848:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 802984a:	687b      	ldr	r3, [r7, #4]
 802984c:	681b      	ldr	r3, [r3, #0]
 802984e:	691b      	ldr	r3, [r3, #16]
 8029850:	f003 0301 	and.w	r3, r3, #1
 8029854:	2b01      	cmp	r3, #1
 8029856:	d10e      	bne.n	8029876 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8029858:	687b      	ldr	r3, [r7, #4]
 802985a:	681b      	ldr	r3, [r3, #0]
 802985c:	68db      	ldr	r3, [r3, #12]
 802985e:	f003 0301 	and.w	r3, r3, #1
 8029862:	2b01      	cmp	r3, #1
 8029864:	d107      	bne.n	8029876 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8029866:	687b      	ldr	r3, [r7, #4]
 8029868:	681b      	ldr	r3, [r3, #0]
 802986a:	f06f 0201 	mvn.w	r2, #1
 802986e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8029870:	6878      	ldr	r0, [r7, #4]
 8029872:	f7f9 fabb 	bl	8022dec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8029876:	687b      	ldr	r3, [r7, #4]
 8029878:	681b      	ldr	r3, [r3, #0]
 802987a:	691b      	ldr	r3, [r3, #16]
 802987c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029880:	2b80      	cmp	r3, #128	; 0x80
 8029882:	d10e      	bne.n	80298a2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8029884:	687b      	ldr	r3, [r7, #4]
 8029886:	681b      	ldr	r3, [r3, #0]
 8029888:	68db      	ldr	r3, [r3, #12]
 802988a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802988e:	2b80      	cmp	r3, #128	; 0x80
 8029890:	d107      	bne.n	80298a2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8029892:	687b      	ldr	r3, [r7, #4]
 8029894:	681b      	ldr	r3, [r3, #0]
 8029896:	f06f 0280 	mvn.w	r2, #128	; 0x80
 802989a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 802989c:	6878      	ldr	r0, [r7, #4]
 802989e:	f000 fdbf 	bl	802a420 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80298a2:	687b      	ldr	r3, [r7, #4]
 80298a4:	681b      	ldr	r3, [r3, #0]
 80298a6:	691b      	ldr	r3, [r3, #16]
 80298a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80298ac:	2b40      	cmp	r3, #64	; 0x40
 80298ae:	d10e      	bne.n	80298ce <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80298b0:	687b      	ldr	r3, [r7, #4]
 80298b2:	681b      	ldr	r3, [r3, #0]
 80298b4:	68db      	ldr	r3, [r3, #12]
 80298b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80298ba:	2b40      	cmp	r3, #64	; 0x40
 80298bc:	d107      	bne.n	80298ce <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80298be:	687b      	ldr	r3, [r7, #4]
 80298c0:	681b      	ldr	r3, [r3, #0]
 80298c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80298c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80298c8:	6878      	ldr	r0, [r7, #4]
 80298ca:	f000 f9b6 	bl	8029c3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80298ce:	687b      	ldr	r3, [r7, #4]
 80298d0:	681b      	ldr	r3, [r3, #0]
 80298d2:	691b      	ldr	r3, [r3, #16]
 80298d4:	f003 0320 	and.w	r3, r3, #32
 80298d8:	2b20      	cmp	r3, #32
 80298da:	d10e      	bne.n	80298fa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80298dc:	687b      	ldr	r3, [r7, #4]
 80298de:	681b      	ldr	r3, [r3, #0]
 80298e0:	68db      	ldr	r3, [r3, #12]
 80298e2:	f003 0320 	and.w	r3, r3, #32
 80298e6:	2b20      	cmp	r3, #32
 80298e8:	d107      	bne.n	80298fa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80298ea:	687b      	ldr	r3, [r7, #4]
 80298ec:	681b      	ldr	r3, [r3, #0]
 80298ee:	f06f 0220 	mvn.w	r2, #32
 80298f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80298f4:	6878      	ldr	r0, [r7, #4]
 80298f6:	f000 fd89 	bl	802a40c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80298fa:	bf00      	nop
 80298fc:	3708      	adds	r7, #8
 80298fe:	46bd      	mov	sp, r7
 8029900:	bd80      	pop	{r7, pc}
	...

08029904 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8029904:	b580      	push	{r7, lr}
 8029906:	b084      	sub	sp, #16
 8029908:	af00      	add	r7, sp, #0
 802990a:	60f8      	str	r0, [r7, #12]
 802990c:	60b9      	str	r1, [r7, #8]
 802990e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8029910:	68fb      	ldr	r3, [r7, #12]
 8029912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029916:	2b01      	cmp	r3, #1
 8029918:	d101      	bne.n	802991e <HAL_TIM_PWM_ConfigChannel+0x1a>
 802991a:	2302      	movs	r3, #2
 802991c:	e0b4      	b.n	8029a88 <HAL_TIM_PWM_ConfigChannel+0x184>
 802991e:	68fb      	ldr	r3, [r7, #12]
 8029920:	2201      	movs	r2, #1
 8029922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8029926:	68fb      	ldr	r3, [r7, #12]
 8029928:	2202      	movs	r2, #2
 802992a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 802992e:	687b      	ldr	r3, [r7, #4]
 8029930:	2b0c      	cmp	r3, #12
 8029932:	f200 809f 	bhi.w	8029a74 <HAL_TIM_PWM_ConfigChannel+0x170>
 8029936:	a201      	add	r2, pc, #4	; (adr r2, 802993c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8029938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802993c:	08029971 	.word	0x08029971
 8029940:	08029a75 	.word	0x08029a75
 8029944:	08029a75 	.word	0x08029a75
 8029948:	08029a75 	.word	0x08029a75
 802994c:	080299b1 	.word	0x080299b1
 8029950:	08029a75 	.word	0x08029a75
 8029954:	08029a75 	.word	0x08029a75
 8029958:	08029a75 	.word	0x08029a75
 802995c:	080299f3 	.word	0x080299f3
 8029960:	08029a75 	.word	0x08029a75
 8029964:	08029a75 	.word	0x08029a75
 8029968:	08029a75 	.word	0x08029a75
 802996c:	08029a33 	.word	0x08029a33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8029970:	68fb      	ldr	r3, [r7, #12]
 8029972:	681b      	ldr	r3, [r3, #0]
 8029974:	68b9      	ldr	r1, [r7, #8]
 8029976:	4618      	mov	r0, r3
 8029978:	f000 fa0a 	bl	8029d90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 802997c:	68fb      	ldr	r3, [r7, #12]
 802997e:	681b      	ldr	r3, [r3, #0]
 8029980:	699a      	ldr	r2, [r3, #24]
 8029982:	68fb      	ldr	r3, [r7, #12]
 8029984:	681b      	ldr	r3, [r3, #0]
 8029986:	f042 0208 	orr.w	r2, r2, #8
 802998a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 802998c:	68fb      	ldr	r3, [r7, #12]
 802998e:	681b      	ldr	r3, [r3, #0]
 8029990:	699a      	ldr	r2, [r3, #24]
 8029992:	68fb      	ldr	r3, [r7, #12]
 8029994:	681b      	ldr	r3, [r3, #0]
 8029996:	f022 0204 	bic.w	r2, r2, #4
 802999a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 802999c:	68fb      	ldr	r3, [r7, #12]
 802999e:	681b      	ldr	r3, [r3, #0]
 80299a0:	6999      	ldr	r1, [r3, #24]
 80299a2:	68bb      	ldr	r3, [r7, #8]
 80299a4:	691a      	ldr	r2, [r3, #16]
 80299a6:	68fb      	ldr	r3, [r7, #12]
 80299a8:	681b      	ldr	r3, [r3, #0]
 80299aa:	430a      	orrs	r2, r1
 80299ac:	619a      	str	r2, [r3, #24]
      break;
 80299ae:	e062      	b.n	8029a76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80299b0:	68fb      	ldr	r3, [r7, #12]
 80299b2:	681b      	ldr	r3, [r3, #0]
 80299b4:	68b9      	ldr	r1, [r7, #8]
 80299b6:	4618      	mov	r0, r3
 80299b8:	f000 fa5a 	bl	8029e70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80299bc:	68fb      	ldr	r3, [r7, #12]
 80299be:	681b      	ldr	r3, [r3, #0]
 80299c0:	699a      	ldr	r2, [r3, #24]
 80299c2:	68fb      	ldr	r3, [r7, #12]
 80299c4:	681b      	ldr	r3, [r3, #0]
 80299c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80299ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80299cc:	68fb      	ldr	r3, [r7, #12]
 80299ce:	681b      	ldr	r3, [r3, #0]
 80299d0:	699a      	ldr	r2, [r3, #24]
 80299d2:	68fb      	ldr	r3, [r7, #12]
 80299d4:	681b      	ldr	r3, [r3, #0]
 80299d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80299da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80299dc:	68fb      	ldr	r3, [r7, #12]
 80299de:	681b      	ldr	r3, [r3, #0]
 80299e0:	6999      	ldr	r1, [r3, #24]
 80299e2:	68bb      	ldr	r3, [r7, #8]
 80299e4:	691b      	ldr	r3, [r3, #16]
 80299e6:	021a      	lsls	r2, r3, #8
 80299e8:	68fb      	ldr	r3, [r7, #12]
 80299ea:	681b      	ldr	r3, [r3, #0]
 80299ec:	430a      	orrs	r2, r1
 80299ee:	619a      	str	r2, [r3, #24]
      break;
 80299f0:	e041      	b.n	8029a76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80299f2:	68fb      	ldr	r3, [r7, #12]
 80299f4:	681b      	ldr	r3, [r3, #0]
 80299f6:	68b9      	ldr	r1, [r7, #8]
 80299f8:	4618      	mov	r0, r3
 80299fa:	f000 faaf 	bl	8029f5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80299fe:	68fb      	ldr	r3, [r7, #12]
 8029a00:	681b      	ldr	r3, [r3, #0]
 8029a02:	69da      	ldr	r2, [r3, #28]
 8029a04:	68fb      	ldr	r3, [r7, #12]
 8029a06:	681b      	ldr	r3, [r3, #0]
 8029a08:	f042 0208 	orr.w	r2, r2, #8
 8029a0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8029a0e:	68fb      	ldr	r3, [r7, #12]
 8029a10:	681b      	ldr	r3, [r3, #0]
 8029a12:	69da      	ldr	r2, [r3, #28]
 8029a14:	68fb      	ldr	r3, [r7, #12]
 8029a16:	681b      	ldr	r3, [r3, #0]
 8029a18:	f022 0204 	bic.w	r2, r2, #4
 8029a1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8029a1e:	68fb      	ldr	r3, [r7, #12]
 8029a20:	681b      	ldr	r3, [r3, #0]
 8029a22:	69d9      	ldr	r1, [r3, #28]
 8029a24:	68bb      	ldr	r3, [r7, #8]
 8029a26:	691a      	ldr	r2, [r3, #16]
 8029a28:	68fb      	ldr	r3, [r7, #12]
 8029a2a:	681b      	ldr	r3, [r3, #0]
 8029a2c:	430a      	orrs	r2, r1
 8029a2e:	61da      	str	r2, [r3, #28]
      break;
 8029a30:	e021      	b.n	8029a76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8029a32:	68fb      	ldr	r3, [r7, #12]
 8029a34:	681b      	ldr	r3, [r3, #0]
 8029a36:	68b9      	ldr	r1, [r7, #8]
 8029a38:	4618      	mov	r0, r3
 8029a3a:	f000 fb03 	bl	802a044 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8029a3e:	68fb      	ldr	r3, [r7, #12]
 8029a40:	681b      	ldr	r3, [r3, #0]
 8029a42:	69da      	ldr	r2, [r3, #28]
 8029a44:	68fb      	ldr	r3, [r7, #12]
 8029a46:	681b      	ldr	r3, [r3, #0]
 8029a48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8029a4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8029a4e:	68fb      	ldr	r3, [r7, #12]
 8029a50:	681b      	ldr	r3, [r3, #0]
 8029a52:	69da      	ldr	r2, [r3, #28]
 8029a54:	68fb      	ldr	r3, [r7, #12]
 8029a56:	681b      	ldr	r3, [r3, #0]
 8029a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8029a5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8029a5e:	68fb      	ldr	r3, [r7, #12]
 8029a60:	681b      	ldr	r3, [r3, #0]
 8029a62:	69d9      	ldr	r1, [r3, #28]
 8029a64:	68bb      	ldr	r3, [r7, #8]
 8029a66:	691b      	ldr	r3, [r3, #16]
 8029a68:	021a      	lsls	r2, r3, #8
 8029a6a:	68fb      	ldr	r3, [r7, #12]
 8029a6c:	681b      	ldr	r3, [r3, #0]
 8029a6e:	430a      	orrs	r2, r1
 8029a70:	61da      	str	r2, [r3, #28]
      break;
 8029a72:	e000      	b.n	8029a76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8029a74:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8029a76:	68fb      	ldr	r3, [r7, #12]
 8029a78:	2201      	movs	r2, #1
 8029a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8029a7e:	68fb      	ldr	r3, [r7, #12]
 8029a80:	2200      	movs	r2, #0
 8029a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8029a86:	2300      	movs	r3, #0
}
 8029a88:	4618      	mov	r0, r3
 8029a8a:	3710      	adds	r7, #16
 8029a8c:	46bd      	mov	sp, r7
 8029a8e:	bd80      	pop	{r7, pc}

08029a90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8029a90:	b580      	push	{r7, lr}
 8029a92:	b084      	sub	sp, #16
 8029a94:	af00      	add	r7, sp, #0
 8029a96:	6078      	str	r0, [r7, #4]
 8029a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8029a9a:	687b      	ldr	r3, [r7, #4]
 8029a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029aa0:	2b01      	cmp	r3, #1
 8029aa2:	d101      	bne.n	8029aa8 <HAL_TIM_ConfigClockSource+0x18>
 8029aa4:	2302      	movs	r3, #2
 8029aa6:	e0a6      	b.n	8029bf6 <HAL_TIM_ConfigClockSource+0x166>
 8029aa8:	687b      	ldr	r3, [r7, #4]
 8029aaa:	2201      	movs	r2, #1
 8029aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8029ab0:	687b      	ldr	r3, [r7, #4]
 8029ab2:	2202      	movs	r2, #2
 8029ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8029ab8:	687b      	ldr	r3, [r7, #4]
 8029aba:	681b      	ldr	r3, [r3, #0]
 8029abc:	689b      	ldr	r3, [r3, #8]
 8029abe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8029ac0:	68fb      	ldr	r3, [r7, #12]
 8029ac2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8029ac6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8029ac8:	68fb      	ldr	r3, [r7, #12]
 8029aca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8029ace:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8029ad0:	687b      	ldr	r3, [r7, #4]
 8029ad2:	681b      	ldr	r3, [r3, #0]
 8029ad4:	68fa      	ldr	r2, [r7, #12]
 8029ad6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8029ad8:	683b      	ldr	r3, [r7, #0]
 8029ada:	681b      	ldr	r3, [r3, #0]
 8029adc:	2b40      	cmp	r3, #64	; 0x40
 8029ade:	d067      	beq.n	8029bb0 <HAL_TIM_ConfigClockSource+0x120>
 8029ae0:	2b40      	cmp	r3, #64	; 0x40
 8029ae2:	d80b      	bhi.n	8029afc <HAL_TIM_ConfigClockSource+0x6c>
 8029ae4:	2b10      	cmp	r3, #16
 8029ae6:	d073      	beq.n	8029bd0 <HAL_TIM_ConfigClockSource+0x140>
 8029ae8:	2b10      	cmp	r3, #16
 8029aea:	d802      	bhi.n	8029af2 <HAL_TIM_ConfigClockSource+0x62>
 8029aec:	2b00      	cmp	r3, #0
 8029aee:	d06f      	beq.n	8029bd0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8029af0:	e078      	b.n	8029be4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8029af2:	2b20      	cmp	r3, #32
 8029af4:	d06c      	beq.n	8029bd0 <HAL_TIM_ConfigClockSource+0x140>
 8029af6:	2b30      	cmp	r3, #48	; 0x30
 8029af8:	d06a      	beq.n	8029bd0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8029afa:	e073      	b.n	8029be4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8029afc:	2b70      	cmp	r3, #112	; 0x70
 8029afe:	d00d      	beq.n	8029b1c <HAL_TIM_ConfigClockSource+0x8c>
 8029b00:	2b70      	cmp	r3, #112	; 0x70
 8029b02:	d804      	bhi.n	8029b0e <HAL_TIM_ConfigClockSource+0x7e>
 8029b04:	2b50      	cmp	r3, #80	; 0x50
 8029b06:	d033      	beq.n	8029b70 <HAL_TIM_ConfigClockSource+0xe0>
 8029b08:	2b60      	cmp	r3, #96	; 0x60
 8029b0a:	d041      	beq.n	8029b90 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8029b0c:	e06a      	b.n	8029be4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8029b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029b12:	d066      	beq.n	8029be2 <HAL_TIM_ConfigClockSource+0x152>
 8029b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8029b18:	d017      	beq.n	8029b4a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8029b1a:	e063      	b.n	8029be4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8029b1c:	687b      	ldr	r3, [r7, #4]
 8029b1e:	6818      	ldr	r0, [r3, #0]
 8029b20:	683b      	ldr	r3, [r7, #0]
 8029b22:	6899      	ldr	r1, [r3, #8]
 8029b24:	683b      	ldr	r3, [r7, #0]
 8029b26:	685a      	ldr	r2, [r3, #4]
 8029b28:	683b      	ldr	r3, [r7, #0]
 8029b2a:	68db      	ldr	r3, [r3, #12]
 8029b2c:	f000 fb5a 	bl	802a1e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8029b30:	687b      	ldr	r3, [r7, #4]
 8029b32:	681b      	ldr	r3, [r3, #0]
 8029b34:	689b      	ldr	r3, [r3, #8]
 8029b36:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8029b38:	68fb      	ldr	r3, [r7, #12]
 8029b3a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8029b3e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8029b40:	687b      	ldr	r3, [r7, #4]
 8029b42:	681b      	ldr	r3, [r3, #0]
 8029b44:	68fa      	ldr	r2, [r7, #12]
 8029b46:	609a      	str	r2, [r3, #8]
      break;
 8029b48:	e04c      	b.n	8029be4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8029b4a:	687b      	ldr	r3, [r7, #4]
 8029b4c:	6818      	ldr	r0, [r3, #0]
 8029b4e:	683b      	ldr	r3, [r7, #0]
 8029b50:	6899      	ldr	r1, [r3, #8]
 8029b52:	683b      	ldr	r3, [r7, #0]
 8029b54:	685a      	ldr	r2, [r3, #4]
 8029b56:	683b      	ldr	r3, [r7, #0]
 8029b58:	68db      	ldr	r3, [r3, #12]
 8029b5a:	f000 fb43 	bl	802a1e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8029b5e:	687b      	ldr	r3, [r7, #4]
 8029b60:	681b      	ldr	r3, [r3, #0]
 8029b62:	689a      	ldr	r2, [r3, #8]
 8029b64:	687b      	ldr	r3, [r7, #4]
 8029b66:	681b      	ldr	r3, [r3, #0]
 8029b68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8029b6c:	609a      	str	r2, [r3, #8]
      break;
 8029b6e:	e039      	b.n	8029be4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8029b70:	687b      	ldr	r3, [r7, #4]
 8029b72:	6818      	ldr	r0, [r3, #0]
 8029b74:	683b      	ldr	r3, [r7, #0]
 8029b76:	6859      	ldr	r1, [r3, #4]
 8029b78:	683b      	ldr	r3, [r7, #0]
 8029b7a:	68db      	ldr	r3, [r3, #12]
 8029b7c:	461a      	mov	r2, r3
 8029b7e:	f000 fab7 	bl	802a0f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8029b82:	687b      	ldr	r3, [r7, #4]
 8029b84:	681b      	ldr	r3, [r3, #0]
 8029b86:	2150      	movs	r1, #80	; 0x50
 8029b88:	4618      	mov	r0, r3
 8029b8a:	f000 fb10 	bl	802a1ae <TIM_ITRx_SetConfig>
      break;
 8029b8e:	e029      	b.n	8029be4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8029b90:	687b      	ldr	r3, [r7, #4]
 8029b92:	6818      	ldr	r0, [r3, #0]
 8029b94:	683b      	ldr	r3, [r7, #0]
 8029b96:	6859      	ldr	r1, [r3, #4]
 8029b98:	683b      	ldr	r3, [r7, #0]
 8029b9a:	68db      	ldr	r3, [r3, #12]
 8029b9c:	461a      	mov	r2, r3
 8029b9e:	f000 fad6 	bl	802a14e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8029ba2:	687b      	ldr	r3, [r7, #4]
 8029ba4:	681b      	ldr	r3, [r3, #0]
 8029ba6:	2160      	movs	r1, #96	; 0x60
 8029ba8:	4618      	mov	r0, r3
 8029baa:	f000 fb00 	bl	802a1ae <TIM_ITRx_SetConfig>
      break;
 8029bae:	e019      	b.n	8029be4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8029bb0:	687b      	ldr	r3, [r7, #4]
 8029bb2:	6818      	ldr	r0, [r3, #0]
 8029bb4:	683b      	ldr	r3, [r7, #0]
 8029bb6:	6859      	ldr	r1, [r3, #4]
 8029bb8:	683b      	ldr	r3, [r7, #0]
 8029bba:	68db      	ldr	r3, [r3, #12]
 8029bbc:	461a      	mov	r2, r3
 8029bbe:	f000 fa97 	bl	802a0f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8029bc2:	687b      	ldr	r3, [r7, #4]
 8029bc4:	681b      	ldr	r3, [r3, #0]
 8029bc6:	2140      	movs	r1, #64	; 0x40
 8029bc8:	4618      	mov	r0, r3
 8029bca:	f000 faf0 	bl	802a1ae <TIM_ITRx_SetConfig>
      break;
 8029bce:	e009      	b.n	8029be4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8029bd0:	687b      	ldr	r3, [r7, #4]
 8029bd2:	681a      	ldr	r2, [r3, #0]
 8029bd4:	683b      	ldr	r3, [r7, #0]
 8029bd6:	681b      	ldr	r3, [r3, #0]
 8029bd8:	4619      	mov	r1, r3
 8029bda:	4610      	mov	r0, r2
 8029bdc:	f000 fae7 	bl	802a1ae <TIM_ITRx_SetConfig>
      break;
 8029be0:	e000      	b.n	8029be4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8029be2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8029be4:	687b      	ldr	r3, [r7, #4]
 8029be6:	2201      	movs	r2, #1
 8029be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8029bec:	687b      	ldr	r3, [r7, #4]
 8029bee:	2200      	movs	r2, #0
 8029bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8029bf4:	2300      	movs	r3, #0
}
 8029bf6:	4618      	mov	r0, r3
 8029bf8:	3710      	adds	r7, #16
 8029bfa:	46bd      	mov	sp, r7
 8029bfc:	bd80      	pop	{r7, pc}

08029bfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8029bfe:	b480      	push	{r7}
 8029c00:	b083      	sub	sp, #12
 8029c02:	af00      	add	r7, sp, #0
 8029c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8029c06:	bf00      	nop
 8029c08:	370c      	adds	r7, #12
 8029c0a:	46bd      	mov	sp, r7
 8029c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c10:	4770      	bx	lr

08029c12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8029c12:	b480      	push	{r7}
 8029c14:	b083      	sub	sp, #12
 8029c16:	af00      	add	r7, sp, #0
 8029c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8029c1a:	bf00      	nop
 8029c1c:	370c      	adds	r7, #12
 8029c1e:	46bd      	mov	sp, r7
 8029c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c24:	4770      	bx	lr

08029c26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8029c26:	b480      	push	{r7}
 8029c28:	b083      	sub	sp, #12
 8029c2a:	af00      	add	r7, sp, #0
 8029c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8029c2e:	bf00      	nop
 8029c30:	370c      	adds	r7, #12
 8029c32:	46bd      	mov	sp, r7
 8029c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c38:	4770      	bx	lr

08029c3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8029c3a:	b480      	push	{r7}
 8029c3c:	b083      	sub	sp, #12
 8029c3e:	af00      	add	r7, sp, #0
 8029c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8029c42:	bf00      	nop
 8029c44:	370c      	adds	r7, #12
 8029c46:	46bd      	mov	sp, r7
 8029c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c4c:	4770      	bx	lr
	...

08029c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8029c50:	b480      	push	{r7}
 8029c52:	b085      	sub	sp, #20
 8029c54:	af00      	add	r7, sp, #0
 8029c56:	6078      	str	r0, [r7, #4]
 8029c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8029c5a:	687b      	ldr	r3, [r7, #4]
 8029c5c:	681b      	ldr	r3, [r3, #0]
 8029c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8029c60:	687b      	ldr	r3, [r7, #4]
 8029c62:	4a40      	ldr	r2, [pc, #256]	; (8029d64 <TIM_Base_SetConfig+0x114>)
 8029c64:	4293      	cmp	r3, r2
 8029c66:	d013      	beq.n	8029c90 <TIM_Base_SetConfig+0x40>
 8029c68:	687b      	ldr	r3, [r7, #4]
 8029c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029c6e:	d00f      	beq.n	8029c90 <TIM_Base_SetConfig+0x40>
 8029c70:	687b      	ldr	r3, [r7, #4]
 8029c72:	4a3d      	ldr	r2, [pc, #244]	; (8029d68 <TIM_Base_SetConfig+0x118>)
 8029c74:	4293      	cmp	r3, r2
 8029c76:	d00b      	beq.n	8029c90 <TIM_Base_SetConfig+0x40>
 8029c78:	687b      	ldr	r3, [r7, #4]
 8029c7a:	4a3c      	ldr	r2, [pc, #240]	; (8029d6c <TIM_Base_SetConfig+0x11c>)
 8029c7c:	4293      	cmp	r3, r2
 8029c7e:	d007      	beq.n	8029c90 <TIM_Base_SetConfig+0x40>
 8029c80:	687b      	ldr	r3, [r7, #4]
 8029c82:	4a3b      	ldr	r2, [pc, #236]	; (8029d70 <TIM_Base_SetConfig+0x120>)
 8029c84:	4293      	cmp	r3, r2
 8029c86:	d003      	beq.n	8029c90 <TIM_Base_SetConfig+0x40>
 8029c88:	687b      	ldr	r3, [r7, #4]
 8029c8a:	4a3a      	ldr	r2, [pc, #232]	; (8029d74 <TIM_Base_SetConfig+0x124>)
 8029c8c:	4293      	cmp	r3, r2
 8029c8e:	d108      	bne.n	8029ca2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8029c90:	68fb      	ldr	r3, [r7, #12]
 8029c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029c96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8029c98:	683b      	ldr	r3, [r7, #0]
 8029c9a:	685b      	ldr	r3, [r3, #4]
 8029c9c:	68fa      	ldr	r2, [r7, #12]
 8029c9e:	4313      	orrs	r3, r2
 8029ca0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8029ca2:	687b      	ldr	r3, [r7, #4]
 8029ca4:	4a2f      	ldr	r2, [pc, #188]	; (8029d64 <TIM_Base_SetConfig+0x114>)
 8029ca6:	4293      	cmp	r3, r2
 8029ca8:	d02b      	beq.n	8029d02 <TIM_Base_SetConfig+0xb2>
 8029caa:	687b      	ldr	r3, [r7, #4]
 8029cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029cb0:	d027      	beq.n	8029d02 <TIM_Base_SetConfig+0xb2>
 8029cb2:	687b      	ldr	r3, [r7, #4]
 8029cb4:	4a2c      	ldr	r2, [pc, #176]	; (8029d68 <TIM_Base_SetConfig+0x118>)
 8029cb6:	4293      	cmp	r3, r2
 8029cb8:	d023      	beq.n	8029d02 <TIM_Base_SetConfig+0xb2>
 8029cba:	687b      	ldr	r3, [r7, #4]
 8029cbc:	4a2b      	ldr	r2, [pc, #172]	; (8029d6c <TIM_Base_SetConfig+0x11c>)
 8029cbe:	4293      	cmp	r3, r2
 8029cc0:	d01f      	beq.n	8029d02 <TIM_Base_SetConfig+0xb2>
 8029cc2:	687b      	ldr	r3, [r7, #4]
 8029cc4:	4a2a      	ldr	r2, [pc, #168]	; (8029d70 <TIM_Base_SetConfig+0x120>)
 8029cc6:	4293      	cmp	r3, r2
 8029cc8:	d01b      	beq.n	8029d02 <TIM_Base_SetConfig+0xb2>
 8029cca:	687b      	ldr	r3, [r7, #4]
 8029ccc:	4a29      	ldr	r2, [pc, #164]	; (8029d74 <TIM_Base_SetConfig+0x124>)
 8029cce:	4293      	cmp	r3, r2
 8029cd0:	d017      	beq.n	8029d02 <TIM_Base_SetConfig+0xb2>
 8029cd2:	687b      	ldr	r3, [r7, #4]
 8029cd4:	4a28      	ldr	r2, [pc, #160]	; (8029d78 <TIM_Base_SetConfig+0x128>)
 8029cd6:	4293      	cmp	r3, r2
 8029cd8:	d013      	beq.n	8029d02 <TIM_Base_SetConfig+0xb2>
 8029cda:	687b      	ldr	r3, [r7, #4]
 8029cdc:	4a27      	ldr	r2, [pc, #156]	; (8029d7c <TIM_Base_SetConfig+0x12c>)
 8029cde:	4293      	cmp	r3, r2
 8029ce0:	d00f      	beq.n	8029d02 <TIM_Base_SetConfig+0xb2>
 8029ce2:	687b      	ldr	r3, [r7, #4]
 8029ce4:	4a26      	ldr	r2, [pc, #152]	; (8029d80 <TIM_Base_SetConfig+0x130>)
 8029ce6:	4293      	cmp	r3, r2
 8029ce8:	d00b      	beq.n	8029d02 <TIM_Base_SetConfig+0xb2>
 8029cea:	687b      	ldr	r3, [r7, #4]
 8029cec:	4a25      	ldr	r2, [pc, #148]	; (8029d84 <TIM_Base_SetConfig+0x134>)
 8029cee:	4293      	cmp	r3, r2
 8029cf0:	d007      	beq.n	8029d02 <TIM_Base_SetConfig+0xb2>
 8029cf2:	687b      	ldr	r3, [r7, #4]
 8029cf4:	4a24      	ldr	r2, [pc, #144]	; (8029d88 <TIM_Base_SetConfig+0x138>)
 8029cf6:	4293      	cmp	r3, r2
 8029cf8:	d003      	beq.n	8029d02 <TIM_Base_SetConfig+0xb2>
 8029cfa:	687b      	ldr	r3, [r7, #4]
 8029cfc:	4a23      	ldr	r2, [pc, #140]	; (8029d8c <TIM_Base_SetConfig+0x13c>)
 8029cfe:	4293      	cmp	r3, r2
 8029d00:	d108      	bne.n	8029d14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8029d02:	68fb      	ldr	r3, [r7, #12]
 8029d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8029d0a:	683b      	ldr	r3, [r7, #0]
 8029d0c:	68db      	ldr	r3, [r3, #12]
 8029d0e:	68fa      	ldr	r2, [r7, #12]
 8029d10:	4313      	orrs	r3, r2
 8029d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8029d14:	68fb      	ldr	r3, [r7, #12]
 8029d16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8029d1a:	683b      	ldr	r3, [r7, #0]
 8029d1c:	695b      	ldr	r3, [r3, #20]
 8029d1e:	4313      	orrs	r3, r2
 8029d20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8029d22:	687b      	ldr	r3, [r7, #4]
 8029d24:	68fa      	ldr	r2, [r7, #12]
 8029d26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8029d28:	683b      	ldr	r3, [r7, #0]
 8029d2a:	689a      	ldr	r2, [r3, #8]
 8029d2c:	687b      	ldr	r3, [r7, #4]
 8029d2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8029d30:	683b      	ldr	r3, [r7, #0]
 8029d32:	681a      	ldr	r2, [r3, #0]
 8029d34:	687b      	ldr	r3, [r7, #4]
 8029d36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8029d38:	687b      	ldr	r3, [r7, #4]
 8029d3a:	4a0a      	ldr	r2, [pc, #40]	; (8029d64 <TIM_Base_SetConfig+0x114>)
 8029d3c:	4293      	cmp	r3, r2
 8029d3e:	d003      	beq.n	8029d48 <TIM_Base_SetConfig+0xf8>
 8029d40:	687b      	ldr	r3, [r7, #4]
 8029d42:	4a0c      	ldr	r2, [pc, #48]	; (8029d74 <TIM_Base_SetConfig+0x124>)
 8029d44:	4293      	cmp	r3, r2
 8029d46:	d103      	bne.n	8029d50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8029d48:	683b      	ldr	r3, [r7, #0]
 8029d4a:	691a      	ldr	r2, [r3, #16]
 8029d4c:	687b      	ldr	r3, [r7, #4]
 8029d4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8029d50:	687b      	ldr	r3, [r7, #4]
 8029d52:	2201      	movs	r2, #1
 8029d54:	615a      	str	r2, [r3, #20]
}
 8029d56:	bf00      	nop
 8029d58:	3714      	adds	r7, #20
 8029d5a:	46bd      	mov	sp, r7
 8029d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029d60:	4770      	bx	lr
 8029d62:	bf00      	nop
 8029d64:	40010000 	.word	0x40010000
 8029d68:	40000400 	.word	0x40000400
 8029d6c:	40000800 	.word	0x40000800
 8029d70:	40000c00 	.word	0x40000c00
 8029d74:	40010400 	.word	0x40010400
 8029d78:	40014000 	.word	0x40014000
 8029d7c:	40014400 	.word	0x40014400
 8029d80:	40014800 	.word	0x40014800
 8029d84:	40001800 	.word	0x40001800
 8029d88:	40001c00 	.word	0x40001c00
 8029d8c:	40002000 	.word	0x40002000

08029d90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029d90:	b480      	push	{r7}
 8029d92:	b087      	sub	sp, #28
 8029d94:	af00      	add	r7, sp, #0
 8029d96:	6078      	str	r0, [r7, #4]
 8029d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8029d9a:	687b      	ldr	r3, [r7, #4]
 8029d9c:	6a1b      	ldr	r3, [r3, #32]
 8029d9e:	f023 0201 	bic.w	r2, r3, #1
 8029da2:	687b      	ldr	r3, [r7, #4]
 8029da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029da6:	687b      	ldr	r3, [r7, #4]
 8029da8:	6a1b      	ldr	r3, [r3, #32]
 8029daa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029dac:	687b      	ldr	r3, [r7, #4]
 8029dae:	685b      	ldr	r3, [r3, #4]
 8029db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8029db2:	687b      	ldr	r3, [r7, #4]
 8029db4:	699b      	ldr	r3, [r3, #24]
 8029db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8029db8:	68fb      	ldr	r3, [r7, #12]
 8029dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8029dc0:	68fb      	ldr	r3, [r7, #12]
 8029dc2:	f023 0303 	bic.w	r3, r3, #3
 8029dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8029dc8:	683b      	ldr	r3, [r7, #0]
 8029dca:	681b      	ldr	r3, [r3, #0]
 8029dcc:	68fa      	ldr	r2, [r7, #12]
 8029dce:	4313      	orrs	r3, r2
 8029dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8029dd2:	697b      	ldr	r3, [r7, #20]
 8029dd4:	f023 0302 	bic.w	r3, r3, #2
 8029dd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8029dda:	683b      	ldr	r3, [r7, #0]
 8029ddc:	689b      	ldr	r3, [r3, #8]
 8029dde:	697a      	ldr	r2, [r7, #20]
 8029de0:	4313      	orrs	r3, r2
 8029de2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8029de4:	687b      	ldr	r3, [r7, #4]
 8029de6:	4a20      	ldr	r2, [pc, #128]	; (8029e68 <TIM_OC1_SetConfig+0xd8>)
 8029de8:	4293      	cmp	r3, r2
 8029dea:	d003      	beq.n	8029df4 <TIM_OC1_SetConfig+0x64>
 8029dec:	687b      	ldr	r3, [r7, #4]
 8029dee:	4a1f      	ldr	r2, [pc, #124]	; (8029e6c <TIM_OC1_SetConfig+0xdc>)
 8029df0:	4293      	cmp	r3, r2
 8029df2:	d10c      	bne.n	8029e0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8029df4:	697b      	ldr	r3, [r7, #20]
 8029df6:	f023 0308 	bic.w	r3, r3, #8
 8029dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8029dfc:	683b      	ldr	r3, [r7, #0]
 8029dfe:	68db      	ldr	r3, [r3, #12]
 8029e00:	697a      	ldr	r2, [r7, #20]
 8029e02:	4313      	orrs	r3, r2
 8029e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8029e06:	697b      	ldr	r3, [r7, #20]
 8029e08:	f023 0304 	bic.w	r3, r3, #4
 8029e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029e0e:	687b      	ldr	r3, [r7, #4]
 8029e10:	4a15      	ldr	r2, [pc, #84]	; (8029e68 <TIM_OC1_SetConfig+0xd8>)
 8029e12:	4293      	cmp	r3, r2
 8029e14:	d003      	beq.n	8029e1e <TIM_OC1_SetConfig+0x8e>
 8029e16:	687b      	ldr	r3, [r7, #4]
 8029e18:	4a14      	ldr	r2, [pc, #80]	; (8029e6c <TIM_OC1_SetConfig+0xdc>)
 8029e1a:	4293      	cmp	r3, r2
 8029e1c:	d111      	bne.n	8029e42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8029e1e:	693b      	ldr	r3, [r7, #16]
 8029e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8029e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8029e26:	693b      	ldr	r3, [r7, #16]
 8029e28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8029e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8029e2e:	683b      	ldr	r3, [r7, #0]
 8029e30:	695b      	ldr	r3, [r3, #20]
 8029e32:	693a      	ldr	r2, [r7, #16]
 8029e34:	4313      	orrs	r3, r2
 8029e36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8029e38:	683b      	ldr	r3, [r7, #0]
 8029e3a:	699b      	ldr	r3, [r3, #24]
 8029e3c:	693a      	ldr	r2, [r7, #16]
 8029e3e:	4313      	orrs	r3, r2
 8029e40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8029e42:	687b      	ldr	r3, [r7, #4]
 8029e44:	693a      	ldr	r2, [r7, #16]
 8029e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8029e48:	687b      	ldr	r3, [r7, #4]
 8029e4a:	68fa      	ldr	r2, [r7, #12]
 8029e4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8029e4e:	683b      	ldr	r3, [r7, #0]
 8029e50:	685a      	ldr	r2, [r3, #4]
 8029e52:	687b      	ldr	r3, [r7, #4]
 8029e54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8029e56:	687b      	ldr	r3, [r7, #4]
 8029e58:	697a      	ldr	r2, [r7, #20]
 8029e5a:	621a      	str	r2, [r3, #32]
}
 8029e5c:	bf00      	nop
 8029e5e:	371c      	adds	r7, #28
 8029e60:	46bd      	mov	sp, r7
 8029e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029e66:	4770      	bx	lr
 8029e68:	40010000 	.word	0x40010000
 8029e6c:	40010400 	.word	0x40010400

08029e70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029e70:	b480      	push	{r7}
 8029e72:	b087      	sub	sp, #28
 8029e74:	af00      	add	r7, sp, #0
 8029e76:	6078      	str	r0, [r7, #4]
 8029e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8029e7a:	687b      	ldr	r3, [r7, #4]
 8029e7c:	6a1b      	ldr	r3, [r3, #32]
 8029e7e:	f023 0210 	bic.w	r2, r3, #16
 8029e82:	687b      	ldr	r3, [r7, #4]
 8029e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029e86:	687b      	ldr	r3, [r7, #4]
 8029e88:	6a1b      	ldr	r3, [r3, #32]
 8029e8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029e8c:	687b      	ldr	r3, [r7, #4]
 8029e8e:	685b      	ldr	r3, [r3, #4]
 8029e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8029e92:	687b      	ldr	r3, [r7, #4]
 8029e94:	699b      	ldr	r3, [r3, #24]
 8029e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8029e98:	68fb      	ldr	r3, [r7, #12]
 8029e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8029ea0:	68fb      	ldr	r3, [r7, #12]
 8029ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029ea6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8029ea8:	683b      	ldr	r3, [r7, #0]
 8029eaa:	681b      	ldr	r3, [r3, #0]
 8029eac:	021b      	lsls	r3, r3, #8
 8029eae:	68fa      	ldr	r2, [r7, #12]
 8029eb0:	4313      	orrs	r3, r2
 8029eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8029eb4:	697b      	ldr	r3, [r7, #20]
 8029eb6:	f023 0320 	bic.w	r3, r3, #32
 8029eba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8029ebc:	683b      	ldr	r3, [r7, #0]
 8029ebe:	689b      	ldr	r3, [r3, #8]
 8029ec0:	011b      	lsls	r3, r3, #4
 8029ec2:	697a      	ldr	r2, [r7, #20]
 8029ec4:	4313      	orrs	r3, r2
 8029ec6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8029ec8:	687b      	ldr	r3, [r7, #4]
 8029eca:	4a22      	ldr	r2, [pc, #136]	; (8029f54 <TIM_OC2_SetConfig+0xe4>)
 8029ecc:	4293      	cmp	r3, r2
 8029ece:	d003      	beq.n	8029ed8 <TIM_OC2_SetConfig+0x68>
 8029ed0:	687b      	ldr	r3, [r7, #4]
 8029ed2:	4a21      	ldr	r2, [pc, #132]	; (8029f58 <TIM_OC2_SetConfig+0xe8>)
 8029ed4:	4293      	cmp	r3, r2
 8029ed6:	d10d      	bne.n	8029ef4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8029ed8:	697b      	ldr	r3, [r7, #20]
 8029eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8029ede:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8029ee0:	683b      	ldr	r3, [r7, #0]
 8029ee2:	68db      	ldr	r3, [r3, #12]
 8029ee4:	011b      	lsls	r3, r3, #4
 8029ee6:	697a      	ldr	r2, [r7, #20]
 8029ee8:	4313      	orrs	r3, r2
 8029eea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8029eec:	697b      	ldr	r3, [r7, #20]
 8029eee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029ef2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029ef4:	687b      	ldr	r3, [r7, #4]
 8029ef6:	4a17      	ldr	r2, [pc, #92]	; (8029f54 <TIM_OC2_SetConfig+0xe4>)
 8029ef8:	4293      	cmp	r3, r2
 8029efa:	d003      	beq.n	8029f04 <TIM_OC2_SetConfig+0x94>
 8029efc:	687b      	ldr	r3, [r7, #4]
 8029efe:	4a16      	ldr	r2, [pc, #88]	; (8029f58 <TIM_OC2_SetConfig+0xe8>)
 8029f00:	4293      	cmp	r3, r2
 8029f02:	d113      	bne.n	8029f2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8029f04:	693b      	ldr	r3, [r7, #16]
 8029f06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8029f0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8029f0c:	693b      	ldr	r3, [r7, #16]
 8029f0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8029f12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8029f14:	683b      	ldr	r3, [r7, #0]
 8029f16:	695b      	ldr	r3, [r3, #20]
 8029f18:	009b      	lsls	r3, r3, #2
 8029f1a:	693a      	ldr	r2, [r7, #16]
 8029f1c:	4313      	orrs	r3, r2
 8029f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8029f20:	683b      	ldr	r3, [r7, #0]
 8029f22:	699b      	ldr	r3, [r3, #24]
 8029f24:	009b      	lsls	r3, r3, #2
 8029f26:	693a      	ldr	r2, [r7, #16]
 8029f28:	4313      	orrs	r3, r2
 8029f2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8029f2c:	687b      	ldr	r3, [r7, #4]
 8029f2e:	693a      	ldr	r2, [r7, #16]
 8029f30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8029f32:	687b      	ldr	r3, [r7, #4]
 8029f34:	68fa      	ldr	r2, [r7, #12]
 8029f36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8029f38:	683b      	ldr	r3, [r7, #0]
 8029f3a:	685a      	ldr	r2, [r3, #4]
 8029f3c:	687b      	ldr	r3, [r7, #4]
 8029f3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8029f40:	687b      	ldr	r3, [r7, #4]
 8029f42:	697a      	ldr	r2, [r7, #20]
 8029f44:	621a      	str	r2, [r3, #32]
}
 8029f46:	bf00      	nop
 8029f48:	371c      	adds	r7, #28
 8029f4a:	46bd      	mov	sp, r7
 8029f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029f50:	4770      	bx	lr
 8029f52:	bf00      	nop
 8029f54:	40010000 	.word	0x40010000
 8029f58:	40010400 	.word	0x40010400

08029f5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029f5c:	b480      	push	{r7}
 8029f5e:	b087      	sub	sp, #28
 8029f60:	af00      	add	r7, sp, #0
 8029f62:	6078      	str	r0, [r7, #4]
 8029f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8029f66:	687b      	ldr	r3, [r7, #4]
 8029f68:	6a1b      	ldr	r3, [r3, #32]
 8029f6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8029f6e:	687b      	ldr	r3, [r7, #4]
 8029f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029f72:	687b      	ldr	r3, [r7, #4]
 8029f74:	6a1b      	ldr	r3, [r3, #32]
 8029f76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029f78:	687b      	ldr	r3, [r7, #4]
 8029f7a:	685b      	ldr	r3, [r3, #4]
 8029f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8029f7e:	687b      	ldr	r3, [r7, #4]
 8029f80:	69db      	ldr	r3, [r3, #28]
 8029f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8029f84:	68fb      	ldr	r3, [r7, #12]
 8029f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8029f8c:	68fb      	ldr	r3, [r7, #12]
 8029f8e:	f023 0303 	bic.w	r3, r3, #3
 8029f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8029f94:	683b      	ldr	r3, [r7, #0]
 8029f96:	681b      	ldr	r3, [r3, #0]
 8029f98:	68fa      	ldr	r2, [r7, #12]
 8029f9a:	4313      	orrs	r3, r2
 8029f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8029f9e:	697b      	ldr	r3, [r7, #20]
 8029fa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8029fa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8029fa6:	683b      	ldr	r3, [r7, #0]
 8029fa8:	689b      	ldr	r3, [r3, #8]
 8029faa:	021b      	lsls	r3, r3, #8
 8029fac:	697a      	ldr	r2, [r7, #20]
 8029fae:	4313      	orrs	r3, r2
 8029fb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8029fb2:	687b      	ldr	r3, [r7, #4]
 8029fb4:	4a21      	ldr	r2, [pc, #132]	; (802a03c <TIM_OC3_SetConfig+0xe0>)
 8029fb6:	4293      	cmp	r3, r2
 8029fb8:	d003      	beq.n	8029fc2 <TIM_OC3_SetConfig+0x66>
 8029fba:	687b      	ldr	r3, [r7, #4]
 8029fbc:	4a20      	ldr	r2, [pc, #128]	; (802a040 <TIM_OC3_SetConfig+0xe4>)
 8029fbe:	4293      	cmp	r3, r2
 8029fc0:	d10d      	bne.n	8029fde <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8029fc2:	697b      	ldr	r3, [r7, #20]
 8029fc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8029fc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8029fca:	683b      	ldr	r3, [r7, #0]
 8029fcc:	68db      	ldr	r3, [r3, #12]
 8029fce:	021b      	lsls	r3, r3, #8
 8029fd0:	697a      	ldr	r2, [r7, #20]
 8029fd2:	4313      	orrs	r3, r2
 8029fd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8029fd6:	697b      	ldr	r3, [r7, #20]
 8029fd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8029fdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029fde:	687b      	ldr	r3, [r7, #4]
 8029fe0:	4a16      	ldr	r2, [pc, #88]	; (802a03c <TIM_OC3_SetConfig+0xe0>)
 8029fe2:	4293      	cmp	r3, r2
 8029fe4:	d003      	beq.n	8029fee <TIM_OC3_SetConfig+0x92>
 8029fe6:	687b      	ldr	r3, [r7, #4]
 8029fe8:	4a15      	ldr	r2, [pc, #84]	; (802a040 <TIM_OC3_SetConfig+0xe4>)
 8029fea:	4293      	cmp	r3, r2
 8029fec:	d113      	bne.n	802a016 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8029fee:	693b      	ldr	r3, [r7, #16]
 8029ff0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8029ff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8029ff6:	693b      	ldr	r3, [r7, #16]
 8029ff8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8029ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8029ffe:	683b      	ldr	r3, [r7, #0]
 802a000:	695b      	ldr	r3, [r3, #20]
 802a002:	011b      	lsls	r3, r3, #4
 802a004:	693a      	ldr	r2, [r7, #16]
 802a006:	4313      	orrs	r3, r2
 802a008:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 802a00a:	683b      	ldr	r3, [r7, #0]
 802a00c:	699b      	ldr	r3, [r3, #24]
 802a00e:	011b      	lsls	r3, r3, #4
 802a010:	693a      	ldr	r2, [r7, #16]
 802a012:	4313      	orrs	r3, r2
 802a014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802a016:	687b      	ldr	r3, [r7, #4]
 802a018:	693a      	ldr	r2, [r7, #16]
 802a01a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802a01c:	687b      	ldr	r3, [r7, #4]
 802a01e:	68fa      	ldr	r2, [r7, #12]
 802a020:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 802a022:	683b      	ldr	r3, [r7, #0]
 802a024:	685a      	ldr	r2, [r3, #4]
 802a026:	687b      	ldr	r3, [r7, #4]
 802a028:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802a02a:	687b      	ldr	r3, [r7, #4]
 802a02c:	697a      	ldr	r2, [r7, #20]
 802a02e:	621a      	str	r2, [r3, #32]
}
 802a030:	bf00      	nop
 802a032:	371c      	adds	r7, #28
 802a034:	46bd      	mov	sp, r7
 802a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a03a:	4770      	bx	lr
 802a03c:	40010000 	.word	0x40010000
 802a040:	40010400 	.word	0x40010400

0802a044 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802a044:	b480      	push	{r7}
 802a046:	b087      	sub	sp, #28
 802a048:	af00      	add	r7, sp, #0
 802a04a:	6078      	str	r0, [r7, #4]
 802a04c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 802a04e:	687b      	ldr	r3, [r7, #4]
 802a050:	6a1b      	ldr	r3, [r3, #32]
 802a052:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802a056:	687b      	ldr	r3, [r7, #4]
 802a058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802a05a:	687b      	ldr	r3, [r7, #4]
 802a05c:	6a1b      	ldr	r3, [r3, #32]
 802a05e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802a060:	687b      	ldr	r3, [r7, #4]
 802a062:	685b      	ldr	r3, [r3, #4]
 802a064:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802a066:	687b      	ldr	r3, [r7, #4]
 802a068:	69db      	ldr	r3, [r3, #28]
 802a06a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 802a06c:	68fb      	ldr	r3, [r7, #12]
 802a06e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802a072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 802a074:	68fb      	ldr	r3, [r7, #12]
 802a076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a07a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 802a07c:	683b      	ldr	r3, [r7, #0]
 802a07e:	681b      	ldr	r3, [r3, #0]
 802a080:	021b      	lsls	r3, r3, #8
 802a082:	68fa      	ldr	r2, [r7, #12]
 802a084:	4313      	orrs	r3, r2
 802a086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 802a088:	693b      	ldr	r3, [r7, #16]
 802a08a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802a08e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 802a090:	683b      	ldr	r3, [r7, #0]
 802a092:	689b      	ldr	r3, [r3, #8]
 802a094:	031b      	lsls	r3, r3, #12
 802a096:	693a      	ldr	r2, [r7, #16]
 802a098:	4313      	orrs	r3, r2
 802a09a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802a09c:	687b      	ldr	r3, [r7, #4]
 802a09e:	4a12      	ldr	r2, [pc, #72]	; (802a0e8 <TIM_OC4_SetConfig+0xa4>)
 802a0a0:	4293      	cmp	r3, r2
 802a0a2:	d003      	beq.n	802a0ac <TIM_OC4_SetConfig+0x68>
 802a0a4:	687b      	ldr	r3, [r7, #4]
 802a0a6:	4a11      	ldr	r2, [pc, #68]	; (802a0ec <TIM_OC4_SetConfig+0xa8>)
 802a0a8:	4293      	cmp	r3, r2
 802a0aa:	d109      	bne.n	802a0c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 802a0ac:	697b      	ldr	r3, [r7, #20]
 802a0ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 802a0b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 802a0b4:	683b      	ldr	r3, [r7, #0]
 802a0b6:	695b      	ldr	r3, [r3, #20]
 802a0b8:	019b      	lsls	r3, r3, #6
 802a0ba:	697a      	ldr	r2, [r7, #20]
 802a0bc:	4313      	orrs	r3, r2
 802a0be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802a0c0:	687b      	ldr	r3, [r7, #4]
 802a0c2:	697a      	ldr	r2, [r7, #20]
 802a0c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802a0c6:	687b      	ldr	r3, [r7, #4]
 802a0c8:	68fa      	ldr	r2, [r7, #12]
 802a0ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 802a0cc:	683b      	ldr	r3, [r7, #0]
 802a0ce:	685a      	ldr	r2, [r3, #4]
 802a0d0:	687b      	ldr	r3, [r7, #4]
 802a0d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802a0d4:	687b      	ldr	r3, [r7, #4]
 802a0d6:	693a      	ldr	r2, [r7, #16]
 802a0d8:	621a      	str	r2, [r3, #32]
}
 802a0da:	bf00      	nop
 802a0dc:	371c      	adds	r7, #28
 802a0de:	46bd      	mov	sp, r7
 802a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a0e4:	4770      	bx	lr
 802a0e6:	bf00      	nop
 802a0e8:	40010000 	.word	0x40010000
 802a0ec:	40010400 	.word	0x40010400

0802a0f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802a0f0:	b480      	push	{r7}
 802a0f2:	b087      	sub	sp, #28
 802a0f4:	af00      	add	r7, sp, #0
 802a0f6:	60f8      	str	r0, [r7, #12]
 802a0f8:	60b9      	str	r1, [r7, #8]
 802a0fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 802a0fc:	68fb      	ldr	r3, [r7, #12]
 802a0fe:	6a1b      	ldr	r3, [r3, #32]
 802a100:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802a102:	68fb      	ldr	r3, [r7, #12]
 802a104:	6a1b      	ldr	r3, [r3, #32]
 802a106:	f023 0201 	bic.w	r2, r3, #1
 802a10a:	68fb      	ldr	r3, [r7, #12]
 802a10c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802a10e:	68fb      	ldr	r3, [r7, #12]
 802a110:	699b      	ldr	r3, [r3, #24]
 802a112:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 802a114:	693b      	ldr	r3, [r7, #16]
 802a116:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802a11a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 802a11c:	687b      	ldr	r3, [r7, #4]
 802a11e:	011b      	lsls	r3, r3, #4
 802a120:	693a      	ldr	r2, [r7, #16]
 802a122:	4313      	orrs	r3, r2
 802a124:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802a126:	697b      	ldr	r3, [r7, #20]
 802a128:	f023 030a 	bic.w	r3, r3, #10
 802a12c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 802a12e:	697a      	ldr	r2, [r7, #20]
 802a130:	68bb      	ldr	r3, [r7, #8]
 802a132:	4313      	orrs	r3, r2
 802a134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 802a136:	68fb      	ldr	r3, [r7, #12]
 802a138:	693a      	ldr	r2, [r7, #16]
 802a13a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802a13c:	68fb      	ldr	r3, [r7, #12]
 802a13e:	697a      	ldr	r2, [r7, #20]
 802a140:	621a      	str	r2, [r3, #32]
}
 802a142:	bf00      	nop
 802a144:	371c      	adds	r7, #28
 802a146:	46bd      	mov	sp, r7
 802a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a14c:	4770      	bx	lr

0802a14e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802a14e:	b480      	push	{r7}
 802a150:	b087      	sub	sp, #28
 802a152:	af00      	add	r7, sp, #0
 802a154:	60f8      	str	r0, [r7, #12]
 802a156:	60b9      	str	r1, [r7, #8]
 802a158:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802a15a:	68fb      	ldr	r3, [r7, #12]
 802a15c:	6a1b      	ldr	r3, [r3, #32]
 802a15e:	f023 0210 	bic.w	r2, r3, #16
 802a162:	68fb      	ldr	r3, [r7, #12]
 802a164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802a166:	68fb      	ldr	r3, [r7, #12]
 802a168:	699b      	ldr	r3, [r3, #24]
 802a16a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802a16c:	68fb      	ldr	r3, [r7, #12]
 802a16e:	6a1b      	ldr	r3, [r3, #32]
 802a170:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 802a172:	697b      	ldr	r3, [r7, #20]
 802a174:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802a178:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 802a17a:	687b      	ldr	r3, [r7, #4]
 802a17c:	031b      	lsls	r3, r3, #12
 802a17e:	697a      	ldr	r2, [r7, #20]
 802a180:	4313      	orrs	r3, r2
 802a182:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 802a184:	693b      	ldr	r3, [r7, #16]
 802a186:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 802a18a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 802a18c:	68bb      	ldr	r3, [r7, #8]
 802a18e:	011b      	lsls	r3, r3, #4
 802a190:	693a      	ldr	r2, [r7, #16]
 802a192:	4313      	orrs	r3, r2
 802a194:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 802a196:	68fb      	ldr	r3, [r7, #12]
 802a198:	697a      	ldr	r2, [r7, #20]
 802a19a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802a19c:	68fb      	ldr	r3, [r7, #12]
 802a19e:	693a      	ldr	r2, [r7, #16]
 802a1a0:	621a      	str	r2, [r3, #32]
}
 802a1a2:	bf00      	nop
 802a1a4:	371c      	adds	r7, #28
 802a1a6:	46bd      	mov	sp, r7
 802a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1ac:	4770      	bx	lr

0802a1ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 802a1ae:	b480      	push	{r7}
 802a1b0:	b085      	sub	sp, #20
 802a1b2:	af00      	add	r7, sp, #0
 802a1b4:	6078      	str	r0, [r7, #4]
 802a1b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 802a1b8:	687b      	ldr	r3, [r7, #4]
 802a1ba:	689b      	ldr	r3, [r3, #8]
 802a1bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 802a1be:	68fb      	ldr	r3, [r7, #12]
 802a1c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a1c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 802a1c6:	683a      	ldr	r2, [r7, #0]
 802a1c8:	68fb      	ldr	r3, [r7, #12]
 802a1ca:	4313      	orrs	r3, r2
 802a1cc:	f043 0307 	orr.w	r3, r3, #7
 802a1d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802a1d2:	687b      	ldr	r3, [r7, #4]
 802a1d4:	68fa      	ldr	r2, [r7, #12]
 802a1d6:	609a      	str	r2, [r3, #8]
}
 802a1d8:	bf00      	nop
 802a1da:	3714      	adds	r7, #20
 802a1dc:	46bd      	mov	sp, r7
 802a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1e2:	4770      	bx	lr

0802a1e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 802a1e4:	b480      	push	{r7}
 802a1e6:	b087      	sub	sp, #28
 802a1e8:	af00      	add	r7, sp, #0
 802a1ea:	60f8      	str	r0, [r7, #12]
 802a1ec:	60b9      	str	r1, [r7, #8]
 802a1ee:	607a      	str	r2, [r7, #4]
 802a1f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 802a1f2:	68fb      	ldr	r3, [r7, #12]
 802a1f4:	689b      	ldr	r3, [r3, #8]
 802a1f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802a1f8:	697b      	ldr	r3, [r7, #20]
 802a1fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802a1fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 802a200:	683b      	ldr	r3, [r7, #0]
 802a202:	021a      	lsls	r2, r3, #8
 802a204:	687b      	ldr	r3, [r7, #4]
 802a206:	431a      	orrs	r2, r3
 802a208:	68bb      	ldr	r3, [r7, #8]
 802a20a:	4313      	orrs	r3, r2
 802a20c:	697a      	ldr	r2, [r7, #20]
 802a20e:	4313      	orrs	r3, r2
 802a210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802a212:	68fb      	ldr	r3, [r7, #12]
 802a214:	697a      	ldr	r2, [r7, #20]
 802a216:	609a      	str	r2, [r3, #8]
}
 802a218:	bf00      	nop
 802a21a:	371c      	adds	r7, #28
 802a21c:	46bd      	mov	sp, r7
 802a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a222:	4770      	bx	lr

0802a224 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 802a224:	b480      	push	{r7}
 802a226:	b087      	sub	sp, #28
 802a228:	af00      	add	r7, sp, #0
 802a22a:	60f8      	str	r0, [r7, #12]
 802a22c:	60b9      	str	r1, [r7, #8]
 802a22e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 802a230:	68bb      	ldr	r3, [r7, #8]
 802a232:	f003 031f 	and.w	r3, r3, #31
 802a236:	2201      	movs	r2, #1
 802a238:	fa02 f303 	lsl.w	r3, r2, r3
 802a23c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 802a23e:	68fb      	ldr	r3, [r7, #12]
 802a240:	6a1a      	ldr	r2, [r3, #32]
 802a242:	697b      	ldr	r3, [r7, #20]
 802a244:	43db      	mvns	r3, r3
 802a246:	401a      	ands	r2, r3
 802a248:	68fb      	ldr	r3, [r7, #12]
 802a24a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 802a24c:	68fb      	ldr	r3, [r7, #12]
 802a24e:	6a1a      	ldr	r2, [r3, #32]
 802a250:	68bb      	ldr	r3, [r7, #8]
 802a252:	f003 031f 	and.w	r3, r3, #31
 802a256:	6879      	ldr	r1, [r7, #4]
 802a258:	fa01 f303 	lsl.w	r3, r1, r3
 802a25c:	431a      	orrs	r2, r3
 802a25e:	68fb      	ldr	r3, [r7, #12]
 802a260:	621a      	str	r2, [r3, #32]
}
 802a262:	bf00      	nop
 802a264:	371c      	adds	r7, #28
 802a266:	46bd      	mov	sp, r7
 802a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a26c:	4770      	bx	lr
	...

0802a270 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 802a270:	b480      	push	{r7}
 802a272:	b085      	sub	sp, #20
 802a274:	af00      	add	r7, sp, #0
 802a276:	6078      	str	r0, [r7, #4]
 802a278:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 802a27a:	687b      	ldr	r3, [r7, #4]
 802a27c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802a280:	2b01      	cmp	r3, #1
 802a282:	d101      	bne.n	802a288 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 802a284:	2302      	movs	r3, #2
 802a286:	e05a      	b.n	802a33e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 802a288:	687b      	ldr	r3, [r7, #4]
 802a28a:	2201      	movs	r2, #1
 802a28c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 802a290:	687b      	ldr	r3, [r7, #4]
 802a292:	2202      	movs	r2, #2
 802a294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 802a298:	687b      	ldr	r3, [r7, #4]
 802a29a:	681b      	ldr	r3, [r3, #0]
 802a29c:	685b      	ldr	r3, [r3, #4]
 802a29e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802a2a0:	687b      	ldr	r3, [r7, #4]
 802a2a2:	681b      	ldr	r3, [r3, #0]
 802a2a4:	689b      	ldr	r3, [r3, #8]
 802a2a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 802a2a8:	68fb      	ldr	r3, [r7, #12]
 802a2aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a2ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 802a2b0:	683b      	ldr	r3, [r7, #0]
 802a2b2:	681b      	ldr	r3, [r3, #0]
 802a2b4:	68fa      	ldr	r2, [r7, #12]
 802a2b6:	4313      	orrs	r3, r2
 802a2b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802a2ba:	687b      	ldr	r3, [r7, #4]
 802a2bc:	681b      	ldr	r3, [r3, #0]
 802a2be:	68fa      	ldr	r2, [r7, #12]
 802a2c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802a2c2:	687b      	ldr	r3, [r7, #4]
 802a2c4:	681b      	ldr	r3, [r3, #0]
 802a2c6:	4a21      	ldr	r2, [pc, #132]	; (802a34c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 802a2c8:	4293      	cmp	r3, r2
 802a2ca:	d022      	beq.n	802a312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a2cc:	687b      	ldr	r3, [r7, #4]
 802a2ce:	681b      	ldr	r3, [r3, #0]
 802a2d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802a2d4:	d01d      	beq.n	802a312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a2d6:	687b      	ldr	r3, [r7, #4]
 802a2d8:	681b      	ldr	r3, [r3, #0]
 802a2da:	4a1d      	ldr	r2, [pc, #116]	; (802a350 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 802a2dc:	4293      	cmp	r3, r2
 802a2de:	d018      	beq.n	802a312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a2e0:	687b      	ldr	r3, [r7, #4]
 802a2e2:	681b      	ldr	r3, [r3, #0]
 802a2e4:	4a1b      	ldr	r2, [pc, #108]	; (802a354 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 802a2e6:	4293      	cmp	r3, r2
 802a2e8:	d013      	beq.n	802a312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a2ea:	687b      	ldr	r3, [r7, #4]
 802a2ec:	681b      	ldr	r3, [r3, #0]
 802a2ee:	4a1a      	ldr	r2, [pc, #104]	; (802a358 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 802a2f0:	4293      	cmp	r3, r2
 802a2f2:	d00e      	beq.n	802a312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a2f4:	687b      	ldr	r3, [r7, #4]
 802a2f6:	681b      	ldr	r3, [r3, #0]
 802a2f8:	4a18      	ldr	r2, [pc, #96]	; (802a35c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 802a2fa:	4293      	cmp	r3, r2
 802a2fc:	d009      	beq.n	802a312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a2fe:	687b      	ldr	r3, [r7, #4]
 802a300:	681b      	ldr	r3, [r3, #0]
 802a302:	4a17      	ldr	r2, [pc, #92]	; (802a360 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 802a304:	4293      	cmp	r3, r2
 802a306:	d004      	beq.n	802a312 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a308:	687b      	ldr	r3, [r7, #4]
 802a30a:	681b      	ldr	r3, [r3, #0]
 802a30c:	4a15      	ldr	r2, [pc, #84]	; (802a364 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 802a30e:	4293      	cmp	r3, r2
 802a310:	d10c      	bne.n	802a32c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 802a312:	68bb      	ldr	r3, [r7, #8]
 802a314:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802a318:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802a31a:	683b      	ldr	r3, [r7, #0]
 802a31c:	685b      	ldr	r3, [r3, #4]
 802a31e:	68ba      	ldr	r2, [r7, #8]
 802a320:	4313      	orrs	r3, r2
 802a322:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 802a324:	687b      	ldr	r3, [r7, #4]
 802a326:	681b      	ldr	r3, [r3, #0]
 802a328:	68ba      	ldr	r2, [r7, #8]
 802a32a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802a32c:	687b      	ldr	r3, [r7, #4]
 802a32e:	2201      	movs	r2, #1
 802a330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802a334:	687b      	ldr	r3, [r7, #4]
 802a336:	2200      	movs	r2, #0
 802a338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802a33c:	2300      	movs	r3, #0
}
 802a33e:	4618      	mov	r0, r3
 802a340:	3714      	adds	r7, #20
 802a342:	46bd      	mov	sp, r7
 802a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a348:	4770      	bx	lr
 802a34a:	bf00      	nop
 802a34c:	40010000 	.word	0x40010000
 802a350:	40000400 	.word	0x40000400
 802a354:	40000800 	.word	0x40000800
 802a358:	40000c00 	.word	0x40000c00
 802a35c:	40010400 	.word	0x40010400
 802a360:	40014000 	.word	0x40014000
 802a364:	40001800 	.word	0x40001800

0802a368 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 802a368:	b480      	push	{r7}
 802a36a:	b085      	sub	sp, #20
 802a36c:	af00      	add	r7, sp, #0
 802a36e:	6078      	str	r0, [r7, #4]
 802a370:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 802a372:	2300      	movs	r3, #0
 802a374:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 802a376:	687b      	ldr	r3, [r7, #4]
 802a378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802a37c:	2b01      	cmp	r3, #1
 802a37e:	d101      	bne.n	802a384 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 802a380:	2302      	movs	r3, #2
 802a382:	e03d      	b.n	802a400 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 802a384:	687b      	ldr	r3, [r7, #4]
 802a386:	2201      	movs	r2, #1
 802a388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 802a38c:	68fb      	ldr	r3, [r7, #12]
 802a38e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 802a392:	683b      	ldr	r3, [r7, #0]
 802a394:	68db      	ldr	r3, [r3, #12]
 802a396:	4313      	orrs	r3, r2
 802a398:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 802a39a:	68fb      	ldr	r3, [r7, #12]
 802a39c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 802a3a0:	683b      	ldr	r3, [r7, #0]
 802a3a2:	689b      	ldr	r3, [r3, #8]
 802a3a4:	4313      	orrs	r3, r2
 802a3a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 802a3a8:	68fb      	ldr	r3, [r7, #12]
 802a3aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 802a3ae:	683b      	ldr	r3, [r7, #0]
 802a3b0:	685b      	ldr	r3, [r3, #4]
 802a3b2:	4313      	orrs	r3, r2
 802a3b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 802a3b6:	68fb      	ldr	r3, [r7, #12]
 802a3b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 802a3bc:	683b      	ldr	r3, [r7, #0]
 802a3be:	681b      	ldr	r3, [r3, #0]
 802a3c0:	4313      	orrs	r3, r2
 802a3c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 802a3c4:	68fb      	ldr	r3, [r7, #12]
 802a3c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802a3ca:	683b      	ldr	r3, [r7, #0]
 802a3cc:	691b      	ldr	r3, [r3, #16]
 802a3ce:	4313      	orrs	r3, r2
 802a3d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 802a3d2:	68fb      	ldr	r3, [r7, #12]
 802a3d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 802a3d8:	683b      	ldr	r3, [r7, #0]
 802a3da:	695b      	ldr	r3, [r3, #20]
 802a3dc:	4313      	orrs	r3, r2
 802a3de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 802a3e0:	68fb      	ldr	r3, [r7, #12]
 802a3e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 802a3e6:	683b      	ldr	r3, [r7, #0]
 802a3e8:	69db      	ldr	r3, [r3, #28]
 802a3ea:	4313      	orrs	r3, r2
 802a3ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 802a3ee:	687b      	ldr	r3, [r7, #4]
 802a3f0:	681b      	ldr	r3, [r3, #0]
 802a3f2:	68fa      	ldr	r2, [r7, #12]
 802a3f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 802a3f6:	687b      	ldr	r3, [r7, #4]
 802a3f8:	2200      	movs	r2, #0
 802a3fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802a3fe:	2300      	movs	r3, #0
}
 802a400:	4618      	mov	r0, r3
 802a402:	3714      	adds	r7, #20
 802a404:	46bd      	mov	sp, r7
 802a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a40a:	4770      	bx	lr

0802a40c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 802a40c:	b480      	push	{r7}
 802a40e:	b083      	sub	sp, #12
 802a410:	af00      	add	r7, sp, #0
 802a412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 802a414:	bf00      	nop
 802a416:	370c      	adds	r7, #12
 802a418:	46bd      	mov	sp, r7
 802a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a41e:	4770      	bx	lr

0802a420 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 802a420:	b480      	push	{r7}
 802a422:	b083      	sub	sp, #12
 802a424:	af00      	add	r7, sp, #0
 802a426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 802a428:	bf00      	nop
 802a42a:	370c      	adds	r7, #12
 802a42c:	46bd      	mov	sp, r7
 802a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a432:	4770      	bx	lr

0802a434 <__cxa_guard_acquire>:
 802a434:	6803      	ldr	r3, [r0, #0]
 802a436:	07db      	lsls	r3, r3, #31
 802a438:	d406      	bmi.n	802a448 <__cxa_guard_acquire+0x14>
 802a43a:	7843      	ldrb	r3, [r0, #1]
 802a43c:	b103      	cbz	r3, 802a440 <__cxa_guard_acquire+0xc>
 802a43e:	deff      	udf	#255	; 0xff
 802a440:	2301      	movs	r3, #1
 802a442:	7043      	strb	r3, [r0, #1]
 802a444:	4618      	mov	r0, r3
 802a446:	4770      	bx	lr
 802a448:	2000      	movs	r0, #0
 802a44a:	4770      	bx	lr

0802a44c <__cxa_guard_release>:
 802a44c:	2301      	movs	r3, #1
 802a44e:	6003      	str	r3, [r0, #0]
 802a450:	4770      	bx	lr
	...

0802a454 <__errno>:
 802a454:	4b01      	ldr	r3, [pc, #4]	; (802a45c <__errno+0x8>)
 802a456:	6818      	ldr	r0, [r3, #0]
 802a458:	4770      	bx	lr
 802a45a:	bf00      	nop
 802a45c:	20000010 	.word	0x20000010

0802a460 <__libc_init_array>:
 802a460:	b570      	push	{r4, r5, r6, lr}
 802a462:	4e0d      	ldr	r6, [pc, #52]	; (802a498 <__libc_init_array+0x38>)
 802a464:	4c0d      	ldr	r4, [pc, #52]	; (802a49c <__libc_init_array+0x3c>)
 802a466:	1ba4      	subs	r4, r4, r6
 802a468:	10a4      	asrs	r4, r4, #2
 802a46a:	2500      	movs	r5, #0
 802a46c:	42a5      	cmp	r5, r4
 802a46e:	d109      	bne.n	802a484 <__libc_init_array+0x24>
 802a470:	4e0b      	ldr	r6, [pc, #44]	; (802a4a0 <__libc_init_array+0x40>)
 802a472:	4c0c      	ldr	r4, [pc, #48]	; (802a4a4 <__libc_init_array+0x44>)
 802a474:	f002 fbac 	bl	802cbd0 <_init>
 802a478:	1ba4      	subs	r4, r4, r6
 802a47a:	10a4      	asrs	r4, r4, #2
 802a47c:	2500      	movs	r5, #0
 802a47e:	42a5      	cmp	r5, r4
 802a480:	d105      	bne.n	802a48e <__libc_init_array+0x2e>
 802a482:	bd70      	pop	{r4, r5, r6, pc}
 802a484:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802a488:	4798      	blx	r3
 802a48a:	3501      	adds	r5, #1
 802a48c:	e7ee      	b.n	802a46c <__libc_init_array+0xc>
 802a48e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802a492:	4798      	blx	r3
 802a494:	3501      	adds	r5, #1
 802a496:	e7f2      	b.n	802a47e <__libc_init_array+0x1e>
 802a498:	0802cfc0 	.word	0x0802cfc0
 802a49c:	0802cfc0 	.word	0x0802cfc0
 802a4a0:	0802cfc0 	.word	0x0802cfc0
 802a4a4:	0802cfc8 	.word	0x0802cfc8

0802a4a8 <memcpy>:
 802a4a8:	b510      	push	{r4, lr}
 802a4aa:	1e43      	subs	r3, r0, #1
 802a4ac:	440a      	add	r2, r1
 802a4ae:	4291      	cmp	r1, r2
 802a4b0:	d100      	bne.n	802a4b4 <memcpy+0xc>
 802a4b2:	bd10      	pop	{r4, pc}
 802a4b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 802a4b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 802a4bc:	e7f7      	b.n	802a4ae <memcpy+0x6>

0802a4be <memset>:
 802a4be:	4402      	add	r2, r0
 802a4c0:	4603      	mov	r3, r0
 802a4c2:	4293      	cmp	r3, r2
 802a4c4:	d100      	bne.n	802a4c8 <memset+0xa>
 802a4c6:	4770      	bx	lr
 802a4c8:	f803 1b01 	strb.w	r1, [r3], #1
 802a4cc:	e7f9      	b.n	802a4c2 <memset+0x4>

0802a4ce <__cvt>:
 802a4ce:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802a4d2:	ec55 4b10 	vmov	r4, r5, d0
 802a4d6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 802a4d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 802a4dc:	2d00      	cmp	r5, #0
 802a4de:	460e      	mov	r6, r1
 802a4e0:	4691      	mov	r9, r2
 802a4e2:	4619      	mov	r1, r3
 802a4e4:	bfb8      	it	lt
 802a4e6:	4622      	movlt	r2, r4
 802a4e8:	462b      	mov	r3, r5
 802a4ea:	f027 0720 	bic.w	r7, r7, #32
 802a4ee:	bfbb      	ittet	lt
 802a4f0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 802a4f4:	461d      	movlt	r5, r3
 802a4f6:	2300      	movge	r3, #0
 802a4f8:	232d      	movlt	r3, #45	; 0x2d
 802a4fa:	bfb8      	it	lt
 802a4fc:	4614      	movlt	r4, r2
 802a4fe:	2f46      	cmp	r7, #70	; 0x46
 802a500:	700b      	strb	r3, [r1, #0]
 802a502:	d004      	beq.n	802a50e <__cvt+0x40>
 802a504:	2f45      	cmp	r7, #69	; 0x45
 802a506:	d100      	bne.n	802a50a <__cvt+0x3c>
 802a508:	3601      	adds	r6, #1
 802a50a:	2102      	movs	r1, #2
 802a50c:	e000      	b.n	802a510 <__cvt+0x42>
 802a50e:	2103      	movs	r1, #3
 802a510:	ab03      	add	r3, sp, #12
 802a512:	9301      	str	r3, [sp, #4]
 802a514:	ab02      	add	r3, sp, #8
 802a516:	9300      	str	r3, [sp, #0]
 802a518:	4632      	mov	r2, r6
 802a51a:	4653      	mov	r3, sl
 802a51c:	ec45 4b10 	vmov	d0, r4, r5
 802a520:	f000 fdfa 	bl	802b118 <_dtoa_r>
 802a524:	2f47      	cmp	r7, #71	; 0x47
 802a526:	4680      	mov	r8, r0
 802a528:	d102      	bne.n	802a530 <__cvt+0x62>
 802a52a:	f019 0f01 	tst.w	r9, #1
 802a52e:	d026      	beq.n	802a57e <__cvt+0xb0>
 802a530:	2f46      	cmp	r7, #70	; 0x46
 802a532:	eb08 0906 	add.w	r9, r8, r6
 802a536:	d111      	bne.n	802a55c <__cvt+0x8e>
 802a538:	f898 3000 	ldrb.w	r3, [r8]
 802a53c:	2b30      	cmp	r3, #48	; 0x30
 802a53e:	d10a      	bne.n	802a556 <__cvt+0x88>
 802a540:	2200      	movs	r2, #0
 802a542:	2300      	movs	r3, #0
 802a544:	4620      	mov	r0, r4
 802a546:	4629      	mov	r1, r5
 802a548:	f7f6 f9f6 	bl	8020938 <__aeabi_dcmpeq>
 802a54c:	b918      	cbnz	r0, 802a556 <__cvt+0x88>
 802a54e:	f1c6 0601 	rsb	r6, r6, #1
 802a552:	f8ca 6000 	str.w	r6, [sl]
 802a556:	f8da 3000 	ldr.w	r3, [sl]
 802a55a:	4499      	add	r9, r3
 802a55c:	2200      	movs	r2, #0
 802a55e:	2300      	movs	r3, #0
 802a560:	4620      	mov	r0, r4
 802a562:	4629      	mov	r1, r5
 802a564:	f7f6 f9e8 	bl	8020938 <__aeabi_dcmpeq>
 802a568:	b938      	cbnz	r0, 802a57a <__cvt+0xac>
 802a56a:	2230      	movs	r2, #48	; 0x30
 802a56c:	9b03      	ldr	r3, [sp, #12]
 802a56e:	454b      	cmp	r3, r9
 802a570:	d205      	bcs.n	802a57e <__cvt+0xb0>
 802a572:	1c59      	adds	r1, r3, #1
 802a574:	9103      	str	r1, [sp, #12]
 802a576:	701a      	strb	r2, [r3, #0]
 802a578:	e7f8      	b.n	802a56c <__cvt+0x9e>
 802a57a:	f8cd 900c 	str.w	r9, [sp, #12]
 802a57e:	9b03      	ldr	r3, [sp, #12]
 802a580:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802a582:	eba3 0308 	sub.w	r3, r3, r8
 802a586:	4640      	mov	r0, r8
 802a588:	6013      	str	r3, [r2, #0]
 802a58a:	b004      	add	sp, #16
 802a58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0802a590 <__exponent>:
 802a590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802a592:	2900      	cmp	r1, #0
 802a594:	4604      	mov	r4, r0
 802a596:	bfba      	itte	lt
 802a598:	4249      	neglt	r1, r1
 802a59a:	232d      	movlt	r3, #45	; 0x2d
 802a59c:	232b      	movge	r3, #43	; 0x2b
 802a59e:	2909      	cmp	r1, #9
 802a5a0:	f804 2b02 	strb.w	r2, [r4], #2
 802a5a4:	7043      	strb	r3, [r0, #1]
 802a5a6:	dd20      	ble.n	802a5ea <__exponent+0x5a>
 802a5a8:	f10d 0307 	add.w	r3, sp, #7
 802a5ac:	461f      	mov	r7, r3
 802a5ae:	260a      	movs	r6, #10
 802a5b0:	fb91 f5f6 	sdiv	r5, r1, r6
 802a5b4:	fb06 1115 	mls	r1, r6, r5, r1
 802a5b8:	3130      	adds	r1, #48	; 0x30
 802a5ba:	2d09      	cmp	r5, #9
 802a5bc:	f803 1c01 	strb.w	r1, [r3, #-1]
 802a5c0:	f103 32ff 	add.w	r2, r3, #4294967295
 802a5c4:	4629      	mov	r1, r5
 802a5c6:	dc09      	bgt.n	802a5dc <__exponent+0x4c>
 802a5c8:	3130      	adds	r1, #48	; 0x30
 802a5ca:	3b02      	subs	r3, #2
 802a5cc:	f802 1c01 	strb.w	r1, [r2, #-1]
 802a5d0:	42bb      	cmp	r3, r7
 802a5d2:	4622      	mov	r2, r4
 802a5d4:	d304      	bcc.n	802a5e0 <__exponent+0x50>
 802a5d6:	1a10      	subs	r0, r2, r0
 802a5d8:	b003      	add	sp, #12
 802a5da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a5dc:	4613      	mov	r3, r2
 802a5de:	e7e7      	b.n	802a5b0 <__exponent+0x20>
 802a5e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a5e4:	f804 2b01 	strb.w	r2, [r4], #1
 802a5e8:	e7f2      	b.n	802a5d0 <__exponent+0x40>
 802a5ea:	2330      	movs	r3, #48	; 0x30
 802a5ec:	4419      	add	r1, r3
 802a5ee:	7083      	strb	r3, [r0, #2]
 802a5f0:	1d02      	adds	r2, r0, #4
 802a5f2:	70c1      	strb	r1, [r0, #3]
 802a5f4:	e7ef      	b.n	802a5d6 <__exponent+0x46>
	...

0802a5f8 <_printf_float>:
 802a5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a5fc:	b08d      	sub	sp, #52	; 0x34
 802a5fe:	460c      	mov	r4, r1
 802a600:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 802a604:	4616      	mov	r6, r2
 802a606:	461f      	mov	r7, r3
 802a608:	4605      	mov	r5, r0
 802a60a:	f001 fcb7 	bl	802bf7c <_localeconv_r>
 802a60e:	6803      	ldr	r3, [r0, #0]
 802a610:	9304      	str	r3, [sp, #16]
 802a612:	4618      	mov	r0, r3
 802a614:	f7f5 fd14 	bl	8020040 <strlen>
 802a618:	2300      	movs	r3, #0
 802a61a:	930a      	str	r3, [sp, #40]	; 0x28
 802a61c:	f8d8 3000 	ldr.w	r3, [r8]
 802a620:	9005      	str	r0, [sp, #20]
 802a622:	3307      	adds	r3, #7
 802a624:	f023 0307 	bic.w	r3, r3, #7
 802a628:	f103 0208 	add.w	r2, r3, #8
 802a62c:	f894 a018 	ldrb.w	sl, [r4, #24]
 802a630:	f8d4 b000 	ldr.w	fp, [r4]
 802a634:	f8c8 2000 	str.w	r2, [r8]
 802a638:	e9d3 2300 	ldrd	r2, r3, [r3]
 802a63c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 802a640:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 802a644:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802a648:	9307      	str	r3, [sp, #28]
 802a64a:	f8cd 8018 	str.w	r8, [sp, #24]
 802a64e:	f04f 32ff 	mov.w	r2, #4294967295
 802a652:	4ba7      	ldr	r3, [pc, #668]	; (802a8f0 <_printf_float+0x2f8>)
 802a654:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802a658:	f7f6 f9a0 	bl	802099c <__aeabi_dcmpun>
 802a65c:	bb70      	cbnz	r0, 802a6bc <_printf_float+0xc4>
 802a65e:	f04f 32ff 	mov.w	r2, #4294967295
 802a662:	4ba3      	ldr	r3, [pc, #652]	; (802a8f0 <_printf_float+0x2f8>)
 802a664:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802a668:	f7f6 f97a 	bl	8020960 <__aeabi_dcmple>
 802a66c:	bb30      	cbnz	r0, 802a6bc <_printf_float+0xc4>
 802a66e:	2200      	movs	r2, #0
 802a670:	2300      	movs	r3, #0
 802a672:	4640      	mov	r0, r8
 802a674:	4649      	mov	r1, r9
 802a676:	f7f6 f969 	bl	802094c <__aeabi_dcmplt>
 802a67a:	b110      	cbz	r0, 802a682 <_printf_float+0x8a>
 802a67c:	232d      	movs	r3, #45	; 0x2d
 802a67e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a682:	4a9c      	ldr	r2, [pc, #624]	; (802a8f4 <_printf_float+0x2fc>)
 802a684:	4b9c      	ldr	r3, [pc, #624]	; (802a8f8 <_printf_float+0x300>)
 802a686:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 802a68a:	bf8c      	ite	hi
 802a68c:	4690      	movhi	r8, r2
 802a68e:	4698      	movls	r8, r3
 802a690:	2303      	movs	r3, #3
 802a692:	f02b 0204 	bic.w	r2, fp, #4
 802a696:	6123      	str	r3, [r4, #16]
 802a698:	6022      	str	r2, [r4, #0]
 802a69a:	f04f 0900 	mov.w	r9, #0
 802a69e:	9700      	str	r7, [sp, #0]
 802a6a0:	4633      	mov	r3, r6
 802a6a2:	aa0b      	add	r2, sp, #44	; 0x2c
 802a6a4:	4621      	mov	r1, r4
 802a6a6:	4628      	mov	r0, r5
 802a6a8:	f000 f9e6 	bl	802aa78 <_printf_common>
 802a6ac:	3001      	adds	r0, #1
 802a6ae:	f040 808d 	bne.w	802a7cc <_printf_float+0x1d4>
 802a6b2:	f04f 30ff 	mov.w	r0, #4294967295
 802a6b6:	b00d      	add	sp, #52	; 0x34
 802a6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a6bc:	4642      	mov	r2, r8
 802a6be:	464b      	mov	r3, r9
 802a6c0:	4640      	mov	r0, r8
 802a6c2:	4649      	mov	r1, r9
 802a6c4:	f7f6 f96a 	bl	802099c <__aeabi_dcmpun>
 802a6c8:	b110      	cbz	r0, 802a6d0 <_printf_float+0xd8>
 802a6ca:	4a8c      	ldr	r2, [pc, #560]	; (802a8fc <_printf_float+0x304>)
 802a6cc:	4b8c      	ldr	r3, [pc, #560]	; (802a900 <_printf_float+0x308>)
 802a6ce:	e7da      	b.n	802a686 <_printf_float+0x8e>
 802a6d0:	6861      	ldr	r1, [r4, #4]
 802a6d2:	1c4b      	adds	r3, r1, #1
 802a6d4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 802a6d8:	a80a      	add	r0, sp, #40	; 0x28
 802a6da:	d13e      	bne.n	802a75a <_printf_float+0x162>
 802a6dc:	2306      	movs	r3, #6
 802a6de:	6063      	str	r3, [r4, #4]
 802a6e0:	2300      	movs	r3, #0
 802a6e2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 802a6e6:	ab09      	add	r3, sp, #36	; 0x24
 802a6e8:	9300      	str	r3, [sp, #0]
 802a6ea:	ec49 8b10 	vmov	d0, r8, r9
 802a6ee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 802a6f2:	6022      	str	r2, [r4, #0]
 802a6f4:	f8cd a004 	str.w	sl, [sp, #4]
 802a6f8:	6861      	ldr	r1, [r4, #4]
 802a6fa:	4628      	mov	r0, r5
 802a6fc:	f7ff fee7 	bl	802a4ce <__cvt>
 802a700:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 802a704:	2b47      	cmp	r3, #71	; 0x47
 802a706:	4680      	mov	r8, r0
 802a708:	d109      	bne.n	802a71e <_printf_float+0x126>
 802a70a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a70c:	1cd8      	adds	r0, r3, #3
 802a70e:	db02      	blt.n	802a716 <_printf_float+0x11e>
 802a710:	6862      	ldr	r2, [r4, #4]
 802a712:	4293      	cmp	r3, r2
 802a714:	dd47      	ble.n	802a7a6 <_printf_float+0x1ae>
 802a716:	f1aa 0a02 	sub.w	sl, sl, #2
 802a71a:	fa5f fa8a 	uxtb.w	sl, sl
 802a71e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 802a722:	9909      	ldr	r1, [sp, #36]	; 0x24
 802a724:	d824      	bhi.n	802a770 <_printf_float+0x178>
 802a726:	3901      	subs	r1, #1
 802a728:	4652      	mov	r2, sl
 802a72a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802a72e:	9109      	str	r1, [sp, #36]	; 0x24
 802a730:	f7ff ff2e 	bl	802a590 <__exponent>
 802a734:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802a736:	1813      	adds	r3, r2, r0
 802a738:	2a01      	cmp	r2, #1
 802a73a:	4681      	mov	r9, r0
 802a73c:	6123      	str	r3, [r4, #16]
 802a73e:	dc02      	bgt.n	802a746 <_printf_float+0x14e>
 802a740:	6822      	ldr	r2, [r4, #0]
 802a742:	07d1      	lsls	r1, r2, #31
 802a744:	d501      	bpl.n	802a74a <_printf_float+0x152>
 802a746:	3301      	adds	r3, #1
 802a748:	6123      	str	r3, [r4, #16]
 802a74a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 802a74e:	2b00      	cmp	r3, #0
 802a750:	d0a5      	beq.n	802a69e <_printf_float+0xa6>
 802a752:	232d      	movs	r3, #45	; 0x2d
 802a754:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a758:	e7a1      	b.n	802a69e <_printf_float+0xa6>
 802a75a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 802a75e:	f000 8177 	beq.w	802aa50 <_printf_float+0x458>
 802a762:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 802a766:	d1bb      	bne.n	802a6e0 <_printf_float+0xe8>
 802a768:	2900      	cmp	r1, #0
 802a76a:	d1b9      	bne.n	802a6e0 <_printf_float+0xe8>
 802a76c:	2301      	movs	r3, #1
 802a76e:	e7b6      	b.n	802a6de <_printf_float+0xe6>
 802a770:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 802a774:	d119      	bne.n	802a7aa <_printf_float+0x1b2>
 802a776:	2900      	cmp	r1, #0
 802a778:	6863      	ldr	r3, [r4, #4]
 802a77a:	dd0c      	ble.n	802a796 <_printf_float+0x19e>
 802a77c:	6121      	str	r1, [r4, #16]
 802a77e:	b913      	cbnz	r3, 802a786 <_printf_float+0x18e>
 802a780:	6822      	ldr	r2, [r4, #0]
 802a782:	07d2      	lsls	r2, r2, #31
 802a784:	d502      	bpl.n	802a78c <_printf_float+0x194>
 802a786:	3301      	adds	r3, #1
 802a788:	440b      	add	r3, r1
 802a78a:	6123      	str	r3, [r4, #16]
 802a78c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a78e:	65a3      	str	r3, [r4, #88]	; 0x58
 802a790:	f04f 0900 	mov.w	r9, #0
 802a794:	e7d9      	b.n	802a74a <_printf_float+0x152>
 802a796:	b913      	cbnz	r3, 802a79e <_printf_float+0x1a6>
 802a798:	6822      	ldr	r2, [r4, #0]
 802a79a:	07d0      	lsls	r0, r2, #31
 802a79c:	d501      	bpl.n	802a7a2 <_printf_float+0x1aa>
 802a79e:	3302      	adds	r3, #2
 802a7a0:	e7f3      	b.n	802a78a <_printf_float+0x192>
 802a7a2:	2301      	movs	r3, #1
 802a7a4:	e7f1      	b.n	802a78a <_printf_float+0x192>
 802a7a6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 802a7aa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 802a7ae:	4293      	cmp	r3, r2
 802a7b0:	db05      	blt.n	802a7be <_printf_float+0x1c6>
 802a7b2:	6822      	ldr	r2, [r4, #0]
 802a7b4:	6123      	str	r3, [r4, #16]
 802a7b6:	07d1      	lsls	r1, r2, #31
 802a7b8:	d5e8      	bpl.n	802a78c <_printf_float+0x194>
 802a7ba:	3301      	adds	r3, #1
 802a7bc:	e7e5      	b.n	802a78a <_printf_float+0x192>
 802a7be:	2b00      	cmp	r3, #0
 802a7c0:	bfd4      	ite	le
 802a7c2:	f1c3 0302 	rsble	r3, r3, #2
 802a7c6:	2301      	movgt	r3, #1
 802a7c8:	4413      	add	r3, r2
 802a7ca:	e7de      	b.n	802a78a <_printf_float+0x192>
 802a7cc:	6823      	ldr	r3, [r4, #0]
 802a7ce:	055a      	lsls	r2, r3, #21
 802a7d0:	d407      	bmi.n	802a7e2 <_printf_float+0x1ea>
 802a7d2:	6923      	ldr	r3, [r4, #16]
 802a7d4:	4642      	mov	r2, r8
 802a7d6:	4631      	mov	r1, r6
 802a7d8:	4628      	mov	r0, r5
 802a7da:	47b8      	blx	r7
 802a7dc:	3001      	adds	r0, #1
 802a7de:	d12b      	bne.n	802a838 <_printf_float+0x240>
 802a7e0:	e767      	b.n	802a6b2 <_printf_float+0xba>
 802a7e2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 802a7e6:	f240 80dc 	bls.w	802a9a2 <_printf_float+0x3aa>
 802a7ea:	2200      	movs	r2, #0
 802a7ec:	2300      	movs	r3, #0
 802a7ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802a7f2:	f7f6 f8a1 	bl	8020938 <__aeabi_dcmpeq>
 802a7f6:	2800      	cmp	r0, #0
 802a7f8:	d033      	beq.n	802a862 <_printf_float+0x26a>
 802a7fa:	2301      	movs	r3, #1
 802a7fc:	4a41      	ldr	r2, [pc, #260]	; (802a904 <_printf_float+0x30c>)
 802a7fe:	4631      	mov	r1, r6
 802a800:	4628      	mov	r0, r5
 802a802:	47b8      	blx	r7
 802a804:	3001      	adds	r0, #1
 802a806:	f43f af54 	beq.w	802a6b2 <_printf_float+0xba>
 802a80a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802a80e:	429a      	cmp	r2, r3
 802a810:	db02      	blt.n	802a818 <_printf_float+0x220>
 802a812:	6823      	ldr	r3, [r4, #0]
 802a814:	07d8      	lsls	r0, r3, #31
 802a816:	d50f      	bpl.n	802a838 <_printf_float+0x240>
 802a818:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802a81c:	4631      	mov	r1, r6
 802a81e:	4628      	mov	r0, r5
 802a820:	47b8      	blx	r7
 802a822:	3001      	adds	r0, #1
 802a824:	f43f af45 	beq.w	802a6b2 <_printf_float+0xba>
 802a828:	f04f 0800 	mov.w	r8, #0
 802a82c:	f104 091a 	add.w	r9, r4, #26
 802a830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a832:	3b01      	subs	r3, #1
 802a834:	4543      	cmp	r3, r8
 802a836:	dc09      	bgt.n	802a84c <_printf_float+0x254>
 802a838:	6823      	ldr	r3, [r4, #0]
 802a83a:	079b      	lsls	r3, r3, #30
 802a83c:	f100 8103 	bmi.w	802aa46 <_printf_float+0x44e>
 802a840:	68e0      	ldr	r0, [r4, #12]
 802a842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a844:	4298      	cmp	r0, r3
 802a846:	bfb8      	it	lt
 802a848:	4618      	movlt	r0, r3
 802a84a:	e734      	b.n	802a6b6 <_printf_float+0xbe>
 802a84c:	2301      	movs	r3, #1
 802a84e:	464a      	mov	r2, r9
 802a850:	4631      	mov	r1, r6
 802a852:	4628      	mov	r0, r5
 802a854:	47b8      	blx	r7
 802a856:	3001      	adds	r0, #1
 802a858:	f43f af2b 	beq.w	802a6b2 <_printf_float+0xba>
 802a85c:	f108 0801 	add.w	r8, r8, #1
 802a860:	e7e6      	b.n	802a830 <_printf_float+0x238>
 802a862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a864:	2b00      	cmp	r3, #0
 802a866:	dc2b      	bgt.n	802a8c0 <_printf_float+0x2c8>
 802a868:	2301      	movs	r3, #1
 802a86a:	4a26      	ldr	r2, [pc, #152]	; (802a904 <_printf_float+0x30c>)
 802a86c:	4631      	mov	r1, r6
 802a86e:	4628      	mov	r0, r5
 802a870:	47b8      	blx	r7
 802a872:	3001      	adds	r0, #1
 802a874:	f43f af1d 	beq.w	802a6b2 <_printf_float+0xba>
 802a878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a87a:	b923      	cbnz	r3, 802a886 <_printf_float+0x28e>
 802a87c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a87e:	b913      	cbnz	r3, 802a886 <_printf_float+0x28e>
 802a880:	6823      	ldr	r3, [r4, #0]
 802a882:	07d9      	lsls	r1, r3, #31
 802a884:	d5d8      	bpl.n	802a838 <_printf_float+0x240>
 802a886:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802a88a:	4631      	mov	r1, r6
 802a88c:	4628      	mov	r0, r5
 802a88e:	47b8      	blx	r7
 802a890:	3001      	adds	r0, #1
 802a892:	f43f af0e 	beq.w	802a6b2 <_printf_float+0xba>
 802a896:	f04f 0900 	mov.w	r9, #0
 802a89a:	f104 0a1a 	add.w	sl, r4, #26
 802a89e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a8a0:	425b      	negs	r3, r3
 802a8a2:	454b      	cmp	r3, r9
 802a8a4:	dc01      	bgt.n	802a8aa <_printf_float+0x2b2>
 802a8a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a8a8:	e794      	b.n	802a7d4 <_printf_float+0x1dc>
 802a8aa:	2301      	movs	r3, #1
 802a8ac:	4652      	mov	r2, sl
 802a8ae:	4631      	mov	r1, r6
 802a8b0:	4628      	mov	r0, r5
 802a8b2:	47b8      	blx	r7
 802a8b4:	3001      	adds	r0, #1
 802a8b6:	f43f aefc 	beq.w	802a6b2 <_printf_float+0xba>
 802a8ba:	f109 0901 	add.w	r9, r9, #1
 802a8be:	e7ee      	b.n	802a89e <_printf_float+0x2a6>
 802a8c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802a8c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802a8c4:	429a      	cmp	r2, r3
 802a8c6:	bfa8      	it	ge
 802a8c8:	461a      	movge	r2, r3
 802a8ca:	2a00      	cmp	r2, #0
 802a8cc:	4691      	mov	r9, r2
 802a8ce:	dd07      	ble.n	802a8e0 <_printf_float+0x2e8>
 802a8d0:	4613      	mov	r3, r2
 802a8d2:	4631      	mov	r1, r6
 802a8d4:	4642      	mov	r2, r8
 802a8d6:	4628      	mov	r0, r5
 802a8d8:	47b8      	blx	r7
 802a8da:	3001      	adds	r0, #1
 802a8dc:	f43f aee9 	beq.w	802a6b2 <_printf_float+0xba>
 802a8e0:	f104 031a 	add.w	r3, r4, #26
 802a8e4:	f04f 0b00 	mov.w	fp, #0
 802a8e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802a8ec:	9306      	str	r3, [sp, #24]
 802a8ee:	e015      	b.n	802a91c <_printf_float+0x324>
 802a8f0:	7fefffff 	.word	0x7fefffff
 802a8f4:	0802cd00 	.word	0x0802cd00
 802a8f8:	0802ccfc 	.word	0x0802ccfc
 802a8fc:	0802cd08 	.word	0x0802cd08
 802a900:	0802cd04 	.word	0x0802cd04
 802a904:	0802cd0c 	.word	0x0802cd0c
 802a908:	2301      	movs	r3, #1
 802a90a:	9a06      	ldr	r2, [sp, #24]
 802a90c:	4631      	mov	r1, r6
 802a90e:	4628      	mov	r0, r5
 802a910:	47b8      	blx	r7
 802a912:	3001      	adds	r0, #1
 802a914:	f43f aecd 	beq.w	802a6b2 <_printf_float+0xba>
 802a918:	f10b 0b01 	add.w	fp, fp, #1
 802a91c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 802a920:	ebaa 0309 	sub.w	r3, sl, r9
 802a924:	455b      	cmp	r3, fp
 802a926:	dcef      	bgt.n	802a908 <_printf_float+0x310>
 802a928:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802a92c:	429a      	cmp	r2, r3
 802a92e:	44d0      	add	r8, sl
 802a930:	db15      	blt.n	802a95e <_printf_float+0x366>
 802a932:	6823      	ldr	r3, [r4, #0]
 802a934:	07da      	lsls	r2, r3, #31
 802a936:	d412      	bmi.n	802a95e <_printf_float+0x366>
 802a938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a93a:	9909      	ldr	r1, [sp, #36]	; 0x24
 802a93c:	eba3 020a 	sub.w	r2, r3, sl
 802a940:	eba3 0a01 	sub.w	sl, r3, r1
 802a944:	4592      	cmp	sl, r2
 802a946:	bfa8      	it	ge
 802a948:	4692      	movge	sl, r2
 802a94a:	f1ba 0f00 	cmp.w	sl, #0
 802a94e:	dc0e      	bgt.n	802a96e <_printf_float+0x376>
 802a950:	f04f 0800 	mov.w	r8, #0
 802a954:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802a958:	f104 091a 	add.w	r9, r4, #26
 802a95c:	e019      	b.n	802a992 <_printf_float+0x39a>
 802a95e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802a962:	4631      	mov	r1, r6
 802a964:	4628      	mov	r0, r5
 802a966:	47b8      	blx	r7
 802a968:	3001      	adds	r0, #1
 802a96a:	d1e5      	bne.n	802a938 <_printf_float+0x340>
 802a96c:	e6a1      	b.n	802a6b2 <_printf_float+0xba>
 802a96e:	4653      	mov	r3, sl
 802a970:	4642      	mov	r2, r8
 802a972:	4631      	mov	r1, r6
 802a974:	4628      	mov	r0, r5
 802a976:	47b8      	blx	r7
 802a978:	3001      	adds	r0, #1
 802a97a:	d1e9      	bne.n	802a950 <_printf_float+0x358>
 802a97c:	e699      	b.n	802a6b2 <_printf_float+0xba>
 802a97e:	2301      	movs	r3, #1
 802a980:	464a      	mov	r2, r9
 802a982:	4631      	mov	r1, r6
 802a984:	4628      	mov	r0, r5
 802a986:	47b8      	blx	r7
 802a988:	3001      	adds	r0, #1
 802a98a:	f43f ae92 	beq.w	802a6b2 <_printf_float+0xba>
 802a98e:	f108 0801 	add.w	r8, r8, #1
 802a992:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802a996:	1a9b      	subs	r3, r3, r2
 802a998:	eba3 030a 	sub.w	r3, r3, sl
 802a99c:	4543      	cmp	r3, r8
 802a99e:	dcee      	bgt.n	802a97e <_printf_float+0x386>
 802a9a0:	e74a      	b.n	802a838 <_printf_float+0x240>
 802a9a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802a9a4:	2a01      	cmp	r2, #1
 802a9a6:	dc01      	bgt.n	802a9ac <_printf_float+0x3b4>
 802a9a8:	07db      	lsls	r3, r3, #31
 802a9aa:	d53a      	bpl.n	802aa22 <_printf_float+0x42a>
 802a9ac:	2301      	movs	r3, #1
 802a9ae:	4642      	mov	r2, r8
 802a9b0:	4631      	mov	r1, r6
 802a9b2:	4628      	mov	r0, r5
 802a9b4:	47b8      	blx	r7
 802a9b6:	3001      	adds	r0, #1
 802a9b8:	f43f ae7b 	beq.w	802a6b2 <_printf_float+0xba>
 802a9bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802a9c0:	4631      	mov	r1, r6
 802a9c2:	4628      	mov	r0, r5
 802a9c4:	47b8      	blx	r7
 802a9c6:	3001      	adds	r0, #1
 802a9c8:	f108 0801 	add.w	r8, r8, #1
 802a9cc:	f43f ae71 	beq.w	802a6b2 <_printf_float+0xba>
 802a9d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a9d2:	2200      	movs	r2, #0
 802a9d4:	f103 3aff 	add.w	sl, r3, #4294967295
 802a9d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802a9dc:	2300      	movs	r3, #0
 802a9de:	f7f5 ffab 	bl	8020938 <__aeabi_dcmpeq>
 802a9e2:	b9c8      	cbnz	r0, 802aa18 <_printf_float+0x420>
 802a9e4:	4653      	mov	r3, sl
 802a9e6:	4642      	mov	r2, r8
 802a9e8:	4631      	mov	r1, r6
 802a9ea:	4628      	mov	r0, r5
 802a9ec:	47b8      	blx	r7
 802a9ee:	3001      	adds	r0, #1
 802a9f0:	d10e      	bne.n	802aa10 <_printf_float+0x418>
 802a9f2:	e65e      	b.n	802a6b2 <_printf_float+0xba>
 802a9f4:	2301      	movs	r3, #1
 802a9f6:	4652      	mov	r2, sl
 802a9f8:	4631      	mov	r1, r6
 802a9fa:	4628      	mov	r0, r5
 802a9fc:	47b8      	blx	r7
 802a9fe:	3001      	adds	r0, #1
 802aa00:	f43f ae57 	beq.w	802a6b2 <_printf_float+0xba>
 802aa04:	f108 0801 	add.w	r8, r8, #1
 802aa08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802aa0a:	3b01      	subs	r3, #1
 802aa0c:	4543      	cmp	r3, r8
 802aa0e:	dcf1      	bgt.n	802a9f4 <_printf_float+0x3fc>
 802aa10:	464b      	mov	r3, r9
 802aa12:	f104 0250 	add.w	r2, r4, #80	; 0x50
 802aa16:	e6de      	b.n	802a7d6 <_printf_float+0x1de>
 802aa18:	f04f 0800 	mov.w	r8, #0
 802aa1c:	f104 0a1a 	add.w	sl, r4, #26
 802aa20:	e7f2      	b.n	802aa08 <_printf_float+0x410>
 802aa22:	2301      	movs	r3, #1
 802aa24:	e7df      	b.n	802a9e6 <_printf_float+0x3ee>
 802aa26:	2301      	movs	r3, #1
 802aa28:	464a      	mov	r2, r9
 802aa2a:	4631      	mov	r1, r6
 802aa2c:	4628      	mov	r0, r5
 802aa2e:	47b8      	blx	r7
 802aa30:	3001      	adds	r0, #1
 802aa32:	f43f ae3e 	beq.w	802a6b2 <_printf_float+0xba>
 802aa36:	f108 0801 	add.w	r8, r8, #1
 802aa3a:	68e3      	ldr	r3, [r4, #12]
 802aa3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802aa3e:	1a9b      	subs	r3, r3, r2
 802aa40:	4543      	cmp	r3, r8
 802aa42:	dcf0      	bgt.n	802aa26 <_printf_float+0x42e>
 802aa44:	e6fc      	b.n	802a840 <_printf_float+0x248>
 802aa46:	f04f 0800 	mov.w	r8, #0
 802aa4a:	f104 0919 	add.w	r9, r4, #25
 802aa4e:	e7f4      	b.n	802aa3a <_printf_float+0x442>
 802aa50:	2900      	cmp	r1, #0
 802aa52:	f43f ae8b 	beq.w	802a76c <_printf_float+0x174>
 802aa56:	2300      	movs	r3, #0
 802aa58:	e9cd 0302 	strd	r0, r3, [sp, #8]
 802aa5c:	ab09      	add	r3, sp, #36	; 0x24
 802aa5e:	9300      	str	r3, [sp, #0]
 802aa60:	ec49 8b10 	vmov	d0, r8, r9
 802aa64:	6022      	str	r2, [r4, #0]
 802aa66:	f8cd a004 	str.w	sl, [sp, #4]
 802aa6a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 802aa6e:	4628      	mov	r0, r5
 802aa70:	f7ff fd2d 	bl	802a4ce <__cvt>
 802aa74:	4680      	mov	r8, r0
 802aa76:	e648      	b.n	802a70a <_printf_float+0x112>

0802aa78 <_printf_common>:
 802aa78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802aa7c:	4691      	mov	r9, r2
 802aa7e:	461f      	mov	r7, r3
 802aa80:	688a      	ldr	r2, [r1, #8]
 802aa82:	690b      	ldr	r3, [r1, #16]
 802aa84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802aa88:	4293      	cmp	r3, r2
 802aa8a:	bfb8      	it	lt
 802aa8c:	4613      	movlt	r3, r2
 802aa8e:	f8c9 3000 	str.w	r3, [r9]
 802aa92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802aa96:	4606      	mov	r6, r0
 802aa98:	460c      	mov	r4, r1
 802aa9a:	b112      	cbz	r2, 802aaa2 <_printf_common+0x2a>
 802aa9c:	3301      	adds	r3, #1
 802aa9e:	f8c9 3000 	str.w	r3, [r9]
 802aaa2:	6823      	ldr	r3, [r4, #0]
 802aaa4:	0699      	lsls	r1, r3, #26
 802aaa6:	bf42      	ittt	mi
 802aaa8:	f8d9 3000 	ldrmi.w	r3, [r9]
 802aaac:	3302      	addmi	r3, #2
 802aaae:	f8c9 3000 	strmi.w	r3, [r9]
 802aab2:	6825      	ldr	r5, [r4, #0]
 802aab4:	f015 0506 	ands.w	r5, r5, #6
 802aab8:	d107      	bne.n	802aaca <_printf_common+0x52>
 802aaba:	f104 0a19 	add.w	sl, r4, #25
 802aabe:	68e3      	ldr	r3, [r4, #12]
 802aac0:	f8d9 2000 	ldr.w	r2, [r9]
 802aac4:	1a9b      	subs	r3, r3, r2
 802aac6:	42ab      	cmp	r3, r5
 802aac8:	dc28      	bgt.n	802ab1c <_printf_common+0xa4>
 802aaca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802aace:	6822      	ldr	r2, [r4, #0]
 802aad0:	3300      	adds	r3, #0
 802aad2:	bf18      	it	ne
 802aad4:	2301      	movne	r3, #1
 802aad6:	0692      	lsls	r2, r2, #26
 802aad8:	d42d      	bmi.n	802ab36 <_printf_common+0xbe>
 802aada:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802aade:	4639      	mov	r1, r7
 802aae0:	4630      	mov	r0, r6
 802aae2:	47c0      	blx	r8
 802aae4:	3001      	adds	r0, #1
 802aae6:	d020      	beq.n	802ab2a <_printf_common+0xb2>
 802aae8:	6823      	ldr	r3, [r4, #0]
 802aaea:	68e5      	ldr	r5, [r4, #12]
 802aaec:	f8d9 2000 	ldr.w	r2, [r9]
 802aaf0:	f003 0306 	and.w	r3, r3, #6
 802aaf4:	2b04      	cmp	r3, #4
 802aaf6:	bf08      	it	eq
 802aaf8:	1aad      	subeq	r5, r5, r2
 802aafa:	68a3      	ldr	r3, [r4, #8]
 802aafc:	6922      	ldr	r2, [r4, #16]
 802aafe:	bf0c      	ite	eq
 802ab00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802ab04:	2500      	movne	r5, #0
 802ab06:	4293      	cmp	r3, r2
 802ab08:	bfc4      	itt	gt
 802ab0a:	1a9b      	subgt	r3, r3, r2
 802ab0c:	18ed      	addgt	r5, r5, r3
 802ab0e:	f04f 0900 	mov.w	r9, #0
 802ab12:	341a      	adds	r4, #26
 802ab14:	454d      	cmp	r5, r9
 802ab16:	d11a      	bne.n	802ab4e <_printf_common+0xd6>
 802ab18:	2000      	movs	r0, #0
 802ab1a:	e008      	b.n	802ab2e <_printf_common+0xb6>
 802ab1c:	2301      	movs	r3, #1
 802ab1e:	4652      	mov	r2, sl
 802ab20:	4639      	mov	r1, r7
 802ab22:	4630      	mov	r0, r6
 802ab24:	47c0      	blx	r8
 802ab26:	3001      	adds	r0, #1
 802ab28:	d103      	bne.n	802ab32 <_printf_common+0xba>
 802ab2a:	f04f 30ff 	mov.w	r0, #4294967295
 802ab2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ab32:	3501      	adds	r5, #1
 802ab34:	e7c3      	b.n	802aabe <_printf_common+0x46>
 802ab36:	18e1      	adds	r1, r4, r3
 802ab38:	1c5a      	adds	r2, r3, #1
 802ab3a:	2030      	movs	r0, #48	; 0x30
 802ab3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802ab40:	4422      	add	r2, r4
 802ab42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802ab46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802ab4a:	3302      	adds	r3, #2
 802ab4c:	e7c5      	b.n	802aada <_printf_common+0x62>
 802ab4e:	2301      	movs	r3, #1
 802ab50:	4622      	mov	r2, r4
 802ab52:	4639      	mov	r1, r7
 802ab54:	4630      	mov	r0, r6
 802ab56:	47c0      	blx	r8
 802ab58:	3001      	adds	r0, #1
 802ab5a:	d0e6      	beq.n	802ab2a <_printf_common+0xb2>
 802ab5c:	f109 0901 	add.w	r9, r9, #1
 802ab60:	e7d8      	b.n	802ab14 <_printf_common+0x9c>
	...

0802ab64 <_printf_i>:
 802ab64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802ab68:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 802ab6c:	460c      	mov	r4, r1
 802ab6e:	7e09      	ldrb	r1, [r1, #24]
 802ab70:	b085      	sub	sp, #20
 802ab72:	296e      	cmp	r1, #110	; 0x6e
 802ab74:	4617      	mov	r7, r2
 802ab76:	4606      	mov	r6, r0
 802ab78:	4698      	mov	r8, r3
 802ab7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802ab7c:	f000 80b3 	beq.w	802ace6 <_printf_i+0x182>
 802ab80:	d822      	bhi.n	802abc8 <_printf_i+0x64>
 802ab82:	2963      	cmp	r1, #99	; 0x63
 802ab84:	d036      	beq.n	802abf4 <_printf_i+0x90>
 802ab86:	d80a      	bhi.n	802ab9e <_printf_i+0x3a>
 802ab88:	2900      	cmp	r1, #0
 802ab8a:	f000 80b9 	beq.w	802ad00 <_printf_i+0x19c>
 802ab8e:	2958      	cmp	r1, #88	; 0x58
 802ab90:	f000 8083 	beq.w	802ac9a <_printf_i+0x136>
 802ab94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802ab98:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 802ab9c:	e032      	b.n	802ac04 <_printf_i+0xa0>
 802ab9e:	2964      	cmp	r1, #100	; 0x64
 802aba0:	d001      	beq.n	802aba6 <_printf_i+0x42>
 802aba2:	2969      	cmp	r1, #105	; 0x69
 802aba4:	d1f6      	bne.n	802ab94 <_printf_i+0x30>
 802aba6:	6820      	ldr	r0, [r4, #0]
 802aba8:	6813      	ldr	r3, [r2, #0]
 802abaa:	0605      	lsls	r5, r0, #24
 802abac:	f103 0104 	add.w	r1, r3, #4
 802abb0:	d52a      	bpl.n	802ac08 <_printf_i+0xa4>
 802abb2:	681b      	ldr	r3, [r3, #0]
 802abb4:	6011      	str	r1, [r2, #0]
 802abb6:	2b00      	cmp	r3, #0
 802abb8:	da03      	bge.n	802abc2 <_printf_i+0x5e>
 802abba:	222d      	movs	r2, #45	; 0x2d
 802abbc:	425b      	negs	r3, r3
 802abbe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802abc2:	486f      	ldr	r0, [pc, #444]	; (802ad80 <_printf_i+0x21c>)
 802abc4:	220a      	movs	r2, #10
 802abc6:	e039      	b.n	802ac3c <_printf_i+0xd8>
 802abc8:	2973      	cmp	r1, #115	; 0x73
 802abca:	f000 809d 	beq.w	802ad08 <_printf_i+0x1a4>
 802abce:	d808      	bhi.n	802abe2 <_printf_i+0x7e>
 802abd0:	296f      	cmp	r1, #111	; 0x6f
 802abd2:	d020      	beq.n	802ac16 <_printf_i+0xb2>
 802abd4:	2970      	cmp	r1, #112	; 0x70
 802abd6:	d1dd      	bne.n	802ab94 <_printf_i+0x30>
 802abd8:	6823      	ldr	r3, [r4, #0]
 802abda:	f043 0320 	orr.w	r3, r3, #32
 802abde:	6023      	str	r3, [r4, #0]
 802abe0:	e003      	b.n	802abea <_printf_i+0x86>
 802abe2:	2975      	cmp	r1, #117	; 0x75
 802abe4:	d017      	beq.n	802ac16 <_printf_i+0xb2>
 802abe6:	2978      	cmp	r1, #120	; 0x78
 802abe8:	d1d4      	bne.n	802ab94 <_printf_i+0x30>
 802abea:	2378      	movs	r3, #120	; 0x78
 802abec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802abf0:	4864      	ldr	r0, [pc, #400]	; (802ad84 <_printf_i+0x220>)
 802abf2:	e055      	b.n	802aca0 <_printf_i+0x13c>
 802abf4:	6813      	ldr	r3, [r2, #0]
 802abf6:	1d19      	adds	r1, r3, #4
 802abf8:	681b      	ldr	r3, [r3, #0]
 802abfa:	6011      	str	r1, [r2, #0]
 802abfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802ac00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802ac04:	2301      	movs	r3, #1
 802ac06:	e08c      	b.n	802ad22 <_printf_i+0x1be>
 802ac08:	681b      	ldr	r3, [r3, #0]
 802ac0a:	6011      	str	r1, [r2, #0]
 802ac0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 802ac10:	bf18      	it	ne
 802ac12:	b21b      	sxthne	r3, r3
 802ac14:	e7cf      	b.n	802abb6 <_printf_i+0x52>
 802ac16:	6813      	ldr	r3, [r2, #0]
 802ac18:	6825      	ldr	r5, [r4, #0]
 802ac1a:	1d18      	adds	r0, r3, #4
 802ac1c:	6010      	str	r0, [r2, #0]
 802ac1e:	0628      	lsls	r0, r5, #24
 802ac20:	d501      	bpl.n	802ac26 <_printf_i+0xc2>
 802ac22:	681b      	ldr	r3, [r3, #0]
 802ac24:	e002      	b.n	802ac2c <_printf_i+0xc8>
 802ac26:	0668      	lsls	r0, r5, #25
 802ac28:	d5fb      	bpl.n	802ac22 <_printf_i+0xbe>
 802ac2a:	881b      	ldrh	r3, [r3, #0]
 802ac2c:	4854      	ldr	r0, [pc, #336]	; (802ad80 <_printf_i+0x21c>)
 802ac2e:	296f      	cmp	r1, #111	; 0x6f
 802ac30:	bf14      	ite	ne
 802ac32:	220a      	movne	r2, #10
 802ac34:	2208      	moveq	r2, #8
 802ac36:	2100      	movs	r1, #0
 802ac38:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802ac3c:	6865      	ldr	r5, [r4, #4]
 802ac3e:	60a5      	str	r5, [r4, #8]
 802ac40:	2d00      	cmp	r5, #0
 802ac42:	f2c0 8095 	blt.w	802ad70 <_printf_i+0x20c>
 802ac46:	6821      	ldr	r1, [r4, #0]
 802ac48:	f021 0104 	bic.w	r1, r1, #4
 802ac4c:	6021      	str	r1, [r4, #0]
 802ac4e:	2b00      	cmp	r3, #0
 802ac50:	d13d      	bne.n	802acce <_printf_i+0x16a>
 802ac52:	2d00      	cmp	r5, #0
 802ac54:	f040 808e 	bne.w	802ad74 <_printf_i+0x210>
 802ac58:	4665      	mov	r5, ip
 802ac5a:	2a08      	cmp	r2, #8
 802ac5c:	d10b      	bne.n	802ac76 <_printf_i+0x112>
 802ac5e:	6823      	ldr	r3, [r4, #0]
 802ac60:	07db      	lsls	r3, r3, #31
 802ac62:	d508      	bpl.n	802ac76 <_printf_i+0x112>
 802ac64:	6923      	ldr	r3, [r4, #16]
 802ac66:	6862      	ldr	r2, [r4, #4]
 802ac68:	429a      	cmp	r2, r3
 802ac6a:	bfde      	ittt	le
 802ac6c:	2330      	movle	r3, #48	; 0x30
 802ac6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 802ac72:	f105 35ff 	addle.w	r5, r5, #4294967295
 802ac76:	ebac 0305 	sub.w	r3, ip, r5
 802ac7a:	6123      	str	r3, [r4, #16]
 802ac7c:	f8cd 8000 	str.w	r8, [sp]
 802ac80:	463b      	mov	r3, r7
 802ac82:	aa03      	add	r2, sp, #12
 802ac84:	4621      	mov	r1, r4
 802ac86:	4630      	mov	r0, r6
 802ac88:	f7ff fef6 	bl	802aa78 <_printf_common>
 802ac8c:	3001      	adds	r0, #1
 802ac8e:	d14d      	bne.n	802ad2c <_printf_i+0x1c8>
 802ac90:	f04f 30ff 	mov.w	r0, #4294967295
 802ac94:	b005      	add	sp, #20
 802ac96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802ac9a:	4839      	ldr	r0, [pc, #228]	; (802ad80 <_printf_i+0x21c>)
 802ac9c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 802aca0:	6813      	ldr	r3, [r2, #0]
 802aca2:	6821      	ldr	r1, [r4, #0]
 802aca4:	1d1d      	adds	r5, r3, #4
 802aca6:	681b      	ldr	r3, [r3, #0]
 802aca8:	6015      	str	r5, [r2, #0]
 802acaa:	060a      	lsls	r2, r1, #24
 802acac:	d50b      	bpl.n	802acc6 <_printf_i+0x162>
 802acae:	07ca      	lsls	r2, r1, #31
 802acb0:	bf44      	itt	mi
 802acb2:	f041 0120 	orrmi.w	r1, r1, #32
 802acb6:	6021      	strmi	r1, [r4, #0]
 802acb8:	b91b      	cbnz	r3, 802acc2 <_printf_i+0x15e>
 802acba:	6822      	ldr	r2, [r4, #0]
 802acbc:	f022 0220 	bic.w	r2, r2, #32
 802acc0:	6022      	str	r2, [r4, #0]
 802acc2:	2210      	movs	r2, #16
 802acc4:	e7b7      	b.n	802ac36 <_printf_i+0xd2>
 802acc6:	064d      	lsls	r5, r1, #25
 802acc8:	bf48      	it	mi
 802acca:	b29b      	uxthmi	r3, r3
 802accc:	e7ef      	b.n	802acae <_printf_i+0x14a>
 802acce:	4665      	mov	r5, ip
 802acd0:	fbb3 f1f2 	udiv	r1, r3, r2
 802acd4:	fb02 3311 	mls	r3, r2, r1, r3
 802acd8:	5cc3      	ldrb	r3, [r0, r3]
 802acda:	f805 3d01 	strb.w	r3, [r5, #-1]!
 802acde:	460b      	mov	r3, r1
 802ace0:	2900      	cmp	r1, #0
 802ace2:	d1f5      	bne.n	802acd0 <_printf_i+0x16c>
 802ace4:	e7b9      	b.n	802ac5a <_printf_i+0xf6>
 802ace6:	6813      	ldr	r3, [r2, #0]
 802ace8:	6825      	ldr	r5, [r4, #0]
 802acea:	6961      	ldr	r1, [r4, #20]
 802acec:	1d18      	adds	r0, r3, #4
 802acee:	6010      	str	r0, [r2, #0]
 802acf0:	0628      	lsls	r0, r5, #24
 802acf2:	681b      	ldr	r3, [r3, #0]
 802acf4:	d501      	bpl.n	802acfa <_printf_i+0x196>
 802acf6:	6019      	str	r1, [r3, #0]
 802acf8:	e002      	b.n	802ad00 <_printf_i+0x19c>
 802acfa:	066a      	lsls	r2, r5, #25
 802acfc:	d5fb      	bpl.n	802acf6 <_printf_i+0x192>
 802acfe:	8019      	strh	r1, [r3, #0]
 802ad00:	2300      	movs	r3, #0
 802ad02:	6123      	str	r3, [r4, #16]
 802ad04:	4665      	mov	r5, ip
 802ad06:	e7b9      	b.n	802ac7c <_printf_i+0x118>
 802ad08:	6813      	ldr	r3, [r2, #0]
 802ad0a:	1d19      	adds	r1, r3, #4
 802ad0c:	6011      	str	r1, [r2, #0]
 802ad0e:	681d      	ldr	r5, [r3, #0]
 802ad10:	6862      	ldr	r2, [r4, #4]
 802ad12:	2100      	movs	r1, #0
 802ad14:	4628      	mov	r0, r5
 802ad16:	f7f5 f99b 	bl	8020050 <memchr>
 802ad1a:	b108      	cbz	r0, 802ad20 <_printf_i+0x1bc>
 802ad1c:	1b40      	subs	r0, r0, r5
 802ad1e:	6060      	str	r0, [r4, #4]
 802ad20:	6863      	ldr	r3, [r4, #4]
 802ad22:	6123      	str	r3, [r4, #16]
 802ad24:	2300      	movs	r3, #0
 802ad26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802ad2a:	e7a7      	b.n	802ac7c <_printf_i+0x118>
 802ad2c:	6923      	ldr	r3, [r4, #16]
 802ad2e:	462a      	mov	r2, r5
 802ad30:	4639      	mov	r1, r7
 802ad32:	4630      	mov	r0, r6
 802ad34:	47c0      	blx	r8
 802ad36:	3001      	adds	r0, #1
 802ad38:	d0aa      	beq.n	802ac90 <_printf_i+0x12c>
 802ad3a:	6823      	ldr	r3, [r4, #0]
 802ad3c:	079b      	lsls	r3, r3, #30
 802ad3e:	d413      	bmi.n	802ad68 <_printf_i+0x204>
 802ad40:	68e0      	ldr	r0, [r4, #12]
 802ad42:	9b03      	ldr	r3, [sp, #12]
 802ad44:	4298      	cmp	r0, r3
 802ad46:	bfb8      	it	lt
 802ad48:	4618      	movlt	r0, r3
 802ad4a:	e7a3      	b.n	802ac94 <_printf_i+0x130>
 802ad4c:	2301      	movs	r3, #1
 802ad4e:	464a      	mov	r2, r9
 802ad50:	4639      	mov	r1, r7
 802ad52:	4630      	mov	r0, r6
 802ad54:	47c0      	blx	r8
 802ad56:	3001      	adds	r0, #1
 802ad58:	d09a      	beq.n	802ac90 <_printf_i+0x12c>
 802ad5a:	3501      	adds	r5, #1
 802ad5c:	68e3      	ldr	r3, [r4, #12]
 802ad5e:	9a03      	ldr	r2, [sp, #12]
 802ad60:	1a9b      	subs	r3, r3, r2
 802ad62:	42ab      	cmp	r3, r5
 802ad64:	dcf2      	bgt.n	802ad4c <_printf_i+0x1e8>
 802ad66:	e7eb      	b.n	802ad40 <_printf_i+0x1dc>
 802ad68:	2500      	movs	r5, #0
 802ad6a:	f104 0919 	add.w	r9, r4, #25
 802ad6e:	e7f5      	b.n	802ad5c <_printf_i+0x1f8>
 802ad70:	2b00      	cmp	r3, #0
 802ad72:	d1ac      	bne.n	802acce <_printf_i+0x16a>
 802ad74:	7803      	ldrb	r3, [r0, #0]
 802ad76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802ad7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802ad7e:	e76c      	b.n	802ac5a <_printf_i+0xf6>
 802ad80:	0802cd0e 	.word	0x0802cd0e
 802ad84:	0802cd1f 	.word	0x0802cd1f

0802ad88 <iprintf>:
 802ad88:	b40f      	push	{r0, r1, r2, r3}
 802ad8a:	4b0a      	ldr	r3, [pc, #40]	; (802adb4 <iprintf+0x2c>)
 802ad8c:	b513      	push	{r0, r1, r4, lr}
 802ad8e:	681c      	ldr	r4, [r3, #0]
 802ad90:	b124      	cbz	r4, 802ad9c <iprintf+0x14>
 802ad92:	69a3      	ldr	r3, [r4, #24]
 802ad94:	b913      	cbnz	r3, 802ad9c <iprintf+0x14>
 802ad96:	4620      	mov	r0, r4
 802ad98:	f001 f866 	bl	802be68 <__sinit>
 802ad9c:	ab05      	add	r3, sp, #20
 802ad9e:	9a04      	ldr	r2, [sp, #16]
 802ada0:	68a1      	ldr	r1, [r4, #8]
 802ada2:	9301      	str	r3, [sp, #4]
 802ada4:	4620      	mov	r0, r4
 802ada6:	f001 fd1f 	bl	802c7e8 <_vfiprintf_r>
 802adaa:	b002      	add	sp, #8
 802adac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802adb0:	b004      	add	sp, #16
 802adb2:	4770      	bx	lr
 802adb4:	20000010 	.word	0x20000010

0802adb8 <_puts_r>:
 802adb8:	b570      	push	{r4, r5, r6, lr}
 802adba:	460e      	mov	r6, r1
 802adbc:	4605      	mov	r5, r0
 802adbe:	b118      	cbz	r0, 802adc8 <_puts_r+0x10>
 802adc0:	6983      	ldr	r3, [r0, #24]
 802adc2:	b90b      	cbnz	r3, 802adc8 <_puts_r+0x10>
 802adc4:	f001 f850 	bl	802be68 <__sinit>
 802adc8:	69ab      	ldr	r3, [r5, #24]
 802adca:	68ac      	ldr	r4, [r5, #8]
 802adcc:	b913      	cbnz	r3, 802add4 <_puts_r+0x1c>
 802adce:	4628      	mov	r0, r5
 802add0:	f001 f84a 	bl	802be68 <__sinit>
 802add4:	4b23      	ldr	r3, [pc, #140]	; (802ae64 <_puts_r+0xac>)
 802add6:	429c      	cmp	r4, r3
 802add8:	d117      	bne.n	802ae0a <_puts_r+0x52>
 802adda:	686c      	ldr	r4, [r5, #4]
 802addc:	89a3      	ldrh	r3, [r4, #12]
 802adde:	071b      	lsls	r3, r3, #28
 802ade0:	d51d      	bpl.n	802ae1e <_puts_r+0x66>
 802ade2:	6923      	ldr	r3, [r4, #16]
 802ade4:	b1db      	cbz	r3, 802ae1e <_puts_r+0x66>
 802ade6:	3e01      	subs	r6, #1
 802ade8:	68a3      	ldr	r3, [r4, #8]
 802adea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802adee:	3b01      	subs	r3, #1
 802adf0:	60a3      	str	r3, [r4, #8]
 802adf2:	b9e9      	cbnz	r1, 802ae30 <_puts_r+0x78>
 802adf4:	2b00      	cmp	r3, #0
 802adf6:	da2e      	bge.n	802ae56 <_puts_r+0x9e>
 802adf8:	4622      	mov	r2, r4
 802adfa:	210a      	movs	r1, #10
 802adfc:	4628      	mov	r0, r5
 802adfe:	f000 f83f 	bl	802ae80 <__swbuf_r>
 802ae02:	3001      	adds	r0, #1
 802ae04:	d011      	beq.n	802ae2a <_puts_r+0x72>
 802ae06:	200a      	movs	r0, #10
 802ae08:	e011      	b.n	802ae2e <_puts_r+0x76>
 802ae0a:	4b17      	ldr	r3, [pc, #92]	; (802ae68 <_puts_r+0xb0>)
 802ae0c:	429c      	cmp	r4, r3
 802ae0e:	d101      	bne.n	802ae14 <_puts_r+0x5c>
 802ae10:	68ac      	ldr	r4, [r5, #8]
 802ae12:	e7e3      	b.n	802addc <_puts_r+0x24>
 802ae14:	4b15      	ldr	r3, [pc, #84]	; (802ae6c <_puts_r+0xb4>)
 802ae16:	429c      	cmp	r4, r3
 802ae18:	bf08      	it	eq
 802ae1a:	68ec      	ldreq	r4, [r5, #12]
 802ae1c:	e7de      	b.n	802addc <_puts_r+0x24>
 802ae1e:	4621      	mov	r1, r4
 802ae20:	4628      	mov	r0, r5
 802ae22:	f000 f87f 	bl	802af24 <__swsetup_r>
 802ae26:	2800      	cmp	r0, #0
 802ae28:	d0dd      	beq.n	802ade6 <_puts_r+0x2e>
 802ae2a:	f04f 30ff 	mov.w	r0, #4294967295
 802ae2e:	bd70      	pop	{r4, r5, r6, pc}
 802ae30:	2b00      	cmp	r3, #0
 802ae32:	da04      	bge.n	802ae3e <_puts_r+0x86>
 802ae34:	69a2      	ldr	r2, [r4, #24]
 802ae36:	429a      	cmp	r2, r3
 802ae38:	dc06      	bgt.n	802ae48 <_puts_r+0x90>
 802ae3a:	290a      	cmp	r1, #10
 802ae3c:	d004      	beq.n	802ae48 <_puts_r+0x90>
 802ae3e:	6823      	ldr	r3, [r4, #0]
 802ae40:	1c5a      	adds	r2, r3, #1
 802ae42:	6022      	str	r2, [r4, #0]
 802ae44:	7019      	strb	r1, [r3, #0]
 802ae46:	e7cf      	b.n	802ade8 <_puts_r+0x30>
 802ae48:	4622      	mov	r2, r4
 802ae4a:	4628      	mov	r0, r5
 802ae4c:	f000 f818 	bl	802ae80 <__swbuf_r>
 802ae50:	3001      	adds	r0, #1
 802ae52:	d1c9      	bne.n	802ade8 <_puts_r+0x30>
 802ae54:	e7e9      	b.n	802ae2a <_puts_r+0x72>
 802ae56:	6823      	ldr	r3, [r4, #0]
 802ae58:	200a      	movs	r0, #10
 802ae5a:	1c5a      	adds	r2, r3, #1
 802ae5c:	6022      	str	r2, [r4, #0]
 802ae5e:	7018      	strb	r0, [r3, #0]
 802ae60:	e7e5      	b.n	802ae2e <_puts_r+0x76>
 802ae62:	bf00      	nop
 802ae64:	0802cd60 	.word	0x0802cd60
 802ae68:	0802cd80 	.word	0x0802cd80
 802ae6c:	0802cd40 	.word	0x0802cd40

0802ae70 <puts>:
 802ae70:	4b02      	ldr	r3, [pc, #8]	; (802ae7c <puts+0xc>)
 802ae72:	4601      	mov	r1, r0
 802ae74:	6818      	ldr	r0, [r3, #0]
 802ae76:	f7ff bf9f 	b.w	802adb8 <_puts_r>
 802ae7a:	bf00      	nop
 802ae7c:	20000010 	.word	0x20000010

0802ae80 <__swbuf_r>:
 802ae80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ae82:	460e      	mov	r6, r1
 802ae84:	4614      	mov	r4, r2
 802ae86:	4605      	mov	r5, r0
 802ae88:	b118      	cbz	r0, 802ae92 <__swbuf_r+0x12>
 802ae8a:	6983      	ldr	r3, [r0, #24]
 802ae8c:	b90b      	cbnz	r3, 802ae92 <__swbuf_r+0x12>
 802ae8e:	f000 ffeb 	bl	802be68 <__sinit>
 802ae92:	4b21      	ldr	r3, [pc, #132]	; (802af18 <__swbuf_r+0x98>)
 802ae94:	429c      	cmp	r4, r3
 802ae96:	d12a      	bne.n	802aeee <__swbuf_r+0x6e>
 802ae98:	686c      	ldr	r4, [r5, #4]
 802ae9a:	69a3      	ldr	r3, [r4, #24]
 802ae9c:	60a3      	str	r3, [r4, #8]
 802ae9e:	89a3      	ldrh	r3, [r4, #12]
 802aea0:	071a      	lsls	r2, r3, #28
 802aea2:	d52e      	bpl.n	802af02 <__swbuf_r+0x82>
 802aea4:	6923      	ldr	r3, [r4, #16]
 802aea6:	b363      	cbz	r3, 802af02 <__swbuf_r+0x82>
 802aea8:	6923      	ldr	r3, [r4, #16]
 802aeaa:	6820      	ldr	r0, [r4, #0]
 802aeac:	1ac0      	subs	r0, r0, r3
 802aeae:	6963      	ldr	r3, [r4, #20]
 802aeb0:	b2f6      	uxtb	r6, r6
 802aeb2:	4283      	cmp	r3, r0
 802aeb4:	4637      	mov	r7, r6
 802aeb6:	dc04      	bgt.n	802aec2 <__swbuf_r+0x42>
 802aeb8:	4621      	mov	r1, r4
 802aeba:	4628      	mov	r0, r5
 802aebc:	f000 ff6a 	bl	802bd94 <_fflush_r>
 802aec0:	bb28      	cbnz	r0, 802af0e <__swbuf_r+0x8e>
 802aec2:	68a3      	ldr	r3, [r4, #8]
 802aec4:	3b01      	subs	r3, #1
 802aec6:	60a3      	str	r3, [r4, #8]
 802aec8:	6823      	ldr	r3, [r4, #0]
 802aeca:	1c5a      	adds	r2, r3, #1
 802aecc:	6022      	str	r2, [r4, #0]
 802aece:	701e      	strb	r6, [r3, #0]
 802aed0:	6963      	ldr	r3, [r4, #20]
 802aed2:	3001      	adds	r0, #1
 802aed4:	4283      	cmp	r3, r0
 802aed6:	d004      	beq.n	802aee2 <__swbuf_r+0x62>
 802aed8:	89a3      	ldrh	r3, [r4, #12]
 802aeda:	07db      	lsls	r3, r3, #31
 802aedc:	d519      	bpl.n	802af12 <__swbuf_r+0x92>
 802aede:	2e0a      	cmp	r6, #10
 802aee0:	d117      	bne.n	802af12 <__swbuf_r+0x92>
 802aee2:	4621      	mov	r1, r4
 802aee4:	4628      	mov	r0, r5
 802aee6:	f000 ff55 	bl	802bd94 <_fflush_r>
 802aeea:	b190      	cbz	r0, 802af12 <__swbuf_r+0x92>
 802aeec:	e00f      	b.n	802af0e <__swbuf_r+0x8e>
 802aeee:	4b0b      	ldr	r3, [pc, #44]	; (802af1c <__swbuf_r+0x9c>)
 802aef0:	429c      	cmp	r4, r3
 802aef2:	d101      	bne.n	802aef8 <__swbuf_r+0x78>
 802aef4:	68ac      	ldr	r4, [r5, #8]
 802aef6:	e7d0      	b.n	802ae9a <__swbuf_r+0x1a>
 802aef8:	4b09      	ldr	r3, [pc, #36]	; (802af20 <__swbuf_r+0xa0>)
 802aefa:	429c      	cmp	r4, r3
 802aefc:	bf08      	it	eq
 802aefe:	68ec      	ldreq	r4, [r5, #12]
 802af00:	e7cb      	b.n	802ae9a <__swbuf_r+0x1a>
 802af02:	4621      	mov	r1, r4
 802af04:	4628      	mov	r0, r5
 802af06:	f000 f80d 	bl	802af24 <__swsetup_r>
 802af0a:	2800      	cmp	r0, #0
 802af0c:	d0cc      	beq.n	802aea8 <__swbuf_r+0x28>
 802af0e:	f04f 37ff 	mov.w	r7, #4294967295
 802af12:	4638      	mov	r0, r7
 802af14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802af16:	bf00      	nop
 802af18:	0802cd60 	.word	0x0802cd60
 802af1c:	0802cd80 	.word	0x0802cd80
 802af20:	0802cd40 	.word	0x0802cd40

0802af24 <__swsetup_r>:
 802af24:	4b32      	ldr	r3, [pc, #200]	; (802aff0 <__swsetup_r+0xcc>)
 802af26:	b570      	push	{r4, r5, r6, lr}
 802af28:	681d      	ldr	r5, [r3, #0]
 802af2a:	4606      	mov	r6, r0
 802af2c:	460c      	mov	r4, r1
 802af2e:	b125      	cbz	r5, 802af3a <__swsetup_r+0x16>
 802af30:	69ab      	ldr	r3, [r5, #24]
 802af32:	b913      	cbnz	r3, 802af3a <__swsetup_r+0x16>
 802af34:	4628      	mov	r0, r5
 802af36:	f000 ff97 	bl	802be68 <__sinit>
 802af3a:	4b2e      	ldr	r3, [pc, #184]	; (802aff4 <__swsetup_r+0xd0>)
 802af3c:	429c      	cmp	r4, r3
 802af3e:	d10f      	bne.n	802af60 <__swsetup_r+0x3c>
 802af40:	686c      	ldr	r4, [r5, #4]
 802af42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802af46:	b29a      	uxth	r2, r3
 802af48:	0715      	lsls	r5, r2, #28
 802af4a:	d42c      	bmi.n	802afa6 <__swsetup_r+0x82>
 802af4c:	06d0      	lsls	r0, r2, #27
 802af4e:	d411      	bmi.n	802af74 <__swsetup_r+0x50>
 802af50:	2209      	movs	r2, #9
 802af52:	6032      	str	r2, [r6, #0]
 802af54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802af58:	81a3      	strh	r3, [r4, #12]
 802af5a:	f04f 30ff 	mov.w	r0, #4294967295
 802af5e:	e03e      	b.n	802afde <__swsetup_r+0xba>
 802af60:	4b25      	ldr	r3, [pc, #148]	; (802aff8 <__swsetup_r+0xd4>)
 802af62:	429c      	cmp	r4, r3
 802af64:	d101      	bne.n	802af6a <__swsetup_r+0x46>
 802af66:	68ac      	ldr	r4, [r5, #8]
 802af68:	e7eb      	b.n	802af42 <__swsetup_r+0x1e>
 802af6a:	4b24      	ldr	r3, [pc, #144]	; (802affc <__swsetup_r+0xd8>)
 802af6c:	429c      	cmp	r4, r3
 802af6e:	bf08      	it	eq
 802af70:	68ec      	ldreq	r4, [r5, #12]
 802af72:	e7e6      	b.n	802af42 <__swsetup_r+0x1e>
 802af74:	0751      	lsls	r1, r2, #29
 802af76:	d512      	bpl.n	802af9e <__swsetup_r+0x7a>
 802af78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802af7a:	b141      	cbz	r1, 802af8e <__swsetup_r+0x6a>
 802af7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802af80:	4299      	cmp	r1, r3
 802af82:	d002      	beq.n	802af8a <__swsetup_r+0x66>
 802af84:	4630      	mov	r0, r6
 802af86:	f001 fb5d 	bl	802c644 <_free_r>
 802af8a:	2300      	movs	r3, #0
 802af8c:	6363      	str	r3, [r4, #52]	; 0x34
 802af8e:	89a3      	ldrh	r3, [r4, #12]
 802af90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802af94:	81a3      	strh	r3, [r4, #12]
 802af96:	2300      	movs	r3, #0
 802af98:	6063      	str	r3, [r4, #4]
 802af9a:	6923      	ldr	r3, [r4, #16]
 802af9c:	6023      	str	r3, [r4, #0]
 802af9e:	89a3      	ldrh	r3, [r4, #12]
 802afa0:	f043 0308 	orr.w	r3, r3, #8
 802afa4:	81a3      	strh	r3, [r4, #12]
 802afa6:	6923      	ldr	r3, [r4, #16]
 802afa8:	b94b      	cbnz	r3, 802afbe <__swsetup_r+0x9a>
 802afaa:	89a3      	ldrh	r3, [r4, #12]
 802afac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802afb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802afb4:	d003      	beq.n	802afbe <__swsetup_r+0x9a>
 802afb6:	4621      	mov	r1, r4
 802afb8:	4630      	mov	r0, r6
 802afba:	f001 f811 	bl	802bfe0 <__smakebuf_r>
 802afbe:	89a2      	ldrh	r2, [r4, #12]
 802afc0:	f012 0301 	ands.w	r3, r2, #1
 802afc4:	d00c      	beq.n	802afe0 <__swsetup_r+0xbc>
 802afc6:	2300      	movs	r3, #0
 802afc8:	60a3      	str	r3, [r4, #8]
 802afca:	6963      	ldr	r3, [r4, #20]
 802afcc:	425b      	negs	r3, r3
 802afce:	61a3      	str	r3, [r4, #24]
 802afd0:	6923      	ldr	r3, [r4, #16]
 802afd2:	b953      	cbnz	r3, 802afea <__swsetup_r+0xc6>
 802afd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802afd8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 802afdc:	d1ba      	bne.n	802af54 <__swsetup_r+0x30>
 802afde:	bd70      	pop	{r4, r5, r6, pc}
 802afe0:	0792      	lsls	r2, r2, #30
 802afe2:	bf58      	it	pl
 802afe4:	6963      	ldrpl	r3, [r4, #20]
 802afe6:	60a3      	str	r3, [r4, #8]
 802afe8:	e7f2      	b.n	802afd0 <__swsetup_r+0xac>
 802afea:	2000      	movs	r0, #0
 802afec:	e7f7      	b.n	802afde <__swsetup_r+0xba>
 802afee:	bf00      	nop
 802aff0:	20000010 	.word	0x20000010
 802aff4:	0802cd60 	.word	0x0802cd60
 802aff8:	0802cd80 	.word	0x0802cd80
 802affc:	0802cd40 	.word	0x0802cd40

0802b000 <quorem>:
 802b000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b004:	6903      	ldr	r3, [r0, #16]
 802b006:	690c      	ldr	r4, [r1, #16]
 802b008:	42a3      	cmp	r3, r4
 802b00a:	4680      	mov	r8, r0
 802b00c:	f2c0 8082 	blt.w	802b114 <quorem+0x114>
 802b010:	3c01      	subs	r4, #1
 802b012:	f101 0714 	add.w	r7, r1, #20
 802b016:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 802b01a:	f100 0614 	add.w	r6, r0, #20
 802b01e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 802b022:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 802b026:	eb06 030c 	add.w	r3, r6, ip
 802b02a:	3501      	adds	r5, #1
 802b02c:	eb07 090c 	add.w	r9, r7, ip
 802b030:	9301      	str	r3, [sp, #4]
 802b032:	fbb0 f5f5 	udiv	r5, r0, r5
 802b036:	b395      	cbz	r5, 802b09e <quorem+0x9e>
 802b038:	f04f 0a00 	mov.w	sl, #0
 802b03c:	4638      	mov	r0, r7
 802b03e:	46b6      	mov	lr, r6
 802b040:	46d3      	mov	fp, sl
 802b042:	f850 2b04 	ldr.w	r2, [r0], #4
 802b046:	b293      	uxth	r3, r2
 802b048:	fb05 a303 	mla	r3, r5, r3, sl
 802b04c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802b050:	b29b      	uxth	r3, r3
 802b052:	ebab 0303 	sub.w	r3, fp, r3
 802b056:	0c12      	lsrs	r2, r2, #16
 802b058:	f8de b000 	ldr.w	fp, [lr]
 802b05c:	fb05 a202 	mla	r2, r5, r2, sl
 802b060:	fa13 f38b 	uxtah	r3, r3, fp
 802b064:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 802b068:	fa1f fb82 	uxth.w	fp, r2
 802b06c:	f8de 2000 	ldr.w	r2, [lr]
 802b070:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 802b074:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802b078:	b29b      	uxth	r3, r3
 802b07a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802b07e:	4581      	cmp	r9, r0
 802b080:	ea4f 4b22 	mov.w	fp, r2, asr #16
 802b084:	f84e 3b04 	str.w	r3, [lr], #4
 802b088:	d2db      	bcs.n	802b042 <quorem+0x42>
 802b08a:	f856 300c 	ldr.w	r3, [r6, ip]
 802b08e:	b933      	cbnz	r3, 802b09e <quorem+0x9e>
 802b090:	9b01      	ldr	r3, [sp, #4]
 802b092:	3b04      	subs	r3, #4
 802b094:	429e      	cmp	r6, r3
 802b096:	461a      	mov	r2, r3
 802b098:	d330      	bcc.n	802b0fc <quorem+0xfc>
 802b09a:	f8c8 4010 	str.w	r4, [r8, #16]
 802b09e:	4640      	mov	r0, r8
 802b0a0:	f001 f9fc 	bl	802c49c <__mcmp>
 802b0a4:	2800      	cmp	r0, #0
 802b0a6:	db25      	blt.n	802b0f4 <quorem+0xf4>
 802b0a8:	3501      	adds	r5, #1
 802b0aa:	4630      	mov	r0, r6
 802b0ac:	f04f 0c00 	mov.w	ip, #0
 802b0b0:	f857 2b04 	ldr.w	r2, [r7], #4
 802b0b4:	f8d0 e000 	ldr.w	lr, [r0]
 802b0b8:	b293      	uxth	r3, r2
 802b0ba:	ebac 0303 	sub.w	r3, ip, r3
 802b0be:	0c12      	lsrs	r2, r2, #16
 802b0c0:	fa13 f38e 	uxtah	r3, r3, lr
 802b0c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 802b0c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802b0cc:	b29b      	uxth	r3, r3
 802b0ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802b0d2:	45b9      	cmp	r9, r7
 802b0d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 802b0d8:	f840 3b04 	str.w	r3, [r0], #4
 802b0dc:	d2e8      	bcs.n	802b0b0 <quorem+0xb0>
 802b0de:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 802b0e2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 802b0e6:	b92a      	cbnz	r2, 802b0f4 <quorem+0xf4>
 802b0e8:	3b04      	subs	r3, #4
 802b0ea:	429e      	cmp	r6, r3
 802b0ec:	461a      	mov	r2, r3
 802b0ee:	d30b      	bcc.n	802b108 <quorem+0x108>
 802b0f0:	f8c8 4010 	str.w	r4, [r8, #16]
 802b0f4:	4628      	mov	r0, r5
 802b0f6:	b003      	add	sp, #12
 802b0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b0fc:	6812      	ldr	r2, [r2, #0]
 802b0fe:	3b04      	subs	r3, #4
 802b100:	2a00      	cmp	r2, #0
 802b102:	d1ca      	bne.n	802b09a <quorem+0x9a>
 802b104:	3c01      	subs	r4, #1
 802b106:	e7c5      	b.n	802b094 <quorem+0x94>
 802b108:	6812      	ldr	r2, [r2, #0]
 802b10a:	3b04      	subs	r3, #4
 802b10c:	2a00      	cmp	r2, #0
 802b10e:	d1ef      	bne.n	802b0f0 <quorem+0xf0>
 802b110:	3c01      	subs	r4, #1
 802b112:	e7ea      	b.n	802b0ea <quorem+0xea>
 802b114:	2000      	movs	r0, #0
 802b116:	e7ee      	b.n	802b0f6 <quorem+0xf6>

0802b118 <_dtoa_r>:
 802b118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b11c:	ec57 6b10 	vmov	r6, r7, d0
 802b120:	b097      	sub	sp, #92	; 0x5c
 802b122:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802b124:	9106      	str	r1, [sp, #24]
 802b126:	4604      	mov	r4, r0
 802b128:	920b      	str	r2, [sp, #44]	; 0x2c
 802b12a:	9312      	str	r3, [sp, #72]	; 0x48
 802b12c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802b130:	e9cd 6700 	strd	r6, r7, [sp]
 802b134:	b93d      	cbnz	r5, 802b146 <_dtoa_r+0x2e>
 802b136:	2010      	movs	r0, #16
 802b138:	f000 ff92 	bl	802c060 <malloc>
 802b13c:	6260      	str	r0, [r4, #36]	; 0x24
 802b13e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802b142:	6005      	str	r5, [r0, #0]
 802b144:	60c5      	str	r5, [r0, #12]
 802b146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802b148:	6819      	ldr	r1, [r3, #0]
 802b14a:	b151      	cbz	r1, 802b162 <_dtoa_r+0x4a>
 802b14c:	685a      	ldr	r2, [r3, #4]
 802b14e:	604a      	str	r2, [r1, #4]
 802b150:	2301      	movs	r3, #1
 802b152:	4093      	lsls	r3, r2
 802b154:	608b      	str	r3, [r1, #8]
 802b156:	4620      	mov	r0, r4
 802b158:	f000 ffbe 	bl	802c0d8 <_Bfree>
 802b15c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802b15e:	2200      	movs	r2, #0
 802b160:	601a      	str	r2, [r3, #0]
 802b162:	1e3b      	subs	r3, r7, #0
 802b164:	bfbb      	ittet	lt
 802b166:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802b16a:	9301      	strlt	r3, [sp, #4]
 802b16c:	2300      	movge	r3, #0
 802b16e:	2201      	movlt	r2, #1
 802b170:	bfac      	ite	ge
 802b172:	f8c8 3000 	strge.w	r3, [r8]
 802b176:	f8c8 2000 	strlt.w	r2, [r8]
 802b17a:	4baf      	ldr	r3, [pc, #700]	; (802b438 <_dtoa_r+0x320>)
 802b17c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802b180:	ea33 0308 	bics.w	r3, r3, r8
 802b184:	d114      	bne.n	802b1b0 <_dtoa_r+0x98>
 802b186:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802b188:	f242 730f 	movw	r3, #9999	; 0x270f
 802b18c:	6013      	str	r3, [r2, #0]
 802b18e:	9b00      	ldr	r3, [sp, #0]
 802b190:	b923      	cbnz	r3, 802b19c <_dtoa_r+0x84>
 802b192:	f3c8 0013 	ubfx	r0, r8, #0, #20
 802b196:	2800      	cmp	r0, #0
 802b198:	f000 8542 	beq.w	802bc20 <_dtoa_r+0xb08>
 802b19c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802b19e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 802b44c <_dtoa_r+0x334>
 802b1a2:	2b00      	cmp	r3, #0
 802b1a4:	f000 8544 	beq.w	802bc30 <_dtoa_r+0xb18>
 802b1a8:	f10b 0303 	add.w	r3, fp, #3
 802b1ac:	f000 bd3e 	b.w	802bc2c <_dtoa_r+0xb14>
 802b1b0:	e9dd 6700 	ldrd	r6, r7, [sp]
 802b1b4:	2200      	movs	r2, #0
 802b1b6:	2300      	movs	r3, #0
 802b1b8:	4630      	mov	r0, r6
 802b1ba:	4639      	mov	r1, r7
 802b1bc:	f7f5 fbbc 	bl	8020938 <__aeabi_dcmpeq>
 802b1c0:	4681      	mov	r9, r0
 802b1c2:	b168      	cbz	r0, 802b1e0 <_dtoa_r+0xc8>
 802b1c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802b1c6:	2301      	movs	r3, #1
 802b1c8:	6013      	str	r3, [r2, #0]
 802b1ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802b1cc:	2b00      	cmp	r3, #0
 802b1ce:	f000 8524 	beq.w	802bc1a <_dtoa_r+0xb02>
 802b1d2:	4b9a      	ldr	r3, [pc, #616]	; (802b43c <_dtoa_r+0x324>)
 802b1d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802b1d6:	f103 3bff 	add.w	fp, r3, #4294967295
 802b1da:	6013      	str	r3, [r2, #0]
 802b1dc:	f000 bd28 	b.w	802bc30 <_dtoa_r+0xb18>
 802b1e0:	aa14      	add	r2, sp, #80	; 0x50
 802b1e2:	a915      	add	r1, sp, #84	; 0x54
 802b1e4:	ec47 6b10 	vmov	d0, r6, r7
 802b1e8:	4620      	mov	r0, r4
 802b1ea:	f001 f9ce 	bl	802c58a <__d2b>
 802b1ee:	f3c8 550a 	ubfx	r5, r8, #20, #11
 802b1f2:	9004      	str	r0, [sp, #16]
 802b1f4:	2d00      	cmp	r5, #0
 802b1f6:	d07c      	beq.n	802b2f2 <_dtoa_r+0x1da>
 802b1f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 802b1fc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 802b200:	46b2      	mov	sl, r6
 802b202:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 802b206:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802b20a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 802b20e:	2200      	movs	r2, #0
 802b210:	4b8b      	ldr	r3, [pc, #556]	; (802b440 <_dtoa_r+0x328>)
 802b212:	4650      	mov	r0, sl
 802b214:	4659      	mov	r1, fp
 802b216:	f7f4 ff6f 	bl	80200f8 <__aeabi_dsub>
 802b21a:	a381      	add	r3, pc, #516	; (adr r3, 802b420 <_dtoa_r+0x308>)
 802b21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b220:	f7f5 f922 	bl	8020468 <__aeabi_dmul>
 802b224:	a380      	add	r3, pc, #512	; (adr r3, 802b428 <_dtoa_r+0x310>)
 802b226:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b22a:	f7f4 ff67 	bl	80200fc <__adddf3>
 802b22e:	4606      	mov	r6, r0
 802b230:	4628      	mov	r0, r5
 802b232:	460f      	mov	r7, r1
 802b234:	f7f5 f8ae 	bl	8020394 <__aeabi_i2d>
 802b238:	a37d      	add	r3, pc, #500	; (adr r3, 802b430 <_dtoa_r+0x318>)
 802b23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b23e:	f7f5 f913 	bl	8020468 <__aeabi_dmul>
 802b242:	4602      	mov	r2, r0
 802b244:	460b      	mov	r3, r1
 802b246:	4630      	mov	r0, r6
 802b248:	4639      	mov	r1, r7
 802b24a:	f7f4 ff57 	bl	80200fc <__adddf3>
 802b24e:	4606      	mov	r6, r0
 802b250:	460f      	mov	r7, r1
 802b252:	f7f5 fbb9 	bl	80209c8 <__aeabi_d2iz>
 802b256:	2200      	movs	r2, #0
 802b258:	4682      	mov	sl, r0
 802b25a:	2300      	movs	r3, #0
 802b25c:	4630      	mov	r0, r6
 802b25e:	4639      	mov	r1, r7
 802b260:	f7f5 fb74 	bl	802094c <__aeabi_dcmplt>
 802b264:	b148      	cbz	r0, 802b27a <_dtoa_r+0x162>
 802b266:	4650      	mov	r0, sl
 802b268:	f7f5 f894 	bl	8020394 <__aeabi_i2d>
 802b26c:	4632      	mov	r2, r6
 802b26e:	463b      	mov	r3, r7
 802b270:	f7f5 fb62 	bl	8020938 <__aeabi_dcmpeq>
 802b274:	b908      	cbnz	r0, 802b27a <_dtoa_r+0x162>
 802b276:	f10a 3aff 	add.w	sl, sl, #4294967295
 802b27a:	f1ba 0f16 	cmp.w	sl, #22
 802b27e:	d859      	bhi.n	802b334 <_dtoa_r+0x21c>
 802b280:	4970      	ldr	r1, [pc, #448]	; (802b444 <_dtoa_r+0x32c>)
 802b282:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 802b286:	e9dd 2300 	ldrd	r2, r3, [sp]
 802b28a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802b28e:	f7f5 fb7b 	bl	8020988 <__aeabi_dcmpgt>
 802b292:	2800      	cmp	r0, #0
 802b294:	d050      	beq.n	802b338 <_dtoa_r+0x220>
 802b296:	f10a 3aff 	add.w	sl, sl, #4294967295
 802b29a:	2300      	movs	r3, #0
 802b29c:	930f      	str	r3, [sp, #60]	; 0x3c
 802b29e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802b2a0:	1b5d      	subs	r5, r3, r5
 802b2a2:	f1b5 0801 	subs.w	r8, r5, #1
 802b2a6:	bf49      	itett	mi
 802b2a8:	f1c5 0301 	rsbmi	r3, r5, #1
 802b2ac:	2300      	movpl	r3, #0
 802b2ae:	9305      	strmi	r3, [sp, #20]
 802b2b0:	f04f 0800 	movmi.w	r8, #0
 802b2b4:	bf58      	it	pl
 802b2b6:	9305      	strpl	r3, [sp, #20]
 802b2b8:	f1ba 0f00 	cmp.w	sl, #0
 802b2bc:	db3e      	blt.n	802b33c <_dtoa_r+0x224>
 802b2be:	2300      	movs	r3, #0
 802b2c0:	44d0      	add	r8, sl
 802b2c2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 802b2c6:	9307      	str	r3, [sp, #28]
 802b2c8:	9b06      	ldr	r3, [sp, #24]
 802b2ca:	2b09      	cmp	r3, #9
 802b2cc:	f200 8090 	bhi.w	802b3f0 <_dtoa_r+0x2d8>
 802b2d0:	2b05      	cmp	r3, #5
 802b2d2:	bfc4      	itt	gt
 802b2d4:	3b04      	subgt	r3, #4
 802b2d6:	9306      	strgt	r3, [sp, #24]
 802b2d8:	9b06      	ldr	r3, [sp, #24]
 802b2da:	f1a3 0302 	sub.w	r3, r3, #2
 802b2de:	bfcc      	ite	gt
 802b2e0:	2500      	movgt	r5, #0
 802b2e2:	2501      	movle	r5, #1
 802b2e4:	2b03      	cmp	r3, #3
 802b2e6:	f200 808f 	bhi.w	802b408 <_dtoa_r+0x2f0>
 802b2ea:	e8df f003 	tbb	[pc, r3]
 802b2ee:	7f7d      	.short	0x7f7d
 802b2f0:	7131      	.short	0x7131
 802b2f2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 802b2f6:	441d      	add	r5, r3
 802b2f8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 802b2fc:	2820      	cmp	r0, #32
 802b2fe:	dd13      	ble.n	802b328 <_dtoa_r+0x210>
 802b300:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 802b304:	9b00      	ldr	r3, [sp, #0]
 802b306:	fa08 f800 	lsl.w	r8, r8, r0
 802b30a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 802b30e:	fa23 f000 	lsr.w	r0, r3, r0
 802b312:	ea48 0000 	orr.w	r0, r8, r0
 802b316:	f7f5 f82d 	bl	8020374 <__aeabi_ui2d>
 802b31a:	2301      	movs	r3, #1
 802b31c:	4682      	mov	sl, r0
 802b31e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 802b322:	3d01      	subs	r5, #1
 802b324:	9313      	str	r3, [sp, #76]	; 0x4c
 802b326:	e772      	b.n	802b20e <_dtoa_r+0xf6>
 802b328:	9b00      	ldr	r3, [sp, #0]
 802b32a:	f1c0 0020 	rsb	r0, r0, #32
 802b32e:	fa03 f000 	lsl.w	r0, r3, r0
 802b332:	e7f0      	b.n	802b316 <_dtoa_r+0x1fe>
 802b334:	2301      	movs	r3, #1
 802b336:	e7b1      	b.n	802b29c <_dtoa_r+0x184>
 802b338:	900f      	str	r0, [sp, #60]	; 0x3c
 802b33a:	e7b0      	b.n	802b29e <_dtoa_r+0x186>
 802b33c:	9b05      	ldr	r3, [sp, #20]
 802b33e:	eba3 030a 	sub.w	r3, r3, sl
 802b342:	9305      	str	r3, [sp, #20]
 802b344:	f1ca 0300 	rsb	r3, sl, #0
 802b348:	9307      	str	r3, [sp, #28]
 802b34a:	2300      	movs	r3, #0
 802b34c:	930e      	str	r3, [sp, #56]	; 0x38
 802b34e:	e7bb      	b.n	802b2c8 <_dtoa_r+0x1b0>
 802b350:	2301      	movs	r3, #1
 802b352:	930a      	str	r3, [sp, #40]	; 0x28
 802b354:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802b356:	2b00      	cmp	r3, #0
 802b358:	dd59      	ble.n	802b40e <_dtoa_r+0x2f6>
 802b35a:	9302      	str	r3, [sp, #8]
 802b35c:	4699      	mov	r9, r3
 802b35e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802b360:	2200      	movs	r2, #0
 802b362:	6072      	str	r2, [r6, #4]
 802b364:	2204      	movs	r2, #4
 802b366:	f102 0014 	add.w	r0, r2, #20
 802b36a:	4298      	cmp	r0, r3
 802b36c:	6871      	ldr	r1, [r6, #4]
 802b36e:	d953      	bls.n	802b418 <_dtoa_r+0x300>
 802b370:	4620      	mov	r0, r4
 802b372:	f000 fe7d 	bl	802c070 <_Balloc>
 802b376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802b378:	6030      	str	r0, [r6, #0]
 802b37a:	f1b9 0f0e 	cmp.w	r9, #14
 802b37e:	f8d3 b000 	ldr.w	fp, [r3]
 802b382:	f200 80e6 	bhi.w	802b552 <_dtoa_r+0x43a>
 802b386:	2d00      	cmp	r5, #0
 802b388:	f000 80e3 	beq.w	802b552 <_dtoa_r+0x43a>
 802b38c:	ed9d 7b00 	vldr	d7, [sp]
 802b390:	f1ba 0f00 	cmp.w	sl, #0
 802b394:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 802b398:	dd74      	ble.n	802b484 <_dtoa_r+0x36c>
 802b39a:	4a2a      	ldr	r2, [pc, #168]	; (802b444 <_dtoa_r+0x32c>)
 802b39c:	f00a 030f 	and.w	r3, sl, #15
 802b3a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 802b3a4:	ed93 7b00 	vldr	d7, [r3]
 802b3a8:	ea4f 162a 	mov.w	r6, sl, asr #4
 802b3ac:	06f0      	lsls	r0, r6, #27
 802b3ae:	ed8d 7b08 	vstr	d7, [sp, #32]
 802b3b2:	d565      	bpl.n	802b480 <_dtoa_r+0x368>
 802b3b4:	4b24      	ldr	r3, [pc, #144]	; (802b448 <_dtoa_r+0x330>)
 802b3b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 802b3ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802b3be:	f7f5 f97d 	bl	80206bc <__aeabi_ddiv>
 802b3c2:	e9cd 0100 	strd	r0, r1, [sp]
 802b3c6:	f006 060f 	and.w	r6, r6, #15
 802b3ca:	2503      	movs	r5, #3
 802b3cc:	4f1e      	ldr	r7, [pc, #120]	; (802b448 <_dtoa_r+0x330>)
 802b3ce:	e04c      	b.n	802b46a <_dtoa_r+0x352>
 802b3d0:	2301      	movs	r3, #1
 802b3d2:	930a      	str	r3, [sp, #40]	; 0x28
 802b3d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802b3d6:	4453      	add	r3, sl
 802b3d8:	f103 0901 	add.w	r9, r3, #1
 802b3dc:	9302      	str	r3, [sp, #8]
 802b3de:	464b      	mov	r3, r9
 802b3e0:	2b01      	cmp	r3, #1
 802b3e2:	bfb8      	it	lt
 802b3e4:	2301      	movlt	r3, #1
 802b3e6:	e7ba      	b.n	802b35e <_dtoa_r+0x246>
 802b3e8:	2300      	movs	r3, #0
 802b3ea:	e7b2      	b.n	802b352 <_dtoa_r+0x23a>
 802b3ec:	2300      	movs	r3, #0
 802b3ee:	e7f0      	b.n	802b3d2 <_dtoa_r+0x2ba>
 802b3f0:	2501      	movs	r5, #1
 802b3f2:	2300      	movs	r3, #0
 802b3f4:	9306      	str	r3, [sp, #24]
 802b3f6:	950a      	str	r5, [sp, #40]	; 0x28
 802b3f8:	f04f 33ff 	mov.w	r3, #4294967295
 802b3fc:	9302      	str	r3, [sp, #8]
 802b3fe:	4699      	mov	r9, r3
 802b400:	2200      	movs	r2, #0
 802b402:	2312      	movs	r3, #18
 802b404:	920b      	str	r2, [sp, #44]	; 0x2c
 802b406:	e7aa      	b.n	802b35e <_dtoa_r+0x246>
 802b408:	2301      	movs	r3, #1
 802b40a:	930a      	str	r3, [sp, #40]	; 0x28
 802b40c:	e7f4      	b.n	802b3f8 <_dtoa_r+0x2e0>
 802b40e:	2301      	movs	r3, #1
 802b410:	9302      	str	r3, [sp, #8]
 802b412:	4699      	mov	r9, r3
 802b414:	461a      	mov	r2, r3
 802b416:	e7f5      	b.n	802b404 <_dtoa_r+0x2ec>
 802b418:	3101      	adds	r1, #1
 802b41a:	6071      	str	r1, [r6, #4]
 802b41c:	0052      	lsls	r2, r2, #1
 802b41e:	e7a2      	b.n	802b366 <_dtoa_r+0x24e>
 802b420:	636f4361 	.word	0x636f4361
 802b424:	3fd287a7 	.word	0x3fd287a7
 802b428:	8b60c8b3 	.word	0x8b60c8b3
 802b42c:	3fc68a28 	.word	0x3fc68a28
 802b430:	509f79fb 	.word	0x509f79fb
 802b434:	3fd34413 	.word	0x3fd34413
 802b438:	7ff00000 	.word	0x7ff00000
 802b43c:	0802cd0d 	.word	0x0802cd0d
 802b440:	3ff80000 	.word	0x3ff80000
 802b444:	0802cdc8 	.word	0x0802cdc8
 802b448:	0802cda0 	.word	0x0802cda0
 802b44c:	0802cd39 	.word	0x0802cd39
 802b450:	07f1      	lsls	r1, r6, #31
 802b452:	d508      	bpl.n	802b466 <_dtoa_r+0x34e>
 802b454:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802b458:	e9d7 2300 	ldrd	r2, r3, [r7]
 802b45c:	f7f5 f804 	bl	8020468 <__aeabi_dmul>
 802b460:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802b464:	3501      	adds	r5, #1
 802b466:	1076      	asrs	r6, r6, #1
 802b468:	3708      	adds	r7, #8
 802b46a:	2e00      	cmp	r6, #0
 802b46c:	d1f0      	bne.n	802b450 <_dtoa_r+0x338>
 802b46e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 802b472:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b476:	f7f5 f921 	bl	80206bc <__aeabi_ddiv>
 802b47a:	e9cd 0100 	strd	r0, r1, [sp]
 802b47e:	e01a      	b.n	802b4b6 <_dtoa_r+0x39e>
 802b480:	2502      	movs	r5, #2
 802b482:	e7a3      	b.n	802b3cc <_dtoa_r+0x2b4>
 802b484:	f000 80a0 	beq.w	802b5c8 <_dtoa_r+0x4b0>
 802b488:	f1ca 0600 	rsb	r6, sl, #0
 802b48c:	4b9f      	ldr	r3, [pc, #636]	; (802b70c <_dtoa_r+0x5f4>)
 802b48e:	4fa0      	ldr	r7, [pc, #640]	; (802b710 <_dtoa_r+0x5f8>)
 802b490:	f006 020f 	and.w	r2, r6, #15
 802b494:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802b498:	e9d3 2300 	ldrd	r2, r3, [r3]
 802b49c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 802b4a0:	f7f4 ffe2 	bl	8020468 <__aeabi_dmul>
 802b4a4:	e9cd 0100 	strd	r0, r1, [sp]
 802b4a8:	1136      	asrs	r6, r6, #4
 802b4aa:	2300      	movs	r3, #0
 802b4ac:	2502      	movs	r5, #2
 802b4ae:	2e00      	cmp	r6, #0
 802b4b0:	d17f      	bne.n	802b5b2 <_dtoa_r+0x49a>
 802b4b2:	2b00      	cmp	r3, #0
 802b4b4:	d1e1      	bne.n	802b47a <_dtoa_r+0x362>
 802b4b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802b4b8:	2b00      	cmp	r3, #0
 802b4ba:	f000 8087 	beq.w	802b5cc <_dtoa_r+0x4b4>
 802b4be:	e9dd 6700 	ldrd	r6, r7, [sp]
 802b4c2:	2200      	movs	r2, #0
 802b4c4:	4b93      	ldr	r3, [pc, #588]	; (802b714 <_dtoa_r+0x5fc>)
 802b4c6:	4630      	mov	r0, r6
 802b4c8:	4639      	mov	r1, r7
 802b4ca:	f7f5 fa3f 	bl	802094c <__aeabi_dcmplt>
 802b4ce:	2800      	cmp	r0, #0
 802b4d0:	d07c      	beq.n	802b5cc <_dtoa_r+0x4b4>
 802b4d2:	f1b9 0f00 	cmp.w	r9, #0
 802b4d6:	d079      	beq.n	802b5cc <_dtoa_r+0x4b4>
 802b4d8:	9b02      	ldr	r3, [sp, #8]
 802b4da:	2b00      	cmp	r3, #0
 802b4dc:	dd35      	ble.n	802b54a <_dtoa_r+0x432>
 802b4de:	f10a 33ff 	add.w	r3, sl, #4294967295
 802b4e2:	9308      	str	r3, [sp, #32]
 802b4e4:	4639      	mov	r1, r7
 802b4e6:	2200      	movs	r2, #0
 802b4e8:	4b8b      	ldr	r3, [pc, #556]	; (802b718 <_dtoa_r+0x600>)
 802b4ea:	4630      	mov	r0, r6
 802b4ec:	f7f4 ffbc 	bl	8020468 <__aeabi_dmul>
 802b4f0:	e9cd 0100 	strd	r0, r1, [sp]
 802b4f4:	9f02      	ldr	r7, [sp, #8]
 802b4f6:	3501      	adds	r5, #1
 802b4f8:	4628      	mov	r0, r5
 802b4fa:	f7f4 ff4b 	bl	8020394 <__aeabi_i2d>
 802b4fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 802b502:	f7f4 ffb1 	bl	8020468 <__aeabi_dmul>
 802b506:	2200      	movs	r2, #0
 802b508:	4b84      	ldr	r3, [pc, #528]	; (802b71c <_dtoa_r+0x604>)
 802b50a:	f7f4 fdf7 	bl	80200fc <__adddf3>
 802b50e:	4605      	mov	r5, r0
 802b510:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 802b514:	2f00      	cmp	r7, #0
 802b516:	d15d      	bne.n	802b5d4 <_dtoa_r+0x4bc>
 802b518:	2200      	movs	r2, #0
 802b51a:	4b81      	ldr	r3, [pc, #516]	; (802b720 <_dtoa_r+0x608>)
 802b51c:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b520:	f7f4 fdea 	bl	80200f8 <__aeabi_dsub>
 802b524:	462a      	mov	r2, r5
 802b526:	4633      	mov	r3, r6
 802b528:	e9cd 0100 	strd	r0, r1, [sp]
 802b52c:	f7f5 fa2c 	bl	8020988 <__aeabi_dcmpgt>
 802b530:	2800      	cmp	r0, #0
 802b532:	f040 8288 	bne.w	802ba46 <_dtoa_r+0x92e>
 802b536:	462a      	mov	r2, r5
 802b538:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 802b53c:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b540:	f7f5 fa04 	bl	802094c <__aeabi_dcmplt>
 802b544:	2800      	cmp	r0, #0
 802b546:	f040 827c 	bne.w	802ba42 <_dtoa_r+0x92a>
 802b54a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 802b54e:	e9cd 2300 	strd	r2, r3, [sp]
 802b552:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802b554:	2b00      	cmp	r3, #0
 802b556:	f2c0 8150 	blt.w	802b7fa <_dtoa_r+0x6e2>
 802b55a:	f1ba 0f0e 	cmp.w	sl, #14
 802b55e:	f300 814c 	bgt.w	802b7fa <_dtoa_r+0x6e2>
 802b562:	4b6a      	ldr	r3, [pc, #424]	; (802b70c <_dtoa_r+0x5f4>)
 802b564:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 802b568:	ed93 7b00 	vldr	d7, [r3]
 802b56c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802b56e:	2b00      	cmp	r3, #0
 802b570:	ed8d 7b02 	vstr	d7, [sp, #8]
 802b574:	f280 80d8 	bge.w	802b728 <_dtoa_r+0x610>
 802b578:	f1b9 0f00 	cmp.w	r9, #0
 802b57c:	f300 80d4 	bgt.w	802b728 <_dtoa_r+0x610>
 802b580:	f040 825e 	bne.w	802ba40 <_dtoa_r+0x928>
 802b584:	2200      	movs	r2, #0
 802b586:	4b66      	ldr	r3, [pc, #408]	; (802b720 <_dtoa_r+0x608>)
 802b588:	ec51 0b17 	vmov	r0, r1, d7
 802b58c:	f7f4 ff6c 	bl	8020468 <__aeabi_dmul>
 802b590:	e9dd 2300 	ldrd	r2, r3, [sp]
 802b594:	f7f5 f9ee 	bl	8020974 <__aeabi_dcmpge>
 802b598:	464f      	mov	r7, r9
 802b59a:	464e      	mov	r6, r9
 802b59c:	2800      	cmp	r0, #0
 802b59e:	f040 8234 	bne.w	802ba0a <_dtoa_r+0x8f2>
 802b5a2:	2331      	movs	r3, #49	; 0x31
 802b5a4:	f10b 0501 	add.w	r5, fp, #1
 802b5a8:	f88b 3000 	strb.w	r3, [fp]
 802b5ac:	f10a 0a01 	add.w	sl, sl, #1
 802b5b0:	e22f      	b.n	802ba12 <_dtoa_r+0x8fa>
 802b5b2:	07f2      	lsls	r2, r6, #31
 802b5b4:	d505      	bpl.n	802b5c2 <_dtoa_r+0x4aa>
 802b5b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 802b5ba:	f7f4 ff55 	bl	8020468 <__aeabi_dmul>
 802b5be:	3501      	adds	r5, #1
 802b5c0:	2301      	movs	r3, #1
 802b5c2:	1076      	asrs	r6, r6, #1
 802b5c4:	3708      	adds	r7, #8
 802b5c6:	e772      	b.n	802b4ae <_dtoa_r+0x396>
 802b5c8:	2502      	movs	r5, #2
 802b5ca:	e774      	b.n	802b4b6 <_dtoa_r+0x39e>
 802b5cc:	f8cd a020 	str.w	sl, [sp, #32]
 802b5d0:	464f      	mov	r7, r9
 802b5d2:	e791      	b.n	802b4f8 <_dtoa_r+0x3e0>
 802b5d4:	4b4d      	ldr	r3, [pc, #308]	; (802b70c <_dtoa_r+0x5f4>)
 802b5d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 802b5da:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 802b5de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b5e0:	2b00      	cmp	r3, #0
 802b5e2:	d047      	beq.n	802b674 <_dtoa_r+0x55c>
 802b5e4:	4602      	mov	r2, r0
 802b5e6:	460b      	mov	r3, r1
 802b5e8:	2000      	movs	r0, #0
 802b5ea:	494e      	ldr	r1, [pc, #312]	; (802b724 <_dtoa_r+0x60c>)
 802b5ec:	f7f5 f866 	bl	80206bc <__aeabi_ddiv>
 802b5f0:	462a      	mov	r2, r5
 802b5f2:	4633      	mov	r3, r6
 802b5f4:	f7f4 fd80 	bl	80200f8 <__aeabi_dsub>
 802b5f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 802b5fc:	465d      	mov	r5, fp
 802b5fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b602:	f7f5 f9e1 	bl	80209c8 <__aeabi_d2iz>
 802b606:	4606      	mov	r6, r0
 802b608:	f7f4 fec4 	bl	8020394 <__aeabi_i2d>
 802b60c:	4602      	mov	r2, r0
 802b60e:	460b      	mov	r3, r1
 802b610:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b614:	f7f4 fd70 	bl	80200f8 <__aeabi_dsub>
 802b618:	3630      	adds	r6, #48	; 0x30
 802b61a:	f805 6b01 	strb.w	r6, [r5], #1
 802b61e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802b622:	e9cd 0100 	strd	r0, r1, [sp]
 802b626:	f7f5 f991 	bl	802094c <__aeabi_dcmplt>
 802b62a:	2800      	cmp	r0, #0
 802b62c:	d163      	bne.n	802b6f6 <_dtoa_r+0x5de>
 802b62e:	e9dd 2300 	ldrd	r2, r3, [sp]
 802b632:	2000      	movs	r0, #0
 802b634:	4937      	ldr	r1, [pc, #220]	; (802b714 <_dtoa_r+0x5fc>)
 802b636:	f7f4 fd5f 	bl	80200f8 <__aeabi_dsub>
 802b63a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802b63e:	f7f5 f985 	bl	802094c <__aeabi_dcmplt>
 802b642:	2800      	cmp	r0, #0
 802b644:	f040 80b7 	bne.w	802b7b6 <_dtoa_r+0x69e>
 802b648:	eba5 030b 	sub.w	r3, r5, fp
 802b64c:	429f      	cmp	r7, r3
 802b64e:	f77f af7c 	ble.w	802b54a <_dtoa_r+0x432>
 802b652:	2200      	movs	r2, #0
 802b654:	4b30      	ldr	r3, [pc, #192]	; (802b718 <_dtoa_r+0x600>)
 802b656:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802b65a:	f7f4 ff05 	bl	8020468 <__aeabi_dmul>
 802b65e:	2200      	movs	r2, #0
 802b660:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 802b664:	4b2c      	ldr	r3, [pc, #176]	; (802b718 <_dtoa_r+0x600>)
 802b666:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b66a:	f7f4 fefd 	bl	8020468 <__aeabi_dmul>
 802b66e:	e9cd 0100 	strd	r0, r1, [sp]
 802b672:	e7c4      	b.n	802b5fe <_dtoa_r+0x4e6>
 802b674:	462a      	mov	r2, r5
 802b676:	4633      	mov	r3, r6
 802b678:	f7f4 fef6 	bl	8020468 <__aeabi_dmul>
 802b67c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 802b680:	eb0b 0507 	add.w	r5, fp, r7
 802b684:	465e      	mov	r6, fp
 802b686:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b68a:	f7f5 f99d 	bl	80209c8 <__aeabi_d2iz>
 802b68e:	4607      	mov	r7, r0
 802b690:	f7f4 fe80 	bl	8020394 <__aeabi_i2d>
 802b694:	3730      	adds	r7, #48	; 0x30
 802b696:	4602      	mov	r2, r0
 802b698:	460b      	mov	r3, r1
 802b69a:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b69e:	f7f4 fd2b 	bl	80200f8 <__aeabi_dsub>
 802b6a2:	f806 7b01 	strb.w	r7, [r6], #1
 802b6a6:	42ae      	cmp	r6, r5
 802b6a8:	e9cd 0100 	strd	r0, r1, [sp]
 802b6ac:	f04f 0200 	mov.w	r2, #0
 802b6b0:	d126      	bne.n	802b700 <_dtoa_r+0x5e8>
 802b6b2:	4b1c      	ldr	r3, [pc, #112]	; (802b724 <_dtoa_r+0x60c>)
 802b6b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802b6b8:	f7f4 fd20 	bl	80200fc <__adddf3>
 802b6bc:	4602      	mov	r2, r0
 802b6be:	460b      	mov	r3, r1
 802b6c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b6c4:	f7f5 f960 	bl	8020988 <__aeabi_dcmpgt>
 802b6c8:	2800      	cmp	r0, #0
 802b6ca:	d174      	bne.n	802b7b6 <_dtoa_r+0x69e>
 802b6cc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802b6d0:	2000      	movs	r0, #0
 802b6d2:	4914      	ldr	r1, [pc, #80]	; (802b724 <_dtoa_r+0x60c>)
 802b6d4:	f7f4 fd10 	bl	80200f8 <__aeabi_dsub>
 802b6d8:	4602      	mov	r2, r0
 802b6da:	460b      	mov	r3, r1
 802b6dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 802b6e0:	f7f5 f934 	bl	802094c <__aeabi_dcmplt>
 802b6e4:	2800      	cmp	r0, #0
 802b6e6:	f43f af30 	beq.w	802b54a <_dtoa_r+0x432>
 802b6ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802b6ee:	2b30      	cmp	r3, #48	; 0x30
 802b6f0:	f105 32ff 	add.w	r2, r5, #4294967295
 802b6f4:	d002      	beq.n	802b6fc <_dtoa_r+0x5e4>
 802b6f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 802b6fa:	e04a      	b.n	802b792 <_dtoa_r+0x67a>
 802b6fc:	4615      	mov	r5, r2
 802b6fe:	e7f4      	b.n	802b6ea <_dtoa_r+0x5d2>
 802b700:	4b05      	ldr	r3, [pc, #20]	; (802b718 <_dtoa_r+0x600>)
 802b702:	f7f4 feb1 	bl	8020468 <__aeabi_dmul>
 802b706:	e9cd 0100 	strd	r0, r1, [sp]
 802b70a:	e7bc      	b.n	802b686 <_dtoa_r+0x56e>
 802b70c:	0802cdc8 	.word	0x0802cdc8
 802b710:	0802cda0 	.word	0x0802cda0
 802b714:	3ff00000 	.word	0x3ff00000
 802b718:	40240000 	.word	0x40240000
 802b71c:	401c0000 	.word	0x401c0000
 802b720:	40140000 	.word	0x40140000
 802b724:	3fe00000 	.word	0x3fe00000
 802b728:	e9dd 6700 	ldrd	r6, r7, [sp]
 802b72c:	465d      	mov	r5, fp
 802b72e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802b732:	4630      	mov	r0, r6
 802b734:	4639      	mov	r1, r7
 802b736:	f7f4 ffc1 	bl	80206bc <__aeabi_ddiv>
 802b73a:	f7f5 f945 	bl	80209c8 <__aeabi_d2iz>
 802b73e:	4680      	mov	r8, r0
 802b740:	f7f4 fe28 	bl	8020394 <__aeabi_i2d>
 802b744:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802b748:	f7f4 fe8e 	bl	8020468 <__aeabi_dmul>
 802b74c:	4602      	mov	r2, r0
 802b74e:	460b      	mov	r3, r1
 802b750:	4630      	mov	r0, r6
 802b752:	4639      	mov	r1, r7
 802b754:	f108 0630 	add.w	r6, r8, #48	; 0x30
 802b758:	f7f4 fcce 	bl	80200f8 <__aeabi_dsub>
 802b75c:	f805 6b01 	strb.w	r6, [r5], #1
 802b760:	eba5 060b 	sub.w	r6, r5, fp
 802b764:	45b1      	cmp	r9, r6
 802b766:	4602      	mov	r2, r0
 802b768:	460b      	mov	r3, r1
 802b76a:	d139      	bne.n	802b7e0 <_dtoa_r+0x6c8>
 802b76c:	f7f4 fcc6 	bl	80200fc <__adddf3>
 802b770:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802b774:	4606      	mov	r6, r0
 802b776:	460f      	mov	r7, r1
 802b778:	f7f5 f906 	bl	8020988 <__aeabi_dcmpgt>
 802b77c:	b9c8      	cbnz	r0, 802b7b2 <_dtoa_r+0x69a>
 802b77e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802b782:	4630      	mov	r0, r6
 802b784:	4639      	mov	r1, r7
 802b786:	f7f5 f8d7 	bl	8020938 <__aeabi_dcmpeq>
 802b78a:	b110      	cbz	r0, 802b792 <_dtoa_r+0x67a>
 802b78c:	f018 0f01 	tst.w	r8, #1
 802b790:	d10f      	bne.n	802b7b2 <_dtoa_r+0x69a>
 802b792:	9904      	ldr	r1, [sp, #16]
 802b794:	4620      	mov	r0, r4
 802b796:	f000 fc9f 	bl	802c0d8 <_Bfree>
 802b79a:	2300      	movs	r3, #0
 802b79c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802b79e:	702b      	strb	r3, [r5, #0]
 802b7a0:	f10a 0301 	add.w	r3, sl, #1
 802b7a4:	6013      	str	r3, [r2, #0]
 802b7a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802b7a8:	2b00      	cmp	r3, #0
 802b7aa:	f000 8241 	beq.w	802bc30 <_dtoa_r+0xb18>
 802b7ae:	601d      	str	r5, [r3, #0]
 802b7b0:	e23e      	b.n	802bc30 <_dtoa_r+0xb18>
 802b7b2:	f8cd a020 	str.w	sl, [sp, #32]
 802b7b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802b7ba:	2a39      	cmp	r2, #57	; 0x39
 802b7bc:	f105 33ff 	add.w	r3, r5, #4294967295
 802b7c0:	d108      	bne.n	802b7d4 <_dtoa_r+0x6bc>
 802b7c2:	459b      	cmp	fp, r3
 802b7c4:	d10a      	bne.n	802b7dc <_dtoa_r+0x6c4>
 802b7c6:	9b08      	ldr	r3, [sp, #32]
 802b7c8:	3301      	adds	r3, #1
 802b7ca:	9308      	str	r3, [sp, #32]
 802b7cc:	2330      	movs	r3, #48	; 0x30
 802b7ce:	f88b 3000 	strb.w	r3, [fp]
 802b7d2:	465b      	mov	r3, fp
 802b7d4:	781a      	ldrb	r2, [r3, #0]
 802b7d6:	3201      	adds	r2, #1
 802b7d8:	701a      	strb	r2, [r3, #0]
 802b7da:	e78c      	b.n	802b6f6 <_dtoa_r+0x5de>
 802b7dc:	461d      	mov	r5, r3
 802b7de:	e7ea      	b.n	802b7b6 <_dtoa_r+0x69e>
 802b7e0:	2200      	movs	r2, #0
 802b7e2:	4b9b      	ldr	r3, [pc, #620]	; (802ba50 <_dtoa_r+0x938>)
 802b7e4:	f7f4 fe40 	bl	8020468 <__aeabi_dmul>
 802b7e8:	2200      	movs	r2, #0
 802b7ea:	2300      	movs	r3, #0
 802b7ec:	4606      	mov	r6, r0
 802b7ee:	460f      	mov	r7, r1
 802b7f0:	f7f5 f8a2 	bl	8020938 <__aeabi_dcmpeq>
 802b7f4:	2800      	cmp	r0, #0
 802b7f6:	d09a      	beq.n	802b72e <_dtoa_r+0x616>
 802b7f8:	e7cb      	b.n	802b792 <_dtoa_r+0x67a>
 802b7fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802b7fc:	2a00      	cmp	r2, #0
 802b7fe:	f000 808b 	beq.w	802b918 <_dtoa_r+0x800>
 802b802:	9a06      	ldr	r2, [sp, #24]
 802b804:	2a01      	cmp	r2, #1
 802b806:	dc6e      	bgt.n	802b8e6 <_dtoa_r+0x7ce>
 802b808:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802b80a:	2a00      	cmp	r2, #0
 802b80c:	d067      	beq.n	802b8de <_dtoa_r+0x7c6>
 802b80e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802b812:	9f07      	ldr	r7, [sp, #28]
 802b814:	9d05      	ldr	r5, [sp, #20]
 802b816:	9a05      	ldr	r2, [sp, #20]
 802b818:	2101      	movs	r1, #1
 802b81a:	441a      	add	r2, r3
 802b81c:	4620      	mov	r0, r4
 802b81e:	9205      	str	r2, [sp, #20]
 802b820:	4498      	add	r8, r3
 802b822:	f000 fcf9 	bl	802c218 <__i2b>
 802b826:	4606      	mov	r6, r0
 802b828:	2d00      	cmp	r5, #0
 802b82a:	dd0c      	ble.n	802b846 <_dtoa_r+0x72e>
 802b82c:	f1b8 0f00 	cmp.w	r8, #0
 802b830:	dd09      	ble.n	802b846 <_dtoa_r+0x72e>
 802b832:	4545      	cmp	r5, r8
 802b834:	9a05      	ldr	r2, [sp, #20]
 802b836:	462b      	mov	r3, r5
 802b838:	bfa8      	it	ge
 802b83a:	4643      	movge	r3, r8
 802b83c:	1ad2      	subs	r2, r2, r3
 802b83e:	9205      	str	r2, [sp, #20]
 802b840:	1aed      	subs	r5, r5, r3
 802b842:	eba8 0803 	sub.w	r8, r8, r3
 802b846:	9b07      	ldr	r3, [sp, #28]
 802b848:	b1eb      	cbz	r3, 802b886 <_dtoa_r+0x76e>
 802b84a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b84c:	2b00      	cmp	r3, #0
 802b84e:	d067      	beq.n	802b920 <_dtoa_r+0x808>
 802b850:	b18f      	cbz	r7, 802b876 <_dtoa_r+0x75e>
 802b852:	4631      	mov	r1, r6
 802b854:	463a      	mov	r2, r7
 802b856:	4620      	mov	r0, r4
 802b858:	f000 fd7e 	bl	802c358 <__pow5mult>
 802b85c:	9a04      	ldr	r2, [sp, #16]
 802b85e:	4601      	mov	r1, r0
 802b860:	4606      	mov	r6, r0
 802b862:	4620      	mov	r0, r4
 802b864:	f000 fce1 	bl	802c22a <__multiply>
 802b868:	9904      	ldr	r1, [sp, #16]
 802b86a:	9008      	str	r0, [sp, #32]
 802b86c:	4620      	mov	r0, r4
 802b86e:	f000 fc33 	bl	802c0d8 <_Bfree>
 802b872:	9b08      	ldr	r3, [sp, #32]
 802b874:	9304      	str	r3, [sp, #16]
 802b876:	9b07      	ldr	r3, [sp, #28]
 802b878:	1bda      	subs	r2, r3, r7
 802b87a:	d004      	beq.n	802b886 <_dtoa_r+0x76e>
 802b87c:	9904      	ldr	r1, [sp, #16]
 802b87e:	4620      	mov	r0, r4
 802b880:	f000 fd6a 	bl	802c358 <__pow5mult>
 802b884:	9004      	str	r0, [sp, #16]
 802b886:	2101      	movs	r1, #1
 802b888:	4620      	mov	r0, r4
 802b88a:	f000 fcc5 	bl	802c218 <__i2b>
 802b88e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802b890:	4607      	mov	r7, r0
 802b892:	2b00      	cmp	r3, #0
 802b894:	f000 81d0 	beq.w	802bc38 <_dtoa_r+0xb20>
 802b898:	461a      	mov	r2, r3
 802b89a:	4601      	mov	r1, r0
 802b89c:	4620      	mov	r0, r4
 802b89e:	f000 fd5b 	bl	802c358 <__pow5mult>
 802b8a2:	9b06      	ldr	r3, [sp, #24]
 802b8a4:	2b01      	cmp	r3, #1
 802b8a6:	4607      	mov	r7, r0
 802b8a8:	dc40      	bgt.n	802b92c <_dtoa_r+0x814>
 802b8aa:	9b00      	ldr	r3, [sp, #0]
 802b8ac:	2b00      	cmp	r3, #0
 802b8ae:	d139      	bne.n	802b924 <_dtoa_r+0x80c>
 802b8b0:	9b01      	ldr	r3, [sp, #4]
 802b8b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802b8b6:	2b00      	cmp	r3, #0
 802b8b8:	d136      	bne.n	802b928 <_dtoa_r+0x810>
 802b8ba:	9b01      	ldr	r3, [sp, #4]
 802b8bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802b8c0:	0d1b      	lsrs	r3, r3, #20
 802b8c2:	051b      	lsls	r3, r3, #20
 802b8c4:	b12b      	cbz	r3, 802b8d2 <_dtoa_r+0x7ba>
 802b8c6:	9b05      	ldr	r3, [sp, #20]
 802b8c8:	3301      	adds	r3, #1
 802b8ca:	9305      	str	r3, [sp, #20]
 802b8cc:	f108 0801 	add.w	r8, r8, #1
 802b8d0:	2301      	movs	r3, #1
 802b8d2:	9307      	str	r3, [sp, #28]
 802b8d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802b8d6:	2b00      	cmp	r3, #0
 802b8d8:	d12a      	bne.n	802b930 <_dtoa_r+0x818>
 802b8da:	2001      	movs	r0, #1
 802b8dc:	e030      	b.n	802b940 <_dtoa_r+0x828>
 802b8de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802b8e0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802b8e4:	e795      	b.n	802b812 <_dtoa_r+0x6fa>
 802b8e6:	9b07      	ldr	r3, [sp, #28]
 802b8e8:	f109 37ff 	add.w	r7, r9, #4294967295
 802b8ec:	42bb      	cmp	r3, r7
 802b8ee:	bfbf      	itttt	lt
 802b8f0:	9b07      	ldrlt	r3, [sp, #28]
 802b8f2:	9707      	strlt	r7, [sp, #28]
 802b8f4:	1afa      	sublt	r2, r7, r3
 802b8f6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 802b8f8:	bfbb      	ittet	lt
 802b8fa:	189b      	addlt	r3, r3, r2
 802b8fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 802b8fe:	1bdf      	subge	r7, r3, r7
 802b900:	2700      	movlt	r7, #0
 802b902:	f1b9 0f00 	cmp.w	r9, #0
 802b906:	bfb5      	itete	lt
 802b908:	9b05      	ldrlt	r3, [sp, #20]
 802b90a:	9d05      	ldrge	r5, [sp, #20]
 802b90c:	eba3 0509 	sublt.w	r5, r3, r9
 802b910:	464b      	movge	r3, r9
 802b912:	bfb8      	it	lt
 802b914:	2300      	movlt	r3, #0
 802b916:	e77e      	b.n	802b816 <_dtoa_r+0x6fe>
 802b918:	9f07      	ldr	r7, [sp, #28]
 802b91a:	9d05      	ldr	r5, [sp, #20]
 802b91c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 802b91e:	e783      	b.n	802b828 <_dtoa_r+0x710>
 802b920:	9a07      	ldr	r2, [sp, #28]
 802b922:	e7ab      	b.n	802b87c <_dtoa_r+0x764>
 802b924:	2300      	movs	r3, #0
 802b926:	e7d4      	b.n	802b8d2 <_dtoa_r+0x7ba>
 802b928:	9b00      	ldr	r3, [sp, #0]
 802b92a:	e7d2      	b.n	802b8d2 <_dtoa_r+0x7ba>
 802b92c:	2300      	movs	r3, #0
 802b92e:	9307      	str	r3, [sp, #28]
 802b930:	693b      	ldr	r3, [r7, #16]
 802b932:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 802b936:	6918      	ldr	r0, [r3, #16]
 802b938:	f000 fc20 	bl	802c17c <__hi0bits>
 802b93c:	f1c0 0020 	rsb	r0, r0, #32
 802b940:	4440      	add	r0, r8
 802b942:	f010 001f 	ands.w	r0, r0, #31
 802b946:	d047      	beq.n	802b9d8 <_dtoa_r+0x8c0>
 802b948:	f1c0 0320 	rsb	r3, r0, #32
 802b94c:	2b04      	cmp	r3, #4
 802b94e:	dd3b      	ble.n	802b9c8 <_dtoa_r+0x8b0>
 802b950:	9b05      	ldr	r3, [sp, #20]
 802b952:	f1c0 001c 	rsb	r0, r0, #28
 802b956:	4403      	add	r3, r0
 802b958:	9305      	str	r3, [sp, #20]
 802b95a:	4405      	add	r5, r0
 802b95c:	4480      	add	r8, r0
 802b95e:	9b05      	ldr	r3, [sp, #20]
 802b960:	2b00      	cmp	r3, #0
 802b962:	dd05      	ble.n	802b970 <_dtoa_r+0x858>
 802b964:	461a      	mov	r2, r3
 802b966:	9904      	ldr	r1, [sp, #16]
 802b968:	4620      	mov	r0, r4
 802b96a:	f000 fd43 	bl	802c3f4 <__lshift>
 802b96e:	9004      	str	r0, [sp, #16]
 802b970:	f1b8 0f00 	cmp.w	r8, #0
 802b974:	dd05      	ble.n	802b982 <_dtoa_r+0x86a>
 802b976:	4639      	mov	r1, r7
 802b978:	4642      	mov	r2, r8
 802b97a:	4620      	mov	r0, r4
 802b97c:	f000 fd3a 	bl	802c3f4 <__lshift>
 802b980:	4607      	mov	r7, r0
 802b982:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802b984:	b353      	cbz	r3, 802b9dc <_dtoa_r+0x8c4>
 802b986:	4639      	mov	r1, r7
 802b988:	9804      	ldr	r0, [sp, #16]
 802b98a:	f000 fd87 	bl	802c49c <__mcmp>
 802b98e:	2800      	cmp	r0, #0
 802b990:	da24      	bge.n	802b9dc <_dtoa_r+0x8c4>
 802b992:	2300      	movs	r3, #0
 802b994:	220a      	movs	r2, #10
 802b996:	9904      	ldr	r1, [sp, #16]
 802b998:	4620      	mov	r0, r4
 802b99a:	f000 fbb4 	bl	802c106 <__multadd>
 802b99e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b9a0:	9004      	str	r0, [sp, #16]
 802b9a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 802b9a6:	2b00      	cmp	r3, #0
 802b9a8:	f000 814d 	beq.w	802bc46 <_dtoa_r+0xb2e>
 802b9ac:	2300      	movs	r3, #0
 802b9ae:	4631      	mov	r1, r6
 802b9b0:	220a      	movs	r2, #10
 802b9b2:	4620      	mov	r0, r4
 802b9b4:	f000 fba7 	bl	802c106 <__multadd>
 802b9b8:	9b02      	ldr	r3, [sp, #8]
 802b9ba:	2b00      	cmp	r3, #0
 802b9bc:	4606      	mov	r6, r0
 802b9be:	dc4f      	bgt.n	802ba60 <_dtoa_r+0x948>
 802b9c0:	9b06      	ldr	r3, [sp, #24]
 802b9c2:	2b02      	cmp	r3, #2
 802b9c4:	dd4c      	ble.n	802ba60 <_dtoa_r+0x948>
 802b9c6:	e011      	b.n	802b9ec <_dtoa_r+0x8d4>
 802b9c8:	d0c9      	beq.n	802b95e <_dtoa_r+0x846>
 802b9ca:	9a05      	ldr	r2, [sp, #20]
 802b9cc:	331c      	adds	r3, #28
 802b9ce:	441a      	add	r2, r3
 802b9d0:	9205      	str	r2, [sp, #20]
 802b9d2:	441d      	add	r5, r3
 802b9d4:	4498      	add	r8, r3
 802b9d6:	e7c2      	b.n	802b95e <_dtoa_r+0x846>
 802b9d8:	4603      	mov	r3, r0
 802b9da:	e7f6      	b.n	802b9ca <_dtoa_r+0x8b2>
 802b9dc:	f1b9 0f00 	cmp.w	r9, #0
 802b9e0:	dc38      	bgt.n	802ba54 <_dtoa_r+0x93c>
 802b9e2:	9b06      	ldr	r3, [sp, #24]
 802b9e4:	2b02      	cmp	r3, #2
 802b9e6:	dd35      	ble.n	802ba54 <_dtoa_r+0x93c>
 802b9e8:	f8cd 9008 	str.w	r9, [sp, #8]
 802b9ec:	9b02      	ldr	r3, [sp, #8]
 802b9ee:	b963      	cbnz	r3, 802ba0a <_dtoa_r+0x8f2>
 802b9f0:	4639      	mov	r1, r7
 802b9f2:	2205      	movs	r2, #5
 802b9f4:	4620      	mov	r0, r4
 802b9f6:	f000 fb86 	bl	802c106 <__multadd>
 802b9fa:	4601      	mov	r1, r0
 802b9fc:	4607      	mov	r7, r0
 802b9fe:	9804      	ldr	r0, [sp, #16]
 802ba00:	f000 fd4c 	bl	802c49c <__mcmp>
 802ba04:	2800      	cmp	r0, #0
 802ba06:	f73f adcc 	bgt.w	802b5a2 <_dtoa_r+0x48a>
 802ba0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802ba0c:	465d      	mov	r5, fp
 802ba0e:	ea6f 0a03 	mvn.w	sl, r3
 802ba12:	f04f 0900 	mov.w	r9, #0
 802ba16:	4639      	mov	r1, r7
 802ba18:	4620      	mov	r0, r4
 802ba1a:	f000 fb5d 	bl	802c0d8 <_Bfree>
 802ba1e:	2e00      	cmp	r6, #0
 802ba20:	f43f aeb7 	beq.w	802b792 <_dtoa_r+0x67a>
 802ba24:	f1b9 0f00 	cmp.w	r9, #0
 802ba28:	d005      	beq.n	802ba36 <_dtoa_r+0x91e>
 802ba2a:	45b1      	cmp	r9, r6
 802ba2c:	d003      	beq.n	802ba36 <_dtoa_r+0x91e>
 802ba2e:	4649      	mov	r1, r9
 802ba30:	4620      	mov	r0, r4
 802ba32:	f000 fb51 	bl	802c0d8 <_Bfree>
 802ba36:	4631      	mov	r1, r6
 802ba38:	4620      	mov	r0, r4
 802ba3a:	f000 fb4d 	bl	802c0d8 <_Bfree>
 802ba3e:	e6a8      	b.n	802b792 <_dtoa_r+0x67a>
 802ba40:	2700      	movs	r7, #0
 802ba42:	463e      	mov	r6, r7
 802ba44:	e7e1      	b.n	802ba0a <_dtoa_r+0x8f2>
 802ba46:	f8dd a020 	ldr.w	sl, [sp, #32]
 802ba4a:	463e      	mov	r6, r7
 802ba4c:	e5a9      	b.n	802b5a2 <_dtoa_r+0x48a>
 802ba4e:	bf00      	nop
 802ba50:	40240000 	.word	0x40240000
 802ba54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802ba56:	f8cd 9008 	str.w	r9, [sp, #8]
 802ba5a:	2b00      	cmp	r3, #0
 802ba5c:	f000 80fa 	beq.w	802bc54 <_dtoa_r+0xb3c>
 802ba60:	2d00      	cmp	r5, #0
 802ba62:	dd05      	ble.n	802ba70 <_dtoa_r+0x958>
 802ba64:	4631      	mov	r1, r6
 802ba66:	462a      	mov	r2, r5
 802ba68:	4620      	mov	r0, r4
 802ba6a:	f000 fcc3 	bl	802c3f4 <__lshift>
 802ba6e:	4606      	mov	r6, r0
 802ba70:	9b07      	ldr	r3, [sp, #28]
 802ba72:	2b00      	cmp	r3, #0
 802ba74:	d04c      	beq.n	802bb10 <_dtoa_r+0x9f8>
 802ba76:	6871      	ldr	r1, [r6, #4]
 802ba78:	4620      	mov	r0, r4
 802ba7a:	f000 faf9 	bl	802c070 <_Balloc>
 802ba7e:	6932      	ldr	r2, [r6, #16]
 802ba80:	3202      	adds	r2, #2
 802ba82:	4605      	mov	r5, r0
 802ba84:	0092      	lsls	r2, r2, #2
 802ba86:	f106 010c 	add.w	r1, r6, #12
 802ba8a:	300c      	adds	r0, #12
 802ba8c:	f7fe fd0c 	bl	802a4a8 <memcpy>
 802ba90:	2201      	movs	r2, #1
 802ba92:	4629      	mov	r1, r5
 802ba94:	4620      	mov	r0, r4
 802ba96:	f000 fcad 	bl	802c3f4 <__lshift>
 802ba9a:	9b00      	ldr	r3, [sp, #0]
 802ba9c:	f8cd b014 	str.w	fp, [sp, #20]
 802baa0:	f003 0301 	and.w	r3, r3, #1
 802baa4:	46b1      	mov	r9, r6
 802baa6:	9307      	str	r3, [sp, #28]
 802baa8:	4606      	mov	r6, r0
 802baaa:	4639      	mov	r1, r7
 802baac:	9804      	ldr	r0, [sp, #16]
 802baae:	f7ff faa7 	bl	802b000 <quorem>
 802bab2:	4649      	mov	r1, r9
 802bab4:	4605      	mov	r5, r0
 802bab6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 802baba:	9804      	ldr	r0, [sp, #16]
 802babc:	f000 fcee 	bl	802c49c <__mcmp>
 802bac0:	4632      	mov	r2, r6
 802bac2:	9000      	str	r0, [sp, #0]
 802bac4:	4639      	mov	r1, r7
 802bac6:	4620      	mov	r0, r4
 802bac8:	f000 fd02 	bl	802c4d0 <__mdiff>
 802bacc:	68c3      	ldr	r3, [r0, #12]
 802bace:	4602      	mov	r2, r0
 802bad0:	bb03      	cbnz	r3, 802bb14 <_dtoa_r+0x9fc>
 802bad2:	4601      	mov	r1, r0
 802bad4:	9008      	str	r0, [sp, #32]
 802bad6:	9804      	ldr	r0, [sp, #16]
 802bad8:	f000 fce0 	bl	802c49c <__mcmp>
 802badc:	9a08      	ldr	r2, [sp, #32]
 802bade:	4603      	mov	r3, r0
 802bae0:	4611      	mov	r1, r2
 802bae2:	4620      	mov	r0, r4
 802bae4:	9308      	str	r3, [sp, #32]
 802bae6:	f000 faf7 	bl	802c0d8 <_Bfree>
 802baea:	9b08      	ldr	r3, [sp, #32]
 802baec:	b9a3      	cbnz	r3, 802bb18 <_dtoa_r+0xa00>
 802baee:	9a06      	ldr	r2, [sp, #24]
 802baf0:	b992      	cbnz	r2, 802bb18 <_dtoa_r+0xa00>
 802baf2:	9a07      	ldr	r2, [sp, #28]
 802baf4:	b982      	cbnz	r2, 802bb18 <_dtoa_r+0xa00>
 802baf6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 802bafa:	d029      	beq.n	802bb50 <_dtoa_r+0xa38>
 802bafc:	9b00      	ldr	r3, [sp, #0]
 802bafe:	2b00      	cmp	r3, #0
 802bb00:	dd01      	ble.n	802bb06 <_dtoa_r+0x9ee>
 802bb02:	f105 0831 	add.w	r8, r5, #49	; 0x31
 802bb06:	9b05      	ldr	r3, [sp, #20]
 802bb08:	1c5d      	adds	r5, r3, #1
 802bb0a:	f883 8000 	strb.w	r8, [r3]
 802bb0e:	e782      	b.n	802ba16 <_dtoa_r+0x8fe>
 802bb10:	4630      	mov	r0, r6
 802bb12:	e7c2      	b.n	802ba9a <_dtoa_r+0x982>
 802bb14:	2301      	movs	r3, #1
 802bb16:	e7e3      	b.n	802bae0 <_dtoa_r+0x9c8>
 802bb18:	9a00      	ldr	r2, [sp, #0]
 802bb1a:	2a00      	cmp	r2, #0
 802bb1c:	db04      	blt.n	802bb28 <_dtoa_r+0xa10>
 802bb1e:	d125      	bne.n	802bb6c <_dtoa_r+0xa54>
 802bb20:	9a06      	ldr	r2, [sp, #24]
 802bb22:	bb1a      	cbnz	r2, 802bb6c <_dtoa_r+0xa54>
 802bb24:	9a07      	ldr	r2, [sp, #28]
 802bb26:	bb0a      	cbnz	r2, 802bb6c <_dtoa_r+0xa54>
 802bb28:	2b00      	cmp	r3, #0
 802bb2a:	ddec      	ble.n	802bb06 <_dtoa_r+0x9ee>
 802bb2c:	2201      	movs	r2, #1
 802bb2e:	9904      	ldr	r1, [sp, #16]
 802bb30:	4620      	mov	r0, r4
 802bb32:	f000 fc5f 	bl	802c3f4 <__lshift>
 802bb36:	4639      	mov	r1, r7
 802bb38:	9004      	str	r0, [sp, #16]
 802bb3a:	f000 fcaf 	bl	802c49c <__mcmp>
 802bb3e:	2800      	cmp	r0, #0
 802bb40:	dc03      	bgt.n	802bb4a <_dtoa_r+0xa32>
 802bb42:	d1e0      	bne.n	802bb06 <_dtoa_r+0x9ee>
 802bb44:	f018 0f01 	tst.w	r8, #1
 802bb48:	d0dd      	beq.n	802bb06 <_dtoa_r+0x9ee>
 802bb4a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 802bb4e:	d1d8      	bne.n	802bb02 <_dtoa_r+0x9ea>
 802bb50:	9b05      	ldr	r3, [sp, #20]
 802bb52:	9a05      	ldr	r2, [sp, #20]
 802bb54:	1c5d      	adds	r5, r3, #1
 802bb56:	2339      	movs	r3, #57	; 0x39
 802bb58:	7013      	strb	r3, [r2, #0]
 802bb5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802bb5e:	2b39      	cmp	r3, #57	; 0x39
 802bb60:	f105 32ff 	add.w	r2, r5, #4294967295
 802bb64:	d04f      	beq.n	802bc06 <_dtoa_r+0xaee>
 802bb66:	3301      	adds	r3, #1
 802bb68:	7013      	strb	r3, [r2, #0]
 802bb6a:	e754      	b.n	802ba16 <_dtoa_r+0x8fe>
 802bb6c:	9a05      	ldr	r2, [sp, #20]
 802bb6e:	2b00      	cmp	r3, #0
 802bb70:	f102 0501 	add.w	r5, r2, #1
 802bb74:	dd06      	ble.n	802bb84 <_dtoa_r+0xa6c>
 802bb76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 802bb7a:	d0e9      	beq.n	802bb50 <_dtoa_r+0xa38>
 802bb7c:	f108 0801 	add.w	r8, r8, #1
 802bb80:	9b05      	ldr	r3, [sp, #20]
 802bb82:	e7c2      	b.n	802bb0a <_dtoa_r+0x9f2>
 802bb84:	9a02      	ldr	r2, [sp, #8]
 802bb86:	f805 8c01 	strb.w	r8, [r5, #-1]
 802bb8a:	eba5 030b 	sub.w	r3, r5, fp
 802bb8e:	4293      	cmp	r3, r2
 802bb90:	d021      	beq.n	802bbd6 <_dtoa_r+0xabe>
 802bb92:	2300      	movs	r3, #0
 802bb94:	220a      	movs	r2, #10
 802bb96:	9904      	ldr	r1, [sp, #16]
 802bb98:	4620      	mov	r0, r4
 802bb9a:	f000 fab4 	bl	802c106 <__multadd>
 802bb9e:	45b1      	cmp	r9, r6
 802bba0:	9004      	str	r0, [sp, #16]
 802bba2:	f04f 0300 	mov.w	r3, #0
 802bba6:	f04f 020a 	mov.w	r2, #10
 802bbaa:	4649      	mov	r1, r9
 802bbac:	4620      	mov	r0, r4
 802bbae:	d105      	bne.n	802bbbc <_dtoa_r+0xaa4>
 802bbb0:	f000 faa9 	bl	802c106 <__multadd>
 802bbb4:	4681      	mov	r9, r0
 802bbb6:	4606      	mov	r6, r0
 802bbb8:	9505      	str	r5, [sp, #20]
 802bbba:	e776      	b.n	802baaa <_dtoa_r+0x992>
 802bbbc:	f000 faa3 	bl	802c106 <__multadd>
 802bbc0:	4631      	mov	r1, r6
 802bbc2:	4681      	mov	r9, r0
 802bbc4:	2300      	movs	r3, #0
 802bbc6:	220a      	movs	r2, #10
 802bbc8:	4620      	mov	r0, r4
 802bbca:	f000 fa9c 	bl	802c106 <__multadd>
 802bbce:	4606      	mov	r6, r0
 802bbd0:	e7f2      	b.n	802bbb8 <_dtoa_r+0xaa0>
 802bbd2:	f04f 0900 	mov.w	r9, #0
 802bbd6:	2201      	movs	r2, #1
 802bbd8:	9904      	ldr	r1, [sp, #16]
 802bbda:	4620      	mov	r0, r4
 802bbdc:	f000 fc0a 	bl	802c3f4 <__lshift>
 802bbe0:	4639      	mov	r1, r7
 802bbe2:	9004      	str	r0, [sp, #16]
 802bbe4:	f000 fc5a 	bl	802c49c <__mcmp>
 802bbe8:	2800      	cmp	r0, #0
 802bbea:	dcb6      	bgt.n	802bb5a <_dtoa_r+0xa42>
 802bbec:	d102      	bne.n	802bbf4 <_dtoa_r+0xadc>
 802bbee:	f018 0f01 	tst.w	r8, #1
 802bbf2:	d1b2      	bne.n	802bb5a <_dtoa_r+0xa42>
 802bbf4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802bbf8:	2b30      	cmp	r3, #48	; 0x30
 802bbfa:	f105 32ff 	add.w	r2, r5, #4294967295
 802bbfe:	f47f af0a 	bne.w	802ba16 <_dtoa_r+0x8fe>
 802bc02:	4615      	mov	r5, r2
 802bc04:	e7f6      	b.n	802bbf4 <_dtoa_r+0xadc>
 802bc06:	4593      	cmp	fp, r2
 802bc08:	d105      	bne.n	802bc16 <_dtoa_r+0xafe>
 802bc0a:	2331      	movs	r3, #49	; 0x31
 802bc0c:	f10a 0a01 	add.w	sl, sl, #1
 802bc10:	f88b 3000 	strb.w	r3, [fp]
 802bc14:	e6ff      	b.n	802ba16 <_dtoa_r+0x8fe>
 802bc16:	4615      	mov	r5, r2
 802bc18:	e79f      	b.n	802bb5a <_dtoa_r+0xa42>
 802bc1a:	f8df b064 	ldr.w	fp, [pc, #100]	; 802bc80 <_dtoa_r+0xb68>
 802bc1e:	e007      	b.n	802bc30 <_dtoa_r+0xb18>
 802bc20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802bc22:	f8df b060 	ldr.w	fp, [pc, #96]	; 802bc84 <_dtoa_r+0xb6c>
 802bc26:	b11b      	cbz	r3, 802bc30 <_dtoa_r+0xb18>
 802bc28:	f10b 0308 	add.w	r3, fp, #8
 802bc2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802bc2e:	6013      	str	r3, [r2, #0]
 802bc30:	4658      	mov	r0, fp
 802bc32:	b017      	add	sp, #92	; 0x5c
 802bc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bc38:	9b06      	ldr	r3, [sp, #24]
 802bc3a:	2b01      	cmp	r3, #1
 802bc3c:	f77f ae35 	ble.w	802b8aa <_dtoa_r+0x792>
 802bc40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802bc42:	9307      	str	r3, [sp, #28]
 802bc44:	e649      	b.n	802b8da <_dtoa_r+0x7c2>
 802bc46:	9b02      	ldr	r3, [sp, #8]
 802bc48:	2b00      	cmp	r3, #0
 802bc4a:	dc03      	bgt.n	802bc54 <_dtoa_r+0xb3c>
 802bc4c:	9b06      	ldr	r3, [sp, #24]
 802bc4e:	2b02      	cmp	r3, #2
 802bc50:	f73f aecc 	bgt.w	802b9ec <_dtoa_r+0x8d4>
 802bc54:	465d      	mov	r5, fp
 802bc56:	4639      	mov	r1, r7
 802bc58:	9804      	ldr	r0, [sp, #16]
 802bc5a:	f7ff f9d1 	bl	802b000 <quorem>
 802bc5e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 802bc62:	f805 8b01 	strb.w	r8, [r5], #1
 802bc66:	9a02      	ldr	r2, [sp, #8]
 802bc68:	eba5 030b 	sub.w	r3, r5, fp
 802bc6c:	429a      	cmp	r2, r3
 802bc6e:	ddb0      	ble.n	802bbd2 <_dtoa_r+0xaba>
 802bc70:	2300      	movs	r3, #0
 802bc72:	220a      	movs	r2, #10
 802bc74:	9904      	ldr	r1, [sp, #16]
 802bc76:	4620      	mov	r0, r4
 802bc78:	f000 fa45 	bl	802c106 <__multadd>
 802bc7c:	9004      	str	r0, [sp, #16]
 802bc7e:	e7ea      	b.n	802bc56 <_dtoa_r+0xb3e>
 802bc80:	0802cd0c 	.word	0x0802cd0c
 802bc84:	0802cd30 	.word	0x0802cd30

0802bc88 <__sflush_r>:
 802bc88:	898a      	ldrh	r2, [r1, #12]
 802bc8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bc8e:	4605      	mov	r5, r0
 802bc90:	0710      	lsls	r0, r2, #28
 802bc92:	460c      	mov	r4, r1
 802bc94:	d458      	bmi.n	802bd48 <__sflush_r+0xc0>
 802bc96:	684b      	ldr	r3, [r1, #4]
 802bc98:	2b00      	cmp	r3, #0
 802bc9a:	dc05      	bgt.n	802bca8 <__sflush_r+0x20>
 802bc9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802bc9e:	2b00      	cmp	r3, #0
 802bca0:	dc02      	bgt.n	802bca8 <__sflush_r+0x20>
 802bca2:	2000      	movs	r0, #0
 802bca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bca8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802bcaa:	2e00      	cmp	r6, #0
 802bcac:	d0f9      	beq.n	802bca2 <__sflush_r+0x1a>
 802bcae:	2300      	movs	r3, #0
 802bcb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802bcb4:	682f      	ldr	r7, [r5, #0]
 802bcb6:	6a21      	ldr	r1, [r4, #32]
 802bcb8:	602b      	str	r3, [r5, #0]
 802bcba:	d032      	beq.n	802bd22 <__sflush_r+0x9a>
 802bcbc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802bcbe:	89a3      	ldrh	r3, [r4, #12]
 802bcc0:	075a      	lsls	r2, r3, #29
 802bcc2:	d505      	bpl.n	802bcd0 <__sflush_r+0x48>
 802bcc4:	6863      	ldr	r3, [r4, #4]
 802bcc6:	1ac0      	subs	r0, r0, r3
 802bcc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802bcca:	b10b      	cbz	r3, 802bcd0 <__sflush_r+0x48>
 802bccc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802bcce:	1ac0      	subs	r0, r0, r3
 802bcd0:	2300      	movs	r3, #0
 802bcd2:	4602      	mov	r2, r0
 802bcd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802bcd6:	6a21      	ldr	r1, [r4, #32]
 802bcd8:	4628      	mov	r0, r5
 802bcda:	47b0      	blx	r6
 802bcdc:	1c43      	adds	r3, r0, #1
 802bcde:	89a3      	ldrh	r3, [r4, #12]
 802bce0:	d106      	bne.n	802bcf0 <__sflush_r+0x68>
 802bce2:	6829      	ldr	r1, [r5, #0]
 802bce4:	291d      	cmp	r1, #29
 802bce6:	d848      	bhi.n	802bd7a <__sflush_r+0xf2>
 802bce8:	4a29      	ldr	r2, [pc, #164]	; (802bd90 <__sflush_r+0x108>)
 802bcea:	40ca      	lsrs	r2, r1
 802bcec:	07d6      	lsls	r6, r2, #31
 802bcee:	d544      	bpl.n	802bd7a <__sflush_r+0xf2>
 802bcf0:	2200      	movs	r2, #0
 802bcf2:	6062      	str	r2, [r4, #4]
 802bcf4:	04d9      	lsls	r1, r3, #19
 802bcf6:	6922      	ldr	r2, [r4, #16]
 802bcf8:	6022      	str	r2, [r4, #0]
 802bcfa:	d504      	bpl.n	802bd06 <__sflush_r+0x7e>
 802bcfc:	1c42      	adds	r2, r0, #1
 802bcfe:	d101      	bne.n	802bd04 <__sflush_r+0x7c>
 802bd00:	682b      	ldr	r3, [r5, #0]
 802bd02:	b903      	cbnz	r3, 802bd06 <__sflush_r+0x7e>
 802bd04:	6560      	str	r0, [r4, #84]	; 0x54
 802bd06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802bd08:	602f      	str	r7, [r5, #0]
 802bd0a:	2900      	cmp	r1, #0
 802bd0c:	d0c9      	beq.n	802bca2 <__sflush_r+0x1a>
 802bd0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802bd12:	4299      	cmp	r1, r3
 802bd14:	d002      	beq.n	802bd1c <__sflush_r+0x94>
 802bd16:	4628      	mov	r0, r5
 802bd18:	f000 fc94 	bl	802c644 <_free_r>
 802bd1c:	2000      	movs	r0, #0
 802bd1e:	6360      	str	r0, [r4, #52]	; 0x34
 802bd20:	e7c0      	b.n	802bca4 <__sflush_r+0x1c>
 802bd22:	2301      	movs	r3, #1
 802bd24:	4628      	mov	r0, r5
 802bd26:	47b0      	blx	r6
 802bd28:	1c41      	adds	r1, r0, #1
 802bd2a:	d1c8      	bne.n	802bcbe <__sflush_r+0x36>
 802bd2c:	682b      	ldr	r3, [r5, #0]
 802bd2e:	2b00      	cmp	r3, #0
 802bd30:	d0c5      	beq.n	802bcbe <__sflush_r+0x36>
 802bd32:	2b1d      	cmp	r3, #29
 802bd34:	d001      	beq.n	802bd3a <__sflush_r+0xb2>
 802bd36:	2b16      	cmp	r3, #22
 802bd38:	d101      	bne.n	802bd3e <__sflush_r+0xb6>
 802bd3a:	602f      	str	r7, [r5, #0]
 802bd3c:	e7b1      	b.n	802bca2 <__sflush_r+0x1a>
 802bd3e:	89a3      	ldrh	r3, [r4, #12]
 802bd40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802bd44:	81a3      	strh	r3, [r4, #12]
 802bd46:	e7ad      	b.n	802bca4 <__sflush_r+0x1c>
 802bd48:	690f      	ldr	r7, [r1, #16]
 802bd4a:	2f00      	cmp	r7, #0
 802bd4c:	d0a9      	beq.n	802bca2 <__sflush_r+0x1a>
 802bd4e:	0793      	lsls	r3, r2, #30
 802bd50:	680e      	ldr	r6, [r1, #0]
 802bd52:	bf08      	it	eq
 802bd54:	694b      	ldreq	r3, [r1, #20]
 802bd56:	600f      	str	r7, [r1, #0]
 802bd58:	bf18      	it	ne
 802bd5a:	2300      	movne	r3, #0
 802bd5c:	eba6 0807 	sub.w	r8, r6, r7
 802bd60:	608b      	str	r3, [r1, #8]
 802bd62:	f1b8 0f00 	cmp.w	r8, #0
 802bd66:	dd9c      	ble.n	802bca2 <__sflush_r+0x1a>
 802bd68:	4643      	mov	r3, r8
 802bd6a:	463a      	mov	r2, r7
 802bd6c:	6a21      	ldr	r1, [r4, #32]
 802bd6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802bd70:	4628      	mov	r0, r5
 802bd72:	47b0      	blx	r6
 802bd74:	2800      	cmp	r0, #0
 802bd76:	dc06      	bgt.n	802bd86 <__sflush_r+0xfe>
 802bd78:	89a3      	ldrh	r3, [r4, #12]
 802bd7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802bd7e:	81a3      	strh	r3, [r4, #12]
 802bd80:	f04f 30ff 	mov.w	r0, #4294967295
 802bd84:	e78e      	b.n	802bca4 <__sflush_r+0x1c>
 802bd86:	4407      	add	r7, r0
 802bd88:	eba8 0800 	sub.w	r8, r8, r0
 802bd8c:	e7e9      	b.n	802bd62 <__sflush_r+0xda>
 802bd8e:	bf00      	nop
 802bd90:	20400001 	.word	0x20400001

0802bd94 <_fflush_r>:
 802bd94:	b538      	push	{r3, r4, r5, lr}
 802bd96:	690b      	ldr	r3, [r1, #16]
 802bd98:	4605      	mov	r5, r0
 802bd9a:	460c      	mov	r4, r1
 802bd9c:	b1db      	cbz	r3, 802bdd6 <_fflush_r+0x42>
 802bd9e:	b118      	cbz	r0, 802bda8 <_fflush_r+0x14>
 802bda0:	6983      	ldr	r3, [r0, #24]
 802bda2:	b90b      	cbnz	r3, 802bda8 <_fflush_r+0x14>
 802bda4:	f000 f860 	bl	802be68 <__sinit>
 802bda8:	4b0c      	ldr	r3, [pc, #48]	; (802bddc <_fflush_r+0x48>)
 802bdaa:	429c      	cmp	r4, r3
 802bdac:	d109      	bne.n	802bdc2 <_fflush_r+0x2e>
 802bdae:	686c      	ldr	r4, [r5, #4]
 802bdb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bdb4:	b17b      	cbz	r3, 802bdd6 <_fflush_r+0x42>
 802bdb6:	4621      	mov	r1, r4
 802bdb8:	4628      	mov	r0, r5
 802bdba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802bdbe:	f7ff bf63 	b.w	802bc88 <__sflush_r>
 802bdc2:	4b07      	ldr	r3, [pc, #28]	; (802bde0 <_fflush_r+0x4c>)
 802bdc4:	429c      	cmp	r4, r3
 802bdc6:	d101      	bne.n	802bdcc <_fflush_r+0x38>
 802bdc8:	68ac      	ldr	r4, [r5, #8]
 802bdca:	e7f1      	b.n	802bdb0 <_fflush_r+0x1c>
 802bdcc:	4b05      	ldr	r3, [pc, #20]	; (802bde4 <_fflush_r+0x50>)
 802bdce:	429c      	cmp	r4, r3
 802bdd0:	bf08      	it	eq
 802bdd2:	68ec      	ldreq	r4, [r5, #12]
 802bdd4:	e7ec      	b.n	802bdb0 <_fflush_r+0x1c>
 802bdd6:	2000      	movs	r0, #0
 802bdd8:	bd38      	pop	{r3, r4, r5, pc}
 802bdda:	bf00      	nop
 802bddc:	0802cd60 	.word	0x0802cd60
 802bde0:	0802cd80 	.word	0x0802cd80
 802bde4:	0802cd40 	.word	0x0802cd40

0802bde8 <std>:
 802bde8:	2300      	movs	r3, #0
 802bdea:	b510      	push	{r4, lr}
 802bdec:	4604      	mov	r4, r0
 802bdee:	e9c0 3300 	strd	r3, r3, [r0]
 802bdf2:	6083      	str	r3, [r0, #8]
 802bdf4:	8181      	strh	r1, [r0, #12]
 802bdf6:	6643      	str	r3, [r0, #100]	; 0x64
 802bdf8:	81c2      	strh	r2, [r0, #14]
 802bdfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802bdfe:	6183      	str	r3, [r0, #24]
 802be00:	4619      	mov	r1, r3
 802be02:	2208      	movs	r2, #8
 802be04:	305c      	adds	r0, #92	; 0x5c
 802be06:	f7fe fb5a 	bl	802a4be <memset>
 802be0a:	4b05      	ldr	r3, [pc, #20]	; (802be20 <std+0x38>)
 802be0c:	6263      	str	r3, [r4, #36]	; 0x24
 802be0e:	4b05      	ldr	r3, [pc, #20]	; (802be24 <std+0x3c>)
 802be10:	62a3      	str	r3, [r4, #40]	; 0x28
 802be12:	4b05      	ldr	r3, [pc, #20]	; (802be28 <std+0x40>)
 802be14:	62e3      	str	r3, [r4, #44]	; 0x2c
 802be16:	4b05      	ldr	r3, [pc, #20]	; (802be2c <std+0x44>)
 802be18:	6224      	str	r4, [r4, #32]
 802be1a:	6323      	str	r3, [r4, #48]	; 0x30
 802be1c:	bd10      	pop	{r4, pc}
 802be1e:	bf00      	nop
 802be20:	0802ca35 	.word	0x0802ca35
 802be24:	0802ca57 	.word	0x0802ca57
 802be28:	0802ca8f 	.word	0x0802ca8f
 802be2c:	0802cab3 	.word	0x0802cab3

0802be30 <_cleanup_r>:
 802be30:	4901      	ldr	r1, [pc, #4]	; (802be38 <_cleanup_r+0x8>)
 802be32:	f000 b885 	b.w	802bf40 <_fwalk_reent>
 802be36:	bf00      	nop
 802be38:	0802bd95 	.word	0x0802bd95

0802be3c <__sfmoreglue>:
 802be3c:	b570      	push	{r4, r5, r6, lr}
 802be3e:	1e4a      	subs	r2, r1, #1
 802be40:	2568      	movs	r5, #104	; 0x68
 802be42:	4355      	muls	r5, r2
 802be44:	460e      	mov	r6, r1
 802be46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802be4a:	f000 fc49 	bl	802c6e0 <_malloc_r>
 802be4e:	4604      	mov	r4, r0
 802be50:	b140      	cbz	r0, 802be64 <__sfmoreglue+0x28>
 802be52:	2100      	movs	r1, #0
 802be54:	e9c0 1600 	strd	r1, r6, [r0]
 802be58:	300c      	adds	r0, #12
 802be5a:	60a0      	str	r0, [r4, #8]
 802be5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802be60:	f7fe fb2d 	bl	802a4be <memset>
 802be64:	4620      	mov	r0, r4
 802be66:	bd70      	pop	{r4, r5, r6, pc}

0802be68 <__sinit>:
 802be68:	6983      	ldr	r3, [r0, #24]
 802be6a:	b510      	push	{r4, lr}
 802be6c:	4604      	mov	r4, r0
 802be6e:	bb33      	cbnz	r3, 802bebe <__sinit+0x56>
 802be70:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 802be74:	6503      	str	r3, [r0, #80]	; 0x50
 802be76:	4b12      	ldr	r3, [pc, #72]	; (802bec0 <__sinit+0x58>)
 802be78:	4a12      	ldr	r2, [pc, #72]	; (802bec4 <__sinit+0x5c>)
 802be7a:	681b      	ldr	r3, [r3, #0]
 802be7c:	6282      	str	r2, [r0, #40]	; 0x28
 802be7e:	4298      	cmp	r0, r3
 802be80:	bf04      	itt	eq
 802be82:	2301      	moveq	r3, #1
 802be84:	6183      	streq	r3, [r0, #24]
 802be86:	f000 f81f 	bl	802bec8 <__sfp>
 802be8a:	6060      	str	r0, [r4, #4]
 802be8c:	4620      	mov	r0, r4
 802be8e:	f000 f81b 	bl	802bec8 <__sfp>
 802be92:	60a0      	str	r0, [r4, #8]
 802be94:	4620      	mov	r0, r4
 802be96:	f000 f817 	bl	802bec8 <__sfp>
 802be9a:	2200      	movs	r2, #0
 802be9c:	60e0      	str	r0, [r4, #12]
 802be9e:	2104      	movs	r1, #4
 802bea0:	6860      	ldr	r0, [r4, #4]
 802bea2:	f7ff ffa1 	bl	802bde8 <std>
 802bea6:	2201      	movs	r2, #1
 802bea8:	2109      	movs	r1, #9
 802beaa:	68a0      	ldr	r0, [r4, #8]
 802beac:	f7ff ff9c 	bl	802bde8 <std>
 802beb0:	2202      	movs	r2, #2
 802beb2:	2112      	movs	r1, #18
 802beb4:	68e0      	ldr	r0, [r4, #12]
 802beb6:	f7ff ff97 	bl	802bde8 <std>
 802beba:	2301      	movs	r3, #1
 802bebc:	61a3      	str	r3, [r4, #24]
 802bebe:	bd10      	pop	{r4, pc}
 802bec0:	0802ccf8 	.word	0x0802ccf8
 802bec4:	0802be31 	.word	0x0802be31

0802bec8 <__sfp>:
 802bec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802beca:	4b1b      	ldr	r3, [pc, #108]	; (802bf38 <__sfp+0x70>)
 802becc:	681e      	ldr	r6, [r3, #0]
 802bece:	69b3      	ldr	r3, [r6, #24]
 802bed0:	4607      	mov	r7, r0
 802bed2:	b913      	cbnz	r3, 802beda <__sfp+0x12>
 802bed4:	4630      	mov	r0, r6
 802bed6:	f7ff ffc7 	bl	802be68 <__sinit>
 802beda:	3648      	adds	r6, #72	; 0x48
 802bedc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802bee0:	3b01      	subs	r3, #1
 802bee2:	d503      	bpl.n	802beec <__sfp+0x24>
 802bee4:	6833      	ldr	r3, [r6, #0]
 802bee6:	b133      	cbz	r3, 802bef6 <__sfp+0x2e>
 802bee8:	6836      	ldr	r6, [r6, #0]
 802beea:	e7f7      	b.n	802bedc <__sfp+0x14>
 802beec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802bef0:	b16d      	cbz	r5, 802bf0e <__sfp+0x46>
 802bef2:	3468      	adds	r4, #104	; 0x68
 802bef4:	e7f4      	b.n	802bee0 <__sfp+0x18>
 802bef6:	2104      	movs	r1, #4
 802bef8:	4638      	mov	r0, r7
 802befa:	f7ff ff9f 	bl	802be3c <__sfmoreglue>
 802befe:	6030      	str	r0, [r6, #0]
 802bf00:	2800      	cmp	r0, #0
 802bf02:	d1f1      	bne.n	802bee8 <__sfp+0x20>
 802bf04:	230c      	movs	r3, #12
 802bf06:	603b      	str	r3, [r7, #0]
 802bf08:	4604      	mov	r4, r0
 802bf0a:	4620      	mov	r0, r4
 802bf0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802bf0e:	4b0b      	ldr	r3, [pc, #44]	; (802bf3c <__sfp+0x74>)
 802bf10:	6665      	str	r5, [r4, #100]	; 0x64
 802bf12:	e9c4 5500 	strd	r5, r5, [r4]
 802bf16:	60a5      	str	r5, [r4, #8]
 802bf18:	e9c4 3503 	strd	r3, r5, [r4, #12]
 802bf1c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 802bf20:	2208      	movs	r2, #8
 802bf22:	4629      	mov	r1, r5
 802bf24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802bf28:	f7fe fac9 	bl	802a4be <memset>
 802bf2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802bf30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802bf34:	e7e9      	b.n	802bf0a <__sfp+0x42>
 802bf36:	bf00      	nop
 802bf38:	0802ccf8 	.word	0x0802ccf8
 802bf3c:	ffff0001 	.word	0xffff0001

0802bf40 <_fwalk_reent>:
 802bf40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802bf44:	4680      	mov	r8, r0
 802bf46:	4689      	mov	r9, r1
 802bf48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802bf4c:	2600      	movs	r6, #0
 802bf4e:	b914      	cbnz	r4, 802bf56 <_fwalk_reent+0x16>
 802bf50:	4630      	mov	r0, r6
 802bf52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802bf56:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 802bf5a:	3f01      	subs	r7, #1
 802bf5c:	d501      	bpl.n	802bf62 <_fwalk_reent+0x22>
 802bf5e:	6824      	ldr	r4, [r4, #0]
 802bf60:	e7f5      	b.n	802bf4e <_fwalk_reent+0xe>
 802bf62:	89ab      	ldrh	r3, [r5, #12]
 802bf64:	2b01      	cmp	r3, #1
 802bf66:	d907      	bls.n	802bf78 <_fwalk_reent+0x38>
 802bf68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802bf6c:	3301      	adds	r3, #1
 802bf6e:	d003      	beq.n	802bf78 <_fwalk_reent+0x38>
 802bf70:	4629      	mov	r1, r5
 802bf72:	4640      	mov	r0, r8
 802bf74:	47c8      	blx	r9
 802bf76:	4306      	orrs	r6, r0
 802bf78:	3568      	adds	r5, #104	; 0x68
 802bf7a:	e7ee      	b.n	802bf5a <_fwalk_reent+0x1a>

0802bf7c <_localeconv_r>:
 802bf7c:	4b04      	ldr	r3, [pc, #16]	; (802bf90 <_localeconv_r+0x14>)
 802bf7e:	681b      	ldr	r3, [r3, #0]
 802bf80:	6a18      	ldr	r0, [r3, #32]
 802bf82:	4b04      	ldr	r3, [pc, #16]	; (802bf94 <_localeconv_r+0x18>)
 802bf84:	2800      	cmp	r0, #0
 802bf86:	bf08      	it	eq
 802bf88:	4618      	moveq	r0, r3
 802bf8a:	30f0      	adds	r0, #240	; 0xf0
 802bf8c:	4770      	bx	lr
 802bf8e:	bf00      	nop
 802bf90:	20000010 	.word	0x20000010
 802bf94:	20000074 	.word	0x20000074

0802bf98 <__swhatbuf_r>:
 802bf98:	b570      	push	{r4, r5, r6, lr}
 802bf9a:	460e      	mov	r6, r1
 802bf9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802bfa0:	2900      	cmp	r1, #0
 802bfa2:	b096      	sub	sp, #88	; 0x58
 802bfa4:	4614      	mov	r4, r2
 802bfa6:	461d      	mov	r5, r3
 802bfa8:	da07      	bge.n	802bfba <__swhatbuf_r+0x22>
 802bfaa:	2300      	movs	r3, #0
 802bfac:	602b      	str	r3, [r5, #0]
 802bfae:	89b3      	ldrh	r3, [r6, #12]
 802bfb0:	061a      	lsls	r2, r3, #24
 802bfb2:	d410      	bmi.n	802bfd6 <__swhatbuf_r+0x3e>
 802bfb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802bfb8:	e00e      	b.n	802bfd8 <__swhatbuf_r+0x40>
 802bfba:	466a      	mov	r2, sp
 802bfbc:	f000 fda0 	bl	802cb00 <_fstat_r>
 802bfc0:	2800      	cmp	r0, #0
 802bfc2:	dbf2      	blt.n	802bfaa <__swhatbuf_r+0x12>
 802bfc4:	9a01      	ldr	r2, [sp, #4]
 802bfc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802bfca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802bfce:	425a      	negs	r2, r3
 802bfd0:	415a      	adcs	r2, r3
 802bfd2:	602a      	str	r2, [r5, #0]
 802bfd4:	e7ee      	b.n	802bfb4 <__swhatbuf_r+0x1c>
 802bfd6:	2340      	movs	r3, #64	; 0x40
 802bfd8:	2000      	movs	r0, #0
 802bfda:	6023      	str	r3, [r4, #0]
 802bfdc:	b016      	add	sp, #88	; 0x58
 802bfde:	bd70      	pop	{r4, r5, r6, pc}

0802bfe0 <__smakebuf_r>:
 802bfe0:	898b      	ldrh	r3, [r1, #12]
 802bfe2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802bfe4:	079d      	lsls	r5, r3, #30
 802bfe6:	4606      	mov	r6, r0
 802bfe8:	460c      	mov	r4, r1
 802bfea:	d507      	bpl.n	802bffc <__smakebuf_r+0x1c>
 802bfec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802bff0:	6023      	str	r3, [r4, #0]
 802bff2:	6123      	str	r3, [r4, #16]
 802bff4:	2301      	movs	r3, #1
 802bff6:	6163      	str	r3, [r4, #20]
 802bff8:	b002      	add	sp, #8
 802bffa:	bd70      	pop	{r4, r5, r6, pc}
 802bffc:	ab01      	add	r3, sp, #4
 802bffe:	466a      	mov	r2, sp
 802c000:	f7ff ffca 	bl	802bf98 <__swhatbuf_r>
 802c004:	9900      	ldr	r1, [sp, #0]
 802c006:	4605      	mov	r5, r0
 802c008:	4630      	mov	r0, r6
 802c00a:	f000 fb69 	bl	802c6e0 <_malloc_r>
 802c00e:	b948      	cbnz	r0, 802c024 <__smakebuf_r+0x44>
 802c010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c014:	059a      	lsls	r2, r3, #22
 802c016:	d4ef      	bmi.n	802bff8 <__smakebuf_r+0x18>
 802c018:	f023 0303 	bic.w	r3, r3, #3
 802c01c:	f043 0302 	orr.w	r3, r3, #2
 802c020:	81a3      	strh	r3, [r4, #12]
 802c022:	e7e3      	b.n	802bfec <__smakebuf_r+0xc>
 802c024:	4b0d      	ldr	r3, [pc, #52]	; (802c05c <__smakebuf_r+0x7c>)
 802c026:	62b3      	str	r3, [r6, #40]	; 0x28
 802c028:	89a3      	ldrh	r3, [r4, #12]
 802c02a:	6020      	str	r0, [r4, #0]
 802c02c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802c030:	81a3      	strh	r3, [r4, #12]
 802c032:	9b00      	ldr	r3, [sp, #0]
 802c034:	6163      	str	r3, [r4, #20]
 802c036:	9b01      	ldr	r3, [sp, #4]
 802c038:	6120      	str	r0, [r4, #16]
 802c03a:	b15b      	cbz	r3, 802c054 <__smakebuf_r+0x74>
 802c03c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802c040:	4630      	mov	r0, r6
 802c042:	f000 fd6f 	bl	802cb24 <_isatty_r>
 802c046:	b128      	cbz	r0, 802c054 <__smakebuf_r+0x74>
 802c048:	89a3      	ldrh	r3, [r4, #12]
 802c04a:	f023 0303 	bic.w	r3, r3, #3
 802c04e:	f043 0301 	orr.w	r3, r3, #1
 802c052:	81a3      	strh	r3, [r4, #12]
 802c054:	89a3      	ldrh	r3, [r4, #12]
 802c056:	431d      	orrs	r5, r3
 802c058:	81a5      	strh	r5, [r4, #12]
 802c05a:	e7cd      	b.n	802bff8 <__smakebuf_r+0x18>
 802c05c:	0802be31 	.word	0x0802be31

0802c060 <malloc>:
 802c060:	4b02      	ldr	r3, [pc, #8]	; (802c06c <malloc+0xc>)
 802c062:	4601      	mov	r1, r0
 802c064:	6818      	ldr	r0, [r3, #0]
 802c066:	f000 bb3b 	b.w	802c6e0 <_malloc_r>
 802c06a:	bf00      	nop
 802c06c:	20000010 	.word	0x20000010

0802c070 <_Balloc>:
 802c070:	b570      	push	{r4, r5, r6, lr}
 802c072:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802c074:	4604      	mov	r4, r0
 802c076:	460e      	mov	r6, r1
 802c078:	b93d      	cbnz	r5, 802c08a <_Balloc+0x1a>
 802c07a:	2010      	movs	r0, #16
 802c07c:	f7ff fff0 	bl	802c060 <malloc>
 802c080:	6260      	str	r0, [r4, #36]	; 0x24
 802c082:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802c086:	6005      	str	r5, [r0, #0]
 802c088:	60c5      	str	r5, [r0, #12]
 802c08a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 802c08c:	68eb      	ldr	r3, [r5, #12]
 802c08e:	b183      	cbz	r3, 802c0b2 <_Balloc+0x42>
 802c090:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802c092:	68db      	ldr	r3, [r3, #12]
 802c094:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 802c098:	b9b8      	cbnz	r0, 802c0ca <_Balloc+0x5a>
 802c09a:	2101      	movs	r1, #1
 802c09c:	fa01 f506 	lsl.w	r5, r1, r6
 802c0a0:	1d6a      	adds	r2, r5, #5
 802c0a2:	0092      	lsls	r2, r2, #2
 802c0a4:	4620      	mov	r0, r4
 802c0a6:	f000 fabf 	bl	802c628 <_calloc_r>
 802c0aa:	b160      	cbz	r0, 802c0c6 <_Balloc+0x56>
 802c0ac:	e9c0 6501 	strd	r6, r5, [r0, #4]
 802c0b0:	e00e      	b.n	802c0d0 <_Balloc+0x60>
 802c0b2:	2221      	movs	r2, #33	; 0x21
 802c0b4:	2104      	movs	r1, #4
 802c0b6:	4620      	mov	r0, r4
 802c0b8:	f000 fab6 	bl	802c628 <_calloc_r>
 802c0bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802c0be:	60e8      	str	r0, [r5, #12]
 802c0c0:	68db      	ldr	r3, [r3, #12]
 802c0c2:	2b00      	cmp	r3, #0
 802c0c4:	d1e4      	bne.n	802c090 <_Balloc+0x20>
 802c0c6:	2000      	movs	r0, #0
 802c0c8:	bd70      	pop	{r4, r5, r6, pc}
 802c0ca:	6802      	ldr	r2, [r0, #0]
 802c0cc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 802c0d0:	2300      	movs	r3, #0
 802c0d2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802c0d6:	e7f7      	b.n	802c0c8 <_Balloc+0x58>

0802c0d8 <_Bfree>:
 802c0d8:	b570      	push	{r4, r5, r6, lr}
 802c0da:	6a44      	ldr	r4, [r0, #36]	; 0x24
 802c0dc:	4606      	mov	r6, r0
 802c0de:	460d      	mov	r5, r1
 802c0e0:	b93c      	cbnz	r4, 802c0f2 <_Bfree+0x1a>
 802c0e2:	2010      	movs	r0, #16
 802c0e4:	f7ff ffbc 	bl	802c060 <malloc>
 802c0e8:	6270      	str	r0, [r6, #36]	; 0x24
 802c0ea:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802c0ee:	6004      	str	r4, [r0, #0]
 802c0f0:	60c4      	str	r4, [r0, #12]
 802c0f2:	b13d      	cbz	r5, 802c104 <_Bfree+0x2c>
 802c0f4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 802c0f6:	686a      	ldr	r2, [r5, #4]
 802c0f8:	68db      	ldr	r3, [r3, #12]
 802c0fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802c0fe:	6029      	str	r1, [r5, #0]
 802c100:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 802c104:	bd70      	pop	{r4, r5, r6, pc}

0802c106 <__multadd>:
 802c106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c10a:	690d      	ldr	r5, [r1, #16]
 802c10c:	461f      	mov	r7, r3
 802c10e:	4606      	mov	r6, r0
 802c110:	460c      	mov	r4, r1
 802c112:	f101 0c14 	add.w	ip, r1, #20
 802c116:	2300      	movs	r3, #0
 802c118:	f8dc 0000 	ldr.w	r0, [ip]
 802c11c:	b281      	uxth	r1, r0
 802c11e:	fb02 7101 	mla	r1, r2, r1, r7
 802c122:	0c0f      	lsrs	r7, r1, #16
 802c124:	0c00      	lsrs	r0, r0, #16
 802c126:	fb02 7000 	mla	r0, r2, r0, r7
 802c12a:	b289      	uxth	r1, r1
 802c12c:	3301      	adds	r3, #1
 802c12e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 802c132:	429d      	cmp	r5, r3
 802c134:	ea4f 4710 	mov.w	r7, r0, lsr #16
 802c138:	f84c 1b04 	str.w	r1, [ip], #4
 802c13c:	dcec      	bgt.n	802c118 <__multadd+0x12>
 802c13e:	b1d7      	cbz	r7, 802c176 <__multadd+0x70>
 802c140:	68a3      	ldr	r3, [r4, #8]
 802c142:	42ab      	cmp	r3, r5
 802c144:	dc12      	bgt.n	802c16c <__multadd+0x66>
 802c146:	6861      	ldr	r1, [r4, #4]
 802c148:	4630      	mov	r0, r6
 802c14a:	3101      	adds	r1, #1
 802c14c:	f7ff ff90 	bl	802c070 <_Balloc>
 802c150:	6922      	ldr	r2, [r4, #16]
 802c152:	3202      	adds	r2, #2
 802c154:	f104 010c 	add.w	r1, r4, #12
 802c158:	4680      	mov	r8, r0
 802c15a:	0092      	lsls	r2, r2, #2
 802c15c:	300c      	adds	r0, #12
 802c15e:	f7fe f9a3 	bl	802a4a8 <memcpy>
 802c162:	4621      	mov	r1, r4
 802c164:	4630      	mov	r0, r6
 802c166:	f7ff ffb7 	bl	802c0d8 <_Bfree>
 802c16a:	4644      	mov	r4, r8
 802c16c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802c170:	3501      	adds	r5, #1
 802c172:	615f      	str	r7, [r3, #20]
 802c174:	6125      	str	r5, [r4, #16]
 802c176:	4620      	mov	r0, r4
 802c178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802c17c <__hi0bits>:
 802c17c:	0c02      	lsrs	r2, r0, #16
 802c17e:	0412      	lsls	r2, r2, #16
 802c180:	4603      	mov	r3, r0
 802c182:	b9b2      	cbnz	r2, 802c1b2 <__hi0bits+0x36>
 802c184:	0403      	lsls	r3, r0, #16
 802c186:	2010      	movs	r0, #16
 802c188:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 802c18c:	bf04      	itt	eq
 802c18e:	021b      	lsleq	r3, r3, #8
 802c190:	3008      	addeq	r0, #8
 802c192:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 802c196:	bf04      	itt	eq
 802c198:	011b      	lsleq	r3, r3, #4
 802c19a:	3004      	addeq	r0, #4
 802c19c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 802c1a0:	bf04      	itt	eq
 802c1a2:	009b      	lsleq	r3, r3, #2
 802c1a4:	3002      	addeq	r0, #2
 802c1a6:	2b00      	cmp	r3, #0
 802c1a8:	db06      	blt.n	802c1b8 <__hi0bits+0x3c>
 802c1aa:	005b      	lsls	r3, r3, #1
 802c1ac:	d503      	bpl.n	802c1b6 <__hi0bits+0x3a>
 802c1ae:	3001      	adds	r0, #1
 802c1b0:	4770      	bx	lr
 802c1b2:	2000      	movs	r0, #0
 802c1b4:	e7e8      	b.n	802c188 <__hi0bits+0xc>
 802c1b6:	2020      	movs	r0, #32
 802c1b8:	4770      	bx	lr

0802c1ba <__lo0bits>:
 802c1ba:	6803      	ldr	r3, [r0, #0]
 802c1bc:	f013 0207 	ands.w	r2, r3, #7
 802c1c0:	4601      	mov	r1, r0
 802c1c2:	d00b      	beq.n	802c1dc <__lo0bits+0x22>
 802c1c4:	07da      	lsls	r2, r3, #31
 802c1c6:	d423      	bmi.n	802c210 <__lo0bits+0x56>
 802c1c8:	0798      	lsls	r0, r3, #30
 802c1ca:	bf49      	itett	mi
 802c1cc:	085b      	lsrmi	r3, r3, #1
 802c1ce:	089b      	lsrpl	r3, r3, #2
 802c1d0:	2001      	movmi	r0, #1
 802c1d2:	600b      	strmi	r3, [r1, #0]
 802c1d4:	bf5c      	itt	pl
 802c1d6:	600b      	strpl	r3, [r1, #0]
 802c1d8:	2002      	movpl	r0, #2
 802c1da:	4770      	bx	lr
 802c1dc:	b298      	uxth	r0, r3
 802c1de:	b9a8      	cbnz	r0, 802c20c <__lo0bits+0x52>
 802c1e0:	0c1b      	lsrs	r3, r3, #16
 802c1e2:	2010      	movs	r0, #16
 802c1e4:	f013 0fff 	tst.w	r3, #255	; 0xff
 802c1e8:	bf04      	itt	eq
 802c1ea:	0a1b      	lsreq	r3, r3, #8
 802c1ec:	3008      	addeq	r0, #8
 802c1ee:	071a      	lsls	r2, r3, #28
 802c1f0:	bf04      	itt	eq
 802c1f2:	091b      	lsreq	r3, r3, #4
 802c1f4:	3004      	addeq	r0, #4
 802c1f6:	079a      	lsls	r2, r3, #30
 802c1f8:	bf04      	itt	eq
 802c1fa:	089b      	lsreq	r3, r3, #2
 802c1fc:	3002      	addeq	r0, #2
 802c1fe:	07da      	lsls	r2, r3, #31
 802c200:	d402      	bmi.n	802c208 <__lo0bits+0x4e>
 802c202:	085b      	lsrs	r3, r3, #1
 802c204:	d006      	beq.n	802c214 <__lo0bits+0x5a>
 802c206:	3001      	adds	r0, #1
 802c208:	600b      	str	r3, [r1, #0]
 802c20a:	4770      	bx	lr
 802c20c:	4610      	mov	r0, r2
 802c20e:	e7e9      	b.n	802c1e4 <__lo0bits+0x2a>
 802c210:	2000      	movs	r0, #0
 802c212:	4770      	bx	lr
 802c214:	2020      	movs	r0, #32
 802c216:	4770      	bx	lr

0802c218 <__i2b>:
 802c218:	b510      	push	{r4, lr}
 802c21a:	460c      	mov	r4, r1
 802c21c:	2101      	movs	r1, #1
 802c21e:	f7ff ff27 	bl	802c070 <_Balloc>
 802c222:	2201      	movs	r2, #1
 802c224:	6144      	str	r4, [r0, #20]
 802c226:	6102      	str	r2, [r0, #16]
 802c228:	bd10      	pop	{r4, pc}

0802c22a <__multiply>:
 802c22a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c22e:	4614      	mov	r4, r2
 802c230:	690a      	ldr	r2, [r1, #16]
 802c232:	6923      	ldr	r3, [r4, #16]
 802c234:	429a      	cmp	r2, r3
 802c236:	bfb8      	it	lt
 802c238:	460b      	movlt	r3, r1
 802c23a:	4688      	mov	r8, r1
 802c23c:	bfbc      	itt	lt
 802c23e:	46a0      	movlt	r8, r4
 802c240:	461c      	movlt	r4, r3
 802c242:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802c246:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802c24a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802c24e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802c252:	eb07 0609 	add.w	r6, r7, r9
 802c256:	42b3      	cmp	r3, r6
 802c258:	bfb8      	it	lt
 802c25a:	3101      	addlt	r1, #1
 802c25c:	f7ff ff08 	bl	802c070 <_Balloc>
 802c260:	f100 0514 	add.w	r5, r0, #20
 802c264:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 802c268:	462b      	mov	r3, r5
 802c26a:	2200      	movs	r2, #0
 802c26c:	4573      	cmp	r3, lr
 802c26e:	d316      	bcc.n	802c29e <__multiply+0x74>
 802c270:	f104 0214 	add.w	r2, r4, #20
 802c274:	f108 0114 	add.w	r1, r8, #20
 802c278:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 802c27c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 802c280:	9300      	str	r3, [sp, #0]
 802c282:	9b00      	ldr	r3, [sp, #0]
 802c284:	9201      	str	r2, [sp, #4]
 802c286:	4293      	cmp	r3, r2
 802c288:	d80c      	bhi.n	802c2a4 <__multiply+0x7a>
 802c28a:	2e00      	cmp	r6, #0
 802c28c:	dd03      	ble.n	802c296 <__multiply+0x6c>
 802c28e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 802c292:	2b00      	cmp	r3, #0
 802c294:	d05d      	beq.n	802c352 <__multiply+0x128>
 802c296:	6106      	str	r6, [r0, #16]
 802c298:	b003      	add	sp, #12
 802c29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c29e:	f843 2b04 	str.w	r2, [r3], #4
 802c2a2:	e7e3      	b.n	802c26c <__multiply+0x42>
 802c2a4:	f8b2 b000 	ldrh.w	fp, [r2]
 802c2a8:	f1bb 0f00 	cmp.w	fp, #0
 802c2ac:	d023      	beq.n	802c2f6 <__multiply+0xcc>
 802c2ae:	4689      	mov	r9, r1
 802c2b0:	46ac      	mov	ip, r5
 802c2b2:	f04f 0800 	mov.w	r8, #0
 802c2b6:	f859 4b04 	ldr.w	r4, [r9], #4
 802c2ba:	f8dc a000 	ldr.w	sl, [ip]
 802c2be:	b2a3      	uxth	r3, r4
 802c2c0:	fa1f fa8a 	uxth.w	sl, sl
 802c2c4:	fb0b a303 	mla	r3, fp, r3, sl
 802c2c8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 802c2cc:	f8dc 4000 	ldr.w	r4, [ip]
 802c2d0:	4443      	add	r3, r8
 802c2d2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 802c2d6:	fb0b 840a 	mla	r4, fp, sl, r8
 802c2da:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 802c2de:	46e2      	mov	sl, ip
 802c2e0:	b29b      	uxth	r3, r3
 802c2e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 802c2e6:	454f      	cmp	r7, r9
 802c2e8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 802c2ec:	f84a 3b04 	str.w	r3, [sl], #4
 802c2f0:	d82b      	bhi.n	802c34a <__multiply+0x120>
 802c2f2:	f8cc 8004 	str.w	r8, [ip, #4]
 802c2f6:	9b01      	ldr	r3, [sp, #4]
 802c2f8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 802c2fc:	3204      	adds	r2, #4
 802c2fe:	f1ba 0f00 	cmp.w	sl, #0
 802c302:	d020      	beq.n	802c346 <__multiply+0x11c>
 802c304:	682b      	ldr	r3, [r5, #0]
 802c306:	4689      	mov	r9, r1
 802c308:	46a8      	mov	r8, r5
 802c30a:	f04f 0b00 	mov.w	fp, #0
 802c30e:	f8b9 c000 	ldrh.w	ip, [r9]
 802c312:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 802c316:	fb0a 440c 	mla	r4, sl, ip, r4
 802c31a:	445c      	add	r4, fp
 802c31c:	46c4      	mov	ip, r8
 802c31e:	b29b      	uxth	r3, r3
 802c320:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 802c324:	f84c 3b04 	str.w	r3, [ip], #4
 802c328:	f859 3b04 	ldr.w	r3, [r9], #4
 802c32c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 802c330:	0c1b      	lsrs	r3, r3, #16
 802c332:	fb0a b303 	mla	r3, sl, r3, fp
 802c336:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 802c33a:	454f      	cmp	r7, r9
 802c33c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 802c340:	d805      	bhi.n	802c34e <__multiply+0x124>
 802c342:	f8c8 3004 	str.w	r3, [r8, #4]
 802c346:	3504      	adds	r5, #4
 802c348:	e79b      	b.n	802c282 <__multiply+0x58>
 802c34a:	46d4      	mov	ip, sl
 802c34c:	e7b3      	b.n	802c2b6 <__multiply+0x8c>
 802c34e:	46e0      	mov	r8, ip
 802c350:	e7dd      	b.n	802c30e <__multiply+0xe4>
 802c352:	3e01      	subs	r6, #1
 802c354:	e799      	b.n	802c28a <__multiply+0x60>
	...

0802c358 <__pow5mult>:
 802c358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c35c:	4615      	mov	r5, r2
 802c35e:	f012 0203 	ands.w	r2, r2, #3
 802c362:	4606      	mov	r6, r0
 802c364:	460f      	mov	r7, r1
 802c366:	d007      	beq.n	802c378 <__pow5mult+0x20>
 802c368:	3a01      	subs	r2, #1
 802c36a:	4c21      	ldr	r4, [pc, #132]	; (802c3f0 <__pow5mult+0x98>)
 802c36c:	2300      	movs	r3, #0
 802c36e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802c372:	f7ff fec8 	bl	802c106 <__multadd>
 802c376:	4607      	mov	r7, r0
 802c378:	10ad      	asrs	r5, r5, #2
 802c37a:	d035      	beq.n	802c3e8 <__pow5mult+0x90>
 802c37c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802c37e:	b93c      	cbnz	r4, 802c390 <__pow5mult+0x38>
 802c380:	2010      	movs	r0, #16
 802c382:	f7ff fe6d 	bl	802c060 <malloc>
 802c386:	6270      	str	r0, [r6, #36]	; 0x24
 802c388:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802c38c:	6004      	str	r4, [r0, #0]
 802c38e:	60c4      	str	r4, [r0, #12]
 802c390:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 802c394:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802c398:	b94c      	cbnz	r4, 802c3ae <__pow5mult+0x56>
 802c39a:	f240 2171 	movw	r1, #625	; 0x271
 802c39e:	4630      	mov	r0, r6
 802c3a0:	f7ff ff3a 	bl	802c218 <__i2b>
 802c3a4:	2300      	movs	r3, #0
 802c3a6:	f8c8 0008 	str.w	r0, [r8, #8]
 802c3aa:	4604      	mov	r4, r0
 802c3ac:	6003      	str	r3, [r0, #0]
 802c3ae:	f04f 0800 	mov.w	r8, #0
 802c3b2:	07eb      	lsls	r3, r5, #31
 802c3b4:	d50a      	bpl.n	802c3cc <__pow5mult+0x74>
 802c3b6:	4639      	mov	r1, r7
 802c3b8:	4622      	mov	r2, r4
 802c3ba:	4630      	mov	r0, r6
 802c3bc:	f7ff ff35 	bl	802c22a <__multiply>
 802c3c0:	4639      	mov	r1, r7
 802c3c2:	4681      	mov	r9, r0
 802c3c4:	4630      	mov	r0, r6
 802c3c6:	f7ff fe87 	bl	802c0d8 <_Bfree>
 802c3ca:	464f      	mov	r7, r9
 802c3cc:	106d      	asrs	r5, r5, #1
 802c3ce:	d00b      	beq.n	802c3e8 <__pow5mult+0x90>
 802c3d0:	6820      	ldr	r0, [r4, #0]
 802c3d2:	b938      	cbnz	r0, 802c3e4 <__pow5mult+0x8c>
 802c3d4:	4622      	mov	r2, r4
 802c3d6:	4621      	mov	r1, r4
 802c3d8:	4630      	mov	r0, r6
 802c3da:	f7ff ff26 	bl	802c22a <__multiply>
 802c3de:	6020      	str	r0, [r4, #0]
 802c3e0:	f8c0 8000 	str.w	r8, [r0]
 802c3e4:	4604      	mov	r4, r0
 802c3e6:	e7e4      	b.n	802c3b2 <__pow5mult+0x5a>
 802c3e8:	4638      	mov	r0, r7
 802c3ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c3ee:	bf00      	nop
 802c3f0:	0802ce90 	.word	0x0802ce90

0802c3f4 <__lshift>:
 802c3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c3f8:	460c      	mov	r4, r1
 802c3fa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802c3fe:	6923      	ldr	r3, [r4, #16]
 802c400:	6849      	ldr	r1, [r1, #4]
 802c402:	eb0a 0903 	add.w	r9, sl, r3
 802c406:	68a3      	ldr	r3, [r4, #8]
 802c408:	4607      	mov	r7, r0
 802c40a:	4616      	mov	r6, r2
 802c40c:	f109 0501 	add.w	r5, r9, #1
 802c410:	42ab      	cmp	r3, r5
 802c412:	db32      	blt.n	802c47a <__lshift+0x86>
 802c414:	4638      	mov	r0, r7
 802c416:	f7ff fe2b 	bl	802c070 <_Balloc>
 802c41a:	2300      	movs	r3, #0
 802c41c:	4680      	mov	r8, r0
 802c41e:	f100 0114 	add.w	r1, r0, #20
 802c422:	461a      	mov	r2, r3
 802c424:	4553      	cmp	r3, sl
 802c426:	db2b      	blt.n	802c480 <__lshift+0x8c>
 802c428:	6920      	ldr	r0, [r4, #16]
 802c42a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802c42e:	f104 0314 	add.w	r3, r4, #20
 802c432:	f016 021f 	ands.w	r2, r6, #31
 802c436:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802c43a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802c43e:	d025      	beq.n	802c48c <__lshift+0x98>
 802c440:	f1c2 0e20 	rsb	lr, r2, #32
 802c444:	2000      	movs	r0, #0
 802c446:	681e      	ldr	r6, [r3, #0]
 802c448:	468a      	mov	sl, r1
 802c44a:	4096      	lsls	r6, r2
 802c44c:	4330      	orrs	r0, r6
 802c44e:	f84a 0b04 	str.w	r0, [sl], #4
 802c452:	f853 0b04 	ldr.w	r0, [r3], #4
 802c456:	459c      	cmp	ip, r3
 802c458:	fa20 f00e 	lsr.w	r0, r0, lr
 802c45c:	d814      	bhi.n	802c488 <__lshift+0x94>
 802c45e:	6048      	str	r0, [r1, #4]
 802c460:	b108      	cbz	r0, 802c466 <__lshift+0x72>
 802c462:	f109 0502 	add.w	r5, r9, #2
 802c466:	3d01      	subs	r5, #1
 802c468:	4638      	mov	r0, r7
 802c46a:	f8c8 5010 	str.w	r5, [r8, #16]
 802c46e:	4621      	mov	r1, r4
 802c470:	f7ff fe32 	bl	802c0d8 <_Bfree>
 802c474:	4640      	mov	r0, r8
 802c476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c47a:	3101      	adds	r1, #1
 802c47c:	005b      	lsls	r3, r3, #1
 802c47e:	e7c7      	b.n	802c410 <__lshift+0x1c>
 802c480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 802c484:	3301      	adds	r3, #1
 802c486:	e7cd      	b.n	802c424 <__lshift+0x30>
 802c488:	4651      	mov	r1, sl
 802c48a:	e7dc      	b.n	802c446 <__lshift+0x52>
 802c48c:	3904      	subs	r1, #4
 802c48e:	f853 2b04 	ldr.w	r2, [r3], #4
 802c492:	f841 2f04 	str.w	r2, [r1, #4]!
 802c496:	459c      	cmp	ip, r3
 802c498:	d8f9      	bhi.n	802c48e <__lshift+0x9a>
 802c49a:	e7e4      	b.n	802c466 <__lshift+0x72>

0802c49c <__mcmp>:
 802c49c:	6903      	ldr	r3, [r0, #16]
 802c49e:	690a      	ldr	r2, [r1, #16]
 802c4a0:	1a9b      	subs	r3, r3, r2
 802c4a2:	b530      	push	{r4, r5, lr}
 802c4a4:	d10c      	bne.n	802c4c0 <__mcmp+0x24>
 802c4a6:	0092      	lsls	r2, r2, #2
 802c4a8:	3014      	adds	r0, #20
 802c4aa:	3114      	adds	r1, #20
 802c4ac:	1884      	adds	r4, r0, r2
 802c4ae:	4411      	add	r1, r2
 802c4b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 802c4b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 802c4b8:	4295      	cmp	r5, r2
 802c4ba:	d003      	beq.n	802c4c4 <__mcmp+0x28>
 802c4bc:	d305      	bcc.n	802c4ca <__mcmp+0x2e>
 802c4be:	2301      	movs	r3, #1
 802c4c0:	4618      	mov	r0, r3
 802c4c2:	bd30      	pop	{r4, r5, pc}
 802c4c4:	42a0      	cmp	r0, r4
 802c4c6:	d3f3      	bcc.n	802c4b0 <__mcmp+0x14>
 802c4c8:	e7fa      	b.n	802c4c0 <__mcmp+0x24>
 802c4ca:	f04f 33ff 	mov.w	r3, #4294967295
 802c4ce:	e7f7      	b.n	802c4c0 <__mcmp+0x24>

0802c4d0 <__mdiff>:
 802c4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c4d4:	460d      	mov	r5, r1
 802c4d6:	4607      	mov	r7, r0
 802c4d8:	4611      	mov	r1, r2
 802c4da:	4628      	mov	r0, r5
 802c4dc:	4614      	mov	r4, r2
 802c4de:	f7ff ffdd 	bl	802c49c <__mcmp>
 802c4e2:	1e06      	subs	r6, r0, #0
 802c4e4:	d108      	bne.n	802c4f8 <__mdiff+0x28>
 802c4e6:	4631      	mov	r1, r6
 802c4e8:	4638      	mov	r0, r7
 802c4ea:	f7ff fdc1 	bl	802c070 <_Balloc>
 802c4ee:	2301      	movs	r3, #1
 802c4f0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 802c4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c4f8:	bfa4      	itt	ge
 802c4fa:	4623      	movge	r3, r4
 802c4fc:	462c      	movge	r4, r5
 802c4fe:	4638      	mov	r0, r7
 802c500:	6861      	ldr	r1, [r4, #4]
 802c502:	bfa6      	itte	ge
 802c504:	461d      	movge	r5, r3
 802c506:	2600      	movge	r6, #0
 802c508:	2601      	movlt	r6, #1
 802c50a:	f7ff fdb1 	bl	802c070 <_Balloc>
 802c50e:	692b      	ldr	r3, [r5, #16]
 802c510:	60c6      	str	r6, [r0, #12]
 802c512:	6926      	ldr	r6, [r4, #16]
 802c514:	f105 0914 	add.w	r9, r5, #20
 802c518:	f104 0214 	add.w	r2, r4, #20
 802c51c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 802c520:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 802c524:	f100 0514 	add.w	r5, r0, #20
 802c528:	f04f 0e00 	mov.w	lr, #0
 802c52c:	f852 ab04 	ldr.w	sl, [r2], #4
 802c530:	f859 4b04 	ldr.w	r4, [r9], #4
 802c534:	fa1e f18a 	uxtah	r1, lr, sl
 802c538:	b2a3      	uxth	r3, r4
 802c53a:	1ac9      	subs	r1, r1, r3
 802c53c:	0c23      	lsrs	r3, r4, #16
 802c53e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 802c542:	eb03 4321 	add.w	r3, r3, r1, asr #16
 802c546:	b289      	uxth	r1, r1
 802c548:	ea4f 4e23 	mov.w	lr, r3, asr #16
 802c54c:	45c8      	cmp	r8, r9
 802c54e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 802c552:	4694      	mov	ip, r2
 802c554:	f845 3b04 	str.w	r3, [r5], #4
 802c558:	d8e8      	bhi.n	802c52c <__mdiff+0x5c>
 802c55a:	45bc      	cmp	ip, r7
 802c55c:	d304      	bcc.n	802c568 <__mdiff+0x98>
 802c55e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 802c562:	b183      	cbz	r3, 802c586 <__mdiff+0xb6>
 802c564:	6106      	str	r6, [r0, #16]
 802c566:	e7c5      	b.n	802c4f4 <__mdiff+0x24>
 802c568:	f85c 1b04 	ldr.w	r1, [ip], #4
 802c56c:	fa1e f381 	uxtah	r3, lr, r1
 802c570:	141a      	asrs	r2, r3, #16
 802c572:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802c576:	b29b      	uxth	r3, r3
 802c578:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802c57c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 802c580:	f845 3b04 	str.w	r3, [r5], #4
 802c584:	e7e9      	b.n	802c55a <__mdiff+0x8a>
 802c586:	3e01      	subs	r6, #1
 802c588:	e7e9      	b.n	802c55e <__mdiff+0x8e>

0802c58a <__d2b>:
 802c58a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802c58e:	460e      	mov	r6, r1
 802c590:	2101      	movs	r1, #1
 802c592:	ec59 8b10 	vmov	r8, r9, d0
 802c596:	4615      	mov	r5, r2
 802c598:	f7ff fd6a 	bl	802c070 <_Balloc>
 802c59c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 802c5a0:	4607      	mov	r7, r0
 802c5a2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802c5a6:	bb34      	cbnz	r4, 802c5f6 <__d2b+0x6c>
 802c5a8:	9301      	str	r3, [sp, #4]
 802c5aa:	f1b8 0300 	subs.w	r3, r8, #0
 802c5ae:	d027      	beq.n	802c600 <__d2b+0x76>
 802c5b0:	a802      	add	r0, sp, #8
 802c5b2:	f840 3d08 	str.w	r3, [r0, #-8]!
 802c5b6:	f7ff fe00 	bl	802c1ba <__lo0bits>
 802c5ba:	9900      	ldr	r1, [sp, #0]
 802c5bc:	b1f0      	cbz	r0, 802c5fc <__d2b+0x72>
 802c5be:	9a01      	ldr	r2, [sp, #4]
 802c5c0:	f1c0 0320 	rsb	r3, r0, #32
 802c5c4:	fa02 f303 	lsl.w	r3, r2, r3
 802c5c8:	430b      	orrs	r3, r1
 802c5ca:	40c2      	lsrs	r2, r0
 802c5cc:	617b      	str	r3, [r7, #20]
 802c5ce:	9201      	str	r2, [sp, #4]
 802c5d0:	9b01      	ldr	r3, [sp, #4]
 802c5d2:	61bb      	str	r3, [r7, #24]
 802c5d4:	2b00      	cmp	r3, #0
 802c5d6:	bf14      	ite	ne
 802c5d8:	2102      	movne	r1, #2
 802c5da:	2101      	moveq	r1, #1
 802c5dc:	6139      	str	r1, [r7, #16]
 802c5de:	b1c4      	cbz	r4, 802c612 <__d2b+0x88>
 802c5e0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 802c5e4:	4404      	add	r4, r0
 802c5e6:	6034      	str	r4, [r6, #0]
 802c5e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802c5ec:	6028      	str	r0, [r5, #0]
 802c5ee:	4638      	mov	r0, r7
 802c5f0:	b003      	add	sp, #12
 802c5f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802c5f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802c5fa:	e7d5      	b.n	802c5a8 <__d2b+0x1e>
 802c5fc:	6179      	str	r1, [r7, #20]
 802c5fe:	e7e7      	b.n	802c5d0 <__d2b+0x46>
 802c600:	a801      	add	r0, sp, #4
 802c602:	f7ff fdda 	bl	802c1ba <__lo0bits>
 802c606:	9b01      	ldr	r3, [sp, #4]
 802c608:	617b      	str	r3, [r7, #20]
 802c60a:	2101      	movs	r1, #1
 802c60c:	6139      	str	r1, [r7, #16]
 802c60e:	3020      	adds	r0, #32
 802c610:	e7e5      	b.n	802c5de <__d2b+0x54>
 802c612:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 802c616:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802c61a:	6030      	str	r0, [r6, #0]
 802c61c:	6918      	ldr	r0, [r3, #16]
 802c61e:	f7ff fdad 	bl	802c17c <__hi0bits>
 802c622:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 802c626:	e7e1      	b.n	802c5ec <__d2b+0x62>

0802c628 <_calloc_r>:
 802c628:	b538      	push	{r3, r4, r5, lr}
 802c62a:	fb02 f401 	mul.w	r4, r2, r1
 802c62e:	4621      	mov	r1, r4
 802c630:	f000 f856 	bl	802c6e0 <_malloc_r>
 802c634:	4605      	mov	r5, r0
 802c636:	b118      	cbz	r0, 802c640 <_calloc_r+0x18>
 802c638:	4622      	mov	r2, r4
 802c63a:	2100      	movs	r1, #0
 802c63c:	f7fd ff3f 	bl	802a4be <memset>
 802c640:	4628      	mov	r0, r5
 802c642:	bd38      	pop	{r3, r4, r5, pc}

0802c644 <_free_r>:
 802c644:	b538      	push	{r3, r4, r5, lr}
 802c646:	4605      	mov	r5, r0
 802c648:	2900      	cmp	r1, #0
 802c64a:	d045      	beq.n	802c6d8 <_free_r+0x94>
 802c64c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802c650:	1f0c      	subs	r4, r1, #4
 802c652:	2b00      	cmp	r3, #0
 802c654:	bfb8      	it	lt
 802c656:	18e4      	addlt	r4, r4, r3
 802c658:	f000 fa98 	bl	802cb8c <__malloc_lock>
 802c65c:	4a1f      	ldr	r2, [pc, #124]	; (802c6dc <_free_r+0x98>)
 802c65e:	6813      	ldr	r3, [r2, #0]
 802c660:	4610      	mov	r0, r2
 802c662:	b933      	cbnz	r3, 802c672 <_free_r+0x2e>
 802c664:	6063      	str	r3, [r4, #4]
 802c666:	6014      	str	r4, [r2, #0]
 802c668:	4628      	mov	r0, r5
 802c66a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802c66e:	f000 ba8e 	b.w	802cb8e <__malloc_unlock>
 802c672:	42a3      	cmp	r3, r4
 802c674:	d90c      	bls.n	802c690 <_free_r+0x4c>
 802c676:	6821      	ldr	r1, [r4, #0]
 802c678:	1862      	adds	r2, r4, r1
 802c67a:	4293      	cmp	r3, r2
 802c67c:	bf04      	itt	eq
 802c67e:	681a      	ldreq	r2, [r3, #0]
 802c680:	685b      	ldreq	r3, [r3, #4]
 802c682:	6063      	str	r3, [r4, #4]
 802c684:	bf04      	itt	eq
 802c686:	1852      	addeq	r2, r2, r1
 802c688:	6022      	streq	r2, [r4, #0]
 802c68a:	6004      	str	r4, [r0, #0]
 802c68c:	e7ec      	b.n	802c668 <_free_r+0x24>
 802c68e:	4613      	mov	r3, r2
 802c690:	685a      	ldr	r2, [r3, #4]
 802c692:	b10a      	cbz	r2, 802c698 <_free_r+0x54>
 802c694:	42a2      	cmp	r2, r4
 802c696:	d9fa      	bls.n	802c68e <_free_r+0x4a>
 802c698:	6819      	ldr	r1, [r3, #0]
 802c69a:	1858      	adds	r0, r3, r1
 802c69c:	42a0      	cmp	r0, r4
 802c69e:	d10b      	bne.n	802c6b8 <_free_r+0x74>
 802c6a0:	6820      	ldr	r0, [r4, #0]
 802c6a2:	4401      	add	r1, r0
 802c6a4:	1858      	adds	r0, r3, r1
 802c6a6:	4282      	cmp	r2, r0
 802c6a8:	6019      	str	r1, [r3, #0]
 802c6aa:	d1dd      	bne.n	802c668 <_free_r+0x24>
 802c6ac:	6810      	ldr	r0, [r2, #0]
 802c6ae:	6852      	ldr	r2, [r2, #4]
 802c6b0:	605a      	str	r2, [r3, #4]
 802c6b2:	4401      	add	r1, r0
 802c6b4:	6019      	str	r1, [r3, #0]
 802c6b6:	e7d7      	b.n	802c668 <_free_r+0x24>
 802c6b8:	d902      	bls.n	802c6c0 <_free_r+0x7c>
 802c6ba:	230c      	movs	r3, #12
 802c6bc:	602b      	str	r3, [r5, #0]
 802c6be:	e7d3      	b.n	802c668 <_free_r+0x24>
 802c6c0:	6820      	ldr	r0, [r4, #0]
 802c6c2:	1821      	adds	r1, r4, r0
 802c6c4:	428a      	cmp	r2, r1
 802c6c6:	bf04      	itt	eq
 802c6c8:	6811      	ldreq	r1, [r2, #0]
 802c6ca:	6852      	ldreq	r2, [r2, #4]
 802c6cc:	6062      	str	r2, [r4, #4]
 802c6ce:	bf04      	itt	eq
 802c6d0:	1809      	addeq	r1, r1, r0
 802c6d2:	6021      	streq	r1, [r4, #0]
 802c6d4:	605c      	str	r4, [r3, #4]
 802c6d6:	e7c7      	b.n	802c668 <_free_r+0x24>
 802c6d8:	bd38      	pop	{r3, r4, r5, pc}
 802c6da:	bf00      	nop
 802c6dc:	20011140 	.word	0x20011140

0802c6e0 <_malloc_r>:
 802c6e0:	b570      	push	{r4, r5, r6, lr}
 802c6e2:	1ccd      	adds	r5, r1, #3
 802c6e4:	f025 0503 	bic.w	r5, r5, #3
 802c6e8:	3508      	adds	r5, #8
 802c6ea:	2d0c      	cmp	r5, #12
 802c6ec:	bf38      	it	cc
 802c6ee:	250c      	movcc	r5, #12
 802c6f0:	2d00      	cmp	r5, #0
 802c6f2:	4606      	mov	r6, r0
 802c6f4:	db01      	blt.n	802c6fa <_malloc_r+0x1a>
 802c6f6:	42a9      	cmp	r1, r5
 802c6f8:	d903      	bls.n	802c702 <_malloc_r+0x22>
 802c6fa:	230c      	movs	r3, #12
 802c6fc:	6033      	str	r3, [r6, #0]
 802c6fe:	2000      	movs	r0, #0
 802c700:	bd70      	pop	{r4, r5, r6, pc}
 802c702:	f000 fa43 	bl	802cb8c <__malloc_lock>
 802c706:	4a21      	ldr	r2, [pc, #132]	; (802c78c <_malloc_r+0xac>)
 802c708:	6814      	ldr	r4, [r2, #0]
 802c70a:	4621      	mov	r1, r4
 802c70c:	b991      	cbnz	r1, 802c734 <_malloc_r+0x54>
 802c70e:	4c20      	ldr	r4, [pc, #128]	; (802c790 <_malloc_r+0xb0>)
 802c710:	6823      	ldr	r3, [r4, #0]
 802c712:	b91b      	cbnz	r3, 802c71c <_malloc_r+0x3c>
 802c714:	4630      	mov	r0, r6
 802c716:	f000 f97d 	bl	802ca14 <_sbrk_r>
 802c71a:	6020      	str	r0, [r4, #0]
 802c71c:	4629      	mov	r1, r5
 802c71e:	4630      	mov	r0, r6
 802c720:	f000 f978 	bl	802ca14 <_sbrk_r>
 802c724:	1c43      	adds	r3, r0, #1
 802c726:	d124      	bne.n	802c772 <_malloc_r+0x92>
 802c728:	230c      	movs	r3, #12
 802c72a:	6033      	str	r3, [r6, #0]
 802c72c:	4630      	mov	r0, r6
 802c72e:	f000 fa2e 	bl	802cb8e <__malloc_unlock>
 802c732:	e7e4      	b.n	802c6fe <_malloc_r+0x1e>
 802c734:	680b      	ldr	r3, [r1, #0]
 802c736:	1b5b      	subs	r3, r3, r5
 802c738:	d418      	bmi.n	802c76c <_malloc_r+0x8c>
 802c73a:	2b0b      	cmp	r3, #11
 802c73c:	d90f      	bls.n	802c75e <_malloc_r+0x7e>
 802c73e:	600b      	str	r3, [r1, #0]
 802c740:	50cd      	str	r5, [r1, r3]
 802c742:	18cc      	adds	r4, r1, r3
 802c744:	4630      	mov	r0, r6
 802c746:	f000 fa22 	bl	802cb8e <__malloc_unlock>
 802c74a:	f104 000b 	add.w	r0, r4, #11
 802c74e:	1d23      	adds	r3, r4, #4
 802c750:	f020 0007 	bic.w	r0, r0, #7
 802c754:	1ac3      	subs	r3, r0, r3
 802c756:	d0d3      	beq.n	802c700 <_malloc_r+0x20>
 802c758:	425a      	negs	r2, r3
 802c75a:	50e2      	str	r2, [r4, r3]
 802c75c:	e7d0      	b.n	802c700 <_malloc_r+0x20>
 802c75e:	428c      	cmp	r4, r1
 802c760:	684b      	ldr	r3, [r1, #4]
 802c762:	bf16      	itet	ne
 802c764:	6063      	strne	r3, [r4, #4]
 802c766:	6013      	streq	r3, [r2, #0]
 802c768:	460c      	movne	r4, r1
 802c76a:	e7eb      	b.n	802c744 <_malloc_r+0x64>
 802c76c:	460c      	mov	r4, r1
 802c76e:	6849      	ldr	r1, [r1, #4]
 802c770:	e7cc      	b.n	802c70c <_malloc_r+0x2c>
 802c772:	1cc4      	adds	r4, r0, #3
 802c774:	f024 0403 	bic.w	r4, r4, #3
 802c778:	42a0      	cmp	r0, r4
 802c77a:	d005      	beq.n	802c788 <_malloc_r+0xa8>
 802c77c:	1a21      	subs	r1, r4, r0
 802c77e:	4630      	mov	r0, r6
 802c780:	f000 f948 	bl	802ca14 <_sbrk_r>
 802c784:	3001      	adds	r0, #1
 802c786:	d0cf      	beq.n	802c728 <_malloc_r+0x48>
 802c788:	6025      	str	r5, [r4, #0]
 802c78a:	e7db      	b.n	802c744 <_malloc_r+0x64>
 802c78c:	20011140 	.word	0x20011140
 802c790:	20011144 	.word	0x20011144

0802c794 <__sfputc_r>:
 802c794:	6893      	ldr	r3, [r2, #8]
 802c796:	3b01      	subs	r3, #1
 802c798:	2b00      	cmp	r3, #0
 802c79a:	b410      	push	{r4}
 802c79c:	6093      	str	r3, [r2, #8]
 802c79e:	da08      	bge.n	802c7b2 <__sfputc_r+0x1e>
 802c7a0:	6994      	ldr	r4, [r2, #24]
 802c7a2:	42a3      	cmp	r3, r4
 802c7a4:	db01      	blt.n	802c7aa <__sfputc_r+0x16>
 802c7a6:	290a      	cmp	r1, #10
 802c7a8:	d103      	bne.n	802c7b2 <__sfputc_r+0x1e>
 802c7aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c7ae:	f7fe bb67 	b.w	802ae80 <__swbuf_r>
 802c7b2:	6813      	ldr	r3, [r2, #0]
 802c7b4:	1c58      	adds	r0, r3, #1
 802c7b6:	6010      	str	r0, [r2, #0]
 802c7b8:	7019      	strb	r1, [r3, #0]
 802c7ba:	4608      	mov	r0, r1
 802c7bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c7c0:	4770      	bx	lr

0802c7c2 <__sfputs_r>:
 802c7c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c7c4:	4606      	mov	r6, r0
 802c7c6:	460f      	mov	r7, r1
 802c7c8:	4614      	mov	r4, r2
 802c7ca:	18d5      	adds	r5, r2, r3
 802c7cc:	42ac      	cmp	r4, r5
 802c7ce:	d101      	bne.n	802c7d4 <__sfputs_r+0x12>
 802c7d0:	2000      	movs	r0, #0
 802c7d2:	e007      	b.n	802c7e4 <__sfputs_r+0x22>
 802c7d4:	463a      	mov	r2, r7
 802c7d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 802c7da:	4630      	mov	r0, r6
 802c7dc:	f7ff ffda 	bl	802c794 <__sfputc_r>
 802c7e0:	1c43      	adds	r3, r0, #1
 802c7e2:	d1f3      	bne.n	802c7cc <__sfputs_r+0xa>
 802c7e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802c7e8 <_vfiprintf_r>:
 802c7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c7ec:	460c      	mov	r4, r1
 802c7ee:	b09d      	sub	sp, #116	; 0x74
 802c7f0:	4617      	mov	r7, r2
 802c7f2:	461d      	mov	r5, r3
 802c7f4:	4606      	mov	r6, r0
 802c7f6:	b118      	cbz	r0, 802c800 <_vfiprintf_r+0x18>
 802c7f8:	6983      	ldr	r3, [r0, #24]
 802c7fa:	b90b      	cbnz	r3, 802c800 <_vfiprintf_r+0x18>
 802c7fc:	f7ff fb34 	bl	802be68 <__sinit>
 802c800:	4b7c      	ldr	r3, [pc, #496]	; (802c9f4 <_vfiprintf_r+0x20c>)
 802c802:	429c      	cmp	r4, r3
 802c804:	d158      	bne.n	802c8b8 <_vfiprintf_r+0xd0>
 802c806:	6874      	ldr	r4, [r6, #4]
 802c808:	89a3      	ldrh	r3, [r4, #12]
 802c80a:	0718      	lsls	r0, r3, #28
 802c80c:	d55e      	bpl.n	802c8cc <_vfiprintf_r+0xe4>
 802c80e:	6923      	ldr	r3, [r4, #16]
 802c810:	2b00      	cmp	r3, #0
 802c812:	d05b      	beq.n	802c8cc <_vfiprintf_r+0xe4>
 802c814:	2300      	movs	r3, #0
 802c816:	9309      	str	r3, [sp, #36]	; 0x24
 802c818:	2320      	movs	r3, #32
 802c81a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802c81e:	2330      	movs	r3, #48	; 0x30
 802c820:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802c824:	9503      	str	r5, [sp, #12]
 802c826:	f04f 0b01 	mov.w	fp, #1
 802c82a:	46b8      	mov	r8, r7
 802c82c:	4645      	mov	r5, r8
 802c82e:	f815 3b01 	ldrb.w	r3, [r5], #1
 802c832:	b10b      	cbz	r3, 802c838 <_vfiprintf_r+0x50>
 802c834:	2b25      	cmp	r3, #37	; 0x25
 802c836:	d154      	bne.n	802c8e2 <_vfiprintf_r+0xfa>
 802c838:	ebb8 0a07 	subs.w	sl, r8, r7
 802c83c:	d00b      	beq.n	802c856 <_vfiprintf_r+0x6e>
 802c83e:	4653      	mov	r3, sl
 802c840:	463a      	mov	r2, r7
 802c842:	4621      	mov	r1, r4
 802c844:	4630      	mov	r0, r6
 802c846:	f7ff ffbc 	bl	802c7c2 <__sfputs_r>
 802c84a:	3001      	adds	r0, #1
 802c84c:	f000 80c2 	beq.w	802c9d4 <_vfiprintf_r+0x1ec>
 802c850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c852:	4453      	add	r3, sl
 802c854:	9309      	str	r3, [sp, #36]	; 0x24
 802c856:	f898 3000 	ldrb.w	r3, [r8]
 802c85a:	2b00      	cmp	r3, #0
 802c85c:	f000 80ba 	beq.w	802c9d4 <_vfiprintf_r+0x1ec>
 802c860:	2300      	movs	r3, #0
 802c862:	f04f 32ff 	mov.w	r2, #4294967295
 802c866:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802c86a:	9304      	str	r3, [sp, #16]
 802c86c:	9307      	str	r3, [sp, #28]
 802c86e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802c872:	931a      	str	r3, [sp, #104]	; 0x68
 802c874:	46a8      	mov	r8, r5
 802c876:	2205      	movs	r2, #5
 802c878:	f818 1b01 	ldrb.w	r1, [r8], #1
 802c87c:	485e      	ldr	r0, [pc, #376]	; (802c9f8 <_vfiprintf_r+0x210>)
 802c87e:	f7f3 fbe7 	bl	8020050 <memchr>
 802c882:	9b04      	ldr	r3, [sp, #16]
 802c884:	bb78      	cbnz	r0, 802c8e6 <_vfiprintf_r+0xfe>
 802c886:	06d9      	lsls	r1, r3, #27
 802c888:	bf44      	itt	mi
 802c88a:	2220      	movmi	r2, #32
 802c88c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802c890:	071a      	lsls	r2, r3, #28
 802c892:	bf44      	itt	mi
 802c894:	222b      	movmi	r2, #43	; 0x2b
 802c896:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802c89a:	782a      	ldrb	r2, [r5, #0]
 802c89c:	2a2a      	cmp	r2, #42	; 0x2a
 802c89e:	d02a      	beq.n	802c8f6 <_vfiprintf_r+0x10e>
 802c8a0:	9a07      	ldr	r2, [sp, #28]
 802c8a2:	46a8      	mov	r8, r5
 802c8a4:	2000      	movs	r0, #0
 802c8a6:	250a      	movs	r5, #10
 802c8a8:	4641      	mov	r1, r8
 802c8aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 802c8ae:	3b30      	subs	r3, #48	; 0x30
 802c8b0:	2b09      	cmp	r3, #9
 802c8b2:	d969      	bls.n	802c988 <_vfiprintf_r+0x1a0>
 802c8b4:	b360      	cbz	r0, 802c910 <_vfiprintf_r+0x128>
 802c8b6:	e024      	b.n	802c902 <_vfiprintf_r+0x11a>
 802c8b8:	4b50      	ldr	r3, [pc, #320]	; (802c9fc <_vfiprintf_r+0x214>)
 802c8ba:	429c      	cmp	r4, r3
 802c8bc:	d101      	bne.n	802c8c2 <_vfiprintf_r+0xda>
 802c8be:	68b4      	ldr	r4, [r6, #8]
 802c8c0:	e7a2      	b.n	802c808 <_vfiprintf_r+0x20>
 802c8c2:	4b4f      	ldr	r3, [pc, #316]	; (802ca00 <_vfiprintf_r+0x218>)
 802c8c4:	429c      	cmp	r4, r3
 802c8c6:	bf08      	it	eq
 802c8c8:	68f4      	ldreq	r4, [r6, #12]
 802c8ca:	e79d      	b.n	802c808 <_vfiprintf_r+0x20>
 802c8cc:	4621      	mov	r1, r4
 802c8ce:	4630      	mov	r0, r6
 802c8d0:	f7fe fb28 	bl	802af24 <__swsetup_r>
 802c8d4:	2800      	cmp	r0, #0
 802c8d6:	d09d      	beq.n	802c814 <_vfiprintf_r+0x2c>
 802c8d8:	f04f 30ff 	mov.w	r0, #4294967295
 802c8dc:	b01d      	add	sp, #116	; 0x74
 802c8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c8e2:	46a8      	mov	r8, r5
 802c8e4:	e7a2      	b.n	802c82c <_vfiprintf_r+0x44>
 802c8e6:	4a44      	ldr	r2, [pc, #272]	; (802c9f8 <_vfiprintf_r+0x210>)
 802c8e8:	1a80      	subs	r0, r0, r2
 802c8ea:	fa0b f000 	lsl.w	r0, fp, r0
 802c8ee:	4318      	orrs	r0, r3
 802c8f0:	9004      	str	r0, [sp, #16]
 802c8f2:	4645      	mov	r5, r8
 802c8f4:	e7be      	b.n	802c874 <_vfiprintf_r+0x8c>
 802c8f6:	9a03      	ldr	r2, [sp, #12]
 802c8f8:	1d11      	adds	r1, r2, #4
 802c8fa:	6812      	ldr	r2, [r2, #0]
 802c8fc:	9103      	str	r1, [sp, #12]
 802c8fe:	2a00      	cmp	r2, #0
 802c900:	db01      	blt.n	802c906 <_vfiprintf_r+0x11e>
 802c902:	9207      	str	r2, [sp, #28]
 802c904:	e004      	b.n	802c910 <_vfiprintf_r+0x128>
 802c906:	4252      	negs	r2, r2
 802c908:	f043 0302 	orr.w	r3, r3, #2
 802c90c:	9207      	str	r2, [sp, #28]
 802c90e:	9304      	str	r3, [sp, #16]
 802c910:	f898 3000 	ldrb.w	r3, [r8]
 802c914:	2b2e      	cmp	r3, #46	; 0x2e
 802c916:	d10e      	bne.n	802c936 <_vfiprintf_r+0x14e>
 802c918:	f898 3001 	ldrb.w	r3, [r8, #1]
 802c91c:	2b2a      	cmp	r3, #42	; 0x2a
 802c91e:	d138      	bne.n	802c992 <_vfiprintf_r+0x1aa>
 802c920:	9b03      	ldr	r3, [sp, #12]
 802c922:	1d1a      	adds	r2, r3, #4
 802c924:	681b      	ldr	r3, [r3, #0]
 802c926:	9203      	str	r2, [sp, #12]
 802c928:	2b00      	cmp	r3, #0
 802c92a:	bfb8      	it	lt
 802c92c:	f04f 33ff 	movlt.w	r3, #4294967295
 802c930:	f108 0802 	add.w	r8, r8, #2
 802c934:	9305      	str	r3, [sp, #20]
 802c936:	4d33      	ldr	r5, [pc, #204]	; (802ca04 <_vfiprintf_r+0x21c>)
 802c938:	f898 1000 	ldrb.w	r1, [r8]
 802c93c:	2203      	movs	r2, #3
 802c93e:	4628      	mov	r0, r5
 802c940:	f7f3 fb86 	bl	8020050 <memchr>
 802c944:	b140      	cbz	r0, 802c958 <_vfiprintf_r+0x170>
 802c946:	2340      	movs	r3, #64	; 0x40
 802c948:	1b40      	subs	r0, r0, r5
 802c94a:	fa03 f000 	lsl.w	r0, r3, r0
 802c94e:	9b04      	ldr	r3, [sp, #16]
 802c950:	4303      	orrs	r3, r0
 802c952:	f108 0801 	add.w	r8, r8, #1
 802c956:	9304      	str	r3, [sp, #16]
 802c958:	f898 1000 	ldrb.w	r1, [r8]
 802c95c:	482a      	ldr	r0, [pc, #168]	; (802ca08 <_vfiprintf_r+0x220>)
 802c95e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802c962:	2206      	movs	r2, #6
 802c964:	f108 0701 	add.w	r7, r8, #1
 802c968:	f7f3 fb72 	bl	8020050 <memchr>
 802c96c:	2800      	cmp	r0, #0
 802c96e:	d037      	beq.n	802c9e0 <_vfiprintf_r+0x1f8>
 802c970:	4b26      	ldr	r3, [pc, #152]	; (802ca0c <_vfiprintf_r+0x224>)
 802c972:	bb1b      	cbnz	r3, 802c9bc <_vfiprintf_r+0x1d4>
 802c974:	9b03      	ldr	r3, [sp, #12]
 802c976:	3307      	adds	r3, #7
 802c978:	f023 0307 	bic.w	r3, r3, #7
 802c97c:	3308      	adds	r3, #8
 802c97e:	9303      	str	r3, [sp, #12]
 802c980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c982:	444b      	add	r3, r9
 802c984:	9309      	str	r3, [sp, #36]	; 0x24
 802c986:	e750      	b.n	802c82a <_vfiprintf_r+0x42>
 802c988:	fb05 3202 	mla	r2, r5, r2, r3
 802c98c:	2001      	movs	r0, #1
 802c98e:	4688      	mov	r8, r1
 802c990:	e78a      	b.n	802c8a8 <_vfiprintf_r+0xc0>
 802c992:	2300      	movs	r3, #0
 802c994:	f108 0801 	add.w	r8, r8, #1
 802c998:	9305      	str	r3, [sp, #20]
 802c99a:	4619      	mov	r1, r3
 802c99c:	250a      	movs	r5, #10
 802c99e:	4640      	mov	r0, r8
 802c9a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 802c9a4:	3a30      	subs	r2, #48	; 0x30
 802c9a6:	2a09      	cmp	r2, #9
 802c9a8:	d903      	bls.n	802c9b2 <_vfiprintf_r+0x1ca>
 802c9aa:	2b00      	cmp	r3, #0
 802c9ac:	d0c3      	beq.n	802c936 <_vfiprintf_r+0x14e>
 802c9ae:	9105      	str	r1, [sp, #20]
 802c9b0:	e7c1      	b.n	802c936 <_vfiprintf_r+0x14e>
 802c9b2:	fb05 2101 	mla	r1, r5, r1, r2
 802c9b6:	2301      	movs	r3, #1
 802c9b8:	4680      	mov	r8, r0
 802c9ba:	e7f0      	b.n	802c99e <_vfiprintf_r+0x1b6>
 802c9bc:	ab03      	add	r3, sp, #12
 802c9be:	9300      	str	r3, [sp, #0]
 802c9c0:	4622      	mov	r2, r4
 802c9c2:	4b13      	ldr	r3, [pc, #76]	; (802ca10 <_vfiprintf_r+0x228>)
 802c9c4:	a904      	add	r1, sp, #16
 802c9c6:	4630      	mov	r0, r6
 802c9c8:	f7fd fe16 	bl	802a5f8 <_printf_float>
 802c9cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 802c9d0:	4681      	mov	r9, r0
 802c9d2:	d1d5      	bne.n	802c980 <_vfiprintf_r+0x198>
 802c9d4:	89a3      	ldrh	r3, [r4, #12]
 802c9d6:	065b      	lsls	r3, r3, #25
 802c9d8:	f53f af7e 	bmi.w	802c8d8 <_vfiprintf_r+0xf0>
 802c9dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 802c9de:	e77d      	b.n	802c8dc <_vfiprintf_r+0xf4>
 802c9e0:	ab03      	add	r3, sp, #12
 802c9e2:	9300      	str	r3, [sp, #0]
 802c9e4:	4622      	mov	r2, r4
 802c9e6:	4b0a      	ldr	r3, [pc, #40]	; (802ca10 <_vfiprintf_r+0x228>)
 802c9e8:	a904      	add	r1, sp, #16
 802c9ea:	4630      	mov	r0, r6
 802c9ec:	f7fe f8ba 	bl	802ab64 <_printf_i>
 802c9f0:	e7ec      	b.n	802c9cc <_vfiprintf_r+0x1e4>
 802c9f2:	bf00      	nop
 802c9f4:	0802cd60 	.word	0x0802cd60
 802c9f8:	0802ce9c 	.word	0x0802ce9c
 802c9fc:	0802cd80 	.word	0x0802cd80
 802ca00:	0802cd40 	.word	0x0802cd40
 802ca04:	0802cea2 	.word	0x0802cea2
 802ca08:	0802cea6 	.word	0x0802cea6
 802ca0c:	0802a5f9 	.word	0x0802a5f9
 802ca10:	0802c7c3 	.word	0x0802c7c3

0802ca14 <_sbrk_r>:
 802ca14:	b538      	push	{r3, r4, r5, lr}
 802ca16:	4c06      	ldr	r4, [pc, #24]	; (802ca30 <_sbrk_r+0x1c>)
 802ca18:	2300      	movs	r3, #0
 802ca1a:	4605      	mov	r5, r0
 802ca1c:	4608      	mov	r0, r1
 802ca1e:	6023      	str	r3, [r4, #0]
 802ca20:	f7f9 f9ba 	bl	8025d98 <_sbrk>
 802ca24:	1c43      	adds	r3, r0, #1
 802ca26:	d102      	bne.n	802ca2e <_sbrk_r+0x1a>
 802ca28:	6823      	ldr	r3, [r4, #0]
 802ca2a:	b103      	cbz	r3, 802ca2e <_sbrk_r+0x1a>
 802ca2c:	602b      	str	r3, [r5, #0]
 802ca2e:	bd38      	pop	{r3, r4, r5, pc}
 802ca30:	20017624 	.word	0x20017624

0802ca34 <__sread>:
 802ca34:	b510      	push	{r4, lr}
 802ca36:	460c      	mov	r4, r1
 802ca38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ca3c:	f000 f8a8 	bl	802cb90 <_read_r>
 802ca40:	2800      	cmp	r0, #0
 802ca42:	bfab      	itete	ge
 802ca44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802ca46:	89a3      	ldrhlt	r3, [r4, #12]
 802ca48:	181b      	addge	r3, r3, r0
 802ca4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802ca4e:	bfac      	ite	ge
 802ca50:	6563      	strge	r3, [r4, #84]	; 0x54
 802ca52:	81a3      	strhlt	r3, [r4, #12]
 802ca54:	bd10      	pop	{r4, pc}

0802ca56 <__swrite>:
 802ca56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ca5a:	461f      	mov	r7, r3
 802ca5c:	898b      	ldrh	r3, [r1, #12]
 802ca5e:	05db      	lsls	r3, r3, #23
 802ca60:	4605      	mov	r5, r0
 802ca62:	460c      	mov	r4, r1
 802ca64:	4616      	mov	r6, r2
 802ca66:	d505      	bpl.n	802ca74 <__swrite+0x1e>
 802ca68:	2302      	movs	r3, #2
 802ca6a:	2200      	movs	r2, #0
 802ca6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ca70:	f000 f868 	bl	802cb44 <_lseek_r>
 802ca74:	89a3      	ldrh	r3, [r4, #12]
 802ca76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802ca7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802ca7e:	81a3      	strh	r3, [r4, #12]
 802ca80:	4632      	mov	r2, r6
 802ca82:	463b      	mov	r3, r7
 802ca84:	4628      	mov	r0, r5
 802ca86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802ca8a:	f000 b817 	b.w	802cabc <_write_r>

0802ca8e <__sseek>:
 802ca8e:	b510      	push	{r4, lr}
 802ca90:	460c      	mov	r4, r1
 802ca92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ca96:	f000 f855 	bl	802cb44 <_lseek_r>
 802ca9a:	1c43      	adds	r3, r0, #1
 802ca9c:	89a3      	ldrh	r3, [r4, #12]
 802ca9e:	bf15      	itete	ne
 802caa0:	6560      	strne	r0, [r4, #84]	; 0x54
 802caa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802caa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802caaa:	81a3      	strheq	r3, [r4, #12]
 802caac:	bf18      	it	ne
 802caae:	81a3      	strhne	r3, [r4, #12]
 802cab0:	bd10      	pop	{r4, pc}

0802cab2 <__sclose>:
 802cab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cab6:	f000 b813 	b.w	802cae0 <_close_r>
	...

0802cabc <_write_r>:
 802cabc:	b538      	push	{r3, r4, r5, lr}
 802cabe:	4c07      	ldr	r4, [pc, #28]	; (802cadc <_write_r+0x20>)
 802cac0:	4605      	mov	r5, r0
 802cac2:	4608      	mov	r0, r1
 802cac4:	4611      	mov	r1, r2
 802cac6:	2200      	movs	r2, #0
 802cac8:	6022      	str	r2, [r4, #0]
 802caca:	461a      	mov	r2, r3
 802cacc:	f7f9 f8f7 	bl	8025cbe <_write>
 802cad0:	1c43      	adds	r3, r0, #1
 802cad2:	d102      	bne.n	802cada <_write_r+0x1e>
 802cad4:	6823      	ldr	r3, [r4, #0]
 802cad6:	b103      	cbz	r3, 802cada <_write_r+0x1e>
 802cad8:	602b      	str	r3, [r5, #0]
 802cada:	bd38      	pop	{r3, r4, r5, pc}
 802cadc:	20017624 	.word	0x20017624

0802cae0 <_close_r>:
 802cae0:	b538      	push	{r3, r4, r5, lr}
 802cae2:	4c06      	ldr	r4, [pc, #24]	; (802cafc <_close_r+0x1c>)
 802cae4:	2300      	movs	r3, #0
 802cae6:	4605      	mov	r5, r0
 802cae8:	4608      	mov	r0, r1
 802caea:	6023      	str	r3, [r4, #0]
 802caec:	f7f9 f920 	bl	8025d30 <_close>
 802caf0:	1c43      	adds	r3, r0, #1
 802caf2:	d102      	bne.n	802cafa <_close_r+0x1a>
 802caf4:	6823      	ldr	r3, [r4, #0]
 802caf6:	b103      	cbz	r3, 802cafa <_close_r+0x1a>
 802caf8:	602b      	str	r3, [r5, #0]
 802cafa:	bd38      	pop	{r3, r4, r5, pc}
 802cafc:	20017624 	.word	0x20017624

0802cb00 <_fstat_r>:
 802cb00:	b538      	push	{r3, r4, r5, lr}
 802cb02:	4c07      	ldr	r4, [pc, #28]	; (802cb20 <_fstat_r+0x20>)
 802cb04:	2300      	movs	r3, #0
 802cb06:	4605      	mov	r5, r0
 802cb08:	4608      	mov	r0, r1
 802cb0a:	4611      	mov	r1, r2
 802cb0c:	6023      	str	r3, [r4, #0]
 802cb0e:	f7f9 f91b 	bl	8025d48 <_fstat>
 802cb12:	1c43      	adds	r3, r0, #1
 802cb14:	d102      	bne.n	802cb1c <_fstat_r+0x1c>
 802cb16:	6823      	ldr	r3, [r4, #0]
 802cb18:	b103      	cbz	r3, 802cb1c <_fstat_r+0x1c>
 802cb1a:	602b      	str	r3, [r5, #0]
 802cb1c:	bd38      	pop	{r3, r4, r5, pc}
 802cb1e:	bf00      	nop
 802cb20:	20017624 	.word	0x20017624

0802cb24 <_isatty_r>:
 802cb24:	b538      	push	{r3, r4, r5, lr}
 802cb26:	4c06      	ldr	r4, [pc, #24]	; (802cb40 <_isatty_r+0x1c>)
 802cb28:	2300      	movs	r3, #0
 802cb2a:	4605      	mov	r5, r0
 802cb2c:	4608      	mov	r0, r1
 802cb2e:	6023      	str	r3, [r4, #0]
 802cb30:	f7f9 f91a 	bl	8025d68 <_isatty>
 802cb34:	1c43      	adds	r3, r0, #1
 802cb36:	d102      	bne.n	802cb3e <_isatty_r+0x1a>
 802cb38:	6823      	ldr	r3, [r4, #0]
 802cb3a:	b103      	cbz	r3, 802cb3e <_isatty_r+0x1a>
 802cb3c:	602b      	str	r3, [r5, #0]
 802cb3e:	bd38      	pop	{r3, r4, r5, pc}
 802cb40:	20017624 	.word	0x20017624

0802cb44 <_lseek_r>:
 802cb44:	b538      	push	{r3, r4, r5, lr}
 802cb46:	4c07      	ldr	r4, [pc, #28]	; (802cb64 <_lseek_r+0x20>)
 802cb48:	4605      	mov	r5, r0
 802cb4a:	4608      	mov	r0, r1
 802cb4c:	4611      	mov	r1, r2
 802cb4e:	2200      	movs	r2, #0
 802cb50:	6022      	str	r2, [r4, #0]
 802cb52:	461a      	mov	r2, r3
 802cb54:	f7f9 f913 	bl	8025d7e <_lseek>
 802cb58:	1c43      	adds	r3, r0, #1
 802cb5a:	d102      	bne.n	802cb62 <_lseek_r+0x1e>
 802cb5c:	6823      	ldr	r3, [r4, #0]
 802cb5e:	b103      	cbz	r3, 802cb62 <_lseek_r+0x1e>
 802cb60:	602b      	str	r3, [r5, #0]
 802cb62:	bd38      	pop	{r3, r4, r5, pc}
 802cb64:	20017624 	.word	0x20017624

0802cb68 <__ascii_mbtowc>:
 802cb68:	b082      	sub	sp, #8
 802cb6a:	b901      	cbnz	r1, 802cb6e <__ascii_mbtowc+0x6>
 802cb6c:	a901      	add	r1, sp, #4
 802cb6e:	b142      	cbz	r2, 802cb82 <__ascii_mbtowc+0x1a>
 802cb70:	b14b      	cbz	r3, 802cb86 <__ascii_mbtowc+0x1e>
 802cb72:	7813      	ldrb	r3, [r2, #0]
 802cb74:	600b      	str	r3, [r1, #0]
 802cb76:	7812      	ldrb	r2, [r2, #0]
 802cb78:	1c10      	adds	r0, r2, #0
 802cb7a:	bf18      	it	ne
 802cb7c:	2001      	movne	r0, #1
 802cb7e:	b002      	add	sp, #8
 802cb80:	4770      	bx	lr
 802cb82:	4610      	mov	r0, r2
 802cb84:	e7fb      	b.n	802cb7e <__ascii_mbtowc+0x16>
 802cb86:	f06f 0001 	mvn.w	r0, #1
 802cb8a:	e7f8      	b.n	802cb7e <__ascii_mbtowc+0x16>

0802cb8c <__malloc_lock>:
 802cb8c:	4770      	bx	lr

0802cb8e <__malloc_unlock>:
 802cb8e:	4770      	bx	lr

0802cb90 <_read_r>:
 802cb90:	b538      	push	{r3, r4, r5, lr}
 802cb92:	4c07      	ldr	r4, [pc, #28]	; (802cbb0 <_read_r+0x20>)
 802cb94:	4605      	mov	r5, r0
 802cb96:	4608      	mov	r0, r1
 802cb98:	4611      	mov	r1, r2
 802cb9a:	2200      	movs	r2, #0
 802cb9c:	6022      	str	r2, [r4, #0]
 802cb9e:	461a      	mov	r2, r3
 802cba0:	f7f9 f8a9 	bl	8025cf6 <_read>
 802cba4:	1c43      	adds	r3, r0, #1
 802cba6:	d102      	bne.n	802cbae <_read_r+0x1e>
 802cba8:	6823      	ldr	r3, [r4, #0]
 802cbaa:	b103      	cbz	r3, 802cbae <_read_r+0x1e>
 802cbac:	602b      	str	r3, [r5, #0]
 802cbae:	bd38      	pop	{r3, r4, r5, pc}
 802cbb0:	20017624 	.word	0x20017624

0802cbb4 <__ascii_wctomb>:
 802cbb4:	b149      	cbz	r1, 802cbca <__ascii_wctomb+0x16>
 802cbb6:	2aff      	cmp	r2, #255	; 0xff
 802cbb8:	bf85      	ittet	hi
 802cbba:	238a      	movhi	r3, #138	; 0x8a
 802cbbc:	6003      	strhi	r3, [r0, #0]
 802cbbe:	700a      	strbls	r2, [r1, #0]
 802cbc0:	f04f 30ff 	movhi.w	r0, #4294967295
 802cbc4:	bf98      	it	ls
 802cbc6:	2001      	movls	r0, #1
 802cbc8:	4770      	bx	lr
 802cbca:	4608      	mov	r0, r1
 802cbcc:	4770      	bx	lr
	...

0802cbd0 <_init>:
 802cbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cbd2:	bf00      	nop
 802cbd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802cbd6:	bc08      	pop	{r3}
 802cbd8:	469e      	mov	lr, r3
 802cbda:	4770      	bx	lr

0802cbdc <_fini>:
 802cbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cbde:	bf00      	nop
 802cbe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802cbe2:	bc08      	pop	{r3}
 802cbe4:	469e      	mov	lr, r3
 802cbe6:	4770      	bx	lr
