
alias2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005428  08020000  08020000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08025428  08025428  00025428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025448  08025448  0003000c  2**0
                  CONTENTS
  4 .ARM          00000008  08025448  08025448  00025448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025450  08025450  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08025450  08025450  00025450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08025458  08025458  00025458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0802545c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000858  20000010  08025468  00030010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000868  08025468  00030868  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ed7c  00000000  00000000  0003003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036eb  00000000  00000000  0004edb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001368  00000000  00000000  000524a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001220  00000000  00000000  00053810  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023c32  00000000  00000000  00054a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011146  00000000  00000000  00078662  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca7ce  00000000  00000000  000897a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00153f76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050f8  00000000  00000000  00153ff4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08020000 <__do_global_dtors_aux>:
 8020000:	b510      	push	{r4, lr}
 8020002:	4c05      	ldr	r4, [pc, #20]	; (8020018 <__do_global_dtors_aux+0x18>)
 8020004:	7823      	ldrb	r3, [r4, #0]
 8020006:	b933      	cbnz	r3, 8020016 <__do_global_dtors_aux+0x16>
 8020008:	4b04      	ldr	r3, [pc, #16]	; (802001c <__do_global_dtors_aux+0x1c>)
 802000a:	b113      	cbz	r3, 8020012 <__do_global_dtors_aux+0x12>
 802000c:	4804      	ldr	r0, [pc, #16]	; (8020020 <__do_global_dtors_aux+0x20>)
 802000e:	f3af 8000 	nop.w
 8020012:	2301      	movs	r3, #1
 8020014:	7023      	strb	r3, [r4, #0]
 8020016:	bd10      	pop	{r4, pc}
 8020018:	20000010 	.word	0x20000010
 802001c:	00000000 	.word	0x00000000
 8020020:	08025410 	.word	0x08025410

08020024 <frame_dummy>:
 8020024:	b508      	push	{r3, lr}
 8020026:	4b03      	ldr	r3, [pc, #12]	; (8020034 <frame_dummy+0x10>)
 8020028:	b11b      	cbz	r3, 8020032 <frame_dummy+0xe>
 802002a:	4903      	ldr	r1, [pc, #12]	; (8020038 <frame_dummy+0x14>)
 802002c:	4803      	ldr	r0, [pc, #12]	; (802003c <frame_dummy+0x18>)
 802002e:	f3af 8000 	nop.w
 8020032:	bd08      	pop	{r3, pc}
 8020034:	00000000 	.word	0x00000000
 8020038:	20000014 	.word	0x20000014
 802003c:	08025410 	.word	0x08025410

08020040 <__aeabi_uldivmod>:
 8020040:	b953      	cbnz	r3, 8020058 <__aeabi_uldivmod+0x18>
 8020042:	b94a      	cbnz	r2, 8020058 <__aeabi_uldivmod+0x18>
 8020044:	2900      	cmp	r1, #0
 8020046:	bf08      	it	eq
 8020048:	2800      	cmpeq	r0, #0
 802004a:	bf1c      	itt	ne
 802004c:	f04f 31ff 	movne.w	r1, #4294967295
 8020050:	f04f 30ff 	movne.w	r0, #4294967295
 8020054:	f000 b972 	b.w	802033c <__aeabi_idiv0>
 8020058:	f1ad 0c08 	sub.w	ip, sp, #8
 802005c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020060:	f000 f806 	bl	8020070 <__udivmoddi4>
 8020064:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020068:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802006c:	b004      	add	sp, #16
 802006e:	4770      	bx	lr

08020070 <__udivmoddi4>:
 8020070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020074:	9e08      	ldr	r6, [sp, #32]
 8020076:	4604      	mov	r4, r0
 8020078:	4688      	mov	r8, r1
 802007a:	2b00      	cmp	r3, #0
 802007c:	d14b      	bne.n	8020116 <__udivmoddi4+0xa6>
 802007e:	428a      	cmp	r2, r1
 8020080:	4615      	mov	r5, r2
 8020082:	d967      	bls.n	8020154 <__udivmoddi4+0xe4>
 8020084:	fab2 f282 	clz	r2, r2
 8020088:	b14a      	cbz	r2, 802009e <__udivmoddi4+0x2e>
 802008a:	f1c2 0720 	rsb	r7, r2, #32
 802008e:	fa01 f302 	lsl.w	r3, r1, r2
 8020092:	fa20 f707 	lsr.w	r7, r0, r7
 8020096:	4095      	lsls	r5, r2
 8020098:	ea47 0803 	orr.w	r8, r7, r3
 802009c:	4094      	lsls	r4, r2
 802009e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80200a2:	0c23      	lsrs	r3, r4, #16
 80200a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80200a8:	fa1f fc85 	uxth.w	ip, r5
 80200ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80200b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80200b4:	fb07 f10c 	mul.w	r1, r7, ip
 80200b8:	4299      	cmp	r1, r3
 80200ba:	d909      	bls.n	80200d0 <__udivmoddi4+0x60>
 80200bc:	18eb      	adds	r3, r5, r3
 80200be:	f107 30ff 	add.w	r0, r7, #4294967295
 80200c2:	f080 811b 	bcs.w	80202fc <__udivmoddi4+0x28c>
 80200c6:	4299      	cmp	r1, r3
 80200c8:	f240 8118 	bls.w	80202fc <__udivmoddi4+0x28c>
 80200cc:	3f02      	subs	r7, #2
 80200ce:	442b      	add	r3, r5
 80200d0:	1a5b      	subs	r3, r3, r1
 80200d2:	b2a4      	uxth	r4, r4
 80200d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80200d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80200dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80200e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80200e4:	45a4      	cmp	ip, r4
 80200e6:	d909      	bls.n	80200fc <__udivmoddi4+0x8c>
 80200e8:	192c      	adds	r4, r5, r4
 80200ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80200ee:	f080 8107 	bcs.w	8020300 <__udivmoddi4+0x290>
 80200f2:	45a4      	cmp	ip, r4
 80200f4:	f240 8104 	bls.w	8020300 <__udivmoddi4+0x290>
 80200f8:	3802      	subs	r0, #2
 80200fa:	442c      	add	r4, r5
 80200fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8020100:	eba4 040c 	sub.w	r4, r4, ip
 8020104:	2700      	movs	r7, #0
 8020106:	b11e      	cbz	r6, 8020110 <__udivmoddi4+0xa0>
 8020108:	40d4      	lsrs	r4, r2
 802010a:	2300      	movs	r3, #0
 802010c:	e9c6 4300 	strd	r4, r3, [r6]
 8020110:	4639      	mov	r1, r7
 8020112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020116:	428b      	cmp	r3, r1
 8020118:	d909      	bls.n	802012e <__udivmoddi4+0xbe>
 802011a:	2e00      	cmp	r6, #0
 802011c:	f000 80eb 	beq.w	80202f6 <__udivmoddi4+0x286>
 8020120:	2700      	movs	r7, #0
 8020122:	e9c6 0100 	strd	r0, r1, [r6]
 8020126:	4638      	mov	r0, r7
 8020128:	4639      	mov	r1, r7
 802012a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802012e:	fab3 f783 	clz	r7, r3
 8020132:	2f00      	cmp	r7, #0
 8020134:	d147      	bne.n	80201c6 <__udivmoddi4+0x156>
 8020136:	428b      	cmp	r3, r1
 8020138:	d302      	bcc.n	8020140 <__udivmoddi4+0xd0>
 802013a:	4282      	cmp	r2, r0
 802013c:	f200 80fa 	bhi.w	8020334 <__udivmoddi4+0x2c4>
 8020140:	1a84      	subs	r4, r0, r2
 8020142:	eb61 0303 	sbc.w	r3, r1, r3
 8020146:	2001      	movs	r0, #1
 8020148:	4698      	mov	r8, r3
 802014a:	2e00      	cmp	r6, #0
 802014c:	d0e0      	beq.n	8020110 <__udivmoddi4+0xa0>
 802014e:	e9c6 4800 	strd	r4, r8, [r6]
 8020152:	e7dd      	b.n	8020110 <__udivmoddi4+0xa0>
 8020154:	b902      	cbnz	r2, 8020158 <__udivmoddi4+0xe8>
 8020156:	deff      	udf	#255	; 0xff
 8020158:	fab2 f282 	clz	r2, r2
 802015c:	2a00      	cmp	r2, #0
 802015e:	f040 808f 	bne.w	8020280 <__udivmoddi4+0x210>
 8020162:	1b49      	subs	r1, r1, r5
 8020164:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020168:	fa1f f885 	uxth.w	r8, r5
 802016c:	2701      	movs	r7, #1
 802016e:	fbb1 fcfe 	udiv	ip, r1, lr
 8020172:	0c23      	lsrs	r3, r4, #16
 8020174:	fb0e 111c 	mls	r1, lr, ip, r1
 8020178:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 802017c:	fb08 f10c 	mul.w	r1, r8, ip
 8020180:	4299      	cmp	r1, r3
 8020182:	d907      	bls.n	8020194 <__udivmoddi4+0x124>
 8020184:	18eb      	adds	r3, r5, r3
 8020186:	f10c 30ff 	add.w	r0, ip, #4294967295
 802018a:	d202      	bcs.n	8020192 <__udivmoddi4+0x122>
 802018c:	4299      	cmp	r1, r3
 802018e:	f200 80cd 	bhi.w	802032c <__udivmoddi4+0x2bc>
 8020192:	4684      	mov	ip, r0
 8020194:	1a59      	subs	r1, r3, r1
 8020196:	b2a3      	uxth	r3, r4
 8020198:	fbb1 f0fe 	udiv	r0, r1, lr
 802019c:	fb0e 1410 	mls	r4, lr, r0, r1
 80201a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80201a4:	fb08 f800 	mul.w	r8, r8, r0
 80201a8:	45a0      	cmp	r8, r4
 80201aa:	d907      	bls.n	80201bc <__udivmoddi4+0x14c>
 80201ac:	192c      	adds	r4, r5, r4
 80201ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80201b2:	d202      	bcs.n	80201ba <__udivmoddi4+0x14a>
 80201b4:	45a0      	cmp	r8, r4
 80201b6:	f200 80b6 	bhi.w	8020326 <__udivmoddi4+0x2b6>
 80201ba:	4618      	mov	r0, r3
 80201bc:	eba4 0408 	sub.w	r4, r4, r8
 80201c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80201c4:	e79f      	b.n	8020106 <__udivmoddi4+0x96>
 80201c6:	f1c7 0c20 	rsb	ip, r7, #32
 80201ca:	40bb      	lsls	r3, r7
 80201cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80201d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80201d4:	fa01 f407 	lsl.w	r4, r1, r7
 80201d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80201dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80201e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80201e4:	4325      	orrs	r5, r4
 80201e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80201ea:	0c2c      	lsrs	r4, r5, #16
 80201ec:	fb08 3319 	mls	r3, r8, r9, r3
 80201f0:	fa1f fa8e 	uxth.w	sl, lr
 80201f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80201f8:	fb09 f40a 	mul.w	r4, r9, sl
 80201fc:	429c      	cmp	r4, r3
 80201fe:	fa02 f207 	lsl.w	r2, r2, r7
 8020202:	fa00 f107 	lsl.w	r1, r0, r7
 8020206:	d90b      	bls.n	8020220 <__udivmoddi4+0x1b0>
 8020208:	eb1e 0303 	adds.w	r3, lr, r3
 802020c:	f109 30ff 	add.w	r0, r9, #4294967295
 8020210:	f080 8087 	bcs.w	8020322 <__udivmoddi4+0x2b2>
 8020214:	429c      	cmp	r4, r3
 8020216:	f240 8084 	bls.w	8020322 <__udivmoddi4+0x2b2>
 802021a:	f1a9 0902 	sub.w	r9, r9, #2
 802021e:	4473      	add	r3, lr
 8020220:	1b1b      	subs	r3, r3, r4
 8020222:	b2ad      	uxth	r5, r5
 8020224:	fbb3 f0f8 	udiv	r0, r3, r8
 8020228:	fb08 3310 	mls	r3, r8, r0, r3
 802022c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8020230:	fb00 fa0a 	mul.w	sl, r0, sl
 8020234:	45a2      	cmp	sl, r4
 8020236:	d908      	bls.n	802024a <__udivmoddi4+0x1da>
 8020238:	eb1e 0404 	adds.w	r4, lr, r4
 802023c:	f100 33ff 	add.w	r3, r0, #4294967295
 8020240:	d26b      	bcs.n	802031a <__udivmoddi4+0x2aa>
 8020242:	45a2      	cmp	sl, r4
 8020244:	d969      	bls.n	802031a <__udivmoddi4+0x2aa>
 8020246:	3802      	subs	r0, #2
 8020248:	4474      	add	r4, lr
 802024a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 802024e:	fba0 8902 	umull	r8, r9, r0, r2
 8020252:	eba4 040a 	sub.w	r4, r4, sl
 8020256:	454c      	cmp	r4, r9
 8020258:	46c2      	mov	sl, r8
 802025a:	464b      	mov	r3, r9
 802025c:	d354      	bcc.n	8020308 <__udivmoddi4+0x298>
 802025e:	d051      	beq.n	8020304 <__udivmoddi4+0x294>
 8020260:	2e00      	cmp	r6, #0
 8020262:	d069      	beq.n	8020338 <__udivmoddi4+0x2c8>
 8020264:	ebb1 050a 	subs.w	r5, r1, sl
 8020268:	eb64 0403 	sbc.w	r4, r4, r3
 802026c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8020270:	40fd      	lsrs	r5, r7
 8020272:	40fc      	lsrs	r4, r7
 8020274:	ea4c 0505 	orr.w	r5, ip, r5
 8020278:	e9c6 5400 	strd	r5, r4, [r6]
 802027c:	2700      	movs	r7, #0
 802027e:	e747      	b.n	8020110 <__udivmoddi4+0xa0>
 8020280:	f1c2 0320 	rsb	r3, r2, #32
 8020284:	fa20 f703 	lsr.w	r7, r0, r3
 8020288:	4095      	lsls	r5, r2
 802028a:	fa01 f002 	lsl.w	r0, r1, r2
 802028e:	fa21 f303 	lsr.w	r3, r1, r3
 8020292:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020296:	4338      	orrs	r0, r7
 8020298:	0c01      	lsrs	r1, r0, #16
 802029a:	fbb3 f7fe 	udiv	r7, r3, lr
 802029e:	fa1f f885 	uxth.w	r8, r5
 80202a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80202a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80202aa:	fb07 f308 	mul.w	r3, r7, r8
 80202ae:	428b      	cmp	r3, r1
 80202b0:	fa04 f402 	lsl.w	r4, r4, r2
 80202b4:	d907      	bls.n	80202c6 <__udivmoddi4+0x256>
 80202b6:	1869      	adds	r1, r5, r1
 80202b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80202bc:	d22f      	bcs.n	802031e <__udivmoddi4+0x2ae>
 80202be:	428b      	cmp	r3, r1
 80202c0:	d92d      	bls.n	802031e <__udivmoddi4+0x2ae>
 80202c2:	3f02      	subs	r7, #2
 80202c4:	4429      	add	r1, r5
 80202c6:	1acb      	subs	r3, r1, r3
 80202c8:	b281      	uxth	r1, r0
 80202ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80202ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80202d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80202d6:	fb00 f308 	mul.w	r3, r0, r8
 80202da:	428b      	cmp	r3, r1
 80202dc:	d907      	bls.n	80202ee <__udivmoddi4+0x27e>
 80202de:	1869      	adds	r1, r5, r1
 80202e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80202e4:	d217      	bcs.n	8020316 <__udivmoddi4+0x2a6>
 80202e6:	428b      	cmp	r3, r1
 80202e8:	d915      	bls.n	8020316 <__udivmoddi4+0x2a6>
 80202ea:	3802      	subs	r0, #2
 80202ec:	4429      	add	r1, r5
 80202ee:	1ac9      	subs	r1, r1, r3
 80202f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80202f4:	e73b      	b.n	802016e <__udivmoddi4+0xfe>
 80202f6:	4637      	mov	r7, r6
 80202f8:	4630      	mov	r0, r6
 80202fa:	e709      	b.n	8020110 <__udivmoddi4+0xa0>
 80202fc:	4607      	mov	r7, r0
 80202fe:	e6e7      	b.n	80200d0 <__udivmoddi4+0x60>
 8020300:	4618      	mov	r0, r3
 8020302:	e6fb      	b.n	80200fc <__udivmoddi4+0x8c>
 8020304:	4541      	cmp	r1, r8
 8020306:	d2ab      	bcs.n	8020260 <__udivmoddi4+0x1f0>
 8020308:	ebb8 0a02 	subs.w	sl, r8, r2
 802030c:	eb69 020e 	sbc.w	r2, r9, lr
 8020310:	3801      	subs	r0, #1
 8020312:	4613      	mov	r3, r2
 8020314:	e7a4      	b.n	8020260 <__udivmoddi4+0x1f0>
 8020316:	4660      	mov	r0, ip
 8020318:	e7e9      	b.n	80202ee <__udivmoddi4+0x27e>
 802031a:	4618      	mov	r0, r3
 802031c:	e795      	b.n	802024a <__udivmoddi4+0x1da>
 802031e:	4667      	mov	r7, ip
 8020320:	e7d1      	b.n	80202c6 <__udivmoddi4+0x256>
 8020322:	4681      	mov	r9, r0
 8020324:	e77c      	b.n	8020220 <__udivmoddi4+0x1b0>
 8020326:	3802      	subs	r0, #2
 8020328:	442c      	add	r4, r5
 802032a:	e747      	b.n	80201bc <__udivmoddi4+0x14c>
 802032c:	f1ac 0c02 	sub.w	ip, ip, #2
 8020330:	442b      	add	r3, r5
 8020332:	e72f      	b.n	8020194 <__udivmoddi4+0x124>
 8020334:	4638      	mov	r0, r7
 8020336:	e708      	b.n	802014a <__udivmoddi4+0xda>
 8020338:	4637      	mov	r7, r6
 802033a:	e6e9      	b.n	8020110 <__udivmoddi4+0xa0>

0802033c <__aeabi_idiv0>:
 802033c:	4770      	bx	lr
 802033e:	bf00      	nop

08020340 <_ZN7EncoderC1Ev>:
#include "encoder.hpp"
#include "declare_extern.h"

Encoder::Encoder() : distance_(0)
 8020340:	b480      	push	{r7}
 8020342:	b083      	sub	sp, #12
 8020344:	af00      	add	r7, sp, #0
 8020346:	6078      	str	r0, [r7, #4]
				   , distance_stack_(0)
				   , distance_difference_(0) {}
 8020348:	687b      	ldr	r3, [r7, #4]
 802034a:	f04f 0200 	mov.w	r2, #0
 802034e:	601a      	str	r2, [r3, #0]
 8020350:	687b      	ldr	r3, [r7, #4]
 8020352:	f04f 0200 	mov.w	r2, #0
 8020356:	605a      	str	r2, [r3, #4]
 8020358:	687b      	ldr	r3, [r7, #4]
 802035a:	f04f 0200 	mov.w	r2, #0
 802035e:	609a      	str	r2, [r3, #8]
 8020360:	687b      	ldr	r3, [r7, #4]
 8020362:	4618      	mov	r0, r3
 8020364:	370c      	adds	r7, #12
 8020366:	46bd      	mov	sp, r7
 8020368:	f85d 7b04 	ldr.w	r7, [sp], #4
 802036c:	4770      	bx	lr

0802036e <_ZN8Iim42652C1Ev>:
#include "iim_42652.hpp"
#include "declare_extern.h"

Iim42652::Iim42652() : degree_stack_z_(0) {}
 802036e:	b490      	push	{r4, r7}
 8020370:	b082      	sub	sp, #8
 8020372:	af00      	add	r7, sp, #0
 8020374:	6078      	str	r0, [r7, #4]
 8020376:	687a      	ldr	r2, [r7, #4]
 8020378:	f04f 0300 	mov.w	r3, #0
 802037c:	f04f 0400 	mov.w	r4, #0
 8020380:	e9c2 3400 	strd	r3, r4, [r2]
 8020384:	687b      	ldr	r3, [r7, #4]
 8020386:	4618      	mov	r0, r3
 8020388:	3708      	adds	r7, #8
 802038a:	46bd      	mov	sp, r7
 802038c:	bc90      	pop	{r4, r7}
 802038e:	4770      	bx	lr

08020390 <_ZN3LedC1Ev>:
#include "led.hpp"

Led::Led() : interrupt_count_(0)
 8020390:	b480      	push	{r7}
 8020392:	b083      	sub	sp, #12
 8020394:	af00      	add	r7, sp, #0
 8020396:	6078      	str	r0, [r7, #4]
           , interrupt_timer_(0) {}
 8020398:	687b      	ldr	r3, [r7, #4]
 802039a:	2200      	movs	r2, #0
 802039c:	701a      	strb	r2, [r3, #0]
 802039e:	687b      	ldr	r3, [r7, #4]
 80203a0:	2200      	movs	r2, #0
 80203a2:	705a      	strb	r2, [r3, #1]
 80203a4:	687b      	ldr	r3, [r7, #4]
 80203a6:	4618      	mov	r0, r3
 80203a8:	370c      	adds	r7, #12
 80203aa:	46bd      	mov	sp, r7
 80203ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203b0:	4770      	bx	lr
	...

080203b4 <_ZN3Led10ColorOrderEc>:

void Led::ColorOrder(char color)
{
 80203b4:	b580      	push	{r7, lr}
 80203b6:	b082      	sub	sp, #8
 80203b8:	af00      	add	r7, sp, #0
 80203ba:	6078      	str	r0, [r7, #4]
 80203bc:	460b      	mov	r3, r1
 80203be:	70fb      	strb	r3, [r7, #3]
    switch(color)
 80203c0:	78fb      	ldrb	r3, [r7, #3]
 80203c2:	3b42      	subs	r3, #66	; 0x42
 80203c4:	2b17      	cmp	r3, #23
 80203c6:	f200 80b8 	bhi.w	802053a <_ZN3Led10ColorOrderEc+0x186>
 80203ca:	a201      	add	r2, pc, #4	; (adr r2, 80203d0 <_ZN3Led10ColorOrderEc+0x1c>)
 80203cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80203d0:	0802047d 	.word	0x0802047d
 80203d4:	080204c9 	.word	0x080204c9
 80203d8:	0802053b 	.word	0x0802053b
 80203dc:	0802053b 	.word	0x0802053b
 80203e0:	0802053b 	.word	0x0802053b
 80203e4:	08020457 	.word	0x08020457
 80203e8:	0802053b 	.word	0x0802053b
 80203ec:	0802053b 	.word	0x0802053b
 80203f0:	0802053b 	.word	0x0802053b
 80203f4:	0802053b 	.word	0x0802053b
 80203f8:	0802053b 	.word	0x0802053b
 80203fc:	080204ef 	.word	0x080204ef
 8020400:	0802053b 	.word	0x0802053b
 8020404:	0802053b 	.word	0x0802053b
 8020408:	0802053b 	.word	0x0802053b
 802040c:	0802053b 	.word	0x0802053b
 8020410:	08020431 	.word	0x08020431
 8020414:	0802053b 	.word	0x0802053b
 8020418:	0802053b 	.word	0x0802053b
 802041c:	0802053b 	.word	0x0802053b
 8020420:	0802053b 	.word	0x0802053b
 8020424:	08020515 	.word	0x08020515
 8020428:	0802053b 	.word	0x0802053b
 802042c:	080204a3 	.word	0x080204a3
    {
        case 'R': R_ON;  G_OFF; B_OFF; break;
 8020430:	2200      	movs	r2, #0
 8020432:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020436:	484c      	ldr	r0, [pc, #304]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020438:	f003 f9f6 	bl	8023828 <HAL_GPIO_WritePin>
 802043c:	2201      	movs	r2, #1
 802043e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020442:	4849      	ldr	r0, [pc, #292]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020444:	f003 f9f0 	bl	8023828 <HAL_GPIO_WritePin>
 8020448:	2201      	movs	r2, #1
 802044a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802044e:	4846      	ldr	r0, [pc, #280]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020450:	f003 f9ea 	bl	8023828 <HAL_GPIO_WritePin>
 8020454:	e084      	b.n	8020560 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'G': R_OFF; G_ON;  B_OFF; break;
 8020456:	2201      	movs	r2, #1
 8020458:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802045c:	4842      	ldr	r0, [pc, #264]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 802045e:	f003 f9e3 	bl	8023828 <HAL_GPIO_WritePin>
 8020462:	2200      	movs	r2, #0
 8020464:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020468:	483f      	ldr	r0, [pc, #252]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 802046a:	f003 f9dd 	bl	8023828 <HAL_GPIO_WritePin>
 802046e:	2201      	movs	r2, #1
 8020470:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020474:	483c      	ldr	r0, [pc, #240]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020476:	f003 f9d7 	bl	8023828 <HAL_GPIO_WritePin>
 802047a:	e071      	b.n	8020560 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'B': R_OFF; G_OFF; B_ON;  break;
 802047c:	2201      	movs	r2, #1
 802047e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020482:	4839      	ldr	r0, [pc, #228]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020484:	f003 f9d0 	bl	8023828 <HAL_GPIO_WritePin>
 8020488:	2201      	movs	r2, #1
 802048a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802048e:	4836      	ldr	r0, [pc, #216]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020490:	f003 f9ca 	bl	8023828 <HAL_GPIO_WritePin>
 8020494:	2200      	movs	r2, #0
 8020496:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802049a:	4833      	ldr	r0, [pc, #204]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 802049c:	f003 f9c4 	bl	8023828 <HAL_GPIO_WritePin>
 80204a0:	e05e      	b.n	8020560 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'Y': R_ON;  G_ON;  B_OFF; break;
 80204a2:	2200      	movs	r2, #0
 80204a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80204a8:	482f      	ldr	r0, [pc, #188]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 80204aa:	f003 f9bd 	bl	8023828 <HAL_GPIO_WritePin>
 80204ae:	2200      	movs	r2, #0
 80204b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80204b4:	482c      	ldr	r0, [pc, #176]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 80204b6:	f003 f9b7 	bl	8023828 <HAL_GPIO_WritePin>
 80204ba:	2201      	movs	r2, #1
 80204bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80204c0:	4829      	ldr	r0, [pc, #164]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 80204c2:	f003 f9b1 	bl	8023828 <HAL_GPIO_WritePin>
 80204c6:	e04b      	b.n	8020560 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'C': R_OFF; G_ON;  B_ON;  break;
 80204c8:	2201      	movs	r2, #1
 80204ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80204ce:	4826      	ldr	r0, [pc, #152]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 80204d0:	f003 f9aa 	bl	8023828 <HAL_GPIO_WritePin>
 80204d4:	2200      	movs	r2, #0
 80204d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80204da:	4823      	ldr	r0, [pc, #140]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 80204dc:	f003 f9a4 	bl	8023828 <HAL_GPIO_WritePin>
 80204e0:	2200      	movs	r2, #0
 80204e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80204e6:	4820      	ldr	r0, [pc, #128]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 80204e8:	f003 f99e 	bl	8023828 <HAL_GPIO_WritePin>
 80204ec:	e038      	b.n	8020560 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'M': R_ON;  G_OFF; B_ON;  break;
 80204ee:	2200      	movs	r2, #0
 80204f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80204f4:	481c      	ldr	r0, [pc, #112]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 80204f6:	f003 f997 	bl	8023828 <HAL_GPIO_WritePin>
 80204fa:	2201      	movs	r2, #1
 80204fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020500:	4819      	ldr	r0, [pc, #100]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020502:	f003 f991 	bl	8023828 <HAL_GPIO_WritePin>
 8020506:	2200      	movs	r2, #0
 8020508:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802050c:	4816      	ldr	r0, [pc, #88]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 802050e:	f003 f98b 	bl	8023828 <HAL_GPIO_WritePin>
 8020512:	e025      	b.n	8020560 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'W': R_ON;  G_ON;  B_ON;  break;
 8020514:	2200      	movs	r2, #0
 8020516:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802051a:	4813      	ldr	r0, [pc, #76]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 802051c:	f003 f984 	bl	8023828 <HAL_GPIO_WritePin>
 8020520:	2200      	movs	r2, #0
 8020522:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020526:	4810      	ldr	r0, [pc, #64]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020528:	f003 f97e 	bl	8023828 <HAL_GPIO_WritePin>
 802052c:	2200      	movs	r2, #0
 802052e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020532:	480d      	ldr	r0, [pc, #52]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020534:	f003 f978 	bl	8023828 <HAL_GPIO_WritePin>
 8020538:	e012      	b.n	8020560 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'X': // fall through
        default:  R_OFF; G_OFF; B_OFF; break;
 802053a:	2201      	movs	r2, #1
 802053c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020540:	4809      	ldr	r0, [pc, #36]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020542:	f003 f971 	bl	8023828 <HAL_GPIO_WritePin>
 8020546:	2201      	movs	r2, #1
 8020548:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802054c:	4806      	ldr	r0, [pc, #24]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 802054e:	f003 f96b 	bl	8023828 <HAL_GPIO_WritePin>
 8020552:	2201      	movs	r2, #1
 8020554:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020558:	4803      	ldr	r0, [pc, #12]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 802055a:	f003 f965 	bl	8023828 <HAL_GPIO_WritePin>
 802055e:	bf00      	nop
    }
}
 8020560:	bf00      	nop
 8020562:	3708      	adds	r7, #8
 8020564:	46bd      	mov	sp, r7
 8020566:	bd80      	pop	{r7, pc}
 8020568:	40020800 	.word	0x40020800

0802056c <_ZN3Led5BlinkEhcc>:

void Led::Blink(uint8_t times, char color_1, char color_2)
{
 802056c:	b580      	push	{r7, lr}
 802056e:	b084      	sub	sp, #16
 8020570:	af00      	add	r7, sp, #0
 8020572:	6078      	str	r0, [r7, #4]
 8020574:	4608      	mov	r0, r1
 8020576:	4611      	mov	r1, r2
 8020578:	461a      	mov	r2, r3
 802057a:	4603      	mov	r3, r0
 802057c:	70fb      	strb	r3, [r7, #3]
 802057e:	460b      	mov	r3, r1
 8020580:	70bb      	strb	r3, [r7, #2]
 8020582:	4613      	mov	r3, r2
 8020584:	707b      	strb	r3, [r7, #1]
    for(uint8_t i = 0; i < times; i++)
 8020586:	2300      	movs	r3, #0
 8020588:	73fb      	strb	r3, [r7, #15]
 802058a:	7bfa      	ldrb	r2, [r7, #15]
 802058c:	78fb      	ldrb	r3, [r7, #3]
 802058e:	429a      	cmp	r2, r3
 8020590:	d215      	bcs.n	80205be <_ZN3Led5BlinkEhcc+0x52>
    {
        ColorOrder(color_1);
 8020592:	78bb      	ldrb	r3, [r7, #2]
 8020594:	4619      	mov	r1, r3
 8020596:	6878      	ldr	r0, [r7, #4]
 8020598:	f7ff ff0c 	bl	80203b4 <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 802059c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80205a0:	f001 ff12 	bl	80223c8 <HAL_Delay>
        ColorOrder(color_2);
 80205a4:	787b      	ldrb	r3, [r7, #1]
 80205a6:	4619      	mov	r1, r3
 80205a8:	6878      	ldr	r0, [r7, #4]
 80205aa:	f7ff ff03 	bl	80203b4 <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 80205ae:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80205b2:	f001 ff09 	bl	80223c8 <HAL_Delay>
    for(uint8_t i = 0; i < times; i++)
 80205b6:	7bfb      	ldrb	r3, [r7, #15]
 80205b8:	3301      	adds	r3, #1
 80205ba:	73fb      	strb	r3, [r7, #15]
 80205bc:	e7e5      	b.n	802058a <_ZN3Led5BlinkEhcc+0x1e>
    }
}
 80205be:	bf00      	nop
 80205c0:	3710      	adds	r7, #16
 80205c2:	46bd      	mov	sp, r7
 80205c4:	bd80      	pop	{r7, pc}

080205c6 <_ZN10LineSensorC1Ev>:
#include "line_sensor.hpp"

LineSensor::LineSensor() : line_sensors_buff_{0}
 80205c6:	b580      	push	{r7, lr}
 80205c8:	b082      	sub	sp, #8
 80205ca:	af00      	add	r7, sp, #0
 80205cc:	6078      	str	r0, [r7, #4]
                         , consecutive_line_sensors_buff_{{0}}
                         , max_line_sensors_valu_{0}
                         , min_line_sensors_valu_{0}
                         , line_sensors_valu_{0}
                         , emergency_stop_flag_(false) {}
 80205ce:	687b      	ldr	r3, [r7, #4]
 80205d0:	461a      	mov	r2, r3
 80205d2:	2300      	movs	r3, #0
 80205d4:	6013      	str	r3, [r2, #0]
 80205d6:	6053      	str	r3, [r2, #4]
 80205d8:	6093      	str	r3, [r2, #8]
 80205da:	60d3      	str	r3, [r2, #12]
 80205dc:	6113      	str	r3, [r2, #16]
 80205de:	6153      	str	r3, [r2, #20]
 80205e0:	6193      	str	r3, [r2, #24]
 80205e2:	687b      	ldr	r3, [r7, #4]
 80205e4:	331c      	adds	r3, #28
 80205e6:	f44f 728c 	mov.w	r2, #280	; 0x118
 80205ea:	2100      	movs	r1, #0
 80205ec:	4618      	mov	r0, r3
 80205ee:	f004 ff07 	bl	8025400 <memset>
 80205f2:	687b      	ldr	r3, [r7, #4]
 80205f4:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80205f8:	2200      	movs	r2, #0
 80205fa:	601a      	str	r2, [r3, #0]
 80205fc:	605a      	str	r2, [r3, #4]
 80205fe:	609a      	str	r2, [r3, #8]
 8020600:	60da      	str	r2, [r3, #12]
 8020602:	611a      	str	r2, [r3, #16]
 8020604:	615a      	str	r2, [r3, #20]
 8020606:	619a      	str	r2, [r3, #24]
 8020608:	687b      	ldr	r3, [r7, #4]
 802060a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 802060e:	2200      	movs	r2, #0
 8020610:	601a      	str	r2, [r3, #0]
 8020612:	605a      	str	r2, [r3, #4]
 8020614:	609a      	str	r2, [r3, #8]
 8020616:	60da      	str	r2, [r3, #12]
 8020618:	611a      	str	r2, [r3, #16]
 802061a:	615a      	str	r2, [r3, #20]
 802061c:	619a      	str	r2, [r3, #24]
 802061e:	687b      	ldr	r3, [r7, #4]
 8020620:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8020624:	2200      	movs	r2, #0
 8020626:	601a      	str	r2, [r3, #0]
 8020628:	605a      	str	r2, [r3, #4]
 802062a:	609a      	str	r2, [r3, #8]
 802062c:	60da      	str	r2, [r3, #12]
 802062e:	611a      	str	r2, [r3, #16]
 8020630:	615a      	str	r2, [r3, #20]
 8020632:	619a      	str	r2, [r3, #24]
 8020634:	687b      	ldr	r3, [r7, #4]
 8020636:	2200      	movs	r2, #0
 8020638:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 802063c:	687b      	ldr	r3, [r7, #4]
 802063e:	4618      	mov	r0, r3
 8020640:	3708      	adds	r7, #8
 8020642:	46bd      	mov	sp, r7
 8020644:	bd80      	pop	{r7, pc}
	...

08020648 <_ZN10LineSensor4InitEv>:

void LineSensor::Init()
{
 8020648:	b580      	push	{r7, lr}
 802064a:	b082      	sub	sp, #8
 802064c:	af00      	add	r7, sp, #0
 802064e:	6078      	str	r0, [r7, #4]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)line_sensors_buff_, NUM_OF_LINE_SENSORS) != HAL_OK)
 8020650:	687b      	ldr	r3, [r7, #4]
 8020652:	220e      	movs	r2, #14
 8020654:	4619      	mov	r1, r3
 8020656:	4815      	ldr	r0, [pc, #84]	; (80206ac <_ZN10LineSensor4InitEv+0x64>)
 8020658:	f001 ff1c 	bl	8022494 <HAL_ADC_Start_DMA>
 802065c:	4603      	mov	r3, r0
 802065e:	2b00      	cmp	r3, #0
 8020660:	bf14      	ite	ne
 8020662:	2301      	movne	r3, #1
 8020664:	2300      	moveq	r3, #0
 8020666:	b2db      	uxtb	r3, r3
 8020668:	2b00      	cmp	r3, #0
 802066a:	d004      	beq.n	8020676 <_ZN10LineSensor4InitEv+0x2e>
    {
#ifdef DEBUG_MODE
        g_error_handler_adc1 = true;
 802066c:	4b10      	ldr	r3, [pc, #64]	; (80206b0 <_ZN10LineSensor4InitEv+0x68>)
 802066e:	2201      	movs	r2, #1
 8020670:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8020672:	f001 f901 	bl	8021878 <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1) != HAL_OK)
 8020676:	2100      	movs	r1, #0
 8020678:	480e      	ldr	r0, [pc, #56]	; (80206b4 <_ZN10LineSensor4InitEv+0x6c>)
 802067a:	f003 ff2d 	bl	80244d8 <HAL_TIM_PWM_Start>
 802067e:	4603      	mov	r3, r0
 8020680:	2b00      	cmp	r3, #0
 8020682:	bf14      	ite	ne
 8020684:	2301      	movne	r3, #1
 8020686:	2300      	moveq	r3, #0
 8020688:	b2db      	uxtb	r3, r3
 802068a:	2b00      	cmp	r3, #0
 802068c:	d004      	beq.n	8020698 <_ZN10LineSensor4InitEv+0x50>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim11 = true;
 802068e:	4b0a      	ldr	r3, [pc, #40]	; (80206b8 <_ZN10LineSensor4InitEv+0x70>)
 8020690:	2201      	movs	r2, #1
 8020692:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8020694:	f001 f8f0 	bl	8021878 <Error_Handler>
    }

    __HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, LINE_SENSORS_LED_COMPARE);
 8020698:	4b06      	ldr	r3, [pc, #24]	; (80206b4 <_ZN10LineSensor4InitEv+0x6c>)
 802069a:	681b      	ldr	r3, [r3, #0]
 802069c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80206a0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80206a2:	bf00      	nop
 80206a4:	3708      	adds	r7, #8
 80206a6:	46bd      	mov	sp, r7
 80206a8:	bd80      	pop	{r7, pc}
 80206aa:	bf00      	nop
 80206ac:	2000063c 	.word	0x2000063c
 80206b0:	2000002d 	.word	0x2000002d
 80206b4:	20000684 	.word	0x20000684
 80206b8:	2000002e 	.word	0x2000002e

080206bc <_ZN10LineSensor20StoreConsecutiveBuffEv>:

void LineSensor::StoreConsecutiveBuff()
{
 80206bc:	b480      	push	{r7}
 80206be:	b085      	sub	sp, #20
 80206c0:	af00      	add	r7, sp, #0
 80206c2:	6078      	str	r0, [r7, #4]
    static uint8_t times = 0;

    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 80206c4:	2300      	movs	r3, #0
 80206c6:	60fb      	str	r3, [r7, #12]
 80206c8:	68fb      	ldr	r3, [r7, #12]
 80206ca:	2b0d      	cmp	r3, #13
 80206cc:	dc16      	bgt.n	80206fc <_ZN10LineSensor20StoreConsecutiveBuffEv+0x40>
    {
        consecutive_line_sensors_buff_[times][i] = line_sensors_buff_[i];
 80206ce:	4b15      	ldr	r3, [pc, #84]	; (8020724 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 80206d0:	781b      	ldrb	r3, [r3, #0]
 80206d2:	4619      	mov	r1, r3
 80206d4:	687b      	ldr	r3, [r7, #4]
 80206d6:	68fa      	ldr	r2, [r7, #12]
 80206d8:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80206dc:	687a      	ldr	r2, [r7, #4]
 80206de:	460b      	mov	r3, r1
 80206e0:	00db      	lsls	r3, r3, #3
 80206e2:	1a5b      	subs	r3, r3, r1
 80206e4:	005b      	lsls	r3, r3, #1
 80206e6:	68f9      	ldr	r1, [r7, #12]
 80206e8:	440b      	add	r3, r1
 80206ea:	330c      	adds	r3, #12
 80206ec:	005b      	lsls	r3, r3, #1
 80206ee:	4413      	add	r3, r2
 80206f0:	4602      	mov	r2, r0
 80206f2:	809a      	strh	r2, [r3, #4]
    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 80206f4:	68fb      	ldr	r3, [r7, #12]
 80206f6:	3301      	adds	r3, #1
 80206f8:	60fb      	str	r3, [r7, #12]
 80206fa:	e7e5      	b.n	80206c8 <_ZN10LineSensor20StoreConsecutiveBuffEv+0xc>
    }

    if(times < CONSECUTIVE_TIMES) times++;
 80206fc:	4b09      	ldr	r3, [pc, #36]	; (8020724 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 80206fe:	781b      	ldrb	r3, [r3, #0]
 8020700:	2b09      	cmp	r3, #9
 8020702:	d806      	bhi.n	8020712 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x56>
 8020704:	4b07      	ldr	r3, [pc, #28]	; (8020724 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8020706:	781b      	ldrb	r3, [r3, #0]
 8020708:	3301      	adds	r3, #1
 802070a:	b2da      	uxtb	r2, r3
 802070c:	4b05      	ldr	r3, [pc, #20]	; (8020724 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 802070e:	701a      	strb	r2, [r3, #0]
    else times = 0;
}
 8020710:	e002      	b.n	8020718 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x5c>
    else times = 0;
 8020712:	4b04      	ldr	r3, [pc, #16]	; (8020724 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8020714:	2200      	movs	r2, #0
 8020716:	701a      	strb	r2, [r3, #0]
}
 8020718:	bf00      	nop
 802071a:	3714      	adds	r7, #20
 802071c:	46bd      	mov	sp, r7
 802071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020722:	4770      	bx	lr
 8020724:	2000002c 	.word	0x2000002c

08020728 <_ZN10LineSensor9MergeSortEPthh>:

void LineSensor::MergeSort(uint16_t array[], uint8_t first_index, uint8_t last_index)
{
 8020728:	b5b0      	push	{r4, r5, r7, lr}
 802072a:	b088      	sub	sp, #32
 802072c:	af00      	add	r7, sp, #0
 802072e:	60f8      	str	r0, [r7, #12]
 8020730:	60b9      	str	r1, [r7, #8]
 8020732:	4611      	mov	r1, r2
 8020734:	461a      	mov	r2, r3
 8020736:	460b      	mov	r3, r1
 8020738:	71fb      	strb	r3, [r7, #7]
 802073a:	4613      	mov	r3, r2
 802073c:	71bb      	strb	r3, [r7, #6]

    for(i = first_index; i <= last_index; i++)
    {
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
        else                                     array[i] = temp_array[right--];
    }
 802073e:	466b      	mov	r3, sp
 8020740:	461d      	mov	r5, r3
    if(first_index >= last_index) return;
 8020742:	79fa      	ldrb	r2, [r7, #7]
 8020744:	79bb      	ldrb	r3, [r7, #6]
 8020746:	429a      	cmp	r2, r3
 8020748:	f080 80ba 	bcs.w	80208c0 <_ZN10LineSensor9MergeSortEPthh+0x198>
    uint16_t temp_array[last_index+1];
 802074c:	79b8      	ldrb	r0, [r7, #6]
 802074e:	61b8      	str	r0, [r7, #24]
 8020750:	4603      	mov	r3, r0
 8020752:	3301      	adds	r3, #1
 8020754:	4619      	mov	r1, r3
 8020756:	f04f 0200 	mov.w	r2, #0
 802075a:	f04f 0300 	mov.w	r3, #0
 802075e:	f04f 0400 	mov.w	r4, #0
 8020762:	0114      	lsls	r4, r2, #4
 8020764:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8020768:	010b      	lsls	r3, r1, #4
 802076a:	4603      	mov	r3, r0
 802076c:	3301      	adds	r3, #1
 802076e:	4619      	mov	r1, r3
 8020770:	f04f 0200 	mov.w	r2, #0
 8020774:	f04f 0300 	mov.w	r3, #0
 8020778:	f04f 0400 	mov.w	r4, #0
 802077c:	0114      	lsls	r4, r2, #4
 802077e:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8020782:	010b      	lsls	r3, r1, #4
 8020784:	4603      	mov	r3, r0
 8020786:	3301      	adds	r3, #1
 8020788:	005b      	lsls	r3, r3, #1
 802078a:	3301      	adds	r3, #1
 802078c:	3307      	adds	r3, #7
 802078e:	08db      	lsrs	r3, r3, #3
 8020790:	00db      	lsls	r3, r3, #3
 8020792:	ebad 0d03 	sub.w	sp, sp, r3
 8020796:	466b      	mov	r3, sp
 8020798:	3301      	adds	r3, #1
 802079a:	085b      	lsrs	r3, r3, #1
 802079c:	005b      	lsls	r3, r3, #1
 802079e:	617b      	str	r3, [r7, #20]
    middle = (first_index + last_index) / 2;
 80207a0:	79fa      	ldrb	r2, [r7, #7]
 80207a2:	79bb      	ldrb	r3, [r7, #6]
 80207a4:	4413      	add	r3, r2
 80207a6:	0fda      	lsrs	r2, r3, #31
 80207a8:	4413      	add	r3, r2
 80207aa:	105b      	asrs	r3, r3, #1
 80207ac:	74fb      	strb	r3, [r7, #19]
    MergeSort(array, first_index, middle);
 80207ae:	7cfb      	ldrb	r3, [r7, #19]
 80207b0:	79fa      	ldrb	r2, [r7, #7]
 80207b2:	68b9      	ldr	r1, [r7, #8]
 80207b4:	68f8      	ldr	r0, [r7, #12]
 80207b6:	f7ff ffb7 	bl	8020728 <_ZN10LineSensor9MergeSortEPthh>
    MergeSort(array, middle+1, last_index);
 80207ba:	7cfb      	ldrb	r3, [r7, #19]
 80207bc:	3301      	adds	r3, #1
 80207be:	b2da      	uxtb	r2, r3
 80207c0:	79bb      	ldrb	r3, [r7, #6]
 80207c2:	68b9      	ldr	r1, [r7, #8]
 80207c4:	68f8      	ldr	r0, [r7, #12]
 80207c6:	f7ff ffaf 	bl	8020728 <_ZN10LineSensor9MergeSortEPthh>
    for(i = middle; i >= first_index; i--)
 80207ca:	7cfb      	ldrb	r3, [r7, #19]
 80207cc:	77bb      	strb	r3, [r7, #30]
 80207ce:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80207d2:	79fb      	ldrb	r3, [r7, #7]
 80207d4:	429a      	cmp	r2, r3
 80207d6:	db11      	blt.n	80207fc <_ZN10LineSensor9MergeSortEPthh+0xd4>
        temp_array[i] = array[i];
 80207d8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80207dc:	005b      	lsls	r3, r3, #1
 80207de:	68ba      	ldr	r2, [r7, #8]
 80207e0:	4413      	add	r3, r2
 80207e2:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80207e6:	8819      	ldrh	r1, [r3, #0]
 80207e8:	697b      	ldr	r3, [r7, #20]
 80207ea:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle; i >= first_index; i--)
 80207ee:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80207f2:	b2db      	uxtb	r3, r3
 80207f4:	3b01      	subs	r3, #1
 80207f6:	b2db      	uxtb	r3, r3
 80207f8:	77bb      	strb	r3, [r7, #30]
 80207fa:	e7e8      	b.n	80207ce <_ZN10LineSensor9MergeSortEPthh+0xa6>
    for(i = middle+1; i <= last_index; i++)
 80207fc:	7cfb      	ldrb	r3, [r7, #19]
 80207fe:	3301      	adds	r3, #1
 8020800:	b2db      	uxtb	r3, r3
 8020802:	77bb      	strb	r3, [r7, #30]
 8020804:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8020808:	79bb      	ldrb	r3, [r7, #6]
 802080a:	429a      	cmp	r2, r3
 802080c:	dc17      	bgt.n	802083e <_ZN10LineSensor9MergeSortEPthh+0x116>
        temp_array[last_index - (i - (middle+1))] = array[i];
 802080e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8020812:	005b      	lsls	r3, r3, #1
 8020814:	68ba      	ldr	r2, [r7, #8]
 8020816:	4413      	add	r3, r2
 8020818:	79b9      	ldrb	r1, [r7, #6]
 802081a:	f997 001e 	ldrsb.w	r0, [r7, #30]
 802081e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8020822:	3201      	adds	r2, #1
 8020824:	1a82      	subs	r2, r0, r2
 8020826:	1a8a      	subs	r2, r1, r2
 8020828:	8819      	ldrh	r1, [r3, #0]
 802082a:	697b      	ldr	r3, [r7, #20]
 802082c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle+1; i <= last_index; i++)
 8020830:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8020834:	b2db      	uxtb	r3, r3
 8020836:	3301      	adds	r3, #1
 8020838:	b2db      	uxtb	r3, r3
 802083a:	77bb      	strb	r3, [r7, #30]
 802083c:	e7e2      	b.n	8020804 <_ZN10LineSensor9MergeSortEPthh+0xdc>
    left  = first_index;
 802083e:	79fb      	ldrb	r3, [r7, #7]
 8020840:	77fb      	strb	r3, [r7, #31]
    right = last_index;
 8020842:	79bb      	ldrb	r3, [r7, #6]
 8020844:	777b      	strb	r3, [r7, #29]
    for(i = first_index; i <= last_index; i++)
 8020846:	79fb      	ldrb	r3, [r7, #7]
 8020848:	77bb      	strb	r3, [r7, #30]
 802084a:	f997 201e 	ldrsb.w	r2, [r7, #30]
 802084e:	79bb      	ldrb	r3, [r7, #6]
 8020850:	429a      	cmp	r2, r3
 8020852:	dc33      	bgt.n	80208bc <_ZN10LineSensor9MergeSortEPthh+0x194>
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
 8020854:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8020858:	697b      	ldr	r3, [r7, #20]
 802085a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 802085e:	f997 101d 	ldrsb.w	r1, [r7, #29]
 8020862:	697b      	ldr	r3, [r7, #20]
 8020864:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8020868:	429a      	cmp	r2, r3
 802086a:	d210      	bcs.n	802088e <_ZN10LineSensor9MergeSortEPthh+0x166>
 802086c:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8020870:	b2d3      	uxtb	r3, r2
 8020872:	3301      	adds	r3, #1
 8020874:	b2db      	uxtb	r3, r3
 8020876:	77fb      	strb	r3, [r7, #31]
 8020878:	4611      	mov	r1, r2
 802087a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 802087e:	005b      	lsls	r3, r3, #1
 8020880:	68ba      	ldr	r2, [r7, #8]
 8020882:	4413      	add	r3, r2
 8020884:	697a      	ldr	r2, [r7, #20]
 8020886:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 802088a:	801a      	strh	r2, [r3, #0]
 802088c:	e00f      	b.n	80208ae <_ZN10LineSensor9MergeSortEPthh+0x186>
        else                                     array[i] = temp_array[right--];
 802088e:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8020892:	b2d3      	uxtb	r3, r2
 8020894:	3b01      	subs	r3, #1
 8020896:	b2db      	uxtb	r3, r3
 8020898:	777b      	strb	r3, [r7, #29]
 802089a:	4611      	mov	r1, r2
 802089c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80208a0:	005b      	lsls	r3, r3, #1
 80208a2:	68ba      	ldr	r2, [r7, #8]
 80208a4:	4413      	add	r3, r2
 80208a6:	697a      	ldr	r2, [r7, #20]
 80208a8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80208ac:	801a      	strh	r2, [r3, #0]
    for(i = first_index; i <= last_index; i++)
 80208ae:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80208b2:	b2db      	uxtb	r3, r3
 80208b4:	3301      	adds	r3, #1
 80208b6:	b2db      	uxtb	r3, r3
 80208b8:	77bb      	strb	r3, [r7, #30]
 80208ba:	e7c6      	b.n	802084a <_ZN10LineSensor9MergeSortEPthh+0x122>
 80208bc:	46ad      	mov	sp, r5
 80208be:	e001      	b.n	80208c4 <_ZN10LineSensor9MergeSortEPthh+0x19c>
    if(first_index >= last_index) return;
 80208c0:	bf00      	nop
 80208c2:	46ad      	mov	sp, r5
}
 80208c4:	3720      	adds	r7, #32
 80208c6:	46bd      	mov	sp, r7
 80208c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080208cc <_ZN10LineSensor3NewEv>:

void LineSensor::New()
{
 80208cc:	b5b0      	push	{r4, r5, r7, lr}
 80208ce:	b0ce      	sub	sp, #312	; 0x138
 80208d0:	af00      	add	r7, sp, #0
 80208d2:	1d3b      	adds	r3, r7, #4
 80208d4:	6018      	str	r0, [r3, #0]
    uint8_t i, j;
    uint16_t temp_array[CONSECUTIVE_TIMES];
    uint16_t sorted_array[NUM_OF_LINE_SENSORS][CONSECUTIVE_TIMES];
    
    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 80208d6:	2300      	movs	r3, #0
 80208d8:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80208dc:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80208e0:	2b0d      	cmp	r3, #13
 80208e2:	d86e      	bhi.n	80209c2 <_ZN10LineSensor3NewEv+0xf6>
    {
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 80208e4:	2300      	movs	r3, #0
 80208e6:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
 80208ea:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 80208ee:	2b09      	cmp	r3, #9
 80208f0:	d81c      	bhi.n	802092c <_ZN10LineSensor3NewEv+0x60>
        {
            temp_array[j] = consecutive_line_sensors_buff_[j][i];
 80208f2:	f897 2136 	ldrb.w	r2, [r7, #310]	; 0x136
 80208f6:	f897 4137 	ldrb.w	r4, [r7, #311]	; 0x137
 80208fa:	f897 1136 	ldrb.w	r1, [r7, #310]	; 0x136
 80208fe:	1d3b      	adds	r3, r7, #4
 8020900:	6818      	ldr	r0, [r3, #0]
 8020902:	4613      	mov	r3, r2
 8020904:	00db      	lsls	r3, r3, #3
 8020906:	1a9b      	subs	r3, r3, r2
 8020908:	005b      	lsls	r3, r3, #1
 802090a:	4423      	add	r3, r4
 802090c:	330c      	adds	r3, #12
 802090e:	005b      	lsls	r3, r3, #1
 8020910:	4403      	add	r3, r0
 8020912:	889a      	ldrh	r2, [r3, #4]
 8020914:	004b      	lsls	r3, r1, #1
 8020916:	f507 719c 	add.w	r1, r7, #312	; 0x138
 802091a:	440b      	add	r3, r1
 802091c:	f823 2c18 	strh.w	r2, [r3, #-24]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8020920:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 8020924:	3301      	adds	r3, #1
 8020926:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
 802092a:	e7de      	b.n	80208ea <_ZN10LineSensor3NewEv+0x1e>
        }

        MergeSort(temp_array, 0, CONSECUTIVE_TIMES-1);
 802092c:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8020930:	1d38      	adds	r0, r7, #4
 8020932:	2309      	movs	r3, #9
 8020934:	2200      	movs	r2, #0
 8020936:	6800      	ldr	r0, [r0, #0]
 8020938:	f7ff fef6 	bl	8020728 <_ZN10LineSensor9MergeSortEPthh>

        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 802093c:	2300      	movs	r3, #0
 802093e:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
 8020942:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 8020946:	2b09      	cmp	r3, #9
 8020948:	d835      	bhi.n	80209b6 <_ZN10LineSensor3NewEv+0xea>
        {
            sorted_array[i][j] = temp_array[j];
 802094a:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 802094e:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8020952:	f897 0136 	ldrb.w	r0, [r7, #310]	; 0x136
 8020956:	005b      	lsls	r3, r3, #1
 8020958:	f507 719c 	add.w	r1, r7, #312	; 0x138
 802095c:	440b      	add	r3, r1
 802095e:	f833 4c18 	ldrh.w	r4, [r3, #-24]
 8020962:	f107 0108 	add.w	r1, r7, #8
 8020966:	4613      	mov	r3, r2
 8020968:	009b      	lsls	r3, r3, #2
 802096a:	4413      	add	r3, r2
 802096c:	005b      	lsls	r3, r3, #1
 802096e:	4403      	add	r3, r0
 8020970:	4622      	mov	r2, r4
 8020972:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            g_consecutive_line_buff[i][j] = sorted_array[i][j];
 8020976:	f897 1137 	ldrb.w	r1, [r7, #311]	; 0x137
 802097a:	f897 5136 	ldrb.w	r5, [r7, #310]	; 0x136
 802097e:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8020982:	f897 0136 	ldrb.w	r0, [r7, #310]	; 0x136
 8020986:	f107 0408 	add.w	r4, r7, #8
 802098a:	460b      	mov	r3, r1
 802098c:	009b      	lsls	r3, r3, #2
 802098e:	440b      	add	r3, r1
 8020990:	005b      	lsls	r3, r3, #1
 8020992:	442b      	add	r3, r5
 8020994:	f834 4013 	ldrh.w	r4, [r4, r3, lsl #1]
 8020998:	4926      	ldr	r1, [pc, #152]	; (8020a34 <_ZN10LineSensor3NewEv+0x168>)
 802099a:	4613      	mov	r3, r2
 802099c:	009b      	lsls	r3, r3, #2
 802099e:	4413      	add	r3, r2
 80209a0:	005b      	lsls	r3, r3, #1
 80209a2:	4403      	add	r3, r0
 80209a4:	4622      	mov	r2, r4
 80209a6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 80209aa:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 80209ae:	3301      	adds	r3, #1
 80209b0:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
 80209b4:	e7c5      	b.n	8020942 <_ZN10LineSensor3NewEv+0x76>
    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 80209b6:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80209ba:	3301      	adds	r3, #1
 80209bc:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80209c0:	e78c      	b.n	80208dc <_ZN10LineSensor3NewEv+0x10>
        }
    }

    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 80209c2:	2300      	movs	r3, #0
 80209c4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80209c8:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80209cc:	2b0d      	cmp	r3, #13
 80209ce:	d82b      	bhi.n	8020a28 <_ZN10LineSensor3NewEv+0x15c>
    {
        
        g_max_line_valu[i] = max_line_sensors_valu_[i];
 80209d0:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80209d4:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80209d8:	1d39      	adds	r1, r7, #4
 80209da:	6809      	ldr	r1, [r1, #0]
 80209dc:	3398      	adds	r3, #152	; 0x98
 80209de:	005b      	lsls	r3, r3, #1
 80209e0:	440b      	add	r3, r1
 80209e2:	8899      	ldrh	r1, [r3, #4]
 80209e4:	4b14      	ldr	r3, [pc, #80]	; (8020a38 <_ZN10LineSensor3NewEv+0x16c>)
 80209e6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        g_min_line_valu[i] = min_line_sensors_valu_[i];
 80209ea:	f897 1137 	ldrb.w	r1, [r7, #311]	; 0x137
 80209ee:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80209f2:	1d3a      	adds	r2, r7, #4
 80209f4:	6812      	ldr	r2, [r2, #0]
 80209f6:	31a8      	adds	r1, #168	; 0xa8
 80209f8:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80209fc:	4a0f      	ldr	r2, [pc, #60]	; (8020a3c <_ZN10LineSensor3NewEv+0x170>)
 80209fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        g_line_valu[i] = line_sensors_valu_[i];
 8020a02:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8020a06:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8020a0a:	1d39      	adds	r1, r7, #4
 8020a0c:	6809      	ldr	r1, [r1, #0]
 8020a0e:	33b4      	adds	r3, #180	; 0xb4
 8020a10:	005b      	lsls	r3, r3, #1
 8020a12:	440b      	add	r3, r1
 8020a14:	8899      	ldrh	r1, [r3, #4]
 8020a16:	4b0a      	ldr	r3, [pc, #40]	; (8020a40 <_ZN10LineSensor3NewEv+0x174>)
 8020a18:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8020a1c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8020a20:	3301      	adds	r3, #1
 8020a22:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8020a26:	e7cf      	b.n	80209c8 <_ZN10LineSensor3NewEv+0xfc>
            min_line_sensors_valu_[i] = sorted_array[i][HALF_CONSECUTIVE_TIMES];
            g_min_line_valu[i] = min_line_sensors_valu_[i];
        }
        */
    }
}
 8020a28:	bf00      	nop
 8020a2a:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8020a2e:	46bd      	mov	sp, r7
 8020a30:	bdb0      	pop	{r4, r5, r7, pc}
 8020a32:	bf00      	nop
 8020a34:	2000004c 	.word	0x2000004c
 8020a38:	20000164 	.word	0x20000164
 8020a3c:	20000180 	.word	0x20000180
 8020a40:	2000019c 	.word	0x2000019c

08020a44 <_ZN10LineSensor13MonitorArraysEv>:
    return result;
}

#ifdef DEBUG_MODE
void LineSensor::MonitorArrays()
{
 8020a44:	b480      	push	{r7}
 8020a46:	b085      	sub	sp, #20
 8020a48:	af00      	add	r7, sp, #0
 8020a4a:	6078      	str	r0, [r7, #4]
    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8020a4c:	2300      	movs	r3, #0
 8020a4e:	73fb      	strb	r3, [r7, #15]
 8020a50:	7bfb      	ldrb	r3, [r7, #15]
 8020a52:	2b0d      	cmp	r3, #13
 8020a54:	d80b      	bhi.n	8020a6e <_ZN10LineSensor13MonitorArraysEv+0x2a>
    {
        g_line_buff[i] = line_sensors_buff_[i];
 8020a56:	7bf9      	ldrb	r1, [r7, #15]
 8020a58:	7bfb      	ldrb	r3, [r7, #15]
 8020a5a:	687a      	ldr	r2, [r7, #4]
 8020a5c:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8020a60:	4a06      	ldr	r2, [pc, #24]	; (8020a7c <_ZN10LineSensor13MonitorArraysEv+0x38>)
 8020a62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8020a66:	7bfb      	ldrb	r3, [r7, #15]
 8020a68:	3301      	adds	r3, #1
 8020a6a:	73fb      	strb	r3, [r7, #15]
 8020a6c:	e7f0      	b.n	8020a50 <_ZN10LineSensor13MonitorArraysEv+0xc>
    }
}
 8020a6e:	bf00      	nop
 8020a70:	3714      	adds	r7, #20
 8020a72:	46bd      	mov	sp, r7
 8020a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a78:	4770      	bx	lr
 8020a7a:	bf00      	nop
 8020a7c:	20000030 	.word	0x20000030

08020a80 <_ZN9LineTraceC1EP10LineSensor>:
#include "line_trace.hpp"

LineTrace::LineTrace(LineSensor *line_sensor) : integral_error_(0)
 8020a80:	b480      	push	{r7}
 8020a82:	b083      	sub	sp, #12
 8020a84:	af00      	add	r7, sp, #0
 8020a86:	6078      	str	r0, [r7, #4]
 8020a88:	6039      	str	r1, [r7, #0]
 8020a8a:	687b      	ldr	r3, [r7, #4]
 8020a8c:	f04f 0200 	mov.w	r2, #0
 8020a90:	601a      	str	r2, [r3, #0]
{
    line_sensor_ = line_sensor;
 8020a92:	687b      	ldr	r3, [r7, #4]
 8020a94:	683a      	ldr	r2, [r7, #0]
 8020a96:	605a      	str	r2, [r3, #4]
}
 8020a98:	687b      	ldr	r3, [r7, #4]
 8020a9a:	4618      	mov	r0, r3
 8020a9c:	370c      	adds	r7, #12
 8020a9e:	46bd      	mov	sp, r7
 8020aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020aa4:	4770      	bx	lr
	...

08020aa8 <_ZN6LoggerC1Ev>:
#include "logger.hpp"
#include <math.h>
#include <string.h>

Logger::Logger() : const_distance_log_(), radian_log_(), various_log_(), const_distance_copy_(), radian_copy_(), various_copy_(), accel_address_(), decel_address_(), periodic_write_enable_(0), accel_position_write_enable_(0), excess_stack_(0), target_velocity_(MIN_VELOCITY) {}
 8020aa8:	b580      	push	{r7, lr}
 8020aaa:	b082      	sub	sp, #8
 8020aac:	af00      	add	r7, sp, #0
 8020aae:	6078      	str	r0, [r7, #4]
 8020ab0:	687a      	ldr	r2, [r7, #4]
 8020ab2:	2309      	movs	r3, #9
 8020ab4:	2b00      	cmp	r3, #0
 8020ab6:	db05      	blt.n	8020ac4 <_ZN6LoggerC1Ev+0x1c>
 8020ab8:	f04f 0100 	mov.w	r1, #0
 8020abc:	6011      	str	r1, [r2, #0]
 8020abe:	3204      	adds	r2, #4
 8020ac0:	3b01      	subs	r3, #1
 8020ac2:	e7f7      	b.n	8020ab4 <_ZN6LoggerC1Ev+0xc>
 8020ac4:	687b      	ldr	r3, [r7, #4]
 8020ac6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8020aca:	2309      	movs	r3, #9
 8020acc:	2b00      	cmp	r3, #0
 8020ace:	db05      	blt.n	8020adc <_ZN6LoggerC1Ev+0x34>
 8020ad0:	f04f 0100 	mov.w	r1, #0
 8020ad4:	6011      	str	r1, [r2, #0]
 8020ad6:	3204      	adds	r2, #4
 8020ad8:	3b01      	subs	r3, #1
 8020ada:	e7f7      	b.n	8020acc <_ZN6LoggerC1Ev+0x24>
 8020adc:	687b      	ldr	r3, [r7, #4]
 8020ade:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8020ae2:	2309      	movs	r3, #9
 8020ae4:	2b00      	cmp	r3, #0
 8020ae6:	db04      	blt.n	8020af2 <_ZN6LoggerC1Ev+0x4a>
 8020ae8:	2100      	movs	r1, #0
 8020aea:	8011      	strh	r1, [r2, #0]
 8020aec:	3202      	adds	r2, #2
 8020aee:	3b01      	subs	r3, #1
 8020af0:	e7f8      	b.n	8020ae4 <_ZN6LoggerC1Ev+0x3c>
 8020af2:	687b      	ldr	r3, [r7, #4]
 8020af4:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8020af8:	2309      	movs	r3, #9
 8020afa:	2b00      	cmp	r3, #0
 8020afc:	db05      	blt.n	8020b0a <_ZN6LoggerC1Ev+0x62>
 8020afe:	f04f 0100 	mov.w	r1, #0
 8020b02:	6011      	str	r1, [r2, #0]
 8020b04:	3204      	adds	r2, #4
 8020b06:	3b01      	subs	r3, #1
 8020b08:	e7f7      	b.n	8020afa <_ZN6LoggerC1Ev+0x52>
 8020b0a:	687b      	ldr	r3, [r7, #4]
 8020b0c:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 8020b10:	2309      	movs	r3, #9
 8020b12:	2b00      	cmp	r3, #0
 8020b14:	db05      	blt.n	8020b22 <_ZN6LoggerC1Ev+0x7a>
 8020b16:	f04f 0100 	mov.w	r1, #0
 8020b1a:	6011      	str	r1, [r2, #0]
 8020b1c:	3204      	adds	r2, #4
 8020b1e:	3b01      	subs	r3, #1
 8020b20:	e7f7      	b.n	8020b12 <_ZN6LoggerC1Ev+0x6a>
 8020b22:	687b      	ldr	r3, [r7, #4]
 8020b24:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8020b28:	2309      	movs	r3, #9
 8020b2a:	2b00      	cmp	r3, #0
 8020b2c:	db04      	blt.n	8020b38 <_ZN6LoggerC1Ev+0x90>
 8020b2e:	2100      	movs	r1, #0
 8020b30:	8011      	strh	r1, [r2, #0]
 8020b32:	3202      	adds	r2, #2
 8020b34:	3b01      	subs	r3, #1
 8020b36:	e7f8      	b.n	8020b2a <_ZN6LoggerC1Ev+0x82>
 8020b38:	687b      	ldr	r3, [r7, #4]
 8020b3a:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 8020b3e:	2304      	movs	r3, #4
 8020b40:	2b00      	cmp	r3, #0
 8020b42:	db04      	blt.n	8020b4e <_ZN6LoggerC1Ev+0xa6>
 8020b44:	2100      	movs	r1, #0
 8020b46:	8011      	strh	r1, [r2, #0]
 8020b48:	3202      	adds	r2, #2
 8020b4a:	3b01      	subs	r3, #1
 8020b4c:	e7f8      	b.n	8020b40 <_ZN6LoggerC1Ev+0x98>
 8020b4e:	687b      	ldr	r3, [r7, #4]
 8020b50:	f103 02d2 	add.w	r2, r3, #210	; 0xd2
 8020b54:	2304      	movs	r3, #4
 8020b56:	2b00      	cmp	r3, #0
 8020b58:	db04      	blt.n	8020b64 <_ZN6LoggerC1Ev+0xbc>
 8020b5a:	2100      	movs	r1, #0
 8020b5c:	8011      	strh	r1, [r2, #0]
 8020b5e:	3202      	adds	r2, #2
 8020b60:	3b01      	subs	r3, #1
 8020b62:	e7f8      	b.n	8020b56 <_ZN6LoggerC1Ev+0xae>
 8020b64:	687b      	ldr	r3, [r7, #4]
 8020b66:	2200      	movs	r2, #0
 8020b68:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8020b6c:	687b      	ldr	r3, [r7, #4]
 8020b6e:	2200      	movs	r2, #0
 8020b70:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 8020b74:	687b      	ldr	r3, [r7, #4]
 8020b76:	f04f 0200 	mov.w	r2, #0
 8020b7a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8020b7e:	687b      	ldr	r3, [r7, #4]
 8020b80:	4a0b      	ldr	r2, [pc, #44]	; (8020bb0 <_ZN6LoggerC1Ev+0x108>)
 8020b82:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8020b86:	687b      	ldr	r3, [r7, #4]
 8020b88:	33e8      	adds	r3, #232	; 0xe8
 8020b8a:	4618      	mov	r0, r3
 8020b8c:	f7ff fbd8 	bl	8020340 <_ZN7EncoderC1Ev>
 8020b90:	687b      	ldr	r3, [r7, #4]
 8020b92:	33f8      	adds	r3, #248	; 0xf8
 8020b94:	4618      	mov	r0, r3
 8020b96:	f7ff fbea 	bl	802036e <_ZN8Iim42652C1Ev>
 8020b9a:	687b      	ldr	r3, [r7, #4]
 8020b9c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8020ba0:	4618      	mov	r0, r3
 8020ba2:	f000 fe6d 	bl	8021880 <_ZN10SideSensorC1Ev>
 8020ba6:	687b      	ldr	r3, [r7, #4]
 8020ba8:	4618      	mov	r0, r3
 8020baa:	3708      	adds	r7, #8
 8020bac:	46bd      	mov	sp, r7
 8020bae:	bd80      	pop	{r7, pc}
 8020bb0:	3fa66666 	.word	0x3fa66666

08020bb4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8020bb4:	b580      	push	{r7, lr}
 8020bb6:	b082      	sub	sp, #8
 8020bb8:	af00      	add	r7, sp, #0
 8020bba:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 8020bbc:	687b      	ldr	r3, [r7, #4]
 8020bbe:	681b      	ldr	r3, [r3, #0]
 8020bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020bc4:	d101      	bne.n	8020bca <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    InterruptTim2();
 8020bc6:	f001 fb0b 	bl	80221e0 <InterruptTim2>
  }
  if(htim->Instance == TIM6)
 8020bca:	687b      	ldr	r3, [r7, #4]
 8020bcc:	681b      	ldr	r3, [r3, #0]
 8020bce:	4a08      	ldr	r2, [pc, #32]	; (8020bf0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8020bd0:	4293      	cmp	r3, r2
 8020bd2:	d101      	bne.n	8020bd8 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
    InterruptTim6();
 8020bd4:	f001 faf4 	bl	80221c0 <InterruptTim6>
  }
  if(htim->Instance == TIM7)
 8020bd8:	687b      	ldr	r3, [r7, #4]
 8020bda:	681b      	ldr	r3, [r3, #0]
 8020bdc:	4a05      	ldr	r2, [pc, #20]	; (8020bf4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8020bde:	4293      	cmp	r3, r2
 8020be0:	d101      	bne.n	8020be6 <HAL_TIM_PeriodElapsedCallback+0x32>
  {
    InterruptTim7();
 8020be2:	f001 fadd 	bl	80221a0 <InterruptTim7>
  }
}
 8020be6:	bf00      	nop
 8020be8:	3708      	adds	r7, #8
 8020bea:	46bd      	mov	sp, r7
 8020bec:	bd80      	pop	{r7, pc}
 8020bee:	bf00      	nop
 8020bf0:	40001000 	.word	0x40001000
 8020bf4:	40001400 	.word	0x40001400

08020bf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020bf8:	b580      	push	{r7, lr}
 8020bfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020bfc:	f001 fb72 	bl	80222e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8020c00:	f000 f822 	bl	8020c48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8020c04:	f000 fd68 	bl	80216d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8020c08:	f000 fd46 	bl	8021698 <MX_DMA_Init>
  MX_ADC1_Init();
 8020c0c:	f000 f886 	bl	8020d1c <MX_ADC1_Init>
  MX_I2C2_Init();
 8020c10:	f000 f98c 	bl	8020f2c <MX_I2C2_Init>
  MX_SPI3_Init();
 8020c14:	f000 f9b8 	bl	8020f88 <MX_SPI3_Init>
  MX_TIM1_Init();
 8020c18:	f000 f9ec 	bl	8020ff4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8020c1c:	f000 fac8 	bl	80211b0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8020c20:	f000 fb40 	bl	80212a4 <MX_TIM4_Init>
  MX_TIM6_Init();
 8020c24:	f000 fbe0 	bl	80213e8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8020c28:	f000 fc14 	bl	8021454 <MX_TIM7_Init>
  MX_TIM8_Init();
 8020c2c:	f000 fc48 	bl	80214c0 <MX_TIM8_Init>
  MX_TIM11_Init();
 8020c30:	f000 fc9e 	bl	8021570 <MX_TIM11_Init>
  MX_TIM12_Init();
 8020c34:	f000 fcea 	bl	802160c <MX_TIM12_Init>
  MX_TIM2_Init();
 8020c38:	f000 fa6c 	bl	8021114 <MX_TIM2_Init>
  MX_TIM5_Init();
 8020c3c:	f000 fb86 	bl	802134c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  Init();
 8020c40:	f001 faa4 	bl	802218c <Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8020c44:	e7fe      	b.n	8020c44 <main+0x4c>
	...

08020c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8020c48:	b580      	push	{r7, lr}
 8020c4a:	b094      	sub	sp, #80	; 0x50
 8020c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8020c4e:	f107 0320 	add.w	r3, r7, #32
 8020c52:	2230      	movs	r2, #48	; 0x30
 8020c54:	2100      	movs	r1, #0
 8020c56:	4618      	mov	r0, r3
 8020c58:	f004 fbd2 	bl	8025400 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8020c5c:	f107 030c 	add.w	r3, r7, #12
 8020c60:	2200      	movs	r2, #0
 8020c62:	601a      	str	r2, [r3, #0]
 8020c64:	605a      	str	r2, [r3, #4]
 8020c66:	609a      	str	r2, [r3, #8]
 8020c68:	60da      	str	r2, [r3, #12]
 8020c6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8020c6c:	2300      	movs	r3, #0
 8020c6e:	60bb      	str	r3, [r7, #8]
 8020c70:	4b28      	ldr	r3, [pc, #160]	; (8020d14 <SystemClock_Config+0xcc>)
 8020c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020c74:	4a27      	ldr	r2, [pc, #156]	; (8020d14 <SystemClock_Config+0xcc>)
 8020c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8020c7a:	6413      	str	r3, [r2, #64]	; 0x40
 8020c7c:	4b25      	ldr	r3, [pc, #148]	; (8020d14 <SystemClock_Config+0xcc>)
 8020c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020c84:	60bb      	str	r3, [r7, #8]
 8020c86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8020c88:	2300      	movs	r3, #0
 8020c8a:	607b      	str	r3, [r7, #4]
 8020c8c:	4b22      	ldr	r3, [pc, #136]	; (8020d18 <SystemClock_Config+0xd0>)
 8020c8e:	681b      	ldr	r3, [r3, #0]
 8020c90:	4a21      	ldr	r2, [pc, #132]	; (8020d18 <SystemClock_Config+0xd0>)
 8020c92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020c96:	6013      	str	r3, [r2, #0]
 8020c98:	4b1f      	ldr	r3, [pc, #124]	; (8020d18 <SystemClock_Config+0xd0>)
 8020c9a:	681b      	ldr	r3, [r3, #0]
 8020c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020ca0:	607b      	str	r3, [r7, #4]
 8020ca2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8020ca4:	2301      	movs	r3, #1
 8020ca6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8020ca8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8020cac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8020cae:	2302      	movs	r3, #2
 8020cb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8020cb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8020cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8020cb8:	2306      	movs	r3, #6
 8020cba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8020cbc:	23a8      	movs	r3, #168	; 0xa8
 8020cbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8020cc0:	2302      	movs	r3, #2
 8020cc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8020cc4:	2304      	movs	r3, #4
 8020cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8020cc8:	f107 0320 	add.w	r3, r7, #32
 8020ccc:	4618      	mov	r0, r3
 8020cce:	f002 fefd 	bl	8023acc <HAL_RCC_OscConfig>
 8020cd2:	4603      	mov	r3, r0
 8020cd4:	2b00      	cmp	r3, #0
 8020cd6:	d001      	beq.n	8020cdc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8020cd8:	f000 fdce 	bl	8021878 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8020cdc:	230f      	movs	r3, #15
 8020cde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8020ce0:	2302      	movs	r3, #2
 8020ce2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8020ce4:	2300      	movs	r3, #0
 8020ce6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8020ce8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8020cec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8020cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020cf2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8020cf4:	f107 030c 	add.w	r3, r7, #12
 8020cf8:	2105      	movs	r1, #5
 8020cfa:	4618      	mov	r0, r3
 8020cfc:	f003 f956 	bl	8023fac <HAL_RCC_ClockConfig>
 8020d00:	4603      	mov	r3, r0
 8020d02:	2b00      	cmp	r3, #0
 8020d04:	d001      	beq.n	8020d0a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8020d06:	f000 fdb7 	bl	8021878 <Error_Handler>
  }
}
 8020d0a:	bf00      	nop
 8020d0c:	3750      	adds	r7, #80	; 0x50
 8020d0e:	46bd      	mov	sp, r7
 8020d10:	bd80      	pop	{r7, pc}
 8020d12:	bf00      	nop
 8020d14:	40023800 	.word	0x40023800
 8020d18:	40007000 	.word	0x40007000

08020d1c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8020d1c:	b580      	push	{r7, lr}
 8020d1e:	b084      	sub	sp, #16
 8020d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8020d22:	463b      	mov	r3, r7
 8020d24:	2200      	movs	r2, #0
 8020d26:	601a      	str	r2, [r3, #0]
 8020d28:	605a      	str	r2, [r3, #4]
 8020d2a:	609a      	str	r2, [r3, #8]
 8020d2c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8020d2e:	4b7c      	ldr	r3, [pc, #496]	; (8020f20 <MX_ADC1_Init+0x204>)
 8020d30:	4a7c      	ldr	r2, [pc, #496]	; (8020f24 <MX_ADC1_Init+0x208>)
 8020d32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8020d34:	4b7a      	ldr	r3, [pc, #488]	; (8020f20 <MX_ADC1_Init+0x204>)
 8020d36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8020d3a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8020d3c:	4b78      	ldr	r3, [pc, #480]	; (8020f20 <MX_ADC1_Init+0x204>)
 8020d3e:	2200      	movs	r2, #0
 8020d40:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8020d42:	4b77      	ldr	r3, [pc, #476]	; (8020f20 <MX_ADC1_Init+0x204>)
 8020d44:	2201      	movs	r2, #1
 8020d46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8020d48:	4b75      	ldr	r3, [pc, #468]	; (8020f20 <MX_ADC1_Init+0x204>)
 8020d4a:	2201      	movs	r2, #1
 8020d4c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8020d4e:	4b74      	ldr	r3, [pc, #464]	; (8020f20 <MX_ADC1_Init+0x204>)
 8020d50:	2200      	movs	r2, #0
 8020d52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8020d56:	4b72      	ldr	r3, [pc, #456]	; (8020f20 <MX_ADC1_Init+0x204>)
 8020d58:	2200      	movs	r2, #0
 8020d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8020d5c:	4b70      	ldr	r3, [pc, #448]	; (8020f20 <MX_ADC1_Init+0x204>)
 8020d5e:	4a72      	ldr	r2, [pc, #456]	; (8020f28 <MX_ADC1_Init+0x20c>)
 8020d60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8020d62:	4b6f      	ldr	r3, [pc, #444]	; (8020f20 <MX_ADC1_Init+0x204>)
 8020d64:	2200      	movs	r2, #0
 8020d66:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8020d68:	4b6d      	ldr	r3, [pc, #436]	; (8020f20 <MX_ADC1_Init+0x204>)
 8020d6a:	220e      	movs	r2, #14
 8020d6c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8020d6e:	4b6c      	ldr	r3, [pc, #432]	; (8020f20 <MX_ADC1_Init+0x204>)
 8020d70:	2201      	movs	r2, #1
 8020d72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8020d76:	4b6a      	ldr	r3, [pc, #424]	; (8020f20 <MX_ADC1_Init+0x204>)
 8020d78:	2201      	movs	r2, #1
 8020d7a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8020d7c:	4868      	ldr	r0, [pc, #416]	; (8020f20 <MX_ADC1_Init+0x204>)
 8020d7e:	f001 fb45 	bl	802240c <HAL_ADC_Init>
 8020d82:	4603      	mov	r3, r0
 8020d84:	2b00      	cmp	r3, #0
 8020d86:	d001      	beq.n	8020d8c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8020d88:	f000 fd76 	bl	8021878 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8020d8c:	2303      	movs	r3, #3
 8020d8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8020d90:	2301      	movs	r3, #1
 8020d92:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8020d94:	2301      	movs	r3, #1
 8020d96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020d98:	463b      	mov	r3, r7
 8020d9a:	4619      	mov	r1, r3
 8020d9c:	4860      	ldr	r0, [pc, #384]	; (8020f20 <MX_ADC1_Init+0x204>)
 8020d9e:	f001 fc89 	bl	80226b4 <HAL_ADC_ConfigChannel>
 8020da2:	4603      	mov	r3, r0
 8020da4:	2b00      	cmp	r3, #0
 8020da6:	d001      	beq.n	8020dac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8020da8:	f000 fd66 	bl	8021878 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8020dac:	2304      	movs	r3, #4
 8020dae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8020db0:	2302      	movs	r3, #2
 8020db2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020db4:	463b      	mov	r3, r7
 8020db6:	4619      	mov	r1, r3
 8020db8:	4859      	ldr	r0, [pc, #356]	; (8020f20 <MX_ADC1_Init+0x204>)
 8020dba:	f001 fc7b 	bl	80226b4 <HAL_ADC_ConfigChannel>
 8020dbe:	4603      	mov	r3, r0
 8020dc0:	2b00      	cmp	r3, #0
 8020dc2:	d001      	beq.n	8020dc8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8020dc4:	f000 fd58 	bl	8021878 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8020dc8:	2305      	movs	r3, #5
 8020dca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8020dcc:	2303      	movs	r3, #3
 8020dce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020dd0:	463b      	mov	r3, r7
 8020dd2:	4619      	mov	r1, r3
 8020dd4:	4852      	ldr	r0, [pc, #328]	; (8020f20 <MX_ADC1_Init+0x204>)
 8020dd6:	f001 fc6d 	bl	80226b4 <HAL_ADC_ConfigChannel>
 8020dda:	4603      	mov	r3, r0
 8020ddc:	2b00      	cmp	r3, #0
 8020dde:	d001      	beq.n	8020de4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8020de0:	f000 fd4a 	bl	8021878 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8020de4:	2306      	movs	r3, #6
 8020de6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8020de8:	2304      	movs	r3, #4
 8020dea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020dec:	463b      	mov	r3, r7
 8020dee:	4619      	mov	r1, r3
 8020df0:	484b      	ldr	r0, [pc, #300]	; (8020f20 <MX_ADC1_Init+0x204>)
 8020df2:	f001 fc5f 	bl	80226b4 <HAL_ADC_ConfigChannel>
 8020df6:	4603      	mov	r3, r0
 8020df8:	2b00      	cmp	r3, #0
 8020dfa:	d001      	beq.n	8020e00 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8020dfc:	f000 fd3c 	bl	8021878 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8020e00:	2307      	movs	r3, #7
 8020e02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8020e04:	2305      	movs	r3, #5
 8020e06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020e08:	463b      	mov	r3, r7
 8020e0a:	4619      	mov	r1, r3
 8020e0c:	4844      	ldr	r0, [pc, #272]	; (8020f20 <MX_ADC1_Init+0x204>)
 8020e0e:	f001 fc51 	bl	80226b4 <HAL_ADC_ConfigChannel>
 8020e12:	4603      	mov	r3, r0
 8020e14:	2b00      	cmp	r3, #0
 8020e16:	d001      	beq.n	8020e1c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8020e18:	f000 fd2e 	bl	8021878 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8020e1c:	230e      	movs	r3, #14
 8020e1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8020e20:	2306      	movs	r3, #6
 8020e22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020e24:	463b      	mov	r3, r7
 8020e26:	4619      	mov	r1, r3
 8020e28:	483d      	ldr	r0, [pc, #244]	; (8020f20 <MX_ADC1_Init+0x204>)
 8020e2a:	f001 fc43 	bl	80226b4 <HAL_ADC_ConfigChannel>
 8020e2e:	4603      	mov	r3, r0
 8020e30:	2b00      	cmp	r3, #0
 8020e32:	d001      	beq.n	8020e38 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8020e34:	f000 fd20 	bl	8021878 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8020e38:	230f      	movs	r3, #15
 8020e3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8020e3c:	2307      	movs	r3, #7
 8020e3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020e40:	463b      	mov	r3, r7
 8020e42:	4619      	mov	r1, r3
 8020e44:	4836      	ldr	r0, [pc, #216]	; (8020f20 <MX_ADC1_Init+0x204>)
 8020e46:	f001 fc35 	bl	80226b4 <HAL_ADC_ConfigChannel>
 8020e4a:	4603      	mov	r3, r0
 8020e4c:	2b00      	cmp	r3, #0
 8020e4e:	d001      	beq.n	8020e54 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8020e50:	f000 fd12 	bl	8021878 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8020e54:	230a      	movs	r3, #10
 8020e56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8020e58:	2308      	movs	r3, #8
 8020e5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020e5c:	463b      	mov	r3, r7
 8020e5e:	4619      	mov	r1, r3
 8020e60:	482f      	ldr	r0, [pc, #188]	; (8020f20 <MX_ADC1_Init+0x204>)
 8020e62:	f001 fc27 	bl	80226b4 <HAL_ADC_ConfigChannel>
 8020e66:	4603      	mov	r3, r0
 8020e68:	2b00      	cmp	r3, #0
 8020e6a:	d001      	beq.n	8020e70 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8020e6c:	f000 fd04 	bl	8021878 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8020e70:	230b      	movs	r3, #11
 8020e72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8020e74:	2309      	movs	r3, #9
 8020e76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020e78:	463b      	mov	r3, r7
 8020e7a:	4619      	mov	r1, r3
 8020e7c:	4828      	ldr	r0, [pc, #160]	; (8020f20 <MX_ADC1_Init+0x204>)
 8020e7e:	f001 fc19 	bl	80226b4 <HAL_ADC_ConfigChannel>
 8020e82:	4603      	mov	r3, r0
 8020e84:	2b00      	cmp	r3, #0
 8020e86:	d001      	beq.n	8020e8c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8020e88:	f000 fcf6 	bl	8021878 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8020e8c:	230c      	movs	r3, #12
 8020e8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8020e90:	230a      	movs	r3, #10
 8020e92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020e94:	463b      	mov	r3, r7
 8020e96:	4619      	mov	r1, r3
 8020e98:	4821      	ldr	r0, [pc, #132]	; (8020f20 <MX_ADC1_Init+0x204>)
 8020e9a:	f001 fc0b 	bl	80226b4 <HAL_ADC_ConfigChannel>
 8020e9e:	4603      	mov	r3, r0
 8020ea0:	2b00      	cmp	r3, #0
 8020ea2:	d001      	beq.n	8020ea8 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8020ea4:	f000 fce8 	bl	8021878 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8020ea8:	230d      	movs	r3, #13
 8020eaa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8020eac:	230b      	movs	r3, #11
 8020eae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020eb0:	463b      	mov	r3, r7
 8020eb2:	4619      	mov	r1, r3
 8020eb4:	481a      	ldr	r0, [pc, #104]	; (8020f20 <MX_ADC1_Init+0x204>)
 8020eb6:	f001 fbfd 	bl	80226b4 <HAL_ADC_ConfigChannel>
 8020eba:	4603      	mov	r3, r0
 8020ebc:	2b00      	cmp	r3, #0
 8020ebe:	d001      	beq.n	8020ec4 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8020ec0:	f000 fcda 	bl	8021878 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8020ec4:	2302      	movs	r3, #2
 8020ec6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8020ec8:	230c      	movs	r3, #12
 8020eca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020ecc:	463b      	mov	r3, r7
 8020ece:	4619      	mov	r1, r3
 8020ed0:	4813      	ldr	r0, [pc, #76]	; (8020f20 <MX_ADC1_Init+0x204>)
 8020ed2:	f001 fbef 	bl	80226b4 <HAL_ADC_ConfigChannel>
 8020ed6:	4603      	mov	r3, r0
 8020ed8:	2b00      	cmp	r3, #0
 8020eda:	d001      	beq.n	8020ee0 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8020edc:	f000 fccc 	bl	8021878 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8020ee0:	2301      	movs	r3, #1
 8020ee2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8020ee4:	230d      	movs	r3, #13
 8020ee6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020ee8:	463b      	mov	r3, r7
 8020eea:	4619      	mov	r1, r3
 8020eec:	480c      	ldr	r0, [pc, #48]	; (8020f20 <MX_ADC1_Init+0x204>)
 8020eee:	f001 fbe1 	bl	80226b4 <HAL_ADC_ConfigChannel>
 8020ef2:	4603      	mov	r3, r0
 8020ef4:	2b00      	cmp	r3, #0
 8020ef6:	d001      	beq.n	8020efc <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8020ef8:	f000 fcbe 	bl	8021878 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8020efc:	2300      	movs	r3, #0
 8020efe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8020f00:	230e      	movs	r3, #14
 8020f02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020f04:	463b      	mov	r3, r7
 8020f06:	4619      	mov	r1, r3
 8020f08:	4805      	ldr	r0, [pc, #20]	; (8020f20 <MX_ADC1_Init+0x204>)
 8020f0a:	f001 fbd3 	bl	80226b4 <HAL_ADC_ConfigChannel>
 8020f0e:	4603      	mov	r3, r0
 8020f10:	2b00      	cmp	r3, #0
 8020f12:	d001      	beq.n	8020f18 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8020f14:	f000 fcb0 	bl	8021878 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8020f18:	bf00      	nop
 8020f1a:	3710      	adds	r7, #16
 8020f1c:	46bd      	mov	sp, r7
 8020f1e:	bd80      	pop	{r7, pc}
 8020f20:	2000063c 	.word	0x2000063c
 8020f24:	40012000 	.word	0x40012000
 8020f28:	0f000001 	.word	0x0f000001

08020f2c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8020f2c:	b580      	push	{r7, lr}
 8020f2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8020f30:	4b12      	ldr	r3, [pc, #72]	; (8020f7c <MX_I2C2_Init+0x50>)
 8020f32:	4a13      	ldr	r2, [pc, #76]	; (8020f80 <MX_I2C2_Init+0x54>)
 8020f34:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8020f36:	4b11      	ldr	r3, [pc, #68]	; (8020f7c <MX_I2C2_Init+0x50>)
 8020f38:	4a12      	ldr	r2, [pc, #72]	; (8020f84 <MX_I2C2_Init+0x58>)
 8020f3a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8020f3c:	4b0f      	ldr	r3, [pc, #60]	; (8020f7c <MX_I2C2_Init+0x50>)
 8020f3e:	2200      	movs	r2, #0
 8020f40:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8020f42:	4b0e      	ldr	r3, [pc, #56]	; (8020f7c <MX_I2C2_Init+0x50>)
 8020f44:	2200      	movs	r2, #0
 8020f46:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8020f48:	4b0c      	ldr	r3, [pc, #48]	; (8020f7c <MX_I2C2_Init+0x50>)
 8020f4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8020f4e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8020f50:	4b0a      	ldr	r3, [pc, #40]	; (8020f7c <MX_I2C2_Init+0x50>)
 8020f52:	2200      	movs	r2, #0
 8020f54:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8020f56:	4b09      	ldr	r3, [pc, #36]	; (8020f7c <MX_I2C2_Init+0x50>)
 8020f58:	2200      	movs	r2, #0
 8020f5a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8020f5c:	4b07      	ldr	r3, [pc, #28]	; (8020f7c <MX_I2C2_Init+0x50>)
 8020f5e:	2200      	movs	r2, #0
 8020f60:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8020f62:	4b06      	ldr	r3, [pc, #24]	; (8020f7c <MX_I2C2_Init+0x50>)
 8020f64:	2200      	movs	r2, #0
 8020f66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8020f68:	4804      	ldr	r0, [pc, #16]	; (8020f7c <MX_I2C2_Init+0x50>)
 8020f6a:	f002 fc77 	bl	802385c <HAL_I2C_Init>
 8020f6e:	4603      	mov	r3, r0
 8020f70:	2b00      	cmp	r3, #0
 8020f72:	d001      	beq.n	8020f78 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8020f74:	f000 fc80 	bl	8021878 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8020f78:	bf00      	nop
 8020f7a:	bd80      	pop	{r7, pc}
 8020f7c:	20000510 	.word	0x20000510
 8020f80:	40005800 	.word	0x40005800
 8020f84:	000186a0 	.word	0x000186a0

08020f88 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8020f88:	b580      	push	{r7, lr}
 8020f8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8020f8c:	4b17      	ldr	r3, [pc, #92]	; (8020fec <MX_SPI3_Init+0x64>)
 8020f8e:	4a18      	ldr	r2, [pc, #96]	; (8020ff0 <MX_SPI3_Init+0x68>)
 8020f90:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8020f92:	4b16      	ldr	r3, [pc, #88]	; (8020fec <MX_SPI3_Init+0x64>)
 8020f94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8020f98:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8020f9a:	4b14      	ldr	r3, [pc, #80]	; (8020fec <MX_SPI3_Init+0x64>)
 8020f9c:	2200      	movs	r2, #0
 8020f9e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8020fa0:	4b12      	ldr	r3, [pc, #72]	; (8020fec <MX_SPI3_Init+0x64>)
 8020fa2:	2200      	movs	r2, #0
 8020fa4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8020fa6:	4b11      	ldr	r3, [pc, #68]	; (8020fec <MX_SPI3_Init+0x64>)
 8020fa8:	2200      	movs	r2, #0
 8020faa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8020fac:	4b0f      	ldr	r3, [pc, #60]	; (8020fec <MX_SPI3_Init+0x64>)
 8020fae:	2200      	movs	r2, #0
 8020fb0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8020fb2:	4b0e      	ldr	r3, [pc, #56]	; (8020fec <MX_SPI3_Init+0x64>)
 8020fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020fb8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8020fba:	4b0c      	ldr	r3, [pc, #48]	; (8020fec <MX_SPI3_Init+0x64>)
 8020fbc:	2238      	movs	r2, #56	; 0x38
 8020fbe:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8020fc0:	4b0a      	ldr	r3, [pc, #40]	; (8020fec <MX_SPI3_Init+0x64>)
 8020fc2:	2200      	movs	r2, #0
 8020fc4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8020fc6:	4b09      	ldr	r3, [pc, #36]	; (8020fec <MX_SPI3_Init+0x64>)
 8020fc8:	2200      	movs	r2, #0
 8020fca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8020fcc:	4b07      	ldr	r3, [pc, #28]	; (8020fec <MX_SPI3_Init+0x64>)
 8020fce:	2200      	movs	r2, #0
 8020fd0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8020fd2:	4b06      	ldr	r3, [pc, #24]	; (8020fec <MX_SPI3_Init+0x64>)
 8020fd4:	220a      	movs	r2, #10
 8020fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8020fd8:	4804      	ldr	r0, [pc, #16]	; (8020fec <MX_SPI3_Init+0x64>)
 8020fda:	f003 f99f 	bl	802431c <HAL_SPI_Init>
 8020fde:	4603      	mov	r3, r0
 8020fe0:	2b00      	cmp	r3, #0
 8020fe2:	d001      	beq.n	8020fe8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8020fe4:	f000 fc48 	bl	8021878 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8020fe8:	bf00      	nop
 8020fea:	bd80      	pop	{r7, pc}
 8020fec:	200005e4 	.word	0x200005e4
 8020ff0:	40003c00 	.word	0x40003c00

08020ff4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8020ff4:	b580      	push	{r7, lr}
 8020ff6:	b092      	sub	sp, #72	; 0x48
 8020ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8020ffa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8020ffe:	2200      	movs	r2, #0
 8021000:	601a      	str	r2, [r3, #0]
 8021002:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8021004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021008:	2200      	movs	r2, #0
 802100a:	601a      	str	r2, [r3, #0]
 802100c:	605a      	str	r2, [r3, #4]
 802100e:	609a      	str	r2, [r3, #8]
 8021010:	60da      	str	r2, [r3, #12]
 8021012:	611a      	str	r2, [r3, #16]
 8021014:	615a      	str	r2, [r3, #20]
 8021016:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8021018:	1d3b      	adds	r3, r7, #4
 802101a:	2220      	movs	r2, #32
 802101c:	2100      	movs	r1, #0
 802101e:	4618      	mov	r0, r3
 8021020:	f004 f9ee 	bl	8025400 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8021024:	4b39      	ldr	r3, [pc, #228]	; (802110c <MX_TIM1_Init+0x118>)
 8021026:	4a3a      	ldr	r2, [pc, #232]	; (8021110 <MX_TIM1_Init+0x11c>)
 8021028:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 802102a:	4b38      	ldr	r3, [pc, #224]	; (802110c <MX_TIM1_Init+0x118>)
 802102c:	2201      	movs	r2, #1
 802102e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021030:	4b36      	ldr	r3, [pc, #216]	; (802110c <MX_TIM1_Init+0x118>)
 8021032:	2200      	movs	r2, #0
 8021034:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1049;
 8021036:	4b35      	ldr	r3, [pc, #212]	; (802110c <MX_TIM1_Init+0x118>)
 8021038:	f240 4219 	movw	r2, #1049	; 0x419
 802103c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802103e:	4b33      	ldr	r3, [pc, #204]	; (802110c <MX_TIM1_Init+0x118>)
 8021040:	2200      	movs	r2, #0
 8021042:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8021044:	4b31      	ldr	r3, [pc, #196]	; (802110c <MX_TIM1_Init+0x118>)
 8021046:	2200      	movs	r2, #0
 8021048:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802104a:	4b30      	ldr	r3, [pc, #192]	; (802110c <MX_TIM1_Init+0x118>)
 802104c:	2200      	movs	r2, #0
 802104e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8021050:	482e      	ldr	r0, [pc, #184]	; (802110c <MX_TIM1_Init+0x118>)
 8021052:	f003 fa16 	bl	8024482 <HAL_TIM_PWM_Init>
 8021056:	4603      	mov	r3, r0
 8021058:	2b00      	cmp	r3, #0
 802105a:	d001      	beq.n	8021060 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 802105c:	f000 fc0c 	bl	8021878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021060:	2300      	movs	r3, #0
 8021062:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021064:	2300      	movs	r3, #0
 8021066:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8021068:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802106c:	4619      	mov	r1, r3
 802106e:	4827      	ldr	r0, [pc, #156]	; (802110c <MX_TIM1_Init+0x118>)
 8021070:	f004 f8c0 	bl	80251f4 <HAL_TIMEx_MasterConfigSynchronization>
 8021074:	4603      	mov	r3, r0
 8021076:	2b00      	cmp	r3, #0
 8021078:	d001      	beq.n	802107e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 802107a:	f000 fbfd 	bl	8021878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 802107e:	2360      	movs	r3, #96	; 0x60
 8021080:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8021082:	2300      	movs	r3, #0
 8021084:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8021086:	2300      	movs	r3, #0
 8021088:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 802108a:	2300      	movs	r3, #0
 802108c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 802108e:	2300      	movs	r3, #0
 8021090:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8021092:	2300      	movs	r3, #0
 8021094:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8021096:	2300      	movs	r3, #0
 8021098:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 802109a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802109e:	2204      	movs	r2, #4
 80210a0:	4619      	mov	r1, r3
 80210a2:	481a      	ldr	r0, [pc, #104]	; (802110c <MX_TIM1_Init+0x118>)
 80210a4:	f003 fbf0 	bl	8024888 <HAL_TIM_PWM_ConfigChannel>
 80210a8:	4603      	mov	r3, r0
 80210aa:	2b00      	cmp	r3, #0
 80210ac:	d001      	beq.n	80210b2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80210ae:	f000 fbe3 	bl	8021878 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80210b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80210b6:	220c      	movs	r2, #12
 80210b8:	4619      	mov	r1, r3
 80210ba:	4814      	ldr	r0, [pc, #80]	; (802110c <MX_TIM1_Init+0x118>)
 80210bc:	f003 fbe4 	bl	8024888 <HAL_TIM_PWM_ConfigChannel>
 80210c0:	4603      	mov	r3, r0
 80210c2:	2b00      	cmp	r3, #0
 80210c4:	d001      	beq.n	80210ca <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80210c6:	f000 fbd7 	bl	8021878 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80210ca:	2300      	movs	r3, #0
 80210cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80210ce:	2300      	movs	r3, #0
 80210d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80210d2:	2300      	movs	r3, #0
 80210d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80210d6:	2300      	movs	r3, #0
 80210d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80210da:	2300      	movs	r3, #0
 80210dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80210de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80210e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80210e4:	2300      	movs	r3, #0
 80210e6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80210e8:	1d3b      	adds	r3, r7, #4
 80210ea:	4619      	mov	r1, r3
 80210ec:	4807      	ldr	r0, [pc, #28]	; (802110c <MX_TIM1_Init+0x118>)
 80210ee:	f004 f8fd 	bl	80252ec <HAL_TIMEx_ConfigBreakDeadTime>
 80210f2:	4603      	mov	r3, r0
 80210f4:	2b00      	cmp	r3, #0
 80210f6:	d001      	beq.n	80210fc <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80210f8:	f000 fbbe 	bl	8021878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80210fc:	4803      	ldr	r0, [pc, #12]	; (802110c <MX_TIM1_Init+0x118>)
 80210fe:	f000 fe8b 	bl	8021e18 <HAL_TIM_MspPostInit>

}
 8021102:	bf00      	nop
 8021104:	3748      	adds	r7, #72	; 0x48
 8021106:	46bd      	mov	sp, r7
 8021108:	bd80      	pop	{r7, pc}
 802110a:	bf00      	nop
 802110c:	20000764 	.word	0x20000764
 8021110:	40010000 	.word	0x40010000

08021114 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8021114:	b580      	push	{r7, lr}
 8021116:	b086      	sub	sp, #24
 8021118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802111a:	f107 0308 	add.w	r3, r7, #8
 802111e:	2200      	movs	r2, #0
 8021120:	601a      	str	r2, [r3, #0]
 8021122:	605a      	str	r2, [r3, #4]
 8021124:	609a      	str	r2, [r3, #8]
 8021126:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021128:	463b      	mov	r3, r7
 802112a:	2200      	movs	r2, #0
 802112c:	601a      	str	r2, [r3, #0]
 802112e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8021130:	4b1d      	ldr	r3, [pc, #116]	; (80211a8 <MX_TIM2_Init+0x94>)
 8021132:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8021136:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8021138:	4b1b      	ldr	r3, [pc, #108]	; (80211a8 <MX_TIM2_Init+0x94>)
 802113a:	2204      	movs	r2, #4
 802113c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 802113e:	4b1a      	ldr	r3, [pc, #104]	; (80211a8 <MX_TIM2_Init+0x94>)
 8021140:	2200      	movs	r2, #0
 8021142:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 104999;
 8021144:	4b18      	ldr	r3, [pc, #96]	; (80211a8 <MX_TIM2_Init+0x94>)
 8021146:	4a19      	ldr	r2, [pc, #100]	; (80211ac <MX_TIM2_Init+0x98>)
 8021148:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802114a:	4b17      	ldr	r3, [pc, #92]	; (80211a8 <MX_TIM2_Init+0x94>)
 802114c:	2200      	movs	r2, #0
 802114e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021150:	4b15      	ldr	r3, [pc, #84]	; (80211a8 <MX_TIM2_Init+0x94>)
 8021152:	2200      	movs	r2, #0
 8021154:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8021156:	4814      	ldr	r0, [pc, #80]	; (80211a8 <MX_TIM2_Init+0x94>)
 8021158:	f003 f944 	bl	80243e4 <HAL_TIM_Base_Init>
 802115c:	4603      	mov	r3, r0
 802115e:	2b00      	cmp	r3, #0
 8021160:	d001      	beq.n	8021166 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8021162:	f000 fb89 	bl	8021878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8021166:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802116a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 802116c:	f107 0308 	add.w	r3, r7, #8
 8021170:	4619      	mov	r1, r3
 8021172:	480d      	ldr	r0, [pc, #52]	; (80211a8 <MX_TIM2_Init+0x94>)
 8021174:	f003 fc4e 	bl	8024a14 <HAL_TIM_ConfigClockSource>
 8021178:	4603      	mov	r3, r0
 802117a:	2b00      	cmp	r3, #0
 802117c:	d001      	beq.n	8021182 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 802117e:	f000 fb7b 	bl	8021878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021182:	2300      	movs	r3, #0
 8021184:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021186:	2300      	movs	r3, #0
 8021188:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 802118a:	463b      	mov	r3, r7
 802118c:	4619      	mov	r1, r3
 802118e:	4806      	ldr	r0, [pc, #24]	; (80211a8 <MX_TIM2_Init+0x94>)
 8021190:	f004 f830 	bl	80251f4 <HAL_TIMEx_MasterConfigSynchronization>
 8021194:	4603      	mov	r3, r0
 8021196:	2b00      	cmp	r3, #0
 8021198:	d001      	beq.n	802119e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 802119a:	f000 fb6d 	bl	8021878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 802119e:	bf00      	nop
 80211a0:	3718      	adds	r7, #24
 80211a2:	46bd      	mov	sp, r7
 80211a4:	bd80      	pop	{r7, pc}
 80211a6:	bf00      	nop
 80211a8:	200007a4 	.word	0x200007a4
 80211ac:	00019a27 	.word	0x00019a27

080211b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80211b0:	b580      	push	{r7, lr}
 80211b2:	b08a      	sub	sp, #40	; 0x28
 80211b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80211b6:	f107 0320 	add.w	r3, r7, #32
 80211ba:	2200      	movs	r2, #0
 80211bc:	601a      	str	r2, [r3, #0]
 80211be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80211c0:	1d3b      	adds	r3, r7, #4
 80211c2:	2200      	movs	r2, #0
 80211c4:	601a      	str	r2, [r3, #0]
 80211c6:	605a      	str	r2, [r3, #4]
 80211c8:	609a      	str	r2, [r3, #8]
 80211ca:	60da      	str	r2, [r3, #12]
 80211cc:	611a      	str	r2, [r3, #16]
 80211ce:	615a      	str	r2, [r3, #20]
 80211d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80211d2:	4b32      	ldr	r3, [pc, #200]	; (802129c <MX_TIM3_Init+0xec>)
 80211d4:	4a32      	ldr	r2, [pc, #200]	; (80212a0 <MX_TIM3_Init+0xf0>)
 80211d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80211d8:	4b30      	ldr	r3, [pc, #192]	; (802129c <MX_TIM3_Init+0xec>)
 80211da:	2200      	movs	r2, #0
 80211dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80211de:	4b2f      	ldr	r3, [pc, #188]	; (802129c <MX_TIM3_Init+0xec>)
 80211e0:	2200      	movs	r2, #0
 80211e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80211e4:	4b2d      	ldr	r3, [pc, #180]	; (802129c <MX_TIM3_Init+0xec>)
 80211e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80211ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80211ec:	4b2b      	ldr	r3, [pc, #172]	; (802129c <MX_TIM3_Init+0xec>)
 80211ee:	2200      	movs	r2, #0
 80211f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80211f2:	4b2a      	ldr	r3, [pc, #168]	; (802129c <MX_TIM3_Init+0xec>)
 80211f4:	2200      	movs	r2, #0
 80211f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80211f8:	4828      	ldr	r0, [pc, #160]	; (802129c <MX_TIM3_Init+0xec>)
 80211fa:	f003 f942 	bl	8024482 <HAL_TIM_PWM_Init>
 80211fe:	4603      	mov	r3, r0
 8021200:	2b00      	cmp	r3, #0
 8021202:	d001      	beq.n	8021208 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8021204:	f000 fb38 	bl	8021878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021208:	2300      	movs	r3, #0
 802120a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802120c:	2300      	movs	r3, #0
 802120e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8021210:	f107 0320 	add.w	r3, r7, #32
 8021214:	4619      	mov	r1, r3
 8021216:	4821      	ldr	r0, [pc, #132]	; (802129c <MX_TIM3_Init+0xec>)
 8021218:	f003 ffec 	bl	80251f4 <HAL_TIMEx_MasterConfigSynchronization>
 802121c:	4603      	mov	r3, r0
 802121e:	2b00      	cmp	r3, #0
 8021220:	d001      	beq.n	8021226 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8021222:	f000 fb29 	bl	8021878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8021226:	2360      	movs	r3, #96	; 0x60
 8021228:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 802122a:	2300      	movs	r3, #0
 802122c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 802122e:	2300      	movs	r3, #0
 8021230:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8021232:	2300      	movs	r3, #0
 8021234:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8021236:	1d3b      	adds	r3, r7, #4
 8021238:	2200      	movs	r2, #0
 802123a:	4619      	mov	r1, r3
 802123c:	4817      	ldr	r0, [pc, #92]	; (802129c <MX_TIM3_Init+0xec>)
 802123e:	f003 fb23 	bl	8024888 <HAL_TIM_PWM_ConfigChannel>
 8021242:	4603      	mov	r3, r0
 8021244:	2b00      	cmp	r3, #0
 8021246:	d001      	beq.n	802124c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8021248:	f000 fb16 	bl	8021878 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 802124c:	1d3b      	adds	r3, r7, #4
 802124e:	2204      	movs	r2, #4
 8021250:	4619      	mov	r1, r3
 8021252:	4812      	ldr	r0, [pc, #72]	; (802129c <MX_TIM3_Init+0xec>)
 8021254:	f003 fb18 	bl	8024888 <HAL_TIM_PWM_ConfigChannel>
 8021258:	4603      	mov	r3, r0
 802125a:	2b00      	cmp	r3, #0
 802125c:	d001      	beq.n	8021262 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 802125e:	f000 fb0b 	bl	8021878 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8021262:	1d3b      	adds	r3, r7, #4
 8021264:	2208      	movs	r2, #8
 8021266:	4619      	mov	r1, r3
 8021268:	480c      	ldr	r0, [pc, #48]	; (802129c <MX_TIM3_Init+0xec>)
 802126a:	f003 fb0d 	bl	8024888 <HAL_TIM_PWM_ConfigChannel>
 802126e:	4603      	mov	r3, r0
 8021270:	2b00      	cmp	r3, #0
 8021272:	d001      	beq.n	8021278 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8021274:	f000 fb00 	bl	8021878 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8021278:	1d3b      	adds	r3, r7, #4
 802127a:	220c      	movs	r2, #12
 802127c:	4619      	mov	r1, r3
 802127e:	4807      	ldr	r0, [pc, #28]	; (802129c <MX_TIM3_Init+0xec>)
 8021280:	f003 fb02 	bl	8024888 <HAL_TIM_PWM_ConfigChannel>
 8021284:	4603      	mov	r3, r0
 8021286:	2b00      	cmp	r3, #0
 8021288:	d001      	beq.n	802128e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 802128a:	f000 faf5 	bl	8021878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 802128e:	4803      	ldr	r0, [pc, #12]	; (802129c <MX_TIM3_Init+0xec>)
 8021290:	f000 fdc2 	bl	8021e18 <HAL_TIM_MspPostInit>

}
 8021294:	bf00      	nop
 8021296:	3728      	adds	r7, #40	; 0x28
 8021298:	46bd      	mov	sp, r7
 802129a:	bd80      	pop	{r7, pc}
 802129c:	200005a4 	.word	0x200005a4
 80212a0:	40000400 	.word	0x40000400

080212a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80212a4:	b580      	push	{r7, lr}
 80212a6:	b08c      	sub	sp, #48	; 0x30
 80212a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80212aa:	f107 030c 	add.w	r3, r7, #12
 80212ae:	2224      	movs	r2, #36	; 0x24
 80212b0:	2100      	movs	r1, #0
 80212b2:	4618      	mov	r0, r3
 80212b4:	f004 f8a4 	bl	8025400 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80212b8:	1d3b      	adds	r3, r7, #4
 80212ba:	2200      	movs	r2, #0
 80212bc:	601a      	str	r2, [r3, #0]
 80212be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80212c0:	4b20      	ldr	r3, [pc, #128]	; (8021344 <MX_TIM4_Init+0xa0>)
 80212c2:	4a21      	ldr	r2, [pc, #132]	; (8021348 <MX_TIM4_Init+0xa4>)
 80212c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80212c6:	4b1f      	ldr	r3, [pc, #124]	; (8021344 <MX_TIM4_Init+0xa0>)
 80212c8:	2200      	movs	r2, #0
 80212ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80212cc:	4b1d      	ldr	r3, [pc, #116]	; (8021344 <MX_TIM4_Init+0xa0>)
 80212ce:	2200      	movs	r2, #0
 80212d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80212d2:	4b1c      	ldr	r3, [pc, #112]	; (8021344 <MX_TIM4_Init+0xa0>)
 80212d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80212d8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80212da:	4b1a      	ldr	r3, [pc, #104]	; (8021344 <MX_TIM4_Init+0xa0>)
 80212dc:	2200      	movs	r2, #0
 80212de:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80212e0:	4b18      	ldr	r3, [pc, #96]	; (8021344 <MX_TIM4_Init+0xa0>)
 80212e2:	2200      	movs	r2, #0
 80212e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80212e6:	2303      	movs	r3, #3
 80212e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80212ea:	2300      	movs	r3, #0
 80212ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80212ee:	2301      	movs	r3, #1
 80212f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80212f2:	2300      	movs	r3, #0
 80212f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80212f6:	2300      	movs	r3, #0
 80212f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80212fa:	2300      	movs	r3, #0
 80212fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80212fe:	2301      	movs	r3, #1
 8021300:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8021302:	2300      	movs	r3, #0
 8021304:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8021306:	2300      	movs	r3, #0
 8021308:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 802130a:	f107 030c 	add.w	r3, r7, #12
 802130e:	4619      	mov	r1, r3
 8021310:	480c      	ldr	r0, [pc, #48]	; (8021344 <MX_TIM4_Init+0xa0>)
 8021312:	f003 f91f 	bl	8024554 <HAL_TIM_Encoder_Init>
 8021316:	4603      	mov	r3, r0
 8021318:	2b00      	cmp	r3, #0
 802131a:	d001      	beq.n	8021320 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 802131c:	f000 faac 	bl	8021878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021320:	2300      	movs	r3, #0
 8021322:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021324:	2300      	movs	r3, #0
 8021326:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8021328:	1d3b      	adds	r3, r7, #4
 802132a:	4619      	mov	r1, r3
 802132c:	4805      	ldr	r0, [pc, #20]	; (8021344 <MX_TIM4_Init+0xa0>)
 802132e:	f003 ff61 	bl	80251f4 <HAL_TIMEx_MasterConfigSynchronization>
 8021332:	4603      	mov	r3, r0
 8021334:	2b00      	cmp	r3, #0
 8021336:	d001      	beq.n	802133c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8021338:	f000 fa9e 	bl	8021878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 802133c:	bf00      	nop
 802133e:	3730      	adds	r7, #48	; 0x30
 8021340:	46bd      	mov	sp, r7
 8021342:	bd80      	pop	{r7, pc}
 8021344:	200004d0 	.word	0x200004d0
 8021348:	40000800 	.word	0x40000800

0802134c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 802134c:	b580      	push	{r7, lr}
 802134e:	b086      	sub	sp, #24
 8021350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8021352:	f107 0308 	add.w	r3, r7, #8
 8021356:	2200      	movs	r2, #0
 8021358:	601a      	str	r2, [r3, #0]
 802135a:	605a      	str	r2, [r3, #4]
 802135c:	609a      	str	r2, [r3, #8]
 802135e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021360:	463b      	mov	r3, r7
 8021362:	2200      	movs	r2, #0
 8021364:	601a      	str	r2, [r3, #0]
 8021366:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8021368:	4b1d      	ldr	r3, [pc, #116]	; (80213e0 <MX_TIM5_Init+0x94>)
 802136a:	4a1e      	ldr	r2, [pc, #120]	; (80213e4 <MX_TIM5_Init+0x98>)
 802136c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4;
 802136e:	4b1c      	ldr	r3, [pc, #112]	; (80213e0 <MX_TIM5_Init+0x94>)
 8021370:	2204      	movs	r2, #4
 8021372:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021374:	4b1a      	ldr	r3, [pc, #104]	; (80213e0 <MX_TIM5_Init+0x94>)
 8021376:	2200      	movs	r2, #0
 8021378:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20999;
 802137a:	4b19      	ldr	r3, [pc, #100]	; (80213e0 <MX_TIM5_Init+0x94>)
 802137c:	f245 2207 	movw	r2, #20999	; 0x5207
 8021380:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021382:	4b17      	ldr	r3, [pc, #92]	; (80213e0 <MX_TIM5_Init+0x94>)
 8021384:	2200      	movs	r2, #0
 8021386:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021388:	4b15      	ldr	r3, [pc, #84]	; (80213e0 <MX_TIM5_Init+0x94>)
 802138a:	2200      	movs	r2, #0
 802138c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 802138e:	4814      	ldr	r0, [pc, #80]	; (80213e0 <MX_TIM5_Init+0x94>)
 8021390:	f003 f828 	bl	80243e4 <HAL_TIM_Base_Init>
 8021394:	4603      	mov	r3, r0
 8021396:	2b00      	cmp	r3, #0
 8021398:	d001      	beq.n	802139e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 802139a:	f000 fa6d 	bl	8021878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802139e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80213a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80213a4:	f107 0308 	add.w	r3, r7, #8
 80213a8:	4619      	mov	r1, r3
 80213aa:	480d      	ldr	r0, [pc, #52]	; (80213e0 <MX_TIM5_Init+0x94>)
 80213ac:	f003 fb32 	bl	8024a14 <HAL_TIM_ConfigClockSource>
 80213b0:	4603      	mov	r3, r0
 80213b2:	2b00      	cmp	r3, #0
 80213b4:	d001      	beq.n	80213ba <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80213b6:	f000 fa5f 	bl	8021878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80213ba:	2300      	movs	r3, #0
 80213bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80213be:	2300      	movs	r3, #0
 80213c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80213c2:	463b      	mov	r3, r7
 80213c4:	4619      	mov	r1, r3
 80213c6:	4806      	ldr	r0, [pc, #24]	; (80213e0 <MX_TIM5_Init+0x94>)
 80213c8:	f003 ff14 	bl	80251f4 <HAL_TIMEx_MasterConfigSynchronization>
 80213cc:	4603      	mov	r3, r0
 80213ce:	2b00      	cmp	r3, #0
 80213d0:	d001      	beq.n	80213d6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80213d2:	f000 fa51 	bl	8021878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80213d6:	bf00      	nop
 80213d8:	3718      	adds	r7, #24
 80213da:	46bd      	mov	sp, r7
 80213dc:	bd80      	pop	{r7, pc}
 80213de:	bf00      	nop
 80213e0:	20000564 	.word	0x20000564
 80213e4:	40000c00 	.word	0x40000c00

080213e8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80213e8:	b580      	push	{r7, lr}
 80213ea:	b082      	sub	sp, #8
 80213ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80213ee:	463b      	mov	r3, r7
 80213f0:	2200      	movs	r2, #0
 80213f2:	601a      	str	r2, [r3, #0]
 80213f4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80213f6:	4b15      	ldr	r3, [pc, #84]	; (802144c <MX_TIM6_Init+0x64>)
 80213f8:	4a15      	ldr	r2, [pc, #84]	; (8021450 <MX_TIM6_Init+0x68>)
 80213fa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 80213fc:	4b13      	ldr	r3, [pc, #76]	; (802144c <MX_TIM6_Init+0x64>)
 80213fe:	2204      	movs	r2, #4
 8021400:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021402:	4b12      	ldr	r3, [pc, #72]	; (802144c <MX_TIM6_Init+0x64>)
 8021404:	2200      	movs	r2, #0
 8021406:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10499;
 8021408:	4b10      	ldr	r3, [pc, #64]	; (802144c <MX_TIM6_Init+0x64>)
 802140a:	f642 1203 	movw	r2, #10499	; 0x2903
 802140e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021410:	4b0e      	ldr	r3, [pc, #56]	; (802144c <MX_TIM6_Init+0x64>)
 8021412:	2200      	movs	r2, #0
 8021414:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8021416:	480d      	ldr	r0, [pc, #52]	; (802144c <MX_TIM6_Init+0x64>)
 8021418:	f002 ffe4 	bl	80243e4 <HAL_TIM_Base_Init>
 802141c:	4603      	mov	r3, r0
 802141e:	2b00      	cmp	r3, #0
 8021420:	d001      	beq.n	8021426 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8021422:	f000 fa29 	bl	8021878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021426:	2300      	movs	r3, #0
 8021428:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802142a:	2300      	movs	r3, #0
 802142c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 802142e:	463b      	mov	r3, r7
 8021430:	4619      	mov	r1, r3
 8021432:	4806      	ldr	r0, [pc, #24]	; (802144c <MX_TIM6_Init+0x64>)
 8021434:	f003 fede 	bl	80251f4 <HAL_TIMEx_MasterConfigSynchronization>
 8021438:	4603      	mov	r3, r0
 802143a:	2b00      	cmp	r3, #0
 802143c:	d001      	beq.n	8021442 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 802143e:	f000 fa1b 	bl	8021878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8021442:	bf00      	nop
 8021444:	3708      	adds	r7, #8
 8021446:	46bd      	mov	sp, r7
 8021448:	bd80      	pop	{r7, pc}
 802144a:	bf00      	nop
 802144c:	20000724 	.word	0x20000724
 8021450:	40001000 	.word	0x40001000

08021454 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8021454:	b580      	push	{r7, lr}
 8021456:	b082      	sub	sp, #8
 8021458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802145a:	463b      	mov	r3, r7
 802145c:	2200      	movs	r2, #0
 802145e:	601a      	str	r2, [r3, #0]
 8021460:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8021462:	4b15      	ldr	r3, [pc, #84]	; (80214b8 <MX_TIM7_Init+0x64>)
 8021464:	4a15      	ldr	r2, [pc, #84]	; (80214bc <MX_TIM7_Init+0x68>)
 8021466:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 8021468:	4b13      	ldr	r3, [pc, #76]	; (80214b8 <MX_TIM7_Init+0x64>)
 802146a:	2204      	movs	r2, #4
 802146c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 802146e:	4b12      	ldr	r3, [pc, #72]	; (80214b8 <MX_TIM7_Init+0x64>)
 8021470:	2200      	movs	r2, #0
 8021472:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1049;
 8021474:	4b10      	ldr	r3, [pc, #64]	; (80214b8 <MX_TIM7_Init+0x64>)
 8021476:	f240 4219 	movw	r2, #1049	; 0x419
 802147a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802147c:	4b0e      	ldr	r3, [pc, #56]	; (80214b8 <MX_TIM7_Init+0x64>)
 802147e:	2200      	movs	r2, #0
 8021480:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8021482:	480d      	ldr	r0, [pc, #52]	; (80214b8 <MX_TIM7_Init+0x64>)
 8021484:	f002 ffae 	bl	80243e4 <HAL_TIM_Base_Init>
 8021488:	4603      	mov	r3, r0
 802148a:	2b00      	cmp	r3, #0
 802148c:	d001      	beq.n	8021492 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 802148e:	f000 f9f3 	bl	8021878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021492:	2300      	movs	r3, #0
 8021494:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021496:	2300      	movs	r3, #0
 8021498:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 802149a:	463b      	mov	r3, r7
 802149c:	4619      	mov	r1, r3
 802149e:	4806      	ldr	r0, [pc, #24]	; (80214b8 <MX_TIM7_Init+0x64>)
 80214a0:	f003 fea8 	bl	80251f4 <HAL_TIMEx_MasterConfigSynchronization>
 80214a4:	4603      	mov	r3, r0
 80214a6:	2b00      	cmp	r3, #0
 80214a8:	d001      	beq.n	80214ae <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80214aa:	f000 f9e5 	bl	8021878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80214ae:	bf00      	nop
 80214b0:	3708      	adds	r7, #8
 80214b2:	46bd      	mov	sp, r7
 80214b4:	bd80      	pop	{r7, pc}
 80214b6:	bf00      	nop
 80214b8:	20000824 	.word	0x20000824
 80214bc:	40001400 	.word	0x40001400

080214c0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80214c0:	b580      	push	{r7, lr}
 80214c2:	b08c      	sub	sp, #48	; 0x30
 80214c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80214c6:	f107 030c 	add.w	r3, r7, #12
 80214ca:	2224      	movs	r2, #36	; 0x24
 80214cc:	2100      	movs	r1, #0
 80214ce:	4618      	mov	r0, r3
 80214d0:	f003 ff96 	bl	8025400 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80214d4:	1d3b      	adds	r3, r7, #4
 80214d6:	2200      	movs	r2, #0
 80214d8:	601a      	str	r2, [r3, #0]
 80214da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80214dc:	4b22      	ldr	r3, [pc, #136]	; (8021568 <MX_TIM8_Init+0xa8>)
 80214de:	4a23      	ldr	r2, [pc, #140]	; (802156c <MX_TIM8_Init+0xac>)
 80214e0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80214e2:	4b21      	ldr	r3, [pc, #132]	; (8021568 <MX_TIM8_Init+0xa8>)
 80214e4:	2200      	movs	r2, #0
 80214e6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80214e8:	4b1f      	ldr	r3, [pc, #124]	; (8021568 <MX_TIM8_Init+0xa8>)
 80214ea:	2200      	movs	r2, #0
 80214ec:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80214ee:	4b1e      	ldr	r3, [pc, #120]	; (8021568 <MX_TIM8_Init+0xa8>)
 80214f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80214f4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80214f6:	4b1c      	ldr	r3, [pc, #112]	; (8021568 <MX_TIM8_Init+0xa8>)
 80214f8:	2200      	movs	r2, #0
 80214fa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80214fc:	4b1a      	ldr	r3, [pc, #104]	; (8021568 <MX_TIM8_Init+0xa8>)
 80214fe:	2200      	movs	r2, #0
 8021500:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021502:	4b19      	ldr	r3, [pc, #100]	; (8021568 <MX_TIM8_Init+0xa8>)
 8021504:	2200      	movs	r2, #0
 8021506:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8021508:	2303      	movs	r3, #3
 802150a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 802150c:	2300      	movs	r3, #0
 802150e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8021510:	2301      	movs	r3, #1
 8021512:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8021514:	2300      	movs	r3, #0
 8021516:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8021518:	2300      	movs	r3, #0
 802151a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 802151c:	2300      	movs	r3, #0
 802151e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8021520:	2301      	movs	r3, #1
 8021522:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8021524:	2300      	movs	r3, #0
 8021526:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8021528:	2300      	movs	r3, #0
 802152a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 802152c:	f107 030c 	add.w	r3, r7, #12
 8021530:	4619      	mov	r1, r3
 8021532:	480d      	ldr	r0, [pc, #52]	; (8021568 <MX_TIM8_Init+0xa8>)
 8021534:	f003 f80e 	bl	8024554 <HAL_TIM_Encoder_Init>
 8021538:	4603      	mov	r3, r0
 802153a:	2b00      	cmp	r3, #0
 802153c:	d001      	beq.n	8021542 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 802153e:	f000 f99b 	bl	8021878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021542:	2300      	movs	r3, #0
 8021544:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021546:	2300      	movs	r3, #0
 8021548:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 802154a:	1d3b      	adds	r3, r7, #4
 802154c:	4619      	mov	r1, r3
 802154e:	4806      	ldr	r0, [pc, #24]	; (8021568 <MX_TIM8_Init+0xa8>)
 8021550:	f003 fe50 	bl	80251f4 <HAL_TIMEx_MasterConfigSynchronization>
 8021554:	4603      	mov	r3, r0
 8021556:	2b00      	cmp	r3, #0
 8021558:	d001      	beq.n	802155e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 802155a:	f000 f98d 	bl	8021878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 802155e:	bf00      	nop
 8021560:	3730      	adds	r7, #48	; 0x30
 8021562:	46bd      	mov	sp, r7
 8021564:	bd80      	pop	{r7, pc}
 8021566:	bf00      	nop
 8021568:	20000490 	.word	0x20000490
 802156c:	40010400 	.word	0x40010400

08021570 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8021570:	b580      	push	{r7, lr}
 8021572:	b088      	sub	sp, #32
 8021574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8021576:	1d3b      	adds	r3, r7, #4
 8021578:	2200      	movs	r2, #0
 802157a:	601a      	str	r2, [r3, #0]
 802157c:	605a      	str	r2, [r3, #4]
 802157e:	609a      	str	r2, [r3, #8]
 8021580:	60da      	str	r2, [r3, #12]
 8021582:	611a      	str	r2, [r3, #16]
 8021584:	615a      	str	r2, [r3, #20]
 8021586:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8021588:	4b1e      	ldr	r3, [pc, #120]	; (8021604 <MX_TIM11_Init+0x94>)
 802158a:	4a1f      	ldr	r2, [pc, #124]	; (8021608 <MX_TIM11_Init+0x98>)
 802158c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 802158e:	4b1d      	ldr	r3, [pc, #116]	; (8021604 <MX_TIM11_Init+0x94>)
 8021590:	2200      	movs	r2, #0
 8021592:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021594:	4b1b      	ldr	r3, [pc, #108]	; (8021604 <MX_TIM11_Init+0x94>)
 8021596:	2200      	movs	r2, #0
 8021598:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1679;
 802159a:	4b1a      	ldr	r3, [pc, #104]	; (8021604 <MX_TIM11_Init+0x94>)
 802159c:	f240 628f 	movw	r2, #1679	; 0x68f
 80215a0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80215a2:	4b18      	ldr	r3, [pc, #96]	; (8021604 <MX_TIM11_Init+0x94>)
 80215a4:	2200      	movs	r2, #0
 80215a6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80215a8:	4b16      	ldr	r3, [pc, #88]	; (8021604 <MX_TIM11_Init+0x94>)
 80215aa:	2200      	movs	r2, #0
 80215ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80215ae:	4815      	ldr	r0, [pc, #84]	; (8021604 <MX_TIM11_Init+0x94>)
 80215b0:	f002 ff18 	bl	80243e4 <HAL_TIM_Base_Init>
 80215b4:	4603      	mov	r3, r0
 80215b6:	2b00      	cmp	r3, #0
 80215b8:	d001      	beq.n	80215be <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80215ba:	f000 f95d 	bl	8021878 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80215be:	4811      	ldr	r0, [pc, #68]	; (8021604 <MX_TIM11_Init+0x94>)
 80215c0:	f002 ff5f 	bl	8024482 <HAL_TIM_PWM_Init>
 80215c4:	4603      	mov	r3, r0
 80215c6:	2b00      	cmp	r3, #0
 80215c8:	d001      	beq.n	80215ce <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80215ca:	f000 f955 	bl	8021878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80215ce:	2360      	movs	r3, #96	; 0x60
 80215d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80215d2:	2300      	movs	r3, #0
 80215d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80215d6:	2300      	movs	r3, #0
 80215d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80215da:	2300      	movs	r3, #0
 80215dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80215de:	1d3b      	adds	r3, r7, #4
 80215e0:	2200      	movs	r2, #0
 80215e2:	4619      	mov	r1, r3
 80215e4:	4807      	ldr	r0, [pc, #28]	; (8021604 <MX_TIM11_Init+0x94>)
 80215e6:	f003 f94f 	bl	8024888 <HAL_TIM_PWM_ConfigChannel>
 80215ea:	4603      	mov	r3, r0
 80215ec:	2b00      	cmp	r3, #0
 80215ee:	d001      	beq.n	80215f4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80215f0:	f000 f942 	bl	8021878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80215f4:	4803      	ldr	r0, [pc, #12]	; (8021604 <MX_TIM11_Init+0x94>)
 80215f6:	f000 fc0f 	bl	8021e18 <HAL_TIM_MspPostInit>

}
 80215fa:	bf00      	nop
 80215fc:	3720      	adds	r7, #32
 80215fe:	46bd      	mov	sp, r7
 8021600:	bd80      	pop	{r7, pc}
 8021602:	bf00      	nop
 8021604:	20000684 	.word	0x20000684
 8021608:	40014800 	.word	0x40014800

0802160c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 802160c:	b580      	push	{r7, lr}
 802160e:	b088      	sub	sp, #32
 8021610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8021612:	1d3b      	adds	r3, r7, #4
 8021614:	2200      	movs	r2, #0
 8021616:	601a      	str	r2, [r3, #0]
 8021618:	605a      	str	r2, [r3, #4]
 802161a:	609a      	str	r2, [r3, #8]
 802161c:	60da      	str	r2, [r3, #12]
 802161e:	611a      	str	r2, [r3, #16]
 8021620:	615a      	str	r2, [r3, #20]
 8021622:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8021624:	4b1a      	ldr	r3, [pc, #104]	; (8021690 <MX_TIM12_Init+0x84>)
 8021626:	4a1b      	ldr	r2, [pc, #108]	; (8021694 <MX_TIM12_Init+0x88>)
 8021628:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 880;
 802162a:	4b19      	ldr	r3, [pc, #100]	; (8021690 <MX_TIM12_Init+0x84>)
 802162c:	f44f 725c 	mov.w	r2, #880	; 0x370
 8021630:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021632:	4b17      	ldr	r3, [pc, #92]	; (8021690 <MX_TIM12_Init+0x84>)
 8021634:	2200      	movs	r2, #0
 8021636:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 53;
 8021638:	4b15      	ldr	r3, [pc, #84]	; (8021690 <MX_TIM12_Init+0x84>)
 802163a:	2235      	movs	r2, #53	; 0x35
 802163c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802163e:	4b14      	ldr	r3, [pc, #80]	; (8021690 <MX_TIM12_Init+0x84>)
 8021640:	2200      	movs	r2, #0
 8021642:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021644:	4b12      	ldr	r3, [pc, #72]	; (8021690 <MX_TIM12_Init+0x84>)
 8021646:	2200      	movs	r2, #0
 8021648:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 802164a:	4811      	ldr	r0, [pc, #68]	; (8021690 <MX_TIM12_Init+0x84>)
 802164c:	f002 ff19 	bl	8024482 <HAL_TIM_PWM_Init>
 8021650:	4603      	mov	r3, r0
 8021652:	2b00      	cmp	r3, #0
 8021654:	d001      	beq.n	802165a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8021656:	f000 f90f 	bl	8021878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 802165a:	2360      	movs	r3, #96	; 0x60
 802165c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 802165e:	2300      	movs	r3, #0
 8021660:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8021662:	2300      	movs	r3, #0
 8021664:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8021666:	2300      	movs	r3, #0
 8021668:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 802166a:	1d3b      	adds	r3, r7, #4
 802166c:	2204      	movs	r2, #4
 802166e:	4619      	mov	r1, r3
 8021670:	4807      	ldr	r0, [pc, #28]	; (8021690 <MX_TIM12_Init+0x84>)
 8021672:	f003 f909 	bl	8024888 <HAL_TIM_PWM_ConfigChannel>
 8021676:	4603      	mov	r3, r0
 8021678:	2b00      	cmp	r3, #0
 802167a:	d001      	beq.n	8021680 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 802167c:	f000 f8fc 	bl	8021878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8021680:	4803      	ldr	r0, [pc, #12]	; (8021690 <MX_TIM12_Init+0x84>)
 8021682:	f000 fbc9 	bl	8021e18 <HAL_TIM_MspPostInit>

}
 8021686:	bf00      	nop
 8021688:	3720      	adds	r7, #32
 802168a:	46bd      	mov	sp, r7
 802168c:	bd80      	pop	{r7, pc}
 802168e:	bf00      	nop
 8021690:	200007e4 	.word	0x200007e4
 8021694:	40001800 	.word	0x40001800

08021698 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8021698:	b580      	push	{r7, lr}
 802169a:	b082      	sub	sp, #8
 802169c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 802169e:	2300      	movs	r3, #0
 80216a0:	607b      	str	r3, [r7, #4]
 80216a2:	4b0c      	ldr	r3, [pc, #48]	; (80216d4 <MX_DMA_Init+0x3c>)
 80216a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80216a6:	4a0b      	ldr	r2, [pc, #44]	; (80216d4 <MX_DMA_Init+0x3c>)
 80216a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80216ac:	6313      	str	r3, [r2, #48]	; 0x30
 80216ae:	4b09      	ldr	r3, [pc, #36]	; (80216d4 <MX_DMA_Init+0x3c>)
 80216b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80216b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80216b6:	607b      	str	r3, [r7, #4]
 80216b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80216ba:	2200      	movs	r2, #0
 80216bc:	2100      	movs	r1, #0
 80216be:	2038      	movs	r0, #56	; 0x38
 80216c0:	f001 fb73 	bl	8022daa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80216c4:	2038      	movs	r0, #56	; 0x38
 80216c6:	f001 fb8c 	bl	8022de2 <HAL_NVIC_EnableIRQ>

}
 80216ca:	bf00      	nop
 80216cc:	3708      	adds	r7, #8
 80216ce:	46bd      	mov	sp, r7
 80216d0:	bd80      	pop	{r7, pc}
 80216d2:	bf00      	nop
 80216d4:	40023800 	.word	0x40023800

080216d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80216d8:	b580      	push	{r7, lr}
 80216da:	b08a      	sub	sp, #40	; 0x28
 80216dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80216de:	f107 0314 	add.w	r3, r7, #20
 80216e2:	2200      	movs	r2, #0
 80216e4:	601a      	str	r2, [r3, #0]
 80216e6:	605a      	str	r2, [r3, #4]
 80216e8:	609a      	str	r2, [r3, #8]
 80216ea:	60da      	str	r2, [r3, #12]
 80216ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80216ee:	2300      	movs	r3, #0
 80216f0:	613b      	str	r3, [r7, #16]
 80216f2:	4b5c      	ldr	r3, [pc, #368]	; (8021864 <MX_GPIO_Init+0x18c>)
 80216f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80216f6:	4a5b      	ldr	r2, [pc, #364]	; (8021864 <MX_GPIO_Init+0x18c>)
 80216f8:	f043 0304 	orr.w	r3, r3, #4
 80216fc:	6313      	str	r3, [r2, #48]	; 0x30
 80216fe:	4b59      	ldr	r3, [pc, #356]	; (8021864 <MX_GPIO_Init+0x18c>)
 8021700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021702:	f003 0304 	and.w	r3, r3, #4
 8021706:	613b      	str	r3, [r7, #16]
 8021708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 802170a:	2300      	movs	r3, #0
 802170c:	60fb      	str	r3, [r7, #12]
 802170e:	4b55      	ldr	r3, [pc, #340]	; (8021864 <MX_GPIO_Init+0x18c>)
 8021710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021712:	4a54      	ldr	r2, [pc, #336]	; (8021864 <MX_GPIO_Init+0x18c>)
 8021714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021718:	6313      	str	r3, [r2, #48]	; 0x30
 802171a:	4b52      	ldr	r3, [pc, #328]	; (8021864 <MX_GPIO_Init+0x18c>)
 802171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802171e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021722:	60fb      	str	r3, [r7, #12]
 8021724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8021726:	2300      	movs	r3, #0
 8021728:	60bb      	str	r3, [r7, #8]
 802172a:	4b4e      	ldr	r3, [pc, #312]	; (8021864 <MX_GPIO_Init+0x18c>)
 802172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802172e:	4a4d      	ldr	r2, [pc, #308]	; (8021864 <MX_GPIO_Init+0x18c>)
 8021730:	f043 0301 	orr.w	r3, r3, #1
 8021734:	6313      	str	r3, [r2, #48]	; 0x30
 8021736:	4b4b      	ldr	r3, [pc, #300]	; (8021864 <MX_GPIO_Init+0x18c>)
 8021738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802173a:	f003 0301 	and.w	r3, r3, #1
 802173e:	60bb      	str	r3, [r7, #8]
 8021740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8021742:	2300      	movs	r3, #0
 8021744:	607b      	str	r3, [r7, #4]
 8021746:	4b47      	ldr	r3, [pc, #284]	; (8021864 <MX_GPIO_Init+0x18c>)
 8021748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802174a:	4a46      	ldr	r2, [pc, #280]	; (8021864 <MX_GPIO_Init+0x18c>)
 802174c:	f043 0302 	orr.w	r3, r3, #2
 8021750:	6313      	str	r3, [r2, #48]	; 0x30
 8021752:	4b44      	ldr	r3, [pc, #272]	; (8021864 <MX_GPIO_Init+0x18c>)
 8021754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021756:	f003 0302 	and.w	r3, r3, #2
 802175a:	607b      	str	r3, [r7, #4]
 802175c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802175e:	2300      	movs	r3, #0
 8021760:	603b      	str	r3, [r7, #0]
 8021762:	4b40      	ldr	r3, [pc, #256]	; (8021864 <MX_GPIO_Init+0x18c>)
 8021764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021766:	4a3f      	ldr	r2, [pc, #252]	; (8021864 <MX_GPIO_Init+0x18c>)
 8021768:	f043 0308 	orr.w	r3, r3, #8
 802176c:	6313      	str	r3, [r2, #48]	; 0x30
 802176e:	4b3d      	ldr	r3, [pc, #244]	; (8021864 <MX_GPIO_Init+0x18c>)
 8021770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021772:	f003 0308 	and.w	r3, r3, #8
 8021776:	603b      	str	r3, [r7, #0]
 8021778:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 802177a:	2200      	movs	r2, #0
 802177c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8021780:	4839      	ldr	r0, [pc, #228]	; (8021868 <MX_GPIO_Init+0x190>)
 8021782:	f002 f851 	bl	8023828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8021786:	2201      	movs	r2, #1
 8021788:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802178c:	4837      	ldr	r0, [pc, #220]	; (802186c <MX_GPIO_Init+0x194>)
 802178e:	f002 f84b 	bl	8023828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8021792:	2200      	movs	r2, #0
 8021794:	f44f 4105 	mov.w	r1, #34048	; 0x8500
 8021798:	4835      	ldr	r0, [pc, #212]	; (8021870 <MX_GPIO_Init+0x198>)
 802179a:	f002 f845 	bl	8023828 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 802179e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80217a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80217a4:	2301      	movs	r3, #1
 80217a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80217a8:	2300      	movs	r3, #0
 80217aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80217ac:	2300      	movs	r3, #0
 80217ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80217b0:	f107 0314 	add.w	r3, r7, #20
 80217b4:	4619      	mov	r1, r3
 80217b6:	482c      	ldr	r0, [pc, #176]	; (8021868 <MX_GPIO_Init+0x190>)
 80217b8:	f001 fe9c 	bl	80234f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80217bc:	2307      	movs	r3, #7
 80217be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80217c0:	2300      	movs	r3, #0
 80217c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80217c4:	2301      	movs	r3, #1
 80217c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80217c8:	f107 0314 	add.w	r3, r7, #20
 80217cc:	4619      	mov	r1, r3
 80217ce:	4827      	ldr	r0, [pc, #156]	; (802186c <MX_GPIO_Init+0x194>)
 80217d0:	f001 fe90 	bl	80234f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80217d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80217d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80217da:	2301      	movs	r3, #1
 80217dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80217de:	2300      	movs	r3, #0
 80217e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80217e2:	2300      	movs	r3, #0
 80217e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80217e6:	f107 0314 	add.w	r3, r7, #20
 80217ea:	4619      	mov	r1, r3
 80217ec:	481f      	ldr	r0, [pc, #124]	; (802186c <MX_GPIO_Init+0x194>)
 80217ee:	f001 fe81 	bl	80234f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_8;
 80217f2:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 80217f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80217f8:	2300      	movs	r3, #0
 80217fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80217fc:	2300      	movs	r3, #0
 80217fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021800:	f107 0314 	add.w	r3, r7, #20
 8021804:	4619      	mov	r1, r3
 8021806:	4819      	ldr	r0, [pc, #100]	; (802186c <MX_GPIO_Init+0x194>)
 8021808:	f001 fe74 	bl	80234f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15;
 802180c:	f44f 4305 	mov.w	r3, #34048	; 0x8500
 8021810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8021812:	2301      	movs	r3, #1
 8021814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021816:	2300      	movs	r3, #0
 8021818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802181a:	2300      	movs	r3, #0
 802181c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802181e:	f107 0314 	add.w	r3, r7, #20
 8021822:	4619      	mov	r1, r3
 8021824:	4812      	ldr	r0, [pc, #72]	; (8021870 <MX_GPIO_Init+0x198>)
 8021826:	f001 fe65 	bl	80234f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 802182a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802182e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8021830:	2300      	movs	r3, #0
 8021832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8021834:	2301      	movs	r3, #1
 8021836:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021838:	f107 0314 	add.w	r3, r7, #20
 802183c:	4619      	mov	r1, r3
 802183e:	480c      	ldr	r0, [pc, #48]	; (8021870 <MX_GPIO_Init+0x198>)
 8021840:	f001 fe58 	bl	80234f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8021844:	2304      	movs	r3, #4
 8021846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8021848:	2300      	movs	r3, #0
 802184a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802184c:	2300      	movs	r3, #0
 802184e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021850:	f107 0314 	add.w	r3, r7, #20
 8021854:	4619      	mov	r1, r3
 8021856:	4807      	ldr	r0, [pc, #28]	; (8021874 <MX_GPIO_Init+0x19c>)
 8021858:	f001 fe4c 	bl	80234f4 <HAL_GPIO_Init>

}
 802185c:	bf00      	nop
 802185e:	3728      	adds	r7, #40	; 0x28
 8021860:	46bd      	mov	sp, r7
 8021862:	bd80      	pop	{r7, pc}
 8021864:	40023800 	.word	0x40023800
 8021868:	40020800 	.word	0x40020800
 802186c:	40020400 	.word	0x40020400
 8021870:	40020000 	.word	0x40020000
 8021874:	40020c00 	.word	0x40020c00

08021878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8021878:	b480      	push	{r7}
 802187a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 802187c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 802187e:	e7fe      	b.n	802187e <Error_Handler+0x6>

08021880 <_ZN10SideSensorC1Ev>:
#include "side_sensor.hpp"
#include "declare_extern.h"

SideSensor::SideSensor() : read_state_flags_(0)
 8021880:	b480      	push	{r7}
 8021882:	b083      	sub	sp, #12
 8021884:	af00      	add	r7, sp, #0
 8021886:	6078      	str	r0, [r7, #4]
                         , write_state_flags_(0)
                         , exception_flags_(0)
                         , master_count_(0)
                         , corner_marker_count_(0)
                         , cross_line_count_(0) {}
 8021888:	687b      	ldr	r3, [r7, #4]
 802188a:	2200      	movs	r2, #0
 802188c:	701a      	strb	r2, [r3, #0]
 802188e:	687b      	ldr	r3, [r7, #4]
 8021890:	2200      	movs	r2, #0
 8021892:	705a      	strb	r2, [r3, #1]
 8021894:	687b      	ldr	r3, [r7, #4]
 8021896:	2200      	movs	r2, #0
 8021898:	709a      	strb	r2, [r3, #2]
 802189a:	687b      	ldr	r3, [r7, #4]
 802189c:	2200      	movs	r2, #0
 802189e:	70da      	strb	r2, [r3, #3]
 80218a0:	687b      	ldr	r3, [r7, #4]
 80218a2:	2200      	movs	r2, #0
 80218a4:	711a      	strb	r2, [r3, #4]
 80218a6:	687b      	ldr	r3, [r7, #4]
 80218a8:	2200      	movs	r2, #0
 80218aa:	715a      	strb	r2, [r3, #5]
 80218ac:	687b      	ldr	r3, [r7, #4]
 80218ae:	4618      	mov	r0, r3
 80218b0:	370c      	adds	r7, #12
 80218b2:	46bd      	mov	sp, r7
 80218b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218b8:	4770      	bx	lr
	...

080218bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80218bc:	b480      	push	{r7}
 80218be:	b083      	sub	sp, #12
 80218c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80218c2:	2300      	movs	r3, #0
 80218c4:	607b      	str	r3, [r7, #4]
 80218c6:	4b10      	ldr	r3, [pc, #64]	; (8021908 <HAL_MspInit+0x4c>)
 80218c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80218ca:	4a0f      	ldr	r2, [pc, #60]	; (8021908 <HAL_MspInit+0x4c>)
 80218cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80218d0:	6453      	str	r3, [r2, #68]	; 0x44
 80218d2:	4b0d      	ldr	r3, [pc, #52]	; (8021908 <HAL_MspInit+0x4c>)
 80218d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80218d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80218da:	607b      	str	r3, [r7, #4]
 80218dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80218de:	2300      	movs	r3, #0
 80218e0:	603b      	str	r3, [r7, #0]
 80218e2:	4b09      	ldr	r3, [pc, #36]	; (8021908 <HAL_MspInit+0x4c>)
 80218e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80218e6:	4a08      	ldr	r2, [pc, #32]	; (8021908 <HAL_MspInit+0x4c>)
 80218e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80218ec:	6413      	str	r3, [r2, #64]	; 0x40
 80218ee:	4b06      	ldr	r3, [pc, #24]	; (8021908 <HAL_MspInit+0x4c>)
 80218f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80218f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80218f6:	603b      	str	r3, [r7, #0]
 80218f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80218fa:	bf00      	nop
 80218fc:	370c      	adds	r7, #12
 80218fe:	46bd      	mov	sp, r7
 8021900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021904:	4770      	bx	lr
 8021906:	bf00      	nop
 8021908:	40023800 	.word	0x40023800

0802190c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 802190c:	b580      	push	{r7, lr}
 802190e:	b08a      	sub	sp, #40	; 0x28
 8021910:	af00      	add	r7, sp, #0
 8021912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021914:	f107 0314 	add.w	r3, r7, #20
 8021918:	2200      	movs	r2, #0
 802191a:	601a      	str	r2, [r3, #0]
 802191c:	605a      	str	r2, [r3, #4]
 802191e:	609a      	str	r2, [r3, #8]
 8021920:	60da      	str	r2, [r3, #12]
 8021922:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8021924:	687b      	ldr	r3, [r7, #4]
 8021926:	681b      	ldr	r3, [r3, #0]
 8021928:	4a3c      	ldr	r2, [pc, #240]	; (8021a1c <HAL_ADC_MspInit+0x110>)
 802192a:	4293      	cmp	r3, r2
 802192c:	d171      	bne.n	8021a12 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 802192e:	2300      	movs	r3, #0
 8021930:	613b      	str	r3, [r7, #16]
 8021932:	4b3b      	ldr	r3, [pc, #236]	; (8021a20 <HAL_ADC_MspInit+0x114>)
 8021934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021936:	4a3a      	ldr	r2, [pc, #232]	; (8021a20 <HAL_ADC_MspInit+0x114>)
 8021938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802193c:	6453      	str	r3, [r2, #68]	; 0x44
 802193e:	4b38      	ldr	r3, [pc, #224]	; (8021a20 <HAL_ADC_MspInit+0x114>)
 8021940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021946:	613b      	str	r3, [r7, #16]
 8021948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 802194a:	2300      	movs	r3, #0
 802194c:	60fb      	str	r3, [r7, #12]
 802194e:	4b34      	ldr	r3, [pc, #208]	; (8021a20 <HAL_ADC_MspInit+0x114>)
 8021950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021952:	4a33      	ldr	r2, [pc, #204]	; (8021a20 <HAL_ADC_MspInit+0x114>)
 8021954:	f043 0304 	orr.w	r3, r3, #4
 8021958:	6313      	str	r3, [r2, #48]	; 0x30
 802195a:	4b31      	ldr	r3, [pc, #196]	; (8021a20 <HAL_ADC_MspInit+0x114>)
 802195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802195e:	f003 0304 	and.w	r3, r3, #4
 8021962:	60fb      	str	r3, [r7, #12]
 8021964:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021966:	2300      	movs	r3, #0
 8021968:	60bb      	str	r3, [r7, #8]
 802196a:	4b2d      	ldr	r3, [pc, #180]	; (8021a20 <HAL_ADC_MspInit+0x114>)
 802196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802196e:	4a2c      	ldr	r2, [pc, #176]	; (8021a20 <HAL_ADC_MspInit+0x114>)
 8021970:	f043 0301 	orr.w	r3, r3, #1
 8021974:	6313      	str	r3, [r2, #48]	; 0x30
 8021976:	4b2a      	ldr	r3, [pc, #168]	; (8021a20 <HAL_ADC_MspInit+0x114>)
 8021978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802197a:	f003 0301 	and.w	r3, r3, #1
 802197e:	60bb      	str	r3, [r7, #8]
 8021980:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8021982:	233f      	movs	r3, #63	; 0x3f
 8021984:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8021986:	2303      	movs	r3, #3
 8021988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802198a:	2300      	movs	r3, #0
 802198c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802198e:	f107 0314 	add.w	r3, r7, #20
 8021992:	4619      	mov	r1, r3
 8021994:	4823      	ldr	r0, [pc, #140]	; (8021a24 <HAL_ADC_MspInit+0x118>)
 8021996:	f001 fdad 	bl	80234f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 802199a:	23ff      	movs	r3, #255	; 0xff
 802199c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802199e:	2303      	movs	r3, #3
 80219a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80219a2:	2300      	movs	r3, #0
 80219a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80219a6:	f107 0314 	add.w	r3, r7, #20
 80219aa:	4619      	mov	r1, r3
 80219ac:	481e      	ldr	r0, [pc, #120]	; (8021a28 <HAL_ADC_MspInit+0x11c>)
 80219ae:	f001 fda1 	bl	80234f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80219b2:	4b1e      	ldr	r3, [pc, #120]	; (8021a2c <HAL_ADC_MspInit+0x120>)
 80219b4:	4a1e      	ldr	r2, [pc, #120]	; (8021a30 <HAL_ADC_MspInit+0x124>)
 80219b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80219b8:	4b1c      	ldr	r3, [pc, #112]	; (8021a2c <HAL_ADC_MspInit+0x120>)
 80219ba:	2200      	movs	r2, #0
 80219bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80219be:	4b1b      	ldr	r3, [pc, #108]	; (8021a2c <HAL_ADC_MspInit+0x120>)
 80219c0:	2200      	movs	r2, #0
 80219c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80219c4:	4b19      	ldr	r3, [pc, #100]	; (8021a2c <HAL_ADC_MspInit+0x120>)
 80219c6:	2200      	movs	r2, #0
 80219c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80219ca:	4b18      	ldr	r3, [pc, #96]	; (8021a2c <HAL_ADC_MspInit+0x120>)
 80219cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80219d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80219d2:	4b16      	ldr	r3, [pc, #88]	; (8021a2c <HAL_ADC_MspInit+0x120>)
 80219d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80219d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80219da:	4b14      	ldr	r3, [pc, #80]	; (8021a2c <HAL_ADC_MspInit+0x120>)
 80219dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80219e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80219e2:	4b12      	ldr	r3, [pc, #72]	; (8021a2c <HAL_ADC_MspInit+0x120>)
 80219e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80219e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80219ea:	4b10      	ldr	r3, [pc, #64]	; (8021a2c <HAL_ADC_MspInit+0x120>)
 80219ec:	2200      	movs	r2, #0
 80219ee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80219f0:	4b0e      	ldr	r3, [pc, #56]	; (8021a2c <HAL_ADC_MspInit+0x120>)
 80219f2:	2200      	movs	r2, #0
 80219f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80219f6:	480d      	ldr	r0, [pc, #52]	; (8021a2c <HAL_ADC_MspInit+0x120>)
 80219f8:	f001 fa0e 	bl	8022e18 <HAL_DMA_Init>
 80219fc:	4603      	mov	r3, r0
 80219fe:	2b00      	cmp	r3, #0
 8021a00:	d001      	beq.n	8021a06 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8021a02:	f7ff ff39 	bl	8021878 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8021a06:	687b      	ldr	r3, [r7, #4]
 8021a08:	4a08      	ldr	r2, [pc, #32]	; (8021a2c <HAL_ADC_MspInit+0x120>)
 8021a0a:	639a      	str	r2, [r3, #56]	; 0x38
 8021a0c:	4a07      	ldr	r2, [pc, #28]	; (8021a2c <HAL_ADC_MspInit+0x120>)
 8021a0e:	687b      	ldr	r3, [r7, #4]
 8021a10:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8021a12:	bf00      	nop
 8021a14:	3728      	adds	r7, #40	; 0x28
 8021a16:	46bd      	mov	sp, r7
 8021a18:	bd80      	pop	{r7, pc}
 8021a1a:	bf00      	nop
 8021a1c:	40012000 	.word	0x40012000
 8021a20:	40023800 	.word	0x40023800
 8021a24:	40020800 	.word	0x40020800
 8021a28:	40020000 	.word	0x40020000
 8021a2c:	200006c4 	.word	0x200006c4
 8021a30:	40026410 	.word	0x40026410

08021a34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8021a34:	b580      	push	{r7, lr}
 8021a36:	b08a      	sub	sp, #40	; 0x28
 8021a38:	af00      	add	r7, sp, #0
 8021a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021a3c:	f107 0314 	add.w	r3, r7, #20
 8021a40:	2200      	movs	r2, #0
 8021a42:	601a      	str	r2, [r3, #0]
 8021a44:	605a      	str	r2, [r3, #4]
 8021a46:	609a      	str	r2, [r3, #8]
 8021a48:	60da      	str	r2, [r3, #12]
 8021a4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8021a4c:	687b      	ldr	r3, [r7, #4]
 8021a4e:	681b      	ldr	r3, [r3, #0]
 8021a50:	4a19      	ldr	r2, [pc, #100]	; (8021ab8 <HAL_I2C_MspInit+0x84>)
 8021a52:	4293      	cmp	r3, r2
 8021a54:	d12c      	bne.n	8021ab0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8021a56:	2300      	movs	r3, #0
 8021a58:	613b      	str	r3, [r7, #16]
 8021a5a:	4b18      	ldr	r3, [pc, #96]	; (8021abc <HAL_I2C_MspInit+0x88>)
 8021a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021a5e:	4a17      	ldr	r2, [pc, #92]	; (8021abc <HAL_I2C_MspInit+0x88>)
 8021a60:	f043 0302 	orr.w	r3, r3, #2
 8021a64:	6313      	str	r3, [r2, #48]	; 0x30
 8021a66:	4b15      	ldr	r3, [pc, #84]	; (8021abc <HAL_I2C_MspInit+0x88>)
 8021a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021a6a:	f003 0302 	and.w	r3, r3, #2
 8021a6e:	613b      	str	r3, [r7, #16]
 8021a70:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8021a72:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8021a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8021a78:	2312      	movs	r3, #18
 8021a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8021a7c:	2301      	movs	r3, #1
 8021a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021a80:	2303      	movs	r3, #3
 8021a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8021a84:	2304      	movs	r3, #4
 8021a86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021a88:	f107 0314 	add.w	r3, r7, #20
 8021a8c:	4619      	mov	r1, r3
 8021a8e:	480c      	ldr	r0, [pc, #48]	; (8021ac0 <HAL_I2C_MspInit+0x8c>)
 8021a90:	f001 fd30 	bl	80234f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8021a94:	2300      	movs	r3, #0
 8021a96:	60fb      	str	r3, [r7, #12]
 8021a98:	4b08      	ldr	r3, [pc, #32]	; (8021abc <HAL_I2C_MspInit+0x88>)
 8021a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021a9c:	4a07      	ldr	r2, [pc, #28]	; (8021abc <HAL_I2C_MspInit+0x88>)
 8021a9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8021aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8021aa4:	4b05      	ldr	r3, [pc, #20]	; (8021abc <HAL_I2C_MspInit+0x88>)
 8021aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021aa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8021aac:	60fb      	str	r3, [r7, #12]
 8021aae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8021ab0:	bf00      	nop
 8021ab2:	3728      	adds	r7, #40	; 0x28
 8021ab4:	46bd      	mov	sp, r7
 8021ab6:	bd80      	pop	{r7, pc}
 8021ab8:	40005800 	.word	0x40005800
 8021abc:	40023800 	.word	0x40023800
 8021ac0:	40020400 	.word	0x40020400

08021ac4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8021ac4:	b580      	push	{r7, lr}
 8021ac6:	b08a      	sub	sp, #40	; 0x28
 8021ac8:	af00      	add	r7, sp, #0
 8021aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021acc:	f107 0314 	add.w	r3, r7, #20
 8021ad0:	2200      	movs	r2, #0
 8021ad2:	601a      	str	r2, [r3, #0]
 8021ad4:	605a      	str	r2, [r3, #4]
 8021ad6:	609a      	str	r2, [r3, #8]
 8021ad8:	60da      	str	r2, [r3, #12]
 8021ada:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8021adc:	687b      	ldr	r3, [r7, #4]
 8021ade:	681b      	ldr	r3, [r3, #0]
 8021ae0:	4a19      	ldr	r2, [pc, #100]	; (8021b48 <HAL_SPI_MspInit+0x84>)
 8021ae2:	4293      	cmp	r3, r2
 8021ae4:	d12c      	bne.n	8021b40 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8021ae6:	2300      	movs	r3, #0
 8021ae8:	613b      	str	r3, [r7, #16]
 8021aea:	4b18      	ldr	r3, [pc, #96]	; (8021b4c <HAL_SPI_MspInit+0x88>)
 8021aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021aee:	4a17      	ldr	r2, [pc, #92]	; (8021b4c <HAL_SPI_MspInit+0x88>)
 8021af0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8021af4:	6413      	str	r3, [r2, #64]	; 0x40
 8021af6:	4b15      	ldr	r3, [pc, #84]	; (8021b4c <HAL_SPI_MspInit+0x88>)
 8021af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021afa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8021afe:	613b      	str	r3, [r7, #16]
 8021b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021b02:	2300      	movs	r3, #0
 8021b04:	60fb      	str	r3, [r7, #12]
 8021b06:	4b11      	ldr	r3, [pc, #68]	; (8021b4c <HAL_SPI_MspInit+0x88>)
 8021b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021b0a:	4a10      	ldr	r2, [pc, #64]	; (8021b4c <HAL_SPI_MspInit+0x88>)
 8021b0c:	f043 0304 	orr.w	r3, r3, #4
 8021b10:	6313      	str	r3, [r2, #48]	; 0x30
 8021b12:	4b0e      	ldr	r3, [pc, #56]	; (8021b4c <HAL_SPI_MspInit+0x88>)
 8021b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021b16:	f003 0304 	and.w	r3, r3, #4
 8021b1a:	60fb      	str	r3, [r7, #12]
 8021b1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8021b1e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8021b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021b24:	2302      	movs	r3, #2
 8021b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021b28:	2300      	movs	r3, #0
 8021b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021b2c:	2303      	movs	r3, #3
 8021b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8021b30:	2306      	movs	r3, #6
 8021b32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021b34:	f107 0314 	add.w	r3, r7, #20
 8021b38:	4619      	mov	r1, r3
 8021b3a:	4805      	ldr	r0, [pc, #20]	; (8021b50 <HAL_SPI_MspInit+0x8c>)
 8021b3c:	f001 fcda 	bl	80234f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8021b40:	bf00      	nop
 8021b42:	3728      	adds	r7, #40	; 0x28
 8021b44:	46bd      	mov	sp, r7
 8021b46:	bd80      	pop	{r7, pc}
 8021b48:	40003c00 	.word	0x40003c00
 8021b4c:	40023800 	.word	0x40023800
 8021b50:	40020800 	.word	0x40020800

08021b54 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8021b54:	b480      	push	{r7}
 8021b56:	b087      	sub	sp, #28
 8021b58:	af00      	add	r7, sp, #0
 8021b5a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8021b5c:	687b      	ldr	r3, [r7, #4]
 8021b5e:	681b      	ldr	r3, [r3, #0]
 8021b60:	4a1f      	ldr	r2, [pc, #124]	; (8021be0 <HAL_TIM_PWM_MspInit+0x8c>)
 8021b62:	4293      	cmp	r3, r2
 8021b64:	d10e      	bne.n	8021b84 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8021b66:	2300      	movs	r3, #0
 8021b68:	617b      	str	r3, [r7, #20]
 8021b6a:	4b1e      	ldr	r3, [pc, #120]	; (8021be4 <HAL_TIM_PWM_MspInit+0x90>)
 8021b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021b6e:	4a1d      	ldr	r2, [pc, #116]	; (8021be4 <HAL_TIM_PWM_MspInit+0x90>)
 8021b70:	f043 0301 	orr.w	r3, r3, #1
 8021b74:	6453      	str	r3, [r2, #68]	; 0x44
 8021b76:	4b1b      	ldr	r3, [pc, #108]	; (8021be4 <HAL_TIM_PWM_MspInit+0x90>)
 8021b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021b7a:	f003 0301 	and.w	r3, r3, #1
 8021b7e:	617b      	str	r3, [r7, #20]
 8021b80:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8021b82:	e026      	b.n	8021bd2 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8021b84:	687b      	ldr	r3, [r7, #4]
 8021b86:	681b      	ldr	r3, [r3, #0]
 8021b88:	4a17      	ldr	r2, [pc, #92]	; (8021be8 <HAL_TIM_PWM_MspInit+0x94>)
 8021b8a:	4293      	cmp	r3, r2
 8021b8c:	d10e      	bne.n	8021bac <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8021b8e:	2300      	movs	r3, #0
 8021b90:	613b      	str	r3, [r7, #16]
 8021b92:	4b14      	ldr	r3, [pc, #80]	; (8021be4 <HAL_TIM_PWM_MspInit+0x90>)
 8021b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021b96:	4a13      	ldr	r2, [pc, #76]	; (8021be4 <HAL_TIM_PWM_MspInit+0x90>)
 8021b98:	f043 0302 	orr.w	r3, r3, #2
 8021b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8021b9e:	4b11      	ldr	r3, [pc, #68]	; (8021be4 <HAL_TIM_PWM_MspInit+0x90>)
 8021ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021ba2:	f003 0302 	and.w	r3, r3, #2
 8021ba6:	613b      	str	r3, [r7, #16]
 8021ba8:	693b      	ldr	r3, [r7, #16]
}
 8021baa:	e012      	b.n	8021bd2 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 8021bac:	687b      	ldr	r3, [r7, #4]
 8021bae:	681b      	ldr	r3, [r3, #0]
 8021bb0:	4a0e      	ldr	r2, [pc, #56]	; (8021bec <HAL_TIM_PWM_MspInit+0x98>)
 8021bb2:	4293      	cmp	r3, r2
 8021bb4:	d10d      	bne.n	8021bd2 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8021bb6:	2300      	movs	r3, #0
 8021bb8:	60fb      	str	r3, [r7, #12]
 8021bba:	4b0a      	ldr	r3, [pc, #40]	; (8021be4 <HAL_TIM_PWM_MspInit+0x90>)
 8021bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021bbe:	4a09      	ldr	r2, [pc, #36]	; (8021be4 <HAL_TIM_PWM_MspInit+0x90>)
 8021bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8021bc6:	4b07      	ldr	r3, [pc, #28]	; (8021be4 <HAL_TIM_PWM_MspInit+0x90>)
 8021bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021bce:	60fb      	str	r3, [r7, #12]
 8021bd0:	68fb      	ldr	r3, [r7, #12]
}
 8021bd2:	bf00      	nop
 8021bd4:	371c      	adds	r7, #28
 8021bd6:	46bd      	mov	sp, r7
 8021bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bdc:	4770      	bx	lr
 8021bde:	bf00      	nop
 8021be0:	40010000 	.word	0x40010000
 8021be4:	40023800 	.word	0x40023800
 8021be8:	40000400 	.word	0x40000400
 8021bec:	40001800 	.word	0x40001800

08021bf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8021bf0:	b580      	push	{r7, lr}
 8021bf2:	b088      	sub	sp, #32
 8021bf4:	af00      	add	r7, sp, #0
 8021bf6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8021bf8:	687b      	ldr	r3, [r7, #4]
 8021bfa:	681b      	ldr	r3, [r3, #0]
 8021bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8021c00:	d116      	bne.n	8021c30 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8021c02:	2300      	movs	r3, #0
 8021c04:	61fb      	str	r3, [r7, #28]
 8021c06:	4b40      	ldr	r3, [pc, #256]	; (8021d08 <HAL_TIM_Base_MspInit+0x118>)
 8021c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c0a:	4a3f      	ldr	r2, [pc, #252]	; (8021d08 <HAL_TIM_Base_MspInit+0x118>)
 8021c0c:	f043 0301 	orr.w	r3, r3, #1
 8021c10:	6413      	str	r3, [r2, #64]	; 0x40
 8021c12:	4b3d      	ldr	r3, [pc, #244]	; (8021d08 <HAL_TIM_Base_MspInit+0x118>)
 8021c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c16:	f003 0301 	and.w	r3, r3, #1
 8021c1a:	61fb      	str	r3, [r7, #28]
 8021c1c:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8021c1e:	2200      	movs	r2, #0
 8021c20:	2100      	movs	r1, #0
 8021c22:	201c      	movs	r0, #28
 8021c24:	f001 f8c1 	bl	8022daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8021c28:	201c      	movs	r0, #28
 8021c2a:	f001 f8da 	bl	8022de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8021c2e:	e066      	b.n	8021cfe <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM5)
 8021c30:	687b      	ldr	r3, [r7, #4]
 8021c32:	681b      	ldr	r3, [r3, #0]
 8021c34:	4a35      	ldr	r2, [pc, #212]	; (8021d0c <HAL_TIM_Base_MspInit+0x11c>)
 8021c36:	4293      	cmp	r3, r2
 8021c38:	d116      	bne.n	8021c68 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8021c3a:	2300      	movs	r3, #0
 8021c3c:	61bb      	str	r3, [r7, #24]
 8021c3e:	4b32      	ldr	r3, [pc, #200]	; (8021d08 <HAL_TIM_Base_MspInit+0x118>)
 8021c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c42:	4a31      	ldr	r2, [pc, #196]	; (8021d08 <HAL_TIM_Base_MspInit+0x118>)
 8021c44:	f043 0308 	orr.w	r3, r3, #8
 8021c48:	6413      	str	r3, [r2, #64]	; 0x40
 8021c4a:	4b2f      	ldr	r3, [pc, #188]	; (8021d08 <HAL_TIM_Base_MspInit+0x118>)
 8021c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c4e:	f003 0308 	and.w	r3, r3, #8
 8021c52:	61bb      	str	r3, [r7, #24]
 8021c54:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8021c56:	2200      	movs	r2, #0
 8021c58:	2100      	movs	r1, #0
 8021c5a:	2032      	movs	r0, #50	; 0x32
 8021c5c:	f001 f8a5 	bl	8022daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8021c60:	2032      	movs	r0, #50	; 0x32
 8021c62:	f001 f8be 	bl	8022de2 <HAL_NVIC_EnableIRQ>
}
 8021c66:	e04a      	b.n	8021cfe <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM6)
 8021c68:	687b      	ldr	r3, [r7, #4]
 8021c6a:	681b      	ldr	r3, [r3, #0]
 8021c6c:	4a28      	ldr	r2, [pc, #160]	; (8021d10 <HAL_TIM_Base_MspInit+0x120>)
 8021c6e:	4293      	cmp	r3, r2
 8021c70:	d116      	bne.n	8021ca0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8021c72:	2300      	movs	r3, #0
 8021c74:	617b      	str	r3, [r7, #20]
 8021c76:	4b24      	ldr	r3, [pc, #144]	; (8021d08 <HAL_TIM_Base_MspInit+0x118>)
 8021c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c7a:	4a23      	ldr	r2, [pc, #140]	; (8021d08 <HAL_TIM_Base_MspInit+0x118>)
 8021c7c:	f043 0310 	orr.w	r3, r3, #16
 8021c80:	6413      	str	r3, [r2, #64]	; 0x40
 8021c82:	4b21      	ldr	r3, [pc, #132]	; (8021d08 <HAL_TIM_Base_MspInit+0x118>)
 8021c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c86:	f003 0310 	and.w	r3, r3, #16
 8021c8a:	617b      	str	r3, [r7, #20]
 8021c8c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8021c8e:	2200      	movs	r2, #0
 8021c90:	2100      	movs	r1, #0
 8021c92:	2036      	movs	r0, #54	; 0x36
 8021c94:	f001 f889 	bl	8022daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8021c98:	2036      	movs	r0, #54	; 0x36
 8021c9a:	f001 f8a2 	bl	8022de2 <HAL_NVIC_EnableIRQ>
}
 8021c9e:	e02e      	b.n	8021cfe <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 8021ca0:	687b      	ldr	r3, [r7, #4]
 8021ca2:	681b      	ldr	r3, [r3, #0]
 8021ca4:	4a1b      	ldr	r2, [pc, #108]	; (8021d14 <HAL_TIM_Base_MspInit+0x124>)
 8021ca6:	4293      	cmp	r3, r2
 8021ca8:	d116      	bne.n	8021cd8 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8021caa:	2300      	movs	r3, #0
 8021cac:	613b      	str	r3, [r7, #16]
 8021cae:	4b16      	ldr	r3, [pc, #88]	; (8021d08 <HAL_TIM_Base_MspInit+0x118>)
 8021cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021cb2:	4a15      	ldr	r2, [pc, #84]	; (8021d08 <HAL_TIM_Base_MspInit+0x118>)
 8021cb4:	f043 0320 	orr.w	r3, r3, #32
 8021cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8021cba:	4b13      	ldr	r3, [pc, #76]	; (8021d08 <HAL_TIM_Base_MspInit+0x118>)
 8021cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021cbe:	f003 0320 	and.w	r3, r3, #32
 8021cc2:	613b      	str	r3, [r7, #16]
 8021cc4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8021cc6:	2200      	movs	r2, #0
 8021cc8:	2100      	movs	r1, #0
 8021cca:	2037      	movs	r0, #55	; 0x37
 8021ccc:	f001 f86d 	bl	8022daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8021cd0:	2037      	movs	r0, #55	; 0x37
 8021cd2:	f001 f886 	bl	8022de2 <HAL_NVIC_EnableIRQ>
}
 8021cd6:	e012      	b.n	8021cfe <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 8021cd8:	687b      	ldr	r3, [r7, #4]
 8021cda:	681b      	ldr	r3, [r3, #0]
 8021cdc:	4a0e      	ldr	r2, [pc, #56]	; (8021d18 <HAL_TIM_Base_MspInit+0x128>)
 8021cde:	4293      	cmp	r3, r2
 8021ce0:	d10d      	bne.n	8021cfe <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8021ce2:	2300      	movs	r3, #0
 8021ce4:	60fb      	str	r3, [r7, #12]
 8021ce6:	4b08      	ldr	r3, [pc, #32]	; (8021d08 <HAL_TIM_Base_MspInit+0x118>)
 8021ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021cea:	4a07      	ldr	r2, [pc, #28]	; (8021d08 <HAL_TIM_Base_MspInit+0x118>)
 8021cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8021cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8021cf2:	4b05      	ldr	r3, [pc, #20]	; (8021d08 <HAL_TIM_Base_MspInit+0x118>)
 8021cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8021cfa:	60fb      	str	r3, [r7, #12]
 8021cfc:	68fb      	ldr	r3, [r7, #12]
}
 8021cfe:	bf00      	nop
 8021d00:	3720      	adds	r7, #32
 8021d02:	46bd      	mov	sp, r7
 8021d04:	bd80      	pop	{r7, pc}
 8021d06:	bf00      	nop
 8021d08:	40023800 	.word	0x40023800
 8021d0c:	40000c00 	.word	0x40000c00
 8021d10:	40001000 	.word	0x40001000
 8021d14:	40001400 	.word	0x40001400
 8021d18:	40014800 	.word	0x40014800

08021d1c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8021d1c:	b580      	push	{r7, lr}
 8021d1e:	b08c      	sub	sp, #48	; 0x30
 8021d20:	af00      	add	r7, sp, #0
 8021d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021d24:	f107 031c 	add.w	r3, r7, #28
 8021d28:	2200      	movs	r2, #0
 8021d2a:	601a      	str	r2, [r3, #0]
 8021d2c:	605a      	str	r2, [r3, #4]
 8021d2e:	609a      	str	r2, [r3, #8]
 8021d30:	60da      	str	r2, [r3, #12]
 8021d32:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8021d34:	687b      	ldr	r3, [r7, #4]
 8021d36:	681b      	ldr	r3, [r3, #0]
 8021d38:	4a32      	ldr	r2, [pc, #200]	; (8021e04 <HAL_TIM_Encoder_MspInit+0xe8>)
 8021d3a:	4293      	cmp	r3, r2
 8021d3c:	d12c      	bne.n	8021d98 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8021d3e:	2300      	movs	r3, #0
 8021d40:	61bb      	str	r3, [r7, #24]
 8021d42:	4b31      	ldr	r3, [pc, #196]	; (8021e08 <HAL_TIM_Encoder_MspInit+0xec>)
 8021d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021d46:	4a30      	ldr	r2, [pc, #192]	; (8021e08 <HAL_TIM_Encoder_MspInit+0xec>)
 8021d48:	f043 0304 	orr.w	r3, r3, #4
 8021d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8021d4e:	4b2e      	ldr	r3, [pc, #184]	; (8021e08 <HAL_TIM_Encoder_MspInit+0xec>)
 8021d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021d52:	f003 0304 	and.w	r3, r3, #4
 8021d56:	61bb      	str	r3, [r7, #24]
 8021d58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8021d5a:	2300      	movs	r3, #0
 8021d5c:	617b      	str	r3, [r7, #20]
 8021d5e:	4b2a      	ldr	r3, [pc, #168]	; (8021e08 <HAL_TIM_Encoder_MspInit+0xec>)
 8021d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021d62:	4a29      	ldr	r2, [pc, #164]	; (8021e08 <HAL_TIM_Encoder_MspInit+0xec>)
 8021d64:	f043 0302 	orr.w	r3, r3, #2
 8021d68:	6313      	str	r3, [r2, #48]	; 0x30
 8021d6a:	4b27      	ldr	r3, [pc, #156]	; (8021e08 <HAL_TIM_Encoder_MspInit+0xec>)
 8021d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021d6e:	f003 0302 	and.w	r3, r3, #2
 8021d72:	617b      	str	r3, [r7, #20]
 8021d74:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8021d76:	23c0      	movs	r3, #192	; 0xc0
 8021d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021d7a:	2302      	movs	r3, #2
 8021d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021d7e:	2300      	movs	r3, #0
 8021d80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021d82:	2300      	movs	r3, #0
 8021d84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8021d86:	2302      	movs	r3, #2
 8021d88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021d8a:	f107 031c 	add.w	r3, r7, #28
 8021d8e:	4619      	mov	r1, r3
 8021d90:	481e      	ldr	r0, [pc, #120]	; (8021e0c <HAL_TIM_Encoder_MspInit+0xf0>)
 8021d92:	f001 fbaf 	bl	80234f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8021d96:	e030      	b.n	8021dfa <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8021d98:	687b      	ldr	r3, [r7, #4]
 8021d9a:	681b      	ldr	r3, [r3, #0]
 8021d9c:	4a1c      	ldr	r2, [pc, #112]	; (8021e10 <HAL_TIM_Encoder_MspInit+0xf4>)
 8021d9e:	4293      	cmp	r3, r2
 8021da0:	d12b      	bne.n	8021dfa <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8021da2:	2300      	movs	r3, #0
 8021da4:	613b      	str	r3, [r7, #16]
 8021da6:	4b18      	ldr	r3, [pc, #96]	; (8021e08 <HAL_TIM_Encoder_MspInit+0xec>)
 8021da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021daa:	4a17      	ldr	r2, [pc, #92]	; (8021e08 <HAL_TIM_Encoder_MspInit+0xec>)
 8021dac:	f043 0302 	orr.w	r3, r3, #2
 8021db0:	6453      	str	r3, [r2, #68]	; 0x44
 8021db2:	4b15      	ldr	r3, [pc, #84]	; (8021e08 <HAL_TIM_Encoder_MspInit+0xec>)
 8021db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021db6:	f003 0302 	and.w	r3, r3, #2
 8021dba:	613b      	str	r3, [r7, #16]
 8021dbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021dbe:	2300      	movs	r3, #0
 8021dc0:	60fb      	str	r3, [r7, #12]
 8021dc2:	4b11      	ldr	r3, [pc, #68]	; (8021e08 <HAL_TIM_Encoder_MspInit+0xec>)
 8021dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021dc6:	4a10      	ldr	r2, [pc, #64]	; (8021e08 <HAL_TIM_Encoder_MspInit+0xec>)
 8021dc8:	f043 0304 	orr.w	r3, r3, #4
 8021dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8021dce:	4b0e      	ldr	r3, [pc, #56]	; (8021e08 <HAL_TIM_Encoder_MspInit+0xec>)
 8021dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021dd2:	f003 0304 	and.w	r3, r3, #4
 8021dd6:	60fb      	str	r3, [r7, #12]
 8021dd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8021dda:	23c0      	movs	r3, #192	; 0xc0
 8021ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021dde:	2302      	movs	r3, #2
 8021de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021de2:	2300      	movs	r3, #0
 8021de4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021de6:	2300      	movs	r3, #0
 8021de8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8021dea:	2303      	movs	r3, #3
 8021dec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021dee:	f107 031c 	add.w	r3, r7, #28
 8021df2:	4619      	mov	r1, r3
 8021df4:	4807      	ldr	r0, [pc, #28]	; (8021e14 <HAL_TIM_Encoder_MspInit+0xf8>)
 8021df6:	f001 fb7d 	bl	80234f4 <HAL_GPIO_Init>
}
 8021dfa:	bf00      	nop
 8021dfc:	3730      	adds	r7, #48	; 0x30
 8021dfe:	46bd      	mov	sp, r7
 8021e00:	bd80      	pop	{r7, pc}
 8021e02:	bf00      	nop
 8021e04:	40000800 	.word	0x40000800
 8021e08:	40023800 	.word	0x40023800
 8021e0c:	40020400 	.word	0x40020400
 8021e10:	40010400 	.word	0x40010400
 8021e14:	40020800 	.word	0x40020800

08021e18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8021e18:	b580      	push	{r7, lr}
 8021e1a:	b08c      	sub	sp, #48	; 0x30
 8021e1c:	af00      	add	r7, sp, #0
 8021e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021e20:	f107 031c 	add.w	r3, r7, #28
 8021e24:	2200      	movs	r2, #0
 8021e26:	601a      	str	r2, [r3, #0]
 8021e28:	605a      	str	r2, [r3, #4]
 8021e2a:	609a      	str	r2, [r3, #8]
 8021e2c:	60da      	str	r2, [r3, #12]
 8021e2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8021e30:	687b      	ldr	r3, [r7, #4]
 8021e32:	681b      	ldr	r3, [r3, #0]
 8021e34:	4a59      	ldr	r2, [pc, #356]	; (8021f9c <HAL_TIM_MspPostInit+0x184>)
 8021e36:	4293      	cmp	r3, r2
 8021e38:	d11f      	bne.n	8021e7a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021e3a:	2300      	movs	r3, #0
 8021e3c:	61bb      	str	r3, [r7, #24]
 8021e3e:	4b58      	ldr	r3, [pc, #352]	; (8021fa0 <HAL_TIM_MspPostInit+0x188>)
 8021e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021e42:	4a57      	ldr	r2, [pc, #348]	; (8021fa0 <HAL_TIM_MspPostInit+0x188>)
 8021e44:	f043 0301 	orr.w	r3, r3, #1
 8021e48:	6313      	str	r3, [r2, #48]	; 0x30
 8021e4a:	4b55      	ldr	r3, [pc, #340]	; (8021fa0 <HAL_TIM_MspPostInit+0x188>)
 8021e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021e4e:	f003 0301 	and.w	r3, r3, #1
 8021e52:	61bb      	str	r3, [r7, #24]
 8021e54:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8021e56:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8021e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021e5c:	2302      	movs	r3, #2
 8021e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021e60:	2300      	movs	r3, #0
 8021e62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021e64:	2300      	movs	r3, #0
 8021e66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8021e68:	2301      	movs	r3, #1
 8021e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021e6c:	f107 031c 	add.w	r3, r7, #28
 8021e70:	4619      	mov	r1, r3
 8021e72:	484c      	ldr	r0, [pc, #304]	; (8021fa4 <HAL_TIM_MspPostInit+0x18c>)
 8021e74:	f001 fb3e 	bl	80234f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8021e78:	e08b      	b.n	8021f92 <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM3)
 8021e7a:	687b      	ldr	r3, [r7, #4]
 8021e7c:	681b      	ldr	r3, [r3, #0]
 8021e7e:	4a4a      	ldr	r2, [pc, #296]	; (8021fa8 <HAL_TIM_MspPostInit+0x190>)
 8021e80:	4293      	cmp	r3, r2
 8021e82:	d13d      	bne.n	8021f00 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021e84:	2300      	movs	r3, #0
 8021e86:	617b      	str	r3, [r7, #20]
 8021e88:	4b45      	ldr	r3, [pc, #276]	; (8021fa0 <HAL_TIM_MspPostInit+0x188>)
 8021e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021e8c:	4a44      	ldr	r2, [pc, #272]	; (8021fa0 <HAL_TIM_MspPostInit+0x188>)
 8021e8e:	f043 0304 	orr.w	r3, r3, #4
 8021e92:	6313      	str	r3, [r2, #48]	; 0x30
 8021e94:	4b42      	ldr	r3, [pc, #264]	; (8021fa0 <HAL_TIM_MspPostInit+0x188>)
 8021e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021e98:	f003 0304 	and.w	r3, r3, #4
 8021e9c:	617b      	str	r3, [r7, #20]
 8021e9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8021ea0:	2300      	movs	r3, #0
 8021ea2:	613b      	str	r3, [r7, #16]
 8021ea4:	4b3e      	ldr	r3, [pc, #248]	; (8021fa0 <HAL_TIM_MspPostInit+0x188>)
 8021ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021ea8:	4a3d      	ldr	r2, [pc, #244]	; (8021fa0 <HAL_TIM_MspPostInit+0x188>)
 8021eaa:	f043 0302 	orr.w	r3, r3, #2
 8021eae:	6313      	str	r3, [r2, #48]	; 0x30
 8021eb0:	4b3b      	ldr	r3, [pc, #236]	; (8021fa0 <HAL_TIM_MspPostInit+0x188>)
 8021eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021eb4:	f003 0302 	and.w	r3, r3, #2
 8021eb8:	613b      	str	r3, [r7, #16]
 8021eba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8021ebc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8021ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021ec2:	2302      	movs	r3, #2
 8021ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021ec6:	2300      	movs	r3, #0
 8021ec8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021eca:	2300      	movs	r3, #0
 8021ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8021ece:	2302      	movs	r3, #2
 8021ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021ed2:	f107 031c 	add.w	r3, r7, #28
 8021ed6:	4619      	mov	r1, r3
 8021ed8:	4834      	ldr	r0, [pc, #208]	; (8021fac <HAL_TIM_MspPostInit+0x194>)
 8021eda:	f001 fb0b 	bl	80234f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8021ede:	2330      	movs	r3, #48	; 0x30
 8021ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021ee2:	2302      	movs	r3, #2
 8021ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021ee6:	2300      	movs	r3, #0
 8021ee8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021eea:	2300      	movs	r3, #0
 8021eec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8021eee:	2302      	movs	r3, #2
 8021ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021ef2:	f107 031c 	add.w	r3, r7, #28
 8021ef6:	4619      	mov	r1, r3
 8021ef8:	482d      	ldr	r0, [pc, #180]	; (8021fb0 <HAL_TIM_MspPostInit+0x198>)
 8021efa:	f001 fafb 	bl	80234f4 <HAL_GPIO_Init>
}
 8021efe:	e048      	b.n	8021f92 <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM11)
 8021f00:	687b      	ldr	r3, [r7, #4]
 8021f02:	681b      	ldr	r3, [r3, #0]
 8021f04:	4a2b      	ldr	r2, [pc, #172]	; (8021fb4 <HAL_TIM_MspPostInit+0x19c>)
 8021f06:	4293      	cmp	r3, r2
 8021f08:	d11f      	bne.n	8021f4a <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8021f0a:	2300      	movs	r3, #0
 8021f0c:	60fb      	str	r3, [r7, #12]
 8021f0e:	4b24      	ldr	r3, [pc, #144]	; (8021fa0 <HAL_TIM_MspPostInit+0x188>)
 8021f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021f12:	4a23      	ldr	r2, [pc, #140]	; (8021fa0 <HAL_TIM_MspPostInit+0x188>)
 8021f14:	f043 0302 	orr.w	r3, r3, #2
 8021f18:	6313      	str	r3, [r2, #48]	; 0x30
 8021f1a:	4b21      	ldr	r3, [pc, #132]	; (8021fa0 <HAL_TIM_MspPostInit+0x188>)
 8021f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021f1e:	f003 0302 	and.w	r3, r3, #2
 8021f22:	60fb      	str	r3, [r7, #12]
 8021f24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8021f26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021f2c:	2302      	movs	r3, #2
 8021f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021f30:	2300      	movs	r3, #0
 8021f32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021f34:	2300      	movs	r3, #0
 8021f36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8021f38:	2303      	movs	r3, #3
 8021f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021f3c:	f107 031c 	add.w	r3, r7, #28
 8021f40:	4619      	mov	r1, r3
 8021f42:	481b      	ldr	r0, [pc, #108]	; (8021fb0 <HAL_TIM_MspPostInit+0x198>)
 8021f44:	f001 fad6 	bl	80234f4 <HAL_GPIO_Init>
}
 8021f48:	e023      	b.n	8021f92 <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM12)
 8021f4a:	687b      	ldr	r3, [r7, #4]
 8021f4c:	681b      	ldr	r3, [r3, #0]
 8021f4e:	4a1a      	ldr	r2, [pc, #104]	; (8021fb8 <HAL_TIM_MspPostInit+0x1a0>)
 8021f50:	4293      	cmp	r3, r2
 8021f52:	d11e      	bne.n	8021f92 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8021f54:	2300      	movs	r3, #0
 8021f56:	60bb      	str	r3, [r7, #8]
 8021f58:	4b11      	ldr	r3, [pc, #68]	; (8021fa0 <HAL_TIM_MspPostInit+0x188>)
 8021f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021f5c:	4a10      	ldr	r2, [pc, #64]	; (8021fa0 <HAL_TIM_MspPostInit+0x188>)
 8021f5e:	f043 0302 	orr.w	r3, r3, #2
 8021f62:	6313      	str	r3, [r2, #48]	; 0x30
 8021f64:	4b0e      	ldr	r3, [pc, #56]	; (8021fa0 <HAL_TIM_MspPostInit+0x188>)
 8021f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021f68:	f003 0302 	and.w	r3, r3, #2
 8021f6c:	60bb      	str	r3, [r7, #8]
 8021f6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8021f70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8021f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021f76:	2302      	movs	r3, #2
 8021f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021f7a:	2300      	movs	r3, #0
 8021f7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021f7e:	2300      	movs	r3, #0
 8021f80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8021f82:	2309      	movs	r3, #9
 8021f84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021f86:	f107 031c 	add.w	r3, r7, #28
 8021f8a:	4619      	mov	r1, r3
 8021f8c:	4808      	ldr	r0, [pc, #32]	; (8021fb0 <HAL_TIM_MspPostInit+0x198>)
 8021f8e:	f001 fab1 	bl	80234f4 <HAL_GPIO_Init>
}
 8021f92:	bf00      	nop
 8021f94:	3730      	adds	r7, #48	; 0x30
 8021f96:	46bd      	mov	sp, r7
 8021f98:	bd80      	pop	{r7, pc}
 8021f9a:	bf00      	nop
 8021f9c:	40010000 	.word	0x40010000
 8021fa0:	40023800 	.word	0x40023800
 8021fa4:	40020000 	.word	0x40020000
 8021fa8:	40000400 	.word	0x40000400
 8021fac:	40020800 	.word	0x40020800
 8021fb0:	40020400 	.word	0x40020400
 8021fb4:	40014800 	.word	0x40014800
 8021fb8:	40001800 	.word	0x40001800

08021fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8021fbc:	b480      	push	{r7}
 8021fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8021fc0:	e7fe      	b.n	8021fc0 <NMI_Handler+0x4>

08021fc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8021fc2:	b480      	push	{r7}
 8021fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8021fc6:	e7fe      	b.n	8021fc6 <HardFault_Handler+0x4>

08021fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8021fc8:	b480      	push	{r7}
 8021fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8021fcc:	e7fe      	b.n	8021fcc <MemManage_Handler+0x4>

08021fce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8021fce:	b480      	push	{r7}
 8021fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8021fd2:	e7fe      	b.n	8021fd2 <BusFault_Handler+0x4>

08021fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8021fd4:	b480      	push	{r7}
 8021fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8021fd8:	e7fe      	b.n	8021fd8 <UsageFault_Handler+0x4>

08021fda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8021fda:	b480      	push	{r7}
 8021fdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8021fde:	bf00      	nop
 8021fe0:	46bd      	mov	sp, r7
 8021fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fe6:	4770      	bx	lr

08021fe8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8021fe8:	b480      	push	{r7}
 8021fea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8021fec:	bf00      	nop
 8021fee:	46bd      	mov	sp, r7
 8021ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ff4:	4770      	bx	lr

08021ff6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8021ff6:	b480      	push	{r7}
 8021ff8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8021ffa:	bf00      	nop
 8021ffc:	46bd      	mov	sp, r7
 8021ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022002:	4770      	bx	lr

08022004 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8022004:	b580      	push	{r7, lr}
 8022006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8022008:	f000 f9be 	bl	8022388 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 802200c:	bf00      	nop
 802200e:	bd80      	pop	{r7, pc}

08022010 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8022010:	b580      	push	{r7, lr}
 8022012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8022014:	4802      	ldr	r0, [pc, #8]	; (8022020 <TIM2_IRQHandler+0x10>)
 8022016:	f002 fb2f 	bl	8024678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 802201a:	bf00      	nop
 802201c:	bd80      	pop	{r7, pc}
 802201e:	bf00      	nop
 8022020:	200007a4 	.word	0x200007a4

08022024 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8022024:	b580      	push	{r7, lr}
 8022026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8022028:	4802      	ldr	r0, [pc, #8]	; (8022034 <TIM5_IRQHandler+0x10>)
 802202a:	f002 fb25 	bl	8024678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 802202e:	bf00      	nop
 8022030:	bd80      	pop	{r7, pc}
 8022032:	bf00      	nop
 8022034:	20000564 	.word	0x20000564

08022038 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8022038:	b580      	push	{r7, lr}
 802203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 802203c:	4802      	ldr	r0, [pc, #8]	; (8022048 <TIM6_DAC_IRQHandler+0x10>)
 802203e:	f002 fb1b 	bl	8024678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8022042:	bf00      	nop
 8022044:	bd80      	pop	{r7, pc}
 8022046:	bf00      	nop
 8022048:	20000724 	.word	0x20000724

0802204c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 802204c:	b580      	push	{r7, lr}
 802204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8022050:	4802      	ldr	r0, [pc, #8]	; (802205c <TIM7_IRQHandler+0x10>)
 8022052:	f002 fb11 	bl	8024678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8022056:	bf00      	nop
 8022058:	bd80      	pop	{r7, pc}
 802205a:	bf00      	nop
 802205c:	20000824 	.word	0x20000824

08022060 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8022060:	b580      	push	{r7, lr}
 8022062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8022064:	4802      	ldr	r0, [pc, #8]	; (8022070 <DMA2_Stream0_IRQHandler+0x10>)
 8022066:	f000 ffdd 	bl	8023024 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 802206a:	bf00      	nop
 802206c:	bd80      	pop	{r7, pc}
 802206e:	bf00      	nop
 8022070:	200006c4 	.word	0x200006c4

08022074 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8022074:	b480      	push	{r7}
 8022076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8022078:	4b08      	ldr	r3, [pc, #32]	; (802209c <SystemInit+0x28>)
 802207a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802207e:	4a07      	ldr	r2, [pc, #28]	; (802209c <SystemInit+0x28>)
 8022080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8022084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8022088:	4b04      	ldr	r3, [pc, #16]	; (802209c <SystemInit+0x28>)
 802208a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 802208e:	609a      	str	r2, [r3, #8]
#endif
}
 8022090:	bf00      	nop
 8022092:	46bd      	mov	sp, r7
 8022094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022098:	4770      	bx	lr
 802209a:	bf00      	nop
 802209c:	e000ed00 	.word	0xe000ed00

080220a0 <_ZN4TestC1EP3LedP10LineSensor>:
#include "test.hpp"

#ifdef TEST_MODE
Test::Test(Led *led,
 80220a0:	b480      	push	{r7}
 80220a2:	b085      	sub	sp, #20
 80220a4:	af00      	add	r7, sp, #0
 80220a6:	60f8      	str	r0, [r7, #12]
 80220a8:	60b9      	str	r1, [r7, #8]
 80220aa:	607a      	str	r2, [r7, #4]
           LineSensor *line_sensor)
{
    led_ = led;
 80220ac:	68fb      	ldr	r3, [r7, #12]
 80220ae:	68ba      	ldr	r2, [r7, #8]
 80220b0:	601a      	str	r2, [r3, #0]
    line_sensor_ = line_sensor;
 80220b2:	68fb      	ldr	r3, [r7, #12]
 80220b4:	687a      	ldr	r2, [r7, #4]
 80220b6:	605a      	str	r2, [r3, #4]
}
 80220b8:	68fb      	ldr	r3, [r7, #12]
 80220ba:	4618      	mov	r0, r3
 80220bc:	3714      	adds	r7, #20
 80220be:	46bd      	mov	sp, r7
 80220c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220c4:	4770      	bx	lr
	...

080220c8 <_ZN4Test4InitEv>:

void Test::Init()
{
 80220c8:	b580      	push	{r7, lr}
 80220ca:	b082      	sub	sp, #8
 80220cc:	af00      	add	r7, sp, #0
 80220ce:	6078      	str	r0, [r7, #4]
    line_sensor_->Init();
 80220d0:	687b      	ldr	r3, [r7, #4]
 80220d2:	685b      	ldr	r3, [r3, #4]
 80220d4:	4618      	mov	r0, r3
 80220d6:	f7fe fab7 	bl	8020648 <_ZN10LineSensor4InitEv>

    led_->Blink(5, 'Y', 'M');
 80220da:	687b      	ldr	r3, [r7, #4]
 80220dc:	6818      	ldr	r0, [r3, #0]
 80220de:	234d      	movs	r3, #77	; 0x4d
 80220e0:	2259      	movs	r2, #89	; 0x59
 80220e2:	2105      	movs	r1, #5
 80220e4:	f7fe fa42 	bl	802056c <_ZN3Led5BlinkEhcc>
    led_->ColorOrder('X');
 80220e8:	687b      	ldr	r3, [r7, #4]
 80220ea:	681b      	ldr	r3, [r3, #0]
 80220ec:	2158      	movs	r1, #88	; 0x58
 80220ee:	4618      	mov	r0, r3
 80220f0:	f7fe f960 	bl	80203b4 <_ZN3Led10ColorOrderEc>
    HAL_TIM_Base_Start_IT(&htim7);
 80220f4:	4804      	ldr	r0, [pc, #16]	; (8022108 <_ZN4Test4InitEv+0x40>)
 80220f6:	f002 f9a0 	bl	802443a <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim6);
 80220fa:	4804      	ldr	r0, [pc, #16]	; (802210c <_ZN4Test4InitEv+0x44>)
 80220fc:	f002 f99d 	bl	802443a <HAL_TIM_Base_Start_IT>
}
 8022100:	bf00      	nop
 8022102:	3708      	adds	r7, #8
 8022104:	46bd      	mov	sp, r7
 8022106:	bd80      	pop	{r7, pc}
 8022108:	20000824 	.word	0x20000824
 802210c:	20000724 	.word	0x20000724

08022110 <_ZN4Test6Timer7Ev>:

void Test::Timer7()
{
 8022110:	b580      	push	{r7, lr}
 8022112:	b082      	sub	sp, #8
 8022114:	af00      	add	r7, sp, #0
 8022116:	6078      	str	r0, [r7, #4]
    line_sensor_->StoreConsecutiveBuff();
 8022118:	687b      	ldr	r3, [r7, #4]
 802211a:	685b      	ldr	r3, [r3, #4]
 802211c:	4618      	mov	r0, r3
 802211e:	f7fe facd 	bl	80206bc <_ZN10LineSensor20StoreConsecutiveBuffEv>
}
 8022122:	bf00      	nop
 8022124:	3708      	adds	r7, #8
 8022126:	46bd      	mov	sp, r7
 8022128:	bd80      	pop	{r7, pc}

0802212a <_ZN4Test6Timer6Ev>:

void Test::Timer6()
{
 802212a:	b580      	push	{r7, lr}
 802212c:	b082      	sub	sp, #8
 802212e:	af00      	add	r7, sp, #0
 8022130:	6078      	str	r0, [r7, #4]
    Line();
 8022132:	6878      	ldr	r0, [r7, #4]
 8022134:	f000 f804 	bl	8022140 <_ZN4Test4LineEv>
}
 8022138:	bf00      	nop
 802213a:	3708      	adds	r7, #8
 802213c:	46bd      	mov	sp, r7
 802213e:	bd80      	pop	{r7, pc}

08022140 <_ZN4Test4LineEv>:

void Test::Line()
{
 8022140:	b580      	push	{r7, lr}
 8022142:	b082      	sub	sp, #8
 8022144:	af00      	add	r7, sp, #0
 8022146:	6078      	str	r0, [r7, #4]
    line_sensor_->New();
 8022148:	687b      	ldr	r3, [r7, #4]
 802214a:	685b      	ldr	r3, [r3, #4]
 802214c:	4618      	mov	r0, r3
 802214e:	f7fe fbbd 	bl	80208cc <_ZN10LineSensor3NewEv>
    line_sensor_->MonitorArrays();
 8022152:	687b      	ldr	r3, [r7, #4]
 8022154:	685b      	ldr	r3, [r3, #4]
 8022156:	4618      	mov	r0, r3
 8022158:	f7fe fc74 	bl	8020a44 <_ZN10LineSensor13MonitorArraysEv>
    //g_line_diff = line_sensor_->LeftRightDifference();
    //g_line_emer = line_sensor_->GetEmergencyStopFlag();
    //g_line_calib = line_sensor_->CheckCalibration();
}
 802215c:	bf00      	nop
 802215e:	3708      	adds	r7, #8
 8022160:	46bd      	mov	sp, r7
 8022162:	bd80      	pop	{r7, pc}

08022164 <_ZN15VelocityControlC1EP7Encoder>:
#include "velocity_control.hpp"
#include "declare_extern.h"

VelocityControl::VelocityControl(Encoder *encoder) : integral_error_(0)
 8022164:	b480      	push	{r7}
 8022166:	b083      	sub	sp, #12
 8022168:	af00      	add	r7, sp, #0
 802216a:	6078      	str	r0, [r7, #4]
 802216c:	6039      	str	r1, [r7, #0]
 802216e:	687b      	ldr	r3, [r7, #4]
 8022170:	f04f 0200 	mov.w	r2, #0
 8022174:	601a      	str	r2, [r3, #0]
{
    encoder_ = encoder;
 8022176:	687b      	ldr	r3, [r7, #4]
 8022178:	683a      	ldr	r2, [r7, #0]
 802217a:	605a      	str	r2, [r3, #4]
}
 802217c:	687b      	ldr	r3, [r7, #4]
 802217e:	4618      	mov	r0, r3
 8022180:	370c      	adds	r7, #12
 8022182:	46bd      	mov	sp, r7
 8022184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022188:	4770      	bx	lr
	...

0802218c <Init>:
    &line_sensor
);
#endif // TEST_MODE

void Init()
{
 802218c:	b580      	push	{r7, lr}
 802218e:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Init();
#else // TEST_MODE
    test.Init();
 8022190:	4802      	ldr	r0, [pc, #8]	; (802219c <Init+0x10>)
 8022192:	f7ff ff99 	bl	80220c8 <_ZN4Test4InitEv>
#endif // TEST_MODE
}
 8022196:	bf00      	nop
 8022198:	bd80      	pop	{r7, pc}
 802219a:	bf00      	nop
 802219c:	20000488 	.word	0x20000488

080221a0 <InterruptTim7>:

void InterruptTim7()
{
 80221a0:	b580      	push	{r7, lr}
 80221a2:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Timer7();
#else // TEST_MODE
    test.Timer7();
 80221a4:	4804      	ldr	r0, [pc, #16]	; (80221b8 <InterruptTim7+0x18>)
 80221a6:	f7ff ffb3 	bl	8022110 <_ZN4Test6Timer7Ev>
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim7++;
 80221aa:	4b04      	ldr	r3, [pc, #16]	; (80221bc <InterruptTim7+0x1c>)
 80221ac:	681b      	ldr	r3, [r3, #0]
 80221ae:	3301      	adds	r3, #1
 80221b0:	4a02      	ldr	r2, [pc, #8]	; (80221bc <InterruptTim7+0x1c>)
 80221b2:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 80221b4:	bf00      	nop
 80221b6:	bd80      	pop	{r7, pc}
 80221b8:	20000488 	.word	0x20000488
 80221bc:	200001b8 	.word	0x200001b8

080221c0 <InterruptTim6>:

void InterruptTim6()
{
 80221c0:	b580      	push	{r7, lr}
 80221c2:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.RunMode();
#else // TEST_MODE
    test.Timer6();
 80221c4:	4804      	ldr	r0, [pc, #16]	; (80221d8 <InterruptTim6+0x18>)
 80221c6:	f7ff ffb0 	bl	802212a <_ZN4Test6Timer6Ev>
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim6++;
 80221ca:	4b04      	ldr	r3, [pc, #16]	; (80221dc <InterruptTim6+0x1c>)
 80221cc:	681b      	ldr	r3, [r3, #0]
 80221ce:	3301      	adds	r3, #1
 80221d0:	4a02      	ldr	r2, [pc, #8]	; (80221dc <InterruptTim6+0x1c>)
 80221d2:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 80221d4:	bf00      	nop
 80221d6:	bd80      	pop	{r7, pc}
 80221d8:	20000488 	.word	0x20000488
 80221dc:	200001bc 	.word	0x200001bc

080221e0 <InterruptTim2>:

void InterruptTim2()
{
 80221e0:	b480      	push	{r7}
 80221e2:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.UpdateRunMode();
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim2++;
 80221e4:	4b04      	ldr	r3, [pc, #16]	; (80221f8 <InterruptTim2+0x18>)
 80221e6:	681b      	ldr	r3, [r3, #0]
 80221e8:	3301      	adds	r3, #1
 80221ea:	4a03      	ldr	r2, [pc, #12]	; (80221f8 <InterruptTim2+0x18>)
 80221ec:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
 80221ee:	bf00      	nop
 80221f0:	46bd      	mov	sp, r7
 80221f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221f6:	4770      	bx	lr
 80221f8:	200001c0 	.word	0x200001c0

080221fc <_Z41__static_initialization_and_destruction_0ii>:
 80221fc:	b580      	push	{r7, lr}
 80221fe:	b082      	sub	sp, #8
 8022200:	af00      	add	r7, sp, #0
 8022202:	6078      	str	r0, [r7, #4]
 8022204:	6039      	str	r1, [r7, #0]
 8022206:	687b      	ldr	r3, [r7, #4]
 8022208:	2b01      	cmp	r3, #1
 802220a:	d123      	bne.n	8022254 <_Z41__static_initialization_and_destruction_0ii+0x58>
 802220c:	683b      	ldr	r3, [r7, #0]
 802220e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022212:	4293      	cmp	r3, r2
 8022214:	d11e      	bne.n	8022254 <_Z41__static_initialization_and_destruction_0ii+0x58>
Encoder encoder;
 8022216:	4811      	ldr	r0, [pc, #68]	; (802225c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8022218:	f7fe f892 	bl	8020340 <_ZN7EncoderC1Ev>
Iim42652 iim_42652;
 802221c:	4810      	ldr	r0, [pc, #64]	; (8022260 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 802221e:	f7fe f8a6 	bl	802036e <_ZN8Iim42652C1Ev>
Led led;
 8022222:	4810      	ldr	r0, [pc, #64]	; (8022264 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8022224:	f7fe f8b4 	bl	8020390 <_ZN3LedC1Ev>
LineSensor line_sensor;
 8022228:	480f      	ldr	r0, [pc, #60]	; (8022268 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 802222a:	f7fe f9cc 	bl	80205c6 <_ZN10LineSensorC1Ev>
LineTrace line_trace(&line_sensor);
 802222e:	490e      	ldr	r1, [pc, #56]	; (8022268 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8022230:	480e      	ldr	r0, [pc, #56]	; (802226c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8022232:	f7fe fc25 	bl	8020a80 <_ZN9LineTraceC1EP10LineSensor>
Logger logger;
 8022236:	480e      	ldr	r0, [pc, #56]	; (8022270 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8022238:	f7fe fc36 	bl	8020aa8 <_ZN6LoggerC1Ev>
SideSensor side_sensor;
 802223c:	480d      	ldr	r0, [pc, #52]	; (8022274 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 802223e:	f7ff fb1f 	bl	8021880 <_ZN10SideSensorC1Ev>
VelocityControl velocity_control(&encoder);
 8022242:	4906      	ldr	r1, [pc, #24]	; (802225c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8022244:	480c      	ldr	r0, [pc, #48]	; (8022278 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8022246:	f7ff ff8d 	bl	8022164 <_ZN15VelocityControlC1EP7Encoder>
);
 802224a:	4a07      	ldr	r2, [pc, #28]	; (8022268 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 802224c:	4905      	ldr	r1, [pc, #20]	; (8022264 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 802224e:	480b      	ldr	r0, [pc, #44]	; (802227c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8022250:	f7ff ff26 	bl	80220a0 <_ZN4TestC1EP3LedP10LineSensor>
 8022254:	bf00      	nop
 8022256:	3708      	adds	r7, #8
 8022258:	46bd      	mov	sp, r7
 802225a:	bd80      	pop	{r7, pc}
 802225c:	200001c4 	.word	0x200001c4
 8022260:	200001d0 	.word	0x200001d0
 8022264:	200001d8 	.word	0x200001d8
 8022268:	200001dc 	.word	0x200001dc
 802226c:	20000368 	.word	0x20000368
 8022270:	20000370 	.word	0x20000370
 8022274:	20000478 	.word	0x20000478
 8022278:	20000480 	.word	0x20000480
 802227c:	20000488 	.word	0x20000488

08022280 <_GLOBAL__sub_I_encoder>:
 8022280:	b580      	push	{r7, lr}
 8022282:	af00      	add	r7, sp, #0
 8022284:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8022288:	2001      	movs	r0, #1
 802228a:	f7ff ffb7 	bl	80221fc <_Z41__static_initialization_and_destruction_0ii>
 802228e:	bd80      	pop	{r7, pc}

08022290 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8022290:	f8df d034 	ldr.w	sp, [pc, #52]	; 80222c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8022294:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8022296:	e003      	b.n	80222a0 <LoopCopyDataInit>

08022298 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8022298:	4b0c      	ldr	r3, [pc, #48]	; (80222cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 802229a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 802229c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 802229e:	3104      	adds	r1, #4

080222a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80222a0:	480b      	ldr	r0, [pc, #44]	; (80222d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80222a2:	4b0c      	ldr	r3, [pc, #48]	; (80222d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80222a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80222a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80222a8:	d3f6      	bcc.n	8022298 <CopyDataInit>
  ldr  r2, =_sbss
 80222aa:	4a0b      	ldr	r2, [pc, #44]	; (80222d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80222ac:	e002      	b.n	80222b4 <LoopFillZerobss>

080222ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80222ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80222b0:	f842 3b04 	str.w	r3, [r2], #4

080222b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80222b4:	4b09      	ldr	r3, [pc, #36]	; (80222dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80222b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80222b8:	d3f9      	bcc.n	80222ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80222ba:	f7ff fedb 	bl	8022074 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80222be:	f003 f87b 	bl	80253b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80222c2:	f7fe fc99 	bl	8020bf8 <main>
  bx  lr    
 80222c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80222c8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80222cc:	0802545c 	.word	0x0802545c
  ldr  r0, =_sdata
 80222d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80222d4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80222d8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80222dc:	20000868 	.word	0x20000868

080222e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80222e0:	e7fe      	b.n	80222e0 <ADC_IRQHandler>
	...

080222e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80222e4:	b580      	push	{r7, lr}
 80222e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80222e8:	4b0e      	ldr	r3, [pc, #56]	; (8022324 <HAL_Init+0x40>)
 80222ea:	681b      	ldr	r3, [r3, #0]
 80222ec:	4a0d      	ldr	r2, [pc, #52]	; (8022324 <HAL_Init+0x40>)
 80222ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80222f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80222f4:	4b0b      	ldr	r3, [pc, #44]	; (8022324 <HAL_Init+0x40>)
 80222f6:	681b      	ldr	r3, [r3, #0]
 80222f8:	4a0a      	ldr	r2, [pc, #40]	; (8022324 <HAL_Init+0x40>)
 80222fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80222fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8022300:	4b08      	ldr	r3, [pc, #32]	; (8022324 <HAL_Init+0x40>)
 8022302:	681b      	ldr	r3, [r3, #0]
 8022304:	4a07      	ldr	r2, [pc, #28]	; (8022324 <HAL_Init+0x40>)
 8022306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802230a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 802230c:	2003      	movs	r0, #3
 802230e:	f000 fd41 	bl	8022d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8022312:	2001      	movs	r0, #1
 8022314:	f000 f808 	bl	8022328 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8022318:	f7ff fad0 	bl	80218bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 802231c:	2300      	movs	r3, #0
}
 802231e:	4618      	mov	r0, r3
 8022320:	bd80      	pop	{r7, pc}
 8022322:	bf00      	nop
 8022324:	40023c00 	.word	0x40023c00

08022328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8022328:	b580      	push	{r7, lr}
 802232a:	b082      	sub	sp, #8
 802232c:	af00      	add	r7, sp, #0
 802232e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8022330:	4b12      	ldr	r3, [pc, #72]	; (802237c <HAL_InitTick+0x54>)
 8022332:	681a      	ldr	r2, [r3, #0]
 8022334:	4b12      	ldr	r3, [pc, #72]	; (8022380 <HAL_InitTick+0x58>)
 8022336:	781b      	ldrb	r3, [r3, #0]
 8022338:	4619      	mov	r1, r3
 802233a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802233e:	fbb3 f3f1 	udiv	r3, r3, r1
 8022342:	fbb2 f3f3 	udiv	r3, r2, r3
 8022346:	4618      	mov	r0, r3
 8022348:	f000 fd59 	bl	8022dfe <HAL_SYSTICK_Config>
 802234c:	4603      	mov	r3, r0
 802234e:	2b00      	cmp	r3, #0
 8022350:	d001      	beq.n	8022356 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8022352:	2301      	movs	r3, #1
 8022354:	e00e      	b.n	8022374 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8022356:	687b      	ldr	r3, [r7, #4]
 8022358:	2b0f      	cmp	r3, #15
 802235a:	d80a      	bhi.n	8022372 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 802235c:	2200      	movs	r2, #0
 802235e:	6879      	ldr	r1, [r7, #4]
 8022360:	f04f 30ff 	mov.w	r0, #4294967295
 8022364:	f000 fd21 	bl	8022daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8022368:	4a06      	ldr	r2, [pc, #24]	; (8022384 <HAL_InitTick+0x5c>)
 802236a:	687b      	ldr	r3, [r7, #4]
 802236c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 802236e:	2300      	movs	r3, #0
 8022370:	e000      	b.n	8022374 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8022372:	2301      	movs	r3, #1
}
 8022374:	4618      	mov	r0, r3
 8022376:	3708      	adds	r7, #8
 8022378:	46bd      	mov	sp, r7
 802237a:	bd80      	pop	{r7, pc}
 802237c:	20000000 	.word	0x20000000
 8022380:	20000008 	.word	0x20000008
 8022384:	20000004 	.word	0x20000004

08022388 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8022388:	b480      	push	{r7}
 802238a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 802238c:	4b06      	ldr	r3, [pc, #24]	; (80223a8 <HAL_IncTick+0x20>)
 802238e:	781b      	ldrb	r3, [r3, #0]
 8022390:	461a      	mov	r2, r3
 8022392:	4b06      	ldr	r3, [pc, #24]	; (80223ac <HAL_IncTick+0x24>)
 8022394:	681b      	ldr	r3, [r3, #0]
 8022396:	4413      	add	r3, r2
 8022398:	4a04      	ldr	r2, [pc, #16]	; (80223ac <HAL_IncTick+0x24>)
 802239a:	6013      	str	r3, [r2, #0]
}
 802239c:	bf00      	nop
 802239e:	46bd      	mov	sp, r7
 80223a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223a4:	4770      	bx	lr
 80223a6:	bf00      	nop
 80223a8:	20000008 	.word	0x20000008
 80223ac:	20000864 	.word	0x20000864

080223b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80223b0:	b480      	push	{r7}
 80223b2:	af00      	add	r7, sp, #0
  return uwTick;
 80223b4:	4b03      	ldr	r3, [pc, #12]	; (80223c4 <HAL_GetTick+0x14>)
 80223b6:	681b      	ldr	r3, [r3, #0]
}
 80223b8:	4618      	mov	r0, r3
 80223ba:	46bd      	mov	sp, r7
 80223bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223c0:	4770      	bx	lr
 80223c2:	bf00      	nop
 80223c4:	20000864 	.word	0x20000864

080223c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80223c8:	b580      	push	{r7, lr}
 80223ca:	b084      	sub	sp, #16
 80223cc:	af00      	add	r7, sp, #0
 80223ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80223d0:	f7ff ffee 	bl	80223b0 <HAL_GetTick>
 80223d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80223d6:	687b      	ldr	r3, [r7, #4]
 80223d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80223da:	68fb      	ldr	r3, [r7, #12]
 80223dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80223e0:	d005      	beq.n	80223ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80223e2:	4b09      	ldr	r3, [pc, #36]	; (8022408 <HAL_Delay+0x40>)
 80223e4:	781b      	ldrb	r3, [r3, #0]
 80223e6:	461a      	mov	r2, r3
 80223e8:	68fb      	ldr	r3, [r7, #12]
 80223ea:	4413      	add	r3, r2
 80223ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80223ee:	bf00      	nop
 80223f0:	f7ff ffde 	bl	80223b0 <HAL_GetTick>
 80223f4:	4602      	mov	r2, r0
 80223f6:	68bb      	ldr	r3, [r7, #8]
 80223f8:	1ad3      	subs	r3, r2, r3
 80223fa:	68fa      	ldr	r2, [r7, #12]
 80223fc:	429a      	cmp	r2, r3
 80223fe:	d8f7      	bhi.n	80223f0 <HAL_Delay+0x28>
  {
  }
}
 8022400:	bf00      	nop
 8022402:	3710      	adds	r7, #16
 8022404:	46bd      	mov	sp, r7
 8022406:	bd80      	pop	{r7, pc}
 8022408:	20000008 	.word	0x20000008

0802240c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 802240c:	b580      	push	{r7, lr}
 802240e:	b084      	sub	sp, #16
 8022410:	af00      	add	r7, sp, #0
 8022412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8022414:	2300      	movs	r3, #0
 8022416:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8022418:	687b      	ldr	r3, [r7, #4]
 802241a:	2b00      	cmp	r3, #0
 802241c:	d101      	bne.n	8022422 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 802241e:	2301      	movs	r3, #1
 8022420:	e033      	b.n	802248a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8022422:	687b      	ldr	r3, [r7, #4]
 8022424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022426:	2b00      	cmp	r3, #0
 8022428:	d109      	bne.n	802243e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 802242a:	6878      	ldr	r0, [r7, #4]
 802242c:	f7ff fa6e 	bl	802190c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8022430:	687b      	ldr	r3, [r7, #4]
 8022432:	2200      	movs	r2, #0
 8022434:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8022436:	687b      	ldr	r3, [r7, #4]
 8022438:	2200      	movs	r2, #0
 802243a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 802243e:	687b      	ldr	r3, [r7, #4]
 8022440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022442:	f003 0310 	and.w	r3, r3, #16
 8022446:	2b00      	cmp	r3, #0
 8022448:	d118      	bne.n	802247c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 802244a:	687b      	ldr	r3, [r7, #4]
 802244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802244e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8022452:	f023 0302 	bic.w	r3, r3, #2
 8022456:	f043 0202 	orr.w	r2, r3, #2
 802245a:	687b      	ldr	r3, [r7, #4]
 802245c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 802245e:	6878      	ldr	r0, [r7, #4]
 8022460:	f000 fa4a 	bl	80228f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8022464:	687b      	ldr	r3, [r7, #4]
 8022466:	2200      	movs	r2, #0
 8022468:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 802246a:	687b      	ldr	r3, [r7, #4]
 802246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802246e:	f023 0303 	bic.w	r3, r3, #3
 8022472:	f043 0201 	orr.w	r2, r3, #1
 8022476:	687b      	ldr	r3, [r7, #4]
 8022478:	641a      	str	r2, [r3, #64]	; 0x40
 802247a:	e001      	b.n	8022480 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 802247c:	2301      	movs	r3, #1
 802247e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8022480:	687b      	ldr	r3, [r7, #4]
 8022482:	2200      	movs	r2, #0
 8022484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8022488:	7bfb      	ldrb	r3, [r7, #15]
}
 802248a:	4618      	mov	r0, r3
 802248c:	3710      	adds	r7, #16
 802248e:	46bd      	mov	sp, r7
 8022490:	bd80      	pop	{r7, pc}
	...

08022494 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8022494:	b580      	push	{r7, lr}
 8022496:	b086      	sub	sp, #24
 8022498:	af00      	add	r7, sp, #0
 802249a:	60f8      	str	r0, [r7, #12]
 802249c:	60b9      	str	r1, [r7, #8]
 802249e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80224a0:	2300      	movs	r3, #0
 80224a2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80224a4:	68fb      	ldr	r3, [r7, #12]
 80224a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80224aa:	2b01      	cmp	r3, #1
 80224ac:	d101      	bne.n	80224b2 <HAL_ADC_Start_DMA+0x1e>
 80224ae:	2302      	movs	r3, #2
 80224b0:	e0cc      	b.n	802264c <HAL_ADC_Start_DMA+0x1b8>
 80224b2:	68fb      	ldr	r3, [r7, #12]
 80224b4:	2201      	movs	r2, #1
 80224b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80224ba:	68fb      	ldr	r3, [r7, #12]
 80224bc:	681b      	ldr	r3, [r3, #0]
 80224be:	689b      	ldr	r3, [r3, #8]
 80224c0:	f003 0301 	and.w	r3, r3, #1
 80224c4:	2b01      	cmp	r3, #1
 80224c6:	d018      	beq.n	80224fa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80224c8:	68fb      	ldr	r3, [r7, #12]
 80224ca:	681b      	ldr	r3, [r3, #0]
 80224cc:	689a      	ldr	r2, [r3, #8]
 80224ce:	68fb      	ldr	r3, [r7, #12]
 80224d0:	681b      	ldr	r3, [r3, #0]
 80224d2:	f042 0201 	orr.w	r2, r2, #1
 80224d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80224d8:	4b5e      	ldr	r3, [pc, #376]	; (8022654 <HAL_ADC_Start_DMA+0x1c0>)
 80224da:	681b      	ldr	r3, [r3, #0]
 80224dc:	4a5e      	ldr	r2, [pc, #376]	; (8022658 <HAL_ADC_Start_DMA+0x1c4>)
 80224de:	fba2 2303 	umull	r2, r3, r2, r3
 80224e2:	0c9a      	lsrs	r2, r3, #18
 80224e4:	4613      	mov	r3, r2
 80224e6:	005b      	lsls	r3, r3, #1
 80224e8:	4413      	add	r3, r2
 80224ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80224ec:	e002      	b.n	80224f4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80224ee:	693b      	ldr	r3, [r7, #16]
 80224f0:	3b01      	subs	r3, #1
 80224f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80224f4:	693b      	ldr	r3, [r7, #16]
 80224f6:	2b00      	cmp	r3, #0
 80224f8:	d1f9      	bne.n	80224ee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80224fa:	68fb      	ldr	r3, [r7, #12]
 80224fc:	681b      	ldr	r3, [r3, #0]
 80224fe:	689b      	ldr	r3, [r3, #8]
 8022500:	f003 0301 	and.w	r3, r3, #1
 8022504:	2b01      	cmp	r3, #1
 8022506:	f040 80a0 	bne.w	802264a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 802250a:	68fb      	ldr	r3, [r7, #12]
 802250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802250e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8022512:	f023 0301 	bic.w	r3, r3, #1
 8022516:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 802251a:	68fb      	ldr	r3, [r7, #12]
 802251c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 802251e:	68fb      	ldr	r3, [r7, #12]
 8022520:	681b      	ldr	r3, [r3, #0]
 8022522:	685b      	ldr	r3, [r3, #4]
 8022524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8022528:	2b00      	cmp	r3, #0
 802252a:	d007      	beq.n	802253c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 802252c:	68fb      	ldr	r3, [r7, #12]
 802252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022530:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8022534:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8022538:	68fb      	ldr	r3, [r7, #12]
 802253a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 802253c:	68fb      	ldr	r3, [r7, #12]
 802253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022540:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8022544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022548:	d106      	bne.n	8022558 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 802254a:	68fb      	ldr	r3, [r7, #12]
 802254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802254e:	f023 0206 	bic.w	r2, r3, #6
 8022552:	68fb      	ldr	r3, [r7, #12]
 8022554:	645a      	str	r2, [r3, #68]	; 0x44
 8022556:	e002      	b.n	802255e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8022558:	68fb      	ldr	r3, [r7, #12]
 802255a:	2200      	movs	r2, #0
 802255c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 802255e:	68fb      	ldr	r3, [r7, #12]
 8022560:	2200      	movs	r2, #0
 8022562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8022566:	4b3d      	ldr	r3, [pc, #244]	; (802265c <HAL_ADC_Start_DMA+0x1c8>)
 8022568:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 802256a:	68fb      	ldr	r3, [r7, #12]
 802256c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802256e:	4a3c      	ldr	r2, [pc, #240]	; (8022660 <HAL_ADC_Start_DMA+0x1cc>)
 8022570:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8022572:	68fb      	ldr	r3, [r7, #12]
 8022574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022576:	4a3b      	ldr	r2, [pc, #236]	; (8022664 <HAL_ADC_Start_DMA+0x1d0>)
 8022578:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 802257a:	68fb      	ldr	r3, [r7, #12]
 802257c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802257e:	4a3a      	ldr	r2, [pc, #232]	; (8022668 <HAL_ADC_Start_DMA+0x1d4>)
 8022580:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8022582:	68fb      	ldr	r3, [r7, #12]
 8022584:	681b      	ldr	r3, [r3, #0]
 8022586:	f06f 0222 	mvn.w	r2, #34	; 0x22
 802258a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 802258c:	68fb      	ldr	r3, [r7, #12]
 802258e:	681b      	ldr	r3, [r3, #0]
 8022590:	685a      	ldr	r2, [r3, #4]
 8022592:	68fb      	ldr	r3, [r7, #12]
 8022594:	681b      	ldr	r3, [r3, #0]
 8022596:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 802259a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 802259c:	68fb      	ldr	r3, [r7, #12]
 802259e:	681b      	ldr	r3, [r3, #0]
 80225a0:	689a      	ldr	r2, [r3, #8]
 80225a2:	68fb      	ldr	r3, [r7, #12]
 80225a4:	681b      	ldr	r3, [r3, #0]
 80225a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80225aa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80225ac:	68fb      	ldr	r3, [r7, #12]
 80225ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80225b0:	68fb      	ldr	r3, [r7, #12]
 80225b2:	681b      	ldr	r3, [r3, #0]
 80225b4:	334c      	adds	r3, #76	; 0x4c
 80225b6:	4619      	mov	r1, r3
 80225b8:	68ba      	ldr	r2, [r7, #8]
 80225ba:	687b      	ldr	r3, [r7, #4]
 80225bc:	f000 fcda 	bl	8022f74 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80225c0:	697b      	ldr	r3, [r7, #20]
 80225c2:	685b      	ldr	r3, [r3, #4]
 80225c4:	f003 031f 	and.w	r3, r3, #31
 80225c8:	2b00      	cmp	r3, #0
 80225ca:	d12a      	bne.n	8022622 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80225cc:	68fb      	ldr	r3, [r7, #12]
 80225ce:	681b      	ldr	r3, [r3, #0]
 80225d0:	4a26      	ldr	r2, [pc, #152]	; (802266c <HAL_ADC_Start_DMA+0x1d8>)
 80225d2:	4293      	cmp	r3, r2
 80225d4:	d015      	beq.n	8022602 <HAL_ADC_Start_DMA+0x16e>
 80225d6:	68fb      	ldr	r3, [r7, #12]
 80225d8:	681b      	ldr	r3, [r3, #0]
 80225da:	4a25      	ldr	r2, [pc, #148]	; (8022670 <HAL_ADC_Start_DMA+0x1dc>)
 80225dc:	4293      	cmp	r3, r2
 80225de:	d105      	bne.n	80225ec <HAL_ADC_Start_DMA+0x158>
 80225e0:	4b1e      	ldr	r3, [pc, #120]	; (802265c <HAL_ADC_Start_DMA+0x1c8>)
 80225e2:	685b      	ldr	r3, [r3, #4]
 80225e4:	f003 031f 	and.w	r3, r3, #31
 80225e8:	2b00      	cmp	r3, #0
 80225ea:	d00a      	beq.n	8022602 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80225ec:	68fb      	ldr	r3, [r7, #12]
 80225ee:	681b      	ldr	r3, [r3, #0]
 80225f0:	4a20      	ldr	r2, [pc, #128]	; (8022674 <HAL_ADC_Start_DMA+0x1e0>)
 80225f2:	4293      	cmp	r3, r2
 80225f4:	d129      	bne.n	802264a <HAL_ADC_Start_DMA+0x1b6>
 80225f6:	4b19      	ldr	r3, [pc, #100]	; (802265c <HAL_ADC_Start_DMA+0x1c8>)
 80225f8:	685b      	ldr	r3, [r3, #4]
 80225fa:	f003 031f 	and.w	r3, r3, #31
 80225fe:	2b0f      	cmp	r3, #15
 8022600:	d823      	bhi.n	802264a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8022602:	68fb      	ldr	r3, [r7, #12]
 8022604:	681b      	ldr	r3, [r3, #0]
 8022606:	689b      	ldr	r3, [r3, #8]
 8022608:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 802260c:	2b00      	cmp	r3, #0
 802260e:	d11c      	bne.n	802264a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8022610:	68fb      	ldr	r3, [r7, #12]
 8022612:	681b      	ldr	r3, [r3, #0]
 8022614:	689a      	ldr	r2, [r3, #8]
 8022616:	68fb      	ldr	r3, [r7, #12]
 8022618:	681b      	ldr	r3, [r3, #0]
 802261a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 802261e:	609a      	str	r2, [r3, #8]
 8022620:	e013      	b.n	802264a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8022622:	68fb      	ldr	r3, [r7, #12]
 8022624:	681b      	ldr	r3, [r3, #0]
 8022626:	4a11      	ldr	r2, [pc, #68]	; (802266c <HAL_ADC_Start_DMA+0x1d8>)
 8022628:	4293      	cmp	r3, r2
 802262a:	d10e      	bne.n	802264a <HAL_ADC_Start_DMA+0x1b6>
 802262c:	68fb      	ldr	r3, [r7, #12]
 802262e:	681b      	ldr	r3, [r3, #0]
 8022630:	689b      	ldr	r3, [r3, #8]
 8022632:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8022636:	2b00      	cmp	r3, #0
 8022638:	d107      	bne.n	802264a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 802263a:	68fb      	ldr	r3, [r7, #12]
 802263c:	681b      	ldr	r3, [r3, #0]
 802263e:	689a      	ldr	r2, [r3, #8]
 8022640:	68fb      	ldr	r3, [r7, #12]
 8022642:	681b      	ldr	r3, [r3, #0]
 8022644:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8022648:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 802264a:	2300      	movs	r3, #0
}
 802264c:	4618      	mov	r0, r3
 802264e:	3718      	adds	r7, #24
 8022650:	46bd      	mov	sp, r7
 8022652:	bd80      	pop	{r7, pc}
 8022654:	20000000 	.word	0x20000000
 8022658:	431bde83 	.word	0x431bde83
 802265c:	40012300 	.word	0x40012300
 8022660:	08022af1 	.word	0x08022af1
 8022664:	08022bab 	.word	0x08022bab
 8022668:	08022bc7 	.word	0x08022bc7
 802266c:	40012000 	.word	0x40012000
 8022670:	40012100 	.word	0x40012100
 8022674:	40012200 	.word	0x40012200

08022678 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8022678:	b480      	push	{r7}
 802267a:	b083      	sub	sp, #12
 802267c:	af00      	add	r7, sp, #0
 802267e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8022680:	bf00      	nop
 8022682:	370c      	adds	r7, #12
 8022684:	46bd      	mov	sp, r7
 8022686:	f85d 7b04 	ldr.w	r7, [sp], #4
 802268a:	4770      	bx	lr

0802268c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 802268c:	b480      	push	{r7}
 802268e:	b083      	sub	sp, #12
 8022690:	af00      	add	r7, sp, #0
 8022692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8022694:	bf00      	nop
 8022696:	370c      	adds	r7, #12
 8022698:	46bd      	mov	sp, r7
 802269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802269e:	4770      	bx	lr

080226a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80226a0:	b480      	push	{r7}
 80226a2:	b083      	sub	sp, #12
 80226a4:	af00      	add	r7, sp, #0
 80226a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80226a8:	bf00      	nop
 80226aa:	370c      	adds	r7, #12
 80226ac:	46bd      	mov	sp, r7
 80226ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226b2:	4770      	bx	lr

080226b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80226b4:	b480      	push	{r7}
 80226b6:	b085      	sub	sp, #20
 80226b8:	af00      	add	r7, sp, #0
 80226ba:	6078      	str	r0, [r7, #4]
 80226bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80226be:	2300      	movs	r3, #0
 80226c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80226c2:	687b      	ldr	r3, [r7, #4]
 80226c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80226c8:	2b01      	cmp	r3, #1
 80226ca:	d101      	bne.n	80226d0 <HAL_ADC_ConfigChannel+0x1c>
 80226cc:	2302      	movs	r3, #2
 80226ce:	e105      	b.n	80228dc <HAL_ADC_ConfigChannel+0x228>
 80226d0:	687b      	ldr	r3, [r7, #4]
 80226d2:	2201      	movs	r2, #1
 80226d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80226d8:	683b      	ldr	r3, [r7, #0]
 80226da:	681b      	ldr	r3, [r3, #0]
 80226dc:	2b09      	cmp	r3, #9
 80226de:	d925      	bls.n	802272c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80226e0:	687b      	ldr	r3, [r7, #4]
 80226e2:	681b      	ldr	r3, [r3, #0]
 80226e4:	68d9      	ldr	r1, [r3, #12]
 80226e6:	683b      	ldr	r3, [r7, #0]
 80226e8:	681b      	ldr	r3, [r3, #0]
 80226ea:	b29b      	uxth	r3, r3
 80226ec:	461a      	mov	r2, r3
 80226ee:	4613      	mov	r3, r2
 80226f0:	005b      	lsls	r3, r3, #1
 80226f2:	4413      	add	r3, r2
 80226f4:	3b1e      	subs	r3, #30
 80226f6:	2207      	movs	r2, #7
 80226f8:	fa02 f303 	lsl.w	r3, r2, r3
 80226fc:	43da      	mvns	r2, r3
 80226fe:	687b      	ldr	r3, [r7, #4]
 8022700:	681b      	ldr	r3, [r3, #0]
 8022702:	400a      	ands	r2, r1
 8022704:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8022706:	687b      	ldr	r3, [r7, #4]
 8022708:	681b      	ldr	r3, [r3, #0]
 802270a:	68d9      	ldr	r1, [r3, #12]
 802270c:	683b      	ldr	r3, [r7, #0]
 802270e:	689a      	ldr	r2, [r3, #8]
 8022710:	683b      	ldr	r3, [r7, #0]
 8022712:	681b      	ldr	r3, [r3, #0]
 8022714:	b29b      	uxth	r3, r3
 8022716:	4618      	mov	r0, r3
 8022718:	4603      	mov	r3, r0
 802271a:	005b      	lsls	r3, r3, #1
 802271c:	4403      	add	r3, r0
 802271e:	3b1e      	subs	r3, #30
 8022720:	409a      	lsls	r2, r3
 8022722:	687b      	ldr	r3, [r7, #4]
 8022724:	681b      	ldr	r3, [r3, #0]
 8022726:	430a      	orrs	r2, r1
 8022728:	60da      	str	r2, [r3, #12]
 802272a:	e022      	b.n	8022772 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 802272c:	687b      	ldr	r3, [r7, #4]
 802272e:	681b      	ldr	r3, [r3, #0]
 8022730:	6919      	ldr	r1, [r3, #16]
 8022732:	683b      	ldr	r3, [r7, #0]
 8022734:	681b      	ldr	r3, [r3, #0]
 8022736:	b29b      	uxth	r3, r3
 8022738:	461a      	mov	r2, r3
 802273a:	4613      	mov	r3, r2
 802273c:	005b      	lsls	r3, r3, #1
 802273e:	4413      	add	r3, r2
 8022740:	2207      	movs	r2, #7
 8022742:	fa02 f303 	lsl.w	r3, r2, r3
 8022746:	43da      	mvns	r2, r3
 8022748:	687b      	ldr	r3, [r7, #4]
 802274a:	681b      	ldr	r3, [r3, #0]
 802274c:	400a      	ands	r2, r1
 802274e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8022750:	687b      	ldr	r3, [r7, #4]
 8022752:	681b      	ldr	r3, [r3, #0]
 8022754:	6919      	ldr	r1, [r3, #16]
 8022756:	683b      	ldr	r3, [r7, #0]
 8022758:	689a      	ldr	r2, [r3, #8]
 802275a:	683b      	ldr	r3, [r7, #0]
 802275c:	681b      	ldr	r3, [r3, #0]
 802275e:	b29b      	uxth	r3, r3
 8022760:	4618      	mov	r0, r3
 8022762:	4603      	mov	r3, r0
 8022764:	005b      	lsls	r3, r3, #1
 8022766:	4403      	add	r3, r0
 8022768:	409a      	lsls	r2, r3
 802276a:	687b      	ldr	r3, [r7, #4]
 802276c:	681b      	ldr	r3, [r3, #0]
 802276e:	430a      	orrs	r2, r1
 8022770:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8022772:	683b      	ldr	r3, [r7, #0]
 8022774:	685b      	ldr	r3, [r3, #4]
 8022776:	2b06      	cmp	r3, #6
 8022778:	d824      	bhi.n	80227c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 802277a:	687b      	ldr	r3, [r7, #4]
 802277c:	681b      	ldr	r3, [r3, #0]
 802277e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8022780:	683b      	ldr	r3, [r7, #0]
 8022782:	685a      	ldr	r2, [r3, #4]
 8022784:	4613      	mov	r3, r2
 8022786:	009b      	lsls	r3, r3, #2
 8022788:	4413      	add	r3, r2
 802278a:	3b05      	subs	r3, #5
 802278c:	221f      	movs	r2, #31
 802278e:	fa02 f303 	lsl.w	r3, r2, r3
 8022792:	43da      	mvns	r2, r3
 8022794:	687b      	ldr	r3, [r7, #4]
 8022796:	681b      	ldr	r3, [r3, #0]
 8022798:	400a      	ands	r2, r1
 802279a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 802279c:	687b      	ldr	r3, [r7, #4]
 802279e:	681b      	ldr	r3, [r3, #0]
 80227a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80227a2:	683b      	ldr	r3, [r7, #0]
 80227a4:	681b      	ldr	r3, [r3, #0]
 80227a6:	b29b      	uxth	r3, r3
 80227a8:	4618      	mov	r0, r3
 80227aa:	683b      	ldr	r3, [r7, #0]
 80227ac:	685a      	ldr	r2, [r3, #4]
 80227ae:	4613      	mov	r3, r2
 80227b0:	009b      	lsls	r3, r3, #2
 80227b2:	4413      	add	r3, r2
 80227b4:	3b05      	subs	r3, #5
 80227b6:	fa00 f203 	lsl.w	r2, r0, r3
 80227ba:	687b      	ldr	r3, [r7, #4]
 80227bc:	681b      	ldr	r3, [r3, #0]
 80227be:	430a      	orrs	r2, r1
 80227c0:	635a      	str	r2, [r3, #52]	; 0x34
 80227c2:	e04c      	b.n	802285e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80227c4:	683b      	ldr	r3, [r7, #0]
 80227c6:	685b      	ldr	r3, [r3, #4]
 80227c8:	2b0c      	cmp	r3, #12
 80227ca:	d824      	bhi.n	8022816 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80227cc:	687b      	ldr	r3, [r7, #4]
 80227ce:	681b      	ldr	r3, [r3, #0]
 80227d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80227d2:	683b      	ldr	r3, [r7, #0]
 80227d4:	685a      	ldr	r2, [r3, #4]
 80227d6:	4613      	mov	r3, r2
 80227d8:	009b      	lsls	r3, r3, #2
 80227da:	4413      	add	r3, r2
 80227dc:	3b23      	subs	r3, #35	; 0x23
 80227de:	221f      	movs	r2, #31
 80227e0:	fa02 f303 	lsl.w	r3, r2, r3
 80227e4:	43da      	mvns	r2, r3
 80227e6:	687b      	ldr	r3, [r7, #4]
 80227e8:	681b      	ldr	r3, [r3, #0]
 80227ea:	400a      	ands	r2, r1
 80227ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80227ee:	687b      	ldr	r3, [r7, #4]
 80227f0:	681b      	ldr	r3, [r3, #0]
 80227f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80227f4:	683b      	ldr	r3, [r7, #0]
 80227f6:	681b      	ldr	r3, [r3, #0]
 80227f8:	b29b      	uxth	r3, r3
 80227fa:	4618      	mov	r0, r3
 80227fc:	683b      	ldr	r3, [r7, #0]
 80227fe:	685a      	ldr	r2, [r3, #4]
 8022800:	4613      	mov	r3, r2
 8022802:	009b      	lsls	r3, r3, #2
 8022804:	4413      	add	r3, r2
 8022806:	3b23      	subs	r3, #35	; 0x23
 8022808:	fa00 f203 	lsl.w	r2, r0, r3
 802280c:	687b      	ldr	r3, [r7, #4]
 802280e:	681b      	ldr	r3, [r3, #0]
 8022810:	430a      	orrs	r2, r1
 8022812:	631a      	str	r2, [r3, #48]	; 0x30
 8022814:	e023      	b.n	802285e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8022816:	687b      	ldr	r3, [r7, #4]
 8022818:	681b      	ldr	r3, [r3, #0]
 802281a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 802281c:	683b      	ldr	r3, [r7, #0]
 802281e:	685a      	ldr	r2, [r3, #4]
 8022820:	4613      	mov	r3, r2
 8022822:	009b      	lsls	r3, r3, #2
 8022824:	4413      	add	r3, r2
 8022826:	3b41      	subs	r3, #65	; 0x41
 8022828:	221f      	movs	r2, #31
 802282a:	fa02 f303 	lsl.w	r3, r2, r3
 802282e:	43da      	mvns	r2, r3
 8022830:	687b      	ldr	r3, [r7, #4]
 8022832:	681b      	ldr	r3, [r3, #0]
 8022834:	400a      	ands	r2, r1
 8022836:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8022838:	687b      	ldr	r3, [r7, #4]
 802283a:	681b      	ldr	r3, [r3, #0]
 802283c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 802283e:	683b      	ldr	r3, [r7, #0]
 8022840:	681b      	ldr	r3, [r3, #0]
 8022842:	b29b      	uxth	r3, r3
 8022844:	4618      	mov	r0, r3
 8022846:	683b      	ldr	r3, [r7, #0]
 8022848:	685a      	ldr	r2, [r3, #4]
 802284a:	4613      	mov	r3, r2
 802284c:	009b      	lsls	r3, r3, #2
 802284e:	4413      	add	r3, r2
 8022850:	3b41      	subs	r3, #65	; 0x41
 8022852:	fa00 f203 	lsl.w	r2, r0, r3
 8022856:	687b      	ldr	r3, [r7, #4]
 8022858:	681b      	ldr	r3, [r3, #0]
 802285a:	430a      	orrs	r2, r1
 802285c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 802285e:	4b22      	ldr	r3, [pc, #136]	; (80228e8 <HAL_ADC_ConfigChannel+0x234>)
 8022860:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8022862:	687b      	ldr	r3, [r7, #4]
 8022864:	681b      	ldr	r3, [r3, #0]
 8022866:	4a21      	ldr	r2, [pc, #132]	; (80228ec <HAL_ADC_ConfigChannel+0x238>)
 8022868:	4293      	cmp	r3, r2
 802286a:	d109      	bne.n	8022880 <HAL_ADC_ConfigChannel+0x1cc>
 802286c:	683b      	ldr	r3, [r7, #0]
 802286e:	681b      	ldr	r3, [r3, #0]
 8022870:	2b12      	cmp	r3, #18
 8022872:	d105      	bne.n	8022880 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8022874:	68fb      	ldr	r3, [r7, #12]
 8022876:	685b      	ldr	r3, [r3, #4]
 8022878:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 802287c:	68fb      	ldr	r3, [r7, #12]
 802287e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8022880:	687b      	ldr	r3, [r7, #4]
 8022882:	681b      	ldr	r3, [r3, #0]
 8022884:	4a19      	ldr	r2, [pc, #100]	; (80228ec <HAL_ADC_ConfigChannel+0x238>)
 8022886:	4293      	cmp	r3, r2
 8022888:	d123      	bne.n	80228d2 <HAL_ADC_ConfigChannel+0x21e>
 802288a:	683b      	ldr	r3, [r7, #0]
 802288c:	681b      	ldr	r3, [r3, #0]
 802288e:	2b10      	cmp	r3, #16
 8022890:	d003      	beq.n	802289a <HAL_ADC_ConfigChannel+0x1e6>
 8022892:	683b      	ldr	r3, [r7, #0]
 8022894:	681b      	ldr	r3, [r3, #0]
 8022896:	2b11      	cmp	r3, #17
 8022898:	d11b      	bne.n	80228d2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 802289a:	68fb      	ldr	r3, [r7, #12]
 802289c:	685b      	ldr	r3, [r3, #4]
 802289e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80228a2:	68fb      	ldr	r3, [r7, #12]
 80228a4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80228a6:	683b      	ldr	r3, [r7, #0]
 80228a8:	681b      	ldr	r3, [r3, #0]
 80228aa:	2b10      	cmp	r3, #16
 80228ac:	d111      	bne.n	80228d2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80228ae:	4b10      	ldr	r3, [pc, #64]	; (80228f0 <HAL_ADC_ConfigChannel+0x23c>)
 80228b0:	681b      	ldr	r3, [r3, #0]
 80228b2:	4a10      	ldr	r2, [pc, #64]	; (80228f4 <HAL_ADC_ConfigChannel+0x240>)
 80228b4:	fba2 2303 	umull	r2, r3, r2, r3
 80228b8:	0c9a      	lsrs	r2, r3, #18
 80228ba:	4613      	mov	r3, r2
 80228bc:	009b      	lsls	r3, r3, #2
 80228be:	4413      	add	r3, r2
 80228c0:	005b      	lsls	r3, r3, #1
 80228c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80228c4:	e002      	b.n	80228cc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80228c6:	68bb      	ldr	r3, [r7, #8]
 80228c8:	3b01      	subs	r3, #1
 80228ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80228cc:	68bb      	ldr	r3, [r7, #8]
 80228ce:	2b00      	cmp	r3, #0
 80228d0:	d1f9      	bne.n	80228c6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80228d2:	687b      	ldr	r3, [r7, #4]
 80228d4:	2200      	movs	r2, #0
 80228d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80228da:	2300      	movs	r3, #0
}
 80228dc:	4618      	mov	r0, r3
 80228de:	3714      	adds	r7, #20
 80228e0:	46bd      	mov	sp, r7
 80228e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228e6:	4770      	bx	lr
 80228e8:	40012300 	.word	0x40012300
 80228ec:	40012000 	.word	0x40012000
 80228f0:	20000000 	.word	0x20000000
 80228f4:	431bde83 	.word	0x431bde83

080228f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80228f8:	b480      	push	{r7}
 80228fa:	b085      	sub	sp, #20
 80228fc:	af00      	add	r7, sp, #0
 80228fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8022900:	4b79      	ldr	r3, [pc, #484]	; (8022ae8 <ADC_Init+0x1f0>)
 8022902:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8022904:	68fb      	ldr	r3, [r7, #12]
 8022906:	685b      	ldr	r3, [r3, #4]
 8022908:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 802290c:	68fb      	ldr	r3, [r7, #12]
 802290e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8022910:	68fb      	ldr	r3, [r7, #12]
 8022912:	685a      	ldr	r2, [r3, #4]
 8022914:	687b      	ldr	r3, [r7, #4]
 8022916:	685b      	ldr	r3, [r3, #4]
 8022918:	431a      	orrs	r2, r3
 802291a:	68fb      	ldr	r3, [r7, #12]
 802291c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 802291e:	687b      	ldr	r3, [r7, #4]
 8022920:	681b      	ldr	r3, [r3, #0]
 8022922:	685a      	ldr	r2, [r3, #4]
 8022924:	687b      	ldr	r3, [r7, #4]
 8022926:	681b      	ldr	r3, [r3, #0]
 8022928:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802292c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 802292e:	687b      	ldr	r3, [r7, #4]
 8022930:	681b      	ldr	r3, [r3, #0]
 8022932:	6859      	ldr	r1, [r3, #4]
 8022934:	687b      	ldr	r3, [r7, #4]
 8022936:	691b      	ldr	r3, [r3, #16]
 8022938:	021a      	lsls	r2, r3, #8
 802293a:	687b      	ldr	r3, [r7, #4]
 802293c:	681b      	ldr	r3, [r3, #0]
 802293e:	430a      	orrs	r2, r1
 8022940:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8022942:	687b      	ldr	r3, [r7, #4]
 8022944:	681b      	ldr	r3, [r3, #0]
 8022946:	685a      	ldr	r2, [r3, #4]
 8022948:	687b      	ldr	r3, [r7, #4]
 802294a:	681b      	ldr	r3, [r3, #0]
 802294c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8022950:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8022952:	687b      	ldr	r3, [r7, #4]
 8022954:	681b      	ldr	r3, [r3, #0]
 8022956:	6859      	ldr	r1, [r3, #4]
 8022958:	687b      	ldr	r3, [r7, #4]
 802295a:	689a      	ldr	r2, [r3, #8]
 802295c:	687b      	ldr	r3, [r7, #4]
 802295e:	681b      	ldr	r3, [r3, #0]
 8022960:	430a      	orrs	r2, r1
 8022962:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8022964:	687b      	ldr	r3, [r7, #4]
 8022966:	681b      	ldr	r3, [r3, #0]
 8022968:	689a      	ldr	r2, [r3, #8]
 802296a:	687b      	ldr	r3, [r7, #4]
 802296c:	681b      	ldr	r3, [r3, #0]
 802296e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8022972:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8022974:	687b      	ldr	r3, [r7, #4]
 8022976:	681b      	ldr	r3, [r3, #0]
 8022978:	6899      	ldr	r1, [r3, #8]
 802297a:	687b      	ldr	r3, [r7, #4]
 802297c:	68da      	ldr	r2, [r3, #12]
 802297e:	687b      	ldr	r3, [r7, #4]
 8022980:	681b      	ldr	r3, [r3, #0]
 8022982:	430a      	orrs	r2, r1
 8022984:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8022986:	687b      	ldr	r3, [r7, #4]
 8022988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802298a:	4a58      	ldr	r2, [pc, #352]	; (8022aec <ADC_Init+0x1f4>)
 802298c:	4293      	cmp	r3, r2
 802298e:	d022      	beq.n	80229d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8022990:	687b      	ldr	r3, [r7, #4]
 8022992:	681b      	ldr	r3, [r3, #0]
 8022994:	689a      	ldr	r2, [r3, #8]
 8022996:	687b      	ldr	r3, [r7, #4]
 8022998:	681b      	ldr	r3, [r3, #0]
 802299a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 802299e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80229a0:	687b      	ldr	r3, [r7, #4]
 80229a2:	681b      	ldr	r3, [r3, #0]
 80229a4:	6899      	ldr	r1, [r3, #8]
 80229a6:	687b      	ldr	r3, [r7, #4]
 80229a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80229aa:	687b      	ldr	r3, [r7, #4]
 80229ac:	681b      	ldr	r3, [r3, #0]
 80229ae:	430a      	orrs	r2, r1
 80229b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80229b2:	687b      	ldr	r3, [r7, #4]
 80229b4:	681b      	ldr	r3, [r3, #0]
 80229b6:	689a      	ldr	r2, [r3, #8]
 80229b8:	687b      	ldr	r3, [r7, #4]
 80229ba:	681b      	ldr	r3, [r3, #0]
 80229bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80229c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80229c2:	687b      	ldr	r3, [r7, #4]
 80229c4:	681b      	ldr	r3, [r3, #0]
 80229c6:	6899      	ldr	r1, [r3, #8]
 80229c8:	687b      	ldr	r3, [r7, #4]
 80229ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80229cc:	687b      	ldr	r3, [r7, #4]
 80229ce:	681b      	ldr	r3, [r3, #0]
 80229d0:	430a      	orrs	r2, r1
 80229d2:	609a      	str	r2, [r3, #8]
 80229d4:	e00f      	b.n	80229f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80229d6:	687b      	ldr	r3, [r7, #4]
 80229d8:	681b      	ldr	r3, [r3, #0]
 80229da:	689a      	ldr	r2, [r3, #8]
 80229dc:	687b      	ldr	r3, [r7, #4]
 80229de:	681b      	ldr	r3, [r3, #0]
 80229e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80229e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80229e6:	687b      	ldr	r3, [r7, #4]
 80229e8:	681b      	ldr	r3, [r3, #0]
 80229ea:	689a      	ldr	r2, [r3, #8]
 80229ec:	687b      	ldr	r3, [r7, #4]
 80229ee:	681b      	ldr	r3, [r3, #0]
 80229f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80229f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80229f6:	687b      	ldr	r3, [r7, #4]
 80229f8:	681b      	ldr	r3, [r3, #0]
 80229fa:	689a      	ldr	r2, [r3, #8]
 80229fc:	687b      	ldr	r3, [r7, #4]
 80229fe:	681b      	ldr	r3, [r3, #0]
 8022a00:	f022 0202 	bic.w	r2, r2, #2
 8022a04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8022a06:	687b      	ldr	r3, [r7, #4]
 8022a08:	681b      	ldr	r3, [r3, #0]
 8022a0a:	6899      	ldr	r1, [r3, #8]
 8022a0c:	687b      	ldr	r3, [r7, #4]
 8022a0e:	7e1b      	ldrb	r3, [r3, #24]
 8022a10:	005a      	lsls	r2, r3, #1
 8022a12:	687b      	ldr	r3, [r7, #4]
 8022a14:	681b      	ldr	r3, [r3, #0]
 8022a16:	430a      	orrs	r2, r1
 8022a18:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8022a1a:	687b      	ldr	r3, [r7, #4]
 8022a1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8022a20:	2b00      	cmp	r3, #0
 8022a22:	d01b      	beq.n	8022a5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8022a24:	687b      	ldr	r3, [r7, #4]
 8022a26:	681b      	ldr	r3, [r3, #0]
 8022a28:	685a      	ldr	r2, [r3, #4]
 8022a2a:	687b      	ldr	r3, [r7, #4]
 8022a2c:	681b      	ldr	r3, [r3, #0]
 8022a2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8022a32:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8022a34:	687b      	ldr	r3, [r7, #4]
 8022a36:	681b      	ldr	r3, [r3, #0]
 8022a38:	685a      	ldr	r2, [r3, #4]
 8022a3a:	687b      	ldr	r3, [r7, #4]
 8022a3c:	681b      	ldr	r3, [r3, #0]
 8022a3e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8022a42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8022a44:	687b      	ldr	r3, [r7, #4]
 8022a46:	681b      	ldr	r3, [r3, #0]
 8022a48:	6859      	ldr	r1, [r3, #4]
 8022a4a:	687b      	ldr	r3, [r7, #4]
 8022a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022a4e:	3b01      	subs	r3, #1
 8022a50:	035a      	lsls	r2, r3, #13
 8022a52:	687b      	ldr	r3, [r7, #4]
 8022a54:	681b      	ldr	r3, [r3, #0]
 8022a56:	430a      	orrs	r2, r1
 8022a58:	605a      	str	r2, [r3, #4]
 8022a5a:	e007      	b.n	8022a6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8022a5c:	687b      	ldr	r3, [r7, #4]
 8022a5e:	681b      	ldr	r3, [r3, #0]
 8022a60:	685a      	ldr	r2, [r3, #4]
 8022a62:	687b      	ldr	r3, [r7, #4]
 8022a64:	681b      	ldr	r3, [r3, #0]
 8022a66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8022a6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8022a6c:	687b      	ldr	r3, [r7, #4]
 8022a6e:	681b      	ldr	r3, [r3, #0]
 8022a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022a72:	687b      	ldr	r3, [r7, #4]
 8022a74:	681b      	ldr	r3, [r3, #0]
 8022a76:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8022a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8022a7c:	687b      	ldr	r3, [r7, #4]
 8022a7e:	681b      	ldr	r3, [r3, #0]
 8022a80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8022a82:	687b      	ldr	r3, [r7, #4]
 8022a84:	69db      	ldr	r3, [r3, #28]
 8022a86:	3b01      	subs	r3, #1
 8022a88:	051a      	lsls	r2, r3, #20
 8022a8a:	687b      	ldr	r3, [r7, #4]
 8022a8c:	681b      	ldr	r3, [r3, #0]
 8022a8e:	430a      	orrs	r2, r1
 8022a90:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8022a92:	687b      	ldr	r3, [r7, #4]
 8022a94:	681b      	ldr	r3, [r3, #0]
 8022a96:	689a      	ldr	r2, [r3, #8]
 8022a98:	687b      	ldr	r3, [r7, #4]
 8022a9a:	681b      	ldr	r3, [r3, #0]
 8022a9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8022aa0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8022aa2:	687b      	ldr	r3, [r7, #4]
 8022aa4:	681b      	ldr	r3, [r3, #0]
 8022aa6:	6899      	ldr	r1, [r3, #8]
 8022aa8:	687b      	ldr	r3, [r7, #4]
 8022aaa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8022aae:	025a      	lsls	r2, r3, #9
 8022ab0:	687b      	ldr	r3, [r7, #4]
 8022ab2:	681b      	ldr	r3, [r3, #0]
 8022ab4:	430a      	orrs	r2, r1
 8022ab6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8022ab8:	687b      	ldr	r3, [r7, #4]
 8022aba:	681b      	ldr	r3, [r3, #0]
 8022abc:	689a      	ldr	r2, [r3, #8]
 8022abe:	687b      	ldr	r3, [r7, #4]
 8022ac0:	681b      	ldr	r3, [r3, #0]
 8022ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8022ac6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8022ac8:	687b      	ldr	r3, [r7, #4]
 8022aca:	681b      	ldr	r3, [r3, #0]
 8022acc:	6899      	ldr	r1, [r3, #8]
 8022ace:	687b      	ldr	r3, [r7, #4]
 8022ad0:	695b      	ldr	r3, [r3, #20]
 8022ad2:	029a      	lsls	r2, r3, #10
 8022ad4:	687b      	ldr	r3, [r7, #4]
 8022ad6:	681b      	ldr	r3, [r3, #0]
 8022ad8:	430a      	orrs	r2, r1
 8022ada:	609a      	str	r2, [r3, #8]
}
 8022adc:	bf00      	nop
 8022ade:	3714      	adds	r7, #20
 8022ae0:	46bd      	mov	sp, r7
 8022ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ae6:	4770      	bx	lr
 8022ae8:	40012300 	.word	0x40012300
 8022aec:	0f000001 	.word	0x0f000001

08022af0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8022af0:	b580      	push	{r7, lr}
 8022af2:	b084      	sub	sp, #16
 8022af4:	af00      	add	r7, sp, #0
 8022af6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8022af8:	687b      	ldr	r3, [r7, #4]
 8022afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022afc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8022afe:	68fb      	ldr	r3, [r7, #12]
 8022b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022b02:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8022b06:	2b00      	cmp	r3, #0
 8022b08:	d13c      	bne.n	8022b84 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8022b0a:	68fb      	ldr	r3, [r7, #12]
 8022b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022b0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8022b12:	68fb      	ldr	r3, [r7, #12]
 8022b14:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8022b16:	68fb      	ldr	r3, [r7, #12]
 8022b18:	681b      	ldr	r3, [r3, #0]
 8022b1a:	689b      	ldr	r3, [r3, #8]
 8022b1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8022b20:	2b00      	cmp	r3, #0
 8022b22:	d12b      	bne.n	8022b7c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8022b24:	68fb      	ldr	r3, [r7, #12]
 8022b26:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8022b28:	2b00      	cmp	r3, #0
 8022b2a:	d127      	bne.n	8022b7c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8022b2c:	68fb      	ldr	r3, [r7, #12]
 8022b2e:	681b      	ldr	r3, [r3, #0]
 8022b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022b32:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8022b36:	2b00      	cmp	r3, #0
 8022b38:	d006      	beq.n	8022b48 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8022b3a:	68fb      	ldr	r3, [r7, #12]
 8022b3c:	681b      	ldr	r3, [r3, #0]
 8022b3e:	689b      	ldr	r3, [r3, #8]
 8022b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8022b44:	2b00      	cmp	r3, #0
 8022b46:	d119      	bne.n	8022b7c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8022b48:	68fb      	ldr	r3, [r7, #12]
 8022b4a:	681b      	ldr	r3, [r3, #0]
 8022b4c:	685a      	ldr	r2, [r3, #4]
 8022b4e:	68fb      	ldr	r3, [r7, #12]
 8022b50:	681b      	ldr	r3, [r3, #0]
 8022b52:	f022 0220 	bic.w	r2, r2, #32
 8022b56:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8022b58:	68fb      	ldr	r3, [r7, #12]
 8022b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022b5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8022b60:	68fb      	ldr	r3, [r7, #12]
 8022b62:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8022b64:	68fb      	ldr	r3, [r7, #12]
 8022b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022b68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8022b6c:	2b00      	cmp	r3, #0
 8022b6e:	d105      	bne.n	8022b7c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8022b70:	68fb      	ldr	r3, [r7, #12]
 8022b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022b74:	f043 0201 	orr.w	r2, r3, #1
 8022b78:	68fb      	ldr	r3, [r7, #12]
 8022b7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8022b7c:	68f8      	ldr	r0, [r7, #12]
 8022b7e:	f7ff fd7b 	bl	8022678 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8022b82:	e00e      	b.n	8022ba2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8022b84:	68fb      	ldr	r3, [r7, #12]
 8022b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022b88:	f003 0310 	and.w	r3, r3, #16
 8022b8c:	2b00      	cmp	r3, #0
 8022b8e:	d003      	beq.n	8022b98 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8022b90:	68f8      	ldr	r0, [r7, #12]
 8022b92:	f7ff fd85 	bl	80226a0 <HAL_ADC_ErrorCallback>
}
 8022b96:	e004      	b.n	8022ba2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8022b98:	68fb      	ldr	r3, [r7, #12]
 8022b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8022b9e:	6878      	ldr	r0, [r7, #4]
 8022ba0:	4798      	blx	r3
}
 8022ba2:	bf00      	nop
 8022ba4:	3710      	adds	r7, #16
 8022ba6:	46bd      	mov	sp, r7
 8022ba8:	bd80      	pop	{r7, pc}

08022baa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8022baa:	b580      	push	{r7, lr}
 8022bac:	b084      	sub	sp, #16
 8022bae:	af00      	add	r7, sp, #0
 8022bb0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8022bb2:	687b      	ldr	r3, [r7, #4]
 8022bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022bb6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8022bb8:	68f8      	ldr	r0, [r7, #12]
 8022bba:	f7ff fd67 	bl	802268c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8022bbe:	bf00      	nop
 8022bc0:	3710      	adds	r7, #16
 8022bc2:	46bd      	mov	sp, r7
 8022bc4:	bd80      	pop	{r7, pc}

08022bc6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8022bc6:	b580      	push	{r7, lr}
 8022bc8:	b084      	sub	sp, #16
 8022bca:	af00      	add	r7, sp, #0
 8022bcc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8022bce:	687b      	ldr	r3, [r7, #4]
 8022bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022bd2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8022bd4:	68fb      	ldr	r3, [r7, #12]
 8022bd6:	2240      	movs	r2, #64	; 0x40
 8022bd8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8022bda:	68fb      	ldr	r3, [r7, #12]
 8022bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022bde:	f043 0204 	orr.w	r2, r3, #4
 8022be2:	68fb      	ldr	r3, [r7, #12]
 8022be4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8022be6:	68f8      	ldr	r0, [r7, #12]
 8022be8:	f7ff fd5a 	bl	80226a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8022bec:	bf00      	nop
 8022bee:	3710      	adds	r7, #16
 8022bf0:	46bd      	mov	sp, r7
 8022bf2:	bd80      	pop	{r7, pc}

08022bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8022bf4:	b480      	push	{r7}
 8022bf6:	b085      	sub	sp, #20
 8022bf8:	af00      	add	r7, sp, #0
 8022bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8022bfc:	687b      	ldr	r3, [r7, #4]
 8022bfe:	f003 0307 	and.w	r3, r3, #7
 8022c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8022c04:	4b0c      	ldr	r3, [pc, #48]	; (8022c38 <__NVIC_SetPriorityGrouping+0x44>)
 8022c06:	68db      	ldr	r3, [r3, #12]
 8022c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8022c0a:	68ba      	ldr	r2, [r7, #8]
 8022c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8022c10:	4013      	ands	r3, r2
 8022c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8022c14:	68fb      	ldr	r3, [r7, #12]
 8022c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8022c18:	68bb      	ldr	r3, [r7, #8]
 8022c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8022c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8022c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8022c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8022c26:	4a04      	ldr	r2, [pc, #16]	; (8022c38 <__NVIC_SetPriorityGrouping+0x44>)
 8022c28:	68bb      	ldr	r3, [r7, #8]
 8022c2a:	60d3      	str	r3, [r2, #12]
}
 8022c2c:	bf00      	nop
 8022c2e:	3714      	adds	r7, #20
 8022c30:	46bd      	mov	sp, r7
 8022c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c36:	4770      	bx	lr
 8022c38:	e000ed00 	.word	0xe000ed00

08022c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8022c3c:	b480      	push	{r7}
 8022c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8022c40:	4b04      	ldr	r3, [pc, #16]	; (8022c54 <__NVIC_GetPriorityGrouping+0x18>)
 8022c42:	68db      	ldr	r3, [r3, #12]
 8022c44:	0a1b      	lsrs	r3, r3, #8
 8022c46:	f003 0307 	and.w	r3, r3, #7
}
 8022c4a:	4618      	mov	r0, r3
 8022c4c:	46bd      	mov	sp, r7
 8022c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c52:	4770      	bx	lr
 8022c54:	e000ed00 	.word	0xe000ed00

08022c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8022c58:	b480      	push	{r7}
 8022c5a:	b083      	sub	sp, #12
 8022c5c:	af00      	add	r7, sp, #0
 8022c5e:	4603      	mov	r3, r0
 8022c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8022c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022c66:	2b00      	cmp	r3, #0
 8022c68:	db0b      	blt.n	8022c82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8022c6a:	79fb      	ldrb	r3, [r7, #7]
 8022c6c:	f003 021f 	and.w	r2, r3, #31
 8022c70:	4907      	ldr	r1, [pc, #28]	; (8022c90 <__NVIC_EnableIRQ+0x38>)
 8022c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022c76:	095b      	lsrs	r3, r3, #5
 8022c78:	2001      	movs	r0, #1
 8022c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8022c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8022c82:	bf00      	nop
 8022c84:	370c      	adds	r7, #12
 8022c86:	46bd      	mov	sp, r7
 8022c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c8c:	4770      	bx	lr
 8022c8e:	bf00      	nop
 8022c90:	e000e100 	.word	0xe000e100

08022c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8022c94:	b480      	push	{r7}
 8022c96:	b083      	sub	sp, #12
 8022c98:	af00      	add	r7, sp, #0
 8022c9a:	4603      	mov	r3, r0
 8022c9c:	6039      	str	r1, [r7, #0]
 8022c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8022ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022ca4:	2b00      	cmp	r3, #0
 8022ca6:	db0a      	blt.n	8022cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022ca8:	683b      	ldr	r3, [r7, #0]
 8022caa:	b2da      	uxtb	r2, r3
 8022cac:	490c      	ldr	r1, [pc, #48]	; (8022ce0 <__NVIC_SetPriority+0x4c>)
 8022cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022cb2:	0112      	lsls	r2, r2, #4
 8022cb4:	b2d2      	uxtb	r2, r2
 8022cb6:	440b      	add	r3, r1
 8022cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8022cbc:	e00a      	b.n	8022cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022cbe:	683b      	ldr	r3, [r7, #0]
 8022cc0:	b2da      	uxtb	r2, r3
 8022cc2:	4908      	ldr	r1, [pc, #32]	; (8022ce4 <__NVIC_SetPriority+0x50>)
 8022cc4:	79fb      	ldrb	r3, [r7, #7]
 8022cc6:	f003 030f 	and.w	r3, r3, #15
 8022cca:	3b04      	subs	r3, #4
 8022ccc:	0112      	lsls	r2, r2, #4
 8022cce:	b2d2      	uxtb	r2, r2
 8022cd0:	440b      	add	r3, r1
 8022cd2:	761a      	strb	r2, [r3, #24]
}
 8022cd4:	bf00      	nop
 8022cd6:	370c      	adds	r7, #12
 8022cd8:	46bd      	mov	sp, r7
 8022cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022cde:	4770      	bx	lr
 8022ce0:	e000e100 	.word	0xe000e100
 8022ce4:	e000ed00 	.word	0xe000ed00

08022ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8022ce8:	b480      	push	{r7}
 8022cea:	b089      	sub	sp, #36	; 0x24
 8022cec:	af00      	add	r7, sp, #0
 8022cee:	60f8      	str	r0, [r7, #12]
 8022cf0:	60b9      	str	r1, [r7, #8]
 8022cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8022cf4:	68fb      	ldr	r3, [r7, #12]
 8022cf6:	f003 0307 	and.w	r3, r3, #7
 8022cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8022cfc:	69fb      	ldr	r3, [r7, #28]
 8022cfe:	f1c3 0307 	rsb	r3, r3, #7
 8022d02:	2b04      	cmp	r3, #4
 8022d04:	bf28      	it	cs
 8022d06:	2304      	movcs	r3, #4
 8022d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8022d0a:	69fb      	ldr	r3, [r7, #28]
 8022d0c:	3304      	adds	r3, #4
 8022d0e:	2b06      	cmp	r3, #6
 8022d10:	d902      	bls.n	8022d18 <NVIC_EncodePriority+0x30>
 8022d12:	69fb      	ldr	r3, [r7, #28]
 8022d14:	3b03      	subs	r3, #3
 8022d16:	e000      	b.n	8022d1a <NVIC_EncodePriority+0x32>
 8022d18:	2300      	movs	r3, #0
 8022d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8022d20:	69bb      	ldr	r3, [r7, #24]
 8022d22:	fa02 f303 	lsl.w	r3, r2, r3
 8022d26:	43da      	mvns	r2, r3
 8022d28:	68bb      	ldr	r3, [r7, #8]
 8022d2a:	401a      	ands	r2, r3
 8022d2c:	697b      	ldr	r3, [r7, #20]
 8022d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8022d30:	f04f 31ff 	mov.w	r1, #4294967295
 8022d34:	697b      	ldr	r3, [r7, #20]
 8022d36:	fa01 f303 	lsl.w	r3, r1, r3
 8022d3a:	43d9      	mvns	r1, r3
 8022d3c:	687b      	ldr	r3, [r7, #4]
 8022d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022d40:	4313      	orrs	r3, r2
         );
}
 8022d42:	4618      	mov	r0, r3
 8022d44:	3724      	adds	r7, #36	; 0x24
 8022d46:	46bd      	mov	sp, r7
 8022d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d4c:	4770      	bx	lr
	...

08022d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8022d50:	b580      	push	{r7, lr}
 8022d52:	b082      	sub	sp, #8
 8022d54:	af00      	add	r7, sp, #0
 8022d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8022d58:	687b      	ldr	r3, [r7, #4]
 8022d5a:	3b01      	subs	r3, #1
 8022d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8022d60:	d301      	bcc.n	8022d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8022d62:	2301      	movs	r3, #1
 8022d64:	e00f      	b.n	8022d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8022d66:	4a0a      	ldr	r2, [pc, #40]	; (8022d90 <SysTick_Config+0x40>)
 8022d68:	687b      	ldr	r3, [r7, #4]
 8022d6a:	3b01      	subs	r3, #1
 8022d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8022d6e:	210f      	movs	r1, #15
 8022d70:	f04f 30ff 	mov.w	r0, #4294967295
 8022d74:	f7ff ff8e 	bl	8022c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8022d78:	4b05      	ldr	r3, [pc, #20]	; (8022d90 <SysTick_Config+0x40>)
 8022d7a:	2200      	movs	r2, #0
 8022d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8022d7e:	4b04      	ldr	r3, [pc, #16]	; (8022d90 <SysTick_Config+0x40>)
 8022d80:	2207      	movs	r2, #7
 8022d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8022d84:	2300      	movs	r3, #0
}
 8022d86:	4618      	mov	r0, r3
 8022d88:	3708      	adds	r7, #8
 8022d8a:	46bd      	mov	sp, r7
 8022d8c:	bd80      	pop	{r7, pc}
 8022d8e:	bf00      	nop
 8022d90:	e000e010 	.word	0xe000e010

08022d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8022d94:	b580      	push	{r7, lr}
 8022d96:	b082      	sub	sp, #8
 8022d98:	af00      	add	r7, sp, #0
 8022d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8022d9c:	6878      	ldr	r0, [r7, #4]
 8022d9e:	f7ff ff29 	bl	8022bf4 <__NVIC_SetPriorityGrouping>
}
 8022da2:	bf00      	nop
 8022da4:	3708      	adds	r7, #8
 8022da6:	46bd      	mov	sp, r7
 8022da8:	bd80      	pop	{r7, pc}

08022daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8022daa:	b580      	push	{r7, lr}
 8022dac:	b086      	sub	sp, #24
 8022dae:	af00      	add	r7, sp, #0
 8022db0:	4603      	mov	r3, r0
 8022db2:	60b9      	str	r1, [r7, #8]
 8022db4:	607a      	str	r2, [r7, #4]
 8022db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8022db8:	2300      	movs	r3, #0
 8022dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8022dbc:	f7ff ff3e 	bl	8022c3c <__NVIC_GetPriorityGrouping>
 8022dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8022dc2:	687a      	ldr	r2, [r7, #4]
 8022dc4:	68b9      	ldr	r1, [r7, #8]
 8022dc6:	6978      	ldr	r0, [r7, #20]
 8022dc8:	f7ff ff8e 	bl	8022ce8 <NVIC_EncodePriority>
 8022dcc:	4602      	mov	r2, r0
 8022dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8022dd2:	4611      	mov	r1, r2
 8022dd4:	4618      	mov	r0, r3
 8022dd6:	f7ff ff5d 	bl	8022c94 <__NVIC_SetPriority>
}
 8022dda:	bf00      	nop
 8022ddc:	3718      	adds	r7, #24
 8022dde:	46bd      	mov	sp, r7
 8022de0:	bd80      	pop	{r7, pc}

08022de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8022de2:	b580      	push	{r7, lr}
 8022de4:	b082      	sub	sp, #8
 8022de6:	af00      	add	r7, sp, #0
 8022de8:	4603      	mov	r3, r0
 8022dea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8022dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022df0:	4618      	mov	r0, r3
 8022df2:	f7ff ff31 	bl	8022c58 <__NVIC_EnableIRQ>
}
 8022df6:	bf00      	nop
 8022df8:	3708      	adds	r7, #8
 8022dfa:	46bd      	mov	sp, r7
 8022dfc:	bd80      	pop	{r7, pc}

08022dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8022dfe:	b580      	push	{r7, lr}
 8022e00:	b082      	sub	sp, #8
 8022e02:	af00      	add	r7, sp, #0
 8022e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8022e06:	6878      	ldr	r0, [r7, #4]
 8022e08:	f7ff ffa2 	bl	8022d50 <SysTick_Config>
 8022e0c:	4603      	mov	r3, r0
}
 8022e0e:	4618      	mov	r0, r3
 8022e10:	3708      	adds	r7, #8
 8022e12:	46bd      	mov	sp, r7
 8022e14:	bd80      	pop	{r7, pc}
	...

08022e18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8022e18:	b580      	push	{r7, lr}
 8022e1a:	b086      	sub	sp, #24
 8022e1c:	af00      	add	r7, sp, #0
 8022e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8022e20:	2300      	movs	r3, #0
 8022e22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8022e24:	f7ff fac4 	bl	80223b0 <HAL_GetTick>
 8022e28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8022e2a:	687b      	ldr	r3, [r7, #4]
 8022e2c:	2b00      	cmp	r3, #0
 8022e2e:	d101      	bne.n	8022e34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8022e30:	2301      	movs	r3, #1
 8022e32:	e099      	b.n	8022f68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8022e34:	687b      	ldr	r3, [r7, #4]
 8022e36:	2200      	movs	r2, #0
 8022e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8022e3c:	687b      	ldr	r3, [r7, #4]
 8022e3e:	2202      	movs	r2, #2
 8022e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8022e44:	687b      	ldr	r3, [r7, #4]
 8022e46:	681b      	ldr	r3, [r3, #0]
 8022e48:	681a      	ldr	r2, [r3, #0]
 8022e4a:	687b      	ldr	r3, [r7, #4]
 8022e4c:	681b      	ldr	r3, [r3, #0]
 8022e4e:	f022 0201 	bic.w	r2, r2, #1
 8022e52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8022e54:	e00f      	b.n	8022e76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8022e56:	f7ff faab 	bl	80223b0 <HAL_GetTick>
 8022e5a:	4602      	mov	r2, r0
 8022e5c:	693b      	ldr	r3, [r7, #16]
 8022e5e:	1ad3      	subs	r3, r2, r3
 8022e60:	2b05      	cmp	r3, #5
 8022e62:	d908      	bls.n	8022e76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8022e64:	687b      	ldr	r3, [r7, #4]
 8022e66:	2220      	movs	r2, #32
 8022e68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8022e6a:	687b      	ldr	r3, [r7, #4]
 8022e6c:	2203      	movs	r2, #3
 8022e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8022e72:	2303      	movs	r3, #3
 8022e74:	e078      	b.n	8022f68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8022e76:	687b      	ldr	r3, [r7, #4]
 8022e78:	681b      	ldr	r3, [r3, #0]
 8022e7a:	681b      	ldr	r3, [r3, #0]
 8022e7c:	f003 0301 	and.w	r3, r3, #1
 8022e80:	2b00      	cmp	r3, #0
 8022e82:	d1e8      	bne.n	8022e56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8022e84:	687b      	ldr	r3, [r7, #4]
 8022e86:	681b      	ldr	r3, [r3, #0]
 8022e88:	681b      	ldr	r3, [r3, #0]
 8022e8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8022e8c:	697a      	ldr	r2, [r7, #20]
 8022e8e:	4b38      	ldr	r3, [pc, #224]	; (8022f70 <HAL_DMA_Init+0x158>)
 8022e90:	4013      	ands	r3, r2
 8022e92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8022e94:	687b      	ldr	r3, [r7, #4]
 8022e96:	685a      	ldr	r2, [r3, #4]
 8022e98:	687b      	ldr	r3, [r7, #4]
 8022e9a:	689b      	ldr	r3, [r3, #8]
 8022e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8022e9e:	687b      	ldr	r3, [r7, #4]
 8022ea0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8022ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8022ea4:	687b      	ldr	r3, [r7, #4]
 8022ea6:	691b      	ldr	r3, [r3, #16]
 8022ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8022eaa:	687b      	ldr	r3, [r7, #4]
 8022eac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8022eae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8022eb0:	687b      	ldr	r3, [r7, #4]
 8022eb2:	699b      	ldr	r3, [r3, #24]
 8022eb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8022eb6:	687b      	ldr	r3, [r7, #4]
 8022eb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8022eba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8022ebc:	687b      	ldr	r3, [r7, #4]
 8022ebe:	6a1b      	ldr	r3, [r3, #32]
 8022ec0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8022ec2:	697a      	ldr	r2, [r7, #20]
 8022ec4:	4313      	orrs	r3, r2
 8022ec6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8022ec8:	687b      	ldr	r3, [r7, #4]
 8022eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022ecc:	2b04      	cmp	r3, #4
 8022ece:	d107      	bne.n	8022ee0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8022ed0:	687b      	ldr	r3, [r7, #4]
 8022ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022ed4:	687b      	ldr	r3, [r7, #4]
 8022ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022ed8:	4313      	orrs	r3, r2
 8022eda:	697a      	ldr	r2, [r7, #20]
 8022edc:	4313      	orrs	r3, r2
 8022ede:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8022ee0:	687b      	ldr	r3, [r7, #4]
 8022ee2:	681b      	ldr	r3, [r3, #0]
 8022ee4:	697a      	ldr	r2, [r7, #20]
 8022ee6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8022ee8:	687b      	ldr	r3, [r7, #4]
 8022eea:	681b      	ldr	r3, [r3, #0]
 8022eec:	695b      	ldr	r3, [r3, #20]
 8022eee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8022ef0:	697b      	ldr	r3, [r7, #20]
 8022ef2:	f023 0307 	bic.w	r3, r3, #7
 8022ef6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8022ef8:	687b      	ldr	r3, [r7, #4]
 8022efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022efc:	697a      	ldr	r2, [r7, #20]
 8022efe:	4313      	orrs	r3, r2
 8022f00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8022f02:	687b      	ldr	r3, [r7, #4]
 8022f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022f06:	2b04      	cmp	r3, #4
 8022f08:	d117      	bne.n	8022f3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8022f0a:	687b      	ldr	r3, [r7, #4]
 8022f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022f0e:	697a      	ldr	r2, [r7, #20]
 8022f10:	4313      	orrs	r3, r2
 8022f12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8022f14:	687b      	ldr	r3, [r7, #4]
 8022f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022f18:	2b00      	cmp	r3, #0
 8022f1a:	d00e      	beq.n	8022f3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8022f1c:	6878      	ldr	r0, [r7, #4]
 8022f1e:	f000 fa6f 	bl	8023400 <DMA_CheckFifoParam>
 8022f22:	4603      	mov	r3, r0
 8022f24:	2b00      	cmp	r3, #0
 8022f26:	d008      	beq.n	8022f3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8022f28:	687b      	ldr	r3, [r7, #4]
 8022f2a:	2240      	movs	r2, #64	; 0x40
 8022f2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8022f2e:	687b      	ldr	r3, [r7, #4]
 8022f30:	2201      	movs	r2, #1
 8022f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8022f36:	2301      	movs	r3, #1
 8022f38:	e016      	b.n	8022f68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8022f3a:	687b      	ldr	r3, [r7, #4]
 8022f3c:	681b      	ldr	r3, [r3, #0]
 8022f3e:	697a      	ldr	r2, [r7, #20]
 8022f40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8022f42:	6878      	ldr	r0, [r7, #4]
 8022f44:	f000 fa26 	bl	8023394 <DMA_CalcBaseAndBitshift>
 8022f48:	4603      	mov	r3, r0
 8022f4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8022f4c:	687b      	ldr	r3, [r7, #4]
 8022f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8022f50:	223f      	movs	r2, #63	; 0x3f
 8022f52:	409a      	lsls	r2, r3
 8022f54:	68fb      	ldr	r3, [r7, #12]
 8022f56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8022f58:	687b      	ldr	r3, [r7, #4]
 8022f5a:	2200      	movs	r2, #0
 8022f5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8022f5e:	687b      	ldr	r3, [r7, #4]
 8022f60:	2201      	movs	r2, #1
 8022f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8022f66:	2300      	movs	r3, #0
}
 8022f68:	4618      	mov	r0, r3
 8022f6a:	3718      	adds	r7, #24
 8022f6c:	46bd      	mov	sp, r7
 8022f6e:	bd80      	pop	{r7, pc}
 8022f70:	f010803f 	.word	0xf010803f

08022f74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8022f74:	b580      	push	{r7, lr}
 8022f76:	b086      	sub	sp, #24
 8022f78:	af00      	add	r7, sp, #0
 8022f7a:	60f8      	str	r0, [r7, #12]
 8022f7c:	60b9      	str	r1, [r7, #8]
 8022f7e:	607a      	str	r2, [r7, #4]
 8022f80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8022f82:	2300      	movs	r3, #0
 8022f84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8022f86:	68fb      	ldr	r3, [r7, #12]
 8022f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8022f8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8022f8c:	68fb      	ldr	r3, [r7, #12]
 8022f8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8022f92:	2b01      	cmp	r3, #1
 8022f94:	d101      	bne.n	8022f9a <HAL_DMA_Start_IT+0x26>
 8022f96:	2302      	movs	r3, #2
 8022f98:	e040      	b.n	802301c <HAL_DMA_Start_IT+0xa8>
 8022f9a:	68fb      	ldr	r3, [r7, #12]
 8022f9c:	2201      	movs	r2, #1
 8022f9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8022fa2:	68fb      	ldr	r3, [r7, #12]
 8022fa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8022fa8:	b2db      	uxtb	r3, r3
 8022faa:	2b01      	cmp	r3, #1
 8022fac:	d12f      	bne.n	802300e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8022fae:	68fb      	ldr	r3, [r7, #12]
 8022fb0:	2202      	movs	r2, #2
 8022fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8022fb6:	68fb      	ldr	r3, [r7, #12]
 8022fb8:	2200      	movs	r2, #0
 8022fba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8022fbc:	683b      	ldr	r3, [r7, #0]
 8022fbe:	687a      	ldr	r2, [r7, #4]
 8022fc0:	68b9      	ldr	r1, [r7, #8]
 8022fc2:	68f8      	ldr	r0, [r7, #12]
 8022fc4:	f000 f9b8 	bl	8023338 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8022fc8:	68fb      	ldr	r3, [r7, #12]
 8022fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8022fcc:	223f      	movs	r2, #63	; 0x3f
 8022fce:	409a      	lsls	r2, r3
 8022fd0:	693b      	ldr	r3, [r7, #16]
 8022fd2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8022fd4:	68fb      	ldr	r3, [r7, #12]
 8022fd6:	681b      	ldr	r3, [r3, #0]
 8022fd8:	681a      	ldr	r2, [r3, #0]
 8022fda:	68fb      	ldr	r3, [r7, #12]
 8022fdc:	681b      	ldr	r3, [r3, #0]
 8022fde:	f042 0216 	orr.w	r2, r2, #22
 8022fe2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8022fe4:	68fb      	ldr	r3, [r7, #12]
 8022fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022fe8:	2b00      	cmp	r3, #0
 8022fea:	d007      	beq.n	8022ffc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8022fec:	68fb      	ldr	r3, [r7, #12]
 8022fee:	681b      	ldr	r3, [r3, #0]
 8022ff0:	681a      	ldr	r2, [r3, #0]
 8022ff2:	68fb      	ldr	r3, [r7, #12]
 8022ff4:	681b      	ldr	r3, [r3, #0]
 8022ff6:	f042 0208 	orr.w	r2, r2, #8
 8022ffa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8022ffc:	68fb      	ldr	r3, [r7, #12]
 8022ffe:	681b      	ldr	r3, [r3, #0]
 8023000:	681a      	ldr	r2, [r3, #0]
 8023002:	68fb      	ldr	r3, [r7, #12]
 8023004:	681b      	ldr	r3, [r3, #0]
 8023006:	f042 0201 	orr.w	r2, r2, #1
 802300a:	601a      	str	r2, [r3, #0]
 802300c:	e005      	b.n	802301a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 802300e:	68fb      	ldr	r3, [r7, #12]
 8023010:	2200      	movs	r2, #0
 8023012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8023016:	2302      	movs	r3, #2
 8023018:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 802301a:	7dfb      	ldrb	r3, [r7, #23]
}
 802301c:	4618      	mov	r0, r3
 802301e:	3718      	adds	r7, #24
 8023020:	46bd      	mov	sp, r7
 8023022:	bd80      	pop	{r7, pc}

08023024 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8023024:	b580      	push	{r7, lr}
 8023026:	b086      	sub	sp, #24
 8023028:	af00      	add	r7, sp, #0
 802302a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 802302c:	2300      	movs	r3, #0
 802302e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8023030:	4b92      	ldr	r3, [pc, #584]	; (802327c <HAL_DMA_IRQHandler+0x258>)
 8023032:	681b      	ldr	r3, [r3, #0]
 8023034:	4a92      	ldr	r2, [pc, #584]	; (8023280 <HAL_DMA_IRQHandler+0x25c>)
 8023036:	fba2 2303 	umull	r2, r3, r2, r3
 802303a:	0a9b      	lsrs	r3, r3, #10
 802303c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802303e:	687b      	ldr	r3, [r7, #4]
 8023040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023042:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8023044:	693b      	ldr	r3, [r7, #16]
 8023046:	681b      	ldr	r3, [r3, #0]
 8023048:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 802304a:	687b      	ldr	r3, [r7, #4]
 802304c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802304e:	2208      	movs	r2, #8
 8023050:	409a      	lsls	r2, r3
 8023052:	68fb      	ldr	r3, [r7, #12]
 8023054:	4013      	ands	r3, r2
 8023056:	2b00      	cmp	r3, #0
 8023058:	d01a      	beq.n	8023090 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 802305a:	687b      	ldr	r3, [r7, #4]
 802305c:	681b      	ldr	r3, [r3, #0]
 802305e:	681b      	ldr	r3, [r3, #0]
 8023060:	f003 0304 	and.w	r3, r3, #4
 8023064:	2b00      	cmp	r3, #0
 8023066:	d013      	beq.n	8023090 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8023068:	687b      	ldr	r3, [r7, #4]
 802306a:	681b      	ldr	r3, [r3, #0]
 802306c:	681a      	ldr	r2, [r3, #0]
 802306e:	687b      	ldr	r3, [r7, #4]
 8023070:	681b      	ldr	r3, [r3, #0]
 8023072:	f022 0204 	bic.w	r2, r2, #4
 8023076:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8023078:	687b      	ldr	r3, [r7, #4]
 802307a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802307c:	2208      	movs	r2, #8
 802307e:	409a      	lsls	r2, r3
 8023080:	693b      	ldr	r3, [r7, #16]
 8023082:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8023084:	687b      	ldr	r3, [r7, #4]
 8023086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023088:	f043 0201 	orr.w	r2, r3, #1
 802308c:	687b      	ldr	r3, [r7, #4]
 802308e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8023090:	687b      	ldr	r3, [r7, #4]
 8023092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023094:	2201      	movs	r2, #1
 8023096:	409a      	lsls	r2, r3
 8023098:	68fb      	ldr	r3, [r7, #12]
 802309a:	4013      	ands	r3, r2
 802309c:	2b00      	cmp	r3, #0
 802309e:	d012      	beq.n	80230c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80230a0:	687b      	ldr	r3, [r7, #4]
 80230a2:	681b      	ldr	r3, [r3, #0]
 80230a4:	695b      	ldr	r3, [r3, #20]
 80230a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80230aa:	2b00      	cmp	r3, #0
 80230ac:	d00b      	beq.n	80230c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80230ae:	687b      	ldr	r3, [r7, #4]
 80230b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80230b2:	2201      	movs	r2, #1
 80230b4:	409a      	lsls	r2, r3
 80230b6:	693b      	ldr	r3, [r7, #16]
 80230b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80230ba:	687b      	ldr	r3, [r7, #4]
 80230bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80230be:	f043 0202 	orr.w	r2, r3, #2
 80230c2:	687b      	ldr	r3, [r7, #4]
 80230c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80230c6:	687b      	ldr	r3, [r7, #4]
 80230c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80230ca:	2204      	movs	r2, #4
 80230cc:	409a      	lsls	r2, r3
 80230ce:	68fb      	ldr	r3, [r7, #12]
 80230d0:	4013      	ands	r3, r2
 80230d2:	2b00      	cmp	r3, #0
 80230d4:	d012      	beq.n	80230fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80230d6:	687b      	ldr	r3, [r7, #4]
 80230d8:	681b      	ldr	r3, [r3, #0]
 80230da:	681b      	ldr	r3, [r3, #0]
 80230dc:	f003 0302 	and.w	r3, r3, #2
 80230e0:	2b00      	cmp	r3, #0
 80230e2:	d00b      	beq.n	80230fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80230e4:	687b      	ldr	r3, [r7, #4]
 80230e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80230e8:	2204      	movs	r2, #4
 80230ea:	409a      	lsls	r2, r3
 80230ec:	693b      	ldr	r3, [r7, #16]
 80230ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80230f0:	687b      	ldr	r3, [r7, #4]
 80230f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80230f4:	f043 0204 	orr.w	r2, r3, #4
 80230f8:	687b      	ldr	r3, [r7, #4]
 80230fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80230fc:	687b      	ldr	r3, [r7, #4]
 80230fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023100:	2210      	movs	r2, #16
 8023102:	409a      	lsls	r2, r3
 8023104:	68fb      	ldr	r3, [r7, #12]
 8023106:	4013      	ands	r3, r2
 8023108:	2b00      	cmp	r3, #0
 802310a:	d043      	beq.n	8023194 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 802310c:	687b      	ldr	r3, [r7, #4]
 802310e:	681b      	ldr	r3, [r3, #0]
 8023110:	681b      	ldr	r3, [r3, #0]
 8023112:	f003 0308 	and.w	r3, r3, #8
 8023116:	2b00      	cmp	r3, #0
 8023118:	d03c      	beq.n	8023194 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 802311a:	687b      	ldr	r3, [r7, #4]
 802311c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802311e:	2210      	movs	r2, #16
 8023120:	409a      	lsls	r2, r3
 8023122:	693b      	ldr	r3, [r7, #16]
 8023124:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8023126:	687b      	ldr	r3, [r7, #4]
 8023128:	681b      	ldr	r3, [r3, #0]
 802312a:	681b      	ldr	r3, [r3, #0]
 802312c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8023130:	2b00      	cmp	r3, #0
 8023132:	d018      	beq.n	8023166 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8023134:	687b      	ldr	r3, [r7, #4]
 8023136:	681b      	ldr	r3, [r3, #0]
 8023138:	681b      	ldr	r3, [r3, #0]
 802313a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802313e:	2b00      	cmp	r3, #0
 8023140:	d108      	bne.n	8023154 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8023142:	687b      	ldr	r3, [r7, #4]
 8023144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023146:	2b00      	cmp	r3, #0
 8023148:	d024      	beq.n	8023194 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 802314a:	687b      	ldr	r3, [r7, #4]
 802314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802314e:	6878      	ldr	r0, [r7, #4]
 8023150:	4798      	blx	r3
 8023152:	e01f      	b.n	8023194 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8023154:	687b      	ldr	r3, [r7, #4]
 8023156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8023158:	2b00      	cmp	r3, #0
 802315a:	d01b      	beq.n	8023194 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 802315c:	687b      	ldr	r3, [r7, #4]
 802315e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8023160:	6878      	ldr	r0, [r7, #4]
 8023162:	4798      	blx	r3
 8023164:	e016      	b.n	8023194 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8023166:	687b      	ldr	r3, [r7, #4]
 8023168:	681b      	ldr	r3, [r3, #0]
 802316a:	681b      	ldr	r3, [r3, #0]
 802316c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023170:	2b00      	cmp	r3, #0
 8023172:	d107      	bne.n	8023184 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8023174:	687b      	ldr	r3, [r7, #4]
 8023176:	681b      	ldr	r3, [r3, #0]
 8023178:	681a      	ldr	r2, [r3, #0]
 802317a:	687b      	ldr	r3, [r7, #4]
 802317c:	681b      	ldr	r3, [r3, #0]
 802317e:	f022 0208 	bic.w	r2, r2, #8
 8023182:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8023184:	687b      	ldr	r3, [r7, #4]
 8023186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023188:	2b00      	cmp	r3, #0
 802318a:	d003      	beq.n	8023194 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 802318c:	687b      	ldr	r3, [r7, #4]
 802318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023190:	6878      	ldr	r0, [r7, #4]
 8023192:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8023194:	687b      	ldr	r3, [r7, #4]
 8023196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023198:	2220      	movs	r2, #32
 802319a:	409a      	lsls	r2, r3
 802319c:	68fb      	ldr	r3, [r7, #12]
 802319e:	4013      	ands	r3, r2
 80231a0:	2b00      	cmp	r3, #0
 80231a2:	f000 808e 	beq.w	80232c2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80231a6:	687b      	ldr	r3, [r7, #4]
 80231a8:	681b      	ldr	r3, [r3, #0]
 80231aa:	681b      	ldr	r3, [r3, #0]
 80231ac:	f003 0310 	and.w	r3, r3, #16
 80231b0:	2b00      	cmp	r3, #0
 80231b2:	f000 8086 	beq.w	80232c2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80231b6:	687b      	ldr	r3, [r7, #4]
 80231b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80231ba:	2220      	movs	r2, #32
 80231bc:	409a      	lsls	r2, r3
 80231be:	693b      	ldr	r3, [r7, #16]
 80231c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80231c2:	687b      	ldr	r3, [r7, #4]
 80231c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80231c8:	b2db      	uxtb	r3, r3
 80231ca:	2b05      	cmp	r3, #5
 80231cc:	d136      	bne.n	802323c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80231ce:	687b      	ldr	r3, [r7, #4]
 80231d0:	681b      	ldr	r3, [r3, #0]
 80231d2:	681a      	ldr	r2, [r3, #0]
 80231d4:	687b      	ldr	r3, [r7, #4]
 80231d6:	681b      	ldr	r3, [r3, #0]
 80231d8:	f022 0216 	bic.w	r2, r2, #22
 80231dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80231de:	687b      	ldr	r3, [r7, #4]
 80231e0:	681b      	ldr	r3, [r3, #0]
 80231e2:	695a      	ldr	r2, [r3, #20]
 80231e4:	687b      	ldr	r3, [r7, #4]
 80231e6:	681b      	ldr	r3, [r3, #0]
 80231e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80231ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80231ee:	687b      	ldr	r3, [r7, #4]
 80231f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80231f2:	2b00      	cmp	r3, #0
 80231f4:	d103      	bne.n	80231fe <HAL_DMA_IRQHandler+0x1da>
 80231f6:	687b      	ldr	r3, [r7, #4]
 80231f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80231fa:	2b00      	cmp	r3, #0
 80231fc:	d007      	beq.n	802320e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80231fe:	687b      	ldr	r3, [r7, #4]
 8023200:	681b      	ldr	r3, [r3, #0]
 8023202:	681a      	ldr	r2, [r3, #0]
 8023204:	687b      	ldr	r3, [r7, #4]
 8023206:	681b      	ldr	r3, [r3, #0]
 8023208:	f022 0208 	bic.w	r2, r2, #8
 802320c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 802320e:	687b      	ldr	r3, [r7, #4]
 8023210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023212:	223f      	movs	r2, #63	; 0x3f
 8023214:	409a      	lsls	r2, r3
 8023216:	693b      	ldr	r3, [r7, #16]
 8023218:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802321a:	687b      	ldr	r3, [r7, #4]
 802321c:	2200      	movs	r2, #0
 802321e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8023222:	687b      	ldr	r3, [r7, #4]
 8023224:	2201      	movs	r2, #1
 8023226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 802322a:	687b      	ldr	r3, [r7, #4]
 802322c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802322e:	2b00      	cmp	r3, #0
 8023230:	d07d      	beq.n	802332e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8023232:	687b      	ldr	r3, [r7, #4]
 8023234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8023236:	6878      	ldr	r0, [r7, #4]
 8023238:	4798      	blx	r3
        }
        return;
 802323a:	e078      	b.n	802332e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 802323c:	687b      	ldr	r3, [r7, #4]
 802323e:	681b      	ldr	r3, [r3, #0]
 8023240:	681b      	ldr	r3, [r3, #0]
 8023242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8023246:	2b00      	cmp	r3, #0
 8023248:	d01c      	beq.n	8023284 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 802324a:	687b      	ldr	r3, [r7, #4]
 802324c:	681b      	ldr	r3, [r3, #0]
 802324e:	681b      	ldr	r3, [r3, #0]
 8023250:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8023254:	2b00      	cmp	r3, #0
 8023256:	d108      	bne.n	802326a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8023258:	687b      	ldr	r3, [r7, #4]
 802325a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802325c:	2b00      	cmp	r3, #0
 802325e:	d030      	beq.n	80232c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8023260:	687b      	ldr	r3, [r7, #4]
 8023262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023264:	6878      	ldr	r0, [r7, #4]
 8023266:	4798      	blx	r3
 8023268:	e02b      	b.n	80232c2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 802326a:	687b      	ldr	r3, [r7, #4]
 802326c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802326e:	2b00      	cmp	r3, #0
 8023270:	d027      	beq.n	80232c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8023272:	687b      	ldr	r3, [r7, #4]
 8023274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023276:	6878      	ldr	r0, [r7, #4]
 8023278:	4798      	blx	r3
 802327a:	e022      	b.n	80232c2 <HAL_DMA_IRQHandler+0x29e>
 802327c:	20000000 	.word	0x20000000
 8023280:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8023284:	687b      	ldr	r3, [r7, #4]
 8023286:	681b      	ldr	r3, [r3, #0]
 8023288:	681b      	ldr	r3, [r3, #0]
 802328a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802328e:	2b00      	cmp	r3, #0
 8023290:	d10f      	bne.n	80232b2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8023292:	687b      	ldr	r3, [r7, #4]
 8023294:	681b      	ldr	r3, [r3, #0]
 8023296:	681a      	ldr	r2, [r3, #0]
 8023298:	687b      	ldr	r3, [r7, #4]
 802329a:	681b      	ldr	r3, [r3, #0]
 802329c:	f022 0210 	bic.w	r2, r2, #16
 80232a0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80232a2:	687b      	ldr	r3, [r7, #4]
 80232a4:	2200      	movs	r2, #0
 80232a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80232aa:	687b      	ldr	r3, [r7, #4]
 80232ac:	2201      	movs	r2, #1
 80232ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80232b2:	687b      	ldr	r3, [r7, #4]
 80232b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80232b6:	2b00      	cmp	r3, #0
 80232b8:	d003      	beq.n	80232c2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80232ba:	687b      	ldr	r3, [r7, #4]
 80232bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80232be:	6878      	ldr	r0, [r7, #4]
 80232c0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80232c2:	687b      	ldr	r3, [r7, #4]
 80232c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80232c6:	2b00      	cmp	r3, #0
 80232c8:	d032      	beq.n	8023330 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80232ca:	687b      	ldr	r3, [r7, #4]
 80232cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80232ce:	f003 0301 	and.w	r3, r3, #1
 80232d2:	2b00      	cmp	r3, #0
 80232d4:	d022      	beq.n	802331c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80232d6:	687b      	ldr	r3, [r7, #4]
 80232d8:	2205      	movs	r2, #5
 80232da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80232de:	687b      	ldr	r3, [r7, #4]
 80232e0:	681b      	ldr	r3, [r3, #0]
 80232e2:	681a      	ldr	r2, [r3, #0]
 80232e4:	687b      	ldr	r3, [r7, #4]
 80232e6:	681b      	ldr	r3, [r3, #0]
 80232e8:	f022 0201 	bic.w	r2, r2, #1
 80232ec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80232ee:	68bb      	ldr	r3, [r7, #8]
 80232f0:	3301      	adds	r3, #1
 80232f2:	60bb      	str	r3, [r7, #8]
 80232f4:	697a      	ldr	r2, [r7, #20]
 80232f6:	429a      	cmp	r2, r3
 80232f8:	d307      	bcc.n	802330a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80232fa:	687b      	ldr	r3, [r7, #4]
 80232fc:	681b      	ldr	r3, [r3, #0]
 80232fe:	681b      	ldr	r3, [r3, #0]
 8023300:	f003 0301 	and.w	r3, r3, #1
 8023304:	2b00      	cmp	r3, #0
 8023306:	d1f2      	bne.n	80232ee <HAL_DMA_IRQHandler+0x2ca>
 8023308:	e000      	b.n	802330c <HAL_DMA_IRQHandler+0x2e8>
          break;
 802330a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 802330c:	687b      	ldr	r3, [r7, #4]
 802330e:	2200      	movs	r2, #0
 8023310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8023314:	687b      	ldr	r3, [r7, #4]
 8023316:	2201      	movs	r2, #1
 8023318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 802331c:	687b      	ldr	r3, [r7, #4]
 802331e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023320:	2b00      	cmp	r3, #0
 8023322:	d005      	beq.n	8023330 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8023324:	687b      	ldr	r3, [r7, #4]
 8023326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023328:	6878      	ldr	r0, [r7, #4]
 802332a:	4798      	blx	r3
 802332c:	e000      	b.n	8023330 <HAL_DMA_IRQHandler+0x30c>
        return;
 802332e:	bf00      	nop
    }
  }
}
 8023330:	3718      	adds	r7, #24
 8023332:	46bd      	mov	sp, r7
 8023334:	bd80      	pop	{r7, pc}
 8023336:	bf00      	nop

08023338 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8023338:	b480      	push	{r7}
 802333a:	b085      	sub	sp, #20
 802333c:	af00      	add	r7, sp, #0
 802333e:	60f8      	str	r0, [r7, #12]
 8023340:	60b9      	str	r1, [r7, #8]
 8023342:	607a      	str	r2, [r7, #4]
 8023344:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8023346:	68fb      	ldr	r3, [r7, #12]
 8023348:	681b      	ldr	r3, [r3, #0]
 802334a:	681a      	ldr	r2, [r3, #0]
 802334c:	68fb      	ldr	r3, [r7, #12]
 802334e:	681b      	ldr	r3, [r3, #0]
 8023350:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8023354:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8023356:	68fb      	ldr	r3, [r7, #12]
 8023358:	681b      	ldr	r3, [r3, #0]
 802335a:	683a      	ldr	r2, [r7, #0]
 802335c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 802335e:	68fb      	ldr	r3, [r7, #12]
 8023360:	689b      	ldr	r3, [r3, #8]
 8023362:	2b40      	cmp	r3, #64	; 0x40
 8023364:	d108      	bne.n	8023378 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8023366:	68fb      	ldr	r3, [r7, #12]
 8023368:	681b      	ldr	r3, [r3, #0]
 802336a:	687a      	ldr	r2, [r7, #4]
 802336c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 802336e:	68fb      	ldr	r3, [r7, #12]
 8023370:	681b      	ldr	r3, [r3, #0]
 8023372:	68ba      	ldr	r2, [r7, #8]
 8023374:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8023376:	e007      	b.n	8023388 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8023378:	68fb      	ldr	r3, [r7, #12]
 802337a:	681b      	ldr	r3, [r3, #0]
 802337c:	68ba      	ldr	r2, [r7, #8]
 802337e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8023380:	68fb      	ldr	r3, [r7, #12]
 8023382:	681b      	ldr	r3, [r3, #0]
 8023384:	687a      	ldr	r2, [r7, #4]
 8023386:	60da      	str	r2, [r3, #12]
}
 8023388:	bf00      	nop
 802338a:	3714      	adds	r7, #20
 802338c:	46bd      	mov	sp, r7
 802338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023392:	4770      	bx	lr

08023394 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8023394:	b480      	push	{r7}
 8023396:	b085      	sub	sp, #20
 8023398:	af00      	add	r7, sp, #0
 802339a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 802339c:	687b      	ldr	r3, [r7, #4]
 802339e:	681b      	ldr	r3, [r3, #0]
 80233a0:	b2db      	uxtb	r3, r3
 80233a2:	3b10      	subs	r3, #16
 80233a4:	4a14      	ldr	r2, [pc, #80]	; (80233f8 <DMA_CalcBaseAndBitshift+0x64>)
 80233a6:	fba2 2303 	umull	r2, r3, r2, r3
 80233aa:	091b      	lsrs	r3, r3, #4
 80233ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80233ae:	4a13      	ldr	r2, [pc, #76]	; (80233fc <DMA_CalcBaseAndBitshift+0x68>)
 80233b0:	68fb      	ldr	r3, [r7, #12]
 80233b2:	4413      	add	r3, r2
 80233b4:	781b      	ldrb	r3, [r3, #0]
 80233b6:	461a      	mov	r2, r3
 80233b8:	687b      	ldr	r3, [r7, #4]
 80233ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80233bc:	68fb      	ldr	r3, [r7, #12]
 80233be:	2b03      	cmp	r3, #3
 80233c0:	d909      	bls.n	80233d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80233c2:	687b      	ldr	r3, [r7, #4]
 80233c4:	681b      	ldr	r3, [r3, #0]
 80233c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80233ca:	f023 0303 	bic.w	r3, r3, #3
 80233ce:	1d1a      	adds	r2, r3, #4
 80233d0:	687b      	ldr	r3, [r7, #4]
 80233d2:	659a      	str	r2, [r3, #88]	; 0x58
 80233d4:	e007      	b.n	80233e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80233d6:	687b      	ldr	r3, [r7, #4]
 80233d8:	681b      	ldr	r3, [r3, #0]
 80233da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80233de:	f023 0303 	bic.w	r3, r3, #3
 80233e2:	687a      	ldr	r2, [r7, #4]
 80233e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80233e6:	687b      	ldr	r3, [r7, #4]
 80233e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80233ea:	4618      	mov	r0, r3
 80233ec:	3714      	adds	r7, #20
 80233ee:	46bd      	mov	sp, r7
 80233f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233f4:	4770      	bx	lr
 80233f6:	bf00      	nop
 80233f8:	aaaaaaab 	.word	0xaaaaaaab
 80233fc:	08025440 	.word	0x08025440

08023400 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8023400:	b480      	push	{r7}
 8023402:	b085      	sub	sp, #20
 8023404:	af00      	add	r7, sp, #0
 8023406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8023408:	2300      	movs	r3, #0
 802340a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 802340c:	687b      	ldr	r3, [r7, #4]
 802340e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023410:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8023412:	687b      	ldr	r3, [r7, #4]
 8023414:	699b      	ldr	r3, [r3, #24]
 8023416:	2b00      	cmp	r3, #0
 8023418:	d11f      	bne.n	802345a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 802341a:	68bb      	ldr	r3, [r7, #8]
 802341c:	2b03      	cmp	r3, #3
 802341e:	d855      	bhi.n	80234cc <DMA_CheckFifoParam+0xcc>
 8023420:	a201      	add	r2, pc, #4	; (adr r2, 8023428 <DMA_CheckFifoParam+0x28>)
 8023422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023426:	bf00      	nop
 8023428:	08023439 	.word	0x08023439
 802342c:	0802344b 	.word	0x0802344b
 8023430:	08023439 	.word	0x08023439
 8023434:	080234cd 	.word	0x080234cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023438:	687b      	ldr	r3, [r7, #4]
 802343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802343c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023440:	2b00      	cmp	r3, #0
 8023442:	d045      	beq.n	80234d0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8023444:	2301      	movs	r3, #1
 8023446:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023448:	e042      	b.n	80234d0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 802344a:	687b      	ldr	r3, [r7, #4]
 802344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802344e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8023452:	d13f      	bne.n	80234d4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8023454:	2301      	movs	r3, #1
 8023456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023458:	e03c      	b.n	80234d4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 802345a:	687b      	ldr	r3, [r7, #4]
 802345c:	699b      	ldr	r3, [r3, #24]
 802345e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8023462:	d121      	bne.n	80234a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8023464:	68bb      	ldr	r3, [r7, #8]
 8023466:	2b03      	cmp	r3, #3
 8023468:	d836      	bhi.n	80234d8 <DMA_CheckFifoParam+0xd8>
 802346a:	a201      	add	r2, pc, #4	; (adr r2, 8023470 <DMA_CheckFifoParam+0x70>)
 802346c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023470:	08023481 	.word	0x08023481
 8023474:	08023487 	.word	0x08023487
 8023478:	08023481 	.word	0x08023481
 802347c:	08023499 	.word	0x08023499
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8023480:	2301      	movs	r3, #1
 8023482:	73fb      	strb	r3, [r7, #15]
      break;
 8023484:	e02f      	b.n	80234e6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023486:	687b      	ldr	r3, [r7, #4]
 8023488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802348a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802348e:	2b00      	cmp	r3, #0
 8023490:	d024      	beq.n	80234dc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8023492:	2301      	movs	r3, #1
 8023494:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023496:	e021      	b.n	80234dc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8023498:	687b      	ldr	r3, [r7, #4]
 802349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802349c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80234a0:	d11e      	bne.n	80234e0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80234a2:	2301      	movs	r3, #1
 80234a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80234a6:	e01b      	b.n	80234e0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80234a8:	68bb      	ldr	r3, [r7, #8]
 80234aa:	2b02      	cmp	r3, #2
 80234ac:	d902      	bls.n	80234b4 <DMA_CheckFifoParam+0xb4>
 80234ae:	2b03      	cmp	r3, #3
 80234b0:	d003      	beq.n	80234ba <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80234b2:	e018      	b.n	80234e6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80234b4:	2301      	movs	r3, #1
 80234b6:	73fb      	strb	r3, [r7, #15]
      break;
 80234b8:	e015      	b.n	80234e6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80234ba:	687b      	ldr	r3, [r7, #4]
 80234bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80234be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80234c2:	2b00      	cmp	r3, #0
 80234c4:	d00e      	beq.n	80234e4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80234c6:	2301      	movs	r3, #1
 80234c8:	73fb      	strb	r3, [r7, #15]
      break;
 80234ca:	e00b      	b.n	80234e4 <DMA_CheckFifoParam+0xe4>
      break;
 80234cc:	bf00      	nop
 80234ce:	e00a      	b.n	80234e6 <DMA_CheckFifoParam+0xe6>
      break;
 80234d0:	bf00      	nop
 80234d2:	e008      	b.n	80234e6 <DMA_CheckFifoParam+0xe6>
      break;
 80234d4:	bf00      	nop
 80234d6:	e006      	b.n	80234e6 <DMA_CheckFifoParam+0xe6>
      break;
 80234d8:	bf00      	nop
 80234da:	e004      	b.n	80234e6 <DMA_CheckFifoParam+0xe6>
      break;
 80234dc:	bf00      	nop
 80234de:	e002      	b.n	80234e6 <DMA_CheckFifoParam+0xe6>
      break;   
 80234e0:	bf00      	nop
 80234e2:	e000      	b.n	80234e6 <DMA_CheckFifoParam+0xe6>
      break;
 80234e4:	bf00      	nop
    }
  } 
  
  return status; 
 80234e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80234e8:	4618      	mov	r0, r3
 80234ea:	3714      	adds	r7, #20
 80234ec:	46bd      	mov	sp, r7
 80234ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234f2:	4770      	bx	lr

080234f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80234f4:	b480      	push	{r7}
 80234f6:	b089      	sub	sp, #36	; 0x24
 80234f8:	af00      	add	r7, sp, #0
 80234fa:	6078      	str	r0, [r7, #4]
 80234fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80234fe:	2300      	movs	r3, #0
 8023500:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8023502:	2300      	movs	r3, #0
 8023504:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8023506:	2300      	movs	r3, #0
 8023508:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 802350a:	2300      	movs	r3, #0
 802350c:	61fb      	str	r3, [r7, #28]
 802350e:	e16b      	b.n	80237e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8023510:	2201      	movs	r2, #1
 8023512:	69fb      	ldr	r3, [r7, #28]
 8023514:	fa02 f303 	lsl.w	r3, r2, r3
 8023518:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 802351a:	683b      	ldr	r3, [r7, #0]
 802351c:	681b      	ldr	r3, [r3, #0]
 802351e:	697a      	ldr	r2, [r7, #20]
 8023520:	4013      	ands	r3, r2
 8023522:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8023524:	693a      	ldr	r2, [r7, #16]
 8023526:	697b      	ldr	r3, [r7, #20]
 8023528:	429a      	cmp	r2, r3
 802352a:	f040 815a 	bne.w	80237e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 802352e:	683b      	ldr	r3, [r7, #0]
 8023530:	685b      	ldr	r3, [r3, #4]
 8023532:	2b01      	cmp	r3, #1
 8023534:	d00b      	beq.n	802354e <HAL_GPIO_Init+0x5a>
 8023536:	683b      	ldr	r3, [r7, #0]
 8023538:	685b      	ldr	r3, [r3, #4]
 802353a:	2b02      	cmp	r3, #2
 802353c:	d007      	beq.n	802354e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 802353e:	683b      	ldr	r3, [r7, #0]
 8023540:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8023542:	2b11      	cmp	r3, #17
 8023544:	d003      	beq.n	802354e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8023546:	683b      	ldr	r3, [r7, #0]
 8023548:	685b      	ldr	r3, [r3, #4]
 802354a:	2b12      	cmp	r3, #18
 802354c:	d130      	bne.n	80235b0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 802354e:	687b      	ldr	r3, [r7, #4]
 8023550:	689b      	ldr	r3, [r3, #8]
 8023552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8023554:	69fb      	ldr	r3, [r7, #28]
 8023556:	005b      	lsls	r3, r3, #1
 8023558:	2203      	movs	r2, #3
 802355a:	fa02 f303 	lsl.w	r3, r2, r3
 802355e:	43db      	mvns	r3, r3
 8023560:	69ba      	ldr	r2, [r7, #24]
 8023562:	4013      	ands	r3, r2
 8023564:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8023566:	683b      	ldr	r3, [r7, #0]
 8023568:	68da      	ldr	r2, [r3, #12]
 802356a:	69fb      	ldr	r3, [r7, #28]
 802356c:	005b      	lsls	r3, r3, #1
 802356e:	fa02 f303 	lsl.w	r3, r2, r3
 8023572:	69ba      	ldr	r2, [r7, #24]
 8023574:	4313      	orrs	r3, r2
 8023576:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8023578:	687b      	ldr	r3, [r7, #4]
 802357a:	69ba      	ldr	r2, [r7, #24]
 802357c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802357e:	687b      	ldr	r3, [r7, #4]
 8023580:	685b      	ldr	r3, [r3, #4]
 8023582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8023584:	2201      	movs	r2, #1
 8023586:	69fb      	ldr	r3, [r7, #28]
 8023588:	fa02 f303 	lsl.w	r3, r2, r3
 802358c:	43db      	mvns	r3, r3
 802358e:	69ba      	ldr	r2, [r7, #24]
 8023590:	4013      	ands	r3, r2
 8023592:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8023594:	683b      	ldr	r3, [r7, #0]
 8023596:	685b      	ldr	r3, [r3, #4]
 8023598:	091b      	lsrs	r3, r3, #4
 802359a:	f003 0201 	and.w	r2, r3, #1
 802359e:	69fb      	ldr	r3, [r7, #28]
 80235a0:	fa02 f303 	lsl.w	r3, r2, r3
 80235a4:	69ba      	ldr	r2, [r7, #24]
 80235a6:	4313      	orrs	r3, r2
 80235a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80235aa:	687b      	ldr	r3, [r7, #4]
 80235ac:	69ba      	ldr	r2, [r7, #24]
 80235ae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80235b0:	687b      	ldr	r3, [r7, #4]
 80235b2:	68db      	ldr	r3, [r3, #12]
 80235b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80235b6:	69fb      	ldr	r3, [r7, #28]
 80235b8:	005b      	lsls	r3, r3, #1
 80235ba:	2203      	movs	r2, #3
 80235bc:	fa02 f303 	lsl.w	r3, r2, r3
 80235c0:	43db      	mvns	r3, r3
 80235c2:	69ba      	ldr	r2, [r7, #24]
 80235c4:	4013      	ands	r3, r2
 80235c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80235c8:	683b      	ldr	r3, [r7, #0]
 80235ca:	689a      	ldr	r2, [r3, #8]
 80235cc:	69fb      	ldr	r3, [r7, #28]
 80235ce:	005b      	lsls	r3, r3, #1
 80235d0:	fa02 f303 	lsl.w	r3, r2, r3
 80235d4:	69ba      	ldr	r2, [r7, #24]
 80235d6:	4313      	orrs	r3, r2
 80235d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80235da:	687b      	ldr	r3, [r7, #4]
 80235dc:	69ba      	ldr	r2, [r7, #24]
 80235de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80235e0:	683b      	ldr	r3, [r7, #0]
 80235e2:	685b      	ldr	r3, [r3, #4]
 80235e4:	2b02      	cmp	r3, #2
 80235e6:	d003      	beq.n	80235f0 <HAL_GPIO_Init+0xfc>
 80235e8:	683b      	ldr	r3, [r7, #0]
 80235ea:	685b      	ldr	r3, [r3, #4]
 80235ec:	2b12      	cmp	r3, #18
 80235ee:	d123      	bne.n	8023638 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80235f0:	69fb      	ldr	r3, [r7, #28]
 80235f2:	08da      	lsrs	r2, r3, #3
 80235f4:	687b      	ldr	r3, [r7, #4]
 80235f6:	3208      	adds	r2, #8
 80235f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80235fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80235fe:	69fb      	ldr	r3, [r7, #28]
 8023600:	f003 0307 	and.w	r3, r3, #7
 8023604:	009b      	lsls	r3, r3, #2
 8023606:	220f      	movs	r2, #15
 8023608:	fa02 f303 	lsl.w	r3, r2, r3
 802360c:	43db      	mvns	r3, r3
 802360e:	69ba      	ldr	r2, [r7, #24]
 8023610:	4013      	ands	r3, r2
 8023612:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8023614:	683b      	ldr	r3, [r7, #0]
 8023616:	691a      	ldr	r2, [r3, #16]
 8023618:	69fb      	ldr	r3, [r7, #28]
 802361a:	f003 0307 	and.w	r3, r3, #7
 802361e:	009b      	lsls	r3, r3, #2
 8023620:	fa02 f303 	lsl.w	r3, r2, r3
 8023624:	69ba      	ldr	r2, [r7, #24]
 8023626:	4313      	orrs	r3, r2
 8023628:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 802362a:	69fb      	ldr	r3, [r7, #28]
 802362c:	08da      	lsrs	r2, r3, #3
 802362e:	687b      	ldr	r3, [r7, #4]
 8023630:	3208      	adds	r2, #8
 8023632:	69b9      	ldr	r1, [r7, #24]
 8023634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8023638:	687b      	ldr	r3, [r7, #4]
 802363a:	681b      	ldr	r3, [r3, #0]
 802363c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 802363e:	69fb      	ldr	r3, [r7, #28]
 8023640:	005b      	lsls	r3, r3, #1
 8023642:	2203      	movs	r2, #3
 8023644:	fa02 f303 	lsl.w	r3, r2, r3
 8023648:	43db      	mvns	r3, r3
 802364a:	69ba      	ldr	r2, [r7, #24]
 802364c:	4013      	ands	r3, r2
 802364e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8023650:	683b      	ldr	r3, [r7, #0]
 8023652:	685b      	ldr	r3, [r3, #4]
 8023654:	f003 0203 	and.w	r2, r3, #3
 8023658:	69fb      	ldr	r3, [r7, #28]
 802365a:	005b      	lsls	r3, r3, #1
 802365c:	fa02 f303 	lsl.w	r3, r2, r3
 8023660:	69ba      	ldr	r2, [r7, #24]
 8023662:	4313      	orrs	r3, r2
 8023664:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8023666:	687b      	ldr	r3, [r7, #4]
 8023668:	69ba      	ldr	r2, [r7, #24]
 802366a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 802366c:	683b      	ldr	r3, [r7, #0]
 802366e:	685b      	ldr	r3, [r3, #4]
 8023670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8023674:	2b00      	cmp	r3, #0
 8023676:	f000 80b4 	beq.w	80237e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802367a:	2300      	movs	r3, #0
 802367c:	60fb      	str	r3, [r7, #12]
 802367e:	4b5f      	ldr	r3, [pc, #380]	; (80237fc <HAL_GPIO_Init+0x308>)
 8023680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023682:	4a5e      	ldr	r2, [pc, #376]	; (80237fc <HAL_GPIO_Init+0x308>)
 8023684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8023688:	6453      	str	r3, [r2, #68]	; 0x44
 802368a:	4b5c      	ldr	r3, [pc, #368]	; (80237fc <HAL_GPIO_Init+0x308>)
 802368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802368e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8023692:	60fb      	str	r3, [r7, #12]
 8023694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8023696:	4a5a      	ldr	r2, [pc, #360]	; (8023800 <HAL_GPIO_Init+0x30c>)
 8023698:	69fb      	ldr	r3, [r7, #28]
 802369a:	089b      	lsrs	r3, r3, #2
 802369c:	3302      	adds	r3, #2
 802369e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80236a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80236a4:	69fb      	ldr	r3, [r7, #28]
 80236a6:	f003 0303 	and.w	r3, r3, #3
 80236aa:	009b      	lsls	r3, r3, #2
 80236ac:	220f      	movs	r2, #15
 80236ae:	fa02 f303 	lsl.w	r3, r2, r3
 80236b2:	43db      	mvns	r3, r3
 80236b4:	69ba      	ldr	r2, [r7, #24]
 80236b6:	4013      	ands	r3, r2
 80236b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80236ba:	687b      	ldr	r3, [r7, #4]
 80236bc:	4a51      	ldr	r2, [pc, #324]	; (8023804 <HAL_GPIO_Init+0x310>)
 80236be:	4293      	cmp	r3, r2
 80236c0:	d02b      	beq.n	802371a <HAL_GPIO_Init+0x226>
 80236c2:	687b      	ldr	r3, [r7, #4]
 80236c4:	4a50      	ldr	r2, [pc, #320]	; (8023808 <HAL_GPIO_Init+0x314>)
 80236c6:	4293      	cmp	r3, r2
 80236c8:	d025      	beq.n	8023716 <HAL_GPIO_Init+0x222>
 80236ca:	687b      	ldr	r3, [r7, #4]
 80236cc:	4a4f      	ldr	r2, [pc, #316]	; (802380c <HAL_GPIO_Init+0x318>)
 80236ce:	4293      	cmp	r3, r2
 80236d0:	d01f      	beq.n	8023712 <HAL_GPIO_Init+0x21e>
 80236d2:	687b      	ldr	r3, [r7, #4]
 80236d4:	4a4e      	ldr	r2, [pc, #312]	; (8023810 <HAL_GPIO_Init+0x31c>)
 80236d6:	4293      	cmp	r3, r2
 80236d8:	d019      	beq.n	802370e <HAL_GPIO_Init+0x21a>
 80236da:	687b      	ldr	r3, [r7, #4]
 80236dc:	4a4d      	ldr	r2, [pc, #308]	; (8023814 <HAL_GPIO_Init+0x320>)
 80236de:	4293      	cmp	r3, r2
 80236e0:	d013      	beq.n	802370a <HAL_GPIO_Init+0x216>
 80236e2:	687b      	ldr	r3, [r7, #4]
 80236e4:	4a4c      	ldr	r2, [pc, #304]	; (8023818 <HAL_GPIO_Init+0x324>)
 80236e6:	4293      	cmp	r3, r2
 80236e8:	d00d      	beq.n	8023706 <HAL_GPIO_Init+0x212>
 80236ea:	687b      	ldr	r3, [r7, #4]
 80236ec:	4a4b      	ldr	r2, [pc, #300]	; (802381c <HAL_GPIO_Init+0x328>)
 80236ee:	4293      	cmp	r3, r2
 80236f0:	d007      	beq.n	8023702 <HAL_GPIO_Init+0x20e>
 80236f2:	687b      	ldr	r3, [r7, #4]
 80236f4:	4a4a      	ldr	r2, [pc, #296]	; (8023820 <HAL_GPIO_Init+0x32c>)
 80236f6:	4293      	cmp	r3, r2
 80236f8:	d101      	bne.n	80236fe <HAL_GPIO_Init+0x20a>
 80236fa:	2307      	movs	r3, #7
 80236fc:	e00e      	b.n	802371c <HAL_GPIO_Init+0x228>
 80236fe:	2308      	movs	r3, #8
 8023700:	e00c      	b.n	802371c <HAL_GPIO_Init+0x228>
 8023702:	2306      	movs	r3, #6
 8023704:	e00a      	b.n	802371c <HAL_GPIO_Init+0x228>
 8023706:	2305      	movs	r3, #5
 8023708:	e008      	b.n	802371c <HAL_GPIO_Init+0x228>
 802370a:	2304      	movs	r3, #4
 802370c:	e006      	b.n	802371c <HAL_GPIO_Init+0x228>
 802370e:	2303      	movs	r3, #3
 8023710:	e004      	b.n	802371c <HAL_GPIO_Init+0x228>
 8023712:	2302      	movs	r3, #2
 8023714:	e002      	b.n	802371c <HAL_GPIO_Init+0x228>
 8023716:	2301      	movs	r3, #1
 8023718:	e000      	b.n	802371c <HAL_GPIO_Init+0x228>
 802371a:	2300      	movs	r3, #0
 802371c:	69fa      	ldr	r2, [r7, #28]
 802371e:	f002 0203 	and.w	r2, r2, #3
 8023722:	0092      	lsls	r2, r2, #2
 8023724:	4093      	lsls	r3, r2
 8023726:	69ba      	ldr	r2, [r7, #24]
 8023728:	4313      	orrs	r3, r2
 802372a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 802372c:	4934      	ldr	r1, [pc, #208]	; (8023800 <HAL_GPIO_Init+0x30c>)
 802372e:	69fb      	ldr	r3, [r7, #28]
 8023730:	089b      	lsrs	r3, r3, #2
 8023732:	3302      	adds	r3, #2
 8023734:	69ba      	ldr	r2, [r7, #24]
 8023736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 802373a:	4b3a      	ldr	r3, [pc, #232]	; (8023824 <HAL_GPIO_Init+0x330>)
 802373c:	681b      	ldr	r3, [r3, #0]
 802373e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8023740:	693b      	ldr	r3, [r7, #16]
 8023742:	43db      	mvns	r3, r3
 8023744:	69ba      	ldr	r2, [r7, #24]
 8023746:	4013      	ands	r3, r2
 8023748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 802374a:	683b      	ldr	r3, [r7, #0]
 802374c:	685b      	ldr	r3, [r3, #4]
 802374e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8023752:	2b00      	cmp	r3, #0
 8023754:	d003      	beq.n	802375e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8023756:	69ba      	ldr	r2, [r7, #24]
 8023758:	693b      	ldr	r3, [r7, #16]
 802375a:	4313      	orrs	r3, r2
 802375c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 802375e:	4a31      	ldr	r2, [pc, #196]	; (8023824 <HAL_GPIO_Init+0x330>)
 8023760:	69bb      	ldr	r3, [r7, #24]
 8023762:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8023764:	4b2f      	ldr	r3, [pc, #188]	; (8023824 <HAL_GPIO_Init+0x330>)
 8023766:	685b      	ldr	r3, [r3, #4]
 8023768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802376a:	693b      	ldr	r3, [r7, #16]
 802376c:	43db      	mvns	r3, r3
 802376e:	69ba      	ldr	r2, [r7, #24]
 8023770:	4013      	ands	r3, r2
 8023772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8023774:	683b      	ldr	r3, [r7, #0]
 8023776:	685b      	ldr	r3, [r3, #4]
 8023778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802377c:	2b00      	cmp	r3, #0
 802377e:	d003      	beq.n	8023788 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8023780:	69ba      	ldr	r2, [r7, #24]
 8023782:	693b      	ldr	r3, [r7, #16]
 8023784:	4313      	orrs	r3, r2
 8023786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8023788:	4a26      	ldr	r2, [pc, #152]	; (8023824 <HAL_GPIO_Init+0x330>)
 802378a:	69bb      	ldr	r3, [r7, #24]
 802378c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 802378e:	4b25      	ldr	r3, [pc, #148]	; (8023824 <HAL_GPIO_Init+0x330>)
 8023790:	689b      	ldr	r3, [r3, #8]
 8023792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8023794:	693b      	ldr	r3, [r7, #16]
 8023796:	43db      	mvns	r3, r3
 8023798:	69ba      	ldr	r2, [r7, #24]
 802379a:	4013      	ands	r3, r2
 802379c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 802379e:	683b      	ldr	r3, [r7, #0]
 80237a0:	685b      	ldr	r3, [r3, #4]
 80237a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80237a6:	2b00      	cmp	r3, #0
 80237a8:	d003      	beq.n	80237b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80237aa:	69ba      	ldr	r2, [r7, #24]
 80237ac:	693b      	ldr	r3, [r7, #16]
 80237ae:	4313      	orrs	r3, r2
 80237b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80237b2:	4a1c      	ldr	r2, [pc, #112]	; (8023824 <HAL_GPIO_Init+0x330>)
 80237b4:	69bb      	ldr	r3, [r7, #24]
 80237b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80237b8:	4b1a      	ldr	r3, [pc, #104]	; (8023824 <HAL_GPIO_Init+0x330>)
 80237ba:	68db      	ldr	r3, [r3, #12]
 80237bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80237be:	693b      	ldr	r3, [r7, #16]
 80237c0:	43db      	mvns	r3, r3
 80237c2:	69ba      	ldr	r2, [r7, #24]
 80237c4:	4013      	ands	r3, r2
 80237c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80237c8:	683b      	ldr	r3, [r7, #0]
 80237ca:	685b      	ldr	r3, [r3, #4]
 80237cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80237d0:	2b00      	cmp	r3, #0
 80237d2:	d003      	beq.n	80237dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80237d4:	69ba      	ldr	r2, [r7, #24]
 80237d6:	693b      	ldr	r3, [r7, #16]
 80237d8:	4313      	orrs	r3, r2
 80237da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80237dc:	4a11      	ldr	r2, [pc, #68]	; (8023824 <HAL_GPIO_Init+0x330>)
 80237de:	69bb      	ldr	r3, [r7, #24]
 80237e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80237e2:	69fb      	ldr	r3, [r7, #28]
 80237e4:	3301      	adds	r3, #1
 80237e6:	61fb      	str	r3, [r7, #28]
 80237e8:	69fb      	ldr	r3, [r7, #28]
 80237ea:	2b0f      	cmp	r3, #15
 80237ec:	f67f ae90 	bls.w	8023510 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80237f0:	bf00      	nop
 80237f2:	3724      	adds	r7, #36	; 0x24
 80237f4:	46bd      	mov	sp, r7
 80237f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237fa:	4770      	bx	lr
 80237fc:	40023800 	.word	0x40023800
 8023800:	40013800 	.word	0x40013800
 8023804:	40020000 	.word	0x40020000
 8023808:	40020400 	.word	0x40020400
 802380c:	40020800 	.word	0x40020800
 8023810:	40020c00 	.word	0x40020c00
 8023814:	40021000 	.word	0x40021000
 8023818:	40021400 	.word	0x40021400
 802381c:	40021800 	.word	0x40021800
 8023820:	40021c00 	.word	0x40021c00
 8023824:	40013c00 	.word	0x40013c00

08023828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8023828:	b480      	push	{r7}
 802382a:	b083      	sub	sp, #12
 802382c:	af00      	add	r7, sp, #0
 802382e:	6078      	str	r0, [r7, #4]
 8023830:	460b      	mov	r3, r1
 8023832:	807b      	strh	r3, [r7, #2]
 8023834:	4613      	mov	r3, r2
 8023836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8023838:	787b      	ldrb	r3, [r7, #1]
 802383a:	2b00      	cmp	r3, #0
 802383c:	d003      	beq.n	8023846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 802383e:	887a      	ldrh	r2, [r7, #2]
 8023840:	687b      	ldr	r3, [r7, #4]
 8023842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8023844:	e003      	b.n	802384e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8023846:	887b      	ldrh	r3, [r7, #2]
 8023848:	041a      	lsls	r2, r3, #16
 802384a:	687b      	ldr	r3, [r7, #4]
 802384c:	619a      	str	r2, [r3, #24]
}
 802384e:	bf00      	nop
 8023850:	370c      	adds	r7, #12
 8023852:	46bd      	mov	sp, r7
 8023854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023858:	4770      	bx	lr
	...

0802385c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 802385c:	b580      	push	{r7, lr}
 802385e:	b084      	sub	sp, #16
 8023860:	af00      	add	r7, sp, #0
 8023862:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8023864:	687b      	ldr	r3, [r7, #4]
 8023866:	2b00      	cmp	r3, #0
 8023868:	d101      	bne.n	802386e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 802386a:	2301      	movs	r3, #1
 802386c:	e11f      	b.n	8023aae <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 802386e:	687b      	ldr	r3, [r7, #4]
 8023870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8023874:	b2db      	uxtb	r3, r3
 8023876:	2b00      	cmp	r3, #0
 8023878:	d106      	bne.n	8023888 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 802387a:	687b      	ldr	r3, [r7, #4]
 802387c:	2200      	movs	r2, #0
 802387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8023882:	6878      	ldr	r0, [r7, #4]
 8023884:	f7fe f8d6 	bl	8021a34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8023888:	687b      	ldr	r3, [r7, #4]
 802388a:	2224      	movs	r2, #36	; 0x24
 802388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8023890:	687b      	ldr	r3, [r7, #4]
 8023892:	681b      	ldr	r3, [r3, #0]
 8023894:	681a      	ldr	r2, [r3, #0]
 8023896:	687b      	ldr	r3, [r7, #4]
 8023898:	681b      	ldr	r3, [r3, #0]
 802389a:	f022 0201 	bic.w	r2, r2, #1
 802389e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80238a0:	687b      	ldr	r3, [r7, #4]
 80238a2:	681b      	ldr	r3, [r3, #0]
 80238a4:	681a      	ldr	r2, [r3, #0]
 80238a6:	687b      	ldr	r3, [r7, #4]
 80238a8:	681b      	ldr	r3, [r3, #0]
 80238aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80238ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80238b0:	687b      	ldr	r3, [r7, #4]
 80238b2:	681b      	ldr	r3, [r3, #0]
 80238b4:	681a      	ldr	r2, [r3, #0]
 80238b6:	687b      	ldr	r3, [r7, #4]
 80238b8:	681b      	ldr	r3, [r3, #0]
 80238ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80238be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80238c0:	f000 fd18 	bl	80242f4 <HAL_RCC_GetPCLK1Freq>
 80238c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80238c6:	687b      	ldr	r3, [r7, #4]
 80238c8:	685b      	ldr	r3, [r3, #4]
 80238ca:	4a7b      	ldr	r2, [pc, #492]	; (8023ab8 <HAL_I2C_Init+0x25c>)
 80238cc:	4293      	cmp	r3, r2
 80238ce:	d807      	bhi.n	80238e0 <HAL_I2C_Init+0x84>
 80238d0:	68fb      	ldr	r3, [r7, #12]
 80238d2:	4a7a      	ldr	r2, [pc, #488]	; (8023abc <HAL_I2C_Init+0x260>)
 80238d4:	4293      	cmp	r3, r2
 80238d6:	bf94      	ite	ls
 80238d8:	2301      	movls	r3, #1
 80238da:	2300      	movhi	r3, #0
 80238dc:	b2db      	uxtb	r3, r3
 80238de:	e006      	b.n	80238ee <HAL_I2C_Init+0x92>
 80238e0:	68fb      	ldr	r3, [r7, #12]
 80238e2:	4a77      	ldr	r2, [pc, #476]	; (8023ac0 <HAL_I2C_Init+0x264>)
 80238e4:	4293      	cmp	r3, r2
 80238e6:	bf94      	ite	ls
 80238e8:	2301      	movls	r3, #1
 80238ea:	2300      	movhi	r3, #0
 80238ec:	b2db      	uxtb	r3, r3
 80238ee:	2b00      	cmp	r3, #0
 80238f0:	d001      	beq.n	80238f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80238f2:	2301      	movs	r3, #1
 80238f4:	e0db      	b.n	8023aae <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80238f6:	68fb      	ldr	r3, [r7, #12]
 80238f8:	4a72      	ldr	r2, [pc, #456]	; (8023ac4 <HAL_I2C_Init+0x268>)
 80238fa:	fba2 2303 	umull	r2, r3, r2, r3
 80238fe:	0c9b      	lsrs	r3, r3, #18
 8023900:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8023902:	687b      	ldr	r3, [r7, #4]
 8023904:	681b      	ldr	r3, [r3, #0]
 8023906:	685b      	ldr	r3, [r3, #4]
 8023908:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 802390c:	687b      	ldr	r3, [r7, #4]
 802390e:	681b      	ldr	r3, [r3, #0]
 8023910:	68ba      	ldr	r2, [r7, #8]
 8023912:	430a      	orrs	r2, r1
 8023914:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8023916:	687b      	ldr	r3, [r7, #4]
 8023918:	681b      	ldr	r3, [r3, #0]
 802391a:	6a1b      	ldr	r3, [r3, #32]
 802391c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8023920:	687b      	ldr	r3, [r7, #4]
 8023922:	685b      	ldr	r3, [r3, #4]
 8023924:	4a64      	ldr	r2, [pc, #400]	; (8023ab8 <HAL_I2C_Init+0x25c>)
 8023926:	4293      	cmp	r3, r2
 8023928:	d802      	bhi.n	8023930 <HAL_I2C_Init+0xd4>
 802392a:	68bb      	ldr	r3, [r7, #8]
 802392c:	3301      	adds	r3, #1
 802392e:	e009      	b.n	8023944 <HAL_I2C_Init+0xe8>
 8023930:	68bb      	ldr	r3, [r7, #8]
 8023932:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8023936:	fb02 f303 	mul.w	r3, r2, r3
 802393a:	4a63      	ldr	r2, [pc, #396]	; (8023ac8 <HAL_I2C_Init+0x26c>)
 802393c:	fba2 2303 	umull	r2, r3, r2, r3
 8023940:	099b      	lsrs	r3, r3, #6
 8023942:	3301      	adds	r3, #1
 8023944:	687a      	ldr	r2, [r7, #4]
 8023946:	6812      	ldr	r2, [r2, #0]
 8023948:	430b      	orrs	r3, r1
 802394a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 802394c:	687b      	ldr	r3, [r7, #4]
 802394e:	681b      	ldr	r3, [r3, #0]
 8023950:	69db      	ldr	r3, [r3, #28]
 8023952:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8023956:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 802395a:	687b      	ldr	r3, [r7, #4]
 802395c:	685b      	ldr	r3, [r3, #4]
 802395e:	4956      	ldr	r1, [pc, #344]	; (8023ab8 <HAL_I2C_Init+0x25c>)
 8023960:	428b      	cmp	r3, r1
 8023962:	d80d      	bhi.n	8023980 <HAL_I2C_Init+0x124>
 8023964:	68fb      	ldr	r3, [r7, #12]
 8023966:	1e59      	subs	r1, r3, #1
 8023968:	687b      	ldr	r3, [r7, #4]
 802396a:	685b      	ldr	r3, [r3, #4]
 802396c:	005b      	lsls	r3, r3, #1
 802396e:	fbb1 f3f3 	udiv	r3, r1, r3
 8023972:	3301      	adds	r3, #1
 8023974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023978:	2b04      	cmp	r3, #4
 802397a:	bf38      	it	cc
 802397c:	2304      	movcc	r3, #4
 802397e:	e04f      	b.n	8023a20 <HAL_I2C_Init+0x1c4>
 8023980:	687b      	ldr	r3, [r7, #4]
 8023982:	689b      	ldr	r3, [r3, #8]
 8023984:	2b00      	cmp	r3, #0
 8023986:	d111      	bne.n	80239ac <HAL_I2C_Init+0x150>
 8023988:	68fb      	ldr	r3, [r7, #12]
 802398a:	1e58      	subs	r0, r3, #1
 802398c:	687b      	ldr	r3, [r7, #4]
 802398e:	6859      	ldr	r1, [r3, #4]
 8023990:	460b      	mov	r3, r1
 8023992:	005b      	lsls	r3, r3, #1
 8023994:	440b      	add	r3, r1
 8023996:	fbb0 f3f3 	udiv	r3, r0, r3
 802399a:	3301      	adds	r3, #1
 802399c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80239a0:	2b00      	cmp	r3, #0
 80239a2:	bf0c      	ite	eq
 80239a4:	2301      	moveq	r3, #1
 80239a6:	2300      	movne	r3, #0
 80239a8:	b2db      	uxtb	r3, r3
 80239aa:	e012      	b.n	80239d2 <HAL_I2C_Init+0x176>
 80239ac:	68fb      	ldr	r3, [r7, #12]
 80239ae:	1e58      	subs	r0, r3, #1
 80239b0:	687b      	ldr	r3, [r7, #4]
 80239b2:	6859      	ldr	r1, [r3, #4]
 80239b4:	460b      	mov	r3, r1
 80239b6:	009b      	lsls	r3, r3, #2
 80239b8:	440b      	add	r3, r1
 80239ba:	0099      	lsls	r1, r3, #2
 80239bc:	440b      	add	r3, r1
 80239be:	fbb0 f3f3 	udiv	r3, r0, r3
 80239c2:	3301      	adds	r3, #1
 80239c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80239c8:	2b00      	cmp	r3, #0
 80239ca:	bf0c      	ite	eq
 80239cc:	2301      	moveq	r3, #1
 80239ce:	2300      	movne	r3, #0
 80239d0:	b2db      	uxtb	r3, r3
 80239d2:	2b00      	cmp	r3, #0
 80239d4:	d001      	beq.n	80239da <HAL_I2C_Init+0x17e>
 80239d6:	2301      	movs	r3, #1
 80239d8:	e022      	b.n	8023a20 <HAL_I2C_Init+0x1c4>
 80239da:	687b      	ldr	r3, [r7, #4]
 80239dc:	689b      	ldr	r3, [r3, #8]
 80239de:	2b00      	cmp	r3, #0
 80239e0:	d10e      	bne.n	8023a00 <HAL_I2C_Init+0x1a4>
 80239e2:	68fb      	ldr	r3, [r7, #12]
 80239e4:	1e58      	subs	r0, r3, #1
 80239e6:	687b      	ldr	r3, [r7, #4]
 80239e8:	6859      	ldr	r1, [r3, #4]
 80239ea:	460b      	mov	r3, r1
 80239ec:	005b      	lsls	r3, r3, #1
 80239ee:	440b      	add	r3, r1
 80239f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80239f4:	3301      	adds	r3, #1
 80239f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80239fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80239fe:	e00f      	b.n	8023a20 <HAL_I2C_Init+0x1c4>
 8023a00:	68fb      	ldr	r3, [r7, #12]
 8023a02:	1e58      	subs	r0, r3, #1
 8023a04:	687b      	ldr	r3, [r7, #4]
 8023a06:	6859      	ldr	r1, [r3, #4]
 8023a08:	460b      	mov	r3, r1
 8023a0a:	009b      	lsls	r3, r3, #2
 8023a0c:	440b      	add	r3, r1
 8023a0e:	0099      	lsls	r1, r3, #2
 8023a10:	440b      	add	r3, r1
 8023a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8023a16:	3301      	adds	r3, #1
 8023a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023a1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8023a20:	6879      	ldr	r1, [r7, #4]
 8023a22:	6809      	ldr	r1, [r1, #0]
 8023a24:	4313      	orrs	r3, r2
 8023a26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8023a28:	687b      	ldr	r3, [r7, #4]
 8023a2a:	681b      	ldr	r3, [r3, #0]
 8023a2c:	681b      	ldr	r3, [r3, #0]
 8023a2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8023a32:	687b      	ldr	r3, [r7, #4]
 8023a34:	69da      	ldr	r2, [r3, #28]
 8023a36:	687b      	ldr	r3, [r7, #4]
 8023a38:	6a1b      	ldr	r3, [r3, #32]
 8023a3a:	431a      	orrs	r2, r3
 8023a3c:	687b      	ldr	r3, [r7, #4]
 8023a3e:	681b      	ldr	r3, [r3, #0]
 8023a40:	430a      	orrs	r2, r1
 8023a42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8023a44:	687b      	ldr	r3, [r7, #4]
 8023a46:	681b      	ldr	r3, [r3, #0]
 8023a48:	689b      	ldr	r3, [r3, #8]
 8023a4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8023a4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8023a52:	687a      	ldr	r2, [r7, #4]
 8023a54:	6911      	ldr	r1, [r2, #16]
 8023a56:	687a      	ldr	r2, [r7, #4]
 8023a58:	68d2      	ldr	r2, [r2, #12]
 8023a5a:	4311      	orrs	r1, r2
 8023a5c:	687a      	ldr	r2, [r7, #4]
 8023a5e:	6812      	ldr	r2, [r2, #0]
 8023a60:	430b      	orrs	r3, r1
 8023a62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8023a64:	687b      	ldr	r3, [r7, #4]
 8023a66:	681b      	ldr	r3, [r3, #0]
 8023a68:	68db      	ldr	r3, [r3, #12]
 8023a6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8023a6e:	687b      	ldr	r3, [r7, #4]
 8023a70:	695a      	ldr	r2, [r3, #20]
 8023a72:	687b      	ldr	r3, [r7, #4]
 8023a74:	699b      	ldr	r3, [r3, #24]
 8023a76:	431a      	orrs	r2, r3
 8023a78:	687b      	ldr	r3, [r7, #4]
 8023a7a:	681b      	ldr	r3, [r3, #0]
 8023a7c:	430a      	orrs	r2, r1
 8023a7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8023a80:	687b      	ldr	r3, [r7, #4]
 8023a82:	681b      	ldr	r3, [r3, #0]
 8023a84:	681a      	ldr	r2, [r3, #0]
 8023a86:	687b      	ldr	r3, [r7, #4]
 8023a88:	681b      	ldr	r3, [r3, #0]
 8023a8a:	f042 0201 	orr.w	r2, r2, #1
 8023a8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8023a90:	687b      	ldr	r3, [r7, #4]
 8023a92:	2200      	movs	r2, #0
 8023a94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8023a96:	687b      	ldr	r3, [r7, #4]
 8023a98:	2220      	movs	r2, #32
 8023a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8023a9e:	687b      	ldr	r3, [r7, #4]
 8023aa0:	2200      	movs	r2, #0
 8023aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8023aa4:	687b      	ldr	r3, [r7, #4]
 8023aa6:	2200      	movs	r2, #0
 8023aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8023aac:	2300      	movs	r3, #0
}
 8023aae:	4618      	mov	r0, r3
 8023ab0:	3710      	adds	r7, #16
 8023ab2:	46bd      	mov	sp, r7
 8023ab4:	bd80      	pop	{r7, pc}
 8023ab6:	bf00      	nop
 8023ab8:	000186a0 	.word	0x000186a0
 8023abc:	001e847f 	.word	0x001e847f
 8023ac0:	003d08ff 	.word	0x003d08ff
 8023ac4:	431bde83 	.word	0x431bde83
 8023ac8:	10624dd3 	.word	0x10624dd3

08023acc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8023acc:	b580      	push	{r7, lr}
 8023ace:	b086      	sub	sp, #24
 8023ad0:	af00      	add	r7, sp, #0
 8023ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8023ad4:	687b      	ldr	r3, [r7, #4]
 8023ad6:	2b00      	cmp	r3, #0
 8023ad8:	d101      	bne.n	8023ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8023ada:	2301      	movs	r3, #1
 8023adc:	e25b      	b.n	8023f96 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8023ade:	687b      	ldr	r3, [r7, #4]
 8023ae0:	681b      	ldr	r3, [r3, #0]
 8023ae2:	f003 0301 	and.w	r3, r3, #1
 8023ae6:	2b00      	cmp	r3, #0
 8023ae8:	d075      	beq.n	8023bd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8023aea:	4ba3      	ldr	r3, [pc, #652]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023aec:	689b      	ldr	r3, [r3, #8]
 8023aee:	f003 030c 	and.w	r3, r3, #12
 8023af2:	2b04      	cmp	r3, #4
 8023af4:	d00c      	beq.n	8023b10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8023af6:	4ba0      	ldr	r3, [pc, #640]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023af8:	689b      	ldr	r3, [r3, #8]
 8023afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8023afe:	2b08      	cmp	r3, #8
 8023b00:	d112      	bne.n	8023b28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8023b02:	4b9d      	ldr	r3, [pc, #628]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023b04:	685b      	ldr	r3, [r3, #4]
 8023b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8023b0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8023b0e:	d10b      	bne.n	8023b28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8023b10:	4b99      	ldr	r3, [pc, #612]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023b12:	681b      	ldr	r3, [r3, #0]
 8023b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8023b18:	2b00      	cmp	r3, #0
 8023b1a:	d05b      	beq.n	8023bd4 <HAL_RCC_OscConfig+0x108>
 8023b1c:	687b      	ldr	r3, [r7, #4]
 8023b1e:	685b      	ldr	r3, [r3, #4]
 8023b20:	2b00      	cmp	r3, #0
 8023b22:	d157      	bne.n	8023bd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8023b24:	2301      	movs	r3, #1
 8023b26:	e236      	b.n	8023f96 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8023b28:	687b      	ldr	r3, [r7, #4]
 8023b2a:	685b      	ldr	r3, [r3, #4]
 8023b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8023b30:	d106      	bne.n	8023b40 <HAL_RCC_OscConfig+0x74>
 8023b32:	4b91      	ldr	r3, [pc, #580]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023b34:	681b      	ldr	r3, [r3, #0]
 8023b36:	4a90      	ldr	r2, [pc, #576]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8023b3c:	6013      	str	r3, [r2, #0]
 8023b3e:	e01d      	b.n	8023b7c <HAL_RCC_OscConfig+0xb0>
 8023b40:	687b      	ldr	r3, [r7, #4]
 8023b42:	685b      	ldr	r3, [r3, #4]
 8023b44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8023b48:	d10c      	bne.n	8023b64 <HAL_RCC_OscConfig+0x98>
 8023b4a:	4b8b      	ldr	r3, [pc, #556]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023b4c:	681b      	ldr	r3, [r3, #0]
 8023b4e:	4a8a      	ldr	r2, [pc, #552]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8023b54:	6013      	str	r3, [r2, #0]
 8023b56:	4b88      	ldr	r3, [pc, #544]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023b58:	681b      	ldr	r3, [r3, #0]
 8023b5a:	4a87      	ldr	r2, [pc, #540]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8023b60:	6013      	str	r3, [r2, #0]
 8023b62:	e00b      	b.n	8023b7c <HAL_RCC_OscConfig+0xb0>
 8023b64:	4b84      	ldr	r3, [pc, #528]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023b66:	681b      	ldr	r3, [r3, #0]
 8023b68:	4a83      	ldr	r2, [pc, #524]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8023b6e:	6013      	str	r3, [r2, #0]
 8023b70:	4b81      	ldr	r3, [pc, #516]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023b72:	681b      	ldr	r3, [r3, #0]
 8023b74:	4a80      	ldr	r2, [pc, #512]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8023b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8023b7c:	687b      	ldr	r3, [r7, #4]
 8023b7e:	685b      	ldr	r3, [r3, #4]
 8023b80:	2b00      	cmp	r3, #0
 8023b82:	d013      	beq.n	8023bac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8023b84:	f7fe fc14 	bl	80223b0 <HAL_GetTick>
 8023b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8023b8a:	e008      	b.n	8023b9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8023b8c:	f7fe fc10 	bl	80223b0 <HAL_GetTick>
 8023b90:	4602      	mov	r2, r0
 8023b92:	693b      	ldr	r3, [r7, #16]
 8023b94:	1ad3      	subs	r3, r2, r3
 8023b96:	2b64      	cmp	r3, #100	; 0x64
 8023b98:	d901      	bls.n	8023b9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8023b9a:	2303      	movs	r3, #3
 8023b9c:	e1fb      	b.n	8023f96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8023b9e:	4b76      	ldr	r3, [pc, #472]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023ba0:	681b      	ldr	r3, [r3, #0]
 8023ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8023ba6:	2b00      	cmp	r3, #0
 8023ba8:	d0f0      	beq.n	8023b8c <HAL_RCC_OscConfig+0xc0>
 8023baa:	e014      	b.n	8023bd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8023bac:	f7fe fc00 	bl	80223b0 <HAL_GetTick>
 8023bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8023bb2:	e008      	b.n	8023bc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8023bb4:	f7fe fbfc 	bl	80223b0 <HAL_GetTick>
 8023bb8:	4602      	mov	r2, r0
 8023bba:	693b      	ldr	r3, [r7, #16]
 8023bbc:	1ad3      	subs	r3, r2, r3
 8023bbe:	2b64      	cmp	r3, #100	; 0x64
 8023bc0:	d901      	bls.n	8023bc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8023bc2:	2303      	movs	r3, #3
 8023bc4:	e1e7      	b.n	8023f96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8023bc6:	4b6c      	ldr	r3, [pc, #432]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023bc8:	681b      	ldr	r3, [r3, #0]
 8023bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8023bce:	2b00      	cmp	r3, #0
 8023bd0:	d1f0      	bne.n	8023bb4 <HAL_RCC_OscConfig+0xe8>
 8023bd2:	e000      	b.n	8023bd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8023bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8023bd6:	687b      	ldr	r3, [r7, #4]
 8023bd8:	681b      	ldr	r3, [r3, #0]
 8023bda:	f003 0302 	and.w	r3, r3, #2
 8023bde:	2b00      	cmp	r3, #0
 8023be0:	d063      	beq.n	8023caa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8023be2:	4b65      	ldr	r3, [pc, #404]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023be4:	689b      	ldr	r3, [r3, #8]
 8023be6:	f003 030c 	and.w	r3, r3, #12
 8023bea:	2b00      	cmp	r3, #0
 8023bec:	d00b      	beq.n	8023c06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8023bee:	4b62      	ldr	r3, [pc, #392]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023bf0:	689b      	ldr	r3, [r3, #8]
 8023bf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8023bf6:	2b08      	cmp	r3, #8
 8023bf8:	d11c      	bne.n	8023c34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8023bfa:	4b5f      	ldr	r3, [pc, #380]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023bfc:	685b      	ldr	r3, [r3, #4]
 8023bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8023c02:	2b00      	cmp	r3, #0
 8023c04:	d116      	bne.n	8023c34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8023c06:	4b5c      	ldr	r3, [pc, #368]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023c08:	681b      	ldr	r3, [r3, #0]
 8023c0a:	f003 0302 	and.w	r3, r3, #2
 8023c0e:	2b00      	cmp	r3, #0
 8023c10:	d005      	beq.n	8023c1e <HAL_RCC_OscConfig+0x152>
 8023c12:	687b      	ldr	r3, [r7, #4]
 8023c14:	68db      	ldr	r3, [r3, #12]
 8023c16:	2b01      	cmp	r3, #1
 8023c18:	d001      	beq.n	8023c1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8023c1a:	2301      	movs	r3, #1
 8023c1c:	e1bb      	b.n	8023f96 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8023c1e:	4b56      	ldr	r3, [pc, #344]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023c20:	681b      	ldr	r3, [r3, #0]
 8023c22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8023c26:	687b      	ldr	r3, [r7, #4]
 8023c28:	691b      	ldr	r3, [r3, #16]
 8023c2a:	00db      	lsls	r3, r3, #3
 8023c2c:	4952      	ldr	r1, [pc, #328]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023c2e:	4313      	orrs	r3, r2
 8023c30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8023c32:	e03a      	b.n	8023caa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8023c34:	687b      	ldr	r3, [r7, #4]
 8023c36:	68db      	ldr	r3, [r3, #12]
 8023c38:	2b00      	cmp	r3, #0
 8023c3a:	d020      	beq.n	8023c7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8023c3c:	4b4f      	ldr	r3, [pc, #316]	; (8023d7c <HAL_RCC_OscConfig+0x2b0>)
 8023c3e:	2201      	movs	r2, #1
 8023c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8023c42:	f7fe fbb5 	bl	80223b0 <HAL_GetTick>
 8023c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8023c48:	e008      	b.n	8023c5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8023c4a:	f7fe fbb1 	bl	80223b0 <HAL_GetTick>
 8023c4e:	4602      	mov	r2, r0
 8023c50:	693b      	ldr	r3, [r7, #16]
 8023c52:	1ad3      	subs	r3, r2, r3
 8023c54:	2b02      	cmp	r3, #2
 8023c56:	d901      	bls.n	8023c5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8023c58:	2303      	movs	r3, #3
 8023c5a:	e19c      	b.n	8023f96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8023c5c:	4b46      	ldr	r3, [pc, #280]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023c5e:	681b      	ldr	r3, [r3, #0]
 8023c60:	f003 0302 	and.w	r3, r3, #2
 8023c64:	2b00      	cmp	r3, #0
 8023c66:	d0f0      	beq.n	8023c4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8023c68:	4b43      	ldr	r3, [pc, #268]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023c6a:	681b      	ldr	r3, [r3, #0]
 8023c6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8023c70:	687b      	ldr	r3, [r7, #4]
 8023c72:	691b      	ldr	r3, [r3, #16]
 8023c74:	00db      	lsls	r3, r3, #3
 8023c76:	4940      	ldr	r1, [pc, #256]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023c78:	4313      	orrs	r3, r2
 8023c7a:	600b      	str	r3, [r1, #0]
 8023c7c:	e015      	b.n	8023caa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8023c7e:	4b3f      	ldr	r3, [pc, #252]	; (8023d7c <HAL_RCC_OscConfig+0x2b0>)
 8023c80:	2200      	movs	r2, #0
 8023c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8023c84:	f7fe fb94 	bl	80223b0 <HAL_GetTick>
 8023c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8023c8a:	e008      	b.n	8023c9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8023c8c:	f7fe fb90 	bl	80223b0 <HAL_GetTick>
 8023c90:	4602      	mov	r2, r0
 8023c92:	693b      	ldr	r3, [r7, #16]
 8023c94:	1ad3      	subs	r3, r2, r3
 8023c96:	2b02      	cmp	r3, #2
 8023c98:	d901      	bls.n	8023c9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8023c9a:	2303      	movs	r3, #3
 8023c9c:	e17b      	b.n	8023f96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8023c9e:	4b36      	ldr	r3, [pc, #216]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023ca0:	681b      	ldr	r3, [r3, #0]
 8023ca2:	f003 0302 	and.w	r3, r3, #2
 8023ca6:	2b00      	cmp	r3, #0
 8023ca8:	d1f0      	bne.n	8023c8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8023caa:	687b      	ldr	r3, [r7, #4]
 8023cac:	681b      	ldr	r3, [r3, #0]
 8023cae:	f003 0308 	and.w	r3, r3, #8
 8023cb2:	2b00      	cmp	r3, #0
 8023cb4:	d030      	beq.n	8023d18 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8023cb6:	687b      	ldr	r3, [r7, #4]
 8023cb8:	695b      	ldr	r3, [r3, #20]
 8023cba:	2b00      	cmp	r3, #0
 8023cbc:	d016      	beq.n	8023cec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8023cbe:	4b30      	ldr	r3, [pc, #192]	; (8023d80 <HAL_RCC_OscConfig+0x2b4>)
 8023cc0:	2201      	movs	r2, #1
 8023cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8023cc4:	f7fe fb74 	bl	80223b0 <HAL_GetTick>
 8023cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8023cca:	e008      	b.n	8023cde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8023ccc:	f7fe fb70 	bl	80223b0 <HAL_GetTick>
 8023cd0:	4602      	mov	r2, r0
 8023cd2:	693b      	ldr	r3, [r7, #16]
 8023cd4:	1ad3      	subs	r3, r2, r3
 8023cd6:	2b02      	cmp	r3, #2
 8023cd8:	d901      	bls.n	8023cde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8023cda:	2303      	movs	r3, #3
 8023cdc:	e15b      	b.n	8023f96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8023cde:	4b26      	ldr	r3, [pc, #152]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8023ce2:	f003 0302 	and.w	r3, r3, #2
 8023ce6:	2b00      	cmp	r3, #0
 8023ce8:	d0f0      	beq.n	8023ccc <HAL_RCC_OscConfig+0x200>
 8023cea:	e015      	b.n	8023d18 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8023cec:	4b24      	ldr	r3, [pc, #144]	; (8023d80 <HAL_RCC_OscConfig+0x2b4>)
 8023cee:	2200      	movs	r2, #0
 8023cf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8023cf2:	f7fe fb5d 	bl	80223b0 <HAL_GetTick>
 8023cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8023cf8:	e008      	b.n	8023d0c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8023cfa:	f7fe fb59 	bl	80223b0 <HAL_GetTick>
 8023cfe:	4602      	mov	r2, r0
 8023d00:	693b      	ldr	r3, [r7, #16]
 8023d02:	1ad3      	subs	r3, r2, r3
 8023d04:	2b02      	cmp	r3, #2
 8023d06:	d901      	bls.n	8023d0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8023d08:	2303      	movs	r3, #3
 8023d0a:	e144      	b.n	8023f96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8023d0c:	4b1a      	ldr	r3, [pc, #104]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8023d10:	f003 0302 	and.w	r3, r3, #2
 8023d14:	2b00      	cmp	r3, #0
 8023d16:	d1f0      	bne.n	8023cfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8023d18:	687b      	ldr	r3, [r7, #4]
 8023d1a:	681b      	ldr	r3, [r3, #0]
 8023d1c:	f003 0304 	and.w	r3, r3, #4
 8023d20:	2b00      	cmp	r3, #0
 8023d22:	f000 80a0 	beq.w	8023e66 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8023d26:	2300      	movs	r3, #0
 8023d28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8023d2a:	4b13      	ldr	r3, [pc, #76]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8023d32:	2b00      	cmp	r3, #0
 8023d34:	d10f      	bne.n	8023d56 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8023d36:	2300      	movs	r3, #0
 8023d38:	60bb      	str	r3, [r7, #8]
 8023d3a:	4b0f      	ldr	r3, [pc, #60]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023d3e:	4a0e      	ldr	r2, [pc, #56]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8023d44:	6413      	str	r3, [r2, #64]	; 0x40
 8023d46:	4b0c      	ldr	r3, [pc, #48]	; (8023d78 <HAL_RCC_OscConfig+0x2ac>)
 8023d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8023d4e:	60bb      	str	r3, [r7, #8]
 8023d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8023d52:	2301      	movs	r3, #1
 8023d54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8023d56:	4b0b      	ldr	r3, [pc, #44]	; (8023d84 <HAL_RCC_OscConfig+0x2b8>)
 8023d58:	681b      	ldr	r3, [r3, #0]
 8023d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023d5e:	2b00      	cmp	r3, #0
 8023d60:	d121      	bne.n	8023da6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8023d62:	4b08      	ldr	r3, [pc, #32]	; (8023d84 <HAL_RCC_OscConfig+0x2b8>)
 8023d64:	681b      	ldr	r3, [r3, #0]
 8023d66:	4a07      	ldr	r2, [pc, #28]	; (8023d84 <HAL_RCC_OscConfig+0x2b8>)
 8023d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8023d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8023d6e:	f7fe fb1f 	bl	80223b0 <HAL_GetTick>
 8023d72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8023d74:	e011      	b.n	8023d9a <HAL_RCC_OscConfig+0x2ce>
 8023d76:	bf00      	nop
 8023d78:	40023800 	.word	0x40023800
 8023d7c:	42470000 	.word	0x42470000
 8023d80:	42470e80 	.word	0x42470e80
 8023d84:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8023d88:	f7fe fb12 	bl	80223b0 <HAL_GetTick>
 8023d8c:	4602      	mov	r2, r0
 8023d8e:	693b      	ldr	r3, [r7, #16]
 8023d90:	1ad3      	subs	r3, r2, r3
 8023d92:	2b02      	cmp	r3, #2
 8023d94:	d901      	bls.n	8023d9a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8023d96:	2303      	movs	r3, #3
 8023d98:	e0fd      	b.n	8023f96 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8023d9a:	4b81      	ldr	r3, [pc, #516]	; (8023fa0 <HAL_RCC_OscConfig+0x4d4>)
 8023d9c:	681b      	ldr	r3, [r3, #0]
 8023d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023da2:	2b00      	cmp	r3, #0
 8023da4:	d0f0      	beq.n	8023d88 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8023da6:	687b      	ldr	r3, [r7, #4]
 8023da8:	689b      	ldr	r3, [r3, #8]
 8023daa:	2b01      	cmp	r3, #1
 8023dac:	d106      	bne.n	8023dbc <HAL_RCC_OscConfig+0x2f0>
 8023dae:	4b7d      	ldr	r3, [pc, #500]	; (8023fa4 <HAL_RCC_OscConfig+0x4d8>)
 8023db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023db2:	4a7c      	ldr	r2, [pc, #496]	; (8023fa4 <HAL_RCC_OscConfig+0x4d8>)
 8023db4:	f043 0301 	orr.w	r3, r3, #1
 8023db8:	6713      	str	r3, [r2, #112]	; 0x70
 8023dba:	e01c      	b.n	8023df6 <HAL_RCC_OscConfig+0x32a>
 8023dbc:	687b      	ldr	r3, [r7, #4]
 8023dbe:	689b      	ldr	r3, [r3, #8]
 8023dc0:	2b05      	cmp	r3, #5
 8023dc2:	d10c      	bne.n	8023dde <HAL_RCC_OscConfig+0x312>
 8023dc4:	4b77      	ldr	r3, [pc, #476]	; (8023fa4 <HAL_RCC_OscConfig+0x4d8>)
 8023dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023dc8:	4a76      	ldr	r2, [pc, #472]	; (8023fa4 <HAL_RCC_OscConfig+0x4d8>)
 8023dca:	f043 0304 	orr.w	r3, r3, #4
 8023dce:	6713      	str	r3, [r2, #112]	; 0x70
 8023dd0:	4b74      	ldr	r3, [pc, #464]	; (8023fa4 <HAL_RCC_OscConfig+0x4d8>)
 8023dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023dd4:	4a73      	ldr	r2, [pc, #460]	; (8023fa4 <HAL_RCC_OscConfig+0x4d8>)
 8023dd6:	f043 0301 	orr.w	r3, r3, #1
 8023dda:	6713      	str	r3, [r2, #112]	; 0x70
 8023ddc:	e00b      	b.n	8023df6 <HAL_RCC_OscConfig+0x32a>
 8023dde:	4b71      	ldr	r3, [pc, #452]	; (8023fa4 <HAL_RCC_OscConfig+0x4d8>)
 8023de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023de2:	4a70      	ldr	r2, [pc, #448]	; (8023fa4 <HAL_RCC_OscConfig+0x4d8>)
 8023de4:	f023 0301 	bic.w	r3, r3, #1
 8023de8:	6713      	str	r3, [r2, #112]	; 0x70
 8023dea:	4b6e      	ldr	r3, [pc, #440]	; (8023fa4 <HAL_RCC_OscConfig+0x4d8>)
 8023dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023dee:	4a6d      	ldr	r2, [pc, #436]	; (8023fa4 <HAL_RCC_OscConfig+0x4d8>)
 8023df0:	f023 0304 	bic.w	r3, r3, #4
 8023df4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8023df6:	687b      	ldr	r3, [r7, #4]
 8023df8:	689b      	ldr	r3, [r3, #8]
 8023dfa:	2b00      	cmp	r3, #0
 8023dfc:	d015      	beq.n	8023e2a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8023dfe:	f7fe fad7 	bl	80223b0 <HAL_GetTick>
 8023e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8023e04:	e00a      	b.n	8023e1c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8023e06:	f7fe fad3 	bl	80223b0 <HAL_GetTick>
 8023e0a:	4602      	mov	r2, r0
 8023e0c:	693b      	ldr	r3, [r7, #16]
 8023e0e:	1ad3      	subs	r3, r2, r3
 8023e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8023e14:	4293      	cmp	r3, r2
 8023e16:	d901      	bls.n	8023e1c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8023e18:	2303      	movs	r3, #3
 8023e1a:	e0bc      	b.n	8023f96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8023e1c:	4b61      	ldr	r3, [pc, #388]	; (8023fa4 <HAL_RCC_OscConfig+0x4d8>)
 8023e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023e20:	f003 0302 	and.w	r3, r3, #2
 8023e24:	2b00      	cmp	r3, #0
 8023e26:	d0ee      	beq.n	8023e06 <HAL_RCC_OscConfig+0x33a>
 8023e28:	e014      	b.n	8023e54 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8023e2a:	f7fe fac1 	bl	80223b0 <HAL_GetTick>
 8023e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8023e30:	e00a      	b.n	8023e48 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8023e32:	f7fe fabd 	bl	80223b0 <HAL_GetTick>
 8023e36:	4602      	mov	r2, r0
 8023e38:	693b      	ldr	r3, [r7, #16]
 8023e3a:	1ad3      	subs	r3, r2, r3
 8023e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8023e40:	4293      	cmp	r3, r2
 8023e42:	d901      	bls.n	8023e48 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8023e44:	2303      	movs	r3, #3
 8023e46:	e0a6      	b.n	8023f96 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8023e48:	4b56      	ldr	r3, [pc, #344]	; (8023fa4 <HAL_RCC_OscConfig+0x4d8>)
 8023e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023e4c:	f003 0302 	and.w	r3, r3, #2
 8023e50:	2b00      	cmp	r3, #0
 8023e52:	d1ee      	bne.n	8023e32 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8023e54:	7dfb      	ldrb	r3, [r7, #23]
 8023e56:	2b01      	cmp	r3, #1
 8023e58:	d105      	bne.n	8023e66 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8023e5a:	4b52      	ldr	r3, [pc, #328]	; (8023fa4 <HAL_RCC_OscConfig+0x4d8>)
 8023e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023e5e:	4a51      	ldr	r2, [pc, #324]	; (8023fa4 <HAL_RCC_OscConfig+0x4d8>)
 8023e60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8023e64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8023e66:	687b      	ldr	r3, [r7, #4]
 8023e68:	699b      	ldr	r3, [r3, #24]
 8023e6a:	2b00      	cmp	r3, #0
 8023e6c:	f000 8092 	beq.w	8023f94 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8023e70:	4b4c      	ldr	r3, [pc, #304]	; (8023fa4 <HAL_RCC_OscConfig+0x4d8>)
 8023e72:	689b      	ldr	r3, [r3, #8]
 8023e74:	f003 030c 	and.w	r3, r3, #12
 8023e78:	2b08      	cmp	r3, #8
 8023e7a:	d05c      	beq.n	8023f36 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8023e7c:	687b      	ldr	r3, [r7, #4]
 8023e7e:	699b      	ldr	r3, [r3, #24]
 8023e80:	2b02      	cmp	r3, #2
 8023e82:	d141      	bne.n	8023f08 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8023e84:	4b48      	ldr	r3, [pc, #288]	; (8023fa8 <HAL_RCC_OscConfig+0x4dc>)
 8023e86:	2200      	movs	r2, #0
 8023e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8023e8a:	f7fe fa91 	bl	80223b0 <HAL_GetTick>
 8023e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8023e90:	e008      	b.n	8023ea4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8023e92:	f7fe fa8d 	bl	80223b0 <HAL_GetTick>
 8023e96:	4602      	mov	r2, r0
 8023e98:	693b      	ldr	r3, [r7, #16]
 8023e9a:	1ad3      	subs	r3, r2, r3
 8023e9c:	2b02      	cmp	r3, #2
 8023e9e:	d901      	bls.n	8023ea4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8023ea0:	2303      	movs	r3, #3
 8023ea2:	e078      	b.n	8023f96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8023ea4:	4b3f      	ldr	r3, [pc, #252]	; (8023fa4 <HAL_RCC_OscConfig+0x4d8>)
 8023ea6:	681b      	ldr	r3, [r3, #0]
 8023ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8023eac:	2b00      	cmp	r3, #0
 8023eae:	d1f0      	bne.n	8023e92 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8023eb0:	687b      	ldr	r3, [r7, #4]
 8023eb2:	69da      	ldr	r2, [r3, #28]
 8023eb4:	687b      	ldr	r3, [r7, #4]
 8023eb6:	6a1b      	ldr	r3, [r3, #32]
 8023eb8:	431a      	orrs	r2, r3
 8023eba:	687b      	ldr	r3, [r7, #4]
 8023ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023ebe:	019b      	lsls	r3, r3, #6
 8023ec0:	431a      	orrs	r2, r3
 8023ec2:	687b      	ldr	r3, [r7, #4]
 8023ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023ec6:	085b      	lsrs	r3, r3, #1
 8023ec8:	3b01      	subs	r3, #1
 8023eca:	041b      	lsls	r3, r3, #16
 8023ecc:	431a      	orrs	r2, r3
 8023ece:	687b      	ldr	r3, [r7, #4]
 8023ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023ed2:	061b      	lsls	r3, r3, #24
 8023ed4:	4933      	ldr	r1, [pc, #204]	; (8023fa4 <HAL_RCC_OscConfig+0x4d8>)
 8023ed6:	4313      	orrs	r3, r2
 8023ed8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8023eda:	4b33      	ldr	r3, [pc, #204]	; (8023fa8 <HAL_RCC_OscConfig+0x4dc>)
 8023edc:	2201      	movs	r2, #1
 8023ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8023ee0:	f7fe fa66 	bl	80223b0 <HAL_GetTick>
 8023ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8023ee6:	e008      	b.n	8023efa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8023ee8:	f7fe fa62 	bl	80223b0 <HAL_GetTick>
 8023eec:	4602      	mov	r2, r0
 8023eee:	693b      	ldr	r3, [r7, #16]
 8023ef0:	1ad3      	subs	r3, r2, r3
 8023ef2:	2b02      	cmp	r3, #2
 8023ef4:	d901      	bls.n	8023efa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8023ef6:	2303      	movs	r3, #3
 8023ef8:	e04d      	b.n	8023f96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8023efa:	4b2a      	ldr	r3, [pc, #168]	; (8023fa4 <HAL_RCC_OscConfig+0x4d8>)
 8023efc:	681b      	ldr	r3, [r3, #0]
 8023efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8023f02:	2b00      	cmp	r3, #0
 8023f04:	d0f0      	beq.n	8023ee8 <HAL_RCC_OscConfig+0x41c>
 8023f06:	e045      	b.n	8023f94 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8023f08:	4b27      	ldr	r3, [pc, #156]	; (8023fa8 <HAL_RCC_OscConfig+0x4dc>)
 8023f0a:	2200      	movs	r2, #0
 8023f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8023f0e:	f7fe fa4f 	bl	80223b0 <HAL_GetTick>
 8023f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8023f14:	e008      	b.n	8023f28 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8023f16:	f7fe fa4b 	bl	80223b0 <HAL_GetTick>
 8023f1a:	4602      	mov	r2, r0
 8023f1c:	693b      	ldr	r3, [r7, #16]
 8023f1e:	1ad3      	subs	r3, r2, r3
 8023f20:	2b02      	cmp	r3, #2
 8023f22:	d901      	bls.n	8023f28 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8023f24:	2303      	movs	r3, #3
 8023f26:	e036      	b.n	8023f96 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8023f28:	4b1e      	ldr	r3, [pc, #120]	; (8023fa4 <HAL_RCC_OscConfig+0x4d8>)
 8023f2a:	681b      	ldr	r3, [r3, #0]
 8023f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8023f30:	2b00      	cmp	r3, #0
 8023f32:	d1f0      	bne.n	8023f16 <HAL_RCC_OscConfig+0x44a>
 8023f34:	e02e      	b.n	8023f94 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8023f36:	687b      	ldr	r3, [r7, #4]
 8023f38:	699b      	ldr	r3, [r3, #24]
 8023f3a:	2b01      	cmp	r3, #1
 8023f3c:	d101      	bne.n	8023f42 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8023f3e:	2301      	movs	r3, #1
 8023f40:	e029      	b.n	8023f96 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8023f42:	4b18      	ldr	r3, [pc, #96]	; (8023fa4 <HAL_RCC_OscConfig+0x4d8>)
 8023f44:	685b      	ldr	r3, [r3, #4]
 8023f46:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8023f48:	68fb      	ldr	r3, [r7, #12]
 8023f4a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8023f4e:	687b      	ldr	r3, [r7, #4]
 8023f50:	69db      	ldr	r3, [r3, #28]
 8023f52:	429a      	cmp	r2, r3
 8023f54:	d11c      	bne.n	8023f90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8023f56:	68fb      	ldr	r3, [r7, #12]
 8023f58:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8023f5c:	687b      	ldr	r3, [r7, #4]
 8023f5e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8023f60:	429a      	cmp	r2, r3
 8023f62:	d115      	bne.n	8023f90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8023f64:	68fa      	ldr	r2, [r7, #12]
 8023f66:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8023f6a:	4013      	ands	r3, r2
 8023f6c:	687a      	ldr	r2, [r7, #4]
 8023f6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8023f70:	4293      	cmp	r3, r2
 8023f72:	d10d      	bne.n	8023f90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8023f74:	68fb      	ldr	r3, [r7, #12]
 8023f76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8023f7a:	687b      	ldr	r3, [r7, #4]
 8023f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8023f7e:	429a      	cmp	r2, r3
 8023f80:	d106      	bne.n	8023f90 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8023f82:	68fb      	ldr	r3, [r7, #12]
 8023f84:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8023f88:	687b      	ldr	r3, [r7, #4]
 8023f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8023f8c:	429a      	cmp	r2, r3
 8023f8e:	d001      	beq.n	8023f94 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8023f90:	2301      	movs	r3, #1
 8023f92:	e000      	b.n	8023f96 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8023f94:	2300      	movs	r3, #0
}
 8023f96:	4618      	mov	r0, r3
 8023f98:	3718      	adds	r7, #24
 8023f9a:	46bd      	mov	sp, r7
 8023f9c:	bd80      	pop	{r7, pc}
 8023f9e:	bf00      	nop
 8023fa0:	40007000 	.word	0x40007000
 8023fa4:	40023800 	.word	0x40023800
 8023fa8:	42470060 	.word	0x42470060

08023fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8023fac:	b580      	push	{r7, lr}
 8023fae:	b084      	sub	sp, #16
 8023fb0:	af00      	add	r7, sp, #0
 8023fb2:	6078      	str	r0, [r7, #4]
 8023fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8023fb6:	687b      	ldr	r3, [r7, #4]
 8023fb8:	2b00      	cmp	r3, #0
 8023fba:	d101      	bne.n	8023fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8023fbc:	2301      	movs	r3, #1
 8023fbe:	e0cc      	b.n	802415a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8023fc0:	4b68      	ldr	r3, [pc, #416]	; (8024164 <HAL_RCC_ClockConfig+0x1b8>)
 8023fc2:	681b      	ldr	r3, [r3, #0]
 8023fc4:	f003 030f 	and.w	r3, r3, #15
 8023fc8:	683a      	ldr	r2, [r7, #0]
 8023fca:	429a      	cmp	r2, r3
 8023fcc:	d90c      	bls.n	8023fe8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8023fce:	4b65      	ldr	r3, [pc, #404]	; (8024164 <HAL_RCC_ClockConfig+0x1b8>)
 8023fd0:	683a      	ldr	r2, [r7, #0]
 8023fd2:	b2d2      	uxtb	r2, r2
 8023fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8023fd6:	4b63      	ldr	r3, [pc, #396]	; (8024164 <HAL_RCC_ClockConfig+0x1b8>)
 8023fd8:	681b      	ldr	r3, [r3, #0]
 8023fda:	f003 030f 	and.w	r3, r3, #15
 8023fde:	683a      	ldr	r2, [r7, #0]
 8023fe0:	429a      	cmp	r2, r3
 8023fe2:	d001      	beq.n	8023fe8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8023fe4:	2301      	movs	r3, #1
 8023fe6:	e0b8      	b.n	802415a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8023fe8:	687b      	ldr	r3, [r7, #4]
 8023fea:	681b      	ldr	r3, [r3, #0]
 8023fec:	f003 0302 	and.w	r3, r3, #2
 8023ff0:	2b00      	cmp	r3, #0
 8023ff2:	d020      	beq.n	8024036 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8023ff4:	687b      	ldr	r3, [r7, #4]
 8023ff6:	681b      	ldr	r3, [r3, #0]
 8023ff8:	f003 0304 	and.w	r3, r3, #4
 8023ffc:	2b00      	cmp	r3, #0
 8023ffe:	d005      	beq.n	802400c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8024000:	4b59      	ldr	r3, [pc, #356]	; (8024168 <HAL_RCC_ClockConfig+0x1bc>)
 8024002:	689b      	ldr	r3, [r3, #8]
 8024004:	4a58      	ldr	r2, [pc, #352]	; (8024168 <HAL_RCC_ClockConfig+0x1bc>)
 8024006:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 802400a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802400c:	687b      	ldr	r3, [r7, #4]
 802400e:	681b      	ldr	r3, [r3, #0]
 8024010:	f003 0308 	and.w	r3, r3, #8
 8024014:	2b00      	cmp	r3, #0
 8024016:	d005      	beq.n	8024024 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8024018:	4b53      	ldr	r3, [pc, #332]	; (8024168 <HAL_RCC_ClockConfig+0x1bc>)
 802401a:	689b      	ldr	r3, [r3, #8]
 802401c:	4a52      	ldr	r2, [pc, #328]	; (8024168 <HAL_RCC_ClockConfig+0x1bc>)
 802401e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8024022:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8024024:	4b50      	ldr	r3, [pc, #320]	; (8024168 <HAL_RCC_ClockConfig+0x1bc>)
 8024026:	689b      	ldr	r3, [r3, #8]
 8024028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 802402c:	687b      	ldr	r3, [r7, #4]
 802402e:	689b      	ldr	r3, [r3, #8]
 8024030:	494d      	ldr	r1, [pc, #308]	; (8024168 <HAL_RCC_ClockConfig+0x1bc>)
 8024032:	4313      	orrs	r3, r2
 8024034:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8024036:	687b      	ldr	r3, [r7, #4]
 8024038:	681b      	ldr	r3, [r3, #0]
 802403a:	f003 0301 	and.w	r3, r3, #1
 802403e:	2b00      	cmp	r3, #0
 8024040:	d044      	beq.n	80240cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8024042:	687b      	ldr	r3, [r7, #4]
 8024044:	685b      	ldr	r3, [r3, #4]
 8024046:	2b01      	cmp	r3, #1
 8024048:	d107      	bne.n	802405a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802404a:	4b47      	ldr	r3, [pc, #284]	; (8024168 <HAL_RCC_ClockConfig+0x1bc>)
 802404c:	681b      	ldr	r3, [r3, #0]
 802404e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8024052:	2b00      	cmp	r3, #0
 8024054:	d119      	bne.n	802408a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8024056:	2301      	movs	r3, #1
 8024058:	e07f      	b.n	802415a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802405a:	687b      	ldr	r3, [r7, #4]
 802405c:	685b      	ldr	r3, [r3, #4]
 802405e:	2b02      	cmp	r3, #2
 8024060:	d003      	beq.n	802406a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8024062:	687b      	ldr	r3, [r7, #4]
 8024064:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8024066:	2b03      	cmp	r3, #3
 8024068:	d107      	bne.n	802407a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802406a:	4b3f      	ldr	r3, [pc, #252]	; (8024168 <HAL_RCC_ClockConfig+0x1bc>)
 802406c:	681b      	ldr	r3, [r3, #0]
 802406e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8024072:	2b00      	cmp	r3, #0
 8024074:	d109      	bne.n	802408a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8024076:	2301      	movs	r3, #1
 8024078:	e06f      	b.n	802415a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802407a:	4b3b      	ldr	r3, [pc, #236]	; (8024168 <HAL_RCC_ClockConfig+0x1bc>)
 802407c:	681b      	ldr	r3, [r3, #0]
 802407e:	f003 0302 	and.w	r3, r3, #2
 8024082:	2b00      	cmp	r3, #0
 8024084:	d101      	bne.n	802408a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8024086:	2301      	movs	r3, #1
 8024088:	e067      	b.n	802415a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 802408a:	4b37      	ldr	r3, [pc, #220]	; (8024168 <HAL_RCC_ClockConfig+0x1bc>)
 802408c:	689b      	ldr	r3, [r3, #8]
 802408e:	f023 0203 	bic.w	r2, r3, #3
 8024092:	687b      	ldr	r3, [r7, #4]
 8024094:	685b      	ldr	r3, [r3, #4]
 8024096:	4934      	ldr	r1, [pc, #208]	; (8024168 <HAL_RCC_ClockConfig+0x1bc>)
 8024098:	4313      	orrs	r3, r2
 802409a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 802409c:	f7fe f988 	bl	80223b0 <HAL_GetTick>
 80240a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80240a2:	e00a      	b.n	80240ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80240a4:	f7fe f984 	bl	80223b0 <HAL_GetTick>
 80240a8:	4602      	mov	r2, r0
 80240aa:	68fb      	ldr	r3, [r7, #12]
 80240ac:	1ad3      	subs	r3, r2, r3
 80240ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80240b2:	4293      	cmp	r3, r2
 80240b4:	d901      	bls.n	80240ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80240b6:	2303      	movs	r3, #3
 80240b8:	e04f      	b.n	802415a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80240ba:	4b2b      	ldr	r3, [pc, #172]	; (8024168 <HAL_RCC_ClockConfig+0x1bc>)
 80240bc:	689b      	ldr	r3, [r3, #8]
 80240be:	f003 020c 	and.w	r2, r3, #12
 80240c2:	687b      	ldr	r3, [r7, #4]
 80240c4:	685b      	ldr	r3, [r3, #4]
 80240c6:	009b      	lsls	r3, r3, #2
 80240c8:	429a      	cmp	r2, r3
 80240ca:	d1eb      	bne.n	80240a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80240cc:	4b25      	ldr	r3, [pc, #148]	; (8024164 <HAL_RCC_ClockConfig+0x1b8>)
 80240ce:	681b      	ldr	r3, [r3, #0]
 80240d0:	f003 030f 	and.w	r3, r3, #15
 80240d4:	683a      	ldr	r2, [r7, #0]
 80240d6:	429a      	cmp	r2, r3
 80240d8:	d20c      	bcs.n	80240f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80240da:	4b22      	ldr	r3, [pc, #136]	; (8024164 <HAL_RCC_ClockConfig+0x1b8>)
 80240dc:	683a      	ldr	r2, [r7, #0]
 80240de:	b2d2      	uxtb	r2, r2
 80240e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80240e2:	4b20      	ldr	r3, [pc, #128]	; (8024164 <HAL_RCC_ClockConfig+0x1b8>)
 80240e4:	681b      	ldr	r3, [r3, #0]
 80240e6:	f003 030f 	and.w	r3, r3, #15
 80240ea:	683a      	ldr	r2, [r7, #0]
 80240ec:	429a      	cmp	r2, r3
 80240ee:	d001      	beq.n	80240f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80240f0:	2301      	movs	r3, #1
 80240f2:	e032      	b.n	802415a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80240f4:	687b      	ldr	r3, [r7, #4]
 80240f6:	681b      	ldr	r3, [r3, #0]
 80240f8:	f003 0304 	and.w	r3, r3, #4
 80240fc:	2b00      	cmp	r3, #0
 80240fe:	d008      	beq.n	8024112 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8024100:	4b19      	ldr	r3, [pc, #100]	; (8024168 <HAL_RCC_ClockConfig+0x1bc>)
 8024102:	689b      	ldr	r3, [r3, #8]
 8024104:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8024108:	687b      	ldr	r3, [r7, #4]
 802410a:	68db      	ldr	r3, [r3, #12]
 802410c:	4916      	ldr	r1, [pc, #88]	; (8024168 <HAL_RCC_ClockConfig+0x1bc>)
 802410e:	4313      	orrs	r3, r2
 8024110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8024112:	687b      	ldr	r3, [r7, #4]
 8024114:	681b      	ldr	r3, [r3, #0]
 8024116:	f003 0308 	and.w	r3, r3, #8
 802411a:	2b00      	cmp	r3, #0
 802411c:	d009      	beq.n	8024132 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 802411e:	4b12      	ldr	r3, [pc, #72]	; (8024168 <HAL_RCC_ClockConfig+0x1bc>)
 8024120:	689b      	ldr	r3, [r3, #8]
 8024122:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8024126:	687b      	ldr	r3, [r7, #4]
 8024128:	691b      	ldr	r3, [r3, #16]
 802412a:	00db      	lsls	r3, r3, #3
 802412c:	490e      	ldr	r1, [pc, #56]	; (8024168 <HAL_RCC_ClockConfig+0x1bc>)
 802412e:	4313      	orrs	r3, r2
 8024130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8024132:	f000 f821 	bl	8024178 <HAL_RCC_GetSysClockFreq>
 8024136:	4601      	mov	r1, r0
 8024138:	4b0b      	ldr	r3, [pc, #44]	; (8024168 <HAL_RCC_ClockConfig+0x1bc>)
 802413a:	689b      	ldr	r3, [r3, #8]
 802413c:	091b      	lsrs	r3, r3, #4
 802413e:	f003 030f 	and.w	r3, r3, #15
 8024142:	4a0a      	ldr	r2, [pc, #40]	; (802416c <HAL_RCC_ClockConfig+0x1c0>)
 8024144:	5cd3      	ldrb	r3, [r2, r3]
 8024146:	fa21 f303 	lsr.w	r3, r1, r3
 802414a:	4a09      	ldr	r2, [pc, #36]	; (8024170 <HAL_RCC_ClockConfig+0x1c4>)
 802414c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 802414e:	4b09      	ldr	r3, [pc, #36]	; (8024174 <HAL_RCC_ClockConfig+0x1c8>)
 8024150:	681b      	ldr	r3, [r3, #0]
 8024152:	4618      	mov	r0, r3
 8024154:	f7fe f8e8 	bl	8022328 <HAL_InitTick>

  return HAL_OK;
 8024158:	2300      	movs	r3, #0
}
 802415a:	4618      	mov	r0, r3
 802415c:	3710      	adds	r7, #16
 802415e:	46bd      	mov	sp, r7
 8024160:	bd80      	pop	{r7, pc}
 8024162:	bf00      	nop
 8024164:	40023c00 	.word	0x40023c00
 8024168:	40023800 	.word	0x40023800
 802416c:	08025428 	.word	0x08025428
 8024170:	20000000 	.word	0x20000000
 8024174:	20000004 	.word	0x20000004

08024178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8024178:	b5f0      	push	{r4, r5, r6, r7, lr}
 802417a:	b085      	sub	sp, #20
 802417c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 802417e:	2300      	movs	r3, #0
 8024180:	607b      	str	r3, [r7, #4]
 8024182:	2300      	movs	r3, #0
 8024184:	60fb      	str	r3, [r7, #12]
 8024186:	2300      	movs	r3, #0
 8024188:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 802418a:	2300      	movs	r3, #0
 802418c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 802418e:	4b50      	ldr	r3, [pc, #320]	; (80242d0 <HAL_RCC_GetSysClockFreq+0x158>)
 8024190:	689b      	ldr	r3, [r3, #8]
 8024192:	f003 030c 	and.w	r3, r3, #12
 8024196:	2b04      	cmp	r3, #4
 8024198:	d007      	beq.n	80241aa <HAL_RCC_GetSysClockFreq+0x32>
 802419a:	2b08      	cmp	r3, #8
 802419c:	d008      	beq.n	80241b0 <HAL_RCC_GetSysClockFreq+0x38>
 802419e:	2b00      	cmp	r3, #0
 80241a0:	f040 808d 	bne.w	80242be <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80241a4:	4b4b      	ldr	r3, [pc, #300]	; (80242d4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80241a6:	60bb      	str	r3, [r7, #8]
       break;
 80241a8:	e08c      	b.n	80242c4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80241aa:	4b4b      	ldr	r3, [pc, #300]	; (80242d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80241ac:	60bb      	str	r3, [r7, #8]
      break;
 80241ae:	e089      	b.n	80242c4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80241b0:	4b47      	ldr	r3, [pc, #284]	; (80242d0 <HAL_RCC_GetSysClockFreq+0x158>)
 80241b2:	685b      	ldr	r3, [r3, #4]
 80241b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80241b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80241ba:	4b45      	ldr	r3, [pc, #276]	; (80242d0 <HAL_RCC_GetSysClockFreq+0x158>)
 80241bc:	685b      	ldr	r3, [r3, #4]
 80241be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80241c2:	2b00      	cmp	r3, #0
 80241c4:	d023      	beq.n	802420e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80241c6:	4b42      	ldr	r3, [pc, #264]	; (80242d0 <HAL_RCC_GetSysClockFreq+0x158>)
 80241c8:	685b      	ldr	r3, [r3, #4]
 80241ca:	099b      	lsrs	r3, r3, #6
 80241cc:	f04f 0400 	mov.w	r4, #0
 80241d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80241d4:	f04f 0200 	mov.w	r2, #0
 80241d8:	ea03 0501 	and.w	r5, r3, r1
 80241dc:	ea04 0602 	and.w	r6, r4, r2
 80241e0:	4a3d      	ldr	r2, [pc, #244]	; (80242d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80241e2:	fb02 f106 	mul.w	r1, r2, r6
 80241e6:	2200      	movs	r2, #0
 80241e8:	fb02 f205 	mul.w	r2, r2, r5
 80241ec:	440a      	add	r2, r1
 80241ee:	493a      	ldr	r1, [pc, #232]	; (80242d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80241f0:	fba5 0101 	umull	r0, r1, r5, r1
 80241f4:	1853      	adds	r3, r2, r1
 80241f6:	4619      	mov	r1, r3
 80241f8:	687b      	ldr	r3, [r7, #4]
 80241fa:	f04f 0400 	mov.w	r4, #0
 80241fe:	461a      	mov	r2, r3
 8024200:	4623      	mov	r3, r4
 8024202:	f7fb ff1d 	bl	8020040 <__aeabi_uldivmod>
 8024206:	4603      	mov	r3, r0
 8024208:	460c      	mov	r4, r1
 802420a:	60fb      	str	r3, [r7, #12]
 802420c:	e049      	b.n	80242a2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802420e:	4b30      	ldr	r3, [pc, #192]	; (80242d0 <HAL_RCC_GetSysClockFreq+0x158>)
 8024210:	685b      	ldr	r3, [r3, #4]
 8024212:	099b      	lsrs	r3, r3, #6
 8024214:	f04f 0400 	mov.w	r4, #0
 8024218:	f240 11ff 	movw	r1, #511	; 0x1ff
 802421c:	f04f 0200 	mov.w	r2, #0
 8024220:	ea03 0501 	and.w	r5, r3, r1
 8024224:	ea04 0602 	and.w	r6, r4, r2
 8024228:	4629      	mov	r1, r5
 802422a:	4632      	mov	r2, r6
 802422c:	f04f 0300 	mov.w	r3, #0
 8024230:	f04f 0400 	mov.w	r4, #0
 8024234:	0154      	lsls	r4, r2, #5
 8024236:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 802423a:	014b      	lsls	r3, r1, #5
 802423c:	4619      	mov	r1, r3
 802423e:	4622      	mov	r2, r4
 8024240:	1b49      	subs	r1, r1, r5
 8024242:	eb62 0206 	sbc.w	r2, r2, r6
 8024246:	f04f 0300 	mov.w	r3, #0
 802424a:	f04f 0400 	mov.w	r4, #0
 802424e:	0194      	lsls	r4, r2, #6
 8024250:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8024254:	018b      	lsls	r3, r1, #6
 8024256:	1a5b      	subs	r3, r3, r1
 8024258:	eb64 0402 	sbc.w	r4, r4, r2
 802425c:	f04f 0100 	mov.w	r1, #0
 8024260:	f04f 0200 	mov.w	r2, #0
 8024264:	00e2      	lsls	r2, r4, #3
 8024266:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 802426a:	00d9      	lsls	r1, r3, #3
 802426c:	460b      	mov	r3, r1
 802426e:	4614      	mov	r4, r2
 8024270:	195b      	adds	r3, r3, r5
 8024272:	eb44 0406 	adc.w	r4, r4, r6
 8024276:	f04f 0100 	mov.w	r1, #0
 802427a:	f04f 0200 	mov.w	r2, #0
 802427e:	02a2      	lsls	r2, r4, #10
 8024280:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8024284:	0299      	lsls	r1, r3, #10
 8024286:	460b      	mov	r3, r1
 8024288:	4614      	mov	r4, r2
 802428a:	4618      	mov	r0, r3
 802428c:	4621      	mov	r1, r4
 802428e:	687b      	ldr	r3, [r7, #4]
 8024290:	f04f 0400 	mov.w	r4, #0
 8024294:	461a      	mov	r2, r3
 8024296:	4623      	mov	r3, r4
 8024298:	f7fb fed2 	bl	8020040 <__aeabi_uldivmod>
 802429c:	4603      	mov	r3, r0
 802429e:	460c      	mov	r4, r1
 80242a0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80242a2:	4b0b      	ldr	r3, [pc, #44]	; (80242d0 <HAL_RCC_GetSysClockFreq+0x158>)
 80242a4:	685b      	ldr	r3, [r3, #4]
 80242a6:	0c1b      	lsrs	r3, r3, #16
 80242a8:	f003 0303 	and.w	r3, r3, #3
 80242ac:	3301      	adds	r3, #1
 80242ae:	005b      	lsls	r3, r3, #1
 80242b0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80242b2:	68fa      	ldr	r2, [r7, #12]
 80242b4:	683b      	ldr	r3, [r7, #0]
 80242b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80242ba:	60bb      	str	r3, [r7, #8]
      break;
 80242bc:	e002      	b.n	80242c4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80242be:	4b05      	ldr	r3, [pc, #20]	; (80242d4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80242c0:	60bb      	str	r3, [r7, #8]
      break;
 80242c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80242c4:	68bb      	ldr	r3, [r7, #8]
}
 80242c6:	4618      	mov	r0, r3
 80242c8:	3714      	adds	r7, #20
 80242ca:	46bd      	mov	sp, r7
 80242cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80242ce:	bf00      	nop
 80242d0:	40023800 	.word	0x40023800
 80242d4:	00f42400 	.word	0x00f42400
 80242d8:	00b71b00 	.word	0x00b71b00

080242dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80242dc:	b480      	push	{r7}
 80242de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80242e0:	4b03      	ldr	r3, [pc, #12]	; (80242f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80242e2:	681b      	ldr	r3, [r3, #0]
}
 80242e4:	4618      	mov	r0, r3
 80242e6:	46bd      	mov	sp, r7
 80242e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80242ec:	4770      	bx	lr
 80242ee:	bf00      	nop
 80242f0:	20000000 	.word	0x20000000

080242f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80242f4:	b580      	push	{r7, lr}
 80242f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80242f8:	f7ff fff0 	bl	80242dc <HAL_RCC_GetHCLKFreq>
 80242fc:	4601      	mov	r1, r0
 80242fe:	4b05      	ldr	r3, [pc, #20]	; (8024314 <HAL_RCC_GetPCLK1Freq+0x20>)
 8024300:	689b      	ldr	r3, [r3, #8]
 8024302:	0a9b      	lsrs	r3, r3, #10
 8024304:	f003 0307 	and.w	r3, r3, #7
 8024308:	4a03      	ldr	r2, [pc, #12]	; (8024318 <HAL_RCC_GetPCLK1Freq+0x24>)
 802430a:	5cd3      	ldrb	r3, [r2, r3]
 802430c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8024310:	4618      	mov	r0, r3
 8024312:	bd80      	pop	{r7, pc}
 8024314:	40023800 	.word	0x40023800
 8024318:	08025438 	.word	0x08025438

0802431c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 802431c:	b580      	push	{r7, lr}
 802431e:	b082      	sub	sp, #8
 8024320:	af00      	add	r7, sp, #0
 8024322:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8024324:	687b      	ldr	r3, [r7, #4]
 8024326:	2b00      	cmp	r3, #0
 8024328:	d101      	bne.n	802432e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 802432a:	2301      	movs	r3, #1
 802432c:	e056      	b.n	80243dc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802432e:	687b      	ldr	r3, [r7, #4]
 8024330:	2200      	movs	r2, #0
 8024332:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8024334:	687b      	ldr	r3, [r7, #4]
 8024336:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802433a:	b2db      	uxtb	r3, r3
 802433c:	2b00      	cmp	r3, #0
 802433e:	d106      	bne.n	802434e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8024340:	687b      	ldr	r3, [r7, #4]
 8024342:	2200      	movs	r2, #0
 8024344:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8024348:	6878      	ldr	r0, [r7, #4]
 802434a:	f7fd fbbb 	bl	8021ac4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 802434e:	687b      	ldr	r3, [r7, #4]
 8024350:	2202      	movs	r2, #2
 8024352:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8024356:	687b      	ldr	r3, [r7, #4]
 8024358:	681b      	ldr	r3, [r3, #0]
 802435a:	681a      	ldr	r2, [r3, #0]
 802435c:	687b      	ldr	r3, [r7, #4]
 802435e:	681b      	ldr	r3, [r3, #0]
 8024360:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8024364:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8024366:	687b      	ldr	r3, [r7, #4]
 8024368:	685a      	ldr	r2, [r3, #4]
 802436a:	687b      	ldr	r3, [r7, #4]
 802436c:	689b      	ldr	r3, [r3, #8]
 802436e:	431a      	orrs	r2, r3
 8024370:	687b      	ldr	r3, [r7, #4]
 8024372:	68db      	ldr	r3, [r3, #12]
 8024374:	431a      	orrs	r2, r3
 8024376:	687b      	ldr	r3, [r7, #4]
 8024378:	691b      	ldr	r3, [r3, #16]
 802437a:	431a      	orrs	r2, r3
 802437c:	687b      	ldr	r3, [r7, #4]
 802437e:	695b      	ldr	r3, [r3, #20]
 8024380:	431a      	orrs	r2, r3
 8024382:	687b      	ldr	r3, [r7, #4]
 8024384:	699b      	ldr	r3, [r3, #24]
 8024386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802438a:	431a      	orrs	r2, r3
 802438c:	687b      	ldr	r3, [r7, #4]
 802438e:	69db      	ldr	r3, [r3, #28]
 8024390:	431a      	orrs	r2, r3
 8024392:	687b      	ldr	r3, [r7, #4]
 8024394:	6a1b      	ldr	r3, [r3, #32]
 8024396:	ea42 0103 	orr.w	r1, r2, r3
 802439a:	687b      	ldr	r3, [r7, #4]
 802439c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802439e:	687b      	ldr	r3, [r7, #4]
 80243a0:	681b      	ldr	r3, [r3, #0]
 80243a2:	430a      	orrs	r2, r1
 80243a4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80243a6:	687b      	ldr	r3, [r7, #4]
 80243a8:	699b      	ldr	r3, [r3, #24]
 80243aa:	0c1b      	lsrs	r3, r3, #16
 80243ac:	f003 0104 	and.w	r1, r3, #4
 80243b0:	687b      	ldr	r3, [r7, #4]
 80243b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80243b4:	687b      	ldr	r3, [r7, #4]
 80243b6:	681b      	ldr	r3, [r3, #0]
 80243b8:	430a      	orrs	r2, r1
 80243ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80243bc:	687b      	ldr	r3, [r7, #4]
 80243be:	681b      	ldr	r3, [r3, #0]
 80243c0:	69da      	ldr	r2, [r3, #28]
 80243c2:	687b      	ldr	r3, [r7, #4]
 80243c4:	681b      	ldr	r3, [r3, #0]
 80243c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80243ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80243cc:	687b      	ldr	r3, [r7, #4]
 80243ce:	2200      	movs	r2, #0
 80243d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80243d2:	687b      	ldr	r3, [r7, #4]
 80243d4:	2201      	movs	r2, #1
 80243d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80243da:	2300      	movs	r3, #0
}
 80243dc:	4618      	mov	r0, r3
 80243de:	3708      	adds	r7, #8
 80243e0:	46bd      	mov	sp, r7
 80243e2:	bd80      	pop	{r7, pc}

080243e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80243e4:	b580      	push	{r7, lr}
 80243e6:	b082      	sub	sp, #8
 80243e8:	af00      	add	r7, sp, #0
 80243ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80243ec:	687b      	ldr	r3, [r7, #4]
 80243ee:	2b00      	cmp	r3, #0
 80243f0:	d101      	bne.n	80243f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80243f2:	2301      	movs	r3, #1
 80243f4:	e01d      	b.n	8024432 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80243f6:	687b      	ldr	r3, [r7, #4]
 80243f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80243fc:	b2db      	uxtb	r3, r3
 80243fe:	2b00      	cmp	r3, #0
 8024400:	d106      	bne.n	8024410 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8024402:	687b      	ldr	r3, [r7, #4]
 8024404:	2200      	movs	r2, #0
 8024406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 802440a:	6878      	ldr	r0, [r7, #4]
 802440c:	f7fd fbf0 	bl	8021bf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8024410:	687b      	ldr	r3, [r7, #4]
 8024412:	2202      	movs	r2, #2
 8024414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8024418:	687b      	ldr	r3, [r7, #4]
 802441a:	681a      	ldr	r2, [r3, #0]
 802441c:	687b      	ldr	r3, [r7, #4]
 802441e:	3304      	adds	r3, #4
 8024420:	4619      	mov	r1, r3
 8024422:	4610      	mov	r0, r2
 8024424:	f000 fbd6 	bl	8024bd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8024428:	687b      	ldr	r3, [r7, #4]
 802442a:	2201      	movs	r2, #1
 802442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8024430:	2300      	movs	r3, #0
}
 8024432:	4618      	mov	r0, r3
 8024434:	3708      	adds	r7, #8
 8024436:	46bd      	mov	sp, r7
 8024438:	bd80      	pop	{r7, pc}

0802443a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 802443a:	b480      	push	{r7}
 802443c:	b085      	sub	sp, #20
 802443e:	af00      	add	r7, sp, #0
 8024440:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8024442:	687b      	ldr	r3, [r7, #4]
 8024444:	681b      	ldr	r3, [r3, #0]
 8024446:	68da      	ldr	r2, [r3, #12]
 8024448:	687b      	ldr	r3, [r7, #4]
 802444a:	681b      	ldr	r3, [r3, #0]
 802444c:	f042 0201 	orr.w	r2, r2, #1
 8024450:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8024452:	687b      	ldr	r3, [r7, #4]
 8024454:	681b      	ldr	r3, [r3, #0]
 8024456:	689b      	ldr	r3, [r3, #8]
 8024458:	f003 0307 	and.w	r3, r3, #7
 802445c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802445e:	68fb      	ldr	r3, [r7, #12]
 8024460:	2b06      	cmp	r3, #6
 8024462:	d007      	beq.n	8024474 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8024464:	687b      	ldr	r3, [r7, #4]
 8024466:	681b      	ldr	r3, [r3, #0]
 8024468:	681a      	ldr	r2, [r3, #0]
 802446a:	687b      	ldr	r3, [r7, #4]
 802446c:	681b      	ldr	r3, [r3, #0]
 802446e:	f042 0201 	orr.w	r2, r2, #1
 8024472:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8024474:	2300      	movs	r3, #0
}
 8024476:	4618      	mov	r0, r3
 8024478:	3714      	adds	r7, #20
 802447a:	46bd      	mov	sp, r7
 802447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024480:	4770      	bx	lr

08024482 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8024482:	b580      	push	{r7, lr}
 8024484:	b082      	sub	sp, #8
 8024486:	af00      	add	r7, sp, #0
 8024488:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 802448a:	687b      	ldr	r3, [r7, #4]
 802448c:	2b00      	cmp	r3, #0
 802448e:	d101      	bne.n	8024494 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8024490:	2301      	movs	r3, #1
 8024492:	e01d      	b.n	80244d0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8024494:	687b      	ldr	r3, [r7, #4]
 8024496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802449a:	b2db      	uxtb	r3, r3
 802449c:	2b00      	cmp	r3, #0
 802449e:	d106      	bne.n	80244ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80244a0:	687b      	ldr	r3, [r7, #4]
 80244a2:	2200      	movs	r2, #0
 80244a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80244a8:	6878      	ldr	r0, [r7, #4]
 80244aa:	f7fd fb53 	bl	8021b54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80244ae:	687b      	ldr	r3, [r7, #4]
 80244b0:	2202      	movs	r2, #2
 80244b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80244b6:	687b      	ldr	r3, [r7, #4]
 80244b8:	681a      	ldr	r2, [r3, #0]
 80244ba:	687b      	ldr	r3, [r7, #4]
 80244bc:	3304      	adds	r3, #4
 80244be:	4619      	mov	r1, r3
 80244c0:	4610      	mov	r0, r2
 80244c2:	f000 fb87 	bl	8024bd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80244c6:	687b      	ldr	r3, [r7, #4]
 80244c8:	2201      	movs	r2, #1
 80244ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80244ce:	2300      	movs	r3, #0
}
 80244d0:	4618      	mov	r0, r3
 80244d2:	3708      	adds	r7, #8
 80244d4:	46bd      	mov	sp, r7
 80244d6:	bd80      	pop	{r7, pc}

080244d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80244d8:	b580      	push	{r7, lr}
 80244da:	b084      	sub	sp, #16
 80244dc:	af00      	add	r7, sp, #0
 80244de:	6078      	str	r0, [r7, #4]
 80244e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80244e2:	687b      	ldr	r3, [r7, #4]
 80244e4:	681b      	ldr	r3, [r3, #0]
 80244e6:	2201      	movs	r2, #1
 80244e8:	6839      	ldr	r1, [r7, #0]
 80244ea:	4618      	mov	r0, r3
 80244ec:	f000 fe5c 	bl	80251a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80244f0:	687b      	ldr	r3, [r7, #4]
 80244f2:	681b      	ldr	r3, [r3, #0]
 80244f4:	4a15      	ldr	r2, [pc, #84]	; (802454c <HAL_TIM_PWM_Start+0x74>)
 80244f6:	4293      	cmp	r3, r2
 80244f8:	d004      	beq.n	8024504 <HAL_TIM_PWM_Start+0x2c>
 80244fa:	687b      	ldr	r3, [r7, #4]
 80244fc:	681b      	ldr	r3, [r3, #0]
 80244fe:	4a14      	ldr	r2, [pc, #80]	; (8024550 <HAL_TIM_PWM_Start+0x78>)
 8024500:	4293      	cmp	r3, r2
 8024502:	d101      	bne.n	8024508 <HAL_TIM_PWM_Start+0x30>
 8024504:	2301      	movs	r3, #1
 8024506:	e000      	b.n	802450a <HAL_TIM_PWM_Start+0x32>
 8024508:	2300      	movs	r3, #0
 802450a:	2b00      	cmp	r3, #0
 802450c:	d007      	beq.n	802451e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 802450e:	687b      	ldr	r3, [r7, #4]
 8024510:	681b      	ldr	r3, [r3, #0]
 8024512:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8024514:	687b      	ldr	r3, [r7, #4]
 8024516:	681b      	ldr	r3, [r3, #0]
 8024518:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802451c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802451e:	687b      	ldr	r3, [r7, #4]
 8024520:	681b      	ldr	r3, [r3, #0]
 8024522:	689b      	ldr	r3, [r3, #8]
 8024524:	f003 0307 	and.w	r3, r3, #7
 8024528:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802452a:	68fb      	ldr	r3, [r7, #12]
 802452c:	2b06      	cmp	r3, #6
 802452e:	d007      	beq.n	8024540 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8024530:	687b      	ldr	r3, [r7, #4]
 8024532:	681b      	ldr	r3, [r3, #0]
 8024534:	681a      	ldr	r2, [r3, #0]
 8024536:	687b      	ldr	r3, [r7, #4]
 8024538:	681b      	ldr	r3, [r3, #0]
 802453a:	f042 0201 	orr.w	r2, r2, #1
 802453e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8024540:	2300      	movs	r3, #0
}
 8024542:	4618      	mov	r0, r3
 8024544:	3710      	adds	r7, #16
 8024546:	46bd      	mov	sp, r7
 8024548:	bd80      	pop	{r7, pc}
 802454a:	bf00      	nop
 802454c:	40010000 	.word	0x40010000
 8024550:	40010400 	.word	0x40010400

08024554 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8024554:	b580      	push	{r7, lr}
 8024556:	b086      	sub	sp, #24
 8024558:	af00      	add	r7, sp, #0
 802455a:	6078      	str	r0, [r7, #4]
 802455c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 802455e:	687b      	ldr	r3, [r7, #4]
 8024560:	2b00      	cmp	r3, #0
 8024562:	d101      	bne.n	8024568 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8024564:	2301      	movs	r3, #1
 8024566:	e083      	b.n	8024670 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8024568:	687b      	ldr	r3, [r7, #4]
 802456a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802456e:	b2db      	uxtb	r3, r3
 8024570:	2b00      	cmp	r3, #0
 8024572:	d106      	bne.n	8024582 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8024574:	687b      	ldr	r3, [r7, #4]
 8024576:	2200      	movs	r2, #0
 8024578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 802457c:	6878      	ldr	r0, [r7, #4]
 802457e:	f7fd fbcd 	bl	8021d1c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8024582:	687b      	ldr	r3, [r7, #4]
 8024584:	2202      	movs	r2, #2
 8024586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 802458a:	687b      	ldr	r3, [r7, #4]
 802458c:	681b      	ldr	r3, [r3, #0]
 802458e:	689b      	ldr	r3, [r3, #8]
 8024590:	687a      	ldr	r2, [r7, #4]
 8024592:	6812      	ldr	r2, [r2, #0]
 8024594:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8024598:	f023 0307 	bic.w	r3, r3, #7
 802459c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802459e:	687b      	ldr	r3, [r7, #4]
 80245a0:	681a      	ldr	r2, [r3, #0]
 80245a2:	687b      	ldr	r3, [r7, #4]
 80245a4:	3304      	adds	r3, #4
 80245a6:	4619      	mov	r1, r3
 80245a8:	4610      	mov	r0, r2
 80245aa:	f000 fb13 	bl	8024bd4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80245ae:	687b      	ldr	r3, [r7, #4]
 80245b0:	681b      	ldr	r3, [r3, #0]
 80245b2:	689b      	ldr	r3, [r3, #8]
 80245b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80245b6:	687b      	ldr	r3, [r7, #4]
 80245b8:	681b      	ldr	r3, [r3, #0]
 80245ba:	699b      	ldr	r3, [r3, #24]
 80245bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80245be:	687b      	ldr	r3, [r7, #4]
 80245c0:	681b      	ldr	r3, [r3, #0]
 80245c2:	6a1b      	ldr	r3, [r3, #32]
 80245c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80245c6:	683b      	ldr	r3, [r7, #0]
 80245c8:	681b      	ldr	r3, [r3, #0]
 80245ca:	697a      	ldr	r2, [r7, #20]
 80245cc:	4313      	orrs	r3, r2
 80245ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80245d0:	693b      	ldr	r3, [r7, #16]
 80245d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80245d6:	f023 0303 	bic.w	r3, r3, #3
 80245da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80245dc:	683b      	ldr	r3, [r7, #0]
 80245de:	689a      	ldr	r2, [r3, #8]
 80245e0:	683b      	ldr	r3, [r7, #0]
 80245e2:	699b      	ldr	r3, [r3, #24]
 80245e4:	021b      	lsls	r3, r3, #8
 80245e6:	4313      	orrs	r3, r2
 80245e8:	693a      	ldr	r2, [r7, #16]
 80245ea:	4313      	orrs	r3, r2
 80245ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80245ee:	693b      	ldr	r3, [r7, #16]
 80245f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80245f4:	f023 030c 	bic.w	r3, r3, #12
 80245f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80245fa:	693b      	ldr	r3, [r7, #16]
 80245fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8024600:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8024604:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8024606:	683b      	ldr	r3, [r7, #0]
 8024608:	68da      	ldr	r2, [r3, #12]
 802460a:	683b      	ldr	r3, [r7, #0]
 802460c:	69db      	ldr	r3, [r3, #28]
 802460e:	021b      	lsls	r3, r3, #8
 8024610:	4313      	orrs	r3, r2
 8024612:	693a      	ldr	r2, [r7, #16]
 8024614:	4313      	orrs	r3, r2
 8024616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8024618:	683b      	ldr	r3, [r7, #0]
 802461a:	691b      	ldr	r3, [r3, #16]
 802461c:	011a      	lsls	r2, r3, #4
 802461e:	683b      	ldr	r3, [r7, #0]
 8024620:	6a1b      	ldr	r3, [r3, #32]
 8024622:	031b      	lsls	r3, r3, #12
 8024624:	4313      	orrs	r3, r2
 8024626:	693a      	ldr	r2, [r7, #16]
 8024628:	4313      	orrs	r3, r2
 802462a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 802462c:	68fb      	ldr	r3, [r7, #12]
 802462e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8024632:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8024634:	68fb      	ldr	r3, [r7, #12]
 8024636:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 802463a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 802463c:	683b      	ldr	r3, [r7, #0]
 802463e:	685a      	ldr	r2, [r3, #4]
 8024640:	683b      	ldr	r3, [r7, #0]
 8024642:	695b      	ldr	r3, [r3, #20]
 8024644:	011b      	lsls	r3, r3, #4
 8024646:	4313      	orrs	r3, r2
 8024648:	68fa      	ldr	r2, [r7, #12]
 802464a:	4313      	orrs	r3, r2
 802464c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 802464e:	687b      	ldr	r3, [r7, #4]
 8024650:	681b      	ldr	r3, [r3, #0]
 8024652:	697a      	ldr	r2, [r7, #20]
 8024654:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8024656:	687b      	ldr	r3, [r7, #4]
 8024658:	681b      	ldr	r3, [r3, #0]
 802465a:	693a      	ldr	r2, [r7, #16]
 802465c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 802465e:	687b      	ldr	r3, [r7, #4]
 8024660:	681b      	ldr	r3, [r3, #0]
 8024662:	68fa      	ldr	r2, [r7, #12]
 8024664:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8024666:	687b      	ldr	r3, [r7, #4]
 8024668:	2201      	movs	r2, #1
 802466a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802466e:	2300      	movs	r3, #0
}
 8024670:	4618      	mov	r0, r3
 8024672:	3718      	adds	r7, #24
 8024674:	46bd      	mov	sp, r7
 8024676:	bd80      	pop	{r7, pc}

08024678 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8024678:	b580      	push	{r7, lr}
 802467a:	b082      	sub	sp, #8
 802467c:	af00      	add	r7, sp, #0
 802467e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8024680:	687b      	ldr	r3, [r7, #4]
 8024682:	681b      	ldr	r3, [r3, #0]
 8024684:	691b      	ldr	r3, [r3, #16]
 8024686:	f003 0302 	and.w	r3, r3, #2
 802468a:	2b02      	cmp	r3, #2
 802468c:	d122      	bne.n	80246d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 802468e:	687b      	ldr	r3, [r7, #4]
 8024690:	681b      	ldr	r3, [r3, #0]
 8024692:	68db      	ldr	r3, [r3, #12]
 8024694:	f003 0302 	and.w	r3, r3, #2
 8024698:	2b02      	cmp	r3, #2
 802469a:	d11b      	bne.n	80246d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 802469c:	687b      	ldr	r3, [r7, #4]
 802469e:	681b      	ldr	r3, [r3, #0]
 80246a0:	f06f 0202 	mvn.w	r2, #2
 80246a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80246a6:	687b      	ldr	r3, [r7, #4]
 80246a8:	2201      	movs	r2, #1
 80246aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80246ac:	687b      	ldr	r3, [r7, #4]
 80246ae:	681b      	ldr	r3, [r3, #0]
 80246b0:	699b      	ldr	r3, [r3, #24]
 80246b2:	f003 0303 	and.w	r3, r3, #3
 80246b6:	2b00      	cmp	r3, #0
 80246b8:	d003      	beq.n	80246c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80246ba:	6878      	ldr	r0, [r7, #4]
 80246bc:	f000 fa6b 	bl	8024b96 <HAL_TIM_IC_CaptureCallback>
 80246c0:	e005      	b.n	80246ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80246c2:	6878      	ldr	r0, [r7, #4]
 80246c4:	f000 fa5d 	bl	8024b82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80246c8:	6878      	ldr	r0, [r7, #4]
 80246ca:	f000 fa6e 	bl	8024baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80246ce:	687b      	ldr	r3, [r7, #4]
 80246d0:	2200      	movs	r2, #0
 80246d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80246d4:	687b      	ldr	r3, [r7, #4]
 80246d6:	681b      	ldr	r3, [r3, #0]
 80246d8:	691b      	ldr	r3, [r3, #16]
 80246da:	f003 0304 	and.w	r3, r3, #4
 80246de:	2b04      	cmp	r3, #4
 80246e0:	d122      	bne.n	8024728 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80246e2:	687b      	ldr	r3, [r7, #4]
 80246e4:	681b      	ldr	r3, [r3, #0]
 80246e6:	68db      	ldr	r3, [r3, #12]
 80246e8:	f003 0304 	and.w	r3, r3, #4
 80246ec:	2b04      	cmp	r3, #4
 80246ee:	d11b      	bne.n	8024728 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80246f0:	687b      	ldr	r3, [r7, #4]
 80246f2:	681b      	ldr	r3, [r3, #0]
 80246f4:	f06f 0204 	mvn.w	r2, #4
 80246f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80246fa:	687b      	ldr	r3, [r7, #4]
 80246fc:	2202      	movs	r2, #2
 80246fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8024700:	687b      	ldr	r3, [r7, #4]
 8024702:	681b      	ldr	r3, [r3, #0]
 8024704:	699b      	ldr	r3, [r3, #24]
 8024706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802470a:	2b00      	cmp	r3, #0
 802470c:	d003      	beq.n	8024716 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802470e:	6878      	ldr	r0, [r7, #4]
 8024710:	f000 fa41 	bl	8024b96 <HAL_TIM_IC_CaptureCallback>
 8024714:	e005      	b.n	8024722 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8024716:	6878      	ldr	r0, [r7, #4]
 8024718:	f000 fa33 	bl	8024b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802471c:	6878      	ldr	r0, [r7, #4]
 802471e:	f000 fa44 	bl	8024baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8024722:	687b      	ldr	r3, [r7, #4]
 8024724:	2200      	movs	r2, #0
 8024726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8024728:	687b      	ldr	r3, [r7, #4]
 802472a:	681b      	ldr	r3, [r3, #0]
 802472c:	691b      	ldr	r3, [r3, #16]
 802472e:	f003 0308 	and.w	r3, r3, #8
 8024732:	2b08      	cmp	r3, #8
 8024734:	d122      	bne.n	802477c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8024736:	687b      	ldr	r3, [r7, #4]
 8024738:	681b      	ldr	r3, [r3, #0]
 802473a:	68db      	ldr	r3, [r3, #12]
 802473c:	f003 0308 	and.w	r3, r3, #8
 8024740:	2b08      	cmp	r3, #8
 8024742:	d11b      	bne.n	802477c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8024744:	687b      	ldr	r3, [r7, #4]
 8024746:	681b      	ldr	r3, [r3, #0]
 8024748:	f06f 0208 	mvn.w	r2, #8
 802474c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 802474e:	687b      	ldr	r3, [r7, #4]
 8024750:	2204      	movs	r2, #4
 8024752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8024754:	687b      	ldr	r3, [r7, #4]
 8024756:	681b      	ldr	r3, [r3, #0]
 8024758:	69db      	ldr	r3, [r3, #28]
 802475a:	f003 0303 	and.w	r3, r3, #3
 802475e:	2b00      	cmp	r3, #0
 8024760:	d003      	beq.n	802476a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8024762:	6878      	ldr	r0, [r7, #4]
 8024764:	f000 fa17 	bl	8024b96 <HAL_TIM_IC_CaptureCallback>
 8024768:	e005      	b.n	8024776 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802476a:	6878      	ldr	r0, [r7, #4]
 802476c:	f000 fa09 	bl	8024b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8024770:	6878      	ldr	r0, [r7, #4]
 8024772:	f000 fa1a 	bl	8024baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8024776:	687b      	ldr	r3, [r7, #4]
 8024778:	2200      	movs	r2, #0
 802477a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 802477c:	687b      	ldr	r3, [r7, #4]
 802477e:	681b      	ldr	r3, [r3, #0]
 8024780:	691b      	ldr	r3, [r3, #16]
 8024782:	f003 0310 	and.w	r3, r3, #16
 8024786:	2b10      	cmp	r3, #16
 8024788:	d122      	bne.n	80247d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 802478a:	687b      	ldr	r3, [r7, #4]
 802478c:	681b      	ldr	r3, [r3, #0]
 802478e:	68db      	ldr	r3, [r3, #12]
 8024790:	f003 0310 	and.w	r3, r3, #16
 8024794:	2b10      	cmp	r3, #16
 8024796:	d11b      	bne.n	80247d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8024798:	687b      	ldr	r3, [r7, #4]
 802479a:	681b      	ldr	r3, [r3, #0]
 802479c:	f06f 0210 	mvn.w	r2, #16
 80247a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80247a2:	687b      	ldr	r3, [r7, #4]
 80247a4:	2208      	movs	r2, #8
 80247a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80247a8:	687b      	ldr	r3, [r7, #4]
 80247aa:	681b      	ldr	r3, [r3, #0]
 80247ac:	69db      	ldr	r3, [r3, #28]
 80247ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80247b2:	2b00      	cmp	r3, #0
 80247b4:	d003      	beq.n	80247be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80247b6:	6878      	ldr	r0, [r7, #4]
 80247b8:	f000 f9ed 	bl	8024b96 <HAL_TIM_IC_CaptureCallback>
 80247bc:	e005      	b.n	80247ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80247be:	6878      	ldr	r0, [r7, #4]
 80247c0:	f000 f9df 	bl	8024b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80247c4:	6878      	ldr	r0, [r7, #4]
 80247c6:	f000 f9f0 	bl	8024baa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80247ca:	687b      	ldr	r3, [r7, #4]
 80247cc:	2200      	movs	r2, #0
 80247ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80247d0:	687b      	ldr	r3, [r7, #4]
 80247d2:	681b      	ldr	r3, [r3, #0]
 80247d4:	691b      	ldr	r3, [r3, #16]
 80247d6:	f003 0301 	and.w	r3, r3, #1
 80247da:	2b01      	cmp	r3, #1
 80247dc:	d10e      	bne.n	80247fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80247de:	687b      	ldr	r3, [r7, #4]
 80247e0:	681b      	ldr	r3, [r3, #0]
 80247e2:	68db      	ldr	r3, [r3, #12]
 80247e4:	f003 0301 	and.w	r3, r3, #1
 80247e8:	2b01      	cmp	r3, #1
 80247ea:	d107      	bne.n	80247fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80247ec:	687b      	ldr	r3, [r7, #4]
 80247ee:	681b      	ldr	r3, [r3, #0]
 80247f0:	f06f 0201 	mvn.w	r2, #1
 80247f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80247f6:	6878      	ldr	r0, [r7, #4]
 80247f8:	f7fc f9dc 	bl	8020bb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80247fc:	687b      	ldr	r3, [r7, #4]
 80247fe:	681b      	ldr	r3, [r3, #0]
 8024800:	691b      	ldr	r3, [r3, #16]
 8024802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024806:	2b80      	cmp	r3, #128	; 0x80
 8024808:	d10e      	bne.n	8024828 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 802480a:	687b      	ldr	r3, [r7, #4]
 802480c:	681b      	ldr	r3, [r3, #0]
 802480e:	68db      	ldr	r3, [r3, #12]
 8024810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024814:	2b80      	cmp	r3, #128	; 0x80
 8024816:	d107      	bne.n	8024828 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8024818:	687b      	ldr	r3, [r7, #4]
 802481a:	681b      	ldr	r3, [r3, #0]
 802481c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8024820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8024822:	6878      	ldr	r0, [r7, #4]
 8024824:	f000 fdbe 	bl	80253a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8024828:	687b      	ldr	r3, [r7, #4]
 802482a:	681b      	ldr	r3, [r3, #0]
 802482c:	691b      	ldr	r3, [r3, #16]
 802482e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024832:	2b40      	cmp	r3, #64	; 0x40
 8024834:	d10e      	bne.n	8024854 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8024836:	687b      	ldr	r3, [r7, #4]
 8024838:	681b      	ldr	r3, [r3, #0]
 802483a:	68db      	ldr	r3, [r3, #12]
 802483c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024840:	2b40      	cmp	r3, #64	; 0x40
 8024842:	d107      	bne.n	8024854 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8024844:	687b      	ldr	r3, [r7, #4]
 8024846:	681b      	ldr	r3, [r3, #0]
 8024848:	f06f 0240 	mvn.w	r2, #64	; 0x40
 802484c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 802484e:	6878      	ldr	r0, [r7, #4]
 8024850:	f000 f9b5 	bl	8024bbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8024854:	687b      	ldr	r3, [r7, #4]
 8024856:	681b      	ldr	r3, [r3, #0]
 8024858:	691b      	ldr	r3, [r3, #16]
 802485a:	f003 0320 	and.w	r3, r3, #32
 802485e:	2b20      	cmp	r3, #32
 8024860:	d10e      	bne.n	8024880 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8024862:	687b      	ldr	r3, [r7, #4]
 8024864:	681b      	ldr	r3, [r3, #0]
 8024866:	68db      	ldr	r3, [r3, #12]
 8024868:	f003 0320 	and.w	r3, r3, #32
 802486c:	2b20      	cmp	r3, #32
 802486e:	d107      	bne.n	8024880 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8024870:	687b      	ldr	r3, [r7, #4]
 8024872:	681b      	ldr	r3, [r3, #0]
 8024874:	f06f 0220 	mvn.w	r2, #32
 8024878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 802487a:	6878      	ldr	r0, [r7, #4]
 802487c:	f000 fd88 	bl	8025390 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8024880:	bf00      	nop
 8024882:	3708      	adds	r7, #8
 8024884:	46bd      	mov	sp, r7
 8024886:	bd80      	pop	{r7, pc}

08024888 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8024888:	b580      	push	{r7, lr}
 802488a:	b084      	sub	sp, #16
 802488c:	af00      	add	r7, sp, #0
 802488e:	60f8      	str	r0, [r7, #12]
 8024890:	60b9      	str	r1, [r7, #8]
 8024892:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8024894:	68fb      	ldr	r3, [r7, #12]
 8024896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802489a:	2b01      	cmp	r3, #1
 802489c:	d101      	bne.n	80248a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 802489e:	2302      	movs	r3, #2
 80248a0:	e0b4      	b.n	8024a0c <HAL_TIM_PWM_ConfigChannel+0x184>
 80248a2:	68fb      	ldr	r3, [r7, #12]
 80248a4:	2201      	movs	r2, #1
 80248a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80248aa:	68fb      	ldr	r3, [r7, #12]
 80248ac:	2202      	movs	r2, #2
 80248ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80248b2:	687b      	ldr	r3, [r7, #4]
 80248b4:	2b0c      	cmp	r3, #12
 80248b6:	f200 809f 	bhi.w	80249f8 <HAL_TIM_PWM_ConfigChannel+0x170>
 80248ba:	a201      	add	r2, pc, #4	; (adr r2, 80248c0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80248bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80248c0:	080248f5 	.word	0x080248f5
 80248c4:	080249f9 	.word	0x080249f9
 80248c8:	080249f9 	.word	0x080249f9
 80248cc:	080249f9 	.word	0x080249f9
 80248d0:	08024935 	.word	0x08024935
 80248d4:	080249f9 	.word	0x080249f9
 80248d8:	080249f9 	.word	0x080249f9
 80248dc:	080249f9 	.word	0x080249f9
 80248e0:	08024977 	.word	0x08024977
 80248e4:	080249f9 	.word	0x080249f9
 80248e8:	080249f9 	.word	0x080249f9
 80248ec:	080249f9 	.word	0x080249f9
 80248f0:	080249b7 	.word	0x080249b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80248f4:	68fb      	ldr	r3, [r7, #12]
 80248f6:	681b      	ldr	r3, [r3, #0]
 80248f8:	68b9      	ldr	r1, [r7, #8]
 80248fa:	4618      	mov	r0, r3
 80248fc:	f000 fa0a 	bl	8024d14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8024900:	68fb      	ldr	r3, [r7, #12]
 8024902:	681b      	ldr	r3, [r3, #0]
 8024904:	699a      	ldr	r2, [r3, #24]
 8024906:	68fb      	ldr	r3, [r7, #12]
 8024908:	681b      	ldr	r3, [r3, #0]
 802490a:	f042 0208 	orr.w	r2, r2, #8
 802490e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8024910:	68fb      	ldr	r3, [r7, #12]
 8024912:	681b      	ldr	r3, [r3, #0]
 8024914:	699a      	ldr	r2, [r3, #24]
 8024916:	68fb      	ldr	r3, [r7, #12]
 8024918:	681b      	ldr	r3, [r3, #0]
 802491a:	f022 0204 	bic.w	r2, r2, #4
 802491e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8024920:	68fb      	ldr	r3, [r7, #12]
 8024922:	681b      	ldr	r3, [r3, #0]
 8024924:	6999      	ldr	r1, [r3, #24]
 8024926:	68bb      	ldr	r3, [r7, #8]
 8024928:	691a      	ldr	r2, [r3, #16]
 802492a:	68fb      	ldr	r3, [r7, #12]
 802492c:	681b      	ldr	r3, [r3, #0]
 802492e:	430a      	orrs	r2, r1
 8024930:	619a      	str	r2, [r3, #24]
      break;
 8024932:	e062      	b.n	80249fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8024934:	68fb      	ldr	r3, [r7, #12]
 8024936:	681b      	ldr	r3, [r3, #0]
 8024938:	68b9      	ldr	r1, [r7, #8]
 802493a:	4618      	mov	r0, r3
 802493c:	f000 fa5a 	bl	8024df4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8024940:	68fb      	ldr	r3, [r7, #12]
 8024942:	681b      	ldr	r3, [r3, #0]
 8024944:	699a      	ldr	r2, [r3, #24]
 8024946:	68fb      	ldr	r3, [r7, #12]
 8024948:	681b      	ldr	r3, [r3, #0]
 802494a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802494e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8024950:	68fb      	ldr	r3, [r7, #12]
 8024952:	681b      	ldr	r3, [r3, #0]
 8024954:	699a      	ldr	r2, [r3, #24]
 8024956:	68fb      	ldr	r3, [r7, #12]
 8024958:	681b      	ldr	r3, [r3, #0]
 802495a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802495e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8024960:	68fb      	ldr	r3, [r7, #12]
 8024962:	681b      	ldr	r3, [r3, #0]
 8024964:	6999      	ldr	r1, [r3, #24]
 8024966:	68bb      	ldr	r3, [r7, #8]
 8024968:	691b      	ldr	r3, [r3, #16]
 802496a:	021a      	lsls	r2, r3, #8
 802496c:	68fb      	ldr	r3, [r7, #12]
 802496e:	681b      	ldr	r3, [r3, #0]
 8024970:	430a      	orrs	r2, r1
 8024972:	619a      	str	r2, [r3, #24]
      break;
 8024974:	e041      	b.n	80249fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8024976:	68fb      	ldr	r3, [r7, #12]
 8024978:	681b      	ldr	r3, [r3, #0]
 802497a:	68b9      	ldr	r1, [r7, #8]
 802497c:	4618      	mov	r0, r3
 802497e:	f000 faaf 	bl	8024ee0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8024982:	68fb      	ldr	r3, [r7, #12]
 8024984:	681b      	ldr	r3, [r3, #0]
 8024986:	69da      	ldr	r2, [r3, #28]
 8024988:	68fb      	ldr	r3, [r7, #12]
 802498a:	681b      	ldr	r3, [r3, #0]
 802498c:	f042 0208 	orr.w	r2, r2, #8
 8024990:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8024992:	68fb      	ldr	r3, [r7, #12]
 8024994:	681b      	ldr	r3, [r3, #0]
 8024996:	69da      	ldr	r2, [r3, #28]
 8024998:	68fb      	ldr	r3, [r7, #12]
 802499a:	681b      	ldr	r3, [r3, #0]
 802499c:	f022 0204 	bic.w	r2, r2, #4
 80249a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80249a2:	68fb      	ldr	r3, [r7, #12]
 80249a4:	681b      	ldr	r3, [r3, #0]
 80249a6:	69d9      	ldr	r1, [r3, #28]
 80249a8:	68bb      	ldr	r3, [r7, #8]
 80249aa:	691a      	ldr	r2, [r3, #16]
 80249ac:	68fb      	ldr	r3, [r7, #12]
 80249ae:	681b      	ldr	r3, [r3, #0]
 80249b0:	430a      	orrs	r2, r1
 80249b2:	61da      	str	r2, [r3, #28]
      break;
 80249b4:	e021      	b.n	80249fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80249b6:	68fb      	ldr	r3, [r7, #12]
 80249b8:	681b      	ldr	r3, [r3, #0]
 80249ba:	68b9      	ldr	r1, [r7, #8]
 80249bc:	4618      	mov	r0, r3
 80249be:	f000 fb03 	bl	8024fc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80249c2:	68fb      	ldr	r3, [r7, #12]
 80249c4:	681b      	ldr	r3, [r3, #0]
 80249c6:	69da      	ldr	r2, [r3, #28]
 80249c8:	68fb      	ldr	r3, [r7, #12]
 80249ca:	681b      	ldr	r3, [r3, #0]
 80249cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80249d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80249d2:	68fb      	ldr	r3, [r7, #12]
 80249d4:	681b      	ldr	r3, [r3, #0]
 80249d6:	69da      	ldr	r2, [r3, #28]
 80249d8:	68fb      	ldr	r3, [r7, #12]
 80249da:	681b      	ldr	r3, [r3, #0]
 80249dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80249e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80249e2:	68fb      	ldr	r3, [r7, #12]
 80249e4:	681b      	ldr	r3, [r3, #0]
 80249e6:	69d9      	ldr	r1, [r3, #28]
 80249e8:	68bb      	ldr	r3, [r7, #8]
 80249ea:	691b      	ldr	r3, [r3, #16]
 80249ec:	021a      	lsls	r2, r3, #8
 80249ee:	68fb      	ldr	r3, [r7, #12]
 80249f0:	681b      	ldr	r3, [r3, #0]
 80249f2:	430a      	orrs	r2, r1
 80249f4:	61da      	str	r2, [r3, #28]
      break;
 80249f6:	e000      	b.n	80249fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80249f8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80249fa:	68fb      	ldr	r3, [r7, #12]
 80249fc:	2201      	movs	r2, #1
 80249fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8024a02:	68fb      	ldr	r3, [r7, #12]
 8024a04:	2200      	movs	r2, #0
 8024a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8024a0a:	2300      	movs	r3, #0
}
 8024a0c:	4618      	mov	r0, r3
 8024a0e:	3710      	adds	r7, #16
 8024a10:	46bd      	mov	sp, r7
 8024a12:	bd80      	pop	{r7, pc}

08024a14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8024a14:	b580      	push	{r7, lr}
 8024a16:	b084      	sub	sp, #16
 8024a18:	af00      	add	r7, sp, #0
 8024a1a:	6078      	str	r0, [r7, #4]
 8024a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8024a1e:	687b      	ldr	r3, [r7, #4]
 8024a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8024a24:	2b01      	cmp	r3, #1
 8024a26:	d101      	bne.n	8024a2c <HAL_TIM_ConfigClockSource+0x18>
 8024a28:	2302      	movs	r3, #2
 8024a2a:	e0a6      	b.n	8024b7a <HAL_TIM_ConfigClockSource+0x166>
 8024a2c:	687b      	ldr	r3, [r7, #4]
 8024a2e:	2201      	movs	r2, #1
 8024a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8024a34:	687b      	ldr	r3, [r7, #4]
 8024a36:	2202      	movs	r2, #2
 8024a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8024a3c:	687b      	ldr	r3, [r7, #4]
 8024a3e:	681b      	ldr	r3, [r3, #0]
 8024a40:	689b      	ldr	r3, [r3, #8]
 8024a42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8024a44:	68fb      	ldr	r3, [r7, #12]
 8024a46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8024a4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8024a4c:	68fb      	ldr	r3, [r7, #12]
 8024a4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8024a52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8024a54:	687b      	ldr	r3, [r7, #4]
 8024a56:	681b      	ldr	r3, [r3, #0]
 8024a58:	68fa      	ldr	r2, [r7, #12]
 8024a5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8024a5c:	683b      	ldr	r3, [r7, #0]
 8024a5e:	681b      	ldr	r3, [r3, #0]
 8024a60:	2b40      	cmp	r3, #64	; 0x40
 8024a62:	d067      	beq.n	8024b34 <HAL_TIM_ConfigClockSource+0x120>
 8024a64:	2b40      	cmp	r3, #64	; 0x40
 8024a66:	d80b      	bhi.n	8024a80 <HAL_TIM_ConfigClockSource+0x6c>
 8024a68:	2b10      	cmp	r3, #16
 8024a6a:	d073      	beq.n	8024b54 <HAL_TIM_ConfigClockSource+0x140>
 8024a6c:	2b10      	cmp	r3, #16
 8024a6e:	d802      	bhi.n	8024a76 <HAL_TIM_ConfigClockSource+0x62>
 8024a70:	2b00      	cmp	r3, #0
 8024a72:	d06f      	beq.n	8024b54 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8024a74:	e078      	b.n	8024b68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8024a76:	2b20      	cmp	r3, #32
 8024a78:	d06c      	beq.n	8024b54 <HAL_TIM_ConfigClockSource+0x140>
 8024a7a:	2b30      	cmp	r3, #48	; 0x30
 8024a7c:	d06a      	beq.n	8024b54 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8024a7e:	e073      	b.n	8024b68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8024a80:	2b70      	cmp	r3, #112	; 0x70
 8024a82:	d00d      	beq.n	8024aa0 <HAL_TIM_ConfigClockSource+0x8c>
 8024a84:	2b70      	cmp	r3, #112	; 0x70
 8024a86:	d804      	bhi.n	8024a92 <HAL_TIM_ConfigClockSource+0x7e>
 8024a88:	2b50      	cmp	r3, #80	; 0x50
 8024a8a:	d033      	beq.n	8024af4 <HAL_TIM_ConfigClockSource+0xe0>
 8024a8c:	2b60      	cmp	r3, #96	; 0x60
 8024a8e:	d041      	beq.n	8024b14 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8024a90:	e06a      	b.n	8024b68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8024a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8024a96:	d066      	beq.n	8024b66 <HAL_TIM_ConfigClockSource+0x152>
 8024a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8024a9c:	d017      	beq.n	8024ace <HAL_TIM_ConfigClockSource+0xba>
      break;
 8024a9e:	e063      	b.n	8024b68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8024aa0:	687b      	ldr	r3, [r7, #4]
 8024aa2:	6818      	ldr	r0, [r3, #0]
 8024aa4:	683b      	ldr	r3, [r7, #0]
 8024aa6:	6899      	ldr	r1, [r3, #8]
 8024aa8:	683b      	ldr	r3, [r7, #0]
 8024aaa:	685a      	ldr	r2, [r3, #4]
 8024aac:	683b      	ldr	r3, [r7, #0]
 8024aae:	68db      	ldr	r3, [r3, #12]
 8024ab0:	f000 fb5a 	bl	8025168 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8024ab4:	687b      	ldr	r3, [r7, #4]
 8024ab6:	681b      	ldr	r3, [r3, #0]
 8024ab8:	689b      	ldr	r3, [r3, #8]
 8024aba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8024abc:	68fb      	ldr	r3, [r7, #12]
 8024abe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8024ac2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8024ac4:	687b      	ldr	r3, [r7, #4]
 8024ac6:	681b      	ldr	r3, [r3, #0]
 8024ac8:	68fa      	ldr	r2, [r7, #12]
 8024aca:	609a      	str	r2, [r3, #8]
      break;
 8024acc:	e04c      	b.n	8024b68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8024ace:	687b      	ldr	r3, [r7, #4]
 8024ad0:	6818      	ldr	r0, [r3, #0]
 8024ad2:	683b      	ldr	r3, [r7, #0]
 8024ad4:	6899      	ldr	r1, [r3, #8]
 8024ad6:	683b      	ldr	r3, [r7, #0]
 8024ad8:	685a      	ldr	r2, [r3, #4]
 8024ada:	683b      	ldr	r3, [r7, #0]
 8024adc:	68db      	ldr	r3, [r3, #12]
 8024ade:	f000 fb43 	bl	8025168 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8024ae2:	687b      	ldr	r3, [r7, #4]
 8024ae4:	681b      	ldr	r3, [r3, #0]
 8024ae6:	689a      	ldr	r2, [r3, #8]
 8024ae8:	687b      	ldr	r3, [r7, #4]
 8024aea:	681b      	ldr	r3, [r3, #0]
 8024aec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8024af0:	609a      	str	r2, [r3, #8]
      break;
 8024af2:	e039      	b.n	8024b68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8024af4:	687b      	ldr	r3, [r7, #4]
 8024af6:	6818      	ldr	r0, [r3, #0]
 8024af8:	683b      	ldr	r3, [r7, #0]
 8024afa:	6859      	ldr	r1, [r3, #4]
 8024afc:	683b      	ldr	r3, [r7, #0]
 8024afe:	68db      	ldr	r3, [r3, #12]
 8024b00:	461a      	mov	r2, r3
 8024b02:	f000 fab7 	bl	8025074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8024b06:	687b      	ldr	r3, [r7, #4]
 8024b08:	681b      	ldr	r3, [r3, #0]
 8024b0a:	2150      	movs	r1, #80	; 0x50
 8024b0c:	4618      	mov	r0, r3
 8024b0e:	f000 fb10 	bl	8025132 <TIM_ITRx_SetConfig>
      break;
 8024b12:	e029      	b.n	8024b68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8024b14:	687b      	ldr	r3, [r7, #4]
 8024b16:	6818      	ldr	r0, [r3, #0]
 8024b18:	683b      	ldr	r3, [r7, #0]
 8024b1a:	6859      	ldr	r1, [r3, #4]
 8024b1c:	683b      	ldr	r3, [r7, #0]
 8024b1e:	68db      	ldr	r3, [r3, #12]
 8024b20:	461a      	mov	r2, r3
 8024b22:	f000 fad6 	bl	80250d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8024b26:	687b      	ldr	r3, [r7, #4]
 8024b28:	681b      	ldr	r3, [r3, #0]
 8024b2a:	2160      	movs	r1, #96	; 0x60
 8024b2c:	4618      	mov	r0, r3
 8024b2e:	f000 fb00 	bl	8025132 <TIM_ITRx_SetConfig>
      break;
 8024b32:	e019      	b.n	8024b68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8024b34:	687b      	ldr	r3, [r7, #4]
 8024b36:	6818      	ldr	r0, [r3, #0]
 8024b38:	683b      	ldr	r3, [r7, #0]
 8024b3a:	6859      	ldr	r1, [r3, #4]
 8024b3c:	683b      	ldr	r3, [r7, #0]
 8024b3e:	68db      	ldr	r3, [r3, #12]
 8024b40:	461a      	mov	r2, r3
 8024b42:	f000 fa97 	bl	8025074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8024b46:	687b      	ldr	r3, [r7, #4]
 8024b48:	681b      	ldr	r3, [r3, #0]
 8024b4a:	2140      	movs	r1, #64	; 0x40
 8024b4c:	4618      	mov	r0, r3
 8024b4e:	f000 faf0 	bl	8025132 <TIM_ITRx_SetConfig>
      break;
 8024b52:	e009      	b.n	8024b68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8024b54:	687b      	ldr	r3, [r7, #4]
 8024b56:	681a      	ldr	r2, [r3, #0]
 8024b58:	683b      	ldr	r3, [r7, #0]
 8024b5a:	681b      	ldr	r3, [r3, #0]
 8024b5c:	4619      	mov	r1, r3
 8024b5e:	4610      	mov	r0, r2
 8024b60:	f000 fae7 	bl	8025132 <TIM_ITRx_SetConfig>
      break;
 8024b64:	e000      	b.n	8024b68 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8024b66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8024b68:	687b      	ldr	r3, [r7, #4]
 8024b6a:	2201      	movs	r2, #1
 8024b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8024b70:	687b      	ldr	r3, [r7, #4]
 8024b72:	2200      	movs	r2, #0
 8024b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8024b78:	2300      	movs	r3, #0
}
 8024b7a:	4618      	mov	r0, r3
 8024b7c:	3710      	adds	r7, #16
 8024b7e:	46bd      	mov	sp, r7
 8024b80:	bd80      	pop	{r7, pc}

08024b82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8024b82:	b480      	push	{r7}
 8024b84:	b083      	sub	sp, #12
 8024b86:	af00      	add	r7, sp, #0
 8024b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8024b8a:	bf00      	nop
 8024b8c:	370c      	adds	r7, #12
 8024b8e:	46bd      	mov	sp, r7
 8024b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024b94:	4770      	bx	lr

08024b96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8024b96:	b480      	push	{r7}
 8024b98:	b083      	sub	sp, #12
 8024b9a:	af00      	add	r7, sp, #0
 8024b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8024b9e:	bf00      	nop
 8024ba0:	370c      	adds	r7, #12
 8024ba2:	46bd      	mov	sp, r7
 8024ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ba8:	4770      	bx	lr

08024baa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8024baa:	b480      	push	{r7}
 8024bac:	b083      	sub	sp, #12
 8024bae:	af00      	add	r7, sp, #0
 8024bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8024bb2:	bf00      	nop
 8024bb4:	370c      	adds	r7, #12
 8024bb6:	46bd      	mov	sp, r7
 8024bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024bbc:	4770      	bx	lr

08024bbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8024bbe:	b480      	push	{r7}
 8024bc0:	b083      	sub	sp, #12
 8024bc2:	af00      	add	r7, sp, #0
 8024bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8024bc6:	bf00      	nop
 8024bc8:	370c      	adds	r7, #12
 8024bca:	46bd      	mov	sp, r7
 8024bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024bd0:	4770      	bx	lr
	...

08024bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8024bd4:	b480      	push	{r7}
 8024bd6:	b085      	sub	sp, #20
 8024bd8:	af00      	add	r7, sp, #0
 8024bda:	6078      	str	r0, [r7, #4]
 8024bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8024bde:	687b      	ldr	r3, [r7, #4]
 8024be0:	681b      	ldr	r3, [r3, #0]
 8024be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8024be4:	687b      	ldr	r3, [r7, #4]
 8024be6:	4a40      	ldr	r2, [pc, #256]	; (8024ce8 <TIM_Base_SetConfig+0x114>)
 8024be8:	4293      	cmp	r3, r2
 8024bea:	d013      	beq.n	8024c14 <TIM_Base_SetConfig+0x40>
 8024bec:	687b      	ldr	r3, [r7, #4]
 8024bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8024bf2:	d00f      	beq.n	8024c14 <TIM_Base_SetConfig+0x40>
 8024bf4:	687b      	ldr	r3, [r7, #4]
 8024bf6:	4a3d      	ldr	r2, [pc, #244]	; (8024cec <TIM_Base_SetConfig+0x118>)
 8024bf8:	4293      	cmp	r3, r2
 8024bfa:	d00b      	beq.n	8024c14 <TIM_Base_SetConfig+0x40>
 8024bfc:	687b      	ldr	r3, [r7, #4]
 8024bfe:	4a3c      	ldr	r2, [pc, #240]	; (8024cf0 <TIM_Base_SetConfig+0x11c>)
 8024c00:	4293      	cmp	r3, r2
 8024c02:	d007      	beq.n	8024c14 <TIM_Base_SetConfig+0x40>
 8024c04:	687b      	ldr	r3, [r7, #4]
 8024c06:	4a3b      	ldr	r2, [pc, #236]	; (8024cf4 <TIM_Base_SetConfig+0x120>)
 8024c08:	4293      	cmp	r3, r2
 8024c0a:	d003      	beq.n	8024c14 <TIM_Base_SetConfig+0x40>
 8024c0c:	687b      	ldr	r3, [r7, #4]
 8024c0e:	4a3a      	ldr	r2, [pc, #232]	; (8024cf8 <TIM_Base_SetConfig+0x124>)
 8024c10:	4293      	cmp	r3, r2
 8024c12:	d108      	bne.n	8024c26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8024c14:	68fb      	ldr	r3, [r7, #12]
 8024c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8024c1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8024c1c:	683b      	ldr	r3, [r7, #0]
 8024c1e:	685b      	ldr	r3, [r3, #4]
 8024c20:	68fa      	ldr	r2, [r7, #12]
 8024c22:	4313      	orrs	r3, r2
 8024c24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8024c26:	687b      	ldr	r3, [r7, #4]
 8024c28:	4a2f      	ldr	r2, [pc, #188]	; (8024ce8 <TIM_Base_SetConfig+0x114>)
 8024c2a:	4293      	cmp	r3, r2
 8024c2c:	d02b      	beq.n	8024c86 <TIM_Base_SetConfig+0xb2>
 8024c2e:	687b      	ldr	r3, [r7, #4]
 8024c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8024c34:	d027      	beq.n	8024c86 <TIM_Base_SetConfig+0xb2>
 8024c36:	687b      	ldr	r3, [r7, #4]
 8024c38:	4a2c      	ldr	r2, [pc, #176]	; (8024cec <TIM_Base_SetConfig+0x118>)
 8024c3a:	4293      	cmp	r3, r2
 8024c3c:	d023      	beq.n	8024c86 <TIM_Base_SetConfig+0xb2>
 8024c3e:	687b      	ldr	r3, [r7, #4]
 8024c40:	4a2b      	ldr	r2, [pc, #172]	; (8024cf0 <TIM_Base_SetConfig+0x11c>)
 8024c42:	4293      	cmp	r3, r2
 8024c44:	d01f      	beq.n	8024c86 <TIM_Base_SetConfig+0xb2>
 8024c46:	687b      	ldr	r3, [r7, #4]
 8024c48:	4a2a      	ldr	r2, [pc, #168]	; (8024cf4 <TIM_Base_SetConfig+0x120>)
 8024c4a:	4293      	cmp	r3, r2
 8024c4c:	d01b      	beq.n	8024c86 <TIM_Base_SetConfig+0xb2>
 8024c4e:	687b      	ldr	r3, [r7, #4]
 8024c50:	4a29      	ldr	r2, [pc, #164]	; (8024cf8 <TIM_Base_SetConfig+0x124>)
 8024c52:	4293      	cmp	r3, r2
 8024c54:	d017      	beq.n	8024c86 <TIM_Base_SetConfig+0xb2>
 8024c56:	687b      	ldr	r3, [r7, #4]
 8024c58:	4a28      	ldr	r2, [pc, #160]	; (8024cfc <TIM_Base_SetConfig+0x128>)
 8024c5a:	4293      	cmp	r3, r2
 8024c5c:	d013      	beq.n	8024c86 <TIM_Base_SetConfig+0xb2>
 8024c5e:	687b      	ldr	r3, [r7, #4]
 8024c60:	4a27      	ldr	r2, [pc, #156]	; (8024d00 <TIM_Base_SetConfig+0x12c>)
 8024c62:	4293      	cmp	r3, r2
 8024c64:	d00f      	beq.n	8024c86 <TIM_Base_SetConfig+0xb2>
 8024c66:	687b      	ldr	r3, [r7, #4]
 8024c68:	4a26      	ldr	r2, [pc, #152]	; (8024d04 <TIM_Base_SetConfig+0x130>)
 8024c6a:	4293      	cmp	r3, r2
 8024c6c:	d00b      	beq.n	8024c86 <TIM_Base_SetConfig+0xb2>
 8024c6e:	687b      	ldr	r3, [r7, #4]
 8024c70:	4a25      	ldr	r2, [pc, #148]	; (8024d08 <TIM_Base_SetConfig+0x134>)
 8024c72:	4293      	cmp	r3, r2
 8024c74:	d007      	beq.n	8024c86 <TIM_Base_SetConfig+0xb2>
 8024c76:	687b      	ldr	r3, [r7, #4]
 8024c78:	4a24      	ldr	r2, [pc, #144]	; (8024d0c <TIM_Base_SetConfig+0x138>)
 8024c7a:	4293      	cmp	r3, r2
 8024c7c:	d003      	beq.n	8024c86 <TIM_Base_SetConfig+0xb2>
 8024c7e:	687b      	ldr	r3, [r7, #4]
 8024c80:	4a23      	ldr	r2, [pc, #140]	; (8024d10 <TIM_Base_SetConfig+0x13c>)
 8024c82:	4293      	cmp	r3, r2
 8024c84:	d108      	bne.n	8024c98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8024c86:	68fb      	ldr	r3, [r7, #12]
 8024c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8024c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8024c8e:	683b      	ldr	r3, [r7, #0]
 8024c90:	68db      	ldr	r3, [r3, #12]
 8024c92:	68fa      	ldr	r2, [r7, #12]
 8024c94:	4313      	orrs	r3, r2
 8024c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8024c98:	68fb      	ldr	r3, [r7, #12]
 8024c9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8024c9e:	683b      	ldr	r3, [r7, #0]
 8024ca0:	695b      	ldr	r3, [r3, #20]
 8024ca2:	4313      	orrs	r3, r2
 8024ca4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8024ca6:	687b      	ldr	r3, [r7, #4]
 8024ca8:	68fa      	ldr	r2, [r7, #12]
 8024caa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8024cac:	683b      	ldr	r3, [r7, #0]
 8024cae:	689a      	ldr	r2, [r3, #8]
 8024cb0:	687b      	ldr	r3, [r7, #4]
 8024cb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8024cb4:	683b      	ldr	r3, [r7, #0]
 8024cb6:	681a      	ldr	r2, [r3, #0]
 8024cb8:	687b      	ldr	r3, [r7, #4]
 8024cba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8024cbc:	687b      	ldr	r3, [r7, #4]
 8024cbe:	4a0a      	ldr	r2, [pc, #40]	; (8024ce8 <TIM_Base_SetConfig+0x114>)
 8024cc0:	4293      	cmp	r3, r2
 8024cc2:	d003      	beq.n	8024ccc <TIM_Base_SetConfig+0xf8>
 8024cc4:	687b      	ldr	r3, [r7, #4]
 8024cc6:	4a0c      	ldr	r2, [pc, #48]	; (8024cf8 <TIM_Base_SetConfig+0x124>)
 8024cc8:	4293      	cmp	r3, r2
 8024cca:	d103      	bne.n	8024cd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8024ccc:	683b      	ldr	r3, [r7, #0]
 8024cce:	691a      	ldr	r2, [r3, #16]
 8024cd0:	687b      	ldr	r3, [r7, #4]
 8024cd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8024cd4:	687b      	ldr	r3, [r7, #4]
 8024cd6:	2201      	movs	r2, #1
 8024cd8:	615a      	str	r2, [r3, #20]
}
 8024cda:	bf00      	nop
 8024cdc:	3714      	adds	r7, #20
 8024cde:	46bd      	mov	sp, r7
 8024ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ce4:	4770      	bx	lr
 8024ce6:	bf00      	nop
 8024ce8:	40010000 	.word	0x40010000
 8024cec:	40000400 	.word	0x40000400
 8024cf0:	40000800 	.word	0x40000800
 8024cf4:	40000c00 	.word	0x40000c00
 8024cf8:	40010400 	.word	0x40010400
 8024cfc:	40014000 	.word	0x40014000
 8024d00:	40014400 	.word	0x40014400
 8024d04:	40014800 	.word	0x40014800
 8024d08:	40001800 	.word	0x40001800
 8024d0c:	40001c00 	.word	0x40001c00
 8024d10:	40002000 	.word	0x40002000

08024d14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8024d14:	b480      	push	{r7}
 8024d16:	b087      	sub	sp, #28
 8024d18:	af00      	add	r7, sp, #0
 8024d1a:	6078      	str	r0, [r7, #4]
 8024d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8024d1e:	687b      	ldr	r3, [r7, #4]
 8024d20:	6a1b      	ldr	r3, [r3, #32]
 8024d22:	f023 0201 	bic.w	r2, r3, #1
 8024d26:	687b      	ldr	r3, [r7, #4]
 8024d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8024d2a:	687b      	ldr	r3, [r7, #4]
 8024d2c:	6a1b      	ldr	r3, [r3, #32]
 8024d2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8024d30:	687b      	ldr	r3, [r7, #4]
 8024d32:	685b      	ldr	r3, [r3, #4]
 8024d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8024d36:	687b      	ldr	r3, [r7, #4]
 8024d38:	699b      	ldr	r3, [r3, #24]
 8024d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8024d3c:	68fb      	ldr	r3, [r7, #12]
 8024d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8024d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8024d44:	68fb      	ldr	r3, [r7, #12]
 8024d46:	f023 0303 	bic.w	r3, r3, #3
 8024d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8024d4c:	683b      	ldr	r3, [r7, #0]
 8024d4e:	681b      	ldr	r3, [r3, #0]
 8024d50:	68fa      	ldr	r2, [r7, #12]
 8024d52:	4313      	orrs	r3, r2
 8024d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8024d56:	697b      	ldr	r3, [r7, #20]
 8024d58:	f023 0302 	bic.w	r3, r3, #2
 8024d5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8024d5e:	683b      	ldr	r3, [r7, #0]
 8024d60:	689b      	ldr	r3, [r3, #8]
 8024d62:	697a      	ldr	r2, [r7, #20]
 8024d64:	4313      	orrs	r3, r2
 8024d66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8024d68:	687b      	ldr	r3, [r7, #4]
 8024d6a:	4a20      	ldr	r2, [pc, #128]	; (8024dec <TIM_OC1_SetConfig+0xd8>)
 8024d6c:	4293      	cmp	r3, r2
 8024d6e:	d003      	beq.n	8024d78 <TIM_OC1_SetConfig+0x64>
 8024d70:	687b      	ldr	r3, [r7, #4]
 8024d72:	4a1f      	ldr	r2, [pc, #124]	; (8024df0 <TIM_OC1_SetConfig+0xdc>)
 8024d74:	4293      	cmp	r3, r2
 8024d76:	d10c      	bne.n	8024d92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8024d78:	697b      	ldr	r3, [r7, #20]
 8024d7a:	f023 0308 	bic.w	r3, r3, #8
 8024d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8024d80:	683b      	ldr	r3, [r7, #0]
 8024d82:	68db      	ldr	r3, [r3, #12]
 8024d84:	697a      	ldr	r2, [r7, #20]
 8024d86:	4313      	orrs	r3, r2
 8024d88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8024d8a:	697b      	ldr	r3, [r7, #20]
 8024d8c:	f023 0304 	bic.w	r3, r3, #4
 8024d90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8024d92:	687b      	ldr	r3, [r7, #4]
 8024d94:	4a15      	ldr	r2, [pc, #84]	; (8024dec <TIM_OC1_SetConfig+0xd8>)
 8024d96:	4293      	cmp	r3, r2
 8024d98:	d003      	beq.n	8024da2 <TIM_OC1_SetConfig+0x8e>
 8024d9a:	687b      	ldr	r3, [r7, #4]
 8024d9c:	4a14      	ldr	r2, [pc, #80]	; (8024df0 <TIM_OC1_SetConfig+0xdc>)
 8024d9e:	4293      	cmp	r3, r2
 8024da0:	d111      	bne.n	8024dc6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8024da2:	693b      	ldr	r3, [r7, #16]
 8024da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8024da8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8024daa:	693b      	ldr	r3, [r7, #16]
 8024dac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8024db0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8024db2:	683b      	ldr	r3, [r7, #0]
 8024db4:	695b      	ldr	r3, [r3, #20]
 8024db6:	693a      	ldr	r2, [r7, #16]
 8024db8:	4313      	orrs	r3, r2
 8024dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8024dbc:	683b      	ldr	r3, [r7, #0]
 8024dbe:	699b      	ldr	r3, [r3, #24]
 8024dc0:	693a      	ldr	r2, [r7, #16]
 8024dc2:	4313      	orrs	r3, r2
 8024dc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8024dc6:	687b      	ldr	r3, [r7, #4]
 8024dc8:	693a      	ldr	r2, [r7, #16]
 8024dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8024dcc:	687b      	ldr	r3, [r7, #4]
 8024dce:	68fa      	ldr	r2, [r7, #12]
 8024dd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8024dd2:	683b      	ldr	r3, [r7, #0]
 8024dd4:	685a      	ldr	r2, [r3, #4]
 8024dd6:	687b      	ldr	r3, [r7, #4]
 8024dd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8024dda:	687b      	ldr	r3, [r7, #4]
 8024ddc:	697a      	ldr	r2, [r7, #20]
 8024dde:	621a      	str	r2, [r3, #32]
}
 8024de0:	bf00      	nop
 8024de2:	371c      	adds	r7, #28
 8024de4:	46bd      	mov	sp, r7
 8024de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024dea:	4770      	bx	lr
 8024dec:	40010000 	.word	0x40010000
 8024df0:	40010400 	.word	0x40010400

08024df4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8024df4:	b480      	push	{r7}
 8024df6:	b087      	sub	sp, #28
 8024df8:	af00      	add	r7, sp, #0
 8024dfa:	6078      	str	r0, [r7, #4]
 8024dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8024dfe:	687b      	ldr	r3, [r7, #4]
 8024e00:	6a1b      	ldr	r3, [r3, #32]
 8024e02:	f023 0210 	bic.w	r2, r3, #16
 8024e06:	687b      	ldr	r3, [r7, #4]
 8024e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8024e0a:	687b      	ldr	r3, [r7, #4]
 8024e0c:	6a1b      	ldr	r3, [r3, #32]
 8024e0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8024e10:	687b      	ldr	r3, [r7, #4]
 8024e12:	685b      	ldr	r3, [r3, #4]
 8024e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8024e16:	687b      	ldr	r3, [r7, #4]
 8024e18:	699b      	ldr	r3, [r3, #24]
 8024e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8024e1c:	68fb      	ldr	r3, [r7, #12]
 8024e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8024e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8024e24:	68fb      	ldr	r3, [r7, #12]
 8024e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8024e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8024e2c:	683b      	ldr	r3, [r7, #0]
 8024e2e:	681b      	ldr	r3, [r3, #0]
 8024e30:	021b      	lsls	r3, r3, #8
 8024e32:	68fa      	ldr	r2, [r7, #12]
 8024e34:	4313      	orrs	r3, r2
 8024e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8024e38:	697b      	ldr	r3, [r7, #20]
 8024e3a:	f023 0320 	bic.w	r3, r3, #32
 8024e3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8024e40:	683b      	ldr	r3, [r7, #0]
 8024e42:	689b      	ldr	r3, [r3, #8]
 8024e44:	011b      	lsls	r3, r3, #4
 8024e46:	697a      	ldr	r2, [r7, #20]
 8024e48:	4313      	orrs	r3, r2
 8024e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8024e4c:	687b      	ldr	r3, [r7, #4]
 8024e4e:	4a22      	ldr	r2, [pc, #136]	; (8024ed8 <TIM_OC2_SetConfig+0xe4>)
 8024e50:	4293      	cmp	r3, r2
 8024e52:	d003      	beq.n	8024e5c <TIM_OC2_SetConfig+0x68>
 8024e54:	687b      	ldr	r3, [r7, #4]
 8024e56:	4a21      	ldr	r2, [pc, #132]	; (8024edc <TIM_OC2_SetConfig+0xe8>)
 8024e58:	4293      	cmp	r3, r2
 8024e5a:	d10d      	bne.n	8024e78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8024e5c:	697b      	ldr	r3, [r7, #20]
 8024e5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8024e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8024e64:	683b      	ldr	r3, [r7, #0]
 8024e66:	68db      	ldr	r3, [r3, #12]
 8024e68:	011b      	lsls	r3, r3, #4
 8024e6a:	697a      	ldr	r2, [r7, #20]
 8024e6c:	4313      	orrs	r3, r2
 8024e6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8024e70:	697b      	ldr	r3, [r7, #20]
 8024e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8024e76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8024e78:	687b      	ldr	r3, [r7, #4]
 8024e7a:	4a17      	ldr	r2, [pc, #92]	; (8024ed8 <TIM_OC2_SetConfig+0xe4>)
 8024e7c:	4293      	cmp	r3, r2
 8024e7e:	d003      	beq.n	8024e88 <TIM_OC2_SetConfig+0x94>
 8024e80:	687b      	ldr	r3, [r7, #4]
 8024e82:	4a16      	ldr	r2, [pc, #88]	; (8024edc <TIM_OC2_SetConfig+0xe8>)
 8024e84:	4293      	cmp	r3, r2
 8024e86:	d113      	bne.n	8024eb0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8024e88:	693b      	ldr	r3, [r7, #16]
 8024e8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8024e8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8024e90:	693b      	ldr	r3, [r7, #16]
 8024e92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8024e96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8024e98:	683b      	ldr	r3, [r7, #0]
 8024e9a:	695b      	ldr	r3, [r3, #20]
 8024e9c:	009b      	lsls	r3, r3, #2
 8024e9e:	693a      	ldr	r2, [r7, #16]
 8024ea0:	4313      	orrs	r3, r2
 8024ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8024ea4:	683b      	ldr	r3, [r7, #0]
 8024ea6:	699b      	ldr	r3, [r3, #24]
 8024ea8:	009b      	lsls	r3, r3, #2
 8024eaa:	693a      	ldr	r2, [r7, #16]
 8024eac:	4313      	orrs	r3, r2
 8024eae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8024eb0:	687b      	ldr	r3, [r7, #4]
 8024eb2:	693a      	ldr	r2, [r7, #16]
 8024eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8024eb6:	687b      	ldr	r3, [r7, #4]
 8024eb8:	68fa      	ldr	r2, [r7, #12]
 8024eba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8024ebc:	683b      	ldr	r3, [r7, #0]
 8024ebe:	685a      	ldr	r2, [r3, #4]
 8024ec0:	687b      	ldr	r3, [r7, #4]
 8024ec2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8024ec4:	687b      	ldr	r3, [r7, #4]
 8024ec6:	697a      	ldr	r2, [r7, #20]
 8024ec8:	621a      	str	r2, [r3, #32]
}
 8024eca:	bf00      	nop
 8024ecc:	371c      	adds	r7, #28
 8024ece:	46bd      	mov	sp, r7
 8024ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ed4:	4770      	bx	lr
 8024ed6:	bf00      	nop
 8024ed8:	40010000 	.word	0x40010000
 8024edc:	40010400 	.word	0x40010400

08024ee0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8024ee0:	b480      	push	{r7}
 8024ee2:	b087      	sub	sp, #28
 8024ee4:	af00      	add	r7, sp, #0
 8024ee6:	6078      	str	r0, [r7, #4]
 8024ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8024eea:	687b      	ldr	r3, [r7, #4]
 8024eec:	6a1b      	ldr	r3, [r3, #32]
 8024eee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8024ef2:	687b      	ldr	r3, [r7, #4]
 8024ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8024ef6:	687b      	ldr	r3, [r7, #4]
 8024ef8:	6a1b      	ldr	r3, [r3, #32]
 8024efa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8024efc:	687b      	ldr	r3, [r7, #4]
 8024efe:	685b      	ldr	r3, [r3, #4]
 8024f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8024f02:	687b      	ldr	r3, [r7, #4]
 8024f04:	69db      	ldr	r3, [r3, #28]
 8024f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8024f08:	68fb      	ldr	r3, [r7, #12]
 8024f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8024f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8024f10:	68fb      	ldr	r3, [r7, #12]
 8024f12:	f023 0303 	bic.w	r3, r3, #3
 8024f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8024f18:	683b      	ldr	r3, [r7, #0]
 8024f1a:	681b      	ldr	r3, [r3, #0]
 8024f1c:	68fa      	ldr	r2, [r7, #12]
 8024f1e:	4313      	orrs	r3, r2
 8024f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8024f22:	697b      	ldr	r3, [r7, #20]
 8024f24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8024f28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8024f2a:	683b      	ldr	r3, [r7, #0]
 8024f2c:	689b      	ldr	r3, [r3, #8]
 8024f2e:	021b      	lsls	r3, r3, #8
 8024f30:	697a      	ldr	r2, [r7, #20]
 8024f32:	4313      	orrs	r3, r2
 8024f34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8024f36:	687b      	ldr	r3, [r7, #4]
 8024f38:	4a21      	ldr	r2, [pc, #132]	; (8024fc0 <TIM_OC3_SetConfig+0xe0>)
 8024f3a:	4293      	cmp	r3, r2
 8024f3c:	d003      	beq.n	8024f46 <TIM_OC3_SetConfig+0x66>
 8024f3e:	687b      	ldr	r3, [r7, #4]
 8024f40:	4a20      	ldr	r2, [pc, #128]	; (8024fc4 <TIM_OC3_SetConfig+0xe4>)
 8024f42:	4293      	cmp	r3, r2
 8024f44:	d10d      	bne.n	8024f62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8024f46:	697b      	ldr	r3, [r7, #20]
 8024f48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8024f4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8024f4e:	683b      	ldr	r3, [r7, #0]
 8024f50:	68db      	ldr	r3, [r3, #12]
 8024f52:	021b      	lsls	r3, r3, #8
 8024f54:	697a      	ldr	r2, [r7, #20]
 8024f56:	4313      	orrs	r3, r2
 8024f58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8024f5a:	697b      	ldr	r3, [r7, #20]
 8024f5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8024f60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8024f62:	687b      	ldr	r3, [r7, #4]
 8024f64:	4a16      	ldr	r2, [pc, #88]	; (8024fc0 <TIM_OC3_SetConfig+0xe0>)
 8024f66:	4293      	cmp	r3, r2
 8024f68:	d003      	beq.n	8024f72 <TIM_OC3_SetConfig+0x92>
 8024f6a:	687b      	ldr	r3, [r7, #4]
 8024f6c:	4a15      	ldr	r2, [pc, #84]	; (8024fc4 <TIM_OC3_SetConfig+0xe4>)
 8024f6e:	4293      	cmp	r3, r2
 8024f70:	d113      	bne.n	8024f9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8024f72:	693b      	ldr	r3, [r7, #16]
 8024f74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024f78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8024f7a:	693b      	ldr	r3, [r7, #16]
 8024f7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8024f80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8024f82:	683b      	ldr	r3, [r7, #0]
 8024f84:	695b      	ldr	r3, [r3, #20]
 8024f86:	011b      	lsls	r3, r3, #4
 8024f88:	693a      	ldr	r2, [r7, #16]
 8024f8a:	4313      	orrs	r3, r2
 8024f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8024f8e:	683b      	ldr	r3, [r7, #0]
 8024f90:	699b      	ldr	r3, [r3, #24]
 8024f92:	011b      	lsls	r3, r3, #4
 8024f94:	693a      	ldr	r2, [r7, #16]
 8024f96:	4313      	orrs	r3, r2
 8024f98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8024f9a:	687b      	ldr	r3, [r7, #4]
 8024f9c:	693a      	ldr	r2, [r7, #16]
 8024f9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8024fa0:	687b      	ldr	r3, [r7, #4]
 8024fa2:	68fa      	ldr	r2, [r7, #12]
 8024fa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8024fa6:	683b      	ldr	r3, [r7, #0]
 8024fa8:	685a      	ldr	r2, [r3, #4]
 8024faa:	687b      	ldr	r3, [r7, #4]
 8024fac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8024fae:	687b      	ldr	r3, [r7, #4]
 8024fb0:	697a      	ldr	r2, [r7, #20]
 8024fb2:	621a      	str	r2, [r3, #32]
}
 8024fb4:	bf00      	nop
 8024fb6:	371c      	adds	r7, #28
 8024fb8:	46bd      	mov	sp, r7
 8024fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024fbe:	4770      	bx	lr
 8024fc0:	40010000 	.word	0x40010000
 8024fc4:	40010400 	.word	0x40010400

08024fc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8024fc8:	b480      	push	{r7}
 8024fca:	b087      	sub	sp, #28
 8024fcc:	af00      	add	r7, sp, #0
 8024fce:	6078      	str	r0, [r7, #4]
 8024fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8024fd2:	687b      	ldr	r3, [r7, #4]
 8024fd4:	6a1b      	ldr	r3, [r3, #32]
 8024fd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8024fda:	687b      	ldr	r3, [r7, #4]
 8024fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8024fde:	687b      	ldr	r3, [r7, #4]
 8024fe0:	6a1b      	ldr	r3, [r3, #32]
 8024fe2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8024fe4:	687b      	ldr	r3, [r7, #4]
 8024fe6:	685b      	ldr	r3, [r3, #4]
 8024fe8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8024fea:	687b      	ldr	r3, [r7, #4]
 8024fec:	69db      	ldr	r3, [r3, #28]
 8024fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8024ff0:	68fb      	ldr	r3, [r7, #12]
 8024ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8024ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8024ff8:	68fb      	ldr	r3, [r7, #12]
 8024ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8024ffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8025000:	683b      	ldr	r3, [r7, #0]
 8025002:	681b      	ldr	r3, [r3, #0]
 8025004:	021b      	lsls	r3, r3, #8
 8025006:	68fa      	ldr	r2, [r7, #12]
 8025008:	4313      	orrs	r3, r2
 802500a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 802500c:	693b      	ldr	r3, [r7, #16]
 802500e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8025012:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8025014:	683b      	ldr	r3, [r7, #0]
 8025016:	689b      	ldr	r3, [r3, #8]
 8025018:	031b      	lsls	r3, r3, #12
 802501a:	693a      	ldr	r2, [r7, #16]
 802501c:	4313      	orrs	r3, r2
 802501e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8025020:	687b      	ldr	r3, [r7, #4]
 8025022:	4a12      	ldr	r2, [pc, #72]	; (802506c <TIM_OC4_SetConfig+0xa4>)
 8025024:	4293      	cmp	r3, r2
 8025026:	d003      	beq.n	8025030 <TIM_OC4_SetConfig+0x68>
 8025028:	687b      	ldr	r3, [r7, #4]
 802502a:	4a11      	ldr	r2, [pc, #68]	; (8025070 <TIM_OC4_SetConfig+0xa8>)
 802502c:	4293      	cmp	r3, r2
 802502e:	d109      	bne.n	8025044 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8025030:	697b      	ldr	r3, [r7, #20]
 8025032:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8025036:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8025038:	683b      	ldr	r3, [r7, #0]
 802503a:	695b      	ldr	r3, [r3, #20]
 802503c:	019b      	lsls	r3, r3, #6
 802503e:	697a      	ldr	r2, [r7, #20]
 8025040:	4313      	orrs	r3, r2
 8025042:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8025044:	687b      	ldr	r3, [r7, #4]
 8025046:	697a      	ldr	r2, [r7, #20]
 8025048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802504a:	687b      	ldr	r3, [r7, #4]
 802504c:	68fa      	ldr	r2, [r7, #12]
 802504e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8025050:	683b      	ldr	r3, [r7, #0]
 8025052:	685a      	ldr	r2, [r3, #4]
 8025054:	687b      	ldr	r3, [r7, #4]
 8025056:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8025058:	687b      	ldr	r3, [r7, #4]
 802505a:	693a      	ldr	r2, [r7, #16]
 802505c:	621a      	str	r2, [r3, #32]
}
 802505e:	bf00      	nop
 8025060:	371c      	adds	r7, #28
 8025062:	46bd      	mov	sp, r7
 8025064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025068:	4770      	bx	lr
 802506a:	bf00      	nop
 802506c:	40010000 	.word	0x40010000
 8025070:	40010400 	.word	0x40010400

08025074 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8025074:	b480      	push	{r7}
 8025076:	b087      	sub	sp, #28
 8025078:	af00      	add	r7, sp, #0
 802507a:	60f8      	str	r0, [r7, #12]
 802507c:	60b9      	str	r1, [r7, #8]
 802507e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8025080:	68fb      	ldr	r3, [r7, #12]
 8025082:	6a1b      	ldr	r3, [r3, #32]
 8025084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8025086:	68fb      	ldr	r3, [r7, #12]
 8025088:	6a1b      	ldr	r3, [r3, #32]
 802508a:	f023 0201 	bic.w	r2, r3, #1
 802508e:	68fb      	ldr	r3, [r7, #12]
 8025090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8025092:	68fb      	ldr	r3, [r7, #12]
 8025094:	699b      	ldr	r3, [r3, #24]
 8025096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8025098:	693b      	ldr	r3, [r7, #16]
 802509a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802509e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80250a0:	687b      	ldr	r3, [r7, #4]
 80250a2:	011b      	lsls	r3, r3, #4
 80250a4:	693a      	ldr	r2, [r7, #16]
 80250a6:	4313      	orrs	r3, r2
 80250a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80250aa:	697b      	ldr	r3, [r7, #20]
 80250ac:	f023 030a 	bic.w	r3, r3, #10
 80250b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80250b2:	697a      	ldr	r2, [r7, #20]
 80250b4:	68bb      	ldr	r3, [r7, #8]
 80250b6:	4313      	orrs	r3, r2
 80250b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80250ba:	68fb      	ldr	r3, [r7, #12]
 80250bc:	693a      	ldr	r2, [r7, #16]
 80250be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80250c0:	68fb      	ldr	r3, [r7, #12]
 80250c2:	697a      	ldr	r2, [r7, #20]
 80250c4:	621a      	str	r2, [r3, #32]
}
 80250c6:	bf00      	nop
 80250c8:	371c      	adds	r7, #28
 80250ca:	46bd      	mov	sp, r7
 80250cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250d0:	4770      	bx	lr

080250d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80250d2:	b480      	push	{r7}
 80250d4:	b087      	sub	sp, #28
 80250d6:	af00      	add	r7, sp, #0
 80250d8:	60f8      	str	r0, [r7, #12]
 80250da:	60b9      	str	r1, [r7, #8]
 80250dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80250de:	68fb      	ldr	r3, [r7, #12]
 80250e0:	6a1b      	ldr	r3, [r3, #32]
 80250e2:	f023 0210 	bic.w	r2, r3, #16
 80250e6:	68fb      	ldr	r3, [r7, #12]
 80250e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80250ea:	68fb      	ldr	r3, [r7, #12]
 80250ec:	699b      	ldr	r3, [r3, #24]
 80250ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80250f0:	68fb      	ldr	r3, [r7, #12]
 80250f2:	6a1b      	ldr	r3, [r3, #32]
 80250f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80250f6:	697b      	ldr	r3, [r7, #20]
 80250f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80250fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80250fe:	687b      	ldr	r3, [r7, #4]
 8025100:	031b      	lsls	r3, r3, #12
 8025102:	697a      	ldr	r2, [r7, #20]
 8025104:	4313      	orrs	r3, r2
 8025106:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8025108:	693b      	ldr	r3, [r7, #16]
 802510a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 802510e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8025110:	68bb      	ldr	r3, [r7, #8]
 8025112:	011b      	lsls	r3, r3, #4
 8025114:	693a      	ldr	r2, [r7, #16]
 8025116:	4313      	orrs	r3, r2
 8025118:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 802511a:	68fb      	ldr	r3, [r7, #12]
 802511c:	697a      	ldr	r2, [r7, #20]
 802511e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8025120:	68fb      	ldr	r3, [r7, #12]
 8025122:	693a      	ldr	r2, [r7, #16]
 8025124:	621a      	str	r2, [r3, #32]
}
 8025126:	bf00      	nop
 8025128:	371c      	adds	r7, #28
 802512a:	46bd      	mov	sp, r7
 802512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025130:	4770      	bx	lr

08025132 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8025132:	b480      	push	{r7}
 8025134:	b085      	sub	sp, #20
 8025136:	af00      	add	r7, sp, #0
 8025138:	6078      	str	r0, [r7, #4]
 802513a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 802513c:	687b      	ldr	r3, [r7, #4]
 802513e:	689b      	ldr	r3, [r3, #8]
 8025140:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8025142:	68fb      	ldr	r3, [r7, #12]
 8025144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8025148:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 802514a:	683a      	ldr	r2, [r7, #0]
 802514c:	68fb      	ldr	r3, [r7, #12]
 802514e:	4313      	orrs	r3, r2
 8025150:	f043 0307 	orr.w	r3, r3, #7
 8025154:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8025156:	687b      	ldr	r3, [r7, #4]
 8025158:	68fa      	ldr	r2, [r7, #12]
 802515a:	609a      	str	r2, [r3, #8]
}
 802515c:	bf00      	nop
 802515e:	3714      	adds	r7, #20
 8025160:	46bd      	mov	sp, r7
 8025162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025166:	4770      	bx	lr

08025168 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8025168:	b480      	push	{r7}
 802516a:	b087      	sub	sp, #28
 802516c:	af00      	add	r7, sp, #0
 802516e:	60f8      	str	r0, [r7, #12]
 8025170:	60b9      	str	r1, [r7, #8]
 8025172:	607a      	str	r2, [r7, #4]
 8025174:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8025176:	68fb      	ldr	r3, [r7, #12]
 8025178:	689b      	ldr	r3, [r3, #8]
 802517a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802517c:	697b      	ldr	r3, [r7, #20]
 802517e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8025182:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8025184:	683b      	ldr	r3, [r7, #0]
 8025186:	021a      	lsls	r2, r3, #8
 8025188:	687b      	ldr	r3, [r7, #4]
 802518a:	431a      	orrs	r2, r3
 802518c:	68bb      	ldr	r3, [r7, #8]
 802518e:	4313      	orrs	r3, r2
 8025190:	697a      	ldr	r2, [r7, #20]
 8025192:	4313      	orrs	r3, r2
 8025194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8025196:	68fb      	ldr	r3, [r7, #12]
 8025198:	697a      	ldr	r2, [r7, #20]
 802519a:	609a      	str	r2, [r3, #8]
}
 802519c:	bf00      	nop
 802519e:	371c      	adds	r7, #28
 80251a0:	46bd      	mov	sp, r7
 80251a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251a6:	4770      	bx	lr

080251a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80251a8:	b480      	push	{r7}
 80251aa:	b087      	sub	sp, #28
 80251ac:	af00      	add	r7, sp, #0
 80251ae:	60f8      	str	r0, [r7, #12]
 80251b0:	60b9      	str	r1, [r7, #8]
 80251b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80251b4:	68bb      	ldr	r3, [r7, #8]
 80251b6:	f003 031f 	and.w	r3, r3, #31
 80251ba:	2201      	movs	r2, #1
 80251bc:	fa02 f303 	lsl.w	r3, r2, r3
 80251c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80251c2:	68fb      	ldr	r3, [r7, #12]
 80251c4:	6a1a      	ldr	r2, [r3, #32]
 80251c6:	697b      	ldr	r3, [r7, #20]
 80251c8:	43db      	mvns	r3, r3
 80251ca:	401a      	ands	r2, r3
 80251cc:	68fb      	ldr	r3, [r7, #12]
 80251ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80251d0:	68fb      	ldr	r3, [r7, #12]
 80251d2:	6a1a      	ldr	r2, [r3, #32]
 80251d4:	68bb      	ldr	r3, [r7, #8]
 80251d6:	f003 031f 	and.w	r3, r3, #31
 80251da:	6879      	ldr	r1, [r7, #4]
 80251dc:	fa01 f303 	lsl.w	r3, r1, r3
 80251e0:	431a      	orrs	r2, r3
 80251e2:	68fb      	ldr	r3, [r7, #12]
 80251e4:	621a      	str	r2, [r3, #32]
}
 80251e6:	bf00      	nop
 80251e8:	371c      	adds	r7, #28
 80251ea:	46bd      	mov	sp, r7
 80251ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251f0:	4770      	bx	lr
	...

080251f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80251f4:	b480      	push	{r7}
 80251f6:	b085      	sub	sp, #20
 80251f8:	af00      	add	r7, sp, #0
 80251fa:	6078      	str	r0, [r7, #4]
 80251fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80251fe:	687b      	ldr	r3, [r7, #4]
 8025200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8025204:	2b01      	cmp	r3, #1
 8025206:	d101      	bne.n	802520c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8025208:	2302      	movs	r3, #2
 802520a:	e05a      	b.n	80252c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 802520c:	687b      	ldr	r3, [r7, #4]
 802520e:	2201      	movs	r2, #1
 8025210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8025214:	687b      	ldr	r3, [r7, #4]
 8025216:	2202      	movs	r2, #2
 8025218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 802521c:	687b      	ldr	r3, [r7, #4]
 802521e:	681b      	ldr	r3, [r3, #0]
 8025220:	685b      	ldr	r3, [r3, #4]
 8025222:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8025224:	687b      	ldr	r3, [r7, #4]
 8025226:	681b      	ldr	r3, [r3, #0]
 8025228:	689b      	ldr	r3, [r3, #8]
 802522a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 802522c:	68fb      	ldr	r3, [r7, #12]
 802522e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8025232:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8025234:	683b      	ldr	r3, [r7, #0]
 8025236:	681b      	ldr	r3, [r3, #0]
 8025238:	68fa      	ldr	r2, [r7, #12]
 802523a:	4313      	orrs	r3, r2
 802523c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802523e:	687b      	ldr	r3, [r7, #4]
 8025240:	681b      	ldr	r3, [r3, #0]
 8025242:	68fa      	ldr	r2, [r7, #12]
 8025244:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8025246:	687b      	ldr	r3, [r7, #4]
 8025248:	681b      	ldr	r3, [r3, #0]
 802524a:	4a21      	ldr	r2, [pc, #132]	; (80252d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 802524c:	4293      	cmp	r3, r2
 802524e:	d022      	beq.n	8025296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8025250:	687b      	ldr	r3, [r7, #4]
 8025252:	681b      	ldr	r3, [r3, #0]
 8025254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8025258:	d01d      	beq.n	8025296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802525a:	687b      	ldr	r3, [r7, #4]
 802525c:	681b      	ldr	r3, [r3, #0]
 802525e:	4a1d      	ldr	r2, [pc, #116]	; (80252d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8025260:	4293      	cmp	r3, r2
 8025262:	d018      	beq.n	8025296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8025264:	687b      	ldr	r3, [r7, #4]
 8025266:	681b      	ldr	r3, [r3, #0]
 8025268:	4a1b      	ldr	r2, [pc, #108]	; (80252d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 802526a:	4293      	cmp	r3, r2
 802526c:	d013      	beq.n	8025296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802526e:	687b      	ldr	r3, [r7, #4]
 8025270:	681b      	ldr	r3, [r3, #0]
 8025272:	4a1a      	ldr	r2, [pc, #104]	; (80252dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8025274:	4293      	cmp	r3, r2
 8025276:	d00e      	beq.n	8025296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8025278:	687b      	ldr	r3, [r7, #4]
 802527a:	681b      	ldr	r3, [r3, #0]
 802527c:	4a18      	ldr	r2, [pc, #96]	; (80252e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 802527e:	4293      	cmp	r3, r2
 8025280:	d009      	beq.n	8025296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8025282:	687b      	ldr	r3, [r7, #4]
 8025284:	681b      	ldr	r3, [r3, #0]
 8025286:	4a17      	ldr	r2, [pc, #92]	; (80252e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8025288:	4293      	cmp	r3, r2
 802528a:	d004      	beq.n	8025296 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802528c:	687b      	ldr	r3, [r7, #4]
 802528e:	681b      	ldr	r3, [r3, #0]
 8025290:	4a15      	ldr	r2, [pc, #84]	; (80252e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8025292:	4293      	cmp	r3, r2
 8025294:	d10c      	bne.n	80252b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8025296:	68bb      	ldr	r3, [r7, #8]
 8025298:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802529c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802529e:	683b      	ldr	r3, [r7, #0]
 80252a0:	685b      	ldr	r3, [r3, #4]
 80252a2:	68ba      	ldr	r2, [r7, #8]
 80252a4:	4313      	orrs	r3, r2
 80252a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80252a8:	687b      	ldr	r3, [r7, #4]
 80252aa:	681b      	ldr	r3, [r3, #0]
 80252ac:	68ba      	ldr	r2, [r7, #8]
 80252ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80252b0:	687b      	ldr	r3, [r7, #4]
 80252b2:	2201      	movs	r2, #1
 80252b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80252b8:	687b      	ldr	r3, [r7, #4]
 80252ba:	2200      	movs	r2, #0
 80252bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80252c0:	2300      	movs	r3, #0
}
 80252c2:	4618      	mov	r0, r3
 80252c4:	3714      	adds	r7, #20
 80252c6:	46bd      	mov	sp, r7
 80252c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252cc:	4770      	bx	lr
 80252ce:	bf00      	nop
 80252d0:	40010000 	.word	0x40010000
 80252d4:	40000400 	.word	0x40000400
 80252d8:	40000800 	.word	0x40000800
 80252dc:	40000c00 	.word	0x40000c00
 80252e0:	40010400 	.word	0x40010400
 80252e4:	40014000 	.word	0x40014000
 80252e8:	40001800 	.word	0x40001800

080252ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80252ec:	b480      	push	{r7}
 80252ee:	b085      	sub	sp, #20
 80252f0:	af00      	add	r7, sp, #0
 80252f2:	6078      	str	r0, [r7, #4]
 80252f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80252f6:	2300      	movs	r3, #0
 80252f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80252fa:	687b      	ldr	r3, [r7, #4]
 80252fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8025300:	2b01      	cmp	r3, #1
 8025302:	d101      	bne.n	8025308 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8025304:	2302      	movs	r3, #2
 8025306:	e03d      	b.n	8025384 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8025308:	687b      	ldr	r3, [r7, #4]
 802530a:	2201      	movs	r2, #1
 802530c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8025310:	68fb      	ldr	r3, [r7, #12]
 8025312:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8025316:	683b      	ldr	r3, [r7, #0]
 8025318:	68db      	ldr	r3, [r3, #12]
 802531a:	4313      	orrs	r3, r2
 802531c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 802531e:	68fb      	ldr	r3, [r7, #12]
 8025320:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8025324:	683b      	ldr	r3, [r7, #0]
 8025326:	689b      	ldr	r3, [r3, #8]
 8025328:	4313      	orrs	r3, r2
 802532a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 802532c:	68fb      	ldr	r3, [r7, #12]
 802532e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8025332:	683b      	ldr	r3, [r7, #0]
 8025334:	685b      	ldr	r3, [r3, #4]
 8025336:	4313      	orrs	r3, r2
 8025338:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 802533a:	68fb      	ldr	r3, [r7, #12]
 802533c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8025340:	683b      	ldr	r3, [r7, #0]
 8025342:	681b      	ldr	r3, [r3, #0]
 8025344:	4313      	orrs	r3, r2
 8025346:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8025348:	68fb      	ldr	r3, [r7, #12]
 802534a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802534e:	683b      	ldr	r3, [r7, #0]
 8025350:	691b      	ldr	r3, [r3, #16]
 8025352:	4313      	orrs	r3, r2
 8025354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8025356:	68fb      	ldr	r3, [r7, #12]
 8025358:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 802535c:	683b      	ldr	r3, [r7, #0]
 802535e:	695b      	ldr	r3, [r3, #20]
 8025360:	4313      	orrs	r3, r2
 8025362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8025364:	68fb      	ldr	r3, [r7, #12]
 8025366:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 802536a:	683b      	ldr	r3, [r7, #0]
 802536c:	69db      	ldr	r3, [r3, #28]
 802536e:	4313      	orrs	r3, r2
 8025370:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8025372:	687b      	ldr	r3, [r7, #4]
 8025374:	681b      	ldr	r3, [r3, #0]
 8025376:	68fa      	ldr	r2, [r7, #12]
 8025378:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 802537a:	687b      	ldr	r3, [r7, #4]
 802537c:	2200      	movs	r2, #0
 802537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8025382:	2300      	movs	r3, #0
}
 8025384:	4618      	mov	r0, r3
 8025386:	3714      	adds	r7, #20
 8025388:	46bd      	mov	sp, r7
 802538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802538e:	4770      	bx	lr

08025390 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8025390:	b480      	push	{r7}
 8025392:	b083      	sub	sp, #12
 8025394:	af00      	add	r7, sp, #0
 8025396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8025398:	bf00      	nop
 802539a:	370c      	adds	r7, #12
 802539c:	46bd      	mov	sp, r7
 802539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80253a2:	4770      	bx	lr

080253a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80253a4:	b480      	push	{r7}
 80253a6:	b083      	sub	sp, #12
 80253a8:	af00      	add	r7, sp, #0
 80253aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80253ac:	bf00      	nop
 80253ae:	370c      	adds	r7, #12
 80253b0:	46bd      	mov	sp, r7
 80253b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80253b6:	4770      	bx	lr

080253b8 <__libc_init_array>:
 80253b8:	b570      	push	{r4, r5, r6, lr}
 80253ba:	4e0d      	ldr	r6, [pc, #52]	; (80253f0 <__libc_init_array+0x38>)
 80253bc:	4c0d      	ldr	r4, [pc, #52]	; (80253f4 <__libc_init_array+0x3c>)
 80253be:	1ba4      	subs	r4, r4, r6
 80253c0:	10a4      	asrs	r4, r4, #2
 80253c2:	2500      	movs	r5, #0
 80253c4:	42a5      	cmp	r5, r4
 80253c6:	d109      	bne.n	80253dc <__libc_init_array+0x24>
 80253c8:	4e0b      	ldr	r6, [pc, #44]	; (80253f8 <__libc_init_array+0x40>)
 80253ca:	4c0c      	ldr	r4, [pc, #48]	; (80253fc <__libc_init_array+0x44>)
 80253cc:	f000 f820 	bl	8025410 <_init>
 80253d0:	1ba4      	subs	r4, r4, r6
 80253d2:	10a4      	asrs	r4, r4, #2
 80253d4:	2500      	movs	r5, #0
 80253d6:	42a5      	cmp	r5, r4
 80253d8:	d105      	bne.n	80253e6 <__libc_init_array+0x2e>
 80253da:	bd70      	pop	{r4, r5, r6, pc}
 80253dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80253e0:	4798      	blx	r3
 80253e2:	3501      	adds	r5, #1
 80253e4:	e7ee      	b.n	80253c4 <__libc_init_array+0xc>
 80253e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80253ea:	4798      	blx	r3
 80253ec:	3501      	adds	r5, #1
 80253ee:	e7f2      	b.n	80253d6 <__libc_init_array+0x1e>
 80253f0:	08025450 	.word	0x08025450
 80253f4:	08025450 	.word	0x08025450
 80253f8:	08025450 	.word	0x08025450
 80253fc:	08025458 	.word	0x08025458

08025400 <memset>:
 8025400:	4402      	add	r2, r0
 8025402:	4603      	mov	r3, r0
 8025404:	4293      	cmp	r3, r2
 8025406:	d100      	bne.n	802540a <memset+0xa>
 8025408:	4770      	bx	lr
 802540a:	f803 1b01 	strb.w	r1, [r3], #1
 802540e:	e7f9      	b.n	8025404 <memset+0x4>

08025410 <_init>:
 8025410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025412:	bf00      	nop
 8025414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025416:	bc08      	pop	{r3}
 8025418:	469e      	mov	lr, r3
 802541a:	4770      	bx	lr

0802541c <_fini>:
 802541c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802541e:	bf00      	nop
 8025420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025422:	bc08      	pop	{r3}
 8025424:	469e      	mov	lr, r3
 8025426:	4770      	bx	lr
