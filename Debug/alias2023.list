
alias2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a53c  08020000  08020000  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0802a53c  0802a53c  0002a53c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a55c  0802a55c  00030020  2**0
                  CONTENTS
  4 .ARM          00000008  0802a55c  0802a55c  0002a55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a564  0802a564  00030020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802a564  0802a564  0002a564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802a56c  0802a56c  0002a56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0802a570  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a14  20000020  0802a590  00030020  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a34  0802a590  00030a34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000268a2  00000000  00000000  00030050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004195  00000000  00000000  000568f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001600  00000000  00000000  0005aa88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001450  00000000  00000000  0005c088  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000250b8  00000000  00000000  0005d4d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000140ba  00000000  00000000  00082590  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb3bf  00000000  00000000  0009664a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00161a09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005da8  00000000  00000000  00161a84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08020000 <__do_global_dtors_aux>:
 8020000:	b510      	push	{r4, lr}
 8020002:	4c05      	ldr	r4, [pc, #20]	; (8020018 <__do_global_dtors_aux+0x18>)
 8020004:	7823      	ldrb	r3, [r4, #0]
 8020006:	b933      	cbnz	r3, 8020016 <__do_global_dtors_aux+0x16>
 8020008:	4b04      	ldr	r3, [pc, #16]	; (802001c <__do_global_dtors_aux+0x1c>)
 802000a:	b113      	cbz	r3, 8020012 <__do_global_dtors_aux+0x12>
 802000c:	4804      	ldr	r0, [pc, #16]	; (8020020 <__do_global_dtors_aux+0x20>)
 802000e:	f3af 8000 	nop.w
 8020012:	2301      	movs	r3, #1
 8020014:	7023      	strb	r3, [r4, #0]
 8020016:	bd10      	pop	{r4, pc}
 8020018:	20000020 	.word	0x20000020
 802001c:	00000000 	.word	0x00000000
 8020020:	0802a524 	.word	0x0802a524

08020024 <frame_dummy>:
 8020024:	b508      	push	{r3, lr}
 8020026:	4b03      	ldr	r3, [pc, #12]	; (8020034 <frame_dummy+0x10>)
 8020028:	b11b      	cbz	r3, 8020032 <frame_dummy+0xe>
 802002a:	4903      	ldr	r1, [pc, #12]	; (8020038 <frame_dummy+0x14>)
 802002c:	4803      	ldr	r0, [pc, #12]	; (802003c <frame_dummy+0x18>)
 802002e:	f3af 8000 	nop.w
 8020032:	bd08      	pop	{r3, pc}
 8020034:	00000000 	.word	0x00000000
 8020038:	20000024 	.word	0x20000024
 802003c:	0802a524 	.word	0x0802a524

08020040 <__aeabi_drsub>:
 8020040:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8020044:	e002      	b.n	802004c <__adddf3>
 8020046:	bf00      	nop

08020048 <__aeabi_dsub>:
 8020048:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0802004c <__adddf3>:
 802004c:	b530      	push	{r4, r5, lr}
 802004e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8020052:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8020056:	ea94 0f05 	teq	r4, r5
 802005a:	bf08      	it	eq
 802005c:	ea90 0f02 	teqeq	r0, r2
 8020060:	bf1f      	itttt	ne
 8020062:	ea54 0c00 	orrsne.w	ip, r4, r0
 8020066:	ea55 0c02 	orrsne.w	ip, r5, r2
 802006a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 802006e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020072:	f000 80e2 	beq.w	802023a <__adddf3+0x1ee>
 8020076:	ea4f 5454 	mov.w	r4, r4, lsr #21
 802007a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 802007e:	bfb8      	it	lt
 8020080:	426d      	neglt	r5, r5
 8020082:	dd0c      	ble.n	802009e <__adddf3+0x52>
 8020084:	442c      	add	r4, r5
 8020086:	ea80 0202 	eor.w	r2, r0, r2
 802008a:	ea81 0303 	eor.w	r3, r1, r3
 802008e:	ea82 0000 	eor.w	r0, r2, r0
 8020092:	ea83 0101 	eor.w	r1, r3, r1
 8020096:	ea80 0202 	eor.w	r2, r0, r2
 802009a:	ea81 0303 	eor.w	r3, r1, r3
 802009e:	2d36      	cmp	r5, #54	; 0x36
 80200a0:	bf88      	it	hi
 80200a2:	bd30      	pophi	{r4, r5, pc}
 80200a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80200a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80200ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80200b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80200b4:	d002      	beq.n	80200bc <__adddf3+0x70>
 80200b6:	4240      	negs	r0, r0
 80200b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80200bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80200c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80200c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80200c8:	d002      	beq.n	80200d0 <__adddf3+0x84>
 80200ca:	4252      	negs	r2, r2
 80200cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80200d0:	ea94 0f05 	teq	r4, r5
 80200d4:	f000 80a7 	beq.w	8020226 <__adddf3+0x1da>
 80200d8:	f1a4 0401 	sub.w	r4, r4, #1
 80200dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80200e0:	db0d      	blt.n	80200fe <__adddf3+0xb2>
 80200e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80200e6:	fa22 f205 	lsr.w	r2, r2, r5
 80200ea:	1880      	adds	r0, r0, r2
 80200ec:	f141 0100 	adc.w	r1, r1, #0
 80200f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80200f4:	1880      	adds	r0, r0, r2
 80200f6:	fa43 f305 	asr.w	r3, r3, r5
 80200fa:	4159      	adcs	r1, r3
 80200fc:	e00e      	b.n	802011c <__adddf3+0xd0>
 80200fe:	f1a5 0520 	sub.w	r5, r5, #32
 8020102:	f10e 0e20 	add.w	lr, lr, #32
 8020106:	2a01      	cmp	r2, #1
 8020108:	fa03 fc0e 	lsl.w	ip, r3, lr
 802010c:	bf28      	it	cs
 802010e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020112:	fa43 f305 	asr.w	r3, r3, r5
 8020116:	18c0      	adds	r0, r0, r3
 8020118:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802011c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020120:	d507      	bpl.n	8020132 <__adddf3+0xe6>
 8020122:	f04f 0e00 	mov.w	lr, #0
 8020126:	f1dc 0c00 	rsbs	ip, ip, #0
 802012a:	eb7e 0000 	sbcs.w	r0, lr, r0
 802012e:	eb6e 0101 	sbc.w	r1, lr, r1
 8020132:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8020136:	d31b      	bcc.n	8020170 <__adddf3+0x124>
 8020138:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 802013c:	d30c      	bcc.n	8020158 <__adddf3+0x10c>
 802013e:	0849      	lsrs	r1, r1, #1
 8020140:	ea5f 0030 	movs.w	r0, r0, rrx
 8020144:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8020148:	f104 0401 	add.w	r4, r4, #1
 802014c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8020150:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8020154:	f080 809a 	bcs.w	802028c <__adddf3+0x240>
 8020158:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802015c:	bf08      	it	eq
 802015e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020162:	f150 0000 	adcs.w	r0, r0, #0
 8020166:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802016a:	ea41 0105 	orr.w	r1, r1, r5
 802016e:	bd30      	pop	{r4, r5, pc}
 8020170:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8020174:	4140      	adcs	r0, r0
 8020176:	eb41 0101 	adc.w	r1, r1, r1
 802017a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 802017e:	f1a4 0401 	sub.w	r4, r4, #1
 8020182:	d1e9      	bne.n	8020158 <__adddf3+0x10c>
 8020184:	f091 0f00 	teq	r1, #0
 8020188:	bf04      	itt	eq
 802018a:	4601      	moveq	r1, r0
 802018c:	2000      	moveq	r0, #0
 802018e:	fab1 f381 	clz	r3, r1
 8020192:	bf08      	it	eq
 8020194:	3320      	addeq	r3, #32
 8020196:	f1a3 030b 	sub.w	r3, r3, #11
 802019a:	f1b3 0220 	subs.w	r2, r3, #32
 802019e:	da0c      	bge.n	80201ba <__adddf3+0x16e>
 80201a0:	320c      	adds	r2, #12
 80201a2:	dd08      	ble.n	80201b6 <__adddf3+0x16a>
 80201a4:	f102 0c14 	add.w	ip, r2, #20
 80201a8:	f1c2 020c 	rsb	r2, r2, #12
 80201ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80201b0:	fa21 f102 	lsr.w	r1, r1, r2
 80201b4:	e00c      	b.n	80201d0 <__adddf3+0x184>
 80201b6:	f102 0214 	add.w	r2, r2, #20
 80201ba:	bfd8      	it	le
 80201bc:	f1c2 0c20 	rsble	ip, r2, #32
 80201c0:	fa01 f102 	lsl.w	r1, r1, r2
 80201c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80201c8:	bfdc      	itt	le
 80201ca:	ea41 010c 	orrle.w	r1, r1, ip
 80201ce:	4090      	lslle	r0, r2
 80201d0:	1ae4      	subs	r4, r4, r3
 80201d2:	bfa2      	ittt	ge
 80201d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80201d8:	4329      	orrge	r1, r5
 80201da:	bd30      	popge	{r4, r5, pc}
 80201dc:	ea6f 0404 	mvn.w	r4, r4
 80201e0:	3c1f      	subs	r4, #31
 80201e2:	da1c      	bge.n	802021e <__adddf3+0x1d2>
 80201e4:	340c      	adds	r4, #12
 80201e6:	dc0e      	bgt.n	8020206 <__adddf3+0x1ba>
 80201e8:	f104 0414 	add.w	r4, r4, #20
 80201ec:	f1c4 0220 	rsb	r2, r4, #32
 80201f0:	fa20 f004 	lsr.w	r0, r0, r4
 80201f4:	fa01 f302 	lsl.w	r3, r1, r2
 80201f8:	ea40 0003 	orr.w	r0, r0, r3
 80201fc:	fa21 f304 	lsr.w	r3, r1, r4
 8020200:	ea45 0103 	orr.w	r1, r5, r3
 8020204:	bd30      	pop	{r4, r5, pc}
 8020206:	f1c4 040c 	rsb	r4, r4, #12
 802020a:	f1c4 0220 	rsb	r2, r4, #32
 802020e:	fa20 f002 	lsr.w	r0, r0, r2
 8020212:	fa01 f304 	lsl.w	r3, r1, r4
 8020216:	ea40 0003 	orr.w	r0, r0, r3
 802021a:	4629      	mov	r1, r5
 802021c:	bd30      	pop	{r4, r5, pc}
 802021e:	fa21 f004 	lsr.w	r0, r1, r4
 8020222:	4629      	mov	r1, r5
 8020224:	bd30      	pop	{r4, r5, pc}
 8020226:	f094 0f00 	teq	r4, #0
 802022a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 802022e:	bf06      	itte	eq
 8020230:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8020234:	3401      	addeq	r4, #1
 8020236:	3d01      	subne	r5, #1
 8020238:	e74e      	b.n	80200d8 <__adddf3+0x8c>
 802023a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802023e:	bf18      	it	ne
 8020240:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020244:	d029      	beq.n	802029a <__adddf3+0x24e>
 8020246:	ea94 0f05 	teq	r4, r5
 802024a:	bf08      	it	eq
 802024c:	ea90 0f02 	teqeq	r0, r2
 8020250:	d005      	beq.n	802025e <__adddf3+0x212>
 8020252:	ea54 0c00 	orrs.w	ip, r4, r0
 8020256:	bf04      	itt	eq
 8020258:	4619      	moveq	r1, r3
 802025a:	4610      	moveq	r0, r2
 802025c:	bd30      	pop	{r4, r5, pc}
 802025e:	ea91 0f03 	teq	r1, r3
 8020262:	bf1e      	ittt	ne
 8020264:	2100      	movne	r1, #0
 8020266:	2000      	movne	r0, #0
 8020268:	bd30      	popne	{r4, r5, pc}
 802026a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 802026e:	d105      	bne.n	802027c <__adddf3+0x230>
 8020270:	0040      	lsls	r0, r0, #1
 8020272:	4149      	adcs	r1, r1
 8020274:	bf28      	it	cs
 8020276:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 802027a:	bd30      	pop	{r4, r5, pc}
 802027c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8020280:	bf3c      	itt	cc
 8020282:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8020286:	bd30      	popcc	{r4, r5, pc}
 8020288:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 802028c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8020290:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8020294:	f04f 0000 	mov.w	r0, #0
 8020298:	bd30      	pop	{r4, r5, pc}
 802029a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802029e:	bf1a      	itte	ne
 80202a0:	4619      	movne	r1, r3
 80202a2:	4610      	movne	r0, r2
 80202a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80202a8:	bf1c      	itt	ne
 80202aa:	460b      	movne	r3, r1
 80202ac:	4602      	movne	r2, r0
 80202ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80202b2:	bf06      	itte	eq
 80202b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80202b8:	ea91 0f03 	teqeq	r1, r3
 80202bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80202c0:	bd30      	pop	{r4, r5, pc}
 80202c2:	bf00      	nop

080202c4 <__aeabi_ui2d>:
 80202c4:	f090 0f00 	teq	r0, #0
 80202c8:	bf04      	itt	eq
 80202ca:	2100      	moveq	r1, #0
 80202cc:	4770      	bxeq	lr
 80202ce:	b530      	push	{r4, r5, lr}
 80202d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80202d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80202d8:	f04f 0500 	mov.w	r5, #0
 80202dc:	f04f 0100 	mov.w	r1, #0
 80202e0:	e750      	b.n	8020184 <__adddf3+0x138>
 80202e2:	bf00      	nop

080202e4 <__aeabi_i2d>:
 80202e4:	f090 0f00 	teq	r0, #0
 80202e8:	bf04      	itt	eq
 80202ea:	2100      	moveq	r1, #0
 80202ec:	4770      	bxeq	lr
 80202ee:	b530      	push	{r4, r5, lr}
 80202f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80202f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80202f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80202fc:	bf48      	it	mi
 80202fe:	4240      	negmi	r0, r0
 8020300:	f04f 0100 	mov.w	r1, #0
 8020304:	e73e      	b.n	8020184 <__adddf3+0x138>
 8020306:	bf00      	nop

08020308 <__aeabi_f2d>:
 8020308:	0042      	lsls	r2, r0, #1
 802030a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802030e:	ea4f 0131 	mov.w	r1, r1, rrx
 8020312:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020316:	bf1f      	itttt	ne
 8020318:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 802031c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8020320:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8020324:	4770      	bxne	lr
 8020326:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 802032a:	bf08      	it	eq
 802032c:	4770      	bxeq	lr
 802032e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8020332:	bf04      	itt	eq
 8020334:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8020338:	4770      	bxeq	lr
 802033a:	b530      	push	{r4, r5, lr}
 802033c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8020340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020344:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020348:	e71c      	b.n	8020184 <__adddf3+0x138>
 802034a:	bf00      	nop

0802034c <__aeabi_ul2d>:
 802034c:	ea50 0201 	orrs.w	r2, r0, r1
 8020350:	bf08      	it	eq
 8020352:	4770      	bxeq	lr
 8020354:	b530      	push	{r4, r5, lr}
 8020356:	f04f 0500 	mov.w	r5, #0
 802035a:	e00a      	b.n	8020372 <__aeabi_l2d+0x16>

0802035c <__aeabi_l2d>:
 802035c:	ea50 0201 	orrs.w	r2, r0, r1
 8020360:	bf08      	it	eq
 8020362:	4770      	bxeq	lr
 8020364:	b530      	push	{r4, r5, lr}
 8020366:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 802036a:	d502      	bpl.n	8020372 <__aeabi_l2d+0x16>
 802036c:	4240      	negs	r0, r0
 802036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020372:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020376:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802037a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 802037e:	f43f aed8 	beq.w	8020132 <__adddf3+0xe6>
 8020382:	f04f 0203 	mov.w	r2, #3
 8020386:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802038a:	bf18      	it	ne
 802038c:	3203      	addne	r2, #3
 802038e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8020392:	bf18      	it	ne
 8020394:	3203      	addne	r2, #3
 8020396:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 802039a:	f1c2 0320 	rsb	r3, r2, #32
 802039e:	fa00 fc03 	lsl.w	ip, r0, r3
 80203a2:	fa20 f002 	lsr.w	r0, r0, r2
 80203a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80203aa:	ea40 000e 	orr.w	r0, r0, lr
 80203ae:	fa21 f102 	lsr.w	r1, r1, r2
 80203b2:	4414      	add	r4, r2
 80203b4:	e6bd      	b.n	8020132 <__adddf3+0xe6>
 80203b6:	bf00      	nop

080203b8 <__aeabi_dmul>:
 80203b8:	b570      	push	{r4, r5, r6, lr}
 80203ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80203be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80203c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80203c6:	bf1d      	ittte	ne
 80203c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80203cc:	ea94 0f0c 	teqne	r4, ip
 80203d0:	ea95 0f0c 	teqne	r5, ip
 80203d4:	f000 f8de 	bleq	8020594 <__aeabi_dmul+0x1dc>
 80203d8:	442c      	add	r4, r5
 80203da:	ea81 0603 	eor.w	r6, r1, r3
 80203de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80203e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80203e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80203ea:	bf18      	it	ne
 80203ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80203f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80203f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80203f8:	d038      	beq.n	802046c <__aeabi_dmul+0xb4>
 80203fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80203fe:	f04f 0500 	mov.w	r5, #0
 8020402:	fbe1 e502 	umlal	lr, r5, r1, r2
 8020406:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 802040a:	fbe0 e503 	umlal	lr, r5, r0, r3
 802040e:	f04f 0600 	mov.w	r6, #0
 8020412:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020416:	f09c 0f00 	teq	ip, #0
 802041a:	bf18      	it	ne
 802041c:	f04e 0e01 	orrne.w	lr, lr, #1
 8020420:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8020424:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8020428:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 802042c:	d204      	bcs.n	8020438 <__aeabi_dmul+0x80>
 802042e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8020432:	416d      	adcs	r5, r5
 8020434:	eb46 0606 	adc.w	r6, r6, r6
 8020438:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 802043c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8020440:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8020444:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8020448:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 802044c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8020450:	bf88      	it	hi
 8020452:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020456:	d81e      	bhi.n	8020496 <__aeabi_dmul+0xde>
 8020458:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 802045c:	bf08      	it	eq
 802045e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8020462:	f150 0000 	adcs.w	r0, r0, #0
 8020466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802046a:	bd70      	pop	{r4, r5, r6, pc}
 802046c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8020470:	ea46 0101 	orr.w	r1, r6, r1
 8020474:	ea40 0002 	orr.w	r0, r0, r2
 8020478:	ea81 0103 	eor.w	r1, r1, r3
 802047c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8020480:	bfc2      	ittt	gt
 8020482:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020486:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 802048a:	bd70      	popgt	{r4, r5, r6, pc}
 802048c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020490:	f04f 0e00 	mov.w	lr, #0
 8020494:	3c01      	subs	r4, #1
 8020496:	f300 80ab 	bgt.w	80205f0 <__aeabi_dmul+0x238>
 802049a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 802049e:	bfde      	ittt	le
 80204a0:	2000      	movle	r0, #0
 80204a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80204a6:	bd70      	pople	{r4, r5, r6, pc}
 80204a8:	f1c4 0400 	rsb	r4, r4, #0
 80204ac:	3c20      	subs	r4, #32
 80204ae:	da35      	bge.n	802051c <__aeabi_dmul+0x164>
 80204b0:	340c      	adds	r4, #12
 80204b2:	dc1b      	bgt.n	80204ec <__aeabi_dmul+0x134>
 80204b4:	f104 0414 	add.w	r4, r4, #20
 80204b8:	f1c4 0520 	rsb	r5, r4, #32
 80204bc:	fa00 f305 	lsl.w	r3, r0, r5
 80204c0:	fa20 f004 	lsr.w	r0, r0, r4
 80204c4:	fa01 f205 	lsl.w	r2, r1, r5
 80204c8:	ea40 0002 	orr.w	r0, r0, r2
 80204cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80204d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80204d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80204d8:	fa21 f604 	lsr.w	r6, r1, r4
 80204dc:	eb42 0106 	adc.w	r1, r2, r6
 80204e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80204e4:	bf08      	it	eq
 80204e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80204ea:	bd70      	pop	{r4, r5, r6, pc}
 80204ec:	f1c4 040c 	rsb	r4, r4, #12
 80204f0:	f1c4 0520 	rsb	r5, r4, #32
 80204f4:	fa00 f304 	lsl.w	r3, r0, r4
 80204f8:	fa20 f005 	lsr.w	r0, r0, r5
 80204fc:	fa01 f204 	lsl.w	r2, r1, r4
 8020500:	ea40 0002 	orr.w	r0, r0, r2
 8020504:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020508:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802050c:	f141 0100 	adc.w	r1, r1, #0
 8020510:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020514:	bf08      	it	eq
 8020516:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802051a:	bd70      	pop	{r4, r5, r6, pc}
 802051c:	f1c4 0520 	rsb	r5, r4, #32
 8020520:	fa00 f205 	lsl.w	r2, r0, r5
 8020524:	ea4e 0e02 	orr.w	lr, lr, r2
 8020528:	fa20 f304 	lsr.w	r3, r0, r4
 802052c:	fa01 f205 	lsl.w	r2, r1, r5
 8020530:	ea43 0302 	orr.w	r3, r3, r2
 8020534:	fa21 f004 	lsr.w	r0, r1, r4
 8020538:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802053c:	fa21 f204 	lsr.w	r2, r1, r4
 8020540:	ea20 0002 	bic.w	r0, r0, r2
 8020544:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8020548:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802054c:	bf08      	it	eq
 802054e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020552:	bd70      	pop	{r4, r5, r6, pc}
 8020554:	f094 0f00 	teq	r4, #0
 8020558:	d10f      	bne.n	802057a <__aeabi_dmul+0x1c2>
 802055a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802055e:	0040      	lsls	r0, r0, #1
 8020560:	eb41 0101 	adc.w	r1, r1, r1
 8020564:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020568:	bf08      	it	eq
 802056a:	3c01      	subeq	r4, #1
 802056c:	d0f7      	beq.n	802055e <__aeabi_dmul+0x1a6>
 802056e:	ea41 0106 	orr.w	r1, r1, r6
 8020572:	f095 0f00 	teq	r5, #0
 8020576:	bf18      	it	ne
 8020578:	4770      	bxne	lr
 802057a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 802057e:	0052      	lsls	r2, r2, #1
 8020580:	eb43 0303 	adc.w	r3, r3, r3
 8020584:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8020588:	bf08      	it	eq
 802058a:	3d01      	subeq	r5, #1
 802058c:	d0f7      	beq.n	802057e <__aeabi_dmul+0x1c6>
 802058e:	ea43 0306 	orr.w	r3, r3, r6
 8020592:	4770      	bx	lr
 8020594:	ea94 0f0c 	teq	r4, ip
 8020598:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802059c:	bf18      	it	ne
 802059e:	ea95 0f0c 	teqne	r5, ip
 80205a2:	d00c      	beq.n	80205be <__aeabi_dmul+0x206>
 80205a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80205a8:	bf18      	it	ne
 80205aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80205ae:	d1d1      	bne.n	8020554 <__aeabi_dmul+0x19c>
 80205b0:	ea81 0103 	eor.w	r1, r1, r3
 80205b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205b8:	f04f 0000 	mov.w	r0, #0
 80205bc:	bd70      	pop	{r4, r5, r6, pc}
 80205be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80205c2:	bf06      	itte	eq
 80205c4:	4610      	moveq	r0, r2
 80205c6:	4619      	moveq	r1, r3
 80205c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80205cc:	d019      	beq.n	8020602 <__aeabi_dmul+0x24a>
 80205ce:	ea94 0f0c 	teq	r4, ip
 80205d2:	d102      	bne.n	80205da <__aeabi_dmul+0x222>
 80205d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80205d8:	d113      	bne.n	8020602 <__aeabi_dmul+0x24a>
 80205da:	ea95 0f0c 	teq	r5, ip
 80205de:	d105      	bne.n	80205ec <__aeabi_dmul+0x234>
 80205e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80205e4:	bf1c      	itt	ne
 80205e6:	4610      	movne	r0, r2
 80205e8:	4619      	movne	r1, r3
 80205ea:	d10a      	bne.n	8020602 <__aeabi_dmul+0x24a>
 80205ec:	ea81 0103 	eor.w	r1, r1, r3
 80205f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80205f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80205fc:	f04f 0000 	mov.w	r0, #0
 8020600:	bd70      	pop	{r4, r5, r6, pc}
 8020602:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020606:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 802060a:	bd70      	pop	{r4, r5, r6, pc}

0802060c <__aeabi_ddiv>:
 802060c:	b570      	push	{r4, r5, r6, lr}
 802060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802061a:	bf1d      	ittte	ne
 802061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020620:	ea94 0f0c 	teqne	r4, ip
 8020624:	ea95 0f0c 	teqne	r5, ip
 8020628:	f000 f8a7 	bleq	802077a <__aeabi_ddiv+0x16e>
 802062c:	eba4 0405 	sub.w	r4, r4, r5
 8020630:	ea81 0e03 	eor.w	lr, r1, r3
 8020634:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020638:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802063c:	f000 8088 	beq.w	8020750 <__aeabi_ddiv+0x144>
 8020640:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020644:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8020648:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 802064c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8020650:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020654:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020658:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802065c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8020660:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8020664:	429d      	cmp	r5, r3
 8020666:	bf08      	it	eq
 8020668:	4296      	cmpeq	r6, r2
 802066a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 802066e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8020672:	d202      	bcs.n	802067a <__aeabi_ddiv+0x6e>
 8020674:	085b      	lsrs	r3, r3, #1
 8020676:	ea4f 0232 	mov.w	r2, r2, rrx
 802067a:	1ab6      	subs	r6, r6, r2
 802067c:	eb65 0503 	sbc.w	r5, r5, r3
 8020680:	085b      	lsrs	r3, r3, #1
 8020682:	ea4f 0232 	mov.w	r2, r2, rrx
 8020686:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 802068a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 802068e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020692:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020696:	bf22      	ittt	cs
 8020698:	1ab6      	subcs	r6, r6, r2
 802069a:	4675      	movcs	r5, lr
 802069c:	ea40 000c 	orrcs.w	r0, r0, ip
 80206a0:	085b      	lsrs	r3, r3, #1
 80206a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80206a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80206aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206ae:	bf22      	ittt	cs
 80206b0:	1ab6      	subcs	r6, r6, r2
 80206b2:	4675      	movcs	r5, lr
 80206b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80206b8:	085b      	lsrs	r3, r3, #1
 80206ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80206be:	ebb6 0e02 	subs.w	lr, r6, r2
 80206c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206c6:	bf22      	ittt	cs
 80206c8:	1ab6      	subcs	r6, r6, r2
 80206ca:	4675      	movcs	r5, lr
 80206cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80206d0:	085b      	lsrs	r3, r3, #1
 80206d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80206d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80206da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206de:	bf22      	ittt	cs
 80206e0:	1ab6      	subcs	r6, r6, r2
 80206e2:	4675      	movcs	r5, lr
 80206e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80206e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80206ec:	d018      	beq.n	8020720 <__aeabi_ddiv+0x114>
 80206ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80206f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80206f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80206fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80206fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8020702:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8020706:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802070a:	d1c0      	bne.n	802068e <__aeabi_ddiv+0x82>
 802070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020710:	d10b      	bne.n	802072a <__aeabi_ddiv+0x11e>
 8020712:	ea41 0100 	orr.w	r1, r1, r0
 8020716:	f04f 0000 	mov.w	r0, #0
 802071a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 802071e:	e7b6      	b.n	802068e <__aeabi_ddiv+0x82>
 8020720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020724:	bf04      	itt	eq
 8020726:	4301      	orreq	r1, r0
 8020728:	2000      	moveq	r0, #0
 802072a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 802072e:	bf88      	it	hi
 8020730:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020734:	f63f aeaf 	bhi.w	8020496 <__aeabi_dmul+0xde>
 8020738:	ebb5 0c03 	subs.w	ip, r5, r3
 802073c:	bf04      	itt	eq
 802073e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8020742:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020746:	f150 0000 	adcs.w	r0, r0, #0
 802074a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802074e:	bd70      	pop	{r4, r5, r6, pc}
 8020750:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8020754:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020758:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 802075c:	bfc2      	ittt	gt
 802075e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020762:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020766:	bd70      	popgt	{r4, r5, r6, pc}
 8020768:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802076c:	f04f 0e00 	mov.w	lr, #0
 8020770:	3c01      	subs	r4, #1
 8020772:	e690      	b.n	8020496 <__aeabi_dmul+0xde>
 8020774:	ea45 0e06 	orr.w	lr, r5, r6
 8020778:	e68d      	b.n	8020496 <__aeabi_dmul+0xde>
 802077a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802077e:	ea94 0f0c 	teq	r4, ip
 8020782:	bf08      	it	eq
 8020784:	ea95 0f0c 	teqeq	r5, ip
 8020788:	f43f af3b 	beq.w	8020602 <__aeabi_dmul+0x24a>
 802078c:	ea94 0f0c 	teq	r4, ip
 8020790:	d10a      	bne.n	80207a8 <__aeabi_ddiv+0x19c>
 8020792:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020796:	f47f af34 	bne.w	8020602 <__aeabi_dmul+0x24a>
 802079a:	ea95 0f0c 	teq	r5, ip
 802079e:	f47f af25 	bne.w	80205ec <__aeabi_dmul+0x234>
 80207a2:	4610      	mov	r0, r2
 80207a4:	4619      	mov	r1, r3
 80207a6:	e72c      	b.n	8020602 <__aeabi_dmul+0x24a>
 80207a8:	ea95 0f0c 	teq	r5, ip
 80207ac:	d106      	bne.n	80207bc <__aeabi_ddiv+0x1b0>
 80207ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80207b2:	f43f aefd 	beq.w	80205b0 <__aeabi_dmul+0x1f8>
 80207b6:	4610      	mov	r0, r2
 80207b8:	4619      	mov	r1, r3
 80207ba:	e722      	b.n	8020602 <__aeabi_dmul+0x24a>
 80207bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80207c0:	bf18      	it	ne
 80207c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80207c6:	f47f aec5 	bne.w	8020554 <__aeabi_dmul+0x19c>
 80207ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80207ce:	f47f af0d 	bne.w	80205ec <__aeabi_dmul+0x234>
 80207d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80207d6:	f47f aeeb 	bne.w	80205b0 <__aeabi_dmul+0x1f8>
 80207da:	e712      	b.n	8020602 <__aeabi_dmul+0x24a>

080207dc <__gedf2>:
 80207dc:	f04f 3cff 	mov.w	ip, #4294967295
 80207e0:	e006      	b.n	80207f0 <__cmpdf2+0x4>
 80207e2:	bf00      	nop

080207e4 <__ledf2>:
 80207e4:	f04f 0c01 	mov.w	ip, #1
 80207e8:	e002      	b.n	80207f0 <__cmpdf2+0x4>
 80207ea:	bf00      	nop

080207ec <__cmpdf2>:
 80207ec:	f04f 0c01 	mov.w	ip, #1
 80207f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80207f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80207f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80207fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020800:	bf18      	it	ne
 8020802:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020806:	d01b      	beq.n	8020840 <__cmpdf2+0x54>
 8020808:	b001      	add	sp, #4
 802080a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 802080e:	bf0c      	ite	eq
 8020810:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020814:	ea91 0f03 	teqne	r1, r3
 8020818:	bf02      	ittt	eq
 802081a:	ea90 0f02 	teqeq	r0, r2
 802081e:	2000      	moveq	r0, #0
 8020820:	4770      	bxeq	lr
 8020822:	f110 0f00 	cmn.w	r0, #0
 8020826:	ea91 0f03 	teq	r1, r3
 802082a:	bf58      	it	pl
 802082c:	4299      	cmppl	r1, r3
 802082e:	bf08      	it	eq
 8020830:	4290      	cmpeq	r0, r2
 8020832:	bf2c      	ite	cs
 8020834:	17d8      	asrcs	r0, r3, #31
 8020836:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 802083a:	f040 0001 	orr.w	r0, r0, #1
 802083e:	4770      	bx	lr
 8020840:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020844:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020848:	d102      	bne.n	8020850 <__cmpdf2+0x64>
 802084a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 802084e:	d107      	bne.n	8020860 <__cmpdf2+0x74>
 8020850:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020854:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020858:	d1d6      	bne.n	8020808 <__cmpdf2+0x1c>
 802085a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 802085e:	d0d3      	beq.n	8020808 <__cmpdf2+0x1c>
 8020860:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020864:	4770      	bx	lr
 8020866:	bf00      	nop

08020868 <__aeabi_cdrcmple>:
 8020868:	4684      	mov	ip, r0
 802086a:	4610      	mov	r0, r2
 802086c:	4662      	mov	r2, ip
 802086e:	468c      	mov	ip, r1
 8020870:	4619      	mov	r1, r3
 8020872:	4663      	mov	r3, ip
 8020874:	e000      	b.n	8020878 <__aeabi_cdcmpeq>
 8020876:	bf00      	nop

08020878 <__aeabi_cdcmpeq>:
 8020878:	b501      	push	{r0, lr}
 802087a:	f7ff ffb7 	bl	80207ec <__cmpdf2>
 802087e:	2800      	cmp	r0, #0
 8020880:	bf48      	it	mi
 8020882:	f110 0f00 	cmnmi.w	r0, #0
 8020886:	bd01      	pop	{r0, pc}

08020888 <__aeabi_dcmpeq>:
 8020888:	f84d ed08 	str.w	lr, [sp, #-8]!
 802088c:	f7ff fff4 	bl	8020878 <__aeabi_cdcmpeq>
 8020890:	bf0c      	ite	eq
 8020892:	2001      	moveq	r0, #1
 8020894:	2000      	movne	r0, #0
 8020896:	f85d fb08 	ldr.w	pc, [sp], #8
 802089a:	bf00      	nop

0802089c <__aeabi_dcmplt>:
 802089c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208a0:	f7ff ffea 	bl	8020878 <__aeabi_cdcmpeq>
 80208a4:	bf34      	ite	cc
 80208a6:	2001      	movcc	r0, #1
 80208a8:	2000      	movcs	r0, #0
 80208aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80208ae:	bf00      	nop

080208b0 <__aeabi_dcmple>:
 80208b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208b4:	f7ff ffe0 	bl	8020878 <__aeabi_cdcmpeq>
 80208b8:	bf94      	ite	ls
 80208ba:	2001      	movls	r0, #1
 80208bc:	2000      	movhi	r0, #0
 80208be:	f85d fb08 	ldr.w	pc, [sp], #8
 80208c2:	bf00      	nop

080208c4 <__aeabi_dcmpge>:
 80208c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208c8:	f7ff ffce 	bl	8020868 <__aeabi_cdrcmple>
 80208cc:	bf94      	ite	ls
 80208ce:	2001      	movls	r0, #1
 80208d0:	2000      	movhi	r0, #0
 80208d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80208d6:	bf00      	nop

080208d8 <__aeabi_dcmpgt>:
 80208d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208dc:	f7ff ffc4 	bl	8020868 <__aeabi_cdrcmple>
 80208e0:	bf34      	ite	cc
 80208e2:	2001      	movcc	r0, #1
 80208e4:	2000      	movcs	r0, #0
 80208e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80208ea:	bf00      	nop

080208ec <__aeabi_d2f>:
 80208ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80208f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80208f4:	bf24      	itt	cs
 80208f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80208fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80208fe:	d90d      	bls.n	802091c <__aeabi_d2f+0x30>
 8020900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8020904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 802090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8020910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8020914:	bf08      	it	eq
 8020916:	f020 0001 	biceq.w	r0, r0, #1
 802091a:	4770      	bx	lr
 802091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8020920:	d121      	bne.n	8020966 <__aeabi_d2f+0x7a>
 8020922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8020926:	bfbc      	itt	lt
 8020928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 802092c:	4770      	bxlt	lr
 802092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8020936:	f1c2 0218 	rsb	r2, r2, #24
 802093a:	f1c2 0c20 	rsb	ip, r2, #32
 802093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8020942:	fa20 f002 	lsr.w	r0, r0, r2
 8020946:	bf18      	it	ne
 8020948:	f040 0001 	orrne.w	r0, r0, #1
 802094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8020954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8020958:	ea40 000c 	orr.w	r0, r0, ip
 802095c:	fa23 f302 	lsr.w	r3, r3, r2
 8020960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020964:	e7cc      	b.n	8020900 <__aeabi_d2f+0x14>
 8020966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 802096a:	d107      	bne.n	802097c <__aeabi_d2f+0x90>
 802096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8020970:	bf1e      	ittt	ne
 8020972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8020976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 802097a:	4770      	bxne	lr
 802097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8020980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8020984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020988:	4770      	bx	lr
 802098a:	bf00      	nop

0802098c <__aeabi_uldivmod>:
 802098c:	b953      	cbnz	r3, 80209a4 <__aeabi_uldivmod+0x18>
 802098e:	b94a      	cbnz	r2, 80209a4 <__aeabi_uldivmod+0x18>
 8020990:	2900      	cmp	r1, #0
 8020992:	bf08      	it	eq
 8020994:	2800      	cmpeq	r0, #0
 8020996:	bf1c      	itt	ne
 8020998:	f04f 31ff 	movne.w	r1, #4294967295
 802099c:	f04f 30ff 	movne.w	r0, #4294967295
 80209a0:	f000 b996 	b.w	8020cd0 <__aeabi_idiv0>
 80209a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80209a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80209ac:	f000 f82a 	bl	8020a04 <__udivmoddi4>
 80209b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80209b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80209b8:	b004      	add	sp, #16
 80209ba:	4770      	bx	lr

080209bc <__aeabi_f2ulz>:
 80209bc:	b5d0      	push	{r4, r6, r7, lr}
 80209be:	f7ff fca3 	bl	8020308 <__aeabi_f2d>
 80209c2:	2200      	movs	r2, #0
 80209c4:	4b0d      	ldr	r3, [pc, #52]	; (80209fc <__aeabi_f2ulz+0x40>)
 80209c6:	4606      	mov	r6, r0
 80209c8:	460f      	mov	r7, r1
 80209ca:	f7ff fcf5 	bl	80203b8 <__aeabi_dmul>
 80209ce:	f000 f981 	bl	8020cd4 <__aeabi_d2uiz>
 80209d2:	4604      	mov	r4, r0
 80209d4:	f7ff fc76 	bl	80202c4 <__aeabi_ui2d>
 80209d8:	2200      	movs	r2, #0
 80209da:	4b09      	ldr	r3, [pc, #36]	; (8020a00 <__aeabi_f2ulz+0x44>)
 80209dc:	f7ff fcec 	bl	80203b8 <__aeabi_dmul>
 80209e0:	4602      	mov	r2, r0
 80209e2:	460b      	mov	r3, r1
 80209e4:	4630      	mov	r0, r6
 80209e6:	4639      	mov	r1, r7
 80209e8:	f7ff fb2e 	bl	8020048 <__aeabi_dsub>
 80209ec:	f000 f972 	bl	8020cd4 <__aeabi_d2uiz>
 80209f0:	2200      	movs	r2, #0
 80209f2:	4623      	mov	r3, r4
 80209f4:	4310      	orrs	r0, r2
 80209f6:	4619      	mov	r1, r3
 80209f8:	bdd0      	pop	{r4, r6, r7, pc}
 80209fa:	bf00      	nop
 80209fc:	3df00000 	.word	0x3df00000
 8020a00:	41f00000 	.word	0x41f00000

08020a04 <__udivmoddi4>:
 8020a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020a08:	9e08      	ldr	r6, [sp, #32]
 8020a0a:	4604      	mov	r4, r0
 8020a0c:	4688      	mov	r8, r1
 8020a0e:	2b00      	cmp	r3, #0
 8020a10:	d14b      	bne.n	8020aaa <__udivmoddi4+0xa6>
 8020a12:	428a      	cmp	r2, r1
 8020a14:	4615      	mov	r5, r2
 8020a16:	d967      	bls.n	8020ae8 <__udivmoddi4+0xe4>
 8020a18:	fab2 f282 	clz	r2, r2
 8020a1c:	b14a      	cbz	r2, 8020a32 <__udivmoddi4+0x2e>
 8020a1e:	f1c2 0720 	rsb	r7, r2, #32
 8020a22:	fa01 f302 	lsl.w	r3, r1, r2
 8020a26:	fa20 f707 	lsr.w	r7, r0, r7
 8020a2a:	4095      	lsls	r5, r2
 8020a2c:	ea47 0803 	orr.w	r8, r7, r3
 8020a30:	4094      	lsls	r4, r2
 8020a32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020a36:	0c23      	lsrs	r3, r4, #16
 8020a38:	fbb8 f7fe 	udiv	r7, r8, lr
 8020a3c:	fa1f fc85 	uxth.w	ip, r5
 8020a40:	fb0e 8817 	mls	r8, lr, r7, r8
 8020a44:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8020a48:	fb07 f10c 	mul.w	r1, r7, ip
 8020a4c:	4299      	cmp	r1, r3
 8020a4e:	d909      	bls.n	8020a64 <__udivmoddi4+0x60>
 8020a50:	18eb      	adds	r3, r5, r3
 8020a52:	f107 30ff 	add.w	r0, r7, #4294967295
 8020a56:	f080 811b 	bcs.w	8020c90 <__udivmoddi4+0x28c>
 8020a5a:	4299      	cmp	r1, r3
 8020a5c:	f240 8118 	bls.w	8020c90 <__udivmoddi4+0x28c>
 8020a60:	3f02      	subs	r7, #2
 8020a62:	442b      	add	r3, r5
 8020a64:	1a5b      	subs	r3, r3, r1
 8020a66:	b2a4      	uxth	r4, r4
 8020a68:	fbb3 f0fe 	udiv	r0, r3, lr
 8020a6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8020a70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020a74:	fb00 fc0c 	mul.w	ip, r0, ip
 8020a78:	45a4      	cmp	ip, r4
 8020a7a:	d909      	bls.n	8020a90 <__udivmoddi4+0x8c>
 8020a7c:	192c      	adds	r4, r5, r4
 8020a7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8020a82:	f080 8107 	bcs.w	8020c94 <__udivmoddi4+0x290>
 8020a86:	45a4      	cmp	ip, r4
 8020a88:	f240 8104 	bls.w	8020c94 <__udivmoddi4+0x290>
 8020a8c:	3802      	subs	r0, #2
 8020a8e:	442c      	add	r4, r5
 8020a90:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8020a94:	eba4 040c 	sub.w	r4, r4, ip
 8020a98:	2700      	movs	r7, #0
 8020a9a:	b11e      	cbz	r6, 8020aa4 <__udivmoddi4+0xa0>
 8020a9c:	40d4      	lsrs	r4, r2
 8020a9e:	2300      	movs	r3, #0
 8020aa0:	e9c6 4300 	strd	r4, r3, [r6]
 8020aa4:	4639      	mov	r1, r7
 8020aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020aaa:	428b      	cmp	r3, r1
 8020aac:	d909      	bls.n	8020ac2 <__udivmoddi4+0xbe>
 8020aae:	2e00      	cmp	r6, #0
 8020ab0:	f000 80eb 	beq.w	8020c8a <__udivmoddi4+0x286>
 8020ab4:	2700      	movs	r7, #0
 8020ab6:	e9c6 0100 	strd	r0, r1, [r6]
 8020aba:	4638      	mov	r0, r7
 8020abc:	4639      	mov	r1, r7
 8020abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020ac2:	fab3 f783 	clz	r7, r3
 8020ac6:	2f00      	cmp	r7, #0
 8020ac8:	d147      	bne.n	8020b5a <__udivmoddi4+0x156>
 8020aca:	428b      	cmp	r3, r1
 8020acc:	d302      	bcc.n	8020ad4 <__udivmoddi4+0xd0>
 8020ace:	4282      	cmp	r2, r0
 8020ad0:	f200 80fa 	bhi.w	8020cc8 <__udivmoddi4+0x2c4>
 8020ad4:	1a84      	subs	r4, r0, r2
 8020ad6:	eb61 0303 	sbc.w	r3, r1, r3
 8020ada:	2001      	movs	r0, #1
 8020adc:	4698      	mov	r8, r3
 8020ade:	2e00      	cmp	r6, #0
 8020ae0:	d0e0      	beq.n	8020aa4 <__udivmoddi4+0xa0>
 8020ae2:	e9c6 4800 	strd	r4, r8, [r6]
 8020ae6:	e7dd      	b.n	8020aa4 <__udivmoddi4+0xa0>
 8020ae8:	b902      	cbnz	r2, 8020aec <__udivmoddi4+0xe8>
 8020aea:	deff      	udf	#255	; 0xff
 8020aec:	fab2 f282 	clz	r2, r2
 8020af0:	2a00      	cmp	r2, #0
 8020af2:	f040 808f 	bne.w	8020c14 <__udivmoddi4+0x210>
 8020af6:	1b49      	subs	r1, r1, r5
 8020af8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020afc:	fa1f f885 	uxth.w	r8, r5
 8020b00:	2701      	movs	r7, #1
 8020b02:	fbb1 fcfe 	udiv	ip, r1, lr
 8020b06:	0c23      	lsrs	r3, r4, #16
 8020b08:	fb0e 111c 	mls	r1, lr, ip, r1
 8020b0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020b10:	fb08 f10c 	mul.w	r1, r8, ip
 8020b14:	4299      	cmp	r1, r3
 8020b16:	d907      	bls.n	8020b28 <__udivmoddi4+0x124>
 8020b18:	18eb      	adds	r3, r5, r3
 8020b1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8020b1e:	d202      	bcs.n	8020b26 <__udivmoddi4+0x122>
 8020b20:	4299      	cmp	r1, r3
 8020b22:	f200 80cd 	bhi.w	8020cc0 <__udivmoddi4+0x2bc>
 8020b26:	4684      	mov	ip, r0
 8020b28:	1a59      	subs	r1, r3, r1
 8020b2a:	b2a3      	uxth	r3, r4
 8020b2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8020b30:	fb0e 1410 	mls	r4, lr, r0, r1
 8020b34:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8020b38:	fb08 f800 	mul.w	r8, r8, r0
 8020b3c:	45a0      	cmp	r8, r4
 8020b3e:	d907      	bls.n	8020b50 <__udivmoddi4+0x14c>
 8020b40:	192c      	adds	r4, r5, r4
 8020b42:	f100 33ff 	add.w	r3, r0, #4294967295
 8020b46:	d202      	bcs.n	8020b4e <__udivmoddi4+0x14a>
 8020b48:	45a0      	cmp	r8, r4
 8020b4a:	f200 80b6 	bhi.w	8020cba <__udivmoddi4+0x2b6>
 8020b4e:	4618      	mov	r0, r3
 8020b50:	eba4 0408 	sub.w	r4, r4, r8
 8020b54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8020b58:	e79f      	b.n	8020a9a <__udivmoddi4+0x96>
 8020b5a:	f1c7 0c20 	rsb	ip, r7, #32
 8020b5e:	40bb      	lsls	r3, r7
 8020b60:	fa22 fe0c 	lsr.w	lr, r2, ip
 8020b64:	ea4e 0e03 	orr.w	lr, lr, r3
 8020b68:	fa01 f407 	lsl.w	r4, r1, r7
 8020b6c:	fa20 f50c 	lsr.w	r5, r0, ip
 8020b70:	fa21 f30c 	lsr.w	r3, r1, ip
 8020b74:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8020b78:	4325      	orrs	r5, r4
 8020b7a:	fbb3 f9f8 	udiv	r9, r3, r8
 8020b7e:	0c2c      	lsrs	r4, r5, #16
 8020b80:	fb08 3319 	mls	r3, r8, r9, r3
 8020b84:	fa1f fa8e 	uxth.w	sl, lr
 8020b88:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8020b8c:	fb09 f40a 	mul.w	r4, r9, sl
 8020b90:	429c      	cmp	r4, r3
 8020b92:	fa02 f207 	lsl.w	r2, r2, r7
 8020b96:	fa00 f107 	lsl.w	r1, r0, r7
 8020b9a:	d90b      	bls.n	8020bb4 <__udivmoddi4+0x1b0>
 8020b9c:	eb1e 0303 	adds.w	r3, lr, r3
 8020ba0:	f109 30ff 	add.w	r0, r9, #4294967295
 8020ba4:	f080 8087 	bcs.w	8020cb6 <__udivmoddi4+0x2b2>
 8020ba8:	429c      	cmp	r4, r3
 8020baa:	f240 8084 	bls.w	8020cb6 <__udivmoddi4+0x2b2>
 8020bae:	f1a9 0902 	sub.w	r9, r9, #2
 8020bb2:	4473      	add	r3, lr
 8020bb4:	1b1b      	subs	r3, r3, r4
 8020bb6:	b2ad      	uxth	r5, r5
 8020bb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8020bbc:	fb08 3310 	mls	r3, r8, r0, r3
 8020bc0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8020bc4:	fb00 fa0a 	mul.w	sl, r0, sl
 8020bc8:	45a2      	cmp	sl, r4
 8020bca:	d908      	bls.n	8020bde <__udivmoddi4+0x1da>
 8020bcc:	eb1e 0404 	adds.w	r4, lr, r4
 8020bd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8020bd4:	d26b      	bcs.n	8020cae <__udivmoddi4+0x2aa>
 8020bd6:	45a2      	cmp	sl, r4
 8020bd8:	d969      	bls.n	8020cae <__udivmoddi4+0x2aa>
 8020bda:	3802      	subs	r0, #2
 8020bdc:	4474      	add	r4, lr
 8020bde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020be2:	fba0 8902 	umull	r8, r9, r0, r2
 8020be6:	eba4 040a 	sub.w	r4, r4, sl
 8020bea:	454c      	cmp	r4, r9
 8020bec:	46c2      	mov	sl, r8
 8020bee:	464b      	mov	r3, r9
 8020bf0:	d354      	bcc.n	8020c9c <__udivmoddi4+0x298>
 8020bf2:	d051      	beq.n	8020c98 <__udivmoddi4+0x294>
 8020bf4:	2e00      	cmp	r6, #0
 8020bf6:	d069      	beq.n	8020ccc <__udivmoddi4+0x2c8>
 8020bf8:	ebb1 050a 	subs.w	r5, r1, sl
 8020bfc:	eb64 0403 	sbc.w	r4, r4, r3
 8020c00:	fa04 fc0c 	lsl.w	ip, r4, ip
 8020c04:	40fd      	lsrs	r5, r7
 8020c06:	40fc      	lsrs	r4, r7
 8020c08:	ea4c 0505 	orr.w	r5, ip, r5
 8020c0c:	e9c6 5400 	strd	r5, r4, [r6]
 8020c10:	2700      	movs	r7, #0
 8020c12:	e747      	b.n	8020aa4 <__udivmoddi4+0xa0>
 8020c14:	f1c2 0320 	rsb	r3, r2, #32
 8020c18:	fa20 f703 	lsr.w	r7, r0, r3
 8020c1c:	4095      	lsls	r5, r2
 8020c1e:	fa01 f002 	lsl.w	r0, r1, r2
 8020c22:	fa21 f303 	lsr.w	r3, r1, r3
 8020c26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020c2a:	4338      	orrs	r0, r7
 8020c2c:	0c01      	lsrs	r1, r0, #16
 8020c2e:	fbb3 f7fe 	udiv	r7, r3, lr
 8020c32:	fa1f f885 	uxth.w	r8, r5
 8020c36:	fb0e 3317 	mls	r3, lr, r7, r3
 8020c3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020c3e:	fb07 f308 	mul.w	r3, r7, r8
 8020c42:	428b      	cmp	r3, r1
 8020c44:	fa04 f402 	lsl.w	r4, r4, r2
 8020c48:	d907      	bls.n	8020c5a <__udivmoddi4+0x256>
 8020c4a:	1869      	adds	r1, r5, r1
 8020c4c:	f107 3cff 	add.w	ip, r7, #4294967295
 8020c50:	d22f      	bcs.n	8020cb2 <__udivmoddi4+0x2ae>
 8020c52:	428b      	cmp	r3, r1
 8020c54:	d92d      	bls.n	8020cb2 <__udivmoddi4+0x2ae>
 8020c56:	3f02      	subs	r7, #2
 8020c58:	4429      	add	r1, r5
 8020c5a:	1acb      	subs	r3, r1, r3
 8020c5c:	b281      	uxth	r1, r0
 8020c5e:	fbb3 f0fe 	udiv	r0, r3, lr
 8020c62:	fb0e 3310 	mls	r3, lr, r0, r3
 8020c66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020c6a:	fb00 f308 	mul.w	r3, r0, r8
 8020c6e:	428b      	cmp	r3, r1
 8020c70:	d907      	bls.n	8020c82 <__udivmoddi4+0x27e>
 8020c72:	1869      	adds	r1, r5, r1
 8020c74:	f100 3cff 	add.w	ip, r0, #4294967295
 8020c78:	d217      	bcs.n	8020caa <__udivmoddi4+0x2a6>
 8020c7a:	428b      	cmp	r3, r1
 8020c7c:	d915      	bls.n	8020caa <__udivmoddi4+0x2a6>
 8020c7e:	3802      	subs	r0, #2
 8020c80:	4429      	add	r1, r5
 8020c82:	1ac9      	subs	r1, r1, r3
 8020c84:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8020c88:	e73b      	b.n	8020b02 <__udivmoddi4+0xfe>
 8020c8a:	4637      	mov	r7, r6
 8020c8c:	4630      	mov	r0, r6
 8020c8e:	e709      	b.n	8020aa4 <__udivmoddi4+0xa0>
 8020c90:	4607      	mov	r7, r0
 8020c92:	e6e7      	b.n	8020a64 <__udivmoddi4+0x60>
 8020c94:	4618      	mov	r0, r3
 8020c96:	e6fb      	b.n	8020a90 <__udivmoddi4+0x8c>
 8020c98:	4541      	cmp	r1, r8
 8020c9a:	d2ab      	bcs.n	8020bf4 <__udivmoddi4+0x1f0>
 8020c9c:	ebb8 0a02 	subs.w	sl, r8, r2
 8020ca0:	eb69 020e 	sbc.w	r2, r9, lr
 8020ca4:	3801      	subs	r0, #1
 8020ca6:	4613      	mov	r3, r2
 8020ca8:	e7a4      	b.n	8020bf4 <__udivmoddi4+0x1f0>
 8020caa:	4660      	mov	r0, ip
 8020cac:	e7e9      	b.n	8020c82 <__udivmoddi4+0x27e>
 8020cae:	4618      	mov	r0, r3
 8020cb0:	e795      	b.n	8020bde <__udivmoddi4+0x1da>
 8020cb2:	4667      	mov	r7, ip
 8020cb4:	e7d1      	b.n	8020c5a <__udivmoddi4+0x256>
 8020cb6:	4681      	mov	r9, r0
 8020cb8:	e77c      	b.n	8020bb4 <__udivmoddi4+0x1b0>
 8020cba:	3802      	subs	r0, #2
 8020cbc:	442c      	add	r4, r5
 8020cbe:	e747      	b.n	8020b50 <__udivmoddi4+0x14c>
 8020cc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8020cc4:	442b      	add	r3, r5
 8020cc6:	e72f      	b.n	8020b28 <__udivmoddi4+0x124>
 8020cc8:	4638      	mov	r0, r7
 8020cca:	e708      	b.n	8020ade <__udivmoddi4+0xda>
 8020ccc:	4637      	mov	r7, r6
 8020cce:	e6e9      	b.n	8020aa4 <__udivmoddi4+0xa0>

08020cd0 <__aeabi_idiv0>:
 8020cd0:	4770      	bx	lr
 8020cd2:	bf00      	nop

08020cd4 <__aeabi_d2uiz>:
 8020cd4:	004a      	lsls	r2, r1, #1
 8020cd6:	d211      	bcs.n	8020cfc <__aeabi_d2uiz+0x28>
 8020cd8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020cdc:	d211      	bcs.n	8020d02 <__aeabi_d2uiz+0x2e>
 8020cde:	d50d      	bpl.n	8020cfc <__aeabi_d2uiz+0x28>
 8020ce0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020ce4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020ce8:	d40e      	bmi.n	8020d08 <__aeabi_d2uiz+0x34>
 8020cea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020cee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020cf2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020cf6:	fa23 f002 	lsr.w	r0, r3, r2
 8020cfa:	4770      	bx	lr
 8020cfc:	f04f 0000 	mov.w	r0, #0
 8020d00:	4770      	bx	lr
 8020d02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020d06:	d102      	bne.n	8020d0e <__aeabi_d2uiz+0x3a>
 8020d08:	f04f 30ff 	mov.w	r0, #4294967295
 8020d0c:	4770      	bx	lr
 8020d0e:	f04f 0000 	mov.w	r0, #0
 8020d12:	4770      	bx	lr

08020d14 <_ZN7EncoderC1Ev>:
#include "encoder.hpp"
#include "declare_extern.h"

Encoder::Encoder() : distance_(0)
 8020d14:	b480      	push	{r7}
 8020d16:	b083      	sub	sp, #12
 8020d18:	af00      	add	r7, sp, #0
 8020d1a:	6078      	str	r0, [r7, #4]
                   , distance_stack_(0)
                   , distance_difference_(0) {}
 8020d1c:	687b      	ldr	r3, [r7, #4]
 8020d1e:	f04f 0200 	mov.w	r2, #0
 8020d22:	601a      	str	r2, [r3, #0]
 8020d24:	687b      	ldr	r3, [r7, #4]
 8020d26:	f04f 0200 	mov.w	r2, #0
 8020d2a:	605a      	str	r2, [r3, #4]
 8020d2c:	687b      	ldr	r3, [r7, #4]
 8020d2e:	f04f 0200 	mov.w	r2, #0
 8020d32:	609a      	str	r2, [r3, #8]
 8020d34:	687b      	ldr	r3, [r7, #4]
 8020d36:	4618      	mov	r0, r3
 8020d38:	370c      	adds	r7, #12
 8020d3a:	46bd      	mov	sp, r7
 8020d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d40:	4770      	bx	lr
	...

08020d44 <_ZN7Encoder4InitEv>:

void Encoder::Init()
{
 8020d44:	b580      	push	{r7, lr}
 8020d46:	b082      	sub	sp, #8
 8020d48:	af00      	add	r7, sp, #0
 8020d4a:	6078      	str	r0, [r7, #4]
	if(HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL) != HAL_OK)
 8020d4c:	213c      	movs	r1, #60	; 0x3c
 8020d4e:	4812      	ldr	r0, [pc, #72]	; (8020d98 <_ZN7Encoder4InitEv+0x54>)
 8020d50:	f008 fcc8 	bl	80296e4 <HAL_TIM_Encoder_Start>
 8020d54:	4603      	mov	r3, r0
 8020d56:	2b00      	cmp	r3, #0
 8020d58:	bf14      	ite	ne
 8020d5a:	2301      	movne	r3, #1
 8020d5c:	2300      	moveq	r3, #0
 8020d5e:	b2db      	uxtb	r3, r3
 8020d60:	2b00      	cmp	r3, #0
 8020d62:	d004      	beq.n	8020d6e <_ZN7Encoder4InitEv+0x2a>
	{
#ifdef DEBUG_MODE
        g_error_handler_tim8 = true;
 8020d64:	4b0d      	ldr	r3, [pc, #52]	; (8020d9c <_ZN7Encoder4InitEv+0x58>)
 8020d66:	2201      	movs	r2, #1
 8020d68:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

		Error_Handler();
 8020d6a:	f003 f8dd 	bl	8023f28 <Error_Handler>
	}

	if(HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL) != HAL_OK)
 8020d6e:	213c      	movs	r1, #60	; 0x3c
 8020d70:	480b      	ldr	r0, [pc, #44]	; (8020da0 <_ZN7Encoder4InitEv+0x5c>)
 8020d72:	f008 fcb7 	bl	80296e4 <HAL_TIM_Encoder_Start>
 8020d76:	4603      	mov	r3, r0
 8020d78:	2b00      	cmp	r3, #0
 8020d7a:	bf14      	ite	ne
 8020d7c:	2301      	movne	r3, #1
 8020d7e:	2300      	moveq	r3, #0
 8020d80:	b2db      	uxtb	r3, r3
 8020d82:	2b00      	cmp	r3, #0
 8020d84:	d004      	beq.n	8020d90 <_ZN7Encoder4InitEv+0x4c>
	{
#ifdef DEBUG_MODE
        g_error_handler_tim4 = true;
 8020d86:	4b07      	ldr	r3, [pc, #28]	; (8020da4 <_ZN7Encoder4InitEv+0x60>)
 8020d88:	2201      	movs	r2, #1
 8020d8a:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

		Error_Handler();
 8020d8c:	f003 f8cc 	bl	8023f28 <Error_Handler>
	}
}
 8020d90:	bf00      	nop
 8020d92:	3708      	adds	r7, #8
 8020d94:	46bd      	mov	sp, r7
 8020d96:	bd80      	pop	{r7, pc}
 8020d98:	2000063c 	.word	0x2000063c
 8020d9c:	200000c3 	.word	0x200000c3
 8020da0:	2000067c 	.word	0x2000067c
 8020da4:	200000c2 	.word	0x200000c2

08020da8 <_ZN7Encoder6UpdateEv>:

void Encoder::Update()
{
 8020da8:	b590      	push	{r4, r7, lr}
 8020daa:	b087      	sub	sp, #28
 8020dac:	af00      	add	r7, sp, #0
 8020dae:	6078      	str	r0, [r7, #4]
	int16_t count_l = static_cast<int16_t>((TIM8 -> CNT) - START_COUNT);
 8020db0:	4b39      	ldr	r3, [pc, #228]	; (8020e98 <_ZN7Encoder6UpdateEv+0xf0>)
 8020db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020db4:	b29b      	uxth	r3, r3
 8020db6:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8020dba:	3b7f      	subs	r3, #127	; 0x7f
 8020dbc:	b29b      	uxth	r3, r3
 8020dbe:	82fb      	strh	r3, [r7, #22]
	int16_t count_r = static_cast<int16_t>(START_COUNT - (TIM4 -> CNT));
 8020dc0:	4b36      	ldr	r3, [pc, #216]	; (8020e9c <_ZN7Encoder6UpdateEv+0xf4>)
 8020dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020dc4:	b29b      	uxth	r3, r3
 8020dc6:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 8020dca:	337f      	adds	r3, #127	; 0x7f
 8020dcc:	b29b      	uxth	r3, r3
 8020dce:	82bb      	strh	r3, [r7, #20]
	TIM8 -> CNT = START_COUNT;
 8020dd0:	4b31      	ldr	r3, [pc, #196]	; (8020e98 <_ZN7Encoder6UpdateEv+0xf0>)
 8020dd2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020dd6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = START_COUNT;
 8020dd8:	4b30      	ldr	r3, [pc, #192]	; (8020e9c <_ZN7Encoder6UpdateEv+0xf4>)
 8020dda:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020dde:	625a      	str	r2, [r3, #36]	; 0x24
	float distance_l = static_cast<float>(count_l * DISTANCE_PER_COUNT);
 8020de0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020de4:	4618      	mov	r0, r3
 8020de6:	f7ff fa7d 	bl	80202e4 <__aeabi_i2d>
 8020dea:	a329      	add	r3, pc, #164	; (adr r3, 8020e90 <_ZN7Encoder6UpdateEv+0xe8>)
 8020dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020df0:	f7ff fae2 	bl	80203b8 <__aeabi_dmul>
 8020df4:	4603      	mov	r3, r0
 8020df6:	460c      	mov	r4, r1
 8020df8:	4618      	mov	r0, r3
 8020dfa:	4621      	mov	r1, r4
 8020dfc:	f7ff fd76 	bl	80208ec <__aeabi_d2f>
 8020e00:	4603      	mov	r3, r0
 8020e02:	613b      	str	r3, [r7, #16]
	float distance_r = static_cast<float>(count_r * DISTANCE_PER_COUNT);
 8020e04:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8020e08:	4618      	mov	r0, r3
 8020e0a:	f7ff fa6b 	bl	80202e4 <__aeabi_i2d>
 8020e0e:	a320      	add	r3, pc, #128	; (adr r3, 8020e90 <_ZN7Encoder6UpdateEv+0xe8>)
 8020e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e14:	f7ff fad0 	bl	80203b8 <__aeabi_dmul>
 8020e18:	4603      	mov	r3, r0
 8020e1a:	460c      	mov	r4, r1
 8020e1c:	4618      	mov	r0, r3
 8020e1e:	4621      	mov	r1, r4
 8020e20:	f7ff fd64 	bl	80208ec <__aeabi_d2f>
 8020e24:	4603      	mov	r3, r0
 8020e26:	60fb      	str	r3, [r7, #12]
	float distance = (distance_l + distance_r) / 2.0;
 8020e28:	ed97 7a04 	vldr	s14, [r7, #16]
 8020e2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8020e30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8020e34:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8020e38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8020e3c:	edc7 7a02 	vstr	s15, [r7, #8]

	distance_ = distance;
 8020e40:	687b      	ldr	r3, [r7, #4]
 8020e42:	68ba      	ldr	r2, [r7, #8]
 8020e44:	601a      	str	r2, [r3, #0]
	distance_stack_ += distance;
 8020e46:	687b      	ldr	r3, [r7, #4]
 8020e48:	ed93 7a01 	vldr	s14, [r3, #4]
 8020e4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8020e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020e54:	687b      	ldr	r3, [r7, #4]
 8020e56:	edc3 7a01 	vstr	s15, [r3, #4]
	distance_difference_ = distance_r - distance_l;
 8020e5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8020e5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8020e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8020e66:	687b      	ldr	r3, [r7, #4]
 8020e68:	edc3 7a02 	vstr	s15, [r3, #8]

#ifdef DEBUG_MODE
	g_enc_cnt_l = count_l;
 8020e6c:	4a0c      	ldr	r2, [pc, #48]	; (8020ea0 <_ZN7Encoder6UpdateEv+0xf8>)
 8020e6e:	8afb      	ldrh	r3, [r7, #22]
 8020e70:	8013      	strh	r3, [r2, #0]
	g_enc_cnt_r = count_r;
 8020e72:	4a0c      	ldr	r2, [pc, #48]	; (8020ea4 <_ZN7Encoder6UpdateEv+0xfc>)
 8020e74:	8abb      	ldrh	r3, [r7, #20]
 8020e76:	8013      	strh	r3, [r2, #0]
	g_distance_l = distance_l;
 8020e78:	4a0b      	ldr	r2, [pc, #44]	; (8020ea8 <_ZN7Encoder6UpdateEv+0x100>)
 8020e7a:	693b      	ldr	r3, [r7, #16]
 8020e7c:	6013      	str	r3, [r2, #0]
	g_distance_r = distance_r;
 8020e7e:	4a0b      	ldr	r2, [pc, #44]	; (8020eac <_ZN7Encoder6UpdateEv+0x104>)
 8020e80:	68fb      	ldr	r3, [r7, #12]
 8020e82:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8020e84:	bf00      	nop
 8020e86:	371c      	adds	r7, #28
 8020e88:	46bd      	mov	sp, r7
 8020e8a:	bd90      	pop	{r4, r7, pc}
 8020e8c:	f3af 8000 	nop.w
 8020e90:	5d35653d 	.word	0x5d35653d
 8020e94:	3f7d744f 	.word	0x3f7d744f
 8020e98:	40010400 	.word	0x40010400
 8020e9c:	40000800 	.word	0x40000800
 8020ea0:	200002a0 	.word	0x200002a0
 8020ea4:	200002a2 	.word	0x200002a2
 8020ea8:	200002a4 	.word	0x200002a4
 8020eac:	200002a8 	.word	0x200002a8

08020eb0 <_ZN7Encoder18ResetDistanceStackEv>:
	TIM8 -> CNT = START_COUNT;
	TIM4 -> CNT = START_COUNT;
}

void Encoder::ResetDistanceStack()
{
 8020eb0:	b480      	push	{r7}
 8020eb2:	b083      	sub	sp, #12
 8020eb4:	af00      	add	r7, sp, #0
 8020eb6:	6078      	str	r0, [r7, #4]
	distance_stack_ = 0.0;
 8020eb8:	687b      	ldr	r3, [r7, #4]
 8020eba:	f04f 0200 	mov.w	r2, #0
 8020ebe:	605a      	str	r2, [r3, #4]
}
 8020ec0:	bf00      	nop
 8020ec2:	370c      	adds	r7, #12
 8020ec4:	46bd      	mov	sp, r7
 8020ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eca:	4770      	bx	lr

08020ecc <_ZN7Encoder11GetDistanceEv>:

float Encoder::GetDistance()
{
 8020ecc:	b480      	push	{r7}
 8020ece:	b083      	sub	sp, #12
 8020ed0:	af00      	add	r7, sp, #0
 8020ed2:	6078      	str	r0, [r7, #4]
	return distance_;
 8020ed4:	687b      	ldr	r3, [r7, #4]
 8020ed6:	681b      	ldr	r3, [r3, #0]
 8020ed8:	ee07 3a90 	vmov	s15, r3
}
 8020edc:	eeb0 0a67 	vmov.f32	s0, s15
 8020ee0:	370c      	adds	r7, #12
 8020ee2:	46bd      	mov	sp, r7
 8020ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ee8:	4770      	bx	lr

08020eea <_ZN7Encoder16GetDistanceStackEv>:

float Encoder::GetDistanceStack()
{
 8020eea:	b480      	push	{r7}
 8020eec:	b083      	sub	sp, #12
 8020eee:	af00      	add	r7, sp, #0
 8020ef0:	6078      	str	r0, [r7, #4]
	return distance_stack_;
 8020ef2:	687b      	ldr	r3, [r7, #4]
 8020ef4:	685b      	ldr	r3, [r3, #4]
 8020ef6:	ee07 3a90 	vmov	s15, r3
}
 8020efa:	eeb0 0a67 	vmov.f32	s0, s15
 8020efe:	370c      	adds	r7, #12
 8020f00:	46bd      	mov	sp, r7
 8020f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f06:	4770      	bx	lr

08020f08 <_ZN7Encoder15AngularVelocityEv>:

float Encoder::AngularVelocity()
{
 8020f08:	b590      	push	{r4, r7, lr}
 8020f0a:	b083      	sub	sp, #12
 8020f0c:	af00      	add	r7, sp, #0
 8020f0e:	6078      	str	r0, [r7, #4]
	return distance_difference_ / (TIM6_PERIOD * MACHINE_TREAD);
 8020f10:	687b      	ldr	r3, [r7, #4]
 8020f12:	689b      	ldr	r3, [r3, #8]
 8020f14:	4618      	mov	r0, r3
 8020f16:	f7ff f9f7 	bl	8020308 <__aeabi_f2d>
 8020f1a:	a309      	add	r3, pc, #36	; (adr r3, 8020f40 <_ZN7Encoder15AngularVelocityEv+0x38>)
 8020f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f20:	f7ff fb74 	bl	802060c <__aeabi_ddiv>
 8020f24:	4603      	mov	r3, r0
 8020f26:	460c      	mov	r4, r1
 8020f28:	4618      	mov	r0, r3
 8020f2a:	4621      	mov	r1, r4
 8020f2c:	f7ff fcde 	bl	80208ec <__aeabi_d2f>
 8020f30:	4603      	mov	r3, r0
 8020f32:	ee07 3a90 	vmov	s15, r3
 8020f36:	eeb0 0a67 	vmov.f32	s0, s15
 8020f3a:	370c      	adds	r7, #12
 8020f3c:	46bd      	mov	sp, r7
 8020f3e:	bd90      	pop	{r4, r7, pc}
 8020f40:	00000000 	.word	0x00000000
 8020f44:	4063d800 	.word	0x4063d800

08020f48 <_ZN5Flash5ClearEv>:
#include "flash.hpp"
#include "declare_extern.h"
#include <string.h>

bool Flash::Clear()
{
 8020f48:	b580      	push	{r7, lr}
 8020f4a:	b088      	sub	sp, #32
 8020f4c:	af00      	add	r7, sp, #0
 8020f4e:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 8020f50:	f006 fb7c 	bl	802764c <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef erase;

    erase.TypeErase    = FLASH_TYPEERASE_SECTORS; // Erasure range : Sectors
 8020f54:	2300      	movs	r3, #0
 8020f56:	60fb      	str	r3, [r7, #12]
    erase.Sector       = FLASH_SECTOR_1;          // Which sector : 1
 8020f58:	2301      	movs	r3, #1
 8020f5a:	617b      	str	r3, [r7, #20]
    erase.NbSectors    = 4;                       // How many sector : 4 (1,2,3,4)
 8020f5c:	2304      	movs	r3, #4
 8020f5e:	61bb      	str	r3, [r7, #24]
    erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;   // Voltage range : 2.7 ~ 3.6 [V]
 8020f60:	2302      	movs	r3, #2
 8020f62:	61fb      	str	r3, [r7, #28]

    // Success => 0xFFFFFFFF is stored.
    // Fail => Sector number is stored.
    uint32_t failed_sector = 0;
 8020f64:	2300      	movs	r3, #0
 8020f66:	60bb      	str	r3, [r7, #8]

    if(HAL_FLASHEx_Erase(&erase, &failed_sector) != HAL_OK)
 8020f68:	f107 0208 	add.w	r2, r7, #8
 8020f6c:	f107 030c 	add.w	r3, r7, #12
 8020f70:	4611      	mov	r1, r2
 8020f72:	4618      	mov	r0, r3
 8020f74:	f006 fcca 	bl	802790c <HAL_FLASHEx_Erase>
 8020f78:	4603      	mov	r3, r0
 8020f7a:	2b00      	cmp	r3, #0
 8020f7c:	bf14      	ite	ne
 8020f7e:	2301      	movne	r3, #1
 8020f80:	2300      	moveq	r3, #0
 8020f82:	b2db      	uxtb	r3, r3
 8020f84:	2b00      	cmp	r3, #0
 8020f86:	d004      	beq.n	8020f92 <_ZN5Flash5ClearEv+0x4a>
    {
#ifdef DEBUG_MODE
        g_erase_failed_sector = failed_sector;
 8020f88:	68bb      	ldr	r3, [r7, #8]
 8020f8a:	4a08      	ldr	r2, [pc, #32]	; (8020fac <_ZN5Flash5ClearEv+0x64>)
 8020f8c:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

        return false;
 8020f8e:	2300      	movs	r3, #0
 8020f90:	e008      	b.n	8020fa4 <_ZN5Flash5ClearEv+0x5c>
    }

    HAL_FLASH_Lock();
 8020f92:	f006 fb7d 	bl	8027690 <HAL_FLASH_Lock>

    return failed_sector == 0xFFFFFFFF;
 8020f96:	68bb      	ldr	r3, [r7, #8]
 8020f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020f9c:	bf0c      	ite	eq
 8020f9e:	2301      	moveq	r3, #1
 8020fa0:	2300      	movne	r3, #0
 8020fa2:	b2db      	uxtb	r3, r3
}
 8020fa4:	4618      	mov	r0, r3
 8020fa6:	3720      	adds	r7, #32
 8020fa8:	46bd      	mov	sp, r7
 8020faa:	bd80      	pop	{r7, pc}
 8020fac:	200002d8 	.word	0x200002d8

08020fb0 <_ZN5Flash10StoreUint8EmPhm>:

bool Flash::StoreUint8(uint32_t address, uint8_t *data, uint32_t number)
{
 8020fb0:	b590      	push	{r4, r7, lr}
 8020fb2:	b087      	sub	sp, #28
 8020fb4:	af00      	add	r7, sp, #0
 8020fb6:	60f8      	str	r0, [r7, #12]
 8020fb8:	60b9      	str	r1, [r7, #8]
 8020fba:	607a      	str	r2, [r7, #4]
 8020fbc:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8020fbe:	f006 fb45 	bl	802764c <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 8020fc2:	2300      	movs	r3, #0
 8020fc4:	613b      	str	r3, [r7, #16]
 8020fc6:	693a      	ldr	r2, [r7, #16]
 8020fc8:	683b      	ldr	r3, [r7, #0]
 8020fca:	429a      	cmp	r2, r3
 8020fcc:	d218      	bcs.n	8021000 <_ZN5Flash10StoreUint8EmPhm+0x50>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address++, *data++);
 8020fce:	68b9      	ldr	r1, [r7, #8]
 8020fd0:	1c4b      	adds	r3, r1, #1
 8020fd2:	60bb      	str	r3, [r7, #8]
 8020fd4:	687b      	ldr	r3, [r7, #4]
 8020fd6:	1c5a      	adds	r2, r3, #1
 8020fd8:	607a      	str	r2, [r7, #4]
 8020fda:	781b      	ldrb	r3, [r3, #0]
 8020fdc:	b2db      	uxtb	r3, r3
 8020fde:	f04f 0400 	mov.w	r4, #0
 8020fe2:	461a      	mov	r2, r3
 8020fe4:	4623      	mov	r3, r4
 8020fe6:	2000      	movs	r0, #0
 8020fe8:	f006 fadc 	bl	80275a4 <HAL_FLASH_Program>
 8020fec:	4603      	mov	r3, r0
 8020fee:	75fb      	strb	r3, [r7, #23]
        if(result != HAL_OK) break;
 8020ff0:	7dfb      	ldrb	r3, [r7, #23]
 8020ff2:	2b00      	cmp	r3, #0
 8020ff4:	d103      	bne.n	8020ffe <_ZN5Flash10StoreUint8EmPhm+0x4e>
    for(uint32_t i = 0; i < number; i++)
 8020ff6:	693b      	ldr	r3, [r7, #16]
 8020ff8:	3301      	adds	r3, #1
 8020ffa:	613b      	str	r3, [r7, #16]
 8020ffc:	e7e3      	b.n	8020fc6 <_ZN5Flash10StoreUint8EmPhm+0x16>
        if(result != HAL_OK) break;
 8020ffe:	bf00      	nop
    }

    HAL_FLASH_Lock();
 8021000:	f006 fb46 	bl	8027690 <HAL_FLASH_Lock>

    return result == HAL_OK;
 8021004:	7dfb      	ldrb	r3, [r7, #23]
 8021006:	2b00      	cmp	r3, #0
 8021008:	bf0c      	ite	eq
 802100a:	2301      	moveq	r3, #1
 802100c:	2300      	movne	r3, #0
 802100e:	b2db      	uxtb	r3, r3
}
 8021010:	4618      	mov	r0, r3
 8021012:	371c      	adds	r7, #28
 8021014:	46bd      	mov	sp, r7
 8021016:	bd90      	pop	{r4, r7, pc}

08021018 <_ZN5Flash11StoreUint16EmPtm>:

bool Flash::StoreUint16(uint32_t address, uint16_t *data, uint32_t number)
{
 8021018:	b590      	push	{r4, r7, lr}
 802101a:	b087      	sub	sp, #28
 802101c:	af00      	add	r7, sp, #0
 802101e:	60f8      	str	r0, [r7, #12]
 8021020:	60b9      	str	r1, [r7, #8]
 8021022:	607a      	str	r2, [r7, #4]
 8021024:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8021026:	f006 fb11 	bl	802764c <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 802102a:	2300      	movs	r3, #0
 802102c:	613b      	str	r3, [r7, #16]
 802102e:	693a      	ldr	r2, [r7, #16]
 8021030:	683b      	ldr	r3, [r7, #0]
 8021032:	429a      	cmp	r2, r3
 8021034:	d219      	bcs.n	802106a <_ZN5Flash11StoreUint16EmPtm+0x52>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, *data++);
 8021036:	687b      	ldr	r3, [r7, #4]
 8021038:	1c9a      	adds	r2, r3, #2
 802103a:	607a      	str	r2, [r7, #4]
 802103c:	881b      	ldrh	r3, [r3, #0]
 802103e:	b29b      	uxth	r3, r3
 8021040:	f04f 0400 	mov.w	r4, #0
 8021044:	461a      	mov	r2, r3
 8021046:	4623      	mov	r3, r4
 8021048:	68b9      	ldr	r1, [r7, #8]
 802104a:	2001      	movs	r0, #1
 802104c:	f006 faaa 	bl	80275a4 <HAL_FLASH_Program>
 8021050:	4603      	mov	r3, r0
 8021052:	75fb      	strb	r3, [r7, #23]
        address += 2;
 8021054:	68bb      	ldr	r3, [r7, #8]
 8021056:	3302      	adds	r3, #2
 8021058:	60bb      	str	r3, [r7, #8]
        if(result != HAL_OK) break;
 802105a:	7dfb      	ldrb	r3, [r7, #23]
 802105c:	2b00      	cmp	r3, #0
 802105e:	d103      	bne.n	8021068 <_ZN5Flash11StoreUint16EmPtm+0x50>
    for(uint32_t i = 0; i < number; i++)
 8021060:	693b      	ldr	r3, [r7, #16]
 8021062:	3301      	adds	r3, #1
 8021064:	613b      	str	r3, [r7, #16]
 8021066:	e7e2      	b.n	802102e <_ZN5Flash11StoreUint16EmPtm+0x16>
        if(result != HAL_OK) break;
 8021068:	bf00      	nop
    }

    HAL_FLASH_Lock();
 802106a:	f006 fb11 	bl	8027690 <HAL_FLASH_Lock>

    return result == HAL_OK;
 802106e:	7dfb      	ldrb	r3, [r7, #23]
 8021070:	2b00      	cmp	r3, #0
 8021072:	bf0c      	ite	eq
 8021074:	2301      	moveq	r3, #1
 8021076:	2300      	movne	r3, #0
 8021078:	b2db      	uxtb	r3, r3
}
 802107a:	4618      	mov	r0, r3
 802107c:	371c      	adds	r7, #28
 802107e:	46bd      	mov	sp, r7
 8021080:	bd90      	pop	{r4, r7, pc}

08021082 <_ZN5Flash10StoreFloatEmPfm>:

    return result == HAL_OK;
}

bool Flash::StoreFloat(uint32_t address, float *data, uint32_t number)
{
 8021082:	b590      	push	{r4, r7, lr}
 8021084:	b087      	sub	sp, #28
 8021086:	af00      	add	r7, sp, #0
 8021088:	60f8      	str	r0, [r7, #12]
 802108a:	60b9      	str	r1, [r7, #8]
 802108c:	607a      	str	r2, [r7, #4]
 802108e:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8021090:	f006 fadc 	bl	802764c <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 8021094:	2300      	movs	r3, #0
 8021096:	613b      	str	r3, [r7, #16]
 8021098:	693a      	ldr	r2, [r7, #16]
 802109a:	683b      	ldr	r3, [r7, #0]
 802109c:	429a      	cmp	r2, r3
 802109e:	d21b      	bcs.n	80210d8 <_ZN5Flash10StoreFloatEmPfm+0x56>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, *data++);
 80210a0:	687b      	ldr	r3, [r7, #4]
 80210a2:	1d1a      	adds	r2, r3, #4
 80210a4:	607a      	str	r2, [r7, #4]
 80210a6:	681b      	ldr	r3, [r3, #0]
 80210a8:	4618      	mov	r0, r3
 80210aa:	f7ff fc87 	bl	80209bc <__aeabi_f2ulz>
 80210ae:	4603      	mov	r3, r0
 80210b0:	460c      	mov	r4, r1
 80210b2:	461a      	mov	r2, r3
 80210b4:	4623      	mov	r3, r4
 80210b6:	68b9      	ldr	r1, [r7, #8]
 80210b8:	2002      	movs	r0, #2
 80210ba:	f006 fa73 	bl	80275a4 <HAL_FLASH_Program>
 80210be:	4603      	mov	r3, r0
 80210c0:	75fb      	strb	r3, [r7, #23]
        address += 4;
 80210c2:	68bb      	ldr	r3, [r7, #8]
 80210c4:	3304      	adds	r3, #4
 80210c6:	60bb      	str	r3, [r7, #8]
        if(result != HAL_OK) break;
 80210c8:	7dfb      	ldrb	r3, [r7, #23]
 80210ca:	2b00      	cmp	r3, #0
 80210cc:	d103      	bne.n	80210d6 <_ZN5Flash10StoreFloatEmPfm+0x54>
    for(uint32_t i = 0; i < number; i++)
 80210ce:	693b      	ldr	r3, [r7, #16]
 80210d0:	3301      	adds	r3, #1
 80210d2:	613b      	str	r3, [r7, #16]
 80210d4:	e7e0      	b.n	8021098 <_ZN5Flash10StoreFloatEmPfm+0x16>
        if(result != HAL_OK) break;
 80210d6:	bf00      	nop
    }

    HAL_FLASH_Lock();
 80210d8:	f006 fada 	bl	8027690 <HAL_FLASH_Lock>

    return result == HAL_OK;
 80210dc:	7dfb      	ldrb	r3, [r7, #23]
 80210de:	2b00      	cmp	r3, #0
 80210e0:	bf0c      	ite	eq
 80210e2:	2301      	moveq	r3, #1
 80210e4:	2300      	movne	r3, #0
 80210e6:	b2db      	uxtb	r3, r3
}
 80210e8:	4618      	mov	r0, r3
 80210ea:	371c      	adds	r7, #28
 80210ec:	46bd      	mov	sp, r7
 80210ee:	bd90      	pop	{r4, r7, pc}

080210f0 <_ZN5Flash14CheckBlankByteEmm>:
{
    memcpy(data, reinterpret_cast<uint32_t*>(address), size);
}

bool Flash::CheckBlankByte(uint32_t address, uint32_t number)
{
 80210f0:	b5b0      	push	{r4, r5, r7, lr}
 80210f2:	b088      	sub	sp, #32
 80210f4:	af00      	add	r7, sp, #0
 80210f6:	60f8      	str	r0, [r7, #12]
 80210f8:	60b9      	str	r1, [r7, #8]
 80210fa:	607a      	str	r2, [r7, #4]

    memcpy(byte, reinterpret_cast<uint32_t*>(address), number);

    for(uint32_t i = 0; i < number; i++) if(byte[i] != 0xFF) return false;

    return true;
 80210fc:	466b      	mov	r3, sp
 80210fe:	461d      	mov	r5, r3
    uint8_t byte[number];
 8021100:	687b      	ldr	r3, [r7, #4]
 8021102:	1e58      	subs	r0, r3, #1
 8021104:	61b8      	str	r0, [r7, #24]
 8021106:	4603      	mov	r3, r0
 8021108:	3301      	adds	r3, #1
 802110a:	4619      	mov	r1, r3
 802110c:	f04f 0200 	mov.w	r2, #0
 8021110:	f04f 0300 	mov.w	r3, #0
 8021114:	f04f 0400 	mov.w	r4, #0
 8021118:	00d4      	lsls	r4, r2, #3
 802111a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 802111e:	00cb      	lsls	r3, r1, #3
 8021120:	4603      	mov	r3, r0
 8021122:	3301      	adds	r3, #1
 8021124:	4619      	mov	r1, r3
 8021126:	f04f 0200 	mov.w	r2, #0
 802112a:	f04f 0300 	mov.w	r3, #0
 802112e:	f04f 0400 	mov.w	r4, #0
 8021132:	00d4      	lsls	r4, r2, #3
 8021134:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8021138:	00cb      	lsls	r3, r1, #3
 802113a:	4603      	mov	r3, r0
 802113c:	3301      	adds	r3, #1
 802113e:	3307      	adds	r3, #7
 8021140:	08db      	lsrs	r3, r3, #3
 8021142:	00db      	lsls	r3, r3, #3
 8021144:	ebad 0d03 	sub.w	sp, sp, r3
 8021148:	466b      	mov	r3, sp
 802114a:	3300      	adds	r3, #0
 802114c:	617b      	str	r3, [r7, #20]
    memcpy(byte, reinterpret_cast<uint32_t*>(address), number);
 802114e:	697b      	ldr	r3, [r7, #20]
 8021150:	68b9      	ldr	r1, [r7, #8]
 8021152:	687a      	ldr	r2, [r7, #4]
 8021154:	4618      	mov	r0, r3
 8021156:	f009 f9d1 	bl	802a4fc <memcpy>
    for(uint32_t i = 0; i < number; i++) if(byte[i] != 0xFF) return false;
 802115a:	2300      	movs	r3, #0
 802115c:	61fb      	str	r3, [r7, #28]
 802115e:	69fa      	ldr	r2, [r7, #28]
 8021160:	687b      	ldr	r3, [r7, #4]
 8021162:	429a      	cmp	r2, r3
 8021164:	d20b      	bcs.n	802117e <_ZN5Flash14CheckBlankByteEmm+0x8e>
 8021166:	697a      	ldr	r2, [r7, #20]
 8021168:	69fb      	ldr	r3, [r7, #28]
 802116a:	4413      	add	r3, r2
 802116c:	781b      	ldrb	r3, [r3, #0]
 802116e:	2bff      	cmp	r3, #255	; 0xff
 8021170:	d001      	beq.n	8021176 <_ZN5Flash14CheckBlankByteEmm+0x86>
 8021172:	2300      	movs	r3, #0
 8021174:	e004      	b.n	8021180 <_ZN5Flash14CheckBlankByteEmm+0x90>
 8021176:	69fb      	ldr	r3, [r7, #28]
 8021178:	3301      	adds	r3, #1
 802117a:	61fb      	str	r3, [r7, #28]
 802117c:	e7ef      	b.n	802115e <_ZN5Flash14CheckBlankByteEmm+0x6e>
    return true;
 802117e:	2301      	movs	r3, #1
 8021180:	46ad      	mov	sp, r5
}
 8021182:	4618      	mov	r0, r3
 8021184:	3720      	adds	r7, #32
 8021186:	46bd      	mov	sp, r7
 8021188:	bdb0      	pop	{r4, r5, r7, pc}

0802118a <_ZN5Flash18CheckBlankHalfwordEmm>:

bool Flash::CheckBlankHalfword(uint32_t address, uint32_t number)
{
 802118a:	b5b0      	push	{r4, r5, r7, lr}
 802118c:	b088      	sub	sp, #32
 802118e:	af00      	add	r7, sp, #0
 8021190:	60f8      	str	r0, [r7, #12]
 8021192:	60b9      	str	r1, [r7, #8]
 8021194:	607a      	str	r2, [r7, #4]

    memcpy(half, reinterpret_cast<uint32_t*>(address), number*2);

    for(uint32_t i = 0; i < number; i++) if(half[i] != 0xFFFF) return false;

    return true;
 8021196:	466b      	mov	r3, sp
 8021198:	461d      	mov	r5, r3
    uint16_t half[number];
 802119a:	687b      	ldr	r3, [r7, #4]
 802119c:	1e58      	subs	r0, r3, #1
 802119e:	61b8      	str	r0, [r7, #24]
 80211a0:	4603      	mov	r3, r0
 80211a2:	3301      	adds	r3, #1
 80211a4:	4619      	mov	r1, r3
 80211a6:	f04f 0200 	mov.w	r2, #0
 80211aa:	f04f 0300 	mov.w	r3, #0
 80211ae:	f04f 0400 	mov.w	r4, #0
 80211b2:	0114      	lsls	r4, r2, #4
 80211b4:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80211b8:	010b      	lsls	r3, r1, #4
 80211ba:	4603      	mov	r3, r0
 80211bc:	3301      	adds	r3, #1
 80211be:	4619      	mov	r1, r3
 80211c0:	f04f 0200 	mov.w	r2, #0
 80211c4:	f04f 0300 	mov.w	r3, #0
 80211c8:	f04f 0400 	mov.w	r4, #0
 80211cc:	0114      	lsls	r4, r2, #4
 80211ce:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80211d2:	010b      	lsls	r3, r1, #4
 80211d4:	4603      	mov	r3, r0
 80211d6:	3301      	adds	r3, #1
 80211d8:	005b      	lsls	r3, r3, #1
 80211da:	3301      	adds	r3, #1
 80211dc:	3307      	adds	r3, #7
 80211de:	08db      	lsrs	r3, r3, #3
 80211e0:	00db      	lsls	r3, r3, #3
 80211e2:	ebad 0d03 	sub.w	sp, sp, r3
 80211e6:	466b      	mov	r3, sp
 80211e8:	3301      	adds	r3, #1
 80211ea:	085b      	lsrs	r3, r3, #1
 80211ec:	005b      	lsls	r3, r3, #1
 80211ee:	617b      	str	r3, [r7, #20]
    memcpy(half, reinterpret_cast<uint32_t*>(address), number*2);
 80211f0:	6978      	ldr	r0, [r7, #20]
 80211f2:	68b9      	ldr	r1, [r7, #8]
 80211f4:	687b      	ldr	r3, [r7, #4]
 80211f6:	005b      	lsls	r3, r3, #1
 80211f8:	461a      	mov	r2, r3
 80211fa:	f009 f97f 	bl	802a4fc <memcpy>
    for(uint32_t i = 0; i < number; i++) if(half[i] != 0xFFFF) return false;
 80211fe:	2300      	movs	r3, #0
 8021200:	61fb      	str	r3, [r7, #28]
 8021202:	69fa      	ldr	r2, [r7, #28]
 8021204:	687b      	ldr	r3, [r7, #4]
 8021206:	429a      	cmp	r2, r3
 8021208:	d20d      	bcs.n	8021226 <_ZN5Flash18CheckBlankHalfwordEmm+0x9c>
 802120a:	697b      	ldr	r3, [r7, #20]
 802120c:	69fa      	ldr	r2, [r7, #28]
 802120e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8021212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021216:	4293      	cmp	r3, r2
 8021218:	d001      	beq.n	802121e <_ZN5Flash18CheckBlankHalfwordEmm+0x94>
 802121a:	2300      	movs	r3, #0
 802121c:	e004      	b.n	8021228 <_ZN5Flash18CheckBlankHalfwordEmm+0x9e>
 802121e:	69fb      	ldr	r3, [r7, #28]
 8021220:	3301      	adds	r3, #1
 8021222:	61fb      	str	r3, [r7, #28]
 8021224:	e7ed      	b.n	8021202 <_ZN5Flash18CheckBlankHalfwordEmm+0x78>
    return true;
 8021226:	2301      	movs	r3, #1
 8021228:	46ad      	mov	sp, r5
}
 802122a:	4618      	mov	r0, r3
 802122c:	3720      	adds	r7, #32
 802122e:	46bd      	mov	sp, r7
 8021230:	bdb0      	pop	{r4, r5, r7, pc}

08021232 <_ZN5Flash14CheckBlankWordEmm>:

bool Flash::CheckBlankWord(uint32_t address, uint32_t number)
{
 8021232:	b5b0      	push	{r4, r5, r7, lr}
 8021234:	b088      	sub	sp, #32
 8021236:	af00      	add	r7, sp, #0
 8021238:	60f8      	str	r0, [r7, #12]
 802123a:	60b9      	str	r1, [r7, #8]
 802123c:	607a      	str	r2, [r7, #4]

    memcpy(word, reinterpret_cast<uint32_t*>(address), number*4);

    for(uint32_t i = 0; i < number; i++) if(word[i] != 0xFFFFFFFF) return false;

    return true;
 802123e:	466b      	mov	r3, sp
 8021240:	461d      	mov	r5, r3
    uint32_t word[number];
 8021242:	687b      	ldr	r3, [r7, #4]
 8021244:	1e58      	subs	r0, r3, #1
 8021246:	61b8      	str	r0, [r7, #24]
 8021248:	4603      	mov	r3, r0
 802124a:	3301      	adds	r3, #1
 802124c:	4619      	mov	r1, r3
 802124e:	f04f 0200 	mov.w	r2, #0
 8021252:	f04f 0300 	mov.w	r3, #0
 8021256:	f04f 0400 	mov.w	r4, #0
 802125a:	0154      	lsls	r4, r2, #5
 802125c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8021260:	014b      	lsls	r3, r1, #5
 8021262:	4603      	mov	r3, r0
 8021264:	3301      	adds	r3, #1
 8021266:	4619      	mov	r1, r3
 8021268:	f04f 0200 	mov.w	r2, #0
 802126c:	f04f 0300 	mov.w	r3, #0
 8021270:	f04f 0400 	mov.w	r4, #0
 8021274:	0154      	lsls	r4, r2, #5
 8021276:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 802127a:	014b      	lsls	r3, r1, #5
 802127c:	4603      	mov	r3, r0
 802127e:	3301      	adds	r3, #1
 8021280:	009b      	lsls	r3, r3, #2
 8021282:	3303      	adds	r3, #3
 8021284:	3307      	adds	r3, #7
 8021286:	08db      	lsrs	r3, r3, #3
 8021288:	00db      	lsls	r3, r3, #3
 802128a:	ebad 0d03 	sub.w	sp, sp, r3
 802128e:	466b      	mov	r3, sp
 8021290:	3303      	adds	r3, #3
 8021292:	089b      	lsrs	r3, r3, #2
 8021294:	009b      	lsls	r3, r3, #2
 8021296:	617b      	str	r3, [r7, #20]
    memcpy(word, reinterpret_cast<uint32_t*>(address), number*4);
 8021298:	6978      	ldr	r0, [r7, #20]
 802129a:	68b9      	ldr	r1, [r7, #8]
 802129c:	687b      	ldr	r3, [r7, #4]
 802129e:	009b      	lsls	r3, r3, #2
 80212a0:	461a      	mov	r2, r3
 80212a2:	f009 f92b 	bl	802a4fc <memcpy>
    for(uint32_t i = 0; i < number; i++) if(word[i] != 0xFFFFFFFF) return false;
 80212a6:	2300      	movs	r3, #0
 80212a8:	61fb      	str	r3, [r7, #28]
 80212aa:	69fa      	ldr	r2, [r7, #28]
 80212ac:	687b      	ldr	r3, [r7, #4]
 80212ae:	429a      	cmp	r2, r3
 80212b0:	d20c      	bcs.n	80212cc <_ZN5Flash14CheckBlankWordEmm+0x9a>
 80212b2:	697b      	ldr	r3, [r7, #20]
 80212b4:	69fa      	ldr	r2, [r7, #28]
 80212b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80212ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80212be:	d001      	beq.n	80212c4 <_ZN5Flash14CheckBlankWordEmm+0x92>
 80212c0:	2300      	movs	r3, #0
 80212c2:	e004      	b.n	80212ce <_ZN5Flash14CheckBlankWordEmm+0x9c>
 80212c4:	69fb      	ldr	r3, [r7, #28]
 80212c6:	3301      	adds	r3, #1
 80212c8:	61fb      	str	r3, [r7, #28]
 80212ca:	e7ee      	b.n	80212aa <_ZN5Flash14CheckBlankWordEmm+0x78>
    return true;
 80212cc:	2301      	movs	r3, #1
 80212ce:	46ad      	mov	sp, r5
 80212d0:	4618      	mov	r0, r3
 80212d2:	3720      	adds	r7, #32
 80212d4:	46bd      	mov	sp, r7
 80212d6:	bdb0      	pop	{r4, r5, r7, pc}

080212d8 <_ZN8Iim42652C1Ev>:
#include "iim_42652.hpp"
#include "declare_extern.h"

Iim42652::Iim42652() : degree_stack_z_(0) {}
 80212d8:	b490      	push	{r4, r7}
 80212da:	b082      	sub	sp, #8
 80212dc:	af00      	add	r7, sp, #0
 80212de:	6078      	str	r0, [r7, #4]
 80212e0:	687a      	ldr	r2, [r7, #4]
 80212e2:	f04f 0300 	mov.w	r3, #0
 80212e6:	f04f 0400 	mov.w	r4, #0
 80212ea:	e9c2 3400 	strd	r3, r4, [r2]
 80212ee:	687b      	ldr	r3, [r7, #4]
 80212f0:	4618      	mov	r0, r3
 80212f2:	3708      	adds	r7, #8
 80212f4:	46bd      	mov	sp, r7
 80212f6:	bc90      	pop	{r4, r7}
 80212f8:	4770      	bx	lr
	...

080212fc <_ZN8Iim426524InitEv>:

uint8_t Iim42652::Init()
{
 80212fc:	b580      	push	{r7, lr}
 80212fe:	b084      	sub	sp, #16
 8021300:	af00      	add	r7, sp, #0
 8021302:	6078      	str	r0, [r7, #4]
    /* bank_select */
    Write(REG_BANK_SEL_ADD, REG_BANK_SEL_RES, 'L');
 8021304:	234c      	movs	r3, #76	; 0x4c
 8021306:	2200      	movs	r2, #0
 8021308:	2176      	movs	r1, #118	; 0x76
 802130a:	6878      	ldr	r0, [r7, #4]
 802130c:	f000 f908 	bl	8021520 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 8021310:	2064      	movs	r0, #100	; 0x64
 8021312:	f005 f8b1 	bl	8026478 <HAL_Delay>
    Write(REG_BANK_SEL_ADD, REG_BANK_SEL_RES, 'R');
 8021316:	2352      	movs	r3, #82	; 0x52
 8021318:	2200      	movs	r2, #0
 802131a:	2176      	movs	r1, #118	; 0x76
 802131c:	6878      	ldr	r0, [r7, #4]
 802131e:	f000 f8ff 	bl	8021520 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 8021322:	2064      	movs	r0, #100	; 0x64
 8021324:	f005 f8a8 	bl	8026478 <HAL_Delay>
    /* power_off */
    Write(PWR_MGMT0_ADD, PWR_MGMT0_RES, 'L');
 8021328:	234c      	movs	r3, #76	; 0x4c
 802132a:	2200      	movs	r2, #0
 802132c:	214e      	movs	r1, #78	; 0x4e
 802132e:	6878      	ldr	r0, [r7, #4]
 8021330:	f000 f8f6 	bl	8021520 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 8021334:	2064      	movs	r0, #100	; 0x64
 8021336:	f005 f89f 	bl	8026478 <HAL_Delay>
    Write(PWR_MGMT0_ADD, PWR_MGMT0_RES, 'R');
 802133a:	2352      	movs	r3, #82	; 0x52
 802133c:	2200      	movs	r2, #0
 802133e:	214e      	movs	r1, #78	; 0x4e
 8021340:	6878      	ldr	r0, [r7, #4]
 8021342:	f000 f8ed 	bl	8021520 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 8021346:	2064      	movs	r0, #100	; 0x64
 8021348:	f005 f896 	bl	8026478 <HAL_Delay>

    uint8_t who_l  = Read(WHO_AM_I_ADD, 'L');
 802134c:	224c      	movs	r2, #76	; 0x4c
 802134e:	2175      	movs	r1, #117	; 0x75
 8021350:	6878      	ldr	r0, [r7, #4]
 8021352:	f000 f897 	bl	8021484 <_ZN8Iim426524ReadEhc>
 8021356:	4603      	mov	r3, r0
 8021358:	73fb      	strb	r3, [r7, #15]
    uint8_t who_r  = Read(WHO_AM_I_ADD, 'R');
 802135a:	2252      	movs	r2, #82	; 0x52
 802135c:	2175      	movs	r1, #117	; 0x75
 802135e:	6878      	ldr	r0, [r7, #4]
 8021360:	f000 f890 	bl	8021484 <_ZN8Iim426524ReadEhc>
 8021364:	4603      	mov	r3, r0
 8021366:	73bb      	strb	r3, [r7, #14]
    uint8_t bank_l = Read(REG_BANK_SEL_ADD, 'L');
 8021368:	224c      	movs	r2, #76	; 0x4c
 802136a:	2176      	movs	r1, #118	; 0x76
 802136c:	6878      	ldr	r0, [r7, #4]
 802136e:	f000 f889 	bl	8021484 <_ZN8Iim426524ReadEhc>
 8021372:	4603      	mov	r3, r0
 8021374:	737b      	strb	r3, [r7, #13]
    uint8_t bank_r = Read(REG_BANK_SEL_ADD, 'R');
 8021376:	2252      	movs	r2, #82	; 0x52
 8021378:	2176      	movs	r1, #118	; 0x76
 802137a:	6878      	ldr	r0, [r7, #4]
 802137c:	f000 f882 	bl	8021484 <_ZN8Iim426524ReadEhc>
 8021380:	4603      	mov	r3, r0
 8021382:	733b      	strb	r3, [r7, #12]
    uint8_t pwr_l  = Read(PWR_MGMT0_ADD, 'L');
 8021384:	224c      	movs	r2, #76	; 0x4c
 8021386:	214e      	movs	r1, #78	; 0x4e
 8021388:	6878      	ldr	r0, [r7, #4]
 802138a:	f000 f87b 	bl	8021484 <_ZN8Iim426524ReadEhc>
 802138e:	4603      	mov	r3, r0
 8021390:	72fb      	strb	r3, [r7, #11]
    uint8_t pwr_r  = Read(PWR_MGMT0_ADD, 'R');
 8021392:	2252      	movs	r2, #82	; 0x52
 8021394:	214e      	movs	r1, #78	; 0x4e
 8021396:	6878      	ldr	r0, [r7, #4]
 8021398:	f000 f874 	bl	8021484 <_ZN8Iim426524ReadEhc>
 802139c:	4603      	mov	r3, r0
 802139e:	72bb      	strb	r3, [r7, #10]

#ifdef DEBUG_MODE
    g_imu_who_l  = who_l;  g_imu_who_r  = who_r;
 80213a0:	4a32      	ldr	r2, [pc, #200]	; (802146c <_ZN8Iim426524InitEv+0x170>)
 80213a2:	7bfb      	ldrb	r3, [r7, #15]
 80213a4:	7013      	strb	r3, [r2, #0]
 80213a6:	4a32      	ldr	r2, [pc, #200]	; (8021470 <_ZN8Iim426524InitEv+0x174>)
 80213a8:	7bbb      	ldrb	r3, [r7, #14]
 80213aa:	7013      	strb	r3, [r2, #0]
    g_imu_bank_l = bank_l; g_imu_bank_r = bank_r;
 80213ac:	4a31      	ldr	r2, [pc, #196]	; (8021474 <_ZN8Iim426524InitEv+0x178>)
 80213ae:	7b7b      	ldrb	r3, [r7, #13]
 80213b0:	7013      	strb	r3, [r2, #0]
 80213b2:	4a31      	ldr	r2, [pc, #196]	; (8021478 <_ZN8Iim426524InitEv+0x17c>)
 80213b4:	7b3b      	ldrb	r3, [r7, #12]
 80213b6:	7013      	strb	r3, [r2, #0]
    g_imu_pwr_l  = pwr_l;  g_imu_pwr_r  = pwr_r;
 80213b8:	4a30      	ldr	r2, [pc, #192]	; (802147c <_ZN8Iim426524InitEv+0x180>)
 80213ba:	7afb      	ldrb	r3, [r7, #11]
 80213bc:	7013      	strb	r3, [r2, #0]
 80213be:	4a30      	ldr	r2, [pc, #192]	; (8021480 <_ZN8Iim426524InitEv+0x184>)
 80213c0:	7abb      	ldrb	r3, [r7, #10]
 80213c2:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(who_l != WHO_AM_I_RES)      return 0x01;
 80213c4:	7bfb      	ldrb	r3, [r7, #15]
 80213c6:	2b6f      	cmp	r3, #111	; 0x6f
 80213c8:	d001      	beq.n	80213ce <_ZN8Iim426524InitEv+0xd2>
 80213ca:	2301      	movs	r3, #1
 80213cc:	e049      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>
    if(who_r != WHO_AM_I_RES)      return 0x02;
 80213ce:	7bbb      	ldrb	r3, [r7, #14]
 80213d0:	2b6f      	cmp	r3, #111	; 0x6f
 80213d2:	d001      	beq.n	80213d8 <_ZN8Iim426524InitEv+0xdc>
 80213d4:	2302      	movs	r3, #2
 80213d6:	e044      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>
    if(bank_l != REG_BANK_SEL_RES) return 0x03;
 80213d8:	7b7b      	ldrb	r3, [r7, #13]
 80213da:	2b00      	cmp	r3, #0
 80213dc:	d001      	beq.n	80213e2 <_ZN8Iim426524InitEv+0xe6>
 80213de:	2303      	movs	r3, #3
 80213e0:	e03f      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>
    if(bank_r != REG_BANK_SEL_RES) return 0x04;
 80213e2:	7b3b      	ldrb	r3, [r7, #12]
 80213e4:	2b00      	cmp	r3, #0
 80213e6:	d001      	beq.n	80213ec <_ZN8Iim426524InitEv+0xf0>
 80213e8:	2304      	movs	r3, #4
 80213ea:	e03a      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>
    if(pwr_l != PWR_MGMT0_RES)     return 0x05;
 80213ec:	7afb      	ldrb	r3, [r7, #11]
 80213ee:	2b00      	cmp	r3, #0
 80213f0:	d001      	beq.n	80213f6 <_ZN8Iim426524InitEv+0xfa>
 80213f2:	2305      	movs	r3, #5
 80213f4:	e035      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>
    if(pwr_r != PWR_MGMT0_RES)     return 0x06;
 80213f6:	7abb      	ldrb	r3, [r7, #10]
 80213f8:	2b00      	cmp	r3, #0
 80213fa:	d001      	beq.n	8021400 <_ZN8Iim426524InitEv+0x104>
 80213fc:	2306      	movs	r3, #6
 80213fe:	e030      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>

    /* power_on */
    Write(PWR_MGMT0_ADD, PWR_MGMT0_ON, 'L');
 8021400:	234c      	movs	r3, #76	; 0x4c
 8021402:	220f      	movs	r2, #15
 8021404:	214e      	movs	r1, #78	; 0x4e
 8021406:	6878      	ldr	r0, [r7, #4]
 8021408:	f000 f88a 	bl	8021520 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 802140c:	2064      	movs	r0, #100	; 0x64
 802140e:	f005 f833 	bl	8026478 <HAL_Delay>
    Write(PWR_MGMT0_ADD, PWR_MGMT0_ON, 'R');
 8021412:	2352      	movs	r3, #82	; 0x52
 8021414:	220f      	movs	r2, #15
 8021416:	214e      	movs	r1, #78	; 0x4e
 8021418:	6878      	ldr	r0, [r7, #4]
 802141a:	f000 f881 	bl	8021520 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 802141e:	2064      	movs	r0, #100	; 0x64
 8021420:	f005 f82a 	bl	8026478 <HAL_Delay>
    pwr_l = Read(PWR_MGMT0_ADD, 'L');
 8021424:	224c      	movs	r2, #76	; 0x4c
 8021426:	214e      	movs	r1, #78	; 0x4e
 8021428:	6878      	ldr	r0, [r7, #4]
 802142a:	f000 f82b 	bl	8021484 <_ZN8Iim426524ReadEhc>
 802142e:	4603      	mov	r3, r0
 8021430:	72fb      	strb	r3, [r7, #11]
    pwr_r = Read(PWR_MGMT0_ADD, 'R');
 8021432:	2252      	movs	r2, #82	; 0x52
 8021434:	214e      	movs	r1, #78	; 0x4e
 8021436:	6878      	ldr	r0, [r7, #4]
 8021438:	f000 f824 	bl	8021484 <_ZN8Iim426524ReadEhc>
 802143c:	4603      	mov	r3, r0
 802143e:	72bb      	strb	r3, [r7, #10]

#ifdef DEBUG_MODE
    g_imu_pwr_l  = pwr_l;  g_imu_pwr_r  = pwr_r;
 8021440:	4a0e      	ldr	r2, [pc, #56]	; (802147c <_ZN8Iim426524InitEv+0x180>)
 8021442:	7afb      	ldrb	r3, [r7, #11]
 8021444:	7013      	strb	r3, [r2, #0]
 8021446:	4a0e      	ldr	r2, [pc, #56]	; (8021480 <_ZN8Iim426524InitEv+0x184>)
 8021448:	7abb      	ldrb	r3, [r7, #10]
 802144a:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(pwr_l != PWR_MGMT0_ON) return 0x07;
 802144c:	7afb      	ldrb	r3, [r7, #11]
 802144e:	2b0f      	cmp	r3, #15
 8021450:	d001      	beq.n	8021456 <_ZN8Iim426524InitEv+0x15a>
 8021452:	2307      	movs	r3, #7
 8021454:	e005      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>
    if(pwr_r != PWR_MGMT0_ON) return 0x08;
 8021456:	7abb      	ldrb	r3, [r7, #10]
 8021458:	2b0f      	cmp	r3, #15
 802145a:	d001      	beq.n	8021460 <_ZN8Iim426524InitEv+0x164>
 802145c:	2308      	movs	r3, #8
 802145e:	e000      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>

    return 0x09;
 8021460:	2309      	movs	r3, #9
}
 8021462:	4618      	mov	r0, r3
 8021464:	3710      	adds	r7, #16
 8021466:	46bd      	mov	sp, r7
 8021468:	bd80      	pop	{r7, pc}
 802146a:	bf00      	nop
 802146c:	2000026b 	.word	0x2000026b
 8021470:	2000026c 	.word	0x2000026c
 8021474:	2000026d 	.word	0x2000026d
 8021478:	2000026e 	.word	0x2000026e
 802147c:	2000026f 	.word	0x2000026f
 8021480:	20000270 	.word	0x20000270

08021484 <_ZN8Iim426524ReadEhc>:

uint8_t Iim42652::Read(uint8_t send_address, char imu_ic_lr)
{
 8021484:	b580      	push	{r7, lr}
 8021486:	b084      	sub	sp, #16
 8021488:	af00      	add	r7, sp, #0
 802148a:	6078      	str	r0, [r7, #4]
 802148c:	460b      	mov	r3, r1
 802148e:	70fb      	strb	r3, [r7, #3]
 8021490:	4613      	mov	r3, r2
 8021492:	70bb      	strb	r3, [r7, #2]
    uint8_t receive_reset_value = 0x00;
 8021494:	2300      	movs	r3, #0
 8021496:	73fb      	strb	r3, [r7, #15]

    send_address = send_address | 0x80; // Read 1--- ----
 8021498:	78fb      	ldrb	r3, [r7, #3]
 802149a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802149e:	b2db      	uxtb	r3, r3
 80214a0:	70fb      	strb	r3, [r7, #3]

    if(imu_ic_lr == 'L') CS_RESET_L;
 80214a2:	78bb      	ldrb	r3, [r7, #2]
 80214a4:	2b4c      	cmp	r3, #76	; 0x4c
 80214a6:	d106      	bne.n	80214b6 <_ZN8Iim426524ReadEhc+0x32>
 80214a8:	2200      	movs	r2, #0
 80214aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80214ae:	4819      	ldr	r0, [pc, #100]	; (8021514 <_ZN8Iim426524ReadEhc+0x90>)
 80214b0:	f006 fd00 	bl	8027eb4 <HAL_GPIO_WritePin>
 80214b4:	e008      	b.n	80214c8 <_ZN8Iim426524ReadEhc+0x44>
    else if(imu_ic_lr == 'R') CS_RESET_R;
 80214b6:	78bb      	ldrb	r3, [r7, #2]
 80214b8:	2b52      	cmp	r3, #82	; 0x52
 80214ba:	d105      	bne.n	80214c8 <_ZN8Iim426524ReadEhc+0x44>
 80214bc:	2200      	movs	r2, #0
 80214be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80214c2:	4815      	ldr	r0, [pc, #84]	; (8021518 <_ZN8Iim426524ReadEhc+0x94>)
 80214c4:	f006 fcf6 	bl	8027eb4 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi3, &send_address, 1, 100);
 80214c8:	1cf9      	adds	r1, r7, #3
 80214ca:	2364      	movs	r3, #100	; 0x64
 80214cc:	2201      	movs	r2, #1
 80214ce:	4813      	ldr	r0, [pc, #76]	; (802151c <_ZN8Iim426524ReadEhc+0x98>)
 80214d0:	f007 face 	bl	8028a70 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, &receive_reset_value, 1, 100);
 80214d4:	f107 010f 	add.w	r1, r7, #15
 80214d8:	2364      	movs	r3, #100	; 0x64
 80214da:	2201      	movs	r2, #1
 80214dc:	480f      	ldr	r0, [pc, #60]	; (802151c <_ZN8Iim426524ReadEhc+0x98>)
 80214de:	f007 fbfb 	bl	8028cd8 <HAL_SPI_Receive>

    if(imu_ic_lr == 'L') CS_SET_L;
 80214e2:	78bb      	ldrb	r3, [r7, #2]
 80214e4:	2b4c      	cmp	r3, #76	; 0x4c
 80214e6:	d106      	bne.n	80214f6 <_ZN8Iim426524ReadEhc+0x72>
 80214e8:	2201      	movs	r2, #1
 80214ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80214ee:	4809      	ldr	r0, [pc, #36]	; (8021514 <_ZN8Iim426524ReadEhc+0x90>)
 80214f0:	f006 fce0 	bl	8027eb4 <HAL_GPIO_WritePin>
 80214f4:	e008      	b.n	8021508 <_ZN8Iim426524ReadEhc+0x84>
    else if(imu_ic_lr == 'R') CS_SET_R;
 80214f6:	78bb      	ldrb	r3, [r7, #2]
 80214f8:	2b52      	cmp	r3, #82	; 0x52
 80214fa:	d105      	bne.n	8021508 <_ZN8Iim426524ReadEhc+0x84>
 80214fc:	2201      	movs	r2, #1
 80214fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021502:	4805      	ldr	r0, [pc, #20]	; (8021518 <_ZN8Iim426524ReadEhc+0x94>)
 8021504:	f006 fcd6 	bl	8027eb4 <HAL_GPIO_WritePin>
    
    return receive_reset_value;
 8021508:	7bfb      	ldrb	r3, [r7, #15]
}
 802150a:	4618      	mov	r0, r3
 802150c:	3710      	adds	r7, #16
 802150e:	46bd      	mov	sp, r7
 8021510:	bd80      	pop	{r7, pc}
 8021512:	bf00      	nop
 8021514:	40020400 	.word	0x40020400
 8021518:	40020000 	.word	0x40020000
 802151c:	20000790 	.word	0x20000790

08021520 <_ZN8Iim426525WriteEhhc>:

void Iim42652::Write(uint8_t send_address, uint8_t send_data, char imu_ic_lr)
{
 8021520:	b580      	push	{r7, lr}
 8021522:	b082      	sub	sp, #8
 8021524:	af00      	add	r7, sp, #0
 8021526:	6078      	str	r0, [r7, #4]
 8021528:	4608      	mov	r0, r1
 802152a:	4611      	mov	r1, r2
 802152c:	461a      	mov	r2, r3
 802152e:	4603      	mov	r3, r0
 8021530:	70fb      	strb	r3, [r7, #3]
 8021532:	460b      	mov	r3, r1
 8021534:	70bb      	strb	r3, [r7, #2]
 8021536:	4613      	mov	r3, r2
 8021538:	707b      	strb	r3, [r7, #1]
    send_address = send_address & 0x7F; // Write 0--- ----
 802153a:	78fb      	ldrb	r3, [r7, #3]
 802153c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021540:	b2db      	uxtb	r3, r3
 8021542:	70fb      	strb	r3, [r7, #3]

    if(imu_ic_lr == 'L') CS_RESET_L;
 8021544:	787b      	ldrb	r3, [r7, #1]
 8021546:	2b4c      	cmp	r3, #76	; 0x4c
 8021548:	d106      	bne.n	8021558 <_ZN8Iim426525WriteEhhc+0x38>
 802154a:	2200      	movs	r2, #0
 802154c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8021550:	4817      	ldr	r0, [pc, #92]	; (80215b0 <_ZN8Iim426525WriteEhhc+0x90>)
 8021552:	f006 fcaf 	bl	8027eb4 <HAL_GPIO_WritePin>
 8021556:	e008      	b.n	802156a <_ZN8Iim426525WriteEhhc+0x4a>
    else if(imu_ic_lr == 'R') CS_RESET_R;
 8021558:	787b      	ldrb	r3, [r7, #1]
 802155a:	2b52      	cmp	r3, #82	; 0x52
 802155c:	d105      	bne.n	802156a <_ZN8Iim426525WriteEhhc+0x4a>
 802155e:	2200      	movs	r2, #0
 8021560:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021564:	4813      	ldr	r0, [pc, #76]	; (80215b4 <_ZN8Iim426525WriteEhhc+0x94>)
 8021566:	f006 fca5 	bl	8027eb4 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi3, &send_address, 1, 100);
 802156a:	1cf9      	adds	r1, r7, #3
 802156c:	2364      	movs	r3, #100	; 0x64
 802156e:	2201      	movs	r2, #1
 8021570:	4811      	ldr	r0, [pc, #68]	; (80215b8 <_ZN8Iim426525WriteEhhc+0x98>)
 8021572:	f007 fa7d 	bl	8028a70 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, &send_data, 1, 100);
 8021576:	1cb9      	adds	r1, r7, #2
 8021578:	2364      	movs	r3, #100	; 0x64
 802157a:	2201      	movs	r2, #1
 802157c:	480e      	ldr	r0, [pc, #56]	; (80215b8 <_ZN8Iim426525WriteEhhc+0x98>)
 802157e:	f007 fa77 	bl	8028a70 <HAL_SPI_Transmit>

    if(imu_ic_lr == 'L') CS_SET_L;
 8021582:	787b      	ldrb	r3, [r7, #1]
 8021584:	2b4c      	cmp	r3, #76	; 0x4c
 8021586:	d106      	bne.n	8021596 <_ZN8Iim426525WriteEhhc+0x76>
 8021588:	2201      	movs	r2, #1
 802158a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802158e:	4808      	ldr	r0, [pc, #32]	; (80215b0 <_ZN8Iim426525WriteEhhc+0x90>)
 8021590:	f006 fc90 	bl	8027eb4 <HAL_GPIO_WritePin>
    else if(imu_ic_lr == 'R') CS_SET_R;
}
 8021594:	e008      	b.n	80215a8 <_ZN8Iim426525WriteEhhc+0x88>
    else if(imu_ic_lr == 'R') CS_SET_R;
 8021596:	787b      	ldrb	r3, [r7, #1]
 8021598:	2b52      	cmp	r3, #82	; 0x52
 802159a:	d105      	bne.n	80215a8 <_ZN8Iim426525WriteEhhc+0x88>
 802159c:	2201      	movs	r2, #1
 802159e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80215a2:	4804      	ldr	r0, [pc, #16]	; (80215b4 <_ZN8Iim426525WriteEhhc+0x94>)
 80215a4:	f006 fc86 	bl	8027eb4 <HAL_GPIO_WritePin>
}
 80215a8:	bf00      	nop
 80215aa:	3708      	adds	r7, #8
 80215ac:	46bd      	mov	sp, r7
 80215ae:	bd80      	pop	{r7, pc}
 80215b0:	40020400 	.word	0x40020400
 80215b4:	40020000 	.word	0x40020000
 80215b8:	20000790 	.word	0x20000790

080215bc <_ZN8Iim426529Read2ByteEhhc>:

    return CheckRead(send_address, send_data, imu_ic_lr);
}

int16_t Iim42652::Read2Byte(uint8_t upper_address, uint8_t lower_address, char imu_ic_lr)
{
 80215bc:	b580      	push	{r7, lr}
 80215be:	b084      	sub	sp, #16
 80215c0:	af00      	add	r7, sp, #0
 80215c2:	6078      	str	r0, [r7, #4]
 80215c4:	4608      	mov	r0, r1
 80215c6:	4611      	mov	r1, r2
 80215c8:	461a      	mov	r2, r3
 80215ca:	4603      	mov	r3, r0
 80215cc:	70fb      	strb	r3, [r7, #3]
 80215ce:	460b      	mov	r3, r1
 80215d0:	70bb      	strb	r3, [r7, #2]
 80215d2:	4613      	mov	r3, r2
 80215d4:	707b      	strb	r3, [r7, #1]
    int16_t upper_receive, lower_receive;

    upper_receive = static_cast<int16_t>(Read(upper_address, imu_ic_lr));
 80215d6:	787a      	ldrb	r2, [r7, #1]
 80215d8:	78fb      	ldrb	r3, [r7, #3]
 80215da:	4619      	mov	r1, r3
 80215dc:	6878      	ldr	r0, [r7, #4]
 80215de:	f7ff ff51 	bl	8021484 <_ZN8Iim426524ReadEhc>
 80215e2:	4603      	mov	r3, r0
 80215e4:	81fb      	strh	r3, [r7, #14]
    lower_receive = static_cast<int16_t>(Read(lower_address, imu_ic_lr));
 80215e6:	787a      	ldrb	r2, [r7, #1]
 80215e8:	78bb      	ldrb	r3, [r7, #2]
 80215ea:	4619      	mov	r1, r3
 80215ec:	6878      	ldr	r0, [r7, #4]
 80215ee:	f7ff ff49 	bl	8021484 <_ZN8Iim426524ReadEhc>
 80215f2:	4603      	mov	r3, r0
 80215f4:	81bb      	strh	r3, [r7, #12]

    return (upper_receive << 8) | lower_receive;
 80215f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80215fa:	021b      	lsls	r3, r3, #8
 80215fc:	b21a      	sxth	r2, r3
 80215fe:	89bb      	ldrh	r3, [r7, #12]
 8021600:	4313      	orrs	r3, r2
 8021602:	b21b      	sxth	r3, r3
}
 8021604:	4618      	mov	r0, r3
 8021606:	3710      	adds	r7, #16
 8021608:	46bd      	mov	sp, r7
 802160a:	bd80      	pop	{r7, pc}
 802160c:	0000      	movs	r0, r0
	...

08021610 <_ZN8Iim426526UpdateEv>:

void Iim42652::Update()
{
 8021610:	b590      	push	{r4, r7, lr}
 8021612:	b089      	sub	sp, #36	; 0x24
 8021614:	af00      	add	r7, sp, #0
 8021616:	6078      	str	r0, [r7, #4]
    int16_t raw_z_l = Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'L');
 8021618:	234c      	movs	r3, #76	; 0x4c
 802161a:	222a      	movs	r2, #42	; 0x2a
 802161c:	2129      	movs	r1, #41	; 0x29
 802161e:	6878      	ldr	r0, [r7, #4]
 8021620:	f7ff ffcc 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021624:	4603      	mov	r3, r0
 8021626:	83fb      	strh	r3, [r7, #30]
    int16_t raw_z_r = Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'R');
 8021628:	2352      	movs	r3, #82	; 0x52
 802162a:	222a      	movs	r2, #42	; 0x2a
 802162c:	2129      	movs	r1, #41	; 0x29
 802162e:	6878      	ldr	r0, [r7, #4]
 8021630:	f7ff ffc4 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021634:	4603      	mov	r3, r0
 8021636:	83bb      	strh	r3, [r7, #28]
    double avg_raw_z = static_cast<double>(raw_z_l + raw_z_r) / 2.0;
 8021638:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 802163c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8021640:	4413      	add	r3, r2
 8021642:	4618      	mov	r0, r3
 8021644:	f7fe fe4e 	bl	80202e4 <__aeabi_i2d>
 8021648:	f04f 0200 	mov.w	r2, #0
 802164c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021650:	f7fe ffdc 	bl	802060c <__aeabi_ddiv>
 8021654:	4603      	mov	r3, r0
 8021656:	460c      	mov	r4, r1
 8021658:	e9c7 3404 	strd	r3, r4, [r7, #16]
    double degree_z = avg_raw_z * NORMAL_FUCOR_DPS * TIM6_PERIOD;
 802165c:	a316      	add	r3, pc, #88	; (adr r3, 80216b8 <_ZN8Iim426526UpdateEv+0xa8>)
 802165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021662:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8021666:	f7fe fea7 	bl	80203b8 <__aeabi_dmul>
 802166a:	4603      	mov	r3, r0
 802166c:	460c      	mov	r4, r1
 802166e:	4618      	mov	r0, r3
 8021670:	4621      	mov	r1, r4
 8021672:	f04f 0200 	mov.w	r2, #0
 8021676:	4b0e      	ldr	r3, [pc, #56]	; (80216b0 <_ZN8Iim426526UpdateEv+0xa0>)
 8021678:	f7fe fe9e 	bl	80203b8 <__aeabi_dmul>
 802167c:	4603      	mov	r3, r0
 802167e:	460c      	mov	r4, r1
 8021680:	e9c7 3402 	strd	r3, r4, [r7, #8]

    degree_stack_z_ += degree_z;
 8021684:	687b      	ldr	r3, [r7, #4]
 8021686:	e9d3 0100 	ldrd	r0, r1, [r3]
 802168a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802168e:	f7fe fcdd 	bl	802004c <__adddf3>
 8021692:	4603      	mov	r3, r0
 8021694:	460c      	mov	r4, r1
 8021696:	687a      	ldr	r2, [r7, #4]
 8021698:	e9c2 3400 	strd	r3, r4, [r2]

#ifdef DEBUG_MODE
    g_deg_z = degree_z;
 802169c:	4a05      	ldr	r2, [pc, #20]	; (80216b4 <_ZN8Iim426526UpdateEv+0xa4>)
 802169e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80216a2:	e9c2 3400 	strd	r3, r4, [r2]
#endif // DEBUG_MODE
}
 80216a6:	bf00      	nop
 80216a8:	3724      	adds	r7, #36	; 0x24
 80216aa:	46bd      	mov	sp, r7
 80216ac:	bd90      	pop	{r4, r7, pc}
 80216ae:	bf00      	nop
 80216b0:	3ff40000 	.word	0x3ff40000
 80216b4:	20000280 	.word	0x20000280
 80216b8:	ddb1209f 	.word	0xddb1209f
 80216bc:	3faf403d 	.word	0x3faf403d

080216c0 <_ZN8Iim4265217ResetDegreeStackZEv>:

void Iim42652::ResetDegreeStackZ()
{
 80216c0:	b490      	push	{r4, r7}
 80216c2:	b082      	sub	sp, #8
 80216c4:	af00      	add	r7, sp, #0
 80216c6:	6078      	str	r0, [r7, #4]
    degree_stack_z_ = 0.0;
 80216c8:	687a      	ldr	r2, [r7, #4]
 80216ca:	f04f 0300 	mov.w	r3, #0
 80216ce:	f04f 0400 	mov.w	r4, #0
 80216d2:	e9c2 3400 	strd	r3, r4, [r2]
}
 80216d6:	bf00      	nop
 80216d8:	3708      	adds	r7, #8
 80216da:	46bd      	mov	sp, r7
 80216dc:	bc90      	pop	{r4, r7}
 80216de:	4770      	bx	lr

080216e0 <_ZN8Iim4265215GetDegreeStackZEv>:

double Iim42652::GetDegreeStackZ()
{
 80216e0:	b490      	push	{r4, r7}
 80216e2:	b082      	sub	sp, #8
 80216e4:	af00      	add	r7, sp, #0
 80216e6:	6078      	str	r0, [r7, #4]
    return degree_stack_z_;
 80216e8:	687b      	ldr	r3, [r7, #4]
 80216ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80216ee:	ec44 3b17 	vmov	d7, r3, r4
}
 80216f2:	eeb0 0a47 	vmov.f32	s0, s14
 80216f6:	eef0 0a67 	vmov.f32	s1, s15
 80216fa:	3708      	adds	r7, #8
 80216fc:	46bd      	mov	sp, r7
 80216fe:	bc90      	pop	{r4, r7}
 8021700:	4770      	bx	lr

08021702 <_ZN8Iim426529GyroXLeftEv>:

int16_t Iim42652::GyroXLeft()
{
 8021702:	b580      	push	{r7, lr}
 8021704:	b082      	sub	sp, #8
 8021706:	af00      	add	r7, sp, #0
 8021708:	6078      	str	r0, [r7, #4]
    return Read2Byte(GYRO_DATA_X1_ADD, GYRO_DATA_X0_ADD, 'L');
 802170a:	234c      	movs	r3, #76	; 0x4c
 802170c:	2226      	movs	r2, #38	; 0x26
 802170e:	2125      	movs	r1, #37	; 0x25
 8021710:	6878      	ldr	r0, [r7, #4]
 8021712:	f7ff ff53 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021716:	4603      	mov	r3, r0
}
 8021718:	4618      	mov	r0, r3
 802171a:	3708      	adds	r7, #8
 802171c:	46bd      	mov	sp, r7
 802171e:	bd80      	pop	{r7, pc}

08021720 <_ZN8Iim4265210GyroXRightEv>:

int16_t Iim42652::GyroXRight()
{
 8021720:	b580      	push	{r7, lr}
 8021722:	b082      	sub	sp, #8
 8021724:	af00      	add	r7, sp, #0
 8021726:	6078      	str	r0, [r7, #4]
    return Read2Byte(GYRO_DATA_X1_ADD, GYRO_DATA_X0_ADD, 'R');
 8021728:	2352      	movs	r3, #82	; 0x52
 802172a:	2226      	movs	r2, #38	; 0x26
 802172c:	2125      	movs	r1, #37	; 0x25
 802172e:	6878      	ldr	r0, [r7, #4]
 8021730:	f7ff ff44 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021734:	4603      	mov	r3, r0
}
 8021736:	4618      	mov	r0, r3
 8021738:	3708      	adds	r7, #8
 802173a:	46bd      	mov	sp, r7
 802173c:	bd80      	pop	{r7, pc}

0802173e <_ZN8Iim426529GyroYLeftEv>:

int16_t Iim42652::GyroYLeft()
{
 802173e:	b580      	push	{r7, lr}
 8021740:	b082      	sub	sp, #8
 8021742:	af00      	add	r7, sp, #0
 8021744:	6078      	str	r0, [r7, #4]
    return Read2Byte(GYRO_DATA_Y1_ADD, GYRO_DATA_Y0_ADD, 'L');
 8021746:	234c      	movs	r3, #76	; 0x4c
 8021748:	2228      	movs	r2, #40	; 0x28
 802174a:	2127      	movs	r1, #39	; 0x27
 802174c:	6878      	ldr	r0, [r7, #4]
 802174e:	f7ff ff35 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021752:	4603      	mov	r3, r0
}
 8021754:	4618      	mov	r0, r3
 8021756:	3708      	adds	r7, #8
 8021758:	46bd      	mov	sp, r7
 802175a:	bd80      	pop	{r7, pc}

0802175c <_ZN8Iim4265210GyroYRightEv>:

int16_t Iim42652::GyroYRight()
{
 802175c:	b580      	push	{r7, lr}
 802175e:	b082      	sub	sp, #8
 8021760:	af00      	add	r7, sp, #0
 8021762:	6078      	str	r0, [r7, #4]
    return Read2Byte(GYRO_DATA_Y1_ADD, GYRO_DATA_Y0_ADD, 'R');
 8021764:	2352      	movs	r3, #82	; 0x52
 8021766:	2228      	movs	r2, #40	; 0x28
 8021768:	2127      	movs	r1, #39	; 0x27
 802176a:	6878      	ldr	r0, [r7, #4]
 802176c:	f7ff ff26 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021770:	4603      	mov	r3, r0
}
 8021772:	4618      	mov	r0, r3
 8021774:	3708      	adds	r7, #8
 8021776:	46bd      	mov	sp, r7
 8021778:	bd80      	pop	{r7, pc}

0802177a <_ZN8Iim426529GyroZLeftEv>:

int16_t Iim42652::GyroZLeft()
{
 802177a:	b580      	push	{r7, lr}
 802177c:	b082      	sub	sp, #8
 802177e:	af00      	add	r7, sp, #0
 8021780:	6078      	str	r0, [r7, #4]
    return Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'L');
 8021782:	234c      	movs	r3, #76	; 0x4c
 8021784:	222a      	movs	r2, #42	; 0x2a
 8021786:	2129      	movs	r1, #41	; 0x29
 8021788:	6878      	ldr	r0, [r7, #4]
 802178a:	f7ff ff17 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 802178e:	4603      	mov	r3, r0
}
 8021790:	4618      	mov	r0, r3
 8021792:	3708      	adds	r7, #8
 8021794:	46bd      	mov	sp, r7
 8021796:	bd80      	pop	{r7, pc}

08021798 <_ZN8Iim4265210GyroZRightEv>:

int16_t Iim42652::GyroZRight()
{
 8021798:	b580      	push	{r7, lr}
 802179a:	b082      	sub	sp, #8
 802179c:	af00      	add	r7, sp, #0
 802179e:	6078      	str	r0, [r7, #4]
    return Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'R');
 80217a0:	2352      	movs	r3, #82	; 0x52
 80217a2:	222a      	movs	r2, #42	; 0x2a
 80217a4:	2129      	movs	r1, #41	; 0x29
 80217a6:	6878      	ldr	r0, [r7, #4]
 80217a8:	f7ff ff08 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 80217ac:	4603      	mov	r3, r0
}
 80217ae:	4618      	mov	r0, r3
 80217b0:	3708      	adds	r7, #8
 80217b2:	46bd      	mov	sp, r7
 80217b4:	bd80      	pop	{r7, pc}

080217b6 <_ZN8Iim4265210AccelXLeftEv>:

int16_t Iim42652::AccelXLeft()
{
 80217b6:	b580      	push	{r7, lr}
 80217b8:	b082      	sub	sp, #8
 80217ba:	af00      	add	r7, sp, #0
 80217bc:	6078      	str	r0, [r7, #4]
    return Read2Byte(ACCEL_DATA_X1_ADD, ACCEL_DATA_X0_ADD, 'L');
 80217be:	234c      	movs	r3, #76	; 0x4c
 80217c0:	2220      	movs	r2, #32
 80217c2:	211f      	movs	r1, #31
 80217c4:	6878      	ldr	r0, [r7, #4]
 80217c6:	f7ff fef9 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 80217ca:	4603      	mov	r3, r0
}
 80217cc:	4618      	mov	r0, r3
 80217ce:	3708      	adds	r7, #8
 80217d0:	46bd      	mov	sp, r7
 80217d2:	bd80      	pop	{r7, pc}

080217d4 <_ZN8Iim4265211AccelXRightEv>:

int16_t Iim42652::AccelXRight()
{
 80217d4:	b580      	push	{r7, lr}
 80217d6:	b082      	sub	sp, #8
 80217d8:	af00      	add	r7, sp, #0
 80217da:	6078      	str	r0, [r7, #4]
    return Read2Byte(ACCEL_DATA_X1_ADD, ACCEL_DATA_X0_ADD, 'R');
 80217dc:	2352      	movs	r3, #82	; 0x52
 80217de:	2220      	movs	r2, #32
 80217e0:	211f      	movs	r1, #31
 80217e2:	6878      	ldr	r0, [r7, #4]
 80217e4:	f7ff feea 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 80217e8:	4603      	mov	r3, r0
}
 80217ea:	4618      	mov	r0, r3
 80217ec:	3708      	adds	r7, #8
 80217ee:	46bd      	mov	sp, r7
 80217f0:	bd80      	pop	{r7, pc}

080217f2 <_ZN8Iim4265210AccelYLeftEv>:

int16_t Iim42652::AccelYLeft()
{
 80217f2:	b580      	push	{r7, lr}
 80217f4:	b082      	sub	sp, #8
 80217f6:	af00      	add	r7, sp, #0
 80217f8:	6078      	str	r0, [r7, #4]
    return Read2Byte(ACCEL_DATA_Y1_ADD, ACCEL_DATA_Y0_ADD, 'L');
 80217fa:	234c      	movs	r3, #76	; 0x4c
 80217fc:	2222      	movs	r2, #34	; 0x22
 80217fe:	2121      	movs	r1, #33	; 0x21
 8021800:	6878      	ldr	r0, [r7, #4]
 8021802:	f7ff fedb 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021806:	4603      	mov	r3, r0
}
 8021808:	4618      	mov	r0, r3
 802180a:	3708      	adds	r7, #8
 802180c:	46bd      	mov	sp, r7
 802180e:	bd80      	pop	{r7, pc}

08021810 <_ZN8Iim4265211AccelYRightEv>:

int16_t Iim42652::AccelYRight()
{
 8021810:	b580      	push	{r7, lr}
 8021812:	b082      	sub	sp, #8
 8021814:	af00      	add	r7, sp, #0
 8021816:	6078      	str	r0, [r7, #4]
    return Read2Byte(ACCEL_DATA_Y1_ADD, ACCEL_DATA_Y0_ADD, 'R');
 8021818:	2352      	movs	r3, #82	; 0x52
 802181a:	2222      	movs	r2, #34	; 0x22
 802181c:	2121      	movs	r1, #33	; 0x21
 802181e:	6878      	ldr	r0, [r7, #4]
 8021820:	f7ff fecc 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021824:	4603      	mov	r3, r0
}
 8021826:	4618      	mov	r0, r3
 8021828:	3708      	adds	r7, #8
 802182a:	46bd      	mov	sp, r7
 802182c:	bd80      	pop	{r7, pc}

0802182e <_ZN8Iim4265210AccelZLeftEv>:

int16_t Iim42652::AccelZLeft()
{
 802182e:	b580      	push	{r7, lr}
 8021830:	b082      	sub	sp, #8
 8021832:	af00      	add	r7, sp, #0
 8021834:	6078      	str	r0, [r7, #4]
    return Read2Byte(ACCEL_DATA_Z1_ADD, ACCEL_DATA_Z0_ADD, 'L');
 8021836:	234c      	movs	r3, #76	; 0x4c
 8021838:	2224      	movs	r2, #36	; 0x24
 802183a:	2123      	movs	r1, #35	; 0x23
 802183c:	6878      	ldr	r0, [r7, #4]
 802183e:	f7ff febd 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021842:	4603      	mov	r3, r0
}
 8021844:	4618      	mov	r0, r3
 8021846:	3708      	adds	r7, #8
 8021848:	46bd      	mov	sp, r7
 802184a:	bd80      	pop	{r7, pc}

0802184c <_ZN8Iim4265211AccelZRightEv>:

int16_t Iim42652::AccelZRight()
{
 802184c:	b580      	push	{r7, lr}
 802184e:	b082      	sub	sp, #8
 8021850:	af00      	add	r7, sp, #0
 8021852:	6078      	str	r0, [r7, #4]
    return Read2Byte(ACCEL_DATA_Z1_ADD, ACCEL_DATA_Z0_ADD, 'R');
 8021854:	2352      	movs	r3, #82	; 0x52
 8021856:	2224      	movs	r2, #36	; 0x24
 8021858:	2123      	movs	r1, #35	; 0x23
 802185a:	6878      	ldr	r0, [r7, #4]
 802185c:	f7ff feae 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021860:	4603      	mov	r3, r0
 8021862:	4618      	mov	r0, r3
 8021864:	3708      	adds	r7, #8
 8021866:	46bd      	mov	sp, r7
 8021868:	bd80      	pop	{r7, pc}

0802186a <_ZN3LedC1Ev>:
#include "led.hpp"

Led::Led() : interrupt_count_(0)
 802186a:	b480      	push	{r7}
 802186c:	b083      	sub	sp, #12
 802186e:	af00      	add	r7, sp, #0
 8021870:	6078      	str	r0, [r7, #4]
           , interrupt_timer_(0) {}
 8021872:	687b      	ldr	r3, [r7, #4]
 8021874:	2200      	movs	r2, #0
 8021876:	701a      	strb	r2, [r3, #0]
 8021878:	687b      	ldr	r3, [r7, #4]
 802187a:	2200      	movs	r2, #0
 802187c:	705a      	strb	r2, [r3, #1]
 802187e:	687b      	ldr	r3, [r7, #4]
 8021880:	4618      	mov	r0, r3
 8021882:	370c      	adds	r7, #12
 8021884:	46bd      	mov	sp, r7
 8021886:	f85d 7b04 	ldr.w	r7, [sp], #4
 802188a:	4770      	bx	lr

0802188c <_ZN3Led10ColorOrderEc>:

void Led::ColorOrder(char color)
{
 802188c:	b580      	push	{r7, lr}
 802188e:	b082      	sub	sp, #8
 8021890:	af00      	add	r7, sp, #0
 8021892:	6078      	str	r0, [r7, #4]
 8021894:	460b      	mov	r3, r1
 8021896:	70fb      	strb	r3, [r7, #3]
    switch(color)
 8021898:	78fb      	ldrb	r3, [r7, #3]
 802189a:	3b42      	subs	r3, #66	; 0x42
 802189c:	2b17      	cmp	r3, #23
 802189e:	f200 80b8 	bhi.w	8021a12 <_ZN3Led10ColorOrderEc+0x186>
 80218a2:	a201      	add	r2, pc, #4	; (adr r2, 80218a8 <_ZN3Led10ColorOrderEc+0x1c>)
 80218a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80218a8:	08021955 	.word	0x08021955
 80218ac:	080219a1 	.word	0x080219a1
 80218b0:	08021a13 	.word	0x08021a13
 80218b4:	08021a13 	.word	0x08021a13
 80218b8:	08021a13 	.word	0x08021a13
 80218bc:	0802192f 	.word	0x0802192f
 80218c0:	08021a13 	.word	0x08021a13
 80218c4:	08021a13 	.word	0x08021a13
 80218c8:	08021a13 	.word	0x08021a13
 80218cc:	08021a13 	.word	0x08021a13
 80218d0:	08021a13 	.word	0x08021a13
 80218d4:	080219c7 	.word	0x080219c7
 80218d8:	08021a13 	.word	0x08021a13
 80218dc:	08021a13 	.word	0x08021a13
 80218e0:	08021a13 	.word	0x08021a13
 80218e4:	08021a13 	.word	0x08021a13
 80218e8:	08021909 	.word	0x08021909
 80218ec:	08021a13 	.word	0x08021a13
 80218f0:	08021a13 	.word	0x08021a13
 80218f4:	08021a13 	.word	0x08021a13
 80218f8:	08021a13 	.word	0x08021a13
 80218fc:	080219ed 	.word	0x080219ed
 8021900:	08021a13 	.word	0x08021a13
 8021904:	0802197b 	.word	0x0802197b
    {
        case 'R': R_ON;  G_OFF; B_OFF; break;
 8021908:	2200      	movs	r2, #0
 802190a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802190e:	484c      	ldr	r0, [pc, #304]	; (8021a40 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021910:	f006 fad0 	bl	8027eb4 <HAL_GPIO_WritePin>
 8021914:	2201      	movs	r2, #1
 8021916:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802191a:	4849      	ldr	r0, [pc, #292]	; (8021a40 <_ZN3Led10ColorOrderEc+0x1b4>)
 802191c:	f006 faca 	bl	8027eb4 <HAL_GPIO_WritePin>
 8021920:	2201      	movs	r2, #1
 8021922:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021926:	4846      	ldr	r0, [pc, #280]	; (8021a40 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021928:	f006 fac4 	bl	8027eb4 <HAL_GPIO_WritePin>
 802192c:	e084      	b.n	8021a38 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'G': R_OFF; G_ON;  B_OFF; break;
 802192e:	2201      	movs	r2, #1
 8021930:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021934:	4842      	ldr	r0, [pc, #264]	; (8021a40 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021936:	f006 fabd 	bl	8027eb4 <HAL_GPIO_WritePin>
 802193a:	2200      	movs	r2, #0
 802193c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021940:	483f      	ldr	r0, [pc, #252]	; (8021a40 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021942:	f006 fab7 	bl	8027eb4 <HAL_GPIO_WritePin>
 8021946:	2201      	movs	r2, #1
 8021948:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802194c:	483c      	ldr	r0, [pc, #240]	; (8021a40 <_ZN3Led10ColorOrderEc+0x1b4>)
 802194e:	f006 fab1 	bl	8027eb4 <HAL_GPIO_WritePin>
 8021952:	e071      	b.n	8021a38 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'B': R_OFF; G_OFF; B_ON;  break;
 8021954:	2201      	movs	r2, #1
 8021956:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802195a:	4839      	ldr	r0, [pc, #228]	; (8021a40 <_ZN3Led10ColorOrderEc+0x1b4>)
 802195c:	f006 faaa 	bl	8027eb4 <HAL_GPIO_WritePin>
 8021960:	2201      	movs	r2, #1
 8021962:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021966:	4836      	ldr	r0, [pc, #216]	; (8021a40 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021968:	f006 faa4 	bl	8027eb4 <HAL_GPIO_WritePin>
 802196c:	2200      	movs	r2, #0
 802196e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021972:	4833      	ldr	r0, [pc, #204]	; (8021a40 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021974:	f006 fa9e 	bl	8027eb4 <HAL_GPIO_WritePin>
 8021978:	e05e      	b.n	8021a38 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'Y': R_ON;  G_ON;  B_OFF; break;
 802197a:	2200      	movs	r2, #0
 802197c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021980:	482f      	ldr	r0, [pc, #188]	; (8021a40 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021982:	f006 fa97 	bl	8027eb4 <HAL_GPIO_WritePin>
 8021986:	2200      	movs	r2, #0
 8021988:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802198c:	482c      	ldr	r0, [pc, #176]	; (8021a40 <_ZN3Led10ColorOrderEc+0x1b4>)
 802198e:	f006 fa91 	bl	8027eb4 <HAL_GPIO_WritePin>
 8021992:	2201      	movs	r2, #1
 8021994:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021998:	4829      	ldr	r0, [pc, #164]	; (8021a40 <_ZN3Led10ColorOrderEc+0x1b4>)
 802199a:	f006 fa8b 	bl	8027eb4 <HAL_GPIO_WritePin>
 802199e:	e04b      	b.n	8021a38 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'C': R_OFF; G_ON;  B_ON;  break;
 80219a0:	2201      	movs	r2, #1
 80219a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80219a6:	4826      	ldr	r0, [pc, #152]	; (8021a40 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219a8:	f006 fa84 	bl	8027eb4 <HAL_GPIO_WritePin>
 80219ac:	2200      	movs	r2, #0
 80219ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80219b2:	4823      	ldr	r0, [pc, #140]	; (8021a40 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219b4:	f006 fa7e 	bl	8027eb4 <HAL_GPIO_WritePin>
 80219b8:	2200      	movs	r2, #0
 80219ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80219be:	4820      	ldr	r0, [pc, #128]	; (8021a40 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219c0:	f006 fa78 	bl	8027eb4 <HAL_GPIO_WritePin>
 80219c4:	e038      	b.n	8021a38 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'M': R_ON;  G_OFF; B_ON;  break;
 80219c6:	2200      	movs	r2, #0
 80219c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80219cc:	481c      	ldr	r0, [pc, #112]	; (8021a40 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219ce:	f006 fa71 	bl	8027eb4 <HAL_GPIO_WritePin>
 80219d2:	2201      	movs	r2, #1
 80219d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80219d8:	4819      	ldr	r0, [pc, #100]	; (8021a40 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219da:	f006 fa6b 	bl	8027eb4 <HAL_GPIO_WritePin>
 80219de:	2200      	movs	r2, #0
 80219e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80219e4:	4816      	ldr	r0, [pc, #88]	; (8021a40 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219e6:	f006 fa65 	bl	8027eb4 <HAL_GPIO_WritePin>
 80219ea:	e025      	b.n	8021a38 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'W': R_ON;  G_ON;  B_ON;  break;
 80219ec:	2200      	movs	r2, #0
 80219ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80219f2:	4813      	ldr	r0, [pc, #76]	; (8021a40 <_ZN3Led10ColorOrderEc+0x1b4>)
 80219f4:	f006 fa5e 	bl	8027eb4 <HAL_GPIO_WritePin>
 80219f8:	2200      	movs	r2, #0
 80219fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80219fe:	4810      	ldr	r0, [pc, #64]	; (8021a40 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021a00:	f006 fa58 	bl	8027eb4 <HAL_GPIO_WritePin>
 8021a04:	2200      	movs	r2, #0
 8021a06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021a0a:	480d      	ldr	r0, [pc, #52]	; (8021a40 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021a0c:	f006 fa52 	bl	8027eb4 <HAL_GPIO_WritePin>
 8021a10:	e012      	b.n	8021a38 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'X': // fall through
        default:  R_OFF; G_OFF; B_OFF; break;
 8021a12:	2201      	movs	r2, #1
 8021a14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021a18:	4809      	ldr	r0, [pc, #36]	; (8021a40 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021a1a:	f006 fa4b 	bl	8027eb4 <HAL_GPIO_WritePin>
 8021a1e:	2201      	movs	r2, #1
 8021a20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021a24:	4806      	ldr	r0, [pc, #24]	; (8021a40 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021a26:	f006 fa45 	bl	8027eb4 <HAL_GPIO_WritePin>
 8021a2a:	2201      	movs	r2, #1
 8021a2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021a30:	4803      	ldr	r0, [pc, #12]	; (8021a40 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021a32:	f006 fa3f 	bl	8027eb4 <HAL_GPIO_WritePin>
 8021a36:	bf00      	nop
    }
}
 8021a38:	bf00      	nop
 8021a3a:	3708      	adds	r7, #8
 8021a3c:	46bd      	mov	sp, r7
 8021a3e:	bd80      	pop	{r7, pc}
 8021a40:	40020800 	.word	0x40020800

08021a44 <_ZN3Led5BlinkEhcc>:

void Led::Blink(uint8_t times, char color_1, char color_2)
{
 8021a44:	b580      	push	{r7, lr}
 8021a46:	b084      	sub	sp, #16
 8021a48:	af00      	add	r7, sp, #0
 8021a4a:	6078      	str	r0, [r7, #4]
 8021a4c:	4608      	mov	r0, r1
 8021a4e:	4611      	mov	r1, r2
 8021a50:	461a      	mov	r2, r3
 8021a52:	4603      	mov	r3, r0
 8021a54:	70fb      	strb	r3, [r7, #3]
 8021a56:	460b      	mov	r3, r1
 8021a58:	70bb      	strb	r3, [r7, #2]
 8021a5a:	4613      	mov	r3, r2
 8021a5c:	707b      	strb	r3, [r7, #1]
    for(uint8_t i = 0; i < times; i++)
 8021a5e:	2300      	movs	r3, #0
 8021a60:	73fb      	strb	r3, [r7, #15]
 8021a62:	7bfa      	ldrb	r2, [r7, #15]
 8021a64:	78fb      	ldrb	r3, [r7, #3]
 8021a66:	429a      	cmp	r2, r3
 8021a68:	d215      	bcs.n	8021a96 <_ZN3Led5BlinkEhcc+0x52>
    {
        ColorOrder(color_1);
 8021a6a:	78bb      	ldrb	r3, [r7, #2]
 8021a6c:	4619      	mov	r1, r3
 8021a6e:	6878      	ldr	r0, [r7, #4]
 8021a70:	f7ff ff0c 	bl	802188c <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 8021a74:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021a78:	f004 fcfe 	bl	8026478 <HAL_Delay>
        ColorOrder(color_2);
 8021a7c:	787b      	ldrb	r3, [r7, #1]
 8021a7e:	4619      	mov	r1, r3
 8021a80:	6878      	ldr	r0, [r7, #4]
 8021a82:	f7ff ff03 	bl	802188c <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 8021a86:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021a8a:	f004 fcf5 	bl	8026478 <HAL_Delay>
    for(uint8_t i = 0; i < times; i++)
 8021a8e:	7bfb      	ldrb	r3, [r7, #15]
 8021a90:	3301      	adds	r3, #1
 8021a92:	73fb      	strb	r3, [r7, #15]
 8021a94:	e7e5      	b.n	8021a62 <_ZN3Led5BlinkEhcc+0x1e>
    }
}
 8021a96:	bf00      	nop
 8021a98:	3710      	adds	r7, #16
 8021a9a:	46bd      	mov	sp, r7
 8021a9c:	bd80      	pop	{r7, pc}

08021a9e <_ZN3Led7RainbowEh>:

void Led::Rainbow(uint8_t times)
{
 8021a9e:	b580      	push	{r7, lr}
 8021aa0:	b084      	sub	sp, #16
 8021aa2:	af00      	add	r7, sp, #0
 8021aa4:	6078      	str	r0, [r7, #4]
 8021aa6:	460b      	mov	r3, r1
 8021aa8:	70fb      	strb	r3, [r7, #3]
    for(uint8_t i = 0; i < times; i++)
 8021aaa:	2300      	movs	r3, #0
 8021aac:	73fb      	strb	r3, [r7, #15]
 8021aae:	7bfa      	ldrb	r2, [r7, #15]
 8021ab0:	78fb      	ldrb	r3, [r7, #3]
 8021ab2:	429a      	cmp	r2, r3
 8021ab4:	d233      	bcs.n	8021b1e <_ZN3Led7RainbowEh+0x80>
    {
        ColorOrder('R');
 8021ab6:	2152      	movs	r1, #82	; 0x52
 8021ab8:	6878      	ldr	r0, [r7, #4]
 8021aba:	f7ff fee7 	bl	802188c <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021abe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021ac2:	f004 fcd9 	bl	8026478 <HAL_Delay>
        ColorOrder('Y');
 8021ac6:	2159      	movs	r1, #89	; 0x59
 8021ac8:	6878      	ldr	r0, [r7, #4]
 8021aca:	f7ff fedf 	bl	802188c <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021ace:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021ad2:	f004 fcd1 	bl	8026478 <HAL_Delay>
        ColorOrder('G');
 8021ad6:	2147      	movs	r1, #71	; 0x47
 8021ad8:	6878      	ldr	r0, [r7, #4]
 8021ada:	f7ff fed7 	bl	802188c <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021ade:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021ae2:	f004 fcc9 	bl	8026478 <HAL_Delay>
        ColorOrder('C');
 8021ae6:	2143      	movs	r1, #67	; 0x43
 8021ae8:	6878      	ldr	r0, [r7, #4]
 8021aea:	f7ff fecf 	bl	802188c <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021aee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021af2:	f004 fcc1 	bl	8026478 <HAL_Delay>
        ColorOrder('B');
 8021af6:	2142      	movs	r1, #66	; 0x42
 8021af8:	6878      	ldr	r0, [r7, #4]
 8021afa:	f7ff fec7 	bl	802188c <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021afe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021b02:	f004 fcb9 	bl	8026478 <HAL_Delay>
        ColorOrder('M');
 8021b06:	214d      	movs	r1, #77	; 0x4d
 8021b08:	6878      	ldr	r0, [r7, #4]
 8021b0a:	f7ff febf 	bl	802188c <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021b0e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8021b12:	f004 fcb1 	bl	8026478 <HAL_Delay>
    for(uint8_t i = 0; i < times; i++)
 8021b16:	7bfb      	ldrb	r3, [r7, #15]
 8021b18:	3301      	adds	r3, #1
 8021b1a:	73fb      	strb	r3, [r7, #15]
 8021b1c:	e7c7      	b.n	8021aae <_ZN3Led7RainbowEh+0x10>
    }
}
 8021b1e:	bf00      	nop
 8021b20:	3710      	adds	r7, #16
 8021b22:	46bd      	mov	sp, r7
 8021b24:	bd80      	pop	{r7, pc}

08021b26 <_ZN3Led14BlinkInterruptEhcc>:

bool Led::BlinkInterrupt(uint8_t times, char color_1, char color_2)
{
 8021b26:	b580      	push	{r7, lr}
 8021b28:	b084      	sub	sp, #16
 8021b2a:	af00      	add	r7, sp, #0
 8021b2c:	6078      	str	r0, [r7, #4]
 8021b2e:	4608      	mov	r0, r1
 8021b30:	4611      	mov	r1, r2
 8021b32:	461a      	mov	r2, r3
 8021b34:	4603      	mov	r3, r0
 8021b36:	70fb      	strb	r3, [r7, #3]
 8021b38:	460b      	mov	r3, r1
 8021b3a:	70bb      	strb	r3, [r7, #2]
 8021b3c:	4613      	mov	r3, r2
 8021b3e:	707b      	strb	r3, [r7, #1]
    uint8_t count = interrupt_count_;
 8021b40:	687b      	ldr	r3, [r7, #4]
 8021b42:	781b      	ldrb	r3, [r3, #0]
 8021b44:	73fb      	strb	r3, [r7, #15]
    uint8_t timer = interrupt_timer_;
 8021b46:	687b      	ldr	r3, [r7, #4]
 8021b48:	785b      	ldrb	r3, [r3, #1]
 8021b4a:	73bb      	strb	r3, [r7, #14]
    bool blink_continue = true;
 8021b4c:	2301      	movs	r3, #1
 8021b4e:	737b      	strb	r3, [r7, #13]

    if(count < times){
 8021b50:	7bfa      	ldrb	r2, [r7, #15]
 8021b52:	78fb      	ldrb	r3, [r7, #3]
 8021b54:	429a      	cmp	r2, r3
 8021b56:	d21d      	bcs.n	8021b94 <_ZN3Led14BlinkInterruptEhcc+0x6e>
        if(timer < BLINK_INTERVAL_TIMX){
 8021b58:	7bbb      	ldrb	r3, [r7, #14]
 8021b5a:	2b27      	cmp	r3, #39	; 0x27
 8021b5c:	d808      	bhi.n	8021b70 <_ZN3Led14BlinkInterruptEhcc+0x4a>
            ColorOrder(color_1);
 8021b5e:	78bb      	ldrb	r3, [r7, #2]
 8021b60:	4619      	mov	r1, r3
 8021b62:	6878      	ldr	r0, [r7, #4]
 8021b64:	f7ff fe92 	bl	802188c <_ZN3Led10ColorOrderEc>
            timer++;
 8021b68:	7bbb      	ldrb	r3, [r7, #14]
 8021b6a:	3301      	adds	r3, #1
 8021b6c:	73bb      	strb	r3, [r7, #14]
 8021b6e:	e019      	b.n	8021ba4 <_ZN3Led14BlinkInterruptEhcc+0x7e>
        }else if(timer < (BLINK_INTERVAL_TIMX + BLINK_INTERVAL_TIMX)){
 8021b70:	7bbb      	ldrb	r3, [r7, #14]
 8021b72:	2b4f      	cmp	r3, #79	; 0x4f
 8021b74:	d808      	bhi.n	8021b88 <_ZN3Led14BlinkInterruptEhcc+0x62>
            ColorOrder(color_2);
 8021b76:	787b      	ldrb	r3, [r7, #1]
 8021b78:	4619      	mov	r1, r3
 8021b7a:	6878      	ldr	r0, [r7, #4]
 8021b7c:	f7ff fe86 	bl	802188c <_ZN3Led10ColorOrderEc>
            timer++;
 8021b80:	7bbb      	ldrb	r3, [r7, #14]
 8021b82:	3301      	adds	r3, #1
 8021b84:	73bb      	strb	r3, [r7, #14]
 8021b86:	e00d      	b.n	8021ba4 <_ZN3Led14BlinkInterruptEhcc+0x7e>
        }else{
            count++;
 8021b88:	7bfb      	ldrb	r3, [r7, #15]
 8021b8a:	3301      	adds	r3, #1
 8021b8c:	73fb      	strb	r3, [r7, #15]
            timer = 0;
 8021b8e:	2300      	movs	r3, #0
 8021b90:	73bb      	strb	r3, [r7, #14]
 8021b92:	e007      	b.n	8021ba4 <_ZN3Led14BlinkInterruptEhcc+0x7e>
        }
    }else{
        ColorOrder('X');
 8021b94:	2158      	movs	r1, #88	; 0x58
 8021b96:	6878      	ldr	r0, [r7, #4]
 8021b98:	f7ff fe78 	bl	802188c <_ZN3Led10ColorOrderEc>
        count = 0;
 8021b9c:	2300      	movs	r3, #0
 8021b9e:	73fb      	strb	r3, [r7, #15]
        blink_continue = false;
 8021ba0:	2300      	movs	r3, #0
 8021ba2:	737b      	strb	r3, [r7, #13]
    }

    interrupt_count_ = count;
 8021ba4:	687b      	ldr	r3, [r7, #4]
 8021ba6:	7bfa      	ldrb	r2, [r7, #15]
 8021ba8:	701a      	strb	r2, [r3, #0]
    interrupt_timer_ = timer;
 8021baa:	687b      	ldr	r3, [r7, #4]
 8021bac:	7bba      	ldrb	r2, [r7, #14]
 8021bae:	705a      	strb	r2, [r3, #1]

    return blink_continue;
 8021bb0:	7b7b      	ldrb	r3, [r7, #13]
}
 8021bb2:	4618      	mov	r0, r3
 8021bb4:	3710      	adds	r7, #16
 8021bb6:	46bd      	mov	sp, r7
 8021bb8:	bd80      	pop	{r7, pc}

08021bba <_ZN3Led14ResetInterruptEv>:

void Led::ResetInterrupt()
{
 8021bba:	b480      	push	{r7}
 8021bbc:	b083      	sub	sp, #12
 8021bbe:	af00      	add	r7, sp, #0
 8021bc0:	6078      	str	r0, [r7, #4]
    interrupt_count_ = 0;
 8021bc2:	687b      	ldr	r3, [r7, #4]
 8021bc4:	2200      	movs	r2, #0
 8021bc6:	701a      	strb	r2, [r3, #0]
    interrupt_timer_ = 0;
 8021bc8:	687b      	ldr	r3, [r7, #4]
 8021bca:	2200      	movs	r2, #0
 8021bcc:	705a      	strb	r2, [r3, #1]
 8021bce:	bf00      	nop
 8021bd0:	370c      	adds	r7, #12
 8021bd2:	46bd      	mov	sp, r7
 8021bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bd8:	4770      	bx	lr

08021bda <_ZN10LineSensorC1Ev>:
#include "line_sensor.hpp"

LineSensor::LineSensor() : line_sensors_buff_{0}
 8021bda:	b580      	push	{r7, lr}
 8021bdc:	b082      	sub	sp, #8
 8021bde:	af00      	add	r7, sp, #0
 8021be0:	6078      	str	r0, [r7, #4]
                         , consecutive_line_sensors_buff_{{0}}
                         , max_line_sensors_valu_{0}
                         , min_line_sensors_valu_{0}
                         , line_sensors_valu_{0}
                         , emergency_stop_flag_(false) {}
 8021be2:	687b      	ldr	r3, [r7, #4]
 8021be4:	461a      	mov	r2, r3
 8021be6:	2300      	movs	r3, #0
 8021be8:	6013      	str	r3, [r2, #0]
 8021bea:	6053      	str	r3, [r2, #4]
 8021bec:	6093      	str	r3, [r2, #8]
 8021bee:	60d3      	str	r3, [r2, #12]
 8021bf0:	6113      	str	r3, [r2, #16]
 8021bf2:	6153      	str	r3, [r2, #20]
 8021bf4:	6193      	str	r3, [r2, #24]
 8021bf6:	687b      	ldr	r3, [r7, #4]
 8021bf8:	331c      	adds	r3, #28
 8021bfa:	f44f 728c 	mov.w	r2, #280	; 0x118
 8021bfe:	2100      	movs	r1, #0
 8021c00:	4618      	mov	r0, r3
 8021c02:	f008 fc86 	bl	802a512 <memset>
 8021c06:	687b      	ldr	r3, [r7, #4]
 8021c08:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8021c0c:	2200      	movs	r2, #0
 8021c0e:	601a      	str	r2, [r3, #0]
 8021c10:	605a      	str	r2, [r3, #4]
 8021c12:	609a      	str	r2, [r3, #8]
 8021c14:	60da      	str	r2, [r3, #12]
 8021c16:	611a      	str	r2, [r3, #16]
 8021c18:	615a      	str	r2, [r3, #20]
 8021c1a:	619a      	str	r2, [r3, #24]
 8021c1c:	687b      	ldr	r3, [r7, #4]
 8021c1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8021c22:	2200      	movs	r2, #0
 8021c24:	601a      	str	r2, [r3, #0]
 8021c26:	605a      	str	r2, [r3, #4]
 8021c28:	609a      	str	r2, [r3, #8]
 8021c2a:	60da      	str	r2, [r3, #12]
 8021c2c:	611a      	str	r2, [r3, #16]
 8021c2e:	615a      	str	r2, [r3, #20]
 8021c30:	619a      	str	r2, [r3, #24]
 8021c32:	687b      	ldr	r3, [r7, #4]
 8021c34:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8021c38:	2200      	movs	r2, #0
 8021c3a:	601a      	str	r2, [r3, #0]
 8021c3c:	605a      	str	r2, [r3, #4]
 8021c3e:	609a      	str	r2, [r3, #8]
 8021c40:	60da      	str	r2, [r3, #12]
 8021c42:	611a      	str	r2, [r3, #16]
 8021c44:	615a      	str	r2, [r3, #20]
 8021c46:	619a      	str	r2, [r3, #24]
 8021c48:	687b      	ldr	r3, [r7, #4]
 8021c4a:	2200      	movs	r2, #0
 8021c4c:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 8021c50:	687b      	ldr	r3, [r7, #4]
 8021c52:	4618      	mov	r0, r3
 8021c54:	3708      	adds	r7, #8
 8021c56:	46bd      	mov	sp, r7
 8021c58:	bd80      	pop	{r7, pc}
	...

08021c5c <_ZN10LineSensor4InitEv>:

void LineSensor::Init()
{
 8021c5c:	b580      	push	{r7, lr}
 8021c5e:	b082      	sub	sp, #8
 8021c60:	af00      	add	r7, sp, #0
 8021c62:	6078      	str	r0, [r7, #4]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)line_sensors_buff_, NUM_OF_LINE_SENSORS) != HAL_OK)
 8021c64:	687b      	ldr	r3, [r7, #4]
 8021c66:	220e      	movs	r2, #14
 8021c68:	4619      	mov	r1, r3
 8021c6a:	4815      	ldr	r0, [pc, #84]	; (8021cc0 <_ZN10LineSensor4InitEv+0x64>)
 8021c6c:	f004 fc6a 	bl	8026544 <HAL_ADC_Start_DMA>
 8021c70:	4603      	mov	r3, r0
 8021c72:	2b00      	cmp	r3, #0
 8021c74:	bf14      	ite	ne
 8021c76:	2301      	movne	r3, #1
 8021c78:	2300      	moveq	r3, #0
 8021c7a:	b2db      	uxtb	r3, r3
 8021c7c:	2b00      	cmp	r3, #0
 8021c7e:	d004      	beq.n	8021c8a <_ZN10LineSensor4InitEv+0x2e>
    {
#ifdef DEBUG_MODE
        g_error_handler_adc1 = true;
 8021c80:	4b10      	ldr	r3, [pc, #64]	; (8021cc4 <_ZN10LineSensor4InitEv+0x68>)
 8021c82:	2201      	movs	r2, #1
 8021c84:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8021c86:	f002 f94f 	bl	8023f28 <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1) != HAL_OK)
 8021c8a:	2100      	movs	r1, #0
 8021c8c:	480e      	ldr	r0, [pc, #56]	; (8021cc8 <_ZN10LineSensor4InitEv+0x6c>)
 8021c8e:	f007 fc59 	bl	8029544 <HAL_TIM_PWM_Start>
 8021c92:	4603      	mov	r3, r0
 8021c94:	2b00      	cmp	r3, #0
 8021c96:	bf14      	ite	ne
 8021c98:	2301      	movne	r3, #1
 8021c9a:	2300      	moveq	r3, #0
 8021c9c:	b2db      	uxtb	r3, r3
 8021c9e:	2b00      	cmp	r3, #0
 8021ca0:	d004      	beq.n	8021cac <_ZN10LineSensor4InitEv+0x50>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim11 = true;
 8021ca2:	4b0a      	ldr	r3, [pc, #40]	; (8021ccc <_ZN10LineSensor4InitEv+0x70>)
 8021ca4:	2201      	movs	r2, #1
 8021ca6:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8021ca8:	f002 f93e 	bl	8023f28 <Error_Handler>
    }

    __HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, LINE_SENSORS_LED_COMPARE);
 8021cac:	4b06      	ldr	r3, [pc, #24]	; (8021cc8 <_ZN10LineSensor4InitEv+0x6c>)
 8021cae:	681b      	ldr	r3, [r3, #0]
 8021cb0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8021cb4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8021cb6:	bf00      	nop
 8021cb8:	3708      	adds	r7, #8
 8021cba:	46bd      	mov	sp, r7
 8021cbc:	bd80      	pop	{r7, pc}
 8021cbe:	bf00      	nop
 8021cc0:	200007e8 	.word	0x200007e8
 8021cc4:	200000be 	.word	0x200000be
 8021cc8:	20000830 	.word	0x20000830
 8021ccc:	200000bf 	.word	0x200000bf

08021cd0 <_ZN10LineSensor20StoreConsecutiveBuffEv>:

void LineSensor::StoreConsecutiveBuff()
{
 8021cd0:	b480      	push	{r7}
 8021cd2:	b085      	sub	sp, #20
 8021cd4:	af00      	add	r7, sp, #0
 8021cd6:	6078      	str	r0, [r7, #4]
    static uint8_t times = 0;

    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021cd8:	2300      	movs	r3, #0
 8021cda:	60fb      	str	r3, [r7, #12]
 8021cdc:	68fb      	ldr	r3, [r7, #12]
 8021cde:	2b0d      	cmp	r3, #13
 8021ce0:	dc16      	bgt.n	8021d10 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x40>
    {
        consecutive_line_sensors_buff_[times][i] = line_sensors_buff_[i];
 8021ce2:	4b15      	ldr	r3, [pc, #84]	; (8021d38 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021ce4:	781b      	ldrb	r3, [r3, #0]
 8021ce6:	4619      	mov	r1, r3
 8021ce8:	687b      	ldr	r3, [r7, #4]
 8021cea:	68fa      	ldr	r2, [r7, #12]
 8021cec:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8021cf0:	687a      	ldr	r2, [r7, #4]
 8021cf2:	460b      	mov	r3, r1
 8021cf4:	00db      	lsls	r3, r3, #3
 8021cf6:	1a5b      	subs	r3, r3, r1
 8021cf8:	005b      	lsls	r3, r3, #1
 8021cfa:	68f9      	ldr	r1, [r7, #12]
 8021cfc:	440b      	add	r3, r1
 8021cfe:	330c      	adds	r3, #12
 8021d00:	005b      	lsls	r3, r3, #1
 8021d02:	4413      	add	r3, r2
 8021d04:	4602      	mov	r2, r0
 8021d06:	809a      	strh	r2, [r3, #4]
    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021d08:	68fb      	ldr	r3, [r7, #12]
 8021d0a:	3301      	adds	r3, #1
 8021d0c:	60fb      	str	r3, [r7, #12]
 8021d0e:	e7e5      	b.n	8021cdc <_ZN10LineSensor20StoreConsecutiveBuffEv+0xc>
    }

    times++;
 8021d10:	4b09      	ldr	r3, [pc, #36]	; (8021d38 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021d12:	781b      	ldrb	r3, [r3, #0]
 8021d14:	3301      	adds	r3, #1
 8021d16:	b2da      	uxtb	r2, r3
 8021d18:	4b07      	ldr	r3, [pc, #28]	; (8021d38 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021d1a:	701a      	strb	r2, [r3, #0]
    if(times >= CONSECUTIVE_TIMES) times = 0;
 8021d1c:	4b06      	ldr	r3, [pc, #24]	; (8021d38 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021d1e:	781b      	ldrb	r3, [r3, #0]
 8021d20:	2b09      	cmp	r3, #9
 8021d22:	d902      	bls.n	8021d2a <_ZN10LineSensor20StoreConsecutiveBuffEv+0x5a>
 8021d24:	4b04      	ldr	r3, [pc, #16]	; (8021d38 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021d26:	2200      	movs	r2, #0
 8021d28:	701a      	strb	r2, [r3, #0]
}
 8021d2a:	bf00      	nop
 8021d2c:	3714      	adds	r7, #20
 8021d2e:	46bd      	mov	sp, r7
 8021d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d34:	4770      	bx	lr
 8021d36:	bf00      	nop
 8021d38:	2000003c 	.word	0x2000003c

08021d3c <_ZN10LineSensor9MergeSortEPthh>:

void LineSensor::MergeSort(uint16_t array[], uint8_t first_index, uint8_t last_index)
{
 8021d3c:	b5b0      	push	{r4, r5, r7, lr}
 8021d3e:	b088      	sub	sp, #32
 8021d40:	af00      	add	r7, sp, #0
 8021d42:	60f8      	str	r0, [r7, #12]
 8021d44:	60b9      	str	r1, [r7, #8]
 8021d46:	4611      	mov	r1, r2
 8021d48:	461a      	mov	r2, r3
 8021d4a:	460b      	mov	r3, r1
 8021d4c:	71fb      	strb	r3, [r7, #7]
 8021d4e:	4613      	mov	r3, r2
 8021d50:	71bb      	strb	r3, [r7, #6]

    for(i = first_index; i <= last_index; i++)
    {
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
        else                                     array[i] = temp_array[right--];
    }
 8021d52:	466b      	mov	r3, sp
 8021d54:	461d      	mov	r5, r3
    if(first_index >= last_index) return;
 8021d56:	79fa      	ldrb	r2, [r7, #7]
 8021d58:	79bb      	ldrb	r3, [r7, #6]
 8021d5a:	429a      	cmp	r2, r3
 8021d5c:	f080 80ba 	bcs.w	8021ed4 <_ZN10LineSensor9MergeSortEPthh+0x198>
    uint16_t temp_array[last_index+1];
 8021d60:	79b8      	ldrb	r0, [r7, #6]
 8021d62:	61b8      	str	r0, [r7, #24]
 8021d64:	4603      	mov	r3, r0
 8021d66:	3301      	adds	r3, #1
 8021d68:	4619      	mov	r1, r3
 8021d6a:	f04f 0200 	mov.w	r2, #0
 8021d6e:	f04f 0300 	mov.w	r3, #0
 8021d72:	f04f 0400 	mov.w	r4, #0
 8021d76:	0114      	lsls	r4, r2, #4
 8021d78:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8021d7c:	010b      	lsls	r3, r1, #4
 8021d7e:	4603      	mov	r3, r0
 8021d80:	3301      	adds	r3, #1
 8021d82:	4619      	mov	r1, r3
 8021d84:	f04f 0200 	mov.w	r2, #0
 8021d88:	f04f 0300 	mov.w	r3, #0
 8021d8c:	f04f 0400 	mov.w	r4, #0
 8021d90:	0114      	lsls	r4, r2, #4
 8021d92:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8021d96:	010b      	lsls	r3, r1, #4
 8021d98:	4603      	mov	r3, r0
 8021d9a:	3301      	adds	r3, #1
 8021d9c:	005b      	lsls	r3, r3, #1
 8021d9e:	3301      	adds	r3, #1
 8021da0:	3307      	adds	r3, #7
 8021da2:	08db      	lsrs	r3, r3, #3
 8021da4:	00db      	lsls	r3, r3, #3
 8021da6:	ebad 0d03 	sub.w	sp, sp, r3
 8021daa:	466b      	mov	r3, sp
 8021dac:	3301      	adds	r3, #1
 8021dae:	085b      	lsrs	r3, r3, #1
 8021db0:	005b      	lsls	r3, r3, #1
 8021db2:	617b      	str	r3, [r7, #20]
    middle = (first_index + last_index) / 2;
 8021db4:	79fa      	ldrb	r2, [r7, #7]
 8021db6:	79bb      	ldrb	r3, [r7, #6]
 8021db8:	4413      	add	r3, r2
 8021dba:	0fda      	lsrs	r2, r3, #31
 8021dbc:	4413      	add	r3, r2
 8021dbe:	105b      	asrs	r3, r3, #1
 8021dc0:	74fb      	strb	r3, [r7, #19]
    MergeSort(array, first_index, middle);
 8021dc2:	7cfb      	ldrb	r3, [r7, #19]
 8021dc4:	79fa      	ldrb	r2, [r7, #7]
 8021dc6:	68b9      	ldr	r1, [r7, #8]
 8021dc8:	68f8      	ldr	r0, [r7, #12]
 8021dca:	f7ff ffb7 	bl	8021d3c <_ZN10LineSensor9MergeSortEPthh>
    MergeSort(array, middle+1, last_index);
 8021dce:	7cfb      	ldrb	r3, [r7, #19]
 8021dd0:	3301      	adds	r3, #1
 8021dd2:	b2da      	uxtb	r2, r3
 8021dd4:	79bb      	ldrb	r3, [r7, #6]
 8021dd6:	68b9      	ldr	r1, [r7, #8]
 8021dd8:	68f8      	ldr	r0, [r7, #12]
 8021dda:	f7ff ffaf 	bl	8021d3c <_ZN10LineSensor9MergeSortEPthh>
    for(i = middle; i >= first_index; i--)
 8021dde:	7cfb      	ldrb	r3, [r7, #19]
 8021de0:	77bb      	strb	r3, [r7, #30]
 8021de2:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021de6:	79fb      	ldrb	r3, [r7, #7]
 8021de8:	429a      	cmp	r2, r3
 8021dea:	db11      	blt.n	8021e10 <_ZN10LineSensor9MergeSortEPthh+0xd4>
        temp_array[i] = array[i];
 8021dec:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021df0:	005b      	lsls	r3, r3, #1
 8021df2:	68ba      	ldr	r2, [r7, #8]
 8021df4:	4413      	add	r3, r2
 8021df6:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021dfa:	8819      	ldrh	r1, [r3, #0]
 8021dfc:	697b      	ldr	r3, [r7, #20]
 8021dfe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle; i >= first_index; i--)
 8021e02:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021e06:	b2db      	uxtb	r3, r3
 8021e08:	3b01      	subs	r3, #1
 8021e0a:	b2db      	uxtb	r3, r3
 8021e0c:	77bb      	strb	r3, [r7, #30]
 8021e0e:	e7e8      	b.n	8021de2 <_ZN10LineSensor9MergeSortEPthh+0xa6>
    for(i = middle+1; i <= last_index; i++)
 8021e10:	7cfb      	ldrb	r3, [r7, #19]
 8021e12:	3301      	adds	r3, #1
 8021e14:	b2db      	uxtb	r3, r3
 8021e16:	77bb      	strb	r3, [r7, #30]
 8021e18:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021e1c:	79bb      	ldrb	r3, [r7, #6]
 8021e1e:	429a      	cmp	r2, r3
 8021e20:	dc17      	bgt.n	8021e52 <_ZN10LineSensor9MergeSortEPthh+0x116>
        temp_array[last_index - (i - (middle+1))] = array[i];
 8021e22:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021e26:	005b      	lsls	r3, r3, #1
 8021e28:	68ba      	ldr	r2, [r7, #8]
 8021e2a:	4413      	add	r3, r2
 8021e2c:	79b9      	ldrb	r1, [r7, #6]
 8021e2e:	f997 001e 	ldrsb.w	r0, [r7, #30]
 8021e32:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8021e36:	3201      	adds	r2, #1
 8021e38:	1a82      	subs	r2, r0, r2
 8021e3a:	1a8a      	subs	r2, r1, r2
 8021e3c:	8819      	ldrh	r1, [r3, #0]
 8021e3e:	697b      	ldr	r3, [r7, #20]
 8021e40:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle+1; i <= last_index; i++)
 8021e44:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021e48:	b2db      	uxtb	r3, r3
 8021e4a:	3301      	adds	r3, #1
 8021e4c:	b2db      	uxtb	r3, r3
 8021e4e:	77bb      	strb	r3, [r7, #30]
 8021e50:	e7e2      	b.n	8021e18 <_ZN10LineSensor9MergeSortEPthh+0xdc>
    left  = first_index;
 8021e52:	79fb      	ldrb	r3, [r7, #7]
 8021e54:	77fb      	strb	r3, [r7, #31]
    right = last_index;
 8021e56:	79bb      	ldrb	r3, [r7, #6]
 8021e58:	777b      	strb	r3, [r7, #29]
    for(i = first_index; i <= last_index; i++)
 8021e5a:	79fb      	ldrb	r3, [r7, #7]
 8021e5c:	77bb      	strb	r3, [r7, #30]
 8021e5e:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021e62:	79bb      	ldrb	r3, [r7, #6]
 8021e64:	429a      	cmp	r2, r3
 8021e66:	dc33      	bgt.n	8021ed0 <_ZN10LineSensor9MergeSortEPthh+0x194>
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
 8021e68:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8021e6c:	697b      	ldr	r3, [r7, #20]
 8021e6e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8021e72:	f997 101d 	ldrsb.w	r1, [r7, #29]
 8021e76:	697b      	ldr	r3, [r7, #20]
 8021e78:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8021e7c:	429a      	cmp	r2, r3
 8021e7e:	d210      	bcs.n	8021ea2 <_ZN10LineSensor9MergeSortEPthh+0x166>
 8021e80:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8021e84:	b2d3      	uxtb	r3, r2
 8021e86:	3301      	adds	r3, #1
 8021e88:	b2db      	uxtb	r3, r3
 8021e8a:	77fb      	strb	r3, [r7, #31]
 8021e8c:	4611      	mov	r1, r2
 8021e8e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021e92:	005b      	lsls	r3, r3, #1
 8021e94:	68ba      	ldr	r2, [r7, #8]
 8021e96:	4413      	add	r3, r2
 8021e98:	697a      	ldr	r2, [r7, #20]
 8021e9a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8021e9e:	801a      	strh	r2, [r3, #0]
 8021ea0:	e00f      	b.n	8021ec2 <_ZN10LineSensor9MergeSortEPthh+0x186>
        else                                     array[i] = temp_array[right--];
 8021ea2:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8021ea6:	b2d3      	uxtb	r3, r2
 8021ea8:	3b01      	subs	r3, #1
 8021eaa:	b2db      	uxtb	r3, r3
 8021eac:	777b      	strb	r3, [r7, #29]
 8021eae:	4611      	mov	r1, r2
 8021eb0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021eb4:	005b      	lsls	r3, r3, #1
 8021eb6:	68ba      	ldr	r2, [r7, #8]
 8021eb8:	4413      	add	r3, r2
 8021eba:	697a      	ldr	r2, [r7, #20]
 8021ebc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8021ec0:	801a      	strh	r2, [r3, #0]
    for(i = first_index; i <= last_index; i++)
 8021ec2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021ec6:	b2db      	uxtb	r3, r3
 8021ec8:	3301      	adds	r3, #1
 8021eca:	b2db      	uxtb	r3, r3
 8021ecc:	77bb      	strb	r3, [r7, #30]
 8021ece:	e7c6      	b.n	8021e5e <_ZN10LineSensor9MergeSortEPthh+0x122>
 8021ed0:	46ad      	mov	sp, r5
 8021ed2:	e001      	b.n	8021ed8 <_ZN10LineSensor9MergeSortEPthh+0x19c>
    if(first_index >= last_index) return;
 8021ed4:	bf00      	nop
 8021ed6:	46ad      	mov	sp, r5
}
 8021ed8:	3720      	adds	r7, #32
 8021eda:	46bd      	mov	sp, r7
 8021edc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08021ee0 <_ZN10LineSensor6UpdateEv>:

void LineSensor::Update()
{
 8021ee0:	b590      	push	{r4, r7, lr}
 8021ee2:	b08b      	sub	sp, #44	; 0x2c
 8021ee4:	af00      	add	r7, sp, #0
 8021ee6:	6078      	str	r0, [r7, #4]
    uint8_t i, j;
    uint16_t temp_array[CONSECUTIVE_TIMES];
    uint16_t median, max, min, normalized;
    bool emergency = true;
 8021ee8:	2301      	movs	r3, #1
 8021eea:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021eee:	2300      	movs	r3, #0
 8021ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021ef8:	2b0d      	cmp	r3, #13
 8021efa:	f200 80c8 	bhi.w	802208e <_ZN10LineSensor6UpdateEv+0x1ae>
    {
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021efe:	2300      	movs	r3, #0
 8021f00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021f04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021f08:	2b09      	cmp	r3, #9
 8021f0a:	d81b      	bhi.n	8021f44 <_ZN10LineSensor6UpdateEv+0x64>
        {
            temp_array[j] = consecutive_line_sensors_buff_[j][i];
 8021f0c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8021f10:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8021f14:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8021f18:	6878      	ldr	r0, [r7, #4]
 8021f1a:	4613      	mov	r3, r2
 8021f1c:	00db      	lsls	r3, r3, #3
 8021f1e:	1a9b      	subs	r3, r3, r2
 8021f20:	005b      	lsls	r3, r3, #1
 8021f22:	4423      	add	r3, r4
 8021f24:	330c      	adds	r3, #12
 8021f26:	005b      	lsls	r3, r3, #1
 8021f28:	4403      	add	r3, r0
 8021f2a:	889a      	ldrh	r2, [r3, #4]
 8021f2c:	004b      	lsls	r3, r1, #1
 8021f2e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8021f32:	440b      	add	r3, r1
 8021f34:	f823 2c20 	strh.w	r2, [r3, #-32]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021f38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021f3c:	3301      	adds	r3, #1
 8021f3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021f42:	e7df      	b.n	8021f04 <_ZN10LineSensor6UpdateEv+0x24>
        }

        MergeSort(temp_array, 0, CONSECUTIVE_TIMES-1);
 8021f44:	f107 0108 	add.w	r1, r7, #8
 8021f48:	2309      	movs	r3, #9
 8021f4a:	2200      	movs	r2, #0
 8021f4c:	6878      	ldr	r0, [r7, #4]
 8021f4e:	f7ff fef5 	bl	8021d3c <_ZN10LineSensor9MergeSortEPthh>
        median = temp_array[HALF_CONSECUTIVE_TIMES];
 8021f52:	8a7b      	ldrh	r3, [r7, #18]
 8021f54:	83fb      	strh	r3, [r7, #30]

#ifdef DEBUG_MODE
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021f56:	2300      	movs	r3, #0
 8021f58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021f5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021f60:	2b09      	cmp	r3, #9
 8021f62:	d81a      	bhi.n	8021f9a <_ZN10LineSensor6UpdateEv+0xba>
        {
            g_consecutive_line_buff[i][j] = temp_array[j];
 8021f64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021f68:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021f6c:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8021f70:	005b      	lsls	r3, r3, #1
 8021f72:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8021f76:	4403      	add	r3, r0
 8021f78:	f833 4c20 	ldrh.w	r4, [r3, #-32]
 8021f7c:	4848      	ldr	r0, [pc, #288]	; (80220a0 <_ZN10LineSensor6UpdateEv+0x1c0>)
 8021f7e:	4613      	mov	r3, r2
 8021f80:	009b      	lsls	r3, r3, #2
 8021f82:	4413      	add	r3, r2
 8021f84:	005b      	lsls	r3, r3, #1
 8021f86:	440b      	add	r3, r1
 8021f88:	4622      	mov	r2, r4
 8021f8a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021f8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021f92:	3301      	adds	r3, #1
 8021f94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021f98:	e7e0      	b.n	8021f5c <_ZN10LineSensor6UpdateEv+0x7c>
        }
#endif // DEBUG_MODE

        max = max_line_sensors_valu_[i];
 8021f9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021f9e:	687a      	ldr	r2, [r7, #4]
 8021fa0:	3398      	adds	r3, #152	; 0x98
 8021fa2:	005b      	lsls	r3, r3, #1
 8021fa4:	4413      	add	r3, r2
 8021fa6:	889b      	ldrh	r3, [r3, #4]
 8021fa8:	84bb      	strh	r3, [r7, #36]	; 0x24
        min = min_line_sensors_valu_[i];
 8021faa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021fae:	687b      	ldr	r3, [r7, #4]
 8021fb0:	32a8      	adds	r2, #168	; 0xa8
 8021fb2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8021fb6:	847b      	strh	r3, [r7, #34]	; 0x22
        if(max < median || max == 0) max = median;
 8021fb8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021fba:	8bfb      	ldrh	r3, [r7, #30]
 8021fbc:	429a      	cmp	r2, r3
 8021fbe:	d302      	bcc.n	8021fc6 <_ZN10LineSensor6UpdateEv+0xe6>
 8021fc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021fc2:	2b00      	cmp	r3, #0
 8021fc4:	d101      	bne.n	8021fca <_ZN10LineSensor6UpdateEv+0xea>
 8021fc6:	8bfb      	ldrh	r3, [r7, #30]
 8021fc8:	84bb      	strh	r3, [r7, #36]	; 0x24
        if(min > median || min == 0) min = median;
 8021fca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8021fcc:	8bfb      	ldrh	r3, [r7, #30]
 8021fce:	429a      	cmp	r2, r3
 8021fd0:	d802      	bhi.n	8021fd8 <_ZN10LineSensor6UpdateEv+0xf8>
 8021fd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021fd4:	2b00      	cmp	r3, #0
 8021fd6:	d101      	bne.n	8021fdc <_ZN10LineSensor6UpdateEv+0xfc>
 8021fd8:	8bfb      	ldrh	r3, [r7, #30]
 8021fda:	847b      	strh	r3, [r7, #34]	; 0x22
        max_line_sensors_valu_[i] = max;
 8021fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021fe0:	687a      	ldr	r2, [r7, #4]
 8021fe2:	3398      	adds	r3, #152	; 0x98
 8021fe4:	005b      	lsls	r3, r3, #1
 8021fe6:	4413      	add	r3, r2
 8021fe8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021fea:	809a      	strh	r2, [r3, #4]
        min_line_sensors_valu_[i] = min;
 8021fec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021ff0:	687b      	ldr	r3, [r7, #4]
 8021ff2:	32a8      	adds	r2, #168	; 0xa8
 8021ff4:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8021ff6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

#ifdef DEBUG_MODE
        g_max_line_valu[i] = max_line_sensors_valu_[i];
 8021ffa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021ffe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8022002:	6879      	ldr	r1, [r7, #4]
 8022004:	3398      	adds	r3, #152	; 0x98
 8022006:	005b      	lsls	r3, r3, #1
 8022008:	440b      	add	r3, r1
 802200a:	8899      	ldrh	r1, [r3, #4]
 802200c:	4b25      	ldr	r3, [pc, #148]	; (80220a4 <_ZN10LineSensor6UpdateEv+0x1c4>)
 802200e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        g_min_line_valu[i] = min_line_sensors_valu_[i];
 8022012:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8022016:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802201a:	687a      	ldr	r2, [r7, #4]
 802201c:	31a8      	adds	r1, #168	; 0xa8
 802201e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8022022:	4a21      	ldr	r2, [pc, #132]	; (80220a8 <_ZN10LineSensor6UpdateEv+0x1c8>)
 8022024:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#endif // DEBUG_MODE

        if(max > min)
 8022028:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802202a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802202c:	429a      	cmp	r2, r3
 802202e:	d928      	bls.n	8022082 <_ZN10LineSensor6UpdateEv+0x1a2>
        {
            normalized = MAX_NORMALIZED_VALU * (median - min) / (max - min);
 8022030:	8bfa      	ldrh	r2, [r7, #30]
 8022032:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022034:	1ad3      	subs	r3, r2, r3
 8022036:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 802203a:	fb02 f203 	mul.w	r2, r2, r3
 802203e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8022040:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022042:	1acb      	subs	r3, r1, r3
 8022044:	fb92 f3f3 	sdiv	r3, r2, r3
 8022048:	83bb      	strh	r3, [r7, #28]
            line_sensors_valu_[i] = normalized;
 802204a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802204e:	687a      	ldr	r2, [r7, #4]
 8022050:	33b4      	adds	r3, #180	; 0xb4
 8022052:	005b      	lsls	r3, r3, #1
 8022054:	4413      	add	r3, r2
 8022056:	8bba      	ldrh	r2, [r7, #28]
 8022058:	809a      	strh	r2, [r3, #4]

#ifdef DEBUG_MODE
            g_line_valu[i] = line_sensors_valu_[i];
 802205a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802205e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8022062:	6879      	ldr	r1, [r7, #4]
 8022064:	33b4      	adds	r3, #180	; 0xb4
 8022066:	005b      	lsls	r3, r3, #1
 8022068:	440b      	add	r3, r1
 802206a:	8899      	ldrh	r1, [r3, #4]
 802206c:	4b0f      	ldr	r3, [pc, #60]	; (80220ac <_ZN10LineSensor6UpdateEv+0x1cc>)
 802206e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
#endif // DEBUG_MODE

            if(normalized < EMERGENCY_STOP_BORDER) emergency = false;
 8022072:	8bbb      	ldrh	r3, [r7, #28]
 8022074:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8022078:	4293      	cmp	r3, r2
 802207a:	d802      	bhi.n	8022082 <_ZN10LineSensor6UpdateEv+0x1a2>
 802207c:	2300      	movs	r3, #0
 802207e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8022082:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8022086:	3301      	adds	r3, #1
 8022088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802208c:	e732      	b.n	8021ef4 <_ZN10LineSensor6UpdateEv+0x14>
        }
    }
    emergency_stop_flag_ = emergency;
 802208e:	687b      	ldr	r3, [r7, #4]
 8022090:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8022094:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
}
 8022098:	bf00      	nop
 802209a:	372c      	adds	r7, #44	; 0x2c
 802209c:	46bd      	mov	sp, r7
 802209e:	bd90      	pop	{r4, r7, pc}
 80220a0:	200000e0 	.word	0x200000e0
 80220a4:	200001f8 	.word	0x200001f8
 80220a8:	20000214 	.word	0x20000214
 80220ac:	20000230 	.word	0x20000230

080220b0 <_ZN10LineSensor19LeftRightDifferenceEv>:

float LineSensor::LeftRightDifference()
{
 80220b0:	b5b0      	push	{r4, r5, r7, lr}
 80220b2:	b086      	sub	sp, #24
 80220b4:	af00      	add	r7, sp, #0
 80220b6:	6078      	str	r0, [r7, #4]
    uint8_t i;
    uint32_t left = 0, right = 0;
 80220b8:	2300      	movs	r3, #0
 80220ba:	613b      	str	r3, [r7, #16]
 80220bc:	2300      	movs	r3, #0
 80220be:	60fb      	str	r3, [r7, #12]

    for(i = 0; i < HALF_NUM_OF_LINE_SENSORS; i++)
 80220c0:	2300      	movs	r3, #0
 80220c2:	75fb      	strb	r3, [r7, #23]
 80220c4:	7dfb      	ldrb	r3, [r7, #23]
 80220c6:	2b06      	cmp	r3, #6
 80220c8:	d80d      	bhi.n	80220e6 <_ZN10LineSensor19LeftRightDifferenceEv+0x36>
    {
        left += line_sensors_valu_[i];
 80220ca:	7dfb      	ldrb	r3, [r7, #23]
 80220cc:	687a      	ldr	r2, [r7, #4]
 80220ce:	33b4      	adds	r3, #180	; 0xb4
 80220d0:	005b      	lsls	r3, r3, #1
 80220d2:	4413      	add	r3, r2
 80220d4:	889b      	ldrh	r3, [r3, #4]
 80220d6:	461a      	mov	r2, r3
 80220d8:	693b      	ldr	r3, [r7, #16]
 80220da:	4413      	add	r3, r2
 80220dc:	613b      	str	r3, [r7, #16]
    for(i = 0; i < HALF_NUM_OF_LINE_SENSORS; i++)
 80220de:	7dfb      	ldrb	r3, [r7, #23]
 80220e0:	3301      	adds	r3, #1
 80220e2:	75fb      	strb	r3, [r7, #23]
 80220e4:	e7ee      	b.n	80220c4 <_ZN10LineSensor19LeftRightDifferenceEv+0x14>
    }
    for(i = HALF_NUM_OF_LINE_SENSORS; i < NUM_OF_LINE_SENSORS; i++)
 80220e6:	2307      	movs	r3, #7
 80220e8:	75fb      	strb	r3, [r7, #23]
 80220ea:	7dfb      	ldrb	r3, [r7, #23]
 80220ec:	2b0d      	cmp	r3, #13
 80220ee:	d80d      	bhi.n	802210c <_ZN10LineSensor19LeftRightDifferenceEv+0x5c>
    {
        right += line_sensors_valu_[i];
 80220f0:	7dfb      	ldrb	r3, [r7, #23]
 80220f2:	687a      	ldr	r2, [r7, #4]
 80220f4:	33b4      	adds	r3, #180	; 0xb4
 80220f6:	005b      	lsls	r3, r3, #1
 80220f8:	4413      	add	r3, r2
 80220fa:	889b      	ldrh	r3, [r3, #4]
 80220fc:	461a      	mov	r2, r3
 80220fe:	68fb      	ldr	r3, [r7, #12]
 8022100:	4413      	add	r3, r2
 8022102:	60fb      	str	r3, [r7, #12]
    for(i = HALF_NUM_OF_LINE_SENSORS; i < NUM_OF_LINE_SENSORS; i++)
 8022104:	7dfb      	ldrb	r3, [r7, #23]
 8022106:	3301      	adds	r3, #1
 8022108:	75fb      	strb	r3, [r7, #23]
 802210a:	e7ee      	b.n	80220ea <_ZN10LineSensor19LeftRightDifferenceEv+0x3a>
    }

#ifdef DEBUG_MODE
    g_line_left = left;
 802210c:	4a11      	ldr	r2, [pc, #68]	; (8022154 <_ZN10LineSensor19LeftRightDifferenceEv+0xa4>)
 802210e:	693b      	ldr	r3, [r7, #16]
 8022110:	6013      	str	r3, [r2, #0]
    g_line_right = right;
 8022112:	4a11      	ldr	r2, [pc, #68]	; (8022158 <_ZN10LineSensor19LeftRightDifferenceEv+0xa8>)
 8022114:	68fb      	ldr	r3, [r7, #12]
 8022116:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    float difference = right * LINE_SENSOR_CORRECTION - left;
 8022118:	68f8      	ldr	r0, [r7, #12]
 802211a:	f7fe f8d3 	bl	80202c4 <__aeabi_ui2d>
 802211e:	4604      	mov	r4, r0
 8022120:	460d      	mov	r5, r1
 8022122:	6938      	ldr	r0, [r7, #16]
 8022124:	f7fe f8ce 	bl	80202c4 <__aeabi_ui2d>
 8022128:	4602      	mov	r2, r0
 802212a:	460b      	mov	r3, r1
 802212c:	4620      	mov	r0, r4
 802212e:	4629      	mov	r1, r5
 8022130:	f7fd ff8a 	bl	8020048 <__aeabi_dsub>
 8022134:	4603      	mov	r3, r0
 8022136:	460c      	mov	r4, r1
 8022138:	4618      	mov	r0, r3
 802213a:	4621      	mov	r1, r4
 802213c:	f7fe fbd6 	bl	80208ec <__aeabi_d2f>
 8022140:	4603      	mov	r3, r0
 8022142:	60bb      	str	r3, [r7, #8]

    return difference;
 8022144:	68bb      	ldr	r3, [r7, #8]
 8022146:	ee07 3a90 	vmov	s15, r3
}
 802214a:	eeb0 0a67 	vmov.f32	s0, s15
 802214e:	3718      	adds	r7, #24
 8022150:	46bd      	mov	sp, r7
 8022152:	bdb0      	pop	{r4, r5, r7, pc}
 8022154:	2000024c 	.word	0x2000024c
 8022158:	20000250 	.word	0x20000250

0802215c <_ZN10LineSensor20GetEmergencyStopFlagEv>:

bool LineSensor::GetEmergencyStopFlag()
{
 802215c:	b480      	push	{r7}
 802215e:	b083      	sub	sp, #12
 8022160:	af00      	add	r7, sp, #0
 8022162:	6078      	str	r0, [r7, #4]
    return emergency_stop_flag_;
 8022164:	687b      	ldr	r3, [r7, #4]
 8022166:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
}
 802216a:	4618      	mov	r0, r3
 802216c:	370c      	adds	r7, #12
 802216e:	46bd      	mov	sp, r7
 8022170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022174:	4770      	bx	lr
	...

08022178 <_ZN10LineSensor16CheckCalibrationEv>:

bool LineSensor::CheckCalibration()
{
 8022178:	b480      	push	{r7}
 802217a:	b085      	sub	sp, #20
 802217c:	af00      	add	r7, sp, #0
 802217e:	6078      	str	r0, [r7, #4]
    static uint16_t timer = 0;
    static uint16_t pre_max[NUM_OF_LINE_SENSORS] = {0};
    static uint16_t pre_min[NUM_OF_LINE_SENSORS] = {0};
    uint16_t max, min;
    bool result = true;
 8022180:	2301      	movs	r3, #1
 8022182:	73fb      	strb	r3, [r7, #15]

    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8022184:	2300      	movs	r3, #0
 8022186:	73bb      	strb	r3, [r7, #14]
 8022188:	7bbb      	ldrb	r3, [r7, #14]
 802218a:	2b0d      	cmp	r3, #13
 802218c:	d82d      	bhi.n	80221ea <_ZN10LineSensor16CheckCalibrationEv+0x72>
    {
        max = max_line_sensors_valu_[i];
 802218e:	7bbb      	ldrb	r3, [r7, #14]
 8022190:	687a      	ldr	r2, [r7, #4]
 8022192:	3398      	adds	r3, #152	; 0x98
 8022194:	005b      	lsls	r3, r3, #1
 8022196:	4413      	add	r3, r2
 8022198:	889b      	ldrh	r3, [r3, #4]
 802219a:	81bb      	strh	r3, [r7, #12]
        min = min_line_sensors_valu_[i];
 802219c:	7bba      	ldrb	r2, [r7, #14]
 802219e:	687b      	ldr	r3, [r7, #4]
 80221a0:	32a8      	adds	r2, #168	; 0xa8
 80221a2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80221a6:	817b      	strh	r3, [r7, #10]

        if(pre_max[i] != max)      result = false;
 80221a8:	7bbb      	ldrb	r3, [r7, #14]
 80221aa:	4a1e      	ldr	r2, [pc, #120]	; (8022224 <_ZN10LineSensor16CheckCalibrationEv+0xac>)
 80221ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80221b0:	89ba      	ldrh	r2, [r7, #12]
 80221b2:	429a      	cmp	r2, r3
 80221b4:	d002      	beq.n	80221bc <_ZN10LineSensor16CheckCalibrationEv+0x44>
 80221b6:	2300      	movs	r3, #0
 80221b8:	73fb      	strb	r3, [r7, #15]
 80221ba:	e008      	b.n	80221ce <_ZN10LineSensor16CheckCalibrationEv+0x56>
        else if(pre_min[i] != min) result = false;
 80221bc:	7bbb      	ldrb	r3, [r7, #14]
 80221be:	4a1a      	ldr	r2, [pc, #104]	; (8022228 <_ZN10LineSensor16CheckCalibrationEv+0xb0>)
 80221c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80221c4:	897a      	ldrh	r2, [r7, #10]
 80221c6:	429a      	cmp	r2, r3
 80221c8:	d001      	beq.n	80221ce <_ZN10LineSensor16CheckCalibrationEv+0x56>
 80221ca:	2300      	movs	r3, #0
 80221cc:	73fb      	strb	r3, [r7, #15]

        pre_max[i] = max;
 80221ce:	7bbb      	ldrb	r3, [r7, #14]
 80221d0:	4914      	ldr	r1, [pc, #80]	; (8022224 <_ZN10LineSensor16CheckCalibrationEv+0xac>)
 80221d2:	89ba      	ldrh	r2, [r7, #12]
 80221d4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        pre_min[i] = min;
 80221d8:	7bbb      	ldrb	r3, [r7, #14]
 80221da:	4913      	ldr	r1, [pc, #76]	; (8022228 <_ZN10LineSensor16CheckCalibrationEv+0xb0>)
 80221dc:	897a      	ldrh	r2, [r7, #10]
 80221de:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 80221e2:	7bbb      	ldrb	r3, [r7, #14]
 80221e4:	3301      	adds	r3, #1
 80221e6:	73bb      	strb	r3, [r7, #14]
 80221e8:	e7ce      	b.n	8022188 <_ZN10LineSensor16CheckCalibrationEv+0x10>
    }

    if(result)
 80221ea:	7bfb      	ldrb	r3, [r7, #15]
 80221ec:	2b00      	cmp	r3, #0
 80221ee:	d00e      	beq.n	802220e <_ZN10LineSensor16CheckCalibrationEv+0x96>
    {
        if(timer < CALIBRATION_SUCCESS_TIME)
 80221f0:	4b0e      	ldr	r3, [pc, #56]	; (802222c <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 80221f2:	881b      	ldrh	r3, [r3, #0]
 80221f4:	f240 52db 	movw	r2, #1499	; 0x5db
 80221f8:	4293      	cmp	r3, r2
 80221fa:	d80b      	bhi.n	8022214 <_ZN10LineSensor16CheckCalibrationEv+0x9c>
        {
            timer++;
 80221fc:	4b0b      	ldr	r3, [pc, #44]	; (802222c <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 80221fe:	881b      	ldrh	r3, [r3, #0]
 8022200:	3301      	adds	r3, #1
 8022202:	b29a      	uxth	r2, r3
 8022204:	4b09      	ldr	r3, [pc, #36]	; (802222c <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 8022206:	801a      	strh	r2, [r3, #0]
            result = false;
 8022208:	2300      	movs	r3, #0
 802220a:	73fb      	strb	r3, [r7, #15]
 802220c:	e002      	b.n	8022214 <_ZN10LineSensor16CheckCalibrationEv+0x9c>
        }
    }
    else timer = 0;
 802220e:	4b07      	ldr	r3, [pc, #28]	; (802222c <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 8022210:	2200      	movs	r2, #0
 8022212:	801a      	strh	r2, [r3, #0]
    
    return result;
 8022214:	7bfb      	ldrb	r3, [r7, #15]
}
 8022216:	4618      	mov	r0, r3
 8022218:	3714      	adds	r7, #20
 802221a:	46bd      	mov	sp, r7
 802221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022220:	4770      	bx	lr
 8022222:	bf00      	nop
 8022224:	20000040 	.word	0x20000040
 8022228:	2000005c 	.word	0x2000005c
 802222c:	2000003e 	.word	0x2000003e

08022230 <_ZN10LineSensor15MonitorLineBuffEv>:

#ifdef DEBUG_MODE
void LineSensor::MonitorLineBuff()
{
 8022230:	b480      	push	{r7}
 8022232:	b085      	sub	sp, #20
 8022234:	af00      	add	r7, sp, #0
 8022236:	6078      	str	r0, [r7, #4]
    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8022238:	2300      	movs	r3, #0
 802223a:	73fb      	strb	r3, [r7, #15]
 802223c:	7bfb      	ldrb	r3, [r7, #15]
 802223e:	2b0d      	cmp	r3, #13
 8022240:	d80b      	bhi.n	802225a <_ZN10LineSensor15MonitorLineBuffEv+0x2a>
    {
        g_line_buff[i] = line_sensors_buff_[i];
 8022242:	7bf9      	ldrb	r1, [r7, #15]
 8022244:	7bfb      	ldrb	r3, [r7, #15]
 8022246:	687a      	ldr	r2, [r7, #4]
 8022248:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 802224c:	4a06      	ldr	r2, [pc, #24]	; (8022268 <_ZN10LineSensor15MonitorLineBuffEv+0x38>)
 802224e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8022252:	7bfb      	ldrb	r3, [r7, #15]
 8022254:	3301      	adds	r3, #1
 8022256:	73fb      	strb	r3, [r7, #15]
 8022258:	e7f0      	b.n	802223c <_ZN10LineSensor15MonitorLineBuffEv+0xc>
    }
}
 802225a:	bf00      	nop
 802225c:	3714      	adds	r7, #20
 802225e:	46bd      	mov	sp, r7
 8022260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022264:	4770      	bx	lr
 8022266:	bf00      	nop
 8022268:	200000c4 	.word	0x200000c4

0802226c <_ZN9LineTraceC1EP10LineSensor>:
#include "line_trace.hpp"

LineTrace::LineTrace(LineSensor *line_sensor) : integral_error_(0)
 802226c:	b480      	push	{r7}
 802226e:	b083      	sub	sp, #12
 8022270:	af00      	add	r7, sp, #0
 8022272:	6078      	str	r0, [r7, #4]
 8022274:	6039      	str	r1, [r7, #0]
 8022276:	687b      	ldr	r3, [r7, #4]
 8022278:	f04f 0200 	mov.w	r2, #0
 802227c:	601a      	str	r2, [r3, #0]
{
    line_sensor_ = line_sensor;
 802227e:	687b      	ldr	r3, [r7, #4]
 8022280:	683a      	ldr	r2, [r7, #0]
 8022282:	605a      	str	r2, [r3, #4]
}
 8022284:	687b      	ldr	r3, [r7, #4]
 8022286:	4618      	mov	r0, r3
 8022288:	370c      	adds	r7, #12
 802228a:	46bd      	mov	sp, r7
 802228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022290:	4770      	bx	lr
	...

08022294 <_ZN9LineTrace13LineTraceOnlyEv>:

float LineTrace::LineTraceOnly()
{
 8022294:	b580      	push	{r7, lr}
 8022296:	b086      	sub	sp, #24
 8022298:	af00      	add	r7, sp, #0
 802229a:	6078      	str	r0, [r7, #4]
    float p_gain = LINE_ONLY_P_GAIN;
 802229c:	4b0b      	ldr	r3, [pc, #44]	; (80222cc <_ZN9LineTrace13LineTraceOnlyEv+0x38>)
 802229e:	617b      	str	r3, [r7, #20]
    float i_gain = LINE_ONLY_I_GAIN;
 80222a0:	f04f 0300 	mov.w	r3, #0
 80222a4:	613b      	str	r3, [r7, #16]
    float d_gain = LINE_ONLY_D_GAIN;
 80222a6:	f04f 0300 	mov.w	r3, #0
 80222aa:	60fb      	str	r3, [r7, #12]

    return PidControl(p_gain, i_gain, d_gain);
 80222ac:	ed97 1a03 	vldr	s2, [r7, #12]
 80222b0:	edd7 0a04 	vldr	s1, [r7, #16]
 80222b4:	ed97 0a05 	vldr	s0, [r7, #20]
 80222b8:	6878      	ldr	r0, [r7, #4]
 80222ba:	f000 f851 	bl	8022360 <_ZN9LineTrace10PidControlEfff>
 80222be:	eef0 7a40 	vmov.f32	s15, s0
}
 80222c2:	eeb0 0a67 	vmov.f32	s0, s15
 80222c6:	3718      	adds	r7, #24
 80222c8:	46bd      	mov	sp, r7
 80222ca:	bd80      	pop	{r7, pc}
 80222cc:	38d1b717 	.word	0x38d1b717

080222d0 <_ZN9LineTrace16DeterminePidGainEf>:

float LineTrace::DeterminePidGain(float target_velocity)
{
 80222d0:	b580      	push	{r7, lr}
 80222d2:	b086      	sub	sp, #24
 80222d4:	af00      	add	r7, sp, #0
 80222d6:	6078      	str	r0, [r7, #4]
 80222d8:	ed87 0a00 	vstr	s0, [r7]
    float p_gain, i_gain, d_gain;

    if(target_velocity < TARGET_VELOCITY_0)
 80222dc:	edd7 7a00 	vldr	s15, [r7]
 80222e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80222e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80222e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80222ec:	d509      	bpl.n	8022302 <_ZN9LineTrace16DeterminePidGainEf+0x32>
    {
        p_gain = LINE_P_GAIN_0;
 80222ee:	f04f 0300 	mov.w	r3, #0
 80222f2:	617b      	str	r3, [r7, #20]
        i_gain = LINE_I_GAIN_0;
 80222f4:	f04f 0300 	mov.w	r3, #0
 80222f8:	613b      	str	r3, [r7, #16]
        d_gain = LINE_D_GAIN_0;
 80222fa:	f04f 0300 	mov.w	r3, #0
 80222fe:	60fb      	str	r3, [r7, #12]
 8022300:	e01b      	b.n	802233a <_ZN9LineTrace16DeterminePidGainEf+0x6a>
    }
    else if(target_velocity < TARGET_VELOCITY_1)
 8022302:	edd7 7a00 	vldr	s15, [r7]
 8022306:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 802230a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802230e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022312:	d509      	bpl.n	8022328 <_ZN9LineTrace16DeterminePidGainEf+0x58>
    {
        p_gain = LINE_P_GAIN_1;
 8022314:	f04f 0300 	mov.w	r3, #0
 8022318:	617b      	str	r3, [r7, #20]
        i_gain = LINE_I_GAIN_1;
 802231a:	f04f 0300 	mov.w	r3, #0
 802231e:	613b      	str	r3, [r7, #16]
        d_gain = LINE_D_GAIN_1;
 8022320:	f04f 0300 	mov.w	r3, #0
 8022324:	60fb      	str	r3, [r7, #12]
 8022326:	e008      	b.n	802233a <_ZN9LineTrace16DeterminePidGainEf+0x6a>
    }
    else // Error handler
    {
        p_gain = 0;
 8022328:	f04f 0300 	mov.w	r3, #0
 802232c:	617b      	str	r3, [r7, #20]
        i_gain = 0;
 802232e:	f04f 0300 	mov.w	r3, #0
 8022332:	613b      	str	r3, [r7, #16]
        d_gain = 0;
 8022334:	f04f 0300 	mov.w	r3, #0
 8022338:	60fb      	str	r3, [r7, #12]
    }

    return PidControl(p_gain, i_gain, d_gain);
 802233a:	ed97 1a03 	vldr	s2, [r7, #12]
 802233e:	edd7 0a04 	vldr	s1, [r7, #16]
 8022342:	ed97 0a05 	vldr	s0, [r7, #20]
 8022346:	6878      	ldr	r0, [r7, #4]
 8022348:	f000 f80a 	bl	8022360 <_ZN9LineTrace10PidControlEfff>
 802234c:	eef0 7a40 	vmov.f32	s15, s0
}
 8022350:	eeb0 0a67 	vmov.f32	s0, s15
 8022354:	3718      	adds	r7, #24
 8022356:	46bd      	mov	sp, r7
 8022358:	bd80      	pop	{r7, pc}
 802235a:	0000      	movs	r0, r0
 802235c:	0000      	movs	r0, r0
	...

08022360 <_ZN9LineTrace10PidControlEfff>:

float LineTrace::PidControl(float p_gain, float i_gain, float d_gain)
{
 8022360:	b590      	push	{r4, r7, lr}
 8022362:	b08b      	sub	sp, #44	; 0x2c
 8022364:	af00      	add	r7, sp, #0
 8022366:	60f8      	str	r0, [r7, #12]
 8022368:	ed87 0a02 	vstr	s0, [r7, #8]
 802236c:	edc7 0a01 	vstr	s1, [r7, #4]
 8022370:	ed87 1a00 	vstr	s2, [r7]
    static float pre_error = line_sensor_->LeftRightDifference();
 8022374:	4b52      	ldr	r3, [pc, #328]	; (80224c0 <_ZN9LineTrace10PidControlEfff+0x160>)
 8022376:	781b      	ldrb	r3, [r3, #0]
 8022378:	f3bf 8f5b 	dmb	ish
 802237c:	b2db      	uxtb	r3, r3
 802237e:	f003 0301 	and.w	r3, r3, #1
 8022382:	2b00      	cmp	r3, #0
 8022384:	bf0c      	ite	eq
 8022386:	2301      	moveq	r3, #1
 8022388:	2300      	movne	r3, #0
 802238a:	b2db      	uxtb	r3, r3
 802238c:	2b00      	cmp	r3, #0
 802238e:	d017      	beq.n	80223c0 <_ZN9LineTrace10PidControlEfff+0x60>
 8022390:	484b      	ldr	r0, [pc, #300]	; (80224c0 <_ZN9LineTrace10PidControlEfff+0x160>)
 8022392:	f008 f87f 	bl	802a494 <__cxa_guard_acquire>
 8022396:	4603      	mov	r3, r0
 8022398:	2b00      	cmp	r3, #0
 802239a:	bf14      	ite	ne
 802239c:	2301      	movne	r3, #1
 802239e:	2300      	moveq	r3, #0
 80223a0:	b2db      	uxtb	r3, r3
 80223a2:	2b00      	cmp	r3, #0
 80223a4:	d00c      	beq.n	80223c0 <_ZN9LineTrace10PidControlEfff+0x60>
 80223a6:	68fb      	ldr	r3, [r7, #12]
 80223a8:	685b      	ldr	r3, [r3, #4]
 80223aa:	4618      	mov	r0, r3
 80223ac:	f7ff fe80 	bl	80220b0 <_ZN10LineSensor19LeftRightDifferenceEv>
 80223b0:	eef0 7a40 	vmov.f32	s15, s0
 80223b4:	4b43      	ldr	r3, [pc, #268]	; (80224c4 <_ZN9LineTrace10PidControlEfff+0x164>)
 80223b6:	edc3 7a00 	vstr	s15, [r3]
 80223ba:	4841      	ldr	r0, [pc, #260]	; (80224c0 <_ZN9LineTrace10PidControlEfff+0x160>)
 80223bc:	f008 f876 	bl	802a4ac <__cxa_guard_release>
    float error, differential_error, integral_error;
    float p, d, i;

    error = line_sensor_->LeftRightDifference();
 80223c0:	68fb      	ldr	r3, [r7, #12]
 80223c2:	685b      	ldr	r3, [r3, #4]
 80223c4:	4618      	mov	r0, r3
 80223c6:	f7ff fe73 	bl	80220b0 <_ZN10LineSensor19LeftRightDifferenceEv>
 80223ca:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    differential_error = (error - pre_error) / TIM6_PERIOD_S;
 80223ce:	4b3d      	ldr	r3, [pc, #244]	; (80224c4 <_ZN9LineTrace10PidControlEfff+0x164>)
 80223d0:	edd3 7a00 	vldr	s15, [r3]
 80223d4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80223d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80223dc:	ee17 0a90 	vmov	r0, s15
 80223e0:	f7fd ff92 	bl	8020308 <__aeabi_f2d>
 80223e4:	a334      	add	r3, pc, #208	; (adr r3, 80224b8 <_ZN9LineTrace10PidControlEfff+0x158>)
 80223e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80223ea:	f7fe f90f 	bl	802060c <__aeabi_ddiv>
 80223ee:	4603      	mov	r3, r0
 80223f0:	460c      	mov	r4, r1
 80223f2:	4618      	mov	r0, r3
 80223f4:	4621      	mov	r1, r4
 80223f6:	f7fe fa79 	bl	80208ec <__aeabi_d2f>
 80223fa:	4603      	mov	r3, r0
 80223fc:	623b      	str	r3, [r7, #32]
    integral_error = (error + pre_error) / 2.0 * TIM6_PERIOD_S;
 80223fe:	4b31      	ldr	r3, [pc, #196]	; (80224c4 <_ZN9LineTrace10PidControlEfff+0x164>)
 8022400:	ed93 7a00 	vldr	s14, [r3]
 8022404:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8022408:	ee77 7a27 	vadd.f32	s15, s14, s15
 802240c:	ee17 0a90 	vmov	r0, s15
 8022410:	f7fd ff7a 	bl	8020308 <__aeabi_f2d>
 8022414:	f04f 0200 	mov.w	r2, #0
 8022418:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802241c:	f7fe f8f6 	bl	802060c <__aeabi_ddiv>
 8022420:	4603      	mov	r3, r0
 8022422:	460c      	mov	r4, r1
 8022424:	4618      	mov	r0, r3
 8022426:	4621      	mov	r1, r4
 8022428:	a323      	add	r3, pc, #140	; (adr r3, 80224b8 <_ZN9LineTrace10PidControlEfff+0x158>)
 802242a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802242e:	f7fd ffc3 	bl	80203b8 <__aeabi_dmul>
 8022432:	4603      	mov	r3, r0
 8022434:	460c      	mov	r4, r1
 8022436:	4618      	mov	r0, r3
 8022438:	4621      	mov	r1, r4
 802243a:	f7fe fa57 	bl	80208ec <__aeabi_d2f>
 802243e:	4603      	mov	r3, r0
 8022440:	61fb      	str	r3, [r7, #28]
    SetIntegralError(integral_error);
 8022442:	ed97 0a07 	vldr	s0, [r7, #28]
 8022446:	68f8      	ldr	r0, [r7, #12]
 8022448:	f000 f844 	bl	80224d4 <_ZN9LineTrace16SetIntegralErrorEf>

    p = p_gain * error;
 802244c:	ed97 7a02 	vldr	s14, [r7, #8]
 8022450:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8022454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022458:	edc7 7a06 	vstr	s15, [r7, #24]
    d = d_gain * differential_error;
 802245c:	ed97 7a00 	vldr	s14, [r7]
 8022460:	edd7 7a08 	vldr	s15, [r7, #32]
 8022464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022468:	edc7 7a05 	vstr	s15, [r7, #20]
    i = i_gain * integral_error_;
 802246c:	68fb      	ldr	r3, [r7, #12]
 802246e:	edd3 7a00 	vldr	s15, [r3]
 8022472:	ed97 7a01 	vldr	s14, [r7, #4]
 8022476:	ee67 7a27 	vmul.f32	s15, s14, s15
 802247a:	edc7 7a04 	vstr	s15, [r7, #16]

#ifdef DEBUG_MODE
    g_trace_p = p;
 802247e:	4a12      	ldr	r2, [pc, #72]	; (80224c8 <_ZN9LineTrace10PidControlEfff+0x168>)
 8022480:	69bb      	ldr	r3, [r7, #24]
 8022482:	6013      	str	r3, [r2, #0]
    g_trace_d = d;
 8022484:	4a11      	ldr	r2, [pc, #68]	; (80224cc <_ZN9LineTrace10PidControlEfff+0x16c>)
 8022486:	697b      	ldr	r3, [r7, #20]
 8022488:	6013      	str	r3, [r2, #0]
    g_trace_i = i;
 802248a:	4a11      	ldr	r2, [pc, #68]	; (80224d0 <_ZN9LineTrace10PidControlEfff+0x170>)
 802248c:	693b      	ldr	r3, [r7, #16]
 802248e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    pre_error = error;
 8022490:	4a0c      	ldr	r2, [pc, #48]	; (80224c4 <_ZN9LineTrace10PidControlEfff+0x164>)
 8022492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022494:	6013      	str	r3, [r2, #0]

    return p + d + i;
 8022496:	ed97 7a06 	vldr	s14, [r7, #24]
 802249a:	edd7 7a05 	vldr	s15, [r7, #20]
 802249e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80224a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80224a6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80224aa:	eeb0 0a67 	vmov.f32	s0, s15
 80224ae:	372c      	adds	r7, #44	; 0x2c
 80224b0:	46bd      	mov	sp, r7
 80224b2:	bd90      	pop	{r4, r7, pc}
 80224b4:	f3af 8000 	nop.w
 80224b8:	47ae147b 	.word	0x47ae147b
 80224bc:	3f547ae1 	.word	0x3f547ae1
 80224c0:	2000007c 	.word	0x2000007c
 80224c4:	20000078 	.word	0x20000078
 80224c8:	200002dc 	.word	0x200002dc
 80224cc:	200002e4 	.word	0x200002e4
 80224d0:	200002e0 	.word	0x200002e0

080224d4 <_ZN9LineTrace16SetIntegralErrorEf>:

void LineTrace::SetIntegralError(float integral_error)
{
 80224d4:	b480      	push	{r7}
 80224d6:	b083      	sub	sp, #12
 80224d8:	af00      	add	r7, sp, #0
 80224da:	6078      	str	r0, [r7, #4]
 80224dc:	ed87 0a00 	vstr	s0, [r7]
    integral_error_ += integral_error;
 80224e0:	687b      	ldr	r3, [r7, #4]
 80224e2:	ed93 7a00 	vldr	s14, [r3]
 80224e6:	edd7 7a00 	vldr	s15, [r7]
 80224ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80224ee:	687b      	ldr	r3, [r7, #4]
 80224f0:	edc3 7a00 	vstr	s15, [r3]
}
 80224f4:	bf00      	nop
 80224f6:	370c      	adds	r7, #12
 80224f8:	46bd      	mov	sp, r7
 80224fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224fe:	4770      	bx	lr

08022500 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8022500:	b480      	push	{r7}
 8022502:	b083      	sub	sp, #12
 8022504:	af00      	add	r7, sp, #0
 8022506:	ed87 0a01 	vstr	s0, [r7, #4]
 802250a:	edd7 7a01 	vldr	s15, [r7, #4]
 802250e:	eef0 7ae7 	vabs.f32	s15, s15
 8022512:	eeb0 0a67 	vmov.f32	s0, s15
 8022516:	370c      	adds	r7, #12
 8022518:	46bd      	mov	sp, r7
 802251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802251e:	4770      	bx	lr

08022520 <_ZN6LoggerC1Ev>:
#include "logger.hpp"
#include <math.h>
#include <string.h>

Logger::Logger() : const_distance_log_(), radian_log_(), various_log_(), const_distance_copy_(), radian_copy_(), various_copy_(), accel_address_(), decel_address_(), periodic_write_enable_(0), accel_position_write_enable_(0), excess_stack_(0), target_velocity_(MIN_VELOCITY) {}
 8022520:	b580      	push	{r7, lr}
 8022522:	b082      	sub	sp, #8
 8022524:	af00      	add	r7, sp, #0
 8022526:	6078      	str	r0, [r7, #4]
 8022528:	687a      	ldr	r2, [r7, #4]
 802252a:	2309      	movs	r3, #9
 802252c:	2b00      	cmp	r3, #0
 802252e:	db05      	blt.n	802253c <_ZN6LoggerC1Ev+0x1c>
 8022530:	f04f 0100 	mov.w	r1, #0
 8022534:	6011      	str	r1, [r2, #0]
 8022536:	3204      	adds	r2, #4
 8022538:	3b01      	subs	r3, #1
 802253a:	e7f7      	b.n	802252c <_ZN6LoggerC1Ev+0xc>
 802253c:	687b      	ldr	r3, [r7, #4]
 802253e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8022542:	2309      	movs	r3, #9
 8022544:	2b00      	cmp	r3, #0
 8022546:	db05      	blt.n	8022554 <_ZN6LoggerC1Ev+0x34>
 8022548:	f04f 0100 	mov.w	r1, #0
 802254c:	6011      	str	r1, [r2, #0]
 802254e:	3204      	adds	r2, #4
 8022550:	3b01      	subs	r3, #1
 8022552:	e7f7      	b.n	8022544 <_ZN6LoggerC1Ev+0x24>
 8022554:	687b      	ldr	r3, [r7, #4]
 8022556:	f103 0250 	add.w	r2, r3, #80	; 0x50
 802255a:	2309      	movs	r3, #9
 802255c:	2b00      	cmp	r3, #0
 802255e:	db04      	blt.n	802256a <_ZN6LoggerC1Ev+0x4a>
 8022560:	2100      	movs	r1, #0
 8022562:	8011      	strh	r1, [r2, #0]
 8022564:	3202      	adds	r2, #2
 8022566:	3b01      	subs	r3, #1
 8022568:	e7f8      	b.n	802255c <_ZN6LoggerC1Ev+0x3c>
 802256a:	687b      	ldr	r3, [r7, #4]
 802256c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8022570:	2309      	movs	r3, #9
 8022572:	2b00      	cmp	r3, #0
 8022574:	db05      	blt.n	8022582 <_ZN6LoggerC1Ev+0x62>
 8022576:	f04f 0100 	mov.w	r1, #0
 802257a:	6011      	str	r1, [r2, #0]
 802257c:	3204      	adds	r2, #4
 802257e:	3b01      	subs	r3, #1
 8022580:	e7f7      	b.n	8022572 <_ZN6LoggerC1Ev+0x52>
 8022582:	687b      	ldr	r3, [r7, #4]
 8022584:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 8022588:	2309      	movs	r3, #9
 802258a:	2b00      	cmp	r3, #0
 802258c:	db05      	blt.n	802259a <_ZN6LoggerC1Ev+0x7a>
 802258e:	f04f 0100 	mov.w	r1, #0
 8022592:	6011      	str	r1, [r2, #0]
 8022594:	3204      	adds	r2, #4
 8022596:	3b01      	subs	r3, #1
 8022598:	e7f7      	b.n	802258a <_ZN6LoggerC1Ev+0x6a>
 802259a:	687b      	ldr	r3, [r7, #4]
 802259c:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 80225a0:	2309      	movs	r3, #9
 80225a2:	2b00      	cmp	r3, #0
 80225a4:	db04      	blt.n	80225b0 <_ZN6LoggerC1Ev+0x90>
 80225a6:	2100      	movs	r1, #0
 80225a8:	8011      	strh	r1, [r2, #0]
 80225aa:	3202      	adds	r2, #2
 80225ac:	3b01      	subs	r3, #1
 80225ae:	e7f8      	b.n	80225a2 <_ZN6LoggerC1Ev+0x82>
 80225b0:	687b      	ldr	r3, [r7, #4]
 80225b2:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 80225b6:	2304      	movs	r3, #4
 80225b8:	2b00      	cmp	r3, #0
 80225ba:	db04      	blt.n	80225c6 <_ZN6LoggerC1Ev+0xa6>
 80225bc:	2100      	movs	r1, #0
 80225be:	8011      	strh	r1, [r2, #0]
 80225c0:	3202      	adds	r2, #2
 80225c2:	3b01      	subs	r3, #1
 80225c4:	e7f8      	b.n	80225b8 <_ZN6LoggerC1Ev+0x98>
 80225c6:	687b      	ldr	r3, [r7, #4]
 80225c8:	f103 02d2 	add.w	r2, r3, #210	; 0xd2
 80225cc:	2304      	movs	r3, #4
 80225ce:	2b00      	cmp	r3, #0
 80225d0:	db04      	blt.n	80225dc <_ZN6LoggerC1Ev+0xbc>
 80225d2:	2100      	movs	r1, #0
 80225d4:	8011      	strh	r1, [r2, #0]
 80225d6:	3202      	adds	r2, #2
 80225d8:	3b01      	subs	r3, #1
 80225da:	e7f8      	b.n	80225ce <_ZN6LoggerC1Ev+0xae>
 80225dc:	687b      	ldr	r3, [r7, #4]
 80225de:	2200      	movs	r2, #0
 80225e0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80225e4:	687b      	ldr	r3, [r7, #4]
 80225e6:	2200      	movs	r2, #0
 80225e8:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 80225ec:	687b      	ldr	r3, [r7, #4]
 80225ee:	f04f 0200 	mov.w	r2, #0
 80225f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80225f6:	687b      	ldr	r3, [r7, #4]
 80225f8:	4a0b      	ldr	r2, [pc, #44]	; (8022628 <_ZN6LoggerC1Ev+0x108>)
 80225fa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80225fe:	687b      	ldr	r3, [r7, #4]
 8022600:	33e8      	adds	r3, #232	; 0xe8
 8022602:	4618      	mov	r0, r3
 8022604:	f7fe fb86 	bl	8020d14 <_ZN7EncoderC1Ev>
 8022608:	687b      	ldr	r3, [r7, #4]
 802260a:	33f8      	adds	r3, #248	; 0xf8
 802260c:	4618      	mov	r0, r3
 802260e:	f7fe fe63 	bl	80212d8 <_ZN8Iim42652C1Ev>
 8022612:	687b      	ldr	r3, [r7, #4]
 8022614:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022618:	4618      	mov	r0, r3
 802261a:	f002 fd33 	bl	8025084 <_ZN10SideSensorC1Ev>
 802261e:	687b      	ldr	r3, [r7, #4]
 8022620:	4618      	mov	r0, r3
 8022622:	3708      	adds	r7, #8
 8022624:	46bd      	mov	sp, r7
 8022626:	bd80      	pop	{r7, pc}
 8022628:	3fa66666 	.word	0x3fa66666
 802262c:	00000000 	.word	0x00000000

08022630 <_ZN6Logger7LoggingEh>:

void Logger::Logging(uint8_t process_complete)
{
 8022630:	b5b0      	push	{r4, r5, r7, lr}
 8022632:	b08c      	sub	sp, #48	; 0x30
 8022634:	af00      	add	r7, sp, #0
 8022636:	6078      	str	r0, [r7, #4]
 8022638:	460b      	mov	r3, r1
 802263a:	70fb      	strb	r3, [r7, #3]
    float distance = encoder.GetDistanceStack();
 802263c:	687b      	ldr	r3, [r7, #4]
 802263e:	33e8      	adds	r3, #232	; 0xe8
 8022640:	4618      	mov	r0, r3
 8022642:	f7fe fc52 	bl	8020eea <_ZN7Encoder16GetDistanceStackEv>
 8022646:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    if(distance < LOGGING_CONST_DISTANCE) return;
 802264a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 802264e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8022652:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802265a:	f100 81f5 	bmi.w	8022a48 <_ZN6Logger7LoggingEh+0x418>
    encoder.ResetDistanceStack();
 802265e:	687b      	ldr	r3, [r7, #4]
 8022660:	33e8      	adds	r3, #232	; 0xe8
 8022662:	4618      	mov	r0, r3
 8022664:	f7fe fc24 	bl	8020eb0 <_ZN7Encoder18ResetDistanceStackEv>

    static uint16_t now_address = 0; // flash address count. (0 ~ 6199)
    static uint16_t log_index = 0;   // Count up when interrupt.

    /* Mapping data of distance */
    const_distance_log_[log_index] = distance;
 8022668:	4bb3      	ldr	r3, [pc, #716]	; (8022938 <_ZN6Logger7LoggingEh+0x308>)
 802266a:	881b      	ldrh	r3, [r3, #0]
 802266c:	687a      	ldr	r2, [r7, #4]
 802266e:	009b      	lsls	r3, r3, #2
 8022670:	4413      	add	r3, r2
 8022672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022674:	601a      	str	r2, [r3, #0]

    /* Mapping data of radian */
    double degree = iim_42652.GetDegreeStackZ();
 8022676:	687b      	ldr	r3, [r7, #4]
 8022678:	33f8      	adds	r3, #248	; 0xf8
 802267a:	4618      	mov	r0, r3
 802267c:	f7ff f830 	bl	80216e0 <_ZN8Iim4265215GetDegreeStackZEv>
 8022680:	ed87 0b06 	vstr	d0, [r7, #24]
    float radian = static_cast<float>(degree * M_PI / 180.0);
 8022684:	a3aa      	add	r3, pc, #680	; (adr r3, 8022930 <_ZN6Logger7LoggingEh+0x300>)
 8022686:	e9d3 2300 	ldrd	r2, r3, [r3]
 802268a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 802268e:	f7fd fe93 	bl	80203b8 <__aeabi_dmul>
 8022692:	4603      	mov	r3, r0
 8022694:	460c      	mov	r4, r1
 8022696:	4618      	mov	r0, r3
 8022698:	4621      	mov	r1, r4
 802269a:	f04f 0200 	mov.w	r2, #0
 802269e:	4ba7      	ldr	r3, [pc, #668]	; (802293c <_ZN6Logger7LoggingEh+0x30c>)
 80226a0:	f7fd ffb4 	bl	802060c <__aeabi_ddiv>
 80226a4:	4603      	mov	r3, r0
 80226a6:	460c      	mov	r4, r1
 80226a8:	4618      	mov	r0, r3
 80226aa:	4621      	mov	r1, r4
 80226ac:	f7fe f91e 	bl	80208ec <__aeabi_d2f>
 80226b0:	4603      	mov	r3, r0
 80226b2:	617b      	str	r3, [r7, #20]
    radian_log_[log_index] = radian;
 80226b4:	4ba0      	ldr	r3, [pc, #640]	; (8022938 <_ZN6Logger7LoggingEh+0x308>)
 80226b6:	881b      	ldrh	r3, [r3, #0]
 80226b8:	687a      	ldr	r2, [r7, #4]
 80226ba:	330a      	adds	r3, #10
 80226bc:	009b      	lsls	r3, r3, #2
 80226be:	4413      	add	r3, r2
 80226c0:	697a      	ldr	r2, [r7, #20]
 80226c2:	601a      	str	r2, [r3, #0]
    iim_42652.ResetDegreeStackZ();
 80226c4:	687b      	ldr	r3, [r7, #4]
 80226c6:	33f8      	adds	r3, #248	; 0xf8
 80226c8:	4618      	mov	r0, r3
 80226ca:	f7fe fff9 	bl	80216c0 <_ZN8Iim4265217ResetDegreeStackZEv>

    /* Various log */
    static uint8_t pre_corner_cnt = side_sensor.GetCornerMarkerCount();
 80226ce:	4b9c      	ldr	r3, [pc, #624]	; (8022940 <_ZN6Logger7LoggingEh+0x310>)
 80226d0:	781b      	ldrb	r3, [r3, #0]
 80226d2:	f3bf 8f5b 	dmb	ish
 80226d6:	b2db      	uxtb	r3, r3
 80226d8:	f003 0301 	and.w	r3, r3, #1
 80226dc:	2b00      	cmp	r3, #0
 80226de:	bf0c      	ite	eq
 80226e0:	2301      	moveq	r3, #1
 80226e2:	2300      	movne	r3, #0
 80226e4:	b2db      	uxtb	r3, r3
 80226e6:	2b00      	cmp	r3, #0
 80226e8:	d017      	beq.n	802271a <_ZN6Logger7LoggingEh+0xea>
 80226ea:	4895      	ldr	r0, [pc, #596]	; (8022940 <_ZN6Logger7LoggingEh+0x310>)
 80226ec:	f007 fed2 	bl	802a494 <__cxa_guard_acquire>
 80226f0:	4603      	mov	r3, r0
 80226f2:	2b00      	cmp	r3, #0
 80226f4:	bf14      	ite	ne
 80226f6:	2301      	movne	r3, #1
 80226f8:	2300      	moveq	r3, #0
 80226fa:	b2db      	uxtb	r3, r3
 80226fc:	2b00      	cmp	r3, #0
 80226fe:	d00c      	beq.n	802271a <_ZN6Logger7LoggingEh+0xea>
 8022700:	687b      	ldr	r3, [r7, #4]
 8022702:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022706:	4618      	mov	r0, r3
 8022708:	f002 ff57 	bl	80255ba <_ZN10SideSensor20GetCornerMarkerCountEv>
 802270c:	4603      	mov	r3, r0
 802270e:	461a      	mov	r2, r3
 8022710:	4b8c      	ldr	r3, [pc, #560]	; (8022944 <_ZN6Logger7LoggingEh+0x314>)
 8022712:	701a      	strb	r2, [r3, #0]
 8022714:	488a      	ldr	r0, [pc, #552]	; (8022940 <_ZN6Logger7LoggingEh+0x310>)
 8022716:	f007 fec9 	bl	802a4ac <__cxa_guard_release>
    static uint8_t pre_cross_cnt  = side_sensor.GetCrossLineCount();
 802271a:	4b8b      	ldr	r3, [pc, #556]	; (8022948 <_ZN6Logger7LoggingEh+0x318>)
 802271c:	781b      	ldrb	r3, [r3, #0]
 802271e:	f3bf 8f5b 	dmb	ish
 8022722:	b2db      	uxtb	r3, r3
 8022724:	f003 0301 	and.w	r3, r3, #1
 8022728:	2b00      	cmp	r3, #0
 802272a:	bf0c      	ite	eq
 802272c:	2301      	moveq	r3, #1
 802272e:	2300      	movne	r3, #0
 8022730:	b2db      	uxtb	r3, r3
 8022732:	2b00      	cmp	r3, #0
 8022734:	d017      	beq.n	8022766 <_ZN6Logger7LoggingEh+0x136>
 8022736:	4884      	ldr	r0, [pc, #528]	; (8022948 <_ZN6Logger7LoggingEh+0x318>)
 8022738:	f007 feac 	bl	802a494 <__cxa_guard_acquire>
 802273c:	4603      	mov	r3, r0
 802273e:	2b00      	cmp	r3, #0
 8022740:	bf14      	ite	ne
 8022742:	2301      	movne	r3, #1
 8022744:	2300      	moveq	r3, #0
 8022746:	b2db      	uxtb	r3, r3
 8022748:	2b00      	cmp	r3, #0
 802274a:	d00c      	beq.n	8022766 <_ZN6Logger7LoggingEh+0x136>
 802274c:	687b      	ldr	r3, [r7, #4]
 802274e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022752:	4618      	mov	r0, r3
 8022754:	f002 ff3d 	bl	80255d2 <_ZN10SideSensor17GetCrossLineCountEv>
 8022758:	4603      	mov	r3, r0
 802275a:	461a      	mov	r2, r3
 802275c:	4b7b      	ldr	r3, [pc, #492]	; (802294c <_ZN6Logger7LoggingEh+0x31c>)
 802275e:	701a      	strb	r2, [r3, #0]
 8022760:	4879      	ldr	r0, [pc, #484]	; (8022948 <_ZN6Logger7LoggingEh+0x318>)
 8022762:	f007 fea3 	bl	802a4ac <__cxa_guard_release>
    uint8_t corner_cnt = side_sensor.GetCornerMarkerCount();
 8022766:	687b      	ldr	r3, [r7, #4]
 8022768:	f503 7380 	add.w	r3, r3, #256	; 0x100
 802276c:	4618      	mov	r0, r3
 802276e:	f002 ff24 	bl	80255ba <_ZN10SideSensor20GetCornerMarkerCountEv>
 8022772:	4603      	mov	r3, r0
 8022774:	74fb      	strb	r3, [r7, #19]
    uint8_t cross_cnt  = side_sensor.GetCrossLineCount();
 8022776:	687b      	ldr	r3, [r7, #4]
 8022778:	f503 7380 	add.w	r3, r3, #256	; 0x100
 802277c:	4618      	mov	r0, r3
 802277e:	f002 ff28 	bl	80255d2 <_ZN10SideSensor17GetCrossLineCountEv>
 8022782:	4603      	mov	r3, r0
 8022784:	74bb      	strb	r3, [r7, #18]
    uint16_t various_buff = 0;
 8022786:	2300      	movs	r3, #0
 8022788:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(process_complete != 0)        various_buff |= 0x0004;
 802278a:	78fb      	ldrb	r3, [r7, #3]
 802278c:	2b00      	cmp	r3, #0
 802278e:	d003      	beq.n	8022798 <_ZN6Logger7LoggingEh+0x168>
 8022790:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8022792:	f043 0304 	orr.w	r3, r3, #4
 8022796:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(pre_corner_cnt != corner_cnt) various_buff |= 0x0002;
 8022798:	4b6a      	ldr	r3, [pc, #424]	; (8022944 <_ZN6Logger7LoggingEh+0x314>)
 802279a:	781b      	ldrb	r3, [r3, #0]
 802279c:	7cfa      	ldrb	r2, [r7, #19]
 802279e:	429a      	cmp	r2, r3
 80227a0:	d003      	beq.n	80227aa <_ZN6Logger7LoggingEh+0x17a>
 80227a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80227a4:	f043 0302 	orr.w	r3, r3, #2
 80227a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(pre_cross_cnt != cross_cnt)   various_buff |= 0x0001;
 80227aa:	4b68      	ldr	r3, [pc, #416]	; (802294c <_ZN6Logger7LoggingEh+0x31c>)
 80227ac:	781b      	ldrb	r3, [r3, #0]
 80227ae:	7cba      	ldrb	r2, [r7, #18]
 80227b0:	429a      	cmp	r2, r3
 80227b2:	d003      	beq.n	80227bc <_ZN6Logger7LoggingEh+0x18c>
 80227b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80227b6:	f043 0301 	orr.w	r3, r3, #1
 80227ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
    pre_corner_cnt = corner_cnt;
 80227bc:	4a61      	ldr	r2, [pc, #388]	; (8022944 <_ZN6Logger7LoggingEh+0x314>)
 80227be:	7cfb      	ldrb	r3, [r7, #19]
 80227c0:	7013      	strb	r3, [r2, #0]
    pre_cross_cnt  = cross_cnt;
 80227c2:	4a62      	ldr	r2, [pc, #392]	; (802294c <_ZN6Logger7LoggingEh+0x31c>)
 80227c4:	7cbb      	ldrb	r3, [r7, #18]
 80227c6:	7013      	strb	r3, [r2, #0]
    various_log_[log_index] = various_buff;
 80227c8:	4b5b      	ldr	r3, [pc, #364]	; (8022938 <_ZN6Logger7LoggingEh+0x308>)
 80227ca:	881b      	ldrh	r3, [r3, #0]
 80227cc:	461a      	mov	r2, r3
 80227ce:	687b      	ldr	r3, [r7, #4]
 80227d0:	3228      	adds	r2, #40	; 0x28
 80227d2:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80227d4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    /* Copy periodic log */
    if(log_index == LAST_LOG_INDEX)
 80227d8:	4b57      	ldr	r3, [pc, #348]	; (8022938 <_ZN6Logger7LoggingEh+0x308>)
 80227da:	881b      	ldrh	r3, [r3, #0]
 80227dc:	2b09      	cmp	r3, #9
 80227de:	d120      	bne.n	8022822 <_ZN6Logger7LoggingEh+0x1f2>
    {
        log_index = 0;
 80227e0:	4b55      	ldr	r3, [pc, #340]	; (8022938 <_ZN6Logger7LoggingEh+0x308>)
 80227e2:	2200      	movs	r2, #0
 80227e4:	801a      	strh	r2, [r3, #0]
        memcpy(const_distance_copy_, const_distance_log_, (4 * NUM_OF_LOG));
 80227e6:	687b      	ldr	r3, [r7, #4]
 80227e8:	3364      	adds	r3, #100	; 0x64
 80227ea:	6879      	ldr	r1, [r7, #4]
 80227ec:	2228      	movs	r2, #40	; 0x28
 80227ee:	4618      	mov	r0, r3
 80227f0:	f007 fe84 	bl	802a4fc <memcpy>
        memcpy(radian_copy_, radian_log_, (4 * NUM_OF_LOG));
 80227f4:	687b      	ldr	r3, [r7, #4]
 80227f6:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 80227fa:	687b      	ldr	r3, [r7, #4]
 80227fc:	3328      	adds	r3, #40	; 0x28
 80227fe:	2228      	movs	r2, #40	; 0x28
 8022800:	4619      	mov	r1, r3
 8022802:	f007 fe7b 	bl	802a4fc <memcpy>
        memcpy(various_copy_, various_log_, (2 * NUM_OF_LOG));
 8022806:	687b      	ldr	r3, [r7, #4]
 8022808:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 802280c:	687b      	ldr	r3, [r7, #4]
 802280e:	3350      	adds	r3, #80	; 0x50
 8022810:	2214      	movs	r2, #20
 8022812:	4619      	mov	r1, r3
 8022814:	f007 fe72 	bl	802a4fc <memcpy>
        periodic_write_enable_ = 1;
 8022818:	687b      	ldr	r3, [r7, #4]
 802281a:	2201      	movs	r2, #1
 802281c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8022820:	e005      	b.n	802282e <_ZN6Logger7LoggingEh+0x1fe>
    }
    else log_index++;
 8022822:	4b45      	ldr	r3, [pc, #276]	; (8022938 <_ZN6Logger7LoggingEh+0x308>)
 8022824:	881b      	ldrh	r3, [r3, #0]
 8022826:	3301      	adds	r3, #1
 8022828:	b29a      	uxth	r2, r3
 802282a:	4b43      	ldr	r3, [pc, #268]	; (8022938 <_ZN6Logger7LoggingEh+0x308>)
 802282c:	801a      	strh	r2, [r3, #0]

    /* Distance correction */
    uint16_t correction_address = now_address;
 802282e:	4b48      	ldr	r3, [pc, #288]	; (8022950 <_ZN6Logger7LoggingEh+0x320>)
 8022830:	881b      	ldrh	r3, [r3, #0]
 8022832:	823b      	strh	r3, [r7, #16]
    float excess = excess_stack_;
 8022834:	687b      	ldr	r3, [r7, #4]
 8022836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 802283a:	60fb      	str	r3, [r7, #12]
    excess += distance - LOGGING_CONST_DISTANCE;
 802283c:	68f8      	ldr	r0, [r7, #12]
 802283e:	f7fd fd63 	bl	8020308 <__aeabi_f2d>
 8022842:	4604      	mov	r4, r0
 8022844:	460d      	mov	r5, r1
 8022846:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022848:	f7fd fd5e 	bl	8020308 <__aeabi_f2d>
 802284c:	f04f 0200 	mov.w	r2, #0
 8022850:	4b40      	ldr	r3, [pc, #256]	; (8022954 <_ZN6Logger7LoggingEh+0x324>)
 8022852:	f7fd fbf9 	bl	8020048 <__aeabi_dsub>
 8022856:	4602      	mov	r2, r0
 8022858:	460b      	mov	r3, r1
 802285a:	4620      	mov	r0, r4
 802285c:	4629      	mov	r1, r5
 802285e:	f7fd fbf5 	bl	802004c <__adddf3>
 8022862:	4603      	mov	r3, r0
 8022864:	460c      	mov	r4, r1
 8022866:	4618      	mov	r0, r3
 8022868:	4621      	mov	r1, r4
 802286a:	f7fe f83f 	bl	80208ec <__aeabi_d2f>
 802286e:	4603      	mov	r3, r0
 8022870:	60fb      	str	r3, [r7, #12]
    if(excess > LOGGING_CONST_DISTANCE)
 8022872:	edd7 7a03 	vldr	s15, [r7, #12]
 8022876:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 802287a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802287e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022882:	dd6b      	ble.n	802295c <_ZN6Logger7LoggingEh+0x32c>
    {
        const_distance_log_[log_index] = excess;
 8022884:	4b2c      	ldr	r3, [pc, #176]	; (8022938 <_ZN6Logger7LoggingEh+0x308>)
 8022886:	881b      	ldrh	r3, [r3, #0]
 8022888:	687a      	ldr	r2, [r7, #4]
 802288a:	009b      	lsls	r3, r3, #2
 802288c:	4413      	add	r3, r2
 802288e:	68fa      	ldr	r2, [r7, #12]
 8022890:	601a      	str	r2, [r3, #0]
        radian_log_[log_index] = radian;
 8022892:	4b29      	ldr	r3, [pc, #164]	; (8022938 <_ZN6Logger7LoggingEh+0x308>)
 8022894:	881b      	ldrh	r3, [r3, #0]
 8022896:	687a      	ldr	r2, [r7, #4]
 8022898:	330a      	adds	r3, #10
 802289a:	009b      	lsls	r3, r3, #2
 802289c:	4413      	add	r3, r2
 802289e:	697a      	ldr	r2, [r7, #20]
 80228a0:	601a      	str	r2, [r3, #0]
        various_log_[log_index] = VARIOUS_LOG_DATA_WHEN_COPY;
 80228a2:	4b25      	ldr	r3, [pc, #148]	; (8022938 <_ZN6Logger7LoggingEh+0x308>)
 80228a4:	881b      	ldrh	r3, [r3, #0]
 80228a6:	461a      	mov	r2, r3
 80228a8:	687b      	ldr	r3, [r7, #4]
 80228aa:	3228      	adds	r2, #40	; 0x28
 80228ac:	f24f 01f0 	movw	r1, #61680	; 0xf0f0
 80228b0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        excess_stack_ = excess - LOGGING_CONST_DISTANCE;
 80228b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80228b8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80228bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80228c0:	687b      	ldr	r3, [r7, #4]
 80228c2:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
        now_address++;
 80228c6:	4b22      	ldr	r3, [pc, #136]	; (8022950 <_ZN6Logger7LoggingEh+0x320>)
 80228c8:	881b      	ldrh	r3, [r3, #0]
 80228ca:	3301      	adds	r3, #1
 80228cc:	b29a      	uxth	r2, r3
 80228ce:	4b20      	ldr	r3, [pc, #128]	; (8022950 <_ZN6Logger7LoggingEh+0x320>)
 80228d0:	801a      	strh	r2, [r3, #0]

        /* Copy periodic log */
        if(log_index == LAST_LOG_INDEX)
 80228d2:	4b19      	ldr	r3, [pc, #100]	; (8022938 <_ZN6Logger7LoggingEh+0x308>)
 80228d4:	881b      	ldrh	r3, [r3, #0]
 80228d6:	2b09      	cmp	r3, #9
 80228d8:	d120      	bne.n	802291c <_ZN6Logger7LoggingEh+0x2ec>
        {
            log_index = 0;
 80228da:	4b17      	ldr	r3, [pc, #92]	; (8022938 <_ZN6Logger7LoggingEh+0x308>)
 80228dc:	2200      	movs	r2, #0
 80228de:	801a      	strh	r2, [r3, #0]
            memcpy(const_distance_copy_, const_distance_log_, (4 * NUM_OF_LOG));
 80228e0:	687b      	ldr	r3, [r7, #4]
 80228e2:	3364      	adds	r3, #100	; 0x64
 80228e4:	6879      	ldr	r1, [r7, #4]
 80228e6:	2228      	movs	r2, #40	; 0x28
 80228e8:	4618      	mov	r0, r3
 80228ea:	f007 fe07 	bl	802a4fc <memcpy>
            memcpy(radian_copy_, radian_log_, (4 * NUM_OF_LOG));
 80228ee:	687b      	ldr	r3, [r7, #4]
 80228f0:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 80228f4:	687b      	ldr	r3, [r7, #4]
 80228f6:	3328      	adds	r3, #40	; 0x28
 80228f8:	2228      	movs	r2, #40	; 0x28
 80228fa:	4619      	mov	r1, r3
 80228fc:	f007 fdfe 	bl	802a4fc <memcpy>
            memcpy(various_copy_, various_log_, (2 * NUM_OF_LOG));
 8022900:	687b      	ldr	r3, [r7, #4]
 8022902:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 8022906:	687b      	ldr	r3, [r7, #4]
 8022908:	3350      	adds	r3, #80	; 0x50
 802290a:	2214      	movs	r2, #20
 802290c:	4619      	mov	r1, r3
 802290e:	f007 fdf5 	bl	802a4fc <memcpy>
            periodic_write_enable_ = 1;
 8022912:	687b      	ldr	r3, [r7, #4]
 8022914:	2201      	movs	r2, #1
 8022916:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 802291a:	e023      	b.n	8022964 <_ZN6Logger7LoggingEh+0x334>
        }
        else log_index++;
 802291c:	4b06      	ldr	r3, [pc, #24]	; (8022938 <_ZN6Logger7LoggingEh+0x308>)
 802291e:	881b      	ldrh	r3, [r3, #0]
 8022920:	3301      	adds	r3, #1
 8022922:	b29a      	uxth	r2, r3
 8022924:	4b04      	ldr	r3, [pc, #16]	; (8022938 <_ZN6Logger7LoggingEh+0x308>)
 8022926:	801a      	strh	r2, [r3, #0]
 8022928:	e01c      	b.n	8022964 <_ZN6Logger7LoggingEh+0x334>
 802292a:	bf00      	nop
 802292c:	f3af 8000 	nop.w
 8022930:	54442d18 	.word	0x54442d18
 8022934:	400921fb 	.word	0x400921fb
 8022938:	20000082 	.word	0x20000082
 802293c:	40668000 	.word	0x40668000
 8022940:	20000088 	.word	0x20000088
 8022944:	20000084 	.word	0x20000084
 8022948:	20000090 	.word	0x20000090
 802294c:	2000008c 	.word	0x2000008c
 8022950:	20000080 	.word	0x20000080
 8022954:	40340000 	.word	0x40340000
 8022958:	43ca0000 	.word	0x43ca0000
    }
    else excess_stack_ = excess;
 802295c:	687b      	ldr	r3, [r7, #4]
 802295e:	68fa      	ldr	r2, [r7, #12]
 8022960:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    /* Accel position log */
    static uint16_t accel_straight_cnt = 0;
    static uint8_t accel_step = 0;
    if(fabs(encoder.AngularVelocity()) < STRAIGHT_BORDER_OMEGA)
 8022964:	687b      	ldr	r3, [r7, #4]
 8022966:	33e8      	adds	r3, #232	; 0xe8
 8022968:	4618      	mov	r0, r3
 802296a:	f7fe facd 	bl	8020f08 <_ZN7Encoder15AngularVelocityEv>
 802296e:	eef0 7a40 	vmov.f32	s15, s0
 8022972:	eeb0 0a67 	vmov.f32	s0, s15
 8022976:	f7ff fdc3 	bl	8022500 <_ZSt4fabsf>
 802297a:	eeb0 7a40 	vmov.f32	s14, s0
 802297e:	ed5f 7a0a 	vldr	s15, [pc, #-40]	; 8022958 <_ZN6Logger7LoggingEh+0x328>
 8022982:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802298a:	bf4c      	ite	mi
 802298c:	2301      	movmi	r3, #1
 802298e:	2300      	movpl	r3, #0
 8022990:	b2db      	uxtb	r3, r3
 8022992:	2b00      	cmp	r3, #0
 8022994:	d021      	beq.n	80229da <_ZN6Logger7LoggingEh+0x3aa>
    {
        accel_straight_cnt++;
 8022996:	4b2e      	ldr	r3, [pc, #184]	; (8022a50 <_ZN6Logger7LoggingEh+0x420>)
 8022998:	881b      	ldrh	r3, [r3, #0]
 802299a:	3301      	adds	r3, #1
 802299c:	b29a      	uxth	r2, r3
 802299e:	4b2c      	ldr	r3, [pc, #176]	; (8022a50 <_ZN6Logger7LoggingEh+0x420>)
 80229a0:	801a      	strh	r2, [r3, #0]
        if(accel_straight_cnt >= CNT_OF_ACCEL_STEP_UP && accel_step < NUM_OF_ACCEL_STEP)
 80229a2:	4b2b      	ldr	r3, [pc, #172]	; (8022a50 <_ZN6Logger7LoggingEh+0x420>)
 80229a4:	881b      	ldrh	r3, [r3, #0]
 80229a6:	2b07      	cmp	r3, #7
 80229a8:	d947      	bls.n	8022a3a <_ZN6Logger7LoggingEh+0x40a>
 80229aa:	4b2a      	ldr	r3, [pc, #168]	; (8022a54 <_ZN6Logger7LoggingEh+0x424>)
 80229ac:	781b      	ldrb	r3, [r3, #0]
 80229ae:	2b04      	cmp	r3, #4
 80229b0:	d843      	bhi.n	8022a3a <_ZN6Logger7LoggingEh+0x40a>
        {
            accel_step++;
 80229b2:	4b28      	ldr	r3, [pc, #160]	; (8022a54 <_ZN6Logger7LoggingEh+0x424>)
 80229b4:	781b      	ldrb	r3, [r3, #0]
 80229b6:	3301      	adds	r3, #1
 80229b8:	b2da      	uxtb	r2, r3
 80229ba:	4b26      	ldr	r3, [pc, #152]	; (8022a54 <_ZN6Logger7LoggingEh+0x424>)
 80229bc:	701a      	strb	r2, [r3, #0]
            accel_address_[accel_step-1] = correction_address - CNT_OF_ACCEL_STEP_UP;
 80229be:	4b25      	ldr	r3, [pc, #148]	; (8022a54 <_ZN6Logger7LoggingEh+0x424>)
 80229c0:	781b      	ldrb	r3, [r3, #0]
 80229c2:	1e5a      	subs	r2, r3, #1
 80229c4:	8a3b      	ldrh	r3, [r7, #16]
 80229c6:	3b08      	subs	r3, #8
 80229c8:	b299      	uxth	r1, r3
 80229ca:	687b      	ldr	r3, [r7, #4]
 80229cc:	3264      	adds	r2, #100	; 0x64
 80229ce:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            accel_straight_cnt = 0;
 80229d2:	4b1f      	ldr	r3, [pc, #124]	; (8022a50 <_ZN6Logger7LoggingEh+0x420>)
 80229d4:	2200      	movs	r2, #0
 80229d6:	801a      	strh	r2, [r3, #0]
 80229d8:	e02f      	b.n	8022a3a <_ZN6Logger7LoggingEh+0x40a>
        }
    }
    else if(accel_step != 0)
 80229da:	4b1e      	ldr	r3, [pc, #120]	; (8022a54 <_ZN6Logger7LoggingEh+0x424>)
 80229dc:	781b      	ldrb	r3, [r3, #0]
 80229de:	2b00      	cmp	r3, #0
 80229e0:	d028      	beq.n	8022a34 <_ZN6Logger7LoggingEh+0x404>
    {
        for(int i = 1; i <= accel_step; i++)
 80229e2:	2301      	movs	r3, #1
 80229e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80229e6:	4b1b      	ldr	r3, [pc, #108]	; (8022a54 <_ZN6Logger7LoggingEh+0x424>)
 80229e8:	781b      	ldrb	r3, [r3, #0]
 80229ea:	461a      	mov	r2, r3
 80229ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80229ee:	4293      	cmp	r3, r2
 80229f0:	dc14      	bgt.n	8022a1c <_ZN6Logger7LoggingEh+0x3ec>
        {
            decel_address_[i-1] = (correction_address-1) - (DIFF_NEXT_ACCEL_STEP * i);
 80229f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80229f4:	b29b      	uxth	r3, r3
 80229f6:	009b      	lsls	r3, r3, #2
 80229f8:	b29b      	uxth	r3, r3
 80229fa:	8a3a      	ldrh	r2, [r7, #16]
 80229fc:	1ad3      	subs	r3, r2, r3
 80229fe:	b29a      	uxth	r2, r3
 8022a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022a02:	3b01      	subs	r3, #1
 8022a04:	3a01      	subs	r2, #1
 8022a06:	b291      	uxth	r1, r2
 8022a08:	687a      	ldr	r2, [r7, #4]
 8022a0a:	3368      	adds	r3, #104	; 0x68
 8022a0c:	005b      	lsls	r3, r3, #1
 8022a0e:	4413      	add	r3, r2
 8022a10:	460a      	mov	r2, r1
 8022a12:	805a      	strh	r2, [r3, #2]
        for(int i = 1; i <= accel_step; i++)
 8022a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022a16:	3301      	adds	r3, #1
 8022a18:	62bb      	str	r3, [r7, #40]	; 0x28
 8022a1a:	e7e4      	b.n	80229e6 <_ZN6Logger7LoggingEh+0x3b6>
        }
        accel_position_write_enable_ = accel_step;
 8022a1c:	4b0d      	ldr	r3, [pc, #52]	; (8022a54 <_ZN6Logger7LoggingEh+0x424>)
 8022a1e:	781a      	ldrb	r2, [r3, #0]
 8022a20:	687b      	ldr	r3, [r7, #4]
 8022a22:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        accel_step = 0;
 8022a26:	4b0b      	ldr	r3, [pc, #44]	; (8022a54 <_ZN6Logger7LoggingEh+0x424>)
 8022a28:	2200      	movs	r2, #0
 8022a2a:	701a      	strb	r2, [r3, #0]
        accel_straight_cnt = 0;
 8022a2c:	4b08      	ldr	r3, [pc, #32]	; (8022a50 <_ZN6Logger7LoggingEh+0x420>)
 8022a2e:	2200      	movs	r2, #0
 8022a30:	801a      	strh	r2, [r3, #0]
 8022a32:	e002      	b.n	8022a3a <_ZN6Logger7LoggingEh+0x40a>
    }
    else accel_straight_cnt = 0;
 8022a34:	4b06      	ldr	r3, [pc, #24]	; (8022a50 <_ZN6Logger7LoggingEh+0x420>)
 8022a36:	2200      	movs	r2, #0
 8022a38:	801a      	strh	r2, [r3, #0]

    now_address++;
 8022a3a:	4b07      	ldr	r3, [pc, #28]	; (8022a58 <_ZN6Logger7LoggingEh+0x428>)
 8022a3c:	881b      	ldrh	r3, [r3, #0]
 8022a3e:	3301      	adds	r3, #1
 8022a40:	b29a      	uxth	r2, r3
 8022a42:	4b05      	ldr	r3, [pc, #20]	; (8022a58 <_ZN6Logger7LoggingEh+0x428>)
 8022a44:	801a      	strh	r2, [r3, #0]
 8022a46:	e000      	b.n	8022a4a <_ZN6Logger7LoggingEh+0x41a>
    if(distance < LOGGING_CONST_DISTANCE) return;
 8022a48:	bf00      	nop
}
 8022a4a:	3730      	adds	r7, #48	; 0x30
 8022a4c:	46bd      	mov	sp, r7
 8022a4e:	bdb0      	pop	{r4, r5, r7, pc}
 8022a50:	20000094 	.word	0x20000094
 8022a54:	20000096 	.word	0x20000096
 8022a58:	20000080 	.word	0x20000080

08022a5c <_ZN6Logger16StorePeriodicLogEv>:

uint8_t Logger::StorePeriodicLog()
{
 8022a5c:	b580      	push	{r7, lr}
 8022a5e:	b084      	sub	sp, #16
 8022a60:	af00      	add	r7, sp, #0
 8022a62:	6078      	str	r0, [r7, #4]
    if(periodic_write_enable_ == 0) return 0;
 8022a64:	687b      	ldr	r3, [r7, #4]
 8022a66:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8022a6a:	2b00      	cmp	r3, #0
 8022a6c:	d101      	bne.n	8022a72 <_ZN6Logger16StorePeriodicLogEv+0x16>
 8022a6e:	2300      	movs	r3, #0
 8022a70:	e087      	b.n	8022b82 <_ZN6Logger16StorePeriodicLogEv+0x126>
    else periodic_write_enable_ = 0;
 8022a72:	687b      	ldr	r3, [r7, #4]
 8022a74:	2200      	movs	r2, #0
 8022a76:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    static uint32_t address_a = HEAD_ADDRESS_BLOCK_A;
    static uint32_t address_b = HEAD_ADDRESS_BLOCK_B;
    static uint32_t address_c = HEAD_ADDRESS_BLOCK_C;
    uint8_t result = 0;
 8022a7a:	2300      	movs	r3, #0
 8022a7c:	73fb      	strb	r3, [r7, #15]

    if(!flash.CheckBlankWord(address_a, NUM_OF_LOG))     return 0x10;
 8022a7e:	687b      	ldr	r3, [r7, #4]
 8022a80:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022a84:	4b41      	ldr	r3, [pc, #260]	; (8022b8c <_ZN6Logger16StorePeriodicLogEv+0x130>)
 8022a86:	681b      	ldr	r3, [r3, #0]
 8022a88:	220a      	movs	r2, #10
 8022a8a:	4619      	mov	r1, r3
 8022a8c:	f7fe fbd1 	bl	8021232 <_ZN5Flash14CheckBlankWordEmm>
 8022a90:	4603      	mov	r3, r0
 8022a92:	f083 0301 	eor.w	r3, r3, #1
 8022a96:	b2db      	uxtb	r3, r3
 8022a98:	2b00      	cmp	r3, #0
 8022a9a:	d001      	beq.n	8022aa0 <_ZN6Logger16StorePeriodicLogEv+0x44>
 8022a9c:	2310      	movs	r3, #16
 8022a9e:	e070      	b.n	8022b82 <_ZN6Logger16StorePeriodicLogEv+0x126>
    if(!flash.CheckBlankWord(address_b, NUM_OF_LOG))     return 0x20;
 8022aa0:	687b      	ldr	r3, [r7, #4]
 8022aa2:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022aa6:	4b3a      	ldr	r3, [pc, #232]	; (8022b90 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 8022aa8:	681b      	ldr	r3, [r3, #0]
 8022aaa:	220a      	movs	r2, #10
 8022aac:	4619      	mov	r1, r3
 8022aae:	f7fe fbc0 	bl	8021232 <_ZN5Flash14CheckBlankWordEmm>
 8022ab2:	4603      	mov	r3, r0
 8022ab4:	f083 0301 	eor.w	r3, r3, #1
 8022ab8:	b2db      	uxtb	r3, r3
 8022aba:	2b00      	cmp	r3, #0
 8022abc:	d001      	beq.n	8022ac2 <_ZN6Logger16StorePeriodicLogEv+0x66>
 8022abe:	2320      	movs	r3, #32
 8022ac0:	e05f      	b.n	8022b82 <_ZN6Logger16StorePeriodicLogEv+0x126>
    if(!flash.CheckBlankHalfword(address_c, NUM_OF_LOG)) return 0x40;
 8022ac2:	687b      	ldr	r3, [r7, #4]
 8022ac4:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022ac8:	4b32      	ldr	r3, [pc, #200]	; (8022b94 <_ZN6Logger16StorePeriodicLogEv+0x138>)
 8022aca:	681b      	ldr	r3, [r3, #0]
 8022acc:	220a      	movs	r2, #10
 8022ace:	4619      	mov	r1, r3
 8022ad0:	f7fe fb5b 	bl	802118a <_ZN5Flash18CheckBlankHalfwordEmm>
 8022ad4:	4603      	mov	r3, r0
 8022ad6:	f083 0301 	eor.w	r3, r3, #1
 8022ada:	b2db      	uxtb	r3, r3
 8022adc:	2b00      	cmp	r3, #0
 8022ade:	d001      	beq.n	8022ae4 <_ZN6Logger16StorePeriodicLogEv+0x88>
 8022ae0:	2340      	movs	r3, #64	; 0x40
 8022ae2:	e04e      	b.n	8022b82 <_ZN6Logger16StorePeriodicLogEv+0x126>

    if(!flash.StoreFloat(address_a, const_distance_copy_, NUM_OF_LOG)) result |= 0x01;
 8022ae4:	687b      	ldr	r3, [r7, #4]
 8022ae6:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022aea:	4b28      	ldr	r3, [pc, #160]	; (8022b8c <_ZN6Logger16StorePeriodicLogEv+0x130>)
 8022aec:	6819      	ldr	r1, [r3, #0]
 8022aee:	687b      	ldr	r3, [r7, #4]
 8022af0:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8022af4:	230a      	movs	r3, #10
 8022af6:	f7fe fac4 	bl	8021082 <_ZN5Flash10StoreFloatEmPfm>
 8022afa:	4603      	mov	r3, r0
 8022afc:	f083 0301 	eor.w	r3, r3, #1
 8022b00:	b2db      	uxtb	r3, r3
 8022b02:	2b00      	cmp	r3, #0
 8022b04:	d003      	beq.n	8022b0e <_ZN6Logger16StorePeriodicLogEv+0xb2>
 8022b06:	7bfb      	ldrb	r3, [r7, #15]
 8022b08:	f043 0301 	orr.w	r3, r3, #1
 8022b0c:	73fb      	strb	r3, [r7, #15]
    if(!flash.StoreFloat(address_b, radian_copy_, NUM_OF_LOG))         result |= 0x02;
 8022b0e:	687b      	ldr	r3, [r7, #4]
 8022b10:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022b14:	4b1e      	ldr	r3, [pc, #120]	; (8022b90 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 8022b16:	6819      	ldr	r1, [r3, #0]
 8022b18:	687b      	ldr	r3, [r7, #4]
 8022b1a:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 8022b1e:	230a      	movs	r3, #10
 8022b20:	f7fe faaf 	bl	8021082 <_ZN5Flash10StoreFloatEmPfm>
 8022b24:	4603      	mov	r3, r0
 8022b26:	f083 0301 	eor.w	r3, r3, #1
 8022b2a:	b2db      	uxtb	r3, r3
 8022b2c:	2b00      	cmp	r3, #0
 8022b2e:	d003      	beq.n	8022b38 <_ZN6Logger16StorePeriodicLogEv+0xdc>
 8022b30:	7bfb      	ldrb	r3, [r7, #15]
 8022b32:	f043 0302 	orr.w	r3, r3, #2
 8022b36:	73fb      	strb	r3, [r7, #15]
    if(!flash.StoreUint16(address_c, various_copy_, NUM_OF_LOG))       result |= 0x04;
 8022b38:	687b      	ldr	r3, [r7, #4]
 8022b3a:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022b3e:	4b15      	ldr	r3, [pc, #84]	; (8022b94 <_ZN6Logger16StorePeriodicLogEv+0x138>)
 8022b40:	6819      	ldr	r1, [r3, #0]
 8022b42:	687b      	ldr	r3, [r7, #4]
 8022b44:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8022b48:	230a      	movs	r3, #10
 8022b4a:	f7fe fa65 	bl	8021018 <_ZN5Flash11StoreUint16EmPtm>
 8022b4e:	4603      	mov	r3, r0
 8022b50:	f083 0301 	eor.w	r3, r3, #1
 8022b54:	b2db      	uxtb	r3, r3
 8022b56:	2b00      	cmp	r3, #0
 8022b58:	d003      	beq.n	8022b62 <_ZN6Logger16StorePeriodicLogEv+0x106>
 8022b5a:	7bfb      	ldrb	r3, [r7, #15]
 8022b5c:	f043 0304 	orr.w	r3, r3, #4
 8022b60:	73fb      	strb	r3, [r7, #15]

    address_a += NUM_OF_LOG * 4;
 8022b62:	4b0a      	ldr	r3, [pc, #40]	; (8022b8c <_ZN6Logger16StorePeriodicLogEv+0x130>)
 8022b64:	681b      	ldr	r3, [r3, #0]
 8022b66:	3328      	adds	r3, #40	; 0x28
 8022b68:	4a08      	ldr	r2, [pc, #32]	; (8022b8c <_ZN6Logger16StorePeriodicLogEv+0x130>)
 8022b6a:	6013      	str	r3, [r2, #0]
    address_b += NUM_OF_LOG * 4;
 8022b6c:	4b08      	ldr	r3, [pc, #32]	; (8022b90 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 8022b6e:	681b      	ldr	r3, [r3, #0]
 8022b70:	3328      	adds	r3, #40	; 0x28
 8022b72:	4a07      	ldr	r2, [pc, #28]	; (8022b90 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 8022b74:	6013      	str	r3, [r2, #0]
    address_c += NUM_OF_LOG * 2;
 8022b76:	4b07      	ldr	r3, [pc, #28]	; (8022b94 <_ZN6Logger16StorePeriodicLogEv+0x138>)
 8022b78:	681b      	ldr	r3, [r3, #0]
 8022b7a:	3314      	adds	r3, #20
 8022b7c:	4a05      	ldr	r2, [pc, #20]	; (8022b94 <_ZN6Logger16StorePeriodicLogEv+0x138>)
 8022b7e:	6013      	str	r3, [r2, #0]

    return result;
 8022b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8022b82:	4618      	mov	r0, r3
 8022b84:	3710      	adds	r7, #16
 8022b86:	46bd      	mov	sp, r7
 8022b88:	bd80      	pop	{r7, pc}
 8022b8a:	bf00      	nop
 8022b8c:	20000000 	.word	0x20000000
 8022b90:	20000004 	.word	0x20000004
 8022b94:	20000008 	.word	0x20000008

08022b98 <_ZN6Logger21StoreAccelPositionLogEv>:

uint8_t Logger::StoreAccelPositionLog()
{
 8022b98:	b580      	push	{r7, lr}
 8022b9a:	b086      	sub	sp, #24
 8022b9c:	af00      	add	r7, sp, #0
 8022b9e:	6078      	str	r0, [r7, #4]
    uint8_t accel_step = accel_position_write_enable_;
 8022ba0:	687b      	ldr	r3, [r7, #4]
 8022ba2:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8022ba6:	75bb      	strb	r3, [r7, #22]
    if(accel_step == 0) return 0;
 8022ba8:	7dbb      	ldrb	r3, [r7, #22]
 8022baa:	2b00      	cmp	r3, #0
 8022bac:	d101      	bne.n	8022bb2 <_ZN6Logger21StoreAccelPositionLogEv+0x1a>
 8022bae:	2300      	movs	r3, #0
 8022bb0:	e079      	b.n	8022ca6 <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
    else accel_position_write_enable_ = 0;
 8022bb2:	687b      	ldr	r3, [r7, #4]
 8022bb4:	2200      	movs	r2, #0
 8022bb6:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    uint32_t address;
    uint8_t accel = 0; // step 0x01, 0x02, 0x03, 0x04, 0x05.
 8022bba:	2300      	movs	r3, #0
 8022bbc:	73fb      	strb	r3, [r7, #15]
    uint8_t decel = 0; // step 0x10, 0x20, 0x30, 0x40, 0x50.
 8022bbe:	2300      	movs	r3, #0
 8022bc0:	73bb      	strb	r3, [r7, #14]
    uint8_t i;

    for(i = 1; i <= accel_step; i++)
 8022bc2:	2301      	movs	r3, #1
 8022bc4:	75fb      	strb	r3, [r7, #23]
 8022bc6:	7dfa      	ldrb	r2, [r7, #23]
 8022bc8:	7dbb      	ldrb	r3, [r7, #22]
 8022bca:	429a      	cmp	r2, r3
 8022bcc:	d830      	bhi.n	8022c30 <_ZN6Logger21StoreAccelPositionLogEv+0x98>
    {
        accel = i;
 8022bce:	7dfb      	ldrb	r3, [r7, #23]
 8022bd0:	73fb      	strb	r3, [r7, #15]
        address = HEAD_ADDRESS_BLOCK_D + accel_address_[i-1];
 8022bd2:	7dfb      	ldrb	r3, [r7, #23]
 8022bd4:	1e5a      	subs	r2, r3, #1
 8022bd6:	687b      	ldr	r3, [r7, #4]
 8022bd8:	3264      	adds	r2, #100	; 0x64
 8022bda:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8022bde:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022be2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8022be6:	613b      	str	r3, [r7, #16]
        if(!flash.CheckBlankByte(address, 1))      return 0x10;
 8022be8:	687b      	ldr	r3, [r7, #4]
 8022bea:	33f4      	adds	r3, #244	; 0xf4
 8022bec:	2201      	movs	r2, #1
 8022bee:	6939      	ldr	r1, [r7, #16]
 8022bf0:	4618      	mov	r0, r3
 8022bf2:	f7fe fa7d 	bl	80210f0 <_ZN5Flash14CheckBlankByteEmm>
 8022bf6:	4603      	mov	r3, r0
 8022bf8:	f083 0301 	eor.w	r3, r3, #1
 8022bfc:	b2db      	uxtb	r3, r3
 8022bfe:	2b00      	cmp	r3, #0
 8022c00:	d001      	beq.n	8022c06 <_ZN6Logger21StoreAccelPositionLogEv+0x6e>
 8022c02:	2310      	movs	r3, #16
 8022c04:	e04f      	b.n	8022ca6 <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
        if(!flash.StoreUint8(address, &accel, 1)) return 0x20;
 8022c06:	687b      	ldr	r3, [r7, #4]
 8022c08:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022c0c:	f107 020f 	add.w	r2, r7, #15
 8022c10:	2301      	movs	r3, #1
 8022c12:	6939      	ldr	r1, [r7, #16]
 8022c14:	f7fe f9cc 	bl	8020fb0 <_ZN5Flash10StoreUint8EmPhm>
 8022c18:	4603      	mov	r3, r0
 8022c1a:	f083 0301 	eor.w	r3, r3, #1
 8022c1e:	b2db      	uxtb	r3, r3
 8022c20:	2b00      	cmp	r3, #0
 8022c22:	d001      	beq.n	8022c28 <_ZN6Logger21StoreAccelPositionLogEv+0x90>
 8022c24:	2320      	movs	r3, #32
 8022c26:	e03e      	b.n	8022ca6 <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
    for(i = 1; i <= accel_step; i++)
 8022c28:	7dfb      	ldrb	r3, [r7, #23]
 8022c2a:	3301      	adds	r3, #1
 8022c2c:	75fb      	strb	r3, [r7, #23]
 8022c2e:	e7ca      	b.n	8022bc6 <_ZN6Logger21StoreAccelPositionLogEv+0x2e>
    }
    for(i = 1; i <= accel_step; i++)
 8022c30:	2301      	movs	r3, #1
 8022c32:	75fb      	strb	r3, [r7, #23]
 8022c34:	7dfa      	ldrb	r2, [r7, #23]
 8022c36:	7dbb      	ldrb	r3, [r7, #22]
 8022c38:	429a      	cmp	r2, r3
 8022c3a:	d833      	bhi.n	8022ca4 <_ZN6Logger21StoreAccelPositionLogEv+0x10c>
    {
        decel = i << 4;
 8022c3c:	7dfb      	ldrb	r3, [r7, #23]
 8022c3e:	011b      	lsls	r3, r3, #4
 8022c40:	b2db      	uxtb	r3, r3
 8022c42:	73bb      	strb	r3, [r7, #14]
        address = HEAD_ADDRESS_BLOCK_D + decel_address_[i-1];
 8022c44:	7dfb      	ldrb	r3, [r7, #23]
 8022c46:	3b01      	subs	r3, #1
 8022c48:	687a      	ldr	r2, [r7, #4]
 8022c4a:	3368      	adds	r3, #104	; 0x68
 8022c4c:	005b      	lsls	r3, r3, #1
 8022c4e:	4413      	add	r3, r2
 8022c50:	885b      	ldrh	r3, [r3, #2]
 8022c52:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022c56:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8022c5a:	613b      	str	r3, [r7, #16]
        if(!flash.CheckBlankByte(address, 1))      return 0x30;
 8022c5c:	687b      	ldr	r3, [r7, #4]
 8022c5e:	33f4      	adds	r3, #244	; 0xf4
 8022c60:	2201      	movs	r2, #1
 8022c62:	6939      	ldr	r1, [r7, #16]
 8022c64:	4618      	mov	r0, r3
 8022c66:	f7fe fa43 	bl	80210f0 <_ZN5Flash14CheckBlankByteEmm>
 8022c6a:	4603      	mov	r3, r0
 8022c6c:	f083 0301 	eor.w	r3, r3, #1
 8022c70:	b2db      	uxtb	r3, r3
 8022c72:	2b00      	cmp	r3, #0
 8022c74:	d001      	beq.n	8022c7a <_ZN6Logger21StoreAccelPositionLogEv+0xe2>
 8022c76:	2330      	movs	r3, #48	; 0x30
 8022c78:	e015      	b.n	8022ca6 <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
        if(!flash.StoreUint8(address, &decel, 1)) return 0x40;
 8022c7a:	687b      	ldr	r3, [r7, #4]
 8022c7c:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022c80:	f107 020e 	add.w	r2, r7, #14
 8022c84:	2301      	movs	r3, #1
 8022c86:	6939      	ldr	r1, [r7, #16]
 8022c88:	f7fe f992 	bl	8020fb0 <_ZN5Flash10StoreUint8EmPhm>
 8022c8c:	4603      	mov	r3, r0
 8022c8e:	f083 0301 	eor.w	r3, r3, #1
 8022c92:	b2db      	uxtb	r3, r3
 8022c94:	2b00      	cmp	r3, #0
 8022c96:	d001      	beq.n	8022c9c <_ZN6Logger21StoreAccelPositionLogEv+0x104>
 8022c98:	2340      	movs	r3, #64	; 0x40
 8022c9a:	e004      	b.n	8022ca6 <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
    for(i = 1; i <= accel_step; i++)
 8022c9c:	7dfb      	ldrb	r3, [r7, #23]
 8022c9e:	3301      	adds	r3, #1
 8022ca0:	75fb      	strb	r3, [r7, #23]
 8022ca2:	e7c7      	b.n	8022c34 <_ZN6Logger21StoreAccelPositionLogEv+0x9c>
    }
    
    return 0;
 8022ca4:	2300      	movs	r3, #0
}
 8022ca6:	4618      	mov	r0, r3
 8022ca8:	3718      	adds	r7, #24
 8022caa:	46bd      	mov	sp, r7
 8022cac:	bd80      	pop	{r7, pc}
	...

08022cb0 <_ZN6Logger7LoadingEv>:

void Logger::Loading()
{
 8022cb0:	b580      	push	{r7, lr}
 8022cb2:	b08c      	sub	sp, #48	; 0x30
 8022cb4:	af00      	add	r7, sp, #0
 8022cb6:	6078      	str	r0, [r7, #4]
    float distance = encoder.GetDistanceStack();
 8022cb8:	687b      	ldr	r3, [r7, #4]
 8022cba:	33e8      	adds	r3, #232	; 0xe8
 8022cbc:	4618      	mov	r0, r3
 8022cbe:	f7fe f914 	bl	8020eea <_ZN7Encoder16GetDistanceStackEv>
 8022cc2:	ed87 0a08 	vstr	s0, [r7, #32]

    if(distance < LOGGING_CONST_DISTANCE) return;
 8022cc6:	edd7 7a08 	vldr	s15, [r7, #32]
 8022cca:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8022cce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022cd6:	f100 8299 	bmi.w	802320c <_ZN6Logger7LoadingEv+0x55c>
    encoder.ResetDistanceStack();
 8022cda:	687b      	ldr	r3, [r7, #4]
 8022cdc:	33e8      	adds	r3, #232	; 0xe8
 8022cde:	4618      	mov	r0, r3
 8022ce0:	f7fe f8e6 	bl	8020eb0 <_ZN7Encoder18ResetDistanceStackEv>

    static uint16_t now_address = 0;

    /* Load curvature radius */
    float log_distance = *(reinterpret_cast<float*>(now_address + HEAD_ADDRESS_BLOCK_A));
 8022ce4:	4bad      	ldr	r3, [pc, #692]	; (8022f9c <_ZN6Logger7LoadingEv+0x2ec>)
 8022ce6:	881b      	ldrh	r3, [r3, #0]
 8022ce8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022cec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8022cf0:	681b      	ldr	r3, [r3, #0]
 8022cf2:	61fb      	str	r3, [r7, #28]
    float log_radian = *(reinterpret_cast<float*>(now_address + HEAD_ADDRESS_BLOCK_B));
 8022cf4:	4ba9      	ldr	r3, [pc, #676]	; (8022f9c <_ZN6Logger7LoadingEv+0x2ec>)
 8022cf6:	881b      	ldrh	r3, [r3, #0]
 8022cf8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022cfc:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8022d00:	681b      	ldr	r3, [r3, #0]
 8022d02:	61bb      	str	r3, [r7, #24]
    float radius = log_distance / log_radian;
 8022d04:	edd7 6a07 	vldr	s13, [r7, #28]
 8022d08:	ed97 7a06 	vldr	s14, [r7, #24]
 8022d0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022d10:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Load correction position */
    uint16_t log_various = *(reinterpret_cast<uint16_t*>(now_address + HEAD_ADDRESS_BLOCK_C));
 8022d14:	4ba1      	ldr	r3, [pc, #644]	; (8022f9c <_ZN6Logger7LoadingEv+0x2ec>)
 8022d16:	881b      	ldrh	r3, [r3, #0]
 8022d18:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022d1c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8022d20:	881b      	ldrh	r3, [r3, #0]
 8022d22:	827b      	strh	r3, [r7, #18]
    bool log_corner = false, log_corner_pass = false;
 8022d24:	2300      	movs	r3, #0
 8022d26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8022d2a:	2300      	movs	r3, #0
 8022d2c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    bool log_cross = false, log_cross_pass = false;
 8022d30:	2300      	movs	r3, #0
 8022d32:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8022d36:	2300      	movs	r3, #0
 8022d38:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    if((log_various & 0x0002) == 0x0002) log_corner = true;
 8022d3c:	8a7b      	ldrh	r3, [r7, #18]
 8022d3e:	f003 0302 	and.w	r3, r3, #2
 8022d42:	2b00      	cmp	r3, #0
 8022d44:	d002      	beq.n	8022d4c <_ZN6Logger7LoadingEv+0x9c>
 8022d46:	2301      	movs	r3, #1
 8022d48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if((log_various & 0x0001) == 0x0001) log_cross = true;
 8022d4c:	8a7b      	ldrh	r3, [r7, #18]
 8022d4e:	f003 0301 	and.w	r3, r3, #1
 8022d52:	2b00      	cmp	r3, #0
 8022d54:	d002      	beq.n	8022d5c <_ZN6Logger7LoadingEv+0xac>
 8022d56:	2301      	movs	r3, #1
 8022d58:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    /* Get correction position */
    bool run_corner = false, run_corner_pass = false;
 8022d5c:	2300      	movs	r3, #0
 8022d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022d62:	2300      	movs	r3, #0
 8022d64:	747b      	strb	r3, [r7, #17]
    bool run_cross = false, run_cross_pass = false;
 8022d66:	2300      	movs	r3, #0
 8022d68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8022d6c:	2300      	movs	r3, #0
 8022d6e:	743b      	strb	r3, [r7, #16]
    uint8_t corner = side_sensor.GetCornerMarkerCount();
 8022d70:	687b      	ldr	r3, [r7, #4]
 8022d72:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022d76:	4618      	mov	r0, r3
 8022d78:	f002 fc1f 	bl	80255ba <_ZN10SideSensor20GetCornerMarkerCountEv>
 8022d7c:	4603      	mov	r3, r0
 8022d7e:	73fb      	strb	r3, [r7, #15]
    uint8_t cross = side_sensor.GetCrossLineCount();
 8022d80:	687b      	ldr	r3, [r7, #4]
 8022d82:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022d86:	4618      	mov	r0, r3
 8022d88:	f002 fc23 	bl	80255d2 <_ZN10SideSensor17GetCrossLineCountEv>
 8022d8c:	4603      	mov	r3, r0
 8022d8e:	73bb      	strb	r3, [r7, #14]
    static uint8_t pre_corner = corner;
 8022d90:	4b83      	ldr	r3, [pc, #524]	; (8022fa0 <_ZN6Logger7LoadingEv+0x2f0>)
 8022d92:	781b      	ldrb	r3, [r3, #0]
 8022d94:	f3bf 8f5b 	dmb	ish
 8022d98:	b2db      	uxtb	r3, r3
 8022d9a:	f003 0301 	and.w	r3, r3, #1
 8022d9e:	2b00      	cmp	r3, #0
 8022da0:	bf0c      	ite	eq
 8022da2:	2301      	moveq	r3, #1
 8022da4:	2300      	movne	r3, #0
 8022da6:	b2db      	uxtb	r3, r3
 8022da8:	2b00      	cmp	r3, #0
 8022daa:	d010      	beq.n	8022dce <_ZN6Logger7LoadingEv+0x11e>
 8022dac:	487c      	ldr	r0, [pc, #496]	; (8022fa0 <_ZN6Logger7LoadingEv+0x2f0>)
 8022dae:	f007 fb71 	bl	802a494 <__cxa_guard_acquire>
 8022db2:	4603      	mov	r3, r0
 8022db4:	2b00      	cmp	r3, #0
 8022db6:	bf14      	ite	ne
 8022db8:	2301      	movne	r3, #1
 8022dba:	2300      	moveq	r3, #0
 8022dbc:	b2db      	uxtb	r3, r3
 8022dbe:	2b00      	cmp	r3, #0
 8022dc0:	d005      	beq.n	8022dce <_ZN6Logger7LoadingEv+0x11e>
 8022dc2:	4a78      	ldr	r2, [pc, #480]	; (8022fa4 <_ZN6Logger7LoadingEv+0x2f4>)
 8022dc4:	7bfb      	ldrb	r3, [r7, #15]
 8022dc6:	7013      	strb	r3, [r2, #0]
 8022dc8:	4875      	ldr	r0, [pc, #468]	; (8022fa0 <_ZN6Logger7LoadingEv+0x2f0>)
 8022dca:	f007 fb6f 	bl	802a4ac <__cxa_guard_release>
    static uint8_t pre_cross = cross;
 8022dce:	4b76      	ldr	r3, [pc, #472]	; (8022fa8 <_ZN6Logger7LoadingEv+0x2f8>)
 8022dd0:	781b      	ldrb	r3, [r3, #0]
 8022dd2:	f3bf 8f5b 	dmb	ish
 8022dd6:	b2db      	uxtb	r3, r3
 8022dd8:	f003 0301 	and.w	r3, r3, #1
 8022ddc:	2b00      	cmp	r3, #0
 8022dde:	bf0c      	ite	eq
 8022de0:	2301      	moveq	r3, #1
 8022de2:	2300      	movne	r3, #0
 8022de4:	b2db      	uxtb	r3, r3
 8022de6:	2b00      	cmp	r3, #0
 8022de8:	d010      	beq.n	8022e0c <_ZN6Logger7LoadingEv+0x15c>
 8022dea:	486f      	ldr	r0, [pc, #444]	; (8022fa8 <_ZN6Logger7LoadingEv+0x2f8>)
 8022dec:	f007 fb52 	bl	802a494 <__cxa_guard_acquire>
 8022df0:	4603      	mov	r3, r0
 8022df2:	2b00      	cmp	r3, #0
 8022df4:	bf14      	ite	ne
 8022df6:	2301      	movne	r3, #1
 8022df8:	2300      	moveq	r3, #0
 8022dfa:	b2db      	uxtb	r3, r3
 8022dfc:	2b00      	cmp	r3, #0
 8022dfe:	d005      	beq.n	8022e0c <_ZN6Logger7LoadingEv+0x15c>
 8022e00:	4a6a      	ldr	r2, [pc, #424]	; (8022fac <_ZN6Logger7LoadingEv+0x2fc>)
 8022e02:	7bbb      	ldrb	r3, [r7, #14]
 8022e04:	7013      	strb	r3, [r2, #0]
 8022e06:	4868      	ldr	r0, [pc, #416]	; (8022fa8 <_ZN6Logger7LoadingEv+0x2f8>)
 8022e08:	f007 fb50 	bl	802a4ac <__cxa_guard_release>
    static uint8_t straight_cnt = 0;
    bool straight = false;
 8022e0c:	2300      	movs	r3, #0
 8022e0e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    if(fabs(encoder.AngularVelocity()) < STRAIGHT_BORDER_OMEGA){
 8022e12:	687b      	ldr	r3, [r7, #4]
 8022e14:	33e8      	adds	r3, #232	; 0xe8
 8022e16:	4618      	mov	r0, r3
 8022e18:	f7fe f876 	bl	8020f08 <_ZN7Encoder15AngularVelocityEv>
 8022e1c:	eef0 7a40 	vmov.f32	s15, s0
 8022e20:	eeb0 0a67 	vmov.f32	s0, s15
 8022e24:	f7ff fb6c 	bl	8022500 <_ZSt4fabsf>
 8022e28:	eeb0 7a40 	vmov.f32	s14, s0
 8022e2c:	eddf 7a60 	vldr	s15, [pc, #384]	; 8022fb0 <_ZN6Logger7LoadingEv+0x300>
 8022e30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022e38:	bf4c      	ite	mi
 8022e3a:	2301      	movmi	r3, #1
 8022e3c:	2300      	movpl	r3, #0
 8022e3e:	b2db      	uxtb	r3, r3
 8022e40:	2b00      	cmp	r3, #0
 8022e42:	d00e      	beq.n	8022e62 <_ZN6Logger7LoadingEv+0x1b2>
        if(straight_cnt <= STRAIGHT_JUDGE_COUNT) straight_cnt++;
 8022e44:	4b5b      	ldr	r3, [pc, #364]	; (8022fb4 <_ZN6Logger7LoadingEv+0x304>)
 8022e46:	781b      	ldrb	r3, [r3, #0]
 8022e48:	2b05      	cmp	r3, #5
 8022e4a:	d806      	bhi.n	8022e5a <_ZN6Logger7LoadingEv+0x1aa>
 8022e4c:	4b59      	ldr	r3, [pc, #356]	; (8022fb4 <_ZN6Logger7LoadingEv+0x304>)
 8022e4e:	781b      	ldrb	r3, [r3, #0]
 8022e50:	3301      	adds	r3, #1
 8022e52:	b2da      	uxtb	r2, r3
 8022e54:	4b57      	ldr	r3, [pc, #348]	; (8022fb4 <_ZN6Logger7LoadingEv+0x304>)
 8022e56:	701a      	strb	r2, [r3, #0]
 8022e58:	e006      	b.n	8022e68 <_ZN6Logger7LoadingEv+0x1b8>
        else straight = true;
 8022e5a:	2301      	movs	r3, #1
 8022e5c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8022e60:	e002      	b.n	8022e68 <_ZN6Logger7LoadingEv+0x1b8>
    }else straight_cnt = 0;
 8022e62:	4b54      	ldr	r3, [pc, #336]	; (8022fb4 <_ZN6Logger7LoadingEv+0x304>)
 8022e64:	2200      	movs	r2, #0
 8022e66:	701a      	strb	r2, [r3, #0]
    if(corner > pre_corner && straight) run_corner = true;
 8022e68:	4b4e      	ldr	r3, [pc, #312]	; (8022fa4 <_ZN6Logger7LoadingEv+0x2f4>)
 8022e6a:	781b      	ldrb	r3, [r3, #0]
 8022e6c:	7bfa      	ldrb	r2, [r7, #15]
 8022e6e:	429a      	cmp	r2, r3
 8022e70:	d906      	bls.n	8022e80 <_ZN6Logger7LoadingEv+0x1d0>
 8022e72:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8022e76:	2b00      	cmp	r3, #0
 8022e78:	d002      	beq.n	8022e80 <_ZN6Logger7LoadingEv+0x1d0>
 8022e7a:	2301      	movs	r3, #1
 8022e7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if(cross > pre_cross) run_cross = true;
 8022e80:	4b4a      	ldr	r3, [pc, #296]	; (8022fac <_ZN6Logger7LoadingEv+0x2fc>)
 8022e82:	781b      	ldrb	r3, [r3, #0]
 8022e84:	7bba      	ldrb	r2, [r7, #14]
 8022e86:	429a      	cmp	r2, r3
 8022e88:	d902      	bls.n	8022e90 <_ZN6Logger7LoadingEv+0x1e0>
 8022e8a:	2301      	movs	r3, #1
 8022e8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    pre_corner = corner;
 8022e90:	4a44      	ldr	r2, [pc, #272]	; (8022fa4 <_ZN6Logger7LoadingEv+0x2f4>)
 8022e92:	7bfb      	ldrb	r3, [r7, #15]
 8022e94:	7013      	strb	r3, [r2, #0]
    pre_cross = cross;
 8022e96:	4a45      	ldr	r2, [pc, #276]	; (8022fac <_ZN6Logger7LoadingEv+0x2fc>)
 8022e98:	7bbb      	ldrb	r3, [r7, #14]
 8022e9a:	7013      	strb	r3, [r2, #0]

    /* Position correction at corner marker */
    static uint16_t log_corner_address, run_corner_address;
    static uint8_t log_corner_wait = 0, run_corner_wait = 0;
    if(log_corner == true){
 8022e9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8022ea0:	2b00      	cmp	r3, #0
 8022ea2:	d01f      	beq.n	8022ee4 <_ZN6Logger7LoadingEv+0x234>
        if(run_corner_pass == true){
 8022ea4:	7c7b      	ldrb	r3, [r7, #17]
 8022ea6:	2b00      	cmp	r3, #0
 8022ea8:	d011      	beq.n	8022ece <_ZN6Logger7LoadingEv+0x21e>
            now_address += now_address - run_corner_address;
 8022eaa:	4b3c      	ldr	r3, [pc, #240]	; (8022f9c <_ZN6Logger7LoadingEv+0x2ec>)
 8022eac:	881a      	ldrh	r2, [r3, #0]
 8022eae:	4b42      	ldr	r3, [pc, #264]	; (8022fb8 <_ZN6Logger7LoadingEv+0x308>)
 8022eb0:	881b      	ldrh	r3, [r3, #0]
 8022eb2:	1ad3      	subs	r3, r2, r3
 8022eb4:	b29a      	uxth	r2, r3
 8022eb6:	4b39      	ldr	r3, [pc, #228]	; (8022f9c <_ZN6Logger7LoadingEv+0x2ec>)
 8022eb8:	881b      	ldrh	r3, [r3, #0]
 8022eba:	4413      	add	r3, r2
 8022ebc:	b29a      	uxth	r2, r3
 8022ebe:	4b37      	ldr	r3, [pc, #220]	; (8022f9c <_ZN6Logger7LoadingEv+0x2ec>)
 8022ec0:	801a      	strh	r2, [r3, #0]
            run_corner_wait = 0;
 8022ec2:	4b3e      	ldr	r3, [pc, #248]	; (8022fbc <_ZN6Logger7LoadingEv+0x30c>)
 8022ec4:	2200      	movs	r2, #0
 8022ec6:	701a      	strb	r2, [r3, #0]
            run_corner_pass = false;
 8022ec8:	2300      	movs	r3, #0
 8022eca:	747b      	strb	r3, [r7, #17]
 8022ecc:	e017      	b.n	8022efe <_ZN6Logger7LoadingEv+0x24e>
        }else{
            log_corner_address = now_address;
 8022ece:	4b33      	ldr	r3, [pc, #204]	; (8022f9c <_ZN6Logger7LoadingEv+0x2ec>)
 8022ed0:	881a      	ldrh	r2, [r3, #0]
 8022ed2:	4b3b      	ldr	r3, [pc, #236]	; (8022fc0 <_ZN6Logger7LoadingEv+0x310>)
 8022ed4:	801a      	strh	r2, [r3, #0]
            log_corner_pass = true;
 8022ed6:	2301      	movs	r3, #1
 8022ed8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            log_corner_wait = CORRECTION_WAIT_COUNT;
 8022edc:	4b39      	ldr	r3, [pc, #228]	; (8022fc4 <_ZN6Logger7LoadingEv+0x314>)
 8022ede:	2203      	movs	r2, #3
 8022ee0:	701a      	strb	r2, [r3, #0]
 8022ee2:	e00c      	b.n	8022efe <_ZN6Logger7LoadingEv+0x24e>
        }
    }else{
        if(run_corner_wait > 0) run_corner_wait--;
 8022ee4:	4b35      	ldr	r3, [pc, #212]	; (8022fbc <_ZN6Logger7LoadingEv+0x30c>)
 8022ee6:	781b      	ldrb	r3, [r3, #0]
 8022ee8:	2b00      	cmp	r3, #0
 8022eea:	d006      	beq.n	8022efa <_ZN6Logger7LoadingEv+0x24a>
 8022eec:	4b33      	ldr	r3, [pc, #204]	; (8022fbc <_ZN6Logger7LoadingEv+0x30c>)
 8022eee:	781b      	ldrb	r3, [r3, #0]
 8022ef0:	3b01      	subs	r3, #1
 8022ef2:	b2da      	uxtb	r2, r3
 8022ef4:	4b31      	ldr	r3, [pc, #196]	; (8022fbc <_ZN6Logger7LoadingEv+0x30c>)
 8022ef6:	701a      	strb	r2, [r3, #0]
 8022ef8:	e001      	b.n	8022efe <_ZN6Logger7LoadingEv+0x24e>
        else run_corner_pass = false;
 8022efa:	2300      	movs	r3, #0
 8022efc:	747b      	strb	r3, [r7, #17]
    }
    if(run_corner == true){
 8022efe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8022f02:	2b00      	cmp	r3, #0
 8022f04:	d018      	beq.n	8022f38 <_ZN6Logger7LoadingEv+0x288>
        if(log_corner_pass == true){
 8022f06:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8022f0a:	2b00      	cmp	r3, #0
 8022f0c:	d00a      	beq.n	8022f24 <_ZN6Logger7LoadingEv+0x274>
            now_address = log_corner_address;
 8022f0e:	4b2c      	ldr	r3, [pc, #176]	; (8022fc0 <_ZN6Logger7LoadingEv+0x310>)
 8022f10:	881a      	ldrh	r2, [r3, #0]
 8022f12:	4b22      	ldr	r3, [pc, #136]	; (8022f9c <_ZN6Logger7LoadingEv+0x2ec>)
 8022f14:	801a      	strh	r2, [r3, #0]
            log_corner_wait = 0;
 8022f16:	4b2b      	ldr	r3, [pc, #172]	; (8022fc4 <_ZN6Logger7LoadingEv+0x314>)
 8022f18:	2200      	movs	r2, #0
 8022f1a:	701a      	strb	r2, [r3, #0]
            log_corner_pass = false;
 8022f1c:	2300      	movs	r3, #0
 8022f1e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8022f22:	e017      	b.n	8022f54 <_ZN6Logger7LoadingEv+0x2a4>
        }else{
            run_corner_address = now_address;
 8022f24:	4b1d      	ldr	r3, [pc, #116]	; (8022f9c <_ZN6Logger7LoadingEv+0x2ec>)
 8022f26:	881a      	ldrh	r2, [r3, #0]
 8022f28:	4b23      	ldr	r3, [pc, #140]	; (8022fb8 <_ZN6Logger7LoadingEv+0x308>)
 8022f2a:	801a      	strh	r2, [r3, #0]
            run_corner_pass = true;
 8022f2c:	2301      	movs	r3, #1
 8022f2e:	747b      	strb	r3, [r7, #17]
            run_corner_wait = CORRECTION_WAIT_COUNT;
 8022f30:	4b22      	ldr	r3, [pc, #136]	; (8022fbc <_ZN6Logger7LoadingEv+0x30c>)
 8022f32:	2203      	movs	r2, #3
 8022f34:	701a      	strb	r2, [r3, #0]
 8022f36:	e00d      	b.n	8022f54 <_ZN6Logger7LoadingEv+0x2a4>
        }
    }else{
        if(log_corner_wait > 0) log_corner_wait--;
 8022f38:	4b22      	ldr	r3, [pc, #136]	; (8022fc4 <_ZN6Logger7LoadingEv+0x314>)
 8022f3a:	781b      	ldrb	r3, [r3, #0]
 8022f3c:	2b00      	cmp	r3, #0
 8022f3e:	d006      	beq.n	8022f4e <_ZN6Logger7LoadingEv+0x29e>
 8022f40:	4b20      	ldr	r3, [pc, #128]	; (8022fc4 <_ZN6Logger7LoadingEv+0x314>)
 8022f42:	781b      	ldrb	r3, [r3, #0]
 8022f44:	3b01      	subs	r3, #1
 8022f46:	b2da      	uxtb	r2, r3
 8022f48:	4b1e      	ldr	r3, [pc, #120]	; (8022fc4 <_ZN6Logger7LoadingEv+0x314>)
 8022f4a:	701a      	strb	r2, [r3, #0]
 8022f4c:	e002      	b.n	8022f54 <_ZN6Logger7LoadingEv+0x2a4>
        else log_corner_pass = false;
 8022f4e:	2300      	movs	r3, #0
 8022f50:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    }

    /* Position correction at cross line */
    static uint16_t log_cross_address, run_cross_address;
    static uint8_t log_cross_wait = 0, run_cross_wait = 0;
    if(log_cross == true){
 8022f54:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8022f58:	2b00      	cmp	r3, #0
 8022f5a:	d03d      	beq.n	8022fd8 <_ZN6Logger7LoadingEv+0x328>
        if(run_cross_pass == true){
 8022f5c:	7c3b      	ldrb	r3, [r7, #16]
 8022f5e:	2b00      	cmp	r3, #0
 8022f60:	d011      	beq.n	8022f86 <_ZN6Logger7LoadingEv+0x2d6>
            now_address += now_address - run_cross_address;
 8022f62:	4b0e      	ldr	r3, [pc, #56]	; (8022f9c <_ZN6Logger7LoadingEv+0x2ec>)
 8022f64:	881a      	ldrh	r2, [r3, #0]
 8022f66:	4b18      	ldr	r3, [pc, #96]	; (8022fc8 <_ZN6Logger7LoadingEv+0x318>)
 8022f68:	881b      	ldrh	r3, [r3, #0]
 8022f6a:	1ad3      	subs	r3, r2, r3
 8022f6c:	b29a      	uxth	r2, r3
 8022f6e:	4b0b      	ldr	r3, [pc, #44]	; (8022f9c <_ZN6Logger7LoadingEv+0x2ec>)
 8022f70:	881b      	ldrh	r3, [r3, #0]
 8022f72:	4413      	add	r3, r2
 8022f74:	b29a      	uxth	r2, r3
 8022f76:	4b09      	ldr	r3, [pc, #36]	; (8022f9c <_ZN6Logger7LoadingEv+0x2ec>)
 8022f78:	801a      	strh	r2, [r3, #0]
            run_cross_wait = 0;
 8022f7a:	4b14      	ldr	r3, [pc, #80]	; (8022fcc <_ZN6Logger7LoadingEv+0x31c>)
 8022f7c:	2200      	movs	r2, #0
 8022f7e:	701a      	strb	r2, [r3, #0]
            run_cross_pass = false;
 8022f80:	2300      	movs	r3, #0
 8022f82:	743b      	strb	r3, [r7, #16]
 8022f84:	e035      	b.n	8022ff2 <_ZN6Logger7LoadingEv+0x342>
        }else{
            log_cross_address = now_address;
 8022f86:	4b05      	ldr	r3, [pc, #20]	; (8022f9c <_ZN6Logger7LoadingEv+0x2ec>)
 8022f88:	881a      	ldrh	r2, [r3, #0]
 8022f8a:	4b11      	ldr	r3, [pc, #68]	; (8022fd0 <_ZN6Logger7LoadingEv+0x320>)
 8022f8c:	801a      	strh	r2, [r3, #0]
            log_cross_pass = true;
 8022f8e:	2301      	movs	r3, #1
 8022f90:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
            log_cross_wait = CORRECTION_WAIT_COUNT;
 8022f94:	4b0f      	ldr	r3, [pc, #60]	; (8022fd4 <_ZN6Logger7LoadingEv+0x324>)
 8022f96:	2203      	movs	r2, #3
 8022f98:	701a      	strb	r2, [r3, #0]
 8022f9a:	e02a      	b.n	8022ff2 <_ZN6Logger7LoadingEv+0x342>
 8022f9c:	20000098 	.word	0x20000098
 8022fa0:	2000009c 	.word	0x2000009c
 8022fa4:	2000009a 	.word	0x2000009a
 8022fa8:	200000a4 	.word	0x200000a4
 8022fac:	200000a0 	.word	0x200000a0
 8022fb0:	43ca0000 	.word	0x43ca0000
 8022fb4:	200000a8 	.word	0x200000a8
 8022fb8:	200000ac 	.word	0x200000ac
 8022fbc:	200000af 	.word	0x200000af
 8022fc0:	200000aa 	.word	0x200000aa
 8022fc4:	200000ae 	.word	0x200000ae
 8022fc8:	200000b2 	.word	0x200000b2
 8022fcc:	200000b5 	.word	0x200000b5
 8022fd0:	200000b0 	.word	0x200000b0
 8022fd4:	200000b4 	.word	0x200000b4
        }
    }else{
        if(run_cross_wait > 0) run_cross_wait--;
 8022fd8:	4b8e      	ldr	r3, [pc, #568]	; (8023214 <_ZN6Logger7LoadingEv+0x564>)
 8022fda:	781b      	ldrb	r3, [r3, #0]
 8022fdc:	2b00      	cmp	r3, #0
 8022fde:	d006      	beq.n	8022fee <_ZN6Logger7LoadingEv+0x33e>
 8022fe0:	4b8c      	ldr	r3, [pc, #560]	; (8023214 <_ZN6Logger7LoadingEv+0x564>)
 8022fe2:	781b      	ldrb	r3, [r3, #0]
 8022fe4:	3b01      	subs	r3, #1
 8022fe6:	b2da      	uxtb	r2, r3
 8022fe8:	4b8a      	ldr	r3, [pc, #552]	; (8023214 <_ZN6Logger7LoadingEv+0x564>)
 8022fea:	701a      	strb	r2, [r3, #0]
 8022fec:	e001      	b.n	8022ff2 <_ZN6Logger7LoadingEv+0x342>
        else run_cross_pass = false;
 8022fee:	2300      	movs	r3, #0
 8022ff0:	743b      	strb	r3, [r7, #16]
    }
    if(run_cross == true){
 8022ff2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8022ff6:	2b00      	cmp	r3, #0
 8022ff8:	d018      	beq.n	802302c <_ZN6Logger7LoadingEv+0x37c>
        if(log_cross_pass == true){
 8022ffa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8022ffe:	2b00      	cmp	r3, #0
 8023000:	d00a      	beq.n	8023018 <_ZN6Logger7LoadingEv+0x368>
            now_address = log_cross_address;
 8023002:	4b85      	ldr	r3, [pc, #532]	; (8023218 <_ZN6Logger7LoadingEv+0x568>)
 8023004:	881a      	ldrh	r2, [r3, #0]
 8023006:	4b85      	ldr	r3, [pc, #532]	; (802321c <_ZN6Logger7LoadingEv+0x56c>)
 8023008:	801a      	strh	r2, [r3, #0]
            log_cross_wait = 0;
 802300a:	4b85      	ldr	r3, [pc, #532]	; (8023220 <_ZN6Logger7LoadingEv+0x570>)
 802300c:	2200      	movs	r2, #0
 802300e:	701a      	strb	r2, [r3, #0]
            log_cross_pass = false;
 8023010:	2300      	movs	r3, #0
 8023012:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8023016:	e017      	b.n	8023048 <_ZN6Logger7LoadingEv+0x398>
        }else{
            run_cross_address = now_address;
 8023018:	4b80      	ldr	r3, [pc, #512]	; (802321c <_ZN6Logger7LoadingEv+0x56c>)
 802301a:	881a      	ldrh	r2, [r3, #0]
 802301c:	4b81      	ldr	r3, [pc, #516]	; (8023224 <_ZN6Logger7LoadingEv+0x574>)
 802301e:	801a      	strh	r2, [r3, #0]
            run_cross_pass = true;
 8023020:	2301      	movs	r3, #1
 8023022:	743b      	strb	r3, [r7, #16]
            run_cross_wait = CORRECTION_WAIT_COUNT;
 8023024:	4b7b      	ldr	r3, [pc, #492]	; (8023214 <_ZN6Logger7LoadingEv+0x564>)
 8023026:	2203      	movs	r2, #3
 8023028:	701a      	strb	r2, [r3, #0]
 802302a:	e00d      	b.n	8023048 <_ZN6Logger7LoadingEv+0x398>
        }
    }else{
        if(log_cross_wait > 0) log_cross_wait--;
 802302c:	4b7c      	ldr	r3, [pc, #496]	; (8023220 <_ZN6Logger7LoadingEv+0x570>)
 802302e:	781b      	ldrb	r3, [r3, #0]
 8023030:	2b00      	cmp	r3, #0
 8023032:	d006      	beq.n	8023042 <_ZN6Logger7LoadingEv+0x392>
 8023034:	4b7a      	ldr	r3, [pc, #488]	; (8023220 <_ZN6Logger7LoadingEv+0x570>)
 8023036:	781b      	ldrb	r3, [r3, #0]
 8023038:	3b01      	subs	r3, #1
 802303a:	b2da      	uxtb	r2, r3
 802303c:	4b78      	ldr	r3, [pc, #480]	; (8023220 <_ZN6Logger7LoadingEv+0x570>)
 802303e:	701a      	strb	r2, [r3, #0]
 8023040:	e002      	b.n	8023048 <_ZN6Logger7LoadingEv+0x398>
        else log_cross_pass = false;
 8023042:	2300      	movs	r3, #0
 8023044:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    /* Accel straight */
    uint8_t accel_step = *(reinterpret_cast<uint8_t*>(now_address + HEAD_ADDRESS_BLOCK_D));
 8023048:	4b74      	ldr	r3, [pc, #464]	; (802321c <_ZN6Logger7LoadingEv+0x56c>)
 802304a:	881b      	ldrh	r3, [r3, #0]
 802304c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8023050:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8023054:	781b      	ldrb	r3, [r3, #0]
 8023056:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    if(!straight) accel_step = 0x10;
 802305a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 802305e:	f083 0301 	eor.w	r3, r3, #1
 8023062:	b2db      	uxtb	r3, r3
 8023064:	2b00      	cmp	r3, #0
 8023066:	d002      	beq.n	802306e <_ZN6Logger7LoadingEv+0x3be>
 8023068:	2310      	movs	r3, #16
 802306a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    float target = MIN_VELOCITY;
 802306e:	4b6e      	ldr	r3, [pc, #440]	; (8023228 <_ZN6Logger7LoadingEv+0x578>)
 8023070:	627b      	str	r3, [r7, #36]	; 0x24
    static float pre_target = MIN_VELOCITY;
    switch(accel_step){
 8023072:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8023076:	3b01      	subs	r3, #1
 8023078:	2b4f      	cmp	r3, #79	; 0x4f
 802307a:	f200 80b5 	bhi.w	80231e8 <_ZN6Logger7LoadingEv+0x538>
 802307e:	a201      	add	r2, pc, #4	; (adr r2, 8023084 <_ZN6Logger7LoadingEv+0x3d4>)
 8023080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023084:	080231cb 	.word	0x080231cb
 8023088:	080231d1 	.word	0x080231d1
 802308c:	080231d7 	.word	0x080231d7
 8023090:	080231dd 	.word	0x080231dd
 8023094:	080231e3 	.word	0x080231e3
 8023098:	080231e9 	.word	0x080231e9
 802309c:	080231e9 	.word	0x080231e9
 80230a0:	080231e9 	.word	0x080231e9
 80230a4:	080231e9 	.word	0x080231e9
 80230a8:	080231e9 	.word	0x080231e9
 80230ac:	080231e9 	.word	0x080231e9
 80230b0:	080231e9 	.word	0x080231e9
 80230b4:	080231e9 	.word	0x080231e9
 80230b8:	080231e9 	.word	0x080231e9
 80230bc:	080231e9 	.word	0x080231e9
 80230c0:	080231c5 	.word	0x080231c5
 80230c4:	080231e9 	.word	0x080231e9
 80230c8:	080231e9 	.word	0x080231e9
 80230cc:	080231e9 	.word	0x080231e9
 80230d0:	080231e9 	.word	0x080231e9
 80230d4:	080231e9 	.word	0x080231e9
 80230d8:	080231e9 	.word	0x080231e9
 80230dc:	080231e9 	.word	0x080231e9
 80230e0:	080231e9 	.word	0x080231e9
 80230e4:	080231e9 	.word	0x080231e9
 80230e8:	080231e9 	.word	0x080231e9
 80230ec:	080231e9 	.word	0x080231e9
 80230f0:	080231e9 	.word	0x080231e9
 80230f4:	080231e9 	.word	0x080231e9
 80230f8:	080231e9 	.word	0x080231e9
 80230fc:	080231e9 	.word	0x080231e9
 8023100:	080231cb 	.word	0x080231cb
 8023104:	080231e9 	.word	0x080231e9
 8023108:	080231e9 	.word	0x080231e9
 802310c:	080231e9 	.word	0x080231e9
 8023110:	080231e9 	.word	0x080231e9
 8023114:	080231e9 	.word	0x080231e9
 8023118:	080231e9 	.word	0x080231e9
 802311c:	080231e9 	.word	0x080231e9
 8023120:	080231e9 	.word	0x080231e9
 8023124:	080231e9 	.word	0x080231e9
 8023128:	080231e9 	.word	0x080231e9
 802312c:	080231e9 	.word	0x080231e9
 8023130:	080231e9 	.word	0x080231e9
 8023134:	080231e9 	.word	0x080231e9
 8023138:	080231e9 	.word	0x080231e9
 802313c:	080231e9 	.word	0x080231e9
 8023140:	080231d1 	.word	0x080231d1
 8023144:	080231e9 	.word	0x080231e9
 8023148:	080231e9 	.word	0x080231e9
 802314c:	080231e9 	.word	0x080231e9
 8023150:	080231e9 	.word	0x080231e9
 8023154:	080231e9 	.word	0x080231e9
 8023158:	080231e9 	.word	0x080231e9
 802315c:	080231e9 	.word	0x080231e9
 8023160:	080231e9 	.word	0x080231e9
 8023164:	080231e9 	.word	0x080231e9
 8023168:	080231e9 	.word	0x080231e9
 802316c:	080231e9 	.word	0x080231e9
 8023170:	080231e9 	.word	0x080231e9
 8023174:	080231e9 	.word	0x080231e9
 8023178:	080231e9 	.word	0x080231e9
 802317c:	080231e9 	.word	0x080231e9
 8023180:	080231d7 	.word	0x080231d7
 8023184:	080231e9 	.word	0x080231e9
 8023188:	080231e9 	.word	0x080231e9
 802318c:	080231e9 	.word	0x080231e9
 8023190:	080231e9 	.word	0x080231e9
 8023194:	080231e9 	.word	0x080231e9
 8023198:	080231e9 	.word	0x080231e9
 802319c:	080231e9 	.word	0x080231e9
 80231a0:	080231e9 	.word	0x080231e9
 80231a4:	080231e9 	.word	0x080231e9
 80231a8:	080231e9 	.word	0x080231e9
 80231ac:	080231e9 	.word	0x080231e9
 80231b0:	080231e9 	.word	0x080231e9
 80231b4:	080231e9 	.word	0x080231e9
 80231b8:	080231e9 	.word	0x080231e9
 80231bc:	080231e9 	.word	0x080231e9
 80231c0:	080231dd 	.word	0x080231dd
        case 0x10: target = MIN_VELOCITY; break;
 80231c4:	4b18      	ldr	r3, [pc, #96]	; (8023228 <_ZN6Logger7LoadingEv+0x578>)
 80231c6:	627b      	str	r3, [r7, #36]	; 0x24
 80231c8:	e012      	b.n	80231f0 <_ZN6Logger7LoadingEv+0x540>
        case 0x01:
        case 0x20: target = MIN_VELOCITY + (ACCEL_VELOCITY * 1); break;
 80231ca:	4b18      	ldr	r3, [pc, #96]	; (802322c <_ZN6Logger7LoadingEv+0x57c>)
 80231cc:	627b      	str	r3, [r7, #36]	; 0x24
 80231ce:	e00f      	b.n	80231f0 <_ZN6Logger7LoadingEv+0x540>
        case 0x02:
        case 0x30: target = MIN_VELOCITY + (ACCEL_VELOCITY * 2); break;
 80231d0:	4b17      	ldr	r3, [pc, #92]	; (8023230 <_ZN6Logger7LoadingEv+0x580>)
 80231d2:	627b      	str	r3, [r7, #36]	; 0x24
 80231d4:	e00c      	b.n	80231f0 <_ZN6Logger7LoadingEv+0x540>
        case 0x03:
        case 0x40: target = MIN_VELOCITY + (ACCEL_VELOCITY * 3); break;
 80231d6:	4b17      	ldr	r3, [pc, #92]	; (8023234 <_ZN6Logger7LoadingEv+0x584>)
 80231d8:	627b      	str	r3, [r7, #36]	; 0x24
 80231da:	e009      	b.n	80231f0 <_ZN6Logger7LoadingEv+0x540>
        case 0x04:
        case 0x50: target = MIN_VELOCITY + (ACCEL_VELOCITY * 4); break;
 80231dc:	4b16      	ldr	r3, [pc, #88]	; (8023238 <_ZN6Logger7LoadingEv+0x588>)
 80231de:	627b      	str	r3, [r7, #36]	; 0x24
 80231e0:	e006      	b.n	80231f0 <_ZN6Logger7LoadingEv+0x540>
        case 0x05: target = MIN_VELOCITY + (ACCEL_VELOCITY * 5); break;
 80231e2:	4b16      	ldr	r3, [pc, #88]	; (802323c <_ZN6Logger7LoadingEv+0x58c>)
 80231e4:	627b      	str	r3, [r7, #36]	; 0x24
 80231e6:	e003      	b.n	80231f0 <_ZN6Logger7LoadingEv+0x540>
        default: target = pre_target; break;
 80231e8:	4b15      	ldr	r3, [pc, #84]	; (8023240 <_ZN6Logger7LoadingEv+0x590>)
 80231ea:	681b      	ldr	r3, [r3, #0]
 80231ec:	627b      	str	r3, [r7, #36]	; 0x24
 80231ee:	bf00      	nop
    }
    pre_target = target;
 80231f0:	4a13      	ldr	r2, [pc, #76]	; (8023240 <_ZN6Logger7LoadingEv+0x590>)
 80231f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80231f4:	6013      	str	r3, [r2, #0]
    target_velocity_ = target;
 80231f6:	687b      	ldr	r3, [r7, #4]
 80231f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80231fa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

    now_address++;
 80231fe:	4b07      	ldr	r3, [pc, #28]	; (802321c <_ZN6Logger7LoadingEv+0x56c>)
 8023200:	881b      	ldrh	r3, [r3, #0]
 8023202:	3301      	adds	r3, #1
 8023204:	b29a      	uxth	r2, r3
 8023206:	4b05      	ldr	r3, [pc, #20]	; (802321c <_ZN6Logger7LoadingEv+0x56c>)
 8023208:	801a      	strh	r2, [r3, #0]
 802320a:	e000      	b.n	802320e <_ZN6Logger7LoadingEv+0x55e>
    if(distance < LOGGING_CONST_DISTANCE) return;
 802320c:	bf00      	nop
}
 802320e:	3730      	adds	r7, #48	; 0x30
 8023210:	46bd      	mov	sp, r7
 8023212:	bd80      	pop	{r7, pc}
 8023214:	200000b5 	.word	0x200000b5
 8023218:	200000b0 	.word	0x200000b0
 802321c:	20000098 	.word	0x20000098
 8023220:	200000b4 	.word	0x200000b4
 8023224:	200000b2 	.word	0x200000b2
 8023228:	3fa66666 	.word	0x3fa66666
 802322c:	3fe66666 	.word	0x3fe66666
 8023230:	40133333 	.word	0x40133333
 8023234:	40333333 	.word	0x40333333
 8023238:	40533333 	.word	0x40533333
 802323c:	40733333 	.word	0x40733333
 8023240:	2000000c 	.word	0x2000000c

08023244 <_ZN6Logger17GetTargetVelocityEv>:

float Logger::GetTargetVelocity()
{
 8023244:	b480      	push	{r7}
 8023246:	b083      	sub	sp, #12
 8023248:	af00      	add	r7, sp, #0
 802324a:	6078      	str	r0, [r7, #4]
    return target_velocity_;
 802324c:	687b      	ldr	r3, [r7, #4]
 802324e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8023252:	ee07 3a90 	vmov	s15, r3
 8023256:	eeb0 0a67 	vmov.f32	s0, s15
 802325a:	370c      	adds	r7, #12
 802325c:	46bd      	mov	sp, r7
 802325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023262:	4770      	bx	lr

08023264 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8023264:	b580      	push	{r7, lr}
 8023266:	b082      	sub	sp, #8
 8023268:	af00      	add	r7, sp, #0
 802326a:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 802326c:	687b      	ldr	r3, [r7, #4]
 802326e:	681b      	ldr	r3, [r3, #0]
 8023270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8023274:	d101      	bne.n	802327a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    InterruptTim2();
 8023276:	f002 fff1 	bl	802625c <InterruptTim2>
  }
  if(htim->Instance == TIM6)
 802327a:	687b      	ldr	r3, [r7, #4]
 802327c:	681b      	ldr	r3, [r3, #0]
 802327e:	4a08      	ldr	r2, [pc, #32]	; (80232a0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8023280:	4293      	cmp	r3, r2
 8023282:	d101      	bne.n	8023288 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
    InterruptTim6();
 8023284:	f002 ffda 	bl	802623c <InterruptTim6>
  }
  if(htim->Instance == TIM7)
 8023288:	687b      	ldr	r3, [r7, #4]
 802328a:	681b      	ldr	r3, [r3, #0]
 802328c:	4a05      	ldr	r2, [pc, #20]	; (80232a4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 802328e:	4293      	cmp	r3, r2
 8023290:	d101      	bne.n	8023296 <HAL_TIM_PeriodElapsedCallback+0x32>
  {
    InterruptTim7();
 8023292:	f002 ffc3 	bl	802621c <InterruptTim7>
  }
}
 8023296:	bf00      	nop
 8023298:	3708      	adds	r7, #8
 802329a:	46bd      	mov	sp, r7
 802329c:	bd80      	pop	{r7, pc}
 802329e:	bf00      	nop
 80232a0:	40001000 	.word	0x40001000
 80232a4:	40001400 	.word	0x40001400

080232a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80232a8:	b580      	push	{r7, lr}
 80232aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80232ac:	f003 f872 	bl	8026394 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80232b0:	f000 f822 	bl	80232f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80232b4:	f000 fd68 	bl	8023d88 <MX_GPIO_Init>
  MX_DMA_Init();
 80232b8:	f000 fd46 	bl	8023d48 <MX_DMA_Init>
  MX_ADC1_Init();
 80232bc:	f000 f886 	bl	80233cc <MX_ADC1_Init>
  MX_I2C2_Init();
 80232c0:	f000 f98c 	bl	80235dc <MX_I2C2_Init>
  MX_SPI3_Init();
 80232c4:	f000 f9b8 	bl	8023638 <MX_SPI3_Init>
  MX_TIM1_Init();
 80232c8:	f000 f9ec 	bl	80236a4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80232cc:	f000 fac8 	bl	8023860 <MX_TIM3_Init>
  MX_TIM4_Init();
 80232d0:	f000 fb40 	bl	8023954 <MX_TIM4_Init>
  MX_TIM6_Init();
 80232d4:	f000 fbe0 	bl	8023a98 <MX_TIM6_Init>
  MX_TIM7_Init();
 80232d8:	f000 fc14 	bl	8023b04 <MX_TIM7_Init>
  MX_TIM8_Init();
 80232dc:	f000 fc48 	bl	8023b70 <MX_TIM8_Init>
  MX_TIM11_Init();
 80232e0:	f000 fc9e 	bl	8023c20 <MX_TIM11_Init>
  MX_TIM12_Init();
 80232e4:	f000 fcea 	bl	8023cbc <MX_TIM12_Init>
  MX_TIM2_Init();
 80232e8:	f000 fa6c 	bl	80237c4 <MX_TIM2_Init>
  MX_TIM5_Init();
 80232ec:	f000 fb86 	bl	80239fc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  Init();
 80232f0:	f002 ff8a 	bl	8026208 <Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80232f4:	e7fe      	b.n	80232f4 <main+0x4c>
	...

080232f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80232f8:	b580      	push	{r7, lr}
 80232fa:	b094      	sub	sp, #80	; 0x50
 80232fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80232fe:	f107 0320 	add.w	r3, r7, #32
 8023302:	2230      	movs	r2, #48	; 0x30
 8023304:	2100      	movs	r1, #0
 8023306:	4618      	mov	r0, r3
 8023308:	f007 f903 	bl	802a512 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 802330c:	f107 030c 	add.w	r3, r7, #12
 8023310:	2200      	movs	r2, #0
 8023312:	601a      	str	r2, [r3, #0]
 8023314:	605a      	str	r2, [r3, #4]
 8023316:	609a      	str	r2, [r3, #8]
 8023318:	60da      	str	r2, [r3, #12]
 802331a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 802331c:	2300      	movs	r3, #0
 802331e:	60bb      	str	r3, [r7, #8]
 8023320:	4b28      	ldr	r3, [pc, #160]	; (80233c4 <SystemClock_Config+0xcc>)
 8023322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023324:	4a27      	ldr	r2, [pc, #156]	; (80233c4 <SystemClock_Config+0xcc>)
 8023326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802332a:	6413      	str	r3, [r2, #64]	; 0x40
 802332c:	4b25      	ldr	r3, [pc, #148]	; (80233c4 <SystemClock_Config+0xcc>)
 802332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8023334:	60bb      	str	r3, [r7, #8]
 8023336:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8023338:	2300      	movs	r3, #0
 802333a:	607b      	str	r3, [r7, #4]
 802333c:	4b22      	ldr	r3, [pc, #136]	; (80233c8 <SystemClock_Config+0xd0>)
 802333e:	681b      	ldr	r3, [r3, #0]
 8023340:	4a21      	ldr	r2, [pc, #132]	; (80233c8 <SystemClock_Config+0xd0>)
 8023342:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8023346:	6013      	str	r3, [r2, #0]
 8023348:	4b1f      	ldr	r3, [pc, #124]	; (80233c8 <SystemClock_Config+0xd0>)
 802334a:	681b      	ldr	r3, [r3, #0]
 802334c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8023350:	607b      	str	r3, [r7, #4]
 8023352:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8023354:	2301      	movs	r3, #1
 8023356:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8023358:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 802335c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 802335e:	2302      	movs	r3, #2
 8023360:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8023362:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8023366:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8023368:	2306      	movs	r3, #6
 802336a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 802336c:	23a8      	movs	r3, #168	; 0xa8
 802336e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8023370:	2302      	movs	r3, #2
 8023372:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8023374:	2304      	movs	r3, #4
 8023376:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8023378:	f107 0320 	add.w	r3, r7, #32
 802337c:	4618      	mov	r0, r3
 802337e:	f004 feeb 	bl	8028158 <HAL_RCC_OscConfig>
 8023382:	4603      	mov	r3, r0
 8023384:	2b00      	cmp	r3, #0
 8023386:	d001      	beq.n	802338c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8023388:	f000 fdce 	bl	8023f28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 802338c:	230f      	movs	r3, #15
 802338e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8023390:	2302      	movs	r3, #2
 8023392:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8023394:	2300      	movs	r3, #0
 8023396:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8023398:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 802339c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 802339e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80233a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80233a4:	f107 030c 	add.w	r3, r7, #12
 80233a8:	2105      	movs	r1, #5
 80233aa:	4618      	mov	r0, r3
 80233ac:	f005 f944 	bl	8028638 <HAL_RCC_ClockConfig>
 80233b0:	4603      	mov	r3, r0
 80233b2:	2b00      	cmp	r3, #0
 80233b4:	d001      	beq.n	80233ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80233b6:	f000 fdb7 	bl	8023f28 <Error_Handler>
  }
}
 80233ba:	bf00      	nop
 80233bc:	3750      	adds	r7, #80	; 0x50
 80233be:	46bd      	mov	sp, r7
 80233c0:	bd80      	pop	{r7, pc}
 80233c2:	bf00      	nop
 80233c4:	40023800 	.word	0x40023800
 80233c8:	40007000 	.word	0x40007000

080233cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80233cc:	b580      	push	{r7, lr}
 80233ce:	b084      	sub	sp, #16
 80233d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80233d2:	463b      	mov	r3, r7
 80233d4:	2200      	movs	r2, #0
 80233d6:	601a      	str	r2, [r3, #0]
 80233d8:	605a      	str	r2, [r3, #4]
 80233da:	609a      	str	r2, [r3, #8]
 80233dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80233de:	4b7c      	ldr	r3, [pc, #496]	; (80235d0 <MX_ADC1_Init+0x204>)
 80233e0:	4a7c      	ldr	r2, [pc, #496]	; (80235d4 <MX_ADC1_Init+0x208>)
 80233e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80233e4:	4b7a      	ldr	r3, [pc, #488]	; (80235d0 <MX_ADC1_Init+0x204>)
 80233e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80233ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80233ec:	4b78      	ldr	r3, [pc, #480]	; (80235d0 <MX_ADC1_Init+0x204>)
 80233ee:	2200      	movs	r2, #0
 80233f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80233f2:	4b77      	ldr	r3, [pc, #476]	; (80235d0 <MX_ADC1_Init+0x204>)
 80233f4:	2201      	movs	r2, #1
 80233f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80233f8:	4b75      	ldr	r3, [pc, #468]	; (80235d0 <MX_ADC1_Init+0x204>)
 80233fa:	2201      	movs	r2, #1
 80233fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80233fe:	4b74      	ldr	r3, [pc, #464]	; (80235d0 <MX_ADC1_Init+0x204>)
 8023400:	2200      	movs	r2, #0
 8023402:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8023406:	4b72      	ldr	r3, [pc, #456]	; (80235d0 <MX_ADC1_Init+0x204>)
 8023408:	2200      	movs	r2, #0
 802340a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 802340c:	4b70      	ldr	r3, [pc, #448]	; (80235d0 <MX_ADC1_Init+0x204>)
 802340e:	4a72      	ldr	r2, [pc, #456]	; (80235d8 <MX_ADC1_Init+0x20c>)
 8023410:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8023412:	4b6f      	ldr	r3, [pc, #444]	; (80235d0 <MX_ADC1_Init+0x204>)
 8023414:	2200      	movs	r2, #0
 8023416:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8023418:	4b6d      	ldr	r3, [pc, #436]	; (80235d0 <MX_ADC1_Init+0x204>)
 802341a:	220e      	movs	r2, #14
 802341c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 802341e:	4b6c      	ldr	r3, [pc, #432]	; (80235d0 <MX_ADC1_Init+0x204>)
 8023420:	2201      	movs	r2, #1
 8023422:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8023426:	4b6a      	ldr	r3, [pc, #424]	; (80235d0 <MX_ADC1_Init+0x204>)
 8023428:	2201      	movs	r2, #1
 802342a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 802342c:	4868      	ldr	r0, [pc, #416]	; (80235d0 <MX_ADC1_Init+0x204>)
 802342e:	f003 f845 	bl	80264bc <HAL_ADC_Init>
 8023432:	4603      	mov	r3, r0
 8023434:	2b00      	cmp	r3, #0
 8023436:	d001      	beq.n	802343c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8023438:	f000 fd76 	bl	8023f28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 802343c:	2303      	movs	r3, #3
 802343e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8023440:	2301      	movs	r3, #1
 8023442:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8023444:	2301      	movs	r3, #1
 8023446:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023448:	463b      	mov	r3, r7
 802344a:	4619      	mov	r1, r3
 802344c:	4860      	ldr	r0, [pc, #384]	; (80235d0 <MX_ADC1_Init+0x204>)
 802344e:	f003 f989 	bl	8026764 <HAL_ADC_ConfigChannel>
 8023452:	4603      	mov	r3, r0
 8023454:	2b00      	cmp	r3, #0
 8023456:	d001      	beq.n	802345c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8023458:	f000 fd66 	bl	8023f28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 802345c:	2304      	movs	r3, #4
 802345e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8023460:	2302      	movs	r3, #2
 8023462:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023464:	463b      	mov	r3, r7
 8023466:	4619      	mov	r1, r3
 8023468:	4859      	ldr	r0, [pc, #356]	; (80235d0 <MX_ADC1_Init+0x204>)
 802346a:	f003 f97b 	bl	8026764 <HAL_ADC_ConfigChannel>
 802346e:	4603      	mov	r3, r0
 8023470:	2b00      	cmp	r3, #0
 8023472:	d001      	beq.n	8023478 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8023474:	f000 fd58 	bl	8023f28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8023478:	2305      	movs	r3, #5
 802347a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 802347c:	2303      	movs	r3, #3
 802347e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023480:	463b      	mov	r3, r7
 8023482:	4619      	mov	r1, r3
 8023484:	4852      	ldr	r0, [pc, #328]	; (80235d0 <MX_ADC1_Init+0x204>)
 8023486:	f003 f96d 	bl	8026764 <HAL_ADC_ConfigChannel>
 802348a:	4603      	mov	r3, r0
 802348c:	2b00      	cmp	r3, #0
 802348e:	d001      	beq.n	8023494 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8023490:	f000 fd4a 	bl	8023f28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8023494:	2306      	movs	r3, #6
 8023496:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8023498:	2304      	movs	r3, #4
 802349a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802349c:	463b      	mov	r3, r7
 802349e:	4619      	mov	r1, r3
 80234a0:	484b      	ldr	r0, [pc, #300]	; (80235d0 <MX_ADC1_Init+0x204>)
 80234a2:	f003 f95f 	bl	8026764 <HAL_ADC_ConfigChannel>
 80234a6:	4603      	mov	r3, r0
 80234a8:	2b00      	cmp	r3, #0
 80234aa:	d001      	beq.n	80234b0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80234ac:	f000 fd3c 	bl	8023f28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80234b0:	2307      	movs	r3, #7
 80234b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80234b4:	2305      	movs	r3, #5
 80234b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80234b8:	463b      	mov	r3, r7
 80234ba:	4619      	mov	r1, r3
 80234bc:	4844      	ldr	r0, [pc, #272]	; (80235d0 <MX_ADC1_Init+0x204>)
 80234be:	f003 f951 	bl	8026764 <HAL_ADC_ConfigChannel>
 80234c2:	4603      	mov	r3, r0
 80234c4:	2b00      	cmp	r3, #0
 80234c6:	d001      	beq.n	80234cc <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80234c8:	f000 fd2e 	bl	8023f28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80234cc:	230e      	movs	r3, #14
 80234ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80234d0:	2306      	movs	r3, #6
 80234d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80234d4:	463b      	mov	r3, r7
 80234d6:	4619      	mov	r1, r3
 80234d8:	483d      	ldr	r0, [pc, #244]	; (80235d0 <MX_ADC1_Init+0x204>)
 80234da:	f003 f943 	bl	8026764 <HAL_ADC_ConfigChannel>
 80234de:	4603      	mov	r3, r0
 80234e0:	2b00      	cmp	r3, #0
 80234e2:	d001      	beq.n	80234e8 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80234e4:	f000 fd20 	bl	8023f28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80234e8:	230f      	movs	r3, #15
 80234ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80234ec:	2307      	movs	r3, #7
 80234ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80234f0:	463b      	mov	r3, r7
 80234f2:	4619      	mov	r1, r3
 80234f4:	4836      	ldr	r0, [pc, #216]	; (80235d0 <MX_ADC1_Init+0x204>)
 80234f6:	f003 f935 	bl	8026764 <HAL_ADC_ConfigChannel>
 80234fa:	4603      	mov	r3, r0
 80234fc:	2b00      	cmp	r3, #0
 80234fe:	d001      	beq.n	8023504 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8023500:	f000 fd12 	bl	8023f28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8023504:	230a      	movs	r3, #10
 8023506:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8023508:	2308      	movs	r3, #8
 802350a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802350c:	463b      	mov	r3, r7
 802350e:	4619      	mov	r1, r3
 8023510:	482f      	ldr	r0, [pc, #188]	; (80235d0 <MX_ADC1_Init+0x204>)
 8023512:	f003 f927 	bl	8026764 <HAL_ADC_ConfigChannel>
 8023516:	4603      	mov	r3, r0
 8023518:	2b00      	cmp	r3, #0
 802351a:	d001      	beq.n	8023520 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 802351c:	f000 fd04 	bl	8023f28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8023520:	230b      	movs	r3, #11
 8023522:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8023524:	2309      	movs	r3, #9
 8023526:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023528:	463b      	mov	r3, r7
 802352a:	4619      	mov	r1, r3
 802352c:	4828      	ldr	r0, [pc, #160]	; (80235d0 <MX_ADC1_Init+0x204>)
 802352e:	f003 f919 	bl	8026764 <HAL_ADC_ConfigChannel>
 8023532:	4603      	mov	r3, r0
 8023534:	2b00      	cmp	r3, #0
 8023536:	d001      	beq.n	802353c <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8023538:	f000 fcf6 	bl	8023f28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 802353c:	230c      	movs	r3, #12
 802353e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8023540:	230a      	movs	r3, #10
 8023542:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023544:	463b      	mov	r3, r7
 8023546:	4619      	mov	r1, r3
 8023548:	4821      	ldr	r0, [pc, #132]	; (80235d0 <MX_ADC1_Init+0x204>)
 802354a:	f003 f90b 	bl	8026764 <HAL_ADC_ConfigChannel>
 802354e:	4603      	mov	r3, r0
 8023550:	2b00      	cmp	r3, #0
 8023552:	d001      	beq.n	8023558 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8023554:	f000 fce8 	bl	8023f28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8023558:	230d      	movs	r3, #13
 802355a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 802355c:	230b      	movs	r3, #11
 802355e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023560:	463b      	mov	r3, r7
 8023562:	4619      	mov	r1, r3
 8023564:	481a      	ldr	r0, [pc, #104]	; (80235d0 <MX_ADC1_Init+0x204>)
 8023566:	f003 f8fd 	bl	8026764 <HAL_ADC_ConfigChannel>
 802356a:	4603      	mov	r3, r0
 802356c:	2b00      	cmp	r3, #0
 802356e:	d001      	beq.n	8023574 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8023570:	f000 fcda 	bl	8023f28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8023574:	2302      	movs	r3, #2
 8023576:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8023578:	230c      	movs	r3, #12
 802357a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802357c:	463b      	mov	r3, r7
 802357e:	4619      	mov	r1, r3
 8023580:	4813      	ldr	r0, [pc, #76]	; (80235d0 <MX_ADC1_Init+0x204>)
 8023582:	f003 f8ef 	bl	8026764 <HAL_ADC_ConfigChannel>
 8023586:	4603      	mov	r3, r0
 8023588:	2b00      	cmp	r3, #0
 802358a:	d001      	beq.n	8023590 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 802358c:	f000 fccc 	bl	8023f28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8023590:	2301      	movs	r3, #1
 8023592:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8023594:	230d      	movs	r3, #13
 8023596:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023598:	463b      	mov	r3, r7
 802359a:	4619      	mov	r1, r3
 802359c:	480c      	ldr	r0, [pc, #48]	; (80235d0 <MX_ADC1_Init+0x204>)
 802359e:	f003 f8e1 	bl	8026764 <HAL_ADC_ConfigChannel>
 80235a2:	4603      	mov	r3, r0
 80235a4:	2b00      	cmp	r3, #0
 80235a6:	d001      	beq.n	80235ac <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 80235a8:	f000 fcbe 	bl	8023f28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80235ac:	2300      	movs	r3, #0
 80235ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80235b0:	230e      	movs	r3, #14
 80235b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80235b4:	463b      	mov	r3, r7
 80235b6:	4619      	mov	r1, r3
 80235b8:	4805      	ldr	r0, [pc, #20]	; (80235d0 <MX_ADC1_Init+0x204>)
 80235ba:	f003 f8d3 	bl	8026764 <HAL_ADC_ConfigChannel>
 80235be:	4603      	mov	r3, r0
 80235c0:	2b00      	cmp	r3, #0
 80235c2:	d001      	beq.n	80235c8 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 80235c4:	f000 fcb0 	bl	8023f28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80235c8:	bf00      	nop
 80235ca:	3710      	adds	r7, #16
 80235cc:	46bd      	mov	sp, r7
 80235ce:	bd80      	pop	{r7, pc}
 80235d0:	200007e8 	.word	0x200007e8
 80235d4:	40012000 	.word	0x40012000
 80235d8:	0f000001 	.word	0x0f000001

080235dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80235dc:	b580      	push	{r7, lr}
 80235de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80235e0:	4b12      	ldr	r3, [pc, #72]	; (802362c <MX_I2C2_Init+0x50>)
 80235e2:	4a13      	ldr	r2, [pc, #76]	; (8023630 <MX_I2C2_Init+0x54>)
 80235e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80235e6:	4b11      	ldr	r3, [pc, #68]	; (802362c <MX_I2C2_Init+0x50>)
 80235e8:	4a12      	ldr	r2, [pc, #72]	; (8023634 <MX_I2C2_Init+0x58>)
 80235ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80235ec:	4b0f      	ldr	r3, [pc, #60]	; (802362c <MX_I2C2_Init+0x50>)
 80235ee:	2200      	movs	r2, #0
 80235f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80235f2:	4b0e      	ldr	r3, [pc, #56]	; (802362c <MX_I2C2_Init+0x50>)
 80235f4:	2200      	movs	r2, #0
 80235f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80235f8:	4b0c      	ldr	r3, [pc, #48]	; (802362c <MX_I2C2_Init+0x50>)
 80235fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80235fe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8023600:	4b0a      	ldr	r3, [pc, #40]	; (802362c <MX_I2C2_Init+0x50>)
 8023602:	2200      	movs	r2, #0
 8023604:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8023606:	4b09      	ldr	r3, [pc, #36]	; (802362c <MX_I2C2_Init+0x50>)
 8023608:	2200      	movs	r2, #0
 802360a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 802360c:	4b07      	ldr	r3, [pc, #28]	; (802362c <MX_I2C2_Init+0x50>)
 802360e:	2200      	movs	r2, #0
 8023610:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8023612:	4b06      	ldr	r3, [pc, #24]	; (802362c <MX_I2C2_Init+0x50>)
 8023614:	2200      	movs	r2, #0
 8023616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8023618:	4804      	ldr	r0, [pc, #16]	; (802362c <MX_I2C2_Init+0x50>)
 802361a:	f004 fc65 	bl	8027ee8 <HAL_I2C_Init>
 802361e:	4603      	mov	r3, r0
 8023620:	2b00      	cmp	r3, #0
 8023622:	d001      	beq.n	8023628 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8023624:	f000 fc80 	bl	8023f28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8023628:	bf00      	nop
 802362a:	bd80      	pop	{r7, pc}
 802362c:	200006bc 	.word	0x200006bc
 8023630:	40005800 	.word	0x40005800
 8023634:	000186a0 	.word	0x000186a0

08023638 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8023638:	b580      	push	{r7, lr}
 802363a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 802363c:	4b17      	ldr	r3, [pc, #92]	; (802369c <MX_SPI3_Init+0x64>)
 802363e:	4a18      	ldr	r2, [pc, #96]	; (80236a0 <MX_SPI3_Init+0x68>)
 8023640:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8023642:	4b16      	ldr	r3, [pc, #88]	; (802369c <MX_SPI3_Init+0x64>)
 8023644:	f44f 7282 	mov.w	r2, #260	; 0x104
 8023648:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 802364a:	4b14      	ldr	r3, [pc, #80]	; (802369c <MX_SPI3_Init+0x64>)
 802364c:	2200      	movs	r2, #0
 802364e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8023650:	4b12      	ldr	r3, [pc, #72]	; (802369c <MX_SPI3_Init+0x64>)
 8023652:	2200      	movs	r2, #0
 8023654:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8023656:	4b11      	ldr	r3, [pc, #68]	; (802369c <MX_SPI3_Init+0x64>)
 8023658:	2200      	movs	r2, #0
 802365a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 802365c:	4b0f      	ldr	r3, [pc, #60]	; (802369c <MX_SPI3_Init+0x64>)
 802365e:	2200      	movs	r2, #0
 8023660:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8023662:	4b0e      	ldr	r3, [pc, #56]	; (802369c <MX_SPI3_Init+0x64>)
 8023664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8023668:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 802366a:	4b0c      	ldr	r3, [pc, #48]	; (802369c <MX_SPI3_Init+0x64>)
 802366c:	2238      	movs	r2, #56	; 0x38
 802366e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8023670:	4b0a      	ldr	r3, [pc, #40]	; (802369c <MX_SPI3_Init+0x64>)
 8023672:	2200      	movs	r2, #0
 8023674:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8023676:	4b09      	ldr	r3, [pc, #36]	; (802369c <MX_SPI3_Init+0x64>)
 8023678:	2200      	movs	r2, #0
 802367a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802367c:	4b07      	ldr	r3, [pc, #28]	; (802369c <MX_SPI3_Init+0x64>)
 802367e:	2200      	movs	r2, #0
 8023680:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8023682:	4b06      	ldr	r3, [pc, #24]	; (802369c <MX_SPI3_Init+0x64>)
 8023684:	220a      	movs	r2, #10
 8023686:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8023688:	4804      	ldr	r0, [pc, #16]	; (802369c <MX_SPI3_Init+0x64>)
 802368a:	f005 f98d 	bl	80289a8 <HAL_SPI_Init>
 802368e:	4603      	mov	r3, r0
 8023690:	2b00      	cmp	r3, #0
 8023692:	d001      	beq.n	8023698 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8023694:	f000 fc48 	bl	8023f28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8023698:	bf00      	nop
 802369a:	bd80      	pop	{r7, pc}
 802369c:	20000790 	.word	0x20000790
 80236a0:	40003c00 	.word	0x40003c00

080236a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80236a4:	b580      	push	{r7, lr}
 80236a6:	b092      	sub	sp, #72	; 0x48
 80236a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80236aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80236ae:	2200      	movs	r2, #0
 80236b0:	601a      	str	r2, [r3, #0]
 80236b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80236b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80236b8:	2200      	movs	r2, #0
 80236ba:	601a      	str	r2, [r3, #0]
 80236bc:	605a      	str	r2, [r3, #4]
 80236be:	609a      	str	r2, [r3, #8]
 80236c0:	60da      	str	r2, [r3, #12]
 80236c2:	611a      	str	r2, [r3, #16]
 80236c4:	615a      	str	r2, [r3, #20]
 80236c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80236c8:	1d3b      	adds	r3, r7, #4
 80236ca:	2220      	movs	r2, #32
 80236cc:	2100      	movs	r1, #0
 80236ce:	4618      	mov	r0, r3
 80236d0:	f006 ff1f 	bl	802a512 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80236d4:	4b39      	ldr	r3, [pc, #228]	; (80237bc <MX_TIM1_Init+0x118>)
 80236d6:	4a3a      	ldr	r2, [pc, #232]	; (80237c0 <MX_TIM1_Init+0x11c>)
 80236d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80236da:	4b38      	ldr	r3, [pc, #224]	; (80237bc <MX_TIM1_Init+0x118>)
 80236dc:	2201      	movs	r2, #1
 80236de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80236e0:	4b36      	ldr	r3, [pc, #216]	; (80237bc <MX_TIM1_Init+0x118>)
 80236e2:	2200      	movs	r2, #0
 80236e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1049;
 80236e6:	4b35      	ldr	r3, [pc, #212]	; (80237bc <MX_TIM1_Init+0x118>)
 80236e8:	f240 4219 	movw	r2, #1049	; 0x419
 80236ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80236ee:	4b33      	ldr	r3, [pc, #204]	; (80237bc <MX_TIM1_Init+0x118>)
 80236f0:	2200      	movs	r2, #0
 80236f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80236f4:	4b31      	ldr	r3, [pc, #196]	; (80237bc <MX_TIM1_Init+0x118>)
 80236f6:	2200      	movs	r2, #0
 80236f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80236fa:	4b30      	ldr	r3, [pc, #192]	; (80237bc <MX_TIM1_Init+0x118>)
 80236fc:	2200      	movs	r2, #0
 80236fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8023700:	482e      	ldr	r0, [pc, #184]	; (80237bc <MX_TIM1_Init+0x118>)
 8023702:	f005 fef4 	bl	80294ee <HAL_TIM_PWM_Init>
 8023706:	4603      	mov	r3, r0
 8023708:	2b00      	cmp	r3, #0
 802370a:	d001      	beq.n	8023710 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 802370c:	f000 fc0c 	bl	8023f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023710:	2300      	movs	r3, #0
 8023712:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023714:	2300      	movs	r3, #0
 8023716:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8023718:	f107 0340 	add.w	r3, r7, #64	; 0x40
 802371c:	4619      	mov	r1, r3
 802371e:	4827      	ldr	r0, [pc, #156]	; (80237bc <MX_TIM1_Init+0x118>)
 8023720:	f006 fdd6 	bl	802a2d0 <HAL_TIMEx_MasterConfigSynchronization>
 8023724:	4603      	mov	r3, r0
 8023726:	2b00      	cmp	r3, #0
 8023728:	d001      	beq.n	802372e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 802372a:	f000 fbfd 	bl	8023f28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 802372e:	2360      	movs	r3, #96	; 0x60
 8023730:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8023732:	2300      	movs	r3, #0
 8023734:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8023736:	2300      	movs	r3, #0
 8023738:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 802373a:	2300      	movs	r3, #0
 802373c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 802373e:	2300      	movs	r3, #0
 8023740:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8023742:	2300      	movs	r3, #0
 8023744:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8023746:	2300      	movs	r3, #0
 8023748:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 802374a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802374e:	2204      	movs	r2, #4
 8023750:	4619      	mov	r1, r3
 8023752:	481a      	ldr	r0, [pc, #104]	; (80237bc <MX_TIM1_Init+0x118>)
 8023754:	f006 f906 	bl	8029964 <HAL_TIM_PWM_ConfigChannel>
 8023758:	4603      	mov	r3, r0
 802375a:	2b00      	cmp	r3, #0
 802375c:	d001      	beq.n	8023762 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 802375e:	f000 fbe3 	bl	8023f28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8023762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8023766:	220c      	movs	r2, #12
 8023768:	4619      	mov	r1, r3
 802376a:	4814      	ldr	r0, [pc, #80]	; (80237bc <MX_TIM1_Init+0x118>)
 802376c:	f006 f8fa 	bl	8029964 <HAL_TIM_PWM_ConfigChannel>
 8023770:	4603      	mov	r3, r0
 8023772:	2b00      	cmp	r3, #0
 8023774:	d001      	beq.n	802377a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8023776:	f000 fbd7 	bl	8023f28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 802377a:	2300      	movs	r3, #0
 802377c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 802377e:	2300      	movs	r3, #0
 8023780:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8023782:	2300      	movs	r3, #0
 8023784:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8023786:	2300      	movs	r3, #0
 8023788:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 802378a:	2300      	movs	r3, #0
 802378c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 802378e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8023792:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8023794:	2300      	movs	r3, #0
 8023796:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8023798:	1d3b      	adds	r3, r7, #4
 802379a:	4619      	mov	r1, r3
 802379c:	4807      	ldr	r0, [pc, #28]	; (80237bc <MX_TIM1_Init+0x118>)
 802379e:	f006 fe13 	bl	802a3c8 <HAL_TIMEx_ConfigBreakDeadTime>
 80237a2:	4603      	mov	r3, r0
 80237a4:	2b00      	cmp	r3, #0
 80237a6:	d001      	beq.n	80237ac <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80237a8:	f000 fbbe 	bl	8023f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80237ac:	4803      	ldr	r0, [pc, #12]	; (80237bc <MX_TIM1_Init+0x118>)
 80237ae:	f002 fa69 	bl	8025c84 <HAL_TIM_MspPostInit>

}
 80237b2:	bf00      	nop
 80237b4:	3748      	adds	r7, #72	; 0x48
 80237b6:	46bd      	mov	sp, r7
 80237b8:	bd80      	pop	{r7, pc}
 80237ba:	bf00      	nop
 80237bc:	20000910 	.word	0x20000910
 80237c0:	40010000 	.word	0x40010000

080237c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80237c4:	b580      	push	{r7, lr}
 80237c6:	b086      	sub	sp, #24
 80237c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80237ca:	f107 0308 	add.w	r3, r7, #8
 80237ce:	2200      	movs	r2, #0
 80237d0:	601a      	str	r2, [r3, #0]
 80237d2:	605a      	str	r2, [r3, #4]
 80237d4:	609a      	str	r2, [r3, #8]
 80237d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80237d8:	463b      	mov	r3, r7
 80237da:	2200      	movs	r2, #0
 80237dc:	601a      	str	r2, [r3, #0]
 80237de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80237e0:	4b1d      	ldr	r3, [pc, #116]	; (8023858 <MX_TIM2_Init+0x94>)
 80237e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80237e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 80237e8:	4b1b      	ldr	r3, [pc, #108]	; (8023858 <MX_TIM2_Init+0x94>)
 80237ea:	2204      	movs	r2, #4
 80237ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80237ee:	4b1a      	ldr	r3, [pc, #104]	; (8023858 <MX_TIM2_Init+0x94>)
 80237f0:	2200      	movs	r2, #0
 80237f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 104999;
 80237f4:	4b18      	ldr	r3, [pc, #96]	; (8023858 <MX_TIM2_Init+0x94>)
 80237f6:	4a19      	ldr	r2, [pc, #100]	; (802385c <MX_TIM2_Init+0x98>)
 80237f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80237fa:	4b17      	ldr	r3, [pc, #92]	; (8023858 <MX_TIM2_Init+0x94>)
 80237fc:	2200      	movs	r2, #0
 80237fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023800:	4b15      	ldr	r3, [pc, #84]	; (8023858 <MX_TIM2_Init+0x94>)
 8023802:	2200      	movs	r2, #0
 8023804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8023806:	4814      	ldr	r0, [pc, #80]	; (8023858 <MX_TIM2_Init+0x94>)
 8023808:	f005 fe22 	bl	8029450 <HAL_TIM_Base_Init>
 802380c:	4603      	mov	r3, r0
 802380e:	2b00      	cmp	r3, #0
 8023810:	d001      	beq.n	8023816 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8023812:	f000 fb89 	bl	8023f28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8023816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802381a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 802381c:	f107 0308 	add.w	r3, r7, #8
 8023820:	4619      	mov	r1, r3
 8023822:	480d      	ldr	r0, [pc, #52]	; (8023858 <MX_TIM2_Init+0x94>)
 8023824:	f006 f964 	bl	8029af0 <HAL_TIM_ConfigClockSource>
 8023828:	4603      	mov	r3, r0
 802382a:	2b00      	cmp	r3, #0
 802382c:	d001      	beq.n	8023832 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 802382e:	f000 fb7b 	bl	8023f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023832:	2300      	movs	r3, #0
 8023834:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023836:	2300      	movs	r3, #0
 8023838:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 802383a:	463b      	mov	r3, r7
 802383c:	4619      	mov	r1, r3
 802383e:	4806      	ldr	r0, [pc, #24]	; (8023858 <MX_TIM2_Init+0x94>)
 8023840:	f006 fd46 	bl	802a2d0 <HAL_TIMEx_MasterConfigSynchronization>
 8023844:	4603      	mov	r3, r0
 8023846:	2b00      	cmp	r3, #0
 8023848:	d001      	beq.n	802384e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 802384a:	f000 fb6d 	bl	8023f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 802384e:	bf00      	nop
 8023850:	3718      	adds	r7, #24
 8023852:	46bd      	mov	sp, r7
 8023854:	bd80      	pop	{r7, pc}
 8023856:	bf00      	nop
 8023858:	20000950 	.word	0x20000950
 802385c:	00019a27 	.word	0x00019a27

08023860 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8023860:	b580      	push	{r7, lr}
 8023862:	b08a      	sub	sp, #40	; 0x28
 8023864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023866:	f107 0320 	add.w	r3, r7, #32
 802386a:	2200      	movs	r2, #0
 802386c:	601a      	str	r2, [r3, #0]
 802386e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8023870:	1d3b      	adds	r3, r7, #4
 8023872:	2200      	movs	r2, #0
 8023874:	601a      	str	r2, [r3, #0]
 8023876:	605a      	str	r2, [r3, #4]
 8023878:	609a      	str	r2, [r3, #8]
 802387a:	60da      	str	r2, [r3, #12]
 802387c:	611a      	str	r2, [r3, #16]
 802387e:	615a      	str	r2, [r3, #20]
 8023880:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8023882:	4b32      	ldr	r3, [pc, #200]	; (802394c <MX_TIM3_Init+0xec>)
 8023884:	4a32      	ldr	r2, [pc, #200]	; (8023950 <MX_TIM3_Init+0xf0>)
 8023886:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8023888:	4b30      	ldr	r3, [pc, #192]	; (802394c <MX_TIM3_Init+0xec>)
 802388a:	2200      	movs	r2, #0
 802388c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 802388e:	4b2f      	ldr	r3, [pc, #188]	; (802394c <MX_TIM3_Init+0xec>)
 8023890:	2200      	movs	r2, #0
 8023892:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8023894:	4b2d      	ldr	r3, [pc, #180]	; (802394c <MX_TIM3_Init+0xec>)
 8023896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802389a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802389c:	4b2b      	ldr	r3, [pc, #172]	; (802394c <MX_TIM3_Init+0xec>)
 802389e:	2200      	movs	r2, #0
 80238a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80238a2:	4b2a      	ldr	r3, [pc, #168]	; (802394c <MX_TIM3_Init+0xec>)
 80238a4:	2200      	movs	r2, #0
 80238a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80238a8:	4828      	ldr	r0, [pc, #160]	; (802394c <MX_TIM3_Init+0xec>)
 80238aa:	f005 fe20 	bl	80294ee <HAL_TIM_PWM_Init>
 80238ae:	4603      	mov	r3, r0
 80238b0:	2b00      	cmp	r3, #0
 80238b2:	d001      	beq.n	80238b8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80238b4:	f000 fb38 	bl	8023f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80238b8:	2300      	movs	r3, #0
 80238ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80238bc:	2300      	movs	r3, #0
 80238be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80238c0:	f107 0320 	add.w	r3, r7, #32
 80238c4:	4619      	mov	r1, r3
 80238c6:	4821      	ldr	r0, [pc, #132]	; (802394c <MX_TIM3_Init+0xec>)
 80238c8:	f006 fd02 	bl	802a2d0 <HAL_TIMEx_MasterConfigSynchronization>
 80238cc:	4603      	mov	r3, r0
 80238ce:	2b00      	cmp	r3, #0
 80238d0:	d001      	beq.n	80238d6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80238d2:	f000 fb29 	bl	8023f28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80238d6:	2360      	movs	r3, #96	; 0x60
 80238d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80238da:	2300      	movs	r3, #0
 80238dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80238de:	2300      	movs	r3, #0
 80238e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80238e2:	2300      	movs	r3, #0
 80238e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80238e6:	1d3b      	adds	r3, r7, #4
 80238e8:	2200      	movs	r2, #0
 80238ea:	4619      	mov	r1, r3
 80238ec:	4817      	ldr	r0, [pc, #92]	; (802394c <MX_TIM3_Init+0xec>)
 80238ee:	f006 f839 	bl	8029964 <HAL_TIM_PWM_ConfigChannel>
 80238f2:	4603      	mov	r3, r0
 80238f4:	2b00      	cmp	r3, #0
 80238f6:	d001      	beq.n	80238fc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80238f8:	f000 fb16 	bl	8023f28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80238fc:	1d3b      	adds	r3, r7, #4
 80238fe:	2204      	movs	r2, #4
 8023900:	4619      	mov	r1, r3
 8023902:	4812      	ldr	r0, [pc, #72]	; (802394c <MX_TIM3_Init+0xec>)
 8023904:	f006 f82e 	bl	8029964 <HAL_TIM_PWM_ConfigChannel>
 8023908:	4603      	mov	r3, r0
 802390a:	2b00      	cmp	r3, #0
 802390c:	d001      	beq.n	8023912 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 802390e:	f000 fb0b 	bl	8023f28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8023912:	1d3b      	adds	r3, r7, #4
 8023914:	2208      	movs	r2, #8
 8023916:	4619      	mov	r1, r3
 8023918:	480c      	ldr	r0, [pc, #48]	; (802394c <MX_TIM3_Init+0xec>)
 802391a:	f006 f823 	bl	8029964 <HAL_TIM_PWM_ConfigChannel>
 802391e:	4603      	mov	r3, r0
 8023920:	2b00      	cmp	r3, #0
 8023922:	d001      	beq.n	8023928 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8023924:	f000 fb00 	bl	8023f28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8023928:	1d3b      	adds	r3, r7, #4
 802392a:	220c      	movs	r2, #12
 802392c:	4619      	mov	r1, r3
 802392e:	4807      	ldr	r0, [pc, #28]	; (802394c <MX_TIM3_Init+0xec>)
 8023930:	f006 f818 	bl	8029964 <HAL_TIM_PWM_ConfigChannel>
 8023934:	4603      	mov	r3, r0
 8023936:	2b00      	cmp	r3, #0
 8023938:	d001      	beq.n	802393e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 802393a:	f000 faf5 	bl	8023f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 802393e:	4803      	ldr	r0, [pc, #12]	; (802394c <MX_TIM3_Init+0xec>)
 8023940:	f002 f9a0 	bl	8025c84 <HAL_TIM_MspPostInit>

}
 8023944:	bf00      	nop
 8023946:	3728      	adds	r7, #40	; 0x28
 8023948:	46bd      	mov	sp, r7
 802394a:	bd80      	pop	{r7, pc}
 802394c:	20000750 	.word	0x20000750
 8023950:	40000400 	.word	0x40000400

08023954 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8023954:	b580      	push	{r7, lr}
 8023956:	b08c      	sub	sp, #48	; 0x30
 8023958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 802395a:	f107 030c 	add.w	r3, r7, #12
 802395e:	2224      	movs	r2, #36	; 0x24
 8023960:	2100      	movs	r1, #0
 8023962:	4618      	mov	r0, r3
 8023964:	f006 fdd5 	bl	802a512 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023968:	1d3b      	adds	r3, r7, #4
 802396a:	2200      	movs	r2, #0
 802396c:	601a      	str	r2, [r3, #0]
 802396e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8023970:	4b20      	ldr	r3, [pc, #128]	; (80239f4 <MX_TIM4_Init+0xa0>)
 8023972:	4a21      	ldr	r2, [pc, #132]	; (80239f8 <MX_TIM4_Init+0xa4>)
 8023974:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8023976:	4b1f      	ldr	r3, [pc, #124]	; (80239f4 <MX_TIM4_Init+0xa0>)
 8023978:	2200      	movs	r2, #0
 802397a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 802397c:	4b1d      	ldr	r3, [pc, #116]	; (80239f4 <MX_TIM4_Init+0xa0>)
 802397e:	2200      	movs	r2, #0
 8023980:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8023982:	4b1c      	ldr	r3, [pc, #112]	; (80239f4 <MX_TIM4_Init+0xa0>)
 8023984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023988:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802398a:	4b1a      	ldr	r3, [pc, #104]	; (80239f4 <MX_TIM4_Init+0xa0>)
 802398c:	2200      	movs	r2, #0
 802398e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023990:	4b18      	ldr	r3, [pc, #96]	; (80239f4 <MX_TIM4_Init+0xa0>)
 8023992:	2200      	movs	r2, #0
 8023994:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8023996:	2303      	movs	r3, #3
 8023998:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 802399a:	2300      	movs	r3, #0
 802399c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 802399e:	2301      	movs	r3, #1
 80239a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80239a2:	2300      	movs	r3, #0
 80239a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80239a6:	2300      	movs	r3, #0
 80239a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80239aa:	2300      	movs	r3, #0
 80239ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80239ae:	2301      	movs	r3, #1
 80239b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80239b2:	2300      	movs	r3, #0
 80239b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80239b6:	2300      	movs	r3, #0
 80239b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80239ba:	f107 030c 	add.w	r3, r7, #12
 80239be:	4619      	mov	r1, r3
 80239c0:	480c      	ldr	r0, [pc, #48]	; (80239f4 <MX_TIM4_Init+0xa0>)
 80239c2:	f005 fdfd 	bl	80295c0 <HAL_TIM_Encoder_Init>
 80239c6:	4603      	mov	r3, r0
 80239c8:	2b00      	cmp	r3, #0
 80239ca:	d001      	beq.n	80239d0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80239cc:	f000 faac 	bl	8023f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80239d0:	2300      	movs	r3, #0
 80239d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80239d4:	2300      	movs	r3, #0
 80239d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80239d8:	1d3b      	adds	r3, r7, #4
 80239da:	4619      	mov	r1, r3
 80239dc:	4805      	ldr	r0, [pc, #20]	; (80239f4 <MX_TIM4_Init+0xa0>)
 80239de:	f006 fc77 	bl	802a2d0 <HAL_TIMEx_MasterConfigSynchronization>
 80239e2:	4603      	mov	r3, r0
 80239e4:	2b00      	cmp	r3, #0
 80239e6:	d001      	beq.n	80239ec <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80239e8:	f000 fa9e 	bl	8023f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80239ec:	bf00      	nop
 80239ee:	3730      	adds	r7, #48	; 0x30
 80239f0:	46bd      	mov	sp, r7
 80239f2:	bd80      	pop	{r7, pc}
 80239f4:	2000067c 	.word	0x2000067c
 80239f8:	40000800 	.word	0x40000800

080239fc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80239fc:	b580      	push	{r7, lr}
 80239fe:	b086      	sub	sp, #24
 8023a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8023a02:	f107 0308 	add.w	r3, r7, #8
 8023a06:	2200      	movs	r2, #0
 8023a08:	601a      	str	r2, [r3, #0]
 8023a0a:	605a      	str	r2, [r3, #4]
 8023a0c:	609a      	str	r2, [r3, #8]
 8023a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023a10:	463b      	mov	r3, r7
 8023a12:	2200      	movs	r2, #0
 8023a14:	601a      	str	r2, [r3, #0]
 8023a16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8023a18:	4b1d      	ldr	r3, [pc, #116]	; (8023a90 <MX_TIM5_Init+0x94>)
 8023a1a:	4a1e      	ldr	r2, [pc, #120]	; (8023a94 <MX_TIM5_Init+0x98>)
 8023a1c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4;
 8023a1e:	4b1c      	ldr	r3, [pc, #112]	; (8023a90 <MX_TIM5_Init+0x94>)
 8023a20:	2204      	movs	r2, #4
 8023a22:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023a24:	4b1a      	ldr	r3, [pc, #104]	; (8023a90 <MX_TIM5_Init+0x94>)
 8023a26:	2200      	movs	r2, #0
 8023a28:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20999;
 8023a2a:	4b19      	ldr	r3, [pc, #100]	; (8023a90 <MX_TIM5_Init+0x94>)
 8023a2c:	f245 2207 	movw	r2, #20999	; 0x5207
 8023a30:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023a32:	4b17      	ldr	r3, [pc, #92]	; (8023a90 <MX_TIM5_Init+0x94>)
 8023a34:	2200      	movs	r2, #0
 8023a36:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023a38:	4b15      	ldr	r3, [pc, #84]	; (8023a90 <MX_TIM5_Init+0x94>)
 8023a3a:	2200      	movs	r2, #0
 8023a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8023a3e:	4814      	ldr	r0, [pc, #80]	; (8023a90 <MX_TIM5_Init+0x94>)
 8023a40:	f005 fd06 	bl	8029450 <HAL_TIM_Base_Init>
 8023a44:	4603      	mov	r3, r0
 8023a46:	2b00      	cmp	r3, #0
 8023a48:	d001      	beq.n	8023a4e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8023a4a:	f000 fa6d 	bl	8023f28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8023a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023a52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8023a54:	f107 0308 	add.w	r3, r7, #8
 8023a58:	4619      	mov	r1, r3
 8023a5a:	480d      	ldr	r0, [pc, #52]	; (8023a90 <MX_TIM5_Init+0x94>)
 8023a5c:	f006 f848 	bl	8029af0 <HAL_TIM_ConfigClockSource>
 8023a60:	4603      	mov	r3, r0
 8023a62:	2b00      	cmp	r3, #0
 8023a64:	d001      	beq.n	8023a6a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8023a66:	f000 fa5f 	bl	8023f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023a6a:	2300      	movs	r3, #0
 8023a6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023a6e:	2300      	movs	r3, #0
 8023a70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8023a72:	463b      	mov	r3, r7
 8023a74:	4619      	mov	r1, r3
 8023a76:	4806      	ldr	r0, [pc, #24]	; (8023a90 <MX_TIM5_Init+0x94>)
 8023a78:	f006 fc2a 	bl	802a2d0 <HAL_TIMEx_MasterConfigSynchronization>
 8023a7c:	4603      	mov	r3, r0
 8023a7e:	2b00      	cmp	r3, #0
 8023a80:	d001      	beq.n	8023a86 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8023a82:	f000 fa51 	bl	8023f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8023a86:	bf00      	nop
 8023a88:	3718      	adds	r7, #24
 8023a8a:	46bd      	mov	sp, r7
 8023a8c:	bd80      	pop	{r7, pc}
 8023a8e:	bf00      	nop
 8023a90:	20000710 	.word	0x20000710
 8023a94:	40000c00 	.word	0x40000c00

08023a98 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8023a98:	b580      	push	{r7, lr}
 8023a9a:	b082      	sub	sp, #8
 8023a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023a9e:	463b      	mov	r3, r7
 8023aa0:	2200      	movs	r2, #0
 8023aa2:	601a      	str	r2, [r3, #0]
 8023aa4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8023aa6:	4b15      	ldr	r3, [pc, #84]	; (8023afc <MX_TIM6_Init+0x64>)
 8023aa8:	4a15      	ldr	r2, [pc, #84]	; (8023b00 <MX_TIM6_Init+0x68>)
 8023aaa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 8023aac:	4b13      	ldr	r3, [pc, #76]	; (8023afc <MX_TIM6_Init+0x64>)
 8023aae:	2204      	movs	r2, #4
 8023ab0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023ab2:	4b12      	ldr	r3, [pc, #72]	; (8023afc <MX_TIM6_Init+0x64>)
 8023ab4:	2200      	movs	r2, #0
 8023ab6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10499;
 8023ab8:	4b10      	ldr	r3, [pc, #64]	; (8023afc <MX_TIM6_Init+0x64>)
 8023aba:	f642 1203 	movw	r2, #10499	; 0x2903
 8023abe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023ac0:	4b0e      	ldr	r3, [pc, #56]	; (8023afc <MX_TIM6_Init+0x64>)
 8023ac2:	2200      	movs	r2, #0
 8023ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8023ac6:	480d      	ldr	r0, [pc, #52]	; (8023afc <MX_TIM6_Init+0x64>)
 8023ac8:	f005 fcc2 	bl	8029450 <HAL_TIM_Base_Init>
 8023acc:	4603      	mov	r3, r0
 8023ace:	2b00      	cmp	r3, #0
 8023ad0:	d001      	beq.n	8023ad6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8023ad2:	f000 fa29 	bl	8023f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023ad6:	2300      	movs	r3, #0
 8023ad8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023ada:	2300      	movs	r3, #0
 8023adc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8023ade:	463b      	mov	r3, r7
 8023ae0:	4619      	mov	r1, r3
 8023ae2:	4806      	ldr	r0, [pc, #24]	; (8023afc <MX_TIM6_Init+0x64>)
 8023ae4:	f006 fbf4 	bl	802a2d0 <HAL_TIMEx_MasterConfigSynchronization>
 8023ae8:	4603      	mov	r3, r0
 8023aea:	2b00      	cmp	r3, #0
 8023aec:	d001      	beq.n	8023af2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8023aee:	f000 fa1b 	bl	8023f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8023af2:	bf00      	nop
 8023af4:	3708      	adds	r7, #8
 8023af6:	46bd      	mov	sp, r7
 8023af8:	bd80      	pop	{r7, pc}
 8023afa:	bf00      	nop
 8023afc:	200008d0 	.word	0x200008d0
 8023b00:	40001000 	.word	0x40001000

08023b04 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8023b04:	b580      	push	{r7, lr}
 8023b06:	b082      	sub	sp, #8
 8023b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023b0a:	463b      	mov	r3, r7
 8023b0c:	2200      	movs	r2, #0
 8023b0e:	601a      	str	r2, [r3, #0]
 8023b10:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8023b12:	4b15      	ldr	r3, [pc, #84]	; (8023b68 <MX_TIM7_Init+0x64>)
 8023b14:	4a15      	ldr	r2, [pc, #84]	; (8023b6c <MX_TIM7_Init+0x68>)
 8023b16:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 8023b18:	4b13      	ldr	r3, [pc, #76]	; (8023b68 <MX_TIM7_Init+0x64>)
 8023b1a:	2204      	movs	r2, #4
 8023b1c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023b1e:	4b12      	ldr	r3, [pc, #72]	; (8023b68 <MX_TIM7_Init+0x64>)
 8023b20:	2200      	movs	r2, #0
 8023b22:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1049;
 8023b24:	4b10      	ldr	r3, [pc, #64]	; (8023b68 <MX_TIM7_Init+0x64>)
 8023b26:	f240 4219 	movw	r2, #1049	; 0x419
 8023b2a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023b2c:	4b0e      	ldr	r3, [pc, #56]	; (8023b68 <MX_TIM7_Init+0x64>)
 8023b2e:	2200      	movs	r2, #0
 8023b30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8023b32:	480d      	ldr	r0, [pc, #52]	; (8023b68 <MX_TIM7_Init+0x64>)
 8023b34:	f005 fc8c 	bl	8029450 <HAL_TIM_Base_Init>
 8023b38:	4603      	mov	r3, r0
 8023b3a:	2b00      	cmp	r3, #0
 8023b3c:	d001      	beq.n	8023b42 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8023b3e:	f000 f9f3 	bl	8023f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023b42:	2300      	movs	r3, #0
 8023b44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023b46:	2300      	movs	r3, #0
 8023b48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8023b4a:	463b      	mov	r3, r7
 8023b4c:	4619      	mov	r1, r3
 8023b4e:	4806      	ldr	r0, [pc, #24]	; (8023b68 <MX_TIM7_Init+0x64>)
 8023b50:	f006 fbbe 	bl	802a2d0 <HAL_TIMEx_MasterConfigSynchronization>
 8023b54:	4603      	mov	r3, r0
 8023b56:	2b00      	cmp	r3, #0
 8023b58:	d001      	beq.n	8023b5e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8023b5a:	f000 f9e5 	bl	8023f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8023b5e:	bf00      	nop
 8023b60:	3708      	adds	r7, #8
 8023b62:	46bd      	mov	sp, r7
 8023b64:	bd80      	pop	{r7, pc}
 8023b66:	bf00      	nop
 8023b68:	200009d0 	.word	0x200009d0
 8023b6c:	40001400 	.word	0x40001400

08023b70 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8023b70:	b580      	push	{r7, lr}
 8023b72:	b08c      	sub	sp, #48	; 0x30
 8023b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8023b76:	f107 030c 	add.w	r3, r7, #12
 8023b7a:	2224      	movs	r2, #36	; 0x24
 8023b7c:	2100      	movs	r1, #0
 8023b7e:	4618      	mov	r0, r3
 8023b80:	f006 fcc7 	bl	802a512 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023b84:	1d3b      	adds	r3, r7, #4
 8023b86:	2200      	movs	r2, #0
 8023b88:	601a      	str	r2, [r3, #0]
 8023b8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8023b8c:	4b22      	ldr	r3, [pc, #136]	; (8023c18 <MX_TIM8_Init+0xa8>)
 8023b8e:	4a23      	ldr	r2, [pc, #140]	; (8023c1c <MX_TIM8_Init+0xac>)
 8023b90:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8023b92:	4b21      	ldr	r3, [pc, #132]	; (8023c18 <MX_TIM8_Init+0xa8>)
 8023b94:	2200      	movs	r2, #0
 8023b96:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023b98:	4b1f      	ldr	r3, [pc, #124]	; (8023c18 <MX_TIM8_Init+0xa8>)
 8023b9a:	2200      	movs	r2, #0
 8023b9c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8023b9e:	4b1e      	ldr	r3, [pc, #120]	; (8023c18 <MX_TIM8_Init+0xa8>)
 8023ba0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023ba4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023ba6:	4b1c      	ldr	r3, [pc, #112]	; (8023c18 <MX_TIM8_Init+0xa8>)
 8023ba8:	2200      	movs	r2, #0
 8023baa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8023bac:	4b1a      	ldr	r3, [pc, #104]	; (8023c18 <MX_TIM8_Init+0xa8>)
 8023bae:	2200      	movs	r2, #0
 8023bb0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023bb2:	4b19      	ldr	r3, [pc, #100]	; (8023c18 <MX_TIM8_Init+0xa8>)
 8023bb4:	2200      	movs	r2, #0
 8023bb6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8023bb8:	2303      	movs	r3, #3
 8023bba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8023bbc:	2300      	movs	r3, #0
 8023bbe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8023bc0:	2301      	movs	r3, #1
 8023bc2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8023bc4:	2300      	movs	r3, #0
 8023bc6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8023bc8:	2300      	movs	r3, #0
 8023bca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8023bcc:	2300      	movs	r3, #0
 8023bce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8023bd0:	2301      	movs	r3, #1
 8023bd2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8023bd4:	2300      	movs	r3, #0
 8023bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8023bd8:	2300      	movs	r3, #0
 8023bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8023bdc:	f107 030c 	add.w	r3, r7, #12
 8023be0:	4619      	mov	r1, r3
 8023be2:	480d      	ldr	r0, [pc, #52]	; (8023c18 <MX_TIM8_Init+0xa8>)
 8023be4:	f005 fcec 	bl	80295c0 <HAL_TIM_Encoder_Init>
 8023be8:	4603      	mov	r3, r0
 8023bea:	2b00      	cmp	r3, #0
 8023bec:	d001      	beq.n	8023bf2 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8023bee:	f000 f99b 	bl	8023f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023bf2:	2300      	movs	r3, #0
 8023bf4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023bf6:	2300      	movs	r3, #0
 8023bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8023bfa:	1d3b      	adds	r3, r7, #4
 8023bfc:	4619      	mov	r1, r3
 8023bfe:	4806      	ldr	r0, [pc, #24]	; (8023c18 <MX_TIM8_Init+0xa8>)
 8023c00:	f006 fb66 	bl	802a2d0 <HAL_TIMEx_MasterConfigSynchronization>
 8023c04:	4603      	mov	r3, r0
 8023c06:	2b00      	cmp	r3, #0
 8023c08:	d001      	beq.n	8023c0e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8023c0a:	f000 f98d 	bl	8023f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8023c0e:	bf00      	nop
 8023c10:	3730      	adds	r7, #48	; 0x30
 8023c12:	46bd      	mov	sp, r7
 8023c14:	bd80      	pop	{r7, pc}
 8023c16:	bf00      	nop
 8023c18:	2000063c 	.word	0x2000063c
 8023c1c:	40010400 	.word	0x40010400

08023c20 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8023c20:	b580      	push	{r7, lr}
 8023c22:	b088      	sub	sp, #32
 8023c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8023c26:	1d3b      	adds	r3, r7, #4
 8023c28:	2200      	movs	r2, #0
 8023c2a:	601a      	str	r2, [r3, #0]
 8023c2c:	605a      	str	r2, [r3, #4]
 8023c2e:	609a      	str	r2, [r3, #8]
 8023c30:	60da      	str	r2, [r3, #12]
 8023c32:	611a      	str	r2, [r3, #16]
 8023c34:	615a      	str	r2, [r3, #20]
 8023c36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8023c38:	4b1e      	ldr	r3, [pc, #120]	; (8023cb4 <MX_TIM11_Init+0x94>)
 8023c3a:	4a1f      	ldr	r2, [pc, #124]	; (8023cb8 <MX_TIM11_Init+0x98>)
 8023c3c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8023c3e:	4b1d      	ldr	r3, [pc, #116]	; (8023cb4 <MX_TIM11_Init+0x94>)
 8023c40:	2200      	movs	r2, #0
 8023c42:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023c44:	4b1b      	ldr	r3, [pc, #108]	; (8023cb4 <MX_TIM11_Init+0x94>)
 8023c46:	2200      	movs	r2, #0
 8023c48:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1679;
 8023c4a:	4b1a      	ldr	r3, [pc, #104]	; (8023cb4 <MX_TIM11_Init+0x94>)
 8023c4c:	f240 628f 	movw	r2, #1679	; 0x68f
 8023c50:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023c52:	4b18      	ldr	r3, [pc, #96]	; (8023cb4 <MX_TIM11_Init+0x94>)
 8023c54:	2200      	movs	r2, #0
 8023c56:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023c58:	4b16      	ldr	r3, [pc, #88]	; (8023cb4 <MX_TIM11_Init+0x94>)
 8023c5a:	2200      	movs	r2, #0
 8023c5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8023c5e:	4815      	ldr	r0, [pc, #84]	; (8023cb4 <MX_TIM11_Init+0x94>)
 8023c60:	f005 fbf6 	bl	8029450 <HAL_TIM_Base_Init>
 8023c64:	4603      	mov	r3, r0
 8023c66:	2b00      	cmp	r3, #0
 8023c68:	d001      	beq.n	8023c6e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8023c6a:	f000 f95d 	bl	8023f28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8023c6e:	4811      	ldr	r0, [pc, #68]	; (8023cb4 <MX_TIM11_Init+0x94>)
 8023c70:	f005 fc3d 	bl	80294ee <HAL_TIM_PWM_Init>
 8023c74:	4603      	mov	r3, r0
 8023c76:	2b00      	cmp	r3, #0
 8023c78:	d001      	beq.n	8023c7e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8023c7a:	f000 f955 	bl	8023f28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023c7e:	2360      	movs	r3, #96	; 0x60
 8023c80:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8023c82:	2300      	movs	r3, #0
 8023c84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8023c86:	2300      	movs	r3, #0
 8023c88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8023c8a:	2300      	movs	r3, #0
 8023c8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8023c8e:	1d3b      	adds	r3, r7, #4
 8023c90:	2200      	movs	r2, #0
 8023c92:	4619      	mov	r1, r3
 8023c94:	4807      	ldr	r0, [pc, #28]	; (8023cb4 <MX_TIM11_Init+0x94>)
 8023c96:	f005 fe65 	bl	8029964 <HAL_TIM_PWM_ConfigChannel>
 8023c9a:	4603      	mov	r3, r0
 8023c9c:	2b00      	cmp	r3, #0
 8023c9e:	d001      	beq.n	8023ca4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8023ca0:	f000 f942 	bl	8023f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8023ca4:	4803      	ldr	r0, [pc, #12]	; (8023cb4 <MX_TIM11_Init+0x94>)
 8023ca6:	f001 ffed 	bl	8025c84 <HAL_TIM_MspPostInit>

}
 8023caa:	bf00      	nop
 8023cac:	3720      	adds	r7, #32
 8023cae:	46bd      	mov	sp, r7
 8023cb0:	bd80      	pop	{r7, pc}
 8023cb2:	bf00      	nop
 8023cb4:	20000830 	.word	0x20000830
 8023cb8:	40014800 	.word	0x40014800

08023cbc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8023cbc:	b580      	push	{r7, lr}
 8023cbe:	b088      	sub	sp, #32
 8023cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8023cc2:	1d3b      	adds	r3, r7, #4
 8023cc4:	2200      	movs	r2, #0
 8023cc6:	601a      	str	r2, [r3, #0]
 8023cc8:	605a      	str	r2, [r3, #4]
 8023cca:	609a      	str	r2, [r3, #8]
 8023ccc:	60da      	str	r2, [r3, #12]
 8023cce:	611a      	str	r2, [r3, #16]
 8023cd0:	615a      	str	r2, [r3, #20]
 8023cd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8023cd4:	4b1a      	ldr	r3, [pc, #104]	; (8023d40 <MX_TIM12_Init+0x84>)
 8023cd6:	4a1b      	ldr	r2, [pc, #108]	; (8023d44 <MX_TIM12_Init+0x88>)
 8023cd8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 880;
 8023cda:	4b19      	ldr	r3, [pc, #100]	; (8023d40 <MX_TIM12_Init+0x84>)
 8023cdc:	f44f 725c 	mov.w	r2, #880	; 0x370
 8023ce0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023ce2:	4b17      	ldr	r3, [pc, #92]	; (8023d40 <MX_TIM12_Init+0x84>)
 8023ce4:	2200      	movs	r2, #0
 8023ce6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 53;
 8023ce8:	4b15      	ldr	r3, [pc, #84]	; (8023d40 <MX_TIM12_Init+0x84>)
 8023cea:	2235      	movs	r2, #53	; 0x35
 8023cec:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023cee:	4b14      	ldr	r3, [pc, #80]	; (8023d40 <MX_TIM12_Init+0x84>)
 8023cf0:	2200      	movs	r2, #0
 8023cf2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023cf4:	4b12      	ldr	r3, [pc, #72]	; (8023d40 <MX_TIM12_Init+0x84>)
 8023cf6:	2200      	movs	r2, #0
 8023cf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8023cfa:	4811      	ldr	r0, [pc, #68]	; (8023d40 <MX_TIM12_Init+0x84>)
 8023cfc:	f005 fbf7 	bl	80294ee <HAL_TIM_PWM_Init>
 8023d00:	4603      	mov	r3, r0
 8023d02:	2b00      	cmp	r3, #0
 8023d04:	d001      	beq.n	8023d0a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8023d06:	f000 f90f 	bl	8023f28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023d0a:	2360      	movs	r3, #96	; 0x60
 8023d0c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8023d0e:	2300      	movs	r3, #0
 8023d10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8023d12:	2300      	movs	r3, #0
 8023d14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8023d16:	2300      	movs	r3, #0
 8023d18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8023d1a:	1d3b      	adds	r3, r7, #4
 8023d1c:	2204      	movs	r2, #4
 8023d1e:	4619      	mov	r1, r3
 8023d20:	4807      	ldr	r0, [pc, #28]	; (8023d40 <MX_TIM12_Init+0x84>)
 8023d22:	f005 fe1f 	bl	8029964 <HAL_TIM_PWM_ConfigChannel>
 8023d26:	4603      	mov	r3, r0
 8023d28:	2b00      	cmp	r3, #0
 8023d2a:	d001      	beq.n	8023d30 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8023d2c:	f000 f8fc 	bl	8023f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8023d30:	4803      	ldr	r0, [pc, #12]	; (8023d40 <MX_TIM12_Init+0x84>)
 8023d32:	f001 ffa7 	bl	8025c84 <HAL_TIM_MspPostInit>

}
 8023d36:	bf00      	nop
 8023d38:	3720      	adds	r7, #32
 8023d3a:	46bd      	mov	sp, r7
 8023d3c:	bd80      	pop	{r7, pc}
 8023d3e:	bf00      	nop
 8023d40:	20000990 	.word	0x20000990
 8023d44:	40001800 	.word	0x40001800

08023d48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8023d48:	b580      	push	{r7, lr}
 8023d4a:	b082      	sub	sp, #8
 8023d4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8023d4e:	2300      	movs	r3, #0
 8023d50:	607b      	str	r3, [r7, #4]
 8023d52:	4b0c      	ldr	r3, [pc, #48]	; (8023d84 <MX_DMA_Init+0x3c>)
 8023d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023d56:	4a0b      	ldr	r2, [pc, #44]	; (8023d84 <MX_DMA_Init+0x3c>)
 8023d58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8023d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8023d5e:	4b09      	ldr	r3, [pc, #36]	; (8023d84 <MX_DMA_Init+0x3c>)
 8023d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8023d66:	607b      	str	r3, [r7, #4]
 8023d68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8023d6a:	2200      	movs	r2, #0
 8023d6c:	2100      	movs	r1, #0
 8023d6e:	2038      	movs	r0, #56	; 0x38
 8023d70:	f003 f873 	bl	8026e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8023d74:	2038      	movs	r0, #56	; 0x38
 8023d76:	f003 f88c 	bl	8026e92 <HAL_NVIC_EnableIRQ>

}
 8023d7a:	bf00      	nop
 8023d7c:	3708      	adds	r7, #8
 8023d7e:	46bd      	mov	sp, r7
 8023d80:	bd80      	pop	{r7, pc}
 8023d82:	bf00      	nop
 8023d84:	40023800 	.word	0x40023800

08023d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8023d88:	b580      	push	{r7, lr}
 8023d8a:	b08a      	sub	sp, #40	; 0x28
 8023d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023d8e:	f107 0314 	add.w	r3, r7, #20
 8023d92:	2200      	movs	r2, #0
 8023d94:	601a      	str	r2, [r3, #0]
 8023d96:	605a      	str	r2, [r3, #4]
 8023d98:	609a      	str	r2, [r3, #8]
 8023d9a:	60da      	str	r2, [r3, #12]
 8023d9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8023d9e:	2300      	movs	r3, #0
 8023da0:	613b      	str	r3, [r7, #16]
 8023da2:	4b5c      	ldr	r3, [pc, #368]	; (8023f14 <MX_GPIO_Init+0x18c>)
 8023da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023da6:	4a5b      	ldr	r2, [pc, #364]	; (8023f14 <MX_GPIO_Init+0x18c>)
 8023da8:	f043 0304 	orr.w	r3, r3, #4
 8023dac:	6313      	str	r3, [r2, #48]	; 0x30
 8023dae:	4b59      	ldr	r3, [pc, #356]	; (8023f14 <MX_GPIO_Init+0x18c>)
 8023db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023db2:	f003 0304 	and.w	r3, r3, #4
 8023db6:	613b      	str	r3, [r7, #16]
 8023db8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8023dba:	2300      	movs	r3, #0
 8023dbc:	60fb      	str	r3, [r7, #12]
 8023dbe:	4b55      	ldr	r3, [pc, #340]	; (8023f14 <MX_GPIO_Init+0x18c>)
 8023dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023dc2:	4a54      	ldr	r2, [pc, #336]	; (8023f14 <MX_GPIO_Init+0x18c>)
 8023dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8023dca:	4b52      	ldr	r3, [pc, #328]	; (8023f14 <MX_GPIO_Init+0x18c>)
 8023dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023dd2:	60fb      	str	r3, [r7, #12]
 8023dd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8023dd6:	2300      	movs	r3, #0
 8023dd8:	60bb      	str	r3, [r7, #8]
 8023dda:	4b4e      	ldr	r3, [pc, #312]	; (8023f14 <MX_GPIO_Init+0x18c>)
 8023ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023dde:	4a4d      	ldr	r2, [pc, #308]	; (8023f14 <MX_GPIO_Init+0x18c>)
 8023de0:	f043 0301 	orr.w	r3, r3, #1
 8023de4:	6313      	str	r3, [r2, #48]	; 0x30
 8023de6:	4b4b      	ldr	r3, [pc, #300]	; (8023f14 <MX_GPIO_Init+0x18c>)
 8023de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023dea:	f003 0301 	and.w	r3, r3, #1
 8023dee:	60bb      	str	r3, [r7, #8]
 8023df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8023df2:	2300      	movs	r3, #0
 8023df4:	607b      	str	r3, [r7, #4]
 8023df6:	4b47      	ldr	r3, [pc, #284]	; (8023f14 <MX_GPIO_Init+0x18c>)
 8023df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023dfa:	4a46      	ldr	r2, [pc, #280]	; (8023f14 <MX_GPIO_Init+0x18c>)
 8023dfc:	f043 0302 	orr.w	r3, r3, #2
 8023e00:	6313      	str	r3, [r2, #48]	; 0x30
 8023e02:	4b44      	ldr	r3, [pc, #272]	; (8023f14 <MX_GPIO_Init+0x18c>)
 8023e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023e06:	f003 0302 	and.w	r3, r3, #2
 8023e0a:	607b      	str	r3, [r7, #4]
 8023e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8023e0e:	2300      	movs	r3, #0
 8023e10:	603b      	str	r3, [r7, #0]
 8023e12:	4b40      	ldr	r3, [pc, #256]	; (8023f14 <MX_GPIO_Init+0x18c>)
 8023e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023e16:	4a3f      	ldr	r2, [pc, #252]	; (8023f14 <MX_GPIO_Init+0x18c>)
 8023e18:	f043 0308 	orr.w	r3, r3, #8
 8023e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8023e1e:	4b3d      	ldr	r3, [pc, #244]	; (8023f14 <MX_GPIO_Init+0x18c>)
 8023e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023e22:	f003 0308 	and.w	r3, r3, #8
 8023e26:	603b      	str	r3, [r7, #0]
 8023e28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8023e2a:	2200      	movs	r2, #0
 8023e2c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8023e30:	4839      	ldr	r0, [pc, #228]	; (8023f18 <MX_GPIO_Init+0x190>)
 8023e32:	f004 f83f 	bl	8027eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8023e36:	2201      	movs	r2, #1
 8023e38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8023e3c:	4837      	ldr	r0, [pc, #220]	; (8023f1c <MX_GPIO_Init+0x194>)
 8023e3e:	f004 f839 	bl	8027eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8023e42:	2200      	movs	r2, #0
 8023e44:	f44f 4105 	mov.w	r1, #34048	; 0x8500
 8023e48:	4835      	ldr	r0, [pc, #212]	; (8023f20 <MX_GPIO_Init+0x198>)
 8023e4a:	f004 f833 	bl	8027eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8023e4e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8023e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023e54:	2301      	movs	r3, #1
 8023e56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023e58:	2300      	movs	r3, #0
 8023e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023e5c:	2300      	movs	r3, #0
 8023e5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023e60:	f107 0314 	add.w	r3, r7, #20
 8023e64:	4619      	mov	r1, r3
 8023e66:	482c      	ldr	r0, [pc, #176]	; (8023f18 <MX_GPIO_Init+0x190>)
 8023e68:	f003 fe72 	bl	8027b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8023e6c:	2307      	movs	r3, #7
 8023e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023e70:	2300      	movs	r3, #0
 8023e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023e74:	2301      	movs	r3, #1
 8023e76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023e78:	f107 0314 	add.w	r3, r7, #20
 8023e7c:	4619      	mov	r1, r3
 8023e7e:	4827      	ldr	r0, [pc, #156]	; (8023f1c <MX_GPIO_Init+0x194>)
 8023e80:	f003 fe66 	bl	8027b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8023e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023e8a:	2301      	movs	r3, #1
 8023e8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023e8e:	2300      	movs	r3, #0
 8023e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023e92:	2300      	movs	r3, #0
 8023e94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023e96:	f107 0314 	add.w	r3, r7, #20
 8023e9a:	4619      	mov	r1, r3
 8023e9c:	481f      	ldr	r0, [pc, #124]	; (8023f1c <MX_GPIO_Init+0x194>)
 8023e9e:	f003 fe57 	bl	8027b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_8;
 8023ea2:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8023ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023ea8:	2300      	movs	r3, #0
 8023eaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023eac:	2300      	movs	r3, #0
 8023eae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023eb0:	f107 0314 	add.w	r3, r7, #20
 8023eb4:	4619      	mov	r1, r3
 8023eb6:	4819      	ldr	r0, [pc, #100]	; (8023f1c <MX_GPIO_Init+0x194>)
 8023eb8:	f003 fe4a 	bl	8027b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15;
 8023ebc:	f44f 4305 	mov.w	r3, #34048	; 0x8500
 8023ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8023ec2:	2301      	movs	r3, #1
 8023ec4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023ec6:	2300      	movs	r3, #0
 8023ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023eca:	2300      	movs	r3, #0
 8023ecc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023ece:	f107 0314 	add.w	r3, r7, #20
 8023ed2:	4619      	mov	r1, r3
 8023ed4:	4812      	ldr	r0, [pc, #72]	; (8023f20 <MX_GPIO_Init+0x198>)
 8023ed6:	f003 fe3b 	bl	8027b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8023eda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023ee0:	2300      	movs	r3, #0
 8023ee2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023ee4:	2301      	movs	r3, #1
 8023ee6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023ee8:	f107 0314 	add.w	r3, r7, #20
 8023eec:	4619      	mov	r1, r3
 8023eee:	480c      	ldr	r0, [pc, #48]	; (8023f20 <MX_GPIO_Init+0x198>)
 8023ef0:	f003 fe2e 	bl	8027b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8023ef4:	2304      	movs	r3, #4
 8023ef6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023ef8:	2300      	movs	r3, #0
 8023efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023efc:	2300      	movs	r3, #0
 8023efe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8023f00:	f107 0314 	add.w	r3, r7, #20
 8023f04:	4619      	mov	r1, r3
 8023f06:	4807      	ldr	r0, [pc, #28]	; (8023f24 <MX_GPIO_Init+0x19c>)
 8023f08:	f003 fe22 	bl	8027b50 <HAL_GPIO_Init>

}
 8023f0c:	bf00      	nop
 8023f0e:	3728      	adds	r7, #40	; 0x28
 8023f10:	46bd      	mov	sp, r7
 8023f12:	bd80      	pop	{r7, pc}
 8023f14:	40023800 	.word	0x40023800
 8023f18:	40020800 	.word	0x40020800
 8023f1c:	40020400 	.word	0x40020400
 8023f20:	40020000 	.word	0x40020000
 8023f24:	40020c00 	.word	0x40020c00

08023f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8023f28:	b480      	push	{r7}
 8023f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8023f2c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8023f2e:	e7fe      	b.n	8023f2e <Error_Handler+0x6>

08023f30 <_ZN5Motor4InitEv>:
#include "motor.hpp"
#include "declare_extern.h"

void Motor::Init()
{
 8023f30:	b580      	push	{r7, lr}
 8023f32:	b082      	sub	sp, #8
 8023f34:	af00      	add	r7, sp, #0
 8023f36:	6078      	str	r0, [r7, #4]
    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 8023f38:	2104      	movs	r1, #4
 8023f3a:	4812      	ldr	r0, [pc, #72]	; (8023f84 <_ZN5Motor4InitEv+0x54>)
 8023f3c:	f005 fb02 	bl	8029544 <HAL_TIM_PWM_Start>
 8023f40:	4603      	mov	r3, r0
 8023f42:	2b00      	cmp	r3, #0
 8023f44:	bf14      	ite	ne
 8023f46:	2301      	movne	r3, #1
 8023f48:	2300      	moveq	r3, #0
 8023f4a:	b2db      	uxtb	r3, r3
 8023f4c:	2b00      	cmp	r3, #0
 8023f4e:	d004      	beq.n	8023f5a <_ZN5Motor4InitEv+0x2a>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim1_ch2 = true; // MOTOR_R
 8023f50:	4b0d      	ldr	r3, [pc, #52]	; (8023f88 <_ZN5Motor4InitEv+0x58>)
 8023f52:	2201      	movs	r2, #1
 8023f54:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8023f56:	f7ff ffe7 	bl	8023f28 <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8023f5a:	210c      	movs	r1, #12
 8023f5c:	4809      	ldr	r0, [pc, #36]	; (8023f84 <_ZN5Motor4InitEv+0x54>)
 8023f5e:	f005 faf1 	bl	8029544 <HAL_TIM_PWM_Start>
 8023f62:	4603      	mov	r3, r0
 8023f64:	2b00      	cmp	r3, #0
 8023f66:	bf14      	ite	ne
 8023f68:	2301      	movne	r3, #1
 8023f6a:	2300      	moveq	r3, #0
 8023f6c:	b2db      	uxtb	r3, r3
 8023f6e:	2b00      	cmp	r3, #0
 8023f70:	d004      	beq.n	8023f7c <_ZN5Motor4InitEv+0x4c>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim1_ch4 = true; // MOTOR_L
 8023f72:	4b06      	ldr	r3, [pc, #24]	; (8023f8c <_ZN5Motor4InitEv+0x5c>)
 8023f74:	2201      	movs	r2, #1
 8023f76:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8023f78:	f7ff ffd6 	bl	8023f28 <Error_Handler>
    }
}
 8023f7c:	bf00      	nop
 8023f7e:	3708      	adds	r7, #8
 8023f80:	46bd      	mov	sp, r7
 8023f82:	bd80      	pop	{r7, pc}
 8023f84:	20000910 	.word	0x20000910
 8023f88:	200000c0 	.word	0x200000c0
 8023f8c:	200000c1 	.word	0x200000c1

08023f90 <_ZN5Motor5DriveEff>:

void Motor::Drive(float translation_ratio, float rotation_ratio)
{
 8023f90:	b580      	push	{r7, lr}
 8023f92:	b08a      	sub	sp, #40	; 0x28
 8023f94:	af00      	add	r7, sp, #0
 8023f96:	60f8      	str	r0, [r7, #12]
 8023f98:	ed87 0a02 	vstr	s0, [r7, #8]
 8023f9c:	edc7 0a01 	vstr	s1, [r7, #4]
#ifdef DEBUG_MODE
    g_translation_ratio = translation_ratio;
 8023fa0:	4a89      	ldr	r2, [pc, #548]	; (80241c8 <_ZN5Motor5DriveEff+0x238>)
 8023fa2:	68bb      	ldr	r3, [r7, #8]
 8023fa4:	6013      	str	r3, [r2, #0]
    g_rotation_ratio    = rotation_ratio;
 8023fa6:	4a89      	ldr	r2, [pc, #548]	; (80241cc <_ZN5Motor5DriveEff+0x23c>)
 8023fa8:	687b      	ldr	r3, [r7, #4]
 8023faa:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    if(translation_ratio > LIMIT_TRANS_DUTY)       translation_ratio =  LIMIT_TRANS_DUTY;
 8023fac:	68b8      	ldr	r0, [r7, #8]
 8023fae:	f7fc f9ab 	bl	8020308 <__aeabi_f2d>
 8023fb2:	a381      	add	r3, pc, #516	; (adr r3, 80241b8 <_ZN5Motor5DriveEff+0x228>)
 8023fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fb8:	f7fc fc8e 	bl	80208d8 <__aeabi_dcmpgt>
 8023fbc:	4603      	mov	r3, r0
 8023fbe:	2b00      	cmp	r3, #0
 8023fc0:	d002      	beq.n	8023fc8 <_ZN5Motor5DriveEff+0x38>
 8023fc2:	4b83      	ldr	r3, [pc, #524]	; (80241d0 <_ZN5Motor5DriveEff+0x240>)
 8023fc4:	60bb      	str	r3, [r7, #8]
 8023fc6:	e00c      	b.n	8023fe2 <_ZN5Motor5DriveEff+0x52>
    else if(translation_ratio < -LIMIT_TRANS_DUTY) translation_ratio = -LIMIT_TRANS_DUTY;
 8023fc8:	68b8      	ldr	r0, [r7, #8]
 8023fca:	f7fc f99d 	bl	8020308 <__aeabi_f2d>
 8023fce:	a37c      	add	r3, pc, #496	; (adr r3, 80241c0 <_ZN5Motor5DriveEff+0x230>)
 8023fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fd4:	f7fc fc62 	bl	802089c <__aeabi_dcmplt>
 8023fd8:	4603      	mov	r3, r0
 8023fda:	2b00      	cmp	r3, #0
 8023fdc:	d001      	beq.n	8023fe2 <_ZN5Motor5DriveEff+0x52>
 8023fde:	4b7d      	ldr	r3, [pc, #500]	; (80241d4 <_ZN5Motor5DriveEff+0x244>)
 8023fe0:	60bb      	str	r3, [r7, #8]

    float sum = translation_ratio + rotation_ratio;
 8023fe2:	ed97 7a02 	vldr	s14, [r7, #8]
 8023fe6:	edd7 7a01 	vldr	s15, [r7, #4]
 8023fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023fee:	edc7 7a06 	vstr	s15, [r7, #24]
    float excess = 0;
 8023ff2:	f04f 0300 	mov.w	r3, #0
 8023ff6:	627b      	str	r3, [r7, #36]	; 0x24

    if(sum > 1.0)       excess = sum - 1.0;
 8023ff8:	edd7 7a06 	vldr	s15, [r7, #24]
 8023ffc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024000:	eef4 7ac7 	vcmpe.f32	s15, s14
 8024004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024008:	dd08      	ble.n	802401c <_ZN5Motor5DriveEff+0x8c>
 802400a:	edd7 7a06 	vldr	s15, [r7, #24]
 802400e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024012:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024016:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 802401a:	e010      	b.n	802403e <_ZN5Motor5DriveEff+0xae>
    else if(sum < -1.0) excess = sum + 1.0;
 802401c:	edd7 7a06 	vldr	s15, [r7, #24]
 8024020:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8024024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8024028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802402c:	d507      	bpl.n	802403e <_ZN5Motor5DriveEff+0xae>
 802402e:	edd7 7a06 	vldr	s15, [r7, #24]
 8024032:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024036:	ee77 7a87 	vadd.f32	s15, s15, s14
 802403a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    translation_ratio -= excess;
 802403e:	ed97 7a02 	vldr	s14, [r7, #8]
 8024042:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8024046:	ee77 7a67 	vsub.f32	s15, s14, s15
 802404a:	edc7 7a02 	vstr	s15, [r7, #8]

#ifdef DEBUG_MODE
    g_sum_raito = sum;
 802404e:	4a62      	ldr	r2, [pc, #392]	; (80241d8 <_ZN5Motor5DriveEff+0x248>)
 8024050:	69bb      	ldr	r3, [r7, #24]
 8024052:	6013      	str	r3, [r2, #0]
    g_excess_ratio = excess;
 8024054:	4a61      	ldr	r2, [pc, #388]	; (80241dc <_ZN5Motor5DriveEff+0x24c>)
 8024056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024058:	6013      	str	r3, [r2, #0]
    g_reduced_translation = translation_ratio;
 802405a:	4a61      	ldr	r2, [pc, #388]	; (80241e0 <_ZN5Motor5DriveEff+0x250>)
 802405c:	68bb      	ldr	r3, [r7, #8]
 802405e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    float duty_l = translation_ratio - rotation_ratio;
 8024060:	ed97 7a02 	vldr	s14, [r7, #8]
 8024064:	edd7 7a01 	vldr	s15, [r7, #4]
 8024068:	ee77 7a67 	vsub.f32	s15, s14, s15
 802406c:	edc7 7a08 	vstr	s15, [r7, #32]
    float duty_r = translation_ratio + rotation_ratio;
 8024070:	ed97 7a02 	vldr	s14, [r7, #8]
 8024074:	edd7 7a01 	vldr	s15, [r7, #4]
 8024078:	ee77 7a27 	vadd.f32	s15, s14, s15
 802407c:	edc7 7a07 	vstr	s15, [r7, #28]

    if(duty_l > 1.0)       duty_l =  1.0;
 8024080:	edd7 7a08 	vldr	s15, [r7, #32]
 8024084:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024088:	eef4 7ac7 	vcmpe.f32	s15, s14
 802408c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024090:	dd03      	ble.n	802409a <_ZN5Motor5DriveEff+0x10a>
 8024092:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8024096:	623b      	str	r3, [r7, #32]
 8024098:	e00a      	b.n	80240b0 <_ZN5Motor5DriveEff+0x120>
    else if(duty_l < -1.0) duty_l = -1.0;
 802409a:	edd7 7a08 	vldr	s15, [r7, #32]
 802409e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80240a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80240a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80240aa:	d501      	bpl.n	80240b0 <_ZN5Motor5DriveEff+0x120>
 80240ac:	4b4d      	ldr	r3, [pc, #308]	; (80241e4 <_ZN5Motor5DriveEff+0x254>)
 80240ae:	623b      	str	r3, [r7, #32]

    if(duty_r > 1.0)       duty_r =  1.0;
 80240b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80240b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80240b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80240bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80240c0:	dd03      	ble.n	80240ca <_ZN5Motor5DriveEff+0x13a>
 80240c2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80240c6:	61fb      	str	r3, [r7, #28]
 80240c8:	e00a      	b.n	80240e0 <_ZN5Motor5DriveEff+0x150>
    else if(duty_r < -1.0) duty_r = -1.0;
 80240ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80240ce:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80240d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80240d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80240da:	d501      	bpl.n	80240e0 <_ZN5Motor5DriveEff+0x150>
 80240dc:	4b41      	ldr	r3, [pc, #260]	; (80241e4 <_ZN5Motor5DriveEff+0x254>)
 80240de:	61fb      	str	r3, [r7, #28]

#ifdef DEBUG_MODE
    g_duty_l = duty_l;
 80240e0:	4a41      	ldr	r2, [pc, #260]	; (80241e8 <_ZN5Motor5DriveEff+0x258>)
 80240e2:	6a3b      	ldr	r3, [r7, #32]
 80240e4:	6013      	str	r3, [r2, #0]
    g_duty_r = duty_r;
 80240e6:	4a41      	ldr	r2, [pc, #260]	; (80241ec <_ZN5Motor5DriveEff+0x25c>)
 80240e8:	69fb      	ldr	r3, [r7, #28]
 80240ea:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    int16_t count_l = static_cast<int16_t>(COUNTER_PERIOD * duty_l);
 80240ec:	edd7 7a08 	vldr	s15, [r7, #32]
 80240f0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80241f0 <_ZN5Motor5DriveEff+0x260>
 80240f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80240f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80240fc:	ee17 3a90 	vmov	r3, s15
 8024100:	b21b      	sxth	r3, r3
 8024102:	82fb      	strh	r3, [r7, #22]
    int16_t count_r = static_cast<int16_t>(COUNTER_PERIOD * duty_r);
 8024104:	edd7 7a07 	vldr	s15, [r7, #28]
 8024108:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80241f0 <_ZN5Motor5DriveEff+0x260>
 802410c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024114:	ee17 3a90 	vmov	r3, s15
 8024118:	b21b      	sxth	r3, r3
 802411a:	82bb      	strh	r3, [r7, #20]

    if(count_l < 0) { count_l *= -1; BACKWARD_L; }
 802411c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8024120:	2b00      	cmp	r3, #0
 8024122:	da0d      	bge.n	8024140 <_ZN5Motor5DriveEff+0x1b0>
 8024124:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8024128:	b29b      	uxth	r3, r3
 802412a:	425b      	negs	r3, r3
 802412c:	b29b      	uxth	r3, r3
 802412e:	b21b      	sxth	r3, r3
 8024130:	82fb      	strh	r3, [r7, #22]
 8024132:	2200      	movs	r2, #0
 8024134:	f44f 7180 	mov.w	r1, #256	; 0x100
 8024138:	482e      	ldr	r0, [pc, #184]	; (80241f4 <_ZN5Motor5DriveEff+0x264>)
 802413a:	f003 febb 	bl	8027eb4 <HAL_GPIO_WritePin>
 802413e:	e009      	b.n	8024154 <_ZN5Motor5DriveEff+0x1c4>
    else if(count_l >= 0) FORWARD_L;
 8024140:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8024144:	2b00      	cmp	r3, #0
 8024146:	db05      	blt.n	8024154 <_ZN5Motor5DriveEff+0x1c4>
 8024148:	2201      	movs	r2, #1
 802414a:	f44f 7180 	mov.w	r1, #256	; 0x100
 802414e:	4829      	ldr	r0, [pc, #164]	; (80241f4 <_ZN5Motor5DriveEff+0x264>)
 8024150:	f003 feb0 	bl	8027eb4 <HAL_GPIO_WritePin>

    if(count_r < 0) { count_r *= -1; BACKWARD_R; }
 8024154:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8024158:	2b00      	cmp	r3, #0
 802415a:	da0d      	bge.n	8024178 <_ZN5Motor5DriveEff+0x1e8>
 802415c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8024160:	b29b      	uxth	r3, r3
 8024162:	425b      	negs	r3, r3
 8024164:	b29b      	uxth	r3, r3
 8024166:	b21b      	sxth	r3, r3
 8024168:	82bb      	strh	r3, [r7, #20]
 802416a:	2201      	movs	r2, #1
 802416c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8024170:	4820      	ldr	r0, [pc, #128]	; (80241f4 <_ZN5Motor5DriveEff+0x264>)
 8024172:	f003 fe9f 	bl	8027eb4 <HAL_GPIO_WritePin>
 8024176:	e009      	b.n	802418c <_ZN5Motor5DriveEff+0x1fc>
    else if(count_r >= 0) FORWARD_R;
 8024178:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 802417c:	2b00      	cmp	r3, #0
 802417e:	db05      	blt.n	802418c <_ZN5Motor5DriveEff+0x1fc>
 8024180:	2200      	movs	r2, #0
 8024182:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8024186:	481b      	ldr	r0, [pc, #108]	; (80241f4 <_ZN5Motor5DriveEff+0x264>)
 8024188:	f003 fe94 	bl	8027eb4 <HAL_GPIO_WritePin>

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, count_l);
 802418c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8024190:	4b19      	ldr	r3, [pc, #100]	; (80241f8 <_ZN5Motor5DriveEff+0x268>)
 8024192:	681b      	ldr	r3, [r3, #0]
 8024194:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, count_r);
 8024196:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 802419a:	4b17      	ldr	r3, [pc, #92]	; (80241f8 <_ZN5Motor5DriveEff+0x268>)
 802419c:	681b      	ldr	r3, [r3, #0]
 802419e:	641a      	str	r2, [r3, #64]	; 0x40

#ifdef DEBUG_MODE
    g_motor_compare_l = count_l;
 80241a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80241a4:	4b15      	ldr	r3, [pc, #84]	; (80241fc <_ZN5Motor5DriveEff+0x26c>)
 80241a6:	801a      	strh	r2, [r3, #0]
    g_motor_compare_r = count_r;
 80241a8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80241ac:	4b14      	ldr	r3, [pc, #80]	; (8024200 <_ZN5Motor5DriveEff+0x270>)
 80241ae:	801a      	strh	r2, [r3, #0]
#endif // DEBUG_MODE
 80241b0:	bf00      	nop
 80241b2:	3728      	adds	r7, #40	; 0x28
 80241b4:	46bd      	mov	sp, r7
 80241b6:	bd80      	pop	{r7, pc}
 80241b8:	cccccccd 	.word	0xcccccccd
 80241bc:	3feccccc 	.word	0x3feccccc
 80241c0:	cccccccd 	.word	0xcccccccd
 80241c4:	bfeccccc 	.word	0xbfeccccc
 80241c8:	200002b8 	.word	0x200002b8
 80241cc:	200002bc 	.word	0x200002bc
 80241d0:	3f666666 	.word	0x3f666666
 80241d4:	bf666666 	.word	0xbf666666
 80241d8:	200002c0 	.word	0x200002c0
 80241dc:	200002c4 	.word	0x200002c4
 80241e0:	200002c8 	.word	0x200002c8
 80241e4:	bf800000 	.word	0xbf800000
 80241e8:	200002cc 	.word	0x200002cc
 80241ec:	200002d0 	.word	0x200002d0
 80241f0:	44832000 	.word	0x44832000
 80241f4:	40020000 	.word	0x40020000
 80241f8:	20000910 	.word	0x20000910
 80241fc:	200002d4 	.word	0x200002d4
 8024200:	200002d6 	.word	0x200002d6

08024204 <_ZN12RotarySwitch5StateEv>:
#include "rotary_switch.hpp"

uint8_t RotarySwitch::State()
{
 8024204:	b580      	push	{r7, lr}
 8024206:	b084      	sub	sp, #16
 8024208:	af00      	add	r7, sp, #0
 802420a:	6078      	str	r0, [r7, #4]
    uint8_t switch_state = 0x00;
 802420c:	2300      	movs	r3, #0
 802420e:	73fb      	strb	r3, [r7, #15]

    if(PIN_1 == 0) switch_state |= 0x01;
 8024210:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8024214:	4821      	ldr	r0, [pc, #132]	; (802429c <_ZN12RotarySwitch5StateEv+0x98>)
 8024216:	f003 fe35 	bl	8027e84 <HAL_GPIO_ReadPin>
 802421a:	4603      	mov	r3, r0
 802421c:	2b00      	cmp	r3, #0
 802421e:	bf0c      	ite	eq
 8024220:	2301      	moveq	r3, #1
 8024222:	2300      	movne	r3, #0
 8024224:	b2db      	uxtb	r3, r3
 8024226:	2b00      	cmp	r3, #0
 8024228:	d003      	beq.n	8024232 <_ZN12RotarySwitch5StateEv+0x2e>
 802422a:	7bfb      	ldrb	r3, [r7, #15]
 802422c:	f043 0301 	orr.w	r3, r3, #1
 8024230:	73fb      	strb	r3, [r7, #15]
    if(PIN_2 == 0) switch_state |= 0x02;
 8024232:	2104      	movs	r1, #4
 8024234:	481a      	ldr	r0, [pc, #104]	; (80242a0 <_ZN12RotarySwitch5StateEv+0x9c>)
 8024236:	f003 fe25 	bl	8027e84 <HAL_GPIO_ReadPin>
 802423a:	4603      	mov	r3, r0
 802423c:	2b00      	cmp	r3, #0
 802423e:	bf0c      	ite	eq
 8024240:	2301      	moveq	r3, #1
 8024242:	2300      	movne	r3, #0
 8024244:	b2db      	uxtb	r3, r3
 8024246:	2b00      	cmp	r3, #0
 8024248:	d003      	beq.n	8024252 <_ZN12RotarySwitch5StateEv+0x4e>
 802424a:	7bfb      	ldrb	r3, [r7, #15]
 802424c:	f043 0302 	orr.w	r3, r3, #2
 8024250:	73fb      	strb	r3, [r7, #15]
    if(PIN_4 == 0) switch_state |= 0x04;
 8024252:	2102      	movs	r1, #2
 8024254:	4812      	ldr	r0, [pc, #72]	; (80242a0 <_ZN12RotarySwitch5StateEv+0x9c>)
 8024256:	f003 fe15 	bl	8027e84 <HAL_GPIO_ReadPin>
 802425a:	4603      	mov	r3, r0
 802425c:	2b00      	cmp	r3, #0
 802425e:	bf0c      	ite	eq
 8024260:	2301      	moveq	r3, #1
 8024262:	2300      	movne	r3, #0
 8024264:	b2db      	uxtb	r3, r3
 8024266:	2b00      	cmp	r3, #0
 8024268:	d003      	beq.n	8024272 <_ZN12RotarySwitch5StateEv+0x6e>
 802426a:	7bfb      	ldrb	r3, [r7, #15]
 802426c:	f043 0304 	orr.w	r3, r3, #4
 8024270:	73fb      	strb	r3, [r7, #15]
    if(PIN_8 == 0) switch_state |= 0x08;
 8024272:	2101      	movs	r1, #1
 8024274:	480a      	ldr	r0, [pc, #40]	; (80242a0 <_ZN12RotarySwitch5StateEv+0x9c>)
 8024276:	f003 fe05 	bl	8027e84 <HAL_GPIO_ReadPin>
 802427a:	4603      	mov	r3, r0
 802427c:	2b00      	cmp	r3, #0
 802427e:	bf0c      	ite	eq
 8024280:	2301      	moveq	r3, #1
 8024282:	2300      	movne	r3, #0
 8024284:	b2db      	uxtb	r3, r3
 8024286:	2b00      	cmp	r3, #0
 8024288:	d003      	beq.n	8024292 <_ZN12RotarySwitch5StateEv+0x8e>
 802428a:	7bfb      	ldrb	r3, [r7, #15]
 802428c:	f043 0308 	orr.w	r3, r3, #8
 8024290:	73fb      	strb	r3, [r7, #15]

    return switch_state;
 8024292:	7bfb      	ldrb	r3, [r7, #15]
 8024294:	4618      	mov	r0, r3
 8024296:	3710      	adds	r7, #16
 8024298:	46bd      	mov	sp, r7
 802429a:	bd80      	pop	{r7, pc}
 802429c:	40020000 	.word	0x40020000
 80242a0:	40020400 	.word	0x40020400

080242a4 <_ZN3RunC1EP7EncoderP5FlashP8Iim42652P3LedP10LineSensorP9LineTraceP6LoggerP5MotorP12RotarySwitchP10SideSensorP15VelocityControl>:
#include "run.hpp"
#include "declare_extern.h"

Run::Run(Encoder *encoder,
 80242a4:	b480      	push	{r7}
 80242a6:	b085      	sub	sp, #20
 80242a8:	af00      	add	r7, sp, #0
 80242aa:	60f8      	str	r0, [r7, #12]
 80242ac:	60b9      	str	r1, [r7, #8]
 80242ae:	607a      	str	r2, [r7, #4]
 80242b0:	603b      	str	r3, [r7, #0]
         ) : run_mode_(0)
           , switch_interval_wait_timer_(0)
           , switch_interval_wait_enable_(true)
           , switch_interval_led_enable_(true)
           , mode_complete_(true)
           , store_log_failed_(true)
 80242b2:	68fb      	ldr	r3, [r7, #12]
 80242b4:	2200      	movs	r2, #0
 80242b6:	701a      	strb	r2, [r3, #0]
 80242b8:	68fb      	ldr	r3, [r7, #12]
 80242ba:	2200      	movs	r2, #0
 80242bc:	705a      	strb	r2, [r3, #1]
 80242be:	68fb      	ldr	r3, [r7, #12]
 80242c0:	2201      	movs	r2, #1
 80242c2:	709a      	strb	r2, [r3, #2]
 80242c4:	68fb      	ldr	r3, [r7, #12]
 80242c6:	2201      	movs	r2, #1
 80242c8:	70da      	strb	r2, [r3, #3]
 80242ca:	68fb      	ldr	r3, [r7, #12]
 80242cc:	2201      	movs	r2, #1
 80242ce:	711a      	strb	r2, [r3, #4]
 80242d0:	68fb      	ldr	r3, [r7, #12]
 80242d2:	2201      	movs	r2, #1
 80242d4:	715a      	strb	r2, [r3, #5]
{
    encoder_          = encoder;
 80242d6:	68fb      	ldr	r3, [r7, #12]
 80242d8:	68ba      	ldr	r2, [r7, #8]
 80242da:	609a      	str	r2, [r3, #8]
    flash_            = flash;
 80242dc:	68fb      	ldr	r3, [r7, #12]
 80242de:	687a      	ldr	r2, [r7, #4]
 80242e0:	60da      	str	r2, [r3, #12]
    iim_42652_        = iim_42652;
 80242e2:	68fb      	ldr	r3, [r7, #12]
 80242e4:	683a      	ldr	r2, [r7, #0]
 80242e6:	611a      	str	r2, [r3, #16]
    led_              = led;
 80242e8:	68fb      	ldr	r3, [r7, #12]
 80242ea:	69ba      	ldr	r2, [r7, #24]
 80242ec:	615a      	str	r2, [r3, #20]
    line_sensor_      = line_sensor;
 80242ee:	68fb      	ldr	r3, [r7, #12]
 80242f0:	69fa      	ldr	r2, [r7, #28]
 80242f2:	619a      	str	r2, [r3, #24]
    line_trace_       = line_trace;
 80242f4:	68fb      	ldr	r3, [r7, #12]
 80242f6:	6a3a      	ldr	r2, [r7, #32]
 80242f8:	61da      	str	r2, [r3, #28]
    logger_           = logger;
 80242fa:	68fb      	ldr	r3, [r7, #12]
 80242fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80242fe:	621a      	str	r2, [r3, #32]
    motor_            = motor;
 8024300:	68fb      	ldr	r3, [r7, #12]
 8024302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8024304:	625a      	str	r2, [r3, #36]	; 0x24
    rotary_switch_    = rotary_switch;
 8024306:	68fb      	ldr	r3, [r7, #12]
 8024308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802430a:	629a      	str	r2, [r3, #40]	; 0x28
    side_sensor_      = side_sensor;
 802430c:	68fb      	ldr	r3, [r7, #12]
 802430e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8024310:	62da      	str	r2, [r3, #44]	; 0x2c
    velocity_control_ = velocity_control;
 8024312:	68fb      	ldr	r3, [r7, #12]
 8024314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024316:	631a      	str	r2, [r3, #48]	; 0x30
}
 8024318:	68fb      	ldr	r3, [r7, #12]
 802431a:	4618      	mov	r0, r3
 802431c:	3714      	adds	r7, #20
 802431e:	46bd      	mov	sp, r7
 8024320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024324:	4770      	bx	lr
	...

08024328 <_ZN3Run4InitEv>:

void Run::Init()
{
 8024328:	b580      	push	{r7, lr}
 802432a:	b084      	sub	sp, #16
 802432c:	af00      	add	r7, sp, #0
 802432e:	6078      	str	r0, [r7, #4]
    line_sensor_->Init();
 8024330:	687b      	ldr	r3, [r7, #4]
 8024332:	699b      	ldr	r3, [r3, #24]
 8024334:	4618      	mov	r0, r3
 8024336:	f7fd fc91 	bl	8021c5c <_ZN10LineSensor4InitEv>
    encoder_->Init();
 802433a:	687b      	ldr	r3, [r7, #4]
 802433c:	689b      	ldr	r3, [r3, #8]
 802433e:	4618      	mov	r0, r3
 8024340:	f7fc fd00 	bl	8020d44 <_ZN7Encoder4InitEv>
    motor_->Init();
 8024344:	687b      	ldr	r3, [r7, #4]
 8024346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024348:	4618      	mov	r0, r3
 802434a:	f7ff fdf1 	bl	8023f30 <_ZN5Motor4InitEv>
    uint8_t imu_init = iim_42652_->Init();
 802434e:	687b      	ldr	r3, [r7, #4]
 8024350:	691b      	ldr	r3, [r3, #16]
 8024352:	4618      	mov	r0, r3
 8024354:	f7fc ffd2 	bl	80212fc <_ZN8Iim426524InitEv>
 8024358:	4603      	mov	r3, r0
 802435a:	73bb      	strb	r3, [r7, #14]

    bool flash_erase = true;
 802435c:	2301      	movs	r3, #1
 802435e:	73fb      	strb	r3, [r7, #15]
    uint8_t switch_state = rotary_switch_->State();
 8024360:	687b      	ldr	r3, [r7, #4]
 8024362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024364:	4618      	mov	r0, r3
 8024366:	f7ff ff4d 	bl	8024204 <_ZN12RotarySwitch5StateEv>
 802436a:	4603      	mov	r3, r0
 802436c:	737b      	strb	r3, [r7, #13]
    if(switch_state == 0x0E)
 802436e:	7b7b      	ldrb	r3, [r7, #13]
 8024370:	2b0e      	cmp	r3, #14
 8024372:	d113      	bne.n	802439c <_ZN3Run4InitEv+0x74>
    {
        led_->Blink(3, 'R', 'X');
 8024374:	687b      	ldr	r3, [r7, #4]
 8024376:	6958      	ldr	r0, [r3, #20]
 8024378:	2358      	movs	r3, #88	; 0x58
 802437a:	2252      	movs	r2, #82	; 0x52
 802437c:	2103      	movs	r1, #3
 802437e:	f7fd fb61 	bl	8021a44 <_ZN3Led5BlinkEhcc>
        if(!flash_->Clear()) flash_erase = false;
 8024382:	687b      	ldr	r3, [r7, #4]
 8024384:	68db      	ldr	r3, [r3, #12]
 8024386:	4618      	mov	r0, r3
 8024388:	f7fc fdde 	bl	8020f48 <_ZN5Flash5ClearEv>
 802438c:	4603      	mov	r3, r0
 802438e:	f083 0301 	eor.w	r3, r3, #1
 8024392:	b2db      	uxtb	r3, r3
 8024394:	2b00      	cmp	r3, #0
 8024396:	d001      	beq.n	802439c <_ZN3Run4InitEv+0x74>
 8024398:	2300      	movs	r3, #0
 802439a:	73fb      	strb	r3, [r7, #15]
    }

#ifdef DEBUG_MODE
    g_imu_init = imu_init;
 802439c:	4a19      	ldr	r2, [pc, #100]	; (8024404 <_ZN3Run4InitEv+0xdc>)
 802439e:	7bbb      	ldrb	r3, [r7, #14]
 80243a0:	7013      	strb	r3, [r2, #0]
    g_flash_erase = flash_erase;
 80243a2:	7bfa      	ldrb	r2, [r7, #15]
 80243a4:	4b18      	ldr	r3, [pc, #96]	; (8024408 <_ZN3Run4InitEv+0xe0>)
 80243a6:	701a      	strb	r2, [r3, #0]
    g_switch_state = switch_state;
 80243a8:	4a18      	ldr	r2, [pc, #96]	; (802440c <_ZN3Run4InitEv+0xe4>)
 80243aa:	7b7b      	ldrb	r3, [r7, #13]
 80243ac:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(flash_erase && imu_init == 0x09)
 80243ae:	7bfb      	ldrb	r3, [r7, #15]
 80243b0:	2b00      	cmp	r3, #0
 80243b2:	d012      	beq.n	80243da <_ZN3Run4InitEv+0xb2>
 80243b4:	7bbb      	ldrb	r3, [r7, #14]
 80243b6:	2b09      	cmp	r3, #9
 80243b8:	d10f      	bne.n	80243da <_ZN3Run4InitEv+0xb2>
    {
        led_->Rainbow(1);
 80243ba:	687b      	ldr	r3, [r7, #4]
 80243bc:	695b      	ldr	r3, [r3, #20]
 80243be:	2101      	movs	r1, #1
 80243c0:	4618      	mov	r0, r3
 80243c2:	f7fd fb6c 	bl	8021a9e <_ZN3Led7RainbowEh>
        HAL_TIM_Base_Start_IT(&htim2);
 80243c6:	4812      	ldr	r0, [pc, #72]	; (8024410 <_ZN3Run4InitEv+0xe8>)
 80243c8:	f005 f86d 	bl	80294a6 <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start_IT(&htim6);
 80243cc:	4811      	ldr	r0, [pc, #68]	; (8024414 <_ZN3Run4InitEv+0xec>)
 80243ce:	f005 f86a 	bl	80294a6 <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start_IT(&htim7);
 80243d2:	4811      	ldr	r0, [pc, #68]	; (8024418 <_ZN3Run4InitEv+0xf0>)
 80243d4:	f005 f867 	bl	80294a6 <HAL_TIM_Base_Start_IT>
    }
    else if(flash_erase) led_->ColorOrder('Y');
    else led_->ColorOrder('R');
}
 80243d8:	e00f      	b.n	80243fa <_ZN3Run4InitEv+0xd2>
    else if(flash_erase) led_->ColorOrder('Y');
 80243da:	7bfb      	ldrb	r3, [r7, #15]
 80243dc:	2b00      	cmp	r3, #0
 80243de:	d006      	beq.n	80243ee <_ZN3Run4InitEv+0xc6>
 80243e0:	687b      	ldr	r3, [r7, #4]
 80243e2:	695b      	ldr	r3, [r3, #20]
 80243e4:	2159      	movs	r1, #89	; 0x59
 80243e6:	4618      	mov	r0, r3
 80243e8:	f7fd fa50 	bl	802188c <_ZN3Led10ColorOrderEc>
}
 80243ec:	e005      	b.n	80243fa <_ZN3Run4InitEv+0xd2>
    else led_->ColorOrder('R');
 80243ee:	687b      	ldr	r3, [r7, #4]
 80243f0:	695b      	ldr	r3, [r3, #20]
 80243f2:	2152      	movs	r1, #82	; 0x52
 80243f4:	4618      	mov	r0, r3
 80243f6:	f7fd fa49 	bl	802188c <_ZN3Led10ColorOrderEc>
}
 80243fa:	bf00      	nop
 80243fc:	3710      	adds	r7, #16
 80243fe:	46bd      	mov	sp, r7
 8024400:	bd80      	pop	{r7, pc}
 8024402:	bf00      	nop
 8024404:	20000271 	.word	0x20000271
 8024408:	2000031e 	.word	0x2000031e
 802440c:	2000031c 	.word	0x2000031c
 8024410:	20000950 	.word	0x20000950
 8024414:	200008d0 	.word	0x200008d0
 8024418:	200009d0 	.word	0x200009d0

0802441c <_ZN3Run6Timer7Ev>:

void Run::Timer7()
{
 802441c:	b580      	push	{r7, lr}
 802441e:	b082      	sub	sp, #8
 8024420:	af00      	add	r7, sp, #0
 8024422:	6078      	str	r0, [r7, #4]
    line_sensor_->StoreConsecutiveBuff();
 8024424:	687b      	ldr	r3, [r7, #4]
 8024426:	699b      	ldr	r3, [r3, #24]
 8024428:	4618      	mov	r0, r3
 802442a:	f7fd fc51 	bl	8021cd0 <_ZN10LineSensor20StoreConsecutiveBuffEv>
}
 802442e:	bf00      	nop
 8024430:	3708      	adds	r7, #8
 8024432:	46bd      	mov	sp, r7
 8024434:	bd80      	pop	{r7, pc}
	...

08024438 <_ZN3Run13UpdateRunModeEv>:

void Run::UpdateRunMode()
{
 8024438:	b580      	push	{r7, lr}
 802443a:	b084      	sub	sp, #16
 802443c:	af00      	add	r7, sp, #0
 802443e:	6078      	str	r0, [r7, #4]
    uint8_t switch_state = rotary_switch_->State();
 8024440:	687b      	ldr	r3, [r7, #4]
 8024442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024444:	4618      	mov	r0, r3
 8024446:	f7ff fedd 	bl	8024204 <_ZN12RotarySwitch5StateEv>
 802444a:	4603      	mov	r3, r0
 802444c:	73fb      	strb	r3, [r7, #15]
    static uint8_t pre_switch_state = switch_state;
 802444e:	4b53      	ldr	r3, [pc, #332]	; (802459c <_ZN3Run13UpdateRunModeEv+0x164>)
 8024450:	781b      	ldrb	r3, [r3, #0]
 8024452:	f3bf 8f5b 	dmb	ish
 8024456:	b2db      	uxtb	r3, r3
 8024458:	f003 0301 	and.w	r3, r3, #1
 802445c:	2b00      	cmp	r3, #0
 802445e:	bf0c      	ite	eq
 8024460:	2301      	moveq	r3, #1
 8024462:	2300      	movne	r3, #0
 8024464:	b2db      	uxtb	r3, r3
 8024466:	2b00      	cmp	r3, #0
 8024468:	d010      	beq.n	802448c <_ZN3Run13UpdateRunModeEv+0x54>
 802446a:	484c      	ldr	r0, [pc, #304]	; (802459c <_ZN3Run13UpdateRunModeEv+0x164>)
 802446c:	f006 f812 	bl	802a494 <__cxa_guard_acquire>
 8024470:	4603      	mov	r3, r0
 8024472:	2b00      	cmp	r3, #0
 8024474:	bf14      	ite	ne
 8024476:	2301      	movne	r3, #1
 8024478:	2300      	moveq	r3, #0
 802447a:	b2db      	uxtb	r3, r3
 802447c:	2b00      	cmp	r3, #0
 802447e:	d005      	beq.n	802448c <_ZN3Run13UpdateRunModeEv+0x54>
 8024480:	4a47      	ldr	r2, [pc, #284]	; (80245a0 <_ZN3Run13UpdateRunModeEv+0x168>)
 8024482:	7bfb      	ldrb	r3, [r7, #15]
 8024484:	7013      	strb	r3, [r2, #0]
 8024486:	4845      	ldr	r0, [pc, #276]	; (802459c <_ZN3Run13UpdateRunModeEv+0x164>)
 8024488:	f006 f810 	bl	802a4ac <__cxa_guard_release>
    static bool interval_enable = true;

#ifdef DEBUG_MODE
    g_switch_state = switch_state;
 802448c:	4a45      	ldr	r2, [pc, #276]	; (80245a4 <_ZN3Run13UpdateRunModeEv+0x16c>)
 802448e:	7bfb      	ldrb	r3, [r7, #15]
 8024490:	7013      	strb	r3, [r2, #0]
    g_interval_enable = interval_enable;
 8024492:	4b45      	ldr	r3, [pc, #276]	; (80245a8 <_ZN3Run13UpdateRunModeEv+0x170>)
 8024494:	781a      	ldrb	r2, [r3, #0]
 8024496:	4b45      	ldr	r3, [pc, #276]	; (80245ac <_ZN3Run13UpdateRunModeEv+0x174>)
 8024498:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

    if(switch_state != pre_switch_state)
 802449a:	4b41      	ldr	r3, [pc, #260]	; (80245a0 <_ZN3Run13UpdateRunModeEv+0x168>)
 802449c:	781b      	ldrb	r3, [r3, #0]
 802449e:	7bfa      	ldrb	r2, [r7, #15]
 80244a0:	429a      	cmp	r2, r3
 80244a2:	d00f      	beq.n	80244c4 <_ZN3Run13UpdateRunModeEv+0x8c>
    {
        SetRunMode(STANDBY);
 80244a4:	2100      	movs	r1, #0
 80244a6:	6878      	ldr	r0, [r7, #4]
 80244a8:	f000 f882 	bl	80245b0 <_ZN3Run10SetRunModeEh>
        WhenSwitchChange();
 80244ac:	6878      	ldr	r0, [r7, #4]
 80244ae:	f000 f88e 	bl	80245ce <_ZN3Run16WhenSwitchChangeEv>
        led_->ResetInterrupt();
 80244b2:	687b      	ldr	r3, [r7, #4]
 80244b4:	695b      	ldr	r3, [r3, #20]
 80244b6:	4618      	mov	r0, r3
 80244b8:	f7fd fb7f 	bl	8021bba <_ZN3Led14ResetInterruptEv>
        interval_enable = true;
 80244bc:	4b3a      	ldr	r3, [pc, #232]	; (80245a8 <_ZN3Run13UpdateRunModeEv+0x170>)
 80244be:	2201      	movs	r2, #1
 80244c0:	701a      	strb	r2, [r3, #0]
 80244c2:	e064      	b.n	802458e <_ZN3Run13UpdateRunModeEv+0x156>
    }
    else if(interval_enable)
 80244c4:	4b38      	ldr	r3, [pc, #224]	; (80245a8 <_ZN3Run13UpdateRunModeEv+0x170>)
 80244c6:	781b      	ldrb	r3, [r3, #0]
 80244c8:	2b00      	cmp	r3, #0
 80244ca:	d00d      	beq.n	80244e8 <_ZN3Run13UpdateRunModeEv+0xb0>
    {
        SetRunMode(STANDBY);
 80244cc:	2100      	movs	r1, #0
 80244ce:	6878      	ldr	r0, [r7, #4]
 80244d0:	f000 f86e 	bl	80245b0 <_ZN3Run10SetRunModeEh>
        interval_enable = SwitchChangeInterval(switch_state);
 80244d4:	7bfb      	ldrb	r3, [r7, #15]
 80244d6:	4619      	mov	r1, r3
 80244d8:	6878      	ldr	r0, [r7, #4]
 80244da:	f000 f88b 	bl	80245f4 <_ZN3Run20SwitchChangeIntervalEh>
 80244de:	4603      	mov	r3, r0
 80244e0:	461a      	mov	r2, r3
 80244e2:	4b31      	ldr	r3, [pc, #196]	; (80245a8 <_ZN3Run13UpdateRunModeEv+0x170>)
 80244e4:	701a      	strb	r2, [r3, #0]
 80244e6:	e052      	b.n	802458e <_ZN3Run13UpdateRunModeEv+0x156>
    }
    else
    {
        switch(switch_state)
 80244e8:	7bfb      	ldrb	r3, [r7, #15]
 80244ea:	3b01      	subs	r3, #1
 80244ec:	2b0e      	cmp	r3, #14
 80244ee:	d849      	bhi.n	8024584 <_ZN3Run13UpdateRunModeEv+0x14c>
 80244f0:	a201      	add	r2, pc, #4	; (adr r2, 80244f8 <_ZN3Run13UpdateRunModeEv+0xc0>)
 80244f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80244f6:	bf00      	nop
 80244f8:	0802455d 	.word	0x0802455d
 80244fc:	08024567 	.word	0x08024567
 8024500:	08024585 	.word	0x08024585
 8024504:	08024585 	.word	0x08024585
 8024508:	08024585 	.word	0x08024585
 802450c:	08024585 	.word	0x08024585
 8024510:	08024571 	.word	0x08024571
 8024514:	0802457b 	.word	0x0802457b
 8024518:	08024585 	.word	0x08024585
 802451c:	08024585 	.word	0x08024585
 8024520:	08024535 	.word	0x08024535
 8024524:	0802453f 	.word	0x0802453f
 8024528:	08024549 	.word	0x08024549
 802452c:	08024585 	.word	0x08024585
 8024530:	08024553 	.word	0x08024553
        {
#ifdef DEBUG_MODE
            case 0x0B: SetRunMode(VELOCITY_CONTROL_DEBUG); break;
 8024534:	210b      	movs	r1, #11
 8024536:	6878      	ldr	r0, [r7, #4]
 8024538:	f000 f83a 	bl	80245b0 <_ZN3Run10SetRunModeEh>
 802453c:	e027      	b.n	802458e <_ZN3Run13UpdateRunModeEv+0x156>
            case 0x0C: SetRunMode(LINE_TRACE_DEBUG); break;
 802453e:	210c      	movs	r1, #12
 8024540:	6878      	ldr	r0, [r7, #4]
 8024542:	f000 f835 	bl	80245b0 <_ZN3Run10SetRunModeEh>
 8024546:	e022      	b.n	802458e <_ZN3Run13UpdateRunModeEv+0x156>
            case 0x0D: SetRunMode(INITIAL_DEBUG); break;
 8024548:	210d      	movs	r1, #13
 802454a:	6878      	ldr	r0, [r7, #4]
 802454c:	f000 f830 	bl	80245b0 <_ZN3Run10SetRunModeEh>
 8024550:	e01d      	b.n	802458e <_ZN3Run13UpdateRunModeEv+0x156>
#endif // DEBUG_MODE

            case 0x0F: SetRunMode(READY); break;
 8024552:	210f      	movs	r1, #15
 8024554:	6878      	ldr	r0, [r7, #4]
 8024556:	f000 f82b 	bl	80245b0 <_ZN3Run10SetRunModeEh>
 802455a:	e018      	b.n	802458e <_ZN3Run13UpdateRunModeEv+0x156>
            case 0x01: SetRunMode(FIRST_RUN); break;
 802455c:	2101      	movs	r1, #1
 802455e:	6878      	ldr	r0, [r7, #4]
 8024560:	f000 f826 	bl	80245b0 <_ZN3Run10SetRunModeEh>
 8024564:	e013      	b.n	802458e <_ZN3Run13UpdateRunModeEv+0x156>
            case 0x02: SetRunMode(SECOND_RUN); break;
 8024566:	2102      	movs	r1, #2
 8024568:	6878      	ldr	r0, [r7, #4]
 802456a:	f000 f821 	bl	80245b0 <_ZN3Run10SetRunModeEh>
 802456e:	e00e      	b.n	802458e <_ZN3Run13UpdateRunModeEv+0x156>
            case 0x07: SetRunMode(VELOCITY_CONTROL); break;
 8024570:	2107      	movs	r1, #7
 8024572:	6878      	ldr	r0, [r7, #4]
 8024574:	f000 f81c 	bl	80245b0 <_ZN3Run10SetRunModeEh>
 8024578:	e009      	b.n	802458e <_ZN3Run13UpdateRunModeEv+0x156>
            case 0x08: SetRunMode(LINE_TRACE); break;
 802457a:	2108      	movs	r1, #8
 802457c:	6878      	ldr	r0, [r7, #4]
 802457e:	f000 f817 	bl	80245b0 <_ZN3Run10SetRunModeEh>
 8024582:	e004      	b.n	802458e <_ZN3Run13UpdateRunModeEv+0x156>
            default:   SetRunMode(STANDBY); break;
 8024584:	2100      	movs	r1, #0
 8024586:	6878      	ldr	r0, [r7, #4]
 8024588:	f000 f812 	bl	80245b0 <_ZN3Run10SetRunModeEh>
 802458c:	bf00      	nop
        }
    }

    pre_switch_state = switch_state;
 802458e:	4a04      	ldr	r2, [pc, #16]	; (80245a0 <_ZN3Run13UpdateRunModeEv+0x168>)
 8024590:	7bfb      	ldrb	r3, [r7, #15]
 8024592:	7013      	strb	r3, [r2, #0]
}
 8024594:	bf00      	nop
 8024596:	3710      	adds	r7, #16
 8024598:	46bd      	mov	sp, r7
 802459a:	bd80      	pop	{r7, pc}
 802459c:	20000320 	.word	0x20000320
 80245a0:	2000031f 	.word	0x2000031f
 80245a4:	2000031c 	.word	0x2000031c
 80245a8:	20000011 	.word	0x20000011
 80245ac:	20000010 	.word	0x20000010

080245b0 <_ZN3Run10SetRunModeEh>:

void Run::SetRunMode(uint8_t mode)
{
 80245b0:	b480      	push	{r7}
 80245b2:	b083      	sub	sp, #12
 80245b4:	af00      	add	r7, sp, #0
 80245b6:	6078      	str	r0, [r7, #4]
 80245b8:	460b      	mov	r3, r1
 80245ba:	70fb      	strb	r3, [r7, #3]
    run_mode_ = mode;
 80245bc:	687b      	ldr	r3, [r7, #4]
 80245be:	78fa      	ldrb	r2, [r7, #3]
 80245c0:	701a      	strb	r2, [r3, #0]
}
 80245c2:	bf00      	nop
 80245c4:	370c      	adds	r7, #12
 80245c6:	46bd      	mov	sp, r7
 80245c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245cc:	4770      	bx	lr

080245ce <_ZN3Run16WhenSwitchChangeEv>:

void Run::WhenSwitchChange()
{
 80245ce:	b480      	push	{r7}
 80245d0:	b083      	sub	sp, #12
 80245d2:	af00      	add	r7, sp, #0
 80245d4:	6078      	str	r0, [r7, #4]
    switch_interval_led_enable_ = true;
 80245d6:	687b      	ldr	r3, [r7, #4]
 80245d8:	2201      	movs	r2, #1
 80245da:	70da      	strb	r2, [r3, #3]
    switch_interval_wait_enable_ = true;
 80245dc:	687b      	ldr	r3, [r7, #4]
 80245de:	2201      	movs	r2, #1
 80245e0:	709a      	strb	r2, [r3, #2]
    switch_interval_wait_timer_ = 0;
 80245e2:	687b      	ldr	r3, [r7, #4]
 80245e4:	2200      	movs	r2, #0
 80245e6:	705a      	strb	r2, [r3, #1]
}
 80245e8:	bf00      	nop
 80245ea:	370c      	adds	r7, #12
 80245ec:	46bd      	mov	sp, r7
 80245ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80245f2:	4770      	bx	lr

080245f4 <_ZN3Run20SwitchChangeIntervalEh>:

bool Run::SwitchChangeInterval(uint8_t switch_state)
{
 80245f4:	b580      	push	{r7, lr}
 80245f6:	b084      	sub	sp, #16
 80245f8:	af00      	add	r7, sp, #0
 80245fa:	6078      	str	r0, [r7, #4]
 80245fc:	460b      	mov	r3, r1
 80245fe:	70fb      	strb	r3, [r7, #3]
    uint8_t wait_timer = switch_interval_wait_timer_;
 8024600:	687b      	ldr	r3, [r7, #4]
 8024602:	785b      	ldrb	r3, [r3, #1]
 8024604:	73fb      	strb	r3, [r7, #15]
    bool wait_enable = switch_interval_wait_enable_;
 8024606:	687b      	ldr	r3, [r7, #4]
 8024608:	789b      	ldrb	r3, [r3, #2]
 802460a:	73bb      	strb	r3, [r7, #14]
    bool led_enable = switch_interval_led_enable_;
 802460c:	687b      	ldr	r3, [r7, #4]
 802460e:	78db      	ldrb	r3, [r3, #3]
 8024610:	737b      	strb	r3, [r7, #13]
    bool interval_continue = true;
 8024612:	2301      	movs	r3, #1
 8024614:	733b      	strb	r3, [r7, #12]

    if(led_enable)
 8024616:	7b7b      	ldrb	r3, [r7, #13]
 8024618:	2b00      	cmp	r3, #0
 802461a:	f000 8080 	beq.w	802471e <_ZN3Run20SwitchChangeIntervalEh+0x12a>
    {
        switch(switch_state)
 802461e:	78fb      	ldrb	r3, [r7, #3]
 8024620:	3b01      	subs	r3, #1
 8024622:	2b0e      	cmp	r3, #14
 8024624:	d870      	bhi.n	8024708 <_ZN3Run20SwitchChangeIntervalEh+0x114>
 8024626:	a201      	add	r2, pc, #4	; (adr r2, 802462c <_ZN3Run20SwitchChangeIntervalEh+0x38>)
 8024628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802462c:	080246b9 	.word	0x080246b9
 8024630:	080246cd 	.word	0x080246cd
 8024634:	08024709 	.word	0x08024709
 8024638:	08024709 	.word	0x08024709
 802463c:	08024709 	.word	0x08024709
 8024640:	08024709 	.word	0x08024709
 8024644:	080246e1 	.word	0x080246e1
 8024648:	080246f5 	.word	0x080246f5
 802464c:	08024709 	.word	0x08024709
 8024650:	08024709 	.word	0x08024709
 8024654:	08024669 	.word	0x08024669
 8024658:	0802467d 	.word	0x0802467d
 802465c:	08024691 	.word	0x08024691
 8024660:	08024709 	.word	0x08024709
 8024664:	080246a5 	.word	0x080246a5
        {
#ifdef DEBUG_MODE
            case 0x0B: led_enable = led_->BlinkInterrupt(3, 'G', 'B'); break;
 8024668:	687b      	ldr	r3, [r7, #4]
 802466a:	6958      	ldr	r0, [r3, #20]
 802466c:	2342      	movs	r3, #66	; 0x42
 802466e:	2247      	movs	r2, #71	; 0x47
 8024670:	2103      	movs	r1, #3
 8024672:	f7fd fa58 	bl	8021b26 <_ZN3Led14BlinkInterruptEhcc>
 8024676:	4603      	mov	r3, r0
 8024678:	737b      	strb	r3, [r7, #13]
 802467a:	e061      	b.n	8024740 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
            case 0x0C: led_enable = led_->BlinkInterrupt(3, 'G', 'Y'); break;
 802467c:	687b      	ldr	r3, [r7, #4]
 802467e:	6958      	ldr	r0, [r3, #20]
 8024680:	2359      	movs	r3, #89	; 0x59
 8024682:	2247      	movs	r2, #71	; 0x47
 8024684:	2103      	movs	r1, #3
 8024686:	f7fd fa4e 	bl	8021b26 <_ZN3Led14BlinkInterruptEhcc>
 802468a:	4603      	mov	r3, r0
 802468c:	737b      	strb	r3, [r7, #13]
 802468e:	e057      	b.n	8024740 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
            case 0x0D: led_enable = led_->BlinkInterrupt(3, 'G', 'X'); break;
 8024690:	687b      	ldr	r3, [r7, #4]
 8024692:	6958      	ldr	r0, [r3, #20]
 8024694:	2358      	movs	r3, #88	; 0x58
 8024696:	2247      	movs	r2, #71	; 0x47
 8024698:	2103      	movs	r1, #3
 802469a:	f7fd fa44 	bl	8021b26 <_ZN3Led14BlinkInterruptEhcc>
 802469e:	4603      	mov	r3, r0
 80246a0:	737b      	strb	r3, [r7, #13]
 80246a2:	e04d      	b.n	8024740 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
#endif // DEBUG_MODE

            case 0x0F: led_enable = led_->BlinkInterrupt(3, 'Y', 'X'); break;
 80246a4:	687b      	ldr	r3, [r7, #4]
 80246a6:	6958      	ldr	r0, [r3, #20]
 80246a8:	2358      	movs	r3, #88	; 0x58
 80246aa:	2259      	movs	r2, #89	; 0x59
 80246ac:	2103      	movs	r1, #3
 80246ae:	f7fd fa3a 	bl	8021b26 <_ZN3Led14BlinkInterruptEhcc>
 80246b2:	4603      	mov	r3, r0
 80246b4:	737b      	strb	r3, [r7, #13]
 80246b6:	e043      	b.n	8024740 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
            case 0x01: led_enable = led_->BlinkInterrupt(3, 'B', 'X'); break;
 80246b8:	687b      	ldr	r3, [r7, #4]
 80246ba:	6958      	ldr	r0, [r3, #20]
 80246bc:	2358      	movs	r3, #88	; 0x58
 80246be:	2242      	movs	r2, #66	; 0x42
 80246c0:	2103      	movs	r1, #3
 80246c2:	f7fd fa30 	bl	8021b26 <_ZN3Led14BlinkInterruptEhcc>
 80246c6:	4603      	mov	r3, r0
 80246c8:	737b      	strb	r3, [r7, #13]
 80246ca:	e039      	b.n	8024740 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
            case 0x02: led_enable = led_->BlinkInterrupt(3, 'M', 'X'); break;
 80246cc:	687b      	ldr	r3, [r7, #4]
 80246ce:	6958      	ldr	r0, [r3, #20]
 80246d0:	2358      	movs	r3, #88	; 0x58
 80246d2:	224d      	movs	r2, #77	; 0x4d
 80246d4:	2103      	movs	r1, #3
 80246d6:	f7fd fa26 	bl	8021b26 <_ZN3Led14BlinkInterruptEhcc>
 80246da:	4603      	mov	r3, r0
 80246dc:	737b      	strb	r3, [r7, #13]
 80246de:	e02f      	b.n	8024740 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
            case 0x07: led_enable = led_->BlinkInterrupt(3, 'G', 'B'); break;
 80246e0:	687b      	ldr	r3, [r7, #4]
 80246e2:	6958      	ldr	r0, [r3, #20]
 80246e4:	2342      	movs	r3, #66	; 0x42
 80246e6:	2247      	movs	r2, #71	; 0x47
 80246e8:	2103      	movs	r1, #3
 80246ea:	f7fd fa1c 	bl	8021b26 <_ZN3Led14BlinkInterruptEhcc>
 80246ee:	4603      	mov	r3, r0
 80246f0:	737b      	strb	r3, [r7, #13]
 80246f2:	e025      	b.n	8024740 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
            case 0x08: led_enable = led_->BlinkInterrupt(3, 'G', 'Y'); break;
 80246f4:	687b      	ldr	r3, [r7, #4]
 80246f6:	6958      	ldr	r0, [r3, #20]
 80246f8:	2359      	movs	r3, #89	; 0x59
 80246fa:	2247      	movs	r2, #71	; 0x47
 80246fc:	2103      	movs	r1, #3
 80246fe:	f7fd fa12 	bl	8021b26 <_ZN3Led14BlinkInterruptEhcc>
 8024702:	4603      	mov	r3, r0
 8024704:	737b      	strb	r3, [r7, #13]
 8024706:	e01b      	b.n	8024740 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
            default:   led_enable = led_->BlinkInterrupt(3, 'X', 'W'); break;
 8024708:	687b      	ldr	r3, [r7, #4]
 802470a:	6958      	ldr	r0, [r3, #20]
 802470c:	2357      	movs	r3, #87	; 0x57
 802470e:	2258      	movs	r2, #88	; 0x58
 8024710:	2103      	movs	r1, #3
 8024712:	f7fd fa08 	bl	8021b26 <_ZN3Led14BlinkInterruptEhcc>
 8024716:	4603      	mov	r3, r0
 8024718:	737b      	strb	r3, [r7, #13]
 802471a:	bf00      	nop
 802471c:	e010      	b.n	8024740 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
        }
    }
    else if(wait_enable)
 802471e:	7bbb      	ldrb	r3, [r7, #14]
 8024720:	2b00      	cmp	r3, #0
 8024722:	d00b      	beq.n	802473c <_ZN3Run20SwitchChangeIntervalEh+0x148>
    {
        if(wait_timer < SWITCH_INTERVAL_WAIT_TIME)
 8024724:	7bfb      	ldrb	r3, [r7, #15]
 8024726:	2bc7      	cmp	r3, #199	; 0xc7
 8024728:	d805      	bhi.n	8024736 <_ZN3Run20SwitchChangeIntervalEh+0x142>
        {
            wait_timer++;
 802472a:	7bfb      	ldrb	r3, [r7, #15]
 802472c:	3301      	adds	r3, #1
 802472e:	73fb      	strb	r3, [r7, #15]
            wait_enable = true;
 8024730:	2301      	movs	r3, #1
 8024732:	73bb      	strb	r3, [r7, #14]
 8024734:	e004      	b.n	8024740 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
        }
        else wait_enable = false;
 8024736:	2300      	movs	r3, #0
 8024738:	73bb      	strb	r3, [r7, #14]
 802473a:	e001      	b.n	8024740 <_ZN3Run20SwitchChangeIntervalEh+0x14c>
    }
    else interval_continue = false;
 802473c:	2300      	movs	r3, #0
 802473e:	733b      	strb	r3, [r7, #12]
    
    switch_interval_led_enable_ = led_enable;
 8024740:	687b      	ldr	r3, [r7, #4]
 8024742:	7b7a      	ldrb	r2, [r7, #13]
 8024744:	70da      	strb	r2, [r3, #3]
    switch_interval_wait_enable_ = wait_enable;
 8024746:	687b      	ldr	r3, [r7, #4]
 8024748:	7bba      	ldrb	r2, [r7, #14]
 802474a:	709a      	strb	r2, [r3, #2]
    switch_interval_wait_timer_ = wait_timer;
 802474c:	687b      	ldr	r3, [r7, #4]
 802474e:	7bfa      	ldrb	r2, [r7, #15]
 8024750:	705a      	strb	r2, [r3, #1]

    return interval_continue;
 8024752:	7b3b      	ldrb	r3, [r7, #12]
}
 8024754:	4618      	mov	r0, r3
 8024756:	3710      	adds	r7, #16
 8024758:	46bd      	mov	sp, r7
 802475a:	bd80      	pop	{r7, pc}

0802475c <_ZN3Run13EmergencyStopEv>:

bool Run::EmergencyStop()
{
 802475c:	b580      	push	{r7, lr}
 802475e:	b084      	sub	sp, #16
 8024760:	af00      	add	r7, sp, #0
 8024762:	6078      	str	r0, [r7, #4]
    static uint8_t emergency_timer = 0;
    bool line_emergency = line_sensor_->GetEmergencyStopFlag();
 8024764:	687b      	ldr	r3, [r7, #4]
 8024766:	699b      	ldr	r3, [r3, #24]
 8024768:	4618      	mov	r0, r3
 802476a:	f7fd fcf7 	bl	802215c <_ZN10LineSensor20GetEmergencyStopFlagEv>
 802476e:	4603      	mov	r3, r0
 8024770:	73fb      	strb	r3, [r7, #15]

    if(emergency_timer >= EMERGENCY_STOP_TIME)
 8024772:	4b0e      	ldr	r3, [pc, #56]	; (80247ac <_ZN3Run13EmergencyStopEv+0x50>)
 8024774:	781b      	ldrb	r3, [r3, #0]
 8024776:	2b04      	cmp	r3, #4
 8024778:	d905      	bls.n	8024786 <_ZN3Run13EmergencyStopEv+0x2a>
    {
        SetRunMode(EMERGENCY);
 802477a:	210e      	movs	r1, #14
 802477c:	6878      	ldr	r0, [r7, #4]
 802477e:	f7ff ff17 	bl	80245b0 <_ZN3Run10SetRunModeEh>
        return true;
 8024782:	2301      	movs	r3, #1
 8024784:	e00d      	b.n	80247a2 <_ZN3Run13EmergencyStopEv+0x46>
    }
    else if(line_emergency) emergency_timer++;
 8024786:	7bfb      	ldrb	r3, [r7, #15]
 8024788:	2b00      	cmp	r3, #0
 802478a:	d006      	beq.n	802479a <_ZN3Run13EmergencyStopEv+0x3e>
 802478c:	4b07      	ldr	r3, [pc, #28]	; (80247ac <_ZN3Run13EmergencyStopEv+0x50>)
 802478e:	781b      	ldrb	r3, [r3, #0]
 8024790:	3301      	adds	r3, #1
 8024792:	b2da      	uxtb	r2, r3
 8024794:	4b05      	ldr	r3, [pc, #20]	; (80247ac <_ZN3Run13EmergencyStopEv+0x50>)
 8024796:	701a      	strb	r2, [r3, #0]
 8024798:	e002      	b.n	80247a0 <_ZN3Run13EmergencyStopEv+0x44>
    else emergency_timer = 0;
 802479a:	4b04      	ldr	r3, [pc, #16]	; (80247ac <_ZN3Run13EmergencyStopEv+0x50>)
 802479c:	2200      	movs	r2, #0
 802479e:	701a      	strb	r2, [r3, #0]

    return false;
 80247a0:	2300      	movs	r3, #0
}
 80247a2:	4618      	mov	r0, r3
 80247a4:	3710      	adds	r7, #16
 80247a6:	46bd      	mov	sp, r7
 80247a8:	bd80      	pop	{r7, pc}
 80247aa:	bf00      	nop
 80247ac:	20000324 	.word	0x20000324

080247b0 <_ZN3Run7RunModeEv>:

void Run::RunMode()
{
 80247b0:	b580      	push	{r7, lr}
 80247b2:	b082      	sub	sp, #8
 80247b4:	af00      	add	r7, sp, #0
 80247b6:	6078      	str	r0, [r7, #4]
    switch(run_mode_)
 80247b8:	687b      	ldr	r3, [r7, #4]
 80247ba:	781b      	ldrb	r3, [r3, #0]
 80247bc:	2b20      	cmp	r3, #32
 80247be:	d875      	bhi.n	80248ac <_ZN3Run7RunModeEv+0xfc>
 80247c0:	a201      	add	r2, pc, #4	; (adr r2, 80247c8 <_ZN3Run7RunModeEv+0x18>)
 80247c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80247c6:	bf00      	nop
 80247c8:	08024875 	.word	0x08024875
 80247cc:	0802487d 	.word	0x0802487d
 80247d0:	0802488d 	.word	0x0802488d
 80247d4:	080248ad 	.word	0x080248ad
 80247d8:	080248ad 	.word	0x080248ad
 80247dc:	080248ad 	.word	0x080248ad
 80247e0:	080248ad 	.word	0x080248ad
 80247e4:	0802489d 	.word	0x0802489d
 80247e8:	080248a5 	.word	0x080248a5
 80247ec:	080248ad 	.word	0x080248ad
 80247f0:	080248ad 	.word	0x080248ad
 80247f4:	0802484d 	.word	0x0802484d
 80247f8:	08024855 	.word	0x08024855
 80247fc:	0802485d 	.word	0x0802485d
 8024800:	08024865 	.word	0x08024865
 8024804:	0802486d 	.word	0x0802486d
 8024808:	08024885 	.word	0x08024885
 802480c:	080248ad 	.word	0x080248ad
 8024810:	080248ad 	.word	0x080248ad
 8024814:	080248ad 	.word	0x080248ad
 8024818:	080248ad 	.word	0x080248ad
 802481c:	080248ad 	.word	0x080248ad
 8024820:	080248ad 	.word	0x080248ad
 8024824:	080248ad 	.word	0x080248ad
 8024828:	080248ad 	.word	0x080248ad
 802482c:	080248ad 	.word	0x080248ad
 8024830:	080248ad 	.word	0x080248ad
 8024834:	080248ad 	.word	0x080248ad
 8024838:	080248ad 	.word	0x080248ad
 802483c:	080248ad 	.word	0x080248ad
 8024840:	080248ad 	.word	0x080248ad
 8024844:	080248ad 	.word	0x080248ad
 8024848:	08024895 	.word	0x08024895
    {
#ifdef DEBUG_MODE
        case VELOCITY_CONTROL_DEBUG: ModeVelocityControlDebug(); break;
 802484c:	6878      	ldr	r0, [r7, #4]
 802484e:	f000 fa05 	bl	8024c5c <_ZN3Run24ModeVelocityControlDebugEv>
 8024852:	e02f      	b.n	80248b4 <_ZN3Run7RunModeEv+0x104>
        case LINE_TRACE_DEBUG: ModeLineTraceDebug(); break;
 8024854:	6878      	ldr	r0, [r7, #4]
 8024856:	f000 fa2b 	bl	8024cb0 <_ZN3Run18ModeLineTraceDebugEv>
 802485a:	e02b      	b.n	80248b4 <_ZN3Run7RunModeEv+0x104>
        case INITIAL_DEBUG: ModeInitialDebug(); break;
 802485c:	6878      	ldr	r0, [r7, #4]
 802485e:	f000 fa47 	bl	8024cf0 <_ZN3Run16ModeInitialDebugEv>
 8024862:	e027      	b.n	80248b4 <_ZN3Run7RunModeEv+0x104>
#endif // DEBUG_MODE

        case EMERGENCY: ModeEmergency(); break;
 8024864:	6878      	ldr	r0, [r7, #4]
 8024866:	f000 f82d 	bl	80248c4 <_ZN3Run13ModeEmergencyEv>
 802486a:	e023      	b.n	80248b4 <_ZN3Run7RunModeEv+0x104>
        case READY: ModeReady(); break;
 802486c:	6878      	ldr	r0, [r7, #4]
 802486e:	f000 f83d 	bl	80248ec <_ZN3Run9ModeReadyEv>
 8024872:	e01f      	b.n	80248b4 <_ZN3Run7RunModeEv+0x104>
        case STANDBY: ModeStandby(); break;
 8024874:	6878      	ldr	r0, [r7, #4]
 8024876:	f000 f85b 	bl	8024930 <_ZN3Run11ModeStandbyEv>
 802487a:	e01b      	b.n	80248b4 <_ZN3Run7RunModeEv+0x104>
        case FIRST_RUN: ModeFirstRun(); break;
 802487c:	6878      	ldr	r0, [r7, #4]
 802487e:	f000 f86b 	bl	8024958 <_ZN3Run12ModeFirstRunEv>
 8024882:	e017      	b.n	80248b4 <_ZN3Run7RunModeEv+0x104>
        case FIRST_GOAL: ModeFirstGoal(); break;
 8024884:	6878      	ldr	r0, [r7, #4]
 8024886:	f000 f8d9 	bl	8024a3c <_ZN3Run13ModeFirstGoalEv>
 802488a:	e013      	b.n	80248b4 <_ZN3Run7RunModeEv+0x104>
        case SECOND_RUN: ModeSecondRun(); break;
 802488c:	6878      	ldr	r0, [r7, #4]
 802488e:	f000 f8f9 	bl	8024a84 <_ZN3Run13ModeSecondRunEv>
 8024892:	e00f      	b.n	80248b4 <_ZN3Run7RunModeEv+0x104>
        case SECOND_GOAL: ModeSecondGoal(); break;
 8024894:	6878      	ldr	r0, [r7, #4]
 8024896:	f000 f949 	bl	8024b2c <_ZN3Run14ModeSecondGoalEv>
 802489a:	e00b      	b.n	80248b4 <_ZN3Run7RunModeEv+0x104>
        case VELOCITY_CONTROL: ModeVelocityControl(); break;
 802489c:	6878      	ldr	r0, [r7, #4]
 802489e:	f000 f95f 	bl	8024b60 <_ZN3Run19ModeVelocityControlEv>
 80248a2:	e007      	b.n	80248b4 <_ZN3Run7RunModeEv+0x104>
        case LINE_TRACE: ModeLineTrace(); break;
 80248a4:	6878      	ldr	r0, [r7, #4]
 80248a6:	f000 f9a2 	bl	8024bee <_ZN3Run13ModeLineTraceEv>
 80248aa:	e003      	b.n	80248b4 <_ZN3Run7RunModeEv+0x104>
        default: ModeStandby(); break;
 80248ac:	6878      	ldr	r0, [r7, #4]
 80248ae:	f000 f83f 	bl	8024930 <_ZN3Run11ModeStandbyEv>
 80248b2:	bf00      	nop
    }

    mode_complete_ = true;
 80248b4:	687b      	ldr	r3, [r7, #4]
 80248b6:	2201      	movs	r2, #1
 80248b8:	711a      	strb	r2, [r3, #4]
}
 80248ba:	bf00      	nop
 80248bc:	3708      	adds	r7, #8
 80248be:	46bd      	mov	sp, r7
 80248c0:	bd80      	pop	{r7, pc}
 80248c2:	bf00      	nop

080248c4 <_ZN3Run13ModeEmergencyEv>:

void Run::ModeEmergency()
{
 80248c4:	b580      	push	{r7, lr}
 80248c6:	b082      	sub	sp, #8
 80248c8:	af00      	add	r7, sp, #0
 80248ca:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 80248cc:	687b      	ldr	r3, [r7, #4]
 80248ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80248d0:	eddf 0a05 	vldr	s1, [pc, #20]	; 80248e8 <_ZN3Run13ModeEmergencyEv+0x24>
 80248d4:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80248e8 <_ZN3Run13ModeEmergencyEv+0x24>
 80248d8:	4618      	mov	r0, r3
 80248da:	f7ff fb59 	bl	8023f90 <_ZN5Motor5DriveEff>
}
 80248de:	bf00      	nop
 80248e0:	3708      	adds	r7, #8
 80248e2:	46bd      	mov	sp, r7
 80248e4:	bd80      	pop	{r7, pc}
 80248e6:	bf00      	nop
 80248e8:	00000000 	.word	0x00000000

080248ec <_ZN3Run9ModeReadyEv>:

void Run::ModeReady()
{
 80248ec:	b580      	push	{r7, lr}
 80248ee:	b082      	sub	sp, #8
 80248f0:	af00      	add	r7, sp, #0
 80248f2:	6078      	str	r0, [r7, #4]
    line_sensor_->Update();
 80248f4:	687b      	ldr	r3, [r7, #4]
 80248f6:	699b      	ldr	r3, [r3, #24]
 80248f8:	4618      	mov	r0, r3
 80248fa:	f7fd faf1 	bl	8021ee0 <_ZN10LineSensor6UpdateEv>
    if(line_sensor_->CheckCalibration()) led_->ColorOrder('X');
 80248fe:	687b      	ldr	r3, [r7, #4]
 8024900:	699b      	ldr	r3, [r3, #24]
 8024902:	4618      	mov	r0, r3
 8024904:	f7fd fc38 	bl	8022178 <_ZN10LineSensor16CheckCalibrationEv>
 8024908:	4603      	mov	r3, r0
 802490a:	2b00      	cmp	r3, #0
 802490c:	d006      	beq.n	802491c <_ZN3Run9ModeReadyEv+0x30>
 802490e:	687b      	ldr	r3, [r7, #4]
 8024910:	695b      	ldr	r3, [r3, #20]
 8024912:	2158      	movs	r1, #88	; 0x58
 8024914:	4618      	mov	r0, r3
 8024916:	f7fc ffb9 	bl	802188c <_ZN3Led10ColorOrderEc>
    else led_->ColorOrder('R');
}
 802491a:	e005      	b.n	8024928 <_ZN3Run9ModeReadyEv+0x3c>
    else led_->ColorOrder('R');
 802491c:	687b      	ldr	r3, [r7, #4]
 802491e:	695b      	ldr	r3, [r3, #20]
 8024920:	2152      	movs	r1, #82	; 0x52
 8024922:	4618      	mov	r0, r3
 8024924:	f7fc ffb2 	bl	802188c <_ZN3Led10ColorOrderEc>
}
 8024928:	bf00      	nop
 802492a:	3708      	adds	r7, #8
 802492c:	46bd      	mov	sp, r7
 802492e:	bd80      	pop	{r7, pc}

08024930 <_ZN3Run11ModeStandbyEv>:

void Run::ModeStandby()
{
 8024930:	b580      	push	{r7, lr}
 8024932:	b082      	sub	sp, #8
 8024934:	af00      	add	r7, sp, #0
 8024936:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 8024938:	687b      	ldr	r3, [r7, #4]
 802493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802493c:	eddf 0a05 	vldr	s1, [pc, #20]	; 8024954 <_ZN3Run11ModeStandbyEv+0x24>
 8024940:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8024954 <_ZN3Run11ModeStandbyEv+0x24>
 8024944:	4618      	mov	r0, r3
 8024946:	f7ff fb23 	bl	8023f90 <_ZN5Motor5DriveEff>
}
 802494a:	bf00      	nop
 802494c:	3708      	adds	r7, #8
 802494e:	46bd      	mov	sp, r7
 8024950:	bd80      	pop	{r7, pc}
 8024952:	bf00      	nop
 8024954:	00000000 	.word	0x00000000

08024958 <_ZN3Run12ModeFirstRunEv>:

void Run::ModeFirstRun()
{
 8024958:	b580      	push	{r7, lr}
 802495a:	b086      	sub	sp, #24
 802495c:	af00      	add	r7, sp, #0
 802495e:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8024960:	687b      	ldr	r3, [r7, #4]
 8024962:	699b      	ldr	r3, [r3, #24]
 8024964:	4618      	mov	r0, r3
 8024966:	f7fd fabb 	bl	8021ee0 <_ZN10LineSensor6UpdateEv>
    encoder_->Update();
 802496a:	687b      	ldr	r3, [r7, #4]
 802496c:	689b      	ldr	r3, [r3, #8]
 802496e:	4618      	mov	r0, r3
 8024970:	f7fc fa1a 	bl	8020da8 <_ZN7Encoder6UpdateEv>
    iim_42652_->Update();
 8024974:	687b      	ldr	r3, [r7, #4]
 8024976:	691b      	ldr	r3, [r3, #16]
 8024978:	4618      	mov	r0, r3
 802497a:	f7fc fe49 	bl	8021610 <_ZN8Iim426526UpdateEv>
    side_sensor_->Update();
 802497e:	687b      	ldr	r3, [r7, #4]
 8024980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024982:	4618      	mov	r0, r3
 8024984:	f000 fc3e 	bl	8025204 <_ZN10SideSensor6UpdateEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 8024988:	6878      	ldr	r0, [r7, #4]
 802498a:	f7ff fee7 	bl	802475c <_ZN3Run13EmergencyStopEv>
 802498e:	4603      	mov	r3, r0
 8024990:	2b00      	cmp	r3, #0
 8024992:	d14e      	bne.n	8024a32 <_ZN3Run12ModeFirstRunEv+0xda>
    /* Logging */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 8024994:	687b      	ldr	r3, [r7, #4]
 8024996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024998:	4618      	mov	r0, r3
 802499a:	f000 fe02 	bl	80255a2 <_ZN10SideSensor18GetGoalMarkerCountEv>
 802499e:	4603      	mov	r3, r0
 80249a0:	75fb      	strb	r3, [r7, #23]
    if(goal_count == 1) logger_->Logging(mode_complete_);
 80249a2:	7dfb      	ldrb	r3, [r7, #23]
 80249a4:	2b01      	cmp	r3, #1
 80249a6:	d107      	bne.n	80249b8 <_ZN3Run12ModeFirstRunEv+0x60>
 80249a8:	687b      	ldr	r3, [r7, #4]
 80249aa:	6a1a      	ldr	r2, [r3, #32]
 80249ac:	687b      	ldr	r3, [r7, #4]
 80249ae:	791b      	ldrb	r3, [r3, #4]
 80249b0:	4619      	mov	r1, r3
 80249b2:	4610      	mov	r0, r2
 80249b4:	f7fd fe3c 	bl	8022630 <_ZN6Logger7LoggingEh>
    mode_complete_ = false;
 80249b8:	687b      	ldr	r3, [r7, #4]
 80249ba:	2200      	movs	r2, #0
 80249bc:	711a      	strb	r2, [r3, #4]
    uint8_t period_success = logger_->StorePeriodicLog();
 80249be:	687b      	ldr	r3, [r7, #4]
 80249c0:	6a1b      	ldr	r3, [r3, #32]
 80249c2:	4618      	mov	r0, r3
 80249c4:	f7fe f84a 	bl	8022a5c <_ZN6Logger16StorePeriodicLogEv>
 80249c8:	4603      	mov	r3, r0
 80249ca:	75bb      	strb	r3, [r7, #22]
    uint8_t accel_success = logger_->StoreAccelPositionLog();
 80249cc:	687b      	ldr	r3, [r7, #4]
 80249ce:	6a1b      	ldr	r3, [r3, #32]
 80249d0:	4618      	mov	r0, r3
 80249d2:	f7fe f8e1 	bl	8022b98 <_ZN6Logger21StoreAccelPositionLogEv>
 80249d6:	4603      	mov	r3, r0
 80249d8:	757b      	strb	r3, [r7, #21]
    if(period_success != 0 || !accel_success != 0) store_log_failed_ = true;
 80249da:	7dbb      	ldrb	r3, [r7, #22]
 80249dc:	2b00      	cmp	r3, #0
 80249de:	d102      	bne.n	80249e6 <_ZN3Run12ModeFirstRunEv+0x8e>
 80249e0:	7d7b      	ldrb	r3, [r7, #21]
 80249e2:	2b00      	cmp	r3, #0
 80249e4:	d102      	bne.n	80249ec <_ZN3Run12ModeFirstRunEv+0x94>
 80249e6:	687b      	ldr	r3, [r7, #4]
 80249e8:	2201      	movs	r2, #1
 80249ea:	715a      	strb	r2, [r3, #5]
    /* Motor control */
    float target_velocity = FirstTargetVelocity(goal_count);
 80249ec:	7dfb      	ldrb	r3, [r7, #23]
 80249ee:	4619      	mov	r1, r3
 80249f0:	6878      	ldr	r0, [r7, #4]
 80249f2:	f000 f989 	bl	8024d08 <_ZN3Run19FirstTargetVelocityEh>
 80249f6:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 80249fa:	687b      	ldr	r3, [r7, #4]
 80249fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80249fe:	ed97 0a04 	vldr	s0, [r7, #16]
 8024a02:	4618      	mov	r0, r3
 8024a04:	f001 fa95 	bl	8025f32 <_ZN15VelocityControl16DeterminePidGainEf>
 8024a08:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 8024a0c:	687b      	ldr	r3, [r7, #4]
 8024a0e:	69db      	ldr	r3, [r3, #28]
 8024a10:	ed97 0a04 	vldr	s0, [r7, #16]
 8024a14:	4618      	mov	r0, r3
 8024a16:	f7fd fc5b 	bl	80222d0 <_ZN9LineTrace16DeterminePidGainEf>
 8024a1a:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 8024a1e:	687b      	ldr	r3, [r7, #4]
 8024a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024a22:	edd7 0a02 	vldr	s1, [r7, #8]
 8024a26:	ed97 0a03 	vldr	s0, [r7, #12]
 8024a2a:	4618      	mov	r0, r3
 8024a2c:	f7ff fab0 	bl	8023f90 <_ZN5Motor5DriveEff>
 8024a30:	e000      	b.n	8024a34 <_ZN3Run12ModeFirstRunEv+0xdc>
    if(EmergencyStop()) return;
 8024a32:	bf00      	nop
}
 8024a34:	3718      	adds	r7, #24
 8024a36:	46bd      	mov	sp, r7
 8024a38:	bd80      	pop	{r7, pc}
	...

08024a3c <_ZN3Run13ModeFirstGoalEv>:

void Run::ModeFirstGoal()
{
 8024a3c:	b580      	push	{r7, lr}
 8024a3e:	b082      	sub	sp, #8
 8024a40:	af00      	add	r7, sp, #0
 8024a42:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 8024a44:	687b      	ldr	r3, [r7, #4]
 8024a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024a48:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8024a80 <_ZN3Run13ModeFirstGoalEv+0x44>
 8024a4c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8024a80 <_ZN3Run13ModeFirstGoalEv+0x44>
 8024a50:	4618      	mov	r0, r3
 8024a52:	f7ff fa9d 	bl	8023f90 <_ZN5Motor5DriveEff>
    if(store_log_failed_) led_->ColorOrder('R');
 8024a56:	687b      	ldr	r3, [r7, #4]
 8024a58:	795b      	ldrb	r3, [r3, #5]
 8024a5a:	2b00      	cmp	r3, #0
 8024a5c:	d006      	beq.n	8024a6c <_ZN3Run13ModeFirstGoalEv+0x30>
 8024a5e:	687b      	ldr	r3, [r7, #4]
 8024a60:	695b      	ldr	r3, [r3, #20]
 8024a62:	2152      	movs	r1, #82	; 0x52
 8024a64:	4618      	mov	r0, r3
 8024a66:	f7fc ff11 	bl	802188c <_ZN3Led10ColorOrderEc>
    else led_->ColorOrder('B');
}
 8024a6a:	e005      	b.n	8024a78 <_ZN3Run13ModeFirstGoalEv+0x3c>
    else led_->ColorOrder('B');
 8024a6c:	687b      	ldr	r3, [r7, #4]
 8024a6e:	695b      	ldr	r3, [r3, #20]
 8024a70:	2142      	movs	r1, #66	; 0x42
 8024a72:	4618      	mov	r0, r3
 8024a74:	f7fc ff0a 	bl	802188c <_ZN3Led10ColorOrderEc>
}
 8024a78:	bf00      	nop
 8024a7a:	3708      	adds	r7, #8
 8024a7c:	46bd      	mov	sp, r7
 8024a7e:	bd80      	pop	{r7, pc}
 8024a80:	00000000 	.word	0x00000000

08024a84 <_ZN3Run13ModeSecondRunEv>:

void Run::ModeSecondRun()
{
 8024a84:	b580      	push	{r7, lr}
 8024a86:	b086      	sub	sp, #24
 8024a88:	af00      	add	r7, sp, #0
 8024a8a:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8024a8c:	687b      	ldr	r3, [r7, #4]
 8024a8e:	699b      	ldr	r3, [r3, #24]
 8024a90:	4618      	mov	r0, r3
 8024a92:	f7fd fa25 	bl	8021ee0 <_ZN10LineSensor6UpdateEv>
    encoder_->Update();
 8024a96:	687b      	ldr	r3, [r7, #4]
 8024a98:	689b      	ldr	r3, [r3, #8]
 8024a9a:	4618      	mov	r0, r3
 8024a9c:	f7fc f984 	bl	8020da8 <_ZN7Encoder6UpdateEv>
    iim_42652_->Update();
 8024aa0:	687b      	ldr	r3, [r7, #4]
 8024aa2:	691b      	ldr	r3, [r3, #16]
 8024aa4:	4618      	mov	r0, r3
 8024aa6:	f7fc fdb3 	bl	8021610 <_ZN8Iim426526UpdateEv>
    side_sensor_->Update();
 8024aaa:	687b      	ldr	r3, [r7, #4]
 8024aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024aae:	4618      	mov	r0, r3
 8024ab0:	f000 fba8 	bl	8025204 <_ZN10SideSensor6UpdateEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 8024ab4:	6878      	ldr	r0, [r7, #4]
 8024ab6:	f7ff fe51 	bl	802475c <_ZN3Run13EmergencyStopEv>
 8024aba:	4603      	mov	r3, r0
 8024abc:	2b00      	cmp	r3, #0
 8024abe:	d131      	bne.n	8024b24 <_ZN3Run13ModeSecondRunEv+0xa0>
    /* Loading */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 8024ac0:	687b      	ldr	r3, [r7, #4]
 8024ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024ac4:	4618      	mov	r0, r3
 8024ac6:	f000 fd6c 	bl	80255a2 <_ZN10SideSensor18GetGoalMarkerCountEv>
 8024aca:	4603      	mov	r3, r0
 8024acc:	75fb      	strb	r3, [r7, #23]
    if(goal_count == 1) logger_->Loading();
 8024ace:	7dfb      	ldrb	r3, [r7, #23]
 8024ad0:	2b01      	cmp	r3, #1
 8024ad2:	d104      	bne.n	8024ade <_ZN3Run13ModeSecondRunEv+0x5a>
 8024ad4:	687b      	ldr	r3, [r7, #4]
 8024ad6:	6a1b      	ldr	r3, [r3, #32]
 8024ad8:	4618      	mov	r0, r3
 8024ada:	f7fe f8e9 	bl	8022cb0 <_ZN6Logger7LoadingEv>
    /* Motor control */
    float target_velocity = SecondTargetVelocity(goal_count);
 8024ade:	7dfb      	ldrb	r3, [r7, #23]
 8024ae0:	4619      	mov	r1, r3
 8024ae2:	6878      	ldr	r0, [r7, #4]
 8024ae4:	f000 f936 	bl	8024d54 <_ZN3Run20SecondTargetVelocityEh>
 8024ae8:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 8024aec:	687b      	ldr	r3, [r7, #4]
 8024aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024af0:	ed97 0a04 	vldr	s0, [r7, #16]
 8024af4:	4618      	mov	r0, r3
 8024af6:	f001 fa1c 	bl	8025f32 <_ZN15VelocityControl16DeterminePidGainEf>
 8024afa:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 8024afe:	687b      	ldr	r3, [r7, #4]
 8024b00:	69db      	ldr	r3, [r3, #28]
 8024b02:	ed97 0a04 	vldr	s0, [r7, #16]
 8024b06:	4618      	mov	r0, r3
 8024b08:	f7fd fbe2 	bl	80222d0 <_ZN9LineTrace16DeterminePidGainEf>
 8024b0c:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 8024b10:	687b      	ldr	r3, [r7, #4]
 8024b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024b14:	edd7 0a02 	vldr	s1, [r7, #8]
 8024b18:	ed97 0a03 	vldr	s0, [r7, #12]
 8024b1c:	4618      	mov	r0, r3
 8024b1e:	f7ff fa37 	bl	8023f90 <_ZN5Motor5DriveEff>
 8024b22:	e000      	b.n	8024b26 <_ZN3Run13ModeSecondRunEv+0xa2>
    if(EmergencyStop()) return;
 8024b24:	bf00      	nop
}
 8024b26:	3718      	adds	r7, #24
 8024b28:	46bd      	mov	sp, r7
 8024b2a:	bd80      	pop	{r7, pc}

08024b2c <_ZN3Run14ModeSecondGoalEv>:

void Run::ModeSecondGoal()
{
 8024b2c:	b580      	push	{r7, lr}
 8024b2e:	b082      	sub	sp, #8
 8024b30:	af00      	add	r7, sp, #0
 8024b32:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 8024b34:	687b      	ldr	r3, [r7, #4]
 8024b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024b38:	eddf 0a08 	vldr	s1, [pc, #32]	; 8024b5c <_ZN3Run14ModeSecondGoalEv+0x30>
 8024b3c:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8024b5c <_ZN3Run14ModeSecondGoalEv+0x30>
 8024b40:	4618      	mov	r0, r3
 8024b42:	f7ff fa25 	bl	8023f90 <_ZN5Motor5DriveEff>
    led_->ColorOrder('M');
 8024b46:	687b      	ldr	r3, [r7, #4]
 8024b48:	695b      	ldr	r3, [r3, #20]
 8024b4a:	214d      	movs	r1, #77	; 0x4d
 8024b4c:	4618      	mov	r0, r3
 8024b4e:	f7fc fe9d 	bl	802188c <_ZN3Led10ColorOrderEc>
}
 8024b52:	bf00      	nop
 8024b54:	3708      	adds	r7, #8
 8024b56:	46bd      	mov	sp, r7
 8024b58:	bd80      	pop	{r7, pc}
 8024b5a:	bf00      	nop
 8024b5c:	00000000 	.word	0x00000000

08024b60 <_ZN3Run19ModeVelocityControlEv>:

void Run::ModeVelocityControl()
{
 8024b60:	b580      	push	{r7, lr}
 8024b62:	b086      	sub	sp, #24
 8024b64:	af00      	add	r7, sp, #0
 8024b66:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8024b68:	687b      	ldr	r3, [r7, #4]
 8024b6a:	699b      	ldr	r3, [r3, #24]
 8024b6c:	4618      	mov	r0, r3
 8024b6e:	f7fd f9b7 	bl	8021ee0 <_ZN10LineSensor6UpdateEv>
    encoder_->Update();
 8024b72:	687b      	ldr	r3, [r7, #4]
 8024b74:	689b      	ldr	r3, [r3, #8]
 8024b76:	4618      	mov	r0, r3
 8024b78:	f7fc f916 	bl	8020da8 <_ZN7Encoder6UpdateEv>
    side_sensor_->Update();
 8024b7c:	687b      	ldr	r3, [r7, #4]
 8024b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024b80:	4618      	mov	r0, r3
 8024b82:	f000 fb3f 	bl	8025204 <_ZN10SideSensor6UpdateEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 8024b86:	6878      	ldr	r0, [r7, #4]
 8024b88:	f7ff fde8 	bl	802475c <_ZN3Run13EmergencyStopEv>
 8024b8c:	4603      	mov	r3, r0
 8024b8e:	2b00      	cmp	r3, #0
 8024b90:	d129      	bne.n	8024be6 <_ZN3Run19ModeVelocityControlEv+0x86>
    /* Motor control */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 8024b92:	687b      	ldr	r3, [r7, #4]
 8024b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024b96:	4618      	mov	r0, r3
 8024b98:	f000 fd03 	bl	80255a2 <_ZN10SideSensor18GetGoalMarkerCountEv>
 8024b9c:	4603      	mov	r3, r0
 8024b9e:	75fb      	strb	r3, [r7, #23]
    float target_velocity = VelocityControlTarget(goal_count);
 8024ba0:	7dfb      	ldrb	r3, [r7, #23]
 8024ba2:	4619      	mov	r1, r3
 8024ba4:	6878      	ldr	r0, [r7, #4]
 8024ba6:	f000 f8fd 	bl	8024da4 <_ZN3Run21VelocityControlTargetEh>
 8024baa:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 8024bae:	687b      	ldr	r3, [r7, #4]
 8024bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024bb2:	ed97 0a04 	vldr	s0, [r7, #16]
 8024bb6:	4618      	mov	r0, r3
 8024bb8:	f001 f9bb 	bl	8025f32 <_ZN15VelocityControl16DeterminePidGainEf>
 8024bbc:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 8024bc0:	687b      	ldr	r3, [r7, #4]
 8024bc2:	69db      	ldr	r3, [r3, #28]
 8024bc4:	ed97 0a04 	vldr	s0, [r7, #16]
 8024bc8:	4618      	mov	r0, r3
 8024bca:	f7fd fb81 	bl	80222d0 <_ZN9LineTrace16DeterminePidGainEf>
 8024bce:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 8024bd2:	687b      	ldr	r3, [r7, #4]
 8024bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024bd6:	edd7 0a02 	vldr	s1, [r7, #8]
 8024bda:	ed97 0a03 	vldr	s0, [r7, #12]
 8024bde:	4618      	mov	r0, r3
 8024be0:	f7ff f9d6 	bl	8023f90 <_ZN5Motor5DriveEff>
 8024be4:	e000      	b.n	8024be8 <_ZN3Run19ModeVelocityControlEv+0x88>
    if(EmergencyStop()) return;
 8024be6:	bf00      	nop
}
 8024be8:	3718      	adds	r7, #24
 8024bea:	46bd      	mov	sp, r7
 8024bec:	bd80      	pop	{r7, pc}

08024bee <_ZN3Run13ModeLineTraceEv>:

void Run::ModeLineTrace()
{
 8024bee:	b580      	push	{r7, lr}
 8024bf0:	b086      	sub	sp, #24
 8024bf2:	af00      	add	r7, sp, #0
 8024bf4:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8024bf6:	687b      	ldr	r3, [r7, #4]
 8024bf8:	699b      	ldr	r3, [r3, #24]
 8024bfa:	4618      	mov	r0, r3
 8024bfc:	f7fd f970 	bl	8021ee0 <_ZN10LineSensor6UpdateEv>
    side_sensor_->Update();
 8024c00:	687b      	ldr	r3, [r7, #4]
 8024c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024c04:	4618      	mov	r0, r3
 8024c06:	f000 fafd 	bl	8025204 <_ZN10SideSensor6UpdateEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 8024c0a:	6878      	ldr	r0, [r7, #4]
 8024c0c:	f7ff fda6 	bl	802475c <_ZN3Run13EmergencyStopEv>
 8024c10:	4603      	mov	r3, r0
 8024c12:	2b00      	cmp	r3, #0
 8024c14:	d11e      	bne.n	8024c54 <_ZN3Run13ModeLineTraceEv+0x66>
    /* Motor control */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 8024c16:	687b      	ldr	r3, [r7, #4]
 8024c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024c1a:	4618      	mov	r0, r3
 8024c1c:	f000 fcc1 	bl	80255a2 <_ZN10SideSensor18GetGoalMarkerCountEv>
 8024c20:	4603      	mov	r3, r0
 8024c22:	75fb      	strb	r3, [r7, #23]
    float trans_ratio = CommonDuty(goal_count);
 8024c24:	7dfb      	ldrb	r3, [r7, #23]
 8024c26:	4619      	mov	r1, r3
 8024c28:	6878      	ldr	r0, [r7, #4]
 8024c2a:	f000 f8e1 	bl	8024df0 <_ZN3Run10CommonDutyEh>
 8024c2e:	ed87 0a04 	vstr	s0, [r7, #16]
    float rotat_ratio = line_trace_->LineTraceOnly();
 8024c32:	687b      	ldr	r3, [r7, #4]
 8024c34:	69db      	ldr	r3, [r3, #28]
 8024c36:	4618      	mov	r0, r3
 8024c38:	f7fd fb2c 	bl	8022294 <_ZN9LineTrace13LineTraceOnlyEv>
 8024c3c:	ed87 0a03 	vstr	s0, [r7, #12]
    motor_->Drive(trans_ratio, rotat_ratio);
 8024c40:	687b      	ldr	r3, [r7, #4]
 8024c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024c44:	edd7 0a03 	vldr	s1, [r7, #12]
 8024c48:	ed97 0a04 	vldr	s0, [r7, #16]
 8024c4c:	4618      	mov	r0, r3
 8024c4e:	f7ff f99f 	bl	8023f90 <_ZN5Motor5DriveEff>
 8024c52:	e000      	b.n	8024c56 <_ZN3Run13ModeLineTraceEv+0x68>
    if(EmergencyStop()) return;
 8024c54:	bf00      	nop
}
 8024c56:	3718      	adds	r7, #24
 8024c58:	46bd      	mov	sp, r7
 8024c5a:	bd80      	pop	{r7, pc}

08024c5c <_ZN3Run24ModeVelocityControlDebugEv>:

#ifdef DEBUG_MODE
void Run::ModeVelocityControlDebug()
{
 8024c5c:	b580      	push	{r7, lr}
 8024c5e:	b084      	sub	sp, #16
 8024c60:	af00      	add	r7, sp, #0
 8024c62:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8024c64:	687b      	ldr	r3, [r7, #4]
 8024c66:	699b      	ldr	r3, [r3, #24]
 8024c68:	4618      	mov	r0, r3
 8024c6a:	f7fd f939 	bl	8021ee0 <_ZN10LineSensor6UpdateEv>
    encoder_->Update();
 8024c6e:	687b      	ldr	r3, [r7, #4]
 8024c70:	689b      	ldr	r3, [r3, #8]
 8024c72:	4618      	mov	r0, r3
 8024c74:	f7fc f898 	bl	8020da8 <_ZN7Encoder6UpdateEv>
    /* Motor control */
    float target_velocity = VELOCITY_CONTROL_TARGET;
 8024c78:	4b0b      	ldr	r3, [pc, #44]	; (8024ca8 <_ZN3Run24ModeVelocityControlDebugEv+0x4c>)
 8024c7a:	60fb      	str	r3, [r7, #12]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 8024c7c:	687b      	ldr	r3, [r7, #4]
 8024c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024c80:	ed97 0a03 	vldr	s0, [r7, #12]
 8024c84:	4618      	mov	r0, r3
 8024c86:	f001 f954 	bl	8025f32 <_ZN15VelocityControl16DeterminePidGainEf>
 8024c8a:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, 0);
 8024c8e:	687b      	ldr	r3, [r7, #4]
 8024c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024c92:	eddf 0a06 	vldr	s1, [pc, #24]	; 8024cac <_ZN3Run24ModeVelocityControlDebugEv+0x50>
 8024c96:	ed97 0a02 	vldr	s0, [r7, #8]
 8024c9a:	4618      	mov	r0, r3
 8024c9c:	f7ff f978 	bl	8023f90 <_ZN5Motor5DriveEff>
}
 8024ca0:	bf00      	nop
 8024ca2:	3710      	adds	r7, #16
 8024ca4:	46bd      	mov	sp, r7
 8024ca6:	bd80      	pop	{r7, pc}
 8024ca8:	3f99999a 	.word	0x3f99999a
 8024cac:	00000000 	.word	0x00000000

08024cb0 <_ZN3Run18ModeLineTraceDebugEv>:

void Run::ModeLineTraceDebug()
{
 8024cb0:	b580      	push	{r7, lr}
 8024cb2:	b084      	sub	sp, #16
 8024cb4:	af00      	add	r7, sp, #0
 8024cb6:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8024cb8:	687b      	ldr	r3, [r7, #4]
 8024cba:	699b      	ldr	r3, [r3, #24]
 8024cbc:	4618      	mov	r0, r3
 8024cbe:	f7fd f90f 	bl	8021ee0 <_ZN10LineSensor6UpdateEv>
    /* Motor control */
    float rotat_ratio = line_trace_->LineTraceOnly();
 8024cc2:	687b      	ldr	r3, [r7, #4]
 8024cc4:	69db      	ldr	r3, [r3, #28]
 8024cc6:	4618      	mov	r0, r3
 8024cc8:	f7fd fae4 	bl	8022294 <_ZN9LineTrace13LineTraceOnlyEv>
 8024ccc:	ed87 0a03 	vstr	s0, [r7, #12]
    motor_->Drive(0, rotat_ratio);
 8024cd0:	687b      	ldr	r3, [r7, #4]
 8024cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024cd4:	edd7 0a03 	vldr	s1, [r7, #12]
 8024cd8:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8024cec <_ZN3Run18ModeLineTraceDebugEv+0x3c>
 8024cdc:	4618      	mov	r0, r3
 8024cde:	f7ff f957 	bl	8023f90 <_ZN5Motor5DriveEff>
}
 8024ce2:	bf00      	nop
 8024ce4:	3710      	adds	r7, #16
 8024ce6:	46bd      	mov	sp, r7
 8024ce8:	bd80      	pop	{r7, pc}
 8024cea:	bf00      	nop
 8024cec:	00000000 	.word	0x00000000

08024cf0 <_ZN3Run16ModeInitialDebugEv>:

void Run::ModeInitialDebug()
{
 8024cf0:	b580      	push	{r7, lr}
 8024cf2:	b082      	sub	sp, #8
 8024cf4:	af00      	add	r7, sp, #0
 8024cf6:	6078      	str	r0, [r7, #4]
    InitialTest();
 8024cf8:	6878      	ldr	r0, [r7, #4]
 8024cfa:	f000 f89d 	bl	8024e38 <_ZN3Run11InitialTestEv>
}
 8024cfe:	bf00      	nop
 8024d00:	3708      	adds	r7, #8
 8024d02:	46bd      	mov	sp, r7
 8024d04:	bd80      	pop	{r7, pc}
	...

08024d08 <_ZN3Run19FirstTargetVelocityEh>:
#endif // DEBUG_MODE

float Run::FirstTargetVelocity(uint8_t goal_count)
{
 8024d08:	b480      	push	{r7}
 8024d0a:	b083      	sub	sp, #12
 8024d0c:	af00      	add	r7, sp, #0
 8024d0e:	6078      	str	r0, [r7, #4]
 8024d10:	460b      	mov	r3, r1
 8024d12:	70fb      	strb	r3, [r7, #3]
    static uint8_t slow_timer = 0;
    static uint8_t stop_timer = 0;

    if(goal_count == 1)
 8024d14:	78fb      	ldrb	r3, [r7, #3]
 8024d16:	2b01      	cmp	r3, #1
 8024d18:	d101      	bne.n	8024d1e <_ZN3Run19FirstTargetVelocityEh+0x16>
    {
        return EXPLORE_VELOCITY;
 8024d1a:	4b0c      	ldr	r3, [pc, #48]	; (8024d4c <_ZN3Run19FirstTargetVelocityEh+0x44>)
 8024d1c:	e00c      	b.n	8024d38 <_ZN3Run19FirstTargetVelocityEh+0x30>
    }
    else if(goal_count >= 2)
 8024d1e:	78fb      	ldrb	r3, [r7, #3]
 8024d20:	2b01      	cmp	r3, #1
 8024d22:	d908      	bls.n	8024d36 <_ZN3Run19FirstTargetVelocityEh+0x2e>
    {
        if(slow_timer < SLOW_DRIVE_TIME)
        {
            slow_timer++;
 8024d24:	4b0a      	ldr	r3, [pc, #40]	; (8024d50 <_ZN3Run19FirstTargetVelocityEh+0x48>)
 8024d26:	781b      	ldrb	r3, [r3, #0]
 8024d28:	3301      	adds	r3, #1
 8024d2a:	b2da      	uxtb	r2, r3
 8024d2c:	4b08      	ldr	r3, [pc, #32]	; (8024d50 <_ZN3Run19FirstTargetVelocityEh+0x48>)
 8024d2e:	701a      	strb	r2, [r3, #0]
            return SLOW_DRIVE_VELOCITY;
 8024d30:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8024d34:	e000      	b.n	8024d38 <_ZN3Run19FirstTargetVelocityEh+0x30>
        {
            SetRunMode(FIRST_GOAL);
            return 0;
        }
    }
    else return EXPLORE_VELOCITY;
 8024d36:	4b05      	ldr	r3, [pc, #20]	; (8024d4c <_ZN3Run19FirstTargetVelocityEh+0x44>)
 8024d38:	ee07 3a90 	vmov	s15, r3
}
 8024d3c:	eeb0 0a67 	vmov.f32	s0, s15
 8024d40:	370c      	adds	r7, #12
 8024d42:	46bd      	mov	sp, r7
 8024d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024d48:	4770      	bx	lr
 8024d4a:	bf00      	nop
 8024d4c:	3f99999a 	.word	0x3f99999a
 8024d50:	20000325 	.word	0x20000325

08024d54 <_ZN3Run20SecondTargetVelocityEh>:

float Run::SecondTargetVelocity(uint8_t goal_count)
{
 8024d54:	b580      	push	{r7, lr}
 8024d56:	b082      	sub	sp, #8
 8024d58:	af00      	add	r7, sp, #0
 8024d5a:	6078      	str	r0, [r7, #4]
 8024d5c:	460b      	mov	r3, r1
 8024d5e:	70fb      	strb	r3, [r7, #3]
    static uint8_t slow_timer = 0;
    static uint8_t stop_timer = 0;

    if(goal_count == 1)
 8024d60:	78fb      	ldrb	r3, [r7, #3]
 8024d62:	2b01      	cmp	r3, #1
 8024d64:	d107      	bne.n	8024d76 <_ZN3Run20SecondTargetVelocityEh+0x22>
    {
        return logger_->GetTargetVelocity();
 8024d66:	687b      	ldr	r3, [r7, #4]
 8024d68:	6a1b      	ldr	r3, [r3, #32]
 8024d6a:	4618      	mov	r0, r3
 8024d6c:	f7fe fa6a 	bl	8023244 <_ZN6Logger17GetTargetVelocityEv>
 8024d70:	eef0 7a40 	vmov.f32	s15, s0
 8024d74:	e00d      	b.n	8024d92 <_ZN3Run20SecondTargetVelocityEh+0x3e>
    }
    else if(goal_count >= 2)
 8024d76:	78fb      	ldrb	r3, [r7, #3]
 8024d78:	2b01      	cmp	r3, #1
 8024d7a:	d908      	bls.n	8024d8e <_ZN3Run20SecondTargetVelocityEh+0x3a>
    {
        if(slow_timer < SLOW_DRIVE_TIME)
        {
            slow_timer++;
 8024d7c:	4b07      	ldr	r3, [pc, #28]	; (8024d9c <_ZN3Run20SecondTargetVelocityEh+0x48>)
 8024d7e:	781b      	ldrb	r3, [r3, #0]
 8024d80:	3301      	adds	r3, #1
 8024d82:	b2da      	uxtb	r2, r3
 8024d84:	4b05      	ldr	r3, [pc, #20]	; (8024d9c <_ZN3Run20SecondTargetVelocityEh+0x48>)
 8024d86:	701a      	strb	r2, [r3, #0]
            return SLOW_DRIVE_VELOCITY;
 8024d88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8024d8c:	e001      	b.n	8024d92 <_ZN3Run20SecondTargetVelocityEh+0x3e>
        {
            SetRunMode(SECOND_GOAL);
            return 0;
        }
    }
    else return MIN_VELOCITY;
 8024d8e:	eddf 7a04 	vldr	s15, [pc, #16]	; 8024da0 <_ZN3Run20SecondTargetVelocityEh+0x4c>
}
 8024d92:	eeb0 0a67 	vmov.f32	s0, s15
 8024d96:	3708      	adds	r7, #8
 8024d98:	46bd      	mov	sp, r7
 8024d9a:	bd80      	pop	{r7, pc}
 8024d9c:	20000326 	.word	0x20000326
 8024da0:	3fa66666 	.word	0x3fa66666

08024da4 <_ZN3Run21VelocityControlTargetEh>:

float Run::VelocityControlTarget(uint8_t goal_count)
{
 8024da4:	b480      	push	{r7}
 8024da6:	b083      	sub	sp, #12
 8024da8:	af00      	add	r7, sp, #0
 8024daa:	6078      	str	r0, [r7, #4]
 8024dac:	460b      	mov	r3, r1
 8024dae:	70fb      	strb	r3, [r7, #3]
    static uint8_t slow_timer = 0;
    static uint8_t stop_timer = 0;

    if(goal_count == 1)
 8024db0:	78fb      	ldrb	r3, [r7, #3]
 8024db2:	2b01      	cmp	r3, #1
 8024db4:	d101      	bne.n	8024dba <_ZN3Run21VelocityControlTargetEh+0x16>
    {
        return VELOCITY_CONTROL_TARGET;
 8024db6:	4b0c      	ldr	r3, [pc, #48]	; (8024de8 <_ZN3Run21VelocityControlTargetEh+0x44>)
 8024db8:	e00c      	b.n	8024dd4 <_ZN3Run21VelocityControlTargetEh+0x30>
    }
    else if(goal_count >= 2)
 8024dba:	78fb      	ldrb	r3, [r7, #3]
 8024dbc:	2b01      	cmp	r3, #1
 8024dbe:	d908      	bls.n	8024dd2 <_ZN3Run21VelocityControlTargetEh+0x2e>
    {
        if(slow_timer < SLOW_DRIVE_TIME)
        {
            slow_timer++;
 8024dc0:	4b0a      	ldr	r3, [pc, #40]	; (8024dec <_ZN3Run21VelocityControlTargetEh+0x48>)
 8024dc2:	781b      	ldrb	r3, [r3, #0]
 8024dc4:	3301      	adds	r3, #1
 8024dc6:	b2da      	uxtb	r2, r3
 8024dc8:	4b08      	ldr	r3, [pc, #32]	; (8024dec <_ZN3Run21VelocityControlTargetEh+0x48>)
 8024dca:	701a      	strb	r2, [r3, #0]
            return SLOW_DRIVE_VELOCITY;
 8024dcc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8024dd0:	e000      	b.n	8024dd4 <_ZN3Run21VelocityControlTargetEh+0x30>
        {
            SetRunMode(STANDBY);
            return 0;
        }
    }
    else return VELOCITY_CONTROL_TARGET;
 8024dd2:	4b05      	ldr	r3, [pc, #20]	; (8024de8 <_ZN3Run21VelocityControlTargetEh+0x44>)
 8024dd4:	ee07 3a90 	vmov	s15, r3
}
 8024dd8:	eeb0 0a67 	vmov.f32	s0, s15
 8024ddc:	370c      	adds	r7, #12
 8024dde:	46bd      	mov	sp, r7
 8024de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024de4:	4770      	bx	lr
 8024de6:	bf00      	nop
 8024de8:	3f99999a 	.word	0x3f99999a
 8024dec:	20000327 	.word	0x20000327

08024df0 <_ZN3Run10CommonDutyEh>:

float Run::CommonDuty(uint8_t goal_count)
{
 8024df0:	b480      	push	{r7}
 8024df2:	b083      	sub	sp, #12
 8024df4:	af00      	add	r7, sp, #0
 8024df6:	6078      	str	r0, [r7, #4]
 8024df8:	460b      	mov	r3, r1
 8024dfa:	70fb      	strb	r3, [r7, #3]
    static uint8_t slow_timer = 0;
    static uint8_t stop_timer = 0;

    if(goal_count == 1)
 8024dfc:	78fb      	ldrb	r3, [r7, #3]
 8024dfe:	2b01      	cmp	r3, #1
 8024e00:	d101      	bne.n	8024e06 <_ZN3Run10CommonDutyEh+0x16>
    {
        return COMMON_DUTY;
 8024e02:	4b0b      	ldr	r3, [pc, #44]	; (8024e30 <_ZN3Run10CommonDutyEh+0x40>)
 8024e04:	e00b      	b.n	8024e1e <_ZN3Run10CommonDutyEh+0x2e>
    }
    else if(goal_count >= 2)
 8024e06:	78fb      	ldrb	r3, [r7, #3]
 8024e08:	2b01      	cmp	r3, #1
 8024e0a:	d907      	bls.n	8024e1c <_ZN3Run10CommonDutyEh+0x2c>
    {
        if(slow_timer < SLOW_DRIVE_TIME)
        {
            slow_timer++;
 8024e0c:	4b09      	ldr	r3, [pc, #36]	; (8024e34 <_ZN3Run10CommonDutyEh+0x44>)
 8024e0e:	781b      	ldrb	r3, [r3, #0]
 8024e10:	3301      	adds	r3, #1
 8024e12:	b2da      	uxtb	r2, r3
 8024e14:	4b07      	ldr	r3, [pc, #28]	; (8024e34 <_ZN3Run10CommonDutyEh+0x44>)
 8024e16:	701a      	strb	r2, [r3, #0]
            return SLOW_DRIVE_DUTY;
 8024e18:	4b05      	ldr	r3, [pc, #20]	; (8024e30 <_ZN3Run10CommonDutyEh+0x40>)
 8024e1a:	e000      	b.n	8024e1e <_ZN3Run10CommonDutyEh+0x2e>
        {
            SetRunMode(STANDBY);
            return 0;
        }
    }
    else return COMMON_DUTY;
 8024e1c:	4b04      	ldr	r3, [pc, #16]	; (8024e30 <_ZN3Run10CommonDutyEh+0x40>)
 8024e1e:	ee07 3a90 	vmov	s15, r3
}
 8024e22:	eeb0 0a67 	vmov.f32	s0, s15
 8024e26:	370c      	adds	r7, #12
 8024e28:	46bd      	mov	sp, r7
 8024e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e2e:	4770      	bx	lr
 8024e30:	3e4ccccd 	.word	0x3e4ccccd
 8024e34:	20000328 	.word	0x20000328

08024e38 <_ZN3Run11InitialTestEv>:
}
#endif // DEBUG_FLASH

#ifdef DEBUG_MODE
void Run::InitialTest()
{
 8024e38:	b580      	push	{r7, lr}
 8024e3a:	b082      	sub	sp, #8
 8024e3c:	af00      	add	r7, sp, #0
 8024e3e:	6078      	str	r0, [r7, #4]
    /* Line sensor */
    line_sensor_->Update();
 8024e40:	687b      	ldr	r3, [r7, #4]
 8024e42:	699b      	ldr	r3, [r3, #24]
 8024e44:	4618      	mov	r0, r3
 8024e46:	f7fd f84b 	bl	8021ee0 <_ZN10LineSensor6UpdateEv>
    line_sensor_->MonitorLineBuff();
 8024e4a:	687b      	ldr	r3, [r7, #4]
 8024e4c:	699b      	ldr	r3, [r3, #24]
 8024e4e:	4618      	mov	r0, r3
 8024e50:	f7fd f9ee 	bl	8022230 <_ZN10LineSensor15MonitorLineBuffEv>
    g_line_diff = line_sensor_->LeftRightDifference();
 8024e54:	687b      	ldr	r3, [r7, #4]
 8024e56:	699b      	ldr	r3, [r3, #24]
 8024e58:	4618      	mov	r0, r3
 8024e5a:	f7fd f929 	bl	80220b0 <_ZN10LineSensor19LeftRightDifferenceEv>
 8024e5e:	eef0 7a40 	vmov.f32	s15, s0
 8024e62:	4b71      	ldr	r3, [pc, #452]	; (8025028 <_ZN3Run11InitialTestEv+0x1f0>)
 8024e64:	edc3 7a00 	vstr	s15, [r3]
    g_line_emer = line_sensor_->GetEmergencyStopFlag();
 8024e68:	687b      	ldr	r3, [r7, #4]
 8024e6a:	699b      	ldr	r3, [r3, #24]
 8024e6c:	4618      	mov	r0, r3
 8024e6e:	f7fd f975 	bl	802215c <_ZN10LineSensor20GetEmergencyStopFlagEv>
 8024e72:	4603      	mov	r3, r0
 8024e74:	461a      	mov	r2, r3
 8024e76:	4b6d      	ldr	r3, [pc, #436]	; (802502c <_ZN3Run11InitialTestEv+0x1f4>)
 8024e78:	701a      	strb	r2, [r3, #0]
    g_line_calib = line_sensor_->CheckCalibration();
 8024e7a:	687b      	ldr	r3, [r7, #4]
 8024e7c:	699b      	ldr	r3, [r3, #24]
 8024e7e:	4618      	mov	r0, r3
 8024e80:	f7fd f97a 	bl	8022178 <_ZN10LineSensor16CheckCalibrationEv>
 8024e84:	4603      	mov	r3, r0
 8024e86:	461a      	mov	r2, r3
 8024e88:	4b69      	ldr	r3, [pc, #420]	; (8025030 <_ZN3Run11InitialTestEv+0x1f8>)
 8024e8a:	701a      	strb	r2, [r3, #0]

    /* Side seneor */
    side_sensor_->Update();
 8024e8c:	687b      	ldr	r3, [r7, #4]
 8024e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024e90:	4618      	mov	r0, r3
 8024e92:	f000 f9b7 	bl	8025204 <_ZN10SideSensor6UpdateEv>
    g_goal_cnt = side_sensor_->GetGoalMarkerCount();
 8024e96:	687b      	ldr	r3, [r7, #4]
 8024e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024e9a:	4618      	mov	r0, r3
 8024e9c:	f000 fb81 	bl	80255a2 <_ZN10SideSensor18GetGoalMarkerCountEv>
 8024ea0:	4603      	mov	r3, r0
 8024ea2:	461a      	mov	r2, r3
 8024ea4:	4b63      	ldr	r3, [pc, #396]	; (8025034 <_ZN3Run11InitialTestEv+0x1fc>)
 8024ea6:	701a      	strb	r2, [r3, #0]
    g_corner_cnt = side_sensor_->GetCornerMarkerCount();
 8024ea8:	687b      	ldr	r3, [r7, #4]
 8024eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024eac:	4618      	mov	r0, r3
 8024eae:	f000 fb84 	bl	80255ba <_ZN10SideSensor20GetCornerMarkerCountEv>
 8024eb2:	4603      	mov	r3, r0
 8024eb4:	461a      	mov	r2, r3
 8024eb6:	4b60      	ldr	r3, [pc, #384]	; (8025038 <_ZN3Run11InitialTestEv+0x200>)
 8024eb8:	701a      	strb	r2, [r3, #0]
    g_cross_cnt = side_sensor_->GetCrossLineCount();
 8024eba:	687b      	ldr	r3, [r7, #4]
 8024ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024ebe:	4618      	mov	r0, r3
 8024ec0:	f000 fb87 	bl	80255d2 <_ZN10SideSensor17GetCrossLineCountEv>
 8024ec4:	4603      	mov	r3, r0
 8024ec6:	461a      	mov	r2, r3
 8024ec8:	4b5c      	ldr	r3, [pc, #368]	; (802503c <_ZN3Run11InitialTestEv+0x204>)
 8024eca:	701a      	strb	r2, [r3, #0]

    /* IMU */
    iim_42652_->Update();
 8024ecc:	687b      	ldr	r3, [r7, #4]
 8024ece:	691b      	ldr	r3, [r3, #16]
 8024ed0:	4618      	mov	r0, r3
 8024ed2:	f7fc fb9d 	bl	8021610 <_ZN8Iim426526UpdateEv>
    g_deg_stack_z = iim_42652_->GetDegreeStackZ();
 8024ed6:	687b      	ldr	r3, [r7, #4]
 8024ed8:	691b      	ldr	r3, [r3, #16]
 8024eda:	4618      	mov	r0, r3
 8024edc:	f7fc fc00 	bl	80216e0 <_ZN8Iim4265215GetDegreeStackZEv>
 8024ee0:	eeb0 7a40 	vmov.f32	s14, s0
 8024ee4:	eef0 7a60 	vmov.f32	s15, s1
 8024ee8:	4b55      	ldr	r3, [pc, #340]	; (8025040 <_ZN3Run11InitialTestEv+0x208>)
 8024eea:	ed83 7b00 	vstr	d7, [r3]
    g_gyro_x_l = iim_42652_->GyroXLeft();
 8024eee:	687b      	ldr	r3, [r7, #4]
 8024ef0:	691b      	ldr	r3, [r3, #16]
 8024ef2:	4618      	mov	r0, r3
 8024ef4:	f7fc fc05 	bl	8021702 <_ZN8Iim426529GyroXLeftEv>
 8024ef8:	4603      	mov	r3, r0
 8024efa:	461a      	mov	r2, r3
 8024efc:	4b51      	ldr	r3, [pc, #324]	; (8025044 <_ZN3Run11InitialTestEv+0x20c>)
 8024efe:	801a      	strh	r2, [r3, #0]
    g_gyro_x_r = iim_42652_->GyroXRight();
 8024f00:	687b      	ldr	r3, [r7, #4]
 8024f02:	691b      	ldr	r3, [r3, #16]
 8024f04:	4618      	mov	r0, r3
 8024f06:	f7fc fc0b 	bl	8021720 <_ZN8Iim4265210GyroXRightEv>
 8024f0a:	4603      	mov	r3, r0
 8024f0c:	461a      	mov	r2, r3
 8024f0e:	4b4e      	ldr	r3, [pc, #312]	; (8025048 <_ZN3Run11InitialTestEv+0x210>)
 8024f10:	801a      	strh	r2, [r3, #0]
    g_gyro_y_l = iim_42652_->GyroYLeft();
 8024f12:	687b      	ldr	r3, [r7, #4]
 8024f14:	691b      	ldr	r3, [r3, #16]
 8024f16:	4618      	mov	r0, r3
 8024f18:	f7fc fc11 	bl	802173e <_ZN8Iim426529GyroYLeftEv>
 8024f1c:	4603      	mov	r3, r0
 8024f1e:	461a      	mov	r2, r3
 8024f20:	4b4a      	ldr	r3, [pc, #296]	; (802504c <_ZN3Run11InitialTestEv+0x214>)
 8024f22:	801a      	strh	r2, [r3, #0]
    g_gyro_y_r = iim_42652_->GyroYRight();
 8024f24:	687b      	ldr	r3, [r7, #4]
 8024f26:	691b      	ldr	r3, [r3, #16]
 8024f28:	4618      	mov	r0, r3
 8024f2a:	f7fc fc17 	bl	802175c <_ZN8Iim4265210GyroYRightEv>
 8024f2e:	4603      	mov	r3, r0
 8024f30:	461a      	mov	r2, r3
 8024f32:	4b47      	ldr	r3, [pc, #284]	; (8025050 <_ZN3Run11InitialTestEv+0x218>)
 8024f34:	801a      	strh	r2, [r3, #0]
    g_gyro_z_l = iim_42652_->GyroZLeft();
 8024f36:	687b      	ldr	r3, [r7, #4]
 8024f38:	691b      	ldr	r3, [r3, #16]
 8024f3a:	4618      	mov	r0, r3
 8024f3c:	f7fc fc1d 	bl	802177a <_ZN8Iim426529GyroZLeftEv>
 8024f40:	4603      	mov	r3, r0
 8024f42:	461a      	mov	r2, r3
 8024f44:	4b43      	ldr	r3, [pc, #268]	; (8025054 <_ZN3Run11InitialTestEv+0x21c>)
 8024f46:	801a      	strh	r2, [r3, #0]
    g_gyro_z_r = iim_42652_->GyroZRight();
 8024f48:	687b      	ldr	r3, [r7, #4]
 8024f4a:	691b      	ldr	r3, [r3, #16]
 8024f4c:	4618      	mov	r0, r3
 8024f4e:	f7fc fc23 	bl	8021798 <_ZN8Iim4265210GyroZRightEv>
 8024f52:	4603      	mov	r3, r0
 8024f54:	461a      	mov	r2, r3
 8024f56:	4b40      	ldr	r3, [pc, #256]	; (8025058 <_ZN3Run11InitialTestEv+0x220>)
 8024f58:	801a      	strh	r2, [r3, #0]
    g_accel_x_l = iim_42652_->AccelXLeft();
 8024f5a:	687b      	ldr	r3, [r7, #4]
 8024f5c:	691b      	ldr	r3, [r3, #16]
 8024f5e:	4618      	mov	r0, r3
 8024f60:	f7fc fc29 	bl	80217b6 <_ZN8Iim4265210AccelXLeftEv>
 8024f64:	4603      	mov	r3, r0
 8024f66:	461a      	mov	r2, r3
 8024f68:	4b3c      	ldr	r3, [pc, #240]	; (802505c <_ZN3Run11InitialTestEv+0x224>)
 8024f6a:	801a      	strh	r2, [r3, #0]
    g_accel_x_r = iim_42652_->AccelXRight();
 8024f6c:	687b      	ldr	r3, [r7, #4]
 8024f6e:	691b      	ldr	r3, [r3, #16]
 8024f70:	4618      	mov	r0, r3
 8024f72:	f7fc fc2f 	bl	80217d4 <_ZN8Iim4265211AccelXRightEv>
 8024f76:	4603      	mov	r3, r0
 8024f78:	461a      	mov	r2, r3
 8024f7a:	4b39      	ldr	r3, [pc, #228]	; (8025060 <_ZN3Run11InitialTestEv+0x228>)
 8024f7c:	801a      	strh	r2, [r3, #0]
    g_accel_y_l = iim_42652_->AccelYLeft();
 8024f7e:	687b      	ldr	r3, [r7, #4]
 8024f80:	691b      	ldr	r3, [r3, #16]
 8024f82:	4618      	mov	r0, r3
 8024f84:	f7fc fc35 	bl	80217f2 <_ZN8Iim4265210AccelYLeftEv>
 8024f88:	4603      	mov	r3, r0
 8024f8a:	461a      	mov	r2, r3
 8024f8c:	4b35      	ldr	r3, [pc, #212]	; (8025064 <_ZN3Run11InitialTestEv+0x22c>)
 8024f8e:	801a      	strh	r2, [r3, #0]
    g_accel_y_r = iim_42652_->AccelYRight();
 8024f90:	687b      	ldr	r3, [r7, #4]
 8024f92:	691b      	ldr	r3, [r3, #16]
 8024f94:	4618      	mov	r0, r3
 8024f96:	f7fc fc3b 	bl	8021810 <_ZN8Iim4265211AccelYRightEv>
 8024f9a:	4603      	mov	r3, r0
 8024f9c:	461a      	mov	r2, r3
 8024f9e:	4b32      	ldr	r3, [pc, #200]	; (8025068 <_ZN3Run11InitialTestEv+0x230>)
 8024fa0:	801a      	strh	r2, [r3, #0]
    g_accel_z_l = iim_42652_->AccelZLeft();
 8024fa2:	687b      	ldr	r3, [r7, #4]
 8024fa4:	691b      	ldr	r3, [r3, #16]
 8024fa6:	4618      	mov	r0, r3
 8024fa8:	f7fc fc41 	bl	802182e <_ZN8Iim4265210AccelZLeftEv>
 8024fac:	4603      	mov	r3, r0
 8024fae:	461a      	mov	r2, r3
 8024fb0:	4b2e      	ldr	r3, [pc, #184]	; (802506c <_ZN3Run11InitialTestEv+0x234>)
 8024fb2:	801a      	strh	r2, [r3, #0]
    g_accel_z_r = iim_42652_->AccelZRight();
 8024fb4:	687b      	ldr	r3, [r7, #4]
 8024fb6:	691b      	ldr	r3, [r3, #16]
 8024fb8:	4618      	mov	r0, r3
 8024fba:	f7fc fc47 	bl	802184c <_ZN8Iim4265211AccelZRightEv>
 8024fbe:	4603      	mov	r3, r0
 8024fc0:	461a      	mov	r2, r3
 8024fc2:	4b2b      	ldr	r3, [pc, #172]	; (8025070 <_ZN3Run11InitialTestEv+0x238>)
 8024fc4:	801a      	strh	r2, [r3, #0]

    /* Encoder */
    encoder_->Update();
 8024fc6:	687b      	ldr	r3, [r7, #4]
 8024fc8:	689b      	ldr	r3, [r3, #8]
 8024fca:	4618      	mov	r0, r3
 8024fcc:	f7fb feec 	bl	8020da8 <_ZN7Encoder6UpdateEv>
    g_distance = encoder_->GetDistance();
 8024fd0:	687b      	ldr	r3, [r7, #4]
 8024fd2:	689b      	ldr	r3, [r3, #8]
 8024fd4:	4618      	mov	r0, r3
 8024fd6:	f7fb ff79 	bl	8020ecc <_ZN7Encoder11GetDistanceEv>
 8024fda:	eef0 7a40 	vmov.f32	s15, s0
 8024fde:	4b25      	ldr	r3, [pc, #148]	; (8025074 <_ZN3Run11InitialTestEv+0x23c>)
 8024fe0:	edc3 7a00 	vstr	s15, [r3]
    g_distance_stack = encoder_->GetDistanceStack();
 8024fe4:	687b      	ldr	r3, [r7, #4]
 8024fe6:	689b      	ldr	r3, [r3, #8]
 8024fe8:	4618      	mov	r0, r3
 8024fea:	f7fb ff7e 	bl	8020eea <_ZN7Encoder16GetDistanceStackEv>
 8024fee:	eef0 7a40 	vmov.f32	s15, s0
 8024ff2:	4b21      	ldr	r3, [pc, #132]	; (8025078 <_ZN3Run11InitialTestEv+0x240>)
 8024ff4:	edc3 7a00 	vstr	s15, [r3]
    g_distance_diff = encoder_->AngularVelocity();
 8024ff8:	687b      	ldr	r3, [r7, #4]
 8024ffa:	689b      	ldr	r3, [r3, #8]
 8024ffc:	4618      	mov	r0, r3
 8024ffe:	f7fb ff83 	bl	8020f08 <_ZN7Encoder15AngularVelocityEv>
 8025002:	eef0 7a40 	vmov.f32	s15, s0
 8025006:	4b1d      	ldr	r3, [pc, #116]	; (802507c <_ZN3Run11InitialTestEv+0x244>)
 8025008:	edc3 7a00 	vstr	s15, [r3]

    /* Motor */
    motor_->Drive(INIT_DEBUG_MOTOR_DUTY, 0);
 802500c:	687b      	ldr	r3, [r7, #4]
 802500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025010:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8025080 <_ZN3Run11InitialTestEv+0x248>
 8025014:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8025080 <_ZN3Run11InitialTestEv+0x248>
 8025018:	4618      	mov	r0, r3
 802501a:	f7fe ffb9 	bl	8023f90 <_ZN5Motor5DriveEff>
}
 802501e:	bf00      	nop
 8025020:	3708      	adds	r7, #8
 8025022:	46bd      	mov	sp, r7
 8025024:	bd80      	pop	{r7, pc}
 8025026:	bf00      	nop
 8025028:	200000b8 	.word	0x200000b8
 802502c:	200000bc 	.word	0x200000bc
 8025030:	200000bd 	.word	0x200000bd
 8025034:	2000031d 	.word	0x2000031d
 8025038:	20000269 	.word	0x20000269
 802503c:	2000026a 	.word	0x2000026a
 8025040:	20000278 	.word	0x20000278
 8025044:	20000288 	.word	0x20000288
 8025048:	2000028a 	.word	0x2000028a
 802504c:	2000028c 	.word	0x2000028c
 8025050:	2000028e 	.word	0x2000028e
 8025054:	20000290 	.word	0x20000290
 8025058:	20000292 	.word	0x20000292
 802505c:	20000294 	.word	0x20000294
 8025060:	20000296 	.word	0x20000296
 8025064:	20000298 	.word	0x20000298
 8025068:	2000029a 	.word	0x2000029a
 802506c:	2000029c 	.word	0x2000029c
 8025070:	2000029e 	.word	0x2000029e
 8025074:	200002ac 	.word	0x200002ac
 8025078:	200002b0 	.word	0x200002b0
 802507c:	200002b4 	.word	0x200002b4
 8025080:	00000000 	.word	0x00000000

08025084 <_ZN10SideSensorC1Ev>:
#include "side_sensor.hpp"

SideSensor::SideSensor() : read_state_flags_(0)
 8025084:	b480      	push	{r7}
 8025086:	b083      	sub	sp, #12
 8025088:	af00      	add	r7, sp, #0
 802508a:	6078      	str	r0, [r7, #4]
                         , write_state_flags_(0)
                         , exception_flags_(0)
                         , master_count_(0)
                         , goal_marker_count_(0)
                         , corner_marker_count_(0)
                         , cross_line_count_(0) {}
 802508c:	687b      	ldr	r3, [r7, #4]
 802508e:	2200      	movs	r2, #0
 8025090:	701a      	strb	r2, [r3, #0]
 8025092:	687b      	ldr	r3, [r7, #4]
 8025094:	2200      	movs	r2, #0
 8025096:	705a      	strb	r2, [r3, #1]
 8025098:	687b      	ldr	r3, [r7, #4]
 802509a:	2200      	movs	r2, #0
 802509c:	709a      	strb	r2, [r3, #2]
 802509e:	687b      	ldr	r3, [r7, #4]
 80250a0:	2200      	movs	r2, #0
 80250a2:	70da      	strb	r2, [r3, #3]
 80250a4:	687b      	ldr	r3, [r7, #4]
 80250a6:	2200      	movs	r2, #0
 80250a8:	711a      	strb	r2, [r3, #4]
 80250aa:	687b      	ldr	r3, [r7, #4]
 80250ac:	2200      	movs	r2, #0
 80250ae:	715a      	strb	r2, [r3, #5]
 80250b0:	687b      	ldr	r3, [r7, #4]
 80250b2:	2200      	movs	r2, #0
 80250b4:	719a      	strb	r2, [r3, #6]
 80250b6:	687b      	ldr	r3, [r7, #4]
 80250b8:	4618      	mov	r0, r3
 80250ba:	370c      	adds	r7, #12
 80250bc:	46bd      	mov	sp, r7
 80250be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250c2:	4770      	bx	lr

080250c4 <_ZN10SideSensor11UpdateStateEv>:

void SideSensor::UpdateState()
{
 80250c4:	b580      	push	{r7, lr}
 80250c6:	b084      	sub	sp, #16
 80250c8:	af00      	add	r7, sp, #0
 80250ca:	6078      	str	r0, [r7, #4]
    uint8_t io_state = 0xFF; // Lower bits represent the positions of sensors.
 80250cc:	23ff      	movs	r3, #255	; 0xff
 80250ce:	73fb      	strb	r3, [r7, #15]

    if(IO_OUTSIDE_L == 0) io_state &= 0xF7; // 0111
 80250d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80250d4:	4849      	ldr	r0, [pc, #292]	; (80251fc <_ZN10SideSensor11UpdateStateEv+0x138>)
 80250d6:	f002 fed5 	bl	8027e84 <HAL_GPIO_ReadPin>
 80250da:	4603      	mov	r3, r0
 80250dc:	2b00      	cmp	r3, #0
 80250de:	bf0c      	ite	eq
 80250e0:	2301      	moveq	r3, #1
 80250e2:	2300      	movne	r3, #0
 80250e4:	b2db      	uxtb	r3, r3
 80250e6:	2b00      	cmp	r3, #0
 80250e8:	d003      	beq.n	80250f2 <_ZN10SideSensor11UpdateStateEv+0x2e>
 80250ea:	7bfb      	ldrb	r3, [r7, #15]
 80250ec:	f023 0308 	bic.w	r3, r3, #8
 80250f0:	73fb      	strb	r3, [r7, #15]
    if(IO_INSIDE_L == 0)  io_state &= 0xFB; // 1011
 80250f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80250f6:	4841      	ldr	r0, [pc, #260]	; (80251fc <_ZN10SideSensor11UpdateStateEv+0x138>)
 80250f8:	f002 fec4 	bl	8027e84 <HAL_GPIO_ReadPin>
 80250fc:	4603      	mov	r3, r0
 80250fe:	2b00      	cmp	r3, #0
 8025100:	bf0c      	ite	eq
 8025102:	2301      	moveq	r3, #1
 8025104:	2300      	movne	r3, #0
 8025106:	b2db      	uxtb	r3, r3
 8025108:	2b00      	cmp	r3, #0
 802510a:	d003      	beq.n	8025114 <_ZN10SideSensor11UpdateStateEv+0x50>
 802510c:	7bfb      	ldrb	r3, [r7, #15]
 802510e:	f023 0304 	bic.w	r3, r3, #4
 8025112:	73fb      	strb	r3, [r7, #15]
    if(IO_INSIDE_R == 0)  io_state &= 0xFD; // 1101
 8025114:	f44f 7180 	mov.w	r1, #256	; 0x100
 8025118:	4838      	ldr	r0, [pc, #224]	; (80251fc <_ZN10SideSensor11UpdateStateEv+0x138>)
 802511a:	f002 feb3 	bl	8027e84 <HAL_GPIO_ReadPin>
 802511e:	4603      	mov	r3, r0
 8025120:	2b00      	cmp	r3, #0
 8025122:	bf0c      	ite	eq
 8025124:	2301      	moveq	r3, #1
 8025126:	2300      	movne	r3, #0
 8025128:	b2db      	uxtb	r3, r3
 802512a:	2b00      	cmp	r3, #0
 802512c:	d003      	beq.n	8025136 <_ZN10SideSensor11UpdateStateEv+0x72>
 802512e:	7bfb      	ldrb	r3, [r7, #15]
 8025130:	f023 0302 	bic.w	r3, r3, #2
 8025134:	73fb      	strb	r3, [r7, #15]
    if(IO_OUTSIDE_R == 0) io_state &= 0xFE; // 1110
 8025136:	2104      	movs	r1, #4
 8025138:	4831      	ldr	r0, [pc, #196]	; (8025200 <_ZN10SideSensor11UpdateStateEv+0x13c>)
 802513a:	f002 fea3 	bl	8027e84 <HAL_GPIO_ReadPin>
 802513e:	4603      	mov	r3, r0
 8025140:	2b00      	cmp	r3, #0
 8025142:	bf0c      	ite	eq
 8025144:	2301      	moveq	r3, #1
 8025146:	2300      	movne	r3, #0
 8025148:	b2db      	uxtb	r3, r3
 802514a:	2b00      	cmp	r3, #0
 802514c:	d003      	beq.n	8025156 <_ZN10SideSensor11UpdateStateEv+0x92>
 802514e:	7bfb      	ldrb	r3, [r7, #15]
 8025150:	f023 0301 	bic.w	r3, r3, #1
 8025154:	73fb      	strb	r3, [r7, #15]

    read_state_flags_ <<= 4;
 8025156:	687b      	ldr	r3, [r7, #4]
 8025158:	781b      	ldrb	r3, [r3, #0]
 802515a:	011b      	lsls	r3, r3, #4
 802515c:	b2da      	uxtb	r2, r3
 802515e:	687b      	ldr	r3, [r7, #4]
 8025160:	701a      	strb	r2, [r3, #0]

    switch(io_state)
 8025162:	7bfb      	ldrb	r3, [r7, #15]
 8025164:	3bf0      	subs	r3, #240	; 0xf0
 8025166:	2b0f      	cmp	r3, #15
 8025168:	d842      	bhi.n	80251f0 <_ZN10SideSensor11UpdateStateEv+0x12c>
 802516a:	a201      	add	r2, pc, #4	; (adr r2, 8025170 <_ZN10SideSensor11UpdateStateEv+0xac>)
 802516c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025170:	080251e1 	.word	0x080251e1
 8025174:	080251e1 	.word	0x080251e1
 8025178:	080251e1 	.word	0x080251e1
 802517c:	080251d1 	.word	0x080251d1
 8025180:	080251e1 	.word	0x080251e1
 8025184:	080251f1 	.word	0x080251f1
 8025188:	080251e1 	.word	0x080251e1
 802518c:	080251d1 	.word	0x080251d1
 8025190:	080251e1 	.word	0x080251e1
 8025194:	080251e1 	.word	0x080251e1
 8025198:	080251f1 	.word	0x080251f1
 802519c:	080251d1 	.word	0x080251d1
 80251a0:	080251c1 	.word	0x080251c1
 80251a4:	080251f1 	.word	0x080251f1
 80251a8:	080251f1 	.word	0x080251f1
 80251ac:	080251b1 	.word	0x080251b1
    {
        case 0xFF: // 1111
            read_state_flags_ |= 0x08; break;
 80251b0:	687b      	ldr	r3, [r7, #4]
 80251b2:	781b      	ldrb	r3, [r3, #0]
 80251b4:	f043 0308 	orr.w	r3, r3, #8
 80251b8:	b2da      	uxtb	r2, r3
 80251ba:	687b      	ldr	r3, [r7, #4]
 80251bc:	701a      	strb	r2, [r3, #0]
 80251be:	e018      	b.n	80251f2 <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xFC: // 1100  If through goal, increase pattern.
            read_state_flags_ |= 0x04; break;
 80251c0:	687b      	ldr	r3, [r7, #4]
 80251c2:	781b      	ldrb	r3, [r3, #0]
 80251c4:	f043 0304 	orr.w	r3, r3, #4
 80251c8:	b2da      	uxtb	r2, r3
 80251ca:	687b      	ldr	r3, [r7, #4]
 80251cc:	701a      	strb	r2, [r3, #0]
 80251ce:	e010      	b.n	80251f2 <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xFB: // 1011
        case 0xF7: // 0111
        case 0xF3: // 0011
            read_state_flags_ |= 0x02; break;
 80251d0:	687b      	ldr	r3, [r7, #4]
 80251d2:	781b      	ldrb	r3, [r3, #0]
 80251d4:	f043 0302 	orr.w	r3, r3, #2
 80251d8:	b2da      	uxtb	r2, r3
 80251da:	687b      	ldr	r3, [r7, #4]
 80251dc:	701a      	strb	r2, [r3, #0]
 80251de:	e008      	b.n	80251f2 <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xF4: // 0100
        case 0xF0: // 0000
        case 0xF1: // 0001
        case 0xF8: // 1000
        case 0xF9: // 1001
            read_state_flags_ |= 0x01; break;
 80251e0:	687b      	ldr	r3, [r7, #4]
 80251e2:	781b      	ldrb	r3, [r3, #0]
 80251e4:	f043 0301 	orr.w	r3, r3, #1
 80251e8:	b2da      	uxtb	r2, r3
 80251ea:	687b      	ldr	r3, [r7, #4]
 80251ec:	701a      	strb	r2, [r3, #0]
 80251ee:	e000      	b.n	80251f2 <_ZN10SideSensor11UpdateStateEv+0x12e>
        default: break;
 80251f0:	bf00      	nop
    }
}
 80251f2:	bf00      	nop
 80251f4:	3710      	adds	r7, #16
 80251f6:	46bd      	mov	sp, r7
 80251f8:	bd80      	pop	{r7, pc}
 80251fa:	bf00      	nop
 80251fc:	40020400 	.word	0x40020400
 8025200:	40020c00 	.word	0x40020c00

08025204 <_ZN10SideSensor6UpdateEv>:

void SideSensor::Update()
{
 8025204:	b580      	push	{r7, lr}
 8025206:	b084      	sub	sp, #16
 8025208:	af00      	add	r7, sp, #0
 802520a:	6078      	str	r0, [r7, #4]
    uint8_t ignore_flag = exception_flags_ & 0x01;
 802520c:	687b      	ldr	r3, [r7, #4]
 802520e:	789b      	ldrb	r3, [r3, #2]
 8025210:	f003 0301 	and.w	r3, r3, #1
 8025214:	73fb      	strb	r3, [r7, #15]

    /* Ignore judgment */
    if(ignore_flag == 0x01)
 8025216:	7bfb      	ldrb	r3, [r7, #15]
 8025218:	2b01      	cmp	r3, #1
 802521a:	d111      	bne.n	8025240 <_ZN10SideSensor6UpdateEv+0x3c>
    {
        if(master_count_ < IGNORE_COUNT) master_count_++;
 802521c:	687b      	ldr	r3, [r7, #4]
 802521e:	78db      	ldrb	r3, [r3, #3]
 8025220:	2b04      	cmp	r3, #4
 8025222:	d806      	bhi.n	8025232 <_ZN10SideSensor6UpdateEv+0x2e>
 8025224:	687b      	ldr	r3, [r7, #4]
 8025226:	78db      	ldrb	r3, [r3, #3]
 8025228:	3301      	adds	r3, #1
 802522a:	b2da      	uxtb	r2, r3
 802522c:	687b      	ldr	r3, [r7, #4]
 802522e:	70da      	strb	r2, [r3, #3]
 8025230:	e031      	b.n	8025296 <_ZN10SideSensor6UpdateEv+0x92>
        else exception_flags_ >>= 1; 
 8025232:	687b      	ldr	r3, [r7, #4]
 8025234:	789b      	ldrb	r3, [r3, #2]
 8025236:	105b      	asrs	r3, r3, #1
 8025238:	b2da      	uxtb	r2, r3
 802523a:	687b      	ldr	r3, [r7, #4]
 802523c:	709a      	strb	r2, [r3, #2]
 802523e:	e02a      	b.n	8025296 <_ZN10SideSensor6UpdateEv+0x92>
    }
    else if(ignore_flag == 0x00)
 8025240:	7bfb      	ldrb	r3, [r7, #15]
 8025242:	2b00      	cmp	r3, #0
 8025244:	d127      	bne.n	8025296 <_ZN10SideSensor6UpdateEv+0x92>
    {
        UpdateState();
 8025246:	6878      	ldr	r0, [r7, #4]
 8025248:	f7ff ff3c 	bl	80250c4 <_ZN10SideSensor11UpdateStateEv>

        uint8_t now_state = read_state_flags_;
 802524c:	687b      	ldr	r3, [r7, #4]
 802524e:	781b      	ldrb	r3, [r3, #0]
 8025250:	73bb      	strb	r3, [r7, #14]
        uint8_t pre_state = (now_state << 4) | (now_state >> 4);
 8025252:	7bbb      	ldrb	r3, [r7, #14]
 8025254:	011b      	lsls	r3, r3, #4
 8025256:	b25a      	sxtb	r2, r3
 8025258:	7bbb      	ldrb	r3, [r7, #14]
 802525a:	111b      	asrs	r3, r3, #4
 802525c:	b25b      	sxtb	r3, r3
 802525e:	4313      	orrs	r3, r2
 8025260:	b25b      	sxtb	r3, r3
 8025262:	737b      	strb	r3, [r7, #13]

        if(pre_state != now_state)
 8025264:	7b7a      	ldrb	r2, [r7, #13]
 8025266:	7bbb      	ldrb	r3, [r7, #14]
 8025268:	429a      	cmp	r2, r3
 802526a:	d003      	beq.n	8025274 <_ZN10SideSensor6UpdateEv+0x70>
        {
            NoiseTolerance();
 802526c:	6878      	ldr	r0, [r7, #4]
 802526e:	f000 f819 	bl	80252a4 <_ZN10SideSensor14NoiseToleranceEv>
 8025272:	e010      	b.n	8025296 <_ZN10SideSensor6UpdateEv+0x92>
        }
        else if(pre_state == now_state)
 8025274:	7b7a      	ldrb	r2, [r7, #13]
 8025276:	7bbb      	ldrb	r3, [r7, #14]
 8025278:	429a      	cmp	r2, r3
 802527a:	d10c      	bne.n	8025296 <_ZN10SideSensor6UpdateEv+0x92>
        {
            exception_flags_ &= 0xF3; // noise_count = 0
 802527c:	687b      	ldr	r3, [r7, #4]
 802527e:	789b      	ldrb	r3, [r3, #2]
 8025280:	f023 030c 	bic.w	r3, r3, #12
 8025284:	b2da      	uxtb	r2, r3
 8025286:	687b      	ldr	r3, [r7, #4]
 8025288:	709a      	strb	r2, [r3, #2]
            ConfirmState();
 802528a:	6878      	ldr	r0, [r7, #4]
 802528c:	f000 f85a 	bl	8025344 <_ZN10SideSensor12ConfirmStateEv>
            CountUp();
 8025290:	6878      	ldr	r0, [r7, #4]
 8025292:	f000 f8c6 	bl	8025422 <_ZN10SideSensor7CountUpEv>
        }
    }

#ifdef DEBUG_MODE
    Monitor();
 8025296:	6878      	ldr	r0, [r7, #4]
 8025298:	f000 f9a8 	bl	80255ec <_ZN10SideSensor7MonitorEv>
#endif // DEBUG_MODE
}
 802529c:	bf00      	nop
 802529e:	3710      	adds	r7, #16
 80252a0:	46bd      	mov	sp, r7
 80252a2:	bd80      	pop	{r7, pc}

080252a4 <_ZN10SideSensor14NoiseToleranceEv>:

void SideSensor::NoiseTolerance()
{
 80252a4:	b580      	push	{r7, lr}
 80252a6:	b084      	sub	sp, #16
 80252a8:	af00      	add	r7, sp, #0
 80252aa:	6078      	str	r0, [r7, #4]
    uint8_t noise_count = (exception_flags_ & 0x0C) >> 2;
 80252ac:	687b      	ldr	r3, [r7, #4]
 80252ae:	789b      	ldrb	r3, [r3, #2]
 80252b0:	109b      	asrs	r3, r3, #2
 80252b2:	b2db      	uxtb	r3, r3
 80252b4:	f003 0303 	and.w	r3, r3, #3
 80252b8:	73fb      	strb	r3, [r7, #15]

    if(noise_count == 0x00)
 80252ba:	7bfb      	ldrb	r3, [r7, #15]
 80252bc:	2b00      	cmp	r3, #0
 80252be:	d11f      	bne.n	8025300 <_ZN10SideSensor14NoiseToleranceEv+0x5c>
    {
        /* Update before_noise_state */
        exception_flags_ = (exception_flags_ & 0x0F) | (read_state_flags_ & 0xF0);
 80252c0:	687b      	ldr	r3, [r7, #4]
 80252c2:	789b      	ldrb	r3, [r3, #2]
 80252c4:	f003 030f 	and.w	r3, r3, #15
 80252c8:	b2da      	uxtb	r2, r3
 80252ca:	687b      	ldr	r3, [r7, #4]
 80252cc:	781b      	ldrb	r3, [r3, #0]
 80252ce:	f023 030f 	bic.w	r3, r3, #15
 80252d2:	b2db      	uxtb	r3, r3
 80252d4:	4313      	orrs	r3, r2
 80252d6:	b2da      	uxtb	r2, r3
 80252d8:	687b      	ldr	r3, [r7, #4]
 80252da:	709a      	strb	r2, [r3, #2]
        /* Count up noise_count */
        noise_count++;
 80252dc:	7bfb      	ldrb	r3, [r7, #15]
 80252de:	3301      	adds	r3, #1
 80252e0:	73fb      	strb	r3, [r7, #15]
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
 80252e2:	687b      	ldr	r3, [r7, #4]
 80252e4:	789b      	ldrb	r3, [r3, #2]
 80252e6:	b25b      	sxtb	r3, r3
 80252e8:	f023 030c 	bic.w	r3, r3, #12
 80252ec:	b25a      	sxtb	r2, r3
 80252ee:	7bfb      	ldrb	r3, [r7, #15]
 80252f0:	009b      	lsls	r3, r3, #2
 80252f2:	b25b      	sxtb	r3, r3
 80252f4:	4313      	orrs	r3, r2
 80252f6:	b25b      	sxtb	r3, r3
 80252f8:	b2da      	uxtb	r2, r3
 80252fa:	687b      	ldr	r3, [r7, #4]
 80252fc:	709a      	strb	r2, [r3, #2]

        ConfirmState();
        CountUp();
    }
    else master_count_ = 0;
}
 80252fe:	e01d      	b.n	802533c <_ZN10SideSensor14NoiseToleranceEv+0x98>
    else if(noise_count == 0x01)
 8025300:	7bfb      	ldrb	r3, [r7, #15]
 8025302:	2b01      	cmp	r3, #1
 8025304:	d117      	bne.n	8025336 <_ZN10SideSensor14NoiseToleranceEv+0x92>
        noise_count++;
 8025306:	7bfb      	ldrb	r3, [r7, #15]
 8025308:	3301      	adds	r3, #1
 802530a:	73fb      	strb	r3, [r7, #15]
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
 802530c:	687b      	ldr	r3, [r7, #4]
 802530e:	789b      	ldrb	r3, [r3, #2]
 8025310:	b25b      	sxtb	r3, r3
 8025312:	f023 030c 	bic.w	r3, r3, #12
 8025316:	b25a      	sxtb	r2, r3
 8025318:	7bfb      	ldrb	r3, [r7, #15]
 802531a:	009b      	lsls	r3, r3, #2
 802531c:	b25b      	sxtb	r3, r3
 802531e:	4313      	orrs	r3, r2
 8025320:	b25b      	sxtb	r3, r3
 8025322:	b2da      	uxtb	r2, r3
 8025324:	687b      	ldr	r3, [r7, #4]
 8025326:	709a      	strb	r2, [r3, #2]
        ConfirmState();
 8025328:	6878      	ldr	r0, [r7, #4]
 802532a:	f000 f80b 	bl	8025344 <_ZN10SideSensor12ConfirmStateEv>
        CountUp();
 802532e:	6878      	ldr	r0, [r7, #4]
 8025330:	f000 f877 	bl	8025422 <_ZN10SideSensor7CountUpEv>
}
 8025334:	e002      	b.n	802533c <_ZN10SideSensor14NoiseToleranceEv+0x98>
    else master_count_ = 0;
 8025336:	687b      	ldr	r3, [r7, #4]
 8025338:	2200      	movs	r2, #0
 802533a:	70da      	strb	r2, [r3, #3]
}
 802533c:	bf00      	nop
 802533e:	3710      	adds	r7, #16
 8025340:	46bd      	mov	sp, r7
 8025342:	bd80      	pop	{r7, pc}

08025344 <_ZN10SideSensor12ConfirmStateEv>:

void SideSensor::ConfirmState()
{
 8025344:	b480      	push	{r7}
 8025346:	b085      	sub	sp, #20
 8025348:	af00      	add	r7, sp, #0
 802534a:	6078      	str	r0, [r7, #4]
    uint8_t before_noise_state = exception_flags_ >> 4;
 802534c:	687b      	ldr	r3, [r7, #4]
 802534e:	789b      	ldrb	r3, [r3, #2]
 8025350:	111b      	asrs	r3, r3, #4
 8025352:	73bb      	strb	r3, [r7, #14]
    uint8_t now_state = read_state_flags_ & 0x0F;
 8025354:	687b      	ldr	r3, [r7, #4]
 8025356:	781b      	ldrb	r3, [r3, #0]
 8025358:	f003 030f 	and.w	r3, r3, #15
 802535c:	737b      	strb	r3, [r7, #13]
    uint8_t count = master_count_;
 802535e:	687b      	ldr	r3, [r7, #4]
 8025360:	78db      	ldrb	r3, [r3, #3]
 8025362:	73fb      	strb	r3, [r7, #15]

    if(before_noise_state != now_state)
 8025364:	7bba      	ldrb	r2, [r7, #14]
 8025366:	7b7b      	ldrb	r3, [r7, #13]
 8025368:	429a      	cmp	r2, r3
 802536a:	d010      	beq.n	802538e <_ZN10SideSensor12ConfirmStateEv+0x4a>
    {
        /* Update before_noise_state */
        exception_flags_ = (exception_flags_ & 0x0F) | (now_state << 4);
 802536c:	687b      	ldr	r3, [r7, #4]
 802536e:	789b      	ldrb	r3, [r3, #2]
 8025370:	b25b      	sxtb	r3, r3
 8025372:	f003 030f 	and.w	r3, r3, #15
 8025376:	b25a      	sxtb	r2, r3
 8025378:	7b7b      	ldrb	r3, [r7, #13]
 802537a:	011b      	lsls	r3, r3, #4
 802537c:	b25b      	sxtb	r3, r3
 802537e:	4313      	orrs	r3, r2
 8025380:	b25b      	sxtb	r3, r3
 8025382:	b2da      	uxtb	r2, r3
 8025384:	687b      	ldr	r3, [r7, #4]
 8025386:	709a      	strb	r2, [r3, #2]
        count = 0;
 8025388:	2300      	movs	r3, #0
 802538a:	73fb      	strb	r3, [r7, #15]
 802538c:	e005      	b.n	802539a <_ZN10SideSensor12ConfirmStateEv+0x56>
    }
    else if(count < MAX_INTERRUPT_COUNT) count++;
 802538e:	7bfb      	ldrb	r3, [r7, #15]
 8025390:	2bf9      	cmp	r3, #249	; 0xf9
 8025392:	d802      	bhi.n	802539a <_ZN10SideSensor12ConfirmStateEv+0x56>
 8025394:	7bfb      	ldrb	r3, [r7, #15]
 8025396:	3301      	adds	r3, #1
 8025398:	73fb      	strb	r3, [r7, #15]

    master_count_ = count;
 802539a:	687b      	ldr	r3, [r7, #4]
 802539c:	7bfa      	ldrb	r2, [r7, #15]
 802539e:	70da      	strb	r2, [r3, #3]

    if(now_state == 0x08 && count >= BLACK_BLACK_COUNT)
 80253a0:	7b7b      	ldrb	r3, [r7, #13]
 80253a2:	2b08      	cmp	r3, #8
 80253a4:	d10d      	bne.n	80253c2 <_ZN10SideSensor12ConfirmStateEv+0x7e>
 80253a6:	7bfb      	ldrb	r3, [r7, #15]
 80253a8:	2b01      	cmp	r3, #1
 80253aa:	d90a      	bls.n	80253c2 <_ZN10SideSensor12ConfirmStateEv+0x7e>
    {
        write_state_flags_ = (write_state_flags_ & 0xF0) | 0x08;
 80253ac:	687b      	ldr	r3, [r7, #4]
 80253ae:	785b      	ldrb	r3, [r3, #1]
 80253b0:	f023 030f 	bic.w	r3, r3, #15
 80253b4:	b2db      	uxtb	r3, r3
 80253b6:	f043 0308 	orr.w	r3, r3, #8
 80253ba:	b2da      	uxtb	r2, r3
 80253bc:	687b      	ldr	r3, [r7, #4]
 80253be:	705a      	strb	r2, [r3, #1]
 80253c0:	e029      	b.n	8025416 <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x04 && count >= BLACK_WHITE_COUNT)
 80253c2:	7b7b      	ldrb	r3, [r7, #13]
 80253c4:	2b04      	cmp	r3, #4
 80253c6:	d10a      	bne.n	80253de <_ZN10SideSensor12ConfirmStateEv+0x9a>
 80253c8:	7bfb      	ldrb	r3, [r7, #15]
 80253ca:	2b00      	cmp	r3, #0
 80253cc:	d007      	beq.n	80253de <_ZN10SideSensor12ConfirmStateEv+0x9a>
    {
        write_state_flags_ |= 0x04;
 80253ce:	687b      	ldr	r3, [r7, #4]
 80253d0:	785b      	ldrb	r3, [r3, #1]
 80253d2:	f043 0304 	orr.w	r3, r3, #4
 80253d6:	b2da      	uxtb	r2, r3
 80253d8:	687b      	ldr	r3, [r7, #4]
 80253da:	705a      	strb	r2, [r3, #1]
 80253dc:	e01b      	b.n	8025416 <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x02 && count >= WHITE_BLACK_COUNT)
 80253de:	7b7b      	ldrb	r3, [r7, #13]
 80253e0:	2b02      	cmp	r3, #2
 80253e2:	d10a      	bne.n	80253fa <_ZN10SideSensor12ConfirmStateEv+0xb6>
 80253e4:	7bfb      	ldrb	r3, [r7, #15]
 80253e6:	2b00      	cmp	r3, #0
 80253e8:	d007      	beq.n	80253fa <_ZN10SideSensor12ConfirmStateEv+0xb6>
    {
        write_state_flags_ |= 0x02;
 80253ea:	687b      	ldr	r3, [r7, #4]
 80253ec:	785b      	ldrb	r3, [r3, #1]
 80253ee:	f043 0302 	orr.w	r3, r3, #2
 80253f2:	b2da      	uxtb	r2, r3
 80253f4:	687b      	ldr	r3, [r7, #4]
 80253f6:	705a      	strb	r2, [r3, #1]
 80253f8:	e00d      	b.n	8025416 <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x01 && count >= WHITE_WHITE_COUNT)
 80253fa:	7b7b      	ldrb	r3, [r7, #13]
 80253fc:	2b01      	cmp	r3, #1
 80253fe:	d10a      	bne.n	8025416 <_ZN10SideSensor12ConfirmStateEv+0xd2>
    {
        write_state_flags_ = (write_state_flags_ & 0xF8) | 0x01;
 8025400:	687b      	ldr	r3, [r7, #4]
 8025402:	785b      	ldrb	r3, [r3, #1]
 8025404:	f023 0307 	bic.w	r3, r3, #7
 8025408:	b2db      	uxtb	r3, r3
 802540a:	f043 0301 	orr.w	r3, r3, #1
 802540e:	b2da      	uxtb	r2, r3
 8025410:	687b      	ldr	r3, [r7, #4]
 8025412:	705a      	strb	r2, [r3, #1]
    }
}
 8025414:	e7ff      	b.n	8025416 <_ZN10SideSensor12ConfirmStateEv+0xd2>
 8025416:	bf00      	nop
 8025418:	3714      	adds	r7, #20
 802541a:	46bd      	mov	sp, r7
 802541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025420:	4770      	bx	lr

08025422 <_ZN10SideSensor7CountUpEv>:

void SideSensor::CountUp()
{
 8025422:	b480      	push	{r7}
 8025424:	b085      	sub	sp, #20
 8025426:	af00      	add	r7, sp, #0
 8025428:	6078      	str	r0, [r7, #4]
    uint8_t state = write_state_flags_;
 802542a:	687b      	ldr	r3, [r7, #4]
 802542c:	785b      	ldrb	r3, [r3, #1]
 802542e:	73fb      	strb	r3, [r7, #15]
    uint8_t black_flag   = (state & 0x08) >> 3;
 8025430:	7bfb      	ldrb	r3, [r7, #15]
 8025432:	10db      	asrs	r3, r3, #3
 8025434:	b2db      	uxtb	r3, r3
 8025436:	f003 0301 	and.w	r3, r3, #1
 802543a:	73bb      	strb	r3, [r7, #14]
    uint8_t goal_flag    = (state & 0x04) >> 2;
 802543c:	7bfb      	ldrb	r3, [r7, #15]
 802543e:	109b      	asrs	r3, r3, #2
 8025440:	b2db      	uxtb	r3, r3
 8025442:	f003 0301 	and.w	r3, r3, #1
 8025446:	737b      	strb	r3, [r7, #13]
    uint8_t corner_flag  = (state & 0x02) >> 1;
 8025448:	7bfb      	ldrb	r3, [r7, #15]
 802544a:	105b      	asrs	r3, r3, #1
 802544c:	b2db      	uxtb	r3, r3
 802544e:	f003 0301 	and.w	r3, r3, #1
 8025452:	733b      	strb	r3, [r7, #12]
    uint8_t cross_flag   =  state & 0x01;
 8025454:	7bfb      	ldrb	r3, [r7, #15]
 8025456:	f003 0301 	and.w	r3, r3, #1
 802545a:	72fb      	strb	r3, [r7, #11]
    uint8_t goal_reach   = (state & 0x80) >> 7;
 802545c:	7bfb      	ldrb	r3, [r7, #15]
 802545e:	09db      	lsrs	r3, r3, #7
 8025460:	72bb      	strb	r3, [r7, #10]
    uint8_t corner_reach = (state & 0x40) >> 6;
 8025462:	7bfb      	ldrb	r3, [r7, #15]
 8025464:	119b      	asrs	r3, r3, #6
 8025466:	b2db      	uxtb	r3, r3
 8025468:	f003 0301 	and.w	r3, r3, #1
 802546c:	727b      	strb	r3, [r7, #9]
    uint8_t cross_reach  = (state & 0x20) >> 5;
 802546e:	7bfb      	ldrb	r3, [r7, #15]
 8025470:	115b      	asrs	r3, r3, #5
 8025472:	b2db      	uxtb	r3, r3
 8025474:	f003 0301 	and.w	r3, r3, #1
 8025478:	723b      	strb	r3, [r7, #8]

    if(cross_flag == 0x01 && black_flag == 0x01)
 802547a:	7afb      	ldrb	r3, [r7, #11]
 802547c:	2b01      	cmp	r3, #1
 802547e:	d10b      	bne.n	8025498 <_ZN10SideSensor7CountUpEv+0x76>
 8025480:	7bbb      	ldrb	r3, [r7, #14]
 8025482:	2b01      	cmp	r3, #1
 8025484:	d108      	bne.n	8025498 <_ZN10SideSensor7CountUpEv+0x76>
    {
        state &= 0xF7; // black_flag = false
 8025486:	7bfb      	ldrb	r3, [r7, #15]
 8025488:	f023 0308 	bic.w	r3, r3, #8
 802548c:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 802548e:	7bfb      	ldrb	r3, [r7, #15]
 8025490:	f043 0320 	orr.w	r3, r3, #32
 8025494:	73fb      	strb	r3, [r7, #15]
 8025496:	e02d      	b.n	80254f4 <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_flag == 0x01 && goal_reach == 0x01)
 8025498:	7afb      	ldrb	r3, [r7, #11]
 802549a:	2b01      	cmp	r3, #1
 802549c:	d10b      	bne.n	80254b6 <_ZN10SideSensor7CountUpEv+0x94>
 802549e:	7abb      	ldrb	r3, [r7, #10]
 80254a0:	2b01      	cmp	r3, #1
 80254a2:	d108      	bne.n	80254b6 <_ZN10SideSensor7CountUpEv+0x94>
    {
        state &= 0x7F; // goal_reach = false
 80254a4:	7bfb      	ldrb	r3, [r7, #15]
 80254a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80254aa:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 80254ac:	7bfb      	ldrb	r3, [r7, #15]
 80254ae:	f043 0320 	orr.w	r3, r3, #32
 80254b2:	73fb      	strb	r3, [r7, #15]
 80254b4:	e01e      	b.n	80254f4 <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_flag == 0x01 && corner_reach == 0x01)
 80254b6:	7afb      	ldrb	r3, [r7, #11]
 80254b8:	2b01      	cmp	r3, #1
 80254ba:	d10b      	bne.n	80254d4 <_ZN10SideSensor7CountUpEv+0xb2>
 80254bc:	7a7b      	ldrb	r3, [r7, #9]
 80254be:	2b01      	cmp	r3, #1
 80254c0:	d108      	bne.n	80254d4 <_ZN10SideSensor7CountUpEv+0xb2>
    {
        state &= 0xBF; // corner_reach = false
 80254c2:	7bfb      	ldrb	r3, [r7, #15]
 80254c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80254c8:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 80254ca:	7bfb      	ldrb	r3, [r7, #15]
 80254cc:	f043 0320 	orr.w	r3, r3, #32
 80254d0:	73fb      	strb	r3, [r7, #15]
 80254d2:	e00f      	b.n	80254f4 <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_reach == 0x01 && black_flag == 0x01)
 80254d4:	7a3b      	ldrb	r3, [r7, #8]
 80254d6:	2b01      	cmp	r3, #1
 80254d8:	d10c      	bne.n	80254f4 <_ZN10SideSensor7CountUpEv+0xd2>
 80254da:	7bbb      	ldrb	r3, [r7, #14]
 80254dc:	2b01      	cmp	r3, #1
 80254de:	d109      	bne.n	80254f4 <_ZN10SideSensor7CountUpEv+0xd2>
    {
        state &= 0xDF; // cross_reach = false
 80254e0:	7bfb      	ldrb	r3, [r7, #15]
 80254e2:	f023 0320 	bic.w	r3, r3, #32
 80254e6:	73fb      	strb	r3, [r7, #15]
        cross_line_count_++;
 80254e8:	687b      	ldr	r3, [r7, #4]
 80254ea:	799b      	ldrb	r3, [r3, #6]
 80254ec:	3301      	adds	r3, #1
 80254ee:	b2da      	uxtb	r2, r3
 80254f0:	687b      	ldr	r3, [r7, #4]
 80254f2:	719a      	strb	r2, [r3, #6]
    }

    black_flag   = (state & 0x08) >> 3;
 80254f4:	7bfb      	ldrb	r3, [r7, #15]
 80254f6:	10db      	asrs	r3, r3, #3
 80254f8:	b2db      	uxtb	r3, r3
 80254fa:	f003 0301 	and.w	r3, r3, #1
 80254fe:	73bb      	strb	r3, [r7, #14]
    goal_reach   = (state & 0x80) >> 7;
 8025500:	7bfb      	ldrb	r3, [r7, #15]
 8025502:	09db      	lsrs	r3, r3, #7
 8025504:	72bb      	strb	r3, [r7, #10]
    corner_reach = (state & 0x40) >> 6;
 8025506:	7bfb      	ldrb	r3, [r7, #15]
 8025508:	119b      	asrs	r3, r3, #6
 802550a:	b2db      	uxtb	r3, r3
 802550c:	f003 0301 	and.w	r3, r3, #1
 8025510:	727b      	strb	r3, [r7, #9]
    
    if(goal_flag == 0x01 && black_flag == 0x01)
 8025512:	7b7b      	ldrb	r3, [r7, #13]
 8025514:	2b01      	cmp	r3, #1
 8025516:	d10b      	bne.n	8025530 <_ZN10SideSensor7CountUpEv+0x10e>
 8025518:	7bbb      	ldrb	r3, [r7, #14]
 802551a:	2b01      	cmp	r3, #1
 802551c:	d108      	bne.n	8025530 <_ZN10SideSensor7CountUpEv+0x10e>
    {
        state &= 0xF7; // black_flag = false
 802551e:	7bfb      	ldrb	r3, [r7, #15]
 8025520:	f023 0308 	bic.w	r3, r3, #8
 8025524:	73fb      	strb	r3, [r7, #15]
        state |= 0x80; // goal_reach = true
 8025526:	7bfb      	ldrb	r3, [r7, #15]
 8025528:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802552c:	73fb      	strb	r3, [r7, #15]
 802552e:	e02f      	b.n	8025590 <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(goal_reach == 0x01 && black_flag == 0x01)
 8025530:	7abb      	ldrb	r3, [r7, #10]
 8025532:	2b01      	cmp	r3, #1
 8025534:	d10d      	bne.n	8025552 <_ZN10SideSensor7CountUpEv+0x130>
 8025536:	7bbb      	ldrb	r3, [r7, #14]
 8025538:	2b01      	cmp	r3, #1
 802553a:	d10a      	bne.n	8025552 <_ZN10SideSensor7CountUpEv+0x130>
    {
        state &= 0x7F; // goal_reach = false
 802553c:	7bfb      	ldrb	r3, [r7, #15]
 802553e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8025542:	73fb      	strb	r3, [r7, #15]
        goal_marker_count_++;
 8025544:	687b      	ldr	r3, [r7, #4]
 8025546:	791b      	ldrb	r3, [r3, #4]
 8025548:	3301      	adds	r3, #1
 802554a:	b2da      	uxtb	r2, r3
 802554c:	687b      	ldr	r3, [r7, #4]
 802554e:	711a      	strb	r2, [r3, #4]
 8025550:	e01e      	b.n	8025590 <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(corner_flag == 0x01 && black_flag == 0x01)
 8025552:	7b3b      	ldrb	r3, [r7, #12]
 8025554:	2b01      	cmp	r3, #1
 8025556:	d10b      	bne.n	8025570 <_ZN10SideSensor7CountUpEv+0x14e>
 8025558:	7bbb      	ldrb	r3, [r7, #14]
 802555a:	2b01      	cmp	r3, #1
 802555c:	d108      	bne.n	8025570 <_ZN10SideSensor7CountUpEv+0x14e>
    {
        state &= 0xF7; // black_flag = false
 802555e:	7bfb      	ldrb	r3, [r7, #15]
 8025560:	f023 0308 	bic.w	r3, r3, #8
 8025564:	73fb      	strb	r3, [r7, #15]
        state |= 0x40; // corner_reach = true
 8025566:	7bfb      	ldrb	r3, [r7, #15]
 8025568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802556c:	73fb      	strb	r3, [r7, #15]
 802556e:	e00f      	b.n	8025590 <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(corner_reach == 0x01 && black_flag == 0x01)
 8025570:	7a7b      	ldrb	r3, [r7, #9]
 8025572:	2b01      	cmp	r3, #1
 8025574:	d10c      	bne.n	8025590 <_ZN10SideSensor7CountUpEv+0x16e>
 8025576:	7bbb      	ldrb	r3, [r7, #14]
 8025578:	2b01      	cmp	r3, #1
 802557a:	d109      	bne.n	8025590 <_ZN10SideSensor7CountUpEv+0x16e>
    {
        state &= 0xBF; // corner_reach = false
 802557c:	7bfb      	ldrb	r3, [r7, #15]
 802557e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8025582:	73fb      	strb	r3, [r7, #15]
        corner_marker_count_++;
 8025584:	687b      	ldr	r3, [r7, #4]
 8025586:	795b      	ldrb	r3, [r3, #5]
 8025588:	3301      	adds	r3, #1
 802558a:	b2da      	uxtb	r2, r3
 802558c:	687b      	ldr	r3, [r7, #4]
 802558e:	715a      	strb	r2, [r3, #5]
    }

    write_state_flags_ = state;
 8025590:	687b      	ldr	r3, [r7, #4]
 8025592:	7bfa      	ldrb	r2, [r7, #15]
 8025594:	705a      	strb	r2, [r3, #1]
}
 8025596:	bf00      	nop
 8025598:	3714      	adds	r7, #20
 802559a:	46bd      	mov	sp, r7
 802559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255a0:	4770      	bx	lr

080255a2 <_ZN10SideSensor18GetGoalMarkerCountEv>:

uint8_t SideSensor::GetGoalMarkerCount()
{
 80255a2:	b480      	push	{r7}
 80255a4:	b083      	sub	sp, #12
 80255a6:	af00      	add	r7, sp, #0
 80255a8:	6078      	str	r0, [r7, #4]
    return goal_marker_count_;
 80255aa:	687b      	ldr	r3, [r7, #4]
 80255ac:	791b      	ldrb	r3, [r3, #4]
}
 80255ae:	4618      	mov	r0, r3
 80255b0:	370c      	adds	r7, #12
 80255b2:	46bd      	mov	sp, r7
 80255b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255b8:	4770      	bx	lr

080255ba <_ZN10SideSensor20GetCornerMarkerCountEv>:

uint8_t SideSensor::GetCornerMarkerCount()
{
 80255ba:	b480      	push	{r7}
 80255bc:	b083      	sub	sp, #12
 80255be:	af00      	add	r7, sp, #0
 80255c0:	6078      	str	r0, [r7, #4]
    return corner_marker_count_;
 80255c2:	687b      	ldr	r3, [r7, #4]
 80255c4:	795b      	ldrb	r3, [r3, #5]
}
 80255c6:	4618      	mov	r0, r3
 80255c8:	370c      	adds	r7, #12
 80255ca:	46bd      	mov	sp, r7
 80255cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255d0:	4770      	bx	lr

080255d2 <_ZN10SideSensor17GetCrossLineCountEv>:

uint8_t SideSensor::GetCrossLineCount()
{
 80255d2:	b480      	push	{r7}
 80255d4:	b083      	sub	sp, #12
 80255d6:	af00      	add	r7, sp, #0
 80255d8:	6078      	str	r0, [r7, #4]
    return cross_line_count_;
 80255da:	687b      	ldr	r3, [r7, #4]
 80255dc:	799b      	ldrb	r3, [r3, #6]
}
 80255de:	4618      	mov	r0, r3
 80255e0:	370c      	adds	r7, #12
 80255e2:	46bd      	mov	sp, r7
 80255e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255e8:	4770      	bx	lr
	...

080255ec <_ZN10SideSensor7MonitorEv>:

#ifdef DEBUG_MODE
void SideSensor::Monitor()
{
 80255ec:	b480      	push	{r7}
 80255ee:	b083      	sub	sp, #12
 80255f0:	af00      	add	r7, sp, #0
 80255f2:	6078      	str	r0, [r7, #4]
    /* read_state_flags_ */
    g_side_pre_state = (read_state_flags_ & 0xF0) >> 4;
 80255f4:	687b      	ldr	r3, [r7, #4]
 80255f6:	781b      	ldrb	r3, [r3, #0]
 80255f8:	091b      	lsrs	r3, r3, #4
 80255fa:	b2da      	uxtb	r2, r3
 80255fc:	4b3a      	ldr	r3, [pc, #232]	; (80256e8 <_ZN10SideSensor7MonitorEv+0xfc>)
 80255fe:	701a      	strb	r2, [r3, #0]
    g_side_now_state =  read_state_flags_ & 0x0F;
 8025600:	687b      	ldr	r3, [r7, #4]
 8025602:	781b      	ldrb	r3, [r3, #0]
 8025604:	f003 030f 	and.w	r3, r3, #15
 8025608:	b2da      	uxtb	r2, r3
 802560a:	4b38      	ldr	r3, [pc, #224]	; (80256ec <_ZN10SideSensor7MonitorEv+0x100>)
 802560c:	701a      	strb	r2, [r3, #0]

    if(g_side_pre_state != g_side_now_state) g_side_change_state_count++;
 802560e:	4b36      	ldr	r3, [pc, #216]	; (80256e8 <_ZN10SideSensor7MonitorEv+0xfc>)
 8025610:	781a      	ldrb	r2, [r3, #0]
 8025612:	4b36      	ldr	r3, [pc, #216]	; (80256ec <_ZN10SideSensor7MonitorEv+0x100>)
 8025614:	781b      	ldrb	r3, [r3, #0]
 8025616:	429a      	cmp	r2, r3
 8025618:	d004      	beq.n	8025624 <_ZN10SideSensor7MonitorEv+0x38>
 802561a:	4b35      	ldr	r3, [pc, #212]	; (80256f0 <_ZN10SideSensor7MonitorEv+0x104>)
 802561c:	681b      	ldr	r3, [r3, #0]
 802561e:	3301      	adds	r3, #1
 8025620:	4a33      	ldr	r2, [pc, #204]	; (80256f0 <_ZN10SideSensor7MonitorEv+0x104>)
 8025622:	6013      	str	r3, [r2, #0]

    /* write_state_flags_ upper bit */
    g_side_goal_reach   = (write_state_flags_ & 0x80) >> 7;
 8025624:	687b      	ldr	r3, [r7, #4]
 8025626:	785b      	ldrb	r3, [r3, #1]
 8025628:	09db      	lsrs	r3, r3, #7
 802562a:	b2da      	uxtb	r2, r3
 802562c:	4b31      	ldr	r3, [pc, #196]	; (80256f4 <_ZN10SideSensor7MonitorEv+0x108>)
 802562e:	701a      	strb	r2, [r3, #0]
    g_side_corner_reach = (write_state_flags_ & 0x40) >> 6;
 8025630:	687b      	ldr	r3, [r7, #4]
 8025632:	785b      	ldrb	r3, [r3, #1]
 8025634:	119b      	asrs	r3, r3, #6
 8025636:	b2db      	uxtb	r3, r3
 8025638:	f003 0301 	and.w	r3, r3, #1
 802563c:	b2da      	uxtb	r2, r3
 802563e:	4b2e      	ldr	r3, [pc, #184]	; (80256f8 <_ZN10SideSensor7MonitorEv+0x10c>)
 8025640:	701a      	strb	r2, [r3, #0]
    g_side_cross_reach  = (write_state_flags_ & 0x20) >> 5;
 8025642:	687b      	ldr	r3, [r7, #4]
 8025644:	785b      	ldrb	r3, [r3, #1]
 8025646:	115b      	asrs	r3, r3, #5
 8025648:	b2db      	uxtb	r3, r3
 802564a:	f003 0301 	and.w	r3, r3, #1
 802564e:	b2da      	uxtb	r2, r3
 8025650:	4b2a      	ldr	r3, [pc, #168]	; (80256fc <_ZN10SideSensor7MonitorEv+0x110>)
 8025652:	701a      	strb	r2, [r3, #0]

    /* write_state_flags_ lower bit */
    g_side_black_flag  = (write_state_flags_ & 0x08) >> 3;
 8025654:	687b      	ldr	r3, [r7, #4]
 8025656:	785b      	ldrb	r3, [r3, #1]
 8025658:	10db      	asrs	r3, r3, #3
 802565a:	b2db      	uxtb	r3, r3
 802565c:	f003 0301 	and.w	r3, r3, #1
 8025660:	b2da      	uxtb	r2, r3
 8025662:	4b27      	ldr	r3, [pc, #156]	; (8025700 <_ZN10SideSensor7MonitorEv+0x114>)
 8025664:	701a      	strb	r2, [r3, #0]
    g_side_goal_flag   = (write_state_flags_ & 0x04) >> 2;
 8025666:	687b      	ldr	r3, [r7, #4]
 8025668:	785b      	ldrb	r3, [r3, #1]
 802566a:	109b      	asrs	r3, r3, #2
 802566c:	b2db      	uxtb	r3, r3
 802566e:	f003 0301 	and.w	r3, r3, #1
 8025672:	b2da      	uxtb	r2, r3
 8025674:	4b23      	ldr	r3, [pc, #140]	; (8025704 <_ZN10SideSensor7MonitorEv+0x118>)
 8025676:	701a      	strb	r2, [r3, #0]
    g_side_corner_flag = (write_state_flags_ & 0x02) >> 1;
 8025678:	687b      	ldr	r3, [r7, #4]
 802567a:	785b      	ldrb	r3, [r3, #1]
 802567c:	105b      	asrs	r3, r3, #1
 802567e:	b2db      	uxtb	r3, r3
 8025680:	f003 0301 	and.w	r3, r3, #1
 8025684:	b2da      	uxtb	r2, r3
 8025686:	4b20      	ldr	r3, [pc, #128]	; (8025708 <_ZN10SideSensor7MonitorEv+0x11c>)
 8025688:	701a      	strb	r2, [r3, #0]
    g_side_cross_flag  =  write_state_flags_ & 0x01;
 802568a:	687b      	ldr	r3, [r7, #4]
 802568c:	785b      	ldrb	r3, [r3, #1]
 802568e:	f003 0301 	and.w	r3, r3, #1
 8025692:	b2da      	uxtb	r2, r3
 8025694:	4b1d      	ldr	r3, [pc, #116]	; (802570c <_ZN10SideSensor7MonitorEv+0x120>)
 8025696:	701a      	strb	r2, [r3, #0]

    /* exception_flags_ */
    g_side_before_noise_state = (exception_flags_ & 0xF0) >> 4;
 8025698:	687b      	ldr	r3, [r7, #4]
 802569a:	789b      	ldrb	r3, [r3, #2]
 802569c:	091b      	lsrs	r3, r3, #4
 802569e:	b2da      	uxtb	r2, r3
 80256a0:	4b1b      	ldr	r3, [pc, #108]	; (8025710 <_ZN10SideSensor7MonitorEv+0x124>)
 80256a2:	701a      	strb	r2, [r3, #0]
    g_side_noise_count        = (exception_flags_ & 0x0C) >> 2;
 80256a4:	687b      	ldr	r3, [r7, #4]
 80256a6:	789b      	ldrb	r3, [r3, #2]
 80256a8:	109b      	asrs	r3, r3, #2
 80256aa:	b2db      	uxtb	r3, r3
 80256ac:	f003 0303 	and.w	r3, r3, #3
 80256b0:	b2da      	uxtb	r2, r3
 80256b2:	4b18      	ldr	r3, [pc, #96]	; (8025714 <_ZN10SideSensor7MonitorEv+0x128>)
 80256b4:	701a      	strb	r2, [r3, #0]
    g_side_ignore_flag        =  exception_flags_ & 0x01;
 80256b6:	687b      	ldr	r3, [r7, #4]
 80256b8:	789b      	ldrb	r3, [r3, #2]
 80256ba:	f003 0301 	and.w	r3, r3, #1
 80256be:	b2da      	uxtb	r2, r3
 80256c0:	4b15      	ldr	r3, [pc, #84]	; (8025718 <_ZN10SideSensor7MonitorEv+0x12c>)
 80256c2:	701a      	strb	r2, [r3, #0]

    g_goal_count   = goal_marker_count_;
 80256c4:	687b      	ldr	r3, [r7, #4]
 80256c6:	791a      	ldrb	r2, [r3, #4]
 80256c8:	4b14      	ldr	r3, [pc, #80]	; (802571c <_ZN10SideSensor7MonitorEv+0x130>)
 80256ca:	701a      	strb	r2, [r3, #0]
    g_corner_count = corner_marker_count_;
 80256cc:	687b      	ldr	r3, [r7, #4]
 80256ce:	795a      	ldrb	r2, [r3, #5]
 80256d0:	4b13      	ldr	r3, [pc, #76]	; (8025720 <_ZN10SideSensor7MonitorEv+0x134>)
 80256d2:	701a      	strb	r2, [r3, #0]
    g_cross_count  = cross_line_count_;
 80256d4:	687b      	ldr	r3, [r7, #4]
 80256d6:	799a      	ldrb	r2, [r3, #6]
 80256d8:	4b12      	ldr	r3, [pc, #72]	; (8025724 <_ZN10SideSensor7MonitorEv+0x138>)
 80256da:	701a      	strb	r2, [r3, #0]
}
 80256dc:	bf00      	nop
 80256de:	370c      	adds	r7, #12
 80256e0:	46bd      	mov	sp, r7
 80256e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80256e6:	4770      	bx	lr
 80256e8:	20000254 	.word	0x20000254
 80256ec:	20000255 	.word	0x20000255
 80256f0:	20000258 	.word	0x20000258
 80256f4:	2000025c 	.word	0x2000025c
 80256f8:	2000025d 	.word	0x2000025d
 80256fc:	2000025e 	.word	0x2000025e
 8025700:	2000025f 	.word	0x2000025f
 8025704:	20000260 	.word	0x20000260
 8025708:	20000261 	.word	0x20000261
 802570c:	20000262 	.word	0x20000262
 8025710:	20000263 	.word	0x20000263
 8025714:	20000264 	.word	0x20000264
 8025718:	20000265 	.word	0x20000265
 802571c:	20000266 	.word	0x20000266
 8025720:	20000267 	.word	0x20000267
 8025724:	20000268 	.word	0x20000268

08025728 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8025728:	b480      	push	{r7}
 802572a:	b083      	sub	sp, #12
 802572c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802572e:	2300      	movs	r3, #0
 8025730:	607b      	str	r3, [r7, #4]
 8025732:	4b10      	ldr	r3, [pc, #64]	; (8025774 <HAL_MspInit+0x4c>)
 8025734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025736:	4a0f      	ldr	r2, [pc, #60]	; (8025774 <HAL_MspInit+0x4c>)
 8025738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802573c:	6453      	str	r3, [r2, #68]	; 0x44
 802573e:	4b0d      	ldr	r3, [pc, #52]	; (8025774 <HAL_MspInit+0x4c>)
 8025740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8025746:	607b      	str	r3, [r7, #4]
 8025748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 802574a:	2300      	movs	r3, #0
 802574c:	603b      	str	r3, [r7, #0]
 802574e:	4b09      	ldr	r3, [pc, #36]	; (8025774 <HAL_MspInit+0x4c>)
 8025750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025752:	4a08      	ldr	r2, [pc, #32]	; (8025774 <HAL_MspInit+0x4c>)
 8025754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8025758:	6413      	str	r3, [r2, #64]	; 0x40
 802575a:	4b06      	ldr	r3, [pc, #24]	; (8025774 <HAL_MspInit+0x4c>)
 802575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802575e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8025762:	603b      	str	r3, [r7, #0]
 8025764:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8025766:	bf00      	nop
 8025768:	370c      	adds	r7, #12
 802576a:	46bd      	mov	sp, r7
 802576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025770:	4770      	bx	lr
 8025772:	bf00      	nop
 8025774:	40023800 	.word	0x40023800

08025778 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8025778:	b580      	push	{r7, lr}
 802577a:	b08a      	sub	sp, #40	; 0x28
 802577c:	af00      	add	r7, sp, #0
 802577e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025780:	f107 0314 	add.w	r3, r7, #20
 8025784:	2200      	movs	r2, #0
 8025786:	601a      	str	r2, [r3, #0]
 8025788:	605a      	str	r2, [r3, #4]
 802578a:	609a      	str	r2, [r3, #8]
 802578c:	60da      	str	r2, [r3, #12]
 802578e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8025790:	687b      	ldr	r3, [r7, #4]
 8025792:	681b      	ldr	r3, [r3, #0]
 8025794:	4a3c      	ldr	r2, [pc, #240]	; (8025888 <HAL_ADC_MspInit+0x110>)
 8025796:	4293      	cmp	r3, r2
 8025798:	d171      	bne.n	802587e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 802579a:	2300      	movs	r3, #0
 802579c:	613b      	str	r3, [r7, #16]
 802579e:	4b3b      	ldr	r3, [pc, #236]	; (802588c <HAL_ADC_MspInit+0x114>)
 80257a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80257a2:	4a3a      	ldr	r2, [pc, #232]	; (802588c <HAL_ADC_MspInit+0x114>)
 80257a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80257a8:	6453      	str	r3, [r2, #68]	; 0x44
 80257aa:	4b38      	ldr	r3, [pc, #224]	; (802588c <HAL_ADC_MspInit+0x114>)
 80257ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80257ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80257b2:	613b      	str	r3, [r7, #16]
 80257b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80257b6:	2300      	movs	r3, #0
 80257b8:	60fb      	str	r3, [r7, #12]
 80257ba:	4b34      	ldr	r3, [pc, #208]	; (802588c <HAL_ADC_MspInit+0x114>)
 80257bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80257be:	4a33      	ldr	r2, [pc, #204]	; (802588c <HAL_ADC_MspInit+0x114>)
 80257c0:	f043 0304 	orr.w	r3, r3, #4
 80257c4:	6313      	str	r3, [r2, #48]	; 0x30
 80257c6:	4b31      	ldr	r3, [pc, #196]	; (802588c <HAL_ADC_MspInit+0x114>)
 80257c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80257ca:	f003 0304 	and.w	r3, r3, #4
 80257ce:	60fb      	str	r3, [r7, #12]
 80257d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80257d2:	2300      	movs	r3, #0
 80257d4:	60bb      	str	r3, [r7, #8]
 80257d6:	4b2d      	ldr	r3, [pc, #180]	; (802588c <HAL_ADC_MspInit+0x114>)
 80257d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80257da:	4a2c      	ldr	r2, [pc, #176]	; (802588c <HAL_ADC_MspInit+0x114>)
 80257dc:	f043 0301 	orr.w	r3, r3, #1
 80257e0:	6313      	str	r3, [r2, #48]	; 0x30
 80257e2:	4b2a      	ldr	r3, [pc, #168]	; (802588c <HAL_ADC_MspInit+0x114>)
 80257e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80257e6:	f003 0301 	and.w	r3, r3, #1
 80257ea:	60bb      	str	r3, [r7, #8]
 80257ec:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80257ee:	233f      	movs	r3, #63	; 0x3f
 80257f0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80257f2:	2303      	movs	r3, #3
 80257f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80257f6:	2300      	movs	r3, #0
 80257f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80257fa:	f107 0314 	add.w	r3, r7, #20
 80257fe:	4619      	mov	r1, r3
 8025800:	4823      	ldr	r0, [pc, #140]	; (8025890 <HAL_ADC_MspInit+0x118>)
 8025802:	f002 f9a5 	bl	8027b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8025806:	23ff      	movs	r3, #255	; 0xff
 8025808:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802580a:	2303      	movs	r3, #3
 802580c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802580e:	2300      	movs	r3, #0
 8025810:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8025812:	f107 0314 	add.w	r3, r7, #20
 8025816:	4619      	mov	r1, r3
 8025818:	481e      	ldr	r0, [pc, #120]	; (8025894 <HAL_ADC_MspInit+0x11c>)
 802581a:	f002 f999 	bl	8027b50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 802581e:	4b1e      	ldr	r3, [pc, #120]	; (8025898 <HAL_ADC_MspInit+0x120>)
 8025820:	4a1e      	ldr	r2, [pc, #120]	; (802589c <HAL_ADC_MspInit+0x124>)
 8025822:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8025824:	4b1c      	ldr	r3, [pc, #112]	; (8025898 <HAL_ADC_MspInit+0x120>)
 8025826:	2200      	movs	r2, #0
 8025828:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 802582a:	4b1b      	ldr	r3, [pc, #108]	; (8025898 <HAL_ADC_MspInit+0x120>)
 802582c:	2200      	movs	r2, #0
 802582e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8025830:	4b19      	ldr	r3, [pc, #100]	; (8025898 <HAL_ADC_MspInit+0x120>)
 8025832:	2200      	movs	r2, #0
 8025834:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8025836:	4b18      	ldr	r3, [pc, #96]	; (8025898 <HAL_ADC_MspInit+0x120>)
 8025838:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802583c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 802583e:	4b16      	ldr	r3, [pc, #88]	; (8025898 <HAL_ADC_MspInit+0x120>)
 8025840:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8025844:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8025846:	4b14      	ldr	r3, [pc, #80]	; (8025898 <HAL_ADC_MspInit+0x120>)
 8025848:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802584c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 802584e:	4b12      	ldr	r3, [pc, #72]	; (8025898 <HAL_ADC_MspInit+0x120>)
 8025850:	f44f 7280 	mov.w	r2, #256	; 0x100
 8025854:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8025856:	4b10      	ldr	r3, [pc, #64]	; (8025898 <HAL_ADC_MspInit+0x120>)
 8025858:	2200      	movs	r2, #0
 802585a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802585c:	4b0e      	ldr	r3, [pc, #56]	; (8025898 <HAL_ADC_MspInit+0x120>)
 802585e:	2200      	movs	r2, #0
 8025860:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8025862:	480d      	ldr	r0, [pc, #52]	; (8025898 <HAL_ADC_MspInit+0x120>)
 8025864:	f001 fb30 	bl	8026ec8 <HAL_DMA_Init>
 8025868:	4603      	mov	r3, r0
 802586a:	2b00      	cmp	r3, #0
 802586c:	d001      	beq.n	8025872 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 802586e:	f7fe fb5b 	bl	8023f28 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8025872:	687b      	ldr	r3, [r7, #4]
 8025874:	4a08      	ldr	r2, [pc, #32]	; (8025898 <HAL_ADC_MspInit+0x120>)
 8025876:	639a      	str	r2, [r3, #56]	; 0x38
 8025878:	4a07      	ldr	r2, [pc, #28]	; (8025898 <HAL_ADC_MspInit+0x120>)
 802587a:	687b      	ldr	r3, [r7, #4]
 802587c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 802587e:	bf00      	nop
 8025880:	3728      	adds	r7, #40	; 0x28
 8025882:	46bd      	mov	sp, r7
 8025884:	bd80      	pop	{r7, pc}
 8025886:	bf00      	nop
 8025888:	40012000 	.word	0x40012000
 802588c:	40023800 	.word	0x40023800
 8025890:	40020800 	.word	0x40020800
 8025894:	40020000 	.word	0x40020000
 8025898:	20000870 	.word	0x20000870
 802589c:	40026410 	.word	0x40026410

080258a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80258a0:	b580      	push	{r7, lr}
 80258a2:	b08a      	sub	sp, #40	; 0x28
 80258a4:	af00      	add	r7, sp, #0
 80258a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80258a8:	f107 0314 	add.w	r3, r7, #20
 80258ac:	2200      	movs	r2, #0
 80258ae:	601a      	str	r2, [r3, #0]
 80258b0:	605a      	str	r2, [r3, #4]
 80258b2:	609a      	str	r2, [r3, #8]
 80258b4:	60da      	str	r2, [r3, #12]
 80258b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80258b8:	687b      	ldr	r3, [r7, #4]
 80258ba:	681b      	ldr	r3, [r3, #0]
 80258bc:	4a19      	ldr	r2, [pc, #100]	; (8025924 <HAL_I2C_MspInit+0x84>)
 80258be:	4293      	cmp	r3, r2
 80258c0:	d12c      	bne.n	802591c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80258c2:	2300      	movs	r3, #0
 80258c4:	613b      	str	r3, [r7, #16]
 80258c6:	4b18      	ldr	r3, [pc, #96]	; (8025928 <HAL_I2C_MspInit+0x88>)
 80258c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80258ca:	4a17      	ldr	r2, [pc, #92]	; (8025928 <HAL_I2C_MspInit+0x88>)
 80258cc:	f043 0302 	orr.w	r3, r3, #2
 80258d0:	6313      	str	r3, [r2, #48]	; 0x30
 80258d2:	4b15      	ldr	r3, [pc, #84]	; (8025928 <HAL_I2C_MspInit+0x88>)
 80258d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80258d6:	f003 0302 	and.w	r3, r3, #2
 80258da:	613b      	str	r3, [r7, #16]
 80258dc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80258de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80258e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80258e4:	2312      	movs	r3, #18
 80258e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80258e8:	2301      	movs	r3, #1
 80258ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80258ec:	2303      	movs	r3, #3
 80258ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80258f0:	2304      	movs	r3, #4
 80258f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80258f4:	f107 0314 	add.w	r3, r7, #20
 80258f8:	4619      	mov	r1, r3
 80258fa:	480c      	ldr	r0, [pc, #48]	; (802592c <HAL_I2C_MspInit+0x8c>)
 80258fc:	f002 f928 	bl	8027b50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8025900:	2300      	movs	r3, #0
 8025902:	60fb      	str	r3, [r7, #12]
 8025904:	4b08      	ldr	r3, [pc, #32]	; (8025928 <HAL_I2C_MspInit+0x88>)
 8025906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025908:	4a07      	ldr	r2, [pc, #28]	; (8025928 <HAL_I2C_MspInit+0x88>)
 802590a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802590e:	6413      	str	r3, [r2, #64]	; 0x40
 8025910:	4b05      	ldr	r3, [pc, #20]	; (8025928 <HAL_I2C_MspInit+0x88>)
 8025912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8025918:	60fb      	str	r3, [r7, #12]
 802591a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 802591c:	bf00      	nop
 802591e:	3728      	adds	r7, #40	; 0x28
 8025920:	46bd      	mov	sp, r7
 8025922:	bd80      	pop	{r7, pc}
 8025924:	40005800 	.word	0x40005800
 8025928:	40023800 	.word	0x40023800
 802592c:	40020400 	.word	0x40020400

08025930 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8025930:	b580      	push	{r7, lr}
 8025932:	b08a      	sub	sp, #40	; 0x28
 8025934:	af00      	add	r7, sp, #0
 8025936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025938:	f107 0314 	add.w	r3, r7, #20
 802593c:	2200      	movs	r2, #0
 802593e:	601a      	str	r2, [r3, #0]
 8025940:	605a      	str	r2, [r3, #4]
 8025942:	609a      	str	r2, [r3, #8]
 8025944:	60da      	str	r2, [r3, #12]
 8025946:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8025948:	687b      	ldr	r3, [r7, #4]
 802594a:	681b      	ldr	r3, [r3, #0]
 802594c:	4a19      	ldr	r2, [pc, #100]	; (80259b4 <HAL_SPI_MspInit+0x84>)
 802594e:	4293      	cmp	r3, r2
 8025950:	d12c      	bne.n	80259ac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8025952:	2300      	movs	r3, #0
 8025954:	613b      	str	r3, [r7, #16]
 8025956:	4b18      	ldr	r3, [pc, #96]	; (80259b8 <HAL_SPI_MspInit+0x88>)
 8025958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802595a:	4a17      	ldr	r2, [pc, #92]	; (80259b8 <HAL_SPI_MspInit+0x88>)
 802595c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8025960:	6413      	str	r3, [r2, #64]	; 0x40
 8025962:	4b15      	ldr	r3, [pc, #84]	; (80259b8 <HAL_SPI_MspInit+0x88>)
 8025964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802596a:	613b      	str	r3, [r7, #16]
 802596c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 802596e:	2300      	movs	r3, #0
 8025970:	60fb      	str	r3, [r7, #12]
 8025972:	4b11      	ldr	r3, [pc, #68]	; (80259b8 <HAL_SPI_MspInit+0x88>)
 8025974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025976:	4a10      	ldr	r2, [pc, #64]	; (80259b8 <HAL_SPI_MspInit+0x88>)
 8025978:	f043 0304 	orr.w	r3, r3, #4
 802597c:	6313      	str	r3, [r2, #48]	; 0x30
 802597e:	4b0e      	ldr	r3, [pc, #56]	; (80259b8 <HAL_SPI_MspInit+0x88>)
 8025980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025982:	f003 0304 	and.w	r3, r3, #4
 8025986:	60fb      	str	r3, [r7, #12]
 8025988:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 802598a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 802598e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025990:	2302      	movs	r3, #2
 8025992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025994:	2300      	movs	r3, #0
 8025996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8025998:	2303      	movs	r3, #3
 802599a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 802599c:	2306      	movs	r3, #6
 802599e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80259a0:	f107 0314 	add.w	r3, r7, #20
 80259a4:	4619      	mov	r1, r3
 80259a6:	4805      	ldr	r0, [pc, #20]	; (80259bc <HAL_SPI_MspInit+0x8c>)
 80259a8:	f002 f8d2 	bl	8027b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80259ac:	bf00      	nop
 80259ae:	3728      	adds	r7, #40	; 0x28
 80259b0:	46bd      	mov	sp, r7
 80259b2:	bd80      	pop	{r7, pc}
 80259b4:	40003c00 	.word	0x40003c00
 80259b8:	40023800 	.word	0x40023800
 80259bc:	40020800 	.word	0x40020800

080259c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80259c0:	b480      	push	{r7}
 80259c2:	b087      	sub	sp, #28
 80259c4:	af00      	add	r7, sp, #0
 80259c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80259c8:	687b      	ldr	r3, [r7, #4]
 80259ca:	681b      	ldr	r3, [r3, #0]
 80259cc:	4a1f      	ldr	r2, [pc, #124]	; (8025a4c <HAL_TIM_PWM_MspInit+0x8c>)
 80259ce:	4293      	cmp	r3, r2
 80259d0:	d10e      	bne.n	80259f0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80259d2:	2300      	movs	r3, #0
 80259d4:	617b      	str	r3, [r7, #20]
 80259d6:	4b1e      	ldr	r3, [pc, #120]	; (8025a50 <HAL_TIM_PWM_MspInit+0x90>)
 80259d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80259da:	4a1d      	ldr	r2, [pc, #116]	; (8025a50 <HAL_TIM_PWM_MspInit+0x90>)
 80259dc:	f043 0301 	orr.w	r3, r3, #1
 80259e0:	6453      	str	r3, [r2, #68]	; 0x44
 80259e2:	4b1b      	ldr	r3, [pc, #108]	; (8025a50 <HAL_TIM_PWM_MspInit+0x90>)
 80259e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80259e6:	f003 0301 	and.w	r3, r3, #1
 80259ea:	617b      	str	r3, [r7, #20]
 80259ec:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80259ee:	e026      	b.n	8025a3e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 80259f0:	687b      	ldr	r3, [r7, #4]
 80259f2:	681b      	ldr	r3, [r3, #0]
 80259f4:	4a17      	ldr	r2, [pc, #92]	; (8025a54 <HAL_TIM_PWM_MspInit+0x94>)
 80259f6:	4293      	cmp	r3, r2
 80259f8:	d10e      	bne.n	8025a18 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80259fa:	2300      	movs	r3, #0
 80259fc:	613b      	str	r3, [r7, #16]
 80259fe:	4b14      	ldr	r3, [pc, #80]	; (8025a50 <HAL_TIM_PWM_MspInit+0x90>)
 8025a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025a02:	4a13      	ldr	r2, [pc, #76]	; (8025a50 <HAL_TIM_PWM_MspInit+0x90>)
 8025a04:	f043 0302 	orr.w	r3, r3, #2
 8025a08:	6413      	str	r3, [r2, #64]	; 0x40
 8025a0a:	4b11      	ldr	r3, [pc, #68]	; (8025a50 <HAL_TIM_PWM_MspInit+0x90>)
 8025a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025a0e:	f003 0302 	and.w	r3, r3, #2
 8025a12:	613b      	str	r3, [r7, #16]
 8025a14:	693b      	ldr	r3, [r7, #16]
}
 8025a16:	e012      	b.n	8025a3e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 8025a18:	687b      	ldr	r3, [r7, #4]
 8025a1a:	681b      	ldr	r3, [r3, #0]
 8025a1c:	4a0e      	ldr	r2, [pc, #56]	; (8025a58 <HAL_TIM_PWM_MspInit+0x98>)
 8025a1e:	4293      	cmp	r3, r2
 8025a20:	d10d      	bne.n	8025a3e <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8025a22:	2300      	movs	r3, #0
 8025a24:	60fb      	str	r3, [r7, #12]
 8025a26:	4b0a      	ldr	r3, [pc, #40]	; (8025a50 <HAL_TIM_PWM_MspInit+0x90>)
 8025a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025a2a:	4a09      	ldr	r2, [pc, #36]	; (8025a50 <HAL_TIM_PWM_MspInit+0x90>)
 8025a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025a30:	6413      	str	r3, [r2, #64]	; 0x40
 8025a32:	4b07      	ldr	r3, [pc, #28]	; (8025a50 <HAL_TIM_PWM_MspInit+0x90>)
 8025a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8025a3a:	60fb      	str	r3, [r7, #12]
 8025a3c:	68fb      	ldr	r3, [r7, #12]
}
 8025a3e:	bf00      	nop
 8025a40:	371c      	adds	r7, #28
 8025a42:	46bd      	mov	sp, r7
 8025a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025a48:	4770      	bx	lr
 8025a4a:	bf00      	nop
 8025a4c:	40010000 	.word	0x40010000
 8025a50:	40023800 	.word	0x40023800
 8025a54:	40000400 	.word	0x40000400
 8025a58:	40001800 	.word	0x40001800

08025a5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8025a5c:	b580      	push	{r7, lr}
 8025a5e:	b088      	sub	sp, #32
 8025a60:	af00      	add	r7, sp, #0
 8025a62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8025a64:	687b      	ldr	r3, [r7, #4]
 8025a66:	681b      	ldr	r3, [r3, #0]
 8025a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8025a6c:	d116      	bne.n	8025a9c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8025a6e:	2300      	movs	r3, #0
 8025a70:	61fb      	str	r3, [r7, #28]
 8025a72:	4b40      	ldr	r3, [pc, #256]	; (8025b74 <HAL_TIM_Base_MspInit+0x118>)
 8025a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025a76:	4a3f      	ldr	r2, [pc, #252]	; (8025b74 <HAL_TIM_Base_MspInit+0x118>)
 8025a78:	f043 0301 	orr.w	r3, r3, #1
 8025a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8025a7e:	4b3d      	ldr	r3, [pc, #244]	; (8025b74 <HAL_TIM_Base_MspInit+0x118>)
 8025a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025a82:	f003 0301 	and.w	r3, r3, #1
 8025a86:	61fb      	str	r3, [r7, #28]
 8025a88:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8025a8a:	2200      	movs	r2, #0
 8025a8c:	2100      	movs	r1, #0
 8025a8e:	201c      	movs	r0, #28
 8025a90:	f001 f9e3 	bl	8026e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8025a94:	201c      	movs	r0, #28
 8025a96:	f001 f9fc 	bl	8026e92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8025a9a:	e066      	b.n	8025b6a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM5)
 8025a9c:	687b      	ldr	r3, [r7, #4]
 8025a9e:	681b      	ldr	r3, [r3, #0]
 8025aa0:	4a35      	ldr	r2, [pc, #212]	; (8025b78 <HAL_TIM_Base_MspInit+0x11c>)
 8025aa2:	4293      	cmp	r3, r2
 8025aa4:	d116      	bne.n	8025ad4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8025aa6:	2300      	movs	r3, #0
 8025aa8:	61bb      	str	r3, [r7, #24]
 8025aaa:	4b32      	ldr	r3, [pc, #200]	; (8025b74 <HAL_TIM_Base_MspInit+0x118>)
 8025aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025aae:	4a31      	ldr	r2, [pc, #196]	; (8025b74 <HAL_TIM_Base_MspInit+0x118>)
 8025ab0:	f043 0308 	orr.w	r3, r3, #8
 8025ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8025ab6:	4b2f      	ldr	r3, [pc, #188]	; (8025b74 <HAL_TIM_Base_MspInit+0x118>)
 8025ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025aba:	f003 0308 	and.w	r3, r3, #8
 8025abe:	61bb      	str	r3, [r7, #24]
 8025ac0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8025ac2:	2200      	movs	r2, #0
 8025ac4:	2100      	movs	r1, #0
 8025ac6:	2032      	movs	r0, #50	; 0x32
 8025ac8:	f001 f9c7 	bl	8026e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8025acc:	2032      	movs	r0, #50	; 0x32
 8025ace:	f001 f9e0 	bl	8026e92 <HAL_NVIC_EnableIRQ>
}
 8025ad2:	e04a      	b.n	8025b6a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM6)
 8025ad4:	687b      	ldr	r3, [r7, #4]
 8025ad6:	681b      	ldr	r3, [r3, #0]
 8025ad8:	4a28      	ldr	r2, [pc, #160]	; (8025b7c <HAL_TIM_Base_MspInit+0x120>)
 8025ada:	4293      	cmp	r3, r2
 8025adc:	d116      	bne.n	8025b0c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8025ade:	2300      	movs	r3, #0
 8025ae0:	617b      	str	r3, [r7, #20]
 8025ae2:	4b24      	ldr	r3, [pc, #144]	; (8025b74 <HAL_TIM_Base_MspInit+0x118>)
 8025ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025ae6:	4a23      	ldr	r2, [pc, #140]	; (8025b74 <HAL_TIM_Base_MspInit+0x118>)
 8025ae8:	f043 0310 	orr.w	r3, r3, #16
 8025aec:	6413      	str	r3, [r2, #64]	; 0x40
 8025aee:	4b21      	ldr	r3, [pc, #132]	; (8025b74 <HAL_TIM_Base_MspInit+0x118>)
 8025af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025af2:	f003 0310 	and.w	r3, r3, #16
 8025af6:	617b      	str	r3, [r7, #20]
 8025af8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8025afa:	2200      	movs	r2, #0
 8025afc:	2100      	movs	r1, #0
 8025afe:	2036      	movs	r0, #54	; 0x36
 8025b00:	f001 f9ab 	bl	8026e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8025b04:	2036      	movs	r0, #54	; 0x36
 8025b06:	f001 f9c4 	bl	8026e92 <HAL_NVIC_EnableIRQ>
}
 8025b0a:	e02e      	b.n	8025b6a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 8025b0c:	687b      	ldr	r3, [r7, #4]
 8025b0e:	681b      	ldr	r3, [r3, #0]
 8025b10:	4a1b      	ldr	r2, [pc, #108]	; (8025b80 <HAL_TIM_Base_MspInit+0x124>)
 8025b12:	4293      	cmp	r3, r2
 8025b14:	d116      	bne.n	8025b44 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8025b16:	2300      	movs	r3, #0
 8025b18:	613b      	str	r3, [r7, #16]
 8025b1a:	4b16      	ldr	r3, [pc, #88]	; (8025b74 <HAL_TIM_Base_MspInit+0x118>)
 8025b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025b1e:	4a15      	ldr	r2, [pc, #84]	; (8025b74 <HAL_TIM_Base_MspInit+0x118>)
 8025b20:	f043 0320 	orr.w	r3, r3, #32
 8025b24:	6413      	str	r3, [r2, #64]	; 0x40
 8025b26:	4b13      	ldr	r3, [pc, #76]	; (8025b74 <HAL_TIM_Base_MspInit+0x118>)
 8025b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025b2a:	f003 0320 	and.w	r3, r3, #32
 8025b2e:	613b      	str	r3, [r7, #16]
 8025b30:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8025b32:	2200      	movs	r2, #0
 8025b34:	2100      	movs	r1, #0
 8025b36:	2037      	movs	r0, #55	; 0x37
 8025b38:	f001 f98f 	bl	8026e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8025b3c:	2037      	movs	r0, #55	; 0x37
 8025b3e:	f001 f9a8 	bl	8026e92 <HAL_NVIC_EnableIRQ>
}
 8025b42:	e012      	b.n	8025b6a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 8025b44:	687b      	ldr	r3, [r7, #4]
 8025b46:	681b      	ldr	r3, [r3, #0]
 8025b48:	4a0e      	ldr	r2, [pc, #56]	; (8025b84 <HAL_TIM_Base_MspInit+0x128>)
 8025b4a:	4293      	cmp	r3, r2
 8025b4c:	d10d      	bne.n	8025b6a <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8025b4e:	2300      	movs	r3, #0
 8025b50:	60fb      	str	r3, [r7, #12]
 8025b52:	4b08      	ldr	r3, [pc, #32]	; (8025b74 <HAL_TIM_Base_MspInit+0x118>)
 8025b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025b56:	4a07      	ldr	r2, [pc, #28]	; (8025b74 <HAL_TIM_Base_MspInit+0x118>)
 8025b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8025b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8025b5e:	4b05      	ldr	r3, [pc, #20]	; (8025b74 <HAL_TIM_Base_MspInit+0x118>)
 8025b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025b62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8025b66:	60fb      	str	r3, [r7, #12]
 8025b68:	68fb      	ldr	r3, [r7, #12]
}
 8025b6a:	bf00      	nop
 8025b6c:	3720      	adds	r7, #32
 8025b6e:	46bd      	mov	sp, r7
 8025b70:	bd80      	pop	{r7, pc}
 8025b72:	bf00      	nop
 8025b74:	40023800 	.word	0x40023800
 8025b78:	40000c00 	.word	0x40000c00
 8025b7c:	40001000 	.word	0x40001000
 8025b80:	40001400 	.word	0x40001400
 8025b84:	40014800 	.word	0x40014800

08025b88 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8025b88:	b580      	push	{r7, lr}
 8025b8a:	b08c      	sub	sp, #48	; 0x30
 8025b8c:	af00      	add	r7, sp, #0
 8025b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025b90:	f107 031c 	add.w	r3, r7, #28
 8025b94:	2200      	movs	r2, #0
 8025b96:	601a      	str	r2, [r3, #0]
 8025b98:	605a      	str	r2, [r3, #4]
 8025b9a:	609a      	str	r2, [r3, #8]
 8025b9c:	60da      	str	r2, [r3, #12]
 8025b9e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8025ba0:	687b      	ldr	r3, [r7, #4]
 8025ba2:	681b      	ldr	r3, [r3, #0]
 8025ba4:	4a32      	ldr	r2, [pc, #200]	; (8025c70 <HAL_TIM_Encoder_MspInit+0xe8>)
 8025ba6:	4293      	cmp	r3, r2
 8025ba8:	d12c      	bne.n	8025c04 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8025baa:	2300      	movs	r3, #0
 8025bac:	61bb      	str	r3, [r7, #24]
 8025bae:	4b31      	ldr	r3, [pc, #196]	; (8025c74 <HAL_TIM_Encoder_MspInit+0xec>)
 8025bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025bb2:	4a30      	ldr	r2, [pc, #192]	; (8025c74 <HAL_TIM_Encoder_MspInit+0xec>)
 8025bb4:	f043 0304 	orr.w	r3, r3, #4
 8025bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8025bba:	4b2e      	ldr	r3, [pc, #184]	; (8025c74 <HAL_TIM_Encoder_MspInit+0xec>)
 8025bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025bbe:	f003 0304 	and.w	r3, r3, #4
 8025bc2:	61bb      	str	r3, [r7, #24]
 8025bc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8025bc6:	2300      	movs	r3, #0
 8025bc8:	617b      	str	r3, [r7, #20]
 8025bca:	4b2a      	ldr	r3, [pc, #168]	; (8025c74 <HAL_TIM_Encoder_MspInit+0xec>)
 8025bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025bce:	4a29      	ldr	r2, [pc, #164]	; (8025c74 <HAL_TIM_Encoder_MspInit+0xec>)
 8025bd0:	f043 0302 	orr.w	r3, r3, #2
 8025bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8025bd6:	4b27      	ldr	r3, [pc, #156]	; (8025c74 <HAL_TIM_Encoder_MspInit+0xec>)
 8025bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025bda:	f003 0302 	and.w	r3, r3, #2
 8025bde:	617b      	str	r3, [r7, #20]
 8025be0:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8025be2:	23c0      	movs	r3, #192	; 0xc0
 8025be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025be6:	2302      	movs	r3, #2
 8025be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025bea:	2300      	movs	r3, #0
 8025bec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025bee:	2300      	movs	r3, #0
 8025bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8025bf2:	2302      	movs	r3, #2
 8025bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8025bf6:	f107 031c 	add.w	r3, r7, #28
 8025bfa:	4619      	mov	r1, r3
 8025bfc:	481e      	ldr	r0, [pc, #120]	; (8025c78 <HAL_TIM_Encoder_MspInit+0xf0>)
 8025bfe:	f001 ffa7 	bl	8027b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8025c02:	e030      	b.n	8025c66 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8025c04:	687b      	ldr	r3, [r7, #4]
 8025c06:	681b      	ldr	r3, [r3, #0]
 8025c08:	4a1c      	ldr	r2, [pc, #112]	; (8025c7c <HAL_TIM_Encoder_MspInit+0xf4>)
 8025c0a:	4293      	cmp	r3, r2
 8025c0c:	d12b      	bne.n	8025c66 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8025c0e:	2300      	movs	r3, #0
 8025c10:	613b      	str	r3, [r7, #16]
 8025c12:	4b18      	ldr	r3, [pc, #96]	; (8025c74 <HAL_TIM_Encoder_MspInit+0xec>)
 8025c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025c16:	4a17      	ldr	r2, [pc, #92]	; (8025c74 <HAL_TIM_Encoder_MspInit+0xec>)
 8025c18:	f043 0302 	orr.w	r3, r3, #2
 8025c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8025c1e:	4b15      	ldr	r3, [pc, #84]	; (8025c74 <HAL_TIM_Encoder_MspInit+0xec>)
 8025c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025c22:	f003 0302 	and.w	r3, r3, #2
 8025c26:	613b      	str	r3, [r7, #16]
 8025c28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8025c2a:	2300      	movs	r3, #0
 8025c2c:	60fb      	str	r3, [r7, #12]
 8025c2e:	4b11      	ldr	r3, [pc, #68]	; (8025c74 <HAL_TIM_Encoder_MspInit+0xec>)
 8025c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025c32:	4a10      	ldr	r2, [pc, #64]	; (8025c74 <HAL_TIM_Encoder_MspInit+0xec>)
 8025c34:	f043 0304 	orr.w	r3, r3, #4
 8025c38:	6313      	str	r3, [r2, #48]	; 0x30
 8025c3a:	4b0e      	ldr	r3, [pc, #56]	; (8025c74 <HAL_TIM_Encoder_MspInit+0xec>)
 8025c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025c3e:	f003 0304 	and.w	r3, r3, #4
 8025c42:	60fb      	str	r3, [r7, #12]
 8025c44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8025c46:	23c0      	movs	r3, #192	; 0xc0
 8025c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025c4a:	2302      	movs	r3, #2
 8025c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025c4e:	2300      	movs	r3, #0
 8025c50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025c52:	2300      	movs	r3, #0
 8025c54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8025c56:	2303      	movs	r3, #3
 8025c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8025c5a:	f107 031c 	add.w	r3, r7, #28
 8025c5e:	4619      	mov	r1, r3
 8025c60:	4807      	ldr	r0, [pc, #28]	; (8025c80 <HAL_TIM_Encoder_MspInit+0xf8>)
 8025c62:	f001 ff75 	bl	8027b50 <HAL_GPIO_Init>
}
 8025c66:	bf00      	nop
 8025c68:	3730      	adds	r7, #48	; 0x30
 8025c6a:	46bd      	mov	sp, r7
 8025c6c:	bd80      	pop	{r7, pc}
 8025c6e:	bf00      	nop
 8025c70:	40000800 	.word	0x40000800
 8025c74:	40023800 	.word	0x40023800
 8025c78:	40020400 	.word	0x40020400
 8025c7c:	40010400 	.word	0x40010400
 8025c80:	40020800 	.word	0x40020800

08025c84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8025c84:	b580      	push	{r7, lr}
 8025c86:	b08c      	sub	sp, #48	; 0x30
 8025c88:	af00      	add	r7, sp, #0
 8025c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025c8c:	f107 031c 	add.w	r3, r7, #28
 8025c90:	2200      	movs	r2, #0
 8025c92:	601a      	str	r2, [r3, #0]
 8025c94:	605a      	str	r2, [r3, #4]
 8025c96:	609a      	str	r2, [r3, #8]
 8025c98:	60da      	str	r2, [r3, #12]
 8025c9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8025c9c:	687b      	ldr	r3, [r7, #4]
 8025c9e:	681b      	ldr	r3, [r3, #0]
 8025ca0:	4a59      	ldr	r2, [pc, #356]	; (8025e08 <HAL_TIM_MspPostInit+0x184>)
 8025ca2:	4293      	cmp	r3, r2
 8025ca4:	d11f      	bne.n	8025ce6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8025ca6:	2300      	movs	r3, #0
 8025ca8:	61bb      	str	r3, [r7, #24]
 8025caa:	4b58      	ldr	r3, [pc, #352]	; (8025e0c <HAL_TIM_MspPostInit+0x188>)
 8025cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025cae:	4a57      	ldr	r2, [pc, #348]	; (8025e0c <HAL_TIM_MspPostInit+0x188>)
 8025cb0:	f043 0301 	orr.w	r3, r3, #1
 8025cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8025cb6:	4b55      	ldr	r3, [pc, #340]	; (8025e0c <HAL_TIM_MspPostInit+0x188>)
 8025cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025cba:	f003 0301 	and.w	r3, r3, #1
 8025cbe:	61bb      	str	r3, [r7, #24]
 8025cc0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8025cc2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8025cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025cc8:	2302      	movs	r3, #2
 8025cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025ccc:	2300      	movs	r3, #0
 8025cce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025cd0:	2300      	movs	r3, #0
 8025cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8025cd4:	2301      	movs	r3, #1
 8025cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8025cd8:	f107 031c 	add.w	r3, r7, #28
 8025cdc:	4619      	mov	r1, r3
 8025cde:	484c      	ldr	r0, [pc, #304]	; (8025e10 <HAL_TIM_MspPostInit+0x18c>)
 8025ce0:	f001 ff36 	bl	8027b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8025ce4:	e08b      	b.n	8025dfe <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM3)
 8025ce6:	687b      	ldr	r3, [r7, #4]
 8025ce8:	681b      	ldr	r3, [r3, #0]
 8025cea:	4a4a      	ldr	r2, [pc, #296]	; (8025e14 <HAL_TIM_MspPostInit+0x190>)
 8025cec:	4293      	cmp	r3, r2
 8025cee:	d13d      	bne.n	8025d6c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8025cf0:	2300      	movs	r3, #0
 8025cf2:	617b      	str	r3, [r7, #20]
 8025cf4:	4b45      	ldr	r3, [pc, #276]	; (8025e0c <HAL_TIM_MspPostInit+0x188>)
 8025cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025cf8:	4a44      	ldr	r2, [pc, #272]	; (8025e0c <HAL_TIM_MspPostInit+0x188>)
 8025cfa:	f043 0304 	orr.w	r3, r3, #4
 8025cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8025d00:	4b42      	ldr	r3, [pc, #264]	; (8025e0c <HAL_TIM_MspPostInit+0x188>)
 8025d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025d04:	f003 0304 	and.w	r3, r3, #4
 8025d08:	617b      	str	r3, [r7, #20]
 8025d0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8025d0c:	2300      	movs	r3, #0
 8025d0e:	613b      	str	r3, [r7, #16]
 8025d10:	4b3e      	ldr	r3, [pc, #248]	; (8025e0c <HAL_TIM_MspPostInit+0x188>)
 8025d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025d14:	4a3d      	ldr	r2, [pc, #244]	; (8025e0c <HAL_TIM_MspPostInit+0x188>)
 8025d16:	f043 0302 	orr.w	r3, r3, #2
 8025d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8025d1c:	4b3b      	ldr	r3, [pc, #236]	; (8025e0c <HAL_TIM_MspPostInit+0x188>)
 8025d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025d20:	f003 0302 	and.w	r3, r3, #2
 8025d24:	613b      	str	r3, [r7, #16]
 8025d26:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8025d28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8025d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025d2e:	2302      	movs	r3, #2
 8025d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025d32:	2300      	movs	r3, #0
 8025d34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025d36:	2300      	movs	r3, #0
 8025d38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8025d3a:	2302      	movs	r3, #2
 8025d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8025d3e:	f107 031c 	add.w	r3, r7, #28
 8025d42:	4619      	mov	r1, r3
 8025d44:	4834      	ldr	r0, [pc, #208]	; (8025e18 <HAL_TIM_MspPostInit+0x194>)
 8025d46:	f001 ff03 	bl	8027b50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8025d4a:	2330      	movs	r3, #48	; 0x30
 8025d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025d4e:	2302      	movs	r3, #2
 8025d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025d52:	2300      	movs	r3, #0
 8025d54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025d56:	2300      	movs	r3, #0
 8025d58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8025d5a:	2302      	movs	r3, #2
 8025d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8025d5e:	f107 031c 	add.w	r3, r7, #28
 8025d62:	4619      	mov	r1, r3
 8025d64:	482d      	ldr	r0, [pc, #180]	; (8025e1c <HAL_TIM_MspPostInit+0x198>)
 8025d66:	f001 fef3 	bl	8027b50 <HAL_GPIO_Init>
}
 8025d6a:	e048      	b.n	8025dfe <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM11)
 8025d6c:	687b      	ldr	r3, [r7, #4]
 8025d6e:	681b      	ldr	r3, [r3, #0]
 8025d70:	4a2b      	ldr	r2, [pc, #172]	; (8025e20 <HAL_TIM_MspPostInit+0x19c>)
 8025d72:	4293      	cmp	r3, r2
 8025d74:	d11f      	bne.n	8025db6 <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8025d76:	2300      	movs	r3, #0
 8025d78:	60fb      	str	r3, [r7, #12]
 8025d7a:	4b24      	ldr	r3, [pc, #144]	; (8025e0c <HAL_TIM_MspPostInit+0x188>)
 8025d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025d7e:	4a23      	ldr	r2, [pc, #140]	; (8025e0c <HAL_TIM_MspPostInit+0x188>)
 8025d80:	f043 0302 	orr.w	r3, r3, #2
 8025d84:	6313      	str	r3, [r2, #48]	; 0x30
 8025d86:	4b21      	ldr	r3, [pc, #132]	; (8025e0c <HAL_TIM_MspPostInit+0x188>)
 8025d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025d8a:	f003 0302 	and.w	r3, r3, #2
 8025d8e:	60fb      	str	r3, [r7, #12]
 8025d90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8025d92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8025d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025d98:	2302      	movs	r3, #2
 8025d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025d9c:	2300      	movs	r3, #0
 8025d9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025da0:	2300      	movs	r3, #0
 8025da2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8025da4:	2303      	movs	r3, #3
 8025da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8025da8:	f107 031c 	add.w	r3, r7, #28
 8025dac:	4619      	mov	r1, r3
 8025dae:	481b      	ldr	r0, [pc, #108]	; (8025e1c <HAL_TIM_MspPostInit+0x198>)
 8025db0:	f001 fece 	bl	8027b50 <HAL_GPIO_Init>
}
 8025db4:	e023      	b.n	8025dfe <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM12)
 8025db6:	687b      	ldr	r3, [r7, #4]
 8025db8:	681b      	ldr	r3, [r3, #0]
 8025dba:	4a1a      	ldr	r2, [pc, #104]	; (8025e24 <HAL_TIM_MspPostInit+0x1a0>)
 8025dbc:	4293      	cmp	r3, r2
 8025dbe:	d11e      	bne.n	8025dfe <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8025dc0:	2300      	movs	r3, #0
 8025dc2:	60bb      	str	r3, [r7, #8]
 8025dc4:	4b11      	ldr	r3, [pc, #68]	; (8025e0c <HAL_TIM_MspPostInit+0x188>)
 8025dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025dc8:	4a10      	ldr	r2, [pc, #64]	; (8025e0c <HAL_TIM_MspPostInit+0x188>)
 8025dca:	f043 0302 	orr.w	r3, r3, #2
 8025dce:	6313      	str	r3, [r2, #48]	; 0x30
 8025dd0:	4b0e      	ldr	r3, [pc, #56]	; (8025e0c <HAL_TIM_MspPostInit+0x188>)
 8025dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025dd4:	f003 0302 	and.w	r3, r3, #2
 8025dd8:	60bb      	str	r3, [r7, #8]
 8025dda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8025ddc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8025de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025de2:	2302      	movs	r3, #2
 8025de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025de6:	2300      	movs	r3, #0
 8025de8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8025dea:	2300      	movs	r3, #0
 8025dec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8025dee:	2309      	movs	r3, #9
 8025df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8025df2:	f107 031c 	add.w	r3, r7, #28
 8025df6:	4619      	mov	r1, r3
 8025df8:	4808      	ldr	r0, [pc, #32]	; (8025e1c <HAL_TIM_MspPostInit+0x198>)
 8025dfa:	f001 fea9 	bl	8027b50 <HAL_GPIO_Init>
}
 8025dfe:	bf00      	nop
 8025e00:	3730      	adds	r7, #48	; 0x30
 8025e02:	46bd      	mov	sp, r7
 8025e04:	bd80      	pop	{r7, pc}
 8025e06:	bf00      	nop
 8025e08:	40010000 	.word	0x40010000
 8025e0c:	40023800 	.word	0x40023800
 8025e10:	40020000 	.word	0x40020000
 8025e14:	40000400 	.word	0x40000400
 8025e18:	40020800 	.word	0x40020800
 8025e1c:	40020400 	.word	0x40020400
 8025e20:	40014800 	.word	0x40014800
 8025e24:	40001800 	.word	0x40001800

08025e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8025e28:	b480      	push	{r7}
 8025e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8025e2c:	e7fe      	b.n	8025e2c <NMI_Handler+0x4>

08025e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8025e2e:	b480      	push	{r7}
 8025e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8025e32:	e7fe      	b.n	8025e32 <HardFault_Handler+0x4>

08025e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8025e34:	b480      	push	{r7}
 8025e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8025e38:	e7fe      	b.n	8025e38 <MemManage_Handler+0x4>

08025e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8025e3a:	b480      	push	{r7}
 8025e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8025e3e:	e7fe      	b.n	8025e3e <BusFault_Handler+0x4>

08025e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8025e40:	b480      	push	{r7}
 8025e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8025e44:	e7fe      	b.n	8025e44 <UsageFault_Handler+0x4>

08025e46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8025e46:	b480      	push	{r7}
 8025e48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8025e4a:	bf00      	nop
 8025e4c:	46bd      	mov	sp, r7
 8025e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e52:	4770      	bx	lr

08025e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8025e54:	b480      	push	{r7}
 8025e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8025e58:	bf00      	nop
 8025e5a:	46bd      	mov	sp, r7
 8025e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e60:	4770      	bx	lr

08025e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8025e62:	b480      	push	{r7}
 8025e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8025e66:	bf00      	nop
 8025e68:	46bd      	mov	sp, r7
 8025e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025e6e:	4770      	bx	lr

08025e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8025e70:	b580      	push	{r7, lr}
 8025e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8025e74:	f000 fae0 	bl	8026438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8025e78:	bf00      	nop
 8025e7a:	bd80      	pop	{r7, pc}

08025e7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8025e7c:	b580      	push	{r7, lr}
 8025e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8025e80:	4802      	ldr	r0, [pc, #8]	; (8025e8c <TIM2_IRQHandler+0x10>)
 8025e82:	f003 fc66 	bl	8029752 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8025e86:	bf00      	nop
 8025e88:	bd80      	pop	{r7, pc}
 8025e8a:	bf00      	nop
 8025e8c:	20000950 	.word	0x20000950

08025e90 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8025e90:	b580      	push	{r7, lr}
 8025e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8025e94:	4802      	ldr	r0, [pc, #8]	; (8025ea0 <TIM5_IRQHandler+0x10>)
 8025e96:	f003 fc5c 	bl	8029752 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8025e9a:	bf00      	nop
 8025e9c:	bd80      	pop	{r7, pc}
 8025e9e:	bf00      	nop
 8025ea0:	20000710 	.word	0x20000710

08025ea4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8025ea4:	b580      	push	{r7, lr}
 8025ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8025ea8:	4802      	ldr	r0, [pc, #8]	; (8025eb4 <TIM6_DAC_IRQHandler+0x10>)
 8025eaa:	f003 fc52 	bl	8029752 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8025eae:	bf00      	nop
 8025eb0:	bd80      	pop	{r7, pc}
 8025eb2:	bf00      	nop
 8025eb4:	200008d0 	.word	0x200008d0

08025eb8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8025eb8:	b580      	push	{r7, lr}
 8025eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8025ebc:	4802      	ldr	r0, [pc, #8]	; (8025ec8 <TIM7_IRQHandler+0x10>)
 8025ebe:	f003 fc48 	bl	8029752 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8025ec2:	bf00      	nop
 8025ec4:	bd80      	pop	{r7, pc}
 8025ec6:	bf00      	nop
 8025ec8:	200009d0 	.word	0x200009d0

08025ecc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8025ecc:	b580      	push	{r7, lr}
 8025ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8025ed0:	4802      	ldr	r0, [pc, #8]	; (8025edc <DMA2_Stream0_IRQHandler+0x10>)
 8025ed2:	f001 f8ff 	bl	80270d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8025ed6:	bf00      	nop
 8025ed8:	bd80      	pop	{r7, pc}
 8025eda:	bf00      	nop
 8025edc:	20000870 	.word	0x20000870

08025ee0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8025ee0:	b480      	push	{r7}
 8025ee2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8025ee4:	4b08      	ldr	r3, [pc, #32]	; (8025f08 <SystemInit+0x28>)
 8025ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8025eea:	4a07      	ldr	r2, [pc, #28]	; (8025f08 <SystemInit+0x28>)
 8025eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8025ef0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8025ef4:	4b04      	ldr	r3, [pc, #16]	; (8025f08 <SystemInit+0x28>)
 8025ef6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8025efa:	609a      	str	r2, [r3, #8]
#endif
}
 8025efc:	bf00      	nop
 8025efe:	46bd      	mov	sp, r7
 8025f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f04:	4770      	bx	lr
 8025f06:	bf00      	nop
 8025f08:	e000ed00 	.word	0xe000ed00

08025f0c <_ZN15VelocityControlC1EP7Encoder>:
#include "velocity_control.hpp"
#include "declare_extern.h"

VelocityControl::VelocityControl(Encoder *encoder) : integral_error_(0)
 8025f0c:	b480      	push	{r7}
 8025f0e:	b083      	sub	sp, #12
 8025f10:	af00      	add	r7, sp, #0
 8025f12:	6078      	str	r0, [r7, #4]
 8025f14:	6039      	str	r1, [r7, #0]
 8025f16:	687b      	ldr	r3, [r7, #4]
 8025f18:	f04f 0200 	mov.w	r2, #0
 8025f1c:	601a      	str	r2, [r3, #0]
{
    encoder_ = encoder;
 8025f1e:	687b      	ldr	r3, [r7, #4]
 8025f20:	683a      	ldr	r2, [r7, #0]
 8025f22:	605a      	str	r2, [r3, #4]
}
 8025f24:	687b      	ldr	r3, [r7, #4]
 8025f26:	4618      	mov	r0, r3
 8025f28:	370c      	adds	r7, #12
 8025f2a:	46bd      	mov	sp, r7
 8025f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025f30:	4770      	bx	lr

08025f32 <_ZN15VelocityControl16DeterminePidGainEf>:

float VelocityControl::DeterminePidGain(float target_velocity)
{
 8025f32:	b580      	push	{r7, lr}
 8025f34:	b086      	sub	sp, #24
 8025f36:	af00      	add	r7, sp, #0
 8025f38:	6078      	str	r0, [r7, #4]
 8025f3a:	ed87 0a00 	vstr	s0, [r7]
    float p_gain = 0, i_gain = 0, d_gain = 0;
 8025f3e:	f04f 0300 	mov.w	r3, #0
 8025f42:	617b      	str	r3, [r7, #20]
 8025f44:	f04f 0300 	mov.w	r3, #0
 8025f48:	613b      	str	r3, [r7, #16]
 8025f4a:	f04f 0300 	mov.w	r3, #0
 8025f4e:	60fb      	str	r3, [r7, #12]

    if(target_velocity < MAX_VELOCITY)
 8025f50:	edd7 7a00 	vldr	s15, [r7]
 8025f54:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8025f58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8025f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025f60:	d509      	bpl.n	8025f76 <_ZN15VelocityControl16DeterminePidGainEf+0x44>
    {
        p_gain = VELOCITY_P_GAIN;
 8025f62:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8025f66:	617b      	str	r3, [r7, #20]
        i_gain = VELOCITY_I_GAIN;
 8025f68:	f04f 0300 	mov.w	r3, #0
 8025f6c:	613b      	str	r3, [r7, #16]
        d_gain = VELOCITY_D_GAIN;
 8025f6e:	f04f 0300 	mov.w	r3, #0
 8025f72:	60fb      	str	r3, [r7, #12]
 8025f74:	e008      	b.n	8025f88 <_ZN15VelocityControl16DeterminePidGainEf+0x56>
    }
    else // Error handler
    {
        p_gain = 0;
 8025f76:	f04f 0300 	mov.w	r3, #0
 8025f7a:	617b      	str	r3, [r7, #20]
        i_gain = 0;
 8025f7c:	f04f 0300 	mov.w	r3, #0
 8025f80:	613b      	str	r3, [r7, #16]
        d_gain = 0;
 8025f82:	f04f 0300 	mov.w	r3, #0
 8025f86:	60fb      	str	r3, [r7, #12]
    }

    return PidControl(target_velocity, p_gain, i_gain, d_gain);
 8025f88:	edd7 1a03 	vldr	s3, [r7, #12]
 8025f8c:	ed97 1a04 	vldr	s2, [r7, #16]
 8025f90:	edd7 0a05 	vldr	s1, [r7, #20]
 8025f94:	ed97 0a00 	vldr	s0, [r7]
 8025f98:	6878      	ldr	r0, [r7, #4]
 8025f9a:	f000 f809 	bl	8025fb0 <_ZN15VelocityControl10PidControlEffff>
 8025f9e:	eef0 7a40 	vmov.f32	s15, s0
}
 8025fa2:	eeb0 0a67 	vmov.f32	s0, s15
 8025fa6:	3718      	adds	r7, #24
 8025fa8:	46bd      	mov	sp, r7
 8025faa:	bd80      	pop	{r7, pc}
 8025fac:	0000      	movs	r0, r0
	...

08025fb0 <_ZN15VelocityControl10PidControlEffff>:

float VelocityControl::PidControl(float target, float p_gain, float i_gain, float d_gain)
{
 8025fb0:	b5b0      	push	{r4, r5, r7, lr}
 8025fb2:	b08e      	sub	sp, #56	; 0x38
 8025fb4:	af00      	add	r7, sp, #0
 8025fb6:	6178      	str	r0, [r7, #20]
 8025fb8:	ed87 0a04 	vstr	s0, [r7, #16]
 8025fbc:	edc7 0a03 	vstr	s1, [r7, #12]
 8025fc0:	ed87 1a02 	vstr	s2, [r7, #8]
 8025fc4:	edc7 1a01 	vstr	s3, [r7, #4]
    float current = encoder_->GetDistance() / TIM6_PERIOD; // [mm/ms]
 8025fc8:	697b      	ldr	r3, [r7, #20]
 8025fca:	685b      	ldr	r3, [r3, #4]
 8025fcc:	4618      	mov	r0, r3
 8025fce:	f7fa ff7d 	bl	8020ecc <_ZN7Encoder11GetDistanceEv>
 8025fd2:	eef0 6a40 	vmov.f32	s13, s0
 8025fd6:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 8025fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8025fde:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    static float pre_filter = 0.0;
    float filter = pre_filter * (1.0 - VELOCITY_LPF_RATIO) + (current * VELOCITY_LPF_RATIO);
 8025fe2:	4b71      	ldr	r3, [pc, #452]	; (80261a8 <_ZN15VelocityControl10PidControlEffff+0x1f8>)
 8025fe4:	681b      	ldr	r3, [r3, #0]
 8025fe6:	4618      	mov	r0, r3
 8025fe8:	f7fa f98e 	bl	8020308 <__aeabi_f2d>
 8025fec:	a368      	add	r3, pc, #416	; (adr r3, 8026190 <_ZN15VelocityControl10PidControlEffff+0x1e0>)
 8025fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025ff2:	f7fa f9e1 	bl	80203b8 <__aeabi_dmul>
 8025ff6:	4603      	mov	r3, r0
 8025ff8:	460c      	mov	r4, r1
 8025ffa:	4625      	mov	r5, r4
 8025ffc:	461c      	mov	r4, r3
 8025ffe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8026000:	f7fa f982 	bl	8020308 <__aeabi_f2d>
 8026004:	a364      	add	r3, pc, #400	; (adr r3, 8026198 <_ZN15VelocityControl10PidControlEffff+0x1e8>)
 8026006:	e9d3 2300 	ldrd	r2, r3, [r3]
 802600a:	f7fa f9d5 	bl	80203b8 <__aeabi_dmul>
 802600e:	4602      	mov	r2, r0
 8026010:	460b      	mov	r3, r1
 8026012:	4620      	mov	r0, r4
 8026014:	4629      	mov	r1, r5
 8026016:	f7fa f819 	bl	802004c <__adddf3>
 802601a:	4603      	mov	r3, r0
 802601c:	460c      	mov	r4, r1
 802601e:	4618      	mov	r0, r3
 8026020:	4621      	mov	r1, r4
 8026022:	f7fa fc63 	bl	80208ec <__aeabi_d2f>
 8026026:	4603      	mov	r3, r0
 8026028:	633b      	str	r3, [r7, #48]	; 0x30
    pre_filter = filter;
 802602a:	4a5f      	ldr	r2, [pc, #380]	; (80261a8 <_ZN15VelocityControl10PidControlEffff+0x1f8>)
 802602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802602e:	6013      	str	r3, [r2, #0]

    float error = target - filter;
 8026030:	ed97 7a04 	vldr	s14, [r7, #16]
 8026034:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8026038:	ee77 7a67 	vsub.f32	s15, s14, s15
 802603c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    static float pre_error = error;
 8026040:	4b5a      	ldr	r3, [pc, #360]	; (80261ac <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8026042:	781b      	ldrb	r3, [r3, #0]
 8026044:	f3bf 8f5b 	dmb	ish
 8026048:	b2db      	uxtb	r3, r3
 802604a:	f003 0301 	and.w	r3, r3, #1
 802604e:	2b00      	cmp	r3, #0
 8026050:	bf0c      	ite	eq
 8026052:	2301      	moveq	r3, #1
 8026054:	2300      	movne	r3, #0
 8026056:	b2db      	uxtb	r3, r3
 8026058:	2b00      	cmp	r3, #0
 802605a:	d010      	beq.n	802607e <_ZN15VelocityControl10PidControlEffff+0xce>
 802605c:	4853      	ldr	r0, [pc, #332]	; (80261ac <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 802605e:	f004 fa19 	bl	802a494 <__cxa_guard_acquire>
 8026062:	4603      	mov	r3, r0
 8026064:	2b00      	cmp	r3, #0
 8026066:	bf14      	ite	ne
 8026068:	2301      	movne	r3, #1
 802606a:	2300      	moveq	r3, #0
 802606c:	b2db      	uxtb	r3, r3
 802606e:	2b00      	cmp	r3, #0
 8026070:	d005      	beq.n	802607e <_ZN15VelocityControl10PidControlEffff+0xce>
 8026072:	4a4f      	ldr	r2, [pc, #316]	; (80261b0 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8026074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026076:	6013      	str	r3, [r2, #0]
 8026078:	484c      	ldr	r0, [pc, #304]	; (80261ac <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 802607a:	f004 fa17 	bl	802a4ac <__cxa_guard_release>

    float differential_error = (error - pre_error) / TIM6_PERIOD_S;
 802607e:	4b4c      	ldr	r3, [pc, #304]	; (80261b0 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8026080:	edd3 7a00 	vldr	s15, [r3]
 8026084:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8026088:	ee77 7a67 	vsub.f32	s15, s14, s15
 802608c:	ee17 0a90 	vmov	r0, s15
 8026090:	f7fa f93a 	bl	8020308 <__aeabi_f2d>
 8026094:	a342      	add	r3, pc, #264	; (adr r3, 80261a0 <_ZN15VelocityControl10PidControlEffff+0x1f0>)
 8026096:	e9d3 2300 	ldrd	r2, r3, [r3]
 802609a:	f7fa fab7 	bl	802060c <__aeabi_ddiv>
 802609e:	4603      	mov	r3, r0
 80260a0:	460c      	mov	r4, r1
 80260a2:	4618      	mov	r0, r3
 80260a4:	4621      	mov	r1, r4
 80260a6:	f7fa fc21 	bl	80208ec <__aeabi_d2f>
 80260aa:	4603      	mov	r3, r0
 80260ac:	62bb      	str	r3, [r7, #40]	; 0x28
    float integral_error = (error + pre_error) / 2.0 * TIM6_PERIOD_S;
 80260ae:	4b40      	ldr	r3, [pc, #256]	; (80261b0 <_ZN15VelocityControl10PidControlEffff+0x200>)
 80260b0:	ed93 7a00 	vldr	s14, [r3]
 80260b4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80260b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80260bc:	ee17 0a90 	vmov	r0, s15
 80260c0:	f7fa f922 	bl	8020308 <__aeabi_f2d>
 80260c4:	f04f 0200 	mov.w	r2, #0
 80260c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80260cc:	f7fa fa9e 	bl	802060c <__aeabi_ddiv>
 80260d0:	4603      	mov	r3, r0
 80260d2:	460c      	mov	r4, r1
 80260d4:	4618      	mov	r0, r3
 80260d6:	4621      	mov	r1, r4
 80260d8:	a331      	add	r3, pc, #196	; (adr r3, 80261a0 <_ZN15VelocityControl10PidControlEffff+0x1f0>)
 80260da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80260de:	f7fa f96b 	bl	80203b8 <__aeabi_dmul>
 80260e2:	4603      	mov	r3, r0
 80260e4:	460c      	mov	r4, r1
 80260e6:	4618      	mov	r0, r3
 80260e8:	4621      	mov	r1, r4
 80260ea:	f7fa fbff 	bl	80208ec <__aeabi_d2f>
 80260ee:	4603      	mov	r3, r0
 80260f0:	627b      	str	r3, [r7, #36]	; 0x24
    SetIntegralError(integral_error);
 80260f2:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80260f6:	6978      	ldr	r0, [r7, #20]
 80260f8:	f000 f870 	bl	80261dc <_ZN15VelocityControl16SetIntegralErrorEf>
    pre_error = error;
 80260fc:	4a2c      	ldr	r2, [pc, #176]	; (80261b0 <_ZN15VelocityControl10PidControlEffff+0x200>)
 80260fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026100:	6013      	str	r3, [r2, #0]

    float p = p_gain * error;
 8026102:	ed97 7a03 	vldr	s14, [r7, #12]
 8026106:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 802610a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802610e:	edc7 7a08 	vstr	s15, [r7, #32]
    float d = d_gain * differential_error;
 8026112:	ed97 7a01 	vldr	s14, [r7, #4]
 8026116:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 802611a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802611e:	edc7 7a07 	vstr	s15, [r7, #28]
    float i = i_gain * integral_error_;
 8026122:	697b      	ldr	r3, [r7, #20]
 8026124:	edd3 7a00 	vldr	s15, [r3]
 8026128:	ed97 7a02 	vldr	s14, [r7, #8]
 802612c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8026130:	edc7 7a06 	vstr	s15, [r7, #24]

#ifdef DEBUG_MODE
    g_target_velocity  = target;
 8026134:	4a1f      	ldr	r2, [pc, #124]	; (80261b4 <_ZN15VelocityControl10PidControlEffff+0x204>)
 8026136:	693b      	ldr	r3, [r7, #16]
 8026138:	6013      	str	r3, [r2, #0]
    g_current_velocity = current;
 802613a:	4a1f      	ldr	r2, [pc, #124]	; (80261b8 <_ZN15VelocityControl10PidControlEffff+0x208>)
 802613c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802613e:	6013      	str	r3, [r2, #0]
    g_filter_velocity  = filter;
 8026140:	4a1e      	ldr	r2, [pc, #120]	; (80261bc <_ZN15VelocityControl10PidControlEffff+0x20c>)
 8026142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026144:	6013      	str	r3, [r2, #0]
    g_velocity_error   = error;
 8026146:	4a1e      	ldr	r2, [pc, #120]	; (80261c0 <_ZN15VelocityControl10PidControlEffff+0x210>)
 8026148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802614a:	6013      	str	r3, [r2, #0]
    g_velocity_p = p;       g_velocity_d = d;       g_velocity_i = i;
 802614c:	4a1d      	ldr	r2, [pc, #116]	; (80261c4 <_ZN15VelocityControl10PidControlEffff+0x214>)
 802614e:	6a3b      	ldr	r3, [r7, #32]
 8026150:	6013      	str	r3, [r2, #0]
 8026152:	4a1d      	ldr	r2, [pc, #116]	; (80261c8 <_ZN15VelocityControl10PidControlEffff+0x218>)
 8026154:	69fb      	ldr	r3, [r7, #28]
 8026156:	6013      	str	r3, [r2, #0]
 8026158:	4a1c      	ldr	r2, [pc, #112]	; (80261cc <_ZN15VelocityControl10PidControlEffff+0x21c>)
 802615a:	69bb      	ldr	r3, [r7, #24]
 802615c:	6013      	str	r3, [r2, #0]
    g_velocity_p_gain = p;  g_velocity_d_gain = p;  g_velocity_i_gain = p;
 802615e:	4a1c      	ldr	r2, [pc, #112]	; (80261d0 <_ZN15VelocityControl10PidControlEffff+0x220>)
 8026160:	6a3b      	ldr	r3, [r7, #32]
 8026162:	6013      	str	r3, [r2, #0]
 8026164:	4a1b      	ldr	r2, [pc, #108]	; (80261d4 <_ZN15VelocityControl10PidControlEffff+0x224>)
 8026166:	6a3b      	ldr	r3, [r7, #32]
 8026168:	6013      	str	r3, [r2, #0]
 802616a:	4a1b      	ldr	r2, [pc, #108]	; (80261d8 <_ZN15VelocityControl10PidControlEffff+0x228>)
 802616c:	6a3b      	ldr	r3, [r7, #32]
 802616e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    return p + d + i;
 8026170:	ed97 7a08 	vldr	s14, [r7, #32]
 8026174:	edd7 7a07 	vldr	s15, [r7, #28]
 8026178:	ee37 7a27 	vadd.f32	s14, s14, s15
 802617c:	edd7 7a06 	vldr	s15, [r7, #24]
 8026180:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8026184:	eeb0 0a67 	vmov.f32	s0, s15
 8026188:	3738      	adds	r7, #56	; 0x38
 802618a:	46bd      	mov	sp, r7
 802618c:	bdb0      	pop	{r4, r5, r7, pc}
 802618e:	bf00      	nop
 8026190:	33333334 	.word	0x33333334
 8026194:	3fd33333 	.word	0x3fd33333
 8026198:	66666666 	.word	0x66666666
 802619c:	3fe66666 	.word	0x3fe66666
 80261a0:	47ae147b 	.word	0x47ae147b
 80261a4:	3f547ae1 	.word	0x3f547ae1
 80261a8:	2000032c 	.word	0x2000032c
 80261ac:	20000334 	.word	0x20000334
 80261b0:	20000330 	.word	0x20000330
 80261b4:	200002e8 	.word	0x200002e8
 80261b8:	200002ec 	.word	0x200002ec
 80261bc:	200002f0 	.word	0x200002f0
 80261c0:	200002f4 	.word	0x200002f4
 80261c4:	200002f8 	.word	0x200002f8
 80261c8:	20000300 	.word	0x20000300
 80261cc:	200002fc 	.word	0x200002fc
 80261d0:	20000304 	.word	0x20000304
 80261d4:	2000030c 	.word	0x2000030c
 80261d8:	20000308 	.word	0x20000308

080261dc <_ZN15VelocityControl16SetIntegralErrorEf>:

void VelocityControl::SetIntegralError(float integral_error)
{
 80261dc:	b480      	push	{r7}
 80261de:	b083      	sub	sp, #12
 80261e0:	af00      	add	r7, sp, #0
 80261e2:	6078      	str	r0, [r7, #4]
 80261e4:	ed87 0a00 	vstr	s0, [r7]
    integral_error_ += integral_error;
 80261e8:	687b      	ldr	r3, [r7, #4]
 80261ea:	ed93 7a00 	vldr	s14, [r3]
 80261ee:	edd7 7a00 	vldr	s15, [r7]
 80261f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80261f6:	687b      	ldr	r3, [r7, #4]
 80261f8:	edc3 7a00 	vstr	s15, [r3]
}
 80261fc:	bf00      	nop
 80261fe:	370c      	adds	r7, #12
 8026200:	46bd      	mov	sp, r7
 8026202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026206:	4770      	bx	lr

08026208 <Init>:
    &velocity_control
);
#endif // TEST_MODE

void Init()
{
 8026208:	b580      	push	{r7, lr}
 802620a:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Init();
 802620c:	4802      	ldr	r0, [pc, #8]	; (8026218 <Init+0x10>)
 802620e:	f7fe f88b 	bl	8024328 <_ZN3Run4InitEv>
#else // TEST_MODE
    test.Init();
#endif // TEST_MODE
}
 8026212:	bf00      	nop
 8026214:	bd80      	pop	{r7, pc}
 8026216:	bf00      	nop
 8026218:	20000608 	.word	0x20000608

0802621c <InterruptTim7>:

void InterruptTim7()
{
 802621c:	b580      	push	{r7, lr}
 802621e:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Timer7();
 8026220:	4804      	ldr	r0, [pc, #16]	; (8026234 <InterruptTim7+0x18>)
 8026222:	f7fe f8fb 	bl	802441c <_ZN3Run6Timer7Ev>
#else // TEST_MODE
    test.Timer7();
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim7++;
 8026226:	4b04      	ldr	r3, [pc, #16]	; (8026238 <InterruptTim7+0x1c>)
 8026228:	681b      	ldr	r3, [r3, #0]
 802622a:	3301      	adds	r3, #1
 802622c:	4a02      	ldr	r2, [pc, #8]	; (8026238 <InterruptTim7+0x1c>)
 802622e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8026230:	bf00      	nop
 8026232:	bd80      	pop	{r7, pc}
 8026234:	20000608 	.word	0x20000608
 8026238:	20000310 	.word	0x20000310

0802623c <InterruptTim6>:

void InterruptTim6()
{
 802623c:	b580      	push	{r7, lr}
 802623e:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.RunMode();
 8026240:	4804      	ldr	r0, [pc, #16]	; (8026254 <InterruptTim6+0x18>)
 8026242:	f7fe fab5 	bl	80247b0 <_ZN3Run7RunModeEv>
#else // TEST_MODE
    test.Timer6();
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim6++;
 8026246:	4b04      	ldr	r3, [pc, #16]	; (8026258 <InterruptTim6+0x1c>)
 8026248:	681b      	ldr	r3, [r3, #0]
 802624a:	3301      	adds	r3, #1
 802624c:	4a02      	ldr	r2, [pc, #8]	; (8026258 <InterruptTim6+0x1c>)
 802624e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8026250:	bf00      	nop
 8026252:	bd80      	pop	{r7, pc}
 8026254:	20000608 	.word	0x20000608
 8026258:	20000314 	.word	0x20000314

0802625c <InterruptTim2>:

void InterruptTim2()
{
 802625c:	b580      	push	{r7, lr}
 802625e:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.UpdateRunMode();
 8026260:	4804      	ldr	r0, [pc, #16]	; (8026274 <InterruptTim2+0x18>)
 8026262:	f7fe f8e9 	bl	8024438 <_ZN3Run13UpdateRunModeEv>
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim2++;
 8026266:	4b04      	ldr	r3, [pc, #16]	; (8026278 <InterruptTim2+0x1c>)
 8026268:	681b      	ldr	r3, [r3, #0]
 802626a:	3301      	adds	r3, #1
 802626c:	4a02      	ldr	r2, [pc, #8]	; (8026278 <InterruptTim2+0x1c>)
 802626e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
 8026270:	bf00      	nop
 8026272:	bd80      	pop	{r7, pc}
 8026274:	20000608 	.word	0x20000608
 8026278:	20000318 	.word	0x20000318

0802627c <_Z41__static_initialization_and_destruction_0ii>:
 802627c:	b580      	push	{r7, lr}
 802627e:	b08a      	sub	sp, #40	; 0x28
 8026280:	af08      	add	r7, sp, #32
 8026282:	6078      	str	r0, [r7, #4]
 8026284:	6039      	str	r1, [r7, #0]
 8026286:	687b      	ldr	r3, [r7, #4]
 8026288:	2b01      	cmp	r3, #1
 802628a:	d134      	bne.n	80262f6 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 802628c:	683b      	ldr	r3, [r7, #0]
 802628e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8026292:	4293      	cmp	r3, r2
 8026294:	d12f      	bne.n	80262f6 <_Z41__static_initialization_and_destruction_0ii+0x7a>
Encoder encoder;
 8026296:	481a      	ldr	r0, [pc, #104]	; (8026300 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8026298:	f7fa fd3c 	bl	8020d14 <_ZN7EncoderC1Ev>
Iim42652 iim_42652;
 802629c:	4819      	ldr	r0, [pc, #100]	; (8026304 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 802629e:	f7fb f81b 	bl	80212d8 <_ZN8Iim42652C1Ev>
Led led;
 80262a2:	4819      	ldr	r0, [pc, #100]	; (8026308 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80262a4:	f7fb fae1 	bl	802186a <_ZN3LedC1Ev>
LineSensor line_sensor;
 80262a8:	4818      	ldr	r0, [pc, #96]	; (802630c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80262aa:	f7fb fc96 	bl	8021bda <_ZN10LineSensorC1Ev>
LineTrace line_trace(&line_sensor);
 80262ae:	4917      	ldr	r1, [pc, #92]	; (802630c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80262b0:	4817      	ldr	r0, [pc, #92]	; (8026310 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80262b2:	f7fb ffdb 	bl	802226c <_ZN9LineTraceC1EP10LineSensor>
Logger logger;
 80262b6:	4817      	ldr	r0, [pc, #92]	; (8026314 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80262b8:	f7fc f932 	bl	8022520 <_ZN6LoggerC1Ev>
SideSensor side_sensor;
 80262bc:	4816      	ldr	r0, [pc, #88]	; (8026318 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80262be:	f7fe fee1 	bl	8025084 <_ZN10SideSensorC1Ev>
VelocityControl velocity_control(&encoder);
 80262c2:	490f      	ldr	r1, [pc, #60]	; (8026300 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80262c4:	4815      	ldr	r0, [pc, #84]	; (802631c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80262c6:	f7ff fe21 	bl	8025f0c <_ZN15VelocityControlC1EP7Encoder>
);
 80262ca:	4b14      	ldr	r3, [pc, #80]	; (802631c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80262cc:	9307      	str	r3, [sp, #28]
 80262ce:	4b12      	ldr	r3, [pc, #72]	; (8026318 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80262d0:	9306      	str	r3, [sp, #24]
 80262d2:	4b13      	ldr	r3, [pc, #76]	; (8026320 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80262d4:	9305      	str	r3, [sp, #20]
 80262d6:	4b13      	ldr	r3, [pc, #76]	; (8026324 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80262d8:	9304      	str	r3, [sp, #16]
 80262da:	4b0e      	ldr	r3, [pc, #56]	; (8026314 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80262dc:	9303      	str	r3, [sp, #12]
 80262de:	4b0c      	ldr	r3, [pc, #48]	; (8026310 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80262e0:	9302      	str	r3, [sp, #8]
 80262e2:	4b0a      	ldr	r3, [pc, #40]	; (802630c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80262e4:	9301      	str	r3, [sp, #4]
 80262e6:	4b08      	ldr	r3, [pc, #32]	; (8026308 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80262e8:	9300      	str	r3, [sp, #0]
 80262ea:	4b06      	ldr	r3, [pc, #24]	; (8026304 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80262ec:	4a0e      	ldr	r2, [pc, #56]	; (8026328 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80262ee:	4904      	ldr	r1, [pc, #16]	; (8026300 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80262f0:	480e      	ldr	r0, [pc, #56]	; (802632c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80262f2:	f7fd ffd7 	bl	80242a4 <_ZN3RunC1EP7EncoderP5FlashP8Iim42652P3LedP10LineSensorP9LineTraceP6LoggerP5MotorP12RotarySwitchP10SideSensorP15VelocityControl>
 80262f6:	bf00      	nop
 80262f8:	3708      	adds	r7, #8
 80262fa:	46bd      	mov	sp, r7
 80262fc:	bd80      	pop	{r7, pc}
 80262fe:	bf00      	nop
 8026300:	20000338 	.word	0x20000338
 8026304:	20000348 	.word	0x20000348
 8026308:	20000350 	.word	0x20000350
 802630c:	20000354 	.word	0x20000354
 8026310:	200004e0 	.word	0x200004e0
 8026314:	200004e8 	.word	0x200004e8
 8026318:	200005f8 	.word	0x200005f8
 802631c:	20000600 	.word	0x20000600
 8026320:	200005f4 	.word	0x200005f4
 8026324:	200005f0 	.word	0x200005f0
 8026328:	20000344 	.word	0x20000344
 802632c:	20000608 	.word	0x20000608

08026330 <_GLOBAL__sub_I_encoder>:
 8026330:	b580      	push	{r7, lr}
 8026332:	af00      	add	r7, sp, #0
 8026334:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8026338:	2001      	movs	r0, #1
 802633a:	f7ff ff9f 	bl	802627c <_Z41__static_initialization_and_destruction_0ii>
 802633e:	bd80      	pop	{r7, pc}

08026340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8026340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8026378 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8026344:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8026346:	e003      	b.n	8026350 <LoopCopyDataInit>

08026348 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8026348:	4b0c      	ldr	r3, [pc, #48]	; (802637c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 802634a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 802634c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 802634e:	3104      	adds	r1, #4

08026350 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8026350:	480b      	ldr	r0, [pc, #44]	; (8026380 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8026352:	4b0c      	ldr	r3, [pc, #48]	; (8026384 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8026354:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8026356:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8026358:	d3f6      	bcc.n	8026348 <CopyDataInit>
  ldr  r2, =_sbss
 802635a:	4a0b      	ldr	r2, [pc, #44]	; (8026388 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 802635c:	e002      	b.n	8026364 <LoopFillZerobss>

0802635e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 802635e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8026360:	f842 3b04 	str.w	r3, [r2], #4

08026364 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8026364:	4b09      	ldr	r3, [pc, #36]	; (802638c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8026366:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8026368:	d3f9      	bcc.n	802635e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 802636a:	f7ff fdb9 	bl	8025ee0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 802636e:	f004 f8a1 	bl	802a4b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8026372:	f7fc ff99 	bl	80232a8 <main>
  bx  lr    
 8026376:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8026378:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 802637c:	0802a570 	.word	0x0802a570
  ldr  r0, =_sdata
 8026380:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8026384:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 8026388:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 802638c:	20000a34 	.word	0x20000a34

08026390 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8026390:	e7fe      	b.n	8026390 <ADC_IRQHandler>
	...

08026394 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8026394:	b580      	push	{r7, lr}
 8026396:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8026398:	4b0e      	ldr	r3, [pc, #56]	; (80263d4 <HAL_Init+0x40>)
 802639a:	681b      	ldr	r3, [r3, #0]
 802639c:	4a0d      	ldr	r2, [pc, #52]	; (80263d4 <HAL_Init+0x40>)
 802639e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80263a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80263a4:	4b0b      	ldr	r3, [pc, #44]	; (80263d4 <HAL_Init+0x40>)
 80263a6:	681b      	ldr	r3, [r3, #0]
 80263a8:	4a0a      	ldr	r2, [pc, #40]	; (80263d4 <HAL_Init+0x40>)
 80263aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80263ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80263b0:	4b08      	ldr	r3, [pc, #32]	; (80263d4 <HAL_Init+0x40>)
 80263b2:	681b      	ldr	r3, [r3, #0]
 80263b4:	4a07      	ldr	r2, [pc, #28]	; (80263d4 <HAL_Init+0x40>)
 80263b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80263ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80263bc:	2003      	movs	r0, #3
 80263be:	f000 fd41 	bl	8026e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80263c2:	2001      	movs	r0, #1
 80263c4:	f000 f808 	bl	80263d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80263c8:	f7ff f9ae 	bl	8025728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80263cc:	2300      	movs	r3, #0
}
 80263ce:	4618      	mov	r0, r3
 80263d0:	bd80      	pop	{r7, pc}
 80263d2:	bf00      	nop
 80263d4:	40023c00 	.word	0x40023c00

080263d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80263d8:	b580      	push	{r7, lr}
 80263da:	b082      	sub	sp, #8
 80263dc:	af00      	add	r7, sp, #0
 80263de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80263e0:	4b12      	ldr	r3, [pc, #72]	; (802642c <HAL_InitTick+0x54>)
 80263e2:	681a      	ldr	r2, [r3, #0]
 80263e4:	4b12      	ldr	r3, [pc, #72]	; (8026430 <HAL_InitTick+0x58>)
 80263e6:	781b      	ldrb	r3, [r3, #0]
 80263e8:	4619      	mov	r1, r3
 80263ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80263ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80263f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80263f6:	4618      	mov	r0, r3
 80263f8:	f000 fd59 	bl	8026eae <HAL_SYSTICK_Config>
 80263fc:	4603      	mov	r3, r0
 80263fe:	2b00      	cmp	r3, #0
 8026400:	d001      	beq.n	8026406 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8026402:	2301      	movs	r3, #1
 8026404:	e00e      	b.n	8026424 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8026406:	687b      	ldr	r3, [r7, #4]
 8026408:	2b0f      	cmp	r3, #15
 802640a:	d80a      	bhi.n	8026422 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 802640c:	2200      	movs	r2, #0
 802640e:	6879      	ldr	r1, [r7, #4]
 8026410:	f04f 30ff 	mov.w	r0, #4294967295
 8026414:	f000 fd21 	bl	8026e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8026418:	4a06      	ldr	r2, [pc, #24]	; (8026434 <HAL_InitTick+0x5c>)
 802641a:	687b      	ldr	r3, [r7, #4]
 802641c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 802641e:	2300      	movs	r3, #0
 8026420:	e000      	b.n	8026424 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8026422:	2301      	movs	r3, #1
}
 8026424:	4618      	mov	r0, r3
 8026426:	3708      	adds	r7, #8
 8026428:	46bd      	mov	sp, r7
 802642a:	bd80      	pop	{r7, pc}
 802642c:	20000014 	.word	0x20000014
 8026430:	2000001c 	.word	0x2000001c
 8026434:	20000018 	.word	0x20000018

08026438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8026438:	b480      	push	{r7}
 802643a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 802643c:	4b06      	ldr	r3, [pc, #24]	; (8026458 <HAL_IncTick+0x20>)
 802643e:	781b      	ldrb	r3, [r3, #0]
 8026440:	461a      	mov	r2, r3
 8026442:	4b06      	ldr	r3, [pc, #24]	; (802645c <HAL_IncTick+0x24>)
 8026444:	681b      	ldr	r3, [r3, #0]
 8026446:	4413      	add	r3, r2
 8026448:	4a04      	ldr	r2, [pc, #16]	; (802645c <HAL_IncTick+0x24>)
 802644a:	6013      	str	r3, [r2, #0]
}
 802644c:	bf00      	nop
 802644e:	46bd      	mov	sp, r7
 8026450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026454:	4770      	bx	lr
 8026456:	bf00      	nop
 8026458:	2000001c 	.word	0x2000001c
 802645c:	20000a10 	.word	0x20000a10

08026460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8026460:	b480      	push	{r7}
 8026462:	af00      	add	r7, sp, #0
  return uwTick;
 8026464:	4b03      	ldr	r3, [pc, #12]	; (8026474 <HAL_GetTick+0x14>)
 8026466:	681b      	ldr	r3, [r3, #0]
}
 8026468:	4618      	mov	r0, r3
 802646a:	46bd      	mov	sp, r7
 802646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026470:	4770      	bx	lr
 8026472:	bf00      	nop
 8026474:	20000a10 	.word	0x20000a10

08026478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8026478:	b580      	push	{r7, lr}
 802647a:	b084      	sub	sp, #16
 802647c:	af00      	add	r7, sp, #0
 802647e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8026480:	f7ff ffee 	bl	8026460 <HAL_GetTick>
 8026484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8026486:	687b      	ldr	r3, [r7, #4]
 8026488:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 802648a:	68fb      	ldr	r3, [r7, #12]
 802648c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026490:	d005      	beq.n	802649e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8026492:	4b09      	ldr	r3, [pc, #36]	; (80264b8 <HAL_Delay+0x40>)
 8026494:	781b      	ldrb	r3, [r3, #0]
 8026496:	461a      	mov	r2, r3
 8026498:	68fb      	ldr	r3, [r7, #12]
 802649a:	4413      	add	r3, r2
 802649c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 802649e:	bf00      	nop
 80264a0:	f7ff ffde 	bl	8026460 <HAL_GetTick>
 80264a4:	4602      	mov	r2, r0
 80264a6:	68bb      	ldr	r3, [r7, #8]
 80264a8:	1ad3      	subs	r3, r2, r3
 80264aa:	68fa      	ldr	r2, [r7, #12]
 80264ac:	429a      	cmp	r2, r3
 80264ae:	d8f7      	bhi.n	80264a0 <HAL_Delay+0x28>
  {
  }
}
 80264b0:	bf00      	nop
 80264b2:	3710      	adds	r7, #16
 80264b4:	46bd      	mov	sp, r7
 80264b6:	bd80      	pop	{r7, pc}
 80264b8:	2000001c 	.word	0x2000001c

080264bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80264bc:	b580      	push	{r7, lr}
 80264be:	b084      	sub	sp, #16
 80264c0:	af00      	add	r7, sp, #0
 80264c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80264c4:	2300      	movs	r3, #0
 80264c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80264c8:	687b      	ldr	r3, [r7, #4]
 80264ca:	2b00      	cmp	r3, #0
 80264cc:	d101      	bne.n	80264d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80264ce:	2301      	movs	r3, #1
 80264d0:	e033      	b.n	802653a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80264d2:	687b      	ldr	r3, [r7, #4]
 80264d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80264d6:	2b00      	cmp	r3, #0
 80264d8:	d109      	bne.n	80264ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80264da:	6878      	ldr	r0, [r7, #4]
 80264dc:	f7ff f94c 	bl	8025778 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80264e0:	687b      	ldr	r3, [r7, #4]
 80264e2:	2200      	movs	r2, #0
 80264e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80264e6:	687b      	ldr	r3, [r7, #4]
 80264e8:	2200      	movs	r2, #0
 80264ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80264ee:	687b      	ldr	r3, [r7, #4]
 80264f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80264f2:	f003 0310 	and.w	r3, r3, #16
 80264f6:	2b00      	cmp	r3, #0
 80264f8:	d118      	bne.n	802652c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80264fa:	687b      	ldr	r3, [r7, #4]
 80264fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80264fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8026502:	f023 0302 	bic.w	r3, r3, #2
 8026506:	f043 0202 	orr.w	r2, r3, #2
 802650a:	687b      	ldr	r3, [r7, #4]
 802650c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 802650e:	6878      	ldr	r0, [r7, #4]
 8026510:	f000 fa4a 	bl	80269a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8026514:	687b      	ldr	r3, [r7, #4]
 8026516:	2200      	movs	r2, #0
 8026518:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 802651a:	687b      	ldr	r3, [r7, #4]
 802651c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802651e:	f023 0303 	bic.w	r3, r3, #3
 8026522:	f043 0201 	orr.w	r2, r3, #1
 8026526:	687b      	ldr	r3, [r7, #4]
 8026528:	641a      	str	r2, [r3, #64]	; 0x40
 802652a:	e001      	b.n	8026530 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 802652c:	2301      	movs	r3, #1
 802652e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8026530:	687b      	ldr	r3, [r7, #4]
 8026532:	2200      	movs	r2, #0
 8026534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8026538:	7bfb      	ldrb	r3, [r7, #15]
}
 802653a:	4618      	mov	r0, r3
 802653c:	3710      	adds	r7, #16
 802653e:	46bd      	mov	sp, r7
 8026540:	bd80      	pop	{r7, pc}
	...

08026544 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8026544:	b580      	push	{r7, lr}
 8026546:	b086      	sub	sp, #24
 8026548:	af00      	add	r7, sp, #0
 802654a:	60f8      	str	r0, [r7, #12]
 802654c:	60b9      	str	r1, [r7, #8]
 802654e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8026550:	2300      	movs	r3, #0
 8026552:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8026554:	68fb      	ldr	r3, [r7, #12]
 8026556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802655a:	2b01      	cmp	r3, #1
 802655c:	d101      	bne.n	8026562 <HAL_ADC_Start_DMA+0x1e>
 802655e:	2302      	movs	r3, #2
 8026560:	e0cc      	b.n	80266fc <HAL_ADC_Start_DMA+0x1b8>
 8026562:	68fb      	ldr	r3, [r7, #12]
 8026564:	2201      	movs	r2, #1
 8026566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 802656a:	68fb      	ldr	r3, [r7, #12]
 802656c:	681b      	ldr	r3, [r3, #0]
 802656e:	689b      	ldr	r3, [r3, #8]
 8026570:	f003 0301 	and.w	r3, r3, #1
 8026574:	2b01      	cmp	r3, #1
 8026576:	d018      	beq.n	80265aa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8026578:	68fb      	ldr	r3, [r7, #12]
 802657a:	681b      	ldr	r3, [r3, #0]
 802657c:	689a      	ldr	r2, [r3, #8]
 802657e:	68fb      	ldr	r3, [r7, #12]
 8026580:	681b      	ldr	r3, [r3, #0]
 8026582:	f042 0201 	orr.w	r2, r2, #1
 8026586:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8026588:	4b5e      	ldr	r3, [pc, #376]	; (8026704 <HAL_ADC_Start_DMA+0x1c0>)
 802658a:	681b      	ldr	r3, [r3, #0]
 802658c:	4a5e      	ldr	r2, [pc, #376]	; (8026708 <HAL_ADC_Start_DMA+0x1c4>)
 802658e:	fba2 2303 	umull	r2, r3, r2, r3
 8026592:	0c9a      	lsrs	r2, r3, #18
 8026594:	4613      	mov	r3, r2
 8026596:	005b      	lsls	r3, r3, #1
 8026598:	4413      	add	r3, r2
 802659a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 802659c:	e002      	b.n	80265a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 802659e:	693b      	ldr	r3, [r7, #16]
 80265a0:	3b01      	subs	r3, #1
 80265a2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80265a4:	693b      	ldr	r3, [r7, #16]
 80265a6:	2b00      	cmp	r3, #0
 80265a8:	d1f9      	bne.n	802659e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80265aa:	68fb      	ldr	r3, [r7, #12]
 80265ac:	681b      	ldr	r3, [r3, #0]
 80265ae:	689b      	ldr	r3, [r3, #8]
 80265b0:	f003 0301 	and.w	r3, r3, #1
 80265b4:	2b01      	cmp	r3, #1
 80265b6:	f040 80a0 	bne.w	80266fa <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80265ba:	68fb      	ldr	r3, [r7, #12]
 80265bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80265be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80265c2:	f023 0301 	bic.w	r3, r3, #1
 80265c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80265ca:	68fb      	ldr	r3, [r7, #12]
 80265cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80265ce:	68fb      	ldr	r3, [r7, #12]
 80265d0:	681b      	ldr	r3, [r3, #0]
 80265d2:	685b      	ldr	r3, [r3, #4]
 80265d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80265d8:	2b00      	cmp	r3, #0
 80265da:	d007      	beq.n	80265ec <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80265dc:	68fb      	ldr	r3, [r7, #12]
 80265de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80265e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80265e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80265e8:	68fb      	ldr	r3, [r7, #12]
 80265ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80265ec:	68fb      	ldr	r3, [r7, #12]
 80265ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80265f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80265f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80265f8:	d106      	bne.n	8026608 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80265fa:	68fb      	ldr	r3, [r7, #12]
 80265fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80265fe:	f023 0206 	bic.w	r2, r3, #6
 8026602:	68fb      	ldr	r3, [r7, #12]
 8026604:	645a      	str	r2, [r3, #68]	; 0x44
 8026606:	e002      	b.n	802660e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8026608:	68fb      	ldr	r3, [r7, #12]
 802660a:	2200      	movs	r2, #0
 802660c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 802660e:	68fb      	ldr	r3, [r7, #12]
 8026610:	2200      	movs	r2, #0
 8026612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8026616:	4b3d      	ldr	r3, [pc, #244]	; (802670c <HAL_ADC_Start_DMA+0x1c8>)
 8026618:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 802661a:	68fb      	ldr	r3, [r7, #12]
 802661c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802661e:	4a3c      	ldr	r2, [pc, #240]	; (8026710 <HAL_ADC_Start_DMA+0x1cc>)
 8026620:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8026622:	68fb      	ldr	r3, [r7, #12]
 8026624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026626:	4a3b      	ldr	r2, [pc, #236]	; (8026714 <HAL_ADC_Start_DMA+0x1d0>)
 8026628:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 802662a:	68fb      	ldr	r3, [r7, #12]
 802662c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802662e:	4a3a      	ldr	r2, [pc, #232]	; (8026718 <HAL_ADC_Start_DMA+0x1d4>)
 8026630:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8026632:	68fb      	ldr	r3, [r7, #12]
 8026634:	681b      	ldr	r3, [r3, #0]
 8026636:	f06f 0222 	mvn.w	r2, #34	; 0x22
 802663a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 802663c:	68fb      	ldr	r3, [r7, #12]
 802663e:	681b      	ldr	r3, [r3, #0]
 8026640:	685a      	ldr	r2, [r3, #4]
 8026642:	68fb      	ldr	r3, [r7, #12]
 8026644:	681b      	ldr	r3, [r3, #0]
 8026646:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 802664a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 802664c:	68fb      	ldr	r3, [r7, #12]
 802664e:	681b      	ldr	r3, [r3, #0]
 8026650:	689a      	ldr	r2, [r3, #8]
 8026652:	68fb      	ldr	r3, [r7, #12]
 8026654:	681b      	ldr	r3, [r3, #0]
 8026656:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802665a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 802665c:	68fb      	ldr	r3, [r7, #12]
 802665e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8026660:	68fb      	ldr	r3, [r7, #12]
 8026662:	681b      	ldr	r3, [r3, #0]
 8026664:	334c      	adds	r3, #76	; 0x4c
 8026666:	4619      	mov	r1, r3
 8026668:	68ba      	ldr	r2, [r7, #8]
 802666a:	687b      	ldr	r3, [r7, #4]
 802666c:	f000 fcda 	bl	8027024 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8026670:	697b      	ldr	r3, [r7, #20]
 8026672:	685b      	ldr	r3, [r3, #4]
 8026674:	f003 031f 	and.w	r3, r3, #31
 8026678:	2b00      	cmp	r3, #0
 802667a:	d12a      	bne.n	80266d2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 802667c:	68fb      	ldr	r3, [r7, #12]
 802667e:	681b      	ldr	r3, [r3, #0]
 8026680:	4a26      	ldr	r2, [pc, #152]	; (802671c <HAL_ADC_Start_DMA+0x1d8>)
 8026682:	4293      	cmp	r3, r2
 8026684:	d015      	beq.n	80266b2 <HAL_ADC_Start_DMA+0x16e>
 8026686:	68fb      	ldr	r3, [r7, #12]
 8026688:	681b      	ldr	r3, [r3, #0]
 802668a:	4a25      	ldr	r2, [pc, #148]	; (8026720 <HAL_ADC_Start_DMA+0x1dc>)
 802668c:	4293      	cmp	r3, r2
 802668e:	d105      	bne.n	802669c <HAL_ADC_Start_DMA+0x158>
 8026690:	4b1e      	ldr	r3, [pc, #120]	; (802670c <HAL_ADC_Start_DMA+0x1c8>)
 8026692:	685b      	ldr	r3, [r3, #4]
 8026694:	f003 031f 	and.w	r3, r3, #31
 8026698:	2b00      	cmp	r3, #0
 802669a:	d00a      	beq.n	80266b2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 802669c:	68fb      	ldr	r3, [r7, #12]
 802669e:	681b      	ldr	r3, [r3, #0]
 80266a0:	4a20      	ldr	r2, [pc, #128]	; (8026724 <HAL_ADC_Start_DMA+0x1e0>)
 80266a2:	4293      	cmp	r3, r2
 80266a4:	d129      	bne.n	80266fa <HAL_ADC_Start_DMA+0x1b6>
 80266a6:	4b19      	ldr	r3, [pc, #100]	; (802670c <HAL_ADC_Start_DMA+0x1c8>)
 80266a8:	685b      	ldr	r3, [r3, #4]
 80266aa:	f003 031f 	and.w	r3, r3, #31
 80266ae:	2b0f      	cmp	r3, #15
 80266b0:	d823      	bhi.n	80266fa <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80266b2:	68fb      	ldr	r3, [r7, #12]
 80266b4:	681b      	ldr	r3, [r3, #0]
 80266b6:	689b      	ldr	r3, [r3, #8]
 80266b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80266bc:	2b00      	cmp	r3, #0
 80266be:	d11c      	bne.n	80266fa <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80266c0:	68fb      	ldr	r3, [r7, #12]
 80266c2:	681b      	ldr	r3, [r3, #0]
 80266c4:	689a      	ldr	r2, [r3, #8]
 80266c6:	68fb      	ldr	r3, [r7, #12]
 80266c8:	681b      	ldr	r3, [r3, #0]
 80266ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80266ce:	609a      	str	r2, [r3, #8]
 80266d0:	e013      	b.n	80266fa <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80266d2:	68fb      	ldr	r3, [r7, #12]
 80266d4:	681b      	ldr	r3, [r3, #0]
 80266d6:	4a11      	ldr	r2, [pc, #68]	; (802671c <HAL_ADC_Start_DMA+0x1d8>)
 80266d8:	4293      	cmp	r3, r2
 80266da:	d10e      	bne.n	80266fa <HAL_ADC_Start_DMA+0x1b6>
 80266dc:	68fb      	ldr	r3, [r7, #12]
 80266de:	681b      	ldr	r3, [r3, #0]
 80266e0:	689b      	ldr	r3, [r3, #8]
 80266e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80266e6:	2b00      	cmp	r3, #0
 80266e8:	d107      	bne.n	80266fa <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80266ea:	68fb      	ldr	r3, [r7, #12]
 80266ec:	681b      	ldr	r3, [r3, #0]
 80266ee:	689a      	ldr	r2, [r3, #8]
 80266f0:	68fb      	ldr	r3, [r7, #12]
 80266f2:	681b      	ldr	r3, [r3, #0]
 80266f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80266f8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80266fa:	2300      	movs	r3, #0
}
 80266fc:	4618      	mov	r0, r3
 80266fe:	3718      	adds	r7, #24
 8026700:	46bd      	mov	sp, r7
 8026702:	bd80      	pop	{r7, pc}
 8026704:	20000014 	.word	0x20000014
 8026708:	431bde83 	.word	0x431bde83
 802670c:	40012300 	.word	0x40012300
 8026710:	08026ba1 	.word	0x08026ba1
 8026714:	08026c5b 	.word	0x08026c5b
 8026718:	08026c77 	.word	0x08026c77
 802671c:	40012000 	.word	0x40012000
 8026720:	40012100 	.word	0x40012100
 8026724:	40012200 	.word	0x40012200

08026728 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8026728:	b480      	push	{r7}
 802672a:	b083      	sub	sp, #12
 802672c:	af00      	add	r7, sp, #0
 802672e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8026730:	bf00      	nop
 8026732:	370c      	adds	r7, #12
 8026734:	46bd      	mov	sp, r7
 8026736:	f85d 7b04 	ldr.w	r7, [sp], #4
 802673a:	4770      	bx	lr

0802673c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 802673c:	b480      	push	{r7}
 802673e:	b083      	sub	sp, #12
 8026740:	af00      	add	r7, sp, #0
 8026742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8026744:	bf00      	nop
 8026746:	370c      	adds	r7, #12
 8026748:	46bd      	mov	sp, r7
 802674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802674e:	4770      	bx	lr

08026750 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8026750:	b480      	push	{r7}
 8026752:	b083      	sub	sp, #12
 8026754:	af00      	add	r7, sp, #0
 8026756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8026758:	bf00      	nop
 802675a:	370c      	adds	r7, #12
 802675c:	46bd      	mov	sp, r7
 802675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026762:	4770      	bx	lr

08026764 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8026764:	b480      	push	{r7}
 8026766:	b085      	sub	sp, #20
 8026768:	af00      	add	r7, sp, #0
 802676a:	6078      	str	r0, [r7, #4]
 802676c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 802676e:	2300      	movs	r3, #0
 8026770:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8026772:	687b      	ldr	r3, [r7, #4]
 8026774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8026778:	2b01      	cmp	r3, #1
 802677a:	d101      	bne.n	8026780 <HAL_ADC_ConfigChannel+0x1c>
 802677c:	2302      	movs	r3, #2
 802677e:	e105      	b.n	802698c <HAL_ADC_ConfigChannel+0x228>
 8026780:	687b      	ldr	r3, [r7, #4]
 8026782:	2201      	movs	r2, #1
 8026784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8026788:	683b      	ldr	r3, [r7, #0]
 802678a:	681b      	ldr	r3, [r3, #0]
 802678c:	2b09      	cmp	r3, #9
 802678e:	d925      	bls.n	80267dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8026790:	687b      	ldr	r3, [r7, #4]
 8026792:	681b      	ldr	r3, [r3, #0]
 8026794:	68d9      	ldr	r1, [r3, #12]
 8026796:	683b      	ldr	r3, [r7, #0]
 8026798:	681b      	ldr	r3, [r3, #0]
 802679a:	b29b      	uxth	r3, r3
 802679c:	461a      	mov	r2, r3
 802679e:	4613      	mov	r3, r2
 80267a0:	005b      	lsls	r3, r3, #1
 80267a2:	4413      	add	r3, r2
 80267a4:	3b1e      	subs	r3, #30
 80267a6:	2207      	movs	r2, #7
 80267a8:	fa02 f303 	lsl.w	r3, r2, r3
 80267ac:	43da      	mvns	r2, r3
 80267ae:	687b      	ldr	r3, [r7, #4]
 80267b0:	681b      	ldr	r3, [r3, #0]
 80267b2:	400a      	ands	r2, r1
 80267b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80267b6:	687b      	ldr	r3, [r7, #4]
 80267b8:	681b      	ldr	r3, [r3, #0]
 80267ba:	68d9      	ldr	r1, [r3, #12]
 80267bc:	683b      	ldr	r3, [r7, #0]
 80267be:	689a      	ldr	r2, [r3, #8]
 80267c0:	683b      	ldr	r3, [r7, #0]
 80267c2:	681b      	ldr	r3, [r3, #0]
 80267c4:	b29b      	uxth	r3, r3
 80267c6:	4618      	mov	r0, r3
 80267c8:	4603      	mov	r3, r0
 80267ca:	005b      	lsls	r3, r3, #1
 80267cc:	4403      	add	r3, r0
 80267ce:	3b1e      	subs	r3, #30
 80267d0:	409a      	lsls	r2, r3
 80267d2:	687b      	ldr	r3, [r7, #4]
 80267d4:	681b      	ldr	r3, [r3, #0]
 80267d6:	430a      	orrs	r2, r1
 80267d8:	60da      	str	r2, [r3, #12]
 80267da:	e022      	b.n	8026822 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80267dc:	687b      	ldr	r3, [r7, #4]
 80267de:	681b      	ldr	r3, [r3, #0]
 80267e0:	6919      	ldr	r1, [r3, #16]
 80267e2:	683b      	ldr	r3, [r7, #0]
 80267e4:	681b      	ldr	r3, [r3, #0]
 80267e6:	b29b      	uxth	r3, r3
 80267e8:	461a      	mov	r2, r3
 80267ea:	4613      	mov	r3, r2
 80267ec:	005b      	lsls	r3, r3, #1
 80267ee:	4413      	add	r3, r2
 80267f0:	2207      	movs	r2, #7
 80267f2:	fa02 f303 	lsl.w	r3, r2, r3
 80267f6:	43da      	mvns	r2, r3
 80267f8:	687b      	ldr	r3, [r7, #4]
 80267fa:	681b      	ldr	r3, [r3, #0]
 80267fc:	400a      	ands	r2, r1
 80267fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8026800:	687b      	ldr	r3, [r7, #4]
 8026802:	681b      	ldr	r3, [r3, #0]
 8026804:	6919      	ldr	r1, [r3, #16]
 8026806:	683b      	ldr	r3, [r7, #0]
 8026808:	689a      	ldr	r2, [r3, #8]
 802680a:	683b      	ldr	r3, [r7, #0]
 802680c:	681b      	ldr	r3, [r3, #0]
 802680e:	b29b      	uxth	r3, r3
 8026810:	4618      	mov	r0, r3
 8026812:	4603      	mov	r3, r0
 8026814:	005b      	lsls	r3, r3, #1
 8026816:	4403      	add	r3, r0
 8026818:	409a      	lsls	r2, r3
 802681a:	687b      	ldr	r3, [r7, #4]
 802681c:	681b      	ldr	r3, [r3, #0]
 802681e:	430a      	orrs	r2, r1
 8026820:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8026822:	683b      	ldr	r3, [r7, #0]
 8026824:	685b      	ldr	r3, [r3, #4]
 8026826:	2b06      	cmp	r3, #6
 8026828:	d824      	bhi.n	8026874 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 802682a:	687b      	ldr	r3, [r7, #4]
 802682c:	681b      	ldr	r3, [r3, #0]
 802682e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8026830:	683b      	ldr	r3, [r7, #0]
 8026832:	685a      	ldr	r2, [r3, #4]
 8026834:	4613      	mov	r3, r2
 8026836:	009b      	lsls	r3, r3, #2
 8026838:	4413      	add	r3, r2
 802683a:	3b05      	subs	r3, #5
 802683c:	221f      	movs	r2, #31
 802683e:	fa02 f303 	lsl.w	r3, r2, r3
 8026842:	43da      	mvns	r2, r3
 8026844:	687b      	ldr	r3, [r7, #4]
 8026846:	681b      	ldr	r3, [r3, #0]
 8026848:	400a      	ands	r2, r1
 802684a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 802684c:	687b      	ldr	r3, [r7, #4]
 802684e:	681b      	ldr	r3, [r3, #0]
 8026850:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8026852:	683b      	ldr	r3, [r7, #0]
 8026854:	681b      	ldr	r3, [r3, #0]
 8026856:	b29b      	uxth	r3, r3
 8026858:	4618      	mov	r0, r3
 802685a:	683b      	ldr	r3, [r7, #0]
 802685c:	685a      	ldr	r2, [r3, #4]
 802685e:	4613      	mov	r3, r2
 8026860:	009b      	lsls	r3, r3, #2
 8026862:	4413      	add	r3, r2
 8026864:	3b05      	subs	r3, #5
 8026866:	fa00 f203 	lsl.w	r2, r0, r3
 802686a:	687b      	ldr	r3, [r7, #4]
 802686c:	681b      	ldr	r3, [r3, #0]
 802686e:	430a      	orrs	r2, r1
 8026870:	635a      	str	r2, [r3, #52]	; 0x34
 8026872:	e04c      	b.n	802690e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8026874:	683b      	ldr	r3, [r7, #0]
 8026876:	685b      	ldr	r3, [r3, #4]
 8026878:	2b0c      	cmp	r3, #12
 802687a:	d824      	bhi.n	80268c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 802687c:	687b      	ldr	r3, [r7, #4]
 802687e:	681b      	ldr	r3, [r3, #0]
 8026880:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8026882:	683b      	ldr	r3, [r7, #0]
 8026884:	685a      	ldr	r2, [r3, #4]
 8026886:	4613      	mov	r3, r2
 8026888:	009b      	lsls	r3, r3, #2
 802688a:	4413      	add	r3, r2
 802688c:	3b23      	subs	r3, #35	; 0x23
 802688e:	221f      	movs	r2, #31
 8026890:	fa02 f303 	lsl.w	r3, r2, r3
 8026894:	43da      	mvns	r2, r3
 8026896:	687b      	ldr	r3, [r7, #4]
 8026898:	681b      	ldr	r3, [r3, #0]
 802689a:	400a      	ands	r2, r1
 802689c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 802689e:	687b      	ldr	r3, [r7, #4]
 80268a0:	681b      	ldr	r3, [r3, #0]
 80268a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80268a4:	683b      	ldr	r3, [r7, #0]
 80268a6:	681b      	ldr	r3, [r3, #0]
 80268a8:	b29b      	uxth	r3, r3
 80268aa:	4618      	mov	r0, r3
 80268ac:	683b      	ldr	r3, [r7, #0]
 80268ae:	685a      	ldr	r2, [r3, #4]
 80268b0:	4613      	mov	r3, r2
 80268b2:	009b      	lsls	r3, r3, #2
 80268b4:	4413      	add	r3, r2
 80268b6:	3b23      	subs	r3, #35	; 0x23
 80268b8:	fa00 f203 	lsl.w	r2, r0, r3
 80268bc:	687b      	ldr	r3, [r7, #4]
 80268be:	681b      	ldr	r3, [r3, #0]
 80268c0:	430a      	orrs	r2, r1
 80268c2:	631a      	str	r2, [r3, #48]	; 0x30
 80268c4:	e023      	b.n	802690e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80268c6:	687b      	ldr	r3, [r7, #4]
 80268c8:	681b      	ldr	r3, [r3, #0]
 80268ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80268cc:	683b      	ldr	r3, [r7, #0]
 80268ce:	685a      	ldr	r2, [r3, #4]
 80268d0:	4613      	mov	r3, r2
 80268d2:	009b      	lsls	r3, r3, #2
 80268d4:	4413      	add	r3, r2
 80268d6:	3b41      	subs	r3, #65	; 0x41
 80268d8:	221f      	movs	r2, #31
 80268da:	fa02 f303 	lsl.w	r3, r2, r3
 80268de:	43da      	mvns	r2, r3
 80268e0:	687b      	ldr	r3, [r7, #4]
 80268e2:	681b      	ldr	r3, [r3, #0]
 80268e4:	400a      	ands	r2, r1
 80268e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80268e8:	687b      	ldr	r3, [r7, #4]
 80268ea:	681b      	ldr	r3, [r3, #0]
 80268ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80268ee:	683b      	ldr	r3, [r7, #0]
 80268f0:	681b      	ldr	r3, [r3, #0]
 80268f2:	b29b      	uxth	r3, r3
 80268f4:	4618      	mov	r0, r3
 80268f6:	683b      	ldr	r3, [r7, #0]
 80268f8:	685a      	ldr	r2, [r3, #4]
 80268fa:	4613      	mov	r3, r2
 80268fc:	009b      	lsls	r3, r3, #2
 80268fe:	4413      	add	r3, r2
 8026900:	3b41      	subs	r3, #65	; 0x41
 8026902:	fa00 f203 	lsl.w	r2, r0, r3
 8026906:	687b      	ldr	r3, [r7, #4]
 8026908:	681b      	ldr	r3, [r3, #0]
 802690a:	430a      	orrs	r2, r1
 802690c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 802690e:	4b22      	ldr	r3, [pc, #136]	; (8026998 <HAL_ADC_ConfigChannel+0x234>)
 8026910:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8026912:	687b      	ldr	r3, [r7, #4]
 8026914:	681b      	ldr	r3, [r3, #0]
 8026916:	4a21      	ldr	r2, [pc, #132]	; (802699c <HAL_ADC_ConfigChannel+0x238>)
 8026918:	4293      	cmp	r3, r2
 802691a:	d109      	bne.n	8026930 <HAL_ADC_ConfigChannel+0x1cc>
 802691c:	683b      	ldr	r3, [r7, #0]
 802691e:	681b      	ldr	r3, [r3, #0]
 8026920:	2b12      	cmp	r3, #18
 8026922:	d105      	bne.n	8026930 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8026924:	68fb      	ldr	r3, [r7, #12]
 8026926:	685b      	ldr	r3, [r3, #4]
 8026928:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 802692c:	68fb      	ldr	r3, [r7, #12]
 802692e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8026930:	687b      	ldr	r3, [r7, #4]
 8026932:	681b      	ldr	r3, [r3, #0]
 8026934:	4a19      	ldr	r2, [pc, #100]	; (802699c <HAL_ADC_ConfigChannel+0x238>)
 8026936:	4293      	cmp	r3, r2
 8026938:	d123      	bne.n	8026982 <HAL_ADC_ConfigChannel+0x21e>
 802693a:	683b      	ldr	r3, [r7, #0]
 802693c:	681b      	ldr	r3, [r3, #0]
 802693e:	2b10      	cmp	r3, #16
 8026940:	d003      	beq.n	802694a <HAL_ADC_ConfigChannel+0x1e6>
 8026942:	683b      	ldr	r3, [r7, #0]
 8026944:	681b      	ldr	r3, [r3, #0]
 8026946:	2b11      	cmp	r3, #17
 8026948:	d11b      	bne.n	8026982 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 802694a:	68fb      	ldr	r3, [r7, #12]
 802694c:	685b      	ldr	r3, [r3, #4]
 802694e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8026952:	68fb      	ldr	r3, [r7, #12]
 8026954:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8026956:	683b      	ldr	r3, [r7, #0]
 8026958:	681b      	ldr	r3, [r3, #0]
 802695a:	2b10      	cmp	r3, #16
 802695c:	d111      	bne.n	8026982 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 802695e:	4b10      	ldr	r3, [pc, #64]	; (80269a0 <HAL_ADC_ConfigChannel+0x23c>)
 8026960:	681b      	ldr	r3, [r3, #0]
 8026962:	4a10      	ldr	r2, [pc, #64]	; (80269a4 <HAL_ADC_ConfigChannel+0x240>)
 8026964:	fba2 2303 	umull	r2, r3, r2, r3
 8026968:	0c9a      	lsrs	r2, r3, #18
 802696a:	4613      	mov	r3, r2
 802696c:	009b      	lsls	r3, r3, #2
 802696e:	4413      	add	r3, r2
 8026970:	005b      	lsls	r3, r3, #1
 8026972:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8026974:	e002      	b.n	802697c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8026976:	68bb      	ldr	r3, [r7, #8]
 8026978:	3b01      	subs	r3, #1
 802697a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 802697c:	68bb      	ldr	r3, [r7, #8]
 802697e:	2b00      	cmp	r3, #0
 8026980:	d1f9      	bne.n	8026976 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8026982:	687b      	ldr	r3, [r7, #4]
 8026984:	2200      	movs	r2, #0
 8026986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 802698a:	2300      	movs	r3, #0
}
 802698c:	4618      	mov	r0, r3
 802698e:	3714      	adds	r7, #20
 8026990:	46bd      	mov	sp, r7
 8026992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026996:	4770      	bx	lr
 8026998:	40012300 	.word	0x40012300
 802699c:	40012000 	.word	0x40012000
 80269a0:	20000014 	.word	0x20000014
 80269a4:	431bde83 	.word	0x431bde83

080269a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80269a8:	b480      	push	{r7}
 80269aa:	b085      	sub	sp, #20
 80269ac:	af00      	add	r7, sp, #0
 80269ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80269b0:	4b79      	ldr	r3, [pc, #484]	; (8026b98 <ADC_Init+0x1f0>)
 80269b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80269b4:	68fb      	ldr	r3, [r7, #12]
 80269b6:	685b      	ldr	r3, [r3, #4]
 80269b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80269bc:	68fb      	ldr	r3, [r7, #12]
 80269be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80269c0:	68fb      	ldr	r3, [r7, #12]
 80269c2:	685a      	ldr	r2, [r3, #4]
 80269c4:	687b      	ldr	r3, [r7, #4]
 80269c6:	685b      	ldr	r3, [r3, #4]
 80269c8:	431a      	orrs	r2, r3
 80269ca:	68fb      	ldr	r3, [r7, #12]
 80269cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80269ce:	687b      	ldr	r3, [r7, #4]
 80269d0:	681b      	ldr	r3, [r3, #0]
 80269d2:	685a      	ldr	r2, [r3, #4]
 80269d4:	687b      	ldr	r3, [r7, #4]
 80269d6:	681b      	ldr	r3, [r3, #0]
 80269d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80269dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80269de:	687b      	ldr	r3, [r7, #4]
 80269e0:	681b      	ldr	r3, [r3, #0]
 80269e2:	6859      	ldr	r1, [r3, #4]
 80269e4:	687b      	ldr	r3, [r7, #4]
 80269e6:	691b      	ldr	r3, [r3, #16]
 80269e8:	021a      	lsls	r2, r3, #8
 80269ea:	687b      	ldr	r3, [r7, #4]
 80269ec:	681b      	ldr	r3, [r3, #0]
 80269ee:	430a      	orrs	r2, r1
 80269f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80269f2:	687b      	ldr	r3, [r7, #4]
 80269f4:	681b      	ldr	r3, [r3, #0]
 80269f6:	685a      	ldr	r2, [r3, #4]
 80269f8:	687b      	ldr	r3, [r7, #4]
 80269fa:	681b      	ldr	r3, [r3, #0]
 80269fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8026a00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8026a02:	687b      	ldr	r3, [r7, #4]
 8026a04:	681b      	ldr	r3, [r3, #0]
 8026a06:	6859      	ldr	r1, [r3, #4]
 8026a08:	687b      	ldr	r3, [r7, #4]
 8026a0a:	689a      	ldr	r2, [r3, #8]
 8026a0c:	687b      	ldr	r3, [r7, #4]
 8026a0e:	681b      	ldr	r3, [r3, #0]
 8026a10:	430a      	orrs	r2, r1
 8026a12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8026a14:	687b      	ldr	r3, [r7, #4]
 8026a16:	681b      	ldr	r3, [r3, #0]
 8026a18:	689a      	ldr	r2, [r3, #8]
 8026a1a:	687b      	ldr	r3, [r7, #4]
 8026a1c:	681b      	ldr	r3, [r3, #0]
 8026a1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8026a22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8026a24:	687b      	ldr	r3, [r7, #4]
 8026a26:	681b      	ldr	r3, [r3, #0]
 8026a28:	6899      	ldr	r1, [r3, #8]
 8026a2a:	687b      	ldr	r3, [r7, #4]
 8026a2c:	68da      	ldr	r2, [r3, #12]
 8026a2e:	687b      	ldr	r3, [r7, #4]
 8026a30:	681b      	ldr	r3, [r3, #0]
 8026a32:	430a      	orrs	r2, r1
 8026a34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8026a36:	687b      	ldr	r3, [r7, #4]
 8026a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026a3a:	4a58      	ldr	r2, [pc, #352]	; (8026b9c <ADC_Init+0x1f4>)
 8026a3c:	4293      	cmp	r3, r2
 8026a3e:	d022      	beq.n	8026a86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8026a40:	687b      	ldr	r3, [r7, #4]
 8026a42:	681b      	ldr	r3, [r3, #0]
 8026a44:	689a      	ldr	r2, [r3, #8]
 8026a46:	687b      	ldr	r3, [r7, #4]
 8026a48:	681b      	ldr	r3, [r3, #0]
 8026a4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8026a4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8026a50:	687b      	ldr	r3, [r7, #4]
 8026a52:	681b      	ldr	r3, [r3, #0]
 8026a54:	6899      	ldr	r1, [r3, #8]
 8026a56:	687b      	ldr	r3, [r7, #4]
 8026a58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8026a5a:	687b      	ldr	r3, [r7, #4]
 8026a5c:	681b      	ldr	r3, [r3, #0]
 8026a5e:	430a      	orrs	r2, r1
 8026a60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8026a62:	687b      	ldr	r3, [r7, #4]
 8026a64:	681b      	ldr	r3, [r3, #0]
 8026a66:	689a      	ldr	r2, [r3, #8]
 8026a68:	687b      	ldr	r3, [r7, #4]
 8026a6a:	681b      	ldr	r3, [r3, #0]
 8026a6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8026a70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8026a72:	687b      	ldr	r3, [r7, #4]
 8026a74:	681b      	ldr	r3, [r3, #0]
 8026a76:	6899      	ldr	r1, [r3, #8]
 8026a78:	687b      	ldr	r3, [r7, #4]
 8026a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026a7c:	687b      	ldr	r3, [r7, #4]
 8026a7e:	681b      	ldr	r3, [r3, #0]
 8026a80:	430a      	orrs	r2, r1
 8026a82:	609a      	str	r2, [r3, #8]
 8026a84:	e00f      	b.n	8026aa6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8026a86:	687b      	ldr	r3, [r7, #4]
 8026a88:	681b      	ldr	r3, [r3, #0]
 8026a8a:	689a      	ldr	r2, [r3, #8]
 8026a8c:	687b      	ldr	r3, [r7, #4]
 8026a8e:	681b      	ldr	r3, [r3, #0]
 8026a90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8026a94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8026a96:	687b      	ldr	r3, [r7, #4]
 8026a98:	681b      	ldr	r3, [r3, #0]
 8026a9a:	689a      	ldr	r2, [r3, #8]
 8026a9c:	687b      	ldr	r3, [r7, #4]
 8026a9e:	681b      	ldr	r3, [r3, #0]
 8026aa0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8026aa4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8026aa6:	687b      	ldr	r3, [r7, #4]
 8026aa8:	681b      	ldr	r3, [r3, #0]
 8026aaa:	689a      	ldr	r2, [r3, #8]
 8026aac:	687b      	ldr	r3, [r7, #4]
 8026aae:	681b      	ldr	r3, [r3, #0]
 8026ab0:	f022 0202 	bic.w	r2, r2, #2
 8026ab4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8026ab6:	687b      	ldr	r3, [r7, #4]
 8026ab8:	681b      	ldr	r3, [r3, #0]
 8026aba:	6899      	ldr	r1, [r3, #8]
 8026abc:	687b      	ldr	r3, [r7, #4]
 8026abe:	7e1b      	ldrb	r3, [r3, #24]
 8026ac0:	005a      	lsls	r2, r3, #1
 8026ac2:	687b      	ldr	r3, [r7, #4]
 8026ac4:	681b      	ldr	r3, [r3, #0]
 8026ac6:	430a      	orrs	r2, r1
 8026ac8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8026aca:	687b      	ldr	r3, [r7, #4]
 8026acc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8026ad0:	2b00      	cmp	r3, #0
 8026ad2:	d01b      	beq.n	8026b0c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8026ad4:	687b      	ldr	r3, [r7, #4]
 8026ad6:	681b      	ldr	r3, [r3, #0]
 8026ad8:	685a      	ldr	r2, [r3, #4]
 8026ada:	687b      	ldr	r3, [r7, #4]
 8026adc:	681b      	ldr	r3, [r3, #0]
 8026ade:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8026ae2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8026ae4:	687b      	ldr	r3, [r7, #4]
 8026ae6:	681b      	ldr	r3, [r3, #0]
 8026ae8:	685a      	ldr	r2, [r3, #4]
 8026aea:	687b      	ldr	r3, [r7, #4]
 8026aec:	681b      	ldr	r3, [r3, #0]
 8026aee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8026af2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8026af4:	687b      	ldr	r3, [r7, #4]
 8026af6:	681b      	ldr	r3, [r3, #0]
 8026af8:	6859      	ldr	r1, [r3, #4]
 8026afa:	687b      	ldr	r3, [r7, #4]
 8026afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026afe:	3b01      	subs	r3, #1
 8026b00:	035a      	lsls	r2, r3, #13
 8026b02:	687b      	ldr	r3, [r7, #4]
 8026b04:	681b      	ldr	r3, [r3, #0]
 8026b06:	430a      	orrs	r2, r1
 8026b08:	605a      	str	r2, [r3, #4]
 8026b0a:	e007      	b.n	8026b1c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8026b0c:	687b      	ldr	r3, [r7, #4]
 8026b0e:	681b      	ldr	r3, [r3, #0]
 8026b10:	685a      	ldr	r2, [r3, #4]
 8026b12:	687b      	ldr	r3, [r7, #4]
 8026b14:	681b      	ldr	r3, [r3, #0]
 8026b16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8026b1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8026b1c:	687b      	ldr	r3, [r7, #4]
 8026b1e:	681b      	ldr	r3, [r3, #0]
 8026b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026b22:	687b      	ldr	r3, [r7, #4]
 8026b24:	681b      	ldr	r3, [r3, #0]
 8026b26:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8026b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8026b2c:	687b      	ldr	r3, [r7, #4]
 8026b2e:	681b      	ldr	r3, [r3, #0]
 8026b30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8026b32:	687b      	ldr	r3, [r7, #4]
 8026b34:	69db      	ldr	r3, [r3, #28]
 8026b36:	3b01      	subs	r3, #1
 8026b38:	051a      	lsls	r2, r3, #20
 8026b3a:	687b      	ldr	r3, [r7, #4]
 8026b3c:	681b      	ldr	r3, [r3, #0]
 8026b3e:	430a      	orrs	r2, r1
 8026b40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8026b42:	687b      	ldr	r3, [r7, #4]
 8026b44:	681b      	ldr	r3, [r3, #0]
 8026b46:	689a      	ldr	r2, [r3, #8]
 8026b48:	687b      	ldr	r3, [r7, #4]
 8026b4a:	681b      	ldr	r3, [r3, #0]
 8026b4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8026b50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8026b52:	687b      	ldr	r3, [r7, #4]
 8026b54:	681b      	ldr	r3, [r3, #0]
 8026b56:	6899      	ldr	r1, [r3, #8]
 8026b58:	687b      	ldr	r3, [r7, #4]
 8026b5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8026b5e:	025a      	lsls	r2, r3, #9
 8026b60:	687b      	ldr	r3, [r7, #4]
 8026b62:	681b      	ldr	r3, [r3, #0]
 8026b64:	430a      	orrs	r2, r1
 8026b66:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8026b68:	687b      	ldr	r3, [r7, #4]
 8026b6a:	681b      	ldr	r3, [r3, #0]
 8026b6c:	689a      	ldr	r2, [r3, #8]
 8026b6e:	687b      	ldr	r3, [r7, #4]
 8026b70:	681b      	ldr	r3, [r3, #0]
 8026b72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8026b76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8026b78:	687b      	ldr	r3, [r7, #4]
 8026b7a:	681b      	ldr	r3, [r3, #0]
 8026b7c:	6899      	ldr	r1, [r3, #8]
 8026b7e:	687b      	ldr	r3, [r7, #4]
 8026b80:	695b      	ldr	r3, [r3, #20]
 8026b82:	029a      	lsls	r2, r3, #10
 8026b84:	687b      	ldr	r3, [r7, #4]
 8026b86:	681b      	ldr	r3, [r3, #0]
 8026b88:	430a      	orrs	r2, r1
 8026b8a:	609a      	str	r2, [r3, #8]
}
 8026b8c:	bf00      	nop
 8026b8e:	3714      	adds	r7, #20
 8026b90:	46bd      	mov	sp, r7
 8026b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b96:	4770      	bx	lr
 8026b98:	40012300 	.word	0x40012300
 8026b9c:	0f000001 	.word	0x0f000001

08026ba0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8026ba0:	b580      	push	{r7, lr}
 8026ba2:	b084      	sub	sp, #16
 8026ba4:	af00      	add	r7, sp, #0
 8026ba6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8026ba8:	687b      	ldr	r3, [r7, #4]
 8026baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026bac:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8026bae:	68fb      	ldr	r3, [r7, #12]
 8026bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026bb2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8026bb6:	2b00      	cmp	r3, #0
 8026bb8:	d13c      	bne.n	8026c34 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8026bba:	68fb      	ldr	r3, [r7, #12]
 8026bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026bbe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8026bc2:	68fb      	ldr	r3, [r7, #12]
 8026bc4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8026bc6:	68fb      	ldr	r3, [r7, #12]
 8026bc8:	681b      	ldr	r3, [r3, #0]
 8026bca:	689b      	ldr	r3, [r3, #8]
 8026bcc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8026bd0:	2b00      	cmp	r3, #0
 8026bd2:	d12b      	bne.n	8026c2c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8026bd4:	68fb      	ldr	r3, [r7, #12]
 8026bd6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8026bd8:	2b00      	cmp	r3, #0
 8026bda:	d127      	bne.n	8026c2c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8026bdc:	68fb      	ldr	r3, [r7, #12]
 8026bde:	681b      	ldr	r3, [r3, #0]
 8026be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026be2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8026be6:	2b00      	cmp	r3, #0
 8026be8:	d006      	beq.n	8026bf8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8026bea:	68fb      	ldr	r3, [r7, #12]
 8026bec:	681b      	ldr	r3, [r3, #0]
 8026bee:	689b      	ldr	r3, [r3, #8]
 8026bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8026bf4:	2b00      	cmp	r3, #0
 8026bf6:	d119      	bne.n	8026c2c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8026bf8:	68fb      	ldr	r3, [r7, #12]
 8026bfa:	681b      	ldr	r3, [r3, #0]
 8026bfc:	685a      	ldr	r2, [r3, #4]
 8026bfe:	68fb      	ldr	r3, [r7, #12]
 8026c00:	681b      	ldr	r3, [r3, #0]
 8026c02:	f022 0220 	bic.w	r2, r2, #32
 8026c06:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8026c08:	68fb      	ldr	r3, [r7, #12]
 8026c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026c0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8026c10:	68fb      	ldr	r3, [r7, #12]
 8026c12:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8026c14:	68fb      	ldr	r3, [r7, #12]
 8026c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026c18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8026c1c:	2b00      	cmp	r3, #0
 8026c1e:	d105      	bne.n	8026c2c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8026c20:	68fb      	ldr	r3, [r7, #12]
 8026c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026c24:	f043 0201 	orr.w	r2, r3, #1
 8026c28:	68fb      	ldr	r3, [r7, #12]
 8026c2a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8026c2c:	68f8      	ldr	r0, [r7, #12]
 8026c2e:	f7ff fd7b 	bl	8026728 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8026c32:	e00e      	b.n	8026c52 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8026c34:	68fb      	ldr	r3, [r7, #12]
 8026c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026c38:	f003 0310 	and.w	r3, r3, #16
 8026c3c:	2b00      	cmp	r3, #0
 8026c3e:	d003      	beq.n	8026c48 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8026c40:	68f8      	ldr	r0, [r7, #12]
 8026c42:	f7ff fd85 	bl	8026750 <HAL_ADC_ErrorCallback>
}
 8026c46:	e004      	b.n	8026c52 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8026c48:	68fb      	ldr	r3, [r7, #12]
 8026c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8026c4e:	6878      	ldr	r0, [r7, #4]
 8026c50:	4798      	blx	r3
}
 8026c52:	bf00      	nop
 8026c54:	3710      	adds	r7, #16
 8026c56:	46bd      	mov	sp, r7
 8026c58:	bd80      	pop	{r7, pc}

08026c5a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8026c5a:	b580      	push	{r7, lr}
 8026c5c:	b084      	sub	sp, #16
 8026c5e:	af00      	add	r7, sp, #0
 8026c60:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8026c62:	687b      	ldr	r3, [r7, #4]
 8026c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026c66:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8026c68:	68f8      	ldr	r0, [r7, #12]
 8026c6a:	f7ff fd67 	bl	802673c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8026c6e:	bf00      	nop
 8026c70:	3710      	adds	r7, #16
 8026c72:	46bd      	mov	sp, r7
 8026c74:	bd80      	pop	{r7, pc}

08026c76 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8026c76:	b580      	push	{r7, lr}
 8026c78:	b084      	sub	sp, #16
 8026c7a:	af00      	add	r7, sp, #0
 8026c7c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8026c7e:	687b      	ldr	r3, [r7, #4]
 8026c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026c82:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8026c84:	68fb      	ldr	r3, [r7, #12]
 8026c86:	2240      	movs	r2, #64	; 0x40
 8026c88:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8026c8a:	68fb      	ldr	r3, [r7, #12]
 8026c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026c8e:	f043 0204 	orr.w	r2, r3, #4
 8026c92:	68fb      	ldr	r3, [r7, #12]
 8026c94:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8026c96:	68f8      	ldr	r0, [r7, #12]
 8026c98:	f7ff fd5a 	bl	8026750 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8026c9c:	bf00      	nop
 8026c9e:	3710      	adds	r7, #16
 8026ca0:	46bd      	mov	sp, r7
 8026ca2:	bd80      	pop	{r7, pc}

08026ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8026ca4:	b480      	push	{r7}
 8026ca6:	b085      	sub	sp, #20
 8026ca8:	af00      	add	r7, sp, #0
 8026caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8026cac:	687b      	ldr	r3, [r7, #4]
 8026cae:	f003 0307 	and.w	r3, r3, #7
 8026cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8026cb4:	4b0c      	ldr	r3, [pc, #48]	; (8026ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8026cb6:	68db      	ldr	r3, [r3, #12]
 8026cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8026cba:	68ba      	ldr	r2, [r7, #8]
 8026cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8026cc0:	4013      	ands	r3, r2
 8026cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8026cc4:	68fb      	ldr	r3, [r7, #12]
 8026cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8026cc8:	68bb      	ldr	r3, [r7, #8]
 8026cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8026ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8026cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8026cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8026cd6:	4a04      	ldr	r2, [pc, #16]	; (8026ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8026cd8:	68bb      	ldr	r3, [r7, #8]
 8026cda:	60d3      	str	r3, [r2, #12]
}
 8026cdc:	bf00      	nop
 8026cde:	3714      	adds	r7, #20
 8026ce0:	46bd      	mov	sp, r7
 8026ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026ce6:	4770      	bx	lr
 8026ce8:	e000ed00 	.word	0xe000ed00

08026cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8026cec:	b480      	push	{r7}
 8026cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8026cf0:	4b04      	ldr	r3, [pc, #16]	; (8026d04 <__NVIC_GetPriorityGrouping+0x18>)
 8026cf2:	68db      	ldr	r3, [r3, #12]
 8026cf4:	0a1b      	lsrs	r3, r3, #8
 8026cf6:	f003 0307 	and.w	r3, r3, #7
}
 8026cfa:	4618      	mov	r0, r3
 8026cfc:	46bd      	mov	sp, r7
 8026cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d02:	4770      	bx	lr
 8026d04:	e000ed00 	.word	0xe000ed00

08026d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8026d08:	b480      	push	{r7}
 8026d0a:	b083      	sub	sp, #12
 8026d0c:	af00      	add	r7, sp, #0
 8026d0e:	4603      	mov	r3, r0
 8026d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8026d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026d16:	2b00      	cmp	r3, #0
 8026d18:	db0b      	blt.n	8026d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8026d1a:	79fb      	ldrb	r3, [r7, #7]
 8026d1c:	f003 021f 	and.w	r2, r3, #31
 8026d20:	4907      	ldr	r1, [pc, #28]	; (8026d40 <__NVIC_EnableIRQ+0x38>)
 8026d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026d26:	095b      	lsrs	r3, r3, #5
 8026d28:	2001      	movs	r0, #1
 8026d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8026d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8026d32:	bf00      	nop
 8026d34:	370c      	adds	r7, #12
 8026d36:	46bd      	mov	sp, r7
 8026d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d3c:	4770      	bx	lr
 8026d3e:	bf00      	nop
 8026d40:	e000e100 	.word	0xe000e100

08026d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8026d44:	b480      	push	{r7}
 8026d46:	b083      	sub	sp, #12
 8026d48:	af00      	add	r7, sp, #0
 8026d4a:	4603      	mov	r3, r0
 8026d4c:	6039      	str	r1, [r7, #0]
 8026d4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8026d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026d54:	2b00      	cmp	r3, #0
 8026d56:	db0a      	blt.n	8026d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8026d58:	683b      	ldr	r3, [r7, #0]
 8026d5a:	b2da      	uxtb	r2, r3
 8026d5c:	490c      	ldr	r1, [pc, #48]	; (8026d90 <__NVIC_SetPriority+0x4c>)
 8026d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026d62:	0112      	lsls	r2, r2, #4
 8026d64:	b2d2      	uxtb	r2, r2
 8026d66:	440b      	add	r3, r1
 8026d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8026d6c:	e00a      	b.n	8026d84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8026d6e:	683b      	ldr	r3, [r7, #0]
 8026d70:	b2da      	uxtb	r2, r3
 8026d72:	4908      	ldr	r1, [pc, #32]	; (8026d94 <__NVIC_SetPriority+0x50>)
 8026d74:	79fb      	ldrb	r3, [r7, #7]
 8026d76:	f003 030f 	and.w	r3, r3, #15
 8026d7a:	3b04      	subs	r3, #4
 8026d7c:	0112      	lsls	r2, r2, #4
 8026d7e:	b2d2      	uxtb	r2, r2
 8026d80:	440b      	add	r3, r1
 8026d82:	761a      	strb	r2, [r3, #24]
}
 8026d84:	bf00      	nop
 8026d86:	370c      	adds	r7, #12
 8026d88:	46bd      	mov	sp, r7
 8026d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d8e:	4770      	bx	lr
 8026d90:	e000e100 	.word	0xe000e100
 8026d94:	e000ed00 	.word	0xe000ed00

08026d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8026d98:	b480      	push	{r7}
 8026d9a:	b089      	sub	sp, #36	; 0x24
 8026d9c:	af00      	add	r7, sp, #0
 8026d9e:	60f8      	str	r0, [r7, #12]
 8026da0:	60b9      	str	r1, [r7, #8]
 8026da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8026da4:	68fb      	ldr	r3, [r7, #12]
 8026da6:	f003 0307 	and.w	r3, r3, #7
 8026daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8026dac:	69fb      	ldr	r3, [r7, #28]
 8026dae:	f1c3 0307 	rsb	r3, r3, #7
 8026db2:	2b04      	cmp	r3, #4
 8026db4:	bf28      	it	cs
 8026db6:	2304      	movcs	r3, #4
 8026db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8026dba:	69fb      	ldr	r3, [r7, #28]
 8026dbc:	3304      	adds	r3, #4
 8026dbe:	2b06      	cmp	r3, #6
 8026dc0:	d902      	bls.n	8026dc8 <NVIC_EncodePriority+0x30>
 8026dc2:	69fb      	ldr	r3, [r7, #28]
 8026dc4:	3b03      	subs	r3, #3
 8026dc6:	e000      	b.n	8026dca <NVIC_EncodePriority+0x32>
 8026dc8:	2300      	movs	r3, #0
 8026dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8026dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8026dd0:	69bb      	ldr	r3, [r7, #24]
 8026dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8026dd6:	43da      	mvns	r2, r3
 8026dd8:	68bb      	ldr	r3, [r7, #8]
 8026dda:	401a      	ands	r2, r3
 8026ddc:	697b      	ldr	r3, [r7, #20]
 8026dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8026de0:	f04f 31ff 	mov.w	r1, #4294967295
 8026de4:	697b      	ldr	r3, [r7, #20]
 8026de6:	fa01 f303 	lsl.w	r3, r1, r3
 8026dea:	43d9      	mvns	r1, r3
 8026dec:	687b      	ldr	r3, [r7, #4]
 8026dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8026df0:	4313      	orrs	r3, r2
         );
}
 8026df2:	4618      	mov	r0, r3
 8026df4:	3724      	adds	r7, #36	; 0x24
 8026df6:	46bd      	mov	sp, r7
 8026df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026dfc:	4770      	bx	lr
	...

08026e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8026e00:	b580      	push	{r7, lr}
 8026e02:	b082      	sub	sp, #8
 8026e04:	af00      	add	r7, sp, #0
 8026e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8026e08:	687b      	ldr	r3, [r7, #4]
 8026e0a:	3b01      	subs	r3, #1
 8026e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8026e10:	d301      	bcc.n	8026e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8026e12:	2301      	movs	r3, #1
 8026e14:	e00f      	b.n	8026e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8026e16:	4a0a      	ldr	r2, [pc, #40]	; (8026e40 <SysTick_Config+0x40>)
 8026e18:	687b      	ldr	r3, [r7, #4]
 8026e1a:	3b01      	subs	r3, #1
 8026e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8026e1e:	210f      	movs	r1, #15
 8026e20:	f04f 30ff 	mov.w	r0, #4294967295
 8026e24:	f7ff ff8e 	bl	8026d44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8026e28:	4b05      	ldr	r3, [pc, #20]	; (8026e40 <SysTick_Config+0x40>)
 8026e2a:	2200      	movs	r2, #0
 8026e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8026e2e:	4b04      	ldr	r3, [pc, #16]	; (8026e40 <SysTick_Config+0x40>)
 8026e30:	2207      	movs	r2, #7
 8026e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8026e34:	2300      	movs	r3, #0
}
 8026e36:	4618      	mov	r0, r3
 8026e38:	3708      	adds	r7, #8
 8026e3a:	46bd      	mov	sp, r7
 8026e3c:	bd80      	pop	{r7, pc}
 8026e3e:	bf00      	nop
 8026e40:	e000e010 	.word	0xe000e010

08026e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8026e44:	b580      	push	{r7, lr}
 8026e46:	b082      	sub	sp, #8
 8026e48:	af00      	add	r7, sp, #0
 8026e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8026e4c:	6878      	ldr	r0, [r7, #4]
 8026e4e:	f7ff ff29 	bl	8026ca4 <__NVIC_SetPriorityGrouping>
}
 8026e52:	bf00      	nop
 8026e54:	3708      	adds	r7, #8
 8026e56:	46bd      	mov	sp, r7
 8026e58:	bd80      	pop	{r7, pc}

08026e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8026e5a:	b580      	push	{r7, lr}
 8026e5c:	b086      	sub	sp, #24
 8026e5e:	af00      	add	r7, sp, #0
 8026e60:	4603      	mov	r3, r0
 8026e62:	60b9      	str	r1, [r7, #8]
 8026e64:	607a      	str	r2, [r7, #4]
 8026e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8026e68:	2300      	movs	r3, #0
 8026e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8026e6c:	f7ff ff3e 	bl	8026cec <__NVIC_GetPriorityGrouping>
 8026e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8026e72:	687a      	ldr	r2, [r7, #4]
 8026e74:	68b9      	ldr	r1, [r7, #8]
 8026e76:	6978      	ldr	r0, [r7, #20]
 8026e78:	f7ff ff8e 	bl	8026d98 <NVIC_EncodePriority>
 8026e7c:	4602      	mov	r2, r0
 8026e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8026e82:	4611      	mov	r1, r2
 8026e84:	4618      	mov	r0, r3
 8026e86:	f7ff ff5d 	bl	8026d44 <__NVIC_SetPriority>
}
 8026e8a:	bf00      	nop
 8026e8c:	3718      	adds	r7, #24
 8026e8e:	46bd      	mov	sp, r7
 8026e90:	bd80      	pop	{r7, pc}

08026e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8026e92:	b580      	push	{r7, lr}
 8026e94:	b082      	sub	sp, #8
 8026e96:	af00      	add	r7, sp, #0
 8026e98:	4603      	mov	r3, r0
 8026e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8026e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8026ea0:	4618      	mov	r0, r3
 8026ea2:	f7ff ff31 	bl	8026d08 <__NVIC_EnableIRQ>
}
 8026ea6:	bf00      	nop
 8026ea8:	3708      	adds	r7, #8
 8026eaa:	46bd      	mov	sp, r7
 8026eac:	bd80      	pop	{r7, pc}

08026eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8026eae:	b580      	push	{r7, lr}
 8026eb0:	b082      	sub	sp, #8
 8026eb2:	af00      	add	r7, sp, #0
 8026eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8026eb6:	6878      	ldr	r0, [r7, #4]
 8026eb8:	f7ff ffa2 	bl	8026e00 <SysTick_Config>
 8026ebc:	4603      	mov	r3, r0
}
 8026ebe:	4618      	mov	r0, r3
 8026ec0:	3708      	adds	r7, #8
 8026ec2:	46bd      	mov	sp, r7
 8026ec4:	bd80      	pop	{r7, pc}
	...

08026ec8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8026ec8:	b580      	push	{r7, lr}
 8026eca:	b086      	sub	sp, #24
 8026ecc:	af00      	add	r7, sp, #0
 8026ece:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8026ed0:	2300      	movs	r3, #0
 8026ed2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8026ed4:	f7ff fac4 	bl	8026460 <HAL_GetTick>
 8026ed8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8026eda:	687b      	ldr	r3, [r7, #4]
 8026edc:	2b00      	cmp	r3, #0
 8026ede:	d101      	bne.n	8026ee4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8026ee0:	2301      	movs	r3, #1
 8026ee2:	e099      	b.n	8027018 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8026ee4:	687b      	ldr	r3, [r7, #4]
 8026ee6:	2200      	movs	r2, #0
 8026ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8026eec:	687b      	ldr	r3, [r7, #4]
 8026eee:	2202      	movs	r2, #2
 8026ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8026ef4:	687b      	ldr	r3, [r7, #4]
 8026ef6:	681b      	ldr	r3, [r3, #0]
 8026ef8:	681a      	ldr	r2, [r3, #0]
 8026efa:	687b      	ldr	r3, [r7, #4]
 8026efc:	681b      	ldr	r3, [r3, #0]
 8026efe:	f022 0201 	bic.w	r2, r2, #1
 8026f02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8026f04:	e00f      	b.n	8026f26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8026f06:	f7ff faab 	bl	8026460 <HAL_GetTick>
 8026f0a:	4602      	mov	r2, r0
 8026f0c:	693b      	ldr	r3, [r7, #16]
 8026f0e:	1ad3      	subs	r3, r2, r3
 8026f10:	2b05      	cmp	r3, #5
 8026f12:	d908      	bls.n	8026f26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8026f14:	687b      	ldr	r3, [r7, #4]
 8026f16:	2220      	movs	r2, #32
 8026f18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8026f1a:	687b      	ldr	r3, [r7, #4]
 8026f1c:	2203      	movs	r2, #3
 8026f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8026f22:	2303      	movs	r3, #3
 8026f24:	e078      	b.n	8027018 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8026f26:	687b      	ldr	r3, [r7, #4]
 8026f28:	681b      	ldr	r3, [r3, #0]
 8026f2a:	681b      	ldr	r3, [r3, #0]
 8026f2c:	f003 0301 	and.w	r3, r3, #1
 8026f30:	2b00      	cmp	r3, #0
 8026f32:	d1e8      	bne.n	8026f06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8026f34:	687b      	ldr	r3, [r7, #4]
 8026f36:	681b      	ldr	r3, [r3, #0]
 8026f38:	681b      	ldr	r3, [r3, #0]
 8026f3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8026f3c:	697a      	ldr	r2, [r7, #20]
 8026f3e:	4b38      	ldr	r3, [pc, #224]	; (8027020 <HAL_DMA_Init+0x158>)
 8026f40:	4013      	ands	r3, r2
 8026f42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8026f44:	687b      	ldr	r3, [r7, #4]
 8026f46:	685a      	ldr	r2, [r3, #4]
 8026f48:	687b      	ldr	r3, [r7, #4]
 8026f4a:	689b      	ldr	r3, [r3, #8]
 8026f4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8026f4e:	687b      	ldr	r3, [r7, #4]
 8026f50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8026f52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8026f54:	687b      	ldr	r3, [r7, #4]
 8026f56:	691b      	ldr	r3, [r3, #16]
 8026f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8026f5a:	687b      	ldr	r3, [r7, #4]
 8026f5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8026f5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8026f60:	687b      	ldr	r3, [r7, #4]
 8026f62:	699b      	ldr	r3, [r3, #24]
 8026f64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8026f66:	687b      	ldr	r3, [r7, #4]
 8026f68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8026f6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8026f6c:	687b      	ldr	r3, [r7, #4]
 8026f6e:	6a1b      	ldr	r3, [r3, #32]
 8026f70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8026f72:	697a      	ldr	r2, [r7, #20]
 8026f74:	4313      	orrs	r3, r2
 8026f76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8026f78:	687b      	ldr	r3, [r7, #4]
 8026f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026f7c:	2b04      	cmp	r3, #4
 8026f7e:	d107      	bne.n	8026f90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8026f80:	687b      	ldr	r3, [r7, #4]
 8026f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026f84:	687b      	ldr	r3, [r7, #4]
 8026f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026f88:	4313      	orrs	r3, r2
 8026f8a:	697a      	ldr	r2, [r7, #20]
 8026f8c:	4313      	orrs	r3, r2
 8026f8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8026f90:	687b      	ldr	r3, [r7, #4]
 8026f92:	681b      	ldr	r3, [r3, #0]
 8026f94:	697a      	ldr	r2, [r7, #20]
 8026f96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8026f98:	687b      	ldr	r3, [r7, #4]
 8026f9a:	681b      	ldr	r3, [r3, #0]
 8026f9c:	695b      	ldr	r3, [r3, #20]
 8026f9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8026fa0:	697b      	ldr	r3, [r7, #20]
 8026fa2:	f023 0307 	bic.w	r3, r3, #7
 8026fa6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8026fa8:	687b      	ldr	r3, [r7, #4]
 8026faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026fac:	697a      	ldr	r2, [r7, #20]
 8026fae:	4313      	orrs	r3, r2
 8026fb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8026fb2:	687b      	ldr	r3, [r7, #4]
 8026fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026fb6:	2b04      	cmp	r3, #4
 8026fb8:	d117      	bne.n	8026fea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8026fba:	687b      	ldr	r3, [r7, #4]
 8026fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026fbe:	697a      	ldr	r2, [r7, #20]
 8026fc0:	4313      	orrs	r3, r2
 8026fc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8026fc4:	687b      	ldr	r3, [r7, #4]
 8026fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8026fc8:	2b00      	cmp	r3, #0
 8026fca:	d00e      	beq.n	8026fea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8026fcc:	6878      	ldr	r0, [r7, #4]
 8026fce:	f000 fa6f 	bl	80274b0 <DMA_CheckFifoParam>
 8026fd2:	4603      	mov	r3, r0
 8026fd4:	2b00      	cmp	r3, #0
 8026fd6:	d008      	beq.n	8026fea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8026fd8:	687b      	ldr	r3, [r7, #4]
 8026fda:	2240      	movs	r2, #64	; 0x40
 8026fdc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8026fde:	687b      	ldr	r3, [r7, #4]
 8026fe0:	2201      	movs	r2, #1
 8026fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8026fe6:	2301      	movs	r3, #1
 8026fe8:	e016      	b.n	8027018 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8026fea:	687b      	ldr	r3, [r7, #4]
 8026fec:	681b      	ldr	r3, [r3, #0]
 8026fee:	697a      	ldr	r2, [r7, #20]
 8026ff0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8026ff2:	6878      	ldr	r0, [r7, #4]
 8026ff4:	f000 fa26 	bl	8027444 <DMA_CalcBaseAndBitshift>
 8026ff8:	4603      	mov	r3, r0
 8026ffa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8026ffc:	687b      	ldr	r3, [r7, #4]
 8026ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027000:	223f      	movs	r2, #63	; 0x3f
 8027002:	409a      	lsls	r2, r3
 8027004:	68fb      	ldr	r3, [r7, #12]
 8027006:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8027008:	687b      	ldr	r3, [r7, #4]
 802700a:	2200      	movs	r2, #0
 802700c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 802700e:	687b      	ldr	r3, [r7, #4]
 8027010:	2201      	movs	r2, #1
 8027012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8027016:	2300      	movs	r3, #0
}
 8027018:	4618      	mov	r0, r3
 802701a:	3718      	adds	r7, #24
 802701c:	46bd      	mov	sp, r7
 802701e:	bd80      	pop	{r7, pc}
 8027020:	f010803f 	.word	0xf010803f

08027024 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8027024:	b580      	push	{r7, lr}
 8027026:	b086      	sub	sp, #24
 8027028:	af00      	add	r7, sp, #0
 802702a:	60f8      	str	r0, [r7, #12]
 802702c:	60b9      	str	r1, [r7, #8]
 802702e:	607a      	str	r2, [r7, #4]
 8027030:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8027032:	2300      	movs	r3, #0
 8027034:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8027036:	68fb      	ldr	r3, [r7, #12]
 8027038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802703a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 802703c:	68fb      	ldr	r3, [r7, #12]
 802703e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8027042:	2b01      	cmp	r3, #1
 8027044:	d101      	bne.n	802704a <HAL_DMA_Start_IT+0x26>
 8027046:	2302      	movs	r3, #2
 8027048:	e040      	b.n	80270cc <HAL_DMA_Start_IT+0xa8>
 802704a:	68fb      	ldr	r3, [r7, #12]
 802704c:	2201      	movs	r2, #1
 802704e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8027052:	68fb      	ldr	r3, [r7, #12]
 8027054:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8027058:	b2db      	uxtb	r3, r3
 802705a:	2b01      	cmp	r3, #1
 802705c:	d12f      	bne.n	80270be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802705e:	68fb      	ldr	r3, [r7, #12]
 8027060:	2202      	movs	r2, #2
 8027062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8027066:	68fb      	ldr	r3, [r7, #12]
 8027068:	2200      	movs	r2, #0
 802706a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 802706c:	683b      	ldr	r3, [r7, #0]
 802706e:	687a      	ldr	r2, [r7, #4]
 8027070:	68b9      	ldr	r1, [r7, #8]
 8027072:	68f8      	ldr	r0, [r7, #12]
 8027074:	f000 f9b8 	bl	80273e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8027078:	68fb      	ldr	r3, [r7, #12]
 802707a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802707c:	223f      	movs	r2, #63	; 0x3f
 802707e:	409a      	lsls	r2, r3
 8027080:	693b      	ldr	r3, [r7, #16]
 8027082:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8027084:	68fb      	ldr	r3, [r7, #12]
 8027086:	681b      	ldr	r3, [r3, #0]
 8027088:	681a      	ldr	r2, [r3, #0]
 802708a:	68fb      	ldr	r3, [r7, #12]
 802708c:	681b      	ldr	r3, [r3, #0]
 802708e:	f042 0216 	orr.w	r2, r2, #22
 8027092:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8027094:	68fb      	ldr	r3, [r7, #12]
 8027096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027098:	2b00      	cmp	r3, #0
 802709a:	d007      	beq.n	80270ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 802709c:	68fb      	ldr	r3, [r7, #12]
 802709e:	681b      	ldr	r3, [r3, #0]
 80270a0:	681a      	ldr	r2, [r3, #0]
 80270a2:	68fb      	ldr	r3, [r7, #12]
 80270a4:	681b      	ldr	r3, [r3, #0]
 80270a6:	f042 0208 	orr.w	r2, r2, #8
 80270aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80270ac:	68fb      	ldr	r3, [r7, #12]
 80270ae:	681b      	ldr	r3, [r3, #0]
 80270b0:	681a      	ldr	r2, [r3, #0]
 80270b2:	68fb      	ldr	r3, [r7, #12]
 80270b4:	681b      	ldr	r3, [r3, #0]
 80270b6:	f042 0201 	orr.w	r2, r2, #1
 80270ba:	601a      	str	r2, [r3, #0]
 80270bc:	e005      	b.n	80270ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80270be:	68fb      	ldr	r3, [r7, #12]
 80270c0:	2200      	movs	r2, #0
 80270c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80270c6:	2302      	movs	r3, #2
 80270c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80270ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80270cc:	4618      	mov	r0, r3
 80270ce:	3718      	adds	r7, #24
 80270d0:	46bd      	mov	sp, r7
 80270d2:	bd80      	pop	{r7, pc}

080270d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80270d4:	b580      	push	{r7, lr}
 80270d6:	b086      	sub	sp, #24
 80270d8:	af00      	add	r7, sp, #0
 80270da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80270dc:	2300      	movs	r3, #0
 80270de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80270e0:	4b92      	ldr	r3, [pc, #584]	; (802732c <HAL_DMA_IRQHandler+0x258>)
 80270e2:	681b      	ldr	r3, [r3, #0]
 80270e4:	4a92      	ldr	r2, [pc, #584]	; (8027330 <HAL_DMA_IRQHandler+0x25c>)
 80270e6:	fba2 2303 	umull	r2, r3, r2, r3
 80270ea:	0a9b      	lsrs	r3, r3, #10
 80270ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80270ee:	687b      	ldr	r3, [r7, #4]
 80270f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80270f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80270f4:	693b      	ldr	r3, [r7, #16]
 80270f6:	681b      	ldr	r3, [r3, #0]
 80270f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80270fa:	687b      	ldr	r3, [r7, #4]
 80270fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80270fe:	2208      	movs	r2, #8
 8027100:	409a      	lsls	r2, r3
 8027102:	68fb      	ldr	r3, [r7, #12]
 8027104:	4013      	ands	r3, r2
 8027106:	2b00      	cmp	r3, #0
 8027108:	d01a      	beq.n	8027140 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 802710a:	687b      	ldr	r3, [r7, #4]
 802710c:	681b      	ldr	r3, [r3, #0]
 802710e:	681b      	ldr	r3, [r3, #0]
 8027110:	f003 0304 	and.w	r3, r3, #4
 8027114:	2b00      	cmp	r3, #0
 8027116:	d013      	beq.n	8027140 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8027118:	687b      	ldr	r3, [r7, #4]
 802711a:	681b      	ldr	r3, [r3, #0]
 802711c:	681a      	ldr	r2, [r3, #0]
 802711e:	687b      	ldr	r3, [r7, #4]
 8027120:	681b      	ldr	r3, [r3, #0]
 8027122:	f022 0204 	bic.w	r2, r2, #4
 8027126:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8027128:	687b      	ldr	r3, [r7, #4]
 802712a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802712c:	2208      	movs	r2, #8
 802712e:	409a      	lsls	r2, r3
 8027130:	693b      	ldr	r3, [r7, #16]
 8027132:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8027134:	687b      	ldr	r3, [r7, #4]
 8027136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027138:	f043 0201 	orr.w	r2, r3, #1
 802713c:	687b      	ldr	r3, [r7, #4]
 802713e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8027140:	687b      	ldr	r3, [r7, #4]
 8027142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027144:	2201      	movs	r2, #1
 8027146:	409a      	lsls	r2, r3
 8027148:	68fb      	ldr	r3, [r7, #12]
 802714a:	4013      	ands	r3, r2
 802714c:	2b00      	cmp	r3, #0
 802714e:	d012      	beq.n	8027176 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8027150:	687b      	ldr	r3, [r7, #4]
 8027152:	681b      	ldr	r3, [r3, #0]
 8027154:	695b      	ldr	r3, [r3, #20]
 8027156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802715a:	2b00      	cmp	r3, #0
 802715c:	d00b      	beq.n	8027176 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 802715e:	687b      	ldr	r3, [r7, #4]
 8027160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027162:	2201      	movs	r2, #1
 8027164:	409a      	lsls	r2, r3
 8027166:	693b      	ldr	r3, [r7, #16]
 8027168:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 802716a:	687b      	ldr	r3, [r7, #4]
 802716c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802716e:	f043 0202 	orr.w	r2, r3, #2
 8027172:	687b      	ldr	r3, [r7, #4]
 8027174:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8027176:	687b      	ldr	r3, [r7, #4]
 8027178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802717a:	2204      	movs	r2, #4
 802717c:	409a      	lsls	r2, r3
 802717e:	68fb      	ldr	r3, [r7, #12]
 8027180:	4013      	ands	r3, r2
 8027182:	2b00      	cmp	r3, #0
 8027184:	d012      	beq.n	80271ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8027186:	687b      	ldr	r3, [r7, #4]
 8027188:	681b      	ldr	r3, [r3, #0]
 802718a:	681b      	ldr	r3, [r3, #0]
 802718c:	f003 0302 	and.w	r3, r3, #2
 8027190:	2b00      	cmp	r3, #0
 8027192:	d00b      	beq.n	80271ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8027194:	687b      	ldr	r3, [r7, #4]
 8027196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027198:	2204      	movs	r2, #4
 802719a:	409a      	lsls	r2, r3
 802719c:	693b      	ldr	r3, [r7, #16]
 802719e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80271a0:	687b      	ldr	r3, [r7, #4]
 80271a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80271a4:	f043 0204 	orr.w	r2, r3, #4
 80271a8:	687b      	ldr	r3, [r7, #4]
 80271aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80271ac:	687b      	ldr	r3, [r7, #4]
 80271ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80271b0:	2210      	movs	r2, #16
 80271b2:	409a      	lsls	r2, r3
 80271b4:	68fb      	ldr	r3, [r7, #12]
 80271b6:	4013      	ands	r3, r2
 80271b8:	2b00      	cmp	r3, #0
 80271ba:	d043      	beq.n	8027244 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80271bc:	687b      	ldr	r3, [r7, #4]
 80271be:	681b      	ldr	r3, [r3, #0]
 80271c0:	681b      	ldr	r3, [r3, #0]
 80271c2:	f003 0308 	and.w	r3, r3, #8
 80271c6:	2b00      	cmp	r3, #0
 80271c8:	d03c      	beq.n	8027244 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80271ca:	687b      	ldr	r3, [r7, #4]
 80271cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80271ce:	2210      	movs	r2, #16
 80271d0:	409a      	lsls	r2, r3
 80271d2:	693b      	ldr	r3, [r7, #16]
 80271d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80271d6:	687b      	ldr	r3, [r7, #4]
 80271d8:	681b      	ldr	r3, [r3, #0]
 80271da:	681b      	ldr	r3, [r3, #0]
 80271dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80271e0:	2b00      	cmp	r3, #0
 80271e2:	d018      	beq.n	8027216 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80271e4:	687b      	ldr	r3, [r7, #4]
 80271e6:	681b      	ldr	r3, [r3, #0]
 80271e8:	681b      	ldr	r3, [r3, #0]
 80271ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80271ee:	2b00      	cmp	r3, #0
 80271f0:	d108      	bne.n	8027204 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80271f2:	687b      	ldr	r3, [r7, #4]
 80271f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80271f6:	2b00      	cmp	r3, #0
 80271f8:	d024      	beq.n	8027244 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80271fa:	687b      	ldr	r3, [r7, #4]
 80271fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80271fe:	6878      	ldr	r0, [r7, #4]
 8027200:	4798      	blx	r3
 8027202:	e01f      	b.n	8027244 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8027204:	687b      	ldr	r3, [r7, #4]
 8027206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027208:	2b00      	cmp	r3, #0
 802720a:	d01b      	beq.n	8027244 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 802720c:	687b      	ldr	r3, [r7, #4]
 802720e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027210:	6878      	ldr	r0, [r7, #4]
 8027212:	4798      	blx	r3
 8027214:	e016      	b.n	8027244 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8027216:	687b      	ldr	r3, [r7, #4]
 8027218:	681b      	ldr	r3, [r3, #0]
 802721a:	681b      	ldr	r3, [r3, #0]
 802721c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027220:	2b00      	cmp	r3, #0
 8027222:	d107      	bne.n	8027234 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8027224:	687b      	ldr	r3, [r7, #4]
 8027226:	681b      	ldr	r3, [r3, #0]
 8027228:	681a      	ldr	r2, [r3, #0]
 802722a:	687b      	ldr	r3, [r7, #4]
 802722c:	681b      	ldr	r3, [r3, #0]
 802722e:	f022 0208 	bic.w	r2, r2, #8
 8027232:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8027234:	687b      	ldr	r3, [r7, #4]
 8027236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027238:	2b00      	cmp	r3, #0
 802723a:	d003      	beq.n	8027244 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 802723c:	687b      	ldr	r3, [r7, #4]
 802723e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027240:	6878      	ldr	r0, [r7, #4]
 8027242:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8027244:	687b      	ldr	r3, [r7, #4]
 8027246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027248:	2220      	movs	r2, #32
 802724a:	409a      	lsls	r2, r3
 802724c:	68fb      	ldr	r3, [r7, #12]
 802724e:	4013      	ands	r3, r2
 8027250:	2b00      	cmp	r3, #0
 8027252:	f000 808e 	beq.w	8027372 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8027256:	687b      	ldr	r3, [r7, #4]
 8027258:	681b      	ldr	r3, [r3, #0]
 802725a:	681b      	ldr	r3, [r3, #0]
 802725c:	f003 0310 	and.w	r3, r3, #16
 8027260:	2b00      	cmp	r3, #0
 8027262:	f000 8086 	beq.w	8027372 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8027266:	687b      	ldr	r3, [r7, #4]
 8027268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802726a:	2220      	movs	r2, #32
 802726c:	409a      	lsls	r2, r3
 802726e:	693b      	ldr	r3, [r7, #16]
 8027270:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8027272:	687b      	ldr	r3, [r7, #4]
 8027274:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8027278:	b2db      	uxtb	r3, r3
 802727a:	2b05      	cmp	r3, #5
 802727c:	d136      	bne.n	80272ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 802727e:	687b      	ldr	r3, [r7, #4]
 8027280:	681b      	ldr	r3, [r3, #0]
 8027282:	681a      	ldr	r2, [r3, #0]
 8027284:	687b      	ldr	r3, [r7, #4]
 8027286:	681b      	ldr	r3, [r3, #0]
 8027288:	f022 0216 	bic.w	r2, r2, #22
 802728c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 802728e:	687b      	ldr	r3, [r7, #4]
 8027290:	681b      	ldr	r3, [r3, #0]
 8027292:	695a      	ldr	r2, [r3, #20]
 8027294:	687b      	ldr	r3, [r7, #4]
 8027296:	681b      	ldr	r3, [r3, #0]
 8027298:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802729c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 802729e:	687b      	ldr	r3, [r7, #4]
 80272a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80272a2:	2b00      	cmp	r3, #0
 80272a4:	d103      	bne.n	80272ae <HAL_DMA_IRQHandler+0x1da>
 80272a6:	687b      	ldr	r3, [r7, #4]
 80272a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80272aa:	2b00      	cmp	r3, #0
 80272ac:	d007      	beq.n	80272be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80272ae:	687b      	ldr	r3, [r7, #4]
 80272b0:	681b      	ldr	r3, [r3, #0]
 80272b2:	681a      	ldr	r2, [r3, #0]
 80272b4:	687b      	ldr	r3, [r7, #4]
 80272b6:	681b      	ldr	r3, [r3, #0]
 80272b8:	f022 0208 	bic.w	r2, r2, #8
 80272bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80272be:	687b      	ldr	r3, [r7, #4]
 80272c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80272c2:	223f      	movs	r2, #63	; 0x3f
 80272c4:	409a      	lsls	r2, r3
 80272c6:	693b      	ldr	r3, [r7, #16]
 80272c8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80272ca:	687b      	ldr	r3, [r7, #4]
 80272cc:	2200      	movs	r2, #0
 80272ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80272d2:	687b      	ldr	r3, [r7, #4]
 80272d4:	2201      	movs	r2, #1
 80272d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80272da:	687b      	ldr	r3, [r7, #4]
 80272dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80272de:	2b00      	cmp	r3, #0
 80272e0:	d07d      	beq.n	80273de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80272e2:	687b      	ldr	r3, [r7, #4]
 80272e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80272e6:	6878      	ldr	r0, [r7, #4]
 80272e8:	4798      	blx	r3
        }
        return;
 80272ea:	e078      	b.n	80273de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80272ec:	687b      	ldr	r3, [r7, #4]
 80272ee:	681b      	ldr	r3, [r3, #0]
 80272f0:	681b      	ldr	r3, [r3, #0]
 80272f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80272f6:	2b00      	cmp	r3, #0
 80272f8:	d01c      	beq.n	8027334 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80272fa:	687b      	ldr	r3, [r7, #4]
 80272fc:	681b      	ldr	r3, [r3, #0]
 80272fe:	681b      	ldr	r3, [r3, #0]
 8027300:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8027304:	2b00      	cmp	r3, #0
 8027306:	d108      	bne.n	802731a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8027308:	687b      	ldr	r3, [r7, #4]
 802730a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802730c:	2b00      	cmp	r3, #0
 802730e:	d030      	beq.n	8027372 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8027310:	687b      	ldr	r3, [r7, #4]
 8027312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027314:	6878      	ldr	r0, [r7, #4]
 8027316:	4798      	blx	r3
 8027318:	e02b      	b.n	8027372 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 802731a:	687b      	ldr	r3, [r7, #4]
 802731c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802731e:	2b00      	cmp	r3, #0
 8027320:	d027      	beq.n	8027372 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8027322:	687b      	ldr	r3, [r7, #4]
 8027324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027326:	6878      	ldr	r0, [r7, #4]
 8027328:	4798      	blx	r3
 802732a:	e022      	b.n	8027372 <HAL_DMA_IRQHandler+0x29e>
 802732c:	20000014 	.word	0x20000014
 8027330:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8027334:	687b      	ldr	r3, [r7, #4]
 8027336:	681b      	ldr	r3, [r3, #0]
 8027338:	681b      	ldr	r3, [r3, #0]
 802733a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802733e:	2b00      	cmp	r3, #0
 8027340:	d10f      	bne.n	8027362 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8027342:	687b      	ldr	r3, [r7, #4]
 8027344:	681b      	ldr	r3, [r3, #0]
 8027346:	681a      	ldr	r2, [r3, #0]
 8027348:	687b      	ldr	r3, [r7, #4]
 802734a:	681b      	ldr	r3, [r3, #0]
 802734c:	f022 0210 	bic.w	r2, r2, #16
 8027350:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8027352:	687b      	ldr	r3, [r7, #4]
 8027354:	2200      	movs	r2, #0
 8027356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802735a:	687b      	ldr	r3, [r7, #4]
 802735c:	2201      	movs	r2, #1
 802735e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8027362:	687b      	ldr	r3, [r7, #4]
 8027364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027366:	2b00      	cmp	r3, #0
 8027368:	d003      	beq.n	8027372 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 802736a:	687b      	ldr	r3, [r7, #4]
 802736c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802736e:	6878      	ldr	r0, [r7, #4]
 8027370:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8027372:	687b      	ldr	r3, [r7, #4]
 8027374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027376:	2b00      	cmp	r3, #0
 8027378:	d032      	beq.n	80273e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 802737a:	687b      	ldr	r3, [r7, #4]
 802737c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802737e:	f003 0301 	and.w	r3, r3, #1
 8027382:	2b00      	cmp	r3, #0
 8027384:	d022      	beq.n	80273cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8027386:	687b      	ldr	r3, [r7, #4]
 8027388:	2205      	movs	r2, #5
 802738a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 802738e:	687b      	ldr	r3, [r7, #4]
 8027390:	681b      	ldr	r3, [r3, #0]
 8027392:	681a      	ldr	r2, [r3, #0]
 8027394:	687b      	ldr	r3, [r7, #4]
 8027396:	681b      	ldr	r3, [r3, #0]
 8027398:	f022 0201 	bic.w	r2, r2, #1
 802739c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 802739e:	68bb      	ldr	r3, [r7, #8]
 80273a0:	3301      	adds	r3, #1
 80273a2:	60bb      	str	r3, [r7, #8]
 80273a4:	697a      	ldr	r2, [r7, #20]
 80273a6:	429a      	cmp	r2, r3
 80273a8:	d307      	bcc.n	80273ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80273aa:	687b      	ldr	r3, [r7, #4]
 80273ac:	681b      	ldr	r3, [r3, #0]
 80273ae:	681b      	ldr	r3, [r3, #0]
 80273b0:	f003 0301 	and.w	r3, r3, #1
 80273b4:	2b00      	cmp	r3, #0
 80273b6:	d1f2      	bne.n	802739e <HAL_DMA_IRQHandler+0x2ca>
 80273b8:	e000      	b.n	80273bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80273ba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80273bc:	687b      	ldr	r3, [r7, #4]
 80273be:	2200      	movs	r2, #0
 80273c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80273c4:	687b      	ldr	r3, [r7, #4]
 80273c6:	2201      	movs	r2, #1
 80273c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80273cc:	687b      	ldr	r3, [r7, #4]
 80273ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80273d0:	2b00      	cmp	r3, #0
 80273d2:	d005      	beq.n	80273e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80273d4:	687b      	ldr	r3, [r7, #4]
 80273d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80273d8:	6878      	ldr	r0, [r7, #4]
 80273da:	4798      	blx	r3
 80273dc:	e000      	b.n	80273e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80273de:	bf00      	nop
    }
  }
}
 80273e0:	3718      	adds	r7, #24
 80273e2:	46bd      	mov	sp, r7
 80273e4:	bd80      	pop	{r7, pc}
 80273e6:	bf00      	nop

080273e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80273e8:	b480      	push	{r7}
 80273ea:	b085      	sub	sp, #20
 80273ec:	af00      	add	r7, sp, #0
 80273ee:	60f8      	str	r0, [r7, #12]
 80273f0:	60b9      	str	r1, [r7, #8]
 80273f2:	607a      	str	r2, [r7, #4]
 80273f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80273f6:	68fb      	ldr	r3, [r7, #12]
 80273f8:	681b      	ldr	r3, [r3, #0]
 80273fa:	681a      	ldr	r2, [r3, #0]
 80273fc:	68fb      	ldr	r3, [r7, #12]
 80273fe:	681b      	ldr	r3, [r3, #0]
 8027400:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8027404:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8027406:	68fb      	ldr	r3, [r7, #12]
 8027408:	681b      	ldr	r3, [r3, #0]
 802740a:	683a      	ldr	r2, [r7, #0]
 802740c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 802740e:	68fb      	ldr	r3, [r7, #12]
 8027410:	689b      	ldr	r3, [r3, #8]
 8027412:	2b40      	cmp	r3, #64	; 0x40
 8027414:	d108      	bne.n	8027428 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8027416:	68fb      	ldr	r3, [r7, #12]
 8027418:	681b      	ldr	r3, [r3, #0]
 802741a:	687a      	ldr	r2, [r7, #4]
 802741c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 802741e:	68fb      	ldr	r3, [r7, #12]
 8027420:	681b      	ldr	r3, [r3, #0]
 8027422:	68ba      	ldr	r2, [r7, #8]
 8027424:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8027426:	e007      	b.n	8027438 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8027428:	68fb      	ldr	r3, [r7, #12]
 802742a:	681b      	ldr	r3, [r3, #0]
 802742c:	68ba      	ldr	r2, [r7, #8]
 802742e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8027430:	68fb      	ldr	r3, [r7, #12]
 8027432:	681b      	ldr	r3, [r3, #0]
 8027434:	687a      	ldr	r2, [r7, #4]
 8027436:	60da      	str	r2, [r3, #12]
}
 8027438:	bf00      	nop
 802743a:	3714      	adds	r7, #20
 802743c:	46bd      	mov	sp, r7
 802743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027442:	4770      	bx	lr

08027444 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8027444:	b480      	push	{r7}
 8027446:	b085      	sub	sp, #20
 8027448:	af00      	add	r7, sp, #0
 802744a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 802744c:	687b      	ldr	r3, [r7, #4]
 802744e:	681b      	ldr	r3, [r3, #0]
 8027450:	b2db      	uxtb	r3, r3
 8027452:	3b10      	subs	r3, #16
 8027454:	4a14      	ldr	r2, [pc, #80]	; (80274a8 <DMA_CalcBaseAndBitshift+0x64>)
 8027456:	fba2 2303 	umull	r2, r3, r2, r3
 802745a:	091b      	lsrs	r3, r3, #4
 802745c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 802745e:	4a13      	ldr	r2, [pc, #76]	; (80274ac <DMA_CalcBaseAndBitshift+0x68>)
 8027460:	68fb      	ldr	r3, [r7, #12]
 8027462:	4413      	add	r3, r2
 8027464:	781b      	ldrb	r3, [r3, #0]
 8027466:	461a      	mov	r2, r3
 8027468:	687b      	ldr	r3, [r7, #4]
 802746a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 802746c:	68fb      	ldr	r3, [r7, #12]
 802746e:	2b03      	cmp	r3, #3
 8027470:	d909      	bls.n	8027486 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8027472:	687b      	ldr	r3, [r7, #4]
 8027474:	681b      	ldr	r3, [r3, #0]
 8027476:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 802747a:	f023 0303 	bic.w	r3, r3, #3
 802747e:	1d1a      	adds	r2, r3, #4
 8027480:	687b      	ldr	r3, [r7, #4]
 8027482:	659a      	str	r2, [r3, #88]	; 0x58
 8027484:	e007      	b.n	8027496 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8027486:	687b      	ldr	r3, [r7, #4]
 8027488:	681b      	ldr	r3, [r3, #0]
 802748a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 802748e:	f023 0303 	bic.w	r3, r3, #3
 8027492:	687a      	ldr	r2, [r7, #4]
 8027494:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8027496:	687b      	ldr	r3, [r7, #4]
 8027498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 802749a:	4618      	mov	r0, r3
 802749c:	3714      	adds	r7, #20
 802749e:	46bd      	mov	sp, r7
 80274a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80274a4:	4770      	bx	lr
 80274a6:	bf00      	nop
 80274a8:	aaaaaaab 	.word	0xaaaaaaab
 80274ac:	0802a554 	.word	0x0802a554

080274b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80274b0:	b480      	push	{r7}
 80274b2:	b085      	sub	sp, #20
 80274b4:	af00      	add	r7, sp, #0
 80274b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80274b8:	2300      	movs	r3, #0
 80274ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80274bc:	687b      	ldr	r3, [r7, #4]
 80274be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80274c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80274c2:	687b      	ldr	r3, [r7, #4]
 80274c4:	699b      	ldr	r3, [r3, #24]
 80274c6:	2b00      	cmp	r3, #0
 80274c8:	d11f      	bne.n	802750a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80274ca:	68bb      	ldr	r3, [r7, #8]
 80274cc:	2b03      	cmp	r3, #3
 80274ce:	d855      	bhi.n	802757c <DMA_CheckFifoParam+0xcc>
 80274d0:	a201      	add	r2, pc, #4	; (adr r2, 80274d8 <DMA_CheckFifoParam+0x28>)
 80274d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80274d6:	bf00      	nop
 80274d8:	080274e9 	.word	0x080274e9
 80274dc:	080274fb 	.word	0x080274fb
 80274e0:	080274e9 	.word	0x080274e9
 80274e4:	0802757d 	.word	0x0802757d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80274e8:	687b      	ldr	r3, [r7, #4]
 80274ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80274ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80274f0:	2b00      	cmp	r3, #0
 80274f2:	d045      	beq.n	8027580 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80274f4:	2301      	movs	r3, #1
 80274f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80274f8:	e042      	b.n	8027580 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80274fa:	687b      	ldr	r3, [r7, #4]
 80274fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80274fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8027502:	d13f      	bne.n	8027584 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8027504:	2301      	movs	r3, #1
 8027506:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8027508:	e03c      	b.n	8027584 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 802750a:	687b      	ldr	r3, [r7, #4]
 802750c:	699b      	ldr	r3, [r3, #24]
 802750e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8027512:	d121      	bne.n	8027558 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8027514:	68bb      	ldr	r3, [r7, #8]
 8027516:	2b03      	cmp	r3, #3
 8027518:	d836      	bhi.n	8027588 <DMA_CheckFifoParam+0xd8>
 802751a:	a201      	add	r2, pc, #4	; (adr r2, 8027520 <DMA_CheckFifoParam+0x70>)
 802751c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027520:	08027531 	.word	0x08027531
 8027524:	08027537 	.word	0x08027537
 8027528:	08027531 	.word	0x08027531
 802752c:	08027549 	.word	0x08027549
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8027530:	2301      	movs	r3, #1
 8027532:	73fb      	strb	r3, [r7, #15]
      break;
 8027534:	e02f      	b.n	8027596 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8027536:	687b      	ldr	r3, [r7, #4]
 8027538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802753a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802753e:	2b00      	cmp	r3, #0
 8027540:	d024      	beq.n	802758c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8027542:	2301      	movs	r3, #1
 8027544:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8027546:	e021      	b.n	802758c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8027548:	687b      	ldr	r3, [r7, #4]
 802754a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802754c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8027550:	d11e      	bne.n	8027590 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8027552:	2301      	movs	r3, #1
 8027554:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8027556:	e01b      	b.n	8027590 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8027558:	68bb      	ldr	r3, [r7, #8]
 802755a:	2b02      	cmp	r3, #2
 802755c:	d902      	bls.n	8027564 <DMA_CheckFifoParam+0xb4>
 802755e:	2b03      	cmp	r3, #3
 8027560:	d003      	beq.n	802756a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8027562:	e018      	b.n	8027596 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8027564:	2301      	movs	r3, #1
 8027566:	73fb      	strb	r3, [r7, #15]
      break;
 8027568:	e015      	b.n	8027596 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802756a:	687b      	ldr	r3, [r7, #4]
 802756c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802756e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8027572:	2b00      	cmp	r3, #0
 8027574:	d00e      	beq.n	8027594 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8027576:	2301      	movs	r3, #1
 8027578:	73fb      	strb	r3, [r7, #15]
      break;
 802757a:	e00b      	b.n	8027594 <DMA_CheckFifoParam+0xe4>
      break;
 802757c:	bf00      	nop
 802757e:	e00a      	b.n	8027596 <DMA_CheckFifoParam+0xe6>
      break;
 8027580:	bf00      	nop
 8027582:	e008      	b.n	8027596 <DMA_CheckFifoParam+0xe6>
      break;
 8027584:	bf00      	nop
 8027586:	e006      	b.n	8027596 <DMA_CheckFifoParam+0xe6>
      break;
 8027588:	bf00      	nop
 802758a:	e004      	b.n	8027596 <DMA_CheckFifoParam+0xe6>
      break;
 802758c:	bf00      	nop
 802758e:	e002      	b.n	8027596 <DMA_CheckFifoParam+0xe6>
      break;   
 8027590:	bf00      	nop
 8027592:	e000      	b.n	8027596 <DMA_CheckFifoParam+0xe6>
      break;
 8027594:	bf00      	nop
    }
  } 
  
  return status; 
 8027596:	7bfb      	ldrb	r3, [r7, #15]
}
 8027598:	4618      	mov	r0, r3
 802759a:	3714      	adds	r7, #20
 802759c:	46bd      	mov	sp, r7
 802759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80275a2:	4770      	bx	lr

080275a4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80275a4:	b580      	push	{r7, lr}
 80275a6:	b086      	sub	sp, #24
 80275a8:	af00      	add	r7, sp, #0
 80275aa:	60f8      	str	r0, [r7, #12]
 80275ac:	60b9      	str	r1, [r7, #8]
 80275ae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80275b2:	2301      	movs	r3, #1
 80275b4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80275b6:	4b23      	ldr	r3, [pc, #140]	; (8027644 <HAL_FLASH_Program+0xa0>)
 80275b8:	7e1b      	ldrb	r3, [r3, #24]
 80275ba:	2b01      	cmp	r3, #1
 80275bc:	d101      	bne.n	80275c2 <HAL_FLASH_Program+0x1e>
 80275be:	2302      	movs	r3, #2
 80275c0:	e03b      	b.n	802763a <HAL_FLASH_Program+0x96>
 80275c2:	4b20      	ldr	r3, [pc, #128]	; (8027644 <HAL_FLASH_Program+0xa0>)
 80275c4:	2201      	movs	r2, #1
 80275c6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80275c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80275cc:	f000 f870 	bl	80276b0 <FLASH_WaitForLastOperation>
 80275d0:	4603      	mov	r3, r0
 80275d2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80275d4:	7dfb      	ldrb	r3, [r7, #23]
 80275d6:	2b00      	cmp	r3, #0
 80275d8:	d12b      	bne.n	8027632 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80275da:	68fb      	ldr	r3, [r7, #12]
 80275dc:	2b00      	cmp	r3, #0
 80275de:	d105      	bne.n	80275ec <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80275e0:	783b      	ldrb	r3, [r7, #0]
 80275e2:	4619      	mov	r1, r3
 80275e4:	68b8      	ldr	r0, [r7, #8]
 80275e6:	f000 f919 	bl	802781c <FLASH_Program_Byte>
 80275ea:	e016      	b.n	802761a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80275ec:	68fb      	ldr	r3, [r7, #12]
 80275ee:	2b01      	cmp	r3, #1
 80275f0:	d105      	bne.n	80275fe <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80275f2:	883b      	ldrh	r3, [r7, #0]
 80275f4:	4619      	mov	r1, r3
 80275f6:	68b8      	ldr	r0, [r7, #8]
 80275f8:	f000 f8ec 	bl	80277d4 <FLASH_Program_HalfWord>
 80275fc:	e00d      	b.n	802761a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80275fe:	68fb      	ldr	r3, [r7, #12]
 8027600:	2b02      	cmp	r3, #2
 8027602:	d105      	bne.n	8027610 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8027604:	683b      	ldr	r3, [r7, #0]
 8027606:	4619      	mov	r1, r3
 8027608:	68b8      	ldr	r0, [r7, #8]
 802760a:	f000 f8c1 	bl	8027790 <FLASH_Program_Word>
 802760e:	e004      	b.n	802761a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8027610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8027614:	68b8      	ldr	r0, [r7, #8]
 8027616:	f000 f88b 	bl	8027730 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 802761a:	f24c 3050 	movw	r0, #50000	; 0xc350
 802761e:	f000 f847 	bl	80276b0 <FLASH_WaitForLastOperation>
 8027622:	4603      	mov	r3, r0
 8027624:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8027626:	4b08      	ldr	r3, [pc, #32]	; (8027648 <HAL_FLASH_Program+0xa4>)
 8027628:	691b      	ldr	r3, [r3, #16]
 802762a:	4a07      	ldr	r2, [pc, #28]	; (8027648 <HAL_FLASH_Program+0xa4>)
 802762c:	f023 0301 	bic.w	r3, r3, #1
 8027630:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8027632:	4b04      	ldr	r3, [pc, #16]	; (8027644 <HAL_FLASH_Program+0xa0>)
 8027634:	2200      	movs	r2, #0
 8027636:	761a      	strb	r2, [r3, #24]
  
  return status;
 8027638:	7dfb      	ldrb	r3, [r7, #23]
}
 802763a:	4618      	mov	r0, r3
 802763c:	3718      	adds	r7, #24
 802763e:	46bd      	mov	sp, r7
 8027640:	bd80      	pop	{r7, pc}
 8027642:	bf00      	nop
 8027644:	20000a14 	.word	0x20000a14
 8027648:	40023c00 	.word	0x40023c00

0802764c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 802764c:	b480      	push	{r7}
 802764e:	b083      	sub	sp, #12
 8027650:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8027652:	2300      	movs	r3, #0
 8027654:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8027656:	4b0b      	ldr	r3, [pc, #44]	; (8027684 <HAL_FLASH_Unlock+0x38>)
 8027658:	691b      	ldr	r3, [r3, #16]
 802765a:	2b00      	cmp	r3, #0
 802765c:	da0b      	bge.n	8027676 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 802765e:	4b09      	ldr	r3, [pc, #36]	; (8027684 <HAL_FLASH_Unlock+0x38>)
 8027660:	4a09      	ldr	r2, [pc, #36]	; (8027688 <HAL_FLASH_Unlock+0x3c>)
 8027662:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8027664:	4b07      	ldr	r3, [pc, #28]	; (8027684 <HAL_FLASH_Unlock+0x38>)
 8027666:	4a09      	ldr	r2, [pc, #36]	; (802768c <HAL_FLASH_Unlock+0x40>)
 8027668:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 802766a:	4b06      	ldr	r3, [pc, #24]	; (8027684 <HAL_FLASH_Unlock+0x38>)
 802766c:	691b      	ldr	r3, [r3, #16]
 802766e:	2b00      	cmp	r3, #0
 8027670:	da01      	bge.n	8027676 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8027672:	2301      	movs	r3, #1
 8027674:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8027676:	79fb      	ldrb	r3, [r7, #7]
}
 8027678:	4618      	mov	r0, r3
 802767a:	370c      	adds	r7, #12
 802767c:	46bd      	mov	sp, r7
 802767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027682:	4770      	bx	lr
 8027684:	40023c00 	.word	0x40023c00
 8027688:	45670123 	.word	0x45670123
 802768c:	cdef89ab 	.word	0xcdef89ab

08027690 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8027690:	b480      	push	{r7}
 8027692:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8027694:	4b05      	ldr	r3, [pc, #20]	; (80276ac <HAL_FLASH_Lock+0x1c>)
 8027696:	691b      	ldr	r3, [r3, #16]
 8027698:	4a04      	ldr	r2, [pc, #16]	; (80276ac <HAL_FLASH_Lock+0x1c>)
 802769a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802769e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80276a0:	2300      	movs	r3, #0
}
 80276a2:	4618      	mov	r0, r3
 80276a4:	46bd      	mov	sp, r7
 80276a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80276aa:	4770      	bx	lr
 80276ac:	40023c00 	.word	0x40023c00

080276b0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80276b0:	b580      	push	{r7, lr}
 80276b2:	b084      	sub	sp, #16
 80276b4:	af00      	add	r7, sp, #0
 80276b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80276b8:	2300      	movs	r3, #0
 80276ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80276bc:	4b1a      	ldr	r3, [pc, #104]	; (8027728 <FLASH_WaitForLastOperation+0x78>)
 80276be:	2200      	movs	r2, #0
 80276c0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80276c2:	f7fe fecd 	bl	8026460 <HAL_GetTick>
 80276c6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80276c8:	e010      	b.n	80276ec <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80276ca:	687b      	ldr	r3, [r7, #4]
 80276cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80276d0:	d00c      	beq.n	80276ec <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80276d2:	687b      	ldr	r3, [r7, #4]
 80276d4:	2b00      	cmp	r3, #0
 80276d6:	d007      	beq.n	80276e8 <FLASH_WaitForLastOperation+0x38>
 80276d8:	f7fe fec2 	bl	8026460 <HAL_GetTick>
 80276dc:	4602      	mov	r2, r0
 80276de:	68fb      	ldr	r3, [r7, #12]
 80276e0:	1ad3      	subs	r3, r2, r3
 80276e2:	687a      	ldr	r2, [r7, #4]
 80276e4:	429a      	cmp	r2, r3
 80276e6:	d201      	bcs.n	80276ec <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80276e8:	2303      	movs	r3, #3
 80276ea:	e019      	b.n	8027720 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80276ec:	4b0f      	ldr	r3, [pc, #60]	; (802772c <FLASH_WaitForLastOperation+0x7c>)
 80276ee:	68db      	ldr	r3, [r3, #12]
 80276f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80276f4:	2b00      	cmp	r3, #0
 80276f6:	d1e8      	bne.n	80276ca <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80276f8:	4b0c      	ldr	r3, [pc, #48]	; (802772c <FLASH_WaitForLastOperation+0x7c>)
 80276fa:	68db      	ldr	r3, [r3, #12]
 80276fc:	f003 0301 	and.w	r3, r3, #1
 8027700:	2b00      	cmp	r3, #0
 8027702:	d002      	beq.n	802770a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8027704:	4b09      	ldr	r3, [pc, #36]	; (802772c <FLASH_WaitForLastOperation+0x7c>)
 8027706:	2201      	movs	r2, #1
 8027708:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 802770a:	4b08      	ldr	r3, [pc, #32]	; (802772c <FLASH_WaitForLastOperation+0x7c>)
 802770c:	68db      	ldr	r3, [r3, #12]
 802770e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8027712:	2b00      	cmp	r3, #0
 8027714:	d003      	beq.n	802771e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8027716:	f000 f8a3 	bl	8027860 <FLASH_SetErrorCode>
    return HAL_ERROR;
 802771a:	2301      	movs	r3, #1
 802771c:	e000      	b.n	8027720 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 802771e:	2300      	movs	r3, #0
  
}  
 8027720:	4618      	mov	r0, r3
 8027722:	3710      	adds	r7, #16
 8027724:	46bd      	mov	sp, r7
 8027726:	bd80      	pop	{r7, pc}
 8027728:	20000a14 	.word	0x20000a14
 802772c:	40023c00 	.word	0x40023c00

08027730 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8027730:	b490      	push	{r4, r7}
 8027732:	b084      	sub	sp, #16
 8027734:	af00      	add	r7, sp, #0
 8027736:	60f8      	str	r0, [r7, #12]
 8027738:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802773c:	4b13      	ldr	r3, [pc, #76]	; (802778c <FLASH_Program_DoubleWord+0x5c>)
 802773e:	691b      	ldr	r3, [r3, #16]
 8027740:	4a12      	ldr	r2, [pc, #72]	; (802778c <FLASH_Program_DoubleWord+0x5c>)
 8027742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027746:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8027748:	4b10      	ldr	r3, [pc, #64]	; (802778c <FLASH_Program_DoubleWord+0x5c>)
 802774a:	691b      	ldr	r3, [r3, #16]
 802774c:	4a0f      	ldr	r2, [pc, #60]	; (802778c <FLASH_Program_DoubleWord+0x5c>)
 802774e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8027752:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027754:	4b0d      	ldr	r3, [pc, #52]	; (802778c <FLASH_Program_DoubleWord+0x5c>)
 8027756:	691b      	ldr	r3, [r3, #16]
 8027758:	4a0c      	ldr	r2, [pc, #48]	; (802778c <FLASH_Program_DoubleWord+0x5c>)
 802775a:	f043 0301 	orr.w	r3, r3, #1
 802775e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8027760:	68fb      	ldr	r3, [r7, #12]
 8027762:	683a      	ldr	r2, [r7, #0]
 8027764:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8027766:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 802776a:	e9d7 1200 	ldrd	r1, r2, [r7]
 802776e:	f04f 0300 	mov.w	r3, #0
 8027772:	f04f 0400 	mov.w	r4, #0
 8027776:	0013      	movs	r3, r2
 8027778:	2400      	movs	r4, #0
 802777a:	68fa      	ldr	r2, [r7, #12]
 802777c:	3204      	adds	r2, #4
 802777e:	6013      	str	r3, [r2, #0]
}
 8027780:	bf00      	nop
 8027782:	3710      	adds	r7, #16
 8027784:	46bd      	mov	sp, r7
 8027786:	bc90      	pop	{r4, r7}
 8027788:	4770      	bx	lr
 802778a:	bf00      	nop
 802778c:	40023c00 	.word	0x40023c00

08027790 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8027790:	b480      	push	{r7}
 8027792:	b083      	sub	sp, #12
 8027794:	af00      	add	r7, sp, #0
 8027796:	6078      	str	r0, [r7, #4]
 8027798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802779a:	4b0d      	ldr	r3, [pc, #52]	; (80277d0 <FLASH_Program_Word+0x40>)
 802779c:	691b      	ldr	r3, [r3, #16]
 802779e:	4a0c      	ldr	r2, [pc, #48]	; (80277d0 <FLASH_Program_Word+0x40>)
 80277a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80277a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80277a6:	4b0a      	ldr	r3, [pc, #40]	; (80277d0 <FLASH_Program_Word+0x40>)
 80277a8:	691b      	ldr	r3, [r3, #16]
 80277aa:	4a09      	ldr	r2, [pc, #36]	; (80277d0 <FLASH_Program_Word+0x40>)
 80277ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80277b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80277b2:	4b07      	ldr	r3, [pc, #28]	; (80277d0 <FLASH_Program_Word+0x40>)
 80277b4:	691b      	ldr	r3, [r3, #16]
 80277b6:	4a06      	ldr	r2, [pc, #24]	; (80277d0 <FLASH_Program_Word+0x40>)
 80277b8:	f043 0301 	orr.w	r3, r3, #1
 80277bc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80277be:	687b      	ldr	r3, [r7, #4]
 80277c0:	683a      	ldr	r2, [r7, #0]
 80277c2:	601a      	str	r2, [r3, #0]
}
 80277c4:	bf00      	nop
 80277c6:	370c      	adds	r7, #12
 80277c8:	46bd      	mov	sp, r7
 80277ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80277ce:	4770      	bx	lr
 80277d0:	40023c00 	.word	0x40023c00

080277d4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80277d4:	b480      	push	{r7}
 80277d6:	b083      	sub	sp, #12
 80277d8:	af00      	add	r7, sp, #0
 80277da:	6078      	str	r0, [r7, #4]
 80277dc:	460b      	mov	r3, r1
 80277de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80277e0:	4b0d      	ldr	r3, [pc, #52]	; (8027818 <FLASH_Program_HalfWord+0x44>)
 80277e2:	691b      	ldr	r3, [r3, #16]
 80277e4:	4a0c      	ldr	r2, [pc, #48]	; (8027818 <FLASH_Program_HalfWord+0x44>)
 80277e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80277ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80277ec:	4b0a      	ldr	r3, [pc, #40]	; (8027818 <FLASH_Program_HalfWord+0x44>)
 80277ee:	691b      	ldr	r3, [r3, #16]
 80277f0:	4a09      	ldr	r2, [pc, #36]	; (8027818 <FLASH_Program_HalfWord+0x44>)
 80277f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80277f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80277f8:	4b07      	ldr	r3, [pc, #28]	; (8027818 <FLASH_Program_HalfWord+0x44>)
 80277fa:	691b      	ldr	r3, [r3, #16]
 80277fc:	4a06      	ldr	r2, [pc, #24]	; (8027818 <FLASH_Program_HalfWord+0x44>)
 80277fe:	f043 0301 	orr.w	r3, r3, #1
 8027802:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8027804:	687b      	ldr	r3, [r7, #4]
 8027806:	887a      	ldrh	r2, [r7, #2]
 8027808:	801a      	strh	r2, [r3, #0]
}
 802780a:	bf00      	nop
 802780c:	370c      	adds	r7, #12
 802780e:	46bd      	mov	sp, r7
 8027810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027814:	4770      	bx	lr
 8027816:	bf00      	nop
 8027818:	40023c00 	.word	0x40023c00

0802781c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 802781c:	b480      	push	{r7}
 802781e:	b083      	sub	sp, #12
 8027820:	af00      	add	r7, sp, #0
 8027822:	6078      	str	r0, [r7, #4]
 8027824:	460b      	mov	r3, r1
 8027826:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027828:	4b0c      	ldr	r3, [pc, #48]	; (802785c <FLASH_Program_Byte+0x40>)
 802782a:	691b      	ldr	r3, [r3, #16]
 802782c:	4a0b      	ldr	r2, [pc, #44]	; (802785c <FLASH_Program_Byte+0x40>)
 802782e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027832:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8027834:	4b09      	ldr	r3, [pc, #36]	; (802785c <FLASH_Program_Byte+0x40>)
 8027836:	4a09      	ldr	r2, [pc, #36]	; (802785c <FLASH_Program_Byte+0x40>)
 8027838:	691b      	ldr	r3, [r3, #16]
 802783a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802783c:	4b07      	ldr	r3, [pc, #28]	; (802785c <FLASH_Program_Byte+0x40>)
 802783e:	691b      	ldr	r3, [r3, #16]
 8027840:	4a06      	ldr	r2, [pc, #24]	; (802785c <FLASH_Program_Byte+0x40>)
 8027842:	f043 0301 	orr.w	r3, r3, #1
 8027846:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8027848:	687b      	ldr	r3, [r7, #4]
 802784a:	78fa      	ldrb	r2, [r7, #3]
 802784c:	701a      	strb	r2, [r3, #0]
}
 802784e:	bf00      	nop
 8027850:	370c      	adds	r7, #12
 8027852:	46bd      	mov	sp, r7
 8027854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027858:	4770      	bx	lr
 802785a:	bf00      	nop
 802785c:	40023c00 	.word	0x40023c00

08027860 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8027860:	b480      	push	{r7}
 8027862:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8027864:	4b27      	ldr	r3, [pc, #156]	; (8027904 <FLASH_SetErrorCode+0xa4>)
 8027866:	68db      	ldr	r3, [r3, #12]
 8027868:	f003 0310 	and.w	r3, r3, #16
 802786c:	2b00      	cmp	r3, #0
 802786e:	d008      	beq.n	8027882 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8027870:	4b25      	ldr	r3, [pc, #148]	; (8027908 <FLASH_SetErrorCode+0xa8>)
 8027872:	69db      	ldr	r3, [r3, #28]
 8027874:	f043 0310 	orr.w	r3, r3, #16
 8027878:	4a23      	ldr	r2, [pc, #140]	; (8027908 <FLASH_SetErrorCode+0xa8>)
 802787a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 802787c:	4b21      	ldr	r3, [pc, #132]	; (8027904 <FLASH_SetErrorCode+0xa4>)
 802787e:	2210      	movs	r2, #16
 8027880:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8027882:	4b20      	ldr	r3, [pc, #128]	; (8027904 <FLASH_SetErrorCode+0xa4>)
 8027884:	68db      	ldr	r3, [r3, #12]
 8027886:	f003 0320 	and.w	r3, r3, #32
 802788a:	2b00      	cmp	r3, #0
 802788c:	d008      	beq.n	80278a0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 802788e:	4b1e      	ldr	r3, [pc, #120]	; (8027908 <FLASH_SetErrorCode+0xa8>)
 8027890:	69db      	ldr	r3, [r3, #28]
 8027892:	f043 0308 	orr.w	r3, r3, #8
 8027896:	4a1c      	ldr	r2, [pc, #112]	; (8027908 <FLASH_SetErrorCode+0xa8>)
 8027898:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 802789a:	4b1a      	ldr	r3, [pc, #104]	; (8027904 <FLASH_SetErrorCode+0xa4>)
 802789c:	2220      	movs	r2, #32
 802789e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80278a0:	4b18      	ldr	r3, [pc, #96]	; (8027904 <FLASH_SetErrorCode+0xa4>)
 80278a2:	68db      	ldr	r3, [r3, #12]
 80278a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80278a8:	2b00      	cmp	r3, #0
 80278aa:	d008      	beq.n	80278be <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80278ac:	4b16      	ldr	r3, [pc, #88]	; (8027908 <FLASH_SetErrorCode+0xa8>)
 80278ae:	69db      	ldr	r3, [r3, #28]
 80278b0:	f043 0304 	orr.w	r3, r3, #4
 80278b4:	4a14      	ldr	r2, [pc, #80]	; (8027908 <FLASH_SetErrorCode+0xa8>)
 80278b6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80278b8:	4b12      	ldr	r3, [pc, #72]	; (8027904 <FLASH_SetErrorCode+0xa4>)
 80278ba:	2240      	movs	r2, #64	; 0x40
 80278bc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80278be:	4b11      	ldr	r3, [pc, #68]	; (8027904 <FLASH_SetErrorCode+0xa4>)
 80278c0:	68db      	ldr	r3, [r3, #12]
 80278c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80278c6:	2b00      	cmp	r3, #0
 80278c8:	d008      	beq.n	80278dc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80278ca:	4b0f      	ldr	r3, [pc, #60]	; (8027908 <FLASH_SetErrorCode+0xa8>)
 80278cc:	69db      	ldr	r3, [r3, #28]
 80278ce:	f043 0302 	orr.w	r3, r3, #2
 80278d2:	4a0d      	ldr	r2, [pc, #52]	; (8027908 <FLASH_SetErrorCode+0xa8>)
 80278d4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80278d6:	4b0b      	ldr	r3, [pc, #44]	; (8027904 <FLASH_SetErrorCode+0xa4>)
 80278d8:	2280      	movs	r2, #128	; 0x80
 80278da:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80278dc:	4b09      	ldr	r3, [pc, #36]	; (8027904 <FLASH_SetErrorCode+0xa4>)
 80278de:	68db      	ldr	r3, [r3, #12]
 80278e0:	f003 0302 	and.w	r3, r3, #2
 80278e4:	2b00      	cmp	r3, #0
 80278e6:	d008      	beq.n	80278fa <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80278e8:	4b07      	ldr	r3, [pc, #28]	; (8027908 <FLASH_SetErrorCode+0xa8>)
 80278ea:	69db      	ldr	r3, [r3, #28]
 80278ec:	f043 0320 	orr.w	r3, r3, #32
 80278f0:	4a05      	ldr	r2, [pc, #20]	; (8027908 <FLASH_SetErrorCode+0xa8>)
 80278f2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80278f4:	4b03      	ldr	r3, [pc, #12]	; (8027904 <FLASH_SetErrorCode+0xa4>)
 80278f6:	2202      	movs	r2, #2
 80278f8:	60da      	str	r2, [r3, #12]
  }
}
 80278fa:	bf00      	nop
 80278fc:	46bd      	mov	sp, r7
 80278fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027902:	4770      	bx	lr
 8027904:	40023c00 	.word	0x40023c00
 8027908:	20000a14 	.word	0x20000a14

0802790c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 802790c:	b580      	push	{r7, lr}
 802790e:	b084      	sub	sp, #16
 8027910:	af00      	add	r7, sp, #0
 8027912:	6078      	str	r0, [r7, #4]
 8027914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8027916:	2301      	movs	r3, #1
 8027918:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 802791a:	2300      	movs	r3, #0
 802791c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 802791e:	4b31      	ldr	r3, [pc, #196]	; (80279e4 <HAL_FLASHEx_Erase+0xd8>)
 8027920:	7e1b      	ldrb	r3, [r3, #24]
 8027922:	2b01      	cmp	r3, #1
 8027924:	d101      	bne.n	802792a <HAL_FLASHEx_Erase+0x1e>
 8027926:	2302      	movs	r3, #2
 8027928:	e058      	b.n	80279dc <HAL_FLASHEx_Erase+0xd0>
 802792a:	4b2e      	ldr	r3, [pc, #184]	; (80279e4 <HAL_FLASHEx_Erase+0xd8>)
 802792c:	2201      	movs	r2, #1
 802792e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027930:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027934:	f7ff febc 	bl	80276b0 <FLASH_WaitForLastOperation>
 8027938:	4603      	mov	r3, r0
 802793a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 802793c:	7bfb      	ldrb	r3, [r7, #15]
 802793e:	2b00      	cmp	r3, #0
 8027940:	d148      	bne.n	80279d4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8027942:	683b      	ldr	r3, [r7, #0]
 8027944:	f04f 32ff 	mov.w	r2, #4294967295
 8027948:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 802794a:	687b      	ldr	r3, [r7, #4]
 802794c:	681b      	ldr	r3, [r3, #0]
 802794e:	2b01      	cmp	r3, #1
 8027950:	d115      	bne.n	802797e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8027952:	687b      	ldr	r3, [r7, #4]
 8027954:	691b      	ldr	r3, [r3, #16]
 8027956:	b2da      	uxtb	r2, r3
 8027958:	687b      	ldr	r3, [r7, #4]
 802795a:	685b      	ldr	r3, [r3, #4]
 802795c:	4619      	mov	r1, r3
 802795e:	4610      	mov	r0, r2
 8027960:	f000 f844 	bl	80279ec <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027964:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027968:	f7ff fea2 	bl	80276b0 <FLASH_WaitForLastOperation>
 802796c:	4603      	mov	r3, r0
 802796e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8027970:	4b1d      	ldr	r3, [pc, #116]	; (80279e8 <HAL_FLASHEx_Erase+0xdc>)
 8027972:	691b      	ldr	r3, [r3, #16]
 8027974:	4a1c      	ldr	r2, [pc, #112]	; (80279e8 <HAL_FLASHEx_Erase+0xdc>)
 8027976:	f023 0304 	bic.w	r3, r3, #4
 802797a:	6113      	str	r3, [r2, #16]
 802797c:	e028      	b.n	80279d0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 802797e:	687b      	ldr	r3, [r7, #4]
 8027980:	689b      	ldr	r3, [r3, #8]
 8027982:	60bb      	str	r3, [r7, #8]
 8027984:	e01c      	b.n	80279c0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8027986:	687b      	ldr	r3, [r7, #4]
 8027988:	691b      	ldr	r3, [r3, #16]
 802798a:	b2db      	uxtb	r3, r3
 802798c:	4619      	mov	r1, r3
 802798e:	68b8      	ldr	r0, [r7, #8]
 8027990:	f000 f850 	bl	8027a34 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027994:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027998:	f7ff fe8a 	bl	80276b0 <FLASH_WaitForLastOperation>
 802799c:	4603      	mov	r3, r0
 802799e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80279a0:	4b11      	ldr	r3, [pc, #68]	; (80279e8 <HAL_FLASHEx_Erase+0xdc>)
 80279a2:	691b      	ldr	r3, [r3, #16]
 80279a4:	4a10      	ldr	r2, [pc, #64]	; (80279e8 <HAL_FLASHEx_Erase+0xdc>)
 80279a6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80279aa:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80279ac:	7bfb      	ldrb	r3, [r7, #15]
 80279ae:	2b00      	cmp	r3, #0
 80279b0:	d003      	beq.n	80279ba <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80279b2:	683b      	ldr	r3, [r7, #0]
 80279b4:	68ba      	ldr	r2, [r7, #8]
 80279b6:	601a      	str	r2, [r3, #0]
          break;
 80279b8:	e00a      	b.n	80279d0 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80279ba:	68bb      	ldr	r3, [r7, #8]
 80279bc:	3301      	adds	r3, #1
 80279be:	60bb      	str	r3, [r7, #8]
 80279c0:	687b      	ldr	r3, [r7, #4]
 80279c2:	68da      	ldr	r2, [r3, #12]
 80279c4:	687b      	ldr	r3, [r7, #4]
 80279c6:	689b      	ldr	r3, [r3, #8]
 80279c8:	4413      	add	r3, r2
 80279ca:	68ba      	ldr	r2, [r7, #8]
 80279cc:	429a      	cmp	r2, r3
 80279ce:	d3da      	bcc.n	8027986 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80279d0:	f000 f878 	bl	8027ac4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80279d4:	4b03      	ldr	r3, [pc, #12]	; (80279e4 <HAL_FLASHEx_Erase+0xd8>)
 80279d6:	2200      	movs	r2, #0
 80279d8:	761a      	strb	r2, [r3, #24]

  return status;
 80279da:	7bfb      	ldrb	r3, [r7, #15]
}
 80279dc:	4618      	mov	r0, r3
 80279de:	3710      	adds	r7, #16
 80279e0:	46bd      	mov	sp, r7
 80279e2:	bd80      	pop	{r7, pc}
 80279e4:	20000a14 	.word	0x20000a14
 80279e8:	40023c00 	.word	0x40023c00

080279ec <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80279ec:	b480      	push	{r7}
 80279ee:	b083      	sub	sp, #12
 80279f0:	af00      	add	r7, sp, #0
 80279f2:	4603      	mov	r3, r0
 80279f4:	6039      	str	r1, [r7, #0]
 80279f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80279f8:	4b0d      	ldr	r3, [pc, #52]	; (8027a30 <FLASH_MassErase+0x44>)
 80279fa:	691b      	ldr	r3, [r3, #16]
 80279fc:	4a0c      	ldr	r2, [pc, #48]	; (8027a30 <FLASH_MassErase+0x44>)
 80279fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027a02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8027a04:	4b0a      	ldr	r3, [pc, #40]	; (8027a30 <FLASH_MassErase+0x44>)
 8027a06:	691b      	ldr	r3, [r3, #16]
 8027a08:	4a09      	ldr	r2, [pc, #36]	; (8027a30 <FLASH_MassErase+0x44>)
 8027a0a:	f043 0304 	orr.w	r3, r3, #4
 8027a0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8027a10:	4b07      	ldr	r3, [pc, #28]	; (8027a30 <FLASH_MassErase+0x44>)
 8027a12:	691a      	ldr	r2, [r3, #16]
 8027a14:	79fb      	ldrb	r3, [r7, #7]
 8027a16:	021b      	lsls	r3, r3, #8
 8027a18:	4313      	orrs	r3, r2
 8027a1a:	4a05      	ldr	r2, [pc, #20]	; (8027a30 <FLASH_MassErase+0x44>)
 8027a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027a20:	6113      	str	r3, [r2, #16]
}
 8027a22:	bf00      	nop
 8027a24:	370c      	adds	r7, #12
 8027a26:	46bd      	mov	sp, r7
 8027a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a2c:	4770      	bx	lr
 8027a2e:	bf00      	nop
 8027a30:	40023c00 	.word	0x40023c00

08027a34 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8027a34:	b480      	push	{r7}
 8027a36:	b085      	sub	sp, #20
 8027a38:	af00      	add	r7, sp, #0
 8027a3a:	6078      	str	r0, [r7, #4]
 8027a3c:	460b      	mov	r3, r1
 8027a3e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8027a40:	2300      	movs	r3, #0
 8027a42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8027a44:	78fb      	ldrb	r3, [r7, #3]
 8027a46:	2b00      	cmp	r3, #0
 8027a48:	d102      	bne.n	8027a50 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8027a4a:	2300      	movs	r3, #0
 8027a4c:	60fb      	str	r3, [r7, #12]
 8027a4e:	e010      	b.n	8027a72 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8027a50:	78fb      	ldrb	r3, [r7, #3]
 8027a52:	2b01      	cmp	r3, #1
 8027a54:	d103      	bne.n	8027a5e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8027a56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8027a5a:	60fb      	str	r3, [r7, #12]
 8027a5c:	e009      	b.n	8027a72 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8027a5e:	78fb      	ldrb	r3, [r7, #3]
 8027a60:	2b02      	cmp	r3, #2
 8027a62:	d103      	bne.n	8027a6c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8027a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8027a68:	60fb      	str	r3, [r7, #12]
 8027a6a:	e002      	b.n	8027a72 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8027a6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8027a70:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027a72:	4b13      	ldr	r3, [pc, #76]	; (8027ac0 <FLASH_Erase_Sector+0x8c>)
 8027a74:	691b      	ldr	r3, [r3, #16]
 8027a76:	4a12      	ldr	r2, [pc, #72]	; (8027ac0 <FLASH_Erase_Sector+0x8c>)
 8027a78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027a7c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8027a7e:	4b10      	ldr	r3, [pc, #64]	; (8027ac0 <FLASH_Erase_Sector+0x8c>)
 8027a80:	691a      	ldr	r2, [r3, #16]
 8027a82:	490f      	ldr	r1, [pc, #60]	; (8027ac0 <FLASH_Erase_Sector+0x8c>)
 8027a84:	68fb      	ldr	r3, [r7, #12]
 8027a86:	4313      	orrs	r3, r2
 8027a88:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8027a8a:	4b0d      	ldr	r3, [pc, #52]	; (8027ac0 <FLASH_Erase_Sector+0x8c>)
 8027a8c:	691b      	ldr	r3, [r3, #16]
 8027a8e:	4a0c      	ldr	r2, [pc, #48]	; (8027ac0 <FLASH_Erase_Sector+0x8c>)
 8027a90:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8027a94:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8027a96:	4b0a      	ldr	r3, [pc, #40]	; (8027ac0 <FLASH_Erase_Sector+0x8c>)
 8027a98:	691a      	ldr	r2, [r3, #16]
 8027a9a:	687b      	ldr	r3, [r7, #4]
 8027a9c:	00db      	lsls	r3, r3, #3
 8027a9e:	4313      	orrs	r3, r2
 8027aa0:	4a07      	ldr	r2, [pc, #28]	; (8027ac0 <FLASH_Erase_Sector+0x8c>)
 8027aa2:	f043 0302 	orr.w	r3, r3, #2
 8027aa6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8027aa8:	4b05      	ldr	r3, [pc, #20]	; (8027ac0 <FLASH_Erase_Sector+0x8c>)
 8027aaa:	691b      	ldr	r3, [r3, #16]
 8027aac:	4a04      	ldr	r2, [pc, #16]	; (8027ac0 <FLASH_Erase_Sector+0x8c>)
 8027aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8027ab2:	6113      	str	r3, [r2, #16]
}
 8027ab4:	bf00      	nop
 8027ab6:	3714      	adds	r7, #20
 8027ab8:	46bd      	mov	sp, r7
 8027aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027abe:	4770      	bx	lr
 8027ac0:	40023c00 	.word	0x40023c00

08027ac4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8027ac4:	b480      	push	{r7}
 8027ac6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8027ac8:	4b20      	ldr	r3, [pc, #128]	; (8027b4c <FLASH_FlushCaches+0x88>)
 8027aca:	681b      	ldr	r3, [r3, #0]
 8027acc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8027ad0:	2b00      	cmp	r3, #0
 8027ad2:	d017      	beq.n	8027b04 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8027ad4:	4b1d      	ldr	r3, [pc, #116]	; (8027b4c <FLASH_FlushCaches+0x88>)
 8027ad6:	681b      	ldr	r3, [r3, #0]
 8027ad8:	4a1c      	ldr	r2, [pc, #112]	; (8027b4c <FLASH_FlushCaches+0x88>)
 8027ada:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8027ade:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8027ae0:	4b1a      	ldr	r3, [pc, #104]	; (8027b4c <FLASH_FlushCaches+0x88>)
 8027ae2:	681b      	ldr	r3, [r3, #0]
 8027ae4:	4a19      	ldr	r2, [pc, #100]	; (8027b4c <FLASH_FlushCaches+0x88>)
 8027ae6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8027aea:	6013      	str	r3, [r2, #0]
 8027aec:	4b17      	ldr	r3, [pc, #92]	; (8027b4c <FLASH_FlushCaches+0x88>)
 8027aee:	681b      	ldr	r3, [r3, #0]
 8027af0:	4a16      	ldr	r2, [pc, #88]	; (8027b4c <FLASH_FlushCaches+0x88>)
 8027af2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8027af6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8027af8:	4b14      	ldr	r3, [pc, #80]	; (8027b4c <FLASH_FlushCaches+0x88>)
 8027afa:	681b      	ldr	r3, [r3, #0]
 8027afc:	4a13      	ldr	r2, [pc, #76]	; (8027b4c <FLASH_FlushCaches+0x88>)
 8027afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8027b02:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8027b04:	4b11      	ldr	r3, [pc, #68]	; (8027b4c <FLASH_FlushCaches+0x88>)
 8027b06:	681b      	ldr	r3, [r3, #0]
 8027b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027b0c:	2b00      	cmp	r3, #0
 8027b0e:	d017      	beq.n	8027b40 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8027b10:	4b0e      	ldr	r3, [pc, #56]	; (8027b4c <FLASH_FlushCaches+0x88>)
 8027b12:	681b      	ldr	r3, [r3, #0]
 8027b14:	4a0d      	ldr	r2, [pc, #52]	; (8027b4c <FLASH_FlushCaches+0x88>)
 8027b16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8027b1a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8027b1c:	4b0b      	ldr	r3, [pc, #44]	; (8027b4c <FLASH_FlushCaches+0x88>)
 8027b1e:	681b      	ldr	r3, [r3, #0]
 8027b20:	4a0a      	ldr	r2, [pc, #40]	; (8027b4c <FLASH_FlushCaches+0x88>)
 8027b22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8027b26:	6013      	str	r3, [r2, #0]
 8027b28:	4b08      	ldr	r3, [pc, #32]	; (8027b4c <FLASH_FlushCaches+0x88>)
 8027b2a:	681b      	ldr	r3, [r3, #0]
 8027b2c:	4a07      	ldr	r2, [pc, #28]	; (8027b4c <FLASH_FlushCaches+0x88>)
 8027b2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8027b32:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8027b34:	4b05      	ldr	r3, [pc, #20]	; (8027b4c <FLASH_FlushCaches+0x88>)
 8027b36:	681b      	ldr	r3, [r3, #0]
 8027b38:	4a04      	ldr	r2, [pc, #16]	; (8027b4c <FLASH_FlushCaches+0x88>)
 8027b3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8027b3e:	6013      	str	r3, [r2, #0]
  }
}
 8027b40:	bf00      	nop
 8027b42:	46bd      	mov	sp, r7
 8027b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027b48:	4770      	bx	lr
 8027b4a:	bf00      	nop
 8027b4c:	40023c00 	.word	0x40023c00

08027b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8027b50:	b480      	push	{r7}
 8027b52:	b089      	sub	sp, #36	; 0x24
 8027b54:	af00      	add	r7, sp, #0
 8027b56:	6078      	str	r0, [r7, #4]
 8027b58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8027b5a:	2300      	movs	r3, #0
 8027b5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8027b5e:	2300      	movs	r3, #0
 8027b60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8027b62:	2300      	movs	r3, #0
 8027b64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8027b66:	2300      	movs	r3, #0
 8027b68:	61fb      	str	r3, [r7, #28]
 8027b6a:	e16b      	b.n	8027e44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8027b6c:	2201      	movs	r2, #1
 8027b6e:	69fb      	ldr	r3, [r7, #28]
 8027b70:	fa02 f303 	lsl.w	r3, r2, r3
 8027b74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8027b76:	683b      	ldr	r3, [r7, #0]
 8027b78:	681b      	ldr	r3, [r3, #0]
 8027b7a:	697a      	ldr	r2, [r7, #20]
 8027b7c:	4013      	ands	r3, r2
 8027b7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8027b80:	693a      	ldr	r2, [r7, #16]
 8027b82:	697b      	ldr	r3, [r7, #20]
 8027b84:	429a      	cmp	r2, r3
 8027b86:	f040 815a 	bne.w	8027e3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8027b8a:	683b      	ldr	r3, [r7, #0]
 8027b8c:	685b      	ldr	r3, [r3, #4]
 8027b8e:	2b01      	cmp	r3, #1
 8027b90:	d00b      	beq.n	8027baa <HAL_GPIO_Init+0x5a>
 8027b92:	683b      	ldr	r3, [r7, #0]
 8027b94:	685b      	ldr	r3, [r3, #4]
 8027b96:	2b02      	cmp	r3, #2
 8027b98:	d007      	beq.n	8027baa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8027b9a:	683b      	ldr	r3, [r7, #0]
 8027b9c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8027b9e:	2b11      	cmp	r3, #17
 8027ba0:	d003      	beq.n	8027baa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8027ba2:	683b      	ldr	r3, [r7, #0]
 8027ba4:	685b      	ldr	r3, [r3, #4]
 8027ba6:	2b12      	cmp	r3, #18
 8027ba8:	d130      	bne.n	8027c0c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8027baa:	687b      	ldr	r3, [r7, #4]
 8027bac:	689b      	ldr	r3, [r3, #8]
 8027bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8027bb0:	69fb      	ldr	r3, [r7, #28]
 8027bb2:	005b      	lsls	r3, r3, #1
 8027bb4:	2203      	movs	r2, #3
 8027bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8027bba:	43db      	mvns	r3, r3
 8027bbc:	69ba      	ldr	r2, [r7, #24]
 8027bbe:	4013      	ands	r3, r2
 8027bc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8027bc2:	683b      	ldr	r3, [r7, #0]
 8027bc4:	68da      	ldr	r2, [r3, #12]
 8027bc6:	69fb      	ldr	r3, [r7, #28]
 8027bc8:	005b      	lsls	r3, r3, #1
 8027bca:	fa02 f303 	lsl.w	r3, r2, r3
 8027bce:	69ba      	ldr	r2, [r7, #24]
 8027bd0:	4313      	orrs	r3, r2
 8027bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8027bd4:	687b      	ldr	r3, [r7, #4]
 8027bd6:	69ba      	ldr	r2, [r7, #24]
 8027bd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8027bda:	687b      	ldr	r3, [r7, #4]
 8027bdc:	685b      	ldr	r3, [r3, #4]
 8027bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8027be0:	2201      	movs	r2, #1
 8027be2:	69fb      	ldr	r3, [r7, #28]
 8027be4:	fa02 f303 	lsl.w	r3, r2, r3
 8027be8:	43db      	mvns	r3, r3
 8027bea:	69ba      	ldr	r2, [r7, #24]
 8027bec:	4013      	ands	r3, r2
 8027bee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8027bf0:	683b      	ldr	r3, [r7, #0]
 8027bf2:	685b      	ldr	r3, [r3, #4]
 8027bf4:	091b      	lsrs	r3, r3, #4
 8027bf6:	f003 0201 	and.w	r2, r3, #1
 8027bfa:	69fb      	ldr	r3, [r7, #28]
 8027bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8027c00:	69ba      	ldr	r2, [r7, #24]
 8027c02:	4313      	orrs	r3, r2
 8027c04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8027c06:	687b      	ldr	r3, [r7, #4]
 8027c08:	69ba      	ldr	r2, [r7, #24]
 8027c0a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8027c0c:	687b      	ldr	r3, [r7, #4]
 8027c0e:	68db      	ldr	r3, [r3, #12]
 8027c10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8027c12:	69fb      	ldr	r3, [r7, #28]
 8027c14:	005b      	lsls	r3, r3, #1
 8027c16:	2203      	movs	r2, #3
 8027c18:	fa02 f303 	lsl.w	r3, r2, r3
 8027c1c:	43db      	mvns	r3, r3
 8027c1e:	69ba      	ldr	r2, [r7, #24]
 8027c20:	4013      	ands	r3, r2
 8027c22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8027c24:	683b      	ldr	r3, [r7, #0]
 8027c26:	689a      	ldr	r2, [r3, #8]
 8027c28:	69fb      	ldr	r3, [r7, #28]
 8027c2a:	005b      	lsls	r3, r3, #1
 8027c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8027c30:	69ba      	ldr	r2, [r7, #24]
 8027c32:	4313      	orrs	r3, r2
 8027c34:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8027c36:	687b      	ldr	r3, [r7, #4]
 8027c38:	69ba      	ldr	r2, [r7, #24]
 8027c3a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8027c3c:	683b      	ldr	r3, [r7, #0]
 8027c3e:	685b      	ldr	r3, [r3, #4]
 8027c40:	2b02      	cmp	r3, #2
 8027c42:	d003      	beq.n	8027c4c <HAL_GPIO_Init+0xfc>
 8027c44:	683b      	ldr	r3, [r7, #0]
 8027c46:	685b      	ldr	r3, [r3, #4]
 8027c48:	2b12      	cmp	r3, #18
 8027c4a:	d123      	bne.n	8027c94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8027c4c:	69fb      	ldr	r3, [r7, #28]
 8027c4e:	08da      	lsrs	r2, r3, #3
 8027c50:	687b      	ldr	r3, [r7, #4]
 8027c52:	3208      	adds	r2, #8
 8027c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8027c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8027c5a:	69fb      	ldr	r3, [r7, #28]
 8027c5c:	f003 0307 	and.w	r3, r3, #7
 8027c60:	009b      	lsls	r3, r3, #2
 8027c62:	220f      	movs	r2, #15
 8027c64:	fa02 f303 	lsl.w	r3, r2, r3
 8027c68:	43db      	mvns	r3, r3
 8027c6a:	69ba      	ldr	r2, [r7, #24]
 8027c6c:	4013      	ands	r3, r2
 8027c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8027c70:	683b      	ldr	r3, [r7, #0]
 8027c72:	691a      	ldr	r2, [r3, #16]
 8027c74:	69fb      	ldr	r3, [r7, #28]
 8027c76:	f003 0307 	and.w	r3, r3, #7
 8027c7a:	009b      	lsls	r3, r3, #2
 8027c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8027c80:	69ba      	ldr	r2, [r7, #24]
 8027c82:	4313      	orrs	r3, r2
 8027c84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8027c86:	69fb      	ldr	r3, [r7, #28]
 8027c88:	08da      	lsrs	r2, r3, #3
 8027c8a:	687b      	ldr	r3, [r7, #4]
 8027c8c:	3208      	adds	r2, #8
 8027c8e:	69b9      	ldr	r1, [r7, #24]
 8027c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8027c94:	687b      	ldr	r3, [r7, #4]
 8027c96:	681b      	ldr	r3, [r3, #0]
 8027c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8027c9a:	69fb      	ldr	r3, [r7, #28]
 8027c9c:	005b      	lsls	r3, r3, #1
 8027c9e:	2203      	movs	r2, #3
 8027ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8027ca4:	43db      	mvns	r3, r3
 8027ca6:	69ba      	ldr	r2, [r7, #24]
 8027ca8:	4013      	ands	r3, r2
 8027caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8027cac:	683b      	ldr	r3, [r7, #0]
 8027cae:	685b      	ldr	r3, [r3, #4]
 8027cb0:	f003 0203 	and.w	r2, r3, #3
 8027cb4:	69fb      	ldr	r3, [r7, #28]
 8027cb6:	005b      	lsls	r3, r3, #1
 8027cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8027cbc:	69ba      	ldr	r2, [r7, #24]
 8027cbe:	4313      	orrs	r3, r2
 8027cc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8027cc2:	687b      	ldr	r3, [r7, #4]
 8027cc4:	69ba      	ldr	r2, [r7, #24]
 8027cc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8027cc8:	683b      	ldr	r3, [r7, #0]
 8027cca:	685b      	ldr	r3, [r3, #4]
 8027ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8027cd0:	2b00      	cmp	r3, #0
 8027cd2:	f000 80b4 	beq.w	8027e3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8027cd6:	2300      	movs	r3, #0
 8027cd8:	60fb      	str	r3, [r7, #12]
 8027cda:	4b5f      	ldr	r3, [pc, #380]	; (8027e58 <HAL_GPIO_Init+0x308>)
 8027cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027cde:	4a5e      	ldr	r2, [pc, #376]	; (8027e58 <HAL_GPIO_Init+0x308>)
 8027ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8027ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8027ce6:	4b5c      	ldr	r3, [pc, #368]	; (8027e58 <HAL_GPIO_Init+0x308>)
 8027ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8027cee:	60fb      	str	r3, [r7, #12]
 8027cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8027cf2:	4a5a      	ldr	r2, [pc, #360]	; (8027e5c <HAL_GPIO_Init+0x30c>)
 8027cf4:	69fb      	ldr	r3, [r7, #28]
 8027cf6:	089b      	lsrs	r3, r3, #2
 8027cf8:	3302      	adds	r3, #2
 8027cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8027cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8027d00:	69fb      	ldr	r3, [r7, #28]
 8027d02:	f003 0303 	and.w	r3, r3, #3
 8027d06:	009b      	lsls	r3, r3, #2
 8027d08:	220f      	movs	r2, #15
 8027d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8027d0e:	43db      	mvns	r3, r3
 8027d10:	69ba      	ldr	r2, [r7, #24]
 8027d12:	4013      	ands	r3, r2
 8027d14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8027d16:	687b      	ldr	r3, [r7, #4]
 8027d18:	4a51      	ldr	r2, [pc, #324]	; (8027e60 <HAL_GPIO_Init+0x310>)
 8027d1a:	4293      	cmp	r3, r2
 8027d1c:	d02b      	beq.n	8027d76 <HAL_GPIO_Init+0x226>
 8027d1e:	687b      	ldr	r3, [r7, #4]
 8027d20:	4a50      	ldr	r2, [pc, #320]	; (8027e64 <HAL_GPIO_Init+0x314>)
 8027d22:	4293      	cmp	r3, r2
 8027d24:	d025      	beq.n	8027d72 <HAL_GPIO_Init+0x222>
 8027d26:	687b      	ldr	r3, [r7, #4]
 8027d28:	4a4f      	ldr	r2, [pc, #316]	; (8027e68 <HAL_GPIO_Init+0x318>)
 8027d2a:	4293      	cmp	r3, r2
 8027d2c:	d01f      	beq.n	8027d6e <HAL_GPIO_Init+0x21e>
 8027d2e:	687b      	ldr	r3, [r7, #4]
 8027d30:	4a4e      	ldr	r2, [pc, #312]	; (8027e6c <HAL_GPIO_Init+0x31c>)
 8027d32:	4293      	cmp	r3, r2
 8027d34:	d019      	beq.n	8027d6a <HAL_GPIO_Init+0x21a>
 8027d36:	687b      	ldr	r3, [r7, #4]
 8027d38:	4a4d      	ldr	r2, [pc, #308]	; (8027e70 <HAL_GPIO_Init+0x320>)
 8027d3a:	4293      	cmp	r3, r2
 8027d3c:	d013      	beq.n	8027d66 <HAL_GPIO_Init+0x216>
 8027d3e:	687b      	ldr	r3, [r7, #4]
 8027d40:	4a4c      	ldr	r2, [pc, #304]	; (8027e74 <HAL_GPIO_Init+0x324>)
 8027d42:	4293      	cmp	r3, r2
 8027d44:	d00d      	beq.n	8027d62 <HAL_GPIO_Init+0x212>
 8027d46:	687b      	ldr	r3, [r7, #4]
 8027d48:	4a4b      	ldr	r2, [pc, #300]	; (8027e78 <HAL_GPIO_Init+0x328>)
 8027d4a:	4293      	cmp	r3, r2
 8027d4c:	d007      	beq.n	8027d5e <HAL_GPIO_Init+0x20e>
 8027d4e:	687b      	ldr	r3, [r7, #4]
 8027d50:	4a4a      	ldr	r2, [pc, #296]	; (8027e7c <HAL_GPIO_Init+0x32c>)
 8027d52:	4293      	cmp	r3, r2
 8027d54:	d101      	bne.n	8027d5a <HAL_GPIO_Init+0x20a>
 8027d56:	2307      	movs	r3, #7
 8027d58:	e00e      	b.n	8027d78 <HAL_GPIO_Init+0x228>
 8027d5a:	2308      	movs	r3, #8
 8027d5c:	e00c      	b.n	8027d78 <HAL_GPIO_Init+0x228>
 8027d5e:	2306      	movs	r3, #6
 8027d60:	e00a      	b.n	8027d78 <HAL_GPIO_Init+0x228>
 8027d62:	2305      	movs	r3, #5
 8027d64:	e008      	b.n	8027d78 <HAL_GPIO_Init+0x228>
 8027d66:	2304      	movs	r3, #4
 8027d68:	e006      	b.n	8027d78 <HAL_GPIO_Init+0x228>
 8027d6a:	2303      	movs	r3, #3
 8027d6c:	e004      	b.n	8027d78 <HAL_GPIO_Init+0x228>
 8027d6e:	2302      	movs	r3, #2
 8027d70:	e002      	b.n	8027d78 <HAL_GPIO_Init+0x228>
 8027d72:	2301      	movs	r3, #1
 8027d74:	e000      	b.n	8027d78 <HAL_GPIO_Init+0x228>
 8027d76:	2300      	movs	r3, #0
 8027d78:	69fa      	ldr	r2, [r7, #28]
 8027d7a:	f002 0203 	and.w	r2, r2, #3
 8027d7e:	0092      	lsls	r2, r2, #2
 8027d80:	4093      	lsls	r3, r2
 8027d82:	69ba      	ldr	r2, [r7, #24]
 8027d84:	4313      	orrs	r3, r2
 8027d86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8027d88:	4934      	ldr	r1, [pc, #208]	; (8027e5c <HAL_GPIO_Init+0x30c>)
 8027d8a:	69fb      	ldr	r3, [r7, #28]
 8027d8c:	089b      	lsrs	r3, r3, #2
 8027d8e:	3302      	adds	r3, #2
 8027d90:	69ba      	ldr	r2, [r7, #24]
 8027d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8027d96:	4b3a      	ldr	r3, [pc, #232]	; (8027e80 <HAL_GPIO_Init+0x330>)
 8027d98:	681b      	ldr	r3, [r3, #0]
 8027d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027d9c:	693b      	ldr	r3, [r7, #16]
 8027d9e:	43db      	mvns	r3, r3
 8027da0:	69ba      	ldr	r2, [r7, #24]
 8027da2:	4013      	ands	r3, r2
 8027da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8027da6:	683b      	ldr	r3, [r7, #0]
 8027da8:	685b      	ldr	r3, [r3, #4]
 8027daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8027dae:	2b00      	cmp	r3, #0
 8027db0:	d003      	beq.n	8027dba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8027db2:	69ba      	ldr	r2, [r7, #24]
 8027db4:	693b      	ldr	r3, [r7, #16]
 8027db6:	4313      	orrs	r3, r2
 8027db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8027dba:	4a31      	ldr	r2, [pc, #196]	; (8027e80 <HAL_GPIO_Init+0x330>)
 8027dbc:	69bb      	ldr	r3, [r7, #24]
 8027dbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8027dc0:	4b2f      	ldr	r3, [pc, #188]	; (8027e80 <HAL_GPIO_Init+0x330>)
 8027dc2:	685b      	ldr	r3, [r3, #4]
 8027dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027dc6:	693b      	ldr	r3, [r7, #16]
 8027dc8:	43db      	mvns	r3, r3
 8027dca:	69ba      	ldr	r2, [r7, #24]
 8027dcc:	4013      	ands	r3, r2
 8027dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8027dd0:	683b      	ldr	r3, [r7, #0]
 8027dd2:	685b      	ldr	r3, [r3, #4]
 8027dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8027dd8:	2b00      	cmp	r3, #0
 8027dda:	d003      	beq.n	8027de4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8027ddc:	69ba      	ldr	r2, [r7, #24]
 8027dde:	693b      	ldr	r3, [r7, #16]
 8027de0:	4313      	orrs	r3, r2
 8027de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8027de4:	4a26      	ldr	r2, [pc, #152]	; (8027e80 <HAL_GPIO_Init+0x330>)
 8027de6:	69bb      	ldr	r3, [r7, #24]
 8027de8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8027dea:	4b25      	ldr	r3, [pc, #148]	; (8027e80 <HAL_GPIO_Init+0x330>)
 8027dec:	689b      	ldr	r3, [r3, #8]
 8027dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027df0:	693b      	ldr	r3, [r7, #16]
 8027df2:	43db      	mvns	r3, r3
 8027df4:	69ba      	ldr	r2, [r7, #24]
 8027df6:	4013      	ands	r3, r2
 8027df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8027dfa:	683b      	ldr	r3, [r7, #0]
 8027dfc:	685b      	ldr	r3, [r3, #4]
 8027dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8027e02:	2b00      	cmp	r3, #0
 8027e04:	d003      	beq.n	8027e0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8027e06:	69ba      	ldr	r2, [r7, #24]
 8027e08:	693b      	ldr	r3, [r7, #16]
 8027e0a:	4313      	orrs	r3, r2
 8027e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8027e0e:	4a1c      	ldr	r2, [pc, #112]	; (8027e80 <HAL_GPIO_Init+0x330>)
 8027e10:	69bb      	ldr	r3, [r7, #24]
 8027e12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8027e14:	4b1a      	ldr	r3, [pc, #104]	; (8027e80 <HAL_GPIO_Init+0x330>)
 8027e16:	68db      	ldr	r3, [r3, #12]
 8027e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8027e1a:	693b      	ldr	r3, [r7, #16]
 8027e1c:	43db      	mvns	r3, r3
 8027e1e:	69ba      	ldr	r2, [r7, #24]
 8027e20:	4013      	ands	r3, r2
 8027e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8027e24:	683b      	ldr	r3, [r7, #0]
 8027e26:	685b      	ldr	r3, [r3, #4]
 8027e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8027e2c:	2b00      	cmp	r3, #0
 8027e2e:	d003      	beq.n	8027e38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8027e30:	69ba      	ldr	r2, [r7, #24]
 8027e32:	693b      	ldr	r3, [r7, #16]
 8027e34:	4313      	orrs	r3, r2
 8027e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8027e38:	4a11      	ldr	r2, [pc, #68]	; (8027e80 <HAL_GPIO_Init+0x330>)
 8027e3a:	69bb      	ldr	r3, [r7, #24]
 8027e3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8027e3e:	69fb      	ldr	r3, [r7, #28]
 8027e40:	3301      	adds	r3, #1
 8027e42:	61fb      	str	r3, [r7, #28]
 8027e44:	69fb      	ldr	r3, [r7, #28]
 8027e46:	2b0f      	cmp	r3, #15
 8027e48:	f67f ae90 	bls.w	8027b6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8027e4c:	bf00      	nop
 8027e4e:	3724      	adds	r7, #36	; 0x24
 8027e50:	46bd      	mov	sp, r7
 8027e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e56:	4770      	bx	lr
 8027e58:	40023800 	.word	0x40023800
 8027e5c:	40013800 	.word	0x40013800
 8027e60:	40020000 	.word	0x40020000
 8027e64:	40020400 	.word	0x40020400
 8027e68:	40020800 	.word	0x40020800
 8027e6c:	40020c00 	.word	0x40020c00
 8027e70:	40021000 	.word	0x40021000
 8027e74:	40021400 	.word	0x40021400
 8027e78:	40021800 	.word	0x40021800
 8027e7c:	40021c00 	.word	0x40021c00
 8027e80:	40013c00 	.word	0x40013c00

08027e84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8027e84:	b480      	push	{r7}
 8027e86:	b085      	sub	sp, #20
 8027e88:	af00      	add	r7, sp, #0
 8027e8a:	6078      	str	r0, [r7, #4]
 8027e8c:	460b      	mov	r3, r1
 8027e8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8027e90:	687b      	ldr	r3, [r7, #4]
 8027e92:	691a      	ldr	r2, [r3, #16]
 8027e94:	887b      	ldrh	r3, [r7, #2]
 8027e96:	4013      	ands	r3, r2
 8027e98:	2b00      	cmp	r3, #0
 8027e9a:	d002      	beq.n	8027ea2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8027e9c:	2301      	movs	r3, #1
 8027e9e:	73fb      	strb	r3, [r7, #15]
 8027ea0:	e001      	b.n	8027ea6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8027ea2:	2300      	movs	r3, #0
 8027ea4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8027ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8027ea8:	4618      	mov	r0, r3
 8027eaa:	3714      	adds	r7, #20
 8027eac:	46bd      	mov	sp, r7
 8027eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027eb2:	4770      	bx	lr

08027eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8027eb4:	b480      	push	{r7}
 8027eb6:	b083      	sub	sp, #12
 8027eb8:	af00      	add	r7, sp, #0
 8027eba:	6078      	str	r0, [r7, #4]
 8027ebc:	460b      	mov	r3, r1
 8027ebe:	807b      	strh	r3, [r7, #2]
 8027ec0:	4613      	mov	r3, r2
 8027ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8027ec4:	787b      	ldrb	r3, [r7, #1]
 8027ec6:	2b00      	cmp	r3, #0
 8027ec8:	d003      	beq.n	8027ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8027eca:	887a      	ldrh	r2, [r7, #2]
 8027ecc:	687b      	ldr	r3, [r7, #4]
 8027ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8027ed0:	e003      	b.n	8027eda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8027ed2:	887b      	ldrh	r3, [r7, #2]
 8027ed4:	041a      	lsls	r2, r3, #16
 8027ed6:	687b      	ldr	r3, [r7, #4]
 8027ed8:	619a      	str	r2, [r3, #24]
}
 8027eda:	bf00      	nop
 8027edc:	370c      	adds	r7, #12
 8027ede:	46bd      	mov	sp, r7
 8027ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ee4:	4770      	bx	lr
	...

08027ee8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8027ee8:	b580      	push	{r7, lr}
 8027eea:	b084      	sub	sp, #16
 8027eec:	af00      	add	r7, sp, #0
 8027eee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8027ef0:	687b      	ldr	r3, [r7, #4]
 8027ef2:	2b00      	cmp	r3, #0
 8027ef4:	d101      	bne.n	8027efa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8027ef6:	2301      	movs	r3, #1
 8027ef8:	e11f      	b.n	802813a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8027efa:	687b      	ldr	r3, [r7, #4]
 8027efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8027f00:	b2db      	uxtb	r3, r3
 8027f02:	2b00      	cmp	r3, #0
 8027f04:	d106      	bne.n	8027f14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8027f06:	687b      	ldr	r3, [r7, #4]
 8027f08:	2200      	movs	r2, #0
 8027f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8027f0e:	6878      	ldr	r0, [r7, #4]
 8027f10:	f7fd fcc6 	bl	80258a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8027f14:	687b      	ldr	r3, [r7, #4]
 8027f16:	2224      	movs	r2, #36	; 0x24
 8027f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8027f1c:	687b      	ldr	r3, [r7, #4]
 8027f1e:	681b      	ldr	r3, [r3, #0]
 8027f20:	681a      	ldr	r2, [r3, #0]
 8027f22:	687b      	ldr	r3, [r7, #4]
 8027f24:	681b      	ldr	r3, [r3, #0]
 8027f26:	f022 0201 	bic.w	r2, r2, #1
 8027f2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8027f2c:	687b      	ldr	r3, [r7, #4]
 8027f2e:	681b      	ldr	r3, [r3, #0]
 8027f30:	681a      	ldr	r2, [r3, #0]
 8027f32:	687b      	ldr	r3, [r7, #4]
 8027f34:	681b      	ldr	r3, [r3, #0]
 8027f36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8027f3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8027f3c:	687b      	ldr	r3, [r7, #4]
 8027f3e:	681b      	ldr	r3, [r3, #0]
 8027f40:	681a      	ldr	r2, [r3, #0]
 8027f42:	687b      	ldr	r3, [r7, #4]
 8027f44:	681b      	ldr	r3, [r3, #0]
 8027f46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8027f4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8027f4c:	f000 fd18 	bl	8028980 <HAL_RCC_GetPCLK1Freq>
 8027f50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8027f52:	687b      	ldr	r3, [r7, #4]
 8027f54:	685b      	ldr	r3, [r3, #4]
 8027f56:	4a7b      	ldr	r2, [pc, #492]	; (8028144 <HAL_I2C_Init+0x25c>)
 8027f58:	4293      	cmp	r3, r2
 8027f5a:	d807      	bhi.n	8027f6c <HAL_I2C_Init+0x84>
 8027f5c:	68fb      	ldr	r3, [r7, #12]
 8027f5e:	4a7a      	ldr	r2, [pc, #488]	; (8028148 <HAL_I2C_Init+0x260>)
 8027f60:	4293      	cmp	r3, r2
 8027f62:	bf94      	ite	ls
 8027f64:	2301      	movls	r3, #1
 8027f66:	2300      	movhi	r3, #0
 8027f68:	b2db      	uxtb	r3, r3
 8027f6a:	e006      	b.n	8027f7a <HAL_I2C_Init+0x92>
 8027f6c:	68fb      	ldr	r3, [r7, #12]
 8027f6e:	4a77      	ldr	r2, [pc, #476]	; (802814c <HAL_I2C_Init+0x264>)
 8027f70:	4293      	cmp	r3, r2
 8027f72:	bf94      	ite	ls
 8027f74:	2301      	movls	r3, #1
 8027f76:	2300      	movhi	r3, #0
 8027f78:	b2db      	uxtb	r3, r3
 8027f7a:	2b00      	cmp	r3, #0
 8027f7c:	d001      	beq.n	8027f82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8027f7e:	2301      	movs	r3, #1
 8027f80:	e0db      	b.n	802813a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8027f82:	68fb      	ldr	r3, [r7, #12]
 8027f84:	4a72      	ldr	r2, [pc, #456]	; (8028150 <HAL_I2C_Init+0x268>)
 8027f86:	fba2 2303 	umull	r2, r3, r2, r3
 8027f8a:	0c9b      	lsrs	r3, r3, #18
 8027f8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8027f8e:	687b      	ldr	r3, [r7, #4]
 8027f90:	681b      	ldr	r3, [r3, #0]
 8027f92:	685b      	ldr	r3, [r3, #4]
 8027f94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8027f98:	687b      	ldr	r3, [r7, #4]
 8027f9a:	681b      	ldr	r3, [r3, #0]
 8027f9c:	68ba      	ldr	r2, [r7, #8]
 8027f9e:	430a      	orrs	r2, r1
 8027fa0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8027fa2:	687b      	ldr	r3, [r7, #4]
 8027fa4:	681b      	ldr	r3, [r3, #0]
 8027fa6:	6a1b      	ldr	r3, [r3, #32]
 8027fa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8027fac:	687b      	ldr	r3, [r7, #4]
 8027fae:	685b      	ldr	r3, [r3, #4]
 8027fb0:	4a64      	ldr	r2, [pc, #400]	; (8028144 <HAL_I2C_Init+0x25c>)
 8027fb2:	4293      	cmp	r3, r2
 8027fb4:	d802      	bhi.n	8027fbc <HAL_I2C_Init+0xd4>
 8027fb6:	68bb      	ldr	r3, [r7, #8]
 8027fb8:	3301      	adds	r3, #1
 8027fba:	e009      	b.n	8027fd0 <HAL_I2C_Init+0xe8>
 8027fbc:	68bb      	ldr	r3, [r7, #8]
 8027fbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8027fc2:	fb02 f303 	mul.w	r3, r2, r3
 8027fc6:	4a63      	ldr	r2, [pc, #396]	; (8028154 <HAL_I2C_Init+0x26c>)
 8027fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8027fcc:	099b      	lsrs	r3, r3, #6
 8027fce:	3301      	adds	r3, #1
 8027fd0:	687a      	ldr	r2, [r7, #4]
 8027fd2:	6812      	ldr	r2, [r2, #0]
 8027fd4:	430b      	orrs	r3, r1
 8027fd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8027fd8:	687b      	ldr	r3, [r7, #4]
 8027fda:	681b      	ldr	r3, [r3, #0]
 8027fdc:	69db      	ldr	r3, [r3, #28]
 8027fde:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8027fe2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8027fe6:	687b      	ldr	r3, [r7, #4]
 8027fe8:	685b      	ldr	r3, [r3, #4]
 8027fea:	4956      	ldr	r1, [pc, #344]	; (8028144 <HAL_I2C_Init+0x25c>)
 8027fec:	428b      	cmp	r3, r1
 8027fee:	d80d      	bhi.n	802800c <HAL_I2C_Init+0x124>
 8027ff0:	68fb      	ldr	r3, [r7, #12]
 8027ff2:	1e59      	subs	r1, r3, #1
 8027ff4:	687b      	ldr	r3, [r7, #4]
 8027ff6:	685b      	ldr	r3, [r3, #4]
 8027ff8:	005b      	lsls	r3, r3, #1
 8027ffa:	fbb1 f3f3 	udiv	r3, r1, r3
 8027ffe:	3301      	adds	r3, #1
 8028000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028004:	2b04      	cmp	r3, #4
 8028006:	bf38      	it	cc
 8028008:	2304      	movcc	r3, #4
 802800a:	e04f      	b.n	80280ac <HAL_I2C_Init+0x1c4>
 802800c:	687b      	ldr	r3, [r7, #4]
 802800e:	689b      	ldr	r3, [r3, #8]
 8028010:	2b00      	cmp	r3, #0
 8028012:	d111      	bne.n	8028038 <HAL_I2C_Init+0x150>
 8028014:	68fb      	ldr	r3, [r7, #12]
 8028016:	1e58      	subs	r0, r3, #1
 8028018:	687b      	ldr	r3, [r7, #4]
 802801a:	6859      	ldr	r1, [r3, #4]
 802801c:	460b      	mov	r3, r1
 802801e:	005b      	lsls	r3, r3, #1
 8028020:	440b      	add	r3, r1
 8028022:	fbb0 f3f3 	udiv	r3, r0, r3
 8028026:	3301      	adds	r3, #1
 8028028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802802c:	2b00      	cmp	r3, #0
 802802e:	bf0c      	ite	eq
 8028030:	2301      	moveq	r3, #1
 8028032:	2300      	movne	r3, #0
 8028034:	b2db      	uxtb	r3, r3
 8028036:	e012      	b.n	802805e <HAL_I2C_Init+0x176>
 8028038:	68fb      	ldr	r3, [r7, #12]
 802803a:	1e58      	subs	r0, r3, #1
 802803c:	687b      	ldr	r3, [r7, #4]
 802803e:	6859      	ldr	r1, [r3, #4]
 8028040:	460b      	mov	r3, r1
 8028042:	009b      	lsls	r3, r3, #2
 8028044:	440b      	add	r3, r1
 8028046:	0099      	lsls	r1, r3, #2
 8028048:	440b      	add	r3, r1
 802804a:	fbb0 f3f3 	udiv	r3, r0, r3
 802804e:	3301      	adds	r3, #1
 8028050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028054:	2b00      	cmp	r3, #0
 8028056:	bf0c      	ite	eq
 8028058:	2301      	moveq	r3, #1
 802805a:	2300      	movne	r3, #0
 802805c:	b2db      	uxtb	r3, r3
 802805e:	2b00      	cmp	r3, #0
 8028060:	d001      	beq.n	8028066 <HAL_I2C_Init+0x17e>
 8028062:	2301      	movs	r3, #1
 8028064:	e022      	b.n	80280ac <HAL_I2C_Init+0x1c4>
 8028066:	687b      	ldr	r3, [r7, #4]
 8028068:	689b      	ldr	r3, [r3, #8]
 802806a:	2b00      	cmp	r3, #0
 802806c:	d10e      	bne.n	802808c <HAL_I2C_Init+0x1a4>
 802806e:	68fb      	ldr	r3, [r7, #12]
 8028070:	1e58      	subs	r0, r3, #1
 8028072:	687b      	ldr	r3, [r7, #4]
 8028074:	6859      	ldr	r1, [r3, #4]
 8028076:	460b      	mov	r3, r1
 8028078:	005b      	lsls	r3, r3, #1
 802807a:	440b      	add	r3, r1
 802807c:	fbb0 f3f3 	udiv	r3, r0, r3
 8028080:	3301      	adds	r3, #1
 8028082:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802808a:	e00f      	b.n	80280ac <HAL_I2C_Init+0x1c4>
 802808c:	68fb      	ldr	r3, [r7, #12]
 802808e:	1e58      	subs	r0, r3, #1
 8028090:	687b      	ldr	r3, [r7, #4]
 8028092:	6859      	ldr	r1, [r3, #4]
 8028094:	460b      	mov	r3, r1
 8028096:	009b      	lsls	r3, r3, #2
 8028098:	440b      	add	r3, r1
 802809a:	0099      	lsls	r1, r3, #2
 802809c:	440b      	add	r3, r1
 802809e:	fbb0 f3f3 	udiv	r3, r0, r3
 80280a2:	3301      	adds	r3, #1
 80280a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80280a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80280ac:	6879      	ldr	r1, [r7, #4]
 80280ae:	6809      	ldr	r1, [r1, #0]
 80280b0:	4313      	orrs	r3, r2
 80280b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80280b4:	687b      	ldr	r3, [r7, #4]
 80280b6:	681b      	ldr	r3, [r3, #0]
 80280b8:	681b      	ldr	r3, [r3, #0]
 80280ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80280be:	687b      	ldr	r3, [r7, #4]
 80280c0:	69da      	ldr	r2, [r3, #28]
 80280c2:	687b      	ldr	r3, [r7, #4]
 80280c4:	6a1b      	ldr	r3, [r3, #32]
 80280c6:	431a      	orrs	r2, r3
 80280c8:	687b      	ldr	r3, [r7, #4]
 80280ca:	681b      	ldr	r3, [r3, #0]
 80280cc:	430a      	orrs	r2, r1
 80280ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80280d0:	687b      	ldr	r3, [r7, #4]
 80280d2:	681b      	ldr	r3, [r3, #0]
 80280d4:	689b      	ldr	r3, [r3, #8]
 80280d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80280da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80280de:	687a      	ldr	r2, [r7, #4]
 80280e0:	6911      	ldr	r1, [r2, #16]
 80280e2:	687a      	ldr	r2, [r7, #4]
 80280e4:	68d2      	ldr	r2, [r2, #12]
 80280e6:	4311      	orrs	r1, r2
 80280e8:	687a      	ldr	r2, [r7, #4]
 80280ea:	6812      	ldr	r2, [r2, #0]
 80280ec:	430b      	orrs	r3, r1
 80280ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80280f0:	687b      	ldr	r3, [r7, #4]
 80280f2:	681b      	ldr	r3, [r3, #0]
 80280f4:	68db      	ldr	r3, [r3, #12]
 80280f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80280fa:	687b      	ldr	r3, [r7, #4]
 80280fc:	695a      	ldr	r2, [r3, #20]
 80280fe:	687b      	ldr	r3, [r7, #4]
 8028100:	699b      	ldr	r3, [r3, #24]
 8028102:	431a      	orrs	r2, r3
 8028104:	687b      	ldr	r3, [r7, #4]
 8028106:	681b      	ldr	r3, [r3, #0]
 8028108:	430a      	orrs	r2, r1
 802810a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 802810c:	687b      	ldr	r3, [r7, #4]
 802810e:	681b      	ldr	r3, [r3, #0]
 8028110:	681a      	ldr	r2, [r3, #0]
 8028112:	687b      	ldr	r3, [r7, #4]
 8028114:	681b      	ldr	r3, [r3, #0]
 8028116:	f042 0201 	orr.w	r2, r2, #1
 802811a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 802811c:	687b      	ldr	r3, [r7, #4]
 802811e:	2200      	movs	r2, #0
 8028120:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8028122:	687b      	ldr	r3, [r7, #4]
 8028124:	2220      	movs	r2, #32
 8028126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 802812a:	687b      	ldr	r3, [r7, #4]
 802812c:	2200      	movs	r2, #0
 802812e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8028130:	687b      	ldr	r3, [r7, #4]
 8028132:	2200      	movs	r2, #0
 8028134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8028138:	2300      	movs	r3, #0
}
 802813a:	4618      	mov	r0, r3
 802813c:	3710      	adds	r7, #16
 802813e:	46bd      	mov	sp, r7
 8028140:	bd80      	pop	{r7, pc}
 8028142:	bf00      	nop
 8028144:	000186a0 	.word	0x000186a0
 8028148:	001e847f 	.word	0x001e847f
 802814c:	003d08ff 	.word	0x003d08ff
 8028150:	431bde83 	.word	0x431bde83
 8028154:	10624dd3 	.word	0x10624dd3

08028158 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8028158:	b580      	push	{r7, lr}
 802815a:	b086      	sub	sp, #24
 802815c:	af00      	add	r7, sp, #0
 802815e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8028160:	687b      	ldr	r3, [r7, #4]
 8028162:	2b00      	cmp	r3, #0
 8028164:	d101      	bne.n	802816a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8028166:	2301      	movs	r3, #1
 8028168:	e25b      	b.n	8028622 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 802816a:	687b      	ldr	r3, [r7, #4]
 802816c:	681b      	ldr	r3, [r3, #0]
 802816e:	f003 0301 	and.w	r3, r3, #1
 8028172:	2b00      	cmp	r3, #0
 8028174:	d075      	beq.n	8028262 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8028176:	4ba3      	ldr	r3, [pc, #652]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 8028178:	689b      	ldr	r3, [r3, #8]
 802817a:	f003 030c 	and.w	r3, r3, #12
 802817e:	2b04      	cmp	r3, #4
 8028180:	d00c      	beq.n	802819c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8028182:	4ba0      	ldr	r3, [pc, #640]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 8028184:	689b      	ldr	r3, [r3, #8]
 8028186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 802818a:	2b08      	cmp	r3, #8
 802818c:	d112      	bne.n	80281b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 802818e:	4b9d      	ldr	r3, [pc, #628]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 8028190:	685b      	ldr	r3, [r3, #4]
 8028192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8028196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802819a:	d10b      	bne.n	80281b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802819c:	4b99      	ldr	r3, [pc, #612]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 802819e:	681b      	ldr	r3, [r3, #0]
 80281a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80281a4:	2b00      	cmp	r3, #0
 80281a6:	d05b      	beq.n	8028260 <HAL_RCC_OscConfig+0x108>
 80281a8:	687b      	ldr	r3, [r7, #4]
 80281aa:	685b      	ldr	r3, [r3, #4]
 80281ac:	2b00      	cmp	r3, #0
 80281ae:	d157      	bne.n	8028260 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80281b0:	2301      	movs	r3, #1
 80281b2:	e236      	b.n	8028622 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80281b4:	687b      	ldr	r3, [r7, #4]
 80281b6:	685b      	ldr	r3, [r3, #4]
 80281b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80281bc:	d106      	bne.n	80281cc <HAL_RCC_OscConfig+0x74>
 80281be:	4b91      	ldr	r3, [pc, #580]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 80281c0:	681b      	ldr	r3, [r3, #0]
 80281c2:	4a90      	ldr	r2, [pc, #576]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 80281c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80281c8:	6013      	str	r3, [r2, #0]
 80281ca:	e01d      	b.n	8028208 <HAL_RCC_OscConfig+0xb0>
 80281cc:	687b      	ldr	r3, [r7, #4]
 80281ce:	685b      	ldr	r3, [r3, #4]
 80281d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80281d4:	d10c      	bne.n	80281f0 <HAL_RCC_OscConfig+0x98>
 80281d6:	4b8b      	ldr	r3, [pc, #556]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 80281d8:	681b      	ldr	r3, [r3, #0]
 80281da:	4a8a      	ldr	r2, [pc, #552]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 80281dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80281e0:	6013      	str	r3, [r2, #0]
 80281e2:	4b88      	ldr	r3, [pc, #544]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 80281e4:	681b      	ldr	r3, [r3, #0]
 80281e6:	4a87      	ldr	r2, [pc, #540]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 80281e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80281ec:	6013      	str	r3, [r2, #0]
 80281ee:	e00b      	b.n	8028208 <HAL_RCC_OscConfig+0xb0>
 80281f0:	4b84      	ldr	r3, [pc, #528]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 80281f2:	681b      	ldr	r3, [r3, #0]
 80281f4:	4a83      	ldr	r2, [pc, #524]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 80281f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80281fa:	6013      	str	r3, [r2, #0]
 80281fc:	4b81      	ldr	r3, [pc, #516]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 80281fe:	681b      	ldr	r3, [r3, #0]
 8028200:	4a80      	ldr	r2, [pc, #512]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 8028202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8028206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8028208:	687b      	ldr	r3, [r7, #4]
 802820a:	685b      	ldr	r3, [r3, #4]
 802820c:	2b00      	cmp	r3, #0
 802820e:	d013      	beq.n	8028238 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028210:	f7fe f926 	bl	8026460 <HAL_GetTick>
 8028214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8028216:	e008      	b.n	802822a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8028218:	f7fe f922 	bl	8026460 <HAL_GetTick>
 802821c:	4602      	mov	r2, r0
 802821e:	693b      	ldr	r3, [r7, #16]
 8028220:	1ad3      	subs	r3, r2, r3
 8028222:	2b64      	cmp	r3, #100	; 0x64
 8028224:	d901      	bls.n	802822a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8028226:	2303      	movs	r3, #3
 8028228:	e1fb      	b.n	8028622 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802822a:	4b76      	ldr	r3, [pc, #472]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 802822c:	681b      	ldr	r3, [r3, #0]
 802822e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028232:	2b00      	cmp	r3, #0
 8028234:	d0f0      	beq.n	8028218 <HAL_RCC_OscConfig+0xc0>
 8028236:	e014      	b.n	8028262 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028238:	f7fe f912 	bl	8026460 <HAL_GetTick>
 802823c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 802823e:	e008      	b.n	8028252 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8028240:	f7fe f90e 	bl	8026460 <HAL_GetTick>
 8028244:	4602      	mov	r2, r0
 8028246:	693b      	ldr	r3, [r7, #16]
 8028248:	1ad3      	subs	r3, r2, r3
 802824a:	2b64      	cmp	r3, #100	; 0x64
 802824c:	d901      	bls.n	8028252 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 802824e:	2303      	movs	r3, #3
 8028250:	e1e7      	b.n	8028622 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8028252:	4b6c      	ldr	r3, [pc, #432]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 8028254:	681b      	ldr	r3, [r3, #0]
 8028256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802825a:	2b00      	cmp	r3, #0
 802825c:	d1f0      	bne.n	8028240 <HAL_RCC_OscConfig+0xe8>
 802825e:	e000      	b.n	8028262 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8028260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8028262:	687b      	ldr	r3, [r7, #4]
 8028264:	681b      	ldr	r3, [r3, #0]
 8028266:	f003 0302 	and.w	r3, r3, #2
 802826a:	2b00      	cmp	r3, #0
 802826c:	d063      	beq.n	8028336 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 802826e:	4b65      	ldr	r3, [pc, #404]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 8028270:	689b      	ldr	r3, [r3, #8]
 8028272:	f003 030c 	and.w	r3, r3, #12
 8028276:	2b00      	cmp	r3, #0
 8028278:	d00b      	beq.n	8028292 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802827a:	4b62      	ldr	r3, [pc, #392]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 802827c:	689b      	ldr	r3, [r3, #8]
 802827e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8028282:	2b08      	cmp	r3, #8
 8028284:	d11c      	bne.n	80282c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8028286:	4b5f      	ldr	r3, [pc, #380]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 8028288:	685b      	ldr	r3, [r3, #4]
 802828a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802828e:	2b00      	cmp	r3, #0
 8028290:	d116      	bne.n	80282c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8028292:	4b5c      	ldr	r3, [pc, #368]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 8028294:	681b      	ldr	r3, [r3, #0]
 8028296:	f003 0302 	and.w	r3, r3, #2
 802829a:	2b00      	cmp	r3, #0
 802829c:	d005      	beq.n	80282aa <HAL_RCC_OscConfig+0x152>
 802829e:	687b      	ldr	r3, [r7, #4]
 80282a0:	68db      	ldr	r3, [r3, #12]
 80282a2:	2b01      	cmp	r3, #1
 80282a4:	d001      	beq.n	80282aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80282a6:	2301      	movs	r3, #1
 80282a8:	e1bb      	b.n	8028622 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80282aa:	4b56      	ldr	r3, [pc, #344]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 80282ac:	681b      	ldr	r3, [r3, #0]
 80282ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80282b2:	687b      	ldr	r3, [r7, #4]
 80282b4:	691b      	ldr	r3, [r3, #16]
 80282b6:	00db      	lsls	r3, r3, #3
 80282b8:	4952      	ldr	r1, [pc, #328]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 80282ba:	4313      	orrs	r3, r2
 80282bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80282be:	e03a      	b.n	8028336 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80282c0:	687b      	ldr	r3, [r7, #4]
 80282c2:	68db      	ldr	r3, [r3, #12]
 80282c4:	2b00      	cmp	r3, #0
 80282c6:	d020      	beq.n	802830a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80282c8:	4b4f      	ldr	r3, [pc, #316]	; (8028408 <HAL_RCC_OscConfig+0x2b0>)
 80282ca:	2201      	movs	r2, #1
 80282cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80282ce:	f7fe f8c7 	bl	8026460 <HAL_GetTick>
 80282d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80282d4:	e008      	b.n	80282e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80282d6:	f7fe f8c3 	bl	8026460 <HAL_GetTick>
 80282da:	4602      	mov	r2, r0
 80282dc:	693b      	ldr	r3, [r7, #16]
 80282de:	1ad3      	subs	r3, r2, r3
 80282e0:	2b02      	cmp	r3, #2
 80282e2:	d901      	bls.n	80282e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80282e4:	2303      	movs	r3, #3
 80282e6:	e19c      	b.n	8028622 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80282e8:	4b46      	ldr	r3, [pc, #280]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 80282ea:	681b      	ldr	r3, [r3, #0]
 80282ec:	f003 0302 	and.w	r3, r3, #2
 80282f0:	2b00      	cmp	r3, #0
 80282f2:	d0f0      	beq.n	80282d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80282f4:	4b43      	ldr	r3, [pc, #268]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 80282f6:	681b      	ldr	r3, [r3, #0]
 80282f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80282fc:	687b      	ldr	r3, [r7, #4]
 80282fe:	691b      	ldr	r3, [r3, #16]
 8028300:	00db      	lsls	r3, r3, #3
 8028302:	4940      	ldr	r1, [pc, #256]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 8028304:	4313      	orrs	r3, r2
 8028306:	600b      	str	r3, [r1, #0]
 8028308:	e015      	b.n	8028336 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802830a:	4b3f      	ldr	r3, [pc, #252]	; (8028408 <HAL_RCC_OscConfig+0x2b0>)
 802830c:	2200      	movs	r2, #0
 802830e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8028310:	f7fe f8a6 	bl	8026460 <HAL_GetTick>
 8028314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8028316:	e008      	b.n	802832a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8028318:	f7fe f8a2 	bl	8026460 <HAL_GetTick>
 802831c:	4602      	mov	r2, r0
 802831e:	693b      	ldr	r3, [r7, #16]
 8028320:	1ad3      	subs	r3, r2, r3
 8028322:	2b02      	cmp	r3, #2
 8028324:	d901      	bls.n	802832a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8028326:	2303      	movs	r3, #3
 8028328:	e17b      	b.n	8028622 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802832a:	4b36      	ldr	r3, [pc, #216]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 802832c:	681b      	ldr	r3, [r3, #0]
 802832e:	f003 0302 	and.w	r3, r3, #2
 8028332:	2b00      	cmp	r3, #0
 8028334:	d1f0      	bne.n	8028318 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8028336:	687b      	ldr	r3, [r7, #4]
 8028338:	681b      	ldr	r3, [r3, #0]
 802833a:	f003 0308 	and.w	r3, r3, #8
 802833e:	2b00      	cmp	r3, #0
 8028340:	d030      	beq.n	80283a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8028342:	687b      	ldr	r3, [r7, #4]
 8028344:	695b      	ldr	r3, [r3, #20]
 8028346:	2b00      	cmp	r3, #0
 8028348:	d016      	beq.n	8028378 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 802834a:	4b30      	ldr	r3, [pc, #192]	; (802840c <HAL_RCC_OscConfig+0x2b4>)
 802834c:	2201      	movs	r2, #1
 802834e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8028350:	f7fe f886 	bl	8026460 <HAL_GetTick>
 8028354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8028356:	e008      	b.n	802836a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8028358:	f7fe f882 	bl	8026460 <HAL_GetTick>
 802835c:	4602      	mov	r2, r0
 802835e:	693b      	ldr	r3, [r7, #16]
 8028360:	1ad3      	subs	r3, r2, r3
 8028362:	2b02      	cmp	r3, #2
 8028364:	d901      	bls.n	802836a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8028366:	2303      	movs	r3, #3
 8028368:	e15b      	b.n	8028622 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802836a:	4b26      	ldr	r3, [pc, #152]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 802836c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802836e:	f003 0302 	and.w	r3, r3, #2
 8028372:	2b00      	cmp	r3, #0
 8028374:	d0f0      	beq.n	8028358 <HAL_RCC_OscConfig+0x200>
 8028376:	e015      	b.n	80283a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8028378:	4b24      	ldr	r3, [pc, #144]	; (802840c <HAL_RCC_OscConfig+0x2b4>)
 802837a:	2200      	movs	r2, #0
 802837c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802837e:	f7fe f86f 	bl	8026460 <HAL_GetTick>
 8028382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8028384:	e008      	b.n	8028398 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8028386:	f7fe f86b 	bl	8026460 <HAL_GetTick>
 802838a:	4602      	mov	r2, r0
 802838c:	693b      	ldr	r3, [r7, #16]
 802838e:	1ad3      	subs	r3, r2, r3
 8028390:	2b02      	cmp	r3, #2
 8028392:	d901      	bls.n	8028398 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8028394:	2303      	movs	r3, #3
 8028396:	e144      	b.n	8028622 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8028398:	4b1a      	ldr	r3, [pc, #104]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 802839a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802839c:	f003 0302 	and.w	r3, r3, #2
 80283a0:	2b00      	cmp	r3, #0
 80283a2:	d1f0      	bne.n	8028386 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80283a4:	687b      	ldr	r3, [r7, #4]
 80283a6:	681b      	ldr	r3, [r3, #0]
 80283a8:	f003 0304 	and.w	r3, r3, #4
 80283ac:	2b00      	cmp	r3, #0
 80283ae:	f000 80a0 	beq.w	80284f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80283b2:	2300      	movs	r3, #0
 80283b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80283b6:	4b13      	ldr	r3, [pc, #76]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 80283b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80283ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80283be:	2b00      	cmp	r3, #0
 80283c0:	d10f      	bne.n	80283e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80283c2:	2300      	movs	r3, #0
 80283c4:	60bb      	str	r3, [r7, #8]
 80283c6:	4b0f      	ldr	r3, [pc, #60]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 80283c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80283ca:	4a0e      	ldr	r2, [pc, #56]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 80283cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80283d0:	6413      	str	r3, [r2, #64]	; 0x40
 80283d2:	4b0c      	ldr	r3, [pc, #48]	; (8028404 <HAL_RCC_OscConfig+0x2ac>)
 80283d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80283d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80283da:	60bb      	str	r3, [r7, #8]
 80283dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80283de:	2301      	movs	r3, #1
 80283e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80283e2:	4b0b      	ldr	r3, [pc, #44]	; (8028410 <HAL_RCC_OscConfig+0x2b8>)
 80283e4:	681b      	ldr	r3, [r3, #0]
 80283e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80283ea:	2b00      	cmp	r3, #0
 80283ec:	d121      	bne.n	8028432 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80283ee:	4b08      	ldr	r3, [pc, #32]	; (8028410 <HAL_RCC_OscConfig+0x2b8>)
 80283f0:	681b      	ldr	r3, [r3, #0]
 80283f2:	4a07      	ldr	r2, [pc, #28]	; (8028410 <HAL_RCC_OscConfig+0x2b8>)
 80283f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80283f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80283fa:	f7fe f831 	bl	8026460 <HAL_GetTick>
 80283fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8028400:	e011      	b.n	8028426 <HAL_RCC_OscConfig+0x2ce>
 8028402:	bf00      	nop
 8028404:	40023800 	.word	0x40023800
 8028408:	42470000 	.word	0x42470000
 802840c:	42470e80 	.word	0x42470e80
 8028410:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8028414:	f7fe f824 	bl	8026460 <HAL_GetTick>
 8028418:	4602      	mov	r2, r0
 802841a:	693b      	ldr	r3, [r7, #16]
 802841c:	1ad3      	subs	r3, r2, r3
 802841e:	2b02      	cmp	r3, #2
 8028420:	d901      	bls.n	8028426 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8028422:	2303      	movs	r3, #3
 8028424:	e0fd      	b.n	8028622 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8028426:	4b81      	ldr	r3, [pc, #516]	; (802862c <HAL_RCC_OscConfig+0x4d4>)
 8028428:	681b      	ldr	r3, [r3, #0]
 802842a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802842e:	2b00      	cmp	r3, #0
 8028430:	d0f0      	beq.n	8028414 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8028432:	687b      	ldr	r3, [r7, #4]
 8028434:	689b      	ldr	r3, [r3, #8]
 8028436:	2b01      	cmp	r3, #1
 8028438:	d106      	bne.n	8028448 <HAL_RCC_OscConfig+0x2f0>
 802843a:	4b7d      	ldr	r3, [pc, #500]	; (8028630 <HAL_RCC_OscConfig+0x4d8>)
 802843c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802843e:	4a7c      	ldr	r2, [pc, #496]	; (8028630 <HAL_RCC_OscConfig+0x4d8>)
 8028440:	f043 0301 	orr.w	r3, r3, #1
 8028444:	6713      	str	r3, [r2, #112]	; 0x70
 8028446:	e01c      	b.n	8028482 <HAL_RCC_OscConfig+0x32a>
 8028448:	687b      	ldr	r3, [r7, #4]
 802844a:	689b      	ldr	r3, [r3, #8]
 802844c:	2b05      	cmp	r3, #5
 802844e:	d10c      	bne.n	802846a <HAL_RCC_OscConfig+0x312>
 8028450:	4b77      	ldr	r3, [pc, #476]	; (8028630 <HAL_RCC_OscConfig+0x4d8>)
 8028452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028454:	4a76      	ldr	r2, [pc, #472]	; (8028630 <HAL_RCC_OscConfig+0x4d8>)
 8028456:	f043 0304 	orr.w	r3, r3, #4
 802845a:	6713      	str	r3, [r2, #112]	; 0x70
 802845c:	4b74      	ldr	r3, [pc, #464]	; (8028630 <HAL_RCC_OscConfig+0x4d8>)
 802845e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028460:	4a73      	ldr	r2, [pc, #460]	; (8028630 <HAL_RCC_OscConfig+0x4d8>)
 8028462:	f043 0301 	orr.w	r3, r3, #1
 8028466:	6713      	str	r3, [r2, #112]	; 0x70
 8028468:	e00b      	b.n	8028482 <HAL_RCC_OscConfig+0x32a>
 802846a:	4b71      	ldr	r3, [pc, #452]	; (8028630 <HAL_RCC_OscConfig+0x4d8>)
 802846c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802846e:	4a70      	ldr	r2, [pc, #448]	; (8028630 <HAL_RCC_OscConfig+0x4d8>)
 8028470:	f023 0301 	bic.w	r3, r3, #1
 8028474:	6713      	str	r3, [r2, #112]	; 0x70
 8028476:	4b6e      	ldr	r3, [pc, #440]	; (8028630 <HAL_RCC_OscConfig+0x4d8>)
 8028478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802847a:	4a6d      	ldr	r2, [pc, #436]	; (8028630 <HAL_RCC_OscConfig+0x4d8>)
 802847c:	f023 0304 	bic.w	r3, r3, #4
 8028480:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8028482:	687b      	ldr	r3, [r7, #4]
 8028484:	689b      	ldr	r3, [r3, #8]
 8028486:	2b00      	cmp	r3, #0
 8028488:	d015      	beq.n	80284b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802848a:	f7fd ffe9 	bl	8026460 <HAL_GetTick>
 802848e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8028490:	e00a      	b.n	80284a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8028492:	f7fd ffe5 	bl	8026460 <HAL_GetTick>
 8028496:	4602      	mov	r2, r0
 8028498:	693b      	ldr	r3, [r7, #16]
 802849a:	1ad3      	subs	r3, r2, r3
 802849c:	f241 3288 	movw	r2, #5000	; 0x1388
 80284a0:	4293      	cmp	r3, r2
 80284a2:	d901      	bls.n	80284a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80284a4:	2303      	movs	r3, #3
 80284a6:	e0bc      	b.n	8028622 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80284a8:	4b61      	ldr	r3, [pc, #388]	; (8028630 <HAL_RCC_OscConfig+0x4d8>)
 80284aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80284ac:	f003 0302 	and.w	r3, r3, #2
 80284b0:	2b00      	cmp	r3, #0
 80284b2:	d0ee      	beq.n	8028492 <HAL_RCC_OscConfig+0x33a>
 80284b4:	e014      	b.n	80284e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80284b6:	f7fd ffd3 	bl	8026460 <HAL_GetTick>
 80284ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80284bc:	e00a      	b.n	80284d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80284be:	f7fd ffcf 	bl	8026460 <HAL_GetTick>
 80284c2:	4602      	mov	r2, r0
 80284c4:	693b      	ldr	r3, [r7, #16]
 80284c6:	1ad3      	subs	r3, r2, r3
 80284c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80284cc:	4293      	cmp	r3, r2
 80284ce:	d901      	bls.n	80284d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80284d0:	2303      	movs	r3, #3
 80284d2:	e0a6      	b.n	8028622 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80284d4:	4b56      	ldr	r3, [pc, #344]	; (8028630 <HAL_RCC_OscConfig+0x4d8>)
 80284d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80284d8:	f003 0302 	and.w	r3, r3, #2
 80284dc:	2b00      	cmp	r3, #0
 80284de:	d1ee      	bne.n	80284be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80284e0:	7dfb      	ldrb	r3, [r7, #23]
 80284e2:	2b01      	cmp	r3, #1
 80284e4:	d105      	bne.n	80284f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80284e6:	4b52      	ldr	r3, [pc, #328]	; (8028630 <HAL_RCC_OscConfig+0x4d8>)
 80284e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80284ea:	4a51      	ldr	r2, [pc, #324]	; (8028630 <HAL_RCC_OscConfig+0x4d8>)
 80284ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80284f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80284f2:	687b      	ldr	r3, [r7, #4]
 80284f4:	699b      	ldr	r3, [r3, #24]
 80284f6:	2b00      	cmp	r3, #0
 80284f8:	f000 8092 	beq.w	8028620 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80284fc:	4b4c      	ldr	r3, [pc, #304]	; (8028630 <HAL_RCC_OscConfig+0x4d8>)
 80284fe:	689b      	ldr	r3, [r3, #8]
 8028500:	f003 030c 	and.w	r3, r3, #12
 8028504:	2b08      	cmp	r3, #8
 8028506:	d05c      	beq.n	80285c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8028508:	687b      	ldr	r3, [r7, #4]
 802850a:	699b      	ldr	r3, [r3, #24]
 802850c:	2b02      	cmp	r3, #2
 802850e:	d141      	bne.n	8028594 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8028510:	4b48      	ldr	r3, [pc, #288]	; (8028634 <HAL_RCC_OscConfig+0x4dc>)
 8028512:	2200      	movs	r2, #0
 8028514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028516:	f7fd ffa3 	bl	8026460 <HAL_GetTick>
 802851a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 802851c:	e008      	b.n	8028530 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 802851e:	f7fd ff9f 	bl	8026460 <HAL_GetTick>
 8028522:	4602      	mov	r2, r0
 8028524:	693b      	ldr	r3, [r7, #16]
 8028526:	1ad3      	subs	r3, r2, r3
 8028528:	2b02      	cmp	r3, #2
 802852a:	d901      	bls.n	8028530 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 802852c:	2303      	movs	r3, #3
 802852e:	e078      	b.n	8028622 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8028530:	4b3f      	ldr	r3, [pc, #252]	; (8028630 <HAL_RCC_OscConfig+0x4d8>)
 8028532:	681b      	ldr	r3, [r3, #0]
 8028534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8028538:	2b00      	cmp	r3, #0
 802853a:	d1f0      	bne.n	802851e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 802853c:	687b      	ldr	r3, [r7, #4]
 802853e:	69da      	ldr	r2, [r3, #28]
 8028540:	687b      	ldr	r3, [r7, #4]
 8028542:	6a1b      	ldr	r3, [r3, #32]
 8028544:	431a      	orrs	r2, r3
 8028546:	687b      	ldr	r3, [r7, #4]
 8028548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802854a:	019b      	lsls	r3, r3, #6
 802854c:	431a      	orrs	r2, r3
 802854e:	687b      	ldr	r3, [r7, #4]
 8028550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028552:	085b      	lsrs	r3, r3, #1
 8028554:	3b01      	subs	r3, #1
 8028556:	041b      	lsls	r3, r3, #16
 8028558:	431a      	orrs	r2, r3
 802855a:	687b      	ldr	r3, [r7, #4]
 802855c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802855e:	061b      	lsls	r3, r3, #24
 8028560:	4933      	ldr	r1, [pc, #204]	; (8028630 <HAL_RCC_OscConfig+0x4d8>)
 8028562:	4313      	orrs	r3, r2
 8028564:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8028566:	4b33      	ldr	r3, [pc, #204]	; (8028634 <HAL_RCC_OscConfig+0x4dc>)
 8028568:	2201      	movs	r2, #1
 802856a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802856c:	f7fd ff78 	bl	8026460 <HAL_GetTick>
 8028570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8028572:	e008      	b.n	8028586 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8028574:	f7fd ff74 	bl	8026460 <HAL_GetTick>
 8028578:	4602      	mov	r2, r0
 802857a:	693b      	ldr	r3, [r7, #16]
 802857c:	1ad3      	subs	r3, r2, r3
 802857e:	2b02      	cmp	r3, #2
 8028580:	d901      	bls.n	8028586 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8028582:	2303      	movs	r3, #3
 8028584:	e04d      	b.n	8028622 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8028586:	4b2a      	ldr	r3, [pc, #168]	; (8028630 <HAL_RCC_OscConfig+0x4d8>)
 8028588:	681b      	ldr	r3, [r3, #0]
 802858a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802858e:	2b00      	cmp	r3, #0
 8028590:	d0f0      	beq.n	8028574 <HAL_RCC_OscConfig+0x41c>
 8028592:	e045      	b.n	8028620 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8028594:	4b27      	ldr	r3, [pc, #156]	; (8028634 <HAL_RCC_OscConfig+0x4dc>)
 8028596:	2200      	movs	r2, #0
 8028598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802859a:	f7fd ff61 	bl	8026460 <HAL_GetTick>
 802859e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80285a0:	e008      	b.n	80285b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80285a2:	f7fd ff5d 	bl	8026460 <HAL_GetTick>
 80285a6:	4602      	mov	r2, r0
 80285a8:	693b      	ldr	r3, [r7, #16]
 80285aa:	1ad3      	subs	r3, r2, r3
 80285ac:	2b02      	cmp	r3, #2
 80285ae:	d901      	bls.n	80285b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80285b0:	2303      	movs	r3, #3
 80285b2:	e036      	b.n	8028622 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80285b4:	4b1e      	ldr	r3, [pc, #120]	; (8028630 <HAL_RCC_OscConfig+0x4d8>)
 80285b6:	681b      	ldr	r3, [r3, #0]
 80285b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80285bc:	2b00      	cmp	r3, #0
 80285be:	d1f0      	bne.n	80285a2 <HAL_RCC_OscConfig+0x44a>
 80285c0:	e02e      	b.n	8028620 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80285c2:	687b      	ldr	r3, [r7, #4]
 80285c4:	699b      	ldr	r3, [r3, #24]
 80285c6:	2b01      	cmp	r3, #1
 80285c8:	d101      	bne.n	80285ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80285ca:	2301      	movs	r3, #1
 80285cc:	e029      	b.n	8028622 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80285ce:	4b18      	ldr	r3, [pc, #96]	; (8028630 <HAL_RCC_OscConfig+0x4d8>)
 80285d0:	685b      	ldr	r3, [r3, #4]
 80285d2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80285d4:	68fb      	ldr	r3, [r7, #12]
 80285d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80285da:	687b      	ldr	r3, [r7, #4]
 80285dc:	69db      	ldr	r3, [r3, #28]
 80285de:	429a      	cmp	r2, r3
 80285e0:	d11c      	bne.n	802861c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80285e2:	68fb      	ldr	r3, [r7, #12]
 80285e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80285e8:	687b      	ldr	r3, [r7, #4]
 80285ea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80285ec:	429a      	cmp	r2, r3
 80285ee:	d115      	bne.n	802861c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80285f0:	68fa      	ldr	r2, [r7, #12]
 80285f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80285f6:	4013      	ands	r3, r2
 80285f8:	687a      	ldr	r2, [r7, #4]
 80285fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80285fc:	4293      	cmp	r3, r2
 80285fe:	d10d      	bne.n	802861c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8028600:	68fb      	ldr	r3, [r7, #12]
 8028602:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8028606:	687b      	ldr	r3, [r7, #4]
 8028608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 802860a:	429a      	cmp	r2, r3
 802860c:	d106      	bne.n	802861c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 802860e:	68fb      	ldr	r3, [r7, #12]
 8028610:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8028614:	687b      	ldr	r3, [r7, #4]
 8028616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8028618:	429a      	cmp	r2, r3
 802861a:	d001      	beq.n	8028620 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 802861c:	2301      	movs	r3, #1
 802861e:	e000      	b.n	8028622 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8028620:	2300      	movs	r3, #0
}
 8028622:	4618      	mov	r0, r3
 8028624:	3718      	adds	r7, #24
 8028626:	46bd      	mov	sp, r7
 8028628:	bd80      	pop	{r7, pc}
 802862a:	bf00      	nop
 802862c:	40007000 	.word	0x40007000
 8028630:	40023800 	.word	0x40023800
 8028634:	42470060 	.word	0x42470060

08028638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8028638:	b580      	push	{r7, lr}
 802863a:	b084      	sub	sp, #16
 802863c:	af00      	add	r7, sp, #0
 802863e:	6078      	str	r0, [r7, #4]
 8028640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8028642:	687b      	ldr	r3, [r7, #4]
 8028644:	2b00      	cmp	r3, #0
 8028646:	d101      	bne.n	802864c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8028648:	2301      	movs	r3, #1
 802864a:	e0cc      	b.n	80287e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 802864c:	4b68      	ldr	r3, [pc, #416]	; (80287f0 <HAL_RCC_ClockConfig+0x1b8>)
 802864e:	681b      	ldr	r3, [r3, #0]
 8028650:	f003 030f 	and.w	r3, r3, #15
 8028654:	683a      	ldr	r2, [r7, #0]
 8028656:	429a      	cmp	r2, r3
 8028658:	d90c      	bls.n	8028674 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802865a:	4b65      	ldr	r3, [pc, #404]	; (80287f0 <HAL_RCC_ClockConfig+0x1b8>)
 802865c:	683a      	ldr	r2, [r7, #0]
 802865e:	b2d2      	uxtb	r2, r2
 8028660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8028662:	4b63      	ldr	r3, [pc, #396]	; (80287f0 <HAL_RCC_ClockConfig+0x1b8>)
 8028664:	681b      	ldr	r3, [r3, #0]
 8028666:	f003 030f 	and.w	r3, r3, #15
 802866a:	683a      	ldr	r2, [r7, #0]
 802866c:	429a      	cmp	r2, r3
 802866e:	d001      	beq.n	8028674 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8028670:	2301      	movs	r3, #1
 8028672:	e0b8      	b.n	80287e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8028674:	687b      	ldr	r3, [r7, #4]
 8028676:	681b      	ldr	r3, [r3, #0]
 8028678:	f003 0302 	and.w	r3, r3, #2
 802867c:	2b00      	cmp	r3, #0
 802867e:	d020      	beq.n	80286c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8028680:	687b      	ldr	r3, [r7, #4]
 8028682:	681b      	ldr	r3, [r3, #0]
 8028684:	f003 0304 	and.w	r3, r3, #4
 8028688:	2b00      	cmp	r3, #0
 802868a:	d005      	beq.n	8028698 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 802868c:	4b59      	ldr	r3, [pc, #356]	; (80287f4 <HAL_RCC_ClockConfig+0x1bc>)
 802868e:	689b      	ldr	r3, [r3, #8]
 8028690:	4a58      	ldr	r2, [pc, #352]	; (80287f4 <HAL_RCC_ClockConfig+0x1bc>)
 8028692:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8028696:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8028698:	687b      	ldr	r3, [r7, #4]
 802869a:	681b      	ldr	r3, [r3, #0]
 802869c:	f003 0308 	and.w	r3, r3, #8
 80286a0:	2b00      	cmp	r3, #0
 80286a2:	d005      	beq.n	80286b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80286a4:	4b53      	ldr	r3, [pc, #332]	; (80287f4 <HAL_RCC_ClockConfig+0x1bc>)
 80286a6:	689b      	ldr	r3, [r3, #8]
 80286a8:	4a52      	ldr	r2, [pc, #328]	; (80287f4 <HAL_RCC_ClockConfig+0x1bc>)
 80286aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80286ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80286b0:	4b50      	ldr	r3, [pc, #320]	; (80287f4 <HAL_RCC_ClockConfig+0x1bc>)
 80286b2:	689b      	ldr	r3, [r3, #8]
 80286b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80286b8:	687b      	ldr	r3, [r7, #4]
 80286ba:	689b      	ldr	r3, [r3, #8]
 80286bc:	494d      	ldr	r1, [pc, #308]	; (80287f4 <HAL_RCC_ClockConfig+0x1bc>)
 80286be:	4313      	orrs	r3, r2
 80286c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80286c2:	687b      	ldr	r3, [r7, #4]
 80286c4:	681b      	ldr	r3, [r3, #0]
 80286c6:	f003 0301 	and.w	r3, r3, #1
 80286ca:	2b00      	cmp	r3, #0
 80286cc:	d044      	beq.n	8028758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80286ce:	687b      	ldr	r3, [r7, #4]
 80286d0:	685b      	ldr	r3, [r3, #4]
 80286d2:	2b01      	cmp	r3, #1
 80286d4:	d107      	bne.n	80286e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80286d6:	4b47      	ldr	r3, [pc, #284]	; (80287f4 <HAL_RCC_ClockConfig+0x1bc>)
 80286d8:	681b      	ldr	r3, [r3, #0]
 80286da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80286de:	2b00      	cmp	r3, #0
 80286e0:	d119      	bne.n	8028716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80286e2:	2301      	movs	r3, #1
 80286e4:	e07f      	b.n	80287e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80286e6:	687b      	ldr	r3, [r7, #4]
 80286e8:	685b      	ldr	r3, [r3, #4]
 80286ea:	2b02      	cmp	r3, #2
 80286ec:	d003      	beq.n	80286f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80286ee:	687b      	ldr	r3, [r7, #4]
 80286f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80286f2:	2b03      	cmp	r3, #3
 80286f4:	d107      	bne.n	8028706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80286f6:	4b3f      	ldr	r3, [pc, #252]	; (80287f4 <HAL_RCC_ClockConfig+0x1bc>)
 80286f8:	681b      	ldr	r3, [r3, #0]
 80286fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80286fe:	2b00      	cmp	r3, #0
 8028700:	d109      	bne.n	8028716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8028702:	2301      	movs	r3, #1
 8028704:	e06f      	b.n	80287e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8028706:	4b3b      	ldr	r3, [pc, #236]	; (80287f4 <HAL_RCC_ClockConfig+0x1bc>)
 8028708:	681b      	ldr	r3, [r3, #0]
 802870a:	f003 0302 	and.w	r3, r3, #2
 802870e:	2b00      	cmp	r3, #0
 8028710:	d101      	bne.n	8028716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8028712:	2301      	movs	r3, #1
 8028714:	e067      	b.n	80287e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8028716:	4b37      	ldr	r3, [pc, #220]	; (80287f4 <HAL_RCC_ClockConfig+0x1bc>)
 8028718:	689b      	ldr	r3, [r3, #8]
 802871a:	f023 0203 	bic.w	r2, r3, #3
 802871e:	687b      	ldr	r3, [r7, #4]
 8028720:	685b      	ldr	r3, [r3, #4]
 8028722:	4934      	ldr	r1, [pc, #208]	; (80287f4 <HAL_RCC_ClockConfig+0x1bc>)
 8028724:	4313      	orrs	r3, r2
 8028726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8028728:	f7fd fe9a 	bl	8026460 <HAL_GetTick>
 802872c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802872e:	e00a      	b.n	8028746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8028730:	f7fd fe96 	bl	8026460 <HAL_GetTick>
 8028734:	4602      	mov	r2, r0
 8028736:	68fb      	ldr	r3, [r7, #12]
 8028738:	1ad3      	subs	r3, r2, r3
 802873a:	f241 3288 	movw	r2, #5000	; 0x1388
 802873e:	4293      	cmp	r3, r2
 8028740:	d901      	bls.n	8028746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8028742:	2303      	movs	r3, #3
 8028744:	e04f      	b.n	80287e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8028746:	4b2b      	ldr	r3, [pc, #172]	; (80287f4 <HAL_RCC_ClockConfig+0x1bc>)
 8028748:	689b      	ldr	r3, [r3, #8]
 802874a:	f003 020c 	and.w	r2, r3, #12
 802874e:	687b      	ldr	r3, [r7, #4]
 8028750:	685b      	ldr	r3, [r3, #4]
 8028752:	009b      	lsls	r3, r3, #2
 8028754:	429a      	cmp	r2, r3
 8028756:	d1eb      	bne.n	8028730 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8028758:	4b25      	ldr	r3, [pc, #148]	; (80287f0 <HAL_RCC_ClockConfig+0x1b8>)
 802875a:	681b      	ldr	r3, [r3, #0]
 802875c:	f003 030f 	and.w	r3, r3, #15
 8028760:	683a      	ldr	r2, [r7, #0]
 8028762:	429a      	cmp	r2, r3
 8028764:	d20c      	bcs.n	8028780 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8028766:	4b22      	ldr	r3, [pc, #136]	; (80287f0 <HAL_RCC_ClockConfig+0x1b8>)
 8028768:	683a      	ldr	r2, [r7, #0]
 802876a:	b2d2      	uxtb	r2, r2
 802876c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802876e:	4b20      	ldr	r3, [pc, #128]	; (80287f0 <HAL_RCC_ClockConfig+0x1b8>)
 8028770:	681b      	ldr	r3, [r3, #0]
 8028772:	f003 030f 	and.w	r3, r3, #15
 8028776:	683a      	ldr	r2, [r7, #0]
 8028778:	429a      	cmp	r2, r3
 802877a:	d001      	beq.n	8028780 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 802877c:	2301      	movs	r3, #1
 802877e:	e032      	b.n	80287e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8028780:	687b      	ldr	r3, [r7, #4]
 8028782:	681b      	ldr	r3, [r3, #0]
 8028784:	f003 0304 	and.w	r3, r3, #4
 8028788:	2b00      	cmp	r3, #0
 802878a:	d008      	beq.n	802879e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 802878c:	4b19      	ldr	r3, [pc, #100]	; (80287f4 <HAL_RCC_ClockConfig+0x1bc>)
 802878e:	689b      	ldr	r3, [r3, #8]
 8028790:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8028794:	687b      	ldr	r3, [r7, #4]
 8028796:	68db      	ldr	r3, [r3, #12]
 8028798:	4916      	ldr	r1, [pc, #88]	; (80287f4 <HAL_RCC_ClockConfig+0x1bc>)
 802879a:	4313      	orrs	r3, r2
 802879c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802879e:	687b      	ldr	r3, [r7, #4]
 80287a0:	681b      	ldr	r3, [r3, #0]
 80287a2:	f003 0308 	and.w	r3, r3, #8
 80287a6:	2b00      	cmp	r3, #0
 80287a8:	d009      	beq.n	80287be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80287aa:	4b12      	ldr	r3, [pc, #72]	; (80287f4 <HAL_RCC_ClockConfig+0x1bc>)
 80287ac:	689b      	ldr	r3, [r3, #8]
 80287ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80287b2:	687b      	ldr	r3, [r7, #4]
 80287b4:	691b      	ldr	r3, [r3, #16]
 80287b6:	00db      	lsls	r3, r3, #3
 80287b8:	490e      	ldr	r1, [pc, #56]	; (80287f4 <HAL_RCC_ClockConfig+0x1bc>)
 80287ba:	4313      	orrs	r3, r2
 80287bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80287be:	f000 f821 	bl	8028804 <HAL_RCC_GetSysClockFreq>
 80287c2:	4601      	mov	r1, r0
 80287c4:	4b0b      	ldr	r3, [pc, #44]	; (80287f4 <HAL_RCC_ClockConfig+0x1bc>)
 80287c6:	689b      	ldr	r3, [r3, #8]
 80287c8:	091b      	lsrs	r3, r3, #4
 80287ca:	f003 030f 	and.w	r3, r3, #15
 80287ce:	4a0a      	ldr	r2, [pc, #40]	; (80287f8 <HAL_RCC_ClockConfig+0x1c0>)
 80287d0:	5cd3      	ldrb	r3, [r2, r3]
 80287d2:	fa21 f303 	lsr.w	r3, r1, r3
 80287d6:	4a09      	ldr	r2, [pc, #36]	; (80287fc <HAL_RCC_ClockConfig+0x1c4>)
 80287d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80287da:	4b09      	ldr	r3, [pc, #36]	; (8028800 <HAL_RCC_ClockConfig+0x1c8>)
 80287dc:	681b      	ldr	r3, [r3, #0]
 80287de:	4618      	mov	r0, r3
 80287e0:	f7fd fdfa 	bl	80263d8 <HAL_InitTick>

  return HAL_OK;
 80287e4:	2300      	movs	r3, #0
}
 80287e6:	4618      	mov	r0, r3
 80287e8:	3710      	adds	r7, #16
 80287ea:	46bd      	mov	sp, r7
 80287ec:	bd80      	pop	{r7, pc}
 80287ee:	bf00      	nop
 80287f0:	40023c00 	.word	0x40023c00
 80287f4:	40023800 	.word	0x40023800
 80287f8:	0802a53c 	.word	0x0802a53c
 80287fc:	20000014 	.word	0x20000014
 8028800:	20000018 	.word	0x20000018

08028804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8028804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028806:	b085      	sub	sp, #20
 8028808:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 802880a:	2300      	movs	r3, #0
 802880c:	607b      	str	r3, [r7, #4]
 802880e:	2300      	movs	r3, #0
 8028810:	60fb      	str	r3, [r7, #12]
 8028812:	2300      	movs	r3, #0
 8028814:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8028816:	2300      	movs	r3, #0
 8028818:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 802881a:	4b50      	ldr	r3, [pc, #320]	; (802895c <HAL_RCC_GetSysClockFreq+0x158>)
 802881c:	689b      	ldr	r3, [r3, #8]
 802881e:	f003 030c 	and.w	r3, r3, #12
 8028822:	2b04      	cmp	r3, #4
 8028824:	d007      	beq.n	8028836 <HAL_RCC_GetSysClockFreq+0x32>
 8028826:	2b08      	cmp	r3, #8
 8028828:	d008      	beq.n	802883c <HAL_RCC_GetSysClockFreq+0x38>
 802882a:	2b00      	cmp	r3, #0
 802882c:	f040 808d 	bne.w	802894a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8028830:	4b4b      	ldr	r3, [pc, #300]	; (8028960 <HAL_RCC_GetSysClockFreq+0x15c>)
 8028832:	60bb      	str	r3, [r7, #8]
       break;
 8028834:	e08c      	b.n	8028950 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8028836:	4b4b      	ldr	r3, [pc, #300]	; (8028964 <HAL_RCC_GetSysClockFreq+0x160>)
 8028838:	60bb      	str	r3, [r7, #8]
      break;
 802883a:	e089      	b.n	8028950 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 802883c:	4b47      	ldr	r3, [pc, #284]	; (802895c <HAL_RCC_GetSysClockFreq+0x158>)
 802883e:	685b      	ldr	r3, [r3, #4]
 8028840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8028844:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8028846:	4b45      	ldr	r3, [pc, #276]	; (802895c <HAL_RCC_GetSysClockFreq+0x158>)
 8028848:	685b      	ldr	r3, [r3, #4]
 802884a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802884e:	2b00      	cmp	r3, #0
 8028850:	d023      	beq.n	802889a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8028852:	4b42      	ldr	r3, [pc, #264]	; (802895c <HAL_RCC_GetSysClockFreq+0x158>)
 8028854:	685b      	ldr	r3, [r3, #4]
 8028856:	099b      	lsrs	r3, r3, #6
 8028858:	f04f 0400 	mov.w	r4, #0
 802885c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8028860:	f04f 0200 	mov.w	r2, #0
 8028864:	ea03 0501 	and.w	r5, r3, r1
 8028868:	ea04 0602 	and.w	r6, r4, r2
 802886c:	4a3d      	ldr	r2, [pc, #244]	; (8028964 <HAL_RCC_GetSysClockFreq+0x160>)
 802886e:	fb02 f106 	mul.w	r1, r2, r6
 8028872:	2200      	movs	r2, #0
 8028874:	fb02 f205 	mul.w	r2, r2, r5
 8028878:	440a      	add	r2, r1
 802887a:	493a      	ldr	r1, [pc, #232]	; (8028964 <HAL_RCC_GetSysClockFreq+0x160>)
 802887c:	fba5 0101 	umull	r0, r1, r5, r1
 8028880:	1853      	adds	r3, r2, r1
 8028882:	4619      	mov	r1, r3
 8028884:	687b      	ldr	r3, [r7, #4]
 8028886:	f04f 0400 	mov.w	r4, #0
 802888a:	461a      	mov	r2, r3
 802888c:	4623      	mov	r3, r4
 802888e:	f7f8 f87d 	bl	802098c <__aeabi_uldivmod>
 8028892:	4603      	mov	r3, r0
 8028894:	460c      	mov	r4, r1
 8028896:	60fb      	str	r3, [r7, #12]
 8028898:	e049      	b.n	802892e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802889a:	4b30      	ldr	r3, [pc, #192]	; (802895c <HAL_RCC_GetSysClockFreq+0x158>)
 802889c:	685b      	ldr	r3, [r3, #4]
 802889e:	099b      	lsrs	r3, r3, #6
 80288a0:	f04f 0400 	mov.w	r4, #0
 80288a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80288a8:	f04f 0200 	mov.w	r2, #0
 80288ac:	ea03 0501 	and.w	r5, r3, r1
 80288b0:	ea04 0602 	and.w	r6, r4, r2
 80288b4:	4629      	mov	r1, r5
 80288b6:	4632      	mov	r2, r6
 80288b8:	f04f 0300 	mov.w	r3, #0
 80288bc:	f04f 0400 	mov.w	r4, #0
 80288c0:	0154      	lsls	r4, r2, #5
 80288c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80288c6:	014b      	lsls	r3, r1, #5
 80288c8:	4619      	mov	r1, r3
 80288ca:	4622      	mov	r2, r4
 80288cc:	1b49      	subs	r1, r1, r5
 80288ce:	eb62 0206 	sbc.w	r2, r2, r6
 80288d2:	f04f 0300 	mov.w	r3, #0
 80288d6:	f04f 0400 	mov.w	r4, #0
 80288da:	0194      	lsls	r4, r2, #6
 80288dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80288e0:	018b      	lsls	r3, r1, #6
 80288e2:	1a5b      	subs	r3, r3, r1
 80288e4:	eb64 0402 	sbc.w	r4, r4, r2
 80288e8:	f04f 0100 	mov.w	r1, #0
 80288ec:	f04f 0200 	mov.w	r2, #0
 80288f0:	00e2      	lsls	r2, r4, #3
 80288f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80288f6:	00d9      	lsls	r1, r3, #3
 80288f8:	460b      	mov	r3, r1
 80288fa:	4614      	mov	r4, r2
 80288fc:	195b      	adds	r3, r3, r5
 80288fe:	eb44 0406 	adc.w	r4, r4, r6
 8028902:	f04f 0100 	mov.w	r1, #0
 8028906:	f04f 0200 	mov.w	r2, #0
 802890a:	02a2      	lsls	r2, r4, #10
 802890c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8028910:	0299      	lsls	r1, r3, #10
 8028912:	460b      	mov	r3, r1
 8028914:	4614      	mov	r4, r2
 8028916:	4618      	mov	r0, r3
 8028918:	4621      	mov	r1, r4
 802891a:	687b      	ldr	r3, [r7, #4]
 802891c:	f04f 0400 	mov.w	r4, #0
 8028920:	461a      	mov	r2, r3
 8028922:	4623      	mov	r3, r4
 8028924:	f7f8 f832 	bl	802098c <__aeabi_uldivmod>
 8028928:	4603      	mov	r3, r0
 802892a:	460c      	mov	r4, r1
 802892c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 802892e:	4b0b      	ldr	r3, [pc, #44]	; (802895c <HAL_RCC_GetSysClockFreq+0x158>)
 8028930:	685b      	ldr	r3, [r3, #4]
 8028932:	0c1b      	lsrs	r3, r3, #16
 8028934:	f003 0303 	and.w	r3, r3, #3
 8028938:	3301      	adds	r3, #1
 802893a:	005b      	lsls	r3, r3, #1
 802893c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 802893e:	68fa      	ldr	r2, [r7, #12]
 8028940:	683b      	ldr	r3, [r7, #0]
 8028942:	fbb2 f3f3 	udiv	r3, r2, r3
 8028946:	60bb      	str	r3, [r7, #8]
      break;
 8028948:	e002      	b.n	8028950 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 802894a:	4b05      	ldr	r3, [pc, #20]	; (8028960 <HAL_RCC_GetSysClockFreq+0x15c>)
 802894c:	60bb      	str	r3, [r7, #8]
      break;
 802894e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8028950:	68bb      	ldr	r3, [r7, #8]
}
 8028952:	4618      	mov	r0, r3
 8028954:	3714      	adds	r7, #20
 8028956:	46bd      	mov	sp, r7
 8028958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802895a:	bf00      	nop
 802895c:	40023800 	.word	0x40023800
 8028960:	00f42400 	.word	0x00f42400
 8028964:	00b71b00 	.word	0x00b71b00

08028968 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8028968:	b480      	push	{r7}
 802896a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 802896c:	4b03      	ldr	r3, [pc, #12]	; (802897c <HAL_RCC_GetHCLKFreq+0x14>)
 802896e:	681b      	ldr	r3, [r3, #0]
}
 8028970:	4618      	mov	r0, r3
 8028972:	46bd      	mov	sp, r7
 8028974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028978:	4770      	bx	lr
 802897a:	bf00      	nop
 802897c:	20000014 	.word	0x20000014

08028980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8028980:	b580      	push	{r7, lr}
 8028982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8028984:	f7ff fff0 	bl	8028968 <HAL_RCC_GetHCLKFreq>
 8028988:	4601      	mov	r1, r0
 802898a:	4b05      	ldr	r3, [pc, #20]	; (80289a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 802898c:	689b      	ldr	r3, [r3, #8]
 802898e:	0a9b      	lsrs	r3, r3, #10
 8028990:	f003 0307 	and.w	r3, r3, #7
 8028994:	4a03      	ldr	r2, [pc, #12]	; (80289a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8028996:	5cd3      	ldrb	r3, [r2, r3]
 8028998:	fa21 f303 	lsr.w	r3, r1, r3
}
 802899c:	4618      	mov	r0, r3
 802899e:	bd80      	pop	{r7, pc}
 80289a0:	40023800 	.word	0x40023800
 80289a4:	0802a54c 	.word	0x0802a54c

080289a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80289a8:	b580      	push	{r7, lr}
 80289aa:	b082      	sub	sp, #8
 80289ac:	af00      	add	r7, sp, #0
 80289ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80289b0:	687b      	ldr	r3, [r7, #4]
 80289b2:	2b00      	cmp	r3, #0
 80289b4:	d101      	bne.n	80289ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80289b6:	2301      	movs	r3, #1
 80289b8:	e056      	b.n	8028a68 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80289ba:	687b      	ldr	r3, [r7, #4]
 80289bc:	2200      	movs	r2, #0
 80289be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80289c0:	687b      	ldr	r3, [r7, #4]
 80289c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80289c6:	b2db      	uxtb	r3, r3
 80289c8:	2b00      	cmp	r3, #0
 80289ca:	d106      	bne.n	80289da <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80289cc:	687b      	ldr	r3, [r7, #4]
 80289ce:	2200      	movs	r2, #0
 80289d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80289d4:	6878      	ldr	r0, [r7, #4]
 80289d6:	f7fc ffab 	bl	8025930 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80289da:	687b      	ldr	r3, [r7, #4]
 80289dc:	2202      	movs	r2, #2
 80289de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80289e2:	687b      	ldr	r3, [r7, #4]
 80289e4:	681b      	ldr	r3, [r3, #0]
 80289e6:	681a      	ldr	r2, [r3, #0]
 80289e8:	687b      	ldr	r3, [r7, #4]
 80289ea:	681b      	ldr	r3, [r3, #0]
 80289ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80289f0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80289f2:	687b      	ldr	r3, [r7, #4]
 80289f4:	685a      	ldr	r2, [r3, #4]
 80289f6:	687b      	ldr	r3, [r7, #4]
 80289f8:	689b      	ldr	r3, [r3, #8]
 80289fa:	431a      	orrs	r2, r3
 80289fc:	687b      	ldr	r3, [r7, #4]
 80289fe:	68db      	ldr	r3, [r3, #12]
 8028a00:	431a      	orrs	r2, r3
 8028a02:	687b      	ldr	r3, [r7, #4]
 8028a04:	691b      	ldr	r3, [r3, #16]
 8028a06:	431a      	orrs	r2, r3
 8028a08:	687b      	ldr	r3, [r7, #4]
 8028a0a:	695b      	ldr	r3, [r3, #20]
 8028a0c:	431a      	orrs	r2, r3
 8028a0e:	687b      	ldr	r3, [r7, #4]
 8028a10:	699b      	ldr	r3, [r3, #24]
 8028a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8028a16:	431a      	orrs	r2, r3
 8028a18:	687b      	ldr	r3, [r7, #4]
 8028a1a:	69db      	ldr	r3, [r3, #28]
 8028a1c:	431a      	orrs	r2, r3
 8028a1e:	687b      	ldr	r3, [r7, #4]
 8028a20:	6a1b      	ldr	r3, [r3, #32]
 8028a22:	ea42 0103 	orr.w	r1, r2, r3
 8028a26:	687b      	ldr	r3, [r7, #4]
 8028a28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8028a2a:	687b      	ldr	r3, [r7, #4]
 8028a2c:	681b      	ldr	r3, [r3, #0]
 8028a2e:	430a      	orrs	r2, r1
 8028a30:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8028a32:	687b      	ldr	r3, [r7, #4]
 8028a34:	699b      	ldr	r3, [r3, #24]
 8028a36:	0c1b      	lsrs	r3, r3, #16
 8028a38:	f003 0104 	and.w	r1, r3, #4
 8028a3c:	687b      	ldr	r3, [r7, #4]
 8028a3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8028a40:	687b      	ldr	r3, [r7, #4]
 8028a42:	681b      	ldr	r3, [r3, #0]
 8028a44:	430a      	orrs	r2, r1
 8028a46:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8028a48:	687b      	ldr	r3, [r7, #4]
 8028a4a:	681b      	ldr	r3, [r3, #0]
 8028a4c:	69da      	ldr	r2, [r3, #28]
 8028a4e:	687b      	ldr	r3, [r7, #4]
 8028a50:	681b      	ldr	r3, [r3, #0]
 8028a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8028a56:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8028a58:	687b      	ldr	r3, [r7, #4]
 8028a5a:	2200      	movs	r2, #0
 8028a5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8028a5e:	687b      	ldr	r3, [r7, #4]
 8028a60:	2201      	movs	r2, #1
 8028a62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8028a66:	2300      	movs	r3, #0
}
 8028a68:	4618      	mov	r0, r3
 8028a6a:	3708      	adds	r7, #8
 8028a6c:	46bd      	mov	sp, r7
 8028a6e:	bd80      	pop	{r7, pc}

08028a70 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8028a70:	b580      	push	{r7, lr}
 8028a72:	b088      	sub	sp, #32
 8028a74:	af00      	add	r7, sp, #0
 8028a76:	60f8      	str	r0, [r7, #12]
 8028a78:	60b9      	str	r1, [r7, #8]
 8028a7a:	603b      	str	r3, [r7, #0]
 8028a7c:	4613      	mov	r3, r2
 8028a7e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8028a80:	2300      	movs	r3, #0
 8028a82:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8028a84:	68fb      	ldr	r3, [r7, #12]
 8028a86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8028a8a:	2b01      	cmp	r3, #1
 8028a8c:	d101      	bne.n	8028a92 <HAL_SPI_Transmit+0x22>
 8028a8e:	2302      	movs	r3, #2
 8028a90:	e11e      	b.n	8028cd0 <HAL_SPI_Transmit+0x260>
 8028a92:	68fb      	ldr	r3, [r7, #12]
 8028a94:	2201      	movs	r2, #1
 8028a96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8028a9a:	f7fd fce1 	bl	8026460 <HAL_GetTick>
 8028a9e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8028aa0:	88fb      	ldrh	r3, [r7, #6]
 8028aa2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8028aa4:	68fb      	ldr	r3, [r7, #12]
 8028aa6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028aaa:	b2db      	uxtb	r3, r3
 8028aac:	2b01      	cmp	r3, #1
 8028aae:	d002      	beq.n	8028ab6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8028ab0:	2302      	movs	r3, #2
 8028ab2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8028ab4:	e103      	b.n	8028cbe <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8028ab6:	68bb      	ldr	r3, [r7, #8]
 8028ab8:	2b00      	cmp	r3, #0
 8028aba:	d002      	beq.n	8028ac2 <HAL_SPI_Transmit+0x52>
 8028abc:	88fb      	ldrh	r3, [r7, #6]
 8028abe:	2b00      	cmp	r3, #0
 8028ac0:	d102      	bne.n	8028ac8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8028ac2:	2301      	movs	r3, #1
 8028ac4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8028ac6:	e0fa      	b.n	8028cbe <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8028ac8:	68fb      	ldr	r3, [r7, #12]
 8028aca:	2203      	movs	r2, #3
 8028acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028ad0:	68fb      	ldr	r3, [r7, #12]
 8028ad2:	2200      	movs	r2, #0
 8028ad4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8028ad6:	68fb      	ldr	r3, [r7, #12]
 8028ad8:	68ba      	ldr	r2, [r7, #8]
 8028ada:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8028adc:	68fb      	ldr	r3, [r7, #12]
 8028ade:	88fa      	ldrh	r2, [r7, #6]
 8028ae0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8028ae2:	68fb      	ldr	r3, [r7, #12]
 8028ae4:	88fa      	ldrh	r2, [r7, #6]
 8028ae6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8028ae8:	68fb      	ldr	r3, [r7, #12]
 8028aea:	2200      	movs	r2, #0
 8028aec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8028aee:	68fb      	ldr	r3, [r7, #12]
 8028af0:	2200      	movs	r2, #0
 8028af2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8028af4:	68fb      	ldr	r3, [r7, #12]
 8028af6:	2200      	movs	r2, #0
 8028af8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8028afa:	68fb      	ldr	r3, [r7, #12]
 8028afc:	2200      	movs	r2, #0
 8028afe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8028b00:	68fb      	ldr	r3, [r7, #12]
 8028b02:	2200      	movs	r2, #0
 8028b04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028b06:	68fb      	ldr	r3, [r7, #12]
 8028b08:	689b      	ldr	r3, [r3, #8]
 8028b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028b0e:	d107      	bne.n	8028b20 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8028b10:	68fb      	ldr	r3, [r7, #12]
 8028b12:	681b      	ldr	r3, [r3, #0]
 8028b14:	681a      	ldr	r2, [r3, #0]
 8028b16:	68fb      	ldr	r3, [r7, #12]
 8028b18:	681b      	ldr	r3, [r3, #0]
 8028b1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8028b1e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028b20:	68fb      	ldr	r3, [r7, #12]
 8028b22:	681b      	ldr	r3, [r3, #0]
 8028b24:	681b      	ldr	r3, [r3, #0]
 8028b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028b2a:	2b40      	cmp	r3, #64	; 0x40
 8028b2c:	d007      	beq.n	8028b3e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8028b2e:	68fb      	ldr	r3, [r7, #12]
 8028b30:	681b      	ldr	r3, [r3, #0]
 8028b32:	681a      	ldr	r2, [r3, #0]
 8028b34:	68fb      	ldr	r3, [r7, #12]
 8028b36:	681b      	ldr	r3, [r3, #0]
 8028b38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028b3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8028b3e:	68fb      	ldr	r3, [r7, #12]
 8028b40:	68db      	ldr	r3, [r3, #12]
 8028b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8028b46:	d14b      	bne.n	8028be0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028b48:	68fb      	ldr	r3, [r7, #12]
 8028b4a:	685b      	ldr	r3, [r3, #4]
 8028b4c:	2b00      	cmp	r3, #0
 8028b4e:	d002      	beq.n	8028b56 <HAL_SPI_Transmit+0xe6>
 8028b50:	8afb      	ldrh	r3, [r7, #22]
 8028b52:	2b01      	cmp	r3, #1
 8028b54:	d13e      	bne.n	8028bd4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028b56:	68fb      	ldr	r3, [r7, #12]
 8028b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028b5a:	881a      	ldrh	r2, [r3, #0]
 8028b5c:	68fb      	ldr	r3, [r7, #12]
 8028b5e:	681b      	ldr	r3, [r3, #0]
 8028b60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8028b62:	68fb      	ldr	r3, [r7, #12]
 8028b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028b66:	1c9a      	adds	r2, r3, #2
 8028b68:	68fb      	ldr	r3, [r7, #12]
 8028b6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028b6c:	68fb      	ldr	r3, [r7, #12]
 8028b6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028b70:	b29b      	uxth	r3, r3
 8028b72:	3b01      	subs	r3, #1
 8028b74:	b29a      	uxth	r2, r3
 8028b76:	68fb      	ldr	r3, [r7, #12]
 8028b78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8028b7a:	e02b      	b.n	8028bd4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8028b7c:	68fb      	ldr	r3, [r7, #12]
 8028b7e:	681b      	ldr	r3, [r3, #0]
 8028b80:	689b      	ldr	r3, [r3, #8]
 8028b82:	f003 0302 	and.w	r3, r3, #2
 8028b86:	2b02      	cmp	r3, #2
 8028b88:	d112      	bne.n	8028bb0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028b8a:	68fb      	ldr	r3, [r7, #12]
 8028b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028b8e:	881a      	ldrh	r2, [r3, #0]
 8028b90:	68fb      	ldr	r3, [r7, #12]
 8028b92:	681b      	ldr	r3, [r3, #0]
 8028b94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8028b96:	68fb      	ldr	r3, [r7, #12]
 8028b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028b9a:	1c9a      	adds	r2, r3, #2
 8028b9c:	68fb      	ldr	r3, [r7, #12]
 8028b9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028ba0:	68fb      	ldr	r3, [r7, #12]
 8028ba2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028ba4:	b29b      	uxth	r3, r3
 8028ba6:	3b01      	subs	r3, #1
 8028ba8:	b29a      	uxth	r2, r3
 8028baa:	68fb      	ldr	r3, [r7, #12]
 8028bac:	86da      	strh	r2, [r3, #54]	; 0x36
 8028bae:	e011      	b.n	8028bd4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028bb0:	f7fd fc56 	bl	8026460 <HAL_GetTick>
 8028bb4:	4602      	mov	r2, r0
 8028bb6:	69bb      	ldr	r3, [r7, #24]
 8028bb8:	1ad3      	subs	r3, r2, r3
 8028bba:	683a      	ldr	r2, [r7, #0]
 8028bbc:	429a      	cmp	r2, r3
 8028bbe:	d803      	bhi.n	8028bc8 <HAL_SPI_Transmit+0x158>
 8028bc0:	683b      	ldr	r3, [r7, #0]
 8028bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028bc6:	d102      	bne.n	8028bce <HAL_SPI_Transmit+0x15e>
 8028bc8:	683b      	ldr	r3, [r7, #0]
 8028bca:	2b00      	cmp	r3, #0
 8028bcc:	d102      	bne.n	8028bd4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8028bce:	2303      	movs	r3, #3
 8028bd0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8028bd2:	e074      	b.n	8028cbe <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8028bd4:	68fb      	ldr	r3, [r7, #12]
 8028bd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028bd8:	b29b      	uxth	r3, r3
 8028bda:	2b00      	cmp	r3, #0
 8028bdc:	d1ce      	bne.n	8028b7c <HAL_SPI_Transmit+0x10c>
 8028bde:	e04c      	b.n	8028c7a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028be0:	68fb      	ldr	r3, [r7, #12]
 8028be2:	685b      	ldr	r3, [r3, #4]
 8028be4:	2b00      	cmp	r3, #0
 8028be6:	d002      	beq.n	8028bee <HAL_SPI_Transmit+0x17e>
 8028be8:	8afb      	ldrh	r3, [r7, #22]
 8028bea:	2b01      	cmp	r3, #1
 8028bec:	d140      	bne.n	8028c70 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8028bee:	68fb      	ldr	r3, [r7, #12]
 8028bf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028bf2:	68fb      	ldr	r3, [r7, #12]
 8028bf4:	681b      	ldr	r3, [r3, #0]
 8028bf6:	330c      	adds	r3, #12
 8028bf8:	7812      	ldrb	r2, [r2, #0]
 8028bfa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8028bfc:	68fb      	ldr	r3, [r7, #12]
 8028bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028c00:	1c5a      	adds	r2, r3, #1
 8028c02:	68fb      	ldr	r3, [r7, #12]
 8028c04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8028c06:	68fb      	ldr	r3, [r7, #12]
 8028c08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028c0a:	b29b      	uxth	r3, r3
 8028c0c:	3b01      	subs	r3, #1
 8028c0e:	b29a      	uxth	r2, r3
 8028c10:	68fb      	ldr	r3, [r7, #12]
 8028c12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8028c14:	e02c      	b.n	8028c70 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8028c16:	68fb      	ldr	r3, [r7, #12]
 8028c18:	681b      	ldr	r3, [r3, #0]
 8028c1a:	689b      	ldr	r3, [r3, #8]
 8028c1c:	f003 0302 	and.w	r3, r3, #2
 8028c20:	2b02      	cmp	r3, #2
 8028c22:	d113      	bne.n	8028c4c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8028c24:	68fb      	ldr	r3, [r7, #12]
 8028c26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028c28:	68fb      	ldr	r3, [r7, #12]
 8028c2a:	681b      	ldr	r3, [r3, #0]
 8028c2c:	330c      	adds	r3, #12
 8028c2e:	7812      	ldrb	r2, [r2, #0]
 8028c30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8028c32:	68fb      	ldr	r3, [r7, #12]
 8028c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028c36:	1c5a      	adds	r2, r3, #1
 8028c38:	68fb      	ldr	r3, [r7, #12]
 8028c3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8028c3c:	68fb      	ldr	r3, [r7, #12]
 8028c3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028c40:	b29b      	uxth	r3, r3
 8028c42:	3b01      	subs	r3, #1
 8028c44:	b29a      	uxth	r2, r3
 8028c46:	68fb      	ldr	r3, [r7, #12]
 8028c48:	86da      	strh	r2, [r3, #54]	; 0x36
 8028c4a:	e011      	b.n	8028c70 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028c4c:	f7fd fc08 	bl	8026460 <HAL_GetTick>
 8028c50:	4602      	mov	r2, r0
 8028c52:	69bb      	ldr	r3, [r7, #24]
 8028c54:	1ad3      	subs	r3, r2, r3
 8028c56:	683a      	ldr	r2, [r7, #0]
 8028c58:	429a      	cmp	r2, r3
 8028c5a:	d803      	bhi.n	8028c64 <HAL_SPI_Transmit+0x1f4>
 8028c5c:	683b      	ldr	r3, [r7, #0]
 8028c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028c62:	d102      	bne.n	8028c6a <HAL_SPI_Transmit+0x1fa>
 8028c64:	683b      	ldr	r3, [r7, #0]
 8028c66:	2b00      	cmp	r3, #0
 8028c68:	d102      	bne.n	8028c70 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8028c6a:	2303      	movs	r3, #3
 8028c6c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8028c6e:	e026      	b.n	8028cbe <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8028c70:	68fb      	ldr	r3, [r7, #12]
 8028c72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8028c74:	b29b      	uxth	r3, r3
 8028c76:	2b00      	cmp	r3, #0
 8028c78:	d1cd      	bne.n	8028c16 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028c7a:	69ba      	ldr	r2, [r7, #24]
 8028c7c:	6839      	ldr	r1, [r7, #0]
 8028c7e:	68f8      	ldr	r0, [r7, #12]
 8028c80:	f000 fba4 	bl	80293cc <SPI_EndRxTxTransaction>
 8028c84:	4603      	mov	r3, r0
 8028c86:	2b00      	cmp	r3, #0
 8028c88:	d002      	beq.n	8028c90 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028c8a:	68fb      	ldr	r3, [r7, #12]
 8028c8c:	2220      	movs	r2, #32
 8028c8e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8028c90:	68fb      	ldr	r3, [r7, #12]
 8028c92:	689b      	ldr	r3, [r3, #8]
 8028c94:	2b00      	cmp	r3, #0
 8028c96:	d10a      	bne.n	8028cae <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8028c98:	2300      	movs	r3, #0
 8028c9a:	613b      	str	r3, [r7, #16]
 8028c9c:	68fb      	ldr	r3, [r7, #12]
 8028c9e:	681b      	ldr	r3, [r3, #0]
 8028ca0:	68db      	ldr	r3, [r3, #12]
 8028ca2:	613b      	str	r3, [r7, #16]
 8028ca4:	68fb      	ldr	r3, [r7, #12]
 8028ca6:	681b      	ldr	r3, [r3, #0]
 8028ca8:	689b      	ldr	r3, [r3, #8]
 8028caa:	613b      	str	r3, [r7, #16]
 8028cac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8028cae:	68fb      	ldr	r3, [r7, #12]
 8028cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028cb2:	2b00      	cmp	r3, #0
 8028cb4:	d002      	beq.n	8028cbc <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8028cb6:	2301      	movs	r3, #1
 8028cb8:	77fb      	strb	r3, [r7, #31]
 8028cba:	e000      	b.n	8028cbe <HAL_SPI_Transmit+0x24e>
  }

error:
 8028cbc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8028cbe:	68fb      	ldr	r3, [r7, #12]
 8028cc0:	2201      	movs	r2, #1
 8028cc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8028cc6:	68fb      	ldr	r3, [r7, #12]
 8028cc8:	2200      	movs	r2, #0
 8028cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8028cce:	7ffb      	ldrb	r3, [r7, #31]
}
 8028cd0:	4618      	mov	r0, r3
 8028cd2:	3720      	adds	r7, #32
 8028cd4:	46bd      	mov	sp, r7
 8028cd6:	bd80      	pop	{r7, pc}

08028cd8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8028cd8:	b580      	push	{r7, lr}
 8028cda:	b088      	sub	sp, #32
 8028cdc:	af02      	add	r7, sp, #8
 8028cde:	60f8      	str	r0, [r7, #12]
 8028ce0:	60b9      	str	r1, [r7, #8]
 8028ce2:	603b      	str	r3, [r7, #0]
 8028ce4:	4613      	mov	r3, r2
 8028ce6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8028ce8:	2300      	movs	r3, #0
 8028cea:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8028cec:	68fb      	ldr	r3, [r7, #12]
 8028cee:	685b      	ldr	r3, [r3, #4]
 8028cf0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028cf4:	d112      	bne.n	8028d1c <HAL_SPI_Receive+0x44>
 8028cf6:	68fb      	ldr	r3, [r7, #12]
 8028cf8:	689b      	ldr	r3, [r3, #8]
 8028cfa:	2b00      	cmp	r3, #0
 8028cfc:	d10e      	bne.n	8028d1c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8028cfe:	68fb      	ldr	r3, [r7, #12]
 8028d00:	2204      	movs	r2, #4
 8028d02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8028d06:	88fa      	ldrh	r2, [r7, #6]
 8028d08:	683b      	ldr	r3, [r7, #0]
 8028d0a:	9300      	str	r3, [sp, #0]
 8028d0c:	4613      	mov	r3, r2
 8028d0e:	68ba      	ldr	r2, [r7, #8]
 8028d10:	68b9      	ldr	r1, [r7, #8]
 8028d12:	68f8      	ldr	r0, [r7, #12]
 8028d14:	f000 f8e9 	bl	8028eea <HAL_SPI_TransmitReceive>
 8028d18:	4603      	mov	r3, r0
 8028d1a:	e0e2      	b.n	8028ee2 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8028d1c:	68fb      	ldr	r3, [r7, #12]
 8028d1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8028d22:	2b01      	cmp	r3, #1
 8028d24:	d101      	bne.n	8028d2a <HAL_SPI_Receive+0x52>
 8028d26:	2302      	movs	r3, #2
 8028d28:	e0db      	b.n	8028ee2 <HAL_SPI_Receive+0x20a>
 8028d2a:	68fb      	ldr	r3, [r7, #12]
 8028d2c:	2201      	movs	r2, #1
 8028d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8028d32:	f7fd fb95 	bl	8026460 <HAL_GetTick>
 8028d36:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8028d38:	68fb      	ldr	r3, [r7, #12]
 8028d3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028d3e:	b2db      	uxtb	r3, r3
 8028d40:	2b01      	cmp	r3, #1
 8028d42:	d002      	beq.n	8028d4a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8028d44:	2302      	movs	r3, #2
 8028d46:	75fb      	strb	r3, [r7, #23]
    goto error;
 8028d48:	e0c2      	b.n	8028ed0 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8028d4a:	68bb      	ldr	r3, [r7, #8]
 8028d4c:	2b00      	cmp	r3, #0
 8028d4e:	d002      	beq.n	8028d56 <HAL_SPI_Receive+0x7e>
 8028d50:	88fb      	ldrh	r3, [r7, #6]
 8028d52:	2b00      	cmp	r3, #0
 8028d54:	d102      	bne.n	8028d5c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8028d56:	2301      	movs	r3, #1
 8028d58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8028d5a:	e0b9      	b.n	8028ed0 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8028d5c:	68fb      	ldr	r3, [r7, #12]
 8028d5e:	2204      	movs	r2, #4
 8028d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028d64:	68fb      	ldr	r3, [r7, #12]
 8028d66:	2200      	movs	r2, #0
 8028d68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8028d6a:	68fb      	ldr	r3, [r7, #12]
 8028d6c:	68ba      	ldr	r2, [r7, #8]
 8028d6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8028d70:	68fb      	ldr	r3, [r7, #12]
 8028d72:	88fa      	ldrh	r2, [r7, #6]
 8028d74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8028d76:	68fb      	ldr	r3, [r7, #12]
 8028d78:	88fa      	ldrh	r2, [r7, #6]
 8028d7a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8028d7c:	68fb      	ldr	r3, [r7, #12]
 8028d7e:	2200      	movs	r2, #0
 8028d80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8028d82:	68fb      	ldr	r3, [r7, #12]
 8028d84:	2200      	movs	r2, #0
 8028d86:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8028d88:	68fb      	ldr	r3, [r7, #12]
 8028d8a:	2200      	movs	r2, #0
 8028d8c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8028d8e:	68fb      	ldr	r3, [r7, #12]
 8028d90:	2200      	movs	r2, #0
 8028d92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8028d94:	68fb      	ldr	r3, [r7, #12]
 8028d96:	2200      	movs	r2, #0
 8028d98:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8028d9a:	68fb      	ldr	r3, [r7, #12]
 8028d9c:	689b      	ldr	r3, [r3, #8]
 8028d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8028da2:	d107      	bne.n	8028db4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8028da4:	68fb      	ldr	r3, [r7, #12]
 8028da6:	681b      	ldr	r3, [r3, #0]
 8028da8:	681a      	ldr	r2, [r3, #0]
 8028daa:	68fb      	ldr	r3, [r7, #12]
 8028dac:	681b      	ldr	r3, [r3, #0]
 8028dae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8028db2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028db4:	68fb      	ldr	r3, [r7, #12]
 8028db6:	681b      	ldr	r3, [r3, #0]
 8028db8:	681b      	ldr	r3, [r3, #0]
 8028dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028dbe:	2b40      	cmp	r3, #64	; 0x40
 8028dc0:	d007      	beq.n	8028dd2 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8028dc2:	68fb      	ldr	r3, [r7, #12]
 8028dc4:	681b      	ldr	r3, [r3, #0]
 8028dc6:	681a      	ldr	r2, [r3, #0]
 8028dc8:	68fb      	ldr	r3, [r7, #12]
 8028dca:	681b      	ldr	r3, [r3, #0]
 8028dcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028dd0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8028dd2:	68fb      	ldr	r3, [r7, #12]
 8028dd4:	68db      	ldr	r3, [r3, #12]
 8028dd6:	2b00      	cmp	r3, #0
 8028dd8:	d162      	bne.n	8028ea0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8028dda:	e02e      	b.n	8028e3a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8028ddc:	68fb      	ldr	r3, [r7, #12]
 8028dde:	681b      	ldr	r3, [r3, #0]
 8028de0:	689b      	ldr	r3, [r3, #8]
 8028de2:	f003 0301 	and.w	r3, r3, #1
 8028de6:	2b01      	cmp	r3, #1
 8028de8:	d115      	bne.n	8028e16 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8028dea:	68fb      	ldr	r3, [r7, #12]
 8028dec:	681b      	ldr	r3, [r3, #0]
 8028dee:	f103 020c 	add.w	r2, r3, #12
 8028df2:	68fb      	ldr	r3, [r7, #12]
 8028df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028df6:	7812      	ldrb	r2, [r2, #0]
 8028df8:	b2d2      	uxtb	r2, r2
 8028dfa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8028dfc:	68fb      	ldr	r3, [r7, #12]
 8028dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028e00:	1c5a      	adds	r2, r3, #1
 8028e02:	68fb      	ldr	r3, [r7, #12]
 8028e04:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028e06:	68fb      	ldr	r3, [r7, #12]
 8028e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028e0a:	b29b      	uxth	r3, r3
 8028e0c:	3b01      	subs	r3, #1
 8028e0e:	b29a      	uxth	r2, r3
 8028e10:	68fb      	ldr	r3, [r7, #12]
 8028e12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8028e14:	e011      	b.n	8028e3a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028e16:	f7fd fb23 	bl	8026460 <HAL_GetTick>
 8028e1a:	4602      	mov	r2, r0
 8028e1c:	693b      	ldr	r3, [r7, #16]
 8028e1e:	1ad3      	subs	r3, r2, r3
 8028e20:	683a      	ldr	r2, [r7, #0]
 8028e22:	429a      	cmp	r2, r3
 8028e24:	d803      	bhi.n	8028e2e <HAL_SPI_Receive+0x156>
 8028e26:	683b      	ldr	r3, [r7, #0]
 8028e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028e2c:	d102      	bne.n	8028e34 <HAL_SPI_Receive+0x15c>
 8028e2e:	683b      	ldr	r3, [r7, #0]
 8028e30:	2b00      	cmp	r3, #0
 8028e32:	d102      	bne.n	8028e3a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8028e34:	2303      	movs	r3, #3
 8028e36:	75fb      	strb	r3, [r7, #23]
          goto error;
 8028e38:	e04a      	b.n	8028ed0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8028e3a:	68fb      	ldr	r3, [r7, #12]
 8028e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028e3e:	b29b      	uxth	r3, r3
 8028e40:	2b00      	cmp	r3, #0
 8028e42:	d1cb      	bne.n	8028ddc <HAL_SPI_Receive+0x104>
 8028e44:	e031      	b.n	8028eaa <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8028e46:	68fb      	ldr	r3, [r7, #12]
 8028e48:	681b      	ldr	r3, [r3, #0]
 8028e4a:	689b      	ldr	r3, [r3, #8]
 8028e4c:	f003 0301 	and.w	r3, r3, #1
 8028e50:	2b01      	cmp	r3, #1
 8028e52:	d113      	bne.n	8028e7c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8028e54:	68fb      	ldr	r3, [r7, #12]
 8028e56:	681b      	ldr	r3, [r3, #0]
 8028e58:	68da      	ldr	r2, [r3, #12]
 8028e5a:	68fb      	ldr	r3, [r7, #12]
 8028e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028e5e:	b292      	uxth	r2, r2
 8028e60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8028e62:	68fb      	ldr	r3, [r7, #12]
 8028e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028e66:	1c9a      	adds	r2, r3, #2
 8028e68:	68fb      	ldr	r3, [r7, #12]
 8028e6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8028e6c:	68fb      	ldr	r3, [r7, #12]
 8028e6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028e70:	b29b      	uxth	r3, r3
 8028e72:	3b01      	subs	r3, #1
 8028e74:	b29a      	uxth	r2, r3
 8028e76:	68fb      	ldr	r3, [r7, #12]
 8028e78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8028e7a:	e011      	b.n	8028ea0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8028e7c:	f7fd faf0 	bl	8026460 <HAL_GetTick>
 8028e80:	4602      	mov	r2, r0
 8028e82:	693b      	ldr	r3, [r7, #16]
 8028e84:	1ad3      	subs	r3, r2, r3
 8028e86:	683a      	ldr	r2, [r7, #0]
 8028e88:	429a      	cmp	r2, r3
 8028e8a:	d803      	bhi.n	8028e94 <HAL_SPI_Receive+0x1bc>
 8028e8c:	683b      	ldr	r3, [r7, #0]
 8028e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028e92:	d102      	bne.n	8028e9a <HAL_SPI_Receive+0x1c2>
 8028e94:	683b      	ldr	r3, [r7, #0]
 8028e96:	2b00      	cmp	r3, #0
 8028e98:	d102      	bne.n	8028ea0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8028e9a:	2303      	movs	r3, #3
 8028e9c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8028e9e:	e017      	b.n	8028ed0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8028ea0:	68fb      	ldr	r3, [r7, #12]
 8028ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8028ea4:	b29b      	uxth	r3, r3
 8028ea6:	2b00      	cmp	r3, #0
 8028ea8:	d1cd      	bne.n	8028e46 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8028eaa:	693a      	ldr	r2, [r7, #16]
 8028eac:	6839      	ldr	r1, [r7, #0]
 8028eae:	68f8      	ldr	r0, [r7, #12]
 8028eb0:	f000 fa27 	bl	8029302 <SPI_EndRxTransaction>
 8028eb4:	4603      	mov	r3, r0
 8028eb6:	2b00      	cmp	r3, #0
 8028eb8:	d002      	beq.n	8028ec0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8028eba:	68fb      	ldr	r3, [r7, #12]
 8028ebc:	2220      	movs	r2, #32
 8028ebe:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8028ec0:	68fb      	ldr	r3, [r7, #12]
 8028ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8028ec4:	2b00      	cmp	r3, #0
 8028ec6:	d002      	beq.n	8028ece <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8028ec8:	2301      	movs	r3, #1
 8028eca:	75fb      	strb	r3, [r7, #23]
 8028ecc:	e000      	b.n	8028ed0 <HAL_SPI_Receive+0x1f8>
  }

error :
 8028ece:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8028ed0:	68fb      	ldr	r3, [r7, #12]
 8028ed2:	2201      	movs	r2, #1
 8028ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8028ed8:	68fb      	ldr	r3, [r7, #12]
 8028eda:	2200      	movs	r2, #0
 8028edc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8028ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8028ee2:	4618      	mov	r0, r3
 8028ee4:	3718      	adds	r7, #24
 8028ee6:	46bd      	mov	sp, r7
 8028ee8:	bd80      	pop	{r7, pc}

08028eea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8028eea:	b580      	push	{r7, lr}
 8028eec:	b08c      	sub	sp, #48	; 0x30
 8028eee:	af00      	add	r7, sp, #0
 8028ef0:	60f8      	str	r0, [r7, #12]
 8028ef2:	60b9      	str	r1, [r7, #8]
 8028ef4:	607a      	str	r2, [r7, #4]
 8028ef6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8028ef8:	2301      	movs	r3, #1
 8028efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8028efc:	2300      	movs	r3, #0
 8028efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8028f02:	68fb      	ldr	r3, [r7, #12]
 8028f04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8028f08:	2b01      	cmp	r3, #1
 8028f0a:	d101      	bne.n	8028f10 <HAL_SPI_TransmitReceive+0x26>
 8028f0c:	2302      	movs	r3, #2
 8028f0e:	e18a      	b.n	8029226 <HAL_SPI_TransmitReceive+0x33c>
 8028f10:	68fb      	ldr	r3, [r7, #12]
 8028f12:	2201      	movs	r2, #1
 8028f14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8028f18:	f7fd faa2 	bl	8026460 <HAL_GetTick>
 8028f1c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8028f1e:	68fb      	ldr	r3, [r7, #12]
 8028f20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028f24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8028f28:	68fb      	ldr	r3, [r7, #12]
 8028f2a:	685b      	ldr	r3, [r3, #4]
 8028f2c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8028f2e:	887b      	ldrh	r3, [r7, #2]
 8028f30:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8028f32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8028f36:	2b01      	cmp	r3, #1
 8028f38:	d00f      	beq.n	8028f5a <HAL_SPI_TransmitReceive+0x70>
 8028f3a:	69fb      	ldr	r3, [r7, #28]
 8028f3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8028f40:	d107      	bne.n	8028f52 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8028f42:	68fb      	ldr	r3, [r7, #12]
 8028f44:	689b      	ldr	r3, [r3, #8]
 8028f46:	2b00      	cmp	r3, #0
 8028f48:	d103      	bne.n	8028f52 <HAL_SPI_TransmitReceive+0x68>
 8028f4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8028f4e:	2b04      	cmp	r3, #4
 8028f50:	d003      	beq.n	8028f5a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8028f52:	2302      	movs	r3, #2
 8028f54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8028f58:	e15b      	b.n	8029212 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8028f5a:	68bb      	ldr	r3, [r7, #8]
 8028f5c:	2b00      	cmp	r3, #0
 8028f5e:	d005      	beq.n	8028f6c <HAL_SPI_TransmitReceive+0x82>
 8028f60:	687b      	ldr	r3, [r7, #4]
 8028f62:	2b00      	cmp	r3, #0
 8028f64:	d002      	beq.n	8028f6c <HAL_SPI_TransmitReceive+0x82>
 8028f66:	887b      	ldrh	r3, [r7, #2]
 8028f68:	2b00      	cmp	r3, #0
 8028f6a:	d103      	bne.n	8028f74 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8028f6c:	2301      	movs	r3, #1
 8028f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8028f72:	e14e      	b.n	8029212 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8028f74:	68fb      	ldr	r3, [r7, #12]
 8028f76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028f7a:	b2db      	uxtb	r3, r3
 8028f7c:	2b04      	cmp	r3, #4
 8028f7e:	d003      	beq.n	8028f88 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8028f80:	68fb      	ldr	r3, [r7, #12]
 8028f82:	2205      	movs	r2, #5
 8028f84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8028f88:	68fb      	ldr	r3, [r7, #12]
 8028f8a:	2200      	movs	r2, #0
 8028f8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8028f8e:	68fb      	ldr	r3, [r7, #12]
 8028f90:	687a      	ldr	r2, [r7, #4]
 8028f92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8028f94:	68fb      	ldr	r3, [r7, #12]
 8028f96:	887a      	ldrh	r2, [r7, #2]
 8028f98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8028f9a:	68fb      	ldr	r3, [r7, #12]
 8028f9c:	887a      	ldrh	r2, [r7, #2]
 8028f9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8028fa0:	68fb      	ldr	r3, [r7, #12]
 8028fa2:	68ba      	ldr	r2, [r7, #8]
 8028fa4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8028fa6:	68fb      	ldr	r3, [r7, #12]
 8028fa8:	887a      	ldrh	r2, [r7, #2]
 8028faa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8028fac:	68fb      	ldr	r3, [r7, #12]
 8028fae:	887a      	ldrh	r2, [r7, #2]
 8028fb0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8028fb2:	68fb      	ldr	r3, [r7, #12]
 8028fb4:	2200      	movs	r2, #0
 8028fb6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8028fb8:	68fb      	ldr	r3, [r7, #12]
 8028fba:	2200      	movs	r2, #0
 8028fbc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8028fbe:	68fb      	ldr	r3, [r7, #12]
 8028fc0:	681b      	ldr	r3, [r3, #0]
 8028fc2:	681b      	ldr	r3, [r3, #0]
 8028fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8028fc8:	2b40      	cmp	r3, #64	; 0x40
 8028fca:	d007      	beq.n	8028fdc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8028fcc:	68fb      	ldr	r3, [r7, #12]
 8028fce:	681b      	ldr	r3, [r3, #0]
 8028fd0:	681a      	ldr	r2, [r3, #0]
 8028fd2:	68fb      	ldr	r3, [r7, #12]
 8028fd4:	681b      	ldr	r3, [r3, #0]
 8028fd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8028fda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8028fdc:	68fb      	ldr	r3, [r7, #12]
 8028fde:	68db      	ldr	r3, [r3, #12]
 8028fe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8028fe4:	d178      	bne.n	80290d8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8028fe6:	68fb      	ldr	r3, [r7, #12]
 8028fe8:	685b      	ldr	r3, [r3, #4]
 8028fea:	2b00      	cmp	r3, #0
 8028fec:	d002      	beq.n	8028ff4 <HAL_SPI_TransmitReceive+0x10a>
 8028fee:	8b7b      	ldrh	r3, [r7, #26]
 8028ff0:	2b01      	cmp	r3, #1
 8028ff2:	d166      	bne.n	80290c2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8028ff4:	68fb      	ldr	r3, [r7, #12]
 8028ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028ff8:	881a      	ldrh	r2, [r3, #0]
 8028ffa:	68fb      	ldr	r3, [r7, #12]
 8028ffc:	681b      	ldr	r3, [r3, #0]
 8028ffe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8029000:	68fb      	ldr	r3, [r7, #12]
 8029002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029004:	1c9a      	adds	r2, r3, #2
 8029006:	68fb      	ldr	r3, [r7, #12]
 8029008:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 802900a:	68fb      	ldr	r3, [r7, #12]
 802900c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802900e:	b29b      	uxth	r3, r3
 8029010:	3b01      	subs	r3, #1
 8029012:	b29a      	uxth	r2, r3
 8029014:	68fb      	ldr	r3, [r7, #12]
 8029016:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8029018:	e053      	b.n	80290c2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 802901a:	68fb      	ldr	r3, [r7, #12]
 802901c:	681b      	ldr	r3, [r3, #0]
 802901e:	689b      	ldr	r3, [r3, #8]
 8029020:	f003 0302 	and.w	r3, r3, #2
 8029024:	2b02      	cmp	r3, #2
 8029026:	d11b      	bne.n	8029060 <HAL_SPI_TransmitReceive+0x176>
 8029028:	68fb      	ldr	r3, [r7, #12]
 802902a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802902c:	b29b      	uxth	r3, r3
 802902e:	2b00      	cmp	r3, #0
 8029030:	d016      	beq.n	8029060 <HAL_SPI_TransmitReceive+0x176>
 8029032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029034:	2b01      	cmp	r3, #1
 8029036:	d113      	bne.n	8029060 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8029038:	68fb      	ldr	r3, [r7, #12]
 802903a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802903c:	881a      	ldrh	r2, [r3, #0]
 802903e:	68fb      	ldr	r3, [r7, #12]
 8029040:	681b      	ldr	r3, [r3, #0]
 8029042:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8029044:	68fb      	ldr	r3, [r7, #12]
 8029046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029048:	1c9a      	adds	r2, r3, #2
 802904a:	68fb      	ldr	r3, [r7, #12]
 802904c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 802904e:	68fb      	ldr	r3, [r7, #12]
 8029050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029052:	b29b      	uxth	r3, r3
 8029054:	3b01      	subs	r3, #1
 8029056:	b29a      	uxth	r2, r3
 8029058:	68fb      	ldr	r3, [r7, #12]
 802905a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 802905c:	2300      	movs	r3, #0
 802905e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8029060:	68fb      	ldr	r3, [r7, #12]
 8029062:	681b      	ldr	r3, [r3, #0]
 8029064:	689b      	ldr	r3, [r3, #8]
 8029066:	f003 0301 	and.w	r3, r3, #1
 802906a:	2b01      	cmp	r3, #1
 802906c:	d119      	bne.n	80290a2 <HAL_SPI_TransmitReceive+0x1b8>
 802906e:	68fb      	ldr	r3, [r7, #12]
 8029070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8029072:	b29b      	uxth	r3, r3
 8029074:	2b00      	cmp	r3, #0
 8029076:	d014      	beq.n	80290a2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8029078:	68fb      	ldr	r3, [r7, #12]
 802907a:	681b      	ldr	r3, [r3, #0]
 802907c:	68da      	ldr	r2, [r3, #12]
 802907e:	68fb      	ldr	r3, [r7, #12]
 8029080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029082:	b292      	uxth	r2, r2
 8029084:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8029086:	68fb      	ldr	r3, [r7, #12]
 8029088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802908a:	1c9a      	adds	r2, r3, #2
 802908c:	68fb      	ldr	r3, [r7, #12]
 802908e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8029090:	68fb      	ldr	r3, [r7, #12]
 8029092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8029094:	b29b      	uxth	r3, r3
 8029096:	3b01      	subs	r3, #1
 8029098:	b29a      	uxth	r2, r3
 802909a:	68fb      	ldr	r3, [r7, #12]
 802909c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 802909e:	2301      	movs	r3, #1
 80290a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80290a2:	f7fd f9dd 	bl	8026460 <HAL_GetTick>
 80290a6:	4602      	mov	r2, r0
 80290a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80290aa:	1ad3      	subs	r3, r2, r3
 80290ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80290ae:	429a      	cmp	r2, r3
 80290b0:	d807      	bhi.n	80290c2 <HAL_SPI_TransmitReceive+0x1d8>
 80290b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80290b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80290b8:	d003      	beq.n	80290c2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80290ba:	2303      	movs	r3, #3
 80290bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80290c0:	e0a7      	b.n	8029212 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80290c2:	68fb      	ldr	r3, [r7, #12]
 80290c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80290c6:	b29b      	uxth	r3, r3
 80290c8:	2b00      	cmp	r3, #0
 80290ca:	d1a6      	bne.n	802901a <HAL_SPI_TransmitReceive+0x130>
 80290cc:	68fb      	ldr	r3, [r7, #12]
 80290ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80290d0:	b29b      	uxth	r3, r3
 80290d2:	2b00      	cmp	r3, #0
 80290d4:	d1a1      	bne.n	802901a <HAL_SPI_TransmitReceive+0x130>
 80290d6:	e07c      	b.n	80291d2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80290d8:	68fb      	ldr	r3, [r7, #12]
 80290da:	685b      	ldr	r3, [r3, #4]
 80290dc:	2b00      	cmp	r3, #0
 80290de:	d002      	beq.n	80290e6 <HAL_SPI_TransmitReceive+0x1fc>
 80290e0:	8b7b      	ldrh	r3, [r7, #26]
 80290e2:	2b01      	cmp	r3, #1
 80290e4:	d16b      	bne.n	80291be <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80290e6:	68fb      	ldr	r3, [r7, #12]
 80290e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80290ea:	68fb      	ldr	r3, [r7, #12]
 80290ec:	681b      	ldr	r3, [r3, #0]
 80290ee:	330c      	adds	r3, #12
 80290f0:	7812      	ldrb	r2, [r2, #0]
 80290f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80290f4:	68fb      	ldr	r3, [r7, #12]
 80290f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80290f8:	1c5a      	adds	r2, r3, #1
 80290fa:	68fb      	ldr	r3, [r7, #12]
 80290fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80290fe:	68fb      	ldr	r3, [r7, #12]
 8029100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029102:	b29b      	uxth	r3, r3
 8029104:	3b01      	subs	r3, #1
 8029106:	b29a      	uxth	r2, r3
 8029108:	68fb      	ldr	r3, [r7, #12]
 802910a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 802910c:	e057      	b.n	80291be <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 802910e:	68fb      	ldr	r3, [r7, #12]
 8029110:	681b      	ldr	r3, [r3, #0]
 8029112:	689b      	ldr	r3, [r3, #8]
 8029114:	f003 0302 	and.w	r3, r3, #2
 8029118:	2b02      	cmp	r3, #2
 802911a:	d11c      	bne.n	8029156 <HAL_SPI_TransmitReceive+0x26c>
 802911c:	68fb      	ldr	r3, [r7, #12]
 802911e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029120:	b29b      	uxth	r3, r3
 8029122:	2b00      	cmp	r3, #0
 8029124:	d017      	beq.n	8029156 <HAL_SPI_TransmitReceive+0x26c>
 8029126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029128:	2b01      	cmp	r3, #1
 802912a:	d114      	bne.n	8029156 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 802912c:	68fb      	ldr	r3, [r7, #12]
 802912e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8029130:	68fb      	ldr	r3, [r7, #12]
 8029132:	681b      	ldr	r3, [r3, #0]
 8029134:	330c      	adds	r3, #12
 8029136:	7812      	ldrb	r2, [r2, #0]
 8029138:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 802913a:	68fb      	ldr	r3, [r7, #12]
 802913c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802913e:	1c5a      	adds	r2, r3, #1
 8029140:	68fb      	ldr	r3, [r7, #12]
 8029142:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8029144:	68fb      	ldr	r3, [r7, #12]
 8029146:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029148:	b29b      	uxth	r3, r3
 802914a:	3b01      	subs	r3, #1
 802914c:	b29a      	uxth	r2, r3
 802914e:	68fb      	ldr	r3, [r7, #12]
 8029150:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8029152:	2300      	movs	r3, #0
 8029154:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8029156:	68fb      	ldr	r3, [r7, #12]
 8029158:	681b      	ldr	r3, [r3, #0]
 802915a:	689b      	ldr	r3, [r3, #8]
 802915c:	f003 0301 	and.w	r3, r3, #1
 8029160:	2b01      	cmp	r3, #1
 8029162:	d119      	bne.n	8029198 <HAL_SPI_TransmitReceive+0x2ae>
 8029164:	68fb      	ldr	r3, [r7, #12]
 8029166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8029168:	b29b      	uxth	r3, r3
 802916a:	2b00      	cmp	r3, #0
 802916c:	d014      	beq.n	8029198 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 802916e:	68fb      	ldr	r3, [r7, #12]
 8029170:	681b      	ldr	r3, [r3, #0]
 8029172:	68da      	ldr	r2, [r3, #12]
 8029174:	68fb      	ldr	r3, [r7, #12]
 8029176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029178:	b2d2      	uxtb	r2, r2
 802917a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 802917c:	68fb      	ldr	r3, [r7, #12]
 802917e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029180:	1c5a      	adds	r2, r3, #1
 8029182:	68fb      	ldr	r3, [r7, #12]
 8029184:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8029186:	68fb      	ldr	r3, [r7, #12]
 8029188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802918a:	b29b      	uxth	r3, r3
 802918c:	3b01      	subs	r3, #1
 802918e:	b29a      	uxth	r2, r3
 8029190:	68fb      	ldr	r3, [r7, #12]
 8029192:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8029194:	2301      	movs	r3, #1
 8029196:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8029198:	f7fd f962 	bl	8026460 <HAL_GetTick>
 802919c:	4602      	mov	r2, r0
 802919e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80291a0:	1ad3      	subs	r3, r2, r3
 80291a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80291a4:	429a      	cmp	r2, r3
 80291a6:	d803      	bhi.n	80291b0 <HAL_SPI_TransmitReceive+0x2c6>
 80291a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80291aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80291ae:	d102      	bne.n	80291b6 <HAL_SPI_TransmitReceive+0x2cc>
 80291b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80291b2:	2b00      	cmp	r3, #0
 80291b4:	d103      	bne.n	80291be <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80291b6:	2303      	movs	r3, #3
 80291b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80291bc:	e029      	b.n	8029212 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80291be:	68fb      	ldr	r3, [r7, #12]
 80291c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80291c2:	b29b      	uxth	r3, r3
 80291c4:	2b00      	cmp	r3, #0
 80291c6:	d1a2      	bne.n	802910e <HAL_SPI_TransmitReceive+0x224>
 80291c8:	68fb      	ldr	r3, [r7, #12]
 80291ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80291cc:	b29b      	uxth	r3, r3
 80291ce:	2b00      	cmp	r3, #0
 80291d0:	d19d      	bne.n	802910e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80291d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80291d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80291d6:	68f8      	ldr	r0, [r7, #12]
 80291d8:	f000 f8f8 	bl	80293cc <SPI_EndRxTxTransaction>
 80291dc:	4603      	mov	r3, r0
 80291de:	2b00      	cmp	r3, #0
 80291e0:	d006      	beq.n	80291f0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80291e2:	2301      	movs	r3, #1
 80291e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80291e8:	68fb      	ldr	r3, [r7, #12]
 80291ea:	2220      	movs	r2, #32
 80291ec:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80291ee:	e010      	b.n	8029212 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80291f0:	68fb      	ldr	r3, [r7, #12]
 80291f2:	689b      	ldr	r3, [r3, #8]
 80291f4:	2b00      	cmp	r3, #0
 80291f6:	d10b      	bne.n	8029210 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80291f8:	2300      	movs	r3, #0
 80291fa:	617b      	str	r3, [r7, #20]
 80291fc:	68fb      	ldr	r3, [r7, #12]
 80291fe:	681b      	ldr	r3, [r3, #0]
 8029200:	68db      	ldr	r3, [r3, #12]
 8029202:	617b      	str	r3, [r7, #20]
 8029204:	68fb      	ldr	r3, [r7, #12]
 8029206:	681b      	ldr	r3, [r3, #0]
 8029208:	689b      	ldr	r3, [r3, #8]
 802920a:	617b      	str	r3, [r7, #20]
 802920c:	697b      	ldr	r3, [r7, #20]
 802920e:	e000      	b.n	8029212 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8029210:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8029212:	68fb      	ldr	r3, [r7, #12]
 8029214:	2201      	movs	r2, #1
 8029216:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 802921a:	68fb      	ldr	r3, [r7, #12]
 802921c:	2200      	movs	r2, #0
 802921e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8029222:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8029226:	4618      	mov	r0, r3
 8029228:	3730      	adds	r7, #48	; 0x30
 802922a:	46bd      	mov	sp, r7
 802922c:	bd80      	pop	{r7, pc}

0802922e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 802922e:	b580      	push	{r7, lr}
 8029230:	b084      	sub	sp, #16
 8029232:	af00      	add	r7, sp, #0
 8029234:	60f8      	str	r0, [r7, #12]
 8029236:	60b9      	str	r1, [r7, #8]
 8029238:	603b      	str	r3, [r7, #0]
 802923a:	4613      	mov	r3, r2
 802923c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 802923e:	e04c      	b.n	80292da <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8029240:	683b      	ldr	r3, [r7, #0]
 8029242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029246:	d048      	beq.n	80292da <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8029248:	f7fd f90a 	bl	8026460 <HAL_GetTick>
 802924c:	4602      	mov	r2, r0
 802924e:	69bb      	ldr	r3, [r7, #24]
 8029250:	1ad3      	subs	r3, r2, r3
 8029252:	683a      	ldr	r2, [r7, #0]
 8029254:	429a      	cmp	r2, r3
 8029256:	d902      	bls.n	802925e <SPI_WaitFlagStateUntilTimeout+0x30>
 8029258:	683b      	ldr	r3, [r7, #0]
 802925a:	2b00      	cmp	r3, #0
 802925c:	d13d      	bne.n	80292da <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 802925e:	68fb      	ldr	r3, [r7, #12]
 8029260:	681b      	ldr	r3, [r3, #0]
 8029262:	685a      	ldr	r2, [r3, #4]
 8029264:	68fb      	ldr	r3, [r7, #12]
 8029266:	681b      	ldr	r3, [r3, #0]
 8029268:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 802926c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802926e:	68fb      	ldr	r3, [r7, #12]
 8029270:	685b      	ldr	r3, [r3, #4]
 8029272:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8029276:	d111      	bne.n	802929c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8029278:	68fb      	ldr	r3, [r7, #12]
 802927a:	689b      	ldr	r3, [r3, #8]
 802927c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8029280:	d004      	beq.n	802928c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8029282:	68fb      	ldr	r3, [r7, #12]
 8029284:	689b      	ldr	r3, [r3, #8]
 8029286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802928a:	d107      	bne.n	802929c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 802928c:	68fb      	ldr	r3, [r7, #12]
 802928e:	681b      	ldr	r3, [r3, #0]
 8029290:	681a      	ldr	r2, [r3, #0]
 8029292:	68fb      	ldr	r3, [r7, #12]
 8029294:	681b      	ldr	r3, [r3, #0]
 8029296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802929a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 802929c:	68fb      	ldr	r3, [r7, #12]
 802929e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80292a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80292a4:	d10f      	bne.n	80292c6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80292a6:	68fb      	ldr	r3, [r7, #12]
 80292a8:	681b      	ldr	r3, [r3, #0]
 80292aa:	681a      	ldr	r2, [r3, #0]
 80292ac:	68fb      	ldr	r3, [r7, #12]
 80292ae:	681b      	ldr	r3, [r3, #0]
 80292b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80292b4:	601a      	str	r2, [r3, #0]
 80292b6:	68fb      	ldr	r3, [r7, #12]
 80292b8:	681b      	ldr	r3, [r3, #0]
 80292ba:	681a      	ldr	r2, [r3, #0]
 80292bc:	68fb      	ldr	r3, [r7, #12]
 80292be:	681b      	ldr	r3, [r3, #0]
 80292c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80292c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80292c6:	68fb      	ldr	r3, [r7, #12]
 80292c8:	2201      	movs	r2, #1
 80292ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80292ce:	68fb      	ldr	r3, [r7, #12]
 80292d0:	2200      	movs	r2, #0
 80292d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80292d6:	2303      	movs	r3, #3
 80292d8:	e00f      	b.n	80292fa <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80292da:	68fb      	ldr	r3, [r7, #12]
 80292dc:	681b      	ldr	r3, [r3, #0]
 80292de:	689a      	ldr	r2, [r3, #8]
 80292e0:	68bb      	ldr	r3, [r7, #8]
 80292e2:	4013      	ands	r3, r2
 80292e4:	68ba      	ldr	r2, [r7, #8]
 80292e6:	429a      	cmp	r2, r3
 80292e8:	bf0c      	ite	eq
 80292ea:	2301      	moveq	r3, #1
 80292ec:	2300      	movne	r3, #0
 80292ee:	b2db      	uxtb	r3, r3
 80292f0:	461a      	mov	r2, r3
 80292f2:	79fb      	ldrb	r3, [r7, #7]
 80292f4:	429a      	cmp	r2, r3
 80292f6:	d1a3      	bne.n	8029240 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80292f8:	2300      	movs	r3, #0
}
 80292fa:	4618      	mov	r0, r3
 80292fc:	3710      	adds	r7, #16
 80292fe:	46bd      	mov	sp, r7
 8029300:	bd80      	pop	{r7, pc}

08029302 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8029302:	b580      	push	{r7, lr}
 8029304:	b086      	sub	sp, #24
 8029306:	af02      	add	r7, sp, #8
 8029308:	60f8      	str	r0, [r7, #12]
 802930a:	60b9      	str	r1, [r7, #8]
 802930c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802930e:	68fb      	ldr	r3, [r7, #12]
 8029310:	685b      	ldr	r3, [r3, #4]
 8029312:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8029316:	d111      	bne.n	802933c <SPI_EndRxTransaction+0x3a>
 8029318:	68fb      	ldr	r3, [r7, #12]
 802931a:	689b      	ldr	r3, [r3, #8]
 802931c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8029320:	d004      	beq.n	802932c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8029322:	68fb      	ldr	r3, [r7, #12]
 8029324:	689b      	ldr	r3, [r3, #8]
 8029326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802932a:	d107      	bne.n	802933c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 802932c:	68fb      	ldr	r3, [r7, #12]
 802932e:	681b      	ldr	r3, [r3, #0]
 8029330:	681a      	ldr	r2, [r3, #0]
 8029332:	68fb      	ldr	r3, [r7, #12]
 8029334:	681b      	ldr	r3, [r3, #0]
 8029336:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802933a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 802933c:	68fb      	ldr	r3, [r7, #12]
 802933e:	685b      	ldr	r3, [r3, #4]
 8029340:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8029344:	d12a      	bne.n	802939c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8029346:	68fb      	ldr	r3, [r7, #12]
 8029348:	689b      	ldr	r3, [r3, #8]
 802934a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802934e:	d012      	beq.n	8029376 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8029350:	687b      	ldr	r3, [r7, #4]
 8029352:	9300      	str	r3, [sp, #0]
 8029354:	68bb      	ldr	r3, [r7, #8]
 8029356:	2200      	movs	r2, #0
 8029358:	2180      	movs	r1, #128	; 0x80
 802935a:	68f8      	ldr	r0, [r7, #12]
 802935c:	f7ff ff67 	bl	802922e <SPI_WaitFlagStateUntilTimeout>
 8029360:	4603      	mov	r3, r0
 8029362:	2b00      	cmp	r3, #0
 8029364:	d02d      	beq.n	80293c2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8029366:	68fb      	ldr	r3, [r7, #12]
 8029368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802936a:	f043 0220 	orr.w	r2, r3, #32
 802936e:	68fb      	ldr	r3, [r7, #12]
 8029370:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8029372:	2303      	movs	r3, #3
 8029374:	e026      	b.n	80293c4 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8029376:	687b      	ldr	r3, [r7, #4]
 8029378:	9300      	str	r3, [sp, #0]
 802937a:	68bb      	ldr	r3, [r7, #8]
 802937c:	2200      	movs	r2, #0
 802937e:	2101      	movs	r1, #1
 8029380:	68f8      	ldr	r0, [r7, #12]
 8029382:	f7ff ff54 	bl	802922e <SPI_WaitFlagStateUntilTimeout>
 8029386:	4603      	mov	r3, r0
 8029388:	2b00      	cmp	r3, #0
 802938a:	d01a      	beq.n	80293c2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802938c:	68fb      	ldr	r3, [r7, #12]
 802938e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029390:	f043 0220 	orr.w	r2, r3, #32
 8029394:	68fb      	ldr	r3, [r7, #12]
 8029396:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8029398:	2303      	movs	r3, #3
 802939a:	e013      	b.n	80293c4 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 802939c:	687b      	ldr	r3, [r7, #4]
 802939e:	9300      	str	r3, [sp, #0]
 80293a0:	68bb      	ldr	r3, [r7, #8]
 80293a2:	2200      	movs	r2, #0
 80293a4:	2101      	movs	r1, #1
 80293a6:	68f8      	ldr	r0, [r7, #12]
 80293a8:	f7ff ff41 	bl	802922e <SPI_WaitFlagStateUntilTimeout>
 80293ac:	4603      	mov	r3, r0
 80293ae:	2b00      	cmp	r3, #0
 80293b0:	d007      	beq.n	80293c2 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80293b2:	68fb      	ldr	r3, [r7, #12]
 80293b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80293b6:	f043 0220 	orr.w	r2, r3, #32
 80293ba:	68fb      	ldr	r3, [r7, #12]
 80293bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80293be:	2303      	movs	r3, #3
 80293c0:	e000      	b.n	80293c4 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80293c2:	2300      	movs	r3, #0
}
 80293c4:	4618      	mov	r0, r3
 80293c6:	3710      	adds	r7, #16
 80293c8:	46bd      	mov	sp, r7
 80293ca:	bd80      	pop	{r7, pc}

080293cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80293cc:	b580      	push	{r7, lr}
 80293ce:	b088      	sub	sp, #32
 80293d0:	af02      	add	r7, sp, #8
 80293d2:	60f8      	str	r0, [r7, #12]
 80293d4:	60b9      	str	r1, [r7, #8]
 80293d6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80293d8:	4b1b      	ldr	r3, [pc, #108]	; (8029448 <SPI_EndRxTxTransaction+0x7c>)
 80293da:	681b      	ldr	r3, [r3, #0]
 80293dc:	4a1b      	ldr	r2, [pc, #108]	; (802944c <SPI_EndRxTxTransaction+0x80>)
 80293de:	fba2 2303 	umull	r2, r3, r2, r3
 80293e2:	0d5b      	lsrs	r3, r3, #21
 80293e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80293e8:	fb02 f303 	mul.w	r3, r2, r3
 80293ec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80293ee:	68fb      	ldr	r3, [r7, #12]
 80293f0:	685b      	ldr	r3, [r3, #4]
 80293f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80293f6:	d112      	bne.n	802941e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80293f8:	687b      	ldr	r3, [r7, #4]
 80293fa:	9300      	str	r3, [sp, #0]
 80293fc:	68bb      	ldr	r3, [r7, #8]
 80293fe:	2200      	movs	r2, #0
 8029400:	2180      	movs	r1, #128	; 0x80
 8029402:	68f8      	ldr	r0, [r7, #12]
 8029404:	f7ff ff13 	bl	802922e <SPI_WaitFlagStateUntilTimeout>
 8029408:	4603      	mov	r3, r0
 802940a:	2b00      	cmp	r3, #0
 802940c:	d016      	beq.n	802943c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802940e:	68fb      	ldr	r3, [r7, #12]
 8029410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029412:	f043 0220 	orr.w	r2, r3, #32
 8029416:	68fb      	ldr	r3, [r7, #12]
 8029418:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 802941a:	2303      	movs	r3, #3
 802941c:	e00f      	b.n	802943e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 802941e:	697b      	ldr	r3, [r7, #20]
 8029420:	2b00      	cmp	r3, #0
 8029422:	d00a      	beq.n	802943a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8029424:	697b      	ldr	r3, [r7, #20]
 8029426:	3b01      	subs	r3, #1
 8029428:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 802942a:	68fb      	ldr	r3, [r7, #12]
 802942c:	681b      	ldr	r3, [r3, #0]
 802942e:	689b      	ldr	r3, [r3, #8]
 8029430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029434:	2b80      	cmp	r3, #128	; 0x80
 8029436:	d0f2      	beq.n	802941e <SPI_EndRxTxTransaction+0x52>
 8029438:	e000      	b.n	802943c <SPI_EndRxTxTransaction+0x70>
        break;
 802943a:	bf00      	nop
  }

  return HAL_OK;
 802943c:	2300      	movs	r3, #0
}
 802943e:	4618      	mov	r0, r3
 8029440:	3718      	adds	r7, #24
 8029442:	46bd      	mov	sp, r7
 8029444:	bd80      	pop	{r7, pc}
 8029446:	bf00      	nop
 8029448:	20000014 	.word	0x20000014
 802944c:	165e9f81 	.word	0x165e9f81

08029450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8029450:	b580      	push	{r7, lr}
 8029452:	b082      	sub	sp, #8
 8029454:	af00      	add	r7, sp, #0
 8029456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8029458:	687b      	ldr	r3, [r7, #4]
 802945a:	2b00      	cmp	r3, #0
 802945c:	d101      	bne.n	8029462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 802945e:	2301      	movs	r3, #1
 8029460:	e01d      	b.n	802949e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8029462:	687b      	ldr	r3, [r7, #4]
 8029464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8029468:	b2db      	uxtb	r3, r3
 802946a:	2b00      	cmp	r3, #0
 802946c:	d106      	bne.n	802947c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802946e:	687b      	ldr	r3, [r7, #4]
 8029470:	2200      	movs	r2, #0
 8029472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8029476:	6878      	ldr	r0, [r7, #4]
 8029478:	f7fc faf0 	bl	8025a5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802947c:	687b      	ldr	r3, [r7, #4]
 802947e:	2202      	movs	r2, #2
 8029480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8029484:	687b      	ldr	r3, [r7, #4]
 8029486:	681a      	ldr	r2, [r3, #0]
 8029488:	687b      	ldr	r3, [r7, #4]
 802948a:	3304      	adds	r3, #4
 802948c:	4619      	mov	r1, r3
 802948e:	4610      	mov	r0, r2
 8029490:	f000 fc0e 	bl	8029cb0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8029494:	687b      	ldr	r3, [r7, #4]
 8029496:	2201      	movs	r2, #1
 8029498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802949c:	2300      	movs	r3, #0
}
 802949e:	4618      	mov	r0, r3
 80294a0:	3708      	adds	r7, #8
 80294a2:	46bd      	mov	sp, r7
 80294a4:	bd80      	pop	{r7, pc}

080294a6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80294a6:	b480      	push	{r7}
 80294a8:	b085      	sub	sp, #20
 80294aa:	af00      	add	r7, sp, #0
 80294ac:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80294ae:	687b      	ldr	r3, [r7, #4]
 80294b0:	681b      	ldr	r3, [r3, #0]
 80294b2:	68da      	ldr	r2, [r3, #12]
 80294b4:	687b      	ldr	r3, [r7, #4]
 80294b6:	681b      	ldr	r3, [r3, #0]
 80294b8:	f042 0201 	orr.w	r2, r2, #1
 80294bc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80294be:	687b      	ldr	r3, [r7, #4]
 80294c0:	681b      	ldr	r3, [r3, #0]
 80294c2:	689b      	ldr	r3, [r3, #8]
 80294c4:	f003 0307 	and.w	r3, r3, #7
 80294c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80294ca:	68fb      	ldr	r3, [r7, #12]
 80294cc:	2b06      	cmp	r3, #6
 80294ce:	d007      	beq.n	80294e0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80294d0:	687b      	ldr	r3, [r7, #4]
 80294d2:	681b      	ldr	r3, [r3, #0]
 80294d4:	681a      	ldr	r2, [r3, #0]
 80294d6:	687b      	ldr	r3, [r7, #4]
 80294d8:	681b      	ldr	r3, [r3, #0]
 80294da:	f042 0201 	orr.w	r2, r2, #1
 80294de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80294e0:	2300      	movs	r3, #0
}
 80294e2:	4618      	mov	r0, r3
 80294e4:	3714      	adds	r7, #20
 80294e6:	46bd      	mov	sp, r7
 80294e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80294ec:	4770      	bx	lr

080294ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80294ee:	b580      	push	{r7, lr}
 80294f0:	b082      	sub	sp, #8
 80294f2:	af00      	add	r7, sp, #0
 80294f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80294f6:	687b      	ldr	r3, [r7, #4]
 80294f8:	2b00      	cmp	r3, #0
 80294fa:	d101      	bne.n	8029500 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80294fc:	2301      	movs	r3, #1
 80294fe:	e01d      	b.n	802953c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8029500:	687b      	ldr	r3, [r7, #4]
 8029502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8029506:	b2db      	uxtb	r3, r3
 8029508:	2b00      	cmp	r3, #0
 802950a:	d106      	bne.n	802951a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802950c:	687b      	ldr	r3, [r7, #4]
 802950e:	2200      	movs	r2, #0
 8029510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8029514:	6878      	ldr	r0, [r7, #4]
 8029516:	f7fc fa53 	bl	80259c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802951a:	687b      	ldr	r3, [r7, #4]
 802951c:	2202      	movs	r2, #2
 802951e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8029522:	687b      	ldr	r3, [r7, #4]
 8029524:	681a      	ldr	r2, [r3, #0]
 8029526:	687b      	ldr	r3, [r7, #4]
 8029528:	3304      	adds	r3, #4
 802952a:	4619      	mov	r1, r3
 802952c:	4610      	mov	r0, r2
 802952e:	f000 fbbf 	bl	8029cb0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8029532:	687b      	ldr	r3, [r7, #4]
 8029534:	2201      	movs	r2, #1
 8029536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802953a:	2300      	movs	r3, #0
}
 802953c:	4618      	mov	r0, r3
 802953e:	3708      	adds	r7, #8
 8029540:	46bd      	mov	sp, r7
 8029542:	bd80      	pop	{r7, pc}

08029544 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8029544:	b580      	push	{r7, lr}
 8029546:	b084      	sub	sp, #16
 8029548:	af00      	add	r7, sp, #0
 802954a:	6078      	str	r0, [r7, #4]
 802954c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 802954e:	687b      	ldr	r3, [r7, #4]
 8029550:	681b      	ldr	r3, [r3, #0]
 8029552:	2201      	movs	r2, #1
 8029554:	6839      	ldr	r1, [r7, #0]
 8029556:	4618      	mov	r0, r3
 8029558:	f000 fe94 	bl	802a284 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 802955c:	687b      	ldr	r3, [r7, #4]
 802955e:	681b      	ldr	r3, [r3, #0]
 8029560:	4a15      	ldr	r2, [pc, #84]	; (80295b8 <HAL_TIM_PWM_Start+0x74>)
 8029562:	4293      	cmp	r3, r2
 8029564:	d004      	beq.n	8029570 <HAL_TIM_PWM_Start+0x2c>
 8029566:	687b      	ldr	r3, [r7, #4]
 8029568:	681b      	ldr	r3, [r3, #0]
 802956a:	4a14      	ldr	r2, [pc, #80]	; (80295bc <HAL_TIM_PWM_Start+0x78>)
 802956c:	4293      	cmp	r3, r2
 802956e:	d101      	bne.n	8029574 <HAL_TIM_PWM_Start+0x30>
 8029570:	2301      	movs	r3, #1
 8029572:	e000      	b.n	8029576 <HAL_TIM_PWM_Start+0x32>
 8029574:	2300      	movs	r3, #0
 8029576:	2b00      	cmp	r3, #0
 8029578:	d007      	beq.n	802958a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 802957a:	687b      	ldr	r3, [r7, #4]
 802957c:	681b      	ldr	r3, [r3, #0]
 802957e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8029580:	687b      	ldr	r3, [r7, #4]
 8029582:	681b      	ldr	r3, [r3, #0]
 8029584:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8029588:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802958a:	687b      	ldr	r3, [r7, #4]
 802958c:	681b      	ldr	r3, [r3, #0]
 802958e:	689b      	ldr	r3, [r3, #8]
 8029590:	f003 0307 	and.w	r3, r3, #7
 8029594:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8029596:	68fb      	ldr	r3, [r7, #12]
 8029598:	2b06      	cmp	r3, #6
 802959a:	d007      	beq.n	80295ac <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 802959c:	687b      	ldr	r3, [r7, #4]
 802959e:	681b      	ldr	r3, [r3, #0]
 80295a0:	681a      	ldr	r2, [r3, #0]
 80295a2:	687b      	ldr	r3, [r7, #4]
 80295a4:	681b      	ldr	r3, [r3, #0]
 80295a6:	f042 0201 	orr.w	r2, r2, #1
 80295aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80295ac:	2300      	movs	r3, #0
}
 80295ae:	4618      	mov	r0, r3
 80295b0:	3710      	adds	r7, #16
 80295b2:	46bd      	mov	sp, r7
 80295b4:	bd80      	pop	{r7, pc}
 80295b6:	bf00      	nop
 80295b8:	40010000 	.word	0x40010000
 80295bc:	40010400 	.word	0x40010400

080295c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80295c0:	b580      	push	{r7, lr}
 80295c2:	b086      	sub	sp, #24
 80295c4:	af00      	add	r7, sp, #0
 80295c6:	6078      	str	r0, [r7, #4]
 80295c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80295ca:	687b      	ldr	r3, [r7, #4]
 80295cc:	2b00      	cmp	r3, #0
 80295ce:	d101      	bne.n	80295d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80295d0:	2301      	movs	r3, #1
 80295d2:	e083      	b.n	80296dc <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80295d4:	687b      	ldr	r3, [r7, #4]
 80295d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80295da:	b2db      	uxtb	r3, r3
 80295dc:	2b00      	cmp	r3, #0
 80295de:	d106      	bne.n	80295ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80295e0:	687b      	ldr	r3, [r7, #4]
 80295e2:	2200      	movs	r2, #0
 80295e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80295e8:	6878      	ldr	r0, [r7, #4]
 80295ea:	f7fc facd 	bl	8025b88 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80295ee:	687b      	ldr	r3, [r7, #4]
 80295f0:	2202      	movs	r2, #2
 80295f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80295f6:	687b      	ldr	r3, [r7, #4]
 80295f8:	681b      	ldr	r3, [r3, #0]
 80295fa:	689b      	ldr	r3, [r3, #8]
 80295fc:	687a      	ldr	r2, [r7, #4]
 80295fe:	6812      	ldr	r2, [r2, #0]
 8029600:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8029604:	f023 0307 	bic.w	r3, r3, #7
 8029608:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802960a:	687b      	ldr	r3, [r7, #4]
 802960c:	681a      	ldr	r2, [r3, #0]
 802960e:	687b      	ldr	r3, [r7, #4]
 8029610:	3304      	adds	r3, #4
 8029612:	4619      	mov	r1, r3
 8029614:	4610      	mov	r0, r2
 8029616:	f000 fb4b 	bl	8029cb0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802961a:	687b      	ldr	r3, [r7, #4]
 802961c:	681b      	ldr	r3, [r3, #0]
 802961e:	689b      	ldr	r3, [r3, #8]
 8029620:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8029622:	687b      	ldr	r3, [r7, #4]
 8029624:	681b      	ldr	r3, [r3, #0]
 8029626:	699b      	ldr	r3, [r3, #24]
 8029628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 802962a:	687b      	ldr	r3, [r7, #4]
 802962c:	681b      	ldr	r3, [r3, #0]
 802962e:	6a1b      	ldr	r3, [r3, #32]
 8029630:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8029632:	683b      	ldr	r3, [r7, #0]
 8029634:	681b      	ldr	r3, [r3, #0]
 8029636:	697a      	ldr	r2, [r7, #20]
 8029638:	4313      	orrs	r3, r2
 802963a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 802963c:	693b      	ldr	r3, [r7, #16]
 802963e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029642:	f023 0303 	bic.w	r3, r3, #3
 8029646:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8029648:	683b      	ldr	r3, [r7, #0]
 802964a:	689a      	ldr	r2, [r3, #8]
 802964c:	683b      	ldr	r3, [r7, #0]
 802964e:	699b      	ldr	r3, [r3, #24]
 8029650:	021b      	lsls	r3, r3, #8
 8029652:	4313      	orrs	r3, r2
 8029654:	693a      	ldr	r2, [r7, #16]
 8029656:	4313      	orrs	r3, r2
 8029658:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 802965a:	693b      	ldr	r3, [r7, #16]
 802965c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8029660:	f023 030c 	bic.w	r3, r3, #12
 8029664:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8029666:	693b      	ldr	r3, [r7, #16]
 8029668:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802966c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8029670:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8029672:	683b      	ldr	r3, [r7, #0]
 8029674:	68da      	ldr	r2, [r3, #12]
 8029676:	683b      	ldr	r3, [r7, #0]
 8029678:	69db      	ldr	r3, [r3, #28]
 802967a:	021b      	lsls	r3, r3, #8
 802967c:	4313      	orrs	r3, r2
 802967e:	693a      	ldr	r2, [r7, #16]
 8029680:	4313      	orrs	r3, r2
 8029682:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8029684:	683b      	ldr	r3, [r7, #0]
 8029686:	691b      	ldr	r3, [r3, #16]
 8029688:	011a      	lsls	r2, r3, #4
 802968a:	683b      	ldr	r3, [r7, #0]
 802968c:	6a1b      	ldr	r3, [r3, #32]
 802968e:	031b      	lsls	r3, r3, #12
 8029690:	4313      	orrs	r3, r2
 8029692:	693a      	ldr	r2, [r7, #16]
 8029694:	4313      	orrs	r3, r2
 8029696:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8029698:	68fb      	ldr	r3, [r7, #12]
 802969a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 802969e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80296a0:	68fb      	ldr	r3, [r7, #12]
 80296a2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80296a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80296a8:	683b      	ldr	r3, [r7, #0]
 80296aa:	685a      	ldr	r2, [r3, #4]
 80296ac:	683b      	ldr	r3, [r7, #0]
 80296ae:	695b      	ldr	r3, [r3, #20]
 80296b0:	011b      	lsls	r3, r3, #4
 80296b2:	4313      	orrs	r3, r2
 80296b4:	68fa      	ldr	r2, [r7, #12]
 80296b6:	4313      	orrs	r3, r2
 80296b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80296ba:	687b      	ldr	r3, [r7, #4]
 80296bc:	681b      	ldr	r3, [r3, #0]
 80296be:	697a      	ldr	r2, [r7, #20]
 80296c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80296c2:	687b      	ldr	r3, [r7, #4]
 80296c4:	681b      	ldr	r3, [r3, #0]
 80296c6:	693a      	ldr	r2, [r7, #16]
 80296c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80296ca:	687b      	ldr	r3, [r7, #4]
 80296cc:	681b      	ldr	r3, [r3, #0]
 80296ce:	68fa      	ldr	r2, [r7, #12]
 80296d0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80296d2:	687b      	ldr	r3, [r7, #4]
 80296d4:	2201      	movs	r2, #1
 80296d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80296da:	2300      	movs	r3, #0
}
 80296dc:	4618      	mov	r0, r3
 80296de:	3718      	adds	r7, #24
 80296e0:	46bd      	mov	sp, r7
 80296e2:	bd80      	pop	{r7, pc}

080296e4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80296e4:	b580      	push	{r7, lr}
 80296e6:	b082      	sub	sp, #8
 80296e8:	af00      	add	r7, sp, #0
 80296ea:	6078      	str	r0, [r7, #4]
 80296ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80296ee:	683b      	ldr	r3, [r7, #0]
 80296f0:	2b00      	cmp	r3, #0
 80296f2:	d002      	beq.n	80296fa <HAL_TIM_Encoder_Start+0x16>
 80296f4:	2b04      	cmp	r3, #4
 80296f6:	d008      	beq.n	802970a <HAL_TIM_Encoder_Start+0x26>
 80296f8:	e00f      	b.n	802971a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80296fa:	687b      	ldr	r3, [r7, #4]
 80296fc:	681b      	ldr	r3, [r3, #0]
 80296fe:	2201      	movs	r2, #1
 8029700:	2100      	movs	r1, #0
 8029702:	4618      	mov	r0, r3
 8029704:	f000 fdbe 	bl	802a284 <TIM_CCxChannelCmd>
      break;
 8029708:	e016      	b.n	8029738 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 802970a:	687b      	ldr	r3, [r7, #4]
 802970c:	681b      	ldr	r3, [r3, #0]
 802970e:	2201      	movs	r2, #1
 8029710:	2104      	movs	r1, #4
 8029712:	4618      	mov	r0, r3
 8029714:	f000 fdb6 	bl	802a284 <TIM_CCxChannelCmd>
      break;
 8029718:	e00e      	b.n	8029738 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 802971a:	687b      	ldr	r3, [r7, #4]
 802971c:	681b      	ldr	r3, [r3, #0]
 802971e:	2201      	movs	r2, #1
 8029720:	2100      	movs	r1, #0
 8029722:	4618      	mov	r0, r3
 8029724:	f000 fdae 	bl	802a284 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8029728:	687b      	ldr	r3, [r7, #4]
 802972a:	681b      	ldr	r3, [r3, #0]
 802972c:	2201      	movs	r2, #1
 802972e:	2104      	movs	r1, #4
 8029730:	4618      	mov	r0, r3
 8029732:	f000 fda7 	bl	802a284 <TIM_CCxChannelCmd>
      break;
 8029736:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8029738:	687b      	ldr	r3, [r7, #4]
 802973a:	681b      	ldr	r3, [r3, #0]
 802973c:	681a      	ldr	r2, [r3, #0]
 802973e:	687b      	ldr	r3, [r7, #4]
 8029740:	681b      	ldr	r3, [r3, #0]
 8029742:	f042 0201 	orr.w	r2, r2, #1
 8029746:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8029748:	2300      	movs	r3, #0
}
 802974a:	4618      	mov	r0, r3
 802974c:	3708      	adds	r7, #8
 802974e:	46bd      	mov	sp, r7
 8029750:	bd80      	pop	{r7, pc}

08029752 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8029752:	b580      	push	{r7, lr}
 8029754:	b082      	sub	sp, #8
 8029756:	af00      	add	r7, sp, #0
 8029758:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 802975a:	687b      	ldr	r3, [r7, #4]
 802975c:	681b      	ldr	r3, [r3, #0]
 802975e:	691b      	ldr	r3, [r3, #16]
 8029760:	f003 0302 	and.w	r3, r3, #2
 8029764:	2b02      	cmp	r3, #2
 8029766:	d122      	bne.n	80297ae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8029768:	687b      	ldr	r3, [r7, #4]
 802976a:	681b      	ldr	r3, [r3, #0]
 802976c:	68db      	ldr	r3, [r3, #12]
 802976e:	f003 0302 	and.w	r3, r3, #2
 8029772:	2b02      	cmp	r3, #2
 8029774:	d11b      	bne.n	80297ae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8029776:	687b      	ldr	r3, [r7, #4]
 8029778:	681b      	ldr	r3, [r3, #0]
 802977a:	f06f 0202 	mvn.w	r2, #2
 802977e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8029780:	687b      	ldr	r3, [r7, #4]
 8029782:	2201      	movs	r2, #1
 8029784:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8029786:	687b      	ldr	r3, [r7, #4]
 8029788:	681b      	ldr	r3, [r3, #0]
 802978a:	699b      	ldr	r3, [r3, #24]
 802978c:	f003 0303 	and.w	r3, r3, #3
 8029790:	2b00      	cmp	r3, #0
 8029792:	d003      	beq.n	802979c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8029794:	6878      	ldr	r0, [r7, #4]
 8029796:	f000 fa6c 	bl	8029c72 <HAL_TIM_IC_CaptureCallback>
 802979a:	e005      	b.n	80297a8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 802979c:	6878      	ldr	r0, [r7, #4]
 802979e:	f000 fa5e 	bl	8029c5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80297a2:	6878      	ldr	r0, [r7, #4]
 80297a4:	f000 fa6f 	bl	8029c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80297a8:	687b      	ldr	r3, [r7, #4]
 80297aa:	2200      	movs	r2, #0
 80297ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80297ae:	687b      	ldr	r3, [r7, #4]
 80297b0:	681b      	ldr	r3, [r3, #0]
 80297b2:	691b      	ldr	r3, [r3, #16]
 80297b4:	f003 0304 	and.w	r3, r3, #4
 80297b8:	2b04      	cmp	r3, #4
 80297ba:	d122      	bne.n	8029802 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80297bc:	687b      	ldr	r3, [r7, #4]
 80297be:	681b      	ldr	r3, [r3, #0]
 80297c0:	68db      	ldr	r3, [r3, #12]
 80297c2:	f003 0304 	and.w	r3, r3, #4
 80297c6:	2b04      	cmp	r3, #4
 80297c8:	d11b      	bne.n	8029802 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80297ca:	687b      	ldr	r3, [r7, #4]
 80297cc:	681b      	ldr	r3, [r3, #0]
 80297ce:	f06f 0204 	mvn.w	r2, #4
 80297d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80297d4:	687b      	ldr	r3, [r7, #4]
 80297d6:	2202      	movs	r2, #2
 80297d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80297da:	687b      	ldr	r3, [r7, #4]
 80297dc:	681b      	ldr	r3, [r3, #0]
 80297de:	699b      	ldr	r3, [r3, #24]
 80297e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80297e4:	2b00      	cmp	r3, #0
 80297e6:	d003      	beq.n	80297f0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80297e8:	6878      	ldr	r0, [r7, #4]
 80297ea:	f000 fa42 	bl	8029c72 <HAL_TIM_IC_CaptureCallback>
 80297ee:	e005      	b.n	80297fc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80297f0:	6878      	ldr	r0, [r7, #4]
 80297f2:	f000 fa34 	bl	8029c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80297f6:	6878      	ldr	r0, [r7, #4]
 80297f8:	f000 fa45 	bl	8029c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80297fc:	687b      	ldr	r3, [r7, #4]
 80297fe:	2200      	movs	r2, #0
 8029800:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8029802:	687b      	ldr	r3, [r7, #4]
 8029804:	681b      	ldr	r3, [r3, #0]
 8029806:	691b      	ldr	r3, [r3, #16]
 8029808:	f003 0308 	and.w	r3, r3, #8
 802980c:	2b08      	cmp	r3, #8
 802980e:	d122      	bne.n	8029856 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8029810:	687b      	ldr	r3, [r7, #4]
 8029812:	681b      	ldr	r3, [r3, #0]
 8029814:	68db      	ldr	r3, [r3, #12]
 8029816:	f003 0308 	and.w	r3, r3, #8
 802981a:	2b08      	cmp	r3, #8
 802981c:	d11b      	bne.n	8029856 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 802981e:	687b      	ldr	r3, [r7, #4]
 8029820:	681b      	ldr	r3, [r3, #0]
 8029822:	f06f 0208 	mvn.w	r2, #8
 8029826:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8029828:	687b      	ldr	r3, [r7, #4]
 802982a:	2204      	movs	r2, #4
 802982c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 802982e:	687b      	ldr	r3, [r7, #4]
 8029830:	681b      	ldr	r3, [r3, #0]
 8029832:	69db      	ldr	r3, [r3, #28]
 8029834:	f003 0303 	and.w	r3, r3, #3
 8029838:	2b00      	cmp	r3, #0
 802983a:	d003      	beq.n	8029844 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802983c:	6878      	ldr	r0, [r7, #4]
 802983e:	f000 fa18 	bl	8029c72 <HAL_TIM_IC_CaptureCallback>
 8029842:	e005      	b.n	8029850 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029844:	6878      	ldr	r0, [r7, #4]
 8029846:	f000 fa0a 	bl	8029c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802984a:	6878      	ldr	r0, [r7, #4]
 802984c:	f000 fa1b 	bl	8029c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029850:	687b      	ldr	r3, [r7, #4]
 8029852:	2200      	movs	r2, #0
 8029854:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8029856:	687b      	ldr	r3, [r7, #4]
 8029858:	681b      	ldr	r3, [r3, #0]
 802985a:	691b      	ldr	r3, [r3, #16]
 802985c:	f003 0310 	and.w	r3, r3, #16
 8029860:	2b10      	cmp	r3, #16
 8029862:	d122      	bne.n	80298aa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8029864:	687b      	ldr	r3, [r7, #4]
 8029866:	681b      	ldr	r3, [r3, #0]
 8029868:	68db      	ldr	r3, [r3, #12]
 802986a:	f003 0310 	and.w	r3, r3, #16
 802986e:	2b10      	cmp	r3, #16
 8029870:	d11b      	bne.n	80298aa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8029872:	687b      	ldr	r3, [r7, #4]
 8029874:	681b      	ldr	r3, [r3, #0]
 8029876:	f06f 0210 	mvn.w	r2, #16
 802987a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 802987c:	687b      	ldr	r3, [r7, #4]
 802987e:	2208      	movs	r2, #8
 8029880:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8029882:	687b      	ldr	r3, [r7, #4]
 8029884:	681b      	ldr	r3, [r3, #0]
 8029886:	69db      	ldr	r3, [r3, #28]
 8029888:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802988c:	2b00      	cmp	r3, #0
 802988e:	d003      	beq.n	8029898 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029890:	6878      	ldr	r0, [r7, #4]
 8029892:	f000 f9ee 	bl	8029c72 <HAL_TIM_IC_CaptureCallback>
 8029896:	e005      	b.n	80298a4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029898:	6878      	ldr	r0, [r7, #4]
 802989a:	f000 f9e0 	bl	8029c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802989e:	6878      	ldr	r0, [r7, #4]
 80298a0:	f000 f9f1 	bl	8029c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80298a4:	687b      	ldr	r3, [r7, #4]
 80298a6:	2200      	movs	r2, #0
 80298a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80298aa:	687b      	ldr	r3, [r7, #4]
 80298ac:	681b      	ldr	r3, [r3, #0]
 80298ae:	691b      	ldr	r3, [r3, #16]
 80298b0:	f003 0301 	and.w	r3, r3, #1
 80298b4:	2b01      	cmp	r3, #1
 80298b6:	d10e      	bne.n	80298d6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80298b8:	687b      	ldr	r3, [r7, #4]
 80298ba:	681b      	ldr	r3, [r3, #0]
 80298bc:	68db      	ldr	r3, [r3, #12]
 80298be:	f003 0301 	and.w	r3, r3, #1
 80298c2:	2b01      	cmp	r3, #1
 80298c4:	d107      	bne.n	80298d6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80298c6:	687b      	ldr	r3, [r7, #4]
 80298c8:	681b      	ldr	r3, [r3, #0]
 80298ca:	f06f 0201 	mvn.w	r2, #1
 80298ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80298d0:	6878      	ldr	r0, [r7, #4]
 80298d2:	f7f9 fcc7 	bl	8023264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80298d6:	687b      	ldr	r3, [r7, #4]
 80298d8:	681b      	ldr	r3, [r3, #0]
 80298da:	691b      	ldr	r3, [r3, #16]
 80298dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80298e0:	2b80      	cmp	r3, #128	; 0x80
 80298e2:	d10e      	bne.n	8029902 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80298e4:	687b      	ldr	r3, [r7, #4]
 80298e6:	681b      	ldr	r3, [r3, #0]
 80298e8:	68db      	ldr	r3, [r3, #12]
 80298ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80298ee:	2b80      	cmp	r3, #128	; 0x80
 80298f0:	d107      	bne.n	8029902 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80298f2:	687b      	ldr	r3, [r7, #4]
 80298f4:	681b      	ldr	r3, [r3, #0]
 80298f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80298fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80298fc:	6878      	ldr	r0, [r7, #4]
 80298fe:	f000 fdbf 	bl	802a480 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8029902:	687b      	ldr	r3, [r7, #4]
 8029904:	681b      	ldr	r3, [r3, #0]
 8029906:	691b      	ldr	r3, [r3, #16]
 8029908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802990c:	2b40      	cmp	r3, #64	; 0x40
 802990e:	d10e      	bne.n	802992e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8029910:	687b      	ldr	r3, [r7, #4]
 8029912:	681b      	ldr	r3, [r3, #0]
 8029914:	68db      	ldr	r3, [r3, #12]
 8029916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802991a:	2b40      	cmp	r3, #64	; 0x40
 802991c:	d107      	bne.n	802992e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 802991e:	687b      	ldr	r3, [r7, #4]
 8029920:	681b      	ldr	r3, [r3, #0]
 8029922:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8029926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8029928:	6878      	ldr	r0, [r7, #4]
 802992a:	f000 f9b6 	bl	8029c9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 802992e:	687b      	ldr	r3, [r7, #4]
 8029930:	681b      	ldr	r3, [r3, #0]
 8029932:	691b      	ldr	r3, [r3, #16]
 8029934:	f003 0320 	and.w	r3, r3, #32
 8029938:	2b20      	cmp	r3, #32
 802993a:	d10e      	bne.n	802995a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 802993c:	687b      	ldr	r3, [r7, #4]
 802993e:	681b      	ldr	r3, [r3, #0]
 8029940:	68db      	ldr	r3, [r3, #12]
 8029942:	f003 0320 	and.w	r3, r3, #32
 8029946:	2b20      	cmp	r3, #32
 8029948:	d107      	bne.n	802995a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 802994a:	687b      	ldr	r3, [r7, #4]
 802994c:	681b      	ldr	r3, [r3, #0]
 802994e:	f06f 0220 	mvn.w	r2, #32
 8029952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8029954:	6878      	ldr	r0, [r7, #4]
 8029956:	f000 fd89 	bl	802a46c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 802995a:	bf00      	nop
 802995c:	3708      	adds	r7, #8
 802995e:	46bd      	mov	sp, r7
 8029960:	bd80      	pop	{r7, pc}
	...

08029964 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8029964:	b580      	push	{r7, lr}
 8029966:	b084      	sub	sp, #16
 8029968:	af00      	add	r7, sp, #0
 802996a:	60f8      	str	r0, [r7, #12]
 802996c:	60b9      	str	r1, [r7, #8]
 802996e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8029970:	68fb      	ldr	r3, [r7, #12]
 8029972:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029976:	2b01      	cmp	r3, #1
 8029978:	d101      	bne.n	802997e <HAL_TIM_PWM_ConfigChannel+0x1a>
 802997a:	2302      	movs	r3, #2
 802997c:	e0b4      	b.n	8029ae8 <HAL_TIM_PWM_ConfigChannel+0x184>
 802997e:	68fb      	ldr	r3, [r7, #12]
 8029980:	2201      	movs	r2, #1
 8029982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8029986:	68fb      	ldr	r3, [r7, #12]
 8029988:	2202      	movs	r2, #2
 802998a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 802998e:	687b      	ldr	r3, [r7, #4]
 8029990:	2b0c      	cmp	r3, #12
 8029992:	f200 809f 	bhi.w	8029ad4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8029996:	a201      	add	r2, pc, #4	; (adr r2, 802999c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8029998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802999c:	080299d1 	.word	0x080299d1
 80299a0:	08029ad5 	.word	0x08029ad5
 80299a4:	08029ad5 	.word	0x08029ad5
 80299a8:	08029ad5 	.word	0x08029ad5
 80299ac:	08029a11 	.word	0x08029a11
 80299b0:	08029ad5 	.word	0x08029ad5
 80299b4:	08029ad5 	.word	0x08029ad5
 80299b8:	08029ad5 	.word	0x08029ad5
 80299bc:	08029a53 	.word	0x08029a53
 80299c0:	08029ad5 	.word	0x08029ad5
 80299c4:	08029ad5 	.word	0x08029ad5
 80299c8:	08029ad5 	.word	0x08029ad5
 80299cc:	08029a93 	.word	0x08029a93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80299d0:	68fb      	ldr	r3, [r7, #12]
 80299d2:	681b      	ldr	r3, [r3, #0]
 80299d4:	68b9      	ldr	r1, [r7, #8]
 80299d6:	4618      	mov	r0, r3
 80299d8:	f000 fa0a 	bl	8029df0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80299dc:	68fb      	ldr	r3, [r7, #12]
 80299de:	681b      	ldr	r3, [r3, #0]
 80299e0:	699a      	ldr	r2, [r3, #24]
 80299e2:	68fb      	ldr	r3, [r7, #12]
 80299e4:	681b      	ldr	r3, [r3, #0]
 80299e6:	f042 0208 	orr.w	r2, r2, #8
 80299ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80299ec:	68fb      	ldr	r3, [r7, #12]
 80299ee:	681b      	ldr	r3, [r3, #0]
 80299f0:	699a      	ldr	r2, [r3, #24]
 80299f2:	68fb      	ldr	r3, [r7, #12]
 80299f4:	681b      	ldr	r3, [r3, #0]
 80299f6:	f022 0204 	bic.w	r2, r2, #4
 80299fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80299fc:	68fb      	ldr	r3, [r7, #12]
 80299fe:	681b      	ldr	r3, [r3, #0]
 8029a00:	6999      	ldr	r1, [r3, #24]
 8029a02:	68bb      	ldr	r3, [r7, #8]
 8029a04:	691a      	ldr	r2, [r3, #16]
 8029a06:	68fb      	ldr	r3, [r7, #12]
 8029a08:	681b      	ldr	r3, [r3, #0]
 8029a0a:	430a      	orrs	r2, r1
 8029a0c:	619a      	str	r2, [r3, #24]
      break;
 8029a0e:	e062      	b.n	8029ad6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8029a10:	68fb      	ldr	r3, [r7, #12]
 8029a12:	681b      	ldr	r3, [r3, #0]
 8029a14:	68b9      	ldr	r1, [r7, #8]
 8029a16:	4618      	mov	r0, r3
 8029a18:	f000 fa5a 	bl	8029ed0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8029a1c:	68fb      	ldr	r3, [r7, #12]
 8029a1e:	681b      	ldr	r3, [r3, #0]
 8029a20:	699a      	ldr	r2, [r3, #24]
 8029a22:	68fb      	ldr	r3, [r7, #12]
 8029a24:	681b      	ldr	r3, [r3, #0]
 8029a26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8029a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8029a2c:	68fb      	ldr	r3, [r7, #12]
 8029a2e:	681b      	ldr	r3, [r3, #0]
 8029a30:	699a      	ldr	r2, [r3, #24]
 8029a32:	68fb      	ldr	r3, [r7, #12]
 8029a34:	681b      	ldr	r3, [r3, #0]
 8029a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8029a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8029a3c:	68fb      	ldr	r3, [r7, #12]
 8029a3e:	681b      	ldr	r3, [r3, #0]
 8029a40:	6999      	ldr	r1, [r3, #24]
 8029a42:	68bb      	ldr	r3, [r7, #8]
 8029a44:	691b      	ldr	r3, [r3, #16]
 8029a46:	021a      	lsls	r2, r3, #8
 8029a48:	68fb      	ldr	r3, [r7, #12]
 8029a4a:	681b      	ldr	r3, [r3, #0]
 8029a4c:	430a      	orrs	r2, r1
 8029a4e:	619a      	str	r2, [r3, #24]
      break;
 8029a50:	e041      	b.n	8029ad6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8029a52:	68fb      	ldr	r3, [r7, #12]
 8029a54:	681b      	ldr	r3, [r3, #0]
 8029a56:	68b9      	ldr	r1, [r7, #8]
 8029a58:	4618      	mov	r0, r3
 8029a5a:	f000 faaf 	bl	8029fbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8029a5e:	68fb      	ldr	r3, [r7, #12]
 8029a60:	681b      	ldr	r3, [r3, #0]
 8029a62:	69da      	ldr	r2, [r3, #28]
 8029a64:	68fb      	ldr	r3, [r7, #12]
 8029a66:	681b      	ldr	r3, [r3, #0]
 8029a68:	f042 0208 	orr.w	r2, r2, #8
 8029a6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8029a6e:	68fb      	ldr	r3, [r7, #12]
 8029a70:	681b      	ldr	r3, [r3, #0]
 8029a72:	69da      	ldr	r2, [r3, #28]
 8029a74:	68fb      	ldr	r3, [r7, #12]
 8029a76:	681b      	ldr	r3, [r3, #0]
 8029a78:	f022 0204 	bic.w	r2, r2, #4
 8029a7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8029a7e:	68fb      	ldr	r3, [r7, #12]
 8029a80:	681b      	ldr	r3, [r3, #0]
 8029a82:	69d9      	ldr	r1, [r3, #28]
 8029a84:	68bb      	ldr	r3, [r7, #8]
 8029a86:	691a      	ldr	r2, [r3, #16]
 8029a88:	68fb      	ldr	r3, [r7, #12]
 8029a8a:	681b      	ldr	r3, [r3, #0]
 8029a8c:	430a      	orrs	r2, r1
 8029a8e:	61da      	str	r2, [r3, #28]
      break;
 8029a90:	e021      	b.n	8029ad6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8029a92:	68fb      	ldr	r3, [r7, #12]
 8029a94:	681b      	ldr	r3, [r3, #0]
 8029a96:	68b9      	ldr	r1, [r7, #8]
 8029a98:	4618      	mov	r0, r3
 8029a9a:	f000 fb03 	bl	802a0a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8029a9e:	68fb      	ldr	r3, [r7, #12]
 8029aa0:	681b      	ldr	r3, [r3, #0]
 8029aa2:	69da      	ldr	r2, [r3, #28]
 8029aa4:	68fb      	ldr	r3, [r7, #12]
 8029aa6:	681b      	ldr	r3, [r3, #0]
 8029aa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8029aac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8029aae:	68fb      	ldr	r3, [r7, #12]
 8029ab0:	681b      	ldr	r3, [r3, #0]
 8029ab2:	69da      	ldr	r2, [r3, #28]
 8029ab4:	68fb      	ldr	r3, [r7, #12]
 8029ab6:	681b      	ldr	r3, [r3, #0]
 8029ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8029abc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8029abe:	68fb      	ldr	r3, [r7, #12]
 8029ac0:	681b      	ldr	r3, [r3, #0]
 8029ac2:	69d9      	ldr	r1, [r3, #28]
 8029ac4:	68bb      	ldr	r3, [r7, #8]
 8029ac6:	691b      	ldr	r3, [r3, #16]
 8029ac8:	021a      	lsls	r2, r3, #8
 8029aca:	68fb      	ldr	r3, [r7, #12]
 8029acc:	681b      	ldr	r3, [r3, #0]
 8029ace:	430a      	orrs	r2, r1
 8029ad0:	61da      	str	r2, [r3, #28]
      break;
 8029ad2:	e000      	b.n	8029ad6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8029ad4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8029ad6:	68fb      	ldr	r3, [r7, #12]
 8029ad8:	2201      	movs	r2, #1
 8029ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8029ade:	68fb      	ldr	r3, [r7, #12]
 8029ae0:	2200      	movs	r2, #0
 8029ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8029ae6:	2300      	movs	r3, #0
}
 8029ae8:	4618      	mov	r0, r3
 8029aea:	3710      	adds	r7, #16
 8029aec:	46bd      	mov	sp, r7
 8029aee:	bd80      	pop	{r7, pc}

08029af0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8029af0:	b580      	push	{r7, lr}
 8029af2:	b084      	sub	sp, #16
 8029af4:	af00      	add	r7, sp, #0
 8029af6:	6078      	str	r0, [r7, #4]
 8029af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8029afa:	687b      	ldr	r3, [r7, #4]
 8029afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029b00:	2b01      	cmp	r3, #1
 8029b02:	d101      	bne.n	8029b08 <HAL_TIM_ConfigClockSource+0x18>
 8029b04:	2302      	movs	r3, #2
 8029b06:	e0a6      	b.n	8029c56 <HAL_TIM_ConfigClockSource+0x166>
 8029b08:	687b      	ldr	r3, [r7, #4]
 8029b0a:	2201      	movs	r2, #1
 8029b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8029b10:	687b      	ldr	r3, [r7, #4]
 8029b12:	2202      	movs	r2, #2
 8029b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8029b18:	687b      	ldr	r3, [r7, #4]
 8029b1a:	681b      	ldr	r3, [r3, #0]
 8029b1c:	689b      	ldr	r3, [r3, #8]
 8029b1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8029b20:	68fb      	ldr	r3, [r7, #12]
 8029b22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8029b26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8029b28:	68fb      	ldr	r3, [r7, #12]
 8029b2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8029b2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8029b30:	687b      	ldr	r3, [r7, #4]
 8029b32:	681b      	ldr	r3, [r3, #0]
 8029b34:	68fa      	ldr	r2, [r7, #12]
 8029b36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8029b38:	683b      	ldr	r3, [r7, #0]
 8029b3a:	681b      	ldr	r3, [r3, #0]
 8029b3c:	2b40      	cmp	r3, #64	; 0x40
 8029b3e:	d067      	beq.n	8029c10 <HAL_TIM_ConfigClockSource+0x120>
 8029b40:	2b40      	cmp	r3, #64	; 0x40
 8029b42:	d80b      	bhi.n	8029b5c <HAL_TIM_ConfigClockSource+0x6c>
 8029b44:	2b10      	cmp	r3, #16
 8029b46:	d073      	beq.n	8029c30 <HAL_TIM_ConfigClockSource+0x140>
 8029b48:	2b10      	cmp	r3, #16
 8029b4a:	d802      	bhi.n	8029b52 <HAL_TIM_ConfigClockSource+0x62>
 8029b4c:	2b00      	cmp	r3, #0
 8029b4e:	d06f      	beq.n	8029c30 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8029b50:	e078      	b.n	8029c44 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8029b52:	2b20      	cmp	r3, #32
 8029b54:	d06c      	beq.n	8029c30 <HAL_TIM_ConfigClockSource+0x140>
 8029b56:	2b30      	cmp	r3, #48	; 0x30
 8029b58:	d06a      	beq.n	8029c30 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8029b5a:	e073      	b.n	8029c44 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8029b5c:	2b70      	cmp	r3, #112	; 0x70
 8029b5e:	d00d      	beq.n	8029b7c <HAL_TIM_ConfigClockSource+0x8c>
 8029b60:	2b70      	cmp	r3, #112	; 0x70
 8029b62:	d804      	bhi.n	8029b6e <HAL_TIM_ConfigClockSource+0x7e>
 8029b64:	2b50      	cmp	r3, #80	; 0x50
 8029b66:	d033      	beq.n	8029bd0 <HAL_TIM_ConfigClockSource+0xe0>
 8029b68:	2b60      	cmp	r3, #96	; 0x60
 8029b6a:	d041      	beq.n	8029bf0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8029b6c:	e06a      	b.n	8029c44 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8029b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8029b72:	d066      	beq.n	8029c42 <HAL_TIM_ConfigClockSource+0x152>
 8029b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8029b78:	d017      	beq.n	8029baa <HAL_TIM_ConfigClockSource+0xba>
      break;
 8029b7a:	e063      	b.n	8029c44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8029b7c:	687b      	ldr	r3, [r7, #4]
 8029b7e:	6818      	ldr	r0, [r3, #0]
 8029b80:	683b      	ldr	r3, [r7, #0]
 8029b82:	6899      	ldr	r1, [r3, #8]
 8029b84:	683b      	ldr	r3, [r7, #0]
 8029b86:	685a      	ldr	r2, [r3, #4]
 8029b88:	683b      	ldr	r3, [r7, #0]
 8029b8a:	68db      	ldr	r3, [r3, #12]
 8029b8c:	f000 fb5a 	bl	802a244 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8029b90:	687b      	ldr	r3, [r7, #4]
 8029b92:	681b      	ldr	r3, [r3, #0]
 8029b94:	689b      	ldr	r3, [r3, #8]
 8029b96:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8029b98:	68fb      	ldr	r3, [r7, #12]
 8029b9a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8029b9e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8029ba0:	687b      	ldr	r3, [r7, #4]
 8029ba2:	681b      	ldr	r3, [r3, #0]
 8029ba4:	68fa      	ldr	r2, [r7, #12]
 8029ba6:	609a      	str	r2, [r3, #8]
      break;
 8029ba8:	e04c      	b.n	8029c44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8029baa:	687b      	ldr	r3, [r7, #4]
 8029bac:	6818      	ldr	r0, [r3, #0]
 8029bae:	683b      	ldr	r3, [r7, #0]
 8029bb0:	6899      	ldr	r1, [r3, #8]
 8029bb2:	683b      	ldr	r3, [r7, #0]
 8029bb4:	685a      	ldr	r2, [r3, #4]
 8029bb6:	683b      	ldr	r3, [r7, #0]
 8029bb8:	68db      	ldr	r3, [r3, #12]
 8029bba:	f000 fb43 	bl	802a244 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8029bbe:	687b      	ldr	r3, [r7, #4]
 8029bc0:	681b      	ldr	r3, [r3, #0]
 8029bc2:	689a      	ldr	r2, [r3, #8]
 8029bc4:	687b      	ldr	r3, [r7, #4]
 8029bc6:	681b      	ldr	r3, [r3, #0]
 8029bc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8029bcc:	609a      	str	r2, [r3, #8]
      break;
 8029bce:	e039      	b.n	8029c44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8029bd0:	687b      	ldr	r3, [r7, #4]
 8029bd2:	6818      	ldr	r0, [r3, #0]
 8029bd4:	683b      	ldr	r3, [r7, #0]
 8029bd6:	6859      	ldr	r1, [r3, #4]
 8029bd8:	683b      	ldr	r3, [r7, #0]
 8029bda:	68db      	ldr	r3, [r3, #12]
 8029bdc:	461a      	mov	r2, r3
 8029bde:	f000 fab7 	bl	802a150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8029be2:	687b      	ldr	r3, [r7, #4]
 8029be4:	681b      	ldr	r3, [r3, #0]
 8029be6:	2150      	movs	r1, #80	; 0x50
 8029be8:	4618      	mov	r0, r3
 8029bea:	f000 fb10 	bl	802a20e <TIM_ITRx_SetConfig>
      break;
 8029bee:	e029      	b.n	8029c44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8029bf0:	687b      	ldr	r3, [r7, #4]
 8029bf2:	6818      	ldr	r0, [r3, #0]
 8029bf4:	683b      	ldr	r3, [r7, #0]
 8029bf6:	6859      	ldr	r1, [r3, #4]
 8029bf8:	683b      	ldr	r3, [r7, #0]
 8029bfa:	68db      	ldr	r3, [r3, #12]
 8029bfc:	461a      	mov	r2, r3
 8029bfe:	f000 fad6 	bl	802a1ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8029c02:	687b      	ldr	r3, [r7, #4]
 8029c04:	681b      	ldr	r3, [r3, #0]
 8029c06:	2160      	movs	r1, #96	; 0x60
 8029c08:	4618      	mov	r0, r3
 8029c0a:	f000 fb00 	bl	802a20e <TIM_ITRx_SetConfig>
      break;
 8029c0e:	e019      	b.n	8029c44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8029c10:	687b      	ldr	r3, [r7, #4]
 8029c12:	6818      	ldr	r0, [r3, #0]
 8029c14:	683b      	ldr	r3, [r7, #0]
 8029c16:	6859      	ldr	r1, [r3, #4]
 8029c18:	683b      	ldr	r3, [r7, #0]
 8029c1a:	68db      	ldr	r3, [r3, #12]
 8029c1c:	461a      	mov	r2, r3
 8029c1e:	f000 fa97 	bl	802a150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8029c22:	687b      	ldr	r3, [r7, #4]
 8029c24:	681b      	ldr	r3, [r3, #0]
 8029c26:	2140      	movs	r1, #64	; 0x40
 8029c28:	4618      	mov	r0, r3
 8029c2a:	f000 faf0 	bl	802a20e <TIM_ITRx_SetConfig>
      break;
 8029c2e:	e009      	b.n	8029c44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8029c30:	687b      	ldr	r3, [r7, #4]
 8029c32:	681a      	ldr	r2, [r3, #0]
 8029c34:	683b      	ldr	r3, [r7, #0]
 8029c36:	681b      	ldr	r3, [r3, #0]
 8029c38:	4619      	mov	r1, r3
 8029c3a:	4610      	mov	r0, r2
 8029c3c:	f000 fae7 	bl	802a20e <TIM_ITRx_SetConfig>
      break;
 8029c40:	e000      	b.n	8029c44 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8029c42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8029c44:	687b      	ldr	r3, [r7, #4]
 8029c46:	2201      	movs	r2, #1
 8029c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8029c4c:	687b      	ldr	r3, [r7, #4]
 8029c4e:	2200      	movs	r2, #0
 8029c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8029c54:	2300      	movs	r3, #0
}
 8029c56:	4618      	mov	r0, r3
 8029c58:	3710      	adds	r7, #16
 8029c5a:	46bd      	mov	sp, r7
 8029c5c:	bd80      	pop	{r7, pc}

08029c5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8029c5e:	b480      	push	{r7}
 8029c60:	b083      	sub	sp, #12
 8029c62:	af00      	add	r7, sp, #0
 8029c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8029c66:	bf00      	nop
 8029c68:	370c      	adds	r7, #12
 8029c6a:	46bd      	mov	sp, r7
 8029c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c70:	4770      	bx	lr

08029c72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8029c72:	b480      	push	{r7}
 8029c74:	b083      	sub	sp, #12
 8029c76:	af00      	add	r7, sp, #0
 8029c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8029c7a:	bf00      	nop
 8029c7c:	370c      	adds	r7, #12
 8029c7e:	46bd      	mov	sp, r7
 8029c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c84:	4770      	bx	lr

08029c86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8029c86:	b480      	push	{r7}
 8029c88:	b083      	sub	sp, #12
 8029c8a:	af00      	add	r7, sp, #0
 8029c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8029c8e:	bf00      	nop
 8029c90:	370c      	adds	r7, #12
 8029c92:	46bd      	mov	sp, r7
 8029c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029c98:	4770      	bx	lr

08029c9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8029c9a:	b480      	push	{r7}
 8029c9c:	b083      	sub	sp, #12
 8029c9e:	af00      	add	r7, sp, #0
 8029ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8029ca2:	bf00      	nop
 8029ca4:	370c      	adds	r7, #12
 8029ca6:	46bd      	mov	sp, r7
 8029ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029cac:	4770      	bx	lr
	...

08029cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8029cb0:	b480      	push	{r7}
 8029cb2:	b085      	sub	sp, #20
 8029cb4:	af00      	add	r7, sp, #0
 8029cb6:	6078      	str	r0, [r7, #4]
 8029cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8029cba:	687b      	ldr	r3, [r7, #4]
 8029cbc:	681b      	ldr	r3, [r3, #0]
 8029cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8029cc0:	687b      	ldr	r3, [r7, #4]
 8029cc2:	4a40      	ldr	r2, [pc, #256]	; (8029dc4 <TIM_Base_SetConfig+0x114>)
 8029cc4:	4293      	cmp	r3, r2
 8029cc6:	d013      	beq.n	8029cf0 <TIM_Base_SetConfig+0x40>
 8029cc8:	687b      	ldr	r3, [r7, #4]
 8029cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029cce:	d00f      	beq.n	8029cf0 <TIM_Base_SetConfig+0x40>
 8029cd0:	687b      	ldr	r3, [r7, #4]
 8029cd2:	4a3d      	ldr	r2, [pc, #244]	; (8029dc8 <TIM_Base_SetConfig+0x118>)
 8029cd4:	4293      	cmp	r3, r2
 8029cd6:	d00b      	beq.n	8029cf0 <TIM_Base_SetConfig+0x40>
 8029cd8:	687b      	ldr	r3, [r7, #4]
 8029cda:	4a3c      	ldr	r2, [pc, #240]	; (8029dcc <TIM_Base_SetConfig+0x11c>)
 8029cdc:	4293      	cmp	r3, r2
 8029cde:	d007      	beq.n	8029cf0 <TIM_Base_SetConfig+0x40>
 8029ce0:	687b      	ldr	r3, [r7, #4]
 8029ce2:	4a3b      	ldr	r2, [pc, #236]	; (8029dd0 <TIM_Base_SetConfig+0x120>)
 8029ce4:	4293      	cmp	r3, r2
 8029ce6:	d003      	beq.n	8029cf0 <TIM_Base_SetConfig+0x40>
 8029ce8:	687b      	ldr	r3, [r7, #4]
 8029cea:	4a3a      	ldr	r2, [pc, #232]	; (8029dd4 <TIM_Base_SetConfig+0x124>)
 8029cec:	4293      	cmp	r3, r2
 8029cee:	d108      	bne.n	8029d02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8029cf0:	68fb      	ldr	r3, [r7, #12]
 8029cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029cf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8029cf8:	683b      	ldr	r3, [r7, #0]
 8029cfa:	685b      	ldr	r3, [r3, #4]
 8029cfc:	68fa      	ldr	r2, [r7, #12]
 8029cfe:	4313      	orrs	r3, r2
 8029d00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8029d02:	687b      	ldr	r3, [r7, #4]
 8029d04:	4a2f      	ldr	r2, [pc, #188]	; (8029dc4 <TIM_Base_SetConfig+0x114>)
 8029d06:	4293      	cmp	r3, r2
 8029d08:	d02b      	beq.n	8029d62 <TIM_Base_SetConfig+0xb2>
 8029d0a:	687b      	ldr	r3, [r7, #4]
 8029d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8029d10:	d027      	beq.n	8029d62 <TIM_Base_SetConfig+0xb2>
 8029d12:	687b      	ldr	r3, [r7, #4]
 8029d14:	4a2c      	ldr	r2, [pc, #176]	; (8029dc8 <TIM_Base_SetConfig+0x118>)
 8029d16:	4293      	cmp	r3, r2
 8029d18:	d023      	beq.n	8029d62 <TIM_Base_SetConfig+0xb2>
 8029d1a:	687b      	ldr	r3, [r7, #4]
 8029d1c:	4a2b      	ldr	r2, [pc, #172]	; (8029dcc <TIM_Base_SetConfig+0x11c>)
 8029d1e:	4293      	cmp	r3, r2
 8029d20:	d01f      	beq.n	8029d62 <TIM_Base_SetConfig+0xb2>
 8029d22:	687b      	ldr	r3, [r7, #4]
 8029d24:	4a2a      	ldr	r2, [pc, #168]	; (8029dd0 <TIM_Base_SetConfig+0x120>)
 8029d26:	4293      	cmp	r3, r2
 8029d28:	d01b      	beq.n	8029d62 <TIM_Base_SetConfig+0xb2>
 8029d2a:	687b      	ldr	r3, [r7, #4]
 8029d2c:	4a29      	ldr	r2, [pc, #164]	; (8029dd4 <TIM_Base_SetConfig+0x124>)
 8029d2e:	4293      	cmp	r3, r2
 8029d30:	d017      	beq.n	8029d62 <TIM_Base_SetConfig+0xb2>
 8029d32:	687b      	ldr	r3, [r7, #4]
 8029d34:	4a28      	ldr	r2, [pc, #160]	; (8029dd8 <TIM_Base_SetConfig+0x128>)
 8029d36:	4293      	cmp	r3, r2
 8029d38:	d013      	beq.n	8029d62 <TIM_Base_SetConfig+0xb2>
 8029d3a:	687b      	ldr	r3, [r7, #4]
 8029d3c:	4a27      	ldr	r2, [pc, #156]	; (8029ddc <TIM_Base_SetConfig+0x12c>)
 8029d3e:	4293      	cmp	r3, r2
 8029d40:	d00f      	beq.n	8029d62 <TIM_Base_SetConfig+0xb2>
 8029d42:	687b      	ldr	r3, [r7, #4]
 8029d44:	4a26      	ldr	r2, [pc, #152]	; (8029de0 <TIM_Base_SetConfig+0x130>)
 8029d46:	4293      	cmp	r3, r2
 8029d48:	d00b      	beq.n	8029d62 <TIM_Base_SetConfig+0xb2>
 8029d4a:	687b      	ldr	r3, [r7, #4]
 8029d4c:	4a25      	ldr	r2, [pc, #148]	; (8029de4 <TIM_Base_SetConfig+0x134>)
 8029d4e:	4293      	cmp	r3, r2
 8029d50:	d007      	beq.n	8029d62 <TIM_Base_SetConfig+0xb2>
 8029d52:	687b      	ldr	r3, [r7, #4]
 8029d54:	4a24      	ldr	r2, [pc, #144]	; (8029de8 <TIM_Base_SetConfig+0x138>)
 8029d56:	4293      	cmp	r3, r2
 8029d58:	d003      	beq.n	8029d62 <TIM_Base_SetConfig+0xb2>
 8029d5a:	687b      	ldr	r3, [r7, #4]
 8029d5c:	4a23      	ldr	r2, [pc, #140]	; (8029dec <TIM_Base_SetConfig+0x13c>)
 8029d5e:	4293      	cmp	r3, r2
 8029d60:	d108      	bne.n	8029d74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8029d62:	68fb      	ldr	r3, [r7, #12]
 8029d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029d68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8029d6a:	683b      	ldr	r3, [r7, #0]
 8029d6c:	68db      	ldr	r3, [r3, #12]
 8029d6e:	68fa      	ldr	r2, [r7, #12]
 8029d70:	4313      	orrs	r3, r2
 8029d72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8029d74:	68fb      	ldr	r3, [r7, #12]
 8029d76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8029d7a:	683b      	ldr	r3, [r7, #0]
 8029d7c:	695b      	ldr	r3, [r3, #20]
 8029d7e:	4313      	orrs	r3, r2
 8029d80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8029d82:	687b      	ldr	r3, [r7, #4]
 8029d84:	68fa      	ldr	r2, [r7, #12]
 8029d86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8029d88:	683b      	ldr	r3, [r7, #0]
 8029d8a:	689a      	ldr	r2, [r3, #8]
 8029d8c:	687b      	ldr	r3, [r7, #4]
 8029d8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8029d90:	683b      	ldr	r3, [r7, #0]
 8029d92:	681a      	ldr	r2, [r3, #0]
 8029d94:	687b      	ldr	r3, [r7, #4]
 8029d96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8029d98:	687b      	ldr	r3, [r7, #4]
 8029d9a:	4a0a      	ldr	r2, [pc, #40]	; (8029dc4 <TIM_Base_SetConfig+0x114>)
 8029d9c:	4293      	cmp	r3, r2
 8029d9e:	d003      	beq.n	8029da8 <TIM_Base_SetConfig+0xf8>
 8029da0:	687b      	ldr	r3, [r7, #4]
 8029da2:	4a0c      	ldr	r2, [pc, #48]	; (8029dd4 <TIM_Base_SetConfig+0x124>)
 8029da4:	4293      	cmp	r3, r2
 8029da6:	d103      	bne.n	8029db0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8029da8:	683b      	ldr	r3, [r7, #0]
 8029daa:	691a      	ldr	r2, [r3, #16]
 8029dac:	687b      	ldr	r3, [r7, #4]
 8029dae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8029db0:	687b      	ldr	r3, [r7, #4]
 8029db2:	2201      	movs	r2, #1
 8029db4:	615a      	str	r2, [r3, #20]
}
 8029db6:	bf00      	nop
 8029db8:	3714      	adds	r7, #20
 8029dba:	46bd      	mov	sp, r7
 8029dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029dc0:	4770      	bx	lr
 8029dc2:	bf00      	nop
 8029dc4:	40010000 	.word	0x40010000
 8029dc8:	40000400 	.word	0x40000400
 8029dcc:	40000800 	.word	0x40000800
 8029dd0:	40000c00 	.word	0x40000c00
 8029dd4:	40010400 	.word	0x40010400
 8029dd8:	40014000 	.word	0x40014000
 8029ddc:	40014400 	.word	0x40014400
 8029de0:	40014800 	.word	0x40014800
 8029de4:	40001800 	.word	0x40001800
 8029de8:	40001c00 	.word	0x40001c00
 8029dec:	40002000 	.word	0x40002000

08029df0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029df0:	b480      	push	{r7}
 8029df2:	b087      	sub	sp, #28
 8029df4:	af00      	add	r7, sp, #0
 8029df6:	6078      	str	r0, [r7, #4]
 8029df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8029dfa:	687b      	ldr	r3, [r7, #4]
 8029dfc:	6a1b      	ldr	r3, [r3, #32]
 8029dfe:	f023 0201 	bic.w	r2, r3, #1
 8029e02:	687b      	ldr	r3, [r7, #4]
 8029e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029e06:	687b      	ldr	r3, [r7, #4]
 8029e08:	6a1b      	ldr	r3, [r3, #32]
 8029e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029e0c:	687b      	ldr	r3, [r7, #4]
 8029e0e:	685b      	ldr	r3, [r3, #4]
 8029e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8029e12:	687b      	ldr	r3, [r7, #4]
 8029e14:	699b      	ldr	r3, [r3, #24]
 8029e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8029e18:	68fb      	ldr	r3, [r7, #12]
 8029e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8029e20:	68fb      	ldr	r3, [r7, #12]
 8029e22:	f023 0303 	bic.w	r3, r3, #3
 8029e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8029e28:	683b      	ldr	r3, [r7, #0]
 8029e2a:	681b      	ldr	r3, [r3, #0]
 8029e2c:	68fa      	ldr	r2, [r7, #12]
 8029e2e:	4313      	orrs	r3, r2
 8029e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8029e32:	697b      	ldr	r3, [r7, #20]
 8029e34:	f023 0302 	bic.w	r3, r3, #2
 8029e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8029e3a:	683b      	ldr	r3, [r7, #0]
 8029e3c:	689b      	ldr	r3, [r3, #8]
 8029e3e:	697a      	ldr	r2, [r7, #20]
 8029e40:	4313      	orrs	r3, r2
 8029e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8029e44:	687b      	ldr	r3, [r7, #4]
 8029e46:	4a20      	ldr	r2, [pc, #128]	; (8029ec8 <TIM_OC1_SetConfig+0xd8>)
 8029e48:	4293      	cmp	r3, r2
 8029e4a:	d003      	beq.n	8029e54 <TIM_OC1_SetConfig+0x64>
 8029e4c:	687b      	ldr	r3, [r7, #4]
 8029e4e:	4a1f      	ldr	r2, [pc, #124]	; (8029ecc <TIM_OC1_SetConfig+0xdc>)
 8029e50:	4293      	cmp	r3, r2
 8029e52:	d10c      	bne.n	8029e6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8029e54:	697b      	ldr	r3, [r7, #20]
 8029e56:	f023 0308 	bic.w	r3, r3, #8
 8029e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8029e5c:	683b      	ldr	r3, [r7, #0]
 8029e5e:	68db      	ldr	r3, [r3, #12]
 8029e60:	697a      	ldr	r2, [r7, #20]
 8029e62:	4313      	orrs	r3, r2
 8029e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8029e66:	697b      	ldr	r3, [r7, #20]
 8029e68:	f023 0304 	bic.w	r3, r3, #4
 8029e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029e6e:	687b      	ldr	r3, [r7, #4]
 8029e70:	4a15      	ldr	r2, [pc, #84]	; (8029ec8 <TIM_OC1_SetConfig+0xd8>)
 8029e72:	4293      	cmp	r3, r2
 8029e74:	d003      	beq.n	8029e7e <TIM_OC1_SetConfig+0x8e>
 8029e76:	687b      	ldr	r3, [r7, #4]
 8029e78:	4a14      	ldr	r2, [pc, #80]	; (8029ecc <TIM_OC1_SetConfig+0xdc>)
 8029e7a:	4293      	cmp	r3, r2
 8029e7c:	d111      	bne.n	8029ea2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8029e7e:	693b      	ldr	r3, [r7, #16]
 8029e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8029e84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8029e86:	693b      	ldr	r3, [r7, #16]
 8029e88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8029e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8029e8e:	683b      	ldr	r3, [r7, #0]
 8029e90:	695b      	ldr	r3, [r3, #20]
 8029e92:	693a      	ldr	r2, [r7, #16]
 8029e94:	4313      	orrs	r3, r2
 8029e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8029e98:	683b      	ldr	r3, [r7, #0]
 8029e9a:	699b      	ldr	r3, [r3, #24]
 8029e9c:	693a      	ldr	r2, [r7, #16]
 8029e9e:	4313      	orrs	r3, r2
 8029ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8029ea2:	687b      	ldr	r3, [r7, #4]
 8029ea4:	693a      	ldr	r2, [r7, #16]
 8029ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8029ea8:	687b      	ldr	r3, [r7, #4]
 8029eaa:	68fa      	ldr	r2, [r7, #12]
 8029eac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8029eae:	683b      	ldr	r3, [r7, #0]
 8029eb0:	685a      	ldr	r2, [r3, #4]
 8029eb2:	687b      	ldr	r3, [r7, #4]
 8029eb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8029eb6:	687b      	ldr	r3, [r7, #4]
 8029eb8:	697a      	ldr	r2, [r7, #20]
 8029eba:	621a      	str	r2, [r3, #32]
}
 8029ebc:	bf00      	nop
 8029ebe:	371c      	adds	r7, #28
 8029ec0:	46bd      	mov	sp, r7
 8029ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029ec6:	4770      	bx	lr
 8029ec8:	40010000 	.word	0x40010000
 8029ecc:	40010400 	.word	0x40010400

08029ed0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029ed0:	b480      	push	{r7}
 8029ed2:	b087      	sub	sp, #28
 8029ed4:	af00      	add	r7, sp, #0
 8029ed6:	6078      	str	r0, [r7, #4]
 8029ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8029eda:	687b      	ldr	r3, [r7, #4]
 8029edc:	6a1b      	ldr	r3, [r3, #32]
 8029ede:	f023 0210 	bic.w	r2, r3, #16
 8029ee2:	687b      	ldr	r3, [r7, #4]
 8029ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029ee6:	687b      	ldr	r3, [r7, #4]
 8029ee8:	6a1b      	ldr	r3, [r3, #32]
 8029eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029eec:	687b      	ldr	r3, [r7, #4]
 8029eee:	685b      	ldr	r3, [r3, #4]
 8029ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8029ef2:	687b      	ldr	r3, [r7, #4]
 8029ef4:	699b      	ldr	r3, [r3, #24]
 8029ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8029ef8:	68fb      	ldr	r3, [r7, #12]
 8029efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8029efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8029f00:	68fb      	ldr	r3, [r7, #12]
 8029f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8029f08:	683b      	ldr	r3, [r7, #0]
 8029f0a:	681b      	ldr	r3, [r3, #0]
 8029f0c:	021b      	lsls	r3, r3, #8
 8029f0e:	68fa      	ldr	r2, [r7, #12]
 8029f10:	4313      	orrs	r3, r2
 8029f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8029f14:	697b      	ldr	r3, [r7, #20]
 8029f16:	f023 0320 	bic.w	r3, r3, #32
 8029f1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8029f1c:	683b      	ldr	r3, [r7, #0]
 8029f1e:	689b      	ldr	r3, [r3, #8]
 8029f20:	011b      	lsls	r3, r3, #4
 8029f22:	697a      	ldr	r2, [r7, #20]
 8029f24:	4313      	orrs	r3, r2
 8029f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8029f28:	687b      	ldr	r3, [r7, #4]
 8029f2a:	4a22      	ldr	r2, [pc, #136]	; (8029fb4 <TIM_OC2_SetConfig+0xe4>)
 8029f2c:	4293      	cmp	r3, r2
 8029f2e:	d003      	beq.n	8029f38 <TIM_OC2_SetConfig+0x68>
 8029f30:	687b      	ldr	r3, [r7, #4]
 8029f32:	4a21      	ldr	r2, [pc, #132]	; (8029fb8 <TIM_OC2_SetConfig+0xe8>)
 8029f34:	4293      	cmp	r3, r2
 8029f36:	d10d      	bne.n	8029f54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8029f38:	697b      	ldr	r3, [r7, #20]
 8029f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8029f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8029f40:	683b      	ldr	r3, [r7, #0]
 8029f42:	68db      	ldr	r3, [r3, #12]
 8029f44:	011b      	lsls	r3, r3, #4
 8029f46:	697a      	ldr	r2, [r7, #20]
 8029f48:	4313      	orrs	r3, r2
 8029f4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8029f4c:	697b      	ldr	r3, [r7, #20]
 8029f4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8029f52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8029f54:	687b      	ldr	r3, [r7, #4]
 8029f56:	4a17      	ldr	r2, [pc, #92]	; (8029fb4 <TIM_OC2_SetConfig+0xe4>)
 8029f58:	4293      	cmp	r3, r2
 8029f5a:	d003      	beq.n	8029f64 <TIM_OC2_SetConfig+0x94>
 8029f5c:	687b      	ldr	r3, [r7, #4]
 8029f5e:	4a16      	ldr	r2, [pc, #88]	; (8029fb8 <TIM_OC2_SetConfig+0xe8>)
 8029f60:	4293      	cmp	r3, r2
 8029f62:	d113      	bne.n	8029f8c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8029f64:	693b      	ldr	r3, [r7, #16]
 8029f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8029f6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8029f6c:	693b      	ldr	r3, [r7, #16]
 8029f6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8029f72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8029f74:	683b      	ldr	r3, [r7, #0]
 8029f76:	695b      	ldr	r3, [r3, #20]
 8029f78:	009b      	lsls	r3, r3, #2
 8029f7a:	693a      	ldr	r2, [r7, #16]
 8029f7c:	4313      	orrs	r3, r2
 8029f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8029f80:	683b      	ldr	r3, [r7, #0]
 8029f82:	699b      	ldr	r3, [r3, #24]
 8029f84:	009b      	lsls	r3, r3, #2
 8029f86:	693a      	ldr	r2, [r7, #16]
 8029f88:	4313      	orrs	r3, r2
 8029f8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8029f8c:	687b      	ldr	r3, [r7, #4]
 8029f8e:	693a      	ldr	r2, [r7, #16]
 8029f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8029f92:	687b      	ldr	r3, [r7, #4]
 8029f94:	68fa      	ldr	r2, [r7, #12]
 8029f96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8029f98:	683b      	ldr	r3, [r7, #0]
 8029f9a:	685a      	ldr	r2, [r3, #4]
 8029f9c:	687b      	ldr	r3, [r7, #4]
 8029f9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8029fa0:	687b      	ldr	r3, [r7, #4]
 8029fa2:	697a      	ldr	r2, [r7, #20]
 8029fa4:	621a      	str	r2, [r3, #32]
}
 8029fa6:	bf00      	nop
 8029fa8:	371c      	adds	r7, #28
 8029faa:	46bd      	mov	sp, r7
 8029fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029fb0:	4770      	bx	lr
 8029fb2:	bf00      	nop
 8029fb4:	40010000 	.word	0x40010000
 8029fb8:	40010400 	.word	0x40010400

08029fbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8029fbc:	b480      	push	{r7}
 8029fbe:	b087      	sub	sp, #28
 8029fc0:	af00      	add	r7, sp, #0
 8029fc2:	6078      	str	r0, [r7, #4]
 8029fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8029fc6:	687b      	ldr	r3, [r7, #4]
 8029fc8:	6a1b      	ldr	r3, [r3, #32]
 8029fca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8029fce:	687b      	ldr	r3, [r7, #4]
 8029fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8029fd2:	687b      	ldr	r3, [r7, #4]
 8029fd4:	6a1b      	ldr	r3, [r3, #32]
 8029fd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8029fd8:	687b      	ldr	r3, [r7, #4]
 8029fda:	685b      	ldr	r3, [r3, #4]
 8029fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8029fde:	687b      	ldr	r3, [r7, #4]
 8029fe0:	69db      	ldr	r3, [r3, #28]
 8029fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8029fe4:	68fb      	ldr	r3, [r7, #12]
 8029fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8029fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8029fec:	68fb      	ldr	r3, [r7, #12]
 8029fee:	f023 0303 	bic.w	r3, r3, #3
 8029ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8029ff4:	683b      	ldr	r3, [r7, #0]
 8029ff6:	681b      	ldr	r3, [r3, #0]
 8029ff8:	68fa      	ldr	r2, [r7, #12]
 8029ffa:	4313      	orrs	r3, r2
 8029ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8029ffe:	697b      	ldr	r3, [r7, #20]
 802a000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 802a004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 802a006:	683b      	ldr	r3, [r7, #0]
 802a008:	689b      	ldr	r3, [r3, #8]
 802a00a:	021b      	lsls	r3, r3, #8
 802a00c:	697a      	ldr	r2, [r7, #20]
 802a00e:	4313      	orrs	r3, r2
 802a010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 802a012:	687b      	ldr	r3, [r7, #4]
 802a014:	4a21      	ldr	r2, [pc, #132]	; (802a09c <TIM_OC3_SetConfig+0xe0>)
 802a016:	4293      	cmp	r3, r2
 802a018:	d003      	beq.n	802a022 <TIM_OC3_SetConfig+0x66>
 802a01a:	687b      	ldr	r3, [r7, #4]
 802a01c:	4a20      	ldr	r2, [pc, #128]	; (802a0a0 <TIM_OC3_SetConfig+0xe4>)
 802a01e:	4293      	cmp	r3, r2
 802a020:	d10d      	bne.n	802a03e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 802a022:	697b      	ldr	r3, [r7, #20]
 802a024:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802a028:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 802a02a:	683b      	ldr	r3, [r7, #0]
 802a02c:	68db      	ldr	r3, [r3, #12]
 802a02e:	021b      	lsls	r3, r3, #8
 802a030:	697a      	ldr	r2, [r7, #20]
 802a032:	4313      	orrs	r3, r2
 802a034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 802a036:	697b      	ldr	r3, [r7, #20]
 802a038:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 802a03c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802a03e:	687b      	ldr	r3, [r7, #4]
 802a040:	4a16      	ldr	r2, [pc, #88]	; (802a09c <TIM_OC3_SetConfig+0xe0>)
 802a042:	4293      	cmp	r3, r2
 802a044:	d003      	beq.n	802a04e <TIM_OC3_SetConfig+0x92>
 802a046:	687b      	ldr	r3, [r7, #4]
 802a048:	4a15      	ldr	r2, [pc, #84]	; (802a0a0 <TIM_OC3_SetConfig+0xe4>)
 802a04a:	4293      	cmp	r3, r2
 802a04c:	d113      	bne.n	802a076 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 802a04e:	693b      	ldr	r3, [r7, #16]
 802a050:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802a054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 802a056:	693b      	ldr	r3, [r7, #16]
 802a058:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802a05c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 802a05e:	683b      	ldr	r3, [r7, #0]
 802a060:	695b      	ldr	r3, [r3, #20]
 802a062:	011b      	lsls	r3, r3, #4
 802a064:	693a      	ldr	r2, [r7, #16]
 802a066:	4313      	orrs	r3, r2
 802a068:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 802a06a:	683b      	ldr	r3, [r7, #0]
 802a06c:	699b      	ldr	r3, [r3, #24]
 802a06e:	011b      	lsls	r3, r3, #4
 802a070:	693a      	ldr	r2, [r7, #16]
 802a072:	4313      	orrs	r3, r2
 802a074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802a076:	687b      	ldr	r3, [r7, #4]
 802a078:	693a      	ldr	r2, [r7, #16]
 802a07a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802a07c:	687b      	ldr	r3, [r7, #4]
 802a07e:	68fa      	ldr	r2, [r7, #12]
 802a080:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 802a082:	683b      	ldr	r3, [r7, #0]
 802a084:	685a      	ldr	r2, [r3, #4]
 802a086:	687b      	ldr	r3, [r7, #4]
 802a088:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802a08a:	687b      	ldr	r3, [r7, #4]
 802a08c:	697a      	ldr	r2, [r7, #20]
 802a08e:	621a      	str	r2, [r3, #32]
}
 802a090:	bf00      	nop
 802a092:	371c      	adds	r7, #28
 802a094:	46bd      	mov	sp, r7
 802a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a09a:	4770      	bx	lr
 802a09c:	40010000 	.word	0x40010000
 802a0a0:	40010400 	.word	0x40010400

0802a0a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802a0a4:	b480      	push	{r7}
 802a0a6:	b087      	sub	sp, #28
 802a0a8:	af00      	add	r7, sp, #0
 802a0aa:	6078      	str	r0, [r7, #4]
 802a0ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 802a0ae:	687b      	ldr	r3, [r7, #4]
 802a0b0:	6a1b      	ldr	r3, [r3, #32]
 802a0b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802a0b6:	687b      	ldr	r3, [r7, #4]
 802a0b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802a0ba:	687b      	ldr	r3, [r7, #4]
 802a0bc:	6a1b      	ldr	r3, [r3, #32]
 802a0be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802a0c0:	687b      	ldr	r3, [r7, #4]
 802a0c2:	685b      	ldr	r3, [r3, #4]
 802a0c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802a0c6:	687b      	ldr	r3, [r7, #4]
 802a0c8:	69db      	ldr	r3, [r3, #28]
 802a0ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 802a0cc:	68fb      	ldr	r3, [r7, #12]
 802a0ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802a0d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 802a0d4:	68fb      	ldr	r3, [r7, #12]
 802a0d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a0da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 802a0dc:	683b      	ldr	r3, [r7, #0]
 802a0de:	681b      	ldr	r3, [r3, #0]
 802a0e0:	021b      	lsls	r3, r3, #8
 802a0e2:	68fa      	ldr	r2, [r7, #12]
 802a0e4:	4313      	orrs	r3, r2
 802a0e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 802a0e8:	693b      	ldr	r3, [r7, #16]
 802a0ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802a0ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 802a0f0:	683b      	ldr	r3, [r7, #0]
 802a0f2:	689b      	ldr	r3, [r3, #8]
 802a0f4:	031b      	lsls	r3, r3, #12
 802a0f6:	693a      	ldr	r2, [r7, #16]
 802a0f8:	4313      	orrs	r3, r2
 802a0fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802a0fc:	687b      	ldr	r3, [r7, #4]
 802a0fe:	4a12      	ldr	r2, [pc, #72]	; (802a148 <TIM_OC4_SetConfig+0xa4>)
 802a100:	4293      	cmp	r3, r2
 802a102:	d003      	beq.n	802a10c <TIM_OC4_SetConfig+0x68>
 802a104:	687b      	ldr	r3, [r7, #4]
 802a106:	4a11      	ldr	r2, [pc, #68]	; (802a14c <TIM_OC4_SetConfig+0xa8>)
 802a108:	4293      	cmp	r3, r2
 802a10a:	d109      	bne.n	802a120 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 802a10c:	697b      	ldr	r3, [r7, #20]
 802a10e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 802a112:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 802a114:	683b      	ldr	r3, [r7, #0]
 802a116:	695b      	ldr	r3, [r3, #20]
 802a118:	019b      	lsls	r3, r3, #6
 802a11a:	697a      	ldr	r2, [r7, #20]
 802a11c:	4313      	orrs	r3, r2
 802a11e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802a120:	687b      	ldr	r3, [r7, #4]
 802a122:	697a      	ldr	r2, [r7, #20]
 802a124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802a126:	687b      	ldr	r3, [r7, #4]
 802a128:	68fa      	ldr	r2, [r7, #12]
 802a12a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 802a12c:	683b      	ldr	r3, [r7, #0]
 802a12e:	685a      	ldr	r2, [r3, #4]
 802a130:	687b      	ldr	r3, [r7, #4]
 802a132:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802a134:	687b      	ldr	r3, [r7, #4]
 802a136:	693a      	ldr	r2, [r7, #16]
 802a138:	621a      	str	r2, [r3, #32]
}
 802a13a:	bf00      	nop
 802a13c:	371c      	adds	r7, #28
 802a13e:	46bd      	mov	sp, r7
 802a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a144:	4770      	bx	lr
 802a146:	bf00      	nop
 802a148:	40010000 	.word	0x40010000
 802a14c:	40010400 	.word	0x40010400

0802a150 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802a150:	b480      	push	{r7}
 802a152:	b087      	sub	sp, #28
 802a154:	af00      	add	r7, sp, #0
 802a156:	60f8      	str	r0, [r7, #12]
 802a158:	60b9      	str	r1, [r7, #8]
 802a15a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 802a15c:	68fb      	ldr	r3, [r7, #12]
 802a15e:	6a1b      	ldr	r3, [r3, #32]
 802a160:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802a162:	68fb      	ldr	r3, [r7, #12]
 802a164:	6a1b      	ldr	r3, [r3, #32]
 802a166:	f023 0201 	bic.w	r2, r3, #1
 802a16a:	68fb      	ldr	r3, [r7, #12]
 802a16c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802a16e:	68fb      	ldr	r3, [r7, #12]
 802a170:	699b      	ldr	r3, [r3, #24]
 802a172:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 802a174:	693b      	ldr	r3, [r7, #16]
 802a176:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802a17a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 802a17c:	687b      	ldr	r3, [r7, #4]
 802a17e:	011b      	lsls	r3, r3, #4
 802a180:	693a      	ldr	r2, [r7, #16]
 802a182:	4313      	orrs	r3, r2
 802a184:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802a186:	697b      	ldr	r3, [r7, #20]
 802a188:	f023 030a 	bic.w	r3, r3, #10
 802a18c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 802a18e:	697a      	ldr	r2, [r7, #20]
 802a190:	68bb      	ldr	r3, [r7, #8]
 802a192:	4313      	orrs	r3, r2
 802a194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 802a196:	68fb      	ldr	r3, [r7, #12]
 802a198:	693a      	ldr	r2, [r7, #16]
 802a19a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802a19c:	68fb      	ldr	r3, [r7, #12]
 802a19e:	697a      	ldr	r2, [r7, #20]
 802a1a0:	621a      	str	r2, [r3, #32]
}
 802a1a2:	bf00      	nop
 802a1a4:	371c      	adds	r7, #28
 802a1a6:	46bd      	mov	sp, r7
 802a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a1ac:	4770      	bx	lr

0802a1ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802a1ae:	b480      	push	{r7}
 802a1b0:	b087      	sub	sp, #28
 802a1b2:	af00      	add	r7, sp, #0
 802a1b4:	60f8      	str	r0, [r7, #12]
 802a1b6:	60b9      	str	r1, [r7, #8]
 802a1b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802a1ba:	68fb      	ldr	r3, [r7, #12]
 802a1bc:	6a1b      	ldr	r3, [r3, #32]
 802a1be:	f023 0210 	bic.w	r2, r3, #16
 802a1c2:	68fb      	ldr	r3, [r7, #12]
 802a1c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802a1c6:	68fb      	ldr	r3, [r7, #12]
 802a1c8:	699b      	ldr	r3, [r3, #24]
 802a1ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802a1cc:	68fb      	ldr	r3, [r7, #12]
 802a1ce:	6a1b      	ldr	r3, [r3, #32]
 802a1d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 802a1d2:	697b      	ldr	r3, [r7, #20]
 802a1d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802a1d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 802a1da:	687b      	ldr	r3, [r7, #4]
 802a1dc:	031b      	lsls	r3, r3, #12
 802a1de:	697a      	ldr	r2, [r7, #20]
 802a1e0:	4313      	orrs	r3, r2
 802a1e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 802a1e4:	693b      	ldr	r3, [r7, #16]
 802a1e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 802a1ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 802a1ec:	68bb      	ldr	r3, [r7, #8]
 802a1ee:	011b      	lsls	r3, r3, #4
 802a1f0:	693a      	ldr	r2, [r7, #16]
 802a1f2:	4313      	orrs	r3, r2
 802a1f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 802a1f6:	68fb      	ldr	r3, [r7, #12]
 802a1f8:	697a      	ldr	r2, [r7, #20]
 802a1fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802a1fc:	68fb      	ldr	r3, [r7, #12]
 802a1fe:	693a      	ldr	r2, [r7, #16]
 802a200:	621a      	str	r2, [r3, #32]
}
 802a202:	bf00      	nop
 802a204:	371c      	adds	r7, #28
 802a206:	46bd      	mov	sp, r7
 802a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a20c:	4770      	bx	lr

0802a20e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 802a20e:	b480      	push	{r7}
 802a210:	b085      	sub	sp, #20
 802a212:	af00      	add	r7, sp, #0
 802a214:	6078      	str	r0, [r7, #4]
 802a216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 802a218:	687b      	ldr	r3, [r7, #4]
 802a21a:	689b      	ldr	r3, [r3, #8]
 802a21c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 802a21e:	68fb      	ldr	r3, [r7, #12]
 802a220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 802a226:	683a      	ldr	r2, [r7, #0]
 802a228:	68fb      	ldr	r3, [r7, #12]
 802a22a:	4313      	orrs	r3, r2
 802a22c:	f043 0307 	orr.w	r3, r3, #7
 802a230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802a232:	687b      	ldr	r3, [r7, #4]
 802a234:	68fa      	ldr	r2, [r7, #12]
 802a236:	609a      	str	r2, [r3, #8]
}
 802a238:	bf00      	nop
 802a23a:	3714      	adds	r7, #20
 802a23c:	46bd      	mov	sp, r7
 802a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a242:	4770      	bx	lr

0802a244 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 802a244:	b480      	push	{r7}
 802a246:	b087      	sub	sp, #28
 802a248:	af00      	add	r7, sp, #0
 802a24a:	60f8      	str	r0, [r7, #12]
 802a24c:	60b9      	str	r1, [r7, #8]
 802a24e:	607a      	str	r2, [r7, #4]
 802a250:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 802a252:	68fb      	ldr	r3, [r7, #12]
 802a254:	689b      	ldr	r3, [r3, #8]
 802a256:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802a258:	697b      	ldr	r3, [r7, #20]
 802a25a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802a25e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 802a260:	683b      	ldr	r3, [r7, #0]
 802a262:	021a      	lsls	r2, r3, #8
 802a264:	687b      	ldr	r3, [r7, #4]
 802a266:	431a      	orrs	r2, r3
 802a268:	68bb      	ldr	r3, [r7, #8]
 802a26a:	4313      	orrs	r3, r2
 802a26c:	697a      	ldr	r2, [r7, #20]
 802a26e:	4313      	orrs	r3, r2
 802a270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802a272:	68fb      	ldr	r3, [r7, #12]
 802a274:	697a      	ldr	r2, [r7, #20]
 802a276:	609a      	str	r2, [r3, #8]
}
 802a278:	bf00      	nop
 802a27a:	371c      	adds	r7, #28
 802a27c:	46bd      	mov	sp, r7
 802a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a282:	4770      	bx	lr

0802a284 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 802a284:	b480      	push	{r7}
 802a286:	b087      	sub	sp, #28
 802a288:	af00      	add	r7, sp, #0
 802a28a:	60f8      	str	r0, [r7, #12]
 802a28c:	60b9      	str	r1, [r7, #8]
 802a28e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 802a290:	68bb      	ldr	r3, [r7, #8]
 802a292:	f003 031f 	and.w	r3, r3, #31
 802a296:	2201      	movs	r2, #1
 802a298:	fa02 f303 	lsl.w	r3, r2, r3
 802a29c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 802a29e:	68fb      	ldr	r3, [r7, #12]
 802a2a0:	6a1a      	ldr	r2, [r3, #32]
 802a2a2:	697b      	ldr	r3, [r7, #20]
 802a2a4:	43db      	mvns	r3, r3
 802a2a6:	401a      	ands	r2, r3
 802a2a8:	68fb      	ldr	r3, [r7, #12]
 802a2aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 802a2ac:	68fb      	ldr	r3, [r7, #12]
 802a2ae:	6a1a      	ldr	r2, [r3, #32]
 802a2b0:	68bb      	ldr	r3, [r7, #8]
 802a2b2:	f003 031f 	and.w	r3, r3, #31
 802a2b6:	6879      	ldr	r1, [r7, #4]
 802a2b8:	fa01 f303 	lsl.w	r3, r1, r3
 802a2bc:	431a      	orrs	r2, r3
 802a2be:	68fb      	ldr	r3, [r7, #12]
 802a2c0:	621a      	str	r2, [r3, #32]
}
 802a2c2:	bf00      	nop
 802a2c4:	371c      	adds	r7, #28
 802a2c6:	46bd      	mov	sp, r7
 802a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a2cc:	4770      	bx	lr
	...

0802a2d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 802a2d0:	b480      	push	{r7}
 802a2d2:	b085      	sub	sp, #20
 802a2d4:	af00      	add	r7, sp, #0
 802a2d6:	6078      	str	r0, [r7, #4]
 802a2d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 802a2da:	687b      	ldr	r3, [r7, #4]
 802a2dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802a2e0:	2b01      	cmp	r3, #1
 802a2e2:	d101      	bne.n	802a2e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 802a2e4:	2302      	movs	r3, #2
 802a2e6:	e05a      	b.n	802a39e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 802a2e8:	687b      	ldr	r3, [r7, #4]
 802a2ea:	2201      	movs	r2, #1
 802a2ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 802a2f0:	687b      	ldr	r3, [r7, #4]
 802a2f2:	2202      	movs	r2, #2
 802a2f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 802a2f8:	687b      	ldr	r3, [r7, #4]
 802a2fa:	681b      	ldr	r3, [r3, #0]
 802a2fc:	685b      	ldr	r3, [r3, #4]
 802a2fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802a300:	687b      	ldr	r3, [r7, #4]
 802a302:	681b      	ldr	r3, [r3, #0]
 802a304:	689b      	ldr	r3, [r3, #8]
 802a306:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 802a308:	68fb      	ldr	r3, [r7, #12]
 802a30a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a30e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 802a310:	683b      	ldr	r3, [r7, #0]
 802a312:	681b      	ldr	r3, [r3, #0]
 802a314:	68fa      	ldr	r2, [r7, #12]
 802a316:	4313      	orrs	r3, r2
 802a318:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802a31a:	687b      	ldr	r3, [r7, #4]
 802a31c:	681b      	ldr	r3, [r3, #0]
 802a31e:	68fa      	ldr	r2, [r7, #12]
 802a320:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802a322:	687b      	ldr	r3, [r7, #4]
 802a324:	681b      	ldr	r3, [r3, #0]
 802a326:	4a21      	ldr	r2, [pc, #132]	; (802a3ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 802a328:	4293      	cmp	r3, r2
 802a32a:	d022      	beq.n	802a372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a32c:	687b      	ldr	r3, [r7, #4]
 802a32e:	681b      	ldr	r3, [r3, #0]
 802a330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802a334:	d01d      	beq.n	802a372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a336:	687b      	ldr	r3, [r7, #4]
 802a338:	681b      	ldr	r3, [r3, #0]
 802a33a:	4a1d      	ldr	r2, [pc, #116]	; (802a3b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 802a33c:	4293      	cmp	r3, r2
 802a33e:	d018      	beq.n	802a372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a340:	687b      	ldr	r3, [r7, #4]
 802a342:	681b      	ldr	r3, [r3, #0]
 802a344:	4a1b      	ldr	r2, [pc, #108]	; (802a3b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 802a346:	4293      	cmp	r3, r2
 802a348:	d013      	beq.n	802a372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a34a:	687b      	ldr	r3, [r7, #4]
 802a34c:	681b      	ldr	r3, [r3, #0]
 802a34e:	4a1a      	ldr	r2, [pc, #104]	; (802a3b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 802a350:	4293      	cmp	r3, r2
 802a352:	d00e      	beq.n	802a372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a354:	687b      	ldr	r3, [r7, #4]
 802a356:	681b      	ldr	r3, [r3, #0]
 802a358:	4a18      	ldr	r2, [pc, #96]	; (802a3bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 802a35a:	4293      	cmp	r3, r2
 802a35c:	d009      	beq.n	802a372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a35e:	687b      	ldr	r3, [r7, #4]
 802a360:	681b      	ldr	r3, [r3, #0]
 802a362:	4a17      	ldr	r2, [pc, #92]	; (802a3c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 802a364:	4293      	cmp	r3, r2
 802a366:	d004      	beq.n	802a372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a368:	687b      	ldr	r3, [r7, #4]
 802a36a:	681b      	ldr	r3, [r3, #0]
 802a36c:	4a15      	ldr	r2, [pc, #84]	; (802a3c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 802a36e:	4293      	cmp	r3, r2
 802a370:	d10c      	bne.n	802a38c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 802a372:	68bb      	ldr	r3, [r7, #8]
 802a374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802a378:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802a37a:	683b      	ldr	r3, [r7, #0]
 802a37c:	685b      	ldr	r3, [r3, #4]
 802a37e:	68ba      	ldr	r2, [r7, #8]
 802a380:	4313      	orrs	r3, r2
 802a382:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 802a384:	687b      	ldr	r3, [r7, #4]
 802a386:	681b      	ldr	r3, [r3, #0]
 802a388:	68ba      	ldr	r2, [r7, #8]
 802a38a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802a38c:	687b      	ldr	r3, [r7, #4]
 802a38e:	2201      	movs	r2, #1
 802a390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802a394:	687b      	ldr	r3, [r7, #4]
 802a396:	2200      	movs	r2, #0
 802a398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802a39c:	2300      	movs	r3, #0
}
 802a39e:	4618      	mov	r0, r3
 802a3a0:	3714      	adds	r7, #20
 802a3a2:	46bd      	mov	sp, r7
 802a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a3a8:	4770      	bx	lr
 802a3aa:	bf00      	nop
 802a3ac:	40010000 	.word	0x40010000
 802a3b0:	40000400 	.word	0x40000400
 802a3b4:	40000800 	.word	0x40000800
 802a3b8:	40000c00 	.word	0x40000c00
 802a3bc:	40010400 	.word	0x40010400
 802a3c0:	40014000 	.word	0x40014000
 802a3c4:	40001800 	.word	0x40001800

0802a3c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 802a3c8:	b480      	push	{r7}
 802a3ca:	b085      	sub	sp, #20
 802a3cc:	af00      	add	r7, sp, #0
 802a3ce:	6078      	str	r0, [r7, #4]
 802a3d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 802a3d2:	2300      	movs	r3, #0
 802a3d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 802a3d6:	687b      	ldr	r3, [r7, #4]
 802a3d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802a3dc:	2b01      	cmp	r3, #1
 802a3de:	d101      	bne.n	802a3e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 802a3e0:	2302      	movs	r3, #2
 802a3e2:	e03d      	b.n	802a460 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 802a3e4:	687b      	ldr	r3, [r7, #4]
 802a3e6:	2201      	movs	r2, #1
 802a3e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 802a3ec:	68fb      	ldr	r3, [r7, #12]
 802a3ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 802a3f2:	683b      	ldr	r3, [r7, #0]
 802a3f4:	68db      	ldr	r3, [r3, #12]
 802a3f6:	4313      	orrs	r3, r2
 802a3f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 802a3fa:	68fb      	ldr	r3, [r7, #12]
 802a3fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 802a400:	683b      	ldr	r3, [r7, #0]
 802a402:	689b      	ldr	r3, [r3, #8]
 802a404:	4313      	orrs	r3, r2
 802a406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 802a408:	68fb      	ldr	r3, [r7, #12]
 802a40a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 802a40e:	683b      	ldr	r3, [r7, #0]
 802a410:	685b      	ldr	r3, [r3, #4]
 802a412:	4313      	orrs	r3, r2
 802a414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 802a416:	68fb      	ldr	r3, [r7, #12]
 802a418:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 802a41c:	683b      	ldr	r3, [r7, #0]
 802a41e:	681b      	ldr	r3, [r3, #0]
 802a420:	4313      	orrs	r3, r2
 802a422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 802a424:	68fb      	ldr	r3, [r7, #12]
 802a426:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802a42a:	683b      	ldr	r3, [r7, #0]
 802a42c:	691b      	ldr	r3, [r3, #16]
 802a42e:	4313      	orrs	r3, r2
 802a430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 802a432:	68fb      	ldr	r3, [r7, #12]
 802a434:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 802a438:	683b      	ldr	r3, [r7, #0]
 802a43a:	695b      	ldr	r3, [r3, #20]
 802a43c:	4313      	orrs	r3, r2
 802a43e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 802a440:	68fb      	ldr	r3, [r7, #12]
 802a442:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 802a446:	683b      	ldr	r3, [r7, #0]
 802a448:	69db      	ldr	r3, [r3, #28]
 802a44a:	4313      	orrs	r3, r2
 802a44c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 802a44e:	687b      	ldr	r3, [r7, #4]
 802a450:	681b      	ldr	r3, [r3, #0]
 802a452:	68fa      	ldr	r2, [r7, #12]
 802a454:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 802a456:	687b      	ldr	r3, [r7, #4]
 802a458:	2200      	movs	r2, #0
 802a45a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802a45e:	2300      	movs	r3, #0
}
 802a460:	4618      	mov	r0, r3
 802a462:	3714      	adds	r7, #20
 802a464:	46bd      	mov	sp, r7
 802a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a46a:	4770      	bx	lr

0802a46c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 802a46c:	b480      	push	{r7}
 802a46e:	b083      	sub	sp, #12
 802a470:	af00      	add	r7, sp, #0
 802a472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 802a474:	bf00      	nop
 802a476:	370c      	adds	r7, #12
 802a478:	46bd      	mov	sp, r7
 802a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a47e:	4770      	bx	lr

0802a480 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 802a480:	b480      	push	{r7}
 802a482:	b083      	sub	sp, #12
 802a484:	af00      	add	r7, sp, #0
 802a486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 802a488:	bf00      	nop
 802a48a:	370c      	adds	r7, #12
 802a48c:	46bd      	mov	sp, r7
 802a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a492:	4770      	bx	lr

0802a494 <__cxa_guard_acquire>:
 802a494:	6803      	ldr	r3, [r0, #0]
 802a496:	07db      	lsls	r3, r3, #31
 802a498:	d406      	bmi.n	802a4a8 <__cxa_guard_acquire+0x14>
 802a49a:	7843      	ldrb	r3, [r0, #1]
 802a49c:	b103      	cbz	r3, 802a4a0 <__cxa_guard_acquire+0xc>
 802a49e:	deff      	udf	#255	; 0xff
 802a4a0:	2301      	movs	r3, #1
 802a4a2:	7043      	strb	r3, [r0, #1]
 802a4a4:	4618      	mov	r0, r3
 802a4a6:	4770      	bx	lr
 802a4a8:	2000      	movs	r0, #0
 802a4aa:	4770      	bx	lr

0802a4ac <__cxa_guard_release>:
 802a4ac:	2301      	movs	r3, #1
 802a4ae:	6003      	str	r3, [r0, #0]
 802a4b0:	4770      	bx	lr
	...

0802a4b4 <__libc_init_array>:
 802a4b4:	b570      	push	{r4, r5, r6, lr}
 802a4b6:	4e0d      	ldr	r6, [pc, #52]	; (802a4ec <__libc_init_array+0x38>)
 802a4b8:	4c0d      	ldr	r4, [pc, #52]	; (802a4f0 <__libc_init_array+0x3c>)
 802a4ba:	1ba4      	subs	r4, r4, r6
 802a4bc:	10a4      	asrs	r4, r4, #2
 802a4be:	2500      	movs	r5, #0
 802a4c0:	42a5      	cmp	r5, r4
 802a4c2:	d109      	bne.n	802a4d8 <__libc_init_array+0x24>
 802a4c4:	4e0b      	ldr	r6, [pc, #44]	; (802a4f4 <__libc_init_array+0x40>)
 802a4c6:	4c0c      	ldr	r4, [pc, #48]	; (802a4f8 <__libc_init_array+0x44>)
 802a4c8:	f000 f82c 	bl	802a524 <_init>
 802a4cc:	1ba4      	subs	r4, r4, r6
 802a4ce:	10a4      	asrs	r4, r4, #2
 802a4d0:	2500      	movs	r5, #0
 802a4d2:	42a5      	cmp	r5, r4
 802a4d4:	d105      	bne.n	802a4e2 <__libc_init_array+0x2e>
 802a4d6:	bd70      	pop	{r4, r5, r6, pc}
 802a4d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802a4dc:	4798      	blx	r3
 802a4de:	3501      	adds	r5, #1
 802a4e0:	e7ee      	b.n	802a4c0 <__libc_init_array+0xc>
 802a4e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802a4e6:	4798      	blx	r3
 802a4e8:	3501      	adds	r5, #1
 802a4ea:	e7f2      	b.n	802a4d2 <__libc_init_array+0x1e>
 802a4ec:	0802a564 	.word	0x0802a564
 802a4f0:	0802a564 	.word	0x0802a564
 802a4f4:	0802a564 	.word	0x0802a564
 802a4f8:	0802a56c 	.word	0x0802a56c

0802a4fc <memcpy>:
 802a4fc:	b510      	push	{r4, lr}
 802a4fe:	1e43      	subs	r3, r0, #1
 802a500:	440a      	add	r2, r1
 802a502:	4291      	cmp	r1, r2
 802a504:	d100      	bne.n	802a508 <memcpy+0xc>
 802a506:	bd10      	pop	{r4, pc}
 802a508:	f811 4b01 	ldrb.w	r4, [r1], #1
 802a50c:	f803 4f01 	strb.w	r4, [r3, #1]!
 802a510:	e7f7      	b.n	802a502 <memcpy+0x6>

0802a512 <memset>:
 802a512:	4402      	add	r2, r0
 802a514:	4603      	mov	r3, r0
 802a516:	4293      	cmp	r3, r2
 802a518:	d100      	bne.n	802a51c <memset+0xa>
 802a51a:	4770      	bx	lr
 802a51c:	f803 1b01 	strb.w	r1, [r3], #1
 802a520:	e7f9      	b.n	802a516 <memset+0x4>
	...

0802a524 <_init>:
 802a524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a526:	bf00      	nop
 802a528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a52a:	bc08      	pop	{r3}
 802a52c:	469e      	mov	lr, r3
 802a52e:	4770      	bx	lr

0802a530 <_fini>:
 802a530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a532:	bf00      	nop
 802a534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802a536:	bc08      	pop	{r3}
 802a538:	469e      	mov	lr, r3
 802a53a:	4770      	bx	lr
