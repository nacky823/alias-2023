
alias2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a48  08020000  08020000  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  08029a48  08029a48  00029a48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029d08  08029d08  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08029d08  08029d08  00029d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029d10  08029d10  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08029d10  08029d10  00029d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029d18  08029d18  00029d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08029d1c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011694  200001e0  08029ef8  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20011874  08029ef8  00031874  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002aac1  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004886  00000000  00000000  0005accd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001628  00000000  00000000  0005f558  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001458  00000000  00000000  00060b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026360  00000000  00000000  00061fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001586e  00000000  00000000  00088338  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cd849  00000000  00000000  0009dba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016b3ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000689c  00000000  00000000  0016b46c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08020000 <__do_global_dtors_aux>:
 8020000:	b510      	push	{r4, lr}
 8020002:	4c05      	ldr	r4, [pc, #20]	; (8020018 <__do_global_dtors_aux+0x18>)
 8020004:	7823      	ldrb	r3, [r4, #0]
 8020006:	b933      	cbnz	r3, 8020016 <__do_global_dtors_aux+0x16>
 8020008:	4b04      	ldr	r3, [pc, #16]	; (802001c <__do_global_dtors_aux+0x1c>)
 802000a:	b113      	cbz	r3, 8020012 <__do_global_dtors_aux+0x12>
 802000c:	4804      	ldr	r0, [pc, #16]	; (8020020 <__do_global_dtors_aux+0x20>)
 802000e:	f3af 8000 	nop.w
 8020012:	2301      	movs	r3, #1
 8020014:	7023      	strb	r3, [r4, #0]
 8020016:	bd10      	pop	{r4, pc}
 8020018:	200001e0 	.word	0x200001e0
 802001c:	00000000 	.word	0x00000000
 8020020:	08029a30 	.word	0x08029a30

08020024 <frame_dummy>:
 8020024:	b508      	push	{r3, lr}
 8020026:	4b03      	ldr	r3, [pc, #12]	; (8020034 <frame_dummy+0x10>)
 8020028:	b11b      	cbz	r3, 8020032 <frame_dummy+0xe>
 802002a:	4903      	ldr	r1, [pc, #12]	; (8020038 <frame_dummy+0x14>)
 802002c:	4803      	ldr	r0, [pc, #12]	; (802003c <frame_dummy+0x18>)
 802002e:	f3af 8000 	nop.w
 8020032:	bd08      	pop	{r3, pc}
 8020034:	00000000 	.word	0x00000000
 8020038:	200001e4 	.word	0x200001e4
 802003c:	08029a30 	.word	0x08029a30

08020040 <strlen>:
 8020040:	4603      	mov	r3, r0
 8020042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020046:	2a00      	cmp	r2, #0
 8020048:	d1fb      	bne.n	8020042 <strlen+0x2>
 802004a:	1a18      	subs	r0, r3, r0
 802004c:	3801      	subs	r0, #1
 802004e:	4770      	bx	lr

08020050 <__aeabi_drsub>:
 8020050:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8020054:	e002      	b.n	802005c <__adddf3>
 8020056:	bf00      	nop

08020058 <__aeabi_dsub>:
 8020058:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0802005c <__adddf3>:
 802005c:	b530      	push	{r4, r5, lr}
 802005e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8020062:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8020066:	ea94 0f05 	teq	r4, r5
 802006a:	bf08      	it	eq
 802006c:	ea90 0f02 	teqeq	r0, r2
 8020070:	bf1f      	itttt	ne
 8020072:	ea54 0c00 	orrsne.w	ip, r4, r0
 8020076:	ea55 0c02 	orrsne.w	ip, r5, r2
 802007a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 802007e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020082:	f000 80e2 	beq.w	802024a <__adddf3+0x1ee>
 8020086:	ea4f 5454 	mov.w	r4, r4, lsr #21
 802008a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 802008e:	bfb8      	it	lt
 8020090:	426d      	neglt	r5, r5
 8020092:	dd0c      	ble.n	80200ae <__adddf3+0x52>
 8020094:	442c      	add	r4, r5
 8020096:	ea80 0202 	eor.w	r2, r0, r2
 802009a:	ea81 0303 	eor.w	r3, r1, r3
 802009e:	ea82 0000 	eor.w	r0, r2, r0
 80200a2:	ea83 0101 	eor.w	r1, r3, r1
 80200a6:	ea80 0202 	eor.w	r2, r0, r2
 80200aa:	ea81 0303 	eor.w	r3, r1, r3
 80200ae:	2d36      	cmp	r5, #54	; 0x36
 80200b0:	bf88      	it	hi
 80200b2:	bd30      	pophi	{r4, r5, pc}
 80200b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80200b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80200bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80200c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80200c4:	d002      	beq.n	80200cc <__adddf3+0x70>
 80200c6:	4240      	negs	r0, r0
 80200c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80200cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80200d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80200d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80200d8:	d002      	beq.n	80200e0 <__adddf3+0x84>
 80200da:	4252      	negs	r2, r2
 80200dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80200e0:	ea94 0f05 	teq	r4, r5
 80200e4:	f000 80a7 	beq.w	8020236 <__adddf3+0x1da>
 80200e8:	f1a4 0401 	sub.w	r4, r4, #1
 80200ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80200f0:	db0d      	blt.n	802010e <__adddf3+0xb2>
 80200f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80200f6:	fa22 f205 	lsr.w	r2, r2, r5
 80200fa:	1880      	adds	r0, r0, r2
 80200fc:	f141 0100 	adc.w	r1, r1, #0
 8020100:	fa03 f20e 	lsl.w	r2, r3, lr
 8020104:	1880      	adds	r0, r0, r2
 8020106:	fa43 f305 	asr.w	r3, r3, r5
 802010a:	4159      	adcs	r1, r3
 802010c:	e00e      	b.n	802012c <__adddf3+0xd0>
 802010e:	f1a5 0520 	sub.w	r5, r5, #32
 8020112:	f10e 0e20 	add.w	lr, lr, #32
 8020116:	2a01      	cmp	r2, #1
 8020118:	fa03 fc0e 	lsl.w	ip, r3, lr
 802011c:	bf28      	it	cs
 802011e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020122:	fa43 f305 	asr.w	r3, r3, r5
 8020126:	18c0      	adds	r0, r0, r3
 8020128:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802012c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020130:	d507      	bpl.n	8020142 <__adddf3+0xe6>
 8020132:	f04f 0e00 	mov.w	lr, #0
 8020136:	f1dc 0c00 	rsbs	ip, ip, #0
 802013a:	eb7e 0000 	sbcs.w	r0, lr, r0
 802013e:	eb6e 0101 	sbc.w	r1, lr, r1
 8020142:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8020146:	d31b      	bcc.n	8020180 <__adddf3+0x124>
 8020148:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 802014c:	d30c      	bcc.n	8020168 <__adddf3+0x10c>
 802014e:	0849      	lsrs	r1, r1, #1
 8020150:	ea5f 0030 	movs.w	r0, r0, rrx
 8020154:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8020158:	f104 0401 	add.w	r4, r4, #1
 802015c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8020160:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8020164:	f080 809a 	bcs.w	802029c <__adddf3+0x240>
 8020168:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802016c:	bf08      	it	eq
 802016e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020172:	f150 0000 	adcs.w	r0, r0, #0
 8020176:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802017a:	ea41 0105 	orr.w	r1, r1, r5
 802017e:	bd30      	pop	{r4, r5, pc}
 8020180:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8020184:	4140      	adcs	r0, r0
 8020186:	eb41 0101 	adc.w	r1, r1, r1
 802018a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 802018e:	f1a4 0401 	sub.w	r4, r4, #1
 8020192:	d1e9      	bne.n	8020168 <__adddf3+0x10c>
 8020194:	f091 0f00 	teq	r1, #0
 8020198:	bf04      	itt	eq
 802019a:	4601      	moveq	r1, r0
 802019c:	2000      	moveq	r0, #0
 802019e:	fab1 f381 	clz	r3, r1
 80201a2:	bf08      	it	eq
 80201a4:	3320      	addeq	r3, #32
 80201a6:	f1a3 030b 	sub.w	r3, r3, #11
 80201aa:	f1b3 0220 	subs.w	r2, r3, #32
 80201ae:	da0c      	bge.n	80201ca <__adddf3+0x16e>
 80201b0:	320c      	adds	r2, #12
 80201b2:	dd08      	ble.n	80201c6 <__adddf3+0x16a>
 80201b4:	f102 0c14 	add.w	ip, r2, #20
 80201b8:	f1c2 020c 	rsb	r2, r2, #12
 80201bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80201c0:	fa21 f102 	lsr.w	r1, r1, r2
 80201c4:	e00c      	b.n	80201e0 <__adddf3+0x184>
 80201c6:	f102 0214 	add.w	r2, r2, #20
 80201ca:	bfd8      	it	le
 80201cc:	f1c2 0c20 	rsble	ip, r2, #32
 80201d0:	fa01 f102 	lsl.w	r1, r1, r2
 80201d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80201d8:	bfdc      	itt	le
 80201da:	ea41 010c 	orrle.w	r1, r1, ip
 80201de:	4090      	lslle	r0, r2
 80201e0:	1ae4      	subs	r4, r4, r3
 80201e2:	bfa2      	ittt	ge
 80201e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80201e8:	4329      	orrge	r1, r5
 80201ea:	bd30      	popge	{r4, r5, pc}
 80201ec:	ea6f 0404 	mvn.w	r4, r4
 80201f0:	3c1f      	subs	r4, #31
 80201f2:	da1c      	bge.n	802022e <__adddf3+0x1d2>
 80201f4:	340c      	adds	r4, #12
 80201f6:	dc0e      	bgt.n	8020216 <__adddf3+0x1ba>
 80201f8:	f104 0414 	add.w	r4, r4, #20
 80201fc:	f1c4 0220 	rsb	r2, r4, #32
 8020200:	fa20 f004 	lsr.w	r0, r0, r4
 8020204:	fa01 f302 	lsl.w	r3, r1, r2
 8020208:	ea40 0003 	orr.w	r0, r0, r3
 802020c:	fa21 f304 	lsr.w	r3, r1, r4
 8020210:	ea45 0103 	orr.w	r1, r5, r3
 8020214:	bd30      	pop	{r4, r5, pc}
 8020216:	f1c4 040c 	rsb	r4, r4, #12
 802021a:	f1c4 0220 	rsb	r2, r4, #32
 802021e:	fa20 f002 	lsr.w	r0, r0, r2
 8020222:	fa01 f304 	lsl.w	r3, r1, r4
 8020226:	ea40 0003 	orr.w	r0, r0, r3
 802022a:	4629      	mov	r1, r5
 802022c:	bd30      	pop	{r4, r5, pc}
 802022e:	fa21 f004 	lsr.w	r0, r1, r4
 8020232:	4629      	mov	r1, r5
 8020234:	bd30      	pop	{r4, r5, pc}
 8020236:	f094 0f00 	teq	r4, #0
 802023a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 802023e:	bf06      	itte	eq
 8020240:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8020244:	3401      	addeq	r4, #1
 8020246:	3d01      	subne	r5, #1
 8020248:	e74e      	b.n	80200e8 <__adddf3+0x8c>
 802024a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802024e:	bf18      	it	ne
 8020250:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020254:	d029      	beq.n	80202aa <__adddf3+0x24e>
 8020256:	ea94 0f05 	teq	r4, r5
 802025a:	bf08      	it	eq
 802025c:	ea90 0f02 	teqeq	r0, r2
 8020260:	d005      	beq.n	802026e <__adddf3+0x212>
 8020262:	ea54 0c00 	orrs.w	ip, r4, r0
 8020266:	bf04      	itt	eq
 8020268:	4619      	moveq	r1, r3
 802026a:	4610      	moveq	r0, r2
 802026c:	bd30      	pop	{r4, r5, pc}
 802026e:	ea91 0f03 	teq	r1, r3
 8020272:	bf1e      	ittt	ne
 8020274:	2100      	movne	r1, #0
 8020276:	2000      	movne	r0, #0
 8020278:	bd30      	popne	{r4, r5, pc}
 802027a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 802027e:	d105      	bne.n	802028c <__adddf3+0x230>
 8020280:	0040      	lsls	r0, r0, #1
 8020282:	4149      	adcs	r1, r1
 8020284:	bf28      	it	cs
 8020286:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 802028a:	bd30      	pop	{r4, r5, pc}
 802028c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8020290:	bf3c      	itt	cc
 8020292:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8020296:	bd30      	popcc	{r4, r5, pc}
 8020298:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 802029c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80202a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80202a4:	f04f 0000 	mov.w	r0, #0
 80202a8:	bd30      	pop	{r4, r5, pc}
 80202aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80202ae:	bf1a      	itte	ne
 80202b0:	4619      	movne	r1, r3
 80202b2:	4610      	movne	r0, r2
 80202b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80202b8:	bf1c      	itt	ne
 80202ba:	460b      	movne	r3, r1
 80202bc:	4602      	movne	r2, r0
 80202be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80202c2:	bf06      	itte	eq
 80202c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80202c8:	ea91 0f03 	teqeq	r1, r3
 80202cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80202d0:	bd30      	pop	{r4, r5, pc}
 80202d2:	bf00      	nop

080202d4 <__aeabi_ui2d>:
 80202d4:	f090 0f00 	teq	r0, #0
 80202d8:	bf04      	itt	eq
 80202da:	2100      	moveq	r1, #0
 80202dc:	4770      	bxeq	lr
 80202de:	b530      	push	{r4, r5, lr}
 80202e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80202e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80202e8:	f04f 0500 	mov.w	r5, #0
 80202ec:	f04f 0100 	mov.w	r1, #0
 80202f0:	e750      	b.n	8020194 <__adddf3+0x138>
 80202f2:	bf00      	nop

080202f4 <__aeabi_i2d>:
 80202f4:	f090 0f00 	teq	r0, #0
 80202f8:	bf04      	itt	eq
 80202fa:	2100      	moveq	r1, #0
 80202fc:	4770      	bxeq	lr
 80202fe:	b530      	push	{r4, r5, lr}
 8020300:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020304:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020308:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 802030c:	bf48      	it	mi
 802030e:	4240      	negmi	r0, r0
 8020310:	f04f 0100 	mov.w	r1, #0
 8020314:	e73e      	b.n	8020194 <__adddf3+0x138>
 8020316:	bf00      	nop

08020318 <__aeabi_f2d>:
 8020318:	0042      	lsls	r2, r0, #1
 802031a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802031e:	ea4f 0131 	mov.w	r1, r1, rrx
 8020322:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020326:	bf1f      	itttt	ne
 8020328:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 802032c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8020330:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8020334:	4770      	bxne	lr
 8020336:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 802033a:	bf08      	it	eq
 802033c:	4770      	bxeq	lr
 802033e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8020342:	bf04      	itt	eq
 8020344:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8020348:	4770      	bxeq	lr
 802034a:	b530      	push	{r4, r5, lr}
 802034c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8020350:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020354:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020358:	e71c      	b.n	8020194 <__adddf3+0x138>
 802035a:	bf00      	nop

0802035c <__aeabi_ul2d>:
 802035c:	ea50 0201 	orrs.w	r2, r0, r1
 8020360:	bf08      	it	eq
 8020362:	4770      	bxeq	lr
 8020364:	b530      	push	{r4, r5, lr}
 8020366:	f04f 0500 	mov.w	r5, #0
 802036a:	e00a      	b.n	8020382 <__aeabi_l2d+0x16>

0802036c <__aeabi_l2d>:
 802036c:	ea50 0201 	orrs.w	r2, r0, r1
 8020370:	bf08      	it	eq
 8020372:	4770      	bxeq	lr
 8020374:	b530      	push	{r4, r5, lr}
 8020376:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 802037a:	d502      	bpl.n	8020382 <__aeabi_l2d+0x16>
 802037c:	4240      	negs	r0, r0
 802037e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020382:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020386:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802038a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 802038e:	f43f aed8 	beq.w	8020142 <__adddf3+0xe6>
 8020392:	f04f 0203 	mov.w	r2, #3
 8020396:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802039a:	bf18      	it	ne
 802039c:	3203      	addne	r2, #3
 802039e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80203a2:	bf18      	it	ne
 80203a4:	3203      	addne	r2, #3
 80203a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80203aa:	f1c2 0320 	rsb	r3, r2, #32
 80203ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80203b2:	fa20 f002 	lsr.w	r0, r0, r2
 80203b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80203ba:	ea40 000e 	orr.w	r0, r0, lr
 80203be:	fa21 f102 	lsr.w	r1, r1, r2
 80203c2:	4414      	add	r4, r2
 80203c4:	e6bd      	b.n	8020142 <__adddf3+0xe6>
 80203c6:	bf00      	nop

080203c8 <__aeabi_dmul>:
 80203c8:	b570      	push	{r4, r5, r6, lr}
 80203ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80203ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80203d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80203d6:	bf1d      	ittte	ne
 80203d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80203dc:	ea94 0f0c 	teqne	r4, ip
 80203e0:	ea95 0f0c 	teqne	r5, ip
 80203e4:	f000 f8de 	bleq	80205a4 <__aeabi_dmul+0x1dc>
 80203e8:	442c      	add	r4, r5
 80203ea:	ea81 0603 	eor.w	r6, r1, r3
 80203ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80203f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80203f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80203fa:	bf18      	it	ne
 80203fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8020400:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020408:	d038      	beq.n	802047c <__aeabi_dmul+0xb4>
 802040a:	fba0 ce02 	umull	ip, lr, r0, r2
 802040e:	f04f 0500 	mov.w	r5, #0
 8020412:	fbe1 e502 	umlal	lr, r5, r1, r2
 8020416:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 802041a:	fbe0 e503 	umlal	lr, r5, r0, r3
 802041e:	f04f 0600 	mov.w	r6, #0
 8020422:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020426:	f09c 0f00 	teq	ip, #0
 802042a:	bf18      	it	ne
 802042c:	f04e 0e01 	orrne.w	lr, lr, #1
 8020430:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8020434:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8020438:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 802043c:	d204      	bcs.n	8020448 <__aeabi_dmul+0x80>
 802043e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8020442:	416d      	adcs	r5, r5
 8020444:	eb46 0606 	adc.w	r6, r6, r6
 8020448:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 802044c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8020450:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8020454:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8020458:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 802045c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8020460:	bf88      	it	hi
 8020462:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020466:	d81e      	bhi.n	80204a6 <__aeabi_dmul+0xde>
 8020468:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 802046c:	bf08      	it	eq
 802046e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8020472:	f150 0000 	adcs.w	r0, r0, #0
 8020476:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802047a:	bd70      	pop	{r4, r5, r6, pc}
 802047c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8020480:	ea46 0101 	orr.w	r1, r6, r1
 8020484:	ea40 0002 	orr.w	r0, r0, r2
 8020488:	ea81 0103 	eor.w	r1, r1, r3
 802048c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8020490:	bfc2      	ittt	gt
 8020492:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020496:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 802049a:	bd70      	popgt	{r4, r5, r6, pc}
 802049c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80204a0:	f04f 0e00 	mov.w	lr, #0
 80204a4:	3c01      	subs	r4, #1
 80204a6:	f300 80ab 	bgt.w	8020600 <__aeabi_dmul+0x238>
 80204aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80204ae:	bfde      	ittt	le
 80204b0:	2000      	movle	r0, #0
 80204b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80204b6:	bd70      	pople	{r4, r5, r6, pc}
 80204b8:	f1c4 0400 	rsb	r4, r4, #0
 80204bc:	3c20      	subs	r4, #32
 80204be:	da35      	bge.n	802052c <__aeabi_dmul+0x164>
 80204c0:	340c      	adds	r4, #12
 80204c2:	dc1b      	bgt.n	80204fc <__aeabi_dmul+0x134>
 80204c4:	f104 0414 	add.w	r4, r4, #20
 80204c8:	f1c4 0520 	rsb	r5, r4, #32
 80204cc:	fa00 f305 	lsl.w	r3, r0, r5
 80204d0:	fa20 f004 	lsr.w	r0, r0, r4
 80204d4:	fa01 f205 	lsl.w	r2, r1, r5
 80204d8:	ea40 0002 	orr.w	r0, r0, r2
 80204dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80204e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80204e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80204e8:	fa21 f604 	lsr.w	r6, r1, r4
 80204ec:	eb42 0106 	adc.w	r1, r2, r6
 80204f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80204f4:	bf08      	it	eq
 80204f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80204fa:	bd70      	pop	{r4, r5, r6, pc}
 80204fc:	f1c4 040c 	rsb	r4, r4, #12
 8020500:	f1c4 0520 	rsb	r5, r4, #32
 8020504:	fa00 f304 	lsl.w	r3, r0, r4
 8020508:	fa20 f005 	lsr.w	r0, r0, r5
 802050c:	fa01 f204 	lsl.w	r2, r1, r4
 8020510:	ea40 0002 	orr.w	r0, r0, r2
 8020514:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020518:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802051c:	f141 0100 	adc.w	r1, r1, #0
 8020520:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020524:	bf08      	it	eq
 8020526:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802052a:	bd70      	pop	{r4, r5, r6, pc}
 802052c:	f1c4 0520 	rsb	r5, r4, #32
 8020530:	fa00 f205 	lsl.w	r2, r0, r5
 8020534:	ea4e 0e02 	orr.w	lr, lr, r2
 8020538:	fa20 f304 	lsr.w	r3, r0, r4
 802053c:	fa01 f205 	lsl.w	r2, r1, r5
 8020540:	ea43 0302 	orr.w	r3, r3, r2
 8020544:	fa21 f004 	lsr.w	r0, r1, r4
 8020548:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802054c:	fa21 f204 	lsr.w	r2, r1, r4
 8020550:	ea20 0002 	bic.w	r0, r0, r2
 8020554:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8020558:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802055c:	bf08      	it	eq
 802055e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020562:	bd70      	pop	{r4, r5, r6, pc}
 8020564:	f094 0f00 	teq	r4, #0
 8020568:	d10f      	bne.n	802058a <__aeabi_dmul+0x1c2>
 802056a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802056e:	0040      	lsls	r0, r0, #1
 8020570:	eb41 0101 	adc.w	r1, r1, r1
 8020574:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020578:	bf08      	it	eq
 802057a:	3c01      	subeq	r4, #1
 802057c:	d0f7      	beq.n	802056e <__aeabi_dmul+0x1a6>
 802057e:	ea41 0106 	orr.w	r1, r1, r6
 8020582:	f095 0f00 	teq	r5, #0
 8020586:	bf18      	it	ne
 8020588:	4770      	bxne	lr
 802058a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 802058e:	0052      	lsls	r2, r2, #1
 8020590:	eb43 0303 	adc.w	r3, r3, r3
 8020594:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8020598:	bf08      	it	eq
 802059a:	3d01      	subeq	r5, #1
 802059c:	d0f7      	beq.n	802058e <__aeabi_dmul+0x1c6>
 802059e:	ea43 0306 	orr.w	r3, r3, r6
 80205a2:	4770      	bx	lr
 80205a4:	ea94 0f0c 	teq	r4, ip
 80205a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80205ac:	bf18      	it	ne
 80205ae:	ea95 0f0c 	teqne	r5, ip
 80205b2:	d00c      	beq.n	80205ce <__aeabi_dmul+0x206>
 80205b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80205b8:	bf18      	it	ne
 80205ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80205be:	d1d1      	bne.n	8020564 <__aeabi_dmul+0x19c>
 80205c0:	ea81 0103 	eor.w	r1, r1, r3
 80205c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205c8:	f04f 0000 	mov.w	r0, #0
 80205cc:	bd70      	pop	{r4, r5, r6, pc}
 80205ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80205d2:	bf06      	itte	eq
 80205d4:	4610      	moveq	r0, r2
 80205d6:	4619      	moveq	r1, r3
 80205d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80205dc:	d019      	beq.n	8020612 <__aeabi_dmul+0x24a>
 80205de:	ea94 0f0c 	teq	r4, ip
 80205e2:	d102      	bne.n	80205ea <__aeabi_dmul+0x222>
 80205e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80205e8:	d113      	bne.n	8020612 <__aeabi_dmul+0x24a>
 80205ea:	ea95 0f0c 	teq	r5, ip
 80205ee:	d105      	bne.n	80205fc <__aeabi_dmul+0x234>
 80205f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80205f4:	bf1c      	itt	ne
 80205f6:	4610      	movne	r0, r2
 80205f8:	4619      	movne	r1, r3
 80205fa:	d10a      	bne.n	8020612 <__aeabi_dmul+0x24a>
 80205fc:	ea81 0103 	eor.w	r1, r1, r3
 8020600:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020604:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020608:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802060c:	f04f 0000 	mov.w	r0, #0
 8020610:	bd70      	pop	{r4, r5, r6, pc}
 8020612:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020616:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 802061a:	bd70      	pop	{r4, r5, r6, pc}

0802061c <__aeabi_ddiv>:
 802061c:	b570      	push	{r4, r5, r6, lr}
 802061e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020622:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020626:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802062a:	bf1d      	ittte	ne
 802062c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020630:	ea94 0f0c 	teqne	r4, ip
 8020634:	ea95 0f0c 	teqne	r5, ip
 8020638:	f000 f8a7 	bleq	802078a <__aeabi_ddiv+0x16e>
 802063c:	eba4 0405 	sub.w	r4, r4, r5
 8020640:	ea81 0e03 	eor.w	lr, r1, r3
 8020644:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020648:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802064c:	f000 8088 	beq.w	8020760 <__aeabi_ddiv+0x144>
 8020650:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020654:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8020658:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 802065c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8020660:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020664:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020668:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802066c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8020670:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8020674:	429d      	cmp	r5, r3
 8020676:	bf08      	it	eq
 8020678:	4296      	cmpeq	r6, r2
 802067a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 802067e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8020682:	d202      	bcs.n	802068a <__aeabi_ddiv+0x6e>
 8020684:	085b      	lsrs	r3, r3, #1
 8020686:	ea4f 0232 	mov.w	r2, r2, rrx
 802068a:	1ab6      	subs	r6, r6, r2
 802068c:	eb65 0503 	sbc.w	r5, r5, r3
 8020690:	085b      	lsrs	r3, r3, #1
 8020692:	ea4f 0232 	mov.w	r2, r2, rrx
 8020696:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 802069a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 802069e:	ebb6 0e02 	subs.w	lr, r6, r2
 80206a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206a6:	bf22      	ittt	cs
 80206a8:	1ab6      	subcs	r6, r6, r2
 80206aa:	4675      	movcs	r5, lr
 80206ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80206b0:	085b      	lsrs	r3, r3, #1
 80206b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80206b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80206ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206be:	bf22      	ittt	cs
 80206c0:	1ab6      	subcs	r6, r6, r2
 80206c2:	4675      	movcs	r5, lr
 80206c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80206c8:	085b      	lsrs	r3, r3, #1
 80206ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80206ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80206d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206d6:	bf22      	ittt	cs
 80206d8:	1ab6      	subcs	r6, r6, r2
 80206da:	4675      	movcs	r5, lr
 80206dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80206e0:	085b      	lsrs	r3, r3, #1
 80206e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80206e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80206ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206ee:	bf22      	ittt	cs
 80206f0:	1ab6      	subcs	r6, r6, r2
 80206f2:	4675      	movcs	r5, lr
 80206f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80206f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80206fc:	d018      	beq.n	8020730 <__aeabi_ddiv+0x114>
 80206fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8020702:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8020706:	ea4f 1606 	mov.w	r6, r6, lsl #4
 802070a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 802070e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8020712:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8020716:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802071a:	d1c0      	bne.n	802069e <__aeabi_ddiv+0x82>
 802071c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020720:	d10b      	bne.n	802073a <__aeabi_ddiv+0x11e>
 8020722:	ea41 0100 	orr.w	r1, r1, r0
 8020726:	f04f 0000 	mov.w	r0, #0
 802072a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 802072e:	e7b6      	b.n	802069e <__aeabi_ddiv+0x82>
 8020730:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020734:	bf04      	itt	eq
 8020736:	4301      	orreq	r1, r0
 8020738:	2000      	moveq	r0, #0
 802073a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 802073e:	bf88      	it	hi
 8020740:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020744:	f63f aeaf 	bhi.w	80204a6 <__aeabi_dmul+0xde>
 8020748:	ebb5 0c03 	subs.w	ip, r5, r3
 802074c:	bf04      	itt	eq
 802074e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8020752:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020756:	f150 0000 	adcs.w	r0, r0, #0
 802075a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802075e:	bd70      	pop	{r4, r5, r6, pc}
 8020760:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8020764:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020768:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 802076c:	bfc2      	ittt	gt
 802076e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020772:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020776:	bd70      	popgt	{r4, r5, r6, pc}
 8020778:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802077c:	f04f 0e00 	mov.w	lr, #0
 8020780:	3c01      	subs	r4, #1
 8020782:	e690      	b.n	80204a6 <__aeabi_dmul+0xde>
 8020784:	ea45 0e06 	orr.w	lr, r5, r6
 8020788:	e68d      	b.n	80204a6 <__aeabi_dmul+0xde>
 802078a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802078e:	ea94 0f0c 	teq	r4, ip
 8020792:	bf08      	it	eq
 8020794:	ea95 0f0c 	teqeq	r5, ip
 8020798:	f43f af3b 	beq.w	8020612 <__aeabi_dmul+0x24a>
 802079c:	ea94 0f0c 	teq	r4, ip
 80207a0:	d10a      	bne.n	80207b8 <__aeabi_ddiv+0x19c>
 80207a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80207a6:	f47f af34 	bne.w	8020612 <__aeabi_dmul+0x24a>
 80207aa:	ea95 0f0c 	teq	r5, ip
 80207ae:	f47f af25 	bne.w	80205fc <__aeabi_dmul+0x234>
 80207b2:	4610      	mov	r0, r2
 80207b4:	4619      	mov	r1, r3
 80207b6:	e72c      	b.n	8020612 <__aeabi_dmul+0x24a>
 80207b8:	ea95 0f0c 	teq	r5, ip
 80207bc:	d106      	bne.n	80207cc <__aeabi_ddiv+0x1b0>
 80207be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80207c2:	f43f aefd 	beq.w	80205c0 <__aeabi_dmul+0x1f8>
 80207c6:	4610      	mov	r0, r2
 80207c8:	4619      	mov	r1, r3
 80207ca:	e722      	b.n	8020612 <__aeabi_dmul+0x24a>
 80207cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80207d0:	bf18      	it	ne
 80207d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80207d6:	f47f aec5 	bne.w	8020564 <__aeabi_dmul+0x19c>
 80207da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80207de:	f47f af0d 	bne.w	80205fc <__aeabi_dmul+0x234>
 80207e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80207e6:	f47f aeeb 	bne.w	80205c0 <__aeabi_dmul+0x1f8>
 80207ea:	e712      	b.n	8020612 <__aeabi_dmul+0x24a>

080207ec <__gedf2>:
 80207ec:	f04f 3cff 	mov.w	ip, #4294967295
 80207f0:	e006      	b.n	8020800 <__cmpdf2+0x4>
 80207f2:	bf00      	nop

080207f4 <__ledf2>:
 80207f4:	f04f 0c01 	mov.w	ip, #1
 80207f8:	e002      	b.n	8020800 <__cmpdf2+0x4>
 80207fa:	bf00      	nop

080207fc <__cmpdf2>:
 80207fc:	f04f 0c01 	mov.w	ip, #1
 8020800:	f84d cd04 	str.w	ip, [sp, #-4]!
 8020804:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020808:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 802080c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020810:	bf18      	it	ne
 8020812:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020816:	d01b      	beq.n	8020850 <__cmpdf2+0x54>
 8020818:	b001      	add	sp, #4
 802081a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 802081e:	bf0c      	ite	eq
 8020820:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020824:	ea91 0f03 	teqne	r1, r3
 8020828:	bf02      	ittt	eq
 802082a:	ea90 0f02 	teqeq	r0, r2
 802082e:	2000      	moveq	r0, #0
 8020830:	4770      	bxeq	lr
 8020832:	f110 0f00 	cmn.w	r0, #0
 8020836:	ea91 0f03 	teq	r1, r3
 802083a:	bf58      	it	pl
 802083c:	4299      	cmppl	r1, r3
 802083e:	bf08      	it	eq
 8020840:	4290      	cmpeq	r0, r2
 8020842:	bf2c      	ite	cs
 8020844:	17d8      	asrcs	r0, r3, #31
 8020846:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 802084a:	f040 0001 	orr.w	r0, r0, #1
 802084e:	4770      	bx	lr
 8020850:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020854:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020858:	d102      	bne.n	8020860 <__cmpdf2+0x64>
 802085a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 802085e:	d107      	bne.n	8020870 <__cmpdf2+0x74>
 8020860:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020864:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020868:	d1d6      	bne.n	8020818 <__cmpdf2+0x1c>
 802086a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 802086e:	d0d3      	beq.n	8020818 <__cmpdf2+0x1c>
 8020870:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020874:	4770      	bx	lr
 8020876:	bf00      	nop

08020878 <__aeabi_cdrcmple>:
 8020878:	4684      	mov	ip, r0
 802087a:	4610      	mov	r0, r2
 802087c:	4662      	mov	r2, ip
 802087e:	468c      	mov	ip, r1
 8020880:	4619      	mov	r1, r3
 8020882:	4663      	mov	r3, ip
 8020884:	e000      	b.n	8020888 <__aeabi_cdcmpeq>
 8020886:	bf00      	nop

08020888 <__aeabi_cdcmpeq>:
 8020888:	b501      	push	{r0, lr}
 802088a:	f7ff ffb7 	bl	80207fc <__cmpdf2>
 802088e:	2800      	cmp	r0, #0
 8020890:	bf48      	it	mi
 8020892:	f110 0f00 	cmnmi.w	r0, #0
 8020896:	bd01      	pop	{r0, pc}

08020898 <__aeabi_dcmpeq>:
 8020898:	f84d ed08 	str.w	lr, [sp, #-8]!
 802089c:	f7ff fff4 	bl	8020888 <__aeabi_cdcmpeq>
 80208a0:	bf0c      	ite	eq
 80208a2:	2001      	moveq	r0, #1
 80208a4:	2000      	movne	r0, #0
 80208a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80208aa:	bf00      	nop

080208ac <__aeabi_dcmplt>:
 80208ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208b0:	f7ff ffea 	bl	8020888 <__aeabi_cdcmpeq>
 80208b4:	bf34      	ite	cc
 80208b6:	2001      	movcc	r0, #1
 80208b8:	2000      	movcs	r0, #0
 80208ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80208be:	bf00      	nop

080208c0 <__aeabi_dcmple>:
 80208c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208c4:	f7ff ffe0 	bl	8020888 <__aeabi_cdcmpeq>
 80208c8:	bf94      	ite	ls
 80208ca:	2001      	movls	r0, #1
 80208cc:	2000      	movhi	r0, #0
 80208ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80208d2:	bf00      	nop

080208d4 <__aeabi_dcmpge>:
 80208d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208d8:	f7ff ffce 	bl	8020878 <__aeabi_cdrcmple>
 80208dc:	bf94      	ite	ls
 80208de:	2001      	movls	r0, #1
 80208e0:	2000      	movhi	r0, #0
 80208e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80208e6:	bf00      	nop

080208e8 <__aeabi_dcmpgt>:
 80208e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208ec:	f7ff ffc4 	bl	8020878 <__aeabi_cdrcmple>
 80208f0:	bf34      	ite	cc
 80208f2:	2001      	movcc	r0, #1
 80208f4:	2000      	movcs	r0, #0
 80208f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80208fa:	bf00      	nop

080208fc <__aeabi_dcmpun>:
 80208fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020904:	d102      	bne.n	802090c <__aeabi_dcmpun+0x10>
 8020906:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 802090a:	d10a      	bne.n	8020922 <__aeabi_dcmpun+0x26>
 802090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020914:	d102      	bne.n	802091c <__aeabi_dcmpun+0x20>
 8020916:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 802091a:	d102      	bne.n	8020922 <__aeabi_dcmpun+0x26>
 802091c:	f04f 0000 	mov.w	r0, #0
 8020920:	4770      	bx	lr
 8020922:	f04f 0001 	mov.w	r0, #1
 8020926:	4770      	bx	lr

08020928 <__aeabi_d2iz>:
 8020928:	ea4f 0241 	mov.w	r2, r1, lsl #1
 802092c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020930:	d215      	bcs.n	802095e <__aeabi_d2iz+0x36>
 8020932:	d511      	bpl.n	8020958 <__aeabi_d2iz+0x30>
 8020934:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020938:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 802093c:	d912      	bls.n	8020964 <__aeabi_d2iz+0x3c>
 802093e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020942:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020946:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 802094a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 802094e:	fa23 f002 	lsr.w	r0, r3, r2
 8020952:	bf18      	it	ne
 8020954:	4240      	negne	r0, r0
 8020956:	4770      	bx	lr
 8020958:	f04f 0000 	mov.w	r0, #0
 802095c:	4770      	bx	lr
 802095e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020962:	d105      	bne.n	8020970 <__aeabi_d2iz+0x48>
 8020964:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8020968:	bf08      	it	eq
 802096a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 802096e:	4770      	bx	lr
 8020970:	f04f 0000 	mov.w	r0, #0
 8020974:	4770      	bx	lr
 8020976:	bf00      	nop

08020978 <__aeabi_d2f>:
 8020978:	ea4f 0241 	mov.w	r2, r1, lsl #1
 802097c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8020980:	bf24      	itt	cs
 8020982:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8020986:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 802098a:	d90d      	bls.n	80209a8 <__aeabi_d2f+0x30>
 802098c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8020990:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020994:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8020998:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 802099c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80209a0:	bf08      	it	eq
 80209a2:	f020 0001 	biceq.w	r0, r0, #1
 80209a6:	4770      	bx	lr
 80209a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80209ac:	d121      	bne.n	80209f2 <__aeabi_d2f+0x7a>
 80209ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80209b2:	bfbc      	itt	lt
 80209b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80209b8:	4770      	bxlt	lr
 80209ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80209be:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80209c2:	f1c2 0218 	rsb	r2, r2, #24
 80209c6:	f1c2 0c20 	rsb	ip, r2, #32
 80209ca:	fa10 f30c 	lsls.w	r3, r0, ip
 80209ce:	fa20 f002 	lsr.w	r0, r0, r2
 80209d2:	bf18      	it	ne
 80209d4:	f040 0001 	orrne.w	r0, r0, #1
 80209d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80209dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80209e0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80209e4:	ea40 000c 	orr.w	r0, r0, ip
 80209e8:	fa23 f302 	lsr.w	r3, r3, r2
 80209ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80209f0:	e7cc      	b.n	802098c <__aeabi_d2f+0x14>
 80209f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80209f6:	d107      	bne.n	8020a08 <__aeabi_d2f+0x90>
 80209f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80209fc:	bf1e      	ittt	ne
 80209fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8020a02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8020a06:	4770      	bxne	lr
 8020a08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8020a0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8020a10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020a14:	4770      	bx	lr
 8020a16:	bf00      	nop

08020a18 <__aeabi_uldivmod>:
 8020a18:	b953      	cbnz	r3, 8020a30 <__aeabi_uldivmod+0x18>
 8020a1a:	b94a      	cbnz	r2, 8020a30 <__aeabi_uldivmod+0x18>
 8020a1c:	2900      	cmp	r1, #0
 8020a1e:	bf08      	it	eq
 8020a20:	2800      	cmpeq	r0, #0
 8020a22:	bf1c      	itt	ne
 8020a24:	f04f 31ff 	movne.w	r1, #4294967295
 8020a28:	f04f 30ff 	movne.w	r0, #4294967295
 8020a2c:	f000 b972 	b.w	8020d14 <__aeabi_idiv0>
 8020a30:	f1ad 0c08 	sub.w	ip, sp, #8
 8020a34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020a38:	f000 f806 	bl	8020a48 <__udivmoddi4>
 8020a3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020a40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020a44:	b004      	add	sp, #16
 8020a46:	4770      	bx	lr

08020a48 <__udivmoddi4>:
 8020a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020a4c:	9e08      	ldr	r6, [sp, #32]
 8020a4e:	4604      	mov	r4, r0
 8020a50:	4688      	mov	r8, r1
 8020a52:	2b00      	cmp	r3, #0
 8020a54:	d14b      	bne.n	8020aee <__udivmoddi4+0xa6>
 8020a56:	428a      	cmp	r2, r1
 8020a58:	4615      	mov	r5, r2
 8020a5a:	d967      	bls.n	8020b2c <__udivmoddi4+0xe4>
 8020a5c:	fab2 f282 	clz	r2, r2
 8020a60:	b14a      	cbz	r2, 8020a76 <__udivmoddi4+0x2e>
 8020a62:	f1c2 0720 	rsb	r7, r2, #32
 8020a66:	fa01 f302 	lsl.w	r3, r1, r2
 8020a6a:	fa20 f707 	lsr.w	r7, r0, r7
 8020a6e:	4095      	lsls	r5, r2
 8020a70:	ea47 0803 	orr.w	r8, r7, r3
 8020a74:	4094      	lsls	r4, r2
 8020a76:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020a7a:	0c23      	lsrs	r3, r4, #16
 8020a7c:	fbb8 f7fe 	udiv	r7, r8, lr
 8020a80:	fa1f fc85 	uxth.w	ip, r5
 8020a84:	fb0e 8817 	mls	r8, lr, r7, r8
 8020a88:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8020a8c:	fb07 f10c 	mul.w	r1, r7, ip
 8020a90:	4299      	cmp	r1, r3
 8020a92:	d909      	bls.n	8020aa8 <__udivmoddi4+0x60>
 8020a94:	18eb      	adds	r3, r5, r3
 8020a96:	f107 30ff 	add.w	r0, r7, #4294967295
 8020a9a:	f080 811b 	bcs.w	8020cd4 <__udivmoddi4+0x28c>
 8020a9e:	4299      	cmp	r1, r3
 8020aa0:	f240 8118 	bls.w	8020cd4 <__udivmoddi4+0x28c>
 8020aa4:	3f02      	subs	r7, #2
 8020aa6:	442b      	add	r3, r5
 8020aa8:	1a5b      	subs	r3, r3, r1
 8020aaa:	b2a4      	uxth	r4, r4
 8020aac:	fbb3 f0fe 	udiv	r0, r3, lr
 8020ab0:	fb0e 3310 	mls	r3, lr, r0, r3
 8020ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020ab8:	fb00 fc0c 	mul.w	ip, r0, ip
 8020abc:	45a4      	cmp	ip, r4
 8020abe:	d909      	bls.n	8020ad4 <__udivmoddi4+0x8c>
 8020ac0:	192c      	adds	r4, r5, r4
 8020ac2:	f100 33ff 	add.w	r3, r0, #4294967295
 8020ac6:	f080 8107 	bcs.w	8020cd8 <__udivmoddi4+0x290>
 8020aca:	45a4      	cmp	ip, r4
 8020acc:	f240 8104 	bls.w	8020cd8 <__udivmoddi4+0x290>
 8020ad0:	3802      	subs	r0, #2
 8020ad2:	442c      	add	r4, r5
 8020ad4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8020ad8:	eba4 040c 	sub.w	r4, r4, ip
 8020adc:	2700      	movs	r7, #0
 8020ade:	b11e      	cbz	r6, 8020ae8 <__udivmoddi4+0xa0>
 8020ae0:	40d4      	lsrs	r4, r2
 8020ae2:	2300      	movs	r3, #0
 8020ae4:	e9c6 4300 	strd	r4, r3, [r6]
 8020ae8:	4639      	mov	r1, r7
 8020aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020aee:	428b      	cmp	r3, r1
 8020af0:	d909      	bls.n	8020b06 <__udivmoddi4+0xbe>
 8020af2:	2e00      	cmp	r6, #0
 8020af4:	f000 80eb 	beq.w	8020cce <__udivmoddi4+0x286>
 8020af8:	2700      	movs	r7, #0
 8020afa:	e9c6 0100 	strd	r0, r1, [r6]
 8020afe:	4638      	mov	r0, r7
 8020b00:	4639      	mov	r1, r7
 8020b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b06:	fab3 f783 	clz	r7, r3
 8020b0a:	2f00      	cmp	r7, #0
 8020b0c:	d147      	bne.n	8020b9e <__udivmoddi4+0x156>
 8020b0e:	428b      	cmp	r3, r1
 8020b10:	d302      	bcc.n	8020b18 <__udivmoddi4+0xd0>
 8020b12:	4282      	cmp	r2, r0
 8020b14:	f200 80fa 	bhi.w	8020d0c <__udivmoddi4+0x2c4>
 8020b18:	1a84      	subs	r4, r0, r2
 8020b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8020b1e:	2001      	movs	r0, #1
 8020b20:	4698      	mov	r8, r3
 8020b22:	2e00      	cmp	r6, #0
 8020b24:	d0e0      	beq.n	8020ae8 <__udivmoddi4+0xa0>
 8020b26:	e9c6 4800 	strd	r4, r8, [r6]
 8020b2a:	e7dd      	b.n	8020ae8 <__udivmoddi4+0xa0>
 8020b2c:	b902      	cbnz	r2, 8020b30 <__udivmoddi4+0xe8>
 8020b2e:	deff      	udf	#255	; 0xff
 8020b30:	fab2 f282 	clz	r2, r2
 8020b34:	2a00      	cmp	r2, #0
 8020b36:	f040 808f 	bne.w	8020c58 <__udivmoddi4+0x210>
 8020b3a:	1b49      	subs	r1, r1, r5
 8020b3c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020b40:	fa1f f885 	uxth.w	r8, r5
 8020b44:	2701      	movs	r7, #1
 8020b46:	fbb1 fcfe 	udiv	ip, r1, lr
 8020b4a:	0c23      	lsrs	r3, r4, #16
 8020b4c:	fb0e 111c 	mls	r1, lr, ip, r1
 8020b50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020b54:	fb08 f10c 	mul.w	r1, r8, ip
 8020b58:	4299      	cmp	r1, r3
 8020b5a:	d907      	bls.n	8020b6c <__udivmoddi4+0x124>
 8020b5c:	18eb      	adds	r3, r5, r3
 8020b5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8020b62:	d202      	bcs.n	8020b6a <__udivmoddi4+0x122>
 8020b64:	4299      	cmp	r1, r3
 8020b66:	f200 80cd 	bhi.w	8020d04 <__udivmoddi4+0x2bc>
 8020b6a:	4684      	mov	ip, r0
 8020b6c:	1a59      	subs	r1, r3, r1
 8020b6e:	b2a3      	uxth	r3, r4
 8020b70:	fbb1 f0fe 	udiv	r0, r1, lr
 8020b74:	fb0e 1410 	mls	r4, lr, r0, r1
 8020b78:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8020b7c:	fb08 f800 	mul.w	r8, r8, r0
 8020b80:	45a0      	cmp	r8, r4
 8020b82:	d907      	bls.n	8020b94 <__udivmoddi4+0x14c>
 8020b84:	192c      	adds	r4, r5, r4
 8020b86:	f100 33ff 	add.w	r3, r0, #4294967295
 8020b8a:	d202      	bcs.n	8020b92 <__udivmoddi4+0x14a>
 8020b8c:	45a0      	cmp	r8, r4
 8020b8e:	f200 80b6 	bhi.w	8020cfe <__udivmoddi4+0x2b6>
 8020b92:	4618      	mov	r0, r3
 8020b94:	eba4 0408 	sub.w	r4, r4, r8
 8020b98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8020b9c:	e79f      	b.n	8020ade <__udivmoddi4+0x96>
 8020b9e:	f1c7 0c20 	rsb	ip, r7, #32
 8020ba2:	40bb      	lsls	r3, r7
 8020ba4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8020ba8:	ea4e 0e03 	orr.w	lr, lr, r3
 8020bac:	fa01 f407 	lsl.w	r4, r1, r7
 8020bb0:	fa20 f50c 	lsr.w	r5, r0, ip
 8020bb4:	fa21 f30c 	lsr.w	r3, r1, ip
 8020bb8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8020bbc:	4325      	orrs	r5, r4
 8020bbe:	fbb3 f9f8 	udiv	r9, r3, r8
 8020bc2:	0c2c      	lsrs	r4, r5, #16
 8020bc4:	fb08 3319 	mls	r3, r8, r9, r3
 8020bc8:	fa1f fa8e 	uxth.w	sl, lr
 8020bcc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8020bd0:	fb09 f40a 	mul.w	r4, r9, sl
 8020bd4:	429c      	cmp	r4, r3
 8020bd6:	fa02 f207 	lsl.w	r2, r2, r7
 8020bda:	fa00 f107 	lsl.w	r1, r0, r7
 8020bde:	d90b      	bls.n	8020bf8 <__udivmoddi4+0x1b0>
 8020be0:	eb1e 0303 	adds.w	r3, lr, r3
 8020be4:	f109 30ff 	add.w	r0, r9, #4294967295
 8020be8:	f080 8087 	bcs.w	8020cfa <__udivmoddi4+0x2b2>
 8020bec:	429c      	cmp	r4, r3
 8020bee:	f240 8084 	bls.w	8020cfa <__udivmoddi4+0x2b2>
 8020bf2:	f1a9 0902 	sub.w	r9, r9, #2
 8020bf6:	4473      	add	r3, lr
 8020bf8:	1b1b      	subs	r3, r3, r4
 8020bfa:	b2ad      	uxth	r5, r5
 8020bfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8020c00:	fb08 3310 	mls	r3, r8, r0, r3
 8020c04:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8020c08:	fb00 fa0a 	mul.w	sl, r0, sl
 8020c0c:	45a2      	cmp	sl, r4
 8020c0e:	d908      	bls.n	8020c22 <__udivmoddi4+0x1da>
 8020c10:	eb1e 0404 	adds.w	r4, lr, r4
 8020c14:	f100 33ff 	add.w	r3, r0, #4294967295
 8020c18:	d26b      	bcs.n	8020cf2 <__udivmoddi4+0x2aa>
 8020c1a:	45a2      	cmp	sl, r4
 8020c1c:	d969      	bls.n	8020cf2 <__udivmoddi4+0x2aa>
 8020c1e:	3802      	subs	r0, #2
 8020c20:	4474      	add	r4, lr
 8020c22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020c26:	fba0 8902 	umull	r8, r9, r0, r2
 8020c2a:	eba4 040a 	sub.w	r4, r4, sl
 8020c2e:	454c      	cmp	r4, r9
 8020c30:	46c2      	mov	sl, r8
 8020c32:	464b      	mov	r3, r9
 8020c34:	d354      	bcc.n	8020ce0 <__udivmoddi4+0x298>
 8020c36:	d051      	beq.n	8020cdc <__udivmoddi4+0x294>
 8020c38:	2e00      	cmp	r6, #0
 8020c3a:	d069      	beq.n	8020d10 <__udivmoddi4+0x2c8>
 8020c3c:	ebb1 050a 	subs.w	r5, r1, sl
 8020c40:	eb64 0403 	sbc.w	r4, r4, r3
 8020c44:	fa04 fc0c 	lsl.w	ip, r4, ip
 8020c48:	40fd      	lsrs	r5, r7
 8020c4a:	40fc      	lsrs	r4, r7
 8020c4c:	ea4c 0505 	orr.w	r5, ip, r5
 8020c50:	e9c6 5400 	strd	r5, r4, [r6]
 8020c54:	2700      	movs	r7, #0
 8020c56:	e747      	b.n	8020ae8 <__udivmoddi4+0xa0>
 8020c58:	f1c2 0320 	rsb	r3, r2, #32
 8020c5c:	fa20 f703 	lsr.w	r7, r0, r3
 8020c60:	4095      	lsls	r5, r2
 8020c62:	fa01 f002 	lsl.w	r0, r1, r2
 8020c66:	fa21 f303 	lsr.w	r3, r1, r3
 8020c6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020c6e:	4338      	orrs	r0, r7
 8020c70:	0c01      	lsrs	r1, r0, #16
 8020c72:	fbb3 f7fe 	udiv	r7, r3, lr
 8020c76:	fa1f f885 	uxth.w	r8, r5
 8020c7a:	fb0e 3317 	mls	r3, lr, r7, r3
 8020c7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020c82:	fb07 f308 	mul.w	r3, r7, r8
 8020c86:	428b      	cmp	r3, r1
 8020c88:	fa04 f402 	lsl.w	r4, r4, r2
 8020c8c:	d907      	bls.n	8020c9e <__udivmoddi4+0x256>
 8020c8e:	1869      	adds	r1, r5, r1
 8020c90:	f107 3cff 	add.w	ip, r7, #4294967295
 8020c94:	d22f      	bcs.n	8020cf6 <__udivmoddi4+0x2ae>
 8020c96:	428b      	cmp	r3, r1
 8020c98:	d92d      	bls.n	8020cf6 <__udivmoddi4+0x2ae>
 8020c9a:	3f02      	subs	r7, #2
 8020c9c:	4429      	add	r1, r5
 8020c9e:	1acb      	subs	r3, r1, r3
 8020ca0:	b281      	uxth	r1, r0
 8020ca2:	fbb3 f0fe 	udiv	r0, r3, lr
 8020ca6:	fb0e 3310 	mls	r3, lr, r0, r3
 8020caa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020cae:	fb00 f308 	mul.w	r3, r0, r8
 8020cb2:	428b      	cmp	r3, r1
 8020cb4:	d907      	bls.n	8020cc6 <__udivmoddi4+0x27e>
 8020cb6:	1869      	adds	r1, r5, r1
 8020cb8:	f100 3cff 	add.w	ip, r0, #4294967295
 8020cbc:	d217      	bcs.n	8020cee <__udivmoddi4+0x2a6>
 8020cbe:	428b      	cmp	r3, r1
 8020cc0:	d915      	bls.n	8020cee <__udivmoddi4+0x2a6>
 8020cc2:	3802      	subs	r0, #2
 8020cc4:	4429      	add	r1, r5
 8020cc6:	1ac9      	subs	r1, r1, r3
 8020cc8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8020ccc:	e73b      	b.n	8020b46 <__udivmoddi4+0xfe>
 8020cce:	4637      	mov	r7, r6
 8020cd0:	4630      	mov	r0, r6
 8020cd2:	e709      	b.n	8020ae8 <__udivmoddi4+0xa0>
 8020cd4:	4607      	mov	r7, r0
 8020cd6:	e6e7      	b.n	8020aa8 <__udivmoddi4+0x60>
 8020cd8:	4618      	mov	r0, r3
 8020cda:	e6fb      	b.n	8020ad4 <__udivmoddi4+0x8c>
 8020cdc:	4541      	cmp	r1, r8
 8020cde:	d2ab      	bcs.n	8020c38 <__udivmoddi4+0x1f0>
 8020ce0:	ebb8 0a02 	subs.w	sl, r8, r2
 8020ce4:	eb69 020e 	sbc.w	r2, r9, lr
 8020ce8:	3801      	subs	r0, #1
 8020cea:	4613      	mov	r3, r2
 8020cec:	e7a4      	b.n	8020c38 <__udivmoddi4+0x1f0>
 8020cee:	4660      	mov	r0, ip
 8020cf0:	e7e9      	b.n	8020cc6 <__udivmoddi4+0x27e>
 8020cf2:	4618      	mov	r0, r3
 8020cf4:	e795      	b.n	8020c22 <__udivmoddi4+0x1da>
 8020cf6:	4667      	mov	r7, ip
 8020cf8:	e7d1      	b.n	8020c9e <__udivmoddi4+0x256>
 8020cfa:	4681      	mov	r9, r0
 8020cfc:	e77c      	b.n	8020bf8 <__udivmoddi4+0x1b0>
 8020cfe:	3802      	subs	r0, #2
 8020d00:	442c      	add	r4, r5
 8020d02:	e747      	b.n	8020b94 <__udivmoddi4+0x14c>
 8020d04:	f1ac 0c02 	sub.w	ip, ip, #2
 8020d08:	442b      	add	r3, r5
 8020d0a:	e72f      	b.n	8020b6c <__udivmoddi4+0x124>
 8020d0c:	4638      	mov	r0, r7
 8020d0e:	e708      	b.n	8020b22 <__udivmoddi4+0xda>
 8020d10:	4637      	mov	r7, r6
 8020d12:	e6e9      	b.n	8020ae8 <__udivmoddi4+0xa0>

08020d14 <__aeabi_idiv0>:
 8020d14:	4770      	bx	lr
 8020d16:	bf00      	nop

08020d18 <_ZN7EncoderC1Ev>:
#include "encoder.hpp"
#include "declare_extern.h"

Encoder::Encoder() : distance_(0)
 8020d18:	b480      	push	{r7}
 8020d1a:	b083      	sub	sp, #12
 8020d1c:	af00      	add	r7, sp, #0
 8020d1e:	6078      	str	r0, [r7, #4]
                   , distance_stack_(0)
                   , distance_difference_(0) {}
 8020d20:	687b      	ldr	r3, [r7, #4]
 8020d22:	f04f 0200 	mov.w	r2, #0
 8020d26:	601a      	str	r2, [r3, #0]
 8020d28:	687b      	ldr	r3, [r7, #4]
 8020d2a:	f04f 0200 	mov.w	r2, #0
 8020d2e:	605a      	str	r2, [r3, #4]
 8020d30:	687b      	ldr	r3, [r7, #4]
 8020d32:	f04f 0200 	mov.w	r2, #0
 8020d36:	609a      	str	r2, [r3, #8]
 8020d38:	687b      	ldr	r3, [r7, #4]
 8020d3a:	4618      	mov	r0, r3
 8020d3c:	370c      	adds	r7, #12
 8020d3e:	46bd      	mov	sp, r7
 8020d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d44:	4770      	bx	lr
	...

08020d48 <_ZN7Encoder4InitEv>:

void Encoder::Init()
{
 8020d48:	b580      	push	{r7, lr}
 8020d4a:	b082      	sub	sp, #8
 8020d4c:	af00      	add	r7, sp, #0
 8020d4e:	6078      	str	r0, [r7, #4]
	if(HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL) != HAL_OK)
 8020d50:	213c      	movs	r1, #60	; 0x3c
 8020d52:	4812      	ldr	r0, [pc, #72]	; (8020d9c <_ZN7Encoder4InitEv+0x54>)
 8020d54:	f005 fe2e 	bl	80269b4 <HAL_TIM_Encoder_Start>
 8020d58:	4603      	mov	r3, r0
 8020d5a:	2b00      	cmp	r3, #0
 8020d5c:	bf14      	ite	ne
 8020d5e:	2301      	movne	r3, #1
 8020d60:	2300      	moveq	r3, #0
 8020d62:	b2db      	uxtb	r3, r3
 8020d64:	2b00      	cmp	r3, #0
 8020d66:	d004      	beq.n	8020d72 <_ZN7Encoder4InitEv+0x2a>
	{
#ifdef DEBUG_MODE
        g_error_handler_tim8 = true;
 8020d68:	4b0d      	ldr	r3, [pc, #52]	; (8020da0 <_ZN7Encoder4InitEv+0x58>)
 8020d6a:	2201      	movs	r2, #1
 8020d6c:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

		Error_Handler();
 8020d6e:	f001 fd39 	bl	80227e4 <Error_Handler>
	}

	if(HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL) != HAL_OK)
 8020d72:	213c      	movs	r1, #60	; 0x3c
 8020d74:	480b      	ldr	r0, [pc, #44]	; (8020da4 <_ZN7Encoder4InitEv+0x5c>)
 8020d76:	f005 fe1d 	bl	80269b4 <HAL_TIM_Encoder_Start>
 8020d7a:	4603      	mov	r3, r0
 8020d7c:	2b00      	cmp	r3, #0
 8020d7e:	bf14      	ite	ne
 8020d80:	2301      	movne	r3, #1
 8020d82:	2300      	moveq	r3, #0
 8020d84:	b2db      	uxtb	r3, r3
 8020d86:	2b00      	cmp	r3, #0
 8020d88:	d004      	beq.n	8020d94 <_ZN7Encoder4InitEv+0x4c>
	{
#ifdef DEBUG_MODE
        g_error_handler_tim4 = true;
 8020d8a:	4b07      	ldr	r3, [pc, #28]	; (8020da8 <_ZN7Encoder4InitEv+0x60>)
 8020d8c:	2201      	movs	r2, #1
 8020d8e:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

		Error_Handler();
 8020d90:	f001 fd28 	bl	80227e4 <Error_Handler>
	}
}
 8020d94:	bf00      	nop
 8020d96:	3708      	adds	r7, #8
 8020d98:	46bd      	mov	sp, r7
 8020d9a:	bd80      	pop	{r7, pc}
 8020d9c:	20011498 	.word	0x20011498
 8020da0:	200004d7 	.word	0x200004d7
 8020da4:	200114d8 	.word	0x200114d8
 8020da8:	200004d6 	.word	0x200004d6
 8020dac:	00000000 	.word	0x00000000

08020db0 <_ZN7Encoder6UpdateEv>:

void Encoder::Update()
{
 8020db0:	b590      	push	{r4, r7, lr}
 8020db2:	b087      	sub	sp, #28
 8020db4:	af00      	add	r7, sp, #0
 8020db6:	6078      	str	r0, [r7, #4]
	int16_t count_l = static_cast<int16_t>((TIM8 -> CNT) - START_COUNT);
 8020db8:	4b39      	ldr	r3, [pc, #228]	; (8020ea0 <_ZN7Encoder6UpdateEv+0xf0>)
 8020dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020dbc:	b29b      	uxth	r3, r3
 8020dbe:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8020dc2:	3b7f      	subs	r3, #127	; 0x7f
 8020dc4:	b29b      	uxth	r3, r3
 8020dc6:	82fb      	strh	r3, [r7, #22]
	int16_t count_r = static_cast<int16_t>(START_COUNT - (TIM4 -> CNT));
 8020dc8:	4b36      	ldr	r3, [pc, #216]	; (8020ea4 <_ZN7Encoder6UpdateEv+0xf4>)
 8020dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020dcc:	b29b      	uxth	r3, r3
 8020dce:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 8020dd2:	337f      	adds	r3, #127	; 0x7f
 8020dd4:	b29b      	uxth	r3, r3
 8020dd6:	82bb      	strh	r3, [r7, #20]
	TIM8 -> CNT = START_COUNT;
 8020dd8:	4b31      	ldr	r3, [pc, #196]	; (8020ea0 <_ZN7Encoder6UpdateEv+0xf0>)
 8020dda:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020dde:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = START_COUNT;
 8020de0:	4b30      	ldr	r3, [pc, #192]	; (8020ea4 <_ZN7Encoder6UpdateEv+0xf4>)
 8020de2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020de6:	625a      	str	r2, [r3, #36]	; 0x24
	float distance_l = static_cast<float>(count_l * DISTANCE_PER_COUNT);
 8020de8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020dec:	4618      	mov	r0, r3
 8020dee:	f7ff fa81 	bl	80202f4 <__aeabi_i2d>
 8020df2:	a329      	add	r3, pc, #164	; (adr r3, 8020e98 <_ZN7Encoder6UpdateEv+0xe8>)
 8020df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020df8:	f7ff fae6 	bl	80203c8 <__aeabi_dmul>
 8020dfc:	4603      	mov	r3, r0
 8020dfe:	460c      	mov	r4, r1
 8020e00:	4618      	mov	r0, r3
 8020e02:	4621      	mov	r1, r4
 8020e04:	f7ff fdb8 	bl	8020978 <__aeabi_d2f>
 8020e08:	4603      	mov	r3, r0
 8020e0a:	613b      	str	r3, [r7, #16]
	float distance_r = static_cast<float>(count_r * DISTANCE_PER_COUNT);
 8020e0c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8020e10:	4618      	mov	r0, r3
 8020e12:	f7ff fa6f 	bl	80202f4 <__aeabi_i2d>
 8020e16:	a320      	add	r3, pc, #128	; (adr r3, 8020e98 <_ZN7Encoder6UpdateEv+0xe8>)
 8020e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e1c:	f7ff fad4 	bl	80203c8 <__aeabi_dmul>
 8020e20:	4603      	mov	r3, r0
 8020e22:	460c      	mov	r4, r1
 8020e24:	4618      	mov	r0, r3
 8020e26:	4621      	mov	r1, r4
 8020e28:	f7ff fda6 	bl	8020978 <__aeabi_d2f>
 8020e2c:	4603      	mov	r3, r0
 8020e2e:	60fb      	str	r3, [r7, #12]
	float distance = (distance_l + distance_r) / 2.0;
 8020e30:	ed97 7a04 	vldr	s14, [r7, #16]
 8020e34:	edd7 7a03 	vldr	s15, [r7, #12]
 8020e38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8020e3c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8020e40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8020e44:	edc7 7a02 	vstr	s15, [r7, #8]

	distance_ = distance;
 8020e48:	687b      	ldr	r3, [r7, #4]
 8020e4a:	68ba      	ldr	r2, [r7, #8]
 8020e4c:	601a      	str	r2, [r3, #0]
	distance_stack_ += distance;
 8020e4e:	687b      	ldr	r3, [r7, #4]
 8020e50:	ed93 7a01 	vldr	s14, [r3, #4]
 8020e54:	edd7 7a02 	vldr	s15, [r7, #8]
 8020e58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020e5c:	687b      	ldr	r3, [r7, #4]
 8020e5e:	edc3 7a01 	vstr	s15, [r3, #4]
	distance_difference_ = distance_r - distance_l;
 8020e62:	ed97 7a03 	vldr	s14, [r7, #12]
 8020e66:	edd7 7a04 	vldr	s15, [r7, #16]
 8020e6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8020e6e:	687b      	ldr	r3, [r7, #4]
 8020e70:	edc3 7a02 	vstr	s15, [r3, #8]

#ifdef DEBUG_MODE
	g_enc_cnt_l = count_l;
 8020e74:	4a0c      	ldr	r2, [pc, #48]	; (8020ea8 <_ZN7Encoder6UpdateEv+0xf8>)
 8020e76:	8afb      	ldrh	r3, [r7, #22]
 8020e78:	8013      	strh	r3, [r2, #0]
	g_enc_cnt_r = count_r;
 8020e7a:	4a0c      	ldr	r2, [pc, #48]	; (8020eac <_ZN7Encoder6UpdateEv+0xfc>)
 8020e7c:	8abb      	ldrh	r3, [r7, #20]
 8020e7e:	8013      	strh	r3, [r2, #0]
	g_distance_l = distance_l;
 8020e80:	4a0b      	ldr	r2, [pc, #44]	; (8020eb0 <_ZN7Encoder6UpdateEv+0x100>)
 8020e82:	693b      	ldr	r3, [r7, #16]
 8020e84:	6013      	str	r3, [r2, #0]
	g_distance_r = distance_r;
 8020e86:	4a0b      	ldr	r2, [pc, #44]	; (8020eb4 <_ZN7Encoder6UpdateEv+0x104>)
 8020e88:	68fb      	ldr	r3, [r7, #12]
 8020e8a:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8020e8c:	bf00      	nop
 8020e8e:	371c      	adds	r7, #28
 8020e90:	46bd      	mov	sp, r7
 8020e92:	bd90      	pop	{r4, r7, pc}
 8020e94:	f3af 8000 	nop.w
 8020e98:	5d35653d 	.word	0x5d35653d
 8020e9c:	3f7d744f 	.word	0x3f7d744f
 8020ea0:	40010400 	.word	0x40010400
 8020ea4:	40000800 	.word	0x40000800
 8020ea8:	2000067e 	.word	0x2000067e
 8020eac:	20000680 	.word	0x20000680
 8020eb0:	20000684 	.word	0x20000684
 8020eb4:	20000688 	.word	0x20000688

08020eb8 <_ZN7Encoder18ResetDistanceStackEv>:
	TIM8 -> CNT = START_COUNT;
	TIM4 -> CNT = START_COUNT;
}

void Encoder::ResetDistanceStack()
{
 8020eb8:	b480      	push	{r7}
 8020eba:	b083      	sub	sp, #12
 8020ebc:	af00      	add	r7, sp, #0
 8020ebe:	6078      	str	r0, [r7, #4]
	distance_stack_ = 0.0;
 8020ec0:	687b      	ldr	r3, [r7, #4]
 8020ec2:	f04f 0200 	mov.w	r2, #0
 8020ec6:	605a      	str	r2, [r3, #4]
}
 8020ec8:	bf00      	nop
 8020eca:	370c      	adds	r7, #12
 8020ecc:	46bd      	mov	sp, r7
 8020ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ed2:	4770      	bx	lr

08020ed4 <_ZN7Encoder11GetDistanceEv>:

float Encoder::GetDistance()
{
 8020ed4:	b480      	push	{r7}
 8020ed6:	b083      	sub	sp, #12
 8020ed8:	af00      	add	r7, sp, #0
 8020eda:	6078      	str	r0, [r7, #4]
	return distance_;
 8020edc:	687b      	ldr	r3, [r7, #4]
 8020ede:	681b      	ldr	r3, [r3, #0]
 8020ee0:	ee07 3a90 	vmov	s15, r3
}
 8020ee4:	eeb0 0a67 	vmov.f32	s0, s15
 8020ee8:	370c      	adds	r7, #12
 8020eea:	46bd      	mov	sp, r7
 8020eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ef0:	4770      	bx	lr

08020ef2 <_ZN7Encoder16GetDistanceStackEv>:

float Encoder::GetDistanceStack()
{
 8020ef2:	b480      	push	{r7}
 8020ef4:	b083      	sub	sp, #12
 8020ef6:	af00      	add	r7, sp, #0
 8020ef8:	6078      	str	r0, [r7, #4]
	return distance_stack_;
 8020efa:	687b      	ldr	r3, [r7, #4]
 8020efc:	685b      	ldr	r3, [r3, #4]
 8020efe:	ee07 3a90 	vmov	s15, r3
}
 8020f02:	eeb0 0a67 	vmov.f32	s0, s15
 8020f06:	370c      	adds	r7, #12
 8020f08:	46bd      	mov	sp, r7
 8020f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f0e:	4770      	bx	lr

08020f10 <_ZN7Encoder15AngularVelocityEv>:

float Encoder::AngularVelocity()
{
 8020f10:	b590      	push	{r4, r7, lr}
 8020f12:	b083      	sub	sp, #12
 8020f14:	af00      	add	r7, sp, #0
 8020f16:	6078      	str	r0, [r7, #4]
	return distance_difference_ / (TIM6_PERIOD * MACHINE_TREAD);
 8020f18:	687b      	ldr	r3, [r7, #4]
 8020f1a:	689b      	ldr	r3, [r3, #8]
 8020f1c:	4618      	mov	r0, r3
 8020f1e:	f7ff f9fb 	bl	8020318 <__aeabi_f2d>
 8020f22:	a309      	add	r3, pc, #36	; (adr r3, 8020f48 <_ZN7Encoder15AngularVelocityEv+0x38>)
 8020f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f28:	f7ff fb78 	bl	802061c <__aeabi_ddiv>
 8020f2c:	4603      	mov	r3, r0
 8020f2e:	460c      	mov	r4, r1
 8020f30:	4618      	mov	r0, r3
 8020f32:	4621      	mov	r1, r4
 8020f34:	f7ff fd20 	bl	8020978 <__aeabi_d2f>
 8020f38:	4603      	mov	r3, r0
 8020f3a:	ee07 3a90 	vmov	s15, r3
 8020f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8020f42:	370c      	adds	r7, #12
 8020f44:	46bd      	mov	sp, r7
 8020f46:	bd90      	pop	{r4, r7, pc}
 8020f48:	00000000 	.word	0x00000000
 8020f4c:	4063d800 	.word	0x4063d800

08020f50 <_ZN8Iim42652C1Ev>:
#include "iim_42652.hpp"
#include "declare_extern.h"

Iim42652::Iim42652() : degree_stack_z_(0) {}
 8020f50:	b490      	push	{r4, r7}
 8020f52:	b082      	sub	sp, #8
 8020f54:	af00      	add	r7, sp, #0
 8020f56:	6078      	str	r0, [r7, #4]
 8020f58:	687a      	ldr	r2, [r7, #4]
 8020f5a:	f04f 0300 	mov.w	r3, #0
 8020f5e:	f04f 0400 	mov.w	r4, #0
 8020f62:	e9c2 3400 	strd	r3, r4, [r2]
 8020f66:	687b      	ldr	r3, [r7, #4]
 8020f68:	4618      	mov	r0, r3
 8020f6a:	3708      	adds	r7, #8
 8020f6c:	46bd      	mov	sp, r7
 8020f6e:	bc90      	pop	{r4, r7}
 8020f70:	4770      	bx	lr

08020f72 <_ZN8Iim4265217ResetDegreeStackZEv>:
    g_deg_z = degree_z;
#endif // DEBUG_MODE
}

void Iim42652::ResetDegreeStackZ()
{
 8020f72:	b490      	push	{r4, r7}
 8020f74:	b082      	sub	sp, #8
 8020f76:	af00      	add	r7, sp, #0
 8020f78:	6078      	str	r0, [r7, #4]
    degree_stack_z_ = 0.0;
 8020f7a:	687a      	ldr	r2, [r7, #4]
 8020f7c:	f04f 0300 	mov.w	r3, #0
 8020f80:	f04f 0400 	mov.w	r4, #0
 8020f84:	e9c2 3400 	strd	r3, r4, [r2]
}
 8020f88:	bf00      	nop
 8020f8a:	3708      	adds	r7, #8
 8020f8c:	46bd      	mov	sp, r7
 8020f8e:	bc90      	pop	{r4, r7}
 8020f90:	4770      	bx	lr

08020f92 <_ZN8Iim4265215GetDegreeStackZEv>:

double Iim42652::GetDegreeStackZ()
{
 8020f92:	b490      	push	{r4, r7}
 8020f94:	b082      	sub	sp, #8
 8020f96:	af00      	add	r7, sp, #0
 8020f98:	6078      	str	r0, [r7, #4]
    return degree_stack_z_;
 8020f9a:	687b      	ldr	r3, [r7, #4]
 8020f9c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8020fa0:	ec44 3b17 	vmov	d7, r3, r4
}
 8020fa4:	eeb0 0a47 	vmov.f32	s0, s14
 8020fa8:	eef0 0a67 	vmov.f32	s1, s15
 8020fac:	3708      	adds	r7, #8
 8020fae:	46bd      	mov	sp, r7
 8020fb0:	bc90      	pop	{r4, r7}
 8020fb2:	4770      	bx	lr

08020fb4 <_ZN3LedC1Ev>:
#include "led.hpp"

Led::Led() : interrupt_count_(0)
 8020fb4:	b480      	push	{r7}
 8020fb6:	b083      	sub	sp, #12
 8020fb8:	af00      	add	r7, sp, #0
 8020fba:	6078      	str	r0, [r7, #4]
           , interrupt_timer_(0) {}
 8020fbc:	687b      	ldr	r3, [r7, #4]
 8020fbe:	2200      	movs	r2, #0
 8020fc0:	701a      	strb	r2, [r3, #0]
 8020fc2:	687b      	ldr	r3, [r7, #4]
 8020fc4:	2200      	movs	r2, #0
 8020fc6:	705a      	strb	r2, [r3, #1]
 8020fc8:	687b      	ldr	r3, [r7, #4]
 8020fca:	4618      	mov	r0, r3
 8020fcc:	370c      	adds	r7, #12
 8020fce:	46bd      	mov	sp, r7
 8020fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fd4:	4770      	bx	lr
	...

08020fd8 <_ZN3Led10ColorOrderEc>:

void Led::ColorOrder(char color)
{
 8020fd8:	b580      	push	{r7, lr}
 8020fda:	b082      	sub	sp, #8
 8020fdc:	af00      	add	r7, sp, #0
 8020fde:	6078      	str	r0, [r7, #4]
 8020fe0:	460b      	mov	r3, r1
 8020fe2:	70fb      	strb	r3, [r7, #3]
    switch(color)
 8020fe4:	78fb      	ldrb	r3, [r7, #3]
 8020fe6:	3b42      	subs	r3, #66	; 0x42
 8020fe8:	2b17      	cmp	r3, #23
 8020fea:	f200 80b8 	bhi.w	802115e <_ZN3Led10ColorOrderEc+0x186>
 8020fee:	a201      	add	r2, pc, #4	; (adr r2, 8020ff4 <_ZN3Led10ColorOrderEc+0x1c>)
 8020ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020ff4:	080210a1 	.word	0x080210a1
 8020ff8:	080210ed 	.word	0x080210ed
 8020ffc:	0802115f 	.word	0x0802115f
 8021000:	0802115f 	.word	0x0802115f
 8021004:	0802115f 	.word	0x0802115f
 8021008:	0802107b 	.word	0x0802107b
 802100c:	0802115f 	.word	0x0802115f
 8021010:	0802115f 	.word	0x0802115f
 8021014:	0802115f 	.word	0x0802115f
 8021018:	0802115f 	.word	0x0802115f
 802101c:	0802115f 	.word	0x0802115f
 8021020:	08021113 	.word	0x08021113
 8021024:	0802115f 	.word	0x0802115f
 8021028:	0802115f 	.word	0x0802115f
 802102c:	0802115f 	.word	0x0802115f
 8021030:	0802115f 	.word	0x0802115f
 8021034:	08021055 	.word	0x08021055
 8021038:	0802115f 	.word	0x0802115f
 802103c:	0802115f 	.word	0x0802115f
 8021040:	0802115f 	.word	0x0802115f
 8021044:	0802115f 	.word	0x0802115f
 8021048:	08021139 	.word	0x08021139
 802104c:	0802115f 	.word	0x0802115f
 8021050:	080210c7 	.word	0x080210c7
    {
        case 'R': R_ON;  G_OFF; B_OFF; break;
 8021054:	2200      	movs	r2, #0
 8021056:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802105a:	484c      	ldr	r0, [pc, #304]	; (802118c <_ZN3Led10ColorOrderEc+0x1b4>)
 802105c:	f004 fd82 	bl	8025b64 <HAL_GPIO_WritePin>
 8021060:	2201      	movs	r2, #1
 8021062:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021066:	4849      	ldr	r0, [pc, #292]	; (802118c <_ZN3Led10ColorOrderEc+0x1b4>)
 8021068:	f004 fd7c 	bl	8025b64 <HAL_GPIO_WritePin>
 802106c:	2201      	movs	r2, #1
 802106e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021072:	4846      	ldr	r0, [pc, #280]	; (802118c <_ZN3Led10ColorOrderEc+0x1b4>)
 8021074:	f004 fd76 	bl	8025b64 <HAL_GPIO_WritePin>
 8021078:	e084      	b.n	8021184 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'G': R_OFF; G_ON;  B_OFF; break;
 802107a:	2201      	movs	r2, #1
 802107c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021080:	4842      	ldr	r0, [pc, #264]	; (802118c <_ZN3Led10ColorOrderEc+0x1b4>)
 8021082:	f004 fd6f 	bl	8025b64 <HAL_GPIO_WritePin>
 8021086:	2200      	movs	r2, #0
 8021088:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802108c:	483f      	ldr	r0, [pc, #252]	; (802118c <_ZN3Led10ColorOrderEc+0x1b4>)
 802108e:	f004 fd69 	bl	8025b64 <HAL_GPIO_WritePin>
 8021092:	2201      	movs	r2, #1
 8021094:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021098:	483c      	ldr	r0, [pc, #240]	; (802118c <_ZN3Led10ColorOrderEc+0x1b4>)
 802109a:	f004 fd63 	bl	8025b64 <HAL_GPIO_WritePin>
 802109e:	e071      	b.n	8021184 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'B': R_OFF; G_OFF; B_ON;  break;
 80210a0:	2201      	movs	r2, #1
 80210a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80210a6:	4839      	ldr	r0, [pc, #228]	; (802118c <_ZN3Led10ColorOrderEc+0x1b4>)
 80210a8:	f004 fd5c 	bl	8025b64 <HAL_GPIO_WritePin>
 80210ac:	2201      	movs	r2, #1
 80210ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80210b2:	4836      	ldr	r0, [pc, #216]	; (802118c <_ZN3Led10ColorOrderEc+0x1b4>)
 80210b4:	f004 fd56 	bl	8025b64 <HAL_GPIO_WritePin>
 80210b8:	2200      	movs	r2, #0
 80210ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80210be:	4833      	ldr	r0, [pc, #204]	; (802118c <_ZN3Led10ColorOrderEc+0x1b4>)
 80210c0:	f004 fd50 	bl	8025b64 <HAL_GPIO_WritePin>
 80210c4:	e05e      	b.n	8021184 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'Y': R_ON;  G_ON;  B_OFF; break;
 80210c6:	2200      	movs	r2, #0
 80210c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80210cc:	482f      	ldr	r0, [pc, #188]	; (802118c <_ZN3Led10ColorOrderEc+0x1b4>)
 80210ce:	f004 fd49 	bl	8025b64 <HAL_GPIO_WritePin>
 80210d2:	2200      	movs	r2, #0
 80210d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80210d8:	482c      	ldr	r0, [pc, #176]	; (802118c <_ZN3Led10ColorOrderEc+0x1b4>)
 80210da:	f004 fd43 	bl	8025b64 <HAL_GPIO_WritePin>
 80210de:	2201      	movs	r2, #1
 80210e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80210e4:	4829      	ldr	r0, [pc, #164]	; (802118c <_ZN3Led10ColorOrderEc+0x1b4>)
 80210e6:	f004 fd3d 	bl	8025b64 <HAL_GPIO_WritePin>
 80210ea:	e04b      	b.n	8021184 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'C': R_OFF; G_ON;  B_ON;  break;
 80210ec:	2201      	movs	r2, #1
 80210ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80210f2:	4826      	ldr	r0, [pc, #152]	; (802118c <_ZN3Led10ColorOrderEc+0x1b4>)
 80210f4:	f004 fd36 	bl	8025b64 <HAL_GPIO_WritePin>
 80210f8:	2200      	movs	r2, #0
 80210fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80210fe:	4823      	ldr	r0, [pc, #140]	; (802118c <_ZN3Led10ColorOrderEc+0x1b4>)
 8021100:	f004 fd30 	bl	8025b64 <HAL_GPIO_WritePin>
 8021104:	2200      	movs	r2, #0
 8021106:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802110a:	4820      	ldr	r0, [pc, #128]	; (802118c <_ZN3Led10ColorOrderEc+0x1b4>)
 802110c:	f004 fd2a 	bl	8025b64 <HAL_GPIO_WritePin>
 8021110:	e038      	b.n	8021184 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'M': R_ON;  G_OFF; B_ON;  break;
 8021112:	2200      	movs	r2, #0
 8021114:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021118:	481c      	ldr	r0, [pc, #112]	; (802118c <_ZN3Led10ColorOrderEc+0x1b4>)
 802111a:	f004 fd23 	bl	8025b64 <HAL_GPIO_WritePin>
 802111e:	2201      	movs	r2, #1
 8021120:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021124:	4819      	ldr	r0, [pc, #100]	; (802118c <_ZN3Led10ColorOrderEc+0x1b4>)
 8021126:	f004 fd1d 	bl	8025b64 <HAL_GPIO_WritePin>
 802112a:	2200      	movs	r2, #0
 802112c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021130:	4816      	ldr	r0, [pc, #88]	; (802118c <_ZN3Led10ColorOrderEc+0x1b4>)
 8021132:	f004 fd17 	bl	8025b64 <HAL_GPIO_WritePin>
 8021136:	e025      	b.n	8021184 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'W': R_ON;  G_ON;  B_ON;  break;
 8021138:	2200      	movs	r2, #0
 802113a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802113e:	4813      	ldr	r0, [pc, #76]	; (802118c <_ZN3Led10ColorOrderEc+0x1b4>)
 8021140:	f004 fd10 	bl	8025b64 <HAL_GPIO_WritePin>
 8021144:	2200      	movs	r2, #0
 8021146:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802114a:	4810      	ldr	r0, [pc, #64]	; (802118c <_ZN3Led10ColorOrderEc+0x1b4>)
 802114c:	f004 fd0a 	bl	8025b64 <HAL_GPIO_WritePin>
 8021150:	2200      	movs	r2, #0
 8021152:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021156:	480d      	ldr	r0, [pc, #52]	; (802118c <_ZN3Led10ColorOrderEc+0x1b4>)
 8021158:	f004 fd04 	bl	8025b64 <HAL_GPIO_WritePin>
 802115c:	e012      	b.n	8021184 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'X': // fall through
        default:  R_OFF; G_OFF; B_OFF; break;
 802115e:	2201      	movs	r2, #1
 8021160:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021164:	4809      	ldr	r0, [pc, #36]	; (802118c <_ZN3Led10ColorOrderEc+0x1b4>)
 8021166:	f004 fcfd 	bl	8025b64 <HAL_GPIO_WritePin>
 802116a:	2201      	movs	r2, #1
 802116c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021170:	4806      	ldr	r0, [pc, #24]	; (802118c <_ZN3Led10ColorOrderEc+0x1b4>)
 8021172:	f004 fcf7 	bl	8025b64 <HAL_GPIO_WritePin>
 8021176:	2201      	movs	r2, #1
 8021178:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802117c:	4803      	ldr	r0, [pc, #12]	; (802118c <_ZN3Led10ColorOrderEc+0x1b4>)
 802117e:	f004 fcf1 	bl	8025b64 <HAL_GPIO_WritePin>
 8021182:	bf00      	nop
    }
}
 8021184:	bf00      	nop
 8021186:	3708      	adds	r7, #8
 8021188:	46bd      	mov	sp, r7
 802118a:	bd80      	pop	{r7, pc}
 802118c:	40020800 	.word	0x40020800

08021190 <_ZN3Led5BlinkEhcc>:

void Led::Blink(uint8_t times, char color_1, char color_2)
{
 8021190:	b580      	push	{r7, lr}
 8021192:	b084      	sub	sp, #16
 8021194:	af00      	add	r7, sp, #0
 8021196:	6078      	str	r0, [r7, #4]
 8021198:	4608      	mov	r0, r1
 802119a:	4611      	mov	r1, r2
 802119c:	461a      	mov	r2, r3
 802119e:	4603      	mov	r3, r0
 80211a0:	70fb      	strb	r3, [r7, #3]
 80211a2:	460b      	mov	r3, r1
 80211a4:	70bb      	strb	r3, [r7, #2]
 80211a6:	4613      	mov	r3, r2
 80211a8:	707b      	strb	r3, [r7, #1]
    for(uint8_t i = 0; i < times; i++)
 80211aa:	2300      	movs	r3, #0
 80211ac:	73fb      	strb	r3, [r7, #15]
 80211ae:	7bfa      	ldrb	r2, [r7, #15]
 80211b0:	78fb      	ldrb	r3, [r7, #3]
 80211b2:	429a      	cmp	r2, r3
 80211b4:	d215      	bcs.n	80211e2 <_ZN3Led5BlinkEhcc+0x52>
    {
        ColorOrder(color_1);
 80211b6:	78bb      	ldrb	r3, [r7, #2]
 80211b8:	4619      	mov	r1, r3
 80211ba:	6878      	ldr	r0, [r7, #4]
 80211bc:	f7ff ff0c 	bl	8020fd8 <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 80211c0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80211c4:	f003 fa86 	bl	80246d4 <HAL_Delay>
        ColorOrder(color_2);
 80211c8:	787b      	ldrb	r3, [r7, #1]
 80211ca:	4619      	mov	r1, r3
 80211cc:	6878      	ldr	r0, [r7, #4]
 80211ce:	f7ff ff03 	bl	8020fd8 <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 80211d2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80211d6:	f003 fa7d 	bl	80246d4 <HAL_Delay>
    for(uint8_t i = 0; i < times; i++)
 80211da:	7bfb      	ldrb	r3, [r7, #15]
 80211dc:	3301      	adds	r3, #1
 80211de:	73fb      	strb	r3, [r7, #15]
 80211e0:	e7e5      	b.n	80211ae <_ZN3Led5BlinkEhcc+0x1e>
    }
}
 80211e2:	bf00      	nop
 80211e4:	3710      	adds	r7, #16
 80211e6:	46bd      	mov	sp, r7
 80211e8:	bd80      	pop	{r7, pc}

080211ea <_ZN10LineSensorC1Ev>:
#include "line_sensor.hpp"

LineSensor::LineSensor() : line_sensors_buff_{0}
 80211ea:	b580      	push	{r7, lr}
 80211ec:	b082      	sub	sp, #8
 80211ee:	af00      	add	r7, sp, #0
 80211f0:	6078      	str	r0, [r7, #4]
                         , consecutive_line_sensors_buff_{{0}}
                         , max_line_sensors_valu_{0}
                         , min_line_sensors_valu_{0}
                         , line_sensors_valu_{0}
                         , emergency_stop_flag_(false) {}
 80211f2:	687b      	ldr	r3, [r7, #4]
 80211f4:	461a      	mov	r2, r3
 80211f6:	2300      	movs	r3, #0
 80211f8:	6013      	str	r3, [r2, #0]
 80211fa:	6053      	str	r3, [r2, #4]
 80211fc:	6093      	str	r3, [r2, #8]
 80211fe:	60d3      	str	r3, [r2, #12]
 8021200:	6113      	str	r3, [r2, #16]
 8021202:	6153      	str	r3, [r2, #20]
 8021204:	6193      	str	r3, [r2, #24]
 8021206:	687b      	ldr	r3, [r7, #4]
 8021208:	331c      	adds	r3, #28
 802120a:	f44f 728c 	mov.w	r2, #280	; 0x118
 802120e:	2100      	movs	r1, #0
 8021210:	4618      	mov	r0, r3
 8021212:	f006 faec 	bl	80277ee <memset>
 8021216:	687b      	ldr	r3, [r7, #4]
 8021218:	f503 739a 	add.w	r3, r3, #308	; 0x134
 802121c:	2200      	movs	r2, #0
 802121e:	601a      	str	r2, [r3, #0]
 8021220:	605a      	str	r2, [r3, #4]
 8021222:	609a      	str	r2, [r3, #8]
 8021224:	60da      	str	r2, [r3, #12]
 8021226:	611a      	str	r2, [r3, #16]
 8021228:	615a      	str	r2, [r3, #20]
 802122a:	619a      	str	r2, [r3, #24]
 802122c:	687b      	ldr	r3, [r7, #4]
 802122e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8021232:	2200      	movs	r2, #0
 8021234:	601a      	str	r2, [r3, #0]
 8021236:	605a      	str	r2, [r3, #4]
 8021238:	609a      	str	r2, [r3, #8]
 802123a:	60da      	str	r2, [r3, #12]
 802123c:	611a      	str	r2, [r3, #16]
 802123e:	615a      	str	r2, [r3, #20]
 8021240:	619a      	str	r2, [r3, #24]
 8021242:	687b      	ldr	r3, [r7, #4]
 8021244:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8021248:	2200      	movs	r2, #0
 802124a:	601a      	str	r2, [r3, #0]
 802124c:	605a      	str	r2, [r3, #4]
 802124e:	609a      	str	r2, [r3, #8]
 8021250:	60da      	str	r2, [r3, #12]
 8021252:	611a      	str	r2, [r3, #16]
 8021254:	615a      	str	r2, [r3, #20]
 8021256:	619a      	str	r2, [r3, #24]
 8021258:	687b      	ldr	r3, [r7, #4]
 802125a:	2200      	movs	r2, #0
 802125c:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 8021260:	687b      	ldr	r3, [r7, #4]
 8021262:	4618      	mov	r0, r3
 8021264:	3708      	adds	r7, #8
 8021266:	46bd      	mov	sp, r7
 8021268:	bd80      	pop	{r7, pc}
	...

0802126c <_ZN10LineSensor4InitEv>:

void LineSensor::Init()
{
 802126c:	b580      	push	{r7, lr}
 802126e:	b082      	sub	sp, #8
 8021270:	af00      	add	r7, sp, #0
 8021272:	6078      	str	r0, [r7, #4]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)line_sensors_buff_, NUM_OF_LINE_SENSORS) != HAL_OK)
 8021274:	687b      	ldr	r3, [r7, #4]
 8021276:	220e      	movs	r2, #14
 8021278:	4619      	mov	r1, r3
 802127a:	4815      	ldr	r0, [pc, #84]	; (80212d0 <_ZN10LineSensor4InitEv+0x64>)
 802127c:	f003 fa90 	bl	80247a0 <HAL_ADC_Start_DMA>
 8021280:	4603      	mov	r3, r0
 8021282:	2b00      	cmp	r3, #0
 8021284:	bf14      	ite	ne
 8021286:	2301      	movne	r3, #1
 8021288:	2300      	moveq	r3, #0
 802128a:	b2db      	uxtb	r3, r3
 802128c:	2b00      	cmp	r3, #0
 802128e:	d004      	beq.n	802129a <_ZN10LineSensor4InitEv+0x2e>
    {
#ifdef DEBUG_MODE
        g_error_handler_adc1 = true;
 8021290:	4b10      	ldr	r3, [pc, #64]	; (80212d4 <_ZN10LineSensor4InitEv+0x68>)
 8021292:	2201      	movs	r2, #1
 8021294:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8021296:	f001 faa5 	bl	80227e4 <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1) != HAL_OK)
 802129a:	2100      	movs	r1, #0
 802129c:	480e      	ldr	r0, [pc, #56]	; (80212d8 <_ZN10LineSensor4InitEv+0x6c>)
 802129e:	f005 fab9 	bl	8026814 <HAL_TIM_PWM_Start>
 80212a2:	4603      	mov	r3, r0
 80212a4:	2b00      	cmp	r3, #0
 80212a6:	bf14      	ite	ne
 80212a8:	2301      	movne	r3, #1
 80212aa:	2300      	moveq	r3, #0
 80212ac:	b2db      	uxtb	r3, r3
 80212ae:	2b00      	cmp	r3, #0
 80212b0:	d004      	beq.n	80212bc <_ZN10LineSensor4InitEv+0x50>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim11 = true;
 80212b2:	4b0a      	ldr	r3, [pc, #40]	; (80212dc <_ZN10LineSensor4InitEv+0x70>)
 80212b4:	2201      	movs	r2, #1
 80212b6:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 80212b8:	f001 fa94 	bl	80227e4 <Error_Handler>
    }

    __HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, LINE_SENSORS_LED_COMPARE);
 80212bc:	4b06      	ldr	r3, [pc, #24]	; (80212d8 <_ZN10LineSensor4InitEv+0x6c>)
 80212be:	681b      	ldr	r3, [r3, #0]
 80212c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80212c4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80212c6:	bf00      	nop
 80212c8:	3708      	adds	r7, #8
 80212ca:	46bd      	mov	sp, r7
 80212cc:	bd80      	pop	{r7, pc}
 80212ce:	bf00      	nop
 80212d0:	20011644 	.word	0x20011644
 80212d4:	200004d2 	.word	0x200004d2
 80212d8:	2001168c 	.word	0x2001168c
 80212dc:	200004d3 	.word	0x200004d3

080212e0 <_ZN10LineSensor20StoreConsecutiveBuffEv>:

void LineSensor::StoreConsecutiveBuff()
{
 80212e0:	b480      	push	{r7}
 80212e2:	b085      	sub	sp, #20
 80212e4:	af00      	add	r7, sp, #0
 80212e6:	6078      	str	r0, [r7, #4]
    static uint8_t times = 0;

    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 80212e8:	2300      	movs	r3, #0
 80212ea:	60fb      	str	r3, [r7, #12]
 80212ec:	68fb      	ldr	r3, [r7, #12]
 80212ee:	2b0d      	cmp	r3, #13
 80212f0:	dc16      	bgt.n	8021320 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x40>
    {
        consecutive_line_sensors_buff_[times][i] = line_sensors_buff_[i];
 80212f2:	4b15      	ldr	r3, [pc, #84]	; (8021348 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 80212f4:	781b      	ldrb	r3, [r3, #0]
 80212f6:	4619      	mov	r1, r3
 80212f8:	687b      	ldr	r3, [r7, #4]
 80212fa:	68fa      	ldr	r2, [r7, #12]
 80212fc:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8021300:	687a      	ldr	r2, [r7, #4]
 8021302:	460b      	mov	r3, r1
 8021304:	00db      	lsls	r3, r3, #3
 8021306:	1a5b      	subs	r3, r3, r1
 8021308:	005b      	lsls	r3, r3, #1
 802130a:	68f9      	ldr	r1, [r7, #12]
 802130c:	440b      	add	r3, r1
 802130e:	330c      	adds	r3, #12
 8021310:	005b      	lsls	r3, r3, #1
 8021312:	4413      	add	r3, r2
 8021314:	4602      	mov	r2, r0
 8021316:	809a      	strh	r2, [r3, #4]
    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021318:	68fb      	ldr	r3, [r7, #12]
 802131a:	3301      	adds	r3, #1
 802131c:	60fb      	str	r3, [r7, #12]
 802131e:	e7e5      	b.n	80212ec <_ZN10LineSensor20StoreConsecutiveBuffEv+0xc>
    }

    times++;
 8021320:	4b09      	ldr	r3, [pc, #36]	; (8021348 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021322:	781b      	ldrb	r3, [r3, #0]
 8021324:	3301      	adds	r3, #1
 8021326:	b2da      	uxtb	r2, r3
 8021328:	4b07      	ldr	r3, [pc, #28]	; (8021348 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 802132a:	701a      	strb	r2, [r3, #0]
    if(times >= CONSECUTIVE_TIMES) times = 0;
 802132c:	4b06      	ldr	r3, [pc, #24]	; (8021348 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 802132e:	781b      	ldrb	r3, [r3, #0]
 8021330:	2b09      	cmp	r3, #9
 8021332:	d902      	bls.n	802133a <_ZN10LineSensor20StoreConsecutiveBuffEv+0x5a>
 8021334:	4b04      	ldr	r3, [pc, #16]	; (8021348 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021336:	2200      	movs	r2, #0
 8021338:	701a      	strb	r2, [r3, #0]
}
 802133a:	bf00      	nop
 802133c:	3714      	adds	r7, #20
 802133e:	46bd      	mov	sp, r7
 8021340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021344:	4770      	bx	lr
 8021346:	bf00      	nop
 8021348:	200001fc 	.word	0x200001fc

0802134c <_ZN10LineSensor9MergeSortEPthh>:

void LineSensor::MergeSort(uint16_t array[], uint8_t first_index, uint8_t last_index)
{
 802134c:	b5b0      	push	{r4, r5, r7, lr}
 802134e:	b088      	sub	sp, #32
 8021350:	af00      	add	r7, sp, #0
 8021352:	60f8      	str	r0, [r7, #12]
 8021354:	60b9      	str	r1, [r7, #8]
 8021356:	4611      	mov	r1, r2
 8021358:	461a      	mov	r2, r3
 802135a:	460b      	mov	r3, r1
 802135c:	71fb      	strb	r3, [r7, #7]
 802135e:	4613      	mov	r3, r2
 8021360:	71bb      	strb	r3, [r7, #6]

    for(i = first_index; i <= last_index; i++)
    {
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
        else                                     array[i] = temp_array[right--];
    }
 8021362:	466b      	mov	r3, sp
 8021364:	461d      	mov	r5, r3
    if(first_index >= last_index) return;
 8021366:	79fa      	ldrb	r2, [r7, #7]
 8021368:	79bb      	ldrb	r3, [r7, #6]
 802136a:	429a      	cmp	r2, r3
 802136c:	f080 80ba 	bcs.w	80214e4 <_ZN10LineSensor9MergeSortEPthh+0x198>
    uint16_t temp_array[last_index+1];
 8021370:	79b8      	ldrb	r0, [r7, #6]
 8021372:	61b8      	str	r0, [r7, #24]
 8021374:	4603      	mov	r3, r0
 8021376:	3301      	adds	r3, #1
 8021378:	4619      	mov	r1, r3
 802137a:	f04f 0200 	mov.w	r2, #0
 802137e:	f04f 0300 	mov.w	r3, #0
 8021382:	f04f 0400 	mov.w	r4, #0
 8021386:	0114      	lsls	r4, r2, #4
 8021388:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 802138c:	010b      	lsls	r3, r1, #4
 802138e:	4603      	mov	r3, r0
 8021390:	3301      	adds	r3, #1
 8021392:	4619      	mov	r1, r3
 8021394:	f04f 0200 	mov.w	r2, #0
 8021398:	f04f 0300 	mov.w	r3, #0
 802139c:	f04f 0400 	mov.w	r4, #0
 80213a0:	0114      	lsls	r4, r2, #4
 80213a2:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80213a6:	010b      	lsls	r3, r1, #4
 80213a8:	4603      	mov	r3, r0
 80213aa:	3301      	adds	r3, #1
 80213ac:	005b      	lsls	r3, r3, #1
 80213ae:	3301      	adds	r3, #1
 80213b0:	3307      	adds	r3, #7
 80213b2:	08db      	lsrs	r3, r3, #3
 80213b4:	00db      	lsls	r3, r3, #3
 80213b6:	ebad 0d03 	sub.w	sp, sp, r3
 80213ba:	466b      	mov	r3, sp
 80213bc:	3301      	adds	r3, #1
 80213be:	085b      	lsrs	r3, r3, #1
 80213c0:	005b      	lsls	r3, r3, #1
 80213c2:	617b      	str	r3, [r7, #20]
    middle = (first_index + last_index) / 2;
 80213c4:	79fa      	ldrb	r2, [r7, #7]
 80213c6:	79bb      	ldrb	r3, [r7, #6]
 80213c8:	4413      	add	r3, r2
 80213ca:	0fda      	lsrs	r2, r3, #31
 80213cc:	4413      	add	r3, r2
 80213ce:	105b      	asrs	r3, r3, #1
 80213d0:	74fb      	strb	r3, [r7, #19]
    MergeSort(array, first_index, middle);
 80213d2:	7cfb      	ldrb	r3, [r7, #19]
 80213d4:	79fa      	ldrb	r2, [r7, #7]
 80213d6:	68b9      	ldr	r1, [r7, #8]
 80213d8:	68f8      	ldr	r0, [r7, #12]
 80213da:	f7ff ffb7 	bl	802134c <_ZN10LineSensor9MergeSortEPthh>
    MergeSort(array, middle+1, last_index);
 80213de:	7cfb      	ldrb	r3, [r7, #19]
 80213e0:	3301      	adds	r3, #1
 80213e2:	b2da      	uxtb	r2, r3
 80213e4:	79bb      	ldrb	r3, [r7, #6]
 80213e6:	68b9      	ldr	r1, [r7, #8]
 80213e8:	68f8      	ldr	r0, [r7, #12]
 80213ea:	f7ff ffaf 	bl	802134c <_ZN10LineSensor9MergeSortEPthh>
    for(i = middle; i >= first_index; i--)
 80213ee:	7cfb      	ldrb	r3, [r7, #19]
 80213f0:	77bb      	strb	r3, [r7, #30]
 80213f2:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80213f6:	79fb      	ldrb	r3, [r7, #7]
 80213f8:	429a      	cmp	r2, r3
 80213fa:	db11      	blt.n	8021420 <_ZN10LineSensor9MergeSortEPthh+0xd4>
        temp_array[i] = array[i];
 80213fc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021400:	005b      	lsls	r3, r3, #1
 8021402:	68ba      	ldr	r2, [r7, #8]
 8021404:	4413      	add	r3, r2
 8021406:	f997 201e 	ldrsb.w	r2, [r7, #30]
 802140a:	8819      	ldrh	r1, [r3, #0]
 802140c:	697b      	ldr	r3, [r7, #20]
 802140e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle; i >= first_index; i--)
 8021412:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021416:	b2db      	uxtb	r3, r3
 8021418:	3b01      	subs	r3, #1
 802141a:	b2db      	uxtb	r3, r3
 802141c:	77bb      	strb	r3, [r7, #30]
 802141e:	e7e8      	b.n	80213f2 <_ZN10LineSensor9MergeSortEPthh+0xa6>
    for(i = middle+1; i <= last_index; i++)
 8021420:	7cfb      	ldrb	r3, [r7, #19]
 8021422:	3301      	adds	r3, #1
 8021424:	b2db      	uxtb	r3, r3
 8021426:	77bb      	strb	r3, [r7, #30]
 8021428:	f997 201e 	ldrsb.w	r2, [r7, #30]
 802142c:	79bb      	ldrb	r3, [r7, #6]
 802142e:	429a      	cmp	r2, r3
 8021430:	dc17      	bgt.n	8021462 <_ZN10LineSensor9MergeSortEPthh+0x116>
        temp_array[last_index - (i - (middle+1))] = array[i];
 8021432:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021436:	005b      	lsls	r3, r3, #1
 8021438:	68ba      	ldr	r2, [r7, #8]
 802143a:	4413      	add	r3, r2
 802143c:	79b9      	ldrb	r1, [r7, #6]
 802143e:	f997 001e 	ldrsb.w	r0, [r7, #30]
 8021442:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8021446:	3201      	adds	r2, #1
 8021448:	1a82      	subs	r2, r0, r2
 802144a:	1a8a      	subs	r2, r1, r2
 802144c:	8819      	ldrh	r1, [r3, #0]
 802144e:	697b      	ldr	r3, [r7, #20]
 8021450:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle+1; i <= last_index; i++)
 8021454:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021458:	b2db      	uxtb	r3, r3
 802145a:	3301      	adds	r3, #1
 802145c:	b2db      	uxtb	r3, r3
 802145e:	77bb      	strb	r3, [r7, #30]
 8021460:	e7e2      	b.n	8021428 <_ZN10LineSensor9MergeSortEPthh+0xdc>
    left  = first_index;
 8021462:	79fb      	ldrb	r3, [r7, #7]
 8021464:	77fb      	strb	r3, [r7, #31]
    right = last_index;
 8021466:	79bb      	ldrb	r3, [r7, #6]
 8021468:	777b      	strb	r3, [r7, #29]
    for(i = first_index; i <= last_index; i++)
 802146a:	79fb      	ldrb	r3, [r7, #7]
 802146c:	77bb      	strb	r3, [r7, #30]
 802146e:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021472:	79bb      	ldrb	r3, [r7, #6]
 8021474:	429a      	cmp	r2, r3
 8021476:	dc33      	bgt.n	80214e0 <_ZN10LineSensor9MergeSortEPthh+0x194>
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
 8021478:	f997 201f 	ldrsb.w	r2, [r7, #31]
 802147c:	697b      	ldr	r3, [r7, #20]
 802147e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8021482:	f997 101d 	ldrsb.w	r1, [r7, #29]
 8021486:	697b      	ldr	r3, [r7, #20]
 8021488:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 802148c:	429a      	cmp	r2, r3
 802148e:	d210      	bcs.n	80214b2 <_ZN10LineSensor9MergeSortEPthh+0x166>
 8021490:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8021494:	b2d3      	uxtb	r3, r2
 8021496:	3301      	adds	r3, #1
 8021498:	b2db      	uxtb	r3, r3
 802149a:	77fb      	strb	r3, [r7, #31]
 802149c:	4611      	mov	r1, r2
 802149e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80214a2:	005b      	lsls	r3, r3, #1
 80214a4:	68ba      	ldr	r2, [r7, #8]
 80214a6:	4413      	add	r3, r2
 80214a8:	697a      	ldr	r2, [r7, #20]
 80214aa:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80214ae:	801a      	strh	r2, [r3, #0]
 80214b0:	e00f      	b.n	80214d2 <_ZN10LineSensor9MergeSortEPthh+0x186>
        else                                     array[i] = temp_array[right--];
 80214b2:	f997 201d 	ldrsb.w	r2, [r7, #29]
 80214b6:	b2d3      	uxtb	r3, r2
 80214b8:	3b01      	subs	r3, #1
 80214ba:	b2db      	uxtb	r3, r3
 80214bc:	777b      	strb	r3, [r7, #29]
 80214be:	4611      	mov	r1, r2
 80214c0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80214c4:	005b      	lsls	r3, r3, #1
 80214c6:	68ba      	ldr	r2, [r7, #8]
 80214c8:	4413      	add	r3, r2
 80214ca:	697a      	ldr	r2, [r7, #20]
 80214cc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80214d0:	801a      	strh	r2, [r3, #0]
    for(i = first_index; i <= last_index; i++)
 80214d2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80214d6:	b2db      	uxtb	r3, r3
 80214d8:	3301      	adds	r3, #1
 80214da:	b2db      	uxtb	r3, r3
 80214dc:	77bb      	strb	r3, [r7, #30]
 80214de:	e7c6      	b.n	802146e <_ZN10LineSensor9MergeSortEPthh+0x122>
 80214e0:	46ad      	mov	sp, r5
 80214e2:	e001      	b.n	80214e8 <_ZN10LineSensor9MergeSortEPthh+0x19c>
    if(first_index >= last_index) return;
 80214e4:	bf00      	nop
 80214e6:	46ad      	mov	sp, r5
}
 80214e8:	3720      	adds	r7, #32
 80214ea:	46bd      	mov	sp, r7
 80214ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

080214f0 <_ZN10LineSensor6UpdateEv>:

void LineSensor::Update()
{
 80214f0:	b590      	push	{r4, r7, lr}
 80214f2:	b08b      	sub	sp, #44	; 0x2c
 80214f4:	af00      	add	r7, sp, #0
 80214f6:	6078      	str	r0, [r7, #4]
    uint8_t i, j;
    uint16_t temp_array[CONSECUTIVE_TIMES];
    uint16_t median, max, min, normalized;
    bool emergency = true;
 80214f8:	2301      	movs	r3, #1
 80214fa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 80214fe:	2300      	movs	r3, #0
 8021500:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021508:	2b0d      	cmp	r3, #13
 802150a:	f200 80c8 	bhi.w	802169e <_ZN10LineSensor6UpdateEv+0x1ae>
    {
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 802150e:	2300      	movs	r3, #0
 8021510:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021514:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021518:	2b09      	cmp	r3, #9
 802151a:	d81b      	bhi.n	8021554 <_ZN10LineSensor6UpdateEv+0x64>
        {
            temp_array[j] = consecutive_line_sensors_buff_[j][i];
 802151c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8021520:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8021524:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8021528:	6878      	ldr	r0, [r7, #4]
 802152a:	4613      	mov	r3, r2
 802152c:	00db      	lsls	r3, r3, #3
 802152e:	1a9b      	subs	r3, r3, r2
 8021530:	005b      	lsls	r3, r3, #1
 8021532:	4423      	add	r3, r4
 8021534:	330c      	adds	r3, #12
 8021536:	005b      	lsls	r3, r3, #1
 8021538:	4403      	add	r3, r0
 802153a:	889a      	ldrh	r2, [r3, #4]
 802153c:	004b      	lsls	r3, r1, #1
 802153e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8021542:	440b      	add	r3, r1
 8021544:	f823 2c20 	strh.w	r2, [r3, #-32]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021548:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802154c:	3301      	adds	r3, #1
 802154e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021552:	e7df      	b.n	8021514 <_ZN10LineSensor6UpdateEv+0x24>
        }

        MergeSort(temp_array, 0, CONSECUTIVE_TIMES-1);
 8021554:	f107 0108 	add.w	r1, r7, #8
 8021558:	2309      	movs	r3, #9
 802155a:	2200      	movs	r2, #0
 802155c:	6878      	ldr	r0, [r7, #4]
 802155e:	f7ff fef5 	bl	802134c <_ZN10LineSensor9MergeSortEPthh>
        median = temp_array[HALF_CONSECUTIVE_TIMES];
 8021562:	8a7b      	ldrh	r3, [r7, #18]
 8021564:	83fb      	strh	r3, [r7, #30]

#ifdef DEBUG_MODE
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021566:	2300      	movs	r3, #0
 8021568:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 802156c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021570:	2b09      	cmp	r3, #9
 8021572:	d81a      	bhi.n	80215aa <_ZN10LineSensor6UpdateEv+0xba>
        {
            g_consecutive_line_buff[i][j] = temp_array[j];
 8021574:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021578:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802157c:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8021580:	005b      	lsls	r3, r3, #1
 8021582:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8021586:	4403      	add	r3, r0
 8021588:	f833 4c20 	ldrh.w	r4, [r3, #-32]
 802158c:	4848      	ldr	r0, [pc, #288]	; (80216b0 <_ZN10LineSensor6UpdateEv+0x1c0>)
 802158e:	4613      	mov	r3, r2
 8021590:	009b      	lsls	r3, r3, #2
 8021592:	4413      	add	r3, r2
 8021594:	005b      	lsls	r3, r3, #1
 8021596:	440b      	add	r3, r1
 8021598:	4622      	mov	r2, r4
 802159a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 802159e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80215a2:	3301      	adds	r3, #1
 80215a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80215a8:	e7e0      	b.n	802156c <_ZN10LineSensor6UpdateEv+0x7c>
        }
#endif // DEBUG_MODE

        max = max_line_sensors_valu_[i];
 80215aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80215ae:	687a      	ldr	r2, [r7, #4]
 80215b0:	3398      	adds	r3, #152	; 0x98
 80215b2:	005b      	lsls	r3, r3, #1
 80215b4:	4413      	add	r3, r2
 80215b6:	889b      	ldrh	r3, [r3, #4]
 80215b8:	84bb      	strh	r3, [r7, #36]	; 0x24
        min = min_line_sensors_valu_[i];
 80215ba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80215be:	687b      	ldr	r3, [r7, #4]
 80215c0:	32a8      	adds	r2, #168	; 0xa8
 80215c2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80215c6:	847b      	strh	r3, [r7, #34]	; 0x22
        if(max < median || max == 0) max = median;
 80215c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80215ca:	8bfb      	ldrh	r3, [r7, #30]
 80215cc:	429a      	cmp	r2, r3
 80215ce:	d302      	bcc.n	80215d6 <_ZN10LineSensor6UpdateEv+0xe6>
 80215d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80215d2:	2b00      	cmp	r3, #0
 80215d4:	d101      	bne.n	80215da <_ZN10LineSensor6UpdateEv+0xea>
 80215d6:	8bfb      	ldrh	r3, [r7, #30]
 80215d8:	84bb      	strh	r3, [r7, #36]	; 0x24
        if(min > median || min == 0) min = median;
 80215da:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80215dc:	8bfb      	ldrh	r3, [r7, #30]
 80215de:	429a      	cmp	r2, r3
 80215e0:	d802      	bhi.n	80215e8 <_ZN10LineSensor6UpdateEv+0xf8>
 80215e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80215e4:	2b00      	cmp	r3, #0
 80215e6:	d101      	bne.n	80215ec <_ZN10LineSensor6UpdateEv+0xfc>
 80215e8:	8bfb      	ldrh	r3, [r7, #30]
 80215ea:	847b      	strh	r3, [r7, #34]	; 0x22
        max_line_sensors_valu_[i] = max;
 80215ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80215f0:	687a      	ldr	r2, [r7, #4]
 80215f2:	3398      	adds	r3, #152	; 0x98
 80215f4:	005b      	lsls	r3, r3, #1
 80215f6:	4413      	add	r3, r2
 80215f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80215fa:	809a      	strh	r2, [r3, #4]
        min_line_sensors_valu_[i] = min;
 80215fc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021600:	687b      	ldr	r3, [r7, #4]
 8021602:	32a8      	adds	r2, #168	; 0xa8
 8021604:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8021606:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

#ifdef DEBUG_MODE
        g_max_line_valu[i] = max_line_sensors_valu_[i];
 802160a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802160e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021612:	6879      	ldr	r1, [r7, #4]
 8021614:	3398      	adds	r3, #152	; 0x98
 8021616:	005b      	lsls	r3, r3, #1
 8021618:	440b      	add	r3, r1
 802161a:	8899      	ldrh	r1, [r3, #4]
 802161c:	4b25      	ldr	r3, [pc, #148]	; (80216b4 <_ZN10LineSensor6UpdateEv+0x1c4>)
 802161e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        g_min_line_valu[i] = min_line_sensors_valu_[i];
 8021622:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8021626:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802162a:	687a      	ldr	r2, [r7, #4]
 802162c:	31a8      	adds	r1, #168	; 0xa8
 802162e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8021632:	4a21      	ldr	r2, [pc, #132]	; (80216b8 <_ZN10LineSensor6UpdateEv+0x1c8>)
 8021634:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#endif // DEBUG_MODE

        if(max > min)
 8021638:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802163a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802163c:	429a      	cmp	r2, r3
 802163e:	d928      	bls.n	8021692 <_ZN10LineSensor6UpdateEv+0x1a2>
        {
            normalized = MAX_NORMALIZED_VALU * (median - min) / (max - min);
 8021640:	8bfa      	ldrh	r2, [r7, #30]
 8021642:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021644:	1ad3      	subs	r3, r2, r3
 8021646:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 802164a:	fb02 f203 	mul.w	r2, r2, r3
 802164e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8021650:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021652:	1acb      	subs	r3, r1, r3
 8021654:	fb92 f3f3 	sdiv	r3, r2, r3
 8021658:	83bb      	strh	r3, [r7, #28]
            line_sensors_valu_[i] = normalized;
 802165a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802165e:	687a      	ldr	r2, [r7, #4]
 8021660:	33b4      	adds	r3, #180	; 0xb4
 8021662:	005b      	lsls	r3, r3, #1
 8021664:	4413      	add	r3, r2
 8021666:	8bba      	ldrh	r2, [r7, #28]
 8021668:	809a      	strh	r2, [r3, #4]

#ifdef DEBUG_MODE
            g_line_valu[i] = line_sensors_valu_[i];
 802166a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802166e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021672:	6879      	ldr	r1, [r7, #4]
 8021674:	33b4      	adds	r3, #180	; 0xb4
 8021676:	005b      	lsls	r3, r3, #1
 8021678:	440b      	add	r3, r1
 802167a:	8899      	ldrh	r1, [r3, #4]
 802167c:	4b0f      	ldr	r3, [pc, #60]	; (80216bc <_ZN10LineSensor6UpdateEv+0x1cc>)
 802167e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
#endif // DEBUG_MODE

            if(normalized < EMERGENCY_STOP_BORDER) emergency = false;
 8021682:	8bbb      	ldrh	r3, [r7, #28]
 8021684:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8021688:	4293      	cmp	r3, r2
 802168a:	d802      	bhi.n	8021692 <_ZN10LineSensor6UpdateEv+0x1a2>
 802168c:	2300      	movs	r3, #0
 802168e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021692:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021696:	3301      	adds	r3, #1
 8021698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802169c:	e732      	b.n	8021504 <_ZN10LineSensor6UpdateEv+0x14>
        }
    }
    emergency_stop_flag_ = emergency;
 802169e:	687b      	ldr	r3, [r7, #4]
 80216a0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80216a4:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
}
 80216a8:	bf00      	nop
 80216aa:	372c      	adds	r7, #44	; 0x2c
 80216ac:	46bd      	mov	sp, r7
 80216ae:	bd90      	pop	{r4, r7, pc}
 80216b0:	200004f4 	.word	0x200004f4
 80216b4:	2000060c 	.word	0x2000060c
 80216b8:	20000628 	.word	0x20000628
 80216bc:	20000644 	.word	0x20000644

080216c0 <_ZN10LineSensor19LeftRightDifferenceEv>:

float LineSensor::LeftRightDifference()
{
 80216c0:	b5b0      	push	{r4, r5, r7, lr}
 80216c2:	b086      	sub	sp, #24
 80216c4:	af00      	add	r7, sp, #0
 80216c6:	6078      	str	r0, [r7, #4]
    uint8_t i;
    uint32_t left = 0, right = 0;
 80216c8:	2300      	movs	r3, #0
 80216ca:	613b      	str	r3, [r7, #16]
 80216cc:	2300      	movs	r3, #0
 80216ce:	60fb      	str	r3, [r7, #12]

    for(i = 0; i < HALF_NUM_OF_LINE_SENSORS; i++)
 80216d0:	2300      	movs	r3, #0
 80216d2:	75fb      	strb	r3, [r7, #23]
 80216d4:	7dfb      	ldrb	r3, [r7, #23]
 80216d6:	2b06      	cmp	r3, #6
 80216d8:	d80d      	bhi.n	80216f6 <_ZN10LineSensor19LeftRightDifferenceEv+0x36>
    {
        left += line_sensors_valu_[i];
 80216da:	7dfb      	ldrb	r3, [r7, #23]
 80216dc:	687a      	ldr	r2, [r7, #4]
 80216de:	33b4      	adds	r3, #180	; 0xb4
 80216e0:	005b      	lsls	r3, r3, #1
 80216e2:	4413      	add	r3, r2
 80216e4:	889b      	ldrh	r3, [r3, #4]
 80216e6:	461a      	mov	r2, r3
 80216e8:	693b      	ldr	r3, [r7, #16]
 80216ea:	4413      	add	r3, r2
 80216ec:	613b      	str	r3, [r7, #16]
    for(i = 0; i < HALF_NUM_OF_LINE_SENSORS; i++)
 80216ee:	7dfb      	ldrb	r3, [r7, #23]
 80216f0:	3301      	adds	r3, #1
 80216f2:	75fb      	strb	r3, [r7, #23]
 80216f4:	e7ee      	b.n	80216d4 <_ZN10LineSensor19LeftRightDifferenceEv+0x14>
    }
    for(i = HALF_NUM_OF_LINE_SENSORS; i < NUM_OF_LINE_SENSORS; i++)
 80216f6:	2307      	movs	r3, #7
 80216f8:	75fb      	strb	r3, [r7, #23]
 80216fa:	7dfb      	ldrb	r3, [r7, #23]
 80216fc:	2b0d      	cmp	r3, #13
 80216fe:	d80d      	bhi.n	802171c <_ZN10LineSensor19LeftRightDifferenceEv+0x5c>
    {
        right += line_sensors_valu_[i];
 8021700:	7dfb      	ldrb	r3, [r7, #23]
 8021702:	687a      	ldr	r2, [r7, #4]
 8021704:	33b4      	adds	r3, #180	; 0xb4
 8021706:	005b      	lsls	r3, r3, #1
 8021708:	4413      	add	r3, r2
 802170a:	889b      	ldrh	r3, [r3, #4]
 802170c:	461a      	mov	r2, r3
 802170e:	68fb      	ldr	r3, [r7, #12]
 8021710:	4413      	add	r3, r2
 8021712:	60fb      	str	r3, [r7, #12]
    for(i = HALF_NUM_OF_LINE_SENSORS; i < NUM_OF_LINE_SENSORS; i++)
 8021714:	7dfb      	ldrb	r3, [r7, #23]
 8021716:	3301      	adds	r3, #1
 8021718:	75fb      	strb	r3, [r7, #23]
 802171a:	e7ee      	b.n	80216fa <_ZN10LineSensor19LeftRightDifferenceEv+0x3a>
    }

#ifdef DEBUG_MODE
    g_line_left = left;
 802171c:	4a11      	ldr	r2, [pc, #68]	; (8021764 <_ZN10LineSensor19LeftRightDifferenceEv+0xa4>)
 802171e:	693b      	ldr	r3, [r7, #16]
 8021720:	6013      	str	r3, [r2, #0]
    g_line_right = right;
 8021722:	4a11      	ldr	r2, [pc, #68]	; (8021768 <_ZN10LineSensor19LeftRightDifferenceEv+0xa8>)
 8021724:	68fb      	ldr	r3, [r7, #12]
 8021726:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    float difference = right * LINE_SENSOR_CORRECTION - left;
 8021728:	68f8      	ldr	r0, [r7, #12]
 802172a:	f7fe fdd3 	bl	80202d4 <__aeabi_ui2d>
 802172e:	4604      	mov	r4, r0
 8021730:	460d      	mov	r5, r1
 8021732:	6938      	ldr	r0, [r7, #16]
 8021734:	f7fe fdce 	bl	80202d4 <__aeabi_ui2d>
 8021738:	4602      	mov	r2, r0
 802173a:	460b      	mov	r3, r1
 802173c:	4620      	mov	r0, r4
 802173e:	4629      	mov	r1, r5
 8021740:	f7fe fc8a 	bl	8020058 <__aeabi_dsub>
 8021744:	4603      	mov	r3, r0
 8021746:	460c      	mov	r4, r1
 8021748:	4618      	mov	r0, r3
 802174a:	4621      	mov	r1, r4
 802174c:	f7ff f914 	bl	8020978 <__aeabi_d2f>
 8021750:	4603      	mov	r3, r0
 8021752:	60bb      	str	r3, [r7, #8]

    return difference;
 8021754:	68bb      	ldr	r3, [r7, #8]
 8021756:	ee07 3a90 	vmov	s15, r3
}
 802175a:	eeb0 0a67 	vmov.f32	s0, s15
 802175e:	3718      	adds	r7, #24
 8021760:	46bd      	mov	sp, r7
 8021762:	bdb0      	pop	{r4, r5, r7, pc}
 8021764:	20000660 	.word	0x20000660
 8021768:	20000664 	.word	0x20000664

0802176c <_ZN10LineSensor20GetEmergencyStopFlagEv>:

bool LineSensor::GetEmergencyStopFlag()
{
 802176c:	b480      	push	{r7}
 802176e:	b083      	sub	sp, #12
 8021770:	af00      	add	r7, sp, #0
 8021772:	6078      	str	r0, [r7, #4]
    return emergency_stop_flag_;
 8021774:	687b      	ldr	r3, [r7, #4]
 8021776:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
}
 802177a:	4618      	mov	r0, r3
 802177c:	370c      	adds	r7, #12
 802177e:	46bd      	mov	sp, r7
 8021780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021784:	4770      	bx	lr
	...

08021788 <_ZN10LineSensor16CheckCalibrationEv>:

bool LineSensor::CheckCalibration()
{
 8021788:	b480      	push	{r7}
 802178a:	b085      	sub	sp, #20
 802178c:	af00      	add	r7, sp, #0
 802178e:	6078      	str	r0, [r7, #4]
    static uint16_t timer = 0;
    static uint16_t pre_max[NUM_OF_LINE_SENSORS] = {0};
    static uint16_t pre_min[NUM_OF_LINE_SENSORS] = {0};
    uint16_t max, min;
    bool result = true;
 8021790:	2301      	movs	r3, #1
 8021792:	73fb      	strb	r3, [r7, #15]

    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021794:	2300      	movs	r3, #0
 8021796:	73bb      	strb	r3, [r7, #14]
 8021798:	7bbb      	ldrb	r3, [r7, #14]
 802179a:	2b0d      	cmp	r3, #13
 802179c:	d82d      	bhi.n	80217fa <_ZN10LineSensor16CheckCalibrationEv+0x72>
    {
        max = max_line_sensors_valu_[i];
 802179e:	7bbb      	ldrb	r3, [r7, #14]
 80217a0:	687a      	ldr	r2, [r7, #4]
 80217a2:	3398      	adds	r3, #152	; 0x98
 80217a4:	005b      	lsls	r3, r3, #1
 80217a6:	4413      	add	r3, r2
 80217a8:	889b      	ldrh	r3, [r3, #4]
 80217aa:	81bb      	strh	r3, [r7, #12]
        min = min_line_sensors_valu_[i];
 80217ac:	7bba      	ldrb	r2, [r7, #14]
 80217ae:	687b      	ldr	r3, [r7, #4]
 80217b0:	32a8      	adds	r2, #168	; 0xa8
 80217b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80217b6:	817b      	strh	r3, [r7, #10]

        if(pre_max[i] != max)      result = false;
 80217b8:	7bbb      	ldrb	r3, [r7, #14]
 80217ba:	4a1e      	ldr	r2, [pc, #120]	; (8021834 <_ZN10LineSensor16CheckCalibrationEv+0xac>)
 80217bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80217c0:	89ba      	ldrh	r2, [r7, #12]
 80217c2:	429a      	cmp	r2, r3
 80217c4:	d002      	beq.n	80217cc <_ZN10LineSensor16CheckCalibrationEv+0x44>
 80217c6:	2300      	movs	r3, #0
 80217c8:	73fb      	strb	r3, [r7, #15]
 80217ca:	e008      	b.n	80217de <_ZN10LineSensor16CheckCalibrationEv+0x56>
        else if(pre_min[i] != min) result = false;
 80217cc:	7bbb      	ldrb	r3, [r7, #14]
 80217ce:	4a1a      	ldr	r2, [pc, #104]	; (8021838 <_ZN10LineSensor16CheckCalibrationEv+0xb0>)
 80217d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80217d4:	897a      	ldrh	r2, [r7, #10]
 80217d6:	429a      	cmp	r2, r3
 80217d8:	d001      	beq.n	80217de <_ZN10LineSensor16CheckCalibrationEv+0x56>
 80217da:	2300      	movs	r3, #0
 80217dc:	73fb      	strb	r3, [r7, #15]

        pre_max[i] = max;
 80217de:	7bbb      	ldrb	r3, [r7, #14]
 80217e0:	4914      	ldr	r1, [pc, #80]	; (8021834 <_ZN10LineSensor16CheckCalibrationEv+0xac>)
 80217e2:	89ba      	ldrh	r2, [r7, #12]
 80217e4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        pre_min[i] = min;
 80217e8:	7bbb      	ldrb	r3, [r7, #14]
 80217ea:	4913      	ldr	r1, [pc, #76]	; (8021838 <_ZN10LineSensor16CheckCalibrationEv+0xb0>)
 80217ec:	897a      	ldrh	r2, [r7, #10]
 80217ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 80217f2:	7bbb      	ldrb	r3, [r7, #14]
 80217f4:	3301      	adds	r3, #1
 80217f6:	73bb      	strb	r3, [r7, #14]
 80217f8:	e7ce      	b.n	8021798 <_ZN10LineSensor16CheckCalibrationEv+0x10>
    }

    if(result)
 80217fa:	7bfb      	ldrb	r3, [r7, #15]
 80217fc:	2b00      	cmp	r3, #0
 80217fe:	d00e      	beq.n	802181e <_ZN10LineSensor16CheckCalibrationEv+0x96>
    {
        if(timer < CALIBRATION_SUCCESS_TIME)
 8021800:	4b0e      	ldr	r3, [pc, #56]	; (802183c <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 8021802:	881b      	ldrh	r3, [r3, #0]
 8021804:	f240 52db 	movw	r2, #1499	; 0x5db
 8021808:	4293      	cmp	r3, r2
 802180a:	d80b      	bhi.n	8021824 <_ZN10LineSensor16CheckCalibrationEv+0x9c>
        {
            timer++;
 802180c:	4b0b      	ldr	r3, [pc, #44]	; (802183c <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 802180e:	881b      	ldrh	r3, [r3, #0]
 8021810:	3301      	adds	r3, #1
 8021812:	b29a      	uxth	r2, r3
 8021814:	4b09      	ldr	r3, [pc, #36]	; (802183c <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 8021816:	801a      	strh	r2, [r3, #0]
            result = false;
 8021818:	2300      	movs	r3, #0
 802181a:	73fb      	strb	r3, [r7, #15]
 802181c:	e002      	b.n	8021824 <_ZN10LineSensor16CheckCalibrationEv+0x9c>
        }
    }
    else timer = 0;
 802181e:	4b07      	ldr	r3, [pc, #28]	; (802183c <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 8021820:	2200      	movs	r2, #0
 8021822:	801a      	strh	r2, [r3, #0]
    
    return result;
 8021824:	7bfb      	ldrb	r3, [r7, #15]
}
 8021826:	4618      	mov	r0, r3
 8021828:	3714      	adds	r7, #20
 802182a:	46bd      	mov	sp, r7
 802182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021830:	4770      	bx	lr
 8021832:	bf00      	nop
 8021834:	20000200 	.word	0x20000200
 8021838:	2000021c 	.word	0x2000021c
 802183c:	200001fe 	.word	0x200001fe

08021840 <_ZN10LineSensor15MonitorLineBuffEv>:

#ifdef DEBUG_MODE
void LineSensor::MonitorLineBuff()
{
 8021840:	b480      	push	{r7}
 8021842:	b085      	sub	sp, #20
 8021844:	af00      	add	r7, sp, #0
 8021846:	6078      	str	r0, [r7, #4]
    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021848:	2300      	movs	r3, #0
 802184a:	73fb      	strb	r3, [r7, #15]
 802184c:	7bfb      	ldrb	r3, [r7, #15]
 802184e:	2b0d      	cmp	r3, #13
 8021850:	d80b      	bhi.n	802186a <_ZN10LineSensor15MonitorLineBuffEv+0x2a>
    {
        g_line_buff[i] = line_sensors_buff_[i];
 8021852:	7bf9      	ldrb	r1, [r7, #15]
 8021854:	7bfb      	ldrb	r3, [r7, #15]
 8021856:	687a      	ldr	r2, [r7, #4]
 8021858:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 802185c:	4a06      	ldr	r2, [pc, #24]	; (8021878 <_ZN10LineSensor15MonitorLineBuffEv+0x38>)
 802185e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021862:	7bfb      	ldrb	r3, [r7, #15]
 8021864:	3301      	adds	r3, #1
 8021866:	73fb      	strb	r3, [r7, #15]
 8021868:	e7f0      	b.n	802184c <_ZN10LineSensor15MonitorLineBuffEv+0xc>
    }
}
 802186a:	bf00      	nop
 802186c:	3714      	adds	r7, #20
 802186e:	46bd      	mov	sp, r7
 8021870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021874:	4770      	bx	lr
 8021876:	bf00      	nop
 8021878:	200004d8 	.word	0x200004d8

0802187c <_ZN9LineTraceC1EP10LineSensor>:
#include "line_trace.hpp"

LineTrace::LineTrace(LineSensor *line_sensor) : integral_error_(0)
 802187c:	b480      	push	{r7}
 802187e:	b083      	sub	sp, #12
 8021880:	af00      	add	r7, sp, #0
 8021882:	6078      	str	r0, [r7, #4]
 8021884:	6039      	str	r1, [r7, #0]
 8021886:	687b      	ldr	r3, [r7, #4]
 8021888:	f04f 0200 	mov.w	r2, #0
 802188c:	601a      	str	r2, [r3, #0]
{
    line_sensor_ = line_sensor;
 802188e:	687b      	ldr	r3, [r7, #4]
 8021890:	683a      	ldr	r2, [r7, #0]
 8021892:	605a      	str	r2, [r3, #4]
}
 8021894:	687b      	ldr	r3, [r7, #4]
 8021896:	4618      	mov	r0, r3
 8021898:	370c      	adds	r7, #12
 802189a:	46bd      	mov	sp, r7
 802189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218a0:	4770      	bx	lr
	...

080218a4 <_ZN9LineTrace13LineTraceOnlyEv>:

float LineTrace::LineTraceOnly()
{
 80218a4:	b580      	push	{r7, lr}
 80218a6:	b086      	sub	sp, #24
 80218a8:	af00      	add	r7, sp, #0
 80218aa:	6078      	str	r0, [r7, #4]
    float p_gain = LINE_ONLY_P_GAIN;
 80218ac:	4b0b      	ldr	r3, [pc, #44]	; (80218dc <_ZN9LineTrace13LineTraceOnlyEv+0x38>)
 80218ae:	617b      	str	r3, [r7, #20]
    float i_gain = LINE_ONLY_I_GAIN;
 80218b0:	f04f 0300 	mov.w	r3, #0
 80218b4:	613b      	str	r3, [r7, #16]
    float d_gain = LINE_ONLY_D_GAIN;
 80218b6:	f04f 0300 	mov.w	r3, #0
 80218ba:	60fb      	str	r3, [r7, #12]

    return PidControl(p_gain, i_gain, d_gain);
 80218bc:	ed97 1a03 	vldr	s2, [r7, #12]
 80218c0:	edd7 0a04 	vldr	s1, [r7, #16]
 80218c4:	ed97 0a05 	vldr	s0, [r7, #20]
 80218c8:	6878      	ldr	r0, [r7, #4]
 80218ca:	f000 f809 	bl	80218e0 <_ZN9LineTrace10PidControlEfff>
 80218ce:	eef0 7a40 	vmov.f32	s15, s0
}
 80218d2:	eeb0 0a67 	vmov.f32	s0, s15
 80218d6:	3718      	adds	r7, #24
 80218d8:	46bd      	mov	sp, r7
 80218da:	bd80      	pop	{r7, pc}
 80218dc:	38d1b717 	.word	0x38d1b717

080218e0 <_ZN9LineTrace10PidControlEfff>:

    return PidControl(p_gain, i_gain, d_gain);
}

float LineTrace::PidControl(float p_gain, float i_gain, float d_gain)
{
 80218e0:	b590      	push	{r4, r7, lr}
 80218e2:	b08b      	sub	sp, #44	; 0x2c
 80218e4:	af00      	add	r7, sp, #0
 80218e6:	60f8      	str	r0, [r7, #12]
 80218e8:	ed87 0a02 	vstr	s0, [r7, #8]
 80218ec:	edc7 0a01 	vstr	s1, [r7, #4]
 80218f0:	ed87 1a00 	vstr	s2, [r7]
    static float pre_error = line_sensor_->LeftRightDifference();
 80218f4:	4b52      	ldr	r3, [pc, #328]	; (8021a40 <_ZN9LineTrace10PidControlEfff+0x160>)
 80218f6:	781b      	ldrb	r3, [r3, #0]
 80218f8:	f3bf 8f5b 	dmb	ish
 80218fc:	b2db      	uxtb	r3, r3
 80218fe:	f003 0301 	and.w	r3, r3, #1
 8021902:	2b00      	cmp	r3, #0
 8021904:	bf0c      	ite	eq
 8021906:	2301      	moveq	r3, #1
 8021908:	2300      	movne	r3, #0
 802190a:	b2db      	uxtb	r3, r3
 802190c:	2b00      	cmp	r3, #0
 802190e:	d017      	beq.n	8021940 <_ZN9LineTrace10PidControlEfff+0x60>
 8021910:	484b      	ldr	r0, [pc, #300]	; (8021a40 <_ZN9LineTrace10PidControlEfff+0x160>)
 8021912:	f005 ff27 	bl	8027764 <__cxa_guard_acquire>
 8021916:	4603      	mov	r3, r0
 8021918:	2b00      	cmp	r3, #0
 802191a:	bf14      	ite	ne
 802191c:	2301      	movne	r3, #1
 802191e:	2300      	moveq	r3, #0
 8021920:	b2db      	uxtb	r3, r3
 8021922:	2b00      	cmp	r3, #0
 8021924:	d00c      	beq.n	8021940 <_ZN9LineTrace10PidControlEfff+0x60>
 8021926:	68fb      	ldr	r3, [r7, #12]
 8021928:	685b      	ldr	r3, [r3, #4]
 802192a:	4618      	mov	r0, r3
 802192c:	f7ff fec8 	bl	80216c0 <_ZN10LineSensor19LeftRightDifferenceEv>
 8021930:	eef0 7a40 	vmov.f32	s15, s0
 8021934:	4b43      	ldr	r3, [pc, #268]	; (8021a44 <_ZN9LineTrace10PidControlEfff+0x164>)
 8021936:	edc3 7a00 	vstr	s15, [r3]
 802193a:	4841      	ldr	r0, [pc, #260]	; (8021a40 <_ZN9LineTrace10PidControlEfff+0x160>)
 802193c:	f005 ff1e 	bl	802777c <__cxa_guard_release>
    float error, differential_error, integral_error;
    float p, d, i;

    error = line_sensor_->LeftRightDifference();
 8021940:	68fb      	ldr	r3, [r7, #12]
 8021942:	685b      	ldr	r3, [r3, #4]
 8021944:	4618      	mov	r0, r3
 8021946:	f7ff febb 	bl	80216c0 <_ZN10LineSensor19LeftRightDifferenceEv>
 802194a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    differential_error = (error - pre_error) / TIM6_PERIOD_S;
 802194e:	4b3d      	ldr	r3, [pc, #244]	; (8021a44 <_ZN9LineTrace10PidControlEfff+0x164>)
 8021950:	edd3 7a00 	vldr	s15, [r3]
 8021954:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8021958:	ee77 7a67 	vsub.f32	s15, s14, s15
 802195c:	ee17 0a90 	vmov	r0, s15
 8021960:	f7fe fcda 	bl	8020318 <__aeabi_f2d>
 8021964:	a334      	add	r3, pc, #208	; (adr r3, 8021a38 <_ZN9LineTrace10PidControlEfff+0x158>)
 8021966:	e9d3 2300 	ldrd	r2, r3, [r3]
 802196a:	f7fe fe57 	bl	802061c <__aeabi_ddiv>
 802196e:	4603      	mov	r3, r0
 8021970:	460c      	mov	r4, r1
 8021972:	4618      	mov	r0, r3
 8021974:	4621      	mov	r1, r4
 8021976:	f7fe ffff 	bl	8020978 <__aeabi_d2f>
 802197a:	4603      	mov	r3, r0
 802197c:	623b      	str	r3, [r7, #32]
    integral_error = (error + pre_error) / 2.0 * TIM6_PERIOD_S;
 802197e:	4b31      	ldr	r3, [pc, #196]	; (8021a44 <_ZN9LineTrace10PidControlEfff+0x164>)
 8021980:	ed93 7a00 	vldr	s14, [r3]
 8021984:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8021988:	ee77 7a27 	vadd.f32	s15, s14, s15
 802198c:	ee17 0a90 	vmov	r0, s15
 8021990:	f7fe fcc2 	bl	8020318 <__aeabi_f2d>
 8021994:	f04f 0200 	mov.w	r2, #0
 8021998:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802199c:	f7fe fe3e 	bl	802061c <__aeabi_ddiv>
 80219a0:	4603      	mov	r3, r0
 80219a2:	460c      	mov	r4, r1
 80219a4:	4618      	mov	r0, r3
 80219a6:	4621      	mov	r1, r4
 80219a8:	a323      	add	r3, pc, #140	; (adr r3, 8021a38 <_ZN9LineTrace10PidControlEfff+0x158>)
 80219aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80219ae:	f7fe fd0b 	bl	80203c8 <__aeabi_dmul>
 80219b2:	4603      	mov	r3, r0
 80219b4:	460c      	mov	r4, r1
 80219b6:	4618      	mov	r0, r3
 80219b8:	4621      	mov	r1, r4
 80219ba:	f7fe ffdd 	bl	8020978 <__aeabi_d2f>
 80219be:	4603      	mov	r3, r0
 80219c0:	61fb      	str	r3, [r7, #28]
    SetIntegralError(integral_error);
 80219c2:	ed97 0a07 	vldr	s0, [r7, #28]
 80219c6:	68f8      	ldr	r0, [r7, #12]
 80219c8:	f000 f844 	bl	8021a54 <_ZN9LineTrace16SetIntegralErrorEf>

    p = p_gain * error;
 80219cc:	ed97 7a02 	vldr	s14, [r7, #8]
 80219d0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80219d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80219d8:	edc7 7a06 	vstr	s15, [r7, #24]
    d = d_gain * differential_error;
 80219dc:	ed97 7a00 	vldr	s14, [r7]
 80219e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80219e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80219e8:	edc7 7a05 	vstr	s15, [r7, #20]
    i = i_gain * integral_error_;
 80219ec:	68fb      	ldr	r3, [r7, #12]
 80219ee:	edd3 7a00 	vldr	s15, [r3]
 80219f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80219f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80219fa:	edc7 7a04 	vstr	s15, [r7, #16]

#ifdef DEBUG_MODE
    g_trace_p = p;
 80219fe:	4a12      	ldr	r2, [pc, #72]	; (8021a48 <_ZN9LineTrace10PidControlEfff+0x168>)
 8021a00:	69bb      	ldr	r3, [r7, #24]
 8021a02:	6013      	str	r3, [r2, #0]
    g_trace_d = d;
 8021a04:	4a11      	ldr	r2, [pc, #68]	; (8021a4c <_ZN9LineTrace10PidControlEfff+0x16c>)
 8021a06:	697b      	ldr	r3, [r7, #20]
 8021a08:	6013      	str	r3, [r2, #0]
    g_trace_i = i;
 8021a0a:	4a11      	ldr	r2, [pc, #68]	; (8021a50 <_ZN9LineTrace10PidControlEfff+0x170>)
 8021a0c:	693b      	ldr	r3, [r7, #16]
 8021a0e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    pre_error = error;
 8021a10:	4a0c      	ldr	r2, [pc, #48]	; (8021a44 <_ZN9LineTrace10PidControlEfff+0x164>)
 8021a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a14:	6013      	str	r3, [r2, #0]

    return p + d + i;
 8021a16:	ed97 7a06 	vldr	s14, [r7, #24]
 8021a1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8021a1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8021a22:	edd7 7a04 	vldr	s15, [r7, #16]
 8021a26:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8021a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8021a2e:	372c      	adds	r7, #44	; 0x2c
 8021a30:	46bd      	mov	sp, r7
 8021a32:	bd90      	pop	{r4, r7, pc}
 8021a34:	f3af 8000 	nop.w
 8021a38:	47ae147b 	.word	0x47ae147b
 8021a3c:	3f547ae1 	.word	0x3f547ae1
 8021a40:	2000023c 	.word	0x2000023c
 8021a44:	20000238 	.word	0x20000238
 8021a48:	200006ac 	.word	0x200006ac
 8021a4c:	200006b4 	.word	0x200006b4
 8021a50:	200006b0 	.word	0x200006b0

08021a54 <_ZN9LineTrace16SetIntegralErrorEf>:

void LineTrace::SetIntegralError(float integral_error)
{
 8021a54:	b480      	push	{r7}
 8021a56:	b083      	sub	sp, #12
 8021a58:	af00      	add	r7, sp, #0
 8021a5a:	6078      	str	r0, [r7, #4]
 8021a5c:	ed87 0a00 	vstr	s0, [r7]
    integral_error_ += integral_error;
 8021a60:	687b      	ldr	r3, [r7, #4]
 8021a62:	ed93 7a00 	vldr	s14, [r3]
 8021a66:	edd7 7a00 	vldr	s15, [r7]
 8021a6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8021a6e:	687b      	ldr	r3, [r7, #4]
 8021a70:	edc3 7a00 	vstr	s15, [r3]
}
 8021a74:	bf00      	nop
 8021a76:	370c      	adds	r7, #12
 8021a78:	46bd      	mov	sp, r7
 8021a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a7e:	4770      	bx	lr

08021a80 <_ZN6LoggerC1Ev>:
#include "logger.hpp"
#include <math.h>
#include <string.h>

Logger::Logger() {}
 8021a80:	b580      	push	{r7, lr}
 8021a82:	b082      	sub	sp, #8
 8021a84:	af00      	add	r7, sp, #0
 8021a86:	6078      	str	r0, [r7, #4]
 8021a88:	687b      	ldr	r3, [r7, #4]
 8021a8a:	33e8      	adds	r3, #232	; 0xe8
 8021a8c:	4618      	mov	r0, r3
 8021a8e:	f7ff f943 	bl	8020d18 <_ZN7EncoderC1Ev>
 8021a92:	687b      	ldr	r3, [r7, #4]
 8021a94:	33f8      	adds	r3, #248	; 0xf8
 8021a96:	4618      	mov	r0, r3
 8021a98:	f7ff fa5a 	bl	8020f50 <_ZN8Iim42652C1Ev>
 8021a9c:	687b      	ldr	r3, [r7, #4]
 8021a9e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8021aa2:	4618      	mov	r0, r3
 8021aa4:	f001 f870 	bl	8022b88 <_ZN10SideSensorC1Ev>
 8021aa8:	687b      	ldr	r3, [r7, #4]
 8021aaa:	4618      	mov	r0, r3
 8021aac:	3708      	adds	r7, #8
 8021aae:	46bd      	mov	sp, r7
 8021ab0:	bd80      	pop	{r7, pc}

08021ab2 <_ZN7Logger2C1EP7EncoderP5FlashP3LedP8Iim42652P10SideSensor>:
#include "logger2.hpp"
#include "declare_extern.h"
#include <math.h>

Logger2::Logger2(Encoder *encoder,
 8021ab2:	b480      	push	{r7}
 8021ab4:	b085      	sub	sp, #20
 8021ab6:	af00      	add	r7, sp, #0
 8021ab8:	60f8      	str	r0, [r7, #12]
 8021aba:	60b9      	str	r1, [r7, #8]
 8021abc:	607a      	str	r2, [r7, #4]
 8021abe:	603b      	str	r3, [r7, #0]
                   , success_emergency_code_store_(false)
                   , logging_radian_buff_(0)
                   , loading_now_address_(0)
                   , uncorrected_address_buff_(0)
                   , logging_now_address_(0)
                   , target_velocity_(MIN_VELOCITY)
 8021ac0:	68fb      	ldr	r3, [r7, #12]
 8021ac2:	2200      	movs	r2, #0
 8021ac4:	701a      	strb	r2, [r3, #0]
 8021ac6:	68fb      	ldr	r3, [r7, #12]
 8021ac8:	2200      	movs	r2, #0
 8021aca:	705a      	strb	r2, [r3, #1]
 8021acc:	68fb      	ldr	r3, [r7, #12]
 8021ace:	f04f 0200 	mov.w	r2, #0
 8021ad2:	605a      	str	r2, [r3, #4]
 8021ad4:	68fb      	ldr	r3, [r7, #12]
 8021ad6:	2200      	movs	r2, #0
 8021ad8:	811a      	strh	r2, [r3, #8]
 8021ada:	68fb      	ldr	r3, [r7, #12]
 8021adc:	2200      	movs	r2, #0
 8021ade:	815a      	strh	r2, [r3, #10]
 8021ae0:	68fb      	ldr	r3, [r7, #12]
 8021ae2:	2200      	movs	r2, #0
 8021ae4:	819a      	strh	r2, [r3, #12]
 8021ae6:	68fb      	ldr	r3, [r7, #12]
 8021ae8:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8021aec:	611a      	str	r2, [r3, #16]
{
    encoder_ = encoder;
 8021aee:	68fb      	ldr	r3, [r7, #12]
 8021af0:	68ba      	ldr	r2, [r7, #8]
 8021af2:	615a      	str	r2, [r3, #20]
    flash_ = flash;
 8021af4:	68fb      	ldr	r3, [r7, #12]
 8021af6:	687a      	ldr	r2, [r7, #4]
 8021af8:	619a      	str	r2, [r3, #24]
    led_ = led;
 8021afa:	68fb      	ldr	r3, [r7, #12]
 8021afc:	683a      	ldr	r2, [r7, #0]
 8021afe:	61da      	str	r2, [r3, #28]
    iim_42652_ = iim_42652;
 8021b00:	68fb      	ldr	r3, [r7, #12]
 8021b02:	69ba      	ldr	r2, [r7, #24]
 8021b04:	621a      	str	r2, [r3, #32]
    side_sensor_ = side_sensor;
 8021b06:	68fb      	ldr	r3, [r7, #12]
 8021b08:	69fa      	ldr	r2, [r7, #28]
 8021b0a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8021b0c:	68fb      	ldr	r3, [r7, #12]
 8021b0e:	4618      	mov	r0, r3
 8021b10:	3714      	adds	r7, #20
 8021b12:	46bd      	mov	sp, r7
 8021b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b18:	4770      	bx	lr
	...

08021b1c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8021b1c:	b580      	push	{r7, lr}
 8021b1e:	b082      	sub	sp, #8
 8021b20:	af00      	add	r7, sp, #0
 8021b22:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 8021b24:	687b      	ldr	r3, [r7, #4]
 8021b26:	681b      	ldr	r3, [r3, #0]
 8021b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8021b2c:	d101      	bne.n	8021b32 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    InterruptTim2();
 8021b2e:	f002 fcad 	bl	802448c <InterruptTim2>
  }
  if(htim->Instance == TIM6)
 8021b32:	687b      	ldr	r3, [r7, #4]
 8021b34:	681b      	ldr	r3, [r3, #0]
 8021b36:	4a08      	ldr	r2, [pc, #32]	; (8021b58 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8021b38:	4293      	cmp	r3, r2
 8021b3a:	d101      	bne.n	8021b40 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
    InterruptTim6();
 8021b3c:	f002 fc96 	bl	802446c <InterruptTim6>
  }
  if(htim->Instance == TIM7)
 8021b40:	687b      	ldr	r3, [r7, #4]
 8021b42:	681b      	ldr	r3, [r3, #0]
 8021b44:	4a05      	ldr	r2, [pc, #20]	; (8021b5c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8021b46:	4293      	cmp	r3, r2
 8021b48:	d101      	bne.n	8021b4e <HAL_TIM_PeriodElapsedCallback+0x32>
  {
    InterruptTim7();
 8021b4a:	f002 fc7f 	bl	802444c <InterruptTim7>
  }
}
 8021b4e:	bf00      	nop
 8021b50:	3708      	adds	r7, #8
 8021b52:	46bd      	mov	sp, r7
 8021b54:	bd80      	pop	{r7, pc}
 8021b56:	bf00      	nop
 8021b58:	40001000 	.word	0x40001000
 8021b5c:	40001400 	.word	0x40001400

08021b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8021b60:	b580      	push	{r7, lr}
 8021b62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8021b64:	f002 fd44 	bl	80245f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8021b68:	f000 f824 	bl	8021bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8021b6c:	f000 fd6a 	bl	8022644 <MX_GPIO_Init>
  MX_DMA_Init();
 8021b70:	f000 fd48 	bl	8022604 <MX_DMA_Init>
  MX_ADC1_Init();
 8021b74:	f000 f888 	bl	8021c88 <MX_ADC1_Init>
  MX_I2C2_Init();
 8021b78:	f000 f98e 	bl	8021e98 <MX_I2C2_Init>
  MX_SPI3_Init();
 8021b7c:	f000 f9ba 	bl	8021ef4 <MX_SPI3_Init>
  MX_TIM1_Init();
 8021b80:	f000 f9ee 	bl	8021f60 <MX_TIM1_Init>
  MX_TIM3_Init();
 8021b84:	f000 faca 	bl	802211c <MX_TIM3_Init>
  MX_TIM4_Init();
 8021b88:	f000 fb42 	bl	8022210 <MX_TIM4_Init>
  MX_TIM6_Init();
 8021b8c:	f000 fbe2 	bl	8022354 <MX_TIM6_Init>
  MX_TIM7_Init();
 8021b90:	f000 fc16 	bl	80223c0 <MX_TIM7_Init>
  MX_TIM8_Init();
 8021b94:	f000 fc4a 	bl	802242c <MX_TIM8_Init>
  MX_TIM11_Init();
 8021b98:	f000 fca0 	bl	80224dc <MX_TIM11_Init>
  MX_TIM12_Init();
 8021b9c:	f000 fcec 	bl	8022578 <MX_TIM12_Init>
  MX_TIM2_Init();
 8021ba0:	f000 fa6e 	bl	8022080 <MX_TIM2_Init>
  MX_TIM5_Init();
 8021ba4:	f000 fb88 	bl	80222b8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  Init();
 8021ba8:	f002 fc46 	bl	8024438 <Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
#ifdef TEST_MODE
    Loop();
 8021bac:	f002 fc7c 	bl	80244a8 <Loop>
 8021bb0:	e7fc      	b.n	8021bac <main+0x4c>
	...

08021bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8021bb4:	b580      	push	{r7, lr}
 8021bb6:	b094      	sub	sp, #80	; 0x50
 8021bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8021bba:	f107 0320 	add.w	r3, r7, #32
 8021bbe:	2230      	movs	r2, #48	; 0x30
 8021bc0:	2100      	movs	r1, #0
 8021bc2:	4618      	mov	r0, r3
 8021bc4:	f005 fe13 	bl	80277ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8021bc8:	f107 030c 	add.w	r3, r7, #12
 8021bcc:	2200      	movs	r2, #0
 8021bce:	601a      	str	r2, [r3, #0]
 8021bd0:	605a      	str	r2, [r3, #4]
 8021bd2:	609a      	str	r2, [r3, #8]
 8021bd4:	60da      	str	r2, [r3, #12]
 8021bd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8021bd8:	2300      	movs	r3, #0
 8021bda:	60bb      	str	r3, [r7, #8]
 8021bdc:	4b28      	ldr	r3, [pc, #160]	; (8021c80 <SystemClock_Config+0xcc>)
 8021bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021be0:	4a27      	ldr	r2, [pc, #156]	; (8021c80 <SystemClock_Config+0xcc>)
 8021be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021be6:	6413      	str	r3, [r2, #64]	; 0x40
 8021be8:	4b25      	ldr	r3, [pc, #148]	; (8021c80 <SystemClock_Config+0xcc>)
 8021bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021bf0:	60bb      	str	r3, [r7, #8]
 8021bf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8021bf4:	2300      	movs	r3, #0
 8021bf6:	607b      	str	r3, [r7, #4]
 8021bf8:	4b22      	ldr	r3, [pc, #136]	; (8021c84 <SystemClock_Config+0xd0>)
 8021bfa:	681b      	ldr	r3, [r3, #0]
 8021bfc:	4a21      	ldr	r2, [pc, #132]	; (8021c84 <SystemClock_Config+0xd0>)
 8021bfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8021c02:	6013      	str	r3, [r2, #0]
 8021c04:	4b1f      	ldr	r3, [pc, #124]	; (8021c84 <SystemClock_Config+0xd0>)
 8021c06:	681b      	ldr	r3, [r3, #0]
 8021c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8021c0c:	607b      	str	r3, [r7, #4]
 8021c0e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8021c10:	2301      	movs	r3, #1
 8021c12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8021c14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021c18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8021c1a:	2302      	movs	r3, #2
 8021c1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8021c1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8021c22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8021c24:	2306      	movs	r3, #6
 8021c26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8021c28:	23a8      	movs	r3, #168	; 0xa8
 8021c2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8021c2c:	2302      	movs	r3, #2
 8021c2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8021c30:	2304      	movs	r3, #4
 8021c32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8021c34:	f107 0320 	add.w	r3, r7, #32
 8021c38:	4618      	mov	r0, r3
 8021c3a:	f004 f8e5 	bl	8025e08 <HAL_RCC_OscConfig>
 8021c3e:	4603      	mov	r3, r0
 8021c40:	2b00      	cmp	r3, #0
 8021c42:	d001      	beq.n	8021c48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8021c44:	f000 fdce 	bl	80227e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8021c48:	230f      	movs	r3, #15
 8021c4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8021c4c:	2302      	movs	r3, #2
 8021c4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8021c50:	2300      	movs	r3, #0
 8021c52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8021c54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8021c58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8021c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021c5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8021c60:	f107 030c 	add.w	r3, r7, #12
 8021c64:	2105      	movs	r1, #5
 8021c66:	4618      	mov	r0, r3
 8021c68:	f004 fb3e 	bl	80262e8 <HAL_RCC_ClockConfig>
 8021c6c:	4603      	mov	r3, r0
 8021c6e:	2b00      	cmp	r3, #0
 8021c70:	d001      	beq.n	8021c76 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8021c72:	f000 fdb7 	bl	80227e4 <Error_Handler>
  }
}
 8021c76:	bf00      	nop
 8021c78:	3750      	adds	r7, #80	; 0x50
 8021c7a:	46bd      	mov	sp, r7
 8021c7c:	bd80      	pop	{r7, pc}
 8021c7e:	bf00      	nop
 8021c80:	40023800 	.word	0x40023800
 8021c84:	40007000 	.word	0x40007000

08021c88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8021c88:	b580      	push	{r7, lr}
 8021c8a:	b084      	sub	sp, #16
 8021c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8021c8e:	463b      	mov	r3, r7
 8021c90:	2200      	movs	r2, #0
 8021c92:	601a      	str	r2, [r3, #0]
 8021c94:	605a      	str	r2, [r3, #4]
 8021c96:	609a      	str	r2, [r3, #8]
 8021c98:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8021c9a:	4b7c      	ldr	r3, [pc, #496]	; (8021e8c <MX_ADC1_Init+0x204>)
 8021c9c:	4a7c      	ldr	r2, [pc, #496]	; (8021e90 <MX_ADC1_Init+0x208>)
 8021c9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8021ca0:	4b7a      	ldr	r3, [pc, #488]	; (8021e8c <MX_ADC1_Init+0x204>)
 8021ca2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8021ca6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8021ca8:	4b78      	ldr	r3, [pc, #480]	; (8021e8c <MX_ADC1_Init+0x204>)
 8021caa:	2200      	movs	r2, #0
 8021cac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8021cae:	4b77      	ldr	r3, [pc, #476]	; (8021e8c <MX_ADC1_Init+0x204>)
 8021cb0:	2201      	movs	r2, #1
 8021cb2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8021cb4:	4b75      	ldr	r3, [pc, #468]	; (8021e8c <MX_ADC1_Init+0x204>)
 8021cb6:	2201      	movs	r2, #1
 8021cb8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8021cba:	4b74      	ldr	r3, [pc, #464]	; (8021e8c <MX_ADC1_Init+0x204>)
 8021cbc:	2200      	movs	r2, #0
 8021cbe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8021cc2:	4b72      	ldr	r3, [pc, #456]	; (8021e8c <MX_ADC1_Init+0x204>)
 8021cc4:	2200      	movs	r2, #0
 8021cc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8021cc8:	4b70      	ldr	r3, [pc, #448]	; (8021e8c <MX_ADC1_Init+0x204>)
 8021cca:	4a72      	ldr	r2, [pc, #456]	; (8021e94 <MX_ADC1_Init+0x20c>)
 8021ccc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8021cce:	4b6f      	ldr	r3, [pc, #444]	; (8021e8c <MX_ADC1_Init+0x204>)
 8021cd0:	2200      	movs	r2, #0
 8021cd2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8021cd4:	4b6d      	ldr	r3, [pc, #436]	; (8021e8c <MX_ADC1_Init+0x204>)
 8021cd6:	220e      	movs	r2, #14
 8021cd8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8021cda:	4b6c      	ldr	r3, [pc, #432]	; (8021e8c <MX_ADC1_Init+0x204>)
 8021cdc:	2201      	movs	r2, #1
 8021cde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8021ce2:	4b6a      	ldr	r3, [pc, #424]	; (8021e8c <MX_ADC1_Init+0x204>)
 8021ce4:	2201      	movs	r2, #1
 8021ce6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8021ce8:	4868      	ldr	r0, [pc, #416]	; (8021e8c <MX_ADC1_Init+0x204>)
 8021cea:	f002 fd15 	bl	8024718 <HAL_ADC_Init>
 8021cee:	4603      	mov	r3, r0
 8021cf0:	2b00      	cmp	r3, #0
 8021cf2:	d001      	beq.n	8021cf8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8021cf4:	f000 fd76 	bl	80227e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8021cf8:	2303      	movs	r3, #3
 8021cfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8021cfc:	2301      	movs	r3, #1
 8021cfe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8021d00:	2301      	movs	r3, #1
 8021d02:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021d04:	463b      	mov	r3, r7
 8021d06:	4619      	mov	r1, r3
 8021d08:	4860      	ldr	r0, [pc, #384]	; (8021e8c <MX_ADC1_Init+0x204>)
 8021d0a:	f002 fe59 	bl	80249c0 <HAL_ADC_ConfigChannel>
 8021d0e:	4603      	mov	r3, r0
 8021d10:	2b00      	cmp	r3, #0
 8021d12:	d001      	beq.n	8021d18 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8021d14:	f000 fd66 	bl	80227e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8021d18:	2304      	movs	r3, #4
 8021d1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8021d1c:	2302      	movs	r3, #2
 8021d1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021d20:	463b      	mov	r3, r7
 8021d22:	4619      	mov	r1, r3
 8021d24:	4859      	ldr	r0, [pc, #356]	; (8021e8c <MX_ADC1_Init+0x204>)
 8021d26:	f002 fe4b 	bl	80249c0 <HAL_ADC_ConfigChannel>
 8021d2a:	4603      	mov	r3, r0
 8021d2c:	2b00      	cmp	r3, #0
 8021d2e:	d001      	beq.n	8021d34 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8021d30:	f000 fd58 	bl	80227e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8021d34:	2305      	movs	r3, #5
 8021d36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8021d38:	2303      	movs	r3, #3
 8021d3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021d3c:	463b      	mov	r3, r7
 8021d3e:	4619      	mov	r1, r3
 8021d40:	4852      	ldr	r0, [pc, #328]	; (8021e8c <MX_ADC1_Init+0x204>)
 8021d42:	f002 fe3d 	bl	80249c0 <HAL_ADC_ConfigChannel>
 8021d46:	4603      	mov	r3, r0
 8021d48:	2b00      	cmp	r3, #0
 8021d4a:	d001      	beq.n	8021d50 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8021d4c:	f000 fd4a 	bl	80227e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8021d50:	2306      	movs	r3, #6
 8021d52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8021d54:	2304      	movs	r3, #4
 8021d56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021d58:	463b      	mov	r3, r7
 8021d5a:	4619      	mov	r1, r3
 8021d5c:	484b      	ldr	r0, [pc, #300]	; (8021e8c <MX_ADC1_Init+0x204>)
 8021d5e:	f002 fe2f 	bl	80249c0 <HAL_ADC_ConfigChannel>
 8021d62:	4603      	mov	r3, r0
 8021d64:	2b00      	cmp	r3, #0
 8021d66:	d001      	beq.n	8021d6c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8021d68:	f000 fd3c 	bl	80227e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8021d6c:	2307      	movs	r3, #7
 8021d6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8021d70:	2305      	movs	r3, #5
 8021d72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021d74:	463b      	mov	r3, r7
 8021d76:	4619      	mov	r1, r3
 8021d78:	4844      	ldr	r0, [pc, #272]	; (8021e8c <MX_ADC1_Init+0x204>)
 8021d7a:	f002 fe21 	bl	80249c0 <HAL_ADC_ConfigChannel>
 8021d7e:	4603      	mov	r3, r0
 8021d80:	2b00      	cmp	r3, #0
 8021d82:	d001      	beq.n	8021d88 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8021d84:	f000 fd2e 	bl	80227e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8021d88:	230e      	movs	r3, #14
 8021d8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8021d8c:	2306      	movs	r3, #6
 8021d8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021d90:	463b      	mov	r3, r7
 8021d92:	4619      	mov	r1, r3
 8021d94:	483d      	ldr	r0, [pc, #244]	; (8021e8c <MX_ADC1_Init+0x204>)
 8021d96:	f002 fe13 	bl	80249c0 <HAL_ADC_ConfigChannel>
 8021d9a:	4603      	mov	r3, r0
 8021d9c:	2b00      	cmp	r3, #0
 8021d9e:	d001      	beq.n	8021da4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8021da0:	f000 fd20 	bl	80227e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8021da4:	230f      	movs	r3, #15
 8021da6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8021da8:	2307      	movs	r3, #7
 8021daa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021dac:	463b      	mov	r3, r7
 8021dae:	4619      	mov	r1, r3
 8021db0:	4836      	ldr	r0, [pc, #216]	; (8021e8c <MX_ADC1_Init+0x204>)
 8021db2:	f002 fe05 	bl	80249c0 <HAL_ADC_ConfigChannel>
 8021db6:	4603      	mov	r3, r0
 8021db8:	2b00      	cmp	r3, #0
 8021dba:	d001      	beq.n	8021dc0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8021dbc:	f000 fd12 	bl	80227e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8021dc0:	230a      	movs	r3, #10
 8021dc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8021dc4:	2308      	movs	r3, #8
 8021dc6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021dc8:	463b      	mov	r3, r7
 8021dca:	4619      	mov	r1, r3
 8021dcc:	482f      	ldr	r0, [pc, #188]	; (8021e8c <MX_ADC1_Init+0x204>)
 8021dce:	f002 fdf7 	bl	80249c0 <HAL_ADC_ConfigChannel>
 8021dd2:	4603      	mov	r3, r0
 8021dd4:	2b00      	cmp	r3, #0
 8021dd6:	d001      	beq.n	8021ddc <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8021dd8:	f000 fd04 	bl	80227e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8021ddc:	230b      	movs	r3, #11
 8021dde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8021de0:	2309      	movs	r3, #9
 8021de2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021de4:	463b      	mov	r3, r7
 8021de6:	4619      	mov	r1, r3
 8021de8:	4828      	ldr	r0, [pc, #160]	; (8021e8c <MX_ADC1_Init+0x204>)
 8021dea:	f002 fde9 	bl	80249c0 <HAL_ADC_ConfigChannel>
 8021dee:	4603      	mov	r3, r0
 8021df0:	2b00      	cmp	r3, #0
 8021df2:	d001      	beq.n	8021df8 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8021df4:	f000 fcf6 	bl	80227e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8021df8:	230c      	movs	r3, #12
 8021dfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8021dfc:	230a      	movs	r3, #10
 8021dfe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021e00:	463b      	mov	r3, r7
 8021e02:	4619      	mov	r1, r3
 8021e04:	4821      	ldr	r0, [pc, #132]	; (8021e8c <MX_ADC1_Init+0x204>)
 8021e06:	f002 fddb 	bl	80249c0 <HAL_ADC_ConfigChannel>
 8021e0a:	4603      	mov	r3, r0
 8021e0c:	2b00      	cmp	r3, #0
 8021e0e:	d001      	beq.n	8021e14 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8021e10:	f000 fce8 	bl	80227e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8021e14:	230d      	movs	r3, #13
 8021e16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8021e18:	230b      	movs	r3, #11
 8021e1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021e1c:	463b      	mov	r3, r7
 8021e1e:	4619      	mov	r1, r3
 8021e20:	481a      	ldr	r0, [pc, #104]	; (8021e8c <MX_ADC1_Init+0x204>)
 8021e22:	f002 fdcd 	bl	80249c0 <HAL_ADC_ConfigChannel>
 8021e26:	4603      	mov	r3, r0
 8021e28:	2b00      	cmp	r3, #0
 8021e2a:	d001      	beq.n	8021e30 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8021e2c:	f000 fcda 	bl	80227e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8021e30:	2302      	movs	r3, #2
 8021e32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8021e34:	230c      	movs	r3, #12
 8021e36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021e38:	463b      	mov	r3, r7
 8021e3a:	4619      	mov	r1, r3
 8021e3c:	4813      	ldr	r0, [pc, #76]	; (8021e8c <MX_ADC1_Init+0x204>)
 8021e3e:	f002 fdbf 	bl	80249c0 <HAL_ADC_ConfigChannel>
 8021e42:	4603      	mov	r3, r0
 8021e44:	2b00      	cmp	r3, #0
 8021e46:	d001      	beq.n	8021e4c <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8021e48:	f000 fccc 	bl	80227e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8021e4c:	2301      	movs	r3, #1
 8021e4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8021e50:	230d      	movs	r3, #13
 8021e52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021e54:	463b      	mov	r3, r7
 8021e56:	4619      	mov	r1, r3
 8021e58:	480c      	ldr	r0, [pc, #48]	; (8021e8c <MX_ADC1_Init+0x204>)
 8021e5a:	f002 fdb1 	bl	80249c0 <HAL_ADC_ConfigChannel>
 8021e5e:	4603      	mov	r3, r0
 8021e60:	2b00      	cmp	r3, #0
 8021e62:	d001      	beq.n	8021e68 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8021e64:	f000 fcbe 	bl	80227e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8021e68:	2300      	movs	r3, #0
 8021e6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8021e6c:	230e      	movs	r3, #14
 8021e6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021e70:	463b      	mov	r3, r7
 8021e72:	4619      	mov	r1, r3
 8021e74:	4805      	ldr	r0, [pc, #20]	; (8021e8c <MX_ADC1_Init+0x204>)
 8021e76:	f002 fda3 	bl	80249c0 <HAL_ADC_ConfigChannel>
 8021e7a:	4603      	mov	r3, r0
 8021e7c:	2b00      	cmp	r3, #0
 8021e7e:	d001      	beq.n	8021e84 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8021e80:	f000 fcb0 	bl	80227e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8021e84:	bf00      	nop
 8021e86:	3710      	adds	r7, #16
 8021e88:	46bd      	mov	sp, r7
 8021e8a:	bd80      	pop	{r7, pc}
 8021e8c:	20011644 	.word	0x20011644
 8021e90:	40012000 	.word	0x40012000
 8021e94:	0f000001 	.word	0x0f000001

08021e98 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8021e98:	b580      	push	{r7, lr}
 8021e9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8021e9c:	4b12      	ldr	r3, [pc, #72]	; (8021ee8 <MX_I2C2_Init+0x50>)
 8021e9e:	4a13      	ldr	r2, [pc, #76]	; (8021eec <MX_I2C2_Init+0x54>)
 8021ea0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8021ea2:	4b11      	ldr	r3, [pc, #68]	; (8021ee8 <MX_I2C2_Init+0x50>)
 8021ea4:	4a12      	ldr	r2, [pc, #72]	; (8021ef0 <MX_I2C2_Init+0x58>)
 8021ea6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8021ea8:	4b0f      	ldr	r3, [pc, #60]	; (8021ee8 <MX_I2C2_Init+0x50>)
 8021eaa:	2200      	movs	r2, #0
 8021eac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8021eae:	4b0e      	ldr	r3, [pc, #56]	; (8021ee8 <MX_I2C2_Init+0x50>)
 8021eb0:	2200      	movs	r2, #0
 8021eb2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8021eb4:	4b0c      	ldr	r3, [pc, #48]	; (8021ee8 <MX_I2C2_Init+0x50>)
 8021eb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8021eba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8021ebc:	4b0a      	ldr	r3, [pc, #40]	; (8021ee8 <MX_I2C2_Init+0x50>)
 8021ebe:	2200      	movs	r2, #0
 8021ec0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8021ec2:	4b09      	ldr	r3, [pc, #36]	; (8021ee8 <MX_I2C2_Init+0x50>)
 8021ec4:	2200      	movs	r2, #0
 8021ec6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8021ec8:	4b07      	ldr	r3, [pc, #28]	; (8021ee8 <MX_I2C2_Init+0x50>)
 8021eca:	2200      	movs	r2, #0
 8021ecc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8021ece:	4b06      	ldr	r3, [pc, #24]	; (8021ee8 <MX_I2C2_Init+0x50>)
 8021ed0:	2200      	movs	r2, #0
 8021ed2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8021ed4:	4804      	ldr	r0, [pc, #16]	; (8021ee8 <MX_I2C2_Init+0x50>)
 8021ed6:	f003 fe5f 	bl	8025b98 <HAL_I2C_Init>
 8021eda:	4603      	mov	r3, r0
 8021edc:	2b00      	cmp	r3, #0
 8021ede:	d001      	beq.n	8021ee4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8021ee0:	f000 fc80 	bl	80227e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8021ee4:	bf00      	nop
 8021ee6:	bd80      	pop	{r7, pc}
 8021ee8:	20011518 	.word	0x20011518
 8021eec:	40005800 	.word	0x40005800
 8021ef0:	000186a0 	.word	0x000186a0

08021ef4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8021ef4:	b580      	push	{r7, lr}
 8021ef6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8021ef8:	4b17      	ldr	r3, [pc, #92]	; (8021f58 <MX_SPI3_Init+0x64>)
 8021efa:	4a18      	ldr	r2, [pc, #96]	; (8021f5c <MX_SPI3_Init+0x68>)
 8021efc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8021efe:	4b16      	ldr	r3, [pc, #88]	; (8021f58 <MX_SPI3_Init+0x64>)
 8021f00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8021f04:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8021f06:	4b14      	ldr	r3, [pc, #80]	; (8021f58 <MX_SPI3_Init+0x64>)
 8021f08:	2200      	movs	r2, #0
 8021f0a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8021f0c:	4b12      	ldr	r3, [pc, #72]	; (8021f58 <MX_SPI3_Init+0x64>)
 8021f0e:	2200      	movs	r2, #0
 8021f10:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8021f12:	4b11      	ldr	r3, [pc, #68]	; (8021f58 <MX_SPI3_Init+0x64>)
 8021f14:	2200      	movs	r2, #0
 8021f16:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8021f18:	4b0f      	ldr	r3, [pc, #60]	; (8021f58 <MX_SPI3_Init+0x64>)
 8021f1a:	2200      	movs	r2, #0
 8021f1c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8021f1e:	4b0e      	ldr	r3, [pc, #56]	; (8021f58 <MX_SPI3_Init+0x64>)
 8021f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8021f24:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8021f26:	4b0c      	ldr	r3, [pc, #48]	; (8021f58 <MX_SPI3_Init+0x64>)
 8021f28:	2238      	movs	r2, #56	; 0x38
 8021f2a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8021f2c:	4b0a      	ldr	r3, [pc, #40]	; (8021f58 <MX_SPI3_Init+0x64>)
 8021f2e:	2200      	movs	r2, #0
 8021f30:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8021f32:	4b09      	ldr	r3, [pc, #36]	; (8021f58 <MX_SPI3_Init+0x64>)
 8021f34:	2200      	movs	r2, #0
 8021f36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8021f38:	4b07      	ldr	r3, [pc, #28]	; (8021f58 <MX_SPI3_Init+0x64>)
 8021f3a:	2200      	movs	r2, #0
 8021f3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8021f3e:	4b06      	ldr	r3, [pc, #24]	; (8021f58 <MX_SPI3_Init+0x64>)
 8021f40:	220a      	movs	r2, #10
 8021f42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8021f44:	4804      	ldr	r0, [pc, #16]	; (8021f58 <MX_SPI3_Init+0x64>)
 8021f46:	f004 fb87 	bl	8026658 <HAL_SPI_Init>
 8021f4a:	4603      	mov	r3, r0
 8021f4c:	2b00      	cmp	r3, #0
 8021f4e:	d001      	beq.n	8021f54 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8021f50:	f000 fc48 	bl	80227e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8021f54:	bf00      	nop
 8021f56:	bd80      	pop	{r7, pc}
 8021f58:	200115ec 	.word	0x200115ec
 8021f5c:	40003c00 	.word	0x40003c00

08021f60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8021f60:	b580      	push	{r7, lr}
 8021f62:	b092      	sub	sp, #72	; 0x48
 8021f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021f66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8021f6a:	2200      	movs	r2, #0
 8021f6c:	601a      	str	r2, [r3, #0]
 8021f6e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8021f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021f74:	2200      	movs	r2, #0
 8021f76:	601a      	str	r2, [r3, #0]
 8021f78:	605a      	str	r2, [r3, #4]
 8021f7a:	609a      	str	r2, [r3, #8]
 8021f7c:	60da      	str	r2, [r3, #12]
 8021f7e:	611a      	str	r2, [r3, #16]
 8021f80:	615a      	str	r2, [r3, #20]
 8021f82:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8021f84:	1d3b      	adds	r3, r7, #4
 8021f86:	2220      	movs	r2, #32
 8021f88:	2100      	movs	r1, #0
 8021f8a:	4618      	mov	r0, r3
 8021f8c:	f005 fc2f 	bl	80277ee <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8021f90:	4b39      	ldr	r3, [pc, #228]	; (8022078 <MX_TIM1_Init+0x118>)
 8021f92:	4a3a      	ldr	r2, [pc, #232]	; (802207c <MX_TIM1_Init+0x11c>)
 8021f94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8021f96:	4b38      	ldr	r3, [pc, #224]	; (8022078 <MX_TIM1_Init+0x118>)
 8021f98:	2201      	movs	r2, #1
 8021f9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021f9c:	4b36      	ldr	r3, [pc, #216]	; (8022078 <MX_TIM1_Init+0x118>)
 8021f9e:	2200      	movs	r2, #0
 8021fa0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1049;
 8021fa2:	4b35      	ldr	r3, [pc, #212]	; (8022078 <MX_TIM1_Init+0x118>)
 8021fa4:	f240 4219 	movw	r2, #1049	; 0x419
 8021fa8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021faa:	4b33      	ldr	r3, [pc, #204]	; (8022078 <MX_TIM1_Init+0x118>)
 8021fac:	2200      	movs	r2, #0
 8021fae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8021fb0:	4b31      	ldr	r3, [pc, #196]	; (8022078 <MX_TIM1_Init+0x118>)
 8021fb2:	2200      	movs	r2, #0
 8021fb4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021fb6:	4b30      	ldr	r3, [pc, #192]	; (8022078 <MX_TIM1_Init+0x118>)
 8021fb8:	2200      	movs	r2, #0
 8021fba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8021fbc:	482e      	ldr	r0, [pc, #184]	; (8022078 <MX_TIM1_Init+0x118>)
 8021fbe:	f004 fbfe 	bl	80267be <HAL_TIM_PWM_Init>
 8021fc2:	4603      	mov	r3, r0
 8021fc4:	2b00      	cmp	r3, #0
 8021fc6:	d001      	beq.n	8021fcc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8021fc8:	f000 fc0c 	bl	80227e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021fcc:	2300      	movs	r3, #0
 8021fce:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021fd0:	2300      	movs	r3, #0
 8021fd2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8021fd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8021fd8:	4619      	mov	r1, r3
 8021fda:	4827      	ldr	r0, [pc, #156]	; (8022078 <MX_TIM1_Init+0x118>)
 8021fdc:	f005 fae0 	bl	80275a0 <HAL_TIMEx_MasterConfigSynchronization>
 8021fe0:	4603      	mov	r3, r0
 8021fe2:	2b00      	cmp	r3, #0
 8021fe4:	d001      	beq.n	8021fea <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8021fe6:	f000 fbfd 	bl	80227e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8021fea:	2360      	movs	r3, #96	; 0x60
 8021fec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8021fee:	2300      	movs	r3, #0
 8021ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8021ff2:	2300      	movs	r3, #0
 8021ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8021ff6:	2300      	movs	r3, #0
 8021ff8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8021ffa:	2300      	movs	r3, #0
 8021ffc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8021ffe:	2300      	movs	r3, #0
 8022000:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8022002:	2300      	movs	r3, #0
 8022004:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8022006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802200a:	2204      	movs	r2, #4
 802200c:	4619      	mov	r1, r3
 802200e:	481a      	ldr	r0, [pc, #104]	; (8022078 <MX_TIM1_Init+0x118>)
 8022010:	f004 fe10 	bl	8026c34 <HAL_TIM_PWM_ConfigChannel>
 8022014:	4603      	mov	r3, r0
 8022016:	2b00      	cmp	r3, #0
 8022018:	d001      	beq.n	802201e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 802201a:	f000 fbe3 	bl	80227e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 802201e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8022022:	220c      	movs	r2, #12
 8022024:	4619      	mov	r1, r3
 8022026:	4814      	ldr	r0, [pc, #80]	; (8022078 <MX_TIM1_Init+0x118>)
 8022028:	f004 fe04 	bl	8026c34 <HAL_TIM_PWM_ConfigChannel>
 802202c:	4603      	mov	r3, r0
 802202e:	2b00      	cmp	r3, #0
 8022030:	d001      	beq.n	8022036 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8022032:	f000 fbd7 	bl	80227e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8022036:	2300      	movs	r3, #0
 8022038:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 802203a:	2300      	movs	r3, #0
 802203c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 802203e:	2300      	movs	r3, #0
 8022040:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8022042:	2300      	movs	r3, #0
 8022044:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8022046:	2300      	movs	r3, #0
 8022048:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 802204a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802204e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8022050:	2300      	movs	r3, #0
 8022052:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8022054:	1d3b      	adds	r3, r7, #4
 8022056:	4619      	mov	r1, r3
 8022058:	4807      	ldr	r0, [pc, #28]	; (8022078 <MX_TIM1_Init+0x118>)
 802205a:	f005 fb1d 	bl	8027698 <HAL_TIMEx_ConfigBreakDeadTime>
 802205e:	4603      	mov	r3, r0
 8022060:	2b00      	cmp	r3, #0
 8022062:	d001      	beq.n	8022068 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8022064:	f000 fbbe 	bl	80227e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8022068:	4803      	ldr	r0, [pc, #12]	; (8022078 <MX_TIM1_Init+0x118>)
 802206a:	f001 fb69 	bl	8023740 <HAL_TIM_MspPostInit>

}
 802206e:	bf00      	nop
 8022070:	3748      	adds	r7, #72	; 0x48
 8022072:	46bd      	mov	sp, r7
 8022074:	bd80      	pop	{r7, pc}
 8022076:	bf00      	nop
 8022078:	2001176c 	.word	0x2001176c
 802207c:	40010000 	.word	0x40010000

08022080 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8022080:	b580      	push	{r7, lr}
 8022082:	b086      	sub	sp, #24
 8022084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8022086:	f107 0308 	add.w	r3, r7, #8
 802208a:	2200      	movs	r2, #0
 802208c:	601a      	str	r2, [r3, #0]
 802208e:	605a      	str	r2, [r3, #4]
 8022090:	609a      	str	r2, [r3, #8]
 8022092:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8022094:	463b      	mov	r3, r7
 8022096:	2200      	movs	r2, #0
 8022098:	601a      	str	r2, [r3, #0]
 802209a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 802209c:	4b1d      	ldr	r3, [pc, #116]	; (8022114 <MX_TIM2_Init+0x94>)
 802209e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80220a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 80220a4:	4b1b      	ldr	r3, [pc, #108]	; (8022114 <MX_TIM2_Init+0x94>)
 80220a6:	2204      	movs	r2, #4
 80220a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80220aa:	4b1a      	ldr	r3, [pc, #104]	; (8022114 <MX_TIM2_Init+0x94>)
 80220ac:	2200      	movs	r2, #0
 80220ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 104999;
 80220b0:	4b18      	ldr	r3, [pc, #96]	; (8022114 <MX_TIM2_Init+0x94>)
 80220b2:	4a19      	ldr	r2, [pc, #100]	; (8022118 <MX_TIM2_Init+0x98>)
 80220b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80220b6:	4b17      	ldr	r3, [pc, #92]	; (8022114 <MX_TIM2_Init+0x94>)
 80220b8:	2200      	movs	r2, #0
 80220ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80220bc:	4b15      	ldr	r3, [pc, #84]	; (8022114 <MX_TIM2_Init+0x94>)
 80220be:	2200      	movs	r2, #0
 80220c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80220c2:	4814      	ldr	r0, [pc, #80]	; (8022114 <MX_TIM2_Init+0x94>)
 80220c4:	f004 fb2c 	bl	8026720 <HAL_TIM_Base_Init>
 80220c8:	4603      	mov	r3, r0
 80220ca:	2b00      	cmp	r3, #0
 80220cc:	d001      	beq.n	80220d2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80220ce:	f000 fb89 	bl	80227e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80220d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80220d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80220d8:	f107 0308 	add.w	r3, r7, #8
 80220dc:	4619      	mov	r1, r3
 80220de:	480d      	ldr	r0, [pc, #52]	; (8022114 <MX_TIM2_Init+0x94>)
 80220e0:	f004 fe6e 	bl	8026dc0 <HAL_TIM_ConfigClockSource>
 80220e4:	4603      	mov	r3, r0
 80220e6:	2b00      	cmp	r3, #0
 80220e8:	d001      	beq.n	80220ee <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80220ea:	f000 fb7b 	bl	80227e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80220ee:	2300      	movs	r3, #0
 80220f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80220f2:	2300      	movs	r3, #0
 80220f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80220f6:	463b      	mov	r3, r7
 80220f8:	4619      	mov	r1, r3
 80220fa:	4806      	ldr	r0, [pc, #24]	; (8022114 <MX_TIM2_Init+0x94>)
 80220fc:	f005 fa50 	bl	80275a0 <HAL_TIMEx_MasterConfigSynchronization>
 8022100:	4603      	mov	r3, r0
 8022102:	2b00      	cmp	r3, #0
 8022104:	d001      	beq.n	802210a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8022106:	f000 fb6d 	bl	80227e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 802210a:	bf00      	nop
 802210c:	3718      	adds	r7, #24
 802210e:	46bd      	mov	sp, r7
 8022110:	bd80      	pop	{r7, pc}
 8022112:	bf00      	nop
 8022114:	200117ac 	.word	0x200117ac
 8022118:	00019a27 	.word	0x00019a27

0802211c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 802211c:	b580      	push	{r7, lr}
 802211e:	b08a      	sub	sp, #40	; 0x28
 8022120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8022122:	f107 0320 	add.w	r3, r7, #32
 8022126:	2200      	movs	r2, #0
 8022128:	601a      	str	r2, [r3, #0]
 802212a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 802212c:	1d3b      	adds	r3, r7, #4
 802212e:	2200      	movs	r2, #0
 8022130:	601a      	str	r2, [r3, #0]
 8022132:	605a      	str	r2, [r3, #4]
 8022134:	609a      	str	r2, [r3, #8]
 8022136:	60da      	str	r2, [r3, #12]
 8022138:	611a      	str	r2, [r3, #16]
 802213a:	615a      	str	r2, [r3, #20]
 802213c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 802213e:	4b32      	ldr	r3, [pc, #200]	; (8022208 <MX_TIM3_Init+0xec>)
 8022140:	4a32      	ldr	r2, [pc, #200]	; (802220c <MX_TIM3_Init+0xf0>)
 8022142:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8022144:	4b30      	ldr	r3, [pc, #192]	; (8022208 <MX_TIM3_Init+0xec>)
 8022146:	2200      	movs	r2, #0
 8022148:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 802214a:	4b2f      	ldr	r3, [pc, #188]	; (8022208 <MX_TIM3_Init+0xec>)
 802214c:	2200      	movs	r2, #0
 802214e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8022150:	4b2d      	ldr	r3, [pc, #180]	; (8022208 <MX_TIM3_Init+0xec>)
 8022152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022156:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8022158:	4b2b      	ldr	r3, [pc, #172]	; (8022208 <MX_TIM3_Init+0xec>)
 802215a:	2200      	movs	r2, #0
 802215c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802215e:	4b2a      	ldr	r3, [pc, #168]	; (8022208 <MX_TIM3_Init+0xec>)
 8022160:	2200      	movs	r2, #0
 8022162:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8022164:	4828      	ldr	r0, [pc, #160]	; (8022208 <MX_TIM3_Init+0xec>)
 8022166:	f004 fb2a 	bl	80267be <HAL_TIM_PWM_Init>
 802216a:	4603      	mov	r3, r0
 802216c:	2b00      	cmp	r3, #0
 802216e:	d001      	beq.n	8022174 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8022170:	f000 fb38 	bl	80227e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8022174:	2300      	movs	r3, #0
 8022176:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8022178:	2300      	movs	r3, #0
 802217a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 802217c:	f107 0320 	add.w	r3, r7, #32
 8022180:	4619      	mov	r1, r3
 8022182:	4821      	ldr	r0, [pc, #132]	; (8022208 <MX_TIM3_Init+0xec>)
 8022184:	f005 fa0c 	bl	80275a0 <HAL_TIMEx_MasterConfigSynchronization>
 8022188:	4603      	mov	r3, r0
 802218a:	2b00      	cmp	r3, #0
 802218c:	d001      	beq.n	8022192 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 802218e:	f000 fb29 	bl	80227e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8022192:	2360      	movs	r3, #96	; 0x60
 8022194:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8022196:	2300      	movs	r3, #0
 8022198:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 802219a:	2300      	movs	r3, #0
 802219c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 802219e:	2300      	movs	r3, #0
 80221a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80221a2:	1d3b      	adds	r3, r7, #4
 80221a4:	2200      	movs	r2, #0
 80221a6:	4619      	mov	r1, r3
 80221a8:	4817      	ldr	r0, [pc, #92]	; (8022208 <MX_TIM3_Init+0xec>)
 80221aa:	f004 fd43 	bl	8026c34 <HAL_TIM_PWM_ConfigChannel>
 80221ae:	4603      	mov	r3, r0
 80221b0:	2b00      	cmp	r3, #0
 80221b2:	d001      	beq.n	80221b8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80221b4:	f000 fb16 	bl	80227e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80221b8:	1d3b      	adds	r3, r7, #4
 80221ba:	2204      	movs	r2, #4
 80221bc:	4619      	mov	r1, r3
 80221be:	4812      	ldr	r0, [pc, #72]	; (8022208 <MX_TIM3_Init+0xec>)
 80221c0:	f004 fd38 	bl	8026c34 <HAL_TIM_PWM_ConfigChannel>
 80221c4:	4603      	mov	r3, r0
 80221c6:	2b00      	cmp	r3, #0
 80221c8:	d001      	beq.n	80221ce <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80221ca:	f000 fb0b 	bl	80227e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80221ce:	1d3b      	adds	r3, r7, #4
 80221d0:	2208      	movs	r2, #8
 80221d2:	4619      	mov	r1, r3
 80221d4:	480c      	ldr	r0, [pc, #48]	; (8022208 <MX_TIM3_Init+0xec>)
 80221d6:	f004 fd2d 	bl	8026c34 <HAL_TIM_PWM_ConfigChannel>
 80221da:	4603      	mov	r3, r0
 80221dc:	2b00      	cmp	r3, #0
 80221de:	d001      	beq.n	80221e4 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 80221e0:	f000 fb00 	bl	80227e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80221e4:	1d3b      	adds	r3, r7, #4
 80221e6:	220c      	movs	r2, #12
 80221e8:	4619      	mov	r1, r3
 80221ea:	4807      	ldr	r0, [pc, #28]	; (8022208 <MX_TIM3_Init+0xec>)
 80221ec:	f004 fd22 	bl	8026c34 <HAL_TIM_PWM_ConfigChannel>
 80221f0:	4603      	mov	r3, r0
 80221f2:	2b00      	cmp	r3, #0
 80221f4:	d001      	beq.n	80221fa <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80221f6:	f000 faf5 	bl	80227e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80221fa:	4803      	ldr	r0, [pc, #12]	; (8022208 <MX_TIM3_Init+0xec>)
 80221fc:	f001 faa0 	bl	8023740 <HAL_TIM_MspPostInit>

}
 8022200:	bf00      	nop
 8022202:	3728      	adds	r7, #40	; 0x28
 8022204:	46bd      	mov	sp, r7
 8022206:	bd80      	pop	{r7, pc}
 8022208:	200115ac 	.word	0x200115ac
 802220c:	40000400 	.word	0x40000400

08022210 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8022210:	b580      	push	{r7, lr}
 8022212:	b08c      	sub	sp, #48	; 0x30
 8022214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8022216:	f107 030c 	add.w	r3, r7, #12
 802221a:	2224      	movs	r2, #36	; 0x24
 802221c:	2100      	movs	r1, #0
 802221e:	4618      	mov	r0, r3
 8022220:	f005 fae5 	bl	80277ee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8022224:	1d3b      	adds	r3, r7, #4
 8022226:	2200      	movs	r2, #0
 8022228:	601a      	str	r2, [r3, #0]
 802222a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 802222c:	4b20      	ldr	r3, [pc, #128]	; (80222b0 <MX_TIM4_Init+0xa0>)
 802222e:	4a21      	ldr	r2, [pc, #132]	; (80222b4 <MX_TIM4_Init+0xa4>)
 8022230:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8022232:	4b1f      	ldr	r3, [pc, #124]	; (80222b0 <MX_TIM4_Init+0xa0>)
 8022234:	2200      	movs	r2, #0
 8022236:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8022238:	4b1d      	ldr	r3, [pc, #116]	; (80222b0 <MX_TIM4_Init+0xa0>)
 802223a:	2200      	movs	r2, #0
 802223c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 802223e:	4b1c      	ldr	r3, [pc, #112]	; (80222b0 <MX_TIM4_Init+0xa0>)
 8022240:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022244:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8022246:	4b1a      	ldr	r3, [pc, #104]	; (80222b0 <MX_TIM4_Init+0xa0>)
 8022248:	2200      	movs	r2, #0
 802224a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802224c:	4b18      	ldr	r3, [pc, #96]	; (80222b0 <MX_TIM4_Init+0xa0>)
 802224e:	2200      	movs	r2, #0
 8022250:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8022252:	2303      	movs	r3, #3
 8022254:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8022256:	2300      	movs	r3, #0
 8022258:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 802225a:	2301      	movs	r3, #1
 802225c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 802225e:	2300      	movs	r3, #0
 8022260:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8022262:	2300      	movs	r3, #0
 8022264:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8022266:	2300      	movs	r3, #0
 8022268:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 802226a:	2301      	movs	r3, #1
 802226c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 802226e:	2300      	movs	r3, #0
 8022270:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8022272:	2300      	movs	r3, #0
 8022274:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8022276:	f107 030c 	add.w	r3, r7, #12
 802227a:	4619      	mov	r1, r3
 802227c:	480c      	ldr	r0, [pc, #48]	; (80222b0 <MX_TIM4_Init+0xa0>)
 802227e:	f004 fb07 	bl	8026890 <HAL_TIM_Encoder_Init>
 8022282:	4603      	mov	r3, r0
 8022284:	2b00      	cmp	r3, #0
 8022286:	d001      	beq.n	802228c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8022288:	f000 faac 	bl	80227e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802228c:	2300      	movs	r3, #0
 802228e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8022290:	2300      	movs	r3, #0
 8022292:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8022294:	1d3b      	adds	r3, r7, #4
 8022296:	4619      	mov	r1, r3
 8022298:	4805      	ldr	r0, [pc, #20]	; (80222b0 <MX_TIM4_Init+0xa0>)
 802229a:	f005 f981 	bl	80275a0 <HAL_TIMEx_MasterConfigSynchronization>
 802229e:	4603      	mov	r3, r0
 80222a0:	2b00      	cmp	r3, #0
 80222a2:	d001      	beq.n	80222a8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80222a4:	f000 fa9e 	bl	80227e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80222a8:	bf00      	nop
 80222aa:	3730      	adds	r7, #48	; 0x30
 80222ac:	46bd      	mov	sp, r7
 80222ae:	bd80      	pop	{r7, pc}
 80222b0:	200114d8 	.word	0x200114d8
 80222b4:	40000800 	.word	0x40000800

080222b8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80222b8:	b580      	push	{r7, lr}
 80222ba:	b086      	sub	sp, #24
 80222bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80222be:	f107 0308 	add.w	r3, r7, #8
 80222c2:	2200      	movs	r2, #0
 80222c4:	601a      	str	r2, [r3, #0]
 80222c6:	605a      	str	r2, [r3, #4]
 80222c8:	609a      	str	r2, [r3, #8]
 80222ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80222cc:	463b      	mov	r3, r7
 80222ce:	2200      	movs	r2, #0
 80222d0:	601a      	str	r2, [r3, #0]
 80222d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80222d4:	4b1d      	ldr	r3, [pc, #116]	; (802234c <MX_TIM5_Init+0x94>)
 80222d6:	4a1e      	ldr	r2, [pc, #120]	; (8022350 <MX_TIM5_Init+0x98>)
 80222d8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4;
 80222da:	4b1c      	ldr	r3, [pc, #112]	; (802234c <MX_TIM5_Init+0x94>)
 80222dc:	2204      	movs	r2, #4
 80222de:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80222e0:	4b1a      	ldr	r3, [pc, #104]	; (802234c <MX_TIM5_Init+0x94>)
 80222e2:	2200      	movs	r2, #0
 80222e4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20999;
 80222e6:	4b19      	ldr	r3, [pc, #100]	; (802234c <MX_TIM5_Init+0x94>)
 80222e8:	f245 2207 	movw	r2, #20999	; 0x5207
 80222ec:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80222ee:	4b17      	ldr	r3, [pc, #92]	; (802234c <MX_TIM5_Init+0x94>)
 80222f0:	2200      	movs	r2, #0
 80222f2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80222f4:	4b15      	ldr	r3, [pc, #84]	; (802234c <MX_TIM5_Init+0x94>)
 80222f6:	2200      	movs	r2, #0
 80222f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80222fa:	4814      	ldr	r0, [pc, #80]	; (802234c <MX_TIM5_Init+0x94>)
 80222fc:	f004 fa10 	bl	8026720 <HAL_TIM_Base_Init>
 8022300:	4603      	mov	r3, r0
 8022302:	2b00      	cmp	r3, #0
 8022304:	d001      	beq.n	802230a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8022306:	f000 fa6d 	bl	80227e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802230a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802230e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8022310:	f107 0308 	add.w	r3, r7, #8
 8022314:	4619      	mov	r1, r3
 8022316:	480d      	ldr	r0, [pc, #52]	; (802234c <MX_TIM5_Init+0x94>)
 8022318:	f004 fd52 	bl	8026dc0 <HAL_TIM_ConfigClockSource>
 802231c:	4603      	mov	r3, r0
 802231e:	2b00      	cmp	r3, #0
 8022320:	d001      	beq.n	8022326 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8022322:	f000 fa5f 	bl	80227e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8022326:	2300      	movs	r3, #0
 8022328:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802232a:	2300      	movs	r3, #0
 802232c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 802232e:	463b      	mov	r3, r7
 8022330:	4619      	mov	r1, r3
 8022332:	4806      	ldr	r0, [pc, #24]	; (802234c <MX_TIM5_Init+0x94>)
 8022334:	f005 f934 	bl	80275a0 <HAL_TIMEx_MasterConfigSynchronization>
 8022338:	4603      	mov	r3, r0
 802233a:	2b00      	cmp	r3, #0
 802233c:	d001      	beq.n	8022342 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 802233e:	f000 fa51 	bl	80227e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8022342:	bf00      	nop
 8022344:	3718      	adds	r7, #24
 8022346:	46bd      	mov	sp, r7
 8022348:	bd80      	pop	{r7, pc}
 802234a:	bf00      	nop
 802234c:	2001156c 	.word	0x2001156c
 8022350:	40000c00 	.word	0x40000c00

08022354 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8022354:	b580      	push	{r7, lr}
 8022356:	b082      	sub	sp, #8
 8022358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802235a:	463b      	mov	r3, r7
 802235c:	2200      	movs	r2, #0
 802235e:	601a      	str	r2, [r3, #0]
 8022360:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8022362:	4b15      	ldr	r3, [pc, #84]	; (80223b8 <MX_TIM6_Init+0x64>)
 8022364:	4a15      	ldr	r2, [pc, #84]	; (80223bc <MX_TIM6_Init+0x68>)
 8022366:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 8022368:	4b13      	ldr	r3, [pc, #76]	; (80223b8 <MX_TIM6_Init+0x64>)
 802236a:	2204      	movs	r2, #4
 802236c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 802236e:	4b12      	ldr	r3, [pc, #72]	; (80223b8 <MX_TIM6_Init+0x64>)
 8022370:	2200      	movs	r2, #0
 8022372:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10499;
 8022374:	4b10      	ldr	r3, [pc, #64]	; (80223b8 <MX_TIM6_Init+0x64>)
 8022376:	f642 1203 	movw	r2, #10499	; 0x2903
 802237a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802237c:	4b0e      	ldr	r3, [pc, #56]	; (80223b8 <MX_TIM6_Init+0x64>)
 802237e:	2200      	movs	r2, #0
 8022380:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8022382:	480d      	ldr	r0, [pc, #52]	; (80223b8 <MX_TIM6_Init+0x64>)
 8022384:	f004 f9cc 	bl	8026720 <HAL_TIM_Base_Init>
 8022388:	4603      	mov	r3, r0
 802238a:	2b00      	cmp	r3, #0
 802238c:	d001      	beq.n	8022392 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 802238e:	f000 fa29 	bl	80227e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8022392:	2300      	movs	r3, #0
 8022394:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8022396:	2300      	movs	r3, #0
 8022398:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 802239a:	463b      	mov	r3, r7
 802239c:	4619      	mov	r1, r3
 802239e:	4806      	ldr	r0, [pc, #24]	; (80223b8 <MX_TIM6_Init+0x64>)
 80223a0:	f005 f8fe 	bl	80275a0 <HAL_TIMEx_MasterConfigSynchronization>
 80223a4:	4603      	mov	r3, r0
 80223a6:	2b00      	cmp	r3, #0
 80223a8:	d001      	beq.n	80223ae <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80223aa:	f000 fa1b 	bl	80227e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80223ae:	bf00      	nop
 80223b0:	3708      	adds	r7, #8
 80223b2:	46bd      	mov	sp, r7
 80223b4:	bd80      	pop	{r7, pc}
 80223b6:	bf00      	nop
 80223b8:	2001172c 	.word	0x2001172c
 80223bc:	40001000 	.word	0x40001000

080223c0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80223c0:	b580      	push	{r7, lr}
 80223c2:	b082      	sub	sp, #8
 80223c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80223c6:	463b      	mov	r3, r7
 80223c8:	2200      	movs	r2, #0
 80223ca:	601a      	str	r2, [r3, #0]
 80223cc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80223ce:	4b15      	ldr	r3, [pc, #84]	; (8022424 <MX_TIM7_Init+0x64>)
 80223d0:	4a15      	ldr	r2, [pc, #84]	; (8022428 <MX_TIM7_Init+0x68>)
 80223d2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 80223d4:	4b13      	ldr	r3, [pc, #76]	; (8022424 <MX_TIM7_Init+0x64>)
 80223d6:	2204      	movs	r2, #4
 80223d8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80223da:	4b12      	ldr	r3, [pc, #72]	; (8022424 <MX_TIM7_Init+0x64>)
 80223dc:	2200      	movs	r2, #0
 80223de:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1049;
 80223e0:	4b10      	ldr	r3, [pc, #64]	; (8022424 <MX_TIM7_Init+0x64>)
 80223e2:	f240 4219 	movw	r2, #1049	; 0x419
 80223e6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80223e8:	4b0e      	ldr	r3, [pc, #56]	; (8022424 <MX_TIM7_Init+0x64>)
 80223ea:	2200      	movs	r2, #0
 80223ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80223ee:	480d      	ldr	r0, [pc, #52]	; (8022424 <MX_TIM7_Init+0x64>)
 80223f0:	f004 f996 	bl	8026720 <HAL_TIM_Base_Init>
 80223f4:	4603      	mov	r3, r0
 80223f6:	2b00      	cmp	r3, #0
 80223f8:	d001      	beq.n	80223fe <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80223fa:	f000 f9f3 	bl	80227e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80223fe:	2300      	movs	r3, #0
 8022400:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8022402:	2300      	movs	r3, #0
 8022404:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8022406:	463b      	mov	r3, r7
 8022408:	4619      	mov	r1, r3
 802240a:	4806      	ldr	r0, [pc, #24]	; (8022424 <MX_TIM7_Init+0x64>)
 802240c:	f005 f8c8 	bl	80275a0 <HAL_TIMEx_MasterConfigSynchronization>
 8022410:	4603      	mov	r3, r0
 8022412:	2b00      	cmp	r3, #0
 8022414:	d001      	beq.n	802241a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8022416:	f000 f9e5 	bl	80227e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 802241a:	bf00      	nop
 802241c:	3708      	adds	r7, #8
 802241e:	46bd      	mov	sp, r7
 8022420:	bd80      	pop	{r7, pc}
 8022422:	bf00      	nop
 8022424:	2001182c 	.word	0x2001182c
 8022428:	40001400 	.word	0x40001400

0802242c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 802242c:	b580      	push	{r7, lr}
 802242e:	b08c      	sub	sp, #48	; 0x30
 8022430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8022432:	f107 030c 	add.w	r3, r7, #12
 8022436:	2224      	movs	r2, #36	; 0x24
 8022438:	2100      	movs	r1, #0
 802243a:	4618      	mov	r0, r3
 802243c:	f005 f9d7 	bl	80277ee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8022440:	1d3b      	adds	r3, r7, #4
 8022442:	2200      	movs	r2, #0
 8022444:	601a      	str	r2, [r3, #0]
 8022446:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8022448:	4b22      	ldr	r3, [pc, #136]	; (80224d4 <MX_TIM8_Init+0xa8>)
 802244a:	4a23      	ldr	r2, [pc, #140]	; (80224d8 <MX_TIM8_Init+0xac>)
 802244c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 802244e:	4b21      	ldr	r3, [pc, #132]	; (80224d4 <MX_TIM8_Init+0xa8>)
 8022450:	2200      	movs	r2, #0
 8022452:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8022454:	4b1f      	ldr	r3, [pc, #124]	; (80224d4 <MX_TIM8_Init+0xa8>)
 8022456:	2200      	movs	r2, #0
 8022458:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 802245a:	4b1e      	ldr	r3, [pc, #120]	; (80224d4 <MX_TIM8_Init+0xa8>)
 802245c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022460:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8022462:	4b1c      	ldr	r3, [pc, #112]	; (80224d4 <MX_TIM8_Init+0xa8>)
 8022464:	2200      	movs	r2, #0
 8022466:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8022468:	4b1a      	ldr	r3, [pc, #104]	; (80224d4 <MX_TIM8_Init+0xa8>)
 802246a:	2200      	movs	r2, #0
 802246c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802246e:	4b19      	ldr	r3, [pc, #100]	; (80224d4 <MX_TIM8_Init+0xa8>)
 8022470:	2200      	movs	r2, #0
 8022472:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8022474:	2303      	movs	r3, #3
 8022476:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8022478:	2300      	movs	r3, #0
 802247a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 802247c:	2301      	movs	r3, #1
 802247e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8022480:	2300      	movs	r3, #0
 8022482:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8022484:	2300      	movs	r3, #0
 8022486:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8022488:	2300      	movs	r3, #0
 802248a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 802248c:	2301      	movs	r3, #1
 802248e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8022490:	2300      	movs	r3, #0
 8022492:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8022494:	2300      	movs	r3, #0
 8022496:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8022498:	f107 030c 	add.w	r3, r7, #12
 802249c:	4619      	mov	r1, r3
 802249e:	480d      	ldr	r0, [pc, #52]	; (80224d4 <MX_TIM8_Init+0xa8>)
 80224a0:	f004 f9f6 	bl	8026890 <HAL_TIM_Encoder_Init>
 80224a4:	4603      	mov	r3, r0
 80224a6:	2b00      	cmp	r3, #0
 80224a8:	d001      	beq.n	80224ae <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80224aa:	f000 f99b 	bl	80227e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80224ae:	2300      	movs	r3, #0
 80224b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80224b2:	2300      	movs	r3, #0
 80224b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80224b6:	1d3b      	adds	r3, r7, #4
 80224b8:	4619      	mov	r1, r3
 80224ba:	4806      	ldr	r0, [pc, #24]	; (80224d4 <MX_TIM8_Init+0xa8>)
 80224bc:	f005 f870 	bl	80275a0 <HAL_TIMEx_MasterConfigSynchronization>
 80224c0:	4603      	mov	r3, r0
 80224c2:	2b00      	cmp	r3, #0
 80224c4:	d001      	beq.n	80224ca <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80224c6:	f000 f98d 	bl	80227e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80224ca:	bf00      	nop
 80224cc:	3730      	adds	r7, #48	; 0x30
 80224ce:	46bd      	mov	sp, r7
 80224d0:	bd80      	pop	{r7, pc}
 80224d2:	bf00      	nop
 80224d4:	20011498 	.word	0x20011498
 80224d8:	40010400 	.word	0x40010400

080224dc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80224dc:	b580      	push	{r7, lr}
 80224de:	b088      	sub	sp, #32
 80224e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80224e2:	1d3b      	adds	r3, r7, #4
 80224e4:	2200      	movs	r2, #0
 80224e6:	601a      	str	r2, [r3, #0]
 80224e8:	605a      	str	r2, [r3, #4]
 80224ea:	609a      	str	r2, [r3, #8]
 80224ec:	60da      	str	r2, [r3, #12]
 80224ee:	611a      	str	r2, [r3, #16]
 80224f0:	615a      	str	r2, [r3, #20]
 80224f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80224f4:	4b1e      	ldr	r3, [pc, #120]	; (8022570 <MX_TIM11_Init+0x94>)
 80224f6:	4a1f      	ldr	r2, [pc, #124]	; (8022574 <MX_TIM11_Init+0x98>)
 80224f8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80224fa:	4b1d      	ldr	r3, [pc, #116]	; (8022570 <MX_TIM11_Init+0x94>)
 80224fc:	2200      	movs	r2, #0
 80224fe:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8022500:	4b1b      	ldr	r3, [pc, #108]	; (8022570 <MX_TIM11_Init+0x94>)
 8022502:	2200      	movs	r2, #0
 8022504:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1679;
 8022506:	4b1a      	ldr	r3, [pc, #104]	; (8022570 <MX_TIM11_Init+0x94>)
 8022508:	f240 628f 	movw	r2, #1679	; 0x68f
 802250c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802250e:	4b18      	ldr	r3, [pc, #96]	; (8022570 <MX_TIM11_Init+0x94>)
 8022510:	2200      	movs	r2, #0
 8022512:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8022514:	4b16      	ldr	r3, [pc, #88]	; (8022570 <MX_TIM11_Init+0x94>)
 8022516:	2200      	movs	r2, #0
 8022518:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 802251a:	4815      	ldr	r0, [pc, #84]	; (8022570 <MX_TIM11_Init+0x94>)
 802251c:	f004 f900 	bl	8026720 <HAL_TIM_Base_Init>
 8022520:	4603      	mov	r3, r0
 8022522:	2b00      	cmp	r3, #0
 8022524:	d001      	beq.n	802252a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8022526:	f000 f95d 	bl	80227e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 802252a:	4811      	ldr	r0, [pc, #68]	; (8022570 <MX_TIM11_Init+0x94>)
 802252c:	f004 f947 	bl	80267be <HAL_TIM_PWM_Init>
 8022530:	4603      	mov	r3, r0
 8022532:	2b00      	cmp	r3, #0
 8022534:	d001      	beq.n	802253a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8022536:	f000 f955 	bl	80227e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 802253a:	2360      	movs	r3, #96	; 0x60
 802253c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 802253e:	2300      	movs	r3, #0
 8022540:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8022542:	2300      	movs	r3, #0
 8022544:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8022546:	2300      	movs	r3, #0
 8022548:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 802254a:	1d3b      	adds	r3, r7, #4
 802254c:	2200      	movs	r2, #0
 802254e:	4619      	mov	r1, r3
 8022550:	4807      	ldr	r0, [pc, #28]	; (8022570 <MX_TIM11_Init+0x94>)
 8022552:	f004 fb6f 	bl	8026c34 <HAL_TIM_PWM_ConfigChannel>
 8022556:	4603      	mov	r3, r0
 8022558:	2b00      	cmp	r3, #0
 802255a:	d001      	beq.n	8022560 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 802255c:	f000 f942 	bl	80227e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8022560:	4803      	ldr	r0, [pc, #12]	; (8022570 <MX_TIM11_Init+0x94>)
 8022562:	f001 f8ed 	bl	8023740 <HAL_TIM_MspPostInit>

}
 8022566:	bf00      	nop
 8022568:	3720      	adds	r7, #32
 802256a:	46bd      	mov	sp, r7
 802256c:	bd80      	pop	{r7, pc}
 802256e:	bf00      	nop
 8022570:	2001168c 	.word	0x2001168c
 8022574:	40014800 	.word	0x40014800

08022578 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8022578:	b580      	push	{r7, lr}
 802257a:	b088      	sub	sp, #32
 802257c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 802257e:	1d3b      	adds	r3, r7, #4
 8022580:	2200      	movs	r2, #0
 8022582:	601a      	str	r2, [r3, #0]
 8022584:	605a      	str	r2, [r3, #4]
 8022586:	609a      	str	r2, [r3, #8]
 8022588:	60da      	str	r2, [r3, #12]
 802258a:	611a      	str	r2, [r3, #16]
 802258c:	615a      	str	r2, [r3, #20]
 802258e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8022590:	4b1a      	ldr	r3, [pc, #104]	; (80225fc <MX_TIM12_Init+0x84>)
 8022592:	4a1b      	ldr	r2, [pc, #108]	; (8022600 <MX_TIM12_Init+0x88>)
 8022594:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 880;
 8022596:	4b19      	ldr	r3, [pc, #100]	; (80225fc <MX_TIM12_Init+0x84>)
 8022598:	f44f 725c 	mov.w	r2, #880	; 0x370
 802259c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 802259e:	4b17      	ldr	r3, [pc, #92]	; (80225fc <MX_TIM12_Init+0x84>)
 80225a0:	2200      	movs	r2, #0
 80225a2:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 53;
 80225a4:	4b15      	ldr	r3, [pc, #84]	; (80225fc <MX_TIM12_Init+0x84>)
 80225a6:	2235      	movs	r2, #53	; 0x35
 80225a8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80225aa:	4b14      	ldr	r3, [pc, #80]	; (80225fc <MX_TIM12_Init+0x84>)
 80225ac:	2200      	movs	r2, #0
 80225ae:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80225b0:	4b12      	ldr	r3, [pc, #72]	; (80225fc <MX_TIM12_Init+0x84>)
 80225b2:	2200      	movs	r2, #0
 80225b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80225b6:	4811      	ldr	r0, [pc, #68]	; (80225fc <MX_TIM12_Init+0x84>)
 80225b8:	f004 f901 	bl	80267be <HAL_TIM_PWM_Init>
 80225bc:	4603      	mov	r3, r0
 80225be:	2b00      	cmp	r3, #0
 80225c0:	d001      	beq.n	80225c6 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80225c2:	f000 f90f 	bl	80227e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80225c6:	2360      	movs	r3, #96	; 0x60
 80225c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80225ca:	2300      	movs	r3, #0
 80225cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80225ce:	2300      	movs	r3, #0
 80225d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80225d2:	2300      	movs	r3, #0
 80225d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80225d6:	1d3b      	adds	r3, r7, #4
 80225d8:	2204      	movs	r2, #4
 80225da:	4619      	mov	r1, r3
 80225dc:	4807      	ldr	r0, [pc, #28]	; (80225fc <MX_TIM12_Init+0x84>)
 80225de:	f004 fb29 	bl	8026c34 <HAL_TIM_PWM_ConfigChannel>
 80225e2:	4603      	mov	r3, r0
 80225e4:	2b00      	cmp	r3, #0
 80225e6:	d001      	beq.n	80225ec <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80225e8:	f000 f8fc 	bl	80227e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80225ec:	4803      	ldr	r0, [pc, #12]	; (80225fc <MX_TIM12_Init+0x84>)
 80225ee:	f001 f8a7 	bl	8023740 <HAL_TIM_MspPostInit>

}
 80225f2:	bf00      	nop
 80225f4:	3720      	adds	r7, #32
 80225f6:	46bd      	mov	sp, r7
 80225f8:	bd80      	pop	{r7, pc}
 80225fa:	bf00      	nop
 80225fc:	200117ec 	.word	0x200117ec
 8022600:	40001800 	.word	0x40001800

08022604 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8022604:	b580      	push	{r7, lr}
 8022606:	b082      	sub	sp, #8
 8022608:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 802260a:	2300      	movs	r3, #0
 802260c:	607b      	str	r3, [r7, #4]
 802260e:	4b0c      	ldr	r3, [pc, #48]	; (8022640 <MX_DMA_Init+0x3c>)
 8022610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022612:	4a0b      	ldr	r2, [pc, #44]	; (8022640 <MX_DMA_Init+0x3c>)
 8022614:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8022618:	6313      	str	r3, [r2, #48]	; 0x30
 802261a:	4b09      	ldr	r3, [pc, #36]	; (8022640 <MX_DMA_Init+0x3c>)
 802261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802261e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8022622:	607b      	str	r3, [r7, #4]
 8022624:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8022626:	2200      	movs	r2, #0
 8022628:	2100      	movs	r1, #0
 802262a:	2038      	movs	r0, #56	; 0x38
 802262c:	f002 fd43 	bl	80250b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8022630:	2038      	movs	r0, #56	; 0x38
 8022632:	f002 fd5c 	bl	80250ee <HAL_NVIC_EnableIRQ>

}
 8022636:	bf00      	nop
 8022638:	3708      	adds	r7, #8
 802263a:	46bd      	mov	sp, r7
 802263c:	bd80      	pop	{r7, pc}
 802263e:	bf00      	nop
 8022640:	40023800 	.word	0x40023800

08022644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8022644:	b580      	push	{r7, lr}
 8022646:	b08a      	sub	sp, #40	; 0x28
 8022648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802264a:	f107 0314 	add.w	r3, r7, #20
 802264e:	2200      	movs	r2, #0
 8022650:	601a      	str	r2, [r3, #0]
 8022652:	605a      	str	r2, [r3, #4]
 8022654:	609a      	str	r2, [r3, #8]
 8022656:	60da      	str	r2, [r3, #12]
 8022658:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 802265a:	2300      	movs	r3, #0
 802265c:	613b      	str	r3, [r7, #16]
 802265e:	4b5c      	ldr	r3, [pc, #368]	; (80227d0 <MX_GPIO_Init+0x18c>)
 8022660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022662:	4a5b      	ldr	r2, [pc, #364]	; (80227d0 <MX_GPIO_Init+0x18c>)
 8022664:	f043 0304 	orr.w	r3, r3, #4
 8022668:	6313      	str	r3, [r2, #48]	; 0x30
 802266a:	4b59      	ldr	r3, [pc, #356]	; (80227d0 <MX_GPIO_Init+0x18c>)
 802266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802266e:	f003 0304 	and.w	r3, r3, #4
 8022672:	613b      	str	r3, [r7, #16]
 8022674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8022676:	2300      	movs	r3, #0
 8022678:	60fb      	str	r3, [r7, #12]
 802267a:	4b55      	ldr	r3, [pc, #340]	; (80227d0 <MX_GPIO_Init+0x18c>)
 802267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802267e:	4a54      	ldr	r2, [pc, #336]	; (80227d0 <MX_GPIO_Init+0x18c>)
 8022680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022684:	6313      	str	r3, [r2, #48]	; 0x30
 8022686:	4b52      	ldr	r3, [pc, #328]	; (80227d0 <MX_GPIO_Init+0x18c>)
 8022688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802268a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802268e:	60fb      	str	r3, [r7, #12]
 8022690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8022692:	2300      	movs	r3, #0
 8022694:	60bb      	str	r3, [r7, #8]
 8022696:	4b4e      	ldr	r3, [pc, #312]	; (80227d0 <MX_GPIO_Init+0x18c>)
 8022698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802269a:	4a4d      	ldr	r2, [pc, #308]	; (80227d0 <MX_GPIO_Init+0x18c>)
 802269c:	f043 0301 	orr.w	r3, r3, #1
 80226a0:	6313      	str	r3, [r2, #48]	; 0x30
 80226a2:	4b4b      	ldr	r3, [pc, #300]	; (80227d0 <MX_GPIO_Init+0x18c>)
 80226a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80226a6:	f003 0301 	and.w	r3, r3, #1
 80226aa:	60bb      	str	r3, [r7, #8]
 80226ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80226ae:	2300      	movs	r3, #0
 80226b0:	607b      	str	r3, [r7, #4]
 80226b2:	4b47      	ldr	r3, [pc, #284]	; (80227d0 <MX_GPIO_Init+0x18c>)
 80226b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80226b6:	4a46      	ldr	r2, [pc, #280]	; (80227d0 <MX_GPIO_Init+0x18c>)
 80226b8:	f043 0302 	orr.w	r3, r3, #2
 80226bc:	6313      	str	r3, [r2, #48]	; 0x30
 80226be:	4b44      	ldr	r3, [pc, #272]	; (80227d0 <MX_GPIO_Init+0x18c>)
 80226c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80226c2:	f003 0302 	and.w	r3, r3, #2
 80226c6:	607b      	str	r3, [r7, #4]
 80226c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80226ca:	2300      	movs	r3, #0
 80226cc:	603b      	str	r3, [r7, #0]
 80226ce:	4b40      	ldr	r3, [pc, #256]	; (80227d0 <MX_GPIO_Init+0x18c>)
 80226d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80226d2:	4a3f      	ldr	r2, [pc, #252]	; (80227d0 <MX_GPIO_Init+0x18c>)
 80226d4:	f043 0308 	orr.w	r3, r3, #8
 80226d8:	6313      	str	r3, [r2, #48]	; 0x30
 80226da:	4b3d      	ldr	r3, [pc, #244]	; (80227d0 <MX_GPIO_Init+0x18c>)
 80226dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80226de:	f003 0308 	and.w	r3, r3, #8
 80226e2:	603b      	str	r3, [r7, #0]
 80226e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80226e6:	2200      	movs	r2, #0
 80226e8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80226ec:	4839      	ldr	r0, [pc, #228]	; (80227d4 <MX_GPIO_Init+0x190>)
 80226ee:	f003 fa39 	bl	8025b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80226f2:	2201      	movs	r2, #1
 80226f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80226f8:	4837      	ldr	r0, [pc, #220]	; (80227d8 <MX_GPIO_Init+0x194>)
 80226fa:	f003 fa33 	bl	8025b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 80226fe:	2200      	movs	r2, #0
 8022700:	f44f 4105 	mov.w	r1, #34048	; 0x8500
 8022704:	4835      	ldr	r0, [pc, #212]	; (80227dc <MX_GPIO_Init+0x198>)
 8022706:	f003 fa2d 	bl	8025b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 802270a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 802270e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8022710:	2301      	movs	r3, #1
 8022712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022714:	2300      	movs	r3, #0
 8022716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8022718:	2300      	movs	r3, #0
 802271a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802271c:	f107 0314 	add.w	r3, r7, #20
 8022720:	4619      	mov	r1, r3
 8022722:	482c      	ldr	r0, [pc, #176]	; (80227d4 <MX_GPIO_Init+0x190>)
 8022724:	f003 f86c 	bl	8025800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8022728:	2307      	movs	r3, #7
 802272a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802272c:	2300      	movs	r3, #0
 802272e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8022730:	2301      	movs	r3, #1
 8022732:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8022734:	f107 0314 	add.w	r3, r7, #20
 8022738:	4619      	mov	r1, r3
 802273a:	4827      	ldr	r0, [pc, #156]	; (80227d8 <MX_GPIO_Init+0x194>)
 802273c:	f003 f860 	bl	8025800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8022740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8022744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8022746:	2301      	movs	r3, #1
 8022748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802274a:	2300      	movs	r3, #0
 802274c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802274e:	2300      	movs	r3, #0
 8022750:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8022752:	f107 0314 	add.w	r3, r7, #20
 8022756:	4619      	mov	r1, r3
 8022758:	481f      	ldr	r0, [pc, #124]	; (80227d8 <MX_GPIO_Init+0x194>)
 802275a:	f003 f851 	bl	8025800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_8;
 802275e:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8022762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8022764:	2300      	movs	r3, #0
 8022766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022768:	2300      	movs	r3, #0
 802276a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802276c:	f107 0314 	add.w	r3, r7, #20
 8022770:	4619      	mov	r1, r3
 8022772:	4819      	ldr	r0, [pc, #100]	; (80227d8 <MX_GPIO_Init+0x194>)
 8022774:	f003 f844 	bl	8025800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15;
 8022778:	f44f 4305 	mov.w	r3, #34048	; 0x8500
 802277c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802277e:	2301      	movs	r3, #1
 8022780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022782:	2300      	movs	r3, #0
 8022784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8022786:	2300      	movs	r3, #0
 8022788:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802278a:	f107 0314 	add.w	r3, r7, #20
 802278e:	4619      	mov	r1, r3
 8022790:	4812      	ldr	r0, [pc, #72]	; (80227dc <MX_GPIO_Init+0x198>)
 8022792:	f003 f835 	bl	8025800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8022796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802279a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802279c:	2300      	movs	r3, #0
 802279e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80227a0:	2301      	movs	r3, #1
 80227a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80227a4:	f107 0314 	add.w	r3, r7, #20
 80227a8:	4619      	mov	r1, r3
 80227aa:	480c      	ldr	r0, [pc, #48]	; (80227dc <MX_GPIO_Init+0x198>)
 80227ac:	f003 f828 	bl	8025800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80227b0:	2304      	movs	r3, #4
 80227b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80227b4:	2300      	movs	r3, #0
 80227b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80227b8:	2300      	movs	r3, #0
 80227ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80227bc:	f107 0314 	add.w	r3, r7, #20
 80227c0:	4619      	mov	r1, r3
 80227c2:	4807      	ldr	r0, [pc, #28]	; (80227e0 <MX_GPIO_Init+0x19c>)
 80227c4:	f003 f81c 	bl	8025800 <HAL_GPIO_Init>

}
 80227c8:	bf00      	nop
 80227ca:	3728      	adds	r7, #40	; 0x28
 80227cc:	46bd      	mov	sp, r7
 80227ce:	bd80      	pop	{r7, pc}
 80227d0:	40023800 	.word	0x40023800
 80227d4:	40020800 	.word	0x40020800
 80227d8:	40020400 	.word	0x40020400
 80227dc:	40020000 	.word	0x40020000
 80227e0:	40020c00 	.word	0x40020c00

080227e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80227e4:	b480      	push	{r7}
 80227e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80227e8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80227ea:	e7fe      	b.n	80227ea <Error_Handler+0x6>

080227ec <_ZN5Motor4InitEv>:
#include "motor.hpp"
#include "declare_extern.h"

void Motor::Init()
{
 80227ec:	b580      	push	{r7, lr}
 80227ee:	b082      	sub	sp, #8
 80227f0:	af00      	add	r7, sp, #0
 80227f2:	6078      	str	r0, [r7, #4]
    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 80227f4:	2104      	movs	r1, #4
 80227f6:	4812      	ldr	r0, [pc, #72]	; (8022840 <_ZN5Motor4InitEv+0x54>)
 80227f8:	f004 f80c 	bl	8026814 <HAL_TIM_PWM_Start>
 80227fc:	4603      	mov	r3, r0
 80227fe:	2b00      	cmp	r3, #0
 8022800:	bf14      	ite	ne
 8022802:	2301      	movne	r3, #1
 8022804:	2300      	moveq	r3, #0
 8022806:	b2db      	uxtb	r3, r3
 8022808:	2b00      	cmp	r3, #0
 802280a:	d004      	beq.n	8022816 <_ZN5Motor4InitEv+0x2a>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim1_ch2 = true; // MOTOR_R
 802280c:	4b0d      	ldr	r3, [pc, #52]	; (8022844 <_ZN5Motor4InitEv+0x58>)
 802280e:	2201      	movs	r2, #1
 8022810:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8022812:	f7ff ffe7 	bl	80227e4 <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8022816:	210c      	movs	r1, #12
 8022818:	4809      	ldr	r0, [pc, #36]	; (8022840 <_ZN5Motor4InitEv+0x54>)
 802281a:	f003 fffb 	bl	8026814 <HAL_TIM_PWM_Start>
 802281e:	4603      	mov	r3, r0
 8022820:	2b00      	cmp	r3, #0
 8022822:	bf14      	ite	ne
 8022824:	2301      	movne	r3, #1
 8022826:	2300      	moveq	r3, #0
 8022828:	b2db      	uxtb	r3, r3
 802282a:	2b00      	cmp	r3, #0
 802282c:	d004      	beq.n	8022838 <_ZN5Motor4InitEv+0x4c>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim1_ch4 = true; // MOTOR_L
 802282e:	4b06      	ldr	r3, [pc, #24]	; (8022848 <_ZN5Motor4InitEv+0x5c>)
 8022830:	2201      	movs	r2, #1
 8022832:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8022834:	f7ff ffd6 	bl	80227e4 <Error_Handler>
    }
}
 8022838:	bf00      	nop
 802283a:	3708      	adds	r7, #8
 802283c:	46bd      	mov	sp, r7
 802283e:	bd80      	pop	{r7, pc}
 8022840:	2001176c 	.word	0x2001176c
 8022844:	200004d4 	.word	0x200004d4
 8022848:	200004d5 	.word	0x200004d5
 802284c:	00000000 	.word	0x00000000

08022850 <_ZN5Motor5DriveEff>:

void Motor::Drive(float translation_ratio, float rotation_ratio)
{
 8022850:	b580      	push	{r7, lr}
 8022852:	b08a      	sub	sp, #40	; 0x28
 8022854:	af00      	add	r7, sp, #0
 8022856:	60f8      	str	r0, [r7, #12]
 8022858:	ed87 0a02 	vstr	s0, [r7, #8]
 802285c:	edc7 0a01 	vstr	s1, [r7, #4]
#ifdef DEBUG_MODE
    g_translation_ratio = translation_ratio;
 8022860:	4a89      	ldr	r2, [pc, #548]	; (8022a88 <_ZN5Motor5DriveEff+0x238>)
 8022862:	68bb      	ldr	r3, [r7, #8]
 8022864:	6013      	str	r3, [r2, #0]
    g_rotation_ratio    = rotation_ratio;
 8022866:	4a89      	ldr	r2, [pc, #548]	; (8022a8c <_ZN5Motor5DriveEff+0x23c>)
 8022868:	687b      	ldr	r3, [r7, #4]
 802286a:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    if(translation_ratio > LIMIT_TRANS_DUTY)       translation_ratio =  LIMIT_TRANS_DUTY;
 802286c:	68b8      	ldr	r0, [r7, #8]
 802286e:	f7fd fd53 	bl	8020318 <__aeabi_f2d>
 8022872:	a381      	add	r3, pc, #516	; (adr r3, 8022a78 <_ZN5Motor5DriveEff+0x228>)
 8022874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022878:	f7fe f836 	bl	80208e8 <__aeabi_dcmpgt>
 802287c:	4603      	mov	r3, r0
 802287e:	2b00      	cmp	r3, #0
 8022880:	d002      	beq.n	8022888 <_ZN5Motor5DriveEff+0x38>
 8022882:	4b83      	ldr	r3, [pc, #524]	; (8022a90 <_ZN5Motor5DriveEff+0x240>)
 8022884:	60bb      	str	r3, [r7, #8]
 8022886:	e00c      	b.n	80228a2 <_ZN5Motor5DriveEff+0x52>
    else if(translation_ratio < -LIMIT_TRANS_DUTY) translation_ratio = -LIMIT_TRANS_DUTY;
 8022888:	68b8      	ldr	r0, [r7, #8]
 802288a:	f7fd fd45 	bl	8020318 <__aeabi_f2d>
 802288e:	a37c      	add	r3, pc, #496	; (adr r3, 8022a80 <_ZN5Motor5DriveEff+0x230>)
 8022890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022894:	f7fe f80a 	bl	80208ac <__aeabi_dcmplt>
 8022898:	4603      	mov	r3, r0
 802289a:	2b00      	cmp	r3, #0
 802289c:	d001      	beq.n	80228a2 <_ZN5Motor5DriveEff+0x52>
 802289e:	4b7d      	ldr	r3, [pc, #500]	; (8022a94 <_ZN5Motor5DriveEff+0x244>)
 80228a0:	60bb      	str	r3, [r7, #8]

    float sum = translation_ratio + rotation_ratio;
 80228a2:	ed97 7a02 	vldr	s14, [r7, #8]
 80228a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80228aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80228ae:	edc7 7a06 	vstr	s15, [r7, #24]
    float excess = 0;
 80228b2:	f04f 0300 	mov.w	r3, #0
 80228b6:	627b      	str	r3, [r7, #36]	; 0x24

    if(sum > 1.0)       excess = sum - 1.0;
 80228b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80228bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80228c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80228c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80228c8:	dd08      	ble.n	80228dc <_ZN5Motor5DriveEff+0x8c>
 80228ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80228ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80228d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80228d6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 80228da:	e010      	b.n	80228fe <_ZN5Motor5DriveEff+0xae>
    else if(sum < -1.0) excess = sum + 1.0;
 80228dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80228e0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80228e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80228e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80228ec:	d507      	bpl.n	80228fe <_ZN5Motor5DriveEff+0xae>
 80228ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80228f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80228f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80228fa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    translation_ratio -= excess;
 80228fe:	ed97 7a02 	vldr	s14, [r7, #8]
 8022902:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8022906:	ee77 7a67 	vsub.f32	s15, s14, s15
 802290a:	edc7 7a02 	vstr	s15, [r7, #8]

#ifdef DEBUG_MODE
    g_sum_raito = sum;
 802290e:	4a62      	ldr	r2, [pc, #392]	; (8022a98 <_ZN5Motor5DriveEff+0x248>)
 8022910:	69bb      	ldr	r3, [r7, #24]
 8022912:	6013      	str	r3, [r2, #0]
    g_excess_ratio = excess;
 8022914:	4a61      	ldr	r2, [pc, #388]	; (8022a9c <_ZN5Motor5DriveEff+0x24c>)
 8022916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022918:	6013      	str	r3, [r2, #0]
    g_reduced_translation = translation_ratio;
 802291a:	4a61      	ldr	r2, [pc, #388]	; (8022aa0 <_ZN5Motor5DriveEff+0x250>)
 802291c:	68bb      	ldr	r3, [r7, #8]
 802291e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    float duty_l = translation_ratio - rotation_ratio;
 8022920:	ed97 7a02 	vldr	s14, [r7, #8]
 8022924:	edd7 7a01 	vldr	s15, [r7, #4]
 8022928:	ee77 7a67 	vsub.f32	s15, s14, s15
 802292c:	edc7 7a08 	vstr	s15, [r7, #32]
    float duty_r = translation_ratio + rotation_ratio;
 8022930:	ed97 7a02 	vldr	s14, [r7, #8]
 8022934:	edd7 7a01 	vldr	s15, [r7, #4]
 8022938:	ee77 7a27 	vadd.f32	s15, s14, s15
 802293c:	edc7 7a07 	vstr	s15, [r7, #28]

    if(duty_l > 1.0)       duty_l =  1.0;
 8022940:	edd7 7a08 	vldr	s15, [r7, #32]
 8022944:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022948:	eef4 7ac7 	vcmpe.f32	s15, s14
 802294c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022950:	dd03      	ble.n	802295a <_ZN5Motor5DriveEff+0x10a>
 8022952:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8022956:	623b      	str	r3, [r7, #32]
 8022958:	e00a      	b.n	8022970 <_ZN5Motor5DriveEff+0x120>
    else if(duty_l < -1.0) duty_l = -1.0;
 802295a:	edd7 7a08 	vldr	s15, [r7, #32]
 802295e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8022962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802296a:	d501      	bpl.n	8022970 <_ZN5Motor5DriveEff+0x120>
 802296c:	4b4d      	ldr	r3, [pc, #308]	; (8022aa4 <_ZN5Motor5DriveEff+0x254>)
 802296e:	623b      	str	r3, [r7, #32]

    if(duty_r > 1.0)       duty_r =  1.0;
 8022970:	edd7 7a07 	vldr	s15, [r7, #28]
 8022974:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022978:	eef4 7ac7 	vcmpe.f32	s15, s14
 802297c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022980:	dd03      	ble.n	802298a <_ZN5Motor5DriveEff+0x13a>
 8022982:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8022986:	61fb      	str	r3, [r7, #28]
 8022988:	e00a      	b.n	80229a0 <_ZN5Motor5DriveEff+0x150>
    else if(duty_r < -1.0) duty_r = -1.0;
 802298a:	edd7 7a07 	vldr	s15, [r7, #28]
 802298e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8022992:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802299a:	d501      	bpl.n	80229a0 <_ZN5Motor5DriveEff+0x150>
 802299c:	4b41      	ldr	r3, [pc, #260]	; (8022aa4 <_ZN5Motor5DriveEff+0x254>)
 802299e:	61fb      	str	r3, [r7, #28]

#ifdef DEBUG_MODE
    g_duty_l = duty_l;
 80229a0:	4a41      	ldr	r2, [pc, #260]	; (8022aa8 <_ZN5Motor5DriveEff+0x258>)
 80229a2:	6a3b      	ldr	r3, [r7, #32]
 80229a4:	6013      	str	r3, [r2, #0]
    g_duty_r = duty_r;
 80229a6:	4a41      	ldr	r2, [pc, #260]	; (8022aac <_ZN5Motor5DriveEff+0x25c>)
 80229a8:	69fb      	ldr	r3, [r7, #28]
 80229aa:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    int16_t count_l = static_cast<int16_t>(COUNTER_PERIOD * duty_l);
 80229ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80229b0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8022ab0 <_ZN5Motor5DriveEff+0x260>
 80229b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80229b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80229bc:	ee17 3a90 	vmov	r3, s15
 80229c0:	b21b      	sxth	r3, r3
 80229c2:	82fb      	strh	r3, [r7, #22]
    int16_t count_r = static_cast<int16_t>(COUNTER_PERIOD * duty_r);
 80229c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80229c8:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8022ab0 <_ZN5Motor5DriveEff+0x260>
 80229cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80229d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80229d4:	ee17 3a90 	vmov	r3, s15
 80229d8:	b21b      	sxth	r3, r3
 80229da:	82bb      	strh	r3, [r7, #20]

    if(count_l < 0) { count_l *= -1; BACKWARD_L; }
 80229dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80229e0:	2b00      	cmp	r3, #0
 80229e2:	da0d      	bge.n	8022a00 <_ZN5Motor5DriveEff+0x1b0>
 80229e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80229e8:	b29b      	uxth	r3, r3
 80229ea:	425b      	negs	r3, r3
 80229ec:	b29b      	uxth	r3, r3
 80229ee:	b21b      	sxth	r3, r3
 80229f0:	82fb      	strh	r3, [r7, #22]
 80229f2:	2200      	movs	r2, #0
 80229f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80229f8:	482e      	ldr	r0, [pc, #184]	; (8022ab4 <_ZN5Motor5DriveEff+0x264>)
 80229fa:	f003 f8b3 	bl	8025b64 <HAL_GPIO_WritePin>
 80229fe:	e009      	b.n	8022a14 <_ZN5Motor5DriveEff+0x1c4>
    else if(count_l >= 0) FORWARD_L;
 8022a00:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8022a04:	2b00      	cmp	r3, #0
 8022a06:	db05      	blt.n	8022a14 <_ZN5Motor5DriveEff+0x1c4>
 8022a08:	2201      	movs	r2, #1
 8022a0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8022a0e:	4829      	ldr	r0, [pc, #164]	; (8022ab4 <_ZN5Motor5DriveEff+0x264>)
 8022a10:	f003 f8a8 	bl	8025b64 <HAL_GPIO_WritePin>

    if(count_r < 0) { count_r *= -1; BACKWARD_R; }
 8022a14:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8022a18:	2b00      	cmp	r3, #0
 8022a1a:	da0d      	bge.n	8022a38 <_ZN5Motor5DriveEff+0x1e8>
 8022a1c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8022a20:	b29b      	uxth	r3, r3
 8022a22:	425b      	negs	r3, r3
 8022a24:	b29b      	uxth	r3, r3
 8022a26:	b21b      	sxth	r3, r3
 8022a28:	82bb      	strh	r3, [r7, #20]
 8022a2a:	2201      	movs	r2, #1
 8022a2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022a30:	4820      	ldr	r0, [pc, #128]	; (8022ab4 <_ZN5Motor5DriveEff+0x264>)
 8022a32:	f003 f897 	bl	8025b64 <HAL_GPIO_WritePin>
 8022a36:	e009      	b.n	8022a4c <_ZN5Motor5DriveEff+0x1fc>
    else if(count_r >= 0) FORWARD_R;
 8022a38:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8022a3c:	2b00      	cmp	r3, #0
 8022a3e:	db05      	blt.n	8022a4c <_ZN5Motor5DriveEff+0x1fc>
 8022a40:	2200      	movs	r2, #0
 8022a42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022a46:	481b      	ldr	r0, [pc, #108]	; (8022ab4 <_ZN5Motor5DriveEff+0x264>)
 8022a48:	f003 f88c 	bl	8025b64 <HAL_GPIO_WritePin>

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, count_l);
 8022a4c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022a50:	4b19      	ldr	r3, [pc, #100]	; (8022ab8 <_ZN5Motor5DriveEff+0x268>)
 8022a52:	681b      	ldr	r3, [r3, #0]
 8022a54:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, count_r);
 8022a56:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8022a5a:	4b17      	ldr	r3, [pc, #92]	; (8022ab8 <_ZN5Motor5DriveEff+0x268>)
 8022a5c:	681b      	ldr	r3, [r3, #0]
 8022a5e:	641a      	str	r2, [r3, #64]	; 0x40

#ifdef DEBUG_MODE
    g_motor_compare_l = count_l;
 8022a60:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022a64:	4b15      	ldr	r3, [pc, #84]	; (8022abc <_ZN5Motor5DriveEff+0x26c>)
 8022a66:	801a      	strh	r2, [r3, #0]
    g_motor_compare_r = count_r;
 8022a68:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8022a6c:	4b14      	ldr	r3, [pc, #80]	; (8022ac0 <_ZN5Motor5DriveEff+0x270>)
 8022a6e:	801a      	strh	r2, [r3, #0]
#endif // DEBUG_MODE
 8022a70:	bf00      	nop
 8022a72:	3728      	adds	r7, #40	; 0x28
 8022a74:	46bd      	mov	sp, r7
 8022a76:	bd80      	pop	{r7, pc}
 8022a78:	cccccccd 	.word	0xcccccccd
 8022a7c:	3feccccc 	.word	0x3feccccc
 8022a80:	cccccccd 	.word	0xcccccccd
 8022a84:	bfeccccc 	.word	0xbfeccccc
 8022a88:	2000068c 	.word	0x2000068c
 8022a8c:	20000690 	.word	0x20000690
 8022a90:	3f666666 	.word	0x3f666666
 8022a94:	bf666666 	.word	0xbf666666
 8022a98:	20000694 	.word	0x20000694
 8022a9c:	20000698 	.word	0x20000698
 8022aa0:	2000069c 	.word	0x2000069c
 8022aa4:	bf800000 	.word	0xbf800000
 8022aa8:	200006a0 	.word	0x200006a0
 8022aac:	200006a4 	.word	0x200006a4
 8022ab0:	44832000 	.word	0x44832000
 8022ab4:	40020000 	.word	0x40020000
 8022ab8:	2001176c 	.word	0x2001176c
 8022abc:	200006a8 	.word	0x200006a8
 8022ac0:	200006aa 	.word	0x200006aa

08022ac4 <_ZN5PrintC1EP5Flash>:
#include <stdio.h>
#include <string.h>

extern float g_swo_test;

Print::Print(Flash *flash)
 8022ac4:	b480      	push	{r7}
 8022ac6:	b083      	sub	sp, #12
 8022ac8:	af00      	add	r7, sp, #0
 8022aca:	6078      	str	r0, [r7, #4]
 8022acc:	6039      	str	r1, [r7, #0]
{
    flash_ = flash;
 8022ace:	687b      	ldr	r3, [r7, #4]
 8022ad0:	f503 3385 	add.w	r3, r3, #68096	; 0x10a00
 8022ad4:	3368      	adds	r3, #104	; 0x68
 8022ad6:	683a      	ldr	r2, [r7, #0]
 8022ad8:	601a      	str	r2, [r3, #0]
}
 8022ada:	687b      	ldr	r3, [r7, #4]
 8022adc:	4618      	mov	r0, r3
 8022ade:	370c      	adds	r7, #12
 8022ae0:	46bd      	mov	sp, r7
 8022ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ae6:	4770      	bx	lr

08022ae8 <_ZN12RotarySwitch5StateEv>:
#include "rotary_switch.hpp"

uint8_t RotarySwitch::State()
{
 8022ae8:	b580      	push	{r7, lr}
 8022aea:	b084      	sub	sp, #16
 8022aec:	af00      	add	r7, sp, #0
 8022aee:	6078      	str	r0, [r7, #4]
    uint8_t switch_state = 0x00;
 8022af0:	2300      	movs	r3, #0
 8022af2:	73fb      	strb	r3, [r7, #15]

    if(PIN_1 == 0) switch_state |= 0x01;
 8022af4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8022af8:	4821      	ldr	r0, [pc, #132]	; (8022b80 <_ZN12RotarySwitch5StateEv+0x98>)
 8022afa:	f003 f81b 	bl	8025b34 <HAL_GPIO_ReadPin>
 8022afe:	4603      	mov	r3, r0
 8022b00:	2b00      	cmp	r3, #0
 8022b02:	bf0c      	ite	eq
 8022b04:	2301      	moveq	r3, #1
 8022b06:	2300      	movne	r3, #0
 8022b08:	b2db      	uxtb	r3, r3
 8022b0a:	2b00      	cmp	r3, #0
 8022b0c:	d003      	beq.n	8022b16 <_ZN12RotarySwitch5StateEv+0x2e>
 8022b0e:	7bfb      	ldrb	r3, [r7, #15]
 8022b10:	f043 0301 	orr.w	r3, r3, #1
 8022b14:	73fb      	strb	r3, [r7, #15]
    if(PIN_2 == 0) switch_state |= 0x02;
 8022b16:	2104      	movs	r1, #4
 8022b18:	481a      	ldr	r0, [pc, #104]	; (8022b84 <_ZN12RotarySwitch5StateEv+0x9c>)
 8022b1a:	f003 f80b 	bl	8025b34 <HAL_GPIO_ReadPin>
 8022b1e:	4603      	mov	r3, r0
 8022b20:	2b00      	cmp	r3, #0
 8022b22:	bf0c      	ite	eq
 8022b24:	2301      	moveq	r3, #1
 8022b26:	2300      	movne	r3, #0
 8022b28:	b2db      	uxtb	r3, r3
 8022b2a:	2b00      	cmp	r3, #0
 8022b2c:	d003      	beq.n	8022b36 <_ZN12RotarySwitch5StateEv+0x4e>
 8022b2e:	7bfb      	ldrb	r3, [r7, #15]
 8022b30:	f043 0302 	orr.w	r3, r3, #2
 8022b34:	73fb      	strb	r3, [r7, #15]
    if(PIN_4 == 0) switch_state |= 0x04;
 8022b36:	2102      	movs	r1, #2
 8022b38:	4812      	ldr	r0, [pc, #72]	; (8022b84 <_ZN12RotarySwitch5StateEv+0x9c>)
 8022b3a:	f002 fffb 	bl	8025b34 <HAL_GPIO_ReadPin>
 8022b3e:	4603      	mov	r3, r0
 8022b40:	2b00      	cmp	r3, #0
 8022b42:	bf0c      	ite	eq
 8022b44:	2301      	moveq	r3, #1
 8022b46:	2300      	movne	r3, #0
 8022b48:	b2db      	uxtb	r3, r3
 8022b4a:	2b00      	cmp	r3, #0
 8022b4c:	d003      	beq.n	8022b56 <_ZN12RotarySwitch5StateEv+0x6e>
 8022b4e:	7bfb      	ldrb	r3, [r7, #15]
 8022b50:	f043 0304 	orr.w	r3, r3, #4
 8022b54:	73fb      	strb	r3, [r7, #15]
    if(PIN_8 == 0) switch_state |= 0x08;
 8022b56:	2101      	movs	r1, #1
 8022b58:	480a      	ldr	r0, [pc, #40]	; (8022b84 <_ZN12RotarySwitch5StateEv+0x9c>)
 8022b5a:	f002 ffeb 	bl	8025b34 <HAL_GPIO_ReadPin>
 8022b5e:	4603      	mov	r3, r0
 8022b60:	2b00      	cmp	r3, #0
 8022b62:	bf0c      	ite	eq
 8022b64:	2301      	moveq	r3, #1
 8022b66:	2300      	movne	r3, #0
 8022b68:	b2db      	uxtb	r3, r3
 8022b6a:	2b00      	cmp	r3, #0
 8022b6c:	d003      	beq.n	8022b76 <_ZN12RotarySwitch5StateEv+0x8e>
 8022b6e:	7bfb      	ldrb	r3, [r7, #15]
 8022b70:	f043 0308 	orr.w	r3, r3, #8
 8022b74:	73fb      	strb	r3, [r7, #15]

    return switch_state;
 8022b76:	7bfb      	ldrb	r3, [r7, #15]
 8022b78:	4618      	mov	r0, r3
 8022b7a:	3710      	adds	r7, #16
 8022b7c:	46bd      	mov	sp, r7
 8022b7e:	bd80      	pop	{r7, pc}
 8022b80:	40020000 	.word	0x40020000
 8022b84:	40020400 	.word	0x40020400

08022b88 <_ZN10SideSensorC1Ev>:
#include "side_sensor.hpp"

SideSensor::SideSensor() : read_state_flags_(0)
 8022b88:	b480      	push	{r7}
 8022b8a:	b083      	sub	sp, #12
 8022b8c:	af00      	add	r7, sp, #0
 8022b8e:	6078      	str	r0, [r7, #4]
                         , write_state_flags_(0)
                         , exception_flags_(0)
                         , master_count_(0)
                         , goal_marker_count_(0)
                         , corner_marker_count_(0)
                         , cross_line_count_(0) {}
 8022b90:	687b      	ldr	r3, [r7, #4]
 8022b92:	2200      	movs	r2, #0
 8022b94:	701a      	strb	r2, [r3, #0]
 8022b96:	687b      	ldr	r3, [r7, #4]
 8022b98:	2200      	movs	r2, #0
 8022b9a:	705a      	strb	r2, [r3, #1]
 8022b9c:	687b      	ldr	r3, [r7, #4]
 8022b9e:	2200      	movs	r2, #0
 8022ba0:	709a      	strb	r2, [r3, #2]
 8022ba2:	687b      	ldr	r3, [r7, #4]
 8022ba4:	2200      	movs	r2, #0
 8022ba6:	70da      	strb	r2, [r3, #3]
 8022ba8:	687b      	ldr	r3, [r7, #4]
 8022baa:	2200      	movs	r2, #0
 8022bac:	711a      	strb	r2, [r3, #4]
 8022bae:	687b      	ldr	r3, [r7, #4]
 8022bb0:	2200      	movs	r2, #0
 8022bb2:	715a      	strb	r2, [r3, #5]
 8022bb4:	687b      	ldr	r3, [r7, #4]
 8022bb6:	2200      	movs	r2, #0
 8022bb8:	719a      	strb	r2, [r3, #6]
 8022bba:	687b      	ldr	r3, [r7, #4]
 8022bbc:	4618      	mov	r0, r3
 8022bbe:	370c      	adds	r7, #12
 8022bc0:	46bd      	mov	sp, r7
 8022bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bc6:	4770      	bx	lr

08022bc8 <_ZN10SideSensor11UpdateStateEv>:

void SideSensor::UpdateState()
{
 8022bc8:	b580      	push	{r7, lr}
 8022bca:	b084      	sub	sp, #16
 8022bcc:	af00      	add	r7, sp, #0
 8022bce:	6078      	str	r0, [r7, #4]
    uint8_t io_state = 0xFF; // Lower bits represent the positions of sensors.
 8022bd0:	23ff      	movs	r3, #255	; 0xff
 8022bd2:	73fb      	strb	r3, [r7, #15]

    if(IO_OUTSIDE_L == 0) io_state &= 0xF7; // 0111
 8022bd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8022bd8:	4849      	ldr	r0, [pc, #292]	; (8022d00 <_ZN10SideSensor11UpdateStateEv+0x138>)
 8022bda:	f002 ffab 	bl	8025b34 <HAL_GPIO_ReadPin>
 8022bde:	4603      	mov	r3, r0
 8022be0:	2b00      	cmp	r3, #0
 8022be2:	bf0c      	ite	eq
 8022be4:	2301      	moveq	r3, #1
 8022be6:	2300      	movne	r3, #0
 8022be8:	b2db      	uxtb	r3, r3
 8022bea:	2b00      	cmp	r3, #0
 8022bec:	d003      	beq.n	8022bf6 <_ZN10SideSensor11UpdateStateEv+0x2e>
 8022bee:	7bfb      	ldrb	r3, [r7, #15]
 8022bf0:	f023 0308 	bic.w	r3, r3, #8
 8022bf4:	73fb      	strb	r3, [r7, #15]
    if(IO_INSIDE_L == 0)  io_state &= 0xFB; // 1011
 8022bf6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8022bfa:	4841      	ldr	r0, [pc, #260]	; (8022d00 <_ZN10SideSensor11UpdateStateEv+0x138>)
 8022bfc:	f002 ff9a 	bl	8025b34 <HAL_GPIO_ReadPin>
 8022c00:	4603      	mov	r3, r0
 8022c02:	2b00      	cmp	r3, #0
 8022c04:	bf0c      	ite	eq
 8022c06:	2301      	moveq	r3, #1
 8022c08:	2300      	movne	r3, #0
 8022c0a:	b2db      	uxtb	r3, r3
 8022c0c:	2b00      	cmp	r3, #0
 8022c0e:	d003      	beq.n	8022c18 <_ZN10SideSensor11UpdateStateEv+0x50>
 8022c10:	7bfb      	ldrb	r3, [r7, #15]
 8022c12:	f023 0304 	bic.w	r3, r3, #4
 8022c16:	73fb      	strb	r3, [r7, #15]
    if(IO_INSIDE_R == 0)  io_state &= 0xFD; // 1101
 8022c18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8022c1c:	4838      	ldr	r0, [pc, #224]	; (8022d00 <_ZN10SideSensor11UpdateStateEv+0x138>)
 8022c1e:	f002 ff89 	bl	8025b34 <HAL_GPIO_ReadPin>
 8022c22:	4603      	mov	r3, r0
 8022c24:	2b00      	cmp	r3, #0
 8022c26:	bf0c      	ite	eq
 8022c28:	2301      	moveq	r3, #1
 8022c2a:	2300      	movne	r3, #0
 8022c2c:	b2db      	uxtb	r3, r3
 8022c2e:	2b00      	cmp	r3, #0
 8022c30:	d003      	beq.n	8022c3a <_ZN10SideSensor11UpdateStateEv+0x72>
 8022c32:	7bfb      	ldrb	r3, [r7, #15]
 8022c34:	f023 0302 	bic.w	r3, r3, #2
 8022c38:	73fb      	strb	r3, [r7, #15]
    if(IO_OUTSIDE_R == 0) io_state &= 0xFE; // 1110
 8022c3a:	2104      	movs	r1, #4
 8022c3c:	4831      	ldr	r0, [pc, #196]	; (8022d04 <_ZN10SideSensor11UpdateStateEv+0x13c>)
 8022c3e:	f002 ff79 	bl	8025b34 <HAL_GPIO_ReadPin>
 8022c42:	4603      	mov	r3, r0
 8022c44:	2b00      	cmp	r3, #0
 8022c46:	bf0c      	ite	eq
 8022c48:	2301      	moveq	r3, #1
 8022c4a:	2300      	movne	r3, #0
 8022c4c:	b2db      	uxtb	r3, r3
 8022c4e:	2b00      	cmp	r3, #0
 8022c50:	d003      	beq.n	8022c5a <_ZN10SideSensor11UpdateStateEv+0x92>
 8022c52:	7bfb      	ldrb	r3, [r7, #15]
 8022c54:	f023 0301 	bic.w	r3, r3, #1
 8022c58:	73fb      	strb	r3, [r7, #15]

    read_state_flags_ <<= 4;
 8022c5a:	687b      	ldr	r3, [r7, #4]
 8022c5c:	781b      	ldrb	r3, [r3, #0]
 8022c5e:	011b      	lsls	r3, r3, #4
 8022c60:	b2da      	uxtb	r2, r3
 8022c62:	687b      	ldr	r3, [r7, #4]
 8022c64:	701a      	strb	r2, [r3, #0]

    switch(io_state)
 8022c66:	7bfb      	ldrb	r3, [r7, #15]
 8022c68:	3bf0      	subs	r3, #240	; 0xf0
 8022c6a:	2b0f      	cmp	r3, #15
 8022c6c:	d842      	bhi.n	8022cf4 <_ZN10SideSensor11UpdateStateEv+0x12c>
 8022c6e:	a201      	add	r2, pc, #4	; (adr r2, 8022c74 <_ZN10SideSensor11UpdateStateEv+0xac>)
 8022c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022c74:	08022ce5 	.word	0x08022ce5
 8022c78:	08022ce5 	.word	0x08022ce5
 8022c7c:	08022ce5 	.word	0x08022ce5
 8022c80:	08022cd5 	.word	0x08022cd5
 8022c84:	08022ce5 	.word	0x08022ce5
 8022c88:	08022cf5 	.word	0x08022cf5
 8022c8c:	08022ce5 	.word	0x08022ce5
 8022c90:	08022cd5 	.word	0x08022cd5
 8022c94:	08022ce5 	.word	0x08022ce5
 8022c98:	08022ce5 	.word	0x08022ce5
 8022c9c:	08022cf5 	.word	0x08022cf5
 8022ca0:	08022cd5 	.word	0x08022cd5
 8022ca4:	08022cc5 	.word	0x08022cc5
 8022ca8:	08022cf5 	.word	0x08022cf5
 8022cac:	08022cf5 	.word	0x08022cf5
 8022cb0:	08022cb5 	.word	0x08022cb5
    {
        case 0xFF: // 1111
            read_state_flags_ |= 0x08; break;
 8022cb4:	687b      	ldr	r3, [r7, #4]
 8022cb6:	781b      	ldrb	r3, [r3, #0]
 8022cb8:	f043 0308 	orr.w	r3, r3, #8
 8022cbc:	b2da      	uxtb	r2, r3
 8022cbe:	687b      	ldr	r3, [r7, #4]
 8022cc0:	701a      	strb	r2, [r3, #0]
 8022cc2:	e018      	b.n	8022cf6 <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xFC: // 1100  If through goal, increase pattern.
            read_state_flags_ |= 0x04; break;
 8022cc4:	687b      	ldr	r3, [r7, #4]
 8022cc6:	781b      	ldrb	r3, [r3, #0]
 8022cc8:	f043 0304 	orr.w	r3, r3, #4
 8022ccc:	b2da      	uxtb	r2, r3
 8022cce:	687b      	ldr	r3, [r7, #4]
 8022cd0:	701a      	strb	r2, [r3, #0]
 8022cd2:	e010      	b.n	8022cf6 <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xFB: // 1011
        case 0xF7: // 0111
        case 0xF3: // 0011
            read_state_flags_ |= 0x02; break;
 8022cd4:	687b      	ldr	r3, [r7, #4]
 8022cd6:	781b      	ldrb	r3, [r3, #0]
 8022cd8:	f043 0302 	orr.w	r3, r3, #2
 8022cdc:	b2da      	uxtb	r2, r3
 8022cde:	687b      	ldr	r3, [r7, #4]
 8022ce0:	701a      	strb	r2, [r3, #0]
 8022ce2:	e008      	b.n	8022cf6 <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xF4: // 0100
        case 0xF0: // 0000
        case 0xF1: // 0001
        case 0xF8: // 1000
        case 0xF9: // 1001
            read_state_flags_ |= 0x01; break;
 8022ce4:	687b      	ldr	r3, [r7, #4]
 8022ce6:	781b      	ldrb	r3, [r3, #0]
 8022ce8:	f043 0301 	orr.w	r3, r3, #1
 8022cec:	b2da      	uxtb	r2, r3
 8022cee:	687b      	ldr	r3, [r7, #4]
 8022cf0:	701a      	strb	r2, [r3, #0]
 8022cf2:	e000      	b.n	8022cf6 <_ZN10SideSensor11UpdateStateEv+0x12e>
        default: break;
 8022cf4:	bf00      	nop
    }
}
 8022cf6:	bf00      	nop
 8022cf8:	3710      	adds	r7, #16
 8022cfa:	46bd      	mov	sp, r7
 8022cfc:	bd80      	pop	{r7, pc}
 8022cfe:	bf00      	nop
 8022d00:	40020400 	.word	0x40020400
 8022d04:	40020c00 	.word	0x40020c00

08022d08 <_ZN10SideSensor6UpdateEv>:

void SideSensor::Update()
{
 8022d08:	b580      	push	{r7, lr}
 8022d0a:	b084      	sub	sp, #16
 8022d0c:	af00      	add	r7, sp, #0
 8022d0e:	6078      	str	r0, [r7, #4]
    uint8_t ignore_flag = exception_flags_ & 0x01;
 8022d10:	687b      	ldr	r3, [r7, #4]
 8022d12:	789b      	ldrb	r3, [r3, #2]
 8022d14:	f003 0301 	and.w	r3, r3, #1
 8022d18:	73fb      	strb	r3, [r7, #15]

    /* Ignore judgment */
    if(ignore_flag == 0x01)
 8022d1a:	7bfb      	ldrb	r3, [r7, #15]
 8022d1c:	2b01      	cmp	r3, #1
 8022d1e:	d111      	bne.n	8022d44 <_ZN10SideSensor6UpdateEv+0x3c>
    {
        if(master_count_ < IGNORE_COUNT) master_count_++;
 8022d20:	687b      	ldr	r3, [r7, #4]
 8022d22:	78db      	ldrb	r3, [r3, #3]
 8022d24:	2b04      	cmp	r3, #4
 8022d26:	d806      	bhi.n	8022d36 <_ZN10SideSensor6UpdateEv+0x2e>
 8022d28:	687b      	ldr	r3, [r7, #4]
 8022d2a:	78db      	ldrb	r3, [r3, #3]
 8022d2c:	3301      	adds	r3, #1
 8022d2e:	b2da      	uxtb	r2, r3
 8022d30:	687b      	ldr	r3, [r7, #4]
 8022d32:	70da      	strb	r2, [r3, #3]
 8022d34:	e031      	b.n	8022d9a <_ZN10SideSensor6UpdateEv+0x92>
        else exception_flags_ >>= 1; 
 8022d36:	687b      	ldr	r3, [r7, #4]
 8022d38:	789b      	ldrb	r3, [r3, #2]
 8022d3a:	105b      	asrs	r3, r3, #1
 8022d3c:	b2da      	uxtb	r2, r3
 8022d3e:	687b      	ldr	r3, [r7, #4]
 8022d40:	709a      	strb	r2, [r3, #2]
 8022d42:	e02a      	b.n	8022d9a <_ZN10SideSensor6UpdateEv+0x92>
    }
    else if(ignore_flag == 0x00)
 8022d44:	7bfb      	ldrb	r3, [r7, #15]
 8022d46:	2b00      	cmp	r3, #0
 8022d48:	d127      	bne.n	8022d9a <_ZN10SideSensor6UpdateEv+0x92>
    {
        UpdateState();
 8022d4a:	6878      	ldr	r0, [r7, #4]
 8022d4c:	f7ff ff3c 	bl	8022bc8 <_ZN10SideSensor11UpdateStateEv>

        uint8_t now_state = read_state_flags_;
 8022d50:	687b      	ldr	r3, [r7, #4]
 8022d52:	781b      	ldrb	r3, [r3, #0]
 8022d54:	73bb      	strb	r3, [r7, #14]
        uint8_t pre_state = (now_state << 4) | (now_state >> 4);
 8022d56:	7bbb      	ldrb	r3, [r7, #14]
 8022d58:	011b      	lsls	r3, r3, #4
 8022d5a:	b25a      	sxtb	r2, r3
 8022d5c:	7bbb      	ldrb	r3, [r7, #14]
 8022d5e:	111b      	asrs	r3, r3, #4
 8022d60:	b25b      	sxtb	r3, r3
 8022d62:	4313      	orrs	r3, r2
 8022d64:	b25b      	sxtb	r3, r3
 8022d66:	737b      	strb	r3, [r7, #13]

        if(pre_state != now_state)
 8022d68:	7b7a      	ldrb	r2, [r7, #13]
 8022d6a:	7bbb      	ldrb	r3, [r7, #14]
 8022d6c:	429a      	cmp	r2, r3
 8022d6e:	d003      	beq.n	8022d78 <_ZN10SideSensor6UpdateEv+0x70>
        {
            NoiseTolerance();
 8022d70:	6878      	ldr	r0, [r7, #4]
 8022d72:	f000 f819 	bl	8022da8 <_ZN10SideSensor14NoiseToleranceEv>
 8022d76:	e010      	b.n	8022d9a <_ZN10SideSensor6UpdateEv+0x92>
        }
        else if(pre_state == now_state)
 8022d78:	7b7a      	ldrb	r2, [r7, #13]
 8022d7a:	7bbb      	ldrb	r3, [r7, #14]
 8022d7c:	429a      	cmp	r2, r3
 8022d7e:	d10c      	bne.n	8022d9a <_ZN10SideSensor6UpdateEv+0x92>
        {
            exception_flags_ &= 0xF3; // noise_count = 0
 8022d80:	687b      	ldr	r3, [r7, #4]
 8022d82:	789b      	ldrb	r3, [r3, #2]
 8022d84:	f023 030c 	bic.w	r3, r3, #12
 8022d88:	b2da      	uxtb	r2, r3
 8022d8a:	687b      	ldr	r3, [r7, #4]
 8022d8c:	709a      	strb	r2, [r3, #2]
            ConfirmState();
 8022d8e:	6878      	ldr	r0, [r7, #4]
 8022d90:	f000 f85a 	bl	8022e48 <_ZN10SideSensor12ConfirmStateEv>
            CountUp();
 8022d94:	6878      	ldr	r0, [r7, #4]
 8022d96:	f000 f8c6 	bl	8022f26 <_ZN10SideSensor7CountUpEv>
        }
    }

#ifdef DEBUG_MODE
    Monitor();
 8022d9a:	6878      	ldr	r0, [r7, #4]
 8022d9c:	f000 f984 	bl	80230a8 <_ZN10SideSensor7MonitorEv>
#endif // DEBUG_MODE
}
 8022da0:	bf00      	nop
 8022da2:	3710      	adds	r7, #16
 8022da4:	46bd      	mov	sp, r7
 8022da6:	bd80      	pop	{r7, pc}

08022da8 <_ZN10SideSensor14NoiseToleranceEv>:

void SideSensor::NoiseTolerance()
{
 8022da8:	b580      	push	{r7, lr}
 8022daa:	b084      	sub	sp, #16
 8022dac:	af00      	add	r7, sp, #0
 8022dae:	6078      	str	r0, [r7, #4]
    uint8_t noise_count = (exception_flags_ & 0x0C) >> 2;
 8022db0:	687b      	ldr	r3, [r7, #4]
 8022db2:	789b      	ldrb	r3, [r3, #2]
 8022db4:	109b      	asrs	r3, r3, #2
 8022db6:	b2db      	uxtb	r3, r3
 8022db8:	f003 0303 	and.w	r3, r3, #3
 8022dbc:	73fb      	strb	r3, [r7, #15]

    if(noise_count == 0x00)
 8022dbe:	7bfb      	ldrb	r3, [r7, #15]
 8022dc0:	2b00      	cmp	r3, #0
 8022dc2:	d11f      	bne.n	8022e04 <_ZN10SideSensor14NoiseToleranceEv+0x5c>
    {
        /* Update before_noise_state */
        exception_flags_ = (exception_flags_ & 0x0F) | (read_state_flags_ & 0xF0);
 8022dc4:	687b      	ldr	r3, [r7, #4]
 8022dc6:	789b      	ldrb	r3, [r3, #2]
 8022dc8:	f003 030f 	and.w	r3, r3, #15
 8022dcc:	b2da      	uxtb	r2, r3
 8022dce:	687b      	ldr	r3, [r7, #4]
 8022dd0:	781b      	ldrb	r3, [r3, #0]
 8022dd2:	f023 030f 	bic.w	r3, r3, #15
 8022dd6:	b2db      	uxtb	r3, r3
 8022dd8:	4313      	orrs	r3, r2
 8022dda:	b2da      	uxtb	r2, r3
 8022ddc:	687b      	ldr	r3, [r7, #4]
 8022dde:	709a      	strb	r2, [r3, #2]
        /* Count up noise_count */
        noise_count++;
 8022de0:	7bfb      	ldrb	r3, [r7, #15]
 8022de2:	3301      	adds	r3, #1
 8022de4:	73fb      	strb	r3, [r7, #15]
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
 8022de6:	687b      	ldr	r3, [r7, #4]
 8022de8:	789b      	ldrb	r3, [r3, #2]
 8022dea:	b25b      	sxtb	r3, r3
 8022dec:	f023 030c 	bic.w	r3, r3, #12
 8022df0:	b25a      	sxtb	r2, r3
 8022df2:	7bfb      	ldrb	r3, [r7, #15]
 8022df4:	009b      	lsls	r3, r3, #2
 8022df6:	b25b      	sxtb	r3, r3
 8022df8:	4313      	orrs	r3, r2
 8022dfa:	b25b      	sxtb	r3, r3
 8022dfc:	b2da      	uxtb	r2, r3
 8022dfe:	687b      	ldr	r3, [r7, #4]
 8022e00:	709a      	strb	r2, [r3, #2]

        ConfirmState();
        CountUp();
    }
    else master_count_ = 0;
}
 8022e02:	e01d      	b.n	8022e40 <_ZN10SideSensor14NoiseToleranceEv+0x98>
    else if(noise_count == 0x01)
 8022e04:	7bfb      	ldrb	r3, [r7, #15]
 8022e06:	2b01      	cmp	r3, #1
 8022e08:	d117      	bne.n	8022e3a <_ZN10SideSensor14NoiseToleranceEv+0x92>
        noise_count++;
 8022e0a:	7bfb      	ldrb	r3, [r7, #15]
 8022e0c:	3301      	adds	r3, #1
 8022e0e:	73fb      	strb	r3, [r7, #15]
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
 8022e10:	687b      	ldr	r3, [r7, #4]
 8022e12:	789b      	ldrb	r3, [r3, #2]
 8022e14:	b25b      	sxtb	r3, r3
 8022e16:	f023 030c 	bic.w	r3, r3, #12
 8022e1a:	b25a      	sxtb	r2, r3
 8022e1c:	7bfb      	ldrb	r3, [r7, #15]
 8022e1e:	009b      	lsls	r3, r3, #2
 8022e20:	b25b      	sxtb	r3, r3
 8022e22:	4313      	orrs	r3, r2
 8022e24:	b25b      	sxtb	r3, r3
 8022e26:	b2da      	uxtb	r2, r3
 8022e28:	687b      	ldr	r3, [r7, #4]
 8022e2a:	709a      	strb	r2, [r3, #2]
        ConfirmState();
 8022e2c:	6878      	ldr	r0, [r7, #4]
 8022e2e:	f000 f80b 	bl	8022e48 <_ZN10SideSensor12ConfirmStateEv>
        CountUp();
 8022e32:	6878      	ldr	r0, [r7, #4]
 8022e34:	f000 f877 	bl	8022f26 <_ZN10SideSensor7CountUpEv>
}
 8022e38:	e002      	b.n	8022e40 <_ZN10SideSensor14NoiseToleranceEv+0x98>
    else master_count_ = 0;
 8022e3a:	687b      	ldr	r3, [r7, #4]
 8022e3c:	2200      	movs	r2, #0
 8022e3e:	70da      	strb	r2, [r3, #3]
}
 8022e40:	bf00      	nop
 8022e42:	3710      	adds	r7, #16
 8022e44:	46bd      	mov	sp, r7
 8022e46:	bd80      	pop	{r7, pc}

08022e48 <_ZN10SideSensor12ConfirmStateEv>:

void SideSensor::ConfirmState()
{
 8022e48:	b480      	push	{r7}
 8022e4a:	b085      	sub	sp, #20
 8022e4c:	af00      	add	r7, sp, #0
 8022e4e:	6078      	str	r0, [r7, #4]
    uint8_t before_noise_state = exception_flags_ >> 4;
 8022e50:	687b      	ldr	r3, [r7, #4]
 8022e52:	789b      	ldrb	r3, [r3, #2]
 8022e54:	111b      	asrs	r3, r3, #4
 8022e56:	73bb      	strb	r3, [r7, #14]
    uint8_t now_state = read_state_flags_ & 0x0F;
 8022e58:	687b      	ldr	r3, [r7, #4]
 8022e5a:	781b      	ldrb	r3, [r3, #0]
 8022e5c:	f003 030f 	and.w	r3, r3, #15
 8022e60:	737b      	strb	r3, [r7, #13]
    uint8_t count = master_count_;
 8022e62:	687b      	ldr	r3, [r7, #4]
 8022e64:	78db      	ldrb	r3, [r3, #3]
 8022e66:	73fb      	strb	r3, [r7, #15]

    if(before_noise_state != now_state)
 8022e68:	7bba      	ldrb	r2, [r7, #14]
 8022e6a:	7b7b      	ldrb	r3, [r7, #13]
 8022e6c:	429a      	cmp	r2, r3
 8022e6e:	d010      	beq.n	8022e92 <_ZN10SideSensor12ConfirmStateEv+0x4a>
    {
        /* Update before_noise_state */
        exception_flags_ = (exception_flags_ & 0x0F) | (now_state << 4);
 8022e70:	687b      	ldr	r3, [r7, #4]
 8022e72:	789b      	ldrb	r3, [r3, #2]
 8022e74:	b25b      	sxtb	r3, r3
 8022e76:	f003 030f 	and.w	r3, r3, #15
 8022e7a:	b25a      	sxtb	r2, r3
 8022e7c:	7b7b      	ldrb	r3, [r7, #13]
 8022e7e:	011b      	lsls	r3, r3, #4
 8022e80:	b25b      	sxtb	r3, r3
 8022e82:	4313      	orrs	r3, r2
 8022e84:	b25b      	sxtb	r3, r3
 8022e86:	b2da      	uxtb	r2, r3
 8022e88:	687b      	ldr	r3, [r7, #4]
 8022e8a:	709a      	strb	r2, [r3, #2]
        count = 0;
 8022e8c:	2300      	movs	r3, #0
 8022e8e:	73fb      	strb	r3, [r7, #15]
 8022e90:	e005      	b.n	8022e9e <_ZN10SideSensor12ConfirmStateEv+0x56>
    }
    else if(count < MAX_INTERRUPT_COUNT) count++;
 8022e92:	7bfb      	ldrb	r3, [r7, #15]
 8022e94:	2bf9      	cmp	r3, #249	; 0xf9
 8022e96:	d802      	bhi.n	8022e9e <_ZN10SideSensor12ConfirmStateEv+0x56>
 8022e98:	7bfb      	ldrb	r3, [r7, #15]
 8022e9a:	3301      	adds	r3, #1
 8022e9c:	73fb      	strb	r3, [r7, #15]

    master_count_ = count;
 8022e9e:	687b      	ldr	r3, [r7, #4]
 8022ea0:	7bfa      	ldrb	r2, [r7, #15]
 8022ea2:	70da      	strb	r2, [r3, #3]

    if(now_state == 0x08 && count >= BLACK_BLACK_COUNT)
 8022ea4:	7b7b      	ldrb	r3, [r7, #13]
 8022ea6:	2b08      	cmp	r3, #8
 8022ea8:	d10d      	bne.n	8022ec6 <_ZN10SideSensor12ConfirmStateEv+0x7e>
 8022eaa:	7bfb      	ldrb	r3, [r7, #15]
 8022eac:	2b13      	cmp	r3, #19
 8022eae:	d90a      	bls.n	8022ec6 <_ZN10SideSensor12ConfirmStateEv+0x7e>
    {
        write_state_flags_ = (write_state_flags_ & 0xF0) | 0x08;
 8022eb0:	687b      	ldr	r3, [r7, #4]
 8022eb2:	785b      	ldrb	r3, [r3, #1]
 8022eb4:	f023 030f 	bic.w	r3, r3, #15
 8022eb8:	b2db      	uxtb	r3, r3
 8022eba:	f043 0308 	orr.w	r3, r3, #8
 8022ebe:	b2da      	uxtb	r2, r3
 8022ec0:	687b      	ldr	r3, [r7, #4]
 8022ec2:	705a      	strb	r2, [r3, #1]
 8022ec4:	e029      	b.n	8022f1a <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x04 && count >= BLACK_WHITE_COUNT)
 8022ec6:	7b7b      	ldrb	r3, [r7, #13]
 8022ec8:	2b04      	cmp	r3, #4
 8022eca:	d10a      	bne.n	8022ee2 <_ZN10SideSensor12ConfirmStateEv+0x9a>
 8022ecc:	7bfb      	ldrb	r3, [r7, #15]
 8022ece:	2b00      	cmp	r3, #0
 8022ed0:	d007      	beq.n	8022ee2 <_ZN10SideSensor12ConfirmStateEv+0x9a>
    {
        write_state_flags_ |= 0x04;
 8022ed2:	687b      	ldr	r3, [r7, #4]
 8022ed4:	785b      	ldrb	r3, [r3, #1]
 8022ed6:	f043 0304 	orr.w	r3, r3, #4
 8022eda:	b2da      	uxtb	r2, r3
 8022edc:	687b      	ldr	r3, [r7, #4]
 8022ede:	705a      	strb	r2, [r3, #1]
 8022ee0:	e01b      	b.n	8022f1a <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x02 && count >= WHITE_BLACK_COUNT)
 8022ee2:	7b7b      	ldrb	r3, [r7, #13]
 8022ee4:	2b02      	cmp	r3, #2
 8022ee6:	d10a      	bne.n	8022efe <_ZN10SideSensor12ConfirmStateEv+0xb6>
 8022ee8:	7bfb      	ldrb	r3, [r7, #15]
 8022eea:	2b00      	cmp	r3, #0
 8022eec:	d007      	beq.n	8022efe <_ZN10SideSensor12ConfirmStateEv+0xb6>
    {
        write_state_flags_ |= 0x02;
 8022eee:	687b      	ldr	r3, [r7, #4]
 8022ef0:	785b      	ldrb	r3, [r3, #1]
 8022ef2:	f043 0302 	orr.w	r3, r3, #2
 8022ef6:	b2da      	uxtb	r2, r3
 8022ef8:	687b      	ldr	r3, [r7, #4]
 8022efa:	705a      	strb	r2, [r3, #1]
 8022efc:	e00d      	b.n	8022f1a <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x01 && count >= WHITE_WHITE_COUNT)
 8022efe:	7b7b      	ldrb	r3, [r7, #13]
 8022f00:	2b01      	cmp	r3, #1
 8022f02:	d10a      	bne.n	8022f1a <_ZN10SideSensor12ConfirmStateEv+0xd2>
    {
        write_state_flags_ = (write_state_flags_ & 0xF8) | 0x01;
 8022f04:	687b      	ldr	r3, [r7, #4]
 8022f06:	785b      	ldrb	r3, [r3, #1]
 8022f08:	f023 0307 	bic.w	r3, r3, #7
 8022f0c:	b2db      	uxtb	r3, r3
 8022f0e:	f043 0301 	orr.w	r3, r3, #1
 8022f12:	b2da      	uxtb	r2, r3
 8022f14:	687b      	ldr	r3, [r7, #4]
 8022f16:	705a      	strb	r2, [r3, #1]
    }
}
 8022f18:	e7ff      	b.n	8022f1a <_ZN10SideSensor12ConfirmStateEv+0xd2>
 8022f1a:	bf00      	nop
 8022f1c:	3714      	adds	r7, #20
 8022f1e:	46bd      	mov	sp, r7
 8022f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f24:	4770      	bx	lr

08022f26 <_ZN10SideSensor7CountUpEv>:

void SideSensor::CountUp()
{
 8022f26:	b480      	push	{r7}
 8022f28:	b085      	sub	sp, #20
 8022f2a:	af00      	add	r7, sp, #0
 8022f2c:	6078      	str	r0, [r7, #4]
    uint8_t state = write_state_flags_;
 8022f2e:	687b      	ldr	r3, [r7, #4]
 8022f30:	785b      	ldrb	r3, [r3, #1]
 8022f32:	73fb      	strb	r3, [r7, #15]
    uint8_t black_flag   = (state & 0x08) >> 3;
 8022f34:	7bfb      	ldrb	r3, [r7, #15]
 8022f36:	10db      	asrs	r3, r3, #3
 8022f38:	b2db      	uxtb	r3, r3
 8022f3a:	f003 0301 	and.w	r3, r3, #1
 8022f3e:	73bb      	strb	r3, [r7, #14]
    uint8_t goal_flag    = (state & 0x04) >> 2;
 8022f40:	7bfb      	ldrb	r3, [r7, #15]
 8022f42:	109b      	asrs	r3, r3, #2
 8022f44:	b2db      	uxtb	r3, r3
 8022f46:	f003 0301 	and.w	r3, r3, #1
 8022f4a:	737b      	strb	r3, [r7, #13]
    uint8_t corner_flag  = (state & 0x02) >> 1;
 8022f4c:	7bfb      	ldrb	r3, [r7, #15]
 8022f4e:	105b      	asrs	r3, r3, #1
 8022f50:	b2db      	uxtb	r3, r3
 8022f52:	f003 0301 	and.w	r3, r3, #1
 8022f56:	733b      	strb	r3, [r7, #12]
    uint8_t cross_flag   =  state & 0x01;
 8022f58:	7bfb      	ldrb	r3, [r7, #15]
 8022f5a:	f003 0301 	and.w	r3, r3, #1
 8022f5e:	72fb      	strb	r3, [r7, #11]
    uint8_t goal_reach   = (state & 0x80) >> 7;
 8022f60:	7bfb      	ldrb	r3, [r7, #15]
 8022f62:	09db      	lsrs	r3, r3, #7
 8022f64:	72bb      	strb	r3, [r7, #10]
    uint8_t corner_reach = (state & 0x40) >> 6;
 8022f66:	7bfb      	ldrb	r3, [r7, #15]
 8022f68:	119b      	asrs	r3, r3, #6
 8022f6a:	b2db      	uxtb	r3, r3
 8022f6c:	f003 0301 	and.w	r3, r3, #1
 8022f70:	727b      	strb	r3, [r7, #9]
    uint8_t cross_reach  = (state & 0x20) >> 5;
 8022f72:	7bfb      	ldrb	r3, [r7, #15]
 8022f74:	115b      	asrs	r3, r3, #5
 8022f76:	b2db      	uxtb	r3, r3
 8022f78:	f003 0301 	and.w	r3, r3, #1
 8022f7c:	723b      	strb	r3, [r7, #8]

    if(cross_flag == 0x01 && black_flag == 0x01)
 8022f7e:	7afb      	ldrb	r3, [r7, #11]
 8022f80:	2b01      	cmp	r3, #1
 8022f82:	d10b      	bne.n	8022f9c <_ZN10SideSensor7CountUpEv+0x76>
 8022f84:	7bbb      	ldrb	r3, [r7, #14]
 8022f86:	2b01      	cmp	r3, #1
 8022f88:	d108      	bne.n	8022f9c <_ZN10SideSensor7CountUpEv+0x76>
    {
        state &= 0xF7; // black_flag = false
 8022f8a:	7bfb      	ldrb	r3, [r7, #15]
 8022f8c:	f023 0308 	bic.w	r3, r3, #8
 8022f90:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 8022f92:	7bfb      	ldrb	r3, [r7, #15]
 8022f94:	f043 0320 	orr.w	r3, r3, #32
 8022f98:	73fb      	strb	r3, [r7, #15]
 8022f9a:	e02d      	b.n	8022ff8 <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_flag == 0x01 && goal_reach == 0x01)
 8022f9c:	7afb      	ldrb	r3, [r7, #11]
 8022f9e:	2b01      	cmp	r3, #1
 8022fa0:	d10b      	bne.n	8022fba <_ZN10SideSensor7CountUpEv+0x94>
 8022fa2:	7abb      	ldrb	r3, [r7, #10]
 8022fa4:	2b01      	cmp	r3, #1
 8022fa6:	d108      	bne.n	8022fba <_ZN10SideSensor7CountUpEv+0x94>
    {
        state &= 0x7F; // goal_reach = false
 8022fa8:	7bfb      	ldrb	r3, [r7, #15]
 8022faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8022fae:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 8022fb0:	7bfb      	ldrb	r3, [r7, #15]
 8022fb2:	f043 0320 	orr.w	r3, r3, #32
 8022fb6:	73fb      	strb	r3, [r7, #15]
 8022fb8:	e01e      	b.n	8022ff8 <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_flag == 0x01 && corner_reach == 0x01)
 8022fba:	7afb      	ldrb	r3, [r7, #11]
 8022fbc:	2b01      	cmp	r3, #1
 8022fbe:	d10b      	bne.n	8022fd8 <_ZN10SideSensor7CountUpEv+0xb2>
 8022fc0:	7a7b      	ldrb	r3, [r7, #9]
 8022fc2:	2b01      	cmp	r3, #1
 8022fc4:	d108      	bne.n	8022fd8 <_ZN10SideSensor7CountUpEv+0xb2>
    {
        state &= 0xBF; // corner_reach = false
 8022fc6:	7bfb      	ldrb	r3, [r7, #15]
 8022fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8022fcc:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 8022fce:	7bfb      	ldrb	r3, [r7, #15]
 8022fd0:	f043 0320 	orr.w	r3, r3, #32
 8022fd4:	73fb      	strb	r3, [r7, #15]
 8022fd6:	e00f      	b.n	8022ff8 <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_reach == 0x01 && black_flag == 0x01)
 8022fd8:	7a3b      	ldrb	r3, [r7, #8]
 8022fda:	2b01      	cmp	r3, #1
 8022fdc:	d10c      	bne.n	8022ff8 <_ZN10SideSensor7CountUpEv+0xd2>
 8022fde:	7bbb      	ldrb	r3, [r7, #14]
 8022fe0:	2b01      	cmp	r3, #1
 8022fe2:	d109      	bne.n	8022ff8 <_ZN10SideSensor7CountUpEv+0xd2>
    {
        state &= 0xDF; // cross_reach = false
 8022fe4:	7bfb      	ldrb	r3, [r7, #15]
 8022fe6:	f023 0320 	bic.w	r3, r3, #32
 8022fea:	73fb      	strb	r3, [r7, #15]
        cross_line_count_++;
 8022fec:	687b      	ldr	r3, [r7, #4]
 8022fee:	799b      	ldrb	r3, [r3, #6]
 8022ff0:	3301      	adds	r3, #1
 8022ff2:	b2da      	uxtb	r2, r3
 8022ff4:	687b      	ldr	r3, [r7, #4]
 8022ff6:	719a      	strb	r2, [r3, #6]
    }

    black_flag   = (state & 0x08) >> 3;
 8022ff8:	7bfb      	ldrb	r3, [r7, #15]
 8022ffa:	10db      	asrs	r3, r3, #3
 8022ffc:	b2db      	uxtb	r3, r3
 8022ffe:	f003 0301 	and.w	r3, r3, #1
 8023002:	73bb      	strb	r3, [r7, #14]
    goal_reach   = (state & 0x80) >> 7;
 8023004:	7bfb      	ldrb	r3, [r7, #15]
 8023006:	09db      	lsrs	r3, r3, #7
 8023008:	72bb      	strb	r3, [r7, #10]
    corner_reach = (state & 0x40) >> 6;
 802300a:	7bfb      	ldrb	r3, [r7, #15]
 802300c:	119b      	asrs	r3, r3, #6
 802300e:	b2db      	uxtb	r3, r3
 8023010:	f003 0301 	and.w	r3, r3, #1
 8023014:	727b      	strb	r3, [r7, #9]
    
    if(goal_flag == 0x01 && black_flag == 0x01)
 8023016:	7b7b      	ldrb	r3, [r7, #13]
 8023018:	2b01      	cmp	r3, #1
 802301a:	d10b      	bne.n	8023034 <_ZN10SideSensor7CountUpEv+0x10e>
 802301c:	7bbb      	ldrb	r3, [r7, #14]
 802301e:	2b01      	cmp	r3, #1
 8023020:	d108      	bne.n	8023034 <_ZN10SideSensor7CountUpEv+0x10e>
    {
        state &= 0xF7; // black_flag = false
 8023022:	7bfb      	ldrb	r3, [r7, #15]
 8023024:	f023 0308 	bic.w	r3, r3, #8
 8023028:	73fb      	strb	r3, [r7, #15]
        state |= 0x80; // goal_reach = true
 802302a:	7bfb      	ldrb	r3, [r7, #15]
 802302c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8023030:	73fb      	strb	r3, [r7, #15]
 8023032:	e02f      	b.n	8023094 <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(goal_reach == 0x01 && black_flag == 0x01)
 8023034:	7abb      	ldrb	r3, [r7, #10]
 8023036:	2b01      	cmp	r3, #1
 8023038:	d10d      	bne.n	8023056 <_ZN10SideSensor7CountUpEv+0x130>
 802303a:	7bbb      	ldrb	r3, [r7, #14]
 802303c:	2b01      	cmp	r3, #1
 802303e:	d10a      	bne.n	8023056 <_ZN10SideSensor7CountUpEv+0x130>
    {
        state &= 0x7F; // goal_reach = false
 8023040:	7bfb      	ldrb	r3, [r7, #15]
 8023042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8023046:	73fb      	strb	r3, [r7, #15]
        goal_marker_count_++;
 8023048:	687b      	ldr	r3, [r7, #4]
 802304a:	791b      	ldrb	r3, [r3, #4]
 802304c:	3301      	adds	r3, #1
 802304e:	b2da      	uxtb	r2, r3
 8023050:	687b      	ldr	r3, [r7, #4]
 8023052:	711a      	strb	r2, [r3, #4]
 8023054:	e01e      	b.n	8023094 <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(corner_flag == 0x01 && black_flag == 0x01)
 8023056:	7b3b      	ldrb	r3, [r7, #12]
 8023058:	2b01      	cmp	r3, #1
 802305a:	d10b      	bne.n	8023074 <_ZN10SideSensor7CountUpEv+0x14e>
 802305c:	7bbb      	ldrb	r3, [r7, #14]
 802305e:	2b01      	cmp	r3, #1
 8023060:	d108      	bne.n	8023074 <_ZN10SideSensor7CountUpEv+0x14e>
    {
        state &= 0xF7; // black_flag = false
 8023062:	7bfb      	ldrb	r3, [r7, #15]
 8023064:	f023 0308 	bic.w	r3, r3, #8
 8023068:	73fb      	strb	r3, [r7, #15]
        state |= 0x40; // corner_reach = true
 802306a:	7bfb      	ldrb	r3, [r7, #15]
 802306c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023070:	73fb      	strb	r3, [r7, #15]
 8023072:	e00f      	b.n	8023094 <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(corner_reach == 0x01 && black_flag == 0x01)
 8023074:	7a7b      	ldrb	r3, [r7, #9]
 8023076:	2b01      	cmp	r3, #1
 8023078:	d10c      	bne.n	8023094 <_ZN10SideSensor7CountUpEv+0x16e>
 802307a:	7bbb      	ldrb	r3, [r7, #14]
 802307c:	2b01      	cmp	r3, #1
 802307e:	d109      	bne.n	8023094 <_ZN10SideSensor7CountUpEv+0x16e>
    {
        state &= 0xBF; // corner_reach = false
 8023080:	7bfb      	ldrb	r3, [r7, #15]
 8023082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8023086:	73fb      	strb	r3, [r7, #15]
        corner_marker_count_++;
 8023088:	687b      	ldr	r3, [r7, #4]
 802308a:	795b      	ldrb	r3, [r3, #5]
 802308c:	3301      	adds	r3, #1
 802308e:	b2da      	uxtb	r2, r3
 8023090:	687b      	ldr	r3, [r7, #4]
 8023092:	715a      	strb	r2, [r3, #5]
    }

    write_state_flags_ = state;
 8023094:	687b      	ldr	r3, [r7, #4]
 8023096:	7bfa      	ldrb	r2, [r7, #15]
 8023098:	705a      	strb	r2, [r3, #1]
}
 802309a:	bf00      	nop
 802309c:	3714      	adds	r7, #20
 802309e:	46bd      	mov	sp, r7
 80230a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80230a4:	4770      	bx	lr
	...

080230a8 <_ZN10SideSensor7MonitorEv>:
    return cross_line_count_;
}

#ifdef DEBUG_MODE
void SideSensor::Monitor()
{
 80230a8:	b480      	push	{r7}
 80230aa:	b083      	sub	sp, #12
 80230ac:	af00      	add	r7, sp, #0
 80230ae:	6078      	str	r0, [r7, #4]
    /* read_state_flags_ */
    g_side_pre_state = (read_state_flags_ & 0xF0) >> 4;
 80230b0:	687b      	ldr	r3, [r7, #4]
 80230b2:	781b      	ldrb	r3, [r3, #0]
 80230b4:	091b      	lsrs	r3, r3, #4
 80230b6:	b2da      	uxtb	r2, r3
 80230b8:	4b3a      	ldr	r3, [pc, #232]	; (80231a4 <_ZN10SideSensor7MonitorEv+0xfc>)
 80230ba:	701a      	strb	r2, [r3, #0]
    g_side_now_state =  read_state_flags_ & 0x0F;
 80230bc:	687b      	ldr	r3, [r7, #4]
 80230be:	781b      	ldrb	r3, [r3, #0]
 80230c0:	f003 030f 	and.w	r3, r3, #15
 80230c4:	b2da      	uxtb	r2, r3
 80230c6:	4b38      	ldr	r3, [pc, #224]	; (80231a8 <_ZN10SideSensor7MonitorEv+0x100>)
 80230c8:	701a      	strb	r2, [r3, #0]

    if(g_side_pre_state != g_side_now_state) g_side_change_state_count++;
 80230ca:	4b36      	ldr	r3, [pc, #216]	; (80231a4 <_ZN10SideSensor7MonitorEv+0xfc>)
 80230cc:	781a      	ldrb	r2, [r3, #0]
 80230ce:	4b36      	ldr	r3, [pc, #216]	; (80231a8 <_ZN10SideSensor7MonitorEv+0x100>)
 80230d0:	781b      	ldrb	r3, [r3, #0]
 80230d2:	429a      	cmp	r2, r3
 80230d4:	d004      	beq.n	80230e0 <_ZN10SideSensor7MonitorEv+0x38>
 80230d6:	4b35      	ldr	r3, [pc, #212]	; (80231ac <_ZN10SideSensor7MonitorEv+0x104>)
 80230d8:	681b      	ldr	r3, [r3, #0]
 80230da:	3301      	adds	r3, #1
 80230dc:	4a33      	ldr	r2, [pc, #204]	; (80231ac <_ZN10SideSensor7MonitorEv+0x104>)
 80230de:	6013      	str	r3, [r2, #0]

    /* write_state_flags_ upper bit */
    g_side_goal_reach   = (write_state_flags_ & 0x80) >> 7;
 80230e0:	687b      	ldr	r3, [r7, #4]
 80230e2:	785b      	ldrb	r3, [r3, #1]
 80230e4:	09db      	lsrs	r3, r3, #7
 80230e6:	b2da      	uxtb	r2, r3
 80230e8:	4b31      	ldr	r3, [pc, #196]	; (80231b0 <_ZN10SideSensor7MonitorEv+0x108>)
 80230ea:	701a      	strb	r2, [r3, #0]
    g_side_corner_reach = (write_state_flags_ & 0x40) >> 6;
 80230ec:	687b      	ldr	r3, [r7, #4]
 80230ee:	785b      	ldrb	r3, [r3, #1]
 80230f0:	119b      	asrs	r3, r3, #6
 80230f2:	b2db      	uxtb	r3, r3
 80230f4:	f003 0301 	and.w	r3, r3, #1
 80230f8:	b2da      	uxtb	r2, r3
 80230fa:	4b2e      	ldr	r3, [pc, #184]	; (80231b4 <_ZN10SideSensor7MonitorEv+0x10c>)
 80230fc:	701a      	strb	r2, [r3, #0]
    g_side_cross_reach  = (write_state_flags_ & 0x20) >> 5;
 80230fe:	687b      	ldr	r3, [r7, #4]
 8023100:	785b      	ldrb	r3, [r3, #1]
 8023102:	115b      	asrs	r3, r3, #5
 8023104:	b2db      	uxtb	r3, r3
 8023106:	f003 0301 	and.w	r3, r3, #1
 802310a:	b2da      	uxtb	r2, r3
 802310c:	4b2a      	ldr	r3, [pc, #168]	; (80231b8 <_ZN10SideSensor7MonitorEv+0x110>)
 802310e:	701a      	strb	r2, [r3, #0]

    /* write_state_flags_ lower bit */
    g_side_black_flag  = (write_state_flags_ & 0x08) >> 3;
 8023110:	687b      	ldr	r3, [r7, #4]
 8023112:	785b      	ldrb	r3, [r3, #1]
 8023114:	10db      	asrs	r3, r3, #3
 8023116:	b2db      	uxtb	r3, r3
 8023118:	f003 0301 	and.w	r3, r3, #1
 802311c:	b2da      	uxtb	r2, r3
 802311e:	4b27      	ldr	r3, [pc, #156]	; (80231bc <_ZN10SideSensor7MonitorEv+0x114>)
 8023120:	701a      	strb	r2, [r3, #0]
    g_side_goal_flag   = (write_state_flags_ & 0x04) >> 2;
 8023122:	687b      	ldr	r3, [r7, #4]
 8023124:	785b      	ldrb	r3, [r3, #1]
 8023126:	109b      	asrs	r3, r3, #2
 8023128:	b2db      	uxtb	r3, r3
 802312a:	f003 0301 	and.w	r3, r3, #1
 802312e:	b2da      	uxtb	r2, r3
 8023130:	4b23      	ldr	r3, [pc, #140]	; (80231c0 <_ZN10SideSensor7MonitorEv+0x118>)
 8023132:	701a      	strb	r2, [r3, #0]
    g_side_corner_flag = (write_state_flags_ & 0x02) >> 1;
 8023134:	687b      	ldr	r3, [r7, #4]
 8023136:	785b      	ldrb	r3, [r3, #1]
 8023138:	105b      	asrs	r3, r3, #1
 802313a:	b2db      	uxtb	r3, r3
 802313c:	f003 0301 	and.w	r3, r3, #1
 8023140:	b2da      	uxtb	r2, r3
 8023142:	4b20      	ldr	r3, [pc, #128]	; (80231c4 <_ZN10SideSensor7MonitorEv+0x11c>)
 8023144:	701a      	strb	r2, [r3, #0]
    g_side_cross_flag  =  write_state_flags_ & 0x01;
 8023146:	687b      	ldr	r3, [r7, #4]
 8023148:	785b      	ldrb	r3, [r3, #1]
 802314a:	f003 0301 	and.w	r3, r3, #1
 802314e:	b2da      	uxtb	r2, r3
 8023150:	4b1d      	ldr	r3, [pc, #116]	; (80231c8 <_ZN10SideSensor7MonitorEv+0x120>)
 8023152:	701a      	strb	r2, [r3, #0]

    /* exception_flags_ */
    g_side_before_noise_state = (exception_flags_ & 0xF0) >> 4;
 8023154:	687b      	ldr	r3, [r7, #4]
 8023156:	789b      	ldrb	r3, [r3, #2]
 8023158:	091b      	lsrs	r3, r3, #4
 802315a:	b2da      	uxtb	r2, r3
 802315c:	4b1b      	ldr	r3, [pc, #108]	; (80231cc <_ZN10SideSensor7MonitorEv+0x124>)
 802315e:	701a      	strb	r2, [r3, #0]
    g_side_noise_count        = (exception_flags_ & 0x0C) >> 2;
 8023160:	687b      	ldr	r3, [r7, #4]
 8023162:	789b      	ldrb	r3, [r3, #2]
 8023164:	109b      	asrs	r3, r3, #2
 8023166:	b2db      	uxtb	r3, r3
 8023168:	f003 0303 	and.w	r3, r3, #3
 802316c:	b2da      	uxtb	r2, r3
 802316e:	4b18      	ldr	r3, [pc, #96]	; (80231d0 <_ZN10SideSensor7MonitorEv+0x128>)
 8023170:	701a      	strb	r2, [r3, #0]
    g_side_ignore_flag        =  exception_flags_ & 0x01;
 8023172:	687b      	ldr	r3, [r7, #4]
 8023174:	789b      	ldrb	r3, [r3, #2]
 8023176:	f003 0301 	and.w	r3, r3, #1
 802317a:	b2da      	uxtb	r2, r3
 802317c:	4b15      	ldr	r3, [pc, #84]	; (80231d4 <_ZN10SideSensor7MonitorEv+0x12c>)
 802317e:	701a      	strb	r2, [r3, #0]

    g_goal_count   = goal_marker_count_;
 8023180:	687b      	ldr	r3, [r7, #4]
 8023182:	791a      	ldrb	r2, [r3, #4]
 8023184:	4b14      	ldr	r3, [pc, #80]	; (80231d8 <_ZN10SideSensor7MonitorEv+0x130>)
 8023186:	701a      	strb	r2, [r3, #0]
    g_corner_count = corner_marker_count_;
 8023188:	687b      	ldr	r3, [r7, #4]
 802318a:	795a      	ldrb	r2, [r3, #5]
 802318c:	4b13      	ldr	r3, [pc, #76]	; (80231dc <_ZN10SideSensor7MonitorEv+0x134>)
 802318e:	701a      	strb	r2, [r3, #0]
    g_cross_count  = cross_line_count_;
 8023190:	687b      	ldr	r3, [r7, #4]
 8023192:	799a      	ldrb	r2, [r3, #6]
 8023194:	4b12      	ldr	r3, [pc, #72]	; (80231e0 <_ZN10SideSensor7MonitorEv+0x138>)
 8023196:	701a      	strb	r2, [r3, #0]
}
 8023198:	bf00      	nop
 802319a:	370c      	adds	r7, #12
 802319c:	46bd      	mov	sp, r7
 802319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80231a2:	4770      	bx	lr
 80231a4:	20000668 	.word	0x20000668
 80231a8:	20000669 	.word	0x20000669
 80231ac:	2000066c 	.word	0x2000066c
 80231b0:	20000670 	.word	0x20000670
 80231b4:	20000671 	.word	0x20000671
 80231b8:	20000672 	.word	0x20000672
 80231bc:	20000673 	.word	0x20000673
 80231c0:	20000674 	.word	0x20000674
 80231c4:	20000675 	.word	0x20000675
 80231c8:	20000676 	.word	0x20000676
 80231cc:	20000677 	.word	0x20000677
 80231d0:	20000678 	.word	0x20000678
 80231d4:	20000679 	.word	0x20000679
 80231d8:	2000067a 	.word	0x2000067a
 80231dc:	2000067b 	.word	0x2000067b
 80231e0:	2000067c 	.word	0x2000067c

080231e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80231e4:	b480      	push	{r7}
 80231e6:	b083      	sub	sp, #12
 80231e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80231ea:	2300      	movs	r3, #0
 80231ec:	607b      	str	r3, [r7, #4]
 80231ee:	4b10      	ldr	r3, [pc, #64]	; (8023230 <HAL_MspInit+0x4c>)
 80231f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80231f2:	4a0f      	ldr	r2, [pc, #60]	; (8023230 <HAL_MspInit+0x4c>)
 80231f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80231f8:	6453      	str	r3, [r2, #68]	; 0x44
 80231fa:	4b0d      	ldr	r3, [pc, #52]	; (8023230 <HAL_MspInit+0x4c>)
 80231fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80231fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8023202:	607b      	str	r3, [r7, #4]
 8023204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8023206:	2300      	movs	r3, #0
 8023208:	603b      	str	r3, [r7, #0]
 802320a:	4b09      	ldr	r3, [pc, #36]	; (8023230 <HAL_MspInit+0x4c>)
 802320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802320e:	4a08      	ldr	r2, [pc, #32]	; (8023230 <HAL_MspInit+0x4c>)
 8023210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8023214:	6413      	str	r3, [r2, #64]	; 0x40
 8023216:	4b06      	ldr	r3, [pc, #24]	; (8023230 <HAL_MspInit+0x4c>)
 8023218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802321a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802321e:	603b      	str	r3, [r7, #0]
 8023220:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8023222:	bf00      	nop
 8023224:	370c      	adds	r7, #12
 8023226:	46bd      	mov	sp, r7
 8023228:	f85d 7b04 	ldr.w	r7, [sp], #4
 802322c:	4770      	bx	lr
 802322e:	bf00      	nop
 8023230:	40023800 	.word	0x40023800

08023234 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8023234:	b580      	push	{r7, lr}
 8023236:	b08a      	sub	sp, #40	; 0x28
 8023238:	af00      	add	r7, sp, #0
 802323a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802323c:	f107 0314 	add.w	r3, r7, #20
 8023240:	2200      	movs	r2, #0
 8023242:	601a      	str	r2, [r3, #0]
 8023244:	605a      	str	r2, [r3, #4]
 8023246:	609a      	str	r2, [r3, #8]
 8023248:	60da      	str	r2, [r3, #12]
 802324a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 802324c:	687b      	ldr	r3, [r7, #4]
 802324e:	681b      	ldr	r3, [r3, #0]
 8023250:	4a3c      	ldr	r2, [pc, #240]	; (8023344 <HAL_ADC_MspInit+0x110>)
 8023252:	4293      	cmp	r3, r2
 8023254:	d171      	bne.n	802333a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8023256:	2300      	movs	r3, #0
 8023258:	613b      	str	r3, [r7, #16]
 802325a:	4b3b      	ldr	r3, [pc, #236]	; (8023348 <HAL_ADC_MspInit+0x114>)
 802325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802325e:	4a3a      	ldr	r2, [pc, #232]	; (8023348 <HAL_ADC_MspInit+0x114>)
 8023260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8023264:	6453      	str	r3, [r2, #68]	; 0x44
 8023266:	4b38      	ldr	r3, [pc, #224]	; (8023348 <HAL_ADC_MspInit+0x114>)
 8023268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802326a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802326e:	613b      	str	r3, [r7, #16]
 8023270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8023272:	2300      	movs	r3, #0
 8023274:	60fb      	str	r3, [r7, #12]
 8023276:	4b34      	ldr	r3, [pc, #208]	; (8023348 <HAL_ADC_MspInit+0x114>)
 8023278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802327a:	4a33      	ldr	r2, [pc, #204]	; (8023348 <HAL_ADC_MspInit+0x114>)
 802327c:	f043 0304 	orr.w	r3, r3, #4
 8023280:	6313      	str	r3, [r2, #48]	; 0x30
 8023282:	4b31      	ldr	r3, [pc, #196]	; (8023348 <HAL_ADC_MspInit+0x114>)
 8023284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023286:	f003 0304 	and.w	r3, r3, #4
 802328a:	60fb      	str	r3, [r7, #12]
 802328c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802328e:	2300      	movs	r3, #0
 8023290:	60bb      	str	r3, [r7, #8]
 8023292:	4b2d      	ldr	r3, [pc, #180]	; (8023348 <HAL_ADC_MspInit+0x114>)
 8023294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023296:	4a2c      	ldr	r2, [pc, #176]	; (8023348 <HAL_ADC_MspInit+0x114>)
 8023298:	f043 0301 	orr.w	r3, r3, #1
 802329c:	6313      	str	r3, [r2, #48]	; 0x30
 802329e:	4b2a      	ldr	r3, [pc, #168]	; (8023348 <HAL_ADC_MspInit+0x114>)
 80232a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80232a2:	f003 0301 	and.w	r3, r3, #1
 80232a6:	60bb      	str	r3, [r7, #8]
 80232a8:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80232aa:	233f      	movs	r3, #63	; 0x3f
 80232ac:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80232ae:	2303      	movs	r3, #3
 80232b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80232b2:	2300      	movs	r3, #0
 80232b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80232b6:	f107 0314 	add.w	r3, r7, #20
 80232ba:	4619      	mov	r1, r3
 80232bc:	4823      	ldr	r0, [pc, #140]	; (802334c <HAL_ADC_MspInit+0x118>)
 80232be:	f002 fa9f 	bl	8025800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80232c2:	23ff      	movs	r3, #255	; 0xff
 80232c4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80232c6:	2303      	movs	r3, #3
 80232c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80232ca:	2300      	movs	r3, #0
 80232cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80232ce:	f107 0314 	add.w	r3, r7, #20
 80232d2:	4619      	mov	r1, r3
 80232d4:	481e      	ldr	r0, [pc, #120]	; (8023350 <HAL_ADC_MspInit+0x11c>)
 80232d6:	f002 fa93 	bl	8025800 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80232da:	4b1e      	ldr	r3, [pc, #120]	; (8023354 <HAL_ADC_MspInit+0x120>)
 80232dc:	4a1e      	ldr	r2, [pc, #120]	; (8023358 <HAL_ADC_MspInit+0x124>)
 80232de:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80232e0:	4b1c      	ldr	r3, [pc, #112]	; (8023354 <HAL_ADC_MspInit+0x120>)
 80232e2:	2200      	movs	r2, #0
 80232e4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80232e6:	4b1b      	ldr	r3, [pc, #108]	; (8023354 <HAL_ADC_MspInit+0x120>)
 80232e8:	2200      	movs	r2, #0
 80232ea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80232ec:	4b19      	ldr	r3, [pc, #100]	; (8023354 <HAL_ADC_MspInit+0x120>)
 80232ee:	2200      	movs	r2, #0
 80232f0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80232f2:	4b18      	ldr	r3, [pc, #96]	; (8023354 <HAL_ADC_MspInit+0x120>)
 80232f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80232f8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80232fa:	4b16      	ldr	r3, [pc, #88]	; (8023354 <HAL_ADC_MspInit+0x120>)
 80232fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8023300:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8023302:	4b14      	ldr	r3, [pc, #80]	; (8023354 <HAL_ADC_MspInit+0x120>)
 8023304:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8023308:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 802330a:	4b12      	ldr	r3, [pc, #72]	; (8023354 <HAL_ADC_MspInit+0x120>)
 802330c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8023310:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8023312:	4b10      	ldr	r3, [pc, #64]	; (8023354 <HAL_ADC_MspInit+0x120>)
 8023314:	2200      	movs	r2, #0
 8023316:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8023318:	4b0e      	ldr	r3, [pc, #56]	; (8023354 <HAL_ADC_MspInit+0x120>)
 802331a:	2200      	movs	r2, #0
 802331c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 802331e:	480d      	ldr	r0, [pc, #52]	; (8023354 <HAL_ADC_MspInit+0x120>)
 8023320:	f001 ff00 	bl	8025124 <HAL_DMA_Init>
 8023324:	4603      	mov	r3, r0
 8023326:	2b00      	cmp	r3, #0
 8023328:	d001      	beq.n	802332e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 802332a:	f7ff fa5b 	bl	80227e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 802332e:	687b      	ldr	r3, [r7, #4]
 8023330:	4a08      	ldr	r2, [pc, #32]	; (8023354 <HAL_ADC_MspInit+0x120>)
 8023332:	639a      	str	r2, [r3, #56]	; 0x38
 8023334:	4a07      	ldr	r2, [pc, #28]	; (8023354 <HAL_ADC_MspInit+0x120>)
 8023336:	687b      	ldr	r3, [r7, #4]
 8023338:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 802333a:	bf00      	nop
 802333c:	3728      	adds	r7, #40	; 0x28
 802333e:	46bd      	mov	sp, r7
 8023340:	bd80      	pop	{r7, pc}
 8023342:	bf00      	nop
 8023344:	40012000 	.word	0x40012000
 8023348:	40023800 	.word	0x40023800
 802334c:	40020800 	.word	0x40020800
 8023350:	40020000 	.word	0x40020000
 8023354:	200116cc 	.word	0x200116cc
 8023358:	40026410 	.word	0x40026410

0802335c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 802335c:	b580      	push	{r7, lr}
 802335e:	b08a      	sub	sp, #40	; 0x28
 8023360:	af00      	add	r7, sp, #0
 8023362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023364:	f107 0314 	add.w	r3, r7, #20
 8023368:	2200      	movs	r2, #0
 802336a:	601a      	str	r2, [r3, #0]
 802336c:	605a      	str	r2, [r3, #4]
 802336e:	609a      	str	r2, [r3, #8]
 8023370:	60da      	str	r2, [r3, #12]
 8023372:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8023374:	687b      	ldr	r3, [r7, #4]
 8023376:	681b      	ldr	r3, [r3, #0]
 8023378:	4a19      	ldr	r2, [pc, #100]	; (80233e0 <HAL_I2C_MspInit+0x84>)
 802337a:	4293      	cmp	r3, r2
 802337c:	d12c      	bne.n	80233d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 802337e:	2300      	movs	r3, #0
 8023380:	613b      	str	r3, [r7, #16]
 8023382:	4b18      	ldr	r3, [pc, #96]	; (80233e4 <HAL_I2C_MspInit+0x88>)
 8023384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023386:	4a17      	ldr	r2, [pc, #92]	; (80233e4 <HAL_I2C_MspInit+0x88>)
 8023388:	f043 0302 	orr.w	r3, r3, #2
 802338c:	6313      	str	r3, [r2, #48]	; 0x30
 802338e:	4b15      	ldr	r3, [pc, #84]	; (80233e4 <HAL_I2C_MspInit+0x88>)
 8023390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023392:	f003 0302 	and.w	r3, r3, #2
 8023396:	613b      	str	r3, [r7, #16]
 8023398:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 802339a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 802339e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80233a0:	2312      	movs	r3, #18
 80233a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80233a4:	2301      	movs	r3, #1
 80233a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80233a8:	2303      	movs	r3, #3
 80233aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80233ac:	2304      	movs	r3, #4
 80233ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80233b0:	f107 0314 	add.w	r3, r7, #20
 80233b4:	4619      	mov	r1, r3
 80233b6:	480c      	ldr	r0, [pc, #48]	; (80233e8 <HAL_I2C_MspInit+0x8c>)
 80233b8:	f002 fa22 	bl	8025800 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80233bc:	2300      	movs	r3, #0
 80233be:	60fb      	str	r3, [r7, #12]
 80233c0:	4b08      	ldr	r3, [pc, #32]	; (80233e4 <HAL_I2C_MspInit+0x88>)
 80233c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80233c4:	4a07      	ldr	r2, [pc, #28]	; (80233e4 <HAL_I2C_MspInit+0x88>)
 80233c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80233ca:	6413      	str	r3, [r2, #64]	; 0x40
 80233cc:	4b05      	ldr	r3, [pc, #20]	; (80233e4 <HAL_I2C_MspInit+0x88>)
 80233ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80233d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80233d4:	60fb      	str	r3, [r7, #12]
 80233d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80233d8:	bf00      	nop
 80233da:	3728      	adds	r7, #40	; 0x28
 80233dc:	46bd      	mov	sp, r7
 80233de:	bd80      	pop	{r7, pc}
 80233e0:	40005800 	.word	0x40005800
 80233e4:	40023800 	.word	0x40023800
 80233e8:	40020400 	.word	0x40020400

080233ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80233ec:	b580      	push	{r7, lr}
 80233ee:	b08a      	sub	sp, #40	; 0x28
 80233f0:	af00      	add	r7, sp, #0
 80233f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80233f4:	f107 0314 	add.w	r3, r7, #20
 80233f8:	2200      	movs	r2, #0
 80233fa:	601a      	str	r2, [r3, #0]
 80233fc:	605a      	str	r2, [r3, #4]
 80233fe:	609a      	str	r2, [r3, #8]
 8023400:	60da      	str	r2, [r3, #12]
 8023402:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8023404:	687b      	ldr	r3, [r7, #4]
 8023406:	681b      	ldr	r3, [r3, #0]
 8023408:	4a19      	ldr	r2, [pc, #100]	; (8023470 <HAL_SPI_MspInit+0x84>)
 802340a:	4293      	cmp	r3, r2
 802340c:	d12c      	bne.n	8023468 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 802340e:	2300      	movs	r3, #0
 8023410:	613b      	str	r3, [r7, #16]
 8023412:	4b18      	ldr	r3, [pc, #96]	; (8023474 <HAL_SPI_MspInit+0x88>)
 8023414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023416:	4a17      	ldr	r2, [pc, #92]	; (8023474 <HAL_SPI_MspInit+0x88>)
 8023418:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802341c:	6413      	str	r3, [r2, #64]	; 0x40
 802341e:	4b15      	ldr	r3, [pc, #84]	; (8023474 <HAL_SPI_MspInit+0x88>)
 8023420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023422:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8023426:	613b      	str	r3, [r7, #16]
 8023428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 802342a:	2300      	movs	r3, #0
 802342c:	60fb      	str	r3, [r7, #12]
 802342e:	4b11      	ldr	r3, [pc, #68]	; (8023474 <HAL_SPI_MspInit+0x88>)
 8023430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023432:	4a10      	ldr	r2, [pc, #64]	; (8023474 <HAL_SPI_MspInit+0x88>)
 8023434:	f043 0304 	orr.w	r3, r3, #4
 8023438:	6313      	str	r3, [r2, #48]	; 0x30
 802343a:	4b0e      	ldr	r3, [pc, #56]	; (8023474 <HAL_SPI_MspInit+0x88>)
 802343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802343e:	f003 0304 	and.w	r3, r3, #4
 8023442:	60fb      	str	r3, [r7, #12]
 8023444:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8023446:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 802344a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802344c:	2302      	movs	r3, #2
 802344e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023450:	2300      	movs	r3, #0
 8023452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023454:	2303      	movs	r3, #3
 8023456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8023458:	2306      	movs	r3, #6
 802345a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802345c:	f107 0314 	add.w	r3, r7, #20
 8023460:	4619      	mov	r1, r3
 8023462:	4805      	ldr	r0, [pc, #20]	; (8023478 <HAL_SPI_MspInit+0x8c>)
 8023464:	f002 f9cc 	bl	8025800 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8023468:	bf00      	nop
 802346a:	3728      	adds	r7, #40	; 0x28
 802346c:	46bd      	mov	sp, r7
 802346e:	bd80      	pop	{r7, pc}
 8023470:	40003c00 	.word	0x40003c00
 8023474:	40023800 	.word	0x40023800
 8023478:	40020800 	.word	0x40020800

0802347c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 802347c:	b480      	push	{r7}
 802347e:	b087      	sub	sp, #28
 8023480:	af00      	add	r7, sp, #0
 8023482:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8023484:	687b      	ldr	r3, [r7, #4]
 8023486:	681b      	ldr	r3, [r3, #0]
 8023488:	4a1f      	ldr	r2, [pc, #124]	; (8023508 <HAL_TIM_PWM_MspInit+0x8c>)
 802348a:	4293      	cmp	r3, r2
 802348c:	d10e      	bne.n	80234ac <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 802348e:	2300      	movs	r3, #0
 8023490:	617b      	str	r3, [r7, #20]
 8023492:	4b1e      	ldr	r3, [pc, #120]	; (802350c <HAL_TIM_PWM_MspInit+0x90>)
 8023494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023496:	4a1d      	ldr	r2, [pc, #116]	; (802350c <HAL_TIM_PWM_MspInit+0x90>)
 8023498:	f043 0301 	orr.w	r3, r3, #1
 802349c:	6453      	str	r3, [r2, #68]	; 0x44
 802349e:	4b1b      	ldr	r3, [pc, #108]	; (802350c <HAL_TIM_PWM_MspInit+0x90>)
 80234a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80234a2:	f003 0301 	and.w	r3, r3, #1
 80234a6:	617b      	str	r3, [r7, #20]
 80234a8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80234aa:	e026      	b.n	80234fa <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 80234ac:	687b      	ldr	r3, [r7, #4]
 80234ae:	681b      	ldr	r3, [r3, #0]
 80234b0:	4a17      	ldr	r2, [pc, #92]	; (8023510 <HAL_TIM_PWM_MspInit+0x94>)
 80234b2:	4293      	cmp	r3, r2
 80234b4:	d10e      	bne.n	80234d4 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80234b6:	2300      	movs	r3, #0
 80234b8:	613b      	str	r3, [r7, #16]
 80234ba:	4b14      	ldr	r3, [pc, #80]	; (802350c <HAL_TIM_PWM_MspInit+0x90>)
 80234bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80234be:	4a13      	ldr	r2, [pc, #76]	; (802350c <HAL_TIM_PWM_MspInit+0x90>)
 80234c0:	f043 0302 	orr.w	r3, r3, #2
 80234c4:	6413      	str	r3, [r2, #64]	; 0x40
 80234c6:	4b11      	ldr	r3, [pc, #68]	; (802350c <HAL_TIM_PWM_MspInit+0x90>)
 80234c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80234ca:	f003 0302 	and.w	r3, r3, #2
 80234ce:	613b      	str	r3, [r7, #16]
 80234d0:	693b      	ldr	r3, [r7, #16]
}
 80234d2:	e012      	b.n	80234fa <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 80234d4:	687b      	ldr	r3, [r7, #4]
 80234d6:	681b      	ldr	r3, [r3, #0]
 80234d8:	4a0e      	ldr	r2, [pc, #56]	; (8023514 <HAL_TIM_PWM_MspInit+0x98>)
 80234da:	4293      	cmp	r3, r2
 80234dc:	d10d      	bne.n	80234fa <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80234de:	2300      	movs	r3, #0
 80234e0:	60fb      	str	r3, [r7, #12]
 80234e2:	4b0a      	ldr	r3, [pc, #40]	; (802350c <HAL_TIM_PWM_MspInit+0x90>)
 80234e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80234e6:	4a09      	ldr	r2, [pc, #36]	; (802350c <HAL_TIM_PWM_MspInit+0x90>)
 80234e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80234ec:	6413      	str	r3, [r2, #64]	; 0x40
 80234ee:	4b07      	ldr	r3, [pc, #28]	; (802350c <HAL_TIM_PWM_MspInit+0x90>)
 80234f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80234f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80234f6:	60fb      	str	r3, [r7, #12]
 80234f8:	68fb      	ldr	r3, [r7, #12]
}
 80234fa:	bf00      	nop
 80234fc:	371c      	adds	r7, #28
 80234fe:	46bd      	mov	sp, r7
 8023500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023504:	4770      	bx	lr
 8023506:	bf00      	nop
 8023508:	40010000 	.word	0x40010000
 802350c:	40023800 	.word	0x40023800
 8023510:	40000400 	.word	0x40000400
 8023514:	40001800 	.word	0x40001800

08023518 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8023518:	b580      	push	{r7, lr}
 802351a:	b088      	sub	sp, #32
 802351c:	af00      	add	r7, sp, #0
 802351e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8023520:	687b      	ldr	r3, [r7, #4]
 8023522:	681b      	ldr	r3, [r3, #0]
 8023524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8023528:	d116      	bne.n	8023558 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 802352a:	2300      	movs	r3, #0
 802352c:	61fb      	str	r3, [r7, #28]
 802352e:	4b40      	ldr	r3, [pc, #256]	; (8023630 <HAL_TIM_Base_MspInit+0x118>)
 8023530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023532:	4a3f      	ldr	r2, [pc, #252]	; (8023630 <HAL_TIM_Base_MspInit+0x118>)
 8023534:	f043 0301 	orr.w	r3, r3, #1
 8023538:	6413      	str	r3, [r2, #64]	; 0x40
 802353a:	4b3d      	ldr	r3, [pc, #244]	; (8023630 <HAL_TIM_Base_MspInit+0x118>)
 802353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802353e:	f003 0301 	and.w	r3, r3, #1
 8023542:	61fb      	str	r3, [r7, #28]
 8023544:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8023546:	2200      	movs	r2, #0
 8023548:	2100      	movs	r1, #0
 802354a:	201c      	movs	r0, #28
 802354c:	f001 fdb3 	bl	80250b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8023550:	201c      	movs	r0, #28
 8023552:	f001 fdcc 	bl	80250ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8023556:	e066      	b.n	8023626 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM5)
 8023558:	687b      	ldr	r3, [r7, #4]
 802355a:	681b      	ldr	r3, [r3, #0]
 802355c:	4a35      	ldr	r2, [pc, #212]	; (8023634 <HAL_TIM_Base_MspInit+0x11c>)
 802355e:	4293      	cmp	r3, r2
 8023560:	d116      	bne.n	8023590 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8023562:	2300      	movs	r3, #0
 8023564:	61bb      	str	r3, [r7, #24]
 8023566:	4b32      	ldr	r3, [pc, #200]	; (8023630 <HAL_TIM_Base_MspInit+0x118>)
 8023568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802356a:	4a31      	ldr	r2, [pc, #196]	; (8023630 <HAL_TIM_Base_MspInit+0x118>)
 802356c:	f043 0308 	orr.w	r3, r3, #8
 8023570:	6413      	str	r3, [r2, #64]	; 0x40
 8023572:	4b2f      	ldr	r3, [pc, #188]	; (8023630 <HAL_TIM_Base_MspInit+0x118>)
 8023574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023576:	f003 0308 	and.w	r3, r3, #8
 802357a:	61bb      	str	r3, [r7, #24]
 802357c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 802357e:	2200      	movs	r2, #0
 8023580:	2100      	movs	r1, #0
 8023582:	2032      	movs	r0, #50	; 0x32
 8023584:	f001 fd97 	bl	80250b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8023588:	2032      	movs	r0, #50	; 0x32
 802358a:	f001 fdb0 	bl	80250ee <HAL_NVIC_EnableIRQ>
}
 802358e:	e04a      	b.n	8023626 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM6)
 8023590:	687b      	ldr	r3, [r7, #4]
 8023592:	681b      	ldr	r3, [r3, #0]
 8023594:	4a28      	ldr	r2, [pc, #160]	; (8023638 <HAL_TIM_Base_MspInit+0x120>)
 8023596:	4293      	cmp	r3, r2
 8023598:	d116      	bne.n	80235c8 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 802359a:	2300      	movs	r3, #0
 802359c:	617b      	str	r3, [r7, #20]
 802359e:	4b24      	ldr	r3, [pc, #144]	; (8023630 <HAL_TIM_Base_MspInit+0x118>)
 80235a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80235a2:	4a23      	ldr	r2, [pc, #140]	; (8023630 <HAL_TIM_Base_MspInit+0x118>)
 80235a4:	f043 0310 	orr.w	r3, r3, #16
 80235a8:	6413      	str	r3, [r2, #64]	; 0x40
 80235aa:	4b21      	ldr	r3, [pc, #132]	; (8023630 <HAL_TIM_Base_MspInit+0x118>)
 80235ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80235ae:	f003 0310 	and.w	r3, r3, #16
 80235b2:	617b      	str	r3, [r7, #20]
 80235b4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80235b6:	2200      	movs	r2, #0
 80235b8:	2100      	movs	r1, #0
 80235ba:	2036      	movs	r0, #54	; 0x36
 80235bc:	f001 fd7b 	bl	80250b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80235c0:	2036      	movs	r0, #54	; 0x36
 80235c2:	f001 fd94 	bl	80250ee <HAL_NVIC_EnableIRQ>
}
 80235c6:	e02e      	b.n	8023626 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 80235c8:	687b      	ldr	r3, [r7, #4]
 80235ca:	681b      	ldr	r3, [r3, #0]
 80235cc:	4a1b      	ldr	r2, [pc, #108]	; (802363c <HAL_TIM_Base_MspInit+0x124>)
 80235ce:	4293      	cmp	r3, r2
 80235d0:	d116      	bne.n	8023600 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80235d2:	2300      	movs	r3, #0
 80235d4:	613b      	str	r3, [r7, #16]
 80235d6:	4b16      	ldr	r3, [pc, #88]	; (8023630 <HAL_TIM_Base_MspInit+0x118>)
 80235d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80235da:	4a15      	ldr	r2, [pc, #84]	; (8023630 <HAL_TIM_Base_MspInit+0x118>)
 80235dc:	f043 0320 	orr.w	r3, r3, #32
 80235e0:	6413      	str	r3, [r2, #64]	; 0x40
 80235e2:	4b13      	ldr	r3, [pc, #76]	; (8023630 <HAL_TIM_Base_MspInit+0x118>)
 80235e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80235e6:	f003 0320 	and.w	r3, r3, #32
 80235ea:	613b      	str	r3, [r7, #16]
 80235ec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80235ee:	2200      	movs	r2, #0
 80235f0:	2100      	movs	r1, #0
 80235f2:	2037      	movs	r0, #55	; 0x37
 80235f4:	f001 fd5f 	bl	80250b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80235f8:	2037      	movs	r0, #55	; 0x37
 80235fa:	f001 fd78 	bl	80250ee <HAL_NVIC_EnableIRQ>
}
 80235fe:	e012      	b.n	8023626 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 8023600:	687b      	ldr	r3, [r7, #4]
 8023602:	681b      	ldr	r3, [r3, #0]
 8023604:	4a0e      	ldr	r2, [pc, #56]	; (8023640 <HAL_TIM_Base_MspInit+0x128>)
 8023606:	4293      	cmp	r3, r2
 8023608:	d10d      	bne.n	8023626 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 802360a:	2300      	movs	r3, #0
 802360c:	60fb      	str	r3, [r7, #12]
 802360e:	4b08      	ldr	r3, [pc, #32]	; (8023630 <HAL_TIM_Base_MspInit+0x118>)
 8023610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023612:	4a07      	ldr	r2, [pc, #28]	; (8023630 <HAL_TIM_Base_MspInit+0x118>)
 8023614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8023618:	6453      	str	r3, [r2, #68]	; 0x44
 802361a:	4b05      	ldr	r3, [pc, #20]	; (8023630 <HAL_TIM_Base_MspInit+0x118>)
 802361c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802361e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8023622:	60fb      	str	r3, [r7, #12]
 8023624:	68fb      	ldr	r3, [r7, #12]
}
 8023626:	bf00      	nop
 8023628:	3720      	adds	r7, #32
 802362a:	46bd      	mov	sp, r7
 802362c:	bd80      	pop	{r7, pc}
 802362e:	bf00      	nop
 8023630:	40023800 	.word	0x40023800
 8023634:	40000c00 	.word	0x40000c00
 8023638:	40001000 	.word	0x40001000
 802363c:	40001400 	.word	0x40001400
 8023640:	40014800 	.word	0x40014800

08023644 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8023644:	b580      	push	{r7, lr}
 8023646:	b08c      	sub	sp, #48	; 0x30
 8023648:	af00      	add	r7, sp, #0
 802364a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802364c:	f107 031c 	add.w	r3, r7, #28
 8023650:	2200      	movs	r2, #0
 8023652:	601a      	str	r2, [r3, #0]
 8023654:	605a      	str	r2, [r3, #4]
 8023656:	609a      	str	r2, [r3, #8]
 8023658:	60da      	str	r2, [r3, #12]
 802365a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 802365c:	687b      	ldr	r3, [r7, #4]
 802365e:	681b      	ldr	r3, [r3, #0]
 8023660:	4a32      	ldr	r2, [pc, #200]	; (802372c <HAL_TIM_Encoder_MspInit+0xe8>)
 8023662:	4293      	cmp	r3, r2
 8023664:	d12c      	bne.n	80236c0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8023666:	2300      	movs	r3, #0
 8023668:	61bb      	str	r3, [r7, #24]
 802366a:	4b31      	ldr	r3, [pc, #196]	; (8023730 <HAL_TIM_Encoder_MspInit+0xec>)
 802366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802366e:	4a30      	ldr	r2, [pc, #192]	; (8023730 <HAL_TIM_Encoder_MspInit+0xec>)
 8023670:	f043 0304 	orr.w	r3, r3, #4
 8023674:	6413      	str	r3, [r2, #64]	; 0x40
 8023676:	4b2e      	ldr	r3, [pc, #184]	; (8023730 <HAL_TIM_Encoder_MspInit+0xec>)
 8023678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802367a:	f003 0304 	and.w	r3, r3, #4
 802367e:	61bb      	str	r3, [r7, #24]
 8023680:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8023682:	2300      	movs	r3, #0
 8023684:	617b      	str	r3, [r7, #20]
 8023686:	4b2a      	ldr	r3, [pc, #168]	; (8023730 <HAL_TIM_Encoder_MspInit+0xec>)
 8023688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802368a:	4a29      	ldr	r2, [pc, #164]	; (8023730 <HAL_TIM_Encoder_MspInit+0xec>)
 802368c:	f043 0302 	orr.w	r3, r3, #2
 8023690:	6313      	str	r3, [r2, #48]	; 0x30
 8023692:	4b27      	ldr	r3, [pc, #156]	; (8023730 <HAL_TIM_Encoder_MspInit+0xec>)
 8023694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023696:	f003 0302 	and.w	r3, r3, #2
 802369a:	617b      	str	r3, [r7, #20]
 802369c:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 802369e:	23c0      	movs	r3, #192	; 0xc0
 80236a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80236a2:	2302      	movs	r3, #2
 80236a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80236a6:	2300      	movs	r3, #0
 80236a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80236aa:	2300      	movs	r3, #0
 80236ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80236ae:	2302      	movs	r3, #2
 80236b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80236b2:	f107 031c 	add.w	r3, r7, #28
 80236b6:	4619      	mov	r1, r3
 80236b8:	481e      	ldr	r0, [pc, #120]	; (8023734 <HAL_TIM_Encoder_MspInit+0xf0>)
 80236ba:	f002 f8a1 	bl	8025800 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80236be:	e030      	b.n	8023722 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 80236c0:	687b      	ldr	r3, [r7, #4]
 80236c2:	681b      	ldr	r3, [r3, #0]
 80236c4:	4a1c      	ldr	r2, [pc, #112]	; (8023738 <HAL_TIM_Encoder_MspInit+0xf4>)
 80236c6:	4293      	cmp	r3, r2
 80236c8:	d12b      	bne.n	8023722 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80236ca:	2300      	movs	r3, #0
 80236cc:	613b      	str	r3, [r7, #16]
 80236ce:	4b18      	ldr	r3, [pc, #96]	; (8023730 <HAL_TIM_Encoder_MspInit+0xec>)
 80236d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80236d2:	4a17      	ldr	r2, [pc, #92]	; (8023730 <HAL_TIM_Encoder_MspInit+0xec>)
 80236d4:	f043 0302 	orr.w	r3, r3, #2
 80236d8:	6453      	str	r3, [r2, #68]	; 0x44
 80236da:	4b15      	ldr	r3, [pc, #84]	; (8023730 <HAL_TIM_Encoder_MspInit+0xec>)
 80236dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80236de:	f003 0302 	and.w	r3, r3, #2
 80236e2:	613b      	str	r3, [r7, #16]
 80236e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80236e6:	2300      	movs	r3, #0
 80236e8:	60fb      	str	r3, [r7, #12]
 80236ea:	4b11      	ldr	r3, [pc, #68]	; (8023730 <HAL_TIM_Encoder_MspInit+0xec>)
 80236ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80236ee:	4a10      	ldr	r2, [pc, #64]	; (8023730 <HAL_TIM_Encoder_MspInit+0xec>)
 80236f0:	f043 0304 	orr.w	r3, r3, #4
 80236f4:	6313      	str	r3, [r2, #48]	; 0x30
 80236f6:	4b0e      	ldr	r3, [pc, #56]	; (8023730 <HAL_TIM_Encoder_MspInit+0xec>)
 80236f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80236fa:	f003 0304 	and.w	r3, r3, #4
 80236fe:	60fb      	str	r3, [r7, #12]
 8023700:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8023702:	23c0      	movs	r3, #192	; 0xc0
 8023704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023706:	2302      	movs	r3, #2
 8023708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802370a:	2300      	movs	r3, #0
 802370c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802370e:	2300      	movs	r3, #0
 8023710:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8023712:	2303      	movs	r3, #3
 8023714:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8023716:	f107 031c 	add.w	r3, r7, #28
 802371a:	4619      	mov	r1, r3
 802371c:	4807      	ldr	r0, [pc, #28]	; (802373c <HAL_TIM_Encoder_MspInit+0xf8>)
 802371e:	f002 f86f 	bl	8025800 <HAL_GPIO_Init>
}
 8023722:	bf00      	nop
 8023724:	3730      	adds	r7, #48	; 0x30
 8023726:	46bd      	mov	sp, r7
 8023728:	bd80      	pop	{r7, pc}
 802372a:	bf00      	nop
 802372c:	40000800 	.word	0x40000800
 8023730:	40023800 	.word	0x40023800
 8023734:	40020400 	.word	0x40020400
 8023738:	40010400 	.word	0x40010400
 802373c:	40020800 	.word	0x40020800

08023740 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8023740:	b580      	push	{r7, lr}
 8023742:	b08c      	sub	sp, #48	; 0x30
 8023744:	af00      	add	r7, sp, #0
 8023746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023748:	f107 031c 	add.w	r3, r7, #28
 802374c:	2200      	movs	r2, #0
 802374e:	601a      	str	r2, [r3, #0]
 8023750:	605a      	str	r2, [r3, #4]
 8023752:	609a      	str	r2, [r3, #8]
 8023754:	60da      	str	r2, [r3, #12]
 8023756:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8023758:	687b      	ldr	r3, [r7, #4]
 802375a:	681b      	ldr	r3, [r3, #0]
 802375c:	4a59      	ldr	r2, [pc, #356]	; (80238c4 <HAL_TIM_MspPostInit+0x184>)
 802375e:	4293      	cmp	r3, r2
 8023760:	d11f      	bne.n	80237a2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023762:	2300      	movs	r3, #0
 8023764:	61bb      	str	r3, [r7, #24]
 8023766:	4b58      	ldr	r3, [pc, #352]	; (80238c8 <HAL_TIM_MspPostInit+0x188>)
 8023768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802376a:	4a57      	ldr	r2, [pc, #348]	; (80238c8 <HAL_TIM_MspPostInit+0x188>)
 802376c:	f043 0301 	orr.w	r3, r3, #1
 8023770:	6313      	str	r3, [r2, #48]	; 0x30
 8023772:	4b55      	ldr	r3, [pc, #340]	; (80238c8 <HAL_TIM_MspPostInit+0x188>)
 8023774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023776:	f003 0301 	and.w	r3, r3, #1
 802377a:	61bb      	str	r3, [r7, #24]
 802377c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 802377e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8023782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023784:	2302      	movs	r3, #2
 8023786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023788:	2300      	movs	r3, #0
 802378a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802378c:	2300      	movs	r3, #0
 802378e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8023790:	2301      	movs	r3, #1
 8023792:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023794:	f107 031c 	add.w	r3, r7, #28
 8023798:	4619      	mov	r1, r3
 802379a:	484c      	ldr	r0, [pc, #304]	; (80238cc <HAL_TIM_MspPostInit+0x18c>)
 802379c:	f002 f830 	bl	8025800 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80237a0:	e08b      	b.n	80238ba <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM3)
 80237a2:	687b      	ldr	r3, [r7, #4]
 80237a4:	681b      	ldr	r3, [r3, #0]
 80237a6:	4a4a      	ldr	r2, [pc, #296]	; (80238d0 <HAL_TIM_MspPostInit+0x190>)
 80237a8:	4293      	cmp	r3, r2
 80237aa:	d13d      	bne.n	8023828 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80237ac:	2300      	movs	r3, #0
 80237ae:	617b      	str	r3, [r7, #20]
 80237b0:	4b45      	ldr	r3, [pc, #276]	; (80238c8 <HAL_TIM_MspPostInit+0x188>)
 80237b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80237b4:	4a44      	ldr	r2, [pc, #272]	; (80238c8 <HAL_TIM_MspPostInit+0x188>)
 80237b6:	f043 0304 	orr.w	r3, r3, #4
 80237ba:	6313      	str	r3, [r2, #48]	; 0x30
 80237bc:	4b42      	ldr	r3, [pc, #264]	; (80238c8 <HAL_TIM_MspPostInit+0x188>)
 80237be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80237c0:	f003 0304 	and.w	r3, r3, #4
 80237c4:	617b      	str	r3, [r7, #20]
 80237c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80237c8:	2300      	movs	r3, #0
 80237ca:	613b      	str	r3, [r7, #16]
 80237cc:	4b3e      	ldr	r3, [pc, #248]	; (80238c8 <HAL_TIM_MspPostInit+0x188>)
 80237ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80237d0:	4a3d      	ldr	r2, [pc, #244]	; (80238c8 <HAL_TIM_MspPostInit+0x188>)
 80237d2:	f043 0302 	orr.w	r3, r3, #2
 80237d6:	6313      	str	r3, [r2, #48]	; 0x30
 80237d8:	4b3b      	ldr	r3, [pc, #236]	; (80238c8 <HAL_TIM_MspPostInit+0x188>)
 80237da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80237dc:	f003 0302 	and.w	r3, r3, #2
 80237e0:	613b      	str	r3, [r7, #16]
 80237e2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80237e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80237e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80237ea:	2302      	movs	r3, #2
 80237ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80237ee:	2300      	movs	r3, #0
 80237f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80237f2:	2300      	movs	r3, #0
 80237f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80237f6:	2302      	movs	r3, #2
 80237f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80237fa:	f107 031c 	add.w	r3, r7, #28
 80237fe:	4619      	mov	r1, r3
 8023800:	4834      	ldr	r0, [pc, #208]	; (80238d4 <HAL_TIM_MspPostInit+0x194>)
 8023802:	f001 fffd 	bl	8025800 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8023806:	2330      	movs	r3, #48	; 0x30
 8023808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802380a:	2302      	movs	r3, #2
 802380c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802380e:	2300      	movs	r3, #0
 8023810:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023812:	2300      	movs	r3, #0
 8023814:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8023816:	2302      	movs	r3, #2
 8023818:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802381a:	f107 031c 	add.w	r3, r7, #28
 802381e:	4619      	mov	r1, r3
 8023820:	482d      	ldr	r0, [pc, #180]	; (80238d8 <HAL_TIM_MspPostInit+0x198>)
 8023822:	f001 ffed 	bl	8025800 <HAL_GPIO_Init>
}
 8023826:	e048      	b.n	80238ba <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM11)
 8023828:	687b      	ldr	r3, [r7, #4]
 802382a:	681b      	ldr	r3, [r3, #0]
 802382c:	4a2b      	ldr	r2, [pc, #172]	; (80238dc <HAL_TIM_MspPostInit+0x19c>)
 802382e:	4293      	cmp	r3, r2
 8023830:	d11f      	bne.n	8023872 <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8023832:	2300      	movs	r3, #0
 8023834:	60fb      	str	r3, [r7, #12]
 8023836:	4b24      	ldr	r3, [pc, #144]	; (80238c8 <HAL_TIM_MspPostInit+0x188>)
 8023838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802383a:	4a23      	ldr	r2, [pc, #140]	; (80238c8 <HAL_TIM_MspPostInit+0x188>)
 802383c:	f043 0302 	orr.w	r3, r3, #2
 8023840:	6313      	str	r3, [r2, #48]	; 0x30
 8023842:	4b21      	ldr	r3, [pc, #132]	; (80238c8 <HAL_TIM_MspPostInit+0x188>)
 8023844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023846:	f003 0302 	and.w	r3, r3, #2
 802384a:	60fb      	str	r3, [r7, #12]
 802384c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 802384e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8023852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023854:	2302      	movs	r3, #2
 8023856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023858:	2300      	movs	r3, #0
 802385a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802385c:	2300      	movs	r3, #0
 802385e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8023860:	2303      	movs	r3, #3
 8023862:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023864:	f107 031c 	add.w	r3, r7, #28
 8023868:	4619      	mov	r1, r3
 802386a:	481b      	ldr	r0, [pc, #108]	; (80238d8 <HAL_TIM_MspPostInit+0x198>)
 802386c:	f001 ffc8 	bl	8025800 <HAL_GPIO_Init>
}
 8023870:	e023      	b.n	80238ba <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM12)
 8023872:	687b      	ldr	r3, [r7, #4]
 8023874:	681b      	ldr	r3, [r3, #0]
 8023876:	4a1a      	ldr	r2, [pc, #104]	; (80238e0 <HAL_TIM_MspPostInit+0x1a0>)
 8023878:	4293      	cmp	r3, r2
 802387a:	d11e      	bne.n	80238ba <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 802387c:	2300      	movs	r3, #0
 802387e:	60bb      	str	r3, [r7, #8]
 8023880:	4b11      	ldr	r3, [pc, #68]	; (80238c8 <HAL_TIM_MspPostInit+0x188>)
 8023882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023884:	4a10      	ldr	r2, [pc, #64]	; (80238c8 <HAL_TIM_MspPostInit+0x188>)
 8023886:	f043 0302 	orr.w	r3, r3, #2
 802388a:	6313      	str	r3, [r2, #48]	; 0x30
 802388c:	4b0e      	ldr	r3, [pc, #56]	; (80238c8 <HAL_TIM_MspPostInit+0x188>)
 802388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023890:	f003 0302 	and.w	r3, r3, #2
 8023894:	60bb      	str	r3, [r7, #8]
 8023896:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8023898:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 802389c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802389e:	2302      	movs	r3, #2
 80238a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80238a2:	2300      	movs	r3, #0
 80238a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80238a6:	2300      	movs	r3, #0
 80238a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80238aa:	2309      	movs	r3, #9
 80238ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80238ae:	f107 031c 	add.w	r3, r7, #28
 80238b2:	4619      	mov	r1, r3
 80238b4:	4808      	ldr	r0, [pc, #32]	; (80238d8 <HAL_TIM_MspPostInit+0x198>)
 80238b6:	f001 ffa3 	bl	8025800 <HAL_GPIO_Init>
}
 80238ba:	bf00      	nop
 80238bc:	3730      	adds	r7, #48	; 0x30
 80238be:	46bd      	mov	sp, r7
 80238c0:	bd80      	pop	{r7, pc}
 80238c2:	bf00      	nop
 80238c4:	40010000 	.word	0x40010000
 80238c8:	40023800 	.word	0x40023800
 80238cc:	40020000 	.word	0x40020000
 80238d0:	40000400 	.word	0x40000400
 80238d4:	40020800 	.word	0x40020800
 80238d8:	40020400 	.word	0x40020400
 80238dc:	40014800 	.word	0x40014800
 80238e0:	40001800 	.word	0x40001800

080238e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80238e4:	b480      	push	{r7}
 80238e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80238e8:	e7fe      	b.n	80238e8 <NMI_Handler+0x4>

080238ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80238ea:	b480      	push	{r7}
 80238ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80238ee:	e7fe      	b.n	80238ee <HardFault_Handler+0x4>

080238f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80238f0:	b480      	push	{r7}
 80238f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80238f4:	e7fe      	b.n	80238f4 <MemManage_Handler+0x4>

080238f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80238f6:	b480      	push	{r7}
 80238f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80238fa:	e7fe      	b.n	80238fa <BusFault_Handler+0x4>

080238fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80238fc:	b480      	push	{r7}
 80238fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8023900:	e7fe      	b.n	8023900 <UsageFault_Handler+0x4>

08023902 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8023902:	b480      	push	{r7}
 8023904:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8023906:	bf00      	nop
 8023908:	46bd      	mov	sp, r7
 802390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802390e:	4770      	bx	lr

08023910 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8023910:	b480      	push	{r7}
 8023912:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8023914:	bf00      	nop
 8023916:	46bd      	mov	sp, r7
 8023918:	f85d 7b04 	ldr.w	r7, [sp], #4
 802391c:	4770      	bx	lr

0802391e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 802391e:	b480      	push	{r7}
 8023920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8023922:	bf00      	nop
 8023924:	46bd      	mov	sp, r7
 8023926:	f85d 7b04 	ldr.w	r7, [sp], #4
 802392a:	4770      	bx	lr

0802392c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 802392c:	b580      	push	{r7, lr}
 802392e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8023930:	f000 feb0 	bl	8024694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8023934:	bf00      	nop
 8023936:	bd80      	pop	{r7, pc}

08023938 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8023938:	b580      	push	{r7, lr}
 802393a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 802393c:	4802      	ldr	r0, [pc, #8]	; (8023948 <TIM2_IRQHandler+0x10>)
 802393e:	f003 f870 	bl	8026a22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8023942:	bf00      	nop
 8023944:	bd80      	pop	{r7, pc}
 8023946:	bf00      	nop
 8023948:	200117ac 	.word	0x200117ac

0802394c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 802394c:	b580      	push	{r7, lr}
 802394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8023950:	4802      	ldr	r0, [pc, #8]	; (802395c <TIM5_IRQHandler+0x10>)
 8023952:	f003 f866 	bl	8026a22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8023956:	bf00      	nop
 8023958:	bd80      	pop	{r7, pc}
 802395a:	bf00      	nop
 802395c:	2001156c 	.word	0x2001156c

08023960 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8023960:	b580      	push	{r7, lr}
 8023962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8023964:	4802      	ldr	r0, [pc, #8]	; (8023970 <TIM6_DAC_IRQHandler+0x10>)
 8023966:	f003 f85c 	bl	8026a22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 802396a:	bf00      	nop
 802396c:	bd80      	pop	{r7, pc}
 802396e:	bf00      	nop
 8023970:	2001172c 	.word	0x2001172c

08023974 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8023974:	b580      	push	{r7, lr}
 8023976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8023978:	4802      	ldr	r0, [pc, #8]	; (8023984 <TIM7_IRQHandler+0x10>)
 802397a:	f003 f852 	bl	8026a22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 802397e:	bf00      	nop
 8023980:	bd80      	pop	{r7, pc}
 8023982:	bf00      	nop
 8023984:	2001182c 	.word	0x2001182c

08023988 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8023988:	b580      	push	{r7, lr}
 802398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 802398c:	4802      	ldr	r0, [pc, #8]	; (8023998 <DMA2_Stream0_IRQHandler+0x10>)
 802398e:	f001 fccf 	bl	8025330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8023992:	bf00      	nop
 8023994:	bd80      	pop	{r7, pc}
 8023996:	bf00      	nop
 8023998:	200116cc 	.word	0x200116cc

0802399c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 802399c:	b480      	push	{r7}
 802399e:	b083      	sub	sp, #12
 80239a0:	af00      	add	r7, sp, #0
 80239a2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80239a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80239a8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80239ac:	f003 0301 	and.w	r3, r3, #1
 80239b0:	2b00      	cmp	r3, #0
 80239b2:	d013      	beq.n	80239dc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80239b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80239b8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80239bc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80239c0:	2b00      	cmp	r3, #0
 80239c2:	d00b      	beq.n	80239dc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80239c4:	e000      	b.n	80239c8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80239c6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80239c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80239cc:	681b      	ldr	r3, [r3, #0]
 80239ce:	2b00      	cmp	r3, #0
 80239d0:	d0f9      	beq.n	80239c6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80239d2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80239d6:	687a      	ldr	r2, [r7, #4]
 80239d8:	b2d2      	uxtb	r2, r2
 80239da:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80239dc:	687b      	ldr	r3, [r7, #4]
}
 80239de:	4618      	mov	r0, r3
 80239e0:	370c      	adds	r7, #12
 80239e2:	46bd      	mov	sp, r7
 80239e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80239e8:	4770      	bx	lr

080239ea <_write>:
#include "swo_setting.h"

int _write(int file, char *ptr, int len)
{
 80239ea:	b580      	push	{r7, lr}
 80239ec:	b086      	sub	sp, #24
 80239ee:	af00      	add	r7, sp, #0
 80239f0:	60f8      	str	r0, [r7, #12]
 80239f2:	60b9      	str	r1, [r7, #8]
 80239f4:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for(DataIdx = 0; DataIdx < len; DataIdx++)
 80239f6:	2300      	movs	r3, #0
 80239f8:	617b      	str	r3, [r7, #20]
 80239fa:	e009      	b.n	8023a10 <_write+0x26>
    {
        ITM_SendChar(*ptr++);
 80239fc:	68bb      	ldr	r3, [r7, #8]
 80239fe:	1c5a      	adds	r2, r3, #1
 8023a00:	60ba      	str	r2, [r7, #8]
 8023a02:	781b      	ldrb	r3, [r3, #0]
 8023a04:	4618      	mov	r0, r3
 8023a06:	f7ff ffc9 	bl	802399c <ITM_SendChar>
    for(DataIdx = 0; DataIdx < len; DataIdx++)
 8023a0a:	697b      	ldr	r3, [r7, #20]
 8023a0c:	3301      	adds	r3, #1
 8023a0e:	617b      	str	r3, [r7, #20]
 8023a10:	697a      	ldr	r2, [r7, #20]
 8023a12:	687b      	ldr	r3, [r7, #4]
 8023a14:	429a      	cmp	r2, r3
 8023a16:	dbf1      	blt.n	80239fc <_write+0x12>
    }

    return len;
 8023a18:	687b      	ldr	r3, [r7, #4]
 8023a1a:	4618      	mov	r0, r3
 8023a1c:	3718      	adds	r7, #24
 8023a1e:	46bd      	mov	sp, r7
 8023a20:	bd80      	pop	{r7, pc}

08023a22 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8023a22:	b580      	push	{r7, lr}
 8023a24:	b086      	sub	sp, #24
 8023a26:	af00      	add	r7, sp, #0
 8023a28:	60f8      	str	r0, [r7, #12]
 8023a2a:	60b9      	str	r1, [r7, #8]
 8023a2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8023a2e:	2300      	movs	r3, #0
 8023a30:	617b      	str	r3, [r7, #20]
 8023a32:	e00a      	b.n	8023a4a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8023a34:	f3af 8000 	nop.w
 8023a38:	4601      	mov	r1, r0
 8023a3a:	68bb      	ldr	r3, [r7, #8]
 8023a3c:	1c5a      	adds	r2, r3, #1
 8023a3e:	60ba      	str	r2, [r7, #8]
 8023a40:	b2ca      	uxtb	r2, r1
 8023a42:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8023a44:	697b      	ldr	r3, [r7, #20]
 8023a46:	3301      	adds	r3, #1
 8023a48:	617b      	str	r3, [r7, #20]
 8023a4a:	697a      	ldr	r2, [r7, #20]
 8023a4c:	687b      	ldr	r3, [r7, #4]
 8023a4e:	429a      	cmp	r2, r3
 8023a50:	dbf0      	blt.n	8023a34 <_read+0x12>
	}

return len;
 8023a52:	687b      	ldr	r3, [r7, #4]
}
 8023a54:	4618      	mov	r0, r3
 8023a56:	3718      	adds	r7, #24
 8023a58:	46bd      	mov	sp, r7
 8023a5a:	bd80      	pop	{r7, pc}

08023a5c <_close>:
	}
	return len;
}

int _close(int file)
{
 8023a5c:	b480      	push	{r7}
 8023a5e:	b083      	sub	sp, #12
 8023a60:	af00      	add	r7, sp, #0
 8023a62:	6078      	str	r0, [r7, #4]
	return -1;
 8023a64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8023a68:	4618      	mov	r0, r3
 8023a6a:	370c      	adds	r7, #12
 8023a6c:	46bd      	mov	sp, r7
 8023a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a72:	4770      	bx	lr

08023a74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8023a74:	b480      	push	{r7}
 8023a76:	b083      	sub	sp, #12
 8023a78:	af00      	add	r7, sp, #0
 8023a7a:	6078      	str	r0, [r7, #4]
 8023a7c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8023a7e:	683b      	ldr	r3, [r7, #0]
 8023a80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8023a84:	605a      	str	r2, [r3, #4]
	return 0;
 8023a86:	2300      	movs	r3, #0
}
 8023a88:	4618      	mov	r0, r3
 8023a8a:	370c      	adds	r7, #12
 8023a8c:	46bd      	mov	sp, r7
 8023a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a92:	4770      	bx	lr

08023a94 <_isatty>:

int _isatty(int file)
{
 8023a94:	b480      	push	{r7}
 8023a96:	b083      	sub	sp, #12
 8023a98:	af00      	add	r7, sp, #0
 8023a9a:	6078      	str	r0, [r7, #4]
	return 1;
 8023a9c:	2301      	movs	r3, #1
}
 8023a9e:	4618      	mov	r0, r3
 8023aa0:	370c      	adds	r7, #12
 8023aa2:	46bd      	mov	sp, r7
 8023aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023aa8:	4770      	bx	lr

08023aaa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8023aaa:	b480      	push	{r7}
 8023aac:	b085      	sub	sp, #20
 8023aae:	af00      	add	r7, sp, #0
 8023ab0:	60f8      	str	r0, [r7, #12]
 8023ab2:	60b9      	str	r1, [r7, #8]
 8023ab4:	607a      	str	r2, [r7, #4]
	return 0;
 8023ab6:	2300      	movs	r3, #0
}
 8023ab8:	4618      	mov	r0, r3
 8023aba:	3714      	adds	r7, #20
 8023abc:	46bd      	mov	sp, r7
 8023abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ac2:	4770      	bx	lr

08023ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8023ac4:	b580      	push	{r7, lr}
 8023ac6:	b086      	sub	sp, #24
 8023ac8:	af00      	add	r7, sp, #0
 8023aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8023acc:	4a14      	ldr	r2, [pc, #80]	; (8023b20 <_sbrk+0x5c>)
 8023ace:	4b15      	ldr	r3, [pc, #84]	; (8023b24 <_sbrk+0x60>)
 8023ad0:	1ad3      	subs	r3, r2, r3
 8023ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8023ad4:	697b      	ldr	r3, [r7, #20]
 8023ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8023ad8:	4b13      	ldr	r3, [pc, #76]	; (8023b28 <_sbrk+0x64>)
 8023ada:	681b      	ldr	r3, [r3, #0]
 8023adc:	2b00      	cmp	r3, #0
 8023ade:	d102      	bne.n	8023ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8023ae0:	4b11      	ldr	r3, [pc, #68]	; (8023b28 <_sbrk+0x64>)
 8023ae2:	4a12      	ldr	r2, [pc, #72]	; (8023b2c <_sbrk+0x68>)
 8023ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8023ae6:	4b10      	ldr	r3, [pc, #64]	; (8023b28 <_sbrk+0x64>)
 8023ae8:	681a      	ldr	r2, [r3, #0]
 8023aea:	687b      	ldr	r3, [r7, #4]
 8023aec:	4413      	add	r3, r2
 8023aee:	693a      	ldr	r2, [r7, #16]
 8023af0:	429a      	cmp	r2, r3
 8023af2:	d207      	bcs.n	8023b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8023af4:	f003 fe46 	bl	8027784 <__errno>
 8023af8:	4602      	mov	r2, r0
 8023afa:	230c      	movs	r3, #12
 8023afc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8023afe:	f04f 33ff 	mov.w	r3, #4294967295
 8023b02:	e009      	b.n	8023b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8023b04:	4b08      	ldr	r3, [pc, #32]	; (8023b28 <_sbrk+0x64>)
 8023b06:	681b      	ldr	r3, [r3, #0]
 8023b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8023b0a:	4b07      	ldr	r3, [pc, #28]	; (8023b28 <_sbrk+0x64>)
 8023b0c:	681a      	ldr	r2, [r3, #0]
 8023b0e:	687b      	ldr	r3, [r7, #4]
 8023b10:	4413      	add	r3, r2
 8023b12:	4a05      	ldr	r2, [pc, #20]	; (8023b28 <_sbrk+0x64>)
 8023b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8023b16:	68fb      	ldr	r3, [r7, #12]
}
 8023b18:	4618      	mov	r0, r3
 8023b1a:	3718      	adds	r7, #24
 8023b1c:	46bd      	mov	sp, r7
 8023b1e:	bd80      	pop	{r7, pc}
 8023b20:	20020000 	.word	0x20020000
 8023b24:	00000400 	.word	0x00000400
 8023b28:	200006f0 	.word	0x200006f0
 8023b2c:	20011878 	.word	0x20011878

08023b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8023b30:	b480      	push	{r7}
 8023b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8023b34:	4b08      	ldr	r3, [pc, #32]	; (8023b58 <SystemInit+0x28>)
 8023b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8023b3a:	4a07      	ldr	r2, [pc, #28]	; (8023b58 <SystemInit+0x28>)
 8023b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8023b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8023b44:	4b04      	ldr	r3, [pc, #16]	; (8023b58 <SystemInit+0x28>)
 8023b46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8023b4a:	609a      	str	r2, [r3, #8]
#endif
}
 8023b4c:	bf00      	nop
 8023b4e:	46bd      	mov	sp, r7
 8023b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023b54:	4770      	bx	lr
 8023b56:	bf00      	nop
 8023b58:	e000ed00 	.word	0xe000ed00

08023b5c <_ZN4TestC1EP7EncoderP8Iim42652P3LedP10LineSensorP9LineTraceP5MotorP12RotarySwitchP10SideSensorP15VelocityControl>:
#include "test.hpp"
#include <stdio.h>
#include <math.h>

#ifdef TEST_MODE
Test::Test(Encoder *encoder,
 8023b5c:	b480      	push	{r7}
 8023b5e:	b085      	sub	sp, #20
 8023b60:	af00      	add	r7, sp, #0
 8023b62:	60f8      	str	r0, [r7, #12]
 8023b64:	60b9      	str	r1, [r7, #8]
 8023b66:	607a      	str	r2, [r7, #4]
 8023b68:	603b      	str	r3, [r7, #0]
           Motor *motor,
           RotarySwitch *rotary_switch,
           SideSensor *side_sensor,
           VelocityControl *velocity_control)
{
    encoder_ = encoder;
 8023b6a:	68fb      	ldr	r3, [r7, #12]
 8023b6c:	68ba      	ldr	r2, [r7, #8]
 8023b6e:	601a      	str	r2, [r3, #0]
    iim_42652_ = iim_42652;
 8023b70:	68fb      	ldr	r3, [r7, #12]
 8023b72:	687a      	ldr	r2, [r7, #4]
 8023b74:	605a      	str	r2, [r3, #4]
    led_ = led;
 8023b76:	68fb      	ldr	r3, [r7, #12]
 8023b78:	683a      	ldr	r2, [r7, #0]
 8023b7a:	609a      	str	r2, [r3, #8]
    line_sensor_ = line_sensor;
 8023b7c:	68fb      	ldr	r3, [r7, #12]
 8023b7e:	69ba      	ldr	r2, [r7, #24]
 8023b80:	60da      	str	r2, [r3, #12]
    line_trace_ = line_trace;
 8023b82:	68fb      	ldr	r3, [r7, #12]
 8023b84:	69fa      	ldr	r2, [r7, #28]
 8023b86:	611a      	str	r2, [r3, #16]
    motor_ = motor;
 8023b88:	68fb      	ldr	r3, [r7, #12]
 8023b8a:	6a3a      	ldr	r2, [r7, #32]
 8023b8c:	615a      	str	r2, [r3, #20]
    rotary_switch_ = rotary_switch;
 8023b8e:	68fb      	ldr	r3, [r7, #12]
 8023b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023b92:	619a      	str	r2, [r3, #24]
    side_sensor_ = side_sensor;
 8023b94:	68fb      	ldr	r3, [r7, #12]
 8023b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023b98:	61da      	str	r2, [r3, #28]
    velocity_control_ = velocity_control;
 8023b9a:	68fb      	ldr	r3, [r7, #12]
 8023b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023b9e:	621a      	str	r2, [r3, #32]
}
 8023ba0:	68fb      	ldr	r3, [r7, #12]
 8023ba2:	4618      	mov	r0, r3
 8023ba4:	3714      	adds	r7, #20
 8023ba6:	46bd      	mov	sp, r7
 8023ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023bac:	4770      	bx	lr
	...

08023bb0 <_ZN4Test4InitEv>:

void Test::Init()
{
 8023bb0:	b580      	push	{r7, lr}
 8023bb2:	b082      	sub	sp, #8
 8023bb4:	af00      	add	r7, sp, #0
 8023bb6:	6078      	str	r0, [r7, #4]
    encoder_->Init();
 8023bb8:	687b      	ldr	r3, [r7, #4]
 8023bba:	681b      	ldr	r3, [r3, #0]
 8023bbc:	4618      	mov	r0, r3
 8023bbe:	f7fd f8c3 	bl	8020d48 <_ZN7Encoder4InitEv>
    line_sensor_->Init();
 8023bc2:	687b      	ldr	r3, [r7, #4]
 8023bc4:	68db      	ldr	r3, [r3, #12]
 8023bc6:	4618      	mov	r0, r3
 8023bc8:	f7fd fb50 	bl	802126c <_ZN10LineSensor4InitEv>
    motor_->Init();
 8023bcc:	687b      	ldr	r3, [r7, #4]
 8023bce:	695b      	ldr	r3, [r3, #20]
 8023bd0:	4618      	mov	r0, r3
 8023bd2:	f7fe fe0b 	bl	80227ec <_ZN5Motor4InitEv>

    led_->Blink(3, 'Y', 'M');
 8023bd6:	687b      	ldr	r3, [r7, #4]
 8023bd8:	6898      	ldr	r0, [r3, #8]
 8023bda:	234d      	movs	r3, #77	; 0x4d
 8023bdc:	2259      	movs	r2, #89	; 0x59
 8023bde:	2103      	movs	r1, #3
 8023be0:	f7fd fad6 	bl	8021190 <_ZN3Led5BlinkEhcc>
    led_->ColorOrder('X');
 8023be4:	687b      	ldr	r3, [r7, #4]
 8023be6:	689b      	ldr	r3, [r3, #8]
 8023be8:	2158      	movs	r1, #88	; 0x58
 8023bea:	4618      	mov	r0, r3
 8023bec:	f7fd f9f4 	bl	8020fd8 <_ZN3Led10ColorOrderEc>

    if(rotary_switch_->State() != 0x00)
 8023bf0:	687b      	ldr	r3, [r7, #4]
 8023bf2:	699b      	ldr	r3, [r3, #24]
 8023bf4:	4618      	mov	r0, r3
 8023bf6:	f7fe ff77 	bl	8022ae8 <_ZN12RotarySwitch5StateEv>
 8023bfa:	4603      	mov	r3, r0
 8023bfc:	2b00      	cmp	r3, #0
 8023bfe:	bf14      	ite	ne
 8023c00:	2301      	movne	r3, #1
 8023c02:	2300      	moveq	r3, #0
 8023c04:	b2db      	uxtb	r3, r3
 8023c06:	2b00      	cmp	r3, #0
 8023c08:	d006      	beq.n	8023c18 <_ZN4Test4InitEv+0x68>
    {
        HAL_TIM_Base_Start_IT(&htim7);
 8023c0a:	4809      	ldr	r0, [pc, #36]	; (8023c30 <_ZN4Test4InitEv+0x80>)
 8023c0c:	f002 fdb3 	bl	8026776 <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start_IT(&htim6);
 8023c10:	4808      	ldr	r0, [pc, #32]	; (8023c34 <_ZN4Test4InitEv+0x84>)
 8023c12:	f002 fdb0 	bl	8026776 <HAL_TIM_Base_Start_IT>
    }
    else led_->Blink(3, 'B', 'X');
}
 8023c16:	e006      	b.n	8023c26 <_ZN4Test4InitEv+0x76>
    else led_->Blink(3, 'B', 'X');
 8023c18:	687b      	ldr	r3, [r7, #4]
 8023c1a:	6898      	ldr	r0, [r3, #8]
 8023c1c:	2358      	movs	r3, #88	; 0x58
 8023c1e:	2242      	movs	r2, #66	; 0x42
 8023c20:	2103      	movs	r1, #3
 8023c22:	f7fd fab5 	bl	8021190 <_ZN3Led5BlinkEhcc>
}
 8023c26:	bf00      	nop
 8023c28:	3708      	adds	r7, #8
 8023c2a:	46bd      	mov	sp, r7
 8023c2c:	bd80      	pop	{r7, pc}
 8023c2e:	bf00      	nop
 8023c30:	2001182c 	.word	0x2001182c
 8023c34:	2001172c 	.word	0x2001172c

08023c38 <_ZN4Test4LoopEv>:

void Test::Loop()
{
 8023c38:	b580      	push	{r7, lr}
 8023c3a:	b082      	sub	sp, #8
 8023c3c:	af00      	add	r7, sp, #0
 8023c3e:	6078      	str	r0, [r7, #4]
    printf("Hello,World!!\r\n");
 8023c40:	4803      	ldr	r0, [pc, #12]	; (8023c50 <_ZN4Test4LoopEv+0x18>)
 8023c42:	f004 f983 	bl	8027f4c <puts>
}
 8023c46:	bf00      	nop
 8023c48:	3708      	adds	r7, #8
 8023c4a:	46bd      	mov	sp, r7
 8023c4c:	bd80      	pop	{r7, pc}
 8023c4e:	bf00      	nop
 8023c50:	08029a48 	.word	0x08029a48

08023c54 <_ZN4Test6Timer7Ev>:

void Test::Timer7()
{
 8023c54:	b580      	push	{r7, lr}
 8023c56:	b082      	sub	sp, #8
 8023c58:	af00      	add	r7, sp, #0
 8023c5a:	6078      	str	r0, [r7, #4]
    line_sensor_->StoreConsecutiveBuff();
 8023c5c:	687b      	ldr	r3, [r7, #4]
 8023c5e:	68db      	ldr	r3, [r3, #12]
 8023c60:	4618      	mov	r0, r3
 8023c62:	f7fd fb3d 	bl	80212e0 <_ZN10LineSensor20StoreConsecutiveBuffEv>
}
 8023c66:	bf00      	nop
 8023c68:	3708      	adds	r7, #8
 8023c6a:	46bd      	mov	sp, r7
 8023c6c:	bd80      	pop	{r7, pc}

08023c6e <_ZN4Test6Timer6Ev>:

void Test::Timer6()
{
 8023c6e:	b580      	push	{r7, lr}
 8023c70:	b082      	sub	sp, #8
 8023c72:	af00      	add	r7, sp, #0
 8023c74:	6078      	str	r0, [r7, #4]
    TestLineSensor();
 8023c76:	6878      	ldr	r0, [r7, #4]
 8023c78:	f000 f84e 	bl	8023d18 <_ZN4Test14TestLineSensorEv>
    TestSideSensor();
 8023c7c:	6878      	ldr	r0, [r7, #4]
 8023c7e:	f000 f891 	bl	8023da4 <_ZN4Test14TestSideSensorEv>
    TestEncoder();
 8023c82:	6878      	ldr	r0, [r7, #4]
 8023c84:	f000 f95e 	bl	8023f44 <_ZN4Test11TestEncoderEv>
    MonitorLog();
 8023c88:	6878      	ldr	r0, [r7, #4]
 8023c8a:	f000 f9a1 	bl	8023fd0 <_ZN4Test10MonitorLogEv>
    TestMotor();
 8023c8e:	6878      	ldr	r0, [r7, #4]
 8023c90:	f000 f89a 	bl	8023dc8 <_ZN4Test9TestMotorEv>
    TestImu();
 8023c94:	6878      	ldr	r0, [r7, #4]
 8023c96:	f000 f807 	bl	8023ca8 <_ZN4Test7TestImuEv>
}
 8023c9a:	bf00      	nop
 8023c9c:	3708      	adds	r7, #8
 8023c9e:	46bd      	mov	sp, r7
 8023ca0:	bd80      	pop	{r7, pc}
 8023ca2:	0000      	movs	r0, r0
 8023ca4:	0000      	movs	r0, r0
	...

08023ca8 <_ZN4Test7TestImuEv>:

void Test::TestImu()
{
 8023ca8:	b590      	push	{r4, r7, lr}
 8023caa:	b087      	sub	sp, #28
 8023cac:	af00      	add	r7, sp, #0
 8023cae:	6078      	str	r0, [r7, #4]
    double degree = iim_42652_->GetDegreeStackZ();
 8023cb0:	687b      	ldr	r3, [r7, #4]
 8023cb2:	685b      	ldr	r3, [r3, #4]
 8023cb4:	4618      	mov	r0, r3
 8023cb6:	f7fd f96c 	bl	8020f92 <_ZN8Iim4265215GetDegreeStackZEv>
 8023cba:	ed87 0b04 	vstr	d0, [r7, #16]
    float radian = static_cast<float>(degree * M_PI / 180.0);
 8023cbe:	a314      	add	r3, pc, #80	; (adr r3, 8023d10 <_ZN4Test7TestImuEv+0x68>)
 8023cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cc4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8023cc8:	f7fc fb7e 	bl	80203c8 <__aeabi_dmul>
 8023ccc:	4603      	mov	r3, r0
 8023cce:	460c      	mov	r4, r1
 8023cd0:	4618      	mov	r0, r3
 8023cd2:	4621      	mov	r1, r4
 8023cd4:	f04f 0200 	mov.w	r2, #0
 8023cd8:	4b0b      	ldr	r3, [pc, #44]	; (8023d08 <_ZN4Test7TestImuEv+0x60>)
 8023cda:	f7fc fc9f 	bl	802061c <__aeabi_ddiv>
 8023cde:	4603      	mov	r3, r0
 8023ce0:	460c      	mov	r4, r1
 8023ce2:	4618      	mov	r0, r3
 8023ce4:	4621      	mov	r1, r4
 8023ce6:	f7fc fe47 	bl	8020978 <__aeabi_d2f>
 8023cea:	4603      	mov	r3, r0
 8023cec:	60fb      	str	r3, [r7, #12]
    iim_42652_->ResetDegreeStackZ();
 8023cee:	687b      	ldr	r3, [r7, #4]
 8023cf0:	685b      	ldr	r3, [r3, #4]
 8023cf2:	4618      	mov	r0, r3
 8023cf4:	f7fd f93d 	bl	8020f72 <_ZN8Iim4265217ResetDegreeStackZEv>
    //logging_radian_buff_ = radian;
    g_radian = radian;
 8023cf8:	4a04      	ldr	r2, [pc, #16]	; (8023d0c <_ZN4Test7TestImuEv+0x64>)
 8023cfa:	68fb      	ldr	r3, [r7, #12]
 8023cfc:	6013      	str	r3, [r2, #0]
}
 8023cfe:	bf00      	nop
 8023d00:	371c      	adds	r7, #28
 8023d02:	46bd      	mov	sp, r7
 8023d04:	bd90      	pop	{r4, r7, pc}
 8023d06:	bf00      	nop
 8023d08:	40668000 	.word	0x40668000
 8023d0c:	20000240 	.word	0x20000240
 8023d10:	54442d18 	.word	0x54442d18
 8023d14:	400921fb 	.word	0x400921fb

08023d18 <_ZN4Test14TestLineSensorEv>:

void Test::TestLineSensor()
{
 8023d18:	b580      	push	{r7, lr}
 8023d1a:	b082      	sub	sp, #8
 8023d1c:	af00      	add	r7, sp, #0
 8023d1e:	6078      	str	r0, [r7, #4]
    line_sensor_->Update();
 8023d20:	687b      	ldr	r3, [r7, #4]
 8023d22:	68db      	ldr	r3, [r3, #12]
 8023d24:	4618      	mov	r0, r3
 8023d26:	f7fd fbe3 	bl	80214f0 <_ZN10LineSensor6UpdateEv>
    line_sensor_->MonitorLineBuff();
 8023d2a:	687b      	ldr	r3, [r7, #4]
 8023d2c:	68db      	ldr	r3, [r3, #12]
 8023d2e:	4618      	mov	r0, r3
 8023d30:	f7fd fd86 	bl	8021840 <_ZN10LineSensor15MonitorLineBuffEv>
    g_line_diff = line_sensor_->LeftRightDifference();
 8023d34:	687b      	ldr	r3, [r7, #4]
 8023d36:	68db      	ldr	r3, [r3, #12]
 8023d38:	4618      	mov	r0, r3
 8023d3a:	f7fd fcc1 	bl	80216c0 <_ZN10LineSensor19LeftRightDifferenceEv>
 8023d3e:	eef0 7a40 	vmov.f32	s15, s0
 8023d42:	4b15      	ldr	r3, [pc, #84]	; (8023d98 <_ZN4Test14TestLineSensorEv+0x80>)
 8023d44:	edc3 7a00 	vstr	s15, [r3]
    g_line_emer = line_sensor_->GetEmergencyStopFlag();
 8023d48:	687b      	ldr	r3, [r7, #4]
 8023d4a:	68db      	ldr	r3, [r3, #12]
 8023d4c:	4618      	mov	r0, r3
 8023d4e:	f7fd fd0d 	bl	802176c <_ZN10LineSensor20GetEmergencyStopFlagEv>
 8023d52:	4603      	mov	r3, r0
 8023d54:	461a      	mov	r2, r3
 8023d56:	4b11      	ldr	r3, [pc, #68]	; (8023d9c <_ZN4Test14TestLineSensorEv+0x84>)
 8023d58:	701a      	strb	r2, [r3, #0]
    g_line_calib = line_sensor_->CheckCalibration();
 8023d5a:	687b      	ldr	r3, [r7, #4]
 8023d5c:	68db      	ldr	r3, [r3, #12]
 8023d5e:	4618      	mov	r0, r3
 8023d60:	f7fd fd12 	bl	8021788 <_ZN10LineSensor16CheckCalibrationEv>
 8023d64:	4603      	mov	r3, r0
 8023d66:	461a      	mov	r2, r3
 8023d68:	4b0d      	ldr	r3, [pc, #52]	; (8023da0 <_ZN4Test14TestLineSensorEv+0x88>)
 8023d6a:	701a      	strb	r2, [r3, #0]
    if(g_line_calib) led_->ColorOrder('X');
 8023d6c:	4b0c      	ldr	r3, [pc, #48]	; (8023da0 <_ZN4Test14TestLineSensorEv+0x88>)
 8023d6e:	781b      	ldrb	r3, [r3, #0]
 8023d70:	2b00      	cmp	r3, #0
 8023d72:	d006      	beq.n	8023d82 <_ZN4Test14TestLineSensorEv+0x6a>
 8023d74:	687b      	ldr	r3, [r7, #4]
 8023d76:	689b      	ldr	r3, [r3, #8]
 8023d78:	2158      	movs	r1, #88	; 0x58
 8023d7a:	4618      	mov	r0, r3
 8023d7c:	f7fd f92c 	bl	8020fd8 <_ZN3Led10ColorOrderEc>
    else led_->ColorOrder('R');
}
 8023d80:	e005      	b.n	8023d8e <_ZN4Test14TestLineSensorEv+0x76>
    else led_->ColorOrder('R');
 8023d82:	687b      	ldr	r3, [r7, #4]
 8023d84:	689b      	ldr	r3, [r3, #8]
 8023d86:	2152      	movs	r1, #82	; 0x52
 8023d88:	4618      	mov	r0, r3
 8023d8a:	f7fd f925 	bl	8020fd8 <_ZN3Led10ColorOrderEc>
}
 8023d8e:	bf00      	nop
 8023d90:	3708      	adds	r7, #8
 8023d92:	46bd      	mov	sp, r7
 8023d94:	bd80      	pop	{r7, pc}
 8023d96:	bf00      	nop
 8023d98:	200004cc 	.word	0x200004cc
 8023d9c:	200004d0 	.word	0x200004d0
 8023da0:	200004d1 	.word	0x200004d1

08023da4 <_ZN4Test14TestSideSensorEv>:

void Test::TestSideSensor()
{
 8023da4:	b580      	push	{r7, lr}
 8023da6:	b082      	sub	sp, #8
 8023da8:	af00      	add	r7, sp, #0
 8023daa:	6078      	str	r0, [r7, #4]
    side_sensor_->Update();
 8023dac:	687b      	ldr	r3, [r7, #4]
 8023dae:	69db      	ldr	r3, [r3, #28]
 8023db0:	4618      	mov	r0, r3
 8023db2:	f7fe ffa9 	bl	8022d08 <_ZN10SideSensor6UpdateEv>
    side_sensor_->Monitor();
 8023db6:	687b      	ldr	r3, [r7, #4]
 8023db8:	69db      	ldr	r3, [r3, #28]
 8023dba:	4618      	mov	r0, r3
 8023dbc:	f7ff f974 	bl	80230a8 <_ZN10SideSensor7MonitorEv>
}
 8023dc0:	bf00      	nop
 8023dc2:	3708      	adds	r7, #8
 8023dc4:	46bd      	mov	sp, r7
 8023dc6:	bd80      	pop	{r7, pc}

08023dc8 <_ZN4Test9TestMotorEv>:

void Test::TestMotor()
{
 8023dc8:	b580      	push	{r7, lr}
 8023dca:	b082      	sub	sp, #8
 8023dcc:	af00      	add	r7, sp, #0
 8023dce:	6078      	str	r0, [r7, #4]
    g_switch_state = rotary_switch_->State();
 8023dd0:	687b      	ldr	r3, [r7, #4]
 8023dd2:	699b      	ldr	r3, [r3, #24]
 8023dd4:	4618      	mov	r0, r3
 8023dd6:	f7fe fe87 	bl	8022ae8 <_ZN12RotarySwitch5StateEv>
 8023dda:	4603      	mov	r3, r0
 8023ddc:	461a      	mov	r2, r3
 8023dde:	4b3c      	ldr	r3, [pc, #240]	; (8023ed0 <_ZN4Test9TestMotorEv+0x108>)
 8023de0:	701a      	strb	r2, [r3, #0]

    switch(g_switch_state)
 8023de2:	4b3b      	ldr	r3, [pc, #236]	; (8023ed0 <_ZN4Test9TestMotorEv+0x108>)
 8023de4:	781b      	ldrb	r3, [r3, #0]
 8023de6:	2b0f      	cmp	r3, #15
 8023de8:	d863      	bhi.n	8023eb2 <_ZN4Test9TestMotorEv+0xea>
 8023dea:	a201      	add	r2, pc, #4	; (adr r2, 8023df0 <_ZN4Test9TestMotorEv+0x28>)
 8023dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023df0:	08023e63 	.word	0x08023e63
 8023df4:	08023e77 	.word	0x08023e77
 8023df8:	08023eb3 	.word	0x08023eb3
 8023dfc:	08023e8b 	.word	0x08023e8b
 8023e00:	08023e9f 	.word	0x08023e9f
 8023e04:	08023eb3 	.word	0x08023eb3
 8023e08:	08023eb3 	.word	0x08023eb3
 8023e0c:	08023eb3 	.word	0x08023eb3
 8023e10:	08023eb3 	.word	0x08023eb3
 8023e14:	08023eb3 	.word	0x08023eb3
 8023e18:	08023eb3 	.word	0x08023eb3
 8023e1c:	08023eb3 	.word	0x08023eb3
 8023e20:	08023e31 	.word	0x08023e31
 8023e24:	08023e39 	.word	0x08023e39
 8023e28:	08023e53 	.word	0x08023e53
 8023e2c:	08023e5b 	.word	0x08023e5b
    {
        case 0x0C: RunVelocityControl();  break;
 8023e30:	6878      	ldr	r0, [r7, #4]
 8023e32:	f000 f915 	bl	8024060 <_ZN4Test18RunVelocityControlEv>
 8023e36:	e046      	b.n	8023ec6 <_ZN4Test9TestMotorEv+0xfe>
        case 0x0D: 
            g_goal_count = 0;
 8023e38:	4b26      	ldr	r3, [pc, #152]	; (8023ed4 <_ZN4Test9TestMotorEv+0x10c>)
 8023e3a:	2200      	movs	r2, #0
 8023e3c:	701a      	strb	r2, [r3, #0]
            motor_->Drive(0, 0);
 8023e3e:	687b      	ldr	r3, [r7, #4]
 8023e40:	695b      	ldr	r3, [r3, #20]
 8023e42:	eddf 0a25 	vldr	s1, [pc, #148]	; 8023ed8 <_ZN4Test9TestMotorEv+0x110>
 8023e46:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8023ed8 <_ZN4Test9TestMotorEv+0x110>
 8023e4a:	4618      	mov	r0, r3
 8023e4c:	f7fe fd00 	bl	8022850 <_ZN5Motor5DriveEff>
            break;
 8023e50:	e039      	b.n	8023ec6 <_ZN4Test9TestMotorEv+0xfe>
        case 0x0E: TestVelocityControl(); break;
 8023e52:	6878      	ldr	r0, [r7, #4]
 8023e54:	f000 f8a0 	bl	8023f98 <_ZN4Test19TestVelocityControlEv>
 8023e58:	e035      	b.n	8023ec6 <_ZN4Test9TestMotorEv+0xfe>
        case 0x0F: TestLineTrace();       break;
 8023e5a:	6878      	ldr	r0, [r7, #4]
 8023e5c:	f000 f842 	bl	8023ee4 <_ZN4Test13TestLineTraceEv>
 8023e60:	e031      	b.n	8023ec6 <_ZN4Test9TestMotorEv+0xfe>
        case 0x00: motor_->Drive(0, 0);   break;
 8023e62:	687b      	ldr	r3, [r7, #4]
 8023e64:	695b      	ldr	r3, [r3, #20]
 8023e66:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8023ed8 <_ZN4Test9TestMotorEv+0x110>
 8023e6a:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8023ed8 <_ZN4Test9TestMotorEv+0x110>
 8023e6e:	4618      	mov	r0, r3
 8023e70:	f7fe fcee 	bl	8022850 <_ZN5Motor5DriveEff>
 8023e74:	e027      	b.n	8023ec6 <_ZN4Test9TestMotorEv+0xfe>
        case 0x01: motor_->Drive(-0.2, 0);  break;
 8023e76:	687b      	ldr	r3, [r7, #4]
 8023e78:	695b      	ldr	r3, [r3, #20]
 8023e7a:	eddf 0a17 	vldr	s1, [pc, #92]	; 8023ed8 <_ZN4Test9TestMotorEv+0x110>
 8023e7e:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8023edc <_ZN4Test9TestMotorEv+0x114>
 8023e82:	4618      	mov	r0, r3
 8023e84:	f7fe fce4 	bl	8022850 <_ZN5Motor5DriveEff>
 8023e88:	e01d      	b.n	8023ec6 <_ZN4Test9TestMotorEv+0xfe>
        case 0x03: motor_->Drive(1.0, 0);   break;
 8023e8a:	687b      	ldr	r3, [r7, #4]
 8023e8c:	695b      	ldr	r3, [r3, #20]
 8023e8e:	eddf 0a12 	vldr	s1, [pc, #72]	; 8023ed8 <_ZN4Test9TestMotorEv+0x110>
 8023e92:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8023e96:	4618      	mov	r0, r3
 8023e98:	f7fe fcda 	bl	8022850 <_ZN5Motor5DriveEff>
 8023e9c:	e013      	b.n	8023ec6 <_ZN4Test9TestMotorEv+0xfe>
        case 0x04: motor_->Drive(0.5, 0.6); break;
 8023e9e:	687b      	ldr	r3, [r7, #4]
 8023ea0:	695b      	ldr	r3, [r3, #20]
 8023ea2:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8023ee0 <_ZN4Test9TestMotorEv+0x118>
 8023ea6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8023eaa:	4618      	mov	r0, r3
 8023eac:	f7fe fcd0 	bl	8022850 <_ZN5Motor5DriveEff>
 8023eb0:	e009      	b.n	8023ec6 <_ZN4Test9TestMotorEv+0xfe>
        default:   motor_->Drive(0, 0);     break;
 8023eb2:	687b      	ldr	r3, [r7, #4]
 8023eb4:	695b      	ldr	r3, [r3, #20]
 8023eb6:	eddf 0a08 	vldr	s1, [pc, #32]	; 8023ed8 <_ZN4Test9TestMotorEv+0x110>
 8023eba:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8023ed8 <_ZN4Test9TestMotorEv+0x110>
 8023ebe:	4618      	mov	r0, r3
 8023ec0:	f7fe fcc6 	bl	8022850 <_ZN5Motor5DriveEff>
 8023ec4:	bf00      	nop
    }
}
 8023ec6:	bf00      	nop
 8023ec8:	3708      	adds	r7, #8
 8023eca:	46bd      	mov	sp, r7
 8023ecc:	bd80      	pop	{r7, pc}
 8023ece:	bf00      	nop
 8023ed0:	200006ec 	.word	0x200006ec
 8023ed4:	2000067a 	.word	0x2000067a
 8023ed8:	00000000 	.word	0x00000000
 8023edc:	be4ccccd 	.word	0xbe4ccccd
 8023ee0:	3f19999a 	.word	0x3f19999a

08023ee4 <_ZN4Test13TestLineTraceEv>:

void Test::TestLineTrace()
{
 8023ee4:	b580      	push	{r7, lr}
 8023ee6:	b084      	sub	sp, #16
 8023ee8:	af00      	add	r7, sp, #0
 8023eea:	6078      	str	r0, [r7, #4]
    if(g_goal_count < 2)
 8023eec:	4b13      	ldr	r3, [pc, #76]	; (8023f3c <_ZN4Test13TestLineTraceEv+0x58>)
 8023eee:	781b      	ldrb	r3, [r3, #0]
 8023ef0:	2b01      	cmp	r3, #1
 8023ef2:	d810      	bhi.n	8023f16 <_ZN4Test13TestLineTraceEv+0x32>
    {
        float rotat = line_trace_->LineTraceOnly();
 8023ef4:	687b      	ldr	r3, [r7, #4]
 8023ef6:	691b      	ldr	r3, [r3, #16]
 8023ef8:	4618      	mov	r0, r3
 8023efa:	f7fd fcd3 	bl	80218a4 <_ZN9LineTrace13LineTraceOnlyEv>
 8023efe:	ed87 0a03 	vstr	s0, [r7, #12]

        motor_->Drive(0, rotat);
 8023f02:	687b      	ldr	r3, [r7, #4]
 8023f04:	695b      	ldr	r3, [r3, #20]
 8023f06:	edd7 0a03 	vldr	s1, [r7, #12]
 8023f0a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8023f40 <_ZN4Test13TestLineTraceEv+0x5c>
 8023f0e:	4618      	mov	r0, r3
 8023f10:	f7fe fc9e 	bl	8022850 <_ZN5Motor5DriveEff>
    else
    {
        led_->ColorOrder('Y');
        motor_->Drive(0 ,0);
    }
}
 8023f14:	e00e      	b.n	8023f34 <_ZN4Test13TestLineTraceEv+0x50>
        led_->ColorOrder('Y');
 8023f16:	687b      	ldr	r3, [r7, #4]
 8023f18:	689b      	ldr	r3, [r3, #8]
 8023f1a:	2159      	movs	r1, #89	; 0x59
 8023f1c:	4618      	mov	r0, r3
 8023f1e:	f7fd f85b 	bl	8020fd8 <_ZN3Led10ColorOrderEc>
        motor_->Drive(0 ,0);
 8023f22:	687b      	ldr	r3, [r7, #4]
 8023f24:	695b      	ldr	r3, [r3, #20]
 8023f26:	eddf 0a06 	vldr	s1, [pc, #24]	; 8023f40 <_ZN4Test13TestLineTraceEv+0x5c>
 8023f2a:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8023f40 <_ZN4Test13TestLineTraceEv+0x5c>
 8023f2e:	4618      	mov	r0, r3
 8023f30:	f7fe fc8e 	bl	8022850 <_ZN5Motor5DriveEff>
}
 8023f34:	bf00      	nop
 8023f36:	3710      	adds	r7, #16
 8023f38:	46bd      	mov	sp, r7
 8023f3a:	bd80      	pop	{r7, pc}
 8023f3c:	2000067a 	.word	0x2000067a
 8023f40:	00000000 	.word	0x00000000

08023f44 <_ZN4Test11TestEncoderEv>:

void Test::TestEncoder()
{
 8023f44:	b580      	push	{r7, lr}
 8023f46:	b082      	sub	sp, #8
 8023f48:	af00      	add	r7, sp, #0
 8023f4a:	6078      	str	r0, [r7, #4]
    encoder_->Update();
 8023f4c:	687b      	ldr	r3, [r7, #4]
 8023f4e:	681b      	ldr	r3, [r3, #0]
 8023f50:	4618      	mov	r0, r3
 8023f52:	f7fc ff2d 	bl	8020db0 <_ZN7Encoder6UpdateEv>
    g_velocity = (encoder_->GetDistance()) / TIM6_PERIOD;
 8023f56:	687b      	ldr	r3, [r7, #4]
 8023f58:	681b      	ldr	r3, [r3, #0]
 8023f5a:	4618      	mov	r0, r3
 8023f5c:	f7fc ffba 	bl	8020ed4 <_ZN7Encoder11GetDistanceEv>
 8023f60:	eef0 6a40 	vmov.f32	s13, s0
 8023f64:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 8023f68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8023f6c:	4b08      	ldr	r3, [pc, #32]	; (8023f90 <_ZN4Test11TestEncoderEv+0x4c>)
 8023f6e:	edc3 7a00 	vstr	s15, [r3]
    g_angular_velocity = encoder_->AngularVelocity();
 8023f72:	687b      	ldr	r3, [r7, #4]
 8023f74:	681b      	ldr	r3, [r3, #0]
 8023f76:	4618      	mov	r0, r3
 8023f78:	f7fc ffca 	bl	8020f10 <_ZN7Encoder15AngularVelocityEv>
 8023f7c:	eef0 7a40 	vmov.f32	s15, s0
 8023f80:	4b04      	ldr	r3, [pc, #16]	; (8023f94 <_ZN4Test11TestEncoderEv+0x50>)
 8023f82:	edc3 7a00 	vstr	s15, [r3]
}
 8023f86:	bf00      	nop
 8023f88:	3708      	adds	r7, #8
 8023f8a:	46bd      	mov	sp, r7
 8023f8c:	bd80      	pop	{r7, pc}
 8023f8e:	bf00      	nop
 8023f90:	20000244 	.word	0x20000244
 8023f94:	20000248 	.word	0x20000248

08023f98 <_ZN4Test19TestVelocityControlEv>:

void Test::TestVelocityControl()
{
 8023f98:	b580      	push	{r7, lr}
 8023f9a:	b084      	sub	sp, #16
 8023f9c:	af00      	add	r7, sp, #0
 8023f9e:	6078      	str	r0, [r7, #4]
    float trans = velocity_control_->DeterminePidGain(1.0);
 8023fa0:	687b      	ldr	r3, [r7, #4]
 8023fa2:	6a1b      	ldr	r3, [r3, #32]
 8023fa4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8023fa8:	4618      	mov	r0, r3
 8023faa:	f000 f8da 	bl	8024162 <_ZN15VelocityControl16DeterminePidGainEf>
 8023fae:	ed87 0a03 	vstr	s0, [r7, #12]

    motor_->Drive(trans, 0);
 8023fb2:	687b      	ldr	r3, [r7, #4]
 8023fb4:	695b      	ldr	r3, [r3, #20]
 8023fb6:	eddf 0a05 	vldr	s1, [pc, #20]	; 8023fcc <_ZN4Test19TestVelocityControlEv+0x34>
 8023fba:	ed97 0a03 	vldr	s0, [r7, #12]
 8023fbe:	4618      	mov	r0, r3
 8023fc0:	f7fe fc46 	bl	8022850 <_ZN5Motor5DriveEff>
}
 8023fc4:	bf00      	nop
 8023fc6:	3710      	adds	r7, #16
 8023fc8:	46bd      	mov	sp, r7
 8023fca:	bd80      	pop	{r7, pc}
 8023fcc:	00000000 	.word	0x00000000

08023fd0 <_ZN4Test10MonitorLogEv>:

void Test::MonitorLog()
{
 8023fd0:	b590      	push	{r4, r7, lr}
 8023fd2:	b085      	sub	sp, #20
 8023fd4:	af00      	add	r7, sp, #0
 8023fd6:	6078      	str	r0, [r7, #4]
    float distance = encoder_->GetDistanceStack();
 8023fd8:	687b      	ldr	r3, [r7, #4]
 8023fda:	681b      	ldr	r3, [r3, #0]
 8023fdc:	4618      	mov	r0, r3
 8023fde:	f7fc ff88 	bl	8020ef2 <_ZN7Encoder16GetDistanceStackEv>
 8023fe2:	ed87 0a03 	vstr	s0, [r7, #12]

    if(distance < LOGGING_CONST_DISTANCE) return;
 8023fe6:	edd7 7a03 	vldr	s15, [r7, #12]
 8023fea:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8023fee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023ff6:	d428      	bmi.n	802404a <_ZN4Test10MonitorLogEv+0x7a>
    encoder_->ResetDistanceStack();
 8023ff8:	687b      	ldr	r3, [r7, #4]
 8023ffa:	681b      	ldr	r3, [r3, #0]
 8023ffc:	4618      	mov	r0, r3
 8023ffe:	f7fc ff5b 	bl	8020eb8 <_ZN7Encoder18ResetDistanceStackEv>

    static uint16_t log_index = 0;   // Count up when interrupt.

    g_distance_log[log_index] = distance;
 8024002:	4b14      	ldr	r3, [pc, #80]	; (8024054 <_ZN4Test10MonitorLogEv+0x84>)
 8024004:	881b      	ldrh	r3, [r3, #0]
 8024006:	4a14      	ldr	r2, [pc, #80]	; (8024058 <_ZN4Test10MonitorLogEv+0x88>)
 8024008:	009b      	lsls	r3, r3, #2
 802400a:	4413      	add	r3, r2
 802400c:	68fa      	ldr	r2, [r7, #12]
 802400e:	601a      	str	r2, [r3, #0]
    g_angular_log[log_index] = encoder_->AngularVelocity();
 8024010:	687b      	ldr	r3, [r7, #4]
 8024012:	681a      	ldr	r2, [r3, #0]
 8024014:	4b0f      	ldr	r3, [pc, #60]	; (8024054 <_ZN4Test10MonitorLogEv+0x84>)
 8024016:	881b      	ldrh	r3, [r3, #0]
 8024018:	461c      	mov	r4, r3
 802401a:	4610      	mov	r0, r2
 802401c:	f7fc ff78 	bl	8020f10 <_ZN7Encoder15AngularVelocityEv>
 8024020:	eef0 7a40 	vmov.f32	s15, s0
 8024024:	4a0d      	ldr	r2, [pc, #52]	; (802405c <_ZN4Test10MonitorLogEv+0x8c>)
 8024026:	00a3      	lsls	r3, r4, #2
 8024028:	4413      	add	r3, r2
 802402a:	edc3 7a00 	vstr	s15, [r3]

    log_index++;
 802402e:	4b09      	ldr	r3, [pc, #36]	; (8024054 <_ZN4Test10MonitorLogEv+0x84>)
 8024030:	881b      	ldrh	r3, [r3, #0]
 8024032:	3301      	adds	r3, #1
 8024034:	b29a      	uxth	r2, r3
 8024036:	4b07      	ldr	r3, [pc, #28]	; (8024054 <_ZN4Test10MonitorLogEv+0x84>)
 8024038:	801a      	strh	r2, [r3, #0]
    if(log_index >= MAX_LOG_INDEX) log_index = 0;
 802403a:	4b06      	ldr	r3, [pc, #24]	; (8024054 <_ZN4Test10MonitorLogEv+0x84>)
 802403c:	881b      	ldrh	r3, [r3, #0]
 802403e:	2b4f      	cmp	r3, #79	; 0x4f
 8024040:	d904      	bls.n	802404c <_ZN4Test10MonitorLogEv+0x7c>
 8024042:	4b04      	ldr	r3, [pc, #16]	; (8024054 <_ZN4Test10MonitorLogEv+0x84>)
 8024044:	2200      	movs	r2, #0
 8024046:	801a      	strh	r2, [r3, #0]
 8024048:	e000      	b.n	802404c <_ZN4Test10MonitorLogEv+0x7c>
    if(distance < LOGGING_CONST_DISTANCE) return;
 802404a:	bf00      	nop
}
 802404c:	3714      	adds	r7, #20
 802404e:	46bd      	mov	sp, r7
 8024050:	bd90      	pop	{r4, r7, pc}
 8024052:	bf00      	nop
 8024054:	200006f4 	.word	0x200006f4
 8024058:	2000024c 	.word	0x2000024c
 802405c:	2000038c 	.word	0x2000038c

08024060 <_ZN4Test18RunVelocityControlEv>:

void Test::RunVelocityControl()
{
 8024060:	b580      	push	{r7, lr}
 8024062:	b086      	sub	sp, #24
 8024064:	af00      	add	r7, sp, #0
 8024066:	6078      	str	r0, [r7, #4]
    static uint8_t stop_count = 0;
    bool emergency = line_sensor_->GetEmergencyStopFlag();
 8024068:	687b      	ldr	r3, [r7, #4]
 802406a:	68db      	ldr	r3, [r3, #12]
 802406c:	4618      	mov	r0, r3
 802406e:	f7fd fb7d 	bl	802176c <_ZN10LineSensor20GetEmergencyStopFlagEv>
 8024072:	4603      	mov	r3, r0
 8024074:	75fb      	strb	r3, [r7, #23]

    if(emergency)
 8024076:	7dfb      	ldrb	r3, [r7, #23]
 8024078:	2b00      	cmp	r3, #0
 802407a:	d006      	beq.n	802408a <_ZN4Test18RunVelocityControlEv+0x2a>
    {
        stop_count++;
 802407c:	4b2c      	ldr	r3, [pc, #176]	; (8024130 <_ZN4Test18RunVelocityControlEv+0xd0>)
 802407e:	781b      	ldrb	r3, [r3, #0]
 8024080:	3301      	adds	r3, #1
 8024082:	b2da      	uxtb	r2, r3
 8024084:	4b2a      	ldr	r3, [pc, #168]	; (8024130 <_ZN4Test18RunVelocityControlEv+0xd0>)
 8024086:	701a      	strb	r2, [r3, #0]
 8024088:	e002      	b.n	8024090 <_ZN4Test18RunVelocityControlEv+0x30>
    }
    else stop_count = 0;
 802408a:	4b29      	ldr	r3, [pc, #164]	; (8024130 <_ZN4Test18RunVelocityControlEv+0xd0>)
 802408c:	2200      	movs	r2, #0
 802408e:	701a      	strb	r2, [r3, #0]

    if(stop_count >= 5)
 8024090:	4b27      	ldr	r3, [pc, #156]	; (8024130 <_ZN4Test18RunVelocityControlEv+0xd0>)
 8024092:	781b      	ldrb	r3, [r3, #0]
 8024094:	2b04      	cmp	r3, #4
 8024096:	d912      	bls.n	80240be <_ZN4Test18RunVelocityControlEv+0x5e>
    {
        motor_->Drive(0, 0);
 8024098:	687b      	ldr	r3, [r7, #4]
 802409a:	695b      	ldr	r3, [r3, #20]
 802409c:	eddf 0a25 	vldr	s1, [pc, #148]	; 8024134 <_ZN4Test18RunVelocityControlEv+0xd4>
 80240a0:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8024134 <_ZN4Test18RunVelocityControlEv+0xd4>
 80240a4:	4618      	mov	r0, r3
 80240a6:	f7fe fbd3 	bl	8022850 <_ZN5Motor5DriveEff>

        led_->ColorOrder('C');
 80240aa:	687b      	ldr	r3, [r7, #4]
 80240ac:	689b      	ldr	r3, [r3, #8]
 80240ae:	2143      	movs	r1, #67	; 0x43
 80240b0:	4618      	mov	r0, r3
 80240b2:	f7fc ff91 	bl	8020fd8 <_ZN3Led10ColorOrderEc>

        g_goal_count = 2;
 80240b6:	4b20      	ldr	r3, [pc, #128]	; (8024138 <_ZN4Test18RunVelocityControlEv+0xd8>)
 80240b8:	2202      	movs	r2, #2
 80240ba:	701a      	strb	r2, [r3, #0]

        return;
 80240bc:	e035      	b.n	802412a <_ZN4Test18RunVelocityControlEv+0xca>
    }

    if(g_goal_count < 2)
 80240be:	4b1e      	ldr	r3, [pc, #120]	; (8024138 <_ZN4Test18RunVelocityControlEv+0xd8>)
 80240c0:	781b      	ldrb	r3, [r3, #0]
 80240c2:	2b01      	cmp	r3, #1
 80240c4:	d819      	bhi.n	80240fa <_ZN4Test18RunVelocityControlEv+0x9a>
    {
        float trans = velocity_control_->DeterminePidGain(1.0);
 80240c6:	687b      	ldr	r3, [r7, #4]
 80240c8:	6a1b      	ldr	r3, [r3, #32]
 80240ca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80240ce:	4618      	mov	r0, r3
 80240d0:	f000 f847 	bl	8024162 <_ZN15VelocityControl16DeterminePidGainEf>
 80240d4:	ed87 0a03 	vstr	s0, [r7, #12]
        float rotat = line_trace_->LineTraceOnly();
 80240d8:	687b      	ldr	r3, [r7, #4]
 80240da:	691b      	ldr	r3, [r3, #16]
 80240dc:	4618      	mov	r0, r3
 80240de:	f7fd fbe1 	bl	80218a4 <_ZN9LineTrace13LineTraceOnlyEv>
 80240e2:	ed87 0a02 	vstr	s0, [r7, #8]

        motor_->Drive(trans, rotat);
 80240e6:	687b      	ldr	r3, [r7, #4]
 80240e8:	695b      	ldr	r3, [r3, #20]
 80240ea:	edd7 0a02 	vldr	s1, [r7, #8]
 80240ee:	ed97 0a03 	vldr	s0, [r7, #12]
 80240f2:	4618      	mov	r0, r3
 80240f4:	f7fe fbac 	bl	8022850 <_ZN5Motor5DriveEff>
 80240f8:	e017      	b.n	802412a <_ZN4Test18RunVelocityControlEv+0xca>
    }
    else
    {
        float trans = velocity_control_->DeterminePidGain(0.0);
 80240fa:	687b      	ldr	r3, [r7, #4]
 80240fc:	6a1b      	ldr	r3, [r3, #32]
 80240fe:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8024134 <_ZN4Test18RunVelocityControlEv+0xd4>
 8024102:	4618      	mov	r0, r3
 8024104:	f000 f82d 	bl	8024162 <_ZN15VelocityControl16DeterminePidGainEf>
 8024108:	ed87 0a04 	vstr	s0, [r7, #16]

        motor_->Drive(trans, 0);
 802410c:	687b      	ldr	r3, [r7, #4]
 802410e:	695b      	ldr	r3, [r3, #20]
 8024110:	eddf 0a08 	vldr	s1, [pc, #32]	; 8024134 <_ZN4Test18RunVelocityControlEv+0xd4>
 8024114:	ed97 0a04 	vldr	s0, [r7, #16]
 8024118:	4618      	mov	r0, r3
 802411a:	f7fe fb99 	bl	8022850 <_ZN5Motor5DriveEff>

        led_->ColorOrder('M');
 802411e:	687b      	ldr	r3, [r7, #4]
 8024120:	689b      	ldr	r3, [r3, #8]
 8024122:	214d      	movs	r1, #77	; 0x4d
 8024124:	4618      	mov	r0, r3
 8024126:	f7fc ff57 	bl	8020fd8 <_ZN3Led10ColorOrderEc>
    }
}
 802412a:	3718      	adds	r7, #24
 802412c:	46bd      	mov	sp, r7
 802412e:	bd80      	pop	{r7, pc}
 8024130:	200006f6 	.word	0x200006f6
 8024134:	00000000 	.word	0x00000000
 8024138:	2000067a 	.word	0x2000067a

0802413c <_ZN15VelocityControlC1EP7Encoder>:
#include "velocity_control.hpp"
#include "declare_extern.h"

VelocityControl::VelocityControl(Encoder *encoder) : integral_error_(0)
 802413c:	b480      	push	{r7}
 802413e:	b083      	sub	sp, #12
 8024140:	af00      	add	r7, sp, #0
 8024142:	6078      	str	r0, [r7, #4]
 8024144:	6039      	str	r1, [r7, #0]
 8024146:	687b      	ldr	r3, [r7, #4]
 8024148:	f04f 0200 	mov.w	r2, #0
 802414c:	601a      	str	r2, [r3, #0]
{
    encoder_ = encoder;
 802414e:	687b      	ldr	r3, [r7, #4]
 8024150:	683a      	ldr	r2, [r7, #0]
 8024152:	605a      	str	r2, [r3, #4]
}
 8024154:	687b      	ldr	r3, [r7, #4]
 8024156:	4618      	mov	r0, r3
 8024158:	370c      	adds	r7, #12
 802415a:	46bd      	mov	sp, r7
 802415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024160:	4770      	bx	lr

08024162 <_ZN15VelocityControl16DeterminePidGainEf>:

float VelocityControl::DeterminePidGain(float target_velocity)
{
 8024162:	b580      	push	{r7, lr}
 8024164:	b086      	sub	sp, #24
 8024166:	af00      	add	r7, sp, #0
 8024168:	6078      	str	r0, [r7, #4]
 802416a:	ed87 0a00 	vstr	s0, [r7]
    float p_gain = 0, i_gain = 0, d_gain = 0;
 802416e:	f04f 0300 	mov.w	r3, #0
 8024172:	617b      	str	r3, [r7, #20]
 8024174:	f04f 0300 	mov.w	r3, #0
 8024178:	613b      	str	r3, [r7, #16]
 802417a:	f04f 0300 	mov.w	r3, #0
 802417e:	60fb      	str	r3, [r7, #12]

    if(target_velocity < MAX_VELOCITY)
 8024180:	edd7 7a00 	vldr	s15, [r7]
 8024184:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8024188:	eef4 7ac7 	vcmpe.f32	s15, s14
 802418c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024190:	d509      	bpl.n	80241a6 <_ZN15VelocityControl16DeterminePidGainEf+0x44>
    {
        p_gain = VELOCITY_P_GAIN;
 8024192:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8024196:	617b      	str	r3, [r7, #20]
        i_gain = VELOCITY_I_GAIN;
 8024198:	f04f 0300 	mov.w	r3, #0
 802419c:	613b      	str	r3, [r7, #16]
        d_gain = VELOCITY_D_GAIN;
 802419e:	f04f 0300 	mov.w	r3, #0
 80241a2:	60fb      	str	r3, [r7, #12]
 80241a4:	e008      	b.n	80241b8 <_ZN15VelocityControl16DeterminePidGainEf+0x56>
    }
    else // Error handler
    {
        p_gain = 0;
 80241a6:	f04f 0300 	mov.w	r3, #0
 80241aa:	617b      	str	r3, [r7, #20]
        i_gain = 0;
 80241ac:	f04f 0300 	mov.w	r3, #0
 80241b0:	613b      	str	r3, [r7, #16]
        d_gain = 0;
 80241b2:	f04f 0300 	mov.w	r3, #0
 80241b6:	60fb      	str	r3, [r7, #12]
    }

    return PidControl(target_velocity, p_gain, i_gain, d_gain);
 80241b8:	edd7 1a03 	vldr	s3, [r7, #12]
 80241bc:	ed97 1a04 	vldr	s2, [r7, #16]
 80241c0:	edd7 0a05 	vldr	s1, [r7, #20]
 80241c4:	ed97 0a00 	vldr	s0, [r7]
 80241c8:	6878      	ldr	r0, [r7, #4]
 80241ca:	f000 f809 	bl	80241e0 <_ZN15VelocityControl10PidControlEffff>
 80241ce:	eef0 7a40 	vmov.f32	s15, s0
}
 80241d2:	eeb0 0a67 	vmov.f32	s0, s15
 80241d6:	3718      	adds	r7, #24
 80241d8:	46bd      	mov	sp, r7
 80241da:	bd80      	pop	{r7, pc}
 80241dc:	0000      	movs	r0, r0
	...

080241e0 <_ZN15VelocityControl10PidControlEffff>:

float VelocityControl::PidControl(float target, float p_gain, float i_gain, float d_gain)
{
 80241e0:	b5b0      	push	{r4, r5, r7, lr}
 80241e2:	b08e      	sub	sp, #56	; 0x38
 80241e4:	af00      	add	r7, sp, #0
 80241e6:	6178      	str	r0, [r7, #20]
 80241e8:	ed87 0a04 	vstr	s0, [r7, #16]
 80241ec:	edc7 0a03 	vstr	s1, [r7, #12]
 80241f0:	ed87 1a02 	vstr	s2, [r7, #8]
 80241f4:	edc7 1a01 	vstr	s3, [r7, #4]
    float current = encoder_->GetDistance() / TIM6_PERIOD; // [mm/ms]
 80241f8:	697b      	ldr	r3, [r7, #20]
 80241fa:	685b      	ldr	r3, [r3, #4]
 80241fc:	4618      	mov	r0, r3
 80241fe:	f7fc fe69 	bl	8020ed4 <_ZN7Encoder11GetDistanceEv>
 8024202:	eef0 6a40 	vmov.f32	s13, s0
 8024206:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 802420a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802420e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    static float pre_filter = 0.0;
    float filter = pre_filter * (1.0 - VELOCITY_LPF_RATIO) + (current * VELOCITY_LPF_RATIO);
 8024212:	4b71      	ldr	r3, [pc, #452]	; (80243d8 <_ZN15VelocityControl10PidControlEffff+0x1f8>)
 8024214:	681b      	ldr	r3, [r3, #0]
 8024216:	4618      	mov	r0, r3
 8024218:	f7fc f87e 	bl	8020318 <__aeabi_f2d>
 802421c:	a368      	add	r3, pc, #416	; (adr r3, 80243c0 <_ZN15VelocityControl10PidControlEffff+0x1e0>)
 802421e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024222:	f7fc f8d1 	bl	80203c8 <__aeabi_dmul>
 8024226:	4603      	mov	r3, r0
 8024228:	460c      	mov	r4, r1
 802422a:	4625      	mov	r5, r4
 802422c:	461c      	mov	r4, r3
 802422e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8024230:	f7fc f872 	bl	8020318 <__aeabi_f2d>
 8024234:	a364      	add	r3, pc, #400	; (adr r3, 80243c8 <_ZN15VelocityControl10PidControlEffff+0x1e8>)
 8024236:	e9d3 2300 	ldrd	r2, r3, [r3]
 802423a:	f7fc f8c5 	bl	80203c8 <__aeabi_dmul>
 802423e:	4602      	mov	r2, r0
 8024240:	460b      	mov	r3, r1
 8024242:	4620      	mov	r0, r4
 8024244:	4629      	mov	r1, r5
 8024246:	f7fb ff09 	bl	802005c <__adddf3>
 802424a:	4603      	mov	r3, r0
 802424c:	460c      	mov	r4, r1
 802424e:	4618      	mov	r0, r3
 8024250:	4621      	mov	r1, r4
 8024252:	f7fc fb91 	bl	8020978 <__aeabi_d2f>
 8024256:	4603      	mov	r3, r0
 8024258:	633b      	str	r3, [r7, #48]	; 0x30
    pre_filter = filter;
 802425a:	4a5f      	ldr	r2, [pc, #380]	; (80243d8 <_ZN15VelocityControl10PidControlEffff+0x1f8>)
 802425c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802425e:	6013      	str	r3, [r2, #0]

    float error = target - filter;
 8024260:	ed97 7a04 	vldr	s14, [r7, #16]
 8024264:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8024268:	ee77 7a67 	vsub.f32	s15, s14, s15
 802426c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    static float pre_error = error;
 8024270:	4b5a      	ldr	r3, [pc, #360]	; (80243dc <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8024272:	781b      	ldrb	r3, [r3, #0]
 8024274:	f3bf 8f5b 	dmb	ish
 8024278:	b2db      	uxtb	r3, r3
 802427a:	f003 0301 	and.w	r3, r3, #1
 802427e:	2b00      	cmp	r3, #0
 8024280:	bf0c      	ite	eq
 8024282:	2301      	moveq	r3, #1
 8024284:	2300      	movne	r3, #0
 8024286:	b2db      	uxtb	r3, r3
 8024288:	2b00      	cmp	r3, #0
 802428a:	d010      	beq.n	80242ae <_ZN15VelocityControl10PidControlEffff+0xce>
 802428c:	4853      	ldr	r0, [pc, #332]	; (80243dc <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 802428e:	f003 fa69 	bl	8027764 <__cxa_guard_acquire>
 8024292:	4603      	mov	r3, r0
 8024294:	2b00      	cmp	r3, #0
 8024296:	bf14      	ite	ne
 8024298:	2301      	movne	r3, #1
 802429a:	2300      	moveq	r3, #0
 802429c:	b2db      	uxtb	r3, r3
 802429e:	2b00      	cmp	r3, #0
 80242a0:	d005      	beq.n	80242ae <_ZN15VelocityControl10PidControlEffff+0xce>
 80242a2:	4a4f      	ldr	r2, [pc, #316]	; (80243e0 <_ZN15VelocityControl10PidControlEffff+0x200>)
 80242a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80242a6:	6013      	str	r3, [r2, #0]
 80242a8:	484c      	ldr	r0, [pc, #304]	; (80243dc <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 80242aa:	f003 fa67 	bl	802777c <__cxa_guard_release>

    float differential_error = (error - pre_error) / TIM6_PERIOD_S;
 80242ae:	4b4c      	ldr	r3, [pc, #304]	; (80243e0 <_ZN15VelocityControl10PidControlEffff+0x200>)
 80242b0:	edd3 7a00 	vldr	s15, [r3]
 80242b4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80242b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80242bc:	ee17 0a90 	vmov	r0, s15
 80242c0:	f7fc f82a 	bl	8020318 <__aeabi_f2d>
 80242c4:	a342      	add	r3, pc, #264	; (adr r3, 80243d0 <_ZN15VelocityControl10PidControlEffff+0x1f0>)
 80242c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80242ca:	f7fc f9a7 	bl	802061c <__aeabi_ddiv>
 80242ce:	4603      	mov	r3, r0
 80242d0:	460c      	mov	r4, r1
 80242d2:	4618      	mov	r0, r3
 80242d4:	4621      	mov	r1, r4
 80242d6:	f7fc fb4f 	bl	8020978 <__aeabi_d2f>
 80242da:	4603      	mov	r3, r0
 80242dc:	62bb      	str	r3, [r7, #40]	; 0x28
    float integral_error = (error + pre_error) / 2.0 * TIM6_PERIOD_S;
 80242de:	4b40      	ldr	r3, [pc, #256]	; (80243e0 <_ZN15VelocityControl10PidControlEffff+0x200>)
 80242e0:	ed93 7a00 	vldr	s14, [r3]
 80242e4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80242e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80242ec:	ee17 0a90 	vmov	r0, s15
 80242f0:	f7fc f812 	bl	8020318 <__aeabi_f2d>
 80242f4:	f04f 0200 	mov.w	r2, #0
 80242f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80242fc:	f7fc f98e 	bl	802061c <__aeabi_ddiv>
 8024300:	4603      	mov	r3, r0
 8024302:	460c      	mov	r4, r1
 8024304:	4618      	mov	r0, r3
 8024306:	4621      	mov	r1, r4
 8024308:	a331      	add	r3, pc, #196	; (adr r3, 80243d0 <_ZN15VelocityControl10PidControlEffff+0x1f0>)
 802430a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802430e:	f7fc f85b 	bl	80203c8 <__aeabi_dmul>
 8024312:	4603      	mov	r3, r0
 8024314:	460c      	mov	r4, r1
 8024316:	4618      	mov	r0, r3
 8024318:	4621      	mov	r1, r4
 802431a:	f7fc fb2d 	bl	8020978 <__aeabi_d2f>
 802431e:	4603      	mov	r3, r0
 8024320:	627b      	str	r3, [r7, #36]	; 0x24
    SetIntegralError(integral_error);
 8024322:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8024326:	6978      	ldr	r0, [r7, #20]
 8024328:	f000 f870 	bl	802440c <_ZN15VelocityControl16SetIntegralErrorEf>
    pre_error = error;
 802432c:	4a2c      	ldr	r2, [pc, #176]	; (80243e0 <_ZN15VelocityControl10PidControlEffff+0x200>)
 802432e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024330:	6013      	str	r3, [r2, #0]

    float p = p_gain * error;
 8024332:	ed97 7a03 	vldr	s14, [r7, #12]
 8024336:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 802433a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802433e:	edc7 7a08 	vstr	s15, [r7, #32]
    float d = d_gain * differential_error;
 8024342:	ed97 7a01 	vldr	s14, [r7, #4]
 8024346:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 802434a:	ee67 7a27 	vmul.f32	s15, s14, s15
 802434e:	edc7 7a07 	vstr	s15, [r7, #28]
    float i = i_gain * integral_error_;
 8024352:	697b      	ldr	r3, [r7, #20]
 8024354:	edd3 7a00 	vldr	s15, [r3]
 8024358:	ed97 7a02 	vldr	s14, [r7, #8]
 802435c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8024360:	edc7 7a06 	vstr	s15, [r7, #24]

#ifdef DEBUG_MODE
    g_target_velocity  = target;
 8024364:	4a1f      	ldr	r2, [pc, #124]	; (80243e4 <_ZN15VelocityControl10PidControlEffff+0x204>)
 8024366:	693b      	ldr	r3, [r7, #16]
 8024368:	6013      	str	r3, [r2, #0]
    g_current_velocity = current;
 802436a:	4a1f      	ldr	r2, [pc, #124]	; (80243e8 <_ZN15VelocityControl10PidControlEffff+0x208>)
 802436c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802436e:	6013      	str	r3, [r2, #0]
    g_filter_velocity  = filter;
 8024370:	4a1e      	ldr	r2, [pc, #120]	; (80243ec <_ZN15VelocityControl10PidControlEffff+0x20c>)
 8024372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024374:	6013      	str	r3, [r2, #0]
    g_velocity_error   = error;
 8024376:	4a1e      	ldr	r2, [pc, #120]	; (80243f0 <_ZN15VelocityControl10PidControlEffff+0x210>)
 8024378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802437a:	6013      	str	r3, [r2, #0]
    g_velocity_p = p;       g_velocity_d = d;       g_velocity_i = i;
 802437c:	4a1d      	ldr	r2, [pc, #116]	; (80243f4 <_ZN15VelocityControl10PidControlEffff+0x214>)
 802437e:	6a3b      	ldr	r3, [r7, #32]
 8024380:	6013      	str	r3, [r2, #0]
 8024382:	4a1d      	ldr	r2, [pc, #116]	; (80243f8 <_ZN15VelocityControl10PidControlEffff+0x218>)
 8024384:	69fb      	ldr	r3, [r7, #28]
 8024386:	6013      	str	r3, [r2, #0]
 8024388:	4a1c      	ldr	r2, [pc, #112]	; (80243fc <_ZN15VelocityControl10PidControlEffff+0x21c>)
 802438a:	69bb      	ldr	r3, [r7, #24]
 802438c:	6013      	str	r3, [r2, #0]
    g_velocity_p_gain = p;  g_velocity_d_gain = p;  g_velocity_i_gain = p;
 802438e:	4a1c      	ldr	r2, [pc, #112]	; (8024400 <_ZN15VelocityControl10PidControlEffff+0x220>)
 8024390:	6a3b      	ldr	r3, [r7, #32]
 8024392:	6013      	str	r3, [r2, #0]
 8024394:	4a1b      	ldr	r2, [pc, #108]	; (8024404 <_ZN15VelocityControl10PidControlEffff+0x224>)
 8024396:	6a3b      	ldr	r3, [r7, #32]
 8024398:	6013      	str	r3, [r2, #0]
 802439a:	4a1b      	ldr	r2, [pc, #108]	; (8024408 <_ZN15VelocityControl10PidControlEffff+0x228>)
 802439c:	6a3b      	ldr	r3, [r7, #32]
 802439e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    return p + d + i;
 80243a0:	ed97 7a08 	vldr	s14, [r7, #32]
 80243a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80243a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80243ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80243b0:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80243b4:	eeb0 0a67 	vmov.f32	s0, s15
 80243b8:	3738      	adds	r7, #56	; 0x38
 80243ba:	46bd      	mov	sp, r7
 80243bc:	bdb0      	pop	{r4, r5, r7, pc}
 80243be:	bf00      	nop
 80243c0:	33333334 	.word	0x33333334
 80243c4:	3fd33333 	.word	0x3fd33333
 80243c8:	66666666 	.word	0x66666666
 80243cc:	3fe66666 	.word	0x3fe66666
 80243d0:	47ae147b 	.word	0x47ae147b
 80243d4:	3f547ae1 	.word	0x3f547ae1
 80243d8:	200006f8 	.word	0x200006f8
 80243dc:	20000700 	.word	0x20000700
 80243e0:	200006fc 	.word	0x200006fc
 80243e4:	200006b8 	.word	0x200006b8
 80243e8:	200006bc 	.word	0x200006bc
 80243ec:	200006c0 	.word	0x200006c0
 80243f0:	200006c4 	.word	0x200006c4
 80243f4:	200006c8 	.word	0x200006c8
 80243f8:	200006d0 	.word	0x200006d0
 80243fc:	200006cc 	.word	0x200006cc
 8024400:	200006d4 	.word	0x200006d4
 8024404:	200006dc 	.word	0x200006dc
 8024408:	200006d8 	.word	0x200006d8

0802440c <_ZN15VelocityControl16SetIntegralErrorEf>:

void VelocityControl::SetIntegralError(float integral_error)
{
 802440c:	b480      	push	{r7}
 802440e:	b083      	sub	sp, #12
 8024410:	af00      	add	r7, sp, #0
 8024412:	6078      	str	r0, [r7, #4]
 8024414:	ed87 0a00 	vstr	s0, [r7]
    integral_error_ += integral_error;
 8024418:	687b      	ldr	r3, [r7, #4]
 802441a:	ed93 7a00 	vldr	s14, [r3]
 802441e:	edd7 7a00 	vldr	s15, [r7]
 8024422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024426:	687b      	ldr	r3, [r7, #4]
 8024428:	edc3 7a00 	vstr	s15, [r3]
}
 802442c:	bf00      	nop
 802442e:	370c      	adds	r7, #12
 8024430:	46bd      	mov	sp, r7
 8024432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024436:	4770      	bx	lr

08024438 <Init>:
    &velocity_control
);
#endif // TEST_MODE

void Init()
{
 8024438:	b580      	push	{r7, lr}
 802443a:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Init();
#else // TEST_MODE
    test.Init();
 802443c:	4802      	ldr	r0, [pc, #8]	; (8024448 <Init+0x10>)
 802443e:	f7ff fbb7 	bl	8023bb0 <_ZN4Test4InitEv>
#endif // TEST_MODE
}
 8024442:	bf00      	nop
 8024444:	bd80      	pop	{r7, pc}
 8024446:	bf00      	nop
 8024448:	2001146c 	.word	0x2001146c

0802444c <InterruptTim7>:

void InterruptTim7()
{
 802444c:	b580      	push	{r7, lr}
 802444e:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Timer7();
#else // TEST_MODE
    test.Timer7();
 8024450:	4804      	ldr	r0, [pc, #16]	; (8024464 <InterruptTim7+0x18>)
 8024452:	f7ff fbff 	bl	8023c54 <_ZN4Test6Timer7Ev>
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim7++;
 8024456:	4b04      	ldr	r3, [pc, #16]	; (8024468 <InterruptTim7+0x1c>)
 8024458:	681b      	ldr	r3, [r3, #0]
 802445a:	3301      	adds	r3, #1
 802445c:	4a02      	ldr	r2, [pc, #8]	; (8024468 <InterruptTim7+0x1c>)
 802445e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8024460:	bf00      	nop
 8024462:	bd80      	pop	{r7, pc}
 8024464:	2001146c 	.word	0x2001146c
 8024468:	200006e0 	.word	0x200006e0

0802446c <InterruptTim6>:

void InterruptTim6()
{
 802446c:	b580      	push	{r7, lr}
 802446e:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.RunMode();
#else // TEST_MODE
    test.Timer6();
 8024470:	4804      	ldr	r0, [pc, #16]	; (8024484 <InterruptTim6+0x18>)
 8024472:	f7ff fbfc 	bl	8023c6e <_ZN4Test6Timer6Ev>
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim6++;
 8024476:	4b04      	ldr	r3, [pc, #16]	; (8024488 <InterruptTim6+0x1c>)
 8024478:	681b      	ldr	r3, [r3, #0]
 802447a:	3301      	adds	r3, #1
 802447c:	4a02      	ldr	r2, [pc, #8]	; (8024488 <InterruptTim6+0x1c>)
 802447e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8024480:	bf00      	nop
 8024482:	bd80      	pop	{r7, pc}
 8024484:	2001146c 	.word	0x2001146c
 8024488:	200006e4 	.word	0x200006e4

0802448c <InterruptTim2>:

void InterruptTim2()
{
 802448c:	b480      	push	{r7}
 802448e:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Timer2();
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim2++;
 8024490:	4b04      	ldr	r3, [pc, #16]	; (80244a4 <InterruptTim2+0x18>)
 8024492:	681b      	ldr	r3, [r3, #0]
 8024494:	3301      	adds	r3, #1
 8024496:	4a03      	ldr	r2, [pc, #12]	; (80244a4 <InterruptTim2+0x18>)
 8024498:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 802449a:	bf00      	nop
 802449c:	46bd      	mov	sp, r7
 802449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80244a2:	4770      	bx	lr
 80244a4:	200006e8 	.word	0x200006e8

080244a8 <Loop>:

#ifdef TEST_MODE
void Loop()
{
 80244a8:	b580      	push	{r7, lr}
 80244aa:	af00      	add	r7, sp, #0
    test.Loop();
 80244ac:	4802      	ldr	r0, [pc, #8]	; (80244b8 <Loop+0x10>)
 80244ae:	f7ff fbc3 	bl	8023c38 <_ZN4Test4LoopEv>
}
 80244b2:	bf00      	nop
 80244b4:	bd80      	pop	{r7, pc}
 80244b6:	bf00      	nop
 80244b8:	2001146c 	.word	0x2001146c

080244bc <_Z41__static_initialization_and_destruction_0ii>:
 80244bc:	b580      	push	{r7, lr}
 80244be:	b088      	sub	sp, #32
 80244c0:	af06      	add	r7, sp, #24
 80244c2:	6078      	str	r0, [r7, #4]
 80244c4:	6039      	str	r1, [r7, #0]
 80244c6:	687b      	ldr	r3, [r7, #4]
 80244c8:	2b01      	cmp	r3, #1
 80244ca:	d13e      	bne.n	802454a <_Z41__static_initialization_and_destruction_0ii+0x8e>
 80244cc:	683b      	ldr	r3, [r7, #0]
 80244ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80244d2:	4293      	cmp	r3, r2
 80244d4:	d139      	bne.n	802454a <_Z41__static_initialization_and_destruction_0ii+0x8e>
Encoder encoder;
 80244d6:	481f      	ldr	r0, [pc, #124]	; (8024554 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80244d8:	f7fc fc1e 	bl	8020d18 <_ZN7EncoderC1Ev>
Iim42652 iim_42652;
 80244dc:	481e      	ldr	r0, [pc, #120]	; (8024558 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80244de:	f7fc fd37 	bl	8020f50 <_ZN8Iim42652C1Ev>
Led led;
 80244e2:	481e      	ldr	r0, [pc, #120]	; (802455c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80244e4:	f7fc fd66 	bl	8020fb4 <_ZN3LedC1Ev>
LineSensor line_sensor;
 80244e8:	481d      	ldr	r0, [pc, #116]	; (8024560 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80244ea:	f7fc fe7e 	bl	80211ea <_ZN10LineSensorC1Ev>
LineTrace line_trace(&line_sensor);
 80244ee:	491c      	ldr	r1, [pc, #112]	; (8024560 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80244f0:	481c      	ldr	r0, [pc, #112]	; (8024564 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80244f2:	f7fd f9c3 	bl	802187c <_ZN9LineTraceC1EP10LineSensor>
Logger logger;
 80244f6:	481c      	ldr	r0, [pc, #112]	; (8024568 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80244f8:	f7fd fac2 	bl	8021a80 <_ZN6LoggerC1Ev>
Print print(&flash);
 80244fc:	491b      	ldr	r1, [pc, #108]	; (802456c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80244fe:	481c      	ldr	r0, [pc, #112]	; (8024570 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8024500:	f7fe fae0 	bl	8022ac4 <_ZN5PrintC1EP5Flash>
SideSensor side_sensor;
 8024504:	481b      	ldr	r0, [pc, #108]	; (8024574 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8024506:	f7fe fb3f 	bl	8022b88 <_ZN10SideSensorC1Ev>
Logger2 logger2(&encoder, &flash, &led, &iim_42652, &side_sensor);
 802450a:	4b1a      	ldr	r3, [pc, #104]	; (8024574 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802450c:	9301      	str	r3, [sp, #4]
 802450e:	4b12      	ldr	r3, [pc, #72]	; (8024558 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8024510:	9300      	str	r3, [sp, #0]
 8024512:	4b12      	ldr	r3, [pc, #72]	; (802455c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8024514:	4a15      	ldr	r2, [pc, #84]	; (802456c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8024516:	490f      	ldr	r1, [pc, #60]	; (8024554 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8024518:	4817      	ldr	r0, [pc, #92]	; (8024578 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 802451a:	f7fd faca 	bl	8021ab2 <_ZN7Logger2C1EP7EncoderP5FlashP3LedP8Iim42652P10SideSensor>
VelocityControl velocity_control(&encoder);
 802451e:	490d      	ldr	r1, [pc, #52]	; (8024554 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8024520:	4816      	ldr	r0, [pc, #88]	; (802457c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8024522:	f7ff fe0b 	bl	802413c <_ZN15VelocityControlC1EP7Encoder>
);
 8024526:	4b15      	ldr	r3, [pc, #84]	; (802457c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8024528:	9305      	str	r3, [sp, #20]
 802452a:	4b12      	ldr	r3, [pc, #72]	; (8024574 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802452c:	9304      	str	r3, [sp, #16]
 802452e:	4b14      	ldr	r3, [pc, #80]	; (8024580 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8024530:	9303      	str	r3, [sp, #12]
 8024532:	4b14      	ldr	r3, [pc, #80]	; (8024584 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8024534:	9302      	str	r3, [sp, #8]
 8024536:	4b0b      	ldr	r3, [pc, #44]	; (8024564 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8024538:	9301      	str	r3, [sp, #4]
 802453a:	4b09      	ldr	r3, [pc, #36]	; (8024560 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 802453c:	9300      	str	r3, [sp, #0]
 802453e:	4b07      	ldr	r3, [pc, #28]	; (802455c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8024540:	4a05      	ldr	r2, [pc, #20]	; (8024558 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8024542:	4904      	ldr	r1, [pc, #16]	; (8024554 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8024544:	4810      	ldr	r0, [pc, #64]	; (8024588 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8024546:	f7ff fb09 	bl	8023b5c <_ZN4TestC1EP7EncoderP8Iim42652P3LedP10LineSensorP9LineTraceP5MotorP12RotarySwitchP10SideSensorP15VelocityControl>
}
 802454a:	bf00      	nop
 802454c:	3708      	adds	r7, #8
 802454e:	46bd      	mov	sp, r7
 8024550:	bd80      	pop	{r7, pc}
 8024552:	bf00      	nop
 8024554:	20000704 	.word	0x20000704
 8024558:	20000718 	.word	0x20000718
 802455c:	20000720 	.word	0x20000720
 8024560:	20000724 	.word	0x20000724
 8024564:	200008b0 	.word	0x200008b0
 8024568:	200008b8 	.word	0x200008b8
 802456c:	20000710 	.word	0x20000710
 8024570:	200009c4 	.word	0x200009c4
 8024574:	20011434 	.word	0x20011434
 8024578:	2001143c 	.word	0x2001143c
 802457c:	20011464 	.word	0x20011464
 8024580:	20011430 	.word	0x20011430
 8024584:	200009c0 	.word	0x200009c0
 8024588:	2001146c 	.word	0x2001146c

0802458c <_GLOBAL__sub_I_encoder>:
 802458c:	b580      	push	{r7, lr}
 802458e:	af00      	add	r7, sp, #0
 8024590:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8024594:	2001      	movs	r0, #1
 8024596:	f7ff ff91 	bl	80244bc <_Z41__static_initialization_and_destruction_0ii>
 802459a:	bd80      	pop	{r7, pc}

0802459c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 802459c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80245d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80245a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80245a2:	e003      	b.n	80245ac <LoopCopyDataInit>

080245a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80245a4:	4b0c      	ldr	r3, [pc, #48]	; (80245d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80245a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80245a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80245aa:	3104      	adds	r1, #4

080245ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80245ac:	480b      	ldr	r0, [pc, #44]	; (80245dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80245ae:	4b0c      	ldr	r3, [pc, #48]	; (80245e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80245b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80245b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80245b4:	d3f6      	bcc.n	80245a4 <CopyDataInit>
  ldr  r2, =_sbss
 80245b6:	4a0b      	ldr	r2, [pc, #44]	; (80245e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80245b8:	e002      	b.n	80245c0 <LoopFillZerobss>

080245ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80245ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80245bc:	f842 3b04 	str.w	r3, [r2], #4

080245c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80245c0:	4b09      	ldr	r3, [pc, #36]	; (80245e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80245c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80245c4:	d3f9      	bcc.n	80245ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80245c6:	f7ff fab3 	bl	8023b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80245ca:	f003 f8e1 	bl	8027790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80245ce:	f7fd fac7 	bl	8021b60 <main>
  bx  lr    
 80245d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80245d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80245d8:	08029d1c 	.word	0x08029d1c
  ldr  r0, =_sdata
 80245dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80245e0:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80245e4:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80245e8:	20011874 	.word	0x20011874

080245ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80245ec:	e7fe      	b.n	80245ec <ADC_IRQHandler>
	...

080245f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80245f0:	b580      	push	{r7, lr}
 80245f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80245f4:	4b0e      	ldr	r3, [pc, #56]	; (8024630 <HAL_Init+0x40>)
 80245f6:	681b      	ldr	r3, [r3, #0]
 80245f8:	4a0d      	ldr	r2, [pc, #52]	; (8024630 <HAL_Init+0x40>)
 80245fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80245fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8024600:	4b0b      	ldr	r3, [pc, #44]	; (8024630 <HAL_Init+0x40>)
 8024602:	681b      	ldr	r3, [r3, #0]
 8024604:	4a0a      	ldr	r2, [pc, #40]	; (8024630 <HAL_Init+0x40>)
 8024606:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802460a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 802460c:	4b08      	ldr	r3, [pc, #32]	; (8024630 <HAL_Init+0x40>)
 802460e:	681b      	ldr	r3, [r3, #0]
 8024610:	4a07      	ldr	r2, [pc, #28]	; (8024630 <HAL_Init+0x40>)
 8024612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8024616:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8024618:	2003      	movs	r0, #3
 802461a:	f000 fd41 	bl	80250a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 802461e:	2001      	movs	r0, #1
 8024620:	f000 f808 	bl	8024634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8024624:	f7fe fdde 	bl	80231e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8024628:	2300      	movs	r3, #0
}
 802462a:	4618      	mov	r0, r3
 802462c:	bd80      	pop	{r7, pc}
 802462e:	bf00      	nop
 8024630:	40023c00 	.word	0x40023c00

08024634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8024634:	b580      	push	{r7, lr}
 8024636:	b082      	sub	sp, #8
 8024638:	af00      	add	r7, sp, #0
 802463a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 802463c:	4b12      	ldr	r3, [pc, #72]	; (8024688 <HAL_InitTick+0x54>)
 802463e:	681a      	ldr	r2, [r3, #0]
 8024640:	4b12      	ldr	r3, [pc, #72]	; (802468c <HAL_InitTick+0x58>)
 8024642:	781b      	ldrb	r3, [r3, #0]
 8024644:	4619      	mov	r1, r3
 8024646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802464a:	fbb3 f3f1 	udiv	r3, r3, r1
 802464e:	fbb2 f3f3 	udiv	r3, r2, r3
 8024652:	4618      	mov	r0, r3
 8024654:	f000 fd59 	bl	802510a <HAL_SYSTICK_Config>
 8024658:	4603      	mov	r3, r0
 802465a:	2b00      	cmp	r3, #0
 802465c:	d001      	beq.n	8024662 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 802465e:	2301      	movs	r3, #1
 8024660:	e00e      	b.n	8024680 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8024662:	687b      	ldr	r3, [r7, #4]
 8024664:	2b0f      	cmp	r3, #15
 8024666:	d80a      	bhi.n	802467e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8024668:	2200      	movs	r2, #0
 802466a:	6879      	ldr	r1, [r7, #4]
 802466c:	f04f 30ff 	mov.w	r0, #4294967295
 8024670:	f000 fd21 	bl	80250b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8024674:	4a06      	ldr	r2, [pc, #24]	; (8024690 <HAL_InitTick+0x5c>)
 8024676:	687b      	ldr	r3, [r7, #4]
 8024678:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 802467a:	2300      	movs	r3, #0
 802467c:	e000      	b.n	8024680 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 802467e:	2301      	movs	r3, #1
}
 8024680:	4618      	mov	r0, r3
 8024682:	3708      	adds	r7, #8
 8024684:	46bd      	mov	sp, r7
 8024686:	bd80      	pop	{r7, pc}
 8024688:	20000000 	.word	0x20000000
 802468c:	20000008 	.word	0x20000008
 8024690:	20000004 	.word	0x20000004

08024694 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8024694:	b480      	push	{r7}
 8024696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8024698:	4b06      	ldr	r3, [pc, #24]	; (80246b4 <HAL_IncTick+0x20>)
 802469a:	781b      	ldrb	r3, [r3, #0]
 802469c:	461a      	mov	r2, r3
 802469e:	4b06      	ldr	r3, [pc, #24]	; (80246b8 <HAL_IncTick+0x24>)
 80246a0:	681b      	ldr	r3, [r3, #0]
 80246a2:	4413      	add	r3, r2
 80246a4:	4a04      	ldr	r2, [pc, #16]	; (80246b8 <HAL_IncTick+0x24>)
 80246a6:	6013      	str	r3, [r2, #0]
}
 80246a8:	bf00      	nop
 80246aa:	46bd      	mov	sp, r7
 80246ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246b0:	4770      	bx	lr
 80246b2:	bf00      	nop
 80246b4:	20000008 	.word	0x20000008
 80246b8:	2001186c 	.word	0x2001186c

080246bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80246bc:	b480      	push	{r7}
 80246be:	af00      	add	r7, sp, #0
  return uwTick;
 80246c0:	4b03      	ldr	r3, [pc, #12]	; (80246d0 <HAL_GetTick+0x14>)
 80246c2:	681b      	ldr	r3, [r3, #0]
}
 80246c4:	4618      	mov	r0, r3
 80246c6:	46bd      	mov	sp, r7
 80246c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246cc:	4770      	bx	lr
 80246ce:	bf00      	nop
 80246d0:	2001186c 	.word	0x2001186c

080246d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80246d4:	b580      	push	{r7, lr}
 80246d6:	b084      	sub	sp, #16
 80246d8:	af00      	add	r7, sp, #0
 80246da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80246dc:	f7ff ffee 	bl	80246bc <HAL_GetTick>
 80246e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80246e2:	687b      	ldr	r3, [r7, #4]
 80246e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80246e6:	68fb      	ldr	r3, [r7, #12]
 80246e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80246ec:	d005      	beq.n	80246fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80246ee:	4b09      	ldr	r3, [pc, #36]	; (8024714 <HAL_Delay+0x40>)
 80246f0:	781b      	ldrb	r3, [r3, #0]
 80246f2:	461a      	mov	r2, r3
 80246f4:	68fb      	ldr	r3, [r7, #12]
 80246f6:	4413      	add	r3, r2
 80246f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80246fa:	bf00      	nop
 80246fc:	f7ff ffde 	bl	80246bc <HAL_GetTick>
 8024700:	4602      	mov	r2, r0
 8024702:	68bb      	ldr	r3, [r7, #8]
 8024704:	1ad3      	subs	r3, r2, r3
 8024706:	68fa      	ldr	r2, [r7, #12]
 8024708:	429a      	cmp	r2, r3
 802470a:	d8f7      	bhi.n	80246fc <HAL_Delay+0x28>
  {
  }
}
 802470c:	bf00      	nop
 802470e:	3710      	adds	r7, #16
 8024710:	46bd      	mov	sp, r7
 8024712:	bd80      	pop	{r7, pc}
 8024714:	20000008 	.word	0x20000008

08024718 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8024718:	b580      	push	{r7, lr}
 802471a:	b084      	sub	sp, #16
 802471c:	af00      	add	r7, sp, #0
 802471e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8024720:	2300      	movs	r3, #0
 8024722:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8024724:	687b      	ldr	r3, [r7, #4]
 8024726:	2b00      	cmp	r3, #0
 8024728:	d101      	bne.n	802472e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 802472a:	2301      	movs	r3, #1
 802472c:	e033      	b.n	8024796 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 802472e:	687b      	ldr	r3, [r7, #4]
 8024730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024732:	2b00      	cmp	r3, #0
 8024734:	d109      	bne.n	802474a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8024736:	6878      	ldr	r0, [r7, #4]
 8024738:	f7fe fd7c 	bl	8023234 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 802473c:	687b      	ldr	r3, [r7, #4]
 802473e:	2200      	movs	r2, #0
 8024740:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8024742:	687b      	ldr	r3, [r7, #4]
 8024744:	2200      	movs	r2, #0
 8024746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 802474a:	687b      	ldr	r3, [r7, #4]
 802474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802474e:	f003 0310 	and.w	r3, r3, #16
 8024752:	2b00      	cmp	r3, #0
 8024754:	d118      	bne.n	8024788 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8024756:	687b      	ldr	r3, [r7, #4]
 8024758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802475a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 802475e:	f023 0302 	bic.w	r3, r3, #2
 8024762:	f043 0202 	orr.w	r2, r3, #2
 8024766:	687b      	ldr	r3, [r7, #4]
 8024768:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 802476a:	6878      	ldr	r0, [r7, #4]
 802476c:	f000 fa4a 	bl	8024c04 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8024770:	687b      	ldr	r3, [r7, #4]
 8024772:	2200      	movs	r2, #0
 8024774:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8024776:	687b      	ldr	r3, [r7, #4]
 8024778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802477a:	f023 0303 	bic.w	r3, r3, #3
 802477e:	f043 0201 	orr.w	r2, r3, #1
 8024782:	687b      	ldr	r3, [r7, #4]
 8024784:	641a      	str	r2, [r3, #64]	; 0x40
 8024786:	e001      	b.n	802478c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8024788:	2301      	movs	r3, #1
 802478a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 802478c:	687b      	ldr	r3, [r7, #4]
 802478e:	2200      	movs	r2, #0
 8024790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8024794:	7bfb      	ldrb	r3, [r7, #15]
}
 8024796:	4618      	mov	r0, r3
 8024798:	3710      	adds	r7, #16
 802479a:	46bd      	mov	sp, r7
 802479c:	bd80      	pop	{r7, pc}
	...

080247a0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80247a0:	b580      	push	{r7, lr}
 80247a2:	b086      	sub	sp, #24
 80247a4:	af00      	add	r7, sp, #0
 80247a6:	60f8      	str	r0, [r7, #12]
 80247a8:	60b9      	str	r1, [r7, #8]
 80247aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80247ac:	2300      	movs	r3, #0
 80247ae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80247b0:	68fb      	ldr	r3, [r7, #12]
 80247b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80247b6:	2b01      	cmp	r3, #1
 80247b8:	d101      	bne.n	80247be <HAL_ADC_Start_DMA+0x1e>
 80247ba:	2302      	movs	r3, #2
 80247bc:	e0cc      	b.n	8024958 <HAL_ADC_Start_DMA+0x1b8>
 80247be:	68fb      	ldr	r3, [r7, #12]
 80247c0:	2201      	movs	r2, #1
 80247c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80247c6:	68fb      	ldr	r3, [r7, #12]
 80247c8:	681b      	ldr	r3, [r3, #0]
 80247ca:	689b      	ldr	r3, [r3, #8]
 80247cc:	f003 0301 	and.w	r3, r3, #1
 80247d0:	2b01      	cmp	r3, #1
 80247d2:	d018      	beq.n	8024806 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80247d4:	68fb      	ldr	r3, [r7, #12]
 80247d6:	681b      	ldr	r3, [r3, #0]
 80247d8:	689a      	ldr	r2, [r3, #8]
 80247da:	68fb      	ldr	r3, [r7, #12]
 80247dc:	681b      	ldr	r3, [r3, #0]
 80247de:	f042 0201 	orr.w	r2, r2, #1
 80247e2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80247e4:	4b5e      	ldr	r3, [pc, #376]	; (8024960 <HAL_ADC_Start_DMA+0x1c0>)
 80247e6:	681b      	ldr	r3, [r3, #0]
 80247e8:	4a5e      	ldr	r2, [pc, #376]	; (8024964 <HAL_ADC_Start_DMA+0x1c4>)
 80247ea:	fba2 2303 	umull	r2, r3, r2, r3
 80247ee:	0c9a      	lsrs	r2, r3, #18
 80247f0:	4613      	mov	r3, r2
 80247f2:	005b      	lsls	r3, r3, #1
 80247f4:	4413      	add	r3, r2
 80247f6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80247f8:	e002      	b.n	8024800 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80247fa:	693b      	ldr	r3, [r7, #16]
 80247fc:	3b01      	subs	r3, #1
 80247fe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8024800:	693b      	ldr	r3, [r7, #16]
 8024802:	2b00      	cmp	r3, #0
 8024804:	d1f9      	bne.n	80247fa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8024806:	68fb      	ldr	r3, [r7, #12]
 8024808:	681b      	ldr	r3, [r3, #0]
 802480a:	689b      	ldr	r3, [r3, #8]
 802480c:	f003 0301 	and.w	r3, r3, #1
 8024810:	2b01      	cmp	r3, #1
 8024812:	f040 80a0 	bne.w	8024956 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8024816:	68fb      	ldr	r3, [r7, #12]
 8024818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802481a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 802481e:	f023 0301 	bic.w	r3, r3, #1
 8024822:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8024826:	68fb      	ldr	r3, [r7, #12]
 8024828:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 802482a:	68fb      	ldr	r3, [r7, #12]
 802482c:	681b      	ldr	r3, [r3, #0]
 802482e:	685b      	ldr	r3, [r3, #4]
 8024830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8024834:	2b00      	cmp	r3, #0
 8024836:	d007      	beq.n	8024848 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8024838:	68fb      	ldr	r3, [r7, #12]
 802483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802483c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8024840:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8024844:	68fb      	ldr	r3, [r7, #12]
 8024846:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8024848:	68fb      	ldr	r3, [r7, #12]
 802484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802484c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8024850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8024854:	d106      	bne.n	8024864 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8024856:	68fb      	ldr	r3, [r7, #12]
 8024858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802485a:	f023 0206 	bic.w	r2, r3, #6
 802485e:	68fb      	ldr	r3, [r7, #12]
 8024860:	645a      	str	r2, [r3, #68]	; 0x44
 8024862:	e002      	b.n	802486a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8024864:	68fb      	ldr	r3, [r7, #12]
 8024866:	2200      	movs	r2, #0
 8024868:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 802486a:	68fb      	ldr	r3, [r7, #12]
 802486c:	2200      	movs	r2, #0
 802486e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8024872:	4b3d      	ldr	r3, [pc, #244]	; (8024968 <HAL_ADC_Start_DMA+0x1c8>)
 8024874:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8024876:	68fb      	ldr	r3, [r7, #12]
 8024878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802487a:	4a3c      	ldr	r2, [pc, #240]	; (802496c <HAL_ADC_Start_DMA+0x1cc>)
 802487c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 802487e:	68fb      	ldr	r3, [r7, #12]
 8024880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024882:	4a3b      	ldr	r2, [pc, #236]	; (8024970 <HAL_ADC_Start_DMA+0x1d0>)
 8024884:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8024886:	68fb      	ldr	r3, [r7, #12]
 8024888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802488a:	4a3a      	ldr	r2, [pc, #232]	; (8024974 <HAL_ADC_Start_DMA+0x1d4>)
 802488c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 802488e:	68fb      	ldr	r3, [r7, #12]
 8024890:	681b      	ldr	r3, [r3, #0]
 8024892:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8024896:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8024898:	68fb      	ldr	r3, [r7, #12]
 802489a:	681b      	ldr	r3, [r3, #0]
 802489c:	685a      	ldr	r2, [r3, #4]
 802489e:	68fb      	ldr	r3, [r7, #12]
 80248a0:	681b      	ldr	r3, [r3, #0]
 80248a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80248a6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80248a8:	68fb      	ldr	r3, [r7, #12]
 80248aa:	681b      	ldr	r3, [r3, #0]
 80248ac:	689a      	ldr	r2, [r3, #8]
 80248ae:	68fb      	ldr	r3, [r7, #12]
 80248b0:	681b      	ldr	r3, [r3, #0]
 80248b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80248b6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80248b8:	68fb      	ldr	r3, [r7, #12]
 80248ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80248bc:	68fb      	ldr	r3, [r7, #12]
 80248be:	681b      	ldr	r3, [r3, #0]
 80248c0:	334c      	adds	r3, #76	; 0x4c
 80248c2:	4619      	mov	r1, r3
 80248c4:	68ba      	ldr	r2, [r7, #8]
 80248c6:	687b      	ldr	r3, [r7, #4]
 80248c8:	f000 fcda 	bl	8025280 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80248cc:	697b      	ldr	r3, [r7, #20]
 80248ce:	685b      	ldr	r3, [r3, #4]
 80248d0:	f003 031f 	and.w	r3, r3, #31
 80248d4:	2b00      	cmp	r3, #0
 80248d6:	d12a      	bne.n	802492e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80248d8:	68fb      	ldr	r3, [r7, #12]
 80248da:	681b      	ldr	r3, [r3, #0]
 80248dc:	4a26      	ldr	r2, [pc, #152]	; (8024978 <HAL_ADC_Start_DMA+0x1d8>)
 80248de:	4293      	cmp	r3, r2
 80248e0:	d015      	beq.n	802490e <HAL_ADC_Start_DMA+0x16e>
 80248e2:	68fb      	ldr	r3, [r7, #12]
 80248e4:	681b      	ldr	r3, [r3, #0]
 80248e6:	4a25      	ldr	r2, [pc, #148]	; (802497c <HAL_ADC_Start_DMA+0x1dc>)
 80248e8:	4293      	cmp	r3, r2
 80248ea:	d105      	bne.n	80248f8 <HAL_ADC_Start_DMA+0x158>
 80248ec:	4b1e      	ldr	r3, [pc, #120]	; (8024968 <HAL_ADC_Start_DMA+0x1c8>)
 80248ee:	685b      	ldr	r3, [r3, #4]
 80248f0:	f003 031f 	and.w	r3, r3, #31
 80248f4:	2b00      	cmp	r3, #0
 80248f6:	d00a      	beq.n	802490e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80248f8:	68fb      	ldr	r3, [r7, #12]
 80248fa:	681b      	ldr	r3, [r3, #0]
 80248fc:	4a20      	ldr	r2, [pc, #128]	; (8024980 <HAL_ADC_Start_DMA+0x1e0>)
 80248fe:	4293      	cmp	r3, r2
 8024900:	d129      	bne.n	8024956 <HAL_ADC_Start_DMA+0x1b6>
 8024902:	4b19      	ldr	r3, [pc, #100]	; (8024968 <HAL_ADC_Start_DMA+0x1c8>)
 8024904:	685b      	ldr	r3, [r3, #4]
 8024906:	f003 031f 	and.w	r3, r3, #31
 802490a:	2b0f      	cmp	r3, #15
 802490c:	d823      	bhi.n	8024956 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 802490e:	68fb      	ldr	r3, [r7, #12]
 8024910:	681b      	ldr	r3, [r3, #0]
 8024912:	689b      	ldr	r3, [r3, #8]
 8024914:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8024918:	2b00      	cmp	r3, #0
 802491a:	d11c      	bne.n	8024956 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 802491c:	68fb      	ldr	r3, [r7, #12]
 802491e:	681b      	ldr	r3, [r3, #0]
 8024920:	689a      	ldr	r2, [r3, #8]
 8024922:	68fb      	ldr	r3, [r7, #12]
 8024924:	681b      	ldr	r3, [r3, #0]
 8024926:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 802492a:	609a      	str	r2, [r3, #8]
 802492c:	e013      	b.n	8024956 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 802492e:	68fb      	ldr	r3, [r7, #12]
 8024930:	681b      	ldr	r3, [r3, #0]
 8024932:	4a11      	ldr	r2, [pc, #68]	; (8024978 <HAL_ADC_Start_DMA+0x1d8>)
 8024934:	4293      	cmp	r3, r2
 8024936:	d10e      	bne.n	8024956 <HAL_ADC_Start_DMA+0x1b6>
 8024938:	68fb      	ldr	r3, [r7, #12]
 802493a:	681b      	ldr	r3, [r3, #0]
 802493c:	689b      	ldr	r3, [r3, #8]
 802493e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8024942:	2b00      	cmp	r3, #0
 8024944:	d107      	bne.n	8024956 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8024946:	68fb      	ldr	r3, [r7, #12]
 8024948:	681b      	ldr	r3, [r3, #0]
 802494a:	689a      	ldr	r2, [r3, #8]
 802494c:	68fb      	ldr	r3, [r7, #12]
 802494e:	681b      	ldr	r3, [r3, #0]
 8024950:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8024954:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8024956:	2300      	movs	r3, #0
}
 8024958:	4618      	mov	r0, r3
 802495a:	3718      	adds	r7, #24
 802495c:	46bd      	mov	sp, r7
 802495e:	bd80      	pop	{r7, pc}
 8024960:	20000000 	.word	0x20000000
 8024964:	431bde83 	.word	0x431bde83
 8024968:	40012300 	.word	0x40012300
 802496c:	08024dfd 	.word	0x08024dfd
 8024970:	08024eb7 	.word	0x08024eb7
 8024974:	08024ed3 	.word	0x08024ed3
 8024978:	40012000 	.word	0x40012000
 802497c:	40012100 	.word	0x40012100
 8024980:	40012200 	.word	0x40012200

08024984 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8024984:	b480      	push	{r7}
 8024986:	b083      	sub	sp, #12
 8024988:	af00      	add	r7, sp, #0
 802498a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 802498c:	bf00      	nop
 802498e:	370c      	adds	r7, #12
 8024990:	46bd      	mov	sp, r7
 8024992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024996:	4770      	bx	lr

08024998 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8024998:	b480      	push	{r7}
 802499a:	b083      	sub	sp, #12
 802499c:	af00      	add	r7, sp, #0
 802499e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80249a0:	bf00      	nop
 80249a2:	370c      	adds	r7, #12
 80249a4:	46bd      	mov	sp, r7
 80249a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80249aa:	4770      	bx	lr

080249ac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80249ac:	b480      	push	{r7}
 80249ae:	b083      	sub	sp, #12
 80249b0:	af00      	add	r7, sp, #0
 80249b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80249b4:	bf00      	nop
 80249b6:	370c      	adds	r7, #12
 80249b8:	46bd      	mov	sp, r7
 80249ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80249be:	4770      	bx	lr

080249c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80249c0:	b480      	push	{r7}
 80249c2:	b085      	sub	sp, #20
 80249c4:	af00      	add	r7, sp, #0
 80249c6:	6078      	str	r0, [r7, #4]
 80249c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80249ca:	2300      	movs	r3, #0
 80249cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80249ce:	687b      	ldr	r3, [r7, #4]
 80249d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80249d4:	2b01      	cmp	r3, #1
 80249d6:	d101      	bne.n	80249dc <HAL_ADC_ConfigChannel+0x1c>
 80249d8:	2302      	movs	r3, #2
 80249da:	e105      	b.n	8024be8 <HAL_ADC_ConfigChannel+0x228>
 80249dc:	687b      	ldr	r3, [r7, #4]
 80249de:	2201      	movs	r2, #1
 80249e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80249e4:	683b      	ldr	r3, [r7, #0]
 80249e6:	681b      	ldr	r3, [r3, #0]
 80249e8:	2b09      	cmp	r3, #9
 80249ea:	d925      	bls.n	8024a38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80249ec:	687b      	ldr	r3, [r7, #4]
 80249ee:	681b      	ldr	r3, [r3, #0]
 80249f0:	68d9      	ldr	r1, [r3, #12]
 80249f2:	683b      	ldr	r3, [r7, #0]
 80249f4:	681b      	ldr	r3, [r3, #0]
 80249f6:	b29b      	uxth	r3, r3
 80249f8:	461a      	mov	r2, r3
 80249fa:	4613      	mov	r3, r2
 80249fc:	005b      	lsls	r3, r3, #1
 80249fe:	4413      	add	r3, r2
 8024a00:	3b1e      	subs	r3, #30
 8024a02:	2207      	movs	r2, #7
 8024a04:	fa02 f303 	lsl.w	r3, r2, r3
 8024a08:	43da      	mvns	r2, r3
 8024a0a:	687b      	ldr	r3, [r7, #4]
 8024a0c:	681b      	ldr	r3, [r3, #0]
 8024a0e:	400a      	ands	r2, r1
 8024a10:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8024a12:	687b      	ldr	r3, [r7, #4]
 8024a14:	681b      	ldr	r3, [r3, #0]
 8024a16:	68d9      	ldr	r1, [r3, #12]
 8024a18:	683b      	ldr	r3, [r7, #0]
 8024a1a:	689a      	ldr	r2, [r3, #8]
 8024a1c:	683b      	ldr	r3, [r7, #0]
 8024a1e:	681b      	ldr	r3, [r3, #0]
 8024a20:	b29b      	uxth	r3, r3
 8024a22:	4618      	mov	r0, r3
 8024a24:	4603      	mov	r3, r0
 8024a26:	005b      	lsls	r3, r3, #1
 8024a28:	4403      	add	r3, r0
 8024a2a:	3b1e      	subs	r3, #30
 8024a2c:	409a      	lsls	r2, r3
 8024a2e:	687b      	ldr	r3, [r7, #4]
 8024a30:	681b      	ldr	r3, [r3, #0]
 8024a32:	430a      	orrs	r2, r1
 8024a34:	60da      	str	r2, [r3, #12]
 8024a36:	e022      	b.n	8024a7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8024a38:	687b      	ldr	r3, [r7, #4]
 8024a3a:	681b      	ldr	r3, [r3, #0]
 8024a3c:	6919      	ldr	r1, [r3, #16]
 8024a3e:	683b      	ldr	r3, [r7, #0]
 8024a40:	681b      	ldr	r3, [r3, #0]
 8024a42:	b29b      	uxth	r3, r3
 8024a44:	461a      	mov	r2, r3
 8024a46:	4613      	mov	r3, r2
 8024a48:	005b      	lsls	r3, r3, #1
 8024a4a:	4413      	add	r3, r2
 8024a4c:	2207      	movs	r2, #7
 8024a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8024a52:	43da      	mvns	r2, r3
 8024a54:	687b      	ldr	r3, [r7, #4]
 8024a56:	681b      	ldr	r3, [r3, #0]
 8024a58:	400a      	ands	r2, r1
 8024a5a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8024a5c:	687b      	ldr	r3, [r7, #4]
 8024a5e:	681b      	ldr	r3, [r3, #0]
 8024a60:	6919      	ldr	r1, [r3, #16]
 8024a62:	683b      	ldr	r3, [r7, #0]
 8024a64:	689a      	ldr	r2, [r3, #8]
 8024a66:	683b      	ldr	r3, [r7, #0]
 8024a68:	681b      	ldr	r3, [r3, #0]
 8024a6a:	b29b      	uxth	r3, r3
 8024a6c:	4618      	mov	r0, r3
 8024a6e:	4603      	mov	r3, r0
 8024a70:	005b      	lsls	r3, r3, #1
 8024a72:	4403      	add	r3, r0
 8024a74:	409a      	lsls	r2, r3
 8024a76:	687b      	ldr	r3, [r7, #4]
 8024a78:	681b      	ldr	r3, [r3, #0]
 8024a7a:	430a      	orrs	r2, r1
 8024a7c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8024a7e:	683b      	ldr	r3, [r7, #0]
 8024a80:	685b      	ldr	r3, [r3, #4]
 8024a82:	2b06      	cmp	r3, #6
 8024a84:	d824      	bhi.n	8024ad0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8024a86:	687b      	ldr	r3, [r7, #4]
 8024a88:	681b      	ldr	r3, [r3, #0]
 8024a8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8024a8c:	683b      	ldr	r3, [r7, #0]
 8024a8e:	685a      	ldr	r2, [r3, #4]
 8024a90:	4613      	mov	r3, r2
 8024a92:	009b      	lsls	r3, r3, #2
 8024a94:	4413      	add	r3, r2
 8024a96:	3b05      	subs	r3, #5
 8024a98:	221f      	movs	r2, #31
 8024a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8024a9e:	43da      	mvns	r2, r3
 8024aa0:	687b      	ldr	r3, [r7, #4]
 8024aa2:	681b      	ldr	r3, [r3, #0]
 8024aa4:	400a      	ands	r2, r1
 8024aa6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8024aa8:	687b      	ldr	r3, [r7, #4]
 8024aaa:	681b      	ldr	r3, [r3, #0]
 8024aac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8024aae:	683b      	ldr	r3, [r7, #0]
 8024ab0:	681b      	ldr	r3, [r3, #0]
 8024ab2:	b29b      	uxth	r3, r3
 8024ab4:	4618      	mov	r0, r3
 8024ab6:	683b      	ldr	r3, [r7, #0]
 8024ab8:	685a      	ldr	r2, [r3, #4]
 8024aba:	4613      	mov	r3, r2
 8024abc:	009b      	lsls	r3, r3, #2
 8024abe:	4413      	add	r3, r2
 8024ac0:	3b05      	subs	r3, #5
 8024ac2:	fa00 f203 	lsl.w	r2, r0, r3
 8024ac6:	687b      	ldr	r3, [r7, #4]
 8024ac8:	681b      	ldr	r3, [r3, #0]
 8024aca:	430a      	orrs	r2, r1
 8024acc:	635a      	str	r2, [r3, #52]	; 0x34
 8024ace:	e04c      	b.n	8024b6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8024ad0:	683b      	ldr	r3, [r7, #0]
 8024ad2:	685b      	ldr	r3, [r3, #4]
 8024ad4:	2b0c      	cmp	r3, #12
 8024ad6:	d824      	bhi.n	8024b22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8024ad8:	687b      	ldr	r3, [r7, #4]
 8024ada:	681b      	ldr	r3, [r3, #0]
 8024adc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8024ade:	683b      	ldr	r3, [r7, #0]
 8024ae0:	685a      	ldr	r2, [r3, #4]
 8024ae2:	4613      	mov	r3, r2
 8024ae4:	009b      	lsls	r3, r3, #2
 8024ae6:	4413      	add	r3, r2
 8024ae8:	3b23      	subs	r3, #35	; 0x23
 8024aea:	221f      	movs	r2, #31
 8024aec:	fa02 f303 	lsl.w	r3, r2, r3
 8024af0:	43da      	mvns	r2, r3
 8024af2:	687b      	ldr	r3, [r7, #4]
 8024af4:	681b      	ldr	r3, [r3, #0]
 8024af6:	400a      	ands	r2, r1
 8024af8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8024afa:	687b      	ldr	r3, [r7, #4]
 8024afc:	681b      	ldr	r3, [r3, #0]
 8024afe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8024b00:	683b      	ldr	r3, [r7, #0]
 8024b02:	681b      	ldr	r3, [r3, #0]
 8024b04:	b29b      	uxth	r3, r3
 8024b06:	4618      	mov	r0, r3
 8024b08:	683b      	ldr	r3, [r7, #0]
 8024b0a:	685a      	ldr	r2, [r3, #4]
 8024b0c:	4613      	mov	r3, r2
 8024b0e:	009b      	lsls	r3, r3, #2
 8024b10:	4413      	add	r3, r2
 8024b12:	3b23      	subs	r3, #35	; 0x23
 8024b14:	fa00 f203 	lsl.w	r2, r0, r3
 8024b18:	687b      	ldr	r3, [r7, #4]
 8024b1a:	681b      	ldr	r3, [r3, #0]
 8024b1c:	430a      	orrs	r2, r1
 8024b1e:	631a      	str	r2, [r3, #48]	; 0x30
 8024b20:	e023      	b.n	8024b6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8024b22:	687b      	ldr	r3, [r7, #4]
 8024b24:	681b      	ldr	r3, [r3, #0]
 8024b26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8024b28:	683b      	ldr	r3, [r7, #0]
 8024b2a:	685a      	ldr	r2, [r3, #4]
 8024b2c:	4613      	mov	r3, r2
 8024b2e:	009b      	lsls	r3, r3, #2
 8024b30:	4413      	add	r3, r2
 8024b32:	3b41      	subs	r3, #65	; 0x41
 8024b34:	221f      	movs	r2, #31
 8024b36:	fa02 f303 	lsl.w	r3, r2, r3
 8024b3a:	43da      	mvns	r2, r3
 8024b3c:	687b      	ldr	r3, [r7, #4]
 8024b3e:	681b      	ldr	r3, [r3, #0]
 8024b40:	400a      	ands	r2, r1
 8024b42:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8024b44:	687b      	ldr	r3, [r7, #4]
 8024b46:	681b      	ldr	r3, [r3, #0]
 8024b48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8024b4a:	683b      	ldr	r3, [r7, #0]
 8024b4c:	681b      	ldr	r3, [r3, #0]
 8024b4e:	b29b      	uxth	r3, r3
 8024b50:	4618      	mov	r0, r3
 8024b52:	683b      	ldr	r3, [r7, #0]
 8024b54:	685a      	ldr	r2, [r3, #4]
 8024b56:	4613      	mov	r3, r2
 8024b58:	009b      	lsls	r3, r3, #2
 8024b5a:	4413      	add	r3, r2
 8024b5c:	3b41      	subs	r3, #65	; 0x41
 8024b5e:	fa00 f203 	lsl.w	r2, r0, r3
 8024b62:	687b      	ldr	r3, [r7, #4]
 8024b64:	681b      	ldr	r3, [r3, #0]
 8024b66:	430a      	orrs	r2, r1
 8024b68:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8024b6a:	4b22      	ldr	r3, [pc, #136]	; (8024bf4 <HAL_ADC_ConfigChannel+0x234>)
 8024b6c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8024b6e:	687b      	ldr	r3, [r7, #4]
 8024b70:	681b      	ldr	r3, [r3, #0]
 8024b72:	4a21      	ldr	r2, [pc, #132]	; (8024bf8 <HAL_ADC_ConfigChannel+0x238>)
 8024b74:	4293      	cmp	r3, r2
 8024b76:	d109      	bne.n	8024b8c <HAL_ADC_ConfigChannel+0x1cc>
 8024b78:	683b      	ldr	r3, [r7, #0]
 8024b7a:	681b      	ldr	r3, [r3, #0]
 8024b7c:	2b12      	cmp	r3, #18
 8024b7e:	d105      	bne.n	8024b8c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8024b80:	68fb      	ldr	r3, [r7, #12]
 8024b82:	685b      	ldr	r3, [r3, #4]
 8024b84:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8024b88:	68fb      	ldr	r3, [r7, #12]
 8024b8a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8024b8c:	687b      	ldr	r3, [r7, #4]
 8024b8e:	681b      	ldr	r3, [r3, #0]
 8024b90:	4a19      	ldr	r2, [pc, #100]	; (8024bf8 <HAL_ADC_ConfigChannel+0x238>)
 8024b92:	4293      	cmp	r3, r2
 8024b94:	d123      	bne.n	8024bde <HAL_ADC_ConfigChannel+0x21e>
 8024b96:	683b      	ldr	r3, [r7, #0]
 8024b98:	681b      	ldr	r3, [r3, #0]
 8024b9a:	2b10      	cmp	r3, #16
 8024b9c:	d003      	beq.n	8024ba6 <HAL_ADC_ConfigChannel+0x1e6>
 8024b9e:	683b      	ldr	r3, [r7, #0]
 8024ba0:	681b      	ldr	r3, [r3, #0]
 8024ba2:	2b11      	cmp	r3, #17
 8024ba4:	d11b      	bne.n	8024bde <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8024ba6:	68fb      	ldr	r3, [r7, #12]
 8024ba8:	685b      	ldr	r3, [r3, #4]
 8024baa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8024bae:	68fb      	ldr	r3, [r7, #12]
 8024bb0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8024bb2:	683b      	ldr	r3, [r7, #0]
 8024bb4:	681b      	ldr	r3, [r3, #0]
 8024bb6:	2b10      	cmp	r3, #16
 8024bb8:	d111      	bne.n	8024bde <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8024bba:	4b10      	ldr	r3, [pc, #64]	; (8024bfc <HAL_ADC_ConfigChannel+0x23c>)
 8024bbc:	681b      	ldr	r3, [r3, #0]
 8024bbe:	4a10      	ldr	r2, [pc, #64]	; (8024c00 <HAL_ADC_ConfigChannel+0x240>)
 8024bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8024bc4:	0c9a      	lsrs	r2, r3, #18
 8024bc6:	4613      	mov	r3, r2
 8024bc8:	009b      	lsls	r3, r3, #2
 8024bca:	4413      	add	r3, r2
 8024bcc:	005b      	lsls	r3, r3, #1
 8024bce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8024bd0:	e002      	b.n	8024bd8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8024bd2:	68bb      	ldr	r3, [r7, #8]
 8024bd4:	3b01      	subs	r3, #1
 8024bd6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8024bd8:	68bb      	ldr	r3, [r7, #8]
 8024bda:	2b00      	cmp	r3, #0
 8024bdc:	d1f9      	bne.n	8024bd2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8024bde:	687b      	ldr	r3, [r7, #4]
 8024be0:	2200      	movs	r2, #0
 8024be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8024be6:	2300      	movs	r3, #0
}
 8024be8:	4618      	mov	r0, r3
 8024bea:	3714      	adds	r7, #20
 8024bec:	46bd      	mov	sp, r7
 8024bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024bf2:	4770      	bx	lr
 8024bf4:	40012300 	.word	0x40012300
 8024bf8:	40012000 	.word	0x40012000
 8024bfc:	20000000 	.word	0x20000000
 8024c00:	431bde83 	.word	0x431bde83

08024c04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8024c04:	b480      	push	{r7}
 8024c06:	b085      	sub	sp, #20
 8024c08:	af00      	add	r7, sp, #0
 8024c0a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8024c0c:	4b79      	ldr	r3, [pc, #484]	; (8024df4 <ADC_Init+0x1f0>)
 8024c0e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8024c10:	68fb      	ldr	r3, [r7, #12]
 8024c12:	685b      	ldr	r3, [r3, #4]
 8024c14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8024c18:	68fb      	ldr	r3, [r7, #12]
 8024c1a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8024c1c:	68fb      	ldr	r3, [r7, #12]
 8024c1e:	685a      	ldr	r2, [r3, #4]
 8024c20:	687b      	ldr	r3, [r7, #4]
 8024c22:	685b      	ldr	r3, [r3, #4]
 8024c24:	431a      	orrs	r2, r3
 8024c26:	68fb      	ldr	r3, [r7, #12]
 8024c28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8024c2a:	687b      	ldr	r3, [r7, #4]
 8024c2c:	681b      	ldr	r3, [r3, #0]
 8024c2e:	685a      	ldr	r2, [r3, #4]
 8024c30:	687b      	ldr	r3, [r7, #4]
 8024c32:	681b      	ldr	r3, [r3, #0]
 8024c34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8024c38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8024c3a:	687b      	ldr	r3, [r7, #4]
 8024c3c:	681b      	ldr	r3, [r3, #0]
 8024c3e:	6859      	ldr	r1, [r3, #4]
 8024c40:	687b      	ldr	r3, [r7, #4]
 8024c42:	691b      	ldr	r3, [r3, #16]
 8024c44:	021a      	lsls	r2, r3, #8
 8024c46:	687b      	ldr	r3, [r7, #4]
 8024c48:	681b      	ldr	r3, [r3, #0]
 8024c4a:	430a      	orrs	r2, r1
 8024c4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8024c4e:	687b      	ldr	r3, [r7, #4]
 8024c50:	681b      	ldr	r3, [r3, #0]
 8024c52:	685a      	ldr	r2, [r3, #4]
 8024c54:	687b      	ldr	r3, [r7, #4]
 8024c56:	681b      	ldr	r3, [r3, #0]
 8024c58:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8024c5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8024c5e:	687b      	ldr	r3, [r7, #4]
 8024c60:	681b      	ldr	r3, [r3, #0]
 8024c62:	6859      	ldr	r1, [r3, #4]
 8024c64:	687b      	ldr	r3, [r7, #4]
 8024c66:	689a      	ldr	r2, [r3, #8]
 8024c68:	687b      	ldr	r3, [r7, #4]
 8024c6a:	681b      	ldr	r3, [r3, #0]
 8024c6c:	430a      	orrs	r2, r1
 8024c6e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8024c70:	687b      	ldr	r3, [r7, #4]
 8024c72:	681b      	ldr	r3, [r3, #0]
 8024c74:	689a      	ldr	r2, [r3, #8]
 8024c76:	687b      	ldr	r3, [r7, #4]
 8024c78:	681b      	ldr	r3, [r3, #0]
 8024c7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8024c7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8024c80:	687b      	ldr	r3, [r7, #4]
 8024c82:	681b      	ldr	r3, [r3, #0]
 8024c84:	6899      	ldr	r1, [r3, #8]
 8024c86:	687b      	ldr	r3, [r7, #4]
 8024c88:	68da      	ldr	r2, [r3, #12]
 8024c8a:	687b      	ldr	r3, [r7, #4]
 8024c8c:	681b      	ldr	r3, [r3, #0]
 8024c8e:	430a      	orrs	r2, r1
 8024c90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8024c92:	687b      	ldr	r3, [r7, #4]
 8024c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024c96:	4a58      	ldr	r2, [pc, #352]	; (8024df8 <ADC_Init+0x1f4>)
 8024c98:	4293      	cmp	r3, r2
 8024c9a:	d022      	beq.n	8024ce2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8024c9c:	687b      	ldr	r3, [r7, #4]
 8024c9e:	681b      	ldr	r3, [r3, #0]
 8024ca0:	689a      	ldr	r2, [r3, #8]
 8024ca2:	687b      	ldr	r3, [r7, #4]
 8024ca4:	681b      	ldr	r3, [r3, #0]
 8024ca6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8024caa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8024cac:	687b      	ldr	r3, [r7, #4]
 8024cae:	681b      	ldr	r3, [r3, #0]
 8024cb0:	6899      	ldr	r1, [r3, #8]
 8024cb2:	687b      	ldr	r3, [r7, #4]
 8024cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8024cb6:	687b      	ldr	r3, [r7, #4]
 8024cb8:	681b      	ldr	r3, [r3, #0]
 8024cba:	430a      	orrs	r2, r1
 8024cbc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8024cbe:	687b      	ldr	r3, [r7, #4]
 8024cc0:	681b      	ldr	r3, [r3, #0]
 8024cc2:	689a      	ldr	r2, [r3, #8]
 8024cc4:	687b      	ldr	r3, [r7, #4]
 8024cc6:	681b      	ldr	r3, [r3, #0]
 8024cc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8024ccc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8024cce:	687b      	ldr	r3, [r7, #4]
 8024cd0:	681b      	ldr	r3, [r3, #0]
 8024cd2:	6899      	ldr	r1, [r3, #8]
 8024cd4:	687b      	ldr	r3, [r7, #4]
 8024cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024cd8:	687b      	ldr	r3, [r7, #4]
 8024cda:	681b      	ldr	r3, [r3, #0]
 8024cdc:	430a      	orrs	r2, r1
 8024cde:	609a      	str	r2, [r3, #8]
 8024ce0:	e00f      	b.n	8024d02 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8024ce2:	687b      	ldr	r3, [r7, #4]
 8024ce4:	681b      	ldr	r3, [r3, #0]
 8024ce6:	689a      	ldr	r2, [r3, #8]
 8024ce8:	687b      	ldr	r3, [r7, #4]
 8024cea:	681b      	ldr	r3, [r3, #0]
 8024cec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8024cf0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8024cf2:	687b      	ldr	r3, [r7, #4]
 8024cf4:	681b      	ldr	r3, [r3, #0]
 8024cf6:	689a      	ldr	r2, [r3, #8]
 8024cf8:	687b      	ldr	r3, [r7, #4]
 8024cfa:	681b      	ldr	r3, [r3, #0]
 8024cfc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8024d00:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8024d02:	687b      	ldr	r3, [r7, #4]
 8024d04:	681b      	ldr	r3, [r3, #0]
 8024d06:	689a      	ldr	r2, [r3, #8]
 8024d08:	687b      	ldr	r3, [r7, #4]
 8024d0a:	681b      	ldr	r3, [r3, #0]
 8024d0c:	f022 0202 	bic.w	r2, r2, #2
 8024d10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8024d12:	687b      	ldr	r3, [r7, #4]
 8024d14:	681b      	ldr	r3, [r3, #0]
 8024d16:	6899      	ldr	r1, [r3, #8]
 8024d18:	687b      	ldr	r3, [r7, #4]
 8024d1a:	7e1b      	ldrb	r3, [r3, #24]
 8024d1c:	005a      	lsls	r2, r3, #1
 8024d1e:	687b      	ldr	r3, [r7, #4]
 8024d20:	681b      	ldr	r3, [r3, #0]
 8024d22:	430a      	orrs	r2, r1
 8024d24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8024d26:	687b      	ldr	r3, [r7, #4]
 8024d28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8024d2c:	2b00      	cmp	r3, #0
 8024d2e:	d01b      	beq.n	8024d68 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8024d30:	687b      	ldr	r3, [r7, #4]
 8024d32:	681b      	ldr	r3, [r3, #0]
 8024d34:	685a      	ldr	r2, [r3, #4]
 8024d36:	687b      	ldr	r3, [r7, #4]
 8024d38:	681b      	ldr	r3, [r3, #0]
 8024d3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8024d3e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8024d40:	687b      	ldr	r3, [r7, #4]
 8024d42:	681b      	ldr	r3, [r3, #0]
 8024d44:	685a      	ldr	r2, [r3, #4]
 8024d46:	687b      	ldr	r3, [r7, #4]
 8024d48:	681b      	ldr	r3, [r3, #0]
 8024d4a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8024d4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8024d50:	687b      	ldr	r3, [r7, #4]
 8024d52:	681b      	ldr	r3, [r3, #0]
 8024d54:	6859      	ldr	r1, [r3, #4]
 8024d56:	687b      	ldr	r3, [r7, #4]
 8024d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024d5a:	3b01      	subs	r3, #1
 8024d5c:	035a      	lsls	r2, r3, #13
 8024d5e:	687b      	ldr	r3, [r7, #4]
 8024d60:	681b      	ldr	r3, [r3, #0]
 8024d62:	430a      	orrs	r2, r1
 8024d64:	605a      	str	r2, [r3, #4]
 8024d66:	e007      	b.n	8024d78 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8024d68:	687b      	ldr	r3, [r7, #4]
 8024d6a:	681b      	ldr	r3, [r3, #0]
 8024d6c:	685a      	ldr	r2, [r3, #4]
 8024d6e:	687b      	ldr	r3, [r7, #4]
 8024d70:	681b      	ldr	r3, [r3, #0]
 8024d72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8024d76:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8024d78:	687b      	ldr	r3, [r7, #4]
 8024d7a:	681b      	ldr	r3, [r3, #0]
 8024d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024d7e:	687b      	ldr	r3, [r7, #4]
 8024d80:	681b      	ldr	r3, [r3, #0]
 8024d82:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8024d86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8024d88:	687b      	ldr	r3, [r7, #4]
 8024d8a:	681b      	ldr	r3, [r3, #0]
 8024d8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8024d8e:	687b      	ldr	r3, [r7, #4]
 8024d90:	69db      	ldr	r3, [r3, #28]
 8024d92:	3b01      	subs	r3, #1
 8024d94:	051a      	lsls	r2, r3, #20
 8024d96:	687b      	ldr	r3, [r7, #4]
 8024d98:	681b      	ldr	r3, [r3, #0]
 8024d9a:	430a      	orrs	r2, r1
 8024d9c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8024d9e:	687b      	ldr	r3, [r7, #4]
 8024da0:	681b      	ldr	r3, [r3, #0]
 8024da2:	689a      	ldr	r2, [r3, #8]
 8024da4:	687b      	ldr	r3, [r7, #4]
 8024da6:	681b      	ldr	r3, [r3, #0]
 8024da8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8024dac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8024dae:	687b      	ldr	r3, [r7, #4]
 8024db0:	681b      	ldr	r3, [r3, #0]
 8024db2:	6899      	ldr	r1, [r3, #8]
 8024db4:	687b      	ldr	r3, [r7, #4]
 8024db6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8024dba:	025a      	lsls	r2, r3, #9
 8024dbc:	687b      	ldr	r3, [r7, #4]
 8024dbe:	681b      	ldr	r3, [r3, #0]
 8024dc0:	430a      	orrs	r2, r1
 8024dc2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8024dc4:	687b      	ldr	r3, [r7, #4]
 8024dc6:	681b      	ldr	r3, [r3, #0]
 8024dc8:	689a      	ldr	r2, [r3, #8]
 8024dca:	687b      	ldr	r3, [r7, #4]
 8024dcc:	681b      	ldr	r3, [r3, #0]
 8024dce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8024dd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8024dd4:	687b      	ldr	r3, [r7, #4]
 8024dd6:	681b      	ldr	r3, [r3, #0]
 8024dd8:	6899      	ldr	r1, [r3, #8]
 8024dda:	687b      	ldr	r3, [r7, #4]
 8024ddc:	695b      	ldr	r3, [r3, #20]
 8024dde:	029a      	lsls	r2, r3, #10
 8024de0:	687b      	ldr	r3, [r7, #4]
 8024de2:	681b      	ldr	r3, [r3, #0]
 8024de4:	430a      	orrs	r2, r1
 8024de6:	609a      	str	r2, [r3, #8]
}
 8024de8:	bf00      	nop
 8024dea:	3714      	adds	r7, #20
 8024dec:	46bd      	mov	sp, r7
 8024dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024df2:	4770      	bx	lr
 8024df4:	40012300 	.word	0x40012300
 8024df8:	0f000001 	.word	0x0f000001

08024dfc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8024dfc:	b580      	push	{r7, lr}
 8024dfe:	b084      	sub	sp, #16
 8024e00:	af00      	add	r7, sp, #0
 8024e02:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8024e04:	687b      	ldr	r3, [r7, #4]
 8024e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024e08:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8024e0a:	68fb      	ldr	r3, [r7, #12]
 8024e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024e0e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8024e12:	2b00      	cmp	r3, #0
 8024e14:	d13c      	bne.n	8024e90 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8024e16:	68fb      	ldr	r3, [r7, #12]
 8024e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024e1a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8024e1e:	68fb      	ldr	r3, [r7, #12]
 8024e20:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8024e22:	68fb      	ldr	r3, [r7, #12]
 8024e24:	681b      	ldr	r3, [r3, #0]
 8024e26:	689b      	ldr	r3, [r3, #8]
 8024e28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8024e2c:	2b00      	cmp	r3, #0
 8024e2e:	d12b      	bne.n	8024e88 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8024e30:	68fb      	ldr	r3, [r7, #12]
 8024e32:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8024e34:	2b00      	cmp	r3, #0
 8024e36:	d127      	bne.n	8024e88 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8024e38:	68fb      	ldr	r3, [r7, #12]
 8024e3a:	681b      	ldr	r3, [r3, #0]
 8024e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024e3e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8024e42:	2b00      	cmp	r3, #0
 8024e44:	d006      	beq.n	8024e54 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8024e46:	68fb      	ldr	r3, [r7, #12]
 8024e48:	681b      	ldr	r3, [r3, #0]
 8024e4a:	689b      	ldr	r3, [r3, #8]
 8024e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8024e50:	2b00      	cmp	r3, #0
 8024e52:	d119      	bne.n	8024e88 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8024e54:	68fb      	ldr	r3, [r7, #12]
 8024e56:	681b      	ldr	r3, [r3, #0]
 8024e58:	685a      	ldr	r2, [r3, #4]
 8024e5a:	68fb      	ldr	r3, [r7, #12]
 8024e5c:	681b      	ldr	r3, [r3, #0]
 8024e5e:	f022 0220 	bic.w	r2, r2, #32
 8024e62:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8024e64:	68fb      	ldr	r3, [r7, #12]
 8024e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024e68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8024e6c:	68fb      	ldr	r3, [r7, #12]
 8024e6e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8024e70:	68fb      	ldr	r3, [r7, #12]
 8024e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024e74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8024e78:	2b00      	cmp	r3, #0
 8024e7a:	d105      	bne.n	8024e88 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8024e7c:	68fb      	ldr	r3, [r7, #12]
 8024e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024e80:	f043 0201 	orr.w	r2, r3, #1
 8024e84:	68fb      	ldr	r3, [r7, #12]
 8024e86:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8024e88:	68f8      	ldr	r0, [r7, #12]
 8024e8a:	f7ff fd7b 	bl	8024984 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8024e8e:	e00e      	b.n	8024eae <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8024e90:	68fb      	ldr	r3, [r7, #12]
 8024e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024e94:	f003 0310 	and.w	r3, r3, #16
 8024e98:	2b00      	cmp	r3, #0
 8024e9a:	d003      	beq.n	8024ea4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8024e9c:	68f8      	ldr	r0, [r7, #12]
 8024e9e:	f7ff fd85 	bl	80249ac <HAL_ADC_ErrorCallback>
}
 8024ea2:	e004      	b.n	8024eae <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8024ea4:	68fb      	ldr	r3, [r7, #12]
 8024ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8024eaa:	6878      	ldr	r0, [r7, #4]
 8024eac:	4798      	blx	r3
}
 8024eae:	bf00      	nop
 8024eb0:	3710      	adds	r7, #16
 8024eb2:	46bd      	mov	sp, r7
 8024eb4:	bd80      	pop	{r7, pc}

08024eb6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8024eb6:	b580      	push	{r7, lr}
 8024eb8:	b084      	sub	sp, #16
 8024eba:	af00      	add	r7, sp, #0
 8024ebc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8024ebe:	687b      	ldr	r3, [r7, #4]
 8024ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024ec2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8024ec4:	68f8      	ldr	r0, [r7, #12]
 8024ec6:	f7ff fd67 	bl	8024998 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8024eca:	bf00      	nop
 8024ecc:	3710      	adds	r7, #16
 8024ece:	46bd      	mov	sp, r7
 8024ed0:	bd80      	pop	{r7, pc}

08024ed2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8024ed2:	b580      	push	{r7, lr}
 8024ed4:	b084      	sub	sp, #16
 8024ed6:	af00      	add	r7, sp, #0
 8024ed8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8024eda:	687b      	ldr	r3, [r7, #4]
 8024edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024ede:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8024ee0:	68fb      	ldr	r3, [r7, #12]
 8024ee2:	2240      	movs	r2, #64	; 0x40
 8024ee4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8024ee6:	68fb      	ldr	r3, [r7, #12]
 8024ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024eea:	f043 0204 	orr.w	r2, r3, #4
 8024eee:	68fb      	ldr	r3, [r7, #12]
 8024ef0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8024ef2:	68f8      	ldr	r0, [r7, #12]
 8024ef4:	f7ff fd5a 	bl	80249ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8024ef8:	bf00      	nop
 8024efa:	3710      	adds	r7, #16
 8024efc:	46bd      	mov	sp, r7
 8024efe:	bd80      	pop	{r7, pc}

08024f00 <__NVIC_SetPriorityGrouping>:
{
 8024f00:	b480      	push	{r7}
 8024f02:	b085      	sub	sp, #20
 8024f04:	af00      	add	r7, sp, #0
 8024f06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8024f08:	687b      	ldr	r3, [r7, #4]
 8024f0a:	f003 0307 	and.w	r3, r3, #7
 8024f0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8024f10:	4b0c      	ldr	r3, [pc, #48]	; (8024f44 <__NVIC_SetPriorityGrouping+0x44>)
 8024f12:	68db      	ldr	r3, [r3, #12]
 8024f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8024f16:	68ba      	ldr	r2, [r7, #8]
 8024f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8024f1c:	4013      	ands	r3, r2
 8024f1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8024f20:	68fb      	ldr	r3, [r7, #12]
 8024f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8024f24:	68bb      	ldr	r3, [r7, #8]
 8024f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8024f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8024f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8024f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8024f32:	4a04      	ldr	r2, [pc, #16]	; (8024f44 <__NVIC_SetPriorityGrouping+0x44>)
 8024f34:	68bb      	ldr	r3, [r7, #8]
 8024f36:	60d3      	str	r3, [r2, #12]
}
 8024f38:	bf00      	nop
 8024f3a:	3714      	adds	r7, #20
 8024f3c:	46bd      	mov	sp, r7
 8024f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f42:	4770      	bx	lr
 8024f44:	e000ed00 	.word	0xe000ed00

08024f48 <__NVIC_GetPriorityGrouping>:
{
 8024f48:	b480      	push	{r7}
 8024f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8024f4c:	4b04      	ldr	r3, [pc, #16]	; (8024f60 <__NVIC_GetPriorityGrouping+0x18>)
 8024f4e:	68db      	ldr	r3, [r3, #12]
 8024f50:	0a1b      	lsrs	r3, r3, #8
 8024f52:	f003 0307 	and.w	r3, r3, #7
}
 8024f56:	4618      	mov	r0, r3
 8024f58:	46bd      	mov	sp, r7
 8024f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f5e:	4770      	bx	lr
 8024f60:	e000ed00 	.word	0xe000ed00

08024f64 <__NVIC_EnableIRQ>:
{
 8024f64:	b480      	push	{r7}
 8024f66:	b083      	sub	sp, #12
 8024f68:	af00      	add	r7, sp, #0
 8024f6a:	4603      	mov	r3, r0
 8024f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8024f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024f72:	2b00      	cmp	r3, #0
 8024f74:	db0b      	blt.n	8024f8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8024f76:	79fb      	ldrb	r3, [r7, #7]
 8024f78:	f003 021f 	and.w	r2, r3, #31
 8024f7c:	4907      	ldr	r1, [pc, #28]	; (8024f9c <__NVIC_EnableIRQ+0x38>)
 8024f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024f82:	095b      	lsrs	r3, r3, #5
 8024f84:	2001      	movs	r0, #1
 8024f86:	fa00 f202 	lsl.w	r2, r0, r2
 8024f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8024f8e:	bf00      	nop
 8024f90:	370c      	adds	r7, #12
 8024f92:	46bd      	mov	sp, r7
 8024f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024f98:	4770      	bx	lr
 8024f9a:	bf00      	nop
 8024f9c:	e000e100 	.word	0xe000e100

08024fa0 <__NVIC_SetPriority>:
{
 8024fa0:	b480      	push	{r7}
 8024fa2:	b083      	sub	sp, #12
 8024fa4:	af00      	add	r7, sp, #0
 8024fa6:	4603      	mov	r3, r0
 8024fa8:	6039      	str	r1, [r7, #0]
 8024faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8024fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024fb0:	2b00      	cmp	r3, #0
 8024fb2:	db0a      	blt.n	8024fca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8024fb4:	683b      	ldr	r3, [r7, #0]
 8024fb6:	b2da      	uxtb	r2, r3
 8024fb8:	490c      	ldr	r1, [pc, #48]	; (8024fec <__NVIC_SetPriority+0x4c>)
 8024fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024fbe:	0112      	lsls	r2, r2, #4
 8024fc0:	b2d2      	uxtb	r2, r2
 8024fc2:	440b      	add	r3, r1
 8024fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8024fc8:	e00a      	b.n	8024fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8024fca:	683b      	ldr	r3, [r7, #0]
 8024fcc:	b2da      	uxtb	r2, r3
 8024fce:	4908      	ldr	r1, [pc, #32]	; (8024ff0 <__NVIC_SetPriority+0x50>)
 8024fd0:	79fb      	ldrb	r3, [r7, #7]
 8024fd2:	f003 030f 	and.w	r3, r3, #15
 8024fd6:	3b04      	subs	r3, #4
 8024fd8:	0112      	lsls	r2, r2, #4
 8024fda:	b2d2      	uxtb	r2, r2
 8024fdc:	440b      	add	r3, r1
 8024fde:	761a      	strb	r2, [r3, #24]
}
 8024fe0:	bf00      	nop
 8024fe2:	370c      	adds	r7, #12
 8024fe4:	46bd      	mov	sp, r7
 8024fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024fea:	4770      	bx	lr
 8024fec:	e000e100 	.word	0xe000e100
 8024ff0:	e000ed00 	.word	0xe000ed00

08024ff4 <NVIC_EncodePriority>:
{
 8024ff4:	b480      	push	{r7}
 8024ff6:	b089      	sub	sp, #36	; 0x24
 8024ff8:	af00      	add	r7, sp, #0
 8024ffa:	60f8      	str	r0, [r7, #12]
 8024ffc:	60b9      	str	r1, [r7, #8]
 8024ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8025000:	68fb      	ldr	r3, [r7, #12]
 8025002:	f003 0307 	and.w	r3, r3, #7
 8025006:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8025008:	69fb      	ldr	r3, [r7, #28]
 802500a:	f1c3 0307 	rsb	r3, r3, #7
 802500e:	2b04      	cmp	r3, #4
 8025010:	bf28      	it	cs
 8025012:	2304      	movcs	r3, #4
 8025014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8025016:	69fb      	ldr	r3, [r7, #28]
 8025018:	3304      	adds	r3, #4
 802501a:	2b06      	cmp	r3, #6
 802501c:	d902      	bls.n	8025024 <NVIC_EncodePriority+0x30>
 802501e:	69fb      	ldr	r3, [r7, #28]
 8025020:	3b03      	subs	r3, #3
 8025022:	e000      	b.n	8025026 <NVIC_EncodePriority+0x32>
 8025024:	2300      	movs	r3, #0
 8025026:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8025028:	f04f 32ff 	mov.w	r2, #4294967295
 802502c:	69bb      	ldr	r3, [r7, #24]
 802502e:	fa02 f303 	lsl.w	r3, r2, r3
 8025032:	43da      	mvns	r2, r3
 8025034:	68bb      	ldr	r3, [r7, #8]
 8025036:	401a      	ands	r2, r3
 8025038:	697b      	ldr	r3, [r7, #20]
 802503a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 802503c:	f04f 31ff 	mov.w	r1, #4294967295
 8025040:	697b      	ldr	r3, [r7, #20]
 8025042:	fa01 f303 	lsl.w	r3, r1, r3
 8025046:	43d9      	mvns	r1, r3
 8025048:	687b      	ldr	r3, [r7, #4]
 802504a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 802504c:	4313      	orrs	r3, r2
}
 802504e:	4618      	mov	r0, r3
 8025050:	3724      	adds	r7, #36	; 0x24
 8025052:	46bd      	mov	sp, r7
 8025054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025058:	4770      	bx	lr
	...

0802505c <SysTick_Config>:
{
 802505c:	b580      	push	{r7, lr}
 802505e:	b082      	sub	sp, #8
 8025060:	af00      	add	r7, sp, #0
 8025062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8025064:	687b      	ldr	r3, [r7, #4]
 8025066:	3b01      	subs	r3, #1
 8025068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802506c:	d301      	bcc.n	8025072 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 802506e:	2301      	movs	r3, #1
 8025070:	e00f      	b.n	8025092 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8025072:	4a0a      	ldr	r2, [pc, #40]	; (802509c <SysTick_Config+0x40>)
 8025074:	687b      	ldr	r3, [r7, #4]
 8025076:	3b01      	subs	r3, #1
 8025078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 802507a:	210f      	movs	r1, #15
 802507c:	f04f 30ff 	mov.w	r0, #4294967295
 8025080:	f7ff ff8e 	bl	8024fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8025084:	4b05      	ldr	r3, [pc, #20]	; (802509c <SysTick_Config+0x40>)
 8025086:	2200      	movs	r2, #0
 8025088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 802508a:	4b04      	ldr	r3, [pc, #16]	; (802509c <SysTick_Config+0x40>)
 802508c:	2207      	movs	r2, #7
 802508e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8025090:	2300      	movs	r3, #0
}
 8025092:	4618      	mov	r0, r3
 8025094:	3708      	adds	r7, #8
 8025096:	46bd      	mov	sp, r7
 8025098:	bd80      	pop	{r7, pc}
 802509a:	bf00      	nop
 802509c:	e000e010 	.word	0xe000e010

080250a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80250a0:	b580      	push	{r7, lr}
 80250a2:	b082      	sub	sp, #8
 80250a4:	af00      	add	r7, sp, #0
 80250a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80250a8:	6878      	ldr	r0, [r7, #4]
 80250aa:	f7ff ff29 	bl	8024f00 <__NVIC_SetPriorityGrouping>
}
 80250ae:	bf00      	nop
 80250b0:	3708      	adds	r7, #8
 80250b2:	46bd      	mov	sp, r7
 80250b4:	bd80      	pop	{r7, pc}

080250b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80250b6:	b580      	push	{r7, lr}
 80250b8:	b086      	sub	sp, #24
 80250ba:	af00      	add	r7, sp, #0
 80250bc:	4603      	mov	r3, r0
 80250be:	60b9      	str	r1, [r7, #8]
 80250c0:	607a      	str	r2, [r7, #4]
 80250c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80250c4:	2300      	movs	r3, #0
 80250c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80250c8:	f7ff ff3e 	bl	8024f48 <__NVIC_GetPriorityGrouping>
 80250cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80250ce:	687a      	ldr	r2, [r7, #4]
 80250d0:	68b9      	ldr	r1, [r7, #8]
 80250d2:	6978      	ldr	r0, [r7, #20]
 80250d4:	f7ff ff8e 	bl	8024ff4 <NVIC_EncodePriority>
 80250d8:	4602      	mov	r2, r0
 80250da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80250de:	4611      	mov	r1, r2
 80250e0:	4618      	mov	r0, r3
 80250e2:	f7ff ff5d 	bl	8024fa0 <__NVIC_SetPriority>
}
 80250e6:	bf00      	nop
 80250e8:	3718      	adds	r7, #24
 80250ea:	46bd      	mov	sp, r7
 80250ec:	bd80      	pop	{r7, pc}

080250ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80250ee:	b580      	push	{r7, lr}
 80250f0:	b082      	sub	sp, #8
 80250f2:	af00      	add	r7, sp, #0
 80250f4:	4603      	mov	r3, r0
 80250f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80250f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80250fc:	4618      	mov	r0, r3
 80250fe:	f7ff ff31 	bl	8024f64 <__NVIC_EnableIRQ>
}
 8025102:	bf00      	nop
 8025104:	3708      	adds	r7, #8
 8025106:	46bd      	mov	sp, r7
 8025108:	bd80      	pop	{r7, pc}

0802510a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802510a:	b580      	push	{r7, lr}
 802510c:	b082      	sub	sp, #8
 802510e:	af00      	add	r7, sp, #0
 8025110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8025112:	6878      	ldr	r0, [r7, #4]
 8025114:	f7ff ffa2 	bl	802505c <SysTick_Config>
 8025118:	4603      	mov	r3, r0
}
 802511a:	4618      	mov	r0, r3
 802511c:	3708      	adds	r7, #8
 802511e:	46bd      	mov	sp, r7
 8025120:	bd80      	pop	{r7, pc}
	...

08025124 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8025124:	b580      	push	{r7, lr}
 8025126:	b086      	sub	sp, #24
 8025128:	af00      	add	r7, sp, #0
 802512a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 802512c:	2300      	movs	r3, #0
 802512e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8025130:	f7ff fac4 	bl	80246bc <HAL_GetTick>
 8025134:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8025136:	687b      	ldr	r3, [r7, #4]
 8025138:	2b00      	cmp	r3, #0
 802513a:	d101      	bne.n	8025140 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 802513c:	2301      	movs	r3, #1
 802513e:	e099      	b.n	8025274 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8025140:	687b      	ldr	r3, [r7, #4]
 8025142:	2200      	movs	r2, #0
 8025144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8025148:	687b      	ldr	r3, [r7, #4]
 802514a:	2202      	movs	r2, #2
 802514c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8025150:	687b      	ldr	r3, [r7, #4]
 8025152:	681b      	ldr	r3, [r3, #0]
 8025154:	681a      	ldr	r2, [r3, #0]
 8025156:	687b      	ldr	r3, [r7, #4]
 8025158:	681b      	ldr	r3, [r3, #0]
 802515a:	f022 0201 	bic.w	r2, r2, #1
 802515e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8025160:	e00f      	b.n	8025182 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8025162:	f7ff faab 	bl	80246bc <HAL_GetTick>
 8025166:	4602      	mov	r2, r0
 8025168:	693b      	ldr	r3, [r7, #16]
 802516a:	1ad3      	subs	r3, r2, r3
 802516c:	2b05      	cmp	r3, #5
 802516e:	d908      	bls.n	8025182 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8025170:	687b      	ldr	r3, [r7, #4]
 8025172:	2220      	movs	r2, #32
 8025174:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8025176:	687b      	ldr	r3, [r7, #4]
 8025178:	2203      	movs	r2, #3
 802517a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 802517e:	2303      	movs	r3, #3
 8025180:	e078      	b.n	8025274 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8025182:	687b      	ldr	r3, [r7, #4]
 8025184:	681b      	ldr	r3, [r3, #0]
 8025186:	681b      	ldr	r3, [r3, #0]
 8025188:	f003 0301 	and.w	r3, r3, #1
 802518c:	2b00      	cmp	r3, #0
 802518e:	d1e8      	bne.n	8025162 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8025190:	687b      	ldr	r3, [r7, #4]
 8025192:	681b      	ldr	r3, [r3, #0]
 8025194:	681b      	ldr	r3, [r3, #0]
 8025196:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8025198:	697a      	ldr	r2, [r7, #20]
 802519a:	4b38      	ldr	r3, [pc, #224]	; (802527c <HAL_DMA_Init+0x158>)
 802519c:	4013      	ands	r3, r2
 802519e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80251a0:	687b      	ldr	r3, [r7, #4]
 80251a2:	685a      	ldr	r2, [r3, #4]
 80251a4:	687b      	ldr	r3, [r7, #4]
 80251a6:	689b      	ldr	r3, [r3, #8]
 80251a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80251aa:	687b      	ldr	r3, [r7, #4]
 80251ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80251ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80251b0:	687b      	ldr	r3, [r7, #4]
 80251b2:	691b      	ldr	r3, [r3, #16]
 80251b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80251b6:	687b      	ldr	r3, [r7, #4]
 80251b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80251ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80251bc:	687b      	ldr	r3, [r7, #4]
 80251be:	699b      	ldr	r3, [r3, #24]
 80251c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80251c2:	687b      	ldr	r3, [r7, #4]
 80251c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80251c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80251c8:	687b      	ldr	r3, [r7, #4]
 80251ca:	6a1b      	ldr	r3, [r3, #32]
 80251cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80251ce:	697a      	ldr	r2, [r7, #20]
 80251d0:	4313      	orrs	r3, r2
 80251d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80251d4:	687b      	ldr	r3, [r7, #4]
 80251d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80251d8:	2b04      	cmp	r3, #4
 80251da:	d107      	bne.n	80251ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80251dc:	687b      	ldr	r3, [r7, #4]
 80251de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80251e0:	687b      	ldr	r3, [r7, #4]
 80251e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80251e4:	4313      	orrs	r3, r2
 80251e6:	697a      	ldr	r2, [r7, #20]
 80251e8:	4313      	orrs	r3, r2
 80251ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80251ec:	687b      	ldr	r3, [r7, #4]
 80251ee:	681b      	ldr	r3, [r3, #0]
 80251f0:	697a      	ldr	r2, [r7, #20]
 80251f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80251f4:	687b      	ldr	r3, [r7, #4]
 80251f6:	681b      	ldr	r3, [r3, #0]
 80251f8:	695b      	ldr	r3, [r3, #20]
 80251fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80251fc:	697b      	ldr	r3, [r7, #20]
 80251fe:	f023 0307 	bic.w	r3, r3, #7
 8025202:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8025204:	687b      	ldr	r3, [r7, #4]
 8025206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025208:	697a      	ldr	r2, [r7, #20]
 802520a:	4313      	orrs	r3, r2
 802520c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802520e:	687b      	ldr	r3, [r7, #4]
 8025210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025212:	2b04      	cmp	r3, #4
 8025214:	d117      	bne.n	8025246 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8025216:	687b      	ldr	r3, [r7, #4]
 8025218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802521a:	697a      	ldr	r2, [r7, #20]
 802521c:	4313      	orrs	r3, r2
 802521e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8025220:	687b      	ldr	r3, [r7, #4]
 8025222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025224:	2b00      	cmp	r3, #0
 8025226:	d00e      	beq.n	8025246 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8025228:	6878      	ldr	r0, [r7, #4]
 802522a:	f000 fa6f 	bl	802570c <DMA_CheckFifoParam>
 802522e:	4603      	mov	r3, r0
 8025230:	2b00      	cmp	r3, #0
 8025232:	d008      	beq.n	8025246 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8025234:	687b      	ldr	r3, [r7, #4]
 8025236:	2240      	movs	r2, #64	; 0x40
 8025238:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 802523a:	687b      	ldr	r3, [r7, #4]
 802523c:	2201      	movs	r2, #1
 802523e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8025242:	2301      	movs	r3, #1
 8025244:	e016      	b.n	8025274 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8025246:	687b      	ldr	r3, [r7, #4]
 8025248:	681b      	ldr	r3, [r3, #0]
 802524a:	697a      	ldr	r2, [r7, #20]
 802524c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 802524e:	6878      	ldr	r0, [r7, #4]
 8025250:	f000 fa26 	bl	80256a0 <DMA_CalcBaseAndBitshift>
 8025254:	4603      	mov	r3, r0
 8025256:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8025258:	687b      	ldr	r3, [r7, #4]
 802525a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802525c:	223f      	movs	r2, #63	; 0x3f
 802525e:	409a      	lsls	r2, r3
 8025260:	68fb      	ldr	r3, [r7, #12]
 8025262:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8025264:	687b      	ldr	r3, [r7, #4]
 8025266:	2200      	movs	r2, #0
 8025268:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 802526a:	687b      	ldr	r3, [r7, #4]
 802526c:	2201      	movs	r2, #1
 802526e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8025272:	2300      	movs	r3, #0
}
 8025274:	4618      	mov	r0, r3
 8025276:	3718      	adds	r7, #24
 8025278:	46bd      	mov	sp, r7
 802527a:	bd80      	pop	{r7, pc}
 802527c:	f010803f 	.word	0xf010803f

08025280 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8025280:	b580      	push	{r7, lr}
 8025282:	b086      	sub	sp, #24
 8025284:	af00      	add	r7, sp, #0
 8025286:	60f8      	str	r0, [r7, #12]
 8025288:	60b9      	str	r1, [r7, #8]
 802528a:	607a      	str	r2, [r7, #4]
 802528c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802528e:	2300      	movs	r3, #0
 8025290:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8025292:	68fb      	ldr	r3, [r7, #12]
 8025294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8025296:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8025298:	68fb      	ldr	r3, [r7, #12]
 802529a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802529e:	2b01      	cmp	r3, #1
 80252a0:	d101      	bne.n	80252a6 <HAL_DMA_Start_IT+0x26>
 80252a2:	2302      	movs	r3, #2
 80252a4:	e040      	b.n	8025328 <HAL_DMA_Start_IT+0xa8>
 80252a6:	68fb      	ldr	r3, [r7, #12]
 80252a8:	2201      	movs	r2, #1
 80252aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80252ae:	68fb      	ldr	r3, [r7, #12]
 80252b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80252b4:	b2db      	uxtb	r3, r3
 80252b6:	2b01      	cmp	r3, #1
 80252b8:	d12f      	bne.n	802531a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80252ba:	68fb      	ldr	r3, [r7, #12]
 80252bc:	2202      	movs	r2, #2
 80252be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80252c2:	68fb      	ldr	r3, [r7, #12]
 80252c4:	2200      	movs	r2, #0
 80252c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80252c8:	683b      	ldr	r3, [r7, #0]
 80252ca:	687a      	ldr	r2, [r7, #4]
 80252cc:	68b9      	ldr	r1, [r7, #8]
 80252ce:	68f8      	ldr	r0, [r7, #12]
 80252d0:	f000 f9b8 	bl	8025644 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80252d4:	68fb      	ldr	r3, [r7, #12]
 80252d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80252d8:	223f      	movs	r2, #63	; 0x3f
 80252da:	409a      	lsls	r2, r3
 80252dc:	693b      	ldr	r3, [r7, #16]
 80252de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80252e0:	68fb      	ldr	r3, [r7, #12]
 80252e2:	681b      	ldr	r3, [r3, #0]
 80252e4:	681a      	ldr	r2, [r3, #0]
 80252e6:	68fb      	ldr	r3, [r7, #12]
 80252e8:	681b      	ldr	r3, [r3, #0]
 80252ea:	f042 0216 	orr.w	r2, r2, #22
 80252ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80252f0:	68fb      	ldr	r3, [r7, #12]
 80252f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80252f4:	2b00      	cmp	r3, #0
 80252f6:	d007      	beq.n	8025308 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80252f8:	68fb      	ldr	r3, [r7, #12]
 80252fa:	681b      	ldr	r3, [r3, #0]
 80252fc:	681a      	ldr	r2, [r3, #0]
 80252fe:	68fb      	ldr	r3, [r7, #12]
 8025300:	681b      	ldr	r3, [r3, #0]
 8025302:	f042 0208 	orr.w	r2, r2, #8
 8025306:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8025308:	68fb      	ldr	r3, [r7, #12]
 802530a:	681b      	ldr	r3, [r3, #0]
 802530c:	681a      	ldr	r2, [r3, #0]
 802530e:	68fb      	ldr	r3, [r7, #12]
 8025310:	681b      	ldr	r3, [r3, #0]
 8025312:	f042 0201 	orr.w	r2, r2, #1
 8025316:	601a      	str	r2, [r3, #0]
 8025318:	e005      	b.n	8025326 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 802531a:	68fb      	ldr	r3, [r7, #12]
 802531c:	2200      	movs	r2, #0
 802531e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8025322:	2302      	movs	r3, #2
 8025324:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8025326:	7dfb      	ldrb	r3, [r7, #23]
}
 8025328:	4618      	mov	r0, r3
 802532a:	3718      	adds	r7, #24
 802532c:	46bd      	mov	sp, r7
 802532e:	bd80      	pop	{r7, pc}

08025330 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8025330:	b580      	push	{r7, lr}
 8025332:	b086      	sub	sp, #24
 8025334:	af00      	add	r7, sp, #0
 8025336:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8025338:	2300      	movs	r3, #0
 802533a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 802533c:	4b92      	ldr	r3, [pc, #584]	; (8025588 <HAL_DMA_IRQHandler+0x258>)
 802533e:	681b      	ldr	r3, [r3, #0]
 8025340:	4a92      	ldr	r2, [pc, #584]	; (802558c <HAL_DMA_IRQHandler+0x25c>)
 8025342:	fba2 2303 	umull	r2, r3, r2, r3
 8025346:	0a9b      	lsrs	r3, r3, #10
 8025348:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802534a:	687b      	ldr	r3, [r7, #4]
 802534c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802534e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8025350:	693b      	ldr	r3, [r7, #16]
 8025352:	681b      	ldr	r3, [r3, #0]
 8025354:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8025356:	687b      	ldr	r3, [r7, #4]
 8025358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802535a:	2208      	movs	r2, #8
 802535c:	409a      	lsls	r2, r3
 802535e:	68fb      	ldr	r3, [r7, #12]
 8025360:	4013      	ands	r3, r2
 8025362:	2b00      	cmp	r3, #0
 8025364:	d01a      	beq.n	802539c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8025366:	687b      	ldr	r3, [r7, #4]
 8025368:	681b      	ldr	r3, [r3, #0]
 802536a:	681b      	ldr	r3, [r3, #0]
 802536c:	f003 0304 	and.w	r3, r3, #4
 8025370:	2b00      	cmp	r3, #0
 8025372:	d013      	beq.n	802539c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8025374:	687b      	ldr	r3, [r7, #4]
 8025376:	681b      	ldr	r3, [r3, #0]
 8025378:	681a      	ldr	r2, [r3, #0]
 802537a:	687b      	ldr	r3, [r7, #4]
 802537c:	681b      	ldr	r3, [r3, #0]
 802537e:	f022 0204 	bic.w	r2, r2, #4
 8025382:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8025384:	687b      	ldr	r3, [r7, #4]
 8025386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8025388:	2208      	movs	r2, #8
 802538a:	409a      	lsls	r2, r3
 802538c:	693b      	ldr	r3, [r7, #16]
 802538e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8025390:	687b      	ldr	r3, [r7, #4]
 8025392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8025394:	f043 0201 	orr.w	r2, r3, #1
 8025398:	687b      	ldr	r3, [r7, #4]
 802539a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 802539c:	687b      	ldr	r3, [r7, #4]
 802539e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80253a0:	2201      	movs	r2, #1
 80253a2:	409a      	lsls	r2, r3
 80253a4:	68fb      	ldr	r3, [r7, #12]
 80253a6:	4013      	ands	r3, r2
 80253a8:	2b00      	cmp	r3, #0
 80253aa:	d012      	beq.n	80253d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80253ac:	687b      	ldr	r3, [r7, #4]
 80253ae:	681b      	ldr	r3, [r3, #0]
 80253b0:	695b      	ldr	r3, [r3, #20]
 80253b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80253b6:	2b00      	cmp	r3, #0
 80253b8:	d00b      	beq.n	80253d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80253ba:	687b      	ldr	r3, [r7, #4]
 80253bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80253be:	2201      	movs	r2, #1
 80253c0:	409a      	lsls	r2, r3
 80253c2:	693b      	ldr	r3, [r7, #16]
 80253c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80253c6:	687b      	ldr	r3, [r7, #4]
 80253c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80253ca:	f043 0202 	orr.w	r2, r3, #2
 80253ce:	687b      	ldr	r3, [r7, #4]
 80253d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80253d2:	687b      	ldr	r3, [r7, #4]
 80253d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80253d6:	2204      	movs	r2, #4
 80253d8:	409a      	lsls	r2, r3
 80253da:	68fb      	ldr	r3, [r7, #12]
 80253dc:	4013      	ands	r3, r2
 80253de:	2b00      	cmp	r3, #0
 80253e0:	d012      	beq.n	8025408 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80253e2:	687b      	ldr	r3, [r7, #4]
 80253e4:	681b      	ldr	r3, [r3, #0]
 80253e6:	681b      	ldr	r3, [r3, #0]
 80253e8:	f003 0302 	and.w	r3, r3, #2
 80253ec:	2b00      	cmp	r3, #0
 80253ee:	d00b      	beq.n	8025408 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80253f0:	687b      	ldr	r3, [r7, #4]
 80253f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80253f4:	2204      	movs	r2, #4
 80253f6:	409a      	lsls	r2, r3
 80253f8:	693b      	ldr	r3, [r7, #16]
 80253fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80253fc:	687b      	ldr	r3, [r7, #4]
 80253fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8025400:	f043 0204 	orr.w	r2, r3, #4
 8025404:	687b      	ldr	r3, [r7, #4]
 8025406:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8025408:	687b      	ldr	r3, [r7, #4]
 802540a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802540c:	2210      	movs	r2, #16
 802540e:	409a      	lsls	r2, r3
 8025410:	68fb      	ldr	r3, [r7, #12]
 8025412:	4013      	ands	r3, r2
 8025414:	2b00      	cmp	r3, #0
 8025416:	d043      	beq.n	80254a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8025418:	687b      	ldr	r3, [r7, #4]
 802541a:	681b      	ldr	r3, [r3, #0]
 802541c:	681b      	ldr	r3, [r3, #0]
 802541e:	f003 0308 	and.w	r3, r3, #8
 8025422:	2b00      	cmp	r3, #0
 8025424:	d03c      	beq.n	80254a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8025426:	687b      	ldr	r3, [r7, #4]
 8025428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802542a:	2210      	movs	r2, #16
 802542c:	409a      	lsls	r2, r3
 802542e:	693b      	ldr	r3, [r7, #16]
 8025430:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8025432:	687b      	ldr	r3, [r7, #4]
 8025434:	681b      	ldr	r3, [r3, #0]
 8025436:	681b      	ldr	r3, [r3, #0]
 8025438:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802543c:	2b00      	cmp	r3, #0
 802543e:	d018      	beq.n	8025472 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8025440:	687b      	ldr	r3, [r7, #4]
 8025442:	681b      	ldr	r3, [r3, #0]
 8025444:	681b      	ldr	r3, [r3, #0]
 8025446:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802544a:	2b00      	cmp	r3, #0
 802544c:	d108      	bne.n	8025460 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 802544e:	687b      	ldr	r3, [r7, #4]
 8025450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025452:	2b00      	cmp	r3, #0
 8025454:	d024      	beq.n	80254a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8025456:	687b      	ldr	r3, [r7, #4]
 8025458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802545a:	6878      	ldr	r0, [r7, #4]
 802545c:	4798      	blx	r3
 802545e:	e01f      	b.n	80254a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8025460:	687b      	ldr	r3, [r7, #4]
 8025462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8025464:	2b00      	cmp	r3, #0
 8025466:	d01b      	beq.n	80254a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8025468:	687b      	ldr	r3, [r7, #4]
 802546a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802546c:	6878      	ldr	r0, [r7, #4]
 802546e:	4798      	blx	r3
 8025470:	e016      	b.n	80254a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8025472:	687b      	ldr	r3, [r7, #4]
 8025474:	681b      	ldr	r3, [r3, #0]
 8025476:	681b      	ldr	r3, [r3, #0]
 8025478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802547c:	2b00      	cmp	r3, #0
 802547e:	d107      	bne.n	8025490 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8025480:	687b      	ldr	r3, [r7, #4]
 8025482:	681b      	ldr	r3, [r3, #0]
 8025484:	681a      	ldr	r2, [r3, #0]
 8025486:	687b      	ldr	r3, [r7, #4]
 8025488:	681b      	ldr	r3, [r3, #0]
 802548a:	f022 0208 	bic.w	r2, r2, #8
 802548e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8025490:	687b      	ldr	r3, [r7, #4]
 8025492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025494:	2b00      	cmp	r3, #0
 8025496:	d003      	beq.n	80254a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8025498:	687b      	ldr	r3, [r7, #4]
 802549a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802549c:	6878      	ldr	r0, [r7, #4]
 802549e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80254a0:	687b      	ldr	r3, [r7, #4]
 80254a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80254a4:	2220      	movs	r2, #32
 80254a6:	409a      	lsls	r2, r3
 80254a8:	68fb      	ldr	r3, [r7, #12]
 80254aa:	4013      	ands	r3, r2
 80254ac:	2b00      	cmp	r3, #0
 80254ae:	f000 808e 	beq.w	80255ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80254b2:	687b      	ldr	r3, [r7, #4]
 80254b4:	681b      	ldr	r3, [r3, #0]
 80254b6:	681b      	ldr	r3, [r3, #0]
 80254b8:	f003 0310 	and.w	r3, r3, #16
 80254bc:	2b00      	cmp	r3, #0
 80254be:	f000 8086 	beq.w	80255ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80254c2:	687b      	ldr	r3, [r7, #4]
 80254c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80254c6:	2220      	movs	r2, #32
 80254c8:	409a      	lsls	r2, r3
 80254ca:	693b      	ldr	r3, [r7, #16]
 80254cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80254ce:	687b      	ldr	r3, [r7, #4]
 80254d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80254d4:	b2db      	uxtb	r3, r3
 80254d6:	2b05      	cmp	r3, #5
 80254d8:	d136      	bne.n	8025548 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80254da:	687b      	ldr	r3, [r7, #4]
 80254dc:	681b      	ldr	r3, [r3, #0]
 80254de:	681a      	ldr	r2, [r3, #0]
 80254e0:	687b      	ldr	r3, [r7, #4]
 80254e2:	681b      	ldr	r3, [r3, #0]
 80254e4:	f022 0216 	bic.w	r2, r2, #22
 80254e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80254ea:	687b      	ldr	r3, [r7, #4]
 80254ec:	681b      	ldr	r3, [r3, #0]
 80254ee:	695a      	ldr	r2, [r3, #20]
 80254f0:	687b      	ldr	r3, [r7, #4]
 80254f2:	681b      	ldr	r3, [r3, #0]
 80254f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80254f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80254fa:	687b      	ldr	r3, [r7, #4]
 80254fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80254fe:	2b00      	cmp	r3, #0
 8025500:	d103      	bne.n	802550a <HAL_DMA_IRQHandler+0x1da>
 8025502:	687b      	ldr	r3, [r7, #4]
 8025504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8025506:	2b00      	cmp	r3, #0
 8025508:	d007      	beq.n	802551a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 802550a:	687b      	ldr	r3, [r7, #4]
 802550c:	681b      	ldr	r3, [r3, #0]
 802550e:	681a      	ldr	r2, [r3, #0]
 8025510:	687b      	ldr	r3, [r7, #4]
 8025512:	681b      	ldr	r3, [r3, #0]
 8025514:	f022 0208 	bic.w	r2, r2, #8
 8025518:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 802551a:	687b      	ldr	r3, [r7, #4]
 802551c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802551e:	223f      	movs	r2, #63	; 0x3f
 8025520:	409a      	lsls	r2, r3
 8025522:	693b      	ldr	r3, [r7, #16]
 8025524:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8025526:	687b      	ldr	r3, [r7, #4]
 8025528:	2200      	movs	r2, #0
 802552a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 802552e:	687b      	ldr	r3, [r7, #4]
 8025530:	2201      	movs	r2, #1
 8025532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8025536:	687b      	ldr	r3, [r7, #4]
 8025538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802553a:	2b00      	cmp	r3, #0
 802553c:	d07d      	beq.n	802563a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 802553e:	687b      	ldr	r3, [r7, #4]
 8025540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8025542:	6878      	ldr	r0, [r7, #4]
 8025544:	4798      	blx	r3
        }
        return;
 8025546:	e078      	b.n	802563a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8025548:	687b      	ldr	r3, [r7, #4]
 802554a:	681b      	ldr	r3, [r3, #0]
 802554c:	681b      	ldr	r3, [r3, #0]
 802554e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8025552:	2b00      	cmp	r3, #0
 8025554:	d01c      	beq.n	8025590 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8025556:	687b      	ldr	r3, [r7, #4]
 8025558:	681b      	ldr	r3, [r3, #0]
 802555a:	681b      	ldr	r3, [r3, #0]
 802555c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8025560:	2b00      	cmp	r3, #0
 8025562:	d108      	bne.n	8025576 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8025564:	687b      	ldr	r3, [r7, #4]
 8025566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025568:	2b00      	cmp	r3, #0
 802556a:	d030      	beq.n	80255ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 802556c:	687b      	ldr	r3, [r7, #4]
 802556e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025570:	6878      	ldr	r0, [r7, #4]
 8025572:	4798      	blx	r3
 8025574:	e02b      	b.n	80255ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8025576:	687b      	ldr	r3, [r7, #4]
 8025578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802557a:	2b00      	cmp	r3, #0
 802557c:	d027      	beq.n	80255ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 802557e:	687b      	ldr	r3, [r7, #4]
 8025580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025582:	6878      	ldr	r0, [r7, #4]
 8025584:	4798      	blx	r3
 8025586:	e022      	b.n	80255ce <HAL_DMA_IRQHandler+0x29e>
 8025588:	20000000 	.word	0x20000000
 802558c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8025590:	687b      	ldr	r3, [r7, #4]
 8025592:	681b      	ldr	r3, [r3, #0]
 8025594:	681b      	ldr	r3, [r3, #0]
 8025596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802559a:	2b00      	cmp	r3, #0
 802559c:	d10f      	bne.n	80255be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 802559e:	687b      	ldr	r3, [r7, #4]
 80255a0:	681b      	ldr	r3, [r3, #0]
 80255a2:	681a      	ldr	r2, [r3, #0]
 80255a4:	687b      	ldr	r3, [r7, #4]
 80255a6:	681b      	ldr	r3, [r3, #0]
 80255a8:	f022 0210 	bic.w	r2, r2, #16
 80255ac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80255ae:	687b      	ldr	r3, [r7, #4]
 80255b0:	2200      	movs	r2, #0
 80255b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80255b6:	687b      	ldr	r3, [r7, #4]
 80255b8:	2201      	movs	r2, #1
 80255ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80255be:	687b      	ldr	r3, [r7, #4]
 80255c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80255c2:	2b00      	cmp	r3, #0
 80255c4:	d003      	beq.n	80255ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80255c6:	687b      	ldr	r3, [r7, #4]
 80255c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80255ca:	6878      	ldr	r0, [r7, #4]
 80255cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80255ce:	687b      	ldr	r3, [r7, #4]
 80255d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80255d2:	2b00      	cmp	r3, #0
 80255d4:	d032      	beq.n	802563c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80255d6:	687b      	ldr	r3, [r7, #4]
 80255d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80255da:	f003 0301 	and.w	r3, r3, #1
 80255de:	2b00      	cmp	r3, #0
 80255e0:	d022      	beq.n	8025628 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80255e2:	687b      	ldr	r3, [r7, #4]
 80255e4:	2205      	movs	r2, #5
 80255e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80255ea:	687b      	ldr	r3, [r7, #4]
 80255ec:	681b      	ldr	r3, [r3, #0]
 80255ee:	681a      	ldr	r2, [r3, #0]
 80255f0:	687b      	ldr	r3, [r7, #4]
 80255f2:	681b      	ldr	r3, [r3, #0]
 80255f4:	f022 0201 	bic.w	r2, r2, #1
 80255f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80255fa:	68bb      	ldr	r3, [r7, #8]
 80255fc:	3301      	adds	r3, #1
 80255fe:	60bb      	str	r3, [r7, #8]
 8025600:	697a      	ldr	r2, [r7, #20]
 8025602:	429a      	cmp	r2, r3
 8025604:	d307      	bcc.n	8025616 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8025606:	687b      	ldr	r3, [r7, #4]
 8025608:	681b      	ldr	r3, [r3, #0]
 802560a:	681b      	ldr	r3, [r3, #0]
 802560c:	f003 0301 	and.w	r3, r3, #1
 8025610:	2b00      	cmp	r3, #0
 8025612:	d1f2      	bne.n	80255fa <HAL_DMA_IRQHandler+0x2ca>
 8025614:	e000      	b.n	8025618 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8025616:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8025618:	687b      	ldr	r3, [r7, #4]
 802561a:	2200      	movs	r2, #0
 802561c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8025620:	687b      	ldr	r3, [r7, #4]
 8025622:	2201      	movs	r2, #1
 8025624:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8025628:	687b      	ldr	r3, [r7, #4]
 802562a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802562c:	2b00      	cmp	r3, #0
 802562e:	d005      	beq.n	802563c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8025630:	687b      	ldr	r3, [r7, #4]
 8025632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8025634:	6878      	ldr	r0, [r7, #4]
 8025636:	4798      	blx	r3
 8025638:	e000      	b.n	802563c <HAL_DMA_IRQHandler+0x30c>
        return;
 802563a:	bf00      	nop
    }
  }
}
 802563c:	3718      	adds	r7, #24
 802563e:	46bd      	mov	sp, r7
 8025640:	bd80      	pop	{r7, pc}
 8025642:	bf00      	nop

08025644 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8025644:	b480      	push	{r7}
 8025646:	b085      	sub	sp, #20
 8025648:	af00      	add	r7, sp, #0
 802564a:	60f8      	str	r0, [r7, #12]
 802564c:	60b9      	str	r1, [r7, #8]
 802564e:	607a      	str	r2, [r7, #4]
 8025650:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8025652:	68fb      	ldr	r3, [r7, #12]
 8025654:	681b      	ldr	r3, [r3, #0]
 8025656:	681a      	ldr	r2, [r3, #0]
 8025658:	68fb      	ldr	r3, [r7, #12]
 802565a:	681b      	ldr	r3, [r3, #0]
 802565c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8025660:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8025662:	68fb      	ldr	r3, [r7, #12]
 8025664:	681b      	ldr	r3, [r3, #0]
 8025666:	683a      	ldr	r2, [r7, #0]
 8025668:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 802566a:	68fb      	ldr	r3, [r7, #12]
 802566c:	689b      	ldr	r3, [r3, #8]
 802566e:	2b40      	cmp	r3, #64	; 0x40
 8025670:	d108      	bne.n	8025684 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8025672:	68fb      	ldr	r3, [r7, #12]
 8025674:	681b      	ldr	r3, [r3, #0]
 8025676:	687a      	ldr	r2, [r7, #4]
 8025678:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 802567a:	68fb      	ldr	r3, [r7, #12]
 802567c:	681b      	ldr	r3, [r3, #0]
 802567e:	68ba      	ldr	r2, [r7, #8]
 8025680:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8025682:	e007      	b.n	8025694 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8025684:	68fb      	ldr	r3, [r7, #12]
 8025686:	681b      	ldr	r3, [r3, #0]
 8025688:	68ba      	ldr	r2, [r7, #8]
 802568a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 802568c:	68fb      	ldr	r3, [r7, #12]
 802568e:	681b      	ldr	r3, [r3, #0]
 8025690:	687a      	ldr	r2, [r7, #4]
 8025692:	60da      	str	r2, [r3, #12]
}
 8025694:	bf00      	nop
 8025696:	3714      	adds	r7, #20
 8025698:	46bd      	mov	sp, r7
 802569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802569e:	4770      	bx	lr

080256a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80256a0:	b480      	push	{r7}
 80256a2:	b085      	sub	sp, #20
 80256a4:	af00      	add	r7, sp, #0
 80256a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80256a8:	687b      	ldr	r3, [r7, #4]
 80256aa:	681b      	ldr	r3, [r3, #0]
 80256ac:	b2db      	uxtb	r3, r3
 80256ae:	3b10      	subs	r3, #16
 80256b0:	4a14      	ldr	r2, [pc, #80]	; (8025704 <DMA_CalcBaseAndBitshift+0x64>)
 80256b2:	fba2 2303 	umull	r2, r3, r2, r3
 80256b6:	091b      	lsrs	r3, r3, #4
 80256b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80256ba:	4a13      	ldr	r2, [pc, #76]	; (8025708 <DMA_CalcBaseAndBitshift+0x68>)
 80256bc:	68fb      	ldr	r3, [r7, #12]
 80256be:	4413      	add	r3, r2
 80256c0:	781b      	ldrb	r3, [r3, #0]
 80256c2:	461a      	mov	r2, r3
 80256c4:	687b      	ldr	r3, [r7, #4]
 80256c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80256c8:	68fb      	ldr	r3, [r7, #12]
 80256ca:	2b03      	cmp	r3, #3
 80256cc:	d909      	bls.n	80256e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80256ce:	687b      	ldr	r3, [r7, #4]
 80256d0:	681b      	ldr	r3, [r3, #0]
 80256d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80256d6:	f023 0303 	bic.w	r3, r3, #3
 80256da:	1d1a      	adds	r2, r3, #4
 80256dc:	687b      	ldr	r3, [r7, #4]
 80256de:	659a      	str	r2, [r3, #88]	; 0x58
 80256e0:	e007      	b.n	80256f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80256e2:	687b      	ldr	r3, [r7, #4]
 80256e4:	681b      	ldr	r3, [r3, #0]
 80256e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80256ea:	f023 0303 	bic.w	r3, r3, #3
 80256ee:	687a      	ldr	r2, [r7, #4]
 80256f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80256f2:	687b      	ldr	r3, [r7, #4]
 80256f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80256f6:	4618      	mov	r0, r3
 80256f8:	3714      	adds	r7, #20
 80256fa:	46bd      	mov	sp, r7
 80256fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025700:	4770      	bx	lr
 8025702:	bf00      	nop
 8025704:	aaaaaaab 	.word	0xaaaaaaab
 8025708:	08029a70 	.word	0x08029a70

0802570c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 802570c:	b480      	push	{r7}
 802570e:	b085      	sub	sp, #20
 8025710:	af00      	add	r7, sp, #0
 8025712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8025714:	2300      	movs	r3, #0
 8025716:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8025718:	687b      	ldr	r3, [r7, #4]
 802571a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802571c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 802571e:	687b      	ldr	r3, [r7, #4]
 8025720:	699b      	ldr	r3, [r3, #24]
 8025722:	2b00      	cmp	r3, #0
 8025724:	d11f      	bne.n	8025766 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8025726:	68bb      	ldr	r3, [r7, #8]
 8025728:	2b03      	cmp	r3, #3
 802572a:	d855      	bhi.n	80257d8 <DMA_CheckFifoParam+0xcc>
 802572c:	a201      	add	r2, pc, #4	; (adr r2, 8025734 <DMA_CheckFifoParam+0x28>)
 802572e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025732:	bf00      	nop
 8025734:	08025745 	.word	0x08025745
 8025738:	08025757 	.word	0x08025757
 802573c:	08025745 	.word	0x08025745
 8025740:	080257d9 	.word	0x080257d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8025744:	687b      	ldr	r3, [r7, #4]
 8025746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802574c:	2b00      	cmp	r3, #0
 802574e:	d045      	beq.n	80257dc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8025750:	2301      	movs	r3, #1
 8025752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8025754:	e042      	b.n	80257dc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8025756:	687b      	ldr	r3, [r7, #4]
 8025758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802575a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802575e:	d13f      	bne.n	80257e0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8025760:	2301      	movs	r3, #1
 8025762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8025764:	e03c      	b.n	80257e0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8025766:	687b      	ldr	r3, [r7, #4]
 8025768:	699b      	ldr	r3, [r3, #24]
 802576a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802576e:	d121      	bne.n	80257b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8025770:	68bb      	ldr	r3, [r7, #8]
 8025772:	2b03      	cmp	r3, #3
 8025774:	d836      	bhi.n	80257e4 <DMA_CheckFifoParam+0xd8>
 8025776:	a201      	add	r2, pc, #4	; (adr r2, 802577c <DMA_CheckFifoParam+0x70>)
 8025778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802577c:	0802578d 	.word	0x0802578d
 8025780:	08025793 	.word	0x08025793
 8025784:	0802578d 	.word	0x0802578d
 8025788:	080257a5 	.word	0x080257a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 802578c:	2301      	movs	r3, #1
 802578e:	73fb      	strb	r3, [r7, #15]
      break;
 8025790:	e02f      	b.n	80257f2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8025792:	687b      	ldr	r3, [r7, #4]
 8025794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025796:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802579a:	2b00      	cmp	r3, #0
 802579c:	d024      	beq.n	80257e8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 802579e:	2301      	movs	r3, #1
 80257a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80257a2:	e021      	b.n	80257e8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80257a4:	687b      	ldr	r3, [r7, #4]
 80257a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80257a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80257ac:	d11e      	bne.n	80257ec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80257ae:	2301      	movs	r3, #1
 80257b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80257b2:	e01b      	b.n	80257ec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80257b4:	68bb      	ldr	r3, [r7, #8]
 80257b6:	2b02      	cmp	r3, #2
 80257b8:	d902      	bls.n	80257c0 <DMA_CheckFifoParam+0xb4>
 80257ba:	2b03      	cmp	r3, #3
 80257bc:	d003      	beq.n	80257c6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80257be:	e018      	b.n	80257f2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80257c0:	2301      	movs	r3, #1
 80257c2:	73fb      	strb	r3, [r7, #15]
      break;
 80257c4:	e015      	b.n	80257f2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80257c6:	687b      	ldr	r3, [r7, #4]
 80257c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80257ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80257ce:	2b00      	cmp	r3, #0
 80257d0:	d00e      	beq.n	80257f0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80257d2:	2301      	movs	r3, #1
 80257d4:	73fb      	strb	r3, [r7, #15]
      break;
 80257d6:	e00b      	b.n	80257f0 <DMA_CheckFifoParam+0xe4>
      break;
 80257d8:	bf00      	nop
 80257da:	e00a      	b.n	80257f2 <DMA_CheckFifoParam+0xe6>
      break;
 80257dc:	bf00      	nop
 80257de:	e008      	b.n	80257f2 <DMA_CheckFifoParam+0xe6>
      break;
 80257e0:	bf00      	nop
 80257e2:	e006      	b.n	80257f2 <DMA_CheckFifoParam+0xe6>
      break;
 80257e4:	bf00      	nop
 80257e6:	e004      	b.n	80257f2 <DMA_CheckFifoParam+0xe6>
      break;
 80257e8:	bf00      	nop
 80257ea:	e002      	b.n	80257f2 <DMA_CheckFifoParam+0xe6>
      break;   
 80257ec:	bf00      	nop
 80257ee:	e000      	b.n	80257f2 <DMA_CheckFifoParam+0xe6>
      break;
 80257f0:	bf00      	nop
    }
  } 
  
  return status; 
 80257f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80257f4:	4618      	mov	r0, r3
 80257f6:	3714      	adds	r7, #20
 80257f8:	46bd      	mov	sp, r7
 80257fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80257fe:	4770      	bx	lr

08025800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8025800:	b480      	push	{r7}
 8025802:	b089      	sub	sp, #36	; 0x24
 8025804:	af00      	add	r7, sp, #0
 8025806:	6078      	str	r0, [r7, #4]
 8025808:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 802580a:	2300      	movs	r3, #0
 802580c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 802580e:	2300      	movs	r3, #0
 8025810:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8025812:	2300      	movs	r3, #0
 8025814:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8025816:	2300      	movs	r3, #0
 8025818:	61fb      	str	r3, [r7, #28]
 802581a:	e16b      	b.n	8025af4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 802581c:	2201      	movs	r2, #1
 802581e:	69fb      	ldr	r3, [r7, #28]
 8025820:	fa02 f303 	lsl.w	r3, r2, r3
 8025824:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8025826:	683b      	ldr	r3, [r7, #0]
 8025828:	681b      	ldr	r3, [r3, #0]
 802582a:	697a      	ldr	r2, [r7, #20]
 802582c:	4013      	ands	r3, r2
 802582e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8025830:	693a      	ldr	r2, [r7, #16]
 8025832:	697b      	ldr	r3, [r7, #20]
 8025834:	429a      	cmp	r2, r3
 8025836:	f040 815a 	bne.w	8025aee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 802583a:	683b      	ldr	r3, [r7, #0]
 802583c:	685b      	ldr	r3, [r3, #4]
 802583e:	2b01      	cmp	r3, #1
 8025840:	d00b      	beq.n	802585a <HAL_GPIO_Init+0x5a>
 8025842:	683b      	ldr	r3, [r7, #0]
 8025844:	685b      	ldr	r3, [r3, #4]
 8025846:	2b02      	cmp	r3, #2
 8025848:	d007      	beq.n	802585a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 802584a:	683b      	ldr	r3, [r7, #0]
 802584c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 802584e:	2b11      	cmp	r3, #17
 8025850:	d003      	beq.n	802585a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8025852:	683b      	ldr	r3, [r7, #0]
 8025854:	685b      	ldr	r3, [r3, #4]
 8025856:	2b12      	cmp	r3, #18
 8025858:	d130      	bne.n	80258bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 802585a:	687b      	ldr	r3, [r7, #4]
 802585c:	689b      	ldr	r3, [r3, #8]
 802585e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8025860:	69fb      	ldr	r3, [r7, #28]
 8025862:	005b      	lsls	r3, r3, #1
 8025864:	2203      	movs	r2, #3
 8025866:	fa02 f303 	lsl.w	r3, r2, r3
 802586a:	43db      	mvns	r3, r3
 802586c:	69ba      	ldr	r2, [r7, #24]
 802586e:	4013      	ands	r3, r2
 8025870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8025872:	683b      	ldr	r3, [r7, #0]
 8025874:	68da      	ldr	r2, [r3, #12]
 8025876:	69fb      	ldr	r3, [r7, #28]
 8025878:	005b      	lsls	r3, r3, #1
 802587a:	fa02 f303 	lsl.w	r3, r2, r3
 802587e:	69ba      	ldr	r2, [r7, #24]
 8025880:	4313      	orrs	r3, r2
 8025882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8025884:	687b      	ldr	r3, [r7, #4]
 8025886:	69ba      	ldr	r2, [r7, #24]
 8025888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802588a:	687b      	ldr	r3, [r7, #4]
 802588c:	685b      	ldr	r3, [r3, #4]
 802588e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8025890:	2201      	movs	r2, #1
 8025892:	69fb      	ldr	r3, [r7, #28]
 8025894:	fa02 f303 	lsl.w	r3, r2, r3
 8025898:	43db      	mvns	r3, r3
 802589a:	69ba      	ldr	r2, [r7, #24]
 802589c:	4013      	ands	r3, r2
 802589e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80258a0:	683b      	ldr	r3, [r7, #0]
 80258a2:	685b      	ldr	r3, [r3, #4]
 80258a4:	091b      	lsrs	r3, r3, #4
 80258a6:	f003 0201 	and.w	r2, r3, #1
 80258aa:	69fb      	ldr	r3, [r7, #28]
 80258ac:	fa02 f303 	lsl.w	r3, r2, r3
 80258b0:	69ba      	ldr	r2, [r7, #24]
 80258b2:	4313      	orrs	r3, r2
 80258b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80258b6:	687b      	ldr	r3, [r7, #4]
 80258b8:	69ba      	ldr	r2, [r7, #24]
 80258ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80258bc:	687b      	ldr	r3, [r7, #4]
 80258be:	68db      	ldr	r3, [r3, #12]
 80258c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80258c2:	69fb      	ldr	r3, [r7, #28]
 80258c4:	005b      	lsls	r3, r3, #1
 80258c6:	2203      	movs	r2, #3
 80258c8:	fa02 f303 	lsl.w	r3, r2, r3
 80258cc:	43db      	mvns	r3, r3
 80258ce:	69ba      	ldr	r2, [r7, #24]
 80258d0:	4013      	ands	r3, r2
 80258d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80258d4:	683b      	ldr	r3, [r7, #0]
 80258d6:	689a      	ldr	r2, [r3, #8]
 80258d8:	69fb      	ldr	r3, [r7, #28]
 80258da:	005b      	lsls	r3, r3, #1
 80258dc:	fa02 f303 	lsl.w	r3, r2, r3
 80258e0:	69ba      	ldr	r2, [r7, #24]
 80258e2:	4313      	orrs	r3, r2
 80258e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80258e6:	687b      	ldr	r3, [r7, #4]
 80258e8:	69ba      	ldr	r2, [r7, #24]
 80258ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80258ec:	683b      	ldr	r3, [r7, #0]
 80258ee:	685b      	ldr	r3, [r3, #4]
 80258f0:	2b02      	cmp	r3, #2
 80258f2:	d003      	beq.n	80258fc <HAL_GPIO_Init+0xfc>
 80258f4:	683b      	ldr	r3, [r7, #0]
 80258f6:	685b      	ldr	r3, [r3, #4]
 80258f8:	2b12      	cmp	r3, #18
 80258fa:	d123      	bne.n	8025944 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80258fc:	69fb      	ldr	r3, [r7, #28]
 80258fe:	08da      	lsrs	r2, r3, #3
 8025900:	687b      	ldr	r3, [r7, #4]
 8025902:	3208      	adds	r2, #8
 8025904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025908:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 802590a:	69fb      	ldr	r3, [r7, #28]
 802590c:	f003 0307 	and.w	r3, r3, #7
 8025910:	009b      	lsls	r3, r3, #2
 8025912:	220f      	movs	r2, #15
 8025914:	fa02 f303 	lsl.w	r3, r2, r3
 8025918:	43db      	mvns	r3, r3
 802591a:	69ba      	ldr	r2, [r7, #24]
 802591c:	4013      	ands	r3, r2
 802591e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8025920:	683b      	ldr	r3, [r7, #0]
 8025922:	691a      	ldr	r2, [r3, #16]
 8025924:	69fb      	ldr	r3, [r7, #28]
 8025926:	f003 0307 	and.w	r3, r3, #7
 802592a:	009b      	lsls	r3, r3, #2
 802592c:	fa02 f303 	lsl.w	r3, r2, r3
 8025930:	69ba      	ldr	r2, [r7, #24]
 8025932:	4313      	orrs	r3, r2
 8025934:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8025936:	69fb      	ldr	r3, [r7, #28]
 8025938:	08da      	lsrs	r2, r3, #3
 802593a:	687b      	ldr	r3, [r7, #4]
 802593c:	3208      	adds	r2, #8
 802593e:	69b9      	ldr	r1, [r7, #24]
 8025940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8025944:	687b      	ldr	r3, [r7, #4]
 8025946:	681b      	ldr	r3, [r3, #0]
 8025948:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 802594a:	69fb      	ldr	r3, [r7, #28]
 802594c:	005b      	lsls	r3, r3, #1
 802594e:	2203      	movs	r2, #3
 8025950:	fa02 f303 	lsl.w	r3, r2, r3
 8025954:	43db      	mvns	r3, r3
 8025956:	69ba      	ldr	r2, [r7, #24]
 8025958:	4013      	ands	r3, r2
 802595a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 802595c:	683b      	ldr	r3, [r7, #0]
 802595e:	685b      	ldr	r3, [r3, #4]
 8025960:	f003 0203 	and.w	r2, r3, #3
 8025964:	69fb      	ldr	r3, [r7, #28]
 8025966:	005b      	lsls	r3, r3, #1
 8025968:	fa02 f303 	lsl.w	r3, r2, r3
 802596c:	69ba      	ldr	r2, [r7, #24]
 802596e:	4313      	orrs	r3, r2
 8025970:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8025972:	687b      	ldr	r3, [r7, #4]
 8025974:	69ba      	ldr	r2, [r7, #24]
 8025976:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8025978:	683b      	ldr	r3, [r7, #0]
 802597a:	685b      	ldr	r3, [r3, #4]
 802597c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8025980:	2b00      	cmp	r3, #0
 8025982:	f000 80b4 	beq.w	8025aee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8025986:	2300      	movs	r3, #0
 8025988:	60fb      	str	r3, [r7, #12]
 802598a:	4b5f      	ldr	r3, [pc, #380]	; (8025b08 <HAL_GPIO_Init+0x308>)
 802598c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802598e:	4a5e      	ldr	r2, [pc, #376]	; (8025b08 <HAL_GPIO_Init+0x308>)
 8025990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8025994:	6453      	str	r3, [r2, #68]	; 0x44
 8025996:	4b5c      	ldr	r3, [pc, #368]	; (8025b08 <HAL_GPIO_Init+0x308>)
 8025998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802599a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802599e:	60fb      	str	r3, [r7, #12]
 80259a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80259a2:	4a5a      	ldr	r2, [pc, #360]	; (8025b0c <HAL_GPIO_Init+0x30c>)
 80259a4:	69fb      	ldr	r3, [r7, #28]
 80259a6:	089b      	lsrs	r3, r3, #2
 80259a8:	3302      	adds	r3, #2
 80259aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80259ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80259b0:	69fb      	ldr	r3, [r7, #28]
 80259b2:	f003 0303 	and.w	r3, r3, #3
 80259b6:	009b      	lsls	r3, r3, #2
 80259b8:	220f      	movs	r2, #15
 80259ba:	fa02 f303 	lsl.w	r3, r2, r3
 80259be:	43db      	mvns	r3, r3
 80259c0:	69ba      	ldr	r2, [r7, #24]
 80259c2:	4013      	ands	r3, r2
 80259c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80259c6:	687b      	ldr	r3, [r7, #4]
 80259c8:	4a51      	ldr	r2, [pc, #324]	; (8025b10 <HAL_GPIO_Init+0x310>)
 80259ca:	4293      	cmp	r3, r2
 80259cc:	d02b      	beq.n	8025a26 <HAL_GPIO_Init+0x226>
 80259ce:	687b      	ldr	r3, [r7, #4]
 80259d0:	4a50      	ldr	r2, [pc, #320]	; (8025b14 <HAL_GPIO_Init+0x314>)
 80259d2:	4293      	cmp	r3, r2
 80259d4:	d025      	beq.n	8025a22 <HAL_GPIO_Init+0x222>
 80259d6:	687b      	ldr	r3, [r7, #4]
 80259d8:	4a4f      	ldr	r2, [pc, #316]	; (8025b18 <HAL_GPIO_Init+0x318>)
 80259da:	4293      	cmp	r3, r2
 80259dc:	d01f      	beq.n	8025a1e <HAL_GPIO_Init+0x21e>
 80259de:	687b      	ldr	r3, [r7, #4]
 80259e0:	4a4e      	ldr	r2, [pc, #312]	; (8025b1c <HAL_GPIO_Init+0x31c>)
 80259e2:	4293      	cmp	r3, r2
 80259e4:	d019      	beq.n	8025a1a <HAL_GPIO_Init+0x21a>
 80259e6:	687b      	ldr	r3, [r7, #4]
 80259e8:	4a4d      	ldr	r2, [pc, #308]	; (8025b20 <HAL_GPIO_Init+0x320>)
 80259ea:	4293      	cmp	r3, r2
 80259ec:	d013      	beq.n	8025a16 <HAL_GPIO_Init+0x216>
 80259ee:	687b      	ldr	r3, [r7, #4]
 80259f0:	4a4c      	ldr	r2, [pc, #304]	; (8025b24 <HAL_GPIO_Init+0x324>)
 80259f2:	4293      	cmp	r3, r2
 80259f4:	d00d      	beq.n	8025a12 <HAL_GPIO_Init+0x212>
 80259f6:	687b      	ldr	r3, [r7, #4]
 80259f8:	4a4b      	ldr	r2, [pc, #300]	; (8025b28 <HAL_GPIO_Init+0x328>)
 80259fa:	4293      	cmp	r3, r2
 80259fc:	d007      	beq.n	8025a0e <HAL_GPIO_Init+0x20e>
 80259fe:	687b      	ldr	r3, [r7, #4]
 8025a00:	4a4a      	ldr	r2, [pc, #296]	; (8025b2c <HAL_GPIO_Init+0x32c>)
 8025a02:	4293      	cmp	r3, r2
 8025a04:	d101      	bne.n	8025a0a <HAL_GPIO_Init+0x20a>
 8025a06:	2307      	movs	r3, #7
 8025a08:	e00e      	b.n	8025a28 <HAL_GPIO_Init+0x228>
 8025a0a:	2308      	movs	r3, #8
 8025a0c:	e00c      	b.n	8025a28 <HAL_GPIO_Init+0x228>
 8025a0e:	2306      	movs	r3, #6
 8025a10:	e00a      	b.n	8025a28 <HAL_GPIO_Init+0x228>
 8025a12:	2305      	movs	r3, #5
 8025a14:	e008      	b.n	8025a28 <HAL_GPIO_Init+0x228>
 8025a16:	2304      	movs	r3, #4
 8025a18:	e006      	b.n	8025a28 <HAL_GPIO_Init+0x228>
 8025a1a:	2303      	movs	r3, #3
 8025a1c:	e004      	b.n	8025a28 <HAL_GPIO_Init+0x228>
 8025a1e:	2302      	movs	r3, #2
 8025a20:	e002      	b.n	8025a28 <HAL_GPIO_Init+0x228>
 8025a22:	2301      	movs	r3, #1
 8025a24:	e000      	b.n	8025a28 <HAL_GPIO_Init+0x228>
 8025a26:	2300      	movs	r3, #0
 8025a28:	69fa      	ldr	r2, [r7, #28]
 8025a2a:	f002 0203 	and.w	r2, r2, #3
 8025a2e:	0092      	lsls	r2, r2, #2
 8025a30:	4093      	lsls	r3, r2
 8025a32:	69ba      	ldr	r2, [r7, #24]
 8025a34:	4313      	orrs	r3, r2
 8025a36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8025a38:	4934      	ldr	r1, [pc, #208]	; (8025b0c <HAL_GPIO_Init+0x30c>)
 8025a3a:	69fb      	ldr	r3, [r7, #28]
 8025a3c:	089b      	lsrs	r3, r3, #2
 8025a3e:	3302      	adds	r3, #2
 8025a40:	69ba      	ldr	r2, [r7, #24]
 8025a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8025a46:	4b3a      	ldr	r3, [pc, #232]	; (8025b30 <HAL_GPIO_Init+0x330>)
 8025a48:	681b      	ldr	r3, [r3, #0]
 8025a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8025a4c:	693b      	ldr	r3, [r7, #16]
 8025a4e:	43db      	mvns	r3, r3
 8025a50:	69ba      	ldr	r2, [r7, #24]
 8025a52:	4013      	ands	r3, r2
 8025a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8025a56:	683b      	ldr	r3, [r7, #0]
 8025a58:	685b      	ldr	r3, [r3, #4]
 8025a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8025a5e:	2b00      	cmp	r3, #0
 8025a60:	d003      	beq.n	8025a6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8025a62:	69ba      	ldr	r2, [r7, #24]
 8025a64:	693b      	ldr	r3, [r7, #16]
 8025a66:	4313      	orrs	r3, r2
 8025a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8025a6a:	4a31      	ldr	r2, [pc, #196]	; (8025b30 <HAL_GPIO_Init+0x330>)
 8025a6c:	69bb      	ldr	r3, [r7, #24]
 8025a6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8025a70:	4b2f      	ldr	r3, [pc, #188]	; (8025b30 <HAL_GPIO_Init+0x330>)
 8025a72:	685b      	ldr	r3, [r3, #4]
 8025a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8025a76:	693b      	ldr	r3, [r7, #16]
 8025a78:	43db      	mvns	r3, r3
 8025a7a:	69ba      	ldr	r2, [r7, #24]
 8025a7c:	4013      	ands	r3, r2
 8025a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8025a80:	683b      	ldr	r3, [r7, #0]
 8025a82:	685b      	ldr	r3, [r3, #4]
 8025a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8025a88:	2b00      	cmp	r3, #0
 8025a8a:	d003      	beq.n	8025a94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8025a8c:	69ba      	ldr	r2, [r7, #24]
 8025a8e:	693b      	ldr	r3, [r7, #16]
 8025a90:	4313      	orrs	r3, r2
 8025a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8025a94:	4a26      	ldr	r2, [pc, #152]	; (8025b30 <HAL_GPIO_Init+0x330>)
 8025a96:	69bb      	ldr	r3, [r7, #24]
 8025a98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8025a9a:	4b25      	ldr	r3, [pc, #148]	; (8025b30 <HAL_GPIO_Init+0x330>)
 8025a9c:	689b      	ldr	r3, [r3, #8]
 8025a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8025aa0:	693b      	ldr	r3, [r7, #16]
 8025aa2:	43db      	mvns	r3, r3
 8025aa4:	69ba      	ldr	r2, [r7, #24]
 8025aa6:	4013      	ands	r3, r2
 8025aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8025aaa:	683b      	ldr	r3, [r7, #0]
 8025aac:	685b      	ldr	r3, [r3, #4]
 8025aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8025ab2:	2b00      	cmp	r3, #0
 8025ab4:	d003      	beq.n	8025abe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8025ab6:	69ba      	ldr	r2, [r7, #24]
 8025ab8:	693b      	ldr	r3, [r7, #16]
 8025aba:	4313      	orrs	r3, r2
 8025abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8025abe:	4a1c      	ldr	r2, [pc, #112]	; (8025b30 <HAL_GPIO_Init+0x330>)
 8025ac0:	69bb      	ldr	r3, [r7, #24]
 8025ac2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8025ac4:	4b1a      	ldr	r3, [pc, #104]	; (8025b30 <HAL_GPIO_Init+0x330>)
 8025ac6:	68db      	ldr	r3, [r3, #12]
 8025ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8025aca:	693b      	ldr	r3, [r7, #16]
 8025acc:	43db      	mvns	r3, r3
 8025ace:	69ba      	ldr	r2, [r7, #24]
 8025ad0:	4013      	ands	r3, r2
 8025ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8025ad4:	683b      	ldr	r3, [r7, #0]
 8025ad6:	685b      	ldr	r3, [r3, #4]
 8025ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8025adc:	2b00      	cmp	r3, #0
 8025ade:	d003      	beq.n	8025ae8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8025ae0:	69ba      	ldr	r2, [r7, #24]
 8025ae2:	693b      	ldr	r3, [r7, #16]
 8025ae4:	4313      	orrs	r3, r2
 8025ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8025ae8:	4a11      	ldr	r2, [pc, #68]	; (8025b30 <HAL_GPIO_Init+0x330>)
 8025aea:	69bb      	ldr	r3, [r7, #24]
 8025aec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8025aee:	69fb      	ldr	r3, [r7, #28]
 8025af0:	3301      	adds	r3, #1
 8025af2:	61fb      	str	r3, [r7, #28]
 8025af4:	69fb      	ldr	r3, [r7, #28]
 8025af6:	2b0f      	cmp	r3, #15
 8025af8:	f67f ae90 	bls.w	802581c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8025afc:	bf00      	nop
 8025afe:	3724      	adds	r7, #36	; 0x24
 8025b00:	46bd      	mov	sp, r7
 8025b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b06:	4770      	bx	lr
 8025b08:	40023800 	.word	0x40023800
 8025b0c:	40013800 	.word	0x40013800
 8025b10:	40020000 	.word	0x40020000
 8025b14:	40020400 	.word	0x40020400
 8025b18:	40020800 	.word	0x40020800
 8025b1c:	40020c00 	.word	0x40020c00
 8025b20:	40021000 	.word	0x40021000
 8025b24:	40021400 	.word	0x40021400
 8025b28:	40021800 	.word	0x40021800
 8025b2c:	40021c00 	.word	0x40021c00
 8025b30:	40013c00 	.word	0x40013c00

08025b34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8025b34:	b480      	push	{r7}
 8025b36:	b085      	sub	sp, #20
 8025b38:	af00      	add	r7, sp, #0
 8025b3a:	6078      	str	r0, [r7, #4]
 8025b3c:	460b      	mov	r3, r1
 8025b3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8025b40:	687b      	ldr	r3, [r7, #4]
 8025b42:	691a      	ldr	r2, [r3, #16]
 8025b44:	887b      	ldrh	r3, [r7, #2]
 8025b46:	4013      	ands	r3, r2
 8025b48:	2b00      	cmp	r3, #0
 8025b4a:	d002      	beq.n	8025b52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8025b4c:	2301      	movs	r3, #1
 8025b4e:	73fb      	strb	r3, [r7, #15]
 8025b50:	e001      	b.n	8025b56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8025b52:	2300      	movs	r3, #0
 8025b54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8025b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8025b58:	4618      	mov	r0, r3
 8025b5a:	3714      	adds	r7, #20
 8025b5c:	46bd      	mov	sp, r7
 8025b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b62:	4770      	bx	lr

08025b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8025b64:	b480      	push	{r7}
 8025b66:	b083      	sub	sp, #12
 8025b68:	af00      	add	r7, sp, #0
 8025b6a:	6078      	str	r0, [r7, #4]
 8025b6c:	460b      	mov	r3, r1
 8025b6e:	807b      	strh	r3, [r7, #2]
 8025b70:	4613      	mov	r3, r2
 8025b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8025b74:	787b      	ldrb	r3, [r7, #1]
 8025b76:	2b00      	cmp	r3, #0
 8025b78:	d003      	beq.n	8025b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8025b7a:	887a      	ldrh	r2, [r7, #2]
 8025b7c:	687b      	ldr	r3, [r7, #4]
 8025b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8025b80:	e003      	b.n	8025b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8025b82:	887b      	ldrh	r3, [r7, #2]
 8025b84:	041a      	lsls	r2, r3, #16
 8025b86:	687b      	ldr	r3, [r7, #4]
 8025b88:	619a      	str	r2, [r3, #24]
}
 8025b8a:	bf00      	nop
 8025b8c:	370c      	adds	r7, #12
 8025b8e:	46bd      	mov	sp, r7
 8025b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b94:	4770      	bx	lr
	...

08025b98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8025b98:	b580      	push	{r7, lr}
 8025b9a:	b084      	sub	sp, #16
 8025b9c:	af00      	add	r7, sp, #0
 8025b9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8025ba0:	687b      	ldr	r3, [r7, #4]
 8025ba2:	2b00      	cmp	r3, #0
 8025ba4:	d101      	bne.n	8025baa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8025ba6:	2301      	movs	r3, #1
 8025ba8:	e11f      	b.n	8025dea <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8025baa:	687b      	ldr	r3, [r7, #4]
 8025bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8025bb0:	b2db      	uxtb	r3, r3
 8025bb2:	2b00      	cmp	r3, #0
 8025bb4:	d106      	bne.n	8025bc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8025bb6:	687b      	ldr	r3, [r7, #4]
 8025bb8:	2200      	movs	r2, #0
 8025bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8025bbe:	6878      	ldr	r0, [r7, #4]
 8025bc0:	f7fd fbcc 	bl	802335c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8025bc4:	687b      	ldr	r3, [r7, #4]
 8025bc6:	2224      	movs	r2, #36	; 0x24
 8025bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8025bcc:	687b      	ldr	r3, [r7, #4]
 8025bce:	681b      	ldr	r3, [r3, #0]
 8025bd0:	681a      	ldr	r2, [r3, #0]
 8025bd2:	687b      	ldr	r3, [r7, #4]
 8025bd4:	681b      	ldr	r3, [r3, #0]
 8025bd6:	f022 0201 	bic.w	r2, r2, #1
 8025bda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8025bdc:	687b      	ldr	r3, [r7, #4]
 8025bde:	681b      	ldr	r3, [r3, #0]
 8025be0:	681a      	ldr	r2, [r3, #0]
 8025be2:	687b      	ldr	r3, [r7, #4]
 8025be4:	681b      	ldr	r3, [r3, #0]
 8025be6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8025bea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8025bec:	687b      	ldr	r3, [r7, #4]
 8025bee:	681b      	ldr	r3, [r3, #0]
 8025bf0:	681a      	ldr	r2, [r3, #0]
 8025bf2:	687b      	ldr	r3, [r7, #4]
 8025bf4:	681b      	ldr	r3, [r3, #0]
 8025bf6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8025bfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8025bfc:	f000 fd18 	bl	8026630 <HAL_RCC_GetPCLK1Freq>
 8025c00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8025c02:	687b      	ldr	r3, [r7, #4]
 8025c04:	685b      	ldr	r3, [r3, #4]
 8025c06:	4a7b      	ldr	r2, [pc, #492]	; (8025df4 <HAL_I2C_Init+0x25c>)
 8025c08:	4293      	cmp	r3, r2
 8025c0a:	d807      	bhi.n	8025c1c <HAL_I2C_Init+0x84>
 8025c0c:	68fb      	ldr	r3, [r7, #12]
 8025c0e:	4a7a      	ldr	r2, [pc, #488]	; (8025df8 <HAL_I2C_Init+0x260>)
 8025c10:	4293      	cmp	r3, r2
 8025c12:	bf94      	ite	ls
 8025c14:	2301      	movls	r3, #1
 8025c16:	2300      	movhi	r3, #0
 8025c18:	b2db      	uxtb	r3, r3
 8025c1a:	e006      	b.n	8025c2a <HAL_I2C_Init+0x92>
 8025c1c:	68fb      	ldr	r3, [r7, #12]
 8025c1e:	4a77      	ldr	r2, [pc, #476]	; (8025dfc <HAL_I2C_Init+0x264>)
 8025c20:	4293      	cmp	r3, r2
 8025c22:	bf94      	ite	ls
 8025c24:	2301      	movls	r3, #1
 8025c26:	2300      	movhi	r3, #0
 8025c28:	b2db      	uxtb	r3, r3
 8025c2a:	2b00      	cmp	r3, #0
 8025c2c:	d001      	beq.n	8025c32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8025c2e:	2301      	movs	r3, #1
 8025c30:	e0db      	b.n	8025dea <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8025c32:	68fb      	ldr	r3, [r7, #12]
 8025c34:	4a72      	ldr	r2, [pc, #456]	; (8025e00 <HAL_I2C_Init+0x268>)
 8025c36:	fba2 2303 	umull	r2, r3, r2, r3
 8025c3a:	0c9b      	lsrs	r3, r3, #18
 8025c3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8025c3e:	687b      	ldr	r3, [r7, #4]
 8025c40:	681b      	ldr	r3, [r3, #0]
 8025c42:	685b      	ldr	r3, [r3, #4]
 8025c44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8025c48:	687b      	ldr	r3, [r7, #4]
 8025c4a:	681b      	ldr	r3, [r3, #0]
 8025c4c:	68ba      	ldr	r2, [r7, #8]
 8025c4e:	430a      	orrs	r2, r1
 8025c50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8025c52:	687b      	ldr	r3, [r7, #4]
 8025c54:	681b      	ldr	r3, [r3, #0]
 8025c56:	6a1b      	ldr	r3, [r3, #32]
 8025c58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8025c5c:	687b      	ldr	r3, [r7, #4]
 8025c5e:	685b      	ldr	r3, [r3, #4]
 8025c60:	4a64      	ldr	r2, [pc, #400]	; (8025df4 <HAL_I2C_Init+0x25c>)
 8025c62:	4293      	cmp	r3, r2
 8025c64:	d802      	bhi.n	8025c6c <HAL_I2C_Init+0xd4>
 8025c66:	68bb      	ldr	r3, [r7, #8]
 8025c68:	3301      	adds	r3, #1
 8025c6a:	e009      	b.n	8025c80 <HAL_I2C_Init+0xe8>
 8025c6c:	68bb      	ldr	r3, [r7, #8]
 8025c6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8025c72:	fb02 f303 	mul.w	r3, r2, r3
 8025c76:	4a63      	ldr	r2, [pc, #396]	; (8025e04 <HAL_I2C_Init+0x26c>)
 8025c78:	fba2 2303 	umull	r2, r3, r2, r3
 8025c7c:	099b      	lsrs	r3, r3, #6
 8025c7e:	3301      	adds	r3, #1
 8025c80:	687a      	ldr	r2, [r7, #4]
 8025c82:	6812      	ldr	r2, [r2, #0]
 8025c84:	430b      	orrs	r3, r1
 8025c86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8025c88:	687b      	ldr	r3, [r7, #4]
 8025c8a:	681b      	ldr	r3, [r3, #0]
 8025c8c:	69db      	ldr	r3, [r3, #28]
 8025c8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8025c92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8025c96:	687b      	ldr	r3, [r7, #4]
 8025c98:	685b      	ldr	r3, [r3, #4]
 8025c9a:	4956      	ldr	r1, [pc, #344]	; (8025df4 <HAL_I2C_Init+0x25c>)
 8025c9c:	428b      	cmp	r3, r1
 8025c9e:	d80d      	bhi.n	8025cbc <HAL_I2C_Init+0x124>
 8025ca0:	68fb      	ldr	r3, [r7, #12]
 8025ca2:	1e59      	subs	r1, r3, #1
 8025ca4:	687b      	ldr	r3, [r7, #4]
 8025ca6:	685b      	ldr	r3, [r3, #4]
 8025ca8:	005b      	lsls	r3, r3, #1
 8025caa:	fbb1 f3f3 	udiv	r3, r1, r3
 8025cae:	3301      	adds	r3, #1
 8025cb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025cb4:	2b04      	cmp	r3, #4
 8025cb6:	bf38      	it	cc
 8025cb8:	2304      	movcc	r3, #4
 8025cba:	e04f      	b.n	8025d5c <HAL_I2C_Init+0x1c4>
 8025cbc:	687b      	ldr	r3, [r7, #4]
 8025cbe:	689b      	ldr	r3, [r3, #8]
 8025cc0:	2b00      	cmp	r3, #0
 8025cc2:	d111      	bne.n	8025ce8 <HAL_I2C_Init+0x150>
 8025cc4:	68fb      	ldr	r3, [r7, #12]
 8025cc6:	1e58      	subs	r0, r3, #1
 8025cc8:	687b      	ldr	r3, [r7, #4]
 8025cca:	6859      	ldr	r1, [r3, #4]
 8025ccc:	460b      	mov	r3, r1
 8025cce:	005b      	lsls	r3, r3, #1
 8025cd0:	440b      	add	r3, r1
 8025cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8025cd6:	3301      	adds	r3, #1
 8025cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025cdc:	2b00      	cmp	r3, #0
 8025cde:	bf0c      	ite	eq
 8025ce0:	2301      	moveq	r3, #1
 8025ce2:	2300      	movne	r3, #0
 8025ce4:	b2db      	uxtb	r3, r3
 8025ce6:	e012      	b.n	8025d0e <HAL_I2C_Init+0x176>
 8025ce8:	68fb      	ldr	r3, [r7, #12]
 8025cea:	1e58      	subs	r0, r3, #1
 8025cec:	687b      	ldr	r3, [r7, #4]
 8025cee:	6859      	ldr	r1, [r3, #4]
 8025cf0:	460b      	mov	r3, r1
 8025cf2:	009b      	lsls	r3, r3, #2
 8025cf4:	440b      	add	r3, r1
 8025cf6:	0099      	lsls	r1, r3, #2
 8025cf8:	440b      	add	r3, r1
 8025cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8025cfe:	3301      	adds	r3, #1
 8025d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025d04:	2b00      	cmp	r3, #0
 8025d06:	bf0c      	ite	eq
 8025d08:	2301      	moveq	r3, #1
 8025d0a:	2300      	movne	r3, #0
 8025d0c:	b2db      	uxtb	r3, r3
 8025d0e:	2b00      	cmp	r3, #0
 8025d10:	d001      	beq.n	8025d16 <HAL_I2C_Init+0x17e>
 8025d12:	2301      	movs	r3, #1
 8025d14:	e022      	b.n	8025d5c <HAL_I2C_Init+0x1c4>
 8025d16:	687b      	ldr	r3, [r7, #4]
 8025d18:	689b      	ldr	r3, [r3, #8]
 8025d1a:	2b00      	cmp	r3, #0
 8025d1c:	d10e      	bne.n	8025d3c <HAL_I2C_Init+0x1a4>
 8025d1e:	68fb      	ldr	r3, [r7, #12]
 8025d20:	1e58      	subs	r0, r3, #1
 8025d22:	687b      	ldr	r3, [r7, #4]
 8025d24:	6859      	ldr	r1, [r3, #4]
 8025d26:	460b      	mov	r3, r1
 8025d28:	005b      	lsls	r3, r3, #1
 8025d2a:	440b      	add	r3, r1
 8025d2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8025d30:	3301      	adds	r3, #1
 8025d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8025d3a:	e00f      	b.n	8025d5c <HAL_I2C_Init+0x1c4>
 8025d3c:	68fb      	ldr	r3, [r7, #12]
 8025d3e:	1e58      	subs	r0, r3, #1
 8025d40:	687b      	ldr	r3, [r7, #4]
 8025d42:	6859      	ldr	r1, [r3, #4]
 8025d44:	460b      	mov	r3, r1
 8025d46:	009b      	lsls	r3, r3, #2
 8025d48:	440b      	add	r3, r1
 8025d4a:	0099      	lsls	r1, r3, #2
 8025d4c:	440b      	add	r3, r1
 8025d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8025d52:	3301      	adds	r3, #1
 8025d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025d58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8025d5c:	6879      	ldr	r1, [r7, #4]
 8025d5e:	6809      	ldr	r1, [r1, #0]
 8025d60:	4313      	orrs	r3, r2
 8025d62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8025d64:	687b      	ldr	r3, [r7, #4]
 8025d66:	681b      	ldr	r3, [r3, #0]
 8025d68:	681b      	ldr	r3, [r3, #0]
 8025d6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8025d6e:	687b      	ldr	r3, [r7, #4]
 8025d70:	69da      	ldr	r2, [r3, #28]
 8025d72:	687b      	ldr	r3, [r7, #4]
 8025d74:	6a1b      	ldr	r3, [r3, #32]
 8025d76:	431a      	orrs	r2, r3
 8025d78:	687b      	ldr	r3, [r7, #4]
 8025d7a:	681b      	ldr	r3, [r3, #0]
 8025d7c:	430a      	orrs	r2, r1
 8025d7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8025d80:	687b      	ldr	r3, [r7, #4]
 8025d82:	681b      	ldr	r3, [r3, #0]
 8025d84:	689b      	ldr	r3, [r3, #8]
 8025d86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8025d8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8025d8e:	687a      	ldr	r2, [r7, #4]
 8025d90:	6911      	ldr	r1, [r2, #16]
 8025d92:	687a      	ldr	r2, [r7, #4]
 8025d94:	68d2      	ldr	r2, [r2, #12]
 8025d96:	4311      	orrs	r1, r2
 8025d98:	687a      	ldr	r2, [r7, #4]
 8025d9a:	6812      	ldr	r2, [r2, #0]
 8025d9c:	430b      	orrs	r3, r1
 8025d9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8025da0:	687b      	ldr	r3, [r7, #4]
 8025da2:	681b      	ldr	r3, [r3, #0]
 8025da4:	68db      	ldr	r3, [r3, #12]
 8025da6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8025daa:	687b      	ldr	r3, [r7, #4]
 8025dac:	695a      	ldr	r2, [r3, #20]
 8025dae:	687b      	ldr	r3, [r7, #4]
 8025db0:	699b      	ldr	r3, [r3, #24]
 8025db2:	431a      	orrs	r2, r3
 8025db4:	687b      	ldr	r3, [r7, #4]
 8025db6:	681b      	ldr	r3, [r3, #0]
 8025db8:	430a      	orrs	r2, r1
 8025dba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8025dbc:	687b      	ldr	r3, [r7, #4]
 8025dbe:	681b      	ldr	r3, [r3, #0]
 8025dc0:	681a      	ldr	r2, [r3, #0]
 8025dc2:	687b      	ldr	r3, [r7, #4]
 8025dc4:	681b      	ldr	r3, [r3, #0]
 8025dc6:	f042 0201 	orr.w	r2, r2, #1
 8025dca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8025dcc:	687b      	ldr	r3, [r7, #4]
 8025dce:	2200      	movs	r2, #0
 8025dd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8025dd2:	687b      	ldr	r3, [r7, #4]
 8025dd4:	2220      	movs	r2, #32
 8025dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8025dda:	687b      	ldr	r3, [r7, #4]
 8025ddc:	2200      	movs	r2, #0
 8025dde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8025de0:	687b      	ldr	r3, [r7, #4]
 8025de2:	2200      	movs	r2, #0
 8025de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8025de8:	2300      	movs	r3, #0
}
 8025dea:	4618      	mov	r0, r3
 8025dec:	3710      	adds	r7, #16
 8025dee:	46bd      	mov	sp, r7
 8025df0:	bd80      	pop	{r7, pc}
 8025df2:	bf00      	nop
 8025df4:	000186a0 	.word	0x000186a0
 8025df8:	001e847f 	.word	0x001e847f
 8025dfc:	003d08ff 	.word	0x003d08ff
 8025e00:	431bde83 	.word	0x431bde83
 8025e04:	10624dd3 	.word	0x10624dd3

08025e08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8025e08:	b580      	push	{r7, lr}
 8025e0a:	b086      	sub	sp, #24
 8025e0c:	af00      	add	r7, sp, #0
 8025e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8025e10:	687b      	ldr	r3, [r7, #4]
 8025e12:	2b00      	cmp	r3, #0
 8025e14:	d101      	bne.n	8025e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8025e16:	2301      	movs	r3, #1
 8025e18:	e25b      	b.n	80262d2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8025e1a:	687b      	ldr	r3, [r7, #4]
 8025e1c:	681b      	ldr	r3, [r3, #0]
 8025e1e:	f003 0301 	and.w	r3, r3, #1
 8025e22:	2b00      	cmp	r3, #0
 8025e24:	d075      	beq.n	8025f12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8025e26:	4ba3      	ldr	r3, [pc, #652]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 8025e28:	689b      	ldr	r3, [r3, #8]
 8025e2a:	f003 030c 	and.w	r3, r3, #12
 8025e2e:	2b04      	cmp	r3, #4
 8025e30:	d00c      	beq.n	8025e4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8025e32:	4ba0      	ldr	r3, [pc, #640]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 8025e34:	689b      	ldr	r3, [r3, #8]
 8025e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8025e3a:	2b08      	cmp	r3, #8
 8025e3c:	d112      	bne.n	8025e64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8025e3e:	4b9d      	ldr	r3, [pc, #628]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 8025e40:	685b      	ldr	r3, [r3, #4]
 8025e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8025e46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8025e4a:	d10b      	bne.n	8025e64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8025e4c:	4b99      	ldr	r3, [pc, #612]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 8025e4e:	681b      	ldr	r3, [r3, #0]
 8025e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8025e54:	2b00      	cmp	r3, #0
 8025e56:	d05b      	beq.n	8025f10 <HAL_RCC_OscConfig+0x108>
 8025e58:	687b      	ldr	r3, [r7, #4]
 8025e5a:	685b      	ldr	r3, [r3, #4]
 8025e5c:	2b00      	cmp	r3, #0
 8025e5e:	d157      	bne.n	8025f10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8025e60:	2301      	movs	r3, #1
 8025e62:	e236      	b.n	80262d2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8025e64:	687b      	ldr	r3, [r7, #4]
 8025e66:	685b      	ldr	r3, [r3, #4]
 8025e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8025e6c:	d106      	bne.n	8025e7c <HAL_RCC_OscConfig+0x74>
 8025e6e:	4b91      	ldr	r3, [pc, #580]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 8025e70:	681b      	ldr	r3, [r3, #0]
 8025e72:	4a90      	ldr	r2, [pc, #576]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 8025e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8025e78:	6013      	str	r3, [r2, #0]
 8025e7a:	e01d      	b.n	8025eb8 <HAL_RCC_OscConfig+0xb0>
 8025e7c:	687b      	ldr	r3, [r7, #4]
 8025e7e:	685b      	ldr	r3, [r3, #4]
 8025e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8025e84:	d10c      	bne.n	8025ea0 <HAL_RCC_OscConfig+0x98>
 8025e86:	4b8b      	ldr	r3, [pc, #556]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 8025e88:	681b      	ldr	r3, [r3, #0]
 8025e8a:	4a8a      	ldr	r2, [pc, #552]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 8025e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8025e90:	6013      	str	r3, [r2, #0]
 8025e92:	4b88      	ldr	r3, [pc, #544]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 8025e94:	681b      	ldr	r3, [r3, #0]
 8025e96:	4a87      	ldr	r2, [pc, #540]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 8025e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8025e9c:	6013      	str	r3, [r2, #0]
 8025e9e:	e00b      	b.n	8025eb8 <HAL_RCC_OscConfig+0xb0>
 8025ea0:	4b84      	ldr	r3, [pc, #528]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 8025ea2:	681b      	ldr	r3, [r3, #0]
 8025ea4:	4a83      	ldr	r2, [pc, #524]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 8025ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8025eaa:	6013      	str	r3, [r2, #0]
 8025eac:	4b81      	ldr	r3, [pc, #516]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 8025eae:	681b      	ldr	r3, [r3, #0]
 8025eb0:	4a80      	ldr	r2, [pc, #512]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 8025eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8025eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8025eb8:	687b      	ldr	r3, [r7, #4]
 8025eba:	685b      	ldr	r3, [r3, #4]
 8025ebc:	2b00      	cmp	r3, #0
 8025ebe:	d013      	beq.n	8025ee8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8025ec0:	f7fe fbfc 	bl	80246bc <HAL_GetTick>
 8025ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8025ec6:	e008      	b.n	8025eda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8025ec8:	f7fe fbf8 	bl	80246bc <HAL_GetTick>
 8025ecc:	4602      	mov	r2, r0
 8025ece:	693b      	ldr	r3, [r7, #16]
 8025ed0:	1ad3      	subs	r3, r2, r3
 8025ed2:	2b64      	cmp	r3, #100	; 0x64
 8025ed4:	d901      	bls.n	8025eda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8025ed6:	2303      	movs	r3, #3
 8025ed8:	e1fb      	b.n	80262d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8025eda:	4b76      	ldr	r3, [pc, #472]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 8025edc:	681b      	ldr	r3, [r3, #0]
 8025ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8025ee2:	2b00      	cmp	r3, #0
 8025ee4:	d0f0      	beq.n	8025ec8 <HAL_RCC_OscConfig+0xc0>
 8025ee6:	e014      	b.n	8025f12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8025ee8:	f7fe fbe8 	bl	80246bc <HAL_GetTick>
 8025eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8025eee:	e008      	b.n	8025f02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8025ef0:	f7fe fbe4 	bl	80246bc <HAL_GetTick>
 8025ef4:	4602      	mov	r2, r0
 8025ef6:	693b      	ldr	r3, [r7, #16]
 8025ef8:	1ad3      	subs	r3, r2, r3
 8025efa:	2b64      	cmp	r3, #100	; 0x64
 8025efc:	d901      	bls.n	8025f02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8025efe:	2303      	movs	r3, #3
 8025f00:	e1e7      	b.n	80262d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8025f02:	4b6c      	ldr	r3, [pc, #432]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 8025f04:	681b      	ldr	r3, [r3, #0]
 8025f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8025f0a:	2b00      	cmp	r3, #0
 8025f0c:	d1f0      	bne.n	8025ef0 <HAL_RCC_OscConfig+0xe8>
 8025f0e:	e000      	b.n	8025f12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8025f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8025f12:	687b      	ldr	r3, [r7, #4]
 8025f14:	681b      	ldr	r3, [r3, #0]
 8025f16:	f003 0302 	and.w	r3, r3, #2
 8025f1a:	2b00      	cmp	r3, #0
 8025f1c:	d063      	beq.n	8025fe6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8025f1e:	4b65      	ldr	r3, [pc, #404]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 8025f20:	689b      	ldr	r3, [r3, #8]
 8025f22:	f003 030c 	and.w	r3, r3, #12
 8025f26:	2b00      	cmp	r3, #0
 8025f28:	d00b      	beq.n	8025f42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8025f2a:	4b62      	ldr	r3, [pc, #392]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 8025f2c:	689b      	ldr	r3, [r3, #8]
 8025f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8025f32:	2b08      	cmp	r3, #8
 8025f34:	d11c      	bne.n	8025f70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8025f36:	4b5f      	ldr	r3, [pc, #380]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 8025f38:	685b      	ldr	r3, [r3, #4]
 8025f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8025f3e:	2b00      	cmp	r3, #0
 8025f40:	d116      	bne.n	8025f70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8025f42:	4b5c      	ldr	r3, [pc, #368]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 8025f44:	681b      	ldr	r3, [r3, #0]
 8025f46:	f003 0302 	and.w	r3, r3, #2
 8025f4a:	2b00      	cmp	r3, #0
 8025f4c:	d005      	beq.n	8025f5a <HAL_RCC_OscConfig+0x152>
 8025f4e:	687b      	ldr	r3, [r7, #4]
 8025f50:	68db      	ldr	r3, [r3, #12]
 8025f52:	2b01      	cmp	r3, #1
 8025f54:	d001      	beq.n	8025f5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8025f56:	2301      	movs	r3, #1
 8025f58:	e1bb      	b.n	80262d2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8025f5a:	4b56      	ldr	r3, [pc, #344]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 8025f5c:	681b      	ldr	r3, [r3, #0]
 8025f5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8025f62:	687b      	ldr	r3, [r7, #4]
 8025f64:	691b      	ldr	r3, [r3, #16]
 8025f66:	00db      	lsls	r3, r3, #3
 8025f68:	4952      	ldr	r1, [pc, #328]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 8025f6a:	4313      	orrs	r3, r2
 8025f6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8025f6e:	e03a      	b.n	8025fe6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8025f70:	687b      	ldr	r3, [r7, #4]
 8025f72:	68db      	ldr	r3, [r3, #12]
 8025f74:	2b00      	cmp	r3, #0
 8025f76:	d020      	beq.n	8025fba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8025f78:	4b4f      	ldr	r3, [pc, #316]	; (80260b8 <HAL_RCC_OscConfig+0x2b0>)
 8025f7a:	2201      	movs	r2, #1
 8025f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8025f7e:	f7fe fb9d 	bl	80246bc <HAL_GetTick>
 8025f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8025f84:	e008      	b.n	8025f98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8025f86:	f7fe fb99 	bl	80246bc <HAL_GetTick>
 8025f8a:	4602      	mov	r2, r0
 8025f8c:	693b      	ldr	r3, [r7, #16]
 8025f8e:	1ad3      	subs	r3, r2, r3
 8025f90:	2b02      	cmp	r3, #2
 8025f92:	d901      	bls.n	8025f98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8025f94:	2303      	movs	r3, #3
 8025f96:	e19c      	b.n	80262d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8025f98:	4b46      	ldr	r3, [pc, #280]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 8025f9a:	681b      	ldr	r3, [r3, #0]
 8025f9c:	f003 0302 	and.w	r3, r3, #2
 8025fa0:	2b00      	cmp	r3, #0
 8025fa2:	d0f0      	beq.n	8025f86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8025fa4:	4b43      	ldr	r3, [pc, #268]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 8025fa6:	681b      	ldr	r3, [r3, #0]
 8025fa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8025fac:	687b      	ldr	r3, [r7, #4]
 8025fae:	691b      	ldr	r3, [r3, #16]
 8025fb0:	00db      	lsls	r3, r3, #3
 8025fb2:	4940      	ldr	r1, [pc, #256]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 8025fb4:	4313      	orrs	r3, r2
 8025fb6:	600b      	str	r3, [r1, #0]
 8025fb8:	e015      	b.n	8025fe6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8025fba:	4b3f      	ldr	r3, [pc, #252]	; (80260b8 <HAL_RCC_OscConfig+0x2b0>)
 8025fbc:	2200      	movs	r2, #0
 8025fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8025fc0:	f7fe fb7c 	bl	80246bc <HAL_GetTick>
 8025fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8025fc6:	e008      	b.n	8025fda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8025fc8:	f7fe fb78 	bl	80246bc <HAL_GetTick>
 8025fcc:	4602      	mov	r2, r0
 8025fce:	693b      	ldr	r3, [r7, #16]
 8025fd0:	1ad3      	subs	r3, r2, r3
 8025fd2:	2b02      	cmp	r3, #2
 8025fd4:	d901      	bls.n	8025fda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8025fd6:	2303      	movs	r3, #3
 8025fd8:	e17b      	b.n	80262d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8025fda:	4b36      	ldr	r3, [pc, #216]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 8025fdc:	681b      	ldr	r3, [r3, #0]
 8025fde:	f003 0302 	and.w	r3, r3, #2
 8025fe2:	2b00      	cmp	r3, #0
 8025fe4:	d1f0      	bne.n	8025fc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8025fe6:	687b      	ldr	r3, [r7, #4]
 8025fe8:	681b      	ldr	r3, [r3, #0]
 8025fea:	f003 0308 	and.w	r3, r3, #8
 8025fee:	2b00      	cmp	r3, #0
 8025ff0:	d030      	beq.n	8026054 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8025ff2:	687b      	ldr	r3, [r7, #4]
 8025ff4:	695b      	ldr	r3, [r3, #20]
 8025ff6:	2b00      	cmp	r3, #0
 8025ff8:	d016      	beq.n	8026028 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8025ffa:	4b30      	ldr	r3, [pc, #192]	; (80260bc <HAL_RCC_OscConfig+0x2b4>)
 8025ffc:	2201      	movs	r2, #1
 8025ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8026000:	f7fe fb5c 	bl	80246bc <HAL_GetTick>
 8026004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8026006:	e008      	b.n	802601a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8026008:	f7fe fb58 	bl	80246bc <HAL_GetTick>
 802600c:	4602      	mov	r2, r0
 802600e:	693b      	ldr	r3, [r7, #16]
 8026010:	1ad3      	subs	r3, r2, r3
 8026012:	2b02      	cmp	r3, #2
 8026014:	d901      	bls.n	802601a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8026016:	2303      	movs	r3, #3
 8026018:	e15b      	b.n	80262d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802601a:	4b26      	ldr	r3, [pc, #152]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 802601c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802601e:	f003 0302 	and.w	r3, r3, #2
 8026022:	2b00      	cmp	r3, #0
 8026024:	d0f0      	beq.n	8026008 <HAL_RCC_OscConfig+0x200>
 8026026:	e015      	b.n	8026054 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8026028:	4b24      	ldr	r3, [pc, #144]	; (80260bc <HAL_RCC_OscConfig+0x2b4>)
 802602a:	2200      	movs	r2, #0
 802602c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 802602e:	f7fe fb45 	bl	80246bc <HAL_GetTick>
 8026032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8026034:	e008      	b.n	8026048 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8026036:	f7fe fb41 	bl	80246bc <HAL_GetTick>
 802603a:	4602      	mov	r2, r0
 802603c:	693b      	ldr	r3, [r7, #16]
 802603e:	1ad3      	subs	r3, r2, r3
 8026040:	2b02      	cmp	r3, #2
 8026042:	d901      	bls.n	8026048 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8026044:	2303      	movs	r3, #3
 8026046:	e144      	b.n	80262d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8026048:	4b1a      	ldr	r3, [pc, #104]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 802604a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802604c:	f003 0302 	and.w	r3, r3, #2
 8026050:	2b00      	cmp	r3, #0
 8026052:	d1f0      	bne.n	8026036 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8026054:	687b      	ldr	r3, [r7, #4]
 8026056:	681b      	ldr	r3, [r3, #0]
 8026058:	f003 0304 	and.w	r3, r3, #4
 802605c:	2b00      	cmp	r3, #0
 802605e:	f000 80a0 	beq.w	80261a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8026062:	2300      	movs	r3, #0
 8026064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8026066:	4b13      	ldr	r3, [pc, #76]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 8026068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802606a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802606e:	2b00      	cmp	r3, #0
 8026070:	d10f      	bne.n	8026092 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8026072:	2300      	movs	r3, #0
 8026074:	60bb      	str	r3, [r7, #8]
 8026076:	4b0f      	ldr	r3, [pc, #60]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 8026078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802607a:	4a0e      	ldr	r2, [pc, #56]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 802607c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8026080:	6413      	str	r3, [r2, #64]	; 0x40
 8026082:	4b0c      	ldr	r3, [pc, #48]	; (80260b4 <HAL_RCC_OscConfig+0x2ac>)
 8026084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802608a:	60bb      	str	r3, [r7, #8]
 802608c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 802608e:	2301      	movs	r3, #1
 8026090:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8026092:	4b0b      	ldr	r3, [pc, #44]	; (80260c0 <HAL_RCC_OscConfig+0x2b8>)
 8026094:	681b      	ldr	r3, [r3, #0]
 8026096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802609a:	2b00      	cmp	r3, #0
 802609c:	d121      	bne.n	80260e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 802609e:	4b08      	ldr	r3, [pc, #32]	; (80260c0 <HAL_RCC_OscConfig+0x2b8>)
 80260a0:	681b      	ldr	r3, [r3, #0]
 80260a2:	4a07      	ldr	r2, [pc, #28]	; (80260c0 <HAL_RCC_OscConfig+0x2b8>)
 80260a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80260a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80260aa:	f7fe fb07 	bl	80246bc <HAL_GetTick>
 80260ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80260b0:	e011      	b.n	80260d6 <HAL_RCC_OscConfig+0x2ce>
 80260b2:	bf00      	nop
 80260b4:	40023800 	.word	0x40023800
 80260b8:	42470000 	.word	0x42470000
 80260bc:	42470e80 	.word	0x42470e80
 80260c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80260c4:	f7fe fafa 	bl	80246bc <HAL_GetTick>
 80260c8:	4602      	mov	r2, r0
 80260ca:	693b      	ldr	r3, [r7, #16]
 80260cc:	1ad3      	subs	r3, r2, r3
 80260ce:	2b02      	cmp	r3, #2
 80260d0:	d901      	bls.n	80260d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80260d2:	2303      	movs	r3, #3
 80260d4:	e0fd      	b.n	80262d2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80260d6:	4b81      	ldr	r3, [pc, #516]	; (80262dc <HAL_RCC_OscConfig+0x4d4>)
 80260d8:	681b      	ldr	r3, [r3, #0]
 80260da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80260de:	2b00      	cmp	r3, #0
 80260e0:	d0f0      	beq.n	80260c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80260e2:	687b      	ldr	r3, [r7, #4]
 80260e4:	689b      	ldr	r3, [r3, #8]
 80260e6:	2b01      	cmp	r3, #1
 80260e8:	d106      	bne.n	80260f8 <HAL_RCC_OscConfig+0x2f0>
 80260ea:	4b7d      	ldr	r3, [pc, #500]	; (80262e0 <HAL_RCC_OscConfig+0x4d8>)
 80260ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80260ee:	4a7c      	ldr	r2, [pc, #496]	; (80262e0 <HAL_RCC_OscConfig+0x4d8>)
 80260f0:	f043 0301 	orr.w	r3, r3, #1
 80260f4:	6713      	str	r3, [r2, #112]	; 0x70
 80260f6:	e01c      	b.n	8026132 <HAL_RCC_OscConfig+0x32a>
 80260f8:	687b      	ldr	r3, [r7, #4]
 80260fa:	689b      	ldr	r3, [r3, #8]
 80260fc:	2b05      	cmp	r3, #5
 80260fe:	d10c      	bne.n	802611a <HAL_RCC_OscConfig+0x312>
 8026100:	4b77      	ldr	r3, [pc, #476]	; (80262e0 <HAL_RCC_OscConfig+0x4d8>)
 8026102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026104:	4a76      	ldr	r2, [pc, #472]	; (80262e0 <HAL_RCC_OscConfig+0x4d8>)
 8026106:	f043 0304 	orr.w	r3, r3, #4
 802610a:	6713      	str	r3, [r2, #112]	; 0x70
 802610c:	4b74      	ldr	r3, [pc, #464]	; (80262e0 <HAL_RCC_OscConfig+0x4d8>)
 802610e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026110:	4a73      	ldr	r2, [pc, #460]	; (80262e0 <HAL_RCC_OscConfig+0x4d8>)
 8026112:	f043 0301 	orr.w	r3, r3, #1
 8026116:	6713      	str	r3, [r2, #112]	; 0x70
 8026118:	e00b      	b.n	8026132 <HAL_RCC_OscConfig+0x32a>
 802611a:	4b71      	ldr	r3, [pc, #452]	; (80262e0 <HAL_RCC_OscConfig+0x4d8>)
 802611c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802611e:	4a70      	ldr	r2, [pc, #448]	; (80262e0 <HAL_RCC_OscConfig+0x4d8>)
 8026120:	f023 0301 	bic.w	r3, r3, #1
 8026124:	6713      	str	r3, [r2, #112]	; 0x70
 8026126:	4b6e      	ldr	r3, [pc, #440]	; (80262e0 <HAL_RCC_OscConfig+0x4d8>)
 8026128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802612a:	4a6d      	ldr	r2, [pc, #436]	; (80262e0 <HAL_RCC_OscConfig+0x4d8>)
 802612c:	f023 0304 	bic.w	r3, r3, #4
 8026130:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8026132:	687b      	ldr	r3, [r7, #4]
 8026134:	689b      	ldr	r3, [r3, #8]
 8026136:	2b00      	cmp	r3, #0
 8026138:	d015      	beq.n	8026166 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802613a:	f7fe fabf 	bl	80246bc <HAL_GetTick>
 802613e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8026140:	e00a      	b.n	8026158 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8026142:	f7fe fabb 	bl	80246bc <HAL_GetTick>
 8026146:	4602      	mov	r2, r0
 8026148:	693b      	ldr	r3, [r7, #16]
 802614a:	1ad3      	subs	r3, r2, r3
 802614c:	f241 3288 	movw	r2, #5000	; 0x1388
 8026150:	4293      	cmp	r3, r2
 8026152:	d901      	bls.n	8026158 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8026154:	2303      	movs	r3, #3
 8026156:	e0bc      	b.n	80262d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8026158:	4b61      	ldr	r3, [pc, #388]	; (80262e0 <HAL_RCC_OscConfig+0x4d8>)
 802615a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802615c:	f003 0302 	and.w	r3, r3, #2
 8026160:	2b00      	cmp	r3, #0
 8026162:	d0ee      	beq.n	8026142 <HAL_RCC_OscConfig+0x33a>
 8026164:	e014      	b.n	8026190 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8026166:	f7fe faa9 	bl	80246bc <HAL_GetTick>
 802616a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 802616c:	e00a      	b.n	8026184 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 802616e:	f7fe faa5 	bl	80246bc <HAL_GetTick>
 8026172:	4602      	mov	r2, r0
 8026174:	693b      	ldr	r3, [r7, #16]
 8026176:	1ad3      	subs	r3, r2, r3
 8026178:	f241 3288 	movw	r2, #5000	; 0x1388
 802617c:	4293      	cmp	r3, r2
 802617e:	d901      	bls.n	8026184 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8026180:	2303      	movs	r3, #3
 8026182:	e0a6      	b.n	80262d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8026184:	4b56      	ldr	r3, [pc, #344]	; (80262e0 <HAL_RCC_OscConfig+0x4d8>)
 8026186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8026188:	f003 0302 	and.w	r3, r3, #2
 802618c:	2b00      	cmp	r3, #0
 802618e:	d1ee      	bne.n	802616e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8026190:	7dfb      	ldrb	r3, [r7, #23]
 8026192:	2b01      	cmp	r3, #1
 8026194:	d105      	bne.n	80261a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8026196:	4b52      	ldr	r3, [pc, #328]	; (80262e0 <HAL_RCC_OscConfig+0x4d8>)
 8026198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802619a:	4a51      	ldr	r2, [pc, #324]	; (80262e0 <HAL_RCC_OscConfig+0x4d8>)
 802619c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80261a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80261a2:	687b      	ldr	r3, [r7, #4]
 80261a4:	699b      	ldr	r3, [r3, #24]
 80261a6:	2b00      	cmp	r3, #0
 80261a8:	f000 8092 	beq.w	80262d0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80261ac:	4b4c      	ldr	r3, [pc, #304]	; (80262e0 <HAL_RCC_OscConfig+0x4d8>)
 80261ae:	689b      	ldr	r3, [r3, #8]
 80261b0:	f003 030c 	and.w	r3, r3, #12
 80261b4:	2b08      	cmp	r3, #8
 80261b6:	d05c      	beq.n	8026272 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80261b8:	687b      	ldr	r3, [r7, #4]
 80261ba:	699b      	ldr	r3, [r3, #24]
 80261bc:	2b02      	cmp	r3, #2
 80261be:	d141      	bne.n	8026244 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80261c0:	4b48      	ldr	r3, [pc, #288]	; (80262e4 <HAL_RCC_OscConfig+0x4dc>)
 80261c2:	2200      	movs	r2, #0
 80261c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80261c6:	f7fe fa79 	bl	80246bc <HAL_GetTick>
 80261ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80261cc:	e008      	b.n	80261e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80261ce:	f7fe fa75 	bl	80246bc <HAL_GetTick>
 80261d2:	4602      	mov	r2, r0
 80261d4:	693b      	ldr	r3, [r7, #16]
 80261d6:	1ad3      	subs	r3, r2, r3
 80261d8:	2b02      	cmp	r3, #2
 80261da:	d901      	bls.n	80261e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80261dc:	2303      	movs	r3, #3
 80261de:	e078      	b.n	80262d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80261e0:	4b3f      	ldr	r3, [pc, #252]	; (80262e0 <HAL_RCC_OscConfig+0x4d8>)
 80261e2:	681b      	ldr	r3, [r3, #0]
 80261e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80261e8:	2b00      	cmp	r3, #0
 80261ea:	d1f0      	bne.n	80261ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80261ec:	687b      	ldr	r3, [r7, #4]
 80261ee:	69da      	ldr	r2, [r3, #28]
 80261f0:	687b      	ldr	r3, [r7, #4]
 80261f2:	6a1b      	ldr	r3, [r3, #32]
 80261f4:	431a      	orrs	r2, r3
 80261f6:	687b      	ldr	r3, [r7, #4]
 80261f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80261fa:	019b      	lsls	r3, r3, #6
 80261fc:	431a      	orrs	r2, r3
 80261fe:	687b      	ldr	r3, [r7, #4]
 8026200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026202:	085b      	lsrs	r3, r3, #1
 8026204:	3b01      	subs	r3, #1
 8026206:	041b      	lsls	r3, r3, #16
 8026208:	431a      	orrs	r2, r3
 802620a:	687b      	ldr	r3, [r7, #4]
 802620c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802620e:	061b      	lsls	r3, r3, #24
 8026210:	4933      	ldr	r1, [pc, #204]	; (80262e0 <HAL_RCC_OscConfig+0x4d8>)
 8026212:	4313      	orrs	r3, r2
 8026214:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8026216:	4b33      	ldr	r3, [pc, #204]	; (80262e4 <HAL_RCC_OscConfig+0x4dc>)
 8026218:	2201      	movs	r2, #1
 802621a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802621c:	f7fe fa4e 	bl	80246bc <HAL_GetTick>
 8026220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8026222:	e008      	b.n	8026236 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8026224:	f7fe fa4a 	bl	80246bc <HAL_GetTick>
 8026228:	4602      	mov	r2, r0
 802622a:	693b      	ldr	r3, [r7, #16]
 802622c:	1ad3      	subs	r3, r2, r3
 802622e:	2b02      	cmp	r3, #2
 8026230:	d901      	bls.n	8026236 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8026232:	2303      	movs	r3, #3
 8026234:	e04d      	b.n	80262d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8026236:	4b2a      	ldr	r3, [pc, #168]	; (80262e0 <HAL_RCC_OscConfig+0x4d8>)
 8026238:	681b      	ldr	r3, [r3, #0]
 802623a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802623e:	2b00      	cmp	r3, #0
 8026240:	d0f0      	beq.n	8026224 <HAL_RCC_OscConfig+0x41c>
 8026242:	e045      	b.n	80262d0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8026244:	4b27      	ldr	r3, [pc, #156]	; (80262e4 <HAL_RCC_OscConfig+0x4dc>)
 8026246:	2200      	movs	r2, #0
 8026248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802624a:	f7fe fa37 	bl	80246bc <HAL_GetTick>
 802624e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026250:	e008      	b.n	8026264 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8026252:	f7fe fa33 	bl	80246bc <HAL_GetTick>
 8026256:	4602      	mov	r2, r0
 8026258:	693b      	ldr	r3, [r7, #16]
 802625a:	1ad3      	subs	r3, r2, r3
 802625c:	2b02      	cmp	r3, #2
 802625e:	d901      	bls.n	8026264 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8026260:	2303      	movs	r3, #3
 8026262:	e036      	b.n	80262d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8026264:	4b1e      	ldr	r3, [pc, #120]	; (80262e0 <HAL_RCC_OscConfig+0x4d8>)
 8026266:	681b      	ldr	r3, [r3, #0]
 8026268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802626c:	2b00      	cmp	r3, #0
 802626e:	d1f0      	bne.n	8026252 <HAL_RCC_OscConfig+0x44a>
 8026270:	e02e      	b.n	80262d0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8026272:	687b      	ldr	r3, [r7, #4]
 8026274:	699b      	ldr	r3, [r3, #24]
 8026276:	2b01      	cmp	r3, #1
 8026278:	d101      	bne.n	802627e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 802627a:	2301      	movs	r3, #1
 802627c:	e029      	b.n	80262d2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 802627e:	4b18      	ldr	r3, [pc, #96]	; (80262e0 <HAL_RCC_OscConfig+0x4d8>)
 8026280:	685b      	ldr	r3, [r3, #4]
 8026282:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8026284:	68fb      	ldr	r3, [r7, #12]
 8026286:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 802628a:	687b      	ldr	r3, [r7, #4]
 802628c:	69db      	ldr	r3, [r3, #28]
 802628e:	429a      	cmp	r2, r3
 8026290:	d11c      	bne.n	80262cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8026292:	68fb      	ldr	r3, [r7, #12]
 8026294:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8026298:	687b      	ldr	r3, [r7, #4]
 802629a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802629c:	429a      	cmp	r2, r3
 802629e:	d115      	bne.n	80262cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80262a0:	68fa      	ldr	r2, [r7, #12]
 80262a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80262a6:	4013      	ands	r3, r2
 80262a8:	687a      	ldr	r2, [r7, #4]
 80262aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80262ac:	4293      	cmp	r3, r2
 80262ae:	d10d      	bne.n	80262cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80262b0:	68fb      	ldr	r3, [r7, #12]
 80262b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80262b6:	687b      	ldr	r3, [r7, #4]
 80262b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80262ba:	429a      	cmp	r2, r3
 80262bc:	d106      	bne.n	80262cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80262be:	68fb      	ldr	r3, [r7, #12]
 80262c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80262c4:	687b      	ldr	r3, [r7, #4]
 80262c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80262c8:	429a      	cmp	r2, r3
 80262ca:	d001      	beq.n	80262d0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80262cc:	2301      	movs	r3, #1
 80262ce:	e000      	b.n	80262d2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80262d0:	2300      	movs	r3, #0
}
 80262d2:	4618      	mov	r0, r3
 80262d4:	3718      	adds	r7, #24
 80262d6:	46bd      	mov	sp, r7
 80262d8:	bd80      	pop	{r7, pc}
 80262da:	bf00      	nop
 80262dc:	40007000 	.word	0x40007000
 80262e0:	40023800 	.word	0x40023800
 80262e4:	42470060 	.word	0x42470060

080262e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80262e8:	b580      	push	{r7, lr}
 80262ea:	b084      	sub	sp, #16
 80262ec:	af00      	add	r7, sp, #0
 80262ee:	6078      	str	r0, [r7, #4]
 80262f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80262f2:	687b      	ldr	r3, [r7, #4]
 80262f4:	2b00      	cmp	r3, #0
 80262f6:	d101      	bne.n	80262fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80262f8:	2301      	movs	r3, #1
 80262fa:	e0cc      	b.n	8026496 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80262fc:	4b68      	ldr	r3, [pc, #416]	; (80264a0 <HAL_RCC_ClockConfig+0x1b8>)
 80262fe:	681b      	ldr	r3, [r3, #0]
 8026300:	f003 030f 	and.w	r3, r3, #15
 8026304:	683a      	ldr	r2, [r7, #0]
 8026306:	429a      	cmp	r2, r3
 8026308:	d90c      	bls.n	8026324 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802630a:	4b65      	ldr	r3, [pc, #404]	; (80264a0 <HAL_RCC_ClockConfig+0x1b8>)
 802630c:	683a      	ldr	r2, [r7, #0]
 802630e:	b2d2      	uxtb	r2, r2
 8026310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8026312:	4b63      	ldr	r3, [pc, #396]	; (80264a0 <HAL_RCC_ClockConfig+0x1b8>)
 8026314:	681b      	ldr	r3, [r3, #0]
 8026316:	f003 030f 	and.w	r3, r3, #15
 802631a:	683a      	ldr	r2, [r7, #0]
 802631c:	429a      	cmp	r2, r3
 802631e:	d001      	beq.n	8026324 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8026320:	2301      	movs	r3, #1
 8026322:	e0b8      	b.n	8026496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8026324:	687b      	ldr	r3, [r7, #4]
 8026326:	681b      	ldr	r3, [r3, #0]
 8026328:	f003 0302 	and.w	r3, r3, #2
 802632c:	2b00      	cmp	r3, #0
 802632e:	d020      	beq.n	8026372 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8026330:	687b      	ldr	r3, [r7, #4]
 8026332:	681b      	ldr	r3, [r3, #0]
 8026334:	f003 0304 	and.w	r3, r3, #4
 8026338:	2b00      	cmp	r3, #0
 802633a:	d005      	beq.n	8026348 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 802633c:	4b59      	ldr	r3, [pc, #356]	; (80264a4 <HAL_RCC_ClockConfig+0x1bc>)
 802633e:	689b      	ldr	r3, [r3, #8]
 8026340:	4a58      	ldr	r2, [pc, #352]	; (80264a4 <HAL_RCC_ClockConfig+0x1bc>)
 8026342:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8026346:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8026348:	687b      	ldr	r3, [r7, #4]
 802634a:	681b      	ldr	r3, [r3, #0]
 802634c:	f003 0308 	and.w	r3, r3, #8
 8026350:	2b00      	cmp	r3, #0
 8026352:	d005      	beq.n	8026360 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8026354:	4b53      	ldr	r3, [pc, #332]	; (80264a4 <HAL_RCC_ClockConfig+0x1bc>)
 8026356:	689b      	ldr	r3, [r3, #8]
 8026358:	4a52      	ldr	r2, [pc, #328]	; (80264a4 <HAL_RCC_ClockConfig+0x1bc>)
 802635a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 802635e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8026360:	4b50      	ldr	r3, [pc, #320]	; (80264a4 <HAL_RCC_ClockConfig+0x1bc>)
 8026362:	689b      	ldr	r3, [r3, #8]
 8026364:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8026368:	687b      	ldr	r3, [r7, #4]
 802636a:	689b      	ldr	r3, [r3, #8]
 802636c:	494d      	ldr	r1, [pc, #308]	; (80264a4 <HAL_RCC_ClockConfig+0x1bc>)
 802636e:	4313      	orrs	r3, r2
 8026370:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8026372:	687b      	ldr	r3, [r7, #4]
 8026374:	681b      	ldr	r3, [r3, #0]
 8026376:	f003 0301 	and.w	r3, r3, #1
 802637a:	2b00      	cmp	r3, #0
 802637c:	d044      	beq.n	8026408 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802637e:	687b      	ldr	r3, [r7, #4]
 8026380:	685b      	ldr	r3, [r3, #4]
 8026382:	2b01      	cmp	r3, #1
 8026384:	d107      	bne.n	8026396 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8026386:	4b47      	ldr	r3, [pc, #284]	; (80264a4 <HAL_RCC_ClockConfig+0x1bc>)
 8026388:	681b      	ldr	r3, [r3, #0]
 802638a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802638e:	2b00      	cmp	r3, #0
 8026390:	d119      	bne.n	80263c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8026392:	2301      	movs	r3, #1
 8026394:	e07f      	b.n	8026496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8026396:	687b      	ldr	r3, [r7, #4]
 8026398:	685b      	ldr	r3, [r3, #4]
 802639a:	2b02      	cmp	r3, #2
 802639c:	d003      	beq.n	80263a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 802639e:	687b      	ldr	r3, [r7, #4]
 80263a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80263a2:	2b03      	cmp	r3, #3
 80263a4:	d107      	bne.n	80263b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80263a6:	4b3f      	ldr	r3, [pc, #252]	; (80264a4 <HAL_RCC_ClockConfig+0x1bc>)
 80263a8:	681b      	ldr	r3, [r3, #0]
 80263aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80263ae:	2b00      	cmp	r3, #0
 80263b0:	d109      	bne.n	80263c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80263b2:	2301      	movs	r3, #1
 80263b4:	e06f      	b.n	8026496 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80263b6:	4b3b      	ldr	r3, [pc, #236]	; (80264a4 <HAL_RCC_ClockConfig+0x1bc>)
 80263b8:	681b      	ldr	r3, [r3, #0]
 80263ba:	f003 0302 	and.w	r3, r3, #2
 80263be:	2b00      	cmp	r3, #0
 80263c0:	d101      	bne.n	80263c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80263c2:	2301      	movs	r3, #1
 80263c4:	e067      	b.n	8026496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80263c6:	4b37      	ldr	r3, [pc, #220]	; (80264a4 <HAL_RCC_ClockConfig+0x1bc>)
 80263c8:	689b      	ldr	r3, [r3, #8]
 80263ca:	f023 0203 	bic.w	r2, r3, #3
 80263ce:	687b      	ldr	r3, [r7, #4]
 80263d0:	685b      	ldr	r3, [r3, #4]
 80263d2:	4934      	ldr	r1, [pc, #208]	; (80264a4 <HAL_RCC_ClockConfig+0x1bc>)
 80263d4:	4313      	orrs	r3, r2
 80263d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80263d8:	f7fe f970 	bl	80246bc <HAL_GetTick>
 80263dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80263de:	e00a      	b.n	80263f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80263e0:	f7fe f96c 	bl	80246bc <HAL_GetTick>
 80263e4:	4602      	mov	r2, r0
 80263e6:	68fb      	ldr	r3, [r7, #12]
 80263e8:	1ad3      	subs	r3, r2, r3
 80263ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80263ee:	4293      	cmp	r3, r2
 80263f0:	d901      	bls.n	80263f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80263f2:	2303      	movs	r3, #3
 80263f4:	e04f      	b.n	8026496 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80263f6:	4b2b      	ldr	r3, [pc, #172]	; (80264a4 <HAL_RCC_ClockConfig+0x1bc>)
 80263f8:	689b      	ldr	r3, [r3, #8]
 80263fa:	f003 020c 	and.w	r2, r3, #12
 80263fe:	687b      	ldr	r3, [r7, #4]
 8026400:	685b      	ldr	r3, [r3, #4]
 8026402:	009b      	lsls	r3, r3, #2
 8026404:	429a      	cmp	r2, r3
 8026406:	d1eb      	bne.n	80263e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8026408:	4b25      	ldr	r3, [pc, #148]	; (80264a0 <HAL_RCC_ClockConfig+0x1b8>)
 802640a:	681b      	ldr	r3, [r3, #0]
 802640c:	f003 030f 	and.w	r3, r3, #15
 8026410:	683a      	ldr	r2, [r7, #0]
 8026412:	429a      	cmp	r2, r3
 8026414:	d20c      	bcs.n	8026430 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8026416:	4b22      	ldr	r3, [pc, #136]	; (80264a0 <HAL_RCC_ClockConfig+0x1b8>)
 8026418:	683a      	ldr	r2, [r7, #0]
 802641a:	b2d2      	uxtb	r2, r2
 802641c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802641e:	4b20      	ldr	r3, [pc, #128]	; (80264a0 <HAL_RCC_ClockConfig+0x1b8>)
 8026420:	681b      	ldr	r3, [r3, #0]
 8026422:	f003 030f 	and.w	r3, r3, #15
 8026426:	683a      	ldr	r2, [r7, #0]
 8026428:	429a      	cmp	r2, r3
 802642a:	d001      	beq.n	8026430 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 802642c:	2301      	movs	r3, #1
 802642e:	e032      	b.n	8026496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8026430:	687b      	ldr	r3, [r7, #4]
 8026432:	681b      	ldr	r3, [r3, #0]
 8026434:	f003 0304 	and.w	r3, r3, #4
 8026438:	2b00      	cmp	r3, #0
 802643a:	d008      	beq.n	802644e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 802643c:	4b19      	ldr	r3, [pc, #100]	; (80264a4 <HAL_RCC_ClockConfig+0x1bc>)
 802643e:	689b      	ldr	r3, [r3, #8]
 8026440:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8026444:	687b      	ldr	r3, [r7, #4]
 8026446:	68db      	ldr	r3, [r3, #12]
 8026448:	4916      	ldr	r1, [pc, #88]	; (80264a4 <HAL_RCC_ClockConfig+0x1bc>)
 802644a:	4313      	orrs	r3, r2
 802644c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802644e:	687b      	ldr	r3, [r7, #4]
 8026450:	681b      	ldr	r3, [r3, #0]
 8026452:	f003 0308 	and.w	r3, r3, #8
 8026456:	2b00      	cmp	r3, #0
 8026458:	d009      	beq.n	802646e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 802645a:	4b12      	ldr	r3, [pc, #72]	; (80264a4 <HAL_RCC_ClockConfig+0x1bc>)
 802645c:	689b      	ldr	r3, [r3, #8]
 802645e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8026462:	687b      	ldr	r3, [r7, #4]
 8026464:	691b      	ldr	r3, [r3, #16]
 8026466:	00db      	lsls	r3, r3, #3
 8026468:	490e      	ldr	r1, [pc, #56]	; (80264a4 <HAL_RCC_ClockConfig+0x1bc>)
 802646a:	4313      	orrs	r3, r2
 802646c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 802646e:	f000 f821 	bl	80264b4 <HAL_RCC_GetSysClockFreq>
 8026472:	4601      	mov	r1, r0
 8026474:	4b0b      	ldr	r3, [pc, #44]	; (80264a4 <HAL_RCC_ClockConfig+0x1bc>)
 8026476:	689b      	ldr	r3, [r3, #8]
 8026478:	091b      	lsrs	r3, r3, #4
 802647a:	f003 030f 	and.w	r3, r3, #15
 802647e:	4a0a      	ldr	r2, [pc, #40]	; (80264a8 <HAL_RCC_ClockConfig+0x1c0>)
 8026480:	5cd3      	ldrb	r3, [r2, r3]
 8026482:	fa21 f303 	lsr.w	r3, r1, r3
 8026486:	4a09      	ldr	r2, [pc, #36]	; (80264ac <HAL_RCC_ClockConfig+0x1c4>)
 8026488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 802648a:	4b09      	ldr	r3, [pc, #36]	; (80264b0 <HAL_RCC_ClockConfig+0x1c8>)
 802648c:	681b      	ldr	r3, [r3, #0]
 802648e:	4618      	mov	r0, r3
 8026490:	f7fe f8d0 	bl	8024634 <HAL_InitTick>

  return HAL_OK;
 8026494:	2300      	movs	r3, #0
}
 8026496:	4618      	mov	r0, r3
 8026498:	3710      	adds	r7, #16
 802649a:	46bd      	mov	sp, r7
 802649c:	bd80      	pop	{r7, pc}
 802649e:	bf00      	nop
 80264a0:	40023c00 	.word	0x40023c00
 80264a4:	40023800 	.word	0x40023800
 80264a8:	08029a58 	.word	0x08029a58
 80264ac:	20000000 	.word	0x20000000
 80264b0:	20000004 	.word	0x20000004

080264b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80264b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80264b6:	b085      	sub	sp, #20
 80264b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80264ba:	2300      	movs	r3, #0
 80264bc:	607b      	str	r3, [r7, #4]
 80264be:	2300      	movs	r3, #0
 80264c0:	60fb      	str	r3, [r7, #12]
 80264c2:	2300      	movs	r3, #0
 80264c4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80264c6:	2300      	movs	r3, #0
 80264c8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80264ca:	4b50      	ldr	r3, [pc, #320]	; (802660c <HAL_RCC_GetSysClockFreq+0x158>)
 80264cc:	689b      	ldr	r3, [r3, #8]
 80264ce:	f003 030c 	and.w	r3, r3, #12
 80264d2:	2b04      	cmp	r3, #4
 80264d4:	d007      	beq.n	80264e6 <HAL_RCC_GetSysClockFreq+0x32>
 80264d6:	2b08      	cmp	r3, #8
 80264d8:	d008      	beq.n	80264ec <HAL_RCC_GetSysClockFreq+0x38>
 80264da:	2b00      	cmp	r3, #0
 80264dc:	f040 808d 	bne.w	80265fa <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80264e0:	4b4b      	ldr	r3, [pc, #300]	; (8026610 <HAL_RCC_GetSysClockFreq+0x15c>)
 80264e2:	60bb      	str	r3, [r7, #8]
       break;
 80264e4:	e08c      	b.n	8026600 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80264e6:	4b4b      	ldr	r3, [pc, #300]	; (8026614 <HAL_RCC_GetSysClockFreq+0x160>)
 80264e8:	60bb      	str	r3, [r7, #8]
      break;
 80264ea:	e089      	b.n	8026600 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80264ec:	4b47      	ldr	r3, [pc, #284]	; (802660c <HAL_RCC_GetSysClockFreq+0x158>)
 80264ee:	685b      	ldr	r3, [r3, #4]
 80264f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80264f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80264f6:	4b45      	ldr	r3, [pc, #276]	; (802660c <HAL_RCC_GetSysClockFreq+0x158>)
 80264f8:	685b      	ldr	r3, [r3, #4]
 80264fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80264fe:	2b00      	cmp	r3, #0
 8026500:	d023      	beq.n	802654a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8026502:	4b42      	ldr	r3, [pc, #264]	; (802660c <HAL_RCC_GetSysClockFreq+0x158>)
 8026504:	685b      	ldr	r3, [r3, #4]
 8026506:	099b      	lsrs	r3, r3, #6
 8026508:	f04f 0400 	mov.w	r4, #0
 802650c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8026510:	f04f 0200 	mov.w	r2, #0
 8026514:	ea03 0501 	and.w	r5, r3, r1
 8026518:	ea04 0602 	and.w	r6, r4, r2
 802651c:	4a3d      	ldr	r2, [pc, #244]	; (8026614 <HAL_RCC_GetSysClockFreq+0x160>)
 802651e:	fb02 f106 	mul.w	r1, r2, r6
 8026522:	2200      	movs	r2, #0
 8026524:	fb02 f205 	mul.w	r2, r2, r5
 8026528:	440a      	add	r2, r1
 802652a:	493a      	ldr	r1, [pc, #232]	; (8026614 <HAL_RCC_GetSysClockFreq+0x160>)
 802652c:	fba5 0101 	umull	r0, r1, r5, r1
 8026530:	1853      	adds	r3, r2, r1
 8026532:	4619      	mov	r1, r3
 8026534:	687b      	ldr	r3, [r7, #4]
 8026536:	f04f 0400 	mov.w	r4, #0
 802653a:	461a      	mov	r2, r3
 802653c:	4623      	mov	r3, r4
 802653e:	f7fa fa6b 	bl	8020a18 <__aeabi_uldivmod>
 8026542:	4603      	mov	r3, r0
 8026544:	460c      	mov	r4, r1
 8026546:	60fb      	str	r3, [r7, #12]
 8026548:	e049      	b.n	80265de <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802654a:	4b30      	ldr	r3, [pc, #192]	; (802660c <HAL_RCC_GetSysClockFreq+0x158>)
 802654c:	685b      	ldr	r3, [r3, #4]
 802654e:	099b      	lsrs	r3, r3, #6
 8026550:	f04f 0400 	mov.w	r4, #0
 8026554:	f240 11ff 	movw	r1, #511	; 0x1ff
 8026558:	f04f 0200 	mov.w	r2, #0
 802655c:	ea03 0501 	and.w	r5, r3, r1
 8026560:	ea04 0602 	and.w	r6, r4, r2
 8026564:	4629      	mov	r1, r5
 8026566:	4632      	mov	r2, r6
 8026568:	f04f 0300 	mov.w	r3, #0
 802656c:	f04f 0400 	mov.w	r4, #0
 8026570:	0154      	lsls	r4, r2, #5
 8026572:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8026576:	014b      	lsls	r3, r1, #5
 8026578:	4619      	mov	r1, r3
 802657a:	4622      	mov	r2, r4
 802657c:	1b49      	subs	r1, r1, r5
 802657e:	eb62 0206 	sbc.w	r2, r2, r6
 8026582:	f04f 0300 	mov.w	r3, #0
 8026586:	f04f 0400 	mov.w	r4, #0
 802658a:	0194      	lsls	r4, r2, #6
 802658c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8026590:	018b      	lsls	r3, r1, #6
 8026592:	1a5b      	subs	r3, r3, r1
 8026594:	eb64 0402 	sbc.w	r4, r4, r2
 8026598:	f04f 0100 	mov.w	r1, #0
 802659c:	f04f 0200 	mov.w	r2, #0
 80265a0:	00e2      	lsls	r2, r4, #3
 80265a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80265a6:	00d9      	lsls	r1, r3, #3
 80265a8:	460b      	mov	r3, r1
 80265aa:	4614      	mov	r4, r2
 80265ac:	195b      	adds	r3, r3, r5
 80265ae:	eb44 0406 	adc.w	r4, r4, r6
 80265b2:	f04f 0100 	mov.w	r1, #0
 80265b6:	f04f 0200 	mov.w	r2, #0
 80265ba:	02a2      	lsls	r2, r4, #10
 80265bc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80265c0:	0299      	lsls	r1, r3, #10
 80265c2:	460b      	mov	r3, r1
 80265c4:	4614      	mov	r4, r2
 80265c6:	4618      	mov	r0, r3
 80265c8:	4621      	mov	r1, r4
 80265ca:	687b      	ldr	r3, [r7, #4]
 80265cc:	f04f 0400 	mov.w	r4, #0
 80265d0:	461a      	mov	r2, r3
 80265d2:	4623      	mov	r3, r4
 80265d4:	f7fa fa20 	bl	8020a18 <__aeabi_uldivmod>
 80265d8:	4603      	mov	r3, r0
 80265da:	460c      	mov	r4, r1
 80265dc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80265de:	4b0b      	ldr	r3, [pc, #44]	; (802660c <HAL_RCC_GetSysClockFreq+0x158>)
 80265e0:	685b      	ldr	r3, [r3, #4]
 80265e2:	0c1b      	lsrs	r3, r3, #16
 80265e4:	f003 0303 	and.w	r3, r3, #3
 80265e8:	3301      	adds	r3, #1
 80265ea:	005b      	lsls	r3, r3, #1
 80265ec:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80265ee:	68fa      	ldr	r2, [r7, #12]
 80265f0:	683b      	ldr	r3, [r7, #0]
 80265f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80265f6:	60bb      	str	r3, [r7, #8]
      break;
 80265f8:	e002      	b.n	8026600 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80265fa:	4b05      	ldr	r3, [pc, #20]	; (8026610 <HAL_RCC_GetSysClockFreq+0x15c>)
 80265fc:	60bb      	str	r3, [r7, #8]
      break;
 80265fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8026600:	68bb      	ldr	r3, [r7, #8]
}
 8026602:	4618      	mov	r0, r3
 8026604:	3714      	adds	r7, #20
 8026606:	46bd      	mov	sp, r7
 8026608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802660a:	bf00      	nop
 802660c:	40023800 	.word	0x40023800
 8026610:	00f42400 	.word	0x00f42400
 8026614:	00b71b00 	.word	0x00b71b00

08026618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8026618:	b480      	push	{r7}
 802661a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 802661c:	4b03      	ldr	r3, [pc, #12]	; (802662c <HAL_RCC_GetHCLKFreq+0x14>)
 802661e:	681b      	ldr	r3, [r3, #0]
}
 8026620:	4618      	mov	r0, r3
 8026622:	46bd      	mov	sp, r7
 8026624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026628:	4770      	bx	lr
 802662a:	bf00      	nop
 802662c:	20000000 	.word	0x20000000

08026630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8026630:	b580      	push	{r7, lr}
 8026632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8026634:	f7ff fff0 	bl	8026618 <HAL_RCC_GetHCLKFreq>
 8026638:	4601      	mov	r1, r0
 802663a:	4b05      	ldr	r3, [pc, #20]	; (8026650 <HAL_RCC_GetPCLK1Freq+0x20>)
 802663c:	689b      	ldr	r3, [r3, #8]
 802663e:	0a9b      	lsrs	r3, r3, #10
 8026640:	f003 0307 	and.w	r3, r3, #7
 8026644:	4a03      	ldr	r2, [pc, #12]	; (8026654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8026646:	5cd3      	ldrb	r3, [r2, r3]
 8026648:	fa21 f303 	lsr.w	r3, r1, r3
}
 802664c:	4618      	mov	r0, r3
 802664e:	bd80      	pop	{r7, pc}
 8026650:	40023800 	.word	0x40023800
 8026654:	08029a68 	.word	0x08029a68

08026658 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8026658:	b580      	push	{r7, lr}
 802665a:	b082      	sub	sp, #8
 802665c:	af00      	add	r7, sp, #0
 802665e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8026660:	687b      	ldr	r3, [r7, #4]
 8026662:	2b00      	cmp	r3, #0
 8026664:	d101      	bne.n	802666a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8026666:	2301      	movs	r3, #1
 8026668:	e056      	b.n	8026718 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802666a:	687b      	ldr	r3, [r7, #4]
 802666c:	2200      	movs	r2, #0
 802666e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8026670:	687b      	ldr	r3, [r7, #4]
 8026672:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8026676:	b2db      	uxtb	r3, r3
 8026678:	2b00      	cmp	r3, #0
 802667a:	d106      	bne.n	802668a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 802667c:	687b      	ldr	r3, [r7, #4]
 802667e:	2200      	movs	r2, #0
 8026680:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8026684:	6878      	ldr	r0, [r7, #4]
 8026686:	f7fc feb1 	bl	80233ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 802668a:	687b      	ldr	r3, [r7, #4]
 802668c:	2202      	movs	r2, #2
 802668e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8026692:	687b      	ldr	r3, [r7, #4]
 8026694:	681b      	ldr	r3, [r3, #0]
 8026696:	681a      	ldr	r2, [r3, #0]
 8026698:	687b      	ldr	r3, [r7, #4]
 802669a:	681b      	ldr	r3, [r3, #0]
 802669c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80266a0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80266a2:	687b      	ldr	r3, [r7, #4]
 80266a4:	685a      	ldr	r2, [r3, #4]
 80266a6:	687b      	ldr	r3, [r7, #4]
 80266a8:	689b      	ldr	r3, [r3, #8]
 80266aa:	431a      	orrs	r2, r3
 80266ac:	687b      	ldr	r3, [r7, #4]
 80266ae:	68db      	ldr	r3, [r3, #12]
 80266b0:	431a      	orrs	r2, r3
 80266b2:	687b      	ldr	r3, [r7, #4]
 80266b4:	691b      	ldr	r3, [r3, #16]
 80266b6:	431a      	orrs	r2, r3
 80266b8:	687b      	ldr	r3, [r7, #4]
 80266ba:	695b      	ldr	r3, [r3, #20]
 80266bc:	431a      	orrs	r2, r3
 80266be:	687b      	ldr	r3, [r7, #4]
 80266c0:	699b      	ldr	r3, [r3, #24]
 80266c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80266c6:	431a      	orrs	r2, r3
 80266c8:	687b      	ldr	r3, [r7, #4]
 80266ca:	69db      	ldr	r3, [r3, #28]
 80266cc:	431a      	orrs	r2, r3
 80266ce:	687b      	ldr	r3, [r7, #4]
 80266d0:	6a1b      	ldr	r3, [r3, #32]
 80266d2:	ea42 0103 	orr.w	r1, r2, r3
 80266d6:	687b      	ldr	r3, [r7, #4]
 80266d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80266da:	687b      	ldr	r3, [r7, #4]
 80266dc:	681b      	ldr	r3, [r3, #0]
 80266de:	430a      	orrs	r2, r1
 80266e0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80266e2:	687b      	ldr	r3, [r7, #4]
 80266e4:	699b      	ldr	r3, [r3, #24]
 80266e6:	0c1b      	lsrs	r3, r3, #16
 80266e8:	f003 0104 	and.w	r1, r3, #4
 80266ec:	687b      	ldr	r3, [r7, #4]
 80266ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80266f0:	687b      	ldr	r3, [r7, #4]
 80266f2:	681b      	ldr	r3, [r3, #0]
 80266f4:	430a      	orrs	r2, r1
 80266f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80266f8:	687b      	ldr	r3, [r7, #4]
 80266fa:	681b      	ldr	r3, [r3, #0]
 80266fc:	69da      	ldr	r2, [r3, #28]
 80266fe:	687b      	ldr	r3, [r7, #4]
 8026700:	681b      	ldr	r3, [r3, #0]
 8026702:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8026706:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8026708:	687b      	ldr	r3, [r7, #4]
 802670a:	2200      	movs	r2, #0
 802670c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 802670e:	687b      	ldr	r3, [r7, #4]
 8026710:	2201      	movs	r2, #1
 8026712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8026716:	2300      	movs	r3, #0
}
 8026718:	4618      	mov	r0, r3
 802671a:	3708      	adds	r7, #8
 802671c:	46bd      	mov	sp, r7
 802671e:	bd80      	pop	{r7, pc}

08026720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8026720:	b580      	push	{r7, lr}
 8026722:	b082      	sub	sp, #8
 8026724:	af00      	add	r7, sp, #0
 8026726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8026728:	687b      	ldr	r3, [r7, #4]
 802672a:	2b00      	cmp	r3, #0
 802672c:	d101      	bne.n	8026732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 802672e:	2301      	movs	r3, #1
 8026730:	e01d      	b.n	802676e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8026732:	687b      	ldr	r3, [r7, #4]
 8026734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8026738:	b2db      	uxtb	r3, r3
 802673a:	2b00      	cmp	r3, #0
 802673c:	d106      	bne.n	802674c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802673e:	687b      	ldr	r3, [r7, #4]
 8026740:	2200      	movs	r2, #0
 8026742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8026746:	6878      	ldr	r0, [r7, #4]
 8026748:	f7fc fee6 	bl	8023518 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802674c:	687b      	ldr	r3, [r7, #4]
 802674e:	2202      	movs	r2, #2
 8026750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8026754:	687b      	ldr	r3, [r7, #4]
 8026756:	681a      	ldr	r2, [r3, #0]
 8026758:	687b      	ldr	r3, [r7, #4]
 802675a:	3304      	adds	r3, #4
 802675c:	4619      	mov	r1, r3
 802675e:	4610      	mov	r0, r2
 8026760:	f000 fc0e 	bl	8026f80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8026764:	687b      	ldr	r3, [r7, #4]
 8026766:	2201      	movs	r2, #1
 8026768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802676c:	2300      	movs	r3, #0
}
 802676e:	4618      	mov	r0, r3
 8026770:	3708      	adds	r7, #8
 8026772:	46bd      	mov	sp, r7
 8026774:	bd80      	pop	{r7, pc}

08026776 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8026776:	b480      	push	{r7}
 8026778:	b085      	sub	sp, #20
 802677a:	af00      	add	r7, sp, #0
 802677c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 802677e:	687b      	ldr	r3, [r7, #4]
 8026780:	681b      	ldr	r3, [r3, #0]
 8026782:	68da      	ldr	r2, [r3, #12]
 8026784:	687b      	ldr	r3, [r7, #4]
 8026786:	681b      	ldr	r3, [r3, #0]
 8026788:	f042 0201 	orr.w	r2, r2, #1
 802678c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802678e:	687b      	ldr	r3, [r7, #4]
 8026790:	681b      	ldr	r3, [r3, #0]
 8026792:	689b      	ldr	r3, [r3, #8]
 8026794:	f003 0307 	and.w	r3, r3, #7
 8026798:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802679a:	68fb      	ldr	r3, [r7, #12]
 802679c:	2b06      	cmp	r3, #6
 802679e:	d007      	beq.n	80267b0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80267a0:	687b      	ldr	r3, [r7, #4]
 80267a2:	681b      	ldr	r3, [r3, #0]
 80267a4:	681a      	ldr	r2, [r3, #0]
 80267a6:	687b      	ldr	r3, [r7, #4]
 80267a8:	681b      	ldr	r3, [r3, #0]
 80267aa:	f042 0201 	orr.w	r2, r2, #1
 80267ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80267b0:	2300      	movs	r3, #0
}
 80267b2:	4618      	mov	r0, r3
 80267b4:	3714      	adds	r7, #20
 80267b6:	46bd      	mov	sp, r7
 80267b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80267bc:	4770      	bx	lr

080267be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80267be:	b580      	push	{r7, lr}
 80267c0:	b082      	sub	sp, #8
 80267c2:	af00      	add	r7, sp, #0
 80267c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80267c6:	687b      	ldr	r3, [r7, #4]
 80267c8:	2b00      	cmp	r3, #0
 80267ca:	d101      	bne.n	80267d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80267cc:	2301      	movs	r3, #1
 80267ce:	e01d      	b.n	802680c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80267d0:	687b      	ldr	r3, [r7, #4]
 80267d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80267d6:	b2db      	uxtb	r3, r3
 80267d8:	2b00      	cmp	r3, #0
 80267da:	d106      	bne.n	80267ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80267dc:	687b      	ldr	r3, [r7, #4]
 80267de:	2200      	movs	r2, #0
 80267e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80267e4:	6878      	ldr	r0, [r7, #4]
 80267e6:	f7fc fe49 	bl	802347c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80267ea:	687b      	ldr	r3, [r7, #4]
 80267ec:	2202      	movs	r2, #2
 80267ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80267f2:	687b      	ldr	r3, [r7, #4]
 80267f4:	681a      	ldr	r2, [r3, #0]
 80267f6:	687b      	ldr	r3, [r7, #4]
 80267f8:	3304      	adds	r3, #4
 80267fa:	4619      	mov	r1, r3
 80267fc:	4610      	mov	r0, r2
 80267fe:	f000 fbbf 	bl	8026f80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8026802:	687b      	ldr	r3, [r7, #4]
 8026804:	2201      	movs	r2, #1
 8026806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802680a:	2300      	movs	r3, #0
}
 802680c:	4618      	mov	r0, r3
 802680e:	3708      	adds	r7, #8
 8026810:	46bd      	mov	sp, r7
 8026812:	bd80      	pop	{r7, pc}

08026814 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8026814:	b580      	push	{r7, lr}
 8026816:	b084      	sub	sp, #16
 8026818:	af00      	add	r7, sp, #0
 802681a:	6078      	str	r0, [r7, #4]
 802681c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 802681e:	687b      	ldr	r3, [r7, #4]
 8026820:	681b      	ldr	r3, [r3, #0]
 8026822:	2201      	movs	r2, #1
 8026824:	6839      	ldr	r1, [r7, #0]
 8026826:	4618      	mov	r0, r3
 8026828:	f000 fe94 	bl	8027554 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 802682c:	687b      	ldr	r3, [r7, #4]
 802682e:	681b      	ldr	r3, [r3, #0]
 8026830:	4a15      	ldr	r2, [pc, #84]	; (8026888 <HAL_TIM_PWM_Start+0x74>)
 8026832:	4293      	cmp	r3, r2
 8026834:	d004      	beq.n	8026840 <HAL_TIM_PWM_Start+0x2c>
 8026836:	687b      	ldr	r3, [r7, #4]
 8026838:	681b      	ldr	r3, [r3, #0]
 802683a:	4a14      	ldr	r2, [pc, #80]	; (802688c <HAL_TIM_PWM_Start+0x78>)
 802683c:	4293      	cmp	r3, r2
 802683e:	d101      	bne.n	8026844 <HAL_TIM_PWM_Start+0x30>
 8026840:	2301      	movs	r3, #1
 8026842:	e000      	b.n	8026846 <HAL_TIM_PWM_Start+0x32>
 8026844:	2300      	movs	r3, #0
 8026846:	2b00      	cmp	r3, #0
 8026848:	d007      	beq.n	802685a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 802684a:	687b      	ldr	r3, [r7, #4]
 802684c:	681b      	ldr	r3, [r3, #0]
 802684e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8026850:	687b      	ldr	r3, [r7, #4]
 8026852:	681b      	ldr	r3, [r3, #0]
 8026854:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8026858:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802685a:	687b      	ldr	r3, [r7, #4]
 802685c:	681b      	ldr	r3, [r3, #0]
 802685e:	689b      	ldr	r3, [r3, #8]
 8026860:	f003 0307 	and.w	r3, r3, #7
 8026864:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8026866:	68fb      	ldr	r3, [r7, #12]
 8026868:	2b06      	cmp	r3, #6
 802686a:	d007      	beq.n	802687c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 802686c:	687b      	ldr	r3, [r7, #4]
 802686e:	681b      	ldr	r3, [r3, #0]
 8026870:	681a      	ldr	r2, [r3, #0]
 8026872:	687b      	ldr	r3, [r7, #4]
 8026874:	681b      	ldr	r3, [r3, #0]
 8026876:	f042 0201 	orr.w	r2, r2, #1
 802687a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 802687c:	2300      	movs	r3, #0
}
 802687e:	4618      	mov	r0, r3
 8026880:	3710      	adds	r7, #16
 8026882:	46bd      	mov	sp, r7
 8026884:	bd80      	pop	{r7, pc}
 8026886:	bf00      	nop
 8026888:	40010000 	.word	0x40010000
 802688c:	40010400 	.word	0x40010400

08026890 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8026890:	b580      	push	{r7, lr}
 8026892:	b086      	sub	sp, #24
 8026894:	af00      	add	r7, sp, #0
 8026896:	6078      	str	r0, [r7, #4]
 8026898:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 802689a:	687b      	ldr	r3, [r7, #4]
 802689c:	2b00      	cmp	r3, #0
 802689e:	d101      	bne.n	80268a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80268a0:	2301      	movs	r3, #1
 80268a2:	e083      	b.n	80269ac <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80268a4:	687b      	ldr	r3, [r7, #4]
 80268a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80268aa:	b2db      	uxtb	r3, r3
 80268ac:	2b00      	cmp	r3, #0
 80268ae:	d106      	bne.n	80268be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80268b0:	687b      	ldr	r3, [r7, #4]
 80268b2:	2200      	movs	r2, #0
 80268b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80268b8:	6878      	ldr	r0, [r7, #4]
 80268ba:	f7fc fec3 	bl	8023644 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80268be:	687b      	ldr	r3, [r7, #4]
 80268c0:	2202      	movs	r2, #2
 80268c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80268c6:	687b      	ldr	r3, [r7, #4]
 80268c8:	681b      	ldr	r3, [r3, #0]
 80268ca:	689b      	ldr	r3, [r3, #8]
 80268cc:	687a      	ldr	r2, [r7, #4]
 80268ce:	6812      	ldr	r2, [r2, #0]
 80268d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80268d4:	f023 0307 	bic.w	r3, r3, #7
 80268d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80268da:	687b      	ldr	r3, [r7, #4]
 80268dc:	681a      	ldr	r2, [r3, #0]
 80268de:	687b      	ldr	r3, [r7, #4]
 80268e0:	3304      	adds	r3, #4
 80268e2:	4619      	mov	r1, r3
 80268e4:	4610      	mov	r0, r2
 80268e6:	f000 fb4b 	bl	8026f80 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80268ea:	687b      	ldr	r3, [r7, #4]
 80268ec:	681b      	ldr	r3, [r3, #0]
 80268ee:	689b      	ldr	r3, [r3, #8]
 80268f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80268f2:	687b      	ldr	r3, [r7, #4]
 80268f4:	681b      	ldr	r3, [r3, #0]
 80268f6:	699b      	ldr	r3, [r3, #24]
 80268f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80268fa:	687b      	ldr	r3, [r7, #4]
 80268fc:	681b      	ldr	r3, [r3, #0]
 80268fe:	6a1b      	ldr	r3, [r3, #32]
 8026900:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8026902:	683b      	ldr	r3, [r7, #0]
 8026904:	681b      	ldr	r3, [r3, #0]
 8026906:	697a      	ldr	r2, [r7, #20]
 8026908:	4313      	orrs	r3, r2
 802690a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 802690c:	693b      	ldr	r3, [r7, #16]
 802690e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8026912:	f023 0303 	bic.w	r3, r3, #3
 8026916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8026918:	683b      	ldr	r3, [r7, #0]
 802691a:	689a      	ldr	r2, [r3, #8]
 802691c:	683b      	ldr	r3, [r7, #0]
 802691e:	699b      	ldr	r3, [r3, #24]
 8026920:	021b      	lsls	r3, r3, #8
 8026922:	4313      	orrs	r3, r2
 8026924:	693a      	ldr	r2, [r7, #16]
 8026926:	4313      	orrs	r3, r2
 8026928:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 802692a:	693b      	ldr	r3, [r7, #16]
 802692c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8026930:	f023 030c 	bic.w	r3, r3, #12
 8026934:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8026936:	693b      	ldr	r3, [r7, #16]
 8026938:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802693c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8026940:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8026942:	683b      	ldr	r3, [r7, #0]
 8026944:	68da      	ldr	r2, [r3, #12]
 8026946:	683b      	ldr	r3, [r7, #0]
 8026948:	69db      	ldr	r3, [r3, #28]
 802694a:	021b      	lsls	r3, r3, #8
 802694c:	4313      	orrs	r3, r2
 802694e:	693a      	ldr	r2, [r7, #16]
 8026950:	4313      	orrs	r3, r2
 8026952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8026954:	683b      	ldr	r3, [r7, #0]
 8026956:	691b      	ldr	r3, [r3, #16]
 8026958:	011a      	lsls	r2, r3, #4
 802695a:	683b      	ldr	r3, [r7, #0]
 802695c:	6a1b      	ldr	r3, [r3, #32]
 802695e:	031b      	lsls	r3, r3, #12
 8026960:	4313      	orrs	r3, r2
 8026962:	693a      	ldr	r2, [r7, #16]
 8026964:	4313      	orrs	r3, r2
 8026966:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8026968:	68fb      	ldr	r3, [r7, #12]
 802696a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 802696e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8026970:	68fb      	ldr	r3, [r7, #12]
 8026972:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8026976:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8026978:	683b      	ldr	r3, [r7, #0]
 802697a:	685a      	ldr	r2, [r3, #4]
 802697c:	683b      	ldr	r3, [r7, #0]
 802697e:	695b      	ldr	r3, [r3, #20]
 8026980:	011b      	lsls	r3, r3, #4
 8026982:	4313      	orrs	r3, r2
 8026984:	68fa      	ldr	r2, [r7, #12]
 8026986:	4313      	orrs	r3, r2
 8026988:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 802698a:	687b      	ldr	r3, [r7, #4]
 802698c:	681b      	ldr	r3, [r3, #0]
 802698e:	697a      	ldr	r2, [r7, #20]
 8026990:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8026992:	687b      	ldr	r3, [r7, #4]
 8026994:	681b      	ldr	r3, [r3, #0]
 8026996:	693a      	ldr	r2, [r7, #16]
 8026998:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 802699a:	687b      	ldr	r3, [r7, #4]
 802699c:	681b      	ldr	r3, [r3, #0]
 802699e:	68fa      	ldr	r2, [r7, #12]
 80269a0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80269a2:	687b      	ldr	r3, [r7, #4]
 80269a4:	2201      	movs	r2, #1
 80269a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80269aa:	2300      	movs	r3, #0
}
 80269ac:	4618      	mov	r0, r3
 80269ae:	3718      	adds	r7, #24
 80269b0:	46bd      	mov	sp, r7
 80269b2:	bd80      	pop	{r7, pc}

080269b4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80269b4:	b580      	push	{r7, lr}
 80269b6:	b082      	sub	sp, #8
 80269b8:	af00      	add	r7, sp, #0
 80269ba:	6078      	str	r0, [r7, #4]
 80269bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80269be:	683b      	ldr	r3, [r7, #0]
 80269c0:	2b00      	cmp	r3, #0
 80269c2:	d002      	beq.n	80269ca <HAL_TIM_Encoder_Start+0x16>
 80269c4:	2b04      	cmp	r3, #4
 80269c6:	d008      	beq.n	80269da <HAL_TIM_Encoder_Start+0x26>
 80269c8:	e00f      	b.n	80269ea <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80269ca:	687b      	ldr	r3, [r7, #4]
 80269cc:	681b      	ldr	r3, [r3, #0]
 80269ce:	2201      	movs	r2, #1
 80269d0:	2100      	movs	r1, #0
 80269d2:	4618      	mov	r0, r3
 80269d4:	f000 fdbe 	bl	8027554 <TIM_CCxChannelCmd>
      break;
 80269d8:	e016      	b.n	8026a08 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80269da:	687b      	ldr	r3, [r7, #4]
 80269dc:	681b      	ldr	r3, [r3, #0]
 80269de:	2201      	movs	r2, #1
 80269e0:	2104      	movs	r1, #4
 80269e2:	4618      	mov	r0, r3
 80269e4:	f000 fdb6 	bl	8027554 <TIM_CCxChannelCmd>
      break;
 80269e8:	e00e      	b.n	8026a08 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80269ea:	687b      	ldr	r3, [r7, #4]
 80269ec:	681b      	ldr	r3, [r3, #0]
 80269ee:	2201      	movs	r2, #1
 80269f0:	2100      	movs	r1, #0
 80269f2:	4618      	mov	r0, r3
 80269f4:	f000 fdae 	bl	8027554 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80269f8:	687b      	ldr	r3, [r7, #4]
 80269fa:	681b      	ldr	r3, [r3, #0]
 80269fc:	2201      	movs	r2, #1
 80269fe:	2104      	movs	r1, #4
 8026a00:	4618      	mov	r0, r3
 8026a02:	f000 fda7 	bl	8027554 <TIM_CCxChannelCmd>
      break;
 8026a06:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8026a08:	687b      	ldr	r3, [r7, #4]
 8026a0a:	681b      	ldr	r3, [r3, #0]
 8026a0c:	681a      	ldr	r2, [r3, #0]
 8026a0e:	687b      	ldr	r3, [r7, #4]
 8026a10:	681b      	ldr	r3, [r3, #0]
 8026a12:	f042 0201 	orr.w	r2, r2, #1
 8026a16:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8026a18:	2300      	movs	r3, #0
}
 8026a1a:	4618      	mov	r0, r3
 8026a1c:	3708      	adds	r7, #8
 8026a1e:	46bd      	mov	sp, r7
 8026a20:	bd80      	pop	{r7, pc}

08026a22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8026a22:	b580      	push	{r7, lr}
 8026a24:	b082      	sub	sp, #8
 8026a26:	af00      	add	r7, sp, #0
 8026a28:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8026a2a:	687b      	ldr	r3, [r7, #4]
 8026a2c:	681b      	ldr	r3, [r3, #0]
 8026a2e:	691b      	ldr	r3, [r3, #16]
 8026a30:	f003 0302 	and.w	r3, r3, #2
 8026a34:	2b02      	cmp	r3, #2
 8026a36:	d122      	bne.n	8026a7e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8026a38:	687b      	ldr	r3, [r7, #4]
 8026a3a:	681b      	ldr	r3, [r3, #0]
 8026a3c:	68db      	ldr	r3, [r3, #12]
 8026a3e:	f003 0302 	and.w	r3, r3, #2
 8026a42:	2b02      	cmp	r3, #2
 8026a44:	d11b      	bne.n	8026a7e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8026a46:	687b      	ldr	r3, [r7, #4]
 8026a48:	681b      	ldr	r3, [r3, #0]
 8026a4a:	f06f 0202 	mvn.w	r2, #2
 8026a4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8026a50:	687b      	ldr	r3, [r7, #4]
 8026a52:	2201      	movs	r2, #1
 8026a54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8026a56:	687b      	ldr	r3, [r7, #4]
 8026a58:	681b      	ldr	r3, [r3, #0]
 8026a5a:	699b      	ldr	r3, [r3, #24]
 8026a5c:	f003 0303 	and.w	r3, r3, #3
 8026a60:	2b00      	cmp	r3, #0
 8026a62:	d003      	beq.n	8026a6c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8026a64:	6878      	ldr	r0, [r7, #4]
 8026a66:	f000 fa6c 	bl	8026f42 <HAL_TIM_IC_CaptureCallback>
 8026a6a:	e005      	b.n	8026a78 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8026a6c:	6878      	ldr	r0, [r7, #4]
 8026a6e:	f000 fa5e 	bl	8026f2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8026a72:	6878      	ldr	r0, [r7, #4]
 8026a74:	f000 fa6f 	bl	8026f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8026a78:	687b      	ldr	r3, [r7, #4]
 8026a7a:	2200      	movs	r2, #0
 8026a7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8026a7e:	687b      	ldr	r3, [r7, #4]
 8026a80:	681b      	ldr	r3, [r3, #0]
 8026a82:	691b      	ldr	r3, [r3, #16]
 8026a84:	f003 0304 	and.w	r3, r3, #4
 8026a88:	2b04      	cmp	r3, #4
 8026a8a:	d122      	bne.n	8026ad2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8026a8c:	687b      	ldr	r3, [r7, #4]
 8026a8e:	681b      	ldr	r3, [r3, #0]
 8026a90:	68db      	ldr	r3, [r3, #12]
 8026a92:	f003 0304 	and.w	r3, r3, #4
 8026a96:	2b04      	cmp	r3, #4
 8026a98:	d11b      	bne.n	8026ad2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8026a9a:	687b      	ldr	r3, [r7, #4]
 8026a9c:	681b      	ldr	r3, [r3, #0]
 8026a9e:	f06f 0204 	mvn.w	r2, #4
 8026aa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8026aa4:	687b      	ldr	r3, [r7, #4]
 8026aa6:	2202      	movs	r2, #2
 8026aa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8026aaa:	687b      	ldr	r3, [r7, #4]
 8026aac:	681b      	ldr	r3, [r3, #0]
 8026aae:	699b      	ldr	r3, [r3, #24]
 8026ab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8026ab4:	2b00      	cmp	r3, #0
 8026ab6:	d003      	beq.n	8026ac0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8026ab8:	6878      	ldr	r0, [r7, #4]
 8026aba:	f000 fa42 	bl	8026f42 <HAL_TIM_IC_CaptureCallback>
 8026abe:	e005      	b.n	8026acc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8026ac0:	6878      	ldr	r0, [r7, #4]
 8026ac2:	f000 fa34 	bl	8026f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8026ac6:	6878      	ldr	r0, [r7, #4]
 8026ac8:	f000 fa45 	bl	8026f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8026acc:	687b      	ldr	r3, [r7, #4]
 8026ace:	2200      	movs	r2, #0
 8026ad0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8026ad2:	687b      	ldr	r3, [r7, #4]
 8026ad4:	681b      	ldr	r3, [r3, #0]
 8026ad6:	691b      	ldr	r3, [r3, #16]
 8026ad8:	f003 0308 	and.w	r3, r3, #8
 8026adc:	2b08      	cmp	r3, #8
 8026ade:	d122      	bne.n	8026b26 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8026ae0:	687b      	ldr	r3, [r7, #4]
 8026ae2:	681b      	ldr	r3, [r3, #0]
 8026ae4:	68db      	ldr	r3, [r3, #12]
 8026ae6:	f003 0308 	and.w	r3, r3, #8
 8026aea:	2b08      	cmp	r3, #8
 8026aec:	d11b      	bne.n	8026b26 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8026aee:	687b      	ldr	r3, [r7, #4]
 8026af0:	681b      	ldr	r3, [r3, #0]
 8026af2:	f06f 0208 	mvn.w	r2, #8
 8026af6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8026af8:	687b      	ldr	r3, [r7, #4]
 8026afa:	2204      	movs	r2, #4
 8026afc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8026afe:	687b      	ldr	r3, [r7, #4]
 8026b00:	681b      	ldr	r3, [r3, #0]
 8026b02:	69db      	ldr	r3, [r3, #28]
 8026b04:	f003 0303 	and.w	r3, r3, #3
 8026b08:	2b00      	cmp	r3, #0
 8026b0a:	d003      	beq.n	8026b14 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8026b0c:	6878      	ldr	r0, [r7, #4]
 8026b0e:	f000 fa18 	bl	8026f42 <HAL_TIM_IC_CaptureCallback>
 8026b12:	e005      	b.n	8026b20 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8026b14:	6878      	ldr	r0, [r7, #4]
 8026b16:	f000 fa0a 	bl	8026f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8026b1a:	6878      	ldr	r0, [r7, #4]
 8026b1c:	f000 fa1b 	bl	8026f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8026b20:	687b      	ldr	r3, [r7, #4]
 8026b22:	2200      	movs	r2, #0
 8026b24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8026b26:	687b      	ldr	r3, [r7, #4]
 8026b28:	681b      	ldr	r3, [r3, #0]
 8026b2a:	691b      	ldr	r3, [r3, #16]
 8026b2c:	f003 0310 	and.w	r3, r3, #16
 8026b30:	2b10      	cmp	r3, #16
 8026b32:	d122      	bne.n	8026b7a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8026b34:	687b      	ldr	r3, [r7, #4]
 8026b36:	681b      	ldr	r3, [r3, #0]
 8026b38:	68db      	ldr	r3, [r3, #12]
 8026b3a:	f003 0310 	and.w	r3, r3, #16
 8026b3e:	2b10      	cmp	r3, #16
 8026b40:	d11b      	bne.n	8026b7a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8026b42:	687b      	ldr	r3, [r7, #4]
 8026b44:	681b      	ldr	r3, [r3, #0]
 8026b46:	f06f 0210 	mvn.w	r2, #16
 8026b4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8026b4c:	687b      	ldr	r3, [r7, #4]
 8026b4e:	2208      	movs	r2, #8
 8026b50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8026b52:	687b      	ldr	r3, [r7, #4]
 8026b54:	681b      	ldr	r3, [r3, #0]
 8026b56:	69db      	ldr	r3, [r3, #28]
 8026b58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8026b5c:	2b00      	cmp	r3, #0
 8026b5e:	d003      	beq.n	8026b68 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8026b60:	6878      	ldr	r0, [r7, #4]
 8026b62:	f000 f9ee 	bl	8026f42 <HAL_TIM_IC_CaptureCallback>
 8026b66:	e005      	b.n	8026b74 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8026b68:	6878      	ldr	r0, [r7, #4]
 8026b6a:	f000 f9e0 	bl	8026f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8026b6e:	6878      	ldr	r0, [r7, #4]
 8026b70:	f000 f9f1 	bl	8026f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8026b74:	687b      	ldr	r3, [r7, #4]
 8026b76:	2200      	movs	r2, #0
 8026b78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8026b7a:	687b      	ldr	r3, [r7, #4]
 8026b7c:	681b      	ldr	r3, [r3, #0]
 8026b7e:	691b      	ldr	r3, [r3, #16]
 8026b80:	f003 0301 	and.w	r3, r3, #1
 8026b84:	2b01      	cmp	r3, #1
 8026b86:	d10e      	bne.n	8026ba6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8026b88:	687b      	ldr	r3, [r7, #4]
 8026b8a:	681b      	ldr	r3, [r3, #0]
 8026b8c:	68db      	ldr	r3, [r3, #12]
 8026b8e:	f003 0301 	and.w	r3, r3, #1
 8026b92:	2b01      	cmp	r3, #1
 8026b94:	d107      	bne.n	8026ba6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8026b96:	687b      	ldr	r3, [r7, #4]
 8026b98:	681b      	ldr	r3, [r3, #0]
 8026b9a:	f06f 0201 	mvn.w	r2, #1
 8026b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8026ba0:	6878      	ldr	r0, [r7, #4]
 8026ba2:	f7fa ffbb 	bl	8021b1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8026ba6:	687b      	ldr	r3, [r7, #4]
 8026ba8:	681b      	ldr	r3, [r3, #0]
 8026baa:	691b      	ldr	r3, [r3, #16]
 8026bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8026bb0:	2b80      	cmp	r3, #128	; 0x80
 8026bb2:	d10e      	bne.n	8026bd2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8026bb4:	687b      	ldr	r3, [r7, #4]
 8026bb6:	681b      	ldr	r3, [r3, #0]
 8026bb8:	68db      	ldr	r3, [r3, #12]
 8026bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8026bbe:	2b80      	cmp	r3, #128	; 0x80
 8026bc0:	d107      	bne.n	8026bd2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8026bc2:	687b      	ldr	r3, [r7, #4]
 8026bc4:	681b      	ldr	r3, [r3, #0]
 8026bc6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8026bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8026bcc:	6878      	ldr	r0, [r7, #4]
 8026bce:	f000 fdbf 	bl	8027750 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8026bd2:	687b      	ldr	r3, [r7, #4]
 8026bd4:	681b      	ldr	r3, [r3, #0]
 8026bd6:	691b      	ldr	r3, [r3, #16]
 8026bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026bdc:	2b40      	cmp	r3, #64	; 0x40
 8026bde:	d10e      	bne.n	8026bfe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8026be0:	687b      	ldr	r3, [r7, #4]
 8026be2:	681b      	ldr	r3, [r3, #0]
 8026be4:	68db      	ldr	r3, [r3, #12]
 8026be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026bea:	2b40      	cmp	r3, #64	; 0x40
 8026bec:	d107      	bne.n	8026bfe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8026bee:	687b      	ldr	r3, [r7, #4]
 8026bf0:	681b      	ldr	r3, [r3, #0]
 8026bf2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8026bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8026bf8:	6878      	ldr	r0, [r7, #4]
 8026bfa:	f000 f9b6 	bl	8026f6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8026bfe:	687b      	ldr	r3, [r7, #4]
 8026c00:	681b      	ldr	r3, [r3, #0]
 8026c02:	691b      	ldr	r3, [r3, #16]
 8026c04:	f003 0320 	and.w	r3, r3, #32
 8026c08:	2b20      	cmp	r3, #32
 8026c0a:	d10e      	bne.n	8026c2a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8026c0c:	687b      	ldr	r3, [r7, #4]
 8026c0e:	681b      	ldr	r3, [r3, #0]
 8026c10:	68db      	ldr	r3, [r3, #12]
 8026c12:	f003 0320 	and.w	r3, r3, #32
 8026c16:	2b20      	cmp	r3, #32
 8026c18:	d107      	bne.n	8026c2a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8026c1a:	687b      	ldr	r3, [r7, #4]
 8026c1c:	681b      	ldr	r3, [r3, #0]
 8026c1e:	f06f 0220 	mvn.w	r2, #32
 8026c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8026c24:	6878      	ldr	r0, [r7, #4]
 8026c26:	f000 fd89 	bl	802773c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8026c2a:	bf00      	nop
 8026c2c:	3708      	adds	r7, #8
 8026c2e:	46bd      	mov	sp, r7
 8026c30:	bd80      	pop	{r7, pc}
	...

08026c34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8026c34:	b580      	push	{r7, lr}
 8026c36:	b084      	sub	sp, #16
 8026c38:	af00      	add	r7, sp, #0
 8026c3a:	60f8      	str	r0, [r7, #12]
 8026c3c:	60b9      	str	r1, [r7, #8]
 8026c3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8026c40:	68fb      	ldr	r3, [r7, #12]
 8026c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8026c46:	2b01      	cmp	r3, #1
 8026c48:	d101      	bne.n	8026c4e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8026c4a:	2302      	movs	r3, #2
 8026c4c:	e0b4      	b.n	8026db8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8026c4e:	68fb      	ldr	r3, [r7, #12]
 8026c50:	2201      	movs	r2, #1
 8026c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8026c56:	68fb      	ldr	r3, [r7, #12]
 8026c58:	2202      	movs	r2, #2
 8026c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8026c5e:	687b      	ldr	r3, [r7, #4]
 8026c60:	2b0c      	cmp	r3, #12
 8026c62:	f200 809f 	bhi.w	8026da4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8026c66:	a201      	add	r2, pc, #4	; (adr r2, 8026c6c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8026c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8026c6c:	08026ca1 	.word	0x08026ca1
 8026c70:	08026da5 	.word	0x08026da5
 8026c74:	08026da5 	.word	0x08026da5
 8026c78:	08026da5 	.word	0x08026da5
 8026c7c:	08026ce1 	.word	0x08026ce1
 8026c80:	08026da5 	.word	0x08026da5
 8026c84:	08026da5 	.word	0x08026da5
 8026c88:	08026da5 	.word	0x08026da5
 8026c8c:	08026d23 	.word	0x08026d23
 8026c90:	08026da5 	.word	0x08026da5
 8026c94:	08026da5 	.word	0x08026da5
 8026c98:	08026da5 	.word	0x08026da5
 8026c9c:	08026d63 	.word	0x08026d63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8026ca0:	68fb      	ldr	r3, [r7, #12]
 8026ca2:	681b      	ldr	r3, [r3, #0]
 8026ca4:	68b9      	ldr	r1, [r7, #8]
 8026ca6:	4618      	mov	r0, r3
 8026ca8:	f000 fa0a 	bl	80270c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8026cac:	68fb      	ldr	r3, [r7, #12]
 8026cae:	681b      	ldr	r3, [r3, #0]
 8026cb0:	699a      	ldr	r2, [r3, #24]
 8026cb2:	68fb      	ldr	r3, [r7, #12]
 8026cb4:	681b      	ldr	r3, [r3, #0]
 8026cb6:	f042 0208 	orr.w	r2, r2, #8
 8026cba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8026cbc:	68fb      	ldr	r3, [r7, #12]
 8026cbe:	681b      	ldr	r3, [r3, #0]
 8026cc0:	699a      	ldr	r2, [r3, #24]
 8026cc2:	68fb      	ldr	r3, [r7, #12]
 8026cc4:	681b      	ldr	r3, [r3, #0]
 8026cc6:	f022 0204 	bic.w	r2, r2, #4
 8026cca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8026ccc:	68fb      	ldr	r3, [r7, #12]
 8026cce:	681b      	ldr	r3, [r3, #0]
 8026cd0:	6999      	ldr	r1, [r3, #24]
 8026cd2:	68bb      	ldr	r3, [r7, #8]
 8026cd4:	691a      	ldr	r2, [r3, #16]
 8026cd6:	68fb      	ldr	r3, [r7, #12]
 8026cd8:	681b      	ldr	r3, [r3, #0]
 8026cda:	430a      	orrs	r2, r1
 8026cdc:	619a      	str	r2, [r3, #24]
      break;
 8026cde:	e062      	b.n	8026da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8026ce0:	68fb      	ldr	r3, [r7, #12]
 8026ce2:	681b      	ldr	r3, [r3, #0]
 8026ce4:	68b9      	ldr	r1, [r7, #8]
 8026ce6:	4618      	mov	r0, r3
 8026ce8:	f000 fa5a 	bl	80271a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8026cec:	68fb      	ldr	r3, [r7, #12]
 8026cee:	681b      	ldr	r3, [r3, #0]
 8026cf0:	699a      	ldr	r2, [r3, #24]
 8026cf2:	68fb      	ldr	r3, [r7, #12]
 8026cf4:	681b      	ldr	r3, [r3, #0]
 8026cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8026cfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8026cfc:	68fb      	ldr	r3, [r7, #12]
 8026cfe:	681b      	ldr	r3, [r3, #0]
 8026d00:	699a      	ldr	r2, [r3, #24]
 8026d02:	68fb      	ldr	r3, [r7, #12]
 8026d04:	681b      	ldr	r3, [r3, #0]
 8026d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8026d0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8026d0c:	68fb      	ldr	r3, [r7, #12]
 8026d0e:	681b      	ldr	r3, [r3, #0]
 8026d10:	6999      	ldr	r1, [r3, #24]
 8026d12:	68bb      	ldr	r3, [r7, #8]
 8026d14:	691b      	ldr	r3, [r3, #16]
 8026d16:	021a      	lsls	r2, r3, #8
 8026d18:	68fb      	ldr	r3, [r7, #12]
 8026d1a:	681b      	ldr	r3, [r3, #0]
 8026d1c:	430a      	orrs	r2, r1
 8026d1e:	619a      	str	r2, [r3, #24]
      break;
 8026d20:	e041      	b.n	8026da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8026d22:	68fb      	ldr	r3, [r7, #12]
 8026d24:	681b      	ldr	r3, [r3, #0]
 8026d26:	68b9      	ldr	r1, [r7, #8]
 8026d28:	4618      	mov	r0, r3
 8026d2a:	f000 faaf 	bl	802728c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8026d2e:	68fb      	ldr	r3, [r7, #12]
 8026d30:	681b      	ldr	r3, [r3, #0]
 8026d32:	69da      	ldr	r2, [r3, #28]
 8026d34:	68fb      	ldr	r3, [r7, #12]
 8026d36:	681b      	ldr	r3, [r3, #0]
 8026d38:	f042 0208 	orr.w	r2, r2, #8
 8026d3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8026d3e:	68fb      	ldr	r3, [r7, #12]
 8026d40:	681b      	ldr	r3, [r3, #0]
 8026d42:	69da      	ldr	r2, [r3, #28]
 8026d44:	68fb      	ldr	r3, [r7, #12]
 8026d46:	681b      	ldr	r3, [r3, #0]
 8026d48:	f022 0204 	bic.w	r2, r2, #4
 8026d4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8026d4e:	68fb      	ldr	r3, [r7, #12]
 8026d50:	681b      	ldr	r3, [r3, #0]
 8026d52:	69d9      	ldr	r1, [r3, #28]
 8026d54:	68bb      	ldr	r3, [r7, #8]
 8026d56:	691a      	ldr	r2, [r3, #16]
 8026d58:	68fb      	ldr	r3, [r7, #12]
 8026d5a:	681b      	ldr	r3, [r3, #0]
 8026d5c:	430a      	orrs	r2, r1
 8026d5e:	61da      	str	r2, [r3, #28]
      break;
 8026d60:	e021      	b.n	8026da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8026d62:	68fb      	ldr	r3, [r7, #12]
 8026d64:	681b      	ldr	r3, [r3, #0]
 8026d66:	68b9      	ldr	r1, [r7, #8]
 8026d68:	4618      	mov	r0, r3
 8026d6a:	f000 fb03 	bl	8027374 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8026d6e:	68fb      	ldr	r3, [r7, #12]
 8026d70:	681b      	ldr	r3, [r3, #0]
 8026d72:	69da      	ldr	r2, [r3, #28]
 8026d74:	68fb      	ldr	r3, [r7, #12]
 8026d76:	681b      	ldr	r3, [r3, #0]
 8026d78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8026d7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8026d7e:	68fb      	ldr	r3, [r7, #12]
 8026d80:	681b      	ldr	r3, [r3, #0]
 8026d82:	69da      	ldr	r2, [r3, #28]
 8026d84:	68fb      	ldr	r3, [r7, #12]
 8026d86:	681b      	ldr	r3, [r3, #0]
 8026d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8026d8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8026d8e:	68fb      	ldr	r3, [r7, #12]
 8026d90:	681b      	ldr	r3, [r3, #0]
 8026d92:	69d9      	ldr	r1, [r3, #28]
 8026d94:	68bb      	ldr	r3, [r7, #8]
 8026d96:	691b      	ldr	r3, [r3, #16]
 8026d98:	021a      	lsls	r2, r3, #8
 8026d9a:	68fb      	ldr	r3, [r7, #12]
 8026d9c:	681b      	ldr	r3, [r3, #0]
 8026d9e:	430a      	orrs	r2, r1
 8026da0:	61da      	str	r2, [r3, #28]
      break;
 8026da2:	e000      	b.n	8026da6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8026da4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8026da6:	68fb      	ldr	r3, [r7, #12]
 8026da8:	2201      	movs	r2, #1
 8026daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8026dae:	68fb      	ldr	r3, [r7, #12]
 8026db0:	2200      	movs	r2, #0
 8026db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8026db6:	2300      	movs	r3, #0
}
 8026db8:	4618      	mov	r0, r3
 8026dba:	3710      	adds	r7, #16
 8026dbc:	46bd      	mov	sp, r7
 8026dbe:	bd80      	pop	{r7, pc}

08026dc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8026dc0:	b580      	push	{r7, lr}
 8026dc2:	b084      	sub	sp, #16
 8026dc4:	af00      	add	r7, sp, #0
 8026dc6:	6078      	str	r0, [r7, #4]
 8026dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8026dca:	687b      	ldr	r3, [r7, #4]
 8026dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8026dd0:	2b01      	cmp	r3, #1
 8026dd2:	d101      	bne.n	8026dd8 <HAL_TIM_ConfigClockSource+0x18>
 8026dd4:	2302      	movs	r3, #2
 8026dd6:	e0a6      	b.n	8026f26 <HAL_TIM_ConfigClockSource+0x166>
 8026dd8:	687b      	ldr	r3, [r7, #4]
 8026dda:	2201      	movs	r2, #1
 8026ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8026de0:	687b      	ldr	r3, [r7, #4]
 8026de2:	2202      	movs	r2, #2
 8026de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8026de8:	687b      	ldr	r3, [r7, #4]
 8026dea:	681b      	ldr	r3, [r3, #0]
 8026dec:	689b      	ldr	r3, [r3, #8]
 8026dee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8026df0:	68fb      	ldr	r3, [r7, #12]
 8026df2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8026df6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8026df8:	68fb      	ldr	r3, [r7, #12]
 8026dfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8026dfe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8026e00:	687b      	ldr	r3, [r7, #4]
 8026e02:	681b      	ldr	r3, [r3, #0]
 8026e04:	68fa      	ldr	r2, [r7, #12]
 8026e06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8026e08:	683b      	ldr	r3, [r7, #0]
 8026e0a:	681b      	ldr	r3, [r3, #0]
 8026e0c:	2b40      	cmp	r3, #64	; 0x40
 8026e0e:	d067      	beq.n	8026ee0 <HAL_TIM_ConfigClockSource+0x120>
 8026e10:	2b40      	cmp	r3, #64	; 0x40
 8026e12:	d80b      	bhi.n	8026e2c <HAL_TIM_ConfigClockSource+0x6c>
 8026e14:	2b10      	cmp	r3, #16
 8026e16:	d073      	beq.n	8026f00 <HAL_TIM_ConfigClockSource+0x140>
 8026e18:	2b10      	cmp	r3, #16
 8026e1a:	d802      	bhi.n	8026e22 <HAL_TIM_ConfigClockSource+0x62>
 8026e1c:	2b00      	cmp	r3, #0
 8026e1e:	d06f      	beq.n	8026f00 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8026e20:	e078      	b.n	8026f14 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8026e22:	2b20      	cmp	r3, #32
 8026e24:	d06c      	beq.n	8026f00 <HAL_TIM_ConfigClockSource+0x140>
 8026e26:	2b30      	cmp	r3, #48	; 0x30
 8026e28:	d06a      	beq.n	8026f00 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8026e2a:	e073      	b.n	8026f14 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8026e2c:	2b70      	cmp	r3, #112	; 0x70
 8026e2e:	d00d      	beq.n	8026e4c <HAL_TIM_ConfigClockSource+0x8c>
 8026e30:	2b70      	cmp	r3, #112	; 0x70
 8026e32:	d804      	bhi.n	8026e3e <HAL_TIM_ConfigClockSource+0x7e>
 8026e34:	2b50      	cmp	r3, #80	; 0x50
 8026e36:	d033      	beq.n	8026ea0 <HAL_TIM_ConfigClockSource+0xe0>
 8026e38:	2b60      	cmp	r3, #96	; 0x60
 8026e3a:	d041      	beq.n	8026ec0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8026e3c:	e06a      	b.n	8026f14 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8026e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8026e42:	d066      	beq.n	8026f12 <HAL_TIM_ConfigClockSource+0x152>
 8026e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8026e48:	d017      	beq.n	8026e7a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8026e4a:	e063      	b.n	8026f14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8026e4c:	687b      	ldr	r3, [r7, #4]
 8026e4e:	6818      	ldr	r0, [r3, #0]
 8026e50:	683b      	ldr	r3, [r7, #0]
 8026e52:	6899      	ldr	r1, [r3, #8]
 8026e54:	683b      	ldr	r3, [r7, #0]
 8026e56:	685a      	ldr	r2, [r3, #4]
 8026e58:	683b      	ldr	r3, [r7, #0]
 8026e5a:	68db      	ldr	r3, [r3, #12]
 8026e5c:	f000 fb5a 	bl	8027514 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8026e60:	687b      	ldr	r3, [r7, #4]
 8026e62:	681b      	ldr	r3, [r3, #0]
 8026e64:	689b      	ldr	r3, [r3, #8]
 8026e66:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8026e68:	68fb      	ldr	r3, [r7, #12]
 8026e6a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8026e6e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8026e70:	687b      	ldr	r3, [r7, #4]
 8026e72:	681b      	ldr	r3, [r3, #0]
 8026e74:	68fa      	ldr	r2, [r7, #12]
 8026e76:	609a      	str	r2, [r3, #8]
      break;
 8026e78:	e04c      	b.n	8026f14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8026e7a:	687b      	ldr	r3, [r7, #4]
 8026e7c:	6818      	ldr	r0, [r3, #0]
 8026e7e:	683b      	ldr	r3, [r7, #0]
 8026e80:	6899      	ldr	r1, [r3, #8]
 8026e82:	683b      	ldr	r3, [r7, #0]
 8026e84:	685a      	ldr	r2, [r3, #4]
 8026e86:	683b      	ldr	r3, [r7, #0]
 8026e88:	68db      	ldr	r3, [r3, #12]
 8026e8a:	f000 fb43 	bl	8027514 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8026e8e:	687b      	ldr	r3, [r7, #4]
 8026e90:	681b      	ldr	r3, [r3, #0]
 8026e92:	689a      	ldr	r2, [r3, #8]
 8026e94:	687b      	ldr	r3, [r7, #4]
 8026e96:	681b      	ldr	r3, [r3, #0]
 8026e98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8026e9c:	609a      	str	r2, [r3, #8]
      break;
 8026e9e:	e039      	b.n	8026f14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8026ea0:	687b      	ldr	r3, [r7, #4]
 8026ea2:	6818      	ldr	r0, [r3, #0]
 8026ea4:	683b      	ldr	r3, [r7, #0]
 8026ea6:	6859      	ldr	r1, [r3, #4]
 8026ea8:	683b      	ldr	r3, [r7, #0]
 8026eaa:	68db      	ldr	r3, [r3, #12]
 8026eac:	461a      	mov	r2, r3
 8026eae:	f000 fab7 	bl	8027420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8026eb2:	687b      	ldr	r3, [r7, #4]
 8026eb4:	681b      	ldr	r3, [r3, #0]
 8026eb6:	2150      	movs	r1, #80	; 0x50
 8026eb8:	4618      	mov	r0, r3
 8026eba:	f000 fb10 	bl	80274de <TIM_ITRx_SetConfig>
      break;
 8026ebe:	e029      	b.n	8026f14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8026ec0:	687b      	ldr	r3, [r7, #4]
 8026ec2:	6818      	ldr	r0, [r3, #0]
 8026ec4:	683b      	ldr	r3, [r7, #0]
 8026ec6:	6859      	ldr	r1, [r3, #4]
 8026ec8:	683b      	ldr	r3, [r7, #0]
 8026eca:	68db      	ldr	r3, [r3, #12]
 8026ecc:	461a      	mov	r2, r3
 8026ece:	f000 fad6 	bl	802747e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8026ed2:	687b      	ldr	r3, [r7, #4]
 8026ed4:	681b      	ldr	r3, [r3, #0]
 8026ed6:	2160      	movs	r1, #96	; 0x60
 8026ed8:	4618      	mov	r0, r3
 8026eda:	f000 fb00 	bl	80274de <TIM_ITRx_SetConfig>
      break;
 8026ede:	e019      	b.n	8026f14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8026ee0:	687b      	ldr	r3, [r7, #4]
 8026ee2:	6818      	ldr	r0, [r3, #0]
 8026ee4:	683b      	ldr	r3, [r7, #0]
 8026ee6:	6859      	ldr	r1, [r3, #4]
 8026ee8:	683b      	ldr	r3, [r7, #0]
 8026eea:	68db      	ldr	r3, [r3, #12]
 8026eec:	461a      	mov	r2, r3
 8026eee:	f000 fa97 	bl	8027420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8026ef2:	687b      	ldr	r3, [r7, #4]
 8026ef4:	681b      	ldr	r3, [r3, #0]
 8026ef6:	2140      	movs	r1, #64	; 0x40
 8026ef8:	4618      	mov	r0, r3
 8026efa:	f000 faf0 	bl	80274de <TIM_ITRx_SetConfig>
      break;
 8026efe:	e009      	b.n	8026f14 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8026f00:	687b      	ldr	r3, [r7, #4]
 8026f02:	681a      	ldr	r2, [r3, #0]
 8026f04:	683b      	ldr	r3, [r7, #0]
 8026f06:	681b      	ldr	r3, [r3, #0]
 8026f08:	4619      	mov	r1, r3
 8026f0a:	4610      	mov	r0, r2
 8026f0c:	f000 fae7 	bl	80274de <TIM_ITRx_SetConfig>
      break;
 8026f10:	e000      	b.n	8026f14 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8026f12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8026f14:	687b      	ldr	r3, [r7, #4]
 8026f16:	2201      	movs	r2, #1
 8026f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8026f1c:	687b      	ldr	r3, [r7, #4]
 8026f1e:	2200      	movs	r2, #0
 8026f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8026f24:	2300      	movs	r3, #0
}
 8026f26:	4618      	mov	r0, r3
 8026f28:	3710      	adds	r7, #16
 8026f2a:	46bd      	mov	sp, r7
 8026f2c:	bd80      	pop	{r7, pc}

08026f2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8026f2e:	b480      	push	{r7}
 8026f30:	b083      	sub	sp, #12
 8026f32:	af00      	add	r7, sp, #0
 8026f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8026f36:	bf00      	nop
 8026f38:	370c      	adds	r7, #12
 8026f3a:	46bd      	mov	sp, r7
 8026f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f40:	4770      	bx	lr

08026f42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8026f42:	b480      	push	{r7}
 8026f44:	b083      	sub	sp, #12
 8026f46:	af00      	add	r7, sp, #0
 8026f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8026f4a:	bf00      	nop
 8026f4c:	370c      	adds	r7, #12
 8026f4e:	46bd      	mov	sp, r7
 8026f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f54:	4770      	bx	lr

08026f56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8026f56:	b480      	push	{r7}
 8026f58:	b083      	sub	sp, #12
 8026f5a:	af00      	add	r7, sp, #0
 8026f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8026f5e:	bf00      	nop
 8026f60:	370c      	adds	r7, #12
 8026f62:	46bd      	mov	sp, r7
 8026f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f68:	4770      	bx	lr

08026f6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8026f6a:	b480      	push	{r7}
 8026f6c:	b083      	sub	sp, #12
 8026f6e:	af00      	add	r7, sp, #0
 8026f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8026f72:	bf00      	nop
 8026f74:	370c      	adds	r7, #12
 8026f76:	46bd      	mov	sp, r7
 8026f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f7c:	4770      	bx	lr
	...

08026f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8026f80:	b480      	push	{r7}
 8026f82:	b085      	sub	sp, #20
 8026f84:	af00      	add	r7, sp, #0
 8026f86:	6078      	str	r0, [r7, #4]
 8026f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8026f8a:	687b      	ldr	r3, [r7, #4]
 8026f8c:	681b      	ldr	r3, [r3, #0]
 8026f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8026f90:	687b      	ldr	r3, [r7, #4]
 8026f92:	4a40      	ldr	r2, [pc, #256]	; (8027094 <TIM_Base_SetConfig+0x114>)
 8026f94:	4293      	cmp	r3, r2
 8026f96:	d013      	beq.n	8026fc0 <TIM_Base_SetConfig+0x40>
 8026f98:	687b      	ldr	r3, [r7, #4]
 8026f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8026f9e:	d00f      	beq.n	8026fc0 <TIM_Base_SetConfig+0x40>
 8026fa0:	687b      	ldr	r3, [r7, #4]
 8026fa2:	4a3d      	ldr	r2, [pc, #244]	; (8027098 <TIM_Base_SetConfig+0x118>)
 8026fa4:	4293      	cmp	r3, r2
 8026fa6:	d00b      	beq.n	8026fc0 <TIM_Base_SetConfig+0x40>
 8026fa8:	687b      	ldr	r3, [r7, #4]
 8026faa:	4a3c      	ldr	r2, [pc, #240]	; (802709c <TIM_Base_SetConfig+0x11c>)
 8026fac:	4293      	cmp	r3, r2
 8026fae:	d007      	beq.n	8026fc0 <TIM_Base_SetConfig+0x40>
 8026fb0:	687b      	ldr	r3, [r7, #4]
 8026fb2:	4a3b      	ldr	r2, [pc, #236]	; (80270a0 <TIM_Base_SetConfig+0x120>)
 8026fb4:	4293      	cmp	r3, r2
 8026fb6:	d003      	beq.n	8026fc0 <TIM_Base_SetConfig+0x40>
 8026fb8:	687b      	ldr	r3, [r7, #4]
 8026fba:	4a3a      	ldr	r2, [pc, #232]	; (80270a4 <TIM_Base_SetConfig+0x124>)
 8026fbc:	4293      	cmp	r3, r2
 8026fbe:	d108      	bne.n	8026fd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8026fc0:	68fb      	ldr	r3, [r7, #12]
 8026fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8026fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8026fc8:	683b      	ldr	r3, [r7, #0]
 8026fca:	685b      	ldr	r3, [r3, #4]
 8026fcc:	68fa      	ldr	r2, [r7, #12]
 8026fce:	4313      	orrs	r3, r2
 8026fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8026fd2:	687b      	ldr	r3, [r7, #4]
 8026fd4:	4a2f      	ldr	r2, [pc, #188]	; (8027094 <TIM_Base_SetConfig+0x114>)
 8026fd6:	4293      	cmp	r3, r2
 8026fd8:	d02b      	beq.n	8027032 <TIM_Base_SetConfig+0xb2>
 8026fda:	687b      	ldr	r3, [r7, #4]
 8026fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8026fe0:	d027      	beq.n	8027032 <TIM_Base_SetConfig+0xb2>
 8026fe2:	687b      	ldr	r3, [r7, #4]
 8026fe4:	4a2c      	ldr	r2, [pc, #176]	; (8027098 <TIM_Base_SetConfig+0x118>)
 8026fe6:	4293      	cmp	r3, r2
 8026fe8:	d023      	beq.n	8027032 <TIM_Base_SetConfig+0xb2>
 8026fea:	687b      	ldr	r3, [r7, #4]
 8026fec:	4a2b      	ldr	r2, [pc, #172]	; (802709c <TIM_Base_SetConfig+0x11c>)
 8026fee:	4293      	cmp	r3, r2
 8026ff0:	d01f      	beq.n	8027032 <TIM_Base_SetConfig+0xb2>
 8026ff2:	687b      	ldr	r3, [r7, #4]
 8026ff4:	4a2a      	ldr	r2, [pc, #168]	; (80270a0 <TIM_Base_SetConfig+0x120>)
 8026ff6:	4293      	cmp	r3, r2
 8026ff8:	d01b      	beq.n	8027032 <TIM_Base_SetConfig+0xb2>
 8026ffa:	687b      	ldr	r3, [r7, #4]
 8026ffc:	4a29      	ldr	r2, [pc, #164]	; (80270a4 <TIM_Base_SetConfig+0x124>)
 8026ffe:	4293      	cmp	r3, r2
 8027000:	d017      	beq.n	8027032 <TIM_Base_SetConfig+0xb2>
 8027002:	687b      	ldr	r3, [r7, #4]
 8027004:	4a28      	ldr	r2, [pc, #160]	; (80270a8 <TIM_Base_SetConfig+0x128>)
 8027006:	4293      	cmp	r3, r2
 8027008:	d013      	beq.n	8027032 <TIM_Base_SetConfig+0xb2>
 802700a:	687b      	ldr	r3, [r7, #4]
 802700c:	4a27      	ldr	r2, [pc, #156]	; (80270ac <TIM_Base_SetConfig+0x12c>)
 802700e:	4293      	cmp	r3, r2
 8027010:	d00f      	beq.n	8027032 <TIM_Base_SetConfig+0xb2>
 8027012:	687b      	ldr	r3, [r7, #4]
 8027014:	4a26      	ldr	r2, [pc, #152]	; (80270b0 <TIM_Base_SetConfig+0x130>)
 8027016:	4293      	cmp	r3, r2
 8027018:	d00b      	beq.n	8027032 <TIM_Base_SetConfig+0xb2>
 802701a:	687b      	ldr	r3, [r7, #4]
 802701c:	4a25      	ldr	r2, [pc, #148]	; (80270b4 <TIM_Base_SetConfig+0x134>)
 802701e:	4293      	cmp	r3, r2
 8027020:	d007      	beq.n	8027032 <TIM_Base_SetConfig+0xb2>
 8027022:	687b      	ldr	r3, [r7, #4]
 8027024:	4a24      	ldr	r2, [pc, #144]	; (80270b8 <TIM_Base_SetConfig+0x138>)
 8027026:	4293      	cmp	r3, r2
 8027028:	d003      	beq.n	8027032 <TIM_Base_SetConfig+0xb2>
 802702a:	687b      	ldr	r3, [r7, #4]
 802702c:	4a23      	ldr	r2, [pc, #140]	; (80270bc <TIM_Base_SetConfig+0x13c>)
 802702e:	4293      	cmp	r3, r2
 8027030:	d108      	bne.n	8027044 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8027032:	68fb      	ldr	r3, [r7, #12]
 8027034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802703a:	683b      	ldr	r3, [r7, #0]
 802703c:	68db      	ldr	r3, [r3, #12]
 802703e:	68fa      	ldr	r2, [r7, #12]
 8027040:	4313      	orrs	r3, r2
 8027042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8027044:	68fb      	ldr	r3, [r7, #12]
 8027046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802704a:	683b      	ldr	r3, [r7, #0]
 802704c:	695b      	ldr	r3, [r3, #20]
 802704e:	4313      	orrs	r3, r2
 8027050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8027052:	687b      	ldr	r3, [r7, #4]
 8027054:	68fa      	ldr	r2, [r7, #12]
 8027056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8027058:	683b      	ldr	r3, [r7, #0]
 802705a:	689a      	ldr	r2, [r3, #8]
 802705c:	687b      	ldr	r3, [r7, #4]
 802705e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8027060:	683b      	ldr	r3, [r7, #0]
 8027062:	681a      	ldr	r2, [r3, #0]
 8027064:	687b      	ldr	r3, [r7, #4]
 8027066:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8027068:	687b      	ldr	r3, [r7, #4]
 802706a:	4a0a      	ldr	r2, [pc, #40]	; (8027094 <TIM_Base_SetConfig+0x114>)
 802706c:	4293      	cmp	r3, r2
 802706e:	d003      	beq.n	8027078 <TIM_Base_SetConfig+0xf8>
 8027070:	687b      	ldr	r3, [r7, #4]
 8027072:	4a0c      	ldr	r2, [pc, #48]	; (80270a4 <TIM_Base_SetConfig+0x124>)
 8027074:	4293      	cmp	r3, r2
 8027076:	d103      	bne.n	8027080 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8027078:	683b      	ldr	r3, [r7, #0]
 802707a:	691a      	ldr	r2, [r3, #16]
 802707c:	687b      	ldr	r3, [r7, #4]
 802707e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8027080:	687b      	ldr	r3, [r7, #4]
 8027082:	2201      	movs	r2, #1
 8027084:	615a      	str	r2, [r3, #20]
}
 8027086:	bf00      	nop
 8027088:	3714      	adds	r7, #20
 802708a:	46bd      	mov	sp, r7
 802708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027090:	4770      	bx	lr
 8027092:	bf00      	nop
 8027094:	40010000 	.word	0x40010000
 8027098:	40000400 	.word	0x40000400
 802709c:	40000800 	.word	0x40000800
 80270a0:	40000c00 	.word	0x40000c00
 80270a4:	40010400 	.word	0x40010400
 80270a8:	40014000 	.word	0x40014000
 80270ac:	40014400 	.word	0x40014400
 80270b0:	40014800 	.word	0x40014800
 80270b4:	40001800 	.word	0x40001800
 80270b8:	40001c00 	.word	0x40001c00
 80270bc:	40002000 	.word	0x40002000

080270c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80270c0:	b480      	push	{r7}
 80270c2:	b087      	sub	sp, #28
 80270c4:	af00      	add	r7, sp, #0
 80270c6:	6078      	str	r0, [r7, #4]
 80270c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80270ca:	687b      	ldr	r3, [r7, #4]
 80270cc:	6a1b      	ldr	r3, [r3, #32]
 80270ce:	f023 0201 	bic.w	r2, r3, #1
 80270d2:	687b      	ldr	r3, [r7, #4]
 80270d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80270d6:	687b      	ldr	r3, [r7, #4]
 80270d8:	6a1b      	ldr	r3, [r3, #32]
 80270da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80270dc:	687b      	ldr	r3, [r7, #4]
 80270de:	685b      	ldr	r3, [r3, #4]
 80270e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80270e2:	687b      	ldr	r3, [r7, #4]
 80270e4:	699b      	ldr	r3, [r3, #24]
 80270e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80270e8:	68fb      	ldr	r3, [r7, #12]
 80270ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80270ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80270f0:	68fb      	ldr	r3, [r7, #12]
 80270f2:	f023 0303 	bic.w	r3, r3, #3
 80270f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80270f8:	683b      	ldr	r3, [r7, #0]
 80270fa:	681b      	ldr	r3, [r3, #0]
 80270fc:	68fa      	ldr	r2, [r7, #12]
 80270fe:	4313      	orrs	r3, r2
 8027100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8027102:	697b      	ldr	r3, [r7, #20]
 8027104:	f023 0302 	bic.w	r3, r3, #2
 8027108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 802710a:	683b      	ldr	r3, [r7, #0]
 802710c:	689b      	ldr	r3, [r3, #8]
 802710e:	697a      	ldr	r2, [r7, #20]
 8027110:	4313      	orrs	r3, r2
 8027112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8027114:	687b      	ldr	r3, [r7, #4]
 8027116:	4a20      	ldr	r2, [pc, #128]	; (8027198 <TIM_OC1_SetConfig+0xd8>)
 8027118:	4293      	cmp	r3, r2
 802711a:	d003      	beq.n	8027124 <TIM_OC1_SetConfig+0x64>
 802711c:	687b      	ldr	r3, [r7, #4]
 802711e:	4a1f      	ldr	r2, [pc, #124]	; (802719c <TIM_OC1_SetConfig+0xdc>)
 8027120:	4293      	cmp	r3, r2
 8027122:	d10c      	bne.n	802713e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8027124:	697b      	ldr	r3, [r7, #20]
 8027126:	f023 0308 	bic.w	r3, r3, #8
 802712a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 802712c:	683b      	ldr	r3, [r7, #0]
 802712e:	68db      	ldr	r3, [r3, #12]
 8027130:	697a      	ldr	r2, [r7, #20]
 8027132:	4313      	orrs	r3, r2
 8027134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8027136:	697b      	ldr	r3, [r7, #20]
 8027138:	f023 0304 	bic.w	r3, r3, #4
 802713c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802713e:	687b      	ldr	r3, [r7, #4]
 8027140:	4a15      	ldr	r2, [pc, #84]	; (8027198 <TIM_OC1_SetConfig+0xd8>)
 8027142:	4293      	cmp	r3, r2
 8027144:	d003      	beq.n	802714e <TIM_OC1_SetConfig+0x8e>
 8027146:	687b      	ldr	r3, [r7, #4]
 8027148:	4a14      	ldr	r2, [pc, #80]	; (802719c <TIM_OC1_SetConfig+0xdc>)
 802714a:	4293      	cmp	r3, r2
 802714c:	d111      	bne.n	8027172 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 802714e:	693b      	ldr	r3, [r7, #16]
 8027150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8027154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8027156:	693b      	ldr	r3, [r7, #16]
 8027158:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 802715c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 802715e:	683b      	ldr	r3, [r7, #0]
 8027160:	695b      	ldr	r3, [r3, #20]
 8027162:	693a      	ldr	r2, [r7, #16]
 8027164:	4313      	orrs	r3, r2
 8027166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8027168:	683b      	ldr	r3, [r7, #0]
 802716a:	699b      	ldr	r3, [r3, #24]
 802716c:	693a      	ldr	r2, [r7, #16]
 802716e:	4313      	orrs	r3, r2
 8027170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8027172:	687b      	ldr	r3, [r7, #4]
 8027174:	693a      	ldr	r2, [r7, #16]
 8027176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8027178:	687b      	ldr	r3, [r7, #4]
 802717a:	68fa      	ldr	r2, [r7, #12]
 802717c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 802717e:	683b      	ldr	r3, [r7, #0]
 8027180:	685a      	ldr	r2, [r3, #4]
 8027182:	687b      	ldr	r3, [r7, #4]
 8027184:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8027186:	687b      	ldr	r3, [r7, #4]
 8027188:	697a      	ldr	r2, [r7, #20]
 802718a:	621a      	str	r2, [r3, #32]
}
 802718c:	bf00      	nop
 802718e:	371c      	adds	r7, #28
 8027190:	46bd      	mov	sp, r7
 8027192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027196:	4770      	bx	lr
 8027198:	40010000 	.word	0x40010000
 802719c:	40010400 	.word	0x40010400

080271a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80271a0:	b480      	push	{r7}
 80271a2:	b087      	sub	sp, #28
 80271a4:	af00      	add	r7, sp, #0
 80271a6:	6078      	str	r0, [r7, #4]
 80271a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80271aa:	687b      	ldr	r3, [r7, #4]
 80271ac:	6a1b      	ldr	r3, [r3, #32]
 80271ae:	f023 0210 	bic.w	r2, r3, #16
 80271b2:	687b      	ldr	r3, [r7, #4]
 80271b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80271b6:	687b      	ldr	r3, [r7, #4]
 80271b8:	6a1b      	ldr	r3, [r3, #32]
 80271ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80271bc:	687b      	ldr	r3, [r7, #4]
 80271be:	685b      	ldr	r3, [r3, #4]
 80271c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80271c2:	687b      	ldr	r3, [r7, #4]
 80271c4:	699b      	ldr	r3, [r3, #24]
 80271c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80271c8:	68fb      	ldr	r3, [r7, #12]
 80271ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80271ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80271d0:	68fb      	ldr	r3, [r7, #12]
 80271d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80271d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80271d8:	683b      	ldr	r3, [r7, #0]
 80271da:	681b      	ldr	r3, [r3, #0]
 80271dc:	021b      	lsls	r3, r3, #8
 80271de:	68fa      	ldr	r2, [r7, #12]
 80271e0:	4313      	orrs	r3, r2
 80271e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80271e4:	697b      	ldr	r3, [r7, #20]
 80271e6:	f023 0320 	bic.w	r3, r3, #32
 80271ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80271ec:	683b      	ldr	r3, [r7, #0]
 80271ee:	689b      	ldr	r3, [r3, #8]
 80271f0:	011b      	lsls	r3, r3, #4
 80271f2:	697a      	ldr	r2, [r7, #20]
 80271f4:	4313      	orrs	r3, r2
 80271f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80271f8:	687b      	ldr	r3, [r7, #4]
 80271fa:	4a22      	ldr	r2, [pc, #136]	; (8027284 <TIM_OC2_SetConfig+0xe4>)
 80271fc:	4293      	cmp	r3, r2
 80271fe:	d003      	beq.n	8027208 <TIM_OC2_SetConfig+0x68>
 8027200:	687b      	ldr	r3, [r7, #4]
 8027202:	4a21      	ldr	r2, [pc, #132]	; (8027288 <TIM_OC2_SetConfig+0xe8>)
 8027204:	4293      	cmp	r3, r2
 8027206:	d10d      	bne.n	8027224 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8027208:	697b      	ldr	r3, [r7, #20]
 802720a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802720e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8027210:	683b      	ldr	r3, [r7, #0]
 8027212:	68db      	ldr	r3, [r3, #12]
 8027214:	011b      	lsls	r3, r3, #4
 8027216:	697a      	ldr	r2, [r7, #20]
 8027218:	4313      	orrs	r3, r2
 802721a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 802721c:	697b      	ldr	r3, [r7, #20]
 802721e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8027222:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8027224:	687b      	ldr	r3, [r7, #4]
 8027226:	4a17      	ldr	r2, [pc, #92]	; (8027284 <TIM_OC2_SetConfig+0xe4>)
 8027228:	4293      	cmp	r3, r2
 802722a:	d003      	beq.n	8027234 <TIM_OC2_SetConfig+0x94>
 802722c:	687b      	ldr	r3, [r7, #4]
 802722e:	4a16      	ldr	r2, [pc, #88]	; (8027288 <TIM_OC2_SetConfig+0xe8>)
 8027230:	4293      	cmp	r3, r2
 8027232:	d113      	bne.n	802725c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8027234:	693b      	ldr	r3, [r7, #16]
 8027236:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 802723a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 802723c:	693b      	ldr	r3, [r7, #16]
 802723e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8027242:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8027244:	683b      	ldr	r3, [r7, #0]
 8027246:	695b      	ldr	r3, [r3, #20]
 8027248:	009b      	lsls	r3, r3, #2
 802724a:	693a      	ldr	r2, [r7, #16]
 802724c:	4313      	orrs	r3, r2
 802724e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8027250:	683b      	ldr	r3, [r7, #0]
 8027252:	699b      	ldr	r3, [r3, #24]
 8027254:	009b      	lsls	r3, r3, #2
 8027256:	693a      	ldr	r2, [r7, #16]
 8027258:	4313      	orrs	r3, r2
 802725a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802725c:	687b      	ldr	r3, [r7, #4]
 802725e:	693a      	ldr	r2, [r7, #16]
 8027260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8027262:	687b      	ldr	r3, [r7, #4]
 8027264:	68fa      	ldr	r2, [r7, #12]
 8027266:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8027268:	683b      	ldr	r3, [r7, #0]
 802726a:	685a      	ldr	r2, [r3, #4]
 802726c:	687b      	ldr	r3, [r7, #4]
 802726e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8027270:	687b      	ldr	r3, [r7, #4]
 8027272:	697a      	ldr	r2, [r7, #20]
 8027274:	621a      	str	r2, [r3, #32]
}
 8027276:	bf00      	nop
 8027278:	371c      	adds	r7, #28
 802727a:	46bd      	mov	sp, r7
 802727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027280:	4770      	bx	lr
 8027282:	bf00      	nop
 8027284:	40010000 	.word	0x40010000
 8027288:	40010400 	.word	0x40010400

0802728c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802728c:	b480      	push	{r7}
 802728e:	b087      	sub	sp, #28
 8027290:	af00      	add	r7, sp, #0
 8027292:	6078      	str	r0, [r7, #4]
 8027294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8027296:	687b      	ldr	r3, [r7, #4]
 8027298:	6a1b      	ldr	r3, [r3, #32]
 802729a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 802729e:	687b      	ldr	r3, [r7, #4]
 80272a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80272a2:	687b      	ldr	r3, [r7, #4]
 80272a4:	6a1b      	ldr	r3, [r3, #32]
 80272a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80272a8:	687b      	ldr	r3, [r7, #4]
 80272aa:	685b      	ldr	r3, [r3, #4]
 80272ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80272ae:	687b      	ldr	r3, [r7, #4]
 80272b0:	69db      	ldr	r3, [r3, #28]
 80272b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80272b4:	68fb      	ldr	r3, [r7, #12]
 80272b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80272ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80272bc:	68fb      	ldr	r3, [r7, #12]
 80272be:	f023 0303 	bic.w	r3, r3, #3
 80272c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80272c4:	683b      	ldr	r3, [r7, #0]
 80272c6:	681b      	ldr	r3, [r3, #0]
 80272c8:	68fa      	ldr	r2, [r7, #12]
 80272ca:	4313      	orrs	r3, r2
 80272cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80272ce:	697b      	ldr	r3, [r7, #20]
 80272d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80272d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80272d6:	683b      	ldr	r3, [r7, #0]
 80272d8:	689b      	ldr	r3, [r3, #8]
 80272da:	021b      	lsls	r3, r3, #8
 80272dc:	697a      	ldr	r2, [r7, #20]
 80272de:	4313      	orrs	r3, r2
 80272e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80272e2:	687b      	ldr	r3, [r7, #4]
 80272e4:	4a21      	ldr	r2, [pc, #132]	; (802736c <TIM_OC3_SetConfig+0xe0>)
 80272e6:	4293      	cmp	r3, r2
 80272e8:	d003      	beq.n	80272f2 <TIM_OC3_SetConfig+0x66>
 80272ea:	687b      	ldr	r3, [r7, #4]
 80272ec:	4a20      	ldr	r2, [pc, #128]	; (8027370 <TIM_OC3_SetConfig+0xe4>)
 80272ee:	4293      	cmp	r3, r2
 80272f0:	d10d      	bne.n	802730e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80272f2:	697b      	ldr	r3, [r7, #20]
 80272f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80272f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80272fa:	683b      	ldr	r3, [r7, #0]
 80272fc:	68db      	ldr	r3, [r3, #12]
 80272fe:	021b      	lsls	r3, r3, #8
 8027300:	697a      	ldr	r2, [r7, #20]
 8027302:	4313      	orrs	r3, r2
 8027304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8027306:	697b      	ldr	r3, [r7, #20]
 8027308:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 802730c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802730e:	687b      	ldr	r3, [r7, #4]
 8027310:	4a16      	ldr	r2, [pc, #88]	; (802736c <TIM_OC3_SetConfig+0xe0>)
 8027312:	4293      	cmp	r3, r2
 8027314:	d003      	beq.n	802731e <TIM_OC3_SetConfig+0x92>
 8027316:	687b      	ldr	r3, [r7, #4]
 8027318:	4a15      	ldr	r2, [pc, #84]	; (8027370 <TIM_OC3_SetConfig+0xe4>)
 802731a:	4293      	cmp	r3, r2
 802731c:	d113      	bne.n	8027346 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 802731e:	693b      	ldr	r3, [r7, #16]
 8027320:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8027324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8027326:	693b      	ldr	r3, [r7, #16]
 8027328:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802732c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 802732e:	683b      	ldr	r3, [r7, #0]
 8027330:	695b      	ldr	r3, [r3, #20]
 8027332:	011b      	lsls	r3, r3, #4
 8027334:	693a      	ldr	r2, [r7, #16]
 8027336:	4313      	orrs	r3, r2
 8027338:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 802733a:	683b      	ldr	r3, [r7, #0]
 802733c:	699b      	ldr	r3, [r3, #24]
 802733e:	011b      	lsls	r3, r3, #4
 8027340:	693a      	ldr	r2, [r7, #16]
 8027342:	4313      	orrs	r3, r2
 8027344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8027346:	687b      	ldr	r3, [r7, #4]
 8027348:	693a      	ldr	r2, [r7, #16]
 802734a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802734c:	687b      	ldr	r3, [r7, #4]
 802734e:	68fa      	ldr	r2, [r7, #12]
 8027350:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8027352:	683b      	ldr	r3, [r7, #0]
 8027354:	685a      	ldr	r2, [r3, #4]
 8027356:	687b      	ldr	r3, [r7, #4]
 8027358:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802735a:	687b      	ldr	r3, [r7, #4]
 802735c:	697a      	ldr	r2, [r7, #20]
 802735e:	621a      	str	r2, [r3, #32]
}
 8027360:	bf00      	nop
 8027362:	371c      	adds	r7, #28
 8027364:	46bd      	mov	sp, r7
 8027366:	f85d 7b04 	ldr.w	r7, [sp], #4
 802736a:	4770      	bx	lr
 802736c:	40010000 	.word	0x40010000
 8027370:	40010400 	.word	0x40010400

08027374 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8027374:	b480      	push	{r7}
 8027376:	b087      	sub	sp, #28
 8027378:	af00      	add	r7, sp, #0
 802737a:	6078      	str	r0, [r7, #4]
 802737c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 802737e:	687b      	ldr	r3, [r7, #4]
 8027380:	6a1b      	ldr	r3, [r3, #32]
 8027382:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8027386:	687b      	ldr	r3, [r7, #4]
 8027388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802738a:	687b      	ldr	r3, [r7, #4]
 802738c:	6a1b      	ldr	r3, [r3, #32]
 802738e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8027390:	687b      	ldr	r3, [r7, #4]
 8027392:	685b      	ldr	r3, [r3, #4]
 8027394:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8027396:	687b      	ldr	r3, [r7, #4]
 8027398:	69db      	ldr	r3, [r3, #28]
 802739a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 802739c:	68fb      	ldr	r3, [r7, #12]
 802739e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80273a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80273a4:	68fb      	ldr	r3, [r7, #12]
 80273a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80273aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80273ac:	683b      	ldr	r3, [r7, #0]
 80273ae:	681b      	ldr	r3, [r3, #0]
 80273b0:	021b      	lsls	r3, r3, #8
 80273b2:	68fa      	ldr	r2, [r7, #12]
 80273b4:	4313      	orrs	r3, r2
 80273b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80273b8:	693b      	ldr	r3, [r7, #16]
 80273ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80273be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80273c0:	683b      	ldr	r3, [r7, #0]
 80273c2:	689b      	ldr	r3, [r3, #8]
 80273c4:	031b      	lsls	r3, r3, #12
 80273c6:	693a      	ldr	r2, [r7, #16]
 80273c8:	4313      	orrs	r3, r2
 80273ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80273cc:	687b      	ldr	r3, [r7, #4]
 80273ce:	4a12      	ldr	r2, [pc, #72]	; (8027418 <TIM_OC4_SetConfig+0xa4>)
 80273d0:	4293      	cmp	r3, r2
 80273d2:	d003      	beq.n	80273dc <TIM_OC4_SetConfig+0x68>
 80273d4:	687b      	ldr	r3, [r7, #4]
 80273d6:	4a11      	ldr	r2, [pc, #68]	; (802741c <TIM_OC4_SetConfig+0xa8>)
 80273d8:	4293      	cmp	r3, r2
 80273da:	d109      	bne.n	80273f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80273dc:	697b      	ldr	r3, [r7, #20]
 80273de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80273e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80273e4:	683b      	ldr	r3, [r7, #0]
 80273e6:	695b      	ldr	r3, [r3, #20]
 80273e8:	019b      	lsls	r3, r3, #6
 80273ea:	697a      	ldr	r2, [r7, #20]
 80273ec:	4313      	orrs	r3, r2
 80273ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80273f0:	687b      	ldr	r3, [r7, #4]
 80273f2:	697a      	ldr	r2, [r7, #20]
 80273f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80273f6:	687b      	ldr	r3, [r7, #4]
 80273f8:	68fa      	ldr	r2, [r7, #12]
 80273fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80273fc:	683b      	ldr	r3, [r7, #0]
 80273fe:	685a      	ldr	r2, [r3, #4]
 8027400:	687b      	ldr	r3, [r7, #4]
 8027402:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8027404:	687b      	ldr	r3, [r7, #4]
 8027406:	693a      	ldr	r2, [r7, #16]
 8027408:	621a      	str	r2, [r3, #32]
}
 802740a:	bf00      	nop
 802740c:	371c      	adds	r7, #28
 802740e:	46bd      	mov	sp, r7
 8027410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027414:	4770      	bx	lr
 8027416:	bf00      	nop
 8027418:	40010000 	.word	0x40010000
 802741c:	40010400 	.word	0x40010400

08027420 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8027420:	b480      	push	{r7}
 8027422:	b087      	sub	sp, #28
 8027424:	af00      	add	r7, sp, #0
 8027426:	60f8      	str	r0, [r7, #12]
 8027428:	60b9      	str	r1, [r7, #8]
 802742a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 802742c:	68fb      	ldr	r3, [r7, #12]
 802742e:	6a1b      	ldr	r3, [r3, #32]
 8027430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8027432:	68fb      	ldr	r3, [r7, #12]
 8027434:	6a1b      	ldr	r3, [r3, #32]
 8027436:	f023 0201 	bic.w	r2, r3, #1
 802743a:	68fb      	ldr	r3, [r7, #12]
 802743c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802743e:	68fb      	ldr	r3, [r7, #12]
 8027440:	699b      	ldr	r3, [r3, #24]
 8027442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8027444:	693b      	ldr	r3, [r7, #16]
 8027446:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802744a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 802744c:	687b      	ldr	r3, [r7, #4]
 802744e:	011b      	lsls	r3, r3, #4
 8027450:	693a      	ldr	r2, [r7, #16]
 8027452:	4313      	orrs	r3, r2
 8027454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8027456:	697b      	ldr	r3, [r7, #20]
 8027458:	f023 030a 	bic.w	r3, r3, #10
 802745c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 802745e:	697a      	ldr	r2, [r7, #20]
 8027460:	68bb      	ldr	r3, [r7, #8]
 8027462:	4313      	orrs	r3, r2
 8027464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8027466:	68fb      	ldr	r3, [r7, #12]
 8027468:	693a      	ldr	r2, [r7, #16]
 802746a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802746c:	68fb      	ldr	r3, [r7, #12]
 802746e:	697a      	ldr	r2, [r7, #20]
 8027470:	621a      	str	r2, [r3, #32]
}
 8027472:	bf00      	nop
 8027474:	371c      	adds	r7, #28
 8027476:	46bd      	mov	sp, r7
 8027478:	f85d 7b04 	ldr.w	r7, [sp], #4
 802747c:	4770      	bx	lr

0802747e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802747e:	b480      	push	{r7}
 8027480:	b087      	sub	sp, #28
 8027482:	af00      	add	r7, sp, #0
 8027484:	60f8      	str	r0, [r7, #12]
 8027486:	60b9      	str	r1, [r7, #8]
 8027488:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802748a:	68fb      	ldr	r3, [r7, #12]
 802748c:	6a1b      	ldr	r3, [r3, #32]
 802748e:	f023 0210 	bic.w	r2, r3, #16
 8027492:	68fb      	ldr	r3, [r7, #12]
 8027494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8027496:	68fb      	ldr	r3, [r7, #12]
 8027498:	699b      	ldr	r3, [r3, #24]
 802749a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802749c:	68fb      	ldr	r3, [r7, #12]
 802749e:	6a1b      	ldr	r3, [r3, #32]
 80274a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80274a2:	697b      	ldr	r3, [r7, #20]
 80274a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80274a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80274aa:	687b      	ldr	r3, [r7, #4]
 80274ac:	031b      	lsls	r3, r3, #12
 80274ae:	697a      	ldr	r2, [r7, #20]
 80274b0:	4313      	orrs	r3, r2
 80274b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80274b4:	693b      	ldr	r3, [r7, #16]
 80274b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80274ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80274bc:	68bb      	ldr	r3, [r7, #8]
 80274be:	011b      	lsls	r3, r3, #4
 80274c0:	693a      	ldr	r2, [r7, #16]
 80274c2:	4313      	orrs	r3, r2
 80274c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80274c6:	68fb      	ldr	r3, [r7, #12]
 80274c8:	697a      	ldr	r2, [r7, #20]
 80274ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80274cc:	68fb      	ldr	r3, [r7, #12]
 80274ce:	693a      	ldr	r2, [r7, #16]
 80274d0:	621a      	str	r2, [r3, #32]
}
 80274d2:	bf00      	nop
 80274d4:	371c      	adds	r7, #28
 80274d6:	46bd      	mov	sp, r7
 80274d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80274dc:	4770      	bx	lr

080274de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80274de:	b480      	push	{r7}
 80274e0:	b085      	sub	sp, #20
 80274e2:	af00      	add	r7, sp, #0
 80274e4:	6078      	str	r0, [r7, #4]
 80274e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80274e8:	687b      	ldr	r3, [r7, #4]
 80274ea:	689b      	ldr	r3, [r3, #8]
 80274ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80274ee:	68fb      	ldr	r3, [r7, #12]
 80274f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80274f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80274f6:	683a      	ldr	r2, [r7, #0]
 80274f8:	68fb      	ldr	r3, [r7, #12]
 80274fa:	4313      	orrs	r3, r2
 80274fc:	f043 0307 	orr.w	r3, r3, #7
 8027500:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8027502:	687b      	ldr	r3, [r7, #4]
 8027504:	68fa      	ldr	r2, [r7, #12]
 8027506:	609a      	str	r2, [r3, #8]
}
 8027508:	bf00      	nop
 802750a:	3714      	adds	r7, #20
 802750c:	46bd      	mov	sp, r7
 802750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027512:	4770      	bx	lr

08027514 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8027514:	b480      	push	{r7}
 8027516:	b087      	sub	sp, #28
 8027518:	af00      	add	r7, sp, #0
 802751a:	60f8      	str	r0, [r7, #12]
 802751c:	60b9      	str	r1, [r7, #8]
 802751e:	607a      	str	r2, [r7, #4]
 8027520:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8027522:	68fb      	ldr	r3, [r7, #12]
 8027524:	689b      	ldr	r3, [r3, #8]
 8027526:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8027528:	697b      	ldr	r3, [r7, #20]
 802752a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802752e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8027530:	683b      	ldr	r3, [r7, #0]
 8027532:	021a      	lsls	r2, r3, #8
 8027534:	687b      	ldr	r3, [r7, #4]
 8027536:	431a      	orrs	r2, r3
 8027538:	68bb      	ldr	r3, [r7, #8]
 802753a:	4313      	orrs	r3, r2
 802753c:	697a      	ldr	r2, [r7, #20]
 802753e:	4313      	orrs	r3, r2
 8027540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8027542:	68fb      	ldr	r3, [r7, #12]
 8027544:	697a      	ldr	r2, [r7, #20]
 8027546:	609a      	str	r2, [r3, #8]
}
 8027548:	bf00      	nop
 802754a:	371c      	adds	r7, #28
 802754c:	46bd      	mov	sp, r7
 802754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027552:	4770      	bx	lr

08027554 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8027554:	b480      	push	{r7}
 8027556:	b087      	sub	sp, #28
 8027558:	af00      	add	r7, sp, #0
 802755a:	60f8      	str	r0, [r7, #12]
 802755c:	60b9      	str	r1, [r7, #8]
 802755e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8027560:	68bb      	ldr	r3, [r7, #8]
 8027562:	f003 031f 	and.w	r3, r3, #31
 8027566:	2201      	movs	r2, #1
 8027568:	fa02 f303 	lsl.w	r3, r2, r3
 802756c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 802756e:	68fb      	ldr	r3, [r7, #12]
 8027570:	6a1a      	ldr	r2, [r3, #32]
 8027572:	697b      	ldr	r3, [r7, #20]
 8027574:	43db      	mvns	r3, r3
 8027576:	401a      	ands	r2, r3
 8027578:	68fb      	ldr	r3, [r7, #12]
 802757a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 802757c:	68fb      	ldr	r3, [r7, #12]
 802757e:	6a1a      	ldr	r2, [r3, #32]
 8027580:	68bb      	ldr	r3, [r7, #8]
 8027582:	f003 031f 	and.w	r3, r3, #31
 8027586:	6879      	ldr	r1, [r7, #4]
 8027588:	fa01 f303 	lsl.w	r3, r1, r3
 802758c:	431a      	orrs	r2, r3
 802758e:	68fb      	ldr	r3, [r7, #12]
 8027590:	621a      	str	r2, [r3, #32]
}
 8027592:	bf00      	nop
 8027594:	371c      	adds	r7, #28
 8027596:	46bd      	mov	sp, r7
 8027598:	f85d 7b04 	ldr.w	r7, [sp], #4
 802759c:	4770      	bx	lr
	...

080275a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80275a0:	b480      	push	{r7}
 80275a2:	b085      	sub	sp, #20
 80275a4:	af00      	add	r7, sp, #0
 80275a6:	6078      	str	r0, [r7, #4]
 80275a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80275aa:	687b      	ldr	r3, [r7, #4]
 80275ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80275b0:	2b01      	cmp	r3, #1
 80275b2:	d101      	bne.n	80275b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80275b4:	2302      	movs	r3, #2
 80275b6:	e05a      	b.n	802766e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80275b8:	687b      	ldr	r3, [r7, #4]
 80275ba:	2201      	movs	r2, #1
 80275bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80275c0:	687b      	ldr	r3, [r7, #4]
 80275c2:	2202      	movs	r2, #2
 80275c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80275c8:	687b      	ldr	r3, [r7, #4]
 80275ca:	681b      	ldr	r3, [r3, #0]
 80275cc:	685b      	ldr	r3, [r3, #4]
 80275ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80275d0:	687b      	ldr	r3, [r7, #4]
 80275d2:	681b      	ldr	r3, [r3, #0]
 80275d4:	689b      	ldr	r3, [r3, #8]
 80275d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80275d8:	68fb      	ldr	r3, [r7, #12]
 80275da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80275de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80275e0:	683b      	ldr	r3, [r7, #0]
 80275e2:	681b      	ldr	r3, [r3, #0]
 80275e4:	68fa      	ldr	r2, [r7, #12]
 80275e6:	4313      	orrs	r3, r2
 80275e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80275ea:	687b      	ldr	r3, [r7, #4]
 80275ec:	681b      	ldr	r3, [r3, #0]
 80275ee:	68fa      	ldr	r2, [r7, #12]
 80275f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80275f2:	687b      	ldr	r3, [r7, #4]
 80275f4:	681b      	ldr	r3, [r3, #0]
 80275f6:	4a21      	ldr	r2, [pc, #132]	; (802767c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80275f8:	4293      	cmp	r3, r2
 80275fa:	d022      	beq.n	8027642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80275fc:	687b      	ldr	r3, [r7, #4]
 80275fe:	681b      	ldr	r3, [r3, #0]
 8027600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8027604:	d01d      	beq.n	8027642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8027606:	687b      	ldr	r3, [r7, #4]
 8027608:	681b      	ldr	r3, [r3, #0]
 802760a:	4a1d      	ldr	r2, [pc, #116]	; (8027680 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 802760c:	4293      	cmp	r3, r2
 802760e:	d018      	beq.n	8027642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8027610:	687b      	ldr	r3, [r7, #4]
 8027612:	681b      	ldr	r3, [r3, #0]
 8027614:	4a1b      	ldr	r2, [pc, #108]	; (8027684 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8027616:	4293      	cmp	r3, r2
 8027618:	d013      	beq.n	8027642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802761a:	687b      	ldr	r3, [r7, #4]
 802761c:	681b      	ldr	r3, [r3, #0]
 802761e:	4a1a      	ldr	r2, [pc, #104]	; (8027688 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8027620:	4293      	cmp	r3, r2
 8027622:	d00e      	beq.n	8027642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8027624:	687b      	ldr	r3, [r7, #4]
 8027626:	681b      	ldr	r3, [r3, #0]
 8027628:	4a18      	ldr	r2, [pc, #96]	; (802768c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 802762a:	4293      	cmp	r3, r2
 802762c:	d009      	beq.n	8027642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802762e:	687b      	ldr	r3, [r7, #4]
 8027630:	681b      	ldr	r3, [r3, #0]
 8027632:	4a17      	ldr	r2, [pc, #92]	; (8027690 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8027634:	4293      	cmp	r3, r2
 8027636:	d004      	beq.n	8027642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8027638:	687b      	ldr	r3, [r7, #4]
 802763a:	681b      	ldr	r3, [r3, #0]
 802763c:	4a15      	ldr	r2, [pc, #84]	; (8027694 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 802763e:	4293      	cmp	r3, r2
 8027640:	d10c      	bne.n	802765c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8027642:	68bb      	ldr	r3, [r7, #8]
 8027644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8027648:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802764a:	683b      	ldr	r3, [r7, #0]
 802764c:	685b      	ldr	r3, [r3, #4]
 802764e:	68ba      	ldr	r2, [r7, #8]
 8027650:	4313      	orrs	r3, r2
 8027652:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8027654:	687b      	ldr	r3, [r7, #4]
 8027656:	681b      	ldr	r3, [r3, #0]
 8027658:	68ba      	ldr	r2, [r7, #8]
 802765a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802765c:	687b      	ldr	r3, [r7, #4]
 802765e:	2201      	movs	r2, #1
 8027660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8027664:	687b      	ldr	r3, [r7, #4]
 8027666:	2200      	movs	r2, #0
 8027668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802766c:	2300      	movs	r3, #0
}
 802766e:	4618      	mov	r0, r3
 8027670:	3714      	adds	r7, #20
 8027672:	46bd      	mov	sp, r7
 8027674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027678:	4770      	bx	lr
 802767a:	bf00      	nop
 802767c:	40010000 	.word	0x40010000
 8027680:	40000400 	.word	0x40000400
 8027684:	40000800 	.word	0x40000800
 8027688:	40000c00 	.word	0x40000c00
 802768c:	40010400 	.word	0x40010400
 8027690:	40014000 	.word	0x40014000
 8027694:	40001800 	.word	0x40001800

08027698 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8027698:	b480      	push	{r7}
 802769a:	b085      	sub	sp, #20
 802769c:	af00      	add	r7, sp, #0
 802769e:	6078      	str	r0, [r7, #4]
 80276a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80276a2:	2300      	movs	r3, #0
 80276a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80276a6:	687b      	ldr	r3, [r7, #4]
 80276a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80276ac:	2b01      	cmp	r3, #1
 80276ae:	d101      	bne.n	80276b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80276b0:	2302      	movs	r3, #2
 80276b2:	e03d      	b.n	8027730 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80276b4:	687b      	ldr	r3, [r7, #4]
 80276b6:	2201      	movs	r2, #1
 80276b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80276bc:	68fb      	ldr	r3, [r7, #12]
 80276be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80276c2:	683b      	ldr	r3, [r7, #0]
 80276c4:	68db      	ldr	r3, [r3, #12]
 80276c6:	4313      	orrs	r3, r2
 80276c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80276ca:	68fb      	ldr	r3, [r7, #12]
 80276cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80276d0:	683b      	ldr	r3, [r7, #0]
 80276d2:	689b      	ldr	r3, [r3, #8]
 80276d4:	4313      	orrs	r3, r2
 80276d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80276d8:	68fb      	ldr	r3, [r7, #12]
 80276da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80276de:	683b      	ldr	r3, [r7, #0]
 80276e0:	685b      	ldr	r3, [r3, #4]
 80276e2:	4313      	orrs	r3, r2
 80276e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80276e6:	68fb      	ldr	r3, [r7, #12]
 80276e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80276ec:	683b      	ldr	r3, [r7, #0]
 80276ee:	681b      	ldr	r3, [r3, #0]
 80276f0:	4313      	orrs	r3, r2
 80276f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80276f4:	68fb      	ldr	r3, [r7, #12]
 80276f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80276fa:	683b      	ldr	r3, [r7, #0]
 80276fc:	691b      	ldr	r3, [r3, #16]
 80276fe:	4313      	orrs	r3, r2
 8027700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8027702:	68fb      	ldr	r3, [r7, #12]
 8027704:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8027708:	683b      	ldr	r3, [r7, #0]
 802770a:	695b      	ldr	r3, [r3, #20]
 802770c:	4313      	orrs	r3, r2
 802770e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8027710:	68fb      	ldr	r3, [r7, #12]
 8027712:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8027716:	683b      	ldr	r3, [r7, #0]
 8027718:	69db      	ldr	r3, [r3, #28]
 802771a:	4313      	orrs	r3, r2
 802771c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 802771e:	687b      	ldr	r3, [r7, #4]
 8027720:	681b      	ldr	r3, [r3, #0]
 8027722:	68fa      	ldr	r2, [r7, #12]
 8027724:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8027726:	687b      	ldr	r3, [r7, #4]
 8027728:	2200      	movs	r2, #0
 802772a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802772e:	2300      	movs	r3, #0
}
 8027730:	4618      	mov	r0, r3
 8027732:	3714      	adds	r7, #20
 8027734:	46bd      	mov	sp, r7
 8027736:	f85d 7b04 	ldr.w	r7, [sp], #4
 802773a:	4770      	bx	lr

0802773c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 802773c:	b480      	push	{r7}
 802773e:	b083      	sub	sp, #12
 8027740:	af00      	add	r7, sp, #0
 8027742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8027744:	bf00      	nop
 8027746:	370c      	adds	r7, #12
 8027748:	46bd      	mov	sp, r7
 802774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802774e:	4770      	bx	lr

08027750 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8027750:	b480      	push	{r7}
 8027752:	b083      	sub	sp, #12
 8027754:	af00      	add	r7, sp, #0
 8027756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8027758:	bf00      	nop
 802775a:	370c      	adds	r7, #12
 802775c:	46bd      	mov	sp, r7
 802775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027762:	4770      	bx	lr

08027764 <__cxa_guard_acquire>:
 8027764:	6803      	ldr	r3, [r0, #0]
 8027766:	07db      	lsls	r3, r3, #31
 8027768:	d406      	bmi.n	8027778 <__cxa_guard_acquire+0x14>
 802776a:	7843      	ldrb	r3, [r0, #1]
 802776c:	b103      	cbz	r3, 8027770 <__cxa_guard_acquire+0xc>
 802776e:	deff      	udf	#255	; 0xff
 8027770:	2301      	movs	r3, #1
 8027772:	7043      	strb	r3, [r0, #1]
 8027774:	4618      	mov	r0, r3
 8027776:	4770      	bx	lr
 8027778:	2000      	movs	r0, #0
 802777a:	4770      	bx	lr

0802777c <__cxa_guard_release>:
 802777c:	2301      	movs	r3, #1
 802777e:	6003      	str	r3, [r0, #0]
 8027780:	4770      	bx	lr
	...

08027784 <__errno>:
 8027784:	4b01      	ldr	r3, [pc, #4]	; (802778c <__errno+0x8>)
 8027786:	6818      	ldr	r0, [r3, #0]
 8027788:	4770      	bx	lr
 802778a:	bf00      	nop
 802778c:	2000000c 	.word	0x2000000c

08027790 <__libc_init_array>:
 8027790:	b570      	push	{r4, r5, r6, lr}
 8027792:	4e0d      	ldr	r6, [pc, #52]	; (80277c8 <__libc_init_array+0x38>)
 8027794:	4c0d      	ldr	r4, [pc, #52]	; (80277cc <__libc_init_array+0x3c>)
 8027796:	1ba4      	subs	r4, r4, r6
 8027798:	10a4      	asrs	r4, r4, #2
 802779a:	2500      	movs	r5, #0
 802779c:	42a5      	cmp	r5, r4
 802779e:	d109      	bne.n	80277b4 <__libc_init_array+0x24>
 80277a0:	4e0b      	ldr	r6, [pc, #44]	; (80277d0 <__libc_init_array+0x40>)
 80277a2:	4c0c      	ldr	r4, [pc, #48]	; (80277d4 <__libc_init_array+0x44>)
 80277a4:	f002 f944 	bl	8029a30 <_init>
 80277a8:	1ba4      	subs	r4, r4, r6
 80277aa:	10a4      	asrs	r4, r4, #2
 80277ac:	2500      	movs	r5, #0
 80277ae:	42a5      	cmp	r5, r4
 80277b0:	d105      	bne.n	80277be <__libc_init_array+0x2e>
 80277b2:	bd70      	pop	{r4, r5, r6, pc}
 80277b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80277b8:	4798      	blx	r3
 80277ba:	3501      	adds	r5, #1
 80277bc:	e7ee      	b.n	802779c <__libc_init_array+0xc>
 80277be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80277c2:	4798      	blx	r3
 80277c4:	3501      	adds	r5, #1
 80277c6:	e7f2      	b.n	80277ae <__libc_init_array+0x1e>
 80277c8:	08029d10 	.word	0x08029d10
 80277cc:	08029d10 	.word	0x08029d10
 80277d0:	08029d10 	.word	0x08029d10
 80277d4:	08029d18 	.word	0x08029d18

080277d8 <memcpy>:
 80277d8:	b510      	push	{r4, lr}
 80277da:	1e43      	subs	r3, r0, #1
 80277dc:	440a      	add	r2, r1
 80277de:	4291      	cmp	r1, r2
 80277e0:	d100      	bne.n	80277e4 <memcpy+0xc>
 80277e2:	bd10      	pop	{r4, pc}
 80277e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80277e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80277ec:	e7f7      	b.n	80277de <memcpy+0x6>

080277ee <memset>:
 80277ee:	4402      	add	r2, r0
 80277f0:	4603      	mov	r3, r0
 80277f2:	4293      	cmp	r3, r2
 80277f4:	d100      	bne.n	80277f8 <memset+0xa>
 80277f6:	4770      	bx	lr
 80277f8:	f803 1b01 	strb.w	r1, [r3], #1
 80277fc:	e7f9      	b.n	80277f2 <memset+0x4>

080277fe <__cvt>:
 80277fe:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8027802:	ec55 4b10 	vmov	r4, r5, d0
 8027806:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8027808:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 802780c:	2d00      	cmp	r5, #0
 802780e:	460e      	mov	r6, r1
 8027810:	4691      	mov	r9, r2
 8027812:	4619      	mov	r1, r3
 8027814:	bfb8      	it	lt
 8027816:	4622      	movlt	r2, r4
 8027818:	462b      	mov	r3, r5
 802781a:	f027 0720 	bic.w	r7, r7, #32
 802781e:	bfbb      	ittet	lt
 8027820:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8027824:	461d      	movlt	r5, r3
 8027826:	2300      	movge	r3, #0
 8027828:	232d      	movlt	r3, #45	; 0x2d
 802782a:	bfb8      	it	lt
 802782c:	4614      	movlt	r4, r2
 802782e:	2f46      	cmp	r7, #70	; 0x46
 8027830:	700b      	strb	r3, [r1, #0]
 8027832:	d004      	beq.n	802783e <__cvt+0x40>
 8027834:	2f45      	cmp	r7, #69	; 0x45
 8027836:	d100      	bne.n	802783a <__cvt+0x3c>
 8027838:	3601      	adds	r6, #1
 802783a:	2102      	movs	r1, #2
 802783c:	e000      	b.n	8027840 <__cvt+0x42>
 802783e:	2103      	movs	r1, #3
 8027840:	ab03      	add	r3, sp, #12
 8027842:	9301      	str	r3, [sp, #4]
 8027844:	ab02      	add	r3, sp, #8
 8027846:	9300      	str	r3, [sp, #0]
 8027848:	4632      	mov	r2, r6
 802784a:	4653      	mov	r3, sl
 802784c:	ec45 4b10 	vmov	d0, r4, r5
 8027850:	f000 fcd2 	bl	80281f8 <_dtoa_r>
 8027854:	2f47      	cmp	r7, #71	; 0x47
 8027856:	4680      	mov	r8, r0
 8027858:	d102      	bne.n	8027860 <__cvt+0x62>
 802785a:	f019 0f01 	tst.w	r9, #1
 802785e:	d026      	beq.n	80278ae <__cvt+0xb0>
 8027860:	2f46      	cmp	r7, #70	; 0x46
 8027862:	eb08 0906 	add.w	r9, r8, r6
 8027866:	d111      	bne.n	802788c <__cvt+0x8e>
 8027868:	f898 3000 	ldrb.w	r3, [r8]
 802786c:	2b30      	cmp	r3, #48	; 0x30
 802786e:	d10a      	bne.n	8027886 <__cvt+0x88>
 8027870:	2200      	movs	r2, #0
 8027872:	2300      	movs	r3, #0
 8027874:	4620      	mov	r0, r4
 8027876:	4629      	mov	r1, r5
 8027878:	f7f9 f80e 	bl	8020898 <__aeabi_dcmpeq>
 802787c:	b918      	cbnz	r0, 8027886 <__cvt+0x88>
 802787e:	f1c6 0601 	rsb	r6, r6, #1
 8027882:	f8ca 6000 	str.w	r6, [sl]
 8027886:	f8da 3000 	ldr.w	r3, [sl]
 802788a:	4499      	add	r9, r3
 802788c:	2200      	movs	r2, #0
 802788e:	2300      	movs	r3, #0
 8027890:	4620      	mov	r0, r4
 8027892:	4629      	mov	r1, r5
 8027894:	f7f9 f800 	bl	8020898 <__aeabi_dcmpeq>
 8027898:	b938      	cbnz	r0, 80278aa <__cvt+0xac>
 802789a:	2230      	movs	r2, #48	; 0x30
 802789c:	9b03      	ldr	r3, [sp, #12]
 802789e:	454b      	cmp	r3, r9
 80278a0:	d205      	bcs.n	80278ae <__cvt+0xb0>
 80278a2:	1c59      	adds	r1, r3, #1
 80278a4:	9103      	str	r1, [sp, #12]
 80278a6:	701a      	strb	r2, [r3, #0]
 80278a8:	e7f8      	b.n	802789c <__cvt+0x9e>
 80278aa:	f8cd 900c 	str.w	r9, [sp, #12]
 80278ae:	9b03      	ldr	r3, [sp, #12]
 80278b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80278b2:	eba3 0308 	sub.w	r3, r3, r8
 80278b6:	4640      	mov	r0, r8
 80278b8:	6013      	str	r3, [r2, #0]
 80278ba:	b004      	add	sp, #16
 80278bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080278c0 <__exponent>:
 80278c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80278c2:	2900      	cmp	r1, #0
 80278c4:	4604      	mov	r4, r0
 80278c6:	bfba      	itte	lt
 80278c8:	4249      	neglt	r1, r1
 80278ca:	232d      	movlt	r3, #45	; 0x2d
 80278cc:	232b      	movge	r3, #43	; 0x2b
 80278ce:	2909      	cmp	r1, #9
 80278d0:	f804 2b02 	strb.w	r2, [r4], #2
 80278d4:	7043      	strb	r3, [r0, #1]
 80278d6:	dd20      	ble.n	802791a <__exponent+0x5a>
 80278d8:	f10d 0307 	add.w	r3, sp, #7
 80278dc:	461f      	mov	r7, r3
 80278de:	260a      	movs	r6, #10
 80278e0:	fb91 f5f6 	sdiv	r5, r1, r6
 80278e4:	fb06 1115 	mls	r1, r6, r5, r1
 80278e8:	3130      	adds	r1, #48	; 0x30
 80278ea:	2d09      	cmp	r5, #9
 80278ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 80278f0:	f103 32ff 	add.w	r2, r3, #4294967295
 80278f4:	4629      	mov	r1, r5
 80278f6:	dc09      	bgt.n	802790c <__exponent+0x4c>
 80278f8:	3130      	adds	r1, #48	; 0x30
 80278fa:	3b02      	subs	r3, #2
 80278fc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8027900:	42bb      	cmp	r3, r7
 8027902:	4622      	mov	r2, r4
 8027904:	d304      	bcc.n	8027910 <__exponent+0x50>
 8027906:	1a10      	subs	r0, r2, r0
 8027908:	b003      	add	sp, #12
 802790a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802790c:	4613      	mov	r3, r2
 802790e:	e7e7      	b.n	80278e0 <__exponent+0x20>
 8027910:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027914:	f804 2b01 	strb.w	r2, [r4], #1
 8027918:	e7f2      	b.n	8027900 <__exponent+0x40>
 802791a:	2330      	movs	r3, #48	; 0x30
 802791c:	4419      	add	r1, r3
 802791e:	7083      	strb	r3, [r0, #2]
 8027920:	1d02      	adds	r2, r0, #4
 8027922:	70c1      	strb	r1, [r0, #3]
 8027924:	e7ef      	b.n	8027906 <__exponent+0x46>
	...

08027928 <_printf_float>:
 8027928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802792c:	b08d      	sub	sp, #52	; 0x34
 802792e:	460c      	mov	r4, r1
 8027930:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8027934:	4616      	mov	r6, r2
 8027936:	461f      	mov	r7, r3
 8027938:	4605      	mov	r5, r0
 802793a:	f001 fb8f 	bl	802905c <_localeconv_r>
 802793e:	6803      	ldr	r3, [r0, #0]
 8027940:	9304      	str	r3, [sp, #16]
 8027942:	4618      	mov	r0, r3
 8027944:	f7f8 fb7c 	bl	8020040 <strlen>
 8027948:	2300      	movs	r3, #0
 802794a:	930a      	str	r3, [sp, #40]	; 0x28
 802794c:	f8d8 3000 	ldr.w	r3, [r8]
 8027950:	9005      	str	r0, [sp, #20]
 8027952:	3307      	adds	r3, #7
 8027954:	f023 0307 	bic.w	r3, r3, #7
 8027958:	f103 0208 	add.w	r2, r3, #8
 802795c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8027960:	f8d4 b000 	ldr.w	fp, [r4]
 8027964:	f8c8 2000 	str.w	r2, [r8]
 8027968:	e9d3 2300 	ldrd	r2, r3, [r3]
 802796c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8027970:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8027974:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8027978:	9307      	str	r3, [sp, #28]
 802797a:	f8cd 8018 	str.w	r8, [sp, #24]
 802797e:	f04f 32ff 	mov.w	r2, #4294967295
 8027982:	4ba7      	ldr	r3, [pc, #668]	; (8027c20 <_printf_float+0x2f8>)
 8027984:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8027988:	f7f8 ffb8 	bl	80208fc <__aeabi_dcmpun>
 802798c:	bb70      	cbnz	r0, 80279ec <_printf_float+0xc4>
 802798e:	f04f 32ff 	mov.w	r2, #4294967295
 8027992:	4ba3      	ldr	r3, [pc, #652]	; (8027c20 <_printf_float+0x2f8>)
 8027994:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8027998:	f7f8 ff92 	bl	80208c0 <__aeabi_dcmple>
 802799c:	bb30      	cbnz	r0, 80279ec <_printf_float+0xc4>
 802799e:	2200      	movs	r2, #0
 80279a0:	2300      	movs	r3, #0
 80279a2:	4640      	mov	r0, r8
 80279a4:	4649      	mov	r1, r9
 80279a6:	f7f8 ff81 	bl	80208ac <__aeabi_dcmplt>
 80279aa:	b110      	cbz	r0, 80279b2 <_printf_float+0x8a>
 80279ac:	232d      	movs	r3, #45	; 0x2d
 80279ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80279b2:	4a9c      	ldr	r2, [pc, #624]	; (8027c24 <_printf_float+0x2fc>)
 80279b4:	4b9c      	ldr	r3, [pc, #624]	; (8027c28 <_printf_float+0x300>)
 80279b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80279ba:	bf8c      	ite	hi
 80279bc:	4690      	movhi	r8, r2
 80279be:	4698      	movls	r8, r3
 80279c0:	2303      	movs	r3, #3
 80279c2:	f02b 0204 	bic.w	r2, fp, #4
 80279c6:	6123      	str	r3, [r4, #16]
 80279c8:	6022      	str	r2, [r4, #0]
 80279ca:	f04f 0900 	mov.w	r9, #0
 80279ce:	9700      	str	r7, [sp, #0]
 80279d0:	4633      	mov	r3, r6
 80279d2:	aa0b      	add	r2, sp, #44	; 0x2c
 80279d4:	4621      	mov	r1, r4
 80279d6:	4628      	mov	r0, r5
 80279d8:	f000 f9e6 	bl	8027da8 <_printf_common>
 80279dc:	3001      	adds	r0, #1
 80279de:	f040 808d 	bne.w	8027afc <_printf_float+0x1d4>
 80279e2:	f04f 30ff 	mov.w	r0, #4294967295
 80279e6:	b00d      	add	sp, #52	; 0x34
 80279e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80279ec:	4642      	mov	r2, r8
 80279ee:	464b      	mov	r3, r9
 80279f0:	4640      	mov	r0, r8
 80279f2:	4649      	mov	r1, r9
 80279f4:	f7f8 ff82 	bl	80208fc <__aeabi_dcmpun>
 80279f8:	b110      	cbz	r0, 8027a00 <_printf_float+0xd8>
 80279fa:	4a8c      	ldr	r2, [pc, #560]	; (8027c2c <_printf_float+0x304>)
 80279fc:	4b8c      	ldr	r3, [pc, #560]	; (8027c30 <_printf_float+0x308>)
 80279fe:	e7da      	b.n	80279b6 <_printf_float+0x8e>
 8027a00:	6861      	ldr	r1, [r4, #4]
 8027a02:	1c4b      	adds	r3, r1, #1
 8027a04:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8027a08:	a80a      	add	r0, sp, #40	; 0x28
 8027a0a:	d13e      	bne.n	8027a8a <_printf_float+0x162>
 8027a0c:	2306      	movs	r3, #6
 8027a0e:	6063      	str	r3, [r4, #4]
 8027a10:	2300      	movs	r3, #0
 8027a12:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8027a16:	ab09      	add	r3, sp, #36	; 0x24
 8027a18:	9300      	str	r3, [sp, #0]
 8027a1a:	ec49 8b10 	vmov	d0, r8, r9
 8027a1e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8027a22:	6022      	str	r2, [r4, #0]
 8027a24:	f8cd a004 	str.w	sl, [sp, #4]
 8027a28:	6861      	ldr	r1, [r4, #4]
 8027a2a:	4628      	mov	r0, r5
 8027a2c:	f7ff fee7 	bl	80277fe <__cvt>
 8027a30:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8027a34:	2b47      	cmp	r3, #71	; 0x47
 8027a36:	4680      	mov	r8, r0
 8027a38:	d109      	bne.n	8027a4e <_printf_float+0x126>
 8027a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027a3c:	1cd8      	adds	r0, r3, #3
 8027a3e:	db02      	blt.n	8027a46 <_printf_float+0x11e>
 8027a40:	6862      	ldr	r2, [r4, #4]
 8027a42:	4293      	cmp	r3, r2
 8027a44:	dd47      	ble.n	8027ad6 <_printf_float+0x1ae>
 8027a46:	f1aa 0a02 	sub.w	sl, sl, #2
 8027a4a:	fa5f fa8a 	uxtb.w	sl, sl
 8027a4e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8027a52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027a54:	d824      	bhi.n	8027aa0 <_printf_float+0x178>
 8027a56:	3901      	subs	r1, #1
 8027a58:	4652      	mov	r2, sl
 8027a5a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8027a5e:	9109      	str	r1, [sp, #36]	; 0x24
 8027a60:	f7ff ff2e 	bl	80278c0 <__exponent>
 8027a64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027a66:	1813      	adds	r3, r2, r0
 8027a68:	2a01      	cmp	r2, #1
 8027a6a:	4681      	mov	r9, r0
 8027a6c:	6123      	str	r3, [r4, #16]
 8027a6e:	dc02      	bgt.n	8027a76 <_printf_float+0x14e>
 8027a70:	6822      	ldr	r2, [r4, #0]
 8027a72:	07d1      	lsls	r1, r2, #31
 8027a74:	d501      	bpl.n	8027a7a <_printf_float+0x152>
 8027a76:	3301      	adds	r3, #1
 8027a78:	6123      	str	r3, [r4, #16]
 8027a7a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8027a7e:	2b00      	cmp	r3, #0
 8027a80:	d0a5      	beq.n	80279ce <_printf_float+0xa6>
 8027a82:	232d      	movs	r3, #45	; 0x2d
 8027a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8027a88:	e7a1      	b.n	80279ce <_printf_float+0xa6>
 8027a8a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8027a8e:	f000 8177 	beq.w	8027d80 <_printf_float+0x458>
 8027a92:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8027a96:	d1bb      	bne.n	8027a10 <_printf_float+0xe8>
 8027a98:	2900      	cmp	r1, #0
 8027a9a:	d1b9      	bne.n	8027a10 <_printf_float+0xe8>
 8027a9c:	2301      	movs	r3, #1
 8027a9e:	e7b6      	b.n	8027a0e <_printf_float+0xe6>
 8027aa0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8027aa4:	d119      	bne.n	8027ada <_printf_float+0x1b2>
 8027aa6:	2900      	cmp	r1, #0
 8027aa8:	6863      	ldr	r3, [r4, #4]
 8027aaa:	dd0c      	ble.n	8027ac6 <_printf_float+0x19e>
 8027aac:	6121      	str	r1, [r4, #16]
 8027aae:	b913      	cbnz	r3, 8027ab6 <_printf_float+0x18e>
 8027ab0:	6822      	ldr	r2, [r4, #0]
 8027ab2:	07d2      	lsls	r2, r2, #31
 8027ab4:	d502      	bpl.n	8027abc <_printf_float+0x194>
 8027ab6:	3301      	adds	r3, #1
 8027ab8:	440b      	add	r3, r1
 8027aba:	6123      	str	r3, [r4, #16]
 8027abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027abe:	65a3      	str	r3, [r4, #88]	; 0x58
 8027ac0:	f04f 0900 	mov.w	r9, #0
 8027ac4:	e7d9      	b.n	8027a7a <_printf_float+0x152>
 8027ac6:	b913      	cbnz	r3, 8027ace <_printf_float+0x1a6>
 8027ac8:	6822      	ldr	r2, [r4, #0]
 8027aca:	07d0      	lsls	r0, r2, #31
 8027acc:	d501      	bpl.n	8027ad2 <_printf_float+0x1aa>
 8027ace:	3302      	adds	r3, #2
 8027ad0:	e7f3      	b.n	8027aba <_printf_float+0x192>
 8027ad2:	2301      	movs	r3, #1
 8027ad4:	e7f1      	b.n	8027aba <_printf_float+0x192>
 8027ad6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8027ada:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8027ade:	4293      	cmp	r3, r2
 8027ae0:	db05      	blt.n	8027aee <_printf_float+0x1c6>
 8027ae2:	6822      	ldr	r2, [r4, #0]
 8027ae4:	6123      	str	r3, [r4, #16]
 8027ae6:	07d1      	lsls	r1, r2, #31
 8027ae8:	d5e8      	bpl.n	8027abc <_printf_float+0x194>
 8027aea:	3301      	adds	r3, #1
 8027aec:	e7e5      	b.n	8027aba <_printf_float+0x192>
 8027aee:	2b00      	cmp	r3, #0
 8027af0:	bfd4      	ite	le
 8027af2:	f1c3 0302 	rsble	r3, r3, #2
 8027af6:	2301      	movgt	r3, #1
 8027af8:	4413      	add	r3, r2
 8027afa:	e7de      	b.n	8027aba <_printf_float+0x192>
 8027afc:	6823      	ldr	r3, [r4, #0]
 8027afe:	055a      	lsls	r2, r3, #21
 8027b00:	d407      	bmi.n	8027b12 <_printf_float+0x1ea>
 8027b02:	6923      	ldr	r3, [r4, #16]
 8027b04:	4642      	mov	r2, r8
 8027b06:	4631      	mov	r1, r6
 8027b08:	4628      	mov	r0, r5
 8027b0a:	47b8      	blx	r7
 8027b0c:	3001      	adds	r0, #1
 8027b0e:	d12b      	bne.n	8027b68 <_printf_float+0x240>
 8027b10:	e767      	b.n	80279e2 <_printf_float+0xba>
 8027b12:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8027b16:	f240 80dc 	bls.w	8027cd2 <_printf_float+0x3aa>
 8027b1a:	2200      	movs	r2, #0
 8027b1c:	2300      	movs	r3, #0
 8027b1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8027b22:	f7f8 feb9 	bl	8020898 <__aeabi_dcmpeq>
 8027b26:	2800      	cmp	r0, #0
 8027b28:	d033      	beq.n	8027b92 <_printf_float+0x26a>
 8027b2a:	2301      	movs	r3, #1
 8027b2c:	4a41      	ldr	r2, [pc, #260]	; (8027c34 <_printf_float+0x30c>)
 8027b2e:	4631      	mov	r1, r6
 8027b30:	4628      	mov	r0, r5
 8027b32:	47b8      	blx	r7
 8027b34:	3001      	adds	r0, #1
 8027b36:	f43f af54 	beq.w	80279e2 <_printf_float+0xba>
 8027b3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8027b3e:	429a      	cmp	r2, r3
 8027b40:	db02      	blt.n	8027b48 <_printf_float+0x220>
 8027b42:	6823      	ldr	r3, [r4, #0]
 8027b44:	07d8      	lsls	r0, r3, #31
 8027b46:	d50f      	bpl.n	8027b68 <_printf_float+0x240>
 8027b48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8027b4c:	4631      	mov	r1, r6
 8027b4e:	4628      	mov	r0, r5
 8027b50:	47b8      	blx	r7
 8027b52:	3001      	adds	r0, #1
 8027b54:	f43f af45 	beq.w	80279e2 <_printf_float+0xba>
 8027b58:	f04f 0800 	mov.w	r8, #0
 8027b5c:	f104 091a 	add.w	r9, r4, #26
 8027b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027b62:	3b01      	subs	r3, #1
 8027b64:	4543      	cmp	r3, r8
 8027b66:	dc09      	bgt.n	8027b7c <_printf_float+0x254>
 8027b68:	6823      	ldr	r3, [r4, #0]
 8027b6a:	079b      	lsls	r3, r3, #30
 8027b6c:	f100 8103 	bmi.w	8027d76 <_printf_float+0x44e>
 8027b70:	68e0      	ldr	r0, [r4, #12]
 8027b72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027b74:	4298      	cmp	r0, r3
 8027b76:	bfb8      	it	lt
 8027b78:	4618      	movlt	r0, r3
 8027b7a:	e734      	b.n	80279e6 <_printf_float+0xbe>
 8027b7c:	2301      	movs	r3, #1
 8027b7e:	464a      	mov	r2, r9
 8027b80:	4631      	mov	r1, r6
 8027b82:	4628      	mov	r0, r5
 8027b84:	47b8      	blx	r7
 8027b86:	3001      	adds	r0, #1
 8027b88:	f43f af2b 	beq.w	80279e2 <_printf_float+0xba>
 8027b8c:	f108 0801 	add.w	r8, r8, #1
 8027b90:	e7e6      	b.n	8027b60 <_printf_float+0x238>
 8027b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027b94:	2b00      	cmp	r3, #0
 8027b96:	dc2b      	bgt.n	8027bf0 <_printf_float+0x2c8>
 8027b98:	2301      	movs	r3, #1
 8027b9a:	4a26      	ldr	r2, [pc, #152]	; (8027c34 <_printf_float+0x30c>)
 8027b9c:	4631      	mov	r1, r6
 8027b9e:	4628      	mov	r0, r5
 8027ba0:	47b8      	blx	r7
 8027ba2:	3001      	adds	r0, #1
 8027ba4:	f43f af1d 	beq.w	80279e2 <_printf_float+0xba>
 8027ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027baa:	b923      	cbnz	r3, 8027bb6 <_printf_float+0x28e>
 8027bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027bae:	b913      	cbnz	r3, 8027bb6 <_printf_float+0x28e>
 8027bb0:	6823      	ldr	r3, [r4, #0]
 8027bb2:	07d9      	lsls	r1, r3, #31
 8027bb4:	d5d8      	bpl.n	8027b68 <_printf_float+0x240>
 8027bb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8027bba:	4631      	mov	r1, r6
 8027bbc:	4628      	mov	r0, r5
 8027bbe:	47b8      	blx	r7
 8027bc0:	3001      	adds	r0, #1
 8027bc2:	f43f af0e 	beq.w	80279e2 <_printf_float+0xba>
 8027bc6:	f04f 0900 	mov.w	r9, #0
 8027bca:	f104 0a1a 	add.w	sl, r4, #26
 8027bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027bd0:	425b      	negs	r3, r3
 8027bd2:	454b      	cmp	r3, r9
 8027bd4:	dc01      	bgt.n	8027bda <_printf_float+0x2b2>
 8027bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027bd8:	e794      	b.n	8027b04 <_printf_float+0x1dc>
 8027bda:	2301      	movs	r3, #1
 8027bdc:	4652      	mov	r2, sl
 8027bde:	4631      	mov	r1, r6
 8027be0:	4628      	mov	r0, r5
 8027be2:	47b8      	blx	r7
 8027be4:	3001      	adds	r0, #1
 8027be6:	f43f aefc 	beq.w	80279e2 <_printf_float+0xba>
 8027bea:	f109 0901 	add.w	r9, r9, #1
 8027bee:	e7ee      	b.n	8027bce <_printf_float+0x2a6>
 8027bf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027bf2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8027bf4:	429a      	cmp	r2, r3
 8027bf6:	bfa8      	it	ge
 8027bf8:	461a      	movge	r2, r3
 8027bfa:	2a00      	cmp	r2, #0
 8027bfc:	4691      	mov	r9, r2
 8027bfe:	dd07      	ble.n	8027c10 <_printf_float+0x2e8>
 8027c00:	4613      	mov	r3, r2
 8027c02:	4631      	mov	r1, r6
 8027c04:	4642      	mov	r2, r8
 8027c06:	4628      	mov	r0, r5
 8027c08:	47b8      	blx	r7
 8027c0a:	3001      	adds	r0, #1
 8027c0c:	f43f aee9 	beq.w	80279e2 <_printf_float+0xba>
 8027c10:	f104 031a 	add.w	r3, r4, #26
 8027c14:	f04f 0b00 	mov.w	fp, #0
 8027c18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8027c1c:	9306      	str	r3, [sp, #24]
 8027c1e:	e015      	b.n	8027c4c <_printf_float+0x324>
 8027c20:	7fefffff 	.word	0x7fefffff
 8027c24:	08029a80 	.word	0x08029a80
 8027c28:	08029a7c 	.word	0x08029a7c
 8027c2c:	08029a88 	.word	0x08029a88
 8027c30:	08029a84 	.word	0x08029a84
 8027c34:	08029a8c 	.word	0x08029a8c
 8027c38:	2301      	movs	r3, #1
 8027c3a:	9a06      	ldr	r2, [sp, #24]
 8027c3c:	4631      	mov	r1, r6
 8027c3e:	4628      	mov	r0, r5
 8027c40:	47b8      	blx	r7
 8027c42:	3001      	adds	r0, #1
 8027c44:	f43f aecd 	beq.w	80279e2 <_printf_float+0xba>
 8027c48:	f10b 0b01 	add.w	fp, fp, #1
 8027c4c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8027c50:	ebaa 0309 	sub.w	r3, sl, r9
 8027c54:	455b      	cmp	r3, fp
 8027c56:	dcef      	bgt.n	8027c38 <_printf_float+0x310>
 8027c58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8027c5c:	429a      	cmp	r2, r3
 8027c5e:	44d0      	add	r8, sl
 8027c60:	db15      	blt.n	8027c8e <_printf_float+0x366>
 8027c62:	6823      	ldr	r3, [r4, #0]
 8027c64:	07da      	lsls	r2, r3, #31
 8027c66:	d412      	bmi.n	8027c8e <_printf_float+0x366>
 8027c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027c6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8027c6c:	eba3 020a 	sub.w	r2, r3, sl
 8027c70:	eba3 0a01 	sub.w	sl, r3, r1
 8027c74:	4592      	cmp	sl, r2
 8027c76:	bfa8      	it	ge
 8027c78:	4692      	movge	sl, r2
 8027c7a:	f1ba 0f00 	cmp.w	sl, #0
 8027c7e:	dc0e      	bgt.n	8027c9e <_printf_float+0x376>
 8027c80:	f04f 0800 	mov.w	r8, #0
 8027c84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8027c88:	f104 091a 	add.w	r9, r4, #26
 8027c8c:	e019      	b.n	8027cc2 <_printf_float+0x39a>
 8027c8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8027c92:	4631      	mov	r1, r6
 8027c94:	4628      	mov	r0, r5
 8027c96:	47b8      	blx	r7
 8027c98:	3001      	adds	r0, #1
 8027c9a:	d1e5      	bne.n	8027c68 <_printf_float+0x340>
 8027c9c:	e6a1      	b.n	80279e2 <_printf_float+0xba>
 8027c9e:	4653      	mov	r3, sl
 8027ca0:	4642      	mov	r2, r8
 8027ca2:	4631      	mov	r1, r6
 8027ca4:	4628      	mov	r0, r5
 8027ca6:	47b8      	blx	r7
 8027ca8:	3001      	adds	r0, #1
 8027caa:	d1e9      	bne.n	8027c80 <_printf_float+0x358>
 8027cac:	e699      	b.n	80279e2 <_printf_float+0xba>
 8027cae:	2301      	movs	r3, #1
 8027cb0:	464a      	mov	r2, r9
 8027cb2:	4631      	mov	r1, r6
 8027cb4:	4628      	mov	r0, r5
 8027cb6:	47b8      	blx	r7
 8027cb8:	3001      	adds	r0, #1
 8027cba:	f43f ae92 	beq.w	80279e2 <_printf_float+0xba>
 8027cbe:	f108 0801 	add.w	r8, r8, #1
 8027cc2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8027cc6:	1a9b      	subs	r3, r3, r2
 8027cc8:	eba3 030a 	sub.w	r3, r3, sl
 8027ccc:	4543      	cmp	r3, r8
 8027cce:	dcee      	bgt.n	8027cae <_printf_float+0x386>
 8027cd0:	e74a      	b.n	8027b68 <_printf_float+0x240>
 8027cd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027cd4:	2a01      	cmp	r2, #1
 8027cd6:	dc01      	bgt.n	8027cdc <_printf_float+0x3b4>
 8027cd8:	07db      	lsls	r3, r3, #31
 8027cda:	d53a      	bpl.n	8027d52 <_printf_float+0x42a>
 8027cdc:	2301      	movs	r3, #1
 8027cde:	4642      	mov	r2, r8
 8027ce0:	4631      	mov	r1, r6
 8027ce2:	4628      	mov	r0, r5
 8027ce4:	47b8      	blx	r7
 8027ce6:	3001      	adds	r0, #1
 8027ce8:	f43f ae7b 	beq.w	80279e2 <_printf_float+0xba>
 8027cec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8027cf0:	4631      	mov	r1, r6
 8027cf2:	4628      	mov	r0, r5
 8027cf4:	47b8      	blx	r7
 8027cf6:	3001      	adds	r0, #1
 8027cf8:	f108 0801 	add.w	r8, r8, #1
 8027cfc:	f43f ae71 	beq.w	80279e2 <_printf_float+0xba>
 8027d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027d02:	2200      	movs	r2, #0
 8027d04:	f103 3aff 	add.w	sl, r3, #4294967295
 8027d08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8027d0c:	2300      	movs	r3, #0
 8027d0e:	f7f8 fdc3 	bl	8020898 <__aeabi_dcmpeq>
 8027d12:	b9c8      	cbnz	r0, 8027d48 <_printf_float+0x420>
 8027d14:	4653      	mov	r3, sl
 8027d16:	4642      	mov	r2, r8
 8027d18:	4631      	mov	r1, r6
 8027d1a:	4628      	mov	r0, r5
 8027d1c:	47b8      	blx	r7
 8027d1e:	3001      	adds	r0, #1
 8027d20:	d10e      	bne.n	8027d40 <_printf_float+0x418>
 8027d22:	e65e      	b.n	80279e2 <_printf_float+0xba>
 8027d24:	2301      	movs	r3, #1
 8027d26:	4652      	mov	r2, sl
 8027d28:	4631      	mov	r1, r6
 8027d2a:	4628      	mov	r0, r5
 8027d2c:	47b8      	blx	r7
 8027d2e:	3001      	adds	r0, #1
 8027d30:	f43f ae57 	beq.w	80279e2 <_printf_float+0xba>
 8027d34:	f108 0801 	add.w	r8, r8, #1
 8027d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027d3a:	3b01      	subs	r3, #1
 8027d3c:	4543      	cmp	r3, r8
 8027d3e:	dcf1      	bgt.n	8027d24 <_printf_float+0x3fc>
 8027d40:	464b      	mov	r3, r9
 8027d42:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8027d46:	e6de      	b.n	8027b06 <_printf_float+0x1de>
 8027d48:	f04f 0800 	mov.w	r8, #0
 8027d4c:	f104 0a1a 	add.w	sl, r4, #26
 8027d50:	e7f2      	b.n	8027d38 <_printf_float+0x410>
 8027d52:	2301      	movs	r3, #1
 8027d54:	e7df      	b.n	8027d16 <_printf_float+0x3ee>
 8027d56:	2301      	movs	r3, #1
 8027d58:	464a      	mov	r2, r9
 8027d5a:	4631      	mov	r1, r6
 8027d5c:	4628      	mov	r0, r5
 8027d5e:	47b8      	blx	r7
 8027d60:	3001      	adds	r0, #1
 8027d62:	f43f ae3e 	beq.w	80279e2 <_printf_float+0xba>
 8027d66:	f108 0801 	add.w	r8, r8, #1
 8027d6a:	68e3      	ldr	r3, [r4, #12]
 8027d6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027d6e:	1a9b      	subs	r3, r3, r2
 8027d70:	4543      	cmp	r3, r8
 8027d72:	dcf0      	bgt.n	8027d56 <_printf_float+0x42e>
 8027d74:	e6fc      	b.n	8027b70 <_printf_float+0x248>
 8027d76:	f04f 0800 	mov.w	r8, #0
 8027d7a:	f104 0919 	add.w	r9, r4, #25
 8027d7e:	e7f4      	b.n	8027d6a <_printf_float+0x442>
 8027d80:	2900      	cmp	r1, #0
 8027d82:	f43f ae8b 	beq.w	8027a9c <_printf_float+0x174>
 8027d86:	2300      	movs	r3, #0
 8027d88:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8027d8c:	ab09      	add	r3, sp, #36	; 0x24
 8027d8e:	9300      	str	r3, [sp, #0]
 8027d90:	ec49 8b10 	vmov	d0, r8, r9
 8027d94:	6022      	str	r2, [r4, #0]
 8027d96:	f8cd a004 	str.w	sl, [sp, #4]
 8027d9a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8027d9e:	4628      	mov	r0, r5
 8027da0:	f7ff fd2d 	bl	80277fe <__cvt>
 8027da4:	4680      	mov	r8, r0
 8027da6:	e648      	b.n	8027a3a <_printf_float+0x112>

08027da8 <_printf_common>:
 8027da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027dac:	4691      	mov	r9, r2
 8027dae:	461f      	mov	r7, r3
 8027db0:	688a      	ldr	r2, [r1, #8]
 8027db2:	690b      	ldr	r3, [r1, #16]
 8027db4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8027db8:	4293      	cmp	r3, r2
 8027dba:	bfb8      	it	lt
 8027dbc:	4613      	movlt	r3, r2
 8027dbe:	f8c9 3000 	str.w	r3, [r9]
 8027dc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8027dc6:	4606      	mov	r6, r0
 8027dc8:	460c      	mov	r4, r1
 8027dca:	b112      	cbz	r2, 8027dd2 <_printf_common+0x2a>
 8027dcc:	3301      	adds	r3, #1
 8027dce:	f8c9 3000 	str.w	r3, [r9]
 8027dd2:	6823      	ldr	r3, [r4, #0]
 8027dd4:	0699      	lsls	r1, r3, #26
 8027dd6:	bf42      	ittt	mi
 8027dd8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8027ddc:	3302      	addmi	r3, #2
 8027dde:	f8c9 3000 	strmi.w	r3, [r9]
 8027de2:	6825      	ldr	r5, [r4, #0]
 8027de4:	f015 0506 	ands.w	r5, r5, #6
 8027de8:	d107      	bne.n	8027dfa <_printf_common+0x52>
 8027dea:	f104 0a19 	add.w	sl, r4, #25
 8027dee:	68e3      	ldr	r3, [r4, #12]
 8027df0:	f8d9 2000 	ldr.w	r2, [r9]
 8027df4:	1a9b      	subs	r3, r3, r2
 8027df6:	42ab      	cmp	r3, r5
 8027df8:	dc28      	bgt.n	8027e4c <_printf_common+0xa4>
 8027dfa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8027dfe:	6822      	ldr	r2, [r4, #0]
 8027e00:	3300      	adds	r3, #0
 8027e02:	bf18      	it	ne
 8027e04:	2301      	movne	r3, #1
 8027e06:	0692      	lsls	r2, r2, #26
 8027e08:	d42d      	bmi.n	8027e66 <_printf_common+0xbe>
 8027e0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8027e0e:	4639      	mov	r1, r7
 8027e10:	4630      	mov	r0, r6
 8027e12:	47c0      	blx	r8
 8027e14:	3001      	adds	r0, #1
 8027e16:	d020      	beq.n	8027e5a <_printf_common+0xb2>
 8027e18:	6823      	ldr	r3, [r4, #0]
 8027e1a:	68e5      	ldr	r5, [r4, #12]
 8027e1c:	f8d9 2000 	ldr.w	r2, [r9]
 8027e20:	f003 0306 	and.w	r3, r3, #6
 8027e24:	2b04      	cmp	r3, #4
 8027e26:	bf08      	it	eq
 8027e28:	1aad      	subeq	r5, r5, r2
 8027e2a:	68a3      	ldr	r3, [r4, #8]
 8027e2c:	6922      	ldr	r2, [r4, #16]
 8027e2e:	bf0c      	ite	eq
 8027e30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8027e34:	2500      	movne	r5, #0
 8027e36:	4293      	cmp	r3, r2
 8027e38:	bfc4      	itt	gt
 8027e3a:	1a9b      	subgt	r3, r3, r2
 8027e3c:	18ed      	addgt	r5, r5, r3
 8027e3e:	f04f 0900 	mov.w	r9, #0
 8027e42:	341a      	adds	r4, #26
 8027e44:	454d      	cmp	r5, r9
 8027e46:	d11a      	bne.n	8027e7e <_printf_common+0xd6>
 8027e48:	2000      	movs	r0, #0
 8027e4a:	e008      	b.n	8027e5e <_printf_common+0xb6>
 8027e4c:	2301      	movs	r3, #1
 8027e4e:	4652      	mov	r2, sl
 8027e50:	4639      	mov	r1, r7
 8027e52:	4630      	mov	r0, r6
 8027e54:	47c0      	blx	r8
 8027e56:	3001      	adds	r0, #1
 8027e58:	d103      	bne.n	8027e62 <_printf_common+0xba>
 8027e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8027e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027e62:	3501      	adds	r5, #1
 8027e64:	e7c3      	b.n	8027dee <_printf_common+0x46>
 8027e66:	18e1      	adds	r1, r4, r3
 8027e68:	1c5a      	adds	r2, r3, #1
 8027e6a:	2030      	movs	r0, #48	; 0x30
 8027e6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8027e70:	4422      	add	r2, r4
 8027e72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8027e76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8027e7a:	3302      	adds	r3, #2
 8027e7c:	e7c5      	b.n	8027e0a <_printf_common+0x62>
 8027e7e:	2301      	movs	r3, #1
 8027e80:	4622      	mov	r2, r4
 8027e82:	4639      	mov	r1, r7
 8027e84:	4630      	mov	r0, r6
 8027e86:	47c0      	blx	r8
 8027e88:	3001      	adds	r0, #1
 8027e8a:	d0e6      	beq.n	8027e5a <_printf_common+0xb2>
 8027e8c:	f109 0901 	add.w	r9, r9, #1
 8027e90:	e7d8      	b.n	8027e44 <_printf_common+0x9c>
	...

08027e94 <_puts_r>:
 8027e94:	b570      	push	{r4, r5, r6, lr}
 8027e96:	460e      	mov	r6, r1
 8027e98:	4605      	mov	r5, r0
 8027e9a:	b118      	cbz	r0, 8027ea4 <_puts_r+0x10>
 8027e9c:	6983      	ldr	r3, [r0, #24]
 8027e9e:	b90b      	cbnz	r3, 8027ea4 <_puts_r+0x10>
 8027ea0:	f001 f852 	bl	8028f48 <__sinit>
 8027ea4:	69ab      	ldr	r3, [r5, #24]
 8027ea6:	68ac      	ldr	r4, [r5, #8]
 8027ea8:	b913      	cbnz	r3, 8027eb0 <_puts_r+0x1c>
 8027eaa:	4628      	mov	r0, r5
 8027eac:	f001 f84c 	bl	8028f48 <__sinit>
 8027eb0:	4b23      	ldr	r3, [pc, #140]	; (8027f40 <_puts_r+0xac>)
 8027eb2:	429c      	cmp	r4, r3
 8027eb4:	d117      	bne.n	8027ee6 <_puts_r+0x52>
 8027eb6:	686c      	ldr	r4, [r5, #4]
 8027eb8:	89a3      	ldrh	r3, [r4, #12]
 8027eba:	071b      	lsls	r3, r3, #28
 8027ebc:	d51d      	bpl.n	8027efa <_puts_r+0x66>
 8027ebe:	6923      	ldr	r3, [r4, #16]
 8027ec0:	b1db      	cbz	r3, 8027efa <_puts_r+0x66>
 8027ec2:	3e01      	subs	r6, #1
 8027ec4:	68a3      	ldr	r3, [r4, #8]
 8027ec6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8027eca:	3b01      	subs	r3, #1
 8027ecc:	60a3      	str	r3, [r4, #8]
 8027ece:	b9e9      	cbnz	r1, 8027f0c <_puts_r+0x78>
 8027ed0:	2b00      	cmp	r3, #0
 8027ed2:	da2e      	bge.n	8027f32 <_puts_r+0x9e>
 8027ed4:	4622      	mov	r2, r4
 8027ed6:	210a      	movs	r1, #10
 8027ed8:	4628      	mov	r0, r5
 8027eda:	f000 f83f 	bl	8027f5c <__swbuf_r>
 8027ede:	3001      	adds	r0, #1
 8027ee0:	d011      	beq.n	8027f06 <_puts_r+0x72>
 8027ee2:	200a      	movs	r0, #10
 8027ee4:	e011      	b.n	8027f0a <_puts_r+0x76>
 8027ee6:	4b17      	ldr	r3, [pc, #92]	; (8027f44 <_puts_r+0xb0>)
 8027ee8:	429c      	cmp	r4, r3
 8027eea:	d101      	bne.n	8027ef0 <_puts_r+0x5c>
 8027eec:	68ac      	ldr	r4, [r5, #8]
 8027eee:	e7e3      	b.n	8027eb8 <_puts_r+0x24>
 8027ef0:	4b15      	ldr	r3, [pc, #84]	; (8027f48 <_puts_r+0xb4>)
 8027ef2:	429c      	cmp	r4, r3
 8027ef4:	bf08      	it	eq
 8027ef6:	68ec      	ldreq	r4, [r5, #12]
 8027ef8:	e7de      	b.n	8027eb8 <_puts_r+0x24>
 8027efa:	4621      	mov	r1, r4
 8027efc:	4628      	mov	r0, r5
 8027efe:	f000 f87f 	bl	8028000 <__swsetup_r>
 8027f02:	2800      	cmp	r0, #0
 8027f04:	d0dd      	beq.n	8027ec2 <_puts_r+0x2e>
 8027f06:	f04f 30ff 	mov.w	r0, #4294967295
 8027f0a:	bd70      	pop	{r4, r5, r6, pc}
 8027f0c:	2b00      	cmp	r3, #0
 8027f0e:	da04      	bge.n	8027f1a <_puts_r+0x86>
 8027f10:	69a2      	ldr	r2, [r4, #24]
 8027f12:	429a      	cmp	r2, r3
 8027f14:	dc06      	bgt.n	8027f24 <_puts_r+0x90>
 8027f16:	290a      	cmp	r1, #10
 8027f18:	d004      	beq.n	8027f24 <_puts_r+0x90>
 8027f1a:	6823      	ldr	r3, [r4, #0]
 8027f1c:	1c5a      	adds	r2, r3, #1
 8027f1e:	6022      	str	r2, [r4, #0]
 8027f20:	7019      	strb	r1, [r3, #0]
 8027f22:	e7cf      	b.n	8027ec4 <_puts_r+0x30>
 8027f24:	4622      	mov	r2, r4
 8027f26:	4628      	mov	r0, r5
 8027f28:	f000 f818 	bl	8027f5c <__swbuf_r>
 8027f2c:	3001      	adds	r0, #1
 8027f2e:	d1c9      	bne.n	8027ec4 <_puts_r+0x30>
 8027f30:	e7e9      	b.n	8027f06 <_puts_r+0x72>
 8027f32:	6823      	ldr	r3, [r4, #0]
 8027f34:	200a      	movs	r0, #10
 8027f36:	1c5a      	adds	r2, r3, #1
 8027f38:	6022      	str	r2, [r4, #0]
 8027f3a:	7018      	strb	r0, [r3, #0]
 8027f3c:	e7e5      	b.n	8027f0a <_puts_r+0x76>
 8027f3e:	bf00      	nop
 8027f40:	08029abc 	.word	0x08029abc
 8027f44:	08029adc 	.word	0x08029adc
 8027f48:	08029a9c 	.word	0x08029a9c

08027f4c <puts>:
 8027f4c:	4b02      	ldr	r3, [pc, #8]	; (8027f58 <puts+0xc>)
 8027f4e:	4601      	mov	r1, r0
 8027f50:	6818      	ldr	r0, [r3, #0]
 8027f52:	f7ff bf9f 	b.w	8027e94 <_puts_r>
 8027f56:	bf00      	nop
 8027f58:	2000000c 	.word	0x2000000c

08027f5c <__swbuf_r>:
 8027f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027f5e:	460e      	mov	r6, r1
 8027f60:	4614      	mov	r4, r2
 8027f62:	4605      	mov	r5, r0
 8027f64:	b118      	cbz	r0, 8027f6e <__swbuf_r+0x12>
 8027f66:	6983      	ldr	r3, [r0, #24]
 8027f68:	b90b      	cbnz	r3, 8027f6e <__swbuf_r+0x12>
 8027f6a:	f000 ffed 	bl	8028f48 <__sinit>
 8027f6e:	4b21      	ldr	r3, [pc, #132]	; (8027ff4 <__swbuf_r+0x98>)
 8027f70:	429c      	cmp	r4, r3
 8027f72:	d12a      	bne.n	8027fca <__swbuf_r+0x6e>
 8027f74:	686c      	ldr	r4, [r5, #4]
 8027f76:	69a3      	ldr	r3, [r4, #24]
 8027f78:	60a3      	str	r3, [r4, #8]
 8027f7a:	89a3      	ldrh	r3, [r4, #12]
 8027f7c:	071a      	lsls	r2, r3, #28
 8027f7e:	d52e      	bpl.n	8027fde <__swbuf_r+0x82>
 8027f80:	6923      	ldr	r3, [r4, #16]
 8027f82:	b363      	cbz	r3, 8027fde <__swbuf_r+0x82>
 8027f84:	6923      	ldr	r3, [r4, #16]
 8027f86:	6820      	ldr	r0, [r4, #0]
 8027f88:	1ac0      	subs	r0, r0, r3
 8027f8a:	6963      	ldr	r3, [r4, #20]
 8027f8c:	b2f6      	uxtb	r6, r6
 8027f8e:	4283      	cmp	r3, r0
 8027f90:	4637      	mov	r7, r6
 8027f92:	dc04      	bgt.n	8027f9e <__swbuf_r+0x42>
 8027f94:	4621      	mov	r1, r4
 8027f96:	4628      	mov	r0, r5
 8027f98:	f000 ff6c 	bl	8028e74 <_fflush_r>
 8027f9c:	bb28      	cbnz	r0, 8027fea <__swbuf_r+0x8e>
 8027f9e:	68a3      	ldr	r3, [r4, #8]
 8027fa0:	3b01      	subs	r3, #1
 8027fa2:	60a3      	str	r3, [r4, #8]
 8027fa4:	6823      	ldr	r3, [r4, #0]
 8027fa6:	1c5a      	adds	r2, r3, #1
 8027fa8:	6022      	str	r2, [r4, #0]
 8027faa:	701e      	strb	r6, [r3, #0]
 8027fac:	6963      	ldr	r3, [r4, #20]
 8027fae:	3001      	adds	r0, #1
 8027fb0:	4283      	cmp	r3, r0
 8027fb2:	d004      	beq.n	8027fbe <__swbuf_r+0x62>
 8027fb4:	89a3      	ldrh	r3, [r4, #12]
 8027fb6:	07db      	lsls	r3, r3, #31
 8027fb8:	d519      	bpl.n	8027fee <__swbuf_r+0x92>
 8027fba:	2e0a      	cmp	r6, #10
 8027fbc:	d117      	bne.n	8027fee <__swbuf_r+0x92>
 8027fbe:	4621      	mov	r1, r4
 8027fc0:	4628      	mov	r0, r5
 8027fc2:	f000 ff57 	bl	8028e74 <_fflush_r>
 8027fc6:	b190      	cbz	r0, 8027fee <__swbuf_r+0x92>
 8027fc8:	e00f      	b.n	8027fea <__swbuf_r+0x8e>
 8027fca:	4b0b      	ldr	r3, [pc, #44]	; (8027ff8 <__swbuf_r+0x9c>)
 8027fcc:	429c      	cmp	r4, r3
 8027fce:	d101      	bne.n	8027fd4 <__swbuf_r+0x78>
 8027fd0:	68ac      	ldr	r4, [r5, #8]
 8027fd2:	e7d0      	b.n	8027f76 <__swbuf_r+0x1a>
 8027fd4:	4b09      	ldr	r3, [pc, #36]	; (8027ffc <__swbuf_r+0xa0>)
 8027fd6:	429c      	cmp	r4, r3
 8027fd8:	bf08      	it	eq
 8027fda:	68ec      	ldreq	r4, [r5, #12]
 8027fdc:	e7cb      	b.n	8027f76 <__swbuf_r+0x1a>
 8027fde:	4621      	mov	r1, r4
 8027fe0:	4628      	mov	r0, r5
 8027fe2:	f000 f80d 	bl	8028000 <__swsetup_r>
 8027fe6:	2800      	cmp	r0, #0
 8027fe8:	d0cc      	beq.n	8027f84 <__swbuf_r+0x28>
 8027fea:	f04f 37ff 	mov.w	r7, #4294967295
 8027fee:	4638      	mov	r0, r7
 8027ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027ff2:	bf00      	nop
 8027ff4:	08029abc 	.word	0x08029abc
 8027ff8:	08029adc 	.word	0x08029adc
 8027ffc:	08029a9c 	.word	0x08029a9c

08028000 <__swsetup_r>:
 8028000:	4b32      	ldr	r3, [pc, #200]	; (80280cc <__swsetup_r+0xcc>)
 8028002:	b570      	push	{r4, r5, r6, lr}
 8028004:	681d      	ldr	r5, [r3, #0]
 8028006:	4606      	mov	r6, r0
 8028008:	460c      	mov	r4, r1
 802800a:	b125      	cbz	r5, 8028016 <__swsetup_r+0x16>
 802800c:	69ab      	ldr	r3, [r5, #24]
 802800e:	b913      	cbnz	r3, 8028016 <__swsetup_r+0x16>
 8028010:	4628      	mov	r0, r5
 8028012:	f000 ff99 	bl	8028f48 <__sinit>
 8028016:	4b2e      	ldr	r3, [pc, #184]	; (80280d0 <__swsetup_r+0xd0>)
 8028018:	429c      	cmp	r4, r3
 802801a:	d10f      	bne.n	802803c <__swsetup_r+0x3c>
 802801c:	686c      	ldr	r4, [r5, #4]
 802801e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028022:	b29a      	uxth	r2, r3
 8028024:	0715      	lsls	r5, r2, #28
 8028026:	d42c      	bmi.n	8028082 <__swsetup_r+0x82>
 8028028:	06d0      	lsls	r0, r2, #27
 802802a:	d411      	bmi.n	8028050 <__swsetup_r+0x50>
 802802c:	2209      	movs	r2, #9
 802802e:	6032      	str	r2, [r6, #0]
 8028030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028034:	81a3      	strh	r3, [r4, #12]
 8028036:	f04f 30ff 	mov.w	r0, #4294967295
 802803a:	e03e      	b.n	80280ba <__swsetup_r+0xba>
 802803c:	4b25      	ldr	r3, [pc, #148]	; (80280d4 <__swsetup_r+0xd4>)
 802803e:	429c      	cmp	r4, r3
 8028040:	d101      	bne.n	8028046 <__swsetup_r+0x46>
 8028042:	68ac      	ldr	r4, [r5, #8]
 8028044:	e7eb      	b.n	802801e <__swsetup_r+0x1e>
 8028046:	4b24      	ldr	r3, [pc, #144]	; (80280d8 <__swsetup_r+0xd8>)
 8028048:	429c      	cmp	r4, r3
 802804a:	bf08      	it	eq
 802804c:	68ec      	ldreq	r4, [r5, #12]
 802804e:	e7e6      	b.n	802801e <__swsetup_r+0x1e>
 8028050:	0751      	lsls	r1, r2, #29
 8028052:	d512      	bpl.n	802807a <__swsetup_r+0x7a>
 8028054:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028056:	b141      	cbz	r1, 802806a <__swsetup_r+0x6a>
 8028058:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802805c:	4299      	cmp	r1, r3
 802805e:	d002      	beq.n	8028066 <__swsetup_r+0x66>
 8028060:	4630      	mov	r0, r6
 8028062:	f001 fb5f 	bl	8029724 <_free_r>
 8028066:	2300      	movs	r3, #0
 8028068:	6363      	str	r3, [r4, #52]	; 0x34
 802806a:	89a3      	ldrh	r3, [r4, #12]
 802806c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8028070:	81a3      	strh	r3, [r4, #12]
 8028072:	2300      	movs	r3, #0
 8028074:	6063      	str	r3, [r4, #4]
 8028076:	6923      	ldr	r3, [r4, #16]
 8028078:	6023      	str	r3, [r4, #0]
 802807a:	89a3      	ldrh	r3, [r4, #12]
 802807c:	f043 0308 	orr.w	r3, r3, #8
 8028080:	81a3      	strh	r3, [r4, #12]
 8028082:	6923      	ldr	r3, [r4, #16]
 8028084:	b94b      	cbnz	r3, 802809a <__swsetup_r+0x9a>
 8028086:	89a3      	ldrh	r3, [r4, #12]
 8028088:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802808c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8028090:	d003      	beq.n	802809a <__swsetup_r+0x9a>
 8028092:	4621      	mov	r1, r4
 8028094:	4630      	mov	r0, r6
 8028096:	f001 f813 	bl	80290c0 <__smakebuf_r>
 802809a:	89a2      	ldrh	r2, [r4, #12]
 802809c:	f012 0301 	ands.w	r3, r2, #1
 80280a0:	d00c      	beq.n	80280bc <__swsetup_r+0xbc>
 80280a2:	2300      	movs	r3, #0
 80280a4:	60a3      	str	r3, [r4, #8]
 80280a6:	6963      	ldr	r3, [r4, #20]
 80280a8:	425b      	negs	r3, r3
 80280aa:	61a3      	str	r3, [r4, #24]
 80280ac:	6923      	ldr	r3, [r4, #16]
 80280ae:	b953      	cbnz	r3, 80280c6 <__swsetup_r+0xc6>
 80280b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80280b4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80280b8:	d1ba      	bne.n	8028030 <__swsetup_r+0x30>
 80280ba:	bd70      	pop	{r4, r5, r6, pc}
 80280bc:	0792      	lsls	r2, r2, #30
 80280be:	bf58      	it	pl
 80280c0:	6963      	ldrpl	r3, [r4, #20]
 80280c2:	60a3      	str	r3, [r4, #8]
 80280c4:	e7f2      	b.n	80280ac <__swsetup_r+0xac>
 80280c6:	2000      	movs	r0, #0
 80280c8:	e7f7      	b.n	80280ba <__swsetup_r+0xba>
 80280ca:	bf00      	nop
 80280cc:	2000000c 	.word	0x2000000c
 80280d0:	08029abc 	.word	0x08029abc
 80280d4:	08029adc 	.word	0x08029adc
 80280d8:	08029a9c 	.word	0x08029a9c

080280dc <quorem>:
 80280dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80280e0:	6903      	ldr	r3, [r0, #16]
 80280e2:	690c      	ldr	r4, [r1, #16]
 80280e4:	42a3      	cmp	r3, r4
 80280e6:	4680      	mov	r8, r0
 80280e8:	f2c0 8082 	blt.w	80281f0 <quorem+0x114>
 80280ec:	3c01      	subs	r4, #1
 80280ee:	f101 0714 	add.w	r7, r1, #20
 80280f2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80280f6:	f100 0614 	add.w	r6, r0, #20
 80280fa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80280fe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8028102:	eb06 030c 	add.w	r3, r6, ip
 8028106:	3501      	adds	r5, #1
 8028108:	eb07 090c 	add.w	r9, r7, ip
 802810c:	9301      	str	r3, [sp, #4]
 802810e:	fbb0 f5f5 	udiv	r5, r0, r5
 8028112:	b395      	cbz	r5, 802817a <quorem+0x9e>
 8028114:	f04f 0a00 	mov.w	sl, #0
 8028118:	4638      	mov	r0, r7
 802811a:	46b6      	mov	lr, r6
 802811c:	46d3      	mov	fp, sl
 802811e:	f850 2b04 	ldr.w	r2, [r0], #4
 8028122:	b293      	uxth	r3, r2
 8028124:	fb05 a303 	mla	r3, r5, r3, sl
 8028128:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802812c:	b29b      	uxth	r3, r3
 802812e:	ebab 0303 	sub.w	r3, fp, r3
 8028132:	0c12      	lsrs	r2, r2, #16
 8028134:	f8de b000 	ldr.w	fp, [lr]
 8028138:	fb05 a202 	mla	r2, r5, r2, sl
 802813c:	fa13 f38b 	uxtah	r3, r3, fp
 8028140:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8028144:	fa1f fb82 	uxth.w	fp, r2
 8028148:	f8de 2000 	ldr.w	r2, [lr]
 802814c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8028150:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8028154:	b29b      	uxth	r3, r3
 8028156:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802815a:	4581      	cmp	r9, r0
 802815c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8028160:	f84e 3b04 	str.w	r3, [lr], #4
 8028164:	d2db      	bcs.n	802811e <quorem+0x42>
 8028166:	f856 300c 	ldr.w	r3, [r6, ip]
 802816a:	b933      	cbnz	r3, 802817a <quorem+0x9e>
 802816c:	9b01      	ldr	r3, [sp, #4]
 802816e:	3b04      	subs	r3, #4
 8028170:	429e      	cmp	r6, r3
 8028172:	461a      	mov	r2, r3
 8028174:	d330      	bcc.n	80281d8 <quorem+0xfc>
 8028176:	f8c8 4010 	str.w	r4, [r8, #16]
 802817a:	4640      	mov	r0, r8
 802817c:	f001 f9fe 	bl	802957c <__mcmp>
 8028180:	2800      	cmp	r0, #0
 8028182:	db25      	blt.n	80281d0 <quorem+0xf4>
 8028184:	3501      	adds	r5, #1
 8028186:	4630      	mov	r0, r6
 8028188:	f04f 0c00 	mov.w	ip, #0
 802818c:	f857 2b04 	ldr.w	r2, [r7], #4
 8028190:	f8d0 e000 	ldr.w	lr, [r0]
 8028194:	b293      	uxth	r3, r2
 8028196:	ebac 0303 	sub.w	r3, ip, r3
 802819a:	0c12      	lsrs	r2, r2, #16
 802819c:	fa13 f38e 	uxtah	r3, r3, lr
 80281a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80281a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80281a8:	b29b      	uxth	r3, r3
 80281aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80281ae:	45b9      	cmp	r9, r7
 80281b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80281b4:	f840 3b04 	str.w	r3, [r0], #4
 80281b8:	d2e8      	bcs.n	802818c <quorem+0xb0>
 80281ba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80281be:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80281c2:	b92a      	cbnz	r2, 80281d0 <quorem+0xf4>
 80281c4:	3b04      	subs	r3, #4
 80281c6:	429e      	cmp	r6, r3
 80281c8:	461a      	mov	r2, r3
 80281ca:	d30b      	bcc.n	80281e4 <quorem+0x108>
 80281cc:	f8c8 4010 	str.w	r4, [r8, #16]
 80281d0:	4628      	mov	r0, r5
 80281d2:	b003      	add	sp, #12
 80281d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80281d8:	6812      	ldr	r2, [r2, #0]
 80281da:	3b04      	subs	r3, #4
 80281dc:	2a00      	cmp	r2, #0
 80281de:	d1ca      	bne.n	8028176 <quorem+0x9a>
 80281e0:	3c01      	subs	r4, #1
 80281e2:	e7c5      	b.n	8028170 <quorem+0x94>
 80281e4:	6812      	ldr	r2, [r2, #0]
 80281e6:	3b04      	subs	r3, #4
 80281e8:	2a00      	cmp	r2, #0
 80281ea:	d1ef      	bne.n	80281cc <quorem+0xf0>
 80281ec:	3c01      	subs	r4, #1
 80281ee:	e7ea      	b.n	80281c6 <quorem+0xea>
 80281f0:	2000      	movs	r0, #0
 80281f2:	e7ee      	b.n	80281d2 <quorem+0xf6>
 80281f4:	0000      	movs	r0, r0
	...

080281f8 <_dtoa_r>:
 80281f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80281fc:	ec57 6b10 	vmov	r6, r7, d0
 8028200:	b097      	sub	sp, #92	; 0x5c
 8028202:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8028204:	9106      	str	r1, [sp, #24]
 8028206:	4604      	mov	r4, r0
 8028208:	920b      	str	r2, [sp, #44]	; 0x2c
 802820a:	9312      	str	r3, [sp, #72]	; 0x48
 802820c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8028210:	e9cd 6700 	strd	r6, r7, [sp]
 8028214:	b93d      	cbnz	r5, 8028226 <_dtoa_r+0x2e>
 8028216:	2010      	movs	r0, #16
 8028218:	f000 ff92 	bl	8029140 <malloc>
 802821c:	6260      	str	r0, [r4, #36]	; 0x24
 802821e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8028222:	6005      	str	r5, [r0, #0]
 8028224:	60c5      	str	r5, [r0, #12]
 8028226:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028228:	6819      	ldr	r1, [r3, #0]
 802822a:	b151      	cbz	r1, 8028242 <_dtoa_r+0x4a>
 802822c:	685a      	ldr	r2, [r3, #4]
 802822e:	604a      	str	r2, [r1, #4]
 8028230:	2301      	movs	r3, #1
 8028232:	4093      	lsls	r3, r2
 8028234:	608b      	str	r3, [r1, #8]
 8028236:	4620      	mov	r0, r4
 8028238:	f000 ffbe 	bl	80291b8 <_Bfree>
 802823c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802823e:	2200      	movs	r2, #0
 8028240:	601a      	str	r2, [r3, #0]
 8028242:	1e3b      	subs	r3, r7, #0
 8028244:	bfbb      	ittet	lt
 8028246:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802824a:	9301      	strlt	r3, [sp, #4]
 802824c:	2300      	movge	r3, #0
 802824e:	2201      	movlt	r2, #1
 8028250:	bfac      	ite	ge
 8028252:	f8c8 3000 	strge.w	r3, [r8]
 8028256:	f8c8 2000 	strlt.w	r2, [r8]
 802825a:	4baf      	ldr	r3, [pc, #700]	; (8028518 <_dtoa_r+0x320>)
 802825c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8028260:	ea33 0308 	bics.w	r3, r3, r8
 8028264:	d114      	bne.n	8028290 <_dtoa_r+0x98>
 8028266:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8028268:	f242 730f 	movw	r3, #9999	; 0x270f
 802826c:	6013      	str	r3, [r2, #0]
 802826e:	9b00      	ldr	r3, [sp, #0]
 8028270:	b923      	cbnz	r3, 802827c <_dtoa_r+0x84>
 8028272:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8028276:	2800      	cmp	r0, #0
 8028278:	f000 8542 	beq.w	8028d00 <_dtoa_r+0xb08>
 802827c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802827e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 802852c <_dtoa_r+0x334>
 8028282:	2b00      	cmp	r3, #0
 8028284:	f000 8544 	beq.w	8028d10 <_dtoa_r+0xb18>
 8028288:	f10b 0303 	add.w	r3, fp, #3
 802828c:	f000 bd3e 	b.w	8028d0c <_dtoa_r+0xb14>
 8028290:	e9dd 6700 	ldrd	r6, r7, [sp]
 8028294:	2200      	movs	r2, #0
 8028296:	2300      	movs	r3, #0
 8028298:	4630      	mov	r0, r6
 802829a:	4639      	mov	r1, r7
 802829c:	f7f8 fafc 	bl	8020898 <__aeabi_dcmpeq>
 80282a0:	4681      	mov	r9, r0
 80282a2:	b168      	cbz	r0, 80282c0 <_dtoa_r+0xc8>
 80282a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80282a6:	2301      	movs	r3, #1
 80282a8:	6013      	str	r3, [r2, #0]
 80282aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80282ac:	2b00      	cmp	r3, #0
 80282ae:	f000 8524 	beq.w	8028cfa <_dtoa_r+0xb02>
 80282b2:	4b9a      	ldr	r3, [pc, #616]	; (802851c <_dtoa_r+0x324>)
 80282b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80282b6:	f103 3bff 	add.w	fp, r3, #4294967295
 80282ba:	6013      	str	r3, [r2, #0]
 80282bc:	f000 bd28 	b.w	8028d10 <_dtoa_r+0xb18>
 80282c0:	aa14      	add	r2, sp, #80	; 0x50
 80282c2:	a915      	add	r1, sp, #84	; 0x54
 80282c4:	ec47 6b10 	vmov	d0, r6, r7
 80282c8:	4620      	mov	r0, r4
 80282ca:	f001 f9ce 	bl	802966a <__d2b>
 80282ce:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80282d2:	9004      	str	r0, [sp, #16]
 80282d4:	2d00      	cmp	r5, #0
 80282d6:	d07c      	beq.n	80283d2 <_dtoa_r+0x1da>
 80282d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80282dc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80282e0:	46b2      	mov	sl, r6
 80282e2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80282e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80282ea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80282ee:	2200      	movs	r2, #0
 80282f0:	4b8b      	ldr	r3, [pc, #556]	; (8028520 <_dtoa_r+0x328>)
 80282f2:	4650      	mov	r0, sl
 80282f4:	4659      	mov	r1, fp
 80282f6:	f7f7 feaf 	bl	8020058 <__aeabi_dsub>
 80282fa:	a381      	add	r3, pc, #516	; (adr r3, 8028500 <_dtoa_r+0x308>)
 80282fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8028300:	f7f8 f862 	bl	80203c8 <__aeabi_dmul>
 8028304:	a380      	add	r3, pc, #512	; (adr r3, 8028508 <_dtoa_r+0x310>)
 8028306:	e9d3 2300 	ldrd	r2, r3, [r3]
 802830a:	f7f7 fea7 	bl	802005c <__adddf3>
 802830e:	4606      	mov	r6, r0
 8028310:	4628      	mov	r0, r5
 8028312:	460f      	mov	r7, r1
 8028314:	f7f7 ffee 	bl	80202f4 <__aeabi_i2d>
 8028318:	a37d      	add	r3, pc, #500	; (adr r3, 8028510 <_dtoa_r+0x318>)
 802831a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802831e:	f7f8 f853 	bl	80203c8 <__aeabi_dmul>
 8028322:	4602      	mov	r2, r0
 8028324:	460b      	mov	r3, r1
 8028326:	4630      	mov	r0, r6
 8028328:	4639      	mov	r1, r7
 802832a:	f7f7 fe97 	bl	802005c <__adddf3>
 802832e:	4606      	mov	r6, r0
 8028330:	460f      	mov	r7, r1
 8028332:	f7f8 faf9 	bl	8020928 <__aeabi_d2iz>
 8028336:	2200      	movs	r2, #0
 8028338:	4682      	mov	sl, r0
 802833a:	2300      	movs	r3, #0
 802833c:	4630      	mov	r0, r6
 802833e:	4639      	mov	r1, r7
 8028340:	f7f8 fab4 	bl	80208ac <__aeabi_dcmplt>
 8028344:	b148      	cbz	r0, 802835a <_dtoa_r+0x162>
 8028346:	4650      	mov	r0, sl
 8028348:	f7f7 ffd4 	bl	80202f4 <__aeabi_i2d>
 802834c:	4632      	mov	r2, r6
 802834e:	463b      	mov	r3, r7
 8028350:	f7f8 faa2 	bl	8020898 <__aeabi_dcmpeq>
 8028354:	b908      	cbnz	r0, 802835a <_dtoa_r+0x162>
 8028356:	f10a 3aff 	add.w	sl, sl, #4294967295
 802835a:	f1ba 0f16 	cmp.w	sl, #22
 802835e:	d859      	bhi.n	8028414 <_dtoa_r+0x21c>
 8028360:	4970      	ldr	r1, [pc, #448]	; (8028524 <_dtoa_r+0x32c>)
 8028362:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8028366:	e9dd 2300 	ldrd	r2, r3, [sp]
 802836a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802836e:	f7f8 fabb 	bl	80208e8 <__aeabi_dcmpgt>
 8028372:	2800      	cmp	r0, #0
 8028374:	d050      	beq.n	8028418 <_dtoa_r+0x220>
 8028376:	f10a 3aff 	add.w	sl, sl, #4294967295
 802837a:	2300      	movs	r3, #0
 802837c:	930f      	str	r3, [sp, #60]	; 0x3c
 802837e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8028380:	1b5d      	subs	r5, r3, r5
 8028382:	f1b5 0801 	subs.w	r8, r5, #1
 8028386:	bf49      	itett	mi
 8028388:	f1c5 0301 	rsbmi	r3, r5, #1
 802838c:	2300      	movpl	r3, #0
 802838e:	9305      	strmi	r3, [sp, #20]
 8028390:	f04f 0800 	movmi.w	r8, #0
 8028394:	bf58      	it	pl
 8028396:	9305      	strpl	r3, [sp, #20]
 8028398:	f1ba 0f00 	cmp.w	sl, #0
 802839c:	db3e      	blt.n	802841c <_dtoa_r+0x224>
 802839e:	2300      	movs	r3, #0
 80283a0:	44d0      	add	r8, sl
 80283a2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80283a6:	9307      	str	r3, [sp, #28]
 80283a8:	9b06      	ldr	r3, [sp, #24]
 80283aa:	2b09      	cmp	r3, #9
 80283ac:	f200 8090 	bhi.w	80284d0 <_dtoa_r+0x2d8>
 80283b0:	2b05      	cmp	r3, #5
 80283b2:	bfc4      	itt	gt
 80283b4:	3b04      	subgt	r3, #4
 80283b6:	9306      	strgt	r3, [sp, #24]
 80283b8:	9b06      	ldr	r3, [sp, #24]
 80283ba:	f1a3 0302 	sub.w	r3, r3, #2
 80283be:	bfcc      	ite	gt
 80283c0:	2500      	movgt	r5, #0
 80283c2:	2501      	movle	r5, #1
 80283c4:	2b03      	cmp	r3, #3
 80283c6:	f200 808f 	bhi.w	80284e8 <_dtoa_r+0x2f0>
 80283ca:	e8df f003 	tbb	[pc, r3]
 80283ce:	7f7d      	.short	0x7f7d
 80283d0:	7131      	.short	0x7131
 80283d2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80283d6:	441d      	add	r5, r3
 80283d8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80283dc:	2820      	cmp	r0, #32
 80283de:	dd13      	ble.n	8028408 <_dtoa_r+0x210>
 80283e0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80283e4:	9b00      	ldr	r3, [sp, #0]
 80283e6:	fa08 f800 	lsl.w	r8, r8, r0
 80283ea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80283ee:	fa23 f000 	lsr.w	r0, r3, r0
 80283f2:	ea48 0000 	orr.w	r0, r8, r0
 80283f6:	f7f7 ff6d 	bl	80202d4 <__aeabi_ui2d>
 80283fa:	2301      	movs	r3, #1
 80283fc:	4682      	mov	sl, r0
 80283fe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8028402:	3d01      	subs	r5, #1
 8028404:	9313      	str	r3, [sp, #76]	; 0x4c
 8028406:	e772      	b.n	80282ee <_dtoa_r+0xf6>
 8028408:	9b00      	ldr	r3, [sp, #0]
 802840a:	f1c0 0020 	rsb	r0, r0, #32
 802840e:	fa03 f000 	lsl.w	r0, r3, r0
 8028412:	e7f0      	b.n	80283f6 <_dtoa_r+0x1fe>
 8028414:	2301      	movs	r3, #1
 8028416:	e7b1      	b.n	802837c <_dtoa_r+0x184>
 8028418:	900f      	str	r0, [sp, #60]	; 0x3c
 802841a:	e7b0      	b.n	802837e <_dtoa_r+0x186>
 802841c:	9b05      	ldr	r3, [sp, #20]
 802841e:	eba3 030a 	sub.w	r3, r3, sl
 8028422:	9305      	str	r3, [sp, #20]
 8028424:	f1ca 0300 	rsb	r3, sl, #0
 8028428:	9307      	str	r3, [sp, #28]
 802842a:	2300      	movs	r3, #0
 802842c:	930e      	str	r3, [sp, #56]	; 0x38
 802842e:	e7bb      	b.n	80283a8 <_dtoa_r+0x1b0>
 8028430:	2301      	movs	r3, #1
 8028432:	930a      	str	r3, [sp, #40]	; 0x28
 8028434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028436:	2b00      	cmp	r3, #0
 8028438:	dd59      	ble.n	80284ee <_dtoa_r+0x2f6>
 802843a:	9302      	str	r3, [sp, #8]
 802843c:	4699      	mov	r9, r3
 802843e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8028440:	2200      	movs	r2, #0
 8028442:	6072      	str	r2, [r6, #4]
 8028444:	2204      	movs	r2, #4
 8028446:	f102 0014 	add.w	r0, r2, #20
 802844a:	4298      	cmp	r0, r3
 802844c:	6871      	ldr	r1, [r6, #4]
 802844e:	d953      	bls.n	80284f8 <_dtoa_r+0x300>
 8028450:	4620      	mov	r0, r4
 8028452:	f000 fe7d 	bl	8029150 <_Balloc>
 8028456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8028458:	6030      	str	r0, [r6, #0]
 802845a:	f1b9 0f0e 	cmp.w	r9, #14
 802845e:	f8d3 b000 	ldr.w	fp, [r3]
 8028462:	f200 80e6 	bhi.w	8028632 <_dtoa_r+0x43a>
 8028466:	2d00      	cmp	r5, #0
 8028468:	f000 80e3 	beq.w	8028632 <_dtoa_r+0x43a>
 802846c:	ed9d 7b00 	vldr	d7, [sp]
 8028470:	f1ba 0f00 	cmp.w	sl, #0
 8028474:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8028478:	dd74      	ble.n	8028564 <_dtoa_r+0x36c>
 802847a:	4a2a      	ldr	r2, [pc, #168]	; (8028524 <_dtoa_r+0x32c>)
 802847c:	f00a 030f 	and.w	r3, sl, #15
 8028480:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8028484:	ed93 7b00 	vldr	d7, [r3]
 8028488:	ea4f 162a 	mov.w	r6, sl, asr #4
 802848c:	06f0      	lsls	r0, r6, #27
 802848e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8028492:	d565      	bpl.n	8028560 <_dtoa_r+0x368>
 8028494:	4b24      	ldr	r3, [pc, #144]	; (8028528 <_dtoa_r+0x330>)
 8028496:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 802849a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802849e:	f7f8 f8bd 	bl	802061c <__aeabi_ddiv>
 80284a2:	e9cd 0100 	strd	r0, r1, [sp]
 80284a6:	f006 060f 	and.w	r6, r6, #15
 80284aa:	2503      	movs	r5, #3
 80284ac:	4f1e      	ldr	r7, [pc, #120]	; (8028528 <_dtoa_r+0x330>)
 80284ae:	e04c      	b.n	802854a <_dtoa_r+0x352>
 80284b0:	2301      	movs	r3, #1
 80284b2:	930a      	str	r3, [sp, #40]	; 0x28
 80284b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80284b6:	4453      	add	r3, sl
 80284b8:	f103 0901 	add.w	r9, r3, #1
 80284bc:	9302      	str	r3, [sp, #8]
 80284be:	464b      	mov	r3, r9
 80284c0:	2b01      	cmp	r3, #1
 80284c2:	bfb8      	it	lt
 80284c4:	2301      	movlt	r3, #1
 80284c6:	e7ba      	b.n	802843e <_dtoa_r+0x246>
 80284c8:	2300      	movs	r3, #0
 80284ca:	e7b2      	b.n	8028432 <_dtoa_r+0x23a>
 80284cc:	2300      	movs	r3, #0
 80284ce:	e7f0      	b.n	80284b2 <_dtoa_r+0x2ba>
 80284d0:	2501      	movs	r5, #1
 80284d2:	2300      	movs	r3, #0
 80284d4:	9306      	str	r3, [sp, #24]
 80284d6:	950a      	str	r5, [sp, #40]	; 0x28
 80284d8:	f04f 33ff 	mov.w	r3, #4294967295
 80284dc:	9302      	str	r3, [sp, #8]
 80284de:	4699      	mov	r9, r3
 80284e0:	2200      	movs	r2, #0
 80284e2:	2312      	movs	r3, #18
 80284e4:	920b      	str	r2, [sp, #44]	; 0x2c
 80284e6:	e7aa      	b.n	802843e <_dtoa_r+0x246>
 80284e8:	2301      	movs	r3, #1
 80284ea:	930a      	str	r3, [sp, #40]	; 0x28
 80284ec:	e7f4      	b.n	80284d8 <_dtoa_r+0x2e0>
 80284ee:	2301      	movs	r3, #1
 80284f0:	9302      	str	r3, [sp, #8]
 80284f2:	4699      	mov	r9, r3
 80284f4:	461a      	mov	r2, r3
 80284f6:	e7f5      	b.n	80284e4 <_dtoa_r+0x2ec>
 80284f8:	3101      	adds	r1, #1
 80284fa:	6071      	str	r1, [r6, #4]
 80284fc:	0052      	lsls	r2, r2, #1
 80284fe:	e7a2      	b.n	8028446 <_dtoa_r+0x24e>
 8028500:	636f4361 	.word	0x636f4361
 8028504:	3fd287a7 	.word	0x3fd287a7
 8028508:	8b60c8b3 	.word	0x8b60c8b3
 802850c:	3fc68a28 	.word	0x3fc68a28
 8028510:	509f79fb 	.word	0x509f79fb
 8028514:	3fd34413 	.word	0x3fd34413
 8028518:	7ff00000 	.word	0x7ff00000
 802851c:	08029a8d 	.word	0x08029a8d
 8028520:	3ff80000 	.word	0x3ff80000
 8028524:	08029b28 	.word	0x08029b28
 8028528:	08029b00 	.word	0x08029b00
 802852c:	08029a97 	.word	0x08029a97
 8028530:	07f1      	lsls	r1, r6, #31
 8028532:	d508      	bpl.n	8028546 <_dtoa_r+0x34e>
 8028534:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8028538:	e9d7 2300 	ldrd	r2, r3, [r7]
 802853c:	f7f7 ff44 	bl	80203c8 <__aeabi_dmul>
 8028540:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8028544:	3501      	adds	r5, #1
 8028546:	1076      	asrs	r6, r6, #1
 8028548:	3708      	adds	r7, #8
 802854a:	2e00      	cmp	r6, #0
 802854c:	d1f0      	bne.n	8028530 <_dtoa_r+0x338>
 802854e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8028552:	e9dd 0100 	ldrd	r0, r1, [sp]
 8028556:	f7f8 f861 	bl	802061c <__aeabi_ddiv>
 802855a:	e9cd 0100 	strd	r0, r1, [sp]
 802855e:	e01a      	b.n	8028596 <_dtoa_r+0x39e>
 8028560:	2502      	movs	r5, #2
 8028562:	e7a3      	b.n	80284ac <_dtoa_r+0x2b4>
 8028564:	f000 80a0 	beq.w	80286a8 <_dtoa_r+0x4b0>
 8028568:	f1ca 0600 	rsb	r6, sl, #0
 802856c:	4b9f      	ldr	r3, [pc, #636]	; (80287ec <_dtoa_r+0x5f4>)
 802856e:	4fa0      	ldr	r7, [pc, #640]	; (80287f0 <_dtoa_r+0x5f8>)
 8028570:	f006 020f 	and.w	r2, r6, #15
 8028574:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8028578:	e9d3 2300 	ldrd	r2, r3, [r3]
 802857c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8028580:	f7f7 ff22 	bl	80203c8 <__aeabi_dmul>
 8028584:	e9cd 0100 	strd	r0, r1, [sp]
 8028588:	1136      	asrs	r6, r6, #4
 802858a:	2300      	movs	r3, #0
 802858c:	2502      	movs	r5, #2
 802858e:	2e00      	cmp	r6, #0
 8028590:	d17f      	bne.n	8028692 <_dtoa_r+0x49a>
 8028592:	2b00      	cmp	r3, #0
 8028594:	d1e1      	bne.n	802855a <_dtoa_r+0x362>
 8028596:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028598:	2b00      	cmp	r3, #0
 802859a:	f000 8087 	beq.w	80286ac <_dtoa_r+0x4b4>
 802859e:	e9dd 6700 	ldrd	r6, r7, [sp]
 80285a2:	2200      	movs	r2, #0
 80285a4:	4b93      	ldr	r3, [pc, #588]	; (80287f4 <_dtoa_r+0x5fc>)
 80285a6:	4630      	mov	r0, r6
 80285a8:	4639      	mov	r1, r7
 80285aa:	f7f8 f97f 	bl	80208ac <__aeabi_dcmplt>
 80285ae:	2800      	cmp	r0, #0
 80285b0:	d07c      	beq.n	80286ac <_dtoa_r+0x4b4>
 80285b2:	f1b9 0f00 	cmp.w	r9, #0
 80285b6:	d079      	beq.n	80286ac <_dtoa_r+0x4b4>
 80285b8:	9b02      	ldr	r3, [sp, #8]
 80285ba:	2b00      	cmp	r3, #0
 80285bc:	dd35      	ble.n	802862a <_dtoa_r+0x432>
 80285be:	f10a 33ff 	add.w	r3, sl, #4294967295
 80285c2:	9308      	str	r3, [sp, #32]
 80285c4:	4639      	mov	r1, r7
 80285c6:	2200      	movs	r2, #0
 80285c8:	4b8b      	ldr	r3, [pc, #556]	; (80287f8 <_dtoa_r+0x600>)
 80285ca:	4630      	mov	r0, r6
 80285cc:	f7f7 fefc 	bl	80203c8 <__aeabi_dmul>
 80285d0:	e9cd 0100 	strd	r0, r1, [sp]
 80285d4:	9f02      	ldr	r7, [sp, #8]
 80285d6:	3501      	adds	r5, #1
 80285d8:	4628      	mov	r0, r5
 80285da:	f7f7 fe8b 	bl	80202f4 <__aeabi_i2d>
 80285de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80285e2:	f7f7 fef1 	bl	80203c8 <__aeabi_dmul>
 80285e6:	2200      	movs	r2, #0
 80285e8:	4b84      	ldr	r3, [pc, #528]	; (80287fc <_dtoa_r+0x604>)
 80285ea:	f7f7 fd37 	bl	802005c <__adddf3>
 80285ee:	4605      	mov	r5, r0
 80285f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80285f4:	2f00      	cmp	r7, #0
 80285f6:	d15d      	bne.n	80286b4 <_dtoa_r+0x4bc>
 80285f8:	2200      	movs	r2, #0
 80285fa:	4b81      	ldr	r3, [pc, #516]	; (8028800 <_dtoa_r+0x608>)
 80285fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8028600:	f7f7 fd2a 	bl	8020058 <__aeabi_dsub>
 8028604:	462a      	mov	r2, r5
 8028606:	4633      	mov	r3, r6
 8028608:	e9cd 0100 	strd	r0, r1, [sp]
 802860c:	f7f8 f96c 	bl	80208e8 <__aeabi_dcmpgt>
 8028610:	2800      	cmp	r0, #0
 8028612:	f040 8288 	bne.w	8028b26 <_dtoa_r+0x92e>
 8028616:	462a      	mov	r2, r5
 8028618:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 802861c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8028620:	f7f8 f944 	bl	80208ac <__aeabi_dcmplt>
 8028624:	2800      	cmp	r0, #0
 8028626:	f040 827c 	bne.w	8028b22 <_dtoa_r+0x92a>
 802862a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 802862e:	e9cd 2300 	strd	r2, r3, [sp]
 8028632:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8028634:	2b00      	cmp	r3, #0
 8028636:	f2c0 8150 	blt.w	80288da <_dtoa_r+0x6e2>
 802863a:	f1ba 0f0e 	cmp.w	sl, #14
 802863e:	f300 814c 	bgt.w	80288da <_dtoa_r+0x6e2>
 8028642:	4b6a      	ldr	r3, [pc, #424]	; (80287ec <_dtoa_r+0x5f4>)
 8028644:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8028648:	ed93 7b00 	vldr	d7, [r3]
 802864c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802864e:	2b00      	cmp	r3, #0
 8028650:	ed8d 7b02 	vstr	d7, [sp, #8]
 8028654:	f280 80d8 	bge.w	8028808 <_dtoa_r+0x610>
 8028658:	f1b9 0f00 	cmp.w	r9, #0
 802865c:	f300 80d4 	bgt.w	8028808 <_dtoa_r+0x610>
 8028660:	f040 825e 	bne.w	8028b20 <_dtoa_r+0x928>
 8028664:	2200      	movs	r2, #0
 8028666:	4b66      	ldr	r3, [pc, #408]	; (8028800 <_dtoa_r+0x608>)
 8028668:	ec51 0b17 	vmov	r0, r1, d7
 802866c:	f7f7 feac 	bl	80203c8 <__aeabi_dmul>
 8028670:	e9dd 2300 	ldrd	r2, r3, [sp]
 8028674:	f7f8 f92e 	bl	80208d4 <__aeabi_dcmpge>
 8028678:	464f      	mov	r7, r9
 802867a:	464e      	mov	r6, r9
 802867c:	2800      	cmp	r0, #0
 802867e:	f040 8234 	bne.w	8028aea <_dtoa_r+0x8f2>
 8028682:	2331      	movs	r3, #49	; 0x31
 8028684:	f10b 0501 	add.w	r5, fp, #1
 8028688:	f88b 3000 	strb.w	r3, [fp]
 802868c:	f10a 0a01 	add.w	sl, sl, #1
 8028690:	e22f      	b.n	8028af2 <_dtoa_r+0x8fa>
 8028692:	07f2      	lsls	r2, r6, #31
 8028694:	d505      	bpl.n	80286a2 <_dtoa_r+0x4aa>
 8028696:	e9d7 2300 	ldrd	r2, r3, [r7]
 802869a:	f7f7 fe95 	bl	80203c8 <__aeabi_dmul>
 802869e:	3501      	adds	r5, #1
 80286a0:	2301      	movs	r3, #1
 80286a2:	1076      	asrs	r6, r6, #1
 80286a4:	3708      	adds	r7, #8
 80286a6:	e772      	b.n	802858e <_dtoa_r+0x396>
 80286a8:	2502      	movs	r5, #2
 80286aa:	e774      	b.n	8028596 <_dtoa_r+0x39e>
 80286ac:	f8cd a020 	str.w	sl, [sp, #32]
 80286b0:	464f      	mov	r7, r9
 80286b2:	e791      	b.n	80285d8 <_dtoa_r+0x3e0>
 80286b4:	4b4d      	ldr	r3, [pc, #308]	; (80287ec <_dtoa_r+0x5f4>)
 80286b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80286ba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80286be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80286c0:	2b00      	cmp	r3, #0
 80286c2:	d047      	beq.n	8028754 <_dtoa_r+0x55c>
 80286c4:	4602      	mov	r2, r0
 80286c6:	460b      	mov	r3, r1
 80286c8:	2000      	movs	r0, #0
 80286ca:	494e      	ldr	r1, [pc, #312]	; (8028804 <_dtoa_r+0x60c>)
 80286cc:	f7f7 ffa6 	bl	802061c <__aeabi_ddiv>
 80286d0:	462a      	mov	r2, r5
 80286d2:	4633      	mov	r3, r6
 80286d4:	f7f7 fcc0 	bl	8020058 <__aeabi_dsub>
 80286d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80286dc:	465d      	mov	r5, fp
 80286de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80286e2:	f7f8 f921 	bl	8020928 <__aeabi_d2iz>
 80286e6:	4606      	mov	r6, r0
 80286e8:	f7f7 fe04 	bl	80202f4 <__aeabi_i2d>
 80286ec:	4602      	mov	r2, r0
 80286ee:	460b      	mov	r3, r1
 80286f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80286f4:	f7f7 fcb0 	bl	8020058 <__aeabi_dsub>
 80286f8:	3630      	adds	r6, #48	; 0x30
 80286fa:	f805 6b01 	strb.w	r6, [r5], #1
 80286fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8028702:	e9cd 0100 	strd	r0, r1, [sp]
 8028706:	f7f8 f8d1 	bl	80208ac <__aeabi_dcmplt>
 802870a:	2800      	cmp	r0, #0
 802870c:	d163      	bne.n	80287d6 <_dtoa_r+0x5de>
 802870e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8028712:	2000      	movs	r0, #0
 8028714:	4937      	ldr	r1, [pc, #220]	; (80287f4 <_dtoa_r+0x5fc>)
 8028716:	f7f7 fc9f 	bl	8020058 <__aeabi_dsub>
 802871a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802871e:	f7f8 f8c5 	bl	80208ac <__aeabi_dcmplt>
 8028722:	2800      	cmp	r0, #0
 8028724:	f040 80b7 	bne.w	8028896 <_dtoa_r+0x69e>
 8028728:	eba5 030b 	sub.w	r3, r5, fp
 802872c:	429f      	cmp	r7, r3
 802872e:	f77f af7c 	ble.w	802862a <_dtoa_r+0x432>
 8028732:	2200      	movs	r2, #0
 8028734:	4b30      	ldr	r3, [pc, #192]	; (80287f8 <_dtoa_r+0x600>)
 8028736:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802873a:	f7f7 fe45 	bl	80203c8 <__aeabi_dmul>
 802873e:	2200      	movs	r2, #0
 8028740:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8028744:	4b2c      	ldr	r3, [pc, #176]	; (80287f8 <_dtoa_r+0x600>)
 8028746:	e9dd 0100 	ldrd	r0, r1, [sp]
 802874a:	f7f7 fe3d 	bl	80203c8 <__aeabi_dmul>
 802874e:	e9cd 0100 	strd	r0, r1, [sp]
 8028752:	e7c4      	b.n	80286de <_dtoa_r+0x4e6>
 8028754:	462a      	mov	r2, r5
 8028756:	4633      	mov	r3, r6
 8028758:	f7f7 fe36 	bl	80203c8 <__aeabi_dmul>
 802875c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8028760:	eb0b 0507 	add.w	r5, fp, r7
 8028764:	465e      	mov	r6, fp
 8028766:	e9dd 0100 	ldrd	r0, r1, [sp]
 802876a:	f7f8 f8dd 	bl	8020928 <__aeabi_d2iz>
 802876e:	4607      	mov	r7, r0
 8028770:	f7f7 fdc0 	bl	80202f4 <__aeabi_i2d>
 8028774:	3730      	adds	r7, #48	; 0x30
 8028776:	4602      	mov	r2, r0
 8028778:	460b      	mov	r3, r1
 802877a:	e9dd 0100 	ldrd	r0, r1, [sp]
 802877e:	f7f7 fc6b 	bl	8020058 <__aeabi_dsub>
 8028782:	f806 7b01 	strb.w	r7, [r6], #1
 8028786:	42ae      	cmp	r6, r5
 8028788:	e9cd 0100 	strd	r0, r1, [sp]
 802878c:	f04f 0200 	mov.w	r2, #0
 8028790:	d126      	bne.n	80287e0 <_dtoa_r+0x5e8>
 8028792:	4b1c      	ldr	r3, [pc, #112]	; (8028804 <_dtoa_r+0x60c>)
 8028794:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8028798:	f7f7 fc60 	bl	802005c <__adddf3>
 802879c:	4602      	mov	r2, r0
 802879e:	460b      	mov	r3, r1
 80287a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80287a4:	f7f8 f8a0 	bl	80208e8 <__aeabi_dcmpgt>
 80287a8:	2800      	cmp	r0, #0
 80287aa:	d174      	bne.n	8028896 <_dtoa_r+0x69e>
 80287ac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80287b0:	2000      	movs	r0, #0
 80287b2:	4914      	ldr	r1, [pc, #80]	; (8028804 <_dtoa_r+0x60c>)
 80287b4:	f7f7 fc50 	bl	8020058 <__aeabi_dsub>
 80287b8:	4602      	mov	r2, r0
 80287ba:	460b      	mov	r3, r1
 80287bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80287c0:	f7f8 f874 	bl	80208ac <__aeabi_dcmplt>
 80287c4:	2800      	cmp	r0, #0
 80287c6:	f43f af30 	beq.w	802862a <_dtoa_r+0x432>
 80287ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80287ce:	2b30      	cmp	r3, #48	; 0x30
 80287d0:	f105 32ff 	add.w	r2, r5, #4294967295
 80287d4:	d002      	beq.n	80287dc <_dtoa_r+0x5e4>
 80287d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80287da:	e04a      	b.n	8028872 <_dtoa_r+0x67a>
 80287dc:	4615      	mov	r5, r2
 80287de:	e7f4      	b.n	80287ca <_dtoa_r+0x5d2>
 80287e0:	4b05      	ldr	r3, [pc, #20]	; (80287f8 <_dtoa_r+0x600>)
 80287e2:	f7f7 fdf1 	bl	80203c8 <__aeabi_dmul>
 80287e6:	e9cd 0100 	strd	r0, r1, [sp]
 80287ea:	e7bc      	b.n	8028766 <_dtoa_r+0x56e>
 80287ec:	08029b28 	.word	0x08029b28
 80287f0:	08029b00 	.word	0x08029b00
 80287f4:	3ff00000 	.word	0x3ff00000
 80287f8:	40240000 	.word	0x40240000
 80287fc:	401c0000 	.word	0x401c0000
 8028800:	40140000 	.word	0x40140000
 8028804:	3fe00000 	.word	0x3fe00000
 8028808:	e9dd 6700 	ldrd	r6, r7, [sp]
 802880c:	465d      	mov	r5, fp
 802880e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8028812:	4630      	mov	r0, r6
 8028814:	4639      	mov	r1, r7
 8028816:	f7f7 ff01 	bl	802061c <__aeabi_ddiv>
 802881a:	f7f8 f885 	bl	8020928 <__aeabi_d2iz>
 802881e:	4680      	mov	r8, r0
 8028820:	f7f7 fd68 	bl	80202f4 <__aeabi_i2d>
 8028824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8028828:	f7f7 fdce 	bl	80203c8 <__aeabi_dmul>
 802882c:	4602      	mov	r2, r0
 802882e:	460b      	mov	r3, r1
 8028830:	4630      	mov	r0, r6
 8028832:	4639      	mov	r1, r7
 8028834:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8028838:	f7f7 fc0e 	bl	8020058 <__aeabi_dsub>
 802883c:	f805 6b01 	strb.w	r6, [r5], #1
 8028840:	eba5 060b 	sub.w	r6, r5, fp
 8028844:	45b1      	cmp	r9, r6
 8028846:	4602      	mov	r2, r0
 8028848:	460b      	mov	r3, r1
 802884a:	d139      	bne.n	80288c0 <_dtoa_r+0x6c8>
 802884c:	f7f7 fc06 	bl	802005c <__adddf3>
 8028850:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8028854:	4606      	mov	r6, r0
 8028856:	460f      	mov	r7, r1
 8028858:	f7f8 f846 	bl	80208e8 <__aeabi_dcmpgt>
 802885c:	b9c8      	cbnz	r0, 8028892 <_dtoa_r+0x69a>
 802885e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8028862:	4630      	mov	r0, r6
 8028864:	4639      	mov	r1, r7
 8028866:	f7f8 f817 	bl	8020898 <__aeabi_dcmpeq>
 802886a:	b110      	cbz	r0, 8028872 <_dtoa_r+0x67a>
 802886c:	f018 0f01 	tst.w	r8, #1
 8028870:	d10f      	bne.n	8028892 <_dtoa_r+0x69a>
 8028872:	9904      	ldr	r1, [sp, #16]
 8028874:	4620      	mov	r0, r4
 8028876:	f000 fc9f 	bl	80291b8 <_Bfree>
 802887a:	2300      	movs	r3, #0
 802887c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802887e:	702b      	strb	r3, [r5, #0]
 8028880:	f10a 0301 	add.w	r3, sl, #1
 8028884:	6013      	str	r3, [r2, #0]
 8028886:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8028888:	2b00      	cmp	r3, #0
 802888a:	f000 8241 	beq.w	8028d10 <_dtoa_r+0xb18>
 802888e:	601d      	str	r5, [r3, #0]
 8028890:	e23e      	b.n	8028d10 <_dtoa_r+0xb18>
 8028892:	f8cd a020 	str.w	sl, [sp, #32]
 8028896:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802889a:	2a39      	cmp	r2, #57	; 0x39
 802889c:	f105 33ff 	add.w	r3, r5, #4294967295
 80288a0:	d108      	bne.n	80288b4 <_dtoa_r+0x6bc>
 80288a2:	459b      	cmp	fp, r3
 80288a4:	d10a      	bne.n	80288bc <_dtoa_r+0x6c4>
 80288a6:	9b08      	ldr	r3, [sp, #32]
 80288a8:	3301      	adds	r3, #1
 80288aa:	9308      	str	r3, [sp, #32]
 80288ac:	2330      	movs	r3, #48	; 0x30
 80288ae:	f88b 3000 	strb.w	r3, [fp]
 80288b2:	465b      	mov	r3, fp
 80288b4:	781a      	ldrb	r2, [r3, #0]
 80288b6:	3201      	adds	r2, #1
 80288b8:	701a      	strb	r2, [r3, #0]
 80288ba:	e78c      	b.n	80287d6 <_dtoa_r+0x5de>
 80288bc:	461d      	mov	r5, r3
 80288be:	e7ea      	b.n	8028896 <_dtoa_r+0x69e>
 80288c0:	2200      	movs	r2, #0
 80288c2:	4b9b      	ldr	r3, [pc, #620]	; (8028b30 <_dtoa_r+0x938>)
 80288c4:	f7f7 fd80 	bl	80203c8 <__aeabi_dmul>
 80288c8:	2200      	movs	r2, #0
 80288ca:	2300      	movs	r3, #0
 80288cc:	4606      	mov	r6, r0
 80288ce:	460f      	mov	r7, r1
 80288d0:	f7f7 ffe2 	bl	8020898 <__aeabi_dcmpeq>
 80288d4:	2800      	cmp	r0, #0
 80288d6:	d09a      	beq.n	802880e <_dtoa_r+0x616>
 80288d8:	e7cb      	b.n	8028872 <_dtoa_r+0x67a>
 80288da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80288dc:	2a00      	cmp	r2, #0
 80288de:	f000 808b 	beq.w	80289f8 <_dtoa_r+0x800>
 80288e2:	9a06      	ldr	r2, [sp, #24]
 80288e4:	2a01      	cmp	r2, #1
 80288e6:	dc6e      	bgt.n	80289c6 <_dtoa_r+0x7ce>
 80288e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80288ea:	2a00      	cmp	r2, #0
 80288ec:	d067      	beq.n	80289be <_dtoa_r+0x7c6>
 80288ee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80288f2:	9f07      	ldr	r7, [sp, #28]
 80288f4:	9d05      	ldr	r5, [sp, #20]
 80288f6:	9a05      	ldr	r2, [sp, #20]
 80288f8:	2101      	movs	r1, #1
 80288fa:	441a      	add	r2, r3
 80288fc:	4620      	mov	r0, r4
 80288fe:	9205      	str	r2, [sp, #20]
 8028900:	4498      	add	r8, r3
 8028902:	f000 fcf9 	bl	80292f8 <__i2b>
 8028906:	4606      	mov	r6, r0
 8028908:	2d00      	cmp	r5, #0
 802890a:	dd0c      	ble.n	8028926 <_dtoa_r+0x72e>
 802890c:	f1b8 0f00 	cmp.w	r8, #0
 8028910:	dd09      	ble.n	8028926 <_dtoa_r+0x72e>
 8028912:	4545      	cmp	r5, r8
 8028914:	9a05      	ldr	r2, [sp, #20]
 8028916:	462b      	mov	r3, r5
 8028918:	bfa8      	it	ge
 802891a:	4643      	movge	r3, r8
 802891c:	1ad2      	subs	r2, r2, r3
 802891e:	9205      	str	r2, [sp, #20]
 8028920:	1aed      	subs	r5, r5, r3
 8028922:	eba8 0803 	sub.w	r8, r8, r3
 8028926:	9b07      	ldr	r3, [sp, #28]
 8028928:	b1eb      	cbz	r3, 8028966 <_dtoa_r+0x76e>
 802892a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802892c:	2b00      	cmp	r3, #0
 802892e:	d067      	beq.n	8028a00 <_dtoa_r+0x808>
 8028930:	b18f      	cbz	r7, 8028956 <_dtoa_r+0x75e>
 8028932:	4631      	mov	r1, r6
 8028934:	463a      	mov	r2, r7
 8028936:	4620      	mov	r0, r4
 8028938:	f000 fd7e 	bl	8029438 <__pow5mult>
 802893c:	9a04      	ldr	r2, [sp, #16]
 802893e:	4601      	mov	r1, r0
 8028940:	4606      	mov	r6, r0
 8028942:	4620      	mov	r0, r4
 8028944:	f000 fce1 	bl	802930a <__multiply>
 8028948:	9904      	ldr	r1, [sp, #16]
 802894a:	9008      	str	r0, [sp, #32]
 802894c:	4620      	mov	r0, r4
 802894e:	f000 fc33 	bl	80291b8 <_Bfree>
 8028952:	9b08      	ldr	r3, [sp, #32]
 8028954:	9304      	str	r3, [sp, #16]
 8028956:	9b07      	ldr	r3, [sp, #28]
 8028958:	1bda      	subs	r2, r3, r7
 802895a:	d004      	beq.n	8028966 <_dtoa_r+0x76e>
 802895c:	9904      	ldr	r1, [sp, #16]
 802895e:	4620      	mov	r0, r4
 8028960:	f000 fd6a 	bl	8029438 <__pow5mult>
 8028964:	9004      	str	r0, [sp, #16]
 8028966:	2101      	movs	r1, #1
 8028968:	4620      	mov	r0, r4
 802896a:	f000 fcc5 	bl	80292f8 <__i2b>
 802896e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028970:	4607      	mov	r7, r0
 8028972:	2b00      	cmp	r3, #0
 8028974:	f000 81d0 	beq.w	8028d18 <_dtoa_r+0xb20>
 8028978:	461a      	mov	r2, r3
 802897a:	4601      	mov	r1, r0
 802897c:	4620      	mov	r0, r4
 802897e:	f000 fd5b 	bl	8029438 <__pow5mult>
 8028982:	9b06      	ldr	r3, [sp, #24]
 8028984:	2b01      	cmp	r3, #1
 8028986:	4607      	mov	r7, r0
 8028988:	dc40      	bgt.n	8028a0c <_dtoa_r+0x814>
 802898a:	9b00      	ldr	r3, [sp, #0]
 802898c:	2b00      	cmp	r3, #0
 802898e:	d139      	bne.n	8028a04 <_dtoa_r+0x80c>
 8028990:	9b01      	ldr	r3, [sp, #4]
 8028992:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8028996:	2b00      	cmp	r3, #0
 8028998:	d136      	bne.n	8028a08 <_dtoa_r+0x810>
 802899a:	9b01      	ldr	r3, [sp, #4]
 802899c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80289a0:	0d1b      	lsrs	r3, r3, #20
 80289a2:	051b      	lsls	r3, r3, #20
 80289a4:	b12b      	cbz	r3, 80289b2 <_dtoa_r+0x7ba>
 80289a6:	9b05      	ldr	r3, [sp, #20]
 80289a8:	3301      	adds	r3, #1
 80289aa:	9305      	str	r3, [sp, #20]
 80289ac:	f108 0801 	add.w	r8, r8, #1
 80289b0:	2301      	movs	r3, #1
 80289b2:	9307      	str	r3, [sp, #28]
 80289b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80289b6:	2b00      	cmp	r3, #0
 80289b8:	d12a      	bne.n	8028a10 <_dtoa_r+0x818>
 80289ba:	2001      	movs	r0, #1
 80289bc:	e030      	b.n	8028a20 <_dtoa_r+0x828>
 80289be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80289c0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80289c4:	e795      	b.n	80288f2 <_dtoa_r+0x6fa>
 80289c6:	9b07      	ldr	r3, [sp, #28]
 80289c8:	f109 37ff 	add.w	r7, r9, #4294967295
 80289cc:	42bb      	cmp	r3, r7
 80289ce:	bfbf      	itttt	lt
 80289d0:	9b07      	ldrlt	r3, [sp, #28]
 80289d2:	9707      	strlt	r7, [sp, #28]
 80289d4:	1afa      	sublt	r2, r7, r3
 80289d6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80289d8:	bfbb      	ittet	lt
 80289da:	189b      	addlt	r3, r3, r2
 80289dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80289de:	1bdf      	subge	r7, r3, r7
 80289e0:	2700      	movlt	r7, #0
 80289e2:	f1b9 0f00 	cmp.w	r9, #0
 80289e6:	bfb5      	itete	lt
 80289e8:	9b05      	ldrlt	r3, [sp, #20]
 80289ea:	9d05      	ldrge	r5, [sp, #20]
 80289ec:	eba3 0509 	sublt.w	r5, r3, r9
 80289f0:	464b      	movge	r3, r9
 80289f2:	bfb8      	it	lt
 80289f4:	2300      	movlt	r3, #0
 80289f6:	e77e      	b.n	80288f6 <_dtoa_r+0x6fe>
 80289f8:	9f07      	ldr	r7, [sp, #28]
 80289fa:	9d05      	ldr	r5, [sp, #20]
 80289fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80289fe:	e783      	b.n	8028908 <_dtoa_r+0x710>
 8028a00:	9a07      	ldr	r2, [sp, #28]
 8028a02:	e7ab      	b.n	802895c <_dtoa_r+0x764>
 8028a04:	2300      	movs	r3, #0
 8028a06:	e7d4      	b.n	80289b2 <_dtoa_r+0x7ba>
 8028a08:	9b00      	ldr	r3, [sp, #0]
 8028a0a:	e7d2      	b.n	80289b2 <_dtoa_r+0x7ba>
 8028a0c:	2300      	movs	r3, #0
 8028a0e:	9307      	str	r3, [sp, #28]
 8028a10:	693b      	ldr	r3, [r7, #16]
 8028a12:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8028a16:	6918      	ldr	r0, [r3, #16]
 8028a18:	f000 fc20 	bl	802925c <__hi0bits>
 8028a1c:	f1c0 0020 	rsb	r0, r0, #32
 8028a20:	4440      	add	r0, r8
 8028a22:	f010 001f 	ands.w	r0, r0, #31
 8028a26:	d047      	beq.n	8028ab8 <_dtoa_r+0x8c0>
 8028a28:	f1c0 0320 	rsb	r3, r0, #32
 8028a2c:	2b04      	cmp	r3, #4
 8028a2e:	dd3b      	ble.n	8028aa8 <_dtoa_r+0x8b0>
 8028a30:	9b05      	ldr	r3, [sp, #20]
 8028a32:	f1c0 001c 	rsb	r0, r0, #28
 8028a36:	4403      	add	r3, r0
 8028a38:	9305      	str	r3, [sp, #20]
 8028a3a:	4405      	add	r5, r0
 8028a3c:	4480      	add	r8, r0
 8028a3e:	9b05      	ldr	r3, [sp, #20]
 8028a40:	2b00      	cmp	r3, #0
 8028a42:	dd05      	ble.n	8028a50 <_dtoa_r+0x858>
 8028a44:	461a      	mov	r2, r3
 8028a46:	9904      	ldr	r1, [sp, #16]
 8028a48:	4620      	mov	r0, r4
 8028a4a:	f000 fd43 	bl	80294d4 <__lshift>
 8028a4e:	9004      	str	r0, [sp, #16]
 8028a50:	f1b8 0f00 	cmp.w	r8, #0
 8028a54:	dd05      	ble.n	8028a62 <_dtoa_r+0x86a>
 8028a56:	4639      	mov	r1, r7
 8028a58:	4642      	mov	r2, r8
 8028a5a:	4620      	mov	r0, r4
 8028a5c:	f000 fd3a 	bl	80294d4 <__lshift>
 8028a60:	4607      	mov	r7, r0
 8028a62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8028a64:	b353      	cbz	r3, 8028abc <_dtoa_r+0x8c4>
 8028a66:	4639      	mov	r1, r7
 8028a68:	9804      	ldr	r0, [sp, #16]
 8028a6a:	f000 fd87 	bl	802957c <__mcmp>
 8028a6e:	2800      	cmp	r0, #0
 8028a70:	da24      	bge.n	8028abc <_dtoa_r+0x8c4>
 8028a72:	2300      	movs	r3, #0
 8028a74:	220a      	movs	r2, #10
 8028a76:	9904      	ldr	r1, [sp, #16]
 8028a78:	4620      	mov	r0, r4
 8028a7a:	f000 fbb4 	bl	80291e6 <__multadd>
 8028a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028a80:	9004      	str	r0, [sp, #16]
 8028a82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8028a86:	2b00      	cmp	r3, #0
 8028a88:	f000 814d 	beq.w	8028d26 <_dtoa_r+0xb2e>
 8028a8c:	2300      	movs	r3, #0
 8028a8e:	4631      	mov	r1, r6
 8028a90:	220a      	movs	r2, #10
 8028a92:	4620      	mov	r0, r4
 8028a94:	f000 fba7 	bl	80291e6 <__multadd>
 8028a98:	9b02      	ldr	r3, [sp, #8]
 8028a9a:	2b00      	cmp	r3, #0
 8028a9c:	4606      	mov	r6, r0
 8028a9e:	dc4f      	bgt.n	8028b40 <_dtoa_r+0x948>
 8028aa0:	9b06      	ldr	r3, [sp, #24]
 8028aa2:	2b02      	cmp	r3, #2
 8028aa4:	dd4c      	ble.n	8028b40 <_dtoa_r+0x948>
 8028aa6:	e011      	b.n	8028acc <_dtoa_r+0x8d4>
 8028aa8:	d0c9      	beq.n	8028a3e <_dtoa_r+0x846>
 8028aaa:	9a05      	ldr	r2, [sp, #20]
 8028aac:	331c      	adds	r3, #28
 8028aae:	441a      	add	r2, r3
 8028ab0:	9205      	str	r2, [sp, #20]
 8028ab2:	441d      	add	r5, r3
 8028ab4:	4498      	add	r8, r3
 8028ab6:	e7c2      	b.n	8028a3e <_dtoa_r+0x846>
 8028ab8:	4603      	mov	r3, r0
 8028aba:	e7f6      	b.n	8028aaa <_dtoa_r+0x8b2>
 8028abc:	f1b9 0f00 	cmp.w	r9, #0
 8028ac0:	dc38      	bgt.n	8028b34 <_dtoa_r+0x93c>
 8028ac2:	9b06      	ldr	r3, [sp, #24]
 8028ac4:	2b02      	cmp	r3, #2
 8028ac6:	dd35      	ble.n	8028b34 <_dtoa_r+0x93c>
 8028ac8:	f8cd 9008 	str.w	r9, [sp, #8]
 8028acc:	9b02      	ldr	r3, [sp, #8]
 8028ace:	b963      	cbnz	r3, 8028aea <_dtoa_r+0x8f2>
 8028ad0:	4639      	mov	r1, r7
 8028ad2:	2205      	movs	r2, #5
 8028ad4:	4620      	mov	r0, r4
 8028ad6:	f000 fb86 	bl	80291e6 <__multadd>
 8028ada:	4601      	mov	r1, r0
 8028adc:	4607      	mov	r7, r0
 8028ade:	9804      	ldr	r0, [sp, #16]
 8028ae0:	f000 fd4c 	bl	802957c <__mcmp>
 8028ae4:	2800      	cmp	r0, #0
 8028ae6:	f73f adcc 	bgt.w	8028682 <_dtoa_r+0x48a>
 8028aea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028aec:	465d      	mov	r5, fp
 8028aee:	ea6f 0a03 	mvn.w	sl, r3
 8028af2:	f04f 0900 	mov.w	r9, #0
 8028af6:	4639      	mov	r1, r7
 8028af8:	4620      	mov	r0, r4
 8028afa:	f000 fb5d 	bl	80291b8 <_Bfree>
 8028afe:	2e00      	cmp	r6, #0
 8028b00:	f43f aeb7 	beq.w	8028872 <_dtoa_r+0x67a>
 8028b04:	f1b9 0f00 	cmp.w	r9, #0
 8028b08:	d005      	beq.n	8028b16 <_dtoa_r+0x91e>
 8028b0a:	45b1      	cmp	r9, r6
 8028b0c:	d003      	beq.n	8028b16 <_dtoa_r+0x91e>
 8028b0e:	4649      	mov	r1, r9
 8028b10:	4620      	mov	r0, r4
 8028b12:	f000 fb51 	bl	80291b8 <_Bfree>
 8028b16:	4631      	mov	r1, r6
 8028b18:	4620      	mov	r0, r4
 8028b1a:	f000 fb4d 	bl	80291b8 <_Bfree>
 8028b1e:	e6a8      	b.n	8028872 <_dtoa_r+0x67a>
 8028b20:	2700      	movs	r7, #0
 8028b22:	463e      	mov	r6, r7
 8028b24:	e7e1      	b.n	8028aea <_dtoa_r+0x8f2>
 8028b26:	f8dd a020 	ldr.w	sl, [sp, #32]
 8028b2a:	463e      	mov	r6, r7
 8028b2c:	e5a9      	b.n	8028682 <_dtoa_r+0x48a>
 8028b2e:	bf00      	nop
 8028b30:	40240000 	.word	0x40240000
 8028b34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028b36:	f8cd 9008 	str.w	r9, [sp, #8]
 8028b3a:	2b00      	cmp	r3, #0
 8028b3c:	f000 80fa 	beq.w	8028d34 <_dtoa_r+0xb3c>
 8028b40:	2d00      	cmp	r5, #0
 8028b42:	dd05      	ble.n	8028b50 <_dtoa_r+0x958>
 8028b44:	4631      	mov	r1, r6
 8028b46:	462a      	mov	r2, r5
 8028b48:	4620      	mov	r0, r4
 8028b4a:	f000 fcc3 	bl	80294d4 <__lshift>
 8028b4e:	4606      	mov	r6, r0
 8028b50:	9b07      	ldr	r3, [sp, #28]
 8028b52:	2b00      	cmp	r3, #0
 8028b54:	d04c      	beq.n	8028bf0 <_dtoa_r+0x9f8>
 8028b56:	6871      	ldr	r1, [r6, #4]
 8028b58:	4620      	mov	r0, r4
 8028b5a:	f000 faf9 	bl	8029150 <_Balloc>
 8028b5e:	6932      	ldr	r2, [r6, #16]
 8028b60:	3202      	adds	r2, #2
 8028b62:	4605      	mov	r5, r0
 8028b64:	0092      	lsls	r2, r2, #2
 8028b66:	f106 010c 	add.w	r1, r6, #12
 8028b6a:	300c      	adds	r0, #12
 8028b6c:	f7fe fe34 	bl	80277d8 <memcpy>
 8028b70:	2201      	movs	r2, #1
 8028b72:	4629      	mov	r1, r5
 8028b74:	4620      	mov	r0, r4
 8028b76:	f000 fcad 	bl	80294d4 <__lshift>
 8028b7a:	9b00      	ldr	r3, [sp, #0]
 8028b7c:	f8cd b014 	str.w	fp, [sp, #20]
 8028b80:	f003 0301 	and.w	r3, r3, #1
 8028b84:	46b1      	mov	r9, r6
 8028b86:	9307      	str	r3, [sp, #28]
 8028b88:	4606      	mov	r6, r0
 8028b8a:	4639      	mov	r1, r7
 8028b8c:	9804      	ldr	r0, [sp, #16]
 8028b8e:	f7ff faa5 	bl	80280dc <quorem>
 8028b92:	4649      	mov	r1, r9
 8028b94:	4605      	mov	r5, r0
 8028b96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8028b9a:	9804      	ldr	r0, [sp, #16]
 8028b9c:	f000 fcee 	bl	802957c <__mcmp>
 8028ba0:	4632      	mov	r2, r6
 8028ba2:	9000      	str	r0, [sp, #0]
 8028ba4:	4639      	mov	r1, r7
 8028ba6:	4620      	mov	r0, r4
 8028ba8:	f000 fd02 	bl	80295b0 <__mdiff>
 8028bac:	68c3      	ldr	r3, [r0, #12]
 8028bae:	4602      	mov	r2, r0
 8028bb0:	bb03      	cbnz	r3, 8028bf4 <_dtoa_r+0x9fc>
 8028bb2:	4601      	mov	r1, r0
 8028bb4:	9008      	str	r0, [sp, #32]
 8028bb6:	9804      	ldr	r0, [sp, #16]
 8028bb8:	f000 fce0 	bl	802957c <__mcmp>
 8028bbc:	9a08      	ldr	r2, [sp, #32]
 8028bbe:	4603      	mov	r3, r0
 8028bc0:	4611      	mov	r1, r2
 8028bc2:	4620      	mov	r0, r4
 8028bc4:	9308      	str	r3, [sp, #32]
 8028bc6:	f000 faf7 	bl	80291b8 <_Bfree>
 8028bca:	9b08      	ldr	r3, [sp, #32]
 8028bcc:	b9a3      	cbnz	r3, 8028bf8 <_dtoa_r+0xa00>
 8028bce:	9a06      	ldr	r2, [sp, #24]
 8028bd0:	b992      	cbnz	r2, 8028bf8 <_dtoa_r+0xa00>
 8028bd2:	9a07      	ldr	r2, [sp, #28]
 8028bd4:	b982      	cbnz	r2, 8028bf8 <_dtoa_r+0xa00>
 8028bd6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8028bda:	d029      	beq.n	8028c30 <_dtoa_r+0xa38>
 8028bdc:	9b00      	ldr	r3, [sp, #0]
 8028bde:	2b00      	cmp	r3, #0
 8028be0:	dd01      	ble.n	8028be6 <_dtoa_r+0x9ee>
 8028be2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8028be6:	9b05      	ldr	r3, [sp, #20]
 8028be8:	1c5d      	adds	r5, r3, #1
 8028bea:	f883 8000 	strb.w	r8, [r3]
 8028bee:	e782      	b.n	8028af6 <_dtoa_r+0x8fe>
 8028bf0:	4630      	mov	r0, r6
 8028bf2:	e7c2      	b.n	8028b7a <_dtoa_r+0x982>
 8028bf4:	2301      	movs	r3, #1
 8028bf6:	e7e3      	b.n	8028bc0 <_dtoa_r+0x9c8>
 8028bf8:	9a00      	ldr	r2, [sp, #0]
 8028bfa:	2a00      	cmp	r2, #0
 8028bfc:	db04      	blt.n	8028c08 <_dtoa_r+0xa10>
 8028bfe:	d125      	bne.n	8028c4c <_dtoa_r+0xa54>
 8028c00:	9a06      	ldr	r2, [sp, #24]
 8028c02:	bb1a      	cbnz	r2, 8028c4c <_dtoa_r+0xa54>
 8028c04:	9a07      	ldr	r2, [sp, #28]
 8028c06:	bb0a      	cbnz	r2, 8028c4c <_dtoa_r+0xa54>
 8028c08:	2b00      	cmp	r3, #0
 8028c0a:	ddec      	ble.n	8028be6 <_dtoa_r+0x9ee>
 8028c0c:	2201      	movs	r2, #1
 8028c0e:	9904      	ldr	r1, [sp, #16]
 8028c10:	4620      	mov	r0, r4
 8028c12:	f000 fc5f 	bl	80294d4 <__lshift>
 8028c16:	4639      	mov	r1, r7
 8028c18:	9004      	str	r0, [sp, #16]
 8028c1a:	f000 fcaf 	bl	802957c <__mcmp>
 8028c1e:	2800      	cmp	r0, #0
 8028c20:	dc03      	bgt.n	8028c2a <_dtoa_r+0xa32>
 8028c22:	d1e0      	bne.n	8028be6 <_dtoa_r+0x9ee>
 8028c24:	f018 0f01 	tst.w	r8, #1
 8028c28:	d0dd      	beq.n	8028be6 <_dtoa_r+0x9ee>
 8028c2a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8028c2e:	d1d8      	bne.n	8028be2 <_dtoa_r+0x9ea>
 8028c30:	9b05      	ldr	r3, [sp, #20]
 8028c32:	9a05      	ldr	r2, [sp, #20]
 8028c34:	1c5d      	adds	r5, r3, #1
 8028c36:	2339      	movs	r3, #57	; 0x39
 8028c38:	7013      	strb	r3, [r2, #0]
 8028c3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8028c3e:	2b39      	cmp	r3, #57	; 0x39
 8028c40:	f105 32ff 	add.w	r2, r5, #4294967295
 8028c44:	d04f      	beq.n	8028ce6 <_dtoa_r+0xaee>
 8028c46:	3301      	adds	r3, #1
 8028c48:	7013      	strb	r3, [r2, #0]
 8028c4a:	e754      	b.n	8028af6 <_dtoa_r+0x8fe>
 8028c4c:	9a05      	ldr	r2, [sp, #20]
 8028c4e:	2b00      	cmp	r3, #0
 8028c50:	f102 0501 	add.w	r5, r2, #1
 8028c54:	dd06      	ble.n	8028c64 <_dtoa_r+0xa6c>
 8028c56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8028c5a:	d0e9      	beq.n	8028c30 <_dtoa_r+0xa38>
 8028c5c:	f108 0801 	add.w	r8, r8, #1
 8028c60:	9b05      	ldr	r3, [sp, #20]
 8028c62:	e7c2      	b.n	8028bea <_dtoa_r+0x9f2>
 8028c64:	9a02      	ldr	r2, [sp, #8]
 8028c66:	f805 8c01 	strb.w	r8, [r5, #-1]
 8028c6a:	eba5 030b 	sub.w	r3, r5, fp
 8028c6e:	4293      	cmp	r3, r2
 8028c70:	d021      	beq.n	8028cb6 <_dtoa_r+0xabe>
 8028c72:	2300      	movs	r3, #0
 8028c74:	220a      	movs	r2, #10
 8028c76:	9904      	ldr	r1, [sp, #16]
 8028c78:	4620      	mov	r0, r4
 8028c7a:	f000 fab4 	bl	80291e6 <__multadd>
 8028c7e:	45b1      	cmp	r9, r6
 8028c80:	9004      	str	r0, [sp, #16]
 8028c82:	f04f 0300 	mov.w	r3, #0
 8028c86:	f04f 020a 	mov.w	r2, #10
 8028c8a:	4649      	mov	r1, r9
 8028c8c:	4620      	mov	r0, r4
 8028c8e:	d105      	bne.n	8028c9c <_dtoa_r+0xaa4>
 8028c90:	f000 faa9 	bl	80291e6 <__multadd>
 8028c94:	4681      	mov	r9, r0
 8028c96:	4606      	mov	r6, r0
 8028c98:	9505      	str	r5, [sp, #20]
 8028c9a:	e776      	b.n	8028b8a <_dtoa_r+0x992>
 8028c9c:	f000 faa3 	bl	80291e6 <__multadd>
 8028ca0:	4631      	mov	r1, r6
 8028ca2:	4681      	mov	r9, r0
 8028ca4:	2300      	movs	r3, #0
 8028ca6:	220a      	movs	r2, #10
 8028ca8:	4620      	mov	r0, r4
 8028caa:	f000 fa9c 	bl	80291e6 <__multadd>
 8028cae:	4606      	mov	r6, r0
 8028cb0:	e7f2      	b.n	8028c98 <_dtoa_r+0xaa0>
 8028cb2:	f04f 0900 	mov.w	r9, #0
 8028cb6:	2201      	movs	r2, #1
 8028cb8:	9904      	ldr	r1, [sp, #16]
 8028cba:	4620      	mov	r0, r4
 8028cbc:	f000 fc0a 	bl	80294d4 <__lshift>
 8028cc0:	4639      	mov	r1, r7
 8028cc2:	9004      	str	r0, [sp, #16]
 8028cc4:	f000 fc5a 	bl	802957c <__mcmp>
 8028cc8:	2800      	cmp	r0, #0
 8028cca:	dcb6      	bgt.n	8028c3a <_dtoa_r+0xa42>
 8028ccc:	d102      	bne.n	8028cd4 <_dtoa_r+0xadc>
 8028cce:	f018 0f01 	tst.w	r8, #1
 8028cd2:	d1b2      	bne.n	8028c3a <_dtoa_r+0xa42>
 8028cd4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8028cd8:	2b30      	cmp	r3, #48	; 0x30
 8028cda:	f105 32ff 	add.w	r2, r5, #4294967295
 8028cde:	f47f af0a 	bne.w	8028af6 <_dtoa_r+0x8fe>
 8028ce2:	4615      	mov	r5, r2
 8028ce4:	e7f6      	b.n	8028cd4 <_dtoa_r+0xadc>
 8028ce6:	4593      	cmp	fp, r2
 8028ce8:	d105      	bne.n	8028cf6 <_dtoa_r+0xafe>
 8028cea:	2331      	movs	r3, #49	; 0x31
 8028cec:	f10a 0a01 	add.w	sl, sl, #1
 8028cf0:	f88b 3000 	strb.w	r3, [fp]
 8028cf4:	e6ff      	b.n	8028af6 <_dtoa_r+0x8fe>
 8028cf6:	4615      	mov	r5, r2
 8028cf8:	e79f      	b.n	8028c3a <_dtoa_r+0xa42>
 8028cfa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8028d60 <_dtoa_r+0xb68>
 8028cfe:	e007      	b.n	8028d10 <_dtoa_r+0xb18>
 8028d00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8028d02:	f8df b060 	ldr.w	fp, [pc, #96]	; 8028d64 <_dtoa_r+0xb6c>
 8028d06:	b11b      	cbz	r3, 8028d10 <_dtoa_r+0xb18>
 8028d08:	f10b 0308 	add.w	r3, fp, #8
 8028d0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8028d0e:	6013      	str	r3, [r2, #0]
 8028d10:	4658      	mov	r0, fp
 8028d12:	b017      	add	sp, #92	; 0x5c
 8028d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028d18:	9b06      	ldr	r3, [sp, #24]
 8028d1a:	2b01      	cmp	r3, #1
 8028d1c:	f77f ae35 	ble.w	802898a <_dtoa_r+0x792>
 8028d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028d22:	9307      	str	r3, [sp, #28]
 8028d24:	e649      	b.n	80289ba <_dtoa_r+0x7c2>
 8028d26:	9b02      	ldr	r3, [sp, #8]
 8028d28:	2b00      	cmp	r3, #0
 8028d2a:	dc03      	bgt.n	8028d34 <_dtoa_r+0xb3c>
 8028d2c:	9b06      	ldr	r3, [sp, #24]
 8028d2e:	2b02      	cmp	r3, #2
 8028d30:	f73f aecc 	bgt.w	8028acc <_dtoa_r+0x8d4>
 8028d34:	465d      	mov	r5, fp
 8028d36:	4639      	mov	r1, r7
 8028d38:	9804      	ldr	r0, [sp, #16]
 8028d3a:	f7ff f9cf 	bl	80280dc <quorem>
 8028d3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8028d42:	f805 8b01 	strb.w	r8, [r5], #1
 8028d46:	9a02      	ldr	r2, [sp, #8]
 8028d48:	eba5 030b 	sub.w	r3, r5, fp
 8028d4c:	429a      	cmp	r2, r3
 8028d4e:	ddb0      	ble.n	8028cb2 <_dtoa_r+0xaba>
 8028d50:	2300      	movs	r3, #0
 8028d52:	220a      	movs	r2, #10
 8028d54:	9904      	ldr	r1, [sp, #16]
 8028d56:	4620      	mov	r0, r4
 8028d58:	f000 fa45 	bl	80291e6 <__multadd>
 8028d5c:	9004      	str	r0, [sp, #16]
 8028d5e:	e7ea      	b.n	8028d36 <_dtoa_r+0xb3e>
 8028d60:	08029a8c 	.word	0x08029a8c
 8028d64:	08029a8e 	.word	0x08029a8e

08028d68 <__sflush_r>:
 8028d68:	898a      	ldrh	r2, [r1, #12]
 8028d6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028d6e:	4605      	mov	r5, r0
 8028d70:	0710      	lsls	r0, r2, #28
 8028d72:	460c      	mov	r4, r1
 8028d74:	d458      	bmi.n	8028e28 <__sflush_r+0xc0>
 8028d76:	684b      	ldr	r3, [r1, #4]
 8028d78:	2b00      	cmp	r3, #0
 8028d7a:	dc05      	bgt.n	8028d88 <__sflush_r+0x20>
 8028d7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8028d7e:	2b00      	cmp	r3, #0
 8028d80:	dc02      	bgt.n	8028d88 <__sflush_r+0x20>
 8028d82:	2000      	movs	r0, #0
 8028d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028d88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028d8a:	2e00      	cmp	r6, #0
 8028d8c:	d0f9      	beq.n	8028d82 <__sflush_r+0x1a>
 8028d8e:	2300      	movs	r3, #0
 8028d90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8028d94:	682f      	ldr	r7, [r5, #0]
 8028d96:	6a21      	ldr	r1, [r4, #32]
 8028d98:	602b      	str	r3, [r5, #0]
 8028d9a:	d032      	beq.n	8028e02 <__sflush_r+0x9a>
 8028d9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8028d9e:	89a3      	ldrh	r3, [r4, #12]
 8028da0:	075a      	lsls	r2, r3, #29
 8028da2:	d505      	bpl.n	8028db0 <__sflush_r+0x48>
 8028da4:	6863      	ldr	r3, [r4, #4]
 8028da6:	1ac0      	subs	r0, r0, r3
 8028da8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8028daa:	b10b      	cbz	r3, 8028db0 <__sflush_r+0x48>
 8028dac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8028dae:	1ac0      	subs	r0, r0, r3
 8028db0:	2300      	movs	r3, #0
 8028db2:	4602      	mov	r2, r0
 8028db4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028db6:	6a21      	ldr	r1, [r4, #32]
 8028db8:	4628      	mov	r0, r5
 8028dba:	47b0      	blx	r6
 8028dbc:	1c43      	adds	r3, r0, #1
 8028dbe:	89a3      	ldrh	r3, [r4, #12]
 8028dc0:	d106      	bne.n	8028dd0 <__sflush_r+0x68>
 8028dc2:	6829      	ldr	r1, [r5, #0]
 8028dc4:	291d      	cmp	r1, #29
 8028dc6:	d848      	bhi.n	8028e5a <__sflush_r+0xf2>
 8028dc8:	4a29      	ldr	r2, [pc, #164]	; (8028e70 <__sflush_r+0x108>)
 8028dca:	40ca      	lsrs	r2, r1
 8028dcc:	07d6      	lsls	r6, r2, #31
 8028dce:	d544      	bpl.n	8028e5a <__sflush_r+0xf2>
 8028dd0:	2200      	movs	r2, #0
 8028dd2:	6062      	str	r2, [r4, #4]
 8028dd4:	04d9      	lsls	r1, r3, #19
 8028dd6:	6922      	ldr	r2, [r4, #16]
 8028dd8:	6022      	str	r2, [r4, #0]
 8028dda:	d504      	bpl.n	8028de6 <__sflush_r+0x7e>
 8028ddc:	1c42      	adds	r2, r0, #1
 8028dde:	d101      	bne.n	8028de4 <__sflush_r+0x7c>
 8028de0:	682b      	ldr	r3, [r5, #0]
 8028de2:	b903      	cbnz	r3, 8028de6 <__sflush_r+0x7e>
 8028de4:	6560      	str	r0, [r4, #84]	; 0x54
 8028de6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028de8:	602f      	str	r7, [r5, #0]
 8028dea:	2900      	cmp	r1, #0
 8028dec:	d0c9      	beq.n	8028d82 <__sflush_r+0x1a>
 8028dee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028df2:	4299      	cmp	r1, r3
 8028df4:	d002      	beq.n	8028dfc <__sflush_r+0x94>
 8028df6:	4628      	mov	r0, r5
 8028df8:	f000 fc94 	bl	8029724 <_free_r>
 8028dfc:	2000      	movs	r0, #0
 8028dfe:	6360      	str	r0, [r4, #52]	; 0x34
 8028e00:	e7c0      	b.n	8028d84 <__sflush_r+0x1c>
 8028e02:	2301      	movs	r3, #1
 8028e04:	4628      	mov	r0, r5
 8028e06:	47b0      	blx	r6
 8028e08:	1c41      	adds	r1, r0, #1
 8028e0a:	d1c8      	bne.n	8028d9e <__sflush_r+0x36>
 8028e0c:	682b      	ldr	r3, [r5, #0]
 8028e0e:	2b00      	cmp	r3, #0
 8028e10:	d0c5      	beq.n	8028d9e <__sflush_r+0x36>
 8028e12:	2b1d      	cmp	r3, #29
 8028e14:	d001      	beq.n	8028e1a <__sflush_r+0xb2>
 8028e16:	2b16      	cmp	r3, #22
 8028e18:	d101      	bne.n	8028e1e <__sflush_r+0xb6>
 8028e1a:	602f      	str	r7, [r5, #0]
 8028e1c:	e7b1      	b.n	8028d82 <__sflush_r+0x1a>
 8028e1e:	89a3      	ldrh	r3, [r4, #12]
 8028e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028e24:	81a3      	strh	r3, [r4, #12]
 8028e26:	e7ad      	b.n	8028d84 <__sflush_r+0x1c>
 8028e28:	690f      	ldr	r7, [r1, #16]
 8028e2a:	2f00      	cmp	r7, #0
 8028e2c:	d0a9      	beq.n	8028d82 <__sflush_r+0x1a>
 8028e2e:	0793      	lsls	r3, r2, #30
 8028e30:	680e      	ldr	r6, [r1, #0]
 8028e32:	bf08      	it	eq
 8028e34:	694b      	ldreq	r3, [r1, #20]
 8028e36:	600f      	str	r7, [r1, #0]
 8028e38:	bf18      	it	ne
 8028e3a:	2300      	movne	r3, #0
 8028e3c:	eba6 0807 	sub.w	r8, r6, r7
 8028e40:	608b      	str	r3, [r1, #8]
 8028e42:	f1b8 0f00 	cmp.w	r8, #0
 8028e46:	dd9c      	ble.n	8028d82 <__sflush_r+0x1a>
 8028e48:	4643      	mov	r3, r8
 8028e4a:	463a      	mov	r2, r7
 8028e4c:	6a21      	ldr	r1, [r4, #32]
 8028e4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8028e50:	4628      	mov	r0, r5
 8028e52:	47b0      	blx	r6
 8028e54:	2800      	cmp	r0, #0
 8028e56:	dc06      	bgt.n	8028e66 <__sflush_r+0xfe>
 8028e58:	89a3      	ldrh	r3, [r4, #12]
 8028e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028e5e:	81a3      	strh	r3, [r4, #12]
 8028e60:	f04f 30ff 	mov.w	r0, #4294967295
 8028e64:	e78e      	b.n	8028d84 <__sflush_r+0x1c>
 8028e66:	4407      	add	r7, r0
 8028e68:	eba8 0800 	sub.w	r8, r8, r0
 8028e6c:	e7e9      	b.n	8028e42 <__sflush_r+0xda>
 8028e6e:	bf00      	nop
 8028e70:	20400001 	.word	0x20400001

08028e74 <_fflush_r>:
 8028e74:	b538      	push	{r3, r4, r5, lr}
 8028e76:	690b      	ldr	r3, [r1, #16]
 8028e78:	4605      	mov	r5, r0
 8028e7a:	460c      	mov	r4, r1
 8028e7c:	b1db      	cbz	r3, 8028eb6 <_fflush_r+0x42>
 8028e7e:	b118      	cbz	r0, 8028e88 <_fflush_r+0x14>
 8028e80:	6983      	ldr	r3, [r0, #24]
 8028e82:	b90b      	cbnz	r3, 8028e88 <_fflush_r+0x14>
 8028e84:	f000 f860 	bl	8028f48 <__sinit>
 8028e88:	4b0c      	ldr	r3, [pc, #48]	; (8028ebc <_fflush_r+0x48>)
 8028e8a:	429c      	cmp	r4, r3
 8028e8c:	d109      	bne.n	8028ea2 <_fflush_r+0x2e>
 8028e8e:	686c      	ldr	r4, [r5, #4]
 8028e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028e94:	b17b      	cbz	r3, 8028eb6 <_fflush_r+0x42>
 8028e96:	4621      	mov	r1, r4
 8028e98:	4628      	mov	r0, r5
 8028e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028e9e:	f7ff bf63 	b.w	8028d68 <__sflush_r>
 8028ea2:	4b07      	ldr	r3, [pc, #28]	; (8028ec0 <_fflush_r+0x4c>)
 8028ea4:	429c      	cmp	r4, r3
 8028ea6:	d101      	bne.n	8028eac <_fflush_r+0x38>
 8028ea8:	68ac      	ldr	r4, [r5, #8]
 8028eaa:	e7f1      	b.n	8028e90 <_fflush_r+0x1c>
 8028eac:	4b05      	ldr	r3, [pc, #20]	; (8028ec4 <_fflush_r+0x50>)
 8028eae:	429c      	cmp	r4, r3
 8028eb0:	bf08      	it	eq
 8028eb2:	68ec      	ldreq	r4, [r5, #12]
 8028eb4:	e7ec      	b.n	8028e90 <_fflush_r+0x1c>
 8028eb6:	2000      	movs	r0, #0
 8028eb8:	bd38      	pop	{r3, r4, r5, pc}
 8028eba:	bf00      	nop
 8028ebc:	08029abc 	.word	0x08029abc
 8028ec0:	08029adc 	.word	0x08029adc
 8028ec4:	08029a9c 	.word	0x08029a9c

08028ec8 <std>:
 8028ec8:	2300      	movs	r3, #0
 8028eca:	b510      	push	{r4, lr}
 8028ecc:	4604      	mov	r4, r0
 8028ece:	e9c0 3300 	strd	r3, r3, [r0]
 8028ed2:	6083      	str	r3, [r0, #8]
 8028ed4:	8181      	strh	r1, [r0, #12]
 8028ed6:	6643      	str	r3, [r0, #100]	; 0x64
 8028ed8:	81c2      	strh	r2, [r0, #14]
 8028eda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8028ede:	6183      	str	r3, [r0, #24]
 8028ee0:	4619      	mov	r1, r3
 8028ee2:	2208      	movs	r2, #8
 8028ee4:	305c      	adds	r0, #92	; 0x5c
 8028ee6:	f7fe fc82 	bl	80277ee <memset>
 8028eea:	4b05      	ldr	r3, [pc, #20]	; (8028f00 <std+0x38>)
 8028eec:	6263      	str	r3, [r4, #36]	; 0x24
 8028eee:	4b05      	ldr	r3, [pc, #20]	; (8028f04 <std+0x3c>)
 8028ef0:	62a3      	str	r3, [r4, #40]	; 0x28
 8028ef2:	4b05      	ldr	r3, [pc, #20]	; (8028f08 <std+0x40>)
 8028ef4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8028ef6:	4b05      	ldr	r3, [pc, #20]	; (8028f0c <std+0x44>)
 8028ef8:	6224      	str	r4, [r4, #32]
 8028efa:	6323      	str	r3, [r4, #48]	; 0x30
 8028efc:	bd10      	pop	{r4, pc}
 8028efe:	bf00      	nop
 8028f00:	08029895 	.word	0x08029895
 8028f04:	080298b7 	.word	0x080298b7
 8028f08:	080298ef 	.word	0x080298ef
 8028f0c:	08029913 	.word	0x08029913

08028f10 <_cleanup_r>:
 8028f10:	4901      	ldr	r1, [pc, #4]	; (8028f18 <_cleanup_r+0x8>)
 8028f12:	f000 b885 	b.w	8029020 <_fwalk_reent>
 8028f16:	bf00      	nop
 8028f18:	08028e75 	.word	0x08028e75

08028f1c <__sfmoreglue>:
 8028f1c:	b570      	push	{r4, r5, r6, lr}
 8028f1e:	1e4a      	subs	r2, r1, #1
 8028f20:	2568      	movs	r5, #104	; 0x68
 8028f22:	4355      	muls	r5, r2
 8028f24:	460e      	mov	r6, r1
 8028f26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8028f2a:	f000 fc49 	bl	80297c0 <_malloc_r>
 8028f2e:	4604      	mov	r4, r0
 8028f30:	b140      	cbz	r0, 8028f44 <__sfmoreglue+0x28>
 8028f32:	2100      	movs	r1, #0
 8028f34:	e9c0 1600 	strd	r1, r6, [r0]
 8028f38:	300c      	adds	r0, #12
 8028f3a:	60a0      	str	r0, [r4, #8]
 8028f3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8028f40:	f7fe fc55 	bl	80277ee <memset>
 8028f44:	4620      	mov	r0, r4
 8028f46:	bd70      	pop	{r4, r5, r6, pc}

08028f48 <__sinit>:
 8028f48:	6983      	ldr	r3, [r0, #24]
 8028f4a:	b510      	push	{r4, lr}
 8028f4c:	4604      	mov	r4, r0
 8028f4e:	bb33      	cbnz	r3, 8028f9e <__sinit+0x56>
 8028f50:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8028f54:	6503      	str	r3, [r0, #80]	; 0x50
 8028f56:	4b12      	ldr	r3, [pc, #72]	; (8028fa0 <__sinit+0x58>)
 8028f58:	4a12      	ldr	r2, [pc, #72]	; (8028fa4 <__sinit+0x5c>)
 8028f5a:	681b      	ldr	r3, [r3, #0]
 8028f5c:	6282      	str	r2, [r0, #40]	; 0x28
 8028f5e:	4298      	cmp	r0, r3
 8028f60:	bf04      	itt	eq
 8028f62:	2301      	moveq	r3, #1
 8028f64:	6183      	streq	r3, [r0, #24]
 8028f66:	f000 f81f 	bl	8028fa8 <__sfp>
 8028f6a:	6060      	str	r0, [r4, #4]
 8028f6c:	4620      	mov	r0, r4
 8028f6e:	f000 f81b 	bl	8028fa8 <__sfp>
 8028f72:	60a0      	str	r0, [r4, #8]
 8028f74:	4620      	mov	r0, r4
 8028f76:	f000 f817 	bl	8028fa8 <__sfp>
 8028f7a:	2200      	movs	r2, #0
 8028f7c:	60e0      	str	r0, [r4, #12]
 8028f7e:	2104      	movs	r1, #4
 8028f80:	6860      	ldr	r0, [r4, #4]
 8028f82:	f7ff ffa1 	bl	8028ec8 <std>
 8028f86:	2201      	movs	r2, #1
 8028f88:	2109      	movs	r1, #9
 8028f8a:	68a0      	ldr	r0, [r4, #8]
 8028f8c:	f7ff ff9c 	bl	8028ec8 <std>
 8028f90:	2202      	movs	r2, #2
 8028f92:	2112      	movs	r1, #18
 8028f94:	68e0      	ldr	r0, [r4, #12]
 8028f96:	f7ff ff97 	bl	8028ec8 <std>
 8028f9a:	2301      	movs	r3, #1
 8028f9c:	61a3      	str	r3, [r4, #24]
 8028f9e:	bd10      	pop	{r4, pc}
 8028fa0:	08029a78 	.word	0x08029a78
 8028fa4:	08028f11 	.word	0x08028f11

08028fa8 <__sfp>:
 8028fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028faa:	4b1b      	ldr	r3, [pc, #108]	; (8029018 <__sfp+0x70>)
 8028fac:	681e      	ldr	r6, [r3, #0]
 8028fae:	69b3      	ldr	r3, [r6, #24]
 8028fb0:	4607      	mov	r7, r0
 8028fb2:	b913      	cbnz	r3, 8028fba <__sfp+0x12>
 8028fb4:	4630      	mov	r0, r6
 8028fb6:	f7ff ffc7 	bl	8028f48 <__sinit>
 8028fba:	3648      	adds	r6, #72	; 0x48
 8028fbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8028fc0:	3b01      	subs	r3, #1
 8028fc2:	d503      	bpl.n	8028fcc <__sfp+0x24>
 8028fc4:	6833      	ldr	r3, [r6, #0]
 8028fc6:	b133      	cbz	r3, 8028fd6 <__sfp+0x2e>
 8028fc8:	6836      	ldr	r6, [r6, #0]
 8028fca:	e7f7      	b.n	8028fbc <__sfp+0x14>
 8028fcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8028fd0:	b16d      	cbz	r5, 8028fee <__sfp+0x46>
 8028fd2:	3468      	adds	r4, #104	; 0x68
 8028fd4:	e7f4      	b.n	8028fc0 <__sfp+0x18>
 8028fd6:	2104      	movs	r1, #4
 8028fd8:	4638      	mov	r0, r7
 8028fda:	f7ff ff9f 	bl	8028f1c <__sfmoreglue>
 8028fde:	6030      	str	r0, [r6, #0]
 8028fe0:	2800      	cmp	r0, #0
 8028fe2:	d1f1      	bne.n	8028fc8 <__sfp+0x20>
 8028fe4:	230c      	movs	r3, #12
 8028fe6:	603b      	str	r3, [r7, #0]
 8028fe8:	4604      	mov	r4, r0
 8028fea:	4620      	mov	r0, r4
 8028fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028fee:	4b0b      	ldr	r3, [pc, #44]	; (802901c <__sfp+0x74>)
 8028ff0:	6665      	str	r5, [r4, #100]	; 0x64
 8028ff2:	e9c4 5500 	strd	r5, r5, [r4]
 8028ff6:	60a5      	str	r5, [r4, #8]
 8028ff8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8028ffc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8029000:	2208      	movs	r2, #8
 8029002:	4629      	mov	r1, r5
 8029004:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8029008:	f7fe fbf1 	bl	80277ee <memset>
 802900c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8029010:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8029014:	e7e9      	b.n	8028fea <__sfp+0x42>
 8029016:	bf00      	nop
 8029018:	08029a78 	.word	0x08029a78
 802901c:	ffff0001 	.word	0xffff0001

08029020 <_fwalk_reent>:
 8029020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029024:	4680      	mov	r8, r0
 8029026:	4689      	mov	r9, r1
 8029028:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802902c:	2600      	movs	r6, #0
 802902e:	b914      	cbnz	r4, 8029036 <_fwalk_reent+0x16>
 8029030:	4630      	mov	r0, r6
 8029032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029036:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 802903a:	3f01      	subs	r7, #1
 802903c:	d501      	bpl.n	8029042 <_fwalk_reent+0x22>
 802903e:	6824      	ldr	r4, [r4, #0]
 8029040:	e7f5      	b.n	802902e <_fwalk_reent+0xe>
 8029042:	89ab      	ldrh	r3, [r5, #12]
 8029044:	2b01      	cmp	r3, #1
 8029046:	d907      	bls.n	8029058 <_fwalk_reent+0x38>
 8029048:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802904c:	3301      	adds	r3, #1
 802904e:	d003      	beq.n	8029058 <_fwalk_reent+0x38>
 8029050:	4629      	mov	r1, r5
 8029052:	4640      	mov	r0, r8
 8029054:	47c8      	blx	r9
 8029056:	4306      	orrs	r6, r0
 8029058:	3568      	adds	r5, #104	; 0x68
 802905a:	e7ee      	b.n	802903a <_fwalk_reent+0x1a>

0802905c <_localeconv_r>:
 802905c:	4b04      	ldr	r3, [pc, #16]	; (8029070 <_localeconv_r+0x14>)
 802905e:	681b      	ldr	r3, [r3, #0]
 8029060:	6a18      	ldr	r0, [r3, #32]
 8029062:	4b04      	ldr	r3, [pc, #16]	; (8029074 <_localeconv_r+0x18>)
 8029064:	2800      	cmp	r0, #0
 8029066:	bf08      	it	eq
 8029068:	4618      	moveq	r0, r3
 802906a:	30f0      	adds	r0, #240	; 0xf0
 802906c:	4770      	bx	lr
 802906e:	bf00      	nop
 8029070:	2000000c 	.word	0x2000000c
 8029074:	20000070 	.word	0x20000070

08029078 <__swhatbuf_r>:
 8029078:	b570      	push	{r4, r5, r6, lr}
 802907a:	460e      	mov	r6, r1
 802907c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029080:	2900      	cmp	r1, #0
 8029082:	b096      	sub	sp, #88	; 0x58
 8029084:	4614      	mov	r4, r2
 8029086:	461d      	mov	r5, r3
 8029088:	da07      	bge.n	802909a <__swhatbuf_r+0x22>
 802908a:	2300      	movs	r3, #0
 802908c:	602b      	str	r3, [r5, #0]
 802908e:	89b3      	ldrh	r3, [r6, #12]
 8029090:	061a      	lsls	r2, r3, #24
 8029092:	d410      	bmi.n	80290b6 <__swhatbuf_r+0x3e>
 8029094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8029098:	e00e      	b.n	80290b8 <__swhatbuf_r+0x40>
 802909a:	466a      	mov	r2, sp
 802909c:	f000 fc60 	bl	8029960 <_fstat_r>
 80290a0:	2800      	cmp	r0, #0
 80290a2:	dbf2      	blt.n	802908a <__swhatbuf_r+0x12>
 80290a4:	9a01      	ldr	r2, [sp, #4]
 80290a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80290aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80290ae:	425a      	negs	r2, r3
 80290b0:	415a      	adcs	r2, r3
 80290b2:	602a      	str	r2, [r5, #0]
 80290b4:	e7ee      	b.n	8029094 <__swhatbuf_r+0x1c>
 80290b6:	2340      	movs	r3, #64	; 0x40
 80290b8:	2000      	movs	r0, #0
 80290ba:	6023      	str	r3, [r4, #0]
 80290bc:	b016      	add	sp, #88	; 0x58
 80290be:	bd70      	pop	{r4, r5, r6, pc}

080290c0 <__smakebuf_r>:
 80290c0:	898b      	ldrh	r3, [r1, #12]
 80290c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80290c4:	079d      	lsls	r5, r3, #30
 80290c6:	4606      	mov	r6, r0
 80290c8:	460c      	mov	r4, r1
 80290ca:	d507      	bpl.n	80290dc <__smakebuf_r+0x1c>
 80290cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80290d0:	6023      	str	r3, [r4, #0]
 80290d2:	6123      	str	r3, [r4, #16]
 80290d4:	2301      	movs	r3, #1
 80290d6:	6163      	str	r3, [r4, #20]
 80290d8:	b002      	add	sp, #8
 80290da:	bd70      	pop	{r4, r5, r6, pc}
 80290dc:	ab01      	add	r3, sp, #4
 80290de:	466a      	mov	r2, sp
 80290e0:	f7ff ffca 	bl	8029078 <__swhatbuf_r>
 80290e4:	9900      	ldr	r1, [sp, #0]
 80290e6:	4605      	mov	r5, r0
 80290e8:	4630      	mov	r0, r6
 80290ea:	f000 fb69 	bl	80297c0 <_malloc_r>
 80290ee:	b948      	cbnz	r0, 8029104 <__smakebuf_r+0x44>
 80290f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80290f4:	059a      	lsls	r2, r3, #22
 80290f6:	d4ef      	bmi.n	80290d8 <__smakebuf_r+0x18>
 80290f8:	f023 0303 	bic.w	r3, r3, #3
 80290fc:	f043 0302 	orr.w	r3, r3, #2
 8029100:	81a3      	strh	r3, [r4, #12]
 8029102:	e7e3      	b.n	80290cc <__smakebuf_r+0xc>
 8029104:	4b0d      	ldr	r3, [pc, #52]	; (802913c <__smakebuf_r+0x7c>)
 8029106:	62b3      	str	r3, [r6, #40]	; 0x28
 8029108:	89a3      	ldrh	r3, [r4, #12]
 802910a:	6020      	str	r0, [r4, #0]
 802910c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8029110:	81a3      	strh	r3, [r4, #12]
 8029112:	9b00      	ldr	r3, [sp, #0]
 8029114:	6163      	str	r3, [r4, #20]
 8029116:	9b01      	ldr	r3, [sp, #4]
 8029118:	6120      	str	r0, [r4, #16]
 802911a:	b15b      	cbz	r3, 8029134 <__smakebuf_r+0x74>
 802911c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029120:	4630      	mov	r0, r6
 8029122:	f000 fc2f 	bl	8029984 <_isatty_r>
 8029126:	b128      	cbz	r0, 8029134 <__smakebuf_r+0x74>
 8029128:	89a3      	ldrh	r3, [r4, #12]
 802912a:	f023 0303 	bic.w	r3, r3, #3
 802912e:	f043 0301 	orr.w	r3, r3, #1
 8029132:	81a3      	strh	r3, [r4, #12]
 8029134:	89a3      	ldrh	r3, [r4, #12]
 8029136:	431d      	orrs	r5, r3
 8029138:	81a5      	strh	r5, [r4, #12]
 802913a:	e7cd      	b.n	80290d8 <__smakebuf_r+0x18>
 802913c:	08028f11 	.word	0x08028f11

08029140 <malloc>:
 8029140:	4b02      	ldr	r3, [pc, #8]	; (802914c <malloc+0xc>)
 8029142:	4601      	mov	r1, r0
 8029144:	6818      	ldr	r0, [r3, #0]
 8029146:	f000 bb3b 	b.w	80297c0 <_malloc_r>
 802914a:	bf00      	nop
 802914c:	2000000c 	.word	0x2000000c

08029150 <_Balloc>:
 8029150:	b570      	push	{r4, r5, r6, lr}
 8029152:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8029154:	4604      	mov	r4, r0
 8029156:	460e      	mov	r6, r1
 8029158:	b93d      	cbnz	r5, 802916a <_Balloc+0x1a>
 802915a:	2010      	movs	r0, #16
 802915c:	f7ff fff0 	bl	8029140 <malloc>
 8029160:	6260      	str	r0, [r4, #36]	; 0x24
 8029162:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8029166:	6005      	str	r5, [r0, #0]
 8029168:	60c5      	str	r5, [r0, #12]
 802916a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 802916c:	68eb      	ldr	r3, [r5, #12]
 802916e:	b183      	cbz	r3, 8029192 <_Balloc+0x42>
 8029170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8029172:	68db      	ldr	r3, [r3, #12]
 8029174:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8029178:	b9b8      	cbnz	r0, 80291aa <_Balloc+0x5a>
 802917a:	2101      	movs	r1, #1
 802917c:	fa01 f506 	lsl.w	r5, r1, r6
 8029180:	1d6a      	adds	r2, r5, #5
 8029182:	0092      	lsls	r2, r2, #2
 8029184:	4620      	mov	r0, r4
 8029186:	f000 fabf 	bl	8029708 <_calloc_r>
 802918a:	b160      	cbz	r0, 80291a6 <_Balloc+0x56>
 802918c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8029190:	e00e      	b.n	80291b0 <_Balloc+0x60>
 8029192:	2221      	movs	r2, #33	; 0x21
 8029194:	2104      	movs	r1, #4
 8029196:	4620      	mov	r0, r4
 8029198:	f000 fab6 	bl	8029708 <_calloc_r>
 802919c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802919e:	60e8      	str	r0, [r5, #12]
 80291a0:	68db      	ldr	r3, [r3, #12]
 80291a2:	2b00      	cmp	r3, #0
 80291a4:	d1e4      	bne.n	8029170 <_Balloc+0x20>
 80291a6:	2000      	movs	r0, #0
 80291a8:	bd70      	pop	{r4, r5, r6, pc}
 80291aa:	6802      	ldr	r2, [r0, #0]
 80291ac:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80291b0:	2300      	movs	r3, #0
 80291b2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80291b6:	e7f7      	b.n	80291a8 <_Balloc+0x58>

080291b8 <_Bfree>:
 80291b8:	b570      	push	{r4, r5, r6, lr}
 80291ba:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80291bc:	4606      	mov	r6, r0
 80291be:	460d      	mov	r5, r1
 80291c0:	b93c      	cbnz	r4, 80291d2 <_Bfree+0x1a>
 80291c2:	2010      	movs	r0, #16
 80291c4:	f7ff ffbc 	bl	8029140 <malloc>
 80291c8:	6270      	str	r0, [r6, #36]	; 0x24
 80291ca:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80291ce:	6004      	str	r4, [r0, #0]
 80291d0:	60c4      	str	r4, [r0, #12]
 80291d2:	b13d      	cbz	r5, 80291e4 <_Bfree+0x2c>
 80291d4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80291d6:	686a      	ldr	r2, [r5, #4]
 80291d8:	68db      	ldr	r3, [r3, #12]
 80291da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80291de:	6029      	str	r1, [r5, #0]
 80291e0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80291e4:	bd70      	pop	{r4, r5, r6, pc}

080291e6 <__multadd>:
 80291e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80291ea:	690d      	ldr	r5, [r1, #16]
 80291ec:	461f      	mov	r7, r3
 80291ee:	4606      	mov	r6, r0
 80291f0:	460c      	mov	r4, r1
 80291f2:	f101 0c14 	add.w	ip, r1, #20
 80291f6:	2300      	movs	r3, #0
 80291f8:	f8dc 0000 	ldr.w	r0, [ip]
 80291fc:	b281      	uxth	r1, r0
 80291fe:	fb02 7101 	mla	r1, r2, r1, r7
 8029202:	0c0f      	lsrs	r7, r1, #16
 8029204:	0c00      	lsrs	r0, r0, #16
 8029206:	fb02 7000 	mla	r0, r2, r0, r7
 802920a:	b289      	uxth	r1, r1
 802920c:	3301      	adds	r3, #1
 802920e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8029212:	429d      	cmp	r5, r3
 8029214:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8029218:	f84c 1b04 	str.w	r1, [ip], #4
 802921c:	dcec      	bgt.n	80291f8 <__multadd+0x12>
 802921e:	b1d7      	cbz	r7, 8029256 <__multadd+0x70>
 8029220:	68a3      	ldr	r3, [r4, #8]
 8029222:	42ab      	cmp	r3, r5
 8029224:	dc12      	bgt.n	802924c <__multadd+0x66>
 8029226:	6861      	ldr	r1, [r4, #4]
 8029228:	4630      	mov	r0, r6
 802922a:	3101      	adds	r1, #1
 802922c:	f7ff ff90 	bl	8029150 <_Balloc>
 8029230:	6922      	ldr	r2, [r4, #16]
 8029232:	3202      	adds	r2, #2
 8029234:	f104 010c 	add.w	r1, r4, #12
 8029238:	4680      	mov	r8, r0
 802923a:	0092      	lsls	r2, r2, #2
 802923c:	300c      	adds	r0, #12
 802923e:	f7fe facb 	bl	80277d8 <memcpy>
 8029242:	4621      	mov	r1, r4
 8029244:	4630      	mov	r0, r6
 8029246:	f7ff ffb7 	bl	80291b8 <_Bfree>
 802924a:	4644      	mov	r4, r8
 802924c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8029250:	3501      	adds	r5, #1
 8029252:	615f      	str	r7, [r3, #20]
 8029254:	6125      	str	r5, [r4, #16]
 8029256:	4620      	mov	r0, r4
 8029258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802925c <__hi0bits>:
 802925c:	0c02      	lsrs	r2, r0, #16
 802925e:	0412      	lsls	r2, r2, #16
 8029260:	4603      	mov	r3, r0
 8029262:	b9b2      	cbnz	r2, 8029292 <__hi0bits+0x36>
 8029264:	0403      	lsls	r3, r0, #16
 8029266:	2010      	movs	r0, #16
 8029268:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 802926c:	bf04      	itt	eq
 802926e:	021b      	lsleq	r3, r3, #8
 8029270:	3008      	addeq	r0, #8
 8029272:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8029276:	bf04      	itt	eq
 8029278:	011b      	lsleq	r3, r3, #4
 802927a:	3004      	addeq	r0, #4
 802927c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8029280:	bf04      	itt	eq
 8029282:	009b      	lsleq	r3, r3, #2
 8029284:	3002      	addeq	r0, #2
 8029286:	2b00      	cmp	r3, #0
 8029288:	db06      	blt.n	8029298 <__hi0bits+0x3c>
 802928a:	005b      	lsls	r3, r3, #1
 802928c:	d503      	bpl.n	8029296 <__hi0bits+0x3a>
 802928e:	3001      	adds	r0, #1
 8029290:	4770      	bx	lr
 8029292:	2000      	movs	r0, #0
 8029294:	e7e8      	b.n	8029268 <__hi0bits+0xc>
 8029296:	2020      	movs	r0, #32
 8029298:	4770      	bx	lr

0802929a <__lo0bits>:
 802929a:	6803      	ldr	r3, [r0, #0]
 802929c:	f013 0207 	ands.w	r2, r3, #7
 80292a0:	4601      	mov	r1, r0
 80292a2:	d00b      	beq.n	80292bc <__lo0bits+0x22>
 80292a4:	07da      	lsls	r2, r3, #31
 80292a6:	d423      	bmi.n	80292f0 <__lo0bits+0x56>
 80292a8:	0798      	lsls	r0, r3, #30
 80292aa:	bf49      	itett	mi
 80292ac:	085b      	lsrmi	r3, r3, #1
 80292ae:	089b      	lsrpl	r3, r3, #2
 80292b0:	2001      	movmi	r0, #1
 80292b2:	600b      	strmi	r3, [r1, #0]
 80292b4:	bf5c      	itt	pl
 80292b6:	600b      	strpl	r3, [r1, #0]
 80292b8:	2002      	movpl	r0, #2
 80292ba:	4770      	bx	lr
 80292bc:	b298      	uxth	r0, r3
 80292be:	b9a8      	cbnz	r0, 80292ec <__lo0bits+0x52>
 80292c0:	0c1b      	lsrs	r3, r3, #16
 80292c2:	2010      	movs	r0, #16
 80292c4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80292c8:	bf04      	itt	eq
 80292ca:	0a1b      	lsreq	r3, r3, #8
 80292cc:	3008      	addeq	r0, #8
 80292ce:	071a      	lsls	r2, r3, #28
 80292d0:	bf04      	itt	eq
 80292d2:	091b      	lsreq	r3, r3, #4
 80292d4:	3004      	addeq	r0, #4
 80292d6:	079a      	lsls	r2, r3, #30
 80292d8:	bf04      	itt	eq
 80292da:	089b      	lsreq	r3, r3, #2
 80292dc:	3002      	addeq	r0, #2
 80292de:	07da      	lsls	r2, r3, #31
 80292e0:	d402      	bmi.n	80292e8 <__lo0bits+0x4e>
 80292e2:	085b      	lsrs	r3, r3, #1
 80292e4:	d006      	beq.n	80292f4 <__lo0bits+0x5a>
 80292e6:	3001      	adds	r0, #1
 80292e8:	600b      	str	r3, [r1, #0]
 80292ea:	4770      	bx	lr
 80292ec:	4610      	mov	r0, r2
 80292ee:	e7e9      	b.n	80292c4 <__lo0bits+0x2a>
 80292f0:	2000      	movs	r0, #0
 80292f2:	4770      	bx	lr
 80292f4:	2020      	movs	r0, #32
 80292f6:	4770      	bx	lr

080292f8 <__i2b>:
 80292f8:	b510      	push	{r4, lr}
 80292fa:	460c      	mov	r4, r1
 80292fc:	2101      	movs	r1, #1
 80292fe:	f7ff ff27 	bl	8029150 <_Balloc>
 8029302:	2201      	movs	r2, #1
 8029304:	6144      	str	r4, [r0, #20]
 8029306:	6102      	str	r2, [r0, #16]
 8029308:	bd10      	pop	{r4, pc}

0802930a <__multiply>:
 802930a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802930e:	4614      	mov	r4, r2
 8029310:	690a      	ldr	r2, [r1, #16]
 8029312:	6923      	ldr	r3, [r4, #16]
 8029314:	429a      	cmp	r2, r3
 8029316:	bfb8      	it	lt
 8029318:	460b      	movlt	r3, r1
 802931a:	4688      	mov	r8, r1
 802931c:	bfbc      	itt	lt
 802931e:	46a0      	movlt	r8, r4
 8029320:	461c      	movlt	r4, r3
 8029322:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8029326:	f8d4 9010 	ldr.w	r9, [r4, #16]
 802932a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802932e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8029332:	eb07 0609 	add.w	r6, r7, r9
 8029336:	42b3      	cmp	r3, r6
 8029338:	bfb8      	it	lt
 802933a:	3101      	addlt	r1, #1
 802933c:	f7ff ff08 	bl	8029150 <_Balloc>
 8029340:	f100 0514 	add.w	r5, r0, #20
 8029344:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8029348:	462b      	mov	r3, r5
 802934a:	2200      	movs	r2, #0
 802934c:	4573      	cmp	r3, lr
 802934e:	d316      	bcc.n	802937e <__multiply+0x74>
 8029350:	f104 0214 	add.w	r2, r4, #20
 8029354:	f108 0114 	add.w	r1, r8, #20
 8029358:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 802935c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8029360:	9300      	str	r3, [sp, #0]
 8029362:	9b00      	ldr	r3, [sp, #0]
 8029364:	9201      	str	r2, [sp, #4]
 8029366:	4293      	cmp	r3, r2
 8029368:	d80c      	bhi.n	8029384 <__multiply+0x7a>
 802936a:	2e00      	cmp	r6, #0
 802936c:	dd03      	ble.n	8029376 <__multiply+0x6c>
 802936e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8029372:	2b00      	cmp	r3, #0
 8029374:	d05d      	beq.n	8029432 <__multiply+0x128>
 8029376:	6106      	str	r6, [r0, #16]
 8029378:	b003      	add	sp, #12
 802937a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802937e:	f843 2b04 	str.w	r2, [r3], #4
 8029382:	e7e3      	b.n	802934c <__multiply+0x42>
 8029384:	f8b2 b000 	ldrh.w	fp, [r2]
 8029388:	f1bb 0f00 	cmp.w	fp, #0
 802938c:	d023      	beq.n	80293d6 <__multiply+0xcc>
 802938e:	4689      	mov	r9, r1
 8029390:	46ac      	mov	ip, r5
 8029392:	f04f 0800 	mov.w	r8, #0
 8029396:	f859 4b04 	ldr.w	r4, [r9], #4
 802939a:	f8dc a000 	ldr.w	sl, [ip]
 802939e:	b2a3      	uxth	r3, r4
 80293a0:	fa1f fa8a 	uxth.w	sl, sl
 80293a4:	fb0b a303 	mla	r3, fp, r3, sl
 80293a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80293ac:	f8dc 4000 	ldr.w	r4, [ip]
 80293b0:	4443      	add	r3, r8
 80293b2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80293b6:	fb0b 840a 	mla	r4, fp, sl, r8
 80293ba:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80293be:	46e2      	mov	sl, ip
 80293c0:	b29b      	uxth	r3, r3
 80293c2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80293c6:	454f      	cmp	r7, r9
 80293c8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80293cc:	f84a 3b04 	str.w	r3, [sl], #4
 80293d0:	d82b      	bhi.n	802942a <__multiply+0x120>
 80293d2:	f8cc 8004 	str.w	r8, [ip, #4]
 80293d6:	9b01      	ldr	r3, [sp, #4]
 80293d8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80293dc:	3204      	adds	r2, #4
 80293de:	f1ba 0f00 	cmp.w	sl, #0
 80293e2:	d020      	beq.n	8029426 <__multiply+0x11c>
 80293e4:	682b      	ldr	r3, [r5, #0]
 80293e6:	4689      	mov	r9, r1
 80293e8:	46a8      	mov	r8, r5
 80293ea:	f04f 0b00 	mov.w	fp, #0
 80293ee:	f8b9 c000 	ldrh.w	ip, [r9]
 80293f2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80293f6:	fb0a 440c 	mla	r4, sl, ip, r4
 80293fa:	445c      	add	r4, fp
 80293fc:	46c4      	mov	ip, r8
 80293fe:	b29b      	uxth	r3, r3
 8029400:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8029404:	f84c 3b04 	str.w	r3, [ip], #4
 8029408:	f859 3b04 	ldr.w	r3, [r9], #4
 802940c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8029410:	0c1b      	lsrs	r3, r3, #16
 8029412:	fb0a b303 	mla	r3, sl, r3, fp
 8029416:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 802941a:	454f      	cmp	r7, r9
 802941c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8029420:	d805      	bhi.n	802942e <__multiply+0x124>
 8029422:	f8c8 3004 	str.w	r3, [r8, #4]
 8029426:	3504      	adds	r5, #4
 8029428:	e79b      	b.n	8029362 <__multiply+0x58>
 802942a:	46d4      	mov	ip, sl
 802942c:	e7b3      	b.n	8029396 <__multiply+0x8c>
 802942e:	46e0      	mov	r8, ip
 8029430:	e7dd      	b.n	80293ee <__multiply+0xe4>
 8029432:	3e01      	subs	r6, #1
 8029434:	e799      	b.n	802936a <__multiply+0x60>
	...

08029438 <__pow5mult>:
 8029438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802943c:	4615      	mov	r5, r2
 802943e:	f012 0203 	ands.w	r2, r2, #3
 8029442:	4606      	mov	r6, r0
 8029444:	460f      	mov	r7, r1
 8029446:	d007      	beq.n	8029458 <__pow5mult+0x20>
 8029448:	3a01      	subs	r2, #1
 802944a:	4c21      	ldr	r4, [pc, #132]	; (80294d0 <__pow5mult+0x98>)
 802944c:	2300      	movs	r3, #0
 802944e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8029452:	f7ff fec8 	bl	80291e6 <__multadd>
 8029456:	4607      	mov	r7, r0
 8029458:	10ad      	asrs	r5, r5, #2
 802945a:	d035      	beq.n	80294c8 <__pow5mult+0x90>
 802945c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802945e:	b93c      	cbnz	r4, 8029470 <__pow5mult+0x38>
 8029460:	2010      	movs	r0, #16
 8029462:	f7ff fe6d 	bl	8029140 <malloc>
 8029466:	6270      	str	r0, [r6, #36]	; 0x24
 8029468:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802946c:	6004      	str	r4, [r0, #0]
 802946e:	60c4      	str	r4, [r0, #12]
 8029470:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8029474:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8029478:	b94c      	cbnz	r4, 802948e <__pow5mult+0x56>
 802947a:	f240 2171 	movw	r1, #625	; 0x271
 802947e:	4630      	mov	r0, r6
 8029480:	f7ff ff3a 	bl	80292f8 <__i2b>
 8029484:	2300      	movs	r3, #0
 8029486:	f8c8 0008 	str.w	r0, [r8, #8]
 802948a:	4604      	mov	r4, r0
 802948c:	6003      	str	r3, [r0, #0]
 802948e:	f04f 0800 	mov.w	r8, #0
 8029492:	07eb      	lsls	r3, r5, #31
 8029494:	d50a      	bpl.n	80294ac <__pow5mult+0x74>
 8029496:	4639      	mov	r1, r7
 8029498:	4622      	mov	r2, r4
 802949a:	4630      	mov	r0, r6
 802949c:	f7ff ff35 	bl	802930a <__multiply>
 80294a0:	4639      	mov	r1, r7
 80294a2:	4681      	mov	r9, r0
 80294a4:	4630      	mov	r0, r6
 80294a6:	f7ff fe87 	bl	80291b8 <_Bfree>
 80294aa:	464f      	mov	r7, r9
 80294ac:	106d      	asrs	r5, r5, #1
 80294ae:	d00b      	beq.n	80294c8 <__pow5mult+0x90>
 80294b0:	6820      	ldr	r0, [r4, #0]
 80294b2:	b938      	cbnz	r0, 80294c4 <__pow5mult+0x8c>
 80294b4:	4622      	mov	r2, r4
 80294b6:	4621      	mov	r1, r4
 80294b8:	4630      	mov	r0, r6
 80294ba:	f7ff ff26 	bl	802930a <__multiply>
 80294be:	6020      	str	r0, [r4, #0]
 80294c0:	f8c0 8000 	str.w	r8, [r0]
 80294c4:	4604      	mov	r4, r0
 80294c6:	e7e4      	b.n	8029492 <__pow5mult+0x5a>
 80294c8:	4638      	mov	r0, r7
 80294ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80294ce:	bf00      	nop
 80294d0:	08029bf0 	.word	0x08029bf0

080294d4 <__lshift>:
 80294d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80294d8:	460c      	mov	r4, r1
 80294da:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80294de:	6923      	ldr	r3, [r4, #16]
 80294e0:	6849      	ldr	r1, [r1, #4]
 80294e2:	eb0a 0903 	add.w	r9, sl, r3
 80294e6:	68a3      	ldr	r3, [r4, #8]
 80294e8:	4607      	mov	r7, r0
 80294ea:	4616      	mov	r6, r2
 80294ec:	f109 0501 	add.w	r5, r9, #1
 80294f0:	42ab      	cmp	r3, r5
 80294f2:	db32      	blt.n	802955a <__lshift+0x86>
 80294f4:	4638      	mov	r0, r7
 80294f6:	f7ff fe2b 	bl	8029150 <_Balloc>
 80294fa:	2300      	movs	r3, #0
 80294fc:	4680      	mov	r8, r0
 80294fe:	f100 0114 	add.w	r1, r0, #20
 8029502:	461a      	mov	r2, r3
 8029504:	4553      	cmp	r3, sl
 8029506:	db2b      	blt.n	8029560 <__lshift+0x8c>
 8029508:	6920      	ldr	r0, [r4, #16]
 802950a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802950e:	f104 0314 	add.w	r3, r4, #20
 8029512:	f016 021f 	ands.w	r2, r6, #31
 8029516:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802951a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802951e:	d025      	beq.n	802956c <__lshift+0x98>
 8029520:	f1c2 0e20 	rsb	lr, r2, #32
 8029524:	2000      	movs	r0, #0
 8029526:	681e      	ldr	r6, [r3, #0]
 8029528:	468a      	mov	sl, r1
 802952a:	4096      	lsls	r6, r2
 802952c:	4330      	orrs	r0, r6
 802952e:	f84a 0b04 	str.w	r0, [sl], #4
 8029532:	f853 0b04 	ldr.w	r0, [r3], #4
 8029536:	459c      	cmp	ip, r3
 8029538:	fa20 f00e 	lsr.w	r0, r0, lr
 802953c:	d814      	bhi.n	8029568 <__lshift+0x94>
 802953e:	6048      	str	r0, [r1, #4]
 8029540:	b108      	cbz	r0, 8029546 <__lshift+0x72>
 8029542:	f109 0502 	add.w	r5, r9, #2
 8029546:	3d01      	subs	r5, #1
 8029548:	4638      	mov	r0, r7
 802954a:	f8c8 5010 	str.w	r5, [r8, #16]
 802954e:	4621      	mov	r1, r4
 8029550:	f7ff fe32 	bl	80291b8 <_Bfree>
 8029554:	4640      	mov	r0, r8
 8029556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802955a:	3101      	adds	r1, #1
 802955c:	005b      	lsls	r3, r3, #1
 802955e:	e7c7      	b.n	80294f0 <__lshift+0x1c>
 8029560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8029564:	3301      	adds	r3, #1
 8029566:	e7cd      	b.n	8029504 <__lshift+0x30>
 8029568:	4651      	mov	r1, sl
 802956a:	e7dc      	b.n	8029526 <__lshift+0x52>
 802956c:	3904      	subs	r1, #4
 802956e:	f853 2b04 	ldr.w	r2, [r3], #4
 8029572:	f841 2f04 	str.w	r2, [r1, #4]!
 8029576:	459c      	cmp	ip, r3
 8029578:	d8f9      	bhi.n	802956e <__lshift+0x9a>
 802957a:	e7e4      	b.n	8029546 <__lshift+0x72>

0802957c <__mcmp>:
 802957c:	6903      	ldr	r3, [r0, #16]
 802957e:	690a      	ldr	r2, [r1, #16]
 8029580:	1a9b      	subs	r3, r3, r2
 8029582:	b530      	push	{r4, r5, lr}
 8029584:	d10c      	bne.n	80295a0 <__mcmp+0x24>
 8029586:	0092      	lsls	r2, r2, #2
 8029588:	3014      	adds	r0, #20
 802958a:	3114      	adds	r1, #20
 802958c:	1884      	adds	r4, r0, r2
 802958e:	4411      	add	r1, r2
 8029590:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8029594:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8029598:	4295      	cmp	r5, r2
 802959a:	d003      	beq.n	80295a4 <__mcmp+0x28>
 802959c:	d305      	bcc.n	80295aa <__mcmp+0x2e>
 802959e:	2301      	movs	r3, #1
 80295a0:	4618      	mov	r0, r3
 80295a2:	bd30      	pop	{r4, r5, pc}
 80295a4:	42a0      	cmp	r0, r4
 80295a6:	d3f3      	bcc.n	8029590 <__mcmp+0x14>
 80295a8:	e7fa      	b.n	80295a0 <__mcmp+0x24>
 80295aa:	f04f 33ff 	mov.w	r3, #4294967295
 80295ae:	e7f7      	b.n	80295a0 <__mcmp+0x24>

080295b0 <__mdiff>:
 80295b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80295b4:	460d      	mov	r5, r1
 80295b6:	4607      	mov	r7, r0
 80295b8:	4611      	mov	r1, r2
 80295ba:	4628      	mov	r0, r5
 80295bc:	4614      	mov	r4, r2
 80295be:	f7ff ffdd 	bl	802957c <__mcmp>
 80295c2:	1e06      	subs	r6, r0, #0
 80295c4:	d108      	bne.n	80295d8 <__mdiff+0x28>
 80295c6:	4631      	mov	r1, r6
 80295c8:	4638      	mov	r0, r7
 80295ca:	f7ff fdc1 	bl	8029150 <_Balloc>
 80295ce:	2301      	movs	r3, #1
 80295d0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80295d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80295d8:	bfa4      	itt	ge
 80295da:	4623      	movge	r3, r4
 80295dc:	462c      	movge	r4, r5
 80295de:	4638      	mov	r0, r7
 80295e0:	6861      	ldr	r1, [r4, #4]
 80295e2:	bfa6      	itte	ge
 80295e4:	461d      	movge	r5, r3
 80295e6:	2600      	movge	r6, #0
 80295e8:	2601      	movlt	r6, #1
 80295ea:	f7ff fdb1 	bl	8029150 <_Balloc>
 80295ee:	692b      	ldr	r3, [r5, #16]
 80295f0:	60c6      	str	r6, [r0, #12]
 80295f2:	6926      	ldr	r6, [r4, #16]
 80295f4:	f105 0914 	add.w	r9, r5, #20
 80295f8:	f104 0214 	add.w	r2, r4, #20
 80295fc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8029600:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8029604:	f100 0514 	add.w	r5, r0, #20
 8029608:	f04f 0e00 	mov.w	lr, #0
 802960c:	f852 ab04 	ldr.w	sl, [r2], #4
 8029610:	f859 4b04 	ldr.w	r4, [r9], #4
 8029614:	fa1e f18a 	uxtah	r1, lr, sl
 8029618:	b2a3      	uxth	r3, r4
 802961a:	1ac9      	subs	r1, r1, r3
 802961c:	0c23      	lsrs	r3, r4, #16
 802961e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8029622:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8029626:	b289      	uxth	r1, r1
 8029628:	ea4f 4e23 	mov.w	lr, r3, asr #16
 802962c:	45c8      	cmp	r8, r9
 802962e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8029632:	4694      	mov	ip, r2
 8029634:	f845 3b04 	str.w	r3, [r5], #4
 8029638:	d8e8      	bhi.n	802960c <__mdiff+0x5c>
 802963a:	45bc      	cmp	ip, r7
 802963c:	d304      	bcc.n	8029648 <__mdiff+0x98>
 802963e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8029642:	b183      	cbz	r3, 8029666 <__mdiff+0xb6>
 8029644:	6106      	str	r6, [r0, #16]
 8029646:	e7c5      	b.n	80295d4 <__mdiff+0x24>
 8029648:	f85c 1b04 	ldr.w	r1, [ip], #4
 802964c:	fa1e f381 	uxtah	r3, lr, r1
 8029650:	141a      	asrs	r2, r3, #16
 8029652:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8029656:	b29b      	uxth	r3, r3
 8029658:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802965c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8029660:	f845 3b04 	str.w	r3, [r5], #4
 8029664:	e7e9      	b.n	802963a <__mdiff+0x8a>
 8029666:	3e01      	subs	r6, #1
 8029668:	e7e9      	b.n	802963e <__mdiff+0x8e>

0802966a <__d2b>:
 802966a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802966e:	460e      	mov	r6, r1
 8029670:	2101      	movs	r1, #1
 8029672:	ec59 8b10 	vmov	r8, r9, d0
 8029676:	4615      	mov	r5, r2
 8029678:	f7ff fd6a 	bl	8029150 <_Balloc>
 802967c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8029680:	4607      	mov	r7, r0
 8029682:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8029686:	bb34      	cbnz	r4, 80296d6 <__d2b+0x6c>
 8029688:	9301      	str	r3, [sp, #4]
 802968a:	f1b8 0300 	subs.w	r3, r8, #0
 802968e:	d027      	beq.n	80296e0 <__d2b+0x76>
 8029690:	a802      	add	r0, sp, #8
 8029692:	f840 3d08 	str.w	r3, [r0, #-8]!
 8029696:	f7ff fe00 	bl	802929a <__lo0bits>
 802969a:	9900      	ldr	r1, [sp, #0]
 802969c:	b1f0      	cbz	r0, 80296dc <__d2b+0x72>
 802969e:	9a01      	ldr	r2, [sp, #4]
 80296a0:	f1c0 0320 	rsb	r3, r0, #32
 80296a4:	fa02 f303 	lsl.w	r3, r2, r3
 80296a8:	430b      	orrs	r3, r1
 80296aa:	40c2      	lsrs	r2, r0
 80296ac:	617b      	str	r3, [r7, #20]
 80296ae:	9201      	str	r2, [sp, #4]
 80296b0:	9b01      	ldr	r3, [sp, #4]
 80296b2:	61bb      	str	r3, [r7, #24]
 80296b4:	2b00      	cmp	r3, #0
 80296b6:	bf14      	ite	ne
 80296b8:	2102      	movne	r1, #2
 80296ba:	2101      	moveq	r1, #1
 80296bc:	6139      	str	r1, [r7, #16]
 80296be:	b1c4      	cbz	r4, 80296f2 <__d2b+0x88>
 80296c0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80296c4:	4404      	add	r4, r0
 80296c6:	6034      	str	r4, [r6, #0]
 80296c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80296cc:	6028      	str	r0, [r5, #0]
 80296ce:	4638      	mov	r0, r7
 80296d0:	b003      	add	sp, #12
 80296d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80296d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80296da:	e7d5      	b.n	8029688 <__d2b+0x1e>
 80296dc:	6179      	str	r1, [r7, #20]
 80296de:	e7e7      	b.n	80296b0 <__d2b+0x46>
 80296e0:	a801      	add	r0, sp, #4
 80296e2:	f7ff fdda 	bl	802929a <__lo0bits>
 80296e6:	9b01      	ldr	r3, [sp, #4]
 80296e8:	617b      	str	r3, [r7, #20]
 80296ea:	2101      	movs	r1, #1
 80296ec:	6139      	str	r1, [r7, #16]
 80296ee:	3020      	adds	r0, #32
 80296f0:	e7e5      	b.n	80296be <__d2b+0x54>
 80296f2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80296f6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80296fa:	6030      	str	r0, [r6, #0]
 80296fc:	6918      	ldr	r0, [r3, #16]
 80296fe:	f7ff fdad 	bl	802925c <__hi0bits>
 8029702:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8029706:	e7e1      	b.n	80296cc <__d2b+0x62>

08029708 <_calloc_r>:
 8029708:	b538      	push	{r3, r4, r5, lr}
 802970a:	fb02 f401 	mul.w	r4, r2, r1
 802970e:	4621      	mov	r1, r4
 8029710:	f000 f856 	bl	80297c0 <_malloc_r>
 8029714:	4605      	mov	r5, r0
 8029716:	b118      	cbz	r0, 8029720 <_calloc_r+0x18>
 8029718:	4622      	mov	r2, r4
 802971a:	2100      	movs	r1, #0
 802971c:	f7fe f867 	bl	80277ee <memset>
 8029720:	4628      	mov	r0, r5
 8029722:	bd38      	pop	{r3, r4, r5, pc}

08029724 <_free_r>:
 8029724:	b538      	push	{r3, r4, r5, lr}
 8029726:	4605      	mov	r5, r0
 8029728:	2900      	cmp	r1, #0
 802972a:	d045      	beq.n	80297b8 <_free_r+0x94>
 802972c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8029730:	1f0c      	subs	r4, r1, #4
 8029732:	2b00      	cmp	r3, #0
 8029734:	bfb8      	it	lt
 8029736:	18e4      	addlt	r4, r4, r3
 8029738:	f000 f958 	bl	80299ec <__malloc_lock>
 802973c:	4a1f      	ldr	r2, [pc, #124]	; (80297bc <_free_r+0x98>)
 802973e:	6813      	ldr	r3, [r2, #0]
 8029740:	4610      	mov	r0, r2
 8029742:	b933      	cbnz	r3, 8029752 <_free_r+0x2e>
 8029744:	6063      	str	r3, [r4, #4]
 8029746:	6014      	str	r4, [r2, #0]
 8029748:	4628      	mov	r0, r5
 802974a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802974e:	f000 b94e 	b.w	80299ee <__malloc_unlock>
 8029752:	42a3      	cmp	r3, r4
 8029754:	d90c      	bls.n	8029770 <_free_r+0x4c>
 8029756:	6821      	ldr	r1, [r4, #0]
 8029758:	1862      	adds	r2, r4, r1
 802975a:	4293      	cmp	r3, r2
 802975c:	bf04      	itt	eq
 802975e:	681a      	ldreq	r2, [r3, #0]
 8029760:	685b      	ldreq	r3, [r3, #4]
 8029762:	6063      	str	r3, [r4, #4]
 8029764:	bf04      	itt	eq
 8029766:	1852      	addeq	r2, r2, r1
 8029768:	6022      	streq	r2, [r4, #0]
 802976a:	6004      	str	r4, [r0, #0]
 802976c:	e7ec      	b.n	8029748 <_free_r+0x24>
 802976e:	4613      	mov	r3, r2
 8029770:	685a      	ldr	r2, [r3, #4]
 8029772:	b10a      	cbz	r2, 8029778 <_free_r+0x54>
 8029774:	42a2      	cmp	r2, r4
 8029776:	d9fa      	bls.n	802976e <_free_r+0x4a>
 8029778:	6819      	ldr	r1, [r3, #0]
 802977a:	1858      	adds	r0, r3, r1
 802977c:	42a0      	cmp	r0, r4
 802977e:	d10b      	bne.n	8029798 <_free_r+0x74>
 8029780:	6820      	ldr	r0, [r4, #0]
 8029782:	4401      	add	r1, r0
 8029784:	1858      	adds	r0, r3, r1
 8029786:	4282      	cmp	r2, r0
 8029788:	6019      	str	r1, [r3, #0]
 802978a:	d1dd      	bne.n	8029748 <_free_r+0x24>
 802978c:	6810      	ldr	r0, [r2, #0]
 802978e:	6852      	ldr	r2, [r2, #4]
 8029790:	605a      	str	r2, [r3, #4]
 8029792:	4401      	add	r1, r0
 8029794:	6019      	str	r1, [r3, #0]
 8029796:	e7d7      	b.n	8029748 <_free_r+0x24>
 8029798:	d902      	bls.n	80297a0 <_free_r+0x7c>
 802979a:	230c      	movs	r3, #12
 802979c:	602b      	str	r3, [r5, #0]
 802979e:	e7d3      	b.n	8029748 <_free_r+0x24>
 80297a0:	6820      	ldr	r0, [r4, #0]
 80297a2:	1821      	adds	r1, r4, r0
 80297a4:	428a      	cmp	r2, r1
 80297a6:	bf04      	itt	eq
 80297a8:	6811      	ldreq	r1, [r2, #0]
 80297aa:	6852      	ldreq	r2, [r2, #4]
 80297ac:	6062      	str	r2, [r4, #4]
 80297ae:	bf04      	itt	eq
 80297b0:	1809      	addeq	r1, r1, r0
 80297b2:	6021      	streq	r1, [r4, #0]
 80297b4:	605c      	str	r4, [r3, #4]
 80297b6:	e7c7      	b.n	8029748 <_free_r+0x24>
 80297b8:	bd38      	pop	{r3, r4, r5, pc}
 80297ba:	bf00      	nop
 80297bc:	20011490 	.word	0x20011490

080297c0 <_malloc_r>:
 80297c0:	b570      	push	{r4, r5, r6, lr}
 80297c2:	1ccd      	adds	r5, r1, #3
 80297c4:	f025 0503 	bic.w	r5, r5, #3
 80297c8:	3508      	adds	r5, #8
 80297ca:	2d0c      	cmp	r5, #12
 80297cc:	bf38      	it	cc
 80297ce:	250c      	movcc	r5, #12
 80297d0:	2d00      	cmp	r5, #0
 80297d2:	4606      	mov	r6, r0
 80297d4:	db01      	blt.n	80297da <_malloc_r+0x1a>
 80297d6:	42a9      	cmp	r1, r5
 80297d8:	d903      	bls.n	80297e2 <_malloc_r+0x22>
 80297da:	230c      	movs	r3, #12
 80297dc:	6033      	str	r3, [r6, #0]
 80297de:	2000      	movs	r0, #0
 80297e0:	bd70      	pop	{r4, r5, r6, pc}
 80297e2:	f000 f903 	bl	80299ec <__malloc_lock>
 80297e6:	4a21      	ldr	r2, [pc, #132]	; (802986c <_malloc_r+0xac>)
 80297e8:	6814      	ldr	r4, [r2, #0]
 80297ea:	4621      	mov	r1, r4
 80297ec:	b991      	cbnz	r1, 8029814 <_malloc_r+0x54>
 80297ee:	4c20      	ldr	r4, [pc, #128]	; (8029870 <_malloc_r+0xb0>)
 80297f0:	6823      	ldr	r3, [r4, #0]
 80297f2:	b91b      	cbnz	r3, 80297fc <_malloc_r+0x3c>
 80297f4:	4630      	mov	r0, r6
 80297f6:	f000 f83d 	bl	8029874 <_sbrk_r>
 80297fa:	6020      	str	r0, [r4, #0]
 80297fc:	4629      	mov	r1, r5
 80297fe:	4630      	mov	r0, r6
 8029800:	f000 f838 	bl	8029874 <_sbrk_r>
 8029804:	1c43      	adds	r3, r0, #1
 8029806:	d124      	bne.n	8029852 <_malloc_r+0x92>
 8029808:	230c      	movs	r3, #12
 802980a:	6033      	str	r3, [r6, #0]
 802980c:	4630      	mov	r0, r6
 802980e:	f000 f8ee 	bl	80299ee <__malloc_unlock>
 8029812:	e7e4      	b.n	80297de <_malloc_r+0x1e>
 8029814:	680b      	ldr	r3, [r1, #0]
 8029816:	1b5b      	subs	r3, r3, r5
 8029818:	d418      	bmi.n	802984c <_malloc_r+0x8c>
 802981a:	2b0b      	cmp	r3, #11
 802981c:	d90f      	bls.n	802983e <_malloc_r+0x7e>
 802981e:	600b      	str	r3, [r1, #0]
 8029820:	50cd      	str	r5, [r1, r3]
 8029822:	18cc      	adds	r4, r1, r3
 8029824:	4630      	mov	r0, r6
 8029826:	f000 f8e2 	bl	80299ee <__malloc_unlock>
 802982a:	f104 000b 	add.w	r0, r4, #11
 802982e:	1d23      	adds	r3, r4, #4
 8029830:	f020 0007 	bic.w	r0, r0, #7
 8029834:	1ac3      	subs	r3, r0, r3
 8029836:	d0d3      	beq.n	80297e0 <_malloc_r+0x20>
 8029838:	425a      	negs	r2, r3
 802983a:	50e2      	str	r2, [r4, r3]
 802983c:	e7d0      	b.n	80297e0 <_malloc_r+0x20>
 802983e:	428c      	cmp	r4, r1
 8029840:	684b      	ldr	r3, [r1, #4]
 8029842:	bf16      	itet	ne
 8029844:	6063      	strne	r3, [r4, #4]
 8029846:	6013      	streq	r3, [r2, #0]
 8029848:	460c      	movne	r4, r1
 802984a:	e7eb      	b.n	8029824 <_malloc_r+0x64>
 802984c:	460c      	mov	r4, r1
 802984e:	6849      	ldr	r1, [r1, #4]
 8029850:	e7cc      	b.n	80297ec <_malloc_r+0x2c>
 8029852:	1cc4      	adds	r4, r0, #3
 8029854:	f024 0403 	bic.w	r4, r4, #3
 8029858:	42a0      	cmp	r0, r4
 802985a:	d005      	beq.n	8029868 <_malloc_r+0xa8>
 802985c:	1a21      	subs	r1, r4, r0
 802985e:	4630      	mov	r0, r6
 8029860:	f000 f808 	bl	8029874 <_sbrk_r>
 8029864:	3001      	adds	r0, #1
 8029866:	d0cf      	beq.n	8029808 <_malloc_r+0x48>
 8029868:	6025      	str	r5, [r4, #0]
 802986a:	e7db      	b.n	8029824 <_malloc_r+0x64>
 802986c:	20011490 	.word	0x20011490
 8029870:	20011494 	.word	0x20011494

08029874 <_sbrk_r>:
 8029874:	b538      	push	{r3, r4, r5, lr}
 8029876:	4c06      	ldr	r4, [pc, #24]	; (8029890 <_sbrk_r+0x1c>)
 8029878:	2300      	movs	r3, #0
 802987a:	4605      	mov	r5, r0
 802987c:	4608      	mov	r0, r1
 802987e:	6023      	str	r3, [r4, #0]
 8029880:	f7fa f920 	bl	8023ac4 <_sbrk>
 8029884:	1c43      	adds	r3, r0, #1
 8029886:	d102      	bne.n	802988e <_sbrk_r+0x1a>
 8029888:	6823      	ldr	r3, [r4, #0]
 802988a:	b103      	cbz	r3, 802988e <_sbrk_r+0x1a>
 802988c:	602b      	str	r3, [r5, #0]
 802988e:	bd38      	pop	{r3, r4, r5, pc}
 8029890:	20011870 	.word	0x20011870

08029894 <__sread>:
 8029894:	b510      	push	{r4, lr}
 8029896:	460c      	mov	r4, r1
 8029898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802989c:	f000 f8a8 	bl	80299f0 <_read_r>
 80298a0:	2800      	cmp	r0, #0
 80298a2:	bfab      	itete	ge
 80298a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80298a6:	89a3      	ldrhlt	r3, [r4, #12]
 80298a8:	181b      	addge	r3, r3, r0
 80298aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80298ae:	bfac      	ite	ge
 80298b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80298b2:	81a3      	strhlt	r3, [r4, #12]
 80298b4:	bd10      	pop	{r4, pc}

080298b6 <__swrite>:
 80298b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80298ba:	461f      	mov	r7, r3
 80298bc:	898b      	ldrh	r3, [r1, #12]
 80298be:	05db      	lsls	r3, r3, #23
 80298c0:	4605      	mov	r5, r0
 80298c2:	460c      	mov	r4, r1
 80298c4:	4616      	mov	r6, r2
 80298c6:	d505      	bpl.n	80298d4 <__swrite+0x1e>
 80298c8:	2302      	movs	r3, #2
 80298ca:	2200      	movs	r2, #0
 80298cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80298d0:	f000 f868 	bl	80299a4 <_lseek_r>
 80298d4:	89a3      	ldrh	r3, [r4, #12]
 80298d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80298da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80298de:	81a3      	strh	r3, [r4, #12]
 80298e0:	4632      	mov	r2, r6
 80298e2:	463b      	mov	r3, r7
 80298e4:	4628      	mov	r0, r5
 80298e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80298ea:	f000 b817 	b.w	802991c <_write_r>

080298ee <__sseek>:
 80298ee:	b510      	push	{r4, lr}
 80298f0:	460c      	mov	r4, r1
 80298f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80298f6:	f000 f855 	bl	80299a4 <_lseek_r>
 80298fa:	1c43      	adds	r3, r0, #1
 80298fc:	89a3      	ldrh	r3, [r4, #12]
 80298fe:	bf15      	itete	ne
 8029900:	6560      	strne	r0, [r4, #84]	; 0x54
 8029902:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8029906:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802990a:	81a3      	strheq	r3, [r4, #12]
 802990c:	bf18      	it	ne
 802990e:	81a3      	strhne	r3, [r4, #12]
 8029910:	bd10      	pop	{r4, pc}

08029912 <__sclose>:
 8029912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029916:	f000 b813 	b.w	8029940 <_close_r>
	...

0802991c <_write_r>:
 802991c:	b538      	push	{r3, r4, r5, lr}
 802991e:	4c07      	ldr	r4, [pc, #28]	; (802993c <_write_r+0x20>)
 8029920:	4605      	mov	r5, r0
 8029922:	4608      	mov	r0, r1
 8029924:	4611      	mov	r1, r2
 8029926:	2200      	movs	r2, #0
 8029928:	6022      	str	r2, [r4, #0]
 802992a:	461a      	mov	r2, r3
 802992c:	f7fa f85d 	bl	80239ea <_write>
 8029930:	1c43      	adds	r3, r0, #1
 8029932:	d102      	bne.n	802993a <_write_r+0x1e>
 8029934:	6823      	ldr	r3, [r4, #0]
 8029936:	b103      	cbz	r3, 802993a <_write_r+0x1e>
 8029938:	602b      	str	r3, [r5, #0]
 802993a:	bd38      	pop	{r3, r4, r5, pc}
 802993c:	20011870 	.word	0x20011870

08029940 <_close_r>:
 8029940:	b538      	push	{r3, r4, r5, lr}
 8029942:	4c06      	ldr	r4, [pc, #24]	; (802995c <_close_r+0x1c>)
 8029944:	2300      	movs	r3, #0
 8029946:	4605      	mov	r5, r0
 8029948:	4608      	mov	r0, r1
 802994a:	6023      	str	r3, [r4, #0]
 802994c:	f7fa f886 	bl	8023a5c <_close>
 8029950:	1c43      	adds	r3, r0, #1
 8029952:	d102      	bne.n	802995a <_close_r+0x1a>
 8029954:	6823      	ldr	r3, [r4, #0]
 8029956:	b103      	cbz	r3, 802995a <_close_r+0x1a>
 8029958:	602b      	str	r3, [r5, #0]
 802995a:	bd38      	pop	{r3, r4, r5, pc}
 802995c:	20011870 	.word	0x20011870

08029960 <_fstat_r>:
 8029960:	b538      	push	{r3, r4, r5, lr}
 8029962:	4c07      	ldr	r4, [pc, #28]	; (8029980 <_fstat_r+0x20>)
 8029964:	2300      	movs	r3, #0
 8029966:	4605      	mov	r5, r0
 8029968:	4608      	mov	r0, r1
 802996a:	4611      	mov	r1, r2
 802996c:	6023      	str	r3, [r4, #0]
 802996e:	f7fa f881 	bl	8023a74 <_fstat>
 8029972:	1c43      	adds	r3, r0, #1
 8029974:	d102      	bne.n	802997c <_fstat_r+0x1c>
 8029976:	6823      	ldr	r3, [r4, #0]
 8029978:	b103      	cbz	r3, 802997c <_fstat_r+0x1c>
 802997a:	602b      	str	r3, [r5, #0]
 802997c:	bd38      	pop	{r3, r4, r5, pc}
 802997e:	bf00      	nop
 8029980:	20011870 	.word	0x20011870

08029984 <_isatty_r>:
 8029984:	b538      	push	{r3, r4, r5, lr}
 8029986:	4c06      	ldr	r4, [pc, #24]	; (80299a0 <_isatty_r+0x1c>)
 8029988:	2300      	movs	r3, #0
 802998a:	4605      	mov	r5, r0
 802998c:	4608      	mov	r0, r1
 802998e:	6023      	str	r3, [r4, #0]
 8029990:	f7fa f880 	bl	8023a94 <_isatty>
 8029994:	1c43      	adds	r3, r0, #1
 8029996:	d102      	bne.n	802999e <_isatty_r+0x1a>
 8029998:	6823      	ldr	r3, [r4, #0]
 802999a:	b103      	cbz	r3, 802999e <_isatty_r+0x1a>
 802999c:	602b      	str	r3, [r5, #0]
 802999e:	bd38      	pop	{r3, r4, r5, pc}
 80299a0:	20011870 	.word	0x20011870

080299a4 <_lseek_r>:
 80299a4:	b538      	push	{r3, r4, r5, lr}
 80299a6:	4c07      	ldr	r4, [pc, #28]	; (80299c4 <_lseek_r+0x20>)
 80299a8:	4605      	mov	r5, r0
 80299aa:	4608      	mov	r0, r1
 80299ac:	4611      	mov	r1, r2
 80299ae:	2200      	movs	r2, #0
 80299b0:	6022      	str	r2, [r4, #0]
 80299b2:	461a      	mov	r2, r3
 80299b4:	f7fa f879 	bl	8023aaa <_lseek>
 80299b8:	1c43      	adds	r3, r0, #1
 80299ba:	d102      	bne.n	80299c2 <_lseek_r+0x1e>
 80299bc:	6823      	ldr	r3, [r4, #0]
 80299be:	b103      	cbz	r3, 80299c2 <_lseek_r+0x1e>
 80299c0:	602b      	str	r3, [r5, #0]
 80299c2:	bd38      	pop	{r3, r4, r5, pc}
 80299c4:	20011870 	.word	0x20011870

080299c8 <__ascii_mbtowc>:
 80299c8:	b082      	sub	sp, #8
 80299ca:	b901      	cbnz	r1, 80299ce <__ascii_mbtowc+0x6>
 80299cc:	a901      	add	r1, sp, #4
 80299ce:	b142      	cbz	r2, 80299e2 <__ascii_mbtowc+0x1a>
 80299d0:	b14b      	cbz	r3, 80299e6 <__ascii_mbtowc+0x1e>
 80299d2:	7813      	ldrb	r3, [r2, #0]
 80299d4:	600b      	str	r3, [r1, #0]
 80299d6:	7812      	ldrb	r2, [r2, #0]
 80299d8:	1c10      	adds	r0, r2, #0
 80299da:	bf18      	it	ne
 80299dc:	2001      	movne	r0, #1
 80299de:	b002      	add	sp, #8
 80299e0:	4770      	bx	lr
 80299e2:	4610      	mov	r0, r2
 80299e4:	e7fb      	b.n	80299de <__ascii_mbtowc+0x16>
 80299e6:	f06f 0001 	mvn.w	r0, #1
 80299ea:	e7f8      	b.n	80299de <__ascii_mbtowc+0x16>

080299ec <__malloc_lock>:
 80299ec:	4770      	bx	lr

080299ee <__malloc_unlock>:
 80299ee:	4770      	bx	lr

080299f0 <_read_r>:
 80299f0:	b538      	push	{r3, r4, r5, lr}
 80299f2:	4c07      	ldr	r4, [pc, #28]	; (8029a10 <_read_r+0x20>)
 80299f4:	4605      	mov	r5, r0
 80299f6:	4608      	mov	r0, r1
 80299f8:	4611      	mov	r1, r2
 80299fa:	2200      	movs	r2, #0
 80299fc:	6022      	str	r2, [r4, #0]
 80299fe:	461a      	mov	r2, r3
 8029a00:	f7fa f80f 	bl	8023a22 <_read>
 8029a04:	1c43      	adds	r3, r0, #1
 8029a06:	d102      	bne.n	8029a0e <_read_r+0x1e>
 8029a08:	6823      	ldr	r3, [r4, #0]
 8029a0a:	b103      	cbz	r3, 8029a0e <_read_r+0x1e>
 8029a0c:	602b      	str	r3, [r5, #0]
 8029a0e:	bd38      	pop	{r3, r4, r5, pc}
 8029a10:	20011870 	.word	0x20011870

08029a14 <__ascii_wctomb>:
 8029a14:	b149      	cbz	r1, 8029a2a <__ascii_wctomb+0x16>
 8029a16:	2aff      	cmp	r2, #255	; 0xff
 8029a18:	bf85      	ittet	hi
 8029a1a:	238a      	movhi	r3, #138	; 0x8a
 8029a1c:	6003      	strhi	r3, [r0, #0]
 8029a1e:	700a      	strbls	r2, [r1, #0]
 8029a20:	f04f 30ff 	movhi.w	r0, #4294967295
 8029a24:	bf98      	it	ls
 8029a26:	2001      	movls	r0, #1
 8029a28:	4770      	bx	lr
 8029a2a:	4608      	mov	r0, r1
 8029a2c:	4770      	bx	lr
	...

08029a30 <_init>:
 8029a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029a32:	bf00      	nop
 8029a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029a36:	bc08      	pop	{r3}
 8029a38:	469e      	mov	lr, r3
 8029a3a:	4770      	bx	lr

08029a3c <_fini>:
 8029a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029a3e:	bf00      	nop
 8029a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029a42:	bc08      	pop	{r3}
 8029a44:	469e      	mov	lr, r3
 8029a46:	4770      	bx	lr
