
alias2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab60  08020000  08020000  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0802ab60  0802ab60  0002ab60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802ab80  0802ab80  00030020  2**0
                  CONTENTS
  4 .ARM          00000008  0802ab80  0802ab80  0002ab80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802ab88  0802ab88  00030020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802ab88  0802ab88  0002ab88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802ab90  0802ab90  0002ab90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0802ab94  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a18  20000020  0802abb4  00030020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a38  0802abb4  00030a38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a9b3  00000000  00000000  00030050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004607  00000000  00000000  0005aa03  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016f8  00000000  00000000  0005f010  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001538  00000000  00000000  00060708  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025572  00000000  00000000  00061c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000151ee  00000000  00000000  000871b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cbb81  00000000  00000000  0009c3a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00167f21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061dc  00000000  00000000  00167f9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08020000 <__do_global_dtors_aux>:
 8020000:	b510      	push	{r4, lr}
 8020002:	4c05      	ldr	r4, [pc, #20]	; (8020018 <__do_global_dtors_aux+0x18>)
 8020004:	7823      	ldrb	r3, [r4, #0]
 8020006:	b933      	cbnz	r3, 8020016 <__do_global_dtors_aux+0x16>
 8020008:	4b04      	ldr	r3, [pc, #16]	; (802001c <__do_global_dtors_aux+0x1c>)
 802000a:	b113      	cbz	r3, 8020012 <__do_global_dtors_aux+0x12>
 802000c:	4804      	ldr	r0, [pc, #16]	; (8020020 <__do_global_dtors_aux+0x20>)
 802000e:	f3af 8000 	nop.w
 8020012:	2301      	movs	r3, #1
 8020014:	7023      	strb	r3, [r4, #0]
 8020016:	bd10      	pop	{r4, pc}
 8020018:	20000020 	.word	0x20000020
 802001c:	00000000 	.word	0x00000000
 8020020:	0802ab48 	.word	0x0802ab48

08020024 <frame_dummy>:
 8020024:	b508      	push	{r3, lr}
 8020026:	4b03      	ldr	r3, [pc, #12]	; (8020034 <frame_dummy+0x10>)
 8020028:	b11b      	cbz	r3, 8020032 <frame_dummy+0xe>
 802002a:	4903      	ldr	r1, [pc, #12]	; (8020038 <frame_dummy+0x14>)
 802002c:	4803      	ldr	r0, [pc, #12]	; (802003c <frame_dummy+0x18>)
 802002e:	f3af 8000 	nop.w
 8020032:	bd08      	pop	{r3, pc}
 8020034:	00000000 	.word	0x00000000
 8020038:	20000024 	.word	0x20000024
 802003c:	0802ab48 	.word	0x0802ab48

08020040 <__aeabi_drsub>:
 8020040:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8020044:	e002      	b.n	802004c <__adddf3>
 8020046:	bf00      	nop

08020048 <__aeabi_dsub>:
 8020048:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0802004c <__adddf3>:
 802004c:	b530      	push	{r4, r5, lr}
 802004e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8020052:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8020056:	ea94 0f05 	teq	r4, r5
 802005a:	bf08      	it	eq
 802005c:	ea90 0f02 	teqeq	r0, r2
 8020060:	bf1f      	itttt	ne
 8020062:	ea54 0c00 	orrsne.w	ip, r4, r0
 8020066:	ea55 0c02 	orrsne.w	ip, r5, r2
 802006a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 802006e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020072:	f000 80e2 	beq.w	802023a <__adddf3+0x1ee>
 8020076:	ea4f 5454 	mov.w	r4, r4, lsr #21
 802007a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 802007e:	bfb8      	it	lt
 8020080:	426d      	neglt	r5, r5
 8020082:	dd0c      	ble.n	802009e <__adddf3+0x52>
 8020084:	442c      	add	r4, r5
 8020086:	ea80 0202 	eor.w	r2, r0, r2
 802008a:	ea81 0303 	eor.w	r3, r1, r3
 802008e:	ea82 0000 	eor.w	r0, r2, r0
 8020092:	ea83 0101 	eor.w	r1, r3, r1
 8020096:	ea80 0202 	eor.w	r2, r0, r2
 802009a:	ea81 0303 	eor.w	r3, r1, r3
 802009e:	2d36      	cmp	r5, #54	; 0x36
 80200a0:	bf88      	it	hi
 80200a2:	bd30      	pophi	{r4, r5, pc}
 80200a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80200a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80200ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80200b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80200b4:	d002      	beq.n	80200bc <__adddf3+0x70>
 80200b6:	4240      	negs	r0, r0
 80200b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80200bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80200c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80200c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80200c8:	d002      	beq.n	80200d0 <__adddf3+0x84>
 80200ca:	4252      	negs	r2, r2
 80200cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80200d0:	ea94 0f05 	teq	r4, r5
 80200d4:	f000 80a7 	beq.w	8020226 <__adddf3+0x1da>
 80200d8:	f1a4 0401 	sub.w	r4, r4, #1
 80200dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80200e0:	db0d      	blt.n	80200fe <__adddf3+0xb2>
 80200e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80200e6:	fa22 f205 	lsr.w	r2, r2, r5
 80200ea:	1880      	adds	r0, r0, r2
 80200ec:	f141 0100 	adc.w	r1, r1, #0
 80200f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80200f4:	1880      	adds	r0, r0, r2
 80200f6:	fa43 f305 	asr.w	r3, r3, r5
 80200fa:	4159      	adcs	r1, r3
 80200fc:	e00e      	b.n	802011c <__adddf3+0xd0>
 80200fe:	f1a5 0520 	sub.w	r5, r5, #32
 8020102:	f10e 0e20 	add.w	lr, lr, #32
 8020106:	2a01      	cmp	r2, #1
 8020108:	fa03 fc0e 	lsl.w	ip, r3, lr
 802010c:	bf28      	it	cs
 802010e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020112:	fa43 f305 	asr.w	r3, r3, r5
 8020116:	18c0      	adds	r0, r0, r3
 8020118:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802011c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020120:	d507      	bpl.n	8020132 <__adddf3+0xe6>
 8020122:	f04f 0e00 	mov.w	lr, #0
 8020126:	f1dc 0c00 	rsbs	ip, ip, #0
 802012a:	eb7e 0000 	sbcs.w	r0, lr, r0
 802012e:	eb6e 0101 	sbc.w	r1, lr, r1
 8020132:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8020136:	d31b      	bcc.n	8020170 <__adddf3+0x124>
 8020138:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 802013c:	d30c      	bcc.n	8020158 <__adddf3+0x10c>
 802013e:	0849      	lsrs	r1, r1, #1
 8020140:	ea5f 0030 	movs.w	r0, r0, rrx
 8020144:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8020148:	f104 0401 	add.w	r4, r4, #1
 802014c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8020150:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8020154:	f080 809a 	bcs.w	802028c <__adddf3+0x240>
 8020158:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802015c:	bf08      	it	eq
 802015e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020162:	f150 0000 	adcs.w	r0, r0, #0
 8020166:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802016a:	ea41 0105 	orr.w	r1, r1, r5
 802016e:	bd30      	pop	{r4, r5, pc}
 8020170:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8020174:	4140      	adcs	r0, r0
 8020176:	eb41 0101 	adc.w	r1, r1, r1
 802017a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 802017e:	f1a4 0401 	sub.w	r4, r4, #1
 8020182:	d1e9      	bne.n	8020158 <__adddf3+0x10c>
 8020184:	f091 0f00 	teq	r1, #0
 8020188:	bf04      	itt	eq
 802018a:	4601      	moveq	r1, r0
 802018c:	2000      	moveq	r0, #0
 802018e:	fab1 f381 	clz	r3, r1
 8020192:	bf08      	it	eq
 8020194:	3320      	addeq	r3, #32
 8020196:	f1a3 030b 	sub.w	r3, r3, #11
 802019a:	f1b3 0220 	subs.w	r2, r3, #32
 802019e:	da0c      	bge.n	80201ba <__adddf3+0x16e>
 80201a0:	320c      	adds	r2, #12
 80201a2:	dd08      	ble.n	80201b6 <__adddf3+0x16a>
 80201a4:	f102 0c14 	add.w	ip, r2, #20
 80201a8:	f1c2 020c 	rsb	r2, r2, #12
 80201ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80201b0:	fa21 f102 	lsr.w	r1, r1, r2
 80201b4:	e00c      	b.n	80201d0 <__adddf3+0x184>
 80201b6:	f102 0214 	add.w	r2, r2, #20
 80201ba:	bfd8      	it	le
 80201bc:	f1c2 0c20 	rsble	ip, r2, #32
 80201c0:	fa01 f102 	lsl.w	r1, r1, r2
 80201c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80201c8:	bfdc      	itt	le
 80201ca:	ea41 010c 	orrle.w	r1, r1, ip
 80201ce:	4090      	lslle	r0, r2
 80201d0:	1ae4      	subs	r4, r4, r3
 80201d2:	bfa2      	ittt	ge
 80201d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80201d8:	4329      	orrge	r1, r5
 80201da:	bd30      	popge	{r4, r5, pc}
 80201dc:	ea6f 0404 	mvn.w	r4, r4
 80201e0:	3c1f      	subs	r4, #31
 80201e2:	da1c      	bge.n	802021e <__adddf3+0x1d2>
 80201e4:	340c      	adds	r4, #12
 80201e6:	dc0e      	bgt.n	8020206 <__adddf3+0x1ba>
 80201e8:	f104 0414 	add.w	r4, r4, #20
 80201ec:	f1c4 0220 	rsb	r2, r4, #32
 80201f0:	fa20 f004 	lsr.w	r0, r0, r4
 80201f4:	fa01 f302 	lsl.w	r3, r1, r2
 80201f8:	ea40 0003 	orr.w	r0, r0, r3
 80201fc:	fa21 f304 	lsr.w	r3, r1, r4
 8020200:	ea45 0103 	orr.w	r1, r5, r3
 8020204:	bd30      	pop	{r4, r5, pc}
 8020206:	f1c4 040c 	rsb	r4, r4, #12
 802020a:	f1c4 0220 	rsb	r2, r4, #32
 802020e:	fa20 f002 	lsr.w	r0, r0, r2
 8020212:	fa01 f304 	lsl.w	r3, r1, r4
 8020216:	ea40 0003 	orr.w	r0, r0, r3
 802021a:	4629      	mov	r1, r5
 802021c:	bd30      	pop	{r4, r5, pc}
 802021e:	fa21 f004 	lsr.w	r0, r1, r4
 8020222:	4629      	mov	r1, r5
 8020224:	bd30      	pop	{r4, r5, pc}
 8020226:	f094 0f00 	teq	r4, #0
 802022a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 802022e:	bf06      	itte	eq
 8020230:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8020234:	3401      	addeq	r4, #1
 8020236:	3d01      	subne	r5, #1
 8020238:	e74e      	b.n	80200d8 <__adddf3+0x8c>
 802023a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802023e:	bf18      	it	ne
 8020240:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020244:	d029      	beq.n	802029a <__adddf3+0x24e>
 8020246:	ea94 0f05 	teq	r4, r5
 802024a:	bf08      	it	eq
 802024c:	ea90 0f02 	teqeq	r0, r2
 8020250:	d005      	beq.n	802025e <__adddf3+0x212>
 8020252:	ea54 0c00 	orrs.w	ip, r4, r0
 8020256:	bf04      	itt	eq
 8020258:	4619      	moveq	r1, r3
 802025a:	4610      	moveq	r0, r2
 802025c:	bd30      	pop	{r4, r5, pc}
 802025e:	ea91 0f03 	teq	r1, r3
 8020262:	bf1e      	ittt	ne
 8020264:	2100      	movne	r1, #0
 8020266:	2000      	movne	r0, #0
 8020268:	bd30      	popne	{r4, r5, pc}
 802026a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 802026e:	d105      	bne.n	802027c <__adddf3+0x230>
 8020270:	0040      	lsls	r0, r0, #1
 8020272:	4149      	adcs	r1, r1
 8020274:	bf28      	it	cs
 8020276:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 802027a:	bd30      	pop	{r4, r5, pc}
 802027c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8020280:	bf3c      	itt	cc
 8020282:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8020286:	bd30      	popcc	{r4, r5, pc}
 8020288:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 802028c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8020290:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8020294:	f04f 0000 	mov.w	r0, #0
 8020298:	bd30      	pop	{r4, r5, pc}
 802029a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802029e:	bf1a      	itte	ne
 80202a0:	4619      	movne	r1, r3
 80202a2:	4610      	movne	r0, r2
 80202a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80202a8:	bf1c      	itt	ne
 80202aa:	460b      	movne	r3, r1
 80202ac:	4602      	movne	r2, r0
 80202ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80202b2:	bf06      	itte	eq
 80202b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80202b8:	ea91 0f03 	teqeq	r1, r3
 80202bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80202c0:	bd30      	pop	{r4, r5, pc}
 80202c2:	bf00      	nop

080202c4 <__aeabi_ui2d>:
 80202c4:	f090 0f00 	teq	r0, #0
 80202c8:	bf04      	itt	eq
 80202ca:	2100      	moveq	r1, #0
 80202cc:	4770      	bxeq	lr
 80202ce:	b530      	push	{r4, r5, lr}
 80202d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80202d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80202d8:	f04f 0500 	mov.w	r5, #0
 80202dc:	f04f 0100 	mov.w	r1, #0
 80202e0:	e750      	b.n	8020184 <__adddf3+0x138>
 80202e2:	bf00      	nop

080202e4 <__aeabi_i2d>:
 80202e4:	f090 0f00 	teq	r0, #0
 80202e8:	bf04      	itt	eq
 80202ea:	2100      	moveq	r1, #0
 80202ec:	4770      	bxeq	lr
 80202ee:	b530      	push	{r4, r5, lr}
 80202f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80202f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80202f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80202fc:	bf48      	it	mi
 80202fe:	4240      	negmi	r0, r0
 8020300:	f04f 0100 	mov.w	r1, #0
 8020304:	e73e      	b.n	8020184 <__adddf3+0x138>
 8020306:	bf00      	nop

08020308 <__aeabi_f2d>:
 8020308:	0042      	lsls	r2, r0, #1
 802030a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802030e:	ea4f 0131 	mov.w	r1, r1, rrx
 8020312:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020316:	bf1f      	itttt	ne
 8020318:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 802031c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8020320:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8020324:	4770      	bxne	lr
 8020326:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 802032a:	bf08      	it	eq
 802032c:	4770      	bxeq	lr
 802032e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8020332:	bf04      	itt	eq
 8020334:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8020338:	4770      	bxeq	lr
 802033a:	b530      	push	{r4, r5, lr}
 802033c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8020340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020344:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020348:	e71c      	b.n	8020184 <__adddf3+0x138>
 802034a:	bf00      	nop

0802034c <__aeabi_ul2d>:
 802034c:	ea50 0201 	orrs.w	r2, r0, r1
 8020350:	bf08      	it	eq
 8020352:	4770      	bxeq	lr
 8020354:	b530      	push	{r4, r5, lr}
 8020356:	f04f 0500 	mov.w	r5, #0
 802035a:	e00a      	b.n	8020372 <__aeabi_l2d+0x16>

0802035c <__aeabi_l2d>:
 802035c:	ea50 0201 	orrs.w	r2, r0, r1
 8020360:	bf08      	it	eq
 8020362:	4770      	bxeq	lr
 8020364:	b530      	push	{r4, r5, lr}
 8020366:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 802036a:	d502      	bpl.n	8020372 <__aeabi_l2d+0x16>
 802036c:	4240      	negs	r0, r0
 802036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020372:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020376:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802037a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 802037e:	f43f aed8 	beq.w	8020132 <__adddf3+0xe6>
 8020382:	f04f 0203 	mov.w	r2, #3
 8020386:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802038a:	bf18      	it	ne
 802038c:	3203      	addne	r2, #3
 802038e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8020392:	bf18      	it	ne
 8020394:	3203      	addne	r2, #3
 8020396:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 802039a:	f1c2 0320 	rsb	r3, r2, #32
 802039e:	fa00 fc03 	lsl.w	ip, r0, r3
 80203a2:	fa20 f002 	lsr.w	r0, r0, r2
 80203a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80203aa:	ea40 000e 	orr.w	r0, r0, lr
 80203ae:	fa21 f102 	lsr.w	r1, r1, r2
 80203b2:	4414      	add	r4, r2
 80203b4:	e6bd      	b.n	8020132 <__adddf3+0xe6>
 80203b6:	bf00      	nop

080203b8 <__aeabi_dmul>:
 80203b8:	b570      	push	{r4, r5, r6, lr}
 80203ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80203be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80203c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80203c6:	bf1d      	ittte	ne
 80203c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80203cc:	ea94 0f0c 	teqne	r4, ip
 80203d0:	ea95 0f0c 	teqne	r5, ip
 80203d4:	f000 f8de 	bleq	8020594 <__aeabi_dmul+0x1dc>
 80203d8:	442c      	add	r4, r5
 80203da:	ea81 0603 	eor.w	r6, r1, r3
 80203de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80203e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80203e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80203ea:	bf18      	it	ne
 80203ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80203f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80203f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80203f8:	d038      	beq.n	802046c <__aeabi_dmul+0xb4>
 80203fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80203fe:	f04f 0500 	mov.w	r5, #0
 8020402:	fbe1 e502 	umlal	lr, r5, r1, r2
 8020406:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 802040a:	fbe0 e503 	umlal	lr, r5, r0, r3
 802040e:	f04f 0600 	mov.w	r6, #0
 8020412:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020416:	f09c 0f00 	teq	ip, #0
 802041a:	bf18      	it	ne
 802041c:	f04e 0e01 	orrne.w	lr, lr, #1
 8020420:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8020424:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8020428:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 802042c:	d204      	bcs.n	8020438 <__aeabi_dmul+0x80>
 802042e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8020432:	416d      	adcs	r5, r5
 8020434:	eb46 0606 	adc.w	r6, r6, r6
 8020438:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 802043c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8020440:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8020444:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8020448:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 802044c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8020450:	bf88      	it	hi
 8020452:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020456:	d81e      	bhi.n	8020496 <__aeabi_dmul+0xde>
 8020458:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 802045c:	bf08      	it	eq
 802045e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8020462:	f150 0000 	adcs.w	r0, r0, #0
 8020466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802046a:	bd70      	pop	{r4, r5, r6, pc}
 802046c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8020470:	ea46 0101 	orr.w	r1, r6, r1
 8020474:	ea40 0002 	orr.w	r0, r0, r2
 8020478:	ea81 0103 	eor.w	r1, r1, r3
 802047c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8020480:	bfc2      	ittt	gt
 8020482:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020486:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 802048a:	bd70      	popgt	{r4, r5, r6, pc}
 802048c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020490:	f04f 0e00 	mov.w	lr, #0
 8020494:	3c01      	subs	r4, #1
 8020496:	f300 80ab 	bgt.w	80205f0 <__aeabi_dmul+0x238>
 802049a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 802049e:	bfde      	ittt	le
 80204a0:	2000      	movle	r0, #0
 80204a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80204a6:	bd70      	pople	{r4, r5, r6, pc}
 80204a8:	f1c4 0400 	rsb	r4, r4, #0
 80204ac:	3c20      	subs	r4, #32
 80204ae:	da35      	bge.n	802051c <__aeabi_dmul+0x164>
 80204b0:	340c      	adds	r4, #12
 80204b2:	dc1b      	bgt.n	80204ec <__aeabi_dmul+0x134>
 80204b4:	f104 0414 	add.w	r4, r4, #20
 80204b8:	f1c4 0520 	rsb	r5, r4, #32
 80204bc:	fa00 f305 	lsl.w	r3, r0, r5
 80204c0:	fa20 f004 	lsr.w	r0, r0, r4
 80204c4:	fa01 f205 	lsl.w	r2, r1, r5
 80204c8:	ea40 0002 	orr.w	r0, r0, r2
 80204cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80204d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80204d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80204d8:	fa21 f604 	lsr.w	r6, r1, r4
 80204dc:	eb42 0106 	adc.w	r1, r2, r6
 80204e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80204e4:	bf08      	it	eq
 80204e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80204ea:	bd70      	pop	{r4, r5, r6, pc}
 80204ec:	f1c4 040c 	rsb	r4, r4, #12
 80204f0:	f1c4 0520 	rsb	r5, r4, #32
 80204f4:	fa00 f304 	lsl.w	r3, r0, r4
 80204f8:	fa20 f005 	lsr.w	r0, r0, r5
 80204fc:	fa01 f204 	lsl.w	r2, r1, r4
 8020500:	ea40 0002 	orr.w	r0, r0, r2
 8020504:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020508:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802050c:	f141 0100 	adc.w	r1, r1, #0
 8020510:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020514:	bf08      	it	eq
 8020516:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802051a:	bd70      	pop	{r4, r5, r6, pc}
 802051c:	f1c4 0520 	rsb	r5, r4, #32
 8020520:	fa00 f205 	lsl.w	r2, r0, r5
 8020524:	ea4e 0e02 	orr.w	lr, lr, r2
 8020528:	fa20 f304 	lsr.w	r3, r0, r4
 802052c:	fa01 f205 	lsl.w	r2, r1, r5
 8020530:	ea43 0302 	orr.w	r3, r3, r2
 8020534:	fa21 f004 	lsr.w	r0, r1, r4
 8020538:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802053c:	fa21 f204 	lsr.w	r2, r1, r4
 8020540:	ea20 0002 	bic.w	r0, r0, r2
 8020544:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8020548:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802054c:	bf08      	it	eq
 802054e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020552:	bd70      	pop	{r4, r5, r6, pc}
 8020554:	f094 0f00 	teq	r4, #0
 8020558:	d10f      	bne.n	802057a <__aeabi_dmul+0x1c2>
 802055a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802055e:	0040      	lsls	r0, r0, #1
 8020560:	eb41 0101 	adc.w	r1, r1, r1
 8020564:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020568:	bf08      	it	eq
 802056a:	3c01      	subeq	r4, #1
 802056c:	d0f7      	beq.n	802055e <__aeabi_dmul+0x1a6>
 802056e:	ea41 0106 	orr.w	r1, r1, r6
 8020572:	f095 0f00 	teq	r5, #0
 8020576:	bf18      	it	ne
 8020578:	4770      	bxne	lr
 802057a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 802057e:	0052      	lsls	r2, r2, #1
 8020580:	eb43 0303 	adc.w	r3, r3, r3
 8020584:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8020588:	bf08      	it	eq
 802058a:	3d01      	subeq	r5, #1
 802058c:	d0f7      	beq.n	802057e <__aeabi_dmul+0x1c6>
 802058e:	ea43 0306 	orr.w	r3, r3, r6
 8020592:	4770      	bx	lr
 8020594:	ea94 0f0c 	teq	r4, ip
 8020598:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802059c:	bf18      	it	ne
 802059e:	ea95 0f0c 	teqne	r5, ip
 80205a2:	d00c      	beq.n	80205be <__aeabi_dmul+0x206>
 80205a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80205a8:	bf18      	it	ne
 80205aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80205ae:	d1d1      	bne.n	8020554 <__aeabi_dmul+0x19c>
 80205b0:	ea81 0103 	eor.w	r1, r1, r3
 80205b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205b8:	f04f 0000 	mov.w	r0, #0
 80205bc:	bd70      	pop	{r4, r5, r6, pc}
 80205be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80205c2:	bf06      	itte	eq
 80205c4:	4610      	moveq	r0, r2
 80205c6:	4619      	moveq	r1, r3
 80205c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80205cc:	d019      	beq.n	8020602 <__aeabi_dmul+0x24a>
 80205ce:	ea94 0f0c 	teq	r4, ip
 80205d2:	d102      	bne.n	80205da <__aeabi_dmul+0x222>
 80205d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80205d8:	d113      	bne.n	8020602 <__aeabi_dmul+0x24a>
 80205da:	ea95 0f0c 	teq	r5, ip
 80205de:	d105      	bne.n	80205ec <__aeabi_dmul+0x234>
 80205e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80205e4:	bf1c      	itt	ne
 80205e6:	4610      	movne	r0, r2
 80205e8:	4619      	movne	r1, r3
 80205ea:	d10a      	bne.n	8020602 <__aeabi_dmul+0x24a>
 80205ec:	ea81 0103 	eor.w	r1, r1, r3
 80205f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80205f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80205fc:	f04f 0000 	mov.w	r0, #0
 8020600:	bd70      	pop	{r4, r5, r6, pc}
 8020602:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020606:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 802060a:	bd70      	pop	{r4, r5, r6, pc}

0802060c <__aeabi_ddiv>:
 802060c:	b570      	push	{r4, r5, r6, lr}
 802060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802061a:	bf1d      	ittte	ne
 802061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020620:	ea94 0f0c 	teqne	r4, ip
 8020624:	ea95 0f0c 	teqne	r5, ip
 8020628:	f000 f8a7 	bleq	802077a <__aeabi_ddiv+0x16e>
 802062c:	eba4 0405 	sub.w	r4, r4, r5
 8020630:	ea81 0e03 	eor.w	lr, r1, r3
 8020634:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020638:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802063c:	f000 8088 	beq.w	8020750 <__aeabi_ddiv+0x144>
 8020640:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020644:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8020648:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 802064c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8020650:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020654:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020658:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802065c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8020660:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8020664:	429d      	cmp	r5, r3
 8020666:	bf08      	it	eq
 8020668:	4296      	cmpeq	r6, r2
 802066a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 802066e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8020672:	d202      	bcs.n	802067a <__aeabi_ddiv+0x6e>
 8020674:	085b      	lsrs	r3, r3, #1
 8020676:	ea4f 0232 	mov.w	r2, r2, rrx
 802067a:	1ab6      	subs	r6, r6, r2
 802067c:	eb65 0503 	sbc.w	r5, r5, r3
 8020680:	085b      	lsrs	r3, r3, #1
 8020682:	ea4f 0232 	mov.w	r2, r2, rrx
 8020686:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 802068a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 802068e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020692:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020696:	bf22      	ittt	cs
 8020698:	1ab6      	subcs	r6, r6, r2
 802069a:	4675      	movcs	r5, lr
 802069c:	ea40 000c 	orrcs.w	r0, r0, ip
 80206a0:	085b      	lsrs	r3, r3, #1
 80206a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80206a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80206aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206ae:	bf22      	ittt	cs
 80206b0:	1ab6      	subcs	r6, r6, r2
 80206b2:	4675      	movcs	r5, lr
 80206b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80206b8:	085b      	lsrs	r3, r3, #1
 80206ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80206be:	ebb6 0e02 	subs.w	lr, r6, r2
 80206c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206c6:	bf22      	ittt	cs
 80206c8:	1ab6      	subcs	r6, r6, r2
 80206ca:	4675      	movcs	r5, lr
 80206cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80206d0:	085b      	lsrs	r3, r3, #1
 80206d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80206d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80206da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206de:	bf22      	ittt	cs
 80206e0:	1ab6      	subcs	r6, r6, r2
 80206e2:	4675      	movcs	r5, lr
 80206e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80206e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80206ec:	d018      	beq.n	8020720 <__aeabi_ddiv+0x114>
 80206ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80206f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80206f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80206fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80206fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8020702:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8020706:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802070a:	d1c0      	bne.n	802068e <__aeabi_ddiv+0x82>
 802070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020710:	d10b      	bne.n	802072a <__aeabi_ddiv+0x11e>
 8020712:	ea41 0100 	orr.w	r1, r1, r0
 8020716:	f04f 0000 	mov.w	r0, #0
 802071a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 802071e:	e7b6      	b.n	802068e <__aeabi_ddiv+0x82>
 8020720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020724:	bf04      	itt	eq
 8020726:	4301      	orreq	r1, r0
 8020728:	2000      	moveq	r0, #0
 802072a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 802072e:	bf88      	it	hi
 8020730:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020734:	f63f aeaf 	bhi.w	8020496 <__aeabi_dmul+0xde>
 8020738:	ebb5 0c03 	subs.w	ip, r5, r3
 802073c:	bf04      	itt	eq
 802073e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8020742:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020746:	f150 0000 	adcs.w	r0, r0, #0
 802074a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802074e:	bd70      	pop	{r4, r5, r6, pc}
 8020750:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8020754:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020758:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 802075c:	bfc2      	ittt	gt
 802075e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020762:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020766:	bd70      	popgt	{r4, r5, r6, pc}
 8020768:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802076c:	f04f 0e00 	mov.w	lr, #0
 8020770:	3c01      	subs	r4, #1
 8020772:	e690      	b.n	8020496 <__aeabi_dmul+0xde>
 8020774:	ea45 0e06 	orr.w	lr, r5, r6
 8020778:	e68d      	b.n	8020496 <__aeabi_dmul+0xde>
 802077a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802077e:	ea94 0f0c 	teq	r4, ip
 8020782:	bf08      	it	eq
 8020784:	ea95 0f0c 	teqeq	r5, ip
 8020788:	f43f af3b 	beq.w	8020602 <__aeabi_dmul+0x24a>
 802078c:	ea94 0f0c 	teq	r4, ip
 8020790:	d10a      	bne.n	80207a8 <__aeabi_ddiv+0x19c>
 8020792:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020796:	f47f af34 	bne.w	8020602 <__aeabi_dmul+0x24a>
 802079a:	ea95 0f0c 	teq	r5, ip
 802079e:	f47f af25 	bne.w	80205ec <__aeabi_dmul+0x234>
 80207a2:	4610      	mov	r0, r2
 80207a4:	4619      	mov	r1, r3
 80207a6:	e72c      	b.n	8020602 <__aeabi_dmul+0x24a>
 80207a8:	ea95 0f0c 	teq	r5, ip
 80207ac:	d106      	bne.n	80207bc <__aeabi_ddiv+0x1b0>
 80207ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80207b2:	f43f aefd 	beq.w	80205b0 <__aeabi_dmul+0x1f8>
 80207b6:	4610      	mov	r0, r2
 80207b8:	4619      	mov	r1, r3
 80207ba:	e722      	b.n	8020602 <__aeabi_dmul+0x24a>
 80207bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80207c0:	bf18      	it	ne
 80207c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80207c6:	f47f aec5 	bne.w	8020554 <__aeabi_dmul+0x19c>
 80207ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80207ce:	f47f af0d 	bne.w	80205ec <__aeabi_dmul+0x234>
 80207d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80207d6:	f47f aeeb 	bne.w	80205b0 <__aeabi_dmul+0x1f8>
 80207da:	e712      	b.n	8020602 <__aeabi_dmul+0x24a>

080207dc <__gedf2>:
 80207dc:	f04f 3cff 	mov.w	ip, #4294967295
 80207e0:	e006      	b.n	80207f0 <__cmpdf2+0x4>
 80207e2:	bf00      	nop

080207e4 <__ledf2>:
 80207e4:	f04f 0c01 	mov.w	ip, #1
 80207e8:	e002      	b.n	80207f0 <__cmpdf2+0x4>
 80207ea:	bf00      	nop

080207ec <__cmpdf2>:
 80207ec:	f04f 0c01 	mov.w	ip, #1
 80207f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80207f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80207f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80207fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020800:	bf18      	it	ne
 8020802:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020806:	d01b      	beq.n	8020840 <__cmpdf2+0x54>
 8020808:	b001      	add	sp, #4
 802080a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 802080e:	bf0c      	ite	eq
 8020810:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020814:	ea91 0f03 	teqne	r1, r3
 8020818:	bf02      	ittt	eq
 802081a:	ea90 0f02 	teqeq	r0, r2
 802081e:	2000      	moveq	r0, #0
 8020820:	4770      	bxeq	lr
 8020822:	f110 0f00 	cmn.w	r0, #0
 8020826:	ea91 0f03 	teq	r1, r3
 802082a:	bf58      	it	pl
 802082c:	4299      	cmppl	r1, r3
 802082e:	bf08      	it	eq
 8020830:	4290      	cmpeq	r0, r2
 8020832:	bf2c      	ite	cs
 8020834:	17d8      	asrcs	r0, r3, #31
 8020836:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 802083a:	f040 0001 	orr.w	r0, r0, #1
 802083e:	4770      	bx	lr
 8020840:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020844:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020848:	d102      	bne.n	8020850 <__cmpdf2+0x64>
 802084a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 802084e:	d107      	bne.n	8020860 <__cmpdf2+0x74>
 8020850:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020854:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020858:	d1d6      	bne.n	8020808 <__cmpdf2+0x1c>
 802085a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 802085e:	d0d3      	beq.n	8020808 <__cmpdf2+0x1c>
 8020860:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020864:	4770      	bx	lr
 8020866:	bf00      	nop

08020868 <__aeabi_cdrcmple>:
 8020868:	4684      	mov	ip, r0
 802086a:	4610      	mov	r0, r2
 802086c:	4662      	mov	r2, ip
 802086e:	468c      	mov	ip, r1
 8020870:	4619      	mov	r1, r3
 8020872:	4663      	mov	r3, ip
 8020874:	e000      	b.n	8020878 <__aeabi_cdcmpeq>
 8020876:	bf00      	nop

08020878 <__aeabi_cdcmpeq>:
 8020878:	b501      	push	{r0, lr}
 802087a:	f7ff ffb7 	bl	80207ec <__cmpdf2>
 802087e:	2800      	cmp	r0, #0
 8020880:	bf48      	it	mi
 8020882:	f110 0f00 	cmnmi.w	r0, #0
 8020886:	bd01      	pop	{r0, pc}

08020888 <__aeabi_dcmpeq>:
 8020888:	f84d ed08 	str.w	lr, [sp, #-8]!
 802088c:	f7ff fff4 	bl	8020878 <__aeabi_cdcmpeq>
 8020890:	bf0c      	ite	eq
 8020892:	2001      	moveq	r0, #1
 8020894:	2000      	movne	r0, #0
 8020896:	f85d fb08 	ldr.w	pc, [sp], #8
 802089a:	bf00      	nop

0802089c <__aeabi_dcmplt>:
 802089c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208a0:	f7ff ffea 	bl	8020878 <__aeabi_cdcmpeq>
 80208a4:	bf34      	ite	cc
 80208a6:	2001      	movcc	r0, #1
 80208a8:	2000      	movcs	r0, #0
 80208aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80208ae:	bf00      	nop

080208b0 <__aeabi_dcmple>:
 80208b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208b4:	f7ff ffe0 	bl	8020878 <__aeabi_cdcmpeq>
 80208b8:	bf94      	ite	ls
 80208ba:	2001      	movls	r0, #1
 80208bc:	2000      	movhi	r0, #0
 80208be:	f85d fb08 	ldr.w	pc, [sp], #8
 80208c2:	bf00      	nop

080208c4 <__aeabi_dcmpge>:
 80208c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208c8:	f7ff ffce 	bl	8020868 <__aeabi_cdrcmple>
 80208cc:	bf94      	ite	ls
 80208ce:	2001      	movls	r0, #1
 80208d0:	2000      	movhi	r0, #0
 80208d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80208d6:	bf00      	nop

080208d8 <__aeabi_dcmpgt>:
 80208d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208dc:	f7ff ffc4 	bl	8020868 <__aeabi_cdrcmple>
 80208e0:	bf34      	ite	cc
 80208e2:	2001      	movcc	r0, #1
 80208e4:	2000      	movcs	r0, #0
 80208e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80208ea:	bf00      	nop

080208ec <__aeabi_d2f>:
 80208ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80208f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80208f4:	bf24      	itt	cs
 80208f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80208fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80208fe:	d90d      	bls.n	802091c <__aeabi_d2f+0x30>
 8020900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8020904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 802090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8020910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8020914:	bf08      	it	eq
 8020916:	f020 0001 	biceq.w	r0, r0, #1
 802091a:	4770      	bx	lr
 802091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8020920:	d121      	bne.n	8020966 <__aeabi_d2f+0x7a>
 8020922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8020926:	bfbc      	itt	lt
 8020928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 802092c:	4770      	bxlt	lr
 802092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8020936:	f1c2 0218 	rsb	r2, r2, #24
 802093a:	f1c2 0c20 	rsb	ip, r2, #32
 802093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8020942:	fa20 f002 	lsr.w	r0, r0, r2
 8020946:	bf18      	it	ne
 8020948:	f040 0001 	orrne.w	r0, r0, #1
 802094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8020954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8020958:	ea40 000c 	orr.w	r0, r0, ip
 802095c:	fa23 f302 	lsr.w	r3, r3, r2
 8020960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020964:	e7cc      	b.n	8020900 <__aeabi_d2f+0x14>
 8020966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 802096a:	d107      	bne.n	802097c <__aeabi_d2f+0x90>
 802096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8020970:	bf1e      	ittt	ne
 8020972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8020976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 802097a:	4770      	bxne	lr
 802097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8020980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8020984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020988:	4770      	bx	lr
 802098a:	bf00      	nop

0802098c <__aeabi_uldivmod>:
 802098c:	b953      	cbnz	r3, 80209a4 <__aeabi_uldivmod+0x18>
 802098e:	b94a      	cbnz	r2, 80209a4 <__aeabi_uldivmod+0x18>
 8020990:	2900      	cmp	r1, #0
 8020992:	bf08      	it	eq
 8020994:	2800      	cmpeq	r0, #0
 8020996:	bf1c      	itt	ne
 8020998:	f04f 31ff 	movne.w	r1, #4294967295
 802099c:	f04f 30ff 	movne.w	r0, #4294967295
 80209a0:	f000 b996 	b.w	8020cd0 <__aeabi_idiv0>
 80209a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80209a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80209ac:	f000 f82a 	bl	8020a04 <__udivmoddi4>
 80209b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80209b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80209b8:	b004      	add	sp, #16
 80209ba:	4770      	bx	lr

080209bc <__aeabi_f2ulz>:
 80209bc:	b5d0      	push	{r4, r6, r7, lr}
 80209be:	f7ff fca3 	bl	8020308 <__aeabi_f2d>
 80209c2:	2200      	movs	r2, #0
 80209c4:	4b0d      	ldr	r3, [pc, #52]	; (80209fc <__aeabi_f2ulz+0x40>)
 80209c6:	4606      	mov	r6, r0
 80209c8:	460f      	mov	r7, r1
 80209ca:	f7ff fcf5 	bl	80203b8 <__aeabi_dmul>
 80209ce:	f000 f981 	bl	8020cd4 <__aeabi_d2uiz>
 80209d2:	4604      	mov	r4, r0
 80209d4:	f7ff fc76 	bl	80202c4 <__aeabi_ui2d>
 80209d8:	2200      	movs	r2, #0
 80209da:	4b09      	ldr	r3, [pc, #36]	; (8020a00 <__aeabi_f2ulz+0x44>)
 80209dc:	f7ff fcec 	bl	80203b8 <__aeabi_dmul>
 80209e0:	4602      	mov	r2, r0
 80209e2:	460b      	mov	r3, r1
 80209e4:	4630      	mov	r0, r6
 80209e6:	4639      	mov	r1, r7
 80209e8:	f7ff fb2e 	bl	8020048 <__aeabi_dsub>
 80209ec:	f000 f972 	bl	8020cd4 <__aeabi_d2uiz>
 80209f0:	2200      	movs	r2, #0
 80209f2:	4623      	mov	r3, r4
 80209f4:	4310      	orrs	r0, r2
 80209f6:	4619      	mov	r1, r3
 80209f8:	bdd0      	pop	{r4, r6, r7, pc}
 80209fa:	bf00      	nop
 80209fc:	3df00000 	.word	0x3df00000
 8020a00:	41f00000 	.word	0x41f00000

08020a04 <__udivmoddi4>:
 8020a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020a08:	9e08      	ldr	r6, [sp, #32]
 8020a0a:	4604      	mov	r4, r0
 8020a0c:	4688      	mov	r8, r1
 8020a0e:	2b00      	cmp	r3, #0
 8020a10:	d14b      	bne.n	8020aaa <__udivmoddi4+0xa6>
 8020a12:	428a      	cmp	r2, r1
 8020a14:	4615      	mov	r5, r2
 8020a16:	d967      	bls.n	8020ae8 <__udivmoddi4+0xe4>
 8020a18:	fab2 f282 	clz	r2, r2
 8020a1c:	b14a      	cbz	r2, 8020a32 <__udivmoddi4+0x2e>
 8020a1e:	f1c2 0720 	rsb	r7, r2, #32
 8020a22:	fa01 f302 	lsl.w	r3, r1, r2
 8020a26:	fa20 f707 	lsr.w	r7, r0, r7
 8020a2a:	4095      	lsls	r5, r2
 8020a2c:	ea47 0803 	orr.w	r8, r7, r3
 8020a30:	4094      	lsls	r4, r2
 8020a32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020a36:	0c23      	lsrs	r3, r4, #16
 8020a38:	fbb8 f7fe 	udiv	r7, r8, lr
 8020a3c:	fa1f fc85 	uxth.w	ip, r5
 8020a40:	fb0e 8817 	mls	r8, lr, r7, r8
 8020a44:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8020a48:	fb07 f10c 	mul.w	r1, r7, ip
 8020a4c:	4299      	cmp	r1, r3
 8020a4e:	d909      	bls.n	8020a64 <__udivmoddi4+0x60>
 8020a50:	18eb      	adds	r3, r5, r3
 8020a52:	f107 30ff 	add.w	r0, r7, #4294967295
 8020a56:	f080 811b 	bcs.w	8020c90 <__udivmoddi4+0x28c>
 8020a5a:	4299      	cmp	r1, r3
 8020a5c:	f240 8118 	bls.w	8020c90 <__udivmoddi4+0x28c>
 8020a60:	3f02      	subs	r7, #2
 8020a62:	442b      	add	r3, r5
 8020a64:	1a5b      	subs	r3, r3, r1
 8020a66:	b2a4      	uxth	r4, r4
 8020a68:	fbb3 f0fe 	udiv	r0, r3, lr
 8020a6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8020a70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020a74:	fb00 fc0c 	mul.w	ip, r0, ip
 8020a78:	45a4      	cmp	ip, r4
 8020a7a:	d909      	bls.n	8020a90 <__udivmoddi4+0x8c>
 8020a7c:	192c      	adds	r4, r5, r4
 8020a7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8020a82:	f080 8107 	bcs.w	8020c94 <__udivmoddi4+0x290>
 8020a86:	45a4      	cmp	ip, r4
 8020a88:	f240 8104 	bls.w	8020c94 <__udivmoddi4+0x290>
 8020a8c:	3802      	subs	r0, #2
 8020a8e:	442c      	add	r4, r5
 8020a90:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8020a94:	eba4 040c 	sub.w	r4, r4, ip
 8020a98:	2700      	movs	r7, #0
 8020a9a:	b11e      	cbz	r6, 8020aa4 <__udivmoddi4+0xa0>
 8020a9c:	40d4      	lsrs	r4, r2
 8020a9e:	2300      	movs	r3, #0
 8020aa0:	e9c6 4300 	strd	r4, r3, [r6]
 8020aa4:	4639      	mov	r1, r7
 8020aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020aaa:	428b      	cmp	r3, r1
 8020aac:	d909      	bls.n	8020ac2 <__udivmoddi4+0xbe>
 8020aae:	2e00      	cmp	r6, #0
 8020ab0:	f000 80eb 	beq.w	8020c8a <__udivmoddi4+0x286>
 8020ab4:	2700      	movs	r7, #0
 8020ab6:	e9c6 0100 	strd	r0, r1, [r6]
 8020aba:	4638      	mov	r0, r7
 8020abc:	4639      	mov	r1, r7
 8020abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020ac2:	fab3 f783 	clz	r7, r3
 8020ac6:	2f00      	cmp	r7, #0
 8020ac8:	d147      	bne.n	8020b5a <__udivmoddi4+0x156>
 8020aca:	428b      	cmp	r3, r1
 8020acc:	d302      	bcc.n	8020ad4 <__udivmoddi4+0xd0>
 8020ace:	4282      	cmp	r2, r0
 8020ad0:	f200 80fa 	bhi.w	8020cc8 <__udivmoddi4+0x2c4>
 8020ad4:	1a84      	subs	r4, r0, r2
 8020ad6:	eb61 0303 	sbc.w	r3, r1, r3
 8020ada:	2001      	movs	r0, #1
 8020adc:	4698      	mov	r8, r3
 8020ade:	2e00      	cmp	r6, #0
 8020ae0:	d0e0      	beq.n	8020aa4 <__udivmoddi4+0xa0>
 8020ae2:	e9c6 4800 	strd	r4, r8, [r6]
 8020ae6:	e7dd      	b.n	8020aa4 <__udivmoddi4+0xa0>
 8020ae8:	b902      	cbnz	r2, 8020aec <__udivmoddi4+0xe8>
 8020aea:	deff      	udf	#255	; 0xff
 8020aec:	fab2 f282 	clz	r2, r2
 8020af0:	2a00      	cmp	r2, #0
 8020af2:	f040 808f 	bne.w	8020c14 <__udivmoddi4+0x210>
 8020af6:	1b49      	subs	r1, r1, r5
 8020af8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020afc:	fa1f f885 	uxth.w	r8, r5
 8020b00:	2701      	movs	r7, #1
 8020b02:	fbb1 fcfe 	udiv	ip, r1, lr
 8020b06:	0c23      	lsrs	r3, r4, #16
 8020b08:	fb0e 111c 	mls	r1, lr, ip, r1
 8020b0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020b10:	fb08 f10c 	mul.w	r1, r8, ip
 8020b14:	4299      	cmp	r1, r3
 8020b16:	d907      	bls.n	8020b28 <__udivmoddi4+0x124>
 8020b18:	18eb      	adds	r3, r5, r3
 8020b1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8020b1e:	d202      	bcs.n	8020b26 <__udivmoddi4+0x122>
 8020b20:	4299      	cmp	r1, r3
 8020b22:	f200 80cd 	bhi.w	8020cc0 <__udivmoddi4+0x2bc>
 8020b26:	4684      	mov	ip, r0
 8020b28:	1a59      	subs	r1, r3, r1
 8020b2a:	b2a3      	uxth	r3, r4
 8020b2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8020b30:	fb0e 1410 	mls	r4, lr, r0, r1
 8020b34:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8020b38:	fb08 f800 	mul.w	r8, r8, r0
 8020b3c:	45a0      	cmp	r8, r4
 8020b3e:	d907      	bls.n	8020b50 <__udivmoddi4+0x14c>
 8020b40:	192c      	adds	r4, r5, r4
 8020b42:	f100 33ff 	add.w	r3, r0, #4294967295
 8020b46:	d202      	bcs.n	8020b4e <__udivmoddi4+0x14a>
 8020b48:	45a0      	cmp	r8, r4
 8020b4a:	f200 80b6 	bhi.w	8020cba <__udivmoddi4+0x2b6>
 8020b4e:	4618      	mov	r0, r3
 8020b50:	eba4 0408 	sub.w	r4, r4, r8
 8020b54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8020b58:	e79f      	b.n	8020a9a <__udivmoddi4+0x96>
 8020b5a:	f1c7 0c20 	rsb	ip, r7, #32
 8020b5e:	40bb      	lsls	r3, r7
 8020b60:	fa22 fe0c 	lsr.w	lr, r2, ip
 8020b64:	ea4e 0e03 	orr.w	lr, lr, r3
 8020b68:	fa01 f407 	lsl.w	r4, r1, r7
 8020b6c:	fa20 f50c 	lsr.w	r5, r0, ip
 8020b70:	fa21 f30c 	lsr.w	r3, r1, ip
 8020b74:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8020b78:	4325      	orrs	r5, r4
 8020b7a:	fbb3 f9f8 	udiv	r9, r3, r8
 8020b7e:	0c2c      	lsrs	r4, r5, #16
 8020b80:	fb08 3319 	mls	r3, r8, r9, r3
 8020b84:	fa1f fa8e 	uxth.w	sl, lr
 8020b88:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8020b8c:	fb09 f40a 	mul.w	r4, r9, sl
 8020b90:	429c      	cmp	r4, r3
 8020b92:	fa02 f207 	lsl.w	r2, r2, r7
 8020b96:	fa00 f107 	lsl.w	r1, r0, r7
 8020b9a:	d90b      	bls.n	8020bb4 <__udivmoddi4+0x1b0>
 8020b9c:	eb1e 0303 	adds.w	r3, lr, r3
 8020ba0:	f109 30ff 	add.w	r0, r9, #4294967295
 8020ba4:	f080 8087 	bcs.w	8020cb6 <__udivmoddi4+0x2b2>
 8020ba8:	429c      	cmp	r4, r3
 8020baa:	f240 8084 	bls.w	8020cb6 <__udivmoddi4+0x2b2>
 8020bae:	f1a9 0902 	sub.w	r9, r9, #2
 8020bb2:	4473      	add	r3, lr
 8020bb4:	1b1b      	subs	r3, r3, r4
 8020bb6:	b2ad      	uxth	r5, r5
 8020bb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8020bbc:	fb08 3310 	mls	r3, r8, r0, r3
 8020bc0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8020bc4:	fb00 fa0a 	mul.w	sl, r0, sl
 8020bc8:	45a2      	cmp	sl, r4
 8020bca:	d908      	bls.n	8020bde <__udivmoddi4+0x1da>
 8020bcc:	eb1e 0404 	adds.w	r4, lr, r4
 8020bd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8020bd4:	d26b      	bcs.n	8020cae <__udivmoddi4+0x2aa>
 8020bd6:	45a2      	cmp	sl, r4
 8020bd8:	d969      	bls.n	8020cae <__udivmoddi4+0x2aa>
 8020bda:	3802      	subs	r0, #2
 8020bdc:	4474      	add	r4, lr
 8020bde:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020be2:	fba0 8902 	umull	r8, r9, r0, r2
 8020be6:	eba4 040a 	sub.w	r4, r4, sl
 8020bea:	454c      	cmp	r4, r9
 8020bec:	46c2      	mov	sl, r8
 8020bee:	464b      	mov	r3, r9
 8020bf0:	d354      	bcc.n	8020c9c <__udivmoddi4+0x298>
 8020bf2:	d051      	beq.n	8020c98 <__udivmoddi4+0x294>
 8020bf4:	2e00      	cmp	r6, #0
 8020bf6:	d069      	beq.n	8020ccc <__udivmoddi4+0x2c8>
 8020bf8:	ebb1 050a 	subs.w	r5, r1, sl
 8020bfc:	eb64 0403 	sbc.w	r4, r4, r3
 8020c00:	fa04 fc0c 	lsl.w	ip, r4, ip
 8020c04:	40fd      	lsrs	r5, r7
 8020c06:	40fc      	lsrs	r4, r7
 8020c08:	ea4c 0505 	orr.w	r5, ip, r5
 8020c0c:	e9c6 5400 	strd	r5, r4, [r6]
 8020c10:	2700      	movs	r7, #0
 8020c12:	e747      	b.n	8020aa4 <__udivmoddi4+0xa0>
 8020c14:	f1c2 0320 	rsb	r3, r2, #32
 8020c18:	fa20 f703 	lsr.w	r7, r0, r3
 8020c1c:	4095      	lsls	r5, r2
 8020c1e:	fa01 f002 	lsl.w	r0, r1, r2
 8020c22:	fa21 f303 	lsr.w	r3, r1, r3
 8020c26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020c2a:	4338      	orrs	r0, r7
 8020c2c:	0c01      	lsrs	r1, r0, #16
 8020c2e:	fbb3 f7fe 	udiv	r7, r3, lr
 8020c32:	fa1f f885 	uxth.w	r8, r5
 8020c36:	fb0e 3317 	mls	r3, lr, r7, r3
 8020c3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020c3e:	fb07 f308 	mul.w	r3, r7, r8
 8020c42:	428b      	cmp	r3, r1
 8020c44:	fa04 f402 	lsl.w	r4, r4, r2
 8020c48:	d907      	bls.n	8020c5a <__udivmoddi4+0x256>
 8020c4a:	1869      	adds	r1, r5, r1
 8020c4c:	f107 3cff 	add.w	ip, r7, #4294967295
 8020c50:	d22f      	bcs.n	8020cb2 <__udivmoddi4+0x2ae>
 8020c52:	428b      	cmp	r3, r1
 8020c54:	d92d      	bls.n	8020cb2 <__udivmoddi4+0x2ae>
 8020c56:	3f02      	subs	r7, #2
 8020c58:	4429      	add	r1, r5
 8020c5a:	1acb      	subs	r3, r1, r3
 8020c5c:	b281      	uxth	r1, r0
 8020c5e:	fbb3 f0fe 	udiv	r0, r3, lr
 8020c62:	fb0e 3310 	mls	r3, lr, r0, r3
 8020c66:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020c6a:	fb00 f308 	mul.w	r3, r0, r8
 8020c6e:	428b      	cmp	r3, r1
 8020c70:	d907      	bls.n	8020c82 <__udivmoddi4+0x27e>
 8020c72:	1869      	adds	r1, r5, r1
 8020c74:	f100 3cff 	add.w	ip, r0, #4294967295
 8020c78:	d217      	bcs.n	8020caa <__udivmoddi4+0x2a6>
 8020c7a:	428b      	cmp	r3, r1
 8020c7c:	d915      	bls.n	8020caa <__udivmoddi4+0x2a6>
 8020c7e:	3802      	subs	r0, #2
 8020c80:	4429      	add	r1, r5
 8020c82:	1ac9      	subs	r1, r1, r3
 8020c84:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8020c88:	e73b      	b.n	8020b02 <__udivmoddi4+0xfe>
 8020c8a:	4637      	mov	r7, r6
 8020c8c:	4630      	mov	r0, r6
 8020c8e:	e709      	b.n	8020aa4 <__udivmoddi4+0xa0>
 8020c90:	4607      	mov	r7, r0
 8020c92:	e6e7      	b.n	8020a64 <__udivmoddi4+0x60>
 8020c94:	4618      	mov	r0, r3
 8020c96:	e6fb      	b.n	8020a90 <__udivmoddi4+0x8c>
 8020c98:	4541      	cmp	r1, r8
 8020c9a:	d2ab      	bcs.n	8020bf4 <__udivmoddi4+0x1f0>
 8020c9c:	ebb8 0a02 	subs.w	sl, r8, r2
 8020ca0:	eb69 020e 	sbc.w	r2, r9, lr
 8020ca4:	3801      	subs	r0, #1
 8020ca6:	4613      	mov	r3, r2
 8020ca8:	e7a4      	b.n	8020bf4 <__udivmoddi4+0x1f0>
 8020caa:	4660      	mov	r0, ip
 8020cac:	e7e9      	b.n	8020c82 <__udivmoddi4+0x27e>
 8020cae:	4618      	mov	r0, r3
 8020cb0:	e795      	b.n	8020bde <__udivmoddi4+0x1da>
 8020cb2:	4667      	mov	r7, ip
 8020cb4:	e7d1      	b.n	8020c5a <__udivmoddi4+0x256>
 8020cb6:	4681      	mov	r9, r0
 8020cb8:	e77c      	b.n	8020bb4 <__udivmoddi4+0x1b0>
 8020cba:	3802      	subs	r0, #2
 8020cbc:	442c      	add	r4, r5
 8020cbe:	e747      	b.n	8020b50 <__udivmoddi4+0x14c>
 8020cc0:	f1ac 0c02 	sub.w	ip, ip, #2
 8020cc4:	442b      	add	r3, r5
 8020cc6:	e72f      	b.n	8020b28 <__udivmoddi4+0x124>
 8020cc8:	4638      	mov	r0, r7
 8020cca:	e708      	b.n	8020ade <__udivmoddi4+0xda>
 8020ccc:	4637      	mov	r7, r6
 8020cce:	e6e9      	b.n	8020aa4 <__udivmoddi4+0xa0>

08020cd0 <__aeabi_idiv0>:
 8020cd0:	4770      	bx	lr
 8020cd2:	bf00      	nop

08020cd4 <__aeabi_d2uiz>:
 8020cd4:	004a      	lsls	r2, r1, #1
 8020cd6:	d211      	bcs.n	8020cfc <__aeabi_d2uiz+0x28>
 8020cd8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020cdc:	d211      	bcs.n	8020d02 <__aeabi_d2uiz+0x2e>
 8020cde:	d50d      	bpl.n	8020cfc <__aeabi_d2uiz+0x28>
 8020ce0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020ce4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020ce8:	d40e      	bmi.n	8020d08 <__aeabi_d2uiz+0x34>
 8020cea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020cee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020cf2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020cf6:	fa23 f002 	lsr.w	r0, r3, r2
 8020cfa:	4770      	bx	lr
 8020cfc:	f04f 0000 	mov.w	r0, #0
 8020d00:	4770      	bx	lr
 8020d02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020d06:	d102      	bne.n	8020d0e <__aeabi_d2uiz+0x3a>
 8020d08:	f04f 30ff 	mov.w	r0, #4294967295
 8020d0c:	4770      	bx	lr
 8020d0e:	f04f 0000 	mov.w	r0, #0
 8020d12:	4770      	bx	lr

08020d14 <_ZN7EncoderC1Ev>:
#include "encoder.hpp"
#include "declare_extern.h"

Encoder::Encoder() : distance_(0)
 8020d14:	b480      	push	{r7}
 8020d16:	b083      	sub	sp, #12
 8020d18:	af00      	add	r7, sp, #0
 8020d1a:	6078      	str	r0, [r7, #4]
                   , distance_stack_(0)
                   , distance_difference_(0) {}
 8020d1c:	687b      	ldr	r3, [r7, #4]
 8020d1e:	f04f 0200 	mov.w	r2, #0
 8020d22:	601a      	str	r2, [r3, #0]
 8020d24:	687b      	ldr	r3, [r7, #4]
 8020d26:	f04f 0200 	mov.w	r2, #0
 8020d2a:	605a      	str	r2, [r3, #4]
 8020d2c:	687b      	ldr	r3, [r7, #4]
 8020d2e:	f04f 0200 	mov.w	r2, #0
 8020d32:	609a      	str	r2, [r3, #8]
 8020d34:	687b      	ldr	r3, [r7, #4]
 8020d36:	4618      	mov	r0, r3
 8020d38:	370c      	adds	r7, #12
 8020d3a:	46bd      	mov	sp, r7
 8020d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d40:	4770      	bx	lr
	...

08020d44 <_ZN7Encoder4InitEv>:

void Encoder::Init()
{
 8020d44:	b580      	push	{r7, lr}
 8020d46:	b082      	sub	sp, #8
 8020d48:	af00      	add	r7, sp, #0
 8020d4a:	6078      	str	r0, [r7, #4]
	if(HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL) != HAL_OK)
 8020d4c:	213c      	movs	r1, #60	; 0x3c
 8020d4e:	4812      	ldr	r0, [pc, #72]	; (8020d98 <_ZN7Encoder4InitEv+0x54>)
 8020d50:	f008 ffda 	bl	8029d08 <HAL_TIM_Encoder_Start>
 8020d54:	4603      	mov	r3, r0
 8020d56:	2b00      	cmp	r3, #0
 8020d58:	bf14      	ite	ne
 8020d5a:	2301      	movne	r3, #1
 8020d5c:	2300      	moveq	r3, #0
 8020d5e:	b2db      	uxtb	r3, r3
 8020d60:	2b00      	cmp	r3, #0
 8020d62:	d004      	beq.n	8020d6e <_ZN7Encoder4InitEv+0x2a>
	{
#ifdef DEBUG_MODE
        g_error_handler_tim8 = true;
 8020d64:	4b0d      	ldr	r3, [pc, #52]	; (8020d9c <_ZN7Encoder4InitEv+0x58>)
 8020d66:	2201      	movs	r2, #1
 8020d68:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

		Error_Handler();
 8020d6a:	f003 fb53 	bl	8024414 <Error_Handler>
	}

	if(HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL) != HAL_OK)
 8020d6e:	213c      	movs	r1, #60	; 0x3c
 8020d70:	480b      	ldr	r0, [pc, #44]	; (8020da0 <_ZN7Encoder4InitEv+0x5c>)
 8020d72:	f008 ffc9 	bl	8029d08 <HAL_TIM_Encoder_Start>
 8020d76:	4603      	mov	r3, r0
 8020d78:	2b00      	cmp	r3, #0
 8020d7a:	bf14      	ite	ne
 8020d7c:	2301      	movne	r3, #1
 8020d7e:	2300      	moveq	r3, #0
 8020d80:	b2db      	uxtb	r3, r3
 8020d82:	2b00      	cmp	r3, #0
 8020d84:	d004      	beq.n	8020d90 <_ZN7Encoder4InitEv+0x4c>
	{
#ifdef DEBUG_MODE
        g_error_handler_tim4 = true;
 8020d86:	4b07      	ldr	r3, [pc, #28]	; (8020da4 <_ZN7Encoder4InitEv+0x60>)
 8020d88:	2201      	movs	r2, #1
 8020d8a:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

		Error_Handler();
 8020d8c:	f003 fb42 	bl	8024414 <Error_Handler>
	}
}
 8020d90:	bf00      	nop
 8020d92:	3708      	adds	r7, #8
 8020d94:	46bd      	mov	sp, r7
 8020d96:	bd80      	pop	{r7, pc}
 8020d98:	20000640 	.word	0x20000640
 8020d9c:	200000d9 	.word	0x200000d9
 8020da0:	20000680 	.word	0x20000680
 8020da4:	200000d8 	.word	0x200000d8

08020da8 <_ZN7Encoder6UpdateEv>:

void Encoder::Update()
{
 8020da8:	b590      	push	{r4, r7, lr}
 8020daa:	b087      	sub	sp, #28
 8020dac:	af00      	add	r7, sp, #0
 8020dae:	6078      	str	r0, [r7, #4]
	int16_t count_l = static_cast<int16_t>((TIM8 -> CNT) - START_COUNT);
 8020db0:	4b39      	ldr	r3, [pc, #228]	; (8020e98 <_ZN7Encoder6UpdateEv+0xf0>)
 8020db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020db4:	b29b      	uxth	r3, r3
 8020db6:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8020dba:	3b7f      	subs	r3, #127	; 0x7f
 8020dbc:	b29b      	uxth	r3, r3
 8020dbe:	82fb      	strh	r3, [r7, #22]
	int16_t count_r = static_cast<int16_t>(START_COUNT - (TIM4 -> CNT));
 8020dc0:	4b36      	ldr	r3, [pc, #216]	; (8020e9c <_ZN7Encoder6UpdateEv+0xf4>)
 8020dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020dc4:	b29b      	uxth	r3, r3
 8020dc6:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 8020dca:	337f      	adds	r3, #127	; 0x7f
 8020dcc:	b29b      	uxth	r3, r3
 8020dce:	82bb      	strh	r3, [r7, #20]
	TIM8 -> CNT = START_COUNT;
 8020dd0:	4b31      	ldr	r3, [pc, #196]	; (8020e98 <_ZN7Encoder6UpdateEv+0xf0>)
 8020dd2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020dd6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = START_COUNT;
 8020dd8:	4b30      	ldr	r3, [pc, #192]	; (8020e9c <_ZN7Encoder6UpdateEv+0xf4>)
 8020dda:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020dde:	625a      	str	r2, [r3, #36]	; 0x24
	float distance_l = static_cast<float>(count_l * DISTANCE_PER_COUNT);
 8020de0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020de4:	4618      	mov	r0, r3
 8020de6:	f7ff fa7d 	bl	80202e4 <__aeabi_i2d>
 8020dea:	a329      	add	r3, pc, #164	; (adr r3, 8020e90 <_ZN7Encoder6UpdateEv+0xe8>)
 8020dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020df0:	f7ff fae2 	bl	80203b8 <__aeabi_dmul>
 8020df4:	4603      	mov	r3, r0
 8020df6:	460c      	mov	r4, r1
 8020df8:	4618      	mov	r0, r3
 8020dfa:	4621      	mov	r1, r4
 8020dfc:	f7ff fd76 	bl	80208ec <__aeabi_d2f>
 8020e00:	4603      	mov	r3, r0
 8020e02:	613b      	str	r3, [r7, #16]
	float distance_r = static_cast<float>(count_r * DISTANCE_PER_COUNT);
 8020e04:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8020e08:	4618      	mov	r0, r3
 8020e0a:	f7ff fa6b 	bl	80202e4 <__aeabi_i2d>
 8020e0e:	a320      	add	r3, pc, #128	; (adr r3, 8020e90 <_ZN7Encoder6UpdateEv+0xe8>)
 8020e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e14:	f7ff fad0 	bl	80203b8 <__aeabi_dmul>
 8020e18:	4603      	mov	r3, r0
 8020e1a:	460c      	mov	r4, r1
 8020e1c:	4618      	mov	r0, r3
 8020e1e:	4621      	mov	r1, r4
 8020e20:	f7ff fd64 	bl	80208ec <__aeabi_d2f>
 8020e24:	4603      	mov	r3, r0
 8020e26:	60fb      	str	r3, [r7, #12]
	float distance = (distance_l + distance_r) / 2.0;
 8020e28:	ed97 7a04 	vldr	s14, [r7, #16]
 8020e2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8020e30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8020e34:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8020e38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8020e3c:	edc7 7a02 	vstr	s15, [r7, #8]

	distance_ = distance;
 8020e40:	687b      	ldr	r3, [r7, #4]
 8020e42:	68ba      	ldr	r2, [r7, #8]
 8020e44:	601a      	str	r2, [r3, #0]
	distance_stack_ += distance;
 8020e46:	687b      	ldr	r3, [r7, #4]
 8020e48:	ed93 7a01 	vldr	s14, [r3, #4]
 8020e4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8020e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020e54:	687b      	ldr	r3, [r7, #4]
 8020e56:	edc3 7a01 	vstr	s15, [r3, #4]
	distance_difference_ = distance_r - distance_l;
 8020e5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8020e5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8020e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8020e66:	687b      	ldr	r3, [r7, #4]
 8020e68:	edc3 7a02 	vstr	s15, [r3, #8]

#ifdef DEBUG_MODE
	g_enc_cnt_l = count_l;
 8020e6c:	4a0c      	ldr	r2, [pc, #48]	; (8020ea0 <_ZN7Encoder6UpdateEv+0xf8>)
 8020e6e:	8afb      	ldrh	r3, [r7, #22]
 8020e70:	8013      	strh	r3, [r2, #0]
	g_enc_cnt_r = count_r;
 8020e72:	4a0c      	ldr	r2, [pc, #48]	; (8020ea4 <_ZN7Encoder6UpdateEv+0xfc>)
 8020e74:	8abb      	ldrh	r3, [r7, #20]
 8020e76:	8013      	strh	r3, [r2, #0]
	g_distance_l = distance_l;
 8020e78:	4a0b      	ldr	r2, [pc, #44]	; (8020ea8 <_ZN7Encoder6UpdateEv+0x100>)
 8020e7a:	693b      	ldr	r3, [r7, #16]
 8020e7c:	6013      	str	r3, [r2, #0]
	g_distance_r = distance_r;
 8020e7e:	4a0b      	ldr	r2, [pc, #44]	; (8020eac <_ZN7Encoder6UpdateEv+0x104>)
 8020e80:	68fb      	ldr	r3, [r7, #12]
 8020e82:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8020e84:	bf00      	nop
 8020e86:	371c      	adds	r7, #28
 8020e88:	46bd      	mov	sp, r7
 8020e8a:	bd90      	pop	{r4, r7, pc}
 8020e8c:	f3af 8000 	nop.w
 8020e90:	5d35653d 	.word	0x5d35653d
 8020e94:	3f7d744f 	.word	0x3f7d744f
 8020e98:	40010400 	.word	0x40010400
 8020e9c:	40000800 	.word	0x40000800
 8020ea0:	20000278 	.word	0x20000278
 8020ea4:	2000027a 	.word	0x2000027a
 8020ea8:	2000027c 	.word	0x2000027c
 8020eac:	20000280 	.word	0x20000280

08020eb0 <_ZN7Encoder18ResetDistanceStackEv>:
	TIM8 -> CNT = START_COUNT;
	TIM4 -> CNT = START_COUNT;
}

void Encoder::ResetDistanceStack()
{
 8020eb0:	b480      	push	{r7}
 8020eb2:	b083      	sub	sp, #12
 8020eb4:	af00      	add	r7, sp, #0
 8020eb6:	6078      	str	r0, [r7, #4]
	distance_stack_ = 0.0;
 8020eb8:	687b      	ldr	r3, [r7, #4]
 8020eba:	f04f 0200 	mov.w	r2, #0
 8020ebe:	605a      	str	r2, [r3, #4]
}
 8020ec0:	bf00      	nop
 8020ec2:	370c      	adds	r7, #12
 8020ec4:	46bd      	mov	sp, r7
 8020ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020eca:	4770      	bx	lr

08020ecc <_ZN7Encoder11GetDistanceEv>:

float Encoder::GetDistance()
{
 8020ecc:	b480      	push	{r7}
 8020ece:	b083      	sub	sp, #12
 8020ed0:	af00      	add	r7, sp, #0
 8020ed2:	6078      	str	r0, [r7, #4]
	return distance_;
 8020ed4:	687b      	ldr	r3, [r7, #4]
 8020ed6:	681b      	ldr	r3, [r3, #0]
 8020ed8:	ee07 3a90 	vmov	s15, r3
}
 8020edc:	eeb0 0a67 	vmov.f32	s0, s15
 8020ee0:	370c      	adds	r7, #12
 8020ee2:	46bd      	mov	sp, r7
 8020ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ee8:	4770      	bx	lr

08020eea <_ZN7Encoder16GetDistanceStackEv>:

float Encoder::GetDistanceStack()
{
 8020eea:	b480      	push	{r7}
 8020eec:	b083      	sub	sp, #12
 8020eee:	af00      	add	r7, sp, #0
 8020ef0:	6078      	str	r0, [r7, #4]
	return distance_stack_;
 8020ef2:	687b      	ldr	r3, [r7, #4]
 8020ef4:	685b      	ldr	r3, [r3, #4]
 8020ef6:	ee07 3a90 	vmov	s15, r3
}
 8020efa:	eeb0 0a67 	vmov.f32	s0, s15
 8020efe:	370c      	adds	r7, #12
 8020f00:	46bd      	mov	sp, r7
 8020f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f06:	4770      	bx	lr

08020f08 <_ZN7Encoder15AngularVelocityEv>:

float Encoder::AngularVelocity()
{
 8020f08:	b590      	push	{r4, r7, lr}
 8020f0a:	b083      	sub	sp, #12
 8020f0c:	af00      	add	r7, sp, #0
 8020f0e:	6078      	str	r0, [r7, #4]
	return distance_difference_ / (TIM6_PERIOD * MACHINE_TREAD);
 8020f10:	687b      	ldr	r3, [r7, #4]
 8020f12:	689b      	ldr	r3, [r3, #8]
 8020f14:	4618      	mov	r0, r3
 8020f16:	f7ff f9f7 	bl	8020308 <__aeabi_f2d>
 8020f1a:	a309      	add	r3, pc, #36	; (adr r3, 8020f40 <_ZN7Encoder15AngularVelocityEv+0x38>)
 8020f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f20:	f7ff fb74 	bl	802060c <__aeabi_ddiv>
 8020f24:	4603      	mov	r3, r0
 8020f26:	460c      	mov	r4, r1
 8020f28:	4618      	mov	r0, r3
 8020f2a:	4621      	mov	r1, r4
 8020f2c:	f7ff fcde 	bl	80208ec <__aeabi_d2f>
 8020f30:	4603      	mov	r3, r0
 8020f32:	ee07 3a90 	vmov	s15, r3
 8020f36:	eeb0 0a67 	vmov.f32	s0, s15
 8020f3a:	370c      	adds	r7, #12
 8020f3c:	46bd      	mov	sp, r7
 8020f3e:	bd90      	pop	{r4, r7, pc}
 8020f40:	00000000 	.word	0x00000000
 8020f44:	4063d800 	.word	0x4063d800

08020f48 <_ZN5Flash5ClearEv>:
#include "flash.hpp"
#include "declare_extern.h"
#include <string.h>

bool Flash::Clear()
{
 8020f48:	b580      	push	{r7, lr}
 8020f4a:	b088      	sub	sp, #32
 8020f4c:	af00      	add	r7, sp, #0
 8020f4e:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 8020f50:	f006 fe8e 	bl	8027c70 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef erase;

    erase.TypeErase    = FLASH_TYPEERASE_SECTORS; // Erasure range : Sectors
 8020f54:	2300      	movs	r3, #0
 8020f56:	60fb      	str	r3, [r7, #12]
    erase.Sector       = FLASH_SECTOR_1;          // Which sector : 1
 8020f58:	2301      	movs	r3, #1
 8020f5a:	617b      	str	r3, [r7, #20]
    erase.NbSectors    = 4;                       // How many sector : 4 (1,2,3,4)
 8020f5c:	2304      	movs	r3, #4
 8020f5e:	61bb      	str	r3, [r7, #24]
    erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;   // Voltage range : 2.7 ~ 3.6 [V]
 8020f60:	2302      	movs	r3, #2
 8020f62:	61fb      	str	r3, [r7, #28]

    // Success => 0xFFFFFFFF is stored.
    // Fail => Sector number is stored.
    uint32_t failed_sector = 0;
 8020f64:	2300      	movs	r3, #0
 8020f66:	60bb      	str	r3, [r7, #8]

    if(HAL_FLASHEx_Erase(&erase, &failed_sector) != HAL_OK)
 8020f68:	f107 0208 	add.w	r2, r7, #8
 8020f6c:	f107 030c 	add.w	r3, r7, #12
 8020f70:	4611      	mov	r1, r2
 8020f72:	4618      	mov	r0, r3
 8020f74:	f006 ffdc 	bl	8027f30 <HAL_FLASHEx_Erase>
 8020f78:	4603      	mov	r3, r0
 8020f7a:	2b00      	cmp	r3, #0
 8020f7c:	bf14      	ite	ne
 8020f7e:	2301      	movne	r3, #1
 8020f80:	2300      	moveq	r3, #0
 8020f82:	b2db      	uxtb	r3, r3
 8020f84:	2b00      	cmp	r3, #0
 8020f86:	d004      	beq.n	8020f92 <_ZN5Flash5ClearEv+0x4a>
    {
#ifdef DEBUG_MODE
        g_erase_failed_sector = failed_sector;
 8020f88:	68bb      	ldr	r3, [r7, #8]
 8020f8a:	4a08      	ldr	r2, [pc, #32]	; (8020fac <_ZN5Flash5ClearEv+0x64>)
 8020f8c:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

        return false;
 8020f8e:	2300      	movs	r3, #0
 8020f90:	e008      	b.n	8020fa4 <_ZN5Flash5ClearEv+0x5c>
    }

    HAL_FLASH_Lock();
 8020f92:	f006 fe8f 	bl	8027cb4 <HAL_FLASH_Lock>

    return failed_sector == 0xFFFFFFFF;
 8020f96:	68bb      	ldr	r3, [r7, #8]
 8020f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020f9c:	bf0c      	ite	eq
 8020f9e:	2301      	moveq	r3, #1
 8020fa0:	2300      	movne	r3, #0
 8020fa2:	b2db      	uxtb	r3, r3
}
 8020fa4:	4618      	mov	r0, r3
 8020fa6:	3720      	adds	r7, #32
 8020fa8:	46bd      	mov	sp, r7
 8020faa:	bd80      	pop	{r7, pc}
 8020fac:	200002a4 	.word	0x200002a4

08020fb0 <_ZN5Flash10StoreUint8EmPhm>:

bool Flash::StoreUint8(uint32_t address, uint8_t *data, uint32_t number)
{
 8020fb0:	b590      	push	{r4, r7, lr}
 8020fb2:	b087      	sub	sp, #28
 8020fb4:	af00      	add	r7, sp, #0
 8020fb6:	60f8      	str	r0, [r7, #12]
 8020fb8:	60b9      	str	r1, [r7, #8]
 8020fba:	607a      	str	r2, [r7, #4]
 8020fbc:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8020fbe:	f006 fe57 	bl	8027c70 <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 8020fc2:	2300      	movs	r3, #0
 8020fc4:	613b      	str	r3, [r7, #16]
 8020fc6:	693a      	ldr	r2, [r7, #16]
 8020fc8:	683b      	ldr	r3, [r7, #0]
 8020fca:	429a      	cmp	r2, r3
 8020fcc:	d218      	bcs.n	8021000 <_ZN5Flash10StoreUint8EmPhm+0x50>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address++, *data++);
 8020fce:	68b9      	ldr	r1, [r7, #8]
 8020fd0:	1c4b      	adds	r3, r1, #1
 8020fd2:	60bb      	str	r3, [r7, #8]
 8020fd4:	687b      	ldr	r3, [r7, #4]
 8020fd6:	1c5a      	adds	r2, r3, #1
 8020fd8:	607a      	str	r2, [r7, #4]
 8020fda:	781b      	ldrb	r3, [r3, #0]
 8020fdc:	b2db      	uxtb	r3, r3
 8020fde:	f04f 0400 	mov.w	r4, #0
 8020fe2:	461a      	mov	r2, r3
 8020fe4:	4623      	mov	r3, r4
 8020fe6:	2000      	movs	r0, #0
 8020fe8:	f006 fdee 	bl	8027bc8 <HAL_FLASH_Program>
 8020fec:	4603      	mov	r3, r0
 8020fee:	75fb      	strb	r3, [r7, #23]
        if(result != HAL_OK) break;
 8020ff0:	7dfb      	ldrb	r3, [r7, #23]
 8020ff2:	2b00      	cmp	r3, #0
 8020ff4:	d103      	bne.n	8020ffe <_ZN5Flash10StoreUint8EmPhm+0x4e>
    for(uint32_t i = 0; i < number; i++)
 8020ff6:	693b      	ldr	r3, [r7, #16]
 8020ff8:	3301      	adds	r3, #1
 8020ffa:	613b      	str	r3, [r7, #16]
 8020ffc:	e7e3      	b.n	8020fc6 <_ZN5Flash10StoreUint8EmPhm+0x16>
        if(result != HAL_OK) break;
 8020ffe:	bf00      	nop
    }

    HAL_FLASH_Lock();
 8021000:	f006 fe58 	bl	8027cb4 <HAL_FLASH_Lock>

    return result == HAL_OK;
 8021004:	7dfb      	ldrb	r3, [r7, #23]
 8021006:	2b00      	cmp	r3, #0
 8021008:	bf0c      	ite	eq
 802100a:	2301      	moveq	r3, #1
 802100c:	2300      	movne	r3, #0
 802100e:	b2db      	uxtb	r3, r3
}
 8021010:	4618      	mov	r0, r3
 8021012:	371c      	adds	r7, #28
 8021014:	46bd      	mov	sp, r7
 8021016:	bd90      	pop	{r4, r7, pc}

08021018 <_ZN5Flash11StoreUint16EmPtm>:

bool Flash::StoreUint16(uint32_t address, uint16_t *data, uint32_t number)
{
 8021018:	b590      	push	{r4, r7, lr}
 802101a:	b087      	sub	sp, #28
 802101c:	af00      	add	r7, sp, #0
 802101e:	60f8      	str	r0, [r7, #12]
 8021020:	60b9      	str	r1, [r7, #8]
 8021022:	607a      	str	r2, [r7, #4]
 8021024:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8021026:	f006 fe23 	bl	8027c70 <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 802102a:	2300      	movs	r3, #0
 802102c:	613b      	str	r3, [r7, #16]
 802102e:	693a      	ldr	r2, [r7, #16]
 8021030:	683b      	ldr	r3, [r7, #0]
 8021032:	429a      	cmp	r2, r3
 8021034:	d219      	bcs.n	802106a <_ZN5Flash11StoreUint16EmPtm+0x52>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, *data++);
 8021036:	687b      	ldr	r3, [r7, #4]
 8021038:	1c9a      	adds	r2, r3, #2
 802103a:	607a      	str	r2, [r7, #4]
 802103c:	881b      	ldrh	r3, [r3, #0]
 802103e:	b29b      	uxth	r3, r3
 8021040:	f04f 0400 	mov.w	r4, #0
 8021044:	461a      	mov	r2, r3
 8021046:	4623      	mov	r3, r4
 8021048:	68b9      	ldr	r1, [r7, #8]
 802104a:	2001      	movs	r0, #1
 802104c:	f006 fdbc 	bl	8027bc8 <HAL_FLASH_Program>
 8021050:	4603      	mov	r3, r0
 8021052:	75fb      	strb	r3, [r7, #23]
        address += 2;
 8021054:	68bb      	ldr	r3, [r7, #8]
 8021056:	3302      	adds	r3, #2
 8021058:	60bb      	str	r3, [r7, #8]
        if(result != HAL_OK) break;
 802105a:	7dfb      	ldrb	r3, [r7, #23]
 802105c:	2b00      	cmp	r3, #0
 802105e:	d103      	bne.n	8021068 <_ZN5Flash11StoreUint16EmPtm+0x50>
    for(uint32_t i = 0; i < number; i++)
 8021060:	693b      	ldr	r3, [r7, #16]
 8021062:	3301      	adds	r3, #1
 8021064:	613b      	str	r3, [r7, #16]
 8021066:	e7e2      	b.n	802102e <_ZN5Flash11StoreUint16EmPtm+0x16>
        if(result != HAL_OK) break;
 8021068:	bf00      	nop
    }

    HAL_FLASH_Lock();
 802106a:	f006 fe23 	bl	8027cb4 <HAL_FLASH_Lock>

    return result == HAL_OK;
 802106e:	7dfb      	ldrb	r3, [r7, #23]
 8021070:	2b00      	cmp	r3, #0
 8021072:	bf0c      	ite	eq
 8021074:	2301      	moveq	r3, #1
 8021076:	2300      	movne	r3, #0
 8021078:	b2db      	uxtb	r3, r3
}
 802107a:	4618      	mov	r0, r3
 802107c:	371c      	adds	r7, #28
 802107e:	46bd      	mov	sp, r7
 8021080:	bd90      	pop	{r4, r7, pc}

08021082 <_ZN5Flash10StoreFloatEmPfm>:

    return result == HAL_OK;
}

bool Flash::StoreFloat(uint32_t address, float *data, uint32_t number)
{
 8021082:	b590      	push	{r4, r7, lr}
 8021084:	b087      	sub	sp, #28
 8021086:	af00      	add	r7, sp, #0
 8021088:	60f8      	str	r0, [r7, #12]
 802108a:	60b9      	str	r1, [r7, #8]
 802108c:	607a      	str	r2, [r7, #4]
 802108e:	603b      	str	r3, [r7, #0]
    HAL_FLASH_Unlock();
 8021090:	f006 fdee 	bl	8027c70 <HAL_FLASH_Unlock>

    HAL_StatusTypeDef result;
    
    for(uint32_t i = 0; i < number; i++)
 8021094:	2300      	movs	r3, #0
 8021096:	613b      	str	r3, [r7, #16]
 8021098:	693a      	ldr	r2, [r7, #16]
 802109a:	683b      	ldr	r3, [r7, #0]
 802109c:	429a      	cmp	r2, r3
 802109e:	d21b      	bcs.n	80210d8 <_ZN5Flash10StoreFloatEmPfm+0x56>
    {
        result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, *data++);
 80210a0:	687b      	ldr	r3, [r7, #4]
 80210a2:	1d1a      	adds	r2, r3, #4
 80210a4:	607a      	str	r2, [r7, #4]
 80210a6:	681b      	ldr	r3, [r3, #0]
 80210a8:	4618      	mov	r0, r3
 80210aa:	f7ff fc87 	bl	80209bc <__aeabi_f2ulz>
 80210ae:	4603      	mov	r3, r0
 80210b0:	460c      	mov	r4, r1
 80210b2:	461a      	mov	r2, r3
 80210b4:	4623      	mov	r3, r4
 80210b6:	68b9      	ldr	r1, [r7, #8]
 80210b8:	2002      	movs	r0, #2
 80210ba:	f006 fd85 	bl	8027bc8 <HAL_FLASH_Program>
 80210be:	4603      	mov	r3, r0
 80210c0:	75fb      	strb	r3, [r7, #23]
        address += 4;
 80210c2:	68bb      	ldr	r3, [r7, #8]
 80210c4:	3304      	adds	r3, #4
 80210c6:	60bb      	str	r3, [r7, #8]
        if(result != HAL_OK) break;
 80210c8:	7dfb      	ldrb	r3, [r7, #23]
 80210ca:	2b00      	cmp	r3, #0
 80210cc:	d103      	bne.n	80210d6 <_ZN5Flash10StoreFloatEmPfm+0x54>
    for(uint32_t i = 0; i < number; i++)
 80210ce:	693b      	ldr	r3, [r7, #16]
 80210d0:	3301      	adds	r3, #1
 80210d2:	613b      	str	r3, [r7, #16]
 80210d4:	e7e0      	b.n	8021098 <_ZN5Flash10StoreFloatEmPfm+0x16>
        if(result != HAL_OK) break;
 80210d6:	bf00      	nop
    }

    HAL_FLASH_Lock();
 80210d8:	f006 fdec 	bl	8027cb4 <HAL_FLASH_Lock>

    return result == HAL_OK;
 80210dc:	7dfb      	ldrb	r3, [r7, #23]
 80210de:	2b00      	cmp	r3, #0
 80210e0:	bf0c      	ite	eq
 80210e2:	2301      	moveq	r3, #1
 80210e4:	2300      	movne	r3, #0
 80210e6:	b2db      	uxtb	r3, r3
}
 80210e8:	4618      	mov	r0, r3
 80210ea:	371c      	adds	r7, #28
 80210ec:	46bd      	mov	sp, r7
 80210ee:	bd90      	pop	{r4, r7, pc}

080210f0 <_ZN5Flash14CheckBlankByteEmm>:
{
    memcpy(data, reinterpret_cast<uint32_t*>(address), size);
}

bool Flash::CheckBlankByte(uint32_t address, uint32_t number)
{
 80210f0:	b5b0      	push	{r4, r5, r7, lr}
 80210f2:	b088      	sub	sp, #32
 80210f4:	af00      	add	r7, sp, #0
 80210f6:	60f8      	str	r0, [r7, #12]
 80210f8:	60b9      	str	r1, [r7, #8]
 80210fa:	607a      	str	r2, [r7, #4]

    memcpy(byte, reinterpret_cast<uint32_t*>(address), number);

    for(uint32_t i = 0; i < number; i++) if(byte[i] != 0xFF) return false;

    return true;
 80210fc:	466b      	mov	r3, sp
 80210fe:	461d      	mov	r5, r3
    uint8_t byte[number];
 8021100:	687b      	ldr	r3, [r7, #4]
 8021102:	1e58      	subs	r0, r3, #1
 8021104:	61b8      	str	r0, [r7, #24]
 8021106:	4603      	mov	r3, r0
 8021108:	3301      	adds	r3, #1
 802110a:	4619      	mov	r1, r3
 802110c:	f04f 0200 	mov.w	r2, #0
 8021110:	f04f 0300 	mov.w	r3, #0
 8021114:	f04f 0400 	mov.w	r4, #0
 8021118:	00d4      	lsls	r4, r2, #3
 802111a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 802111e:	00cb      	lsls	r3, r1, #3
 8021120:	4603      	mov	r3, r0
 8021122:	3301      	adds	r3, #1
 8021124:	4619      	mov	r1, r3
 8021126:	f04f 0200 	mov.w	r2, #0
 802112a:	f04f 0300 	mov.w	r3, #0
 802112e:	f04f 0400 	mov.w	r4, #0
 8021132:	00d4      	lsls	r4, r2, #3
 8021134:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8021138:	00cb      	lsls	r3, r1, #3
 802113a:	4603      	mov	r3, r0
 802113c:	3301      	adds	r3, #1
 802113e:	3307      	adds	r3, #7
 8021140:	08db      	lsrs	r3, r3, #3
 8021142:	00db      	lsls	r3, r3, #3
 8021144:	ebad 0d03 	sub.w	sp, sp, r3
 8021148:	466b      	mov	r3, sp
 802114a:	3300      	adds	r3, #0
 802114c:	617b      	str	r3, [r7, #20]
    memcpy(byte, reinterpret_cast<uint32_t*>(address), number);
 802114e:	697b      	ldr	r3, [r7, #20]
 8021150:	68b9      	ldr	r1, [r7, #8]
 8021152:	687a      	ldr	r2, [r7, #4]
 8021154:	4618      	mov	r0, r3
 8021156:	f009 fce3 	bl	802ab20 <memcpy>
    for(uint32_t i = 0; i < number; i++) if(byte[i] != 0xFF) return false;
 802115a:	2300      	movs	r3, #0
 802115c:	61fb      	str	r3, [r7, #28]
 802115e:	69fa      	ldr	r2, [r7, #28]
 8021160:	687b      	ldr	r3, [r7, #4]
 8021162:	429a      	cmp	r2, r3
 8021164:	d20b      	bcs.n	802117e <_ZN5Flash14CheckBlankByteEmm+0x8e>
 8021166:	697a      	ldr	r2, [r7, #20]
 8021168:	69fb      	ldr	r3, [r7, #28]
 802116a:	4413      	add	r3, r2
 802116c:	781b      	ldrb	r3, [r3, #0]
 802116e:	2bff      	cmp	r3, #255	; 0xff
 8021170:	d001      	beq.n	8021176 <_ZN5Flash14CheckBlankByteEmm+0x86>
 8021172:	2300      	movs	r3, #0
 8021174:	e004      	b.n	8021180 <_ZN5Flash14CheckBlankByteEmm+0x90>
 8021176:	69fb      	ldr	r3, [r7, #28]
 8021178:	3301      	adds	r3, #1
 802117a:	61fb      	str	r3, [r7, #28]
 802117c:	e7ef      	b.n	802115e <_ZN5Flash14CheckBlankByteEmm+0x6e>
    return true;
 802117e:	2301      	movs	r3, #1
 8021180:	46ad      	mov	sp, r5
}
 8021182:	4618      	mov	r0, r3
 8021184:	3720      	adds	r7, #32
 8021186:	46bd      	mov	sp, r7
 8021188:	bdb0      	pop	{r4, r5, r7, pc}

0802118a <_ZN5Flash18CheckBlankHalfwordEmm>:

bool Flash::CheckBlankHalfword(uint32_t address, uint32_t number)
{
 802118a:	b5b0      	push	{r4, r5, r7, lr}
 802118c:	b088      	sub	sp, #32
 802118e:	af00      	add	r7, sp, #0
 8021190:	60f8      	str	r0, [r7, #12]
 8021192:	60b9      	str	r1, [r7, #8]
 8021194:	607a      	str	r2, [r7, #4]

    memcpy(half, reinterpret_cast<uint32_t*>(address), number*2);

    for(uint32_t i = 0; i < number; i++) if(half[i] != 0xFFFF) return false;

    return true;
 8021196:	466b      	mov	r3, sp
 8021198:	461d      	mov	r5, r3
    uint16_t half[number];
 802119a:	687b      	ldr	r3, [r7, #4]
 802119c:	1e58      	subs	r0, r3, #1
 802119e:	61b8      	str	r0, [r7, #24]
 80211a0:	4603      	mov	r3, r0
 80211a2:	3301      	adds	r3, #1
 80211a4:	4619      	mov	r1, r3
 80211a6:	f04f 0200 	mov.w	r2, #0
 80211aa:	f04f 0300 	mov.w	r3, #0
 80211ae:	f04f 0400 	mov.w	r4, #0
 80211b2:	0114      	lsls	r4, r2, #4
 80211b4:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80211b8:	010b      	lsls	r3, r1, #4
 80211ba:	4603      	mov	r3, r0
 80211bc:	3301      	adds	r3, #1
 80211be:	4619      	mov	r1, r3
 80211c0:	f04f 0200 	mov.w	r2, #0
 80211c4:	f04f 0300 	mov.w	r3, #0
 80211c8:	f04f 0400 	mov.w	r4, #0
 80211cc:	0114      	lsls	r4, r2, #4
 80211ce:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80211d2:	010b      	lsls	r3, r1, #4
 80211d4:	4603      	mov	r3, r0
 80211d6:	3301      	adds	r3, #1
 80211d8:	005b      	lsls	r3, r3, #1
 80211da:	3301      	adds	r3, #1
 80211dc:	3307      	adds	r3, #7
 80211de:	08db      	lsrs	r3, r3, #3
 80211e0:	00db      	lsls	r3, r3, #3
 80211e2:	ebad 0d03 	sub.w	sp, sp, r3
 80211e6:	466b      	mov	r3, sp
 80211e8:	3301      	adds	r3, #1
 80211ea:	085b      	lsrs	r3, r3, #1
 80211ec:	005b      	lsls	r3, r3, #1
 80211ee:	617b      	str	r3, [r7, #20]
    memcpy(half, reinterpret_cast<uint32_t*>(address), number*2);
 80211f0:	6978      	ldr	r0, [r7, #20]
 80211f2:	68b9      	ldr	r1, [r7, #8]
 80211f4:	687b      	ldr	r3, [r7, #4]
 80211f6:	005b      	lsls	r3, r3, #1
 80211f8:	461a      	mov	r2, r3
 80211fa:	f009 fc91 	bl	802ab20 <memcpy>
    for(uint32_t i = 0; i < number; i++) if(half[i] != 0xFFFF) return false;
 80211fe:	2300      	movs	r3, #0
 8021200:	61fb      	str	r3, [r7, #28]
 8021202:	69fa      	ldr	r2, [r7, #28]
 8021204:	687b      	ldr	r3, [r7, #4]
 8021206:	429a      	cmp	r2, r3
 8021208:	d20d      	bcs.n	8021226 <_ZN5Flash18CheckBlankHalfwordEmm+0x9c>
 802120a:	697b      	ldr	r3, [r7, #20]
 802120c:	69fa      	ldr	r2, [r7, #28]
 802120e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8021212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021216:	4293      	cmp	r3, r2
 8021218:	d001      	beq.n	802121e <_ZN5Flash18CheckBlankHalfwordEmm+0x94>
 802121a:	2300      	movs	r3, #0
 802121c:	e004      	b.n	8021228 <_ZN5Flash18CheckBlankHalfwordEmm+0x9e>
 802121e:	69fb      	ldr	r3, [r7, #28]
 8021220:	3301      	adds	r3, #1
 8021222:	61fb      	str	r3, [r7, #28]
 8021224:	e7ed      	b.n	8021202 <_ZN5Flash18CheckBlankHalfwordEmm+0x78>
    return true;
 8021226:	2301      	movs	r3, #1
 8021228:	46ad      	mov	sp, r5
}
 802122a:	4618      	mov	r0, r3
 802122c:	3720      	adds	r7, #32
 802122e:	46bd      	mov	sp, r7
 8021230:	bdb0      	pop	{r4, r5, r7, pc}

08021232 <_ZN5Flash14CheckBlankWordEmm>:

bool Flash::CheckBlankWord(uint32_t address, uint32_t number)
{
 8021232:	b5b0      	push	{r4, r5, r7, lr}
 8021234:	b088      	sub	sp, #32
 8021236:	af00      	add	r7, sp, #0
 8021238:	60f8      	str	r0, [r7, #12]
 802123a:	60b9      	str	r1, [r7, #8]
 802123c:	607a      	str	r2, [r7, #4]

    memcpy(word, reinterpret_cast<uint32_t*>(address), number*4);

    for(uint32_t i = 0; i < number; i++) if(word[i] != 0xFFFFFFFF) return false;

    return true;
 802123e:	466b      	mov	r3, sp
 8021240:	461d      	mov	r5, r3
    uint32_t word[number];
 8021242:	687b      	ldr	r3, [r7, #4]
 8021244:	1e58      	subs	r0, r3, #1
 8021246:	61b8      	str	r0, [r7, #24]
 8021248:	4603      	mov	r3, r0
 802124a:	3301      	adds	r3, #1
 802124c:	4619      	mov	r1, r3
 802124e:	f04f 0200 	mov.w	r2, #0
 8021252:	f04f 0300 	mov.w	r3, #0
 8021256:	f04f 0400 	mov.w	r4, #0
 802125a:	0154      	lsls	r4, r2, #5
 802125c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8021260:	014b      	lsls	r3, r1, #5
 8021262:	4603      	mov	r3, r0
 8021264:	3301      	adds	r3, #1
 8021266:	4619      	mov	r1, r3
 8021268:	f04f 0200 	mov.w	r2, #0
 802126c:	f04f 0300 	mov.w	r3, #0
 8021270:	f04f 0400 	mov.w	r4, #0
 8021274:	0154      	lsls	r4, r2, #5
 8021276:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 802127a:	014b      	lsls	r3, r1, #5
 802127c:	4603      	mov	r3, r0
 802127e:	3301      	adds	r3, #1
 8021280:	009b      	lsls	r3, r3, #2
 8021282:	3303      	adds	r3, #3
 8021284:	3307      	adds	r3, #7
 8021286:	08db      	lsrs	r3, r3, #3
 8021288:	00db      	lsls	r3, r3, #3
 802128a:	ebad 0d03 	sub.w	sp, sp, r3
 802128e:	466b      	mov	r3, sp
 8021290:	3303      	adds	r3, #3
 8021292:	089b      	lsrs	r3, r3, #2
 8021294:	009b      	lsls	r3, r3, #2
 8021296:	617b      	str	r3, [r7, #20]
    memcpy(word, reinterpret_cast<uint32_t*>(address), number*4);
 8021298:	6978      	ldr	r0, [r7, #20]
 802129a:	68b9      	ldr	r1, [r7, #8]
 802129c:	687b      	ldr	r3, [r7, #4]
 802129e:	009b      	lsls	r3, r3, #2
 80212a0:	461a      	mov	r2, r3
 80212a2:	f009 fc3d 	bl	802ab20 <memcpy>
    for(uint32_t i = 0; i < number; i++) if(word[i] != 0xFFFFFFFF) return false;
 80212a6:	2300      	movs	r3, #0
 80212a8:	61fb      	str	r3, [r7, #28]
 80212aa:	69fa      	ldr	r2, [r7, #28]
 80212ac:	687b      	ldr	r3, [r7, #4]
 80212ae:	429a      	cmp	r2, r3
 80212b0:	d20c      	bcs.n	80212cc <_ZN5Flash14CheckBlankWordEmm+0x9a>
 80212b2:	697b      	ldr	r3, [r7, #20]
 80212b4:	69fa      	ldr	r2, [r7, #28]
 80212b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80212ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80212be:	d001      	beq.n	80212c4 <_ZN5Flash14CheckBlankWordEmm+0x92>
 80212c0:	2300      	movs	r3, #0
 80212c2:	e004      	b.n	80212ce <_ZN5Flash14CheckBlankWordEmm+0x9c>
 80212c4:	69fb      	ldr	r3, [r7, #28]
 80212c6:	3301      	adds	r3, #1
 80212c8:	61fb      	str	r3, [r7, #28]
 80212ca:	e7ee      	b.n	80212aa <_ZN5Flash14CheckBlankWordEmm+0x78>
    return true;
 80212cc:	2301      	movs	r3, #1
 80212ce:	46ad      	mov	sp, r5
 80212d0:	4618      	mov	r0, r3
 80212d2:	3720      	adds	r7, #32
 80212d4:	46bd      	mov	sp, r7
 80212d6:	bdb0      	pop	{r4, r5, r7, pc}

080212d8 <_ZN8Iim42652C1Ev>:
#include "iim_42652.hpp"
#include "declare_extern.h"

Iim42652::Iim42652() : degree_stack_z_(0) {}
 80212d8:	b490      	push	{r4, r7}
 80212da:	b082      	sub	sp, #8
 80212dc:	af00      	add	r7, sp, #0
 80212de:	6078      	str	r0, [r7, #4]
 80212e0:	687a      	ldr	r2, [r7, #4]
 80212e2:	f04f 0300 	mov.w	r3, #0
 80212e6:	f04f 0400 	mov.w	r4, #0
 80212ea:	e9c2 3400 	strd	r3, r4, [r2]
 80212ee:	687b      	ldr	r3, [r7, #4]
 80212f0:	4618      	mov	r0, r3
 80212f2:	3708      	adds	r7, #8
 80212f4:	46bd      	mov	sp, r7
 80212f6:	bc90      	pop	{r4, r7}
 80212f8:	4770      	bx	lr
	...

080212fc <_ZN8Iim426524InitEv>:

uint8_t Iim42652::Init()
{
 80212fc:	b580      	push	{r7, lr}
 80212fe:	b084      	sub	sp, #16
 8021300:	af00      	add	r7, sp, #0
 8021302:	6078      	str	r0, [r7, #4]
    /* bank_select */
    Write(REG_BANK_SEL_ADD, REG_BANK_SEL_RES, 'L');
 8021304:	234c      	movs	r3, #76	; 0x4c
 8021306:	2200      	movs	r2, #0
 8021308:	2176      	movs	r1, #118	; 0x76
 802130a:	6878      	ldr	r0, [r7, #4]
 802130c:	f000 f908 	bl	8021520 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 8021310:	2064      	movs	r0, #100	; 0x64
 8021312:	f005 fbc3 	bl	8026a9c <HAL_Delay>
    Write(REG_BANK_SEL_ADD, REG_BANK_SEL_RES, 'R');
 8021316:	2352      	movs	r3, #82	; 0x52
 8021318:	2200      	movs	r2, #0
 802131a:	2176      	movs	r1, #118	; 0x76
 802131c:	6878      	ldr	r0, [r7, #4]
 802131e:	f000 f8ff 	bl	8021520 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 8021322:	2064      	movs	r0, #100	; 0x64
 8021324:	f005 fbba 	bl	8026a9c <HAL_Delay>
    /* power_off */
    Write(PWR_MGMT0_ADD, PWR_MGMT0_RES, 'L');
 8021328:	234c      	movs	r3, #76	; 0x4c
 802132a:	2200      	movs	r2, #0
 802132c:	214e      	movs	r1, #78	; 0x4e
 802132e:	6878      	ldr	r0, [r7, #4]
 8021330:	f000 f8f6 	bl	8021520 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 8021334:	2064      	movs	r0, #100	; 0x64
 8021336:	f005 fbb1 	bl	8026a9c <HAL_Delay>
    Write(PWR_MGMT0_ADD, PWR_MGMT0_RES, 'R');
 802133a:	2352      	movs	r3, #82	; 0x52
 802133c:	2200      	movs	r2, #0
 802133e:	214e      	movs	r1, #78	; 0x4e
 8021340:	6878      	ldr	r0, [r7, #4]
 8021342:	f000 f8ed 	bl	8021520 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 8021346:	2064      	movs	r0, #100	; 0x64
 8021348:	f005 fba8 	bl	8026a9c <HAL_Delay>

    uint8_t who_l  = Read(WHO_AM_I_ADD, 'L');
 802134c:	224c      	movs	r2, #76	; 0x4c
 802134e:	2175      	movs	r1, #117	; 0x75
 8021350:	6878      	ldr	r0, [r7, #4]
 8021352:	f000 f897 	bl	8021484 <_ZN8Iim426524ReadEhc>
 8021356:	4603      	mov	r3, r0
 8021358:	73fb      	strb	r3, [r7, #15]
    uint8_t who_r  = Read(WHO_AM_I_ADD, 'R');
 802135a:	2252      	movs	r2, #82	; 0x52
 802135c:	2175      	movs	r1, #117	; 0x75
 802135e:	6878      	ldr	r0, [r7, #4]
 8021360:	f000 f890 	bl	8021484 <_ZN8Iim426524ReadEhc>
 8021364:	4603      	mov	r3, r0
 8021366:	73bb      	strb	r3, [r7, #14]
    uint8_t bank_l = Read(REG_BANK_SEL_ADD, 'L');
 8021368:	224c      	movs	r2, #76	; 0x4c
 802136a:	2176      	movs	r1, #118	; 0x76
 802136c:	6878      	ldr	r0, [r7, #4]
 802136e:	f000 f889 	bl	8021484 <_ZN8Iim426524ReadEhc>
 8021372:	4603      	mov	r3, r0
 8021374:	737b      	strb	r3, [r7, #13]
    uint8_t bank_r = Read(REG_BANK_SEL_ADD, 'R');
 8021376:	2252      	movs	r2, #82	; 0x52
 8021378:	2176      	movs	r1, #118	; 0x76
 802137a:	6878      	ldr	r0, [r7, #4]
 802137c:	f000 f882 	bl	8021484 <_ZN8Iim426524ReadEhc>
 8021380:	4603      	mov	r3, r0
 8021382:	733b      	strb	r3, [r7, #12]
    uint8_t pwr_l  = Read(PWR_MGMT0_ADD, 'L');
 8021384:	224c      	movs	r2, #76	; 0x4c
 8021386:	214e      	movs	r1, #78	; 0x4e
 8021388:	6878      	ldr	r0, [r7, #4]
 802138a:	f000 f87b 	bl	8021484 <_ZN8Iim426524ReadEhc>
 802138e:	4603      	mov	r3, r0
 8021390:	72fb      	strb	r3, [r7, #11]
    uint8_t pwr_r  = Read(PWR_MGMT0_ADD, 'R');
 8021392:	2252      	movs	r2, #82	; 0x52
 8021394:	214e      	movs	r1, #78	; 0x4e
 8021396:	6878      	ldr	r0, [r7, #4]
 8021398:	f000 f874 	bl	8021484 <_ZN8Iim426524ReadEhc>
 802139c:	4603      	mov	r3, r0
 802139e:	72bb      	strb	r3, [r7, #10]

#ifdef DEBUG_MODE
    g_imu_who_l  = who_l;  g_imu_who_r  = who_r;
 80213a0:	4a32      	ldr	r2, [pc, #200]	; (802146c <_ZN8Iim426524InitEv+0x170>)
 80213a2:	7bfb      	ldrb	r3, [r7, #15]
 80213a4:	7013      	strb	r3, [r2, #0]
 80213a6:	4a32      	ldr	r2, [pc, #200]	; (8021470 <_ZN8Iim426524InitEv+0x174>)
 80213a8:	7bbb      	ldrb	r3, [r7, #14]
 80213aa:	7013      	strb	r3, [r2, #0]
    g_imu_bank_l = bank_l; g_imu_bank_r = bank_r;
 80213ac:	4a31      	ldr	r2, [pc, #196]	; (8021474 <_ZN8Iim426524InitEv+0x178>)
 80213ae:	7b7b      	ldrb	r3, [r7, #13]
 80213b0:	7013      	strb	r3, [r2, #0]
 80213b2:	4a31      	ldr	r2, [pc, #196]	; (8021478 <_ZN8Iim426524InitEv+0x17c>)
 80213b4:	7b3b      	ldrb	r3, [r7, #12]
 80213b6:	7013      	strb	r3, [r2, #0]
    g_imu_pwr_l  = pwr_l;  g_imu_pwr_r  = pwr_r;
 80213b8:	4a30      	ldr	r2, [pc, #192]	; (802147c <_ZN8Iim426524InitEv+0x180>)
 80213ba:	7afb      	ldrb	r3, [r7, #11]
 80213bc:	7013      	strb	r3, [r2, #0]
 80213be:	4a30      	ldr	r2, [pc, #192]	; (8021480 <_ZN8Iim426524InitEv+0x184>)
 80213c0:	7abb      	ldrb	r3, [r7, #10]
 80213c2:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(who_l != WHO_AM_I_RES)      return 0x01;
 80213c4:	7bfb      	ldrb	r3, [r7, #15]
 80213c6:	2b6f      	cmp	r3, #111	; 0x6f
 80213c8:	d001      	beq.n	80213ce <_ZN8Iim426524InitEv+0xd2>
 80213ca:	2301      	movs	r3, #1
 80213cc:	e049      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>
    if(who_r != WHO_AM_I_RES)      return 0x02;
 80213ce:	7bbb      	ldrb	r3, [r7, #14]
 80213d0:	2b6f      	cmp	r3, #111	; 0x6f
 80213d2:	d001      	beq.n	80213d8 <_ZN8Iim426524InitEv+0xdc>
 80213d4:	2302      	movs	r3, #2
 80213d6:	e044      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>
    if(bank_l != REG_BANK_SEL_RES) return 0x03;
 80213d8:	7b7b      	ldrb	r3, [r7, #13]
 80213da:	2b00      	cmp	r3, #0
 80213dc:	d001      	beq.n	80213e2 <_ZN8Iim426524InitEv+0xe6>
 80213de:	2303      	movs	r3, #3
 80213e0:	e03f      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>
    if(bank_r != REG_BANK_SEL_RES) return 0x04;
 80213e2:	7b3b      	ldrb	r3, [r7, #12]
 80213e4:	2b00      	cmp	r3, #0
 80213e6:	d001      	beq.n	80213ec <_ZN8Iim426524InitEv+0xf0>
 80213e8:	2304      	movs	r3, #4
 80213ea:	e03a      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>
    if(pwr_l != PWR_MGMT0_RES)     return 0x05;
 80213ec:	7afb      	ldrb	r3, [r7, #11]
 80213ee:	2b00      	cmp	r3, #0
 80213f0:	d001      	beq.n	80213f6 <_ZN8Iim426524InitEv+0xfa>
 80213f2:	2305      	movs	r3, #5
 80213f4:	e035      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>
    if(pwr_r != PWR_MGMT0_RES)     return 0x06;
 80213f6:	7abb      	ldrb	r3, [r7, #10]
 80213f8:	2b00      	cmp	r3, #0
 80213fa:	d001      	beq.n	8021400 <_ZN8Iim426524InitEv+0x104>
 80213fc:	2306      	movs	r3, #6
 80213fe:	e030      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>

    /* power_on */
    Write(PWR_MGMT0_ADD, PWR_MGMT0_ON, 'L');
 8021400:	234c      	movs	r3, #76	; 0x4c
 8021402:	220f      	movs	r2, #15
 8021404:	214e      	movs	r1, #78	; 0x4e
 8021406:	6878      	ldr	r0, [r7, #4]
 8021408:	f000 f88a 	bl	8021520 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 802140c:	2064      	movs	r0, #100	; 0x64
 802140e:	f005 fb45 	bl	8026a9c <HAL_Delay>
    Write(PWR_MGMT0_ADD, PWR_MGMT0_ON, 'R');
 8021412:	2352      	movs	r3, #82	; 0x52
 8021414:	220f      	movs	r2, #15
 8021416:	214e      	movs	r1, #78	; 0x4e
 8021418:	6878      	ldr	r0, [r7, #4]
 802141a:	f000 f881 	bl	8021520 <_ZN8Iim426525WriteEhhc>
    HAL_Delay(100); // wait 100ms
 802141e:	2064      	movs	r0, #100	; 0x64
 8021420:	f005 fb3c 	bl	8026a9c <HAL_Delay>
    pwr_l = Read(PWR_MGMT0_ADD, 'L');
 8021424:	224c      	movs	r2, #76	; 0x4c
 8021426:	214e      	movs	r1, #78	; 0x4e
 8021428:	6878      	ldr	r0, [r7, #4]
 802142a:	f000 f82b 	bl	8021484 <_ZN8Iim426524ReadEhc>
 802142e:	4603      	mov	r3, r0
 8021430:	72fb      	strb	r3, [r7, #11]
    pwr_r = Read(PWR_MGMT0_ADD, 'R');
 8021432:	2252      	movs	r2, #82	; 0x52
 8021434:	214e      	movs	r1, #78	; 0x4e
 8021436:	6878      	ldr	r0, [r7, #4]
 8021438:	f000 f824 	bl	8021484 <_ZN8Iim426524ReadEhc>
 802143c:	4603      	mov	r3, r0
 802143e:	72bb      	strb	r3, [r7, #10]

#ifdef DEBUG_MODE
    g_imu_pwr_l  = pwr_l;  g_imu_pwr_r  = pwr_r;
 8021440:	4a0e      	ldr	r2, [pc, #56]	; (802147c <_ZN8Iim426524InitEv+0x180>)
 8021442:	7afb      	ldrb	r3, [r7, #11]
 8021444:	7013      	strb	r3, [r2, #0]
 8021446:	4a0e      	ldr	r2, [pc, #56]	; (8021480 <_ZN8Iim426524InitEv+0x184>)
 8021448:	7abb      	ldrb	r3, [r7, #10]
 802144a:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(pwr_l != PWR_MGMT0_ON) return 0x07;
 802144c:	7afb      	ldrb	r3, [r7, #11]
 802144e:	2b0f      	cmp	r3, #15
 8021450:	d001      	beq.n	8021456 <_ZN8Iim426524InitEv+0x15a>
 8021452:	2307      	movs	r3, #7
 8021454:	e005      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>
    if(pwr_r != PWR_MGMT0_ON) return 0x08;
 8021456:	7abb      	ldrb	r3, [r7, #10]
 8021458:	2b0f      	cmp	r3, #15
 802145a:	d001      	beq.n	8021460 <_ZN8Iim426524InitEv+0x164>
 802145c:	2308      	movs	r3, #8
 802145e:	e000      	b.n	8021462 <_ZN8Iim426524InitEv+0x166>

    return 0x09;
 8021460:	2309      	movs	r3, #9
}
 8021462:	4618      	mov	r0, r3
 8021464:	3710      	adds	r7, #16
 8021466:	46bd      	mov	sp, r7
 8021468:	bd80      	pop	{r7, pc}
 802146a:	bf00      	nop
 802146c:	20000265 	.word	0x20000265
 8021470:	20000266 	.word	0x20000266
 8021474:	20000267 	.word	0x20000267
 8021478:	20000268 	.word	0x20000268
 802147c:	20000269 	.word	0x20000269
 8021480:	2000026a 	.word	0x2000026a

08021484 <_ZN8Iim426524ReadEhc>:

uint8_t Iim42652::Read(uint8_t send_address, char imu_ic_lr)
{
 8021484:	b580      	push	{r7, lr}
 8021486:	b084      	sub	sp, #16
 8021488:	af00      	add	r7, sp, #0
 802148a:	6078      	str	r0, [r7, #4]
 802148c:	460b      	mov	r3, r1
 802148e:	70fb      	strb	r3, [r7, #3]
 8021490:	4613      	mov	r3, r2
 8021492:	70bb      	strb	r3, [r7, #2]
    uint8_t receive_reset_value = 0x00;
 8021494:	2300      	movs	r3, #0
 8021496:	73fb      	strb	r3, [r7, #15]

    send_address = send_address | 0x80; // Read 1--- ----
 8021498:	78fb      	ldrb	r3, [r7, #3]
 802149a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 802149e:	b2db      	uxtb	r3, r3
 80214a0:	70fb      	strb	r3, [r7, #3]

    if(imu_ic_lr == 'L') CS_RESET_L;
 80214a2:	78bb      	ldrb	r3, [r7, #2]
 80214a4:	2b4c      	cmp	r3, #76	; 0x4c
 80214a6:	d106      	bne.n	80214b6 <_ZN8Iim426524ReadEhc+0x32>
 80214a8:	2200      	movs	r2, #0
 80214aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80214ae:	4819      	ldr	r0, [pc, #100]	; (8021514 <_ZN8Iim426524ReadEhc+0x90>)
 80214b0:	f007 f812 	bl	80284d8 <HAL_GPIO_WritePin>
 80214b4:	e008      	b.n	80214c8 <_ZN8Iim426524ReadEhc+0x44>
    else if(imu_ic_lr == 'R') CS_RESET_R;
 80214b6:	78bb      	ldrb	r3, [r7, #2]
 80214b8:	2b52      	cmp	r3, #82	; 0x52
 80214ba:	d105      	bne.n	80214c8 <_ZN8Iim426524ReadEhc+0x44>
 80214bc:	2200      	movs	r2, #0
 80214be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80214c2:	4815      	ldr	r0, [pc, #84]	; (8021518 <_ZN8Iim426524ReadEhc+0x94>)
 80214c4:	f007 f808 	bl	80284d8 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi3, &send_address, 1, 100);
 80214c8:	1cf9      	adds	r1, r7, #3
 80214ca:	2364      	movs	r3, #100	; 0x64
 80214cc:	2201      	movs	r2, #1
 80214ce:	4813      	ldr	r0, [pc, #76]	; (802151c <_ZN8Iim426524ReadEhc+0x98>)
 80214d0:	f007 fde0 	bl	8029094 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, &receive_reset_value, 1, 100);
 80214d4:	f107 010f 	add.w	r1, r7, #15
 80214d8:	2364      	movs	r3, #100	; 0x64
 80214da:	2201      	movs	r2, #1
 80214dc:	480f      	ldr	r0, [pc, #60]	; (802151c <_ZN8Iim426524ReadEhc+0x98>)
 80214de:	f007 ff0d 	bl	80292fc <HAL_SPI_Receive>

    if(imu_ic_lr == 'L') CS_SET_L;
 80214e2:	78bb      	ldrb	r3, [r7, #2]
 80214e4:	2b4c      	cmp	r3, #76	; 0x4c
 80214e6:	d106      	bne.n	80214f6 <_ZN8Iim426524ReadEhc+0x72>
 80214e8:	2201      	movs	r2, #1
 80214ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80214ee:	4809      	ldr	r0, [pc, #36]	; (8021514 <_ZN8Iim426524ReadEhc+0x90>)
 80214f0:	f006 fff2 	bl	80284d8 <HAL_GPIO_WritePin>
 80214f4:	e008      	b.n	8021508 <_ZN8Iim426524ReadEhc+0x84>
    else if(imu_ic_lr == 'R') CS_SET_R;
 80214f6:	78bb      	ldrb	r3, [r7, #2]
 80214f8:	2b52      	cmp	r3, #82	; 0x52
 80214fa:	d105      	bne.n	8021508 <_ZN8Iim426524ReadEhc+0x84>
 80214fc:	2201      	movs	r2, #1
 80214fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021502:	4805      	ldr	r0, [pc, #20]	; (8021518 <_ZN8Iim426524ReadEhc+0x94>)
 8021504:	f006 ffe8 	bl	80284d8 <HAL_GPIO_WritePin>
    
    return receive_reset_value;
 8021508:	7bfb      	ldrb	r3, [r7, #15]
}
 802150a:	4618      	mov	r0, r3
 802150c:	3710      	adds	r7, #16
 802150e:	46bd      	mov	sp, r7
 8021510:	bd80      	pop	{r7, pc}
 8021512:	bf00      	nop
 8021514:	40020400 	.word	0x40020400
 8021518:	40020000 	.word	0x40020000
 802151c:	20000794 	.word	0x20000794

08021520 <_ZN8Iim426525WriteEhhc>:

void Iim42652::Write(uint8_t send_address, uint8_t send_data, char imu_ic_lr)
{
 8021520:	b580      	push	{r7, lr}
 8021522:	b082      	sub	sp, #8
 8021524:	af00      	add	r7, sp, #0
 8021526:	6078      	str	r0, [r7, #4]
 8021528:	4608      	mov	r0, r1
 802152a:	4611      	mov	r1, r2
 802152c:	461a      	mov	r2, r3
 802152e:	4603      	mov	r3, r0
 8021530:	70fb      	strb	r3, [r7, #3]
 8021532:	460b      	mov	r3, r1
 8021534:	70bb      	strb	r3, [r7, #2]
 8021536:	4613      	mov	r3, r2
 8021538:	707b      	strb	r3, [r7, #1]
    send_address = send_address & 0x7F; // Write 0--- ----
 802153a:	78fb      	ldrb	r3, [r7, #3]
 802153c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021540:	b2db      	uxtb	r3, r3
 8021542:	70fb      	strb	r3, [r7, #3]

    if(imu_ic_lr == 'L') CS_RESET_L;
 8021544:	787b      	ldrb	r3, [r7, #1]
 8021546:	2b4c      	cmp	r3, #76	; 0x4c
 8021548:	d106      	bne.n	8021558 <_ZN8Iim426525WriteEhhc+0x38>
 802154a:	2200      	movs	r2, #0
 802154c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8021550:	4817      	ldr	r0, [pc, #92]	; (80215b0 <_ZN8Iim426525WriteEhhc+0x90>)
 8021552:	f006 ffc1 	bl	80284d8 <HAL_GPIO_WritePin>
 8021556:	e008      	b.n	802156a <_ZN8Iim426525WriteEhhc+0x4a>
    else if(imu_ic_lr == 'R') CS_RESET_R;
 8021558:	787b      	ldrb	r3, [r7, #1]
 802155a:	2b52      	cmp	r3, #82	; 0x52
 802155c:	d105      	bne.n	802156a <_ZN8Iim426525WriteEhhc+0x4a>
 802155e:	2200      	movs	r2, #0
 8021560:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021564:	4813      	ldr	r0, [pc, #76]	; (80215b4 <_ZN8Iim426525WriteEhhc+0x94>)
 8021566:	f006 ffb7 	bl	80284d8 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi3, &send_address, 1, 100);
 802156a:	1cf9      	adds	r1, r7, #3
 802156c:	2364      	movs	r3, #100	; 0x64
 802156e:	2201      	movs	r2, #1
 8021570:	4811      	ldr	r0, [pc, #68]	; (80215b8 <_ZN8Iim426525WriteEhhc+0x98>)
 8021572:	f007 fd8f 	bl	8029094 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, &send_data, 1, 100);
 8021576:	1cb9      	adds	r1, r7, #2
 8021578:	2364      	movs	r3, #100	; 0x64
 802157a:	2201      	movs	r2, #1
 802157c:	480e      	ldr	r0, [pc, #56]	; (80215b8 <_ZN8Iim426525WriteEhhc+0x98>)
 802157e:	f007 fd89 	bl	8029094 <HAL_SPI_Transmit>

    if(imu_ic_lr == 'L') CS_SET_L;
 8021582:	787b      	ldrb	r3, [r7, #1]
 8021584:	2b4c      	cmp	r3, #76	; 0x4c
 8021586:	d106      	bne.n	8021596 <_ZN8Iim426525WriteEhhc+0x76>
 8021588:	2201      	movs	r2, #1
 802158a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 802158e:	4808      	ldr	r0, [pc, #32]	; (80215b0 <_ZN8Iim426525WriteEhhc+0x90>)
 8021590:	f006 ffa2 	bl	80284d8 <HAL_GPIO_WritePin>
    else if(imu_ic_lr == 'R') CS_SET_R;
}
 8021594:	e008      	b.n	80215a8 <_ZN8Iim426525WriteEhhc+0x88>
    else if(imu_ic_lr == 'R') CS_SET_R;
 8021596:	787b      	ldrb	r3, [r7, #1]
 8021598:	2b52      	cmp	r3, #82	; 0x52
 802159a:	d105      	bne.n	80215a8 <_ZN8Iim426525WriteEhhc+0x88>
 802159c:	2201      	movs	r2, #1
 802159e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80215a2:	4804      	ldr	r0, [pc, #16]	; (80215b4 <_ZN8Iim426525WriteEhhc+0x94>)
 80215a4:	f006 ff98 	bl	80284d8 <HAL_GPIO_WritePin>
}
 80215a8:	bf00      	nop
 80215aa:	3708      	adds	r7, #8
 80215ac:	46bd      	mov	sp, r7
 80215ae:	bd80      	pop	{r7, pc}
 80215b0:	40020400 	.word	0x40020400
 80215b4:	40020000 	.word	0x40020000
 80215b8:	20000794 	.word	0x20000794

080215bc <_ZN8Iim426529Read2ByteEhhc>:

    return CheckRead(send_address, send_data, imu_ic_lr);
}

int16_t Iim42652::Read2Byte(uint8_t upper_address, uint8_t lower_address, char imu_ic_lr)
{
 80215bc:	b580      	push	{r7, lr}
 80215be:	b084      	sub	sp, #16
 80215c0:	af00      	add	r7, sp, #0
 80215c2:	6078      	str	r0, [r7, #4]
 80215c4:	4608      	mov	r0, r1
 80215c6:	4611      	mov	r1, r2
 80215c8:	461a      	mov	r2, r3
 80215ca:	4603      	mov	r3, r0
 80215cc:	70fb      	strb	r3, [r7, #3]
 80215ce:	460b      	mov	r3, r1
 80215d0:	70bb      	strb	r3, [r7, #2]
 80215d2:	4613      	mov	r3, r2
 80215d4:	707b      	strb	r3, [r7, #1]
    int16_t upper_receive, lower_receive;

    upper_receive = static_cast<int16_t>(Read(upper_address, imu_ic_lr));
 80215d6:	787a      	ldrb	r2, [r7, #1]
 80215d8:	78fb      	ldrb	r3, [r7, #3]
 80215da:	4619      	mov	r1, r3
 80215dc:	6878      	ldr	r0, [r7, #4]
 80215de:	f7ff ff51 	bl	8021484 <_ZN8Iim426524ReadEhc>
 80215e2:	4603      	mov	r3, r0
 80215e4:	81fb      	strh	r3, [r7, #14]
    lower_receive = static_cast<int16_t>(Read(lower_address, imu_ic_lr));
 80215e6:	787a      	ldrb	r2, [r7, #1]
 80215e8:	78bb      	ldrb	r3, [r7, #2]
 80215ea:	4619      	mov	r1, r3
 80215ec:	6878      	ldr	r0, [r7, #4]
 80215ee:	f7ff ff49 	bl	8021484 <_ZN8Iim426524ReadEhc>
 80215f2:	4603      	mov	r3, r0
 80215f4:	81bb      	strh	r3, [r7, #12]

    return (upper_receive << 8) | lower_receive;
 80215f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80215fa:	021b      	lsls	r3, r3, #8
 80215fc:	b21a      	sxth	r2, r3
 80215fe:	89bb      	ldrh	r3, [r7, #12]
 8021600:	4313      	orrs	r3, r2
 8021602:	b21b      	sxth	r3, r3
}
 8021604:	4618      	mov	r0, r3
 8021606:	3710      	adds	r7, #16
 8021608:	46bd      	mov	sp, r7
 802160a:	bd80      	pop	{r7, pc}
 802160c:	0000      	movs	r0, r0
	...

08021610 <_ZN8Iim426526UpdateEv>:

void Iim42652::Update()
{
 8021610:	b590      	push	{r4, r7, lr}
 8021612:	b089      	sub	sp, #36	; 0x24
 8021614:	af00      	add	r7, sp, #0
 8021616:	6078      	str	r0, [r7, #4]
    int16_t raw_z_l = Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'L');
 8021618:	234c      	movs	r3, #76	; 0x4c
 802161a:	222a      	movs	r2, #42	; 0x2a
 802161c:	2129      	movs	r1, #41	; 0x29
 802161e:	6878      	ldr	r0, [r7, #4]
 8021620:	f7ff ffcc 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021624:	4603      	mov	r3, r0
 8021626:	83fb      	strh	r3, [r7, #30]
    int16_t raw_z_r = Read2Byte(GYRO_DATA_Z1_ADD, GYRO_DATA_Z0_ADD, 'R');
 8021628:	2352      	movs	r3, #82	; 0x52
 802162a:	222a      	movs	r2, #42	; 0x2a
 802162c:	2129      	movs	r1, #41	; 0x29
 802162e:	6878      	ldr	r0, [r7, #4]
 8021630:	f7ff ffc4 	bl	80215bc <_ZN8Iim426529Read2ByteEhhc>
 8021634:	4603      	mov	r3, r0
 8021636:	83bb      	strh	r3, [r7, #28]
    double avg_raw_z = static_cast<double>(raw_z_l + raw_z_r) / 2.0;
 8021638:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 802163c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8021640:	4413      	add	r3, r2
 8021642:	4618      	mov	r0, r3
 8021644:	f7fe fe4e 	bl	80202e4 <__aeabi_i2d>
 8021648:	f04f 0200 	mov.w	r2, #0
 802164c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021650:	f7fe ffdc 	bl	802060c <__aeabi_ddiv>
 8021654:	4603      	mov	r3, r0
 8021656:	460c      	mov	r4, r1
 8021658:	e9c7 3404 	strd	r3, r4, [r7, #16]
    double degree_z = avg_raw_z * NORMAL_FUCOR_DPS * TIM6_PERIOD;
 802165c:	a316      	add	r3, pc, #88	; (adr r3, 80216b8 <_ZN8Iim426526UpdateEv+0xa8>)
 802165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021662:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8021666:	f7fe fea7 	bl	80203b8 <__aeabi_dmul>
 802166a:	4603      	mov	r3, r0
 802166c:	460c      	mov	r4, r1
 802166e:	4618      	mov	r0, r3
 8021670:	4621      	mov	r1, r4
 8021672:	f04f 0200 	mov.w	r2, #0
 8021676:	4b0e      	ldr	r3, [pc, #56]	; (80216b0 <_ZN8Iim426526UpdateEv+0xa0>)
 8021678:	f7fe fe9e 	bl	80203b8 <__aeabi_dmul>
 802167c:	4603      	mov	r3, r0
 802167e:	460c      	mov	r4, r1
 8021680:	e9c7 3402 	strd	r3, r4, [r7, #8]

    degree_stack_z_ += degree_z;
 8021684:	687b      	ldr	r3, [r7, #4]
 8021686:	e9d3 0100 	ldrd	r0, r1, [r3]
 802168a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 802168e:	f7fe fcdd 	bl	802004c <__adddf3>
 8021692:	4603      	mov	r3, r0
 8021694:	460c      	mov	r4, r1
 8021696:	687a      	ldr	r2, [r7, #4]
 8021698:	e9c2 3400 	strd	r3, r4, [r2]

#ifdef DEBUG_MODE
    g_deg_z = degree_z;
 802169c:	4a05      	ldr	r2, [pc, #20]	; (80216b4 <_ZN8Iim426526UpdateEv+0xa4>)
 802169e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80216a2:	e9c2 3400 	strd	r3, r4, [r2]
#endif // DEBUG_MODE
}
 80216a6:	bf00      	nop
 80216a8:	3724      	adds	r7, #36	; 0x24
 80216aa:	46bd      	mov	sp, r7
 80216ac:	bd90      	pop	{r4, r7, pc}
 80216ae:	bf00      	nop
 80216b0:	3ff40000 	.word	0x3ff40000
 80216b4:	20000270 	.word	0x20000270
 80216b8:	ddb1209f 	.word	0xddb1209f
 80216bc:	3faf403d 	.word	0x3faf403d

080216c0 <_ZN8Iim4265217ResetDegreeStackZEv>:

void Iim42652::ResetDegreeStackZ()
{
 80216c0:	b490      	push	{r4, r7}
 80216c2:	b082      	sub	sp, #8
 80216c4:	af00      	add	r7, sp, #0
 80216c6:	6078      	str	r0, [r7, #4]
    degree_stack_z_ = 0.0;
 80216c8:	687a      	ldr	r2, [r7, #4]
 80216ca:	f04f 0300 	mov.w	r3, #0
 80216ce:	f04f 0400 	mov.w	r4, #0
 80216d2:	e9c2 3400 	strd	r3, r4, [r2]
}
 80216d6:	bf00      	nop
 80216d8:	3708      	adds	r7, #8
 80216da:	46bd      	mov	sp, r7
 80216dc:	bc90      	pop	{r4, r7}
 80216de:	4770      	bx	lr

080216e0 <_ZN8Iim4265215GetDegreeStackZEv>:

double Iim42652::GetDegreeStackZ()
{
 80216e0:	b490      	push	{r4, r7}
 80216e2:	b082      	sub	sp, #8
 80216e4:	af00      	add	r7, sp, #0
 80216e6:	6078      	str	r0, [r7, #4]
    return degree_stack_z_;
 80216e8:	687b      	ldr	r3, [r7, #4]
 80216ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80216ee:	ec44 3b17 	vmov	d7, r3, r4
}
 80216f2:	eeb0 0a47 	vmov.f32	s0, s14
 80216f6:	eef0 0a67 	vmov.f32	s1, s15
 80216fa:	3708      	adds	r7, #8
 80216fc:	46bd      	mov	sp, r7
 80216fe:	bc90      	pop	{r4, r7}
 8021700:	4770      	bx	lr

08021702 <_ZN3LedC1Ev>:
#include "led.hpp"

Led::Led() : interrupt_count_(0)
 8021702:	b480      	push	{r7}
 8021704:	b083      	sub	sp, #12
 8021706:	af00      	add	r7, sp, #0
 8021708:	6078      	str	r0, [r7, #4]
           , interrupt_timer_(0) {}
 802170a:	687b      	ldr	r3, [r7, #4]
 802170c:	2200      	movs	r2, #0
 802170e:	701a      	strb	r2, [r3, #0]
 8021710:	687b      	ldr	r3, [r7, #4]
 8021712:	2200      	movs	r2, #0
 8021714:	705a      	strb	r2, [r3, #1]
 8021716:	687b      	ldr	r3, [r7, #4]
 8021718:	4618      	mov	r0, r3
 802171a:	370c      	adds	r7, #12
 802171c:	46bd      	mov	sp, r7
 802171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021722:	4770      	bx	lr

08021724 <_ZN3Led10ColorOrderEc>:

void Led::ColorOrder(char color)
{
 8021724:	b580      	push	{r7, lr}
 8021726:	b082      	sub	sp, #8
 8021728:	af00      	add	r7, sp, #0
 802172a:	6078      	str	r0, [r7, #4]
 802172c:	460b      	mov	r3, r1
 802172e:	70fb      	strb	r3, [r7, #3]
    switch(color)
 8021730:	78fb      	ldrb	r3, [r7, #3]
 8021732:	3b42      	subs	r3, #66	; 0x42
 8021734:	2b17      	cmp	r3, #23
 8021736:	f200 80b8 	bhi.w	80218aa <_ZN3Led10ColorOrderEc+0x186>
 802173a:	a201      	add	r2, pc, #4	; (adr r2, 8021740 <_ZN3Led10ColorOrderEc+0x1c>)
 802173c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021740:	080217ed 	.word	0x080217ed
 8021744:	08021839 	.word	0x08021839
 8021748:	080218ab 	.word	0x080218ab
 802174c:	080218ab 	.word	0x080218ab
 8021750:	080218ab 	.word	0x080218ab
 8021754:	080217c7 	.word	0x080217c7
 8021758:	080218ab 	.word	0x080218ab
 802175c:	080218ab 	.word	0x080218ab
 8021760:	080218ab 	.word	0x080218ab
 8021764:	080218ab 	.word	0x080218ab
 8021768:	080218ab 	.word	0x080218ab
 802176c:	0802185f 	.word	0x0802185f
 8021770:	080218ab 	.word	0x080218ab
 8021774:	080218ab 	.word	0x080218ab
 8021778:	080218ab 	.word	0x080218ab
 802177c:	080218ab 	.word	0x080218ab
 8021780:	080217a1 	.word	0x080217a1
 8021784:	080218ab 	.word	0x080218ab
 8021788:	080218ab 	.word	0x080218ab
 802178c:	080218ab 	.word	0x080218ab
 8021790:	080218ab 	.word	0x080218ab
 8021794:	08021885 	.word	0x08021885
 8021798:	080218ab 	.word	0x080218ab
 802179c:	08021813 	.word	0x08021813
    {
        case 'R': R_ON;  G_OFF; B_OFF; break;
 80217a0:	2200      	movs	r2, #0
 80217a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80217a6:	484c      	ldr	r0, [pc, #304]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80217a8:	f006 fe96 	bl	80284d8 <HAL_GPIO_WritePin>
 80217ac:	2201      	movs	r2, #1
 80217ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80217b2:	4849      	ldr	r0, [pc, #292]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80217b4:	f006 fe90 	bl	80284d8 <HAL_GPIO_WritePin>
 80217b8:	2201      	movs	r2, #1
 80217ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80217be:	4846      	ldr	r0, [pc, #280]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80217c0:	f006 fe8a 	bl	80284d8 <HAL_GPIO_WritePin>
 80217c4:	e084      	b.n	80218d0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'G': R_OFF; G_ON;  B_OFF; break;
 80217c6:	2201      	movs	r2, #1
 80217c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80217cc:	4842      	ldr	r0, [pc, #264]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80217ce:	f006 fe83 	bl	80284d8 <HAL_GPIO_WritePin>
 80217d2:	2200      	movs	r2, #0
 80217d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80217d8:	483f      	ldr	r0, [pc, #252]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80217da:	f006 fe7d 	bl	80284d8 <HAL_GPIO_WritePin>
 80217de:	2201      	movs	r2, #1
 80217e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80217e4:	483c      	ldr	r0, [pc, #240]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80217e6:	f006 fe77 	bl	80284d8 <HAL_GPIO_WritePin>
 80217ea:	e071      	b.n	80218d0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'B': R_OFF; G_OFF; B_ON;  break;
 80217ec:	2201      	movs	r2, #1
 80217ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80217f2:	4839      	ldr	r0, [pc, #228]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80217f4:	f006 fe70 	bl	80284d8 <HAL_GPIO_WritePin>
 80217f8:	2201      	movs	r2, #1
 80217fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80217fe:	4836      	ldr	r0, [pc, #216]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021800:	f006 fe6a 	bl	80284d8 <HAL_GPIO_WritePin>
 8021804:	2200      	movs	r2, #0
 8021806:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802180a:	4833      	ldr	r0, [pc, #204]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 802180c:	f006 fe64 	bl	80284d8 <HAL_GPIO_WritePin>
 8021810:	e05e      	b.n	80218d0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'Y': R_ON;  G_ON;  B_OFF; break;
 8021812:	2200      	movs	r2, #0
 8021814:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021818:	482f      	ldr	r0, [pc, #188]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 802181a:	f006 fe5d 	bl	80284d8 <HAL_GPIO_WritePin>
 802181e:	2200      	movs	r2, #0
 8021820:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021824:	482c      	ldr	r0, [pc, #176]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021826:	f006 fe57 	bl	80284d8 <HAL_GPIO_WritePin>
 802182a:	2201      	movs	r2, #1
 802182c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021830:	4829      	ldr	r0, [pc, #164]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021832:	f006 fe51 	bl	80284d8 <HAL_GPIO_WritePin>
 8021836:	e04b      	b.n	80218d0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'C': R_OFF; G_ON;  B_ON;  break;
 8021838:	2201      	movs	r2, #1
 802183a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802183e:	4826      	ldr	r0, [pc, #152]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021840:	f006 fe4a 	bl	80284d8 <HAL_GPIO_WritePin>
 8021844:	2200      	movs	r2, #0
 8021846:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802184a:	4823      	ldr	r0, [pc, #140]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 802184c:	f006 fe44 	bl	80284d8 <HAL_GPIO_WritePin>
 8021850:	2200      	movs	r2, #0
 8021852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021856:	4820      	ldr	r0, [pc, #128]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021858:	f006 fe3e 	bl	80284d8 <HAL_GPIO_WritePin>
 802185c:	e038      	b.n	80218d0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'M': R_ON;  G_OFF; B_ON;  break;
 802185e:	2200      	movs	r2, #0
 8021860:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021864:	481c      	ldr	r0, [pc, #112]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021866:	f006 fe37 	bl	80284d8 <HAL_GPIO_WritePin>
 802186a:	2201      	movs	r2, #1
 802186c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021870:	4819      	ldr	r0, [pc, #100]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021872:	f006 fe31 	bl	80284d8 <HAL_GPIO_WritePin>
 8021876:	2200      	movs	r2, #0
 8021878:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802187c:	4816      	ldr	r0, [pc, #88]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 802187e:	f006 fe2b 	bl	80284d8 <HAL_GPIO_WritePin>
 8021882:	e025      	b.n	80218d0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'W': R_ON;  G_ON;  B_ON;  break;
 8021884:	2200      	movs	r2, #0
 8021886:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802188a:	4813      	ldr	r0, [pc, #76]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 802188c:	f006 fe24 	bl	80284d8 <HAL_GPIO_WritePin>
 8021890:	2200      	movs	r2, #0
 8021892:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021896:	4810      	ldr	r0, [pc, #64]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021898:	f006 fe1e 	bl	80284d8 <HAL_GPIO_WritePin>
 802189c:	2200      	movs	r2, #0
 802189e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80218a2:	480d      	ldr	r0, [pc, #52]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80218a4:	f006 fe18 	bl	80284d8 <HAL_GPIO_WritePin>
 80218a8:	e012      	b.n	80218d0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'X': // fall through
        default:  R_OFF; G_OFF; B_OFF; break;
 80218aa:	2201      	movs	r2, #1
 80218ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80218b0:	4809      	ldr	r0, [pc, #36]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80218b2:	f006 fe11 	bl	80284d8 <HAL_GPIO_WritePin>
 80218b6:	2201      	movs	r2, #1
 80218b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80218bc:	4806      	ldr	r0, [pc, #24]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80218be:	f006 fe0b 	bl	80284d8 <HAL_GPIO_WritePin>
 80218c2:	2201      	movs	r2, #1
 80218c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80218c8:	4803      	ldr	r0, [pc, #12]	; (80218d8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80218ca:	f006 fe05 	bl	80284d8 <HAL_GPIO_WritePin>
 80218ce:	bf00      	nop
    }
}
 80218d0:	bf00      	nop
 80218d2:	3708      	adds	r7, #8
 80218d4:	46bd      	mov	sp, r7
 80218d6:	bd80      	pop	{r7, pc}
 80218d8:	40020800 	.word	0x40020800

080218dc <_ZN3Led5BlinkEhcc>:

void Led::Blink(uint8_t times, char color_1, char color_2)
{
 80218dc:	b580      	push	{r7, lr}
 80218de:	b084      	sub	sp, #16
 80218e0:	af00      	add	r7, sp, #0
 80218e2:	6078      	str	r0, [r7, #4]
 80218e4:	4608      	mov	r0, r1
 80218e6:	4611      	mov	r1, r2
 80218e8:	461a      	mov	r2, r3
 80218ea:	4603      	mov	r3, r0
 80218ec:	70fb      	strb	r3, [r7, #3]
 80218ee:	460b      	mov	r3, r1
 80218f0:	70bb      	strb	r3, [r7, #2]
 80218f2:	4613      	mov	r3, r2
 80218f4:	707b      	strb	r3, [r7, #1]
    for(uint8_t i = 0; i < times; i++)
 80218f6:	2300      	movs	r3, #0
 80218f8:	73fb      	strb	r3, [r7, #15]
 80218fa:	7bfa      	ldrb	r2, [r7, #15]
 80218fc:	78fb      	ldrb	r3, [r7, #3]
 80218fe:	429a      	cmp	r2, r3
 8021900:	d215      	bcs.n	802192e <_ZN3Led5BlinkEhcc+0x52>
    {
        ColorOrder(color_1);
 8021902:	78bb      	ldrb	r3, [r7, #2]
 8021904:	4619      	mov	r1, r3
 8021906:	6878      	ldr	r0, [r7, #4]
 8021908:	f7ff ff0c 	bl	8021724 <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 802190c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021910:	f005 f8c4 	bl	8026a9c <HAL_Delay>
        ColorOrder(color_2);
 8021914:	787b      	ldrb	r3, [r7, #1]
 8021916:	4619      	mov	r1, r3
 8021918:	6878      	ldr	r0, [r7, #4]
 802191a:	f7ff ff03 	bl	8021724 <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 802191e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021922:	f005 f8bb 	bl	8026a9c <HAL_Delay>
    for(uint8_t i = 0; i < times; i++)
 8021926:	7bfb      	ldrb	r3, [r7, #15]
 8021928:	3301      	adds	r3, #1
 802192a:	73fb      	strb	r3, [r7, #15]
 802192c:	e7e5      	b.n	80218fa <_ZN3Led5BlinkEhcc+0x1e>
    }
}
 802192e:	bf00      	nop
 8021930:	3710      	adds	r7, #16
 8021932:	46bd      	mov	sp, r7
 8021934:	bd80      	pop	{r7, pc}

08021936 <_ZN3Led7RainbowEh>:

void Led::Rainbow(uint8_t times)
{
 8021936:	b580      	push	{r7, lr}
 8021938:	b084      	sub	sp, #16
 802193a:	af00      	add	r7, sp, #0
 802193c:	6078      	str	r0, [r7, #4]
 802193e:	460b      	mov	r3, r1
 8021940:	70fb      	strb	r3, [r7, #3]
    for(uint8_t i = 0; i < times; i++)
 8021942:	2300      	movs	r3, #0
 8021944:	73fb      	strb	r3, [r7, #15]
 8021946:	7bfa      	ldrb	r2, [r7, #15]
 8021948:	78fb      	ldrb	r3, [r7, #3]
 802194a:	429a      	cmp	r2, r3
 802194c:	d233      	bcs.n	80219b6 <_ZN3Led7RainbowEh+0x80>
    {
        ColorOrder('R');
 802194e:	2152      	movs	r1, #82	; 0x52
 8021950:	6878      	ldr	r0, [r7, #4]
 8021952:	f7ff fee7 	bl	8021724 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021956:	f44f 7096 	mov.w	r0, #300	; 0x12c
 802195a:	f005 f89f 	bl	8026a9c <HAL_Delay>
        ColorOrder('Y');
 802195e:	2159      	movs	r1, #89	; 0x59
 8021960:	6878      	ldr	r0, [r7, #4]
 8021962:	f7ff fedf 	bl	8021724 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021966:	f44f 7096 	mov.w	r0, #300	; 0x12c
 802196a:	f005 f897 	bl	8026a9c <HAL_Delay>
        ColorOrder('G');
 802196e:	2147      	movs	r1, #71	; 0x47
 8021970:	6878      	ldr	r0, [r7, #4]
 8021972:	f7ff fed7 	bl	8021724 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021976:	f44f 7096 	mov.w	r0, #300	; 0x12c
 802197a:	f005 f88f 	bl	8026a9c <HAL_Delay>
        ColorOrder('C');
 802197e:	2143      	movs	r1, #67	; 0x43
 8021980:	6878      	ldr	r0, [r7, #4]
 8021982:	f7ff fecf 	bl	8021724 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021986:	f44f 7096 	mov.w	r0, #300	; 0x12c
 802198a:	f005 f887 	bl	8026a9c <HAL_Delay>
        ColorOrder('B');
 802198e:	2142      	movs	r1, #66	; 0x42
 8021990:	6878      	ldr	r0, [r7, #4]
 8021992:	f7ff fec7 	bl	8021724 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 8021996:	f44f 7096 	mov.w	r0, #300	; 0x12c
 802199a:	f005 f87f 	bl	8026a9c <HAL_Delay>
        ColorOrder('M');
 802199e:	214d      	movs	r1, #77	; 0x4d
 80219a0:	6878      	ldr	r0, [r7, #4]
 80219a2:	f7ff febf 	bl	8021724 <_ZN3Led10ColorOrderEc>
        HAL_Delay(RAINBOW_INTERVAL_MS);
 80219a6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80219aa:	f005 f877 	bl	8026a9c <HAL_Delay>
    for(uint8_t i = 0; i < times; i++)
 80219ae:	7bfb      	ldrb	r3, [r7, #15]
 80219b0:	3301      	adds	r3, #1
 80219b2:	73fb      	strb	r3, [r7, #15]
 80219b4:	e7c7      	b.n	8021946 <_ZN3Led7RainbowEh+0x10>
    }
}
 80219b6:	bf00      	nop
 80219b8:	3710      	adds	r7, #16
 80219ba:	46bd      	mov	sp, r7
 80219bc:	bd80      	pop	{r7, pc}

080219be <_ZN3Led14BlinkInterruptEhcc>:

bool Led::BlinkInterrupt(uint8_t times, char color_1, char color_2)
{
 80219be:	b580      	push	{r7, lr}
 80219c0:	b084      	sub	sp, #16
 80219c2:	af00      	add	r7, sp, #0
 80219c4:	6078      	str	r0, [r7, #4]
 80219c6:	4608      	mov	r0, r1
 80219c8:	4611      	mov	r1, r2
 80219ca:	461a      	mov	r2, r3
 80219cc:	4603      	mov	r3, r0
 80219ce:	70fb      	strb	r3, [r7, #3]
 80219d0:	460b      	mov	r3, r1
 80219d2:	70bb      	strb	r3, [r7, #2]
 80219d4:	4613      	mov	r3, r2
 80219d6:	707b      	strb	r3, [r7, #1]
    uint8_t count = interrupt_count_;
 80219d8:	687b      	ldr	r3, [r7, #4]
 80219da:	781b      	ldrb	r3, [r3, #0]
 80219dc:	73fb      	strb	r3, [r7, #15]
    uint8_t timer = interrupt_timer_;
 80219de:	687b      	ldr	r3, [r7, #4]
 80219e0:	785b      	ldrb	r3, [r3, #1]
 80219e2:	73bb      	strb	r3, [r7, #14]
    bool blink_continue = true;
 80219e4:	2301      	movs	r3, #1
 80219e6:	737b      	strb	r3, [r7, #13]

    if(count < times){
 80219e8:	7bfa      	ldrb	r2, [r7, #15]
 80219ea:	78fb      	ldrb	r3, [r7, #3]
 80219ec:	429a      	cmp	r2, r3
 80219ee:	d21d      	bcs.n	8021a2c <_ZN3Led14BlinkInterruptEhcc+0x6e>
        if(timer < BLINK_INTERVAL_TIMX){
 80219f0:	7bbb      	ldrb	r3, [r7, #14]
 80219f2:	2b27      	cmp	r3, #39	; 0x27
 80219f4:	d808      	bhi.n	8021a08 <_ZN3Led14BlinkInterruptEhcc+0x4a>
            ColorOrder(color_1);
 80219f6:	78bb      	ldrb	r3, [r7, #2]
 80219f8:	4619      	mov	r1, r3
 80219fa:	6878      	ldr	r0, [r7, #4]
 80219fc:	f7ff fe92 	bl	8021724 <_ZN3Led10ColorOrderEc>
            timer++;
 8021a00:	7bbb      	ldrb	r3, [r7, #14]
 8021a02:	3301      	adds	r3, #1
 8021a04:	73bb      	strb	r3, [r7, #14]
 8021a06:	e019      	b.n	8021a3c <_ZN3Led14BlinkInterruptEhcc+0x7e>
        }else if(timer < (BLINK_INTERVAL_TIMX + BLINK_INTERVAL_TIMX)){
 8021a08:	7bbb      	ldrb	r3, [r7, #14]
 8021a0a:	2b4f      	cmp	r3, #79	; 0x4f
 8021a0c:	d808      	bhi.n	8021a20 <_ZN3Led14BlinkInterruptEhcc+0x62>
            ColorOrder(color_2);
 8021a0e:	787b      	ldrb	r3, [r7, #1]
 8021a10:	4619      	mov	r1, r3
 8021a12:	6878      	ldr	r0, [r7, #4]
 8021a14:	f7ff fe86 	bl	8021724 <_ZN3Led10ColorOrderEc>
            timer++;
 8021a18:	7bbb      	ldrb	r3, [r7, #14]
 8021a1a:	3301      	adds	r3, #1
 8021a1c:	73bb      	strb	r3, [r7, #14]
 8021a1e:	e00d      	b.n	8021a3c <_ZN3Led14BlinkInterruptEhcc+0x7e>
        }else{
            count++;
 8021a20:	7bfb      	ldrb	r3, [r7, #15]
 8021a22:	3301      	adds	r3, #1
 8021a24:	73fb      	strb	r3, [r7, #15]
            timer = 0;
 8021a26:	2300      	movs	r3, #0
 8021a28:	73bb      	strb	r3, [r7, #14]
 8021a2a:	e007      	b.n	8021a3c <_ZN3Led14BlinkInterruptEhcc+0x7e>
        }
    }else{
        ColorOrder('X');
 8021a2c:	2158      	movs	r1, #88	; 0x58
 8021a2e:	6878      	ldr	r0, [r7, #4]
 8021a30:	f7ff fe78 	bl	8021724 <_ZN3Led10ColorOrderEc>
        count = 0;
 8021a34:	2300      	movs	r3, #0
 8021a36:	73fb      	strb	r3, [r7, #15]
        blink_continue = false;
 8021a38:	2300      	movs	r3, #0
 8021a3a:	737b      	strb	r3, [r7, #13]
    }

    interrupt_count_ = count;
 8021a3c:	687b      	ldr	r3, [r7, #4]
 8021a3e:	7bfa      	ldrb	r2, [r7, #15]
 8021a40:	701a      	strb	r2, [r3, #0]
    interrupt_timer_ = timer;
 8021a42:	687b      	ldr	r3, [r7, #4]
 8021a44:	7bba      	ldrb	r2, [r7, #14]
 8021a46:	705a      	strb	r2, [r3, #1]

    return blink_continue;
 8021a48:	7b7b      	ldrb	r3, [r7, #13]
}
 8021a4a:	4618      	mov	r0, r3
 8021a4c:	3710      	adds	r7, #16
 8021a4e:	46bd      	mov	sp, r7
 8021a50:	bd80      	pop	{r7, pc}

08021a52 <_ZN3Led14ResetInterruptEv>:

void Led::ResetInterrupt()
{
 8021a52:	b480      	push	{r7}
 8021a54:	b083      	sub	sp, #12
 8021a56:	af00      	add	r7, sp, #0
 8021a58:	6078      	str	r0, [r7, #4]
    interrupt_count_ = 0;
 8021a5a:	687b      	ldr	r3, [r7, #4]
 8021a5c:	2200      	movs	r2, #0
 8021a5e:	701a      	strb	r2, [r3, #0]
    interrupt_timer_ = 0;
 8021a60:	687b      	ldr	r3, [r7, #4]
 8021a62:	2200      	movs	r2, #0
 8021a64:	705a      	strb	r2, [r3, #1]
 8021a66:	bf00      	nop
 8021a68:	370c      	adds	r7, #12
 8021a6a:	46bd      	mov	sp, r7
 8021a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a70:	4770      	bx	lr

08021a72 <_ZN10LineSensorC1Ev>:
#include "line_sensor.hpp"

LineSensor::LineSensor() : line_sensors_buff_{0}
 8021a72:	b580      	push	{r7, lr}
 8021a74:	b082      	sub	sp, #8
 8021a76:	af00      	add	r7, sp, #0
 8021a78:	6078      	str	r0, [r7, #4]
                         , consecutive_line_sensors_buff_{{0}}
                         , max_line_sensors_valu_{0}
                         , min_line_sensors_valu_{0}
                         , line_sensors_valu_{0}
                         , emergency_stop_flag_(false) {}
 8021a7a:	687b      	ldr	r3, [r7, #4]
 8021a7c:	461a      	mov	r2, r3
 8021a7e:	2300      	movs	r3, #0
 8021a80:	6013      	str	r3, [r2, #0]
 8021a82:	6053      	str	r3, [r2, #4]
 8021a84:	6093      	str	r3, [r2, #8]
 8021a86:	60d3      	str	r3, [r2, #12]
 8021a88:	6113      	str	r3, [r2, #16]
 8021a8a:	6153      	str	r3, [r2, #20]
 8021a8c:	6193      	str	r3, [r2, #24]
 8021a8e:	687b      	ldr	r3, [r7, #4]
 8021a90:	331c      	adds	r3, #28
 8021a92:	f44f 728c 	mov.w	r2, #280	; 0x118
 8021a96:	2100      	movs	r1, #0
 8021a98:	4618      	mov	r0, r3
 8021a9a:	f009 f84c 	bl	802ab36 <memset>
 8021a9e:	687b      	ldr	r3, [r7, #4]
 8021aa0:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8021aa4:	2200      	movs	r2, #0
 8021aa6:	601a      	str	r2, [r3, #0]
 8021aa8:	605a      	str	r2, [r3, #4]
 8021aaa:	609a      	str	r2, [r3, #8]
 8021aac:	60da      	str	r2, [r3, #12]
 8021aae:	611a      	str	r2, [r3, #16]
 8021ab0:	615a      	str	r2, [r3, #20]
 8021ab2:	619a      	str	r2, [r3, #24]
 8021ab4:	687b      	ldr	r3, [r7, #4]
 8021ab6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8021aba:	2200      	movs	r2, #0
 8021abc:	601a      	str	r2, [r3, #0]
 8021abe:	605a      	str	r2, [r3, #4]
 8021ac0:	609a      	str	r2, [r3, #8]
 8021ac2:	60da      	str	r2, [r3, #12]
 8021ac4:	611a      	str	r2, [r3, #16]
 8021ac6:	615a      	str	r2, [r3, #20]
 8021ac8:	619a      	str	r2, [r3, #24]
 8021aca:	687b      	ldr	r3, [r7, #4]
 8021acc:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8021ad0:	2200      	movs	r2, #0
 8021ad2:	601a      	str	r2, [r3, #0]
 8021ad4:	605a      	str	r2, [r3, #4]
 8021ad6:	609a      	str	r2, [r3, #8]
 8021ad8:	60da      	str	r2, [r3, #12]
 8021ada:	611a      	str	r2, [r3, #16]
 8021adc:	615a      	str	r2, [r3, #20]
 8021ade:	619a      	str	r2, [r3, #24]
 8021ae0:	687b      	ldr	r3, [r7, #4]
 8021ae2:	2200      	movs	r2, #0
 8021ae4:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 8021ae8:	687b      	ldr	r3, [r7, #4]
 8021aea:	4618      	mov	r0, r3
 8021aec:	3708      	adds	r7, #8
 8021aee:	46bd      	mov	sp, r7
 8021af0:	bd80      	pop	{r7, pc}
	...

08021af4 <_ZN10LineSensor4InitEv>:

void LineSensor::Init()
{
 8021af4:	b580      	push	{r7, lr}
 8021af6:	b082      	sub	sp, #8
 8021af8:	af00      	add	r7, sp, #0
 8021afa:	6078      	str	r0, [r7, #4]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)line_sensors_buff_, NUM_OF_LINE_SENSORS) != HAL_OK)
 8021afc:	687b      	ldr	r3, [r7, #4]
 8021afe:	220e      	movs	r2, #14
 8021b00:	4619      	mov	r1, r3
 8021b02:	4815      	ldr	r0, [pc, #84]	; (8021b58 <_ZN10LineSensor4InitEv+0x64>)
 8021b04:	f005 f830 	bl	8026b68 <HAL_ADC_Start_DMA>
 8021b08:	4603      	mov	r3, r0
 8021b0a:	2b00      	cmp	r3, #0
 8021b0c:	bf14      	ite	ne
 8021b0e:	2301      	movne	r3, #1
 8021b10:	2300      	moveq	r3, #0
 8021b12:	b2db      	uxtb	r3, r3
 8021b14:	2b00      	cmp	r3, #0
 8021b16:	d004      	beq.n	8021b22 <_ZN10LineSensor4InitEv+0x2e>
    {
#ifdef DEBUG_MODE
        g_error_handler_adc1 = true;
 8021b18:	4b10      	ldr	r3, [pc, #64]	; (8021b5c <_ZN10LineSensor4InitEv+0x68>)
 8021b1a:	2201      	movs	r2, #1
 8021b1c:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8021b1e:	f002 fc79 	bl	8024414 <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1) != HAL_OK)
 8021b22:	2100      	movs	r1, #0
 8021b24:	480e      	ldr	r0, [pc, #56]	; (8021b60 <_ZN10LineSensor4InitEv+0x6c>)
 8021b26:	f008 f81f 	bl	8029b68 <HAL_TIM_PWM_Start>
 8021b2a:	4603      	mov	r3, r0
 8021b2c:	2b00      	cmp	r3, #0
 8021b2e:	bf14      	ite	ne
 8021b30:	2301      	movne	r3, #1
 8021b32:	2300      	moveq	r3, #0
 8021b34:	b2db      	uxtb	r3, r3
 8021b36:	2b00      	cmp	r3, #0
 8021b38:	d004      	beq.n	8021b44 <_ZN10LineSensor4InitEv+0x50>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim11 = true;
 8021b3a:	4b0a      	ldr	r3, [pc, #40]	; (8021b64 <_ZN10LineSensor4InitEv+0x70>)
 8021b3c:	2201      	movs	r2, #1
 8021b3e:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8021b40:	f002 fc68 	bl	8024414 <Error_Handler>
    }

    __HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, LINE_SENSORS_LED_COMPARE);
 8021b44:	4b06      	ldr	r3, [pc, #24]	; (8021b60 <_ZN10LineSensor4InitEv+0x6c>)
 8021b46:	681b      	ldr	r3, [r3, #0]
 8021b48:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8021b4c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8021b4e:	bf00      	nop
 8021b50:	3708      	adds	r7, #8
 8021b52:	46bd      	mov	sp, r7
 8021b54:	bd80      	pop	{r7, pc}
 8021b56:	bf00      	nop
 8021b58:	200007ec 	.word	0x200007ec
 8021b5c:	200000d4 	.word	0x200000d4
 8021b60:	20000834 	.word	0x20000834
 8021b64:	200000d5 	.word	0x200000d5

08021b68 <_ZN10LineSensor20StoreConsecutiveBuffEv>:

void LineSensor::StoreConsecutiveBuff()
{
 8021b68:	b480      	push	{r7}
 8021b6a:	b085      	sub	sp, #20
 8021b6c:	af00      	add	r7, sp, #0
 8021b6e:	6078      	str	r0, [r7, #4]
    static uint8_t times = 0;

    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021b70:	2300      	movs	r3, #0
 8021b72:	60fb      	str	r3, [r7, #12]
 8021b74:	68fb      	ldr	r3, [r7, #12]
 8021b76:	2b0d      	cmp	r3, #13
 8021b78:	dc16      	bgt.n	8021ba8 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x40>
    {
        consecutive_line_sensors_buff_[times][i] = line_sensors_buff_[i];
 8021b7a:	4b15      	ldr	r3, [pc, #84]	; (8021bd0 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021b7c:	781b      	ldrb	r3, [r3, #0]
 8021b7e:	4619      	mov	r1, r3
 8021b80:	687b      	ldr	r3, [r7, #4]
 8021b82:	68fa      	ldr	r2, [r7, #12]
 8021b84:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8021b88:	687a      	ldr	r2, [r7, #4]
 8021b8a:	460b      	mov	r3, r1
 8021b8c:	00db      	lsls	r3, r3, #3
 8021b8e:	1a5b      	subs	r3, r3, r1
 8021b90:	005b      	lsls	r3, r3, #1
 8021b92:	68f9      	ldr	r1, [r7, #12]
 8021b94:	440b      	add	r3, r1
 8021b96:	330c      	adds	r3, #12
 8021b98:	005b      	lsls	r3, r3, #1
 8021b9a:	4413      	add	r3, r2
 8021b9c:	4602      	mov	r2, r0
 8021b9e:	809a      	strh	r2, [r3, #4]
    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021ba0:	68fb      	ldr	r3, [r7, #12]
 8021ba2:	3301      	adds	r3, #1
 8021ba4:	60fb      	str	r3, [r7, #12]
 8021ba6:	e7e5      	b.n	8021b74 <_ZN10LineSensor20StoreConsecutiveBuffEv+0xc>
    }

    times++;
 8021ba8:	4b09      	ldr	r3, [pc, #36]	; (8021bd0 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021baa:	781b      	ldrb	r3, [r3, #0]
 8021bac:	3301      	adds	r3, #1
 8021bae:	b2da      	uxtb	r2, r3
 8021bb0:	4b07      	ldr	r3, [pc, #28]	; (8021bd0 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021bb2:	701a      	strb	r2, [r3, #0]
    if(times >= CONSECUTIVE_TIMES) times = 0;
 8021bb4:	4b06      	ldr	r3, [pc, #24]	; (8021bd0 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021bb6:	781b      	ldrb	r3, [r3, #0]
 8021bb8:	2b09      	cmp	r3, #9
 8021bba:	d902      	bls.n	8021bc2 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x5a>
 8021bbc:	4b04      	ldr	r3, [pc, #16]	; (8021bd0 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021bbe:	2200      	movs	r2, #0
 8021bc0:	701a      	strb	r2, [r3, #0]
}
 8021bc2:	bf00      	nop
 8021bc4:	3714      	adds	r7, #20
 8021bc6:	46bd      	mov	sp, r7
 8021bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bcc:	4770      	bx	lr
 8021bce:	bf00      	nop
 8021bd0:	2000003c 	.word	0x2000003c

08021bd4 <_ZN10LineSensor9MergeSortEPthh>:

void LineSensor::MergeSort(uint16_t array[], uint8_t first_index, uint8_t last_index)
{
 8021bd4:	b5b0      	push	{r4, r5, r7, lr}
 8021bd6:	b088      	sub	sp, #32
 8021bd8:	af00      	add	r7, sp, #0
 8021bda:	60f8      	str	r0, [r7, #12]
 8021bdc:	60b9      	str	r1, [r7, #8]
 8021bde:	4611      	mov	r1, r2
 8021be0:	461a      	mov	r2, r3
 8021be2:	460b      	mov	r3, r1
 8021be4:	71fb      	strb	r3, [r7, #7]
 8021be6:	4613      	mov	r3, r2
 8021be8:	71bb      	strb	r3, [r7, #6]

    for(i = first_index; i <= last_index; i++)
    {
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
        else                                     array[i] = temp_array[right--];
    }
 8021bea:	466b      	mov	r3, sp
 8021bec:	461d      	mov	r5, r3
    if(first_index >= last_index) return;
 8021bee:	79fa      	ldrb	r2, [r7, #7]
 8021bf0:	79bb      	ldrb	r3, [r7, #6]
 8021bf2:	429a      	cmp	r2, r3
 8021bf4:	f080 80ba 	bcs.w	8021d6c <_ZN10LineSensor9MergeSortEPthh+0x198>
    uint16_t temp_array[last_index+1];
 8021bf8:	79b8      	ldrb	r0, [r7, #6]
 8021bfa:	61b8      	str	r0, [r7, #24]
 8021bfc:	4603      	mov	r3, r0
 8021bfe:	3301      	adds	r3, #1
 8021c00:	4619      	mov	r1, r3
 8021c02:	f04f 0200 	mov.w	r2, #0
 8021c06:	f04f 0300 	mov.w	r3, #0
 8021c0a:	f04f 0400 	mov.w	r4, #0
 8021c0e:	0114      	lsls	r4, r2, #4
 8021c10:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8021c14:	010b      	lsls	r3, r1, #4
 8021c16:	4603      	mov	r3, r0
 8021c18:	3301      	adds	r3, #1
 8021c1a:	4619      	mov	r1, r3
 8021c1c:	f04f 0200 	mov.w	r2, #0
 8021c20:	f04f 0300 	mov.w	r3, #0
 8021c24:	f04f 0400 	mov.w	r4, #0
 8021c28:	0114      	lsls	r4, r2, #4
 8021c2a:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8021c2e:	010b      	lsls	r3, r1, #4
 8021c30:	4603      	mov	r3, r0
 8021c32:	3301      	adds	r3, #1
 8021c34:	005b      	lsls	r3, r3, #1
 8021c36:	3301      	adds	r3, #1
 8021c38:	3307      	adds	r3, #7
 8021c3a:	08db      	lsrs	r3, r3, #3
 8021c3c:	00db      	lsls	r3, r3, #3
 8021c3e:	ebad 0d03 	sub.w	sp, sp, r3
 8021c42:	466b      	mov	r3, sp
 8021c44:	3301      	adds	r3, #1
 8021c46:	085b      	lsrs	r3, r3, #1
 8021c48:	005b      	lsls	r3, r3, #1
 8021c4a:	617b      	str	r3, [r7, #20]
    middle = (first_index + last_index) / 2;
 8021c4c:	79fa      	ldrb	r2, [r7, #7]
 8021c4e:	79bb      	ldrb	r3, [r7, #6]
 8021c50:	4413      	add	r3, r2
 8021c52:	0fda      	lsrs	r2, r3, #31
 8021c54:	4413      	add	r3, r2
 8021c56:	105b      	asrs	r3, r3, #1
 8021c58:	74fb      	strb	r3, [r7, #19]
    MergeSort(array, first_index, middle);
 8021c5a:	7cfb      	ldrb	r3, [r7, #19]
 8021c5c:	79fa      	ldrb	r2, [r7, #7]
 8021c5e:	68b9      	ldr	r1, [r7, #8]
 8021c60:	68f8      	ldr	r0, [r7, #12]
 8021c62:	f7ff ffb7 	bl	8021bd4 <_ZN10LineSensor9MergeSortEPthh>
    MergeSort(array, middle+1, last_index);
 8021c66:	7cfb      	ldrb	r3, [r7, #19]
 8021c68:	3301      	adds	r3, #1
 8021c6a:	b2da      	uxtb	r2, r3
 8021c6c:	79bb      	ldrb	r3, [r7, #6]
 8021c6e:	68b9      	ldr	r1, [r7, #8]
 8021c70:	68f8      	ldr	r0, [r7, #12]
 8021c72:	f7ff ffaf 	bl	8021bd4 <_ZN10LineSensor9MergeSortEPthh>
    for(i = middle; i >= first_index; i--)
 8021c76:	7cfb      	ldrb	r3, [r7, #19]
 8021c78:	77bb      	strb	r3, [r7, #30]
 8021c7a:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021c7e:	79fb      	ldrb	r3, [r7, #7]
 8021c80:	429a      	cmp	r2, r3
 8021c82:	db11      	blt.n	8021ca8 <_ZN10LineSensor9MergeSortEPthh+0xd4>
        temp_array[i] = array[i];
 8021c84:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021c88:	005b      	lsls	r3, r3, #1
 8021c8a:	68ba      	ldr	r2, [r7, #8]
 8021c8c:	4413      	add	r3, r2
 8021c8e:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021c92:	8819      	ldrh	r1, [r3, #0]
 8021c94:	697b      	ldr	r3, [r7, #20]
 8021c96:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle; i >= first_index; i--)
 8021c9a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021c9e:	b2db      	uxtb	r3, r3
 8021ca0:	3b01      	subs	r3, #1
 8021ca2:	b2db      	uxtb	r3, r3
 8021ca4:	77bb      	strb	r3, [r7, #30]
 8021ca6:	e7e8      	b.n	8021c7a <_ZN10LineSensor9MergeSortEPthh+0xa6>
    for(i = middle+1; i <= last_index; i++)
 8021ca8:	7cfb      	ldrb	r3, [r7, #19]
 8021caa:	3301      	adds	r3, #1
 8021cac:	b2db      	uxtb	r3, r3
 8021cae:	77bb      	strb	r3, [r7, #30]
 8021cb0:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021cb4:	79bb      	ldrb	r3, [r7, #6]
 8021cb6:	429a      	cmp	r2, r3
 8021cb8:	dc17      	bgt.n	8021cea <_ZN10LineSensor9MergeSortEPthh+0x116>
        temp_array[last_index - (i - (middle+1))] = array[i];
 8021cba:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021cbe:	005b      	lsls	r3, r3, #1
 8021cc0:	68ba      	ldr	r2, [r7, #8]
 8021cc2:	4413      	add	r3, r2
 8021cc4:	79b9      	ldrb	r1, [r7, #6]
 8021cc6:	f997 001e 	ldrsb.w	r0, [r7, #30]
 8021cca:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8021cce:	3201      	adds	r2, #1
 8021cd0:	1a82      	subs	r2, r0, r2
 8021cd2:	1a8a      	subs	r2, r1, r2
 8021cd4:	8819      	ldrh	r1, [r3, #0]
 8021cd6:	697b      	ldr	r3, [r7, #20]
 8021cd8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle+1; i <= last_index; i++)
 8021cdc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021ce0:	b2db      	uxtb	r3, r3
 8021ce2:	3301      	adds	r3, #1
 8021ce4:	b2db      	uxtb	r3, r3
 8021ce6:	77bb      	strb	r3, [r7, #30]
 8021ce8:	e7e2      	b.n	8021cb0 <_ZN10LineSensor9MergeSortEPthh+0xdc>
    left  = first_index;
 8021cea:	79fb      	ldrb	r3, [r7, #7]
 8021cec:	77fb      	strb	r3, [r7, #31]
    right = last_index;
 8021cee:	79bb      	ldrb	r3, [r7, #6]
 8021cf0:	777b      	strb	r3, [r7, #29]
    for(i = first_index; i <= last_index; i++)
 8021cf2:	79fb      	ldrb	r3, [r7, #7]
 8021cf4:	77bb      	strb	r3, [r7, #30]
 8021cf6:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021cfa:	79bb      	ldrb	r3, [r7, #6]
 8021cfc:	429a      	cmp	r2, r3
 8021cfe:	dc33      	bgt.n	8021d68 <_ZN10LineSensor9MergeSortEPthh+0x194>
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
 8021d00:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8021d04:	697b      	ldr	r3, [r7, #20]
 8021d06:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8021d0a:	f997 101d 	ldrsb.w	r1, [r7, #29]
 8021d0e:	697b      	ldr	r3, [r7, #20]
 8021d10:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8021d14:	429a      	cmp	r2, r3
 8021d16:	d210      	bcs.n	8021d3a <_ZN10LineSensor9MergeSortEPthh+0x166>
 8021d18:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8021d1c:	b2d3      	uxtb	r3, r2
 8021d1e:	3301      	adds	r3, #1
 8021d20:	b2db      	uxtb	r3, r3
 8021d22:	77fb      	strb	r3, [r7, #31]
 8021d24:	4611      	mov	r1, r2
 8021d26:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021d2a:	005b      	lsls	r3, r3, #1
 8021d2c:	68ba      	ldr	r2, [r7, #8]
 8021d2e:	4413      	add	r3, r2
 8021d30:	697a      	ldr	r2, [r7, #20]
 8021d32:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8021d36:	801a      	strh	r2, [r3, #0]
 8021d38:	e00f      	b.n	8021d5a <_ZN10LineSensor9MergeSortEPthh+0x186>
        else                                     array[i] = temp_array[right--];
 8021d3a:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8021d3e:	b2d3      	uxtb	r3, r2
 8021d40:	3b01      	subs	r3, #1
 8021d42:	b2db      	uxtb	r3, r3
 8021d44:	777b      	strb	r3, [r7, #29]
 8021d46:	4611      	mov	r1, r2
 8021d48:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021d4c:	005b      	lsls	r3, r3, #1
 8021d4e:	68ba      	ldr	r2, [r7, #8]
 8021d50:	4413      	add	r3, r2
 8021d52:	697a      	ldr	r2, [r7, #20]
 8021d54:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8021d58:	801a      	strh	r2, [r3, #0]
    for(i = first_index; i <= last_index; i++)
 8021d5a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021d5e:	b2db      	uxtb	r3, r3
 8021d60:	3301      	adds	r3, #1
 8021d62:	b2db      	uxtb	r3, r3
 8021d64:	77bb      	strb	r3, [r7, #30]
 8021d66:	e7c6      	b.n	8021cf6 <_ZN10LineSensor9MergeSortEPthh+0x122>
 8021d68:	46ad      	mov	sp, r5
 8021d6a:	e001      	b.n	8021d70 <_ZN10LineSensor9MergeSortEPthh+0x19c>
    if(first_index >= last_index) return;
 8021d6c:	bf00      	nop
 8021d6e:	46ad      	mov	sp, r5
}
 8021d70:	3720      	adds	r7, #32
 8021d72:	46bd      	mov	sp, r7
 8021d74:	bdb0      	pop	{r4, r5, r7, pc}
	...

08021d78 <_ZN10LineSensor6UpdateEv>:

void LineSensor::Update()
{
 8021d78:	b590      	push	{r4, r7, lr}
 8021d7a:	b08b      	sub	sp, #44	; 0x2c
 8021d7c:	af00      	add	r7, sp, #0
 8021d7e:	6078      	str	r0, [r7, #4]
    uint8_t i, j;
    uint16_t temp_array[CONSECUTIVE_TIMES];
    uint16_t median, max, min, normalized;
    bool emergency = true;
 8021d80:	2301      	movs	r3, #1
 8021d82:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021d86:	2300      	movs	r3, #0
 8021d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021d8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021d90:	2b0d      	cmp	r3, #13
 8021d92:	f200 80c8 	bhi.w	8021f26 <_ZN10LineSensor6UpdateEv+0x1ae>
    {
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021d96:	2300      	movs	r3, #0
 8021d98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021d9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021da0:	2b09      	cmp	r3, #9
 8021da2:	d81b      	bhi.n	8021ddc <_ZN10LineSensor6UpdateEv+0x64>
        {
            temp_array[j] = consecutive_line_sensors_buff_[j][i];
 8021da4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8021da8:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8021dac:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8021db0:	6878      	ldr	r0, [r7, #4]
 8021db2:	4613      	mov	r3, r2
 8021db4:	00db      	lsls	r3, r3, #3
 8021db6:	1a9b      	subs	r3, r3, r2
 8021db8:	005b      	lsls	r3, r3, #1
 8021dba:	4423      	add	r3, r4
 8021dbc:	330c      	adds	r3, #12
 8021dbe:	005b      	lsls	r3, r3, #1
 8021dc0:	4403      	add	r3, r0
 8021dc2:	889a      	ldrh	r2, [r3, #4]
 8021dc4:	004b      	lsls	r3, r1, #1
 8021dc6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8021dca:	440b      	add	r3, r1
 8021dcc:	f823 2c20 	strh.w	r2, [r3, #-32]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021dd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021dd4:	3301      	adds	r3, #1
 8021dd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021dda:	e7df      	b.n	8021d9c <_ZN10LineSensor6UpdateEv+0x24>
        }

        MergeSort(temp_array, 0, CONSECUTIVE_TIMES-1);
 8021ddc:	f107 0108 	add.w	r1, r7, #8
 8021de0:	2309      	movs	r3, #9
 8021de2:	2200      	movs	r2, #0
 8021de4:	6878      	ldr	r0, [r7, #4]
 8021de6:	f7ff fef5 	bl	8021bd4 <_ZN10LineSensor9MergeSortEPthh>
        median = temp_array[HALF_CONSECUTIVE_TIMES];
 8021dea:	8a7b      	ldrh	r3, [r7, #18]
 8021dec:	83fb      	strh	r3, [r7, #30]

#ifdef DEBUG_MODE
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021dee:	2300      	movs	r3, #0
 8021df0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021df4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021df8:	2b09      	cmp	r3, #9
 8021dfa:	d81a      	bhi.n	8021e32 <_ZN10LineSensor6UpdateEv+0xba>
        {
            g_consecutive_line_buff[i][j] = temp_array[j];
 8021dfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021e00:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021e04:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8021e08:	005b      	lsls	r3, r3, #1
 8021e0a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8021e0e:	4403      	add	r3, r0
 8021e10:	f833 4c20 	ldrh.w	r4, [r3, #-32]
 8021e14:	4848      	ldr	r0, [pc, #288]	; (8021f38 <_ZN10LineSensor6UpdateEv+0x1c0>)
 8021e16:	4613      	mov	r3, r2
 8021e18:	009b      	lsls	r3, r3, #2
 8021e1a:	4413      	add	r3, r2
 8021e1c:	005b      	lsls	r3, r3, #1
 8021e1e:	440b      	add	r3, r1
 8021e20:	4622      	mov	r2, r4
 8021e22:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021e26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021e2a:	3301      	adds	r3, #1
 8021e2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021e30:	e7e0      	b.n	8021df4 <_ZN10LineSensor6UpdateEv+0x7c>
        }
#endif // DEBUG_MODE

        max = max_line_sensors_valu_[i];
 8021e32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021e36:	687a      	ldr	r2, [r7, #4]
 8021e38:	3398      	adds	r3, #152	; 0x98
 8021e3a:	005b      	lsls	r3, r3, #1
 8021e3c:	4413      	add	r3, r2
 8021e3e:	889b      	ldrh	r3, [r3, #4]
 8021e40:	84bb      	strh	r3, [r7, #36]	; 0x24
        min = min_line_sensors_valu_[i];
 8021e42:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021e46:	687b      	ldr	r3, [r7, #4]
 8021e48:	32a8      	adds	r2, #168	; 0xa8
 8021e4a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8021e4e:	847b      	strh	r3, [r7, #34]	; 0x22
        if(max < median || max == 0) max = median;
 8021e50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021e52:	8bfb      	ldrh	r3, [r7, #30]
 8021e54:	429a      	cmp	r2, r3
 8021e56:	d302      	bcc.n	8021e5e <_ZN10LineSensor6UpdateEv+0xe6>
 8021e58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021e5a:	2b00      	cmp	r3, #0
 8021e5c:	d101      	bne.n	8021e62 <_ZN10LineSensor6UpdateEv+0xea>
 8021e5e:	8bfb      	ldrh	r3, [r7, #30]
 8021e60:	84bb      	strh	r3, [r7, #36]	; 0x24
        if(min > median || min == 0) min = median;
 8021e62:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8021e64:	8bfb      	ldrh	r3, [r7, #30]
 8021e66:	429a      	cmp	r2, r3
 8021e68:	d802      	bhi.n	8021e70 <_ZN10LineSensor6UpdateEv+0xf8>
 8021e6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021e6c:	2b00      	cmp	r3, #0
 8021e6e:	d101      	bne.n	8021e74 <_ZN10LineSensor6UpdateEv+0xfc>
 8021e70:	8bfb      	ldrh	r3, [r7, #30]
 8021e72:	847b      	strh	r3, [r7, #34]	; 0x22
        max_line_sensors_valu_[i] = max;
 8021e74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021e78:	687a      	ldr	r2, [r7, #4]
 8021e7a:	3398      	adds	r3, #152	; 0x98
 8021e7c:	005b      	lsls	r3, r3, #1
 8021e7e:	4413      	add	r3, r2
 8021e80:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021e82:	809a      	strh	r2, [r3, #4]
        min_line_sensors_valu_[i] = min;
 8021e84:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021e88:	687b      	ldr	r3, [r7, #4]
 8021e8a:	32a8      	adds	r2, #168	; 0xa8
 8021e8c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8021e8e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

#ifdef DEBUG_MODE
        g_max_line_valu[i] = max_line_sensors_valu_[i];
 8021e92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021e96:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021e9a:	6879      	ldr	r1, [r7, #4]
 8021e9c:	3398      	adds	r3, #152	; 0x98
 8021e9e:	005b      	lsls	r3, r3, #1
 8021ea0:	440b      	add	r3, r1
 8021ea2:	8899      	ldrh	r1, [r3, #4]
 8021ea4:	4b25      	ldr	r3, [pc, #148]	; (8021f3c <_ZN10LineSensor6UpdateEv+0x1c4>)
 8021ea6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        g_min_line_valu[i] = min_line_sensors_valu_[i];
 8021eaa:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8021eae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021eb2:	687a      	ldr	r2, [r7, #4]
 8021eb4:	31a8      	adds	r1, #168	; 0xa8
 8021eb6:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8021eba:	4a21      	ldr	r2, [pc, #132]	; (8021f40 <_ZN10LineSensor6UpdateEv+0x1c8>)
 8021ebc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#endif // DEBUG_MODE

        if(max > min)
 8021ec0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021ec2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021ec4:	429a      	cmp	r2, r3
 8021ec6:	d928      	bls.n	8021f1a <_ZN10LineSensor6UpdateEv+0x1a2>
        {
            normalized = MAX_NORMALIZED_VALU * (median - min) / (max - min);
 8021ec8:	8bfa      	ldrh	r2, [r7, #30]
 8021eca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021ecc:	1ad3      	subs	r3, r2, r3
 8021ece:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8021ed2:	fb02 f203 	mul.w	r2, r2, r3
 8021ed6:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8021ed8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021eda:	1acb      	subs	r3, r1, r3
 8021edc:	fb92 f3f3 	sdiv	r3, r2, r3
 8021ee0:	83bb      	strh	r3, [r7, #28]
            line_sensors_valu_[i] = normalized;
 8021ee2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021ee6:	687a      	ldr	r2, [r7, #4]
 8021ee8:	33b4      	adds	r3, #180	; 0xb4
 8021eea:	005b      	lsls	r3, r3, #1
 8021eec:	4413      	add	r3, r2
 8021eee:	8bba      	ldrh	r2, [r7, #28]
 8021ef0:	809a      	strh	r2, [r3, #4]

#ifdef DEBUG_MODE
            g_line_valu[i] = line_sensors_valu_[i];
 8021ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021ef6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8021efa:	6879      	ldr	r1, [r7, #4]
 8021efc:	33b4      	adds	r3, #180	; 0xb4
 8021efe:	005b      	lsls	r3, r3, #1
 8021f00:	440b      	add	r3, r1
 8021f02:	8899      	ldrh	r1, [r3, #4]
 8021f04:	4b0f      	ldr	r3, [pc, #60]	; (8021f44 <_ZN10LineSensor6UpdateEv+0x1cc>)
 8021f06:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
#endif // DEBUG_MODE

            if(normalized < EMERGENCY_STOP_BORDER) emergency = false;
 8021f0a:	8bbb      	ldrh	r3, [r7, #28]
 8021f0c:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8021f10:	4293      	cmp	r3, r2
 8021f12:	d802      	bhi.n	8021f1a <_ZN10LineSensor6UpdateEv+0x1a2>
 8021f14:	2300      	movs	r3, #0
 8021f16:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021f1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021f1e:	3301      	adds	r3, #1
 8021f20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021f24:	e732      	b.n	8021d8c <_ZN10LineSensor6UpdateEv+0x14>
        }
    }
    emergency_stop_flag_ = emergency;
 8021f26:	687b      	ldr	r3, [r7, #4]
 8021f28:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8021f2c:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
}
 8021f30:	bf00      	nop
 8021f32:	372c      	adds	r7, #44	; 0x2c
 8021f34:	46bd      	mov	sp, r7
 8021f36:	bd90      	pop	{r4, r7, pc}
 8021f38:	200000dc 	.word	0x200000dc
 8021f3c:	200001f4 	.word	0x200001f4
 8021f40:	20000210 	.word	0x20000210
 8021f44:	2000022c 	.word	0x2000022c

08021f48 <_ZN10LineSensor19LeftRightDifferenceEv>:

float LineSensor::LeftRightDifference()
{
 8021f48:	b5b0      	push	{r4, r5, r7, lr}
 8021f4a:	b086      	sub	sp, #24
 8021f4c:	af00      	add	r7, sp, #0
 8021f4e:	6078      	str	r0, [r7, #4]
    uint8_t i;
    uint32_t left = 0, right = 0;
 8021f50:	2300      	movs	r3, #0
 8021f52:	613b      	str	r3, [r7, #16]
 8021f54:	2300      	movs	r3, #0
 8021f56:	60fb      	str	r3, [r7, #12]

    for(i = 0; i < HALF_NUM_OF_LINE_SENSORS; i++)
 8021f58:	2300      	movs	r3, #0
 8021f5a:	75fb      	strb	r3, [r7, #23]
 8021f5c:	7dfb      	ldrb	r3, [r7, #23]
 8021f5e:	2b06      	cmp	r3, #6
 8021f60:	d80d      	bhi.n	8021f7e <_ZN10LineSensor19LeftRightDifferenceEv+0x36>
    {
        left += line_sensors_valu_[i];
 8021f62:	7dfb      	ldrb	r3, [r7, #23]
 8021f64:	687a      	ldr	r2, [r7, #4]
 8021f66:	33b4      	adds	r3, #180	; 0xb4
 8021f68:	005b      	lsls	r3, r3, #1
 8021f6a:	4413      	add	r3, r2
 8021f6c:	889b      	ldrh	r3, [r3, #4]
 8021f6e:	461a      	mov	r2, r3
 8021f70:	693b      	ldr	r3, [r7, #16]
 8021f72:	4413      	add	r3, r2
 8021f74:	613b      	str	r3, [r7, #16]
    for(i = 0; i < HALF_NUM_OF_LINE_SENSORS; i++)
 8021f76:	7dfb      	ldrb	r3, [r7, #23]
 8021f78:	3301      	adds	r3, #1
 8021f7a:	75fb      	strb	r3, [r7, #23]
 8021f7c:	e7ee      	b.n	8021f5c <_ZN10LineSensor19LeftRightDifferenceEv+0x14>
    }
    for(i = HALF_NUM_OF_LINE_SENSORS; i < NUM_OF_LINE_SENSORS; i++)
 8021f7e:	2307      	movs	r3, #7
 8021f80:	75fb      	strb	r3, [r7, #23]
 8021f82:	7dfb      	ldrb	r3, [r7, #23]
 8021f84:	2b0d      	cmp	r3, #13
 8021f86:	d80d      	bhi.n	8021fa4 <_ZN10LineSensor19LeftRightDifferenceEv+0x5c>
    {
        right += line_sensors_valu_[i];
 8021f88:	7dfb      	ldrb	r3, [r7, #23]
 8021f8a:	687a      	ldr	r2, [r7, #4]
 8021f8c:	33b4      	adds	r3, #180	; 0xb4
 8021f8e:	005b      	lsls	r3, r3, #1
 8021f90:	4413      	add	r3, r2
 8021f92:	889b      	ldrh	r3, [r3, #4]
 8021f94:	461a      	mov	r2, r3
 8021f96:	68fb      	ldr	r3, [r7, #12]
 8021f98:	4413      	add	r3, r2
 8021f9a:	60fb      	str	r3, [r7, #12]
    for(i = HALF_NUM_OF_LINE_SENSORS; i < NUM_OF_LINE_SENSORS; i++)
 8021f9c:	7dfb      	ldrb	r3, [r7, #23]
 8021f9e:	3301      	adds	r3, #1
 8021fa0:	75fb      	strb	r3, [r7, #23]
 8021fa2:	e7ee      	b.n	8021f82 <_ZN10LineSensor19LeftRightDifferenceEv+0x3a>
    }

#ifdef DEBUG_MODE
    g_line_left = left;
 8021fa4:	4a11      	ldr	r2, [pc, #68]	; (8021fec <_ZN10LineSensor19LeftRightDifferenceEv+0xa4>)
 8021fa6:	693b      	ldr	r3, [r7, #16]
 8021fa8:	6013      	str	r3, [r2, #0]
    g_line_right = right;
 8021faa:	4a11      	ldr	r2, [pc, #68]	; (8021ff0 <_ZN10LineSensor19LeftRightDifferenceEv+0xa8>)
 8021fac:	68fb      	ldr	r3, [r7, #12]
 8021fae:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    float difference = right * LINE_SENSOR_CORRECTION - left;
 8021fb0:	68f8      	ldr	r0, [r7, #12]
 8021fb2:	f7fe f987 	bl	80202c4 <__aeabi_ui2d>
 8021fb6:	4604      	mov	r4, r0
 8021fb8:	460d      	mov	r5, r1
 8021fba:	6938      	ldr	r0, [r7, #16]
 8021fbc:	f7fe f982 	bl	80202c4 <__aeabi_ui2d>
 8021fc0:	4602      	mov	r2, r0
 8021fc2:	460b      	mov	r3, r1
 8021fc4:	4620      	mov	r0, r4
 8021fc6:	4629      	mov	r1, r5
 8021fc8:	f7fe f83e 	bl	8020048 <__aeabi_dsub>
 8021fcc:	4603      	mov	r3, r0
 8021fce:	460c      	mov	r4, r1
 8021fd0:	4618      	mov	r0, r3
 8021fd2:	4621      	mov	r1, r4
 8021fd4:	f7fe fc8a 	bl	80208ec <__aeabi_d2f>
 8021fd8:	4603      	mov	r3, r0
 8021fda:	60bb      	str	r3, [r7, #8]

    return difference;
 8021fdc:	68bb      	ldr	r3, [r7, #8]
 8021fde:	ee07 3a90 	vmov	s15, r3
}
 8021fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8021fe6:	3718      	adds	r7, #24
 8021fe8:	46bd      	mov	sp, r7
 8021fea:	bdb0      	pop	{r4, r5, r7, pc}
 8021fec:	20000248 	.word	0x20000248
 8021ff0:	2000024c 	.word	0x2000024c

08021ff4 <_ZN10LineSensor20GetEmergencyStopFlagEv>:

bool LineSensor::GetEmergencyStopFlag()
{
 8021ff4:	b480      	push	{r7}
 8021ff6:	b083      	sub	sp, #12
 8021ff8:	af00      	add	r7, sp, #0
 8021ffa:	6078      	str	r0, [r7, #4]
    return emergency_stop_flag_;
 8021ffc:	687b      	ldr	r3, [r7, #4]
 8021ffe:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
}
 8022002:	4618      	mov	r0, r3
 8022004:	370c      	adds	r7, #12
 8022006:	46bd      	mov	sp, r7
 8022008:	f85d 7b04 	ldr.w	r7, [sp], #4
 802200c:	4770      	bx	lr
	...

08022010 <_ZN10LineSensor16CheckCalibrationEv>:

bool LineSensor::CheckCalibration()
{
 8022010:	b480      	push	{r7}
 8022012:	b085      	sub	sp, #20
 8022014:	af00      	add	r7, sp, #0
 8022016:	6078      	str	r0, [r7, #4]
    static uint16_t timer = 0;
    static uint16_t pre_max[NUM_OF_LINE_SENSORS] = {0};
    static uint16_t pre_min[NUM_OF_LINE_SENSORS] = {0};
    uint16_t max, min;
    bool result = true;
 8022018:	2301      	movs	r3, #1
 802201a:	73fb      	strb	r3, [r7, #15]

    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 802201c:	2300      	movs	r3, #0
 802201e:	73bb      	strb	r3, [r7, #14]
 8022020:	7bbb      	ldrb	r3, [r7, #14]
 8022022:	2b0d      	cmp	r3, #13
 8022024:	d82d      	bhi.n	8022082 <_ZN10LineSensor16CheckCalibrationEv+0x72>
    {
        max = max_line_sensors_valu_[i];
 8022026:	7bbb      	ldrb	r3, [r7, #14]
 8022028:	687a      	ldr	r2, [r7, #4]
 802202a:	3398      	adds	r3, #152	; 0x98
 802202c:	005b      	lsls	r3, r3, #1
 802202e:	4413      	add	r3, r2
 8022030:	889b      	ldrh	r3, [r3, #4]
 8022032:	81bb      	strh	r3, [r7, #12]
        min = min_line_sensors_valu_[i];
 8022034:	7bba      	ldrb	r2, [r7, #14]
 8022036:	687b      	ldr	r3, [r7, #4]
 8022038:	32a8      	adds	r2, #168	; 0xa8
 802203a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802203e:	817b      	strh	r3, [r7, #10]

        if(pre_max[i] != max)      result = false;
 8022040:	7bbb      	ldrb	r3, [r7, #14]
 8022042:	4a1e      	ldr	r2, [pc, #120]	; (80220bc <_ZN10LineSensor16CheckCalibrationEv+0xac>)
 8022044:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8022048:	89ba      	ldrh	r2, [r7, #12]
 802204a:	429a      	cmp	r2, r3
 802204c:	d002      	beq.n	8022054 <_ZN10LineSensor16CheckCalibrationEv+0x44>
 802204e:	2300      	movs	r3, #0
 8022050:	73fb      	strb	r3, [r7, #15]
 8022052:	e008      	b.n	8022066 <_ZN10LineSensor16CheckCalibrationEv+0x56>
        else if(pre_min[i] != min) result = false;
 8022054:	7bbb      	ldrb	r3, [r7, #14]
 8022056:	4a1a      	ldr	r2, [pc, #104]	; (80220c0 <_ZN10LineSensor16CheckCalibrationEv+0xb0>)
 8022058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802205c:	897a      	ldrh	r2, [r7, #10]
 802205e:	429a      	cmp	r2, r3
 8022060:	d001      	beq.n	8022066 <_ZN10LineSensor16CheckCalibrationEv+0x56>
 8022062:	2300      	movs	r3, #0
 8022064:	73fb      	strb	r3, [r7, #15]

        pre_max[i] = max;
 8022066:	7bbb      	ldrb	r3, [r7, #14]
 8022068:	4914      	ldr	r1, [pc, #80]	; (80220bc <_ZN10LineSensor16CheckCalibrationEv+0xac>)
 802206a:	89ba      	ldrh	r2, [r7, #12]
 802206c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        pre_min[i] = min;
 8022070:	7bbb      	ldrb	r3, [r7, #14]
 8022072:	4913      	ldr	r1, [pc, #76]	; (80220c0 <_ZN10LineSensor16CheckCalibrationEv+0xb0>)
 8022074:	897a      	ldrh	r2, [r7, #10]
 8022076:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 802207a:	7bbb      	ldrb	r3, [r7, #14]
 802207c:	3301      	adds	r3, #1
 802207e:	73bb      	strb	r3, [r7, #14]
 8022080:	e7ce      	b.n	8022020 <_ZN10LineSensor16CheckCalibrationEv+0x10>
    }

    if(result)
 8022082:	7bfb      	ldrb	r3, [r7, #15]
 8022084:	2b00      	cmp	r3, #0
 8022086:	d00e      	beq.n	80220a6 <_ZN10LineSensor16CheckCalibrationEv+0x96>
    {
        if(timer < CALIBRATION_SUCCESS_TIME)
 8022088:	4b0e      	ldr	r3, [pc, #56]	; (80220c4 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 802208a:	881b      	ldrh	r3, [r3, #0]
 802208c:	f240 52db 	movw	r2, #1499	; 0x5db
 8022090:	4293      	cmp	r3, r2
 8022092:	d80b      	bhi.n	80220ac <_ZN10LineSensor16CheckCalibrationEv+0x9c>
        {
            timer++;
 8022094:	4b0b      	ldr	r3, [pc, #44]	; (80220c4 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 8022096:	881b      	ldrh	r3, [r3, #0]
 8022098:	3301      	adds	r3, #1
 802209a:	b29a      	uxth	r2, r3
 802209c:	4b09      	ldr	r3, [pc, #36]	; (80220c4 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 802209e:	801a      	strh	r2, [r3, #0]
            result = false;
 80220a0:	2300      	movs	r3, #0
 80220a2:	73fb      	strb	r3, [r7, #15]
 80220a4:	e002      	b.n	80220ac <_ZN10LineSensor16CheckCalibrationEv+0x9c>
        }
    }
    else timer = 0;
 80220a6:	4b07      	ldr	r3, [pc, #28]	; (80220c4 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 80220a8:	2200      	movs	r2, #0
 80220aa:	801a      	strh	r2, [r3, #0]
    
    return result;
 80220ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80220ae:	4618      	mov	r0, r3
 80220b0:	3714      	adds	r7, #20
 80220b2:	46bd      	mov	sp, r7
 80220b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220b8:	4770      	bx	lr
 80220ba:	bf00      	nop
 80220bc:	20000040 	.word	0x20000040
 80220c0:	2000005c 	.word	0x2000005c
 80220c4:	2000003e 	.word	0x2000003e

080220c8 <_ZN9LineTraceC1EP10LineSensor>:
#include "line_trace.hpp"

LineTrace::LineTrace(LineSensor *line_sensor) : integral_error_(0)
 80220c8:	b480      	push	{r7}
 80220ca:	b083      	sub	sp, #12
 80220cc:	af00      	add	r7, sp, #0
 80220ce:	6078      	str	r0, [r7, #4]
 80220d0:	6039      	str	r1, [r7, #0]
 80220d2:	687b      	ldr	r3, [r7, #4]
 80220d4:	f04f 0200 	mov.w	r2, #0
 80220d8:	601a      	str	r2, [r3, #0]
{
    line_sensor_ = line_sensor;
 80220da:	687b      	ldr	r3, [r7, #4]
 80220dc:	683a      	ldr	r2, [r7, #0]
 80220de:	605a      	str	r2, [r3, #4]
}
 80220e0:	687b      	ldr	r3, [r7, #4]
 80220e2:	4618      	mov	r0, r3
 80220e4:	370c      	adds	r7, #12
 80220e6:	46bd      	mov	sp, r7
 80220e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220ec:	4770      	bx	lr
	...

080220f0 <_ZN9LineTrace13LineTraceOnlyEv>:

float LineTrace::LineTraceOnly()
{
 80220f0:	b580      	push	{r7, lr}
 80220f2:	b086      	sub	sp, #24
 80220f4:	af00      	add	r7, sp, #0
 80220f6:	6078      	str	r0, [r7, #4]
    float p_gain = LINE_ONLY_P_GAIN;
 80220f8:	4b0b      	ldr	r3, [pc, #44]	; (8022128 <_ZN9LineTrace13LineTraceOnlyEv+0x38>)
 80220fa:	617b      	str	r3, [r7, #20]
    float i_gain = LINE_ONLY_I_GAIN;
 80220fc:	f04f 0300 	mov.w	r3, #0
 8022100:	613b      	str	r3, [r7, #16]
    float d_gain = LINE_ONLY_D_GAIN;
 8022102:	f04f 0300 	mov.w	r3, #0
 8022106:	60fb      	str	r3, [r7, #12]

    return PidControl(p_gain, i_gain, d_gain);
 8022108:	ed97 1a03 	vldr	s2, [r7, #12]
 802210c:	edd7 0a04 	vldr	s1, [r7, #16]
 8022110:	ed97 0a05 	vldr	s0, [r7, #20]
 8022114:	6878      	ldr	r0, [r7, #4]
 8022116:	f000 f84f 	bl	80221b8 <_ZN9LineTrace10PidControlEfff>
 802211a:	eef0 7a40 	vmov.f32	s15, s0
}
 802211e:	eeb0 0a67 	vmov.f32	s0, s15
 8022122:	3718      	adds	r7, #24
 8022124:	46bd      	mov	sp, r7
 8022126:	bd80      	pop	{r7, pc}
 8022128:	38d1b717 	.word	0x38d1b717

0802212c <_ZN9LineTrace16DeterminePidGainEf>:

float LineTrace::DeterminePidGain(float target_velocity)
{
 802212c:	b580      	push	{r7, lr}
 802212e:	b086      	sub	sp, #24
 8022130:	af00      	add	r7, sp, #0
 8022132:	6078      	str	r0, [r7, #4]
 8022134:	ed87 0a00 	vstr	s0, [r7]
    float p_gain, i_gain, d_gain;

    if(target_velocity < TARGET_VELOCITY_0)
 8022138:	edd7 7a00 	vldr	s15, [r7]
 802213c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8022140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022148:	d508      	bpl.n	802215c <_ZN9LineTrace16DeterminePidGainEf+0x30>
    {
        p_gain = LINE_P_GAIN_0;
 802214a:	4b1a      	ldr	r3, [pc, #104]	; (80221b4 <_ZN9LineTrace16DeterminePidGainEf+0x88>)
 802214c:	617b      	str	r3, [r7, #20]
        i_gain = LINE_I_GAIN_0;
 802214e:	f04f 0300 	mov.w	r3, #0
 8022152:	613b      	str	r3, [r7, #16]
        d_gain = LINE_D_GAIN_0;
 8022154:	f04f 0300 	mov.w	r3, #0
 8022158:	60fb      	str	r3, [r7, #12]
 802215a:	e01b      	b.n	8022194 <_ZN9LineTrace16DeterminePidGainEf+0x68>
    }
    else if(target_velocity < TARGET_VELOCITY_1)
 802215c:	edd7 7a00 	vldr	s15, [r7]
 8022160:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8022164:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802216c:	d509      	bpl.n	8022182 <_ZN9LineTrace16DeterminePidGainEf+0x56>
    {
        p_gain = LINE_P_GAIN_1;
 802216e:	f04f 0300 	mov.w	r3, #0
 8022172:	617b      	str	r3, [r7, #20]
        i_gain = LINE_I_GAIN_1;
 8022174:	f04f 0300 	mov.w	r3, #0
 8022178:	613b      	str	r3, [r7, #16]
        d_gain = LINE_D_GAIN_1;
 802217a:	f04f 0300 	mov.w	r3, #0
 802217e:	60fb      	str	r3, [r7, #12]
 8022180:	e008      	b.n	8022194 <_ZN9LineTrace16DeterminePidGainEf+0x68>
    }
    else // Error handler
    {
        p_gain = 0;
 8022182:	f04f 0300 	mov.w	r3, #0
 8022186:	617b      	str	r3, [r7, #20]
        i_gain = 0;
 8022188:	f04f 0300 	mov.w	r3, #0
 802218c:	613b      	str	r3, [r7, #16]
        d_gain = 0;
 802218e:	f04f 0300 	mov.w	r3, #0
 8022192:	60fb      	str	r3, [r7, #12]
    }

    return PidControl(p_gain, i_gain, d_gain);
 8022194:	ed97 1a03 	vldr	s2, [r7, #12]
 8022198:	edd7 0a04 	vldr	s1, [r7, #16]
 802219c:	ed97 0a05 	vldr	s0, [r7, #20]
 80221a0:	6878      	ldr	r0, [r7, #4]
 80221a2:	f000 f809 	bl	80221b8 <_ZN9LineTrace10PidControlEfff>
 80221a6:	eef0 7a40 	vmov.f32	s15, s0
}
 80221aa:	eeb0 0a67 	vmov.f32	s0, s15
 80221ae:	3718      	adds	r7, #24
 80221b0:	46bd      	mov	sp, r7
 80221b2:	bd80      	pop	{r7, pc}
 80221b4:	3a03126f 	.word	0x3a03126f

080221b8 <_ZN9LineTrace10PidControlEfff>:

float LineTrace::PidControl(float p_gain, float i_gain, float d_gain)
{
 80221b8:	b590      	push	{r4, r7, lr}
 80221ba:	b08b      	sub	sp, #44	; 0x2c
 80221bc:	af00      	add	r7, sp, #0
 80221be:	60f8      	str	r0, [r7, #12]
 80221c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80221c4:	edc7 0a01 	vstr	s1, [r7, #4]
 80221c8:	ed87 1a00 	vstr	s2, [r7]
    static float pre_error = line_sensor_->LeftRightDifference();
 80221cc:	4b52      	ldr	r3, [pc, #328]	; (8022318 <_ZN9LineTrace10PidControlEfff+0x160>)
 80221ce:	781b      	ldrb	r3, [r3, #0]
 80221d0:	f3bf 8f5b 	dmb	ish
 80221d4:	b2db      	uxtb	r3, r3
 80221d6:	f003 0301 	and.w	r3, r3, #1
 80221da:	2b00      	cmp	r3, #0
 80221dc:	bf0c      	ite	eq
 80221de:	2301      	moveq	r3, #1
 80221e0:	2300      	movne	r3, #0
 80221e2:	b2db      	uxtb	r3, r3
 80221e4:	2b00      	cmp	r3, #0
 80221e6:	d017      	beq.n	8022218 <_ZN9LineTrace10PidControlEfff+0x60>
 80221e8:	484b      	ldr	r0, [pc, #300]	; (8022318 <_ZN9LineTrace10PidControlEfff+0x160>)
 80221ea:	f008 fc65 	bl	802aab8 <__cxa_guard_acquire>
 80221ee:	4603      	mov	r3, r0
 80221f0:	2b00      	cmp	r3, #0
 80221f2:	bf14      	ite	ne
 80221f4:	2301      	movne	r3, #1
 80221f6:	2300      	moveq	r3, #0
 80221f8:	b2db      	uxtb	r3, r3
 80221fa:	2b00      	cmp	r3, #0
 80221fc:	d00c      	beq.n	8022218 <_ZN9LineTrace10PidControlEfff+0x60>
 80221fe:	68fb      	ldr	r3, [r7, #12]
 8022200:	685b      	ldr	r3, [r3, #4]
 8022202:	4618      	mov	r0, r3
 8022204:	f7ff fea0 	bl	8021f48 <_ZN10LineSensor19LeftRightDifferenceEv>
 8022208:	eef0 7a40 	vmov.f32	s15, s0
 802220c:	4b43      	ldr	r3, [pc, #268]	; (802231c <_ZN9LineTrace10PidControlEfff+0x164>)
 802220e:	edc3 7a00 	vstr	s15, [r3]
 8022212:	4841      	ldr	r0, [pc, #260]	; (8022318 <_ZN9LineTrace10PidControlEfff+0x160>)
 8022214:	f008 fc5c 	bl	802aad0 <__cxa_guard_release>
    float error, differential_error, integral_error;
    float p, d, i;

    error = line_sensor_->LeftRightDifference();
 8022218:	68fb      	ldr	r3, [r7, #12]
 802221a:	685b      	ldr	r3, [r3, #4]
 802221c:	4618      	mov	r0, r3
 802221e:	f7ff fe93 	bl	8021f48 <_ZN10LineSensor19LeftRightDifferenceEv>
 8022222:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    differential_error = (error - pre_error) / TIM6_PERIOD_S;
 8022226:	4b3d      	ldr	r3, [pc, #244]	; (802231c <_ZN9LineTrace10PidControlEfff+0x164>)
 8022228:	edd3 7a00 	vldr	s15, [r3]
 802222c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8022230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8022234:	ee17 0a90 	vmov	r0, s15
 8022238:	f7fe f866 	bl	8020308 <__aeabi_f2d>
 802223c:	a334      	add	r3, pc, #208	; (adr r3, 8022310 <_ZN9LineTrace10PidControlEfff+0x158>)
 802223e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022242:	f7fe f9e3 	bl	802060c <__aeabi_ddiv>
 8022246:	4603      	mov	r3, r0
 8022248:	460c      	mov	r4, r1
 802224a:	4618      	mov	r0, r3
 802224c:	4621      	mov	r1, r4
 802224e:	f7fe fb4d 	bl	80208ec <__aeabi_d2f>
 8022252:	4603      	mov	r3, r0
 8022254:	623b      	str	r3, [r7, #32]
    integral_error = (error + pre_error) / 2.0 * TIM6_PERIOD_S;
 8022256:	4b31      	ldr	r3, [pc, #196]	; (802231c <_ZN9LineTrace10PidControlEfff+0x164>)
 8022258:	ed93 7a00 	vldr	s14, [r3]
 802225c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8022260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022264:	ee17 0a90 	vmov	r0, s15
 8022268:	f7fe f84e 	bl	8020308 <__aeabi_f2d>
 802226c:	f04f 0200 	mov.w	r2, #0
 8022270:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8022274:	f7fe f9ca 	bl	802060c <__aeabi_ddiv>
 8022278:	4603      	mov	r3, r0
 802227a:	460c      	mov	r4, r1
 802227c:	4618      	mov	r0, r3
 802227e:	4621      	mov	r1, r4
 8022280:	a323      	add	r3, pc, #140	; (adr r3, 8022310 <_ZN9LineTrace10PidControlEfff+0x158>)
 8022282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022286:	f7fe f897 	bl	80203b8 <__aeabi_dmul>
 802228a:	4603      	mov	r3, r0
 802228c:	460c      	mov	r4, r1
 802228e:	4618      	mov	r0, r3
 8022290:	4621      	mov	r1, r4
 8022292:	f7fe fb2b 	bl	80208ec <__aeabi_d2f>
 8022296:	4603      	mov	r3, r0
 8022298:	61fb      	str	r3, [r7, #28]
    SetIntegralError(integral_error);
 802229a:	ed97 0a07 	vldr	s0, [r7, #28]
 802229e:	68f8      	ldr	r0, [r7, #12]
 80222a0:	f000 f844 	bl	802232c <_ZN9LineTrace16SetIntegralErrorEf>

    p = p_gain * error;
 80222a4:	ed97 7a02 	vldr	s14, [r7, #8]
 80222a8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80222ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80222b0:	edc7 7a06 	vstr	s15, [r7, #24]
    d = d_gain * differential_error;
 80222b4:	ed97 7a00 	vldr	s14, [r7]
 80222b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80222bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80222c0:	edc7 7a05 	vstr	s15, [r7, #20]
    i = i_gain * integral_error_;
 80222c4:	68fb      	ldr	r3, [r7, #12]
 80222c6:	edd3 7a00 	vldr	s15, [r3]
 80222ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80222ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80222d2:	edc7 7a04 	vstr	s15, [r7, #16]

#ifdef DEBUG_MODE
    g_trace_p = p;
 80222d6:	4a12      	ldr	r2, [pc, #72]	; (8022320 <_ZN9LineTrace10PidControlEfff+0x168>)
 80222d8:	69bb      	ldr	r3, [r7, #24]
 80222da:	6013      	str	r3, [r2, #0]
    g_trace_d = d;
 80222dc:	4a11      	ldr	r2, [pc, #68]	; (8022324 <_ZN9LineTrace10PidControlEfff+0x16c>)
 80222de:	697b      	ldr	r3, [r7, #20]
 80222e0:	6013      	str	r3, [r2, #0]
    g_trace_i = i;
 80222e2:	4a11      	ldr	r2, [pc, #68]	; (8022328 <_ZN9LineTrace10PidControlEfff+0x170>)
 80222e4:	693b      	ldr	r3, [r7, #16]
 80222e6:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    pre_error = error;
 80222e8:	4a0c      	ldr	r2, [pc, #48]	; (802231c <_ZN9LineTrace10PidControlEfff+0x164>)
 80222ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80222ec:	6013      	str	r3, [r2, #0]

    return p + d + i;
 80222ee:	ed97 7a06 	vldr	s14, [r7, #24]
 80222f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80222f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80222fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80222fe:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8022302:	eeb0 0a67 	vmov.f32	s0, s15
 8022306:	372c      	adds	r7, #44	; 0x2c
 8022308:	46bd      	mov	sp, r7
 802230a:	bd90      	pop	{r4, r7, pc}
 802230c:	f3af 8000 	nop.w
 8022310:	47ae147b 	.word	0x47ae147b
 8022314:	3f547ae1 	.word	0x3f547ae1
 8022318:	2000007c 	.word	0x2000007c
 802231c:	20000078 	.word	0x20000078
 8022320:	200002a8 	.word	0x200002a8
 8022324:	200002b0 	.word	0x200002b0
 8022328:	200002ac 	.word	0x200002ac

0802232c <_ZN9LineTrace16SetIntegralErrorEf>:

void LineTrace::SetIntegralError(float integral_error)
{
 802232c:	b480      	push	{r7}
 802232e:	b083      	sub	sp, #12
 8022330:	af00      	add	r7, sp, #0
 8022332:	6078      	str	r0, [r7, #4]
 8022334:	ed87 0a00 	vstr	s0, [r7]
    integral_error_ += integral_error;
 8022338:	687b      	ldr	r3, [r7, #4]
 802233a:	ed93 7a00 	vldr	s14, [r3]
 802233e:	edd7 7a00 	vldr	s15, [r7]
 8022342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022346:	687b      	ldr	r3, [r7, #4]
 8022348:	edc3 7a00 	vstr	s15, [r3]
}
 802234c:	bf00      	nop
 802234e:	370c      	adds	r7, #12
 8022350:	46bd      	mov	sp, r7
 8022352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022356:	4770      	bx	lr

08022358 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8022358:	b480      	push	{r7}
 802235a:	b083      	sub	sp, #12
 802235c:	af00      	add	r7, sp, #0
 802235e:	ed87 0a01 	vstr	s0, [r7, #4]
 8022362:	edd7 7a01 	vldr	s15, [r7, #4]
 8022366:	eef0 7ae7 	vabs.f32	s15, s15
 802236a:	eeb0 0a67 	vmov.f32	s0, s15
 802236e:	370c      	adds	r7, #12
 8022370:	46bd      	mov	sp, r7
 8022372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022376:	4770      	bx	lr

08022378 <_ZN6LoggerC1Ev>:
#include "logger.hpp"
#include <math.h>
#include <string.h>

Logger::Logger() {}
 8022378:	b580      	push	{r7, lr}
 802237a:	b082      	sub	sp, #8
 802237c:	af00      	add	r7, sp, #0
 802237e:	6078      	str	r0, [r7, #4]
 8022380:	687b      	ldr	r3, [r7, #4]
 8022382:	33e8      	adds	r3, #232	; 0xe8
 8022384:	4618      	mov	r0, r3
 8022386:	f7fe fcc5 	bl	8020d14 <_ZN7EncoderC1Ev>
 802238a:	687b      	ldr	r3, [r7, #4]
 802238c:	33f8      	adds	r3, #248	; 0xf8
 802238e:	4618      	mov	r0, r3
 8022390:	f7fe ffa2 	bl	80212d8 <_ZN8Iim42652C1Ev>
 8022394:	687b      	ldr	r3, [r7, #4]
 8022396:	f503 7380 	add.w	r3, r3, #256	; 0x100
 802239a:	4618      	mov	r0, r3
 802239c:	f003 f978 	bl	8025690 <_ZN10SideSensorC1Ev>
 80223a0:	687b      	ldr	r3, [r7, #4]
 80223a2:	4618      	mov	r0, r3
 80223a4:	3708      	adds	r7, #8
 80223a6:	46bd      	mov	sp, r7
 80223a8:	bd80      	pop	{r7, pc}
 80223aa:	0000      	movs	r0, r0
 80223ac:	0000      	movs	r0, r0
	...

080223b0 <_ZN6Logger7LoggingEh>:
    side_sensor_ = side_sensor;
}
*/

void Logger::Logging(uint8_t process_complete)
{
 80223b0:	b5b0      	push	{r4, r5, r7, lr}
 80223b2:	b08c      	sub	sp, #48	; 0x30
 80223b4:	af00      	add	r7, sp, #0
 80223b6:	6078      	str	r0, [r7, #4]
 80223b8:	460b      	mov	r3, r1
 80223ba:	70fb      	strb	r3, [r7, #3]
    float distance = encoder.GetDistanceStack();
 80223bc:	687b      	ldr	r3, [r7, #4]
 80223be:	33e8      	adds	r3, #232	; 0xe8
 80223c0:	4618      	mov	r0, r3
 80223c2:	f7fe fd92 	bl	8020eea <_ZN7Encoder16GetDistanceStackEv>
 80223c6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

    if(distance < LOGGING_CONST_DISTANCE) return;
 80223ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80223ce:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80223d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80223d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80223da:	f100 81f5 	bmi.w	80227c8 <_ZN6Logger7LoggingEh+0x418>
    encoder.ResetDistanceStack();
 80223de:	687b      	ldr	r3, [r7, #4]
 80223e0:	33e8      	adds	r3, #232	; 0xe8
 80223e2:	4618      	mov	r0, r3
 80223e4:	f7fe fd64 	bl	8020eb0 <_ZN7Encoder18ResetDistanceStackEv>

    static uint16_t now_address = 0; // flash address count. (0 ~ 6199)
    static uint16_t log_index = 0;   // Count up when interrupt.

    /* Mapping data of distance */
    const_distance_log_[log_index] = distance;
 80223e8:	4bb3      	ldr	r3, [pc, #716]	; (80226b8 <_ZN6Logger7LoggingEh+0x308>)
 80223ea:	881b      	ldrh	r3, [r3, #0]
 80223ec:	687a      	ldr	r2, [r7, #4]
 80223ee:	009b      	lsls	r3, r3, #2
 80223f0:	4413      	add	r3, r2
 80223f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80223f4:	601a      	str	r2, [r3, #0]

    /* Mapping data of radian */
    double degree = iim_42652.GetDegreeStackZ();
 80223f6:	687b      	ldr	r3, [r7, #4]
 80223f8:	33f8      	adds	r3, #248	; 0xf8
 80223fa:	4618      	mov	r0, r3
 80223fc:	f7ff f970 	bl	80216e0 <_ZN8Iim4265215GetDegreeStackZEv>
 8022400:	ed87 0b06 	vstr	d0, [r7, #24]
    float radian = static_cast<float>(degree * M_PI / 180.0);
 8022404:	a3aa      	add	r3, pc, #680	; (adr r3, 80226b0 <_ZN6Logger7LoggingEh+0x300>)
 8022406:	e9d3 2300 	ldrd	r2, r3, [r3]
 802240a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 802240e:	f7fd ffd3 	bl	80203b8 <__aeabi_dmul>
 8022412:	4603      	mov	r3, r0
 8022414:	460c      	mov	r4, r1
 8022416:	4618      	mov	r0, r3
 8022418:	4621      	mov	r1, r4
 802241a:	f04f 0200 	mov.w	r2, #0
 802241e:	4ba7      	ldr	r3, [pc, #668]	; (80226bc <_ZN6Logger7LoggingEh+0x30c>)
 8022420:	f7fe f8f4 	bl	802060c <__aeabi_ddiv>
 8022424:	4603      	mov	r3, r0
 8022426:	460c      	mov	r4, r1
 8022428:	4618      	mov	r0, r3
 802242a:	4621      	mov	r1, r4
 802242c:	f7fe fa5e 	bl	80208ec <__aeabi_d2f>
 8022430:	4603      	mov	r3, r0
 8022432:	617b      	str	r3, [r7, #20]
    radian_log_[log_index] = radian;
 8022434:	4ba0      	ldr	r3, [pc, #640]	; (80226b8 <_ZN6Logger7LoggingEh+0x308>)
 8022436:	881b      	ldrh	r3, [r3, #0]
 8022438:	687a      	ldr	r2, [r7, #4]
 802243a:	330a      	adds	r3, #10
 802243c:	009b      	lsls	r3, r3, #2
 802243e:	4413      	add	r3, r2
 8022440:	697a      	ldr	r2, [r7, #20]
 8022442:	601a      	str	r2, [r3, #0]
    iim_42652.ResetDegreeStackZ();
 8022444:	687b      	ldr	r3, [r7, #4]
 8022446:	33f8      	adds	r3, #248	; 0xf8
 8022448:	4618      	mov	r0, r3
 802244a:	f7ff f939 	bl	80216c0 <_ZN8Iim4265217ResetDegreeStackZEv>

    /* Various log */
    static uint8_t pre_corner_cnt = side_sensor.GetCornerMarkerCount();
 802244e:	4b9c      	ldr	r3, [pc, #624]	; (80226c0 <_ZN6Logger7LoggingEh+0x310>)
 8022450:	781b      	ldrb	r3, [r3, #0]
 8022452:	f3bf 8f5b 	dmb	ish
 8022456:	b2db      	uxtb	r3, r3
 8022458:	f003 0301 	and.w	r3, r3, #1
 802245c:	2b00      	cmp	r3, #0
 802245e:	bf0c      	ite	eq
 8022460:	2301      	moveq	r3, #1
 8022462:	2300      	movne	r3, #0
 8022464:	b2db      	uxtb	r3, r3
 8022466:	2b00      	cmp	r3, #0
 8022468:	d017      	beq.n	802249a <_ZN6Logger7LoggingEh+0xea>
 802246a:	4895      	ldr	r0, [pc, #596]	; (80226c0 <_ZN6Logger7LoggingEh+0x310>)
 802246c:	f008 fb24 	bl	802aab8 <__cxa_guard_acquire>
 8022470:	4603      	mov	r3, r0
 8022472:	2b00      	cmp	r3, #0
 8022474:	bf14      	ite	ne
 8022476:	2301      	movne	r3, #1
 8022478:	2300      	moveq	r3, #0
 802247a:	b2db      	uxtb	r3, r3
 802247c:	2b00      	cmp	r3, #0
 802247e:	d00c      	beq.n	802249a <_ZN6Logger7LoggingEh+0xea>
 8022480:	687b      	ldr	r3, [r7, #4]
 8022482:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022486:	4618      	mov	r0, r3
 8022488:	f003 fb9d 	bl	8025bc6 <_ZN10SideSensor20GetCornerMarkerCountEv>
 802248c:	4603      	mov	r3, r0
 802248e:	461a      	mov	r2, r3
 8022490:	4b8c      	ldr	r3, [pc, #560]	; (80226c4 <_ZN6Logger7LoggingEh+0x314>)
 8022492:	701a      	strb	r2, [r3, #0]
 8022494:	488a      	ldr	r0, [pc, #552]	; (80226c0 <_ZN6Logger7LoggingEh+0x310>)
 8022496:	f008 fb1b 	bl	802aad0 <__cxa_guard_release>
    static uint8_t pre_cross_cnt  = side_sensor.GetCrossLineCount();
 802249a:	4b8b      	ldr	r3, [pc, #556]	; (80226c8 <_ZN6Logger7LoggingEh+0x318>)
 802249c:	781b      	ldrb	r3, [r3, #0]
 802249e:	f3bf 8f5b 	dmb	ish
 80224a2:	b2db      	uxtb	r3, r3
 80224a4:	f003 0301 	and.w	r3, r3, #1
 80224a8:	2b00      	cmp	r3, #0
 80224aa:	bf0c      	ite	eq
 80224ac:	2301      	moveq	r3, #1
 80224ae:	2300      	movne	r3, #0
 80224b0:	b2db      	uxtb	r3, r3
 80224b2:	2b00      	cmp	r3, #0
 80224b4:	d017      	beq.n	80224e6 <_ZN6Logger7LoggingEh+0x136>
 80224b6:	4884      	ldr	r0, [pc, #528]	; (80226c8 <_ZN6Logger7LoggingEh+0x318>)
 80224b8:	f008 fafe 	bl	802aab8 <__cxa_guard_acquire>
 80224bc:	4603      	mov	r3, r0
 80224be:	2b00      	cmp	r3, #0
 80224c0:	bf14      	ite	ne
 80224c2:	2301      	movne	r3, #1
 80224c4:	2300      	moveq	r3, #0
 80224c6:	b2db      	uxtb	r3, r3
 80224c8:	2b00      	cmp	r3, #0
 80224ca:	d00c      	beq.n	80224e6 <_ZN6Logger7LoggingEh+0x136>
 80224cc:	687b      	ldr	r3, [r7, #4]
 80224ce:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80224d2:	4618      	mov	r0, r3
 80224d4:	f003 fb83 	bl	8025bde <_ZN10SideSensor17GetCrossLineCountEv>
 80224d8:	4603      	mov	r3, r0
 80224da:	461a      	mov	r2, r3
 80224dc:	4b7b      	ldr	r3, [pc, #492]	; (80226cc <_ZN6Logger7LoggingEh+0x31c>)
 80224de:	701a      	strb	r2, [r3, #0]
 80224e0:	4879      	ldr	r0, [pc, #484]	; (80226c8 <_ZN6Logger7LoggingEh+0x318>)
 80224e2:	f008 faf5 	bl	802aad0 <__cxa_guard_release>
    uint8_t corner_cnt = side_sensor.GetCornerMarkerCount();
 80224e6:	687b      	ldr	r3, [r7, #4]
 80224e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80224ec:	4618      	mov	r0, r3
 80224ee:	f003 fb6a 	bl	8025bc6 <_ZN10SideSensor20GetCornerMarkerCountEv>
 80224f2:	4603      	mov	r3, r0
 80224f4:	74fb      	strb	r3, [r7, #19]
    uint8_t cross_cnt  = side_sensor.GetCrossLineCount();
 80224f6:	687b      	ldr	r3, [r7, #4]
 80224f8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80224fc:	4618      	mov	r0, r3
 80224fe:	f003 fb6e 	bl	8025bde <_ZN10SideSensor17GetCrossLineCountEv>
 8022502:	4603      	mov	r3, r0
 8022504:	74bb      	strb	r3, [r7, #18]
    uint16_t various_buff = 0;
 8022506:	2300      	movs	r3, #0
 8022508:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(process_complete != 0)        various_buff |= 0x0004;
 802250a:	78fb      	ldrb	r3, [r7, #3]
 802250c:	2b00      	cmp	r3, #0
 802250e:	d003      	beq.n	8022518 <_ZN6Logger7LoggingEh+0x168>
 8022510:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8022512:	f043 0304 	orr.w	r3, r3, #4
 8022516:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(pre_corner_cnt != corner_cnt) various_buff |= 0x0002;
 8022518:	4b6a      	ldr	r3, [pc, #424]	; (80226c4 <_ZN6Logger7LoggingEh+0x314>)
 802251a:	781b      	ldrb	r3, [r3, #0]
 802251c:	7cfa      	ldrb	r2, [r7, #19]
 802251e:	429a      	cmp	r2, r3
 8022520:	d003      	beq.n	802252a <_ZN6Logger7LoggingEh+0x17a>
 8022522:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8022524:	f043 0302 	orr.w	r3, r3, #2
 8022528:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if(pre_cross_cnt != cross_cnt)   various_buff |= 0x0001;
 802252a:	4b68      	ldr	r3, [pc, #416]	; (80226cc <_ZN6Logger7LoggingEh+0x31c>)
 802252c:	781b      	ldrb	r3, [r3, #0]
 802252e:	7cba      	ldrb	r2, [r7, #18]
 8022530:	429a      	cmp	r2, r3
 8022532:	d003      	beq.n	802253c <_ZN6Logger7LoggingEh+0x18c>
 8022534:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8022536:	f043 0301 	orr.w	r3, r3, #1
 802253a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    pre_corner_cnt = corner_cnt;
 802253c:	4a61      	ldr	r2, [pc, #388]	; (80226c4 <_ZN6Logger7LoggingEh+0x314>)
 802253e:	7cfb      	ldrb	r3, [r7, #19]
 8022540:	7013      	strb	r3, [r2, #0]
    pre_cross_cnt  = cross_cnt;
 8022542:	4a62      	ldr	r2, [pc, #392]	; (80226cc <_ZN6Logger7LoggingEh+0x31c>)
 8022544:	7cbb      	ldrb	r3, [r7, #18]
 8022546:	7013      	strb	r3, [r2, #0]
    various_log_[log_index] = various_buff;
 8022548:	4b5b      	ldr	r3, [pc, #364]	; (80226b8 <_ZN6Logger7LoggingEh+0x308>)
 802254a:	881b      	ldrh	r3, [r3, #0]
 802254c:	461a      	mov	r2, r3
 802254e:	687b      	ldr	r3, [r7, #4]
 8022550:	3228      	adds	r2, #40	; 0x28
 8022552:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8022554:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    /* Copy periodic log */
    if(log_index == LAST_LOG_INDEX)
 8022558:	4b57      	ldr	r3, [pc, #348]	; (80226b8 <_ZN6Logger7LoggingEh+0x308>)
 802255a:	881b      	ldrh	r3, [r3, #0]
 802255c:	2b09      	cmp	r3, #9
 802255e:	d120      	bne.n	80225a2 <_ZN6Logger7LoggingEh+0x1f2>
    {
        log_index = 0;
 8022560:	4b55      	ldr	r3, [pc, #340]	; (80226b8 <_ZN6Logger7LoggingEh+0x308>)
 8022562:	2200      	movs	r2, #0
 8022564:	801a      	strh	r2, [r3, #0]
        memcpy(const_distance_copy_, const_distance_log_, (4 * NUM_OF_LOG));
 8022566:	687b      	ldr	r3, [r7, #4]
 8022568:	3364      	adds	r3, #100	; 0x64
 802256a:	6879      	ldr	r1, [r7, #4]
 802256c:	2228      	movs	r2, #40	; 0x28
 802256e:	4618      	mov	r0, r3
 8022570:	f008 fad6 	bl	802ab20 <memcpy>
        memcpy(radian_copy_, radian_log_, (4 * NUM_OF_LOG));
 8022574:	687b      	ldr	r3, [r7, #4]
 8022576:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 802257a:	687b      	ldr	r3, [r7, #4]
 802257c:	3328      	adds	r3, #40	; 0x28
 802257e:	2228      	movs	r2, #40	; 0x28
 8022580:	4619      	mov	r1, r3
 8022582:	f008 facd 	bl	802ab20 <memcpy>
        memcpy(various_copy_, various_log_, (2 * NUM_OF_LOG));
 8022586:	687b      	ldr	r3, [r7, #4]
 8022588:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 802258c:	687b      	ldr	r3, [r7, #4]
 802258e:	3350      	adds	r3, #80	; 0x50
 8022590:	2214      	movs	r2, #20
 8022592:	4619      	mov	r1, r3
 8022594:	f008 fac4 	bl	802ab20 <memcpy>
        periodic_write_enable_ = 1;
 8022598:	687b      	ldr	r3, [r7, #4]
 802259a:	2201      	movs	r2, #1
 802259c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80225a0:	e005      	b.n	80225ae <_ZN6Logger7LoggingEh+0x1fe>
    }
    else log_index++;
 80225a2:	4b45      	ldr	r3, [pc, #276]	; (80226b8 <_ZN6Logger7LoggingEh+0x308>)
 80225a4:	881b      	ldrh	r3, [r3, #0]
 80225a6:	3301      	adds	r3, #1
 80225a8:	b29a      	uxth	r2, r3
 80225aa:	4b43      	ldr	r3, [pc, #268]	; (80226b8 <_ZN6Logger7LoggingEh+0x308>)
 80225ac:	801a      	strh	r2, [r3, #0]

    /* Distance correction */
    uint16_t correction_address = now_address;
 80225ae:	4b48      	ldr	r3, [pc, #288]	; (80226d0 <_ZN6Logger7LoggingEh+0x320>)
 80225b0:	881b      	ldrh	r3, [r3, #0]
 80225b2:	823b      	strh	r3, [r7, #16]
    float excess = excess_stack_;
 80225b4:	687b      	ldr	r3, [r7, #4]
 80225b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80225ba:	60fb      	str	r3, [r7, #12]
    excess += distance - LOGGING_CONST_DISTANCE;
 80225bc:	68f8      	ldr	r0, [r7, #12]
 80225be:	f7fd fea3 	bl	8020308 <__aeabi_f2d>
 80225c2:	4604      	mov	r4, r0
 80225c4:	460d      	mov	r5, r1
 80225c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80225c8:	f7fd fe9e 	bl	8020308 <__aeabi_f2d>
 80225cc:	f04f 0200 	mov.w	r2, #0
 80225d0:	4b40      	ldr	r3, [pc, #256]	; (80226d4 <_ZN6Logger7LoggingEh+0x324>)
 80225d2:	f7fd fd39 	bl	8020048 <__aeabi_dsub>
 80225d6:	4602      	mov	r2, r0
 80225d8:	460b      	mov	r3, r1
 80225da:	4620      	mov	r0, r4
 80225dc:	4629      	mov	r1, r5
 80225de:	f7fd fd35 	bl	802004c <__adddf3>
 80225e2:	4603      	mov	r3, r0
 80225e4:	460c      	mov	r4, r1
 80225e6:	4618      	mov	r0, r3
 80225e8:	4621      	mov	r1, r4
 80225ea:	f7fe f97f 	bl	80208ec <__aeabi_d2f>
 80225ee:	4603      	mov	r3, r0
 80225f0:	60fb      	str	r3, [r7, #12]
    if(excess > LOGGING_CONST_DISTANCE)
 80225f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80225f6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80225fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80225fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022602:	dd6b      	ble.n	80226dc <_ZN6Logger7LoggingEh+0x32c>
    {
        const_distance_log_[log_index] = excess;
 8022604:	4b2c      	ldr	r3, [pc, #176]	; (80226b8 <_ZN6Logger7LoggingEh+0x308>)
 8022606:	881b      	ldrh	r3, [r3, #0]
 8022608:	687a      	ldr	r2, [r7, #4]
 802260a:	009b      	lsls	r3, r3, #2
 802260c:	4413      	add	r3, r2
 802260e:	68fa      	ldr	r2, [r7, #12]
 8022610:	601a      	str	r2, [r3, #0]
        radian_log_[log_index] = radian;
 8022612:	4b29      	ldr	r3, [pc, #164]	; (80226b8 <_ZN6Logger7LoggingEh+0x308>)
 8022614:	881b      	ldrh	r3, [r3, #0]
 8022616:	687a      	ldr	r2, [r7, #4]
 8022618:	330a      	adds	r3, #10
 802261a:	009b      	lsls	r3, r3, #2
 802261c:	4413      	add	r3, r2
 802261e:	697a      	ldr	r2, [r7, #20]
 8022620:	601a      	str	r2, [r3, #0]
        various_log_[log_index] = VARIOUS_LOG_DATA_WHEN_COPY;
 8022622:	4b25      	ldr	r3, [pc, #148]	; (80226b8 <_ZN6Logger7LoggingEh+0x308>)
 8022624:	881b      	ldrh	r3, [r3, #0]
 8022626:	461a      	mov	r2, r3
 8022628:	687b      	ldr	r3, [r7, #4]
 802262a:	3228      	adds	r2, #40	; 0x28
 802262c:	f24f 01f0 	movw	r1, #61680	; 0xf0f0
 8022630:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        excess_stack_ = excess - LOGGING_CONST_DISTANCE;
 8022634:	edd7 7a03 	vldr	s15, [r7, #12]
 8022638:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 802263c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022640:	687b      	ldr	r3, [r7, #4]
 8022642:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
        now_address++;
 8022646:	4b22      	ldr	r3, [pc, #136]	; (80226d0 <_ZN6Logger7LoggingEh+0x320>)
 8022648:	881b      	ldrh	r3, [r3, #0]
 802264a:	3301      	adds	r3, #1
 802264c:	b29a      	uxth	r2, r3
 802264e:	4b20      	ldr	r3, [pc, #128]	; (80226d0 <_ZN6Logger7LoggingEh+0x320>)
 8022650:	801a      	strh	r2, [r3, #0]

        /* Copy periodic log */
        if(log_index == LAST_LOG_INDEX)
 8022652:	4b19      	ldr	r3, [pc, #100]	; (80226b8 <_ZN6Logger7LoggingEh+0x308>)
 8022654:	881b      	ldrh	r3, [r3, #0]
 8022656:	2b09      	cmp	r3, #9
 8022658:	d120      	bne.n	802269c <_ZN6Logger7LoggingEh+0x2ec>
        {
            log_index = 0;
 802265a:	4b17      	ldr	r3, [pc, #92]	; (80226b8 <_ZN6Logger7LoggingEh+0x308>)
 802265c:	2200      	movs	r2, #0
 802265e:	801a      	strh	r2, [r3, #0]
            memcpy(const_distance_copy_, const_distance_log_, (4 * NUM_OF_LOG));
 8022660:	687b      	ldr	r3, [r7, #4]
 8022662:	3364      	adds	r3, #100	; 0x64
 8022664:	6879      	ldr	r1, [r7, #4]
 8022666:	2228      	movs	r2, #40	; 0x28
 8022668:	4618      	mov	r0, r3
 802266a:	f008 fa59 	bl	802ab20 <memcpy>
            memcpy(radian_copy_, radian_log_, (4 * NUM_OF_LOG));
 802266e:	687b      	ldr	r3, [r7, #4]
 8022670:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 8022674:	687b      	ldr	r3, [r7, #4]
 8022676:	3328      	adds	r3, #40	; 0x28
 8022678:	2228      	movs	r2, #40	; 0x28
 802267a:	4619      	mov	r1, r3
 802267c:	f008 fa50 	bl	802ab20 <memcpy>
            memcpy(various_copy_, various_log_, (2 * NUM_OF_LOG));
 8022680:	687b      	ldr	r3, [r7, #4]
 8022682:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 8022686:	687b      	ldr	r3, [r7, #4]
 8022688:	3350      	adds	r3, #80	; 0x50
 802268a:	2214      	movs	r2, #20
 802268c:	4619      	mov	r1, r3
 802268e:	f008 fa47 	bl	802ab20 <memcpy>
            periodic_write_enable_ = 1;
 8022692:	687b      	ldr	r3, [r7, #4]
 8022694:	2201      	movs	r2, #1
 8022696:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 802269a:	e023      	b.n	80226e4 <_ZN6Logger7LoggingEh+0x334>
        }
        else log_index++;
 802269c:	4b06      	ldr	r3, [pc, #24]	; (80226b8 <_ZN6Logger7LoggingEh+0x308>)
 802269e:	881b      	ldrh	r3, [r3, #0]
 80226a0:	3301      	adds	r3, #1
 80226a2:	b29a      	uxth	r2, r3
 80226a4:	4b04      	ldr	r3, [pc, #16]	; (80226b8 <_ZN6Logger7LoggingEh+0x308>)
 80226a6:	801a      	strh	r2, [r3, #0]
 80226a8:	e01c      	b.n	80226e4 <_ZN6Logger7LoggingEh+0x334>
 80226aa:	bf00      	nop
 80226ac:	f3af 8000 	nop.w
 80226b0:	54442d18 	.word	0x54442d18
 80226b4:	400921fb 	.word	0x400921fb
 80226b8:	20000082 	.word	0x20000082
 80226bc:	40668000 	.word	0x40668000
 80226c0:	20000088 	.word	0x20000088
 80226c4:	20000084 	.word	0x20000084
 80226c8:	20000090 	.word	0x20000090
 80226cc:	2000008c 	.word	0x2000008c
 80226d0:	20000080 	.word	0x20000080
 80226d4:	40340000 	.word	0x40340000
 80226d8:	43ca0000 	.word	0x43ca0000
    }
    else excess_stack_ = excess;
 80226dc:	687b      	ldr	r3, [r7, #4]
 80226de:	68fa      	ldr	r2, [r7, #12]
 80226e0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

    /* Accel position log */
    static uint16_t accel_straight_cnt = 0;
    static uint8_t accel_step = 0;
    if(fabs(encoder.AngularVelocity()) < STRAIGHT_BORDER_OMEGA)
 80226e4:	687b      	ldr	r3, [r7, #4]
 80226e6:	33e8      	adds	r3, #232	; 0xe8
 80226e8:	4618      	mov	r0, r3
 80226ea:	f7fe fc0d 	bl	8020f08 <_ZN7Encoder15AngularVelocityEv>
 80226ee:	eef0 7a40 	vmov.f32	s15, s0
 80226f2:	eeb0 0a67 	vmov.f32	s0, s15
 80226f6:	f7ff fe2f 	bl	8022358 <_ZSt4fabsf>
 80226fa:	eeb0 7a40 	vmov.f32	s14, s0
 80226fe:	ed5f 7a0a 	vldr	s15, [pc, #-40]	; 80226d8 <_ZN6Logger7LoggingEh+0x328>
 8022702:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802270a:	bf4c      	ite	mi
 802270c:	2301      	movmi	r3, #1
 802270e:	2300      	movpl	r3, #0
 8022710:	b2db      	uxtb	r3, r3
 8022712:	2b00      	cmp	r3, #0
 8022714:	d021      	beq.n	802275a <_ZN6Logger7LoggingEh+0x3aa>
    {
        accel_straight_cnt++;
 8022716:	4b2e      	ldr	r3, [pc, #184]	; (80227d0 <_ZN6Logger7LoggingEh+0x420>)
 8022718:	881b      	ldrh	r3, [r3, #0]
 802271a:	3301      	adds	r3, #1
 802271c:	b29a      	uxth	r2, r3
 802271e:	4b2c      	ldr	r3, [pc, #176]	; (80227d0 <_ZN6Logger7LoggingEh+0x420>)
 8022720:	801a      	strh	r2, [r3, #0]
        if(accel_straight_cnt >= CNT_OF_ACCEL_STEP_UP && accel_step < NUM_OF_ACCEL_STEP)
 8022722:	4b2b      	ldr	r3, [pc, #172]	; (80227d0 <_ZN6Logger7LoggingEh+0x420>)
 8022724:	881b      	ldrh	r3, [r3, #0]
 8022726:	2b07      	cmp	r3, #7
 8022728:	d947      	bls.n	80227ba <_ZN6Logger7LoggingEh+0x40a>
 802272a:	4b2a      	ldr	r3, [pc, #168]	; (80227d4 <_ZN6Logger7LoggingEh+0x424>)
 802272c:	781b      	ldrb	r3, [r3, #0]
 802272e:	2b04      	cmp	r3, #4
 8022730:	d843      	bhi.n	80227ba <_ZN6Logger7LoggingEh+0x40a>
        {
            accel_step++;
 8022732:	4b28      	ldr	r3, [pc, #160]	; (80227d4 <_ZN6Logger7LoggingEh+0x424>)
 8022734:	781b      	ldrb	r3, [r3, #0]
 8022736:	3301      	adds	r3, #1
 8022738:	b2da      	uxtb	r2, r3
 802273a:	4b26      	ldr	r3, [pc, #152]	; (80227d4 <_ZN6Logger7LoggingEh+0x424>)
 802273c:	701a      	strb	r2, [r3, #0]
            accel_address_[accel_step-1] = correction_address - CNT_OF_ACCEL_STEP_UP;
 802273e:	4b25      	ldr	r3, [pc, #148]	; (80227d4 <_ZN6Logger7LoggingEh+0x424>)
 8022740:	781b      	ldrb	r3, [r3, #0]
 8022742:	1e5a      	subs	r2, r3, #1
 8022744:	8a3b      	ldrh	r3, [r7, #16]
 8022746:	3b08      	subs	r3, #8
 8022748:	b299      	uxth	r1, r3
 802274a:	687b      	ldr	r3, [r7, #4]
 802274c:	3264      	adds	r2, #100	; 0x64
 802274e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            accel_straight_cnt = 0;
 8022752:	4b1f      	ldr	r3, [pc, #124]	; (80227d0 <_ZN6Logger7LoggingEh+0x420>)
 8022754:	2200      	movs	r2, #0
 8022756:	801a      	strh	r2, [r3, #0]
 8022758:	e02f      	b.n	80227ba <_ZN6Logger7LoggingEh+0x40a>
        }
    }
    else if(accel_step != 0)
 802275a:	4b1e      	ldr	r3, [pc, #120]	; (80227d4 <_ZN6Logger7LoggingEh+0x424>)
 802275c:	781b      	ldrb	r3, [r3, #0]
 802275e:	2b00      	cmp	r3, #0
 8022760:	d028      	beq.n	80227b4 <_ZN6Logger7LoggingEh+0x404>
    {
        for(int i = 1; i <= accel_step; i++)
 8022762:	2301      	movs	r3, #1
 8022764:	62bb      	str	r3, [r7, #40]	; 0x28
 8022766:	4b1b      	ldr	r3, [pc, #108]	; (80227d4 <_ZN6Logger7LoggingEh+0x424>)
 8022768:	781b      	ldrb	r3, [r3, #0]
 802276a:	461a      	mov	r2, r3
 802276c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802276e:	4293      	cmp	r3, r2
 8022770:	dc14      	bgt.n	802279c <_ZN6Logger7LoggingEh+0x3ec>
        {
            decel_address_[i-1] = (correction_address-1) - (DIFF_NEXT_ACCEL_STEP * i);
 8022772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022774:	b29b      	uxth	r3, r3
 8022776:	009b      	lsls	r3, r3, #2
 8022778:	b29b      	uxth	r3, r3
 802277a:	8a3a      	ldrh	r2, [r7, #16]
 802277c:	1ad3      	subs	r3, r2, r3
 802277e:	b29a      	uxth	r2, r3
 8022780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022782:	3b01      	subs	r3, #1
 8022784:	3a01      	subs	r2, #1
 8022786:	b291      	uxth	r1, r2
 8022788:	687a      	ldr	r2, [r7, #4]
 802278a:	3368      	adds	r3, #104	; 0x68
 802278c:	005b      	lsls	r3, r3, #1
 802278e:	4413      	add	r3, r2
 8022790:	460a      	mov	r2, r1
 8022792:	805a      	strh	r2, [r3, #2]
        for(int i = 1; i <= accel_step; i++)
 8022794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022796:	3301      	adds	r3, #1
 8022798:	62bb      	str	r3, [r7, #40]	; 0x28
 802279a:	e7e4      	b.n	8022766 <_ZN6Logger7LoggingEh+0x3b6>
        }
        accel_position_write_enable_ = accel_step;
 802279c:	4b0d      	ldr	r3, [pc, #52]	; (80227d4 <_ZN6Logger7LoggingEh+0x424>)
 802279e:	781a      	ldrb	r2, [r3, #0]
 80227a0:	687b      	ldr	r3, [r7, #4]
 80227a2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
        accel_step = 0;
 80227a6:	4b0b      	ldr	r3, [pc, #44]	; (80227d4 <_ZN6Logger7LoggingEh+0x424>)
 80227a8:	2200      	movs	r2, #0
 80227aa:	701a      	strb	r2, [r3, #0]
        accel_straight_cnt = 0;
 80227ac:	4b08      	ldr	r3, [pc, #32]	; (80227d0 <_ZN6Logger7LoggingEh+0x420>)
 80227ae:	2200      	movs	r2, #0
 80227b0:	801a      	strh	r2, [r3, #0]
 80227b2:	e002      	b.n	80227ba <_ZN6Logger7LoggingEh+0x40a>
    }
    else accel_straight_cnt = 0;
 80227b4:	4b06      	ldr	r3, [pc, #24]	; (80227d0 <_ZN6Logger7LoggingEh+0x420>)
 80227b6:	2200      	movs	r2, #0
 80227b8:	801a      	strh	r2, [r3, #0]

    now_address++;
 80227ba:	4b07      	ldr	r3, [pc, #28]	; (80227d8 <_ZN6Logger7LoggingEh+0x428>)
 80227bc:	881b      	ldrh	r3, [r3, #0]
 80227be:	3301      	adds	r3, #1
 80227c0:	b29a      	uxth	r2, r3
 80227c2:	4b05      	ldr	r3, [pc, #20]	; (80227d8 <_ZN6Logger7LoggingEh+0x428>)
 80227c4:	801a      	strh	r2, [r3, #0]
 80227c6:	e000      	b.n	80227ca <_ZN6Logger7LoggingEh+0x41a>
    if(distance < LOGGING_CONST_DISTANCE) return;
 80227c8:	bf00      	nop
}
 80227ca:	3730      	adds	r7, #48	; 0x30
 80227cc:	46bd      	mov	sp, r7
 80227ce:	bdb0      	pop	{r4, r5, r7, pc}
 80227d0:	20000094 	.word	0x20000094
 80227d4:	20000096 	.word	0x20000096
 80227d8:	20000080 	.word	0x20000080

080227dc <_ZN6Logger16StorePeriodicLogEv>:

uint8_t Logger::StorePeriodicLog()
{
 80227dc:	b580      	push	{r7, lr}
 80227de:	b084      	sub	sp, #16
 80227e0:	af00      	add	r7, sp, #0
 80227e2:	6078      	str	r0, [r7, #4]
    if(periodic_write_enable_ == 0) return 0;
 80227e4:	687b      	ldr	r3, [r7, #4]
 80227e6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80227ea:	2b00      	cmp	r3, #0
 80227ec:	d101      	bne.n	80227f2 <_ZN6Logger16StorePeriodicLogEv+0x16>
 80227ee:	2300      	movs	r3, #0
 80227f0:	e087      	b.n	8022902 <_ZN6Logger16StorePeriodicLogEv+0x126>
    else periodic_write_enable_ = 0;
 80227f2:	687b      	ldr	r3, [r7, #4]
 80227f4:	2200      	movs	r2, #0
 80227f6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    static uint32_t address_a = HEAD_ADDRESS_BLOCK_A;
    static uint32_t address_b = HEAD_ADDRESS_BLOCK_B;
    static uint32_t address_c = HEAD_ADDRESS_BLOCK_C;
    uint8_t result = 0;
 80227fa:	2300      	movs	r3, #0
 80227fc:	73fb      	strb	r3, [r7, #15]

    if(!flash.CheckBlankWord(address_a, NUM_OF_LOG))     return 0x10;
 80227fe:	687b      	ldr	r3, [r7, #4]
 8022800:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022804:	4b41      	ldr	r3, [pc, #260]	; (802290c <_ZN6Logger16StorePeriodicLogEv+0x130>)
 8022806:	681b      	ldr	r3, [r3, #0]
 8022808:	220a      	movs	r2, #10
 802280a:	4619      	mov	r1, r3
 802280c:	f7fe fd11 	bl	8021232 <_ZN5Flash14CheckBlankWordEmm>
 8022810:	4603      	mov	r3, r0
 8022812:	f083 0301 	eor.w	r3, r3, #1
 8022816:	b2db      	uxtb	r3, r3
 8022818:	2b00      	cmp	r3, #0
 802281a:	d001      	beq.n	8022820 <_ZN6Logger16StorePeriodicLogEv+0x44>
 802281c:	2310      	movs	r3, #16
 802281e:	e070      	b.n	8022902 <_ZN6Logger16StorePeriodicLogEv+0x126>
    if(!flash.CheckBlankWord(address_b, NUM_OF_LOG))     return 0x20;
 8022820:	687b      	ldr	r3, [r7, #4]
 8022822:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022826:	4b3a      	ldr	r3, [pc, #232]	; (8022910 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 8022828:	681b      	ldr	r3, [r3, #0]
 802282a:	220a      	movs	r2, #10
 802282c:	4619      	mov	r1, r3
 802282e:	f7fe fd00 	bl	8021232 <_ZN5Flash14CheckBlankWordEmm>
 8022832:	4603      	mov	r3, r0
 8022834:	f083 0301 	eor.w	r3, r3, #1
 8022838:	b2db      	uxtb	r3, r3
 802283a:	2b00      	cmp	r3, #0
 802283c:	d001      	beq.n	8022842 <_ZN6Logger16StorePeriodicLogEv+0x66>
 802283e:	2320      	movs	r3, #32
 8022840:	e05f      	b.n	8022902 <_ZN6Logger16StorePeriodicLogEv+0x126>
    if(!flash.CheckBlankHalfword(address_c, NUM_OF_LOG)) return 0x40;
 8022842:	687b      	ldr	r3, [r7, #4]
 8022844:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022848:	4b32      	ldr	r3, [pc, #200]	; (8022914 <_ZN6Logger16StorePeriodicLogEv+0x138>)
 802284a:	681b      	ldr	r3, [r3, #0]
 802284c:	220a      	movs	r2, #10
 802284e:	4619      	mov	r1, r3
 8022850:	f7fe fc9b 	bl	802118a <_ZN5Flash18CheckBlankHalfwordEmm>
 8022854:	4603      	mov	r3, r0
 8022856:	f083 0301 	eor.w	r3, r3, #1
 802285a:	b2db      	uxtb	r3, r3
 802285c:	2b00      	cmp	r3, #0
 802285e:	d001      	beq.n	8022864 <_ZN6Logger16StorePeriodicLogEv+0x88>
 8022860:	2340      	movs	r3, #64	; 0x40
 8022862:	e04e      	b.n	8022902 <_ZN6Logger16StorePeriodicLogEv+0x126>

    if(!flash.StoreFloat(address_a, const_distance_copy_, NUM_OF_LOG)) result |= 0x01;
 8022864:	687b      	ldr	r3, [r7, #4]
 8022866:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 802286a:	4b28      	ldr	r3, [pc, #160]	; (802290c <_ZN6Logger16StorePeriodicLogEv+0x130>)
 802286c:	6819      	ldr	r1, [r3, #0]
 802286e:	687b      	ldr	r3, [r7, #4]
 8022870:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8022874:	230a      	movs	r3, #10
 8022876:	f7fe fc04 	bl	8021082 <_ZN5Flash10StoreFloatEmPfm>
 802287a:	4603      	mov	r3, r0
 802287c:	f083 0301 	eor.w	r3, r3, #1
 8022880:	b2db      	uxtb	r3, r3
 8022882:	2b00      	cmp	r3, #0
 8022884:	d003      	beq.n	802288e <_ZN6Logger16StorePeriodicLogEv+0xb2>
 8022886:	7bfb      	ldrb	r3, [r7, #15]
 8022888:	f043 0301 	orr.w	r3, r3, #1
 802288c:	73fb      	strb	r3, [r7, #15]
    if(!flash.StoreFloat(address_b, radian_copy_, NUM_OF_LOG))         result |= 0x02;
 802288e:	687b      	ldr	r3, [r7, #4]
 8022890:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022894:	4b1e      	ldr	r3, [pc, #120]	; (8022910 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 8022896:	6819      	ldr	r1, [r3, #0]
 8022898:	687b      	ldr	r3, [r7, #4]
 802289a:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 802289e:	230a      	movs	r3, #10
 80228a0:	f7fe fbef 	bl	8021082 <_ZN5Flash10StoreFloatEmPfm>
 80228a4:	4603      	mov	r3, r0
 80228a6:	f083 0301 	eor.w	r3, r3, #1
 80228aa:	b2db      	uxtb	r3, r3
 80228ac:	2b00      	cmp	r3, #0
 80228ae:	d003      	beq.n	80228b8 <_ZN6Logger16StorePeriodicLogEv+0xdc>
 80228b0:	7bfb      	ldrb	r3, [r7, #15]
 80228b2:	f043 0302 	orr.w	r3, r3, #2
 80228b6:	73fb      	strb	r3, [r7, #15]
    if(!flash.StoreUint16(address_c, various_copy_, NUM_OF_LOG))       result |= 0x04;
 80228b8:	687b      	ldr	r3, [r7, #4]
 80228ba:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 80228be:	4b15      	ldr	r3, [pc, #84]	; (8022914 <_ZN6Logger16StorePeriodicLogEv+0x138>)
 80228c0:	6819      	ldr	r1, [r3, #0]
 80228c2:	687b      	ldr	r3, [r7, #4]
 80228c4:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 80228c8:	230a      	movs	r3, #10
 80228ca:	f7fe fba5 	bl	8021018 <_ZN5Flash11StoreUint16EmPtm>
 80228ce:	4603      	mov	r3, r0
 80228d0:	f083 0301 	eor.w	r3, r3, #1
 80228d4:	b2db      	uxtb	r3, r3
 80228d6:	2b00      	cmp	r3, #0
 80228d8:	d003      	beq.n	80228e2 <_ZN6Logger16StorePeriodicLogEv+0x106>
 80228da:	7bfb      	ldrb	r3, [r7, #15]
 80228dc:	f043 0304 	orr.w	r3, r3, #4
 80228e0:	73fb      	strb	r3, [r7, #15]

    address_a += NUM_OF_LOG * 4;
 80228e2:	4b0a      	ldr	r3, [pc, #40]	; (802290c <_ZN6Logger16StorePeriodicLogEv+0x130>)
 80228e4:	681b      	ldr	r3, [r3, #0]
 80228e6:	3328      	adds	r3, #40	; 0x28
 80228e8:	4a08      	ldr	r2, [pc, #32]	; (802290c <_ZN6Logger16StorePeriodicLogEv+0x130>)
 80228ea:	6013      	str	r3, [r2, #0]
    address_b += NUM_OF_LOG * 4;
 80228ec:	4b08      	ldr	r3, [pc, #32]	; (8022910 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 80228ee:	681b      	ldr	r3, [r3, #0]
 80228f0:	3328      	adds	r3, #40	; 0x28
 80228f2:	4a07      	ldr	r2, [pc, #28]	; (8022910 <_ZN6Logger16StorePeriodicLogEv+0x134>)
 80228f4:	6013      	str	r3, [r2, #0]
    address_c += NUM_OF_LOG * 2;
 80228f6:	4b07      	ldr	r3, [pc, #28]	; (8022914 <_ZN6Logger16StorePeriodicLogEv+0x138>)
 80228f8:	681b      	ldr	r3, [r3, #0]
 80228fa:	3314      	adds	r3, #20
 80228fc:	4a05      	ldr	r2, [pc, #20]	; (8022914 <_ZN6Logger16StorePeriodicLogEv+0x138>)
 80228fe:	6013      	str	r3, [r2, #0]

    return result;
 8022900:	7bfb      	ldrb	r3, [r7, #15]
}
 8022902:	4618      	mov	r0, r3
 8022904:	3710      	adds	r7, #16
 8022906:	46bd      	mov	sp, r7
 8022908:	bd80      	pop	{r7, pc}
 802290a:	bf00      	nop
 802290c:	20000000 	.word	0x20000000
 8022910:	20000004 	.word	0x20000004
 8022914:	20000008 	.word	0x20000008

08022918 <_ZN6Logger21StoreAccelPositionLogEv>:

uint8_t Logger::StoreAccelPositionLog()
{
 8022918:	b580      	push	{r7, lr}
 802291a:	b086      	sub	sp, #24
 802291c:	af00      	add	r7, sp, #0
 802291e:	6078      	str	r0, [r7, #4]
    uint8_t accel_step = accel_position_write_enable_;
 8022920:	687b      	ldr	r3, [r7, #4]
 8022922:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8022926:	75bb      	strb	r3, [r7, #22]
    if(accel_step == 0) return 0;
 8022928:	7dbb      	ldrb	r3, [r7, #22]
 802292a:	2b00      	cmp	r3, #0
 802292c:	d101      	bne.n	8022932 <_ZN6Logger21StoreAccelPositionLogEv+0x1a>
 802292e:	2300      	movs	r3, #0
 8022930:	e079      	b.n	8022a26 <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
    else accel_position_write_enable_ = 0;
 8022932:	687b      	ldr	r3, [r7, #4]
 8022934:	2200      	movs	r2, #0
 8022936:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    uint32_t address;
    uint8_t accel = 0; // step 0x01, 0x02, 0x03, 0x04, 0x05.
 802293a:	2300      	movs	r3, #0
 802293c:	73fb      	strb	r3, [r7, #15]
    uint8_t decel = 0; // step 0x10, 0x20, 0x30, 0x40, 0x50.
 802293e:	2300      	movs	r3, #0
 8022940:	73bb      	strb	r3, [r7, #14]
    uint8_t i;

    for(i = 1; i <= accel_step; i++)
 8022942:	2301      	movs	r3, #1
 8022944:	75fb      	strb	r3, [r7, #23]
 8022946:	7dfa      	ldrb	r2, [r7, #23]
 8022948:	7dbb      	ldrb	r3, [r7, #22]
 802294a:	429a      	cmp	r2, r3
 802294c:	d830      	bhi.n	80229b0 <_ZN6Logger21StoreAccelPositionLogEv+0x98>
    {
        accel = i;
 802294e:	7dfb      	ldrb	r3, [r7, #23]
 8022950:	73fb      	strb	r3, [r7, #15]
        address = HEAD_ADDRESS_BLOCK_D + accel_address_[i-1];
 8022952:	7dfb      	ldrb	r3, [r7, #23]
 8022954:	1e5a      	subs	r2, r3, #1
 8022956:	687b      	ldr	r3, [r7, #4]
 8022958:	3264      	adds	r2, #100	; 0x64
 802295a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 802295e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022962:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8022966:	613b      	str	r3, [r7, #16]
        if(!flash.CheckBlankByte(address, 1))      return 0x10;
 8022968:	687b      	ldr	r3, [r7, #4]
 802296a:	33f4      	adds	r3, #244	; 0xf4
 802296c:	2201      	movs	r2, #1
 802296e:	6939      	ldr	r1, [r7, #16]
 8022970:	4618      	mov	r0, r3
 8022972:	f7fe fbbd 	bl	80210f0 <_ZN5Flash14CheckBlankByteEmm>
 8022976:	4603      	mov	r3, r0
 8022978:	f083 0301 	eor.w	r3, r3, #1
 802297c:	b2db      	uxtb	r3, r3
 802297e:	2b00      	cmp	r3, #0
 8022980:	d001      	beq.n	8022986 <_ZN6Logger21StoreAccelPositionLogEv+0x6e>
 8022982:	2310      	movs	r3, #16
 8022984:	e04f      	b.n	8022a26 <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
        if(!flash.StoreUint8(address, &accel, 1)) return 0x20;
 8022986:	687b      	ldr	r3, [r7, #4]
 8022988:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 802298c:	f107 020f 	add.w	r2, r7, #15
 8022990:	2301      	movs	r3, #1
 8022992:	6939      	ldr	r1, [r7, #16]
 8022994:	f7fe fb0c 	bl	8020fb0 <_ZN5Flash10StoreUint8EmPhm>
 8022998:	4603      	mov	r3, r0
 802299a:	f083 0301 	eor.w	r3, r3, #1
 802299e:	b2db      	uxtb	r3, r3
 80229a0:	2b00      	cmp	r3, #0
 80229a2:	d001      	beq.n	80229a8 <_ZN6Logger21StoreAccelPositionLogEv+0x90>
 80229a4:	2320      	movs	r3, #32
 80229a6:	e03e      	b.n	8022a26 <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
    for(i = 1; i <= accel_step; i++)
 80229a8:	7dfb      	ldrb	r3, [r7, #23]
 80229aa:	3301      	adds	r3, #1
 80229ac:	75fb      	strb	r3, [r7, #23]
 80229ae:	e7ca      	b.n	8022946 <_ZN6Logger21StoreAccelPositionLogEv+0x2e>
    }
    for(i = 1; i <= accel_step; i++)
 80229b0:	2301      	movs	r3, #1
 80229b2:	75fb      	strb	r3, [r7, #23]
 80229b4:	7dfa      	ldrb	r2, [r7, #23]
 80229b6:	7dbb      	ldrb	r3, [r7, #22]
 80229b8:	429a      	cmp	r2, r3
 80229ba:	d833      	bhi.n	8022a24 <_ZN6Logger21StoreAccelPositionLogEv+0x10c>
    {
        decel = i << 4;
 80229bc:	7dfb      	ldrb	r3, [r7, #23]
 80229be:	011b      	lsls	r3, r3, #4
 80229c0:	b2db      	uxtb	r3, r3
 80229c2:	73bb      	strb	r3, [r7, #14]
        address = HEAD_ADDRESS_BLOCK_D + decel_address_[i-1];
 80229c4:	7dfb      	ldrb	r3, [r7, #23]
 80229c6:	3b01      	subs	r3, #1
 80229c8:	687a      	ldr	r2, [r7, #4]
 80229ca:	3368      	adds	r3, #104	; 0x68
 80229cc:	005b      	lsls	r3, r3, #1
 80229ce:	4413      	add	r3, r2
 80229d0:	885b      	ldrh	r3, [r3, #2]
 80229d2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80229d6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80229da:	613b      	str	r3, [r7, #16]
        if(!flash.CheckBlankByte(address, 1))      return 0x30;
 80229dc:	687b      	ldr	r3, [r7, #4]
 80229de:	33f4      	adds	r3, #244	; 0xf4
 80229e0:	2201      	movs	r2, #1
 80229e2:	6939      	ldr	r1, [r7, #16]
 80229e4:	4618      	mov	r0, r3
 80229e6:	f7fe fb83 	bl	80210f0 <_ZN5Flash14CheckBlankByteEmm>
 80229ea:	4603      	mov	r3, r0
 80229ec:	f083 0301 	eor.w	r3, r3, #1
 80229f0:	b2db      	uxtb	r3, r3
 80229f2:	2b00      	cmp	r3, #0
 80229f4:	d001      	beq.n	80229fa <_ZN6Logger21StoreAccelPositionLogEv+0xe2>
 80229f6:	2330      	movs	r3, #48	; 0x30
 80229f8:	e015      	b.n	8022a26 <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
        if(!flash.StoreUint8(address, &decel, 1)) return 0x40;
 80229fa:	687b      	ldr	r3, [r7, #4]
 80229fc:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8022a00:	f107 020e 	add.w	r2, r7, #14
 8022a04:	2301      	movs	r3, #1
 8022a06:	6939      	ldr	r1, [r7, #16]
 8022a08:	f7fe fad2 	bl	8020fb0 <_ZN5Flash10StoreUint8EmPhm>
 8022a0c:	4603      	mov	r3, r0
 8022a0e:	f083 0301 	eor.w	r3, r3, #1
 8022a12:	b2db      	uxtb	r3, r3
 8022a14:	2b00      	cmp	r3, #0
 8022a16:	d001      	beq.n	8022a1c <_ZN6Logger21StoreAccelPositionLogEv+0x104>
 8022a18:	2340      	movs	r3, #64	; 0x40
 8022a1a:	e004      	b.n	8022a26 <_ZN6Logger21StoreAccelPositionLogEv+0x10e>
    for(i = 1; i <= accel_step; i++)
 8022a1c:	7dfb      	ldrb	r3, [r7, #23]
 8022a1e:	3301      	adds	r3, #1
 8022a20:	75fb      	strb	r3, [r7, #23]
 8022a22:	e7c7      	b.n	80229b4 <_ZN6Logger21StoreAccelPositionLogEv+0x9c>
    }
    
    return 0;
 8022a24:	2300      	movs	r3, #0
}
 8022a26:	4618      	mov	r0, r3
 8022a28:	3718      	adds	r7, #24
 8022a2a:	46bd      	mov	sp, r7
 8022a2c:	bd80      	pop	{r7, pc}
	...

08022a30 <_ZN6Logger7LoadingEv>:

void Logger::Loading()
{
 8022a30:	b580      	push	{r7, lr}
 8022a32:	b08c      	sub	sp, #48	; 0x30
 8022a34:	af00      	add	r7, sp, #0
 8022a36:	6078      	str	r0, [r7, #4]
    float distance = encoder.GetDistanceStack();
 8022a38:	687b      	ldr	r3, [r7, #4]
 8022a3a:	33e8      	adds	r3, #232	; 0xe8
 8022a3c:	4618      	mov	r0, r3
 8022a3e:	f7fe fa54 	bl	8020eea <_ZN7Encoder16GetDistanceStackEv>
 8022a42:	ed87 0a08 	vstr	s0, [r7, #32]

    if(distance < LOGGING_CONST_DISTANCE) return;
 8022a46:	edd7 7a08 	vldr	s15, [r7, #32]
 8022a4a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8022a4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022a56:	f100 8299 	bmi.w	8022f8c <_ZN6Logger7LoadingEv+0x55c>
    encoder.ResetDistanceStack();
 8022a5a:	687b      	ldr	r3, [r7, #4]
 8022a5c:	33e8      	adds	r3, #232	; 0xe8
 8022a5e:	4618      	mov	r0, r3
 8022a60:	f7fe fa26 	bl	8020eb0 <_ZN7Encoder18ResetDistanceStackEv>

    static uint16_t now_address = 0;

    /* Load curvature radius */
    float log_distance = *(reinterpret_cast<float*>(now_address + HEAD_ADDRESS_BLOCK_A));
 8022a64:	4bad      	ldr	r3, [pc, #692]	; (8022d1c <_ZN6Logger7LoadingEv+0x2ec>)
 8022a66:	881b      	ldrh	r3, [r3, #0]
 8022a68:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022a6c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8022a70:	681b      	ldr	r3, [r3, #0]
 8022a72:	61fb      	str	r3, [r7, #28]
    float log_radian = *(reinterpret_cast<float*>(now_address + HEAD_ADDRESS_BLOCK_B));
 8022a74:	4ba9      	ldr	r3, [pc, #676]	; (8022d1c <_ZN6Logger7LoadingEv+0x2ec>)
 8022a76:	881b      	ldrh	r3, [r3, #0]
 8022a78:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022a7c:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 8022a80:	681b      	ldr	r3, [r3, #0]
 8022a82:	61bb      	str	r3, [r7, #24]
    float radius = log_distance / log_radian;
 8022a84:	edd7 6a07 	vldr	s13, [r7, #28]
 8022a88:	ed97 7a06 	vldr	s14, [r7, #24]
 8022a8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022a90:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Load correction position */
    uint16_t log_various = *(reinterpret_cast<uint16_t*>(now_address + HEAD_ADDRESS_BLOCK_C));
 8022a94:	4ba1      	ldr	r3, [pc, #644]	; (8022d1c <_ZN6Logger7LoadingEv+0x2ec>)
 8022a96:	881b      	ldrh	r3, [r3, #0]
 8022a98:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022a9c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8022aa0:	881b      	ldrh	r3, [r3, #0]
 8022aa2:	827b      	strh	r3, [r7, #18]
    bool log_corner = false, log_corner_pass = false;
 8022aa4:	2300      	movs	r3, #0
 8022aa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8022aaa:	2300      	movs	r3, #0
 8022aac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    bool log_cross = false, log_cross_pass = false;
 8022ab0:	2300      	movs	r3, #0
 8022ab2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8022ab6:	2300      	movs	r3, #0
 8022ab8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    if((log_various & 0x0002) == 0x0002) log_corner = true;
 8022abc:	8a7b      	ldrh	r3, [r7, #18]
 8022abe:	f003 0302 	and.w	r3, r3, #2
 8022ac2:	2b00      	cmp	r3, #0
 8022ac4:	d002      	beq.n	8022acc <_ZN6Logger7LoadingEv+0x9c>
 8022ac6:	2301      	movs	r3, #1
 8022ac8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if((log_various & 0x0001) == 0x0001) log_cross = true;
 8022acc:	8a7b      	ldrh	r3, [r7, #18]
 8022ace:	f003 0301 	and.w	r3, r3, #1
 8022ad2:	2b00      	cmp	r3, #0
 8022ad4:	d002      	beq.n	8022adc <_ZN6Logger7LoadingEv+0xac>
 8022ad6:	2301      	movs	r3, #1
 8022ad8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    /* Get correction position */
    bool run_corner = false, run_corner_pass = false;
 8022adc:	2300      	movs	r3, #0
 8022ade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8022ae2:	2300      	movs	r3, #0
 8022ae4:	747b      	strb	r3, [r7, #17]
    bool run_cross = false, run_cross_pass = false;
 8022ae6:	2300      	movs	r3, #0
 8022ae8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8022aec:	2300      	movs	r3, #0
 8022aee:	743b      	strb	r3, [r7, #16]
    uint8_t corner = side_sensor.GetCornerMarkerCount();
 8022af0:	687b      	ldr	r3, [r7, #4]
 8022af2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022af6:	4618      	mov	r0, r3
 8022af8:	f003 f865 	bl	8025bc6 <_ZN10SideSensor20GetCornerMarkerCountEv>
 8022afc:	4603      	mov	r3, r0
 8022afe:	73fb      	strb	r3, [r7, #15]
    uint8_t cross = side_sensor.GetCrossLineCount();
 8022b00:	687b      	ldr	r3, [r7, #4]
 8022b02:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8022b06:	4618      	mov	r0, r3
 8022b08:	f003 f869 	bl	8025bde <_ZN10SideSensor17GetCrossLineCountEv>
 8022b0c:	4603      	mov	r3, r0
 8022b0e:	73bb      	strb	r3, [r7, #14]
    static uint8_t pre_corner = corner;
 8022b10:	4b83      	ldr	r3, [pc, #524]	; (8022d20 <_ZN6Logger7LoadingEv+0x2f0>)
 8022b12:	781b      	ldrb	r3, [r3, #0]
 8022b14:	f3bf 8f5b 	dmb	ish
 8022b18:	b2db      	uxtb	r3, r3
 8022b1a:	f003 0301 	and.w	r3, r3, #1
 8022b1e:	2b00      	cmp	r3, #0
 8022b20:	bf0c      	ite	eq
 8022b22:	2301      	moveq	r3, #1
 8022b24:	2300      	movne	r3, #0
 8022b26:	b2db      	uxtb	r3, r3
 8022b28:	2b00      	cmp	r3, #0
 8022b2a:	d010      	beq.n	8022b4e <_ZN6Logger7LoadingEv+0x11e>
 8022b2c:	487c      	ldr	r0, [pc, #496]	; (8022d20 <_ZN6Logger7LoadingEv+0x2f0>)
 8022b2e:	f007 ffc3 	bl	802aab8 <__cxa_guard_acquire>
 8022b32:	4603      	mov	r3, r0
 8022b34:	2b00      	cmp	r3, #0
 8022b36:	bf14      	ite	ne
 8022b38:	2301      	movne	r3, #1
 8022b3a:	2300      	moveq	r3, #0
 8022b3c:	b2db      	uxtb	r3, r3
 8022b3e:	2b00      	cmp	r3, #0
 8022b40:	d005      	beq.n	8022b4e <_ZN6Logger7LoadingEv+0x11e>
 8022b42:	4a78      	ldr	r2, [pc, #480]	; (8022d24 <_ZN6Logger7LoadingEv+0x2f4>)
 8022b44:	7bfb      	ldrb	r3, [r7, #15]
 8022b46:	7013      	strb	r3, [r2, #0]
 8022b48:	4875      	ldr	r0, [pc, #468]	; (8022d20 <_ZN6Logger7LoadingEv+0x2f0>)
 8022b4a:	f007 ffc1 	bl	802aad0 <__cxa_guard_release>
    static uint8_t pre_cross = cross;
 8022b4e:	4b76      	ldr	r3, [pc, #472]	; (8022d28 <_ZN6Logger7LoadingEv+0x2f8>)
 8022b50:	781b      	ldrb	r3, [r3, #0]
 8022b52:	f3bf 8f5b 	dmb	ish
 8022b56:	b2db      	uxtb	r3, r3
 8022b58:	f003 0301 	and.w	r3, r3, #1
 8022b5c:	2b00      	cmp	r3, #0
 8022b5e:	bf0c      	ite	eq
 8022b60:	2301      	moveq	r3, #1
 8022b62:	2300      	movne	r3, #0
 8022b64:	b2db      	uxtb	r3, r3
 8022b66:	2b00      	cmp	r3, #0
 8022b68:	d010      	beq.n	8022b8c <_ZN6Logger7LoadingEv+0x15c>
 8022b6a:	486f      	ldr	r0, [pc, #444]	; (8022d28 <_ZN6Logger7LoadingEv+0x2f8>)
 8022b6c:	f007 ffa4 	bl	802aab8 <__cxa_guard_acquire>
 8022b70:	4603      	mov	r3, r0
 8022b72:	2b00      	cmp	r3, #0
 8022b74:	bf14      	ite	ne
 8022b76:	2301      	movne	r3, #1
 8022b78:	2300      	moveq	r3, #0
 8022b7a:	b2db      	uxtb	r3, r3
 8022b7c:	2b00      	cmp	r3, #0
 8022b7e:	d005      	beq.n	8022b8c <_ZN6Logger7LoadingEv+0x15c>
 8022b80:	4a6a      	ldr	r2, [pc, #424]	; (8022d2c <_ZN6Logger7LoadingEv+0x2fc>)
 8022b82:	7bbb      	ldrb	r3, [r7, #14]
 8022b84:	7013      	strb	r3, [r2, #0]
 8022b86:	4868      	ldr	r0, [pc, #416]	; (8022d28 <_ZN6Logger7LoadingEv+0x2f8>)
 8022b88:	f007 ffa2 	bl	802aad0 <__cxa_guard_release>
    static uint8_t straight_cnt = 0;
    bool straight = false;
 8022b8c:	2300      	movs	r3, #0
 8022b8e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    if(fabs(encoder.AngularVelocity()) < STRAIGHT_BORDER_OMEGA){
 8022b92:	687b      	ldr	r3, [r7, #4]
 8022b94:	33e8      	adds	r3, #232	; 0xe8
 8022b96:	4618      	mov	r0, r3
 8022b98:	f7fe f9b6 	bl	8020f08 <_ZN7Encoder15AngularVelocityEv>
 8022b9c:	eef0 7a40 	vmov.f32	s15, s0
 8022ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8022ba4:	f7ff fbd8 	bl	8022358 <_ZSt4fabsf>
 8022ba8:	eeb0 7a40 	vmov.f32	s14, s0
 8022bac:	eddf 7a60 	vldr	s15, [pc, #384]	; 8022d30 <_ZN6Logger7LoadingEv+0x300>
 8022bb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8022bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022bb8:	bf4c      	ite	mi
 8022bba:	2301      	movmi	r3, #1
 8022bbc:	2300      	movpl	r3, #0
 8022bbe:	b2db      	uxtb	r3, r3
 8022bc0:	2b00      	cmp	r3, #0
 8022bc2:	d00e      	beq.n	8022be2 <_ZN6Logger7LoadingEv+0x1b2>
        if(straight_cnt <= STRAIGHT_JUDGE_COUNT) straight_cnt++;
 8022bc4:	4b5b      	ldr	r3, [pc, #364]	; (8022d34 <_ZN6Logger7LoadingEv+0x304>)
 8022bc6:	781b      	ldrb	r3, [r3, #0]
 8022bc8:	2b05      	cmp	r3, #5
 8022bca:	d806      	bhi.n	8022bda <_ZN6Logger7LoadingEv+0x1aa>
 8022bcc:	4b59      	ldr	r3, [pc, #356]	; (8022d34 <_ZN6Logger7LoadingEv+0x304>)
 8022bce:	781b      	ldrb	r3, [r3, #0]
 8022bd0:	3301      	adds	r3, #1
 8022bd2:	b2da      	uxtb	r2, r3
 8022bd4:	4b57      	ldr	r3, [pc, #348]	; (8022d34 <_ZN6Logger7LoadingEv+0x304>)
 8022bd6:	701a      	strb	r2, [r3, #0]
 8022bd8:	e006      	b.n	8022be8 <_ZN6Logger7LoadingEv+0x1b8>
        else straight = true;
 8022bda:	2301      	movs	r3, #1
 8022bdc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8022be0:	e002      	b.n	8022be8 <_ZN6Logger7LoadingEv+0x1b8>
    }else straight_cnt = 0;
 8022be2:	4b54      	ldr	r3, [pc, #336]	; (8022d34 <_ZN6Logger7LoadingEv+0x304>)
 8022be4:	2200      	movs	r2, #0
 8022be6:	701a      	strb	r2, [r3, #0]
    if(corner > pre_corner && straight) run_corner = true;
 8022be8:	4b4e      	ldr	r3, [pc, #312]	; (8022d24 <_ZN6Logger7LoadingEv+0x2f4>)
 8022bea:	781b      	ldrb	r3, [r3, #0]
 8022bec:	7bfa      	ldrb	r2, [r7, #15]
 8022bee:	429a      	cmp	r2, r3
 8022bf0:	d906      	bls.n	8022c00 <_ZN6Logger7LoadingEv+0x1d0>
 8022bf2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8022bf6:	2b00      	cmp	r3, #0
 8022bf8:	d002      	beq.n	8022c00 <_ZN6Logger7LoadingEv+0x1d0>
 8022bfa:	2301      	movs	r3, #1
 8022bfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if(cross > pre_cross) run_cross = true;
 8022c00:	4b4a      	ldr	r3, [pc, #296]	; (8022d2c <_ZN6Logger7LoadingEv+0x2fc>)
 8022c02:	781b      	ldrb	r3, [r3, #0]
 8022c04:	7bba      	ldrb	r2, [r7, #14]
 8022c06:	429a      	cmp	r2, r3
 8022c08:	d902      	bls.n	8022c10 <_ZN6Logger7LoadingEv+0x1e0>
 8022c0a:	2301      	movs	r3, #1
 8022c0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    pre_corner = corner;
 8022c10:	4a44      	ldr	r2, [pc, #272]	; (8022d24 <_ZN6Logger7LoadingEv+0x2f4>)
 8022c12:	7bfb      	ldrb	r3, [r7, #15]
 8022c14:	7013      	strb	r3, [r2, #0]
    pre_cross = cross;
 8022c16:	4a45      	ldr	r2, [pc, #276]	; (8022d2c <_ZN6Logger7LoadingEv+0x2fc>)
 8022c18:	7bbb      	ldrb	r3, [r7, #14]
 8022c1a:	7013      	strb	r3, [r2, #0]

    /* Position correction at corner marker */
    static uint16_t log_corner_address, run_corner_address;
    static uint8_t log_corner_wait = 0, run_corner_wait = 0;
    if(log_corner == true){
 8022c1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8022c20:	2b00      	cmp	r3, #0
 8022c22:	d01f      	beq.n	8022c64 <_ZN6Logger7LoadingEv+0x234>
        if(run_corner_pass == true){
 8022c24:	7c7b      	ldrb	r3, [r7, #17]
 8022c26:	2b00      	cmp	r3, #0
 8022c28:	d011      	beq.n	8022c4e <_ZN6Logger7LoadingEv+0x21e>
            now_address += now_address - run_corner_address;
 8022c2a:	4b3c      	ldr	r3, [pc, #240]	; (8022d1c <_ZN6Logger7LoadingEv+0x2ec>)
 8022c2c:	881a      	ldrh	r2, [r3, #0]
 8022c2e:	4b42      	ldr	r3, [pc, #264]	; (8022d38 <_ZN6Logger7LoadingEv+0x308>)
 8022c30:	881b      	ldrh	r3, [r3, #0]
 8022c32:	1ad3      	subs	r3, r2, r3
 8022c34:	b29a      	uxth	r2, r3
 8022c36:	4b39      	ldr	r3, [pc, #228]	; (8022d1c <_ZN6Logger7LoadingEv+0x2ec>)
 8022c38:	881b      	ldrh	r3, [r3, #0]
 8022c3a:	4413      	add	r3, r2
 8022c3c:	b29a      	uxth	r2, r3
 8022c3e:	4b37      	ldr	r3, [pc, #220]	; (8022d1c <_ZN6Logger7LoadingEv+0x2ec>)
 8022c40:	801a      	strh	r2, [r3, #0]
            run_corner_wait = 0;
 8022c42:	4b3e      	ldr	r3, [pc, #248]	; (8022d3c <_ZN6Logger7LoadingEv+0x30c>)
 8022c44:	2200      	movs	r2, #0
 8022c46:	701a      	strb	r2, [r3, #0]
            run_corner_pass = false;
 8022c48:	2300      	movs	r3, #0
 8022c4a:	747b      	strb	r3, [r7, #17]
 8022c4c:	e017      	b.n	8022c7e <_ZN6Logger7LoadingEv+0x24e>
        }else{
            log_corner_address = now_address;
 8022c4e:	4b33      	ldr	r3, [pc, #204]	; (8022d1c <_ZN6Logger7LoadingEv+0x2ec>)
 8022c50:	881a      	ldrh	r2, [r3, #0]
 8022c52:	4b3b      	ldr	r3, [pc, #236]	; (8022d40 <_ZN6Logger7LoadingEv+0x310>)
 8022c54:	801a      	strh	r2, [r3, #0]
            log_corner_pass = true;
 8022c56:	2301      	movs	r3, #1
 8022c58:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            log_corner_wait = CORRECTION_WAIT_COUNT;
 8022c5c:	4b39      	ldr	r3, [pc, #228]	; (8022d44 <_ZN6Logger7LoadingEv+0x314>)
 8022c5e:	2203      	movs	r2, #3
 8022c60:	701a      	strb	r2, [r3, #0]
 8022c62:	e00c      	b.n	8022c7e <_ZN6Logger7LoadingEv+0x24e>
        }
    }else{
        if(run_corner_wait > 0) run_corner_wait--;
 8022c64:	4b35      	ldr	r3, [pc, #212]	; (8022d3c <_ZN6Logger7LoadingEv+0x30c>)
 8022c66:	781b      	ldrb	r3, [r3, #0]
 8022c68:	2b00      	cmp	r3, #0
 8022c6a:	d006      	beq.n	8022c7a <_ZN6Logger7LoadingEv+0x24a>
 8022c6c:	4b33      	ldr	r3, [pc, #204]	; (8022d3c <_ZN6Logger7LoadingEv+0x30c>)
 8022c6e:	781b      	ldrb	r3, [r3, #0]
 8022c70:	3b01      	subs	r3, #1
 8022c72:	b2da      	uxtb	r2, r3
 8022c74:	4b31      	ldr	r3, [pc, #196]	; (8022d3c <_ZN6Logger7LoadingEv+0x30c>)
 8022c76:	701a      	strb	r2, [r3, #0]
 8022c78:	e001      	b.n	8022c7e <_ZN6Logger7LoadingEv+0x24e>
        else run_corner_pass = false;
 8022c7a:	2300      	movs	r3, #0
 8022c7c:	747b      	strb	r3, [r7, #17]
    }
    if(run_corner == true){
 8022c7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8022c82:	2b00      	cmp	r3, #0
 8022c84:	d018      	beq.n	8022cb8 <_ZN6Logger7LoadingEv+0x288>
        if(log_corner_pass == true){
 8022c86:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8022c8a:	2b00      	cmp	r3, #0
 8022c8c:	d00a      	beq.n	8022ca4 <_ZN6Logger7LoadingEv+0x274>
            now_address = log_corner_address;
 8022c8e:	4b2c      	ldr	r3, [pc, #176]	; (8022d40 <_ZN6Logger7LoadingEv+0x310>)
 8022c90:	881a      	ldrh	r2, [r3, #0]
 8022c92:	4b22      	ldr	r3, [pc, #136]	; (8022d1c <_ZN6Logger7LoadingEv+0x2ec>)
 8022c94:	801a      	strh	r2, [r3, #0]
            log_corner_wait = 0;
 8022c96:	4b2b      	ldr	r3, [pc, #172]	; (8022d44 <_ZN6Logger7LoadingEv+0x314>)
 8022c98:	2200      	movs	r2, #0
 8022c9a:	701a      	strb	r2, [r3, #0]
            log_corner_pass = false;
 8022c9c:	2300      	movs	r3, #0
 8022c9e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8022ca2:	e017      	b.n	8022cd4 <_ZN6Logger7LoadingEv+0x2a4>
        }else{
            run_corner_address = now_address;
 8022ca4:	4b1d      	ldr	r3, [pc, #116]	; (8022d1c <_ZN6Logger7LoadingEv+0x2ec>)
 8022ca6:	881a      	ldrh	r2, [r3, #0]
 8022ca8:	4b23      	ldr	r3, [pc, #140]	; (8022d38 <_ZN6Logger7LoadingEv+0x308>)
 8022caa:	801a      	strh	r2, [r3, #0]
            run_corner_pass = true;
 8022cac:	2301      	movs	r3, #1
 8022cae:	747b      	strb	r3, [r7, #17]
            run_corner_wait = CORRECTION_WAIT_COUNT;
 8022cb0:	4b22      	ldr	r3, [pc, #136]	; (8022d3c <_ZN6Logger7LoadingEv+0x30c>)
 8022cb2:	2203      	movs	r2, #3
 8022cb4:	701a      	strb	r2, [r3, #0]
 8022cb6:	e00d      	b.n	8022cd4 <_ZN6Logger7LoadingEv+0x2a4>
        }
    }else{
        if(log_corner_wait > 0) log_corner_wait--;
 8022cb8:	4b22      	ldr	r3, [pc, #136]	; (8022d44 <_ZN6Logger7LoadingEv+0x314>)
 8022cba:	781b      	ldrb	r3, [r3, #0]
 8022cbc:	2b00      	cmp	r3, #0
 8022cbe:	d006      	beq.n	8022cce <_ZN6Logger7LoadingEv+0x29e>
 8022cc0:	4b20      	ldr	r3, [pc, #128]	; (8022d44 <_ZN6Logger7LoadingEv+0x314>)
 8022cc2:	781b      	ldrb	r3, [r3, #0]
 8022cc4:	3b01      	subs	r3, #1
 8022cc6:	b2da      	uxtb	r2, r3
 8022cc8:	4b1e      	ldr	r3, [pc, #120]	; (8022d44 <_ZN6Logger7LoadingEv+0x314>)
 8022cca:	701a      	strb	r2, [r3, #0]
 8022ccc:	e002      	b.n	8022cd4 <_ZN6Logger7LoadingEv+0x2a4>
        else log_corner_pass = false;
 8022cce:	2300      	movs	r3, #0
 8022cd0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    }

    /* Position correction at cross line */
    static uint16_t log_cross_address, run_cross_address;
    static uint8_t log_cross_wait = 0, run_cross_wait = 0;
    if(log_cross == true){
 8022cd4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8022cd8:	2b00      	cmp	r3, #0
 8022cda:	d03d      	beq.n	8022d58 <_ZN6Logger7LoadingEv+0x328>
        if(run_cross_pass == true){
 8022cdc:	7c3b      	ldrb	r3, [r7, #16]
 8022cde:	2b00      	cmp	r3, #0
 8022ce0:	d011      	beq.n	8022d06 <_ZN6Logger7LoadingEv+0x2d6>
            now_address += now_address - run_cross_address;
 8022ce2:	4b0e      	ldr	r3, [pc, #56]	; (8022d1c <_ZN6Logger7LoadingEv+0x2ec>)
 8022ce4:	881a      	ldrh	r2, [r3, #0]
 8022ce6:	4b18      	ldr	r3, [pc, #96]	; (8022d48 <_ZN6Logger7LoadingEv+0x318>)
 8022ce8:	881b      	ldrh	r3, [r3, #0]
 8022cea:	1ad3      	subs	r3, r2, r3
 8022cec:	b29a      	uxth	r2, r3
 8022cee:	4b0b      	ldr	r3, [pc, #44]	; (8022d1c <_ZN6Logger7LoadingEv+0x2ec>)
 8022cf0:	881b      	ldrh	r3, [r3, #0]
 8022cf2:	4413      	add	r3, r2
 8022cf4:	b29a      	uxth	r2, r3
 8022cf6:	4b09      	ldr	r3, [pc, #36]	; (8022d1c <_ZN6Logger7LoadingEv+0x2ec>)
 8022cf8:	801a      	strh	r2, [r3, #0]
            run_cross_wait = 0;
 8022cfa:	4b14      	ldr	r3, [pc, #80]	; (8022d4c <_ZN6Logger7LoadingEv+0x31c>)
 8022cfc:	2200      	movs	r2, #0
 8022cfe:	701a      	strb	r2, [r3, #0]
            run_cross_pass = false;
 8022d00:	2300      	movs	r3, #0
 8022d02:	743b      	strb	r3, [r7, #16]
 8022d04:	e035      	b.n	8022d72 <_ZN6Logger7LoadingEv+0x342>
        }else{
            log_cross_address = now_address;
 8022d06:	4b05      	ldr	r3, [pc, #20]	; (8022d1c <_ZN6Logger7LoadingEv+0x2ec>)
 8022d08:	881a      	ldrh	r2, [r3, #0]
 8022d0a:	4b11      	ldr	r3, [pc, #68]	; (8022d50 <_ZN6Logger7LoadingEv+0x320>)
 8022d0c:	801a      	strh	r2, [r3, #0]
            log_cross_pass = true;
 8022d0e:	2301      	movs	r3, #1
 8022d10:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
            log_cross_wait = CORRECTION_WAIT_COUNT;
 8022d14:	4b0f      	ldr	r3, [pc, #60]	; (8022d54 <_ZN6Logger7LoadingEv+0x324>)
 8022d16:	2203      	movs	r2, #3
 8022d18:	701a      	strb	r2, [r3, #0]
 8022d1a:	e02a      	b.n	8022d72 <_ZN6Logger7LoadingEv+0x342>
 8022d1c:	20000098 	.word	0x20000098
 8022d20:	2000009c 	.word	0x2000009c
 8022d24:	2000009a 	.word	0x2000009a
 8022d28:	200000a4 	.word	0x200000a4
 8022d2c:	200000a0 	.word	0x200000a0
 8022d30:	43ca0000 	.word	0x43ca0000
 8022d34:	200000a8 	.word	0x200000a8
 8022d38:	200000ac 	.word	0x200000ac
 8022d3c:	200000af 	.word	0x200000af
 8022d40:	200000aa 	.word	0x200000aa
 8022d44:	200000ae 	.word	0x200000ae
 8022d48:	200000b2 	.word	0x200000b2
 8022d4c:	200000b5 	.word	0x200000b5
 8022d50:	200000b0 	.word	0x200000b0
 8022d54:	200000b4 	.word	0x200000b4
        }
    }else{
        if(run_cross_wait > 0) run_cross_wait--;
 8022d58:	4b8e      	ldr	r3, [pc, #568]	; (8022f94 <_ZN6Logger7LoadingEv+0x564>)
 8022d5a:	781b      	ldrb	r3, [r3, #0]
 8022d5c:	2b00      	cmp	r3, #0
 8022d5e:	d006      	beq.n	8022d6e <_ZN6Logger7LoadingEv+0x33e>
 8022d60:	4b8c      	ldr	r3, [pc, #560]	; (8022f94 <_ZN6Logger7LoadingEv+0x564>)
 8022d62:	781b      	ldrb	r3, [r3, #0]
 8022d64:	3b01      	subs	r3, #1
 8022d66:	b2da      	uxtb	r2, r3
 8022d68:	4b8a      	ldr	r3, [pc, #552]	; (8022f94 <_ZN6Logger7LoadingEv+0x564>)
 8022d6a:	701a      	strb	r2, [r3, #0]
 8022d6c:	e001      	b.n	8022d72 <_ZN6Logger7LoadingEv+0x342>
        else run_cross_pass = false;
 8022d6e:	2300      	movs	r3, #0
 8022d70:	743b      	strb	r3, [r7, #16]
    }
    if(run_cross == true){
 8022d72:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8022d76:	2b00      	cmp	r3, #0
 8022d78:	d018      	beq.n	8022dac <_ZN6Logger7LoadingEv+0x37c>
        if(log_cross_pass == true){
 8022d7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8022d7e:	2b00      	cmp	r3, #0
 8022d80:	d00a      	beq.n	8022d98 <_ZN6Logger7LoadingEv+0x368>
            now_address = log_cross_address;
 8022d82:	4b85      	ldr	r3, [pc, #532]	; (8022f98 <_ZN6Logger7LoadingEv+0x568>)
 8022d84:	881a      	ldrh	r2, [r3, #0]
 8022d86:	4b85      	ldr	r3, [pc, #532]	; (8022f9c <_ZN6Logger7LoadingEv+0x56c>)
 8022d88:	801a      	strh	r2, [r3, #0]
            log_cross_wait = 0;
 8022d8a:	4b85      	ldr	r3, [pc, #532]	; (8022fa0 <_ZN6Logger7LoadingEv+0x570>)
 8022d8c:	2200      	movs	r2, #0
 8022d8e:	701a      	strb	r2, [r3, #0]
            log_cross_pass = false;
 8022d90:	2300      	movs	r3, #0
 8022d92:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8022d96:	e017      	b.n	8022dc8 <_ZN6Logger7LoadingEv+0x398>
        }else{
            run_cross_address = now_address;
 8022d98:	4b80      	ldr	r3, [pc, #512]	; (8022f9c <_ZN6Logger7LoadingEv+0x56c>)
 8022d9a:	881a      	ldrh	r2, [r3, #0]
 8022d9c:	4b81      	ldr	r3, [pc, #516]	; (8022fa4 <_ZN6Logger7LoadingEv+0x574>)
 8022d9e:	801a      	strh	r2, [r3, #0]
            run_cross_pass = true;
 8022da0:	2301      	movs	r3, #1
 8022da2:	743b      	strb	r3, [r7, #16]
            run_cross_wait = CORRECTION_WAIT_COUNT;
 8022da4:	4b7b      	ldr	r3, [pc, #492]	; (8022f94 <_ZN6Logger7LoadingEv+0x564>)
 8022da6:	2203      	movs	r2, #3
 8022da8:	701a      	strb	r2, [r3, #0]
 8022daa:	e00d      	b.n	8022dc8 <_ZN6Logger7LoadingEv+0x398>
        }
    }else{
        if(log_cross_wait > 0) log_cross_wait--;
 8022dac:	4b7c      	ldr	r3, [pc, #496]	; (8022fa0 <_ZN6Logger7LoadingEv+0x570>)
 8022dae:	781b      	ldrb	r3, [r3, #0]
 8022db0:	2b00      	cmp	r3, #0
 8022db2:	d006      	beq.n	8022dc2 <_ZN6Logger7LoadingEv+0x392>
 8022db4:	4b7a      	ldr	r3, [pc, #488]	; (8022fa0 <_ZN6Logger7LoadingEv+0x570>)
 8022db6:	781b      	ldrb	r3, [r3, #0]
 8022db8:	3b01      	subs	r3, #1
 8022dba:	b2da      	uxtb	r2, r3
 8022dbc:	4b78      	ldr	r3, [pc, #480]	; (8022fa0 <_ZN6Logger7LoadingEv+0x570>)
 8022dbe:	701a      	strb	r2, [r3, #0]
 8022dc0:	e002      	b.n	8022dc8 <_ZN6Logger7LoadingEv+0x398>
        else log_cross_pass = false;
 8022dc2:	2300      	movs	r3, #0
 8022dc4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    /* Accel straight */
    uint8_t accel_step = *(reinterpret_cast<uint8_t*>(now_address + HEAD_ADDRESS_BLOCK_D));
 8022dc8:	4b74      	ldr	r3, [pc, #464]	; (8022f9c <_ZN6Logger7LoadingEv+0x56c>)
 8022dca:	881b      	ldrh	r3, [r3, #0]
 8022dcc:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8022dd0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8022dd4:	781b      	ldrb	r3, [r3, #0]
 8022dd6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    if(!straight) accel_step = 0x10;
 8022dda:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8022dde:	f083 0301 	eor.w	r3, r3, #1
 8022de2:	b2db      	uxtb	r3, r3
 8022de4:	2b00      	cmp	r3, #0
 8022de6:	d002      	beq.n	8022dee <_ZN6Logger7LoadingEv+0x3be>
 8022de8:	2310      	movs	r3, #16
 8022dea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    float target = MIN_VELOCITY;
 8022dee:	4b6e      	ldr	r3, [pc, #440]	; (8022fa8 <_ZN6Logger7LoadingEv+0x578>)
 8022df0:	627b      	str	r3, [r7, #36]	; 0x24
    static float pre_target = MIN_VELOCITY;
    switch(accel_step){
 8022df2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8022df6:	3b01      	subs	r3, #1
 8022df8:	2b4f      	cmp	r3, #79	; 0x4f
 8022dfa:	f200 80b5 	bhi.w	8022f68 <_ZN6Logger7LoadingEv+0x538>
 8022dfe:	a201      	add	r2, pc, #4	; (adr r2, 8022e04 <_ZN6Logger7LoadingEv+0x3d4>)
 8022e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022e04:	08022f4b 	.word	0x08022f4b
 8022e08:	08022f51 	.word	0x08022f51
 8022e0c:	08022f57 	.word	0x08022f57
 8022e10:	08022f5d 	.word	0x08022f5d
 8022e14:	08022f63 	.word	0x08022f63
 8022e18:	08022f69 	.word	0x08022f69
 8022e1c:	08022f69 	.word	0x08022f69
 8022e20:	08022f69 	.word	0x08022f69
 8022e24:	08022f69 	.word	0x08022f69
 8022e28:	08022f69 	.word	0x08022f69
 8022e2c:	08022f69 	.word	0x08022f69
 8022e30:	08022f69 	.word	0x08022f69
 8022e34:	08022f69 	.word	0x08022f69
 8022e38:	08022f69 	.word	0x08022f69
 8022e3c:	08022f69 	.word	0x08022f69
 8022e40:	08022f45 	.word	0x08022f45
 8022e44:	08022f69 	.word	0x08022f69
 8022e48:	08022f69 	.word	0x08022f69
 8022e4c:	08022f69 	.word	0x08022f69
 8022e50:	08022f69 	.word	0x08022f69
 8022e54:	08022f69 	.word	0x08022f69
 8022e58:	08022f69 	.word	0x08022f69
 8022e5c:	08022f69 	.word	0x08022f69
 8022e60:	08022f69 	.word	0x08022f69
 8022e64:	08022f69 	.word	0x08022f69
 8022e68:	08022f69 	.word	0x08022f69
 8022e6c:	08022f69 	.word	0x08022f69
 8022e70:	08022f69 	.word	0x08022f69
 8022e74:	08022f69 	.word	0x08022f69
 8022e78:	08022f69 	.word	0x08022f69
 8022e7c:	08022f69 	.word	0x08022f69
 8022e80:	08022f4b 	.word	0x08022f4b
 8022e84:	08022f69 	.word	0x08022f69
 8022e88:	08022f69 	.word	0x08022f69
 8022e8c:	08022f69 	.word	0x08022f69
 8022e90:	08022f69 	.word	0x08022f69
 8022e94:	08022f69 	.word	0x08022f69
 8022e98:	08022f69 	.word	0x08022f69
 8022e9c:	08022f69 	.word	0x08022f69
 8022ea0:	08022f69 	.word	0x08022f69
 8022ea4:	08022f69 	.word	0x08022f69
 8022ea8:	08022f69 	.word	0x08022f69
 8022eac:	08022f69 	.word	0x08022f69
 8022eb0:	08022f69 	.word	0x08022f69
 8022eb4:	08022f69 	.word	0x08022f69
 8022eb8:	08022f69 	.word	0x08022f69
 8022ebc:	08022f69 	.word	0x08022f69
 8022ec0:	08022f51 	.word	0x08022f51
 8022ec4:	08022f69 	.word	0x08022f69
 8022ec8:	08022f69 	.word	0x08022f69
 8022ecc:	08022f69 	.word	0x08022f69
 8022ed0:	08022f69 	.word	0x08022f69
 8022ed4:	08022f69 	.word	0x08022f69
 8022ed8:	08022f69 	.word	0x08022f69
 8022edc:	08022f69 	.word	0x08022f69
 8022ee0:	08022f69 	.word	0x08022f69
 8022ee4:	08022f69 	.word	0x08022f69
 8022ee8:	08022f69 	.word	0x08022f69
 8022eec:	08022f69 	.word	0x08022f69
 8022ef0:	08022f69 	.word	0x08022f69
 8022ef4:	08022f69 	.word	0x08022f69
 8022ef8:	08022f69 	.word	0x08022f69
 8022efc:	08022f69 	.word	0x08022f69
 8022f00:	08022f57 	.word	0x08022f57
 8022f04:	08022f69 	.word	0x08022f69
 8022f08:	08022f69 	.word	0x08022f69
 8022f0c:	08022f69 	.word	0x08022f69
 8022f10:	08022f69 	.word	0x08022f69
 8022f14:	08022f69 	.word	0x08022f69
 8022f18:	08022f69 	.word	0x08022f69
 8022f1c:	08022f69 	.word	0x08022f69
 8022f20:	08022f69 	.word	0x08022f69
 8022f24:	08022f69 	.word	0x08022f69
 8022f28:	08022f69 	.word	0x08022f69
 8022f2c:	08022f69 	.word	0x08022f69
 8022f30:	08022f69 	.word	0x08022f69
 8022f34:	08022f69 	.word	0x08022f69
 8022f38:	08022f69 	.word	0x08022f69
 8022f3c:	08022f69 	.word	0x08022f69
 8022f40:	08022f5d 	.word	0x08022f5d
        case 0x10: target = MIN_VELOCITY; break;
 8022f44:	4b18      	ldr	r3, [pc, #96]	; (8022fa8 <_ZN6Logger7LoadingEv+0x578>)
 8022f46:	627b      	str	r3, [r7, #36]	; 0x24
 8022f48:	e012      	b.n	8022f70 <_ZN6Logger7LoadingEv+0x540>
        case 0x01:
        case 0x20: target = MIN_VELOCITY + (ACCEL_VELOCITY * 1); break;
 8022f4a:	4b18      	ldr	r3, [pc, #96]	; (8022fac <_ZN6Logger7LoadingEv+0x57c>)
 8022f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8022f4e:	e00f      	b.n	8022f70 <_ZN6Logger7LoadingEv+0x540>
        case 0x02:
        case 0x30: target = MIN_VELOCITY + (ACCEL_VELOCITY * 2); break;
 8022f50:	4b17      	ldr	r3, [pc, #92]	; (8022fb0 <_ZN6Logger7LoadingEv+0x580>)
 8022f52:	627b      	str	r3, [r7, #36]	; 0x24
 8022f54:	e00c      	b.n	8022f70 <_ZN6Logger7LoadingEv+0x540>
        case 0x03:
        case 0x40: target = MIN_VELOCITY + (ACCEL_VELOCITY * 3); break;
 8022f56:	4b17      	ldr	r3, [pc, #92]	; (8022fb4 <_ZN6Logger7LoadingEv+0x584>)
 8022f58:	627b      	str	r3, [r7, #36]	; 0x24
 8022f5a:	e009      	b.n	8022f70 <_ZN6Logger7LoadingEv+0x540>
        case 0x04:
        case 0x50: target = MIN_VELOCITY + (ACCEL_VELOCITY * 4); break;
 8022f5c:	4b16      	ldr	r3, [pc, #88]	; (8022fb8 <_ZN6Logger7LoadingEv+0x588>)
 8022f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8022f60:	e006      	b.n	8022f70 <_ZN6Logger7LoadingEv+0x540>
        case 0x05: target = MIN_VELOCITY + (ACCEL_VELOCITY * 5); break;
 8022f62:	4b16      	ldr	r3, [pc, #88]	; (8022fbc <_ZN6Logger7LoadingEv+0x58c>)
 8022f64:	627b      	str	r3, [r7, #36]	; 0x24
 8022f66:	e003      	b.n	8022f70 <_ZN6Logger7LoadingEv+0x540>
        default: target = pre_target; break;
 8022f68:	4b15      	ldr	r3, [pc, #84]	; (8022fc0 <_ZN6Logger7LoadingEv+0x590>)
 8022f6a:	681b      	ldr	r3, [r3, #0]
 8022f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8022f6e:	bf00      	nop
    }
    pre_target = target;
 8022f70:	4a13      	ldr	r2, [pc, #76]	; (8022fc0 <_ZN6Logger7LoadingEv+0x590>)
 8022f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022f74:	6013      	str	r3, [r2, #0]
    target_velocity_ = target;
 8022f76:	687b      	ldr	r3, [r7, #4]
 8022f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022f7a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

    now_address++;
 8022f7e:	4b07      	ldr	r3, [pc, #28]	; (8022f9c <_ZN6Logger7LoadingEv+0x56c>)
 8022f80:	881b      	ldrh	r3, [r3, #0]
 8022f82:	3301      	adds	r3, #1
 8022f84:	b29a      	uxth	r2, r3
 8022f86:	4b05      	ldr	r3, [pc, #20]	; (8022f9c <_ZN6Logger7LoadingEv+0x56c>)
 8022f88:	801a      	strh	r2, [r3, #0]
 8022f8a:	e000      	b.n	8022f8e <_ZN6Logger7LoadingEv+0x55e>
    if(distance < LOGGING_CONST_DISTANCE) return;
 8022f8c:	bf00      	nop
}
 8022f8e:	3730      	adds	r7, #48	; 0x30
 8022f90:	46bd      	mov	sp, r7
 8022f92:	bd80      	pop	{r7, pc}
 8022f94:	200000b5 	.word	0x200000b5
 8022f98:	200000b0 	.word	0x200000b0
 8022f9c:	20000098 	.word	0x20000098
 8022fa0:	200000b4 	.word	0x200000b4
 8022fa4:	200000b2 	.word	0x200000b2
 8022fa8:	3f4ccccd 	.word	0x3f4ccccd
 8022fac:	3fa66666 	.word	0x3fa66666
 8022fb0:	3fe66666 	.word	0x3fe66666
 8022fb4:	40133333 	.word	0x40133333
 8022fb8:	40333333 	.word	0x40333333
 8022fbc:	40533333 	.word	0x40533333
 8022fc0:	2000000c 	.word	0x2000000c

08022fc4 <_ZN6Logger17GetTargetVelocityEv>:

float Logger::GetTargetVelocity()
{
 8022fc4:	b480      	push	{r7}
 8022fc6:	b083      	sub	sp, #12
 8022fc8:	af00      	add	r7, sp, #0
 8022fca:	6078      	str	r0, [r7, #4]
    return target_velocity_;
 8022fcc:	687b      	ldr	r3, [r7, #4]
 8022fce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8022fd2:	ee07 3a90 	vmov	s15, r3
 8022fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8022fda:	370c      	adds	r7, #12
 8022fdc:	46bd      	mov	sp, r7
 8022fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022fe2:	4770      	bx	lr

08022fe4 <_ZN7Logger2C1EP7EncoderP5FlashP3LedP8Iim42652P10SideSensor>:
#include "logger2.hpp"
#include <math.h>

Logger2::Logger2(Encoder *encoder,
 8022fe4:	b480      	push	{r7}
 8022fe6:	b085      	sub	sp, #20
 8022fe8:	af00      	add	r7, sp, #0
 8022fea:	60f8      	str	r0, [r7, #12]
 8022fec:	60b9      	str	r1, [r7, #8]
 8022fee:	607a      	str	r2, [r7, #4]
 8022ff0:	603b      	str	r3, [r7, #0]
                   , success_emergency_code_store_(false)
                   , logging_radian_buff_(0)
                   , loading_now_address_(0)
                   , uncorrected_address_buff_(0)
                   , logging_now_address_(0)
                   , target_velocity_(0)
 8022ff2:	68fb      	ldr	r3, [r7, #12]
 8022ff4:	2200      	movs	r2, #0
 8022ff6:	701a      	strb	r2, [r3, #0]
 8022ff8:	68fb      	ldr	r3, [r7, #12]
 8022ffa:	2200      	movs	r2, #0
 8022ffc:	705a      	strb	r2, [r3, #1]
 8022ffe:	68fb      	ldr	r3, [r7, #12]
 8023000:	f04f 0200 	mov.w	r2, #0
 8023004:	605a      	str	r2, [r3, #4]
 8023006:	68fb      	ldr	r3, [r7, #12]
 8023008:	2200      	movs	r2, #0
 802300a:	811a      	strh	r2, [r3, #8]
 802300c:	68fb      	ldr	r3, [r7, #12]
 802300e:	2200      	movs	r2, #0
 8023010:	815a      	strh	r2, [r3, #10]
 8023012:	68fb      	ldr	r3, [r7, #12]
 8023014:	2200      	movs	r2, #0
 8023016:	819a      	strh	r2, [r3, #12]
 8023018:	68fb      	ldr	r3, [r7, #12]
 802301a:	f04f 0200 	mov.w	r2, #0
 802301e:	611a      	str	r2, [r3, #16]
{
    encoder_ = encoder;
 8023020:	68fb      	ldr	r3, [r7, #12]
 8023022:	68ba      	ldr	r2, [r7, #8]
 8023024:	615a      	str	r2, [r3, #20]
    flash_ = flash;
 8023026:	68fb      	ldr	r3, [r7, #12]
 8023028:	687a      	ldr	r2, [r7, #4]
 802302a:	619a      	str	r2, [r3, #24]
    led_ = led;
 802302c:	68fb      	ldr	r3, [r7, #12]
 802302e:	683a      	ldr	r2, [r7, #0]
 8023030:	61da      	str	r2, [r3, #28]
    iim_42652_ = iim_42652;
 8023032:	68fb      	ldr	r3, [r7, #12]
 8023034:	69ba      	ldr	r2, [r7, #24]
 8023036:	621a      	str	r2, [r3, #32]
    side_sensor_ = side_sensor;
 8023038:	68fb      	ldr	r3, [r7, #12]
 802303a:	69fa      	ldr	r2, [r7, #28]
 802303c:	625a      	str	r2, [r3, #36]	; 0x24
}
 802303e:	68fb      	ldr	r3, [r7, #12]
 8023040:	4618      	mov	r0, r3
 8023042:	3714      	adds	r7, #20
 8023044:	46bd      	mov	sp, r7
 8023046:	f85d 7b04 	ldr.w	r7, [sp], #4
 802304a:	4770      	bx	lr

0802304c <_ZN7Logger27LoggingEv>:

void Logger2::Logging()
{
 802304c:	b580      	push	{r7, lr}
 802304e:	b084      	sub	sp, #16
 8023050:	af00      	add	r7, sp, #0
 8023052:	6078      	str	r0, [r7, #4]
    float distance = encoder_->GetDistanceStack();
 8023054:	687b      	ldr	r3, [r7, #4]
 8023056:	695b      	ldr	r3, [r3, #20]
 8023058:	4618      	mov	r0, r3
 802305a:	f7fd ff46 	bl	8020eea <_ZN7Encoder16GetDistanceStackEv>
 802305e:	ed87 0a03 	vstr	s0, [r7, #12]
    if(distance < LOGGING_CONST_DISTANCE) return;
 8023062:	edd7 7a03 	vldr	s15, [r7, #12]
 8023066:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 802306a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802306e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023072:	d436      	bmi.n	80230e2 <_ZN7Logger27LoggingEv+0x96>
    encoder_->ResetDistanceStack();
 8023074:	687b      	ldr	r3, [r7, #4]
 8023076:	695b      	ldr	r3, [r3, #20]
 8023078:	4618      	mov	r0, r3
 802307a:	f7fd ff19 	bl	8020eb0 <_ZN7Encoder18ResetDistanceStackEv>

    uint8_t result = StoreDistanceLog(distance);
 802307e:	ed97 0a03 	vldr	s0, [r7, #12]
 8023082:	6878      	ldr	r0, [r7, #4]
 8023084:	f000 f84c 	bl	8023120 <_ZN7Logger216StoreDistanceLogEf>
 8023088:	4603      	mov	r3, r0
 802308a:	72fb      	strb	r3, [r7, #11]
    CheckLoggingSuccess(ERROR_CODE_STORE_DISTANCE, result);
 802308c:	7afb      	ldrb	r3, [r7, #11]
 802308e:	461a      	mov	r2, r3
 8023090:	4916      	ldr	r1, [pc, #88]	; (80230ec <_ZN7Logger27LoggingEv+0xa0>)
 8023092:	6878      	ldr	r0, [r7, #4]
 8023094:	f000 fa1c 	bl	80234d0 <_ZN7Logger219CheckLoggingSuccessEmh>

    result = StoreRadianLog();
 8023098:	6878      	ldr	r0, [r7, #4]
 802309a:	f000 f88d 	bl	80231b8 <_ZN7Logger214StoreRadianLogEv>
 802309e:	4603      	mov	r3, r0
 80230a0:	72fb      	strb	r3, [r7, #11]
    CheckLoggingSuccess(ERROR_CODE_STORE_RADIAN, result);
 80230a2:	7afb      	ldrb	r3, [r7, #11]
 80230a4:	461a      	mov	r2, r3
 80230a6:	4912      	ldr	r1, [pc, #72]	; (80230f0 <_ZN7Logger27LoggingEv+0xa4>)
 80230a8:	6878      	ldr	r0, [r7, #4]
 80230aa:	f000 fa11 	bl	80234d0 <_ZN7Logger219CheckLoggingSuccessEmh>

    result = StoreVariousLog();
 80230ae:	6878      	ldr	r0, [r7, #4]
 80230b0:	f000 f8fa 	bl	80232a8 <_ZN7Logger215StoreVariousLogEv>
 80230b4:	4603      	mov	r3, r0
 80230b6:	72fb      	strb	r3, [r7, #11]
    CheckLoggingSuccess(ERROR_CODE_STORE_VARIOUS, result);
 80230b8:	7afb      	ldrb	r3, [r7, #11]
 80230ba:	461a      	mov	r2, r3
 80230bc:	490d      	ldr	r1, [pc, #52]	; (80230f4 <_ZN7Logger27LoggingEv+0xa8>)
 80230be:	6878      	ldr	r0, [r7, #4]
 80230c0:	f000 fa06 	bl	80234d0 <_ZN7Logger219CheckLoggingSuccessEmh>

    DistanceCorrection(distance);
 80230c4:	ed97 0a03 	vldr	s0, [r7, #12]
 80230c8:	6878      	ldr	r0, [r7, #4]
 80230ca:	f000 f9a7 	bl	802341c <_ZN7Logger218DistanceCorrectionEf>

    LoggingAccelPosition();
 80230ce:	6878      	ldr	r0, [r7, #4]
 80230d0:	f000 fa54 	bl	802357c <_ZN7Logger220LoggingAccelPositionEv>

    logging_now_address_++;
 80230d4:	687b      	ldr	r3, [r7, #4]
 80230d6:	899b      	ldrh	r3, [r3, #12]
 80230d8:	3301      	adds	r3, #1
 80230da:	b29a      	uxth	r2, r3
 80230dc:	687b      	ldr	r3, [r7, #4]
 80230de:	819a      	strh	r2, [r3, #12]
 80230e0:	e000      	b.n	80230e4 <_ZN7Logger27LoggingEv+0x98>
    if(distance < LOGGING_CONST_DISTANCE) return;
 80230e2:	bf00      	nop
}
 80230e4:	3710      	adds	r7, #16
 80230e6:	46bd      	mov	sp, r7
 80230e8:	bd80      	pop	{r7, pc}
 80230ea:	bf00      	nop
 80230ec:	08018000 	.word	0x08018000
 80230f0:	08018100 	.word	0x08018100
 80230f4:	08018200 	.word	0x08018200

080230f8 <_ZN7Logger216AssertNowaddressEt>:

bool Logger2::AssertNowaddress(uint16_t now_address)
{
 80230f8:	b480      	push	{r7}
 80230fa:	b083      	sub	sp, #12
 80230fc:	af00      	add	r7, sp, #0
 80230fe:	6078      	str	r0, [r7, #4]
 8023100:	460b      	mov	r3, r1
 8023102:	807b      	strh	r3, [r7, #2]
    if(now_address == logging_now_address_) return true;
 8023104:	687b      	ldr	r3, [r7, #4]
 8023106:	899b      	ldrh	r3, [r3, #12]
 8023108:	887a      	ldrh	r2, [r7, #2]
 802310a:	429a      	cmp	r2, r3
 802310c:	d101      	bne.n	8023112 <_ZN7Logger216AssertNowaddressEt+0x1a>
 802310e:	2301      	movs	r3, #1
 8023110:	e000      	b.n	8023114 <_ZN7Logger216AssertNowaddressEt+0x1c>
    else return false;
 8023112:	2300      	movs	r3, #0
}
 8023114:	4618      	mov	r0, r3
 8023116:	370c      	adds	r7, #12
 8023118:	46bd      	mov	sp, r7
 802311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802311e:	4770      	bx	lr

08023120 <_ZN7Logger216StoreDistanceLogEf>:

uint8_t Logger2::StoreDistanceLog(float distance)
{
 8023120:	b580      	push	{r7, lr}
 8023122:	b084      	sub	sp, #16
 8023124:	af00      	add	r7, sp, #0
 8023126:	6078      	str	r0, [r7, #4]
 8023128:	ed87 0a00 	vstr	s0, [r7]
    static uint16_t now_address = 0;
    uint32_t address = now_address * 4 + HEAD_ADDRESS_BLOCK_A;
 802312c:	4b21      	ldr	r3, [pc, #132]	; (80231b4 <_ZN7Logger216StoreDistanceLogEf+0x94>)
 802312e:	881b      	ldrh	r3, [r3, #0]
 8023130:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8023134:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8023138:	009b      	lsls	r3, r3, #2
 802313a:	60bb      	str	r3, [r7, #8]
    uint8_t result = 0;
 802313c:	2300      	movs	r3, #0
 802313e:	73fb      	strb	r3, [r7, #15]

    if(!AssertNowaddress(now_address)) result = 0x01;
 8023140:	4b1c      	ldr	r3, [pc, #112]	; (80231b4 <_ZN7Logger216StoreDistanceLogEf+0x94>)
 8023142:	881b      	ldrh	r3, [r3, #0]
 8023144:	4619      	mov	r1, r3
 8023146:	6878      	ldr	r0, [r7, #4]
 8023148:	f7ff ffd6 	bl	80230f8 <_ZN7Logger216AssertNowaddressEt>
 802314c:	4603      	mov	r3, r0
 802314e:	f083 0301 	eor.w	r3, r3, #1
 8023152:	b2db      	uxtb	r3, r3
 8023154:	2b00      	cmp	r3, #0
 8023156:	d002      	beq.n	802315e <_ZN7Logger216StoreDistanceLogEf+0x3e>
 8023158:	2301      	movs	r3, #1
 802315a:	73fb      	strb	r3, [r7, #15]
 802315c:	e01e      	b.n	802319c <_ZN7Logger216StoreDistanceLogEf+0x7c>
    else if(!flash_->CheckBlankWord(address, 1)) result = 0x02;
 802315e:	687b      	ldr	r3, [r7, #4]
 8023160:	699b      	ldr	r3, [r3, #24]
 8023162:	2201      	movs	r2, #1
 8023164:	68b9      	ldr	r1, [r7, #8]
 8023166:	4618      	mov	r0, r3
 8023168:	f7fe f863 	bl	8021232 <_ZN5Flash14CheckBlankWordEmm>
 802316c:	4603      	mov	r3, r0
 802316e:	f083 0301 	eor.w	r3, r3, #1
 8023172:	b2db      	uxtb	r3, r3
 8023174:	2b00      	cmp	r3, #0
 8023176:	d002      	beq.n	802317e <_ZN7Logger216StoreDistanceLogEf+0x5e>
 8023178:	2302      	movs	r3, #2
 802317a:	73fb      	strb	r3, [r7, #15]
 802317c:	e00e      	b.n	802319c <_ZN7Logger216StoreDistanceLogEf+0x7c>
    else if(!flash_->StoreFloat(address, &distance, 1)) result = 0x03;
 802317e:	687b      	ldr	r3, [r7, #4]
 8023180:	6998      	ldr	r0, [r3, #24]
 8023182:	463a      	mov	r2, r7
 8023184:	2301      	movs	r3, #1
 8023186:	68b9      	ldr	r1, [r7, #8]
 8023188:	f7fd ff7b 	bl	8021082 <_ZN5Flash10StoreFloatEmPfm>
 802318c:	4603      	mov	r3, r0
 802318e:	f083 0301 	eor.w	r3, r3, #1
 8023192:	b2db      	uxtb	r3, r3
 8023194:	2b00      	cmp	r3, #0
 8023196:	d001      	beq.n	802319c <_ZN7Logger216StoreDistanceLogEf+0x7c>
 8023198:	2303      	movs	r3, #3
 802319a:	73fb      	strb	r3, [r7, #15]

    now_address++;
 802319c:	4b05      	ldr	r3, [pc, #20]	; (80231b4 <_ZN7Logger216StoreDistanceLogEf+0x94>)
 802319e:	881b      	ldrh	r3, [r3, #0]
 80231a0:	3301      	adds	r3, #1
 80231a2:	b29a      	uxth	r2, r3
 80231a4:	4b03      	ldr	r3, [pc, #12]	; (80231b4 <_ZN7Logger216StoreDistanceLogEf+0x94>)
 80231a6:	801a      	strh	r2, [r3, #0]

    return result;
 80231a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80231aa:	4618      	mov	r0, r3
 80231ac:	3710      	adds	r7, #16
 80231ae:	46bd      	mov	sp, r7
 80231b0:	bd80      	pop	{r7, pc}
 80231b2:	bf00      	nop
 80231b4:	200000b6 	.word	0x200000b6

080231b8 <_ZN7Logger214StoreRadianLogEv>:

uint8_t Logger2::StoreRadianLog()
{
 80231b8:	b590      	push	{r4, r7, lr}
 80231ba:	b089      	sub	sp, #36	; 0x24
 80231bc:	af00      	add	r7, sp, #0
 80231be:	6078      	str	r0, [r7, #4]
    static uint16_t now_address = 0;
    uint32_t address = now_address * 4 + HEAD_ADDRESS_BLOCK_B;
 80231c0:	4b37      	ldr	r3, [pc, #220]	; (80232a0 <_ZN7Logger214StoreRadianLogEv+0xe8>)
 80231c2:	881b      	ldrh	r3, [r3, #0]
 80231c4:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80231c8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80231cc:	009b      	lsls	r3, r3, #2
 80231ce:	61bb      	str	r3, [r7, #24]
    uint8_t result = 0;
 80231d0:	2300      	movs	r3, #0
 80231d2:	77fb      	strb	r3, [r7, #31]

    double degree = iim_42652_->GetDegreeStackZ();
 80231d4:	687b      	ldr	r3, [r7, #4]
 80231d6:	6a1b      	ldr	r3, [r3, #32]
 80231d8:	4618      	mov	r0, r3
 80231da:	f7fe fa81 	bl	80216e0 <_ZN8Iim4265215GetDegreeStackZEv>
 80231de:	ed87 0b04 	vstr	d0, [r7, #16]
    float radian = static_cast<float>(degree * M_PI / 180.0);
 80231e2:	a32d      	add	r3, pc, #180	; (adr r3, 8023298 <_ZN7Logger214StoreRadianLogEv+0xe0>)
 80231e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80231ec:	f7fd f8e4 	bl	80203b8 <__aeabi_dmul>
 80231f0:	4603      	mov	r3, r0
 80231f2:	460c      	mov	r4, r1
 80231f4:	4618      	mov	r0, r3
 80231f6:	4621      	mov	r1, r4
 80231f8:	f04f 0200 	mov.w	r2, #0
 80231fc:	4b29      	ldr	r3, [pc, #164]	; (80232a4 <_ZN7Logger214StoreRadianLogEv+0xec>)
 80231fe:	f7fd fa05 	bl	802060c <__aeabi_ddiv>
 8023202:	4603      	mov	r3, r0
 8023204:	460c      	mov	r4, r1
 8023206:	4618      	mov	r0, r3
 8023208:	4621      	mov	r1, r4
 802320a:	f7fd fb6f 	bl	80208ec <__aeabi_d2f>
 802320e:	4603      	mov	r3, r0
 8023210:	60fb      	str	r3, [r7, #12]
    iim_42652_->ResetDegreeStackZ();
 8023212:	687b      	ldr	r3, [r7, #4]
 8023214:	6a1b      	ldr	r3, [r3, #32]
 8023216:	4618      	mov	r0, r3
 8023218:	f7fe fa52 	bl	80216c0 <_ZN8Iim4265217ResetDegreeStackZEv>
    logging_radian_buff_ = radian;
 802321c:	68fa      	ldr	r2, [r7, #12]
 802321e:	687b      	ldr	r3, [r7, #4]
 8023220:	605a      	str	r2, [r3, #4]

    if(!AssertNowaddress(now_address)) result = 0x01;
 8023222:	4b1f      	ldr	r3, [pc, #124]	; (80232a0 <_ZN7Logger214StoreRadianLogEv+0xe8>)
 8023224:	881b      	ldrh	r3, [r3, #0]
 8023226:	4619      	mov	r1, r3
 8023228:	6878      	ldr	r0, [r7, #4]
 802322a:	f7ff ff65 	bl	80230f8 <_ZN7Logger216AssertNowaddressEt>
 802322e:	4603      	mov	r3, r0
 8023230:	f083 0301 	eor.w	r3, r3, #1
 8023234:	b2db      	uxtb	r3, r3
 8023236:	2b00      	cmp	r3, #0
 8023238:	d002      	beq.n	8023240 <_ZN7Logger214StoreRadianLogEv+0x88>
 802323a:	2301      	movs	r3, #1
 802323c:	77fb      	strb	r3, [r7, #31]
 802323e:	e01f      	b.n	8023280 <_ZN7Logger214StoreRadianLogEv+0xc8>
    else if(!flash_->CheckBlankWord(address, 1)) result = 0x02;
 8023240:	687b      	ldr	r3, [r7, #4]
 8023242:	699b      	ldr	r3, [r3, #24]
 8023244:	2201      	movs	r2, #1
 8023246:	69b9      	ldr	r1, [r7, #24]
 8023248:	4618      	mov	r0, r3
 802324a:	f7fd fff2 	bl	8021232 <_ZN5Flash14CheckBlankWordEmm>
 802324e:	4603      	mov	r3, r0
 8023250:	f083 0301 	eor.w	r3, r3, #1
 8023254:	b2db      	uxtb	r3, r3
 8023256:	2b00      	cmp	r3, #0
 8023258:	d002      	beq.n	8023260 <_ZN7Logger214StoreRadianLogEv+0xa8>
 802325a:	2302      	movs	r3, #2
 802325c:	77fb      	strb	r3, [r7, #31]
 802325e:	e00f      	b.n	8023280 <_ZN7Logger214StoreRadianLogEv+0xc8>
    else if(!flash_->StoreFloat(address, &radian, 1)) result = 0x03;
 8023260:	687b      	ldr	r3, [r7, #4]
 8023262:	6998      	ldr	r0, [r3, #24]
 8023264:	f107 020c 	add.w	r2, r7, #12
 8023268:	2301      	movs	r3, #1
 802326a:	69b9      	ldr	r1, [r7, #24]
 802326c:	f7fd ff09 	bl	8021082 <_ZN5Flash10StoreFloatEmPfm>
 8023270:	4603      	mov	r3, r0
 8023272:	f083 0301 	eor.w	r3, r3, #1
 8023276:	b2db      	uxtb	r3, r3
 8023278:	2b00      	cmp	r3, #0
 802327a:	d001      	beq.n	8023280 <_ZN7Logger214StoreRadianLogEv+0xc8>
 802327c:	2303      	movs	r3, #3
 802327e:	77fb      	strb	r3, [r7, #31]

    now_address++;
 8023280:	4b07      	ldr	r3, [pc, #28]	; (80232a0 <_ZN7Logger214StoreRadianLogEv+0xe8>)
 8023282:	881b      	ldrh	r3, [r3, #0]
 8023284:	3301      	adds	r3, #1
 8023286:	b29a      	uxth	r2, r3
 8023288:	4b05      	ldr	r3, [pc, #20]	; (80232a0 <_ZN7Logger214StoreRadianLogEv+0xe8>)
 802328a:	801a      	strh	r2, [r3, #0]

    return result;
 802328c:	7ffb      	ldrb	r3, [r7, #31]
}
 802328e:	4618      	mov	r0, r3
 8023290:	3724      	adds	r7, #36	; 0x24
 8023292:	46bd      	mov	sp, r7
 8023294:	bd90      	pop	{r4, r7, pc}
 8023296:	bf00      	nop
 8023298:	54442d18 	.word	0x54442d18
 802329c:	400921fb 	.word	0x400921fb
 80232a0:	200000b8 	.word	0x200000b8
 80232a4:	40668000 	.word	0x40668000

080232a8 <_ZN7Logger215StoreVariousLogEv>:

uint8_t Logger2::StoreVariousLog()
{
 80232a8:	b580      	push	{r7, lr}
 80232aa:	b086      	sub	sp, #24
 80232ac:	af00      	add	r7, sp, #0
 80232ae:	6078      	str	r0, [r7, #4]
    static uint16_t now_address = 0;
    uint32_t address = now_address * 2 + HEAD_ADDRESS_BLOCK_C;
 80232b0:	4b55      	ldr	r3, [pc, #340]	; (8023408 <_ZN7Logger215StoreVariousLogEv+0x160>)
 80232b2:	881b      	ldrh	r3, [r3, #0]
 80232b4:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 80232b8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80232bc:	005b      	lsls	r3, r3, #1
 80232be:	613b      	str	r3, [r7, #16]
    uint8_t result = 0;
 80232c0:	2300      	movs	r3, #0
 80232c2:	75fb      	strb	r3, [r7, #23]

    uint8_t corner_count = side_sensor_->GetCornerMarkerCount();
 80232c4:	687b      	ldr	r3, [r7, #4]
 80232c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80232c8:	4618      	mov	r0, r3
 80232ca:	f002 fc7c 	bl	8025bc6 <_ZN10SideSensor20GetCornerMarkerCountEv>
 80232ce:	4603      	mov	r3, r0
 80232d0:	73fb      	strb	r3, [r7, #15]
    uint8_t cross_count  = side_sensor_->GetCrossLineCount();
 80232d2:	687b      	ldr	r3, [r7, #4]
 80232d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80232d6:	4618      	mov	r0, r3
 80232d8:	f002 fc81 	bl	8025bde <_ZN10SideSensor17GetCrossLineCountEv>
 80232dc:	4603      	mov	r3, r0
 80232de:	73bb      	strb	r3, [r7, #14]
    static uint8_t pre_corner_count = corner_count;
 80232e0:	4b4a      	ldr	r3, [pc, #296]	; (802340c <_ZN7Logger215StoreVariousLogEv+0x164>)
 80232e2:	781b      	ldrb	r3, [r3, #0]
 80232e4:	f3bf 8f5b 	dmb	ish
 80232e8:	b2db      	uxtb	r3, r3
 80232ea:	f003 0301 	and.w	r3, r3, #1
 80232ee:	2b00      	cmp	r3, #0
 80232f0:	bf0c      	ite	eq
 80232f2:	2301      	moveq	r3, #1
 80232f4:	2300      	movne	r3, #0
 80232f6:	b2db      	uxtb	r3, r3
 80232f8:	2b00      	cmp	r3, #0
 80232fa:	d010      	beq.n	802331e <_ZN7Logger215StoreVariousLogEv+0x76>
 80232fc:	4843      	ldr	r0, [pc, #268]	; (802340c <_ZN7Logger215StoreVariousLogEv+0x164>)
 80232fe:	f007 fbdb 	bl	802aab8 <__cxa_guard_acquire>
 8023302:	4603      	mov	r3, r0
 8023304:	2b00      	cmp	r3, #0
 8023306:	bf14      	ite	ne
 8023308:	2301      	movne	r3, #1
 802330a:	2300      	moveq	r3, #0
 802330c:	b2db      	uxtb	r3, r3
 802330e:	2b00      	cmp	r3, #0
 8023310:	d005      	beq.n	802331e <_ZN7Logger215StoreVariousLogEv+0x76>
 8023312:	4a3f      	ldr	r2, [pc, #252]	; (8023410 <_ZN7Logger215StoreVariousLogEv+0x168>)
 8023314:	7bfb      	ldrb	r3, [r7, #15]
 8023316:	7013      	strb	r3, [r2, #0]
 8023318:	483c      	ldr	r0, [pc, #240]	; (802340c <_ZN7Logger215StoreVariousLogEv+0x164>)
 802331a:	f007 fbd9 	bl	802aad0 <__cxa_guard_release>
    static uint8_t pre_cross_count  = cross_count;
 802331e:	4b3d      	ldr	r3, [pc, #244]	; (8023414 <_ZN7Logger215StoreVariousLogEv+0x16c>)
 8023320:	781b      	ldrb	r3, [r3, #0]
 8023322:	f3bf 8f5b 	dmb	ish
 8023326:	b2db      	uxtb	r3, r3
 8023328:	f003 0301 	and.w	r3, r3, #1
 802332c:	2b00      	cmp	r3, #0
 802332e:	bf0c      	ite	eq
 8023330:	2301      	moveq	r3, #1
 8023332:	2300      	movne	r3, #0
 8023334:	b2db      	uxtb	r3, r3
 8023336:	2b00      	cmp	r3, #0
 8023338:	d010      	beq.n	802335c <_ZN7Logger215StoreVariousLogEv+0xb4>
 802333a:	4836      	ldr	r0, [pc, #216]	; (8023414 <_ZN7Logger215StoreVariousLogEv+0x16c>)
 802333c:	f007 fbbc 	bl	802aab8 <__cxa_guard_acquire>
 8023340:	4603      	mov	r3, r0
 8023342:	2b00      	cmp	r3, #0
 8023344:	bf14      	ite	ne
 8023346:	2301      	movne	r3, #1
 8023348:	2300      	moveq	r3, #0
 802334a:	b2db      	uxtb	r3, r3
 802334c:	2b00      	cmp	r3, #0
 802334e:	d005      	beq.n	802335c <_ZN7Logger215StoreVariousLogEv+0xb4>
 8023350:	4a31      	ldr	r2, [pc, #196]	; (8023418 <_ZN7Logger215StoreVariousLogEv+0x170>)
 8023352:	7bbb      	ldrb	r3, [r7, #14]
 8023354:	7013      	strb	r3, [r2, #0]
 8023356:	482f      	ldr	r0, [pc, #188]	; (8023414 <_ZN7Logger215StoreVariousLogEv+0x16c>)
 8023358:	f007 fbba 	bl	802aad0 <__cxa_guard_release>
    uint16_t various = 0;
 802335c:	2300      	movs	r3, #0
 802335e:	81bb      	strh	r3, [r7, #12]

    if(pre_corner_count != corner_count) various |= 0x0002;
 8023360:	4b2b      	ldr	r3, [pc, #172]	; (8023410 <_ZN7Logger215StoreVariousLogEv+0x168>)
 8023362:	781b      	ldrb	r3, [r3, #0]
 8023364:	7bfa      	ldrb	r2, [r7, #15]
 8023366:	429a      	cmp	r2, r3
 8023368:	d004      	beq.n	8023374 <_ZN7Logger215StoreVariousLogEv+0xcc>
 802336a:	89bb      	ldrh	r3, [r7, #12]
 802336c:	f043 0302 	orr.w	r3, r3, #2
 8023370:	b29b      	uxth	r3, r3
 8023372:	81bb      	strh	r3, [r7, #12]
    if(pre_cross_count != cross_count)   various |= 0x0001;
 8023374:	4b28      	ldr	r3, [pc, #160]	; (8023418 <_ZN7Logger215StoreVariousLogEv+0x170>)
 8023376:	781b      	ldrb	r3, [r3, #0]
 8023378:	7bba      	ldrb	r2, [r7, #14]
 802337a:	429a      	cmp	r2, r3
 802337c:	d004      	beq.n	8023388 <_ZN7Logger215StoreVariousLogEv+0xe0>
 802337e:	89bb      	ldrh	r3, [r7, #12]
 8023380:	f043 0301 	orr.w	r3, r3, #1
 8023384:	b29b      	uxth	r3, r3
 8023386:	81bb      	strh	r3, [r7, #12]

    pre_corner_count = corner_count;
 8023388:	4a21      	ldr	r2, [pc, #132]	; (8023410 <_ZN7Logger215StoreVariousLogEv+0x168>)
 802338a:	7bfb      	ldrb	r3, [r7, #15]
 802338c:	7013      	strb	r3, [r2, #0]
    pre_cross_count  = cross_count;
 802338e:	4a22      	ldr	r2, [pc, #136]	; (8023418 <_ZN7Logger215StoreVariousLogEv+0x170>)
 8023390:	7bbb      	ldrb	r3, [r7, #14]
 8023392:	7013      	strb	r3, [r2, #0]

    if(!AssertNowaddress(now_address)) result = 0x01;
 8023394:	4b1c      	ldr	r3, [pc, #112]	; (8023408 <_ZN7Logger215StoreVariousLogEv+0x160>)
 8023396:	881b      	ldrh	r3, [r3, #0]
 8023398:	4619      	mov	r1, r3
 802339a:	6878      	ldr	r0, [r7, #4]
 802339c:	f7ff feac 	bl	80230f8 <_ZN7Logger216AssertNowaddressEt>
 80233a0:	4603      	mov	r3, r0
 80233a2:	f083 0301 	eor.w	r3, r3, #1
 80233a6:	b2db      	uxtb	r3, r3
 80233a8:	2b00      	cmp	r3, #0
 80233aa:	d002      	beq.n	80233b2 <_ZN7Logger215StoreVariousLogEv+0x10a>
 80233ac:	2301      	movs	r3, #1
 80233ae:	75fb      	strb	r3, [r7, #23]
 80233b0:	e01f      	b.n	80233f2 <_ZN7Logger215StoreVariousLogEv+0x14a>
    else if(!flash_->CheckBlankHalfword(address, 1)) result = 0x02;
 80233b2:	687b      	ldr	r3, [r7, #4]
 80233b4:	699b      	ldr	r3, [r3, #24]
 80233b6:	2201      	movs	r2, #1
 80233b8:	6939      	ldr	r1, [r7, #16]
 80233ba:	4618      	mov	r0, r3
 80233bc:	f7fd fee5 	bl	802118a <_ZN5Flash18CheckBlankHalfwordEmm>
 80233c0:	4603      	mov	r3, r0
 80233c2:	f083 0301 	eor.w	r3, r3, #1
 80233c6:	b2db      	uxtb	r3, r3
 80233c8:	2b00      	cmp	r3, #0
 80233ca:	d002      	beq.n	80233d2 <_ZN7Logger215StoreVariousLogEv+0x12a>
 80233cc:	2302      	movs	r3, #2
 80233ce:	75fb      	strb	r3, [r7, #23]
 80233d0:	e00f      	b.n	80233f2 <_ZN7Logger215StoreVariousLogEv+0x14a>
    else if(!flash_->StoreUint16(address, &various, 1)) result = 0x03;
 80233d2:	687b      	ldr	r3, [r7, #4]
 80233d4:	6998      	ldr	r0, [r3, #24]
 80233d6:	f107 020c 	add.w	r2, r7, #12
 80233da:	2301      	movs	r3, #1
 80233dc:	6939      	ldr	r1, [r7, #16]
 80233de:	f7fd fe1b 	bl	8021018 <_ZN5Flash11StoreUint16EmPtm>
 80233e2:	4603      	mov	r3, r0
 80233e4:	f083 0301 	eor.w	r3, r3, #1
 80233e8:	b2db      	uxtb	r3, r3
 80233ea:	2b00      	cmp	r3, #0
 80233ec:	d001      	beq.n	80233f2 <_ZN7Logger215StoreVariousLogEv+0x14a>
 80233ee:	2303      	movs	r3, #3
 80233f0:	75fb      	strb	r3, [r7, #23]

    now_address++;
 80233f2:	4b05      	ldr	r3, [pc, #20]	; (8023408 <_ZN7Logger215StoreVariousLogEv+0x160>)
 80233f4:	881b      	ldrh	r3, [r3, #0]
 80233f6:	3301      	adds	r3, #1
 80233f8:	b29a      	uxth	r2, r3
 80233fa:	4b03      	ldr	r3, [pc, #12]	; (8023408 <_ZN7Logger215StoreVariousLogEv+0x160>)
 80233fc:	801a      	strh	r2, [r3, #0]

    return result;
 80233fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8023400:	4618      	mov	r0, r3
 8023402:	3718      	adds	r7, #24
 8023404:	46bd      	mov	sp, r7
 8023406:	bd80      	pop	{r7, pc}
 8023408:	200000ba 	.word	0x200000ba
 802340c:	200000c0 	.word	0x200000c0
 8023410:	200000bc 	.word	0x200000bc
 8023414:	200000c8 	.word	0x200000c8
 8023418:	200000c4 	.word	0x200000c4

0802341c <_ZN7Logger218DistanceCorrectionEf>:

void Logger2::DistanceCorrection(float distance)
{
 802341c:	b5b0      	push	{r4, r5, r7, lr}
 802341e:	b084      	sub	sp, #16
 8023420:	af00      	add	r7, sp, #0
 8023422:	6078      	str	r0, [r7, #4]
 8023424:	ed87 0a00 	vstr	s0, [r7]
    uncorrected_address_buff_ = logging_now_address_;
 8023428:	687b      	ldr	r3, [r7, #4]
 802342a:	899a      	ldrh	r2, [r3, #12]
 802342c:	687b      	ldr	r3, [r7, #4]
 802342e:	815a      	strh	r2, [r3, #10]

    static float excess_stack = 0;
    excess_stack += distance - LOGGING_CONST_DISTANCE;
 8023430:	4b24      	ldr	r3, [pc, #144]	; (80234c4 <_ZN7Logger218DistanceCorrectionEf+0xa8>)
 8023432:	681b      	ldr	r3, [r3, #0]
 8023434:	4618      	mov	r0, r3
 8023436:	f7fc ff67 	bl	8020308 <__aeabi_f2d>
 802343a:	4604      	mov	r4, r0
 802343c:	460d      	mov	r5, r1
 802343e:	6838      	ldr	r0, [r7, #0]
 8023440:	f7fc ff62 	bl	8020308 <__aeabi_f2d>
 8023444:	f04f 0200 	mov.w	r2, #0
 8023448:	4b1f      	ldr	r3, [pc, #124]	; (80234c8 <_ZN7Logger218DistanceCorrectionEf+0xac>)
 802344a:	f7fc fdfd 	bl	8020048 <__aeabi_dsub>
 802344e:	4602      	mov	r2, r0
 8023450:	460b      	mov	r3, r1
 8023452:	4620      	mov	r0, r4
 8023454:	4629      	mov	r1, r5
 8023456:	f7fc fdf9 	bl	802004c <__adddf3>
 802345a:	4603      	mov	r3, r0
 802345c:	460c      	mov	r4, r1
 802345e:	4618      	mov	r0, r3
 8023460:	4621      	mov	r1, r4
 8023462:	f7fd fa43 	bl	80208ec <__aeabi_d2f>
 8023466:	4602      	mov	r2, r0
 8023468:	4b16      	ldr	r3, [pc, #88]	; (80234c4 <_ZN7Logger218DistanceCorrectionEf+0xa8>)
 802346a:	601a      	str	r2, [r3, #0]

    if(excess_stack > LOGGING_CONST_DISTANCE)
 802346c:	4b15      	ldr	r3, [pc, #84]	; (80234c4 <_ZN7Logger218DistanceCorrectionEf+0xa8>)
 802346e:	edd3 7a00 	vldr	s15, [r3]
 8023472:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8023476:	eef4 7ac7 	vcmpe.f32	s15, s14
 802347a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802347e:	dc00      	bgt.n	8023482 <_ZN7Logger218DistanceCorrectionEf+0x66>

        excess_stack -= LOGGING_CONST_DISTANCE;

        logging_now_address_++;
    }
}
 8023480:	e01c      	b.n	80234bc <_ZN7Logger218DistanceCorrectionEf+0xa0>
        uint8_t result = StoreDistanceLog(distance);
 8023482:	ed97 0a00 	vldr	s0, [r7]
 8023486:	6878      	ldr	r0, [r7, #4]
 8023488:	f7ff fe4a 	bl	8023120 <_ZN7Logger216StoreDistanceLogEf>
 802348c:	4603      	mov	r3, r0
 802348e:	73fb      	strb	r3, [r7, #15]
        CheckLoggingSuccess(ERROR_CODE_STORE_DISTANCE, result);
 8023490:	7bfb      	ldrb	r3, [r7, #15]
 8023492:	461a      	mov	r2, r3
 8023494:	490d      	ldr	r1, [pc, #52]	; (80234cc <_ZN7Logger218DistanceCorrectionEf+0xb0>)
 8023496:	6878      	ldr	r0, [r7, #4]
 8023498:	f000 f81a 	bl	80234d0 <_ZN7Logger219CheckLoggingSuccessEmh>
        excess_stack -= LOGGING_CONST_DISTANCE;
 802349c:	4b09      	ldr	r3, [pc, #36]	; (80234c4 <_ZN7Logger218DistanceCorrectionEf+0xa8>)
 802349e:	edd3 7a00 	vldr	s15, [r3]
 80234a2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80234a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80234aa:	4b06      	ldr	r3, [pc, #24]	; (80234c4 <_ZN7Logger218DistanceCorrectionEf+0xa8>)
 80234ac:	edc3 7a00 	vstr	s15, [r3]
        logging_now_address_++;
 80234b0:	687b      	ldr	r3, [r7, #4]
 80234b2:	899b      	ldrh	r3, [r3, #12]
 80234b4:	3301      	adds	r3, #1
 80234b6:	b29a      	uxth	r2, r3
 80234b8:	687b      	ldr	r3, [r7, #4]
 80234ba:	819a      	strh	r2, [r3, #12]
}
 80234bc:	bf00      	nop
 80234be:	3710      	adds	r7, #16
 80234c0:	46bd      	mov	sp, r7
 80234c2:	bdb0      	pop	{r4, r5, r7, pc}
 80234c4:	200000cc 	.word	0x200000cc
 80234c8:	40340000 	.word	0x40340000
 80234cc:	08018000 	.word	0x08018000

080234d0 <_ZN7Logger219CheckLoggingSuccessEmh>:

void Logger2::CheckLoggingSuccess(uint32_t address, uint8_t data)
{
 80234d0:	b580      	push	{r7, lr}
 80234d2:	b084      	sub	sp, #16
 80234d4:	af00      	add	r7, sp, #0
 80234d6:	60f8      	str	r0, [r7, #12]
 80234d8:	60b9      	str	r1, [r7, #8]
 80234da:	4613      	mov	r3, r2
 80234dc:	71fb      	strb	r3, [r7, #7]
    if(data != 0)
 80234de:	79fb      	ldrb	r3, [r7, #7]
 80234e0:	2b00      	cmp	r3, #0
 80234e2:	d011      	beq.n	8023508 <_ZN7Logger219CheckLoggingSuccessEmh+0x38>
    {
        SetEmergencyStopFlag(true);
 80234e4:	2101      	movs	r1, #1
 80234e6:	68f8      	ldr	r0, [r7, #12]
 80234e8:	f000 f812 	bl	8023510 <_ZN7Logger220SetEmergencyStopFlagEb>

        if(flash_->StoreUint8(address, &data, 1))
 80234ec:	68fb      	ldr	r3, [r7, #12]
 80234ee:	6998      	ldr	r0, [r3, #24]
 80234f0:	1dfa      	adds	r2, r7, #7
 80234f2:	2301      	movs	r3, #1
 80234f4:	68b9      	ldr	r1, [r7, #8]
 80234f6:	f7fd fd5b 	bl	8020fb0 <_ZN5Flash10StoreUint8EmPhm>
 80234fa:	4603      	mov	r3, r0
 80234fc:	2b00      	cmp	r3, #0
 80234fe:	d003      	beq.n	8023508 <_ZN7Logger219CheckLoggingSuccessEmh+0x38>
        {
            SetSuccessEmergencyCodeStore(true);
 8023500:	2101      	movs	r1, #1
 8023502:	68f8      	ldr	r0, [r7, #12]
 8023504:	f000 f81f 	bl	8023546 <_ZN7Logger228SetSuccessEmergencyCodeStoreEb>
        }
    }
}
 8023508:	bf00      	nop
 802350a:	3710      	adds	r7, #16
 802350c:	46bd      	mov	sp, r7
 802350e:	bd80      	pop	{r7, pc}

08023510 <_ZN7Logger220SetEmergencyStopFlagEb>:

void Logger2::SetEmergencyStopFlag(bool boolean)
{
 8023510:	b480      	push	{r7}
 8023512:	b083      	sub	sp, #12
 8023514:	af00      	add	r7, sp, #0
 8023516:	6078      	str	r0, [r7, #4]
 8023518:	460b      	mov	r3, r1
 802351a:	70fb      	strb	r3, [r7, #3]
    emergency_stop_flag_ = boolean;
 802351c:	687b      	ldr	r3, [r7, #4]
 802351e:	78fa      	ldrb	r2, [r7, #3]
 8023520:	701a      	strb	r2, [r3, #0]
}
 8023522:	bf00      	nop
 8023524:	370c      	adds	r7, #12
 8023526:	46bd      	mov	sp, r7
 8023528:	f85d 7b04 	ldr.w	r7, [sp], #4
 802352c:	4770      	bx	lr

0802352e <_ZN7Logger220GetEmergencyStopFlagEv>:

bool Logger2::GetEmergencyStopFlag()
{
 802352e:	b480      	push	{r7}
 8023530:	b083      	sub	sp, #12
 8023532:	af00      	add	r7, sp, #0
 8023534:	6078      	str	r0, [r7, #4]
    return emergency_stop_flag_;
 8023536:	687b      	ldr	r3, [r7, #4]
 8023538:	781b      	ldrb	r3, [r3, #0]
}
 802353a:	4618      	mov	r0, r3
 802353c:	370c      	adds	r7, #12
 802353e:	46bd      	mov	sp, r7
 8023540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023544:	4770      	bx	lr

08023546 <_ZN7Logger228SetSuccessEmergencyCodeStoreEb>:

void Logger2::SetSuccessEmergencyCodeStore(bool boolean)
{
 8023546:	b480      	push	{r7}
 8023548:	b083      	sub	sp, #12
 802354a:	af00      	add	r7, sp, #0
 802354c:	6078      	str	r0, [r7, #4]
 802354e:	460b      	mov	r3, r1
 8023550:	70fb      	strb	r3, [r7, #3]
    success_emergency_code_store_ = boolean;
 8023552:	687b      	ldr	r3, [r7, #4]
 8023554:	78fa      	ldrb	r2, [r7, #3]
 8023556:	705a      	strb	r2, [r3, #1]
}
 8023558:	bf00      	nop
 802355a:	370c      	adds	r7, #12
 802355c:	46bd      	mov	sp, r7
 802355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023562:	4770      	bx	lr

08023564 <_ZN7Logger228GetSuccessEmergencyCodeStoreEv>:

bool Logger2::GetSuccessEmergencyCodeStore()
{
 8023564:	b480      	push	{r7}
 8023566:	b083      	sub	sp, #12
 8023568:	af00      	add	r7, sp, #0
 802356a:	6078      	str	r0, [r7, #4]
    return success_emergency_code_store_;
 802356c:	687b      	ldr	r3, [r7, #4]
 802356e:	785b      	ldrb	r3, [r3, #1]
}
 8023570:	4618      	mov	r0, r3
 8023572:	370c      	adds	r7, #12
 8023574:	46bd      	mov	sp, r7
 8023576:	f85d 7b04 	ldr.w	r7, [sp], #4
 802357a:	4770      	bx	lr

0802357c <_ZN7Logger220LoggingAccelPositionEv>:

void Logger2::LoggingAccelPosition()
{
 802357c:	b580      	push	{r7, lr}
 802357e:	b088      	sub	sp, #32
 8023580:	af00      	add	r7, sp, #0
 8023582:	6078      	str	r0, [r7, #4]
    static uint16_t accel_straight_count = 0;
    static uint8_t accel_step = 0;

    if(fabs(encoder_->AngularVelocity()) < STRAIGHT_BORDER_ENCODER)
 8023584:	687b      	ldr	r3, [r7, #4]
 8023586:	695b      	ldr	r3, [r3, #20]
 8023588:	4618      	mov	r0, r3
 802358a:	f7fd fcbd 	bl	8020f08 <_ZN7Encoder15AngularVelocityEv>
 802358e:	eef0 7a40 	vmov.f32	s15, s0
 8023592:	eeb0 0a67 	vmov.f32	s0, s15
 8023596:	f7fe fedf 	bl	8022358 <_ZSt4fabsf>
 802359a:	eeb0 7a40 	vmov.f32	s14, s0
 802359e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80235a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80235a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80235aa:	bf4c      	ite	mi
 80235ac:	2301      	movmi	r3, #1
 80235ae:	2300      	movpl	r3, #0
 80235b0:	b2db      	uxtb	r3, r3
 80235b2:	2b00      	cmp	r3, #0
 80235b4:	d02a      	beq.n	802360c <_ZN7Logger220LoggingAccelPositionEv+0x90>
    {
        accel_straight_count++;
 80235b6:	4b30      	ldr	r3, [pc, #192]	; (8023678 <_ZN7Logger220LoggingAccelPositionEv+0xfc>)
 80235b8:	881b      	ldrh	r3, [r3, #0]
 80235ba:	3301      	adds	r3, #1
 80235bc:	b29a      	uxth	r2, r3
 80235be:	4b2e      	ldr	r3, [pc, #184]	; (8023678 <_ZN7Logger220LoggingAccelPositionEv+0xfc>)
 80235c0:	801a      	strh	r2, [r3, #0]
        if(accel_straight_count >= CNT_OF_ACCEL_STEP_UP && accel_step < NUM_OF_ACCEL_STEP)
 80235c2:	4b2d      	ldr	r3, [pc, #180]	; (8023678 <_ZN7Logger220LoggingAccelPositionEv+0xfc>)
 80235c4:	881b      	ldrh	r3, [r3, #0]
 80235c6:	2b07      	cmp	r3, #7
 80235c8:	d951      	bls.n	802366e <_ZN7Logger220LoggingAccelPositionEv+0xf2>
 80235ca:	4b2c      	ldr	r3, [pc, #176]	; (802367c <_ZN7Logger220LoggingAccelPositionEv+0x100>)
 80235cc:	781b      	ldrb	r3, [r3, #0]
 80235ce:	2b04      	cmp	r3, #4
 80235d0:	d84d      	bhi.n	802366e <_ZN7Logger220LoggingAccelPositionEv+0xf2>
        {
            accel_step++;
 80235d2:	4b2a      	ldr	r3, [pc, #168]	; (802367c <_ZN7Logger220LoggingAccelPositionEv+0x100>)
 80235d4:	781b      	ldrb	r3, [r3, #0]
 80235d6:	3301      	adds	r3, #1
 80235d8:	b2da      	uxtb	r2, r3
 80235da:	4b28      	ldr	r3, [pc, #160]	; (802367c <_ZN7Logger220LoggingAccelPositionEv+0x100>)
 80235dc:	701a      	strb	r2, [r3, #0]

            uint32_t accel_address = uncorrected_address_buff_ - CNT_OF_ACCEL_STEP_UP;
 80235de:	687b      	ldr	r3, [r7, #4]
 80235e0:	895b      	ldrh	r3, [r3, #10]
 80235e2:	3b08      	subs	r3, #8
 80235e4:	613b      	str	r3, [r7, #16]

            uint8_t result = StoreAccelPosition(accel_address, accel_step);
 80235e6:	4b25      	ldr	r3, [pc, #148]	; (802367c <_ZN7Logger220LoggingAccelPositionEv+0x100>)
 80235e8:	781b      	ldrb	r3, [r3, #0]
 80235ea:	461a      	mov	r2, r3
 80235ec:	6939      	ldr	r1, [r7, #16]
 80235ee:	6878      	ldr	r0, [r7, #4]
 80235f0:	f000 f84a 	bl	8023688 <_ZN7Logger218StoreAccelPositionEmh>
 80235f4:	4603      	mov	r3, r0
 80235f6:	73fb      	strb	r3, [r7, #15]

            CheckLoggingSuccess(ERROR_CODE_STORE_ACCEL, result);
 80235f8:	7bfb      	ldrb	r3, [r7, #15]
 80235fa:	461a      	mov	r2, r3
 80235fc:	4920      	ldr	r1, [pc, #128]	; (8023680 <_ZN7Logger220LoggingAccelPositionEv+0x104>)
 80235fe:	6878      	ldr	r0, [r7, #4]
 8023600:	f7ff ff66 	bl	80234d0 <_ZN7Logger219CheckLoggingSuccessEmh>

            accel_straight_count = 0;
 8023604:	4b1c      	ldr	r3, [pc, #112]	; (8023678 <_ZN7Logger220LoggingAccelPositionEv+0xfc>)
 8023606:	2200      	movs	r2, #0
 8023608:	801a      	strh	r2, [r3, #0]
        }
        accel_step = 0;
        accel_straight_count = 0;
    }
    else accel_straight_count = 0;
}
 802360a:	e030      	b.n	802366e <_ZN7Logger220LoggingAccelPositionEv+0xf2>
    else if(accel_step != 0)
 802360c:	4b1b      	ldr	r3, [pc, #108]	; (802367c <_ZN7Logger220LoggingAccelPositionEv+0x100>)
 802360e:	781b      	ldrb	r3, [r3, #0]
 8023610:	2b00      	cmp	r3, #0
 8023612:	d029      	beq.n	8023668 <_ZN7Logger220LoggingAccelPositionEv+0xec>
        for(uint8_t i = 1; i <= accel_step; i++)
 8023614:	2301      	movs	r3, #1
 8023616:	77fb      	strb	r3, [r7, #31]
 8023618:	4b18      	ldr	r3, [pc, #96]	; (802367c <_ZN7Logger220LoggingAccelPositionEv+0x100>)
 802361a:	781b      	ldrb	r3, [r3, #0]
 802361c:	7ffa      	ldrb	r2, [r7, #31]
 802361e:	429a      	cmp	r2, r3
 8023620:	d81b      	bhi.n	802365a <_ZN7Logger220LoggingAccelPositionEv+0xde>
            uint32_t decel_address = (uncorrected_address_buff_-1) - (DIFF_NEXT_ACCEL_STEP * i);
 8023622:	687b      	ldr	r3, [r7, #4]
 8023624:	895b      	ldrh	r3, [r3, #10]
 8023626:	1e5a      	subs	r2, r3, #1
 8023628:	7ffb      	ldrb	r3, [r7, #31]
 802362a:	009b      	lsls	r3, r3, #2
 802362c:	1ad3      	subs	r3, r2, r3
 802362e:	61bb      	str	r3, [r7, #24]
            uint8_t decel_step = i << 4;
 8023630:	7ffb      	ldrb	r3, [r7, #31]
 8023632:	011b      	lsls	r3, r3, #4
 8023634:	75fb      	strb	r3, [r7, #23]
            uint8_t result = StoreAccelPosition(decel_address, decel_step);
 8023636:	7dfb      	ldrb	r3, [r7, #23]
 8023638:	461a      	mov	r2, r3
 802363a:	69b9      	ldr	r1, [r7, #24]
 802363c:	6878      	ldr	r0, [r7, #4]
 802363e:	f000 f823 	bl	8023688 <_ZN7Logger218StoreAccelPositionEmh>
 8023642:	4603      	mov	r3, r0
 8023644:	75bb      	strb	r3, [r7, #22]
            CheckLoggingSuccess(ERROR_CODE_STORE_DECEL, result);
 8023646:	7dbb      	ldrb	r3, [r7, #22]
 8023648:	461a      	mov	r2, r3
 802364a:	490e      	ldr	r1, [pc, #56]	; (8023684 <_ZN7Logger220LoggingAccelPositionEv+0x108>)
 802364c:	6878      	ldr	r0, [r7, #4]
 802364e:	f7ff ff3f 	bl	80234d0 <_ZN7Logger219CheckLoggingSuccessEmh>
        for(uint8_t i = 1; i <= accel_step; i++)
 8023652:	7ffb      	ldrb	r3, [r7, #31]
 8023654:	3301      	adds	r3, #1
 8023656:	77fb      	strb	r3, [r7, #31]
 8023658:	e7de      	b.n	8023618 <_ZN7Logger220LoggingAccelPositionEv+0x9c>
        accel_step = 0;
 802365a:	4b08      	ldr	r3, [pc, #32]	; (802367c <_ZN7Logger220LoggingAccelPositionEv+0x100>)
 802365c:	2200      	movs	r2, #0
 802365e:	701a      	strb	r2, [r3, #0]
        accel_straight_count = 0;
 8023660:	4b05      	ldr	r3, [pc, #20]	; (8023678 <_ZN7Logger220LoggingAccelPositionEv+0xfc>)
 8023662:	2200      	movs	r2, #0
 8023664:	801a      	strh	r2, [r3, #0]
}
 8023666:	e002      	b.n	802366e <_ZN7Logger220LoggingAccelPositionEv+0xf2>
    else accel_straight_count = 0;
 8023668:	4b03      	ldr	r3, [pc, #12]	; (8023678 <_ZN7Logger220LoggingAccelPositionEv+0xfc>)
 802366a:	2200      	movs	r2, #0
 802366c:	801a      	strh	r2, [r3, #0]
}
 802366e:	bf00      	nop
 8023670:	3720      	adds	r7, #32
 8023672:	46bd      	mov	sp, r7
 8023674:	bd80      	pop	{r7, pc}
 8023676:	bf00      	nop
 8023678:	200000d0 	.word	0x200000d0
 802367c:	200000d2 	.word	0x200000d2
 8023680:	08018300 	.word	0x08018300
 8023684:	08018400 	.word	0x08018400

08023688 <_ZN7Logger218StoreAccelPositionEmh>:

uint8_t Logger2::StoreAccelPosition(uint32_t address, uint8_t data)
{
 8023688:	b580      	push	{r7, lr}
 802368a:	b084      	sub	sp, #16
 802368c:	af00      	add	r7, sp, #0
 802368e:	60f8      	str	r0, [r7, #12]
 8023690:	60b9      	str	r1, [r7, #8]
 8023692:	4613      	mov	r3, r2
 8023694:	71fb      	strb	r3, [r7, #7]
    address += HEAD_ADDRESS_BLOCK_D;
 8023696:	68bb      	ldr	r3, [r7, #8]
 8023698:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 802369c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80236a0:	60bb      	str	r3, [r7, #8]

    if(!flash_->CheckBlankByte(address, 1)) return 0x01;
 80236a2:	68fb      	ldr	r3, [r7, #12]
 80236a4:	699b      	ldr	r3, [r3, #24]
 80236a6:	2201      	movs	r2, #1
 80236a8:	68b9      	ldr	r1, [r7, #8]
 80236aa:	4618      	mov	r0, r3
 80236ac:	f7fd fd20 	bl	80210f0 <_ZN5Flash14CheckBlankByteEmm>
 80236b0:	4603      	mov	r3, r0
 80236b2:	f083 0301 	eor.w	r3, r3, #1
 80236b6:	b2db      	uxtb	r3, r3
 80236b8:	2b00      	cmp	r3, #0
 80236ba:	d001      	beq.n	80236c0 <_ZN7Logger218StoreAccelPositionEmh+0x38>
 80236bc:	2301      	movs	r3, #1
 80236be:	e00f      	b.n	80236e0 <_ZN7Logger218StoreAccelPositionEmh+0x58>
    else if(!flash_->StoreUint8(address, &data, 1)) return 0x02;
 80236c0:	68fb      	ldr	r3, [r7, #12]
 80236c2:	6998      	ldr	r0, [r3, #24]
 80236c4:	1dfa      	adds	r2, r7, #7
 80236c6:	2301      	movs	r3, #1
 80236c8:	68b9      	ldr	r1, [r7, #8]
 80236ca:	f7fd fc71 	bl	8020fb0 <_ZN5Flash10StoreUint8EmPhm>
 80236ce:	4603      	mov	r3, r0
 80236d0:	f083 0301 	eor.w	r3, r3, #1
 80236d4:	b2db      	uxtb	r3, r3
 80236d6:	2b00      	cmp	r3, #0
 80236d8:	d001      	beq.n	80236de <_ZN7Logger218StoreAccelPositionEmh+0x56>
 80236da:	2302      	movs	r3, #2
 80236dc:	e000      	b.n	80236e0 <_ZN7Logger218StoreAccelPositionEmh+0x58>

    return 0;
 80236de:	2300      	movs	r3, #0
}
 80236e0:	4618      	mov	r0, r3
 80236e2:	3710      	adds	r7, #16
 80236e4:	46bd      	mov	sp, r7
 80236e6:	bd80      	pop	{r7, pc}

080236e8 <_ZN7Logger27LoadingEv>:

void Logger2::Loading()
{
 80236e8:	b580      	push	{r7, lr}
 80236ea:	b084      	sub	sp, #16
 80236ec:	af00      	add	r7, sp, #0
 80236ee:	6078      	str	r0, [r7, #4]
    float distance = encoder_->GetDistanceStack();
 80236f0:	687b      	ldr	r3, [r7, #4]
 80236f2:	695b      	ldr	r3, [r3, #20]
 80236f4:	4618      	mov	r0, r3
 80236f6:	f7fd fbf8 	bl	8020eea <_ZN7Encoder16GetDistanceStackEv>
 80236fa:	ed87 0a03 	vstr	s0, [r7, #12]
    if(distance < LOGGING_CONST_DISTANCE) return;
 80236fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8023702:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8023706:	eef4 7ac7 	vcmpe.f32	s15, s14
 802370a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802370e:	d40b      	bmi.n	8023728 <_ZN7Logger27LoadingEv+0x40>
    encoder_->ResetDistanceStack();
 8023710:	687b      	ldr	r3, [r7, #4]
 8023712:	695b      	ldr	r3, [r3, #20]
 8023714:	4618      	mov	r0, r3
 8023716:	f7fd fbcb 	bl	8020eb0 <_ZN7Encoder18ResetDistanceStackEv>

    void AccelStraight();

    loading_now_address_++;
 802371a:	687b      	ldr	r3, [r7, #4]
 802371c:	891b      	ldrh	r3, [r3, #8]
 802371e:	3301      	adds	r3, #1
 8023720:	b29a      	uxth	r2, r3
 8023722:	687b      	ldr	r3, [r7, #4]
 8023724:	811a      	strh	r2, [r3, #8]
 8023726:	e000      	b.n	802372a <_ZN7Logger27LoadingEv+0x42>
    if(distance < LOGGING_CONST_DISTANCE) return;
 8023728:	bf00      	nop
}
 802372a:	3710      	adds	r7, #16
 802372c:	46bd      	mov	sp, r7
 802372e:	bd80      	pop	{r7, pc}

08023730 <_ZN7Logger217GetTargetVelocityEv>:
    target_velocity_ = target;
    pre_target = target;
}

float Logger2::GetTargetVelocity()
{
 8023730:	b480      	push	{r7}
 8023732:	b083      	sub	sp, #12
 8023734:	af00      	add	r7, sp, #0
 8023736:	6078      	str	r0, [r7, #4]
    return target_velocity_;
 8023738:	687b      	ldr	r3, [r7, #4]
 802373a:	691b      	ldr	r3, [r3, #16]
 802373c:	ee07 3a90 	vmov	s15, r3
}
 8023740:	eeb0 0a67 	vmov.f32	s0, s15
 8023744:	370c      	adds	r7, #12
 8023746:	46bd      	mov	sp, r7
 8023748:	f85d 7b04 	ldr.w	r7, [sp], #4
 802374c:	4770      	bx	lr
	...

08023750 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8023750:	b580      	push	{r7, lr}
 8023752:	b082      	sub	sp, #8
 8023754:	af00      	add	r7, sp, #0
 8023756:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 8023758:	687b      	ldr	r3, [r7, #4]
 802375a:	681b      	ldr	r3, [r3, #0]
 802375c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8023760:	d101      	bne.n	8023766 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    InterruptTim2();
 8023762:	f003 f87f 	bl	8026864 <InterruptTim2>
  }
  if(htim->Instance == TIM6)
 8023766:	687b      	ldr	r3, [r7, #4]
 8023768:	681b      	ldr	r3, [r3, #0]
 802376a:	4a08      	ldr	r2, [pc, #32]	; (802378c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 802376c:	4293      	cmp	r3, r2
 802376e:	d101      	bne.n	8023774 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
    InterruptTim6();
 8023770:	f003 f868 	bl	8026844 <InterruptTim6>
  }
  if(htim->Instance == TIM7)
 8023774:	687b      	ldr	r3, [r7, #4]
 8023776:	681b      	ldr	r3, [r3, #0]
 8023778:	4a05      	ldr	r2, [pc, #20]	; (8023790 <HAL_TIM_PeriodElapsedCallback+0x40>)
 802377a:	4293      	cmp	r3, r2
 802377c:	d101      	bne.n	8023782 <HAL_TIM_PeriodElapsedCallback+0x32>
  {
    InterruptTim7();
 802377e:	f003 f851 	bl	8026824 <InterruptTim7>
  }
}
 8023782:	bf00      	nop
 8023784:	3708      	adds	r7, #8
 8023786:	46bd      	mov	sp, r7
 8023788:	bd80      	pop	{r7, pc}
 802378a:	bf00      	nop
 802378c:	40001000 	.word	0x40001000
 8023790:	40001400 	.word	0x40001400

08023794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8023794:	b580      	push	{r7, lr}
 8023796:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8023798:	f003 f90e 	bl	80269b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 802379c:	f000 f822 	bl	80237e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80237a0:	f000 fd68 	bl	8024274 <MX_GPIO_Init>
  MX_DMA_Init();
 80237a4:	f000 fd46 	bl	8024234 <MX_DMA_Init>
  MX_ADC1_Init();
 80237a8:	f000 f886 	bl	80238b8 <MX_ADC1_Init>
  MX_I2C2_Init();
 80237ac:	f000 f98c 	bl	8023ac8 <MX_I2C2_Init>
  MX_SPI3_Init();
 80237b0:	f000 f9b8 	bl	8023b24 <MX_SPI3_Init>
  MX_TIM1_Init();
 80237b4:	f000 f9ec 	bl	8023b90 <MX_TIM1_Init>
  MX_TIM3_Init();
 80237b8:	f000 fac8 	bl	8023d4c <MX_TIM3_Init>
  MX_TIM4_Init();
 80237bc:	f000 fb40 	bl	8023e40 <MX_TIM4_Init>
  MX_TIM6_Init();
 80237c0:	f000 fbe0 	bl	8023f84 <MX_TIM6_Init>
  MX_TIM7_Init();
 80237c4:	f000 fc14 	bl	8023ff0 <MX_TIM7_Init>
  MX_TIM8_Init();
 80237c8:	f000 fc48 	bl	802405c <MX_TIM8_Init>
  MX_TIM11_Init();
 80237cc:	f000 fc9e 	bl	802410c <MX_TIM11_Init>
  MX_TIM12_Init();
 80237d0:	f000 fcea 	bl	80241a8 <MX_TIM12_Init>
  MX_TIM2_Init();
 80237d4:	f000 fa6c 	bl	8023cb0 <MX_TIM2_Init>
  MX_TIM5_Init();
 80237d8:	f000 fb86 	bl	8023ee8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  Init();
 80237dc:	f003 f818 	bl	8026810 <Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80237e0:	e7fe      	b.n	80237e0 <main+0x4c>
	...

080237e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80237e4:	b580      	push	{r7, lr}
 80237e6:	b094      	sub	sp, #80	; 0x50
 80237e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80237ea:	f107 0320 	add.w	r3, r7, #32
 80237ee:	2230      	movs	r2, #48	; 0x30
 80237f0:	2100      	movs	r1, #0
 80237f2:	4618      	mov	r0, r3
 80237f4:	f007 f99f 	bl	802ab36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80237f8:	f107 030c 	add.w	r3, r7, #12
 80237fc:	2200      	movs	r2, #0
 80237fe:	601a      	str	r2, [r3, #0]
 8023800:	605a      	str	r2, [r3, #4]
 8023802:	609a      	str	r2, [r3, #8]
 8023804:	60da      	str	r2, [r3, #12]
 8023806:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8023808:	2300      	movs	r3, #0
 802380a:	60bb      	str	r3, [r7, #8]
 802380c:	4b28      	ldr	r3, [pc, #160]	; (80238b0 <SystemClock_Config+0xcc>)
 802380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023810:	4a27      	ldr	r2, [pc, #156]	; (80238b0 <SystemClock_Config+0xcc>)
 8023812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8023816:	6413      	str	r3, [r2, #64]	; 0x40
 8023818:	4b25      	ldr	r3, [pc, #148]	; (80238b0 <SystemClock_Config+0xcc>)
 802381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802381c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8023820:	60bb      	str	r3, [r7, #8]
 8023822:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8023824:	2300      	movs	r3, #0
 8023826:	607b      	str	r3, [r7, #4]
 8023828:	4b22      	ldr	r3, [pc, #136]	; (80238b4 <SystemClock_Config+0xd0>)
 802382a:	681b      	ldr	r3, [r3, #0]
 802382c:	4a21      	ldr	r2, [pc, #132]	; (80238b4 <SystemClock_Config+0xd0>)
 802382e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8023832:	6013      	str	r3, [r2, #0]
 8023834:	4b1f      	ldr	r3, [pc, #124]	; (80238b4 <SystemClock_Config+0xd0>)
 8023836:	681b      	ldr	r3, [r3, #0]
 8023838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802383c:	607b      	str	r3, [r7, #4]
 802383e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8023840:	2301      	movs	r3, #1
 8023842:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8023844:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8023848:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 802384a:	2302      	movs	r3, #2
 802384c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 802384e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8023852:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8023854:	2306      	movs	r3, #6
 8023856:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8023858:	23a8      	movs	r3, #168	; 0xa8
 802385a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 802385c:	2302      	movs	r3, #2
 802385e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8023860:	2304      	movs	r3, #4
 8023862:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8023864:	f107 0320 	add.w	r3, r7, #32
 8023868:	4618      	mov	r0, r3
 802386a:	f004 ff87 	bl	802877c <HAL_RCC_OscConfig>
 802386e:	4603      	mov	r3, r0
 8023870:	2b00      	cmp	r3, #0
 8023872:	d001      	beq.n	8023878 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8023874:	f000 fdce 	bl	8024414 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8023878:	230f      	movs	r3, #15
 802387a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 802387c:	2302      	movs	r3, #2
 802387e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8023880:	2300      	movs	r3, #0
 8023882:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8023884:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8023888:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 802388a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802388e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8023890:	f107 030c 	add.w	r3, r7, #12
 8023894:	2105      	movs	r1, #5
 8023896:	4618      	mov	r0, r3
 8023898:	f005 f9e0 	bl	8028c5c <HAL_RCC_ClockConfig>
 802389c:	4603      	mov	r3, r0
 802389e:	2b00      	cmp	r3, #0
 80238a0:	d001      	beq.n	80238a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80238a2:	f000 fdb7 	bl	8024414 <Error_Handler>
  }
}
 80238a6:	bf00      	nop
 80238a8:	3750      	adds	r7, #80	; 0x50
 80238aa:	46bd      	mov	sp, r7
 80238ac:	bd80      	pop	{r7, pc}
 80238ae:	bf00      	nop
 80238b0:	40023800 	.word	0x40023800
 80238b4:	40007000 	.word	0x40007000

080238b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80238b8:	b580      	push	{r7, lr}
 80238ba:	b084      	sub	sp, #16
 80238bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80238be:	463b      	mov	r3, r7
 80238c0:	2200      	movs	r2, #0
 80238c2:	601a      	str	r2, [r3, #0]
 80238c4:	605a      	str	r2, [r3, #4]
 80238c6:	609a      	str	r2, [r3, #8]
 80238c8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80238ca:	4b7c      	ldr	r3, [pc, #496]	; (8023abc <MX_ADC1_Init+0x204>)
 80238cc:	4a7c      	ldr	r2, [pc, #496]	; (8023ac0 <MX_ADC1_Init+0x208>)
 80238ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80238d0:	4b7a      	ldr	r3, [pc, #488]	; (8023abc <MX_ADC1_Init+0x204>)
 80238d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80238d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80238d8:	4b78      	ldr	r3, [pc, #480]	; (8023abc <MX_ADC1_Init+0x204>)
 80238da:	2200      	movs	r2, #0
 80238dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80238de:	4b77      	ldr	r3, [pc, #476]	; (8023abc <MX_ADC1_Init+0x204>)
 80238e0:	2201      	movs	r2, #1
 80238e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80238e4:	4b75      	ldr	r3, [pc, #468]	; (8023abc <MX_ADC1_Init+0x204>)
 80238e6:	2201      	movs	r2, #1
 80238e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80238ea:	4b74      	ldr	r3, [pc, #464]	; (8023abc <MX_ADC1_Init+0x204>)
 80238ec:	2200      	movs	r2, #0
 80238ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80238f2:	4b72      	ldr	r3, [pc, #456]	; (8023abc <MX_ADC1_Init+0x204>)
 80238f4:	2200      	movs	r2, #0
 80238f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80238f8:	4b70      	ldr	r3, [pc, #448]	; (8023abc <MX_ADC1_Init+0x204>)
 80238fa:	4a72      	ldr	r2, [pc, #456]	; (8023ac4 <MX_ADC1_Init+0x20c>)
 80238fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80238fe:	4b6f      	ldr	r3, [pc, #444]	; (8023abc <MX_ADC1_Init+0x204>)
 8023900:	2200      	movs	r2, #0
 8023902:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8023904:	4b6d      	ldr	r3, [pc, #436]	; (8023abc <MX_ADC1_Init+0x204>)
 8023906:	220e      	movs	r2, #14
 8023908:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 802390a:	4b6c      	ldr	r3, [pc, #432]	; (8023abc <MX_ADC1_Init+0x204>)
 802390c:	2201      	movs	r2, #1
 802390e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8023912:	4b6a      	ldr	r3, [pc, #424]	; (8023abc <MX_ADC1_Init+0x204>)
 8023914:	2201      	movs	r2, #1
 8023916:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8023918:	4868      	ldr	r0, [pc, #416]	; (8023abc <MX_ADC1_Init+0x204>)
 802391a:	f003 f8e1 	bl	8026ae0 <HAL_ADC_Init>
 802391e:	4603      	mov	r3, r0
 8023920:	2b00      	cmp	r3, #0
 8023922:	d001      	beq.n	8023928 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8023924:	f000 fd76 	bl	8024414 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8023928:	2303      	movs	r3, #3
 802392a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 802392c:	2301      	movs	r3, #1
 802392e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8023930:	2301      	movs	r3, #1
 8023932:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023934:	463b      	mov	r3, r7
 8023936:	4619      	mov	r1, r3
 8023938:	4860      	ldr	r0, [pc, #384]	; (8023abc <MX_ADC1_Init+0x204>)
 802393a:	f003 fa25 	bl	8026d88 <HAL_ADC_ConfigChannel>
 802393e:	4603      	mov	r3, r0
 8023940:	2b00      	cmp	r3, #0
 8023942:	d001      	beq.n	8023948 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8023944:	f000 fd66 	bl	8024414 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8023948:	2304      	movs	r3, #4
 802394a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 802394c:	2302      	movs	r3, #2
 802394e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023950:	463b      	mov	r3, r7
 8023952:	4619      	mov	r1, r3
 8023954:	4859      	ldr	r0, [pc, #356]	; (8023abc <MX_ADC1_Init+0x204>)
 8023956:	f003 fa17 	bl	8026d88 <HAL_ADC_ConfigChannel>
 802395a:	4603      	mov	r3, r0
 802395c:	2b00      	cmp	r3, #0
 802395e:	d001      	beq.n	8023964 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8023960:	f000 fd58 	bl	8024414 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8023964:	2305      	movs	r3, #5
 8023966:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8023968:	2303      	movs	r3, #3
 802396a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802396c:	463b      	mov	r3, r7
 802396e:	4619      	mov	r1, r3
 8023970:	4852      	ldr	r0, [pc, #328]	; (8023abc <MX_ADC1_Init+0x204>)
 8023972:	f003 fa09 	bl	8026d88 <HAL_ADC_ConfigChannel>
 8023976:	4603      	mov	r3, r0
 8023978:	2b00      	cmp	r3, #0
 802397a:	d001      	beq.n	8023980 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 802397c:	f000 fd4a 	bl	8024414 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8023980:	2306      	movs	r3, #6
 8023982:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8023984:	2304      	movs	r3, #4
 8023986:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023988:	463b      	mov	r3, r7
 802398a:	4619      	mov	r1, r3
 802398c:	484b      	ldr	r0, [pc, #300]	; (8023abc <MX_ADC1_Init+0x204>)
 802398e:	f003 f9fb 	bl	8026d88 <HAL_ADC_ConfigChannel>
 8023992:	4603      	mov	r3, r0
 8023994:	2b00      	cmp	r3, #0
 8023996:	d001      	beq.n	802399c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8023998:	f000 fd3c 	bl	8024414 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 802399c:	2307      	movs	r3, #7
 802399e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80239a0:	2305      	movs	r3, #5
 80239a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80239a4:	463b      	mov	r3, r7
 80239a6:	4619      	mov	r1, r3
 80239a8:	4844      	ldr	r0, [pc, #272]	; (8023abc <MX_ADC1_Init+0x204>)
 80239aa:	f003 f9ed 	bl	8026d88 <HAL_ADC_ConfigChannel>
 80239ae:	4603      	mov	r3, r0
 80239b0:	2b00      	cmp	r3, #0
 80239b2:	d001      	beq.n	80239b8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80239b4:	f000 fd2e 	bl	8024414 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80239b8:	230e      	movs	r3, #14
 80239ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80239bc:	2306      	movs	r3, #6
 80239be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80239c0:	463b      	mov	r3, r7
 80239c2:	4619      	mov	r1, r3
 80239c4:	483d      	ldr	r0, [pc, #244]	; (8023abc <MX_ADC1_Init+0x204>)
 80239c6:	f003 f9df 	bl	8026d88 <HAL_ADC_ConfigChannel>
 80239ca:	4603      	mov	r3, r0
 80239cc:	2b00      	cmp	r3, #0
 80239ce:	d001      	beq.n	80239d4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80239d0:	f000 fd20 	bl	8024414 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80239d4:	230f      	movs	r3, #15
 80239d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80239d8:	2307      	movs	r3, #7
 80239da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80239dc:	463b      	mov	r3, r7
 80239de:	4619      	mov	r1, r3
 80239e0:	4836      	ldr	r0, [pc, #216]	; (8023abc <MX_ADC1_Init+0x204>)
 80239e2:	f003 f9d1 	bl	8026d88 <HAL_ADC_ConfigChannel>
 80239e6:	4603      	mov	r3, r0
 80239e8:	2b00      	cmp	r3, #0
 80239ea:	d001      	beq.n	80239f0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80239ec:	f000 fd12 	bl	8024414 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80239f0:	230a      	movs	r3, #10
 80239f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80239f4:	2308      	movs	r3, #8
 80239f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80239f8:	463b      	mov	r3, r7
 80239fa:	4619      	mov	r1, r3
 80239fc:	482f      	ldr	r0, [pc, #188]	; (8023abc <MX_ADC1_Init+0x204>)
 80239fe:	f003 f9c3 	bl	8026d88 <HAL_ADC_ConfigChannel>
 8023a02:	4603      	mov	r3, r0
 8023a04:	2b00      	cmp	r3, #0
 8023a06:	d001      	beq.n	8023a0c <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8023a08:	f000 fd04 	bl	8024414 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8023a0c:	230b      	movs	r3, #11
 8023a0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8023a10:	2309      	movs	r3, #9
 8023a12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023a14:	463b      	mov	r3, r7
 8023a16:	4619      	mov	r1, r3
 8023a18:	4828      	ldr	r0, [pc, #160]	; (8023abc <MX_ADC1_Init+0x204>)
 8023a1a:	f003 f9b5 	bl	8026d88 <HAL_ADC_ConfigChannel>
 8023a1e:	4603      	mov	r3, r0
 8023a20:	2b00      	cmp	r3, #0
 8023a22:	d001      	beq.n	8023a28 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8023a24:	f000 fcf6 	bl	8024414 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8023a28:	230c      	movs	r3, #12
 8023a2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8023a2c:	230a      	movs	r3, #10
 8023a2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023a30:	463b      	mov	r3, r7
 8023a32:	4619      	mov	r1, r3
 8023a34:	4821      	ldr	r0, [pc, #132]	; (8023abc <MX_ADC1_Init+0x204>)
 8023a36:	f003 f9a7 	bl	8026d88 <HAL_ADC_ConfigChannel>
 8023a3a:	4603      	mov	r3, r0
 8023a3c:	2b00      	cmp	r3, #0
 8023a3e:	d001      	beq.n	8023a44 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8023a40:	f000 fce8 	bl	8024414 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8023a44:	230d      	movs	r3, #13
 8023a46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8023a48:	230b      	movs	r3, #11
 8023a4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023a4c:	463b      	mov	r3, r7
 8023a4e:	4619      	mov	r1, r3
 8023a50:	481a      	ldr	r0, [pc, #104]	; (8023abc <MX_ADC1_Init+0x204>)
 8023a52:	f003 f999 	bl	8026d88 <HAL_ADC_ConfigChannel>
 8023a56:	4603      	mov	r3, r0
 8023a58:	2b00      	cmp	r3, #0
 8023a5a:	d001      	beq.n	8023a60 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8023a5c:	f000 fcda 	bl	8024414 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8023a60:	2302      	movs	r3, #2
 8023a62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8023a64:	230c      	movs	r3, #12
 8023a66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023a68:	463b      	mov	r3, r7
 8023a6a:	4619      	mov	r1, r3
 8023a6c:	4813      	ldr	r0, [pc, #76]	; (8023abc <MX_ADC1_Init+0x204>)
 8023a6e:	f003 f98b 	bl	8026d88 <HAL_ADC_ConfigChannel>
 8023a72:	4603      	mov	r3, r0
 8023a74:	2b00      	cmp	r3, #0
 8023a76:	d001      	beq.n	8023a7c <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8023a78:	f000 fccc 	bl	8024414 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8023a7c:	2301      	movs	r3, #1
 8023a7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8023a80:	230d      	movs	r3, #13
 8023a82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023a84:	463b      	mov	r3, r7
 8023a86:	4619      	mov	r1, r3
 8023a88:	480c      	ldr	r0, [pc, #48]	; (8023abc <MX_ADC1_Init+0x204>)
 8023a8a:	f003 f97d 	bl	8026d88 <HAL_ADC_ConfigChannel>
 8023a8e:	4603      	mov	r3, r0
 8023a90:	2b00      	cmp	r3, #0
 8023a92:	d001      	beq.n	8023a98 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8023a94:	f000 fcbe 	bl	8024414 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8023a98:	2300      	movs	r3, #0
 8023a9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8023a9c:	230e      	movs	r3, #14
 8023a9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8023aa0:	463b      	mov	r3, r7
 8023aa2:	4619      	mov	r1, r3
 8023aa4:	4805      	ldr	r0, [pc, #20]	; (8023abc <MX_ADC1_Init+0x204>)
 8023aa6:	f003 f96f 	bl	8026d88 <HAL_ADC_ConfigChannel>
 8023aaa:	4603      	mov	r3, r0
 8023aac:	2b00      	cmp	r3, #0
 8023aae:	d001      	beq.n	8023ab4 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8023ab0:	f000 fcb0 	bl	8024414 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8023ab4:	bf00      	nop
 8023ab6:	3710      	adds	r7, #16
 8023ab8:	46bd      	mov	sp, r7
 8023aba:	bd80      	pop	{r7, pc}
 8023abc:	200007ec 	.word	0x200007ec
 8023ac0:	40012000 	.word	0x40012000
 8023ac4:	0f000001 	.word	0x0f000001

08023ac8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8023ac8:	b580      	push	{r7, lr}
 8023aca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8023acc:	4b12      	ldr	r3, [pc, #72]	; (8023b18 <MX_I2C2_Init+0x50>)
 8023ace:	4a13      	ldr	r2, [pc, #76]	; (8023b1c <MX_I2C2_Init+0x54>)
 8023ad0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8023ad2:	4b11      	ldr	r3, [pc, #68]	; (8023b18 <MX_I2C2_Init+0x50>)
 8023ad4:	4a12      	ldr	r2, [pc, #72]	; (8023b20 <MX_I2C2_Init+0x58>)
 8023ad6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8023ad8:	4b0f      	ldr	r3, [pc, #60]	; (8023b18 <MX_I2C2_Init+0x50>)
 8023ada:	2200      	movs	r2, #0
 8023adc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8023ade:	4b0e      	ldr	r3, [pc, #56]	; (8023b18 <MX_I2C2_Init+0x50>)
 8023ae0:	2200      	movs	r2, #0
 8023ae2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8023ae4:	4b0c      	ldr	r3, [pc, #48]	; (8023b18 <MX_I2C2_Init+0x50>)
 8023ae6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8023aea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8023aec:	4b0a      	ldr	r3, [pc, #40]	; (8023b18 <MX_I2C2_Init+0x50>)
 8023aee:	2200      	movs	r2, #0
 8023af0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8023af2:	4b09      	ldr	r3, [pc, #36]	; (8023b18 <MX_I2C2_Init+0x50>)
 8023af4:	2200      	movs	r2, #0
 8023af6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8023af8:	4b07      	ldr	r3, [pc, #28]	; (8023b18 <MX_I2C2_Init+0x50>)
 8023afa:	2200      	movs	r2, #0
 8023afc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8023afe:	4b06      	ldr	r3, [pc, #24]	; (8023b18 <MX_I2C2_Init+0x50>)
 8023b00:	2200      	movs	r2, #0
 8023b02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8023b04:	4804      	ldr	r0, [pc, #16]	; (8023b18 <MX_I2C2_Init+0x50>)
 8023b06:	f004 fd01 	bl	802850c <HAL_I2C_Init>
 8023b0a:	4603      	mov	r3, r0
 8023b0c:	2b00      	cmp	r3, #0
 8023b0e:	d001      	beq.n	8023b14 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8023b10:	f000 fc80 	bl	8024414 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8023b14:	bf00      	nop
 8023b16:	bd80      	pop	{r7, pc}
 8023b18:	200006c0 	.word	0x200006c0
 8023b1c:	40005800 	.word	0x40005800
 8023b20:	000186a0 	.word	0x000186a0

08023b24 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8023b24:	b580      	push	{r7, lr}
 8023b26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8023b28:	4b17      	ldr	r3, [pc, #92]	; (8023b88 <MX_SPI3_Init+0x64>)
 8023b2a:	4a18      	ldr	r2, [pc, #96]	; (8023b8c <MX_SPI3_Init+0x68>)
 8023b2c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8023b2e:	4b16      	ldr	r3, [pc, #88]	; (8023b88 <MX_SPI3_Init+0x64>)
 8023b30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8023b34:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8023b36:	4b14      	ldr	r3, [pc, #80]	; (8023b88 <MX_SPI3_Init+0x64>)
 8023b38:	2200      	movs	r2, #0
 8023b3a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8023b3c:	4b12      	ldr	r3, [pc, #72]	; (8023b88 <MX_SPI3_Init+0x64>)
 8023b3e:	2200      	movs	r2, #0
 8023b40:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8023b42:	4b11      	ldr	r3, [pc, #68]	; (8023b88 <MX_SPI3_Init+0x64>)
 8023b44:	2200      	movs	r2, #0
 8023b46:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8023b48:	4b0f      	ldr	r3, [pc, #60]	; (8023b88 <MX_SPI3_Init+0x64>)
 8023b4a:	2200      	movs	r2, #0
 8023b4c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8023b4e:	4b0e      	ldr	r3, [pc, #56]	; (8023b88 <MX_SPI3_Init+0x64>)
 8023b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8023b54:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8023b56:	4b0c      	ldr	r3, [pc, #48]	; (8023b88 <MX_SPI3_Init+0x64>)
 8023b58:	2238      	movs	r2, #56	; 0x38
 8023b5a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8023b5c:	4b0a      	ldr	r3, [pc, #40]	; (8023b88 <MX_SPI3_Init+0x64>)
 8023b5e:	2200      	movs	r2, #0
 8023b60:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8023b62:	4b09      	ldr	r3, [pc, #36]	; (8023b88 <MX_SPI3_Init+0x64>)
 8023b64:	2200      	movs	r2, #0
 8023b66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8023b68:	4b07      	ldr	r3, [pc, #28]	; (8023b88 <MX_SPI3_Init+0x64>)
 8023b6a:	2200      	movs	r2, #0
 8023b6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8023b6e:	4b06      	ldr	r3, [pc, #24]	; (8023b88 <MX_SPI3_Init+0x64>)
 8023b70:	220a      	movs	r2, #10
 8023b72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8023b74:	4804      	ldr	r0, [pc, #16]	; (8023b88 <MX_SPI3_Init+0x64>)
 8023b76:	f005 fa29 	bl	8028fcc <HAL_SPI_Init>
 8023b7a:	4603      	mov	r3, r0
 8023b7c:	2b00      	cmp	r3, #0
 8023b7e:	d001      	beq.n	8023b84 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8023b80:	f000 fc48 	bl	8024414 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8023b84:	bf00      	nop
 8023b86:	bd80      	pop	{r7, pc}
 8023b88:	20000794 	.word	0x20000794
 8023b8c:	40003c00 	.word	0x40003c00

08023b90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8023b90:	b580      	push	{r7, lr}
 8023b92:	b092      	sub	sp, #72	; 0x48
 8023b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023b96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8023b9a:	2200      	movs	r2, #0
 8023b9c:	601a      	str	r2, [r3, #0]
 8023b9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8023ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8023ba4:	2200      	movs	r2, #0
 8023ba6:	601a      	str	r2, [r3, #0]
 8023ba8:	605a      	str	r2, [r3, #4]
 8023baa:	609a      	str	r2, [r3, #8]
 8023bac:	60da      	str	r2, [r3, #12]
 8023bae:	611a      	str	r2, [r3, #16]
 8023bb0:	615a      	str	r2, [r3, #20]
 8023bb2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8023bb4:	1d3b      	adds	r3, r7, #4
 8023bb6:	2220      	movs	r2, #32
 8023bb8:	2100      	movs	r1, #0
 8023bba:	4618      	mov	r0, r3
 8023bbc:	f006 ffbb 	bl	802ab36 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8023bc0:	4b39      	ldr	r3, [pc, #228]	; (8023ca8 <MX_TIM1_Init+0x118>)
 8023bc2:	4a3a      	ldr	r2, [pc, #232]	; (8023cac <MX_TIM1_Init+0x11c>)
 8023bc4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8023bc6:	4b38      	ldr	r3, [pc, #224]	; (8023ca8 <MX_TIM1_Init+0x118>)
 8023bc8:	2201      	movs	r2, #1
 8023bca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023bcc:	4b36      	ldr	r3, [pc, #216]	; (8023ca8 <MX_TIM1_Init+0x118>)
 8023bce:	2200      	movs	r2, #0
 8023bd0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1049;
 8023bd2:	4b35      	ldr	r3, [pc, #212]	; (8023ca8 <MX_TIM1_Init+0x118>)
 8023bd4:	f240 4219 	movw	r2, #1049	; 0x419
 8023bd8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023bda:	4b33      	ldr	r3, [pc, #204]	; (8023ca8 <MX_TIM1_Init+0x118>)
 8023bdc:	2200      	movs	r2, #0
 8023bde:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8023be0:	4b31      	ldr	r3, [pc, #196]	; (8023ca8 <MX_TIM1_Init+0x118>)
 8023be2:	2200      	movs	r2, #0
 8023be4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023be6:	4b30      	ldr	r3, [pc, #192]	; (8023ca8 <MX_TIM1_Init+0x118>)
 8023be8:	2200      	movs	r2, #0
 8023bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8023bec:	482e      	ldr	r0, [pc, #184]	; (8023ca8 <MX_TIM1_Init+0x118>)
 8023bee:	f005 ff90 	bl	8029b12 <HAL_TIM_PWM_Init>
 8023bf2:	4603      	mov	r3, r0
 8023bf4:	2b00      	cmp	r3, #0
 8023bf6:	d001      	beq.n	8023bfc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8023bf8:	f000 fc0c 	bl	8024414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023bfc:	2300      	movs	r3, #0
 8023bfe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023c00:	2300      	movs	r3, #0
 8023c02:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8023c04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8023c08:	4619      	mov	r1, r3
 8023c0a:	4827      	ldr	r0, [pc, #156]	; (8023ca8 <MX_TIM1_Init+0x118>)
 8023c0c:	f006 fe72 	bl	802a8f4 <HAL_TIMEx_MasterConfigSynchronization>
 8023c10:	4603      	mov	r3, r0
 8023c12:	2b00      	cmp	r3, #0
 8023c14:	d001      	beq.n	8023c1a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8023c16:	f000 fbfd 	bl	8024414 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023c1a:	2360      	movs	r3, #96	; 0x60
 8023c1c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8023c1e:	2300      	movs	r3, #0
 8023c20:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8023c22:	2300      	movs	r3, #0
 8023c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8023c26:	2300      	movs	r3, #0
 8023c28:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8023c2a:	2300      	movs	r3, #0
 8023c2c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8023c2e:	2300      	movs	r3, #0
 8023c30:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8023c32:	2300      	movs	r3, #0
 8023c34:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8023c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8023c3a:	2204      	movs	r2, #4
 8023c3c:	4619      	mov	r1, r3
 8023c3e:	481a      	ldr	r0, [pc, #104]	; (8023ca8 <MX_TIM1_Init+0x118>)
 8023c40:	f006 f9a2 	bl	8029f88 <HAL_TIM_PWM_ConfigChannel>
 8023c44:	4603      	mov	r3, r0
 8023c46:	2b00      	cmp	r3, #0
 8023c48:	d001      	beq.n	8023c4e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8023c4a:	f000 fbe3 	bl	8024414 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8023c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8023c52:	220c      	movs	r2, #12
 8023c54:	4619      	mov	r1, r3
 8023c56:	4814      	ldr	r0, [pc, #80]	; (8023ca8 <MX_TIM1_Init+0x118>)
 8023c58:	f006 f996 	bl	8029f88 <HAL_TIM_PWM_ConfigChannel>
 8023c5c:	4603      	mov	r3, r0
 8023c5e:	2b00      	cmp	r3, #0
 8023c60:	d001      	beq.n	8023c66 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8023c62:	f000 fbd7 	bl	8024414 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8023c66:	2300      	movs	r3, #0
 8023c68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8023c6a:	2300      	movs	r3, #0
 8023c6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8023c6e:	2300      	movs	r3, #0
 8023c70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8023c72:	2300      	movs	r3, #0
 8023c74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8023c76:	2300      	movs	r3, #0
 8023c78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8023c7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8023c7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8023c80:	2300      	movs	r3, #0
 8023c82:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8023c84:	1d3b      	adds	r3, r7, #4
 8023c86:	4619      	mov	r1, r3
 8023c88:	4807      	ldr	r0, [pc, #28]	; (8023ca8 <MX_TIM1_Init+0x118>)
 8023c8a:	f006 feaf 	bl	802a9ec <HAL_TIMEx_ConfigBreakDeadTime>
 8023c8e:	4603      	mov	r3, r0
 8023c90:	2b00      	cmp	r3, #0
 8023c92:	d001      	beq.n	8023c98 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8023c94:	f000 fbbe 	bl	8024414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8023c98:	4803      	ldr	r0, [pc, #12]	; (8023ca8 <MX_TIM1_Init+0x118>)
 8023c9a:	f002 faf9 	bl	8026290 <HAL_TIM_MspPostInit>

}
 8023c9e:	bf00      	nop
 8023ca0:	3748      	adds	r7, #72	; 0x48
 8023ca2:	46bd      	mov	sp, r7
 8023ca4:	bd80      	pop	{r7, pc}
 8023ca6:	bf00      	nop
 8023ca8:	20000914 	.word	0x20000914
 8023cac:	40010000 	.word	0x40010000

08023cb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8023cb0:	b580      	push	{r7, lr}
 8023cb2:	b086      	sub	sp, #24
 8023cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8023cb6:	f107 0308 	add.w	r3, r7, #8
 8023cba:	2200      	movs	r2, #0
 8023cbc:	601a      	str	r2, [r3, #0]
 8023cbe:	605a      	str	r2, [r3, #4]
 8023cc0:	609a      	str	r2, [r3, #8]
 8023cc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023cc4:	463b      	mov	r3, r7
 8023cc6:	2200      	movs	r2, #0
 8023cc8:	601a      	str	r2, [r3, #0]
 8023cca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8023ccc:	4b1d      	ldr	r3, [pc, #116]	; (8023d44 <MX_TIM2_Init+0x94>)
 8023cce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8023cd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8023cd4:	4b1b      	ldr	r3, [pc, #108]	; (8023d44 <MX_TIM2_Init+0x94>)
 8023cd6:	2204      	movs	r2, #4
 8023cd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023cda:	4b1a      	ldr	r3, [pc, #104]	; (8023d44 <MX_TIM2_Init+0x94>)
 8023cdc:	2200      	movs	r2, #0
 8023cde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 104999;
 8023ce0:	4b18      	ldr	r3, [pc, #96]	; (8023d44 <MX_TIM2_Init+0x94>)
 8023ce2:	4a19      	ldr	r2, [pc, #100]	; (8023d48 <MX_TIM2_Init+0x98>)
 8023ce4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023ce6:	4b17      	ldr	r3, [pc, #92]	; (8023d44 <MX_TIM2_Init+0x94>)
 8023ce8:	2200      	movs	r2, #0
 8023cea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023cec:	4b15      	ldr	r3, [pc, #84]	; (8023d44 <MX_TIM2_Init+0x94>)
 8023cee:	2200      	movs	r2, #0
 8023cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8023cf2:	4814      	ldr	r0, [pc, #80]	; (8023d44 <MX_TIM2_Init+0x94>)
 8023cf4:	f005 febe 	bl	8029a74 <HAL_TIM_Base_Init>
 8023cf8:	4603      	mov	r3, r0
 8023cfa:	2b00      	cmp	r3, #0
 8023cfc:	d001      	beq.n	8023d02 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8023cfe:	f000 fb89 	bl	8024414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8023d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023d06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8023d08:	f107 0308 	add.w	r3, r7, #8
 8023d0c:	4619      	mov	r1, r3
 8023d0e:	480d      	ldr	r0, [pc, #52]	; (8023d44 <MX_TIM2_Init+0x94>)
 8023d10:	f006 fa00 	bl	802a114 <HAL_TIM_ConfigClockSource>
 8023d14:	4603      	mov	r3, r0
 8023d16:	2b00      	cmp	r3, #0
 8023d18:	d001      	beq.n	8023d1e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8023d1a:	f000 fb7b 	bl	8024414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023d1e:	2300      	movs	r3, #0
 8023d20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023d22:	2300      	movs	r3, #0
 8023d24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8023d26:	463b      	mov	r3, r7
 8023d28:	4619      	mov	r1, r3
 8023d2a:	4806      	ldr	r0, [pc, #24]	; (8023d44 <MX_TIM2_Init+0x94>)
 8023d2c:	f006 fde2 	bl	802a8f4 <HAL_TIMEx_MasterConfigSynchronization>
 8023d30:	4603      	mov	r3, r0
 8023d32:	2b00      	cmp	r3, #0
 8023d34:	d001      	beq.n	8023d3a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8023d36:	f000 fb6d 	bl	8024414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8023d3a:	bf00      	nop
 8023d3c:	3718      	adds	r7, #24
 8023d3e:	46bd      	mov	sp, r7
 8023d40:	bd80      	pop	{r7, pc}
 8023d42:	bf00      	nop
 8023d44:	20000954 	.word	0x20000954
 8023d48:	00019a27 	.word	0x00019a27

08023d4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8023d4c:	b580      	push	{r7, lr}
 8023d4e:	b08a      	sub	sp, #40	; 0x28
 8023d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023d52:	f107 0320 	add.w	r3, r7, #32
 8023d56:	2200      	movs	r2, #0
 8023d58:	601a      	str	r2, [r3, #0]
 8023d5a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8023d5c:	1d3b      	adds	r3, r7, #4
 8023d5e:	2200      	movs	r2, #0
 8023d60:	601a      	str	r2, [r3, #0]
 8023d62:	605a      	str	r2, [r3, #4]
 8023d64:	609a      	str	r2, [r3, #8]
 8023d66:	60da      	str	r2, [r3, #12]
 8023d68:	611a      	str	r2, [r3, #16]
 8023d6a:	615a      	str	r2, [r3, #20]
 8023d6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8023d6e:	4b32      	ldr	r3, [pc, #200]	; (8023e38 <MX_TIM3_Init+0xec>)
 8023d70:	4a32      	ldr	r2, [pc, #200]	; (8023e3c <MX_TIM3_Init+0xf0>)
 8023d72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8023d74:	4b30      	ldr	r3, [pc, #192]	; (8023e38 <MX_TIM3_Init+0xec>)
 8023d76:	2200      	movs	r2, #0
 8023d78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023d7a:	4b2f      	ldr	r3, [pc, #188]	; (8023e38 <MX_TIM3_Init+0xec>)
 8023d7c:	2200      	movs	r2, #0
 8023d7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8023d80:	4b2d      	ldr	r3, [pc, #180]	; (8023e38 <MX_TIM3_Init+0xec>)
 8023d82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023d86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023d88:	4b2b      	ldr	r3, [pc, #172]	; (8023e38 <MX_TIM3_Init+0xec>)
 8023d8a:	2200      	movs	r2, #0
 8023d8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023d8e:	4b2a      	ldr	r3, [pc, #168]	; (8023e38 <MX_TIM3_Init+0xec>)
 8023d90:	2200      	movs	r2, #0
 8023d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8023d94:	4828      	ldr	r0, [pc, #160]	; (8023e38 <MX_TIM3_Init+0xec>)
 8023d96:	f005 febc 	bl	8029b12 <HAL_TIM_PWM_Init>
 8023d9a:	4603      	mov	r3, r0
 8023d9c:	2b00      	cmp	r3, #0
 8023d9e:	d001      	beq.n	8023da4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8023da0:	f000 fb38 	bl	8024414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023da4:	2300      	movs	r3, #0
 8023da6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023da8:	2300      	movs	r3, #0
 8023daa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8023dac:	f107 0320 	add.w	r3, r7, #32
 8023db0:	4619      	mov	r1, r3
 8023db2:	4821      	ldr	r0, [pc, #132]	; (8023e38 <MX_TIM3_Init+0xec>)
 8023db4:	f006 fd9e 	bl	802a8f4 <HAL_TIMEx_MasterConfigSynchronization>
 8023db8:	4603      	mov	r3, r0
 8023dba:	2b00      	cmp	r3, #0
 8023dbc:	d001      	beq.n	8023dc2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8023dbe:	f000 fb29 	bl	8024414 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8023dc2:	2360      	movs	r3, #96	; 0x60
 8023dc4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8023dc6:	2300      	movs	r3, #0
 8023dc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8023dca:	2300      	movs	r3, #0
 8023dcc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8023dce:	2300      	movs	r3, #0
 8023dd0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8023dd2:	1d3b      	adds	r3, r7, #4
 8023dd4:	2200      	movs	r2, #0
 8023dd6:	4619      	mov	r1, r3
 8023dd8:	4817      	ldr	r0, [pc, #92]	; (8023e38 <MX_TIM3_Init+0xec>)
 8023dda:	f006 f8d5 	bl	8029f88 <HAL_TIM_PWM_ConfigChannel>
 8023dde:	4603      	mov	r3, r0
 8023de0:	2b00      	cmp	r3, #0
 8023de2:	d001      	beq.n	8023de8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8023de4:	f000 fb16 	bl	8024414 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8023de8:	1d3b      	adds	r3, r7, #4
 8023dea:	2204      	movs	r2, #4
 8023dec:	4619      	mov	r1, r3
 8023dee:	4812      	ldr	r0, [pc, #72]	; (8023e38 <MX_TIM3_Init+0xec>)
 8023df0:	f006 f8ca 	bl	8029f88 <HAL_TIM_PWM_ConfigChannel>
 8023df4:	4603      	mov	r3, r0
 8023df6:	2b00      	cmp	r3, #0
 8023df8:	d001      	beq.n	8023dfe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8023dfa:	f000 fb0b 	bl	8024414 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8023dfe:	1d3b      	adds	r3, r7, #4
 8023e00:	2208      	movs	r2, #8
 8023e02:	4619      	mov	r1, r3
 8023e04:	480c      	ldr	r0, [pc, #48]	; (8023e38 <MX_TIM3_Init+0xec>)
 8023e06:	f006 f8bf 	bl	8029f88 <HAL_TIM_PWM_ConfigChannel>
 8023e0a:	4603      	mov	r3, r0
 8023e0c:	2b00      	cmp	r3, #0
 8023e0e:	d001      	beq.n	8023e14 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8023e10:	f000 fb00 	bl	8024414 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8023e14:	1d3b      	adds	r3, r7, #4
 8023e16:	220c      	movs	r2, #12
 8023e18:	4619      	mov	r1, r3
 8023e1a:	4807      	ldr	r0, [pc, #28]	; (8023e38 <MX_TIM3_Init+0xec>)
 8023e1c:	f006 f8b4 	bl	8029f88 <HAL_TIM_PWM_ConfigChannel>
 8023e20:	4603      	mov	r3, r0
 8023e22:	2b00      	cmp	r3, #0
 8023e24:	d001      	beq.n	8023e2a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8023e26:	f000 faf5 	bl	8024414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8023e2a:	4803      	ldr	r0, [pc, #12]	; (8023e38 <MX_TIM3_Init+0xec>)
 8023e2c:	f002 fa30 	bl	8026290 <HAL_TIM_MspPostInit>

}
 8023e30:	bf00      	nop
 8023e32:	3728      	adds	r7, #40	; 0x28
 8023e34:	46bd      	mov	sp, r7
 8023e36:	bd80      	pop	{r7, pc}
 8023e38:	20000754 	.word	0x20000754
 8023e3c:	40000400 	.word	0x40000400

08023e40 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8023e40:	b580      	push	{r7, lr}
 8023e42:	b08c      	sub	sp, #48	; 0x30
 8023e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8023e46:	f107 030c 	add.w	r3, r7, #12
 8023e4a:	2224      	movs	r2, #36	; 0x24
 8023e4c:	2100      	movs	r1, #0
 8023e4e:	4618      	mov	r0, r3
 8023e50:	f006 fe71 	bl	802ab36 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023e54:	1d3b      	adds	r3, r7, #4
 8023e56:	2200      	movs	r2, #0
 8023e58:	601a      	str	r2, [r3, #0]
 8023e5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8023e5c:	4b20      	ldr	r3, [pc, #128]	; (8023ee0 <MX_TIM4_Init+0xa0>)
 8023e5e:	4a21      	ldr	r2, [pc, #132]	; (8023ee4 <MX_TIM4_Init+0xa4>)
 8023e60:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8023e62:	4b1f      	ldr	r3, [pc, #124]	; (8023ee0 <MX_TIM4_Init+0xa0>)
 8023e64:	2200      	movs	r2, #0
 8023e66:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023e68:	4b1d      	ldr	r3, [pc, #116]	; (8023ee0 <MX_TIM4_Init+0xa0>)
 8023e6a:	2200      	movs	r2, #0
 8023e6c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8023e6e:	4b1c      	ldr	r3, [pc, #112]	; (8023ee0 <MX_TIM4_Init+0xa0>)
 8023e70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023e74:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023e76:	4b1a      	ldr	r3, [pc, #104]	; (8023ee0 <MX_TIM4_Init+0xa0>)
 8023e78:	2200      	movs	r2, #0
 8023e7a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023e7c:	4b18      	ldr	r3, [pc, #96]	; (8023ee0 <MX_TIM4_Init+0xa0>)
 8023e7e:	2200      	movs	r2, #0
 8023e80:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8023e82:	2303      	movs	r3, #3
 8023e84:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8023e86:	2300      	movs	r3, #0
 8023e88:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8023e8a:	2301      	movs	r3, #1
 8023e8c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8023e8e:	2300      	movs	r3, #0
 8023e90:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8023e92:	2300      	movs	r3, #0
 8023e94:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8023e96:	2300      	movs	r3, #0
 8023e98:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8023e9a:	2301      	movs	r3, #1
 8023e9c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8023e9e:	2300      	movs	r3, #0
 8023ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8023ea2:	2300      	movs	r3, #0
 8023ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8023ea6:	f107 030c 	add.w	r3, r7, #12
 8023eaa:	4619      	mov	r1, r3
 8023eac:	480c      	ldr	r0, [pc, #48]	; (8023ee0 <MX_TIM4_Init+0xa0>)
 8023eae:	f005 fe99 	bl	8029be4 <HAL_TIM_Encoder_Init>
 8023eb2:	4603      	mov	r3, r0
 8023eb4:	2b00      	cmp	r3, #0
 8023eb6:	d001      	beq.n	8023ebc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8023eb8:	f000 faac 	bl	8024414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023ebc:	2300      	movs	r3, #0
 8023ebe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023ec0:	2300      	movs	r3, #0
 8023ec2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8023ec4:	1d3b      	adds	r3, r7, #4
 8023ec6:	4619      	mov	r1, r3
 8023ec8:	4805      	ldr	r0, [pc, #20]	; (8023ee0 <MX_TIM4_Init+0xa0>)
 8023eca:	f006 fd13 	bl	802a8f4 <HAL_TIMEx_MasterConfigSynchronization>
 8023ece:	4603      	mov	r3, r0
 8023ed0:	2b00      	cmp	r3, #0
 8023ed2:	d001      	beq.n	8023ed8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8023ed4:	f000 fa9e 	bl	8024414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8023ed8:	bf00      	nop
 8023eda:	3730      	adds	r7, #48	; 0x30
 8023edc:	46bd      	mov	sp, r7
 8023ede:	bd80      	pop	{r7, pc}
 8023ee0:	20000680 	.word	0x20000680
 8023ee4:	40000800 	.word	0x40000800

08023ee8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8023ee8:	b580      	push	{r7, lr}
 8023eea:	b086      	sub	sp, #24
 8023eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8023eee:	f107 0308 	add.w	r3, r7, #8
 8023ef2:	2200      	movs	r2, #0
 8023ef4:	601a      	str	r2, [r3, #0]
 8023ef6:	605a      	str	r2, [r3, #4]
 8023ef8:	609a      	str	r2, [r3, #8]
 8023efa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023efc:	463b      	mov	r3, r7
 8023efe:	2200      	movs	r2, #0
 8023f00:	601a      	str	r2, [r3, #0]
 8023f02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8023f04:	4b1d      	ldr	r3, [pc, #116]	; (8023f7c <MX_TIM5_Init+0x94>)
 8023f06:	4a1e      	ldr	r2, [pc, #120]	; (8023f80 <MX_TIM5_Init+0x98>)
 8023f08:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4;
 8023f0a:	4b1c      	ldr	r3, [pc, #112]	; (8023f7c <MX_TIM5_Init+0x94>)
 8023f0c:	2204      	movs	r2, #4
 8023f0e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023f10:	4b1a      	ldr	r3, [pc, #104]	; (8023f7c <MX_TIM5_Init+0x94>)
 8023f12:	2200      	movs	r2, #0
 8023f14:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20999;
 8023f16:	4b19      	ldr	r3, [pc, #100]	; (8023f7c <MX_TIM5_Init+0x94>)
 8023f18:	f245 2207 	movw	r2, #20999	; 0x5207
 8023f1c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8023f1e:	4b17      	ldr	r3, [pc, #92]	; (8023f7c <MX_TIM5_Init+0x94>)
 8023f20:	2200      	movs	r2, #0
 8023f22:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023f24:	4b15      	ldr	r3, [pc, #84]	; (8023f7c <MX_TIM5_Init+0x94>)
 8023f26:	2200      	movs	r2, #0
 8023f28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8023f2a:	4814      	ldr	r0, [pc, #80]	; (8023f7c <MX_TIM5_Init+0x94>)
 8023f2c:	f005 fda2 	bl	8029a74 <HAL_TIM_Base_Init>
 8023f30:	4603      	mov	r3, r0
 8023f32:	2b00      	cmp	r3, #0
 8023f34:	d001      	beq.n	8023f3a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8023f36:	f000 fa6d 	bl	8024414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8023f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8023f3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8023f40:	f107 0308 	add.w	r3, r7, #8
 8023f44:	4619      	mov	r1, r3
 8023f46:	480d      	ldr	r0, [pc, #52]	; (8023f7c <MX_TIM5_Init+0x94>)
 8023f48:	f006 f8e4 	bl	802a114 <HAL_TIM_ConfigClockSource>
 8023f4c:	4603      	mov	r3, r0
 8023f4e:	2b00      	cmp	r3, #0
 8023f50:	d001      	beq.n	8023f56 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8023f52:	f000 fa5f 	bl	8024414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023f56:	2300      	movs	r3, #0
 8023f58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023f5a:	2300      	movs	r3, #0
 8023f5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8023f5e:	463b      	mov	r3, r7
 8023f60:	4619      	mov	r1, r3
 8023f62:	4806      	ldr	r0, [pc, #24]	; (8023f7c <MX_TIM5_Init+0x94>)
 8023f64:	f006 fcc6 	bl	802a8f4 <HAL_TIMEx_MasterConfigSynchronization>
 8023f68:	4603      	mov	r3, r0
 8023f6a:	2b00      	cmp	r3, #0
 8023f6c:	d001      	beq.n	8023f72 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8023f6e:	f000 fa51 	bl	8024414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8023f72:	bf00      	nop
 8023f74:	3718      	adds	r7, #24
 8023f76:	46bd      	mov	sp, r7
 8023f78:	bd80      	pop	{r7, pc}
 8023f7a:	bf00      	nop
 8023f7c:	20000714 	.word	0x20000714
 8023f80:	40000c00 	.word	0x40000c00

08023f84 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8023f84:	b580      	push	{r7, lr}
 8023f86:	b082      	sub	sp, #8
 8023f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023f8a:	463b      	mov	r3, r7
 8023f8c:	2200      	movs	r2, #0
 8023f8e:	601a      	str	r2, [r3, #0]
 8023f90:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8023f92:	4b15      	ldr	r3, [pc, #84]	; (8023fe8 <MX_TIM6_Init+0x64>)
 8023f94:	4a15      	ldr	r2, [pc, #84]	; (8023fec <MX_TIM6_Init+0x68>)
 8023f96:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 8023f98:	4b13      	ldr	r3, [pc, #76]	; (8023fe8 <MX_TIM6_Init+0x64>)
 8023f9a:	2204      	movs	r2, #4
 8023f9c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8023f9e:	4b12      	ldr	r3, [pc, #72]	; (8023fe8 <MX_TIM6_Init+0x64>)
 8023fa0:	2200      	movs	r2, #0
 8023fa2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10499;
 8023fa4:	4b10      	ldr	r3, [pc, #64]	; (8023fe8 <MX_TIM6_Init+0x64>)
 8023fa6:	f642 1203 	movw	r2, #10499	; 0x2903
 8023faa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8023fac:	4b0e      	ldr	r3, [pc, #56]	; (8023fe8 <MX_TIM6_Init+0x64>)
 8023fae:	2200      	movs	r2, #0
 8023fb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8023fb2:	480d      	ldr	r0, [pc, #52]	; (8023fe8 <MX_TIM6_Init+0x64>)
 8023fb4:	f005 fd5e 	bl	8029a74 <HAL_TIM_Base_Init>
 8023fb8:	4603      	mov	r3, r0
 8023fba:	2b00      	cmp	r3, #0
 8023fbc:	d001      	beq.n	8023fc2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8023fbe:	f000 fa29 	bl	8024414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8023fc2:	2300      	movs	r3, #0
 8023fc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8023fc6:	2300      	movs	r3, #0
 8023fc8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8023fca:	463b      	mov	r3, r7
 8023fcc:	4619      	mov	r1, r3
 8023fce:	4806      	ldr	r0, [pc, #24]	; (8023fe8 <MX_TIM6_Init+0x64>)
 8023fd0:	f006 fc90 	bl	802a8f4 <HAL_TIMEx_MasterConfigSynchronization>
 8023fd4:	4603      	mov	r3, r0
 8023fd6:	2b00      	cmp	r3, #0
 8023fd8:	d001      	beq.n	8023fde <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8023fda:	f000 fa1b 	bl	8024414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8023fde:	bf00      	nop
 8023fe0:	3708      	adds	r7, #8
 8023fe2:	46bd      	mov	sp, r7
 8023fe4:	bd80      	pop	{r7, pc}
 8023fe6:	bf00      	nop
 8023fe8:	200008d4 	.word	0x200008d4
 8023fec:	40001000 	.word	0x40001000

08023ff0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8023ff0:	b580      	push	{r7, lr}
 8023ff2:	b082      	sub	sp, #8
 8023ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8023ff6:	463b      	mov	r3, r7
 8023ff8:	2200      	movs	r2, #0
 8023ffa:	601a      	str	r2, [r3, #0]
 8023ffc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8023ffe:	4b15      	ldr	r3, [pc, #84]	; (8024054 <MX_TIM7_Init+0x64>)
 8024000:	4a15      	ldr	r2, [pc, #84]	; (8024058 <MX_TIM7_Init+0x68>)
 8024002:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 8024004:	4b13      	ldr	r3, [pc, #76]	; (8024054 <MX_TIM7_Init+0x64>)
 8024006:	2204      	movs	r2, #4
 8024008:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 802400a:	4b12      	ldr	r3, [pc, #72]	; (8024054 <MX_TIM7_Init+0x64>)
 802400c:	2200      	movs	r2, #0
 802400e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1049;
 8024010:	4b10      	ldr	r3, [pc, #64]	; (8024054 <MX_TIM7_Init+0x64>)
 8024012:	f240 4219 	movw	r2, #1049	; 0x419
 8024016:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8024018:	4b0e      	ldr	r3, [pc, #56]	; (8024054 <MX_TIM7_Init+0x64>)
 802401a:	2200      	movs	r2, #0
 802401c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 802401e:	480d      	ldr	r0, [pc, #52]	; (8024054 <MX_TIM7_Init+0x64>)
 8024020:	f005 fd28 	bl	8029a74 <HAL_TIM_Base_Init>
 8024024:	4603      	mov	r3, r0
 8024026:	2b00      	cmp	r3, #0
 8024028:	d001      	beq.n	802402e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 802402a:	f000 f9f3 	bl	8024414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802402e:	2300      	movs	r3, #0
 8024030:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8024032:	2300      	movs	r3, #0
 8024034:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8024036:	463b      	mov	r3, r7
 8024038:	4619      	mov	r1, r3
 802403a:	4806      	ldr	r0, [pc, #24]	; (8024054 <MX_TIM7_Init+0x64>)
 802403c:	f006 fc5a 	bl	802a8f4 <HAL_TIMEx_MasterConfigSynchronization>
 8024040:	4603      	mov	r3, r0
 8024042:	2b00      	cmp	r3, #0
 8024044:	d001      	beq.n	802404a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8024046:	f000 f9e5 	bl	8024414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 802404a:	bf00      	nop
 802404c:	3708      	adds	r7, #8
 802404e:	46bd      	mov	sp, r7
 8024050:	bd80      	pop	{r7, pc}
 8024052:	bf00      	nop
 8024054:	200009d4 	.word	0x200009d4
 8024058:	40001400 	.word	0x40001400

0802405c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 802405c:	b580      	push	{r7, lr}
 802405e:	b08c      	sub	sp, #48	; 0x30
 8024060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8024062:	f107 030c 	add.w	r3, r7, #12
 8024066:	2224      	movs	r2, #36	; 0x24
 8024068:	2100      	movs	r1, #0
 802406a:	4618      	mov	r0, r3
 802406c:	f006 fd63 	bl	802ab36 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8024070:	1d3b      	adds	r3, r7, #4
 8024072:	2200      	movs	r2, #0
 8024074:	601a      	str	r2, [r3, #0]
 8024076:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8024078:	4b22      	ldr	r3, [pc, #136]	; (8024104 <MX_TIM8_Init+0xa8>)
 802407a:	4a23      	ldr	r2, [pc, #140]	; (8024108 <MX_TIM8_Init+0xac>)
 802407c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 802407e:	4b21      	ldr	r3, [pc, #132]	; (8024104 <MX_TIM8_Init+0xa8>)
 8024080:	2200      	movs	r2, #0
 8024082:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8024084:	4b1f      	ldr	r3, [pc, #124]	; (8024104 <MX_TIM8_Init+0xa8>)
 8024086:	2200      	movs	r2, #0
 8024088:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 802408a:	4b1e      	ldr	r3, [pc, #120]	; (8024104 <MX_TIM8_Init+0xa8>)
 802408c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8024090:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8024092:	4b1c      	ldr	r3, [pc, #112]	; (8024104 <MX_TIM8_Init+0xa8>)
 8024094:	2200      	movs	r2, #0
 8024096:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8024098:	4b1a      	ldr	r3, [pc, #104]	; (8024104 <MX_TIM8_Init+0xa8>)
 802409a:	2200      	movs	r2, #0
 802409c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802409e:	4b19      	ldr	r3, [pc, #100]	; (8024104 <MX_TIM8_Init+0xa8>)
 80240a0:	2200      	movs	r2, #0
 80240a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80240a4:	2303      	movs	r3, #3
 80240a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80240a8:	2300      	movs	r3, #0
 80240aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80240ac:	2301      	movs	r3, #1
 80240ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80240b0:	2300      	movs	r3, #0
 80240b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80240b4:	2300      	movs	r3, #0
 80240b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80240b8:	2300      	movs	r3, #0
 80240ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80240bc:	2301      	movs	r3, #1
 80240be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80240c0:	2300      	movs	r3, #0
 80240c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80240c4:	2300      	movs	r3, #0
 80240c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80240c8:	f107 030c 	add.w	r3, r7, #12
 80240cc:	4619      	mov	r1, r3
 80240ce:	480d      	ldr	r0, [pc, #52]	; (8024104 <MX_TIM8_Init+0xa8>)
 80240d0:	f005 fd88 	bl	8029be4 <HAL_TIM_Encoder_Init>
 80240d4:	4603      	mov	r3, r0
 80240d6:	2b00      	cmp	r3, #0
 80240d8:	d001      	beq.n	80240de <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80240da:	f000 f99b 	bl	8024414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80240de:	2300      	movs	r3, #0
 80240e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80240e2:	2300      	movs	r3, #0
 80240e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80240e6:	1d3b      	adds	r3, r7, #4
 80240e8:	4619      	mov	r1, r3
 80240ea:	4806      	ldr	r0, [pc, #24]	; (8024104 <MX_TIM8_Init+0xa8>)
 80240ec:	f006 fc02 	bl	802a8f4 <HAL_TIMEx_MasterConfigSynchronization>
 80240f0:	4603      	mov	r3, r0
 80240f2:	2b00      	cmp	r3, #0
 80240f4:	d001      	beq.n	80240fa <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80240f6:	f000 f98d 	bl	8024414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80240fa:	bf00      	nop
 80240fc:	3730      	adds	r7, #48	; 0x30
 80240fe:	46bd      	mov	sp, r7
 8024100:	bd80      	pop	{r7, pc}
 8024102:	bf00      	nop
 8024104:	20000640 	.word	0x20000640
 8024108:	40010400 	.word	0x40010400

0802410c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 802410c:	b580      	push	{r7, lr}
 802410e:	b088      	sub	sp, #32
 8024110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8024112:	1d3b      	adds	r3, r7, #4
 8024114:	2200      	movs	r2, #0
 8024116:	601a      	str	r2, [r3, #0]
 8024118:	605a      	str	r2, [r3, #4]
 802411a:	609a      	str	r2, [r3, #8]
 802411c:	60da      	str	r2, [r3, #12]
 802411e:	611a      	str	r2, [r3, #16]
 8024120:	615a      	str	r2, [r3, #20]
 8024122:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8024124:	4b1e      	ldr	r3, [pc, #120]	; (80241a0 <MX_TIM11_Init+0x94>)
 8024126:	4a1f      	ldr	r2, [pc, #124]	; (80241a4 <MX_TIM11_Init+0x98>)
 8024128:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 802412a:	4b1d      	ldr	r3, [pc, #116]	; (80241a0 <MX_TIM11_Init+0x94>)
 802412c:	2200      	movs	r2, #0
 802412e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8024130:	4b1b      	ldr	r3, [pc, #108]	; (80241a0 <MX_TIM11_Init+0x94>)
 8024132:	2200      	movs	r2, #0
 8024134:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1679;
 8024136:	4b1a      	ldr	r3, [pc, #104]	; (80241a0 <MX_TIM11_Init+0x94>)
 8024138:	f240 628f 	movw	r2, #1679	; 0x68f
 802413c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802413e:	4b18      	ldr	r3, [pc, #96]	; (80241a0 <MX_TIM11_Init+0x94>)
 8024140:	2200      	movs	r2, #0
 8024142:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8024144:	4b16      	ldr	r3, [pc, #88]	; (80241a0 <MX_TIM11_Init+0x94>)
 8024146:	2200      	movs	r2, #0
 8024148:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 802414a:	4815      	ldr	r0, [pc, #84]	; (80241a0 <MX_TIM11_Init+0x94>)
 802414c:	f005 fc92 	bl	8029a74 <HAL_TIM_Base_Init>
 8024150:	4603      	mov	r3, r0
 8024152:	2b00      	cmp	r3, #0
 8024154:	d001      	beq.n	802415a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8024156:	f000 f95d 	bl	8024414 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 802415a:	4811      	ldr	r0, [pc, #68]	; (80241a0 <MX_TIM11_Init+0x94>)
 802415c:	f005 fcd9 	bl	8029b12 <HAL_TIM_PWM_Init>
 8024160:	4603      	mov	r3, r0
 8024162:	2b00      	cmp	r3, #0
 8024164:	d001      	beq.n	802416a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8024166:	f000 f955 	bl	8024414 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 802416a:	2360      	movs	r3, #96	; 0x60
 802416c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 802416e:	2300      	movs	r3, #0
 8024170:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8024172:	2300      	movs	r3, #0
 8024174:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8024176:	2300      	movs	r3, #0
 8024178:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 802417a:	1d3b      	adds	r3, r7, #4
 802417c:	2200      	movs	r2, #0
 802417e:	4619      	mov	r1, r3
 8024180:	4807      	ldr	r0, [pc, #28]	; (80241a0 <MX_TIM11_Init+0x94>)
 8024182:	f005 ff01 	bl	8029f88 <HAL_TIM_PWM_ConfigChannel>
 8024186:	4603      	mov	r3, r0
 8024188:	2b00      	cmp	r3, #0
 802418a:	d001      	beq.n	8024190 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 802418c:	f000 f942 	bl	8024414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8024190:	4803      	ldr	r0, [pc, #12]	; (80241a0 <MX_TIM11_Init+0x94>)
 8024192:	f002 f87d 	bl	8026290 <HAL_TIM_MspPostInit>

}
 8024196:	bf00      	nop
 8024198:	3720      	adds	r7, #32
 802419a:	46bd      	mov	sp, r7
 802419c:	bd80      	pop	{r7, pc}
 802419e:	bf00      	nop
 80241a0:	20000834 	.word	0x20000834
 80241a4:	40014800 	.word	0x40014800

080241a8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80241a8:	b580      	push	{r7, lr}
 80241aa:	b088      	sub	sp, #32
 80241ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80241ae:	1d3b      	adds	r3, r7, #4
 80241b0:	2200      	movs	r2, #0
 80241b2:	601a      	str	r2, [r3, #0]
 80241b4:	605a      	str	r2, [r3, #4]
 80241b6:	609a      	str	r2, [r3, #8]
 80241b8:	60da      	str	r2, [r3, #12]
 80241ba:	611a      	str	r2, [r3, #16]
 80241bc:	615a      	str	r2, [r3, #20]
 80241be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80241c0:	4b1a      	ldr	r3, [pc, #104]	; (802422c <MX_TIM12_Init+0x84>)
 80241c2:	4a1b      	ldr	r2, [pc, #108]	; (8024230 <MX_TIM12_Init+0x88>)
 80241c4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 880;
 80241c6:	4b19      	ldr	r3, [pc, #100]	; (802422c <MX_TIM12_Init+0x84>)
 80241c8:	f44f 725c 	mov.w	r2, #880	; 0x370
 80241cc:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80241ce:	4b17      	ldr	r3, [pc, #92]	; (802422c <MX_TIM12_Init+0x84>)
 80241d0:	2200      	movs	r2, #0
 80241d2:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 53;
 80241d4:	4b15      	ldr	r3, [pc, #84]	; (802422c <MX_TIM12_Init+0x84>)
 80241d6:	2235      	movs	r2, #53	; 0x35
 80241d8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80241da:	4b14      	ldr	r3, [pc, #80]	; (802422c <MX_TIM12_Init+0x84>)
 80241dc:	2200      	movs	r2, #0
 80241de:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80241e0:	4b12      	ldr	r3, [pc, #72]	; (802422c <MX_TIM12_Init+0x84>)
 80241e2:	2200      	movs	r2, #0
 80241e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80241e6:	4811      	ldr	r0, [pc, #68]	; (802422c <MX_TIM12_Init+0x84>)
 80241e8:	f005 fc93 	bl	8029b12 <HAL_TIM_PWM_Init>
 80241ec:	4603      	mov	r3, r0
 80241ee:	2b00      	cmp	r3, #0
 80241f0:	d001      	beq.n	80241f6 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80241f2:	f000 f90f 	bl	8024414 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80241f6:	2360      	movs	r3, #96	; 0x60
 80241f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80241fa:	2300      	movs	r3, #0
 80241fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80241fe:	2300      	movs	r3, #0
 8024200:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8024202:	2300      	movs	r3, #0
 8024204:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8024206:	1d3b      	adds	r3, r7, #4
 8024208:	2204      	movs	r2, #4
 802420a:	4619      	mov	r1, r3
 802420c:	4807      	ldr	r0, [pc, #28]	; (802422c <MX_TIM12_Init+0x84>)
 802420e:	f005 febb 	bl	8029f88 <HAL_TIM_PWM_ConfigChannel>
 8024212:	4603      	mov	r3, r0
 8024214:	2b00      	cmp	r3, #0
 8024216:	d001      	beq.n	802421c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8024218:	f000 f8fc 	bl	8024414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 802421c:	4803      	ldr	r0, [pc, #12]	; (802422c <MX_TIM12_Init+0x84>)
 802421e:	f002 f837 	bl	8026290 <HAL_TIM_MspPostInit>

}
 8024222:	bf00      	nop
 8024224:	3720      	adds	r7, #32
 8024226:	46bd      	mov	sp, r7
 8024228:	bd80      	pop	{r7, pc}
 802422a:	bf00      	nop
 802422c:	20000994 	.word	0x20000994
 8024230:	40001800 	.word	0x40001800

08024234 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8024234:	b580      	push	{r7, lr}
 8024236:	b082      	sub	sp, #8
 8024238:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 802423a:	2300      	movs	r3, #0
 802423c:	607b      	str	r3, [r7, #4]
 802423e:	4b0c      	ldr	r3, [pc, #48]	; (8024270 <MX_DMA_Init+0x3c>)
 8024240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024242:	4a0b      	ldr	r2, [pc, #44]	; (8024270 <MX_DMA_Init+0x3c>)
 8024244:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8024248:	6313      	str	r3, [r2, #48]	; 0x30
 802424a:	4b09      	ldr	r3, [pc, #36]	; (8024270 <MX_DMA_Init+0x3c>)
 802424c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802424e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8024252:	607b      	str	r3, [r7, #4]
 8024254:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8024256:	2200      	movs	r2, #0
 8024258:	2100      	movs	r1, #0
 802425a:	2038      	movs	r0, #56	; 0x38
 802425c:	f003 f90f 	bl	802747e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8024260:	2038      	movs	r0, #56	; 0x38
 8024262:	f003 f928 	bl	80274b6 <HAL_NVIC_EnableIRQ>

}
 8024266:	bf00      	nop
 8024268:	3708      	adds	r7, #8
 802426a:	46bd      	mov	sp, r7
 802426c:	bd80      	pop	{r7, pc}
 802426e:	bf00      	nop
 8024270:	40023800 	.word	0x40023800

08024274 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8024274:	b580      	push	{r7, lr}
 8024276:	b08a      	sub	sp, #40	; 0x28
 8024278:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802427a:	f107 0314 	add.w	r3, r7, #20
 802427e:	2200      	movs	r2, #0
 8024280:	601a      	str	r2, [r3, #0]
 8024282:	605a      	str	r2, [r3, #4]
 8024284:	609a      	str	r2, [r3, #8]
 8024286:	60da      	str	r2, [r3, #12]
 8024288:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 802428a:	2300      	movs	r3, #0
 802428c:	613b      	str	r3, [r7, #16]
 802428e:	4b5c      	ldr	r3, [pc, #368]	; (8024400 <MX_GPIO_Init+0x18c>)
 8024290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024292:	4a5b      	ldr	r2, [pc, #364]	; (8024400 <MX_GPIO_Init+0x18c>)
 8024294:	f043 0304 	orr.w	r3, r3, #4
 8024298:	6313      	str	r3, [r2, #48]	; 0x30
 802429a:	4b59      	ldr	r3, [pc, #356]	; (8024400 <MX_GPIO_Init+0x18c>)
 802429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802429e:	f003 0304 	and.w	r3, r3, #4
 80242a2:	613b      	str	r3, [r7, #16]
 80242a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80242a6:	2300      	movs	r3, #0
 80242a8:	60fb      	str	r3, [r7, #12]
 80242aa:	4b55      	ldr	r3, [pc, #340]	; (8024400 <MX_GPIO_Init+0x18c>)
 80242ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80242ae:	4a54      	ldr	r2, [pc, #336]	; (8024400 <MX_GPIO_Init+0x18c>)
 80242b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80242b4:	6313      	str	r3, [r2, #48]	; 0x30
 80242b6:	4b52      	ldr	r3, [pc, #328]	; (8024400 <MX_GPIO_Init+0x18c>)
 80242b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80242ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80242be:	60fb      	str	r3, [r7, #12]
 80242c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80242c2:	2300      	movs	r3, #0
 80242c4:	60bb      	str	r3, [r7, #8]
 80242c6:	4b4e      	ldr	r3, [pc, #312]	; (8024400 <MX_GPIO_Init+0x18c>)
 80242c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80242ca:	4a4d      	ldr	r2, [pc, #308]	; (8024400 <MX_GPIO_Init+0x18c>)
 80242cc:	f043 0301 	orr.w	r3, r3, #1
 80242d0:	6313      	str	r3, [r2, #48]	; 0x30
 80242d2:	4b4b      	ldr	r3, [pc, #300]	; (8024400 <MX_GPIO_Init+0x18c>)
 80242d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80242d6:	f003 0301 	and.w	r3, r3, #1
 80242da:	60bb      	str	r3, [r7, #8]
 80242dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80242de:	2300      	movs	r3, #0
 80242e0:	607b      	str	r3, [r7, #4]
 80242e2:	4b47      	ldr	r3, [pc, #284]	; (8024400 <MX_GPIO_Init+0x18c>)
 80242e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80242e6:	4a46      	ldr	r2, [pc, #280]	; (8024400 <MX_GPIO_Init+0x18c>)
 80242e8:	f043 0302 	orr.w	r3, r3, #2
 80242ec:	6313      	str	r3, [r2, #48]	; 0x30
 80242ee:	4b44      	ldr	r3, [pc, #272]	; (8024400 <MX_GPIO_Init+0x18c>)
 80242f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80242f2:	f003 0302 	and.w	r3, r3, #2
 80242f6:	607b      	str	r3, [r7, #4]
 80242f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80242fa:	2300      	movs	r3, #0
 80242fc:	603b      	str	r3, [r7, #0]
 80242fe:	4b40      	ldr	r3, [pc, #256]	; (8024400 <MX_GPIO_Init+0x18c>)
 8024300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024302:	4a3f      	ldr	r2, [pc, #252]	; (8024400 <MX_GPIO_Init+0x18c>)
 8024304:	f043 0308 	orr.w	r3, r3, #8
 8024308:	6313      	str	r3, [r2, #48]	; 0x30
 802430a:	4b3d      	ldr	r3, [pc, #244]	; (8024400 <MX_GPIO_Init+0x18c>)
 802430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802430e:	f003 0308 	and.w	r3, r3, #8
 8024312:	603b      	str	r3, [r7, #0]
 8024314:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8024316:	2200      	movs	r2, #0
 8024318:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 802431c:	4839      	ldr	r0, [pc, #228]	; (8024404 <MX_GPIO_Init+0x190>)
 802431e:	f004 f8db 	bl	80284d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8024322:	2201      	movs	r2, #1
 8024324:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8024328:	4837      	ldr	r0, [pc, #220]	; (8024408 <MX_GPIO_Init+0x194>)
 802432a:	f004 f8d5 	bl	80284d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 802432e:	2200      	movs	r2, #0
 8024330:	f44f 4105 	mov.w	r1, #34048	; 0x8500
 8024334:	4835      	ldr	r0, [pc, #212]	; (802440c <MX_GPIO_Init+0x198>)
 8024336:	f004 f8cf 	bl	80284d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 802433a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 802433e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8024340:	2301      	movs	r3, #1
 8024342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024344:	2300      	movs	r3, #0
 8024346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8024348:	2300      	movs	r3, #0
 802434a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802434c:	f107 0314 	add.w	r3, r7, #20
 8024350:	4619      	mov	r1, r3
 8024352:	482c      	ldr	r0, [pc, #176]	; (8024404 <MX_GPIO_Init+0x190>)
 8024354:	f003 ff0e 	bl	8028174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8024358:	2307      	movs	r3, #7
 802435a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802435c:	2300      	movs	r3, #0
 802435e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8024360:	2301      	movs	r3, #1
 8024362:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8024364:	f107 0314 	add.w	r3, r7, #20
 8024368:	4619      	mov	r1, r3
 802436a:	4827      	ldr	r0, [pc, #156]	; (8024408 <MX_GPIO_Init+0x194>)
 802436c:	f003 ff02 	bl	8028174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8024370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8024374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8024376:	2301      	movs	r3, #1
 8024378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802437a:	2300      	movs	r3, #0
 802437c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802437e:	2300      	movs	r3, #0
 8024380:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8024382:	f107 0314 	add.w	r3, r7, #20
 8024386:	4619      	mov	r1, r3
 8024388:	481f      	ldr	r0, [pc, #124]	; (8024408 <MX_GPIO_Init+0x194>)
 802438a:	f003 fef3 	bl	8028174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_8;
 802438e:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8024392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8024394:	2300      	movs	r3, #0
 8024396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8024398:	2300      	movs	r3, #0
 802439a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802439c:	f107 0314 	add.w	r3, r7, #20
 80243a0:	4619      	mov	r1, r3
 80243a2:	4819      	ldr	r0, [pc, #100]	; (8024408 <MX_GPIO_Init+0x194>)
 80243a4:	f003 fee6 	bl	8028174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15;
 80243a8:	f44f 4305 	mov.w	r3, #34048	; 0x8500
 80243ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80243ae:	2301      	movs	r3, #1
 80243b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80243b2:	2300      	movs	r3, #0
 80243b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80243b6:	2300      	movs	r3, #0
 80243b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80243ba:	f107 0314 	add.w	r3, r7, #20
 80243be:	4619      	mov	r1, r3
 80243c0:	4812      	ldr	r0, [pc, #72]	; (802440c <MX_GPIO_Init+0x198>)
 80243c2:	f003 fed7 	bl	8028174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80243c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80243ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80243cc:	2300      	movs	r3, #0
 80243ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80243d0:	2301      	movs	r3, #1
 80243d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80243d4:	f107 0314 	add.w	r3, r7, #20
 80243d8:	4619      	mov	r1, r3
 80243da:	480c      	ldr	r0, [pc, #48]	; (802440c <MX_GPIO_Init+0x198>)
 80243dc:	f003 feca 	bl	8028174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80243e0:	2304      	movs	r3, #4
 80243e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80243e4:	2300      	movs	r3, #0
 80243e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80243e8:	2300      	movs	r3, #0
 80243ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80243ec:	f107 0314 	add.w	r3, r7, #20
 80243f0:	4619      	mov	r1, r3
 80243f2:	4807      	ldr	r0, [pc, #28]	; (8024410 <MX_GPIO_Init+0x19c>)
 80243f4:	f003 febe 	bl	8028174 <HAL_GPIO_Init>

}
 80243f8:	bf00      	nop
 80243fa:	3728      	adds	r7, #40	; 0x28
 80243fc:	46bd      	mov	sp, r7
 80243fe:	bd80      	pop	{r7, pc}
 8024400:	40023800 	.word	0x40023800
 8024404:	40020800 	.word	0x40020800
 8024408:	40020400 	.word	0x40020400
 802440c:	40020000 	.word	0x40020000
 8024410:	40020c00 	.word	0x40020c00

08024414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8024414:	b480      	push	{r7}
 8024416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8024418:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 802441a:	e7fe      	b.n	802441a <Error_Handler+0x6>

0802441c <_ZN5Motor4InitEv>:
#include "motor.hpp"
#include "declare_extern.h"

void Motor::Init()
{
 802441c:	b580      	push	{r7, lr}
 802441e:	b082      	sub	sp, #8
 8024420:	af00      	add	r7, sp, #0
 8024422:	6078      	str	r0, [r7, #4]
    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 8024424:	2104      	movs	r1, #4
 8024426:	4812      	ldr	r0, [pc, #72]	; (8024470 <_ZN5Motor4InitEv+0x54>)
 8024428:	f005 fb9e 	bl	8029b68 <HAL_TIM_PWM_Start>
 802442c:	4603      	mov	r3, r0
 802442e:	2b00      	cmp	r3, #0
 8024430:	bf14      	ite	ne
 8024432:	2301      	movne	r3, #1
 8024434:	2300      	moveq	r3, #0
 8024436:	b2db      	uxtb	r3, r3
 8024438:	2b00      	cmp	r3, #0
 802443a:	d004      	beq.n	8024446 <_ZN5Motor4InitEv+0x2a>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim1_ch2 = true; // MOTOR_R
 802443c:	4b0d      	ldr	r3, [pc, #52]	; (8024474 <_ZN5Motor4InitEv+0x58>)
 802443e:	2201      	movs	r2, #1
 8024440:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8024442:	f7ff ffe7 	bl	8024414 <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8024446:	210c      	movs	r1, #12
 8024448:	4809      	ldr	r0, [pc, #36]	; (8024470 <_ZN5Motor4InitEv+0x54>)
 802444a:	f005 fb8d 	bl	8029b68 <HAL_TIM_PWM_Start>
 802444e:	4603      	mov	r3, r0
 8024450:	2b00      	cmp	r3, #0
 8024452:	bf14      	ite	ne
 8024454:	2301      	movne	r3, #1
 8024456:	2300      	moveq	r3, #0
 8024458:	b2db      	uxtb	r3, r3
 802445a:	2b00      	cmp	r3, #0
 802445c:	d004      	beq.n	8024468 <_ZN5Motor4InitEv+0x4c>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim1_ch4 = true; // MOTOR_L
 802445e:	4b06      	ldr	r3, [pc, #24]	; (8024478 <_ZN5Motor4InitEv+0x5c>)
 8024460:	2201      	movs	r2, #1
 8024462:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8024464:	f7ff ffd6 	bl	8024414 <Error_Handler>
    }
}
 8024468:	bf00      	nop
 802446a:	3708      	adds	r7, #8
 802446c:	46bd      	mov	sp, r7
 802446e:	bd80      	pop	{r7, pc}
 8024470:	20000914 	.word	0x20000914
 8024474:	200000d6 	.word	0x200000d6
 8024478:	200000d7 	.word	0x200000d7
 802447c:	00000000 	.word	0x00000000

08024480 <_ZN5Motor5DriveEff>:

void Motor::Drive(float translation_ratio, float rotation_ratio)
{
 8024480:	b580      	push	{r7, lr}
 8024482:	b08a      	sub	sp, #40	; 0x28
 8024484:	af00      	add	r7, sp, #0
 8024486:	60f8      	str	r0, [r7, #12]
 8024488:	ed87 0a02 	vstr	s0, [r7, #8]
 802448c:	edc7 0a01 	vstr	s1, [r7, #4]
#ifdef DEBUG_MODE
    g_translation_ratio = translation_ratio;
 8024490:	4a89      	ldr	r2, [pc, #548]	; (80246b8 <_ZN5Motor5DriveEff+0x238>)
 8024492:	68bb      	ldr	r3, [r7, #8]
 8024494:	6013      	str	r3, [r2, #0]
    g_rotation_ratio    = rotation_ratio;
 8024496:	4a89      	ldr	r2, [pc, #548]	; (80246bc <_ZN5Motor5DriveEff+0x23c>)
 8024498:	687b      	ldr	r3, [r7, #4]
 802449a:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    if(translation_ratio > LIMIT_TRANS_DUTY)       translation_ratio =  LIMIT_TRANS_DUTY;
 802449c:	68b8      	ldr	r0, [r7, #8]
 802449e:	f7fb ff33 	bl	8020308 <__aeabi_f2d>
 80244a2:	a381      	add	r3, pc, #516	; (adr r3, 80246a8 <_ZN5Motor5DriveEff+0x228>)
 80244a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80244a8:	f7fc fa16 	bl	80208d8 <__aeabi_dcmpgt>
 80244ac:	4603      	mov	r3, r0
 80244ae:	2b00      	cmp	r3, #0
 80244b0:	d002      	beq.n	80244b8 <_ZN5Motor5DriveEff+0x38>
 80244b2:	4b83      	ldr	r3, [pc, #524]	; (80246c0 <_ZN5Motor5DriveEff+0x240>)
 80244b4:	60bb      	str	r3, [r7, #8]
 80244b6:	e00c      	b.n	80244d2 <_ZN5Motor5DriveEff+0x52>
    else if(translation_ratio < -LIMIT_TRANS_DUTY) translation_ratio = -LIMIT_TRANS_DUTY;
 80244b8:	68b8      	ldr	r0, [r7, #8]
 80244ba:	f7fb ff25 	bl	8020308 <__aeabi_f2d>
 80244be:	a37c      	add	r3, pc, #496	; (adr r3, 80246b0 <_ZN5Motor5DriveEff+0x230>)
 80244c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80244c4:	f7fc f9ea 	bl	802089c <__aeabi_dcmplt>
 80244c8:	4603      	mov	r3, r0
 80244ca:	2b00      	cmp	r3, #0
 80244cc:	d001      	beq.n	80244d2 <_ZN5Motor5DriveEff+0x52>
 80244ce:	4b7d      	ldr	r3, [pc, #500]	; (80246c4 <_ZN5Motor5DriveEff+0x244>)
 80244d0:	60bb      	str	r3, [r7, #8]

    float sum = translation_ratio + rotation_ratio;
 80244d2:	ed97 7a02 	vldr	s14, [r7, #8]
 80244d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80244da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80244de:	edc7 7a06 	vstr	s15, [r7, #24]
    float excess = 0;
 80244e2:	f04f 0300 	mov.w	r3, #0
 80244e6:	627b      	str	r3, [r7, #36]	; 0x24

    if(sum > 1.0)       excess = sum - 1.0;
 80244e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80244ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80244f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80244f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80244f8:	dd08      	ble.n	802450c <_ZN5Motor5DriveEff+0x8c>
 80244fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80244fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024502:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024506:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 802450a:	e010      	b.n	802452e <_ZN5Motor5DriveEff+0xae>
    else if(sum < -1.0) excess = sum + 1.0;
 802450c:	edd7 7a06 	vldr	s15, [r7, #24]
 8024510:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8024514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8024518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802451c:	d507      	bpl.n	802452e <_ZN5Motor5DriveEff+0xae>
 802451e:	edd7 7a06 	vldr	s15, [r7, #24]
 8024522:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024526:	ee77 7a87 	vadd.f32	s15, s15, s14
 802452a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    translation_ratio -= excess;
 802452e:	ed97 7a02 	vldr	s14, [r7, #8]
 8024532:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8024536:	ee77 7a67 	vsub.f32	s15, s14, s15
 802453a:	edc7 7a02 	vstr	s15, [r7, #8]

#ifdef DEBUG_MODE
    g_sum_raito = sum;
 802453e:	4a62      	ldr	r2, [pc, #392]	; (80246c8 <_ZN5Motor5DriveEff+0x248>)
 8024540:	69bb      	ldr	r3, [r7, #24]
 8024542:	6013      	str	r3, [r2, #0]
    g_excess_ratio = excess;
 8024544:	4a61      	ldr	r2, [pc, #388]	; (80246cc <_ZN5Motor5DriveEff+0x24c>)
 8024546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024548:	6013      	str	r3, [r2, #0]
    g_reduced_translation = translation_ratio;
 802454a:	4a61      	ldr	r2, [pc, #388]	; (80246d0 <_ZN5Motor5DriveEff+0x250>)
 802454c:	68bb      	ldr	r3, [r7, #8]
 802454e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    float duty_l = translation_ratio - rotation_ratio;
 8024550:	ed97 7a02 	vldr	s14, [r7, #8]
 8024554:	edd7 7a01 	vldr	s15, [r7, #4]
 8024558:	ee77 7a67 	vsub.f32	s15, s14, s15
 802455c:	edc7 7a08 	vstr	s15, [r7, #32]
    float duty_r = translation_ratio + rotation_ratio;
 8024560:	ed97 7a02 	vldr	s14, [r7, #8]
 8024564:	edd7 7a01 	vldr	s15, [r7, #4]
 8024568:	ee77 7a27 	vadd.f32	s15, s14, s15
 802456c:	edc7 7a07 	vstr	s15, [r7, #28]

    if(duty_l > 1.0)       duty_l =  1.0;
 8024570:	edd7 7a08 	vldr	s15, [r7, #32]
 8024574:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8024578:	eef4 7ac7 	vcmpe.f32	s15, s14
 802457c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024580:	dd03      	ble.n	802458a <_ZN5Motor5DriveEff+0x10a>
 8024582:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8024586:	623b      	str	r3, [r7, #32]
 8024588:	e00a      	b.n	80245a0 <_ZN5Motor5DriveEff+0x120>
    else if(duty_l < -1.0) duty_l = -1.0;
 802458a:	edd7 7a08 	vldr	s15, [r7, #32]
 802458e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8024592:	eef4 7ac7 	vcmpe.f32	s15, s14
 8024596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802459a:	d501      	bpl.n	80245a0 <_ZN5Motor5DriveEff+0x120>
 802459c:	4b4d      	ldr	r3, [pc, #308]	; (80246d4 <_ZN5Motor5DriveEff+0x254>)
 802459e:	623b      	str	r3, [r7, #32]

    if(duty_r > 1.0)       duty_r =  1.0;
 80245a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80245a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80245a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80245ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80245b0:	dd03      	ble.n	80245ba <_ZN5Motor5DriveEff+0x13a>
 80245b2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80245b6:	61fb      	str	r3, [r7, #28]
 80245b8:	e00a      	b.n	80245d0 <_ZN5Motor5DriveEff+0x150>
    else if(duty_r < -1.0) duty_r = -1.0;
 80245ba:	edd7 7a07 	vldr	s15, [r7, #28]
 80245be:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80245c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80245c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80245ca:	d501      	bpl.n	80245d0 <_ZN5Motor5DriveEff+0x150>
 80245cc:	4b41      	ldr	r3, [pc, #260]	; (80246d4 <_ZN5Motor5DriveEff+0x254>)
 80245ce:	61fb      	str	r3, [r7, #28]

#ifdef DEBUG_MODE
    g_duty_l = duty_l;
 80245d0:	4a41      	ldr	r2, [pc, #260]	; (80246d8 <_ZN5Motor5DriveEff+0x258>)
 80245d2:	6a3b      	ldr	r3, [r7, #32]
 80245d4:	6013      	str	r3, [r2, #0]
    g_duty_r = duty_r;
 80245d6:	4a41      	ldr	r2, [pc, #260]	; (80246dc <_ZN5Motor5DriveEff+0x25c>)
 80245d8:	69fb      	ldr	r3, [r7, #28]
 80245da:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    int16_t count_l = static_cast<int16_t>(COUNTER_PERIOD * duty_l);
 80245dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80245e0:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80246e0 <_ZN5Motor5DriveEff+0x260>
 80245e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80245e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80245ec:	ee17 3a90 	vmov	r3, s15
 80245f0:	b21b      	sxth	r3, r3
 80245f2:	82fb      	strh	r3, [r7, #22]
    int16_t count_r = static_cast<int16_t>(COUNTER_PERIOD * duty_r);
 80245f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80245f8:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80246e0 <_ZN5Motor5DriveEff+0x260>
 80245fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8024600:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024604:	ee17 3a90 	vmov	r3, s15
 8024608:	b21b      	sxth	r3, r3
 802460a:	82bb      	strh	r3, [r7, #20]

    if(count_l < 0) { count_l *= -1; BACKWARD_L; }
 802460c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8024610:	2b00      	cmp	r3, #0
 8024612:	da0d      	bge.n	8024630 <_ZN5Motor5DriveEff+0x1b0>
 8024614:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8024618:	b29b      	uxth	r3, r3
 802461a:	425b      	negs	r3, r3
 802461c:	b29b      	uxth	r3, r3
 802461e:	b21b      	sxth	r3, r3
 8024620:	82fb      	strh	r3, [r7, #22]
 8024622:	2200      	movs	r2, #0
 8024624:	f44f 7180 	mov.w	r1, #256	; 0x100
 8024628:	482e      	ldr	r0, [pc, #184]	; (80246e4 <_ZN5Motor5DriveEff+0x264>)
 802462a:	f003 ff55 	bl	80284d8 <HAL_GPIO_WritePin>
 802462e:	e009      	b.n	8024644 <_ZN5Motor5DriveEff+0x1c4>
    else if(count_l >= 0) FORWARD_L;
 8024630:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8024634:	2b00      	cmp	r3, #0
 8024636:	db05      	blt.n	8024644 <_ZN5Motor5DriveEff+0x1c4>
 8024638:	2201      	movs	r2, #1
 802463a:	f44f 7180 	mov.w	r1, #256	; 0x100
 802463e:	4829      	ldr	r0, [pc, #164]	; (80246e4 <_ZN5Motor5DriveEff+0x264>)
 8024640:	f003 ff4a 	bl	80284d8 <HAL_GPIO_WritePin>

    if(count_r < 0) { count_r *= -1; BACKWARD_R; }
 8024644:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8024648:	2b00      	cmp	r3, #0
 802464a:	da0d      	bge.n	8024668 <_ZN5Motor5DriveEff+0x1e8>
 802464c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8024650:	b29b      	uxth	r3, r3
 8024652:	425b      	negs	r3, r3
 8024654:	b29b      	uxth	r3, r3
 8024656:	b21b      	sxth	r3, r3
 8024658:	82bb      	strh	r3, [r7, #20]
 802465a:	2201      	movs	r2, #1
 802465c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8024660:	4820      	ldr	r0, [pc, #128]	; (80246e4 <_ZN5Motor5DriveEff+0x264>)
 8024662:	f003 ff39 	bl	80284d8 <HAL_GPIO_WritePin>
 8024666:	e009      	b.n	802467c <_ZN5Motor5DriveEff+0x1fc>
    else if(count_r >= 0) FORWARD_R;
 8024668:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 802466c:	2b00      	cmp	r3, #0
 802466e:	db05      	blt.n	802467c <_ZN5Motor5DriveEff+0x1fc>
 8024670:	2200      	movs	r2, #0
 8024672:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8024676:	481b      	ldr	r0, [pc, #108]	; (80246e4 <_ZN5Motor5DriveEff+0x264>)
 8024678:	f003 ff2e 	bl	80284d8 <HAL_GPIO_WritePin>

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, count_l);
 802467c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8024680:	4b19      	ldr	r3, [pc, #100]	; (80246e8 <_ZN5Motor5DriveEff+0x268>)
 8024682:	681b      	ldr	r3, [r3, #0]
 8024684:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, count_r);
 8024686:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 802468a:	4b17      	ldr	r3, [pc, #92]	; (80246e8 <_ZN5Motor5DriveEff+0x268>)
 802468c:	681b      	ldr	r3, [r3, #0]
 802468e:	641a      	str	r2, [r3, #64]	; 0x40

#ifdef DEBUG_MODE
    g_motor_compare_l = count_l;
 8024690:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8024694:	4b15      	ldr	r3, [pc, #84]	; (80246ec <_ZN5Motor5DriveEff+0x26c>)
 8024696:	801a      	strh	r2, [r3, #0]
    g_motor_compare_r = count_r;
 8024698:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 802469c:	4b14      	ldr	r3, [pc, #80]	; (80246f0 <_ZN5Motor5DriveEff+0x270>)
 802469e:	801a      	strh	r2, [r3, #0]
#endif // DEBUG_MODE
 80246a0:	bf00      	nop
 80246a2:	3728      	adds	r7, #40	; 0x28
 80246a4:	46bd      	mov	sp, r7
 80246a6:	bd80      	pop	{r7, pc}
 80246a8:	cccccccd 	.word	0xcccccccd
 80246ac:	3feccccc 	.word	0x3feccccc
 80246b0:	cccccccd 	.word	0xcccccccd
 80246b4:	bfeccccc 	.word	0xbfeccccc
 80246b8:	20000284 	.word	0x20000284
 80246bc:	20000288 	.word	0x20000288
 80246c0:	3f666666 	.word	0x3f666666
 80246c4:	bf666666 	.word	0xbf666666
 80246c8:	2000028c 	.word	0x2000028c
 80246cc:	20000290 	.word	0x20000290
 80246d0:	20000294 	.word	0x20000294
 80246d4:	bf800000 	.word	0xbf800000
 80246d8:	20000298 	.word	0x20000298
 80246dc:	2000029c 	.word	0x2000029c
 80246e0:	44832000 	.word	0x44832000
 80246e4:	40020000 	.word	0x40020000
 80246e8:	20000914 	.word	0x20000914
 80246ec:	200002a0 	.word	0x200002a0
 80246f0:	200002a2 	.word	0x200002a2

080246f4 <_ZN12RotarySwitch5StateEv>:
#include "rotary_switch.hpp"

uint8_t RotarySwitch::State()
{
 80246f4:	b580      	push	{r7, lr}
 80246f6:	b084      	sub	sp, #16
 80246f8:	af00      	add	r7, sp, #0
 80246fa:	6078      	str	r0, [r7, #4]
    uint8_t switch_state = 0x00;
 80246fc:	2300      	movs	r3, #0
 80246fe:	73fb      	strb	r3, [r7, #15]

    if(PIN_1 == 0) switch_state |= 0x01;
 8024700:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8024704:	4821      	ldr	r0, [pc, #132]	; (802478c <_ZN12RotarySwitch5StateEv+0x98>)
 8024706:	f003 fecf 	bl	80284a8 <HAL_GPIO_ReadPin>
 802470a:	4603      	mov	r3, r0
 802470c:	2b00      	cmp	r3, #0
 802470e:	bf0c      	ite	eq
 8024710:	2301      	moveq	r3, #1
 8024712:	2300      	movne	r3, #0
 8024714:	b2db      	uxtb	r3, r3
 8024716:	2b00      	cmp	r3, #0
 8024718:	d003      	beq.n	8024722 <_ZN12RotarySwitch5StateEv+0x2e>
 802471a:	7bfb      	ldrb	r3, [r7, #15]
 802471c:	f043 0301 	orr.w	r3, r3, #1
 8024720:	73fb      	strb	r3, [r7, #15]
    if(PIN_2 == 0) switch_state |= 0x02;
 8024722:	2104      	movs	r1, #4
 8024724:	481a      	ldr	r0, [pc, #104]	; (8024790 <_ZN12RotarySwitch5StateEv+0x9c>)
 8024726:	f003 febf 	bl	80284a8 <HAL_GPIO_ReadPin>
 802472a:	4603      	mov	r3, r0
 802472c:	2b00      	cmp	r3, #0
 802472e:	bf0c      	ite	eq
 8024730:	2301      	moveq	r3, #1
 8024732:	2300      	movne	r3, #0
 8024734:	b2db      	uxtb	r3, r3
 8024736:	2b00      	cmp	r3, #0
 8024738:	d003      	beq.n	8024742 <_ZN12RotarySwitch5StateEv+0x4e>
 802473a:	7bfb      	ldrb	r3, [r7, #15]
 802473c:	f043 0302 	orr.w	r3, r3, #2
 8024740:	73fb      	strb	r3, [r7, #15]
    if(PIN_4 == 0) switch_state |= 0x04;
 8024742:	2102      	movs	r1, #2
 8024744:	4812      	ldr	r0, [pc, #72]	; (8024790 <_ZN12RotarySwitch5StateEv+0x9c>)
 8024746:	f003 feaf 	bl	80284a8 <HAL_GPIO_ReadPin>
 802474a:	4603      	mov	r3, r0
 802474c:	2b00      	cmp	r3, #0
 802474e:	bf0c      	ite	eq
 8024750:	2301      	moveq	r3, #1
 8024752:	2300      	movne	r3, #0
 8024754:	b2db      	uxtb	r3, r3
 8024756:	2b00      	cmp	r3, #0
 8024758:	d003      	beq.n	8024762 <_ZN12RotarySwitch5StateEv+0x6e>
 802475a:	7bfb      	ldrb	r3, [r7, #15]
 802475c:	f043 0304 	orr.w	r3, r3, #4
 8024760:	73fb      	strb	r3, [r7, #15]
    if(PIN_8 == 0) switch_state |= 0x08;
 8024762:	2101      	movs	r1, #1
 8024764:	480a      	ldr	r0, [pc, #40]	; (8024790 <_ZN12RotarySwitch5StateEv+0x9c>)
 8024766:	f003 fe9f 	bl	80284a8 <HAL_GPIO_ReadPin>
 802476a:	4603      	mov	r3, r0
 802476c:	2b00      	cmp	r3, #0
 802476e:	bf0c      	ite	eq
 8024770:	2301      	moveq	r3, #1
 8024772:	2300      	movne	r3, #0
 8024774:	b2db      	uxtb	r3, r3
 8024776:	2b00      	cmp	r3, #0
 8024778:	d003      	beq.n	8024782 <_ZN12RotarySwitch5StateEv+0x8e>
 802477a:	7bfb      	ldrb	r3, [r7, #15]
 802477c:	f043 0308 	orr.w	r3, r3, #8
 8024780:	73fb      	strb	r3, [r7, #15]

    return switch_state;
 8024782:	7bfb      	ldrb	r3, [r7, #15]
 8024784:	4618      	mov	r0, r3
 8024786:	3710      	adds	r7, #16
 8024788:	46bd      	mov	sp, r7
 802478a:	bd80      	pop	{r7, pc}
 802478c:	40020000 	.word	0x40020000
 8024790:	40020400 	.word	0x40020400

08024794 <_ZN3RunC1EP7EncoderP5FlashP8Iim42652P3LedP10LineSensorP9LineTraceP6LoggerP7Logger2P5MotorP12RotarySwitchP10SideSensorP15VelocityControl>:
#include "run.hpp"
#include "declare_extern.h"

Run::Run(Encoder *encoder,
 8024794:	b480      	push	{r7}
 8024796:	b085      	sub	sp, #20
 8024798:	af00      	add	r7, sp, #0
 802479a:	60f8      	str	r0, [r7, #12]
 802479c:	60b9      	str	r1, [r7, #8]
 802479e:	607a      	str	r2, [r7, #4]
 80247a0:	603b      	str	r3, [r7, #0]
           , run_mode_changed_internal_(false)
           , switch_interval_wait_timer_(0)
           , switch_interval_wait_enable_(true)
           , switch_interval_led_enable_(true)
           , mode_complete_(true)
           , store_log_failed_(true)
 80247a2:	68fb      	ldr	r3, [r7, #12]
 80247a4:	2200      	movs	r2, #0
 80247a6:	701a      	strb	r2, [r3, #0]
 80247a8:	68fb      	ldr	r3, [r7, #12]
 80247aa:	2200      	movs	r2, #0
 80247ac:	705a      	strb	r2, [r3, #1]
 80247ae:	68fb      	ldr	r3, [r7, #12]
 80247b0:	2200      	movs	r2, #0
 80247b2:	709a      	strb	r2, [r3, #2]
 80247b4:	68fb      	ldr	r3, [r7, #12]
 80247b6:	2201      	movs	r2, #1
 80247b8:	70da      	strb	r2, [r3, #3]
 80247ba:	68fb      	ldr	r3, [r7, #12]
 80247bc:	2201      	movs	r2, #1
 80247be:	711a      	strb	r2, [r3, #4]
 80247c0:	68fb      	ldr	r3, [r7, #12]
 80247c2:	2201      	movs	r2, #1
 80247c4:	715a      	strb	r2, [r3, #5]
 80247c6:	68fb      	ldr	r3, [r7, #12]
 80247c8:	2201      	movs	r2, #1
 80247ca:	719a      	strb	r2, [r3, #6]
{
    encoder_          = encoder;
 80247cc:	68fb      	ldr	r3, [r7, #12]
 80247ce:	68ba      	ldr	r2, [r7, #8]
 80247d0:	609a      	str	r2, [r3, #8]
    flash_            = flash;
 80247d2:	68fb      	ldr	r3, [r7, #12]
 80247d4:	687a      	ldr	r2, [r7, #4]
 80247d6:	60da      	str	r2, [r3, #12]
    iim_42652_        = iim_42652;
 80247d8:	68fb      	ldr	r3, [r7, #12]
 80247da:	683a      	ldr	r2, [r7, #0]
 80247dc:	611a      	str	r2, [r3, #16]
    led_              = led;
 80247de:	68fb      	ldr	r3, [r7, #12]
 80247e0:	69ba      	ldr	r2, [r7, #24]
 80247e2:	615a      	str	r2, [r3, #20]
    line_sensor_      = line_sensor;
 80247e4:	68fb      	ldr	r3, [r7, #12]
 80247e6:	69fa      	ldr	r2, [r7, #28]
 80247e8:	619a      	str	r2, [r3, #24]
    line_trace_       = line_trace;
 80247ea:	68fb      	ldr	r3, [r7, #12]
 80247ec:	6a3a      	ldr	r2, [r7, #32]
 80247ee:	61da      	str	r2, [r3, #28]
    logger_           = logger;
 80247f0:	68fb      	ldr	r3, [r7, #12]
 80247f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80247f4:	621a      	str	r2, [r3, #32]
    logger2_          = logger2;
 80247f6:	68fb      	ldr	r3, [r7, #12]
 80247f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80247fa:	625a      	str	r2, [r3, #36]	; 0x24
    motor_            = motor;
 80247fc:	68fb      	ldr	r3, [r7, #12]
 80247fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024800:	629a      	str	r2, [r3, #40]	; 0x28
    rotary_switch_    = rotary_switch;
 8024802:	68fb      	ldr	r3, [r7, #12]
 8024804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8024806:	62da      	str	r2, [r3, #44]	; 0x2c
    side_sensor_      = side_sensor;
 8024808:	68fb      	ldr	r3, [r7, #12]
 802480a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802480c:	631a      	str	r2, [r3, #48]	; 0x30
    velocity_control_ = velocity_control;
 802480e:	68fb      	ldr	r3, [r7, #12]
 8024810:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8024812:	635a      	str	r2, [r3, #52]	; 0x34
}
 8024814:	68fb      	ldr	r3, [r7, #12]
 8024816:	4618      	mov	r0, r3
 8024818:	3714      	adds	r7, #20
 802481a:	46bd      	mov	sp, r7
 802481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024820:	4770      	bx	lr
	...

08024824 <_ZN3Run4InitEv>:

void Run::Init()
{
 8024824:	b580      	push	{r7, lr}
 8024826:	b084      	sub	sp, #16
 8024828:	af00      	add	r7, sp, #0
 802482a:	6078      	str	r0, [r7, #4]
    line_sensor_->Init();
 802482c:	687b      	ldr	r3, [r7, #4]
 802482e:	699b      	ldr	r3, [r3, #24]
 8024830:	4618      	mov	r0, r3
 8024832:	f7fd f95f 	bl	8021af4 <_ZN10LineSensor4InitEv>
    encoder_->Init();
 8024836:	687b      	ldr	r3, [r7, #4]
 8024838:	689b      	ldr	r3, [r3, #8]
 802483a:	4618      	mov	r0, r3
 802483c:	f7fc fa82 	bl	8020d44 <_ZN7Encoder4InitEv>
    motor_->Init();
 8024840:	687b      	ldr	r3, [r7, #4]
 8024842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024844:	4618      	mov	r0, r3
 8024846:	f7ff fde9 	bl	802441c <_ZN5Motor4InitEv>
    uint8_t imu_init = iim_42652_->Init();
 802484a:	687b      	ldr	r3, [r7, #4]
 802484c:	691b      	ldr	r3, [r3, #16]
 802484e:	4618      	mov	r0, r3
 8024850:	f7fc fd54 	bl	80212fc <_ZN8Iim426524InitEv>
 8024854:	4603      	mov	r3, r0
 8024856:	73bb      	strb	r3, [r7, #14]

    bool flash_erase = true;
 8024858:	2301      	movs	r3, #1
 802485a:	73fb      	strb	r3, [r7, #15]
    uint8_t switch_state = rotary_switch_->State();
 802485c:	687b      	ldr	r3, [r7, #4]
 802485e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024860:	4618      	mov	r0, r3
 8024862:	f7ff ff47 	bl	80246f4 <_ZN12RotarySwitch5StateEv>
 8024866:	4603      	mov	r3, r0
 8024868:	737b      	strb	r3, [r7, #13]
    if(switch_state == 0x0E)
 802486a:	7b7b      	ldrb	r3, [r7, #13]
 802486c:	2b0e      	cmp	r3, #14
 802486e:	d113      	bne.n	8024898 <_ZN3Run4InitEv+0x74>
    {
        led_->Blink(3, 'R', 'X');
 8024870:	687b      	ldr	r3, [r7, #4]
 8024872:	6958      	ldr	r0, [r3, #20]
 8024874:	2358      	movs	r3, #88	; 0x58
 8024876:	2252      	movs	r2, #82	; 0x52
 8024878:	2103      	movs	r1, #3
 802487a:	f7fd f82f 	bl	80218dc <_ZN3Led5BlinkEhcc>
        if(!flash_->Clear()) flash_erase = false;
 802487e:	687b      	ldr	r3, [r7, #4]
 8024880:	68db      	ldr	r3, [r3, #12]
 8024882:	4618      	mov	r0, r3
 8024884:	f7fc fb60 	bl	8020f48 <_ZN5Flash5ClearEv>
 8024888:	4603      	mov	r3, r0
 802488a:	f083 0301 	eor.w	r3, r3, #1
 802488e:	b2db      	uxtb	r3, r3
 8024890:	2b00      	cmp	r3, #0
 8024892:	d001      	beq.n	8024898 <_ZN3Run4InitEv+0x74>
 8024894:	2300      	movs	r3, #0
 8024896:	73fb      	strb	r3, [r7, #15]
    }

#ifdef DEBUG_MODE
    g_imu_init = imu_init;
 8024898:	4a19      	ldr	r2, [pc, #100]	; (8024900 <_ZN3Run4InitEv+0xdc>)
 802489a:	7bbb      	ldrb	r3, [r7, #14]
 802489c:	7013      	strb	r3, [r2, #0]
    g_flash_erase = flash_erase;
 802489e:	7bfa      	ldrb	r2, [r7, #15]
 80248a0:	4b18      	ldr	r3, [pc, #96]	; (8024904 <_ZN3Run4InitEv+0xe0>)
 80248a2:	701a      	strb	r2, [r3, #0]
    g_switch_state = switch_state;
 80248a4:	4a18      	ldr	r2, [pc, #96]	; (8024908 <_ZN3Run4InitEv+0xe4>)
 80248a6:	7b7b      	ldrb	r3, [r7, #13]
 80248a8:	7013      	strb	r3, [r2, #0]
#endif // DEBUG_MODE

    if(flash_erase && imu_init == 0x09)
 80248aa:	7bfb      	ldrb	r3, [r7, #15]
 80248ac:	2b00      	cmp	r3, #0
 80248ae:	d012      	beq.n	80248d6 <_ZN3Run4InitEv+0xb2>
 80248b0:	7bbb      	ldrb	r3, [r7, #14]
 80248b2:	2b09      	cmp	r3, #9
 80248b4:	d10f      	bne.n	80248d6 <_ZN3Run4InitEv+0xb2>
    {
        led_->Rainbow(1);
 80248b6:	687b      	ldr	r3, [r7, #4]
 80248b8:	695b      	ldr	r3, [r3, #20]
 80248ba:	2101      	movs	r1, #1
 80248bc:	4618      	mov	r0, r3
 80248be:	f7fd f83a 	bl	8021936 <_ZN3Led7RainbowEh>
        HAL_TIM_Base_Start_IT(&htim2);
 80248c2:	4812      	ldr	r0, [pc, #72]	; (802490c <_ZN3Run4InitEv+0xe8>)
 80248c4:	f005 f901 	bl	8029aca <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start_IT(&htim6);
 80248c8:	4811      	ldr	r0, [pc, #68]	; (8024910 <_ZN3Run4InitEv+0xec>)
 80248ca:	f005 f8fe 	bl	8029aca <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start_IT(&htim7);
 80248ce:	4811      	ldr	r0, [pc, #68]	; (8024914 <_ZN3Run4InitEv+0xf0>)
 80248d0:	f005 f8fb 	bl	8029aca <HAL_TIM_Base_Start_IT>
    }
    else if(flash_erase) led_->ColorOrder('Y');
    else led_->ColorOrder('R');
}
 80248d4:	e00f      	b.n	80248f6 <_ZN3Run4InitEv+0xd2>
    else if(flash_erase) led_->ColorOrder('Y');
 80248d6:	7bfb      	ldrb	r3, [r7, #15]
 80248d8:	2b00      	cmp	r3, #0
 80248da:	d006      	beq.n	80248ea <_ZN3Run4InitEv+0xc6>
 80248dc:	687b      	ldr	r3, [r7, #4]
 80248de:	695b      	ldr	r3, [r3, #20]
 80248e0:	2159      	movs	r1, #89	; 0x59
 80248e2:	4618      	mov	r0, r3
 80248e4:	f7fc ff1e 	bl	8021724 <_ZN3Led10ColorOrderEc>
}
 80248e8:	e005      	b.n	80248f6 <_ZN3Run4InitEv+0xd2>
    else led_->ColorOrder('R');
 80248ea:	687b      	ldr	r3, [r7, #4]
 80248ec:	695b      	ldr	r3, [r3, #20]
 80248ee:	2152      	movs	r1, #82	; 0x52
 80248f0:	4618      	mov	r0, r3
 80248f2:	f7fc ff17 	bl	8021724 <_ZN3Led10ColorOrderEc>
}
 80248f6:	bf00      	nop
 80248f8:	3710      	adds	r7, #16
 80248fa:	46bd      	mov	sp, r7
 80248fc:	bd80      	pop	{r7, pc}
 80248fe:	bf00      	nop
 8024900:	2000026b 	.word	0x2000026b
 8024904:	200002e9 	.word	0x200002e9
 8024908:	200002e8 	.word	0x200002e8
 802490c:	20000954 	.word	0x20000954
 8024910:	200008d4 	.word	0x200008d4
 8024914:	200009d4 	.word	0x200009d4

08024918 <_ZN3Run6Timer7Ev>:

void Run::Timer7()
{
 8024918:	b580      	push	{r7, lr}
 802491a:	b082      	sub	sp, #8
 802491c:	af00      	add	r7, sp, #0
 802491e:	6078      	str	r0, [r7, #4]
    line_sensor_->StoreConsecutiveBuff();
 8024920:	687b      	ldr	r3, [r7, #4]
 8024922:	699b      	ldr	r3, [r3, #24]
 8024924:	4618      	mov	r0, r3
 8024926:	f7fd f91f 	bl	8021b68 <_ZN10LineSensor20StoreConsecutiveBuffEv>
}
 802492a:	bf00      	nop
 802492c:	3708      	adds	r7, #8
 802492e:	46bd      	mov	sp, r7
 8024930:	bd80      	pop	{r7, pc}
	...

08024934 <_ZN3Run6Timer2Ev>:

void Run::Timer2()
{
 8024934:	b580      	push	{r7, lr}
 8024936:	b084      	sub	sp, #16
 8024938:	af00      	add	r7, sp, #0
 802493a:	6078      	str	r0, [r7, #4]
    uint8_t switch_state = rotary_switch_->State();
 802493c:	687b      	ldr	r3, [r7, #4]
 802493e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024940:	4618      	mov	r0, r3
 8024942:	f7ff fed7 	bl	80246f4 <_ZN12RotarySwitch5StateEv>
 8024946:	4603      	mov	r3, r0
 8024948:	73fb      	strb	r3, [r7, #15]
    static uint8_t pre_switch_state = switch_state;
 802494a:	4b2c      	ldr	r3, [pc, #176]	; (80249fc <_ZN3Run6Timer2Ev+0xc8>)
 802494c:	781b      	ldrb	r3, [r3, #0]
 802494e:	f3bf 8f5b 	dmb	ish
 8024952:	b2db      	uxtb	r3, r3
 8024954:	f003 0301 	and.w	r3, r3, #1
 8024958:	2b00      	cmp	r3, #0
 802495a:	bf0c      	ite	eq
 802495c:	2301      	moveq	r3, #1
 802495e:	2300      	movne	r3, #0
 8024960:	b2db      	uxtb	r3, r3
 8024962:	2b00      	cmp	r3, #0
 8024964:	d010      	beq.n	8024988 <_ZN3Run6Timer2Ev+0x54>
 8024966:	4825      	ldr	r0, [pc, #148]	; (80249fc <_ZN3Run6Timer2Ev+0xc8>)
 8024968:	f006 f8a6 	bl	802aab8 <__cxa_guard_acquire>
 802496c:	4603      	mov	r3, r0
 802496e:	2b00      	cmp	r3, #0
 8024970:	bf14      	ite	ne
 8024972:	2301      	movne	r3, #1
 8024974:	2300      	moveq	r3, #0
 8024976:	b2db      	uxtb	r3, r3
 8024978:	2b00      	cmp	r3, #0
 802497a:	d005      	beq.n	8024988 <_ZN3Run6Timer2Ev+0x54>
 802497c:	4a20      	ldr	r2, [pc, #128]	; (8024a00 <_ZN3Run6Timer2Ev+0xcc>)
 802497e:	7bfb      	ldrb	r3, [r7, #15]
 8024980:	7013      	strb	r3, [r2, #0]
 8024982:	481e      	ldr	r0, [pc, #120]	; (80249fc <_ZN3Run6Timer2Ev+0xc8>)
 8024984:	f006 f8a4 	bl	802aad0 <__cxa_guard_release>
    static bool interval_enable = true;

#ifdef DEBUG_MODE
    g_switch_state = switch_state;
 8024988:	4a1e      	ldr	r2, [pc, #120]	; (8024a04 <_ZN3Run6Timer2Ev+0xd0>)
 802498a:	7bfb      	ldrb	r3, [r7, #15]
 802498c:	7013      	strb	r3, [r2, #0]
    g_interval_enable = interval_enable;
 802498e:	4b1e      	ldr	r3, [pc, #120]	; (8024a08 <_ZN3Run6Timer2Ev+0xd4>)
 8024990:	781a      	ldrb	r2, [r3, #0]
 8024992:	4b1e      	ldr	r3, [pc, #120]	; (8024a0c <_ZN3Run6Timer2Ev+0xd8>)
 8024994:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

    if(switch_state != pre_switch_state)
 8024996:	4b1a      	ldr	r3, [pc, #104]	; (8024a00 <_ZN3Run6Timer2Ev+0xcc>)
 8024998:	781b      	ldrb	r3, [r3, #0]
 802499a:	7bfa      	ldrb	r2, [r7, #15]
 802499c:	429a      	cmp	r2, r3
 802499e:	d00f      	beq.n	80249c0 <_ZN3Run6Timer2Ev+0x8c>
    {
        SetRunMode(STANDBY);
 80249a0:	2100      	movs	r1, #0
 80249a2:	6878      	ldr	r0, [r7, #4]
 80249a4:	f000 f89c 	bl	8024ae0 <_ZN3Run10SetRunModeEh>
        WhenSwitchChange();
 80249a8:	6878      	ldr	r0, [r7, #4]
 80249aa:	f000 f8c1 	bl	8024b30 <_ZN3Run16WhenSwitchChangeEv>
        led_->ResetInterrupt();
 80249ae:	687b      	ldr	r3, [r7, #4]
 80249b0:	695b      	ldr	r3, [r3, #20]
 80249b2:	4618      	mov	r0, r3
 80249b4:	f7fd f84d 	bl	8021a52 <_ZN3Led14ResetInterruptEv>
        interval_enable = true;
 80249b8:	4b13      	ldr	r3, [pc, #76]	; (8024a08 <_ZN3Run6Timer2Ev+0xd4>)
 80249ba:	2201      	movs	r2, #1
 80249bc:	701a      	strb	r2, [r3, #0]
 80249be:	e016      	b.n	80249ee <_ZN3Run6Timer2Ev+0xba>
    }
    else if(interval_enable)
 80249c0:	4b11      	ldr	r3, [pc, #68]	; (8024a08 <_ZN3Run6Timer2Ev+0xd4>)
 80249c2:	781b      	ldrb	r3, [r3, #0]
 80249c4:	2b00      	cmp	r3, #0
 80249c6:	d00d      	beq.n	80249e4 <_ZN3Run6Timer2Ev+0xb0>
    {
        SetRunMode(STANDBY);
 80249c8:	2100      	movs	r1, #0
 80249ca:	6878      	ldr	r0, [r7, #4]
 80249cc:	f000 f888 	bl	8024ae0 <_ZN3Run10SetRunModeEh>
        interval_enable = SwitchChangeInterval(switch_state);
 80249d0:	7bfb      	ldrb	r3, [r7, #15]
 80249d2:	4619      	mov	r1, r3
 80249d4:	6878      	ldr	r0, [r7, #4]
 80249d6:	f000 f8c1 	bl	8024b5c <_ZN3Run20SwitchChangeIntervalEh>
 80249da:	4603      	mov	r3, r0
 80249dc:	461a      	mov	r2, r3
 80249de:	4b0a      	ldr	r3, [pc, #40]	; (8024a08 <_ZN3Run6Timer2Ev+0xd4>)
 80249e0:	701a      	strb	r2, [r3, #0]
 80249e2:	e004      	b.n	80249ee <_ZN3Run6Timer2Ev+0xba>
    }
    else UpdateRunMode(switch_state);
 80249e4:	7bfb      	ldrb	r3, [r7, #15]
 80249e6:	4619      	mov	r1, r3
 80249e8:	6878      	ldr	r0, [r7, #4]
 80249ea:	f000 f811 	bl	8024a10 <_ZN3Run13UpdateRunModeEh>

    pre_switch_state = switch_state;
 80249ee:	4a04      	ldr	r2, [pc, #16]	; (8024a00 <_ZN3Run6Timer2Ev+0xcc>)
 80249f0:	7bfb      	ldrb	r3, [r7, #15]
 80249f2:	7013      	strb	r3, [r2, #0]
}
 80249f4:	bf00      	nop
 80249f6:	3710      	adds	r7, #16
 80249f8:	46bd      	mov	sp, r7
 80249fa:	bd80      	pop	{r7, pc}
 80249fc:	200002ec 	.word	0x200002ec
 8024a00:	200002ea 	.word	0x200002ea
 8024a04:	200002e8 	.word	0x200002e8
 8024a08:	20000011 	.word	0x20000011
 8024a0c:	20000010 	.word	0x20000010

08024a10 <_ZN3Run13UpdateRunModeEh>:

void Run::UpdateRunMode(uint8_t switch_state)
{
 8024a10:	b580      	push	{r7, lr}
 8024a12:	b082      	sub	sp, #8
 8024a14:	af00      	add	r7, sp, #0
 8024a16:	6078      	str	r0, [r7, #4]
 8024a18:	460b      	mov	r3, r1
 8024a1a:	70fb      	strb	r3, [r7, #3]
    if(run_mode_changed_internal_) return;
 8024a1c:	687b      	ldr	r3, [r7, #4]
 8024a1e:	785b      	ldrb	r3, [r3, #1]
 8024a20:	2b00      	cmp	r3, #0
 8024a22:	d158      	bne.n	8024ad6 <_ZN3Run13UpdateRunModeEh+0xc6>

    switch(switch_state)
 8024a24:	78fb      	ldrb	r3, [r7, #3]
 8024a26:	3b01      	subs	r3, #1
 8024a28:	2b0e      	cmp	r3, #14
 8024a2a:	d84e      	bhi.n	8024aca <_ZN3Run13UpdateRunModeEh+0xba>
 8024a2c:	a201      	add	r2, pc, #4	; (adr r2, 8024a34 <_ZN3Run13UpdateRunModeEh+0x24>)
 8024a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024a32:	bf00      	nop
 8024a34:	08024aa3 	.word	0x08024aa3
 8024a38:	08024aad 	.word	0x08024aad
 8024a3c:	08024acb 	.word	0x08024acb
 8024a40:	08024acb 	.word	0x08024acb
 8024a44:	08024acb 	.word	0x08024acb
 8024a48:	08024acb 	.word	0x08024acb
 8024a4c:	08024ab7 	.word	0x08024ab7
 8024a50:	08024ac1 	.word	0x08024ac1
 8024a54:	08024acb 	.word	0x08024acb
 8024a58:	08024a71 	.word	0x08024a71
 8024a5c:	08024a7b 	.word	0x08024a7b
 8024a60:	08024a85 	.word	0x08024a85
 8024a64:	08024a8f 	.word	0x08024a8f
 8024a68:	08024acb 	.word	0x08024acb
 8024a6c:	08024a99 	.word	0x08024a99
    {
#ifdef DEBUG_MODE
        case 0x0A: SetRunMode(VELOCITY_CONTROL_DEBUG); break;
 8024a70:	210b      	movs	r1, #11
 8024a72:	6878      	ldr	r0, [r7, #4]
 8024a74:	f000 f834 	bl	8024ae0 <_ZN3Run10SetRunModeEh>
 8024a78:	e02e      	b.n	8024ad8 <_ZN3Run13UpdateRunModeEh+0xc8>
        case 0x0B: SetRunMode(LINE_TRACE_DEBUG); break;
 8024a7a:	210c      	movs	r1, #12
 8024a7c:	6878      	ldr	r0, [r7, #4]
 8024a7e:	f000 f82f 	bl	8024ae0 <_ZN3Run10SetRunModeEh>
 8024a82:	e029      	b.n	8024ad8 <_ZN3Run13UpdateRunModeEh+0xc8>
#endif // DEBUG_MODE

        case 0x0C: SetRunMode(DEV_ACCEL); break;
 8024a84:	21dd      	movs	r1, #221	; 0xdd
 8024a86:	6878      	ldr	r0, [r7, #4]
 8024a88:	f000 f82a 	bl	8024ae0 <_ZN3Run10SetRunModeEh>
 8024a8c:	e024      	b.n	8024ad8 <_ZN3Run13UpdateRunModeEh+0xc8>
        case 0x0D: SetRunMode(DEV); break;
 8024a8e:	210d      	movs	r1, #13
 8024a90:	6878      	ldr	r0, [r7, #4]
 8024a92:	f000 f825 	bl	8024ae0 <_ZN3Run10SetRunModeEh>
 8024a96:	e01f      	b.n	8024ad8 <_ZN3Run13UpdateRunModeEh+0xc8>
        case 0x0F: SetRunMode(READY); break;
 8024a98:	210f      	movs	r1, #15
 8024a9a:	6878      	ldr	r0, [r7, #4]
 8024a9c:	f000 f820 	bl	8024ae0 <_ZN3Run10SetRunModeEh>
 8024aa0:	e01a      	b.n	8024ad8 <_ZN3Run13UpdateRunModeEh+0xc8>
        case 0x01: SetRunMode(FIRST_RUN); break;
 8024aa2:	2101      	movs	r1, #1
 8024aa4:	6878      	ldr	r0, [r7, #4]
 8024aa6:	f000 f81b 	bl	8024ae0 <_ZN3Run10SetRunModeEh>
 8024aaa:	e015      	b.n	8024ad8 <_ZN3Run13UpdateRunModeEh+0xc8>
        case 0x02: SetRunMode(SECOND_RUN); break;
 8024aac:	2102      	movs	r1, #2
 8024aae:	6878      	ldr	r0, [r7, #4]
 8024ab0:	f000 f816 	bl	8024ae0 <_ZN3Run10SetRunModeEh>
 8024ab4:	e010      	b.n	8024ad8 <_ZN3Run13UpdateRunModeEh+0xc8>
        case 0x07: SetRunMode(VELOCITY_CONTROL); break;
 8024ab6:	2107      	movs	r1, #7
 8024ab8:	6878      	ldr	r0, [r7, #4]
 8024aba:	f000 f811 	bl	8024ae0 <_ZN3Run10SetRunModeEh>
 8024abe:	e00b      	b.n	8024ad8 <_ZN3Run13UpdateRunModeEh+0xc8>
        case 0x08: SetRunMode(LINE_TRACE); break;
 8024ac0:	2108      	movs	r1, #8
 8024ac2:	6878      	ldr	r0, [r7, #4]
 8024ac4:	f000 f80c 	bl	8024ae0 <_ZN3Run10SetRunModeEh>
 8024ac8:	e006      	b.n	8024ad8 <_ZN3Run13UpdateRunModeEh+0xc8>
        default:   SetRunMode(STANDBY); break;
 8024aca:	2100      	movs	r1, #0
 8024acc:	6878      	ldr	r0, [r7, #4]
 8024ace:	f000 f807 	bl	8024ae0 <_ZN3Run10SetRunModeEh>
 8024ad2:	bf00      	nop
 8024ad4:	e000      	b.n	8024ad8 <_ZN3Run13UpdateRunModeEh+0xc8>
    if(run_mode_changed_internal_) return;
 8024ad6:	bf00      	nop
    }
}
 8024ad8:	3708      	adds	r7, #8
 8024ada:	46bd      	mov	sp, r7
 8024adc:	bd80      	pop	{r7, pc}
 8024ade:	bf00      	nop

08024ae0 <_ZN3Run10SetRunModeEh>:

void Run::SetRunMode(uint8_t mode)
{
 8024ae0:	b480      	push	{r7}
 8024ae2:	b083      	sub	sp, #12
 8024ae4:	af00      	add	r7, sp, #0
 8024ae6:	6078      	str	r0, [r7, #4]
 8024ae8:	460b      	mov	r3, r1
 8024aea:	70fb      	strb	r3, [r7, #3]
    run_mode_ = mode;
 8024aec:	687b      	ldr	r3, [r7, #4]
 8024aee:	78fa      	ldrb	r2, [r7, #3]
 8024af0:	701a      	strb	r2, [r3, #0]
}
 8024af2:	bf00      	nop
 8024af4:	370c      	adds	r7, #12
 8024af6:	46bd      	mov	sp, r7
 8024af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024afc:	4770      	bx	lr
	...

08024b00 <_ZN3Run25SetRunModeChangedInternalEb>:

void Run::SetRunModeChangedInternal(bool boolean)
{
 8024b00:	b480      	push	{r7}
 8024b02:	b083      	sub	sp, #12
 8024b04:	af00      	add	r7, sp, #0
 8024b06:	6078      	str	r0, [r7, #4]
 8024b08:	460b      	mov	r3, r1
 8024b0a:	70fb      	strb	r3, [r7, #3]
    run_mode_changed_internal_ = boolean;
 8024b0c:	687b      	ldr	r3, [r7, #4]
 8024b0e:	78fa      	ldrb	r2, [r7, #3]
 8024b10:	705a      	strb	r2, [r3, #1]

#ifdef DEBUG_MODE
    g_run_mode_changed_internal_cnt++;
 8024b12:	4b06      	ldr	r3, [pc, #24]	; (8024b2c <_ZN3Run25SetRunModeChangedInternalEb+0x2c>)
 8024b14:	781b      	ldrb	r3, [r3, #0]
 8024b16:	3301      	adds	r3, #1
 8024b18:	b2da      	uxtb	r2, r3
 8024b1a:	4b04      	ldr	r3, [pc, #16]	; (8024b2c <_ZN3Run25SetRunModeChangedInternalEb+0x2c>)
 8024b1c:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE
}
 8024b1e:	bf00      	nop
 8024b20:	370c      	adds	r7, #12
 8024b22:	46bd      	mov	sp, r7
 8024b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024b28:	4770      	bx	lr
 8024b2a:	bf00      	nop
 8024b2c:	200000d3 	.word	0x200000d3

08024b30 <_ZN3Run16WhenSwitchChangeEv>:

void Run::WhenSwitchChange()
{
 8024b30:	b580      	push	{r7, lr}
 8024b32:	b082      	sub	sp, #8
 8024b34:	af00      	add	r7, sp, #0
 8024b36:	6078      	str	r0, [r7, #4]
    SetRunModeChangedInternal(false);
 8024b38:	2100      	movs	r1, #0
 8024b3a:	6878      	ldr	r0, [r7, #4]
 8024b3c:	f7ff ffe0 	bl	8024b00 <_ZN3Run25SetRunModeChangedInternalEb>
    switch_interval_led_enable_ = true;
 8024b40:	687b      	ldr	r3, [r7, #4]
 8024b42:	2201      	movs	r2, #1
 8024b44:	711a      	strb	r2, [r3, #4]
    switch_interval_wait_enable_ = true;
 8024b46:	687b      	ldr	r3, [r7, #4]
 8024b48:	2201      	movs	r2, #1
 8024b4a:	70da      	strb	r2, [r3, #3]
    switch_interval_wait_timer_ = 0;
 8024b4c:	687b      	ldr	r3, [r7, #4]
 8024b4e:	2200      	movs	r2, #0
 8024b50:	709a      	strb	r2, [r3, #2]
}
 8024b52:	bf00      	nop
 8024b54:	3708      	adds	r7, #8
 8024b56:	46bd      	mov	sp, r7
 8024b58:	bd80      	pop	{r7, pc}
	...

08024b5c <_ZN3Run20SwitchChangeIntervalEh>:

bool Run::SwitchChangeInterval(uint8_t switch_state)
{
 8024b5c:	b580      	push	{r7, lr}
 8024b5e:	b084      	sub	sp, #16
 8024b60:	af00      	add	r7, sp, #0
 8024b62:	6078      	str	r0, [r7, #4]
 8024b64:	460b      	mov	r3, r1
 8024b66:	70fb      	strb	r3, [r7, #3]
    uint8_t wait_timer = switch_interval_wait_timer_;
 8024b68:	687b      	ldr	r3, [r7, #4]
 8024b6a:	789b      	ldrb	r3, [r3, #2]
 8024b6c:	73fb      	strb	r3, [r7, #15]
    bool wait_enable = switch_interval_wait_enable_;
 8024b6e:	687b      	ldr	r3, [r7, #4]
 8024b70:	78db      	ldrb	r3, [r3, #3]
 8024b72:	73bb      	strb	r3, [r7, #14]
    bool led_enable = switch_interval_led_enable_;
 8024b74:	687b      	ldr	r3, [r7, #4]
 8024b76:	791b      	ldrb	r3, [r3, #4]
 8024b78:	737b      	strb	r3, [r7, #13]
    bool interval_continue = true;
 8024b7a:	2301      	movs	r3, #1
 8024b7c:	733b      	strb	r3, [r7, #12]

    if(led_enable)
 8024b7e:	7b7b      	ldrb	r3, [r7, #13]
 8024b80:	2b00      	cmp	r3, #0
 8024b82:	f000 808a 	beq.w	8024c9a <_ZN3Run20SwitchChangeIntervalEh+0x13e>
    {
        switch(switch_state)
 8024b86:	78fb      	ldrb	r3, [r7, #3]
 8024b88:	3b01      	subs	r3, #1
 8024b8a:	2b0e      	cmp	r3, #14
 8024b8c:	d87a      	bhi.n	8024c84 <_ZN3Run20SwitchChangeIntervalEh+0x128>
 8024b8e:	a201      	add	r2, pc, #4	; (adr r2, 8024b94 <_ZN3Run20SwitchChangeIntervalEh+0x38>)
 8024b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8024b94:	08024c35 	.word	0x08024c35
 8024b98:	08024c49 	.word	0x08024c49
 8024b9c:	08024c85 	.word	0x08024c85
 8024ba0:	08024c85 	.word	0x08024c85
 8024ba4:	08024c85 	.word	0x08024c85
 8024ba8:	08024c85 	.word	0x08024c85
 8024bac:	08024c5d 	.word	0x08024c5d
 8024bb0:	08024c71 	.word	0x08024c71
 8024bb4:	08024c85 	.word	0x08024c85
 8024bb8:	08024bd1 	.word	0x08024bd1
 8024bbc:	08024be5 	.word	0x08024be5
 8024bc0:	08024bf9 	.word	0x08024bf9
 8024bc4:	08024c0d 	.word	0x08024c0d
 8024bc8:	08024c85 	.word	0x08024c85
 8024bcc:	08024c21 	.word	0x08024c21
        {
#ifdef DEBUG_MODE
            case 0x0A: led_enable = led_->BlinkInterrupt(3, 'G', 'B'); break;
 8024bd0:	687b      	ldr	r3, [r7, #4]
 8024bd2:	6958      	ldr	r0, [r3, #20]
 8024bd4:	2342      	movs	r3, #66	; 0x42
 8024bd6:	2247      	movs	r2, #71	; 0x47
 8024bd8:	2103      	movs	r1, #3
 8024bda:	f7fc fef0 	bl	80219be <_ZN3Led14BlinkInterruptEhcc>
 8024bde:	4603      	mov	r3, r0
 8024be0:	737b      	strb	r3, [r7, #13]
 8024be2:	e06b      	b.n	8024cbc <_ZN3Run20SwitchChangeIntervalEh+0x160>
            case 0x0B: led_enable = led_->BlinkInterrupt(3, 'G', 'Y'); break;
 8024be4:	687b      	ldr	r3, [r7, #4]
 8024be6:	6958      	ldr	r0, [r3, #20]
 8024be8:	2359      	movs	r3, #89	; 0x59
 8024bea:	2247      	movs	r2, #71	; 0x47
 8024bec:	2103      	movs	r1, #3
 8024bee:	f7fc fee6 	bl	80219be <_ZN3Led14BlinkInterruptEhcc>
 8024bf2:	4603      	mov	r3, r0
 8024bf4:	737b      	strb	r3, [r7, #13]
 8024bf6:	e061      	b.n	8024cbc <_ZN3Run20SwitchChangeIntervalEh+0x160>
#endif // DEBUG_MODE

            case 0x0C: led_enable = led_->BlinkInterrupt(3, 'B', 'M'); break;
 8024bf8:	687b      	ldr	r3, [r7, #4]
 8024bfa:	6958      	ldr	r0, [r3, #20]
 8024bfc:	234d      	movs	r3, #77	; 0x4d
 8024bfe:	2242      	movs	r2, #66	; 0x42
 8024c00:	2103      	movs	r1, #3
 8024c02:	f7fc fedc 	bl	80219be <_ZN3Led14BlinkInterruptEhcc>
 8024c06:	4603      	mov	r3, r0
 8024c08:	737b      	strb	r3, [r7, #13]
 8024c0a:	e057      	b.n	8024cbc <_ZN3Run20SwitchChangeIntervalEh+0x160>
            case 0x0D: led_enable = led_->BlinkInterrupt(3, 'G', 'X'); break;
 8024c0c:	687b      	ldr	r3, [r7, #4]
 8024c0e:	6958      	ldr	r0, [r3, #20]
 8024c10:	2358      	movs	r3, #88	; 0x58
 8024c12:	2247      	movs	r2, #71	; 0x47
 8024c14:	2103      	movs	r1, #3
 8024c16:	f7fc fed2 	bl	80219be <_ZN3Led14BlinkInterruptEhcc>
 8024c1a:	4603      	mov	r3, r0
 8024c1c:	737b      	strb	r3, [r7, #13]
 8024c1e:	e04d      	b.n	8024cbc <_ZN3Run20SwitchChangeIntervalEh+0x160>
            case 0x0F: led_enable = led_->BlinkInterrupt(3, 'Y', 'X'); break;
 8024c20:	687b      	ldr	r3, [r7, #4]
 8024c22:	6958      	ldr	r0, [r3, #20]
 8024c24:	2358      	movs	r3, #88	; 0x58
 8024c26:	2259      	movs	r2, #89	; 0x59
 8024c28:	2103      	movs	r1, #3
 8024c2a:	f7fc fec8 	bl	80219be <_ZN3Led14BlinkInterruptEhcc>
 8024c2e:	4603      	mov	r3, r0
 8024c30:	737b      	strb	r3, [r7, #13]
 8024c32:	e043      	b.n	8024cbc <_ZN3Run20SwitchChangeIntervalEh+0x160>
            case 0x01: led_enable = led_->BlinkInterrupt(3, 'B', 'X'); break;
 8024c34:	687b      	ldr	r3, [r7, #4]
 8024c36:	6958      	ldr	r0, [r3, #20]
 8024c38:	2358      	movs	r3, #88	; 0x58
 8024c3a:	2242      	movs	r2, #66	; 0x42
 8024c3c:	2103      	movs	r1, #3
 8024c3e:	f7fc febe 	bl	80219be <_ZN3Led14BlinkInterruptEhcc>
 8024c42:	4603      	mov	r3, r0
 8024c44:	737b      	strb	r3, [r7, #13]
 8024c46:	e039      	b.n	8024cbc <_ZN3Run20SwitchChangeIntervalEh+0x160>
            case 0x02: led_enable = led_->BlinkInterrupt(3, 'M', 'X'); break;
 8024c48:	687b      	ldr	r3, [r7, #4]
 8024c4a:	6958      	ldr	r0, [r3, #20]
 8024c4c:	2358      	movs	r3, #88	; 0x58
 8024c4e:	224d      	movs	r2, #77	; 0x4d
 8024c50:	2103      	movs	r1, #3
 8024c52:	f7fc feb4 	bl	80219be <_ZN3Led14BlinkInterruptEhcc>
 8024c56:	4603      	mov	r3, r0
 8024c58:	737b      	strb	r3, [r7, #13]
 8024c5a:	e02f      	b.n	8024cbc <_ZN3Run20SwitchChangeIntervalEh+0x160>
            case 0x07: led_enable = led_->BlinkInterrupt(3, 'G', 'B'); break;
 8024c5c:	687b      	ldr	r3, [r7, #4]
 8024c5e:	6958      	ldr	r0, [r3, #20]
 8024c60:	2342      	movs	r3, #66	; 0x42
 8024c62:	2247      	movs	r2, #71	; 0x47
 8024c64:	2103      	movs	r1, #3
 8024c66:	f7fc feaa 	bl	80219be <_ZN3Led14BlinkInterruptEhcc>
 8024c6a:	4603      	mov	r3, r0
 8024c6c:	737b      	strb	r3, [r7, #13]
 8024c6e:	e025      	b.n	8024cbc <_ZN3Run20SwitchChangeIntervalEh+0x160>
            case 0x08: led_enable = led_->BlinkInterrupt(3, 'G', 'Y'); break;
 8024c70:	687b      	ldr	r3, [r7, #4]
 8024c72:	6958      	ldr	r0, [r3, #20]
 8024c74:	2359      	movs	r3, #89	; 0x59
 8024c76:	2247      	movs	r2, #71	; 0x47
 8024c78:	2103      	movs	r1, #3
 8024c7a:	f7fc fea0 	bl	80219be <_ZN3Led14BlinkInterruptEhcc>
 8024c7e:	4603      	mov	r3, r0
 8024c80:	737b      	strb	r3, [r7, #13]
 8024c82:	e01b      	b.n	8024cbc <_ZN3Run20SwitchChangeIntervalEh+0x160>
            default:   led_enable = led_->BlinkInterrupt(3, 'X', 'W'); break;
 8024c84:	687b      	ldr	r3, [r7, #4]
 8024c86:	6958      	ldr	r0, [r3, #20]
 8024c88:	2357      	movs	r3, #87	; 0x57
 8024c8a:	2258      	movs	r2, #88	; 0x58
 8024c8c:	2103      	movs	r1, #3
 8024c8e:	f7fc fe96 	bl	80219be <_ZN3Led14BlinkInterruptEhcc>
 8024c92:	4603      	mov	r3, r0
 8024c94:	737b      	strb	r3, [r7, #13]
 8024c96:	bf00      	nop
 8024c98:	e010      	b.n	8024cbc <_ZN3Run20SwitchChangeIntervalEh+0x160>
        }
    }
    else if(wait_enable)
 8024c9a:	7bbb      	ldrb	r3, [r7, #14]
 8024c9c:	2b00      	cmp	r3, #0
 8024c9e:	d00b      	beq.n	8024cb8 <_ZN3Run20SwitchChangeIntervalEh+0x15c>
    {
        if(wait_timer < SWITCH_INTERVAL_WAIT_TIME)
 8024ca0:	7bfb      	ldrb	r3, [r7, #15]
 8024ca2:	2bc7      	cmp	r3, #199	; 0xc7
 8024ca4:	d805      	bhi.n	8024cb2 <_ZN3Run20SwitchChangeIntervalEh+0x156>
        {
            wait_timer++;
 8024ca6:	7bfb      	ldrb	r3, [r7, #15]
 8024ca8:	3301      	adds	r3, #1
 8024caa:	73fb      	strb	r3, [r7, #15]
            wait_enable = true;
 8024cac:	2301      	movs	r3, #1
 8024cae:	73bb      	strb	r3, [r7, #14]
 8024cb0:	e004      	b.n	8024cbc <_ZN3Run20SwitchChangeIntervalEh+0x160>
        }
        else wait_enable = false;
 8024cb2:	2300      	movs	r3, #0
 8024cb4:	73bb      	strb	r3, [r7, #14]
 8024cb6:	e001      	b.n	8024cbc <_ZN3Run20SwitchChangeIntervalEh+0x160>
    }
    else interval_continue = false;
 8024cb8:	2300      	movs	r3, #0
 8024cba:	733b      	strb	r3, [r7, #12]
    
    switch_interval_led_enable_ = led_enable;
 8024cbc:	687b      	ldr	r3, [r7, #4]
 8024cbe:	7b7a      	ldrb	r2, [r7, #13]
 8024cc0:	711a      	strb	r2, [r3, #4]
    switch_interval_wait_enable_ = wait_enable;
 8024cc2:	687b      	ldr	r3, [r7, #4]
 8024cc4:	7bba      	ldrb	r2, [r7, #14]
 8024cc6:	70da      	strb	r2, [r3, #3]
    switch_interval_wait_timer_ = wait_timer;
 8024cc8:	687b      	ldr	r3, [r7, #4]
 8024cca:	7bfa      	ldrb	r2, [r7, #15]
 8024ccc:	709a      	strb	r2, [r3, #2]

    return interval_continue;
 8024cce:	7b3b      	ldrb	r3, [r7, #12]
}
 8024cd0:	4618      	mov	r0, r3
 8024cd2:	3710      	adds	r7, #16
 8024cd4:	46bd      	mov	sp, r7
 8024cd6:	bd80      	pop	{r7, pc}

08024cd8 <_ZN3Run13EmergencyStopEv>:

bool Run::EmergencyStop()
{
 8024cd8:	b580      	push	{r7, lr}
 8024cda:	b084      	sub	sp, #16
 8024cdc:	af00      	add	r7, sp, #0
 8024cde:	6078      	str	r0, [r7, #4]
    static uint8_t emergency_timer = 0;
    bool line_emergency = line_sensor_->GetEmergencyStopFlag();
 8024ce0:	687b      	ldr	r3, [r7, #4]
 8024ce2:	699b      	ldr	r3, [r3, #24]
 8024ce4:	4618      	mov	r0, r3
 8024ce6:	f7fd f985 	bl	8021ff4 <_ZN10LineSensor20GetEmergencyStopFlagEv>
 8024cea:	4603      	mov	r3, r0
 8024cec:	73fb      	strb	r3, [r7, #15]

    if(emergency_timer >= EMERGENCY_STOP_TIME)
 8024cee:	4b0e      	ldr	r3, [pc, #56]	; (8024d28 <_ZN3Run13EmergencyStopEv+0x50>)
 8024cf0:	781b      	ldrb	r3, [r3, #0]
 8024cf2:	2b04      	cmp	r3, #4
 8024cf4:	d905      	bls.n	8024d02 <_ZN3Run13EmergencyStopEv+0x2a>
    {
        SetRunMode(EMERGENCY);
 8024cf6:	210e      	movs	r1, #14
 8024cf8:	6878      	ldr	r0, [r7, #4]
 8024cfa:	f7ff fef1 	bl	8024ae0 <_ZN3Run10SetRunModeEh>
        return true;
 8024cfe:	2301      	movs	r3, #1
 8024d00:	e00d      	b.n	8024d1e <_ZN3Run13EmergencyStopEv+0x46>
    }
    else if(line_emergency) emergency_timer++;
 8024d02:	7bfb      	ldrb	r3, [r7, #15]
 8024d04:	2b00      	cmp	r3, #0
 8024d06:	d006      	beq.n	8024d16 <_ZN3Run13EmergencyStopEv+0x3e>
 8024d08:	4b07      	ldr	r3, [pc, #28]	; (8024d28 <_ZN3Run13EmergencyStopEv+0x50>)
 8024d0a:	781b      	ldrb	r3, [r3, #0]
 8024d0c:	3301      	adds	r3, #1
 8024d0e:	b2da      	uxtb	r2, r3
 8024d10:	4b05      	ldr	r3, [pc, #20]	; (8024d28 <_ZN3Run13EmergencyStopEv+0x50>)
 8024d12:	701a      	strb	r2, [r3, #0]
 8024d14:	e002      	b.n	8024d1c <_ZN3Run13EmergencyStopEv+0x44>
    else emergency_timer = 0;
 8024d16:	4b04      	ldr	r3, [pc, #16]	; (8024d28 <_ZN3Run13EmergencyStopEv+0x50>)
 8024d18:	2200      	movs	r2, #0
 8024d1a:	701a      	strb	r2, [r3, #0]

    return false;
 8024d1c:	2300      	movs	r3, #0
}
 8024d1e:	4618      	mov	r0, r3
 8024d20:	3710      	adds	r7, #16
 8024d22:	46bd      	mov	sp, r7
 8024d24:	bd80      	pop	{r7, pc}
 8024d26:	bf00      	nop
 8024d28:	200002f0 	.word	0x200002f0

08024d2c <_ZN3Run7RunModeEv>:

void Run::RunMode()
{
 8024d2c:	b580      	push	{r7, lr}
 8024d2e:	b082      	sub	sp, #8
 8024d30:	af00      	add	r7, sp, #0
 8024d32:	6078      	str	r0, [r7, #4]
    switch(run_mode_)
 8024d34:	687b      	ldr	r3, [r7, #4]
 8024d36:	781b      	ldrb	r3, [r3, #0]
 8024d38:	2b0c      	cmp	r3, #12
 8024d3a:	d025      	beq.n	8024d88 <_ZN3Run7RunModeEv+0x5c>
 8024d3c:	2b0c      	cmp	r3, #12
 8024d3e:	dc0f      	bgt.n	8024d60 <_ZN3Run7RunModeEv+0x34>
 8024d40:	2b02      	cmp	r3, #2
 8024d42:	d045      	beq.n	8024dd0 <_ZN3Run7RunModeEv+0xa4>
 8024d44:	2b02      	cmp	r3, #2
 8024d46:	dc04      	bgt.n	8024d52 <_ZN3Run7RunModeEv+0x26>
 8024d48:	2b00      	cmp	r3, #0
 8024d4a:	d029      	beq.n	8024da0 <_ZN3Run7RunModeEv+0x74>
 8024d4c:	2b01      	cmp	r3, #1
 8024d4e:	d037      	beq.n	8024dc0 <_ZN3Run7RunModeEv+0x94>
 8024d50:	e04e      	b.n	8024df0 <_ZN3Run7RunModeEv+0xc4>
 8024d52:	2b08      	cmp	r3, #8
 8024d54:	d048      	beq.n	8024de8 <_ZN3Run7RunModeEv+0xbc>
 8024d56:	2b0b      	cmp	r3, #11
 8024d58:	d012      	beq.n	8024d80 <_ZN3Run7RunModeEv+0x54>
 8024d5a:	2b07      	cmp	r3, #7
 8024d5c:	d040      	beq.n	8024de0 <_ZN3Run7RunModeEv+0xb4>
 8024d5e:	e047      	b.n	8024df0 <_ZN3Run7RunModeEv+0xc4>
 8024d60:	2b10      	cmp	r3, #16
 8024d62:	d031      	beq.n	8024dc8 <_ZN3Run7RunModeEv+0x9c>
 8024d64:	2b10      	cmp	r3, #16
 8024d66:	dc04      	bgt.n	8024d72 <_ZN3Run7RunModeEv+0x46>
 8024d68:	2b0e      	cmp	r3, #14
 8024d6a:	d011      	beq.n	8024d90 <_ZN3Run7RunModeEv+0x64>
 8024d6c:	2b0e      	cmp	r3, #14
 8024d6e:	dc13      	bgt.n	8024d98 <_ZN3Run7RunModeEv+0x6c>
 8024d70:	e01a      	b.n	8024da8 <_ZN3Run7RunModeEv+0x7c>
 8024d72:	2bd0      	cmp	r3, #208	; 0xd0
 8024d74:	d020      	beq.n	8024db8 <_ZN3Run7RunModeEv+0x8c>
 8024d76:	2bdd      	cmp	r3, #221	; 0xdd
 8024d78:	d01a      	beq.n	8024db0 <_ZN3Run7RunModeEv+0x84>
 8024d7a:	2b20      	cmp	r3, #32
 8024d7c:	d02c      	beq.n	8024dd8 <_ZN3Run7RunModeEv+0xac>
 8024d7e:	e037      	b.n	8024df0 <_ZN3Run7RunModeEv+0xc4>
    {
#ifdef DEBUG_MODE
        case VELOCITY_CONTROL_DEBUG: ModeVelocityControlDebug(); break;
 8024d80:	6878      	ldr	r0, [r7, #4]
 8024d82:	f000 fba3 	bl	80254cc <_ZN3Run24ModeVelocityControlDebugEv>
 8024d86:	e037      	b.n	8024df8 <_ZN3Run7RunModeEv+0xcc>
        case LINE_TRACE_DEBUG: ModeLineTraceDebug(); break;
 8024d88:	6878      	ldr	r0, [r7, #4]
 8024d8a:	f000 fbc9 	bl	8025520 <_ZN3Run18ModeLineTraceDebugEv>
 8024d8e:	e033      	b.n	8024df8 <_ZN3Run7RunModeEv+0xcc>
#endif // DEBUG_MODE

        case EMERGENCY: ModeEmergency(); break;
 8024d90:	6878      	ldr	r0, [r7, #4]
 8024d92:	f000 f839 	bl	8024e08 <_ZN3Run13ModeEmergencyEv>
 8024d96:	e02f      	b.n	8024df8 <_ZN3Run7RunModeEv+0xcc>
        case READY: ModeReady(); break;
 8024d98:	6878      	ldr	r0, [r7, #4]
 8024d9a:	f000 f85f 	bl	8024e5c <_ZN3Run9ModeReadyEv>
 8024d9e:	e02b      	b.n	8024df8 <_ZN3Run7RunModeEv+0xcc>
        case STANDBY: ModeStandby(); break;
 8024da0:	6878      	ldr	r0, [r7, #4]
 8024da2:	f000 f87d 	bl	8024ea0 <_ZN3Run11ModeStandbyEv>
 8024da6:	e027      	b.n	8024df8 <_ZN3Run7RunModeEv+0xcc>
        case DEV: ModeDevelopment(); break;
 8024da8:	6878      	ldr	r0, [r7, #4]
 8024daa:	f000 f88d 	bl	8024ec8 <_ZN3Run15ModeDevelopmentEv>
 8024dae:	e023      	b.n	8024df8 <_ZN3Run7RunModeEv+0xcc>
        case DEV_ACCEL: ModeDevAccel(); break;
 8024db0:	6878      	ldr	r0, [r7, #4]
 8024db2:	f000 f8d5 	bl	8024f60 <_ZN3Run12ModeDevAccelEv>
 8024db6:	e01f      	b.n	8024df8 <_ZN3Run7RunModeEv+0xcc>
        case DEV_GOAL: ModeDevGoal(); break;
 8024db8:	6878      	ldr	r0, [r7, #4]
 8024dba:	f000 f9eb 	bl	8025194 <_ZN3Run11ModeDevGoalEv>
 8024dbe:	e01b      	b.n	8024df8 <_ZN3Run7RunModeEv+0xcc>
        case FIRST_RUN: ModeFirstRun(); break;
 8024dc0:	6878      	ldr	r0, [r7, #4]
 8024dc2:	f000 fa01 	bl	80251c8 <_ZN3Run12ModeFirstRunEv>
 8024dc6:	e017      	b.n	8024df8 <_ZN3Run7RunModeEv+0xcc>
        case FIRST_GOAL: ModeFirstGoal(); break;
 8024dc8:	6878      	ldr	r0, [r7, #4]
 8024dca:	f000 fa6f 	bl	80252ac <_ZN3Run13ModeFirstGoalEv>
 8024dce:	e013      	b.n	8024df8 <_ZN3Run7RunModeEv+0xcc>
        case SECOND_RUN: ModeSecondRun(); break;
 8024dd0:	6878      	ldr	r0, [r7, #4]
 8024dd2:	f000 fa8f 	bl	80252f4 <_ZN3Run13ModeSecondRunEv>
 8024dd6:	e00f      	b.n	8024df8 <_ZN3Run7RunModeEv+0xcc>
        case SECOND_GOAL: ModeSecondGoal(); break;
 8024dd8:	6878      	ldr	r0, [r7, #4]
 8024dda:	f000 fadf 	bl	802539c <_ZN3Run14ModeSecondGoalEv>
 8024dde:	e00b      	b.n	8024df8 <_ZN3Run7RunModeEv+0xcc>
        case VELOCITY_CONTROL: ModeVelocityControl(); break;
 8024de0:	6878      	ldr	r0, [r7, #4]
 8024de2:	f000 faf5 	bl	80253d0 <_ZN3Run19ModeVelocityControlEv>
 8024de6:	e007      	b.n	8024df8 <_ZN3Run7RunModeEv+0xcc>
        case LINE_TRACE: ModeLineTrace(); break;
 8024de8:	6878      	ldr	r0, [r7, #4]
 8024dea:	f000 fb38 	bl	802545e <_ZN3Run13ModeLineTraceEv>
 8024dee:	e003      	b.n	8024df8 <_ZN3Run7RunModeEv+0xcc>
        default: ModeStandby(); break;
 8024df0:	6878      	ldr	r0, [r7, #4]
 8024df2:	f000 f855 	bl	8024ea0 <_ZN3Run11ModeStandbyEv>
 8024df6:	bf00      	nop
    }

    mode_complete_ = true;
 8024df8:	687b      	ldr	r3, [r7, #4]
 8024dfa:	2201      	movs	r2, #1
 8024dfc:	715a      	strb	r2, [r3, #5]
}
 8024dfe:	bf00      	nop
 8024e00:	3708      	adds	r7, #8
 8024e02:	46bd      	mov	sp, r7
 8024e04:	bd80      	pop	{r7, pc}
	...

08024e08 <_ZN3Run13ModeEmergencyEv>:

void Run::ModeEmergency()
{
 8024e08:	b580      	push	{r7, lr}
 8024e0a:	b084      	sub	sp, #16
 8024e0c:	af00      	add	r7, sp, #0
 8024e0e:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 8024e10:	687b      	ldr	r3, [r7, #4]
 8024e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024e14:	eddf 0a10 	vldr	s1, [pc, #64]	; 8024e58 <_ZN3Run13ModeEmergencyEv+0x50>
 8024e18:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8024e58 <_ZN3Run13ModeEmergencyEv+0x50>
 8024e1c:	4618      	mov	r0, r3
 8024e1e:	f7ff fb2f 	bl	8024480 <_ZN5Motor5DriveEff>

    bool result = logger2_->GetSuccessEmergencyCodeStore();
 8024e22:	687b      	ldr	r3, [r7, #4]
 8024e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024e26:	4618      	mov	r0, r3
 8024e28:	f7fe fb9c 	bl	8023564 <_ZN7Logger228GetSuccessEmergencyCodeStoreEv>
 8024e2c:	4603      	mov	r3, r0
 8024e2e:	73fb      	strb	r3, [r7, #15]
    if(result) led_->ColorOrder('R');
 8024e30:	7bfb      	ldrb	r3, [r7, #15]
 8024e32:	2b00      	cmp	r3, #0
 8024e34:	d006      	beq.n	8024e44 <_ZN3Run13ModeEmergencyEv+0x3c>
 8024e36:	687b      	ldr	r3, [r7, #4]
 8024e38:	695b      	ldr	r3, [r3, #20]
 8024e3a:	2152      	movs	r1, #82	; 0x52
 8024e3c:	4618      	mov	r0, r3
 8024e3e:	f7fc fc71 	bl	8021724 <_ZN3Led10ColorOrderEc>
    else led_->ColorOrder('G');
}
 8024e42:	e005      	b.n	8024e50 <_ZN3Run13ModeEmergencyEv+0x48>
    else led_->ColorOrder('G');
 8024e44:	687b      	ldr	r3, [r7, #4]
 8024e46:	695b      	ldr	r3, [r3, #20]
 8024e48:	2147      	movs	r1, #71	; 0x47
 8024e4a:	4618      	mov	r0, r3
 8024e4c:	f7fc fc6a 	bl	8021724 <_ZN3Led10ColorOrderEc>
}
 8024e50:	bf00      	nop
 8024e52:	3710      	adds	r7, #16
 8024e54:	46bd      	mov	sp, r7
 8024e56:	bd80      	pop	{r7, pc}
 8024e58:	00000000 	.word	0x00000000

08024e5c <_ZN3Run9ModeReadyEv>:

void Run::ModeReady()
{
 8024e5c:	b580      	push	{r7, lr}
 8024e5e:	b082      	sub	sp, #8
 8024e60:	af00      	add	r7, sp, #0
 8024e62:	6078      	str	r0, [r7, #4]
    line_sensor_->Update();
 8024e64:	687b      	ldr	r3, [r7, #4]
 8024e66:	699b      	ldr	r3, [r3, #24]
 8024e68:	4618      	mov	r0, r3
 8024e6a:	f7fc ff85 	bl	8021d78 <_ZN10LineSensor6UpdateEv>
    if(line_sensor_->CheckCalibration()) led_->ColorOrder('X');
 8024e6e:	687b      	ldr	r3, [r7, #4]
 8024e70:	699b      	ldr	r3, [r3, #24]
 8024e72:	4618      	mov	r0, r3
 8024e74:	f7fd f8cc 	bl	8022010 <_ZN10LineSensor16CheckCalibrationEv>
 8024e78:	4603      	mov	r3, r0
 8024e7a:	2b00      	cmp	r3, #0
 8024e7c:	d006      	beq.n	8024e8c <_ZN3Run9ModeReadyEv+0x30>
 8024e7e:	687b      	ldr	r3, [r7, #4]
 8024e80:	695b      	ldr	r3, [r3, #20]
 8024e82:	2158      	movs	r1, #88	; 0x58
 8024e84:	4618      	mov	r0, r3
 8024e86:	f7fc fc4d 	bl	8021724 <_ZN3Led10ColorOrderEc>
    else led_->ColorOrder('R');
}
 8024e8a:	e005      	b.n	8024e98 <_ZN3Run9ModeReadyEv+0x3c>
    else led_->ColorOrder('R');
 8024e8c:	687b      	ldr	r3, [r7, #4]
 8024e8e:	695b      	ldr	r3, [r3, #20]
 8024e90:	2152      	movs	r1, #82	; 0x52
 8024e92:	4618      	mov	r0, r3
 8024e94:	f7fc fc46 	bl	8021724 <_ZN3Led10ColorOrderEc>
}
 8024e98:	bf00      	nop
 8024e9a:	3708      	adds	r7, #8
 8024e9c:	46bd      	mov	sp, r7
 8024e9e:	bd80      	pop	{r7, pc}

08024ea0 <_ZN3Run11ModeStandbyEv>:

void Run::ModeStandby()
{
 8024ea0:	b580      	push	{r7, lr}
 8024ea2:	b082      	sub	sp, #8
 8024ea4:	af00      	add	r7, sp, #0
 8024ea6:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 8024ea8:	687b      	ldr	r3, [r7, #4]
 8024eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024eac:	eddf 0a05 	vldr	s1, [pc, #20]	; 8024ec4 <_ZN3Run11ModeStandbyEv+0x24>
 8024eb0:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8024ec4 <_ZN3Run11ModeStandbyEv+0x24>
 8024eb4:	4618      	mov	r0, r3
 8024eb6:	f7ff fae3 	bl	8024480 <_ZN5Motor5DriveEff>
}
 8024eba:	bf00      	nop
 8024ebc:	3708      	adds	r7, #8
 8024ebe:	46bd      	mov	sp, r7
 8024ec0:	bd80      	pop	{r7, pc}
 8024ec2:	bf00      	nop
 8024ec4:	00000000 	.word	0x00000000

08024ec8 <_ZN3Run15ModeDevelopmentEv>:
    motor_->Drive(trans_ratio, rotat_ratio);
}
*/

void Run::ModeDevelopment()
{
 8024ec8:	b580      	push	{r7, lr}
 8024eca:	b086      	sub	sp, #24
 8024ecc:	af00      	add	r7, sp, #0
 8024ece:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    encoder_->Update();
 8024ed0:	687b      	ldr	r3, [r7, #4]
 8024ed2:	689b      	ldr	r3, [r3, #8]
 8024ed4:	4618      	mov	r0, r3
 8024ed6:	f7fb ff67 	bl	8020da8 <_ZN7Encoder6UpdateEv>
    line_sensor_->Update();
 8024eda:	687b      	ldr	r3, [r7, #4]
 8024edc:	699b      	ldr	r3, [r3, #24]
 8024ede:	4618      	mov	r0, r3
 8024ee0:	f7fc ff4a 	bl	8021d78 <_ZN10LineSensor6UpdateEv>
    side_sensor_->Update();
 8024ee4:	687b      	ldr	r3, [r7, #4]
 8024ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024ee8:	4618      	mov	r0, r3
 8024eea:	f000 fc91 	bl	8025810 <_ZN10SideSensor6UpdateEv>
    logger2_->Logging();
 8024eee:	687b      	ldr	r3, [r7, #4]
 8024ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024ef2:	4618      	mov	r0, r3
 8024ef4:	f7fe f8aa 	bl	802304c <_ZN7Logger27LoggingEv>
    /* Emergency stop */
    if(DevEmergencyStop()) return;
 8024ef8:	6878      	ldr	r0, [r7, #4]
 8024efa:	f000 f87d 	bl	8024ff8 <_ZN3Run16DevEmergencyStopEv>
 8024efe:	4603      	mov	r3, r0
 8024f00:	2b00      	cmp	r3, #0
 8024f02:	d129      	bne.n	8024f58 <_ZN3Run15ModeDevelopmentEv+0x90>
    /* Motor control */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 8024f04:	687b      	ldr	r3, [r7, #4]
 8024f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024f08:	4618      	mov	r0, r3
 8024f0a:	f000 fe50 	bl	8025bae <_ZN10SideSensor18GetGoalMarkerCountEv>
 8024f0e:	4603      	mov	r3, r0
 8024f10:	75fb      	strb	r3, [r7, #23]
    float target_velocity = DevTargetVelocity(goal_count);
 8024f12:	7dfb      	ldrb	r3, [r7, #23]
 8024f14:	4619      	mov	r1, r3
 8024f16:	6878      	ldr	r0, [r7, #4]
 8024f18:	f000 f8b0 	bl	802507c <_ZN3Run17DevTargetVelocityEh>
 8024f1c:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 8024f20:	687b      	ldr	r3, [r7, #4]
 8024f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024f24:	ed97 0a04 	vldr	s0, [r7, #16]
 8024f28:	4618      	mov	r0, r3
 8024f2a:	f001 fb08 	bl	802653e <_ZN15VelocityControl16DeterminePidGainEf>
 8024f2e:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 8024f32:	687b      	ldr	r3, [r7, #4]
 8024f34:	69db      	ldr	r3, [r3, #28]
 8024f36:	ed97 0a04 	vldr	s0, [r7, #16]
 8024f3a:	4618      	mov	r0, r3
 8024f3c:	f7fd f8f6 	bl	802212c <_ZN9LineTrace16DeterminePidGainEf>
 8024f40:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 8024f44:	687b      	ldr	r3, [r7, #4]
 8024f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024f48:	edd7 0a02 	vldr	s1, [r7, #8]
 8024f4c:	ed97 0a03 	vldr	s0, [r7, #12]
 8024f50:	4618      	mov	r0, r3
 8024f52:	f7ff fa95 	bl	8024480 <_ZN5Motor5DriveEff>
 8024f56:	e000      	b.n	8024f5a <_ZN3Run15ModeDevelopmentEv+0x92>
    if(DevEmergencyStop()) return;
 8024f58:	bf00      	nop
}
 8024f5a:	3718      	adds	r7, #24
 8024f5c:	46bd      	mov	sp, r7
 8024f5e:	bd80      	pop	{r7, pc}

08024f60 <_ZN3Run12ModeDevAccelEv>:

void Run::ModeDevAccel()
{
 8024f60:	b580      	push	{r7, lr}
 8024f62:	b086      	sub	sp, #24
 8024f64:	af00      	add	r7, sp, #0
 8024f66:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    encoder_->Update();
 8024f68:	687b      	ldr	r3, [r7, #4]
 8024f6a:	689b      	ldr	r3, [r3, #8]
 8024f6c:	4618      	mov	r0, r3
 8024f6e:	f7fb ff1b 	bl	8020da8 <_ZN7Encoder6UpdateEv>
    line_sensor_->Update();
 8024f72:	687b      	ldr	r3, [r7, #4]
 8024f74:	699b      	ldr	r3, [r3, #24]
 8024f76:	4618      	mov	r0, r3
 8024f78:	f7fc fefe 	bl	8021d78 <_ZN10LineSensor6UpdateEv>
    side_sensor_->Update();
 8024f7c:	687b      	ldr	r3, [r7, #4]
 8024f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024f80:	4618      	mov	r0, r3
 8024f82:	f000 fc45 	bl	8025810 <_ZN10SideSensor6UpdateEv>
    logger2_->Loading();
 8024f86:	687b      	ldr	r3, [r7, #4]
 8024f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024f8a:	4618      	mov	r0, r3
 8024f8c:	f7fe fbac 	bl	80236e8 <_ZN7Logger27LoadingEv>
    /* Motor control */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 8024f90:	687b      	ldr	r3, [r7, #4]
 8024f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024f94:	4618      	mov	r0, r3
 8024f96:	f000 fe0a 	bl	8025bae <_ZN10SideSensor18GetGoalMarkerCountEv>
 8024f9a:	4603      	mov	r3, r0
 8024f9c:	75fb      	strb	r3, [r7, #23]
    float target_velocity = DevAccelTarget(goal_count);
 8024f9e:	7dfb      	ldrb	r3, [r7, #23]
 8024fa0:	4619      	mov	r1, r3
 8024fa2:	6878      	ldr	r0, [r7, #4]
 8024fa4:	f000 f8ae 	bl	8025104 <_ZN3Run14DevAccelTargetEh>
 8024fa8:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 8024fac:	687b      	ldr	r3, [r7, #4]
 8024fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8024fb0:	ed97 0a04 	vldr	s0, [r7, #16]
 8024fb4:	4618      	mov	r0, r3
 8024fb6:	f001 fac2 	bl	802653e <_ZN15VelocityControl16DeterminePidGainEf>
 8024fba:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 8024fbe:	687b      	ldr	r3, [r7, #4]
 8024fc0:	69db      	ldr	r3, [r3, #28]
 8024fc2:	ed97 0a04 	vldr	s0, [r7, #16]
 8024fc6:	4618      	mov	r0, r3
 8024fc8:	f7fd f8b0 	bl	802212c <_ZN9LineTrace16DeterminePidGainEf>
 8024fcc:	ed87 0a02 	vstr	s0, [r7, #8]
    /* Emergency stop */
    if(DevEmergencyStop()) return;
 8024fd0:	6878      	ldr	r0, [r7, #4]
 8024fd2:	f000 f811 	bl	8024ff8 <_ZN3Run16DevEmergencyStopEv>
 8024fd6:	4603      	mov	r3, r0
 8024fd8:	2b00      	cmp	r3, #0
 8024fda:	d109      	bne.n	8024ff0 <_ZN3Run12ModeDevAccelEv+0x90>
    motor_->Drive(trans_ratio, rotat_ratio);
 8024fdc:	687b      	ldr	r3, [r7, #4]
 8024fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024fe0:	edd7 0a02 	vldr	s1, [r7, #8]
 8024fe4:	ed97 0a03 	vldr	s0, [r7, #12]
 8024fe8:	4618      	mov	r0, r3
 8024fea:	f7ff fa49 	bl	8024480 <_ZN5Motor5DriveEff>
 8024fee:	e000      	b.n	8024ff2 <_ZN3Run12ModeDevAccelEv+0x92>
    if(DevEmergencyStop()) return;
 8024ff0:	bf00      	nop
}
 8024ff2:	3718      	adds	r7, #24
 8024ff4:	46bd      	mov	sp, r7
 8024ff6:	bd80      	pop	{r7, pc}

08024ff8 <_ZN3Run16DevEmergencyStopEv>:

bool Run::DevEmergencyStop()
{
 8024ff8:	b580      	push	{r7, lr}
 8024ffa:	b084      	sub	sp, #16
 8024ffc:	af00      	add	r7, sp, #0
 8024ffe:	6078      	str	r0, [r7, #4]
    static uint8_t emergency_timer = 0;
    bool line_emergency = line_sensor_->GetEmergencyStopFlag();
 8025000:	687b      	ldr	r3, [r7, #4]
 8025002:	699b      	ldr	r3, [r3, #24]
 8025004:	4618      	mov	r0, r3
 8025006:	f7fc fff5 	bl	8021ff4 <_ZN10LineSensor20GetEmergencyStopFlagEv>
 802500a:	4603      	mov	r3, r0
 802500c:	73fb      	strb	r3, [r7, #15]
    bool logging_emergency = logger2_->GetEmergencyStopFlag();
 802500e:	687b      	ldr	r3, [r7, #4]
 8025010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025012:	4618      	mov	r0, r3
 8025014:	f7fe fa8b 	bl	802352e <_ZN7Logger220GetEmergencyStopFlagEv>
 8025018:	4603      	mov	r3, r0
 802501a:	73bb      	strb	r3, [r7, #14]

    if(logging_emergency)
 802501c:	7bbb      	ldrb	r3, [r7, #14]
 802501e:	2b00      	cmp	r3, #0
 8025020:	d009      	beq.n	8025036 <_ZN3Run16DevEmergencyStopEv+0x3e>
    {
        SetRunMode(EMERGENCY);
 8025022:	210e      	movs	r1, #14
 8025024:	6878      	ldr	r0, [r7, #4]
 8025026:	f7ff fd5b 	bl	8024ae0 <_ZN3Run10SetRunModeEh>
        SetRunModeChangedInternal(true);
 802502a:	2101      	movs	r1, #1
 802502c:	6878      	ldr	r0, [r7, #4]
 802502e:	f7ff fd67 	bl	8024b00 <_ZN3Run25SetRunModeChangedInternalEb>
        return true;
 8025032:	2301      	movs	r3, #1
 8025034:	e01b      	b.n	802506e <_ZN3Run16DevEmergencyStopEv+0x76>
    }

    if(line_emergency)
 8025036:	7bfb      	ldrb	r3, [r7, #15]
 8025038:	2b00      	cmp	r3, #0
 802503a:	d014      	beq.n	8025066 <_ZN3Run16DevEmergencyStopEv+0x6e>
    {
        if(emergency_timer >= EMERGENCY_STOP_TIME)
 802503c:	4b0e      	ldr	r3, [pc, #56]	; (8025078 <_ZN3Run16DevEmergencyStopEv+0x80>)
 802503e:	781b      	ldrb	r3, [r3, #0]
 8025040:	2b04      	cmp	r3, #4
 8025042:	d909      	bls.n	8025058 <_ZN3Run16DevEmergencyStopEv+0x60>
        {
            SetRunMode(EMERGENCY);
 8025044:	210e      	movs	r1, #14
 8025046:	6878      	ldr	r0, [r7, #4]
 8025048:	f7ff fd4a 	bl	8024ae0 <_ZN3Run10SetRunModeEh>
            SetRunModeChangedInternal(true);
 802504c:	2101      	movs	r1, #1
 802504e:	6878      	ldr	r0, [r7, #4]
 8025050:	f7ff fd56 	bl	8024b00 <_ZN3Run25SetRunModeChangedInternalEb>
            return true;
 8025054:	2301      	movs	r3, #1
 8025056:	e00a      	b.n	802506e <_ZN3Run16DevEmergencyStopEv+0x76>
        }
        else emergency_timer++;
 8025058:	4b07      	ldr	r3, [pc, #28]	; (8025078 <_ZN3Run16DevEmergencyStopEv+0x80>)
 802505a:	781b      	ldrb	r3, [r3, #0]
 802505c:	3301      	adds	r3, #1
 802505e:	b2da      	uxtb	r2, r3
 8025060:	4b05      	ldr	r3, [pc, #20]	; (8025078 <_ZN3Run16DevEmergencyStopEv+0x80>)
 8025062:	701a      	strb	r2, [r3, #0]
 8025064:	e002      	b.n	802506c <_ZN3Run16DevEmergencyStopEv+0x74>
    }
    else emergency_timer = 0;
 8025066:	4b04      	ldr	r3, [pc, #16]	; (8025078 <_ZN3Run16DevEmergencyStopEv+0x80>)
 8025068:	2200      	movs	r2, #0
 802506a:	701a      	strb	r2, [r3, #0]

    return false;
 802506c:	2300      	movs	r3, #0
}
 802506e:	4618      	mov	r0, r3
 8025070:	3710      	adds	r7, #16
 8025072:	46bd      	mov	sp, r7
 8025074:	bd80      	pop	{r7, pc}
 8025076:	bf00      	nop
 8025078:	200002f1 	.word	0x200002f1

0802507c <_ZN3Run17DevTargetVelocityEh>:

float Run::DevTargetVelocity(uint8_t goal_count)
{
 802507c:	b580      	push	{r7, lr}
 802507e:	b084      	sub	sp, #16
 8025080:	af00      	add	r7, sp, #0
 8025082:	6078      	str	r0, [r7, #4]
 8025084:	460b      	mov	r3, r1
 8025086:	70fb      	strb	r3, [r7, #3]
    static uint16_t slow_timer = 0;
    static uint16_t stop_timer = 0;
    float target_velocity;

    switch(goal_count)
 8025088:	78fb      	ldrb	r3, [r7, #3]
 802508a:	3300      	adds	r3, #0
 802508c:	2b01      	cmp	r3, #1
 802508e:	d803      	bhi.n	8025098 <_ZN3Run17DevTargetVelocityEh+0x1c>
    {
        case 0:
        case 1: target_velocity = EXPLORE_VELOCITY; break;
 8025090:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8025094:	60fb      	str	r3, [r7, #12]
 8025096:	e029      	b.n	80250ec <_ZN3Run17DevTargetVelocityEh+0x70>
        default:

            if(slow_timer < SLOW_DRIVE_TIME)
 8025098:	4b18      	ldr	r3, [pc, #96]	; (80250fc <_ZN3Run17DevTargetVelocityEh+0x80>)
 802509a:	881b      	ldrh	r3, [r3, #0]
 802509c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80250a0:	d209      	bcs.n	80250b6 <_ZN3Run17DevTargetVelocityEh+0x3a>
            {
                slow_timer++;
 80250a2:	4b16      	ldr	r3, [pc, #88]	; (80250fc <_ZN3Run17DevTargetVelocityEh+0x80>)
 80250a4:	881b      	ldrh	r3, [r3, #0]
 80250a6:	3301      	adds	r3, #1
 80250a8:	b29a      	uxth	r2, r3
 80250aa:	4b14      	ldr	r3, [pc, #80]	; (80250fc <_ZN3Run17DevTargetVelocityEh+0x80>)
 80250ac:	801a      	strh	r2, [r3, #0]
                target_velocity = SLOW_DRIVE_VELOCITY;
 80250ae:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80250b2:	60fb      	str	r3, [r7, #12]
                    SetRunMode(DEV_GOAL);
                    SetRunModeChangedInternal(true);
                    target_velocity = 0;
                }
            }
            break;
 80250b4:	e019      	b.n	80250ea <_ZN3Run17DevTargetVelocityEh+0x6e>
                if(stop_timer < STOP_TIME)
 80250b6:	4b12      	ldr	r3, [pc, #72]	; (8025100 <_ZN3Run17DevTargetVelocityEh+0x84>)
 80250b8:	881b      	ldrh	r3, [r3, #0]
 80250ba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80250be:	d209      	bcs.n	80250d4 <_ZN3Run17DevTargetVelocityEh+0x58>
                    stop_timer++;
 80250c0:	4b0f      	ldr	r3, [pc, #60]	; (8025100 <_ZN3Run17DevTargetVelocityEh+0x84>)
 80250c2:	881b      	ldrh	r3, [r3, #0]
 80250c4:	3301      	adds	r3, #1
 80250c6:	b29a      	uxth	r2, r3
 80250c8:	4b0d      	ldr	r3, [pc, #52]	; (8025100 <_ZN3Run17DevTargetVelocityEh+0x84>)
 80250ca:	801a      	strh	r2, [r3, #0]
                    target_velocity = 0;
 80250cc:	f04f 0300 	mov.w	r3, #0
 80250d0:	60fb      	str	r3, [r7, #12]
            break;
 80250d2:	e00a      	b.n	80250ea <_ZN3Run17DevTargetVelocityEh+0x6e>
                    SetRunMode(DEV_GOAL);
 80250d4:	21d0      	movs	r1, #208	; 0xd0
 80250d6:	6878      	ldr	r0, [r7, #4]
 80250d8:	f7ff fd02 	bl	8024ae0 <_ZN3Run10SetRunModeEh>
                    SetRunModeChangedInternal(true);
 80250dc:	2101      	movs	r1, #1
 80250de:	6878      	ldr	r0, [r7, #4]
 80250e0:	f7ff fd0e 	bl	8024b00 <_ZN3Run25SetRunModeChangedInternalEb>
                    target_velocity = 0;
 80250e4:	f04f 0300 	mov.w	r3, #0
 80250e8:	60fb      	str	r3, [r7, #12]
            break;
 80250ea:	bf00      	nop
    }

    return target_velocity;
 80250ec:	68fb      	ldr	r3, [r7, #12]
 80250ee:	ee07 3a90 	vmov	s15, r3
}
 80250f2:	eeb0 0a67 	vmov.f32	s0, s15
 80250f6:	3710      	adds	r7, #16
 80250f8:	46bd      	mov	sp, r7
 80250fa:	bd80      	pop	{r7, pc}
 80250fc:	200002f2 	.word	0x200002f2
 8025100:	200002f4 	.word	0x200002f4

08025104 <_ZN3Run14DevAccelTargetEh>:

float Run::DevAccelTarget(uint8_t goal_count)
{
 8025104:	b580      	push	{r7, lr}
 8025106:	b084      	sub	sp, #16
 8025108:	af00      	add	r7, sp, #0
 802510a:	6078      	str	r0, [r7, #4]
 802510c:	460b      	mov	r3, r1
 802510e:	70fb      	strb	r3, [r7, #3]
    static uint16_t slow_timer = 0;
    static uint16_t stop_timer = 0;
    float target_velocity;

    switch(goal_count)
 8025110:	78fb      	ldrb	r3, [r7, #3]
 8025112:	3300      	adds	r3, #0
 8025114:	2b01      	cmp	r3, #1
 8025116:	d807      	bhi.n	8025128 <_ZN3Run14DevAccelTargetEh+0x24>
    {
        case 0:
        case 1:
            target_velocity = logger2_->GetTargetVelocity();
 8025118:	687b      	ldr	r3, [r7, #4]
 802511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802511c:	4618      	mov	r0, r3
 802511e:	f7fe fb07 	bl	8023730 <_ZN7Logger217GetTargetVelocityEv>
 8025122:	ed87 0a03 	vstr	s0, [r7, #12]
            break;
 8025126:	e029      	b.n	802517c <_ZN3Run14DevAccelTargetEh+0x78>
        default:

            if(slow_timer < SLOW_DRIVE_TIME)
 8025128:	4b18      	ldr	r3, [pc, #96]	; (802518c <_ZN3Run14DevAccelTargetEh+0x88>)
 802512a:	881b      	ldrh	r3, [r3, #0]
 802512c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8025130:	d209      	bcs.n	8025146 <_ZN3Run14DevAccelTargetEh+0x42>
            {
                slow_timer++;
 8025132:	4b16      	ldr	r3, [pc, #88]	; (802518c <_ZN3Run14DevAccelTargetEh+0x88>)
 8025134:	881b      	ldrh	r3, [r3, #0]
 8025136:	3301      	adds	r3, #1
 8025138:	b29a      	uxth	r2, r3
 802513a:	4b14      	ldr	r3, [pc, #80]	; (802518c <_ZN3Run14DevAccelTargetEh+0x88>)
 802513c:	801a      	strh	r2, [r3, #0]
                target_velocity = SLOW_DRIVE_VELOCITY;
 802513e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8025142:	60fb      	str	r3, [r7, #12]
                    SetRunMode(DEV_GOAL);
                    SetRunModeChangedInternal(true);
                    target_velocity = 0;
                }
            }
            break;
 8025144:	e019      	b.n	802517a <_ZN3Run14DevAccelTargetEh+0x76>
                if(stop_timer < STOP_TIME)
 8025146:	4b12      	ldr	r3, [pc, #72]	; (8025190 <_ZN3Run14DevAccelTargetEh+0x8c>)
 8025148:	881b      	ldrh	r3, [r3, #0]
 802514a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 802514e:	d209      	bcs.n	8025164 <_ZN3Run14DevAccelTargetEh+0x60>
                    stop_timer++;
 8025150:	4b0f      	ldr	r3, [pc, #60]	; (8025190 <_ZN3Run14DevAccelTargetEh+0x8c>)
 8025152:	881b      	ldrh	r3, [r3, #0]
 8025154:	3301      	adds	r3, #1
 8025156:	b29a      	uxth	r2, r3
 8025158:	4b0d      	ldr	r3, [pc, #52]	; (8025190 <_ZN3Run14DevAccelTargetEh+0x8c>)
 802515a:	801a      	strh	r2, [r3, #0]
                    target_velocity = 0;
 802515c:	f04f 0300 	mov.w	r3, #0
 8025160:	60fb      	str	r3, [r7, #12]
            break;
 8025162:	e00a      	b.n	802517a <_ZN3Run14DevAccelTargetEh+0x76>
                    SetRunMode(DEV_GOAL);
 8025164:	21d0      	movs	r1, #208	; 0xd0
 8025166:	6878      	ldr	r0, [r7, #4]
 8025168:	f7ff fcba 	bl	8024ae0 <_ZN3Run10SetRunModeEh>
                    SetRunModeChangedInternal(true);
 802516c:	2101      	movs	r1, #1
 802516e:	6878      	ldr	r0, [r7, #4]
 8025170:	f7ff fcc6 	bl	8024b00 <_ZN3Run25SetRunModeChangedInternalEb>
                    target_velocity = 0;
 8025174:	f04f 0300 	mov.w	r3, #0
 8025178:	60fb      	str	r3, [r7, #12]
            break;
 802517a:	bf00      	nop
    }

    return target_velocity;
 802517c:	68fb      	ldr	r3, [r7, #12]
 802517e:	ee07 3a90 	vmov	s15, r3
}
 8025182:	eeb0 0a67 	vmov.f32	s0, s15
 8025186:	3710      	adds	r7, #16
 8025188:	46bd      	mov	sp, r7
 802518a:	bd80      	pop	{r7, pc}
 802518c:	200002f6 	.word	0x200002f6
 8025190:	200002f8 	.word	0x200002f8

08025194 <_ZN3Run11ModeDevGoalEv>:

void Run::ModeDevGoal()
{
 8025194:	b580      	push	{r7, lr}
 8025196:	b082      	sub	sp, #8
 8025198:	af00      	add	r7, sp, #0
 802519a:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 802519c:	687b      	ldr	r3, [r7, #4]
 802519e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80251a0:	eddf 0a08 	vldr	s1, [pc, #32]	; 80251c4 <_ZN3Run11ModeDevGoalEv+0x30>
 80251a4:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80251c4 <_ZN3Run11ModeDevGoalEv+0x30>
 80251a8:	4618      	mov	r0, r3
 80251aa:	f7ff f969 	bl	8024480 <_ZN5Motor5DriveEff>
    led_->ColorOrder('M');
 80251ae:	687b      	ldr	r3, [r7, #4]
 80251b0:	695b      	ldr	r3, [r3, #20]
 80251b2:	214d      	movs	r1, #77	; 0x4d
 80251b4:	4618      	mov	r0, r3
 80251b6:	f7fc fab5 	bl	8021724 <_ZN3Led10ColorOrderEc>
}
 80251ba:	bf00      	nop
 80251bc:	3708      	adds	r7, #8
 80251be:	46bd      	mov	sp, r7
 80251c0:	bd80      	pop	{r7, pc}
 80251c2:	bf00      	nop
 80251c4:	00000000 	.word	0x00000000

080251c8 <_ZN3Run12ModeFirstRunEv>:

void Run::ModeFirstRun()
{
 80251c8:	b580      	push	{r7, lr}
 80251ca:	b086      	sub	sp, #24
 80251cc:	af00      	add	r7, sp, #0
 80251ce:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 80251d0:	687b      	ldr	r3, [r7, #4]
 80251d2:	699b      	ldr	r3, [r3, #24]
 80251d4:	4618      	mov	r0, r3
 80251d6:	f7fc fdcf 	bl	8021d78 <_ZN10LineSensor6UpdateEv>
    encoder_->Update();
 80251da:	687b      	ldr	r3, [r7, #4]
 80251dc:	689b      	ldr	r3, [r3, #8]
 80251de:	4618      	mov	r0, r3
 80251e0:	f7fb fde2 	bl	8020da8 <_ZN7Encoder6UpdateEv>
    iim_42652_->Update();
 80251e4:	687b      	ldr	r3, [r7, #4]
 80251e6:	691b      	ldr	r3, [r3, #16]
 80251e8:	4618      	mov	r0, r3
 80251ea:	f7fc fa11 	bl	8021610 <_ZN8Iim426526UpdateEv>
    side_sensor_->Update();
 80251ee:	687b      	ldr	r3, [r7, #4]
 80251f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80251f2:	4618      	mov	r0, r3
 80251f4:	f000 fb0c 	bl	8025810 <_ZN10SideSensor6UpdateEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 80251f8:	6878      	ldr	r0, [r7, #4]
 80251fa:	f7ff fd6d 	bl	8024cd8 <_ZN3Run13EmergencyStopEv>
 80251fe:	4603      	mov	r3, r0
 8025200:	2b00      	cmp	r3, #0
 8025202:	d14e      	bne.n	80252a2 <_ZN3Run12ModeFirstRunEv+0xda>
    /* Logging */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 8025204:	687b      	ldr	r3, [r7, #4]
 8025206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025208:	4618      	mov	r0, r3
 802520a:	f000 fcd0 	bl	8025bae <_ZN10SideSensor18GetGoalMarkerCountEv>
 802520e:	4603      	mov	r3, r0
 8025210:	75fb      	strb	r3, [r7, #23]
    if(goal_count == 1) logger_->Logging(mode_complete_);
 8025212:	7dfb      	ldrb	r3, [r7, #23]
 8025214:	2b01      	cmp	r3, #1
 8025216:	d107      	bne.n	8025228 <_ZN3Run12ModeFirstRunEv+0x60>
 8025218:	687b      	ldr	r3, [r7, #4]
 802521a:	6a1a      	ldr	r2, [r3, #32]
 802521c:	687b      	ldr	r3, [r7, #4]
 802521e:	795b      	ldrb	r3, [r3, #5]
 8025220:	4619      	mov	r1, r3
 8025222:	4610      	mov	r0, r2
 8025224:	f7fd f8c4 	bl	80223b0 <_ZN6Logger7LoggingEh>
    mode_complete_ = false;
 8025228:	687b      	ldr	r3, [r7, #4]
 802522a:	2200      	movs	r2, #0
 802522c:	715a      	strb	r2, [r3, #5]
    uint8_t period_success = logger_->StorePeriodicLog();
 802522e:	687b      	ldr	r3, [r7, #4]
 8025230:	6a1b      	ldr	r3, [r3, #32]
 8025232:	4618      	mov	r0, r3
 8025234:	f7fd fad2 	bl	80227dc <_ZN6Logger16StorePeriodicLogEv>
 8025238:	4603      	mov	r3, r0
 802523a:	75bb      	strb	r3, [r7, #22]
    uint8_t accel_success = logger_->StoreAccelPositionLog();
 802523c:	687b      	ldr	r3, [r7, #4]
 802523e:	6a1b      	ldr	r3, [r3, #32]
 8025240:	4618      	mov	r0, r3
 8025242:	f7fd fb69 	bl	8022918 <_ZN6Logger21StoreAccelPositionLogEv>
 8025246:	4603      	mov	r3, r0
 8025248:	757b      	strb	r3, [r7, #21]
    if(period_success != 0 || !accel_success != 0) store_log_failed_ = true;
 802524a:	7dbb      	ldrb	r3, [r7, #22]
 802524c:	2b00      	cmp	r3, #0
 802524e:	d102      	bne.n	8025256 <_ZN3Run12ModeFirstRunEv+0x8e>
 8025250:	7d7b      	ldrb	r3, [r7, #21]
 8025252:	2b00      	cmp	r3, #0
 8025254:	d102      	bne.n	802525c <_ZN3Run12ModeFirstRunEv+0x94>
 8025256:	687b      	ldr	r3, [r7, #4]
 8025258:	2201      	movs	r2, #1
 802525a:	719a      	strb	r2, [r3, #6]
    /* Motor control */
    float target_velocity = FirstTargetVelocity(goal_count);
 802525c:	7dfb      	ldrb	r3, [r7, #23]
 802525e:	4619      	mov	r1, r3
 8025260:	6878      	ldr	r0, [r7, #4]
 8025262:	f000 f97d 	bl	8025560 <_ZN3Run19FirstTargetVelocityEh>
 8025266:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 802526a:	687b      	ldr	r3, [r7, #4]
 802526c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802526e:	ed97 0a04 	vldr	s0, [r7, #16]
 8025272:	4618      	mov	r0, r3
 8025274:	f001 f963 	bl	802653e <_ZN15VelocityControl16DeterminePidGainEf>
 8025278:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 802527c:	687b      	ldr	r3, [r7, #4]
 802527e:	69db      	ldr	r3, [r3, #28]
 8025280:	ed97 0a04 	vldr	s0, [r7, #16]
 8025284:	4618      	mov	r0, r3
 8025286:	f7fc ff51 	bl	802212c <_ZN9LineTrace16DeterminePidGainEf>
 802528a:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 802528e:	687b      	ldr	r3, [r7, #4]
 8025290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025292:	edd7 0a02 	vldr	s1, [r7, #8]
 8025296:	ed97 0a03 	vldr	s0, [r7, #12]
 802529a:	4618      	mov	r0, r3
 802529c:	f7ff f8f0 	bl	8024480 <_ZN5Motor5DriveEff>
 80252a0:	e000      	b.n	80252a4 <_ZN3Run12ModeFirstRunEv+0xdc>
    if(EmergencyStop()) return;
 80252a2:	bf00      	nop
}
 80252a4:	3718      	adds	r7, #24
 80252a6:	46bd      	mov	sp, r7
 80252a8:	bd80      	pop	{r7, pc}
	...

080252ac <_ZN3Run13ModeFirstGoalEv>:

void Run::ModeFirstGoal()
{
 80252ac:	b580      	push	{r7, lr}
 80252ae:	b082      	sub	sp, #8
 80252b0:	af00      	add	r7, sp, #0
 80252b2:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 80252b4:	687b      	ldr	r3, [r7, #4]
 80252b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80252b8:	eddf 0a0d 	vldr	s1, [pc, #52]	; 80252f0 <_ZN3Run13ModeFirstGoalEv+0x44>
 80252bc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80252f0 <_ZN3Run13ModeFirstGoalEv+0x44>
 80252c0:	4618      	mov	r0, r3
 80252c2:	f7ff f8dd 	bl	8024480 <_ZN5Motor5DriveEff>
    if(store_log_failed_) led_->ColorOrder('R');
 80252c6:	687b      	ldr	r3, [r7, #4]
 80252c8:	799b      	ldrb	r3, [r3, #6]
 80252ca:	2b00      	cmp	r3, #0
 80252cc:	d006      	beq.n	80252dc <_ZN3Run13ModeFirstGoalEv+0x30>
 80252ce:	687b      	ldr	r3, [r7, #4]
 80252d0:	695b      	ldr	r3, [r3, #20]
 80252d2:	2152      	movs	r1, #82	; 0x52
 80252d4:	4618      	mov	r0, r3
 80252d6:	f7fc fa25 	bl	8021724 <_ZN3Led10ColorOrderEc>
    else led_->ColorOrder('B');
}
 80252da:	e005      	b.n	80252e8 <_ZN3Run13ModeFirstGoalEv+0x3c>
    else led_->ColorOrder('B');
 80252dc:	687b      	ldr	r3, [r7, #4]
 80252de:	695b      	ldr	r3, [r3, #20]
 80252e0:	2142      	movs	r1, #66	; 0x42
 80252e2:	4618      	mov	r0, r3
 80252e4:	f7fc fa1e 	bl	8021724 <_ZN3Led10ColorOrderEc>
}
 80252e8:	bf00      	nop
 80252ea:	3708      	adds	r7, #8
 80252ec:	46bd      	mov	sp, r7
 80252ee:	bd80      	pop	{r7, pc}
 80252f0:	00000000 	.word	0x00000000

080252f4 <_ZN3Run13ModeSecondRunEv>:

void Run::ModeSecondRun()
{
 80252f4:	b580      	push	{r7, lr}
 80252f6:	b086      	sub	sp, #24
 80252f8:	af00      	add	r7, sp, #0
 80252fa:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 80252fc:	687b      	ldr	r3, [r7, #4]
 80252fe:	699b      	ldr	r3, [r3, #24]
 8025300:	4618      	mov	r0, r3
 8025302:	f7fc fd39 	bl	8021d78 <_ZN10LineSensor6UpdateEv>
    encoder_->Update();
 8025306:	687b      	ldr	r3, [r7, #4]
 8025308:	689b      	ldr	r3, [r3, #8]
 802530a:	4618      	mov	r0, r3
 802530c:	f7fb fd4c 	bl	8020da8 <_ZN7Encoder6UpdateEv>
    iim_42652_->Update();
 8025310:	687b      	ldr	r3, [r7, #4]
 8025312:	691b      	ldr	r3, [r3, #16]
 8025314:	4618      	mov	r0, r3
 8025316:	f7fc f97b 	bl	8021610 <_ZN8Iim426526UpdateEv>
    side_sensor_->Update();
 802531a:	687b      	ldr	r3, [r7, #4]
 802531c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802531e:	4618      	mov	r0, r3
 8025320:	f000 fa76 	bl	8025810 <_ZN10SideSensor6UpdateEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 8025324:	6878      	ldr	r0, [r7, #4]
 8025326:	f7ff fcd7 	bl	8024cd8 <_ZN3Run13EmergencyStopEv>
 802532a:	4603      	mov	r3, r0
 802532c:	2b00      	cmp	r3, #0
 802532e:	d131      	bne.n	8025394 <_ZN3Run13ModeSecondRunEv+0xa0>
    /* Loading */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 8025330:	687b      	ldr	r3, [r7, #4]
 8025332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025334:	4618      	mov	r0, r3
 8025336:	f000 fc3a 	bl	8025bae <_ZN10SideSensor18GetGoalMarkerCountEv>
 802533a:	4603      	mov	r3, r0
 802533c:	75fb      	strb	r3, [r7, #23]
    if(goal_count == 1) logger_->Loading();
 802533e:	7dfb      	ldrb	r3, [r7, #23]
 8025340:	2b01      	cmp	r3, #1
 8025342:	d104      	bne.n	802534e <_ZN3Run13ModeSecondRunEv+0x5a>
 8025344:	687b      	ldr	r3, [r7, #4]
 8025346:	6a1b      	ldr	r3, [r3, #32]
 8025348:	4618      	mov	r0, r3
 802534a:	f7fd fb71 	bl	8022a30 <_ZN6Logger7LoadingEv>
    /* Motor control */
    float target_velocity = SecondTargetVelocity(goal_count);
 802534e:	7dfb      	ldrb	r3, [r7, #23]
 8025350:	4619      	mov	r1, r3
 8025352:	6878      	ldr	r0, [r7, #4]
 8025354:	f000 f92a 	bl	80255ac <_ZN3Run20SecondTargetVelocityEh>
 8025358:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 802535c:	687b      	ldr	r3, [r7, #4]
 802535e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8025360:	ed97 0a04 	vldr	s0, [r7, #16]
 8025364:	4618      	mov	r0, r3
 8025366:	f001 f8ea 	bl	802653e <_ZN15VelocityControl16DeterminePidGainEf>
 802536a:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 802536e:	687b      	ldr	r3, [r7, #4]
 8025370:	69db      	ldr	r3, [r3, #28]
 8025372:	ed97 0a04 	vldr	s0, [r7, #16]
 8025376:	4618      	mov	r0, r3
 8025378:	f7fc fed8 	bl	802212c <_ZN9LineTrace16DeterminePidGainEf>
 802537c:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 8025380:	687b      	ldr	r3, [r7, #4]
 8025382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025384:	edd7 0a02 	vldr	s1, [r7, #8]
 8025388:	ed97 0a03 	vldr	s0, [r7, #12]
 802538c:	4618      	mov	r0, r3
 802538e:	f7ff f877 	bl	8024480 <_ZN5Motor5DriveEff>
 8025392:	e000      	b.n	8025396 <_ZN3Run13ModeSecondRunEv+0xa2>
    if(EmergencyStop()) return;
 8025394:	bf00      	nop
}
 8025396:	3718      	adds	r7, #24
 8025398:	46bd      	mov	sp, r7
 802539a:	bd80      	pop	{r7, pc}

0802539c <_ZN3Run14ModeSecondGoalEv>:

void Run::ModeSecondGoal()
{
 802539c:	b580      	push	{r7, lr}
 802539e:	b082      	sub	sp, #8
 80253a0:	af00      	add	r7, sp, #0
 80253a2:	6078      	str	r0, [r7, #4]
    motor_->Drive(0, 0);
 80253a4:	687b      	ldr	r3, [r7, #4]
 80253a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80253a8:	eddf 0a08 	vldr	s1, [pc, #32]	; 80253cc <_ZN3Run14ModeSecondGoalEv+0x30>
 80253ac:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80253cc <_ZN3Run14ModeSecondGoalEv+0x30>
 80253b0:	4618      	mov	r0, r3
 80253b2:	f7ff f865 	bl	8024480 <_ZN5Motor5DriveEff>
    led_->ColorOrder('M');
 80253b6:	687b      	ldr	r3, [r7, #4]
 80253b8:	695b      	ldr	r3, [r3, #20]
 80253ba:	214d      	movs	r1, #77	; 0x4d
 80253bc:	4618      	mov	r0, r3
 80253be:	f7fc f9b1 	bl	8021724 <_ZN3Led10ColorOrderEc>
}
 80253c2:	bf00      	nop
 80253c4:	3708      	adds	r7, #8
 80253c6:	46bd      	mov	sp, r7
 80253c8:	bd80      	pop	{r7, pc}
 80253ca:	bf00      	nop
 80253cc:	00000000 	.word	0x00000000

080253d0 <_ZN3Run19ModeVelocityControlEv>:

void Run::ModeVelocityControl()
{
 80253d0:	b580      	push	{r7, lr}
 80253d2:	b086      	sub	sp, #24
 80253d4:	af00      	add	r7, sp, #0
 80253d6:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    encoder_->Update();
 80253d8:	687b      	ldr	r3, [r7, #4]
 80253da:	689b      	ldr	r3, [r3, #8]
 80253dc:	4618      	mov	r0, r3
 80253de:	f7fb fce3 	bl	8020da8 <_ZN7Encoder6UpdateEv>
    line_sensor_->Update();
 80253e2:	687b      	ldr	r3, [r7, #4]
 80253e4:	699b      	ldr	r3, [r3, #24]
 80253e6:	4618      	mov	r0, r3
 80253e8:	f7fc fcc6 	bl	8021d78 <_ZN10LineSensor6UpdateEv>
    side_sensor_->Update();
 80253ec:	687b      	ldr	r3, [r7, #4]
 80253ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80253f0:	4618      	mov	r0, r3
 80253f2:	f000 fa0d 	bl	8025810 <_ZN10SideSensor6UpdateEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 80253f6:	6878      	ldr	r0, [r7, #4]
 80253f8:	f7ff fc6e 	bl	8024cd8 <_ZN3Run13EmergencyStopEv>
 80253fc:	4603      	mov	r3, r0
 80253fe:	2b00      	cmp	r3, #0
 8025400:	d129      	bne.n	8025456 <_ZN3Run19ModeVelocityControlEv+0x86>
    /* Motor control */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 8025402:	687b      	ldr	r3, [r7, #4]
 8025404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025406:	4618      	mov	r0, r3
 8025408:	f000 fbd1 	bl	8025bae <_ZN10SideSensor18GetGoalMarkerCountEv>
 802540c:	4603      	mov	r3, r0
 802540e:	75fb      	strb	r3, [r7, #23]
    float target_velocity = VelocityControlTarget(goal_count);
 8025410:	7dfb      	ldrb	r3, [r7, #23]
 8025412:	4619      	mov	r1, r3
 8025414:	6878      	ldr	r0, [r7, #4]
 8025416:	f000 f8f1 	bl	80255fc <_ZN3Run21VelocityControlTargetEh>
 802541a:	ed87 0a04 	vstr	s0, [r7, #16]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 802541e:	687b      	ldr	r3, [r7, #4]
 8025420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8025422:	ed97 0a04 	vldr	s0, [r7, #16]
 8025426:	4618      	mov	r0, r3
 8025428:	f001 f889 	bl	802653e <_ZN15VelocityControl16DeterminePidGainEf>
 802542c:	ed87 0a03 	vstr	s0, [r7, #12]
    float rotat_ratio = line_trace_->DeterminePidGain(target_velocity);
 8025430:	687b      	ldr	r3, [r7, #4]
 8025432:	69db      	ldr	r3, [r3, #28]
 8025434:	ed97 0a04 	vldr	s0, [r7, #16]
 8025438:	4618      	mov	r0, r3
 802543a:	f7fc fe77 	bl	802212c <_ZN9LineTrace16DeterminePidGainEf>
 802543e:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, rotat_ratio);
 8025442:	687b      	ldr	r3, [r7, #4]
 8025444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025446:	edd7 0a02 	vldr	s1, [r7, #8]
 802544a:	ed97 0a03 	vldr	s0, [r7, #12]
 802544e:	4618      	mov	r0, r3
 8025450:	f7ff f816 	bl	8024480 <_ZN5Motor5DriveEff>
 8025454:	e000      	b.n	8025458 <_ZN3Run19ModeVelocityControlEv+0x88>
    if(EmergencyStop()) return;
 8025456:	bf00      	nop
}
 8025458:	3718      	adds	r7, #24
 802545a:	46bd      	mov	sp, r7
 802545c:	bd80      	pop	{r7, pc}

0802545e <_ZN3Run13ModeLineTraceEv>:

void Run::ModeLineTrace()
{
 802545e:	b580      	push	{r7, lr}
 8025460:	b086      	sub	sp, #24
 8025462:	af00      	add	r7, sp, #0
 8025464:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8025466:	687b      	ldr	r3, [r7, #4]
 8025468:	699b      	ldr	r3, [r3, #24]
 802546a:	4618      	mov	r0, r3
 802546c:	f7fc fc84 	bl	8021d78 <_ZN10LineSensor6UpdateEv>
    side_sensor_->Update();
 8025470:	687b      	ldr	r3, [r7, #4]
 8025472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025474:	4618      	mov	r0, r3
 8025476:	f000 f9cb 	bl	8025810 <_ZN10SideSensor6UpdateEv>
    /* Emergency stop */
    if(EmergencyStop()) return;
 802547a:	6878      	ldr	r0, [r7, #4]
 802547c:	f7ff fc2c 	bl	8024cd8 <_ZN3Run13EmergencyStopEv>
 8025480:	4603      	mov	r3, r0
 8025482:	2b00      	cmp	r3, #0
 8025484:	d11e      	bne.n	80254c4 <_ZN3Run13ModeLineTraceEv+0x66>
    /* Motor control */
    uint8_t goal_count = side_sensor_->GetGoalMarkerCount();
 8025486:	687b      	ldr	r3, [r7, #4]
 8025488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802548a:	4618      	mov	r0, r3
 802548c:	f000 fb8f 	bl	8025bae <_ZN10SideSensor18GetGoalMarkerCountEv>
 8025490:	4603      	mov	r3, r0
 8025492:	75fb      	strb	r3, [r7, #23]
    float trans_ratio = CommonDuty(goal_count);
 8025494:	7dfb      	ldrb	r3, [r7, #23]
 8025496:	4619      	mov	r1, r3
 8025498:	6878      	ldr	r0, [r7, #4]
 802549a:	f000 f8d5 	bl	8025648 <_ZN3Run10CommonDutyEh>
 802549e:	ed87 0a04 	vstr	s0, [r7, #16]
    float rotat_ratio = line_trace_->LineTraceOnly();
 80254a2:	687b      	ldr	r3, [r7, #4]
 80254a4:	69db      	ldr	r3, [r3, #28]
 80254a6:	4618      	mov	r0, r3
 80254a8:	f7fc fe22 	bl	80220f0 <_ZN9LineTrace13LineTraceOnlyEv>
 80254ac:	ed87 0a03 	vstr	s0, [r7, #12]
    motor_->Drive(trans_ratio, rotat_ratio);
 80254b0:	687b      	ldr	r3, [r7, #4]
 80254b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80254b4:	edd7 0a03 	vldr	s1, [r7, #12]
 80254b8:	ed97 0a04 	vldr	s0, [r7, #16]
 80254bc:	4618      	mov	r0, r3
 80254be:	f7fe ffdf 	bl	8024480 <_ZN5Motor5DriveEff>
 80254c2:	e000      	b.n	80254c6 <_ZN3Run13ModeLineTraceEv+0x68>
    if(EmergencyStop()) return;
 80254c4:	bf00      	nop
}
 80254c6:	3718      	adds	r7, #24
 80254c8:	46bd      	mov	sp, r7
 80254ca:	bd80      	pop	{r7, pc}

080254cc <_ZN3Run24ModeVelocityControlDebugEv>:

#ifdef DEBUG_MODE
void Run::ModeVelocityControlDebug()
{
 80254cc:	b580      	push	{r7, lr}
 80254ce:	b084      	sub	sp, #16
 80254d0:	af00      	add	r7, sp, #0
 80254d2:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 80254d4:	687b      	ldr	r3, [r7, #4]
 80254d6:	699b      	ldr	r3, [r3, #24]
 80254d8:	4618      	mov	r0, r3
 80254da:	f7fc fc4d 	bl	8021d78 <_ZN10LineSensor6UpdateEv>
    encoder_->Update();
 80254de:	687b      	ldr	r3, [r7, #4]
 80254e0:	689b      	ldr	r3, [r3, #8]
 80254e2:	4618      	mov	r0, r3
 80254e4:	f7fb fc60 	bl	8020da8 <_ZN7Encoder6UpdateEv>
    /* Motor control */
    float target_velocity = VELOCITY_CONTROL_TARGET;
 80254e8:	4b0b      	ldr	r3, [pc, #44]	; (8025518 <_ZN3Run24ModeVelocityControlDebugEv+0x4c>)
 80254ea:	60fb      	str	r3, [r7, #12]
    float trans_ratio = velocity_control_->DeterminePidGain(target_velocity);
 80254ec:	687b      	ldr	r3, [r7, #4]
 80254ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80254f0:	ed97 0a03 	vldr	s0, [r7, #12]
 80254f4:	4618      	mov	r0, r3
 80254f6:	f001 f822 	bl	802653e <_ZN15VelocityControl16DeterminePidGainEf>
 80254fa:	ed87 0a02 	vstr	s0, [r7, #8]
    motor_->Drive(trans_ratio, 0);
 80254fe:	687b      	ldr	r3, [r7, #4]
 8025500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025502:	eddf 0a06 	vldr	s1, [pc, #24]	; 802551c <_ZN3Run24ModeVelocityControlDebugEv+0x50>
 8025506:	ed97 0a02 	vldr	s0, [r7, #8]
 802550a:	4618      	mov	r0, r3
 802550c:	f7fe ffb8 	bl	8024480 <_ZN5Motor5DriveEff>
}
 8025510:	bf00      	nop
 8025512:	3710      	adds	r7, #16
 8025514:	46bd      	mov	sp, r7
 8025516:	bd80      	pop	{r7, pc}
 8025518:	3f99999a 	.word	0x3f99999a
 802551c:	00000000 	.word	0x00000000

08025520 <_ZN3Run18ModeLineTraceDebugEv>:

void Run::ModeLineTraceDebug()
{
 8025520:	b580      	push	{r7, lr}
 8025522:	b084      	sub	sp, #16
 8025524:	af00      	add	r7, sp, #0
 8025526:	6078      	str	r0, [r7, #4]
    /* Sensor update */
    line_sensor_->Update();
 8025528:	687b      	ldr	r3, [r7, #4]
 802552a:	699b      	ldr	r3, [r3, #24]
 802552c:	4618      	mov	r0, r3
 802552e:	f7fc fc23 	bl	8021d78 <_ZN10LineSensor6UpdateEv>
    /* Motor control */
    float rotat_ratio = line_trace_->LineTraceOnly();
 8025532:	687b      	ldr	r3, [r7, #4]
 8025534:	69db      	ldr	r3, [r3, #28]
 8025536:	4618      	mov	r0, r3
 8025538:	f7fc fdda 	bl	80220f0 <_ZN9LineTrace13LineTraceOnlyEv>
 802553c:	ed87 0a03 	vstr	s0, [r7, #12]
    motor_->Drive(0, rotat_ratio);
 8025540:	687b      	ldr	r3, [r7, #4]
 8025542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025544:	edd7 0a03 	vldr	s1, [r7, #12]
 8025548:	ed9f 0a04 	vldr	s0, [pc, #16]	; 802555c <_ZN3Run18ModeLineTraceDebugEv+0x3c>
 802554c:	4618      	mov	r0, r3
 802554e:	f7fe ff97 	bl	8024480 <_ZN5Motor5DriveEff>
}
 8025552:	bf00      	nop
 8025554:	3710      	adds	r7, #16
 8025556:	46bd      	mov	sp, r7
 8025558:	bd80      	pop	{r7, pc}
 802555a:	bf00      	nop
 802555c:	00000000 	.word	0x00000000

08025560 <_ZN3Run19FirstTargetVelocityEh>:
    InitialTest();
}
#endif // DEBUG_MODE

float Run::FirstTargetVelocity(uint8_t goal_count)
{
 8025560:	b480      	push	{r7}
 8025562:	b083      	sub	sp, #12
 8025564:	af00      	add	r7, sp, #0
 8025566:	6078      	str	r0, [r7, #4]
 8025568:	460b      	mov	r3, r1
 802556a:	70fb      	strb	r3, [r7, #3]
    static uint8_t slow_timer = 0;
    static uint8_t stop_timer = 0;

    if(goal_count == 1)
 802556c:	78fb      	ldrb	r3, [r7, #3]
 802556e:	2b01      	cmp	r3, #1
 8025570:	d102      	bne.n	8025578 <_ZN3Run19FirstTargetVelocityEh+0x18>
    {
        return EXPLORE_VELOCITY;
 8025572:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8025576:	e00d      	b.n	8025594 <_ZN3Run19FirstTargetVelocityEh+0x34>
    }
    else if(goal_count >= 2)
 8025578:	78fb      	ldrb	r3, [r7, #3]
 802557a:	2b01      	cmp	r3, #1
 802557c:	d908      	bls.n	8025590 <_ZN3Run19FirstTargetVelocityEh+0x30>
    {
        if(slow_timer < SLOW_DRIVE_TIME)
        {
            slow_timer++;
 802557e:	4b0a      	ldr	r3, [pc, #40]	; (80255a8 <_ZN3Run19FirstTargetVelocityEh+0x48>)
 8025580:	781b      	ldrb	r3, [r3, #0]
 8025582:	3301      	adds	r3, #1
 8025584:	b2da      	uxtb	r2, r3
 8025586:	4b08      	ldr	r3, [pc, #32]	; (80255a8 <_ZN3Run19FirstTargetVelocityEh+0x48>)
 8025588:	701a      	strb	r2, [r3, #0]
            return SLOW_DRIVE_VELOCITY;
 802558a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 802558e:	e001      	b.n	8025594 <_ZN3Run19FirstTargetVelocityEh+0x34>
        {
            SetRunMode(FIRST_GOAL);
            return 0;
        }
    }
    else return EXPLORE_VELOCITY;
 8025590:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8025594:	ee07 3a90 	vmov	s15, r3
}
 8025598:	eeb0 0a67 	vmov.f32	s0, s15
 802559c:	370c      	adds	r7, #12
 802559e:	46bd      	mov	sp, r7
 80255a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255a4:	4770      	bx	lr
 80255a6:	bf00      	nop
 80255a8:	200002fa 	.word	0x200002fa

080255ac <_ZN3Run20SecondTargetVelocityEh>:

float Run::SecondTargetVelocity(uint8_t goal_count)
{
 80255ac:	b580      	push	{r7, lr}
 80255ae:	b082      	sub	sp, #8
 80255b0:	af00      	add	r7, sp, #0
 80255b2:	6078      	str	r0, [r7, #4]
 80255b4:	460b      	mov	r3, r1
 80255b6:	70fb      	strb	r3, [r7, #3]
    static uint8_t slow_timer = 0;
    static uint8_t stop_timer = 0;

    if(goal_count == 1)
 80255b8:	78fb      	ldrb	r3, [r7, #3]
 80255ba:	2b01      	cmp	r3, #1
 80255bc:	d107      	bne.n	80255ce <_ZN3Run20SecondTargetVelocityEh+0x22>
    {
        return logger_->GetTargetVelocity();
 80255be:	687b      	ldr	r3, [r7, #4]
 80255c0:	6a1b      	ldr	r3, [r3, #32]
 80255c2:	4618      	mov	r0, r3
 80255c4:	f7fd fcfe 	bl	8022fc4 <_ZN6Logger17GetTargetVelocityEv>
 80255c8:	eef0 7a40 	vmov.f32	s15, s0
 80255cc:	e00d      	b.n	80255ea <_ZN3Run20SecondTargetVelocityEh+0x3e>
    }
    else if(goal_count >= 2)
 80255ce:	78fb      	ldrb	r3, [r7, #3]
 80255d0:	2b01      	cmp	r3, #1
 80255d2:	d908      	bls.n	80255e6 <_ZN3Run20SecondTargetVelocityEh+0x3a>
    {
        if(slow_timer < SLOW_DRIVE_TIME)
        {
            slow_timer++;
 80255d4:	4b07      	ldr	r3, [pc, #28]	; (80255f4 <_ZN3Run20SecondTargetVelocityEh+0x48>)
 80255d6:	781b      	ldrb	r3, [r3, #0]
 80255d8:	3301      	adds	r3, #1
 80255da:	b2da      	uxtb	r2, r3
 80255dc:	4b05      	ldr	r3, [pc, #20]	; (80255f4 <_ZN3Run20SecondTargetVelocityEh+0x48>)
 80255de:	701a      	strb	r2, [r3, #0]
            return SLOW_DRIVE_VELOCITY;
 80255e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80255e4:	e001      	b.n	80255ea <_ZN3Run20SecondTargetVelocityEh+0x3e>
        {
            SetRunMode(SECOND_GOAL);
            return 0;
        }
    }
    else return MIN_VELOCITY;
 80255e6:	eddf 7a04 	vldr	s15, [pc, #16]	; 80255f8 <_ZN3Run20SecondTargetVelocityEh+0x4c>
}
 80255ea:	eeb0 0a67 	vmov.f32	s0, s15
 80255ee:	3708      	adds	r7, #8
 80255f0:	46bd      	mov	sp, r7
 80255f2:	bd80      	pop	{r7, pc}
 80255f4:	200002fb 	.word	0x200002fb
 80255f8:	3f4ccccd 	.word	0x3f4ccccd

080255fc <_ZN3Run21VelocityControlTargetEh>:

float Run::VelocityControlTarget(uint8_t goal_count)
{
 80255fc:	b480      	push	{r7}
 80255fe:	b083      	sub	sp, #12
 8025600:	af00      	add	r7, sp, #0
 8025602:	6078      	str	r0, [r7, #4]
 8025604:	460b      	mov	r3, r1
 8025606:	70fb      	strb	r3, [r7, #3]
    static uint8_t slow_timer = 0;
    static uint8_t stop_timer = 0;

    if(goal_count == 1)
 8025608:	78fb      	ldrb	r3, [r7, #3]
 802560a:	2b01      	cmp	r3, #1
 802560c:	d101      	bne.n	8025612 <_ZN3Run21VelocityControlTargetEh+0x16>
    {
        return VELOCITY_CONTROL_TARGET;
 802560e:	4b0c      	ldr	r3, [pc, #48]	; (8025640 <_ZN3Run21VelocityControlTargetEh+0x44>)
 8025610:	e00c      	b.n	802562c <_ZN3Run21VelocityControlTargetEh+0x30>
    }
    else if(goal_count >= 2)
 8025612:	78fb      	ldrb	r3, [r7, #3]
 8025614:	2b01      	cmp	r3, #1
 8025616:	d908      	bls.n	802562a <_ZN3Run21VelocityControlTargetEh+0x2e>
    {
        if(slow_timer < SLOW_DRIVE_TIME)
        {
            slow_timer++;
 8025618:	4b0a      	ldr	r3, [pc, #40]	; (8025644 <_ZN3Run21VelocityControlTargetEh+0x48>)
 802561a:	781b      	ldrb	r3, [r3, #0]
 802561c:	3301      	adds	r3, #1
 802561e:	b2da      	uxtb	r2, r3
 8025620:	4b08      	ldr	r3, [pc, #32]	; (8025644 <_ZN3Run21VelocityControlTargetEh+0x48>)
 8025622:	701a      	strb	r2, [r3, #0]
            return SLOW_DRIVE_VELOCITY;
 8025624:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8025628:	e000      	b.n	802562c <_ZN3Run21VelocityControlTargetEh+0x30>
        {
            SetRunMode(STANDBY);
            return 0;
        }
    }
    else return VELOCITY_CONTROL_TARGET;
 802562a:	4b05      	ldr	r3, [pc, #20]	; (8025640 <_ZN3Run21VelocityControlTargetEh+0x44>)
 802562c:	ee07 3a90 	vmov	s15, r3
}
 8025630:	eeb0 0a67 	vmov.f32	s0, s15
 8025634:	370c      	adds	r7, #12
 8025636:	46bd      	mov	sp, r7
 8025638:	f85d 7b04 	ldr.w	r7, [sp], #4
 802563c:	4770      	bx	lr
 802563e:	bf00      	nop
 8025640:	3f99999a 	.word	0x3f99999a
 8025644:	200002fc 	.word	0x200002fc

08025648 <_ZN3Run10CommonDutyEh>:

float Run::CommonDuty(uint8_t goal_count)
{
 8025648:	b480      	push	{r7}
 802564a:	b083      	sub	sp, #12
 802564c:	af00      	add	r7, sp, #0
 802564e:	6078      	str	r0, [r7, #4]
 8025650:	460b      	mov	r3, r1
 8025652:	70fb      	strb	r3, [r7, #3]
    static uint8_t slow_timer = 0;
    static uint8_t stop_timer = 0;

    if(goal_count == 1)
 8025654:	78fb      	ldrb	r3, [r7, #3]
 8025656:	2b01      	cmp	r3, #1
 8025658:	d101      	bne.n	802565e <_ZN3Run10CommonDutyEh+0x16>
    {
        return COMMON_DUTY;
 802565a:	4b0b      	ldr	r3, [pc, #44]	; (8025688 <_ZN3Run10CommonDutyEh+0x40>)
 802565c:	e00b      	b.n	8025676 <_ZN3Run10CommonDutyEh+0x2e>
    }
    else if(goal_count >= 2)
 802565e:	78fb      	ldrb	r3, [r7, #3]
 8025660:	2b01      	cmp	r3, #1
 8025662:	d907      	bls.n	8025674 <_ZN3Run10CommonDutyEh+0x2c>
    {
        if(slow_timer < SLOW_DRIVE_TIME)
        {
            slow_timer++;
 8025664:	4b09      	ldr	r3, [pc, #36]	; (802568c <_ZN3Run10CommonDutyEh+0x44>)
 8025666:	781b      	ldrb	r3, [r3, #0]
 8025668:	3301      	adds	r3, #1
 802566a:	b2da      	uxtb	r2, r3
 802566c:	4b07      	ldr	r3, [pc, #28]	; (802568c <_ZN3Run10CommonDutyEh+0x44>)
 802566e:	701a      	strb	r2, [r3, #0]
            return SLOW_DRIVE_DUTY;
 8025670:	4b05      	ldr	r3, [pc, #20]	; (8025688 <_ZN3Run10CommonDutyEh+0x40>)
 8025672:	e000      	b.n	8025676 <_ZN3Run10CommonDutyEh+0x2e>
        {
            SetRunMode(STANDBY);
            return 0;
        }
    }
    else return COMMON_DUTY;
 8025674:	4b04      	ldr	r3, [pc, #16]	; (8025688 <_ZN3Run10CommonDutyEh+0x40>)
 8025676:	ee07 3a90 	vmov	s15, r3
}
 802567a:	eeb0 0a67 	vmov.f32	s0, s15
 802567e:	370c      	adds	r7, #12
 8025680:	46bd      	mov	sp, r7
 8025682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025686:	4770      	bx	lr
 8025688:	3e4ccccd 	.word	0x3e4ccccd
 802568c:	200002fd 	.word	0x200002fd

08025690 <_ZN10SideSensorC1Ev>:
#include "side_sensor.hpp"

SideSensor::SideSensor() : read_state_flags_(0)
 8025690:	b480      	push	{r7}
 8025692:	b083      	sub	sp, #12
 8025694:	af00      	add	r7, sp, #0
 8025696:	6078      	str	r0, [r7, #4]
                         , write_state_flags_(0)
                         , exception_flags_(0)
                         , master_count_(0)
                         , goal_marker_count_(0)
                         , corner_marker_count_(0)
                         , cross_line_count_(0) {}
 8025698:	687b      	ldr	r3, [r7, #4]
 802569a:	2200      	movs	r2, #0
 802569c:	701a      	strb	r2, [r3, #0]
 802569e:	687b      	ldr	r3, [r7, #4]
 80256a0:	2200      	movs	r2, #0
 80256a2:	705a      	strb	r2, [r3, #1]
 80256a4:	687b      	ldr	r3, [r7, #4]
 80256a6:	2200      	movs	r2, #0
 80256a8:	709a      	strb	r2, [r3, #2]
 80256aa:	687b      	ldr	r3, [r7, #4]
 80256ac:	2200      	movs	r2, #0
 80256ae:	70da      	strb	r2, [r3, #3]
 80256b0:	687b      	ldr	r3, [r7, #4]
 80256b2:	2200      	movs	r2, #0
 80256b4:	711a      	strb	r2, [r3, #4]
 80256b6:	687b      	ldr	r3, [r7, #4]
 80256b8:	2200      	movs	r2, #0
 80256ba:	715a      	strb	r2, [r3, #5]
 80256bc:	687b      	ldr	r3, [r7, #4]
 80256be:	2200      	movs	r2, #0
 80256c0:	719a      	strb	r2, [r3, #6]
 80256c2:	687b      	ldr	r3, [r7, #4]
 80256c4:	4618      	mov	r0, r3
 80256c6:	370c      	adds	r7, #12
 80256c8:	46bd      	mov	sp, r7
 80256ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80256ce:	4770      	bx	lr

080256d0 <_ZN10SideSensor11UpdateStateEv>:

void SideSensor::UpdateState()
{
 80256d0:	b580      	push	{r7, lr}
 80256d2:	b084      	sub	sp, #16
 80256d4:	af00      	add	r7, sp, #0
 80256d6:	6078      	str	r0, [r7, #4]
    uint8_t io_state = 0xFF; // Lower bits represent the positions of sensors.
 80256d8:	23ff      	movs	r3, #255	; 0xff
 80256da:	73fb      	strb	r3, [r7, #15]

    if(IO_OUTSIDE_L == 0) io_state &= 0xF7; // 0111
 80256dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80256e0:	4849      	ldr	r0, [pc, #292]	; (8025808 <_ZN10SideSensor11UpdateStateEv+0x138>)
 80256e2:	f002 fee1 	bl	80284a8 <HAL_GPIO_ReadPin>
 80256e6:	4603      	mov	r3, r0
 80256e8:	2b00      	cmp	r3, #0
 80256ea:	bf0c      	ite	eq
 80256ec:	2301      	moveq	r3, #1
 80256ee:	2300      	movne	r3, #0
 80256f0:	b2db      	uxtb	r3, r3
 80256f2:	2b00      	cmp	r3, #0
 80256f4:	d003      	beq.n	80256fe <_ZN10SideSensor11UpdateStateEv+0x2e>
 80256f6:	7bfb      	ldrb	r3, [r7, #15]
 80256f8:	f023 0308 	bic.w	r3, r3, #8
 80256fc:	73fb      	strb	r3, [r7, #15]
    if(IO_INSIDE_L == 0)  io_state &= 0xFB; // 1011
 80256fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8025702:	4841      	ldr	r0, [pc, #260]	; (8025808 <_ZN10SideSensor11UpdateStateEv+0x138>)
 8025704:	f002 fed0 	bl	80284a8 <HAL_GPIO_ReadPin>
 8025708:	4603      	mov	r3, r0
 802570a:	2b00      	cmp	r3, #0
 802570c:	bf0c      	ite	eq
 802570e:	2301      	moveq	r3, #1
 8025710:	2300      	movne	r3, #0
 8025712:	b2db      	uxtb	r3, r3
 8025714:	2b00      	cmp	r3, #0
 8025716:	d003      	beq.n	8025720 <_ZN10SideSensor11UpdateStateEv+0x50>
 8025718:	7bfb      	ldrb	r3, [r7, #15]
 802571a:	f023 0304 	bic.w	r3, r3, #4
 802571e:	73fb      	strb	r3, [r7, #15]
    if(IO_INSIDE_R == 0)  io_state &= 0xFD; // 1101
 8025720:	f44f 7180 	mov.w	r1, #256	; 0x100
 8025724:	4838      	ldr	r0, [pc, #224]	; (8025808 <_ZN10SideSensor11UpdateStateEv+0x138>)
 8025726:	f002 febf 	bl	80284a8 <HAL_GPIO_ReadPin>
 802572a:	4603      	mov	r3, r0
 802572c:	2b00      	cmp	r3, #0
 802572e:	bf0c      	ite	eq
 8025730:	2301      	moveq	r3, #1
 8025732:	2300      	movne	r3, #0
 8025734:	b2db      	uxtb	r3, r3
 8025736:	2b00      	cmp	r3, #0
 8025738:	d003      	beq.n	8025742 <_ZN10SideSensor11UpdateStateEv+0x72>
 802573a:	7bfb      	ldrb	r3, [r7, #15]
 802573c:	f023 0302 	bic.w	r3, r3, #2
 8025740:	73fb      	strb	r3, [r7, #15]
    if(IO_OUTSIDE_R == 0) io_state &= 0xFE; // 1110
 8025742:	2104      	movs	r1, #4
 8025744:	4831      	ldr	r0, [pc, #196]	; (802580c <_ZN10SideSensor11UpdateStateEv+0x13c>)
 8025746:	f002 feaf 	bl	80284a8 <HAL_GPIO_ReadPin>
 802574a:	4603      	mov	r3, r0
 802574c:	2b00      	cmp	r3, #0
 802574e:	bf0c      	ite	eq
 8025750:	2301      	moveq	r3, #1
 8025752:	2300      	movne	r3, #0
 8025754:	b2db      	uxtb	r3, r3
 8025756:	2b00      	cmp	r3, #0
 8025758:	d003      	beq.n	8025762 <_ZN10SideSensor11UpdateStateEv+0x92>
 802575a:	7bfb      	ldrb	r3, [r7, #15]
 802575c:	f023 0301 	bic.w	r3, r3, #1
 8025760:	73fb      	strb	r3, [r7, #15]

    read_state_flags_ <<= 4;
 8025762:	687b      	ldr	r3, [r7, #4]
 8025764:	781b      	ldrb	r3, [r3, #0]
 8025766:	011b      	lsls	r3, r3, #4
 8025768:	b2da      	uxtb	r2, r3
 802576a:	687b      	ldr	r3, [r7, #4]
 802576c:	701a      	strb	r2, [r3, #0]

    switch(io_state)
 802576e:	7bfb      	ldrb	r3, [r7, #15]
 8025770:	3bf0      	subs	r3, #240	; 0xf0
 8025772:	2b0f      	cmp	r3, #15
 8025774:	d842      	bhi.n	80257fc <_ZN10SideSensor11UpdateStateEv+0x12c>
 8025776:	a201      	add	r2, pc, #4	; (adr r2, 802577c <_ZN10SideSensor11UpdateStateEv+0xac>)
 8025778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802577c:	080257ed 	.word	0x080257ed
 8025780:	080257ed 	.word	0x080257ed
 8025784:	080257ed 	.word	0x080257ed
 8025788:	080257dd 	.word	0x080257dd
 802578c:	080257ed 	.word	0x080257ed
 8025790:	080257fd 	.word	0x080257fd
 8025794:	080257ed 	.word	0x080257ed
 8025798:	080257dd 	.word	0x080257dd
 802579c:	080257ed 	.word	0x080257ed
 80257a0:	080257ed 	.word	0x080257ed
 80257a4:	080257fd 	.word	0x080257fd
 80257a8:	080257dd 	.word	0x080257dd
 80257ac:	080257cd 	.word	0x080257cd
 80257b0:	080257fd 	.word	0x080257fd
 80257b4:	080257fd 	.word	0x080257fd
 80257b8:	080257bd 	.word	0x080257bd
    {
        case 0xFF: // 1111
            read_state_flags_ |= 0x08; break;
 80257bc:	687b      	ldr	r3, [r7, #4]
 80257be:	781b      	ldrb	r3, [r3, #0]
 80257c0:	f043 0308 	orr.w	r3, r3, #8
 80257c4:	b2da      	uxtb	r2, r3
 80257c6:	687b      	ldr	r3, [r7, #4]
 80257c8:	701a      	strb	r2, [r3, #0]
 80257ca:	e018      	b.n	80257fe <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xFC: // 1100  If through goal, increase pattern.
            read_state_flags_ |= 0x04; break;
 80257cc:	687b      	ldr	r3, [r7, #4]
 80257ce:	781b      	ldrb	r3, [r3, #0]
 80257d0:	f043 0304 	orr.w	r3, r3, #4
 80257d4:	b2da      	uxtb	r2, r3
 80257d6:	687b      	ldr	r3, [r7, #4]
 80257d8:	701a      	strb	r2, [r3, #0]
 80257da:	e010      	b.n	80257fe <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xFB: // 1011
        case 0xF7: // 0111
        case 0xF3: // 0011
            read_state_flags_ |= 0x02; break;
 80257dc:	687b      	ldr	r3, [r7, #4]
 80257de:	781b      	ldrb	r3, [r3, #0]
 80257e0:	f043 0302 	orr.w	r3, r3, #2
 80257e4:	b2da      	uxtb	r2, r3
 80257e6:	687b      	ldr	r3, [r7, #4]
 80257e8:	701a      	strb	r2, [r3, #0]
 80257ea:	e008      	b.n	80257fe <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xF4: // 0100
        case 0xF0: // 0000
        case 0xF1: // 0001
        case 0xF8: // 1000
        case 0xF9: // 1001
            read_state_flags_ |= 0x01; break;
 80257ec:	687b      	ldr	r3, [r7, #4]
 80257ee:	781b      	ldrb	r3, [r3, #0]
 80257f0:	f043 0301 	orr.w	r3, r3, #1
 80257f4:	b2da      	uxtb	r2, r3
 80257f6:	687b      	ldr	r3, [r7, #4]
 80257f8:	701a      	strb	r2, [r3, #0]
 80257fa:	e000      	b.n	80257fe <_ZN10SideSensor11UpdateStateEv+0x12e>
        default: break;
 80257fc:	bf00      	nop
    }
}
 80257fe:	bf00      	nop
 8025800:	3710      	adds	r7, #16
 8025802:	46bd      	mov	sp, r7
 8025804:	bd80      	pop	{r7, pc}
 8025806:	bf00      	nop
 8025808:	40020400 	.word	0x40020400
 802580c:	40020c00 	.word	0x40020c00

08025810 <_ZN10SideSensor6UpdateEv>:

void SideSensor::Update()
{
 8025810:	b580      	push	{r7, lr}
 8025812:	b084      	sub	sp, #16
 8025814:	af00      	add	r7, sp, #0
 8025816:	6078      	str	r0, [r7, #4]
    uint8_t ignore_flag = exception_flags_ & 0x01;
 8025818:	687b      	ldr	r3, [r7, #4]
 802581a:	789b      	ldrb	r3, [r3, #2]
 802581c:	f003 0301 	and.w	r3, r3, #1
 8025820:	73fb      	strb	r3, [r7, #15]

    /* Ignore judgment */
    if(ignore_flag == 0x01)
 8025822:	7bfb      	ldrb	r3, [r7, #15]
 8025824:	2b01      	cmp	r3, #1
 8025826:	d111      	bne.n	802584c <_ZN10SideSensor6UpdateEv+0x3c>
    {
        if(master_count_ < IGNORE_COUNT) master_count_++;
 8025828:	687b      	ldr	r3, [r7, #4]
 802582a:	78db      	ldrb	r3, [r3, #3]
 802582c:	2b04      	cmp	r3, #4
 802582e:	d806      	bhi.n	802583e <_ZN10SideSensor6UpdateEv+0x2e>
 8025830:	687b      	ldr	r3, [r7, #4]
 8025832:	78db      	ldrb	r3, [r3, #3]
 8025834:	3301      	adds	r3, #1
 8025836:	b2da      	uxtb	r2, r3
 8025838:	687b      	ldr	r3, [r7, #4]
 802583a:	70da      	strb	r2, [r3, #3]
 802583c:	e031      	b.n	80258a2 <_ZN10SideSensor6UpdateEv+0x92>
        else exception_flags_ >>= 1; 
 802583e:	687b      	ldr	r3, [r7, #4]
 8025840:	789b      	ldrb	r3, [r3, #2]
 8025842:	105b      	asrs	r3, r3, #1
 8025844:	b2da      	uxtb	r2, r3
 8025846:	687b      	ldr	r3, [r7, #4]
 8025848:	709a      	strb	r2, [r3, #2]
 802584a:	e02a      	b.n	80258a2 <_ZN10SideSensor6UpdateEv+0x92>
    }
    else if(ignore_flag == 0x00)
 802584c:	7bfb      	ldrb	r3, [r7, #15]
 802584e:	2b00      	cmp	r3, #0
 8025850:	d127      	bne.n	80258a2 <_ZN10SideSensor6UpdateEv+0x92>
    {
        UpdateState();
 8025852:	6878      	ldr	r0, [r7, #4]
 8025854:	f7ff ff3c 	bl	80256d0 <_ZN10SideSensor11UpdateStateEv>

        uint8_t now_state = read_state_flags_;
 8025858:	687b      	ldr	r3, [r7, #4]
 802585a:	781b      	ldrb	r3, [r3, #0]
 802585c:	73bb      	strb	r3, [r7, #14]
        uint8_t pre_state = (now_state << 4) | (now_state >> 4);
 802585e:	7bbb      	ldrb	r3, [r7, #14]
 8025860:	011b      	lsls	r3, r3, #4
 8025862:	b25a      	sxtb	r2, r3
 8025864:	7bbb      	ldrb	r3, [r7, #14]
 8025866:	111b      	asrs	r3, r3, #4
 8025868:	b25b      	sxtb	r3, r3
 802586a:	4313      	orrs	r3, r2
 802586c:	b25b      	sxtb	r3, r3
 802586e:	737b      	strb	r3, [r7, #13]

        if(pre_state != now_state)
 8025870:	7b7a      	ldrb	r2, [r7, #13]
 8025872:	7bbb      	ldrb	r3, [r7, #14]
 8025874:	429a      	cmp	r2, r3
 8025876:	d003      	beq.n	8025880 <_ZN10SideSensor6UpdateEv+0x70>
        {
            NoiseTolerance();
 8025878:	6878      	ldr	r0, [r7, #4]
 802587a:	f000 f819 	bl	80258b0 <_ZN10SideSensor14NoiseToleranceEv>
 802587e:	e010      	b.n	80258a2 <_ZN10SideSensor6UpdateEv+0x92>
        }
        else if(pre_state == now_state)
 8025880:	7b7a      	ldrb	r2, [r7, #13]
 8025882:	7bbb      	ldrb	r3, [r7, #14]
 8025884:	429a      	cmp	r2, r3
 8025886:	d10c      	bne.n	80258a2 <_ZN10SideSensor6UpdateEv+0x92>
        {
            exception_flags_ &= 0xF3; // noise_count = 0
 8025888:	687b      	ldr	r3, [r7, #4]
 802588a:	789b      	ldrb	r3, [r3, #2]
 802588c:	f023 030c 	bic.w	r3, r3, #12
 8025890:	b2da      	uxtb	r2, r3
 8025892:	687b      	ldr	r3, [r7, #4]
 8025894:	709a      	strb	r2, [r3, #2]
            ConfirmState();
 8025896:	6878      	ldr	r0, [r7, #4]
 8025898:	f000 f85a 	bl	8025950 <_ZN10SideSensor12ConfirmStateEv>
            CountUp();
 802589c:	6878      	ldr	r0, [r7, #4]
 802589e:	f000 f8c6 	bl	8025a2e <_ZN10SideSensor7CountUpEv>
        }
    }

#ifdef DEBUG_MODE
    Monitor();
 80258a2:	6878      	ldr	r0, [r7, #4]
 80258a4:	f000 f9a8 	bl	8025bf8 <_ZN10SideSensor7MonitorEv>
#endif // DEBUG_MODE
}
 80258a8:	bf00      	nop
 80258aa:	3710      	adds	r7, #16
 80258ac:	46bd      	mov	sp, r7
 80258ae:	bd80      	pop	{r7, pc}

080258b0 <_ZN10SideSensor14NoiseToleranceEv>:

void SideSensor::NoiseTolerance()
{
 80258b0:	b580      	push	{r7, lr}
 80258b2:	b084      	sub	sp, #16
 80258b4:	af00      	add	r7, sp, #0
 80258b6:	6078      	str	r0, [r7, #4]
    uint8_t noise_count = (exception_flags_ & 0x0C) >> 2;
 80258b8:	687b      	ldr	r3, [r7, #4]
 80258ba:	789b      	ldrb	r3, [r3, #2]
 80258bc:	109b      	asrs	r3, r3, #2
 80258be:	b2db      	uxtb	r3, r3
 80258c0:	f003 0303 	and.w	r3, r3, #3
 80258c4:	73fb      	strb	r3, [r7, #15]

    if(noise_count == 0x00)
 80258c6:	7bfb      	ldrb	r3, [r7, #15]
 80258c8:	2b00      	cmp	r3, #0
 80258ca:	d11f      	bne.n	802590c <_ZN10SideSensor14NoiseToleranceEv+0x5c>
    {
        /* Update before_noise_state */
        exception_flags_ = (exception_flags_ & 0x0F) | (read_state_flags_ & 0xF0);
 80258cc:	687b      	ldr	r3, [r7, #4]
 80258ce:	789b      	ldrb	r3, [r3, #2]
 80258d0:	f003 030f 	and.w	r3, r3, #15
 80258d4:	b2da      	uxtb	r2, r3
 80258d6:	687b      	ldr	r3, [r7, #4]
 80258d8:	781b      	ldrb	r3, [r3, #0]
 80258da:	f023 030f 	bic.w	r3, r3, #15
 80258de:	b2db      	uxtb	r3, r3
 80258e0:	4313      	orrs	r3, r2
 80258e2:	b2da      	uxtb	r2, r3
 80258e4:	687b      	ldr	r3, [r7, #4]
 80258e6:	709a      	strb	r2, [r3, #2]
        /* Count up noise_count */
        noise_count++;
 80258e8:	7bfb      	ldrb	r3, [r7, #15]
 80258ea:	3301      	adds	r3, #1
 80258ec:	73fb      	strb	r3, [r7, #15]
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
 80258ee:	687b      	ldr	r3, [r7, #4]
 80258f0:	789b      	ldrb	r3, [r3, #2]
 80258f2:	b25b      	sxtb	r3, r3
 80258f4:	f023 030c 	bic.w	r3, r3, #12
 80258f8:	b25a      	sxtb	r2, r3
 80258fa:	7bfb      	ldrb	r3, [r7, #15]
 80258fc:	009b      	lsls	r3, r3, #2
 80258fe:	b25b      	sxtb	r3, r3
 8025900:	4313      	orrs	r3, r2
 8025902:	b25b      	sxtb	r3, r3
 8025904:	b2da      	uxtb	r2, r3
 8025906:	687b      	ldr	r3, [r7, #4]
 8025908:	709a      	strb	r2, [r3, #2]

        ConfirmState();
        CountUp();
    }
    else master_count_ = 0;
}
 802590a:	e01d      	b.n	8025948 <_ZN10SideSensor14NoiseToleranceEv+0x98>
    else if(noise_count == 0x01)
 802590c:	7bfb      	ldrb	r3, [r7, #15]
 802590e:	2b01      	cmp	r3, #1
 8025910:	d117      	bne.n	8025942 <_ZN10SideSensor14NoiseToleranceEv+0x92>
        noise_count++;
 8025912:	7bfb      	ldrb	r3, [r7, #15]
 8025914:	3301      	adds	r3, #1
 8025916:	73fb      	strb	r3, [r7, #15]
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
 8025918:	687b      	ldr	r3, [r7, #4]
 802591a:	789b      	ldrb	r3, [r3, #2]
 802591c:	b25b      	sxtb	r3, r3
 802591e:	f023 030c 	bic.w	r3, r3, #12
 8025922:	b25a      	sxtb	r2, r3
 8025924:	7bfb      	ldrb	r3, [r7, #15]
 8025926:	009b      	lsls	r3, r3, #2
 8025928:	b25b      	sxtb	r3, r3
 802592a:	4313      	orrs	r3, r2
 802592c:	b25b      	sxtb	r3, r3
 802592e:	b2da      	uxtb	r2, r3
 8025930:	687b      	ldr	r3, [r7, #4]
 8025932:	709a      	strb	r2, [r3, #2]
        ConfirmState();
 8025934:	6878      	ldr	r0, [r7, #4]
 8025936:	f000 f80b 	bl	8025950 <_ZN10SideSensor12ConfirmStateEv>
        CountUp();
 802593a:	6878      	ldr	r0, [r7, #4]
 802593c:	f000 f877 	bl	8025a2e <_ZN10SideSensor7CountUpEv>
}
 8025940:	e002      	b.n	8025948 <_ZN10SideSensor14NoiseToleranceEv+0x98>
    else master_count_ = 0;
 8025942:	687b      	ldr	r3, [r7, #4]
 8025944:	2200      	movs	r2, #0
 8025946:	70da      	strb	r2, [r3, #3]
}
 8025948:	bf00      	nop
 802594a:	3710      	adds	r7, #16
 802594c:	46bd      	mov	sp, r7
 802594e:	bd80      	pop	{r7, pc}

08025950 <_ZN10SideSensor12ConfirmStateEv>:

void SideSensor::ConfirmState()
{
 8025950:	b480      	push	{r7}
 8025952:	b085      	sub	sp, #20
 8025954:	af00      	add	r7, sp, #0
 8025956:	6078      	str	r0, [r7, #4]
    uint8_t before_noise_state = exception_flags_ >> 4;
 8025958:	687b      	ldr	r3, [r7, #4]
 802595a:	789b      	ldrb	r3, [r3, #2]
 802595c:	111b      	asrs	r3, r3, #4
 802595e:	73bb      	strb	r3, [r7, #14]
    uint8_t now_state = read_state_flags_ & 0x0F;
 8025960:	687b      	ldr	r3, [r7, #4]
 8025962:	781b      	ldrb	r3, [r3, #0]
 8025964:	f003 030f 	and.w	r3, r3, #15
 8025968:	737b      	strb	r3, [r7, #13]
    uint8_t count = master_count_;
 802596a:	687b      	ldr	r3, [r7, #4]
 802596c:	78db      	ldrb	r3, [r3, #3]
 802596e:	73fb      	strb	r3, [r7, #15]

    if(before_noise_state != now_state)
 8025970:	7bba      	ldrb	r2, [r7, #14]
 8025972:	7b7b      	ldrb	r3, [r7, #13]
 8025974:	429a      	cmp	r2, r3
 8025976:	d010      	beq.n	802599a <_ZN10SideSensor12ConfirmStateEv+0x4a>
    {
        /* Update before_noise_state */
        exception_flags_ = (exception_flags_ & 0x0F) | (now_state << 4);
 8025978:	687b      	ldr	r3, [r7, #4]
 802597a:	789b      	ldrb	r3, [r3, #2]
 802597c:	b25b      	sxtb	r3, r3
 802597e:	f003 030f 	and.w	r3, r3, #15
 8025982:	b25a      	sxtb	r2, r3
 8025984:	7b7b      	ldrb	r3, [r7, #13]
 8025986:	011b      	lsls	r3, r3, #4
 8025988:	b25b      	sxtb	r3, r3
 802598a:	4313      	orrs	r3, r2
 802598c:	b25b      	sxtb	r3, r3
 802598e:	b2da      	uxtb	r2, r3
 8025990:	687b      	ldr	r3, [r7, #4]
 8025992:	709a      	strb	r2, [r3, #2]
        count = 0;
 8025994:	2300      	movs	r3, #0
 8025996:	73fb      	strb	r3, [r7, #15]
 8025998:	e005      	b.n	80259a6 <_ZN10SideSensor12ConfirmStateEv+0x56>
    }
    else if(count < MAX_INTERRUPT_COUNT) count++;
 802599a:	7bfb      	ldrb	r3, [r7, #15]
 802599c:	2bf9      	cmp	r3, #249	; 0xf9
 802599e:	d802      	bhi.n	80259a6 <_ZN10SideSensor12ConfirmStateEv+0x56>
 80259a0:	7bfb      	ldrb	r3, [r7, #15]
 80259a2:	3301      	adds	r3, #1
 80259a4:	73fb      	strb	r3, [r7, #15]

    master_count_ = count;
 80259a6:	687b      	ldr	r3, [r7, #4]
 80259a8:	7bfa      	ldrb	r2, [r7, #15]
 80259aa:	70da      	strb	r2, [r3, #3]

    if(now_state == 0x08 && count >= BLACK_BLACK_COUNT)
 80259ac:	7b7b      	ldrb	r3, [r7, #13]
 80259ae:	2b08      	cmp	r3, #8
 80259b0:	d10d      	bne.n	80259ce <_ZN10SideSensor12ConfirmStateEv+0x7e>
 80259b2:	7bfb      	ldrb	r3, [r7, #15]
 80259b4:	2b01      	cmp	r3, #1
 80259b6:	d90a      	bls.n	80259ce <_ZN10SideSensor12ConfirmStateEv+0x7e>
    {
        write_state_flags_ = (write_state_flags_ & 0xF0) | 0x08;
 80259b8:	687b      	ldr	r3, [r7, #4]
 80259ba:	785b      	ldrb	r3, [r3, #1]
 80259bc:	f023 030f 	bic.w	r3, r3, #15
 80259c0:	b2db      	uxtb	r3, r3
 80259c2:	f043 0308 	orr.w	r3, r3, #8
 80259c6:	b2da      	uxtb	r2, r3
 80259c8:	687b      	ldr	r3, [r7, #4]
 80259ca:	705a      	strb	r2, [r3, #1]
 80259cc:	e029      	b.n	8025a22 <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x04 && count >= BLACK_WHITE_COUNT)
 80259ce:	7b7b      	ldrb	r3, [r7, #13]
 80259d0:	2b04      	cmp	r3, #4
 80259d2:	d10a      	bne.n	80259ea <_ZN10SideSensor12ConfirmStateEv+0x9a>
 80259d4:	7bfb      	ldrb	r3, [r7, #15]
 80259d6:	2b00      	cmp	r3, #0
 80259d8:	d007      	beq.n	80259ea <_ZN10SideSensor12ConfirmStateEv+0x9a>
    {
        write_state_flags_ |= 0x04;
 80259da:	687b      	ldr	r3, [r7, #4]
 80259dc:	785b      	ldrb	r3, [r3, #1]
 80259de:	f043 0304 	orr.w	r3, r3, #4
 80259e2:	b2da      	uxtb	r2, r3
 80259e4:	687b      	ldr	r3, [r7, #4]
 80259e6:	705a      	strb	r2, [r3, #1]
 80259e8:	e01b      	b.n	8025a22 <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x02 && count >= WHITE_BLACK_COUNT)
 80259ea:	7b7b      	ldrb	r3, [r7, #13]
 80259ec:	2b02      	cmp	r3, #2
 80259ee:	d10a      	bne.n	8025a06 <_ZN10SideSensor12ConfirmStateEv+0xb6>
 80259f0:	7bfb      	ldrb	r3, [r7, #15]
 80259f2:	2b00      	cmp	r3, #0
 80259f4:	d007      	beq.n	8025a06 <_ZN10SideSensor12ConfirmStateEv+0xb6>
    {
        write_state_flags_ |= 0x02;
 80259f6:	687b      	ldr	r3, [r7, #4]
 80259f8:	785b      	ldrb	r3, [r3, #1]
 80259fa:	f043 0302 	orr.w	r3, r3, #2
 80259fe:	b2da      	uxtb	r2, r3
 8025a00:	687b      	ldr	r3, [r7, #4]
 8025a02:	705a      	strb	r2, [r3, #1]
 8025a04:	e00d      	b.n	8025a22 <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x01 && count >= WHITE_WHITE_COUNT)
 8025a06:	7b7b      	ldrb	r3, [r7, #13]
 8025a08:	2b01      	cmp	r3, #1
 8025a0a:	d10a      	bne.n	8025a22 <_ZN10SideSensor12ConfirmStateEv+0xd2>
    {
        write_state_flags_ = (write_state_flags_ & 0xF8) | 0x01;
 8025a0c:	687b      	ldr	r3, [r7, #4]
 8025a0e:	785b      	ldrb	r3, [r3, #1]
 8025a10:	f023 0307 	bic.w	r3, r3, #7
 8025a14:	b2db      	uxtb	r3, r3
 8025a16:	f043 0301 	orr.w	r3, r3, #1
 8025a1a:	b2da      	uxtb	r2, r3
 8025a1c:	687b      	ldr	r3, [r7, #4]
 8025a1e:	705a      	strb	r2, [r3, #1]
    }
}
 8025a20:	e7ff      	b.n	8025a22 <_ZN10SideSensor12ConfirmStateEv+0xd2>
 8025a22:	bf00      	nop
 8025a24:	3714      	adds	r7, #20
 8025a26:	46bd      	mov	sp, r7
 8025a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025a2c:	4770      	bx	lr

08025a2e <_ZN10SideSensor7CountUpEv>:

void SideSensor::CountUp()
{
 8025a2e:	b480      	push	{r7}
 8025a30:	b085      	sub	sp, #20
 8025a32:	af00      	add	r7, sp, #0
 8025a34:	6078      	str	r0, [r7, #4]
    uint8_t state = write_state_flags_;
 8025a36:	687b      	ldr	r3, [r7, #4]
 8025a38:	785b      	ldrb	r3, [r3, #1]
 8025a3a:	73fb      	strb	r3, [r7, #15]
    uint8_t black_flag   = (state & 0x08) >> 3;
 8025a3c:	7bfb      	ldrb	r3, [r7, #15]
 8025a3e:	10db      	asrs	r3, r3, #3
 8025a40:	b2db      	uxtb	r3, r3
 8025a42:	f003 0301 	and.w	r3, r3, #1
 8025a46:	73bb      	strb	r3, [r7, #14]
    uint8_t goal_flag    = (state & 0x04) >> 2;
 8025a48:	7bfb      	ldrb	r3, [r7, #15]
 8025a4a:	109b      	asrs	r3, r3, #2
 8025a4c:	b2db      	uxtb	r3, r3
 8025a4e:	f003 0301 	and.w	r3, r3, #1
 8025a52:	737b      	strb	r3, [r7, #13]
    uint8_t corner_flag  = (state & 0x02) >> 1;
 8025a54:	7bfb      	ldrb	r3, [r7, #15]
 8025a56:	105b      	asrs	r3, r3, #1
 8025a58:	b2db      	uxtb	r3, r3
 8025a5a:	f003 0301 	and.w	r3, r3, #1
 8025a5e:	733b      	strb	r3, [r7, #12]
    uint8_t cross_flag   =  state & 0x01;
 8025a60:	7bfb      	ldrb	r3, [r7, #15]
 8025a62:	f003 0301 	and.w	r3, r3, #1
 8025a66:	72fb      	strb	r3, [r7, #11]
    uint8_t goal_reach   = (state & 0x80) >> 7;
 8025a68:	7bfb      	ldrb	r3, [r7, #15]
 8025a6a:	09db      	lsrs	r3, r3, #7
 8025a6c:	72bb      	strb	r3, [r7, #10]
    uint8_t corner_reach = (state & 0x40) >> 6;
 8025a6e:	7bfb      	ldrb	r3, [r7, #15]
 8025a70:	119b      	asrs	r3, r3, #6
 8025a72:	b2db      	uxtb	r3, r3
 8025a74:	f003 0301 	and.w	r3, r3, #1
 8025a78:	727b      	strb	r3, [r7, #9]
    uint8_t cross_reach  = (state & 0x20) >> 5;
 8025a7a:	7bfb      	ldrb	r3, [r7, #15]
 8025a7c:	115b      	asrs	r3, r3, #5
 8025a7e:	b2db      	uxtb	r3, r3
 8025a80:	f003 0301 	and.w	r3, r3, #1
 8025a84:	723b      	strb	r3, [r7, #8]

    if(cross_flag == 0x01 && black_flag == 0x01)
 8025a86:	7afb      	ldrb	r3, [r7, #11]
 8025a88:	2b01      	cmp	r3, #1
 8025a8a:	d10b      	bne.n	8025aa4 <_ZN10SideSensor7CountUpEv+0x76>
 8025a8c:	7bbb      	ldrb	r3, [r7, #14]
 8025a8e:	2b01      	cmp	r3, #1
 8025a90:	d108      	bne.n	8025aa4 <_ZN10SideSensor7CountUpEv+0x76>
    {
        state &= 0xF7; // black_flag = false
 8025a92:	7bfb      	ldrb	r3, [r7, #15]
 8025a94:	f023 0308 	bic.w	r3, r3, #8
 8025a98:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 8025a9a:	7bfb      	ldrb	r3, [r7, #15]
 8025a9c:	f043 0320 	orr.w	r3, r3, #32
 8025aa0:	73fb      	strb	r3, [r7, #15]
 8025aa2:	e02d      	b.n	8025b00 <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_flag == 0x01 && goal_reach == 0x01)
 8025aa4:	7afb      	ldrb	r3, [r7, #11]
 8025aa6:	2b01      	cmp	r3, #1
 8025aa8:	d10b      	bne.n	8025ac2 <_ZN10SideSensor7CountUpEv+0x94>
 8025aaa:	7abb      	ldrb	r3, [r7, #10]
 8025aac:	2b01      	cmp	r3, #1
 8025aae:	d108      	bne.n	8025ac2 <_ZN10SideSensor7CountUpEv+0x94>
    {
        state &= 0x7F; // goal_reach = false
 8025ab0:	7bfb      	ldrb	r3, [r7, #15]
 8025ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8025ab6:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 8025ab8:	7bfb      	ldrb	r3, [r7, #15]
 8025aba:	f043 0320 	orr.w	r3, r3, #32
 8025abe:	73fb      	strb	r3, [r7, #15]
 8025ac0:	e01e      	b.n	8025b00 <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_flag == 0x01 && corner_reach == 0x01)
 8025ac2:	7afb      	ldrb	r3, [r7, #11]
 8025ac4:	2b01      	cmp	r3, #1
 8025ac6:	d10b      	bne.n	8025ae0 <_ZN10SideSensor7CountUpEv+0xb2>
 8025ac8:	7a7b      	ldrb	r3, [r7, #9]
 8025aca:	2b01      	cmp	r3, #1
 8025acc:	d108      	bne.n	8025ae0 <_ZN10SideSensor7CountUpEv+0xb2>
    {
        state &= 0xBF; // corner_reach = false
 8025ace:	7bfb      	ldrb	r3, [r7, #15]
 8025ad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8025ad4:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 8025ad6:	7bfb      	ldrb	r3, [r7, #15]
 8025ad8:	f043 0320 	orr.w	r3, r3, #32
 8025adc:	73fb      	strb	r3, [r7, #15]
 8025ade:	e00f      	b.n	8025b00 <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_reach == 0x01 && black_flag == 0x01)
 8025ae0:	7a3b      	ldrb	r3, [r7, #8]
 8025ae2:	2b01      	cmp	r3, #1
 8025ae4:	d10c      	bne.n	8025b00 <_ZN10SideSensor7CountUpEv+0xd2>
 8025ae6:	7bbb      	ldrb	r3, [r7, #14]
 8025ae8:	2b01      	cmp	r3, #1
 8025aea:	d109      	bne.n	8025b00 <_ZN10SideSensor7CountUpEv+0xd2>
    {
        state &= 0xDF; // cross_reach = false
 8025aec:	7bfb      	ldrb	r3, [r7, #15]
 8025aee:	f023 0320 	bic.w	r3, r3, #32
 8025af2:	73fb      	strb	r3, [r7, #15]
        cross_line_count_++;
 8025af4:	687b      	ldr	r3, [r7, #4]
 8025af6:	799b      	ldrb	r3, [r3, #6]
 8025af8:	3301      	adds	r3, #1
 8025afa:	b2da      	uxtb	r2, r3
 8025afc:	687b      	ldr	r3, [r7, #4]
 8025afe:	719a      	strb	r2, [r3, #6]
    }

    black_flag   = (state & 0x08) >> 3;
 8025b00:	7bfb      	ldrb	r3, [r7, #15]
 8025b02:	10db      	asrs	r3, r3, #3
 8025b04:	b2db      	uxtb	r3, r3
 8025b06:	f003 0301 	and.w	r3, r3, #1
 8025b0a:	73bb      	strb	r3, [r7, #14]
    goal_reach   = (state & 0x80) >> 7;
 8025b0c:	7bfb      	ldrb	r3, [r7, #15]
 8025b0e:	09db      	lsrs	r3, r3, #7
 8025b10:	72bb      	strb	r3, [r7, #10]
    corner_reach = (state & 0x40) >> 6;
 8025b12:	7bfb      	ldrb	r3, [r7, #15]
 8025b14:	119b      	asrs	r3, r3, #6
 8025b16:	b2db      	uxtb	r3, r3
 8025b18:	f003 0301 	and.w	r3, r3, #1
 8025b1c:	727b      	strb	r3, [r7, #9]
    
    if(goal_flag == 0x01 && black_flag == 0x01)
 8025b1e:	7b7b      	ldrb	r3, [r7, #13]
 8025b20:	2b01      	cmp	r3, #1
 8025b22:	d10b      	bne.n	8025b3c <_ZN10SideSensor7CountUpEv+0x10e>
 8025b24:	7bbb      	ldrb	r3, [r7, #14]
 8025b26:	2b01      	cmp	r3, #1
 8025b28:	d108      	bne.n	8025b3c <_ZN10SideSensor7CountUpEv+0x10e>
    {
        state &= 0xF7; // black_flag = false
 8025b2a:	7bfb      	ldrb	r3, [r7, #15]
 8025b2c:	f023 0308 	bic.w	r3, r3, #8
 8025b30:	73fb      	strb	r3, [r7, #15]
        state |= 0x80; // goal_reach = true
 8025b32:	7bfb      	ldrb	r3, [r7, #15]
 8025b34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8025b38:	73fb      	strb	r3, [r7, #15]
 8025b3a:	e02f      	b.n	8025b9c <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(goal_reach == 0x01 && black_flag == 0x01)
 8025b3c:	7abb      	ldrb	r3, [r7, #10]
 8025b3e:	2b01      	cmp	r3, #1
 8025b40:	d10d      	bne.n	8025b5e <_ZN10SideSensor7CountUpEv+0x130>
 8025b42:	7bbb      	ldrb	r3, [r7, #14]
 8025b44:	2b01      	cmp	r3, #1
 8025b46:	d10a      	bne.n	8025b5e <_ZN10SideSensor7CountUpEv+0x130>
    {
        state &= 0x7F; // goal_reach = false
 8025b48:	7bfb      	ldrb	r3, [r7, #15]
 8025b4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8025b4e:	73fb      	strb	r3, [r7, #15]
        goal_marker_count_++;
 8025b50:	687b      	ldr	r3, [r7, #4]
 8025b52:	791b      	ldrb	r3, [r3, #4]
 8025b54:	3301      	adds	r3, #1
 8025b56:	b2da      	uxtb	r2, r3
 8025b58:	687b      	ldr	r3, [r7, #4]
 8025b5a:	711a      	strb	r2, [r3, #4]
 8025b5c:	e01e      	b.n	8025b9c <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(corner_flag == 0x01 && black_flag == 0x01)
 8025b5e:	7b3b      	ldrb	r3, [r7, #12]
 8025b60:	2b01      	cmp	r3, #1
 8025b62:	d10b      	bne.n	8025b7c <_ZN10SideSensor7CountUpEv+0x14e>
 8025b64:	7bbb      	ldrb	r3, [r7, #14]
 8025b66:	2b01      	cmp	r3, #1
 8025b68:	d108      	bne.n	8025b7c <_ZN10SideSensor7CountUpEv+0x14e>
    {
        state &= 0xF7; // black_flag = false
 8025b6a:	7bfb      	ldrb	r3, [r7, #15]
 8025b6c:	f023 0308 	bic.w	r3, r3, #8
 8025b70:	73fb      	strb	r3, [r7, #15]
        state |= 0x40; // corner_reach = true
 8025b72:	7bfb      	ldrb	r3, [r7, #15]
 8025b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025b78:	73fb      	strb	r3, [r7, #15]
 8025b7a:	e00f      	b.n	8025b9c <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(corner_reach == 0x01 && black_flag == 0x01)
 8025b7c:	7a7b      	ldrb	r3, [r7, #9]
 8025b7e:	2b01      	cmp	r3, #1
 8025b80:	d10c      	bne.n	8025b9c <_ZN10SideSensor7CountUpEv+0x16e>
 8025b82:	7bbb      	ldrb	r3, [r7, #14]
 8025b84:	2b01      	cmp	r3, #1
 8025b86:	d109      	bne.n	8025b9c <_ZN10SideSensor7CountUpEv+0x16e>
    {
        state &= 0xBF; // corner_reach = false
 8025b88:	7bfb      	ldrb	r3, [r7, #15]
 8025b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8025b8e:	73fb      	strb	r3, [r7, #15]
        corner_marker_count_++;
 8025b90:	687b      	ldr	r3, [r7, #4]
 8025b92:	795b      	ldrb	r3, [r3, #5]
 8025b94:	3301      	adds	r3, #1
 8025b96:	b2da      	uxtb	r2, r3
 8025b98:	687b      	ldr	r3, [r7, #4]
 8025b9a:	715a      	strb	r2, [r3, #5]
    }

    write_state_flags_ = state;
 8025b9c:	687b      	ldr	r3, [r7, #4]
 8025b9e:	7bfa      	ldrb	r2, [r7, #15]
 8025ba0:	705a      	strb	r2, [r3, #1]
}
 8025ba2:	bf00      	nop
 8025ba4:	3714      	adds	r7, #20
 8025ba6:	46bd      	mov	sp, r7
 8025ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025bac:	4770      	bx	lr

08025bae <_ZN10SideSensor18GetGoalMarkerCountEv>:

uint8_t SideSensor::GetGoalMarkerCount()
{
 8025bae:	b480      	push	{r7}
 8025bb0:	b083      	sub	sp, #12
 8025bb2:	af00      	add	r7, sp, #0
 8025bb4:	6078      	str	r0, [r7, #4]
    return goal_marker_count_;
 8025bb6:	687b      	ldr	r3, [r7, #4]
 8025bb8:	791b      	ldrb	r3, [r3, #4]
}
 8025bba:	4618      	mov	r0, r3
 8025bbc:	370c      	adds	r7, #12
 8025bbe:	46bd      	mov	sp, r7
 8025bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025bc4:	4770      	bx	lr

08025bc6 <_ZN10SideSensor20GetCornerMarkerCountEv>:

uint8_t SideSensor::GetCornerMarkerCount()
{
 8025bc6:	b480      	push	{r7}
 8025bc8:	b083      	sub	sp, #12
 8025bca:	af00      	add	r7, sp, #0
 8025bcc:	6078      	str	r0, [r7, #4]
    return corner_marker_count_;
 8025bce:	687b      	ldr	r3, [r7, #4]
 8025bd0:	795b      	ldrb	r3, [r3, #5]
}
 8025bd2:	4618      	mov	r0, r3
 8025bd4:	370c      	adds	r7, #12
 8025bd6:	46bd      	mov	sp, r7
 8025bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025bdc:	4770      	bx	lr

08025bde <_ZN10SideSensor17GetCrossLineCountEv>:

uint8_t SideSensor::GetCrossLineCount()
{
 8025bde:	b480      	push	{r7}
 8025be0:	b083      	sub	sp, #12
 8025be2:	af00      	add	r7, sp, #0
 8025be4:	6078      	str	r0, [r7, #4]
    return cross_line_count_;
 8025be6:	687b      	ldr	r3, [r7, #4]
 8025be8:	799b      	ldrb	r3, [r3, #6]
}
 8025bea:	4618      	mov	r0, r3
 8025bec:	370c      	adds	r7, #12
 8025bee:	46bd      	mov	sp, r7
 8025bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025bf4:	4770      	bx	lr
	...

08025bf8 <_ZN10SideSensor7MonitorEv>:

#ifdef DEBUG_MODE
void SideSensor::Monitor()
{
 8025bf8:	b480      	push	{r7}
 8025bfa:	b083      	sub	sp, #12
 8025bfc:	af00      	add	r7, sp, #0
 8025bfe:	6078      	str	r0, [r7, #4]
    /* read_state_flags_ */
    g_side_pre_state = (read_state_flags_ & 0xF0) >> 4;
 8025c00:	687b      	ldr	r3, [r7, #4]
 8025c02:	781b      	ldrb	r3, [r3, #0]
 8025c04:	091b      	lsrs	r3, r3, #4
 8025c06:	b2da      	uxtb	r2, r3
 8025c08:	4b3a      	ldr	r3, [pc, #232]	; (8025cf4 <_ZN10SideSensor7MonitorEv+0xfc>)
 8025c0a:	701a      	strb	r2, [r3, #0]
    g_side_now_state =  read_state_flags_ & 0x0F;
 8025c0c:	687b      	ldr	r3, [r7, #4]
 8025c0e:	781b      	ldrb	r3, [r3, #0]
 8025c10:	f003 030f 	and.w	r3, r3, #15
 8025c14:	b2da      	uxtb	r2, r3
 8025c16:	4b38      	ldr	r3, [pc, #224]	; (8025cf8 <_ZN10SideSensor7MonitorEv+0x100>)
 8025c18:	701a      	strb	r2, [r3, #0]

    if(g_side_pre_state != g_side_now_state) g_side_change_state_count++;
 8025c1a:	4b36      	ldr	r3, [pc, #216]	; (8025cf4 <_ZN10SideSensor7MonitorEv+0xfc>)
 8025c1c:	781a      	ldrb	r2, [r3, #0]
 8025c1e:	4b36      	ldr	r3, [pc, #216]	; (8025cf8 <_ZN10SideSensor7MonitorEv+0x100>)
 8025c20:	781b      	ldrb	r3, [r3, #0]
 8025c22:	429a      	cmp	r2, r3
 8025c24:	d004      	beq.n	8025c30 <_ZN10SideSensor7MonitorEv+0x38>
 8025c26:	4b35      	ldr	r3, [pc, #212]	; (8025cfc <_ZN10SideSensor7MonitorEv+0x104>)
 8025c28:	681b      	ldr	r3, [r3, #0]
 8025c2a:	3301      	adds	r3, #1
 8025c2c:	4a33      	ldr	r2, [pc, #204]	; (8025cfc <_ZN10SideSensor7MonitorEv+0x104>)
 8025c2e:	6013      	str	r3, [r2, #0]

    /* write_state_flags_ upper bit */
    g_side_goal_reach   = (write_state_flags_ & 0x80) >> 7;
 8025c30:	687b      	ldr	r3, [r7, #4]
 8025c32:	785b      	ldrb	r3, [r3, #1]
 8025c34:	09db      	lsrs	r3, r3, #7
 8025c36:	b2da      	uxtb	r2, r3
 8025c38:	4b31      	ldr	r3, [pc, #196]	; (8025d00 <_ZN10SideSensor7MonitorEv+0x108>)
 8025c3a:	701a      	strb	r2, [r3, #0]
    g_side_corner_reach = (write_state_flags_ & 0x40) >> 6;
 8025c3c:	687b      	ldr	r3, [r7, #4]
 8025c3e:	785b      	ldrb	r3, [r3, #1]
 8025c40:	119b      	asrs	r3, r3, #6
 8025c42:	b2db      	uxtb	r3, r3
 8025c44:	f003 0301 	and.w	r3, r3, #1
 8025c48:	b2da      	uxtb	r2, r3
 8025c4a:	4b2e      	ldr	r3, [pc, #184]	; (8025d04 <_ZN10SideSensor7MonitorEv+0x10c>)
 8025c4c:	701a      	strb	r2, [r3, #0]
    g_side_cross_reach  = (write_state_flags_ & 0x20) >> 5;
 8025c4e:	687b      	ldr	r3, [r7, #4]
 8025c50:	785b      	ldrb	r3, [r3, #1]
 8025c52:	115b      	asrs	r3, r3, #5
 8025c54:	b2db      	uxtb	r3, r3
 8025c56:	f003 0301 	and.w	r3, r3, #1
 8025c5a:	b2da      	uxtb	r2, r3
 8025c5c:	4b2a      	ldr	r3, [pc, #168]	; (8025d08 <_ZN10SideSensor7MonitorEv+0x110>)
 8025c5e:	701a      	strb	r2, [r3, #0]

    /* write_state_flags_ lower bit */
    g_side_black_flag  = (write_state_flags_ & 0x08) >> 3;
 8025c60:	687b      	ldr	r3, [r7, #4]
 8025c62:	785b      	ldrb	r3, [r3, #1]
 8025c64:	10db      	asrs	r3, r3, #3
 8025c66:	b2db      	uxtb	r3, r3
 8025c68:	f003 0301 	and.w	r3, r3, #1
 8025c6c:	b2da      	uxtb	r2, r3
 8025c6e:	4b27      	ldr	r3, [pc, #156]	; (8025d0c <_ZN10SideSensor7MonitorEv+0x114>)
 8025c70:	701a      	strb	r2, [r3, #0]
    g_side_goal_flag   = (write_state_flags_ & 0x04) >> 2;
 8025c72:	687b      	ldr	r3, [r7, #4]
 8025c74:	785b      	ldrb	r3, [r3, #1]
 8025c76:	109b      	asrs	r3, r3, #2
 8025c78:	b2db      	uxtb	r3, r3
 8025c7a:	f003 0301 	and.w	r3, r3, #1
 8025c7e:	b2da      	uxtb	r2, r3
 8025c80:	4b23      	ldr	r3, [pc, #140]	; (8025d10 <_ZN10SideSensor7MonitorEv+0x118>)
 8025c82:	701a      	strb	r2, [r3, #0]
    g_side_corner_flag = (write_state_flags_ & 0x02) >> 1;
 8025c84:	687b      	ldr	r3, [r7, #4]
 8025c86:	785b      	ldrb	r3, [r3, #1]
 8025c88:	105b      	asrs	r3, r3, #1
 8025c8a:	b2db      	uxtb	r3, r3
 8025c8c:	f003 0301 	and.w	r3, r3, #1
 8025c90:	b2da      	uxtb	r2, r3
 8025c92:	4b20      	ldr	r3, [pc, #128]	; (8025d14 <_ZN10SideSensor7MonitorEv+0x11c>)
 8025c94:	701a      	strb	r2, [r3, #0]
    g_side_cross_flag  =  write_state_flags_ & 0x01;
 8025c96:	687b      	ldr	r3, [r7, #4]
 8025c98:	785b      	ldrb	r3, [r3, #1]
 8025c9a:	f003 0301 	and.w	r3, r3, #1
 8025c9e:	b2da      	uxtb	r2, r3
 8025ca0:	4b1d      	ldr	r3, [pc, #116]	; (8025d18 <_ZN10SideSensor7MonitorEv+0x120>)
 8025ca2:	701a      	strb	r2, [r3, #0]

    /* exception_flags_ */
    g_side_before_noise_state = (exception_flags_ & 0xF0) >> 4;
 8025ca4:	687b      	ldr	r3, [r7, #4]
 8025ca6:	789b      	ldrb	r3, [r3, #2]
 8025ca8:	091b      	lsrs	r3, r3, #4
 8025caa:	b2da      	uxtb	r2, r3
 8025cac:	4b1b      	ldr	r3, [pc, #108]	; (8025d1c <_ZN10SideSensor7MonitorEv+0x124>)
 8025cae:	701a      	strb	r2, [r3, #0]
    g_side_noise_count        = (exception_flags_ & 0x0C) >> 2;
 8025cb0:	687b      	ldr	r3, [r7, #4]
 8025cb2:	789b      	ldrb	r3, [r3, #2]
 8025cb4:	109b      	asrs	r3, r3, #2
 8025cb6:	b2db      	uxtb	r3, r3
 8025cb8:	f003 0303 	and.w	r3, r3, #3
 8025cbc:	b2da      	uxtb	r2, r3
 8025cbe:	4b18      	ldr	r3, [pc, #96]	; (8025d20 <_ZN10SideSensor7MonitorEv+0x128>)
 8025cc0:	701a      	strb	r2, [r3, #0]
    g_side_ignore_flag        =  exception_flags_ & 0x01;
 8025cc2:	687b      	ldr	r3, [r7, #4]
 8025cc4:	789b      	ldrb	r3, [r3, #2]
 8025cc6:	f003 0301 	and.w	r3, r3, #1
 8025cca:	b2da      	uxtb	r2, r3
 8025ccc:	4b15      	ldr	r3, [pc, #84]	; (8025d24 <_ZN10SideSensor7MonitorEv+0x12c>)
 8025cce:	701a      	strb	r2, [r3, #0]

    g_goal_count   = goal_marker_count_;
 8025cd0:	687b      	ldr	r3, [r7, #4]
 8025cd2:	791a      	ldrb	r2, [r3, #4]
 8025cd4:	4b14      	ldr	r3, [pc, #80]	; (8025d28 <_ZN10SideSensor7MonitorEv+0x130>)
 8025cd6:	701a      	strb	r2, [r3, #0]
    g_corner_count = corner_marker_count_;
 8025cd8:	687b      	ldr	r3, [r7, #4]
 8025cda:	795a      	ldrb	r2, [r3, #5]
 8025cdc:	4b13      	ldr	r3, [pc, #76]	; (8025d2c <_ZN10SideSensor7MonitorEv+0x134>)
 8025cde:	701a      	strb	r2, [r3, #0]
    g_cross_count  = cross_line_count_;
 8025ce0:	687b      	ldr	r3, [r7, #4]
 8025ce2:	799a      	ldrb	r2, [r3, #6]
 8025ce4:	4b12      	ldr	r3, [pc, #72]	; (8025d30 <_ZN10SideSensor7MonitorEv+0x138>)
 8025ce6:	701a      	strb	r2, [r3, #0]
}
 8025ce8:	bf00      	nop
 8025cea:	370c      	adds	r7, #12
 8025cec:	46bd      	mov	sp, r7
 8025cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025cf2:	4770      	bx	lr
 8025cf4:	20000250 	.word	0x20000250
 8025cf8:	20000251 	.word	0x20000251
 8025cfc:	20000254 	.word	0x20000254
 8025d00:	20000258 	.word	0x20000258
 8025d04:	20000259 	.word	0x20000259
 8025d08:	2000025a 	.word	0x2000025a
 8025d0c:	2000025b 	.word	0x2000025b
 8025d10:	2000025c 	.word	0x2000025c
 8025d14:	2000025d 	.word	0x2000025d
 8025d18:	2000025e 	.word	0x2000025e
 8025d1c:	2000025f 	.word	0x2000025f
 8025d20:	20000260 	.word	0x20000260
 8025d24:	20000261 	.word	0x20000261
 8025d28:	20000262 	.word	0x20000262
 8025d2c:	20000263 	.word	0x20000263
 8025d30:	20000264 	.word	0x20000264

08025d34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8025d34:	b480      	push	{r7}
 8025d36:	b083      	sub	sp, #12
 8025d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8025d3a:	2300      	movs	r3, #0
 8025d3c:	607b      	str	r3, [r7, #4]
 8025d3e:	4b10      	ldr	r3, [pc, #64]	; (8025d80 <HAL_MspInit+0x4c>)
 8025d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025d42:	4a0f      	ldr	r2, [pc, #60]	; (8025d80 <HAL_MspInit+0x4c>)
 8025d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8025d48:	6453      	str	r3, [r2, #68]	; 0x44
 8025d4a:	4b0d      	ldr	r3, [pc, #52]	; (8025d80 <HAL_MspInit+0x4c>)
 8025d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8025d52:	607b      	str	r3, [r7, #4]
 8025d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8025d56:	2300      	movs	r3, #0
 8025d58:	603b      	str	r3, [r7, #0]
 8025d5a:	4b09      	ldr	r3, [pc, #36]	; (8025d80 <HAL_MspInit+0x4c>)
 8025d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025d5e:	4a08      	ldr	r2, [pc, #32]	; (8025d80 <HAL_MspInit+0x4c>)
 8025d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8025d64:	6413      	str	r3, [r2, #64]	; 0x40
 8025d66:	4b06      	ldr	r3, [pc, #24]	; (8025d80 <HAL_MspInit+0x4c>)
 8025d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8025d6e:	603b      	str	r3, [r7, #0]
 8025d70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8025d72:	bf00      	nop
 8025d74:	370c      	adds	r7, #12
 8025d76:	46bd      	mov	sp, r7
 8025d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025d7c:	4770      	bx	lr
 8025d7e:	bf00      	nop
 8025d80:	40023800 	.word	0x40023800

08025d84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8025d84:	b580      	push	{r7, lr}
 8025d86:	b08a      	sub	sp, #40	; 0x28
 8025d88:	af00      	add	r7, sp, #0
 8025d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025d8c:	f107 0314 	add.w	r3, r7, #20
 8025d90:	2200      	movs	r2, #0
 8025d92:	601a      	str	r2, [r3, #0]
 8025d94:	605a      	str	r2, [r3, #4]
 8025d96:	609a      	str	r2, [r3, #8]
 8025d98:	60da      	str	r2, [r3, #12]
 8025d9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8025d9c:	687b      	ldr	r3, [r7, #4]
 8025d9e:	681b      	ldr	r3, [r3, #0]
 8025da0:	4a3c      	ldr	r2, [pc, #240]	; (8025e94 <HAL_ADC_MspInit+0x110>)
 8025da2:	4293      	cmp	r3, r2
 8025da4:	d171      	bne.n	8025e8a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8025da6:	2300      	movs	r3, #0
 8025da8:	613b      	str	r3, [r7, #16]
 8025daa:	4b3b      	ldr	r3, [pc, #236]	; (8025e98 <HAL_ADC_MspInit+0x114>)
 8025dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025dae:	4a3a      	ldr	r2, [pc, #232]	; (8025e98 <HAL_ADC_MspInit+0x114>)
 8025db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8025db4:	6453      	str	r3, [r2, #68]	; 0x44
 8025db6:	4b38      	ldr	r3, [pc, #224]	; (8025e98 <HAL_ADC_MspInit+0x114>)
 8025db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025dbe:	613b      	str	r3, [r7, #16]
 8025dc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8025dc2:	2300      	movs	r3, #0
 8025dc4:	60fb      	str	r3, [r7, #12]
 8025dc6:	4b34      	ldr	r3, [pc, #208]	; (8025e98 <HAL_ADC_MspInit+0x114>)
 8025dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025dca:	4a33      	ldr	r2, [pc, #204]	; (8025e98 <HAL_ADC_MspInit+0x114>)
 8025dcc:	f043 0304 	orr.w	r3, r3, #4
 8025dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8025dd2:	4b31      	ldr	r3, [pc, #196]	; (8025e98 <HAL_ADC_MspInit+0x114>)
 8025dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025dd6:	f003 0304 	and.w	r3, r3, #4
 8025dda:	60fb      	str	r3, [r7, #12]
 8025ddc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8025dde:	2300      	movs	r3, #0
 8025de0:	60bb      	str	r3, [r7, #8]
 8025de2:	4b2d      	ldr	r3, [pc, #180]	; (8025e98 <HAL_ADC_MspInit+0x114>)
 8025de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025de6:	4a2c      	ldr	r2, [pc, #176]	; (8025e98 <HAL_ADC_MspInit+0x114>)
 8025de8:	f043 0301 	orr.w	r3, r3, #1
 8025dec:	6313      	str	r3, [r2, #48]	; 0x30
 8025dee:	4b2a      	ldr	r3, [pc, #168]	; (8025e98 <HAL_ADC_MspInit+0x114>)
 8025df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025df2:	f003 0301 	and.w	r3, r3, #1
 8025df6:	60bb      	str	r3, [r7, #8]
 8025df8:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8025dfa:	233f      	movs	r3, #63	; 0x3f
 8025dfc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8025dfe:	2303      	movs	r3, #3
 8025e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025e02:	2300      	movs	r3, #0
 8025e04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8025e06:	f107 0314 	add.w	r3, r7, #20
 8025e0a:	4619      	mov	r1, r3
 8025e0c:	4823      	ldr	r0, [pc, #140]	; (8025e9c <HAL_ADC_MspInit+0x118>)
 8025e0e:	f002 f9b1 	bl	8028174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8025e12:	23ff      	movs	r3, #255	; 0xff
 8025e14:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8025e16:	2303      	movs	r3, #3
 8025e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025e1a:	2300      	movs	r3, #0
 8025e1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8025e1e:	f107 0314 	add.w	r3, r7, #20
 8025e22:	4619      	mov	r1, r3
 8025e24:	481e      	ldr	r0, [pc, #120]	; (8025ea0 <HAL_ADC_MspInit+0x11c>)
 8025e26:	f002 f9a5 	bl	8028174 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8025e2a:	4b1e      	ldr	r3, [pc, #120]	; (8025ea4 <HAL_ADC_MspInit+0x120>)
 8025e2c:	4a1e      	ldr	r2, [pc, #120]	; (8025ea8 <HAL_ADC_MspInit+0x124>)
 8025e2e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8025e30:	4b1c      	ldr	r3, [pc, #112]	; (8025ea4 <HAL_ADC_MspInit+0x120>)
 8025e32:	2200      	movs	r2, #0
 8025e34:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8025e36:	4b1b      	ldr	r3, [pc, #108]	; (8025ea4 <HAL_ADC_MspInit+0x120>)
 8025e38:	2200      	movs	r2, #0
 8025e3a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8025e3c:	4b19      	ldr	r3, [pc, #100]	; (8025ea4 <HAL_ADC_MspInit+0x120>)
 8025e3e:	2200      	movs	r2, #0
 8025e40:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8025e42:	4b18      	ldr	r3, [pc, #96]	; (8025ea4 <HAL_ADC_MspInit+0x120>)
 8025e44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8025e48:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8025e4a:	4b16      	ldr	r3, [pc, #88]	; (8025ea4 <HAL_ADC_MspInit+0x120>)
 8025e4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8025e50:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8025e52:	4b14      	ldr	r3, [pc, #80]	; (8025ea4 <HAL_ADC_MspInit+0x120>)
 8025e54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8025e58:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8025e5a:	4b12      	ldr	r3, [pc, #72]	; (8025ea4 <HAL_ADC_MspInit+0x120>)
 8025e5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8025e60:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8025e62:	4b10      	ldr	r3, [pc, #64]	; (8025ea4 <HAL_ADC_MspInit+0x120>)
 8025e64:	2200      	movs	r2, #0
 8025e66:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8025e68:	4b0e      	ldr	r3, [pc, #56]	; (8025ea4 <HAL_ADC_MspInit+0x120>)
 8025e6a:	2200      	movs	r2, #0
 8025e6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8025e6e:	480d      	ldr	r0, [pc, #52]	; (8025ea4 <HAL_ADC_MspInit+0x120>)
 8025e70:	f001 fb3c 	bl	80274ec <HAL_DMA_Init>
 8025e74:	4603      	mov	r3, r0
 8025e76:	2b00      	cmp	r3, #0
 8025e78:	d001      	beq.n	8025e7e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8025e7a:	f7fe facb 	bl	8024414 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8025e7e:	687b      	ldr	r3, [r7, #4]
 8025e80:	4a08      	ldr	r2, [pc, #32]	; (8025ea4 <HAL_ADC_MspInit+0x120>)
 8025e82:	639a      	str	r2, [r3, #56]	; 0x38
 8025e84:	4a07      	ldr	r2, [pc, #28]	; (8025ea4 <HAL_ADC_MspInit+0x120>)
 8025e86:	687b      	ldr	r3, [r7, #4]
 8025e88:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8025e8a:	bf00      	nop
 8025e8c:	3728      	adds	r7, #40	; 0x28
 8025e8e:	46bd      	mov	sp, r7
 8025e90:	bd80      	pop	{r7, pc}
 8025e92:	bf00      	nop
 8025e94:	40012000 	.word	0x40012000
 8025e98:	40023800 	.word	0x40023800
 8025e9c:	40020800 	.word	0x40020800
 8025ea0:	40020000 	.word	0x40020000
 8025ea4:	20000874 	.word	0x20000874
 8025ea8:	40026410 	.word	0x40026410

08025eac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8025eac:	b580      	push	{r7, lr}
 8025eae:	b08a      	sub	sp, #40	; 0x28
 8025eb0:	af00      	add	r7, sp, #0
 8025eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025eb4:	f107 0314 	add.w	r3, r7, #20
 8025eb8:	2200      	movs	r2, #0
 8025eba:	601a      	str	r2, [r3, #0]
 8025ebc:	605a      	str	r2, [r3, #4]
 8025ebe:	609a      	str	r2, [r3, #8]
 8025ec0:	60da      	str	r2, [r3, #12]
 8025ec2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8025ec4:	687b      	ldr	r3, [r7, #4]
 8025ec6:	681b      	ldr	r3, [r3, #0]
 8025ec8:	4a19      	ldr	r2, [pc, #100]	; (8025f30 <HAL_I2C_MspInit+0x84>)
 8025eca:	4293      	cmp	r3, r2
 8025ecc:	d12c      	bne.n	8025f28 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8025ece:	2300      	movs	r3, #0
 8025ed0:	613b      	str	r3, [r7, #16]
 8025ed2:	4b18      	ldr	r3, [pc, #96]	; (8025f34 <HAL_I2C_MspInit+0x88>)
 8025ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025ed6:	4a17      	ldr	r2, [pc, #92]	; (8025f34 <HAL_I2C_MspInit+0x88>)
 8025ed8:	f043 0302 	orr.w	r3, r3, #2
 8025edc:	6313      	str	r3, [r2, #48]	; 0x30
 8025ede:	4b15      	ldr	r3, [pc, #84]	; (8025f34 <HAL_I2C_MspInit+0x88>)
 8025ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025ee2:	f003 0302 	and.w	r3, r3, #2
 8025ee6:	613b      	str	r3, [r7, #16]
 8025ee8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8025eea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8025eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8025ef0:	2312      	movs	r3, #18
 8025ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8025ef4:	2301      	movs	r3, #1
 8025ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8025ef8:	2303      	movs	r3, #3
 8025efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8025efc:	2304      	movs	r3, #4
 8025efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8025f00:	f107 0314 	add.w	r3, r7, #20
 8025f04:	4619      	mov	r1, r3
 8025f06:	480c      	ldr	r0, [pc, #48]	; (8025f38 <HAL_I2C_MspInit+0x8c>)
 8025f08:	f002 f934 	bl	8028174 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8025f0c:	2300      	movs	r3, #0
 8025f0e:	60fb      	str	r3, [r7, #12]
 8025f10:	4b08      	ldr	r3, [pc, #32]	; (8025f34 <HAL_I2C_MspInit+0x88>)
 8025f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025f14:	4a07      	ldr	r2, [pc, #28]	; (8025f34 <HAL_I2C_MspInit+0x88>)
 8025f16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8025f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8025f1c:	4b05      	ldr	r3, [pc, #20]	; (8025f34 <HAL_I2C_MspInit+0x88>)
 8025f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025f20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8025f24:	60fb      	str	r3, [r7, #12]
 8025f26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8025f28:	bf00      	nop
 8025f2a:	3728      	adds	r7, #40	; 0x28
 8025f2c:	46bd      	mov	sp, r7
 8025f2e:	bd80      	pop	{r7, pc}
 8025f30:	40005800 	.word	0x40005800
 8025f34:	40023800 	.word	0x40023800
 8025f38:	40020400 	.word	0x40020400

08025f3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8025f3c:	b580      	push	{r7, lr}
 8025f3e:	b08a      	sub	sp, #40	; 0x28
 8025f40:	af00      	add	r7, sp, #0
 8025f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8025f44:	f107 0314 	add.w	r3, r7, #20
 8025f48:	2200      	movs	r2, #0
 8025f4a:	601a      	str	r2, [r3, #0]
 8025f4c:	605a      	str	r2, [r3, #4]
 8025f4e:	609a      	str	r2, [r3, #8]
 8025f50:	60da      	str	r2, [r3, #12]
 8025f52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8025f54:	687b      	ldr	r3, [r7, #4]
 8025f56:	681b      	ldr	r3, [r3, #0]
 8025f58:	4a19      	ldr	r2, [pc, #100]	; (8025fc0 <HAL_SPI_MspInit+0x84>)
 8025f5a:	4293      	cmp	r3, r2
 8025f5c:	d12c      	bne.n	8025fb8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8025f5e:	2300      	movs	r3, #0
 8025f60:	613b      	str	r3, [r7, #16]
 8025f62:	4b18      	ldr	r3, [pc, #96]	; (8025fc4 <HAL_SPI_MspInit+0x88>)
 8025f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025f66:	4a17      	ldr	r2, [pc, #92]	; (8025fc4 <HAL_SPI_MspInit+0x88>)
 8025f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8025f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8025f6e:	4b15      	ldr	r3, [pc, #84]	; (8025fc4 <HAL_SPI_MspInit+0x88>)
 8025f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025f72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8025f76:	613b      	str	r3, [r7, #16]
 8025f78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8025f7a:	2300      	movs	r3, #0
 8025f7c:	60fb      	str	r3, [r7, #12]
 8025f7e:	4b11      	ldr	r3, [pc, #68]	; (8025fc4 <HAL_SPI_MspInit+0x88>)
 8025f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025f82:	4a10      	ldr	r2, [pc, #64]	; (8025fc4 <HAL_SPI_MspInit+0x88>)
 8025f84:	f043 0304 	orr.w	r3, r3, #4
 8025f88:	6313      	str	r3, [r2, #48]	; 0x30
 8025f8a:	4b0e      	ldr	r3, [pc, #56]	; (8025fc4 <HAL_SPI_MspInit+0x88>)
 8025f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8025f8e:	f003 0304 	and.w	r3, r3, #4
 8025f92:	60fb      	str	r3, [r7, #12]
 8025f94:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8025f96:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8025f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8025f9c:	2302      	movs	r3, #2
 8025f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8025fa0:	2300      	movs	r3, #0
 8025fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8025fa4:	2303      	movs	r3, #3
 8025fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8025fa8:	2306      	movs	r3, #6
 8025faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8025fac:	f107 0314 	add.w	r3, r7, #20
 8025fb0:	4619      	mov	r1, r3
 8025fb2:	4805      	ldr	r0, [pc, #20]	; (8025fc8 <HAL_SPI_MspInit+0x8c>)
 8025fb4:	f002 f8de 	bl	8028174 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8025fb8:	bf00      	nop
 8025fba:	3728      	adds	r7, #40	; 0x28
 8025fbc:	46bd      	mov	sp, r7
 8025fbe:	bd80      	pop	{r7, pc}
 8025fc0:	40003c00 	.word	0x40003c00
 8025fc4:	40023800 	.word	0x40023800
 8025fc8:	40020800 	.word	0x40020800

08025fcc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8025fcc:	b480      	push	{r7}
 8025fce:	b087      	sub	sp, #28
 8025fd0:	af00      	add	r7, sp, #0
 8025fd2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8025fd4:	687b      	ldr	r3, [r7, #4]
 8025fd6:	681b      	ldr	r3, [r3, #0]
 8025fd8:	4a1f      	ldr	r2, [pc, #124]	; (8026058 <HAL_TIM_PWM_MspInit+0x8c>)
 8025fda:	4293      	cmp	r3, r2
 8025fdc:	d10e      	bne.n	8025ffc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8025fde:	2300      	movs	r3, #0
 8025fe0:	617b      	str	r3, [r7, #20]
 8025fe2:	4b1e      	ldr	r3, [pc, #120]	; (802605c <HAL_TIM_PWM_MspInit+0x90>)
 8025fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025fe6:	4a1d      	ldr	r2, [pc, #116]	; (802605c <HAL_TIM_PWM_MspInit+0x90>)
 8025fe8:	f043 0301 	orr.w	r3, r3, #1
 8025fec:	6453      	str	r3, [r2, #68]	; 0x44
 8025fee:	4b1b      	ldr	r3, [pc, #108]	; (802605c <HAL_TIM_PWM_MspInit+0x90>)
 8025ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025ff2:	f003 0301 	and.w	r3, r3, #1
 8025ff6:	617b      	str	r3, [r7, #20]
 8025ff8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8025ffa:	e026      	b.n	802604a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8025ffc:	687b      	ldr	r3, [r7, #4]
 8025ffe:	681b      	ldr	r3, [r3, #0]
 8026000:	4a17      	ldr	r2, [pc, #92]	; (8026060 <HAL_TIM_PWM_MspInit+0x94>)
 8026002:	4293      	cmp	r3, r2
 8026004:	d10e      	bne.n	8026024 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8026006:	2300      	movs	r3, #0
 8026008:	613b      	str	r3, [r7, #16]
 802600a:	4b14      	ldr	r3, [pc, #80]	; (802605c <HAL_TIM_PWM_MspInit+0x90>)
 802600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802600e:	4a13      	ldr	r2, [pc, #76]	; (802605c <HAL_TIM_PWM_MspInit+0x90>)
 8026010:	f043 0302 	orr.w	r3, r3, #2
 8026014:	6413      	str	r3, [r2, #64]	; 0x40
 8026016:	4b11      	ldr	r3, [pc, #68]	; (802605c <HAL_TIM_PWM_MspInit+0x90>)
 8026018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802601a:	f003 0302 	and.w	r3, r3, #2
 802601e:	613b      	str	r3, [r7, #16]
 8026020:	693b      	ldr	r3, [r7, #16]
}
 8026022:	e012      	b.n	802604a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 8026024:	687b      	ldr	r3, [r7, #4]
 8026026:	681b      	ldr	r3, [r3, #0]
 8026028:	4a0e      	ldr	r2, [pc, #56]	; (8026064 <HAL_TIM_PWM_MspInit+0x98>)
 802602a:	4293      	cmp	r3, r2
 802602c:	d10d      	bne.n	802604a <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 802602e:	2300      	movs	r3, #0
 8026030:	60fb      	str	r3, [r7, #12]
 8026032:	4b0a      	ldr	r3, [pc, #40]	; (802605c <HAL_TIM_PWM_MspInit+0x90>)
 8026034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026036:	4a09      	ldr	r2, [pc, #36]	; (802605c <HAL_TIM_PWM_MspInit+0x90>)
 8026038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802603c:	6413      	str	r3, [r2, #64]	; 0x40
 802603e:	4b07      	ldr	r3, [pc, #28]	; (802605c <HAL_TIM_PWM_MspInit+0x90>)
 8026040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8026046:	60fb      	str	r3, [r7, #12]
 8026048:	68fb      	ldr	r3, [r7, #12]
}
 802604a:	bf00      	nop
 802604c:	371c      	adds	r7, #28
 802604e:	46bd      	mov	sp, r7
 8026050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026054:	4770      	bx	lr
 8026056:	bf00      	nop
 8026058:	40010000 	.word	0x40010000
 802605c:	40023800 	.word	0x40023800
 8026060:	40000400 	.word	0x40000400
 8026064:	40001800 	.word	0x40001800

08026068 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8026068:	b580      	push	{r7, lr}
 802606a:	b088      	sub	sp, #32
 802606c:	af00      	add	r7, sp, #0
 802606e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8026070:	687b      	ldr	r3, [r7, #4]
 8026072:	681b      	ldr	r3, [r3, #0]
 8026074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8026078:	d116      	bne.n	80260a8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 802607a:	2300      	movs	r3, #0
 802607c:	61fb      	str	r3, [r7, #28]
 802607e:	4b40      	ldr	r3, [pc, #256]	; (8026180 <HAL_TIM_Base_MspInit+0x118>)
 8026080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026082:	4a3f      	ldr	r2, [pc, #252]	; (8026180 <HAL_TIM_Base_MspInit+0x118>)
 8026084:	f043 0301 	orr.w	r3, r3, #1
 8026088:	6413      	str	r3, [r2, #64]	; 0x40
 802608a:	4b3d      	ldr	r3, [pc, #244]	; (8026180 <HAL_TIM_Base_MspInit+0x118>)
 802608c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802608e:	f003 0301 	and.w	r3, r3, #1
 8026092:	61fb      	str	r3, [r7, #28]
 8026094:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8026096:	2200      	movs	r2, #0
 8026098:	2100      	movs	r1, #0
 802609a:	201c      	movs	r0, #28
 802609c:	f001 f9ef 	bl	802747e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80260a0:	201c      	movs	r0, #28
 80260a2:	f001 fa08 	bl	80274b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80260a6:	e066      	b.n	8026176 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM5)
 80260a8:	687b      	ldr	r3, [r7, #4]
 80260aa:	681b      	ldr	r3, [r3, #0]
 80260ac:	4a35      	ldr	r2, [pc, #212]	; (8026184 <HAL_TIM_Base_MspInit+0x11c>)
 80260ae:	4293      	cmp	r3, r2
 80260b0:	d116      	bne.n	80260e0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80260b2:	2300      	movs	r3, #0
 80260b4:	61bb      	str	r3, [r7, #24]
 80260b6:	4b32      	ldr	r3, [pc, #200]	; (8026180 <HAL_TIM_Base_MspInit+0x118>)
 80260b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80260ba:	4a31      	ldr	r2, [pc, #196]	; (8026180 <HAL_TIM_Base_MspInit+0x118>)
 80260bc:	f043 0308 	orr.w	r3, r3, #8
 80260c0:	6413      	str	r3, [r2, #64]	; 0x40
 80260c2:	4b2f      	ldr	r3, [pc, #188]	; (8026180 <HAL_TIM_Base_MspInit+0x118>)
 80260c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80260c6:	f003 0308 	and.w	r3, r3, #8
 80260ca:	61bb      	str	r3, [r7, #24]
 80260cc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80260ce:	2200      	movs	r2, #0
 80260d0:	2100      	movs	r1, #0
 80260d2:	2032      	movs	r0, #50	; 0x32
 80260d4:	f001 f9d3 	bl	802747e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80260d8:	2032      	movs	r0, #50	; 0x32
 80260da:	f001 f9ec 	bl	80274b6 <HAL_NVIC_EnableIRQ>
}
 80260de:	e04a      	b.n	8026176 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM6)
 80260e0:	687b      	ldr	r3, [r7, #4]
 80260e2:	681b      	ldr	r3, [r3, #0]
 80260e4:	4a28      	ldr	r2, [pc, #160]	; (8026188 <HAL_TIM_Base_MspInit+0x120>)
 80260e6:	4293      	cmp	r3, r2
 80260e8:	d116      	bne.n	8026118 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80260ea:	2300      	movs	r3, #0
 80260ec:	617b      	str	r3, [r7, #20]
 80260ee:	4b24      	ldr	r3, [pc, #144]	; (8026180 <HAL_TIM_Base_MspInit+0x118>)
 80260f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80260f2:	4a23      	ldr	r2, [pc, #140]	; (8026180 <HAL_TIM_Base_MspInit+0x118>)
 80260f4:	f043 0310 	orr.w	r3, r3, #16
 80260f8:	6413      	str	r3, [r2, #64]	; 0x40
 80260fa:	4b21      	ldr	r3, [pc, #132]	; (8026180 <HAL_TIM_Base_MspInit+0x118>)
 80260fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80260fe:	f003 0310 	and.w	r3, r3, #16
 8026102:	617b      	str	r3, [r7, #20]
 8026104:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8026106:	2200      	movs	r2, #0
 8026108:	2100      	movs	r1, #0
 802610a:	2036      	movs	r0, #54	; 0x36
 802610c:	f001 f9b7 	bl	802747e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8026110:	2036      	movs	r0, #54	; 0x36
 8026112:	f001 f9d0 	bl	80274b6 <HAL_NVIC_EnableIRQ>
}
 8026116:	e02e      	b.n	8026176 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 8026118:	687b      	ldr	r3, [r7, #4]
 802611a:	681b      	ldr	r3, [r3, #0]
 802611c:	4a1b      	ldr	r2, [pc, #108]	; (802618c <HAL_TIM_Base_MspInit+0x124>)
 802611e:	4293      	cmp	r3, r2
 8026120:	d116      	bne.n	8026150 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8026122:	2300      	movs	r3, #0
 8026124:	613b      	str	r3, [r7, #16]
 8026126:	4b16      	ldr	r3, [pc, #88]	; (8026180 <HAL_TIM_Base_MspInit+0x118>)
 8026128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802612a:	4a15      	ldr	r2, [pc, #84]	; (8026180 <HAL_TIM_Base_MspInit+0x118>)
 802612c:	f043 0320 	orr.w	r3, r3, #32
 8026130:	6413      	str	r3, [r2, #64]	; 0x40
 8026132:	4b13      	ldr	r3, [pc, #76]	; (8026180 <HAL_TIM_Base_MspInit+0x118>)
 8026134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026136:	f003 0320 	and.w	r3, r3, #32
 802613a:	613b      	str	r3, [r7, #16]
 802613c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 802613e:	2200      	movs	r2, #0
 8026140:	2100      	movs	r1, #0
 8026142:	2037      	movs	r0, #55	; 0x37
 8026144:	f001 f99b 	bl	802747e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8026148:	2037      	movs	r0, #55	; 0x37
 802614a:	f001 f9b4 	bl	80274b6 <HAL_NVIC_EnableIRQ>
}
 802614e:	e012      	b.n	8026176 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 8026150:	687b      	ldr	r3, [r7, #4]
 8026152:	681b      	ldr	r3, [r3, #0]
 8026154:	4a0e      	ldr	r2, [pc, #56]	; (8026190 <HAL_TIM_Base_MspInit+0x128>)
 8026156:	4293      	cmp	r3, r2
 8026158:	d10d      	bne.n	8026176 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 802615a:	2300      	movs	r3, #0
 802615c:	60fb      	str	r3, [r7, #12]
 802615e:	4b08      	ldr	r3, [pc, #32]	; (8026180 <HAL_TIM_Base_MspInit+0x118>)
 8026160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026162:	4a07      	ldr	r2, [pc, #28]	; (8026180 <HAL_TIM_Base_MspInit+0x118>)
 8026164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8026168:	6453      	str	r3, [r2, #68]	; 0x44
 802616a:	4b05      	ldr	r3, [pc, #20]	; (8026180 <HAL_TIM_Base_MspInit+0x118>)
 802616c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802616e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8026172:	60fb      	str	r3, [r7, #12]
 8026174:	68fb      	ldr	r3, [r7, #12]
}
 8026176:	bf00      	nop
 8026178:	3720      	adds	r7, #32
 802617a:	46bd      	mov	sp, r7
 802617c:	bd80      	pop	{r7, pc}
 802617e:	bf00      	nop
 8026180:	40023800 	.word	0x40023800
 8026184:	40000c00 	.word	0x40000c00
 8026188:	40001000 	.word	0x40001000
 802618c:	40001400 	.word	0x40001400
 8026190:	40014800 	.word	0x40014800

08026194 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8026194:	b580      	push	{r7, lr}
 8026196:	b08c      	sub	sp, #48	; 0x30
 8026198:	af00      	add	r7, sp, #0
 802619a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802619c:	f107 031c 	add.w	r3, r7, #28
 80261a0:	2200      	movs	r2, #0
 80261a2:	601a      	str	r2, [r3, #0]
 80261a4:	605a      	str	r2, [r3, #4]
 80261a6:	609a      	str	r2, [r3, #8]
 80261a8:	60da      	str	r2, [r3, #12]
 80261aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80261ac:	687b      	ldr	r3, [r7, #4]
 80261ae:	681b      	ldr	r3, [r3, #0]
 80261b0:	4a32      	ldr	r2, [pc, #200]	; (802627c <HAL_TIM_Encoder_MspInit+0xe8>)
 80261b2:	4293      	cmp	r3, r2
 80261b4:	d12c      	bne.n	8026210 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80261b6:	2300      	movs	r3, #0
 80261b8:	61bb      	str	r3, [r7, #24]
 80261ba:	4b31      	ldr	r3, [pc, #196]	; (8026280 <HAL_TIM_Encoder_MspInit+0xec>)
 80261bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80261be:	4a30      	ldr	r2, [pc, #192]	; (8026280 <HAL_TIM_Encoder_MspInit+0xec>)
 80261c0:	f043 0304 	orr.w	r3, r3, #4
 80261c4:	6413      	str	r3, [r2, #64]	; 0x40
 80261c6:	4b2e      	ldr	r3, [pc, #184]	; (8026280 <HAL_TIM_Encoder_MspInit+0xec>)
 80261c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80261ca:	f003 0304 	and.w	r3, r3, #4
 80261ce:	61bb      	str	r3, [r7, #24]
 80261d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80261d2:	2300      	movs	r3, #0
 80261d4:	617b      	str	r3, [r7, #20]
 80261d6:	4b2a      	ldr	r3, [pc, #168]	; (8026280 <HAL_TIM_Encoder_MspInit+0xec>)
 80261d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80261da:	4a29      	ldr	r2, [pc, #164]	; (8026280 <HAL_TIM_Encoder_MspInit+0xec>)
 80261dc:	f043 0302 	orr.w	r3, r3, #2
 80261e0:	6313      	str	r3, [r2, #48]	; 0x30
 80261e2:	4b27      	ldr	r3, [pc, #156]	; (8026280 <HAL_TIM_Encoder_MspInit+0xec>)
 80261e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80261e6:	f003 0302 	and.w	r3, r3, #2
 80261ea:	617b      	str	r3, [r7, #20]
 80261ec:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80261ee:	23c0      	movs	r3, #192	; 0xc0
 80261f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80261f2:	2302      	movs	r3, #2
 80261f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80261f6:	2300      	movs	r3, #0
 80261f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80261fa:	2300      	movs	r3, #0
 80261fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80261fe:	2302      	movs	r3, #2
 8026200:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8026202:	f107 031c 	add.w	r3, r7, #28
 8026206:	4619      	mov	r1, r3
 8026208:	481e      	ldr	r0, [pc, #120]	; (8026284 <HAL_TIM_Encoder_MspInit+0xf0>)
 802620a:	f001 ffb3 	bl	8028174 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 802620e:	e030      	b.n	8026272 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8026210:	687b      	ldr	r3, [r7, #4]
 8026212:	681b      	ldr	r3, [r3, #0]
 8026214:	4a1c      	ldr	r2, [pc, #112]	; (8026288 <HAL_TIM_Encoder_MspInit+0xf4>)
 8026216:	4293      	cmp	r3, r2
 8026218:	d12b      	bne.n	8026272 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 802621a:	2300      	movs	r3, #0
 802621c:	613b      	str	r3, [r7, #16]
 802621e:	4b18      	ldr	r3, [pc, #96]	; (8026280 <HAL_TIM_Encoder_MspInit+0xec>)
 8026220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026222:	4a17      	ldr	r2, [pc, #92]	; (8026280 <HAL_TIM_Encoder_MspInit+0xec>)
 8026224:	f043 0302 	orr.w	r3, r3, #2
 8026228:	6453      	str	r3, [r2, #68]	; 0x44
 802622a:	4b15      	ldr	r3, [pc, #84]	; (8026280 <HAL_TIM_Encoder_MspInit+0xec>)
 802622c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802622e:	f003 0302 	and.w	r3, r3, #2
 8026232:	613b      	str	r3, [r7, #16]
 8026234:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8026236:	2300      	movs	r3, #0
 8026238:	60fb      	str	r3, [r7, #12]
 802623a:	4b11      	ldr	r3, [pc, #68]	; (8026280 <HAL_TIM_Encoder_MspInit+0xec>)
 802623c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802623e:	4a10      	ldr	r2, [pc, #64]	; (8026280 <HAL_TIM_Encoder_MspInit+0xec>)
 8026240:	f043 0304 	orr.w	r3, r3, #4
 8026244:	6313      	str	r3, [r2, #48]	; 0x30
 8026246:	4b0e      	ldr	r3, [pc, #56]	; (8026280 <HAL_TIM_Encoder_MspInit+0xec>)
 8026248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802624a:	f003 0304 	and.w	r3, r3, #4
 802624e:	60fb      	str	r3, [r7, #12]
 8026250:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8026252:	23c0      	movs	r3, #192	; 0xc0
 8026254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8026256:	2302      	movs	r3, #2
 8026258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802625a:	2300      	movs	r3, #0
 802625c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802625e:	2300      	movs	r3, #0
 8026260:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8026262:	2303      	movs	r3, #3
 8026264:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8026266:	f107 031c 	add.w	r3, r7, #28
 802626a:	4619      	mov	r1, r3
 802626c:	4807      	ldr	r0, [pc, #28]	; (802628c <HAL_TIM_Encoder_MspInit+0xf8>)
 802626e:	f001 ff81 	bl	8028174 <HAL_GPIO_Init>
}
 8026272:	bf00      	nop
 8026274:	3730      	adds	r7, #48	; 0x30
 8026276:	46bd      	mov	sp, r7
 8026278:	bd80      	pop	{r7, pc}
 802627a:	bf00      	nop
 802627c:	40000800 	.word	0x40000800
 8026280:	40023800 	.word	0x40023800
 8026284:	40020400 	.word	0x40020400
 8026288:	40010400 	.word	0x40010400
 802628c:	40020800 	.word	0x40020800

08026290 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8026290:	b580      	push	{r7, lr}
 8026292:	b08c      	sub	sp, #48	; 0x30
 8026294:	af00      	add	r7, sp, #0
 8026296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8026298:	f107 031c 	add.w	r3, r7, #28
 802629c:	2200      	movs	r2, #0
 802629e:	601a      	str	r2, [r3, #0]
 80262a0:	605a      	str	r2, [r3, #4]
 80262a2:	609a      	str	r2, [r3, #8]
 80262a4:	60da      	str	r2, [r3, #12]
 80262a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80262a8:	687b      	ldr	r3, [r7, #4]
 80262aa:	681b      	ldr	r3, [r3, #0]
 80262ac:	4a59      	ldr	r2, [pc, #356]	; (8026414 <HAL_TIM_MspPostInit+0x184>)
 80262ae:	4293      	cmp	r3, r2
 80262b0:	d11f      	bne.n	80262f2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80262b2:	2300      	movs	r3, #0
 80262b4:	61bb      	str	r3, [r7, #24]
 80262b6:	4b58      	ldr	r3, [pc, #352]	; (8026418 <HAL_TIM_MspPostInit+0x188>)
 80262b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80262ba:	4a57      	ldr	r2, [pc, #348]	; (8026418 <HAL_TIM_MspPostInit+0x188>)
 80262bc:	f043 0301 	orr.w	r3, r3, #1
 80262c0:	6313      	str	r3, [r2, #48]	; 0x30
 80262c2:	4b55      	ldr	r3, [pc, #340]	; (8026418 <HAL_TIM_MspPostInit+0x188>)
 80262c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80262c6:	f003 0301 	and.w	r3, r3, #1
 80262ca:	61bb      	str	r3, [r7, #24]
 80262cc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80262ce:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80262d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80262d4:	2302      	movs	r3, #2
 80262d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80262d8:	2300      	movs	r3, #0
 80262da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80262dc:	2300      	movs	r3, #0
 80262de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80262e0:	2301      	movs	r3, #1
 80262e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80262e4:	f107 031c 	add.w	r3, r7, #28
 80262e8:	4619      	mov	r1, r3
 80262ea:	484c      	ldr	r0, [pc, #304]	; (802641c <HAL_TIM_MspPostInit+0x18c>)
 80262ec:	f001 ff42 	bl	8028174 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80262f0:	e08b      	b.n	802640a <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM3)
 80262f2:	687b      	ldr	r3, [r7, #4]
 80262f4:	681b      	ldr	r3, [r3, #0]
 80262f6:	4a4a      	ldr	r2, [pc, #296]	; (8026420 <HAL_TIM_MspPostInit+0x190>)
 80262f8:	4293      	cmp	r3, r2
 80262fa:	d13d      	bne.n	8026378 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80262fc:	2300      	movs	r3, #0
 80262fe:	617b      	str	r3, [r7, #20]
 8026300:	4b45      	ldr	r3, [pc, #276]	; (8026418 <HAL_TIM_MspPostInit+0x188>)
 8026302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026304:	4a44      	ldr	r2, [pc, #272]	; (8026418 <HAL_TIM_MspPostInit+0x188>)
 8026306:	f043 0304 	orr.w	r3, r3, #4
 802630a:	6313      	str	r3, [r2, #48]	; 0x30
 802630c:	4b42      	ldr	r3, [pc, #264]	; (8026418 <HAL_TIM_MspPostInit+0x188>)
 802630e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026310:	f003 0304 	and.w	r3, r3, #4
 8026314:	617b      	str	r3, [r7, #20]
 8026316:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8026318:	2300      	movs	r3, #0
 802631a:	613b      	str	r3, [r7, #16]
 802631c:	4b3e      	ldr	r3, [pc, #248]	; (8026418 <HAL_TIM_MspPostInit+0x188>)
 802631e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026320:	4a3d      	ldr	r2, [pc, #244]	; (8026418 <HAL_TIM_MspPostInit+0x188>)
 8026322:	f043 0302 	orr.w	r3, r3, #2
 8026326:	6313      	str	r3, [r2, #48]	; 0x30
 8026328:	4b3b      	ldr	r3, [pc, #236]	; (8026418 <HAL_TIM_MspPostInit+0x188>)
 802632a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802632c:	f003 0302 	and.w	r3, r3, #2
 8026330:	613b      	str	r3, [r7, #16]
 8026332:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8026334:	f44f 7340 	mov.w	r3, #768	; 0x300
 8026338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802633a:	2302      	movs	r3, #2
 802633c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802633e:	2300      	movs	r3, #0
 8026340:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8026342:	2300      	movs	r3, #0
 8026344:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8026346:	2302      	movs	r3, #2
 8026348:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802634a:	f107 031c 	add.w	r3, r7, #28
 802634e:	4619      	mov	r1, r3
 8026350:	4834      	ldr	r0, [pc, #208]	; (8026424 <HAL_TIM_MspPostInit+0x194>)
 8026352:	f001 ff0f 	bl	8028174 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8026356:	2330      	movs	r3, #48	; 0x30
 8026358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802635a:	2302      	movs	r3, #2
 802635c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802635e:	2300      	movs	r3, #0
 8026360:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8026362:	2300      	movs	r3, #0
 8026364:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8026366:	2302      	movs	r3, #2
 8026368:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802636a:	f107 031c 	add.w	r3, r7, #28
 802636e:	4619      	mov	r1, r3
 8026370:	482d      	ldr	r0, [pc, #180]	; (8026428 <HAL_TIM_MspPostInit+0x198>)
 8026372:	f001 feff 	bl	8028174 <HAL_GPIO_Init>
}
 8026376:	e048      	b.n	802640a <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM11)
 8026378:	687b      	ldr	r3, [r7, #4]
 802637a:	681b      	ldr	r3, [r3, #0]
 802637c:	4a2b      	ldr	r2, [pc, #172]	; (802642c <HAL_TIM_MspPostInit+0x19c>)
 802637e:	4293      	cmp	r3, r2
 8026380:	d11f      	bne.n	80263c2 <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8026382:	2300      	movs	r3, #0
 8026384:	60fb      	str	r3, [r7, #12]
 8026386:	4b24      	ldr	r3, [pc, #144]	; (8026418 <HAL_TIM_MspPostInit+0x188>)
 8026388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802638a:	4a23      	ldr	r2, [pc, #140]	; (8026418 <HAL_TIM_MspPostInit+0x188>)
 802638c:	f043 0302 	orr.w	r3, r3, #2
 8026390:	6313      	str	r3, [r2, #48]	; 0x30
 8026392:	4b21      	ldr	r3, [pc, #132]	; (8026418 <HAL_TIM_MspPostInit+0x188>)
 8026394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026396:	f003 0302 	and.w	r3, r3, #2
 802639a:	60fb      	str	r3, [r7, #12]
 802639c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 802639e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80263a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80263a4:	2302      	movs	r3, #2
 80263a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80263a8:	2300      	movs	r3, #0
 80263aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80263ac:	2300      	movs	r3, #0
 80263ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80263b0:	2303      	movs	r3, #3
 80263b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80263b4:	f107 031c 	add.w	r3, r7, #28
 80263b8:	4619      	mov	r1, r3
 80263ba:	481b      	ldr	r0, [pc, #108]	; (8026428 <HAL_TIM_MspPostInit+0x198>)
 80263bc:	f001 feda 	bl	8028174 <HAL_GPIO_Init>
}
 80263c0:	e023      	b.n	802640a <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM12)
 80263c2:	687b      	ldr	r3, [r7, #4]
 80263c4:	681b      	ldr	r3, [r3, #0]
 80263c6:	4a1a      	ldr	r2, [pc, #104]	; (8026430 <HAL_TIM_MspPostInit+0x1a0>)
 80263c8:	4293      	cmp	r3, r2
 80263ca:	d11e      	bne.n	802640a <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80263cc:	2300      	movs	r3, #0
 80263ce:	60bb      	str	r3, [r7, #8]
 80263d0:	4b11      	ldr	r3, [pc, #68]	; (8026418 <HAL_TIM_MspPostInit+0x188>)
 80263d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80263d4:	4a10      	ldr	r2, [pc, #64]	; (8026418 <HAL_TIM_MspPostInit+0x188>)
 80263d6:	f043 0302 	orr.w	r3, r3, #2
 80263da:	6313      	str	r3, [r2, #48]	; 0x30
 80263dc:	4b0e      	ldr	r3, [pc, #56]	; (8026418 <HAL_TIM_MspPostInit+0x188>)
 80263de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80263e0:	f003 0302 	and.w	r3, r3, #2
 80263e4:	60bb      	str	r3, [r7, #8]
 80263e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80263e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80263ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80263ee:	2302      	movs	r3, #2
 80263f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80263f2:	2300      	movs	r3, #0
 80263f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80263f6:	2300      	movs	r3, #0
 80263f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80263fa:	2309      	movs	r3, #9
 80263fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80263fe:	f107 031c 	add.w	r3, r7, #28
 8026402:	4619      	mov	r1, r3
 8026404:	4808      	ldr	r0, [pc, #32]	; (8026428 <HAL_TIM_MspPostInit+0x198>)
 8026406:	f001 feb5 	bl	8028174 <HAL_GPIO_Init>
}
 802640a:	bf00      	nop
 802640c:	3730      	adds	r7, #48	; 0x30
 802640e:	46bd      	mov	sp, r7
 8026410:	bd80      	pop	{r7, pc}
 8026412:	bf00      	nop
 8026414:	40010000 	.word	0x40010000
 8026418:	40023800 	.word	0x40023800
 802641c:	40020000 	.word	0x40020000
 8026420:	40000400 	.word	0x40000400
 8026424:	40020800 	.word	0x40020800
 8026428:	40020400 	.word	0x40020400
 802642c:	40014800 	.word	0x40014800
 8026430:	40001800 	.word	0x40001800

08026434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8026434:	b480      	push	{r7}
 8026436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8026438:	e7fe      	b.n	8026438 <NMI_Handler+0x4>

0802643a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 802643a:	b480      	push	{r7}
 802643c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 802643e:	e7fe      	b.n	802643e <HardFault_Handler+0x4>

08026440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8026440:	b480      	push	{r7}
 8026442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8026444:	e7fe      	b.n	8026444 <MemManage_Handler+0x4>

08026446 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8026446:	b480      	push	{r7}
 8026448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 802644a:	e7fe      	b.n	802644a <BusFault_Handler+0x4>

0802644c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 802644c:	b480      	push	{r7}
 802644e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8026450:	e7fe      	b.n	8026450 <UsageFault_Handler+0x4>

08026452 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8026452:	b480      	push	{r7}
 8026454:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8026456:	bf00      	nop
 8026458:	46bd      	mov	sp, r7
 802645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802645e:	4770      	bx	lr

08026460 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8026460:	b480      	push	{r7}
 8026462:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8026464:	bf00      	nop
 8026466:	46bd      	mov	sp, r7
 8026468:	f85d 7b04 	ldr.w	r7, [sp], #4
 802646c:	4770      	bx	lr

0802646e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 802646e:	b480      	push	{r7}
 8026470:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8026472:	bf00      	nop
 8026474:	46bd      	mov	sp, r7
 8026476:	f85d 7b04 	ldr.w	r7, [sp], #4
 802647a:	4770      	bx	lr

0802647c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 802647c:	b580      	push	{r7, lr}
 802647e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8026480:	f000 faec 	bl	8026a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8026484:	bf00      	nop
 8026486:	bd80      	pop	{r7, pc}

08026488 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8026488:	b580      	push	{r7, lr}
 802648a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 802648c:	4802      	ldr	r0, [pc, #8]	; (8026498 <TIM2_IRQHandler+0x10>)
 802648e:	f003 fc72 	bl	8029d76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8026492:	bf00      	nop
 8026494:	bd80      	pop	{r7, pc}
 8026496:	bf00      	nop
 8026498:	20000954 	.word	0x20000954

0802649c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 802649c:	b580      	push	{r7, lr}
 802649e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80264a0:	4802      	ldr	r0, [pc, #8]	; (80264ac <TIM5_IRQHandler+0x10>)
 80264a2:	f003 fc68 	bl	8029d76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80264a6:	bf00      	nop
 80264a8:	bd80      	pop	{r7, pc}
 80264aa:	bf00      	nop
 80264ac:	20000714 	.word	0x20000714

080264b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80264b0:	b580      	push	{r7, lr}
 80264b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80264b4:	4802      	ldr	r0, [pc, #8]	; (80264c0 <TIM6_DAC_IRQHandler+0x10>)
 80264b6:	f003 fc5e 	bl	8029d76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80264ba:	bf00      	nop
 80264bc:	bd80      	pop	{r7, pc}
 80264be:	bf00      	nop
 80264c0:	200008d4 	.word	0x200008d4

080264c4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80264c4:	b580      	push	{r7, lr}
 80264c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80264c8:	4802      	ldr	r0, [pc, #8]	; (80264d4 <TIM7_IRQHandler+0x10>)
 80264ca:	f003 fc54 	bl	8029d76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80264ce:	bf00      	nop
 80264d0:	bd80      	pop	{r7, pc}
 80264d2:	bf00      	nop
 80264d4:	200009d4 	.word	0x200009d4

080264d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80264d8:	b580      	push	{r7, lr}
 80264da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80264dc:	4802      	ldr	r0, [pc, #8]	; (80264e8 <DMA2_Stream0_IRQHandler+0x10>)
 80264de:	f001 f90b 	bl	80276f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80264e2:	bf00      	nop
 80264e4:	bd80      	pop	{r7, pc}
 80264e6:	bf00      	nop
 80264e8:	20000874 	.word	0x20000874

080264ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80264ec:	b480      	push	{r7}
 80264ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80264f0:	4b08      	ldr	r3, [pc, #32]	; (8026514 <SystemInit+0x28>)
 80264f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80264f6:	4a07      	ldr	r2, [pc, #28]	; (8026514 <SystemInit+0x28>)
 80264f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80264fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8026500:	4b04      	ldr	r3, [pc, #16]	; (8026514 <SystemInit+0x28>)
 8026502:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8026506:	609a      	str	r2, [r3, #8]
#endif
}
 8026508:	bf00      	nop
 802650a:	46bd      	mov	sp, r7
 802650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026510:	4770      	bx	lr
 8026512:	bf00      	nop
 8026514:	e000ed00 	.word	0xe000ed00

08026518 <_ZN15VelocityControlC1EP7Encoder>:
#include "velocity_control.hpp"
#include "declare_extern.h"

VelocityControl::VelocityControl(Encoder *encoder) : integral_error_(0)
 8026518:	b480      	push	{r7}
 802651a:	b083      	sub	sp, #12
 802651c:	af00      	add	r7, sp, #0
 802651e:	6078      	str	r0, [r7, #4]
 8026520:	6039      	str	r1, [r7, #0]
 8026522:	687b      	ldr	r3, [r7, #4]
 8026524:	f04f 0200 	mov.w	r2, #0
 8026528:	601a      	str	r2, [r3, #0]
{
    encoder_ = encoder;
 802652a:	687b      	ldr	r3, [r7, #4]
 802652c:	683a      	ldr	r2, [r7, #0]
 802652e:	605a      	str	r2, [r3, #4]
}
 8026530:	687b      	ldr	r3, [r7, #4]
 8026532:	4618      	mov	r0, r3
 8026534:	370c      	adds	r7, #12
 8026536:	46bd      	mov	sp, r7
 8026538:	f85d 7b04 	ldr.w	r7, [sp], #4
 802653c:	4770      	bx	lr

0802653e <_ZN15VelocityControl16DeterminePidGainEf>:

float VelocityControl::DeterminePidGain(float target_velocity)
{
 802653e:	b580      	push	{r7, lr}
 8026540:	b086      	sub	sp, #24
 8026542:	af00      	add	r7, sp, #0
 8026544:	6078      	str	r0, [r7, #4]
 8026546:	ed87 0a00 	vstr	s0, [r7]
    float p_gain = 0, i_gain = 0, d_gain = 0;
 802654a:	f04f 0300 	mov.w	r3, #0
 802654e:	617b      	str	r3, [r7, #20]
 8026550:	f04f 0300 	mov.w	r3, #0
 8026554:	613b      	str	r3, [r7, #16]
 8026556:	f04f 0300 	mov.w	r3, #0
 802655a:	60fb      	str	r3, [r7, #12]

    if(target_velocity < MAX_VELOCITY)
 802655c:	edd7 7a00 	vldr	s15, [r7]
 8026560:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8026564:	eef4 7ac7 	vcmpe.f32	s15, s14
 8026568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802656c:	d509      	bpl.n	8026582 <_ZN15VelocityControl16DeterminePidGainEf+0x44>
    {
        p_gain = VELOCITY_P_GAIN;
 802656e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8026572:	617b      	str	r3, [r7, #20]
        i_gain = VELOCITY_I_GAIN;
 8026574:	f04f 0300 	mov.w	r3, #0
 8026578:	613b      	str	r3, [r7, #16]
        d_gain = VELOCITY_D_GAIN;
 802657a:	f04f 0300 	mov.w	r3, #0
 802657e:	60fb      	str	r3, [r7, #12]
 8026580:	e008      	b.n	8026594 <_ZN15VelocityControl16DeterminePidGainEf+0x56>
    }
    else // Error handler
    {
        p_gain = 0;
 8026582:	f04f 0300 	mov.w	r3, #0
 8026586:	617b      	str	r3, [r7, #20]
        i_gain = 0;
 8026588:	f04f 0300 	mov.w	r3, #0
 802658c:	613b      	str	r3, [r7, #16]
        d_gain = 0;
 802658e:	f04f 0300 	mov.w	r3, #0
 8026592:	60fb      	str	r3, [r7, #12]
    }

    return PidControl(target_velocity, p_gain, i_gain, d_gain);
 8026594:	edd7 1a03 	vldr	s3, [r7, #12]
 8026598:	ed97 1a04 	vldr	s2, [r7, #16]
 802659c:	edd7 0a05 	vldr	s1, [r7, #20]
 80265a0:	ed97 0a00 	vldr	s0, [r7]
 80265a4:	6878      	ldr	r0, [r7, #4]
 80265a6:	f000 f807 	bl	80265b8 <_ZN15VelocityControl10PidControlEffff>
 80265aa:	eef0 7a40 	vmov.f32	s15, s0
}
 80265ae:	eeb0 0a67 	vmov.f32	s0, s15
 80265b2:	3718      	adds	r7, #24
 80265b4:	46bd      	mov	sp, r7
 80265b6:	bd80      	pop	{r7, pc}

080265b8 <_ZN15VelocityControl10PidControlEffff>:

float VelocityControl::PidControl(float target, float p_gain, float i_gain, float d_gain)
{
 80265b8:	b5b0      	push	{r4, r5, r7, lr}
 80265ba:	b08e      	sub	sp, #56	; 0x38
 80265bc:	af00      	add	r7, sp, #0
 80265be:	6178      	str	r0, [r7, #20]
 80265c0:	ed87 0a04 	vstr	s0, [r7, #16]
 80265c4:	edc7 0a03 	vstr	s1, [r7, #12]
 80265c8:	ed87 1a02 	vstr	s2, [r7, #8]
 80265cc:	edc7 1a01 	vstr	s3, [r7, #4]
    float current = encoder_->GetDistance() / TIM6_PERIOD; // [mm/ms]
 80265d0:	697b      	ldr	r3, [r7, #20]
 80265d2:	685b      	ldr	r3, [r3, #4]
 80265d4:	4618      	mov	r0, r3
 80265d6:	f7fa fc79 	bl	8020ecc <_ZN7Encoder11GetDistanceEv>
 80265da:	eef0 6a40 	vmov.f32	s13, s0
 80265de:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 80265e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80265e6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    static float pre_filter = 0.0;
    float filter = pre_filter * (1.0 - VELOCITY_LPF_RATIO) + (current * VELOCITY_LPF_RATIO);
 80265ea:	4b71      	ldr	r3, [pc, #452]	; (80267b0 <_ZN15VelocityControl10PidControlEffff+0x1f8>)
 80265ec:	681b      	ldr	r3, [r3, #0]
 80265ee:	4618      	mov	r0, r3
 80265f0:	f7f9 fe8a 	bl	8020308 <__aeabi_f2d>
 80265f4:	a368      	add	r3, pc, #416	; (adr r3, 8026798 <_ZN15VelocityControl10PidControlEffff+0x1e0>)
 80265f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80265fa:	f7f9 fedd 	bl	80203b8 <__aeabi_dmul>
 80265fe:	4603      	mov	r3, r0
 8026600:	460c      	mov	r4, r1
 8026602:	4625      	mov	r5, r4
 8026604:	461c      	mov	r4, r3
 8026606:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8026608:	f7f9 fe7e 	bl	8020308 <__aeabi_f2d>
 802660c:	a364      	add	r3, pc, #400	; (adr r3, 80267a0 <_ZN15VelocityControl10PidControlEffff+0x1e8>)
 802660e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026612:	f7f9 fed1 	bl	80203b8 <__aeabi_dmul>
 8026616:	4602      	mov	r2, r0
 8026618:	460b      	mov	r3, r1
 802661a:	4620      	mov	r0, r4
 802661c:	4629      	mov	r1, r5
 802661e:	f7f9 fd15 	bl	802004c <__adddf3>
 8026622:	4603      	mov	r3, r0
 8026624:	460c      	mov	r4, r1
 8026626:	4618      	mov	r0, r3
 8026628:	4621      	mov	r1, r4
 802662a:	f7fa f95f 	bl	80208ec <__aeabi_d2f>
 802662e:	4603      	mov	r3, r0
 8026630:	633b      	str	r3, [r7, #48]	; 0x30
    pre_filter = filter;
 8026632:	4a5f      	ldr	r2, [pc, #380]	; (80267b0 <_ZN15VelocityControl10PidControlEffff+0x1f8>)
 8026634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026636:	6013      	str	r3, [r2, #0]

    float error = target - filter;
 8026638:	ed97 7a04 	vldr	s14, [r7, #16]
 802663c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8026640:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026644:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    static float pre_error = error;
 8026648:	4b5a      	ldr	r3, [pc, #360]	; (80267b4 <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 802664a:	781b      	ldrb	r3, [r3, #0]
 802664c:	f3bf 8f5b 	dmb	ish
 8026650:	b2db      	uxtb	r3, r3
 8026652:	f003 0301 	and.w	r3, r3, #1
 8026656:	2b00      	cmp	r3, #0
 8026658:	bf0c      	ite	eq
 802665a:	2301      	moveq	r3, #1
 802665c:	2300      	movne	r3, #0
 802665e:	b2db      	uxtb	r3, r3
 8026660:	2b00      	cmp	r3, #0
 8026662:	d010      	beq.n	8026686 <_ZN15VelocityControl10PidControlEffff+0xce>
 8026664:	4853      	ldr	r0, [pc, #332]	; (80267b4 <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8026666:	f004 fa27 	bl	802aab8 <__cxa_guard_acquire>
 802666a:	4603      	mov	r3, r0
 802666c:	2b00      	cmp	r3, #0
 802666e:	bf14      	ite	ne
 8026670:	2301      	movne	r3, #1
 8026672:	2300      	moveq	r3, #0
 8026674:	b2db      	uxtb	r3, r3
 8026676:	2b00      	cmp	r3, #0
 8026678:	d005      	beq.n	8026686 <_ZN15VelocityControl10PidControlEffff+0xce>
 802667a:	4a4f      	ldr	r2, [pc, #316]	; (80267b8 <_ZN15VelocityControl10PidControlEffff+0x200>)
 802667c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802667e:	6013      	str	r3, [r2, #0]
 8026680:	484c      	ldr	r0, [pc, #304]	; (80267b4 <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8026682:	f004 fa25 	bl	802aad0 <__cxa_guard_release>

    float differential_error = (error - pre_error) / TIM6_PERIOD_S;
 8026686:	4b4c      	ldr	r3, [pc, #304]	; (80267b8 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8026688:	edd3 7a00 	vldr	s15, [r3]
 802668c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8026690:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026694:	ee17 0a90 	vmov	r0, s15
 8026698:	f7f9 fe36 	bl	8020308 <__aeabi_f2d>
 802669c:	a342      	add	r3, pc, #264	; (adr r3, 80267a8 <_ZN15VelocityControl10PidControlEffff+0x1f0>)
 802669e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80266a2:	f7f9 ffb3 	bl	802060c <__aeabi_ddiv>
 80266a6:	4603      	mov	r3, r0
 80266a8:	460c      	mov	r4, r1
 80266aa:	4618      	mov	r0, r3
 80266ac:	4621      	mov	r1, r4
 80266ae:	f7fa f91d 	bl	80208ec <__aeabi_d2f>
 80266b2:	4603      	mov	r3, r0
 80266b4:	62bb      	str	r3, [r7, #40]	; 0x28
    float integral_error = (error + pre_error) / 2.0 * TIM6_PERIOD_S;
 80266b6:	4b40      	ldr	r3, [pc, #256]	; (80267b8 <_ZN15VelocityControl10PidControlEffff+0x200>)
 80266b8:	ed93 7a00 	vldr	s14, [r3]
 80266bc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80266c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80266c4:	ee17 0a90 	vmov	r0, s15
 80266c8:	f7f9 fe1e 	bl	8020308 <__aeabi_f2d>
 80266cc:	f04f 0200 	mov.w	r2, #0
 80266d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80266d4:	f7f9 ff9a 	bl	802060c <__aeabi_ddiv>
 80266d8:	4603      	mov	r3, r0
 80266da:	460c      	mov	r4, r1
 80266dc:	4618      	mov	r0, r3
 80266de:	4621      	mov	r1, r4
 80266e0:	a331      	add	r3, pc, #196	; (adr r3, 80267a8 <_ZN15VelocityControl10PidControlEffff+0x1f0>)
 80266e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80266e6:	f7f9 fe67 	bl	80203b8 <__aeabi_dmul>
 80266ea:	4603      	mov	r3, r0
 80266ec:	460c      	mov	r4, r1
 80266ee:	4618      	mov	r0, r3
 80266f0:	4621      	mov	r1, r4
 80266f2:	f7fa f8fb 	bl	80208ec <__aeabi_d2f>
 80266f6:	4603      	mov	r3, r0
 80266f8:	627b      	str	r3, [r7, #36]	; 0x24
    SetIntegralError(integral_error);
 80266fa:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80266fe:	6978      	ldr	r0, [r7, #20]
 8026700:	f000 f870 	bl	80267e4 <_ZN15VelocityControl16SetIntegralErrorEf>
    pre_error = error;
 8026704:	4a2c      	ldr	r2, [pc, #176]	; (80267b8 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8026706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026708:	6013      	str	r3, [r2, #0]

    float p = p_gain * error;
 802670a:	ed97 7a03 	vldr	s14, [r7, #12]
 802670e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8026712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8026716:	edc7 7a08 	vstr	s15, [r7, #32]
    float d = d_gain * differential_error;
 802671a:	ed97 7a01 	vldr	s14, [r7, #4]
 802671e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8026722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8026726:	edc7 7a07 	vstr	s15, [r7, #28]
    float i = i_gain * integral_error_;
 802672a:	697b      	ldr	r3, [r7, #20]
 802672c:	edd3 7a00 	vldr	s15, [r3]
 8026730:	ed97 7a02 	vldr	s14, [r7, #8]
 8026734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8026738:	edc7 7a06 	vstr	s15, [r7, #24]

#ifdef DEBUG_MODE
    g_target_velocity  = target;
 802673c:	4a1f      	ldr	r2, [pc, #124]	; (80267bc <_ZN15VelocityControl10PidControlEffff+0x204>)
 802673e:	693b      	ldr	r3, [r7, #16]
 8026740:	6013      	str	r3, [r2, #0]
    g_current_velocity = current;
 8026742:	4a1f      	ldr	r2, [pc, #124]	; (80267c0 <_ZN15VelocityControl10PidControlEffff+0x208>)
 8026744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026746:	6013      	str	r3, [r2, #0]
    g_filter_velocity  = filter;
 8026748:	4a1e      	ldr	r2, [pc, #120]	; (80267c4 <_ZN15VelocityControl10PidControlEffff+0x20c>)
 802674a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802674c:	6013      	str	r3, [r2, #0]
    g_velocity_error   = error;
 802674e:	4a1e      	ldr	r2, [pc, #120]	; (80267c8 <_ZN15VelocityControl10PidControlEffff+0x210>)
 8026750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026752:	6013      	str	r3, [r2, #0]
    g_velocity_p = p;       g_velocity_d = d;       g_velocity_i = i;
 8026754:	4a1d      	ldr	r2, [pc, #116]	; (80267cc <_ZN15VelocityControl10PidControlEffff+0x214>)
 8026756:	6a3b      	ldr	r3, [r7, #32]
 8026758:	6013      	str	r3, [r2, #0]
 802675a:	4a1d      	ldr	r2, [pc, #116]	; (80267d0 <_ZN15VelocityControl10PidControlEffff+0x218>)
 802675c:	69fb      	ldr	r3, [r7, #28]
 802675e:	6013      	str	r3, [r2, #0]
 8026760:	4a1c      	ldr	r2, [pc, #112]	; (80267d4 <_ZN15VelocityControl10PidControlEffff+0x21c>)
 8026762:	69bb      	ldr	r3, [r7, #24]
 8026764:	6013      	str	r3, [r2, #0]
    g_velocity_p_gain = p;  g_velocity_d_gain = p;  g_velocity_i_gain = p;
 8026766:	4a1c      	ldr	r2, [pc, #112]	; (80267d8 <_ZN15VelocityControl10PidControlEffff+0x220>)
 8026768:	6a3b      	ldr	r3, [r7, #32]
 802676a:	6013      	str	r3, [r2, #0]
 802676c:	4a1b      	ldr	r2, [pc, #108]	; (80267dc <_ZN15VelocityControl10PidControlEffff+0x224>)
 802676e:	6a3b      	ldr	r3, [r7, #32]
 8026770:	6013      	str	r3, [r2, #0]
 8026772:	4a1b      	ldr	r2, [pc, #108]	; (80267e0 <_ZN15VelocityControl10PidControlEffff+0x228>)
 8026774:	6a3b      	ldr	r3, [r7, #32]
 8026776:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    return p + d + i;
 8026778:	ed97 7a08 	vldr	s14, [r7, #32]
 802677c:	edd7 7a07 	vldr	s15, [r7, #28]
 8026780:	ee37 7a27 	vadd.f32	s14, s14, s15
 8026784:	edd7 7a06 	vldr	s15, [r7, #24]
 8026788:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 802678c:	eeb0 0a67 	vmov.f32	s0, s15
 8026790:	3738      	adds	r7, #56	; 0x38
 8026792:	46bd      	mov	sp, r7
 8026794:	bdb0      	pop	{r4, r5, r7, pc}
 8026796:	bf00      	nop
 8026798:	33333334 	.word	0x33333334
 802679c:	3fd33333 	.word	0x3fd33333
 80267a0:	66666666 	.word	0x66666666
 80267a4:	3fe66666 	.word	0x3fe66666
 80267a8:	47ae147b 	.word	0x47ae147b
 80267ac:	3f547ae1 	.word	0x3f547ae1
 80267b0:	20000300 	.word	0x20000300
 80267b4:	20000308 	.word	0x20000308
 80267b8:	20000304 	.word	0x20000304
 80267bc:	200002b4 	.word	0x200002b4
 80267c0:	200002b8 	.word	0x200002b8
 80267c4:	200002bc 	.word	0x200002bc
 80267c8:	200002c0 	.word	0x200002c0
 80267cc:	200002c4 	.word	0x200002c4
 80267d0:	200002cc 	.word	0x200002cc
 80267d4:	200002c8 	.word	0x200002c8
 80267d8:	200002d0 	.word	0x200002d0
 80267dc:	200002d8 	.word	0x200002d8
 80267e0:	200002d4 	.word	0x200002d4

080267e4 <_ZN15VelocityControl16SetIntegralErrorEf>:

void VelocityControl::SetIntegralError(float integral_error)
{
 80267e4:	b480      	push	{r7}
 80267e6:	b083      	sub	sp, #12
 80267e8:	af00      	add	r7, sp, #0
 80267ea:	6078      	str	r0, [r7, #4]
 80267ec:	ed87 0a00 	vstr	s0, [r7]
    integral_error_ += integral_error;
 80267f0:	687b      	ldr	r3, [r7, #4]
 80267f2:	ed93 7a00 	vldr	s14, [r3]
 80267f6:	edd7 7a00 	vldr	s15, [r7]
 80267fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80267fe:	687b      	ldr	r3, [r7, #4]
 8026800:	edc3 7a00 	vstr	s15, [r3]
}
 8026804:	bf00      	nop
 8026806:	370c      	adds	r7, #12
 8026808:	46bd      	mov	sp, r7
 802680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802680e:	4770      	bx	lr

08026810 <Init>:
    &velocity_control
);
#endif // TEST_MODE

void Init()
{
 8026810:	b580      	push	{r7, lr}
 8026812:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Init();
 8026814:	4802      	ldr	r0, [pc, #8]	; (8026820 <Init+0x10>)
 8026816:	f7fe f805 	bl	8024824 <_ZN3Run4InitEv>
#else // TEST_MODE
    test.Init();
#endif // TEST_MODE
}
 802681a:	bf00      	nop
 802681c:	bd80      	pop	{r7, pc}
 802681e:	bf00      	nop
 8026820:	20000608 	.word	0x20000608

08026824 <InterruptTim7>:

void InterruptTim7()
{
 8026824:	b580      	push	{r7, lr}
 8026826:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Timer7();
 8026828:	4804      	ldr	r0, [pc, #16]	; (802683c <InterruptTim7+0x18>)
 802682a:	f7fe f875 	bl	8024918 <_ZN3Run6Timer7Ev>
#else // TEST_MODE
    test.Timer7();
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim7++;
 802682e:	4b04      	ldr	r3, [pc, #16]	; (8026840 <InterruptTim7+0x1c>)
 8026830:	681b      	ldr	r3, [r3, #0]
 8026832:	3301      	adds	r3, #1
 8026834:	4a02      	ldr	r2, [pc, #8]	; (8026840 <InterruptTim7+0x1c>)
 8026836:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8026838:	bf00      	nop
 802683a:	bd80      	pop	{r7, pc}
 802683c:	20000608 	.word	0x20000608
 8026840:	200002dc 	.word	0x200002dc

08026844 <InterruptTim6>:

void InterruptTim6()
{
 8026844:	b580      	push	{r7, lr}
 8026846:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.RunMode();
 8026848:	4804      	ldr	r0, [pc, #16]	; (802685c <InterruptTim6+0x18>)
 802684a:	f7fe fa6f 	bl	8024d2c <_ZN3Run7RunModeEv>
#else // TEST_MODE
    test.Timer6();
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim6++;
 802684e:	4b04      	ldr	r3, [pc, #16]	; (8026860 <InterruptTim6+0x1c>)
 8026850:	681b      	ldr	r3, [r3, #0]
 8026852:	3301      	adds	r3, #1
 8026854:	4a02      	ldr	r2, [pc, #8]	; (8026860 <InterruptTim6+0x1c>)
 8026856:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8026858:	bf00      	nop
 802685a:	bd80      	pop	{r7, pc}
 802685c:	20000608 	.word	0x20000608
 8026860:	200002e0 	.word	0x200002e0

08026864 <InterruptTim2>:

void InterruptTim2()
{
 8026864:	b580      	push	{r7, lr}
 8026866:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Timer2();
 8026868:	4804      	ldr	r0, [pc, #16]	; (802687c <InterruptTim2+0x18>)
 802686a:	f7fe f863 	bl	8024934 <_ZN3Run6Timer2Ev>
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim2++;
 802686e:	4b04      	ldr	r3, [pc, #16]	; (8026880 <InterruptTim2+0x1c>)
 8026870:	681b      	ldr	r3, [r3, #0]
 8026872:	3301      	adds	r3, #1
 8026874:	4a02      	ldr	r2, [pc, #8]	; (8026880 <InterruptTim2+0x1c>)
 8026876:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
 8026878:	bf00      	nop
 802687a:	bd80      	pop	{r7, pc}
 802687c:	20000608 	.word	0x20000608
 8026880:	200002e4 	.word	0x200002e4

08026884 <_Z41__static_initialization_and_destruction_0ii>:
 8026884:	b580      	push	{r7, lr}
 8026886:	b08c      	sub	sp, #48	; 0x30
 8026888:	af0a      	add	r7, sp, #40	; 0x28
 802688a:	6078      	str	r0, [r7, #4]
 802688c:	6039      	str	r1, [r7, #0]
 802688e:	687b      	ldr	r3, [r7, #4]
 8026890:	2b01      	cmp	r3, #1
 8026892:	d140      	bne.n	8026916 <_Z41__static_initialization_and_destruction_0ii+0x92>
 8026894:	683b      	ldr	r3, [r7, #0]
 8026896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802689a:	4293      	cmp	r3, r2
 802689c:	d13b      	bne.n	8026916 <_Z41__static_initialization_and_destruction_0ii+0x92>
Encoder encoder;
 802689e:	4820      	ldr	r0, [pc, #128]	; (8026920 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80268a0:	f7fa fa38 	bl	8020d14 <_ZN7EncoderC1Ev>
Iim42652 iim_42652;
 80268a4:	481f      	ldr	r0, [pc, #124]	; (8026924 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80268a6:	f7fa fd17 	bl	80212d8 <_ZN8Iim42652C1Ev>
Led led;
 80268aa:	481f      	ldr	r0, [pc, #124]	; (8026928 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80268ac:	f7fa ff29 	bl	8021702 <_ZN3LedC1Ev>
LineSensor line_sensor;
 80268b0:	481e      	ldr	r0, [pc, #120]	; (802692c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80268b2:	f7fb f8de 	bl	8021a72 <_ZN10LineSensorC1Ev>
LineTrace line_trace(&line_sensor);
 80268b6:	491d      	ldr	r1, [pc, #116]	; (802692c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80268b8:	481d      	ldr	r0, [pc, #116]	; (8026930 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80268ba:	f7fb fc05 	bl	80220c8 <_ZN9LineTraceC1EP10LineSensor>
Logger logger;
 80268be:	481d      	ldr	r0, [pc, #116]	; (8026934 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80268c0:	f7fb fd5a 	bl	8022378 <_ZN6LoggerC1Ev>
SideSensor side_sensor;
 80268c4:	481c      	ldr	r0, [pc, #112]	; (8026938 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80268c6:	f7fe fee3 	bl	8025690 <_ZN10SideSensorC1Ev>
Logger2 logger2(&encoder, &flash, &led, &iim_42652, &side_sensor);
 80268ca:	4b1b      	ldr	r3, [pc, #108]	; (8026938 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80268cc:	9301      	str	r3, [sp, #4]
 80268ce:	4b15      	ldr	r3, [pc, #84]	; (8026924 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80268d0:	9300      	str	r3, [sp, #0]
 80268d2:	4b15      	ldr	r3, [pc, #84]	; (8026928 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80268d4:	4a19      	ldr	r2, [pc, #100]	; (802693c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80268d6:	4912      	ldr	r1, [pc, #72]	; (8026920 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80268d8:	4819      	ldr	r0, [pc, #100]	; (8026940 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80268da:	f7fc fb83 	bl	8022fe4 <_ZN7Logger2C1EP7EncoderP5FlashP3LedP8Iim42652P10SideSensor>
VelocityControl velocity_control(&encoder);
 80268de:	4910      	ldr	r1, [pc, #64]	; (8026920 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80268e0:	4818      	ldr	r0, [pc, #96]	; (8026944 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80268e2:	f7ff fe19 	bl	8026518 <_ZN15VelocityControlC1EP7Encoder>
);
 80268e6:	4b17      	ldr	r3, [pc, #92]	; (8026944 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80268e8:	9308      	str	r3, [sp, #32]
 80268ea:	4b13      	ldr	r3, [pc, #76]	; (8026938 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80268ec:	9307      	str	r3, [sp, #28]
 80268ee:	4b16      	ldr	r3, [pc, #88]	; (8026948 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80268f0:	9306      	str	r3, [sp, #24]
 80268f2:	4b16      	ldr	r3, [pc, #88]	; (802694c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80268f4:	9305      	str	r3, [sp, #20]
 80268f6:	4b12      	ldr	r3, [pc, #72]	; (8026940 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80268f8:	9304      	str	r3, [sp, #16]
 80268fa:	4b0e      	ldr	r3, [pc, #56]	; (8026934 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80268fc:	9303      	str	r3, [sp, #12]
 80268fe:	4b0c      	ldr	r3, [pc, #48]	; (8026930 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8026900:	9302      	str	r3, [sp, #8]
 8026902:	4b0a      	ldr	r3, [pc, #40]	; (802692c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8026904:	9301      	str	r3, [sp, #4]
 8026906:	4b08      	ldr	r3, [pc, #32]	; (8026928 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8026908:	9300      	str	r3, [sp, #0]
 802690a:	4b06      	ldr	r3, [pc, #24]	; (8026924 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 802690c:	4a0b      	ldr	r2, [pc, #44]	; (802693c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 802690e:	4904      	ldr	r1, [pc, #16]	; (8026920 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8026910:	480f      	ldr	r0, [pc, #60]	; (8026950 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8026912:	f7fd ff3f 	bl	8024794 <_ZN3RunC1EP7EncoderP5FlashP8Iim42652P3LedP10LineSensorP9LineTraceP6LoggerP7Logger2P5MotorP12RotarySwitchP10SideSensorP15VelocityControl>
 8026916:	bf00      	nop
 8026918:	3708      	adds	r7, #8
 802691a:	46bd      	mov	sp, r7
 802691c:	bd80      	pop	{r7, pc}
 802691e:	bf00      	nop
 8026920:	2000030c 	.word	0x2000030c
 8026924:	20000320 	.word	0x20000320
 8026928:	20000328 	.word	0x20000328
 802692c:	2000032c 	.word	0x2000032c
 8026930:	200004b8 	.word	0x200004b8
 8026934:	200004c0 	.word	0x200004c0
 8026938:	200005d0 	.word	0x200005d0
 802693c:	20000318 	.word	0x20000318
 8026940:	200005d8 	.word	0x200005d8
 8026944:	20000600 	.word	0x20000600
 8026948:	200005cc 	.word	0x200005cc
 802694c:	200005c8 	.word	0x200005c8
 8026950:	20000608 	.word	0x20000608

08026954 <_GLOBAL__sub_I_encoder>:
 8026954:	b580      	push	{r7, lr}
 8026956:	af00      	add	r7, sp, #0
 8026958:	f64f 71ff 	movw	r1, #65535	; 0xffff
 802695c:	2001      	movs	r0, #1
 802695e:	f7ff ff91 	bl	8026884 <_Z41__static_initialization_and_destruction_0ii>
 8026962:	bd80      	pop	{r7, pc}

08026964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8026964:	f8df d034 	ldr.w	sp, [pc, #52]	; 802699c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8026968:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 802696a:	e003      	b.n	8026974 <LoopCopyDataInit>

0802696c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 802696c:	4b0c      	ldr	r3, [pc, #48]	; (80269a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 802696e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8026970:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8026972:	3104      	adds	r1, #4

08026974 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8026974:	480b      	ldr	r0, [pc, #44]	; (80269a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8026976:	4b0c      	ldr	r3, [pc, #48]	; (80269a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8026978:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 802697a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 802697c:	d3f6      	bcc.n	802696c <CopyDataInit>
  ldr  r2, =_sbss
 802697e:	4a0b      	ldr	r2, [pc, #44]	; (80269ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8026980:	e002      	b.n	8026988 <LoopFillZerobss>

08026982 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8026982:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8026984:	f842 3b04 	str.w	r3, [r2], #4

08026988 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8026988:	4b09      	ldr	r3, [pc, #36]	; (80269b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 802698a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 802698c:	d3f9      	bcc.n	8026982 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 802698e:	f7ff fdad 	bl	80264ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8026992:	f004 f8a1 	bl	802aad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8026996:	f7fc fefd 	bl	8023794 <main>
  bx  lr    
 802699a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 802699c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80269a0:	0802ab94 	.word	0x0802ab94
  ldr  r0, =_sdata
 80269a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80269a8:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 80269ac:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 80269b0:	20000a38 	.word	0x20000a38

080269b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80269b4:	e7fe      	b.n	80269b4 <ADC_IRQHandler>
	...

080269b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80269b8:	b580      	push	{r7, lr}
 80269ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80269bc:	4b0e      	ldr	r3, [pc, #56]	; (80269f8 <HAL_Init+0x40>)
 80269be:	681b      	ldr	r3, [r3, #0]
 80269c0:	4a0d      	ldr	r2, [pc, #52]	; (80269f8 <HAL_Init+0x40>)
 80269c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80269c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80269c8:	4b0b      	ldr	r3, [pc, #44]	; (80269f8 <HAL_Init+0x40>)
 80269ca:	681b      	ldr	r3, [r3, #0]
 80269cc:	4a0a      	ldr	r2, [pc, #40]	; (80269f8 <HAL_Init+0x40>)
 80269ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80269d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80269d4:	4b08      	ldr	r3, [pc, #32]	; (80269f8 <HAL_Init+0x40>)
 80269d6:	681b      	ldr	r3, [r3, #0]
 80269d8:	4a07      	ldr	r2, [pc, #28]	; (80269f8 <HAL_Init+0x40>)
 80269da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80269de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80269e0:	2003      	movs	r0, #3
 80269e2:	f000 fd41 	bl	8027468 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80269e6:	2001      	movs	r0, #1
 80269e8:	f000 f808 	bl	80269fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80269ec:	f7ff f9a2 	bl	8025d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80269f0:	2300      	movs	r3, #0
}
 80269f2:	4618      	mov	r0, r3
 80269f4:	bd80      	pop	{r7, pc}
 80269f6:	bf00      	nop
 80269f8:	40023c00 	.word	0x40023c00

080269fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80269fc:	b580      	push	{r7, lr}
 80269fe:	b082      	sub	sp, #8
 8026a00:	af00      	add	r7, sp, #0
 8026a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8026a04:	4b12      	ldr	r3, [pc, #72]	; (8026a50 <HAL_InitTick+0x54>)
 8026a06:	681a      	ldr	r2, [r3, #0]
 8026a08:	4b12      	ldr	r3, [pc, #72]	; (8026a54 <HAL_InitTick+0x58>)
 8026a0a:	781b      	ldrb	r3, [r3, #0]
 8026a0c:	4619      	mov	r1, r3
 8026a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8026a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8026a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8026a1a:	4618      	mov	r0, r3
 8026a1c:	f000 fd59 	bl	80274d2 <HAL_SYSTICK_Config>
 8026a20:	4603      	mov	r3, r0
 8026a22:	2b00      	cmp	r3, #0
 8026a24:	d001      	beq.n	8026a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8026a26:	2301      	movs	r3, #1
 8026a28:	e00e      	b.n	8026a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8026a2a:	687b      	ldr	r3, [r7, #4]
 8026a2c:	2b0f      	cmp	r3, #15
 8026a2e:	d80a      	bhi.n	8026a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8026a30:	2200      	movs	r2, #0
 8026a32:	6879      	ldr	r1, [r7, #4]
 8026a34:	f04f 30ff 	mov.w	r0, #4294967295
 8026a38:	f000 fd21 	bl	802747e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8026a3c:	4a06      	ldr	r2, [pc, #24]	; (8026a58 <HAL_InitTick+0x5c>)
 8026a3e:	687b      	ldr	r3, [r7, #4]
 8026a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8026a42:	2300      	movs	r3, #0
 8026a44:	e000      	b.n	8026a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8026a46:	2301      	movs	r3, #1
}
 8026a48:	4618      	mov	r0, r3
 8026a4a:	3708      	adds	r7, #8
 8026a4c:	46bd      	mov	sp, r7
 8026a4e:	bd80      	pop	{r7, pc}
 8026a50:	20000014 	.word	0x20000014
 8026a54:	2000001c 	.word	0x2000001c
 8026a58:	20000018 	.word	0x20000018

08026a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8026a5c:	b480      	push	{r7}
 8026a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8026a60:	4b06      	ldr	r3, [pc, #24]	; (8026a7c <HAL_IncTick+0x20>)
 8026a62:	781b      	ldrb	r3, [r3, #0]
 8026a64:	461a      	mov	r2, r3
 8026a66:	4b06      	ldr	r3, [pc, #24]	; (8026a80 <HAL_IncTick+0x24>)
 8026a68:	681b      	ldr	r3, [r3, #0]
 8026a6a:	4413      	add	r3, r2
 8026a6c:	4a04      	ldr	r2, [pc, #16]	; (8026a80 <HAL_IncTick+0x24>)
 8026a6e:	6013      	str	r3, [r2, #0]
}
 8026a70:	bf00      	nop
 8026a72:	46bd      	mov	sp, r7
 8026a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026a78:	4770      	bx	lr
 8026a7a:	bf00      	nop
 8026a7c:	2000001c 	.word	0x2000001c
 8026a80:	20000a14 	.word	0x20000a14

08026a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8026a84:	b480      	push	{r7}
 8026a86:	af00      	add	r7, sp, #0
  return uwTick;
 8026a88:	4b03      	ldr	r3, [pc, #12]	; (8026a98 <HAL_GetTick+0x14>)
 8026a8a:	681b      	ldr	r3, [r3, #0]
}
 8026a8c:	4618      	mov	r0, r3
 8026a8e:	46bd      	mov	sp, r7
 8026a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026a94:	4770      	bx	lr
 8026a96:	bf00      	nop
 8026a98:	20000a14 	.word	0x20000a14

08026a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8026a9c:	b580      	push	{r7, lr}
 8026a9e:	b084      	sub	sp, #16
 8026aa0:	af00      	add	r7, sp, #0
 8026aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8026aa4:	f7ff ffee 	bl	8026a84 <HAL_GetTick>
 8026aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8026aaa:	687b      	ldr	r3, [r7, #4]
 8026aac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8026aae:	68fb      	ldr	r3, [r7, #12]
 8026ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8026ab4:	d005      	beq.n	8026ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8026ab6:	4b09      	ldr	r3, [pc, #36]	; (8026adc <HAL_Delay+0x40>)
 8026ab8:	781b      	ldrb	r3, [r3, #0]
 8026aba:	461a      	mov	r2, r3
 8026abc:	68fb      	ldr	r3, [r7, #12]
 8026abe:	4413      	add	r3, r2
 8026ac0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8026ac2:	bf00      	nop
 8026ac4:	f7ff ffde 	bl	8026a84 <HAL_GetTick>
 8026ac8:	4602      	mov	r2, r0
 8026aca:	68bb      	ldr	r3, [r7, #8]
 8026acc:	1ad3      	subs	r3, r2, r3
 8026ace:	68fa      	ldr	r2, [r7, #12]
 8026ad0:	429a      	cmp	r2, r3
 8026ad2:	d8f7      	bhi.n	8026ac4 <HAL_Delay+0x28>
  {
  }
}
 8026ad4:	bf00      	nop
 8026ad6:	3710      	adds	r7, #16
 8026ad8:	46bd      	mov	sp, r7
 8026ada:	bd80      	pop	{r7, pc}
 8026adc:	2000001c 	.word	0x2000001c

08026ae0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8026ae0:	b580      	push	{r7, lr}
 8026ae2:	b084      	sub	sp, #16
 8026ae4:	af00      	add	r7, sp, #0
 8026ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8026ae8:	2300      	movs	r3, #0
 8026aea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8026aec:	687b      	ldr	r3, [r7, #4]
 8026aee:	2b00      	cmp	r3, #0
 8026af0:	d101      	bne.n	8026af6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8026af2:	2301      	movs	r3, #1
 8026af4:	e033      	b.n	8026b5e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8026af6:	687b      	ldr	r3, [r7, #4]
 8026af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026afa:	2b00      	cmp	r3, #0
 8026afc:	d109      	bne.n	8026b12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8026afe:	6878      	ldr	r0, [r7, #4]
 8026b00:	f7ff f940 	bl	8025d84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8026b04:	687b      	ldr	r3, [r7, #4]
 8026b06:	2200      	movs	r2, #0
 8026b08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8026b0a:	687b      	ldr	r3, [r7, #4]
 8026b0c:	2200      	movs	r2, #0
 8026b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8026b12:	687b      	ldr	r3, [r7, #4]
 8026b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026b16:	f003 0310 	and.w	r3, r3, #16
 8026b1a:	2b00      	cmp	r3, #0
 8026b1c:	d118      	bne.n	8026b50 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8026b1e:	687b      	ldr	r3, [r7, #4]
 8026b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026b22:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8026b26:	f023 0302 	bic.w	r3, r3, #2
 8026b2a:	f043 0202 	orr.w	r2, r3, #2
 8026b2e:	687b      	ldr	r3, [r7, #4]
 8026b30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8026b32:	6878      	ldr	r0, [r7, #4]
 8026b34:	f000 fa4a 	bl	8026fcc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8026b38:	687b      	ldr	r3, [r7, #4]
 8026b3a:	2200      	movs	r2, #0
 8026b3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8026b3e:	687b      	ldr	r3, [r7, #4]
 8026b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026b42:	f023 0303 	bic.w	r3, r3, #3
 8026b46:	f043 0201 	orr.w	r2, r3, #1
 8026b4a:	687b      	ldr	r3, [r7, #4]
 8026b4c:	641a      	str	r2, [r3, #64]	; 0x40
 8026b4e:	e001      	b.n	8026b54 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8026b50:	2301      	movs	r3, #1
 8026b52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8026b54:	687b      	ldr	r3, [r7, #4]
 8026b56:	2200      	movs	r2, #0
 8026b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8026b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8026b5e:	4618      	mov	r0, r3
 8026b60:	3710      	adds	r7, #16
 8026b62:	46bd      	mov	sp, r7
 8026b64:	bd80      	pop	{r7, pc}
	...

08026b68 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8026b68:	b580      	push	{r7, lr}
 8026b6a:	b086      	sub	sp, #24
 8026b6c:	af00      	add	r7, sp, #0
 8026b6e:	60f8      	str	r0, [r7, #12]
 8026b70:	60b9      	str	r1, [r7, #8]
 8026b72:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8026b74:	2300      	movs	r3, #0
 8026b76:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8026b78:	68fb      	ldr	r3, [r7, #12]
 8026b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8026b7e:	2b01      	cmp	r3, #1
 8026b80:	d101      	bne.n	8026b86 <HAL_ADC_Start_DMA+0x1e>
 8026b82:	2302      	movs	r3, #2
 8026b84:	e0cc      	b.n	8026d20 <HAL_ADC_Start_DMA+0x1b8>
 8026b86:	68fb      	ldr	r3, [r7, #12]
 8026b88:	2201      	movs	r2, #1
 8026b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8026b8e:	68fb      	ldr	r3, [r7, #12]
 8026b90:	681b      	ldr	r3, [r3, #0]
 8026b92:	689b      	ldr	r3, [r3, #8]
 8026b94:	f003 0301 	and.w	r3, r3, #1
 8026b98:	2b01      	cmp	r3, #1
 8026b9a:	d018      	beq.n	8026bce <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8026b9c:	68fb      	ldr	r3, [r7, #12]
 8026b9e:	681b      	ldr	r3, [r3, #0]
 8026ba0:	689a      	ldr	r2, [r3, #8]
 8026ba2:	68fb      	ldr	r3, [r7, #12]
 8026ba4:	681b      	ldr	r3, [r3, #0]
 8026ba6:	f042 0201 	orr.w	r2, r2, #1
 8026baa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8026bac:	4b5e      	ldr	r3, [pc, #376]	; (8026d28 <HAL_ADC_Start_DMA+0x1c0>)
 8026bae:	681b      	ldr	r3, [r3, #0]
 8026bb0:	4a5e      	ldr	r2, [pc, #376]	; (8026d2c <HAL_ADC_Start_DMA+0x1c4>)
 8026bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8026bb6:	0c9a      	lsrs	r2, r3, #18
 8026bb8:	4613      	mov	r3, r2
 8026bba:	005b      	lsls	r3, r3, #1
 8026bbc:	4413      	add	r3, r2
 8026bbe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8026bc0:	e002      	b.n	8026bc8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8026bc2:	693b      	ldr	r3, [r7, #16]
 8026bc4:	3b01      	subs	r3, #1
 8026bc6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8026bc8:	693b      	ldr	r3, [r7, #16]
 8026bca:	2b00      	cmp	r3, #0
 8026bcc:	d1f9      	bne.n	8026bc2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8026bce:	68fb      	ldr	r3, [r7, #12]
 8026bd0:	681b      	ldr	r3, [r3, #0]
 8026bd2:	689b      	ldr	r3, [r3, #8]
 8026bd4:	f003 0301 	and.w	r3, r3, #1
 8026bd8:	2b01      	cmp	r3, #1
 8026bda:	f040 80a0 	bne.w	8026d1e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8026bde:	68fb      	ldr	r3, [r7, #12]
 8026be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026be2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8026be6:	f023 0301 	bic.w	r3, r3, #1
 8026bea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8026bee:	68fb      	ldr	r3, [r7, #12]
 8026bf0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8026bf2:	68fb      	ldr	r3, [r7, #12]
 8026bf4:	681b      	ldr	r3, [r3, #0]
 8026bf6:	685b      	ldr	r3, [r3, #4]
 8026bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8026bfc:	2b00      	cmp	r3, #0
 8026bfe:	d007      	beq.n	8026c10 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8026c00:	68fb      	ldr	r3, [r7, #12]
 8026c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026c04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8026c08:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8026c0c:	68fb      	ldr	r3, [r7, #12]
 8026c0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8026c10:	68fb      	ldr	r3, [r7, #12]
 8026c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8026c14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8026c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8026c1c:	d106      	bne.n	8026c2c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8026c1e:	68fb      	ldr	r3, [r7, #12]
 8026c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8026c22:	f023 0206 	bic.w	r2, r3, #6
 8026c26:	68fb      	ldr	r3, [r7, #12]
 8026c28:	645a      	str	r2, [r3, #68]	; 0x44
 8026c2a:	e002      	b.n	8026c32 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8026c2c:	68fb      	ldr	r3, [r7, #12]
 8026c2e:	2200      	movs	r2, #0
 8026c30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8026c32:	68fb      	ldr	r3, [r7, #12]
 8026c34:	2200      	movs	r2, #0
 8026c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8026c3a:	4b3d      	ldr	r3, [pc, #244]	; (8026d30 <HAL_ADC_Start_DMA+0x1c8>)
 8026c3c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8026c3e:	68fb      	ldr	r3, [r7, #12]
 8026c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026c42:	4a3c      	ldr	r2, [pc, #240]	; (8026d34 <HAL_ADC_Start_DMA+0x1cc>)
 8026c44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8026c46:	68fb      	ldr	r3, [r7, #12]
 8026c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026c4a:	4a3b      	ldr	r2, [pc, #236]	; (8026d38 <HAL_ADC_Start_DMA+0x1d0>)
 8026c4c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8026c4e:	68fb      	ldr	r3, [r7, #12]
 8026c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8026c52:	4a3a      	ldr	r2, [pc, #232]	; (8026d3c <HAL_ADC_Start_DMA+0x1d4>)
 8026c54:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8026c56:	68fb      	ldr	r3, [r7, #12]
 8026c58:	681b      	ldr	r3, [r3, #0]
 8026c5a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8026c5e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8026c60:	68fb      	ldr	r3, [r7, #12]
 8026c62:	681b      	ldr	r3, [r3, #0]
 8026c64:	685a      	ldr	r2, [r3, #4]
 8026c66:	68fb      	ldr	r3, [r7, #12]
 8026c68:	681b      	ldr	r3, [r3, #0]
 8026c6a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8026c6e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8026c70:	68fb      	ldr	r3, [r7, #12]
 8026c72:	681b      	ldr	r3, [r3, #0]
 8026c74:	689a      	ldr	r2, [r3, #8]
 8026c76:	68fb      	ldr	r3, [r7, #12]
 8026c78:	681b      	ldr	r3, [r3, #0]
 8026c7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8026c7e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8026c80:	68fb      	ldr	r3, [r7, #12]
 8026c82:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8026c84:	68fb      	ldr	r3, [r7, #12]
 8026c86:	681b      	ldr	r3, [r3, #0]
 8026c88:	334c      	adds	r3, #76	; 0x4c
 8026c8a:	4619      	mov	r1, r3
 8026c8c:	68ba      	ldr	r2, [r7, #8]
 8026c8e:	687b      	ldr	r3, [r7, #4]
 8026c90:	f000 fcda 	bl	8027648 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8026c94:	697b      	ldr	r3, [r7, #20]
 8026c96:	685b      	ldr	r3, [r3, #4]
 8026c98:	f003 031f 	and.w	r3, r3, #31
 8026c9c:	2b00      	cmp	r3, #0
 8026c9e:	d12a      	bne.n	8026cf6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8026ca0:	68fb      	ldr	r3, [r7, #12]
 8026ca2:	681b      	ldr	r3, [r3, #0]
 8026ca4:	4a26      	ldr	r2, [pc, #152]	; (8026d40 <HAL_ADC_Start_DMA+0x1d8>)
 8026ca6:	4293      	cmp	r3, r2
 8026ca8:	d015      	beq.n	8026cd6 <HAL_ADC_Start_DMA+0x16e>
 8026caa:	68fb      	ldr	r3, [r7, #12]
 8026cac:	681b      	ldr	r3, [r3, #0]
 8026cae:	4a25      	ldr	r2, [pc, #148]	; (8026d44 <HAL_ADC_Start_DMA+0x1dc>)
 8026cb0:	4293      	cmp	r3, r2
 8026cb2:	d105      	bne.n	8026cc0 <HAL_ADC_Start_DMA+0x158>
 8026cb4:	4b1e      	ldr	r3, [pc, #120]	; (8026d30 <HAL_ADC_Start_DMA+0x1c8>)
 8026cb6:	685b      	ldr	r3, [r3, #4]
 8026cb8:	f003 031f 	and.w	r3, r3, #31
 8026cbc:	2b00      	cmp	r3, #0
 8026cbe:	d00a      	beq.n	8026cd6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8026cc0:	68fb      	ldr	r3, [r7, #12]
 8026cc2:	681b      	ldr	r3, [r3, #0]
 8026cc4:	4a20      	ldr	r2, [pc, #128]	; (8026d48 <HAL_ADC_Start_DMA+0x1e0>)
 8026cc6:	4293      	cmp	r3, r2
 8026cc8:	d129      	bne.n	8026d1e <HAL_ADC_Start_DMA+0x1b6>
 8026cca:	4b19      	ldr	r3, [pc, #100]	; (8026d30 <HAL_ADC_Start_DMA+0x1c8>)
 8026ccc:	685b      	ldr	r3, [r3, #4]
 8026cce:	f003 031f 	and.w	r3, r3, #31
 8026cd2:	2b0f      	cmp	r3, #15
 8026cd4:	d823      	bhi.n	8026d1e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8026cd6:	68fb      	ldr	r3, [r7, #12]
 8026cd8:	681b      	ldr	r3, [r3, #0]
 8026cda:	689b      	ldr	r3, [r3, #8]
 8026cdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8026ce0:	2b00      	cmp	r3, #0
 8026ce2:	d11c      	bne.n	8026d1e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8026ce4:	68fb      	ldr	r3, [r7, #12]
 8026ce6:	681b      	ldr	r3, [r3, #0]
 8026ce8:	689a      	ldr	r2, [r3, #8]
 8026cea:	68fb      	ldr	r3, [r7, #12]
 8026cec:	681b      	ldr	r3, [r3, #0]
 8026cee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8026cf2:	609a      	str	r2, [r3, #8]
 8026cf4:	e013      	b.n	8026d1e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8026cf6:	68fb      	ldr	r3, [r7, #12]
 8026cf8:	681b      	ldr	r3, [r3, #0]
 8026cfa:	4a11      	ldr	r2, [pc, #68]	; (8026d40 <HAL_ADC_Start_DMA+0x1d8>)
 8026cfc:	4293      	cmp	r3, r2
 8026cfe:	d10e      	bne.n	8026d1e <HAL_ADC_Start_DMA+0x1b6>
 8026d00:	68fb      	ldr	r3, [r7, #12]
 8026d02:	681b      	ldr	r3, [r3, #0]
 8026d04:	689b      	ldr	r3, [r3, #8]
 8026d06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8026d0a:	2b00      	cmp	r3, #0
 8026d0c:	d107      	bne.n	8026d1e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8026d0e:	68fb      	ldr	r3, [r7, #12]
 8026d10:	681b      	ldr	r3, [r3, #0]
 8026d12:	689a      	ldr	r2, [r3, #8]
 8026d14:	68fb      	ldr	r3, [r7, #12]
 8026d16:	681b      	ldr	r3, [r3, #0]
 8026d18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8026d1c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8026d1e:	2300      	movs	r3, #0
}
 8026d20:	4618      	mov	r0, r3
 8026d22:	3718      	adds	r7, #24
 8026d24:	46bd      	mov	sp, r7
 8026d26:	bd80      	pop	{r7, pc}
 8026d28:	20000014 	.word	0x20000014
 8026d2c:	431bde83 	.word	0x431bde83
 8026d30:	40012300 	.word	0x40012300
 8026d34:	080271c5 	.word	0x080271c5
 8026d38:	0802727f 	.word	0x0802727f
 8026d3c:	0802729b 	.word	0x0802729b
 8026d40:	40012000 	.word	0x40012000
 8026d44:	40012100 	.word	0x40012100
 8026d48:	40012200 	.word	0x40012200

08026d4c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8026d4c:	b480      	push	{r7}
 8026d4e:	b083      	sub	sp, #12
 8026d50:	af00      	add	r7, sp, #0
 8026d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8026d54:	bf00      	nop
 8026d56:	370c      	adds	r7, #12
 8026d58:	46bd      	mov	sp, r7
 8026d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d5e:	4770      	bx	lr

08026d60 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8026d60:	b480      	push	{r7}
 8026d62:	b083      	sub	sp, #12
 8026d64:	af00      	add	r7, sp, #0
 8026d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8026d68:	bf00      	nop
 8026d6a:	370c      	adds	r7, #12
 8026d6c:	46bd      	mov	sp, r7
 8026d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d72:	4770      	bx	lr

08026d74 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8026d74:	b480      	push	{r7}
 8026d76:	b083      	sub	sp, #12
 8026d78:	af00      	add	r7, sp, #0
 8026d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8026d7c:	bf00      	nop
 8026d7e:	370c      	adds	r7, #12
 8026d80:	46bd      	mov	sp, r7
 8026d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d86:	4770      	bx	lr

08026d88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8026d88:	b480      	push	{r7}
 8026d8a:	b085      	sub	sp, #20
 8026d8c:	af00      	add	r7, sp, #0
 8026d8e:	6078      	str	r0, [r7, #4]
 8026d90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8026d92:	2300      	movs	r3, #0
 8026d94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8026d96:	687b      	ldr	r3, [r7, #4]
 8026d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8026d9c:	2b01      	cmp	r3, #1
 8026d9e:	d101      	bne.n	8026da4 <HAL_ADC_ConfigChannel+0x1c>
 8026da0:	2302      	movs	r3, #2
 8026da2:	e105      	b.n	8026fb0 <HAL_ADC_ConfigChannel+0x228>
 8026da4:	687b      	ldr	r3, [r7, #4]
 8026da6:	2201      	movs	r2, #1
 8026da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8026dac:	683b      	ldr	r3, [r7, #0]
 8026dae:	681b      	ldr	r3, [r3, #0]
 8026db0:	2b09      	cmp	r3, #9
 8026db2:	d925      	bls.n	8026e00 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8026db4:	687b      	ldr	r3, [r7, #4]
 8026db6:	681b      	ldr	r3, [r3, #0]
 8026db8:	68d9      	ldr	r1, [r3, #12]
 8026dba:	683b      	ldr	r3, [r7, #0]
 8026dbc:	681b      	ldr	r3, [r3, #0]
 8026dbe:	b29b      	uxth	r3, r3
 8026dc0:	461a      	mov	r2, r3
 8026dc2:	4613      	mov	r3, r2
 8026dc4:	005b      	lsls	r3, r3, #1
 8026dc6:	4413      	add	r3, r2
 8026dc8:	3b1e      	subs	r3, #30
 8026dca:	2207      	movs	r2, #7
 8026dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8026dd0:	43da      	mvns	r2, r3
 8026dd2:	687b      	ldr	r3, [r7, #4]
 8026dd4:	681b      	ldr	r3, [r3, #0]
 8026dd6:	400a      	ands	r2, r1
 8026dd8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8026dda:	687b      	ldr	r3, [r7, #4]
 8026ddc:	681b      	ldr	r3, [r3, #0]
 8026dde:	68d9      	ldr	r1, [r3, #12]
 8026de0:	683b      	ldr	r3, [r7, #0]
 8026de2:	689a      	ldr	r2, [r3, #8]
 8026de4:	683b      	ldr	r3, [r7, #0]
 8026de6:	681b      	ldr	r3, [r3, #0]
 8026de8:	b29b      	uxth	r3, r3
 8026dea:	4618      	mov	r0, r3
 8026dec:	4603      	mov	r3, r0
 8026dee:	005b      	lsls	r3, r3, #1
 8026df0:	4403      	add	r3, r0
 8026df2:	3b1e      	subs	r3, #30
 8026df4:	409a      	lsls	r2, r3
 8026df6:	687b      	ldr	r3, [r7, #4]
 8026df8:	681b      	ldr	r3, [r3, #0]
 8026dfa:	430a      	orrs	r2, r1
 8026dfc:	60da      	str	r2, [r3, #12]
 8026dfe:	e022      	b.n	8026e46 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8026e00:	687b      	ldr	r3, [r7, #4]
 8026e02:	681b      	ldr	r3, [r3, #0]
 8026e04:	6919      	ldr	r1, [r3, #16]
 8026e06:	683b      	ldr	r3, [r7, #0]
 8026e08:	681b      	ldr	r3, [r3, #0]
 8026e0a:	b29b      	uxth	r3, r3
 8026e0c:	461a      	mov	r2, r3
 8026e0e:	4613      	mov	r3, r2
 8026e10:	005b      	lsls	r3, r3, #1
 8026e12:	4413      	add	r3, r2
 8026e14:	2207      	movs	r2, #7
 8026e16:	fa02 f303 	lsl.w	r3, r2, r3
 8026e1a:	43da      	mvns	r2, r3
 8026e1c:	687b      	ldr	r3, [r7, #4]
 8026e1e:	681b      	ldr	r3, [r3, #0]
 8026e20:	400a      	ands	r2, r1
 8026e22:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8026e24:	687b      	ldr	r3, [r7, #4]
 8026e26:	681b      	ldr	r3, [r3, #0]
 8026e28:	6919      	ldr	r1, [r3, #16]
 8026e2a:	683b      	ldr	r3, [r7, #0]
 8026e2c:	689a      	ldr	r2, [r3, #8]
 8026e2e:	683b      	ldr	r3, [r7, #0]
 8026e30:	681b      	ldr	r3, [r3, #0]
 8026e32:	b29b      	uxth	r3, r3
 8026e34:	4618      	mov	r0, r3
 8026e36:	4603      	mov	r3, r0
 8026e38:	005b      	lsls	r3, r3, #1
 8026e3a:	4403      	add	r3, r0
 8026e3c:	409a      	lsls	r2, r3
 8026e3e:	687b      	ldr	r3, [r7, #4]
 8026e40:	681b      	ldr	r3, [r3, #0]
 8026e42:	430a      	orrs	r2, r1
 8026e44:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8026e46:	683b      	ldr	r3, [r7, #0]
 8026e48:	685b      	ldr	r3, [r3, #4]
 8026e4a:	2b06      	cmp	r3, #6
 8026e4c:	d824      	bhi.n	8026e98 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8026e4e:	687b      	ldr	r3, [r7, #4]
 8026e50:	681b      	ldr	r3, [r3, #0]
 8026e52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8026e54:	683b      	ldr	r3, [r7, #0]
 8026e56:	685a      	ldr	r2, [r3, #4]
 8026e58:	4613      	mov	r3, r2
 8026e5a:	009b      	lsls	r3, r3, #2
 8026e5c:	4413      	add	r3, r2
 8026e5e:	3b05      	subs	r3, #5
 8026e60:	221f      	movs	r2, #31
 8026e62:	fa02 f303 	lsl.w	r3, r2, r3
 8026e66:	43da      	mvns	r2, r3
 8026e68:	687b      	ldr	r3, [r7, #4]
 8026e6a:	681b      	ldr	r3, [r3, #0]
 8026e6c:	400a      	ands	r2, r1
 8026e6e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8026e70:	687b      	ldr	r3, [r7, #4]
 8026e72:	681b      	ldr	r3, [r3, #0]
 8026e74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8026e76:	683b      	ldr	r3, [r7, #0]
 8026e78:	681b      	ldr	r3, [r3, #0]
 8026e7a:	b29b      	uxth	r3, r3
 8026e7c:	4618      	mov	r0, r3
 8026e7e:	683b      	ldr	r3, [r7, #0]
 8026e80:	685a      	ldr	r2, [r3, #4]
 8026e82:	4613      	mov	r3, r2
 8026e84:	009b      	lsls	r3, r3, #2
 8026e86:	4413      	add	r3, r2
 8026e88:	3b05      	subs	r3, #5
 8026e8a:	fa00 f203 	lsl.w	r2, r0, r3
 8026e8e:	687b      	ldr	r3, [r7, #4]
 8026e90:	681b      	ldr	r3, [r3, #0]
 8026e92:	430a      	orrs	r2, r1
 8026e94:	635a      	str	r2, [r3, #52]	; 0x34
 8026e96:	e04c      	b.n	8026f32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8026e98:	683b      	ldr	r3, [r7, #0]
 8026e9a:	685b      	ldr	r3, [r3, #4]
 8026e9c:	2b0c      	cmp	r3, #12
 8026e9e:	d824      	bhi.n	8026eea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8026ea0:	687b      	ldr	r3, [r7, #4]
 8026ea2:	681b      	ldr	r3, [r3, #0]
 8026ea4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8026ea6:	683b      	ldr	r3, [r7, #0]
 8026ea8:	685a      	ldr	r2, [r3, #4]
 8026eaa:	4613      	mov	r3, r2
 8026eac:	009b      	lsls	r3, r3, #2
 8026eae:	4413      	add	r3, r2
 8026eb0:	3b23      	subs	r3, #35	; 0x23
 8026eb2:	221f      	movs	r2, #31
 8026eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8026eb8:	43da      	mvns	r2, r3
 8026eba:	687b      	ldr	r3, [r7, #4]
 8026ebc:	681b      	ldr	r3, [r3, #0]
 8026ebe:	400a      	ands	r2, r1
 8026ec0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8026ec2:	687b      	ldr	r3, [r7, #4]
 8026ec4:	681b      	ldr	r3, [r3, #0]
 8026ec6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8026ec8:	683b      	ldr	r3, [r7, #0]
 8026eca:	681b      	ldr	r3, [r3, #0]
 8026ecc:	b29b      	uxth	r3, r3
 8026ece:	4618      	mov	r0, r3
 8026ed0:	683b      	ldr	r3, [r7, #0]
 8026ed2:	685a      	ldr	r2, [r3, #4]
 8026ed4:	4613      	mov	r3, r2
 8026ed6:	009b      	lsls	r3, r3, #2
 8026ed8:	4413      	add	r3, r2
 8026eda:	3b23      	subs	r3, #35	; 0x23
 8026edc:	fa00 f203 	lsl.w	r2, r0, r3
 8026ee0:	687b      	ldr	r3, [r7, #4]
 8026ee2:	681b      	ldr	r3, [r3, #0]
 8026ee4:	430a      	orrs	r2, r1
 8026ee6:	631a      	str	r2, [r3, #48]	; 0x30
 8026ee8:	e023      	b.n	8026f32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8026eea:	687b      	ldr	r3, [r7, #4]
 8026eec:	681b      	ldr	r3, [r3, #0]
 8026eee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8026ef0:	683b      	ldr	r3, [r7, #0]
 8026ef2:	685a      	ldr	r2, [r3, #4]
 8026ef4:	4613      	mov	r3, r2
 8026ef6:	009b      	lsls	r3, r3, #2
 8026ef8:	4413      	add	r3, r2
 8026efa:	3b41      	subs	r3, #65	; 0x41
 8026efc:	221f      	movs	r2, #31
 8026efe:	fa02 f303 	lsl.w	r3, r2, r3
 8026f02:	43da      	mvns	r2, r3
 8026f04:	687b      	ldr	r3, [r7, #4]
 8026f06:	681b      	ldr	r3, [r3, #0]
 8026f08:	400a      	ands	r2, r1
 8026f0a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8026f0c:	687b      	ldr	r3, [r7, #4]
 8026f0e:	681b      	ldr	r3, [r3, #0]
 8026f10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8026f12:	683b      	ldr	r3, [r7, #0]
 8026f14:	681b      	ldr	r3, [r3, #0]
 8026f16:	b29b      	uxth	r3, r3
 8026f18:	4618      	mov	r0, r3
 8026f1a:	683b      	ldr	r3, [r7, #0]
 8026f1c:	685a      	ldr	r2, [r3, #4]
 8026f1e:	4613      	mov	r3, r2
 8026f20:	009b      	lsls	r3, r3, #2
 8026f22:	4413      	add	r3, r2
 8026f24:	3b41      	subs	r3, #65	; 0x41
 8026f26:	fa00 f203 	lsl.w	r2, r0, r3
 8026f2a:	687b      	ldr	r3, [r7, #4]
 8026f2c:	681b      	ldr	r3, [r3, #0]
 8026f2e:	430a      	orrs	r2, r1
 8026f30:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8026f32:	4b22      	ldr	r3, [pc, #136]	; (8026fbc <HAL_ADC_ConfigChannel+0x234>)
 8026f34:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8026f36:	687b      	ldr	r3, [r7, #4]
 8026f38:	681b      	ldr	r3, [r3, #0]
 8026f3a:	4a21      	ldr	r2, [pc, #132]	; (8026fc0 <HAL_ADC_ConfigChannel+0x238>)
 8026f3c:	4293      	cmp	r3, r2
 8026f3e:	d109      	bne.n	8026f54 <HAL_ADC_ConfigChannel+0x1cc>
 8026f40:	683b      	ldr	r3, [r7, #0]
 8026f42:	681b      	ldr	r3, [r3, #0]
 8026f44:	2b12      	cmp	r3, #18
 8026f46:	d105      	bne.n	8026f54 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8026f48:	68fb      	ldr	r3, [r7, #12]
 8026f4a:	685b      	ldr	r3, [r3, #4]
 8026f4c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8026f50:	68fb      	ldr	r3, [r7, #12]
 8026f52:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8026f54:	687b      	ldr	r3, [r7, #4]
 8026f56:	681b      	ldr	r3, [r3, #0]
 8026f58:	4a19      	ldr	r2, [pc, #100]	; (8026fc0 <HAL_ADC_ConfigChannel+0x238>)
 8026f5a:	4293      	cmp	r3, r2
 8026f5c:	d123      	bne.n	8026fa6 <HAL_ADC_ConfigChannel+0x21e>
 8026f5e:	683b      	ldr	r3, [r7, #0]
 8026f60:	681b      	ldr	r3, [r3, #0]
 8026f62:	2b10      	cmp	r3, #16
 8026f64:	d003      	beq.n	8026f6e <HAL_ADC_ConfigChannel+0x1e6>
 8026f66:	683b      	ldr	r3, [r7, #0]
 8026f68:	681b      	ldr	r3, [r3, #0]
 8026f6a:	2b11      	cmp	r3, #17
 8026f6c:	d11b      	bne.n	8026fa6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8026f6e:	68fb      	ldr	r3, [r7, #12]
 8026f70:	685b      	ldr	r3, [r3, #4]
 8026f72:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8026f76:	68fb      	ldr	r3, [r7, #12]
 8026f78:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8026f7a:	683b      	ldr	r3, [r7, #0]
 8026f7c:	681b      	ldr	r3, [r3, #0]
 8026f7e:	2b10      	cmp	r3, #16
 8026f80:	d111      	bne.n	8026fa6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8026f82:	4b10      	ldr	r3, [pc, #64]	; (8026fc4 <HAL_ADC_ConfigChannel+0x23c>)
 8026f84:	681b      	ldr	r3, [r3, #0]
 8026f86:	4a10      	ldr	r2, [pc, #64]	; (8026fc8 <HAL_ADC_ConfigChannel+0x240>)
 8026f88:	fba2 2303 	umull	r2, r3, r2, r3
 8026f8c:	0c9a      	lsrs	r2, r3, #18
 8026f8e:	4613      	mov	r3, r2
 8026f90:	009b      	lsls	r3, r3, #2
 8026f92:	4413      	add	r3, r2
 8026f94:	005b      	lsls	r3, r3, #1
 8026f96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8026f98:	e002      	b.n	8026fa0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8026f9a:	68bb      	ldr	r3, [r7, #8]
 8026f9c:	3b01      	subs	r3, #1
 8026f9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8026fa0:	68bb      	ldr	r3, [r7, #8]
 8026fa2:	2b00      	cmp	r3, #0
 8026fa4:	d1f9      	bne.n	8026f9a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8026fa6:	687b      	ldr	r3, [r7, #4]
 8026fa8:	2200      	movs	r2, #0
 8026faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8026fae:	2300      	movs	r3, #0
}
 8026fb0:	4618      	mov	r0, r3
 8026fb2:	3714      	adds	r7, #20
 8026fb4:	46bd      	mov	sp, r7
 8026fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026fba:	4770      	bx	lr
 8026fbc:	40012300 	.word	0x40012300
 8026fc0:	40012000 	.word	0x40012000
 8026fc4:	20000014 	.word	0x20000014
 8026fc8:	431bde83 	.word	0x431bde83

08026fcc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8026fcc:	b480      	push	{r7}
 8026fce:	b085      	sub	sp, #20
 8026fd0:	af00      	add	r7, sp, #0
 8026fd2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8026fd4:	4b79      	ldr	r3, [pc, #484]	; (80271bc <ADC_Init+0x1f0>)
 8026fd6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8026fd8:	68fb      	ldr	r3, [r7, #12]
 8026fda:	685b      	ldr	r3, [r3, #4]
 8026fdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8026fe0:	68fb      	ldr	r3, [r7, #12]
 8026fe2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8026fe4:	68fb      	ldr	r3, [r7, #12]
 8026fe6:	685a      	ldr	r2, [r3, #4]
 8026fe8:	687b      	ldr	r3, [r7, #4]
 8026fea:	685b      	ldr	r3, [r3, #4]
 8026fec:	431a      	orrs	r2, r3
 8026fee:	68fb      	ldr	r3, [r7, #12]
 8026ff0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8026ff2:	687b      	ldr	r3, [r7, #4]
 8026ff4:	681b      	ldr	r3, [r3, #0]
 8026ff6:	685a      	ldr	r2, [r3, #4]
 8026ff8:	687b      	ldr	r3, [r7, #4]
 8026ffa:	681b      	ldr	r3, [r3, #0]
 8026ffc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8027000:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8027002:	687b      	ldr	r3, [r7, #4]
 8027004:	681b      	ldr	r3, [r3, #0]
 8027006:	6859      	ldr	r1, [r3, #4]
 8027008:	687b      	ldr	r3, [r7, #4]
 802700a:	691b      	ldr	r3, [r3, #16]
 802700c:	021a      	lsls	r2, r3, #8
 802700e:	687b      	ldr	r3, [r7, #4]
 8027010:	681b      	ldr	r3, [r3, #0]
 8027012:	430a      	orrs	r2, r1
 8027014:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8027016:	687b      	ldr	r3, [r7, #4]
 8027018:	681b      	ldr	r3, [r3, #0]
 802701a:	685a      	ldr	r2, [r3, #4]
 802701c:	687b      	ldr	r3, [r7, #4]
 802701e:	681b      	ldr	r3, [r3, #0]
 8027020:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8027024:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8027026:	687b      	ldr	r3, [r7, #4]
 8027028:	681b      	ldr	r3, [r3, #0]
 802702a:	6859      	ldr	r1, [r3, #4]
 802702c:	687b      	ldr	r3, [r7, #4]
 802702e:	689a      	ldr	r2, [r3, #8]
 8027030:	687b      	ldr	r3, [r7, #4]
 8027032:	681b      	ldr	r3, [r3, #0]
 8027034:	430a      	orrs	r2, r1
 8027036:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8027038:	687b      	ldr	r3, [r7, #4]
 802703a:	681b      	ldr	r3, [r3, #0]
 802703c:	689a      	ldr	r2, [r3, #8]
 802703e:	687b      	ldr	r3, [r7, #4]
 8027040:	681b      	ldr	r3, [r3, #0]
 8027042:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8027046:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8027048:	687b      	ldr	r3, [r7, #4]
 802704a:	681b      	ldr	r3, [r3, #0]
 802704c:	6899      	ldr	r1, [r3, #8]
 802704e:	687b      	ldr	r3, [r7, #4]
 8027050:	68da      	ldr	r2, [r3, #12]
 8027052:	687b      	ldr	r3, [r7, #4]
 8027054:	681b      	ldr	r3, [r3, #0]
 8027056:	430a      	orrs	r2, r1
 8027058:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 802705a:	687b      	ldr	r3, [r7, #4]
 802705c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802705e:	4a58      	ldr	r2, [pc, #352]	; (80271c0 <ADC_Init+0x1f4>)
 8027060:	4293      	cmp	r3, r2
 8027062:	d022      	beq.n	80270aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8027064:	687b      	ldr	r3, [r7, #4]
 8027066:	681b      	ldr	r3, [r3, #0]
 8027068:	689a      	ldr	r2, [r3, #8]
 802706a:	687b      	ldr	r3, [r7, #4]
 802706c:	681b      	ldr	r3, [r3, #0]
 802706e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8027072:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8027074:	687b      	ldr	r3, [r7, #4]
 8027076:	681b      	ldr	r3, [r3, #0]
 8027078:	6899      	ldr	r1, [r3, #8]
 802707a:	687b      	ldr	r3, [r7, #4]
 802707c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802707e:	687b      	ldr	r3, [r7, #4]
 8027080:	681b      	ldr	r3, [r3, #0]
 8027082:	430a      	orrs	r2, r1
 8027084:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8027086:	687b      	ldr	r3, [r7, #4]
 8027088:	681b      	ldr	r3, [r3, #0]
 802708a:	689a      	ldr	r2, [r3, #8]
 802708c:	687b      	ldr	r3, [r7, #4]
 802708e:	681b      	ldr	r3, [r3, #0]
 8027090:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8027094:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8027096:	687b      	ldr	r3, [r7, #4]
 8027098:	681b      	ldr	r3, [r3, #0]
 802709a:	6899      	ldr	r1, [r3, #8]
 802709c:	687b      	ldr	r3, [r7, #4]
 802709e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80270a0:	687b      	ldr	r3, [r7, #4]
 80270a2:	681b      	ldr	r3, [r3, #0]
 80270a4:	430a      	orrs	r2, r1
 80270a6:	609a      	str	r2, [r3, #8]
 80270a8:	e00f      	b.n	80270ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80270aa:	687b      	ldr	r3, [r7, #4]
 80270ac:	681b      	ldr	r3, [r3, #0]
 80270ae:	689a      	ldr	r2, [r3, #8]
 80270b0:	687b      	ldr	r3, [r7, #4]
 80270b2:	681b      	ldr	r3, [r3, #0]
 80270b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80270b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80270ba:	687b      	ldr	r3, [r7, #4]
 80270bc:	681b      	ldr	r3, [r3, #0]
 80270be:	689a      	ldr	r2, [r3, #8]
 80270c0:	687b      	ldr	r3, [r7, #4]
 80270c2:	681b      	ldr	r3, [r3, #0]
 80270c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80270c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80270ca:	687b      	ldr	r3, [r7, #4]
 80270cc:	681b      	ldr	r3, [r3, #0]
 80270ce:	689a      	ldr	r2, [r3, #8]
 80270d0:	687b      	ldr	r3, [r7, #4]
 80270d2:	681b      	ldr	r3, [r3, #0]
 80270d4:	f022 0202 	bic.w	r2, r2, #2
 80270d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80270da:	687b      	ldr	r3, [r7, #4]
 80270dc:	681b      	ldr	r3, [r3, #0]
 80270de:	6899      	ldr	r1, [r3, #8]
 80270e0:	687b      	ldr	r3, [r7, #4]
 80270e2:	7e1b      	ldrb	r3, [r3, #24]
 80270e4:	005a      	lsls	r2, r3, #1
 80270e6:	687b      	ldr	r3, [r7, #4]
 80270e8:	681b      	ldr	r3, [r3, #0]
 80270ea:	430a      	orrs	r2, r1
 80270ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80270ee:	687b      	ldr	r3, [r7, #4]
 80270f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80270f4:	2b00      	cmp	r3, #0
 80270f6:	d01b      	beq.n	8027130 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80270f8:	687b      	ldr	r3, [r7, #4]
 80270fa:	681b      	ldr	r3, [r3, #0]
 80270fc:	685a      	ldr	r2, [r3, #4]
 80270fe:	687b      	ldr	r3, [r7, #4]
 8027100:	681b      	ldr	r3, [r3, #0]
 8027102:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8027106:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8027108:	687b      	ldr	r3, [r7, #4]
 802710a:	681b      	ldr	r3, [r3, #0]
 802710c:	685a      	ldr	r2, [r3, #4]
 802710e:	687b      	ldr	r3, [r7, #4]
 8027110:	681b      	ldr	r3, [r3, #0]
 8027112:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8027116:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8027118:	687b      	ldr	r3, [r7, #4]
 802711a:	681b      	ldr	r3, [r3, #0]
 802711c:	6859      	ldr	r1, [r3, #4]
 802711e:	687b      	ldr	r3, [r7, #4]
 8027120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027122:	3b01      	subs	r3, #1
 8027124:	035a      	lsls	r2, r3, #13
 8027126:	687b      	ldr	r3, [r7, #4]
 8027128:	681b      	ldr	r3, [r3, #0]
 802712a:	430a      	orrs	r2, r1
 802712c:	605a      	str	r2, [r3, #4]
 802712e:	e007      	b.n	8027140 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8027130:	687b      	ldr	r3, [r7, #4]
 8027132:	681b      	ldr	r3, [r3, #0]
 8027134:	685a      	ldr	r2, [r3, #4]
 8027136:	687b      	ldr	r3, [r7, #4]
 8027138:	681b      	ldr	r3, [r3, #0]
 802713a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802713e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8027140:	687b      	ldr	r3, [r7, #4]
 8027142:	681b      	ldr	r3, [r3, #0]
 8027144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8027146:	687b      	ldr	r3, [r7, #4]
 8027148:	681b      	ldr	r3, [r3, #0]
 802714a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 802714e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8027150:	687b      	ldr	r3, [r7, #4]
 8027152:	681b      	ldr	r3, [r3, #0]
 8027154:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8027156:	687b      	ldr	r3, [r7, #4]
 8027158:	69db      	ldr	r3, [r3, #28]
 802715a:	3b01      	subs	r3, #1
 802715c:	051a      	lsls	r2, r3, #20
 802715e:	687b      	ldr	r3, [r7, #4]
 8027160:	681b      	ldr	r3, [r3, #0]
 8027162:	430a      	orrs	r2, r1
 8027164:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8027166:	687b      	ldr	r3, [r7, #4]
 8027168:	681b      	ldr	r3, [r3, #0]
 802716a:	689a      	ldr	r2, [r3, #8]
 802716c:	687b      	ldr	r3, [r7, #4]
 802716e:	681b      	ldr	r3, [r3, #0]
 8027170:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8027174:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8027176:	687b      	ldr	r3, [r7, #4]
 8027178:	681b      	ldr	r3, [r3, #0]
 802717a:	6899      	ldr	r1, [r3, #8]
 802717c:	687b      	ldr	r3, [r7, #4]
 802717e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8027182:	025a      	lsls	r2, r3, #9
 8027184:	687b      	ldr	r3, [r7, #4]
 8027186:	681b      	ldr	r3, [r3, #0]
 8027188:	430a      	orrs	r2, r1
 802718a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 802718c:	687b      	ldr	r3, [r7, #4]
 802718e:	681b      	ldr	r3, [r3, #0]
 8027190:	689a      	ldr	r2, [r3, #8]
 8027192:	687b      	ldr	r3, [r7, #4]
 8027194:	681b      	ldr	r3, [r3, #0]
 8027196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802719a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 802719c:	687b      	ldr	r3, [r7, #4]
 802719e:	681b      	ldr	r3, [r3, #0]
 80271a0:	6899      	ldr	r1, [r3, #8]
 80271a2:	687b      	ldr	r3, [r7, #4]
 80271a4:	695b      	ldr	r3, [r3, #20]
 80271a6:	029a      	lsls	r2, r3, #10
 80271a8:	687b      	ldr	r3, [r7, #4]
 80271aa:	681b      	ldr	r3, [r3, #0]
 80271ac:	430a      	orrs	r2, r1
 80271ae:	609a      	str	r2, [r3, #8]
}
 80271b0:	bf00      	nop
 80271b2:	3714      	adds	r7, #20
 80271b4:	46bd      	mov	sp, r7
 80271b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80271ba:	4770      	bx	lr
 80271bc:	40012300 	.word	0x40012300
 80271c0:	0f000001 	.word	0x0f000001

080271c4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80271c4:	b580      	push	{r7, lr}
 80271c6:	b084      	sub	sp, #16
 80271c8:	af00      	add	r7, sp, #0
 80271ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80271cc:	687b      	ldr	r3, [r7, #4]
 80271ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80271d0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80271d2:	68fb      	ldr	r3, [r7, #12]
 80271d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80271d6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80271da:	2b00      	cmp	r3, #0
 80271dc:	d13c      	bne.n	8027258 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80271de:	68fb      	ldr	r3, [r7, #12]
 80271e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80271e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80271e6:	68fb      	ldr	r3, [r7, #12]
 80271e8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80271ea:	68fb      	ldr	r3, [r7, #12]
 80271ec:	681b      	ldr	r3, [r3, #0]
 80271ee:	689b      	ldr	r3, [r3, #8]
 80271f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80271f4:	2b00      	cmp	r3, #0
 80271f6:	d12b      	bne.n	8027250 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80271f8:	68fb      	ldr	r3, [r7, #12]
 80271fa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80271fc:	2b00      	cmp	r3, #0
 80271fe:	d127      	bne.n	8027250 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8027200:	68fb      	ldr	r3, [r7, #12]
 8027202:	681b      	ldr	r3, [r3, #0]
 8027204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027206:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 802720a:	2b00      	cmp	r3, #0
 802720c:	d006      	beq.n	802721c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 802720e:	68fb      	ldr	r3, [r7, #12]
 8027210:	681b      	ldr	r3, [r3, #0]
 8027212:	689b      	ldr	r3, [r3, #8]
 8027214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8027218:	2b00      	cmp	r3, #0
 802721a:	d119      	bne.n	8027250 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 802721c:	68fb      	ldr	r3, [r7, #12]
 802721e:	681b      	ldr	r3, [r3, #0]
 8027220:	685a      	ldr	r2, [r3, #4]
 8027222:	68fb      	ldr	r3, [r7, #12]
 8027224:	681b      	ldr	r3, [r3, #0]
 8027226:	f022 0220 	bic.w	r2, r2, #32
 802722a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 802722c:	68fb      	ldr	r3, [r7, #12]
 802722e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027230:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8027234:	68fb      	ldr	r3, [r7, #12]
 8027236:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8027238:	68fb      	ldr	r3, [r7, #12]
 802723a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802723c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8027240:	2b00      	cmp	r3, #0
 8027242:	d105      	bne.n	8027250 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8027244:	68fb      	ldr	r3, [r7, #12]
 8027246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027248:	f043 0201 	orr.w	r2, r3, #1
 802724c:	68fb      	ldr	r3, [r7, #12]
 802724e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8027250:	68f8      	ldr	r0, [r7, #12]
 8027252:	f7ff fd7b 	bl	8026d4c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8027256:	e00e      	b.n	8027276 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8027258:	68fb      	ldr	r3, [r7, #12]
 802725a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802725c:	f003 0310 	and.w	r3, r3, #16
 8027260:	2b00      	cmp	r3, #0
 8027262:	d003      	beq.n	802726c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8027264:	68f8      	ldr	r0, [r7, #12]
 8027266:	f7ff fd85 	bl	8026d74 <HAL_ADC_ErrorCallback>
}
 802726a:	e004      	b.n	8027276 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 802726c:	68fb      	ldr	r3, [r7, #12]
 802726e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8027270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8027272:	6878      	ldr	r0, [r7, #4]
 8027274:	4798      	blx	r3
}
 8027276:	bf00      	nop
 8027278:	3710      	adds	r7, #16
 802727a:	46bd      	mov	sp, r7
 802727c:	bd80      	pop	{r7, pc}

0802727e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 802727e:	b580      	push	{r7, lr}
 8027280:	b084      	sub	sp, #16
 8027282:	af00      	add	r7, sp, #0
 8027284:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8027286:	687b      	ldr	r3, [r7, #4]
 8027288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802728a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 802728c:	68f8      	ldr	r0, [r7, #12]
 802728e:	f7ff fd67 	bl	8026d60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8027292:	bf00      	nop
 8027294:	3710      	adds	r7, #16
 8027296:	46bd      	mov	sp, r7
 8027298:	bd80      	pop	{r7, pc}

0802729a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 802729a:	b580      	push	{r7, lr}
 802729c:	b084      	sub	sp, #16
 802729e:	af00      	add	r7, sp, #0
 80272a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80272a2:	687b      	ldr	r3, [r7, #4]
 80272a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80272a6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80272a8:	68fb      	ldr	r3, [r7, #12]
 80272aa:	2240      	movs	r2, #64	; 0x40
 80272ac:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80272ae:	68fb      	ldr	r3, [r7, #12]
 80272b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80272b2:	f043 0204 	orr.w	r2, r3, #4
 80272b6:	68fb      	ldr	r3, [r7, #12]
 80272b8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80272ba:	68f8      	ldr	r0, [r7, #12]
 80272bc:	f7ff fd5a 	bl	8026d74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80272c0:	bf00      	nop
 80272c2:	3710      	adds	r7, #16
 80272c4:	46bd      	mov	sp, r7
 80272c6:	bd80      	pop	{r7, pc}

080272c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80272c8:	b480      	push	{r7}
 80272ca:	b085      	sub	sp, #20
 80272cc:	af00      	add	r7, sp, #0
 80272ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80272d0:	687b      	ldr	r3, [r7, #4]
 80272d2:	f003 0307 	and.w	r3, r3, #7
 80272d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80272d8:	4b0c      	ldr	r3, [pc, #48]	; (802730c <__NVIC_SetPriorityGrouping+0x44>)
 80272da:	68db      	ldr	r3, [r3, #12]
 80272dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80272de:	68ba      	ldr	r2, [r7, #8]
 80272e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80272e4:	4013      	ands	r3, r2
 80272e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80272e8:	68fb      	ldr	r3, [r7, #12]
 80272ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80272ec:	68bb      	ldr	r3, [r7, #8]
 80272ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80272f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80272f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80272f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80272fa:	4a04      	ldr	r2, [pc, #16]	; (802730c <__NVIC_SetPriorityGrouping+0x44>)
 80272fc:	68bb      	ldr	r3, [r7, #8]
 80272fe:	60d3      	str	r3, [r2, #12]
}
 8027300:	bf00      	nop
 8027302:	3714      	adds	r7, #20
 8027304:	46bd      	mov	sp, r7
 8027306:	f85d 7b04 	ldr.w	r7, [sp], #4
 802730a:	4770      	bx	lr
 802730c:	e000ed00 	.word	0xe000ed00

08027310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8027310:	b480      	push	{r7}
 8027312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8027314:	4b04      	ldr	r3, [pc, #16]	; (8027328 <__NVIC_GetPriorityGrouping+0x18>)
 8027316:	68db      	ldr	r3, [r3, #12]
 8027318:	0a1b      	lsrs	r3, r3, #8
 802731a:	f003 0307 	and.w	r3, r3, #7
}
 802731e:	4618      	mov	r0, r3
 8027320:	46bd      	mov	sp, r7
 8027322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027326:	4770      	bx	lr
 8027328:	e000ed00 	.word	0xe000ed00

0802732c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 802732c:	b480      	push	{r7}
 802732e:	b083      	sub	sp, #12
 8027330:	af00      	add	r7, sp, #0
 8027332:	4603      	mov	r3, r0
 8027334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8027336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802733a:	2b00      	cmp	r3, #0
 802733c:	db0b      	blt.n	8027356 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 802733e:	79fb      	ldrb	r3, [r7, #7]
 8027340:	f003 021f 	and.w	r2, r3, #31
 8027344:	4907      	ldr	r1, [pc, #28]	; (8027364 <__NVIC_EnableIRQ+0x38>)
 8027346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802734a:	095b      	lsrs	r3, r3, #5
 802734c:	2001      	movs	r0, #1
 802734e:	fa00 f202 	lsl.w	r2, r0, r2
 8027352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8027356:	bf00      	nop
 8027358:	370c      	adds	r7, #12
 802735a:	46bd      	mov	sp, r7
 802735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027360:	4770      	bx	lr
 8027362:	bf00      	nop
 8027364:	e000e100 	.word	0xe000e100

08027368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8027368:	b480      	push	{r7}
 802736a:	b083      	sub	sp, #12
 802736c:	af00      	add	r7, sp, #0
 802736e:	4603      	mov	r3, r0
 8027370:	6039      	str	r1, [r7, #0]
 8027372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8027374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027378:	2b00      	cmp	r3, #0
 802737a:	db0a      	blt.n	8027392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802737c:	683b      	ldr	r3, [r7, #0]
 802737e:	b2da      	uxtb	r2, r3
 8027380:	490c      	ldr	r1, [pc, #48]	; (80273b4 <__NVIC_SetPriority+0x4c>)
 8027382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8027386:	0112      	lsls	r2, r2, #4
 8027388:	b2d2      	uxtb	r2, r2
 802738a:	440b      	add	r3, r1
 802738c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8027390:	e00a      	b.n	80273a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8027392:	683b      	ldr	r3, [r7, #0]
 8027394:	b2da      	uxtb	r2, r3
 8027396:	4908      	ldr	r1, [pc, #32]	; (80273b8 <__NVIC_SetPriority+0x50>)
 8027398:	79fb      	ldrb	r3, [r7, #7]
 802739a:	f003 030f 	and.w	r3, r3, #15
 802739e:	3b04      	subs	r3, #4
 80273a0:	0112      	lsls	r2, r2, #4
 80273a2:	b2d2      	uxtb	r2, r2
 80273a4:	440b      	add	r3, r1
 80273a6:	761a      	strb	r2, [r3, #24]
}
 80273a8:	bf00      	nop
 80273aa:	370c      	adds	r7, #12
 80273ac:	46bd      	mov	sp, r7
 80273ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80273b2:	4770      	bx	lr
 80273b4:	e000e100 	.word	0xe000e100
 80273b8:	e000ed00 	.word	0xe000ed00

080273bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80273bc:	b480      	push	{r7}
 80273be:	b089      	sub	sp, #36	; 0x24
 80273c0:	af00      	add	r7, sp, #0
 80273c2:	60f8      	str	r0, [r7, #12]
 80273c4:	60b9      	str	r1, [r7, #8]
 80273c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80273c8:	68fb      	ldr	r3, [r7, #12]
 80273ca:	f003 0307 	and.w	r3, r3, #7
 80273ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80273d0:	69fb      	ldr	r3, [r7, #28]
 80273d2:	f1c3 0307 	rsb	r3, r3, #7
 80273d6:	2b04      	cmp	r3, #4
 80273d8:	bf28      	it	cs
 80273da:	2304      	movcs	r3, #4
 80273dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80273de:	69fb      	ldr	r3, [r7, #28]
 80273e0:	3304      	adds	r3, #4
 80273e2:	2b06      	cmp	r3, #6
 80273e4:	d902      	bls.n	80273ec <NVIC_EncodePriority+0x30>
 80273e6:	69fb      	ldr	r3, [r7, #28]
 80273e8:	3b03      	subs	r3, #3
 80273ea:	e000      	b.n	80273ee <NVIC_EncodePriority+0x32>
 80273ec:	2300      	movs	r3, #0
 80273ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80273f0:	f04f 32ff 	mov.w	r2, #4294967295
 80273f4:	69bb      	ldr	r3, [r7, #24]
 80273f6:	fa02 f303 	lsl.w	r3, r2, r3
 80273fa:	43da      	mvns	r2, r3
 80273fc:	68bb      	ldr	r3, [r7, #8]
 80273fe:	401a      	ands	r2, r3
 8027400:	697b      	ldr	r3, [r7, #20]
 8027402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8027404:	f04f 31ff 	mov.w	r1, #4294967295
 8027408:	697b      	ldr	r3, [r7, #20]
 802740a:	fa01 f303 	lsl.w	r3, r1, r3
 802740e:	43d9      	mvns	r1, r3
 8027410:	687b      	ldr	r3, [r7, #4]
 8027412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8027414:	4313      	orrs	r3, r2
         );
}
 8027416:	4618      	mov	r0, r3
 8027418:	3724      	adds	r7, #36	; 0x24
 802741a:	46bd      	mov	sp, r7
 802741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027420:	4770      	bx	lr
	...

08027424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8027424:	b580      	push	{r7, lr}
 8027426:	b082      	sub	sp, #8
 8027428:	af00      	add	r7, sp, #0
 802742a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 802742c:	687b      	ldr	r3, [r7, #4]
 802742e:	3b01      	subs	r3, #1
 8027430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8027434:	d301      	bcc.n	802743a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8027436:	2301      	movs	r3, #1
 8027438:	e00f      	b.n	802745a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 802743a:	4a0a      	ldr	r2, [pc, #40]	; (8027464 <SysTick_Config+0x40>)
 802743c:	687b      	ldr	r3, [r7, #4]
 802743e:	3b01      	subs	r3, #1
 8027440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8027442:	210f      	movs	r1, #15
 8027444:	f04f 30ff 	mov.w	r0, #4294967295
 8027448:	f7ff ff8e 	bl	8027368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 802744c:	4b05      	ldr	r3, [pc, #20]	; (8027464 <SysTick_Config+0x40>)
 802744e:	2200      	movs	r2, #0
 8027450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8027452:	4b04      	ldr	r3, [pc, #16]	; (8027464 <SysTick_Config+0x40>)
 8027454:	2207      	movs	r2, #7
 8027456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8027458:	2300      	movs	r3, #0
}
 802745a:	4618      	mov	r0, r3
 802745c:	3708      	adds	r7, #8
 802745e:	46bd      	mov	sp, r7
 8027460:	bd80      	pop	{r7, pc}
 8027462:	bf00      	nop
 8027464:	e000e010 	.word	0xe000e010

08027468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8027468:	b580      	push	{r7, lr}
 802746a:	b082      	sub	sp, #8
 802746c:	af00      	add	r7, sp, #0
 802746e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8027470:	6878      	ldr	r0, [r7, #4]
 8027472:	f7ff ff29 	bl	80272c8 <__NVIC_SetPriorityGrouping>
}
 8027476:	bf00      	nop
 8027478:	3708      	adds	r7, #8
 802747a:	46bd      	mov	sp, r7
 802747c:	bd80      	pop	{r7, pc}

0802747e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 802747e:	b580      	push	{r7, lr}
 8027480:	b086      	sub	sp, #24
 8027482:	af00      	add	r7, sp, #0
 8027484:	4603      	mov	r3, r0
 8027486:	60b9      	str	r1, [r7, #8]
 8027488:	607a      	str	r2, [r7, #4]
 802748a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 802748c:	2300      	movs	r3, #0
 802748e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8027490:	f7ff ff3e 	bl	8027310 <__NVIC_GetPriorityGrouping>
 8027494:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8027496:	687a      	ldr	r2, [r7, #4]
 8027498:	68b9      	ldr	r1, [r7, #8]
 802749a:	6978      	ldr	r0, [r7, #20]
 802749c:	f7ff ff8e 	bl	80273bc <NVIC_EncodePriority>
 80274a0:	4602      	mov	r2, r0
 80274a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80274a6:	4611      	mov	r1, r2
 80274a8:	4618      	mov	r0, r3
 80274aa:	f7ff ff5d 	bl	8027368 <__NVIC_SetPriority>
}
 80274ae:	bf00      	nop
 80274b0:	3718      	adds	r7, #24
 80274b2:	46bd      	mov	sp, r7
 80274b4:	bd80      	pop	{r7, pc}

080274b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80274b6:	b580      	push	{r7, lr}
 80274b8:	b082      	sub	sp, #8
 80274ba:	af00      	add	r7, sp, #0
 80274bc:	4603      	mov	r3, r0
 80274be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80274c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80274c4:	4618      	mov	r0, r3
 80274c6:	f7ff ff31 	bl	802732c <__NVIC_EnableIRQ>
}
 80274ca:	bf00      	nop
 80274cc:	3708      	adds	r7, #8
 80274ce:	46bd      	mov	sp, r7
 80274d0:	bd80      	pop	{r7, pc}

080274d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80274d2:	b580      	push	{r7, lr}
 80274d4:	b082      	sub	sp, #8
 80274d6:	af00      	add	r7, sp, #0
 80274d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80274da:	6878      	ldr	r0, [r7, #4]
 80274dc:	f7ff ffa2 	bl	8027424 <SysTick_Config>
 80274e0:	4603      	mov	r3, r0
}
 80274e2:	4618      	mov	r0, r3
 80274e4:	3708      	adds	r7, #8
 80274e6:	46bd      	mov	sp, r7
 80274e8:	bd80      	pop	{r7, pc}
	...

080274ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80274ec:	b580      	push	{r7, lr}
 80274ee:	b086      	sub	sp, #24
 80274f0:	af00      	add	r7, sp, #0
 80274f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80274f4:	2300      	movs	r3, #0
 80274f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80274f8:	f7ff fac4 	bl	8026a84 <HAL_GetTick>
 80274fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80274fe:	687b      	ldr	r3, [r7, #4]
 8027500:	2b00      	cmp	r3, #0
 8027502:	d101      	bne.n	8027508 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8027504:	2301      	movs	r3, #1
 8027506:	e099      	b.n	802763c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8027508:	687b      	ldr	r3, [r7, #4]
 802750a:	2200      	movs	r2, #0
 802750c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8027510:	687b      	ldr	r3, [r7, #4]
 8027512:	2202      	movs	r2, #2
 8027514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8027518:	687b      	ldr	r3, [r7, #4]
 802751a:	681b      	ldr	r3, [r3, #0]
 802751c:	681a      	ldr	r2, [r3, #0]
 802751e:	687b      	ldr	r3, [r7, #4]
 8027520:	681b      	ldr	r3, [r3, #0]
 8027522:	f022 0201 	bic.w	r2, r2, #1
 8027526:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8027528:	e00f      	b.n	802754a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 802752a:	f7ff faab 	bl	8026a84 <HAL_GetTick>
 802752e:	4602      	mov	r2, r0
 8027530:	693b      	ldr	r3, [r7, #16]
 8027532:	1ad3      	subs	r3, r2, r3
 8027534:	2b05      	cmp	r3, #5
 8027536:	d908      	bls.n	802754a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8027538:	687b      	ldr	r3, [r7, #4]
 802753a:	2220      	movs	r2, #32
 802753c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 802753e:	687b      	ldr	r3, [r7, #4]
 8027540:	2203      	movs	r2, #3
 8027542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8027546:	2303      	movs	r3, #3
 8027548:	e078      	b.n	802763c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 802754a:	687b      	ldr	r3, [r7, #4]
 802754c:	681b      	ldr	r3, [r3, #0]
 802754e:	681b      	ldr	r3, [r3, #0]
 8027550:	f003 0301 	and.w	r3, r3, #1
 8027554:	2b00      	cmp	r3, #0
 8027556:	d1e8      	bne.n	802752a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8027558:	687b      	ldr	r3, [r7, #4]
 802755a:	681b      	ldr	r3, [r3, #0]
 802755c:	681b      	ldr	r3, [r3, #0]
 802755e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8027560:	697a      	ldr	r2, [r7, #20]
 8027562:	4b38      	ldr	r3, [pc, #224]	; (8027644 <HAL_DMA_Init+0x158>)
 8027564:	4013      	ands	r3, r2
 8027566:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8027568:	687b      	ldr	r3, [r7, #4]
 802756a:	685a      	ldr	r2, [r3, #4]
 802756c:	687b      	ldr	r3, [r7, #4]
 802756e:	689b      	ldr	r3, [r3, #8]
 8027570:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8027572:	687b      	ldr	r3, [r7, #4]
 8027574:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8027576:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8027578:	687b      	ldr	r3, [r7, #4]
 802757a:	691b      	ldr	r3, [r3, #16]
 802757c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802757e:	687b      	ldr	r3, [r7, #4]
 8027580:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8027582:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8027584:	687b      	ldr	r3, [r7, #4]
 8027586:	699b      	ldr	r3, [r3, #24]
 8027588:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 802758a:	687b      	ldr	r3, [r7, #4]
 802758c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802758e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8027590:	687b      	ldr	r3, [r7, #4]
 8027592:	6a1b      	ldr	r3, [r3, #32]
 8027594:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8027596:	697a      	ldr	r2, [r7, #20]
 8027598:	4313      	orrs	r3, r2
 802759a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 802759c:	687b      	ldr	r3, [r7, #4]
 802759e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80275a0:	2b04      	cmp	r3, #4
 80275a2:	d107      	bne.n	80275b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80275a4:	687b      	ldr	r3, [r7, #4]
 80275a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80275a8:	687b      	ldr	r3, [r7, #4]
 80275aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80275ac:	4313      	orrs	r3, r2
 80275ae:	697a      	ldr	r2, [r7, #20]
 80275b0:	4313      	orrs	r3, r2
 80275b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80275b4:	687b      	ldr	r3, [r7, #4]
 80275b6:	681b      	ldr	r3, [r3, #0]
 80275b8:	697a      	ldr	r2, [r7, #20]
 80275ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80275bc:	687b      	ldr	r3, [r7, #4]
 80275be:	681b      	ldr	r3, [r3, #0]
 80275c0:	695b      	ldr	r3, [r3, #20]
 80275c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80275c4:	697b      	ldr	r3, [r7, #20]
 80275c6:	f023 0307 	bic.w	r3, r3, #7
 80275ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80275cc:	687b      	ldr	r3, [r7, #4]
 80275ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80275d0:	697a      	ldr	r2, [r7, #20]
 80275d2:	4313      	orrs	r3, r2
 80275d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80275d6:	687b      	ldr	r3, [r7, #4]
 80275d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80275da:	2b04      	cmp	r3, #4
 80275dc:	d117      	bne.n	802760e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80275de:	687b      	ldr	r3, [r7, #4]
 80275e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80275e2:	697a      	ldr	r2, [r7, #20]
 80275e4:	4313      	orrs	r3, r2
 80275e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80275e8:	687b      	ldr	r3, [r7, #4]
 80275ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80275ec:	2b00      	cmp	r3, #0
 80275ee:	d00e      	beq.n	802760e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80275f0:	6878      	ldr	r0, [r7, #4]
 80275f2:	f000 fa6f 	bl	8027ad4 <DMA_CheckFifoParam>
 80275f6:	4603      	mov	r3, r0
 80275f8:	2b00      	cmp	r3, #0
 80275fa:	d008      	beq.n	802760e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80275fc:	687b      	ldr	r3, [r7, #4]
 80275fe:	2240      	movs	r2, #64	; 0x40
 8027600:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8027602:	687b      	ldr	r3, [r7, #4]
 8027604:	2201      	movs	r2, #1
 8027606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 802760a:	2301      	movs	r3, #1
 802760c:	e016      	b.n	802763c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 802760e:	687b      	ldr	r3, [r7, #4]
 8027610:	681b      	ldr	r3, [r3, #0]
 8027612:	697a      	ldr	r2, [r7, #20]
 8027614:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8027616:	6878      	ldr	r0, [r7, #4]
 8027618:	f000 fa26 	bl	8027a68 <DMA_CalcBaseAndBitshift>
 802761c:	4603      	mov	r3, r0
 802761e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8027620:	687b      	ldr	r3, [r7, #4]
 8027622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027624:	223f      	movs	r2, #63	; 0x3f
 8027626:	409a      	lsls	r2, r3
 8027628:	68fb      	ldr	r3, [r7, #12]
 802762a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802762c:	687b      	ldr	r3, [r7, #4]
 802762e:	2200      	movs	r2, #0
 8027630:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8027632:	687b      	ldr	r3, [r7, #4]
 8027634:	2201      	movs	r2, #1
 8027636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 802763a:	2300      	movs	r3, #0
}
 802763c:	4618      	mov	r0, r3
 802763e:	3718      	adds	r7, #24
 8027640:	46bd      	mov	sp, r7
 8027642:	bd80      	pop	{r7, pc}
 8027644:	f010803f 	.word	0xf010803f

08027648 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8027648:	b580      	push	{r7, lr}
 802764a:	b086      	sub	sp, #24
 802764c:	af00      	add	r7, sp, #0
 802764e:	60f8      	str	r0, [r7, #12]
 8027650:	60b9      	str	r1, [r7, #8]
 8027652:	607a      	str	r2, [r7, #4]
 8027654:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8027656:	2300      	movs	r3, #0
 8027658:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 802765a:	68fb      	ldr	r3, [r7, #12]
 802765c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802765e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8027660:	68fb      	ldr	r3, [r7, #12]
 8027662:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8027666:	2b01      	cmp	r3, #1
 8027668:	d101      	bne.n	802766e <HAL_DMA_Start_IT+0x26>
 802766a:	2302      	movs	r3, #2
 802766c:	e040      	b.n	80276f0 <HAL_DMA_Start_IT+0xa8>
 802766e:	68fb      	ldr	r3, [r7, #12]
 8027670:	2201      	movs	r2, #1
 8027672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8027676:	68fb      	ldr	r3, [r7, #12]
 8027678:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802767c:	b2db      	uxtb	r3, r3
 802767e:	2b01      	cmp	r3, #1
 8027680:	d12f      	bne.n	80276e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8027682:	68fb      	ldr	r3, [r7, #12]
 8027684:	2202      	movs	r2, #2
 8027686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 802768a:	68fb      	ldr	r3, [r7, #12]
 802768c:	2200      	movs	r2, #0
 802768e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8027690:	683b      	ldr	r3, [r7, #0]
 8027692:	687a      	ldr	r2, [r7, #4]
 8027694:	68b9      	ldr	r1, [r7, #8]
 8027696:	68f8      	ldr	r0, [r7, #12]
 8027698:	f000 f9b8 	bl	8027a0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 802769c:	68fb      	ldr	r3, [r7, #12]
 802769e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80276a0:	223f      	movs	r2, #63	; 0x3f
 80276a2:	409a      	lsls	r2, r3
 80276a4:	693b      	ldr	r3, [r7, #16]
 80276a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80276a8:	68fb      	ldr	r3, [r7, #12]
 80276aa:	681b      	ldr	r3, [r3, #0]
 80276ac:	681a      	ldr	r2, [r3, #0]
 80276ae:	68fb      	ldr	r3, [r7, #12]
 80276b0:	681b      	ldr	r3, [r3, #0]
 80276b2:	f042 0216 	orr.w	r2, r2, #22
 80276b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80276b8:	68fb      	ldr	r3, [r7, #12]
 80276ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80276bc:	2b00      	cmp	r3, #0
 80276be:	d007      	beq.n	80276d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80276c0:	68fb      	ldr	r3, [r7, #12]
 80276c2:	681b      	ldr	r3, [r3, #0]
 80276c4:	681a      	ldr	r2, [r3, #0]
 80276c6:	68fb      	ldr	r3, [r7, #12]
 80276c8:	681b      	ldr	r3, [r3, #0]
 80276ca:	f042 0208 	orr.w	r2, r2, #8
 80276ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80276d0:	68fb      	ldr	r3, [r7, #12]
 80276d2:	681b      	ldr	r3, [r3, #0]
 80276d4:	681a      	ldr	r2, [r3, #0]
 80276d6:	68fb      	ldr	r3, [r7, #12]
 80276d8:	681b      	ldr	r3, [r3, #0]
 80276da:	f042 0201 	orr.w	r2, r2, #1
 80276de:	601a      	str	r2, [r3, #0]
 80276e0:	e005      	b.n	80276ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80276e2:	68fb      	ldr	r3, [r7, #12]
 80276e4:	2200      	movs	r2, #0
 80276e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80276ea:	2302      	movs	r3, #2
 80276ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80276ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80276f0:	4618      	mov	r0, r3
 80276f2:	3718      	adds	r7, #24
 80276f4:	46bd      	mov	sp, r7
 80276f6:	bd80      	pop	{r7, pc}

080276f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80276f8:	b580      	push	{r7, lr}
 80276fa:	b086      	sub	sp, #24
 80276fc:	af00      	add	r7, sp, #0
 80276fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8027700:	2300      	movs	r3, #0
 8027702:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8027704:	4b92      	ldr	r3, [pc, #584]	; (8027950 <HAL_DMA_IRQHandler+0x258>)
 8027706:	681b      	ldr	r3, [r3, #0]
 8027708:	4a92      	ldr	r2, [pc, #584]	; (8027954 <HAL_DMA_IRQHandler+0x25c>)
 802770a:	fba2 2303 	umull	r2, r3, r2, r3
 802770e:	0a9b      	lsrs	r3, r3, #10
 8027710:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8027712:	687b      	ldr	r3, [r7, #4]
 8027714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8027716:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8027718:	693b      	ldr	r3, [r7, #16]
 802771a:	681b      	ldr	r3, [r3, #0]
 802771c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 802771e:	687b      	ldr	r3, [r7, #4]
 8027720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027722:	2208      	movs	r2, #8
 8027724:	409a      	lsls	r2, r3
 8027726:	68fb      	ldr	r3, [r7, #12]
 8027728:	4013      	ands	r3, r2
 802772a:	2b00      	cmp	r3, #0
 802772c:	d01a      	beq.n	8027764 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 802772e:	687b      	ldr	r3, [r7, #4]
 8027730:	681b      	ldr	r3, [r3, #0]
 8027732:	681b      	ldr	r3, [r3, #0]
 8027734:	f003 0304 	and.w	r3, r3, #4
 8027738:	2b00      	cmp	r3, #0
 802773a:	d013      	beq.n	8027764 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 802773c:	687b      	ldr	r3, [r7, #4]
 802773e:	681b      	ldr	r3, [r3, #0]
 8027740:	681a      	ldr	r2, [r3, #0]
 8027742:	687b      	ldr	r3, [r7, #4]
 8027744:	681b      	ldr	r3, [r3, #0]
 8027746:	f022 0204 	bic.w	r2, r2, #4
 802774a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 802774c:	687b      	ldr	r3, [r7, #4]
 802774e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027750:	2208      	movs	r2, #8
 8027752:	409a      	lsls	r2, r3
 8027754:	693b      	ldr	r3, [r7, #16]
 8027756:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8027758:	687b      	ldr	r3, [r7, #4]
 802775a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802775c:	f043 0201 	orr.w	r2, r3, #1
 8027760:	687b      	ldr	r3, [r7, #4]
 8027762:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8027764:	687b      	ldr	r3, [r7, #4]
 8027766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027768:	2201      	movs	r2, #1
 802776a:	409a      	lsls	r2, r3
 802776c:	68fb      	ldr	r3, [r7, #12]
 802776e:	4013      	ands	r3, r2
 8027770:	2b00      	cmp	r3, #0
 8027772:	d012      	beq.n	802779a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8027774:	687b      	ldr	r3, [r7, #4]
 8027776:	681b      	ldr	r3, [r3, #0]
 8027778:	695b      	ldr	r3, [r3, #20]
 802777a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802777e:	2b00      	cmp	r3, #0
 8027780:	d00b      	beq.n	802779a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8027782:	687b      	ldr	r3, [r7, #4]
 8027784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8027786:	2201      	movs	r2, #1
 8027788:	409a      	lsls	r2, r3
 802778a:	693b      	ldr	r3, [r7, #16]
 802778c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 802778e:	687b      	ldr	r3, [r7, #4]
 8027790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8027792:	f043 0202 	orr.w	r2, r3, #2
 8027796:	687b      	ldr	r3, [r7, #4]
 8027798:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 802779a:	687b      	ldr	r3, [r7, #4]
 802779c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802779e:	2204      	movs	r2, #4
 80277a0:	409a      	lsls	r2, r3
 80277a2:	68fb      	ldr	r3, [r7, #12]
 80277a4:	4013      	ands	r3, r2
 80277a6:	2b00      	cmp	r3, #0
 80277a8:	d012      	beq.n	80277d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80277aa:	687b      	ldr	r3, [r7, #4]
 80277ac:	681b      	ldr	r3, [r3, #0]
 80277ae:	681b      	ldr	r3, [r3, #0]
 80277b0:	f003 0302 	and.w	r3, r3, #2
 80277b4:	2b00      	cmp	r3, #0
 80277b6:	d00b      	beq.n	80277d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80277b8:	687b      	ldr	r3, [r7, #4]
 80277ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80277bc:	2204      	movs	r2, #4
 80277be:	409a      	lsls	r2, r3
 80277c0:	693b      	ldr	r3, [r7, #16]
 80277c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80277c4:	687b      	ldr	r3, [r7, #4]
 80277c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80277c8:	f043 0204 	orr.w	r2, r3, #4
 80277cc:	687b      	ldr	r3, [r7, #4]
 80277ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80277d0:	687b      	ldr	r3, [r7, #4]
 80277d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80277d4:	2210      	movs	r2, #16
 80277d6:	409a      	lsls	r2, r3
 80277d8:	68fb      	ldr	r3, [r7, #12]
 80277da:	4013      	ands	r3, r2
 80277dc:	2b00      	cmp	r3, #0
 80277de:	d043      	beq.n	8027868 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80277e0:	687b      	ldr	r3, [r7, #4]
 80277e2:	681b      	ldr	r3, [r3, #0]
 80277e4:	681b      	ldr	r3, [r3, #0]
 80277e6:	f003 0308 	and.w	r3, r3, #8
 80277ea:	2b00      	cmp	r3, #0
 80277ec:	d03c      	beq.n	8027868 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80277ee:	687b      	ldr	r3, [r7, #4]
 80277f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80277f2:	2210      	movs	r2, #16
 80277f4:	409a      	lsls	r2, r3
 80277f6:	693b      	ldr	r3, [r7, #16]
 80277f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80277fa:	687b      	ldr	r3, [r7, #4]
 80277fc:	681b      	ldr	r3, [r3, #0]
 80277fe:	681b      	ldr	r3, [r3, #0]
 8027800:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8027804:	2b00      	cmp	r3, #0
 8027806:	d018      	beq.n	802783a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8027808:	687b      	ldr	r3, [r7, #4]
 802780a:	681b      	ldr	r3, [r3, #0]
 802780c:	681b      	ldr	r3, [r3, #0]
 802780e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8027812:	2b00      	cmp	r3, #0
 8027814:	d108      	bne.n	8027828 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8027816:	687b      	ldr	r3, [r7, #4]
 8027818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802781a:	2b00      	cmp	r3, #0
 802781c:	d024      	beq.n	8027868 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 802781e:	687b      	ldr	r3, [r7, #4]
 8027820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027822:	6878      	ldr	r0, [r7, #4]
 8027824:	4798      	blx	r3
 8027826:	e01f      	b.n	8027868 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8027828:	687b      	ldr	r3, [r7, #4]
 802782a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802782c:	2b00      	cmp	r3, #0
 802782e:	d01b      	beq.n	8027868 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8027830:	687b      	ldr	r3, [r7, #4]
 8027832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8027834:	6878      	ldr	r0, [r7, #4]
 8027836:	4798      	blx	r3
 8027838:	e016      	b.n	8027868 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 802783a:	687b      	ldr	r3, [r7, #4]
 802783c:	681b      	ldr	r3, [r3, #0]
 802783e:	681b      	ldr	r3, [r3, #0]
 8027840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027844:	2b00      	cmp	r3, #0
 8027846:	d107      	bne.n	8027858 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8027848:	687b      	ldr	r3, [r7, #4]
 802784a:	681b      	ldr	r3, [r3, #0]
 802784c:	681a      	ldr	r2, [r3, #0]
 802784e:	687b      	ldr	r3, [r7, #4]
 8027850:	681b      	ldr	r3, [r3, #0]
 8027852:	f022 0208 	bic.w	r2, r2, #8
 8027856:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8027858:	687b      	ldr	r3, [r7, #4]
 802785a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802785c:	2b00      	cmp	r3, #0
 802785e:	d003      	beq.n	8027868 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8027860:	687b      	ldr	r3, [r7, #4]
 8027862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8027864:	6878      	ldr	r0, [r7, #4]
 8027866:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8027868:	687b      	ldr	r3, [r7, #4]
 802786a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802786c:	2220      	movs	r2, #32
 802786e:	409a      	lsls	r2, r3
 8027870:	68fb      	ldr	r3, [r7, #12]
 8027872:	4013      	ands	r3, r2
 8027874:	2b00      	cmp	r3, #0
 8027876:	f000 808e 	beq.w	8027996 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 802787a:	687b      	ldr	r3, [r7, #4]
 802787c:	681b      	ldr	r3, [r3, #0]
 802787e:	681b      	ldr	r3, [r3, #0]
 8027880:	f003 0310 	and.w	r3, r3, #16
 8027884:	2b00      	cmp	r3, #0
 8027886:	f000 8086 	beq.w	8027996 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 802788a:	687b      	ldr	r3, [r7, #4]
 802788c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802788e:	2220      	movs	r2, #32
 8027890:	409a      	lsls	r2, r3
 8027892:	693b      	ldr	r3, [r7, #16]
 8027894:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8027896:	687b      	ldr	r3, [r7, #4]
 8027898:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 802789c:	b2db      	uxtb	r3, r3
 802789e:	2b05      	cmp	r3, #5
 80278a0:	d136      	bne.n	8027910 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80278a2:	687b      	ldr	r3, [r7, #4]
 80278a4:	681b      	ldr	r3, [r3, #0]
 80278a6:	681a      	ldr	r2, [r3, #0]
 80278a8:	687b      	ldr	r3, [r7, #4]
 80278aa:	681b      	ldr	r3, [r3, #0]
 80278ac:	f022 0216 	bic.w	r2, r2, #22
 80278b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80278b2:	687b      	ldr	r3, [r7, #4]
 80278b4:	681b      	ldr	r3, [r3, #0]
 80278b6:	695a      	ldr	r2, [r3, #20]
 80278b8:	687b      	ldr	r3, [r7, #4]
 80278ba:	681b      	ldr	r3, [r3, #0]
 80278bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80278c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80278c2:	687b      	ldr	r3, [r7, #4]
 80278c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80278c6:	2b00      	cmp	r3, #0
 80278c8:	d103      	bne.n	80278d2 <HAL_DMA_IRQHandler+0x1da>
 80278ca:	687b      	ldr	r3, [r7, #4]
 80278cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80278ce:	2b00      	cmp	r3, #0
 80278d0:	d007      	beq.n	80278e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80278d2:	687b      	ldr	r3, [r7, #4]
 80278d4:	681b      	ldr	r3, [r3, #0]
 80278d6:	681a      	ldr	r2, [r3, #0]
 80278d8:	687b      	ldr	r3, [r7, #4]
 80278da:	681b      	ldr	r3, [r3, #0]
 80278dc:	f022 0208 	bic.w	r2, r2, #8
 80278e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80278e2:	687b      	ldr	r3, [r7, #4]
 80278e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80278e6:	223f      	movs	r2, #63	; 0x3f
 80278e8:	409a      	lsls	r2, r3
 80278ea:	693b      	ldr	r3, [r7, #16]
 80278ec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80278ee:	687b      	ldr	r3, [r7, #4]
 80278f0:	2200      	movs	r2, #0
 80278f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80278f6:	687b      	ldr	r3, [r7, #4]
 80278f8:	2201      	movs	r2, #1
 80278fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80278fe:	687b      	ldr	r3, [r7, #4]
 8027900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027902:	2b00      	cmp	r3, #0
 8027904:	d07d      	beq.n	8027a02 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8027906:	687b      	ldr	r3, [r7, #4]
 8027908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802790a:	6878      	ldr	r0, [r7, #4]
 802790c:	4798      	blx	r3
        }
        return;
 802790e:	e078      	b.n	8027a02 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8027910:	687b      	ldr	r3, [r7, #4]
 8027912:	681b      	ldr	r3, [r3, #0]
 8027914:	681b      	ldr	r3, [r3, #0]
 8027916:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802791a:	2b00      	cmp	r3, #0
 802791c:	d01c      	beq.n	8027958 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 802791e:	687b      	ldr	r3, [r7, #4]
 8027920:	681b      	ldr	r3, [r3, #0]
 8027922:	681b      	ldr	r3, [r3, #0]
 8027924:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8027928:	2b00      	cmp	r3, #0
 802792a:	d108      	bne.n	802793e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 802792c:	687b      	ldr	r3, [r7, #4]
 802792e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027930:	2b00      	cmp	r3, #0
 8027932:	d030      	beq.n	8027996 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8027934:	687b      	ldr	r3, [r7, #4]
 8027936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8027938:	6878      	ldr	r0, [r7, #4]
 802793a:	4798      	blx	r3
 802793c:	e02b      	b.n	8027996 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 802793e:	687b      	ldr	r3, [r7, #4]
 8027940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027942:	2b00      	cmp	r3, #0
 8027944:	d027      	beq.n	8027996 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8027946:	687b      	ldr	r3, [r7, #4]
 8027948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802794a:	6878      	ldr	r0, [r7, #4]
 802794c:	4798      	blx	r3
 802794e:	e022      	b.n	8027996 <HAL_DMA_IRQHandler+0x29e>
 8027950:	20000014 	.word	0x20000014
 8027954:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8027958:	687b      	ldr	r3, [r7, #4]
 802795a:	681b      	ldr	r3, [r3, #0]
 802795c:	681b      	ldr	r3, [r3, #0]
 802795e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027962:	2b00      	cmp	r3, #0
 8027964:	d10f      	bne.n	8027986 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8027966:	687b      	ldr	r3, [r7, #4]
 8027968:	681b      	ldr	r3, [r3, #0]
 802796a:	681a      	ldr	r2, [r3, #0]
 802796c:	687b      	ldr	r3, [r7, #4]
 802796e:	681b      	ldr	r3, [r3, #0]
 8027970:	f022 0210 	bic.w	r2, r2, #16
 8027974:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8027976:	687b      	ldr	r3, [r7, #4]
 8027978:	2200      	movs	r2, #0
 802797a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 802797e:	687b      	ldr	r3, [r7, #4]
 8027980:	2201      	movs	r2, #1
 8027982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8027986:	687b      	ldr	r3, [r7, #4]
 8027988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802798a:	2b00      	cmp	r3, #0
 802798c:	d003      	beq.n	8027996 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 802798e:	687b      	ldr	r3, [r7, #4]
 8027990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8027992:	6878      	ldr	r0, [r7, #4]
 8027994:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8027996:	687b      	ldr	r3, [r7, #4]
 8027998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802799a:	2b00      	cmp	r3, #0
 802799c:	d032      	beq.n	8027a04 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 802799e:	687b      	ldr	r3, [r7, #4]
 80279a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80279a2:	f003 0301 	and.w	r3, r3, #1
 80279a6:	2b00      	cmp	r3, #0
 80279a8:	d022      	beq.n	80279f0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80279aa:	687b      	ldr	r3, [r7, #4]
 80279ac:	2205      	movs	r2, #5
 80279ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80279b2:	687b      	ldr	r3, [r7, #4]
 80279b4:	681b      	ldr	r3, [r3, #0]
 80279b6:	681a      	ldr	r2, [r3, #0]
 80279b8:	687b      	ldr	r3, [r7, #4]
 80279ba:	681b      	ldr	r3, [r3, #0]
 80279bc:	f022 0201 	bic.w	r2, r2, #1
 80279c0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80279c2:	68bb      	ldr	r3, [r7, #8]
 80279c4:	3301      	adds	r3, #1
 80279c6:	60bb      	str	r3, [r7, #8]
 80279c8:	697a      	ldr	r2, [r7, #20]
 80279ca:	429a      	cmp	r2, r3
 80279cc:	d307      	bcc.n	80279de <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80279ce:	687b      	ldr	r3, [r7, #4]
 80279d0:	681b      	ldr	r3, [r3, #0]
 80279d2:	681b      	ldr	r3, [r3, #0]
 80279d4:	f003 0301 	and.w	r3, r3, #1
 80279d8:	2b00      	cmp	r3, #0
 80279da:	d1f2      	bne.n	80279c2 <HAL_DMA_IRQHandler+0x2ca>
 80279dc:	e000      	b.n	80279e0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80279de:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80279e0:	687b      	ldr	r3, [r7, #4]
 80279e2:	2200      	movs	r2, #0
 80279e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80279e8:	687b      	ldr	r3, [r7, #4]
 80279ea:	2201      	movs	r2, #1
 80279ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80279f0:	687b      	ldr	r3, [r7, #4]
 80279f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80279f4:	2b00      	cmp	r3, #0
 80279f6:	d005      	beq.n	8027a04 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80279f8:	687b      	ldr	r3, [r7, #4]
 80279fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80279fc:	6878      	ldr	r0, [r7, #4]
 80279fe:	4798      	blx	r3
 8027a00:	e000      	b.n	8027a04 <HAL_DMA_IRQHandler+0x30c>
        return;
 8027a02:	bf00      	nop
    }
  }
}
 8027a04:	3718      	adds	r7, #24
 8027a06:	46bd      	mov	sp, r7
 8027a08:	bd80      	pop	{r7, pc}
 8027a0a:	bf00      	nop

08027a0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8027a0c:	b480      	push	{r7}
 8027a0e:	b085      	sub	sp, #20
 8027a10:	af00      	add	r7, sp, #0
 8027a12:	60f8      	str	r0, [r7, #12]
 8027a14:	60b9      	str	r1, [r7, #8]
 8027a16:	607a      	str	r2, [r7, #4]
 8027a18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8027a1a:	68fb      	ldr	r3, [r7, #12]
 8027a1c:	681b      	ldr	r3, [r3, #0]
 8027a1e:	681a      	ldr	r2, [r3, #0]
 8027a20:	68fb      	ldr	r3, [r7, #12]
 8027a22:	681b      	ldr	r3, [r3, #0]
 8027a24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8027a28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8027a2a:	68fb      	ldr	r3, [r7, #12]
 8027a2c:	681b      	ldr	r3, [r3, #0]
 8027a2e:	683a      	ldr	r2, [r7, #0]
 8027a30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8027a32:	68fb      	ldr	r3, [r7, #12]
 8027a34:	689b      	ldr	r3, [r3, #8]
 8027a36:	2b40      	cmp	r3, #64	; 0x40
 8027a38:	d108      	bne.n	8027a4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8027a3a:	68fb      	ldr	r3, [r7, #12]
 8027a3c:	681b      	ldr	r3, [r3, #0]
 8027a3e:	687a      	ldr	r2, [r7, #4]
 8027a40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8027a42:	68fb      	ldr	r3, [r7, #12]
 8027a44:	681b      	ldr	r3, [r3, #0]
 8027a46:	68ba      	ldr	r2, [r7, #8]
 8027a48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8027a4a:	e007      	b.n	8027a5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8027a4c:	68fb      	ldr	r3, [r7, #12]
 8027a4e:	681b      	ldr	r3, [r3, #0]
 8027a50:	68ba      	ldr	r2, [r7, #8]
 8027a52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8027a54:	68fb      	ldr	r3, [r7, #12]
 8027a56:	681b      	ldr	r3, [r3, #0]
 8027a58:	687a      	ldr	r2, [r7, #4]
 8027a5a:	60da      	str	r2, [r3, #12]
}
 8027a5c:	bf00      	nop
 8027a5e:	3714      	adds	r7, #20
 8027a60:	46bd      	mov	sp, r7
 8027a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027a66:	4770      	bx	lr

08027a68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8027a68:	b480      	push	{r7}
 8027a6a:	b085      	sub	sp, #20
 8027a6c:	af00      	add	r7, sp, #0
 8027a6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8027a70:	687b      	ldr	r3, [r7, #4]
 8027a72:	681b      	ldr	r3, [r3, #0]
 8027a74:	b2db      	uxtb	r3, r3
 8027a76:	3b10      	subs	r3, #16
 8027a78:	4a14      	ldr	r2, [pc, #80]	; (8027acc <DMA_CalcBaseAndBitshift+0x64>)
 8027a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8027a7e:	091b      	lsrs	r3, r3, #4
 8027a80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8027a82:	4a13      	ldr	r2, [pc, #76]	; (8027ad0 <DMA_CalcBaseAndBitshift+0x68>)
 8027a84:	68fb      	ldr	r3, [r7, #12]
 8027a86:	4413      	add	r3, r2
 8027a88:	781b      	ldrb	r3, [r3, #0]
 8027a8a:	461a      	mov	r2, r3
 8027a8c:	687b      	ldr	r3, [r7, #4]
 8027a8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8027a90:	68fb      	ldr	r3, [r7, #12]
 8027a92:	2b03      	cmp	r3, #3
 8027a94:	d909      	bls.n	8027aaa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8027a96:	687b      	ldr	r3, [r7, #4]
 8027a98:	681b      	ldr	r3, [r3, #0]
 8027a9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8027a9e:	f023 0303 	bic.w	r3, r3, #3
 8027aa2:	1d1a      	adds	r2, r3, #4
 8027aa4:	687b      	ldr	r3, [r7, #4]
 8027aa6:	659a      	str	r2, [r3, #88]	; 0x58
 8027aa8:	e007      	b.n	8027aba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8027aaa:	687b      	ldr	r3, [r7, #4]
 8027aac:	681b      	ldr	r3, [r3, #0]
 8027aae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8027ab2:	f023 0303 	bic.w	r3, r3, #3
 8027ab6:	687a      	ldr	r2, [r7, #4]
 8027ab8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8027aba:	687b      	ldr	r3, [r7, #4]
 8027abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8027abe:	4618      	mov	r0, r3
 8027ac0:	3714      	adds	r7, #20
 8027ac2:	46bd      	mov	sp, r7
 8027ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ac8:	4770      	bx	lr
 8027aca:	bf00      	nop
 8027acc:	aaaaaaab 	.word	0xaaaaaaab
 8027ad0:	0802ab78 	.word	0x0802ab78

08027ad4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8027ad4:	b480      	push	{r7}
 8027ad6:	b085      	sub	sp, #20
 8027ad8:	af00      	add	r7, sp, #0
 8027ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8027adc:	2300      	movs	r3, #0
 8027ade:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8027ae0:	687b      	ldr	r3, [r7, #4]
 8027ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027ae4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8027ae6:	687b      	ldr	r3, [r7, #4]
 8027ae8:	699b      	ldr	r3, [r3, #24]
 8027aea:	2b00      	cmp	r3, #0
 8027aec:	d11f      	bne.n	8027b2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8027aee:	68bb      	ldr	r3, [r7, #8]
 8027af0:	2b03      	cmp	r3, #3
 8027af2:	d855      	bhi.n	8027ba0 <DMA_CheckFifoParam+0xcc>
 8027af4:	a201      	add	r2, pc, #4	; (adr r2, 8027afc <DMA_CheckFifoParam+0x28>)
 8027af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027afa:	bf00      	nop
 8027afc:	08027b0d 	.word	0x08027b0d
 8027b00:	08027b1f 	.word	0x08027b1f
 8027b04:	08027b0d 	.word	0x08027b0d
 8027b08:	08027ba1 	.word	0x08027ba1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8027b0c:	687b      	ldr	r3, [r7, #4]
 8027b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027b10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8027b14:	2b00      	cmp	r3, #0
 8027b16:	d045      	beq.n	8027ba4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8027b18:	2301      	movs	r3, #1
 8027b1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8027b1c:	e042      	b.n	8027ba4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8027b1e:	687b      	ldr	r3, [r7, #4]
 8027b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027b22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8027b26:	d13f      	bne.n	8027ba8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8027b28:	2301      	movs	r3, #1
 8027b2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8027b2c:	e03c      	b.n	8027ba8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8027b2e:	687b      	ldr	r3, [r7, #4]
 8027b30:	699b      	ldr	r3, [r3, #24]
 8027b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8027b36:	d121      	bne.n	8027b7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8027b38:	68bb      	ldr	r3, [r7, #8]
 8027b3a:	2b03      	cmp	r3, #3
 8027b3c:	d836      	bhi.n	8027bac <DMA_CheckFifoParam+0xd8>
 8027b3e:	a201      	add	r2, pc, #4	; (adr r2, 8027b44 <DMA_CheckFifoParam+0x70>)
 8027b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8027b44:	08027b55 	.word	0x08027b55
 8027b48:	08027b5b 	.word	0x08027b5b
 8027b4c:	08027b55 	.word	0x08027b55
 8027b50:	08027b6d 	.word	0x08027b6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8027b54:	2301      	movs	r3, #1
 8027b56:	73fb      	strb	r3, [r7, #15]
      break;
 8027b58:	e02f      	b.n	8027bba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8027b5a:	687b      	ldr	r3, [r7, #4]
 8027b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027b5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8027b62:	2b00      	cmp	r3, #0
 8027b64:	d024      	beq.n	8027bb0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8027b66:	2301      	movs	r3, #1
 8027b68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8027b6a:	e021      	b.n	8027bb0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8027b6c:	687b      	ldr	r3, [r7, #4]
 8027b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027b70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8027b74:	d11e      	bne.n	8027bb4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8027b76:	2301      	movs	r3, #1
 8027b78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8027b7a:	e01b      	b.n	8027bb4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8027b7c:	68bb      	ldr	r3, [r7, #8]
 8027b7e:	2b02      	cmp	r3, #2
 8027b80:	d902      	bls.n	8027b88 <DMA_CheckFifoParam+0xb4>
 8027b82:	2b03      	cmp	r3, #3
 8027b84:	d003      	beq.n	8027b8e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8027b86:	e018      	b.n	8027bba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8027b88:	2301      	movs	r3, #1
 8027b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8027b8c:	e015      	b.n	8027bba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8027b8e:	687b      	ldr	r3, [r7, #4]
 8027b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8027b92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8027b96:	2b00      	cmp	r3, #0
 8027b98:	d00e      	beq.n	8027bb8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8027b9a:	2301      	movs	r3, #1
 8027b9c:	73fb      	strb	r3, [r7, #15]
      break;
 8027b9e:	e00b      	b.n	8027bb8 <DMA_CheckFifoParam+0xe4>
      break;
 8027ba0:	bf00      	nop
 8027ba2:	e00a      	b.n	8027bba <DMA_CheckFifoParam+0xe6>
      break;
 8027ba4:	bf00      	nop
 8027ba6:	e008      	b.n	8027bba <DMA_CheckFifoParam+0xe6>
      break;
 8027ba8:	bf00      	nop
 8027baa:	e006      	b.n	8027bba <DMA_CheckFifoParam+0xe6>
      break;
 8027bac:	bf00      	nop
 8027bae:	e004      	b.n	8027bba <DMA_CheckFifoParam+0xe6>
      break;
 8027bb0:	bf00      	nop
 8027bb2:	e002      	b.n	8027bba <DMA_CheckFifoParam+0xe6>
      break;   
 8027bb4:	bf00      	nop
 8027bb6:	e000      	b.n	8027bba <DMA_CheckFifoParam+0xe6>
      break;
 8027bb8:	bf00      	nop
    }
  } 
  
  return status; 
 8027bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8027bbc:	4618      	mov	r0, r3
 8027bbe:	3714      	adds	r7, #20
 8027bc0:	46bd      	mov	sp, r7
 8027bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027bc6:	4770      	bx	lr

08027bc8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8027bc8:	b580      	push	{r7, lr}
 8027bca:	b086      	sub	sp, #24
 8027bcc:	af00      	add	r7, sp, #0
 8027bce:	60f8      	str	r0, [r7, #12]
 8027bd0:	60b9      	str	r1, [r7, #8]
 8027bd2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8027bd6:	2301      	movs	r3, #1
 8027bd8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8027bda:	4b23      	ldr	r3, [pc, #140]	; (8027c68 <HAL_FLASH_Program+0xa0>)
 8027bdc:	7e1b      	ldrb	r3, [r3, #24]
 8027bde:	2b01      	cmp	r3, #1
 8027be0:	d101      	bne.n	8027be6 <HAL_FLASH_Program+0x1e>
 8027be2:	2302      	movs	r3, #2
 8027be4:	e03b      	b.n	8027c5e <HAL_FLASH_Program+0x96>
 8027be6:	4b20      	ldr	r3, [pc, #128]	; (8027c68 <HAL_FLASH_Program+0xa0>)
 8027be8:	2201      	movs	r2, #1
 8027bea:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027bec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027bf0:	f000 f870 	bl	8027cd4 <FLASH_WaitForLastOperation>
 8027bf4:	4603      	mov	r3, r0
 8027bf6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8027bf8:	7dfb      	ldrb	r3, [r7, #23]
 8027bfa:	2b00      	cmp	r3, #0
 8027bfc:	d12b      	bne.n	8027c56 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8027bfe:	68fb      	ldr	r3, [r7, #12]
 8027c00:	2b00      	cmp	r3, #0
 8027c02:	d105      	bne.n	8027c10 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8027c04:	783b      	ldrb	r3, [r7, #0]
 8027c06:	4619      	mov	r1, r3
 8027c08:	68b8      	ldr	r0, [r7, #8]
 8027c0a:	f000 f919 	bl	8027e40 <FLASH_Program_Byte>
 8027c0e:	e016      	b.n	8027c3e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8027c10:	68fb      	ldr	r3, [r7, #12]
 8027c12:	2b01      	cmp	r3, #1
 8027c14:	d105      	bne.n	8027c22 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8027c16:	883b      	ldrh	r3, [r7, #0]
 8027c18:	4619      	mov	r1, r3
 8027c1a:	68b8      	ldr	r0, [r7, #8]
 8027c1c:	f000 f8ec 	bl	8027df8 <FLASH_Program_HalfWord>
 8027c20:	e00d      	b.n	8027c3e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8027c22:	68fb      	ldr	r3, [r7, #12]
 8027c24:	2b02      	cmp	r3, #2
 8027c26:	d105      	bne.n	8027c34 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8027c28:	683b      	ldr	r3, [r7, #0]
 8027c2a:	4619      	mov	r1, r3
 8027c2c:	68b8      	ldr	r0, [r7, #8]
 8027c2e:	f000 f8c1 	bl	8027db4 <FLASH_Program_Word>
 8027c32:	e004      	b.n	8027c3e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8027c34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8027c38:	68b8      	ldr	r0, [r7, #8]
 8027c3a:	f000 f88b 	bl	8027d54 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027c3e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027c42:	f000 f847 	bl	8027cd4 <FLASH_WaitForLastOperation>
 8027c46:	4603      	mov	r3, r0
 8027c48:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8027c4a:	4b08      	ldr	r3, [pc, #32]	; (8027c6c <HAL_FLASH_Program+0xa4>)
 8027c4c:	691b      	ldr	r3, [r3, #16]
 8027c4e:	4a07      	ldr	r2, [pc, #28]	; (8027c6c <HAL_FLASH_Program+0xa4>)
 8027c50:	f023 0301 	bic.w	r3, r3, #1
 8027c54:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8027c56:	4b04      	ldr	r3, [pc, #16]	; (8027c68 <HAL_FLASH_Program+0xa0>)
 8027c58:	2200      	movs	r2, #0
 8027c5a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8027c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8027c5e:	4618      	mov	r0, r3
 8027c60:	3718      	adds	r7, #24
 8027c62:	46bd      	mov	sp, r7
 8027c64:	bd80      	pop	{r7, pc}
 8027c66:	bf00      	nop
 8027c68:	20000a18 	.word	0x20000a18
 8027c6c:	40023c00 	.word	0x40023c00

08027c70 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8027c70:	b480      	push	{r7}
 8027c72:	b083      	sub	sp, #12
 8027c74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8027c76:	2300      	movs	r3, #0
 8027c78:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8027c7a:	4b0b      	ldr	r3, [pc, #44]	; (8027ca8 <HAL_FLASH_Unlock+0x38>)
 8027c7c:	691b      	ldr	r3, [r3, #16]
 8027c7e:	2b00      	cmp	r3, #0
 8027c80:	da0b      	bge.n	8027c9a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8027c82:	4b09      	ldr	r3, [pc, #36]	; (8027ca8 <HAL_FLASH_Unlock+0x38>)
 8027c84:	4a09      	ldr	r2, [pc, #36]	; (8027cac <HAL_FLASH_Unlock+0x3c>)
 8027c86:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8027c88:	4b07      	ldr	r3, [pc, #28]	; (8027ca8 <HAL_FLASH_Unlock+0x38>)
 8027c8a:	4a09      	ldr	r2, [pc, #36]	; (8027cb0 <HAL_FLASH_Unlock+0x40>)
 8027c8c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8027c8e:	4b06      	ldr	r3, [pc, #24]	; (8027ca8 <HAL_FLASH_Unlock+0x38>)
 8027c90:	691b      	ldr	r3, [r3, #16]
 8027c92:	2b00      	cmp	r3, #0
 8027c94:	da01      	bge.n	8027c9a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8027c96:	2301      	movs	r3, #1
 8027c98:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8027c9a:	79fb      	ldrb	r3, [r7, #7]
}
 8027c9c:	4618      	mov	r0, r3
 8027c9e:	370c      	adds	r7, #12
 8027ca0:	46bd      	mov	sp, r7
 8027ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027ca6:	4770      	bx	lr
 8027ca8:	40023c00 	.word	0x40023c00
 8027cac:	45670123 	.word	0x45670123
 8027cb0:	cdef89ab 	.word	0xcdef89ab

08027cb4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8027cb4:	b480      	push	{r7}
 8027cb6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8027cb8:	4b05      	ldr	r3, [pc, #20]	; (8027cd0 <HAL_FLASH_Lock+0x1c>)
 8027cba:	691b      	ldr	r3, [r3, #16]
 8027cbc:	4a04      	ldr	r2, [pc, #16]	; (8027cd0 <HAL_FLASH_Lock+0x1c>)
 8027cbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8027cc2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8027cc4:	2300      	movs	r3, #0
}
 8027cc6:	4618      	mov	r0, r3
 8027cc8:	46bd      	mov	sp, r7
 8027cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027cce:	4770      	bx	lr
 8027cd0:	40023c00 	.word	0x40023c00

08027cd4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8027cd4:	b580      	push	{r7, lr}
 8027cd6:	b084      	sub	sp, #16
 8027cd8:	af00      	add	r7, sp, #0
 8027cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8027cdc:	2300      	movs	r3, #0
 8027cde:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8027ce0:	4b1a      	ldr	r3, [pc, #104]	; (8027d4c <FLASH_WaitForLastOperation+0x78>)
 8027ce2:	2200      	movs	r2, #0
 8027ce4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8027ce6:	f7fe fecd 	bl	8026a84 <HAL_GetTick>
 8027cea:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8027cec:	e010      	b.n	8027d10 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8027cee:	687b      	ldr	r3, [r7, #4]
 8027cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8027cf4:	d00c      	beq.n	8027d10 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8027cf6:	687b      	ldr	r3, [r7, #4]
 8027cf8:	2b00      	cmp	r3, #0
 8027cfa:	d007      	beq.n	8027d0c <FLASH_WaitForLastOperation+0x38>
 8027cfc:	f7fe fec2 	bl	8026a84 <HAL_GetTick>
 8027d00:	4602      	mov	r2, r0
 8027d02:	68fb      	ldr	r3, [r7, #12]
 8027d04:	1ad3      	subs	r3, r2, r3
 8027d06:	687a      	ldr	r2, [r7, #4]
 8027d08:	429a      	cmp	r2, r3
 8027d0a:	d201      	bcs.n	8027d10 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8027d0c:	2303      	movs	r3, #3
 8027d0e:	e019      	b.n	8027d44 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8027d10:	4b0f      	ldr	r3, [pc, #60]	; (8027d50 <FLASH_WaitForLastOperation+0x7c>)
 8027d12:	68db      	ldr	r3, [r3, #12]
 8027d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8027d18:	2b00      	cmp	r3, #0
 8027d1a:	d1e8      	bne.n	8027cee <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8027d1c:	4b0c      	ldr	r3, [pc, #48]	; (8027d50 <FLASH_WaitForLastOperation+0x7c>)
 8027d1e:	68db      	ldr	r3, [r3, #12]
 8027d20:	f003 0301 	and.w	r3, r3, #1
 8027d24:	2b00      	cmp	r3, #0
 8027d26:	d002      	beq.n	8027d2e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8027d28:	4b09      	ldr	r3, [pc, #36]	; (8027d50 <FLASH_WaitForLastOperation+0x7c>)
 8027d2a:	2201      	movs	r2, #1
 8027d2c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8027d2e:	4b08      	ldr	r3, [pc, #32]	; (8027d50 <FLASH_WaitForLastOperation+0x7c>)
 8027d30:	68db      	ldr	r3, [r3, #12]
 8027d32:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8027d36:	2b00      	cmp	r3, #0
 8027d38:	d003      	beq.n	8027d42 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8027d3a:	f000 f8a3 	bl	8027e84 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8027d3e:	2301      	movs	r3, #1
 8027d40:	e000      	b.n	8027d44 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8027d42:	2300      	movs	r3, #0
  
}  
 8027d44:	4618      	mov	r0, r3
 8027d46:	3710      	adds	r7, #16
 8027d48:	46bd      	mov	sp, r7
 8027d4a:	bd80      	pop	{r7, pc}
 8027d4c:	20000a18 	.word	0x20000a18
 8027d50:	40023c00 	.word	0x40023c00

08027d54 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8027d54:	b490      	push	{r4, r7}
 8027d56:	b084      	sub	sp, #16
 8027d58:	af00      	add	r7, sp, #0
 8027d5a:	60f8      	str	r0, [r7, #12]
 8027d5c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027d60:	4b13      	ldr	r3, [pc, #76]	; (8027db0 <FLASH_Program_DoubleWord+0x5c>)
 8027d62:	691b      	ldr	r3, [r3, #16]
 8027d64:	4a12      	ldr	r2, [pc, #72]	; (8027db0 <FLASH_Program_DoubleWord+0x5c>)
 8027d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027d6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8027d6c:	4b10      	ldr	r3, [pc, #64]	; (8027db0 <FLASH_Program_DoubleWord+0x5c>)
 8027d6e:	691b      	ldr	r3, [r3, #16]
 8027d70:	4a0f      	ldr	r2, [pc, #60]	; (8027db0 <FLASH_Program_DoubleWord+0x5c>)
 8027d72:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8027d76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027d78:	4b0d      	ldr	r3, [pc, #52]	; (8027db0 <FLASH_Program_DoubleWord+0x5c>)
 8027d7a:	691b      	ldr	r3, [r3, #16]
 8027d7c:	4a0c      	ldr	r2, [pc, #48]	; (8027db0 <FLASH_Program_DoubleWord+0x5c>)
 8027d7e:	f043 0301 	orr.w	r3, r3, #1
 8027d82:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8027d84:	68fb      	ldr	r3, [r7, #12]
 8027d86:	683a      	ldr	r2, [r7, #0]
 8027d88:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8027d8a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8027d8e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8027d92:	f04f 0300 	mov.w	r3, #0
 8027d96:	f04f 0400 	mov.w	r4, #0
 8027d9a:	0013      	movs	r3, r2
 8027d9c:	2400      	movs	r4, #0
 8027d9e:	68fa      	ldr	r2, [r7, #12]
 8027da0:	3204      	adds	r2, #4
 8027da2:	6013      	str	r3, [r2, #0]
}
 8027da4:	bf00      	nop
 8027da6:	3710      	adds	r7, #16
 8027da8:	46bd      	mov	sp, r7
 8027daa:	bc90      	pop	{r4, r7}
 8027dac:	4770      	bx	lr
 8027dae:	bf00      	nop
 8027db0:	40023c00 	.word	0x40023c00

08027db4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8027db4:	b480      	push	{r7}
 8027db6:	b083      	sub	sp, #12
 8027db8:	af00      	add	r7, sp, #0
 8027dba:	6078      	str	r0, [r7, #4]
 8027dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027dbe:	4b0d      	ldr	r3, [pc, #52]	; (8027df4 <FLASH_Program_Word+0x40>)
 8027dc0:	691b      	ldr	r3, [r3, #16]
 8027dc2:	4a0c      	ldr	r2, [pc, #48]	; (8027df4 <FLASH_Program_Word+0x40>)
 8027dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027dc8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8027dca:	4b0a      	ldr	r3, [pc, #40]	; (8027df4 <FLASH_Program_Word+0x40>)
 8027dcc:	691b      	ldr	r3, [r3, #16]
 8027dce:	4a09      	ldr	r2, [pc, #36]	; (8027df4 <FLASH_Program_Word+0x40>)
 8027dd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8027dd4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027dd6:	4b07      	ldr	r3, [pc, #28]	; (8027df4 <FLASH_Program_Word+0x40>)
 8027dd8:	691b      	ldr	r3, [r3, #16]
 8027dda:	4a06      	ldr	r2, [pc, #24]	; (8027df4 <FLASH_Program_Word+0x40>)
 8027ddc:	f043 0301 	orr.w	r3, r3, #1
 8027de0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8027de2:	687b      	ldr	r3, [r7, #4]
 8027de4:	683a      	ldr	r2, [r7, #0]
 8027de6:	601a      	str	r2, [r3, #0]
}
 8027de8:	bf00      	nop
 8027dea:	370c      	adds	r7, #12
 8027dec:	46bd      	mov	sp, r7
 8027dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027df2:	4770      	bx	lr
 8027df4:	40023c00 	.word	0x40023c00

08027df8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8027df8:	b480      	push	{r7}
 8027dfa:	b083      	sub	sp, #12
 8027dfc:	af00      	add	r7, sp, #0
 8027dfe:	6078      	str	r0, [r7, #4]
 8027e00:	460b      	mov	r3, r1
 8027e02:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027e04:	4b0d      	ldr	r3, [pc, #52]	; (8027e3c <FLASH_Program_HalfWord+0x44>)
 8027e06:	691b      	ldr	r3, [r3, #16]
 8027e08:	4a0c      	ldr	r2, [pc, #48]	; (8027e3c <FLASH_Program_HalfWord+0x44>)
 8027e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027e0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8027e10:	4b0a      	ldr	r3, [pc, #40]	; (8027e3c <FLASH_Program_HalfWord+0x44>)
 8027e12:	691b      	ldr	r3, [r3, #16]
 8027e14:	4a09      	ldr	r2, [pc, #36]	; (8027e3c <FLASH_Program_HalfWord+0x44>)
 8027e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8027e1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027e1c:	4b07      	ldr	r3, [pc, #28]	; (8027e3c <FLASH_Program_HalfWord+0x44>)
 8027e1e:	691b      	ldr	r3, [r3, #16]
 8027e20:	4a06      	ldr	r2, [pc, #24]	; (8027e3c <FLASH_Program_HalfWord+0x44>)
 8027e22:	f043 0301 	orr.w	r3, r3, #1
 8027e26:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8027e28:	687b      	ldr	r3, [r7, #4]
 8027e2a:	887a      	ldrh	r2, [r7, #2]
 8027e2c:	801a      	strh	r2, [r3, #0]
}
 8027e2e:	bf00      	nop
 8027e30:	370c      	adds	r7, #12
 8027e32:	46bd      	mov	sp, r7
 8027e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e38:	4770      	bx	lr
 8027e3a:	bf00      	nop
 8027e3c:	40023c00 	.word	0x40023c00

08027e40 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8027e40:	b480      	push	{r7}
 8027e42:	b083      	sub	sp, #12
 8027e44:	af00      	add	r7, sp, #0
 8027e46:	6078      	str	r0, [r7, #4]
 8027e48:	460b      	mov	r3, r1
 8027e4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8027e4c:	4b0c      	ldr	r3, [pc, #48]	; (8027e80 <FLASH_Program_Byte+0x40>)
 8027e4e:	691b      	ldr	r3, [r3, #16]
 8027e50:	4a0b      	ldr	r2, [pc, #44]	; (8027e80 <FLASH_Program_Byte+0x40>)
 8027e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8027e56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8027e58:	4b09      	ldr	r3, [pc, #36]	; (8027e80 <FLASH_Program_Byte+0x40>)
 8027e5a:	4a09      	ldr	r2, [pc, #36]	; (8027e80 <FLASH_Program_Byte+0x40>)
 8027e5c:	691b      	ldr	r3, [r3, #16]
 8027e5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8027e60:	4b07      	ldr	r3, [pc, #28]	; (8027e80 <FLASH_Program_Byte+0x40>)
 8027e62:	691b      	ldr	r3, [r3, #16]
 8027e64:	4a06      	ldr	r2, [pc, #24]	; (8027e80 <FLASH_Program_Byte+0x40>)
 8027e66:	f043 0301 	orr.w	r3, r3, #1
 8027e6a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8027e6c:	687b      	ldr	r3, [r7, #4]
 8027e6e:	78fa      	ldrb	r2, [r7, #3]
 8027e70:	701a      	strb	r2, [r3, #0]
}
 8027e72:	bf00      	nop
 8027e74:	370c      	adds	r7, #12
 8027e76:	46bd      	mov	sp, r7
 8027e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027e7c:	4770      	bx	lr
 8027e7e:	bf00      	nop
 8027e80:	40023c00 	.word	0x40023c00

08027e84 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8027e84:	b480      	push	{r7}
 8027e86:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8027e88:	4b27      	ldr	r3, [pc, #156]	; (8027f28 <FLASH_SetErrorCode+0xa4>)
 8027e8a:	68db      	ldr	r3, [r3, #12]
 8027e8c:	f003 0310 	and.w	r3, r3, #16
 8027e90:	2b00      	cmp	r3, #0
 8027e92:	d008      	beq.n	8027ea6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8027e94:	4b25      	ldr	r3, [pc, #148]	; (8027f2c <FLASH_SetErrorCode+0xa8>)
 8027e96:	69db      	ldr	r3, [r3, #28]
 8027e98:	f043 0310 	orr.w	r3, r3, #16
 8027e9c:	4a23      	ldr	r2, [pc, #140]	; (8027f2c <FLASH_SetErrorCode+0xa8>)
 8027e9e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8027ea0:	4b21      	ldr	r3, [pc, #132]	; (8027f28 <FLASH_SetErrorCode+0xa4>)
 8027ea2:	2210      	movs	r2, #16
 8027ea4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8027ea6:	4b20      	ldr	r3, [pc, #128]	; (8027f28 <FLASH_SetErrorCode+0xa4>)
 8027ea8:	68db      	ldr	r3, [r3, #12]
 8027eaa:	f003 0320 	and.w	r3, r3, #32
 8027eae:	2b00      	cmp	r3, #0
 8027eb0:	d008      	beq.n	8027ec4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8027eb2:	4b1e      	ldr	r3, [pc, #120]	; (8027f2c <FLASH_SetErrorCode+0xa8>)
 8027eb4:	69db      	ldr	r3, [r3, #28]
 8027eb6:	f043 0308 	orr.w	r3, r3, #8
 8027eba:	4a1c      	ldr	r2, [pc, #112]	; (8027f2c <FLASH_SetErrorCode+0xa8>)
 8027ebc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8027ebe:	4b1a      	ldr	r3, [pc, #104]	; (8027f28 <FLASH_SetErrorCode+0xa4>)
 8027ec0:	2220      	movs	r2, #32
 8027ec2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8027ec4:	4b18      	ldr	r3, [pc, #96]	; (8027f28 <FLASH_SetErrorCode+0xa4>)
 8027ec6:	68db      	ldr	r3, [r3, #12]
 8027ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8027ecc:	2b00      	cmp	r3, #0
 8027ece:	d008      	beq.n	8027ee2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8027ed0:	4b16      	ldr	r3, [pc, #88]	; (8027f2c <FLASH_SetErrorCode+0xa8>)
 8027ed2:	69db      	ldr	r3, [r3, #28]
 8027ed4:	f043 0304 	orr.w	r3, r3, #4
 8027ed8:	4a14      	ldr	r2, [pc, #80]	; (8027f2c <FLASH_SetErrorCode+0xa8>)
 8027eda:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8027edc:	4b12      	ldr	r3, [pc, #72]	; (8027f28 <FLASH_SetErrorCode+0xa4>)
 8027ede:	2240      	movs	r2, #64	; 0x40
 8027ee0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8027ee2:	4b11      	ldr	r3, [pc, #68]	; (8027f28 <FLASH_SetErrorCode+0xa4>)
 8027ee4:	68db      	ldr	r3, [r3, #12]
 8027ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8027eea:	2b00      	cmp	r3, #0
 8027eec:	d008      	beq.n	8027f00 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8027eee:	4b0f      	ldr	r3, [pc, #60]	; (8027f2c <FLASH_SetErrorCode+0xa8>)
 8027ef0:	69db      	ldr	r3, [r3, #28]
 8027ef2:	f043 0302 	orr.w	r3, r3, #2
 8027ef6:	4a0d      	ldr	r2, [pc, #52]	; (8027f2c <FLASH_SetErrorCode+0xa8>)
 8027ef8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8027efa:	4b0b      	ldr	r3, [pc, #44]	; (8027f28 <FLASH_SetErrorCode+0xa4>)
 8027efc:	2280      	movs	r2, #128	; 0x80
 8027efe:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8027f00:	4b09      	ldr	r3, [pc, #36]	; (8027f28 <FLASH_SetErrorCode+0xa4>)
 8027f02:	68db      	ldr	r3, [r3, #12]
 8027f04:	f003 0302 	and.w	r3, r3, #2
 8027f08:	2b00      	cmp	r3, #0
 8027f0a:	d008      	beq.n	8027f1e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8027f0c:	4b07      	ldr	r3, [pc, #28]	; (8027f2c <FLASH_SetErrorCode+0xa8>)
 8027f0e:	69db      	ldr	r3, [r3, #28]
 8027f10:	f043 0320 	orr.w	r3, r3, #32
 8027f14:	4a05      	ldr	r2, [pc, #20]	; (8027f2c <FLASH_SetErrorCode+0xa8>)
 8027f16:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8027f18:	4b03      	ldr	r3, [pc, #12]	; (8027f28 <FLASH_SetErrorCode+0xa4>)
 8027f1a:	2202      	movs	r2, #2
 8027f1c:	60da      	str	r2, [r3, #12]
  }
}
 8027f1e:	bf00      	nop
 8027f20:	46bd      	mov	sp, r7
 8027f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027f26:	4770      	bx	lr
 8027f28:	40023c00 	.word	0x40023c00
 8027f2c:	20000a18 	.word	0x20000a18

08027f30 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8027f30:	b580      	push	{r7, lr}
 8027f32:	b084      	sub	sp, #16
 8027f34:	af00      	add	r7, sp, #0
 8027f36:	6078      	str	r0, [r7, #4]
 8027f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8027f3a:	2301      	movs	r3, #1
 8027f3c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8027f3e:	2300      	movs	r3, #0
 8027f40:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8027f42:	4b31      	ldr	r3, [pc, #196]	; (8028008 <HAL_FLASHEx_Erase+0xd8>)
 8027f44:	7e1b      	ldrb	r3, [r3, #24]
 8027f46:	2b01      	cmp	r3, #1
 8027f48:	d101      	bne.n	8027f4e <HAL_FLASHEx_Erase+0x1e>
 8027f4a:	2302      	movs	r3, #2
 8027f4c:	e058      	b.n	8028000 <HAL_FLASHEx_Erase+0xd0>
 8027f4e:	4b2e      	ldr	r3, [pc, #184]	; (8028008 <HAL_FLASHEx_Erase+0xd8>)
 8027f50:	2201      	movs	r2, #1
 8027f52:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027f54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027f58:	f7ff febc 	bl	8027cd4 <FLASH_WaitForLastOperation>
 8027f5c:	4603      	mov	r3, r0
 8027f5e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8027f60:	7bfb      	ldrb	r3, [r7, #15]
 8027f62:	2b00      	cmp	r3, #0
 8027f64:	d148      	bne.n	8027ff8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8027f66:	683b      	ldr	r3, [r7, #0]
 8027f68:	f04f 32ff 	mov.w	r2, #4294967295
 8027f6c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8027f6e:	687b      	ldr	r3, [r7, #4]
 8027f70:	681b      	ldr	r3, [r3, #0]
 8027f72:	2b01      	cmp	r3, #1
 8027f74:	d115      	bne.n	8027fa2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8027f76:	687b      	ldr	r3, [r7, #4]
 8027f78:	691b      	ldr	r3, [r3, #16]
 8027f7a:	b2da      	uxtb	r2, r3
 8027f7c:	687b      	ldr	r3, [r7, #4]
 8027f7e:	685b      	ldr	r3, [r3, #4]
 8027f80:	4619      	mov	r1, r3
 8027f82:	4610      	mov	r0, r2
 8027f84:	f000 f844 	bl	8028010 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027f88:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027f8c:	f7ff fea2 	bl	8027cd4 <FLASH_WaitForLastOperation>
 8027f90:	4603      	mov	r3, r0
 8027f92:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8027f94:	4b1d      	ldr	r3, [pc, #116]	; (802800c <HAL_FLASHEx_Erase+0xdc>)
 8027f96:	691b      	ldr	r3, [r3, #16]
 8027f98:	4a1c      	ldr	r2, [pc, #112]	; (802800c <HAL_FLASHEx_Erase+0xdc>)
 8027f9a:	f023 0304 	bic.w	r3, r3, #4
 8027f9e:	6113      	str	r3, [r2, #16]
 8027fa0:	e028      	b.n	8027ff4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8027fa2:	687b      	ldr	r3, [r7, #4]
 8027fa4:	689b      	ldr	r3, [r3, #8]
 8027fa6:	60bb      	str	r3, [r7, #8]
 8027fa8:	e01c      	b.n	8027fe4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8027faa:	687b      	ldr	r3, [r7, #4]
 8027fac:	691b      	ldr	r3, [r3, #16]
 8027fae:	b2db      	uxtb	r3, r3
 8027fb0:	4619      	mov	r1, r3
 8027fb2:	68b8      	ldr	r0, [r7, #8]
 8027fb4:	f000 f850 	bl	8028058 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8027fb8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8027fbc:	f7ff fe8a 	bl	8027cd4 <FLASH_WaitForLastOperation>
 8027fc0:	4603      	mov	r3, r0
 8027fc2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8027fc4:	4b11      	ldr	r3, [pc, #68]	; (802800c <HAL_FLASHEx_Erase+0xdc>)
 8027fc6:	691b      	ldr	r3, [r3, #16]
 8027fc8:	4a10      	ldr	r2, [pc, #64]	; (802800c <HAL_FLASHEx_Erase+0xdc>)
 8027fca:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8027fce:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8027fd0:	7bfb      	ldrb	r3, [r7, #15]
 8027fd2:	2b00      	cmp	r3, #0
 8027fd4:	d003      	beq.n	8027fde <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8027fd6:	683b      	ldr	r3, [r7, #0]
 8027fd8:	68ba      	ldr	r2, [r7, #8]
 8027fda:	601a      	str	r2, [r3, #0]
          break;
 8027fdc:	e00a      	b.n	8027ff4 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8027fde:	68bb      	ldr	r3, [r7, #8]
 8027fe0:	3301      	adds	r3, #1
 8027fe2:	60bb      	str	r3, [r7, #8]
 8027fe4:	687b      	ldr	r3, [r7, #4]
 8027fe6:	68da      	ldr	r2, [r3, #12]
 8027fe8:	687b      	ldr	r3, [r7, #4]
 8027fea:	689b      	ldr	r3, [r3, #8]
 8027fec:	4413      	add	r3, r2
 8027fee:	68ba      	ldr	r2, [r7, #8]
 8027ff0:	429a      	cmp	r2, r3
 8027ff2:	d3da      	bcc.n	8027faa <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8027ff4:	f000 f878 	bl	80280e8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8027ff8:	4b03      	ldr	r3, [pc, #12]	; (8028008 <HAL_FLASHEx_Erase+0xd8>)
 8027ffa:	2200      	movs	r2, #0
 8027ffc:	761a      	strb	r2, [r3, #24]

  return status;
 8027ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8028000:	4618      	mov	r0, r3
 8028002:	3710      	adds	r7, #16
 8028004:	46bd      	mov	sp, r7
 8028006:	bd80      	pop	{r7, pc}
 8028008:	20000a18 	.word	0x20000a18
 802800c:	40023c00 	.word	0x40023c00

08028010 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8028010:	b480      	push	{r7}
 8028012:	b083      	sub	sp, #12
 8028014:	af00      	add	r7, sp, #0
 8028016:	4603      	mov	r3, r0
 8028018:	6039      	str	r1, [r7, #0]
 802801a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802801c:	4b0d      	ldr	r3, [pc, #52]	; (8028054 <FLASH_MassErase+0x44>)
 802801e:	691b      	ldr	r3, [r3, #16]
 8028020:	4a0c      	ldr	r2, [pc, #48]	; (8028054 <FLASH_MassErase+0x44>)
 8028022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8028026:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8028028:	4b0a      	ldr	r3, [pc, #40]	; (8028054 <FLASH_MassErase+0x44>)
 802802a:	691b      	ldr	r3, [r3, #16]
 802802c:	4a09      	ldr	r2, [pc, #36]	; (8028054 <FLASH_MassErase+0x44>)
 802802e:	f043 0304 	orr.w	r3, r3, #4
 8028032:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8028034:	4b07      	ldr	r3, [pc, #28]	; (8028054 <FLASH_MassErase+0x44>)
 8028036:	691a      	ldr	r2, [r3, #16]
 8028038:	79fb      	ldrb	r3, [r7, #7]
 802803a:	021b      	lsls	r3, r3, #8
 802803c:	4313      	orrs	r3, r2
 802803e:	4a05      	ldr	r2, [pc, #20]	; (8028054 <FLASH_MassErase+0x44>)
 8028040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8028044:	6113      	str	r3, [r2, #16]
}
 8028046:	bf00      	nop
 8028048:	370c      	adds	r7, #12
 802804a:	46bd      	mov	sp, r7
 802804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028050:	4770      	bx	lr
 8028052:	bf00      	nop
 8028054:	40023c00 	.word	0x40023c00

08028058 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8028058:	b480      	push	{r7}
 802805a:	b085      	sub	sp, #20
 802805c:	af00      	add	r7, sp, #0
 802805e:	6078      	str	r0, [r7, #4]
 8028060:	460b      	mov	r3, r1
 8028062:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8028064:	2300      	movs	r3, #0
 8028066:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8028068:	78fb      	ldrb	r3, [r7, #3]
 802806a:	2b00      	cmp	r3, #0
 802806c:	d102      	bne.n	8028074 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 802806e:	2300      	movs	r3, #0
 8028070:	60fb      	str	r3, [r7, #12]
 8028072:	e010      	b.n	8028096 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8028074:	78fb      	ldrb	r3, [r7, #3]
 8028076:	2b01      	cmp	r3, #1
 8028078:	d103      	bne.n	8028082 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 802807a:	f44f 7380 	mov.w	r3, #256	; 0x100
 802807e:	60fb      	str	r3, [r7, #12]
 8028080:	e009      	b.n	8028096 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8028082:	78fb      	ldrb	r3, [r7, #3]
 8028084:	2b02      	cmp	r3, #2
 8028086:	d103      	bne.n	8028090 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8028088:	f44f 7300 	mov.w	r3, #512	; 0x200
 802808c:	60fb      	str	r3, [r7, #12]
 802808e:	e002      	b.n	8028096 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8028090:	f44f 7340 	mov.w	r3, #768	; 0x300
 8028094:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8028096:	4b13      	ldr	r3, [pc, #76]	; (80280e4 <FLASH_Erase_Sector+0x8c>)
 8028098:	691b      	ldr	r3, [r3, #16]
 802809a:	4a12      	ldr	r2, [pc, #72]	; (80280e4 <FLASH_Erase_Sector+0x8c>)
 802809c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80280a0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80280a2:	4b10      	ldr	r3, [pc, #64]	; (80280e4 <FLASH_Erase_Sector+0x8c>)
 80280a4:	691a      	ldr	r2, [r3, #16]
 80280a6:	490f      	ldr	r1, [pc, #60]	; (80280e4 <FLASH_Erase_Sector+0x8c>)
 80280a8:	68fb      	ldr	r3, [r7, #12]
 80280aa:	4313      	orrs	r3, r2
 80280ac:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80280ae:	4b0d      	ldr	r3, [pc, #52]	; (80280e4 <FLASH_Erase_Sector+0x8c>)
 80280b0:	691b      	ldr	r3, [r3, #16]
 80280b2:	4a0c      	ldr	r2, [pc, #48]	; (80280e4 <FLASH_Erase_Sector+0x8c>)
 80280b4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80280b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80280ba:	4b0a      	ldr	r3, [pc, #40]	; (80280e4 <FLASH_Erase_Sector+0x8c>)
 80280bc:	691a      	ldr	r2, [r3, #16]
 80280be:	687b      	ldr	r3, [r7, #4]
 80280c0:	00db      	lsls	r3, r3, #3
 80280c2:	4313      	orrs	r3, r2
 80280c4:	4a07      	ldr	r2, [pc, #28]	; (80280e4 <FLASH_Erase_Sector+0x8c>)
 80280c6:	f043 0302 	orr.w	r3, r3, #2
 80280ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80280cc:	4b05      	ldr	r3, [pc, #20]	; (80280e4 <FLASH_Erase_Sector+0x8c>)
 80280ce:	691b      	ldr	r3, [r3, #16]
 80280d0:	4a04      	ldr	r2, [pc, #16]	; (80280e4 <FLASH_Erase_Sector+0x8c>)
 80280d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80280d6:	6113      	str	r3, [r2, #16]
}
 80280d8:	bf00      	nop
 80280da:	3714      	adds	r7, #20
 80280dc:	46bd      	mov	sp, r7
 80280de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80280e2:	4770      	bx	lr
 80280e4:	40023c00 	.word	0x40023c00

080280e8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80280e8:	b480      	push	{r7}
 80280ea:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80280ec:	4b20      	ldr	r3, [pc, #128]	; (8028170 <FLASH_FlushCaches+0x88>)
 80280ee:	681b      	ldr	r3, [r3, #0]
 80280f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80280f4:	2b00      	cmp	r3, #0
 80280f6:	d017      	beq.n	8028128 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80280f8:	4b1d      	ldr	r3, [pc, #116]	; (8028170 <FLASH_FlushCaches+0x88>)
 80280fa:	681b      	ldr	r3, [r3, #0]
 80280fc:	4a1c      	ldr	r2, [pc, #112]	; (8028170 <FLASH_FlushCaches+0x88>)
 80280fe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8028102:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8028104:	4b1a      	ldr	r3, [pc, #104]	; (8028170 <FLASH_FlushCaches+0x88>)
 8028106:	681b      	ldr	r3, [r3, #0]
 8028108:	4a19      	ldr	r2, [pc, #100]	; (8028170 <FLASH_FlushCaches+0x88>)
 802810a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 802810e:	6013      	str	r3, [r2, #0]
 8028110:	4b17      	ldr	r3, [pc, #92]	; (8028170 <FLASH_FlushCaches+0x88>)
 8028112:	681b      	ldr	r3, [r3, #0]
 8028114:	4a16      	ldr	r2, [pc, #88]	; (8028170 <FLASH_FlushCaches+0x88>)
 8028116:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802811a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 802811c:	4b14      	ldr	r3, [pc, #80]	; (8028170 <FLASH_FlushCaches+0x88>)
 802811e:	681b      	ldr	r3, [r3, #0]
 8028120:	4a13      	ldr	r2, [pc, #76]	; (8028170 <FLASH_FlushCaches+0x88>)
 8028122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8028126:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8028128:	4b11      	ldr	r3, [pc, #68]	; (8028170 <FLASH_FlushCaches+0x88>)
 802812a:	681b      	ldr	r3, [r3, #0]
 802812c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8028130:	2b00      	cmp	r3, #0
 8028132:	d017      	beq.n	8028164 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8028134:	4b0e      	ldr	r3, [pc, #56]	; (8028170 <FLASH_FlushCaches+0x88>)
 8028136:	681b      	ldr	r3, [r3, #0]
 8028138:	4a0d      	ldr	r2, [pc, #52]	; (8028170 <FLASH_FlushCaches+0x88>)
 802813a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 802813e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8028140:	4b0b      	ldr	r3, [pc, #44]	; (8028170 <FLASH_FlushCaches+0x88>)
 8028142:	681b      	ldr	r3, [r3, #0]
 8028144:	4a0a      	ldr	r2, [pc, #40]	; (8028170 <FLASH_FlushCaches+0x88>)
 8028146:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 802814a:	6013      	str	r3, [r2, #0]
 802814c:	4b08      	ldr	r3, [pc, #32]	; (8028170 <FLASH_FlushCaches+0x88>)
 802814e:	681b      	ldr	r3, [r3, #0]
 8028150:	4a07      	ldr	r2, [pc, #28]	; (8028170 <FLASH_FlushCaches+0x88>)
 8028152:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8028156:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8028158:	4b05      	ldr	r3, [pc, #20]	; (8028170 <FLASH_FlushCaches+0x88>)
 802815a:	681b      	ldr	r3, [r3, #0]
 802815c:	4a04      	ldr	r2, [pc, #16]	; (8028170 <FLASH_FlushCaches+0x88>)
 802815e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8028162:	6013      	str	r3, [r2, #0]
  }
}
 8028164:	bf00      	nop
 8028166:	46bd      	mov	sp, r7
 8028168:	f85d 7b04 	ldr.w	r7, [sp], #4
 802816c:	4770      	bx	lr
 802816e:	bf00      	nop
 8028170:	40023c00 	.word	0x40023c00

08028174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8028174:	b480      	push	{r7}
 8028176:	b089      	sub	sp, #36	; 0x24
 8028178:	af00      	add	r7, sp, #0
 802817a:	6078      	str	r0, [r7, #4]
 802817c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 802817e:	2300      	movs	r3, #0
 8028180:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8028182:	2300      	movs	r3, #0
 8028184:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8028186:	2300      	movs	r3, #0
 8028188:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 802818a:	2300      	movs	r3, #0
 802818c:	61fb      	str	r3, [r7, #28]
 802818e:	e16b      	b.n	8028468 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8028190:	2201      	movs	r2, #1
 8028192:	69fb      	ldr	r3, [r7, #28]
 8028194:	fa02 f303 	lsl.w	r3, r2, r3
 8028198:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 802819a:	683b      	ldr	r3, [r7, #0]
 802819c:	681b      	ldr	r3, [r3, #0]
 802819e:	697a      	ldr	r2, [r7, #20]
 80281a0:	4013      	ands	r3, r2
 80281a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80281a4:	693a      	ldr	r2, [r7, #16]
 80281a6:	697b      	ldr	r3, [r7, #20]
 80281a8:	429a      	cmp	r2, r3
 80281aa:	f040 815a 	bne.w	8028462 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80281ae:	683b      	ldr	r3, [r7, #0]
 80281b0:	685b      	ldr	r3, [r3, #4]
 80281b2:	2b01      	cmp	r3, #1
 80281b4:	d00b      	beq.n	80281ce <HAL_GPIO_Init+0x5a>
 80281b6:	683b      	ldr	r3, [r7, #0]
 80281b8:	685b      	ldr	r3, [r3, #4]
 80281ba:	2b02      	cmp	r3, #2
 80281bc:	d007      	beq.n	80281ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80281be:	683b      	ldr	r3, [r7, #0]
 80281c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80281c2:	2b11      	cmp	r3, #17
 80281c4:	d003      	beq.n	80281ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80281c6:	683b      	ldr	r3, [r7, #0]
 80281c8:	685b      	ldr	r3, [r3, #4]
 80281ca:	2b12      	cmp	r3, #18
 80281cc:	d130      	bne.n	8028230 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80281ce:	687b      	ldr	r3, [r7, #4]
 80281d0:	689b      	ldr	r3, [r3, #8]
 80281d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80281d4:	69fb      	ldr	r3, [r7, #28]
 80281d6:	005b      	lsls	r3, r3, #1
 80281d8:	2203      	movs	r2, #3
 80281da:	fa02 f303 	lsl.w	r3, r2, r3
 80281de:	43db      	mvns	r3, r3
 80281e0:	69ba      	ldr	r2, [r7, #24]
 80281e2:	4013      	ands	r3, r2
 80281e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80281e6:	683b      	ldr	r3, [r7, #0]
 80281e8:	68da      	ldr	r2, [r3, #12]
 80281ea:	69fb      	ldr	r3, [r7, #28]
 80281ec:	005b      	lsls	r3, r3, #1
 80281ee:	fa02 f303 	lsl.w	r3, r2, r3
 80281f2:	69ba      	ldr	r2, [r7, #24]
 80281f4:	4313      	orrs	r3, r2
 80281f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80281f8:	687b      	ldr	r3, [r7, #4]
 80281fa:	69ba      	ldr	r2, [r7, #24]
 80281fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80281fe:	687b      	ldr	r3, [r7, #4]
 8028200:	685b      	ldr	r3, [r3, #4]
 8028202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8028204:	2201      	movs	r2, #1
 8028206:	69fb      	ldr	r3, [r7, #28]
 8028208:	fa02 f303 	lsl.w	r3, r2, r3
 802820c:	43db      	mvns	r3, r3
 802820e:	69ba      	ldr	r2, [r7, #24]
 8028210:	4013      	ands	r3, r2
 8028212:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8028214:	683b      	ldr	r3, [r7, #0]
 8028216:	685b      	ldr	r3, [r3, #4]
 8028218:	091b      	lsrs	r3, r3, #4
 802821a:	f003 0201 	and.w	r2, r3, #1
 802821e:	69fb      	ldr	r3, [r7, #28]
 8028220:	fa02 f303 	lsl.w	r3, r2, r3
 8028224:	69ba      	ldr	r2, [r7, #24]
 8028226:	4313      	orrs	r3, r2
 8028228:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 802822a:	687b      	ldr	r3, [r7, #4]
 802822c:	69ba      	ldr	r2, [r7, #24]
 802822e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8028230:	687b      	ldr	r3, [r7, #4]
 8028232:	68db      	ldr	r3, [r3, #12]
 8028234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8028236:	69fb      	ldr	r3, [r7, #28]
 8028238:	005b      	lsls	r3, r3, #1
 802823a:	2203      	movs	r2, #3
 802823c:	fa02 f303 	lsl.w	r3, r2, r3
 8028240:	43db      	mvns	r3, r3
 8028242:	69ba      	ldr	r2, [r7, #24]
 8028244:	4013      	ands	r3, r2
 8028246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8028248:	683b      	ldr	r3, [r7, #0]
 802824a:	689a      	ldr	r2, [r3, #8]
 802824c:	69fb      	ldr	r3, [r7, #28]
 802824e:	005b      	lsls	r3, r3, #1
 8028250:	fa02 f303 	lsl.w	r3, r2, r3
 8028254:	69ba      	ldr	r2, [r7, #24]
 8028256:	4313      	orrs	r3, r2
 8028258:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 802825a:	687b      	ldr	r3, [r7, #4]
 802825c:	69ba      	ldr	r2, [r7, #24]
 802825e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8028260:	683b      	ldr	r3, [r7, #0]
 8028262:	685b      	ldr	r3, [r3, #4]
 8028264:	2b02      	cmp	r3, #2
 8028266:	d003      	beq.n	8028270 <HAL_GPIO_Init+0xfc>
 8028268:	683b      	ldr	r3, [r7, #0]
 802826a:	685b      	ldr	r3, [r3, #4]
 802826c:	2b12      	cmp	r3, #18
 802826e:	d123      	bne.n	80282b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8028270:	69fb      	ldr	r3, [r7, #28]
 8028272:	08da      	lsrs	r2, r3, #3
 8028274:	687b      	ldr	r3, [r7, #4]
 8028276:	3208      	adds	r2, #8
 8028278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802827c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 802827e:	69fb      	ldr	r3, [r7, #28]
 8028280:	f003 0307 	and.w	r3, r3, #7
 8028284:	009b      	lsls	r3, r3, #2
 8028286:	220f      	movs	r2, #15
 8028288:	fa02 f303 	lsl.w	r3, r2, r3
 802828c:	43db      	mvns	r3, r3
 802828e:	69ba      	ldr	r2, [r7, #24]
 8028290:	4013      	ands	r3, r2
 8028292:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8028294:	683b      	ldr	r3, [r7, #0]
 8028296:	691a      	ldr	r2, [r3, #16]
 8028298:	69fb      	ldr	r3, [r7, #28]
 802829a:	f003 0307 	and.w	r3, r3, #7
 802829e:	009b      	lsls	r3, r3, #2
 80282a0:	fa02 f303 	lsl.w	r3, r2, r3
 80282a4:	69ba      	ldr	r2, [r7, #24]
 80282a6:	4313      	orrs	r3, r2
 80282a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80282aa:	69fb      	ldr	r3, [r7, #28]
 80282ac:	08da      	lsrs	r2, r3, #3
 80282ae:	687b      	ldr	r3, [r7, #4]
 80282b0:	3208      	adds	r2, #8
 80282b2:	69b9      	ldr	r1, [r7, #24]
 80282b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80282b8:	687b      	ldr	r3, [r7, #4]
 80282ba:	681b      	ldr	r3, [r3, #0]
 80282bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80282be:	69fb      	ldr	r3, [r7, #28]
 80282c0:	005b      	lsls	r3, r3, #1
 80282c2:	2203      	movs	r2, #3
 80282c4:	fa02 f303 	lsl.w	r3, r2, r3
 80282c8:	43db      	mvns	r3, r3
 80282ca:	69ba      	ldr	r2, [r7, #24]
 80282cc:	4013      	ands	r3, r2
 80282ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80282d0:	683b      	ldr	r3, [r7, #0]
 80282d2:	685b      	ldr	r3, [r3, #4]
 80282d4:	f003 0203 	and.w	r2, r3, #3
 80282d8:	69fb      	ldr	r3, [r7, #28]
 80282da:	005b      	lsls	r3, r3, #1
 80282dc:	fa02 f303 	lsl.w	r3, r2, r3
 80282e0:	69ba      	ldr	r2, [r7, #24]
 80282e2:	4313      	orrs	r3, r2
 80282e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80282e6:	687b      	ldr	r3, [r7, #4]
 80282e8:	69ba      	ldr	r2, [r7, #24]
 80282ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80282ec:	683b      	ldr	r3, [r7, #0]
 80282ee:	685b      	ldr	r3, [r3, #4]
 80282f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80282f4:	2b00      	cmp	r3, #0
 80282f6:	f000 80b4 	beq.w	8028462 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80282fa:	2300      	movs	r3, #0
 80282fc:	60fb      	str	r3, [r7, #12]
 80282fe:	4b5f      	ldr	r3, [pc, #380]	; (802847c <HAL_GPIO_Init+0x308>)
 8028300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028302:	4a5e      	ldr	r2, [pc, #376]	; (802847c <HAL_GPIO_Init+0x308>)
 8028304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8028308:	6453      	str	r3, [r2, #68]	; 0x44
 802830a:	4b5c      	ldr	r3, [pc, #368]	; (802847c <HAL_GPIO_Init+0x308>)
 802830c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802830e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8028312:	60fb      	str	r3, [r7, #12]
 8028314:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8028316:	4a5a      	ldr	r2, [pc, #360]	; (8028480 <HAL_GPIO_Init+0x30c>)
 8028318:	69fb      	ldr	r3, [r7, #28]
 802831a:	089b      	lsrs	r3, r3, #2
 802831c:	3302      	adds	r3, #2
 802831e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8028322:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8028324:	69fb      	ldr	r3, [r7, #28]
 8028326:	f003 0303 	and.w	r3, r3, #3
 802832a:	009b      	lsls	r3, r3, #2
 802832c:	220f      	movs	r2, #15
 802832e:	fa02 f303 	lsl.w	r3, r2, r3
 8028332:	43db      	mvns	r3, r3
 8028334:	69ba      	ldr	r2, [r7, #24]
 8028336:	4013      	ands	r3, r2
 8028338:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 802833a:	687b      	ldr	r3, [r7, #4]
 802833c:	4a51      	ldr	r2, [pc, #324]	; (8028484 <HAL_GPIO_Init+0x310>)
 802833e:	4293      	cmp	r3, r2
 8028340:	d02b      	beq.n	802839a <HAL_GPIO_Init+0x226>
 8028342:	687b      	ldr	r3, [r7, #4]
 8028344:	4a50      	ldr	r2, [pc, #320]	; (8028488 <HAL_GPIO_Init+0x314>)
 8028346:	4293      	cmp	r3, r2
 8028348:	d025      	beq.n	8028396 <HAL_GPIO_Init+0x222>
 802834a:	687b      	ldr	r3, [r7, #4]
 802834c:	4a4f      	ldr	r2, [pc, #316]	; (802848c <HAL_GPIO_Init+0x318>)
 802834e:	4293      	cmp	r3, r2
 8028350:	d01f      	beq.n	8028392 <HAL_GPIO_Init+0x21e>
 8028352:	687b      	ldr	r3, [r7, #4]
 8028354:	4a4e      	ldr	r2, [pc, #312]	; (8028490 <HAL_GPIO_Init+0x31c>)
 8028356:	4293      	cmp	r3, r2
 8028358:	d019      	beq.n	802838e <HAL_GPIO_Init+0x21a>
 802835a:	687b      	ldr	r3, [r7, #4]
 802835c:	4a4d      	ldr	r2, [pc, #308]	; (8028494 <HAL_GPIO_Init+0x320>)
 802835e:	4293      	cmp	r3, r2
 8028360:	d013      	beq.n	802838a <HAL_GPIO_Init+0x216>
 8028362:	687b      	ldr	r3, [r7, #4]
 8028364:	4a4c      	ldr	r2, [pc, #304]	; (8028498 <HAL_GPIO_Init+0x324>)
 8028366:	4293      	cmp	r3, r2
 8028368:	d00d      	beq.n	8028386 <HAL_GPIO_Init+0x212>
 802836a:	687b      	ldr	r3, [r7, #4]
 802836c:	4a4b      	ldr	r2, [pc, #300]	; (802849c <HAL_GPIO_Init+0x328>)
 802836e:	4293      	cmp	r3, r2
 8028370:	d007      	beq.n	8028382 <HAL_GPIO_Init+0x20e>
 8028372:	687b      	ldr	r3, [r7, #4]
 8028374:	4a4a      	ldr	r2, [pc, #296]	; (80284a0 <HAL_GPIO_Init+0x32c>)
 8028376:	4293      	cmp	r3, r2
 8028378:	d101      	bne.n	802837e <HAL_GPIO_Init+0x20a>
 802837a:	2307      	movs	r3, #7
 802837c:	e00e      	b.n	802839c <HAL_GPIO_Init+0x228>
 802837e:	2308      	movs	r3, #8
 8028380:	e00c      	b.n	802839c <HAL_GPIO_Init+0x228>
 8028382:	2306      	movs	r3, #6
 8028384:	e00a      	b.n	802839c <HAL_GPIO_Init+0x228>
 8028386:	2305      	movs	r3, #5
 8028388:	e008      	b.n	802839c <HAL_GPIO_Init+0x228>
 802838a:	2304      	movs	r3, #4
 802838c:	e006      	b.n	802839c <HAL_GPIO_Init+0x228>
 802838e:	2303      	movs	r3, #3
 8028390:	e004      	b.n	802839c <HAL_GPIO_Init+0x228>
 8028392:	2302      	movs	r3, #2
 8028394:	e002      	b.n	802839c <HAL_GPIO_Init+0x228>
 8028396:	2301      	movs	r3, #1
 8028398:	e000      	b.n	802839c <HAL_GPIO_Init+0x228>
 802839a:	2300      	movs	r3, #0
 802839c:	69fa      	ldr	r2, [r7, #28]
 802839e:	f002 0203 	and.w	r2, r2, #3
 80283a2:	0092      	lsls	r2, r2, #2
 80283a4:	4093      	lsls	r3, r2
 80283a6:	69ba      	ldr	r2, [r7, #24]
 80283a8:	4313      	orrs	r3, r2
 80283aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80283ac:	4934      	ldr	r1, [pc, #208]	; (8028480 <HAL_GPIO_Init+0x30c>)
 80283ae:	69fb      	ldr	r3, [r7, #28]
 80283b0:	089b      	lsrs	r3, r3, #2
 80283b2:	3302      	adds	r3, #2
 80283b4:	69ba      	ldr	r2, [r7, #24]
 80283b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80283ba:	4b3a      	ldr	r3, [pc, #232]	; (80284a4 <HAL_GPIO_Init+0x330>)
 80283bc:	681b      	ldr	r3, [r3, #0]
 80283be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80283c0:	693b      	ldr	r3, [r7, #16]
 80283c2:	43db      	mvns	r3, r3
 80283c4:	69ba      	ldr	r2, [r7, #24]
 80283c6:	4013      	ands	r3, r2
 80283c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80283ca:	683b      	ldr	r3, [r7, #0]
 80283cc:	685b      	ldr	r3, [r3, #4]
 80283ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80283d2:	2b00      	cmp	r3, #0
 80283d4:	d003      	beq.n	80283de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80283d6:	69ba      	ldr	r2, [r7, #24]
 80283d8:	693b      	ldr	r3, [r7, #16]
 80283da:	4313      	orrs	r3, r2
 80283dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80283de:	4a31      	ldr	r2, [pc, #196]	; (80284a4 <HAL_GPIO_Init+0x330>)
 80283e0:	69bb      	ldr	r3, [r7, #24]
 80283e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80283e4:	4b2f      	ldr	r3, [pc, #188]	; (80284a4 <HAL_GPIO_Init+0x330>)
 80283e6:	685b      	ldr	r3, [r3, #4]
 80283e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80283ea:	693b      	ldr	r3, [r7, #16]
 80283ec:	43db      	mvns	r3, r3
 80283ee:	69ba      	ldr	r2, [r7, #24]
 80283f0:	4013      	ands	r3, r2
 80283f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80283f4:	683b      	ldr	r3, [r7, #0]
 80283f6:	685b      	ldr	r3, [r3, #4]
 80283f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80283fc:	2b00      	cmp	r3, #0
 80283fe:	d003      	beq.n	8028408 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8028400:	69ba      	ldr	r2, [r7, #24]
 8028402:	693b      	ldr	r3, [r7, #16]
 8028404:	4313      	orrs	r3, r2
 8028406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8028408:	4a26      	ldr	r2, [pc, #152]	; (80284a4 <HAL_GPIO_Init+0x330>)
 802840a:	69bb      	ldr	r3, [r7, #24]
 802840c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 802840e:	4b25      	ldr	r3, [pc, #148]	; (80284a4 <HAL_GPIO_Init+0x330>)
 8028410:	689b      	ldr	r3, [r3, #8]
 8028412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8028414:	693b      	ldr	r3, [r7, #16]
 8028416:	43db      	mvns	r3, r3
 8028418:	69ba      	ldr	r2, [r7, #24]
 802841a:	4013      	ands	r3, r2
 802841c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 802841e:	683b      	ldr	r3, [r7, #0]
 8028420:	685b      	ldr	r3, [r3, #4]
 8028422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028426:	2b00      	cmp	r3, #0
 8028428:	d003      	beq.n	8028432 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 802842a:	69ba      	ldr	r2, [r7, #24]
 802842c:	693b      	ldr	r3, [r7, #16]
 802842e:	4313      	orrs	r3, r2
 8028430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8028432:	4a1c      	ldr	r2, [pc, #112]	; (80284a4 <HAL_GPIO_Init+0x330>)
 8028434:	69bb      	ldr	r3, [r7, #24]
 8028436:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8028438:	4b1a      	ldr	r3, [pc, #104]	; (80284a4 <HAL_GPIO_Init+0x330>)
 802843a:	68db      	ldr	r3, [r3, #12]
 802843c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802843e:	693b      	ldr	r3, [r7, #16]
 8028440:	43db      	mvns	r3, r3
 8028442:	69ba      	ldr	r2, [r7, #24]
 8028444:	4013      	ands	r3, r2
 8028446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8028448:	683b      	ldr	r3, [r7, #0]
 802844a:	685b      	ldr	r3, [r3, #4]
 802844c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8028450:	2b00      	cmp	r3, #0
 8028452:	d003      	beq.n	802845c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8028454:	69ba      	ldr	r2, [r7, #24]
 8028456:	693b      	ldr	r3, [r7, #16]
 8028458:	4313      	orrs	r3, r2
 802845a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 802845c:	4a11      	ldr	r2, [pc, #68]	; (80284a4 <HAL_GPIO_Init+0x330>)
 802845e:	69bb      	ldr	r3, [r7, #24]
 8028460:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8028462:	69fb      	ldr	r3, [r7, #28]
 8028464:	3301      	adds	r3, #1
 8028466:	61fb      	str	r3, [r7, #28]
 8028468:	69fb      	ldr	r3, [r7, #28]
 802846a:	2b0f      	cmp	r3, #15
 802846c:	f67f ae90 	bls.w	8028190 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8028470:	bf00      	nop
 8028472:	3724      	adds	r7, #36	; 0x24
 8028474:	46bd      	mov	sp, r7
 8028476:	f85d 7b04 	ldr.w	r7, [sp], #4
 802847a:	4770      	bx	lr
 802847c:	40023800 	.word	0x40023800
 8028480:	40013800 	.word	0x40013800
 8028484:	40020000 	.word	0x40020000
 8028488:	40020400 	.word	0x40020400
 802848c:	40020800 	.word	0x40020800
 8028490:	40020c00 	.word	0x40020c00
 8028494:	40021000 	.word	0x40021000
 8028498:	40021400 	.word	0x40021400
 802849c:	40021800 	.word	0x40021800
 80284a0:	40021c00 	.word	0x40021c00
 80284a4:	40013c00 	.word	0x40013c00

080284a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80284a8:	b480      	push	{r7}
 80284aa:	b085      	sub	sp, #20
 80284ac:	af00      	add	r7, sp, #0
 80284ae:	6078      	str	r0, [r7, #4]
 80284b0:	460b      	mov	r3, r1
 80284b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80284b4:	687b      	ldr	r3, [r7, #4]
 80284b6:	691a      	ldr	r2, [r3, #16]
 80284b8:	887b      	ldrh	r3, [r7, #2]
 80284ba:	4013      	ands	r3, r2
 80284bc:	2b00      	cmp	r3, #0
 80284be:	d002      	beq.n	80284c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80284c0:	2301      	movs	r3, #1
 80284c2:	73fb      	strb	r3, [r7, #15]
 80284c4:	e001      	b.n	80284ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80284c6:	2300      	movs	r3, #0
 80284c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80284ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80284cc:	4618      	mov	r0, r3
 80284ce:	3714      	adds	r7, #20
 80284d0:	46bd      	mov	sp, r7
 80284d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80284d6:	4770      	bx	lr

080284d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80284d8:	b480      	push	{r7}
 80284da:	b083      	sub	sp, #12
 80284dc:	af00      	add	r7, sp, #0
 80284de:	6078      	str	r0, [r7, #4]
 80284e0:	460b      	mov	r3, r1
 80284e2:	807b      	strh	r3, [r7, #2]
 80284e4:	4613      	mov	r3, r2
 80284e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80284e8:	787b      	ldrb	r3, [r7, #1]
 80284ea:	2b00      	cmp	r3, #0
 80284ec:	d003      	beq.n	80284f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80284ee:	887a      	ldrh	r2, [r7, #2]
 80284f0:	687b      	ldr	r3, [r7, #4]
 80284f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80284f4:	e003      	b.n	80284fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80284f6:	887b      	ldrh	r3, [r7, #2]
 80284f8:	041a      	lsls	r2, r3, #16
 80284fa:	687b      	ldr	r3, [r7, #4]
 80284fc:	619a      	str	r2, [r3, #24]
}
 80284fe:	bf00      	nop
 8028500:	370c      	adds	r7, #12
 8028502:	46bd      	mov	sp, r7
 8028504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028508:	4770      	bx	lr
	...

0802850c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 802850c:	b580      	push	{r7, lr}
 802850e:	b084      	sub	sp, #16
 8028510:	af00      	add	r7, sp, #0
 8028512:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8028514:	687b      	ldr	r3, [r7, #4]
 8028516:	2b00      	cmp	r3, #0
 8028518:	d101      	bne.n	802851e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 802851a:	2301      	movs	r3, #1
 802851c:	e11f      	b.n	802875e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 802851e:	687b      	ldr	r3, [r7, #4]
 8028520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8028524:	b2db      	uxtb	r3, r3
 8028526:	2b00      	cmp	r3, #0
 8028528:	d106      	bne.n	8028538 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 802852a:	687b      	ldr	r3, [r7, #4]
 802852c:	2200      	movs	r2, #0
 802852e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8028532:	6878      	ldr	r0, [r7, #4]
 8028534:	f7fd fcba 	bl	8025eac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8028538:	687b      	ldr	r3, [r7, #4]
 802853a:	2224      	movs	r2, #36	; 0x24
 802853c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8028540:	687b      	ldr	r3, [r7, #4]
 8028542:	681b      	ldr	r3, [r3, #0]
 8028544:	681a      	ldr	r2, [r3, #0]
 8028546:	687b      	ldr	r3, [r7, #4]
 8028548:	681b      	ldr	r3, [r3, #0]
 802854a:	f022 0201 	bic.w	r2, r2, #1
 802854e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8028550:	687b      	ldr	r3, [r7, #4]
 8028552:	681b      	ldr	r3, [r3, #0]
 8028554:	681a      	ldr	r2, [r3, #0]
 8028556:	687b      	ldr	r3, [r7, #4]
 8028558:	681b      	ldr	r3, [r3, #0]
 802855a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802855e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8028560:	687b      	ldr	r3, [r7, #4]
 8028562:	681b      	ldr	r3, [r3, #0]
 8028564:	681a      	ldr	r2, [r3, #0]
 8028566:	687b      	ldr	r3, [r7, #4]
 8028568:	681b      	ldr	r3, [r3, #0]
 802856a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802856e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8028570:	f000 fd18 	bl	8028fa4 <HAL_RCC_GetPCLK1Freq>
 8028574:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8028576:	687b      	ldr	r3, [r7, #4]
 8028578:	685b      	ldr	r3, [r3, #4]
 802857a:	4a7b      	ldr	r2, [pc, #492]	; (8028768 <HAL_I2C_Init+0x25c>)
 802857c:	4293      	cmp	r3, r2
 802857e:	d807      	bhi.n	8028590 <HAL_I2C_Init+0x84>
 8028580:	68fb      	ldr	r3, [r7, #12]
 8028582:	4a7a      	ldr	r2, [pc, #488]	; (802876c <HAL_I2C_Init+0x260>)
 8028584:	4293      	cmp	r3, r2
 8028586:	bf94      	ite	ls
 8028588:	2301      	movls	r3, #1
 802858a:	2300      	movhi	r3, #0
 802858c:	b2db      	uxtb	r3, r3
 802858e:	e006      	b.n	802859e <HAL_I2C_Init+0x92>
 8028590:	68fb      	ldr	r3, [r7, #12]
 8028592:	4a77      	ldr	r2, [pc, #476]	; (8028770 <HAL_I2C_Init+0x264>)
 8028594:	4293      	cmp	r3, r2
 8028596:	bf94      	ite	ls
 8028598:	2301      	movls	r3, #1
 802859a:	2300      	movhi	r3, #0
 802859c:	b2db      	uxtb	r3, r3
 802859e:	2b00      	cmp	r3, #0
 80285a0:	d001      	beq.n	80285a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80285a2:	2301      	movs	r3, #1
 80285a4:	e0db      	b.n	802875e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80285a6:	68fb      	ldr	r3, [r7, #12]
 80285a8:	4a72      	ldr	r2, [pc, #456]	; (8028774 <HAL_I2C_Init+0x268>)
 80285aa:	fba2 2303 	umull	r2, r3, r2, r3
 80285ae:	0c9b      	lsrs	r3, r3, #18
 80285b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80285b2:	687b      	ldr	r3, [r7, #4]
 80285b4:	681b      	ldr	r3, [r3, #0]
 80285b6:	685b      	ldr	r3, [r3, #4]
 80285b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80285bc:	687b      	ldr	r3, [r7, #4]
 80285be:	681b      	ldr	r3, [r3, #0]
 80285c0:	68ba      	ldr	r2, [r7, #8]
 80285c2:	430a      	orrs	r2, r1
 80285c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80285c6:	687b      	ldr	r3, [r7, #4]
 80285c8:	681b      	ldr	r3, [r3, #0]
 80285ca:	6a1b      	ldr	r3, [r3, #32]
 80285cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80285d0:	687b      	ldr	r3, [r7, #4]
 80285d2:	685b      	ldr	r3, [r3, #4]
 80285d4:	4a64      	ldr	r2, [pc, #400]	; (8028768 <HAL_I2C_Init+0x25c>)
 80285d6:	4293      	cmp	r3, r2
 80285d8:	d802      	bhi.n	80285e0 <HAL_I2C_Init+0xd4>
 80285da:	68bb      	ldr	r3, [r7, #8]
 80285dc:	3301      	adds	r3, #1
 80285de:	e009      	b.n	80285f4 <HAL_I2C_Init+0xe8>
 80285e0:	68bb      	ldr	r3, [r7, #8]
 80285e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80285e6:	fb02 f303 	mul.w	r3, r2, r3
 80285ea:	4a63      	ldr	r2, [pc, #396]	; (8028778 <HAL_I2C_Init+0x26c>)
 80285ec:	fba2 2303 	umull	r2, r3, r2, r3
 80285f0:	099b      	lsrs	r3, r3, #6
 80285f2:	3301      	adds	r3, #1
 80285f4:	687a      	ldr	r2, [r7, #4]
 80285f6:	6812      	ldr	r2, [r2, #0]
 80285f8:	430b      	orrs	r3, r1
 80285fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80285fc:	687b      	ldr	r3, [r7, #4]
 80285fe:	681b      	ldr	r3, [r3, #0]
 8028600:	69db      	ldr	r3, [r3, #28]
 8028602:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8028606:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 802860a:	687b      	ldr	r3, [r7, #4]
 802860c:	685b      	ldr	r3, [r3, #4]
 802860e:	4956      	ldr	r1, [pc, #344]	; (8028768 <HAL_I2C_Init+0x25c>)
 8028610:	428b      	cmp	r3, r1
 8028612:	d80d      	bhi.n	8028630 <HAL_I2C_Init+0x124>
 8028614:	68fb      	ldr	r3, [r7, #12]
 8028616:	1e59      	subs	r1, r3, #1
 8028618:	687b      	ldr	r3, [r7, #4]
 802861a:	685b      	ldr	r3, [r3, #4]
 802861c:	005b      	lsls	r3, r3, #1
 802861e:	fbb1 f3f3 	udiv	r3, r1, r3
 8028622:	3301      	adds	r3, #1
 8028624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028628:	2b04      	cmp	r3, #4
 802862a:	bf38      	it	cc
 802862c:	2304      	movcc	r3, #4
 802862e:	e04f      	b.n	80286d0 <HAL_I2C_Init+0x1c4>
 8028630:	687b      	ldr	r3, [r7, #4]
 8028632:	689b      	ldr	r3, [r3, #8]
 8028634:	2b00      	cmp	r3, #0
 8028636:	d111      	bne.n	802865c <HAL_I2C_Init+0x150>
 8028638:	68fb      	ldr	r3, [r7, #12]
 802863a:	1e58      	subs	r0, r3, #1
 802863c:	687b      	ldr	r3, [r7, #4]
 802863e:	6859      	ldr	r1, [r3, #4]
 8028640:	460b      	mov	r3, r1
 8028642:	005b      	lsls	r3, r3, #1
 8028644:	440b      	add	r3, r1
 8028646:	fbb0 f3f3 	udiv	r3, r0, r3
 802864a:	3301      	adds	r3, #1
 802864c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028650:	2b00      	cmp	r3, #0
 8028652:	bf0c      	ite	eq
 8028654:	2301      	moveq	r3, #1
 8028656:	2300      	movne	r3, #0
 8028658:	b2db      	uxtb	r3, r3
 802865a:	e012      	b.n	8028682 <HAL_I2C_Init+0x176>
 802865c:	68fb      	ldr	r3, [r7, #12]
 802865e:	1e58      	subs	r0, r3, #1
 8028660:	687b      	ldr	r3, [r7, #4]
 8028662:	6859      	ldr	r1, [r3, #4]
 8028664:	460b      	mov	r3, r1
 8028666:	009b      	lsls	r3, r3, #2
 8028668:	440b      	add	r3, r1
 802866a:	0099      	lsls	r1, r3, #2
 802866c:	440b      	add	r3, r1
 802866e:	fbb0 f3f3 	udiv	r3, r0, r3
 8028672:	3301      	adds	r3, #1
 8028674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8028678:	2b00      	cmp	r3, #0
 802867a:	bf0c      	ite	eq
 802867c:	2301      	moveq	r3, #1
 802867e:	2300      	movne	r3, #0
 8028680:	b2db      	uxtb	r3, r3
 8028682:	2b00      	cmp	r3, #0
 8028684:	d001      	beq.n	802868a <HAL_I2C_Init+0x17e>
 8028686:	2301      	movs	r3, #1
 8028688:	e022      	b.n	80286d0 <HAL_I2C_Init+0x1c4>
 802868a:	687b      	ldr	r3, [r7, #4]
 802868c:	689b      	ldr	r3, [r3, #8]
 802868e:	2b00      	cmp	r3, #0
 8028690:	d10e      	bne.n	80286b0 <HAL_I2C_Init+0x1a4>
 8028692:	68fb      	ldr	r3, [r7, #12]
 8028694:	1e58      	subs	r0, r3, #1
 8028696:	687b      	ldr	r3, [r7, #4]
 8028698:	6859      	ldr	r1, [r3, #4]
 802869a:	460b      	mov	r3, r1
 802869c:	005b      	lsls	r3, r3, #1
 802869e:	440b      	add	r3, r1
 80286a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80286a4:	3301      	adds	r3, #1
 80286a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80286aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80286ae:	e00f      	b.n	80286d0 <HAL_I2C_Init+0x1c4>
 80286b0:	68fb      	ldr	r3, [r7, #12]
 80286b2:	1e58      	subs	r0, r3, #1
 80286b4:	687b      	ldr	r3, [r7, #4]
 80286b6:	6859      	ldr	r1, [r3, #4]
 80286b8:	460b      	mov	r3, r1
 80286ba:	009b      	lsls	r3, r3, #2
 80286bc:	440b      	add	r3, r1
 80286be:	0099      	lsls	r1, r3, #2
 80286c0:	440b      	add	r3, r1
 80286c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80286c6:	3301      	adds	r3, #1
 80286c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80286cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80286d0:	6879      	ldr	r1, [r7, #4]
 80286d2:	6809      	ldr	r1, [r1, #0]
 80286d4:	4313      	orrs	r3, r2
 80286d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80286d8:	687b      	ldr	r3, [r7, #4]
 80286da:	681b      	ldr	r3, [r3, #0]
 80286dc:	681b      	ldr	r3, [r3, #0]
 80286de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80286e2:	687b      	ldr	r3, [r7, #4]
 80286e4:	69da      	ldr	r2, [r3, #28]
 80286e6:	687b      	ldr	r3, [r7, #4]
 80286e8:	6a1b      	ldr	r3, [r3, #32]
 80286ea:	431a      	orrs	r2, r3
 80286ec:	687b      	ldr	r3, [r7, #4]
 80286ee:	681b      	ldr	r3, [r3, #0]
 80286f0:	430a      	orrs	r2, r1
 80286f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80286f4:	687b      	ldr	r3, [r7, #4]
 80286f6:	681b      	ldr	r3, [r3, #0]
 80286f8:	689b      	ldr	r3, [r3, #8]
 80286fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80286fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8028702:	687a      	ldr	r2, [r7, #4]
 8028704:	6911      	ldr	r1, [r2, #16]
 8028706:	687a      	ldr	r2, [r7, #4]
 8028708:	68d2      	ldr	r2, [r2, #12]
 802870a:	4311      	orrs	r1, r2
 802870c:	687a      	ldr	r2, [r7, #4]
 802870e:	6812      	ldr	r2, [r2, #0]
 8028710:	430b      	orrs	r3, r1
 8028712:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8028714:	687b      	ldr	r3, [r7, #4]
 8028716:	681b      	ldr	r3, [r3, #0]
 8028718:	68db      	ldr	r3, [r3, #12]
 802871a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 802871e:	687b      	ldr	r3, [r7, #4]
 8028720:	695a      	ldr	r2, [r3, #20]
 8028722:	687b      	ldr	r3, [r7, #4]
 8028724:	699b      	ldr	r3, [r3, #24]
 8028726:	431a      	orrs	r2, r3
 8028728:	687b      	ldr	r3, [r7, #4]
 802872a:	681b      	ldr	r3, [r3, #0]
 802872c:	430a      	orrs	r2, r1
 802872e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8028730:	687b      	ldr	r3, [r7, #4]
 8028732:	681b      	ldr	r3, [r3, #0]
 8028734:	681a      	ldr	r2, [r3, #0]
 8028736:	687b      	ldr	r3, [r7, #4]
 8028738:	681b      	ldr	r3, [r3, #0]
 802873a:	f042 0201 	orr.w	r2, r2, #1
 802873e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8028740:	687b      	ldr	r3, [r7, #4]
 8028742:	2200      	movs	r2, #0
 8028744:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8028746:	687b      	ldr	r3, [r7, #4]
 8028748:	2220      	movs	r2, #32
 802874a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 802874e:	687b      	ldr	r3, [r7, #4]
 8028750:	2200      	movs	r2, #0
 8028752:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8028754:	687b      	ldr	r3, [r7, #4]
 8028756:	2200      	movs	r2, #0
 8028758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 802875c:	2300      	movs	r3, #0
}
 802875e:	4618      	mov	r0, r3
 8028760:	3710      	adds	r7, #16
 8028762:	46bd      	mov	sp, r7
 8028764:	bd80      	pop	{r7, pc}
 8028766:	bf00      	nop
 8028768:	000186a0 	.word	0x000186a0
 802876c:	001e847f 	.word	0x001e847f
 8028770:	003d08ff 	.word	0x003d08ff
 8028774:	431bde83 	.word	0x431bde83
 8028778:	10624dd3 	.word	0x10624dd3

0802877c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 802877c:	b580      	push	{r7, lr}
 802877e:	b086      	sub	sp, #24
 8028780:	af00      	add	r7, sp, #0
 8028782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8028784:	687b      	ldr	r3, [r7, #4]
 8028786:	2b00      	cmp	r3, #0
 8028788:	d101      	bne.n	802878e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 802878a:	2301      	movs	r3, #1
 802878c:	e25b      	b.n	8028c46 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 802878e:	687b      	ldr	r3, [r7, #4]
 8028790:	681b      	ldr	r3, [r3, #0]
 8028792:	f003 0301 	and.w	r3, r3, #1
 8028796:	2b00      	cmp	r3, #0
 8028798:	d075      	beq.n	8028886 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 802879a:	4ba3      	ldr	r3, [pc, #652]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 802879c:	689b      	ldr	r3, [r3, #8]
 802879e:	f003 030c 	and.w	r3, r3, #12
 80287a2:	2b04      	cmp	r3, #4
 80287a4:	d00c      	beq.n	80287c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80287a6:	4ba0      	ldr	r3, [pc, #640]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 80287a8:	689b      	ldr	r3, [r3, #8]
 80287aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80287ae:	2b08      	cmp	r3, #8
 80287b0:	d112      	bne.n	80287d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80287b2:	4b9d      	ldr	r3, [pc, #628]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 80287b4:	685b      	ldr	r3, [r3, #4]
 80287b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80287ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80287be:	d10b      	bne.n	80287d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80287c0:	4b99      	ldr	r3, [pc, #612]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 80287c2:	681b      	ldr	r3, [r3, #0]
 80287c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80287c8:	2b00      	cmp	r3, #0
 80287ca:	d05b      	beq.n	8028884 <HAL_RCC_OscConfig+0x108>
 80287cc:	687b      	ldr	r3, [r7, #4]
 80287ce:	685b      	ldr	r3, [r3, #4]
 80287d0:	2b00      	cmp	r3, #0
 80287d2:	d157      	bne.n	8028884 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80287d4:	2301      	movs	r3, #1
 80287d6:	e236      	b.n	8028c46 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80287d8:	687b      	ldr	r3, [r7, #4]
 80287da:	685b      	ldr	r3, [r3, #4]
 80287dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80287e0:	d106      	bne.n	80287f0 <HAL_RCC_OscConfig+0x74>
 80287e2:	4b91      	ldr	r3, [pc, #580]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 80287e4:	681b      	ldr	r3, [r3, #0]
 80287e6:	4a90      	ldr	r2, [pc, #576]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 80287e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80287ec:	6013      	str	r3, [r2, #0]
 80287ee:	e01d      	b.n	802882c <HAL_RCC_OscConfig+0xb0>
 80287f0:	687b      	ldr	r3, [r7, #4]
 80287f2:	685b      	ldr	r3, [r3, #4]
 80287f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80287f8:	d10c      	bne.n	8028814 <HAL_RCC_OscConfig+0x98>
 80287fa:	4b8b      	ldr	r3, [pc, #556]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 80287fc:	681b      	ldr	r3, [r3, #0]
 80287fe:	4a8a      	ldr	r2, [pc, #552]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 8028800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8028804:	6013      	str	r3, [r2, #0]
 8028806:	4b88      	ldr	r3, [pc, #544]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 8028808:	681b      	ldr	r3, [r3, #0]
 802880a:	4a87      	ldr	r2, [pc, #540]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 802880c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8028810:	6013      	str	r3, [r2, #0]
 8028812:	e00b      	b.n	802882c <HAL_RCC_OscConfig+0xb0>
 8028814:	4b84      	ldr	r3, [pc, #528]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 8028816:	681b      	ldr	r3, [r3, #0]
 8028818:	4a83      	ldr	r2, [pc, #524]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 802881a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802881e:	6013      	str	r3, [r2, #0]
 8028820:	4b81      	ldr	r3, [pc, #516]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 8028822:	681b      	ldr	r3, [r3, #0]
 8028824:	4a80      	ldr	r2, [pc, #512]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 8028826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802882a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 802882c:	687b      	ldr	r3, [r7, #4]
 802882e:	685b      	ldr	r3, [r3, #4]
 8028830:	2b00      	cmp	r3, #0
 8028832:	d013      	beq.n	802885c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028834:	f7fe f926 	bl	8026a84 <HAL_GetTick>
 8028838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802883a:	e008      	b.n	802884e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 802883c:	f7fe f922 	bl	8026a84 <HAL_GetTick>
 8028840:	4602      	mov	r2, r0
 8028842:	693b      	ldr	r3, [r7, #16]
 8028844:	1ad3      	subs	r3, r2, r3
 8028846:	2b64      	cmp	r3, #100	; 0x64
 8028848:	d901      	bls.n	802884e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 802884a:	2303      	movs	r3, #3
 802884c:	e1fb      	b.n	8028c46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802884e:	4b76      	ldr	r3, [pc, #472]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 8028850:	681b      	ldr	r3, [r3, #0]
 8028852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028856:	2b00      	cmp	r3, #0
 8028858:	d0f0      	beq.n	802883c <HAL_RCC_OscConfig+0xc0>
 802885a:	e014      	b.n	8028886 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802885c:	f7fe f912 	bl	8026a84 <HAL_GetTick>
 8028860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8028862:	e008      	b.n	8028876 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8028864:	f7fe f90e 	bl	8026a84 <HAL_GetTick>
 8028868:	4602      	mov	r2, r0
 802886a:	693b      	ldr	r3, [r7, #16]
 802886c:	1ad3      	subs	r3, r2, r3
 802886e:	2b64      	cmp	r3, #100	; 0x64
 8028870:	d901      	bls.n	8028876 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8028872:	2303      	movs	r3, #3
 8028874:	e1e7      	b.n	8028c46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8028876:	4b6c      	ldr	r3, [pc, #432]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 8028878:	681b      	ldr	r3, [r3, #0]
 802887a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802887e:	2b00      	cmp	r3, #0
 8028880:	d1f0      	bne.n	8028864 <HAL_RCC_OscConfig+0xe8>
 8028882:	e000      	b.n	8028886 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8028884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8028886:	687b      	ldr	r3, [r7, #4]
 8028888:	681b      	ldr	r3, [r3, #0]
 802888a:	f003 0302 	and.w	r3, r3, #2
 802888e:	2b00      	cmp	r3, #0
 8028890:	d063      	beq.n	802895a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8028892:	4b65      	ldr	r3, [pc, #404]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 8028894:	689b      	ldr	r3, [r3, #8]
 8028896:	f003 030c 	and.w	r3, r3, #12
 802889a:	2b00      	cmp	r3, #0
 802889c:	d00b      	beq.n	80288b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 802889e:	4b62      	ldr	r3, [pc, #392]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 80288a0:	689b      	ldr	r3, [r3, #8]
 80288a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80288a6:	2b08      	cmp	r3, #8
 80288a8:	d11c      	bne.n	80288e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80288aa:	4b5f      	ldr	r3, [pc, #380]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 80288ac:	685b      	ldr	r3, [r3, #4]
 80288ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80288b2:	2b00      	cmp	r3, #0
 80288b4:	d116      	bne.n	80288e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80288b6:	4b5c      	ldr	r3, [pc, #368]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 80288b8:	681b      	ldr	r3, [r3, #0]
 80288ba:	f003 0302 	and.w	r3, r3, #2
 80288be:	2b00      	cmp	r3, #0
 80288c0:	d005      	beq.n	80288ce <HAL_RCC_OscConfig+0x152>
 80288c2:	687b      	ldr	r3, [r7, #4]
 80288c4:	68db      	ldr	r3, [r3, #12]
 80288c6:	2b01      	cmp	r3, #1
 80288c8:	d001      	beq.n	80288ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80288ca:	2301      	movs	r3, #1
 80288cc:	e1bb      	b.n	8028c46 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80288ce:	4b56      	ldr	r3, [pc, #344]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 80288d0:	681b      	ldr	r3, [r3, #0]
 80288d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80288d6:	687b      	ldr	r3, [r7, #4]
 80288d8:	691b      	ldr	r3, [r3, #16]
 80288da:	00db      	lsls	r3, r3, #3
 80288dc:	4952      	ldr	r1, [pc, #328]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 80288de:	4313      	orrs	r3, r2
 80288e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80288e2:	e03a      	b.n	802895a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80288e4:	687b      	ldr	r3, [r7, #4]
 80288e6:	68db      	ldr	r3, [r3, #12]
 80288e8:	2b00      	cmp	r3, #0
 80288ea:	d020      	beq.n	802892e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80288ec:	4b4f      	ldr	r3, [pc, #316]	; (8028a2c <HAL_RCC_OscConfig+0x2b0>)
 80288ee:	2201      	movs	r2, #1
 80288f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80288f2:	f7fe f8c7 	bl	8026a84 <HAL_GetTick>
 80288f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80288f8:	e008      	b.n	802890c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80288fa:	f7fe f8c3 	bl	8026a84 <HAL_GetTick>
 80288fe:	4602      	mov	r2, r0
 8028900:	693b      	ldr	r3, [r7, #16]
 8028902:	1ad3      	subs	r3, r2, r3
 8028904:	2b02      	cmp	r3, #2
 8028906:	d901      	bls.n	802890c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8028908:	2303      	movs	r3, #3
 802890a:	e19c      	b.n	8028c46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802890c:	4b46      	ldr	r3, [pc, #280]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 802890e:	681b      	ldr	r3, [r3, #0]
 8028910:	f003 0302 	and.w	r3, r3, #2
 8028914:	2b00      	cmp	r3, #0
 8028916:	d0f0      	beq.n	80288fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8028918:	4b43      	ldr	r3, [pc, #268]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 802891a:	681b      	ldr	r3, [r3, #0]
 802891c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8028920:	687b      	ldr	r3, [r7, #4]
 8028922:	691b      	ldr	r3, [r3, #16]
 8028924:	00db      	lsls	r3, r3, #3
 8028926:	4940      	ldr	r1, [pc, #256]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 8028928:	4313      	orrs	r3, r2
 802892a:	600b      	str	r3, [r1, #0]
 802892c:	e015      	b.n	802895a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802892e:	4b3f      	ldr	r3, [pc, #252]	; (8028a2c <HAL_RCC_OscConfig+0x2b0>)
 8028930:	2200      	movs	r2, #0
 8028932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8028934:	f7fe f8a6 	bl	8026a84 <HAL_GetTick>
 8028938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802893a:	e008      	b.n	802894e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802893c:	f7fe f8a2 	bl	8026a84 <HAL_GetTick>
 8028940:	4602      	mov	r2, r0
 8028942:	693b      	ldr	r3, [r7, #16]
 8028944:	1ad3      	subs	r3, r2, r3
 8028946:	2b02      	cmp	r3, #2
 8028948:	d901      	bls.n	802894e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 802894a:	2303      	movs	r3, #3
 802894c:	e17b      	b.n	8028c46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802894e:	4b36      	ldr	r3, [pc, #216]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 8028950:	681b      	ldr	r3, [r3, #0]
 8028952:	f003 0302 	and.w	r3, r3, #2
 8028956:	2b00      	cmp	r3, #0
 8028958:	d1f0      	bne.n	802893c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802895a:	687b      	ldr	r3, [r7, #4]
 802895c:	681b      	ldr	r3, [r3, #0]
 802895e:	f003 0308 	and.w	r3, r3, #8
 8028962:	2b00      	cmp	r3, #0
 8028964:	d030      	beq.n	80289c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8028966:	687b      	ldr	r3, [r7, #4]
 8028968:	695b      	ldr	r3, [r3, #20]
 802896a:	2b00      	cmp	r3, #0
 802896c:	d016      	beq.n	802899c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 802896e:	4b30      	ldr	r3, [pc, #192]	; (8028a30 <HAL_RCC_OscConfig+0x2b4>)
 8028970:	2201      	movs	r2, #1
 8028972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8028974:	f7fe f886 	bl	8026a84 <HAL_GetTick>
 8028978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802897a:	e008      	b.n	802898e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802897c:	f7fe f882 	bl	8026a84 <HAL_GetTick>
 8028980:	4602      	mov	r2, r0
 8028982:	693b      	ldr	r3, [r7, #16]
 8028984:	1ad3      	subs	r3, r2, r3
 8028986:	2b02      	cmp	r3, #2
 8028988:	d901      	bls.n	802898e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 802898a:	2303      	movs	r3, #3
 802898c:	e15b      	b.n	8028c46 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802898e:	4b26      	ldr	r3, [pc, #152]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 8028990:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8028992:	f003 0302 	and.w	r3, r3, #2
 8028996:	2b00      	cmp	r3, #0
 8028998:	d0f0      	beq.n	802897c <HAL_RCC_OscConfig+0x200>
 802899a:	e015      	b.n	80289c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 802899c:	4b24      	ldr	r3, [pc, #144]	; (8028a30 <HAL_RCC_OscConfig+0x2b4>)
 802899e:	2200      	movs	r2, #0
 80289a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80289a2:	f7fe f86f 	bl	8026a84 <HAL_GetTick>
 80289a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80289a8:	e008      	b.n	80289bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80289aa:	f7fe f86b 	bl	8026a84 <HAL_GetTick>
 80289ae:	4602      	mov	r2, r0
 80289b0:	693b      	ldr	r3, [r7, #16]
 80289b2:	1ad3      	subs	r3, r2, r3
 80289b4:	2b02      	cmp	r3, #2
 80289b6:	d901      	bls.n	80289bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80289b8:	2303      	movs	r3, #3
 80289ba:	e144      	b.n	8028c46 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80289bc:	4b1a      	ldr	r3, [pc, #104]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 80289be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80289c0:	f003 0302 	and.w	r3, r3, #2
 80289c4:	2b00      	cmp	r3, #0
 80289c6:	d1f0      	bne.n	80289aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80289c8:	687b      	ldr	r3, [r7, #4]
 80289ca:	681b      	ldr	r3, [r3, #0]
 80289cc:	f003 0304 	and.w	r3, r3, #4
 80289d0:	2b00      	cmp	r3, #0
 80289d2:	f000 80a0 	beq.w	8028b16 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80289d6:	2300      	movs	r3, #0
 80289d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80289da:	4b13      	ldr	r3, [pc, #76]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 80289dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80289de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80289e2:	2b00      	cmp	r3, #0
 80289e4:	d10f      	bne.n	8028a06 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80289e6:	2300      	movs	r3, #0
 80289e8:	60bb      	str	r3, [r7, #8]
 80289ea:	4b0f      	ldr	r3, [pc, #60]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 80289ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80289ee:	4a0e      	ldr	r2, [pc, #56]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 80289f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80289f4:	6413      	str	r3, [r2, #64]	; 0x40
 80289f6:	4b0c      	ldr	r3, [pc, #48]	; (8028a28 <HAL_RCC_OscConfig+0x2ac>)
 80289f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80289fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80289fe:	60bb      	str	r3, [r7, #8]
 8028a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8028a02:	2301      	movs	r3, #1
 8028a04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8028a06:	4b0b      	ldr	r3, [pc, #44]	; (8028a34 <HAL_RCC_OscConfig+0x2b8>)
 8028a08:	681b      	ldr	r3, [r3, #0]
 8028a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8028a0e:	2b00      	cmp	r3, #0
 8028a10:	d121      	bne.n	8028a56 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8028a12:	4b08      	ldr	r3, [pc, #32]	; (8028a34 <HAL_RCC_OscConfig+0x2b8>)
 8028a14:	681b      	ldr	r3, [r3, #0]
 8028a16:	4a07      	ldr	r2, [pc, #28]	; (8028a34 <HAL_RCC_OscConfig+0x2b8>)
 8028a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8028a1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8028a1e:	f7fe f831 	bl	8026a84 <HAL_GetTick>
 8028a22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8028a24:	e011      	b.n	8028a4a <HAL_RCC_OscConfig+0x2ce>
 8028a26:	bf00      	nop
 8028a28:	40023800 	.word	0x40023800
 8028a2c:	42470000 	.word	0x42470000
 8028a30:	42470e80 	.word	0x42470e80
 8028a34:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8028a38:	f7fe f824 	bl	8026a84 <HAL_GetTick>
 8028a3c:	4602      	mov	r2, r0
 8028a3e:	693b      	ldr	r3, [r7, #16]
 8028a40:	1ad3      	subs	r3, r2, r3
 8028a42:	2b02      	cmp	r3, #2
 8028a44:	d901      	bls.n	8028a4a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8028a46:	2303      	movs	r3, #3
 8028a48:	e0fd      	b.n	8028c46 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8028a4a:	4b81      	ldr	r3, [pc, #516]	; (8028c50 <HAL_RCC_OscConfig+0x4d4>)
 8028a4c:	681b      	ldr	r3, [r3, #0]
 8028a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8028a52:	2b00      	cmp	r3, #0
 8028a54:	d0f0      	beq.n	8028a38 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8028a56:	687b      	ldr	r3, [r7, #4]
 8028a58:	689b      	ldr	r3, [r3, #8]
 8028a5a:	2b01      	cmp	r3, #1
 8028a5c:	d106      	bne.n	8028a6c <HAL_RCC_OscConfig+0x2f0>
 8028a5e:	4b7d      	ldr	r3, [pc, #500]	; (8028c54 <HAL_RCC_OscConfig+0x4d8>)
 8028a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028a62:	4a7c      	ldr	r2, [pc, #496]	; (8028c54 <HAL_RCC_OscConfig+0x4d8>)
 8028a64:	f043 0301 	orr.w	r3, r3, #1
 8028a68:	6713      	str	r3, [r2, #112]	; 0x70
 8028a6a:	e01c      	b.n	8028aa6 <HAL_RCC_OscConfig+0x32a>
 8028a6c:	687b      	ldr	r3, [r7, #4]
 8028a6e:	689b      	ldr	r3, [r3, #8]
 8028a70:	2b05      	cmp	r3, #5
 8028a72:	d10c      	bne.n	8028a8e <HAL_RCC_OscConfig+0x312>
 8028a74:	4b77      	ldr	r3, [pc, #476]	; (8028c54 <HAL_RCC_OscConfig+0x4d8>)
 8028a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028a78:	4a76      	ldr	r2, [pc, #472]	; (8028c54 <HAL_RCC_OscConfig+0x4d8>)
 8028a7a:	f043 0304 	orr.w	r3, r3, #4
 8028a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8028a80:	4b74      	ldr	r3, [pc, #464]	; (8028c54 <HAL_RCC_OscConfig+0x4d8>)
 8028a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028a84:	4a73      	ldr	r2, [pc, #460]	; (8028c54 <HAL_RCC_OscConfig+0x4d8>)
 8028a86:	f043 0301 	orr.w	r3, r3, #1
 8028a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8028a8c:	e00b      	b.n	8028aa6 <HAL_RCC_OscConfig+0x32a>
 8028a8e:	4b71      	ldr	r3, [pc, #452]	; (8028c54 <HAL_RCC_OscConfig+0x4d8>)
 8028a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028a92:	4a70      	ldr	r2, [pc, #448]	; (8028c54 <HAL_RCC_OscConfig+0x4d8>)
 8028a94:	f023 0301 	bic.w	r3, r3, #1
 8028a98:	6713      	str	r3, [r2, #112]	; 0x70
 8028a9a:	4b6e      	ldr	r3, [pc, #440]	; (8028c54 <HAL_RCC_OscConfig+0x4d8>)
 8028a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028a9e:	4a6d      	ldr	r2, [pc, #436]	; (8028c54 <HAL_RCC_OscConfig+0x4d8>)
 8028aa0:	f023 0304 	bic.w	r3, r3, #4
 8028aa4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8028aa6:	687b      	ldr	r3, [r7, #4]
 8028aa8:	689b      	ldr	r3, [r3, #8]
 8028aaa:	2b00      	cmp	r3, #0
 8028aac:	d015      	beq.n	8028ada <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8028aae:	f7fd ffe9 	bl	8026a84 <HAL_GetTick>
 8028ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8028ab4:	e00a      	b.n	8028acc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8028ab6:	f7fd ffe5 	bl	8026a84 <HAL_GetTick>
 8028aba:	4602      	mov	r2, r0
 8028abc:	693b      	ldr	r3, [r7, #16]
 8028abe:	1ad3      	subs	r3, r2, r3
 8028ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8028ac4:	4293      	cmp	r3, r2
 8028ac6:	d901      	bls.n	8028acc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8028ac8:	2303      	movs	r3, #3
 8028aca:	e0bc      	b.n	8028c46 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8028acc:	4b61      	ldr	r3, [pc, #388]	; (8028c54 <HAL_RCC_OscConfig+0x4d8>)
 8028ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028ad0:	f003 0302 	and.w	r3, r3, #2
 8028ad4:	2b00      	cmp	r3, #0
 8028ad6:	d0ee      	beq.n	8028ab6 <HAL_RCC_OscConfig+0x33a>
 8028ad8:	e014      	b.n	8028b04 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8028ada:	f7fd ffd3 	bl	8026a84 <HAL_GetTick>
 8028ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8028ae0:	e00a      	b.n	8028af8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8028ae2:	f7fd ffcf 	bl	8026a84 <HAL_GetTick>
 8028ae6:	4602      	mov	r2, r0
 8028ae8:	693b      	ldr	r3, [r7, #16]
 8028aea:	1ad3      	subs	r3, r2, r3
 8028aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8028af0:	4293      	cmp	r3, r2
 8028af2:	d901      	bls.n	8028af8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8028af4:	2303      	movs	r3, #3
 8028af6:	e0a6      	b.n	8028c46 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8028af8:	4b56      	ldr	r3, [pc, #344]	; (8028c54 <HAL_RCC_OscConfig+0x4d8>)
 8028afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028afc:	f003 0302 	and.w	r3, r3, #2
 8028b00:	2b00      	cmp	r3, #0
 8028b02:	d1ee      	bne.n	8028ae2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8028b04:	7dfb      	ldrb	r3, [r7, #23]
 8028b06:	2b01      	cmp	r3, #1
 8028b08:	d105      	bne.n	8028b16 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8028b0a:	4b52      	ldr	r3, [pc, #328]	; (8028c54 <HAL_RCC_OscConfig+0x4d8>)
 8028b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8028b0e:	4a51      	ldr	r2, [pc, #324]	; (8028c54 <HAL_RCC_OscConfig+0x4d8>)
 8028b10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8028b14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8028b16:	687b      	ldr	r3, [r7, #4]
 8028b18:	699b      	ldr	r3, [r3, #24]
 8028b1a:	2b00      	cmp	r3, #0
 8028b1c:	f000 8092 	beq.w	8028c44 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8028b20:	4b4c      	ldr	r3, [pc, #304]	; (8028c54 <HAL_RCC_OscConfig+0x4d8>)
 8028b22:	689b      	ldr	r3, [r3, #8]
 8028b24:	f003 030c 	and.w	r3, r3, #12
 8028b28:	2b08      	cmp	r3, #8
 8028b2a:	d05c      	beq.n	8028be6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8028b2c:	687b      	ldr	r3, [r7, #4]
 8028b2e:	699b      	ldr	r3, [r3, #24]
 8028b30:	2b02      	cmp	r3, #2
 8028b32:	d141      	bne.n	8028bb8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8028b34:	4b48      	ldr	r3, [pc, #288]	; (8028c58 <HAL_RCC_OscConfig+0x4dc>)
 8028b36:	2200      	movs	r2, #0
 8028b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028b3a:	f7fd ffa3 	bl	8026a84 <HAL_GetTick>
 8028b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8028b40:	e008      	b.n	8028b54 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8028b42:	f7fd ff9f 	bl	8026a84 <HAL_GetTick>
 8028b46:	4602      	mov	r2, r0
 8028b48:	693b      	ldr	r3, [r7, #16]
 8028b4a:	1ad3      	subs	r3, r2, r3
 8028b4c:	2b02      	cmp	r3, #2
 8028b4e:	d901      	bls.n	8028b54 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8028b50:	2303      	movs	r3, #3
 8028b52:	e078      	b.n	8028c46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8028b54:	4b3f      	ldr	r3, [pc, #252]	; (8028c54 <HAL_RCC_OscConfig+0x4d8>)
 8028b56:	681b      	ldr	r3, [r3, #0]
 8028b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8028b5c:	2b00      	cmp	r3, #0
 8028b5e:	d1f0      	bne.n	8028b42 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8028b60:	687b      	ldr	r3, [r7, #4]
 8028b62:	69da      	ldr	r2, [r3, #28]
 8028b64:	687b      	ldr	r3, [r7, #4]
 8028b66:	6a1b      	ldr	r3, [r3, #32]
 8028b68:	431a      	orrs	r2, r3
 8028b6a:	687b      	ldr	r3, [r7, #4]
 8028b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8028b6e:	019b      	lsls	r3, r3, #6
 8028b70:	431a      	orrs	r2, r3
 8028b72:	687b      	ldr	r3, [r7, #4]
 8028b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028b76:	085b      	lsrs	r3, r3, #1
 8028b78:	3b01      	subs	r3, #1
 8028b7a:	041b      	lsls	r3, r3, #16
 8028b7c:	431a      	orrs	r2, r3
 8028b7e:	687b      	ldr	r3, [r7, #4]
 8028b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028b82:	061b      	lsls	r3, r3, #24
 8028b84:	4933      	ldr	r1, [pc, #204]	; (8028c54 <HAL_RCC_OscConfig+0x4d8>)
 8028b86:	4313      	orrs	r3, r2
 8028b88:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8028b8a:	4b33      	ldr	r3, [pc, #204]	; (8028c58 <HAL_RCC_OscConfig+0x4dc>)
 8028b8c:	2201      	movs	r2, #1
 8028b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028b90:	f7fd ff78 	bl	8026a84 <HAL_GetTick>
 8028b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8028b96:	e008      	b.n	8028baa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8028b98:	f7fd ff74 	bl	8026a84 <HAL_GetTick>
 8028b9c:	4602      	mov	r2, r0
 8028b9e:	693b      	ldr	r3, [r7, #16]
 8028ba0:	1ad3      	subs	r3, r2, r3
 8028ba2:	2b02      	cmp	r3, #2
 8028ba4:	d901      	bls.n	8028baa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8028ba6:	2303      	movs	r3, #3
 8028ba8:	e04d      	b.n	8028c46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8028baa:	4b2a      	ldr	r3, [pc, #168]	; (8028c54 <HAL_RCC_OscConfig+0x4d8>)
 8028bac:	681b      	ldr	r3, [r3, #0]
 8028bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8028bb2:	2b00      	cmp	r3, #0
 8028bb4:	d0f0      	beq.n	8028b98 <HAL_RCC_OscConfig+0x41c>
 8028bb6:	e045      	b.n	8028c44 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8028bb8:	4b27      	ldr	r3, [pc, #156]	; (8028c58 <HAL_RCC_OscConfig+0x4dc>)
 8028bba:	2200      	movs	r2, #0
 8028bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8028bbe:	f7fd ff61 	bl	8026a84 <HAL_GetTick>
 8028bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8028bc4:	e008      	b.n	8028bd8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8028bc6:	f7fd ff5d 	bl	8026a84 <HAL_GetTick>
 8028bca:	4602      	mov	r2, r0
 8028bcc:	693b      	ldr	r3, [r7, #16]
 8028bce:	1ad3      	subs	r3, r2, r3
 8028bd0:	2b02      	cmp	r3, #2
 8028bd2:	d901      	bls.n	8028bd8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8028bd4:	2303      	movs	r3, #3
 8028bd6:	e036      	b.n	8028c46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8028bd8:	4b1e      	ldr	r3, [pc, #120]	; (8028c54 <HAL_RCC_OscConfig+0x4d8>)
 8028bda:	681b      	ldr	r3, [r3, #0]
 8028bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8028be0:	2b00      	cmp	r3, #0
 8028be2:	d1f0      	bne.n	8028bc6 <HAL_RCC_OscConfig+0x44a>
 8028be4:	e02e      	b.n	8028c44 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8028be6:	687b      	ldr	r3, [r7, #4]
 8028be8:	699b      	ldr	r3, [r3, #24]
 8028bea:	2b01      	cmp	r3, #1
 8028bec:	d101      	bne.n	8028bf2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8028bee:	2301      	movs	r3, #1
 8028bf0:	e029      	b.n	8028c46 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8028bf2:	4b18      	ldr	r3, [pc, #96]	; (8028c54 <HAL_RCC_OscConfig+0x4d8>)
 8028bf4:	685b      	ldr	r3, [r3, #4]
 8028bf6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8028bf8:	68fb      	ldr	r3, [r7, #12]
 8028bfa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8028bfe:	687b      	ldr	r3, [r7, #4]
 8028c00:	69db      	ldr	r3, [r3, #28]
 8028c02:	429a      	cmp	r2, r3
 8028c04:	d11c      	bne.n	8028c40 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8028c06:	68fb      	ldr	r3, [r7, #12]
 8028c08:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8028c0c:	687b      	ldr	r3, [r7, #4]
 8028c0e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8028c10:	429a      	cmp	r2, r3
 8028c12:	d115      	bne.n	8028c40 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8028c14:	68fa      	ldr	r2, [r7, #12]
 8028c16:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8028c1a:	4013      	ands	r3, r2
 8028c1c:	687a      	ldr	r2, [r7, #4]
 8028c1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8028c20:	4293      	cmp	r3, r2
 8028c22:	d10d      	bne.n	8028c40 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8028c24:	68fb      	ldr	r3, [r7, #12]
 8028c26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8028c2a:	687b      	ldr	r3, [r7, #4]
 8028c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8028c2e:	429a      	cmp	r2, r3
 8028c30:	d106      	bne.n	8028c40 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8028c32:	68fb      	ldr	r3, [r7, #12]
 8028c34:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8028c38:	687b      	ldr	r3, [r7, #4]
 8028c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8028c3c:	429a      	cmp	r2, r3
 8028c3e:	d001      	beq.n	8028c44 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8028c40:	2301      	movs	r3, #1
 8028c42:	e000      	b.n	8028c46 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8028c44:	2300      	movs	r3, #0
}
 8028c46:	4618      	mov	r0, r3
 8028c48:	3718      	adds	r7, #24
 8028c4a:	46bd      	mov	sp, r7
 8028c4c:	bd80      	pop	{r7, pc}
 8028c4e:	bf00      	nop
 8028c50:	40007000 	.word	0x40007000
 8028c54:	40023800 	.word	0x40023800
 8028c58:	42470060 	.word	0x42470060

08028c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8028c5c:	b580      	push	{r7, lr}
 8028c5e:	b084      	sub	sp, #16
 8028c60:	af00      	add	r7, sp, #0
 8028c62:	6078      	str	r0, [r7, #4]
 8028c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8028c66:	687b      	ldr	r3, [r7, #4]
 8028c68:	2b00      	cmp	r3, #0
 8028c6a:	d101      	bne.n	8028c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8028c6c:	2301      	movs	r3, #1
 8028c6e:	e0cc      	b.n	8028e0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8028c70:	4b68      	ldr	r3, [pc, #416]	; (8028e14 <HAL_RCC_ClockConfig+0x1b8>)
 8028c72:	681b      	ldr	r3, [r3, #0]
 8028c74:	f003 030f 	and.w	r3, r3, #15
 8028c78:	683a      	ldr	r2, [r7, #0]
 8028c7a:	429a      	cmp	r2, r3
 8028c7c:	d90c      	bls.n	8028c98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8028c7e:	4b65      	ldr	r3, [pc, #404]	; (8028e14 <HAL_RCC_ClockConfig+0x1b8>)
 8028c80:	683a      	ldr	r2, [r7, #0]
 8028c82:	b2d2      	uxtb	r2, r2
 8028c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8028c86:	4b63      	ldr	r3, [pc, #396]	; (8028e14 <HAL_RCC_ClockConfig+0x1b8>)
 8028c88:	681b      	ldr	r3, [r3, #0]
 8028c8a:	f003 030f 	and.w	r3, r3, #15
 8028c8e:	683a      	ldr	r2, [r7, #0]
 8028c90:	429a      	cmp	r2, r3
 8028c92:	d001      	beq.n	8028c98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8028c94:	2301      	movs	r3, #1
 8028c96:	e0b8      	b.n	8028e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8028c98:	687b      	ldr	r3, [r7, #4]
 8028c9a:	681b      	ldr	r3, [r3, #0]
 8028c9c:	f003 0302 	and.w	r3, r3, #2
 8028ca0:	2b00      	cmp	r3, #0
 8028ca2:	d020      	beq.n	8028ce6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8028ca4:	687b      	ldr	r3, [r7, #4]
 8028ca6:	681b      	ldr	r3, [r3, #0]
 8028ca8:	f003 0304 	and.w	r3, r3, #4
 8028cac:	2b00      	cmp	r3, #0
 8028cae:	d005      	beq.n	8028cbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8028cb0:	4b59      	ldr	r3, [pc, #356]	; (8028e18 <HAL_RCC_ClockConfig+0x1bc>)
 8028cb2:	689b      	ldr	r3, [r3, #8]
 8028cb4:	4a58      	ldr	r2, [pc, #352]	; (8028e18 <HAL_RCC_ClockConfig+0x1bc>)
 8028cb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8028cba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8028cbc:	687b      	ldr	r3, [r7, #4]
 8028cbe:	681b      	ldr	r3, [r3, #0]
 8028cc0:	f003 0308 	and.w	r3, r3, #8
 8028cc4:	2b00      	cmp	r3, #0
 8028cc6:	d005      	beq.n	8028cd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8028cc8:	4b53      	ldr	r3, [pc, #332]	; (8028e18 <HAL_RCC_ClockConfig+0x1bc>)
 8028cca:	689b      	ldr	r3, [r3, #8]
 8028ccc:	4a52      	ldr	r2, [pc, #328]	; (8028e18 <HAL_RCC_ClockConfig+0x1bc>)
 8028cce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8028cd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8028cd4:	4b50      	ldr	r3, [pc, #320]	; (8028e18 <HAL_RCC_ClockConfig+0x1bc>)
 8028cd6:	689b      	ldr	r3, [r3, #8]
 8028cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8028cdc:	687b      	ldr	r3, [r7, #4]
 8028cde:	689b      	ldr	r3, [r3, #8]
 8028ce0:	494d      	ldr	r1, [pc, #308]	; (8028e18 <HAL_RCC_ClockConfig+0x1bc>)
 8028ce2:	4313      	orrs	r3, r2
 8028ce4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8028ce6:	687b      	ldr	r3, [r7, #4]
 8028ce8:	681b      	ldr	r3, [r3, #0]
 8028cea:	f003 0301 	and.w	r3, r3, #1
 8028cee:	2b00      	cmp	r3, #0
 8028cf0:	d044      	beq.n	8028d7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8028cf2:	687b      	ldr	r3, [r7, #4]
 8028cf4:	685b      	ldr	r3, [r3, #4]
 8028cf6:	2b01      	cmp	r3, #1
 8028cf8:	d107      	bne.n	8028d0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8028cfa:	4b47      	ldr	r3, [pc, #284]	; (8028e18 <HAL_RCC_ClockConfig+0x1bc>)
 8028cfc:	681b      	ldr	r3, [r3, #0]
 8028cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028d02:	2b00      	cmp	r3, #0
 8028d04:	d119      	bne.n	8028d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8028d06:	2301      	movs	r3, #1
 8028d08:	e07f      	b.n	8028e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8028d0a:	687b      	ldr	r3, [r7, #4]
 8028d0c:	685b      	ldr	r3, [r3, #4]
 8028d0e:	2b02      	cmp	r3, #2
 8028d10:	d003      	beq.n	8028d1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8028d12:	687b      	ldr	r3, [r7, #4]
 8028d14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8028d16:	2b03      	cmp	r3, #3
 8028d18:	d107      	bne.n	8028d2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8028d1a:	4b3f      	ldr	r3, [pc, #252]	; (8028e18 <HAL_RCC_ClockConfig+0x1bc>)
 8028d1c:	681b      	ldr	r3, [r3, #0]
 8028d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8028d22:	2b00      	cmp	r3, #0
 8028d24:	d109      	bne.n	8028d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8028d26:	2301      	movs	r3, #1
 8028d28:	e06f      	b.n	8028e0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8028d2a:	4b3b      	ldr	r3, [pc, #236]	; (8028e18 <HAL_RCC_ClockConfig+0x1bc>)
 8028d2c:	681b      	ldr	r3, [r3, #0]
 8028d2e:	f003 0302 	and.w	r3, r3, #2
 8028d32:	2b00      	cmp	r3, #0
 8028d34:	d101      	bne.n	8028d3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8028d36:	2301      	movs	r3, #1
 8028d38:	e067      	b.n	8028e0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8028d3a:	4b37      	ldr	r3, [pc, #220]	; (8028e18 <HAL_RCC_ClockConfig+0x1bc>)
 8028d3c:	689b      	ldr	r3, [r3, #8]
 8028d3e:	f023 0203 	bic.w	r2, r3, #3
 8028d42:	687b      	ldr	r3, [r7, #4]
 8028d44:	685b      	ldr	r3, [r3, #4]
 8028d46:	4934      	ldr	r1, [pc, #208]	; (8028e18 <HAL_RCC_ClockConfig+0x1bc>)
 8028d48:	4313      	orrs	r3, r2
 8028d4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8028d4c:	f7fd fe9a 	bl	8026a84 <HAL_GetTick>
 8028d50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8028d52:	e00a      	b.n	8028d6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8028d54:	f7fd fe96 	bl	8026a84 <HAL_GetTick>
 8028d58:	4602      	mov	r2, r0
 8028d5a:	68fb      	ldr	r3, [r7, #12]
 8028d5c:	1ad3      	subs	r3, r2, r3
 8028d5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8028d62:	4293      	cmp	r3, r2
 8028d64:	d901      	bls.n	8028d6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8028d66:	2303      	movs	r3, #3
 8028d68:	e04f      	b.n	8028e0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8028d6a:	4b2b      	ldr	r3, [pc, #172]	; (8028e18 <HAL_RCC_ClockConfig+0x1bc>)
 8028d6c:	689b      	ldr	r3, [r3, #8]
 8028d6e:	f003 020c 	and.w	r2, r3, #12
 8028d72:	687b      	ldr	r3, [r7, #4]
 8028d74:	685b      	ldr	r3, [r3, #4]
 8028d76:	009b      	lsls	r3, r3, #2
 8028d78:	429a      	cmp	r2, r3
 8028d7a:	d1eb      	bne.n	8028d54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8028d7c:	4b25      	ldr	r3, [pc, #148]	; (8028e14 <HAL_RCC_ClockConfig+0x1b8>)
 8028d7e:	681b      	ldr	r3, [r3, #0]
 8028d80:	f003 030f 	and.w	r3, r3, #15
 8028d84:	683a      	ldr	r2, [r7, #0]
 8028d86:	429a      	cmp	r2, r3
 8028d88:	d20c      	bcs.n	8028da4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8028d8a:	4b22      	ldr	r3, [pc, #136]	; (8028e14 <HAL_RCC_ClockConfig+0x1b8>)
 8028d8c:	683a      	ldr	r2, [r7, #0]
 8028d8e:	b2d2      	uxtb	r2, r2
 8028d90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8028d92:	4b20      	ldr	r3, [pc, #128]	; (8028e14 <HAL_RCC_ClockConfig+0x1b8>)
 8028d94:	681b      	ldr	r3, [r3, #0]
 8028d96:	f003 030f 	and.w	r3, r3, #15
 8028d9a:	683a      	ldr	r2, [r7, #0]
 8028d9c:	429a      	cmp	r2, r3
 8028d9e:	d001      	beq.n	8028da4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8028da0:	2301      	movs	r3, #1
 8028da2:	e032      	b.n	8028e0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8028da4:	687b      	ldr	r3, [r7, #4]
 8028da6:	681b      	ldr	r3, [r3, #0]
 8028da8:	f003 0304 	and.w	r3, r3, #4
 8028dac:	2b00      	cmp	r3, #0
 8028dae:	d008      	beq.n	8028dc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8028db0:	4b19      	ldr	r3, [pc, #100]	; (8028e18 <HAL_RCC_ClockConfig+0x1bc>)
 8028db2:	689b      	ldr	r3, [r3, #8]
 8028db4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8028db8:	687b      	ldr	r3, [r7, #4]
 8028dba:	68db      	ldr	r3, [r3, #12]
 8028dbc:	4916      	ldr	r1, [pc, #88]	; (8028e18 <HAL_RCC_ClockConfig+0x1bc>)
 8028dbe:	4313      	orrs	r3, r2
 8028dc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8028dc2:	687b      	ldr	r3, [r7, #4]
 8028dc4:	681b      	ldr	r3, [r3, #0]
 8028dc6:	f003 0308 	and.w	r3, r3, #8
 8028dca:	2b00      	cmp	r3, #0
 8028dcc:	d009      	beq.n	8028de2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8028dce:	4b12      	ldr	r3, [pc, #72]	; (8028e18 <HAL_RCC_ClockConfig+0x1bc>)
 8028dd0:	689b      	ldr	r3, [r3, #8]
 8028dd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8028dd6:	687b      	ldr	r3, [r7, #4]
 8028dd8:	691b      	ldr	r3, [r3, #16]
 8028dda:	00db      	lsls	r3, r3, #3
 8028ddc:	490e      	ldr	r1, [pc, #56]	; (8028e18 <HAL_RCC_ClockConfig+0x1bc>)
 8028dde:	4313      	orrs	r3, r2
 8028de0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8028de2:	f000 f821 	bl	8028e28 <HAL_RCC_GetSysClockFreq>
 8028de6:	4601      	mov	r1, r0
 8028de8:	4b0b      	ldr	r3, [pc, #44]	; (8028e18 <HAL_RCC_ClockConfig+0x1bc>)
 8028dea:	689b      	ldr	r3, [r3, #8]
 8028dec:	091b      	lsrs	r3, r3, #4
 8028dee:	f003 030f 	and.w	r3, r3, #15
 8028df2:	4a0a      	ldr	r2, [pc, #40]	; (8028e1c <HAL_RCC_ClockConfig+0x1c0>)
 8028df4:	5cd3      	ldrb	r3, [r2, r3]
 8028df6:	fa21 f303 	lsr.w	r3, r1, r3
 8028dfa:	4a09      	ldr	r2, [pc, #36]	; (8028e20 <HAL_RCC_ClockConfig+0x1c4>)
 8028dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8028dfe:	4b09      	ldr	r3, [pc, #36]	; (8028e24 <HAL_RCC_ClockConfig+0x1c8>)
 8028e00:	681b      	ldr	r3, [r3, #0]
 8028e02:	4618      	mov	r0, r3
 8028e04:	f7fd fdfa 	bl	80269fc <HAL_InitTick>

  return HAL_OK;
 8028e08:	2300      	movs	r3, #0
}
 8028e0a:	4618      	mov	r0, r3
 8028e0c:	3710      	adds	r7, #16
 8028e0e:	46bd      	mov	sp, r7
 8028e10:	bd80      	pop	{r7, pc}
 8028e12:	bf00      	nop
 8028e14:	40023c00 	.word	0x40023c00
 8028e18:	40023800 	.word	0x40023800
 8028e1c:	0802ab60 	.word	0x0802ab60
 8028e20:	20000014 	.word	0x20000014
 8028e24:	20000018 	.word	0x20000018

08028e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8028e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028e2a:	b085      	sub	sp, #20
 8028e2c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8028e2e:	2300      	movs	r3, #0
 8028e30:	607b      	str	r3, [r7, #4]
 8028e32:	2300      	movs	r3, #0
 8028e34:	60fb      	str	r3, [r7, #12]
 8028e36:	2300      	movs	r3, #0
 8028e38:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8028e3a:	2300      	movs	r3, #0
 8028e3c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8028e3e:	4b50      	ldr	r3, [pc, #320]	; (8028f80 <HAL_RCC_GetSysClockFreq+0x158>)
 8028e40:	689b      	ldr	r3, [r3, #8]
 8028e42:	f003 030c 	and.w	r3, r3, #12
 8028e46:	2b04      	cmp	r3, #4
 8028e48:	d007      	beq.n	8028e5a <HAL_RCC_GetSysClockFreq+0x32>
 8028e4a:	2b08      	cmp	r3, #8
 8028e4c:	d008      	beq.n	8028e60 <HAL_RCC_GetSysClockFreq+0x38>
 8028e4e:	2b00      	cmp	r3, #0
 8028e50:	f040 808d 	bne.w	8028f6e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8028e54:	4b4b      	ldr	r3, [pc, #300]	; (8028f84 <HAL_RCC_GetSysClockFreq+0x15c>)
 8028e56:	60bb      	str	r3, [r7, #8]
       break;
 8028e58:	e08c      	b.n	8028f74 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8028e5a:	4b4b      	ldr	r3, [pc, #300]	; (8028f88 <HAL_RCC_GetSysClockFreq+0x160>)
 8028e5c:	60bb      	str	r3, [r7, #8]
      break;
 8028e5e:	e089      	b.n	8028f74 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8028e60:	4b47      	ldr	r3, [pc, #284]	; (8028f80 <HAL_RCC_GetSysClockFreq+0x158>)
 8028e62:	685b      	ldr	r3, [r3, #4]
 8028e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8028e68:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8028e6a:	4b45      	ldr	r3, [pc, #276]	; (8028f80 <HAL_RCC_GetSysClockFreq+0x158>)
 8028e6c:	685b      	ldr	r3, [r3, #4]
 8028e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8028e72:	2b00      	cmp	r3, #0
 8028e74:	d023      	beq.n	8028ebe <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8028e76:	4b42      	ldr	r3, [pc, #264]	; (8028f80 <HAL_RCC_GetSysClockFreq+0x158>)
 8028e78:	685b      	ldr	r3, [r3, #4]
 8028e7a:	099b      	lsrs	r3, r3, #6
 8028e7c:	f04f 0400 	mov.w	r4, #0
 8028e80:	f240 11ff 	movw	r1, #511	; 0x1ff
 8028e84:	f04f 0200 	mov.w	r2, #0
 8028e88:	ea03 0501 	and.w	r5, r3, r1
 8028e8c:	ea04 0602 	and.w	r6, r4, r2
 8028e90:	4a3d      	ldr	r2, [pc, #244]	; (8028f88 <HAL_RCC_GetSysClockFreq+0x160>)
 8028e92:	fb02 f106 	mul.w	r1, r2, r6
 8028e96:	2200      	movs	r2, #0
 8028e98:	fb02 f205 	mul.w	r2, r2, r5
 8028e9c:	440a      	add	r2, r1
 8028e9e:	493a      	ldr	r1, [pc, #232]	; (8028f88 <HAL_RCC_GetSysClockFreq+0x160>)
 8028ea0:	fba5 0101 	umull	r0, r1, r5, r1
 8028ea4:	1853      	adds	r3, r2, r1
 8028ea6:	4619      	mov	r1, r3
 8028ea8:	687b      	ldr	r3, [r7, #4]
 8028eaa:	f04f 0400 	mov.w	r4, #0
 8028eae:	461a      	mov	r2, r3
 8028eb0:	4623      	mov	r3, r4
 8028eb2:	f7f7 fd6b 	bl	802098c <__aeabi_uldivmod>
 8028eb6:	4603      	mov	r3, r0
 8028eb8:	460c      	mov	r4, r1
 8028eba:	60fb      	str	r3, [r7, #12]
 8028ebc:	e049      	b.n	8028f52 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8028ebe:	4b30      	ldr	r3, [pc, #192]	; (8028f80 <HAL_RCC_GetSysClockFreq+0x158>)
 8028ec0:	685b      	ldr	r3, [r3, #4]
 8028ec2:	099b      	lsrs	r3, r3, #6
 8028ec4:	f04f 0400 	mov.w	r4, #0
 8028ec8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8028ecc:	f04f 0200 	mov.w	r2, #0
 8028ed0:	ea03 0501 	and.w	r5, r3, r1
 8028ed4:	ea04 0602 	and.w	r6, r4, r2
 8028ed8:	4629      	mov	r1, r5
 8028eda:	4632      	mov	r2, r6
 8028edc:	f04f 0300 	mov.w	r3, #0
 8028ee0:	f04f 0400 	mov.w	r4, #0
 8028ee4:	0154      	lsls	r4, r2, #5
 8028ee6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8028eea:	014b      	lsls	r3, r1, #5
 8028eec:	4619      	mov	r1, r3
 8028eee:	4622      	mov	r2, r4
 8028ef0:	1b49      	subs	r1, r1, r5
 8028ef2:	eb62 0206 	sbc.w	r2, r2, r6
 8028ef6:	f04f 0300 	mov.w	r3, #0
 8028efa:	f04f 0400 	mov.w	r4, #0
 8028efe:	0194      	lsls	r4, r2, #6
 8028f00:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8028f04:	018b      	lsls	r3, r1, #6
 8028f06:	1a5b      	subs	r3, r3, r1
 8028f08:	eb64 0402 	sbc.w	r4, r4, r2
 8028f0c:	f04f 0100 	mov.w	r1, #0
 8028f10:	f04f 0200 	mov.w	r2, #0
 8028f14:	00e2      	lsls	r2, r4, #3
 8028f16:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8028f1a:	00d9      	lsls	r1, r3, #3
 8028f1c:	460b      	mov	r3, r1
 8028f1e:	4614      	mov	r4, r2
 8028f20:	195b      	adds	r3, r3, r5
 8028f22:	eb44 0406 	adc.w	r4, r4, r6
 8028f26:	f04f 0100 	mov.w	r1, #0
 8028f2a:	f04f 0200 	mov.w	r2, #0
 8028f2e:	02a2      	lsls	r2, r4, #10
 8028f30:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8028f34:	0299      	lsls	r1, r3, #10
 8028f36:	460b      	mov	r3, r1
 8028f38:	4614      	mov	r4, r2
 8028f3a:	4618      	mov	r0, r3
 8028f3c:	4621      	mov	r1, r4
 8028f3e:	687b      	ldr	r3, [r7, #4]
 8028f40:	f04f 0400 	mov.w	r4, #0
 8028f44:	461a      	mov	r2, r3
 8028f46:	4623      	mov	r3, r4
 8028f48:	f7f7 fd20 	bl	802098c <__aeabi_uldivmod>
 8028f4c:	4603      	mov	r3, r0
 8028f4e:	460c      	mov	r4, r1
 8028f50:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8028f52:	4b0b      	ldr	r3, [pc, #44]	; (8028f80 <HAL_RCC_GetSysClockFreq+0x158>)
 8028f54:	685b      	ldr	r3, [r3, #4]
 8028f56:	0c1b      	lsrs	r3, r3, #16
 8028f58:	f003 0303 	and.w	r3, r3, #3
 8028f5c:	3301      	adds	r3, #1
 8028f5e:	005b      	lsls	r3, r3, #1
 8028f60:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8028f62:	68fa      	ldr	r2, [r7, #12]
 8028f64:	683b      	ldr	r3, [r7, #0]
 8028f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8028f6a:	60bb      	str	r3, [r7, #8]
      break;
 8028f6c:	e002      	b.n	8028f74 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8028f6e:	4b05      	ldr	r3, [pc, #20]	; (8028f84 <HAL_RCC_GetSysClockFreq+0x15c>)
 8028f70:	60bb      	str	r3, [r7, #8]
      break;
 8028f72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8028f74:	68bb      	ldr	r3, [r7, #8]
}
 8028f76:	4618      	mov	r0, r3
 8028f78:	3714      	adds	r7, #20
 8028f7a:	46bd      	mov	sp, r7
 8028f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028f7e:	bf00      	nop
 8028f80:	40023800 	.word	0x40023800
 8028f84:	00f42400 	.word	0x00f42400
 8028f88:	00b71b00 	.word	0x00b71b00

08028f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8028f8c:	b480      	push	{r7}
 8028f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8028f90:	4b03      	ldr	r3, [pc, #12]	; (8028fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8028f92:	681b      	ldr	r3, [r3, #0]
}
 8028f94:	4618      	mov	r0, r3
 8028f96:	46bd      	mov	sp, r7
 8028f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8028f9c:	4770      	bx	lr
 8028f9e:	bf00      	nop
 8028fa0:	20000014 	.word	0x20000014

08028fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8028fa4:	b580      	push	{r7, lr}
 8028fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8028fa8:	f7ff fff0 	bl	8028f8c <HAL_RCC_GetHCLKFreq>
 8028fac:	4601      	mov	r1, r0
 8028fae:	4b05      	ldr	r3, [pc, #20]	; (8028fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8028fb0:	689b      	ldr	r3, [r3, #8]
 8028fb2:	0a9b      	lsrs	r3, r3, #10
 8028fb4:	f003 0307 	and.w	r3, r3, #7
 8028fb8:	4a03      	ldr	r2, [pc, #12]	; (8028fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8028fba:	5cd3      	ldrb	r3, [r2, r3]
 8028fbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8028fc0:	4618      	mov	r0, r3
 8028fc2:	bd80      	pop	{r7, pc}
 8028fc4:	40023800 	.word	0x40023800
 8028fc8:	0802ab70 	.word	0x0802ab70

08028fcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8028fcc:	b580      	push	{r7, lr}
 8028fce:	b082      	sub	sp, #8
 8028fd0:	af00      	add	r7, sp, #0
 8028fd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8028fd4:	687b      	ldr	r3, [r7, #4]
 8028fd6:	2b00      	cmp	r3, #0
 8028fd8:	d101      	bne.n	8028fde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8028fda:	2301      	movs	r3, #1
 8028fdc:	e056      	b.n	802908c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8028fde:	687b      	ldr	r3, [r7, #4]
 8028fe0:	2200      	movs	r2, #0
 8028fe2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8028fe4:	687b      	ldr	r3, [r7, #4]
 8028fe6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8028fea:	b2db      	uxtb	r3, r3
 8028fec:	2b00      	cmp	r3, #0
 8028fee:	d106      	bne.n	8028ffe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8028ff0:	687b      	ldr	r3, [r7, #4]
 8028ff2:	2200      	movs	r2, #0
 8028ff4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8028ff8:	6878      	ldr	r0, [r7, #4]
 8028ffa:	f7fc ff9f 	bl	8025f3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8028ffe:	687b      	ldr	r3, [r7, #4]
 8029000:	2202      	movs	r2, #2
 8029002:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8029006:	687b      	ldr	r3, [r7, #4]
 8029008:	681b      	ldr	r3, [r3, #0]
 802900a:	681a      	ldr	r2, [r3, #0]
 802900c:	687b      	ldr	r3, [r7, #4]
 802900e:	681b      	ldr	r3, [r3, #0]
 8029010:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8029014:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8029016:	687b      	ldr	r3, [r7, #4]
 8029018:	685a      	ldr	r2, [r3, #4]
 802901a:	687b      	ldr	r3, [r7, #4]
 802901c:	689b      	ldr	r3, [r3, #8]
 802901e:	431a      	orrs	r2, r3
 8029020:	687b      	ldr	r3, [r7, #4]
 8029022:	68db      	ldr	r3, [r3, #12]
 8029024:	431a      	orrs	r2, r3
 8029026:	687b      	ldr	r3, [r7, #4]
 8029028:	691b      	ldr	r3, [r3, #16]
 802902a:	431a      	orrs	r2, r3
 802902c:	687b      	ldr	r3, [r7, #4]
 802902e:	695b      	ldr	r3, [r3, #20]
 8029030:	431a      	orrs	r2, r3
 8029032:	687b      	ldr	r3, [r7, #4]
 8029034:	699b      	ldr	r3, [r3, #24]
 8029036:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802903a:	431a      	orrs	r2, r3
 802903c:	687b      	ldr	r3, [r7, #4]
 802903e:	69db      	ldr	r3, [r3, #28]
 8029040:	431a      	orrs	r2, r3
 8029042:	687b      	ldr	r3, [r7, #4]
 8029044:	6a1b      	ldr	r3, [r3, #32]
 8029046:	ea42 0103 	orr.w	r1, r2, r3
 802904a:	687b      	ldr	r3, [r7, #4]
 802904c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802904e:	687b      	ldr	r3, [r7, #4]
 8029050:	681b      	ldr	r3, [r3, #0]
 8029052:	430a      	orrs	r2, r1
 8029054:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8029056:	687b      	ldr	r3, [r7, #4]
 8029058:	699b      	ldr	r3, [r3, #24]
 802905a:	0c1b      	lsrs	r3, r3, #16
 802905c:	f003 0104 	and.w	r1, r3, #4
 8029060:	687b      	ldr	r3, [r7, #4]
 8029062:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8029064:	687b      	ldr	r3, [r7, #4]
 8029066:	681b      	ldr	r3, [r3, #0]
 8029068:	430a      	orrs	r2, r1
 802906a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 802906c:	687b      	ldr	r3, [r7, #4]
 802906e:	681b      	ldr	r3, [r3, #0]
 8029070:	69da      	ldr	r2, [r3, #28]
 8029072:	687b      	ldr	r3, [r7, #4]
 8029074:	681b      	ldr	r3, [r3, #0]
 8029076:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802907a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 802907c:	687b      	ldr	r3, [r7, #4]
 802907e:	2200      	movs	r2, #0
 8029080:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8029082:	687b      	ldr	r3, [r7, #4]
 8029084:	2201      	movs	r2, #1
 8029086:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 802908a:	2300      	movs	r3, #0
}
 802908c:	4618      	mov	r0, r3
 802908e:	3708      	adds	r7, #8
 8029090:	46bd      	mov	sp, r7
 8029092:	bd80      	pop	{r7, pc}

08029094 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8029094:	b580      	push	{r7, lr}
 8029096:	b088      	sub	sp, #32
 8029098:	af00      	add	r7, sp, #0
 802909a:	60f8      	str	r0, [r7, #12]
 802909c:	60b9      	str	r1, [r7, #8]
 802909e:	603b      	str	r3, [r7, #0]
 80290a0:	4613      	mov	r3, r2
 80290a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80290a4:	2300      	movs	r3, #0
 80290a6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80290a8:	68fb      	ldr	r3, [r7, #12]
 80290aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80290ae:	2b01      	cmp	r3, #1
 80290b0:	d101      	bne.n	80290b6 <HAL_SPI_Transmit+0x22>
 80290b2:	2302      	movs	r3, #2
 80290b4:	e11e      	b.n	80292f4 <HAL_SPI_Transmit+0x260>
 80290b6:	68fb      	ldr	r3, [r7, #12]
 80290b8:	2201      	movs	r2, #1
 80290ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80290be:	f7fd fce1 	bl	8026a84 <HAL_GetTick>
 80290c2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80290c4:	88fb      	ldrh	r3, [r7, #6]
 80290c6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80290c8:	68fb      	ldr	r3, [r7, #12]
 80290ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80290ce:	b2db      	uxtb	r3, r3
 80290d0:	2b01      	cmp	r3, #1
 80290d2:	d002      	beq.n	80290da <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80290d4:	2302      	movs	r3, #2
 80290d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80290d8:	e103      	b.n	80292e2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80290da:	68bb      	ldr	r3, [r7, #8]
 80290dc:	2b00      	cmp	r3, #0
 80290de:	d002      	beq.n	80290e6 <HAL_SPI_Transmit+0x52>
 80290e0:	88fb      	ldrh	r3, [r7, #6]
 80290e2:	2b00      	cmp	r3, #0
 80290e4:	d102      	bne.n	80290ec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80290e6:	2301      	movs	r3, #1
 80290e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80290ea:	e0fa      	b.n	80292e2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80290ec:	68fb      	ldr	r3, [r7, #12]
 80290ee:	2203      	movs	r2, #3
 80290f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80290f4:	68fb      	ldr	r3, [r7, #12]
 80290f6:	2200      	movs	r2, #0
 80290f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80290fa:	68fb      	ldr	r3, [r7, #12]
 80290fc:	68ba      	ldr	r2, [r7, #8]
 80290fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8029100:	68fb      	ldr	r3, [r7, #12]
 8029102:	88fa      	ldrh	r2, [r7, #6]
 8029104:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8029106:	68fb      	ldr	r3, [r7, #12]
 8029108:	88fa      	ldrh	r2, [r7, #6]
 802910a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 802910c:	68fb      	ldr	r3, [r7, #12]
 802910e:	2200      	movs	r2, #0
 8029110:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8029112:	68fb      	ldr	r3, [r7, #12]
 8029114:	2200      	movs	r2, #0
 8029116:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8029118:	68fb      	ldr	r3, [r7, #12]
 802911a:	2200      	movs	r2, #0
 802911c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 802911e:	68fb      	ldr	r3, [r7, #12]
 8029120:	2200      	movs	r2, #0
 8029122:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8029124:	68fb      	ldr	r3, [r7, #12]
 8029126:	2200      	movs	r2, #0
 8029128:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 802912a:	68fb      	ldr	r3, [r7, #12]
 802912c:	689b      	ldr	r3, [r3, #8]
 802912e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8029132:	d107      	bne.n	8029144 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8029134:	68fb      	ldr	r3, [r7, #12]
 8029136:	681b      	ldr	r3, [r3, #0]
 8029138:	681a      	ldr	r2, [r3, #0]
 802913a:	68fb      	ldr	r3, [r7, #12]
 802913c:	681b      	ldr	r3, [r3, #0]
 802913e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8029142:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8029144:	68fb      	ldr	r3, [r7, #12]
 8029146:	681b      	ldr	r3, [r3, #0]
 8029148:	681b      	ldr	r3, [r3, #0]
 802914a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802914e:	2b40      	cmp	r3, #64	; 0x40
 8029150:	d007      	beq.n	8029162 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8029152:	68fb      	ldr	r3, [r7, #12]
 8029154:	681b      	ldr	r3, [r3, #0]
 8029156:	681a      	ldr	r2, [r3, #0]
 8029158:	68fb      	ldr	r3, [r7, #12]
 802915a:	681b      	ldr	r3, [r3, #0]
 802915c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8029160:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8029162:	68fb      	ldr	r3, [r7, #12]
 8029164:	68db      	ldr	r3, [r3, #12]
 8029166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 802916a:	d14b      	bne.n	8029204 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802916c:	68fb      	ldr	r3, [r7, #12]
 802916e:	685b      	ldr	r3, [r3, #4]
 8029170:	2b00      	cmp	r3, #0
 8029172:	d002      	beq.n	802917a <HAL_SPI_Transmit+0xe6>
 8029174:	8afb      	ldrh	r3, [r7, #22]
 8029176:	2b01      	cmp	r3, #1
 8029178:	d13e      	bne.n	80291f8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802917a:	68fb      	ldr	r3, [r7, #12]
 802917c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802917e:	881a      	ldrh	r2, [r3, #0]
 8029180:	68fb      	ldr	r3, [r7, #12]
 8029182:	681b      	ldr	r3, [r3, #0]
 8029184:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8029186:	68fb      	ldr	r3, [r7, #12]
 8029188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802918a:	1c9a      	adds	r2, r3, #2
 802918c:	68fb      	ldr	r3, [r7, #12]
 802918e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8029190:	68fb      	ldr	r3, [r7, #12]
 8029192:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029194:	b29b      	uxth	r3, r3
 8029196:	3b01      	subs	r3, #1
 8029198:	b29a      	uxth	r2, r3
 802919a:	68fb      	ldr	r3, [r7, #12]
 802919c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 802919e:	e02b      	b.n	80291f8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80291a0:	68fb      	ldr	r3, [r7, #12]
 80291a2:	681b      	ldr	r3, [r3, #0]
 80291a4:	689b      	ldr	r3, [r3, #8]
 80291a6:	f003 0302 	and.w	r3, r3, #2
 80291aa:	2b02      	cmp	r3, #2
 80291ac:	d112      	bne.n	80291d4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80291ae:	68fb      	ldr	r3, [r7, #12]
 80291b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80291b2:	881a      	ldrh	r2, [r3, #0]
 80291b4:	68fb      	ldr	r3, [r7, #12]
 80291b6:	681b      	ldr	r3, [r3, #0]
 80291b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80291ba:	68fb      	ldr	r3, [r7, #12]
 80291bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80291be:	1c9a      	adds	r2, r3, #2
 80291c0:	68fb      	ldr	r3, [r7, #12]
 80291c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80291c4:	68fb      	ldr	r3, [r7, #12]
 80291c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80291c8:	b29b      	uxth	r3, r3
 80291ca:	3b01      	subs	r3, #1
 80291cc:	b29a      	uxth	r2, r3
 80291ce:	68fb      	ldr	r3, [r7, #12]
 80291d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80291d2:	e011      	b.n	80291f8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80291d4:	f7fd fc56 	bl	8026a84 <HAL_GetTick>
 80291d8:	4602      	mov	r2, r0
 80291da:	69bb      	ldr	r3, [r7, #24]
 80291dc:	1ad3      	subs	r3, r2, r3
 80291de:	683a      	ldr	r2, [r7, #0]
 80291e0:	429a      	cmp	r2, r3
 80291e2:	d803      	bhi.n	80291ec <HAL_SPI_Transmit+0x158>
 80291e4:	683b      	ldr	r3, [r7, #0]
 80291e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80291ea:	d102      	bne.n	80291f2 <HAL_SPI_Transmit+0x15e>
 80291ec:	683b      	ldr	r3, [r7, #0]
 80291ee:	2b00      	cmp	r3, #0
 80291f0:	d102      	bne.n	80291f8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80291f2:	2303      	movs	r3, #3
 80291f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80291f6:	e074      	b.n	80292e2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80291f8:	68fb      	ldr	r3, [r7, #12]
 80291fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80291fc:	b29b      	uxth	r3, r3
 80291fe:	2b00      	cmp	r3, #0
 8029200:	d1ce      	bne.n	80291a0 <HAL_SPI_Transmit+0x10c>
 8029202:	e04c      	b.n	802929e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8029204:	68fb      	ldr	r3, [r7, #12]
 8029206:	685b      	ldr	r3, [r3, #4]
 8029208:	2b00      	cmp	r3, #0
 802920a:	d002      	beq.n	8029212 <HAL_SPI_Transmit+0x17e>
 802920c:	8afb      	ldrh	r3, [r7, #22]
 802920e:	2b01      	cmp	r3, #1
 8029210:	d140      	bne.n	8029294 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8029212:	68fb      	ldr	r3, [r7, #12]
 8029214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8029216:	68fb      	ldr	r3, [r7, #12]
 8029218:	681b      	ldr	r3, [r3, #0]
 802921a:	330c      	adds	r3, #12
 802921c:	7812      	ldrb	r2, [r2, #0]
 802921e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8029220:	68fb      	ldr	r3, [r7, #12]
 8029222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029224:	1c5a      	adds	r2, r3, #1
 8029226:	68fb      	ldr	r3, [r7, #12]
 8029228:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 802922a:	68fb      	ldr	r3, [r7, #12]
 802922c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802922e:	b29b      	uxth	r3, r3
 8029230:	3b01      	subs	r3, #1
 8029232:	b29a      	uxth	r2, r3
 8029234:	68fb      	ldr	r3, [r7, #12]
 8029236:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8029238:	e02c      	b.n	8029294 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 802923a:	68fb      	ldr	r3, [r7, #12]
 802923c:	681b      	ldr	r3, [r3, #0]
 802923e:	689b      	ldr	r3, [r3, #8]
 8029240:	f003 0302 	and.w	r3, r3, #2
 8029244:	2b02      	cmp	r3, #2
 8029246:	d113      	bne.n	8029270 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8029248:	68fb      	ldr	r3, [r7, #12]
 802924a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802924c:	68fb      	ldr	r3, [r7, #12]
 802924e:	681b      	ldr	r3, [r3, #0]
 8029250:	330c      	adds	r3, #12
 8029252:	7812      	ldrb	r2, [r2, #0]
 8029254:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8029256:	68fb      	ldr	r3, [r7, #12]
 8029258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802925a:	1c5a      	adds	r2, r3, #1
 802925c:	68fb      	ldr	r3, [r7, #12]
 802925e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8029260:	68fb      	ldr	r3, [r7, #12]
 8029262:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029264:	b29b      	uxth	r3, r3
 8029266:	3b01      	subs	r3, #1
 8029268:	b29a      	uxth	r2, r3
 802926a:	68fb      	ldr	r3, [r7, #12]
 802926c:	86da      	strh	r2, [r3, #54]	; 0x36
 802926e:	e011      	b.n	8029294 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8029270:	f7fd fc08 	bl	8026a84 <HAL_GetTick>
 8029274:	4602      	mov	r2, r0
 8029276:	69bb      	ldr	r3, [r7, #24]
 8029278:	1ad3      	subs	r3, r2, r3
 802927a:	683a      	ldr	r2, [r7, #0]
 802927c:	429a      	cmp	r2, r3
 802927e:	d803      	bhi.n	8029288 <HAL_SPI_Transmit+0x1f4>
 8029280:	683b      	ldr	r3, [r7, #0]
 8029282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029286:	d102      	bne.n	802928e <HAL_SPI_Transmit+0x1fa>
 8029288:	683b      	ldr	r3, [r7, #0]
 802928a:	2b00      	cmp	r3, #0
 802928c:	d102      	bne.n	8029294 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 802928e:	2303      	movs	r3, #3
 8029290:	77fb      	strb	r3, [r7, #31]
          goto error;
 8029292:	e026      	b.n	80292e2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8029294:	68fb      	ldr	r3, [r7, #12]
 8029296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029298:	b29b      	uxth	r3, r3
 802929a:	2b00      	cmp	r3, #0
 802929c:	d1cd      	bne.n	802923a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 802929e:	69ba      	ldr	r2, [r7, #24]
 80292a0:	6839      	ldr	r1, [r7, #0]
 80292a2:	68f8      	ldr	r0, [r7, #12]
 80292a4:	f000 fba4 	bl	80299f0 <SPI_EndRxTxTransaction>
 80292a8:	4603      	mov	r3, r0
 80292aa:	2b00      	cmp	r3, #0
 80292ac:	d002      	beq.n	80292b4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80292ae:	68fb      	ldr	r3, [r7, #12]
 80292b0:	2220      	movs	r2, #32
 80292b2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80292b4:	68fb      	ldr	r3, [r7, #12]
 80292b6:	689b      	ldr	r3, [r3, #8]
 80292b8:	2b00      	cmp	r3, #0
 80292ba:	d10a      	bne.n	80292d2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80292bc:	2300      	movs	r3, #0
 80292be:	613b      	str	r3, [r7, #16]
 80292c0:	68fb      	ldr	r3, [r7, #12]
 80292c2:	681b      	ldr	r3, [r3, #0]
 80292c4:	68db      	ldr	r3, [r3, #12]
 80292c6:	613b      	str	r3, [r7, #16]
 80292c8:	68fb      	ldr	r3, [r7, #12]
 80292ca:	681b      	ldr	r3, [r3, #0]
 80292cc:	689b      	ldr	r3, [r3, #8]
 80292ce:	613b      	str	r3, [r7, #16]
 80292d0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80292d2:	68fb      	ldr	r3, [r7, #12]
 80292d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80292d6:	2b00      	cmp	r3, #0
 80292d8:	d002      	beq.n	80292e0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80292da:	2301      	movs	r3, #1
 80292dc:	77fb      	strb	r3, [r7, #31]
 80292de:	e000      	b.n	80292e2 <HAL_SPI_Transmit+0x24e>
  }

error:
 80292e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80292e2:	68fb      	ldr	r3, [r7, #12]
 80292e4:	2201      	movs	r2, #1
 80292e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80292ea:	68fb      	ldr	r3, [r7, #12]
 80292ec:	2200      	movs	r2, #0
 80292ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80292f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80292f4:	4618      	mov	r0, r3
 80292f6:	3720      	adds	r7, #32
 80292f8:	46bd      	mov	sp, r7
 80292fa:	bd80      	pop	{r7, pc}

080292fc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80292fc:	b580      	push	{r7, lr}
 80292fe:	b088      	sub	sp, #32
 8029300:	af02      	add	r7, sp, #8
 8029302:	60f8      	str	r0, [r7, #12]
 8029304:	60b9      	str	r1, [r7, #8]
 8029306:	603b      	str	r3, [r7, #0]
 8029308:	4613      	mov	r3, r2
 802930a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 802930c:	2300      	movs	r3, #0
 802930e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8029310:	68fb      	ldr	r3, [r7, #12]
 8029312:	685b      	ldr	r3, [r3, #4]
 8029314:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8029318:	d112      	bne.n	8029340 <HAL_SPI_Receive+0x44>
 802931a:	68fb      	ldr	r3, [r7, #12]
 802931c:	689b      	ldr	r3, [r3, #8]
 802931e:	2b00      	cmp	r3, #0
 8029320:	d10e      	bne.n	8029340 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8029322:	68fb      	ldr	r3, [r7, #12]
 8029324:	2204      	movs	r2, #4
 8029326:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 802932a:	88fa      	ldrh	r2, [r7, #6]
 802932c:	683b      	ldr	r3, [r7, #0]
 802932e:	9300      	str	r3, [sp, #0]
 8029330:	4613      	mov	r3, r2
 8029332:	68ba      	ldr	r2, [r7, #8]
 8029334:	68b9      	ldr	r1, [r7, #8]
 8029336:	68f8      	ldr	r0, [r7, #12]
 8029338:	f000 f8e9 	bl	802950e <HAL_SPI_TransmitReceive>
 802933c:	4603      	mov	r3, r0
 802933e:	e0e2      	b.n	8029506 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8029340:	68fb      	ldr	r3, [r7, #12]
 8029342:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8029346:	2b01      	cmp	r3, #1
 8029348:	d101      	bne.n	802934e <HAL_SPI_Receive+0x52>
 802934a:	2302      	movs	r3, #2
 802934c:	e0db      	b.n	8029506 <HAL_SPI_Receive+0x20a>
 802934e:	68fb      	ldr	r3, [r7, #12]
 8029350:	2201      	movs	r2, #1
 8029352:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8029356:	f7fd fb95 	bl	8026a84 <HAL_GetTick>
 802935a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 802935c:	68fb      	ldr	r3, [r7, #12]
 802935e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8029362:	b2db      	uxtb	r3, r3
 8029364:	2b01      	cmp	r3, #1
 8029366:	d002      	beq.n	802936e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8029368:	2302      	movs	r3, #2
 802936a:	75fb      	strb	r3, [r7, #23]
    goto error;
 802936c:	e0c2      	b.n	80294f4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 802936e:	68bb      	ldr	r3, [r7, #8]
 8029370:	2b00      	cmp	r3, #0
 8029372:	d002      	beq.n	802937a <HAL_SPI_Receive+0x7e>
 8029374:	88fb      	ldrh	r3, [r7, #6]
 8029376:	2b00      	cmp	r3, #0
 8029378:	d102      	bne.n	8029380 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 802937a:	2301      	movs	r3, #1
 802937c:	75fb      	strb	r3, [r7, #23]
    goto error;
 802937e:	e0b9      	b.n	80294f4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8029380:	68fb      	ldr	r3, [r7, #12]
 8029382:	2204      	movs	r2, #4
 8029384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8029388:	68fb      	ldr	r3, [r7, #12]
 802938a:	2200      	movs	r2, #0
 802938c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 802938e:	68fb      	ldr	r3, [r7, #12]
 8029390:	68ba      	ldr	r2, [r7, #8]
 8029392:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8029394:	68fb      	ldr	r3, [r7, #12]
 8029396:	88fa      	ldrh	r2, [r7, #6]
 8029398:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 802939a:	68fb      	ldr	r3, [r7, #12]
 802939c:	88fa      	ldrh	r2, [r7, #6]
 802939e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80293a0:	68fb      	ldr	r3, [r7, #12]
 80293a2:	2200      	movs	r2, #0
 80293a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80293a6:	68fb      	ldr	r3, [r7, #12]
 80293a8:	2200      	movs	r2, #0
 80293aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80293ac:	68fb      	ldr	r3, [r7, #12]
 80293ae:	2200      	movs	r2, #0
 80293b0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80293b2:	68fb      	ldr	r3, [r7, #12]
 80293b4:	2200      	movs	r2, #0
 80293b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80293b8:	68fb      	ldr	r3, [r7, #12]
 80293ba:	2200      	movs	r2, #0
 80293bc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80293be:	68fb      	ldr	r3, [r7, #12]
 80293c0:	689b      	ldr	r3, [r3, #8]
 80293c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80293c6:	d107      	bne.n	80293d8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80293c8:	68fb      	ldr	r3, [r7, #12]
 80293ca:	681b      	ldr	r3, [r3, #0]
 80293cc:	681a      	ldr	r2, [r3, #0]
 80293ce:	68fb      	ldr	r3, [r7, #12]
 80293d0:	681b      	ldr	r3, [r3, #0]
 80293d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80293d6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80293d8:	68fb      	ldr	r3, [r7, #12]
 80293da:	681b      	ldr	r3, [r3, #0]
 80293dc:	681b      	ldr	r3, [r3, #0]
 80293de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80293e2:	2b40      	cmp	r3, #64	; 0x40
 80293e4:	d007      	beq.n	80293f6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80293e6:	68fb      	ldr	r3, [r7, #12]
 80293e8:	681b      	ldr	r3, [r3, #0]
 80293ea:	681a      	ldr	r2, [r3, #0]
 80293ec:	68fb      	ldr	r3, [r7, #12]
 80293ee:	681b      	ldr	r3, [r3, #0]
 80293f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80293f4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80293f6:	68fb      	ldr	r3, [r7, #12]
 80293f8:	68db      	ldr	r3, [r3, #12]
 80293fa:	2b00      	cmp	r3, #0
 80293fc:	d162      	bne.n	80294c4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80293fe:	e02e      	b.n	802945e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8029400:	68fb      	ldr	r3, [r7, #12]
 8029402:	681b      	ldr	r3, [r3, #0]
 8029404:	689b      	ldr	r3, [r3, #8]
 8029406:	f003 0301 	and.w	r3, r3, #1
 802940a:	2b01      	cmp	r3, #1
 802940c:	d115      	bne.n	802943a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 802940e:	68fb      	ldr	r3, [r7, #12]
 8029410:	681b      	ldr	r3, [r3, #0]
 8029412:	f103 020c 	add.w	r2, r3, #12
 8029416:	68fb      	ldr	r3, [r7, #12]
 8029418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802941a:	7812      	ldrb	r2, [r2, #0]
 802941c:	b2d2      	uxtb	r2, r2
 802941e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8029420:	68fb      	ldr	r3, [r7, #12]
 8029422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029424:	1c5a      	adds	r2, r3, #1
 8029426:	68fb      	ldr	r3, [r7, #12]
 8029428:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 802942a:	68fb      	ldr	r3, [r7, #12]
 802942c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802942e:	b29b      	uxth	r3, r3
 8029430:	3b01      	subs	r3, #1
 8029432:	b29a      	uxth	r2, r3
 8029434:	68fb      	ldr	r3, [r7, #12]
 8029436:	87da      	strh	r2, [r3, #62]	; 0x3e
 8029438:	e011      	b.n	802945e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 802943a:	f7fd fb23 	bl	8026a84 <HAL_GetTick>
 802943e:	4602      	mov	r2, r0
 8029440:	693b      	ldr	r3, [r7, #16]
 8029442:	1ad3      	subs	r3, r2, r3
 8029444:	683a      	ldr	r2, [r7, #0]
 8029446:	429a      	cmp	r2, r3
 8029448:	d803      	bhi.n	8029452 <HAL_SPI_Receive+0x156>
 802944a:	683b      	ldr	r3, [r7, #0]
 802944c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8029450:	d102      	bne.n	8029458 <HAL_SPI_Receive+0x15c>
 8029452:	683b      	ldr	r3, [r7, #0]
 8029454:	2b00      	cmp	r3, #0
 8029456:	d102      	bne.n	802945e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8029458:	2303      	movs	r3, #3
 802945a:	75fb      	strb	r3, [r7, #23]
          goto error;
 802945c:	e04a      	b.n	80294f4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 802945e:	68fb      	ldr	r3, [r7, #12]
 8029460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8029462:	b29b      	uxth	r3, r3
 8029464:	2b00      	cmp	r3, #0
 8029466:	d1cb      	bne.n	8029400 <HAL_SPI_Receive+0x104>
 8029468:	e031      	b.n	80294ce <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 802946a:	68fb      	ldr	r3, [r7, #12]
 802946c:	681b      	ldr	r3, [r3, #0]
 802946e:	689b      	ldr	r3, [r3, #8]
 8029470:	f003 0301 	and.w	r3, r3, #1
 8029474:	2b01      	cmp	r3, #1
 8029476:	d113      	bne.n	80294a0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8029478:	68fb      	ldr	r3, [r7, #12]
 802947a:	681b      	ldr	r3, [r3, #0]
 802947c:	68da      	ldr	r2, [r3, #12]
 802947e:	68fb      	ldr	r3, [r7, #12]
 8029480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029482:	b292      	uxth	r2, r2
 8029484:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8029486:	68fb      	ldr	r3, [r7, #12]
 8029488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802948a:	1c9a      	adds	r2, r3, #2
 802948c:	68fb      	ldr	r3, [r7, #12]
 802948e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8029490:	68fb      	ldr	r3, [r7, #12]
 8029492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8029494:	b29b      	uxth	r3, r3
 8029496:	3b01      	subs	r3, #1
 8029498:	b29a      	uxth	r2, r3
 802949a:	68fb      	ldr	r3, [r7, #12]
 802949c:	87da      	strh	r2, [r3, #62]	; 0x3e
 802949e:	e011      	b.n	80294c4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80294a0:	f7fd faf0 	bl	8026a84 <HAL_GetTick>
 80294a4:	4602      	mov	r2, r0
 80294a6:	693b      	ldr	r3, [r7, #16]
 80294a8:	1ad3      	subs	r3, r2, r3
 80294aa:	683a      	ldr	r2, [r7, #0]
 80294ac:	429a      	cmp	r2, r3
 80294ae:	d803      	bhi.n	80294b8 <HAL_SPI_Receive+0x1bc>
 80294b0:	683b      	ldr	r3, [r7, #0]
 80294b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80294b6:	d102      	bne.n	80294be <HAL_SPI_Receive+0x1c2>
 80294b8:	683b      	ldr	r3, [r7, #0]
 80294ba:	2b00      	cmp	r3, #0
 80294bc:	d102      	bne.n	80294c4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80294be:	2303      	movs	r3, #3
 80294c0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80294c2:	e017      	b.n	80294f4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80294c4:	68fb      	ldr	r3, [r7, #12]
 80294c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80294c8:	b29b      	uxth	r3, r3
 80294ca:	2b00      	cmp	r3, #0
 80294cc:	d1cd      	bne.n	802946a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80294ce:	693a      	ldr	r2, [r7, #16]
 80294d0:	6839      	ldr	r1, [r7, #0]
 80294d2:	68f8      	ldr	r0, [r7, #12]
 80294d4:	f000 fa27 	bl	8029926 <SPI_EndRxTransaction>
 80294d8:	4603      	mov	r3, r0
 80294da:	2b00      	cmp	r3, #0
 80294dc:	d002      	beq.n	80294e4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80294de:	68fb      	ldr	r3, [r7, #12]
 80294e0:	2220      	movs	r2, #32
 80294e2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80294e4:	68fb      	ldr	r3, [r7, #12]
 80294e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80294e8:	2b00      	cmp	r3, #0
 80294ea:	d002      	beq.n	80294f2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80294ec:	2301      	movs	r3, #1
 80294ee:	75fb      	strb	r3, [r7, #23]
 80294f0:	e000      	b.n	80294f4 <HAL_SPI_Receive+0x1f8>
  }

error :
 80294f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80294f4:	68fb      	ldr	r3, [r7, #12]
 80294f6:	2201      	movs	r2, #1
 80294f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80294fc:	68fb      	ldr	r3, [r7, #12]
 80294fe:	2200      	movs	r2, #0
 8029500:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8029504:	7dfb      	ldrb	r3, [r7, #23]
}
 8029506:	4618      	mov	r0, r3
 8029508:	3718      	adds	r7, #24
 802950a:	46bd      	mov	sp, r7
 802950c:	bd80      	pop	{r7, pc}

0802950e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 802950e:	b580      	push	{r7, lr}
 8029510:	b08c      	sub	sp, #48	; 0x30
 8029512:	af00      	add	r7, sp, #0
 8029514:	60f8      	str	r0, [r7, #12]
 8029516:	60b9      	str	r1, [r7, #8]
 8029518:	607a      	str	r2, [r7, #4]
 802951a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 802951c:	2301      	movs	r3, #1
 802951e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8029520:	2300      	movs	r3, #0
 8029522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8029526:	68fb      	ldr	r3, [r7, #12]
 8029528:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 802952c:	2b01      	cmp	r3, #1
 802952e:	d101      	bne.n	8029534 <HAL_SPI_TransmitReceive+0x26>
 8029530:	2302      	movs	r3, #2
 8029532:	e18a      	b.n	802984a <HAL_SPI_TransmitReceive+0x33c>
 8029534:	68fb      	ldr	r3, [r7, #12]
 8029536:	2201      	movs	r2, #1
 8029538:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802953c:	f7fd faa2 	bl	8026a84 <HAL_GetTick>
 8029540:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8029542:	68fb      	ldr	r3, [r7, #12]
 8029544:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8029548:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 802954c:	68fb      	ldr	r3, [r7, #12]
 802954e:	685b      	ldr	r3, [r3, #4]
 8029550:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8029552:	887b      	ldrh	r3, [r7, #2]
 8029554:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8029556:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802955a:	2b01      	cmp	r3, #1
 802955c:	d00f      	beq.n	802957e <HAL_SPI_TransmitReceive+0x70>
 802955e:	69fb      	ldr	r3, [r7, #28]
 8029560:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8029564:	d107      	bne.n	8029576 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8029566:	68fb      	ldr	r3, [r7, #12]
 8029568:	689b      	ldr	r3, [r3, #8]
 802956a:	2b00      	cmp	r3, #0
 802956c:	d103      	bne.n	8029576 <HAL_SPI_TransmitReceive+0x68>
 802956e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8029572:	2b04      	cmp	r3, #4
 8029574:	d003      	beq.n	802957e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8029576:	2302      	movs	r3, #2
 8029578:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 802957c:	e15b      	b.n	8029836 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 802957e:	68bb      	ldr	r3, [r7, #8]
 8029580:	2b00      	cmp	r3, #0
 8029582:	d005      	beq.n	8029590 <HAL_SPI_TransmitReceive+0x82>
 8029584:	687b      	ldr	r3, [r7, #4]
 8029586:	2b00      	cmp	r3, #0
 8029588:	d002      	beq.n	8029590 <HAL_SPI_TransmitReceive+0x82>
 802958a:	887b      	ldrh	r3, [r7, #2]
 802958c:	2b00      	cmp	r3, #0
 802958e:	d103      	bne.n	8029598 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8029590:	2301      	movs	r3, #1
 8029592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8029596:	e14e      	b.n	8029836 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8029598:	68fb      	ldr	r3, [r7, #12]
 802959a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802959e:	b2db      	uxtb	r3, r3
 80295a0:	2b04      	cmp	r3, #4
 80295a2:	d003      	beq.n	80295ac <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80295a4:	68fb      	ldr	r3, [r7, #12]
 80295a6:	2205      	movs	r2, #5
 80295a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80295ac:	68fb      	ldr	r3, [r7, #12]
 80295ae:	2200      	movs	r2, #0
 80295b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80295b2:	68fb      	ldr	r3, [r7, #12]
 80295b4:	687a      	ldr	r2, [r7, #4]
 80295b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80295b8:	68fb      	ldr	r3, [r7, #12]
 80295ba:	887a      	ldrh	r2, [r7, #2]
 80295bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80295be:	68fb      	ldr	r3, [r7, #12]
 80295c0:	887a      	ldrh	r2, [r7, #2]
 80295c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80295c4:	68fb      	ldr	r3, [r7, #12]
 80295c6:	68ba      	ldr	r2, [r7, #8]
 80295c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80295ca:	68fb      	ldr	r3, [r7, #12]
 80295cc:	887a      	ldrh	r2, [r7, #2]
 80295ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80295d0:	68fb      	ldr	r3, [r7, #12]
 80295d2:	887a      	ldrh	r2, [r7, #2]
 80295d4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80295d6:	68fb      	ldr	r3, [r7, #12]
 80295d8:	2200      	movs	r2, #0
 80295da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80295dc:	68fb      	ldr	r3, [r7, #12]
 80295de:	2200      	movs	r2, #0
 80295e0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80295e2:	68fb      	ldr	r3, [r7, #12]
 80295e4:	681b      	ldr	r3, [r3, #0]
 80295e6:	681b      	ldr	r3, [r3, #0]
 80295e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80295ec:	2b40      	cmp	r3, #64	; 0x40
 80295ee:	d007      	beq.n	8029600 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80295f0:	68fb      	ldr	r3, [r7, #12]
 80295f2:	681b      	ldr	r3, [r3, #0]
 80295f4:	681a      	ldr	r2, [r3, #0]
 80295f6:	68fb      	ldr	r3, [r7, #12]
 80295f8:	681b      	ldr	r3, [r3, #0]
 80295fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80295fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8029600:	68fb      	ldr	r3, [r7, #12]
 8029602:	68db      	ldr	r3, [r3, #12]
 8029604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8029608:	d178      	bne.n	80296fc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 802960a:	68fb      	ldr	r3, [r7, #12]
 802960c:	685b      	ldr	r3, [r3, #4]
 802960e:	2b00      	cmp	r3, #0
 8029610:	d002      	beq.n	8029618 <HAL_SPI_TransmitReceive+0x10a>
 8029612:	8b7b      	ldrh	r3, [r7, #26]
 8029614:	2b01      	cmp	r3, #1
 8029616:	d166      	bne.n	80296e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8029618:	68fb      	ldr	r3, [r7, #12]
 802961a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802961c:	881a      	ldrh	r2, [r3, #0]
 802961e:	68fb      	ldr	r3, [r7, #12]
 8029620:	681b      	ldr	r3, [r3, #0]
 8029622:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8029624:	68fb      	ldr	r3, [r7, #12]
 8029626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029628:	1c9a      	adds	r2, r3, #2
 802962a:	68fb      	ldr	r3, [r7, #12]
 802962c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 802962e:	68fb      	ldr	r3, [r7, #12]
 8029630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029632:	b29b      	uxth	r3, r3
 8029634:	3b01      	subs	r3, #1
 8029636:	b29a      	uxth	r2, r3
 8029638:	68fb      	ldr	r3, [r7, #12]
 802963a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 802963c:	e053      	b.n	80296e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 802963e:	68fb      	ldr	r3, [r7, #12]
 8029640:	681b      	ldr	r3, [r3, #0]
 8029642:	689b      	ldr	r3, [r3, #8]
 8029644:	f003 0302 	and.w	r3, r3, #2
 8029648:	2b02      	cmp	r3, #2
 802964a:	d11b      	bne.n	8029684 <HAL_SPI_TransmitReceive+0x176>
 802964c:	68fb      	ldr	r3, [r7, #12]
 802964e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029650:	b29b      	uxth	r3, r3
 8029652:	2b00      	cmp	r3, #0
 8029654:	d016      	beq.n	8029684 <HAL_SPI_TransmitReceive+0x176>
 8029656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029658:	2b01      	cmp	r3, #1
 802965a:	d113      	bne.n	8029684 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 802965c:	68fb      	ldr	r3, [r7, #12]
 802965e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029660:	881a      	ldrh	r2, [r3, #0]
 8029662:	68fb      	ldr	r3, [r7, #12]
 8029664:	681b      	ldr	r3, [r3, #0]
 8029666:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8029668:	68fb      	ldr	r3, [r7, #12]
 802966a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802966c:	1c9a      	adds	r2, r3, #2
 802966e:	68fb      	ldr	r3, [r7, #12]
 8029670:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8029672:	68fb      	ldr	r3, [r7, #12]
 8029674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029676:	b29b      	uxth	r3, r3
 8029678:	3b01      	subs	r3, #1
 802967a:	b29a      	uxth	r2, r3
 802967c:	68fb      	ldr	r3, [r7, #12]
 802967e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8029680:	2300      	movs	r3, #0
 8029682:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8029684:	68fb      	ldr	r3, [r7, #12]
 8029686:	681b      	ldr	r3, [r3, #0]
 8029688:	689b      	ldr	r3, [r3, #8]
 802968a:	f003 0301 	and.w	r3, r3, #1
 802968e:	2b01      	cmp	r3, #1
 8029690:	d119      	bne.n	80296c6 <HAL_SPI_TransmitReceive+0x1b8>
 8029692:	68fb      	ldr	r3, [r7, #12]
 8029694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8029696:	b29b      	uxth	r3, r3
 8029698:	2b00      	cmp	r3, #0
 802969a:	d014      	beq.n	80296c6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 802969c:	68fb      	ldr	r3, [r7, #12]
 802969e:	681b      	ldr	r3, [r3, #0]
 80296a0:	68da      	ldr	r2, [r3, #12]
 80296a2:	68fb      	ldr	r3, [r7, #12]
 80296a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80296a6:	b292      	uxth	r2, r2
 80296a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80296aa:	68fb      	ldr	r3, [r7, #12]
 80296ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80296ae:	1c9a      	adds	r2, r3, #2
 80296b0:	68fb      	ldr	r3, [r7, #12]
 80296b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80296b4:	68fb      	ldr	r3, [r7, #12]
 80296b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80296b8:	b29b      	uxth	r3, r3
 80296ba:	3b01      	subs	r3, #1
 80296bc:	b29a      	uxth	r2, r3
 80296be:	68fb      	ldr	r3, [r7, #12]
 80296c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80296c2:	2301      	movs	r3, #1
 80296c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80296c6:	f7fd f9dd 	bl	8026a84 <HAL_GetTick>
 80296ca:	4602      	mov	r2, r0
 80296cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80296ce:	1ad3      	subs	r3, r2, r3
 80296d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80296d2:	429a      	cmp	r2, r3
 80296d4:	d807      	bhi.n	80296e6 <HAL_SPI_TransmitReceive+0x1d8>
 80296d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80296d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80296dc:	d003      	beq.n	80296e6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80296de:	2303      	movs	r3, #3
 80296e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80296e4:	e0a7      	b.n	8029836 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80296e6:	68fb      	ldr	r3, [r7, #12]
 80296e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80296ea:	b29b      	uxth	r3, r3
 80296ec:	2b00      	cmp	r3, #0
 80296ee:	d1a6      	bne.n	802963e <HAL_SPI_TransmitReceive+0x130>
 80296f0:	68fb      	ldr	r3, [r7, #12]
 80296f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80296f4:	b29b      	uxth	r3, r3
 80296f6:	2b00      	cmp	r3, #0
 80296f8:	d1a1      	bne.n	802963e <HAL_SPI_TransmitReceive+0x130>
 80296fa:	e07c      	b.n	80297f6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80296fc:	68fb      	ldr	r3, [r7, #12]
 80296fe:	685b      	ldr	r3, [r3, #4]
 8029700:	2b00      	cmp	r3, #0
 8029702:	d002      	beq.n	802970a <HAL_SPI_TransmitReceive+0x1fc>
 8029704:	8b7b      	ldrh	r3, [r7, #26]
 8029706:	2b01      	cmp	r3, #1
 8029708:	d16b      	bne.n	80297e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 802970a:	68fb      	ldr	r3, [r7, #12]
 802970c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802970e:	68fb      	ldr	r3, [r7, #12]
 8029710:	681b      	ldr	r3, [r3, #0]
 8029712:	330c      	adds	r3, #12
 8029714:	7812      	ldrb	r2, [r2, #0]
 8029716:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8029718:	68fb      	ldr	r3, [r7, #12]
 802971a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802971c:	1c5a      	adds	r2, r3, #1
 802971e:	68fb      	ldr	r3, [r7, #12]
 8029720:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8029722:	68fb      	ldr	r3, [r7, #12]
 8029724:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029726:	b29b      	uxth	r3, r3
 8029728:	3b01      	subs	r3, #1
 802972a:	b29a      	uxth	r2, r3
 802972c:	68fb      	ldr	r3, [r7, #12]
 802972e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8029730:	e057      	b.n	80297e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8029732:	68fb      	ldr	r3, [r7, #12]
 8029734:	681b      	ldr	r3, [r3, #0]
 8029736:	689b      	ldr	r3, [r3, #8]
 8029738:	f003 0302 	and.w	r3, r3, #2
 802973c:	2b02      	cmp	r3, #2
 802973e:	d11c      	bne.n	802977a <HAL_SPI_TransmitReceive+0x26c>
 8029740:	68fb      	ldr	r3, [r7, #12]
 8029742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8029744:	b29b      	uxth	r3, r3
 8029746:	2b00      	cmp	r3, #0
 8029748:	d017      	beq.n	802977a <HAL_SPI_TransmitReceive+0x26c>
 802974a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802974c:	2b01      	cmp	r3, #1
 802974e:	d114      	bne.n	802977a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8029750:	68fb      	ldr	r3, [r7, #12]
 8029752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8029754:	68fb      	ldr	r3, [r7, #12]
 8029756:	681b      	ldr	r3, [r3, #0]
 8029758:	330c      	adds	r3, #12
 802975a:	7812      	ldrb	r2, [r2, #0]
 802975c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 802975e:	68fb      	ldr	r3, [r7, #12]
 8029760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029762:	1c5a      	adds	r2, r3, #1
 8029764:	68fb      	ldr	r3, [r7, #12]
 8029766:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8029768:	68fb      	ldr	r3, [r7, #12]
 802976a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 802976c:	b29b      	uxth	r3, r3
 802976e:	3b01      	subs	r3, #1
 8029770:	b29a      	uxth	r2, r3
 8029772:	68fb      	ldr	r3, [r7, #12]
 8029774:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8029776:	2300      	movs	r3, #0
 8029778:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 802977a:	68fb      	ldr	r3, [r7, #12]
 802977c:	681b      	ldr	r3, [r3, #0]
 802977e:	689b      	ldr	r3, [r3, #8]
 8029780:	f003 0301 	and.w	r3, r3, #1
 8029784:	2b01      	cmp	r3, #1
 8029786:	d119      	bne.n	80297bc <HAL_SPI_TransmitReceive+0x2ae>
 8029788:	68fb      	ldr	r3, [r7, #12]
 802978a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 802978c:	b29b      	uxth	r3, r3
 802978e:	2b00      	cmp	r3, #0
 8029790:	d014      	beq.n	80297bc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8029792:	68fb      	ldr	r3, [r7, #12]
 8029794:	681b      	ldr	r3, [r3, #0]
 8029796:	68da      	ldr	r2, [r3, #12]
 8029798:	68fb      	ldr	r3, [r7, #12]
 802979a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802979c:	b2d2      	uxtb	r2, r2
 802979e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80297a0:	68fb      	ldr	r3, [r7, #12]
 80297a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80297a4:	1c5a      	adds	r2, r3, #1
 80297a6:	68fb      	ldr	r3, [r7, #12]
 80297a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80297aa:	68fb      	ldr	r3, [r7, #12]
 80297ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80297ae:	b29b      	uxth	r3, r3
 80297b0:	3b01      	subs	r3, #1
 80297b2:	b29a      	uxth	r2, r3
 80297b4:	68fb      	ldr	r3, [r7, #12]
 80297b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80297b8:	2301      	movs	r3, #1
 80297ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80297bc:	f7fd f962 	bl	8026a84 <HAL_GetTick>
 80297c0:	4602      	mov	r2, r0
 80297c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80297c4:	1ad3      	subs	r3, r2, r3
 80297c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80297c8:	429a      	cmp	r2, r3
 80297ca:	d803      	bhi.n	80297d4 <HAL_SPI_TransmitReceive+0x2c6>
 80297cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80297ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80297d2:	d102      	bne.n	80297da <HAL_SPI_TransmitReceive+0x2cc>
 80297d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80297d6:	2b00      	cmp	r3, #0
 80297d8:	d103      	bne.n	80297e2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80297da:	2303      	movs	r3, #3
 80297dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80297e0:	e029      	b.n	8029836 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80297e2:	68fb      	ldr	r3, [r7, #12]
 80297e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80297e6:	b29b      	uxth	r3, r3
 80297e8:	2b00      	cmp	r3, #0
 80297ea:	d1a2      	bne.n	8029732 <HAL_SPI_TransmitReceive+0x224>
 80297ec:	68fb      	ldr	r3, [r7, #12]
 80297ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80297f0:	b29b      	uxth	r3, r3
 80297f2:	2b00      	cmp	r3, #0
 80297f4:	d19d      	bne.n	8029732 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80297f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80297f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80297fa:	68f8      	ldr	r0, [r7, #12]
 80297fc:	f000 f8f8 	bl	80299f0 <SPI_EndRxTxTransaction>
 8029800:	4603      	mov	r3, r0
 8029802:	2b00      	cmp	r3, #0
 8029804:	d006      	beq.n	8029814 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8029806:	2301      	movs	r3, #1
 8029808:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 802980c:	68fb      	ldr	r3, [r7, #12]
 802980e:	2220      	movs	r2, #32
 8029810:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8029812:	e010      	b.n	8029836 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8029814:	68fb      	ldr	r3, [r7, #12]
 8029816:	689b      	ldr	r3, [r3, #8]
 8029818:	2b00      	cmp	r3, #0
 802981a:	d10b      	bne.n	8029834 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802981c:	2300      	movs	r3, #0
 802981e:	617b      	str	r3, [r7, #20]
 8029820:	68fb      	ldr	r3, [r7, #12]
 8029822:	681b      	ldr	r3, [r3, #0]
 8029824:	68db      	ldr	r3, [r3, #12]
 8029826:	617b      	str	r3, [r7, #20]
 8029828:	68fb      	ldr	r3, [r7, #12]
 802982a:	681b      	ldr	r3, [r3, #0]
 802982c:	689b      	ldr	r3, [r3, #8]
 802982e:	617b      	str	r3, [r7, #20]
 8029830:	697b      	ldr	r3, [r7, #20]
 8029832:	e000      	b.n	8029836 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8029834:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8029836:	68fb      	ldr	r3, [r7, #12]
 8029838:	2201      	movs	r2, #1
 802983a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 802983e:	68fb      	ldr	r3, [r7, #12]
 8029840:	2200      	movs	r2, #0
 8029842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8029846:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 802984a:	4618      	mov	r0, r3
 802984c:	3730      	adds	r7, #48	; 0x30
 802984e:	46bd      	mov	sp, r7
 8029850:	bd80      	pop	{r7, pc}

08029852 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8029852:	b580      	push	{r7, lr}
 8029854:	b084      	sub	sp, #16
 8029856:	af00      	add	r7, sp, #0
 8029858:	60f8      	str	r0, [r7, #12]
 802985a:	60b9      	str	r1, [r7, #8]
 802985c:	603b      	str	r3, [r7, #0]
 802985e:	4613      	mov	r3, r2
 8029860:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8029862:	e04c      	b.n	80298fe <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8029864:	683b      	ldr	r3, [r7, #0]
 8029866:	f1b3 3fff 	cmp.w	r3, #4294967295
 802986a:	d048      	beq.n	80298fe <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 802986c:	f7fd f90a 	bl	8026a84 <HAL_GetTick>
 8029870:	4602      	mov	r2, r0
 8029872:	69bb      	ldr	r3, [r7, #24]
 8029874:	1ad3      	subs	r3, r2, r3
 8029876:	683a      	ldr	r2, [r7, #0]
 8029878:	429a      	cmp	r2, r3
 802987a:	d902      	bls.n	8029882 <SPI_WaitFlagStateUntilTimeout+0x30>
 802987c:	683b      	ldr	r3, [r7, #0]
 802987e:	2b00      	cmp	r3, #0
 8029880:	d13d      	bne.n	80298fe <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8029882:	68fb      	ldr	r3, [r7, #12]
 8029884:	681b      	ldr	r3, [r3, #0]
 8029886:	685a      	ldr	r2, [r3, #4]
 8029888:	68fb      	ldr	r3, [r7, #12]
 802988a:	681b      	ldr	r3, [r3, #0]
 802988c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8029890:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8029892:	68fb      	ldr	r3, [r7, #12]
 8029894:	685b      	ldr	r3, [r3, #4]
 8029896:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802989a:	d111      	bne.n	80298c0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 802989c:	68fb      	ldr	r3, [r7, #12]
 802989e:	689b      	ldr	r3, [r3, #8]
 80298a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80298a4:	d004      	beq.n	80298b0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80298a6:	68fb      	ldr	r3, [r7, #12]
 80298a8:	689b      	ldr	r3, [r3, #8]
 80298aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80298ae:	d107      	bne.n	80298c0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80298b0:	68fb      	ldr	r3, [r7, #12]
 80298b2:	681b      	ldr	r3, [r3, #0]
 80298b4:	681a      	ldr	r2, [r3, #0]
 80298b6:	68fb      	ldr	r3, [r7, #12]
 80298b8:	681b      	ldr	r3, [r3, #0]
 80298ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80298be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80298c0:	68fb      	ldr	r3, [r7, #12]
 80298c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80298c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80298c8:	d10f      	bne.n	80298ea <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80298ca:	68fb      	ldr	r3, [r7, #12]
 80298cc:	681b      	ldr	r3, [r3, #0]
 80298ce:	681a      	ldr	r2, [r3, #0]
 80298d0:	68fb      	ldr	r3, [r7, #12]
 80298d2:	681b      	ldr	r3, [r3, #0]
 80298d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80298d8:	601a      	str	r2, [r3, #0]
 80298da:	68fb      	ldr	r3, [r7, #12]
 80298dc:	681b      	ldr	r3, [r3, #0]
 80298de:	681a      	ldr	r2, [r3, #0]
 80298e0:	68fb      	ldr	r3, [r7, #12]
 80298e2:	681b      	ldr	r3, [r3, #0]
 80298e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80298e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80298ea:	68fb      	ldr	r3, [r7, #12]
 80298ec:	2201      	movs	r2, #1
 80298ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80298f2:	68fb      	ldr	r3, [r7, #12]
 80298f4:	2200      	movs	r2, #0
 80298f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80298fa:	2303      	movs	r3, #3
 80298fc:	e00f      	b.n	802991e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80298fe:	68fb      	ldr	r3, [r7, #12]
 8029900:	681b      	ldr	r3, [r3, #0]
 8029902:	689a      	ldr	r2, [r3, #8]
 8029904:	68bb      	ldr	r3, [r7, #8]
 8029906:	4013      	ands	r3, r2
 8029908:	68ba      	ldr	r2, [r7, #8]
 802990a:	429a      	cmp	r2, r3
 802990c:	bf0c      	ite	eq
 802990e:	2301      	moveq	r3, #1
 8029910:	2300      	movne	r3, #0
 8029912:	b2db      	uxtb	r3, r3
 8029914:	461a      	mov	r2, r3
 8029916:	79fb      	ldrb	r3, [r7, #7]
 8029918:	429a      	cmp	r2, r3
 802991a:	d1a3      	bne.n	8029864 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 802991c:	2300      	movs	r3, #0
}
 802991e:	4618      	mov	r0, r3
 8029920:	3710      	adds	r7, #16
 8029922:	46bd      	mov	sp, r7
 8029924:	bd80      	pop	{r7, pc}

08029926 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8029926:	b580      	push	{r7, lr}
 8029928:	b086      	sub	sp, #24
 802992a:	af02      	add	r7, sp, #8
 802992c:	60f8      	str	r0, [r7, #12]
 802992e:	60b9      	str	r1, [r7, #8]
 8029930:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8029932:	68fb      	ldr	r3, [r7, #12]
 8029934:	685b      	ldr	r3, [r3, #4]
 8029936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 802993a:	d111      	bne.n	8029960 <SPI_EndRxTransaction+0x3a>
 802993c:	68fb      	ldr	r3, [r7, #12]
 802993e:	689b      	ldr	r3, [r3, #8]
 8029940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8029944:	d004      	beq.n	8029950 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8029946:	68fb      	ldr	r3, [r7, #12]
 8029948:	689b      	ldr	r3, [r3, #8]
 802994a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802994e:	d107      	bne.n	8029960 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8029950:	68fb      	ldr	r3, [r7, #12]
 8029952:	681b      	ldr	r3, [r3, #0]
 8029954:	681a      	ldr	r2, [r3, #0]
 8029956:	68fb      	ldr	r3, [r7, #12]
 8029958:	681b      	ldr	r3, [r3, #0]
 802995a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802995e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8029960:	68fb      	ldr	r3, [r7, #12]
 8029962:	685b      	ldr	r3, [r3, #4]
 8029964:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8029968:	d12a      	bne.n	80299c0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 802996a:	68fb      	ldr	r3, [r7, #12]
 802996c:	689b      	ldr	r3, [r3, #8]
 802996e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8029972:	d012      	beq.n	802999a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8029974:	687b      	ldr	r3, [r7, #4]
 8029976:	9300      	str	r3, [sp, #0]
 8029978:	68bb      	ldr	r3, [r7, #8]
 802997a:	2200      	movs	r2, #0
 802997c:	2180      	movs	r1, #128	; 0x80
 802997e:	68f8      	ldr	r0, [r7, #12]
 8029980:	f7ff ff67 	bl	8029852 <SPI_WaitFlagStateUntilTimeout>
 8029984:	4603      	mov	r3, r0
 8029986:	2b00      	cmp	r3, #0
 8029988:	d02d      	beq.n	80299e6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 802998a:	68fb      	ldr	r3, [r7, #12]
 802998c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802998e:	f043 0220 	orr.w	r2, r3, #32
 8029992:	68fb      	ldr	r3, [r7, #12]
 8029994:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8029996:	2303      	movs	r3, #3
 8029998:	e026      	b.n	80299e8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 802999a:	687b      	ldr	r3, [r7, #4]
 802999c:	9300      	str	r3, [sp, #0]
 802999e:	68bb      	ldr	r3, [r7, #8]
 80299a0:	2200      	movs	r2, #0
 80299a2:	2101      	movs	r1, #1
 80299a4:	68f8      	ldr	r0, [r7, #12]
 80299a6:	f7ff ff54 	bl	8029852 <SPI_WaitFlagStateUntilTimeout>
 80299aa:	4603      	mov	r3, r0
 80299ac:	2b00      	cmp	r3, #0
 80299ae:	d01a      	beq.n	80299e6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80299b0:	68fb      	ldr	r3, [r7, #12]
 80299b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80299b4:	f043 0220 	orr.w	r2, r3, #32
 80299b8:	68fb      	ldr	r3, [r7, #12]
 80299ba:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80299bc:	2303      	movs	r3, #3
 80299be:	e013      	b.n	80299e8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80299c0:	687b      	ldr	r3, [r7, #4]
 80299c2:	9300      	str	r3, [sp, #0]
 80299c4:	68bb      	ldr	r3, [r7, #8]
 80299c6:	2200      	movs	r2, #0
 80299c8:	2101      	movs	r1, #1
 80299ca:	68f8      	ldr	r0, [r7, #12]
 80299cc:	f7ff ff41 	bl	8029852 <SPI_WaitFlagStateUntilTimeout>
 80299d0:	4603      	mov	r3, r0
 80299d2:	2b00      	cmp	r3, #0
 80299d4:	d007      	beq.n	80299e6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80299d6:	68fb      	ldr	r3, [r7, #12]
 80299d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80299da:	f043 0220 	orr.w	r2, r3, #32
 80299de:	68fb      	ldr	r3, [r7, #12]
 80299e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80299e2:	2303      	movs	r3, #3
 80299e4:	e000      	b.n	80299e8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80299e6:	2300      	movs	r3, #0
}
 80299e8:	4618      	mov	r0, r3
 80299ea:	3710      	adds	r7, #16
 80299ec:	46bd      	mov	sp, r7
 80299ee:	bd80      	pop	{r7, pc}

080299f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80299f0:	b580      	push	{r7, lr}
 80299f2:	b088      	sub	sp, #32
 80299f4:	af02      	add	r7, sp, #8
 80299f6:	60f8      	str	r0, [r7, #12]
 80299f8:	60b9      	str	r1, [r7, #8]
 80299fa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80299fc:	4b1b      	ldr	r3, [pc, #108]	; (8029a6c <SPI_EndRxTxTransaction+0x7c>)
 80299fe:	681b      	ldr	r3, [r3, #0]
 8029a00:	4a1b      	ldr	r2, [pc, #108]	; (8029a70 <SPI_EndRxTxTransaction+0x80>)
 8029a02:	fba2 2303 	umull	r2, r3, r2, r3
 8029a06:	0d5b      	lsrs	r3, r3, #21
 8029a08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8029a0c:	fb02 f303 	mul.w	r3, r2, r3
 8029a10:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8029a12:	68fb      	ldr	r3, [r7, #12]
 8029a14:	685b      	ldr	r3, [r3, #4]
 8029a16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8029a1a:	d112      	bne.n	8029a42 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8029a1c:	687b      	ldr	r3, [r7, #4]
 8029a1e:	9300      	str	r3, [sp, #0]
 8029a20:	68bb      	ldr	r3, [r7, #8]
 8029a22:	2200      	movs	r2, #0
 8029a24:	2180      	movs	r1, #128	; 0x80
 8029a26:	68f8      	ldr	r0, [r7, #12]
 8029a28:	f7ff ff13 	bl	8029852 <SPI_WaitFlagStateUntilTimeout>
 8029a2c:	4603      	mov	r3, r0
 8029a2e:	2b00      	cmp	r3, #0
 8029a30:	d016      	beq.n	8029a60 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8029a32:	68fb      	ldr	r3, [r7, #12]
 8029a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8029a36:	f043 0220 	orr.w	r2, r3, #32
 8029a3a:	68fb      	ldr	r3, [r7, #12]
 8029a3c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8029a3e:	2303      	movs	r3, #3
 8029a40:	e00f      	b.n	8029a62 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8029a42:	697b      	ldr	r3, [r7, #20]
 8029a44:	2b00      	cmp	r3, #0
 8029a46:	d00a      	beq.n	8029a5e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8029a48:	697b      	ldr	r3, [r7, #20]
 8029a4a:	3b01      	subs	r3, #1
 8029a4c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8029a4e:	68fb      	ldr	r3, [r7, #12]
 8029a50:	681b      	ldr	r3, [r3, #0]
 8029a52:	689b      	ldr	r3, [r3, #8]
 8029a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029a58:	2b80      	cmp	r3, #128	; 0x80
 8029a5a:	d0f2      	beq.n	8029a42 <SPI_EndRxTxTransaction+0x52>
 8029a5c:	e000      	b.n	8029a60 <SPI_EndRxTxTransaction+0x70>
        break;
 8029a5e:	bf00      	nop
  }

  return HAL_OK;
 8029a60:	2300      	movs	r3, #0
}
 8029a62:	4618      	mov	r0, r3
 8029a64:	3718      	adds	r7, #24
 8029a66:	46bd      	mov	sp, r7
 8029a68:	bd80      	pop	{r7, pc}
 8029a6a:	bf00      	nop
 8029a6c:	20000014 	.word	0x20000014
 8029a70:	165e9f81 	.word	0x165e9f81

08029a74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8029a74:	b580      	push	{r7, lr}
 8029a76:	b082      	sub	sp, #8
 8029a78:	af00      	add	r7, sp, #0
 8029a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8029a7c:	687b      	ldr	r3, [r7, #4]
 8029a7e:	2b00      	cmp	r3, #0
 8029a80:	d101      	bne.n	8029a86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8029a82:	2301      	movs	r3, #1
 8029a84:	e01d      	b.n	8029ac2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8029a86:	687b      	ldr	r3, [r7, #4]
 8029a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8029a8c:	b2db      	uxtb	r3, r3
 8029a8e:	2b00      	cmp	r3, #0
 8029a90:	d106      	bne.n	8029aa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8029a92:	687b      	ldr	r3, [r7, #4]
 8029a94:	2200      	movs	r2, #0
 8029a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8029a9a:	6878      	ldr	r0, [r7, #4]
 8029a9c:	f7fc fae4 	bl	8026068 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8029aa0:	687b      	ldr	r3, [r7, #4]
 8029aa2:	2202      	movs	r2, #2
 8029aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8029aa8:	687b      	ldr	r3, [r7, #4]
 8029aaa:	681a      	ldr	r2, [r3, #0]
 8029aac:	687b      	ldr	r3, [r7, #4]
 8029aae:	3304      	adds	r3, #4
 8029ab0:	4619      	mov	r1, r3
 8029ab2:	4610      	mov	r0, r2
 8029ab4:	f000 fc0e 	bl	802a2d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8029ab8:	687b      	ldr	r3, [r7, #4]
 8029aba:	2201      	movs	r2, #1
 8029abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8029ac0:	2300      	movs	r3, #0
}
 8029ac2:	4618      	mov	r0, r3
 8029ac4:	3708      	adds	r7, #8
 8029ac6:	46bd      	mov	sp, r7
 8029ac8:	bd80      	pop	{r7, pc}

08029aca <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8029aca:	b480      	push	{r7}
 8029acc:	b085      	sub	sp, #20
 8029ace:	af00      	add	r7, sp, #0
 8029ad0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8029ad2:	687b      	ldr	r3, [r7, #4]
 8029ad4:	681b      	ldr	r3, [r3, #0]
 8029ad6:	68da      	ldr	r2, [r3, #12]
 8029ad8:	687b      	ldr	r3, [r7, #4]
 8029ada:	681b      	ldr	r3, [r3, #0]
 8029adc:	f042 0201 	orr.w	r2, r2, #1
 8029ae0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8029ae2:	687b      	ldr	r3, [r7, #4]
 8029ae4:	681b      	ldr	r3, [r3, #0]
 8029ae6:	689b      	ldr	r3, [r3, #8]
 8029ae8:	f003 0307 	and.w	r3, r3, #7
 8029aec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8029aee:	68fb      	ldr	r3, [r7, #12]
 8029af0:	2b06      	cmp	r3, #6
 8029af2:	d007      	beq.n	8029b04 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8029af4:	687b      	ldr	r3, [r7, #4]
 8029af6:	681b      	ldr	r3, [r3, #0]
 8029af8:	681a      	ldr	r2, [r3, #0]
 8029afa:	687b      	ldr	r3, [r7, #4]
 8029afc:	681b      	ldr	r3, [r3, #0]
 8029afe:	f042 0201 	orr.w	r2, r2, #1
 8029b02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8029b04:	2300      	movs	r3, #0
}
 8029b06:	4618      	mov	r0, r3
 8029b08:	3714      	adds	r7, #20
 8029b0a:	46bd      	mov	sp, r7
 8029b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8029b10:	4770      	bx	lr

08029b12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8029b12:	b580      	push	{r7, lr}
 8029b14:	b082      	sub	sp, #8
 8029b16:	af00      	add	r7, sp, #0
 8029b18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8029b1a:	687b      	ldr	r3, [r7, #4]
 8029b1c:	2b00      	cmp	r3, #0
 8029b1e:	d101      	bne.n	8029b24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8029b20:	2301      	movs	r3, #1
 8029b22:	e01d      	b.n	8029b60 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8029b24:	687b      	ldr	r3, [r7, #4]
 8029b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8029b2a:	b2db      	uxtb	r3, r3
 8029b2c:	2b00      	cmp	r3, #0
 8029b2e:	d106      	bne.n	8029b3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8029b30:	687b      	ldr	r3, [r7, #4]
 8029b32:	2200      	movs	r2, #0
 8029b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8029b38:	6878      	ldr	r0, [r7, #4]
 8029b3a:	f7fc fa47 	bl	8025fcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8029b3e:	687b      	ldr	r3, [r7, #4]
 8029b40:	2202      	movs	r2, #2
 8029b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8029b46:	687b      	ldr	r3, [r7, #4]
 8029b48:	681a      	ldr	r2, [r3, #0]
 8029b4a:	687b      	ldr	r3, [r7, #4]
 8029b4c:	3304      	adds	r3, #4
 8029b4e:	4619      	mov	r1, r3
 8029b50:	4610      	mov	r0, r2
 8029b52:	f000 fbbf 	bl	802a2d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8029b56:	687b      	ldr	r3, [r7, #4]
 8029b58:	2201      	movs	r2, #1
 8029b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8029b5e:	2300      	movs	r3, #0
}
 8029b60:	4618      	mov	r0, r3
 8029b62:	3708      	adds	r7, #8
 8029b64:	46bd      	mov	sp, r7
 8029b66:	bd80      	pop	{r7, pc}

08029b68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8029b68:	b580      	push	{r7, lr}
 8029b6a:	b084      	sub	sp, #16
 8029b6c:	af00      	add	r7, sp, #0
 8029b6e:	6078      	str	r0, [r7, #4]
 8029b70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8029b72:	687b      	ldr	r3, [r7, #4]
 8029b74:	681b      	ldr	r3, [r3, #0]
 8029b76:	2201      	movs	r2, #1
 8029b78:	6839      	ldr	r1, [r7, #0]
 8029b7a:	4618      	mov	r0, r3
 8029b7c:	f000 fe94 	bl	802a8a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8029b80:	687b      	ldr	r3, [r7, #4]
 8029b82:	681b      	ldr	r3, [r3, #0]
 8029b84:	4a15      	ldr	r2, [pc, #84]	; (8029bdc <HAL_TIM_PWM_Start+0x74>)
 8029b86:	4293      	cmp	r3, r2
 8029b88:	d004      	beq.n	8029b94 <HAL_TIM_PWM_Start+0x2c>
 8029b8a:	687b      	ldr	r3, [r7, #4]
 8029b8c:	681b      	ldr	r3, [r3, #0]
 8029b8e:	4a14      	ldr	r2, [pc, #80]	; (8029be0 <HAL_TIM_PWM_Start+0x78>)
 8029b90:	4293      	cmp	r3, r2
 8029b92:	d101      	bne.n	8029b98 <HAL_TIM_PWM_Start+0x30>
 8029b94:	2301      	movs	r3, #1
 8029b96:	e000      	b.n	8029b9a <HAL_TIM_PWM_Start+0x32>
 8029b98:	2300      	movs	r3, #0
 8029b9a:	2b00      	cmp	r3, #0
 8029b9c:	d007      	beq.n	8029bae <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8029b9e:	687b      	ldr	r3, [r7, #4]
 8029ba0:	681b      	ldr	r3, [r3, #0]
 8029ba2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8029ba4:	687b      	ldr	r3, [r7, #4]
 8029ba6:	681b      	ldr	r3, [r3, #0]
 8029ba8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8029bac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8029bae:	687b      	ldr	r3, [r7, #4]
 8029bb0:	681b      	ldr	r3, [r3, #0]
 8029bb2:	689b      	ldr	r3, [r3, #8]
 8029bb4:	f003 0307 	and.w	r3, r3, #7
 8029bb8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8029bba:	68fb      	ldr	r3, [r7, #12]
 8029bbc:	2b06      	cmp	r3, #6
 8029bbe:	d007      	beq.n	8029bd0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8029bc0:	687b      	ldr	r3, [r7, #4]
 8029bc2:	681b      	ldr	r3, [r3, #0]
 8029bc4:	681a      	ldr	r2, [r3, #0]
 8029bc6:	687b      	ldr	r3, [r7, #4]
 8029bc8:	681b      	ldr	r3, [r3, #0]
 8029bca:	f042 0201 	orr.w	r2, r2, #1
 8029bce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8029bd0:	2300      	movs	r3, #0
}
 8029bd2:	4618      	mov	r0, r3
 8029bd4:	3710      	adds	r7, #16
 8029bd6:	46bd      	mov	sp, r7
 8029bd8:	bd80      	pop	{r7, pc}
 8029bda:	bf00      	nop
 8029bdc:	40010000 	.word	0x40010000
 8029be0:	40010400 	.word	0x40010400

08029be4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8029be4:	b580      	push	{r7, lr}
 8029be6:	b086      	sub	sp, #24
 8029be8:	af00      	add	r7, sp, #0
 8029bea:	6078      	str	r0, [r7, #4]
 8029bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8029bee:	687b      	ldr	r3, [r7, #4]
 8029bf0:	2b00      	cmp	r3, #0
 8029bf2:	d101      	bne.n	8029bf8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8029bf4:	2301      	movs	r3, #1
 8029bf6:	e083      	b.n	8029d00 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8029bf8:	687b      	ldr	r3, [r7, #4]
 8029bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8029bfe:	b2db      	uxtb	r3, r3
 8029c00:	2b00      	cmp	r3, #0
 8029c02:	d106      	bne.n	8029c12 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8029c04:	687b      	ldr	r3, [r7, #4]
 8029c06:	2200      	movs	r2, #0
 8029c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8029c0c:	6878      	ldr	r0, [r7, #4]
 8029c0e:	f7fc fac1 	bl	8026194 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8029c12:	687b      	ldr	r3, [r7, #4]
 8029c14:	2202      	movs	r2, #2
 8029c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8029c1a:	687b      	ldr	r3, [r7, #4]
 8029c1c:	681b      	ldr	r3, [r3, #0]
 8029c1e:	689b      	ldr	r3, [r3, #8]
 8029c20:	687a      	ldr	r2, [r7, #4]
 8029c22:	6812      	ldr	r2, [r2, #0]
 8029c24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8029c28:	f023 0307 	bic.w	r3, r3, #7
 8029c2c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8029c2e:	687b      	ldr	r3, [r7, #4]
 8029c30:	681a      	ldr	r2, [r3, #0]
 8029c32:	687b      	ldr	r3, [r7, #4]
 8029c34:	3304      	adds	r3, #4
 8029c36:	4619      	mov	r1, r3
 8029c38:	4610      	mov	r0, r2
 8029c3a:	f000 fb4b 	bl	802a2d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8029c3e:	687b      	ldr	r3, [r7, #4]
 8029c40:	681b      	ldr	r3, [r3, #0]
 8029c42:	689b      	ldr	r3, [r3, #8]
 8029c44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8029c46:	687b      	ldr	r3, [r7, #4]
 8029c48:	681b      	ldr	r3, [r3, #0]
 8029c4a:	699b      	ldr	r3, [r3, #24]
 8029c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8029c4e:	687b      	ldr	r3, [r7, #4]
 8029c50:	681b      	ldr	r3, [r3, #0]
 8029c52:	6a1b      	ldr	r3, [r3, #32]
 8029c54:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8029c56:	683b      	ldr	r3, [r7, #0]
 8029c58:	681b      	ldr	r3, [r3, #0]
 8029c5a:	697a      	ldr	r2, [r7, #20]
 8029c5c:	4313      	orrs	r3, r2
 8029c5e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8029c60:	693b      	ldr	r3, [r7, #16]
 8029c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8029c66:	f023 0303 	bic.w	r3, r3, #3
 8029c6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8029c6c:	683b      	ldr	r3, [r7, #0]
 8029c6e:	689a      	ldr	r2, [r3, #8]
 8029c70:	683b      	ldr	r3, [r7, #0]
 8029c72:	699b      	ldr	r3, [r3, #24]
 8029c74:	021b      	lsls	r3, r3, #8
 8029c76:	4313      	orrs	r3, r2
 8029c78:	693a      	ldr	r2, [r7, #16]
 8029c7a:	4313      	orrs	r3, r2
 8029c7c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8029c7e:	693b      	ldr	r3, [r7, #16]
 8029c80:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8029c84:	f023 030c 	bic.w	r3, r3, #12
 8029c88:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8029c8a:	693b      	ldr	r3, [r7, #16]
 8029c8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8029c90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8029c94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8029c96:	683b      	ldr	r3, [r7, #0]
 8029c98:	68da      	ldr	r2, [r3, #12]
 8029c9a:	683b      	ldr	r3, [r7, #0]
 8029c9c:	69db      	ldr	r3, [r3, #28]
 8029c9e:	021b      	lsls	r3, r3, #8
 8029ca0:	4313      	orrs	r3, r2
 8029ca2:	693a      	ldr	r2, [r7, #16]
 8029ca4:	4313      	orrs	r3, r2
 8029ca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8029ca8:	683b      	ldr	r3, [r7, #0]
 8029caa:	691b      	ldr	r3, [r3, #16]
 8029cac:	011a      	lsls	r2, r3, #4
 8029cae:	683b      	ldr	r3, [r7, #0]
 8029cb0:	6a1b      	ldr	r3, [r3, #32]
 8029cb2:	031b      	lsls	r3, r3, #12
 8029cb4:	4313      	orrs	r3, r2
 8029cb6:	693a      	ldr	r2, [r7, #16]
 8029cb8:	4313      	orrs	r3, r2
 8029cba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8029cbc:	68fb      	ldr	r3, [r7, #12]
 8029cbe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8029cc2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8029cc4:	68fb      	ldr	r3, [r7, #12]
 8029cc6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8029cca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8029ccc:	683b      	ldr	r3, [r7, #0]
 8029cce:	685a      	ldr	r2, [r3, #4]
 8029cd0:	683b      	ldr	r3, [r7, #0]
 8029cd2:	695b      	ldr	r3, [r3, #20]
 8029cd4:	011b      	lsls	r3, r3, #4
 8029cd6:	4313      	orrs	r3, r2
 8029cd8:	68fa      	ldr	r2, [r7, #12]
 8029cda:	4313      	orrs	r3, r2
 8029cdc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8029cde:	687b      	ldr	r3, [r7, #4]
 8029ce0:	681b      	ldr	r3, [r3, #0]
 8029ce2:	697a      	ldr	r2, [r7, #20]
 8029ce4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8029ce6:	687b      	ldr	r3, [r7, #4]
 8029ce8:	681b      	ldr	r3, [r3, #0]
 8029cea:	693a      	ldr	r2, [r7, #16]
 8029cec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8029cee:	687b      	ldr	r3, [r7, #4]
 8029cf0:	681b      	ldr	r3, [r3, #0]
 8029cf2:	68fa      	ldr	r2, [r7, #12]
 8029cf4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8029cf6:	687b      	ldr	r3, [r7, #4]
 8029cf8:	2201      	movs	r2, #1
 8029cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8029cfe:	2300      	movs	r3, #0
}
 8029d00:	4618      	mov	r0, r3
 8029d02:	3718      	adds	r7, #24
 8029d04:	46bd      	mov	sp, r7
 8029d06:	bd80      	pop	{r7, pc}

08029d08 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8029d08:	b580      	push	{r7, lr}
 8029d0a:	b082      	sub	sp, #8
 8029d0c:	af00      	add	r7, sp, #0
 8029d0e:	6078      	str	r0, [r7, #4]
 8029d10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8029d12:	683b      	ldr	r3, [r7, #0]
 8029d14:	2b00      	cmp	r3, #0
 8029d16:	d002      	beq.n	8029d1e <HAL_TIM_Encoder_Start+0x16>
 8029d18:	2b04      	cmp	r3, #4
 8029d1a:	d008      	beq.n	8029d2e <HAL_TIM_Encoder_Start+0x26>
 8029d1c:	e00f      	b.n	8029d3e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8029d1e:	687b      	ldr	r3, [r7, #4]
 8029d20:	681b      	ldr	r3, [r3, #0]
 8029d22:	2201      	movs	r2, #1
 8029d24:	2100      	movs	r1, #0
 8029d26:	4618      	mov	r0, r3
 8029d28:	f000 fdbe 	bl	802a8a8 <TIM_CCxChannelCmd>
      break;
 8029d2c:	e016      	b.n	8029d5c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8029d2e:	687b      	ldr	r3, [r7, #4]
 8029d30:	681b      	ldr	r3, [r3, #0]
 8029d32:	2201      	movs	r2, #1
 8029d34:	2104      	movs	r1, #4
 8029d36:	4618      	mov	r0, r3
 8029d38:	f000 fdb6 	bl	802a8a8 <TIM_CCxChannelCmd>
      break;
 8029d3c:	e00e      	b.n	8029d5c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8029d3e:	687b      	ldr	r3, [r7, #4]
 8029d40:	681b      	ldr	r3, [r3, #0]
 8029d42:	2201      	movs	r2, #1
 8029d44:	2100      	movs	r1, #0
 8029d46:	4618      	mov	r0, r3
 8029d48:	f000 fdae 	bl	802a8a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8029d4c:	687b      	ldr	r3, [r7, #4]
 8029d4e:	681b      	ldr	r3, [r3, #0]
 8029d50:	2201      	movs	r2, #1
 8029d52:	2104      	movs	r1, #4
 8029d54:	4618      	mov	r0, r3
 8029d56:	f000 fda7 	bl	802a8a8 <TIM_CCxChannelCmd>
      break;
 8029d5a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8029d5c:	687b      	ldr	r3, [r7, #4]
 8029d5e:	681b      	ldr	r3, [r3, #0]
 8029d60:	681a      	ldr	r2, [r3, #0]
 8029d62:	687b      	ldr	r3, [r7, #4]
 8029d64:	681b      	ldr	r3, [r3, #0]
 8029d66:	f042 0201 	orr.w	r2, r2, #1
 8029d6a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8029d6c:	2300      	movs	r3, #0
}
 8029d6e:	4618      	mov	r0, r3
 8029d70:	3708      	adds	r7, #8
 8029d72:	46bd      	mov	sp, r7
 8029d74:	bd80      	pop	{r7, pc}

08029d76 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8029d76:	b580      	push	{r7, lr}
 8029d78:	b082      	sub	sp, #8
 8029d7a:	af00      	add	r7, sp, #0
 8029d7c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8029d7e:	687b      	ldr	r3, [r7, #4]
 8029d80:	681b      	ldr	r3, [r3, #0]
 8029d82:	691b      	ldr	r3, [r3, #16]
 8029d84:	f003 0302 	and.w	r3, r3, #2
 8029d88:	2b02      	cmp	r3, #2
 8029d8a:	d122      	bne.n	8029dd2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8029d8c:	687b      	ldr	r3, [r7, #4]
 8029d8e:	681b      	ldr	r3, [r3, #0]
 8029d90:	68db      	ldr	r3, [r3, #12]
 8029d92:	f003 0302 	and.w	r3, r3, #2
 8029d96:	2b02      	cmp	r3, #2
 8029d98:	d11b      	bne.n	8029dd2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8029d9a:	687b      	ldr	r3, [r7, #4]
 8029d9c:	681b      	ldr	r3, [r3, #0]
 8029d9e:	f06f 0202 	mvn.w	r2, #2
 8029da2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8029da4:	687b      	ldr	r3, [r7, #4]
 8029da6:	2201      	movs	r2, #1
 8029da8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8029daa:	687b      	ldr	r3, [r7, #4]
 8029dac:	681b      	ldr	r3, [r3, #0]
 8029dae:	699b      	ldr	r3, [r3, #24]
 8029db0:	f003 0303 	and.w	r3, r3, #3
 8029db4:	2b00      	cmp	r3, #0
 8029db6:	d003      	beq.n	8029dc0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8029db8:	6878      	ldr	r0, [r7, #4]
 8029dba:	f000 fa6c 	bl	802a296 <HAL_TIM_IC_CaptureCallback>
 8029dbe:	e005      	b.n	8029dcc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8029dc0:	6878      	ldr	r0, [r7, #4]
 8029dc2:	f000 fa5e 	bl	802a282 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029dc6:	6878      	ldr	r0, [r7, #4]
 8029dc8:	f000 fa6f 	bl	802a2aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029dcc:	687b      	ldr	r3, [r7, #4]
 8029dce:	2200      	movs	r2, #0
 8029dd0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8029dd2:	687b      	ldr	r3, [r7, #4]
 8029dd4:	681b      	ldr	r3, [r3, #0]
 8029dd6:	691b      	ldr	r3, [r3, #16]
 8029dd8:	f003 0304 	and.w	r3, r3, #4
 8029ddc:	2b04      	cmp	r3, #4
 8029dde:	d122      	bne.n	8029e26 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8029de0:	687b      	ldr	r3, [r7, #4]
 8029de2:	681b      	ldr	r3, [r3, #0]
 8029de4:	68db      	ldr	r3, [r3, #12]
 8029de6:	f003 0304 	and.w	r3, r3, #4
 8029dea:	2b04      	cmp	r3, #4
 8029dec:	d11b      	bne.n	8029e26 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8029dee:	687b      	ldr	r3, [r7, #4]
 8029df0:	681b      	ldr	r3, [r3, #0]
 8029df2:	f06f 0204 	mvn.w	r2, #4
 8029df6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8029df8:	687b      	ldr	r3, [r7, #4]
 8029dfa:	2202      	movs	r2, #2
 8029dfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8029dfe:	687b      	ldr	r3, [r7, #4]
 8029e00:	681b      	ldr	r3, [r3, #0]
 8029e02:	699b      	ldr	r3, [r3, #24]
 8029e04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8029e08:	2b00      	cmp	r3, #0
 8029e0a:	d003      	beq.n	8029e14 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029e0c:	6878      	ldr	r0, [r7, #4]
 8029e0e:	f000 fa42 	bl	802a296 <HAL_TIM_IC_CaptureCallback>
 8029e12:	e005      	b.n	8029e20 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029e14:	6878      	ldr	r0, [r7, #4]
 8029e16:	f000 fa34 	bl	802a282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029e1a:	6878      	ldr	r0, [r7, #4]
 8029e1c:	f000 fa45 	bl	802a2aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029e20:	687b      	ldr	r3, [r7, #4]
 8029e22:	2200      	movs	r2, #0
 8029e24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8029e26:	687b      	ldr	r3, [r7, #4]
 8029e28:	681b      	ldr	r3, [r3, #0]
 8029e2a:	691b      	ldr	r3, [r3, #16]
 8029e2c:	f003 0308 	and.w	r3, r3, #8
 8029e30:	2b08      	cmp	r3, #8
 8029e32:	d122      	bne.n	8029e7a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8029e34:	687b      	ldr	r3, [r7, #4]
 8029e36:	681b      	ldr	r3, [r3, #0]
 8029e38:	68db      	ldr	r3, [r3, #12]
 8029e3a:	f003 0308 	and.w	r3, r3, #8
 8029e3e:	2b08      	cmp	r3, #8
 8029e40:	d11b      	bne.n	8029e7a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8029e42:	687b      	ldr	r3, [r7, #4]
 8029e44:	681b      	ldr	r3, [r3, #0]
 8029e46:	f06f 0208 	mvn.w	r2, #8
 8029e4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8029e4c:	687b      	ldr	r3, [r7, #4]
 8029e4e:	2204      	movs	r2, #4
 8029e50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8029e52:	687b      	ldr	r3, [r7, #4]
 8029e54:	681b      	ldr	r3, [r3, #0]
 8029e56:	69db      	ldr	r3, [r3, #28]
 8029e58:	f003 0303 	and.w	r3, r3, #3
 8029e5c:	2b00      	cmp	r3, #0
 8029e5e:	d003      	beq.n	8029e68 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029e60:	6878      	ldr	r0, [r7, #4]
 8029e62:	f000 fa18 	bl	802a296 <HAL_TIM_IC_CaptureCallback>
 8029e66:	e005      	b.n	8029e74 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029e68:	6878      	ldr	r0, [r7, #4]
 8029e6a:	f000 fa0a 	bl	802a282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029e6e:	6878      	ldr	r0, [r7, #4]
 8029e70:	f000 fa1b 	bl	802a2aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029e74:	687b      	ldr	r3, [r7, #4]
 8029e76:	2200      	movs	r2, #0
 8029e78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8029e7a:	687b      	ldr	r3, [r7, #4]
 8029e7c:	681b      	ldr	r3, [r3, #0]
 8029e7e:	691b      	ldr	r3, [r3, #16]
 8029e80:	f003 0310 	and.w	r3, r3, #16
 8029e84:	2b10      	cmp	r3, #16
 8029e86:	d122      	bne.n	8029ece <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8029e88:	687b      	ldr	r3, [r7, #4]
 8029e8a:	681b      	ldr	r3, [r3, #0]
 8029e8c:	68db      	ldr	r3, [r3, #12]
 8029e8e:	f003 0310 	and.w	r3, r3, #16
 8029e92:	2b10      	cmp	r3, #16
 8029e94:	d11b      	bne.n	8029ece <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8029e96:	687b      	ldr	r3, [r7, #4]
 8029e98:	681b      	ldr	r3, [r3, #0]
 8029e9a:	f06f 0210 	mvn.w	r2, #16
 8029e9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8029ea0:	687b      	ldr	r3, [r7, #4]
 8029ea2:	2208      	movs	r2, #8
 8029ea4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8029ea6:	687b      	ldr	r3, [r7, #4]
 8029ea8:	681b      	ldr	r3, [r3, #0]
 8029eaa:	69db      	ldr	r3, [r3, #28]
 8029eac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8029eb0:	2b00      	cmp	r3, #0
 8029eb2:	d003      	beq.n	8029ebc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8029eb4:	6878      	ldr	r0, [r7, #4]
 8029eb6:	f000 f9ee 	bl	802a296 <HAL_TIM_IC_CaptureCallback>
 8029eba:	e005      	b.n	8029ec8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8029ebc:	6878      	ldr	r0, [r7, #4]
 8029ebe:	f000 f9e0 	bl	802a282 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8029ec2:	6878      	ldr	r0, [r7, #4]
 8029ec4:	f000 f9f1 	bl	802a2aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8029ec8:	687b      	ldr	r3, [r7, #4]
 8029eca:	2200      	movs	r2, #0
 8029ecc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8029ece:	687b      	ldr	r3, [r7, #4]
 8029ed0:	681b      	ldr	r3, [r3, #0]
 8029ed2:	691b      	ldr	r3, [r3, #16]
 8029ed4:	f003 0301 	and.w	r3, r3, #1
 8029ed8:	2b01      	cmp	r3, #1
 8029eda:	d10e      	bne.n	8029efa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8029edc:	687b      	ldr	r3, [r7, #4]
 8029ede:	681b      	ldr	r3, [r3, #0]
 8029ee0:	68db      	ldr	r3, [r3, #12]
 8029ee2:	f003 0301 	and.w	r3, r3, #1
 8029ee6:	2b01      	cmp	r3, #1
 8029ee8:	d107      	bne.n	8029efa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8029eea:	687b      	ldr	r3, [r7, #4]
 8029eec:	681b      	ldr	r3, [r3, #0]
 8029eee:	f06f 0201 	mvn.w	r2, #1
 8029ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8029ef4:	6878      	ldr	r0, [r7, #4]
 8029ef6:	f7f9 fc2b 	bl	8023750 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8029efa:	687b      	ldr	r3, [r7, #4]
 8029efc:	681b      	ldr	r3, [r3, #0]
 8029efe:	691b      	ldr	r3, [r3, #16]
 8029f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029f04:	2b80      	cmp	r3, #128	; 0x80
 8029f06:	d10e      	bne.n	8029f26 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8029f08:	687b      	ldr	r3, [r7, #4]
 8029f0a:	681b      	ldr	r3, [r3, #0]
 8029f0c:	68db      	ldr	r3, [r3, #12]
 8029f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8029f12:	2b80      	cmp	r3, #128	; 0x80
 8029f14:	d107      	bne.n	8029f26 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8029f16:	687b      	ldr	r3, [r7, #4]
 8029f18:	681b      	ldr	r3, [r3, #0]
 8029f1a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8029f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8029f20:	6878      	ldr	r0, [r7, #4]
 8029f22:	f000 fdbf 	bl	802aaa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8029f26:	687b      	ldr	r3, [r7, #4]
 8029f28:	681b      	ldr	r3, [r3, #0]
 8029f2a:	691b      	ldr	r3, [r3, #16]
 8029f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029f30:	2b40      	cmp	r3, #64	; 0x40
 8029f32:	d10e      	bne.n	8029f52 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8029f34:	687b      	ldr	r3, [r7, #4]
 8029f36:	681b      	ldr	r3, [r3, #0]
 8029f38:	68db      	ldr	r3, [r3, #12]
 8029f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8029f3e:	2b40      	cmp	r3, #64	; 0x40
 8029f40:	d107      	bne.n	8029f52 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8029f42:	687b      	ldr	r3, [r7, #4]
 8029f44:	681b      	ldr	r3, [r3, #0]
 8029f46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8029f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8029f4c:	6878      	ldr	r0, [r7, #4]
 8029f4e:	f000 f9b6 	bl	802a2be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8029f52:	687b      	ldr	r3, [r7, #4]
 8029f54:	681b      	ldr	r3, [r3, #0]
 8029f56:	691b      	ldr	r3, [r3, #16]
 8029f58:	f003 0320 	and.w	r3, r3, #32
 8029f5c:	2b20      	cmp	r3, #32
 8029f5e:	d10e      	bne.n	8029f7e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8029f60:	687b      	ldr	r3, [r7, #4]
 8029f62:	681b      	ldr	r3, [r3, #0]
 8029f64:	68db      	ldr	r3, [r3, #12]
 8029f66:	f003 0320 	and.w	r3, r3, #32
 8029f6a:	2b20      	cmp	r3, #32
 8029f6c:	d107      	bne.n	8029f7e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8029f6e:	687b      	ldr	r3, [r7, #4]
 8029f70:	681b      	ldr	r3, [r3, #0]
 8029f72:	f06f 0220 	mvn.w	r2, #32
 8029f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8029f78:	6878      	ldr	r0, [r7, #4]
 8029f7a:	f000 fd89 	bl	802aa90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8029f7e:	bf00      	nop
 8029f80:	3708      	adds	r7, #8
 8029f82:	46bd      	mov	sp, r7
 8029f84:	bd80      	pop	{r7, pc}
	...

08029f88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8029f88:	b580      	push	{r7, lr}
 8029f8a:	b084      	sub	sp, #16
 8029f8c:	af00      	add	r7, sp, #0
 8029f8e:	60f8      	str	r0, [r7, #12]
 8029f90:	60b9      	str	r1, [r7, #8]
 8029f92:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8029f94:	68fb      	ldr	r3, [r7, #12]
 8029f96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8029f9a:	2b01      	cmp	r3, #1
 8029f9c:	d101      	bne.n	8029fa2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8029f9e:	2302      	movs	r3, #2
 8029fa0:	e0b4      	b.n	802a10c <HAL_TIM_PWM_ConfigChannel+0x184>
 8029fa2:	68fb      	ldr	r3, [r7, #12]
 8029fa4:	2201      	movs	r2, #1
 8029fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8029faa:	68fb      	ldr	r3, [r7, #12]
 8029fac:	2202      	movs	r2, #2
 8029fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8029fb2:	687b      	ldr	r3, [r7, #4]
 8029fb4:	2b0c      	cmp	r3, #12
 8029fb6:	f200 809f 	bhi.w	802a0f8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8029fba:	a201      	add	r2, pc, #4	; (adr r2, 8029fc0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8029fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8029fc0:	08029ff5 	.word	0x08029ff5
 8029fc4:	0802a0f9 	.word	0x0802a0f9
 8029fc8:	0802a0f9 	.word	0x0802a0f9
 8029fcc:	0802a0f9 	.word	0x0802a0f9
 8029fd0:	0802a035 	.word	0x0802a035
 8029fd4:	0802a0f9 	.word	0x0802a0f9
 8029fd8:	0802a0f9 	.word	0x0802a0f9
 8029fdc:	0802a0f9 	.word	0x0802a0f9
 8029fe0:	0802a077 	.word	0x0802a077
 8029fe4:	0802a0f9 	.word	0x0802a0f9
 8029fe8:	0802a0f9 	.word	0x0802a0f9
 8029fec:	0802a0f9 	.word	0x0802a0f9
 8029ff0:	0802a0b7 	.word	0x0802a0b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8029ff4:	68fb      	ldr	r3, [r7, #12]
 8029ff6:	681b      	ldr	r3, [r3, #0]
 8029ff8:	68b9      	ldr	r1, [r7, #8]
 8029ffa:	4618      	mov	r0, r3
 8029ffc:	f000 fa0a 	bl	802a414 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 802a000:	68fb      	ldr	r3, [r7, #12]
 802a002:	681b      	ldr	r3, [r3, #0]
 802a004:	699a      	ldr	r2, [r3, #24]
 802a006:	68fb      	ldr	r3, [r7, #12]
 802a008:	681b      	ldr	r3, [r3, #0]
 802a00a:	f042 0208 	orr.w	r2, r2, #8
 802a00e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 802a010:	68fb      	ldr	r3, [r7, #12]
 802a012:	681b      	ldr	r3, [r3, #0]
 802a014:	699a      	ldr	r2, [r3, #24]
 802a016:	68fb      	ldr	r3, [r7, #12]
 802a018:	681b      	ldr	r3, [r3, #0]
 802a01a:	f022 0204 	bic.w	r2, r2, #4
 802a01e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 802a020:	68fb      	ldr	r3, [r7, #12]
 802a022:	681b      	ldr	r3, [r3, #0]
 802a024:	6999      	ldr	r1, [r3, #24]
 802a026:	68bb      	ldr	r3, [r7, #8]
 802a028:	691a      	ldr	r2, [r3, #16]
 802a02a:	68fb      	ldr	r3, [r7, #12]
 802a02c:	681b      	ldr	r3, [r3, #0]
 802a02e:	430a      	orrs	r2, r1
 802a030:	619a      	str	r2, [r3, #24]
      break;
 802a032:	e062      	b.n	802a0fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 802a034:	68fb      	ldr	r3, [r7, #12]
 802a036:	681b      	ldr	r3, [r3, #0]
 802a038:	68b9      	ldr	r1, [r7, #8]
 802a03a:	4618      	mov	r0, r3
 802a03c:	f000 fa5a 	bl	802a4f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 802a040:	68fb      	ldr	r3, [r7, #12]
 802a042:	681b      	ldr	r3, [r3, #0]
 802a044:	699a      	ldr	r2, [r3, #24]
 802a046:	68fb      	ldr	r3, [r7, #12]
 802a048:	681b      	ldr	r3, [r3, #0]
 802a04a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802a04e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 802a050:	68fb      	ldr	r3, [r7, #12]
 802a052:	681b      	ldr	r3, [r3, #0]
 802a054:	699a      	ldr	r2, [r3, #24]
 802a056:	68fb      	ldr	r3, [r7, #12]
 802a058:	681b      	ldr	r3, [r3, #0]
 802a05a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802a05e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 802a060:	68fb      	ldr	r3, [r7, #12]
 802a062:	681b      	ldr	r3, [r3, #0]
 802a064:	6999      	ldr	r1, [r3, #24]
 802a066:	68bb      	ldr	r3, [r7, #8]
 802a068:	691b      	ldr	r3, [r3, #16]
 802a06a:	021a      	lsls	r2, r3, #8
 802a06c:	68fb      	ldr	r3, [r7, #12]
 802a06e:	681b      	ldr	r3, [r3, #0]
 802a070:	430a      	orrs	r2, r1
 802a072:	619a      	str	r2, [r3, #24]
      break;
 802a074:	e041      	b.n	802a0fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 802a076:	68fb      	ldr	r3, [r7, #12]
 802a078:	681b      	ldr	r3, [r3, #0]
 802a07a:	68b9      	ldr	r1, [r7, #8]
 802a07c:	4618      	mov	r0, r3
 802a07e:	f000 faaf 	bl	802a5e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 802a082:	68fb      	ldr	r3, [r7, #12]
 802a084:	681b      	ldr	r3, [r3, #0]
 802a086:	69da      	ldr	r2, [r3, #28]
 802a088:	68fb      	ldr	r3, [r7, #12]
 802a08a:	681b      	ldr	r3, [r3, #0]
 802a08c:	f042 0208 	orr.w	r2, r2, #8
 802a090:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 802a092:	68fb      	ldr	r3, [r7, #12]
 802a094:	681b      	ldr	r3, [r3, #0]
 802a096:	69da      	ldr	r2, [r3, #28]
 802a098:	68fb      	ldr	r3, [r7, #12]
 802a09a:	681b      	ldr	r3, [r3, #0]
 802a09c:	f022 0204 	bic.w	r2, r2, #4
 802a0a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 802a0a2:	68fb      	ldr	r3, [r7, #12]
 802a0a4:	681b      	ldr	r3, [r3, #0]
 802a0a6:	69d9      	ldr	r1, [r3, #28]
 802a0a8:	68bb      	ldr	r3, [r7, #8]
 802a0aa:	691a      	ldr	r2, [r3, #16]
 802a0ac:	68fb      	ldr	r3, [r7, #12]
 802a0ae:	681b      	ldr	r3, [r3, #0]
 802a0b0:	430a      	orrs	r2, r1
 802a0b2:	61da      	str	r2, [r3, #28]
      break;
 802a0b4:	e021      	b.n	802a0fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 802a0b6:	68fb      	ldr	r3, [r7, #12]
 802a0b8:	681b      	ldr	r3, [r3, #0]
 802a0ba:	68b9      	ldr	r1, [r7, #8]
 802a0bc:	4618      	mov	r0, r3
 802a0be:	f000 fb03 	bl	802a6c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 802a0c2:	68fb      	ldr	r3, [r7, #12]
 802a0c4:	681b      	ldr	r3, [r3, #0]
 802a0c6:	69da      	ldr	r2, [r3, #28]
 802a0c8:	68fb      	ldr	r3, [r7, #12]
 802a0ca:	681b      	ldr	r3, [r3, #0]
 802a0cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802a0d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 802a0d2:	68fb      	ldr	r3, [r7, #12]
 802a0d4:	681b      	ldr	r3, [r3, #0]
 802a0d6:	69da      	ldr	r2, [r3, #28]
 802a0d8:	68fb      	ldr	r3, [r7, #12]
 802a0da:	681b      	ldr	r3, [r3, #0]
 802a0dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802a0e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 802a0e2:	68fb      	ldr	r3, [r7, #12]
 802a0e4:	681b      	ldr	r3, [r3, #0]
 802a0e6:	69d9      	ldr	r1, [r3, #28]
 802a0e8:	68bb      	ldr	r3, [r7, #8]
 802a0ea:	691b      	ldr	r3, [r3, #16]
 802a0ec:	021a      	lsls	r2, r3, #8
 802a0ee:	68fb      	ldr	r3, [r7, #12]
 802a0f0:	681b      	ldr	r3, [r3, #0]
 802a0f2:	430a      	orrs	r2, r1
 802a0f4:	61da      	str	r2, [r3, #28]
      break;
 802a0f6:	e000      	b.n	802a0fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 802a0f8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 802a0fa:	68fb      	ldr	r3, [r7, #12]
 802a0fc:	2201      	movs	r2, #1
 802a0fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802a102:	68fb      	ldr	r3, [r7, #12]
 802a104:	2200      	movs	r2, #0
 802a106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802a10a:	2300      	movs	r3, #0
}
 802a10c:	4618      	mov	r0, r3
 802a10e:	3710      	adds	r7, #16
 802a110:	46bd      	mov	sp, r7
 802a112:	bd80      	pop	{r7, pc}

0802a114 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 802a114:	b580      	push	{r7, lr}
 802a116:	b084      	sub	sp, #16
 802a118:	af00      	add	r7, sp, #0
 802a11a:	6078      	str	r0, [r7, #4]
 802a11c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 802a11e:	687b      	ldr	r3, [r7, #4]
 802a120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802a124:	2b01      	cmp	r3, #1
 802a126:	d101      	bne.n	802a12c <HAL_TIM_ConfigClockSource+0x18>
 802a128:	2302      	movs	r3, #2
 802a12a:	e0a6      	b.n	802a27a <HAL_TIM_ConfigClockSource+0x166>
 802a12c:	687b      	ldr	r3, [r7, #4]
 802a12e:	2201      	movs	r2, #1
 802a130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 802a134:	687b      	ldr	r3, [r7, #4]
 802a136:	2202      	movs	r2, #2
 802a138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 802a13c:	687b      	ldr	r3, [r7, #4]
 802a13e:	681b      	ldr	r3, [r3, #0]
 802a140:	689b      	ldr	r3, [r3, #8]
 802a142:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 802a144:	68fb      	ldr	r3, [r7, #12]
 802a146:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 802a14a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802a14c:	68fb      	ldr	r3, [r7, #12]
 802a14e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802a152:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 802a154:	687b      	ldr	r3, [r7, #4]
 802a156:	681b      	ldr	r3, [r3, #0]
 802a158:	68fa      	ldr	r2, [r7, #12]
 802a15a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 802a15c:	683b      	ldr	r3, [r7, #0]
 802a15e:	681b      	ldr	r3, [r3, #0]
 802a160:	2b40      	cmp	r3, #64	; 0x40
 802a162:	d067      	beq.n	802a234 <HAL_TIM_ConfigClockSource+0x120>
 802a164:	2b40      	cmp	r3, #64	; 0x40
 802a166:	d80b      	bhi.n	802a180 <HAL_TIM_ConfigClockSource+0x6c>
 802a168:	2b10      	cmp	r3, #16
 802a16a:	d073      	beq.n	802a254 <HAL_TIM_ConfigClockSource+0x140>
 802a16c:	2b10      	cmp	r3, #16
 802a16e:	d802      	bhi.n	802a176 <HAL_TIM_ConfigClockSource+0x62>
 802a170:	2b00      	cmp	r3, #0
 802a172:	d06f      	beq.n	802a254 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 802a174:	e078      	b.n	802a268 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 802a176:	2b20      	cmp	r3, #32
 802a178:	d06c      	beq.n	802a254 <HAL_TIM_ConfigClockSource+0x140>
 802a17a:	2b30      	cmp	r3, #48	; 0x30
 802a17c:	d06a      	beq.n	802a254 <HAL_TIM_ConfigClockSource+0x140>
      break;
 802a17e:	e073      	b.n	802a268 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 802a180:	2b70      	cmp	r3, #112	; 0x70
 802a182:	d00d      	beq.n	802a1a0 <HAL_TIM_ConfigClockSource+0x8c>
 802a184:	2b70      	cmp	r3, #112	; 0x70
 802a186:	d804      	bhi.n	802a192 <HAL_TIM_ConfigClockSource+0x7e>
 802a188:	2b50      	cmp	r3, #80	; 0x50
 802a18a:	d033      	beq.n	802a1f4 <HAL_TIM_ConfigClockSource+0xe0>
 802a18c:	2b60      	cmp	r3, #96	; 0x60
 802a18e:	d041      	beq.n	802a214 <HAL_TIM_ConfigClockSource+0x100>
      break;
 802a190:	e06a      	b.n	802a268 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 802a192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802a196:	d066      	beq.n	802a266 <HAL_TIM_ConfigClockSource+0x152>
 802a198:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802a19c:	d017      	beq.n	802a1ce <HAL_TIM_ConfigClockSource+0xba>
      break;
 802a19e:	e063      	b.n	802a268 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 802a1a0:	687b      	ldr	r3, [r7, #4]
 802a1a2:	6818      	ldr	r0, [r3, #0]
 802a1a4:	683b      	ldr	r3, [r7, #0]
 802a1a6:	6899      	ldr	r1, [r3, #8]
 802a1a8:	683b      	ldr	r3, [r7, #0]
 802a1aa:	685a      	ldr	r2, [r3, #4]
 802a1ac:	683b      	ldr	r3, [r7, #0]
 802a1ae:	68db      	ldr	r3, [r3, #12]
 802a1b0:	f000 fb5a 	bl	802a868 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 802a1b4:	687b      	ldr	r3, [r7, #4]
 802a1b6:	681b      	ldr	r3, [r3, #0]
 802a1b8:	689b      	ldr	r3, [r3, #8]
 802a1ba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 802a1bc:	68fb      	ldr	r3, [r7, #12]
 802a1be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 802a1c2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 802a1c4:	687b      	ldr	r3, [r7, #4]
 802a1c6:	681b      	ldr	r3, [r3, #0]
 802a1c8:	68fa      	ldr	r2, [r7, #12]
 802a1ca:	609a      	str	r2, [r3, #8]
      break;
 802a1cc:	e04c      	b.n	802a268 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 802a1ce:	687b      	ldr	r3, [r7, #4]
 802a1d0:	6818      	ldr	r0, [r3, #0]
 802a1d2:	683b      	ldr	r3, [r7, #0]
 802a1d4:	6899      	ldr	r1, [r3, #8]
 802a1d6:	683b      	ldr	r3, [r7, #0]
 802a1d8:	685a      	ldr	r2, [r3, #4]
 802a1da:	683b      	ldr	r3, [r7, #0]
 802a1dc:	68db      	ldr	r3, [r3, #12]
 802a1de:	f000 fb43 	bl	802a868 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 802a1e2:	687b      	ldr	r3, [r7, #4]
 802a1e4:	681b      	ldr	r3, [r3, #0]
 802a1e6:	689a      	ldr	r2, [r3, #8]
 802a1e8:	687b      	ldr	r3, [r7, #4]
 802a1ea:	681b      	ldr	r3, [r3, #0]
 802a1ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 802a1f0:	609a      	str	r2, [r3, #8]
      break;
 802a1f2:	e039      	b.n	802a268 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 802a1f4:	687b      	ldr	r3, [r7, #4]
 802a1f6:	6818      	ldr	r0, [r3, #0]
 802a1f8:	683b      	ldr	r3, [r7, #0]
 802a1fa:	6859      	ldr	r1, [r3, #4]
 802a1fc:	683b      	ldr	r3, [r7, #0]
 802a1fe:	68db      	ldr	r3, [r3, #12]
 802a200:	461a      	mov	r2, r3
 802a202:	f000 fab7 	bl	802a774 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 802a206:	687b      	ldr	r3, [r7, #4]
 802a208:	681b      	ldr	r3, [r3, #0]
 802a20a:	2150      	movs	r1, #80	; 0x50
 802a20c:	4618      	mov	r0, r3
 802a20e:	f000 fb10 	bl	802a832 <TIM_ITRx_SetConfig>
      break;
 802a212:	e029      	b.n	802a268 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 802a214:	687b      	ldr	r3, [r7, #4]
 802a216:	6818      	ldr	r0, [r3, #0]
 802a218:	683b      	ldr	r3, [r7, #0]
 802a21a:	6859      	ldr	r1, [r3, #4]
 802a21c:	683b      	ldr	r3, [r7, #0]
 802a21e:	68db      	ldr	r3, [r3, #12]
 802a220:	461a      	mov	r2, r3
 802a222:	f000 fad6 	bl	802a7d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 802a226:	687b      	ldr	r3, [r7, #4]
 802a228:	681b      	ldr	r3, [r3, #0]
 802a22a:	2160      	movs	r1, #96	; 0x60
 802a22c:	4618      	mov	r0, r3
 802a22e:	f000 fb00 	bl	802a832 <TIM_ITRx_SetConfig>
      break;
 802a232:	e019      	b.n	802a268 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 802a234:	687b      	ldr	r3, [r7, #4]
 802a236:	6818      	ldr	r0, [r3, #0]
 802a238:	683b      	ldr	r3, [r7, #0]
 802a23a:	6859      	ldr	r1, [r3, #4]
 802a23c:	683b      	ldr	r3, [r7, #0]
 802a23e:	68db      	ldr	r3, [r3, #12]
 802a240:	461a      	mov	r2, r3
 802a242:	f000 fa97 	bl	802a774 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 802a246:	687b      	ldr	r3, [r7, #4]
 802a248:	681b      	ldr	r3, [r3, #0]
 802a24a:	2140      	movs	r1, #64	; 0x40
 802a24c:	4618      	mov	r0, r3
 802a24e:	f000 faf0 	bl	802a832 <TIM_ITRx_SetConfig>
      break;
 802a252:	e009      	b.n	802a268 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 802a254:	687b      	ldr	r3, [r7, #4]
 802a256:	681a      	ldr	r2, [r3, #0]
 802a258:	683b      	ldr	r3, [r7, #0]
 802a25a:	681b      	ldr	r3, [r3, #0]
 802a25c:	4619      	mov	r1, r3
 802a25e:	4610      	mov	r0, r2
 802a260:	f000 fae7 	bl	802a832 <TIM_ITRx_SetConfig>
      break;
 802a264:	e000      	b.n	802a268 <HAL_TIM_ConfigClockSource+0x154>
      break;
 802a266:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 802a268:	687b      	ldr	r3, [r7, #4]
 802a26a:	2201      	movs	r2, #1
 802a26c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802a270:	687b      	ldr	r3, [r7, #4]
 802a272:	2200      	movs	r2, #0
 802a274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802a278:	2300      	movs	r3, #0
}
 802a27a:	4618      	mov	r0, r3
 802a27c:	3710      	adds	r7, #16
 802a27e:	46bd      	mov	sp, r7
 802a280:	bd80      	pop	{r7, pc}

0802a282 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 802a282:	b480      	push	{r7}
 802a284:	b083      	sub	sp, #12
 802a286:	af00      	add	r7, sp, #0
 802a288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 802a28a:	bf00      	nop
 802a28c:	370c      	adds	r7, #12
 802a28e:	46bd      	mov	sp, r7
 802a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a294:	4770      	bx	lr

0802a296 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 802a296:	b480      	push	{r7}
 802a298:	b083      	sub	sp, #12
 802a29a:	af00      	add	r7, sp, #0
 802a29c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 802a29e:	bf00      	nop
 802a2a0:	370c      	adds	r7, #12
 802a2a2:	46bd      	mov	sp, r7
 802a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a2a8:	4770      	bx	lr

0802a2aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 802a2aa:	b480      	push	{r7}
 802a2ac:	b083      	sub	sp, #12
 802a2ae:	af00      	add	r7, sp, #0
 802a2b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 802a2b2:	bf00      	nop
 802a2b4:	370c      	adds	r7, #12
 802a2b6:	46bd      	mov	sp, r7
 802a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a2bc:	4770      	bx	lr

0802a2be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 802a2be:	b480      	push	{r7}
 802a2c0:	b083      	sub	sp, #12
 802a2c2:	af00      	add	r7, sp, #0
 802a2c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 802a2c6:	bf00      	nop
 802a2c8:	370c      	adds	r7, #12
 802a2ca:	46bd      	mov	sp, r7
 802a2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a2d0:	4770      	bx	lr
	...

0802a2d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 802a2d4:	b480      	push	{r7}
 802a2d6:	b085      	sub	sp, #20
 802a2d8:	af00      	add	r7, sp, #0
 802a2da:	6078      	str	r0, [r7, #4]
 802a2dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 802a2de:	687b      	ldr	r3, [r7, #4]
 802a2e0:	681b      	ldr	r3, [r3, #0]
 802a2e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 802a2e4:	687b      	ldr	r3, [r7, #4]
 802a2e6:	4a40      	ldr	r2, [pc, #256]	; (802a3e8 <TIM_Base_SetConfig+0x114>)
 802a2e8:	4293      	cmp	r3, r2
 802a2ea:	d013      	beq.n	802a314 <TIM_Base_SetConfig+0x40>
 802a2ec:	687b      	ldr	r3, [r7, #4]
 802a2ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802a2f2:	d00f      	beq.n	802a314 <TIM_Base_SetConfig+0x40>
 802a2f4:	687b      	ldr	r3, [r7, #4]
 802a2f6:	4a3d      	ldr	r2, [pc, #244]	; (802a3ec <TIM_Base_SetConfig+0x118>)
 802a2f8:	4293      	cmp	r3, r2
 802a2fa:	d00b      	beq.n	802a314 <TIM_Base_SetConfig+0x40>
 802a2fc:	687b      	ldr	r3, [r7, #4]
 802a2fe:	4a3c      	ldr	r2, [pc, #240]	; (802a3f0 <TIM_Base_SetConfig+0x11c>)
 802a300:	4293      	cmp	r3, r2
 802a302:	d007      	beq.n	802a314 <TIM_Base_SetConfig+0x40>
 802a304:	687b      	ldr	r3, [r7, #4]
 802a306:	4a3b      	ldr	r2, [pc, #236]	; (802a3f4 <TIM_Base_SetConfig+0x120>)
 802a308:	4293      	cmp	r3, r2
 802a30a:	d003      	beq.n	802a314 <TIM_Base_SetConfig+0x40>
 802a30c:	687b      	ldr	r3, [r7, #4]
 802a30e:	4a3a      	ldr	r2, [pc, #232]	; (802a3f8 <TIM_Base_SetConfig+0x124>)
 802a310:	4293      	cmp	r3, r2
 802a312:	d108      	bne.n	802a326 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 802a314:	68fb      	ldr	r3, [r7, #12]
 802a316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a31a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 802a31c:	683b      	ldr	r3, [r7, #0]
 802a31e:	685b      	ldr	r3, [r3, #4]
 802a320:	68fa      	ldr	r2, [r7, #12]
 802a322:	4313      	orrs	r3, r2
 802a324:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802a326:	687b      	ldr	r3, [r7, #4]
 802a328:	4a2f      	ldr	r2, [pc, #188]	; (802a3e8 <TIM_Base_SetConfig+0x114>)
 802a32a:	4293      	cmp	r3, r2
 802a32c:	d02b      	beq.n	802a386 <TIM_Base_SetConfig+0xb2>
 802a32e:	687b      	ldr	r3, [r7, #4]
 802a330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802a334:	d027      	beq.n	802a386 <TIM_Base_SetConfig+0xb2>
 802a336:	687b      	ldr	r3, [r7, #4]
 802a338:	4a2c      	ldr	r2, [pc, #176]	; (802a3ec <TIM_Base_SetConfig+0x118>)
 802a33a:	4293      	cmp	r3, r2
 802a33c:	d023      	beq.n	802a386 <TIM_Base_SetConfig+0xb2>
 802a33e:	687b      	ldr	r3, [r7, #4]
 802a340:	4a2b      	ldr	r2, [pc, #172]	; (802a3f0 <TIM_Base_SetConfig+0x11c>)
 802a342:	4293      	cmp	r3, r2
 802a344:	d01f      	beq.n	802a386 <TIM_Base_SetConfig+0xb2>
 802a346:	687b      	ldr	r3, [r7, #4]
 802a348:	4a2a      	ldr	r2, [pc, #168]	; (802a3f4 <TIM_Base_SetConfig+0x120>)
 802a34a:	4293      	cmp	r3, r2
 802a34c:	d01b      	beq.n	802a386 <TIM_Base_SetConfig+0xb2>
 802a34e:	687b      	ldr	r3, [r7, #4]
 802a350:	4a29      	ldr	r2, [pc, #164]	; (802a3f8 <TIM_Base_SetConfig+0x124>)
 802a352:	4293      	cmp	r3, r2
 802a354:	d017      	beq.n	802a386 <TIM_Base_SetConfig+0xb2>
 802a356:	687b      	ldr	r3, [r7, #4]
 802a358:	4a28      	ldr	r2, [pc, #160]	; (802a3fc <TIM_Base_SetConfig+0x128>)
 802a35a:	4293      	cmp	r3, r2
 802a35c:	d013      	beq.n	802a386 <TIM_Base_SetConfig+0xb2>
 802a35e:	687b      	ldr	r3, [r7, #4]
 802a360:	4a27      	ldr	r2, [pc, #156]	; (802a400 <TIM_Base_SetConfig+0x12c>)
 802a362:	4293      	cmp	r3, r2
 802a364:	d00f      	beq.n	802a386 <TIM_Base_SetConfig+0xb2>
 802a366:	687b      	ldr	r3, [r7, #4]
 802a368:	4a26      	ldr	r2, [pc, #152]	; (802a404 <TIM_Base_SetConfig+0x130>)
 802a36a:	4293      	cmp	r3, r2
 802a36c:	d00b      	beq.n	802a386 <TIM_Base_SetConfig+0xb2>
 802a36e:	687b      	ldr	r3, [r7, #4]
 802a370:	4a25      	ldr	r2, [pc, #148]	; (802a408 <TIM_Base_SetConfig+0x134>)
 802a372:	4293      	cmp	r3, r2
 802a374:	d007      	beq.n	802a386 <TIM_Base_SetConfig+0xb2>
 802a376:	687b      	ldr	r3, [r7, #4]
 802a378:	4a24      	ldr	r2, [pc, #144]	; (802a40c <TIM_Base_SetConfig+0x138>)
 802a37a:	4293      	cmp	r3, r2
 802a37c:	d003      	beq.n	802a386 <TIM_Base_SetConfig+0xb2>
 802a37e:	687b      	ldr	r3, [r7, #4]
 802a380:	4a23      	ldr	r2, [pc, #140]	; (802a410 <TIM_Base_SetConfig+0x13c>)
 802a382:	4293      	cmp	r3, r2
 802a384:	d108      	bne.n	802a398 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 802a386:	68fb      	ldr	r3, [r7, #12]
 802a388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a38c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802a38e:	683b      	ldr	r3, [r7, #0]
 802a390:	68db      	ldr	r3, [r3, #12]
 802a392:	68fa      	ldr	r2, [r7, #12]
 802a394:	4313      	orrs	r3, r2
 802a396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 802a398:	68fb      	ldr	r3, [r7, #12]
 802a39a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802a39e:	683b      	ldr	r3, [r7, #0]
 802a3a0:	695b      	ldr	r3, [r3, #20]
 802a3a2:	4313      	orrs	r3, r2
 802a3a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 802a3a6:	687b      	ldr	r3, [r7, #4]
 802a3a8:	68fa      	ldr	r2, [r7, #12]
 802a3aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 802a3ac:	683b      	ldr	r3, [r7, #0]
 802a3ae:	689a      	ldr	r2, [r3, #8]
 802a3b0:	687b      	ldr	r3, [r7, #4]
 802a3b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 802a3b4:	683b      	ldr	r3, [r7, #0]
 802a3b6:	681a      	ldr	r2, [r3, #0]
 802a3b8:	687b      	ldr	r3, [r7, #4]
 802a3ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 802a3bc:	687b      	ldr	r3, [r7, #4]
 802a3be:	4a0a      	ldr	r2, [pc, #40]	; (802a3e8 <TIM_Base_SetConfig+0x114>)
 802a3c0:	4293      	cmp	r3, r2
 802a3c2:	d003      	beq.n	802a3cc <TIM_Base_SetConfig+0xf8>
 802a3c4:	687b      	ldr	r3, [r7, #4]
 802a3c6:	4a0c      	ldr	r2, [pc, #48]	; (802a3f8 <TIM_Base_SetConfig+0x124>)
 802a3c8:	4293      	cmp	r3, r2
 802a3ca:	d103      	bne.n	802a3d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 802a3cc:	683b      	ldr	r3, [r7, #0]
 802a3ce:	691a      	ldr	r2, [r3, #16]
 802a3d0:	687b      	ldr	r3, [r7, #4]
 802a3d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 802a3d4:	687b      	ldr	r3, [r7, #4]
 802a3d6:	2201      	movs	r2, #1
 802a3d8:	615a      	str	r2, [r3, #20]
}
 802a3da:	bf00      	nop
 802a3dc:	3714      	adds	r7, #20
 802a3de:	46bd      	mov	sp, r7
 802a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a3e4:	4770      	bx	lr
 802a3e6:	bf00      	nop
 802a3e8:	40010000 	.word	0x40010000
 802a3ec:	40000400 	.word	0x40000400
 802a3f0:	40000800 	.word	0x40000800
 802a3f4:	40000c00 	.word	0x40000c00
 802a3f8:	40010400 	.word	0x40010400
 802a3fc:	40014000 	.word	0x40014000
 802a400:	40014400 	.word	0x40014400
 802a404:	40014800 	.word	0x40014800
 802a408:	40001800 	.word	0x40001800
 802a40c:	40001c00 	.word	0x40001c00
 802a410:	40002000 	.word	0x40002000

0802a414 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802a414:	b480      	push	{r7}
 802a416:	b087      	sub	sp, #28
 802a418:	af00      	add	r7, sp, #0
 802a41a:	6078      	str	r0, [r7, #4]
 802a41c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802a41e:	687b      	ldr	r3, [r7, #4]
 802a420:	6a1b      	ldr	r3, [r3, #32]
 802a422:	f023 0201 	bic.w	r2, r3, #1
 802a426:	687b      	ldr	r3, [r7, #4]
 802a428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802a42a:	687b      	ldr	r3, [r7, #4]
 802a42c:	6a1b      	ldr	r3, [r3, #32]
 802a42e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802a430:	687b      	ldr	r3, [r7, #4]
 802a432:	685b      	ldr	r3, [r3, #4]
 802a434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 802a436:	687b      	ldr	r3, [r7, #4]
 802a438:	699b      	ldr	r3, [r3, #24]
 802a43a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 802a43c:	68fb      	ldr	r3, [r7, #12]
 802a43e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 802a444:	68fb      	ldr	r3, [r7, #12]
 802a446:	f023 0303 	bic.w	r3, r3, #3
 802a44a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 802a44c:	683b      	ldr	r3, [r7, #0]
 802a44e:	681b      	ldr	r3, [r3, #0]
 802a450:	68fa      	ldr	r2, [r7, #12]
 802a452:	4313      	orrs	r3, r2
 802a454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 802a456:	697b      	ldr	r3, [r7, #20]
 802a458:	f023 0302 	bic.w	r3, r3, #2
 802a45c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 802a45e:	683b      	ldr	r3, [r7, #0]
 802a460:	689b      	ldr	r3, [r3, #8]
 802a462:	697a      	ldr	r2, [r7, #20]
 802a464:	4313      	orrs	r3, r2
 802a466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 802a468:	687b      	ldr	r3, [r7, #4]
 802a46a:	4a20      	ldr	r2, [pc, #128]	; (802a4ec <TIM_OC1_SetConfig+0xd8>)
 802a46c:	4293      	cmp	r3, r2
 802a46e:	d003      	beq.n	802a478 <TIM_OC1_SetConfig+0x64>
 802a470:	687b      	ldr	r3, [r7, #4]
 802a472:	4a1f      	ldr	r2, [pc, #124]	; (802a4f0 <TIM_OC1_SetConfig+0xdc>)
 802a474:	4293      	cmp	r3, r2
 802a476:	d10c      	bne.n	802a492 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 802a478:	697b      	ldr	r3, [r7, #20]
 802a47a:	f023 0308 	bic.w	r3, r3, #8
 802a47e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 802a480:	683b      	ldr	r3, [r7, #0]
 802a482:	68db      	ldr	r3, [r3, #12]
 802a484:	697a      	ldr	r2, [r7, #20]
 802a486:	4313      	orrs	r3, r2
 802a488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 802a48a:	697b      	ldr	r3, [r7, #20]
 802a48c:	f023 0304 	bic.w	r3, r3, #4
 802a490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802a492:	687b      	ldr	r3, [r7, #4]
 802a494:	4a15      	ldr	r2, [pc, #84]	; (802a4ec <TIM_OC1_SetConfig+0xd8>)
 802a496:	4293      	cmp	r3, r2
 802a498:	d003      	beq.n	802a4a2 <TIM_OC1_SetConfig+0x8e>
 802a49a:	687b      	ldr	r3, [r7, #4]
 802a49c:	4a14      	ldr	r2, [pc, #80]	; (802a4f0 <TIM_OC1_SetConfig+0xdc>)
 802a49e:	4293      	cmp	r3, r2
 802a4a0:	d111      	bne.n	802a4c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 802a4a2:	693b      	ldr	r3, [r7, #16]
 802a4a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802a4a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 802a4aa:	693b      	ldr	r3, [r7, #16]
 802a4ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 802a4b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 802a4b2:	683b      	ldr	r3, [r7, #0]
 802a4b4:	695b      	ldr	r3, [r3, #20]
 802a4b6:	693a      	ldr	r2, [r7, #16]
 802a4b8:	4313      	orrs	r3, r2
 802a4ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 802a4bc:	683b      	ldr	r3, [r7, #0]
 802a4be:	699b      	ldr	r3, [r3, #24]
 802a4c0:	693a      	ldr	r2, [r7, #16]
 802a4c2:	4313      	orrs	r3, r2
 802a4c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802a4c6:	687b      	ldr	r3, [r7, #4]
 802a4c8:	693a      	ldr	r2, [r7, #16]
 802a4ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 802a4cc:	687b      	ldr	r3, [r7, #4]
 802a4ce:	68fa      	ldr	r2, [r7, #12]
 802a4d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 802a4d2:	683b      	ldr	r3, [r7, #0]
 802a4d4:	685a      	ldr	r2, [r3, #4]
 802a4d6:	687b      	ldr	r3, [r7, #4]
 802a4d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802a4da:	687b      	ldr	r3, [r7, #4]
 802a4dc:	697a      	ldr	r2, [r7, #20]
 802a4de:	621a      	str	r2, [r3, #32]
}
 802a4e0:	bf00      	nop
 802a4e2:	371c      	adds	r7, #28
 802a4e4:	46bd      	mov	sp, r7
 802a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a4ea:	4770      	bx	lr
 802a4ec:	40010000 	.word	0x40010000
 802a4f0:	40010400 	.word	0x40010400

0802a4f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802a4f4:	b480      	push	{r7}
 802a4f6:	b087      	sub	sp, #28
 802a4f8:	af00      	add	r7, sp, #0
 802a4fa:	6078      	str	r0, [r7, #4]
 802a4fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802a4fe:	687b      	ldr	r3, [r7, #4]
 802a500:	6a1b      	ldr	r3, [r3, #32]
 802a502:	f023 0210 	bic.w	r2, r3, #16
 802a506:	687b      	ldr	r3, [r7, #4]
 802a508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802a50a:	687b      	ldr	r3, [r7, #4]
 802a50c:	6a1b      	ldr	r3, [r3, #32]
 802a50e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802a510:	687b      	ldr	r3, [r7, #4]
 802a512:	685b      	ldr	r3, [r3, #4]
 802a514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 802a516:	687b      	ldr	r3, [r7, #4]
 802a518:	699b      	ldr	r3, [r3, #24]
 802a51a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 802a51c:	68fb      	ldr	r3, [r7, #12]
 802a51e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802a522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 802a524:	68fb      	ldr	r3, [r7, #12]
 802a526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a52a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 802a52c:	683b      	ldr	r3, [r7, #0]
 802a52e:	681b      	ldr	r3, [r3, #0]
 802a530:	021b      	lsls	r3, r3, #8
 802a532:	68fa      	ldr	r2, [r7, #12]
 802a534:	4313      	orrs	r3, r2
 802a536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 802a538:	697b      	ldr	r3, [r7, #20]
 802a53a:	f023 0320 	bic.w	r3, r3, #32
 802a53e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 802a540:	683b      	ldr	r3, [r7, #0]
 802a542:	689b      	ldr	r3, [r3, #8]
 802a544:	011b      	lsls	r3, r3, #4
 802a546:	697a      	ldr	r2, [r7, #20]
 802a548:	4313      	orrs	r3, r2
 802a54a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 802a54c:	687b      	ldr	r3, [r7, #4]
 802a54e:	4a22      	ldr	r2, [pc, #136]	; (802a5d8 <TIM_OC2_SetConfig+0xe4>)
 802a550:	4293      	cmp	r3, r2
 802a552:	d003      	beq.n	802a55c <TIM_OC2_SetConfig+0x68>
 802a554:	687b      	ldr	r3, [r7, #4]
 802a556:	4a21      	ldr	r2, [pc, #132]	; (802a5dc <TIM_OC2_SetConfig+0xe8>)
 802a558:	4293      	cmp	r3, r2
 802a55a:	d10d      	bne.n	802a578 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 802a55c:	697b      	ldr	r3, [r7, #20]
 802a55e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802a562:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 802a564:	683b      	ldr	r3, [r7, #0]
 802a566:	68db      	ldr	r3, [r3, #12]
 802a568:	011b      	lsls	r3, r3, #4
 802a56a:	697a      	ldr	r2, [r7, #20]
 802a56c:	4313      	orrs	r3, r2
 802a56e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 802a570:	697b      	ldr	r3, [r7, #20]
 802a572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 802a576:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802a578:	687b      	ldr	r3, [r7, #4]
 802a57a:	4a17      	ldr	r2, [pc, #92]	; (802a5d8 <TIM_OC2_SetConfig+0xe4>)
 802a57c:	4293      	cmp	r3, r2
 802a57e:	d003      	beq.n	802a588 <TIM_OC2_SetConfig+0x94>
 802a580:	687b      	ldr	r3, [r7, #4]
 802a582:	4a16      	ldr	r2, [pc, #88]	; (802a5dc <TIM_OC2_SetConfig+0xe8>)
 802a584:	4293      	cmp	r3, r2
 802a586:	d113      	bne.n	802a5b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 802a588:	693b      	ldr	r3, [r7, #16]
 802a58a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 802a58e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 802a590:	693b      	ldr	r3, [r7, #16]
 802a592:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802a596:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 802a598:	683b      	ldr	r3, [r7, #0]
 802a59a:	695b      	ldr	r3, [r3, #20]
 802a59c:	009b      	lsls	r3, r3, #2
 802a59e:	693a      	ldr	r2, [r7, #16]
 802a5a0:	4313      	orrs	r3, r2
 802a5a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 802a5a4:	683b      	ldr	r3, [r7, #0]
 802a5a6:	699b      	ldr	r3, [r3, #24]
 802a5a8:	009b      	lsls	r3, r3, #2
 802a5aa:	693a      	ldr	r2, [r7, #16]
 802a5ac:	4313      	orrs	r3, r2
 802a5ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802a5b0:	687b      	ldr	r3, [r7, #4]
 802a5b2:	693a      	ldr	r2, [r7, #16]
 802a5b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 802a5b6:	687b      	ldr	r3, [r7, #4]
 802a5b8:	68fa      	ldr	r2, [r7, #12]
 802a5ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 802a5bc:	683b      	ldr	r3, [r7, #0]
 802a5be:	685a      	ldr	r2, [r3, #4]
 802a5c0:	687b      	ldr	r3, [r7, #4]
 802a5c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802a5c4:	687b      	ldr	r3, [r7, #4]
 802a5c6:	697a      	ldr	r2, [r7, #20]
 802a5c8:	621a      	str	r2, [r3, #32]
}
 802a5ca:	bf00      	nop
 802a5cc:	371c      	adds	r7, #28
 802a5ce:	46bd      	mov	sp, r7
 802a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a5d4:	4770      	bx	lr
 802a5d6:	bf00      	nop
 802a5d8:	40010000 	.word	0x40010000
 802a5dc:	40010400 	.word	0x40010400

0802a5e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802a5e0:	b480      	push	{r7}
 802a5e2:	b087      	sub	sp, #28
 802a5e4:	af00      	add	r7, sp, #0
 802a5e6:	6078      	str	r0, [r7, #4]
 802a5e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 802a5ea:	687b      	ldr	r3, [r7, #4]
 802a5ec:	6a1b      	ldr	r3, [r3, #32]
 802a5ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 802a5f2:	687b      	ldr	r3, [r7, #4]
 802a5f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802a5f6:	687b      	ldr	r3, [r7, #4]
 802a5f8:	6a1b      	ldr	r3, [r3, #32]
 802a5fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802a5fc:	687b      	ldr	r3, [r7, #4]
 802a5fe:	685b      	ldr	r3, [r3, #4]
 802a600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802a602:	687b      	ldr	r3, [r7, #4]
 802a604:	69db      	ldr	r3, [r3, #28]
 802a606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 802a608:	68fb      	ldr	r3, [r7, #12]
 802a60a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a60e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 802a610:	68fb      	ldr	r3, [r7, #12]
 802a612:	f023 0303 	bic.w	r3, r3, #3
 802a616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 802a618:	683b      	ldr	r3, [r7, #0]
 802a61a:	681b      	ldr	r3, [r3, #0]
 802a61c:	68fa      	ldr	r2, [r7, #12]
 802a61e:	4313      	orrs	r3, r2
 802a620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 802a622:	697b      	ldr	r3, [r7, #20]
 802a624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 802a628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 802a62a:	683b      	ldr	r3, [r7, #0]
 802a62c:	689b      	ldr	r3, [r3, #8]
 802a62e:	021b      	lsls	r3, r3, #8
 802a630:	697a      	ldr	r2, [r7, #20]
 802a632:	4313      	orrs	r3, r2
 802a634:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 802a636:	687b      	ldr	r3, [r7, #4]
 802a638:	4a21      	ldr	r2, [pc, #132]	; (802a6c0 <TIM_OC3_SetConfig+0xe0>)
 802a63a:	4293      	cmp	r3, r2
 802a63c:	d003      	beq.n	802a646 <TIM_OC3_SetConfig+0x66>
 802a63e:	687b      	ldr	r3, [r7, #4]
 802a640:	4a20      	ldr	r2, [pc, #128]	; (802a6c4 <TIM_OC3_SetConfig+0xe4>)
 802a642:	4293      	cmp	r3, r2
 802a644:	d10d      	bne.n	802a662 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 802a646:	697b      	ldr	r3, [r7, #20]
 802a648:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802a64c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 802a64e:	683b      	ldr	r3, [r7, #0]
 802a650:	68db      	ldr	r3, [r3, #12]
 802a652:	021b      	lsls	r3, r3, #8
 802a654:	697a      	ldr	r2, [r7, #20]
 802a656:	4313      	orrs	r3, r2
 802a658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 802a65a:	697b      	ldr	r3, [r7, #20]
 802a65c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 802a660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802a662:	687b      	ldr	r3, [r7, #4]
 802a664:	4a16      	ldr	r2, [pc, #88]	; (802a6c0 <TIM_OC3_SetConfig+0xe0>)
 802a666:	4293      	cmp	r3, r2
 802a668:	d003      	beq.n	802a672 <TIM_OC3_SetConfig+0x92>
 802a66a:	687b      	ldr	r3, [r7, #4]
 802a66c:	4a15      	ldr	r2, [pc, #84]	; (802a6c4 <TIM_OC3_SetConfig+0xe4>)
 802a66e:	4293      	cmp	r3, r2
 802a670:	d113      	bne.n	802a69a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 802a672:	693b      	ldr	r3, [r7, #16]
 802a674:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802a678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 802a67a:	693b      	ldr	r3, [r7, #16]
 802a67c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802a680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 802a682:	683b      	ldr	r3, [r7, #0]
 802a684:	695b      	ldr	r3, [r3, #20]
 802a686:	011b      	lsls	r3, r3, #4
 802a688:	693a      	ldr	r2, [r7, #16]
 802a68a:	4313      	orrs	r3, r2
 802a68c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 802a68e:	683b      	ldr	r3, [r7, #0]
 802a690:	699b      	ldr	r3, [r3, #24]
 802a692:	011b      	lsls	r3, r3, #4
 802a694:	693a      	ldr	r2, [r7, #16]
 802a696:	4313      	orrs	r3, r2
 802a698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802a69a:	687b      	ldr	r3, [r7, #4]
 802a69c:	693a      	ldr	r2, [r7, #16]
 802a69e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802a6a0:	687b      	ldr	r3, [r7, #4]
 802a6a2:	68fa      	ldr	r2, [r7, #12]
 802a6a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 802a6a6:	683b      	ldr	r3, [r7, #0]
 802a6a8:	685a      	ldr	r2, [r3, #4]
 802a6aa:	687b      	ldr	r3, [r7, #4]
 802a6ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802a6ae:	687b      	ldr	r3, [r7, #4]
 802a6b0:	697a      	ldr	r2, [r7, #20]
 802a6b2:	621a      	str	r2, [r3, #32]
}
 802a6b4:	bf00      	nop
 802a6b6:	371c      	adds	r7, #28
 802a6b8:	46bd      	mov	sp, r7
 802a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a6be:	4770      	bx	lr
 802a6c0:	40010000 	.word	0x40010000
 802a6c4:	40010400 	.word	0x40010400

0802a6c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 802a6c8:	b480      	push	{r7}
 802a6ca:	b087      	sub	sp, #28
 802a6cc:	af00      	add	r7, sp, #0
 802a6ce:	6078      	str	r0, [r7, #4]
 802a6d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 802a6d2:	687b      	ldr	r3, [r7, #4]
 802a6d4:	6a1b      	ldr	r3, [r3, #32]
 802a6d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802a6da:	687b      	ldr	r3, [r7, #4]
 802a6dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802a6de:	687b      	ldr	r3, [r7, #4]
 802a6e0:	6a1b      	ldr	r3, [r3, #32]
 802a6e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802a6e4:	687b      	ldr	r3, [r7, #4]
 802a6e6:	685b      	ldr	r3, [r3, #4]
 802a6e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802a6ea:	687b      	ldr	r3, [r7, #4]
 802a6ec:	69db      	ldr	r3, [r3, #28]
 802a6ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 802a6f0:	68fb      	ldr	r3, [r7, #12]
 802a6f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802a6f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 802a6f8:	68fb      	ldr	r3, [r7, #12]
 802a6fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802a6fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 802a700:	683b      	ldr	r3, [r7, #0]
 802a702:	681b      	ldr	r3, [r3, #0]
 802a704:	021b      	lsls	r3, r3, #8
 802a706:	68fa      	ldr	r2, [r7, #12]
 802a708:	4313      	orrs	r3, r2
 802a70a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 802a70c:	693b      	ldr	r3, [r7, #16]
 802a70e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 802a712:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 802a714:	683b      	ldr	r3, [r7, #0]
 802a716:	689b      	ldr	r3, [r3, #8]
 802a718:	031b      	lsls	r3, r3, #12
 802a71a:	693a      	ldr	r2, [r7, #16]
 802a71c:	4313      	orrs	r3, r2
 802a71e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802a720:	687b      	ldr	r3, [r7, #4]
 802a722:	4a12      	ldr	r2, [pc, #72]	; (802a76c <TIM_OC4_SetConfig+0xa4>)
 802a724:	4293      	cmp	r3, r2
 802a726:	d003      	beq.n	802a730 <TIM_OC4_SetConfig+0x68>
 802a728:	687b      	ldr	r3, [r7, #4]
 802a72a:	4a11      	ldr	r2, [pc, #68]	; (802a770 <TIM_OC4_SetConfig+0xa8>)
 802a72c:	4293      	cmp	r3, r2
 802a72e:	d109      	bne.n	802a744 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 802a730:	697b      	ldr	r3, [r7, #20]
 802a732:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 802a736:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 802a738:	683b      	ldr	r3, [r7, #0]
 802a73a:	695b      	ldr	r3, [r3, #20]
 802a73c:	019b      	lsls	r3, r3, #6
 802a73e:	697a      	ldr	r2, [r7, #20]
 802a740:	4313      	orrs	r3, r2
 802a742:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802a744:	687b      	ldr	r3, [r7, #4]
 802a746:	697a      	ldr	r2, [r7, #20]
 802a748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802a74a:	687b      	ldr	r3, [r7, #4]
 802a74c:	68fa      	ldr	r2, [r7, #12]
 802a74e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 802a750:	683b      	ldr	r3, [r7, #0]
 802a752:	685a      	ldr	r2, [r3, #4]
 802a754:	687b      	ldr	r3, [r7, #4]
 802a756:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802a758:	687b      	ldr	r3, [r7, #4]
 802a75a:	693a      	ldr	r2, [r7, #16]
 802a75c:	621a      	str	r2, [r3, #32]
}
 802a75e:	bf00      	nop
 802a760:	371c      	adds	r7, #28
 802a762:	46bd      	mov	sp, r7
 802a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a768:	4770      	bx	lr
 802a76a:	bf00      	nop
 802a76c:	40010000 	.word	0x40010000
 802a770:	40010400 	.word	0x40010400

0802a774 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802a774:	b480      	push	{r7}
 802a776:	b087      	sub	sp, #28
 802a778:	af00      	add	r7, sp, #0
 802a77a:	60f8      	str	r0, [r7, #12]
 802a77c:	60b9      	str	r1, [r7, #8]
 802a77e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 802a780:	68fb      	ldr	r3, [r7, #12]
 802a782:	6a1b      	ldr	r3, [r3, #32]
 802a784:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802a786:	68fb      	ldr	r3, [r7, #12]
 802a788:	6a1b      	ldr	r3, [r3, #32]
 802a78a:	f023 0201 	bic.w	r2, r3, #1
 802a78e:	68fb      	ldr	r3, [r7, #12]
 802a790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802a792:	68fb      	ldr	r3, [r7, #12]
 802a794:	699b      	ldr	r3, [r3, #24]
 802a796:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 802a798:	693b      	ldr	r3, [r7, #16]
 802a79a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802a79e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 802a7a0:	687b      	ldr	r3, [r7, #4]
 802a7a2:	011b      	lsls	r3, r3, #4
 802a7a4:	693a      	ldr	r2, [r7, #16]
 802a7a6:	4313      	orrs	r3, r2
 802a7a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802a7aa:	697b      	ldr	r3, [r7, #20]
 802a7ac:	f023 030a 	bic.w	r3, r3, #10
 802a7b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 802a7b2:	697a      	ldr	r2, [r7, #20]
 802a7b4:	68bb      	ldr	r3, [r7, #8]
 802a7b6:	4313      	orrs	r3, r2
 802a7b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 802a7ba:	68fb      	ldr	r3, [r7, #12]
 802a7bc:	693a      	ldr	r2, [r7, #16]
 802a7be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802a7c0:	68fb      	ldr	r3, [r7, #12]
 802a7c2:	697a      	ldr	r2, [r7, #20]
 802a7c4:	621a      	str	r2, [r3, #32]
}
 802a7c6:	bf00      	nop
 802a7c8:	371c      	adds	r7, #28
 802a7ca:	46bd      	mov	sp, r7
 802a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a7d0:	4770      	bx	lr

0802a7d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802a7d2:	b480      	push	{r7}
 802a7d4:	b087      	sub	sp, #28
 802a7d6:	af00      	add	r7, sp, #0
 802a7d8:	60f8      	str	r0, [r7, #12]
 802a7da:	60b9      	str	r1, [r7, #8]
 802a7dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802a7de:	68fb      	ldr	r3, [r7, #12]
 802a7e0:	6a1b      	ldr	r3, [r3, #32]
 802a7e2:	f023 0210 	bic.w	r2, r3, #16
 802a7e6:	68fb      	ldr	r3, [r7, #12]
 802a7e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802a7ea:	68fb      	ldr	r3, [r7, #12]
 802a7ec:	699b      	ldr	r3, [r3, #24]
 802a7ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802a7f0:	68fb      	ldr	r3, [r7, #12]
 802a7f2:	6a1b      	ldr	r3, [r3, #32]
 802a7f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 802a7f6:	697b      	ldr	r3, [r7, #20]
 802a7f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802a7fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 802a7fe:	687b      	ldr	r3, [r7, #4]
 802a800:	031b      	lsls	r3, r3, #12
 802a802:	697a      	ldr	r2, [r7, #20]
 802a804:	4313      	orrs	r3, r2
 802a806:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 802a808:	693b      	ldr	r3, [r7, #16]
 802a80a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 802a80e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 802a810:	68bb      	ldr	r3, [r7, #8]
 802a812:	011b      	lsls	r3, r3, #4
 802a814:	693a      	ldr	r2, [r7, #16]
 802a816:	4313      	orrs	r3, r2
 802a818:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 802a81a:	68fb      	ldr	r3, [r7, #12]
 802a81c:	697a      	ldr	r2, [r7, #20]
 802a81e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802a820:	68fb      	ldr	r3, [r7, #12]
 802a822:	693a      	ldr	r2, [r7, #16]
 802a824:	621a      	str	r2, [r3, #32]
}
 802a826:	bf00      	nop
 802a828:	371c      	adds	r7, #28
 802a82a:	46bd      	mov	sp, r7
 802a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a830:	4770      	bx	lr

0802a832 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 802a832:	b480      	push	{r7}
 802a834:	b085      	sub	sp, #20
 802a836:	af00      	add	r7, sp, #0
 802a838:	6078      	str	r0, [r7, #4]
 802a83a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 802a83c:	687b      	ldr	r3, [r7, #4]
 802a83e:	689b      	ldr	r3, [r3, #8]
 802a840:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 802a842:	68fb      	ldr	r3, [r7, #12]
 802a844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a848:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 802a84a:	683a      	ldr	r2, [r7, #0]
 802a84c:	68fb      	ldr	r3, [r7, #12]
 802a84e:	4313      	orrs	r3, r2
 802a850:	f043 0307 	orr.w	r3, r3, #7
 802a854:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802a856:	687b      	ldr	r3, [r7, #4]
 802a858:	68fa      	ldr	r2, [r7, #12]
 802a85a:	609a      	str	r2, [r3, #8]
}
 802a85c:	bf00      	nop
 802a85e:	3714      	adds	r7, #20
 802a860:	46bd      	mov	sp, r7
 802a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a866:	4770      	bx	lr

0802a868 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 802a868:	b480      	push	{r7}
 802a86a:	b087      	sub	sp, #28
 802a86c:	af00      	add	r7, sp, #0
 802a86e:	60f8      	str	r0, [r7, #12]
 802a870:	60b9      	str	r1, [r7, #8]
 802a872:	607a      	str	r2, [r7, #4]
 802a874:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 802a876:	68fb      	ldr	r3, [r7, #12]
 802a878:	689b      	ldr	r3, [r3, #8]
 802a87a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802a87c:	697b      	ldr	r3, [r7, #20]
 802a87e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802a882:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 802a884:	683b      	ldr	r3, [r7, #0]
 802a886:	021a      	lsls	r2, r3, #8
 802a888:	687b      	ldr	r3, [r7, #4]
 802a88a:	431a      	orrs	r2, r3
 802a88c:	68bb      	ldr	r3, [r7, #8]
 802a88e:	4313      	orrs	r3, r2
 802a890:	697a      	ldr	r2, [r7, #20]
 802a892:	4313      	orrs	r3, r2
 802a894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802a896:	68fb      	ldr	r3, [r7, #12]
 802a898:	697a      	ldr	r2, [r7, #20]
 802a89a:	609a      	str	r2, [r3, #8]
}
 802a89c:	bf00      	nop
 802a89e:	371c      	adds	r7, #28
 802a8a0:	46bd      	mov	sp, r7
 802a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a8a6:	4770      	bx	lr

0802a8a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 802a8a8:	b480      	push	{r7}
 802a8aa:	b087      	sub	sp, #28
 802a8ac:	af00      	add	r7, sp, #0
 802a8ae:	60f8      	str	r0, [r7, #12]
 802a8b0:	60b9      	str	r1, [r7, #8]
 802a8b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 802a8b4:	68bb      	ldr	r3, [r7, #8]
 802a8b6:	f003 031f 	and.w	r3, r3, #31
 802a8ba:	2201      	movs	r2, #1
 802a8bc:	fa02 f303 	lsl.w	r3, r2, r3
 802a8c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 802a8c2:	68fb      	ldr	r3, [r7, #12]
 802a8c4:	6a1a      	ldr	r2, [r3, #32]
 802a8c6:	697b      	ldr	r3, [r7, #20]
 802a8c8:	43db      	mvns	r3, r3
 802a8ca:	401a      	ands	r2, r3
 802a8cc:	68fb      	ldr	r3, [r7, #12]
 802a8ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 802a8d0:	68fb      	ldr	r3, [r7, #12]
 802a8d2:	6a1a      	ldr	r2, [r3, #32]
 802a8d4:	68bb      	ldr	r3, [r7, #8]
 802a8d6:	f003 031f 	and.w	r3, r3, #31
 802a8da:	6879      	ldr	r1, [r7, #4]
 802a8dc:	fa01 f303 	lsl.w	r3, r1, r3
 802a8e0:	431a      	orrs	r2, r3
 802a8e2:	68fb      	ldr	r3, [r7, #12]
 802a8e4:	621a      	str	r2, [r3, #32]
}
 802a8e6:	bf00      	nop
 802a8e8:	371c      	adds	r7, #28
 802a8ea:	46bd      	mov	sp, r7
 802a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a8f0:	4770      	bx	lr
	...

0802a8f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 802a8f4:	b480      	push	{r7}
 802a8f6:	b085      	sub	sp, #20
 802a8f8:	af00      	add	r7, sp, #0
 802a8fa:	6078      	str	r0, [r7, #4]
 802a8fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 802a8fe:	687b      	ldr	r3, [r7, #4]
 802a900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802a904:	2b01      	cmp	r3, #1
 802a906:	d101      	bne.n	802a90c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 802a908:	2302      	movs	r3, #2
 802a90a:	e05a      	b.n	802a9c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 802a90c:	687b      	ldr	r3, [r7, #4]
 802a90e:	2201      	movs	r2, #1
 802a910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 802a914:	687b      	ldr	r3, [r7, #4]
 802a916:	2202      	movs	r2, #2
 802a918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 802a91c:	687b      	ldr	r3, [r7, #4]
 802a91e:	681b      	ldr	r3, [r3, #0]
 802a920:	685b      	ldr	r3, [r3, #4]
 802a922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 802a924:	687b      	ldr	r3, [r7, #4]
 802a926:	681b      	ldr	r3, [r3, #0]
 802a928:	689b      	ldr	r3, [r3, #8]
 802a92a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 802a92c:	68fb      	ldr	r3, [r7, #12]
 802a92e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802a932:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 802a934:	683b      	ldr	r3, [r7, #0]
 802a936:	681b      	ldr	r3, [r3, #0]
 802a938:	68fa      	ldr	r2, [r7, #12]
 802a93a:	4313      	orrs	r3, r2
 802a93c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 802a93e:	687b      	ldr	r3, [r7, #4]
 802a940:	681b      	ldr	r3, [r3, #0]
 802a942:	68fa      	ldr	r2, [r7, #12]
 802a944:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802a946:	687b      	ldr	r3, [r7, #4]
 802a948:	681b      	ldr	r3, [r3, #0]
 802a94a:	4a21      	ldr	r2, [pc, #132]	; (802a9d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 802a94c:	4293      	cmp	r3, r2
 802a94e:	d022      	beq.n	802a996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a950:	687b      	ldr	r3, [r7, #4]
 802a952:	681b      	ldr	r3, [r3, #0]
 802a954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802a958:	d01d      	beq.n	802a996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a95a:	687b      	ldr	r3, [r7, #4]
 802a95c:	681b      	ldr	r3, [r3, #0]
 802a95e:	4a1d      	ldr	r2, [pc, #116]	; (802a9d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 802a960:	4293      	cmp	r3, r2
 802a962:	d018      	beq.n	802a996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a964:	687b      	ldr	r3, [r7, #4]
 802a966:	681b      	ldr	r3, [r3, #0]
 802a968:	4a1b      	ldr	r2, [pc, #108]	; (802a9d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 802a96a:	4293      	cmp	r3, r2
 802a96c:	d013      	beq.n	802a996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a96e:	687b      	ldr	r3, [r7, #4]
 802a970:	681b      	ldr	r3, [r3, #0]
 802a972:	4a1a      	ldr	r2, [pc, #104]	; (802a9dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 802a974:	4293      	cmp	r3, r2
 802a976:	d00e      	beq.n	802a996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a978:	687b      	ldr	r3, [r7, #4]
 802a97a:	681b      	ldr	r3, [r3, #0]
 802a97c:	4a18      	ldr	r2, [pc, #96]	; (802a9e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 802a97e:	4293      	cmp	r3, r2
 802a980:	d009      	beq.n	802a996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a982:	687b      	ldr	r3, [r7, #4]
 802a984:	681b      	ldr	r3, [r3, #0]
 802a986:	4a17      	ldr	r2, [pc, #92]	; (802a9e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 802a988:	4293      	cmp	r3, r2
 802a98a:	d004      	beq.n	802a996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802a98c:	687b      	ldr	r3, [r7, #4]
 802a98e:	681b      	ldr	r3, [r3, #0]
 802a990:	4a15      	ldr	r2, [pc, #84]	; (802a9e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 802a992:	4293      	cmp	r3, r2
 802a994:	d10c      	bne.n	802a9b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 802a996:	68bb      	ldr	r3, [r7, #8]
 802a998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 802a99c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802a99e:	683b      	ldr	r3, [r7, #0]
 802a9a0:	685b      	ldr	r3, [r3, #4]
 802a9a2:	68ba      	ldr	r2, [r7, #8]
 802a9a4:	4313      	orrs	r3, r2
 802a9a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 802a9a8:	687b      	ldr	r3, [r7, #4]
 802a9aa:	681b      	ldr	r3, [r3, #0]
 802a9ac:	68ba      	ldr	r2, [r7, #8]
 802a9ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802a9b0:	687b      	ldr	r3, [r7, #4]
 802a9b2:	2201      	movs	r2, #1
 802a9b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802a9b8:	687b      	ldr	r3, [r7, #4]
 802a9ba:	2200      	movs	r2, #0
 802a9bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802a9c0:	2300      	movs	r3, #0
}
 802a9c2:	4618      	mov	r0, r3
 802a9c4:	3714      	adds	r7, #20
 802a9c6:	46bd      	mov	sp, r7
 802a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a9cc:	4770      	bx	lr
 802a9ce:	bf00      	nop
 802a9d0:	40010000 	.word	0x40010000
 802a9d4:	40000400 	.word	0x40000400
 802a9d8:	40000800 	.word	0x40000800
 802a9dc:	40000c00 	.word	0x40000c00
 802a9e0:	40010400 	.word	0x40010400
 802a9e4:	40014000 	.word	0x40014000
 802a9e8:	40001800 	.word	0x40001800

0802a9ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 802a9ec:	b480      	push	{r7}
 802a9ee:	b085      	sub	sp, #20
 802a9f0:	af00      	add	r7, sp, #0
 802a9f2:	6078      	str	r0, [r7, #4]
 802a9f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 802a9f6:	2300      	movs	r3, #0
 802a9f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 802a9fa:	687b      	ldr	r3, [r7, #4]
 802a9fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802aa00:	2b01      	cmp	r3, #1
 802aa02:	d101      	bne.n	802aa08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 802aa04:	2302      	movs	r3, #2
 802aa06:	e03d      	b.n	802aa84 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 802aa08:	687b      	ldr	r3, [r7, #4]
 802aa0a:	2201      	movs	r2, #1
 802aa0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 802aa10:	68fb      	ldr	r3, [r7, #12]
 802aa12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 802aa16:	683b      	ldr	r3, [r7, #0]
 802aa18:	68db      	ldr	r3, [r3, #12]
 802aa1a:	4313      	orrs	r3, r2
 802aa1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 802aa1e:	68fb      	ldr	r3, [r7, #12]
 802aa20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 802aa24:	683b      	ldr	r3, [r7, #0]
 802aa26:	689b      	ldr	r3, [r3, #8]
 802aa28:	4313      	orrs	r3, r2
 802aa2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 802aa2c:	68fb      	ldr	r3, [r7, #12]
 802aa2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 802aa32:	683b      	ldr	r3, [r7, #0]
 802aa34:	685b      	ldr	r3, [r3, #4]
 802aa36:	4313      	orrs	r3, r2
 802aa38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 802aa3a:	68fb      	ldr	r3, [r7, #12]
 802aa3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 802aa40:	683b      	ldr	r3, [r7, #0]
 802aa42:	681b      	ldr	r3, [r3, #0]
 802aa44:	4313      	orrs	r3, r2
 802aa46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 802aa48:	68fb      	ldr	r3, [r7, #12]
 802aa4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802aa4e:	683b      	ldr	r3, [r7, #0]
 802aa50:	691b      	ldr	r3, [r3, #16]
 802aa52:	4313      	orrs	r3, r2
 802aa54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 802aa56:	68fb      	ldr	r3, [r7, #12]
 802aa58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 802aa5c:	683b      	ldr	r3, [r7, #0]
 802aa5e:	695b      	ldr	r3, [r3, #20]
 802aa60:	4313      	orrs	r3, r2
 802aa62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 802aa64:	68fb      	ldr	r3, [r7, #12]
 802aa66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 802aa6a:	683b      	ldr	r3, [r7, #0]
 802aa6c:	69db      	ldr	r3, [r3, #28]
 802aa6e:	4313      	orrs	r3, r2
 802aa70:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 802aa72:	687b      	ldr	r3, [r7, #4]
 802aa74:	681b      	ldr	r3, [r3, #0]
 802aa76:	68fa      	ldr	r2, [r7, #12]
 802aa78:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 802aa7a:	687b      	ldr	r3, [r7, #4]
 802aa7c:	2200      	movs	r2, #0
 802aa7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802aa82:	2300      	movs	r3, #0
}
 802aa84:	4618      	mov	r0, r3
 802aa86:	3714      	adds	r7, #20
 802aa88:	46bd      	mov	sp, r7
 802aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aa8e:	4770      	bx	lr

0802aa90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 802aa90:	b480      	push	{r7}
 802aa92:	b083      	sub	sp, #12
 802aa94:	af00      	add	r7, sp, #0
 802aa96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 802aa98:	bf00      	nop
 802aa9a:	370c      	adds	r7, #12
 802aa9c:	46bd      	mov	sp, r7
 802aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aaa2:	4770      	bx	lr

0802aaa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 802aaa4:	b480      	push	{r7}
 802aaa6:	b083      	sub	sp, #12
 802aaa8:	af00      	add	r7, sp, #0
 802aaaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 802aaac:	bf00      	nop
 802aaae:	370c      	adds	r7, #12
 802aab0:	46bd      	mov	sp, r7
 802aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aab6:	4770      	bx	lr

0802aab8 <__cxa_guard_acquire>:
 802aab8:	6803      	ldr	r3, [r0, #0]
 802aaba:	07db      	lsls	r3, r3, #31
 802aabc:	d406      	bmi.n	802aacc <__cxa_guard_acquire+0x14>
 802aabe:	7843      	ldrb	r3, [r0, #1]
 802aac0:	b103      	cbz	r3, 802aac4 <__cxa_guard_acquire+0xc>
 802aac2:	deff      	udf	#255	; 0xff
 802aac4:	2301      	movs	r3, #1
 802aac6:	7043      	strb	r3, [r0, #1]
 802aac8:	4618      	mov	r0, r3
 802aaca:	4770      	bx	lr
 802aacc:	2000      	movs	r0, #0
 802aace:	4770      	bx	lr

0802aad0 <__cxa_guard_release>:
 802aad0:	2301      	movs	r3, #1
 802aad2:	6003      	str	r3, [r0, #0]
 802aad4:	4770      	bx	lr
	...

0802aad8 <__libc_init_array>:
 802aad8:	b570      	push	{r4, r5, r6, lr}
 802aada:	4e0d      	ldr	r6, [pc, #52]	; (802ab10 <__libc_init_array+0x38>)
 802aadc:	4c0d      	ldr	r4, [pc, #52]	; (802ab14 <__libc_init_array+0x3c>)
 802aade:	1ba4      	subs	r4, r4, r6
 802aae0:	10a4      	asrs	r4, r4, #2
 802aae2:	2500      	movs	r5, #0
 802aae4:	42a5      	cmp	r5, r4
 802aae6:	d109      	bne.n	802aafc <__libc_init_array+0x24>
 802aae8:	4e0b      	ldr	r6, [pc, #44]	; (802ab18 <__libc_init_array+0x40>)
 802aaea:	4c0c      	ldr	r4, [pc, #48]	; (802ab1c <__libc_init_array+0x44>)
 802aaec:	f000 f82c 	bl	802ab48 <_init>
 802aaf0:	1ba4      	subs	r4, r4, r6
 802aaf2:	10a4      	asrs	r4, r4, #2
 802aaf4:	2500      	movs	r5, #0
 802aaf6:	42a5      	cmp	r5, r4
 802aaf8:	d105      	bne.n	802ab06 <__libc_init_array+0x2e>
 802aafa:	bd70      	pop	{r4, r5, r6, pc}
 802aafc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802ab00:	4798      	blx	r3
 802ab02:	3501      	adds	r5, #1
 802ab04:	e7ee      	b.n	802aae4 <__libc_init_array+0xc>
 802ab06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802ab0a:	4798      	blx	r3
 802ab0c:	3501      	adds	r5, #1
 802ab0e:	e7f2      	b.n	802aaf6 <__libc_init_array+0x1e>
 802ab10:	0802ab88 	.word	0x0802ab88
 802ab14:	0802ab88 	.word	0x0802ab88
 802ab18:	0802ab88 	.word	0x0802ab88
 802ab1c:	0802ab90 	.word	0x0802ab90

0802ab20 <memcpy>:
 802ab20:	b510      	push	{r4, lr}
 802ab22:	1e43      	subs	r3, r0, #1
 802ab24:	440a      	add	r2, r1
 802ab26:	4291      	cmp	r1, r2
 802ab28:	d100      	bne.n	802ab2c <memcpy+0xc>
 802ab2a:	bd10      	pop	{r4, pc}
 802ab2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 802ab30:	f803 4f01 	strb.w	r4, [r3, #1]!
 802ab34:	e7f7      	b.n	802ab26 <memcpy+0x6>

0802ab36 <memset>:
 802ab36:	4402      	add	r2, r0
 802ab38:	4603      	mov	r3, r0
 802ab3a:	4293      	cmp	r3, r2
 802ab3c:	d100      	bne.n	802ab40 <memset+0xa>
 802ab3e:	4770      	bx	lr
 802ab40:	f803 1b01 	strb.w	r1, [r3], #1
 802ab44:	e7f9      	b.n	802ab3a <memset+0x4>
	...

0802ab48 <_init>:
 802ab48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ab4a:	bf00      	nop
 802ab4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ab4e:	bc08      	pop	{r3}
 802ab50:	469e      	mov	lr, r3
 802ab52:	4770      	bx	lr

0802ab54 <_fini>:
 802ab54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ab56:	bf00      	nop
 802ab58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ab5a:	bc08      	pop	{r3}
 802ab5c:	469e      	mov	lr, r3
 802ab5e:	4770      	bx	lr
