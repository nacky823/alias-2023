
alias2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000543c  08020000  08020000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0802543c  0802543c  0002543c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802545c  0802545c  0003000c  2**0
                  CONTENTS
  4 .ARM          00000008  0802545c  0802545c  0002545c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025464  08025464  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08025464  08025464  00025464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802546c  0802546c  0002546c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08025470  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000858  20000010  0802547c  00030010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000868  0802547c  00030868  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ed7c  00000000  00000000  0003003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036eb  00000000  00000000  0004edb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001368  00000000  00000000  000524a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001220  00000000  00000000  00053810  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023c32  00000000  00000000  00054a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000111a1  00000000  00000000  00078662  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca7ce  00000000  00000000  00089803  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00153fd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005100  00000000  00000000  0015404c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08020000 <__do_global_dtors_aux>:
 8020000:	b510      	push	{r4, lr}
 8020002:	4c05      	ldr	r4, [pc, #20]	; (8020018 <__do_global_dtors_aux+0x18>)
 8020004:	7823      	ldrb	r3, [r4, #0]
 8020006:	b933      	cbnz	r3, 8020016 <__do_global_dtors_aux+0x16>
 8020008:	4b04      	ldr	r3, [pc, #16]	; (802001c <__do_global_dtors_aux+0x1c>)
 802000a:	b113      	cbz	r3, 8020012 <__do_global_dtors_aux+0x12>
 802000c:	4804      	ldr	r0, [pc, #16]	; (8020020 <__do_global_dtors_aux+0x20>)
 802000e:	f3af 8000 	nop.w
 8020012:	2301      	movs	r3, #1
 8020014:	7023      	strb	r3, [r4, #0]
 8020016:	bd10      	pop	{r4, pc}
 8020018:	20000010 	.word	0x20000010
 802001c:	00000000 	.word	0x00000000
 8020020:	08025424 	.word	0x08025424

08020024 <frame_dummy>:
 8020024:	b508      	push	{r3, lr}
 8020026:	4b03      	ldr	r3, [pc, #12]	; (8020034 <frame_dummy+0x10>)
 8020028:	b11b      	cbz	r3, 8020032 <frame_dummy+0xe>
 802002a:	4903      	ldr	r1, [pc, #12]	; (8020038 <frame_dummy+0x14>)
 802002c:	4803      	ldr	r0, [pc, #12]	; (802003c <frame_dummy+0x18>)
 802002e:	f3af 8000 	nop.w
 8020032:	bd08      	pop	{r3, pc}
 8020034:	00000000 	.word	0x00000000
 8020038:	20000014 	.word	0x20000014
 802003c:	08025424 	.word	0x08025424

08020040 <__aeabi_uldivmod>:
 8020040:	b953      	cbnz	r3, 8020058 <__aeabi_uldivmod+0x18>
 8020042:	b94a      	cbnz	r2, 8020058 <__aeabi_uldivmod+0x18>
 8020044:	2900      	cmp	r1, #0
 8020046:	bf08      	it	eq
 8020048:	2800      	cmpeq	r0, #0
 802004a:	bf1c      	itt	ne
 802004c:	f04f 31ff 	movne.w	r1, #4294967295
 8020050:	f04f 30ff 	movne.w	r0, #4294967295
 8020054:	f000 b972 	b.w	802033c <__aeabi_idiv0>
 8020058:	f1ad 0c08 	sub.w	ip, sp, #8
 802005c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020060:	f000 f806 	bl	8020070 <__udivmoddi4>
 8020064:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020068:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802006c:	b004      	add	sp, #16
 802006e:	4770      	bx	lr

08020070 <__udivmoddi4>:
 8020070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020074:	9e08      	ldr	r6, [sp, #32]
 8020076:	4604      	mov	r4, r0
 8020078:	4688      	mov	r8, r1
 802007a:	2b00      	cmp	r3, #0
 802007c:	d14b      	bne.n	8020116 <__udivmoddi4+0xa6>
 802007e:	428a      	cmp	r2, r1
 8020080:	4615      	mov	r5, r2
 8020082:	d967      	bls.n	8020154 <__udivmoddi4+0xe4>
 8020084:	fab2 f282 	clz	r2, r2
 8020088:	b14a      	cbz	r2, 802009e <__udivmoddi4+0x2e>
 802008a:	f1c2 0720 	rsb	r7, r2, #32
 802008e:	fa01 f302 	lsl.w	r3, r1, r2
 8020092:	fa20 f707 	lsr.w	r7, r0, r7
 8020096:	4095      	lsls	r5, r2
 8020098:	ea47 0803 	orr.w	r8, r7, r3
 802009c:	4094      	lsls	r4, r2
 802009e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80200a2:	0c23      	lsrs	r3, r4, #16
 80200a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80200a8:	fa1f fc85 	uxth.w	ip, r5
 80200ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80200b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80200b4:	fb07 f10c 	mul.w	r1, r7, ip
 80200b8:	4299      	cmp	r1, r3
 80200ba:	d909      	bls.n	80200d0 <__udivmoddi4+0x60>
 80200bc:	18eb      	adds	r3, r5, r3
 80200be:	f107 30ff 	add.w	r0, r7, #4294967295
 80200c2:	f080 811b 	bcs.w	80202fc <__udivmoddi4+0x28c>
 80200c6:	4299      	cmp	r1, r3
 80200c8:	f240 8118 	bls.w	80202fc <__udivmoddi4+0x28c>
 80200cc:	3f02      	subs	r7, #2
 80200ce:	442b      	add	r3, r5
 80200d0:	1a5b      	subs	r3, r3, r1
 80200d2:	b2a4      	uxth	r4, r4
 80200d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80200d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80200dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80200e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80200e4:	45a4      	cmp	ip, r4
 80200e6:	d909      	bls.n	80200fc <__udivmoddi4+0x8c>
 80200e8:	192c      	adds	r4, r5, r4
 80200ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80200ee:	f080 8107 	bcs.w	8020300 <__udivmoddi4+0x290>
 80200f2:	45a4      	cmp	ip, r4
 80200f4:	f240 8104 	bls.w	8020300 <__udivmoddi4+0x290>
 80200f8:	3802      	subs	r0, #2
 80200fa:	442c      	add	r4, r5
 80200fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8020100:	eba4 040c 	sub.w	r4, r4, ip
 8020104:	2700      	movs	r7, #0
 8020106:	b11e      	cbz	r6, 8020110 <__udivmoddi4+0xa0>
 8020108:	40d4      	lsrs	r4, r2
 802010a:	2300      	movs	r3, #0
 802010c:	e9c6 4300 	strd	r4, r3, [r6]
 8020110:	4639      	mov	r1, r7
 8020112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020116:	428b      	cmp	r3, r1
 8020118:	d909      	bls.n	802012e <__udivmoddi4+0xbe>
 802011a:	2e00      	cmp	r6, #0
 802011c:	f000 80eb 	beq.w	80202f6 <__udivmoddi4+0x286>
 8020120:	2700      	movs	r7, #0
 8020122:	e9c6 0100 	strd	r0, r1, [r6]
 8020126:	4638      	mov	r0, r7
 8020128:	4639      	mov	r1, r7
 802012a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802012e:	fab3 f783 	clz	r7, r3
 8020132:	2f00      	cmp	r7, #0
 8020134:	d147      	bne.n	80201c6 <__udivmoddi4+0x156>
 8020136:	428b      	cmp	r3, r1
 8020138:	d302      	bcc.n	8020140 <__udivmoddi4+0xd0>
 802013a:	4282      	cmp	r2, r0
 802013c:	f200 80fa 	bhi.w	8020334 <__udivmoddi4+0x2c4>
 8020140:	1a84      	subs	r4, r0, r2
 8020142:	eb61 0303 	sbc.w	r3, r1, r3
 8020146:	2001      	movs	r0, #1
 8020148:	4698      	mov	r8, r3
 802014a:	2e00      	cmp	r6, #0
 802014c:	d0e0      	beq.n	8020110 <__udivmoddi4+0xa0>
 802014e:	e9c6 4800 	strd	r4, r8, [r6]
 8020152:	e7dd      	b.n	8020110 <__udivmoddi4+0xa0>
 8020154:	b902      	cbnz	r2, 8020158 <__udivmoddi4+0xe8>
 8020156:	deff      	udf	#255	; 0xff
 8020158:	fab2 f282 	clz	r2, r2
 802015c:	2a00      	cmp	r2, #0
 802015e:	f040 808f 	bne.w	8020280 <__udivmoddi4+0x210>
 8020162:	1b49      	subs	r1, r1, r5
 8020164:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020168:	fa1f f885 	uxth.w	r8, r5
 802016c:	2701      	movs	r7, #1
 802016e:	fbb1 fcfe 	udiv	ip, r1, lr
 8020172:	0c23      	lsrs	r3, r4, #16
 8020174:	fb0e 111c 	mls	r1, lr, ip, r1
 8020178:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 802017c:	fb08 f10c 	mul.w	r1, r8, ip
 8020180:	4299      	cmp	r1, r3
 8020182:	d907      	bls.n	8020194 <__udivmoddi4+0x124>
 8020184:	18eb      	adds	r3, r5, r3
 8020186:	f10c 30ff 	add.w	r0, ip, #4294967295
 802018a:	d202      	bcs.n	8020192 <__udivmoddi4+0x122>
 802018c:	4299      	cmp	r1, r3
 802018e:	f200 80cd 	bhi.w	802032c <__udivmoddi4+0x2bc>
 8020192:	4684      	mov	ip, r0
 8020194:	1a59      	subs	r1, r3, r1
 8020196:	b2a3      	uxth	r3, r4
 8020198:	fbb1 f0fe 	udiv	r0, r1, lr
 802019c:	fb0e 1410 	mls	r4, lr, r0, r1
 80201a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80201a4:	fb08 f800 	mul.w	r8, r8, r0
 80201a8:	45a0      	cmp	r8, r4
 80201aa:	d907      	bls.n	80201bc <__udivmoddi4+0x14c>
 80201ac:	192c      	adds	r4, r5, r4
 80201ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80201b2:	d202      	bcs.n	80201ba <__udivmoddi4+0x14a>
 80201b4:	45a0      	cmp	r8, r4
 80201b6:	f200 80b6 	bhi.w	8020326 <__udivmoddi4+0x2b6>
 80201ba:	4618      	mov	r0, r3
 80201bc:	eba4 0408 	sub.w	r4, r4, r8
 80201c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80201c4:	e79f      	b.n	8020106 <__udivmoddi4+0x96>
 80201c6:	f1c7 0c20 	rsb	ip, r7, #32
 80201ca:	40bb      	lsls	r3, r7
 80201cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80201d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80201d4:	fa01 f407 	lsl.w	r4, r1, r7
 80201d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80201dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80201e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80201e4:	4325      	orrs	r5, r4
 80201e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80201ea:	0c2c      	lsrs	r4, r5, #16
 80201ec:	fb08 3319 	mls	r3, r8, r9, r3
 80201f0:	fa1f fa8e 	uxth.w	sl, lr
 80201f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80201f8:	fb09 f40a 	mul.w	r4, r9, sl
 80201fc:	429c      	cmp	r4, r3
 80201fe:	fa02 f207 	lsl.w	r2, r2, r7
 8020202:	fa00 f107 	lsl.w	r1, r0, r7
 8020206:	d90b      	bls.n	8020220 <__udivmoddi4+0x1b0>
 8020208:	eb1e 0303 	adds.w	r3, lr, r3
 802020c:	f109 30ff 	add.w	r0, r9, #4294967295
 8020210:	f080 8087 	bcs.w	8020322 <__udivmoddi4+0x2b2>
 8020214:	429c      	cmp	r4, r3
 8020216:	f240 8084 	bls.w	8020322 <__udivmoddi4+0x2b2>
 802021a:	f1a9 0902 	sub.w	r9, r9, #2
 802021e:	4473      	add	r3, lr
 8020220:	1b1b      	subs	r3, r3, r4
 8020222:	b2ad      	uxth	r5, r5
 8020224:	fbb3 f0f8 	udiv	r0, r3, r8
 8020228:	fb08 3310 	mls	r3, r8, r0, r3
 802022c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8020230:	fb00 fa0a 	mul.w	sl, r0, sl
 8020234:	45a2      	cmp	sl, r4
 8020236:	d908      	bls.n	802024a <__udivmoddi4+0x1da>
 8020238:	eb1e 0404 	adds.w	r4, lr, r4
 802023c:	f100 33ff 	add.w	r3, r0, #4294967295
 8020240:	d26b      	bcs.n	802031a <__udivmoddi4+0x2aa>
 8020242:	45a2      	cmp	sl, r4
 8020244:	d969      	bls.n	802031a <__udivmoddi4+0x2aa>
 8020246:	3802      	subs	r0, #2
 8020248:	4474      	add	r4, lr
 802024a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 802024e:	fba0 8902 	umull	r8, r9, r0, r2
 8020252:	eba4 040a 	sub.w	r4, r4, sl
 8020256:	454c      	cmp	r4, r9
 8020258:	46c2      	mov	sl, r8
 802025a:	464b      	mov	r3, r9
 802025c:	d354      	bcc.n	8020308 <__udivmoddi4+0x298>
 802025e:	d051      	beq.n	8020304 <__udivmoddi4+0x294>
 8020260:	2e00      	cmp	r6, #0
 8020262:	d069      	beq.n	8020338 <__udivmoddi4+0x2c8>
 8020264:	ebb1 050a 	subs.w	r5, r1, sl
 8020268:	eb64 0403 	sbc.w	r4, r4, r3
 802026c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8020270:	40fd      	lsrs	r5, r7
 8020272:	40fc      	lsrs	r4, r7
 8020274:	ea4c 0505 	orr.w	r5, ip, r5
 8020278:	e9c6 5400 	strd	r5, r4, [r6]
 802027c:	2700      	movs	r7, #0
 802027e:	e747      	b.n	8020110 <__udivmoddi4+0xa0>
 8020280:	f1c2 0320 	rsb	r3, r2, #32
 8020284:	fa20 f703 	lsr.w	r7, r0, r3
 8020288:	4095      	lsls	r5, r2
 802028a:	fa01 f002 	lsl.w	r0, r1, r2
 802028e:	fa21 f303 	lsr.w	r3, r1, r3
 8020292:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020296:	4338      	orrs	r0, r7
 8020298:	0c01      	lsrs	r1, r0, #16
 802029a:	fbb3 f7fe 	udiv	r7, r3, lr
 802029e:	fa1f f885 	uxth.w	r8, r5
 80202a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80202a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80202aa:	fb07 f308 	mul.w	r3, r7, r8
 80202ae:	428b      	cmp	r3, r1
 80202b0:	fa04 f402 	lsl.w	r4, r4, r2
 80202b4:	d907      	bls.n	80202c6 <__udivmoddi4+0x256>
 80202b6:	1869      	adds	r1, r5, r1
 80202b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80202bc:	d22f      	bcs.n	802031e <__udivmoddi4+0x2ae>
 80202be:	428b      	cmp	r3, r1
 80202c0:	d92d      	bls.n	802031e <__udivmoddi4+0x2ae>
 80202c2:	3f02      	subs	r7, #2
 80202c4:	4429      	add	r1, r5
 80202c6:	1acb      	subs	r3, r1, r3
 80202c8:	b281      	uxth	r1, r0
 80202ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80202ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80202d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80202d6:	fb00 f308 	mul.w	r3, r0, r8
 80202da:	428b      	cmp	r3, r1
 80202dc:	d907      	bls.n	80202ee <__udivmoddi4+0x27e>
 80202de:	1869      	adds	r1, r5, r1
 80202e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80202e4:	d217      	bcs.n	8020316 <__udivmoddi4+0x2a6>
 80202e6:	428b      	cmp	r3, r1
 80202e8:	d915      	bls.n	8020316 <__udivmoddi4+0x2a6>
 80202ea:	3802      	subs	r0, #2
 80202ec:	4429      	add	r1, r5
 80202ee:	1ac9      	subs	r1, r1, r3
 80202f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80202f4:	e73b      	b.n	802016e <__udivmoddi4+0xfe>
 80202f6:	4637      	mov	r7, r6
 80202f8:	4630      	mov	r0, r6
 80202fa:	e709      	b.n	8020110 <__udivmoddi4+0xa0>
 80202fc:	4607      	mov	r7, r0
 80202fe:	e6e7      	b.n	80200d0 <__udivmoddi4+0x60>
 8020300:	4618      	mov	r0, r3
 8020302:	e6fb      	b.n	80200fc <__udivmoddi4+0x8c>
 8020304:	4541      	cmp	r1, r8
 8020306:	d2ab      	bcs.n	8020260 <__udivmoddi4+0x1f0>
 8020308:	ebb8 0a02 	subs.w	sl, r8, r2
 802030c:	eb69 020e 	sbc.w	r2, r9, lr
 8020310:	3801      	subs	r0, #1
 8020312:	4613      	mov	r3, r2
 8020314:	e7a4      	b.n	8020260 <__udivmoddi4+0x1f0>
 8020316:	4660      	mov	r0, ip
 8020318:	e7e9      	b.n	80202ee <__udivmoddi4+0x27e>
 802031a:	4618      	mov	r0, r3
 802031c:	e795      	b.n	802024a <__udivmoddi4+0x1da>
 802031e:	4667      	mov	r7, ip
 8020320:	e7d1      	b.n	80202c6 <__udivmoddi4+0x256>
 8020322:	4681      	mov	r9, r0
 8020324:	e77c      	b.n	8020220 <__udivmoddi4+0x1b0>
 8020326:	3802      	subs	r0, #2
 8020328:	442c      	add	r4, r5
 802032a:	e747      	b.n	80201bc <__udivmoddi4+0x14c>
 802032c:	f1ac 0c02 	sub.w	ip, ip, #2
 8020330:	442b      	add	r3, r5
 8020332:	e72f      	b.n	8020194 <__udivmoddi4+0x124>
 8020334:	4638      	mov	r0, r7
 8020336:	e708      	b.n	802014a <__udivmoddi4+0xda>
 8020338:	4637      	mov	r7, r6
 802033a:	e6e9      	b.n	8020110 <__udivmoddi4+0xa0>

0802033c <__aeabi_idiv0>:
 802033c:	4770      	bx	lr
 802033e:	bf00      	nop

08020340 <_ZN7EncoderC1Ev>:
#include "encoder.hpp"
#include "declare_extern.h"

Encoder::Encoder() : distance_(0)
 8020340:	b480      	push	{r7}
 8020342:	b083      	sub	sp, #12
 8020344:	af00      	add	r7, sp, #0
 8020346:	6078      	str	r0, [r7, #4]
				   , distance_stack_(0)
				   , distance_difference_(0) {}
 8020348:	687b      	ldr	r3, [r7, #4]
 802034a:	f04f 0200 	mov.w	r2, #0
 802034e:	601a      	str	r2, [r3, #0]
 8020350:	687b      	ldr	r3, [r7, #4]
 8020352:	f04f 0200 	mov.w	r2, #0
 8020356:	605a      	str	r2, [r3, #4]
 8020358:	687b      	ldr	r3, [r7, #4]
 802035a:	f04f 0200 	mov.w	r2, #0
 802035e:	609a      	str	r2, [r3, #8]
 8020360:	687b      	ldr	r3, [r7, #4]
 8020362:	4618      	mov	r0, r3
 8020364:	370c      	adds	r7, #12
 8020366:	46bd      	mov	sp, r7
 8020368:	f85d 7b04 	ldr.w	r7, [sp], #4
 802036c:	4770      	bx	lr

0802036e <_ZN8Iim42652C1Ev>:
#include "iim_42652.hpp"
#include "declare_extern.h"

Iim42652::Iim42652() : degree_stack_z_(0) {}
 802036e:	b490      	push	{r4, r7}
 8020370:	b082      	sub	sp, #8
 8020372:	af00      	add	r7, sp, #0
 8020374:	6078      	str	r0, [r7, #4]
 8020376:	687a      	ldr	r2, [r7, #4]
 8020378:	f04f 0300 	mov.w	r3, #0
 802037c:	f04f 0400 	mov.w	r4, #0
 8020380:	e9c2 3400 	strd	r3, r4, [r2]
 8020384:	687b      	ldr	r3, [r7, #4]
 8020386:	4618      	mov	r0, r3
 8020388:	3708      	adds	r7, #8
 802038a:	46bd      	mov	sp, r7
 802038c:	bc90      	pop	{r4, r7}
 802038e:	4770      	bx	lr

08020390 <_ZN3LedC1Ev>:
#include "led.hpp"

Led::Led() : interrupt_count_(0)
 8020390:	b480      	push	{r7}
 8020392:	b083      	sub	sp, #12
 8020394:	af00      	add	r7, sp, #0
 8020396:	6078      	str	r0, [r7, #4]
           , interrupt_timer_(0) {}
 8020398:	687b      	ldr	r3, [r7, #4]
 802039a:	2200      	movs	r2, #0
 802039c:	701a      	strb	r2, [r3, #0]
 802039e:	687b      	ldr	r3, [r7, #4]
 80203a0:	2200      	movs	r2, #0
 80203a2:	705a      	strb	r2, [r3, #1]
 80203a4:	687b      	ldr	r3, [r7, #4]
 80203a6:	4618      	mov	r0, r3
 80203a8:	370c      	adds	r7, #12
 80203aa:	46bd      	mov	sp, r7
 80203ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203b0:	4770      	bx	lr
	...

080203b4 <_ZN3Led10ColorOrderEc>:

void Led::ColorOrder(char color)
{
 80203b4:	b580      	push	{r7, lr}
 80203b6:	b082      	sub	sp, #8
 80203b8:	af00      	add	r7, sp, #0
 80203ba:	6078      	str	r0, [r7, #4]
 80203bc:	460b      	mov	r3, r1
 80203be:	70fb      	strb	r3, [r7, #3]
    switch(color)
 80203c0:	78fb      	ldrb	r3, [r7, #3]
 80203c2:	3b42      	subs	r3, #66	; 0x42
 80203c4:	2b17      	cmp	r3, #23
 80203c6:	f200 80b8 	bhi.w	802053a <_ZN3Led10ColorOrderEc+0x186>
 80203ca:	a201      	add	r2, pc, #4	; (adr r2, 80203d0 <_ZN3Led10ColorOrderEc+0x1c>)
 80203cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80203d0:	0802047d 	.word	0x0802047d
 80203d4:	080204c9 	.word	0x080204c9
 80203d8:	0802053b 	.word	0x0802053b
 80203dc:	0802053b 	.word	0x0802053b
 80203e0:	0802053b 	.word	0x0802053b
 80203e4:	08020457 	.word	0x08020457
 80203e8:	0802053b 	.word	0x0802053b
 80203ec:	0802053b 	.word	0x0802053b
 80203f0:	0802053b 	.word	0x0802053b
 80203f4:	0802053b 	.word	0x0802053b
 80203f8:	0802053b 	.word	0x0802053b
 80203fc:	080204ef 	.word	0x080204ef
 8020400:	0802053b 	.word	0x0802053b
 8020404:	0802053b 	.word	0x0802053b
 8020408:	0802053b 	.word	0x0802053b
 802040c:	0802053b 	.word	0x0802053b
 8020410:	08020431 	.word	0x08020431
 8020414:	0802053b 	.word	0x0802053b
 8020418:	0802053b 	.word	0x0802053b
 802041c:	0802053b 	.word	0x0802053b
 8020420:	0802053b 	.word	0x0802053b
 8020424:	08020515 	.word	0x08020515
 8020428:	0802053b 	.word	0x0802053b
 802042c:	080204a3 	.word	0x080204a3
    {
        case 'R': R_ON;  G_OFF; B_OFF; break;
 8020430:	2200      	movs	r2, #0
 8020432:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020436:	484c      	ldr	r0, [pc, #304]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020438:	f003 fa00 	bl	802383c <HAL_GPIO_WritePin>
 802043c:	2201      	movs	r2, #1
 802043e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020442:	4849      	ldr	r0, [pc, #292]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020444:	f003 f9fa 	bl	802383c <HAL_GPIO_WritePin>
 8020448:	2201      	movs	r2, #1
 802044a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802044e:	4846      	ldr	r0, [pc, #280]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020450:	f003 f9f4 	bl	802383c <HAL_GPIO_WritePin>
 8020454:	e084      	b.n	8020560 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'G': R_OFF; G_ON;  B_OFF; break;
 8020456:	2201      	movs	r2, #1
 8020458:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802045c:	4842      	ldr	r0, [pc, #264]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 802045e:	f003 f9ed 	bl	802383c <HAL_GPIO_WritePin>
 8020462:	2200      	movs	r2, #0
 8020464:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020468:	483f      	ldr	r0, [pc, #252]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 802046a:	f003 f9e7 	bl	802383c <HAL_GPIO_WritePin>
 802046e:	2201      	movs	r2, #1
 8020470:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020474:	483c      	ldr	r0, [pc, #240]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020476:	f003 f9e1 	bl	802383c <HAL_GPIO_WritePin>
 802047a:	e071      	b.n	8020560 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'B': R_OFF; G_OFF; B_ON;  break;
 802047c:	2201      	movs	r2, #1
 802047e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020482:	4839      	ldr	r0, [pc, #228]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020484:	f003 f9da 	bl	802383c <HAL_GPIO_WritePin>
 8020488:	2201      	movs	r2, #1
 802048a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802048e:	4836      	ldr	r0, [pc, #216]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020490:	f003 f9d4 	bl	802383c <HAL_GPIO_WritePin>
 8020494:	2200      	movs	r2, #0
 8020496:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802049a:	4833      	ldr	r0, [pc, #204]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 802049c:	f003 f9ce 	bl	802383c <HAL_GPIO_WritePin>
 80204a0:	e05e      	b.n	8020560 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'Y': R_ON;  G_ON;  B_OFF; break;
 80204a2:	2200      	movs	r2, #0
 80204a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80204a8:	482f      	ldr	r0, [pc, #188]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 80204aa:	f003 f9c7 	bl	802383c <HAL_GPIO_WritePin>
 80204ae:	2200      	movs	r2, #0
 80204b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80204b4:	482c      	ldr	r0, [pc, #176]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 80204b6:	f003 f9c1 	bl	802383c <HAL_GPIO_WritePin>
 80204ba:	2201      	movs	r2, #1
 80204bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80204c0:	4829      	ldr	r0, [pc, #164]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 80204c2:	f003 f9bb 	bl	802383c <HAL_GPIO_WritePin>
 80204c6:	e04b      	b.n	8020560 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'C': R_OFF; G_ON;  B_ON;  break;
 80204c8:	2201      	movs	r2, #1
 80204ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80204ce:	4826      	ldr	r0, [pc, #152]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 80204d0:	f003 f9b4 	bl	802383c <HAL_GPIO_WritePin>
 80204d4:	2200      	movs	r2, #0
 80204d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80204da:	4823      	ldr	r0, [pc, #140]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 80204dc:	f003 f9ae 	bl	802383c <HAL_GPIO_WritePin>
 80204e0:	2200      	movs	r2, #0
 80204e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80204e6:	4820      	ldr	r0, [pc, #128]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 80204e8:	f003 f9a8 	bl	802383c <HAL_GPIO_WritePin>
 80204ec:	e038      	b.n	8020560 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'M': R_ON;  G_OFF; B_ON;  break;
 80204ee:	2200      	movs	r2, #0
 80204f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80204f4:	481c      	ldr	r0, [pc, #112]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 80204f6:	f003 f9a1 	bl	802383c <HAL_GPIO_WritePin>
 80204fa:	2201      	movs	r2, #1
 80204fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020500:	4819      	ldr	r0, [pc, #100]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020502:	f003 f99b 	bl	802383c <HAL_GPIO_WritePin>
 8020506:	2200      	movs	r2, #0
 8020508:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802050c:	4816      	ldr	r0, [pc, #88]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 802050e:	f003 f995 	bl	802383c <HAL_GPIO_WritePin>
 8020512:	e025      	b.n	8020560 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'W': R_ON;  G_ON;  B_ON;  break;
 8020514:	2200      	movs	r2, #0
 8020516:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802051a:	4813      	ldr	r0, [pc, #76]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 802051c:	f003 f98e 	bl	802383c <HAL_GPIO_WritePin>
 8020520:	2200      	movs	r2, #0
 8020522:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020526:	4810      	ldr	r0, [pc, #64]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020528:	f003 f988 	bl	802383c <HAL_GPIO_WritePin>
 802052c:	2200      	movs	r2, #0
 802052e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020532:	480d      	ldr	r0, [pc, #52]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020534:	f003 f982 	bl	802383c <HAL_GPIO_WritePin>
 8020538:	e012      	b.n	8020560 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'X': // fall through
        default:  R_OFF; G_OFF; B_OFF; break;
 802053a:	2201      	movs	r2, #1
 802053c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020540:	4809      	ldr	r0, [pc, #36]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020542:	f003 f97b 	bl	802383c <HAL_GPIO_WritePin>
 8020546:	2201      	movs	r2, #1
 8020548:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802054c:	4806      	ldr	r0, [pc, #24]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 802054e:	f003 f975 	bl	802383c <HAL_GPIO_WritePin>
 8020552:	2201      	movs	r2, #1
 8020554:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020558:	4803      	ldr	r0, [pc, #12]	; (8020568 <_ZN3Led10ColorOrderEc+0x1b4>)
 802055a:	f003 f96f 	bl	802383c <HAL_GPIO_WritePin>
 802055e:	bf00      	nop
    }
}
 8020560:	bf00      	nop
 8020562:	3708      	adds	r7, #8
 8020564:	46bd      	mov	sp, r7
 8020566:	bd80      	pop	{r7, pc}
 8020568:	40020800 	.word	0x40020800

0802056c <_ZN3Led5BlinkEhcc>:

void Led::Blink(uint8_t times, char color_1, char color_2)
{
 802056c:	b580      	push	{r7, lr}
 802056e:	b084      	sub	sp, #16
 8020570:	af00      	add	r7, sp, #0
 8020572:	6078      	str	r0, [r7, #4]
 8020574:	4608      	mov	r0, r1
 8020576:	4611      	mov	r1, r2
 8020578:	461a      	mov	r2, r3
 802057a:	4603      	mov	r3, r0
 802057c:	70fb      	strb	r3, [r7, #3]
 802057e:	460b      	mov	r3, r1
 8020580:	70bb      	strb	r3, [r7, #2]
 8020582:	4613      	mov	r3, r2
 8020584:	707b      	strb	r3, [r7, #1]
    for(uint8_t i = 0; i < times; i++)
 8020586:	2300      	movs	r3, #0
 8020588:	73fb      	strb	r3, [r7, #15]
 802058a:	7bfa      	ldrb	r2, [r7, #15]
 802058c:	78fb      	ldrb	r3, [r7, #3]
 802058e:	429a      	cmp	r2, r3
 8020590:	d215      	bcs.n	80205be <_ZN3Led5BlinkEhcc+0x52>
    {
        ColorOrder(color_1);
 8020592:	78bb      	ldrb	r3, [r7, #2]
 8020594:	4619      	mov	r1, r3
 8020596:	6878      	ldr	r0, [r7, #4]
 8020598:	f7ff ff0c 	bl	80203b4 <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 802059c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80205a0:	f001 ff1c 	bl	80223dc <HAL_Delay>
        ColorOrder(color_2);
 80205a4:	787b      	ldrb	r3, [r7, #1]
 80205a6:	4619      	mov	r1, r3
 80205a8:	6878      	ldr	r0, [r7, #4]
 80205aa:	f7ff ff03 	bl	80203b4 <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 80205ae:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80205b2:	f001 ff13 	bl	80223dc <HAL_Delay>
    for(uint8_t i = 0; i < times; i++)
 80205b6:	7bfb      	ldrb	r3, [r7, #15]
 80205b8:	3301      	adds	r3, #1
 80205ba:	73fb      	strb	r3, [r7, #15]
 80205bc:	e7e5      	b.n	802058a <_ZN3Led5BlinkEhcc+0x1e>
    }
}
 80205be:	bf00      	nop
 80205c0:	3710      	adds	r7, #16
 80205c2:	46bd      	mov	sp, r7
 80205c4:	bd80      	pop	{r7, pc}

080205c6 <_ZN10LineSensorC1Ev>:
#include "line_sensor.hpp"

LineSensor::LineSensor() : line_sensors_buff_()
 80205c6:	b490      	push	{r4, r7}
 80205c8:	b082      	sub	sp, #8
 80205ca:	af00      	add	r7, sp, #0
 80205cc:	6078      	str	r0, [r7, #4]
                         , consecutive_line_sensors_buff_()
                         , min_line_sensors_valu_()
                         , max_line_sensors_valu_()
                         , line_sensors_valu_()
                         , emergency_stop_flag_(false) {}
 80205ce:	687a      	ldr	r2, [r7, #4]
 80205d0:	230d      	movs	r3, #13
 80205d2:	2b00      	cmp	r3, #0
 80205d4:	db04      	blt.n	80205e0 <_ZN10LineSensorC1Ev+0x1a>
 80205d6:	2100      	movs	r1, #0
 80205d8:	8011      	strh	r1, [r2, #0]
 80205da:	3202      	adds	r2, #2
 80205dc:	3b01      	subs	r3, #1
 80205de:	e7f8      	b.n	80205d2 <_ZN10LineSensorC1Ev+0xc>
 80205e0:	687b      	ldr	r3, [r7, #4]
 80205e2:	f103 021c 	add.w	r2, r3, #28
 80205e6:	2309      	movs	r3, #9
 80205e8:	4610      	mov	r0, r2
 80205ea:	2b00      	cmp	r3, #0
 80205ec:	db0b      	blt.n	8020606 <_ZN10LineSensorC1Ev+0x40>
 80205ee:	4601      	mov	r1, r0
 80205f0:	220d      	movs	r2, #13
 80205f2:	2a00      	cmp	r2, #0
 80205f4:	db04      	blt.n	8020600 <_ZN10LineSensorC1Ev+0x3a>
 80205f6:	2400      	movs	r4, #0
 80205f8:	800c      	strh	r4, [r1, #0]
 80205fa:	3102      	adds	r1, #2
 80205fc:	3a01      	subs	r2, #1
 80205fe:	e7f8      	b.n	80205f2 <_ZN10LineSensorC1Ev+0x2c>
 8020600:	301c      	adds	r0, #28
 8020602:	3b01      	subs	r3, #1
 8020604:	e7f1      	b.n	80205ea <_ZN10LineSensorC1Ev+0x24>
 8020606:	687b      	ldr	r3, [r7, #4]
 8020608:	f503 729a 	add.w	r2, r3, #308	; 0x134
 802060c:	230d      	movs	r3, #13
 802060e:	2b00      	cmp	r3, #0
 8020610:	db04      	blt.n	802061c <_ZN10LineSensorC1Ev+0x56>
 8020612:	2100      	movs	r1, #0
 8020614:	8011      	strh	r1, [r2, #0]
 8020616:	3202      	adds	r2, #2
 8020618:	3b01      	subs	r3, #1
 802061a:	e7f8      	b.n	802060e <_ZN10LineSensorC1Ev+0x48>
 802061c:	687b      	ldr	r3, [r7, #4]
 802061e:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 8020622:	230d      	movs	r3, #13
 8020624:	2b00      	cmp	r3, #0
 8020626:	db04      	blt.n	8020632 <_ZN10LineSensorC1Ev+0x6c>
 8020628:	2100      	movs	r1, #0
 802062a:	8011      	strh	r1, [r2, #0]
 802062c:	3202      	adds	r2, #2
 802062e:	3b01      	subs	r3, #1
 8020630:	e7f8      	b.n	8020624 <_ZN10LineSensorC1Ev+0x5e>
 8020632:	687b      	ldr	r3, [r7, #4]
 8020634:	f503 72b6 	add.w	r2, r3, #364	; 0x16c
 8020638:	230d      	movs	r3, #13
 802063a:	2b00      	cmp	r3, #0
 802063c:	db04      	blt.n	8020648 <_ZN10LineSensorC1Ev+0x82>
 802063e:	2100      	movs	r1, #0
 8020640:	8011      	strh	r1, [r2, #0]
 8020642:	3202      	adds	r2, #2
 8020644:	3b01      	subs	r3, #1
 8020646:	e7f8      	b.n	802063a <_ZN10LineSensorC1Ev+0x74>
 8020648:	687b      	ldr	r3, [r7, #4]
 802064a:	2200      	movs	r2, #0
 802064c:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 8020650:	687b      	ldr	r3, [r7, #4]
 8020652:	4618      	mov	r0, r3
 8020654:	3708      	adds	r7, #8
 8020656:	46bd      	mov	sp, r7
 8020658:	bc90      	pop	{r4, r7}
 802065a:	4770      	bx	lr

0802065c <_ZN10LineSensor4InitEv>:

void LineSensor::Init()
{
 802065c:	b580      	push	{r7, lr}
 802065e:	b082      	sub	sp, #8
 8020660:	af00      	add	r7, sp, #0
 8020662:	6078      	str	r0, [r7, #4]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)line_sensors_buff_, NUM_OF_LINE_SENSORS) != HAL_OK)
 8020664:	687b      	ldr	r3, [r7, #4]
 8020666:	220e      	movs	r2, #14
 8020668:	4619      	mov	r1, r3
 802066a:	4815      	ldr	r0, [pc, #84]	; (80206c0 <_ZN10LineSensor4InitEv+0x64>)
 802066c:	f001 ff1c 	bl	80224a8 <HAL_ADC_Start_DMA>
 8020670:	4603      	mov	r3, r0
 8020672:	2b00      	cmp	r3, #0
 8020674:	bf14      	ite	ne
 8020676:	2301      	movne	r3, #1
 8020678:	2300      	moveq	r3, #0
 802067a:	b2db      	uxtb	r3, r3
 802067c:	2b00      	cmp	r3, #0
 802067e:	d004      	beq.n	802068a <_ZN10LineSensor4InitEv+0x2e>
    {
#ifdef DEBUG_MODE
        g_error_handler_adc1 = true;
 8020680:	4b10      	ldr	r3, [pc, #64]	; (80206c4 <_ZN10LineSensor4InitEv+0x68>)
 8020682:	2201      	movs	r2, #1
 8020684:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8020686:	f001 f901 	bl	802188c <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1) != HAL_OK)
 802068a:	2100      	movs	r1, #0
 802068c:	480e      	ldr	r0, [pc, #56]	; (80206c8 <_ZN10LineSensor4InitEv+0x6c>)
 802068e:	f003 ff2d 	bl	80244ec <HAL_TIM_PWM_Start>
 8020692:	4603      	mov	r3, r0
 8020694:	2b00      	cmp	r3, #0
 8020696:	bf14      	ite	ne
 8020698:	2301      	movne	r3, #1
 802069a:	2300      	moveq	r3, #0
 802069c:	b2db      	uxtb	r3, r3
 802069e:	2b00      	cmp	r3, #0
 80206a0:	d004      	beq.n	80206ac <_ZN10LineSensor4InitEv+0x50>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim11 = true;
 80206a2:	4b0a      	ldr	r3, [pc, #40]	; (80206cc <_ZN10LineSensor4InitEv+0x70>)
 80206a4:	2201      	movs	r2, #1
 80206a6:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 80206a8:	f001 f8f0 	bl	802188c <Error_Handler>
    }

    __HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, LINE_SENSORS_LED_COMPARE);
 80206ac:	4b06      	ldr	r3, [pc, #24]	; (80206c8 <_ZN10LineSensor4InitEv+0x6c>)
 80206ae:	681b      	ldr	r3, [r3, #0]
 80206b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80206b4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80206b6:	bf00      	nop
 80206b8:	3708      	adds	r7, #8
 80206ba:	46bd      	mov	sp, r7
 80206bc:	bd80      	pop	{r7, pc}
 80206be:	bf00      	nop
 80206c0:	2000063c 	.word	0x2000063c
 80206c4:	2000002d 	.word	0x2000002d
 80206c8:	20000684 	.word	0x20000684
 80206cc:	2000002e 	.word	0x2000002e

080206d0 <_ZN10LineSensor20StoreConsecutiveBuffEv>:

void LineSensor::StoreConsecutiveBuff()
{
 80206d0:	b480      	push	{r7}
 80206d2:	b085      	sub	sp, #20
 80206d4:	af00      	add	r7, sp, #0
 80206d6:	6078      	str	r0, [r7, #4]
    static uint8_t times = 0;

    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 80206d8:	2300      	movs	r3, #0
 80206da:	60fb      	str	r3, [r7, #12]
 80206dc:	68fb      	ldr	r3, [r7, #12]
 80206de:	2b0d      	cmp	r3, #13
 80206e0:	dc16      	bgt.n	8020710 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x40>
    {
        consecutive_line_sensors_buff_[times][i] = line_sensors_buff_[i];
 80206e2:	4b15      	ldr	r3, [pc, #84]	; (8020738 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 80206e4:	781b      	ldrb	r3, [r3, #0]
 80206e6:	4619      	mov	r1, r3
 80206e8:	687b      	ldr	r3, [r7, #4]
 80206ea:	68fa      	ldr	r2, [r7, #12]
 80206ec:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80206f0:	687a      	ldr	r2, [r7, #4]
 80206f2:	460b      	mov	r3, r1
 80206f4:	00db      	lsls	r3, r3, #3
 80206f6:	1a5b      	subs	r3, r3, r1
 80206f8:	005b      	lsls	r3, r3, #1
 80206fa:	68f9      	ldr	r1, [r7, #12]
 80206fc:	440b      	add	r3, r1
 80206fe:	330c      	adds	r3, #12
 8020700:	005b      	lsls	r3, r3, #1
 8020702:	4413      	add	r3, r2
 8020704:	4602      	mov	r2, r0
 8020706:	809a      	strh	r2, [r3, #4]
    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8020708:	68fb      	ldr	r3, [r7, #12]
 802070a:	3301      	adds	r3, #1
 802070c:	60fb      	str	r3, [r7, #12]
 802070e:	e7e5      	b.n	80206dc <_ZN10LineSensor20StoreConsecutiveBuffEv+0xc>
    }

    if(times < CONSECUTIVE_TIMES) times++;
 8020710:	4b09      	ldr	r3, [pc, #36]	; (8020738 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8020712:	781b      	ldrb	r3, [r3, #0]
 8020714:	2b09      	cmp	r3, #9
 8020716:	d806      	bhi.n	8020726 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x56>
 8020718:	4b07      	ldr	r3, [pc, #28]	; (8020738 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 802071a:	781b      	ldrb	r3, [r3, #0]
 802071c:	3301      	adds	r3, #1
 802071e:	b2da      	uxtb	r2, r3
 8020720:	4b05      	ldr	r3, [pc, #20]	; (8020738 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8020722:	701a      	strb	r2, [r3, #0]
    else times = 0;
}
 8020724:	e002      	b.n	802072c <_ZN10LineSensor20StoreConsecutiveBuffEv+0x5c>
    else times = 0;
 8020726:	4b04      	ldr	r3, [pc, #16]	; (8020738 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8020728:	2200      	movs	r2, #0
 802072a:	701a      	strb	r2, [r3, #0]
}
 802072c:	bf00      	nop
 802072e:	3714      	adds	r7, #20
 8020730:	46bd      	mov	sp, r7
 8020732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020736:	4770      	bx	lr
 8020738:	2000002c 	.word	0x2000002c

0802073c <_ZN10LineSensor9MergeSortEPthh>:

void LineSensor::MergeSort(uint16_t array[], uint8_t first_index, uint8_t last_index)
{
 802073c:	b5b0      	push	{r4, r5, r7, lr}
 802073e:	b088      	sub	sp, #32
 8020740:	af00      	add	r7, sp, #0
 8020742:	60f8      	str	r0, [r7, #12]
 8020744:	60b9      	str	r1, [r7, #8]
 8020746:	4611      	mov	r1, r2
 8020748:	461a      	mov	r2, r3
 802074a:	460b      	mov	r3, r1
 802074c:	71fb      	strb	r3, [r7, #7]
 802074e:	4613      	mov	r3, r2
 8020750:	71bb      	strb	r3, [r7, #6]

    for(i = first_index; i <= last_index; i++)
    {
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
        else                                     array[i] = temp_array[right--];
    }
 8020752:	466b      	mov	r3, sp
 8020754:	461d      	mov	r5, r3
    if(first_index >= last_index) return;
 8020756:	79fa      	ldrb	r2, [r7, #7]
 8020758:	79bb      	ldrb	r3, [r7, #6]
 802075a:	429a      	cmp	r2, r3
 802075c:	f080 80ba 	bcs.w	80208d4 <_ZN10LineSensor9MergeSortEPthh+0x198>
    uint16_t temp_array[last_index+1];
 8020760:	79b8      	ldrb	r0, [r7, #6]
 8020762:	61b8      	str	r0, [r7, #24]
 8020764:	4603      	mov	r3, r0
 8020766:	3301      	adds	r3, #1
 8020768:	4619      	mov	r1, r3
 802076a:	f04f 0200 	mov.w	r2, #0
 802076e:	f04f 0300 	mov.w	r3, #0
 8020772:	f04f 0400 	mov.w	r4, #0
 8020776:	0114      	lsls	r4, r2, #4
 8020778:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 802077c:	010b      	lsls	r3, r1, #4
 802077e:	4603      	mov	r3, r0
 8020780:	3301      	adds	r3, #1
 8020782:	4619      	mov	r1, r3
 8020784:	f04f 0200 	mov.w	r2, #0
 8020788:	f04f 0300 	mov.w	r3, #0
 802078c:	f04f 0400 	mov.w	r4, #0
 8020790:	0114      	lsls	r4, r2, #4
 8020792:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 8020796:	010b      	lsls	r3, r1, #4
 8020798:	4603      	mov	r3, r0
 802079a:	3301      	adds	r3, #1
 802079c:	005b      	lsls	r3, r3, #1
 802079e:	3301      	adds	r3, #1
 80207a0:	3307      	adds	r3, #7
 80207a2:	08db      	lsrs	r3, r3, #3
 80207a4:	00db      	lsls	r3, r3, #3
 80207a6:	ebad 0d03 	sub.w	sp, sp, r3
 80207aa:	466b      	mov	r3, sp
 80207ac:	3301      	adds	r3, #1
 80207ae:	085b      	lsrs	r3, r3, #1
 80207b0:	005b      	lsls	r3, r3, #1
 80207b2:	617b      	str	r3, [r7, #20]
    middle = (first_index + last_index) / 2;
 80207b4:	79fa      	ldrb	r2, [r7, #7]
 80207b6:	79bb      	ldrb	r3, [r7, #6]
 80207b8:	4413      	add	r3, r2
 80207ba:	0fda      	lsrs	r2, r3, #31
 80207bc:	4413      	add	r3, r2
 80207be:	105b      	asrs	r3, r3, #1
 80207c0:	74fb      	strb	r3, [r7, #19]
    MergeSort(array, first_index, middle);
 80207c2:	7cfb      	ldrb	r3, [r7, #19]
 80207c4:	79fa      	ldrb	r2, [r7, #7]
 80207c6:	68b9      	ldr	r1, [r7, #8]
 80207c8:	68f8      	ldr	r0, [r7, #12]
 80207ca:	f7ff ffb7 	bl	802073c <_ZN10LineSensor9MergeSortEPthh>
    MergeSort(array, middle+1, last_index);
 80207ce:	7cfb      	ldrb	r3, [r7, #19]
 80207d0:	3301      	adds	r3, #1
 80207d2:	b2da      	uxtb	r2, r3
 80207d4:	79bb      	ldrb	r3, [r7, #6]
 80207d6:	68b9      	ldr	r1, [r7, #8]
 80207d8:	68f8      	ldr	r0, [r7, #12]
 80207da:	f7ff ffaf 	bl	802073c <_ZN10LineSensor9MergeSortEPthh>
    for(i = middle; i >= first_index; i--)
 80207de:	7cfb      	ldrb	r3, [r7, #19]
 80207e0:	77bb      	strb	r3, [r7, #30]
 80207e2:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80207e6:	79fb      	ldrb	r3, [r7, #7]
 80207e8:	429a      	cmp	r2, r3
 80207ea:	db11      	blt.n	8020810 <_ZN10LineSensor9MergeSortEPthh+0xd4>
        temp_array[i] = array[i];
 80207ec:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80207f0:	005b      	lsls	r3, r3, #1
 80207f2:	68ba      	ldr	r2, [r7, #8]
 80207f4:	4413      	add	r3, r2
 80207f6:	f997 201e 	ldrsb.w	r2, [r7, #30]
 80207fa:	8819      	ldrh	r1, [r3, #0]
 80207fc:	697b      	ldr	r3, [r7, #20]
 80207fe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle; i >= first_index; i--)
 8020802:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8020806:	b2db      	uxtb	r3, r3
 8020808:	3b01      	subs	r3, #1
 802080a:	b2db      	uxtb	r3, r3
 802080c:	77bb      	strb	r3, [r7, #30]
 802080e:	e7e8      	b.n	80207e2 <_ZN10LineSensor9MergeSortEPthh+0xa6>
    for(i = middle+1; i <= last_index; i++)
 8020810:	7cfb      	ldrb	r3, [r7, #19]
 8020812:	3301      	adds	r3, #1
 8020814:	b2db      	uxtb	r3, r3
 8020816:	77bb      	strb	r3, [r7, #30]
 8020818:	f997 201e 	ldrsb.w	r2, [r7, #30]
 802081c:	79bb      	ldrb	r3, [r7, #6]
 802081e:	429a      	cmp	r2, r3
 8020820:	dc17      	bgt.n	8020852 <_ZN10LineSensor9MergeSortEPthh+0x116>
        temp_array[last_index - (i - (middle+1))] = array[i];
 8020822:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8020826:	005b      	lsls	r3, r3, #1
 8020828:	68ba      	ldr	r2, [r7, #8]
 802082a:	4413      	add	r3, r2
 802082c:	79b9      	ldrb	r1, [r7, #6]
 802082e:	f997 001e 	ldrsb.w	r0, [r7, #30]
 8020832:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8020836:	3201      	adds	r2, #1
 8020838:	1a82      	subs	r2, r0, r2
 802083a:	1a8a      	subs	r2, r1, r2
 802083c:	8819      	ldrh	r1, [r3, #0]
 802083e:	697b      	ldr	r3, [r7, #20]
 8020840:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle+1; i <= last_index; i++)
 8020844:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8020848:	b2db      	uxtb	r3, r3
 802084a:	3301      	adds	r3, #1
 802084c:	b2db      	uxtb	r3, r3
 802084e:	77bb      	strb	r3, [r7, #30]
 8020850:	e7e2      	b.n	8020818 <_ZN10LineSensor9MergeSortEPthh+0xdc>
    left  = first_index;
 8020852:	79fb      	ldrb	r3, [r7, #7]
 8020854:	77fb      	strb	r3, [r7, #31]
    right = last_index;
 8020856:	79bb      	ldrb	r3, [r7, #6]
 8020858:	777b      	strb	r3, [r7, #29]
    for(i = first_index; i <= last_index; i++)
 802085a:	79fb      	ldrb	r3, [r7, #7]
 802085c:	77bb      	strb	r3, [r7, #30]
 802085e:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8020862:	79bb      	ldrb	r3, [r7, #6]
 8020864:	429a      	cmp	r2, r3
 8020866:	dc33      	bgt.n	80208d0 <_ZN10LineSensor9MergeSortEPthh+0x194>
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
 8020868:	f997 201f 	ldrsb.w	r2, [r7, #31]
 802086c:	697b      	ldr	r3, [r7, #20]
 802086e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8020872:	f997 101d 	ldrsb.w	r1, [r7, #29]
 8020876:	697b      	ldr	r3, [r7, #20]
 8020878:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 802087c:	429a      	cmp	r2, r3
 802087e:	d210      	bcs.n	80208a2 <_ZN10LineSensor9MergeSortEPthh+0x166>
 8020880:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8020884:	b2d3      	uxtb	r3, r2
 8020886:	3301      	adds	r3, #1
 8020888:	b2db      	uxtb	r3, r3
 802088a:	77fb      	strb	r3, [r7, #31]
 802088c:	4611      	mov	r1, r2
 802088e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8020892:	005b      	lsls	r3, r3, #1
 8020894:	68ba      	ldr	r2, [r7, #8]
 8020896:	4413      	add	r3, r2
 8020898:	697a      	ldr	r2, [r7, #20]
 802089a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 802089e:	801a      	strh	r2, [r3, #0]
 80208a0:	e00f      	b.n	80208c2 <_ZN10LineSensor9MergeSortEPthh+0x186>
        else                                     array[i] = temp_array[right--];
 80208a2:	f997 201d 	ldrsb.w	r2, [r7, #29]
 80208a6:	b2d3      	uxtb	r3, r2
 80208a8:	3b01      	subs	r3, #1
 80208aa:	b2db      	uxtb	r3, r3
 80208ac:	777b      	strb	r3, [r7, #29]
 80208ae:	4611      	mov	r1, r2
 80208b0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80208b4:	005b      	lsls	r3, r3, #1
 80208b6:	68ba      	ldr	r2, [r7, #8]
 80208b8:	4413      	add	r3, r2
 80208ba:	697a      	ldr	r2, [r7, #20]
 80208bc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80208c0:	801a      	strh	r2, [r3, #0]
    for(i = first_index; i <= last_index; i++)
 80208c2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80208c6:	b2db      	uxtb	r3, r3
 80208c8:	3301      	adds	r3, #1
 80208ca:	b2db      	uxtb	r3, r3
 80208cc:	77bb      	strb	r3, [r7, #30]
 80208ce:	e7c6      	b.n	802085e <_ZN10LineSensor9MergeSortEPthh+0x122>
 80208d0:	46ad      	mov	sp, r5
 80208d2:	e001      	b.n	80208d8 <_ZN10LineSensor9MergeSortEPthh+0x19c>
    if(first_index >= last_index) return;
 80208d4:	bf00      	nop
 80208d6:	46ad      	mov	sp, r5
}
 80208d8:	3720      	adds	r7, #32
 80208da:	46bd      	mov	sp, r7
 80208dc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080208e0 <_ZN10LineSensor3NewEv>:

void LineSensor::New()
{
 80208e0:	b5b0      	push	{r4, r5, r7, lr}
 80208e2:	b0ce      	sub	sp, #312	; 0x138
 80208e4:	af00      	add	r7, sp, #0
 80208e6:	1d3b      	adds	r3, r7, #4
 80208e8:	6018      	str	r0, [r3, #0]
    uint8_t i, j;
    uint16_t temp_array[CONSECUTIVE_TIMES];
    uint16_t sorted_array[NUM_OF_LINE_SENSORS][CONSECUTIVE_TIMES];
    
    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 80208ea:	2300      	movs	r3, #0
 80208ec:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80208f0:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80208f4:	2b0d      	cmp	r3, #13
 80208f6:	d86e      	bhi.n	80209d6 <_ZN10LineSensor3NewEv+0xf6>
    {
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 80208f8:	2300      	movs	r3, #0
 80208fa:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
 80208fe:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 8020902:	2b09      	cmp	r3, #9
 8020904:	d81c      	bhi.n	8020940 <_ZN10LineSensor3NewEv+0x60>
        {
            temp_array[j] = consecutive_line_sensors_buff_[j][i];
 8020906:	f897 2136 	ldrb.w	r2, [r7, #310]	; 0x136
 802090a:	f897 4137 	ldrb.w	r4, [r7, #311]	; 0x137
 802090e:	f897 1136 	ldrb.w	r1, [r7, #310]	; 0x136
 8020912:	1d3b      	adds	r3, r7, #4
 8020914:	6818      	ldr	r0, [r3, #0]
 8020916:	4613      	mov	r3, r2
 8020918:	00db      	lsls	r3, r3, #3
 802091a:	1a9b      	subs	r3, r3, r2
 802091c:	005b      	lsls	r3, r3, #1
 802091e:	4423      	add	r3, r4
 8020920:	330c      	adds	r3, #12
 8020922:	005b      	lsls	r3, r3, #1
 8020924:	4403      	add	r3, r0
 8020926:	889a      	ldrh	r2, [r3, #4]
 8020928:	004b      	lsls	r3, r1, #1
 802092a:	f507 719c 	add.w	r1, r7, #312	; 0x138
 802092e:	440b      	add	r3, r1
 8020930:	f823 2c18 	strh.w	r2, [r3, #-24]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8020934:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 8020938:	3301      	adds	r3, #1
 802093a:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
 802093e:	e7de      	b.n	80208fe <_ZN10LineSensor3NewEv+0x1e>
        }

        MergeSort(temp_array, 0, CONSECUTIVE_TIMES-1);
 8020940:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8020944:	1d38      	adds	r0, r7, #4
 8020946:	2309      	movs	r3, #9
 8020948:	2200      	movs	r2, #0
 802094a:	6800      	ldr	r0, [r0, #0]
 802094c:	f7ff fef6 	bl	802073c <_ZN10LineSensor9MergeSortEPthh>

        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8020950:	2300      	movs	r3, #0
 8020952:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
 8020956:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 802095a:	2b09      	cmp	r3, #9
 802095c:	d835      	bhi.n	80209ca <_ZN10LineSensor3NewEv+0xea>
        {
            sorted_array[i][j] = temp_array[j];
 802095e:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 8020962:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8020966:	f897 0136 	ldrb.w	r0, [r7, #310]	; 0x136
 802096a:	005b      	lsls	r3, r3, #1
 802096c:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8020970:	440b      	add	r3, r1
 8020972:	f833 4c18 	ldrh.w	r4, [r3, #-24]
 8020976:	f107 0108 	add.w	r1, r7, #8
 802097a:	4613      	mov	r3, r2
 802097c:	009b      	lsls	r3, r3, #2
 802097e:	4413      	add	r3, r2
 8020980:	005b      	lsls	r3, r3, #1
 8020982:	4403      	add	r3, r0
 8020984:	4622      	mov	r2, r4
 8020986:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            g_consecutive_line_buff[i][j] = sorted_array[i][j];
 802098a:	f897 1137 	ldrb.w	r1, [r7, #311]	; 0x137
 802098e:	f897 5136 	ldrb.w	r5, [r7, #310]	; 0x136
 8020992:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8020996:	f897 0136 	ldrb.w	r0, [r7, #310]	; 0x136
 802099a:	f107 0408 	add.w	r4, r7, #8
 802099e:	460b      	mov	r3, r1
 80209a0:	009b      	lsls	r3, r3, #2
 80209a2:	440b      	add	r3, r1
 80209a4:	005b      	lsls	r3, r3, #1
 80209a6:	442b      	add	r3, r5
 80209a8:	f834 4013 	ldrh.w	r4, [r4, r3, lsl #1]
 80209ac:	4926      	ldr	r1, [pc, #152]	; (8020a48 <_ZN10LineSensor3NewEv+0x168>)
 80209ae:	4613      	mov	r3, r2
 80209b0:	009b      	lsls	r3, r3, #2
 80209b2:	4413      	add	r3, r2
 80209b4:	005b      	lsls	r3, r3, #1
 80209b6:	4403      	add	r3, r0
 80209b8:	4622      	mov	r2, r4
 80209ba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 80209be:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 80209c2:	3301      	adds	r3, #1
 80209c4:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
 80209c8:	e7c5      	b.n	8020956 <_ZN10LineSensor3NewEv+0x76>
    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 80209ca:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80209ce:	3301      	adds	r3, #1
 80209d0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80209d4:	e78c      	b.n	80208f0 <_ZN10LineSensor3NewEv+0x10>
        }
    }

    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 80209d6:	2300      	movs	r3, #0
 80209d8:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80209dc:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80209e0:	2b0d      	cmp	r3, #13
 80209e2:	d82b      	bhi.n	8020a3c <_ZN10LineSensor3NewEv+0x15c>
    {
        
        g_max_line_valu[i] = max_line_sensors_valu_[i];
 80209e4:	f897 1137 	ldrb.w	r1, [r7, #311]	; 0x137
 80209e8:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80209ec:	1d3a      	adds	r2, r7, #4
 80209ee:	6812      	ldr	r2, [r2, #0]
 80209f0:	31a8      	adds	r1, #168	; 0xa8
 80209f2:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80209f6:	4a15      	ldr	r2, [pc, #84]	; (8020a4c <_ZN10LineSensor3NewEv+0x16c>)
 80209f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        g_min_line_valu[i] = min_line_sensors_valu_[i];
 80209fc:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8020a00:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8020a04:	1d39      	adds	r1, r7, #4
 8020a06:	6809      	ldr	r1, [r1, #0]
 8020a08:	3398      	adds	r3, #152	; 0x98
 8020a0a:	005b      	lsls	r3, r3, #1
 8020a0c:	440b      	add	r3, r1
 8020a0e:	8899      	ldrh	r1, [r3, #4]
 8020a10:	4b0f      	ldr	r3, [pc, #60]	; (8020a50 <_ZN10LineSensor3NewEv+0x170>)
 8020a12:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        g_line_valu[i] = line_sensors_valu_[i];
 8020a16:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8020a1a:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8020a1e:	1d39      	adds	r1, r7, #4
 8020a20:	6809      	ldr	r1, [r1, #0]
 8020a22:	33b4      	adds	r3, #180	; 0xb4
 8020a24:	005b      	lsls	r3, r3, #1
 8020a26:	440b      	add	r3, r1
 8020a28:	8899      	ldrh	r1, [r3, #4]
 8020a2a:	4b0a      	ldr	r3, [pc, #40]	; (8020a54 <_ZN10LineSensor3NewEv+0x174>)
 8020a2c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8020a30:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8020a34:	3301      	adds	r3, #1
 8020a36:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8020a3a:	e7cf      	b.n	80209dc <_ZN10LineSensor3NewEv+0xfc>
            min_line_sensors_valu_[i] = sorted_array[i][HALF_CONSECUTIVE_TIMES];
            g_min_line_valu[i] = min_line_sensors_valu_[i];
        }
        */
    }
}
 8020a3c:	bf00      	nop
 8020a3e:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8020a42:	46bd      	mov	sp, r7
 8020a44:	bdb0      	pop	{r4, r5, r7, pc}
 8020a46:	bf00      	nop
 8020a48:	2000004c 	.word	0x2000004c
 8020a4c:	20000164 	.word	0x20000164
 8020a50:	20000180 	.word	0x20000180
 8020a54:	2000019c 	.word	0x2000019c

08020a58 <_ZN10LineSensor13MonitorArraysEv>:
    return result;
}

#ifdef DEBUG_MODE
void LineSensor::MonitorArrays()
{
 8020a58:	b480      	push	{r7}
 8020a5a:	b085      	sub	sp, #20
 8020a5c:	af00      	add	r7, sp, #0
 8020a5e:	6078      	str	r0, [r7, #4]
    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8020a60:	2300      	movs	r3, #0
 8020a62:	73fb      	strb	r3, [r7, #15]
 8020a64:	7bfb      	ldrb	r3, [r7, #15]
 8020a66:	2b0d      	cmp	r3, #13
 8020a68:	d80b      	bhi.n	8020a82 <_ZN10LineSensor13MonitorArraysEv+0x2a>
    {
        g_line_buff[i] = line_sensors_buff_[i];
 8020a6a:	7bf9      	ldrb	r1, [r7, #15]
 8020a6c:	7bfb      	ldrb	r3, [r7, #15]
 8020a6e:	687a      	ldr	r2, [r7, #4]
 8020a70:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8020a74:	4a06      	ldr	r2, [pc, #24]	; (8020a90 <_ZN10LineSensor13MonitorArraysEv+0x38>)
 8020a76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8020a7a:	7bfb      	ldrb	r3, [r7, #15]
 8020a7c:	3301      	adds	r3, #1
 8020a7e:	73fb      	strb	r3, [r7, #15]
 8020a80:	e7f0      	b.n	8020a64 <_ZN10LineSensor13MonitorArraysEv+0xc>
    }
}
 8020a82:	bf00      	nop
 8020a84:	3714      	adds	r7, #20
 8020a86:	46bd      	mov	sp, r7
 8020a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a8c:	4770      	bx	lr
 8020a8e:	bf00      	nop
 8020a90:	20000030 	.word	0x20000030

08020a94 <_ZN9LineTraceC1EP10LineSensor>:
#include "line_trace.hpp"

LineTrace::LineTrace(LineSensor *line_sensor) : integral_error_(0)
 8020a94:	b480      	push	{r7}
 8020a96:	b083      	sub	sp, #12
 8020a98:	af00      	add	r7, sp, #0
 8020a9a:	6078      	str	r0, [r7, #4]
 8020a9c:	6039      	str	r1, [r7, #0]
 8020a9e:	687b      	ldr	r3, [r7, #4]
 8020aa0:	f04f 0200 	mov.w	r2, #0
 8020aa4:	601a      	str	r2, [r3, #0]
{
    line_sensor_ = line_sensor;
 8020aa6:	687b      	ldr	r3, [r7, #4]
 8020aa8:	683a      	ldr	r2, [r7, #0]
 8020aaa:	605a      	str	r2, [r3, #4]
}
 8020aac:	687b      	ldr	r3, [r7, #4]
 8020aae:	4618      	mov	r0, r3
 8020ab0:	370c      	adds	r7, #12
 8020ab2:	46bd      	mov	sp, r7
 8020ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ab8:	4770      	bx	lr
	...

08020abc <_ZN6LoggerC1Ev>:
#include "logger.hpp"
#include <math.h>
#include <string.h>

Logger::Logger() : const_distance_log_(), radian_log_(), various_log_(), const_distance_copy_(), radian_copy_(), various_copy_(), accel_address_(), decel_address_(), periodic_write_enable_(0), accel_position_write_enable_(0), excess_stack_(0), target_velocity_(MIN_VELOCITY) {}
 8020abc:	b580      	push	{r7, lr}
 8020abe:	b082      	sub	sp, #8
 8020ac0:	af00      	add	r7, sp, #0
 8020ac2:	6078      	str	r0, [r7, #4]
 8020ac4:	687a      	ldr	r2, [r7, #4]
 8020ac6:	2309      	movs	r3, #9
 8020ac8:	2b00      	cmp	r3, #0
 8020aca:	db05      	blt.n	8020ad8 <_ZN6LoggerC1Ev+0x1c>
 8020acc:	f04f 0100 	mov.w	r1, #0
 8020ad0:	6011      	str	r1, [r2, #0]
 8020ad2:	3204      	adds	r2, #4
 8020ad4:	3b01      	subs	r3, #1
 8020ad6:	e7f7      	b.n	8020ac8 <_ZN6LoggerC1Ev+0xc>
 8020ad8:	687b      	ldr	r3, [r7, #4]
 8020ada:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8020ade:	2309      	movs	r3, #9
 8020ae0:	2b00      	cmp	r3, #0
 8020ae2:	db05      	blt.n	8020af0 <_ZN6LoggerC1Ev+0x34>
 8020ae4:	f04f 0100 	mov.w	r1, #0
 8020ae8:	6011      	str	r1, [r2, #0]
 8020aea:	3204      	adds	r2, #4
 8020aec:	3b01      	subs	r3, #1
 8020aee:	e7f7      	b.n	8020ae0 <_ZN6LoggerC1Ev+0x24>
 8020af0:	687b      	ldr	r3, [r7, #4]
 8020af2:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8020af6:	2309      	movs	r3, #9
 8020af8:	2b00      	cmp	r3, #0
 8020afa:	db04      	blt.n	8020b06 <_ZN6LoggerC1Ev+0x4a>
 8020afc:	2100      	movs	r1, #0
 8020afe:	8011      	strh	r1, [r2, #0]
 8020b00:	3202      	adds	r2, #2
 8020b02:	3b01      	subs	r3, #1
 8020b04:	e7f8      	b.n	8020af8 <_ZN6LoggerC1Ev+0x3c>
 8020b06:	687b      	ldr	r3, [r7, #4]
 8020b08:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8020b0c:	2309      	movs	r3, #9
 8020b0e:	2b00      	cmp	r3, #0
 8020b10:	db05      	blt.n	8020b1e <_ZN6LoggerC1Ev+0x62>
 8020b12:	f04f 0100 	mov.w	r1, #0
 8020b16:	6011      	str	r1, [r2, #0]
 8020b18:	3204      	adds	r2, #4
 8020b1a:	3b01      	subs	r3, #1
 8020b1c:	e7f7      	b.n	8020b0e <_ZN6LoggerC1Ev+0x52>
 8020b1e:	687b      	ldr	r3, [r7, #4]
 8020b20:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 8020b24:	2309      	movs	r3, #9
 8020b26:	2b00      	cmp	r3, #0
 8020b28:	db05      	blt.n	8020b36 <_ZN6LoggerC1Ev+0x7a>
 8020b2a:	f04f 0100 	mov.w	r1, #0
 8020b2e:	6011      	str	r1, [r2, #0]
 8020b30:	3204      	adds	r2, #4
 8020b32:	3b01      	subs	r3, #1
 8020b34:	e7f7      	b.n	8020b26 <_ZN6LoggerC1Ev+0x6a>
 8020b36:	687b      	ldr	r3, [r7, #4]
 8020b38:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8020b3c:	2309      	movs	r3, #9
 8020b3e:	2b00      	cmp	r3, #0
 8020b40:	db04      	blt.n	8020b4c <_ZN6LoggerC1Ev+0x90>
 8020b42:	2100      	movs	r1, #0
 8020b44:	8011      	strh	r1, [r2, #0]
 8020b46:	3202      	adds	r2, #2
 8020b48:	3b01      	subs	r3, #1
 8020b4a:	e7f8      	b.n	8020b3e <_ZN6LoggerC1Ev+0x82>
 8020b4c:	687b      	ldr	r3, [r7, #4]
 8020b4e:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 8020b52:	2304      	movs	r3, #4
 8020b54:	2b00      	cmp	r3, #0
 8020b56:	db04      	blt.n	8020b62 <_ZN6LoggerC1Ev+0xa6>
 8020b58:	2100      	movs	r1, #0
 8020b5a:	8011      	strh	r1, [r2, #0]
 8020b5c:	3202      	adds	r2, #2
 8020b5e:	3b01      	subs	r3, #1
 8020b60:	e7f8      	b.n	8020b54 <_ZN6LoggerC1Ev+0x98>
 8020b62:	687b      	ldr	r3, [r7, #4]
 8020b64:	f103 02d2 	add.w	r2, r3, #210	; 0xd2
 8020b68:	2304      	movs	r3, #4
 8020b6a:	2b00      	cmp	r3, #0
 8020b6c:	db04      	blt.n	8020b78 <_ZN6LoggerC1Ev+0xbc>
 8020b6e:	2100      	movs	r1, #0
 8020b70:	8011      	strh	r1, [r2, #0]
 8020b72:	3202      	adds	r2, #2
 8020b74:	3b01      	subs	r3, #1
 8020b76:	e7f8      	b.n	8020b6a <_ZN6LoggerC1Ev+0xae>
 8020b78:	687b      	ldr	r3, [r7, #4]
 8020b7a:	2200      	movs	r2, #0
 8020b7c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8020b80:	687b      	ldr	r3, [r7, #4]
 8020b82:	2200      	movs	r2, #0
 8020b84:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 8020b88:	687b      	ldr	r3, [r7, #4]
 8020b8a:	f04f 0200 	mov.w	r2, #0
 8020b8e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8020b92:	687b      	ldr	r3, [r7, #4]
 8020b94:	4a0b      	ldr	r2, [pc, #44]	; (8020bc4 <_ZN6LoggerC1Ev+0x108>)
 8020b96:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8020b9a:	687b      	ldr	r3, [r7, #4]
 8020b9c:	33e8      	adds	r3, #232	; 0xe8
 8020b9e:	4618      	mov	r0, r3
 8020ba0:	f7ff fbce 	bl	8020340 <_ZN7EncoderC1Ev>
 8020ba4:	687b      	ldr	r3, [r7, #4]
 8020ba6:	33f8      	adds	r3, #248	; 0xf8
 8020ba8:	4618      	mov	r0, r3
 8020baa:	f7ff fbe0 	bl	802036e <_ZN8Iim42652C1Ev>
 8020bae:	687b      	ldr	r3, [r7, #4]
 8020bb0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8020bb4:	4618      	mov	r0, r3
 8020bb6:	f000 fe6d 	bl	8021894 <_ZN10SideSensorC1Ev>
 8020bba:	687b      	ldr	r3, [r7, #4]
 8020bbc:	4618      	mov	r0, r3
 8020bbe:	3708      	adds	r7, #8
 8020bc0:	46bd      	mov	sp, r7
 8020bc2:	bd80      	pop	{r7, pc}
 8020bc4:	3fa66666 	.word	0x3fa66666

08020bc8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8020bc8:	b580      	push	{r7, lr}
 8020bca:	b082      	sub	sp, #8
 8020bcc:	af00      	add	r7, sp, #0
 8020bce:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 8020bd0:	687b      	ldr	r3, [r7, #4]
 8020bd2:	681b      	ldr	r3, [r3, #0]
 8020bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020bd8:	d101      	bne.n	8020bde <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    InterruptTim2();
 8020bda:	f001 fb0b 	bl	80221f4 <InterruptTim2>
  }
  if(htim->Instance == TIM6)
 8020bde:	687b      	ldr	r3, [r7, #4]
 8020be0:	681b      	ldr	r3, [r3, #0]
 8020be2:	4a08      	ldr	r2, [pc, #32]	; (8020c04 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8020be4:	4293      	cmp	r3, r2
 8020be6:	d101      	bne.n	8020bec <HAL_TIM_PeriodElapsedCallback+0x24>
  {
    InterruptTim6();
 8020be8:	f001 faf4 	bl	80221d4 <InterruptTim6>
  }
  if(htim->Instance == TIM7)
 8020bec:	687b      	ldr	r3, [r7, #4]
 8020bee:	681b      	ldr	r3, [r3, #0]
 8020bf0:	4a05      	ldr	r2, [pc, #20]	; (8020c08 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8020bf2:	4293      	cmp	r3, r2
 8020bf4:	d101      	bne.n	8020bfa <HAL_TIM_PeriodElapsedCallback+0x32>
  {
    InterruptTim7();
 8020bf6:	f001 fadd 	bl	80221b4 <InterruptTim7>
  }
}
 8020bfa:	bf00      	nop
 8020bfc:	3708      	adds	r7, #8
 8020bfe:	46bd      	mov	sp, r7
 8020c00:	bd80      	pop	{r7, pc}
 8020c02:	bf00      	nop
 8020c04:	40001000 	.word	0x40001000
 8020c08:	40001400 	.word	0x40001400

08020c0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020c0c:	b580      	push	{r7, lr}
 8020c0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020c10:	f001 fb72 	bl	80222f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8020c14:	f000 f822 	bl	8020c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8020c18:	f000 fd68 	bl	80216ec <MX_GPIO_Init>
  MX_DMA_Init();
 8020c1c:	f000 fd46 	bl	80216ac <MX_DMA_Init>
  MX_ADC1_Init();
 8020c20:	f000 f886 	bl	8020d30 <MX_ADC1_Init>
  MX_I2C2_Init();
 8020c24:	f000 f98c 	bl	8020f40 <MX_I2C2_Init>
  MX_SPI3_Init();
 8020c28:	f000 f9b8 	bl	8020f9c <MX_SPI3_Init>
  MX_TIM1_Init();
 8020c2c:	f000 f9ec 	bl	8021008 <MX_TIM1_Init>
  MX_TIM3_Init();
 8020c30:	f000 fac8 	bl	80211c4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8020c34:	f000 fb40 	bl	80212b8 <MX_TIM4_Init>
  MX_TIM6_Init();
 8020c38:	f000 fbe0 	bl	80213fc <MX_TIM6_Init>
  MX_TIM7_Init();
 8020c3c:	f000 fc14 	bl	8021468 <MX_TIM7_Init>
  MX_TIM8_Init();
 8020c40:	f000 fc48 	bl	80214d4 <MX_TIM8_Init>
  MX_TIM11_Init();
 8020c44:	f000 fc9e 	bl	8021584 <MX_TIM11_Init>
  MX_TIM12_Init();
 8020c48:	f000 fcea 	bl	8021620 <MX_TIM12_Init>
  MX_TIM2_Init();
 8020c4c:	f000 fa6c 	bl	8021128 <MX_TIM2_Init>
  MX_TIM5_Init();
 8020c50:	f000 fb86 	bl	8021360 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  Init();
 8020c54:	f001 faa4 	bl	80221a0 <Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8020c58:	e7fe      	b.n	8020c58 <main+0x4c>
	...

08020c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8020c5c:	b580      	push	{r7, lr}
 8020c5e:	b094      	sub	sp, #80	; 0x50
 8020c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8020c62:	f107 0320 	add.w	r3, r7, #32
 8020c66:	2230      	movs	r2, #48	; 0x30
 8020c68:	2100      	movs	r1, #0
 8020c6a:	4618      	mov	r0, r3
 8020c6c:	f004 fbd2 	bl	8025414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8020c70:	f107 030c 	add.w	r3, r7, #12
 8020c74:	2200      	movs	r2, #0
 8020c76:	601a      	str	r2, [r3, #0]
 8020c78:	605a      	str	r2, [r3, #4]
 8020c7a:	609a      	str	r2, [r3, #8]
 8020c7c:	60da      	str	r2, [r3, #12]
 8020c7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8020c80:	2300      	movs	r3, #0
 8020c82:	60bb      	str	r3, [r7, #8]
 8020c84:	4b28      	ldr	r3, [pc, #160]	; (8020d28 <SystemClock_Config+0xcc>)
 8020c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020c88:	4a27      	ldr	r2, [pc, #156]	; (8020d28 <SystemClock_Config+0xcc>)
 8020c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8020c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8020c90:	4b25      	ldr	r3, [pc, #148]	; (8020d28 <SystemClock_Config+0xcc>)
 8020c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020c98:	60bb      	str	r3, [r7, #8]
 8020c9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8020c9c:	2300      	movs	r3, #0
 8020c9e:	607b      	str	r3, [r7, #4]
 8020ca0:	4b22      	ldr	r3, [pc, #136]	; (8020d2c <SystemClock_Config+0xd0>)
 8020ca2:	681b      	ldr	r3, [r3, #0]
 8020ca4:	4a21      	ldr	r2, [pc, #132]	; (8020d2c <SystemClock_Config+0xd0>)
 8020ca6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020caa:	6013      	str	r3, [r2, #0]
 8020cac:	4b1f      	ldr	r3, [pc, #124]	; (8020d2c <SystemClock_Config+0xd0>)
 8020cae:	681b      	ldr	r3, [r3, #0]
 8020cb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020cb4:	607b      	str	r3, [r7, #4]
 8020cb6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8020cb8:	2301      	movs	r3, #1
 8020cba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8020cbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8020cc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8020cc2:	2302      	movs	r3, #2
 8020cc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8020cc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8020cca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8020ccc:	2306      	movs	r3, #6
 8020cce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8020cd0:	23a8      	movs	r3, #168	; 0xa8
 8020cd2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8020cd4:	2302      	movs	r3, #2
 8020cd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8020cd8:	2304      	movs	r3, #4
 8020cda:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8020cdc:	f107 0320 	add.w	r3, r7, #32
 8020ce0:	4618      	mov	r0, r3
 8020ce2:	f002 fefd 	bl	8023ae0 <HAL_RCC_OscConfig>
 8020ce6:	4603      	mov	r3, r0
 8020ce8:	2b00      	cmp	r3, #0
 8020cea:	d001      	beq.n	8020cf0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8020cec:	f000 fdce 	bl	802188c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8020cf0:	230f      	movs	r3, #15
 8020cf2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8020cf4:	2302      	movs	r3, #2
 8020cf6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8020cf8:	2300      	movs	r3, #0
 8020cfa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8020cfc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8020d00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8020d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8020d06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8020d08:	f107 030c 	add.w	r3, r7, #12
 8020d0c:	2105      	movs	r1, #5
 8020d0e:	4618      	mov	r0, r3
 8020d10:	f003 f956 	bl	8023fc0 <HAL_RCC_ClockConfig>
 8020d14:	4603      	mov	r3, r0
 8020d16:	2b00      	cmp	r3, #0
 8020d18:	d001      	beq.n	8020d1e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8020d1a:	f000 fdb7 	bl	802188c <Error_Handler>
  }
}
 8020d1e:	bf00      	nop
 8020d20:	3750      	adds	r7, #80	; 0x50
 8020d22:	46bd      	mov	sp, r7
 8020d24:	bd80      	pop	{r7, pc}
 8020d26:	bf00      	nop
 8020d28:	40023800 	.word	0x40023800
 8020d2c:	40007000 	.word	0x40007000

08020d30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8020d30:	b580      	push	{r7, lr}
 8020d32:	b084      	sub	sp, #16
 8020d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8020d36:	463b      	mov	r3, r7
 8020d38:	2200      	movs	r2, #0
 8020d3a:	601a      	str	r2, [r3, #0]
 8020d3c:	605a      	str	r2, [r3, #4]
 8020d3e:	609a      	str	r2, [r3, #8]
 8020d40:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8020d42:	4b7c      	ldr	r3, [pc, #496]	; (8020f34 <MX_ADC1_Init+0x204>)
 8020d44:	4a7c      	ldr	r2, [pc, #496]	; (8020f38 <MX_ADC1_Init+0x208>)
 8020d46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8020d48:	4b7a      	ldr	r3, [pc, #488]	; (8020f34 <MX_ADC1_Init+0x204>)
 8020d4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8020d4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8020d50:	4b78      	ldr	r3, [pc, #480]	; (8020f34 <MX_ADC1_Init+0x204>)
 8020d52:	2200      	movs	r2, #0
 8020d54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8020d56:	4b77      	ldr	r3, [pc, #476]	; (8020f34 <MX_ADC1_Init+0x204>)
 8020d58:	2201      	movs	r2, #1
 8020d5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8020d5c:	4b75      	ldr	r3, [pc, #468]	; (8020f34 <MX_ADC1_Init+0x204>)
 8020d5e:	2201      	movs	r2, #1
 8020d60:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8020d62:	4b74      	ldr	r3, [pc, #464]	; (8020f34 <MX_ADC1_Init+0x204>)
 8020d64:	2200      	movs	r2, #0
 8020d66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8020d6a:	4b72      	ldr	r3, [pc, #456]	; (8020f34 <MX_ADC1_Init+0x204>)
 8020d6c:	2200      	movs	r2, #0
 8020d6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8020d70:	4b70      	ldr	r3, [pc, #448]	; (8020f34 <MX_ADC1_Init+0x204>)
 8020d72:	4a72      	ldr	r2, [pc, #456]	; (8020f3c <MX_ADC1_Init+0x20c>)
 8020d74:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8020d76:	4b6f      	ldr	r3, [pc, #444]	; (8020f34 <MX_ADC1_Init+0x204>)
 8020d78:	2200      	movs	r2, #0
 8020d7a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8020d7c:	4b6d      	ldr	r3, [pc, #436]	; (8020f34 <MX_ADC1_Init+0x204>)
 8020d7e:	220e      	movs	r2, #14
 8020d80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8020d82:	4b6c      	ldr	r3, [pc, #432]	; (8020f34 <MX_ADC1_Init+0x204>)
 8020d84:	2201      	movs	r2, #1
 8020d86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8020d8a:	4b6a      	ldr	r3, [pc, #424]	; (8020f34 <MX_ADC1_Init+0x204>)
 8020d8c:	2201      	movs	r2, #1
 8020d8e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8020d90:	4868      	ldr	r0, [pc, #416]	; (8020f34 <MX_ADC1_Init+0x204>)
 8020d92:	f001 fb45 	bl	8022420 <HAL_ADC_Init>
 8020d96:	4603      	mov	r3, r0
 8020d98:	2b00      	cmp	r3, #0
 8020d9a:	d001      	beq.n	8020da0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8020d9c:	f000 fd76 	bl	802188c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8020da0:	2303      	movs	r3, #3
 8020da2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8020da4:	2301      	movs	r3, #1
 8020da6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8020da8:	2301      	movs	r3, #1
 8020daa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020dac:	463b      	mov	r3, r7
 8020dae:	4619      	mov	r1, r3
 8020db0:	4860      	ldr	r0, [pc, #384]	; (8020f34 <MX_ADC1_Init+0x204>)
 8020db2:	f001 fc89 	bl	80226c8 <HAL_ADC_ConfigChannel>
 8020db6:	4603      	mov	r3, r0
 8020db8:	2b00      	cmp	r3, #0
 8020dba:	d001      	beq.n	8020dc0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8020dbc:	f000 fd66 	bl	802188c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8020dc0:	2304      	movs	r3, #4
 8020dc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8020dc4:	2302      	movs	r3, #2
 8020dc6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020dc8:	463b      	mov	r3, r7
 8020dca:	4619      	mov	r1, r3
 8020dcc:	4859      	ldr	r0, [pc, #356]	; (8020f34 <MX_ADC1_Init+0x204>)
 8020dce:	f001 fc7b 	bl	80226c8 <HAL_ADC_ConfigChannel>
 8020dd2:	4603      	mov	r3, r0
 8020dd4:	2b00      	cmp	r3, #0
 8020dd6:	d001      	beq.n	8020ddc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8020dd8:	f000 fd58 	bl	802188c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8020ddc:	2305      	movs	r3, #5
 8020dde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8020de0:	2303      	movs	r3, #3
 8020de2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020de4:	463b      	mov	r3, r7
 8020de6:	4619      	mov	r1, r3
 8020de8:	4852      	ldr	r0, [pc, #328]	; (8020f34 <MX_ADC1_Init+0x204>)
 8020dea:	f001 fc6d 	bl	80226c8 <HAL_ADC_ConfigChannel>
 8020dee:	4603      	mov	r3, r0
 8020df0:	2b00      	cmp	r3, #0
 8020df2:	d001      	beq.n	8020df8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8020df4:	f000 fd4a 	bl	802188c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8020df8:	2306      	movs	r3, #6
 8020dfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8020dfc:	2304      	movs	r3, #4
 8020dfe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020e00:	463b      	mov	r3, r7
 8020e02:	4619      	mov	r1, r3
 8020e04:	484b      	ldr	r0, [pc, #300]	; (8020f34 <MX_ADC1_Init+0x204>)
 8020e06:	f001 fc5f 	bl	80226c8 <HAL_ADC_ConfigChannel>
 8020e0a:	4603      	mov	r3, r0
 8020e0c:	2b00      	cmp	r3, #0
 8020e0e:	d001      	beq.n	8020e14 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8020e10:	f000 fd3c 	bl	802188c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8020e14:	2307      	movs	r3, #7
 8020e16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8020e18:	2305      	movs	r3, #5
 8020e1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020e1c:	463b      	mov	r3, r7
 8020e1e:	4619      	mov	r1, r3
 8020e20:	4844      	ldr	r0, [pc, #272]	; (8020f34 <MX_ADC1_Init+0x204>)
 8020e22:	f001 fc51 	bl	80226c8 <HAL_ADC_ConfigChannel>
 8020e26:	4603      	mov	r3, r0
 8020e28:	2b00      	cmp	r3, #0
 8020e2a:	d001      	beq.n	8020e30 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8020e2c:	f000 fd2e 	bl	802188c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8020e30:	230e      	movs	r3, #14
 8020e32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8020e34:	2306      	movs	r3, #6
 8020e36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020e38:	463b      	mov	r3, r7
 8020e3a:	4619      	mov	r1, r3
 8020e3c:	483d      	ldr	r0, [pc, #244]	; (8020f34 <MX_ADC1_Init+0x204>)
 8020e3e:	f001 fc43 	bl	80226c8 <HAL_ADC_ConfigChannel>
 8020e42:	4603      	mov	r3, r0
 8020e44:	2b00      	cmp	r3, #0
 8020e46:	d001      	beq.n	8020e4c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8020e48:	f000 fd20 	bl	802188c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8020e4c:	230f      	movs	r3, #15
 8020e4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8020e50:	2307      	movs	r3, #7
 8020e52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020e54:	463b      	mov	r3, r7
 8020e56:	4619      	mov	r1, r3
 8020e58:	4836      	ldr	r0, [pc, #216]	; (8020f34 <MX_ADC1_Init+0x204>)
 8020e5a:	f001 fc35 	bl	80226c8 <HAL_ADC_ConfigChannel>
 8020e5e:	4603      	mov	r3, r0
 8020e60:	2b00      	cmp	r3, #0
 8020e62:	d001      	beq.n	8020e68 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8020e64:	f000 fd12 	bl	802188c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8020e68:	230a      	movs	r3, #10
 8020e6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8020e6c:	2308      	movs	r3, #8
 8020e6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020e70:	463b      	mov	r3, r7
 8020e72:	4619      	mov	r1, r3
 8020e74:	482f      	ldr	r0, [pc, #188]	; (8020f34 <MX_ADC1_Init+0x204>)
 8020e76:	f001 fc27 	bl	80226c8 <HAL_ADC_ConfigChannel>
 8020e7a:	4603      	mov	r3, r0
 8020e7c:	2b00      	cmp	r3, #0
 8020e7e:	d001      	beq.n	8020e84 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8020e80:	f000 fd04 	bl	802188c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8020e84:	230b      	movs	r3, #11
 8020e86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8020e88:	2309      	movs	r3, #9
 8020e8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020e8c:	463b      	mov	r3, r7
 8020e8e:	4619      	mov	r1, r3
 8020e90:	4828      	ldr	r0, [pc, #160]	; (8020f34 <MX_ADC1_Init+0x204>)
 8020e92:	f001 fc19 	bl	80226c8 <HAL_ADC_ConfigChannel>
 8020e96:	4603      	mov	r3, r0
 8020e98:	2b00      	cmp	r3, #0
 8020e9a:	d001      	beq.n	8020ea0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8020e9c:	f000 fcf6 	bl	802188c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8020ea0:	230c      	movs	r3, #12
 8020ea2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8020ea4:	230a      	movs	r3, #10
 8020ea6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020ea8:	463b      	mov	r3, r7
 8020eaa:	4619      	mov	r1, r3
 8020eac:	4821      	ldr	r0, [pc, #132]	; (8020f34 <MX_ADC1_Init+0x204>)
 8020eae:	f001 fc0b 	bl	80226c8 <HAL_ADC_ConfigChannel>
 8020eb2:	4603      	mov	r3, r0
 8020eb4:	2b00      	cmp	r3, #0
 8020eb6:	d001      	beq.n	8020ebc <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8020eb8:	f000 fce8 	bl	802188c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8020ebc:	230d      	movs	r3, #13
 8020ebe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8020ec0:	230b      	movs	r3, #11
 8020ec2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020ec4:	463b      	mov	r3, r7
 8020ec6:	4619      	mov	r1, r3
 8020ec8:	481a      	ldr	r0, [pc, #104]	; (8020f34 <MX_ADC1_Init+0x204>)
 8020eca:	f001 fbfd 	bl	80226c8 <HAL_ADC_ConfigChannel>
 8020ece:	4603      	mov	r3, r0
 8020ed0:	2b00      	cmp	r3, #0
 8020ed2:	d001      	beq.n	8020ed8 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8020ed4:	f000 fcda 	bl	802188c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8020ed8:	2302      	movs	r3, #2
 8020eda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8020edc:	230c      	movs	r3, #12
 8020ede:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020ee0:	463b      	mov	r3, r7
 8020ee2:	4619      	mov	r1, r3
 8020ee4:	4813      	ldr	r0, [pc, #76]	; (8020f34 <MX_ADC1_Init+0x204>)
 8020ee6:	f001 fbef 	bl	80226c8 <HAL_ADC_ConfigChannel>
 8020eea:	4603      	mov	r3, r0
 8020eec:	2b00      	cmp	r3, #0
 8020eee:	d001      	beq.n	8020ef4 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8020ef0:	f000 fccc 	bl	802188c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8020ef4:	2301      	movs	r3, #1
 8020ef6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8020ef8:	230d      	movs	r3, #13
 8020efa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020efc:	463b      	mov	r3, r7
 8020efe:	4619      	mov	r1, r3
 8020f00:	480c      	ldr	r0, [pc, #48]	; (8020f34 <MX_ADC1_Init+0x204>)
 8020f02:	f001 fbe1 	bl	80226c8 <HAL_ADC_ConfigChannel>
 8020f06:	4603      	mov	r3, r0
 8020f08:	2b00      	cmp	r3, #0
 8020f0a:	d001      	beq.n	8020f10 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8020f0c:	f000 fcbe 	bl	802188c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8020f10:	2300      	movs	r3, #0
 8020f12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8020f14:	230e      	movs	r3, #14
 8020f16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020f18:	463b      	mov	r3, r7
 8020f1a:	4619      	mov	r1, r3
 8020f1c:	4805      	ldr	r0, [pc, #20]	; (8020f34 <MX_ADC1_Init+0x204>)
 8020f1e:	f001 fbd3 	bl	80226c8 <HAL_ADC_ConfigChannel>
 8020f22:	4603      	mov	r3, r0
 8020f24:	2b00      	cmp	r3, #0
 8020f26:	d001      	beq.n	8020f2c <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8020f28:	f000 fcb0 	bl	802188c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8020f2c:	bf00      	nop
 8020f2e:	3710      	adds	r7, #16
 8020f30:	46bd      	mov	sp, r7
 8020f32:	bd80      	pop	{r7, pc}
 8020f34:	2000063c 	.word	0x2000063c
 8020f38:	40012000 	.word	0x40012000
 8020f3c:	0f000001 	.word	0x0f000001

08020f40 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8020f40:	b580      	push	{r7, lr}
 8020f42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8020f44:	4b12      	ldr	r3, [pc, #72]	; (8020f90 <MX_I2C2_Init+0x50>)
 8020f46:	4a13      	ldr	r2, [pc, #76]	; (8020f94 <MX_I2C2_Init+0x54>)
 8020f48:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8020f4a:	4b11      	ldr	r3, [pc, #68]	; (8020f90 <MX_I2C2_Init+0x50>)
 8020f4c:	4a12      	ldr	r2, [pc, #72]	; (8020f98 <MX_I2C2_Init+0x58>)
 8020f4e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8020f50:	4b0f      	ldr	r3, [pc, #60]	; (8020f90 <MX_I2C2_Init+0x50>)
 8020f52:	2200      	movs	r2, #0
 8020f54:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8020f56:	4b0e      	ldr	r3, [pc, #56]	; (8020f90 <MX_I2C2_Init+0x50>)
 8020f58:	2200      	movs	r2, #0
 8020f5a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8020f5c:	4b0c      	ldr	r3, [pc, #48]	; (8020f90 <MX_I2C2_Init+0x50>)
 8020f5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8020f62:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8020f64:	4b0a      	ldr	r3, [pc, #40]	; (8020f90 <MX_I2C2_Init+0x50>)
 8020f66:	2200      	movs	r2, #0
 8020f68:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8020f6a:	4b09      	ldr	r3, [pc, #36]	; (8020f90 <MX_I2C2_Init+0x50>)
 8020f6c:	2200      	movs	r2, #0
 8020f6e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8020f70:	4b07      	ldr	r3, [pc, #28]	; (8020f90 <MX_I2C2_Init+0x50>)
 8020f72:	2200      	movs	r2, #0
 8020f74:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8020f76:	4b06      	ldr	r3, [pc, #24]	; (8020f90 <MX_I2C2_Init+0x50>)
 8020f78:	2200      	movs	r2, #0
 8020f7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8020f7c:	4804      	ldr	r0, [pc, #16]	; (8020f90 <MX_I2C2_Init+0x50>)
 8020f7e:	f002 fc77 	bl	8023870 <HAL_I2C_Init>
 8020f82:	4603      	mov	r3, r0
 8020f84:	2b00      	cmp	r3, #0
 8020f86:	d001      	beq.n	8020f8c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8020f88:	f000 fc80 	bl	802188c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8020f8c:	bf00      	nop
 8020f8e:	bd80      	pop	{r7, pc}
 8020f90:	20000510 	.word	0x20000510
 8020f94:	40005800 	.word	0x40005800
 8020f98:	000186a0 	.word	0x000186a0

08020f9c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8020f9c:	b580      	push	{r7, lr}
 8020f9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8020fa0:	4b17      	ldr	r3, [pc, #92]	; (8021000 <MX_SPI3_Init+0x64>)
 8020fa2:	4a18      	ldr	r2, [pc, #96]	; (8021004 <MX_SPI3_Init+0x68>)
 8020fa4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8020fa6:	4b16      	ldr	r3, [pc, #88]	; (8021000 <MX_SPI3_Init+0x64>)
 8020fa8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8020fac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8020fae:	4b14      	ldr	r3, [pc, #80]	; (8021000 <MX_SPI3_Init+0x64>)
 8020fb0:	2200      	movs	r2, #0
 8020fb2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8020fb4:	4b12      	ldr	r3, [pc, #72]	; (8021000 <MX_SPI3_Init+0x64>)
 8020fb6:	2200      	movs	r2, #0
 8020fb8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8020fba:	4b11      	ldr	r3, [pc, #68]	; (8021000 <MX_SPI3_Init+0x64>)
 8020fbc:	2200      	movs	r2, #0
 8020fbe:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8020fc0:	4b0f      	ldr	r3, [pc, #60]	; (8021000 <MX_SPI3_Init+0x64>)
 8020fc2:	2200      	movs	r2, #0
 8020fc4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8020fc6:	4b0e      	ldr	r3, [pc, #56]	; (8021000 <MX_SPI3_Init+0x64>)
 8020fc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020fcc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8020fce:	4b0c      	ldr	r3, [pc, #48]	; (8021000 <MX_SPI3_Init+0x64>)
 8020fd0:	2238      	movs	r2, #56	; 0x38
 8020fd2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8020fd4:	4b0a      	ldr	r3, [pc, #40]	; (8021000 <MX_SPI3_Init+0x64>)
 8020fd6:	2200      	movs	r2, #0
 8020fd8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8020fda:	4b09      	ldr	r3, [pc, #36]	; (8021000 <MX_SPI3_Init+0x64>)
 8020fdc:	2200      	movs	r2, #0
 8020fde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8020fe0:	4b07      	ldr	r3, [pc, #28]	; (8021000 <MX_SPI3_Init+0x64>)
 8020fe2:	2200      	movs	r2, #0
 8020fe4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8020fe6:	4b06      	ldr	r3, [pc, #24]	; (8021000 <MX_SPI3_Init+0x64>)
 8020fe8:	220a      	movs	r2, #10
 8020fea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8020fec:	4804      	ldr	r0, [pc, #16]	; (8021000 <MX_SPI3_Init+0x64>)
 8020fee:	f003 f99f 	bl	8024330 <HAL_SPI_Init>
 8020ff2:	4603      	mov	r3, r0
 8020ff4:	2b00      	cmp	r3, #0
 8020ff6:	d001      	beq.n	8020ffc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8020ff8:	f000 fc48 	bl	802188c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8020ffc:	bf00      	nop
 8020ffe:	bd80      	pop	{r7, pc}
 8021000:	200005e4 	.word	0x200005e4
 8021004:	40003c00 	.word	0x40003c00

08021008 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8021008:	b580      	push	{r7, lr}
 802100a:	b092      	sub	sp, #72	; 0x48
 802100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802100e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8021012:	2200      	movs	r2, #0
 8021014:	601a      	str	r2, [r3, #0]
 8021016:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8021018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802101c:	2200      	movs	r2, #0
 802101e:	601a      	str	r2, [r3, #0]
 8021020:	605a      	str	r2, [r3, #4]
 8021022:	609a      	str	r2, [r3, #8]
 8021024:	60da      	str	r2, [r3, #12]
 8021026:	611a      	str	r2, [r3, #16]
 8021028:	615a      	str	r2, [r3, #20]
 802102a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 802102c:	1d3b      	adds	r3, r7, #4
 802102e:	2220      	movs	r2, #32
 8021030:	2100      	movs	r1, #0
 8021032:	4618      	mov	r0, r3
 8021034:	f004 f9ee 	bl	8025414 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8021038:	4b39      	ldr	r3, [pc, #228]	; (8021120 <MX_TIM1_Init+0x118>)
 802103a:	4a3a      	ldr	r2, [pc, #232]	; (8021124 <MX_TIM1_Init+0x11c>)
 802103c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 802103e:	4b38      	ldr	r3, [pc, #224]	; (8021120 <MX_TIM1_Init+0x118>)
 8021040:	2201      	movs	r2, #1
 8021042:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021044:	4b36      	ldr	r3, [pc, #216]	; (8021120 <MX_TIM1_Init+0x118>)
 8021046:	2200      	movs	r2, #0
 8021048:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1049;
 802104a:	4b35      	ldr	r3, [pc, #212]	; (8021120 <MX_TIM1_Init+0x118>)
 802104c:	f240 4219 	movw	r2, #1049	; 0x419
 8021050:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021052:	4b33      	ldr	r3, [pc, #204]	; (8021120 <MX_TIM1_Init+0x118>)
 8021054:	2200      	movs	r2, #0
 8021056:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8021058:	4b31      	ldr	r3, [pc, #196]	; (8021120 <MX_TIM1_Init+0x118>)
 802105a:	2200      	movs	r2, #0
 802105c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802105e:	4b30      	ldr	r3, [pc, #192]	; (8021120 <MX_TIM1_Init+0x118>)
 8021060:	2200      	movs	r2, #0
 8021062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8021064:	482e      	ldr	r0, [pc, #184]	; (8021120 <MX_TIM1_Init+0x118>)
 8021066:	f003 fa16 	bl	8024496 <HAL_TIM_PWM_Init>
 802106a:	4603      	mov	r3, r0
 802106c:	2b00      	cmp	r3, #0
 802106e:	d001      	beq.n	8021074 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8021070:	f000 fc0c 	bl	802188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021074:	2300      	movs	r3, #0
 8021076:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021078:	2300      	movs	r3, #0
 802107a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 802107c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8021080:	4619      	mov	r1, r3
 8021082:	4827      	ldr	r0, [pc, #156]	; (8021120 <MX_TIM1_Init+0x118>)
 8021084:	f004 f8c0 	bl	8025208 <HAL_TIMEx_MasterConfigSynchronization>
 8021088:	4603      	mov	r3, r0
 802108a:	2b00      	cmp	r3, #0
 802108c:	d001      	beq.n	8021092 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 802108e:	f000 fbfd 	bl	802188c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8021092:	2360      	movs	r3, #96	; 0x60
 8021094:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8021096:	2300      	movs	r3, #0
 8021098:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 802109a:	2300      	movs	r3, #0
 802109c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 802109e:	2300      	movs	r3, #0
 80210a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80210a2:	2300      	movs	r3, #0
 80210a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80210a6:	2300      	movs	r3, #0
 80210a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80210aa:	2300      	movs	r3, #0
 80210ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80210ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80210b2:	2204      	movs	r2, #4
 80210b4:	4619      	mov	r1, r3
 80210b6:	481a      	ldr	r0, [pc, #104]	; (8021120 <MX_TIM1_Init+0x118>)
 80210b8:	f003 fbf0 	bl	802489c <HAL_TIM_PWM_ConfigChannel>
 80210bc:	4603      	mov	r3, r0
 80210be:	2b00      	cmp	r3, #0
 80210c0:	d001      	beq.n	80210c6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80210c2:	f000 fbe3 	bl	802188c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80210c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80210ca:	220c      	movs	r2, #12
 80210cc:	4619      	mov	r1, r3
 80210ce:	4814      	ldr	r0, [pc, #80]	; (8021120 <MX_TIM1_Init+0x118>)
 80210d0:	f003 fbe4 	bl	802489c <HAL_TIM_PWM_ConfigChannel>
 80210d4:	4603      	mov	r3, r0
 80210d6:	2b00      	cmp	r3, #0
 80210d8:	d001      	beq.n	80210de <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80210da:	f000 fbd7 	bl	802188c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80210de:	2300      	movs	r3, #0
 80210e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80210e2:	2300      	movs	r3, #0
 80210e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80210e6:	2300      	movs	r3, #0
 80210e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80210ea:	2300      	movs	r3, #0
 80210ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80210ee:	2300      	movs	r3, #0
 80210f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80210f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80210f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80210f8:	2300      	movs	r3, #0
 80210fa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80210fc:	1d3b      	adds	r3, r7, #4
 80210fe:	4619      	mov	r1, r3
 8021100:	4807      	ldr	r0, [pc, #28]	; (8021120 <MX_TIM1_Init+0x118>)
 8021102:	f004 f8fd 	bl	8025300 <HAL_TIMEx_ConfigBreakDeadTime>
 8021106:	4603      	mov	r3, r0
 8021108:	2b00      	cmp	r3, #0
 802110a:	d001      	beq.n	8021110 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 802110c:	f000 fbbe 	bl	802188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8021110:	4803      	ldr	r0, [pc, #12]	; (8021120 <MX_TIM1_Init+0x118>)
 8021112:	f000 fe8b 	bl	8021e2c <HAL_TIM_MspPostInit>

}
 8021116:	bf00      	nop
 8021118:	3748      	adds	r7, #72	; 0x48
 802111a:	46bd      	mov	sp, r7
 802111c:	bd80      	pop	{r7, pc}
 802111e:	bf00      	nop
 8021120:	20000764 	.word	0x20000764
 8021124:	40010000 	.word	0x40010000

08021128 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8021128:	b580      	push	{r7, lr}
 802112a:	b086      	sub	sp, #24
 802112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802112e:	f107 0308 	add.w	r3, r7, #8
 8021132:	2200      	movs	r2, #0
 8021134:	601a      	str	r2, [r3, #0]
 8021136:	605a      	str	r2, [r3, #4]
 8021138:	609a      	str	r2, [r3, #8]
 802113a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802113c:	463b      	mov	r3, r7
 802113e:	2200      	movs	r2, #0
 8021140:	601a      	str	r2, [r3, #0]
 8021142:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8021144:	4b1d      	ldr	r3, [pc, #116]	; (80211bc <MX_TIM2_Init+0x94>)
 8021146:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802114a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 802114c:	4b1b      	ldr	r3, [pc, #108]	; (80211bc <MX_TIM2_Init+0x94>)
 802114e:	2204      	movs	r2, #4
 8021150:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021152:	4b1a      	ldr	r3, [pc, #104]	; (80211bc <MX_TIM2_Init+0x94>)
 8021154:	2200      	movs	r2, #0
 8021156:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 104999;
 8021158:	4b18      	ldr	r3, [pc, #96]	; (80211bc <MX_TIM2_Init+0x94>)
 802115a:	4a19      	ldr	r2, [pc, #100]	; (80211c0 <MX_TIM2_Init+0x98>)
 802115c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802115e:	4b17      	ldr	r3, [pc, #92]	; (80211bc <MX_TIM2_Init+0x94>)
 8021160:	2200      	movs	r2, #0
 8021162:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021164:	4b15      	ldr	r3, [pc, #84]	; (80211bc <MX_TIM2_Init+0x94>)
 8021166:	2200      	movs	r2, #0
 8021168:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 802116a:	4814      	ldr	r0, [pc, #80]	; (80211bc <MX_TIM2_Init+0x94>)
 802116c:	f003 f944 	bl	80243f8 <HAL_TIM_Base_Init>
 8021170:	4603      	mov	r3, r0
 8021172:	2b00      	cmp	r3, #0
 8021174:	d001      	beq.n	802117a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8021176:	f000 fb89 	bl	802188c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802117a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 802117e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8021180:	f107 0308 	add.w	r3, r7, #8
 8021184:	4619      	mov	r1, r3
 8021186:	480d      	ldr	r0, [pc, #52]	; (80211bc <MX_TIM2_Init+0x94>)
 8021188:	f003 fc4e 	bl	8024a28 <HAL_TIM_ConfigClockSource>
 802118c:	4603      	mov	r3, r0
 802118e:	2b00      	cmp	r3, #0
 8021190:	d001      	beq.n	8021196 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8021192:	f000 fb7b 	bl	802188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021196:	2300      	movs	r3, #0
 8021198:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802119a:	2300      	movs	r3, #0
 802119c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 802119e:	463b      	mov	r3, r7
 80211a0:	4619      	mov	r1, r3
 80211a2:	4806      	ldr	r0, [pc, #24]	; (80211bc <MX_TIM2_Init+0x94>)
 80211a4:	f004 f830 	bl	8025208 <HAL_TIMEx_MasterConfigSynchronization>
 80211a8:	4603      	mov	r3, r0
 80211aa:	2b00      	cmp	r3, #0
 80211ac:	d001      	beq.n	80211b2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80211ae:	f000 fb6d 	bl	802188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80211b2:	bf00      	nop
 80211b4:	3718      	adds	r7, #24
 80211b6:	46bd      	mov	sp, r7
 80211b8:	bd80      	pop	{r7, pc}
 80211ba:	bf00      	nop
 80211bc:	200007a4 	.word	0x200007a4
 80211c0:	00019a27 	.word	0x00019a27

080211c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80211c4:	b580      	push	{r7, lr}
 80211c6:	b08a      	sub	sp, #40	; 0x28
 80211c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80211ca:	f107 0320 	add.w	r3, r7, #32
 80211ce:	2200      	movs	r2, #0
 80211d0:	601a      	str	r2, [r3, #0]
 80211d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80211d4:	1d3b      	adds	r3, r7, #4
 80211d6:	2200      	movs	r2, #0
 80211d8:	601a      	str	r2, [r3, #0]
 80211da:	605a      	str	r2, [r3, #4]
 80211dc:	609a      	str	r2, [r3, #8]
 80211de:	60da      	str	r2, [r3, #12]
 80211e0:	611a      	str	r2, [r3, #16]
 80211e2:	615a      	str	r2, [r3, #20]
 80211e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80211e6:	4b32      	ldr	r3, [pc, #200]	; (80212b0 <MX_TIM3_Init+0xec>)
 80211e8:	4a32      	ldr	r2, [pc, #200]	; (80212b4 <MX_TIM3_Init+0xf0>)
 80211ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80211ec:	4b30      	ldr	r3, [pc, #192]	; (80212b0 <MX_TIM3_Init+0xec>)
 80211ee:	2200      	movs	r2, #0
 80211f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80211f2:	4b2f      	ldr	r3, [pc, #188]	; (80212b0 <MX_TIM3_Init+0xec>)
 80211f4:	2200      	movs	r2, #0
 80211f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80211f8:	4b2d      	ldr	r3, [pc, #180]	; (80212b0 <MX_TIM3_Init+0xec>)
 80211fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80211fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021200:	4b2b      	ldr	r3, [pc, #172]	; (80212b0 <MX_TIM3_Init+0xec>)
 8021202:	2200      	movs	r2, #0
 8021204:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021206:	4b2a      	ldr	r3, [pc, #168]	; (80212b0 <MX_TIM3_Init+0xec>)
 8021208:	2200      	movs	r2, #0
 802120a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 802120c:	4828      	ldr	r0, [pc, #160]	; (80212b0 <MX_TIM3_Init+0xec>)
 802120e:	f003 f942 	bl	8024496 <HAL_TIM_PWM_Init>
 8021212:	4603      	mov	r3, r0
 8021214:	2b00      	cmp	r3, #0
 8021216:	d001      	beq.n	802121c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8021218:	f000 fb38 	bl	802188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802121c:	2300      	movs	r3, #0
 802121e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021220:	2300      	movs	r3, #0
 8021222:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8021224:	f107 0320 	add.w	r3, r7, #32
 8021228:	4619      	mov	r1, r3
 802122a:	4821      	ldr	r0, [pc, #132]	; (80212b0 <MX_TIM3_Init+0xec>)
 802122c:	f003 ffec 	bl	8025208 <HAL_TIMEx_MasterConfigSynchronization>
 8021230:	4603      	mov	r3, r0
 8021232:	2b00      	cmp	r3, #0
 8021234:	d001      	beq.n	802123a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8021236:	f000 fb29 	bl	802188c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 802123a:	2360      	movs	r3, #96	; 0x60
 802123c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 802123e:	2300      	movs	r3, #0
 8021240:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8021242:	2300      	movs	r3, #0
 8021244:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8021246:	2300      	movs	r3, #0
 8021248:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 802124a:	1d3b      	adds	r3, r7, #4
 802124c:	2200      	movs	r2, #0
 802124e:	4619      	mov	r1, r3
 8021250:	4817      	ldr	r0, [pc, #92]	; (80212b0 <MX_TIM3_Init+0xec>)
 8021252:	f003 fb23 	bl	802489c <HAL_TIM_PWM_ConfigChannel>
 8021256:	4603      	mov	r3, r0
 8021258:	2b00      	cmp	r3, #0
 802125a:	d001      	beq.n	8021260 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 802125c:	f000 fb16 	bl	802188c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8021260:	1d3b      	adds	r3, r7, #4
 8021262:	2204      	movs	r2, #4
 8021264:	4619      	mov	r1, r3
 8021266:	4812      	ldr	r0, [pc, #72]	; (80212b0 <MX_TIM3_Init+0xec>)
 8021268:	f003 fb18 	bl	802489c <HAL_TIM_PWM_ConfigChannel>
 802126c:	4603      	mov	r3, r0
 802126e:	2b00      	cmp	r3, #0
 8021270:	d001      	beq.n	8021276 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8021272:	f000 fb0b 	bl	802188c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8021276:	1d3b      	adds	r3, r7, #4
 8021278:	2208      	movs	r2, #8
 802127a:	4619      	mov	r1, r3
 802127c:	480c      	ldr	r0, [pc, #48]	; (80212b0 <MX_TIM3_Init+0xec>)
 802127e:	f003 fb0d 	bl	802489c <HAL_TIM_PWM_ConfigChannel>
 8021282:	4603      	mov	r3, r0
 8021284:	2b00      	cmp	r3, #0
 8021286:	d001      	beq.n	802128c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8021288:	f000 fb00 	bl	802188c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 802128c:	1d3b      	adds	r3, r7, #4
 802128e:	220c      	movs	r2, #12
 8021290:	4619      	mov	r1, r3
 8021292:	4807      	ldr	r0, [pc, #28]	; (80212b0 <MX_TIM3_Init+0xec>)
 8021294:	f003 fb02 	bl	802489c <HAL_TIM_PWM_ConfigChannel>
 8021298:	4603      	mov	r3, r0
 802129a:	2b00      	cmp	r3, #0
 802129c:	d001      	beq.n	80212a2 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 802129e:	f000 faf5 	bl	802188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80212a2:	4803      	ldr	r0, [pc, #12]	; (80212b0 <MX_TIM3_Init+0xec>)
 80212a4:	f000 fdc2 	bl	8021e2c <HAL_TIM_MspPostInit>

}
 80212a8:	bf00      	nop
 80212aa:	3728      	adds	r7, #40	; 0x28
 80212ac:	46bd      	mov	sp, r7
 80212ae:	bd80      	pop	{r7, pc}
 80212b0:	200005a4 	.word	0x200005a4
 80212b4:	40000400 	.word	0x40000400

080212b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80212b8:	b580      	push	{r7, lr}
 80212ba:	b08c      	sub	sp, #48	; 0x30
 80212bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80212be:	f107 030c 	add.w	r3, r7, #12
 80212c2:	2224      	movs	r2, #36	; 0x24
 80212c4:	2100      	movs	r1, #0
 80212c6:	4618      	mov	r0, r3
 80212c8:	f004 f8a4 	bl	8025414 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80212cc:	1d3b      	adds	r3, r7, #4
 80212ce:	2200      	movs	r2, #0
 80212d0:	601a      	str	r2, [r3, #0]
 80212d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80212d4:	4b20      	ldr	r3, [pc, #128]	; (8021358 <MX_TIM4_Init+0xa0>)
 80212d6:	4a21      	ldr	r2, [pc, #132]	; (802135c <MX_TIM4_Init+0xa4>)
 80212d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80212da:	4b1f      	ldr	r3, [pc, #124]	; (8021358 <MX_TIM4_Init+0xa0>)
 80212dc:	2200      	movs	r2, #0
 80212de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80212e0:	4b1d      	ldr	r3, [pc, #116]	; (8021358 <MX_TIM4_Init+0xa0>)
 80212e2:	2200      	movs	r2, #0
 80212e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80212e6:	4b1c      	ldr	r3, [pc, #112]	; (8021358 <MX_TIM4_Init+0xa0>)
 80212e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80212ec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80212ee:	4b1a      	ldr	r3, [pc, #104]	; (8021358 <MX_TIM4_Init+0xa0>)
 80212f0:	2200      	movs	r2, #0
 80212f2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80212f4:	4b18      	ldr	r3, [pc, #96]	; (8021358 <MX_TIM4_Init+0xa0>)
 80212f6:	2200      	movs	r2, #0
 80212f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80212fa:	2303      	movs	r3, #3
 80212fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80212fe:	2300      	movs	r3, #0
 8021300:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8021302:	2301      	movs	r3, #1
 8021304:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8021306:	2300      	movs	r3, #0
 8021308:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 802130a:	2300      	movs	r3, #0
 802130c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 802130e:	2300      	movs	r3, #0
 8021310:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8021312:	2301      	movs	r3, #1
 8021314:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8021316:	2300      	movs	r3, #0
 8021318:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 802131a:	2300      	movs	r3, #0
 802131c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 802131e:	f107 030c 	add.w	r3, r7, #12
 8021322:	4619      	mov	r1, r3
 8021324:	480c      	ldr	r0, [pc, #48]	; (8021358 <MX_TIM4_Init+0xa0>)
 8021326:	f003 f91f 	bl	8024568 <HAL_TIM_Encoder_Init>
 802132a:	4603      	mov	r3, r0
 802132c:	2b00      	cmp	r3, #0
 802132e:	d001      	beq.n	8021334 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8021330:	f000 faac 	bl	802188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021334:	2300      	movs	r3, #0
 8021336:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021338:	2300      	movs	r3, #0
 802133a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 802133c:	1d3b      	adds	r3, r7, #4
 802133e:	4619      	mov	r1, r3
 8021340:	4805      	ldr	r0, [pc, #20]	; (8021358 <MX_TIM4_Init+0xa0>)
 8021342:	f003 ff61 	bl	8025208 <HAL_TIMEx_MasterConfigSynchronization>
 8021346:	4603      	mov	r3, r0
 8021348:	2b00      	cmp	r3, #0
 802134a:	d001      	beq.n	8021350 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 802134c:	f000 fa9e 	bl	802188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8021350:	bf00      	nop
 8021352:	3730      	adds	r7, #48	; 0x30
 8021354:	46bd      	mov	sp, r7
 8021356:	bd80      	pop	{r7, pc}
 8021358:	200004d0 	.word	0x200004d0
 802135c:	40000800 	.word	0x40000800

08021360 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8021360:	b580      	push	{r7, lr}
 8021362:	b086      	sub	sp, #24
 8021364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8021366:	f107 0308 	add.w	r3, r7, #8
 802136a:	2200      	movs	r2, #0
 802136c:	601a      	str	r2, [r3, #0]
 802136e:	605a      	str	r2, [r3, #4]
 8021370:	609a      	str	r2, [r3, #8]
 8021372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021374:	463b      	mov	r3, r7
 8021376:	2200      	movs	r2, #0
 8021378:	601a      	str	r2, [r3, #0]
 802137a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 802137c:	4b1d      	ldr	r3, [pc, #116]	; (80213f4 <MX_TIM5_Init+0x94>)
 802137e:	4a1e      	ldr	r2, [pc, #120]	; (80213f8 <MX_TIM5_Init+0x98>)
 8021380:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4;
 8021382:	4b1c      	ldr	r3, [pc, #112]	; (80213f4 <MX_TIM5_Init+0x94>)
 8021384:	2204      	movs	r2, #4
 8021386:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021388:	4b1a      	ldr	r3, [pc, #104]	; (80213f4 <MX_TIM5_Init+0x94>)
 802138a:	2200      	movs	r2, #0
 802138c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20999;
 802138e:	4b19      	ldr	r3, [pc, #100]	; (80213f4 <MX_TIM5_Init+0x94>)
 8021390:	f245 2207 	movw	r2, #20999	; 0x5207
 8021394:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021396:	4b17      	ldr	r3, [pc, #92]	; (80213f4 <MX_TIM5_Init+0x94>)
 8021398:	2200      	movs	r2, #0
 802139a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802139c:	4b15      	ldr	r3, [pc, #84]	; (80213f4 <MX_TIM5_Init+0x94>)
 802139e:	2200      	movs	r2, #0
 80213a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80213a2:	4814      	ldr	r0, [pc, #80]	; (80213f4 <MX_TIM5_Init+0x94>)
 80213a4:	f003 f828 	bl	80243f8 <HAL_TIM_Base_Init>
 80213a8:	4603      	mov	r3, r0
 80213aa:	2b00      	cmp	r3, #0
 80213ac:	d001      	beq.n	80213b2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80213ae:	f000 fa6d 	bl	802188c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80213b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80213b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80213b8:	f107 0308 	add.w	r3, r7, #8
 80213bc:	4619      	mov	r1, r3
 80213be:	480d      	ldr	r0, [pc, #52]	; (80213f4 <MX_TIM5_Init+0x94>)
 80213c0:	f003 fb32 	bl	8024a28 <HAL_TIM_ConfigClockSource>
 80213c4:	4603      	mov	r3, r0
 80213c6:	2b00      	cmp	r3, #0
 80213c8:	d001      	beq.n	80213ce <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80213ca:	f000 fa5f 	bl	802188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80213ce:	2300      	movs	r3, #0
 80213d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80213d2:	2300      	movs	r3, #0
 80213d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80213d6:	463b      	mov	r3, r7
 80213d8:	4619      	mov	r1, r3
 80213da:	4806      	ldr	r0, [pc, #24]	; (80213f4 <MX_TIM5_Init+0x94>)
 80213dc:	f003 ff14 	bl	8025208 <HAL_TIMEx_MasterConfigSynchronization>
 80213e0:	4603      	mov	r3, r0
 80213e2:	2b00      	cmp	r3, #0
 80213e4:	d001      	beq.n	80213ea <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80213e6:	f000 fa51 	bl	802188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80213ea:	bf00      	nop
 80213ec:	3718      	adds	r7, #24
 80213ee:	46bd      	mov	sp, r7
 80213f0:	bd80      	pop	{r7, pc}
 80213f2:	bf00      	nop
 80213f4:	20000564 	.word	0x20000564
 80213f8:	40000c00 	.word	0x40000c00

080213fc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80213fc:	b580      	push	{r7, lr}
 80213fe:	b082      	sub	sp, #8
 8021400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021402:	463b      	mov	r3, r7
 8021404:	2200      	movs	r2, #0
 8021406:	601a      	str	r2, [r3, #0]
 8021408:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 802140a:	4b15      	ldr	r3, [pc, #84]	; (8021460 <MX_TIM6_Init+0x64>)
 802140c:	4a15      	ldr	r2, [pc, #84]	; (8021464 <MX_TIM6_Init+0x68>)
 802140e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 8021410:	4b13      	ldr	r3, [pc, #76]	; (8021460 <MX_TIM6_Init+0x64>)
 8021412:	2204      	movs	r2, #4
 8021414:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021416:	4b12      	ldr	r3, [pc, #72]	; (8021460 <MX_TIM6_Init+0x64>)
 8021418:	2200      	movs	r2, #0
 802141a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10499;
 802141c:	4b10      	ldr	r3, [pc, #64]	; (8021460 <MX_TIM6_Init+0x64>)
 802141e:	f642 1203 	movw	r2, #10499	; 0x2903
 8021422:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021424:	4b0e      	ldr	r3, [pc, #56]	; (8021460 <MX_TIM6_Init+0x64>)
 8021426:	2200      	movs	r2, #0
 8021428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 802142a:	480d      	ldr	r0, [pc, #52]	; (8021460 <MX_TIM6_Init+0x64>)
 802142c:	f002 ffe4 	bl	80243f8 <HAL_TIM_Base_Init>
 8021430:	4603      	mov	r3, r0
 8021432:	2b00      	cmp	r3, #0
 8021434:	d001      	beq.n	802143a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8021436:	f000 fa29 	bl	802188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802143a:	2300      	movs	r3, #0
 802143c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802143e:	2300      	movs	r3, #0
 8021440:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8021442:	463b      	mov	r3, r7
 8021444:	4619      	mov	r1, r3
 8021446:	4806      	ldr	r0, [pc, #24]	; (8021460 <MX_TIM6_Init+0x64>)
 8021448:	f003 fede 	bl	8025208 <HAL_TIMEx_MasterConfigSynchronization>
 802144c:	4603      	mov	r3, r0
 802144e:	2b00      	cmp	r3, #0
 8021450:	d001      	beq.n	8021456 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8021452:	f000 fa1b 	bl	802188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8021456:	bf00      	nop
 8021458:	3708      	adds	r7, #8
 802145a:	46bd      	mov	sp, r7
 802145c:	bd80      	pop	{r7, pc}
 802145e:	bf00      	nop
 8021460:	20000724 	.word	0x20000724
 8021464:	40001000 	.word	0x40001000

08021468 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8021468:	b580      	push	{r7, lr}
 802146a:	b082      	sub	sp, #8
 802146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802146e:	463b      	mov	r3, r7
 8021470:	2200      	movs	r2, #0
 8021472:	601a      	str	r2, [r3, #0]
 8021474:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8021476:	4b15      	ldr	r3, [pc, #84]	; (80214cc <MX_TIM7_Init+0x64>)
 8021478:	4a15      	ldr	r2, [pc, #84]	; (80214d0 <MX_TIM7_Init+0x68>)
 802147a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 802147c:	4b13      	ldr	r3, [pc, #76]	; (80214cc <MX_TIM7_Init+0x64>)
 802147e:	2204      	movs	r2, #4
 8021480:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021482:	4b12      	ldr	r3, [pc, #72]	; (80214cc <MX_TIM7_Init+0x64>)
 8021484:	2200      	movs	r2, #0
 8021486:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1049;
 8021488:	4b10      	ldr	r3, [pc, #64]	; (80214cc <MX_TIM7_Init+0x64>)
 802148a:	f240 4219 	movw	r2, #1049	; 0x419
 802148e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021490:	4b0e      	ldr	r3, [pc, #56]	; (80214cc <MX_TIM7_Init+0x64>)
 8021492:	2200      	movs	r2, #0
 8021494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8021496:	480d      	ldr	r0, [pc, #52]	; (80214cc <MX_TIM7_Init+0x64>)
 8021498:	f002 ffae 	bl	80243f8 <HAL_TIM_Base_Init>
 802149c:	4603      	mov	r3, r0
 802149e:	2b00      	cmp	r3, #0
 80214a0:	d001      	beq.n	80214a6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80214a2:	f000 f9f3 	bl	802188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80214a6:	2300      	movs	r3, #0
 80214a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80214aa:	2300      	movs	r3, #0
 80214ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80214ae:	463b      	mov	r3, r7
 80214b0:	4619      	mov	r1, r3
 80214b2:	4806      	ldr	r0, [pc, #24]	; (80214cc <MX_TIM7_Init+0x64>)
 80214b4:	f003 fea8 	bl	8025208 <HAL_TIMEx_MasterConfigSynchronization>
 80214b8:	4603      	mov	r3, r0
 80214ba:	2b00      	cmp	r3, #0
 80214bc:	d001      	beq.n	80214c2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80214be:	f000 f9e5 	bl	802188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80214c2:	bf00      	nop
 80214c4:	3708      	adds	r7, #8
 80214c6:	46bd      	mov	sp, r7
 80214c8:	bd80      	pop	{r7, pc}
 80214ca:	bf00      	nop
 80214cc:	20000824 	.word	0x20000824
 80214d0:	40001400 	.word	0x40001400

080214d4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80214d4:	b580      	push	{r7, lr}
 80214d6:	b08c      	sub	sp, #48	; 0x30
 80214d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80214da:	f107 030c 	add.w	r3, r7, #12
 80214de:	2224      	movs	r2, #36	; 0x24
 80214e0:	2100      	movs	r1, #0
 80214e2:	4618      	mov	r0, r3
 80214e4:	f003 ff96 	bl	8025414 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80214e8:	1d3b      	adds	r3, r7, #4
 80214ea:	2200      	movs	r2, #0
 80214ec:	601a      	str	r2, [r3, #0]
 80214ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80214f0:	4b22      	ldr	r3, [pc, #136]	; (802157c <MX_TIM8_Init+0xa8>)
 80214f2:	4a23      	ldr	r2, [pc, #140]	; (8021580 <MX_TIM8_Init+0xac>)
 80214f4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80214f6:	4b21      	ldr	r3, [pc, #132]	; (802157c <MX_TIM8_Init+0xa8>)
 80214f8:	2200      	movs	r2, #0
 80214fa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80214fc:	4b1f      	ldr	r3, [pc, #124]	; (802157c <MX_TIM8_Init+0xa8>)
 80214fe:	2200      	movs	r2, #0
 8021500:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8021502:	4b1e      	ldr	r3, [pc, #120]	; (802157c <MX_TIM8_Init+0xa8>)
 8021504:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021508:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802150a:	4b1c      	ldr	r3, [pc, #112]	; (802157c <MX_TIM8_Init+0xa8>)
 802150c:	2200      	movs	r2, #0
 802150e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8021510:	4b1a      	ldr	r3, [pc, #104]	; (802157c <MX_TIM8_Init+0xa8>)
 8021512:	2200      	movs	r2, #0
 8021514:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021516:	4b19      	ldr	r3, [pc, #100]	; (802157c <MX_TIM8_Init+0xa8>)
 8021518:	2200      	movs	r2, #0
 802151a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 802151c:	2303      	movs	r3, #3
 802151e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8021520:	2300      	movs	r3, #0
 8021522:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8021524:	2301      	movs	r3, #1
 8021526:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8021528:	2300      	movs	r3, #0
 802152a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 802152c:	2300      	movs	r3, #0
 802152e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8021530:	2300      	movs	r3, #0
 8021532:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8021534:	2301      	movs	r3, #1
 8021536:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8021538:	2300      	movs	r3, #0
 802153a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 802153c:	2300      	movs	r3, #0
 802153e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8021540:	f107 030c 	add.w	r3, r7, #12
 8021544:	4619      	mov	r1, r3
 8021546:	480d      	ldr	r0, [pc, #52]	; (802157c <MX_TIM8_Init+0xa8>)
 8021548:	f003 f80e 	bl	8024568 <HAL_TIM_Encoder_Init>
 802154c:	4603      	mov	r3, r0
 802154e:	2b00      	cmp	r3, #0
 8021550:	d001      	beq.n	8021556 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8021552:	f000 f99b 	bl	802188c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021556:	2300      	movs	r3, #0
 8021558:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802155a:	2300      	movs	r3, #0
 802155c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 802155e:	1d3b      	adds	r3, r7, #4
 8021560:	4619      	mov	r1, r3
 8021562:	4806      	ldr	r0, [pc, #24]	; (802157c <MX_TIM8_Init+0xa8>)
 8021564:	f003 fe50 	bl	8025208 <HAL_TIMEx_MasterConfigSynchronization>
 8021568:	4603      	mov	r3, r0
 802156a:	2b00      	cmp	r3, #0
 802156c:	d001      	beq.n	8021572 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 802156e:	f000 f98d 	bl	802188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8021572:	bf00      	nop
 8021574:	3730      	adds	r7, #48	; 0x30
 8021576:	46bd      	mov	sp, r7
 8021578:	bd80      	pop	{r7, pc}
 802157a:	bf00      	nop
 802157c:	20000490 	.word	0x20000490
 8021580:	40010400 	.word	0x40010400

08021584 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8021584:	b580      	push	{r7, lr}
 8021586:	b088      	sub	sp, #32
 8021588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 802158a:	1d3b      	adds	r3, r7, #4
 802158c:	2200      	movs	r2, #0
 802158e:	601a      	str	r2, [r3, #0]
 8021590:	605a      	str	r2, [r3, #4]
 8021592:	609a      	str	r2, [r3, #8]
 8021594:	60da      	str	r2, [r3, #12]
 8021596:	611a      	str	r2, [r3, #16]
 8021598:	615a      	str	r2, [r3, #20]
 802159a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 802159c:	4b1e      	ldr	r3, [pc, #120]	; (8021618 <MX_TIM11_Init+0x94>)
 802159e:	4a1f      	ldr	r2, [pc, #124]	; (802161c <MX_TIM11_Init+0x98>)
 80215a0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80215a2:	4b1d      	ldr	r3, [pc, #116]	; (8021618 <MX_TIM11_Init+0x94>)
 80215a4:	2200      	movs	r2, #0
 80215a6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80215a8:	4b1b      	ldr	r3, [pc, #108]	; (8021618 <MX_TIM11_Init+0x94>)
 80215aa:	2200      	movs	r2, #0
 80215ac:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1679;
 80215ae:	4b1a      	ldr	r3, [pc, #104]	; (8021618 <MX_TIM11_Init+0x94>)
 80215b0:	f240 628f 	movw	r2, #1679	; 0x68f
 80215b4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80215b6:	4b18      	ldr	r3, [pc, #96]	; (8021618 <MX_TIM11_Init+0x94>)
 80215b8:	2200      	movs	r2, #0
 80215ba:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80215bc:	4b16      	ldr	r3, [pc, #88]	; (8021618 <MX_TIM11_Init+0x94>)
 80215be:	2200      	movs	r2, #0
 80215c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80215c2:	4815      	ldr	r0, [pc, #84]	; (8021618 <MX_TIM11_Init+0x94>)
 80215c4:	f002 ff18 	bl	80243f8 <HAL_TIM_Base_Init>
 80215c8:	4603      	mov	r3, r0
 80215ca:	2b00      	cmp	r3, #0
 80215cc:	d001      	beq.n	80215d2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80215ce:	f000 f95d 	bl	802188c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80215d2:	4811      	ldr	r0, [pc, #68]	; (8021618 <MX_TIM11_Init+0x94>)
 80215d4:	f002 ff5f 	bl	8024496 <HAL_TIM_PWM_Init>
 80215d8:	4603      	mov	r3, r0
 80215da:	2b00      	cmp	r3, #0
 80215dc:	d001      	beq.n	80215e2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80215de:	f000 f955 	bl	802188c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80215e2:	2360      	movs	r3, #96	; 0x60
 80215e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80215e6:	2300      	movs	r3, #0
 80215e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80215ea:	2300      	movs	r3, #0
 80215ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80215ee:	2300      	movs	r3, #0
 80215f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80215f2:	1d3b      	adds	r3, r7, #4
 80215f4:	2200      	movs	r2, #0
 80215f6:	4619      	mov	r1, r3
 80215f8:	4807      	ldr	r0, [pc, #28]	; (8021618 <MX_TIM11_Init+0x94>)
 80215fa:	f003 f94f 	bl	802489c <HAL_TIM_PWM_ConfigChannel>
 80215fe:	4603      	mov	r3, r0
 8021600:	2b00      	cmp	r3, #0
 8021602:	d001      	beq.n	8021608 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8021604:	f000 f942 	bl	802188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8021608:	4803      	ldr	r0, [pc, #12]	; (8021618 <MX_TIM11_Init+0x94>)
 802160a:	f000 fc0f 	bl	8021e2c <HAL_TIM_MspPostInit>

}
 802160e:	bf00      	nop
 8021610:	3720      	adds	r7, #32
 8021612:	46bd      	mov	sp, r7
 8021614:	bd80      	pop	{r7, pc}
 8021616:	bf00      	nop
 8021618:	20000684 	.word	0x20000684
 802161c:	40014800 	.word	0x40014800

08021620 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8021620:	b580      	push	{r7, lr}
 8021622:	b088      	sub	sp, #32
 8021624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8021626:	1d3b      	adds	r3, r7, #4
 8021628:	2200      	movs	r2, #0
 802162a:	601a      	str	r2, [r3, #0]
 802162c:	605a      	str	r2, [r3, #4]
 802162e:	609a      	str	r2, [r3, #8]
 8021630:	60da      	str	r2, [r3, #12]
 8021632:	611a      	str	r2, [r3, #16]
 8021634:	615a      	str	r2, [r3, #20]
 8021636:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8021638:	4b1a      	ldr	r3, [pc, #104]	; (80216a4 <MX_TIM12_Init+0x84>)
 802163a:	4a1b      	ldr	r2, [pc, #108]	; (80216a8 <MX_TIM12_Init+0x88>)
 802163c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 880;
 802163e:	4b19      	ldr	r3, [pc, #100]	; (80216a4 <MX_TIM12_Init+0x84>)
 8021640:	f44f 725c 	mov.w	r2, #880	; 0x370
 8021644:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021646:	4b17      	ldr	r3, [pc, #92]	; (80216a4 <MX_TIM12_Init+0x84>)
 8021648:	2200      	movs	r2, #0
 802164a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 53;
 802164c:	4b15      	ldr	r3, [pc, #84]	; (80216a4 <MX_TIM12_Init+0x84>)
 802164e:	2235      	movs	r2, #53	; 0x35
 8021650:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021652:	4b14      	ldr	r3, [pc, #80]	; (80216a4 <MX_TIM12_Init+0x84>)
 8021654:	2200      	movs	r2, #0
 8021656:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021658:	4b12      	ldr	r3, [pc, #72]	; (80216a4 <MX_TIM12_Init+0x84>)
 802165a:	2200      	movs	r2, #0
 802165c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 802165e:	4811      	ldr	r0, [pc, #68]	; (80216a4 <MX_TIM12_Init+0x84>)
 8021660:	f002 ff19 	bl	8024496 <HAL_TIM_PWM_Init>
 8021664:	4603      	mov	r3, r0
 8021666:	2b00      	cmp	r3, #0
 8021668:	d001      	beq.n	802166e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 802166a:	f000 f90f 	bl	802188c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 802166e:	2360      	movs	r3, #96	; 0x60
 8021670:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8021672:	2300      	movs	r3, #0
 8021674:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8021676:	2300      	movs	r3, #0
 8021678:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 802167a:	2300      	movs	r3, #0
 802167c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 802167e:	1d3b      	adds	r3, r7, #4
 8021680:	2204      	movs	r2, #4
 8021682:	4619      	mov	r1, r3
 8021684:	4807      	ldr	r0, [pc, #28]	; (80216a4 <MX_TIM12_Init+0x84>)
 8021686:	f003 f909 	bl	802489c <HAL_TIM_PWM_ConfigChannel>
 802168a:	4603      	mov	r3, r0
 802168c:	2b00      	cmp	r3, #0
 802168e:	d001      	beq.n	8021694 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8021690:	f000 f8fc 	bl	802188c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8021694:	4803      	ldr	r0, [pc, #12]	; (80216a4 <MX_TIM12_Init+0x84>)
 8021696:	f000 fbc9 	bl	8021e2c <HAL_TIM_MspPostInit>

}
 802169a:	bf00      	nop
 802169c:	3720      	adds	r7, #32
 802169e:	46bd      	mov	sp, r7
 80216a0:	bd80      	pop	{r7, pc}
 80216a2:	bf00      	nop
 80216a4:	200007e4 	.word	0x200007e4
 80216a8:	40001800 	.word	0x40001800

080216ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80216ac:	b580      	push	{r7, lr}
 80216ae:	b082      	sub	sp, #8
 80216b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80216b2:	2300      	movs	r3, #0
 80216b4:	607b      	str	r3, [r7, #4]
 80216b6:	4b0c      	ldr	r3, [pc, #48]	; (80216e8 <MX_DMA_Init+0x3c>)
 80216b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80216ba:	4a0b      	ldr	r2, [pc, #44]	; (80216e8 <MX_DMA_Init+0x3c>)
 80216bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80216c0:	6313      	str	r3, [r2, #48]	; 0x30
 80216c2:	4b09      	ldr	r3, [pc, #36]	; (80216e8 <MX_DMA_Init+0x3c>)
 80216c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80216c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80216ca:	607b      	str	r3, [r7, #4]
 80216cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80216ce:	2200      	movs	r2, #0
 80216d0:	2100      	movs	r1, #0
 80216d2:	2038      	movs	r0, #56	; 0x38
 80216d4:	f001 fb73 	bl	8022dbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80216d8:	2038      	movs	r0, #56	; 0x38
 80216da:	f001 fb8c 	bl	8022df6 <HAL_NVIC_EnableIRQ>

}
 80216de:	bf00      	nop
 80216e0:	3708      	adds	r7, #8
 80216e2:	46bd      	mov	sp, r7
 80216e4:	bd80      	pop	{r7, pc}
 80216e6:	bf00      	nop
 80216e8:	40023800 	.word	0x40023800

080216ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80216ec:	b580      	push	{r7, lr}
 80216ee:	b08a      	sub	sp, #40	; 0x28
 80216f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80216f2:	f107 0314 	add.w	r3, r7, #20
 80216f6:	2200      	movs	r2, #0
 80216f8:	601a      	str	r2, [r3, #0]
 80216fa:	605a      	str	r2, [r3, #4]
 80216fc:	609a      	str	r2, [r3, #8]
 80216fe:	60da      	str	r2, [r3, #12]
 8021700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8021702:	2300      	movs	r3, #0
 8021704:	613b      	str	r3, [r7, #16]
 8021706:	4b5c      	ldr	r3, [pc, #368]	; (8021878 <MX_GPIO_Init+0x18c>)
 8021708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802170a:	4a5b      	ldr	r2, [pc, #364]	; (8021878 <MX_GPIO_Init+0x18c>)
 802170c:	f043 0304 	orr.w	r3, r3, #4
 8021710:	6313      	str	r3, [r2, #48]	; 0x30
 8021712:	4b59      	ldr	r3, [pc, #356]	; (8021878 <MX_GPIO_Init+0x18c>)
 8021714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021716:	f003 0304 	and.w	r3, r3, #4
 802171a:	613b      	str	r3, [r7, #16]
 802171c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 802171e:	2300      	movs	r3, #0
 8021720:	60fb      	str	r3, [r7, #12]
 8021722:	4b55      	ldr	r3, [pc, #340]	; (8021878 <MX_GPIO_Init+0x18c>)
 8021724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021726:	4a54      	ldr	r2, [pc, #336]	; (8021878 <MX_GPIO_Init+0x18c>)
 8021728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802172c:	6313      	str	r3, [r2, #48]	; 0x30
 802172e:	4b52      	ldr	r3, [pc, #328]	; (8021878 <MX_GPIO_Init+0x18c>)
 8021730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021736:	60fb      	str	r3, [r7, #12]
 8021738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802173a:	2300      	movs	r3, #0
 802173c:	60bb      	str	r3, [r7, #8]
 802173e:	4b4e      	ldr	r3, [pc, #312]	; (8021878 <MX_GPIO_Init+0x18c>)
 8021740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021742:	4a4d      	ldr	r2, [pc, #308]	; (8021878 <MX_GPIO_Init+0x18c>)
 8021744:	f043 0301 	orr.w	r3, r3, #1
 8021748:	6313      	str	r3, [r2, #48]	; 0x30
 802174a:	4b4b      	ldr	r3, [pc, #300]	; (8021878 <MX_GPIO_Init+0x18c>)
 802174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802174e:	f003 0301 	and.w	r3, r3, #1
 8021752:	60bb      	str	r3, [r7, #8]
 8021754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8021756:	2300      	movs	r3, #0
 8021758:	607b      	str	r3, [r7, #4]
 802175a:	4b47      	ldr	r3, [pc, #284]	; (8021878 <MX_GPIO_Init+0x18c>)
 802175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802175e:	4a46      	ldr	r2, [pc, #280]	; (8021878 <MX_GPIO_Init+0x18c>)
 8021760:	f043 0302 	orr.w	r3, r3, #2
 8021764:	6313      	str	r3, [r2, #48]	; 0x30
 8021766:	4b44      	ldr	r3, [pc, #272]	; (8021878 <MX_GPIO_Init+0x18c>)
 8021768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802176a:	f003 0302 	and.w	r3, r3, #2
 802176e:	607b      	str	r3, [r7, #4]
 8021770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8021772:	2300      	movs	r3, #0
 8021774:	603b      	str	r3, [r7, #0]
 8021776:	4b40      	ldr	r3, [pc, #256]	; (8021878 <MX_GPIO_Init+0x18c>)
 8021778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802177a:	4a3f      	ldr	r2, [pc, #252]	; (8021878 <MX_GPIO_Init+0x18c>)
 802177c:	f043 0308 	orr.w	r3, r3, #8
 8021780:	6313      	str	r3, [r2, #48]	; 0x30
 8021782:	4b3d      	ldr	r3, [pc, #244]	; (8021878 <MX_GPIO_Init+0x18c>)
 8021784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021786:	f003 0308 	and.w	r3, r3, #8
 802178a:	603b      	str	r3, [r7, #0]
 802178c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 802178e:	2200      	movs	r2, #0
 8021790:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8021794:	4839      	ldr	r0, [pc, #228]	; (802187c <MX_GPIO_Init+0x190>)
 8021796:	f002 f851 	bl	802383c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 802179a:	2201      	movs	r2, #1
 802179c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80217a0:	4837      	ldr	r0, [pc, #220]	; (8021880 <MX_GPIO_Init+0x194>)
 80217a2:	f002 f84b 	bl	802383c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 80217a6:	2200      	movs	r2, #0
 80217a8:	f44f 4105 	mov.w	r1, #34048	; 0x8500
 80217ac:	4835      	ldr	r0, [pc, #212]	; (8021884 <MX_GPIO_Init+0x198>)
 80217ae:	f002 f845 	bl	802383c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80217b2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80217b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80217b8:	2301      	movs	r3, #1
 80217ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80217bc:	2300      	movs	r3, #0
 80217be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80217c0:	2300      	movs	r3, #0
 80217c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80217c4:	f107 0314 	add.w	r3, r7, #20
 80217c8:	4619      	mov	r1, r3
 80217ca:	482c      	ldr	r0, [pc, #176]	; (802187c <MX_GPIO_Init+0x190>)
 80217cc:	f001 fe9c 	bl	8023508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80217d0:	2307      	movs	r3, #7
 80217d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80217d4:	2300      	movs	r3, #0
 80217d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80217d8:	2301      	movs	r3, #1
 80217da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80217dc:	f107 0314 	add.w	r3, r7, #20
 80217e0:	4619      	mov	r1, r3
 80217e2:	4827      	ldr	r0, [pc, #156]	; (8021880 <MX_GPIO_Init+0x194>)
 80217e4:	f001 fe90 	bl	8023508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80217e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80217ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80217ee:	2301      	movs	r3, #1
 80217f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80217f2:	2300      	movs	r3, #0
 80217f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80217f6:	2300      	movs	r3, #0
 80217f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80217fa:	f107 0314 	add.w	r3, r7, #20
 80217fe:	4619      	mov	r1, r3
 8021800:	481f      	ldr	r0, [pc, #124]	; (8021880 <MX_GPIO_Init+0x194>)
 8021802:	f001 fe81 	bl	8023508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_8;
 8021806:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 802180a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802180c:	2300      	movs	r3, #0
 802180e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021810:	2300      	movs	r3, #0
 8021812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021814:	f107 0314 	add.w	r3, r7, #20
 8021818:	4619      	mov	r1, r3
 802181a:	4819      	ldr	r0, [pc, #100]	; (8021880 <MX_GPIO_Init+0x194>)
 802181c:	f001 fe74 	bl	8023508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15;
 8021820:	f44f 4305 	mov.w	r3, #34048	; 0x8500
 8021824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8021826:	2301      	movs	r3, #1
 8021828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802182a:	2300      	movs	r3, #0
 802182c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802182e:	2300      	movs	r3, #0
 8021830:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021832:	f107 0314 	add.w	r3, r7, #20
 8021836:	4619      	mov	r1, r3
 8021838:	4812      	ldr	r0, [pc, #72]	; (8021884 <MX_GPIO_Init+0x198>)
 802183a:	f001 fe65 	bl	8023508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 802183e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8021844:	2300      	movs	r3, #0
 8021846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8021848:	2301      	movs	r3, #1
 802184a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802184c:	f107 0314 	add.w	r3, r7, #20
 8021850:	4619      	mov	r1, r3
 8021852:	480c      	ldr	r0, [pc, #48]	; (8021884 <MX_GPIO_Init+0x198>)
 8021854:	f001 fe58 	bl	8023508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8021858:	2304      	movs	r3, #4
 802185a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 802185c:	2300      	movs	r3, #0
 802185e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021860:	2300      	movs	r3, #0
 8021862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021864:	f107 0314 	add.w	r3, r7, #20
 8021868:	4619      	mov	r1, r3
 802186a:	4807      	ldr	r0, [pc, #28]	; (8021888 <MX_GPIO_Init+0x19c>)
 802186c:	f001 fe4c 	bl	8023508 <HAL_GPIO_Init>

}
 8021870:	bf00      	nop
 8021872:	3728      	adds	r7, #40	; 0x28
 8021874:	46bd      	mov	sp, r7
 8021876:	bd80      	pop	{r7, pc}
 8021878:	40023800 	.word	0x40023800
 802187c:	40020800 	.word	0x40020800
 8021880:	40020400 	.word	0x40020400
 8021884:	40020000 	.word	0x40020000
 8021888:	40020c00 	.word	0x40020c00

0802188c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 802188c:	b480      	push	{r7}
 802188e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8021890:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8021892:	e7fe      	b.n	8021892 <Error_Handler+0x6>

08021894 <_ZN10SideSensorC1Ev>:
#include "side_sensor.hpp"
#include "declare_extern.h"

SideSensor::SideSensor() : read_state_flags_(0)
 8021894:	b480      	push	{r7}
 8021896:	b083      	sub	sp, #12
 8021898:	af00      	add	r7, sp, #0
 802189a:	6078      	str	r0, [r7, #4]
                         , write_state_flags_(0)
                         , exception_flags_(0)
                         , master_count_(0)
                         , corner_marker_count_(0)
                         , cross_line_count_(0) {}
 802189c:	687b      	ldr	r3, [r7, #4]
 802189e:	2200      	movs	r2, #0
 80218a0:	701a      	strb	r2, [r3, #0]
 80218a2:	687b      	ldr	r3, [r7, #4]
 80218a4:	2200      	movs	r2, #0
 80218a6:	705a      	strb	r2, [r3, #1]
 80218a8:	687b      	ldr	r3, [r7, #4]
 80218aa:	2200      	movs	r2, #0
 80218ac:	709a      	strb	r2, [r3, #2]
 80218ae:	687b      	ldr	r3, [r7, #4]
 80218b0:	2200      	movs	r2, #0
 80218b2:	70da      	strb	r2, [r3, #3]
 80218b4:	687b      	ldr	r3, [r7, #4]
 80218b6:	2200      	movs	r2, #0
 80218b8:	711a      	strb	r2, [r3, #4]
 80218ba:	687b      	ldr	r3, [r7, #4]
 80218bc:	2200      	movs	r2, #0
 80218be:	715a      	strb	r2, [r3, #5]
 80218c0:	687b      	ldr	r3, [r7, #4]
 80218c2:	4618      	mov	r0, r3
 80218c4:	370c      	adds	r7, #12
 80218c6:	46bd      	mov	sp, r7
 80218c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218cc:	4770      	bx	lr
	...

080218d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80218d0:	b480      	push	{r7}
 80218d2:	b083      	sub	sp, #12
 80218d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80218d6:	2300      	movs	r3, #0
 80218d8:	607b      	str	r3, [r7, #4]
 80218da:	4b10      	ldr	r3, [pc, #64]	; (802191c <HAL_MspInit+0x4c>)
 80218dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80218de:	4a0f      	ldr	r2, [pc, #60]	; (802191c <HAL_MspInit+0x4c>)
 80218e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80218e4:	6453      	str	r3, [r2, #68]	; 0x44
 80218e6:	4b0d      	ldr	r3, [pc, #52]	; (802191c <HAL_MspInit+0x4c>)
 80218e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80218ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80218ee:	607b      	str	r3, [r7, #4]
 80218f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80218f2:	2300      	movs	r3, #0
 80218f4:	603b      	str	r3, [r7, #0]
 80218f6:	4b09      	ldr	r3, [pc, #36]	; (802191c <HAL_MspInit+0x4c>)
 80218f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80218fa:	4a08      	ldr	r2, [pc, #32]	; (802191c <HAL_MspInit+0x4c>)
 80218fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021900:	6413      	str	r3, [r2, #64]	; 0x40
 8021902:	4b06      	ldr	r3, [pc, #24]	; (802191c <HAL_MspInit+0x4c>)
 8021904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802190a:	603b      	str	r3, [r7, #0]
 802190c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802190e:	bf00      	nop
 8021910:	370c      	adds	r7, #12
 8021912:	46bd      	mov	sp, r7
 8021914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021918:	4770      	bx	lr
 802191a:	bf00      	nop
 802191c:	40023800 	.word	0x40023800

08021920 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8021920:	b580      	push	{r7, lr}
 8021922:	b08a      	sub	sp, #40	; 0x28
 8021924:	af00      	add	r7, sp, #0
 8021926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021928:	f107 0314 	add.w	r3, r7, #20
 802192c:	2200      	movs	r2, #0
 802192e:	601a      	str	r2, [r3, #0]
 8021930:	605a      	str	r2, [r3, #4]
 8021932:	609a      	str	r2, [r3, #8]
 8021934:	60da      	str	r2, [r3, #12]
 8021936:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8021938:	687b      	ldr	r3, [r7, #4]
 802193a:	681b      	ldr	r3, [r3, #0]
 802193c:	4a3c      	ldr	r2, [pc, #240]	; (8021a30 <HAL_ADC_MspInit+0x110>)
 802193e:	4293      	cmp	r3, r2
 8021940:	d171      	bne.n	8021a26 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8021942:	2300      	movs	r3, #0
 8021944:	613b      	str	r3, [r7, #16]
 8021946:	4b3b      	ldr	r3, [pc, #236]	; (8021a34 <HAL_ADC_MspInit+0x114>)
 8021948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802194a:	4a3a      	ldr	r2, [pc, #232]	; (8021a34 <HAL_ADC_MspInit+0x114>)
 802194c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021950:	6453      	str	r3, [r2, #68]	; 0x44
 8021952:	4b38      	ldr	r3, [pc, #224]	; (8021a34 <HAL_ADC_MspInit+0x114>)
 8021954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802195a:	613b      	str	r3, [r7, #16]
 802195c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 802195e:	2300      	movs	r3, #0
 8021960:	60fb      	str	r3, [r7, #12]
 8021962:	4b34      	ldr	r3, [pc, #208]	; (8021a34 <HAL_ADC_MspInit+0x114>)
 8021964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021966:	4a33      	ldr	r2, [pc, #204]	; (8021a34 <HAL_ADC_MspInit+0x114>)
 8021968:	f043 0304 	orr.w	r3, r3, #4
 802196c:	6313      	str	r3, [r2, #48]	; 0x30
 802196e:	4b31      	ldr	r3, [pc, #196]	; (8021a34 <HAL_ADC_MspInit+0x114>)
 8021970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021972:	f003 0304 	and.w	r3, r3, #4
 8021976:	60fb      	str	r3, [r7, #12]
 8021978:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802197a:	2300      	movs	r3, #0
 802197c:	60bb      	str	r3, [r7, #8]
 802197e:	4b2d      	ldr	r3, [pc, #180]	; (8021a34 <HAL_ADC_MspInit+0x114>)
 8021980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021982:	4a2c      	ldr	r2, [pc, #176]	; (8021a34 <HAL_ADC_MspInit+0x114>)
 8021984:	f043 0301 	orr.w	r3, r3, #1
 8021988:	6313      	str	r3, [r2, #48]	; 0x30
 802198a:	4b2a      	ldr	r3, [pc, #168]	; (8021a34 <HAL_ADC_MspInit+0x114>)
 802198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802198e:	f003 0301 	and.w	r3, r3, #1
 8021992:	60bb      	str	r3, [r7, #8]
 8021994:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8021996:	233f      	movs	r3, #63	; 0x3f
 8021998:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802199a:	2303      	movs	r3, #3
 802199c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802199e:	2300      	movs	r3, #0
 80219a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80219a2:	f107 0314 	add.w	r3, r7, #20
 80219a6:	4619      	mov	r1, r3
 80219a8:	4823      	ldr	r0, [pc, #140]	; (8021a38 <HAL_ADC_MspInit+0x118>)
 80219aa:	f001 fdad 	bl	8023508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80219ae:	23ff      	movs	r3, #255	; 0xff
 80219b0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80219b2:	2303      	movs	r3, #3
 80219b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80219b6:	2300      	movs	r3, #0
 80219b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80219ba:	f107 0314 	add.w	r3, r7, #20
 80219be:	4619      	mov	r1, r3
 80219c0:	481e      	ldr	r0, [pc, #120]	; (8021a3c <HAL_ADC_MspInit+0x11c>)
 80219c2:	f001 fda1 	bl	8023508 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80219c6:	4b1e      	ldr	r3, [pc, #120]	; (8021a40 <HAL_ADC_MspInit+0x120>)
 80219c8:	4a1e      	ldr	r2, [pc, #120]	; (8021a44 <HAL_ADC_MspInit+0x124>)
 80219ca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80219cc:	4b1c      	ldr	r3, [pc, #112]	; (8021a40 <HAL_ADC_MspInit+0x120>)
 80219ce:	2200      	movs	r2, #0
 80219d0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80219d2:	4b1b      	ldr	r3, [pc, #108]	; (8021a40 <HAL_ADC_MspInit+0x120>)
 80219d4:	2200      	movs	r2, #0
 80219d6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80219d8:	4b19      	ldr	r3, [pc, #100]	; (8021a40 <HAL_ADC_MspInit+0x120>)
 80219da:	2200      	movs	r2, #0
 80219dc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80219de:	4b18      	ldr	r3, [pc, #96]	; (8021a40 <HAL_ADC_MspInit+0x120>)
 80219e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80219e4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80219e6:	4b16      	ldr	r3, [pc, #88]	; (8021a40 <HAL_ADC_MspInit+0x120>)
 80219e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80219ec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80219ee:	4b14      	ldr	r3, [pc, #80]	; (8021a40 <HAL_ADC_MspInit+0x120>)
 80219f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80219f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80219f6:	4b12      	ldr	r3, [pc, #72]	; (8021a40 <HAL_ADC_MspInit+0x120>)
 80219f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80219fc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80219fe:	4b10      	ldr	r3, [pc, #64]	; (8021a40 <HAL_ADC_MspInit+0x120>)
 8021a00:	2200      	movs	r2, #0
 8021a02:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8021a04:	4b0e      	ldr	r3, [pc, #56]	; (8021a40 <HAL_ADC_MspInit+0x120>)
 8021a06:	2200      	movs	r2, #0
 8021a08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8021a0a:	480d      	ldr	r0, [pc, #52]	; (8021a40 <HAL_ADC_MspInit+0x120>)
 8021a0c:	f001 fa0e 	bl	8022e2c <HAL_DMA_Init>
 8021a10:	4603      	mov	r3, r0
 8021a12:	2b00      	cmp	r3, #0
 8021a14:	d001      	beq.n	8021a1a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8021a16:	f7ff ff39 	bl	802188c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8021a1a:	687b      	ldr	r3, [r7, #4]
 8021a1c:	4a08      	ldr	r2, [pc, #32]	; (8021a40 <HAL_ADC_MspInit+0x120>)
 8021a1e:	639a      	str	r2, [r3, #56]	; 0x38
 8021a20:	4a07      	ldr	r2, [pc, #28]	; (8021a40 <HAL_ADC_MspInit+0x120>)
 8021a22:	687b      	ldr	r3, [r7, #4]
 8021a24:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8021a26:	bf00      	nop
 8021a28:	3728      	adds	r7, #40	; 0x28
 8021a2a:	46bd      	mov	sp, r7
 8021a2c:	bd80      	pop	{r7, pc}
 8021a2e:	bf00      	nop
 8021a30:	40012000 	.word	0x40012000
 8021a34:	40023800 	.word	0x40023800
 8021a38:	40020800 	.word	0x40020800
 8021a3c:	40020000 	.word	0x40020000
 8021a40:	200006c4 	.word	0x200006c4
 8021a44:	40026410 	.word	0x40026410

08021a48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8021a48:	b580      	push	{r7, lr}
 8021a4a:	b08a      	sub	sp, #40	; 0x28
 8021a4c:	af00      	add	r7, sp, #0
 8021a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021a50:	f107 0314 	add.w	r3, r7, #20
 8021a54:	2200      	movs	r2, #0
 8021a56:	601a      	str	r2, [r3, #0]
 8021a58:	605a      	str	r2, [r3, #4]
 8021a5a:	609a      	str	r2, [r3, #8]
 8021a5c:	60da      	str	r2, [r3, #12]
 8021a5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8021a60:	687b      	ldr	r3, [r7, #4]
 8021a62:	681b      	ldr	r3, [r3, #0]
 8021a64:	4a19      	ldr	r2, [pc, #100]	; (8021acc <HAL_I2C_MspInit+0x84>)
 8021a66:	4293      	cmp	r3, r2
 8021a68:	d12c      	bne.n	8021ac4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8021a6a:	2300      	movs	r3, #0
 8021a6c:	613b      	str	r3, [r7, #16]
 8021a6e:	4b18      	ldr	r3, [pc, #96]	; (8021ad0 <HAL_I2C_MspInit+0x88>)
 8021a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021a72:	4a17      	ldr	r2, [pc, #92]	; (8021ad0 <HAL_I2C_MspInit+0x88>)
 8021a74:	f043 0302 	orr.w	r3, r3, #2
 8021a78:	6313      	str	r3, [r2, #48]	; 0x30
 8021a7a:	4b15      	ldr	r3, [pc, #84]	; (8021ad0 <HAL_I2C_MspInit+0x88>)
 8021a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021a7e:	f003 0302 	and.w	r3, r3, #2
 8021a82:	613b      	str	r3, [r7, #16]
 8021a84:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8021a86:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8021a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8021a8c:	2312      	movs	r3, #18
 8021a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8021a90:	2301      	movs	r3, #1
 8021a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021a94:	2303      	movs	r3, #3
 8021a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8021a98:	2304      	movs	r3, #4
 8021a9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021a9c:	f107 0314 	add.w	r3, r7, #20
 8021aa0:	4619      	mov	r1, r3
 8021aa2:	480c      	ldr	r0, [pc, #48]	; (8021ad4 <HAL_I2C_MspInit+0x8c>)
 8021aa4:	f001 fd30 	bl	8023508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8021aa8:	2300      	movs	r3, #0
 8021aaa:	60fb      	str	r3, [r7, #12]
 8021aac:	4b08      	ldr	r3, [pc, #32]	; (8021ad0 <HAL_I2C_MspInit+0x88>)
 8021aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021ab0:	4a07      	ldr	r2, [pc, #28]	; (8021ad0 <HAL_I2C_MspInit+0x88>)
 8021ab2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8021ab6:	6413      	str	r3, [r2, #64]	; 0x40
 8021ab8:	4b05      	ldr	r3, [pc, #20]	; (8021ad0 <HAL_I2C_MspInit+0x88>)
 8021aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8021ac0:	60fb      	str	r3, [r7, #12]
 8021ac2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8021ac4:	bf00      	nop
 8021ac6:	3728      	adds	r7, #40	; 0x28
 8021ac8:	46bd      	mov	sp, r7
 8021aca:	bd80      	pop	{r7, pc}
 8021acc:	40005800 	.word	0x40005800
 8021ad0:	40023800 	.word	0x40023800
 8021ad4:	40020400 	.word	0x40020400

08021ad8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8021ad8:	b580      	push	{r7, lr}
 8021ada:	b08a      	sub	sp, #40	; 0x28
 8021adc:	af00      	add	r7, sp, #0
 8021ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021ae0:	f107 0314 	add.w	r3, r7, #20
 8021ae4:	2200      	movs	r2, #0
 8021ae6:	601a      	str	r2, [r3, #0]
 8021ae8:	605a      	str	r2, [r3, #4]
 8021aea:	609a      	str	r2, [r3, #8]
 8021aec:	60da      	str	r2, [r3, #12]
 8021aee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8021af0:	687b      	ldr	r3, [r7, #4]
 8021af2:	681b      	ldr	r3, [r3, #0]
 8021af4:	4a19      	ldr	r2, [pc, #100]	; (8021b5c <HAL_SPI_MspInit+0x84>)
 8021af6:	4293      	cmp	r3, r2
 8021af8:	d12c      	bne.n	8021b54 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8021afa:	2300      	movs	r3, #0
 8021afc:	613b      	str	r3, [r7, #16]
 8021afe:	4b18      	ldr	r3, [pc, #96]	; (8021b60 <HAL_SPI_MspInit+0x88>)
 8021b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021b02:	4a17      	ldr	r2, [pc, #92]	; (8021b60 <HAL_SPI_MspInit+0x88>)
 8021b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8021b08:	6413      	str	r3, [r2, #64]	; 0x40
 8021b0a:	4b15      	ldr	r3, [pc, #84]	; (8021b60 <HAL_SPI_MspInit+0x88>)
 8021b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021b0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8021b12:	613b      	str	r3, [r7, #16]
 8021b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021b16:	2300      	movs	r3, #0
 8021b18:	60fb      	str	r3, [r7, #12]
 8021b1a:	4b11      	ldr	r3, [pc, #68]	; (8021b60 <HAL_SPI_MspInit+0x88>)
 8021b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021b1e:	4a10      	ldr	r2, [pc, #64]	; (8021b60 <HAL_SPI_MspInit+0x88>)
 8021b20:	f043 0304 	orr.w	r3, r3, #4
 8021b24:	6313      	str	r3, [r2, #48]	; 0x30
 8021b26:	4b0e      	ldr	r3, [pc, #56]	; (8021b60 <HAL_SPI_MspInit+0x88>)
 8021b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021b2a:	f003 0304 	and.w	r3, r3, #4
 8021b2e:	60fb      	str	r3, [r7, #12]
 8021b30:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8021b32:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8021b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021b38:	2302      	movs	r3, #2
 8021b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021b3c:	2300      	movs	r3, #0
 8021b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021b40:	2303      	movs	r3, #3
 8021b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8021b44:	2306      	movs	r3, #6
 8021b46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021b48:	f107 0314 	add.w	r3, r7, #20
 8021b4c:	4619      	mov	r1, r3
 8021b4e:	4805      	ldr	r0, [pc, #20]	; (8021b64 <HAL_SPI_MspInit+0x8c>)
 8021b50:	f001 fcda 	bl	8023508 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8021b54:	bf00      	nop
 8021b56:	3728      	adds	r7, #40	; 0x28
 8021b58:	46bd      	mov	sp, r7
 8021b5a:	bd80      	pop	{r7, pc}
 8021b5c:	40003c00 	.word	0x40003c00
 8021b60:	40023800 	.word	0x40023800
 8021b64:	40020800 	.word	0x40020800

08021b68 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8021b68:	b480      	push	{r7}
 8021b6a:	b087      	sub	sp, #28
 8021b6c:	af00      	add	r7, sp, #0
 8021b6e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8021b70:	687b      	ldr	r3, [r7, #4]
 8021b72:	681b      	ldr	r3, [r3, #0]
 8021b74:	4a1f      	ldr	r2, [pc, #124]	; (8021bf4 <HAL_TIM_PWM_MspInit+0x8c>)
 8021b76:	4293      	cmp	r3, r2
 8021b78:	d10e      	bne.n	8021b98 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8021b7a:	2300      	movs	r3, #0
 8021b7c:	617b      	str	r3, [r7, #20]
 8021b7e:	4b1e      	ldr	r3, [pc, #120]	; (8021bf8 <HAL_TIM_PWM_MspInit+0x90>)
 8021b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021b82:	4a1d      	ldr	r2, [pc, #116]	; (8021bf8 <HAL_TIM_PWM_MspInit+0x90>)
 8021b84:	f043 0301 	orr.w	r3, r3, #1
 8021b88:	6453      	str	r3, [r2, #68]	; 0x44
 8021b8a:	4b1b      	ldr	r3, [pc, #108]	; (8021bf8 <HAL_TIM_PWM_MspInit+0x90>)
 8021b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021b8e:	f003 0301 	and.w	r3, r3, #1
 8021b92:	617b      	str	r3, [r7, #20]
 8021b94:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8021b96:	e026      	b.n	8021be6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8021b98:	687b      	ldr	r3, [r7, #4]
 8021b9a:	681b      	ldr	r3, [r3, #0]
 8021b9c:	4a17      	ldr	r2, [pc, #92]	; (8021bfc <HAL_TIM_PWM_MspInit+0x94>)
 8021b9e:	4293      	cmp	r3, r2
 8021ba0:	d10e      	bne.n	8021bc0 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8021ba2:	2300      	movs	r3, #0
 8021ba4:	613b      	str	r3, [r7, #16]
 8021ba6:	4b14      	ldr	r3, [pc, #80]	; (8021bf8 <HAL_TIM_PWM_MspInit+0x90>)
 8021ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021baa:	4a13      	ldr	r2, [pc, #76]	; (8021bf8 <HAL_TIM_PWM_MspInit+0x90>)
 8021bac:	f043 0302 	orr.w	r3, r3, #2
 8021bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8021bb2:	4b11      	ldr	r3, [pc, #68]	; (8021bf8 <HAL_TIM_PWM_MspInit+0x90>)
 8021bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021bb6:	f003 0302 	and.w	r3, r3, #2
 8021bba:	613b      	str	r3, [r7, #16]
 8021bbc:	693b      	ldr	r3, [r7, #16]
}
 8021bbe:	e012      	b.n	8021be6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 8021bc0:	687b      	ldr	r3, [r7, #4]
 8021bc2:	681b      	ldr	r3, [r3, #0]
 8021bc4:	4a0e      	ldr	r2, [pc, #56]	; (8021c00 <HAL_TIM_PWM_MspInit+0x98>)
 8021bc6:	4293      	cmp	r3, r2
 8021bc8:	d10d      	bne.n	8021be6 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8021bca:	2300      	movs	r3, #0
 8021bcc:	60fb      	str	r3, [r7, #12]
 8021bce:	4b0a      	ldr	r3, [pc, #40]	; (8021bf8 <HAL_TIM_PWM_MspInit+0x90>)
 8021bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021bd2:	4a09      	ldr	r2, [pc, #36]	; (8021bf8 <HAL_TIM_PWM_MspInit+0x90>)
 8021bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8021bda:	4b07      	ldr	r3, [pc, #28]	; (8021bf8 <HAL_TIM_PWM_MspInit+0x90>)
 8021bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021be2:	60fb      	str	r3, [r7, #12]
 8021be4:	68fb      	ldr	r3, [r7, #12]
}
 8021be6:	bf00      	nop
 8021be8:	371c      	adds	r7, #28
 8021bea:	46bd      	mov	sp, r7
 8021bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bf0:	4770      	bx	lr
 8021bf2:	bf00      	nop
 8021bf4:	40010000 	.word	0x40010000
 8021bf8:	40023800 	.word	0x40023800
 8021bfc:	40000400 	.word	0x40000400
 8021c00:	40001800 	.word	0x40001800

08021c04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8021c04:	b580      	push	{r7, lr}
 8021c06:	b088      	sub	sp, #32
 8021c08:	af00      	add	r7, sp, #0
 8021c0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8021c0c:	687b      	ldr	r3, [r7, #4]
 8021c0e:	681b      	ldr	r3, [r3, #0]
 8021c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8021c14:	d116      	bne.n	8021c44 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8021c16:	2300      	movs	r3, #0
 8021c18:	61fb      	str	r3, [r7, #28]
 8021c1a:	4b40      	ldr	r3, [pc, #256]	; (8021d1c <HAL_TIM_Base_MspInit+0x118>)
 8021c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c1e:	4a3f      	ldr	r2, [pc, #252]	; (8021d1c <HAL_TIM_Base_MspInit+0x118>)
 8021c20:	f043 0301 	orr.w	r3, r3, #1
 8021c24:	6413      	str	r3, [r2, #64]	; 0x40
 8021c26:	4b3d      	ldr	r3, [pc, #244]	; (8021d1c <HAL_TIM_Base_MspInit+0x118>)
 8021c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c2a:	f003 0301 	and.w	r3, r3, #1
 8021c2e:	61fb      	str	r3, [r7, #28]
 8021c30:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8021c32:	2200      	movs	r2, #0
 8021c34:	2100      	movs	r1, #0
 8021c36:	201c      	movs	r0, #28
 8021c38:	f001 f8c1 	bl	8022dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8021c3c:	201c      	movs	r0, #28
 8021c3e:	f001 f8da 	bl	8022df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8021c42:	e066      	b.n	8021d12 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM5)
 8021c44:	687b      	ldr	r3, [r7, #4]
 8021c46:	681b      	ldr	r3, [r3, #0]
 8021c48:	4a35      	ldr	r2, [pc, #212]	; (8021d20 <HAL_TIM_Base_MspInit+0x11c>)
 8021c4a:	4293      	cmp	r3, r2
 8021c4c:	d116      	bne.n	8021c7c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8021c4e:	2300      	movs	r3, #0
 8021c50:	61bb      	str	r3, [r7, #24]
 8021c52:	4b32      	ldr	r3, [pc, #200]	; (8021d1c <HAL_TIM_Base_MspInit+0x118>)
 8021c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c56:	4a31      	ldr	r2, [pc, #196]	; (8021d1c <HAL_TIM_Base_MspInit+0x118>)
 8021c58:	f043 0308 	orr.w	r3, r3, #8
 8021c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8021c5e:	4b2f      	ldr	r3, [pc, #188]	; (8021d1c <HAL_TIM_Base_MspInit+0x118>)
 8021c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c62:	f003 0308 	and.w	r3, r3, #8
 8021c66:	61bb      	str	r3, [r7, #24]
 8021c68:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8021c6a:	2200      	movs	r2, #0
 8021c6c:	2100      	movs	r1, #0
 8021c6e:	2032      	movs	r0, #50	; 0x32
 8021c70:	f001 f8a5 	bl	8022dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8021c74:	2032      	movs	r0, #50	; 0x32
 8021c76:	f001 f8be 	bl	8022df6 <HAL_NVIC_EnableIRQ>
}
 8021c7a:	e04a      	b.n	8021d12 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM6)
 8021c7c:	687b      	ldr	r3, [r7, #4]
 8021c7e:	681b      	ldr	r3, [r3, #0]
 8021c80:	4a28      	ldr	r2, [pc, #160]	; (8021d24 <HAL_TIM_Base_MspInit+0x120>)
 8021c82:	4293      	cmp	r3, r2
 8021c84:	d116      	bne.n	8021cb4 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8021c86:	2300      	movs	r3, #0
 8021c88:	617b      	str	r3, [r7, #20]
 8021c8a:	4b24      	ldr	r3, [pc, #144]	; (8021d1c <HAL_TIM_Base_MspInit+0x118>)
 8021c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c8e:	4a23      	ldr	r2, [pc, #140]	; (8021d1c <HAL_TIM_Base_MspInit+0x118>)
 8021c90:	f043 0310 	orr.w	r3, r3, #16
 8021c94:	6413      	str	r3, [r2, #64]	; 0x40
 8021c96:	4b21      	ldr	r3, [pc, #132]	; (8021d1c <HAL_TIM_Base_MspInit+0x118>)
 8021c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021c9a:	f003 0310 	and.w	r3, r3, #16
 8021c9e:	617b      	str	r3, [r7, #20]
 8021ca0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8021ca2:	2200      	movs	r2, #0
 8021ca4:	2100      	movs	r1, #0
 8021ca6:	2036      	movs	r0, #54	; 0x36
 8021ca8:	f001 f889 	bl	8022dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8021cac:	2036      	movs	r0, #54	; 0x36
 8021cae:	f001 f8a2 	bl	8022df6 <HAL_NVIC_EnableIRQ>
}
 8021cb2:	e02e      	b.n	8021d12 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 8021cb4:	687b      	ldr	r3, [r7, #4]
 8021cb6:	681b      	ldr	r3, [r3, #0]
 8021cb8:	4a1b      	ldr	r2, [pc, #108]	; (8021d28 <HAL_TIM_Base_MspInit+0x124>)
 8021cba:	4293      	cmp	r3, r2
 8021cbc:	d116      	bne.n	8021cec <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8021cbe:	2300      	movs	r3, #0
 8021cc0:	613b      	str	r3, [r7, #16]
 8021cc2:	4b16      	ldr	r3, [pc, #88]	; (8021d1c <HAL_TIM_Base_MspInit+0x118>)
 8021cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021cc6:	4a15      	ldr	r2, [pc, #84]	; (8021d1c <HAL_TIM_Base_MspInit+0x118>)
 8021cc8:	f043 0320 	orr.w	r3, r3, #32
 8021ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8021cce:	4b13      	ldr	r3, [pc, #76]	; (8021d1c <HAL_TIM_Base_MspInit+0x118>)
 8021cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021cd2:	f003 0320 	and.w	r3, r3, #32
 8021cd6:	613b      	str	r3, [r7, #16]
 8021cd8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8021cda:	2200      	movs	r2, #0
 8021cdc:	2100      	movs	r1, #0
 8021cde:	2037      	movs	r0, #55	; 0x37
 8021ce0:	f001 f86d 	bl	8022dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8021ce4:	2037      	movs	r0, #55	; 0x37
 8021ce6:	f001 f886 	bl	8022df6 <HAL_NVIC_EnableIRQ>
}
 8021cea:	e012      	b.n	8021d12 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 8021cec:	687b      	ldr	r3, [r7, #4]
 8021cee:	681b      	ldr	r3, [r3, #0]
 8021cf0:	4a0e      	ldr	r2, [pc, #56]	; (8021d2c <HAL_TIM_Base_MspInit+0x128>)
 8021cf2:	4293      	cmp	r3, r2
 8021cf4:	d10d      	bne.n	8021d12 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8021cf6:	2300      	movs	r3, #0
 8021cf8:	60fb      	str	r3, [r7, #12]
 8021cfa:	4b08      	ldr	r3, [pc, #32]	; (8021d1c <HAL_TIM_Base_MspInit+0x118>)
 8021cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021cfe:	4a07      	ldr	r2, [pc, #28]	; (8021d1c <HAL_TIM_Base_MspInit+0x118>)
 8021d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8021d04:	6453      	str	r3, [r2, #68]	; 0x44
 8021d06:	4b05      	ldr	r3, [pc, #20]	; (8021d1c <HAL_TIM_Base_MspInit+0x118>)
 8021d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021d0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8021d0e:	60fb      	str	r3, [r7, #12]
 8021d10:	68fb      	ldr	r3, [r7, #12]
}
 8021d12:	bf00      	nop
 8021d14:	3720      	adds	r7, #32
 8021d16:	46bd      	mov	sp, r7
 8021d18:	bd80      	pop	{r7, pc}
 8021d1a:	bf00      	nop
 8021d1c:	40023800 	.word	0x40023800
 8021d20:	40000c00 	.word	0x40000c00
 8021d24:	40001000 	.word	0x40001000
 8021d28:	40001400 	.word	0x40001400
 8021d2c:	40014800 	.word	0x40014800

08021d30 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8021d30:	b580      	push	{r7, lr}
 8021d32:	b08c      	sub	sp, #48	; 0x30
 8021d34:	af00      	add	r7, sp, #0
 8021d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021d38:	f107 031c 	add.w	r3, r7, #28
 8021d3c:	2200      	movs	r2, #0
 8021d3e:	601a      	str	r2, [r3, #0]
 8021d40:	605a      	str	r2, [r3, #4]
 8021d42:	609a      	str	r2, [r3, #8]
 8021d44:	60da      	str	r2, [r3, #12]
 8021d46:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8021d48:	687b      	ldr	r3, [r7, #4]
 8021d4a:	681b      	ldr	r3, [r3, #0]
 8021d4c:	4a32      	ldr	r2, [pc, #200]	; (8021e18 <HAL_TIM_Encoder_MspInit+0xe8>)
 8021d4e:	4293      	cmp	r3, r2
 8021d50:	d12c      	bne.n	8021dac <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8021d52:	2300      	movs	r3, #0
 8021d54:	61bb      	str	r3, [r7, #24]
 8021d56:	4b31      	ldr	r3, [pc, #196]	; (8021e1c <HAL_TIM_Encoder_MspInit+0xec>)
 8021d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021d5a:	4a30      	ldr	r2, [pc, #192]	; (8021e1c <HAL_TIM_Encoder_MspInit+0xec>)
 8021d5c:	f043 0304 	orr.w	r3, r3, #4
 8021d60:	6413      	str	r3, [r2, #64]	; 0x40
 8021d62:	4b2e      	ldr	r3, [pc, #184]	; (8021e1c <HAL_TIM_Encoder_MspInit+0xec>)
 8021d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021d66:	f003 0304 	and.w	r3, r3, #4
 8021d6a:	61bb      	str	r3, [r7, #24]
 8021d6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8021d6e:	2300      	movs	r3, #0
 8021d70:	617b      	str	r3, [r7, #20]
 8021d72:	4b2a      	ldr	r3, [pc, #168]	; (8021e1c <HAL_TIM_Encoder_MspInit+0xec>)
 8021d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021d76:	4a29      	ldr	r2, [pc, #164]	; (8021e1c <HAL_TIM_Encoder_MspInit+0xec>)
 8021d78:	f043 0302 	orr.w	r3, r3, #2
 8021d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8021d7e:	4b27      	ldr	r3, [pc, #156]	; (8021e1c <HAL_TIM_Encoder_MspInit+0xec>)
 8021d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021d82:	f003 0302 	and.w	r3, r3, #2
 8021d86:	617b      	str	r3, [r7, #20]
 8021d88:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8021d8a:	23c0      	movs	r3, #192	; 0xc0
 8021d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021d8e:	2302      	movs	r3, #2
 8021d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021d92:	2300      	movs	r3, #0
 8021d94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021d96:	2300      	movs	r3, #0
 8021d98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8021d9a:	2302      	movs	r3, #2
 8021d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021d9e:	f107 031c 	add.w	r3, r7, #28
 8021da2:	4619      	mov	r1, r3
 8021da4:	481e      	ldr	r0, [pc, #120]	; (8021e20 <HAL_TIM_Encoder_MspInit+0xf0>)
 8021da6:	f001 fbaf 	bl	8023508 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8021daa:	e030      	b.n	8021e0e <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8021dac:	687b      	ldr	r3, [r7, #4]
 8021dae:	681b      	ldr	r3, [r3, #0]
 8021db0:	4a1c      	ldr	r2, [pc, #112]	; (8021e24 <HAL_TIM_Encoder_MspInit+0xf4>)
 8021db2:	4293      	cmp	r3, r2
 8021db4:	d12b      	bne.n	8021e0e <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8021db6:	2300      	movs	r3, #0
 8021db8:	613b      	str	r3, [r7, #16]
 8021dba:	4b18      	ldr	r3, [pc, #96]	; (8021e1c <HAL_TIM_Encoder_MspInit+0xec>)
 8021dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021dbe:	4a17      	ldr	r2, [pc, #92]	; (8021e1c <HAL_TIM_Encoder_MspInit+0xec>)
 8021dc0:	f043 0302 	orr.w	r3, r3, #2
 8021dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8021dc6:	4b15      	ldr	r3, [pc, #84]	; (8021e1c <HAL_TIM_Encoder_MspInit+0xec>)
 8021dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021dca:	f003 0302 	and.w	r3, r3, #2
 8021dce:	613b      	str	r3, [r7, #16]
 8021dd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021dd2:	2300      	movs	r3, #0
 8021dd4:	60fb      	str	r3, [r7, #12]
 8021dd6:	4b11      	ldr	r3, [pc, #68]	; (8021e1c <HAL_TIM_Encoder_MspInit+0xec>)
 8021dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021dda:	4a10      	ldr	r2, [pc, #64]	; (8021e1c <HAL_TIM_Encoder_MspInit+0xec>)
 8021ddc:	f043 0304 	orr.w	r3, r3, #4
 8021de0:	6313      	str	r3, [r2, #48]	; 0x30
 8021de2:	4b0e      	ldr	r3, [pc, #56]	; (8021e1c <HAL_TIM_Encoder_MspInit+0xec>)
 8021de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021de6:	f003 0304 	and.w	r3, r3, #4
 8021dea:	60fb      	str	r3, [r7, #12]
 8021dec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8021dee:	23c0      	movs	r3, #192	; 0xc0
 8021df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021df2:	2302      	movs	r3, #2
 8021df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021df6:	2300      	movs	r3, #0
 8021df8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021dfa:	2300      	movs	r3, #0
 8021dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8021dfe:	2303      	movs	r3, #3
 8021e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021e02:	f107 031c 	add.w	r3, r7, #28
 8021e06:	4619      	mov	r1, r3
 8021e08:	4807      	ldr	r0, [pc, #28]	; (8021e28 <HAL_TIM_Encoder_MspInit+0xf8>)
 8021e0a:	f001 fb7d 	bl	8023508 <HAL_GPIO_Init>
}
 8021e0e:	bf00      	nop
 8021e10:	3730      	adds	r7, #48	; 0x30
 8021e12:	46bd      	mov	sp, r7
 8021e14:	bd80      	pop	{r7, pc}
 8021e16:	bf00      	nop
 8021e18:	40000800 	.word	0x40000800
 8021e1c:	40023800 	.word	0x40023800
 8021e20:	40020400 	.word	0x40020400
 8021e24:	40010400 	.word	0x40010400
 8021e28:	40020800 	.word	0x40020800

08021e2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8021e2c:	b580      	push	{r7, lr}
 8021e2e:	b08c      	sub	sp, #48	; 0x30
 8021e30:	af00      	add	r7, sp, #0
 8021e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021e34:	f107 031c 	add.w	r3, r7, #28
 8021e38:	2200      	movs	r2, #0
 8021e3a:	601a      	str	r2, [r3, #0]
 8021e3c:	605a      	str	r2, [r3, #4]
 8021e3e:	609a      	str	r2, [r3, #8]
 8021e40:	60da      	str	r2, [r3, #12]
 8021e42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8021e44:	687b      	ldr	r3, [r7, #4]
 8021e46:	681b      	ldr	r3, [r3, #0]
 8021e48:	4a59      	ldr	r2, [pc, #356]	; (8021fb0 <HAL_TIM_MspPostInit+0x184>)
 8021e4a:	4293      	cmp	r3, r2
 8021e4c:	d11f      	bne.n	8021e8e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021e4e:	2300      	movs	r3, #0
 8021e50:	61bb      	str	r3, [r7, #24]
 8021e52:	4b58      	ldr	r3, [pc, #352]	; (8021fb4 <HAL_TIM_MspPostInit+0x188>)
 8021e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021e56:	4a57      	ldr	r2, [pc, #348]	; (8021fb4 <HAL_TIM_MspPostInit+0x188>)
 8021e58:	f043 0301 	orr.w	r3, r3, #1
 8021e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8021e5e:	4b55      	ldr	r3, [pc, #340]	; (8021fb4 <HAL_TIM_MspPostInit+0x188>)
 8021e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021e62:	f003 0301 	and.w	r3, r3, #1
 8021e66:	61bb      	str	r3, [r7, #24]
 8021e68:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8021e6a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8021e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021e70:	2302      	movs	r3, #2
 8021e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021e74:	2300      	movs	r3, #0
 8021e76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021e78:	2300      	movs	r3, #0
 8021e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8021e7c:	2301      	movs	r3, #1
 8021e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021e80:	f107 031c 	add.w	r3, r7, #28
 8021e84:	4619      	mov	r1, r3
 8021e86:	484c      	ldr	r0, [pc, #304]	; (8021fb8 <HAL_TIM_MspPostInit+0x18c>)
 8021e88:	f001 fb3e 	bl	8023508 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8021e8c:	e08b      	b.n	8021fa6 <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM3)
 8021e8e:	687b      	ldr	r3, [r7, #4]
 8021e90:	681b      	ldr	r3, [r3, #0]
 8021e92:	4a4a      	ldr	r2, [pc, #296]	; (8021fbc <HAL_TIM_MspPostInit+0x190>)
 8021e94:	4293      	cmp	r3, r2
 8021e96:	d13d      	bne.n	8021f14 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8021e98:	2300      	movs	r3, #0
 8021e9a:	617b      	str	r3, [r7, #20]
 8021e9c:	4b45      	ldr	r3, [pc, #276]	; (8021fb4 <HAL_TIM_MspPostInit+0x188>)
 8021e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021ea0:	4a44      	ldr	r2, [pc, #272]	; (8021fb4 <HAL_TIM_MspPostInit+0x188>)
 8021ea2:	f043 0304 	orr.w	r3, r3, #4
 8021ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8021ea8:	4b42      	ldr	r3, [pc, #264]	; (8021fb4 <HAL_TIM_MspPostInit+0x188>)
 8021eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021eac:	f003 0304 	and.w	r3, r3, #4
 8021eb0:	617b      	str	r3, [r7, #20]
 8021eb2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8021eb4:	2300      	movs	r3, #0
 8021eb6:	613b      	str	r3, [r7, #16]
 8021eb8:	4b3e      	ldr	r3, [pc, #248]	; (8021fb4 <HAL_TIM_MspPostInit+0x188>)
 8021eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021ebc:	4a3d      	ldr	r2, [pc, #244]	; (8021fb4 <HAL_TIM_MspPostInit+0x188>)
 8021ebe:	f043 0302 	orr.w	r3, r3, #2
 8021ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8021ec4:	4b3b      	ldr	r3, [pc, #236]	; (8021fb4 <HAL_TIM_MspPostInit+0x188>)
 8021ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021ec8:	f003 0302 	and.w	r3, r3, #2
 8021ecc:	613b      	str	r3, [r7, #16]
 8021ece:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8021ed0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8021ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021ed6:	2302      	movs	r3, #2
 8021ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021eda:	2300      	movs	r3, #0
 8021edc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021ede:	2300      	movs	r3, #0
 8021ee0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8021ee2:	2302      	movs	r3, #2
 8021ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021ee6:	f107 031c 	add.w	r3, r7, #28
 8021eea:	4619      	mov	r1, r3
 8021eec:	4834      	ldr	r0, [pc, #208]	; (8021fc0 <HAL_TIM_MspPostInit+0x194>)
 8021eee:	f001 fb0b 	bl	8023508 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8021ef2:	2330      	movs	r3, #48	; 0x30
 8021ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021ef6:	2302      	movs	r3, #2
 8021ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021efa:	2300      	movs	r3, #0
 8021efc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021efe:	2300      	movs	r3, #0
 8021f00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8021f02:	2302      	movs	r3, #2
 8021f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021f06:	f107 031c 	add.w	r3, r7, #28
 8021f0a:	4619      	mov	r1, r3
 8021f0c:	482d      	ldr	r0, [pc, #180]	; (8021fc4 <HAL_TIM_MspPostInit+0x198>)
 8021f0e:	f001 fafb 	bl	8023508 <HAL_GPIO_Init>
}
 8021f12:	e048      	b.n	8021fa6 <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM11)
 8021f14:	687b      	ldr	r3, [r7, #4]
 8021f16:	681b      	ldr	r3, [r3, #0]
 8021f18:	4a2b      	ldr	r2, [pc, #172]	; (8021fc8 <HAL_TIM_MspPostInit+0x19c>)
 8021f1a:	4293      	cmp	r3, r2
 8021f1c:	d11f      	bne.n	8021f5e <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8021f1e:	2300      	movs	r3, #0
 8021f20:	60fb      	str	r3, [r7, #12]
 8021f22:	4b24      	ldr	r3, [pc, #144]	; (8021fb4 <HAL_TIM_MspPostInit+0x188>)
 8021f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021f26:	4a23      	ldr	r2, [pc, #140]	; (8021fb4 <HAL_TIM_MspPostInit+0x188>)
 8021f28:	f043 0302 	orr.w	r3, r3, #2
 8021f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8021f2e:	4b21      	ldr	r3, [pc, #132]	; (8021fb4 <HAL_TIM_MspPostInit+0x188>)
 8021f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021f32:	f003 0302 	and.w	r3, r3, #2
 8021f36:	60fb      	str	r3, [r7, #12]
 8021f38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8021f3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8021f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021f40:	2302      	movs	r3, #2
 8021f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021f44:	2300      	movs	r3, #0
 8021f46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021f48:	2300      	movs	r3, #0
 8021f4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8021f4c:	2303      	movs	r3, #3
 8021f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021f50:	f107 031c 	add.w	r3, r7, #28
 8021f54:	4619      	mov	r1, r3
 8021f56:	481b      	ldr	r0, [pc, #108]	; (8021fc4 <HAL_TIM_MspPostInit+0x198>)
 8021f58:	f001 fad6 	bl	8023508 <HAL_GPIO_Init>
}
 8021f5c:	e023      	b.n	8021fa6 <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM12)
 8021f5e:	687b      	ldr	r3, [r7, #4]
 8021f60:	681b      	ldr	r3, [r3, #0]
 8021f62:	4a1a      	ldr	r2, [pc, #104]	; (8021fcc <HAL_TIM_MspPostInit+0x1a0>)
 8021f64:	4293      	cmp	r3, r2
 8021f66:	d11e      	bne.n	8021fa6 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8021f68:	2300      	movs	r3, #0
 8021f6a:	60bb      	str	r3, [r7, #8]
 8021f6c:	4b11      	ldr	r3, [pc, #68]	; (8021fb4 <HAL_TIM_MspPostInit+0x188>)
 8021f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021f70:	4a10      	ldr	r2, [pc, #64]	; (8021fb4 <HAL_TIM_MspPostInit+0x188>)
 8021f72:	f043 0302 	orr.w	r3, r3, #2
 8021f76:	6313      	str	r3, [r2, #48]	; 0x30
 8021f78:	4b0e      	ldr	r3, [pc, #56]	; (8021fb4 <HAL_TIM_MspPostInit+0x188>)
 8021f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021f7c:	f003 0302 	and.w	r3, r3, #2
 8021f80:	60bb      	str	r3, [r7, #8]
 8021f82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8021f84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8021f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021f8a:	2302      	movs	r3, #2
 8021f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021f8e:	2300      	movs	r3, #0
 8021f90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021f92:	2300      	movs	r3, #0
 8021f94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8021f96:	2309      	movs	r3, #9
 8021f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021f9a:	f107 031c 	add.w	r3, r7, #28
 8021f9e:	4619      	mov	r1, r3
 8021fa0:	4808      	ldr	r0, [pc, #32]	; (8021fc4 <HAL_TIM_MspPostInit+0x198>)
 8021fa2:	f001 fab1 	bl	8023508 <HAL_GPIO_Init>
}
 8021fa6:	bf00      	nop
 8021fa8:	3730      	adds	r7, #48	; 0x30
 8021faa:	46bd      	mov	sp, r7
 8021fac:	bd80      	pop	{r7, pc}
 8021fae:	bf00      	nop
 8021fb0:	40010000 	.word	0x40010000
 8021fb4:	40023800 	.word	0x40023800
 8021fb8:	40020000 	.word	0x40020000
 8021fbc:	40000400 	.word	0x40000400
 8021fc0:	40020800 	.word	0x40020800
 8021fc4:	40020400 	.word	0x40020400
 8021fc8:	40014800 	.word	0x40014800
 8021fcc:	40001800 	.word	0x40001800

08021fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8021fd0:	b480      	push	{r7}
 8021fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8021fd4:	e7fe      	b.n	8021fd4 <NMI_Handler+0x4>

08021fd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8021fd6:	b480      	push	{r7}
 8021fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8021fda:	e7fe      	b.n	8021fda <HardFault_Handler+0x4>

08021fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8021fdc:	b480      	push	{r7}
 8021fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8021fe0:	e7fe      	b.n	8021fe0 <MemManage_Handler+0x4>

08021fe2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8021fe2:	b480      	push	{r7}
 8021fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8021fe6:	e7fe      	b.n	8021fe6 <BusFault_Handler+0x4>

08021fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8021fe8:	b480      	push	{r7}
 8021fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8021fec:	e7fe      	b.n	8021fec <UsageFault_Handler+0x4>

08021fee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8021fee:	b480      	push	{r7}
 8021ff0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8021ff2:	bf00      	nop
 8021ff4:	46bd      	mov	sp, r7
 8021ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ffa:	4770      	bx	lr

08021ffc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8021ffc:	b480      	push	{r7}
 8021ffe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8022000:	bf00      	nop
 8022002:	46bd      	mov	sp, r7
 8022004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022008:	4770      	bx	lr

0802200a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 802200a:	b480      	push	{r7}
 802200c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 802200e:	bf00      	nop
 8022010:	46bd      	mov	sp, r7
 8022012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022016:	4770      	bx	lr

08022018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8022018:	b580      	push	{r7, lr}
 802201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 802201c:	f000 f9be 	bl	802239c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8022020:	bf00      	nop
 8022022:	bd80      	pop	{r7, pc}

08022024 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8022024:	b580      	push	{r7, lr}
 8022026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8022028:	4802      	ldr	r0, [pc, #8]	; (8022034 <TIM2_IRQHandler+0x10>)
 802202a:	f002 fb2f 	bl	802468c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 802202e:	bf00      	nop
 8022030:	bd80      	pop	{r7, pc}
 8022032:	bf00      	nop
 8022034:	200007a4 	.word	0x200007a4

08022038 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8022038:	b580      	push	{r7, lr}
 802203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 802203c:	4802      	ldr	r0, [pc, #8]	; (8022048 <TIM5_IRQHandler+0x10>)
 802203e:	f002 fb25 	bl	802468c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8022042:	bf00      	nop
 8022044:	bd80      	pop	{r7, pc}
 8022046:	bf00      	nop
 8022048:	20000564 	.word	0x20000564

0802204c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 802204c:	b580      	push	{r7, lr}
 802204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8022050:	4802      	ldr	r0, [pc, #8]	; (802205c <TIM6_DAC_IRQHandler+0x10>)
 8022052:	f002 fb1b 	bl	802468c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8022056:	bf00      	nop
 8022058:	bd80      	pop	{r7, pc}
 802205a:	bf00      	nop
 802205c:	20000724 	.word	0x20000724

08022060 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8022060:	b580      	push	{r7, lr}
 8022062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8022064:	4802      	ldr	r0, [pc, #8]	; (8022070 <TIM7_IRQHandler+0x10>)
 8022066:	f002 fb11 	bl	802468c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 802206a:	bf00      	nop
 802206c:	bd80      	pop	{r7, pc}
 802206e:	bf00      	nop
 8022070:	20000824 	.word	0x20000824

08022074 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8022074:	b580      	push	{r7, lr}
 8022076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8022078:	4802      	ldr	r0, [pc, #8]	; (8022084 <DMA2_Stream0_IRQHandler+0x10>)
 802207a:	f000 ffdd 	bl	8023038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 802207e:	bf00      	nop
 8022080:	bd80      	pop	{r7, pc}
 8022082:	bf00      	nop
 8022084:	200006c4 	.word	0x200006c4

08022088 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8022088:	b480      	push	{r7}
 802208a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 802208c:	4b08      	ldr	r3, [pc, #32]	; (80220b0 <SystemInit+0x28>)
 802208e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8022092:	4a07      	ldr	r2, [pc, #28]	; (80220b0 <SystemInit+0x28>)
 8022094:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8022098:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 802209c:	4b04      	ldr	r3, [pc, #16]	; (80220b0 <SystemInit+0x28>)
 802209e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80220a2:	609a      	str	r2, [r3, #8]
#endif
}
 80220a4:	bf00      	nop
 80220a6:	46bd      	mov	sp, r7
 80220a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220ac:	4770      	bx	lr
 80220ae:	bf00      	nop
 80220b0:	e000ed00 	.word	0xe000ed00

080220b4 <_ZN4TestC1EP3LedP10LineSensor>:
#include "test.hpp"

#ifdef TEST_MODE
Test::Test(Led *led,
 80220b4:	b480      	push	{r7}
 80220b6:	b085      	sub	sp, #20
 80220b8:	af00      	add	r7, sp, #0
 80220ba:	60f8      	str	r0, [r7, #12]
 80220bc:	60b9      	str	r1, [r7, #8]
 80220be:	607a      	str	r2, [r7, #4]
           LineSensor *line_sensor)
{
    led_ = led;
 80220c0:	68fb      	ldr	r3, [r7, #12]
 80220c2:	68ba      	ldr	r2, [r7, #8]
 80220c4:	601a      	str	r2, [r3, #0]
    line_sensor_ = line_sensor;
 80220c6:	68fb      	ldr	r3, [r7, #12]
 80220c8:	687a      	ldr	r2, [r7, #4]
 80220ca:	605a      	str	r2, [r3, #4]
}
 80220cc:	68fb      	ldr	r3, [r7, #12]
 80220ce:	4618      	mov	r0, r3
 80220d0:	3714      	adds	r7, #20
 80220d2:	46bd      	mov	sp, r7
 80220d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220d8:	4770      	bx	lr
	...

080220dc <_ZN4Test4InitEv>:

void Test::Init()
{
 80220dc:	b580      	push	{r7, lr}
 80220de:	b082      	sub	sp, #8
 80220e0:	af00      	add	r7, sp, #0
 80220e2:	6078      	str	r0, [r7, #4]
    line_sensor_->Init();
 80220e4:	687b      	ldr	r3, [r7, #4]
 80220e6:	685b      	ldr	r3, [r3, #4]
 80220e8:	4618      	mov	r0, r3
 80220ea:	f7fe fab7 	bl	802065c <_ZN10LineSensor4InitEv>

    led_->Blink(5, 'Y', 'M');
 80220ee:	687b      	ldr	r3, [r7, #4]
 80220f0:	6818      	ldr	r0, [r3, #0]
 80220f2:	234d      	movs	r3, #77	; 0x4d
 80220f4:	2259      	movs	r2, #89	; 0x59
 80220f6:	2105      	movs	r1, #5
 80220f8:	f7fe fa38 	bl	802056c <_ZN3Led5BlinkEhcc>
    led_->ColorOrder('X');
 80220fc:	687b      	ldr	r3, [r7, #4]
 80220fe:	681b      	ldr	r3, [r3, #0]
 8022100:	2158      	movs	r1, #88	; 0x58
 8022102:	4618      	mov	r0, r3
 8022104:	f7fe f956 	bl	80203b4 <_ZN3Led10ColorOrderEc>
    HAL_TIM_Base_Start_IT(&htim7);
 8022108:	4804      	ldr	r0, [pc, #16]	; (802211c <_ZN4Test4InitEv+0x40>)
 802210a:	f002 f9a0 	bl	802444e <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim6);
 802210e:	4804      	ldr	r0, [pc, #16]	; (8022120 <_ZN4Test4InitEv+0x44>)
 8022110:	f002 f99d 	bl	802444e <HAL_TIM_Base_Start_IT>
}
 8022114:	bf00      	nop
 8022116:	3708      	adds	r7, #8
 8022118:	46bd      	mov	sp, r7
 802211a:	bd80      	pop	{r7, pc}
 802211c:	20000824 	.word	0x20000824
 8022120:	20000724 	.word	0x20000724

08022124 <_ZN4Test6Timer7Ev>:

void Test::Timer7()
{
 8022124:	b580      	push	{r7, lr}
 8022126:	b082      	sub	sp, #8
 8022128:	af00      	add	r7, sp, #0
 802212a:	6078      	str	r0, [r7, #4]
    line_sensor_->StoreConsecutiveBuff();
 802212c:	687b      	ldr	r3, [r7, #4]
 802212e:	685b      	ldr	r3, [r3, #4]
 8022130:	4618      	mov	r0, r3
 8022132:	f7fe facd 	bl	80206d0 <_ZN10LineSensor20StoreConsecutiveBuffEv>
}
 8022136:	bf00      	nop
 8022138:	3708      	adds	r7, #8
 802213a:	46bd      	mov	sp, r7
 802213c:	bd80      	pop	{r7, pc}

0802213e <_ZN4Test6Timer6Ev>:

void Test::Timer6()
{
 802213e:	b580      	push	{r7, lr}
 8022140:	b082      	sub	sp, #8
 8022142:	af00      	add	r7, sp, #0
 8022144:	6078      	str	r0, [r7, #4]
    Line();
 8022146:	6878      	ldr	r0, [r7, #4]
 8022148:	f000 f804 	bl	8022154 <_ZN4Test4LineEv>
}
 802214c:	bf00      	nop
 802214e:	3708      	adds	r7, #8
 8022150:	46bd      	mov	sp, r7
 8022152:	bd80      	pop	{r7, pc}

08022154 <_ZN4Test4LineEv>:

void Test::Line()
{
 8022154:	b580      	push	{r7, lr}
 8022156:	b082      	sub	sp, #8
 8022158:	af00      	add	r7, sp, #0
 802215a:	6078      	str	r0, [r7, #4]
    line_sensor_->New();
 802215c:	687b      	ldr	r3, [r7, #4]
 802215e:	685b      	ldr	r3, [r3, #4]
 8022160:	4618      	mov	r0, r3
 8022162:	f7fe fbbd 	bl	80208e0 <_ZN10LineSensor3NewEv>
    line_sensor_->MonitorArrays();
 8022166:	687b      	ldr	r3, [r7, #4]
 8022168:	685b      	ldr	r3, [r3, #4]
 802216a:	4618      	mov	r0, r3
 802216c:	f7fe fc74 	bl	8020a58 <_ZN10LineSensor13MonitorArraysEv>
    //g_line_diff = line_sensor_->LeftRightDifference();
    //g_line_emer = line_sensor_->GetEmergencyStopFlag();
    //g_line_calib = line_sensor_->CheckCalibration();
}
 8022170:	bf00      	nop
 8022172:	3708      	adds	r7, #8
 8022174:	46bd      	mov	sp, r7
 8022176:	bd80      	pop	{r7, pc}

08022178 <_ZN15VelocityControlC1EP7Encoder>:
#include "velocity_control.hpp"
#include "declare_extern.h"

VelocityControl::VelocityControl(Encoder *encoder) : integral_error_(0)
 8022178:	b480      	push	{r7}
 802217a:	b083      	sub	sp, #12
 802217c:	af00      	add	r7, sp, #0
 802217e:	6078      	str	r0, [r7, #4]
 8022180:	6039      	str	r1, [r7, #0]
 8022182:	687b      	ldr	r3, [r7, #4]
 8022184:	f04f 0200 	mov.w	r2, #0
 8022188:	601a      	str	r2, [r3, #0]
{
    encoder_ = encoder;
 802218a:	687b      	ldr	r3, [r7, #4]
 802218c:	683a      	ldr	r2, [r7, #0]
 802218e:	605a      	str	r2, [r3, #4]
}
 8022190:	687b      	ldr	r3, [r7, #4]
 8022192:	4618      	mov	r0, r3
 8022194:	370c      	adds	r7, #12
 8022196:	46bd      	mov	sp, r7
 8022198:	f85d 7b04 	ldr.w	r7, [sp], #4
 802219c:	4770      	bx	lr
	...

080221a0 <Init>:
    &line_sensor
);
#endif // TEST_MODE

void Init()
{
 80221a0:	b580      	push	{r7, lr}
 80221a2:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Init();
#else // TEST_MODE
    test.Init();
 80221a4:	4802      	ldr	r0, [pc, #8]	; (80221b0 <Init+0x10>)
 80221a6:	f7ff ff99 	bl	80220dc <_ZN4Test4InitEv>
#endif // TEST_MODE
}
 80221aa:	bf00      	nop
 80221ac:	bd80      	pop	{r7, pc}
 80221ae:	bf00      	nop
 80221b0:	20000488 	.word	0x20000488

080221b4 <InterruptTim7>:

void InterruptTim7()
{
 80221b4:	b580      	push	{r7, lr}
 80221b6:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Timer7();
#else // TEST_MODE
    test.Timer7();
 80221b8:	4804      	ldr	r0, [pc, #16]	; (80221cc <InterruptTim7+0x18>)
 80221ba:	f7ff ffb3 	bl	8022124 <_ZN4Test6Timer7Ev>
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim7++;
 80221be:	4b04      	ldr	r3, [pc, #16]	; (80221d0 <InterruptTim7+0x1c>)
 80221c0:	681b      	ldr	r3, [r3, #0]
 80221c2:	3301      	adds	r3, #1
 80221c4:	4a02      	ldr	r2, [pc, #8]	; (80221d0 <InterruptTim7+0x1c>)
 80221c6:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 80221c8:	bf00      	nop
 80221ca:	bd80      	pop	{r7, pc}
 80221cc:	20000488 	.word	0x20000488
 80221d0:	200001b8 	.word	0x200001b8

080221d4 <InterruptTim6>:

void InterruptTim6()
{
 80221d4:	b580      	push	{r7, lr}
 80221d6:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.RunMode();
#else // TEST_MODE
    test.Timer6();
 80221d8:	4804      	ldr	r0, [pc, #16]	; (80221ec <InterruptTim6+0x18>)
 80221da:	f7ff ffb0 	bl	802213e <_ZN4Test6Timer6Ev>
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim6++;
 80221de:	4b04      	ldr	r3, [pc, #16]	; (80221f0 <InterruptTim6+0x1c>)
 80221e0:	681b      	ldr	r3, [r3, #0]
 80221e2:	3301      	adds	r3, #1
 80221e4:	4a02      	ldr	r2, [pc, #8]	; (80221f0 <InterruptTim6+0x1c>)
 80221e6:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 80221e8:	bf00      	nop
 80221ea:	bd80      	pop	{r7, pc}
 80221ec:	20000488 	.word	0x20000488
 80221f0:	200001bc 	.word	0x200001bc

080221f4 <InterruptTim2>:

void InterruptTim2()
{
 80221f4:	b480      	push	{r7}
 80221f6:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.UpdateRunMode();
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim2++;
 80221f8:	4b04      	ldr	r3, [pc, #16]	; (802220c <InterruptTim2+0x18>)
 80221fa:	681b      	ldr	r3, [r3, #0]
 80221fc:	3301      	adds	r3, #1
 80221fe:	4a03      	ldr	r2, [pc, #12]	; (802220c <InterruptTim2+0x18>)
 8022200:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
 8022202:	bf00      	nop
 8022204:	46bd      	mov	sp, r7
 8022206:	f85d 7b04 	ldr.w	r7, [sp], #4
 802220a:	4770      	bx	lr
 802220c:	200001c0 	.word	0x200001c0

08022210 <_Z41__static_initialization_and_destruction_0ii>:
 8022210:	b580      	push	{r7, lr}
 8022212:	b082      	sub	sp, #8
 8022214:	af00      	add	r7, sp, #0
 8022216:	6078      	str	r0, [r7, #4]
 8022218:	6039      	str	r1, [r7, #0]
 802221a:	687b      	ldr	r3, [r7, #4]
 802221c:	2b01      	cmp	r3, #1
 802221e:	d123      	bne.n	8022268 <_Z41__static_initialization_and_destruction_0ii+0x58>
 8022220:	683b      	ldr	r3, [r7, #0]
 8022222:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022226:	4293      	cmp	r3, r2
 8022228:	d11e      	bne.n	8022268 <_Z41__static_initialization_and_destruction_0ii+0x58>
Encoder encoder;
 802222a:	4811      	ldr	r0, [pc, #68]	; (8022270 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 802222c:	f7fe f888 	bl	8020340 <_ZN7EncoderC1Ev>
Iim42652 iim_42652;
 8022230:	4810      	ldr	r0, [pc, #64]	; (8022274 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8022232:	f7fe f89c 	bl	802036e <_ZN8Iim42652C1Ev>
Led led;
 8022236:	4810      	ldr	r0, [pc, #64]	; (8022278 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8022238:	f7fe f8aa 	bl	8020390 <_ZN3LedC1Ev>
LineSensor line_sensor;
 802223c:	480f      	ldr	r0, [pc, #60]	; (802227c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 802223e:	f7fe f9c2 	bl	80205c6 <_ZN10LineSensorC1Ev>
LineTrace line_trace(&line_sensor);
 8022242:	490e      	ldr	r1, [pc, #56]	; (802227c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8022244:	480e      	ldr	r0, [pc, #56]	; (8022280 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8022246:	f7fe fc25 	bl	8020a94 <_ZN9LineTraceC1EP10LineSensor>
Logger logger;
 802224a:	480e      	ldr	r0, [pc, #56]	; (8022284 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 802224c:	f7fe fc36 	bl	8020abc <_ZN6LoggerC1Ev>
SideSensor side_sensor;
 8022250:	480d      	ldr	r0, [pc, #52]	; (8022288 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8022252:	f7ff fb1f 	bl	8021894 <_ZN10SideSensorC1Ev>
VelocityControl velocity_control(&encoder);
 8022256:	4906      	ldr	r1, [pc, #24]	; (8022270 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8022258:	480c      	ldr	r0, [pc, #48]	; (802228c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 802225a:	f7ff ff8d 	bl	8022178 <_ZN15VelocityControlC1EP7Encoder>
);
 802225e:	4a07      	ldr	r2, [pc, #28]	; (802227c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8022260:	4905      	ldr	r1, [pc, #20]	; (8022278 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8022262:	480b      	ldr	r0, [pc, #44]	; (8022290 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8022264:	f7ff ff26 	bl	80220b4 <_ZN4TestC1EP3LedP10LineSensor>
 8022268:	bf00      	nop
 802226a:	3708      	adds	r7, #8
 802226c:	46bd      	mov	sp, r7
 802226e:	bd80      	pop	{r7, pc}
 8022270:	200001c4 	.word	0x200001c4
 8022274:	200001d0 	.word	0x200001d0
 8022278:	200001d8 	.word	0x200001d8
 802227c:	200001dc 	.word	0x200001dc
 8022280:	20000368 	.word	0x20000368
 8022284:	20000370 	.word	0x20000370
 8022288:	20000478 	.word	0x20000478
 802228c:	20000480 	.word	0x20000480
 8022290:	20000488 	.word	0x20000488

08022294 <_GLOBAL__sub_I_encoder>:
 8022294:	b580      	push	{r7, lr}
 8022296:	af00      	add	r7, sp, #0
 8022298:	f64f 71ff 	movw	r1, #65535	; 0xffff
 802229c:	2001      	movs	r0, #1
 802229e:	f7ff ffb7 	bl	8022210 <_Z41__static_initialization_and_destruction_0ii>
 80222a2:	bd80      	pop	{r7, pc}

080222a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80222a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80222dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80222a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80222aa:	e003      	b.n	80222b4 <LoopCopyDataInit>

080222ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80222ac:	4b0c      	ldr	r3, [pc, #48]	; (80222e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80222ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80222b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80222b2:	3104      	adds	r1, #4

080222b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80222b4:	480b      	ldr	r0, [pc, #44]	; (80222e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80222b6:	4b0c      	ldr	r3, [pc, #48]	; (80222e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80222b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80222ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80222bc:	d3f6      	bcc.n	80222ac <CopyDataInit>
  ldr  r2, =_sbss
 80222be:	4a0b      	ldr	r2, [pc, #44]	; (80222ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80222c0:	e002      	b.n	80222c8 <LoopFillZerobss>

080222c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80222c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80222c4:	f842 3b04 	str.w	r3, [r2], #4

080222c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80222c8:	4b09      	ldr	r3, [pc, #36]	; (80222f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80222ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80222cc:	d3f9      	bcc.n	80222c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80222ce:	f7ff fedb 	bl	8022088 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80222d2:	f003 f87b 	bl	80253cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80222d6:	f7fe fc99 	bl	8020c0c <main>
  bx  lr    
 80222da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80222dc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80222e0:	08025470 	.word	0x08025470
  ldr  r0, =_sdata
 80222e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80222e8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80222ec:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80222f0:	20000868 	.word	0x20000868

080222f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80222f4:	e7fe      	b.n	80222f4 <ADC_IRQHandler>
	...

080222f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80222f8:	b580      	push	{r7, lr}
 80222fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80222fc:	4b0e      	ldr	r3, [pc, #56]	; (8022338 <HAL_Init+0x40>)
 80222fe:	681b      	ldr	r3, [r3, #0]
 8022300:	4a0d      	ldr	r2, [pc, #52]	; (8022338 <HAL_Init+0x40>)
 8022302:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8022306:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8022308:	4b0b      	ldr	r3, [pc, #44]	; (8022338 <HAL_Init+0x40>)
 802230a:	681b      	ldr	r3, [r3, #0]
 802230c:	4a0a      	ldr	r2, [pc, #40]	; (8022338 <HAL_Init+0x40>)
 802230e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8022312:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8022314:	4b08      	ldr	r3, [pc, #32]	; (8022338 <HAL_Init+0x40>)
 8022316:	681b      	ldr	r3, [r3, #0]
 8022318:	4a07      	ldr	r2, [pc, #28]	; (8022338 <HAL_Init+0x40>)
 802231a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802231e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8022320:	2003      	movs	r0, #3
 8022322:	f000 fd41 	bl	8022da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8022326:	2001      	movs	r0, #1
 8022328:	f000 f808 	bl	802233c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 802232c:	f7ff fad0 	bl	80218d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8022330:	2300      	movs	r3, #0
}
 8022332:	4618      	mov	r0, r3
 8022334:	bd80      	pop	{r7, pc}
 8022336:	bf00      	nop
 8022338:	40023c00 	.word	0x40023c00

0802233c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 802233c:	b580      	push	{r7, lr}
 802233e:	b082      	sub	sp, #8
 8022340:	af00      	add	r7, sp, #0
 8022342:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8022344:	4b12      	ldr	r3, [pc, #72]	; (8022390 <HAL_InitTick+0x54>)
 8022346:	681a      	ldr	r2, [r3, #0]
 8022348:	4b12      	ldr	r3, [pc, #72]	; (8022394 <HAL_InitTick+0x58>)
 802234a:	781b      	ldrb	r3, [r3, #0]
 802234c:	4619      	mov	r1, r3
 802234e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8022352:	fbb3 f3f1 	udiv	r3, r3, r1
 8022356:	fbb2 f3f3 	udiv	r3, r2, r3
 802235a:	4618      	mov	r0, r3
 802235c:	f000 fd59 	bl	8022e12 <HAL_SYSTICK_Config>
 8022360:	4603      	mov	r3, r0
 8022362:	2b00      	cmp	r3, #0
 8022364:	d001      	beq.n	802236a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8022366:	2301      	movs	r3, #1
 8022368:	e00e      	b.n	8022388 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 802236a:	687b      	ldr	r3, [r7, #4]
 802236c:	2b0f      	cmp	r3, #15
 802236e:	d80a      	bhi.n	8022386 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8022370:	2200      	movs	r2, #0
 8022372:	6879      	ldr	r1, [r7, #4]
 8022374:	f04f 30ff 	mov.w	r0, #4294967295
 8022378:	f000 fd21 	bl	8022dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 802237c:	4a06      	ldr	r2, [pc, #24]	; (8022398 <HAL_InitTick+0x5c>)
 802237e:	687b      	ldr	r3, [r7, #4]
 8022380:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8022382:	2300      	movs	r3, #0
 8022384:	e000      	b.n	8022388 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8022386:	2301      	movs	r3, #1
}
 8022388:	4618      	mov	r0, r3
 802238a:	3708      	adds	r7, #8
 802238c:	46bd      	mov	sp, r7
 802238e:	bd80      	pop	{r7, pc}
 8022390:	20000000 	.word	0x20000000
 8022394:	20000008 	.word	0x20000008
 8022398:	20000004 	.word	0x20000004

0802239c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 802239c:	b480      	push	{r7}
 802239e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80223a0:	4b06      	ldr	r3, [pc, #24]	; (80223bc <HAL_IncTick+0x20>)
 80223a2:	781b      	ldrb	r3, [r3, #0]
 80223a4:	461a      	mov	r2, r3
 80223a6:	4b06      	ldr	r3, [pc, #24]	; (80223c0 <HAL_IncTick+0x24>)
 80223a8:	681b      	ldr	r3, [r3, #0]
 80223aa:	4413      	add	r3, r2
 80223ac:	4a04      	ldr	r2, [pc, #16]	; (80223c0 <HAL_IncTick+0x24>)
 80223ae:	6013      	str	r3, [r2, #0]
}
 80223b0:	bf00      	nop
 80223b2:	46bd      	mov	sp, r7
 80223b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223b8:	4770      	bx	lr
 80223ba:	bf00      	nop
 80223bc:	20000008 	.word	0x20000008
 80223c0:	20000864 	.word	0x20000864

080223c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80223c4:	b480      	push	{r7}
 80223c6:	af00      	add	r7, sp, #0
  return uwTick;
 80223c8:	4b03      	ldr	r3, [pc, #12]	; (80223d8 <HAL_GetTick+0x14>)
 80223ca:	681b      	ldr	r3, [r3, #0]
}
 80223cc:	4618      	mov	r0, r3
 80223ce:	46bd      	mov	sp, r7
 80223d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223d4:	4770      	bx	lr
 80223d6:	bf00      	nop
 80223d8:	20000864 	.word	0x20000864

080223dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80223dc:	b580      	push	{r7, lr}
 80223de:	b084      	sub	sp, #16
 80223e0:	af00      	add	r7, sp, #0
 80223e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80223e4:	f7ff ffee 	bl	80223c4 <HAL_GetTick>
 80223e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80223ea:	687b      	ldr	r3, [r7, #4]
 80223ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80223ee:	68fb      	ldr	r3, [r7, #12]
 80223f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80223f4:	d005      	beq.n	8022402 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80223f6:	4b09      	ldr	r3, [pc, #36]	; (802241c <HAL_Delay+0x40>)
 80223f8:	781b      	ldrb	r3, [r3, #0]
 80223fa:	461a      	mov	r2, r3
 80223fc:	68fb      	ldr	r3, [r7, #12]
 80223fe:	4413      	add	r3, r2
 8022400:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8022402:	bf00      	nop
 8022404:	f7ff ffde 	bl	80223c4 <HAL_GetTick>
 8022408:	4602      	mov	r2, r0
 802240a:	68bb      	ldr	r3, [r7, #8]
 802240c:	1ad3      	subs	r3, r2, r3
 802240e:	68fa      	ldr	r2, [r7, #12]
 8022410:	429a      	cmp	r2, r3
 8022412:	d8f7      	bhi.n	8022404 <HAL_Delay+0x28>
  {
  }
}
 8022414:	bf00      	nop
 8022416:	3710      	adds	r7, #16
 8022418:	46bd      	mov	sp, r7
 802241a:	bd80      	pop	{r7, pc}
 802241c:	20000008 	.word	0x20000008

08022420 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8022420:	b580      	push	{r7, lr}
 8022422:	b084      	sub	sp, #16
 8022424:	af00      	add	r7, sp, #0
 8022426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8022428:	2300      	movs	r3, #0
 802242a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 802242c:	687b      	ldr	r3, [r7, #4]
 802242e:	2b00      	cmp	r3, #0
 8022430:	d101      	bne.n	8022436 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8022432:	2301      	movs	r3, #1
 8022434:	e033      	b.n	802249e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8022436:	687b      	ldr	r3, [r7, #4]
 8022438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802243a:	2b00      	cmp	r3, #0
 802243c:	d109      	bne.n	8022452 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 802243e:	6878      	ldr	r0, [r7, #4]
 8022440:	f7ff fa6e 	bl	8021920 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8022444:	687b      	ldr	r3, [r7, #4]
 8022446:	2200      	movs	r2, #0
 8022448:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 802244a:	687b      	ldr	r3, [r7, #4]
 802244c:	2200      	movs	r2, #0
 802244e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8022452:	687b      	ldr	r3, [r7, #4]
 8022454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022456:	f003 0310 	and.w	r3, r3, #16
 802245a:	2b00      	cmp	r3, #0
 802245c:	d118      	bne.n	8022490 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 802245e:	687b      	ldr	r3, [r7, #4]
 8022460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022462:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8022466:	f023 0302 	bic.w	r3, r3, #2
 802246a:	f043 0202 	orr.w	r2, r3, #2
 802246e:	687b      	ldr	r3, [r7, #4]
 8022470:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8022472:	6878      	ldr	r0, [r7, #4]
 8022474:	f000 fa4a 	bl	802290c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8022478:	687b      	ldr	r3, [r7, #4]
 802247a:	2200      	movs	r2, #0
 802247c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 802247e:	687b      	ldr	r3, [r7, #4]
 8022480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022482:	f023 0303 	bic.w	r3, r3, #3
 8022486:	f043 0201 	orr.w	r2, r3, #1
 802248a:	687b      	ldr	r3, [r7, #4]
 802248c:	641a      	str	r2, [r3, #64]	; 0x40
 802248e:	e001      	b.n	8022494 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8022490:	2301      	movs	r3, #1
 8022492:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8022494:	687b      	ldr	r3, [r7, #4]
 8022496:	2200      	movs	r2, #0
 8022498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 802249c:	7bfb      	ldrb	r3, [r7, #15]
}
 802249e:	4618      	mov	r0, r3
 80224a0:	3710      	adds	r7, #16
 80224a2:	46bd      	mov	sp, r7
 80224a4:	bd80      	pop	{r7, pc}
	...

080224a8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80224a8:	b580      	push	{r7, lr}
 80224aa:	b086      	sub	sp, #24
 80224ac:	af00      	add	r7, sp, #0
 80224ae:	60f8      	str	r0, [r7, #12]
 80224b0:	60b9      	str	r1, [r7, #8]
 80224b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80224b4:	2300      	movs	r3, #0
 80224b6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80224b8:	68fb      	ldr	r3, [r7, #12]
 80224ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80224be:	2b01      	cmp	r3, #1
 80224c0:	d101      	bne.n	80224c6 <HAL_ADC_Start_DMA+0x1e>
 80224c2:	2302      	movs	r3, #2
 80224c4:	e0cc      	b.n	8022660 <HAL_ADC_Start_DMA+0x1b8>
 80224c6:	68fb      	ldr	r3, [r7, #12]
 80224c8:	2201      	movs	r2, #1
 80224ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80224ce:	68fb      	ldr	r3, [r7, #12]
 80224d0:	681b      	ldr	r3, [r3, #0]
 80224d2:	689b      	ldr	r3, [r3, #8]
 80224d4:	f003 0301 	and.w	r3, r3, #1
 80224d8:	2b01      	cmp	r3, #1
 80224da:	d018      	beq.n	802250e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80224dc:	68fb      	ldr	r3, [r7, #12]
 80224de:	681b      	ldr	r3, [r3, #0]
 80224e0:	689a      	ldr	r2, [r3, #8]
 80224e2:	68fb      	ldr	r3, [r7, #12]
 80224e4:	681b      	ldr	r3, [r3, #0]
 80224e6:	f042 0201 	orr.w	r2, r2, #1
 80224ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80224ec:	4b5e      	ldr	r3, [pc, #376]	; (8022668 <HAL_ADC_Start_DMA+0x1c0>)
 80224ee:	681b      	ldr	r3, [r3, #0]
 80224f0:	4a5e      	ldr	r2, [pc, #376]	; (802266c <HAL_ADC_Start_DMA+0x1c4>)
 80224f2:	fba2 2303 	umull	r2, r3, r2, r3
 80224f6:	0c9a      	lsrs	r2, r3, #18
 80224f8:	4613      	mov	r3, r2
 80224fa:	005b      	lsls	r3, r3, #1
 80224fc:	4413      	add	r3, r2
 80224fe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8022500:	e002      	b.n	8022508 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8022502:	693b      	ldr	r3, [r7, #16]
 8022504:	3b01      	subs	r3, #1
 8022506:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8022508:	693b      	ldr	r3, [r7, #16]
 802250a:	2b00      	cmp	r3, #0
 802250c:	d1f9      	bne.n	8022502 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 802250e:	68fb      	ldr	r3, [r7, #12]
 8022510:	681b      	ldr	r3, [r3, #0]
 8022512:	689b      	ldr	r3, [r3, #8]
 8022514:	f003 0301 	and.w	r3, r3, #1
 8022518:	2b01      	cmp	r3, #1
 802251a:	f040 80a0 	bne.w	802265e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 802251e:	68fb      	ldr	r3, [r7, #12]
 8022520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022522:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8022526:	f023 0301 	bic.w	r3, r3, #1
 802252a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 802252e:	68fb      	ldr	r3, [r7, #12]
 8022530:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8022532:	68fb      	ldr	r3, [r7, #12]
 8022534:	681b      	ldr	r3, [r3, #0]
 8022536:	685b      	ldr	r3, [r3, #4]
 8022538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802253c:	2b00      	cmp	r3, #0
 802253e:	d007      	beq.n	8022550 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8022540:	68fb      	ldr	r3, [r7, #12]
 8022542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022544:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8022548:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 802254c:	68fb      	ldr	r3, [r7, #12]
 802254e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8022550:	68fb      	ldr	r3, [r7, #12]
 8022552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8022558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802255c:	d106      	bne.n	802256c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 802255e:	68fb      	ldr	r3, [r7, #12]
 8022560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022562:	f023 0206 	bic.w	r2, r3, #6
 8022566:	68fb      	ldr	r3, [r7, #12]
 8022568:	645a      	str	r2, [r3, #68]	; 0x44
 802256a:	e002      	b.n	8022572 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 802256c:	68fb      	ldr	r3, [r7, #12]
 802256e:	2200      	movs	r2, #0
 8022570:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8022572:	68fb      	ldr	r3, [r7, #12]
 8022574:	2200      	movs	r2, #0
 8022576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 802257a:	4b3d      	ldr	r3, [pc, #244]	; (8022670 <HAL_ADC_Start_DMA+0x1c8>)
 802257c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 802257e:	68fb      	ldr	r3, [r7, #12]
 8022580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022582:	4a3c      	ldr	r2, [pc, #240]	; (8022674 <HAL_ADC_Start_DMA+0x1cc>)
 8022584:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8022586:	68fb      	ldr	r3, [r7, #12]
 8022588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802258a:	4a3b      	ldr	r2, [pc, #236]	; (8022678 <HAL_ADC_Start_DMA+0x1d0>)
 802258c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 802258e:	68fb      	ldr	r3, [r7, #12]
 8022590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022592:	4a3a      	ldr	r2, [pc, #232]	; (802267c <HAL_ADC_Start_DMA+0x1d4>)
 8022594:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8022596:	68fb      	ldr	r3, [r7, #12]
 8022598:	681b      	ldr	r3, [r3, #0]
 802259a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 802259e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80225a0:	68fb      	ldr	r3, [r7, #12]
 80225a2:	681b      	ldr	r3, [r3, #0]
 80225a4:	685a      	ldr	r2, [r3, #4]
 80225a6:	68fb      	ldr	r3, [r7, #12]
 80225a8:	681b      	ldr	r3, [r3, #0]
 80225aa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80225ae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80225b0:	68fb      	ldr	r3, [r7, #12]
 80225b2:	681b      	ldr	r3, [r3, #0]
 80225b4:	689a      	ldr	r2, [r3, #8]
 80225b6:	68fb      	ldr	r3, [r7, #12]
 80225b8:	681b      	ldr	r3, [r3, #0]
 80225ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80225be:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80225c0:	68fb      	ldr	r3, [r7, #12]
 80225c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80225c4:	68fb      	ldr	r3, [r7, #12]
 80225c6:	681b      	ldr	r3, [r3, #0]
 80225c8:	334c      	adds	r3, #76	; 0x4c
 80225ca:	4619      	mov	r1, r3
 80225cc:	68ba      	ldr	r2, [r7, #8]
 80225ce:	687b      	ldr	r3, [r7, #4]
 80225d0:	f000 fcda 	bl	8022f88 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80225d4:	697b      	ldr	r3, [r7, #20]
 80225d6:	685b      	ldr	r3, [r3, #4]
 80225d8:	f003 031f 	and.w	r3, r3, #31
 80225dc:	2b00      	cmp	r3, #0
 80225de:	d12a      	bne.n	8022636 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80225e0:	68fb      	ldr	r3, [r7, #12]
 80225e2:	681b      	ldr	r3, [r3, #0]
 80225e4:	4a26      	ldr	r2, [pc, #152]	; (8022680 <HAL_ADC_Start_DMA+0x1d8>)
 80225e6:	4293      	cmp	r3, r2
 80225e8:	d015      	beq.n	8022616 <HAL_ADC_Start_DMA+0x16e>
 80225ea:	68fb      	ldr	r3, [r7, #12]
 80225ec:	681b      	ldr	r3, [r3, #0]
 80225ee:	4a25      	ldr	r2, [pc, #148]	; (8022684 <HAL_ADC_Start_DMA+0x1dc>)
 80225f0:	4293      	cmp	r3, r2
 80225f2:	d105      	bne.n	8022600 <HAL_ADC_Start_DMA+0x158>
 80225f4:	4b1e      	ldr	r3, [pc, #120]	; (8022670 <HAL_ADC_Start_DMA+0x1c8>)
 80225f6:	685b      	ldr	r3, [r3, #4]
 80225f8:	f003 031f 	and.w	r3, r3, #31
 80225fc:	2b00      	cmp	r3, #0
 80225fe:	d00a      	beq.n	8022616 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8022600:	68fb      	ldr	r3, [r7, #12]
 8022602:	681b      	ldr	r3, [r3, #0]
 8022604:	4a20      	ldr	r2, [pc, #128]	; (8022688 <HAL_ADC_Start_DMA+0x1e0>)
 8022606:	4293      	cmp	r3, r2
 8022608:	d129      	bne.n	802265e <HAL_ADC_Start_DMA+0x1b6>
 802260a:	4b19      	ldr	r3, [pc, #100]	; (8022670 <HAL_ADC_Start_DMA+0x1c8>)
 802260c:	685b      	ldr	r3, [r3, #4]
 802260e:	f003 031f 	and.w	r3, r3, #31
 8022612:	2b0f      	cmp	r3, #15
 8022614:	d823      	bhi.n	802265e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8022616:	68fb      	ldr	r3, [r7, #12]
 8022618:	681b      	ldr	r3, [r3, #0]
 802261a:	689b      	ldr	r3, [r3, #8]
 802261c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8022620:	2b00      	cmp	r3, #0
 8022622:	d11c      	bne.n	802265e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8022624:	68fb      	ldr	r3, [r7, #12]
 8022626:	681b      	ldr	r3, [r3, #0]
 8022628:	689a      	ldr	r2, [r3, #8]
 802262a:	68fb      	ldr	r3, [r7, #12]
 802262c:	681b      	ldr	r3, [r3, #0]
 802262e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8022632:	609a      	str	r2, [r3, #8]
 8022634:	e013      	b.n	802265e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8022636:	68fb      	ldr	r3, [r7, #12]
 8022638:	681b      	ldr	r3, [r3, #0]
 802263a:	4a11      	ldr	r2, [pc, #68]	; (8022680 <HAL_ADC_Start_DMA+0x1d8>)
 802263c:	4293      	cmp	r3, r2
 802263e:	d10e      	bne.n	802265e <HAL_ADC_Start_DMA+0x1b6>
 8022640:	68fb      	ldr	r3, [r7, #12]
 8022642:	681b      	ldr	r3, [r3, #0]
 8022644:	689b      	ldr	r3, [r3, #8]
 8022646:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 802264a:	2b00      	cmp	r3, #0
 802264c:	d107      	bne.n	802265e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 802264e:	68fb      	ldr	r3, [r7, #12]
 8022650:	681b      	ldr	r3, [r3, #0]
 8022652:	689a      	ldr	r2, [r3, #8]
 8022654:	68fb      	ldr	r3, [r7, #12]
 8022656:	681b      	ldr	r3, [r3, #0]
 8022658:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 802265c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 802265e:	2300      	movs	r3, #0
}
 8022660:	4618      	mov	r0, r3
 8022662:	3718      	adds	r7, #24
 8022664:	46bd      	mov	sp, r7
 8022666:	bd80      	pop	{r7, pc}
 8022668:	20000000 	.word	0x20000000
 802266c:	431bde83 	.word	0x431bde83
 8022670:	40012300 	.word	0x40012300
 8022674:	08022b05 	.word	0x08022b05
 8022678:	08022bbf 	.word	0x08022bbf
 802267c:	08022bdb 	.word	0x08022bdb
 8022680:	40012000 	.word	0x40012000
 8022684:	40012100 	.word	0x40012100
 8022688:	40012200 	.word	0x40012200

0802268c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 802268c:	b480      	push	{r7}
 802268e:	b083      	sub	sp, #12
 8022690:	af00      	add	r7, sp, #0
 8022692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8022694:	bf00      	nop
 8022696:	370c      	adds	r7, #12
 8022698:	46bd      	mov	sp, r7
 802269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802269e:	4770      	bx	lr

080226a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80226a0:	b480      	push	{r7}
 80226a2:	b083      	sub	sp, #12
 80226a4:	af00      	add	r7, sp, #0
 80226a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80226a8:	bf00      	nop
 80226aa:	370c      	adds	r7, #12
 80226ac:	46bd      	mov	sp, r7
 80226ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226b2:	4770      	bx	lr

080226b4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80226b4:	b480      	push	{r7}
 80226b6:	b083      	sub	sp, #12
 80226b8:	af00      	add	r7, sp, #0
 80226ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80226bc:	bf00      	nop
 80226be:	370c      	adds	r7, #12
 80226c0:	46bd      	mov	sp, r7
 80226c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226c6:	4770      	bx	lr

080226c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80226c8:	b480      	push	{r7}
 80226ca:	b085      	sub	sp, #20
 80226cc:	af00      	add	r7, sp, #0
 80226ce:	6078      	str	r0, [r7, #4]
 80226d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80226d2:	2300      	movs	r3, #0
 80226d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80226d6:	687b      	ldr	r3, [r7, #4]
 80226d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80226dc:	2b01      	cmp	r3, #1
 80226de:	d101      	bne.n	80226e4 <HAL_ADC_ConfigChannel+0x1c>
 80226e0:	2302      	movs	r3, #2
 80226e2:	e105      	b.n	80228f0 <HAL_ADC_ConfigChannel+0x228>
 80226e4:	687b      	ldr	r3, [r7, #4]
 80226e6:	2201      	movs	r2, #1
 80226e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80226ec:	683b      	ldr	r3, [r7, #0]
 80226ee:	681b      	ldr	r3, [r3, #0]
 80226f0:	2b09      	cmp	r3, #9
 80226f2:	d925      	bls.n	8022740 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80226f4:	687b      	ldr	r3, [r7, #4]
 80226f6:	681b      	ldr	r3, [r3, #0]
 80226f8:	68d9      	ldr	r1, [r3, #12]
 80226fa:	683b      	ldr	r3, [r7, #0]
 80226fc:	681b      	ldr	r3, [r3, #0]
 80226fe:	b29b      	uxth	r3, r3
 8022700:	461a      	mov	r2, r3
 8022702:	4613      	mov	r3, r2
 8022704:	005b      	lsls	r3, r3, #1
 8022706:	4413      	add	r3, r2
 8022708:	3b1e      	subs	r3, #30
 802270a:	2207      	movs	r2, #7
 802270c:	fa02 f303 	lsl.w	r3, r2, r3
 8022710:	43da      	mvns	r2, r3
 8022712:	687b      	ldr	r3, [r7, #4]
 8022714:	681b      	ldr	r3, [r3, #0]
 8022716:	400a      	ands	r2, r1
 8022718:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 802271a:	687b      	ldr	r3, [r7, #4]
 802271c:	681b      	ldr	r3, [r3, #0]
 802271e:	68d9      	ldr	r1, [r3, #12]
 8022720:	683b      	ldr	r3, [r7, #0]
 8022722:	689a      	ldr	r2, [r3, #8]
 8022724:	683b      	ldr	r3, [r7, #0]
 8022726:	681b      	ldr	r3, [r3, #0]
 8022728:	b29b      	uxth	r3, r3
 802272a:	4618      	mov	r0, r3
 802272c:	4603      	mov	r3, r0
 802272e:	005b      	lsls	r3, r3, #1
 8022730:	4403      	add	r3, r0
 8022732:	3b1e      	subs	r3, #30
 8022734:	409a      	lsls	r2, r3
 8022736:	687b      	ldr	r3, [r7, #4]
 8022738:	681b      	ldr	r3, [r3, #0]
 802273a:	430a      	orrs	r2, r1
 802273c:	60da      	str	r2, [r3, #12]
 802273e:	e022      	b.n	8022786 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8022740:	687b      	ldr	r3, [r7, #4]
 8022742:	681b      	ldr	r3, [r3, #0]
 8022744:	6919      	ldr	r1, [r3, #16]
 8022746:	683b      	ldr	r3, [r7, #0]
 8022748:	681b      	ldr	r3, [r3, #0]
 802274a:	b29b      	uxth	r3, r3
 802274c:	461a      	mov	r2, r3
 802274e:	4613      	mov	r3, r2
 8022750:	005b      	lsls	r3, r3, #1
 8022752:	4413      	add	r3, r2
 8022754:	2207      	movs	r2, #7
 8022756:	fa02 f303 	lsl.w	r3, r2, r3
 802275a:	43da      	mvns	r2, r3
 802275c:	687b      	ldr	r3, [r7, #4]
 802275e:	681b      	ldr	r3, [r3, #0]
 8022760:	400a      	ands	r2, r1
 8022762:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8022764:	687b      	ldr	r3, [r7, #4]
 8022766:	681b      	ldr	r3, [r3, #0]
 8022768:	6919      	ldr	r1, [r3, #16]
 802276a:	683b      	ldr	r3, [r7, #0]
 802276c:	689a      	ldr	r2, [r3, #8]
 802276e:	683b      	ldr	r3, [r7, #0]
 8022770:	681b      	ldr	r3, [r3, #0]
 8022772:	b29b      	uxth	r3, r3
 8022774:	4618      	mov	r0, r3
 8022776:	4603      	mov	r3, r0
 8022778:	005b      	lsls	r3, r3, #1
 802277a:	4403      	add	r3, r0
 802277c:	409a      	lsls	r2, r3
 802277e:	687b      	ldr	r3, [r7, #4]
 8022780:	681b      	ldr	r3, [r3, #0]
 8022782:	430a      	orrs	r2, r1
 8022784:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8022786:	683b      	ldr	r3, [r7, #0]
 8022788:	685b      	ldr	r3, [r3, #4]
 802278a:	2b06      	cmp	r3, #6
 802278c:	d824      	bhi.n	80227d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 802278e:	687b      	ldr	r3, [r7, #4]
 8022790:	681b      	ldr	r3, [r3, #0]
 8022792:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8022794:	683b      	ldr	r3, [r7, #0]
 8022796:	685a      	ldr	r2, [r3, #4]
 8022798:	4613      	mov	r3, r2
 802279a:	009b      	lsls	r3, r3, #2
 802279c:	4413      	add	r3, r2
 802279e:	3b05      	subs	r3, #5
 80227a0:	221f      	movs	r2, #31
 80227a2:	fa02 f303 	lsl.w	r3, r2, r3
 80227a6:	43da      	mvns	r2, r3
 80227a8:	687b      	ldr	r3, [r7, #4]
 80227aa:	681b      	ldr	r3, [r3, #0]
 80227ac:	400a      	ands	r2, r1
 80227ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80227b0:	687b      	ldr	r3, [r7, #4]
 80227b2:	681b      	ldr	r3, [r3, #0]
 80227b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80227b6:	683b      	ldr	r3, [r7, #0]
 80227b8:	681b      	ldr	r3, [r3, #0]
 80227ba:	b29b      	uxth	r3, r3
 80227bc:	4618      	mov	r0, r3
 80227be:	683b      	ldr	r3, [r7, #0]
 80227c0:	685a      	ldr	r2, [r3, #4]
 80227c2:	4613      	mov	r3, r2
 80227c4:	009b      	lsls	r3, r3, #2
 80227c6:	4413      	add	r3, r2
 80227c8:	3b05      	subs	r3, #5
 80227ca:	fa00 f203 	lsl.w	r2, r0, r3
 80227ce:	687b      	ldr	r3, [r7, #4]
 80227d0:	681b      	ldr	r3, [r3, #0]
 80227d2:	430a      	orrs	r2, r1
 80227d4:	635a      	str	r2, [r3, #52]	; 0x34
 80227d6:	e04c      	b.n	8022872 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80227d8:	683b      	ldr	r3, [r7, #0]
 80227da:	685b      	ldr	r3, [r3, #4]
 80227dc:	2b0c      	cmp	r3, #12
 80227de:	d824      	bhi.n	802282a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80227e0:	687b      	ldr	r3, [r7, #4]
 80227e2:	681b      	ldr	r3, [r3, #0]
 80227e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80227e6:	683b      	ldr	r3, [r7, #0]
 80227e8:	685a      	ldr	r2, [r3, #4]
 80227ea:	4613      	mov	r3, r2
 80227ec:	009b      	lsls	r3, r3, #2
 80227ee:	4413      	add	r3, r2
 80227f0:	3b23      	subs	r3, #35	; 0x23
 80227f2:	221f      	movs	r2, #31
 80227f4:	fa02 f303 	lsl.w	r3, r2, r3
 80227f8:	43da      	mvns	r2, r3
 80227fa:	687b      	ldr	r3, [r7, #4]
 80227fc:	681b      	ldr	r3, [r3, #0]
 80227fe:	400a      	ands	r2, r1
 8022800:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8022802:	687b      	ldr	r3, [r7, #4]
 8022804:	681b      	ldr	r3, [r3, #0]
 8022806:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8022808:	683b      	ldr	r3, [r7, #0]
 802280a:	681b      	ldr	r3, [r3, #0]
 802280c:	b29b      	uxth	r3, r3
 802280e:	4618      	mov	r0, r3
 8022810:	683b      	ldr	r3, [r7, #0]
 8022812:	685a      	ldr	r2, [r3, #4]
 8022814:	4613      	mov	r3, r2
 8022816:	009b      	lsls	r3, r3, #2
 8022818:	4413      	add	r3, r2
 802281a:	3b23      	subs	r3, #35	; 0x23
 802281c:	fa00 f203 	lsl.w	r2, r0, r3
 8022820:	687b      	ldr	r3, [r7, #4]
 8022822:	681b      	ldr	r3, [r3, #0]
 8022824:	430a      	orrs	r2, r1
 8022826:	631a      	str	r2, [r3, #48]	; 0x30
 8022828:	e023      	b.n	8022872 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 802282a:	687b      	ldr	r3, [r7, #4]
 802282c:	681b      	ldr	r3, [r3, #0]
 802282e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8022830:	683b      	ldr	r3, [r7, #0]
 8022832:	685a      	ldr	r2, [r3, #4]
 8022834:	4613      	mov	r3, r2
 8022836:	009b      	lsls	r3, r3, #2
 8022838:	4413      	add	r3, r2
 802283a:	3b41      	subs	r3, #65	; 0x41
 802283c:	221f      	movs	r2, #31
 802283e:	fa02 f303 	lsl.w	r3, r2, r3
 8022842:	43da      	mvns	r2, r3
 8022844:	687b      	ldr	r3, [r7, #4]
 8022846:	681b      	ldr	r3, [r3, #0]
 8022848:	400a      	ands	r2, r1
 802284a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 802284c:	687b      	ldr	r3, [r7, #4]
 802284e:	681b      	ldr	r3, [r3, #0]
 8022850:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8022852:	683b      	ldr	r3, [r7, #0]
 8022854:	681b      	ldr	r3, [r3, #0]
 8022856:	b29b      	uxth	r3, r3
 8022858:	4618      	mov	r0, r3
 802285a:	683b      	ldr	r3, [r7, #0]
 802285c:	685a      	ldr	r2, [r3, #4]
 802285e:	4613      	mov	r3, r2
 8022860:	009b      	lsls	r3, r3, #2
 8022862:	4413      	add	r3, r2
 8022864:	3b41      	subs	r3, #65	; 0x41
 8022866:	fa00 f203 	lsl.w	r2, r0, r3
 802286a:	687b      	ldr	r3, [r7, #4]
 802286c:	681b      	ldr	r3, [r3, #0]
 802286e:	430a      	orrs	r2, r1
 8022870:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8022872:	4b22      	ldr	r3, [pc, #136]	; (80228fc <HAL_ADC_ConfigChannel+0x234>)
 8022874:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8022876:	687b      	ldr	r3, [r7, #4]
 8022878:	681b      	ldr	r3, [r3, #0]
 802287a:	4a21      	ldr	r2, [pc, #132]	; (8022900 <HAL_ADC_ConfigChannel+0x238>)
 802287c:	4293      	cmp	r3, r2
 802287e:	d109      	bne.n	8022894 <HAL_ADC_ConfigChannel+0x1cc>
 8022880:	683b      	ldr	r3, [r7, #0]
 8022882:	681b      	ldr	r3, [r3, #0]
 8022884:	2b12      	cmp	r3, #18
 8022886:	d105      	bne.n	8022894 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8022888:	68fb      	ldr	r3, [r7, #12]
 802288a:	685b      	ldr	r3, [r3, #4]
 802288c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8022890:	68fb      	ldr	r3, [r7, #12]
 8022892:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8022894:	687b      	ldr	r3, [r7, #4]
 8022896:	681b      	ldr	r3, [r3, #0]
 8022898:	4a19      	ldr	r2, [pc, #100]	; (8022900 <HAL_ADC_ConfigChannel+0x238>)
 802289a:	4293      	cmp	r3, r2
 802289c:	d123      	bne.n	80228e6 <HAL_ADC_ConfigChannel+0x21e>
 802289e:	683b      	ldr	r3, [r7, #0]
 80228a0:	681b      	ldr	r3, [r3, #0]
 80228a2:	2b10      	cmp	r3, #16
 80228a4:	d003      	beq.n	80228ae <HAL_ADC_ConfigChannel+0x1e6>
 80228a6:	683b      	ldr	r3, [r7, #0]
 80228a8:	681b      	ldr	r3, [r3, #0]
 80228aa:	2b11      	cmp	r3, #17
 80228ac:	d11b      	bne.n	80228e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80228ae:	68fb      	ldr	r3, [r7, #12]
 80228b0:	685b      	ldr	r3, [r3, #4]
 80228b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80228b6:	68fb      	ldr	r3, [r7, #12]
 80228b8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80228ba:	683b      	ldr	r3, [r7, #0]
 80228bc:	681b      	ldr	r3, [r3, #0]
 80228be:	2b10      	cmp	r3, #16
 80228c0:	d111      	bne.n	80228e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80228c2:	4b10      	ldr	r3, [pc, #64]	; (8022904 <HAL_ADC_ConfigChannel+0x23c>)
 80228c4:	681b      	ldr	r3, [r3, #0]
 80228c6:	4a10      	ldr	r2, [pc, #64]	; (8022908 <HAL_ADC_ConfigChannel+0x240>)
 80228c8:	fba2 2303 	umull	r2, r3, r2, r3
 80228cc:	0c9a      	lsrs	r2, r3, #18
 80228ce:	4613      	mov	r3, r2
 80228d0:	009b      	lsls	r3, r3, #2
 80228d2:	4413      	add	r3, r2
 80228d4:	005b      	lsls	r3, r3, #1
 80228d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80228d8:	e002      	b.n	80228e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80228da:	68bb      	ldr	r3, [r7, #8]
 80228dc:	3b01      	subs	r3, #1
 80228de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80228e0:	68bb      	ldr	r3, [r7, #8]
 80228e2:	2b00      	cmp	r3, #0
 80228e4:	d1f9      	bne.n	80228da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80228e6:	687b      	ldr	r3, [r7, #4]
 80228e8:	2200      	movs	r2, #0
 80228ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80228ee:	2300      	movs	r3, #0
}
 80228f0:	4618      	mov	r0, r3
 80228f2:	3714      	adds	r7, #20
 80228f4:	46bd      	mov	sp, r7
 80228f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228fa:	4770      	bx	lr
 80228fc:	40012300 	.word	0x40012300
 8022900:	40012000 	.word	0x40012000
 8022904:	20000000 	.word	0x20000000
 8022908:	431bde83 	.word	0x431bde83

0802290c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 802290c:	b480      	push	{r7}
 802290e:	b085      	sub	sp, #20
 8022910:	af00      	add	r7, sp, #0
 8022912:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8022914:	4b79      	ldr	r3, [pc, #484]	; (8022afc <ADC_Init+0x1f0>)
 8022916:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8022918:	68fb      	ldr	r3, [r7, #12]
 802291a:	685b      	ldr	r3, [r3, #4]
 802291c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8022920:	68fb      	ldr	r3, [r7, #12]
 8022922:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8022924:	68fb      	ldr	r3, [r7, #12]
 8022926:	685a      	ldr	r2, [r3, #4]
 8022928:	687b      	ldr	r3, [r7, #4]
 802292a:	685b      	ldr	r3, [r3, #4]
 802292c:	431a      	orrs	r2, r3
 802292e:	68fb      	ldr	r3, [r7, #12]
 8022930:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8022932:	687b      	ldr	r3, [r7, #4]
 8022934:	681b      	ldr	r3, [r3, #0]
 8022936:	685a      	ldr	r2, [r3, #4]
 8022938:	687b      	ldr	r3, [r7, #4]
 802293a:	681b      	ldr	r3, [r3, #0]
 802293c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8022940:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8022942:	687b      	ldr	r3, [r7, #4]
 8022944:	681b      	ldr	r3, [r3, #0]
 8022946:	6859      	ldr	r1, [r3, #4]
 8022948:	687b      	ldr	r3, [r7, #4]
 802294a:	691b      	ldr	r3, [r3, #16]
 802294c:	021a      	lsls	r2, r3, #8
 802294e:	687b      	ldr	r3, [r7, #4]
 8022950:	681b      	ldr	r3, [r3, #0]
 8022952:	430a      	orrs	r2, r1
 8022954:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8022956:	687b      	ldr	r3, [r7, #4]
 8022958:	681b      	ldr	r3, [r3, #0]
 802295a:	685a      	ldr	r2, [r3, #4]
 802295c:	687b      	ldr	r3, [r7, #4]
 802295e:	681b      	ldr	r3, [r3, #0]
 8022960:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8022964:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8022966:	687b      	ldr	r3, [r7, #4]
 8022968:	681b      	ldr	r3, [r3, #0]
 802296a:	6859      	ldr	r1, [r3, #4]
 802296c:	687b      	ldr	r3, [r7, #4]
 802296e:	689a      	ldr	r2, [r3, #8]
 8022970:	687b      	ldr	r3, [r7, #4]
 8022972:	681b      	ldr	r3, [r3, #0]
 8022974:	430a      	orrs	r2, r1
 8022976:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8022978:	687b      	ldr	r3, [r7, #4]
 802297a:	681b      	ldr	r3, [r3, #0]
 802297c:	689a      	ldr	r2, [r3, #8]
 802297e:	687b      	ldr	r3, [r7, #4]
 8022980:	681b      	ldr	r3, [r3, #0]
 8022982:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8022986:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8022988:	687b      	ldr	r3, [r7, #4]
 802298a:	681b      	ldr	r3, [r3, #0]
 802298c:	6899      	ldr	r1, [r3, #8]
 802298e:	687b      	ldr	r3, [r7, #4]
 8022990:	68da      	ldr	r2, [r3, #12]
 8022992:	687b      	ldr	r3, [r7, #4]
 8022994:	681b      	ldr	r3, [r3, #0]
 8022996:	430a      	orrs	r2, r1
 8022998:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 802299a:	687b      	ldr	r3, [r7, #4]
 802299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802299e:	4a58      	ldr	r2, [pc, #352]	; (8022b00 <ADC_Init+0x1f4>)
 80229a0:	4293      	cmp	r3, r2
 80229a2:	d022      	beq.n	80229ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80229a4:	687b      	ldr	r3, [r7, #4]
 80229a6:	681b      	ldr	r3, [r3, #0]
 80229a8:	689a      	ldr	r2, [r3, #8]
 80229aa:	687b      	ldr	r3, [r7, #4]
 80229ac:	681b      	ldr	r3, [r3, #0]
 80229ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80229b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80229b4:	687b      	ldr	r3, [r7, #4]
 80229b6:	681b      	ldr	r3, [r3, #0]
 80229b8:	6899      	ldr	r1, [r3, #8]
 80229ba:	687b      	ldr	r3, [r7, #4]
 80229bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80229be:	687b      	ldr	r3, [r7, #4]
 80229c0:	681b      	ldr	r3, [r3, #0]
 80229c2:	430a      	orrs	r2, r1
 80229c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80229c6:	687b      	ldr	r3, [r7, #4]
 80229c8:	681b      	ldr	r3, [r3, #0]
 80229ca:	689a      	ldr	r2, [r3, #8]
 80229cc:	687b      	ldr	r3, [r7, #4]
 80229ce:	681b      	ldr	r3, [r3, #0]
 80229d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80229d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80229d6:	687b      	ldr	r3, [r7, #4]
 80229d8:	681b      	ldr	r3, [r3, #0]
 80229da:	6899      	ldr	r1, [r3, #8]
 80229dc:	687b      	ldr	r3, [r7, #4]
 80229de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80229e0:	687b      	ldr	r3, [r7, #4]
 80229e2:	681b      	ldr	r3, [r3, #0]
 80229e4:	430a      	orrs	r2, r1
 80229e6:	609a      	str	r2, [r3, #8]
 80229e8:	e00f      	b.n	8022a0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80229ea:	687b      	ldr	r3, [r7, #4]
 80229ec:	681b      	ldr	r3, [r3, #0]
 80229ee:	689a      	ldr	r2, [r3, #8]
 80229f0:	687b      	ldr	r3, [r7, #4]
 80229f2:	681b      	ldr	r3, [r3, #0]
 80229f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80229f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80229fa:	687b      	ldr	r3, [r7, #4]
 80229fc:	681b      	ldr	r3, [r3, #0]
 80229fe:	689a      	ldr	r2, [r3, #8]
 8022a00:	687b      	ldr	r3, [r7, #4]
 8022a02:	681b      	ldr	r3, [r3, #0]
 8022a04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8022a08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8022a0a:	687b      	ldr	r3, [r7, #4]
 8022a0c:	681b      	ldr	r3, [r3, #0]
 8022a0e:	689a      	ldr	r2, [r3, #8]
 8022a10:	687b      	ldr	r3, [r7, #4]
 8022a12:	681b      	ldr	r3, [r3, #0]
 8022a14:	f022 0202 	bic.w	r2, r2, #2
 8022a18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8022a1a:	687b      	ldr	r3, [r7, #4]
 8022a1c:	681b      	ldr	r3, [r3, #0]
 8022a1e:	6899      	ldr	r1, [r3, #8]
 8022a20:	687b      	ldr	r3, [r7, #4]
 8022a22:	7e1b      	ldrb	r3, [r3, #24]
 8022a24:	005a      	lsls	r2, r3, #1
 8022a26:	687b      	ldr	r3, [r7, #4]
 8022a28:	681b      	ldr	r3, [r3, #0]
 8022a2a:	430a      	orrs	r2, r1
 8022a2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8022a2e:	687b      	ldr	r3, [r7, #4]
 8022a30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8022a34:	2b00      	cmp	r3, #0
 8022a36:	d01b      	beq.n	8022a70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8022a38:	687b      	ldr	r3, [r7, #4]
 8022a3a:	681b      	ldr	r3, [r3, #0]
 8022a3c:	685a      	ldr	r2, [r3, #4]
 8022a3e:	687b      	ldr	r3, [r7, #4]
 8022a40:	681b      	ldr	r3, [r3, #0]
 8022a42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8022a46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8022a48:	687b      	ldr	r3, [r7, #4]
 8022a4a:	681b      	ldr	r3, [r3, #0]
 8022a4c:	685a      	ldr	r2, [r3, #4]
 8022a4e:	687b      	ldr	r3, [r7, #4]
 8022a50:	681b      	ldr	r3, [r3, #0]
 8022a52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8022a56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8022a58:	687b      	ldr	r3, [r7, #4]
 8022a5a:	681b      	ldr	r3, [r3, #0]
 8022a5c:	6859      	ldr	r1, [r3, #4]
 8022a5e:	687b      	ldr	r3, [r7, #4]
 8022a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022a62:	3b01      	subs	r3, #1
 8022a64:	035a      	lsls	r2, r3, #13
 8022a66:	687b      	ldr	r3, [r7, #4]
 8022a68:	681b      	ldr	r3, [r3, #0]
 8022a6a:	430a      	orrs	r2, r1
 8022a6c:	605a      	str	r2, [r3, #4]
 8022a6e:	e007      	b.n	8022a80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8022a70:	687b      	ldr	r3, [r7, #4]
 8022a72:	681b      	ldr	r3, [r3, #0]
 8022a74:	685a      	ldr	r2, [r3, #4]
 8022a76:	687b      	ldr	r3, [r7, #4]
 8022a78:	681b      	ldr	r3, [r3, #0]
 8022a7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8022a7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8022a80:	687b      	ldr	r3, [r7, #4]
 8022a82:	681b      	ldr	r3, [r3, #0]
 8022a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022a86:	687b      	ldr	r3, [r7, #4]
 8022a88:	681b      	ldr	r3, [r3, #0]
 8022a8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8022a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8022a90:	687b      	ldr	r3, [r7, #4]
 8022a92:	681b      	ldr	r3, [r3, #0]
 8022a94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8022a96:	687b      	ldr	r3, [r7, #4]
 8022a98:	69db      	ldr	r3, [r3, #28]
 8022a9a:	3b01      	subs	r3, #1
 8022a9c:	051a      	lsls	r2, r3, #20
 8022a9e:	687b      	ldr	r3, [r7, #4]
 8022aa0:	681b      	ldr	r3, [r3, #0]
 8022aa2:	430a      	orrs	r2, r1
 8022aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8022aa6:	687b      	ldr	r3, [r7, #4]
 8022aa8:	681b      	ldr	r3, [r3, #0]
 8022aaa:	689a      	ldr	r2, [r3, #8]
 8022aac:	687b      	ldr	r3, [r7, #4]
 8022aae:	681b      	ldr	r3, [r3, #0]
 8022ab0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8022ab4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8022ab6:	687b      	ldr	r3, [r7, #4]
 8022ab8:	681b      	ldr	r3, [r3, #0]
 8022aba:	6899      	ldr	r1, [r3, #8]
 8022abc:	687b      	ldr	r3, [r7, #4]
 8022abe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8022ac2:	025a      	lsls	r2, r3, #9
 8022ac4:	687b      	ldr	r3, [r7, #4]
 8022ac6:	681b      	ldr	r3, [r3, #0]
 8022ac8:	430a      	orrs	r2, r1
 8022aca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8022acc:	687b      	ldr	r3, [r7, #4]
 8022ace:	681b      	ldr	r3, [r3, #0]
 8022ad0:	689a      	ldr	r2, [r3, #8]
 8022ad2:	687b      	ldr	r3, [r7, #4]
 8022ad4:	681b      	ldr	r3, [r3, #0]
 8022ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8022ada:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8022adc:	687b      	ldr	r3, [r7, #4]
 8022ade:	681b      	ldr	r3, [r3, #0]
 8022ae0:	6899      	ldr	r1, [r3, #8]
 8022ae2:	687b      	ldr	r3, [r7, #4]
 8022ae4:	695b      	ldr	r3, [r3, #20]
 8022ae6:	029a      	lsls	r2, r3, #10
 8022ae8:	687b      	ldr	r3, [r7, #4]
 8022aea:	681b      	ldr	r3, [r3, #0]
 8022aec:	430a      	orrs	r2, r1
 8022aee:	609a      	str	r2, [r3, #8]
}
 8022af0:	bf00      	nop
 8022af2:	3714      	adds	r7, #20
 8022af4:	46bd      	mov	sp, r7
 8022af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022afa:	4770      	bx	lr
 8022afc:	40012300 	.word	0x40012300
 8022b00:	0f000001 	.word	0x0f000001

08022b04 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8022b04:	b580      	push	{r7, lr}
 8022b06:	b084      	sub	sp, #16
 8022b08:	af00      	add	r7, sp, #0
 8022b0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8022b0c:	687b      	ldr	r3, [r7, #4]
 8022b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022b10:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8022b12:	68fb      	ldr	r3, [r7, #12]
 8022b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022b16:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8022b1a:	2b00      	cmp	r3, #0
 8022b1c:	d13c      	bne.n	8022b98 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8022b1e:	68fb      	ldr	r3, [r7, #12]
 8022b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022b22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8022b26:	68fb      	ldr	r3, [r7, #12]
 8022b28:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8022b2a:	68fb      	ldr	r3, [r7, #12]
 8022b2c:	681b      	ldr	r3, [r3, #0]
 8022b2e:	689b      	ldr	r3, [r3, #8]
 8022b30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8022b34:	2b00      	cmp	r3, #0
 8022b36:	d12b      	bne.n	8022b90 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8022b38:	68fb      	ldr	r3, [r7, #12]
 8022b3a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8022b3c:	2b00      	cmp	r3, #0
 8022b3e:	d127      	bne.n	8022b90 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8022b40:	68fb      	ldr	r3, [r7, #12]
 8022b42:	681b      	ldr	r3, [r3, #0]
 8022b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022b46:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8022b4a:	2b00      	cmp	r3, #0
 8022b4c:	d006      	beq.n	8022b5c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8022b4e:	68fb      	ldr	r3, [r7, #12]
 8022b50:	681b      	ldr	r3, [r3, #0]
 8022b52:	689b      	ldr	r3, [r3, #8]
 8022b54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8022b58:	2b00      	cmp	r3, #0
 8022b5a:	d119      	bne.n	8022b90 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8022b5c:	68fb      	ldr	r3, [r7, #12]
 8022b5e:	681b      	ldr	r3, [r3, #0]
 8022b60:	685a      	ldr	r2, [r3, #4]
 8022b62:	68fb      	ldr	r3, [r7, #12]
 8022b64:	681b      	ldr	r3, [r3, #0]
 8022b66:	f022 0220 	bic.w	r2, r2, #32
 8022b6a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8022b6c:	68fb      	ldr	r3, [r7, #12]
 8022b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022b70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8022b74:	68fb      	ldr	r3, [r7, #12]
 8022b76:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8022b78:	68fb      	ldr	r3, [r7, #12]
 8022b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022b7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8022b80:	2b00      	cmp	r3, #0
 8022b82:	d105      	bne.n	8022b90 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8022b84:	68fb      	ldr	r3, [r7, #12]
 8022b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022b88:	f043 0201 	orr.w	r2, r3, #1
 8022b8c:	68fb      	ldr	r3, [r7, #12]
 8022b8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8022b90:	68f8      	ldr	r0, [r7, #12]
 8022b92:	f7ff fd7b 	bl	802268c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8022b96:	e00e      	b.n	8022bb6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8022b98:	68fb      	ldr	r3, [r7, #12]
 8022b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022b9c:	f003 0310 	and.w	r3, r3, #16
 8022ba0:	2b00      	cmp	r3, #0
 8022ba2:	d003      	beq.n	8022bac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8022ba4:	68f8      	ldr	r0, [r7, #12]
 8022ba6:	f7ff fd85 	bl	80226b4 <HAL_ADC_ErrorCallback>
}
 8022baa:	e004      	b.n	8022bb6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8022bac:	68fb      	ldr	r3, [r7, #12]
 8022bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8022bb2:	6878      	ldr	r0, [r7, #4]
 8022bb4:	4798      	blx	r3
}
 8022bb6:	bf00      	nop
 8022bb8:	3710      	adds	r7, #16
 8022bba:	46bd      	mov	sp, r7
 8022bbc:	bd80      	pop	{r7, pc}

08022bbe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8022bbe:	b580      	push	{r7, lr}
 8022bc0:	b084      	sub	sp, #16
 8022bc2:	af00      	add	r7, sp, #0
 8022bc4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8022bc6:	687b      	ldr	r3, [r7, #4]
 8022bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022bca:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8022bcc:	68f8      	ldr	r0, [r7, #12]
 8022bce:	f7ff fd67 	bl	80226a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8022bd2:	bf00      	nop
 8022bd4:	3710      	adds	r7, #16
 8022bd6:	46bd      	mov	sp, r7
 8022bd8:	bd80      	pop	{r7, pc}

08022bda <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8022bda:	b580      	push	{r7, lr}
 8022bdc:	b084      	sub	sp, #16
 8022bde:	af00      	add	r7, sp, #0
 8022be0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8022be2:	687b      	ldr	r3, [r7, #4]
 8022be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022be6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8022be8:	68fb      	ldr	r3, [r7, #12]
 8022bea:	2240      	movs	r2, #64	; 0x40
 8022bec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8022bee:	68fb      	ldr	r3, [r7, #12]
 8022bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022bf2:	f043 0204 	orr.w	r2, r3, #4
 8022bf6:	68fb      	ldr	r3, [r7, #12]
 8022bf8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8022bfa:	68f8      	ldr	r0, [r7, #12]
 8022bfc:	f7ff fd5a 	bl	80226b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8022c00:	bf00      	nop
 8022c02:	3710      	adds	r7, #16
 8022c04:	46bd      	mov	sp, r7
 8022c06:	bd80      	pop	{r7, pc}

08022c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8022c08:	b480      	push	{r7}
 8022c0a:	b085      	sub	sp, #20
 8022c0c:	af00      	add	r7, sp, #0
 8022c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8022c10:	687b      	ldr	r3, [r7, #4]
 8022c12:	f003 0307 	and.w	r3, r3, #7
 8022c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8022c18:	4b0c      	ldr	r3, [pc, #48]	; (8022c4c <__NVIC_SetPriorityGrouping+0x44>)
 8022c1a:	68db      	ldr	r3, [r3, #12]
 8022c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8022c1e:	68ba      	ldr	r2, [r7, #8]
 8022c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8022c24:	4013      	ands	r3, r2
 8022c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8022c28:	68fb      	ldr	r3, [r7, #12]
 8022c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8022c2c:	68bb      	ldr	r3, [r7, #8]
 8022c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8022c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8022c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8022c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8022c3a:	4a04      	ldr	r2, [pc, #16]	; (8022c4c <__NVIC_SetPriorityGrouping+0x44>)
 8022c3c:	68bb      	ldr	r3, [r7, #8]
 8022c3e:	60d3      	str	r3, [r2, #12]
}
 8022c40:	bf00      	nop
 8022c42:	3714      	adds	r7, #20
 8022c44:	46bd      	mov	sp, r7
 8022c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c4a:	4770      	bx	lr
 8022c4c:	e000ed00 	.word	0xe000ed00

08022c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8022c50:	b480      	push	{r7}
 8022c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8022c54:	4b04      	ldr	r3, [pc, #16]	; (8022c68 <__NVIC_GetPriorityGrouping+0x18>)
 8022c56:	68db      	ldr	r3, [r3, #12]
 8022c58:	0a1b      	lsrs	r3, r3, #8
 8022c5a:	f003 0307 	and.w	r3, r3, #7
}
 8022c5e:	4618      	mov	r0, r3
 8022c60:	46bd      	mov	sp, r7
 8022c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c66:	4770      	bx	lr
 8022c68:	e000ed00 	.word	0xe000ed00

08022c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8022c6c:	b480      	push	{r7}
 8022c6e:	b083      	sub	sp, #12
 8022c70:	af00      	add	r7, sp, #0
 8022c72:	4603      	mov	r3, r0
 8022c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8022c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022c7a:	2b00      	cmp	r3, #0
 8022c7c:	db0b      	blt.n	8022c96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8022c7e:	79fb      	ldrb	r3, [r7, #7]
 8022c80:	f003 021f 	and.w	r2, r3, #31
 8022c84:	4907      	ldr	r1, [pc, #28]	; (8022ca4 <__NVIC_EnableIRQ+0x38>)
 8022c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022c8a:	095b      	lsrs	r3, r3, #5
 8022c8c:	2001      	movs	r0, #1
 8022c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8022c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8022c96:	bf00      	nop
 8022c98:	370c      	adds	r7, #12
 8022c9a:	46bd      	mov	sp, r7
 8022c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ca0:	4770      	bx	lr
 8022ca2:	bf00      	nop
 8022ca4:	e000e100 	.word	0xe000e100

08022ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8022ca8:	b480      	push	{r7}
 8022caa:	b083      	sub	sp, #12
 8022cac:	af00      	add	r7, sp, #0
 8022cae:	4603      	mov	r3, r0
 8022cb0:	6039      	str	r1, [r7, #0]
 8022cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8022cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022cb8:	2b00      	cmp	r3, #0
 8022cba:	db0a      	blt.n	8022cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022cbc:	683b      	ldr	r3, [r7, #0]
 8022cbe:	b2da      	uxtb	r2, r3
 8022cc0:	490c      	ldr	r1, [pc, #48]	; (8022cf4 <__NVIC_SetPriority+0x4c>)
 8022cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022cc6:	0112      	lsls	r2, r2, #4
 8022cc8:	b2d2      	uxtb	r2, r2
 8022cca:	440b      	add	r3, r1
 8022ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8022cd0:	e00a      	b.n	8022ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8022cd2:	683b      	ldr	r3, [r7, #0]
 8022cd4:	b2da      	uxtb	r2, r3
 8022cd6:	4908      	ldr	r1, [pc, #32]	; (8022cf8 <__NVIC_SetPriority+0x50>)
 8022cd8:	79fb      	ldrb	r3, [r7, #7]
 8022cda:	f003 030f 	and.w	r3, r3, #15
 8022cde:	3b04      	subs	r3, #4
 8022ce0:	0112      	lsls	r2, r2, #4
 8022ce2:	b2d2      	uxtb	r2, r2
 8022ce4:	440b      	add	r3, r1
 8022ce6:	761a      	strb	r2, [r3, #24]
}
 8022ce8:	bf00      	nop
 8022cea:	370c      	adds	r7, #12
 8022cec:	46bd      	mov	sp, r7
 8022cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022cf2:	4770      	bx	lr
 8022cf4:	e000e100 	.word	0xe000e100
 8022cf8:	e000ed00 	.word	0xe000ed00

08022cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8022cfc:	b480      	push	{r7}
 8022cfe:	b089      	sub	sp, #36	; 0x24
 8022d00:	af00      	add	r7, sp, #0
 8022d02:	60f8      	str	r0, [r7, #12]
 8022d04:	60b9      	str	r1, [r7, #8]
 8022d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8022d08:	68fb      	ldr	r3, [r7, #12]
 8022d0a:	f003 0307 	and.w	r3, r3, #7
 8022d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8022d10:	69fb      	ldr	r3, [r7, #28]
 8022d12:	f1c3 0307 	rsb	r3, r3, #7
 8022d16:	2b04      	cmp	r3, #4
 8022d18:	bf28      	it	cs
 8022d1a:	2304      	movcs	r3, #4
 8022d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8022d1e:	69fb      	ldr	r3, [r7, #28]
 8022d20:	3304      	adds	r3, #4
 8022d22:	2b06      	cmp	r3, #6
 8022d24:	d902      	bls.n	8022d2c <NVIC_EncodePriority+0x30>
 8022d26:	69fb      	ldr	r3, [r7, #28]
 8022d28:	3b03      	subs	r3, #3
 8022d2a:	e000      	b.n	8022d2e <NVIC_EncodePriority+0x32>
 8022d2c:	2300      	movs	r3, #0
 8022d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022d30:	f04f 32ff 	mov.w	r2, #4294967295
 8022d34:	69bb      	ldr	r3, [r7, #24]
 8022d36:	fa02 f303 	lsl.w	r3, r2, r3
 8022d3a:	43da      	mvns	r2, r3
 8022d3c:	68bb      	ldr	r3, [r7, #8]
 8022d3e:	401a      	ands	r2, r3
 8022d40:	697b      	ldr	r3, [r7, #20]
 8022d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8022d44:	f04f 31ff 	mov.w	r1, #4294967295
 8022d48:	697b      	ldr	r3, [r7, #20]
 8022d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8022d4e:	43d9      	mvns	r1, r3
 8022d50:	687b      	ldr	r3, [r7, #4]
 8022d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8022d54:	4313      	orrs	r3, r2
         );
}
 8022d56:	4618      	mov	r0, r3
 8022d58:	3724      	adds	r7, #36	; 0x24
 8022d5a:	46bd      	mov	sp, r7
 8022d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d60:	4770      	bx	lr
	...

08022d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8022d64:	b580      	push	{r7, lr}
 8022d66:	b082      	sub	sp, #8
 8022d68:	af00      	add	r7, sp, #0
 8022d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8022d6c:	687b      	ldr	r3, [r7, #4]
 8022d6e:	3b01      	subs	r3, #1
 8022d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8022d74:	d301      	bcc.n	8022d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8022d76:	2301      	movs	r3, #1
 8022d78:	e00f      	b.n	8022d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8022d7a:	4a0a      	ldr	r2, [pc, #40]	; (8022da4 <SysTick_Config+0x40>)
 8022d7c:	687b      	ldr	r3, [r7, #4]
 8022d7e:	3b01      	subs	r3, #1
 8022d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8022d82:	210f      	movs	r1, #15
 8022d84:	f04f 30ff 	mov.w	r0, #4294967295
 8022d88:	f7ff ff8e 	bl	8022ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8022d8c:	4b05      	ldr	r3, [pc, #20]	; (8022da4 <SysTick_Config+0x40>)
 8022d8e:	2200      	movs	r2, #0
 8022d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8022d92:	4b04      	ldr	r3, [pc, #16]	; (8022da4 <SysTick_Config+0x40>)
 8022d94:	2207      	movs	r2, #7
 8022d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8022d98:	2300      	movs	r3, #0
}
 8022d9a:	4618      	mov	r0, r3
 8022d9c:	3708      	adds	r7, #8
 8022d9e:	46bd      	mov	sp, r7
 8022da0:	bd80      	pop	{r7, pc}
 8022da2:	bf00      	nop
 8022da4:	e000e010 	.word	0xe000e010

08022da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8022da8:	b580      	push	{r7, lr}
 8022daa:	b082      	sub	sp, #8
 8022dac:	af00      	add	r7, sp, #0
 8022dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8022db0:	6878      	ldr	r0, [r7, #4]
 8022db2:	f7ff ff29 	bl	8022c08 <__NVIC_SetPriorityGrouping>
}
 8022db6:	bf00      	nop
 8022db8:	3708      	adds	r7, #8
 8022dba:	46bd      	mov	sp, r7
 8022dbc:	bd80      	pop	{r7, pc}

08022dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8022dbe:	b580      	push	{r7, lr}
 8022dc0:	b086      	sub	sp, #24
 8022dc2:	af00      	add	r7, sp, #0
 8022dc4:	4603      	mov	r3, r0
 8022dc6:	60b9      	str	r1, [r7, #8]
 8022dc8:	607a      	str	r2, [r7, #4]
 8022dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8022dcc:	2300      	movs	r3, #0
 8022dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8022dd0:	f7ff ff3e 	bl	8022c50 <__NVIC_GetPriorityGrouping>
 8022dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8022dd6:	687a      	ldr	r2, [r7, #4]
 8022dd8:	68b9      	ldr	r1, [r7, #8]
 8022dda:	6978      	ldr	r0, [r7, #20]
 8022ddc:	f7ff ff8e 	bl	8022cfc <NVIC_EncodePriority>
 8022de0:	4602      	mov	r2, r0
 8022de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8022de6:	4611      	mov	r1, r2
 8022de8:	4618      	mov	r0, r3
 8022dea:	f7ff ff5d 	bl	8022ca8 <__NVIC_SetPriority>
}
 8022dee:	bf00      	nop
 8022df0:	3718      	adds	r7, #24
 8022df2:	46bd      	mov	sp, r7
 8022df4:	bd80      	pop	{r7, pc}

08022df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8022df6:	b580      	push	{r7, lr}
 8022df8:	b082      	sub	sp, #8
 8022dfa:	af00      	add	r7, sp, #0
 8022dfc:	4603      	mov	r3, r0
 8022dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8022e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8022e04:	4618      	mov	r0, r3
 8022e06:	f7ff ff31 	bl	8022c6c <__NVIC_EnableIRQ>
}
 8022e0a:	bf00      	nop
 8022e0c:	3708      	adds	r7, #8
 8022e0e:	46bd      	mov	sp, r7
 8022e10:	bd80      	pop	{r7, pc}

08022e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8022e12:	b580      	push	{r7, lr}
 8022e14:	b082      	sub	sp, #8
 8022e16:	af00      	add	r7, sp, #0
 8022e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8022e1a:	6878      	ldr	r0, [r7, #4]
 8022e1c:	f7ff ffa2 	bl	8022d64 <SysTick_Config>
 8022e20:	4603      	mov	r3, r0
}
 8022e22:	4618      	mov	r0, r3
 8022e24:	3708      	adds	r7, #8
 8022e26:	46bd      	mov	sp, r7
 8022e28:	bd80      	pop	{r7, pc}
	...

08022e2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8022e2c:	b580      	push	{r7, lr}
 8022e2e:	b086      	sub	sp, #24
 8022e30:	af00      	add	r7, sp, #0
 8022e32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8022e34:	2300      	movs	r3, #0
 8022e36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8022e38:	f7ff fac4 	bl	80223c4 <HAL_GetTick>
 8022e3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8022e3e:	687b      	ldr	r3, [r7, #4]
 8022e40:	2b00      	cmp	r3, #0
 8022e42:	d101      	bne.n	8022e48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8022e44:	2301      	movs	r3, #1
 8022e46:	e099      	b.n	8022f7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8022e48:	687b      	ldr	r3, [r7, #4]
 8022e4a:	2200      	movs	r2, #0
 8022e4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8022e50:	687b      	ldr	r3, [r7, #4]
 8022e52:	2202      	movs	r2, #2
 8022e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8022e58:	687b      	ldr	r3, [r7, #4]
 8022e5a:	681b      	ldr	r3, [r3, #0]
 8022e5c:	681a      	ldr	r2, [r3, #0]
 8022e5e:	687b      	ldr	r3, [r7, #4]
 8022e60:	681b      	ldr	r3, [r3, #0]
 8022e62:	f022 0201 	bic.w	r2, r2, #1
 8022e66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8022e68:	e00f      	b.n	8022e8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8022e6a:	f7ff faab 	bl	80223c4 <HAL_GetTick>
 8022e6e:	4602      	mov	r2, r0
 8022e70:	693b      	ldr	r3, [r7, #16]
 8022e72:	1ad3      	subs	r3, r2, r3
 8022e74:	2b05      	cmp	r3, #5
 8022e76:	d908      	bls.n	8022e8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8022e78:	687b      	ldr	r3, [r7, #4]
 8022e7a:	2220      	movs	r2, #32
 8022e7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8022e7e:	687b      	ldr	r3, [r7, #4]
 8022e80:	2203      	movs	r2, #3
 8022e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8022e86:	2303      	movs	r3, #3
 8022e88:	e078      	b.n	8022f7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8022e8a:	687b      	ldr	r3, [r7, #4]
 8022e8c:	681b      	ldr	r3, [r3, #0]
 8022e8e:	681b      	ldr	r3, [r3, #0]
 8022e90:	f003 0301 	and.w	r3, r3, #1
 8022e94:	2b00      	cmp	r3, #0
 8022e96:	d1e8      	bne.n	8022e6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8022e98:	687b      	ldr	r3, [r7, #4]
 8022e9a:	681b      	ldr	r3, [r3, #0]
 8022e9c:	681b      	ldr	r3, [r3, #0]
 8022e9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8022ea0:	697a      	ldr	r2, [r7, #20]
 8022ea2:	4b38      	ldr	r3, [pc, #224]	; (8022f84 <HAL_DMA_Init+0x158>)
 8022ea4:	4013      	ands	r3, r2
 8022ea6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8022ea8:	687b      	ldr	r3, [r7, #4]
 8022eaa:	685a      	ldr	r2, [r3, #4]
 8022eac:	687b      	ldr	r3, [r7, #4]
 8022eae:	689b      	ldr	r3, [r3, #8]
 8022eb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8022eb2:	687b      	ldr	r3, [r7, #4]
 8022eb4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8022eb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8022eb8:	687b      	ldr	r3, [r7, #4]
 8022eba:	691b      	ldr	r3, [r3, #16]
 8022ebc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8022ebe:	687b      	ldr	r3, [r7, #4]
 8022ec0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8022ec2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8022ec4:	687b      	ldr	r3, [r7, #4]
 8022ec6:	699b      	ldr	r3, [r3, #24]
 8022ec8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8022eca:	687b      	ldr	r3, [r7, #4]
 8022ecc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8022ece:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8022ed0:	687b      	ldr	r3, [r7, #4]
 8022ed2:	6a1b      	ldr	r3, [r3, #32]
 8022ed4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8022ed6:	697a      	ldr	r2, [r7, #20]
 8022ed8:	4313      	orrs	r3, r2
 8022eda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8022edc:	687b      	ldr	r3, [r7, #4]
 8022ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022ee0:	2b04      	cmp	r3, #4
 8022ee2:	d107      	bne.n	8022ef4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8022ee4:	687b      	ldr	r3, [r7, #4]
 8022ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022ee8:	687b      	ldr	r3, [r7, #4]
 8022eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022eec:	4313      	orrs	r3, r2
 8022eee:	697a      	ldr	r2, [r7, #20]
 8022ef0:	4313      	orrs	r3, r2
 8022ef2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8022ef4:	687b      	ldr	r3, [r7, #4]
 8022ef6:	681b      	ldr	r3, [r3, #0]
 8022ef8:	697a      	ldr	r2, [r7, #20]
 8022efa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8022efc:	687b      	ldr	r3, [r7, #4]
 8022efe:	681b      	ldr	r3, [r3, #0]
 8022f00:	695b      	ldr	r3, [r3, #20]
 8022f02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8022f04:	697b      	ldr	r3, [r7, #20]
 8022f06:	f023 0307 	bic.w	r3, r3, #7
 8022f0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8022f0c:	687b      	ldr	r3, [r7, #4]
 8022f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022f10:	697a      	ldr	r2, [r7, #20]
 8022f12:	4313      	orrs	r3, r2
 8022f14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8022f16:	687b      	ldr	r3, [r7, #4]
 8022f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022f1a:	2b04      	cmp	r3, #4
 8022f1c:	d117      	bne.n	8022f4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8022f1e:	687b      	ldr	r3, [r7, #4]
 8022f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022f22:	697a      	ldr	r2, [r7, #20]
 8022f24:	4313      	orrs	r3, r2
 8022f26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8022f28:	687b      	ldr	r3, [r7, #4]
 8022f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022f2c:	2b00      	cmp	r3, #0
 8022f2e:	d00e      	beq.n	8022f4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8022f30:	6878      	ldr	r0, [r7, #4]
 8022f32:	f000 fa6f 	bl	8023414 <DMA_CheckFifoParam>
 8022f36:	4603      	mov	r3, r0
 8022f38:	2b00      	cmp	r3, #0
 8022f3a:	d008      	beq.n	8022f4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8022f3c:	687b      	ldr	r3, [r7, #4]
 8022f3e:	2240      	movs	r2, #64	; 0x40
 8022f40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8022f42:	687b      	ldr	r3, [r7, #4]
 8022f44:	2201      	movs	r2, #1
 8022f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8022f4a:	2301      	movs	r3, #1
 8022f4c:	e016      	b.n	8022f7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8022f4e:	687b      	ldr	r3, [r7, #4]
 8022f50:	681b      	ldr	r3, [r3, #0]
 8022f52:	697a      	ldr	r2, [r7, #20]
 8022f54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8022f56:	6878      	ldr	r0, [r7, #4]
 8022f58:	f000 fa26 	bl	80233a8 <DMA_CalcBaseAndBitshift>
 8022f5c:	4603      	mov	r3, r0
 8022f5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8022f60:	687b      	ldr	r3, [r7, #4]
 8022f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8022f64:	223f      	movs	r2, #63	; 0x3f
 8022f66:	409a      	lsls	r2, r3
 8022f68:	68fb      	ldr	r3, [r7, #12]
 8022f6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8022f6c:	687b      	ldr	r3, [r7, #4]
 8022f6e:	2200      	movs	r2, #0
 8022f70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8022f72:	687b      	ldr	r3, [r7, #4]
 8022f74:	2201      	movs	r2, #1
 8022f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8022f7a:	2300      	movs	r3, #0
}
 8022f7c:	4618      	mov	r0, r3
 8022f7e:	3718      	adds	r7, #24
 8022f80:	46bd      	mov	sp, r7
 8022f82:	bd80      	pop	{r7, pc}
 8022f84:	f010803f 	.word	0xf010803f

08022f88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8022f88:	b580      	push	{r7, lr}
 8022f8a:	b086      	sub	sp, #24
 8022f8c:	af00      	add	r7, sp, #0
 8022f8e:	60f8      	str	r0, [r7, #12]
 8022f90:	60b9      	str	r1, [r7, #8]
 8022f92:	607a      	str	r2, [r7, #4]
 8022f94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8022f96:	2300      	movs	r3, #0
 8022f98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8022f9a:	68fb      	ldr	r3, [r7, #12]
 8022f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8022f9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8022fa0:	68fb      	ldr	r3, [r7, #12]
 8022fa2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8022fa6:	2b01      	cmp	r3, #1
 8022fa8:	d101      	bne.n	8022fae <HAL_DMA_Start_IT+0x26>
 8022faa:	2302      	movs	r3, #2
 8022fac:	e040      	b.n	8023030 <HAL_DMA_Start_IT+0xa8>
 8022fae:	68fb      	ldr	r3, [r7, #12]
 8022fb0:	2201      	movs	r2, #1
 8022fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8022fb6:	68fb      	ldr	r3, [r7, #12]
 8022fb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8022fbc:	b2db      	uxtb	r3, r3
 8022fbe:	2b01      	cmp	r3, #1
 8022fc0:	d12f      	bne.n	8023022 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8022fc2:	68fb      	ldr	r3, [r7, #12]
 8022fc4:	2202      	movs	r2, #2
 8022fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8022fca:	68fb      	ldr	r3, [r7, #12]
 8022fcc:	2200      	movs	r2, #0
 8022fce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8022fd0:	683b      	ldr	r3, [r7, #0]
 8022fd2:	687a      	ldr	r2, [r7, #4]
 8022fd4:	68b9      	ldr	r1, [r7, #8]
 8022fd6:	68f8      	ldr	r0, [r7, #12]
 8022fd8:	f000 f9b8 	bl	802334c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8022fdc:	68fb      	ldr	r3, [r7, #12]
 8022fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8022fe0:	223f      	movs	r2, #63	; 0x3f
 8022fe2:	409a      	lsls	r2, r3
 8022fe4:	693b      	ldr	r3, [r7, #16]
 8022fe6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8022fe8:	68fb      	ldr	r3, [r7, #12]
 8022fea:	681b      	ldr	r3, [r3, #0]
 8022fec:	681a      	ldr	r2, [r3, #0]
 8022fee:	68fb      	ldr	r3, [r7, #12]
 8022ff0:	681b      	ldr	r3, [r3, #0]
 8022ff2:	f042 0216 	orr.w	r2, r2, #22
 8022ff6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8022ff8:	68fb      	ldr	r3, [r7, #12]
 8022ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022ffc:	2b00      	cmp	r3, #0
 8022ffe:	d007      	beq.n	8023010 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8023000:	68fb      	ldr	r3, [r7, #12]
 8023002:	681b      	ldr	r3, [r3, #0]
 8023004:	681a      	ldr	r2, [r3, #0]
 8023006:	68fb      	ldr	r3, [r7, #12]
 8023008:	681b      	ldr	r3, [r3, #0]
 802300a:	f042 0208 	orr.w	r2, r2, #8
 802300e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8023010:	68fb      	ldr	r3, [r7, #12]
 8023012:	681b      	ldr	r3, [r3, #0]
 8023014:	681a      	ldr	r2, [r3, #0]
 8023016:	68fb      	ldr	r3, [r7, #12]
 8023018:	681b      	ldr	r3, [r3, #0]
 802301a:	f042 0201 	orr.w	r2, r2, #1
 802301e:	601a      	str	r2, [r3, #0]
 8023020:	e005      	b.n	802302e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8023022:	68fb      	ldr	r3, [r7, #12]
 8023024:	2200      	movs	r2, #0
 8023026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 802302a:	2302      	movs	r3, #2
 802302c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 802302e:	7dfb      	ldrb	r3, [r7, #23]
}
 8023030:	4618      	mov	r0, r3
 8023032:	3718      	adds	r7, #24
 8023034:	46bd      	mov	sp, r7
 8023036:	bd80      	pop	{r7, pc}

08023038 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8023038:	b580      	push	{r7, lr}
 802303a:	b086      	sub	sp, #24
 802303c:	af00      	add	r7, sp, #0
 802303e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8023040:	2300      	movs	r3, #0
 8023042:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8023044:	4b92      	ldr	r3, [pc, #584]	; (8023290 <HAL_DMA_IRQHandler+0x258>)
 8023046:	681b      	ldr	r3, [r3, #0]
 8023048:	4a92      	ldr	r2, [pc, #584]	; (8023294 <HAL_DMA_IRQHandler+0x25c>)
 802304a:	fba2 2303 	umull	r2, r3, r2, r3
 802304e:	0a9b      	lsrs	r3, r3, #10
 8023050:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8023052:	687b      	ldr	r3, [r7, #4]
 8023054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8023056:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8023058:	693b      	ldr	r3, [r7, #16]
 802305a:	681b      	ldr	r3, [r3, #0]
 802305c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 802305e:	687b      	ldr	r3, [r7, #4]
 8023060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023062:	2208      	movs	r2, #8
 8023064:	409a      	lsls	r2, r3
 8023066:	68fb      	ldr	r3, [r7, #12]
 8023068:	4013      	ands	r3, r2
 802306a:	2b00      	cmp	r3, #0
 802306c:	d01a      	beq.n	80230a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 802306e:	687b      	ldr	r3, [r7, #4]
 8023070:	681b      	ldr	r3, [r3, #0]
 8023072:	681b      	ldr	r3, [r3, #0]
 8023074:	f003 0304 	and.w	r3, r3, #4
 8023078:	2b00      	cmp	r3, #0
 802307a:	d013      	beq.n	80230a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 802307c:	687b      	ldr	r3, [r7, #4]
 802307e:	681b      	ldr	r3, [r3, #0]
 8023080:	681a      	ldr	r2, [r3, #0]
 8023082:	687b      	ldr	r3, [r7, #4]
 8023084:	681b      	ldr	r3, [r3, #0]
 8023086:	f022 0204 	bic.w	r2, r2, #4
 802308a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 802308c:	687b      	ldr	r3, [r7, #4]
 802308e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023090:	2208      	movs	r2, #8
 8023092:	409a      	lsls	r2, r3
 8023094:	693b      	ldr	r3, [r7, #16]
 8023096:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8023098:	687b      	ldr	r3, [r7, #4]
 802309a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802309c:	f043 0201 	orr.w	r2, r3, #1
 80230a0:	687b      	ldr	r3, [r7, #4]
 80230a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80230a4:	687b      	ldr	r3, [r7, #4]
 80230a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80230a8:	2201      	movs	r2, #1
 80230aa:	409a      	lsls	r2, r3
 80230ac:	68fb      	ldr	r3, [r7, #12]
 80230ae:	4013      	ands	r3, r2
 80230b0:	2b00      	cmp	r3, #0
 80230b2:	d012      	beq.n	80230da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80230b4:	687b      	ldr	r3, [r7, #4]
 80230b6:	681b      	ldr	r3, [r3, #0]
 80230b8:	695b      	ldr	r3, [r3, #20]
 80230ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80230be:	2b00      	cmp	r3, #0
 80230c0:	d00b      	beq.n	80230da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80230c2:	687b      	ldr	r3, [r7, #4]
 80230c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80230c6:	2201      	movs	r2, #1
 80230c8:	409a      	lsls	r2, r3
 80230ca:	693b      	ldr	r3, [r7, #16]
 80230cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80230ce:	687b      	ldr	r3, [r7, #4]
 80230d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80230d2:	f043 0202 	orr.w	r2, r3, #2
 80230d6:	687b      	ldr	r3, [r7, #4]
 80230d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80230da:	687b      	ldr	r3, [r7, #4]
 80230dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80230de:	2204      	movs	r2, #4
 80230e0:	409a      	lsls	r2, r3
 80230e2:	68fb      	ldr	r3, [r7, #12]
 80230e4:	4013      	ands	r3, r2
 80230e6:	2b00      	cmp	r3, #0
 80230e8:	d012      	beq.n	8023110 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80230ea:	687b      	ldr	r3, [r7, #4]
 80230ec:	681b      	ldr	r3, [r3, #0]
 80230ee:	681b      	ldr	r3, [r3, #0]
 80230f0:	f003 0302 	and.w	r3, r3, #2
 80230f4:	2b00      	cmp	r3, #0
 80230f6:	d00b      	beq.n	8023110 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80230f8:	687b      	ldr	r3, [r7, #4]
 80230fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80230fc:	2204      	movs	r2, #4
 80230fe:	409a      	lsls	r2, r3
 8023100:	693b      	ldr	r3, [r7, #16]
 8023102:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8023104:	687b      	ldr	r3, [r7, #4]
 8023106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023108:	f043 0204 	orr.w	r2, r3, #4
 802310c:	687b      	ldr	r3, [r7, #4]
 802310e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8023110:	687b      	ldr	r3, [r7, #4]
 8023112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023114:	2210      	movs	r2, #16
 8023116:	409a      	lsls	r2, r3
 8023118:	68fb      	ldr	r3, [r7, #12]
 802311a:	4013      	ands	r3, r2
 802311c:	2b00      	cmp	r3, #0
 802311e:	d043      	beq.n	80231a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8023120:	687b      	ldr	r3, [r7, #4]
 8023122:	681b      	ldr	r3, [r3, #0]
 8023124:	681b      	ldr	r3, [r3, #0]
 8023126:	f003 0308 	and.w	r3, r3, #8
 802312a:	2b00      	cmp	r3, #0
 802312c:	d03c      	beq.n	80231a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 802312e:	687b      	ldr	r3, [r7, #4]
 8023130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023132:	2210      	movs	r2, #16
 8023134:	409a      	lsls	r2, r3
 8023136:	693b      	ldr	r3, [r7, #16]
 8023138:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 802313a:	687b      	ldr	r3, [r7, #4]
 802313c:	681b      	ldr	r3, [r3, #0]
 802313e:	681b      	ldr	r3, [r3, #0]
 8023140:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8023144:	2b00      	cmp	r3, #0
 8023146:	d018      	beq.n	802317a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8023148:	687b      	ldr	r3, [r7, #4]
 802314a:	681b      	ldr	r3, [r3, #0]
 802314c:	681b      	ldr	r3, [r3, #0]
 802314e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8023152:	2b00      	cmp	r3, #0
 8023154:	d108      	bne.n	8023168 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8023156:	687b      	ldr	r3, [r7, #4]
 8023158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802315a:	2b00      	cmp	r3, #0
 802315c:	d024      	beq.n	80231a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 802315e:	687b      	ldr	r3, [r7, #4]
 8023160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023162:	6878      	ldr	r0, [r7, #4]
 8023164:	4798      	blx	r3
 8023166:	e01f      	b.n	80231a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8023168:	687b      	ldr	r3, [r7, #4]
 802316a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802316c:	2b00      	cmp	r3, #0
 802316e:	d01b      	beq.n	80231a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8023170:	687b      	ldr	r3, [r7, #4]
 8023172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8023174:	6878      	ldr	r0, [r7, #4]
 8023176:	4798      	blx	r3
 8023178:	e016      	b.n	80231a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 802317a:	687b      	ldr	r3, [r7, #4]
 802317c:	681b      	ldr	r3, [r3, #0]
 802317e:	681b      	ldr	r3, [r3, #0]
 8023180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023184:	2b00      	cmp	r3, #0
 8023186:	d107      	bne.n	8023198 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8023188:	687b      	ldr	r3, [r7, #4]
 802318a:	681b      	ldr	r3, [r3, #0]
 802318c:	681a      	ldr	r2, [r3, #0]
 802318e:	687b      	ldr	r3, [r7, #4]
 8023190:	681b      	ldr	r3, [r3, #0]
 8023192:	f022 0208 	bic.w	r2, r2, #8
 8023196:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8023198:	687b      	ldr	r3, [r7, #4]
 802319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802319c:	2b00      	cmp	r3, #0
 802319e:	d003      	beq.n	80231a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80231a0:	687b      	ldr	r3, [r7, #4]
 80231a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80231a4:	6878      	ldr	r0, [r7, #4]
 80231a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80231a8:	687b      	ldr	r3, [r7, #4]
 80231aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80231ac:	2220      	movs	r2, #32
 80231ae:	409a      	lsls	r2, r3
 80231b0:	68fb      	ldr	r3, [r7, #12]
 80231b2:	4013      	ands	r3, r2
 80231b4:	2b00      	cmp	r3, #0
 80231b6:	f000 808e 	beq.w	80232d6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80231ba:	687b      	ldr	r3, [r7, #4]
 80231bc:	681b      	ldr	r3, [r3, #0]
 80231be:	681b      	ldr	r3, [r3, #0]
 80231c0:	f003 0310 	and.w	r3, r3, #16
 80231c4:	2b00      	cmp	r3, #0
 80231c6:	f000 8086 	beq.w	80232d6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80231ca:	687b      	ldr	r3, [r7, #4]
 80231cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80231ce:	2220      	movs	r2, #32
 80231d0:	409a      	lsls	r2, r3
 80231d2:	693b      	ldr	r3, [r7, #16]
 80231d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80231d6:	687b      	ldr	r3, [r7, #4]
 80231d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80231dc:	b2db      	uxtb	r3, r3
 80231de:	2b05      	cmp	r3, #5
 80231e0:	d136      	bne.n	8023250 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80231e2:	687b      	ldr	r3, [r7, #4]
 80231e4:	681b      	ldr	r3, [r3, #0]
 80231e6:	681a      	ldr	r2, [r3, #0]
 80231e8:	687b      	ldr	r3, [r7, #4]
 80231ea:	681b      	ldr	r3, [r3, #0]
 80231ec:	f022 0216 	bic.w	r2, r2, #22
 80231f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80231f2:	687b      	ldr	r3, [r7, #4]
 80231f4:	681b      	ldr	r3, [r3, #0]
 80231f6:	695a      	ldr	r2, [r3, #20]
 80231f8:	687b      	ldr	r3, [r7, #4]
 80231fa:	681b      	ldr	r3, [r3, #0]
 80231fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8023200:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8023202:	687b      	ldr	r3, [r7, #4]
 8023204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023206:	2b00      	cmp	r3, #0
 8023208:	d103      	bne.n	8023212 <HAL_DMA_IRQHandler+0x1da>
 802320a:	687b      	ldr	r3, [r7, #4]
 802320c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802320e:	2b00      	cmp	r3, #0
 8023210:	d007      	beq.n	8023222 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8023212:	687b      	ldr	r3, [r7, #4]
 8023214:	681b      	ldr	r3, [r3, #0]
 8023216:	681a      	ldr	r2, [r3, #0]
 8023218:	687b      	ldr	r3, [r7, #4]
 802321a:	681b      	ldr	r3, [r3, #0]
 802321c:	f022 0208 	bic.w	r2, r2, #8
 8023220:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023222:	687b      	ldr	r3, [r7, #4]
 8023224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023226:	223f      	movs	r2, #63	; 0x3f
 8023228:	409a      	lsls	r2, r3
 802322a:	693b      	ldr	r3, [r7, #16]
 802322c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 802322e:	687b      	ldr	r3, [r7, #4]
 8023230:	2200      	movs	r2, #0
 8023232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8023236:	687b      	ldr	r3, [r7, #4]
 8023238:	2201      	movs	r2, #1
 802323a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 802323e:	687b      	ldr	r3, [r7, #4]
 8023240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8023242:	2b00      	cmp	r3, #0
 8023244:	d07d      	beq.n	8023342 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8023246:	687b      	ldr	r3, [r7, #4]
 8023248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802324a:	6878      	ldr	r0, [r7, #4]
 802324c:	4798      	blx	r3
        }
        return;
 802324e:	e078      	b.n	8023342 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8023250:	687b      	ldr	r3, [r7, #4]
 8023252:	681b      	ldr	r3, [r3, #0]
 8023254:	681b      	ldr	r3, [r3, #0]
 8023256:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802325a:	2b00      	cmp	r3, #0
 802325c:	d01c      	beq.n	8023298 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 802325e:	687b      	ldr	r3, [r7, #4]
 8023260:	681b      	ldr	r3, [r3, #0]
 8023262:	681b      	ldr	r3, [r3, #0]
 8023264:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8023268:	2b00      	cmp	r3, #0
 802326a:	d108      	bne.n	802327e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 802326c:	687b      	ldr	r3, [r7, #4]
 802326e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023270:	2b00      	cmp	r3, #0
 8023272:	d030      	beq.n	80232d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8023274:	687b      	ldr	r3, [r7, #4]
 8023276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023278:	6878      	ldr	r0, [r7, #4]
 802327a:	4798      	blx	r3
 802327c:	e02b      	b.n	80232d6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 802327e:	687b      	ldr	r3, [r7, #4]
 8023280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023282:	2b00      	cmp	r3, #0
 8023284:	d027      	beq.n	80232d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8023286:	687b      	ldr	r3, [r7, #4]
 8023288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802328a:	6878      	ldr	r0, [r7, #4]
 802328c:	4798      	blx	r3
 802328e:	e022      	b.n	80232d6 <HAL_DMA_IRQHandler+0x29e>
 8023290:	20000000 	.word	0x20000000
 8023294:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8023298:	687b      	ldr	r3, [r7, #4]
 802329a:	681b      	ldr	r3, [r3, #0]
 802329c:	681b      	ldr	r3, [r3, #0]
 802329e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80232a2:	2b00      	cmp	r3, #0
 80232a4:	d10f      	bne.n	80232c6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80232a6:	687b      	ldr	r3, [r7, #4]
 80232a8:	681b      	ldr	r3, [r3, #0]
 80232aa:	681a      	ldr	r2, [r3, #0]
 80232ac:	687b      	ldr	r3, [r7, #4]
 80232ae:	681b      	ldr	r3, [r3, #0]
 80232b0:	f022 0210 	bic.w	r2, r2, #16
 80232b4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80232b6:	687b      	ldr	r3, [r7, #4]
 80232b8:	2200      	movs	r2, #0
 80232ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80232be:	687b      	ldr	r3, [r7, #4]
 80232c0:	2201      	movs	r2, #1
 80232c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80232c6:	687b      	ldr	r3, [r7, #4]
 80232c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80232ca:	2b00      	cmp	r3, #0
 80232cc:	d003      	beq.n	80232d6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80232ce:	687b      	ldr	r3, [r7, #4]
 80232d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80232d2:	6878      	ldr	r0, [r7, #4]
 80232d4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80232d6:	687b      	ldr	r3, [r7, #4]
 80232d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80232da:	2b00      	cmp	r3, #0
 80232dc:	d032      	beq.n	8023344 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80232de:	687b      	ldr	r3, [r7, #4]
 80232e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80232e2:	f003 0301 	and.w	r3, r3, #1
 80232e6:	2b00      	cmp	r3, #0
 80232e8:	d022      	beq.n	8023330 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80232ea:	687b      	ldr	r3, [r7, #4]
 80232ec:	2205      	movs	r2, #5
 80232ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80232f2:	687b      	ldr	r3, [r7, #4]
 80232f4:	681b      	ldr	r3, [r3, #0]
 80232f6:	681a      	ldr	r2, [r3, #0]
 80232f8:	687b      	ldr	r3, [r7, #4]
 80232fa:	681b      	ldr	r3, [r3, #0]
 80232fc:	f022 0201 	bic.w	r2, r2, #1
 8023300:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8023302:	68bb      	ldr	r3, [r7, #8]
 8023304:	3301      	adds	r3, #1
 8023306:	60bb      	str	r3, [r7, #8]
 8023308:	697a      	ldr	r2, [r7, #20]
 802330a:	429a      	cmp	r2, r3
 802330c:	d307      	bcc.n	802331e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 802330e:	687b      	ldr	r3, [r7, #4]
 8023310:	681b      	ldr	r3, [r3, #0]
 8023312:	681b      	ldr	r3, [r3, #0]
 8023314:	f003 0301 	and.w	r3, r3, #1
 8023318:	2b00      	cmp	r3, #0
 802331a:	d1f2      	bne.n	8023302 <HAL_DMA_IRQHandler+0x2ca>
 802331c:	e000      	b.n	8023320 <HAL_DMA_IRQHandler+0x2e8>
          break;
 802331e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8023320:	687b      	ldr	r3, [r7, #4]
 8023322:	2200      	movs	r2, #0
 8023324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8023328:	687b      	ldr	r3, [r7, #4]
 802332a:	2201      	movs	r2, #1
 802332c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8023330:	687b      	ldr	r3, [r7, #4]
 8023332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023334:	2b00      	cmp	r3, #0
 8023336:	d005      	beq.n	8023344 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8023338:	687b      	ldr	r3, [r7, #4]
 802333a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802333c:	6878      	ldr	r0, [r7, #4]
 802333e:	4798      	blx	r3
 8023340:	e000      	b.n	8023344 <HAL_DMA_IRQHandler+0x30c>
        return;
 8023342:	bf00      	nop
    }
  }
}
 8023344:	3718      	adds	r7, #24
 8023346:	46bd      	mov	sp, r7
 8023348:	bd80      	pop	{r7, pc}
 802334a:	bf00      	nop

0802334c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 802334c:	b480      	push	{r7}
 802334e:	b085      	sub	sp, #20
 8023350:	af00      	add	r7, sp, #0
 8023352:	60f8      	str	r0, [r7, #12]
 8023354:	60b9      	str	r1, [r7, #8]
 8023356:	607a      	str	r2, [r7, #4]
 8023358:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 802335a:	68fb      	ldr	r3, [r7, #12]
 802335c:	681b      	ldr	r3, [r3, #0]
 802335e:	681a      	ldr	r2, [r3, #0]
 8023360:	68fb      	ldr	r3, [r7, #12]
 8023362:	681b      	ldr	r3, [r3, #0]
 8023364:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8023368:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 802336a:	68fb      	ldr	r3, [r7, #12]
 802336c:	681b      	ldr	r3, [r3, #0]
 802336e:	683a      	ldr	r2, [r7, #0]
 8023370:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8023372:	68fb      	ldr	r3, [r7, #12]
 8023374:	689b      	ldr	r3, [r3, #8]
 8023376:	2b40      	cmp	r3, #64	; 0x40
 8023378:	d108      	bne.n	802338c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 802337a:	68fb      	ldr	r3, [r7, #12]
 802337c:	681b      	ldr	r3, [r3, #0]
 802337e:	687a      	ldr	r2, [r7, #4]
 8023380:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8023382:	68fb      	ldr	r3, [r7, #12]
 8023384:	681b      	ldr	r3, [r3, #0]
 8023386:	68ba      	ldr	r2, [r7, #8]
 8023388:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 802338a:	e007      	b.n	802339c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 802338c:	68fb      	ldr	r3, [r7, #12]
 802338e:	681b      	ldr	r3, [r3, #0]
 8023390:	68ba      	ldr	r2, [r7, #8]
 8023392:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8023394:	68fb      	ldr	r3, [r7, #12]
 8023396:	681b      	ldr	r3, [r3, #0]
 8023398:	687a      	ldr	r2, [r7, #4]
 802339a:	60da      	str	r2, [r3, #12]
}
 802339c:	bf00      	nop
 802339e:	3714      	adds	r7, #20
 80233a0:	46bd      	mov	sp, r7
 80233a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233a6:	4770      	bx	lr

080233a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80233a8:	b480      	push	{r7}
 80233aa:	b085      	sub	sp, #20
 80233ac:	af00      	add	r7, sp, #0
 80233ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80233b0:	687b      	ldr	r3, [r7, #4]
 80233b2:	681b      	ldr	r3, [r3, #0]
 80233b4:	b2db      	uxtb	r3, r3
 80233b6:	3b10      	subs	r3, #16
 80233b8:	4a14      	ldr	r2, [pc, #80]	; (802340c <DMA_CalcBaseAndBitshift+0x64>)
 80233ba:	fba2 2303 	umull	r2, r3, r2, r3
 80233be:	091b      	lsrs	r3, r3, #4
 80233c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80233c2:	4a13      	ldr	r2, [pc, #76]	; (8023410 <DMA_CalcBaseAndBitshift+0x68>)
 80233c4:	68fb      	ldr	r3, [r7, #12]
 80233c6:	4413      	add	r3, r2
 80233c8:	781b      	ldrb	r3, [r3, #0]
 80233ca:	461a      	mov	r2, r3
 80233cc:	687b      	ldr	r3, [r7, #4]
 80233ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80233d0:	68fb      	ldr	r3, [r7, #12]
 80233d2:	2b03      	cmp	r3, #3
 80233d4:	d909      	bls.n	80233ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80233d6:	687b      	ldr	r3, [r7, #4]
 80233d8:	681b      	ldr	r3, [r3, #0]
 80233da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80233de:	f023 0303 	bic.w	r3, r3, #3
 80233e2:	1d1a      	adds	r2, r3, #4
 80233e4:	687b      	ldr	r3, [r7, #4]
 80233e6:	659a      	str	r2, [r3, #88]	; 0x58
 80233e8:	e007      	b.n	80233fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80233ea:	687b      	ldr	r3, [r7, #4]
 80233ec:	681b      	ldr	r3, [r3, #0]
 80233ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80233f2:	f023 0303 	bic.w	r3, r3, #3
 80233f6:	687a      	ldr	r2, [r7, #4]
 80233f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80233fa:	687b      	ldr	r3, [r7, #4]
 80233fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80233fe:	4618      	mov	r0, r3
 8023400:	3714      	adds	r7, #20
 8023402:	46bd      	mov	sp, r7
 8023404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023408:	4770      	bx	lr
 802340a:	bf00      	nop
 802340c:	aaaaaaab 	.word	0xaaaaaaab
 8023410:	08025454 	.word	0x08025454

08023414 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8023414:	b480      	push	{r7}
 8023416:	b085      	sub	sp, #20
 8023418:	af00      	add	r7, sp, #0
 802341a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 802341c:	2300      	movs	r3, #0
 802341e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8023420:	687b      	ldr	r3, [r7, #4]
 8023422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023424:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8023426:	687b      	ldr	r3, [r7, #4]
 8023428:	699b      	ldr	r3, [r3, #24]
 802342a:	2b00      	cmp	r3, #0
 802342c:	d11f      	bne.n	802346e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 802342e:	68bb      	ldr	r3, [r7, #8]
 8023430:	2b03      	cmp	r3, #3
 8023432:	d855      	bhi.n	80234e0 <DMA_CheckFifoParam+0xcc>
 8023434:	a201      	add	r2, pc, #4	; (adr r2, 802343c <DMA_CheckFifoParam+0x28>)
 8023436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802343a:	bf00      	nop
 802343c:	0802344d 	.word	0x0802344d
 8023440:	0802345f 	.word	0x0802345f
 8023444:	0802344d 	.word	0x0802344d
 8023448:	080234e1 	.word	0x080234e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802344c:	687b      	ldr	r3, [r7, #4]
 802344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023450:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023454:	2b00      	cmp	r3, #0
 8023456:	d045      	beq.n	80234e4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8023458:	2301      	movs	r3, #1
 802345a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 802345c:	e042      	b.n	80234e4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 802345e:	687b      	ldr	r3, [r7, #4]
 8023460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023462:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8023466:	d13f      	bne.n	80234e8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8023468:	2301      	movs	r3, #1
 802346a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 802346c:	e03c      	b.n	80234e8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 802346e:	687b      	ldr	r3, [r7, #4]
 8023470:	699b      	ldr	r3, [r3, #24]
 8023472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8023476:	d121      	bne.n	80234bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8023478:	68bb      	ldr	r3, [r7, #8]
 802347a:	2b03      	cmp	r3, #3
 802347c:	d836      	bhi.n	80234ec <DMA_CheckFifoParam+0xd8>
 802347e:	a201      	add	r2, pc, #4	; (adr r2, 8023484 <DMA_CheckFifoParam+0x70>)
 8023480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023484:	08023495 	.word	0x08023495
 8023488:	0802349b 	.word	0x0802349b
 802348c:	08023495 	.word	0x08023495
 8023490:	080234ad 	.word	0x080234ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8023494:	2301      	movs	r3, #1
 8023496:	73fb      	strb	r3, [r7, #15]
      break;
 8023498:	e02f      	b.n	80234fa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 802349a:	687b      	ldr	r3, [r7, #4]
 802349c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802349e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80234a2:	2b00      	cmp	r3, #0
 80234a4:	d024      	beq.n	80234f0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80234a6:	2301      	movs	r3, #1
 80234a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80234aa:	e021      	b.n	80234f0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80234ac:	687b      	ldr	r3, [r7, #4]
 80234ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80234b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80234b4:	d11e      	bne.n	80234f4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80234b6:	2301      	movs	r3, #1
 80234b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80234ba:	e01b      	b.n	80234f4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80234bc:	68bb      	ldr	r3, [r7, #8]
 80234be:	2b02      	cmp	r3, #2
 80234c0:	d902      	bls.n	80234c8 <DMA_CheckFifoParam+0xb4>
 80234c2:	2b03      	cmp	r3, #3
 80234c4:	d003      	beq.n	80234ce <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80234c6:	e018      	b.n	80234fa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80234c8:	2301      	movs	r3, #1
 80234ca:	73fb      	strb	r3, [r7, #15]
      break;
 80234cc:	e015      	b.n	80234fa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80234ce:	687b      	ldr	r3, [r7, #4]
 80234d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80234d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80234d6:	2b00      	cmp	r3, #0
 80234d8:	d00e      	beq.n	80234f8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80234da:	2301      	movs	r3, #1
 80234dc:	73fb      	strb	r3, [r7, #15]
      break;
 80234de:	e00b      	b.n	80234f8 <DMA_CheckFifoParam+0xe4>
      break;
 80234e0:	bf00      	nop
 80234e2:	e00a      	b.n	80234fa <DMA_CheckFifoParam+0xe6>
      break;
 80234e4:	bf00      	nop
 80234e6:	e008      	b.n	80234fa <DMA_CheckFifoParam+0xe6>
      break;
 80234e8:	bf00      	nop
 80234ea:	e006      	b.n	80234fa <DMA_CheckFifoParam+0xe6>
      break;
 80234ec:	bf00      	nop
 80234ee:	e004      	b.n	80234fa <DMA_CheckFifoParam+0xe6>
      break;
 80234f0:	bf00      	nop
 80234f2:	e002      	b.n	80234fa <DMA_CheckFifoParam+0xe6>
      break;   
 80234f4:	bf00      	nop
 80234f6:	e000      	b.n	80234fa <DMA_CheckFifoParam+0xe6>
      break;
 80234f8:	bf00      	nop
    }
  } 
  
  return status; 
 80234fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80234fc:	4618      	mov	r0, r3
 80234fe:	3714      	adds	r7, #20
 8023500:	46bd      	mov	sp, r7
 8023502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023506:	4770      	bx	lr

08023508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8023508:	b480      	push	{r7}
 802350a:	b089      	sub	sp, #36	; 0x24
 802350c:	af00      	add	r7, sp, #0
 802350e:	6078      	str	r0, [r7, #4]
 8023510:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8023512:	2300      	movs	r3, #0
 8023514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8023516:	2300      	movs	r3, #0
 8023518:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 802351a:	2300      	movs	r3, #0
 802351c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 802351e:	2300      	movs	r3, #0
 8023520:	61fb      	str	r3, [r7, #28]
 8023522:	e16b      	b.n	80237fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8023524:	2201      	movs	r2, #1
 8023526:	69fb      	ldr	r3, [r7, #28]
 8023528:	fa02 f303 	lsl.w	r3, r2, r3
 802352c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 802352e:	683b      	ldr	r3, [r7, #0]
 8023530:	681b      	ldr	r3, [r3, #0]
 8023532:	697a      	ldr	r2, [r7, #20]
 8023534:	4013      	ands	r3, r2
 8023536:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8023538:	693a      	ldr	r2, [r7, #16]
 802353a:	697b      	ldr	r3, [r7, #20]
 802353c:	429a      	cmp	r2, r3
 802353e:	f040 815a 	bne.w	80237f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8023542:	683b      	ldr	r3, [r7, #0]
 8023544:	685b      	ldr	r3, [r3, #4]
 8023546:	2b01      	cmp	r3, #1
 8023548:	d00b      	beq.n	8023562 <HAL_GPIO_Init+0x5a>
 802354a:	683b      	ldr	r3, [r7, #0]
 802354c:	685b      	ldr	r3, [r3, #4]
 802354e:	2b02      	cmp	r3, #2
 8023550:	d007      	beq.n	8023562 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8023552:	683b      	ldr	r3, [r7, #0]
 8023554:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8023556:	2b11      	cmp	r3, #17
 8023558:	d003      	beq.n	8023562 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 802355a:	683b      	ldr	r3, [r7, #0]
 802355c:	685b      	ldr	r3, [r3, #4]
 802355e:	2b12      	cmp	r3, #18
 8023560:	d130      	bne.n	80235c4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8023562:	687b      	ldr	r3, [r7, #4]
 8023564:	689b      	ldr	r3, [r3, #8]
 8023566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8023568:	69fb      	ldr	r3, [r7, #28]
 802356a:	005b      	lsls	r3, r3, #1
 802356c:	2203      	movs	r2, #3
 802356e:	fa02 f303 	lsl.w	r3, r2, r3
 8023572:	43db      	mvns	r3, r3
 8023574:	69ba      	ldr	r2, [r7, #24]
 8023576:	4013      	ands	r3, r2
 8023578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 802357a:	683b      	ldr	r3, [r7, #0]
 802357c:	68da      	ldr	r2, [r3, #12]
 802357e:	69fb      	ldr	r3, [r7, #28]
 8023580:	005b      	lsls	r3, r3, #1
 8023582:	fa02 f303 	lsl.w	r3, r2, r3
 8023586:	69ba      	ldr	r2, [r7, #24]
 8023588:	4313      	orrs	r3, r2
 802358a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 802358c:	687b      	ldr	r3, [r7, #4]
 802358e:	69ba      	ldr	r2, [r7, #24]
 8023590:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8023592:	687b      	ldr	r3, [r7, #4]
 8023594:	685b      	ldr	r3, [r3, #4]
 8023596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8023598:	2201      	movs	r2, #1
 802359a:	69fb      	ldr	r3, [r7, #28]
 802359c:	fa02 f303 	lsl.w	r3, r2, r3
 80235a0:	43db      	mvns	r3, r3
 80235a2:	69ba      	ldr	r2, [r7, #24]
 80235a4:	4013      	ands	r3, r2
 80235a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80235a8:	683b      	ldr	r3, [r7, #0]
 80235aa:	685b      	ldr	r3, [r3, #4]
 80235ac:	091b      	lsrs	r3, r3, #4
 80235ae:	f003 0201 	and.w	r2, r3, #1
 80235b2:	69fb      	ldr	r3, [r7, #28]
 80235b4:	fa02 f303 	lsl.w	r3, r2, r3
 80235b8:	69ba      	ldr	r2, [r7, #24]
 80235ba:	4313      	orrs	r3, r2
 80235bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80235be:	687b      	ldr	r3, [r7, #4]
 80235c0:	69ba      	ldr	r2, [r7, #24]
 80235c2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80235c4:	687b      	ldr	r3, [r7, #4]
 80235c6:	68db      	ldr	r3, [r3, #12]
 80235c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80235ca:	69fb      	ldr	r3, [r7, #28]
 80235cc:	005b      	lsls	r3, r3, #1
 80235ce:	2203      	movs	r2, #3
 80235d0:	fa02 f303 	lsl.w	r3, r2, r3
 80235d4:	43db      	mvns	r3, r3
 80235d6:	69ba      	ldr	r2, [r7, #24]
 80235d8:	4013      	ands	r3, r2
 80235da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80235dc:	683b      	ldr	r3, [r7, #0]
 80235de:	689a      	ldr	r2, [r3, #8]
 80235e0:	69fb      	ldr	r3, [r7, #28]
 80235e2:	005b      	lsls	r3, r3, #1
 80235e4:	fa02 f303 	lsl.w	r3, r2, r3
 80235e8:	69ba      	ldr	r2, [r7, #24]
 80235ea:	4313      	orrs	r3, r2
 80235ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80235ee:	687b      	ldr	r3, [r7, #4]
 80235f0:	69ba      	ldr	r2, [r7, #24]
 80235f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80235f4:	683b      	ldr	r3, [r7, #0]
 80235f6:	685b      	ldr	r3, [r3, #4]
 80235f8:	2b02      	cmp	r3, #2
 80235fa:	d003      	beq.n	8023604 <HAL_GPIO_Init+0xfc>
 80235fc:	683b      	ldr	r3, [r7, #0]
 80235fe:	685b      	ldr	r3, [r3, #4]
 8023600:	2b12      	cmp	r3, #18
 8023602:	d123      	bne.n	802364c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8023604:	69fb      	ldr	r3, [r7, #28]
 8023606:	08da      	lsrs	r2, r3, #3
 8023608:	687b      	ldr	r3, [r7, #4]
 802360a:	3208      	adds	r2, #8
 802360c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023610:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8023612:	69fb      	ldr	r3, [r7, #28]
 8023614:	f003 0307 	and.w	r3, r3, #7
 8023618:	009b      	lsls	r3, r3, #2
 802361a:	220f      	movs	r2, #15
 802361c:	fa02 f303 	lsl.w	r3, r2, r3
 8023620:	43db      	mvns	r3, r3
 8023622:	69ba      	ldr	r2, [r7, #24]
 8023624:	4013      	ands	r3, r2
 8023626:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8023628:	683b      	ldr	r3, [r7, #0]
 802362a:	691a      	ldr	r2, [r3, #16]
 802362c:	69fb      	ldr	r3, [r7, #28]
 802362e:	f003 0307 	and.w	r3, r3, #7
 8023632:	009b      	lsls	r3, r3, #2
 8023634:	fa02 f303 	lsl.w	r3, r2, r3
 8023638:	69ba      	ldr	r2, [r7, #24]
 802363a:	4313      	orrs	r3, r2
 802363c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 802363e:	69fb      	ldr	r3, [r7, #28]
 8023640:	08da      	lsrs	r2, r3, #3
 8023642:	687b      	ldr	r3, [r7, #4]
 8023644:	3208      	adds	r2, #8
 8023646:	69b9      	ldr	r1, [r7, #24]
 8023648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 802364c:	687b      	ldr	r3, [r7, #4]
 802364e:	681b      	ldr	r3, [r3, #0]
 8023650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8023652:	69fb      	ldr	r3, [r7, #28]
 8023654:	005b      	lsls	r3, r3, #1
 8023656:	2203      	movs	r2, #3
 8023658:	fa02 f303 	lsl.w	r3, r2, r3
 802365c:	43db      	mvns	r3, r3
 802365e:	69ba      	ldr	r2, [r7, #24]
 8023660:	4013      	ands	r3, r2
 8023662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8023664:	683b      	ldr	r3, [r7, #0]
 8023666:	685b      	ldr	r3, [r3, #4]
 8023668:	f003 0203 	and.w	r2, r3, #3
 802366c:	69fb      	ldr	r3, [r7, #28]
 802366e:	005b      	lsls	r3, r3, #1
 8023670:	fa02 f303 	lsl.w	r3, r2, r3
 8023674:	69ba      	ldr	r2, [r7, #24]
 8023676:	4313      	orrs	r3, r2
 8023678:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 802367a:	687b      	ldr	r3, [r7, #4]
 802367c:	69ba      	ldr	r2, [r7, #24]
 802367e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8023680:	683b      	ldr	r3, [r7, #0]
 8023682:	685b      	ldr	r3, [r3, #4]
 8023684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8023688:	2b00      	cmp	r3, #0
 802368a:	f000 80b4 	beq.w	80237f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802368e:	2300      	movs	r3, #0
 8023690:	60fb      	str	r3, [r7, #12]
 8023692:	4b5f      	ldr	r3, [pc, #380]	; (8023810 <HAL_GPIO_Init+0x308>)
 8023694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023696:	4a5e      	ldr	r2, [pc, #376]	; (8023810 <HAL_GPIO_Init+0x308>)
 8023698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802369c:	6453      	str	r3, [r2, #68]	; 0x44
 802369e:	4b5c      	ldr	r3, [pc, #368]	; (8023810 <HAL_GPIO_Init+0x308>)
 80236a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80236a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80236a6:	60fb      	str	r3, [r7, #12]
 80236a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80236aa:	4a5a      	ldr	r2, [pc, #360]	; (8023814 <HAL_GPIO_Init+0x30c>)
 80236ac:	69fb      	ldr	r3, [r7, #28]
 80236ae:	089b      	lsrs	r3, r3, #2
 80236b0:	3302      	adds	r3, #2
 80236b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80236b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80236b8:	69fb      	ldr	r3, [r7, #28]
 80236ba:	f003 0303 	and.w	r3, r3, #3
 80236be:	009b      	lsls	r3, r3, #2
 80236c0:	220f      	movs	r2, #15
 80236c2:	fa02 f303 	lsl.w	r3, r2, r3
 80236c6:	43db      	mvns	r3, r3
 80236c8:	69ba      	ldr	r2, [r7, #24]
 80236ca:	4013      	ands	r3, r2
 80236cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80236ce:	687b      	ldr	r3, [r7, #4]
 80236d0:	4a51      	ldr	r2, [pc, #324]	; (8023818 <HAL_GPIO_Init+0x310>)
 80236d2:	4293      	cmp	r3, r2
 80236d4:	d02b      	beq.n	802372e <HAL_GPIO_Init+0x226>
 80236d6:	687b      	ldr	r3, [r7, #4]
 80236d8:	4a50      	ldr	r2, [pc, #320]	; (802381c <HAL_GPIO_Init+0x314>)
 80236da:	4293      	cmp	r3, r2
 80236dc:	d025      	beq.n	802372a <HAL_GPIO_Init+0x222>
 80236de:	687b      	ldr	r3, [r7, #4]
 80236e0:	4a4f      	ldr	r2, [pc, #316]	; (8023820 <HAL_GPIO_Init+0x318>)
 80236e2:	4293      	cmp	r3, r2
 80236e4:	d01f      	beq.n	8023726 <HAL_GPIO_Init+0x21e>
 80236e6:	687b      	ldr	r3, [r7, #4]
 80236e8:	4a4e      	ldr	r2, [pc, #312]	; (8023824 <HAL_GPIO_Init+0x31c>)
 80236ea:	4293      	cmp	r3, r2
 80236ec:	d019      	beq.n	8023722 <HAL_GPIO_Init+0x21a>
 80236ee:	687b      	ldr	r3, [r7, #4]
 80236f0:	4a4d      	ldr	r2, [pc, #308]	; (8023828 <HAL_GPIO_Init+0x320>)
 80236f2:	4293      	cmp	r3, r2
 80236f4:	d013      	beq.n	802371e <HAL_GPIO_Init+0x216>
 80236f6:	687b      	ldr	r3, [r7, #4]
 80236f8:	4a4c      	ldr	r2, [pc, #304]	; (802382c <HAL_GPIO_Init+0x324>)
 80236fa:	4293      	cmp	r3, r2
 80236fc:	d00d      	beq.n	802371a <HAL_GPIO_Init+0x212>
 80236fe:	687b      	ldr	r3, [r7, #4]
 8023700:	4a4b      	ldr	r2, [pc, #300]	; (8023830 <HAL_GPIO_Init+0x328>)
 8023702:	4293      	cmp	r3, r2
 8023704:	d007      	beq.n	8023716 <HAL_GPIO_Init+0x20e>
 8023706:	687b      	ldr	r3, [r7, #4]
 8023708:	4a4a      	ldr	r2, [pc, #296]	; (8023834 <HAL_GPIO_Init+0x32c>)
 802370a:	4293      	cmp	r3, r2
 802370c:	d101      	bne.n	8023712 <HAL_GPIO_Init+0x20a>
 802370e:	2307      	movs	r3, #7
 8023710:	e00e      	b.n	8023730 <HAL_GPIO_Init+0x228>
 8023712:	2308      	movs	r3, #8
 8023714:	e00c      	b.n	8023730 <HAL_GPIO_Init+0x228>
 8023716:	2306      	movs	r3, #6
 8023718:	e00a      	b.n	8023730 <HAL_GPIO_Init+0x228>
 802371a:	2305      	movs	r3, #5
 802371c:	e008      	b.n	8023730 <HAL_GPIO_Init+0x228>
 802371e:	2304      	movs	r3, #4
 8023720:	e006      	b.n	8023730 <HAL_GPIO_Init+0x228>
 8023722:	2303      	movs	r3, #3
 8023724:	e004      	b.n	8023730 <HAL_GPIO_Init+0x228>
 8023726:	2302      	movs	r3, #2
 8023728:	e002      	b.n	8023730 <HAL_GPIO_Init+0x228>
 802372a:	2301      	movs	r3, #1
 802372c:	e000      	b.n	8023730 <HAL_GPIO_Init+0x228>
 802372e:	2300      	movs	r3, #0
 8023730:	69fa      	ldr	r2, [r7, #28]
 8023732:	f002 0203 	and.w	r2, r2, #3
 8023736:	0092      	lsls	r2, r2, #2
 8023738:	4093      	lsls	r3, r2
 802373a:	69ba      	ldr	r2, [r7, #24]
 802373c:	4313      	orrs	r3, r2
 802373e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8023740:	4934      	ldr	r1, [pc, #208]	; (8023814 <HAL_GPIO_Init+0x30c>)
 8023742:	69fb      	ldr	r3, [r7, #28]
 8023744:	089b      	lsrs	r3, r3, #2
 8023746:	3302      	adds	r3, #2
 8023748:	69ba      	ldr	r2, [r7, #24]
 802374a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 802374e:	4b3a      	ldr	r3, [pc, #232]	; (8023838 <HAL_GPIO_Init+0x330>)
 8023750:	681b      	ldr	r3, [r3, #0]
 8023752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8023754:	693b      	ldr	r3, [r7, #16]
 8023756:	43db      	mvns	r3, r3
 8023758:	69ba      	ldr	r2, [r7, #24]
 802375a:	4013      	ands	r3, r2
 802375c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 802375e:	683b      	ldr	r3, [r7, #0]
 8023760:	685b      	ldr	r3, [r3, #4]
 8023762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8023766:	2b00      	cmp	r3, #0
 8023768:	d003      	beq.n	8023772 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 802376a:	69ba      	ldr	r2, [r7, #24]
 802376c:	693b      	ldr	r3, [r7, #16]
 802376e:	4313      	orrs	r3, r2
 8023770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8023772:	4a31      	ldr	r2, [pc, #196]	; (8023838 <HAL_GPIO_Init+0x330>)
 8023774:	69bb      	ldr	r3, [r7, #24]
 8023776:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8023778:	4b2f      	ldr	r3, [pc, #188]	; (8023838 <HAL_GPIO_Init+0x330>)
 802377a:	685b      	ldr	r3, [r3, #4]
 802377c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802377e:	693b      	ldr	r3, [r7, #16]
 8023780:	43db      	mvns	r3, r3
 8023782:	69ba      	ldr	r2, [r7, #24]
 8023784:	4013      	ands	r3, r2
 8023786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8023788:	683b      	ldr	r3, [r7, #0]
 802378a:	685b      	ldr	r3, [r3, #4]
 802378c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8023790:	2b00      	cmp	r3, #0
 8023792:	d003      	beq.n	802379c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8023794:	69ba      	ldr	r2, [r7, #24]
 8023796:	693b      	ldr	r3, [r7, #16]
 8023798:	4313      	orrs	r3, r2
 802379a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 802379c:	4a26      	ldr	r2, [pc, #152]	; (8023838 <HAL_GPIO_Init+0x330>)
 802379e:	69bb      	ldr	r3, [r7, #24]
 80237a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80237a2:	4b25      	ldr	r3, [pc, #148]	; (8023838 <HAL_GPIO_Init+0x330>)
 80237a4:	689b      	ldr	r3, [r3, #8]
 80237a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80237a8:	693b      	ldr	r3, [r7, #16]
 80237aa:	43db      	mvns	r3, r3
 80237ac:	69ba      	ldr	r2, [r7, #24]
 80237ae:	4013      	ands	r3, r2
 80237b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80237b2:	683b      	ldr	r3, [r7, #0]
 80237b4:	685b      	ldr	r3, [r3, #4]
 80237b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80237ba:	2b00      	cmp	r3, #0
 80237bc:	d003      	beq.n	80237c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80237be:	69ba      	ldr	r2, [r7, #24]
 80237c0:	693b      	ldr	r3, [r7, #16]
 80237c2:	4313      	orrs	r3, r2
 80237c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80237c6:	4a1c      	ldr	r2, [pc, #112]	; (8023838 <HAL_GPIO_Init+0x330>)
 80237c8:	69bb      	ldr	r3, [r7, #24]
 80237ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80237cc:	4b1a      	ldr	r3, [pc, #104]	; (8023838 <HAL_GPIO_Init+0x330>)
 80237ce:	68db      	ldr	r3, [r3, #12]
 80237d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80237d2:	693b      	ldr	r3, [r7, #16]
 80237d4:	43db      	mvns	r3, r3
 80237d6:	69ba      	ldr	r2, [r7, #24]
 80237d8:	4013      	ands	r3, r2
 80237da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80237dc:	683b      	ldr	r3, [r7, #0]
 80237de:	685b      	ldr	r3, [r3, #4]
 80237e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80237e4:	2b00      	cmp	r3, #0
 80237e6:	d003      	beq.n	80237f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80237e8:	69ba      	ldr	r2, [r7, #24]
 80237ea:	693b      	ldr	r3, [r7, #16]
 80237ec:	4313      	orrs	r3, r2
 80237ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80237f0:	4a11      	ldr	r2, [pc, #68]	; (8023838 <HAL_GPIO_Init+0x330>)
 80237f2:	69bb      	ldr	r3, [r7, #24]
 80237f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80237f6:	69fb      	ldr	r3, [r7, #28]
 80237f8:	3301      	adds	r3, #1
 80237fa:	61fb      	str	r3, [r7, #28]
 80237fc:	69fb      	ldr	r3, [r7, #28]
 80237fe:	2b0f      	cmp	r3, #15
 8023800:	f67f ae90 	bls.w	8023524 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8023804:	bf00      	nop
 8023806:	3724      	adds	r7, #36	; 0x24
 8023808:	46bd      	mov	sp, r7
 802380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802380e:	4770      	bx	lr
 8023810:	40023800 	.word	0x40023800
 8023814:	40013800 	.word	0x40013800
 8023818:	40020000 	.word	0x40020000
 802381c:	40020400 	.word	0x40020400
 8023820:	40020800 	.word	0x40020800
 8023824:	40020c00 	.word	0x40020c00
 8023828:	40021000 	.word	0x40021000
 802382c:	40021400 	.word	0x40021400
 8023830:	40021800 	.word	0x40021800
 8023834:	40021c00 	.word	0x40021c00
 8023838:	40013c00 	.word	0x40013c00

0802383c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 802383c:	b480      	push	{r7}
 802383e:	b083      	sub	sp, #12
 8023840:	af00      	add	r7, sp, #0
 8023842:	6078      	str	r0, [r7, #4]
 8023844:	460b      	mov	r3, r1
 8023846:	807b      	strh	r3, [r7, #2]
 8023848:	4613      	mov	r3, r2
 802384a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 802384c:	787b      	ldrb	r3, [r7, #1]
 802384e:	2b00      	cmp	r3, #0
 8023850:	d003      	beq.n	802385a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8023852:	887a      	ldrh	r2, [r7, #2]
 8023854:	687b      	ldr	r3, [r7, #4]
 8023856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8023858:	e003      	b.n	8023862 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 802385a:	887b      	ldrh	r3, [r7, #2]
 802385c:	041a      	lsls	r2, r3, #16
 802385e:	687b      	ldr	r3, [r7, #4]
 8023860:	619a      	str	r2, [r3, #24]
}
 8023862:	bf00      	nop
 8023864:	370c      	adds	r7, #12
 8023866:	46bd      	mov	sp, r7
 8023868:	f85d 7b04 	ldr.w	r7, [sp], #4
 802386c:	4770      	bx	lr
	...

08023870 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8023870:	b580      	push	{r7, lr}
 8023872:	b084      	sub	sp, #16
 8023874:	af00      	add	r7, sp, #0
 8023876:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8023878:	687b      	ldr	r3, [r7, #4]
 802387a:	2b00      	cmp	r3, #0
 802387c:	d101      	bne.n	8023882 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 802387e:	2301      	movs	r3, #1
 8023880:	e11f      	b.n	8023ac2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8023882:	687b      	ldr	r3, [r7, #4]
 8023884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8023888:	b2db      	uxtb	r3, r3
 802388a:	2b00      	cmp	r3, #0
 802388c:	d106      	bne.n	802389c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 802388e:	687b      	ldr	r3, [r7, #4]
 8023890:	2200      	movs	r2, #0
 8023892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8023896:	6878      	ldr	r0, [r7, #4]
 8023898:	f7fe f8d6 	bl	8021a48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 802389c:	687b      	ldr	r3, [r7, #4]
 802389e:	2224      	movs	r2, #36	; 0x24
 80238a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80238a4:	687b      	ldr	r3, [r7, #4]
 80238a6:	681b      	ldr	r3, [r3, #0]
 80238a8:	681a      	ldr	r2, [r3, #0]
 80238aa:	687b      	ldr	r3, [r7, #4]
 80238ac:	681b      	ldr	r3, [r3, #0]
 80238ae:	f022 0201 	bic.w	r2, r2, #1
 80238b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80238b4:	687b      	ldr	r3, [r7, #4]
 80238b6:	681b      	ldr	r3, [r3, #0]
 80238b8:	681a      	ldr	r2, [r3, #0]
 80238ba:	687b      	ldr	r3, [r7, #4]
 80238bc:	681b      	ldr	r3, [r3, #0]
 80238be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80238c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80238c4:	687b      	ldr	r3, [r7, #4]
 80238c6:	681b      	ldr	r3, [r3, #0]
 80238c8:	681a      	ldr	r2, [r3, #0]
 80238ca:	687b      	ldr	r3, [r7, #4]
 80238cc:	681b      	ldr	r3, [r3, #0]
 80238ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80238d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80238d4:	f000 fd18 	bl	8024308 <HAL_RCC_GetPCLK1Freq>
 80238d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80238da:	687b      	ldr	r3, [r7, #4]
 80238dc:	685b      	ldr	r3, [r3, #4]
 80238de:	4a7b      	ldr	r2, [pc, #492]	; (8023acc <HAL_I2C_Init+0x25c>)
 80238e0:	4293      	cmp	r3, r2
 80238e2:	d807      	bhi.n	80238f4 <HAL_I2C_Init+0x84>
 80238e4:	68fb      	ldr	r3, [r7, #12]
 80238e6:	4a7a      	ldr	r2, [pc, #488]	; (8023ad0 <HAL_I2C_Init+0x260>)
 80238e8:	4293      	cmp	r3, r2
 80238ea:	bf94      	ite	ls
 80238ec:	2301      	movls	r3, #1
 80238ee:	2300      	movhi	r3, #0
 80238f0:	b2db      	uxtb	r3, r3
 80238f2:	e006      	b.n	8023902 <HAL_I2C_Init+0x92>
 80238f4:	68fb      	ldr	r3, [r7, #12]
 80238f6:	4a77      	ldr	r2, [pc, #476]	; (8023ad4 <HAL_I2C_Init+0x264>)
 80238f8:	4293      	cmp	r3, r2
 80238fa:	bf94      	ite	ls
 80238fc:	2301      	movls	r3, #1
 80238fe:	2300      	movhi	r3, #0
 8023900:	b2db      	uxtb	r3, r3
 8023902:	2b00      	cmp	r3, #0
 8023904:	d001      	beq.n	802390a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8023906:	2301      	movs	r3, #1
 8023908:	e0db      	b.n	8023ac2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 802390a:	68fb      	ldr	r3, [r7, #12]
 802390c:	4a72      	ldr	r2, [pc, #456]	; (8023ad8 <HAL_I2C_Init+0x268>)
 802390e:	fba2 2303 	umull	r2, r3, r2, r3
 8023912:	0c9b      	lsrs	r3, r3, #18
 8023914:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8023916:	687b      	ldr	r3, [r7, #4]
 8023918:	681b      	ldr	r3, [r3, #0]
 802391a:	685b      	ldr	r3, [r3, #4]
 802391c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8023920:	687b      	ldr	r3, [r7, #4]
 8023922:	681b      	ldr	r3, [r3, #0]
 8023924:	68ba      	ldr	r2, [r7, #8]
 8023926:	430a      	orrs	r2, r1
 8023928:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 802392a:	687b      	ldr	r3, [r7, #4]
 802392c:	681b      	ldr	r3, [r3, #0]
 802392e:	6a1b      	ldr	r3, [r3, #32]
 8023930:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8023934:	687b      	ldr	r3, [r7, #4]
 8023936:	685b      	ldr	r3, [r3, #4]
 8023938:	4a64      	ldr	r2, [pc, #400]	; (8023acc <HAL_I2C_Init+0x25c>)
 802393a:	4293      	cmp	r3, r2
 802393c:	d802      	bhi.n	8023944 <HAL_I2C_Init+0xd4>
 802393e:	68bb      	ldr	r3, [r7, #8]
 8023940:	3301      	adds	r3, #1
 8023942:	e009      	b.n	8023958 <HAL_I2C_Init+0xe8>
 8023944:	68bb      	ldr	r3, [r7, #8]
 8023946:	f44f 7296 	mov.w	r2, #300	; 0x12c
 802394a:	fb02 f303 	mul.w	r3, r2, r3
 802394e:	4a63      	ldr	r2, [pc, #396]	; (8023adc <HAL_I2C_Init+0x26c>)
 8023950:	fba2 2303 	umull	r2, r3, r2, r3
 8023954:	099b      	lsrs	r3, r3, #6
 8023956:	3301      	adds	r3, #1
 8023958:	687a      	ldr	r2, [r7, #4]
 802395a:	6812      	ldr	r2, [r2, #0]
 802395c:	430b      	orrs	r3, r1
 802395e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8023960:	687b      	ldr	r3, [r7, #4]
 8023962:	681b      	ldr	r3, [r3, #0]
 8023964:	69db      	ldr	r3, [r3, #28]
 8023966:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 802396a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 802396e:	687b      	ldr	r3, [r7, #4]
 8023970:	685b      	ldr	r3, [r3, #4]
 8023972:	4956      	ldr	r1, [pc, #344]	; (8023acc <HAL_I2C_Init+0x25c>)
 8023974:	428b      	cmp	r3, r1
 8023976:	d80d      	bhi.n	8023994 <HAL_I2C_Init+0x124>
 8023978:	68fb      	ldr	r3, [r7, #12]
 802397a:	1e59      	subs	r1, r3, #1
 802397c:	687b      	ldr	r3, [r7, #4]
 802397e:	685b      	ldr	r3, [r3, #4]
 8023980:	005b      	lsls	r3, r3, #1
 8023982:	fbb1 f3f3 	udiv	r3, r1, r3
 8023986:	3301      	adds	r3, #1
 8023988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802398c:	2b04      	cmp	r3, #4
 802398e:	bf38      	it	cc
 8023990:	2304      	movcc	r3, #4
 8023992:	e04f      	b.n	8023a34 <HAL_I2C_Init+0x1c4>
 8023994:	687b      	ldr	r3, [r7, #4]
 8023996:	689b      	ldr	r3, [r3, #8]
 8023998:	2b00      	cmp	r3, #0
 802399a:	d111      	bne.n	80239c0 <HAL_I2C_Init+0x150>
 802399c:	68fb      	ldr	r3, [r7, #12]
 802399e:	1e58      	subs	r0, r3, #1
 80239a0:	687b      	ldr	r3, [r7, #4]
 80239a2:	6859      	ldr	r1, [r3, #4]
 80239a4:	460b      	mov	r3, r1
 80239a6:	005b      	lsls	r3, r3, #1
 80239a8:	440b      	add	r3, r1
 80239aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80239ae:	3301      	adds	r3, #1
 80239b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80239b4:	2b00      	cmp	r3, #0
 80239b6:	bf0c      	ite	eq
 80239b8:	2301      	moveq	r3, #1
 80239ba:	2300      	movne	r3, #0
 80239bc:	b2db      	uxtb	r3, r3
 80239be:	e012      	b.n	80239e6 <HAL_I2C_Init+0x176>
 80239c0:	68fb      	ldr	r3, [r7, #12]
 80239c2:	1e58      	subs	r0, r3, #1
 80239c4:	687b      	ldr	r3, [r7, #4]
 80239c6:	6859      	ldr	r1, [r3, #4]
 80239c8:	460b      	mov	r3, r1
 80239ca:	009b      	lsls	r3, r3, #2
 80239cc:	440b      	add	r3, r1
 80239ce:	0099      	lsls	r1, r3, #2
 80239d0:	440b      	add	r3, r1
 80239d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80239d6:	3301      	adds	r3, #1
 80239d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80239dc:	2b00      	cmp	r3, #0
 80239de:	bf0c      	ite	eq
 80239e0:	2301      	moveq	r3, #1
 80239e2:	2300      	movne	r3, #0
 80239e4:	b2db      	uxtb	r3, r3
 80239e6:	2b00      	cmp	r3, #0
 80239e8:	d001      	beq.n	80239ee <HAL_I2C_Init+0x17e>
 80239ea:	2301      	movs	r3, #1
 80239ec:	e022      	b.n	8023a34 <HAL_I2C_Init+0x1c4>
 80239ee:	687b      	ldr	r3, [r7, #4]
 80239f0:	689b      	ldr	r3, [r3, #8]
 80239f2:	2b00      	cmp	r3, #0
 80239f4:	d10e      	bne.n	8023a14 <HAL_I2C_Init+0x1a4>
 80239f6:	68fb      	ldr	r3, [r7, #12]
 80239f8:	1e58      	subs	r0, r3, #1
 80239fa:	687b      	ldr	r3, [r7, #4]
 80239fc:	6859      	ldr	r1, [r3, #4]
 80239fe:	460b      	mov	r3, r1
 8023a00:	005b      	lsls	r3, r3, #1
 8023a02:	440b      	add	r3, r1
 8023a04:	fbb0 f3f3 	udiv	r3, r0, r3
 8023a08:	3301      	adds	r3, #1
 8023a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8023a12:	e00f      	b.n	8023a34 <HAL_I2C_Init+0x1c4>
 8023a14:	68fb      	ldr	r3, [r7, #12]
 8023a16:	1e58      	subs	r0, r3, #1
 8023a18:	687b      	ldr	r3, [r7, #4]
 8023a1a:	6859      	ldr	r1, [r3, #4]
 8023a1c:	460b      	mov	r3, r1
 8023a1e:	009b      	lsls	r3, r3, #2
 8023a20:	440b      	add	r3, r1
 8023a22:	0099      	lsls	r1, r3, #2
 8023a24:	440b      	add	r3, r1
 8023a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8023a2a:	3301      	adds	r3, #1
 8023a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023a30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8023a34:	6879      	ldr	r1, [r7, #4]
 8023a36:	6809      	ldr	r1, [r1, #0]
 8023a38:	4313      	orrs	r3, r2
 8023a3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8023a3c:	687b      	ldr	r3, [r7, #4]
 8023a3e:	681b      	ldr	r3, [r3, #0]
 8023a40:	681b      	ldr	r3, [r3, #0]
 8023a42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8023a46:	687b      	ldr	r3, [r7, #4]
 8023a48:	69da      	ldr	r2, [r3, #28]
 8023a4a:	687b      	ldr	r3, [r7, #4]
 8023a4c:	6a1b      	ldr	r3, [r3, #32]
 8023a4e:	431a      	orrs	r2, r3
 8023a50:	687b      	ldr	r3, [r7, #4]
 8023a52:	681b      	ldr	r3, [r3, #0]
 8023a54:	430a      	orrs	r2, r1
 8023a56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8023a58:	687b      	ldr	r3, [r7, #4]
 8023a5a:	681b      	ldr	r3, [r3, #0]
 8023a5c:	689b      	ldr	r3, [r3, #8]
 8023a5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8023a62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8023a66:	687a      	ldr	r2, [r7, #4]
 8023a68:	6911      	ldr	r1, [r2, #16]
 8023a6a:	687a      	ldr	r2, [r7, #4]
 8023a6c:	68d2      	ldr	r2, [r2, #12]
 8023a6e:	4311      	orrs	r1, r2
 8023a70:	687a      	ldr	r2, [r7, #4]
 8023a72:	6812      	ldr	r2, [r2, #0]
 8023a74:	430b      	orrs	r3, r1
 8023a76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8023a78:	687b      	ldr	r3, [r7, #4]
 8023a7a:	681b      	ldr	r3, [r3, #0]
 8023a7c:	68db      	ldr	r3, [r3, #12]
 8023a7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8023a82:	687b      	ldr	r3, [r7, #4]
 8023a84:	695a      	ldr	r2, [r3, #20]
 8023a86:	687b      	ldr	r3, [r7, #4]
 8023a88:	699b      	ldr	r3, [r3, #24]
 8023a8a:	431a      	orrs	r2, r3
 8023a8c:	687b      	ldr	r3, [r7, #4]
 8023a8e:	681b      	ldr	r3, [r3, #0]
 8023a90:	430a      	orrs	r2, r1
 8023a92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8023a94:	687b      	ldr	r3, [r7, #4]
 8023a96:	681b      	ldr	r3, [r3, #0]
 8023a98:	681a      	ldr	r2, [r3, #0]
 8023a9a:	687b      	ldr	r3, [r7, #4]
 8023a9c:	681b      	ldr	r3, [r3, #0]
 8023a9e:	f042 0201 	orr.w	r2, r2, #1
 8023aa2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8023aa4:	687b      	ldr	r3, [r7, #4]
 8023aa6:	2200      	movs	r2, #0
 8023aa8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8023aaa:	687b      	ldr	r3, [r7, #4]
 8023aac:	2220      	movs	r2, #32
 8023aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8023ab2:	687b      	ldr	r3, [r7, #4]
 8023ab4:	2200      	movs	r2, #0
 8023ab6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8023ab8:	687b      	ldr	r3, [r7, #4]
 8023aba:	2200      	movs	r2, #0
 8023abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8023ac0:	2300      	movs	r3, #0
}
 8023ac2:	4618      	mov	r0, r3
 8023ac4:	3710      	adds	r7, #16
 8023ac6:	46bd      	mov	sp, r7
 8023ac8:	bd80      	pop	{r7, pc}
 8023aca:	bf00      	nop
 8023acc:	000186a0 	.word	0x000186a0
 8023ad0:	001e847f 	.word	0x001e847f
 8023ad4:	003d08ff 	.word	0x003d08ff
 8023ad8:	431bde83 	.word	0x431bde83
 8023adc:	10624dd3 	.word	0x10624dd3

08023ae0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8023ae0:	b580      	push	{r7, lr}
 8023ae2:	b086      	sub	sp, #24
 8023ae4:	af00      	add	r7, sp, #0
 8023ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8023ae8:	687b      	ldr	r3, [r7, #4]
 8023aea:	2b00      	cmp	r3, #0
 8023aec:	d101      	bne.n	8023af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8023aee:	2301      	movs	r3, #1
 8023af0:	e25b      	b.n	8023faa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8023af2:	687b      	ldr	r3, [r7, #4]
 8023af4:	681b      	ldr	r3, [r3, #0]
 8023af6:	f003 0301 	and.w	r3, r3, #1
 8023afa:	2b00      	cmp	r3, #0
 8023afc:	d075      	beq.n	8023bea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8023afe:	4ba3      	ldr	r3, [pc, #652]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023b00:	689b      	ldr	r3, [r3, #8]
 8023b02:	f003 030c 	and.w	r3, r3, #12
 8023b06:	2b04      	cmp	r3, #4
 8023b08:	d00c      	beq.n	8023b24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8023b0a:	4ba0      	ldr	r3, [pc, #640]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023b0c:	689b      	ldr	r3, [r3, #8]
 8023b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8023b12:	2b08      	cmp	r3, #8
 8023b14:	d112      	bne.n	8023b3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8023b16:	4b9d      	ldr	r3, [pc, #628]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023b18:	685b      	ldr	r3, [r3, #4]
 8023b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8023b1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8023b22:	d10b      	bne.n	8023b3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8023b24:	4b99      	ldr	r3, [pc, #612]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023b26:	681b      	ldr	r3, [r3, #0]
 8023b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8023b2c:	2b00      	cmp	r3, #0
 8023b2e:	d05b      	beq.n	8023be8 <HAL_RCC_OscConfig+0x108>
 8023b30:	687b      	ldr	r3, [r7, #4]
 8023b32:	685b      	ldr	r3, [r3, #4]
 8023b34:	2b00      	cmp	r3, #0
 8023b36:	d157      	bne.n	8023be8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8023b38:	2301      	movs	r3, #1
 8023b3a:	e236      	b.n	8023faa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8023b3c:	687b      	ldr	r3, [r7, #4]
 8023b3e:	685b      	ldr	r3, [r3, #4]
 8023b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8023b44:	d106      	bne.n	8023b54 <HAL_RCC_OscConfig+0x74>
 8023b46:	4b91      	ldr	r3, [pc, #580]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023b48:	681b      	ldr	r3, [r3, #0]
 8023b4a:	4a90      	ldr	r2, [pc, #576]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8023b50:	6013      	str	r3, [r2, #0]
 8023b52:	e01d      	b.n	8023b90 <HAL_RCC_OscConfig+0xb0>
 8023b54:	687b      	ldr	r3, [r7, #4]
 8023b56:	685b      	ldr	r3, [r3, #4]
 8023b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8023b5c:	d10c      	bne.n	8023b78 <HAL_RCC_OscConfig+0x98>
 8023b5e:	4b8b      	ldr	r3, [pc, #556]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023b60:	681b      	ldr	r3, [r3, #0]
 8023b62:	4a8a      	ldr	r2, [pc, #552]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8023b68:	6013      	str	r3, [r2, #0]
 8023b6a:	4b88      	ldr	r3, [pc, #544]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023b6c:	681b      	ldr	r3, [r3, #0]
 8023b6e:	4a87      	ldr	r2, [pc, #540]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8023b74:	6013      	str	r3, [r2, #0]
 8023b76:	e00b      	b.n	8023b90 <HAL_RCC_OscConfig+0xb0>
 8023b78:	4b84      	ldr	r3, [pc, #528]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023b7a:	681b      	ldr	r3, [r3, #0]
 8023b7c:	4a83      	ldr	r2, [pc, #524]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8023b82:	6013      	str	r3, [r2, #0]
 8023b84:	4b81      	ldr	r3, [pc, #516]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023b86:	681b      	ldr	r3, [r3, #0]
 8023b88:	4a80      	ldr	r2, [pc, #512]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8023b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8023b90:	687b      	ldr	r3, [r7, #4]
 8023b92:	685b      	ldr	r3, [r3, #4]
 8023b94:	2b00      	cmp	r3, #0
 8023b96:	d013      	beq.n	8023bc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8023b98:	f7fe fc14 	bl	80223c4 <HAL_GetTick>
 8023b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8023b9e:	e008      	b.n	8023bb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8023ba0:	f7fe fc10 	bl	80223c4 <HAL_GetTick>
 8023ba4:	4602      	mov	r2, r0
 8023ba6:	693b      	ldr	r3, [r7, #16]
 8023ba8:	1ad3      	subs	r3, r2, r3
 8023baa:	2b64      	cmp	r3, #100	; 0x64
 8023bac:	d901      	bls.n	8023bb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8023bae:	2303      	movs	r3, #3
 8023bb0:	e1fb      	b.n	8023faa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8023bb2:	4b76      	ldr	r3, [pc, #472]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023bb4:	681b      	ldr	r3, [r3, #0]
 8023bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8023bba:	2b00      	cmp	r3, #0
 8023bbc:	d0f0      	beq.n	8023ba0 <HAL_RCC_OscConfig+0xc0>
 8023bbe:	e014      	b.n	8023bea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8023bc0:	f7fe fc00 	bl	80223c4 <HAL_GetTick>
 8023bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8023bc6:	e008      	b.n	8023bda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8023bc8:	f7fe fbfc 	bl	80223c4 <HAL_GetTick>
 8023bcc:	4602      	mov	r2, r0
 8023bce:	693b      	ldr	r3, [r7, #16]
 8023bd0:	1ad3      	subs	r3, r2, r3
 8023bd2:	2b64      	cmp	r3, #100	; 0x64
 8023bd4:	d901      	bls.n	8023bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8023bd6:	2303      	movs	r3, #3
 8023bd8:	e1e7      	b.n	8023faa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8023bda:	4b6c      	ldr	r3, [pc, #432]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023bdc:	681b      	ldr	r3, [r3, #0]
 8023bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8023be2:	2b00      	cmp	r3, #0
 8023be4:	d1f0      	bne.n	8023bc8 <HAL_RCC_OscConfig+0xe8>
 8023be6:	e000      	b.n	8023bea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8023be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8023bea:	687b      	ldr	r3, [r7, #4]
 8023bec:	681b      	ldr	r3, [r3, #0]
 8023bee:	f003 0302 	and.w	r3, r3, #2
 8023bf2:	2b00      	cmp	r3, #0
 8023bf4:	d063      	beq.n	8023cbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8023bf6:	4b65      	ldr	r3, [pc, #404]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023bf8:	689b      	ldr	r3, [r3, #8]
 8023bfa:	f003 030c 	and.w	r3, r3, #12
 8023bfe:	2b00      	cmp	r3, #0
 8023c00:	d00b      	beq.n	8023c1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8023c02:	4b62      	ldr	r3, [pc, #392]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023c04:	689b      	ldr	r3, [r3, #8]
 8023c06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8023c0a:	2b08      	cmp	r3, #8
 8023c0c:	d11c      	bne.n	8023c48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8023c0e:	4b5f      	ldr	r3, [pc, #380]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023c10:	685b      	ldr	r3, [r3, #4]
 8023c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8023c16:	2b00      	cmp	r3, #0
 8023c18:	d116      	bne.n	8023c48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8023c1a:	4b5c      	ldr	r3, [pc, #368]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023c1c:	681b      	ldr	r3, [r3, #0]
 8023c1e:	f003 0302 	and.w	r3, r3, #2
 8023c22:	2b00      	cmp	r3, #0
 8023c24:	d005      	beq.n	8023c32 <HAL_RCC_OscConfig+0x152>
 8023c26:	687b      	ldr	r3, [r7, #4]
 8023c28:	68db      	ldr	r3, [r3, #12]
 8023c2a:	2b01      	cmp	r3, #1
 8023c2c:	d001      	beq.n	8023c32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8023c2e:	2301      	movs	r3, #1
 8023c30:	e1bb      	b.n	8023faa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8023c32:	4b56      	ldr	r3, [pc, #344]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023c34:	681b      	ldr	r3, [r3, #0]
 8023c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8023c3a:	687b      	ldr	r3, [r7, #4]
 8023c3c:	691b      	ldr	r3, [r3, #16]
 8023c3e:	00db      	lsls	r3, r3, #3
 8023c40:	4952      	ldr	r1, [pc, #328]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023c42:	4313      	orrs	r3, r2
 8023c44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8023c46:	e03a      	b.n	8023cbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8023c48:	687b      	ldr	r3, [r7, #4]
 8023c4a:	68db      	ldr	r3, [r3, #12]
 8023c4c:	2b00      	cmp	r3, #0
 8023c4e:	d020      	beq.n	8023c92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8023c50:	4b4f      	ldr	r3, [pc, #316]	; (8023d90 <HAL_RCC_OscConfig+0x2b0>)
 8023c52:	2201      	movs	r2, #1
 8023c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8023c56:	f7fe fbb5 	bl	80223c4 <HAL_GetTick>
 8023c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8023c5c:	e008      	b.n	8023c70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8023c5e:	f7fe fbb1 	bl	80223c4 <HAL_GetTick>
 8023c62:	4602      	mov	r2, r0
 8023c64:	693b      	ldr	r3, [r7, #16]
 8023c66:	1ad3      	subs	r3, r2, r3
 8023c68:	2b02      	cmp	r3, #2
 8023c6a:	d901      	bls.n	8023c70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8023c6c:	2303      	movs	r3, #3
 8023c6e:	e19c      	b.n	8023faa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8023c70:	4b46      	ldr	r3, [pc, #280]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023c72:	681b      	ldr	r3, [r3, #0]
 8023c74:	f003 0302 	and.w	r3, r3, #2
 8023c78:	2b00      	cmp	r3, #0
 8023c7a:	d0f0      	beq.n	8023c5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8023c7c:	4b43      	ldr	r3, [pc, #268]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023c7e:	681b      	ldr	r3, [r3, #0]
 8023c80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8023c84:	687b      	ldr	r3, [r7, #4]
 8023c86:	691b      	ldr	r3, [r3, #16]
 8023c88:	00db      	lsls	r3, r3, #3
 8023c8a:	4940      	ldr	r1, [pc, #256]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023c8c:	4313      	orrs	r3, r2
 8023c8e:	600b      	str	r3, [r1, #0]
 8023c90:	e015      	b.n	8023cbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8023c92:	4b3f      	ldr	r3, [pc, #252]	; (8023d90 <HAL_RCC_OscConfig+0x2b0>)
 8023c94:	2200      	movs	r2, #0
 8023c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8023c98:	f7fe fb94 	bl	80223c4 <HAL_GetTick>
 8023c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8023c9e:	e008      	b.n	8023cb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8023ca0:	f7fe fb90 	bl	80223c4 <HAL_GetTick>
 8023ca4:	4602      	mov	r2, r0
 8023ca6:	693b      	ldr	r3, [r7, #16]
 8023ca8:	1ad3      	subs	r3, r2, r3
 8023caa:	2b02      	cmp	r3, #2
 8023cac:	d901      	bls.n	8023cb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8023cae:	2303      	movs	r3, #3
 8023cb0:	e17b      	b.n	8023faa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8023cb2:	4b36      	ldr	r3, [pc, #216]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023cb4:	681b      	ldr	r3, [r3, #0]
 8023cb6:	f003 0302 	and.w	r3, r3, #2
 8023cba:	2b00      	cmp	r3, #0
 8023cbc:	d1f0      	bne.n	8023ca0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8023cbe:	687b      	ldr	r3, [r7, #4]
 8023cc0:	681b      	ldr	r3, [r3, #0]
 8023cc2:	f003 0308 	and.w	r3, r3, #8
 8023cc6:	2b00      	cmp	r3, #0
 8023cc8:	d030      	beq.n	8023d2c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8023cca:	687b      	ldr	r3, [r7, #4]
 8023ccc:	695b      	ldr	r3, [r3, #20]
 8023cce:	2b00      	cmp	r3, #0
 8023cd0:	d016      	beq.n	8023d00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8023cd2:	4b30      	ldr	r3, [pc, #192]	; (8023d94 <HAL_RCC_OscConfig+0x2b4>)
 8023cd4:	2201      	movs	r2, #1
 8023cd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8023cd8:	f7fe fb74 	bl	80223c4 <HAL_GetTick>
 8023cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8023cde:	e008      	b.n	8023cf2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8023ce0:	f7fe fb70 	bl	80223c4 <HAL_GetTick>
 8023ce4:	4602      	mov	r2, r0
 8023ce6:	693b      	ldr	r3, [r7, #16]
 8023ce8:	1ad3      	subs	r3, r2, r3
 8023cea:	2b02      	cmp	r3, #2
 8023cec:	d901      	bls.n	8023cf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8023cee:	2303      	movs	r3, #3
 8023cf0:	e15b      	b.n	8023faa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8023cf2:	4b26      	ldr	r3, [pc, #152]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8023cf6:	f003 0302 	and.w	r3, r3, #2
 8023cfa:	2b00      	cmp	r3, #0
 8023cfc:	d0f0      	beq.n	8023ce0 <HAL_RCC_OscConfig+0x200>
 8023cfe:	e015      	b.n	8023d2c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8023d00:	4b24      	ldr	r3, [pc, #144]	; (8023d94 <HAL_RCC_OscConfig+0x2b4>)
 8023d02:	2200      	movs	r2, #0
 8023d04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8023d06:	f7fe fb5d 	bl	80223c4 <HAL_GetTick>
 8023d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8023d0c:	e008      	b.n	8023d20 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8023d0e:	f7fe fb59 	bl	80223c4 <HAL_GetTick>
 8023d12:	4602      	mov	r2, r0
 8023d14:	693b      	ldr	r3, [r7, #16]
 8023d16:	1ad3      	subs	r3, r2, r3
 8023d18:	2b02      	cmp	r3, #2
 8023d1a:	d901      	bls.n	8023d20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8023d1c:	2303      	movs	r3, #3
 8023d1e:	e144      	b.n	8023faa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8023d20:	4b1a      	ldr	r3, [pc, #104]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8023d24:	f003 0302 	and.w	r3, r3, #2
 8023d28:	2b00      	cmp	r3, #0
 8023d2a:	d1f0      	bne.n	8023d0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8023d2c:	687b      	ldr	r3, [r7, #4]
 8023d2e:	681b      	ldr	r3, [r3, #0]
 8023d30:	f003 0304 	and.w	r3, r3, #4
 8023d34:	2b00      	cmp	r3, #0
 8023d36:	f000 80a0 	beq.w	8023e7a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8023d3a:	2300      	movs	r3, #0
 8023d3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8023d3e:	4b13      	ldr	r3, [pc, #76]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8023d46:	2b00      	cmp	r3, #0
 8023d48:	d10f      	bne.n	8023d6a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8023d4a:	2300      	movs	r3, #0
 8023d4c:	60bb      	str	r3, [r7, #8]
 8023d4e:	4b0f      	ldr	r3, [pc, #60]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023d52:	4a0e      	ldr	r2, [pc, #56]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8023d58:	6413      	str	r3, [r2, #64]	; 0x40
 8023d5a:	4b0c      	ldr	r3, [pc, #48]	; (8023d8c <HAL_RCC_OscConfig+0x2ac>)
 8023d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8023d62:	60bb      	str	r3, [r7, #8]
 8023d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8023d66:	2301      	movs	r3, #1
 8023d68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8023d6a:	4b0b      	ldr	r3, [pc, #44]	; (8023d98 <HAL_RCC_OscConfig+0x2b8>)
 8023d6c:	681b      	ldr	r3, [r3, #0]
 8023d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023d72:	2b00      	cmp	r3, #0
 8023d74:	d121      	bne.n	8023dba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8023d76:	4b08      	ldr	r3, [pc, #32]	; (8023d98 <HAL_RCC_OscConfig+0x2b8>)
 8023d78:	681b      	ldr	r3, [r3, #0]
 8023d7a:	4a07      	ldr	r2, [pc, #28]	; (8023d98 <HAL_RCC_OscConfig+0x2b8>)
 8023d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8023d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8023d82:	f7fe fb1f 	bl	80223c4 <HAL_GetTick>
 8023d86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8023d88:	e011      	b.n	8023dae <HAL_RCC_OscConfig+0x2ce>
 8023d8a:	bf00      	nop
 8023d8c:	40023800 	.word	0x40023800
 8023d90:	42470000 	.word	0x42470000
 8023d94:	42470e80 	.word	0x42470e80
 8023d98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8023d9c:	f7fe fb12 	bl	80223c4 <HAL_GetTick>
 8023da0:	4602      	mov	r2, r0
 8023da2:	693b      	ldr	r3, [r7, #16]
 8023da4:	1ad3      	subs	r3, r2, r3
 8023da6:	2b02      	cmp	r3, #2
 8023da8:	d901      	bls.n	8023dae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8023daa:	2303      	movs	r3, #3
 8023dac:	e0fd      	b.n	8023faa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8023dae:	4b81      	ldr	r3, [pc, #516]	; (8023fb4 <HAL_RCC_OscConfig+0x4d4>)
 8023db0:	681b      	ldr	r3, [r3, #0]
 8023db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023db6:	2b00      	cmp	r3, #0
 8023db8:	d0f0      	beq.n	8023d9c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8023dba:	687b      	ldr	r3, [r7, #4]
 8023dbc:	689b      	ldr	r3, [r3, #8]
 8023dbe:	2b01      	cmp	r3, #1
 8023dc0:	d106      	bne.n	8023dd0 <HAL_RCC_OscConfig+0x2f0>
 8023dc2:	4b7d      	ldr	r3, [pc, #500]	; (8023fb8 <HAL_RCC_OscConfig+0x4d8>)
 8023dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023dc6:	4a7c      	ldr	r2, [pc, #496]	; (8023fb8 <HAL_RCC_OscConfig+0x4d8>)
 8023dc8:	f043 0301 	orr.w	r3, r3, #1
 8023dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8023dce:	e01c      	b.n	8023e0a <HAL_RCC_OscConfig+0x32a>
 8023dd0:	687b      	ldr	r3, [r7, #4]
 8023dd2:	689b      	ldr	r3, [r3, #8]
 8023dd4:	2b05      	cmp	r3, #5
 8023dd6:	d10c      	bne.n	8023df2 <HAL_RCC_OscConfig+0x312>
 8023dd8:	4b77      	ldr	r3, [pc, #476]	; (8023fb8 <HAL_RCC_OscConfig+0x4d8>)
 8023dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023ddc:	4a76      	ldr	r2, [pc, #472]	; (8023fb8 <HAL_RCC_OscConfig+0x4d8>)
 8023dde:	f043 0304 	orr.w	r3, r3, #4
 8023de2:	6713      	str	r3, [r2, #112]	; 0x70
 8023de4:	4b74      	ldr	r3, [pc, #464]	; (8023fb8 <HAL_RCC_OscConfig+0x4d8>)
 8023de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023de8:	4a73      	ldr	r2, [pc, #460]	; (8023fb8 <HAL_RCC_OscConfig+0x4d8>)
 8023dea:	f043 0301 	orr.w	r3, r3, #1
 8023dee:	6713      	str	r3, [r2, #112]	; 0x70
 8023df0:	e00b      	b.n	8023e0a <HAL_RCC_OscConfig+0x32a>
 8023df2:	4b71      	ldr	r3, [pc, #452]	; (8023fb8 <HAL_RCC_OscConfig+0x4d8>)
 8023df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023df6:	4a70      	ldr	r2, [pc, #448]	; (8023fb8 <HAL_RCC_OscConfig+0x4d8>)
 8023df8:	f023 0301 	bic.w	r3, r3, #1
 8023dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8023dfe:	4b6e      	ldr	r3, [pc, #440]	; (8023fb8 <HAL_RCC_OscConfig+0x4d8>)
 8023e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023e02:	4a6d      	ldr	r2, [pc, #436]	; (8023fb8 <HAL_RCC_OscConfig+0x4d8>)
 8023e04:	f023 0304 	bic.w	r3, r3, #4
 8023e08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8023e0a:	687b      	ldr	r3, [r7, #4]
 8023e0c:	689b      	ldr	r3, [r3, #8]
 8023e0e:	2b00      	cmp	r3, #0
 8023e10:	d015      	beq.n	8023e3e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8023e12:	f7fe fad7 	bl	80223c4 <HAL_GetTick>
 8023e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8023e18:	e00a      	b.n	8023e30 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8023e1a:	f7fe fad3 	bl	80223c4 <HAL_GetTick>
 8023e1e:	4602      	mov	r2, r0
 8023e20:	693b      	ldr	r3, [r7, #16]
 8023e22:	1ad3      	subs	r3, r2, r3
 8023e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8023e28:	4293      	cmp	r3, r2
 8023e2a:	d901      	bls.n	8023e30 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8023e2c:	2303      	movs	r3, #3
 8023e2e:	e0bc      	b.n	8023faa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8023e30:	4b61      	ldr	r3, [pc, #388]	; (8023fb8 <HAL_RCC_OscConfig+0x4d8>)
 8023e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023e34:	f003 0302 	and.w	r3, r3, #2
 8023e38:	2b00      	cmp	r3, #0
 8023e3a:	d0ee      	beq.n	8023e1a <HAL_RCC_OscConfig+0x33a>
 8023e3c:	e014      	b.n	8023e68 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8023e3e:	f7fe fac1 	bl	80223c4 <HAL_GetTick>
 8023e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8023e44:	e00a      	b.n	8023e5c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8023e46:	f7fe fabd 	bl	80223c4 <HAL_GetTick>
 8023e4a:	4602      	mov	r2, r0
 8023e4c:	693b      	ldr	r3, [r7, #16]
 8023e4e:	1ad3      	subs	r3, r2, r3
 8023e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8023e54:	4293      	cmp	r3, r2
 8023e56:	d901      	bls.n	8023e5c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8023e58:	2303      	movs	r3, #3
 8023e5a:	e0a6      	b.n	8023faa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8023e5c:	4b56      	ldr	r3, [pc, #344]	; (8023fb8 <HAL_RCC_OscConfig+0x4d8>)
 8023e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8023e60:	f003 0302 	and.w	r3, r3, #2
 8023e64:	2b00      	cmp	r3, #0
 8023e66:	d1ee      	bne.n	8023e46 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8023e68:	7dfb      	ldrb	r3, [r7, #23]
 8023e6a:	2b01      	cmp	r3, #1
 8023e6c:	d105      	bne.n	8023e7a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8023e6e:	4b52      	ldr	r3, [pc, #328]	; (8023fb8 <HAL_RCC_OscConfig+0x4d8>)
 8023e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023e72:	4a51      	ldr	r2, [pc, #324]	; (8023fb8 <HAL_RCC_OscConfig+0x4d8>)
 8023e74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8023e78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8023e7a:	687b      	ldr	r3, [r7, #4]
 8023e7c:	699b      	ldr	r3, [r3, #24]
 8023e7e:	2b00      	cmp	r3, #0
 8023e80:	f000 8092 	beq.w	8023fa8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8023e84:	4b4c      	ldr	r3, [pc, #304]	; (8023fb8 <HAL_RCC_OscConfig+0x4d8>)
 8023e86:	689b      	ldr	r3, [r3, #8]
 8023e88:	f003 030c 	and.w	r3, r3, #12
 8023e8c:	2b08      	cmp	r3, #8
 8023e8e:	d05c      	beq.n	8023f4a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8023e90:	687b      	ldr	r3, [r7, #4]
 8023e92:	699b      	ldr	r3, [r3, #24]
 8023e94:	2b02      	cmp	r3, #2
 8023e96:	d141      	bne.n	8023f1c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8023e98:	4b48      	ldr	r3, [pc, #288]	; (8023fbc <HAL_RCC_OscConfig+0x4dc>)
 8023e9a:	2200      	movs	r2, #0
 8023e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8023e9e:	f7fe fa91 	bl	80223c4 <HAL_GetTick>
 8023ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8023ea4:	e008      	b.n	8023eb8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8023ea6:	f7fe fa8d 	bl	80223c4 <HAL_GetTick>
 8023eaa:	4602      	mov	r2, r0
 8023eac:	693b      	ldr	r3, [r7, #16]
 8023eae:	1ad3      	subs	r3, r2, r3
 8023eb0:	2b02      	cmp	r3, #2
 8023eb2:	d901      	bls.n	8023eb8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8023eb4:	2303      	movs	r3, #3
 8023eb6:	e078      	b.n	8023faa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8023eb8:	4b3f      	ldr	r3, [pc, #252]	; (8023fb8 <HAL_RCC_OscConfig+0x4d8>)
 8023eba:	681b      	ldr	r3, [r3, #0]
 8023ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8023ec0:	2b00      	cmp	r3, #0
 8023ec2:	d1f0      	bne.n	8023ea6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8023ec4:	687b      	ldr	r3, [r7, #4]
 8023ec6:	69da      	ldr	r2, [r3, #28]
 8023ec8:	687b      	ldr	r3, [r7, #4]
 8023eca:	6a1b      	ldr	r3, [r3, #32]
 8023ecc:	431a      	orrs	r2, r3
 8023ece:	687b      	ldr	r3, [r7, #4]
 8023ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023ed2:	019b      	lsls	r3, r3, #6
 8023ed4:	431a      	orrs	r2, r3
 8023ed6:	687b      	ldr	r3, [r7, #4]
 8023ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023eda:	085b      	lsrs	r3, r3, #1
 8023edc:	3b01      	subs	r3, #1
 8023ede:	041b      	lsls	r3, r3, #16
 8023ee0:	431a      	orrs	r2, r3
 8023ee2:	687b      	ldr	r3, [r7, #4]
 8023ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023ee6:	061b      	lsls	r3, r3, #24
 8023ee8:	4933      	ldr	r1, [pc, #204]	; (8023fb8 <HAL_RCC_OscConfig+0x4d8>)
 8023eea:	4313      	orrs	r3, r2
 8023eec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8023eee:	4b33      	ldr	r3, [pc, #204]	; (8023fbc <HAL_RCC_OscConfig+0x4dc>)
 8023ef0:	2201      	movs	r2, #1
 8023ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8023ef4:	f7fe fa66 	bl	80223c4 <HAL_GetTick>
 8023ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8023efa:	e008      	b.n	8023f0e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8023efc:	f7fe fa62 	bl	80223c4 <HAL_GetTick>
 8023f00:	4602      	mov	r2, r0
 8023f02:	693b      	ldr	r3, [r7, #16]
 8023f04:	1ad3      	subs	r3, r2, r3
 8023f06:	2b02      	cmp	r3, #2
 8023f08:	d901      	bls.n	8023f0e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8023f0a:	2303      	movs	r3, #3
 8023f0c:	e04d      	b.n	8023faa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8023f0e:	4b2a      	ldr	r3, [pc, #168]	; (8023fb8 <HAL_RCC_OscConfig+0x4d8>)
 8023f10:	681b      	ldr	r3, [r3, #0]
 8023f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8023f16:	2b00      	cmp	r3, #0
 8023f18:	d0f0      	beq.n	8023efc <HAL_RCC_OscConfig+0x41c>
 8023f1a:	e045      	b.n	8023fa8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8023f1c:	4b27      	ldr	r3, [pc, #156]	; (8023fbc <HAL_RCC_OscConfig+0x4dc>)
 8023f1e:	2200      	movs	r2, #0
 8023f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8023f22:	f7fe fa4f 	bl	80223c4 <HAL_GetTick>
 8023f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8023f28:	e008      	b.n	8023f3c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8023f2a:	f7fe fa4b 	bl	80223c4 <HAL_GetTick>
 8023f2e:	4602      	mov	r2, r0
 8023f30:	693b      	ldr	r3, [r7, #16]
 8023f32:	1ad3      	subs	r3, r2, r3
 8023f34:	2b02      	cmp	r3, #2
 8023f36:	d901      	bls.n	8023f3c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8023f38:	2303      	movs	r3, #3
 8023f3a:	e036      	b.n	8023faa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8023f3c:	4b1e      	ldr	r3, [pc, #120]	; (8023fb8 <HAL_RCC_OscConfig+0x4d8>)
 8023f3e:	681b      	ldr	r3, [r3, #0]
 8023f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8023f44:	2b00      	cmp	r3, #0
 8023f46:	d1f0      	bne.n	8023f2a <HAL_RCC_OscConfig+0x44a>
 8023f48:	e02e      	b.n	8023fa8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8023f4a:	687b      	ldr	r3, [r7, #4]
 8023f4c:	699b      	ldr	r3, [r3, #24]
 8023f4e:	2b01      	cmp	r3, #1
 8023f50:	d101      	bne.n	8023f56 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8023f52:	2301      	movs	r3, #1
 8023f54:	e029      	b.n	8023faa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8023f56:	4b18      	ldr	r3, [pc, #96]	; (8023fb8 <HAL_RCC_OscConfig+0x4d8>)
 8023f58:	685b      	ldr	r3, [r3, #4]
 8023f5a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8023f5c:	68fb      	ldr	r3, [r7, #12]
 8023f5e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8023f62:	687b      	ldr	r3, [r7, #4]
 8023f64:	69db      	ldr	r3, [r3, #28]
 8023f66:	429a      	cmp	r2, r3
 8023f68:	d11c      	bne.n	8023fa4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8023f6a:	68fb      	ldr	r3, [r7, #12]
 8023f6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8023f70:	687b      	ldr	r3, [r7, #4]
 8023f72:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8023f74:	429a      	cmp	r2, r3
 8023f76:	d115      	bne.n	8023fa4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8023f78:	68fa      	ldr	r2, [r7, #12]
 8023f7a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8023f7e:	4013      	ands	r3, r2
 8023f80:	687a      	ldr	r2, [r7, #4]
 8023f82:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8023f84:	4293      	cmp	r3, r2
 8023f86:	d10d      	bne.n	8023fa4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8023f88:	68fb      	ldr	r3, [r7, #12]
 8023f8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8023f8e:	687b      	ldr	r3, [r7, #4]
 8023f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8023f92:	429a      	cmp	r2, r3
 8023f94:	d106      	bne.n	8023fa4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8023f96:	68fb      	ldr	r3, [r7, #12]
 8023f98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8023f9c:	687b      	ldr	r3, [r7, #4]
 8023f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8023fa0:	429a      	cmp	r2, r3
 8023fa2:	d001      	beq.n	8023fa8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8023fa4:	2301      	movs	r3, #1
 8023fa6:	e000      	b.n	8023faa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8023fa8:	2300      	movs	r3, #0
}
 8023faa:	4618      	mov	r0, r3
 8023fac:	3718      	adds	r7, #24
 8023fae:	46bd      	mov	sp, r7
 8023fb0:	bd80      	pop	{r7, pc}
 8023fb2:	bf00      	nop
 8023fb4:	40007000 	.word	0x40007000
 8023fb8:	40023800 	.word	0x40023800
 8023fbc:	42470060 	.word	0x42470060

08023fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8023fc0:	b580      	push	{r7, lr}
 8023fc2:	b084      	sub	sp, #16
 8023fc4:	af00      	add	r7, sp, #0
 8023fc6:	6078      	str	r0, [r7, #4]
 8023fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8023fca:	687b      	ldr	r3, [r7, #4]
 8023fcc:	2b00      	cmp	r3, #0
 8023fce:	d101      	bne.n	8023fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8023fd0:	2301      	movs	r3, #1
 8023fd2:	e0cc      	b.n	802416e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8023fd4:	4b68      	ldr	r3, [pc, #416]	; (8024178 <HAL_RCC_ClockConfig+0x1b8>)
 8023fd6:	681b      	ldr	r3, [r3, #0]
 8023fd8:	f003 030f 	and.w	r3, r3, #15
 8023fdc:	683a      	ldr	r2, [r7, #0]
 8023fde:	429a      	cmp	r2, r3
 8023fe0:	d90c      	bls.n	8023ffc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8023fe2:	4b65      	ldr	r3, [pc, #404]	; (8024178 <HAL_RCC_ClockConfig+0x1b8>)
 8023fe4:	683a      	ldr	r2, [r7, #0]
 8023fe6:	b2d2      	uxtb	r2, r2
 8023fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8023fea:	4b63      	ldr	r3, [pc, #396]	; (8024178 <HAL_RCC_ClockConfig+0x1b8>)
 8023fec:	681b      	ldr	r3, [r3, #0]
 8023fee:	f003 030f 	and.w	r3, r3, #15
 8023ff2:	683a      	ldr	r2, [r7, #0]
 8023ff4:	429a      	cmp	r2, r3
 8023ff6:	d001      	beq.n	8023ffc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8023ff8:	2301      	movs	r3, #1
 8023ffa:	e0b8      	b.n	802416e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8023ffc:	687b      	ldr	r3, [r7, #4]
 8023ffe:	681b      	ldr	r3, [r3, #0]
 8024000:	f003 0302 	and.w	r3, r3, #2
 8024004:	2b00      	cmp	r3, #0
 8024006:	d020      	beq.n	802404a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8024008:	687b      	ldr	r3, [r7, #4]
 802400a:	681b      	ldr	r3, [r3, #0]
 802400c:	f003 0304 	and.w	r3, r3, #4
 8024010:	2b00      	cmp	r3, #0
 8024012:	d005      	beq.n	8024020 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8024014:	4b59      	ldr	r3, [pc, #356]	; (802417c <HAL_RCC_ClockConfig+0x1bc>)
 8024016:	689b      	ldr	r3, [r3, #8]
 8024018:	4a58      	ldr	r2, [pc, #352]	; (802417c <HAL_RCC_ClockConfig+0x1bc>)
 802401a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 802401e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8024020:	687b      	ldr	r3, [r7, #4]
 8024022:	681b      	ldr	r3, [r3, #0]
 8024024:	f003 0308 	and.w	r3, r3, #8
 8024028:	2b00      	cmp	r3, #0
 802402a:	d005      	beq.n	8024038 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 802402c:	4b53      	ldr	r3, [pc, #332]	; (802417c <HAL_RCC_ClockConfig+0x1bc>)
 802402e:	689b      	ldr	r3, [r3, #8]
 8024030:	4a52      	ldr	r2, [pc, #328]	; (802417c <HAL_RCC_ClockConfig+0x1bc>)
 8024032:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8024036:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8024038:	4b50      	ldr	r3, [pc, #320]	; (802417c <HAL_RCC_ClockConfig+0x1bc>)
 802403a:	689b      	ldr	r3, [r3, #8]
 802403c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8024040:	687b      	ldr	r3, [r7, #4]
 8024042:	689b      	ldr	r3, [r3, #8]
 8024044:	494d      	ldr	r1, [pc, #308]	; (802417c <HAL_RCC_ClockConfig+0x1bc>)
 8024046:	4313      	orrs	r3, r2
 8024048:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 802404a:	687b      	ldr	r3, [r7, #4]
 802404c:	681b      	ldr	r3, [r3, #0]
 802404e:	f003 0301 	and.w	r3, r3, #1
 8024052:	2b00      	cmp	r3, #0
 8024054:	d044      	beq.n	80240e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8024056:	687b      	ldr	r3, [r7, #4]
 8024058:	685b      	ldr	r3, [r3, #4]
 802405a:	2b01      	cmp	r3, #1
 802405c:	d107      	bne.n	802406e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802405e:	4b47      	ldr	r3, [pc, #284]	; (802417c <HAL_RCC_ClockConfig+0x1bc>)
 8024060:	681b      	ldr	r3, [r3, #0]
 8024062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8024066:	2b00      	cmp	r3, #0
 8024068:	d119      	bne.n	802409e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802406a:	2301      	movs	r3, #1
 802406c:	e07f      	b.n	802416e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802406e:	687b      	ldr	r3, [r7, #4]
 8024070:	685b      	ldr	r3, [r3, #4]
 8024072:	2b02      	cmp	r3, #2
 8024074:	d003      	beq.n	802407e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8024076:	687b      	ldr	r3, [r7, #4]
 8024078:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802407a:	2b03      	cmp	r3, #3
 802407c:	d107      	bne.n	802408e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802407e:	4b3f      	ldr	r3, [pc, #252]	; (802417c <HAL_RCC_ClockConfig+0x1bc>)
 8024080:	681b      	ldr	r3, [r3, #0]
 8024082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8024086:	2b00      	cmp	r3, #0
 8024088:	d109      	bne.n	802409e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802408a:	2301      	movs	r3, #1
 802408c:	e06f      	b.n	802416e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802408e:	4b3b      	ldr	r3, [pc, #236]	; (802417c <HAL_RCC_ClockConfig+0x1bc>)
 8024090:	681b      	ldr	r3, [r3, #0]
 8024092:	f003 0302 	and.w	r3, r3, #2
 8024096:	2b00      	cmp	r3, #0
 8024098:	d101      	bne.n	802409e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802409a:	2301      	movs	r3, #1
 802409c:	e067      	b.n	802416e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 802409e:	4b37      	ldr	r3, [pc, #220]	; (802417c <HAL_RCC_ClockConfig+0x1bc>)
 80240a0:	689b      	ldr	r3, [r3, #8]
 80240a2:	f023 0203 	bic.w	r2, r3, #3
 80240a6:	687b      	ldr	r3, [r7, #4]
 80240a8:	685b      	ldr	r3, [r3, #4]
 80240aa:	4934      	ldr	r1, [pc, #208]	; (802417c <HAL_RCC_ClockConfig+0x1bc>)
 80240ac:	4313      	orrs	r3, r2
 80240ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80240b0:	f7fe f988 	bl	80223c4 <HAL_GetTick>
 80240b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80240b6:	e00a      	b.n	80240ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80240b8:	f7fe f984 	bl	80223c4 <HAL_GetTick>
 80240bc:	4602      	mov	r2, r0
 80240be:	68fb      	ldr	r3, [r7, #12]
 80240c0:	1ad3      	subs	r3, r2, r3
 80240c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80240c6:	4293      	cmp	r3, r2
 80240c8:	d901      	bls.n	80240ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80240ca:	2303      	movs	r3, #3
 80240cc:	e04f      	b.n	802416e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80240ce:	4b2b      	ldr	r3, [pc, #172]	; (802417c <HAL_RCC_ClockConfig+0x1bc>)
 80240d0:	689b      	ldr	r3, [r3, #8]
 80240d2:	f003 020c 	and.w	r2, r3, #12
 80240d6:	687b      	ldr	r3, [r7, #4]
 80240d8:	685b      	ldr	r3, [r3, #4]
 80240da:	009b      	lsls	r3, r3, #2
 80240dc:	429a      	cmp	r2, r3
 80240de:	d1eb      	bne.n	80240b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80240e0:	4b25      	ldr	r3, [pc, #148]	; (8024178 <HAL_RCC_ClockConfig+0x1b8>)
 80240e2:	681b      	ldr	r3, [r3, #0]
 80240e4:	f003 030f 	and.w	r3, r3, #15
 80240e8:	683a      	ldr	r2, [r7, #0]
 80240ea:	429a      	cmp	r2, r3
 80240ec:	d20c      	bcs.n	8024108 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80240ee:	4b22      	ldr	r3, [pc, #136]	; (8024178 <HAL_RCC_ClockConfig+0x1b8>)
 80240f0:	683a      	ldr	r2, [r7, #0]
 80240f2:	b2d2      	uxtb	r2, r2
 80240f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80240f6:	4b20      	ldr	r3, [pc, #128]	; (8024178 <HAL_RCC_ClockConfig+0x1b8>)
 80240f8:	681b      	ldr	r3, [r3, #0]
 80240fa:	f003 030f 	and.w	r3, r3, #15
 80240fe:	683a      	ldr	r2, [r7, #0]
 8024100:	429a      	cmp	r2, r3
 8024102:	d001      	beq.n	8024108 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8024104:	2301      	movs	r3, #1
 8024106:	e032      	b.n	802416e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8024108:	687b      	ldr	r3, [r7, #4]
 802410a:	681b      	ldr	r3, [r3, #0]
 802410c:	f003 0304 	and.w	r3, r3, #4
 8024110:	2b00      	cmp	r3, #0
 8024112:	d008      	beq.n	8024126 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8024114:	4b19      	ldr	r3, [pc, #100]	; (802417c <HAL_RCC_ClockConfig+0x1bc>)
 8024116:	689b      	ldr	r3, [r3, #8]
 8024118:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 802411c:	687b      	ldr	r3, [r7, #4]
 802411e:	68db      	ldr	r3, [r3, #12]
 8024120:	4916      	ldr	r1, [pc, #88]	; (802417c <HAL_RCC_ClockConfig+0x1bc>)
 8024122:	4313      	orrs	r3, r2
 8024124:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8024126:	687b      	ldr	r3, [r7, #4]
 8024128:	681b      	ldr	r3, [r3, #0]
 802412a:	f003 0308 	and.w	r3, r3, #8
 802412e:	2b00      	cmp	r3, #0
 8024130:	d009      	beq.n	8024146 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8024132:	4b12      	ldr	r3, [pc, #72]	; (802417c <HAL_RCC_ClockConfig+0x1bc>)
 8024134:	689b      	ldr	r3, [r3, #8]
 8024136:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 802413a:	687b      	ldr	r3, [r7, #4]
 802413c:	691b      	ldr	r3, [r3, #16]
 802413e:	00db      	lsls	r3, r3, #3
 8024140:	490e      	ldr	r1, [pc, #56]	; (802417c <HAL_RCC_ClockConfig+0x1bc>)
 8024142:	4313      	orrs	r3, r2
 8024144:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8024146:	f000 f821 	bl	802418c <HAL_RCC_GetSysClockFreq>
 802414a:	4601      	mov	r1, r0
 802414c:	4b0b      	ldr	r3, [pc, #44]	; (802417c <HAL_RCC_ClockConfig+0x1bc>)
 802414e:	689b      	ldr	r3, [r3, #8]
 8024150:	091b      	lsrs	r3, r3, #4
 8024152:	f003 030f 	and.w	r3, r3, #15
 8024156:	4a0a      	ldr	r2, [pc, #40]	; (8024180 <HAL_RCC_ClockConfig+0x1c0>)
 8024158:	5cd3      	ldrb	r3, [r2, r3]
 802415a:	fa21 f303 	lsr.w	r3, r1, r3
 802415e:	4a09      	ldr	r2, [pc, #36]	; (8024184 <HAL_RCC_ClockConfig+0x1c4>)
 8024160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8024162:	4b09      	ldr	r3, [pc, #36]	; (8024188 <HAL_RCC_ClockConfig+0x1c8>)
 8024164:	681b      	ldr	r3, [r3, #0]
 8024166:	4618      	mov	r0, r3
 8024168:	f7fe f8e8 	bl	802233c <HAL_InitTick>

  return HAL_OK;
 802416c:	2300      	movs	r3, #0
}
 802416e:	4618      	mov	r0, r3
 8024170:	3710      	adds	r7, #16
 8024172:	46bd      	mov	sp, r7
 8024174:	bd80      	pop	{r7, pc}
 8024176:	bf00      	nop
 8024178:	40023c00 	.word	0x40023c00
 802417c:	40023800 	.word	0x40023800
 8024180:	0802543c 	.word	0x0802543c
 8024184:	20000000 	.word	0x20000000
 8024188:	20000004 	.word	0x20000004

0802418c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 802418c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802418e:	b085      	sub	sp, #20
 8024190:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8024192:	2300      	movs	r3, #0
 8024194:	607b      	str	r3, [r7, #4]
 8024196:	2300      	movs	r3, #0
 8024198:	60fb      	str	r3, [r7, #12]
 802419a:	2300      	movs	r3, #0
 802419c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 802419e:	2300      	movs	r3, #0
 80241a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80241a2:	4b50      	ldr	r3, [pc, #320]	; (80242e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80241a4:	689b      	ldr	r3, [r3, #8]
 80241a6:	f003 030c 	and.w	r3, r3, #12
 80241aa:	2b04      	cmp	r3, #4
 80241ac:	d007      	beq.n	80241be <HAL_RCC_GetSysClockFreq+0x32>
 80241ae:	2b08      	cmp	r3, #8
 80241b0:	d008      	beq.n	80241c4 <HAL_RCC_GetSysClockFreq+0x38>
 80241b2:	2b00      	cmp	r3, #0
 80241b4:	f040 808d 	bne.w	80242d2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80241b8:	4b4b      	ldr	r3, [pc, #300]	; (80242e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80241ba:	60bb      	str	r3, [r7, #8]
       break;
 80241bc:	e08c      	b.n	80242d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80241be:	4b4b      	ldr	r3, [pc, #300]	; (80242ec <HAL_RCC_GetSysClockFreq+0x160>)
 80241c0:	60bb      	str	r3, [r7, #8]
      break;
 80241c2:	e089      	b.n	80242d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80241c4:	4b47      	ldr	r3, [pc, #284]	; (80242e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80241c6:	685b      	ldr	r3, [r3, #4]
 80241c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80241cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80241ce:	4b45      	ldr	r3, [pc, #276]	; (80242e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80241d0:	685b      	ldr	r3, [r3, #4]
 80241d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80241d6:	2b00      	cmp	r3, #0
 80241d8:	d023      	beq.n	8024222 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80241da:	4b42      	ldr	r3, [pc, #264]	; (80242e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80241dc:	685b      	ldr	r3, [r3, #4]
 80241de:	099b      	lsrs	r3, r3, #6
 80241e0:	f04f 0400 	mov.w	r4, #0
 80241e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80241e8:	f04f 0200 	mov.w	r2, #0
 80241ec:	ea03 0501 	and.w	r5, r3, r1
 80241f0:	ea04 0602 	and.w	r6, r4, r2
 80241f4:	4a3d      	ldr	r2, [pc, #244]	; (80242ec <HAL_RCC_GetSysClockFreq+0x160>)
 80241f6:	fb02 f106 	mul.w	r1, r2, r6
 80241fa:	2200      	movs	r2, #0
 80241fc:	fb02 f205 	mul.w	r2, r2, r5
 8024200:	440a      	add	r2, r1
 8024202:	493a      	ldr	r1, [pc, #232]	; (80242ec <HAL_RCC_GetSysClockFreq+0x160>)
 8024204:	fba5 0101 	umull	r0, r1, r5, r1
 8024208:	1853      	adds	r3, r2, r1
 802420a:	4619      	mov	r1, r3
 802420c:	687b      	ldr	r3, [r7, #4]
 802420e:	f04f 0400 	mov.w	r4, #0
 8024212:	461a      	mov	r2, r3
 8024214:	4623      	mov	r3, r4
 8024216:	f7fb ff13 	bl	8020040 <__aeabi_uldivmod>
 802421a:	4603      	mov	r3, r0
 802421c:	460c      	mov	r4, r1
 802421e:	60fb      	str	r3, [r7, #12]
 8024220:	e049      	b.n	80242b6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8024222:	4b30      	ldr	r3, [pc, #192]	; (80242e4 <HAL_RCC_GetSysClockFreq+0x158>)
 8024224:	685b      	ldr	r3, [r3, #4]
 8024226:	099b      	lsrs	r3, r3, #6
 8024228:	f04f 0400 	mov.w	r4, #0
 802422c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8024230:	f04f 0200 	mov.w	r2, #0
 8024234:	ea03 0501 	and.w	r5, r3, r1
 8024238:	ea04 0602 	and.w	r6, r4, r2
 802423c:	4629      	mov	r1, r5
 802423e:	4632      	mov	r2, r6
 8024240:	f04f 0300 	mov.w	r3, #0
 8024244:	f04f 0400 	mov.w	r4, #0
 8024248:	0154      	lsls	r4, r2, #5
 802424a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 802424e:	014b      	lsls	r3, r1, #5
 8024250:	4619      	mov	r1, r3
 8024252:	4622      	mov	r2, r4
 8024254:	1b49      	subs	r1, r1, r5
 8024256:	eb62 0206 	sbc.w	r2, r2, r6
 802425a:	f04f 0300 	mov.w	r3, #0
 802425e:	f04f 0400 	mov.w	r4, #0
 8024262:	0194      	lsls	r4, r2, #6
 8024264:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8024268:	018b      	lsls	r3, r1, #6
 802426a:	1a5b      	subs	r3, r3, r1
 802426c:	eb64 0402 	sbc.w	r4, r4, r2
 8024270:	f04f 0100 	mov.w	r1, #0
 8024274:	f04f 0200 	mov.w	r2, #0
 8024278:	00e2      	lsls	r2, r4, #3
 802427a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 802427e:	00d9      	lsls	r1, r3, #3
 8024280:	460b      	mov	r3, r1
 8024282:	4614      	mov	r4, r2
 8024284:	195b      	adds	r3, r3, r5
 8024286:	eb44 0406 	adc.w	r4, r4, r6
 802428a:	f04f 0100 	mov.w	r1, #0
 802428e:	f04f 0200 	mov.w	r2, #0
 8024292:	02a2      	lsls	r2, r4, #10
 8024294:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8024298:	0299      	lsls	r1, r3, #10
 802429a:	460b      	mov	r3, r1
 802429c:	4614      	mov	r4, r2
 802429e:	4618      	mov	r0, r3
 80242a0:	4621      	mov	r1, r4
 80242a2:	687b      	ldr	r3, [r7, #4]
 80242a4:	f04f 0400 	mov.w	r4, #0
 80242a8:	461a      	mov	r2, r3
 80242aa:	4623      	mov	r3, r4
 80242ac:	f7fb fec8 	bl	8020040 <__aeabi_uldivmod>
 80242b0:	4603      	mov	r3, r0
 80242b2:	460c      	mov	r4, r1
 80242b4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80242b6:	4b0b      	ldr	r3, [pc, #44]	; (80242e4 <HAL_RCC_GetSysClockFreq+0x158>)
 80242b8:	685b      	ldr	r3, [r3, #4]
 80242ba:	0c1b      	lsrs	r3, r3, #16
 80242bc:	f003 0303 	and.w	r3, r3, #3
 80242c0:	3301      	adds	r3, #1
 80242c2:	005b      	lsls	r3, r3, #1
 80242c4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80242c6:	68fa      	ldr	r2, [r7, #12]
 80242c8:	683b      	ldr	r3, [r7, #0]
 80242ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80242ce:	60bb      	str	r3, [r7, #8]
      break;
 80242d0:	e002      	b.n	80242d8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80242d2:	4b05      	ldr	r3, [pc, #20]	; (80242e8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80242d4:	60bb      	str	r3, [r7, #8]
      break;
 80242d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80242d8:	68bb      	ldr	r3, [r7, #8]
}
 80242da:	4618      	mov	r0, r3
 80242dc:	3714      	adds	r7, #20
 80242de:	46bd      	mov	sp, r7
 80242e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80242e2:	bf00      	nop
 80242e4:	40023800 	.word	0x40023800
 80242e8:	00f42400 	.word	0x00f42400
 80242ec:	00b71b00 	.word	0x00b71b00

080242f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80242f0:	b480      	push	{r7}
 80242f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80242f4:	4b03      	ldr	r3, [pc, #12]	; (8024304 <HAL_RCC_GetHCLKFreq+0x14>)
 80242f6:	681b      	ldr	r3, [r3, #0]
}
 80242f8:	4618      	mov	r0, r3
 80242fa:	46bd      	mov	sp, r7
 80242fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024300:	4770      	bx	lr
 8024302:	bf00      	nop
 8024304:	20000000 	.word	0x20000000

08024308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8024308:	b580      	push	{r7, lr}
 802430a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 802430c:	f7ff fff0 	bl	80242f0 <HAL_RCC_GetHCLKFreq>
 8024310:	4601      	mov	r1, r0
 8024312:	4b05      	ldr	r3, [pc, #20]	; (8024328 <HAL_RCC_GetPCLK1Freq+0x20>)
 8024314:	689b      	ldr	r3, [r3, #8]
 8024316:	0a9b      	lsrs	r3, r3, #10
 8024318:	f003 0307 	and.w	r3, r3, #7
 802431c:	4a03      	ldr	r2, [pc, #12]	; (802432c <HAL_RCC_GetPCLK1Freq+0x24>)
 802431e:	5cd3      	ldrb	r3, [r2, r3]
 8024320:	fa21 f303 	lsr.w	r3, r1, r3
}
 8024324:	4618      	mov	r0, r3
 8024326:	bd80      	pop	{r7, pc}
 8024328:	40023800 	.word	0x40023800
 802432c:	0802544c 	.word	0x0802544c

08024330 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8024330:	b580      	push	{r7, lr}
 8024332:	b082      	sub	sp, #8
 8024334:	af00      	add	r7, sp, #0
 8024336:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8024338:	687b      	ldr	r3, [r7, #4]
 802433a:	2b00      	cmp	r3, #0
 802433c:	d101      	bne.n	8024342 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 802433e:	2301      	movs	r3, #1
 8024340:	e056      	b.n	80243f0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8024342:	687b      	ldr	r3, [r7, #4]
 8024344:	2200      	movs	r2, #0
 8024346:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8024348:	687b      	ldr	r3, [r7, #4]
 802434a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 802434e:	b2db      	uxtb	r3, r3
 8024350:	2b00      	cmp	r3, #0
 8024352:	d106      	bne.n	8024362 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8024354:	687b      	ldr	r3, [r7, #4]
 8024356:	2200      	movs	r2, #0
 8024358:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 802435c:	6878      	ldr	r0, [r7, #4]
 802435e:	f7fd fbbb 	bl	8021ad8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8024362:	687b      	ldr	r3, [r7, #4]
 8024364:	2202      	movs	r2, #2
 8024366:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 802436a:	687b      	ldr	r3, [r7, #4]
 802436c:	681b      	ldr	r3, [r3, #0]
 802436e:	681a      	ldr	r2, [r3, #0]
 8024370:	687b      	ldr	r3, [r7, #4]
 8024372:	681b      	ldr	r3, [r3, #0]
 8024374:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8024378:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 802437a:	687b      	ldr	r3, [r7, #4]
 802437c:	685a      	ldr	r2, [r3, #4]
 802437e:	687b      	ldr	r3, [r7, #4]
 8024380:	689b      	ldr	r3, [r3, #8]
 8024382:	431a      	orrs	r2, r3
 8024384:	687b      	ldr	r3, [r7, #4]
 8024386:	68db      	ldr	r3, [r3, #12]
 8024388:	431a      	orrs	r2, r3
 802438a:	687b      	ldr	r3, [r7, #4]
 802438c:	691b      	ldr	r3, [r3, #16]
 802438e:	431a      	orrs	r2, r3
 8024390:	687b      	ldr	r3, [r7, #4]
 8024392:	695b      	ldr	r3, [r3, #20]
 8024394:	431a      	orrs	r2, r3
 8024396:	687b      	ldr	r3, [r7, #4]
 8024398:	699b      	ldr	r3, [r3, #24]
 802439a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802439e:	431a      	orrs	r2, r3
 80243a0:	687b      	ldr	r3, [r7, #4]
 80243a2:	69db      	ldr	r3, [r3, #28]
 80243a4:	431a      	orrs	r2, r3
 80243a6:	687b      	ldr	r3, [r7, #4]
 80243a8:	6a1b      	ldr	r3, [r3, #32]
 80243aa:	ea42 0103 	orr.w	r1, r2, r3
 80243ae:	687b      	ldr	r3, [r7, #4]
 80243b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80243b2:	687b      	ldr	r3, [r7, #4]
 80243b4:	681b      	ldr	r3, [r3, #0]
 80243b6:	430a      	orrs	r2, r1
 80243b8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80243ba:	687b      	ldr	r3, [r7, #4]
 80243bc:	699b      	ldr	r3, [r3, #24]
 80243be:	0c1b      	lsrs	r3, r3, #16
 80243c0:	f003 0104 	and.w	r1, r3, #4
 80243c4:	687b      	ldr	r3, [r7, #4]
 80243c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80243c8:	687b      	ldr	r3, [r7, #4]
 80243ca:	681b      	ldr	r3, [r3, #0]
 80243cc:	430a      	orrs	r2, r1
 80243ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80243d0:	687b      	ldr	r3, [r7, #4]
 80243d2:	681b      	ldr	r3, [r3, #0]
 80243d4:	69da      	ldr	r2, [r3, #28]
 80243d6:	687b      	ldr	r3, [r7, #4]
 80243d8:	681b      	ldr	r3, [r3, #0]
 80243da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80243de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80243e0:	687b      	ldr	r3, [r7, #4]
 80243e2:	2200      	movs	r2, #0
 80243e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80243e6:	687b      	ldr	r3, [r7, #4]
 80243e8:	2201      	movs	r2, #1
 80243ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80243ee:	2300      	movs	r3, #0
}
 80243f0:	4618      	mov	r0, r3
 80243f2:	3708      	adds	r7, #8
 80243f4:	46bd      	mov	sp, r7
 80243f6:	bd80      	pop	{r7, pc}

080243f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80243f8:	b580      	push	{r7, lr}
 80243fa:	b082      	sub	sp, #8
 80243fc:	af00      	add	r7, sp, #0
 80243fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8024400:	687b      	ldr	r3, [r7, #4]
 8024402:	2b00      	cmp	r3, #0
 8024404:	d101      	bne.n	802440a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8024406:	2301      	movs	r3, #1
 8024408:	e01d      	b.n	8024446 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802440a:	687b      	ldr	r3, [r7, #4]
 802440c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8024410:	b2db      	uxtb	r3, r3
 8024412:	2b00      	cmp	r3, #0
 8024414:	d106      	bne.n	8024424 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8024416:	687b      	ldr	r3, [r7, #4]
 8024418:	2200      	movs	r2, #0
 802441a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 802441e:	6878      	ldr	r0, [r7, #4]
 8024420:	f7fd fbf0 	bl	8021c04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8024424:	687b      	ldr	r3, [r7, #4]
 8024426:	2202      	movs	r2, #2
 8024428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802442c:	687b      	ldr	r3, [r7, #4]
 802442e:	681a      	ldr	r2, [r3, #0]
 8024430:	687b      	ldr	r3, [r7, #4]
 8024432:	3304      	adds	r3, #4
 8024434:	4619      	mov	r1, r3
 8024436:	4610      	mov	r0, r2
 8024438:	f000 fbd6 	bl	8024be8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 802443c:	687b      	ldr	r3, [r7, #4]
 802443e:	2201      	movs	r2, #1
 8024440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8024444:	2300      	movs	r3, #0
}
 8024446:	4618      	mov	r0, r3
 8024448:	3708      	adds	r7, #8
 802444a:	46bd      	mov	sp, r7
 802444c:	bd80      	pop	{r7, pc}

0802444e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 802444e:	b480      	push	{r7}
 8024450:	b085      	sub	sp, #20
 8024452:	af00      	add	r7, sp, #0
 8024454:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8024456:	687b      	ldr	r3, [r7, #4]
 8024458:	681b      	ldr	r3, [r3, #0]
 802445a:	68da      	ldr	r2, [r3, #12]
 802445c:	687b      	ldr	r3, [r7, #4]
 802445e:	681b      	ldr	r3, [r3, #0]
 8024460:	f042 0201 	orr.w	r2, r2, #1
 8024464:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8024466:	687b      	ldr	r3, [r7, #4]
 8024468:	681b      	ldr	r3, [r3, #0]
 802446a:	689b      	ldr	r3, [r3, #8]
 802446c:	f003 0307 	and.w	r3, r3, #7
 8024470:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8024472:	68fb      	ldr	r3, [r7, #12]
 8024474:	2b06      	cmp	r3, #6
 8024476:	d007      	beq.n	8024488 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8024478:	687b      	ldr	r3, [r7, #4]
 802447a:	681b      	ldr	r3, [r3, #0]
 802447c:	681a      	ldr	r2, [r3, #0]
 802447e:	687b      	ldr	r3, [r7, #4]
 8024480:	681b      	ldr	r3, [r3, #0]
 8024482:	f042 0201 	orr.w	r2, r2, #1
 8024486:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8024488:	2300      	movs	r3, #0
}
 802448a:	4618      	mov	r0, r3
 802448c:	3714      	adds	r7, #20
 802448e:	46bd      	mov	sp, r7
 8024490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024494:	4770      	bx	lr

08024496 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8024496:	b580      	push	{r7, lr}
 8024498:	b082      	sub	sp, #8
 802449a:	af00      	add	r7, sp, #0
 802449c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 802449e:	687b      	ldr	r3, [r7, #4]
 80244a0:	2b00      	cmp	r3, #0
 80244a2:	d101      	bne.n	80244a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80244a4:	2301      	movs	r3, #1
 80244a6:	e01d      	b.n	80244e4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80244a8:	687b      	ldr	r3, [r7, #4]
 80244aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80244ae:	b2db      	uxtb	r3, r3
 80244b0:	2b00      	cmp	r3, #0
 80244b2:	d106      	bne.n	80244c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80244b4:	687b      	ldr	r3, [r7, #4]
 80244b6:	2200      	movs	r2, #0
 80244b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80244bc:	6878      	ldr	r0, [r7, #4]
 80244be:	f7fd fb53 	bl	8021b68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80244c2:	687b      	ldr	r3, [r7, #4]
 80244c4:	2202      	movs	r2, #2
 80244c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80244ca:	687b      	ldr	r3, [r7, #4]
 80244cc:	681a      	ldr	r2, [r3, #0]
 80244ce:	687b      	ldr	r3, [r7, #4]
 80244d0:	3304      	adds	r3, #4
 80244d2:	4619      	mov	r1, r3
 80244d4:	4610      	mov	r0, r2
 80244d6:	f000 fb87 	bl	8024be8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80244da:	687b      	ldr	r3, [r7, #4]
 80244dc:	2201      	movs	r2, #1
 80244de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80244e2:	2300      	movs	r3, #0
}
 80244e4:	4618      	mov	r0, r3
 80244e6:	3708      	adds	r7, #8
 80244e8:	46bd      	mov	sp, r7
 80244ea:	bd80      	pop	{r7, pc}

080244ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80244ec:	b580      	push	{r7, lr}
 80244ee:	b084      	sub	sp, #16
 80244f0:	af00      	add	r7, sp, #0
 80244f2:	6078      	str	r0, [r7, #4]
 80244f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80244f6:	687b      	ldr	r3, [r7, #4]
 80244f8:	681b      	ldr	r3, [r3, #0]
 80244fa:	2201      	movs	r2, #1
 80244fc:	6839      	ldr	r1, [r7, #0]
 80244fe:	4618      	mov	r0, r3
 8024500:	f000 fe5c 	bl	80251bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8024504:	687b      	ldr	r3, [r7, #4]
 8024506:	681b      	ldr	r3, [r3, #0]
 8024508:	4a15      	ldr	r2, [pc, #84]	; (8024560 <HAL_TIM_PWM_Start+0x74>)
 802450a:	4293      	cmp	r3, r2
 802450c:	d004      	beq.n	8024518 <HAL_TIM_PWM_Start+0x2c>
 802450e:	687b      	ldr	r3, [r7, #4]
 8024510:	681b      	ldr	r3, [r3, #0]
 8024512:	4a14      	ldr	r2, [pc, #80]	; (8024564 <HAL_TIM_PWM_Start+0x78>)
 8024514:	4293      	cmp	r3, r2
 8024516:	d101      	bne.n	802451c <HAL_TIM_PWM_Start+0x30>
 8024518:	2301      	movs	r3, #1
 802451a:	e000      	b.n	802451e <HAL_TIM_PWM_Start+0x32>
 802451c:	2300      	movs	r3, #0
 802451e:	2b00      	cmp	r3, #0
 8024520:	d007      	beq.n	8024532 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8024522:	687b      	ldr	r3, [r7, #4]
 8024524:	681b      	ldr	r3, [r3, #0]
 8024526:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8024528:	687b      	ldr	r3, [r7, #4]
 802452a:	681b      	ldr	r3, [r3, #0]
 802452c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8024530:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8024532:	687b      	ldr	r3, [r7, #4]
 8024534:	681b      	ldr	r3, [r3, #0]
 8024536:	689b      	ldr	r3, [r3, #8]
 8024538:	f003 0307 	and.w	r3, r3, #7
 802453c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802453e:	68fb      	ldr	r3, [r7, #12]
 8024540:	2b06      	cmp	r3, #6
 8024542:	d007      	beq.n	8024554 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8024544:	687b      	ldr	r3, [r7, #4]
 8024546:	681b      	ldr	r3, [r3, #0]
 8024548:	681a      	ldr	r2, [r3, #0]
 802454a:	687b      	ldr	r3, [r7, #4]
 802454c:	681b      	ldr	r3, [r3, #0]
 802454e:	f042 0201 	orr.w	r2, r2, #1
 8024552:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8024554:	2300      	movs	r3, #0
}
 8024556:	4618      	mov	r0, r3
 8024558:	3710      	adds	r7, #16
 802455a:	46bd      	mov	sp, r7
 802455c:	bd80      	pop	{r7, pc}
 802455e:	bf00      	nop
 8024560:	40010000 	.word	0x40010000
 8024564:	40010400 	.word	0x40010400

08024568 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8024568:	b580      	push	{r7, lr}
 802456a:	b086      	sub	sp, #24
 802456c:	af00      	add	r7, sp, #0
 802456e:	6078      	str	r0, [r7, #4]
 8024570:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8024572:	687b      	ldr	r3, [r7, #4]
 8024574:	2b00      	cmp	r3, #0
 8024576:	d101      	bne.n	802457c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8024578:	2301      	movs	r3, #1
 802457a:	e083      	b.n	8024684 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 802457c:	687b      	ldr	r3, [r7, #4]
 802457e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8024582:	b2db      	uxtb	r3, r3
 8024584:	2b00      	cmp	r3, #0
 8024586:	d106      	bne.n	8024596 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8024588:	687b      	ldr	r3, [r7, #4]
 802458a:	2200      	movs	r2, #0
 802458c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8024590:	6878      	ldr	r0, [r7, #4]
 8024592:	f7fd fbcd 	bl	8021d30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8024596:	687b      	ldr	r3, [r7, #4]
 8024598:	2202      	movs	r2, #2
 802459a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 802459e:	687b      	ldr	r3, [r7, #4]
 80245a0:	681b      	ldr	r3, [r3, #0]
 80245a2:	689b      	ldr	r3, [r3, #8]
 80245a4:	687a      	ldr	r2, [r7, #4]
 80245a6:	6812      	ldr	r2, [r2, #0]
 80245a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80245ac:	f023 0307 	bic.w	r3, r3, #7
 80245b0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80245b2:	687b      	ldr	r3, [r7, #4]
 80245b4:	681a      	ldr	r2, [r3, #0]
 80245b6:	687b      	ldr	r3, [r7, #4]
 80245b8:	3304      	adds	r3, #4
 80245ba:	4619      	mov	r1, r3
 80245bc:	4610      	mov	r0, r2
 80245be:	f000 fb13 	bl	8024be8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80245c2:	687b      	ldr	r3, [r7, #4]
 80245c4:	681b      	ldr	r3, [r3, #0]
 80245c6:	689b      	ldr	r3, [r3, #8]
 80245c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80245ca:	687b      	ldr	r3, [r7, #4]
 80245cc:	681b      	ldr	r3, [r3, #0]
 80245ce:	699b      	ldr	r3, [r3, #24]
 80245d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80245d2:	687b      	ldr	r3, [r7, #4]
 80245d4:	681b      	ldr	r3, [r3, #0]
 80245d6:	6a1b      	ldr	r3, [r3, #32]
 80245d8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80245da:	683b      	ldr	r3, [r7, #0]
 80245dc:	681b      	ldr	r3, [r3, #0]
 80245de:	697a      	ldr	r2, [r7, #20]
 80245e0:	4313      	orrs	r3, r2
 80245e2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80245e4:	693b      	ldr	r3, [r7, #16]
 80245e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80245ea:	f023 0303 	bic.w	r3, r3, #3
 80245ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80245f0:	683b      	ldr	r3, [r7, #0]
 80245f2:	689a      	ldr	r2, [r3, #8]
 80245f4:	683b      	ldr	r3, [r7, #0]
 80245f6:	699b      	ldr	r3, [r3, #24]
 80245f8:	021b      	lsls	r3, r3, #8
 80245fa:	4313      	orrs	r3, r2
 80245fc:	693a      	ldr	r2, [r7, #16]
 80245fe:	4313      	orrs	r3, r2
 8024600:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8024602:	693b      	ldr	r3, [r7, #16]
 8024604:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8024608:	f023 030c 	bic.w	r3, r3, #12
 802460c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 802460e:	693b      	ldr	r3, [r7, #16]
 8024610:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8024614:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8024618:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 802461a:	683b      	ldr	r3, [r7, #0]
 802461c:	68da      	ldr	r2, [r3, #12]
 802461e:	683b      	ldr	r3, [r7, #0]
 8024620:	69db      	ldr	r3, [r3, #28]
 8024622:	021b      	lsls	r3, r3, #8
 8024624:	4313      	orrs	r3, r2
 8024626:	693a      	ldr	r2, [r7, #16]
 8024628:	4313      	orrs	r3, r2
 802462a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 802462c:	683b      	ldr	r3, [r7, #0]
 802462e:	691b      	ldr	r3, [r3, #16]
 8024630:	011a      	lsls	r2, r3, #4
 8024632:	683b      	ldr	r3, [r7, #0]
 8024634:	6a1b      	ldr	r3, [r3, #32]
 8024636:	031b      	lsls	r3, r3, #12
 8024638:	4313      	orrs	r3, r2
 802463a:	693a      	ldr	r2, [r7, #16]
 802463c:	4313      	orrs	r3, r2
 802463e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8024640:	68fb      	ldr	r3, [r7, #12]
 8024642:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8024646:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8024648:	68fb      	ldr	r3, [r7, #12]
 802464a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 802464e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8024650:	683b      	ldr	r3, [r7, #0]
 8024652:	685a      	ldr	r2, [r3, #4]
 8024654:	683b      	ldr	r3, [r7, #0]
 8024656:	695b      	ldr	r3, [r3, #20]
 8024658:	011b      	lsls	r3, r3, #4
 802465a:	4313      	orrs	r3, r2
 802465c:	68fa      	ldr	r2, [r7, #12]
 802465e:	4313      	orrs	r3, r2
 8024660:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8024662:	687b      	ldr	r3, [r7, #4]
 8024664:	681b      	ldr	r3, [r3, #0]
 8024666:	697a      	ldr	r2, [r7, #20]
 8024668:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 802466a:	687b      	ldr	r3, [r7, #4]
 802466c:	681b      	ldr	r3, [r3, #0]
 802466e:	693a      	ldr	r2, [r7, #16]
 8024670:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8024672:	687b      	ldr	r3, [r7, #4]
 8024674:	681b      	ldr	r3, [r3, #0]
 8024676:	68fa      	ldr	r2, [r7, #12]
 8024678:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 802467a:	687b      	ldr	r3, [r7, #4]
 802467c:	2201      	movs	r2, #1
 802467e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8024682:	2300      	movs	r3, #0
}
 8024684:	4618      	mov	r0, r3
 8024686:	3718      	adds	r7, #24
 8024688:	46bd      	mov	sp, r7
 802468a:	bd80      	pop	{r7, pc}

0802468c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 802468c:	b580      	push	{r7, lr}
 802468e:	b082      	sub	sp, #8
 8024690:	af00      	add	r7, sp, #0
 8024692:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8024694:	687b      	ldr	r3, [r7, #4]
 8024696:	681b      	ldr	r3, [r3, #0]
 8024698:	691b      	ldr	r3, [r3, #16]
 802469a:	f003 0302 	and.w	r3, r3, #2
 802469e:	2b02      	cmp	r3, #2
 80246a0:	d122      	bne.n	80246e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80246a2:	687b      	ldr	r3, [r7, #4]
 80246a4:	681b      	ldr	r3, [r3, #0]
 80246a6:	68db      	ldr	r3, [r3, #12]
 80246a8:	f003 0302 	and.w	r3, r3, #2
 80246ac:	2b02      	cmp	r3, #2
 80246ae:	d11b      	bne.n	80246e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80246b0:	687b      	ldr	r3, [r7, #4]
 80246b2:	681b      	ldr	r3, [r3, #0]
 80246b4:	f06f 0202 	mvn.w	r2, #2
 80246b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80246ba:	687b      	ldr	r3, [r7, #4]
 80246bc:	2201      	movs	r2, #1
 80246be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80246c0:	687b      	ldr	r3, [r7, #4]
 80246c2:	681b      	ldr	r3, [r3, #0]
 80246c4:	699b      	ldr	r3, [r3, #24]
 80246c6:	f003 0303 	and.w	r3, r3, #3
 80246ca:	2b00      	cmp	r3, #0
 80246cc:	d003      	beq.n	80246d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80246ce:	6878      	ldr	r0, [r7, #4]
 80246d0:	f000 fa6b 	bl	8024baa <HAL_TIM_IC_CaptureCallback>
 80246d4:	e005      	b.n	80246e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80246d6:	6878      	ldr	r0, [r7, #4]
 80246d8:	f000 fa5d 	bl	8024b96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80246dc:	6878      	ldr	r0, [r7, #4]
 80246de:	f000 fa6e 	bl	8024bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80246e2:	687b      	ldr	r3, [r7, #4]
 80246e4:	2200      	movs	r2, #0
 80246e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80246e8:	687b      	ldr	r3, [r7, #4]
 80246ea:	681b      	ldr	r3, [r3, #0]
 80246ec:	691b      	ldr	r3, [r3, #16]
 80246ee:	f003 0304 	and.w	r3, r3, #4
 80246f2:	2b04      	cmp	r3, #4
 80246f4:	d122      	bne.n	802473c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80246f6:	687b      	ldr	r3, [r7, #4]
 80246f8:	681b      	ldr	r3, [r3, #0]
 80246fa:	68db      	ldr	r3, [r3, #12]
 80246fc:	f003 0304 	and.w	r3, r3, #4
 8024700:	2b04      	cmp	r3, #4
 8024702:	d11b      	bne.n	802473c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8024704:	687b      	ldr	r3, [r7, #4]
 8024706:	681b      	ldr	r3, [r3, #0]
 8024708:	f06f 0204 	mvn.w	r2, #4
 802470c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 802470e:	687b      	ldr	r3, [r7, #4]
 8024710:	2202      	movs	r2, #2
 8024712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8024714:	687b      	ldr	r3, [r7, #4]
 8024716:	681b      	ldr	r3, [r3, #0]
 8024718:	699b      	ldr	r3, [r3, #24]
 802471a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802471e:	2b00      	cmp	r3, #0
 8024720:	d003      	beq.n	802472a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8024722:	6878      	ldr	r0, [r7, #4]
 8024724:	f000 fa41 	bl	8024baa <HAL_TIM_IC_CaptureCallback>
 8024728:	e005      	b.n	8024736 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802472a:	6878      	ldr	r0, [r7, #4]
 802472c:	f000 fa33 	bl	8024b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8024730:	6878      	ldr	r0, [r7, #4]
 8024732:	f000 fa44 	bl	8024bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8024736:	687b      	ldr	r3, [r7, #4]
 8024738:	2200      	movs	r2, #0
 802473a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 802473c:	687b      	ldr	r3, [r7, #4]
 802473e:	681b      	ldr	r3, [r3, #0]
 8024740:	691b      	ldr	r3, [r3, #16]
 8024742:	f003 0308 	and.w	r3, r3, #8
 8024746:	2b08      	cmp	r3, #8
 8024748:	d122      	bne.n	8024790 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 802474a:	687b      	ldr	r3, [r7, #4]
 802474c:	681b      	ldr	r3, [r3, #0]
 802474e:	68db      	ldr	r3, [r3, #12]
 8024750:	f003 0308 	and.w	r3, r3, #8
 8024754:	2b08      	cmp	r3, #8
 8024756:	d11b      	bne.n	8024790 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8024758:	687b      	ldr	r3, [r7, #4]
 802475a:	681b      	ldr	r3, [r3, #0]
 802475c:	f06f 0208 	mvn.w	r2, #8
 8024760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8024762:	687b      	ldr	r3, [r7, #4]
 8024764:	2204      	movs	r2, #4
 8024766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8024768:	687b      	ldr	r3, [r7, #4]
 802476a:	681b      	ldr	r3, [r3, #0]
 802476c:	69db      	ldr	r3, [r3, #28]
 802476e:	f003 0303 	and.w	r3, r3, #3
 8024772:	2b00      	cmp	r3, #0
 8024774:	d003      	beq.n	802477e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8024776:	6878      	ldr	r0, [r7, #4]
 8024778:	f000 fa17 	bl	8024baa <HAL_TIM_IC_CaptureCallback>
 802477c:	e005      	b.n	802478a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802477e:	6878      	ldr	r0, [r7, #4]
 8024780:	f000 fa09 	bl	8024b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8024784:	6878      	ldr	r0, [r7, #4]
 8024786:	f000 fa1a 	bl	8024bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802478a:	687b      	ldr	r3, [r7, #4]
 802478c:	2200      	movs	r2, #0
 802478e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8024790:	687b      	ldr	r3, [r7, #4]
 8024792:	681b      	ldr	r3, [r3, #0]
 8024794:	691b      	ldr	r3, [r3, #16]
 8024796:	f003 0310 	and.w	r3, r3, #16
 802479a:	2b10      	cmp	r3, #16
 802479c:	d122      	bne.n	80247e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 802479e:	687b      	ldr	r3, [r7, #4]
 80247a0:	681b      	ldr	r3, [r3, #0]
 80247a2:	68db      	ldr	r3, [r3, #12]
 80247a4:	f003 0310 	and.w	r3, r3, #16
 80247a8:	2b10      	cmp	r3, #16
 80247aa:	d11b      	bne.n	80247e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80247ac:	687b      	ldr	r3, [r7, #4]
 80247ae:	681b      	ldr	r3, [r3, #0]
 80247b0:	f06f 0210 	mvn.w	r2, #16
 80247b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80247b6:	687b      	ldr	r3, [r7, #4]
 80247b8:	2208      	movs	r2, #8
 80247ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80247bc:	687b      	ldr	r3, [r7, #4]
 80247be:	681b      	ldr	r3, [r3, #0]
 80247c0:	69db      	ldr	r3, [r3, #28]
 80247c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80247c6:	2b00      	cmp	r3, #0
 80247c8:	d003      	beq.n	80247d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80247ca:	6878      	ldr	r0, [r7, #4]
 80247cc:	f000 f9ed 	bl	8024baa <HAL_TIM_IC_CaptureCallback>
 80247d0:	e005      	b.n	80247de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80247d2:	6878      	ldr	r0, [r7, #4]
 80247d4:	f000 f9df 	bl	8024b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80247d8:	6878      	ldr	r0, [r7, #4]
 80247da:	f000 f9f0 	bl	8024bbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80247de:	687b      	ldr	r3, [r7, #4]
 80247e0:	2200      	movs	r2, #0
 80247e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80247e4:	687b      	ldr	r3, [r7, #4]
 80247e6:	681b      	ldr	r3, [r3, #0]
 80247e8:	691b      	ldr	r3, [r3, #16]
 80247ea:	f003 0301 	and.w	r3, r3, #1
 80247ee:	2b01      	cmp	r3, #1
 80247f0:	d10e      	bne.n	8024810 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80247f2:	687b      	ldr	r3, [r7, #4]
 80247f4:	681b      	ldr	r3, [r3, #0]
 80247f6:	68db      	ldr	r3, [r3, #12]
 80247f8:	f003 0301 	and.w	r3, r3, #1
 80247fc:	2b01      	cmp	r3, #1
 80247fe:	d107      	bne.n	8024810 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8024800:	687b      	ldr	r3, [r7, #4]
 8024802:	681b      	ldr	r3, [r3, #0]
 8024804:	f06f 0201 	mvn.w	r2, #1
 8024808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 802480a:	6878      	ldr	r0, [r7, #4]
 802480c:	f7fc f9dc 	bl	8020bc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8024810:	687b      	ldr	r3, [r7, #4]
 8024812:	681b      	ldr	r3, [r3, #0]
 8024814:	691b      	ldr	r3, [r3, #16]
 8024816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802481a:	2b80      	cmp	r3, #128	; 0x80
 802481c:	d10e      	bne.n	802483c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 802481e:	687b      	ldr	r3, [r7, #4]
 8024820:	681b      	ldr	r3, [r3, #0]
 8024822:	68db      	ldr	r3, [r3, #12]
 8024824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024828:	2b80      	cmp	r3, #128	; 0x80
 802482a:	d107      	bne.n	802483c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 802482c:	687b      	ldr	r3, [r7, #4]
 802482e:	681b      	ldr	r3, [r3, #0]
 8024830:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8024834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8024836:	6878      	ldr	r0, [r7, #4]
 8024838:	f000 fdbe 	bl	80253b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 802483c:	687b      	ldr	r3, [r7, #4]
 802483e:	681b      	ldr	r3, [r3, #0]
 8024840:	691b      	ldr	r3, [r3, #16]
 8024842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024846:	2b40      	cmp	r3, #64	; 0x40
 8024848:	d10e      	bne.n	8024868 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 802484a:	687b      	ldr	r3, [r7, #4]
 802484c:	681b      	ldr	r3, [r3, #0]
 802484e:	68db      	ldr	r3, [r3, #12]
 8024850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8024854:	2b40      	cmp	r3, #64	; 0x40
 8024856:	d107      	bne.n	8024868 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8024858:	687b      	ldr	r3, [r7, #4]
 802485a:	681b      	ldr	r3, [r3, #0]
 802485c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8024860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8024862:	6878      	ldr	r0, [r7, #4]
 8024864:	f000 f9b5 	bl	8024bd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8024868:	687b      	ldr	r3, [r7, #4]
 802486a:	681b      	ldr	r3, [r3, #0]
 802486c:	691b      	ldr	r3, [r3, #16]
 802486e:	f003 0320 	and.w	r3, r3, #32
 8024872:	2b20      	cmp	r3, #32
 8024874:	d10e      	bne.n	8024894 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8024876:	687b      	ldr	r3, [r7, #4]
 8024878:	681b      	ldr	r3, [r3, #0]
 802487a:	68db      	ldr	r3, [r3, #12]
 802487c:	f003 0320 	and.w	r3, r3, #32
 8024880:	2b20      	cmp	r3, #32
 8024882:	d107      	bne.n	8024894 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8024884:	687b      	ldr	r3, [r7, #4]
 8024886:	681b      	ldr	r3, [r3, #0]
 8024888:	f06f 0220 	mvn.w	r2, #32
 802488c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 802488e:	6878      	ldr	r0, [r7, #4]
 8024890:	f000 fd88 	bl	80253a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8024894:	bf00      	nop
 8024896:	3708      	adds	r7, #8
 8024898:	46bd      	mov	sp, r7
 802489a:	bd80      	pop	{r7, pc}

0802489c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 802489c:	b580      	push	{r7, lr}
 802489e:	b084      	sub	sp, #16
 80248a0:	af00      	add	r7, sp, #0
 80248a2:	60f8      	str	r0, [r7, #12]
 80248a4:	60b9      	str	r1, [r7, #8]
 80248a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80248a8:	68fb      	ldr	r3, [r7, #12]
 80248aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80248ae:	2b01      	cmp	r3, #1
 80248b0:	d101      	bne.n	80248b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80248b2:	2302      	movs	r3, #2
 80248b4:	e0b4      	b.n	8024a20 <HAL_TIM_PWM_ConfigChannel+0x184>
 80248b6:	68fb      	ldr	r3, [r7, #12]
 80248b8:	2201      	movs	r2, #1
 80248ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80248be:	68fb      	ldr	r3, [r7, #12]
 80248c0:	2202      	movs	r2, #2
 80248c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80248c6:	687b      	ldr	r3, [r7, #4]
 80248c8:	2b0c      	cmp	r3, #12
 80248ca:	f200 809f 	bhi.w	8024a0c <HAL_TIM_PWM_ConfigChannel+0x170>
 80248ce:	a201      	add	r2, pc, #4	; (adr r2, 80248d4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80248d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80248d4:	08024909 	.word	0x08024909
 80248d8:	08024a0d 	.word	0x08024a0d
 80248dc:	08024a0d 	.word	0x08024a0d
 80248e0:	08024a0d 	.word	0x08024a0d
 80248e4:	08024949 	.word	0x08024949
 80248e8:	08024a0d 	.word	0x08024a0d
 80248ec:	08024a0d 	.word	0x08024a0d
 80248f0:	08024a0d 	.word	0x08024a0d
 80248f4:	0802498b 	.word	0x0802498b
 80248f8:	08024a0d 	.word	0x08024a0d
 80248fc:	08024a0d 	.word	0x08024a0d
 8024900:	08024a0d 	.word	0x08024a0d
 8024904:	080249cb 	.word	0x080249cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8024908:	68fb      	ldr	r3, [r7, #12]
 802490a:	681b      	ldr	r3, [r3, #0]
 802490c:	68b9      	ldr	r1, [r7, #8]
 802490e:	4618      	mov	r0, r3
 8024910:	f000 fa0a 	bl	8024d28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8024914:	68fb      	ldr	r3, [r7, #12]
 8024916:	681b      	ldr	r3, [r3, #0]
 8024918:	699a      	ldr	r2, [r3, #24]
 802491a:	68fb      	ldr	r3, [r7, #12]
 802491c:	681b      	ldr	r3, [r3, #0]
 802491e:	f042 0208 	orr.w	r2, r2, #8
 8024922:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8024924:	68fb      	ldr	r3, [r7, #12]
 8024926:	681b      	ldr	r3, [r3, #0]
 8024928:	699a      	ldr	r2, [r3, #24]
 802492a:	68fb      	ldr	r3, [r7, #12]
 802492c:	681b      	ldr	r3, [r3, #0]
 802492e:	f022 0204 	bic.w	r2, r2, #4
 8024932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8024934:	68fb      	ldr	r3, [r7, #12]
 8024936:	681b      	ldr	r3, [r3, #0]
 8024938:	6999      	ldr	r1, [r3, #24]
 802493a:	68bb      	ldr	r3, [r7, #8]
 802493c:	691a      	ldr	r2, [r3, #16]
 802493e:	68fb      	ldr	r3, [r7, #12]
 8024940:	681b      	ldr	r3, [r3, #0]
 8024942:	430a      	orrs	r2, r1
 8024944:	619a      	str	r2, [r3, #24]
      break;
 8024946:	e062      	b.n	8024a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8024948:	68fb      	ldr	r3, [r7, #12]
 802494a:	681b      	ldr	r3, [r3, #0]
 802494c:	68b9      	ldr	r1, [r7, #8]
 802494e:	4618      	mov	r0, r3
 8024950:	f000 fa5a 	bl	8024e08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8024954:	68fb      	ldr	r3, [r7, #12]
 8024956:	681b      	ldr	r3, [r3, #0]
 8024958:	699a      	ldr	r2, [r3, #24]
 802495a:	68fb      	ldr	r3, [r7, #12]
 802495c:	681b      	ldr	r3, [r3, #0]
 802495e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8024962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8024964:	68fb      	ldr	r3, [r7, #12]
 8024966:	681b      	ldr	r3, [r3, #0]
 8024968:	699a      	ldr	r2, [r3, #24]
 802496a:	68fb      	ldr	r3, [r7, #12]
 802496c:	681b      	ldr	r3, [r3, #0]
 802496e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8024972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8024974:	68fb      	ldr	r3, [r7, #12]
 8024976:	681b      	ldr	r3, [r3, #0]
 8024978:	6999      	ldr	r1, [r3, #24]
 802497a:	68bb      	ldr	r3, [r7, #8]
 802497c:	691b      	ldr	r3, [r3, #16]
 802497e:	021a      	lsls	r2, r3, #8
 8024980:	68fb      	ldr	r3, [r7, #12]
 8024982:	681b      	ldr	r3, [r3, #0]
 8024984:	430a      	orrs	r2, r1
 8024986:	619a      	str	r2, [r3, #24]
      break;
 8024988:	e041      	b.n	8024a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 802498a:	68fb      	ldr	r3, [r7, #12]
 802498c:	681b      	ldr	r3, [r3, #0]
 802498e:	68b9      	ldr	r1, [r7, #8]
 8024990:	4618      	mov	r0, r3
 8024992:	f000 faaf 	bl	8024ef4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8024996:	68fb      	ldr	r3, [r7, #12]
 8024998:	681b      	ldr	r3, [r3, #0]
 802499a:	69da      	ldr	r2, [r3, #28]
 802499c:	68fb      	ldr	r3, [r7, #12]
 802499e:	681b      	ldr	r3, [r3, #0]
 80249a0:	f042 0208 	orr.w	r2, r2, #8
 80249a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80249a6:	68fb      	ldr	r3, [r7, #12]
 80249a8:	681b      	ldr	r3, [r3, #0]
 80249aa:	69da      	ldr	r2, [r3, #28]
 80249ac:	68fb      	ldr	r3, [r7, #12]
 80249ae:	681b      	ldr	r3, [r3, #0]
 80249b0:	f022 0204 	bic.w	r2, r2, #4
 80249b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80249b6:	68fb      	ldr	r3, [r7, #12]
 80249b8:	681b      	ldr	r3, [r3, #0]
 80249ba:	69d9      	ldr	r1, [r3, #28]
 80249bc:	68bb      	ldr	r3, [r7, #8]
 80249be:	691a      	ldr	r2, [r3, #16]
 80249c0:	68fb      	ldr	r3, [r7, #12]
 80249c2:	681b      	ldr	r3, [r3, #0]
 80249c4:	430a      	orrs	r2, r1
 80249c6:	61da      	str	r2, [r3, #28]
      break;
 80249c8:	e021      	b.n	8024a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80249ca:	68fb      	ldr	r3, [r7, #12]
 80249cc:	681b      	ldr	r3, [r3, #0]
 80249ce:	68b9      	ldr	r1, [r7, #8]
 80249d0:	4618      	mov	r0, r3
 80249d2:	f000 fb03 	bl	8024fdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80249d6:	68fb      	ldr	r3, [r7, #12]
 80249d8:	681b      	ldr	r3, [r3, #0]
 80249da:	69da      	ldr	r2, [r3, #28]
 80249dc:	68fb      	ldr	r3, [r7, #12]
 80249de:	681b      	ldr	r3, [r3, #0]
 80249e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80249e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80249e6:	68fb      	ldr	r3, [r7, #12]
 80249e8:	681b      	ldr	r3, [r3, #0]
 80249ea:	69da      	ldr	r2, [r3, #28]
 80249ec:	68fb      	ldr	r3, [r7, #12]
 80249ee:	681b      	ldr	r3, [r3, #0]
 80249f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80249f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80249f6:	68fb      	ldr	r3, [r7, #12]
 80249f8:	681b      	ldr	r3, [r3, #0]
 80249fa:	69d9      	ldr	r1, [r3, #28]
 80249fc:	68bb      	ldr	r3, [r7, #8]
 80249fe:	691b      	ldr	r3, [r3, #16]
 8024a00:	021a      	lsls	r2, r3, #8
 8024a02:	68fb      	ldr	r3, [r7, #12]
 8024a04:	681b      	ldr	r3, [r3, #0]
 8024a06:	430a      	orrs	r2, r1
 8024a08:	61da      	str	r2, [r3, #28]
      break;
 8024a0a:	e000      	b.n	8024a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8024a0c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8024a0e:	68fb      	ldr	r3, [r7, #12]
 8024a10:	2201      	movs	r2, #1
 8024a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8024a16:	68fb      	ldr	r3, [r7, #12]
 8024a18:	2200      	movs	r2, #0
 8024a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8024a1e:	2300      	movs	r3, #0
}
 8024a20:	4618      	mov	r0, r3
 8024a22:	3710      	adds	r7, #16
 8024a24:	46bd      	mov	sp, r7
 8024a26:	bd80      	pop	{r7, pc}

08024a28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8024a28:	b580      	push	{r7, lr}
 8024a2a:	b084      	sub	sp, #16
 8024a2c:	af00      	add	r7, sp, #0
 8024a2e:	6078      	str	r0, [r7, #4]
 8024a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8024a32:	687b      	ldr	r3, [r7, #4]
 8024a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8024a38:	2b01      	cmp	r3, #1
 8024a3a:	d101      	bne.n	8024a40 <HAL_TIM_ConfigClockSource+0x18>
 8024a3c:	2302      	movs	r3, #2
 8024a3e:	e0a6      	b.n	8024b8e <HAL_TIM_ConfigClockSource+0x166>
 8024a40:	687b      	ldr	r3, [r7, #4]
 8024a42:	2201      	movs	r2, #1
 8024a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8024a48:	687b      	ldr	r3, [r7, #4]
 8024a4a:	2202      	movs	r2, #2
 8024a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8024a50:	687b      	ldr	r3, [r7, #4]
 8024a52:	681b      	ldr	r3, [r3, #0]
 8024a54:	689b      	ldr	r3, [r3, #8]
 8024a56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8024a58:	68fb      	ldr	r3, [r7, #12]
 8024a5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8024a5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8024a60:	68fb      	ldr	r3, [r7, #12]
 8024a62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8024a66:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8024a68:	687b      	ldr	r3, [r7, #4]
 8024a6a:	681b      	ldr	r3, [r3, #0]
 8024a6c:	68fa      	ldr	r2, [r7, #12]
 8024a6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8024a70:	683b      	ldr	r3, [r7, #0]
 8024a72:	681b      	ldr	r3, [r3, #0]
 8024a74:	2b40      	cmp	r3, #64	; 0x40
 8024a76:	d067      	beq.n	8024b48 <HAL_TIM_ConfigClockSource+0x120>
 8024a78:	2b40      	cmp	r3, #64	; 0x40
 8024a7a:	d80b      	bhi.n	8024a94 <HAL_TIM_ConfigClockSource+0x6c>
 8024a7c:	2b10      	cmp	r3, #16
 8024a7e:	d073      	beq.n	8024b68 <HAL_TIM_ConfigClockSource+0x140>
 8024a80:	2b10      	cmp	r3, #16
 8024a82:	d802      	bhi.n	8024a8a <HAL_TIM_ConfigClockSource+0x62>
 8024a84:	2b00      	cmp	r3, #0
 8024a86:	d06f      	beq.n	8024b68 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8024a88:	e078      	b.n	8024b7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8024a8a:	2b20      	cmp	r3, #32
 8024a8c:	d06c      	beq.n	8024b68 <HAL_TIM_ConfigClockSource+0x140>
 8024a8e:	2b30      	cmp	r3, #48	; 0x30
 8024a90:	d06a      	beq.n	8024b68 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8024a92:	e073      	b.n	8024b7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8024a94:	2b70      	cmp	r3, #112	; 0x70
 8024a96:	d00d      	beq.n	8024ab4 <HAL_TIM_ConfigClockSource+0x8c>
 8024a98:	2b70      	cmp	r3, #112	; 0x70
 8024a9a:	d804      	bhi.n	8024aa6 <HAL_TIM_ConfigClockSource+0x7e>
 8024a9c:	2b50      	cmp	r3, #80	; 0x50
 8024a9e:	d033      	beq.n	8024b08 <HAL_TIM_ConfigClockSource+0xe0>
 8024aa0:	2b60      	cmp	r3, #96	; 0x60
 8024aa2:	d041      	beq.n	8024b28 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8024aa4:	e06a      	b.n	8024b7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8024aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8024aaa:	d066      	beq.n	8024b7a <HAL_TIM_ConfigClockSource+0x152>
 8024aac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8024ab0:	d017      	beq.n	8024ae2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8024ab2:	e063      	b.n	8024b7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8024ab4:	687b      	ldr	r3, [r7, #4]
 8024ab6:	6818      	ldr	r0, [r3, #0]
 8024ab8:	683b      	ldr	r3, [r7, #0]
 8024aba:	6899      	ldr	r1, [r3, #8]
 8024abc:	683b      	ldr	r3, [r7, #0]
 8024abe:	685a      	ldr	r2, [r3, #4]
 8024ac0:	683b      	ldr	r3, [r7, #0]
 8024ac2:	68db      	ldr	r3, [r3, #12]
 8024ac4:	f000 fb5a 	bl	802517c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8024ac8:	687b      	ldr	r3, [r7, #4]
 8024aca:	681b      	ldr	r3, [r3, #0]
 8024acc:	689b      	ldr	r3, [r3, #8]
 8024ace:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8024ad0:	68fb      	ldr	r3, [r7, #12]
 8024ad2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8024ad6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8024ad8:	687b      	ldr	r3, [r7, #4]
 8024ada:	681b      	ldr	r3, [r3, #0]
 8024adc:	68fa      	ldr	r2, [r7, #12]
 8024ade:	609a      	str	r2, [r3, #8]
      break;
 8024ae0:	e04c      	b.n	8024b7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8024ae2:	687b      	ldr	r3, [r7, #4]
 8024ae4:	6818      	ldr	r0, [r3, #0]
 8024ae6:	683b      	ldr	r3, [r7, #0]
 8024ae8:	6899      	ldr	r1, [r3, #8]
 8024aea:	683b      	ldr	r3, [r7, #0]
 8024aec:	685a      	ldr	r2, [r3, #4]
 8024aee:	683b      	ldr	r3, [r7, #0]
 8024af0:	68db      	ldr	r3, [r3, #12]
 8024af2:	f000 fb43 	bl	802517c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8024af6:	687b      	ldr	r3, [r7, #4]
 8024af8:	681b      	ldr	r3, [r3, #0]
 8024afa:	689a      	ldr	r2, [r3, #8]
 8024afc:	687b      	ldr	r3, [r7, #4]
 8024afe:	681b      	ldr	r3, [r3, #0]
 8024b00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8024b04:	609a      	str	r2, [r3, #8]
      break;
 8024b06:	e039      	b.n	8024b7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8024b08:	687b      	ldr	r3, [r7, #4]
 8024b0a:	6818      	ldr	r0, [r3, #0]
 8024b0c:	683b      	ldr	r3, [r7, #0]
 8024b0e:	6859      	ldr	r1, [r3, #4]
 8024b10:	683b      	ldr	r3, [r7, #0]
 8024b12:	68db      	ldr	r3, [r3, #12]
 8024b14:	461a      	mov	r2, r3
 8024b16:	f000 fab7 	bl	8025088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8024b1a:	687b      	ldr	r3, [r7, #4]
 8024b1c:	681b      	ldr	r3, [r3, #0]
 8024b1e:	2150      	movs	r1, #80	; 0x50
 8024b20:	4618      	mov	r0, r3
 8024b22:	f000 fb10 	bl	8025146 <TIM_ITRx_SetConfig>
      break;
 8024b26:	e029      	b.n	8024b7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8024b28:	687b      	ldr	r3, [r7, #4]
 8024b2a:	6818      	ldr	r0, [r3, #0]
 8024b2c:	683b      	ldr	r3, [r7, #0]
 8024b2e:	6859      	ldr	r1, [r3, #4]
 8024b30:	683b      	ldr	r3, [r7, #0]
 8024b32:	68db      	ldr	r3, [r3, #12]
 8024b34:	461a      	mov	r2, r3
 8024b36:	f000 fad6 	bl	80250e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8024b3a:	687b      	ldr	r3, [r7, #4]
 8024b3c:	681b      	ldr	r3, [r3, #0]
 8024b3e:	2160      	movs	r1, #96	; 0x60
 8024b40:	4618      	mov	r0, r3
 8024b42:	f000 fb00 	bl	8025146 <TIM_ITRx_SetConfig>
      break;
 8024b46:	e019      	b.n	8024b7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8024b48:	687b      	ldr	r3, [r7, #4]
 8024b4a:	6818      	ldr	r0, [r3, #0]
 8024b4c:	683b      	ldr	r3, [r7, #0]
 8024b4e:	6859      	ldr	r1, [r3, #4]
 8024b50:	683b      	ldr	r3, [r7, #0]
 8024b52:	68db      	ldr	r3, [r3, #12]
 8024b54:	461a      	mov	r2, r3
 8024b56:	f000 fa97 	bl	8025088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8024b5a:	687b      	ldr	r3, [r7, #4]
 8024b5c:	681b      	ldr	r3, [r3, #0]
 8024b5e:	2140      	movs	r1, #64	; 0x40
 8024b60:	4618      	mov	r0, r3
 8024b62:	f000 faf0 	bl	8025146 <TIM_ITRx_SetConfig>
      break;
 8024b66:	e009      	b.n	8024b7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8024b68:	687b      	ldr	r3, [r7, #4]
 8024b6a:	681a      	ldr	r2, [r3, #0]
 8024b6c:	683b      	ldr	r3, [r7, #0]
 8024b6e:	681b      	ldr	r3, [r3, #0]
 8024b70:	4619      	mov	r1, r3
 8024b72:	4610      	mov	r0, r2
 8024b74:	f000 fae7 	bl	8025146 <TIM_ITRx_SetConfig>
      break;
 8024b78:	e000      	b.n	8024b7c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8024b7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8024b7c:	687b      	ldr	r3, [r7, #4]
 8024b7e:	2201      	movs	r2, #1
 8024b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8024b84:	687b      	ldr	r3, [r7, #4]
 8024b86:	2200      	movs	r2, #0
 8024b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8024b8c:	2300      	movs	r3, #0
}
 8024b8e:	4618      	mov	r0, r3
 8024b90:	3710      	adds	r7, #16
 8024b92:	46bd      	mov	sp, r7
 8024b94:	bd80      	pop	{r7, pc}

08024b96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8024b96:	b480      	push	{r7}
 8024b98:	b083      	sub	sp, #12
 8024b9a:	af00      	add	r7, sp, #0
 8024b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8024b9e:	bf00      	nop
 8024ba0:	370c      	adds	r7, #12
 8024ba2:	46bd      	mov	sp, r7
 8024ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ba8:	4770      	bx	lr

08024baa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8024baa:	b480      	push	{r7}
 8024bac:	b083      	sub	sp, #12
 8024bae:	af00      	add	r7, sp, #0
 8024bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8024bb2:	bf00      	nop
 8024bb4:	370c      	adds	r7, #12
 8024bb6:	46bd      	mov	sp, r7
 8024bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024bbc:	4770      	bx	lr

08024bbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8024bbe:	b480      	push	{r7}
 8024bc0:	b083      	sub	sp, #12
 8024bc2:	af00      	add	r7, sp, #0
 8024bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8024bc6:	bf00      	nop
 8024bc8:	370c      	adds	r7, #12
 8024bca:	46bd      	mov	sp, r7
 8024bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024bd0:	4770      	bx	lr

08024bd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8024bd2:	b480      	push	{r7}
 8024bd4:	b083      	sub	sp, #12
 8024bd6:	af00      	add	r7, sp, #0
 8024bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8024bda:	bf00      	nop
 8024bdc:	370c      	adds	r7, #12
 8024bde:	46bd      	mov	sp, r7
 8024be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024be4:	4770      	bx	lr
	...

08024be8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8024be8:	b480      	push	{r7}
 8024bea:	b085      	sub	sp, #20
 8024bec:	af00      	add	r7, sp, #0
 8024bee:	6078      	str	r0, [r7, #4]
 8024bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8024bf2:	687b      	ldr	r3, [r7, #4]
 8024bf4:	681b      	ldr	r3, [r3, #0]
 8024bf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8024bf8:	687b      	ldr	r3, [r7, #4]
 8024bfa:	4a40      	ldr	r2, [pc, #256]	; (8024cfc <TIM_Base_SetConfig+0x114>)
 8024bfc:	4293      	cmp	r3, r2
 8024bfe:	d013      	beq.n	8024c28 <TIM_Base_SetConfig+0x40>
 8024c00:	687b      	ldr	r3, [r7, #4]
 8024c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8024c06:	d00f      	beq.n	8024c28 <TIM_Base_SetConfig+0x40>
 8024c08:	687b      	ldr	r3, [r7, #4]
 8024c0a:	4a3d      	ldr	r2, [pc, #244]	; (8024d00 <TIM_Base_SetConfig+0x118>)
 8024c0c:	4293      	cmp	r3, r2
 8024c0e:	d00b      	beq.n	8024c28 <TIM_Base_SetConfig+0x40>
 8024c10:	687b      	ldr	r3, [r7, #4]
 8024c12:	4a3c      	ldr	r2, [pc, #240]	; (8024d04 <TIM_Base_SetConfig+0x11c>)
 8024c14:	4293      	cmp	r3, r2
 8024c16:	d007      	beq.n	8024c28 <TIM_Base_SetConfig+0x40>
 8024c18:	687b      	ldr	r3, [r7, #4]
 8024c1a:	4a3b      	ldr	r2, [pc, #236]	; (8024d08 <TIM_Base_SetConfig+0x120>)
 8024c1c:	4293      	cmp	r3, r2
 8024c1e:	d003      	beq.n	8024c28 <TIM_Base_SetConfig+0x40>
 8024c20:	687b      	ldr	r3, [r7, #4]
 8024c22:	4a3a      	ldr	r2, [pc, #232]	; (8024d0c <TIM_Base_SetConfig+0x124>)
 8024c24:	4293      	cmp	r3, r2
 8024c26:	d108      	bne.n	8024c3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8024c28:	68fb      	ldr	r3, [r7, #12]
 8024c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8024c2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8024c30:	683b      	ldr	r3, [r7, #0]
 8024c32:	685b      	ldr	r3, [r3, #4]
 8024c34:	68fa      	ldr	r2, [r7, #12]
 8024c36:	4313      	orrs	r3, r2
 8024c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8024c3a:	687b      	ldr	r3, [r7, #4]
 8024c3c:	4a2f      	ldr	r2, [pc, #188]	; (8024cfc <TIM_Base_SetConfig+0x114>)
 8024c3e:	4293      	cmp	r3, r2
 8024c40:	d02b      	beq.n	8024c9a <TIM_Base_SetConfig+0xb2>
 8024c42:	687b      	ldr	r3, [r7, #4]
 8024c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8024c48:	d027      	beq.n	8024c9a <TIM_Base_SetConfig+0xb2>
 8024c4a:	687b      	ldr	r3, [r7, #4]
 8024c4c:	4a2c      	ldr	r2, [pc, #176]	; (8024d00 <TIM_Base_SetConfig+0x118>)
 8024c4e:	4293      	cmp	r3, r2
 8024c50:	d023      	beq.n	8024c9a <TIM_Base_SetConfig+0xb2>
 8024c52:	687b      	ldr	r3, [r7, #4]
 8024c54:	4a2b      	ldr	r2, [pc, #172]	; (8024d04 <TIM_Base_SetConfig+0x11c>)
 8024c56:	4293      	cmp	r3, r2
 8024c58:	d01f      	beq.n	8024c9a <TIM_Base_SetConfig+0xb2>
 8024c5a:	687b      	ldr	r3, [r7, #4]
 8024c5c:	4a2a      	ldr	r2, [pc, #168]	; (8024d08 <TIM_Base_SetConfig+0x120>)
 8024c5e:	4293      	cmp	r3, r2
 8024c60:	d01b      	beq.n	8024c9a <TIM_Base_SetConfig+0xb2>
 8024c62:	687b      	ldr	r3, [r7, #4]
 8024c64:	4a29      	ldr	r2, [pc, #164]	; (8024d0c <TIM_Base_SetConfig+0x124>)
 8024c66:	4293      	cmp	r3, r2
 8024c68:	d017      	beq.n	8024c9a <TIM_Base_SetConfig+0xb2>
 8024c6a:	687b      	ldr	r3, [r7, #4]
 8024c6c:	4a28      	ldr	r2, [pc, #160]	; (8024d10 <TIM_Base_SetConfig+0x128>)
 8024c6e:	4293      	cmp	r3, r2
 8024c70:	d013      	beq.n	8024c9a <TIM_Base_SetConfig+0xb2>
 8024c72:	687b      	ldr	r3, [r7, #4]
 8024c74:	4a27      	ldr	r2, [pc, #156]	; (8024d14 <TIM_Base_SetConfig+0x12c>)
 8024c76:	4293      	cmp	r3, r2
 8024c78:	d00f      	beq.n	8024c9a <TIM_Base_SetConfig+0xb2>
 8024c7a:	687b      	ldr	r3, [r7, #4]
 8024c7c:	4a26      	ldr	r2, [pc, #152]	; (8024d18 <TIM_Base_SetConfig+0x130>)
 8024c7e:	4293      	cmp	r3, r2
 8024c80:	d00b      	beq.n	8024c9a <TIM_Base_SetConfig+0xb2>
 8024c82:	687b      	ldr	r3, [r7, #4]
 8024c84:	4a25      	ldr	r2, [pc, #148]	; (8024d1c <TIM_Base_SetConfig+0x134>)
 8024c86:	4293      	cmp	r3, r2
 8024c88:	d007      	beq.n	8024c9a <TIM_Base_SetConfig+0xb2>
 8024c8a:	687b      	ldr	r3, [r7, #4]
 8024c8c:	4a24      	ldr	r2, [pc, #144]	; (8024d20 <TIM_Base_SetConfig+0x138>)
 8024c8e:	4293      	cmp	r3, r2
 8024c90:	d003      	beq.n	8024c9a <TIM_Base_SetConfig+0xb2>
 8024c92:	687b      	ldr	r3, [r7, #4]
 8024c94:	4a23      	ldr	r2, [pc, #140]	; (8024d24 <TIM_Base_SetConfig+0x13c>)
 8024c96:	4293      	cmp	r3, r2
 8024c98:	d108      	bne.n	8024cac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8024c9a:	68fb      	ldr	r3, [r7, #12]
 8024c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8024ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8024ca2:	683b      	ldr	r3, [r7, #0]
 8024ca4:	68db      	ldr	r3, [r3, #12]
 8024ca6:	68fa      	ldr	r2, [r7, #12]
 8024ca8:	4313      	orrs	r3, r2
 8024caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8024cac:	68fb      	ldr	r3, [r7, #12]
 8024cae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8024cb2:	683b      	ldr	r3, [r7, #0]
 8024cb4:	695b      	ldr	r3, [r3, #20]
 8024cb6:	4313      	orrs	r3, r2
 8024cb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8024cba:	687b      	ldr	r3, [r7, #4]
 8024cbc:	68fa      	ldr	r2, [r7, #12]
 8024cbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8024cc0:	683b      	ldr	r3, [r7, #0]
 8024cc2:	689a      	ldr	r2, [r3, #8]
 8024cc4:	687b      	ldr	r3, [r7, #4]
 8024cc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8024cc8:	683b      	ldr	r3, [r7, #0]
 8024cca:	681a      	ldr	r2, [r3, #0]
 8024ccc:	687b      	ldr	r3, [r7, #4]
 8024cce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8024cd0:	687b      	ldr	r3, [r7, #4]
 8024cd2:	4a0a      	ldr	r2, [pc, #40]	; (8024cfc <TIM_Base_SetConfig+0x114>)
 8024cd4:	4293      	cmp	r3, r2
 8024cd6:	d003      	beq.n	8024ce0 <TIM_Base_SetConfig+0xf8>
 8024cd8:	687b      	ldr	r3, [r7, #4]
 8024cda:	4a0c      	ldr	r2, [pc, #48]	; (8024d0c <TIM_Base_SetConfig+0x124>)
 8024cdc:	4293      	cmp	r3, r2
 8024cde:	d103      	bne.n	8024ce8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8024ce0:	683b      	ldr	r3, [r7, #0]
 8024ce2:	691a      	ldr	r2, [r3, #16]
 8024ce4:	687b      	ldr	r3, [r7, #4]
 8024ce6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8024ce8:	687b      	ldr	r3, [r7, #4]
 8024cea:	2201      	movs	r2, #1
 8024cec:	615a      	str	r2, [r3, #20]
}
 8024cee:	bf00      	nop
 8024cf0:	3714      	adds	r7, #20
 8024cf2:	46bd      	mov	sp, r7
 8024cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024cf8:	4770      	bx	lr
 8024cfa:	bf00      	nop
 8024cfc:	40010000 	.word	0x40010000
 8024d00:	40000400 	.word	0x40000400
 8024d04:	40000800 	.word	0x40000800
 8024d08:	40000c00 	.word	0x40000c00
 8024d0c:	40010400 	.word	0x40010400
 8024d10:	40014000 	.word	0x40014000
 8024d14:	40014400 	.word	0x40014400
 8024d18:	40014800 	.word	0x40014800
 8024d1c:	40001800 	.word	0x40001800
 8024d20:	40001c00 	.word	0x40001c00
 8024d24:	40002000 	.word	0x40002000

08024d28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8024d28:	b480      	push	{r7}
 8024d2a:	b087      	sub	sp, #28
 8024d2c:	af00      	add	r7, sp, #0
 8024d2e:	6078      	str	r0, [r7, #4]
 8024d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8024d32:	687b      	ldr	r3, [r7, #4]
 8024d34:	6a1b      	ldr	r3, [r3, #32]
 8024d36:	f023 0201 	bic.w	r2, r3, #1
 8024d3a:	687b      	ldr	r3, [r7, #4]
 8024d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8024d3e:	687b      	ldr	r3, [r7, #4]
 8024d40:	6a1b      	ldr	r3, [r3, #32]
 8024d42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8024d44:	687b      	ldr	r3, [r7, #4]
 8024d46:	685b      	ldr	r3, [r3, #4]
 8024d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8024d4a:	687b      	ldr	r3, [r7, #4]
 8024d4c:	699b      	ldr	r3, [r3, #24]
 8024d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8024d50:	68fb      	ldr	r3, [r7, #12]
 8024d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8024d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8024d58:	68fb      	ldr	r3, [r7, #12]
 8024d5a:	f023 0303 	bic.w	r3, r3, #3
 8024d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8024d60:	683b      	ldr	r3, [r7, #0]
 8024d62:	681b      	ldr	r3, [r3, #0]
 8024d64:	68fa      	ldr	r2, [r7, #12]
 8024d66:	4313      	orrs	r3, r2
 8024d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8024d6a:	697b      	ldr	r3, [r7, #20]
 8024d6c:	f023 0302 	bic.w	r3, r3, #2
 8024d70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8024d72:	683b      	ldr	r3, [r7, #0]
 8024d74:	689b      	ldr	r3, [r3, #8]
 8024d76:	697a      	ldr	r2, [r7, #20]
 8024d78:	4313      	orrs	r3, r2
 8024d7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8024d7c:	687b      	ldr	r3, [r7, #4]
 8024d7e:	4a20      	ldr	r2, [pc, #128]	; (8024e00 <TIM_OC1_SetConfig+0xd8>)
 8024d80:	4293      	cmp	r3, r2
 8024d82:	d003      	beq.n	8024d8c <TIM_OC1_SetConfig+0x64>
 8024d84:	687b      	ldr	r3, [r7, #4]
 8024d86:	4a1f      	ldr	r2, [pc, #124]	; (8024e04 <TIM_OC1_SetConfig+0xdc>)
 8024d88:	4293      	cmp	r3, r2
 8024d8a:	d10c      	bne.n	8024da6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8024d8c:	697b      	ldr	r3, [r7, #20]
 8024d8e:	f023 0308 	bic.w	r3, r3, #8
 8024d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8024d94:	683b      	ldr	r3, [r7, #0]
 8024d96:	68db      	ldr	r3, [r3, #12]
 8024d98:	697a      	ldr	r2, [r7, #20]
 8024d9a:	4313      	orrs	r3, r2
 8024d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8024d9e:	697b      	ldr	r3, [r7, #20]
 8024da0:	f023 0304 	bic.w	r3, r3, #4
 8024da4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8024da6:	687b      	ldr	r3, [r7, #4]
 8024da8:	4a15      	ldr	r2, [pc, #84]	; (8024e00 <TIM_OC1_SetConfig+0xd8>)
 8024daa:	4293      	cmp	r3, r2
 8024dac:	d003      	beq.n	8024db6 <TIM_OC1_SetConfig+0x8e>
 8024dae:	687b      	ldr	r3, [r7, #4]
 8024db0:	4a14      	ldr	r2, [pc, #80]	; (8024e04 <TIM_OC1_SetConfig+0xdc>)
 8024db2:	4293      	cmp	r3, r2
 8024db4:	d111      	bne.n	8024dda <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8024db6:	693b      	ldr	r3, [r7, #16]
 8024db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8024dbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8024dbe:	693b      	ldr	r3, [r7, #16]
 8024dc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8024dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8024dc6:	683b      	ldr	r3, [r7, #0]
 8024dc8:	695b      	ldr	r3, [r3, #20]
 8024dca:	693a      	ldr	r2, [r7, #16]
 8024dcc:	4313      	orrs	r3, r2
 8024dce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8024dd0:	683b      	ldr	r3, [r7, #0]
 8024dd2:	699b      	ldr	r3, [r3, #24]
 8024dd4:	693a      	ldr	r2, [r7, #16]
 8024dd6:	4313      	orrs	r3, r2
 8024dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8024dda:	687b      	ldr	r3, [r7, #4]
 8024ddc:	693a      	ldr	r2, [r7, #16]
 8024dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8024de0:	687b      	ldr	r3, [r7, #4]
 8024de2:	68fa      	ldr	r2, [r7, #12]
 8024de4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8024de6:	683b      	ldr	r3, [r7, #0]
 8024de8:	685a      	ldr	r2, [r3, #4]
 8024dea:	687b      	ldr	r3, [r7, #4]
 8024dec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8024dee:	687b      	ldr	r3, [r7, #4]
 8024df0:	697a      	ldr	r2, [r7, #20]
 8024df2:	621a      	str	r2, [r3, #32]
}
 8024df4:	bf00      	nop
 8024df6:	371c      	adds	r7, #28
 8024df8:	46bd      	mov	sp, r7
 8024dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024dfe:	4770      	bx	lr
 8024e00:	40010000 	.word	0x40010000
 8024e04:	40010400 	.word	0x40010400

08024e08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8024e08:	b480      	push	{r7}
 8024e0a:	b087      	sub	sp, #28
 8024e0c:	af00      	add	r7, sp, #0
 8024e0e:	6078      	str	r0, [r7, #4]
 8024e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8024e12:	687b      	ldr	r3, [r7, #4]
 8024e14:	6a1b      	ldr	r3, [r3, #32]
 8024e16:	f023 0210 	bic.w	r2, r3, #16
 8024e1a:	687b      	ldr	r3, [r7, #4]
 8024e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8024e1e:	687b      	ldr	r3, [r7, #4]
 8024e20:	6a1b      	ldr	r3, [r3, #32]
 8024e22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8024e24:	687b      	ldr	r3, [r7, #4]
 8024e26:	685b      	ldr	r3, [r3, #4]
 8024e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8024e2a:	687b      	ldr	r3, [r7, #4]
 8024e2c:	699b      	ldr	r3, [r3, #24]
 8024e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8024e30:	68fb      	ldr	r3, [r7, #12]
 8024e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8024e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8024e38:	68fb      	ldr	r3, [r7, #12]
 8024e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8024e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8024e40:	683b      	ldr	r3, [r7, #0]
 8024e42:	681b      	ldr	r3, [r3, #0]
 8024e44:	021b      	lsls	r3, r3, #8
 8024e46:	68fa      	ldr	r2, [r7, #12]
 8024e48:	4313      	orrs	r3, r2
 8024e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8024e4c:	697b      	ldr	r3, [r7, #20]
 8024e4e:	f023 0320 	bic.w	r3, r3, #32
 8024e52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8024e54:	683b      	ldr	r3, [r7, #0]
 8024e56:	689b      	ldr	r3, [r3, #8]
 8024e58:	011b      	lsls	r3, r3, #4
 8024e5a:	697a      	ldr	r2, [r7, #20]
 8024e5c:	4313      	orrs	r3, r2
 8024e5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8024e60:	687b      	ldr	r3, [r7, #4]
 8024e62:	4a22      	ldr	r2, [pc, #136]	; (8024eec <TIM_OC2_SetConfig+0xe4>)
 8024e64:	4293      	cmp	r3, r2
 8024e66:	d003      	beq.n	8024e70 <TIM_OC2_SetConfig+0x68>
 8024e68:	687b      	ldr	r3, [r7, #4]
 8024e6a:	4a21      	ldr	r2, [pc, #132]	; (8024ef0 <TIM_OC2_SetConfig+0xe8>)
 8024e6c:	4293      	cmp	r3, r2
 8024e6e:	d10d      	bne.n	8024e8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8024e70:	697b      	ldr	r3, [r7, #20]
 8024e72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8024e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8024e78:	683b      	ldr	r3, [r7, #0]
 8024e7a:	68db      	ldr	r3, [r3, #12]
 8024e7c:	011b      	lsls	r3, r3, #4
 8024e7e:	697a      	ldr	r2, [r7, #20]
 8024e80:	4313      	orrs	r3, r2
 8024e82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8024e84:	697b      	ldr	r3, [r7, #20]
 8024e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8024e8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8024e8c:	687b      	ldr	r3, [r7, #4]
 8024e8e:	4a17      	ldr	r2, [pc, #92]	; (8024eec <TIM_OC2_SetConfig+0xe4>)
 8024e90:	4293      	cmp	r3, r2
 8024e92:	d003      	beq.n	8024e9c <TIM_OC2_SetConfig+0x94>
 8024e94:	687b      	ldr	r3, [r7, #4]
 8024e96:	4a16      	ldr	r2, [pc, #88]	; (8024ef0 <TIM_OC2_SetConfig+0xe8>)
 8024e98:	4293      	cmp	r3, r2
 8024e9a:	d113      	bne.n	8024ec4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8024e9c:	693b      	ldr	r3, [r7, #16]
 8024e9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8024ea2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8024ea4:	693b      	ldr	r3, [r7, #16]
 8024ea6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8024eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8024eac:	683b      	ldr	r3, [r7, #0]
 8024eae:	695b      	ldr	r3, [r3, #20]
 8024eb0:	009b      	lsls	r3, r3, #2
 8024eb2:	693a      	ldr	r2, [r7, #16]
 8024eb4:	4313      	orrs	r3, r2
 8024eb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8024eb8:	683b      	ldr	r3, [r7, #0]
 8024eba:	699b      	ldr	r3, [r3, #24]
 8024ebc:	009b      	lsls	r3, r3, #2
 8024ebe:	693a      	ldr	r2, [r7, #16]
 8024ec0:	4313      	orrs	r3, r2
 8024ec2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8024ec4:	687b      	ldr	r3, [r7, #4]
 8024ec6:	693a      	ldr	r2, [r7, #16]
 8024ec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8024eca:	687b      	ldr	r3, [r7, #4]
 8024ecc:	68fa      	ldr	r2, [r7, #12]
 8024ece:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8024ed0:	683b      	ldr	r3, [r7, #0]
 8024ed2:	685a      	ldr	r2, [r3, #4]
 8024ed4:	687b      	ldr	r3, [r7, #4]
 8024ed6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8024ed8:	687b      	ldr	r3, [r7, #4]
 8024eda:	697a      	ldr	r2, [r7, #20]
 8024edc:	621a      	str	r2, [r3, #32]
}
 8024ede:	bf00      	nop
 8024ee0:	371c      	adds	r7, #28
 8024ee2:	46bd      	mov	sp, r7
 8024ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ee8:	4770      	bx	lr
 8024eea:	bf00      	nop
 8024eec:	40010000 	.word	0x40010000
 8024ef0:	40010400 	.word	0x40010400

08024ef4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8024ef4:	b480      	push	{r7}
 8024ef6:	b087      	sub	sp, #28
 8024ef8:	af00      	add	r7, sp, #0
 8024efa:	6078      	str	r0, [r7, #4]
 8024efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8024efe:	687b      	ldr	r3, [r7, #4]
 8024f00:	6a1b      	ldr	r3, [r3, #32]
 8024f02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8024f06:	687b      	ldr	r3, [r7, #4]
 8024f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8024f0a:	687b      	ldr	r3, [r7, #4]
 8024f0c:	6a1b      	ldr	r3, [r3, #32]
 8024f0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8024f10:	687b      	ldr	r3, [r7, #4]
 8024f12:	685b      	ldr	r3, [r3, #4]
 8024f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8024f16:	687b      	ldr	r3, [r7, #4]
 8024f18:	69db      	ldr	r3, [r3, #28]
 8024f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8024f1c:	68fb      	ldr	r3, [r7, #12]
 8024f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8024f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8024f24:	68fb      	ldr	r3, [r7, #12]
 8024f26:	f023 0303 	bic.w	r3, r3, #3
 8024f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8024f2c:	683b      	ldr	r3, [r7, #0]
 8024f2e:	681b      	ldr	r3, [r3, #0]
 8024f30:	68fa      	ldr	r2, [r7, #12]
 8024f32:	4313      	orrs	r3, r2
 8024f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8024f36:	697b      	ldr	r3, [r7, #20]
 8024f38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8024f3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8024f3e:	683b      	ldr	r3, [r7, #0]
 8024f40:	689b      	ldr	r3, [r3, #8]
 8024f42:	021b      	lsls	r3, r3, #8
 8024f44:	697a      	ldr	r2, [r7, #20]
 8024f46:	4313      	orrs	r3, r2
 8024f48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8024f4a:	687b      	ldr	r3, [r7, #4]
 8024f4c:	4a21      	ldr	r2, [pc, #132]	; (8024fd4 <TIM_OC3_SetConfig+0xe0>)
 8024f4e:	4293      	cmp	r3, r2
 8024f50:	d003      	beq.n	8024f5a <TIM_OC3_SetConfig+0x66>
 8024f52:	687b      	ldr	r3, [r7, #4]
 8024f54:	4a20      	ldr	r2, [pc, #128]	; (8024fd8 <TIM_OC3_SetConfig+0xe4>)
 8024f56:	4293      	cmp	r3, r2
 8024f58:	d10d      	bne.n	8024f76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8024f5a:	697b      	ldr	r3, [r7, #20]
 8024f5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8024f60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8024f62:	683b      	ldr	r3, [r7, #0]
 8024f64:	68db      	ldr	r3, [r3, #12]
 8024f66:	021b      	lsls	r3, r3, #8
 8024f68:	697a      	ldr	r2, [r7, #20]
 8024f6a:	4313      	orrs	r3, r2
 8024f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8024f6e:	697b      	ldr	r3, [r7, #20]
 8024f70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8024f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8024f76:	687b      	ldr	r3, [r7, #4]
 8024f78:	4a16      	ldr	r2, [pc, #88]	; (8024fd4 <TIM_OC3_SetConfig+0xe0>)
 8024f7a:	4293      	cmp	r3, r2
 8024f7c:	d003      	beq.n	8024f86 <TIM_OC3_SetConfig+0x92>
 8024f7e:	687b      	ldr	r3, [r7, #4]
 8024f80:	4a15      	ldr	r2, [pc, #84]	; (8024fd8 <TIM_OC3_SetConfig+0xe4>)
 8024f82:	4293      	cmp	r3, r2
 8024f84:	d113      	bne.n	8024fae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8024f86:	693b      	ldr	r3, [r7, #16]
 8024f88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024f8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8024f8e:	693b      	ldr	r3, [r7, #16]
 8024f90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8024f94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8024f96:	683b      	ldr	r3, [r7, #0]
 8024f98:	695b      	ldr	r3, [r3, #20]
 8024f9a:	011b      	lsls	r3, r3, #4
 8024f9c:	693a      	ldr	r2, [r7, #16]
 8024f9e:	4313      	orrs	r3, r2
 8024fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8024fa2:	683b      	ldr	r3, [r7, #0]
 8024fa4:	699b      	ldr	r3, [r3, #24]
 8024fa6:	011b      	lsls	r3, r3, #4
 8024fa8:	693a      	ldr	r2, [r7, #16]
 8024faa:	4313      	orrs	r3, r2
 8024fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8024fae:	687b      	ldr	r3, [r7, #4]
 8024fb0:	693a      	ldr	r2, [r7, #16]
 8024fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8024fb4:	687b      	ldr	r3, [r7, #4]
 8024fb6:	68fa      	ldr	r2, [r7, #12]
 8024fb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8024fba:	683b      	ldr	r3, [r7, #0]
 8024fbc:	685a      	ldr	r2, [r3, #4]
 8024fbe:	687b      	ldr	r3, [r7, #4]
 8024fc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8024fc2:	687b      	ldr	r3, [r7, #4]
 8024fc4:	697a      	ldr	r2, [r7, #20]
 8024fc6:	621a      	str	r2, [r3, #32]
}
 8024fc8:	bf00      	nop
 8024fca:	371c      	adds	r7, #28
 8024fcc:	46bd      	mov	sp, r7
 8024fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024fd2:	4770      	bx	lr
 8024fd4:	40010000 	.word	0x40010000
 8024fd8:	40010400 	.word	0x40010400

08024fdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8024fdc:	b480      	push	{r7}
 8024fde:	b087      	sub	sp, #28
 8024fe0:	af00      	add	r7, sp, #0
 8024fe2:	6078      	str	r0, [r7, #4]
 8024fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8024fe6:	687b      	ldr	r3, [r7, #4]
 8024fe8:	6a1b      	ldr	r3, [r3, #32]
 8024fea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8024fee:	687b      	ldr	r3, [r7, #4]
 8024ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8024ff2:	687b      	ldr	r3, [r7, #4]
 8024ff4:	6a1b      	ldr	r3, [r3, #32]
 8024ff6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8024ff8:	687b      	ldr	r3, [r7, #4]
 8024ffa:	685b      	ldr	r3, [r3, #4]
 8024ffc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8024ffe:	687b      	ldr	r3, [r7, #4]
 8025000:	69db      	ldr	r3, [r3, #28]
 8025002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8025004:	68fb      	ldr	r3, [r7, #12]
 8025006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 802500a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 802500c:	68fb      	ldr	r3, [r7, #12]
 802500e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8025012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8025014:	683b      	ldr	r3, [r7, #0]
 8025016:	681b      	ldr	r3, [r3, #0]
 8025018:	021b      	lsls	r3, r3, #8
 802501a:	68fa      	ldr	r2, [r7, #12]
 802501c:	4313      	orrs	r3, r2
 802501e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8025020:	693b      	ldr	r3, [r7, #16]
 8025022:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8025026:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8025028:	683b      	ldr	r3, [r7, #0]
 802502a:	689b      	ldr	r3, [r3, #8]
 802502c:	031b      	lsls	r3, r3, #12
 802502e:	693a      	ldr	r2, [r7, #16]
 8025030:	4313      	orrs	r3, r2
 8025032:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8025034:	687b      	ldr	r3, [r7, #4]
 8025036:	4a12      	ldr	r2, [pc, #72]	; (8025080 <TIM_OC4_SetConfig+0xa4>)
 8025038:	4293      	cmp	r3, r2
 802503a:	d003      	beq.n	8025044 <TIM_OC4_SetConfig+0x68>
 802503c:	687b      	ldr	r3, [r7, #4]
 802503e:	4a11      	ldr	r2, [pc, #68]	; (8025084 <TIM_OC4_SetConfig+0xa8>)
 8025040:	4293      	cmp	r3, r2
 8025042:	d109      	bne.n	8025058 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8025044:	697b      	ldr	r3, [r7, #20]
 8025046:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 802504a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 802504c:	683b      	ldr	r3, [r7, #0]
 802504e:	695b      	ldr	r3, [r3, #20]
 8025050:	019b      	lsls	r3, r3, #6
 8025052:	697a      	ldr	r2, [r7, #20]
 8025054:	4313      	orrs	r3, r2
 8025056:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8025058:	687b      	ldr	r3, [r7, #4]
 802505a:	697a      	ldr	r2, [r7, #20]
 802505c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 802505e:	687b      	ldr	r3, [r7, #4]
 8025060:	68fa      	ldr	r2, [r7, #12]
 8025062:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8025064:	683b      	ldr	r3, [r7, #0]
 8025066:	685a      	ldr	r2, [r3, #4]
 8025068:	687b      	ldr	r3, [r7, #4]
 802506a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802506c:	687b      	ldr	r3, [r7, #4]
 802506e:	693a      	ldr	r2, [r7, #16]
 8025070:	621a      	str	r2, [r3, #32]
}
 8025072:	bf00      	nop
 8025074:	371c      	adds	r7, #28
 8025076:	46bd      	mov	sp, r7
 8025078:	f85d 7b04 	ldr.w	r7, [sp], #4
 802507c:	4770      	bx	lr
 802507e:	bf00      	nop
 8025080:	40010000 	.word	0x40010000
 8025084:	40010400 	.word	0x40010400

08025088 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8025088:	b480      	push	{r7}
 802508a:	b087      	sub	sp, #28
 802508c:	af00      	add	r7, sp, #0
 802508e:	60f8      	str	r0, [r7, #12]
 8025090:	60b9      	str	r1, [r7, #8]
 8025092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8025094:	68fb      	ldr	r3, [r7, #12]
 8025096:	6a1b      	ldr	r3, [r3, #32]
 8025098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802509a:	68fb      	ldr	r3, [r7, #12]
 802509c:	6a1b      	ldr	r3, [r3, #32]
 802509e:	f023 0201 	bic.w	r2, r3, #1
 80250a2:	68fb      	ldr	r3, [r7, #12]
 80250a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80250a6:	68fb      	ldr	r3, [r7, #12]
 80250a8:	699b      	ldr	r3, [r3, #24]
 80250aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80250ac:	693b      	ldr	r3, [r7, #16]
 80250ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80250b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80250b4:	687b      	ldr	r3, [r7, #4]
 80250b6:	011b      	lsls	r3, r3, #4
 80250b8:	693a      	ldr	r2, [r7, #16]
 80250ba:	4313      	orrs	r3, r2
 80250bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80250be:	697b      	ldr	r3, [r7, #20]
 80250c0:	f023 030a 	bic.w	r3, r3, #10
 80250c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80250c6:	697a      	ldr	r2, [r7, #20]
 80250c8:	68bb      	ldr	r3, [r7, #8]
 80250ca:	4313      	orrs	r3, r2
 80250cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80250ce:	68fb      	ldr	r3, [r7, #12]
 80250d0:	693a      	ldr	r2, [r7, #16]
 80250d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80250d4:	68fb      	ldr	r3, [r7, #12]
 80250d6:	697a      	ldr	r2, [r7, #20]
 80250d8:	621a      	str	r2, [r3, #32]
}
 80250da:	bf00      	nop
 80250dc:	371c      	adds	r7, #28
 80250de:	46bd      	mov	sp, r7
 80250e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80250e4:	4770      	bx	lr

080250e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80250e6:	b480      	push	{r7}
 80250e8:	b087      	sub	sp, #28
 80250ea:	af00      	add	r7, sp, #0
 80250ec:	60f8      	str	r0, [r7, #12]
 80250ee:	60b9      	str	r1, [r7, #8]
 80250f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80250f2:	68fb      	ldr	r3, [r7, #12]
 80250f4:	6a1b      	ldr	r3, [r3, #32]
 80250f6:	f023 0210 	bic.w	r2, r3, #16
 80250fa:	68fb      	ldr	r3, [r7, #12]
 80250fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80250fe:	68fb      	ldr	r3, [r7, #12]
 8025100:	699b      	ldr	r3, [r3, #24]
 8025102:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8025104:	68fb      	ldr	r3, [r7, #12]
 8025106:	6a1b      	ldr	r3, [r3, #32]
 8025108:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 802510a:	697b      	ldr	r3, [r7, #20]
 802510c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8025110:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8025112:	687b      	ldr	r3, [r7, #4]
 8025114:	031b      	lsls	r3, r3, #12
 8025116:	697a      	ldr	r2, [r7, #20]
 8025118:	4313      	orrs	r3, r2
 802511a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 802511c:	693b      	ldr	r3, [r7, #16]
 802511e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8025122:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8025124:	68bb      	ldr	r3, [r7, #8]
 8025126:	011b      	lsls	r3, r3, #4
 8025128:	693a      	ldr	r2, [r7, #16]
 802512a:	4313      	orrs	r3, r2
 802512c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 802512e:	68fb      	ldr	r3, [r7, #12]
 8025130:	697a      	ldr	r2, [r7, #20]
 8025132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8025134:	68fb      	ldr	r3, [r7, #12]
 8025136:	693a      	ldr	r2, [r7, #16]
 8025138:	621a      	str	r2, [r3, #32]
}
 802513a:	bf00      	nop
 802513c:	371c      	adds	r7, #28
 802513e:	46bd      	mov	sp, r7
 8025140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025144:	4770      	bx	lr

08025146 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8025146:	b480      	push	{r7}
 8025148:	b085      	sub	sp, #20
 802514a:	af00      	add	r7, sp, #0
 802514c:	6078      	str	r0, [r7, #4]
 802514e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8025150:	687b      	ldr	r3, [r7, #4]
 8025152:	689b      	ldr	r3, [r3, #8]
 8025154:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8025156:	68fb      	ldr	r3, [r7, #12]
 8025158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802515c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 802515e:	683a      	ldr	r2, [r7, #0]
 8025160:	68fb      	ldr	r3, [r7, #12]
 8025162:	4313      	orrs	r3, r2
 8025164:	f043 0307 	orr.w	r3, r3, #7
 8025168:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 802516a:	687b      	ldr	r3, [r7, #4]
 802516c:	68fa      	ldr	r2, [r7, #12]
 802516e:	609a      	str	r2, [r3, #8]
}
 8025170:	bf00      	nop
 8025172:	3714      	adds	r7, #20
 8025174:	46bd      	mov	sp, r7
 8025176:	f85d 7b04 	ldr.w	r7, [sp], #4
 802517a:	4770      	bx	lr

0802517c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 802517c:	b480      	push	{r7}
 802517e:	b087      	sub	sp, #28
 8025180:	af00      	add	r7, sp, #0
 8025182:	60f8      	str	r0, [r7, #12]
 8025184:	60b9      	str	r1, [r7, #8]
 8025186:	607a      	str	r2, [r7, #4]
 8025188:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 802518a:	68fb      	ldr	r3, [r7, #12]
 802518c:	689b      	ldr	r3, [r3, #8]
 802518e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8025190:	697b      	ldr	r3, [r7, #20]
 8025192:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8025196:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8025198:	683b      	ldr	r3, [r7, #0]
 802519a:	021a      	lsls	r2, r3, #8
 802519c:	687b      	ldr	r3, [r7, #4]
 802519e:	431a      	orrs	r2, r3
 80251a0:	68bb      	ldr	r3, [r7, #8]
 80251a2:	4313      	orrs	r3, r2
 80251a4:	697a      	ldr	r2, [r7, #20]
 80251a6:	4313      	orrs	r3, r2
 80251a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80251aa:	68fb      	ldr	r3, [r7, #12]
 80251ac:	697a      	ldr	r2, [r7, #20]
 80251ae:	609a      	str	r2, [r3, #8]
}
 80251b0:	bf00      	nop
 80251b2:	371c      	adds	r7, #28
 80251b4:	46bd      	mov	sp, r7
 80251b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80251ba:	4770      	bx	lr

080251bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80251bc:	b480      	push	{r7}
 80251be:	b087      	sub	sp, #28
 80251c0:	af00      	add	r7, sp, #0
 80251c2:	60f8      	str	r0, [r7, #12]
 80251c4:	60b9      	str	r1, [r7, #8]
 80251c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80251c8:	68bb      	ldr	r3, [r7, #8]
 80251ca:	f003 031f 	and.w	r3, r3, #31
 80251ce:	2201      	movs	r2, #1
 80251d0:	fa02 f303 	lsl.w	r3, r2, r3
 80251d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80251d6:	68fb      	ldr	r3, [r7, #12]
 80251d8:	6a1a      	ldr	r2, [r3, #32]
 80251da:	697b      	ldr	r3, [r7, #20]
 80251dc:	43db      	mvns	r3, r3
 80251de:	401a      	ands	r2, r3
 80251e0:	68fb      	ldr	r3, [r7, #12]
 80251e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80251e4:	68fb      	ldr	r3, [r7, #12]
 80251e6:	6a1a      	ldr	r2, [r3, #32]
 80251e8:	68bb      	ldr	r3, [r7, #8]
 80251ea:	f003 031f 	and.w	r3, r3, #31
 80251ee:	6879      	ldr	r1, [r7, #4]
 80251f0:	fa01 f303 	lsl.w	r3, r1, r3
 80251f4:	431a      	orrs	r2, r3
 80251f6:	68fb      	ldr	r3, [r7, #12]
 80251f8:	621a      	str	r2, [r3, #32]
}
 80251fa:	bf00      	nop
 80251fc:	371c      	adds	r7, #28
 80251fe:	46bd      	mov	sp, r7
 8025200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025204:	4770      	bx	lr
	...

08025208 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8025208:	b480      	push	{r7}
 802520a:	b085      	sub	sp, #20
 802520c:	af00      	add	r7, sp, #0
 802520e:	6078      	str	r0, [r7, #4]
 8025210:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8025212:	687b      	ldr	r3, [r7, #4]
 8025214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8025218:	2b01      	cmp	r3, #1
 802521a:	d101      	bne.n	8025220 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 802521c:	2302      	movs	r3, #2
 802521e:	e05a      	b.n	80252d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8025220:	687b      	ldr	r3, [r7, #4]
 8025222:	2201      	movs	r2, #1
 8025224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8025228:	687b      	ldr	r3, [r7, #4]
 802522a:	2202      	movs	r2, #2
 802522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8025230:	687b      	ldr	r3, [r7, #4]
 8025232:	681b      	ldr	r3, [r3, #0]
 8025234:	685b      	ldr	r3, [r3, #4]
 8025236:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8025238:	687b      	ldr	r3, [r7, #4]
 802523a:	681b      	ldr	r3, [r3, #0]
 802523c:	689b      	ldr	r3, [r3, #8]
 802523e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8025240:	68fb      	ldr	r3, [r7, #12]
 8025242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8025246:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8025248:	683b      	ldr	r3, [r7, #0]
 802524a:	681b      	ldr	r3, [r3, #0]
 802524c:	68fa      	ldr	r2, [r7, #12]
 802524e:	4313      	orrs	r3, r2
 8025250:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8025252:	687b      	ldr	r3, [r7, #4]
 8025254:	681b      	ldr	r3, [r3, #0]
 8025256:	68fa      	ldr	r2, [r7, #12]
 8025258:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802525a:	687b      	ldr	r3, [r7, #4]
 802525c:	681b      	ldr	r3, [r3, #0]
 802525e:	4a21      	ldr	r2, [pc, #132]	; (80252e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8025260:	4293      	cmp	r3, r2
 8025262:	d022      	beq.n	80252aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8025264:	687b      	ldr	r3, [r7, #4]
 8025266:	681b      	ldr	r3, [r3, #0]
 8025268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802526c:	d01d      	beq.n	80252aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802526e:	687b      	ldr	r3, [r7, #4]
 8025270:	681b      	ldr	r3, [r3, #0]
 8025272:	4a1d      	ldr	r2, [pc, #116]	; (80252e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8025274:	4293      	cmp	r3, r2
 8025276:	d018      	beq.n	80252aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8025278:	687b      	ldr	r3, [r7, #4]
 802527a:	681b      	ldr	r3, [r3, #0]
 802527c:	4a1b      	ldr	r2, [pc, #108]	; (80252ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 802527e:	4293      	cmp	r3, r2
 8025280:	d013      	beq.n	80252aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8025282:	687b      	ldr	r3, [r7, #4]
 8025284:	681b      	ldr	r3, [r3, #0]
 8025286:	4a1a      	ldr	r2, [pc, #104]	; (80252f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8025288:	4293      	cmp	r3, r2
 802528a:	d00e      	beq.n	80252aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 802528c:	687b      	ldr	r3, [r7, #4]
 802528e:	681b      	ldr	r3, [r3, #0]
 8025290:	4a18      	ldr	r2, [pc, #96]	; (80252f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8025292:	4293      	cmp	r3, r2
 8025294:	d009      	beq.n	80252aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8025296:	687b      	ldr	r3, [r7, #4]
 8025298:	681b      	ldr	r3, [r3, #0]
 802529a:	4a17      	ldr	r2, [pc, #92]	; (80252f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 802529c:	4293      	cmp	r3, r2
 802529e:	d004      	beq.n	80252aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80252a0:	687b      	ldr	r3, [r7, #4]
 80252a2:	681b      	ldr	r3, [r3, #0]
 80252a4:	4a15      	ldr	r2, [pc, #84]	; (80252fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80252a6:	4293      	cmp	r3, r2
 80252a8:	d10c      	bne.n	80252c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80252aa:	68bb      	ldr	r3, [r7, #8]
 80252ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80252b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80252b2:	683b      	ldr	r3, [r7, #0]
 80252b4:	685b      	ldr	r3, [r3, #4]
 80252b6:	68ba      	ldr	r2, [r7, #8]
 80252b8:	4313      	orrs	r3, r2
 80252ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80252bc:	687b      	ldr	r3, [r7, #4]
 80252be:	681b      	ldr	r3, [r3, #0]
 80252c0:	68ba      	ldr	r2, [r7, #8]
 80252c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80252c4:	687b      	ldr	r3, [r7, #4]
 80252c6:	2201      	movs	r2, #1
 80252c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80252cc:	687b      	ldr	r3, [r7, #4]
 80252ce:	2200      	movs	r2, #0
 80252d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80252d4:	2300      	movs	r3, #0
}
 80252d6:	4618      	mov	r0, r3
 80252d8:	3714      	adds	r7, #20
 80252da:	46bd      	mov	sp, r7
 80252dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252e0:	4770      	bx	lr
 80252e2:	bf00      	nop
 80252e4:	40010000 	.word	0x40010000
 80252e8:	40000400 	.word	0x40000400
 80252ec:	40000800 	.word	0x40000800
 80252f0:	40000c00 	.word	0x40000c00
 80252f4:	40010400 	.word	0x40010400
 80252f8:	40014000 	.word	0x40014000
 80252fc:	40001800 	.word	0x40001800

08025300 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8025300:	b480      	push	{r7}
 8025302:	b085      	sub	sp, #20
 8025304:	af00      	add	r7, sp, #0
 8025306:	6078      	str	r0, [r7, #4]
 8025308:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 802530a:	2300      	movs	r3, #0
 802530c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 802530e:	687b      	ldr	r3, [r7, #4]
 8025310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8025314:	2b01      	cmp	r3, #1
 8025316:	d101      	bne.n	802531c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8025318:	2302      	movs	r3, #2
 802531a:	e03d      	b.n	8025398 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 802531c:	687b      	ldr	r3, [r7, #4]
 802531e:	2201      	movs	r2, #1
 8025320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8025324:	68fb      	ldr	r3, [r7, #12]
 8025326:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 802532a:	683b      	ldr	r3, [r7, #0]
 802532c:	68db      	ldr	r3, [r3, #12]
 802532e:	4313      	orrs	r3, r2
 8025330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8025332:	68fb      	ldr	r3, [r7, #12]
 8025334:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8025338:	683b      	ldr	r3, [r7, #0]
 802533a:	689b      	ldr	r3, [r3, #8]
 802533c:	4313      	orrs	r3, r2
 802533e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8025340:	68fb      	ldr	r3, [r7, #12]
 8025342:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8025346:	683b      	ldr	r3, [r7, #0]
 8025348:	685b      	ldr	r3, [r3, #4]
 802534a:	4313      	orrs	r3, r2
 802534c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 802534e:	68fb      	ldr	r3, [r7, #12]
 8025350:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8025354:	683b      	ldr	r3, [r7, #0]
 8025356:	681b      	ldr	r3, [r3, #0]
 8025358:	4313      	orrs	r3, r2
 802535a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 802535c:	68fb      	ldr	r3, [r7, #12]
 802535e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8025362:	683b      	ldr	r3, [r7, #0]
 8025364:	691b      	ldr	r3, [r3, #16]
 8025366:	4313      	orrs	r3, r2
 8025368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 802536a:	68fb      	ldr	r3, [r7, #12]
 802536c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8025370:	683b      	ldr	r3, [r7, #0]
 8025372:	695b      	ldr	r3, [r3, #20]
 8025374:	4313      	orrs	r3, r2
 8025376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8025378:	68fb      	ldr	r3, [r7, #12]
 802537a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 802537e:	683b      	ldr	r3, [r7, #0]
 8025380:	69db      	ldr	r3, [r3, #28]
 8025382:	4313      	orrs	r3, r2
 8025384:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8025386:	687b      	ldr	r3, [r7, #4]
 8025388:	681b      	ldr	r3, [r3, #0]
 802538a:	68fa      	ldr	r2, [r7, #12]
 802538c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 802538e:	687b      	ldr	r3, [r7, #4]
 8025390:	2200      	movs	r2, #0
 8025392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8025396:	2300      	movs	r3, #0
}
 8025398:	4618      	mov	r0, r3
 802539a:	3714      	adds	r7, #20
 802539c:	46bd      	mov	sp, r7
 802539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80253a2:	4770      	bx	lr

080253a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80253a4:	b480      	push	{r7}
 80253a6:	b083      	sub	sp, #12
 80253a8:	af00      	add	r7, sp, #0
 80253aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80253ac:	bf00      	nop
 80253ae:	370c      	adds	r7, #12
 80253b0:	46bd      	mov	sp, r7
 80253b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80253b6:	4770      	bx	lr

080253b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80253b8:	b480      	push	{r7}
 80253ba:	b083      	sub	sp, #12
 80253bc:	af00      	add	r7, sp, #0
 80253be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80253c0:	bf00      	nop
 80253c2:	370c      	adds	r7, #12
 80253c4:	46bd      	mov	sp, r7
 80253c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80253ca:	4770      	bx	lr

080253cc <__libc_init_array>:
 80253cc:	b570      	push	{r4, r5, r6, lr}
 80253ce:	4e0d      	ldr	r6, [pc, #52]	; (8025404 <__libc_init_array+0x38>)
 80253d0:	4c0d      	ldr	r4, [pc, #52]	; (8025408 <__libc_init_array+0x3c>)
 80253d2:	1ba4      	subs	r4, r4, r6
 80253d4:	10a4      	asrs	r4, r4, #2
 80253d6:	2500      	movs	r5, #0
 80253d8:	42a5      	cmp	r5, r4
 80253da:	d109      	bne.n	80253f0 <__libc_init_array+0x24>
 80253dc:	4e0b      	ldr	r6, [pc, #44]	; (802540c <__libc_init_array+0x40>)
 80253de:	4c0c      	ldr	r4, [pc, #48]	; (8025410 <__libc_init_array+0x44>)
 80253e0:	f000 f820 	bl	8025424 <_init>
 80253e4:	1ba4      	subs	r4, r4, r6
 80253e6:	10a4      	asrs	r4, r4, #2
 80253e8:	2500      	movs	r5, #0
 80253ea:	42a5      	cmp	r5, r4
 80253ec:	d105      	bne.n	80253fa <__libc_init_array+0x2e>
 80253ee:	bd70      	pop	{r4, r5, r6, pc}
 80253f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80253f4:	4798      	blx	r3
 80253f6:	3501      	adds	r5, #1
 80253f8:	e7ee      	b.n	80253d8 <__libc_init_array+0xc>
 80253fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80253fe:	4798      	blx	r3
 8025400:	3501      	adds	r5, #1
 8025402:	e7f2      	b.n	80253ea <__libc_init_array+0x1e>
 8025404:	08025464 	.word	0x08025464
 8025408:	08025464 	.word	0x08025464
 802540c:	08025464 	.word	0x08025464
 8025410:	0802546c 	.word	0x0802546c

08025414 <memset>:
 8025414:	4402      	add	r2, r0
 8025416:	4603      	mov	r3, r0
 8025418:	4293      	cmp	r3, r2
 802541a:	d100      	bne.n	802541e <memset+0xa>
 802541c:	4770      	bx	lr
 802541e:	f803 1b01 	strb.w	r1, [r3], #1
 8025422:	e7f9      	b.n	8025418 <memset+0x4>

08025424 <_init>:
 8025424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025426:	bf00      	nop
 8025428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802542a:	bc08      	pop	{r3}
 802542c:	469e      	mov	lr, r3
 802542e:	4770      	bx	lr

08025430 <_fini>:
 8025430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025432:	bf00      	nop
 8025434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025436:	bc08      	pop	{r3}
 8025438:	469e      	mov	lr, r3
 802543a:	4770      	bx	lr
