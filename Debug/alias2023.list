
alias2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073c4  08020000  08020000  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080273c4  080273c4  000273c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080273e4  080273e4  0003000c  2**0
                  CONTENTS
  4 .ARM          00000008  080273e4  080273e4  000273e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080273ec  080273ec  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080273ec  080273ec  000273ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080273f4  080273f4  000273f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080273f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000be0  20000010  08027404  00030010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000bf0  08027404  00030bf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000229f0  00000000  00000000  0003003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a47  00000000  00000000  00052a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013f0  00000000  00000000  00056478  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001270  00000000  00000000  00057868  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002415a  00000000  00000000  00058ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001222e  00000000  00000000  0007cc32  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cab23  00000000  00000000  0008ee60  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00159983  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054d4  00000000  00000000  00159a00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08020000 <__do_global_dtors_aux>:
 8020000:	b510      	push	{r4, lr}
 8020002:	4c05      	ldr	r4, [pc, #20]	; (8020018 <__do_global_dtors_aux+0x18>)
 8020004:	7823      	ldrb	r3, [r4, #0]
 8020006:	b933      	cbnz	r3, 8020016 <__do_global_dtors_aux+0x16>
 8020008:	4b04      	ldr	r3, [pc, #16]	; (802001c <__do_global_dtors_aux+0x1c>)
 802000a:	b113      	cbz	r3, 8020012 <__do_global_dtors_aux+0x12>
 802000c:	4804      	ldr	r0, [pc, #16]	; (8020020 <__do_global_dtors_aux+0x20>)
 802000e:	f3af 8000 	nop.w
 8020012:	2301      	movs	r3, #1
 8020014:	7023      	strb	r3, [r4, #0]
 8020016:	bd10      	pop	{r4, pc}
 8020018:	20000010 	.word	0x20000010
 802001c:	00000000 	.word	0x00000000
 8020020:	080273ac 	.word	0x080273ac

08020024 <frame_dummy>:
 8020024:	b508      	push	{r3, lr}
 8020026:	4b03      	ldr	r3, [pc, #12]	; (8020034 <frame_dummy+0x10>)
 8020028:	b11b      	cbz	r3, 8020032 <frame_dummy+0xe>
 802002a:	4903      	ldr	r1, [pc, #12]	; (8020038 <frame_dummy+0x14>)
 802002c:	4803      	ldr	r0, [pc, #12]	; (802003c <frame_dummy+0x18>)
 802002e:	f3af 8000 	nop.w
 8020032:	bd08      	pop	{r3, pc}
 8020034:	00000000 	.word	0x00000000
 8020038:	20000014 	.word	0x20000014
 802003c:	080273ac 	.word	0x080273ac

08020040 <__aeabi_drsub>:
 8020040:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8020044:	e002      	b.n	802004c <__adddf3>
 8020046:	bf00      	nop

08020048 <__aeabi_dsub>:
 8020048:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0802004c <__adddf3>:
 802004c:	b530      	push	{r4, r5, lr}
 802004e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8020052:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8020056:	ea94 0f05 	teq	r4, r5
 802005a:	bf08      	it	eq
 802005c:	ea90 0f02 	teqeq	r0, r2
 8020060:	bf1f      	itttt	ne
 8020062:	ea54 0c00 	orrsne.w	ip, r4, r0
 8020066:	ea55 0c02 	orrsne.w	ip, r5, r2
 802006a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 802006e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020072:	f000 80e2 	beq.w	802023a <__adddf3+0x1ee>
 8020076:	ea4f 5454 	mov.w	r4, r4, lsr #21
 802007a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 802007e:	bfb8      	it	lt
 8020080:	426d      	neglt	r5, r5
 8020082:	dd0c      	ble.n	802009e <__adddf3+0x52>
 8020084:	442c      	add	r4, r5
 8020086:	ea80 0202 	eor.w	r2, r0, r2
 802008a:	ea81 0303 	eor.w	r3, r1, r3
 802008e:	ea82 0000 	eor.w	r0, r2, r0
 8020092:	ea83 0101 	eor.w	r1, r3, r1
 8020096:	ea80 0202 	eor.w	r2, r0, r2
 802009a:	ea81 0303 	eor.w	r3, r1, r3
 802009e:	2d36      	cmp	r5, #54	; 0x36
 80200a0:	bf88      	it	hi
 80200a2:	bd30      	pophi	{r4, r5, pc}
 80200a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80200a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80200ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80200b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80200b4:	d002      	beq.n	80200bc <__adddf3+0x70>
 80200b6:	4240      	negs	r0, r0
 80200b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80200bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80200c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80200c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80200c8:	d002      	beq.n	80200d0 <__adddf3+0x84>
 80200ca:	4252      	negs	r2, r2
 80200cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80200d0:	ea94 0f05 	teq	r4, r5
 80200d4:	f000 80a7 	beq.w	8020226 <__adddf3+0x1da>
 80200d8:	f1a4 0401 	sub.w	r4, r4, #1
 80200dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80200e0:	db0d      	blt.n	80200fe <__adddf3+0xb2>
 80200e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80200e6:	fa22 f205 	lsr.w	r2, r2, r5
 80200ea:	1880      	adds	r0, r0, r2
 80200ec:	f141 0100 	adc.w	r1, r1, #0
 80200f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80200f4:	1880      	adds	r0, r0, r2
 80200f6:	fa43 f305 	asr.w	r3, r3, r5
 80200fa:	4159      	adcs	r1, r3
 80200fc:	e00e      	b.n	802011c <__adddf3+0xd0>
 80200fe:	f1a5 0520 	sub.w	r5, r5, #32
 8020102:	f10e 0e20 	add.w	lr, lr, #32
 8020106:	2a01      	cmp	r2, #1
 8020108:	fa03 fc0e 	lsl.w	ip, r3, lr
 802010c:	bf28      	it	cs
 802010e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020112:	fa43 f305 	asr.w	r3, r3, r5
 8020116:	18c0      	adds	r0, r0, r3
 8020118:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802011c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020120:	d507      	bpl.n	8020132 <__adddf3+0xe6>
 8020122:	f04f 0e00 	mov.w	lr, #0
 8020126:	f1dc 0c00 	rsbs	ip, ip, #0
 802012a:	eb7e 0000 	sbcs.w	r0, lr, r0
 802012e:	eb6e 0101 	sbc.w	r1, lr, r1
 8020132:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8020136:	d31b      	bcc.n	8020170 <__adddf3+0x124>
 8020138:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 802013c:	d30c      	bcc.n	8020158 <__adddf3+0x10c>
 802013e:	0849      	lsrs	r1, r1, #1
 8020140:	ea5f 0030 	movs.w	r0, r0, rrx
 8020144:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8020148:	f104 0401 	add.w	r4, r4, #1
 802014c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8020150:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8020154:	f080 809a 	bcs.w	802028c <__adddf3+0x240>
 8020158:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802015c:	bf08      	it	eq
 802015e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020162:	f150 0000 	adcs.w	r0, r0, #0
 8020166:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802016a:	ea41 0105 	orr.w	r1, r1, r5
 802016e:	bd30      	pop	{r4, r5, pc}
 8020170:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8020174:	4140      	adcs	r0, r0
 8020176:	eb41 0101 	adc.w	r1, r1, r1
 802017a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 802017e:	f1a4 0401 	sub.w	r4, r4, #1
 8020182:	d1e9      	bne.n	8020158 <__adddf3+0x10c>
 8020184:	f091 0f00 	teq	r1, #0
 8020188:	bf04      	itt	eq
 802018a:	4601      	moveq	r1, r0
 802018c:	2000      	moveq	r0, #0
 802018e:	fab1 f381 	clz	r3, r1
 8020192:	bf08      	it	eq
 8020194:	3320      	addeq	r3, #32
 8020196:	f1a3 030b 	sub.w	r3, r3, #11
 802019a:	f1b3 0220 	subs.w	r2, r3, #32
 802019e:	da0c      	bge.n	80201ba <__adddf3+0x16e>
 80201a0:	320c      	adds	r2, #12
 80201a2:	dd08      	ble.n	80201b6 <__adddf3+0x16a>
 80201a4:	f102 0c14 	add.w	ip, r2, #20
 80201a8:	f1c2 020c 	rsb	r2, r2, #12
 80201ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80201b0:	fa21 f102 	lsr.w	r1, r1, r2
 80201b4:	e00c      	b.n	80201d0 <__adddf3+0x184>
 80201b6:	f102 0214 	add.w	r2, r2, #20
 80201ba:	bfd8      	it	le
 80201bc:	f1c2 0c20 	rsble	ip, r2, #32
 80201c0:	fa01 f102 	lsl.w	r1, r1, r2
 80201c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80201c8:	bfdc      	itt	le
 80201ca:	ea41 010c 	orrle.w	r1, r1, ip
 80201ce:	4090      	lslle	r0, r2
 80201d0:	1ae4      	subs	r4, r4, r3
 80201d2:	bfa2      	ittt	ge
 80201d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80201d8:	4329      	orrge	r1, r5
 80201da:	bd30      	popge	{r4, r5, pc}
 80201dc:	ea6f 0404 	mvn.w	r4, r4
 80201e0:	3c1f      	subs	r4, #31
 80201e2:	da1c      	bge.n	802021e <__adddf3+0x1d2>
 80201e4:	340c      	adds	r4, #12
 80201e6:	dc0e      	bgt.n	8020206 <__adddf3+0x1ba>
 80201e8:	f104 0414 	add.w	r4, r4, #20
 80201ec:	f1c4 0220 	rsb	r2, r4, #32
 80201f0:	fa20 f004 	lsr.w	r0, r0, r4
 80201f4:	fa01 f302 	lsl.w	r3, r1, r2
 80201f8:	ea40 0003 	orr.w	r0, r0, r3
 80201fc:	fa21 f304 	lsr.w	r3, r1, r4
 8020200:	ea45 0103 	orr.w	r1, r5, r3
 8020204:	bd30      	pop	{r4, r5, pc}
 8020206:	f1c4 040c 	rsb	r4, r4, #12
 802020a:	f1c4 0220 	rsb	r2, r4, #32
 802020e:	fa20 f002 	lsr.w	r0, r0, r2
 8020212:	fa01 f304 	lsl.w	r3, r1, r4
 8020216:	ea40 0003 	orr.w	r0, r0, r3
 802021a:	4629      	mov	r1, r5
 802021c:	bd30      	pop	{r4, r5, pc}
 802021e:	fa21 f004 	lsr.w	r0, r1, r4
 8020222:	4629      	mov	r1, r5
 8020224:	bd30      	pop	{r4, r5, pc}
 8020226:	f094 0f00 	teq	r4, #0
 802022a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 802022e:	bf06      	itte	eq
 8020230:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8020234:	3401      	addeq	r4, #1
 8020236:	3d01      	subne	r5, #1
 8020238:	e74e      	b.n	80200d8 <__adddf3+0x8c>
 802023a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802023e:	bf18      	it	ne
 8020240:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020244:	d029      	beq.n	802029a <__adddf3+0x24e>
 8020246:	ea94 0f05 	teq	r4, r5
 802024a:	bf08      	it	eq
 802024c:	ea90 0f02 	teqeq	r0, r2
 8020250:	d005      	beq.n	802025e <__adddf3+0x212>
 8020252:	ea54 0c00 	orrs.w	ip, r4, r0
 8020256:	bf04      	itt	eq
 8020258:	4619      	moveq	r1, r3
 802025a:	4610      	moveq	r0, r2
 802025c:	bd30      	pop	{r4, r5, pc}
 802025e:	ea91 0f03 	teq	r1, r3
 8020262:	bf1e      	ittt	ne
 8020264:	2100      	movne	r1, #0
 8020266:	2000      	movne	r0, #0
 8020268:	bd30      	popne	{r4, r5, pc}
 802026a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 802026e:	d105      	bne.n	802027c <__adddf3+0x230>
 8020270:	0040      	lsls	r0, r0, #1
 8020272:	4149      	adcs	r1, r1
 8020274:	bf28      	it	cs
 8020276:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 802027a:	bd30      	pop	{r4, r5, pc}
 802027c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8020280:	bf3c      	itt	cc
 8020282:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8020286:	bd30      	popcc	{r4, r5, pc}
 8020288:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 802028c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8020290:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8020294:	f04f 0000 	mov.w	r0, #0
 8020298:	bd30      	pop	{r4, r5, pc}
 802029a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802029e:	bf1a      	itte	ne
 80202a0:	4619      	movne	r1, r3
 80202a2:	4610      	movne	r0, r2
 80202a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80202a8:	bf1c      	itt	ne
 80202aa:	460b      	movne	r3, r1
 80202ac:	4602      	movne	r2, r0
 80202ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80202b2:	bf06      	itte	eq
 80202b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80202b8:	ea91 0f03 	teqeq	r1, r3
 80202bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80202c0:	bd30      	pop	{r4, r5, pc}
 80202c2:	bf00      	nop

080202c4 <__aeabi_ui2d>:
 80202c4:	f090 0f00 	teq	r0, #0
 80202c8:	bf04      	itt	eq
 80202ca:	2100      	moveq	r1, #0
 80202cc:	4770      	bxeq	lr
 80202ce:	b530      	push	{r4, r5, lr}
 80202d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80202d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80202d8:	f04f 0500 	mov.w	r5, #0
 80202dc:	f04f 0100 	mov.w	r1, #0
 80202e0:	e750      	b.n	8020184 <__adddf3+0x138>
 80202e2:	bf00      	nop

080202e4 <__aeabi_i2d>:
 80202e4:	f090 0f00 	teq	r0, #0
 80202e8:	bf04      	itt	eq
 80202ea:	2100      	moveq	r1, #0
 80202ec:	4770      	bxeq	lr
 80202ee:	b530      	push	{r4, r5, lr}
 80202f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80202f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80202f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80202fc:	bf48      	it	mi
 80202fe:	4240      	negmi	r0, r0
 8020300:	f04f 0100 	mov.w	r1, #0
 8020304:	e73e      	b.n	8020184 <__adddf3+0x138>
 8020306:	bf00      	nop

08020308 <__aeabi_f2d>:
 8020308:	0042      	lsls	r2, r0, #1
 802030a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802030e:	ea4f 0131 	mov.w	r1, r1, rrx
 8020312:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020316:	bf1f      	itttt	ne
 8020318:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 802031c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8020320:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8020324:	4770      	bxne	lr
 8020326:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 802032a:	bf08      	it	eq
 802032c:	4770      	bxeq	lr
 802032e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8020332:	bf04      	itt	eq
 8020334:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8020338:	4770      	bxeq	lr
 802033a:	b530      	push	{r4, r5, lr}
 802033c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8020340:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020344:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020348:	e71c      	b.n	8020184 <__adddf3+0x138>
 802034a:	bf00      	nop

0802034c <__aeabi_ul2d>:
 802034c:	ea50 0201 	orrs.w	r2, r0, r1
 8020350:	bf08      	it	eq
 8020352:	4770      	bxeq	lr
 8020354:	b530      	push	{r4, r5, lr}
 8020356:	f04f 0500 	mov.w	r5, #0
 802035a:	e00a      	b.n	8020372 <__aeabi_l2d+0x16>

0802035c <__aeabi_l2d>:
 802035c:	ea50 0201 	orrs.w	r2, r0, r1
 8020360:	bf08      	it	eq
 8020362:	4770      	bxeq	lr
 8020364:	b530      	push	{r4, r5, lr}
 8020366:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 802036a:	d502      	bpl.n	8020372 <__aeabi_l2d+0x16>
 802036c:	4240      	negs	r0, r0
 802036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020372:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020376:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802037a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 802037e:	f43f aed8 	beq.w	8020132 <__adddf3+0xe6>
 8020382:	f04f 0203 	mov.w	r2, #3
 8020386:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802038a:	bf18      	it	ne
 802038c:	3203      	addne	r2, #3
 802038e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8020392:	bf18      	it	ne
 8020394:	3203      	addne	r2, #3
 8020396:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 802039a:	f1c2 0320 	rsb	r3, r2, #32
 802039e:	fa00 fc03 	lsl.w	ip, r0, r3
 80203a2:	fa20 f002 	lsr.w	r0, r0, r2
 80203a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80203aa:	ea40 000e 	orr.w	r0, r0, lr
 80203ae:	fa21 f102 	lsr.w	r1, r1, r2
 80203b2:	4414      	add	r4, r2
 80203b4:	e6bd      	b.n	8020132 <__adddf3+0xe6>
 80203b6:	bf00      	nop

080203b8 <__aeabi_dmul>:
 80203b8:	b570      	push	{r4, r5, r6, lr}
 80203ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80203be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80203c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80203c6:	bf1d      	ittte	ne
 80203c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80203cc:	ea94 0f0c 	teqne	r4, ip
 80203d0:	ea95 0f0c 	teqne	r5, ip
 80203d4:	f000 f8de 	bleq	8020594 <__aeabi_dmul+0x1dc>
 80203d8:	442c      	add	r4, r5
 80203da:	ea81 0603 	eor.w	r6, r1, r3
 80203de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80203e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80203e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80203ea:	bf18      	it	ne
 80203ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80203f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80203f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80203f8:	d038      	beq.n	802046c <__aeabi_dmul+0xb4>
 80203fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80203fe:	f04f 0500 	mov.w	r5, #0
 8020402:	fbe1 e502 	umlal	lr, r5, r1, r2
 8020406:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 802040a:	fbe0 e503 	umlal	lr, r5, r0, r3
 802040e:	f04f 0600 	mov.w	r6, #0
 8020412:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020416:	f09c 0f00 	teq	ip, #0
 802041a:	bf18      	it	ne
 802041c:	f04e 0e01 	orrne.w	lr, lr, #1
 8020420:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8020424:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8020428:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 802042c:	d204      	bcs.n	8020438 <__aeabi_dmul+0x80>
 802042e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8020432:	416d      	adcs	r5, r5
 8020434:	eb46 0606 	adc.w	r6, r6, r6
 8020438:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 802043c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8020440:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8020444:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8020448:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 802044c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8020450:	bf88      	it	hi
 8020452:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020456:	d81e      	bhi.n	8020496 <__aeabi_dmul+0xde>
 8020458:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 802045c:	bf08      	it	eq
 802045e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8020462:	f150 0000 	adcs.w	r0, r0, #0
 8020466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802046a:	bd70      	pop	{r4, r5, r6, pc}
 802046c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8020470:	ea46 0101 	orr.w	r1, r6, r1
 8020474:	ea40 0002 	orr.w	r0, r0, r2
 8020478:	ea81 0103 	eor.w	r1, r1, r3
 802047c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8020480:	bfc2      	ittt	gt
 8020482:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020486:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 802048a:	bd70      	popgt	{r4, r5, r6, pc}
 802048c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020490:	f04f 0e00 	mov.w	lr, #0
 8020494:	3c01      	subs	r4, #1
 8020496:	f300 80ab 	bgt.w	80205f0 <__aeabi_dmul+0x238>
 802049a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 802049e:	bfde      	ittt	le
 80204a0:	2000      	movle	r0, #0
 80204a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80204a6:	bd70      	pople	{r4, r5, r6, pc}
 80204a8:	f1c4 0400 	rsb	r4, r4, #0
 80204ac:	3c20      	subs	r4, #32
 80204ae:	da35      	bge.n	802051c <__aeabi_dmul+0x164>
 80204b0:	340c      	adds	r4, #12
 80204b2:	dc1b      	bgt.n	80204ec <__aeabi_dmul+0x134>
 80204b4:	f104 0414 	add.w	r4, r4, #20
 80204b8:	f1c4 0520 	rsb	r5, r4, #32
 80204bc:	fa00 f305 	lsl.w	r3, r0, r5
 80204c0:	fa20 f004 	lsr.w	r0, r0, r4
 80204c4:	fa01 f205 	lsl.w	r2, r1, r5
 80204c8:	ea40 0002 	orr.w	r0, r0, r2
 80204cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80204d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80204d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80204d8:	fa21 f604 	lsr.w	r6, r1, r4
 80204dc:	eb42 0106 	adc.w	r1, r2, r6
 80204e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80204e4:	bf08      	it	eq
 80204e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80204ea:	bd70      	pop	{r4, r5, r6, pc}
 80204ec:	f1c4 040c 	rsb	r4, r4, #12
 80204f0:	f1c4 0520 	rsb	r5, r4, #32
 80204f4:	fa00 f304 	lsl.w	r3, r0, r4
 80204f8:	fa20 f005 	lsr.w	r0, r0, r5
 80204fc:	fa01 f204 	lsl.w	r2, r1, r4
 8020500:	ea40 0002 	orr.w	r0, r0, r2
 8020504:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020508:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802050c:	f141 0100 	adc.w	r1, r1, #0
 8020510:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020514:	bf08      	it	eq
 8020516:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802051a:	bd70      	pop	{r4, r5, r6, pc}
 802051c:	f1c4 0520 	rsb	r5, r4, #32
 8020520:	fa00 f205 	lsl.w	r2, r0, r5
 8020524:	ea4e 0e02 	orr.w	lr, lr, r2
 8020528:	fa20 f304 	lsr.w	r3, r0, r4
 802052c:	fa01 f205 	lsl.w	r2, r1, r5
 8020530:	ea43 0302 	orr.w	r3, r3, r2
 8020534:	fa21 f004 	lsr.w	r0, r1, r4
 8020538:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802053c:	fa21 f204 	lsr.w	r2, r1, r4
 8020540:	ea20 0002 	bic.w	r0, r0, r2
 8020544:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8020548:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802054c:	bf08      	it	eq
 802054e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020552:	bd70      	pop	{r4, r5, r6, pc}
 8020554:	f094 0f00 	teq	r4, #0
 8020558:	d10f      	bne.n	802057a <__aeabi_dmul+0x1c2>
 802055a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802055e:	0040      	lsls	r0, r0, #1
 8020560:	eb41 0101 	adc.w	r1, r1, r1
 8020564:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020568:	bf08      	it	eq
 802056a:	3c01      	subeq	r4, #1
 802056c:	d0f7      	beq.n	802055e <__aeabi_dmul+0x1a6>
 802056e:	ea41 0106 	orr.w	r1, r1, r6
 8020572:	f095 0f00 	teq	r5, #0
 8020576:	bf18      	it	ne
 8020578:	4770      	bxne	lr
 802057a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 802057e:	0052      	lsls	r2, r2, #1
 8020580:	eb43 0303 	adc.w	r3, r3, r3
 8020584:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8020588:	bf08      	it	eq
 802058a:	3d01      	subeq	r5, #1
 802058c:	d0f7      	beq.n	802057e <__aeabi_dmul+0x1c6>
 802058e:	ea43 0306 	orr.w	r3, r3, r6
 8020592:	4770      	bx	lr
 8020594:	ea94 0f0c 	teq	r4, ip
 8020598:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802059c:	bf18      	it	ne
 802059e:	ea95 0f0c 	teqne	r5, ip
 80205a2:	d00c      	beq.n	80205be <__aeabi_dmul+0x206>
 80205a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80205a8:	bf18      	it	ne
 80205aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80205ae:	d1d1      	bne.n	8020554 <__aeabi_dmul+0x19c>
 80205b0:	ea81 0103 	eor.w	r1, r1, r3
 80205b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205b8:	f04f 0000 	mov.w	r0, #0
 80205bc:	bd70      	pop	{r4, r5, r6, pc}
 80205be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80205c2:	bf06      	itte	eq
 80205c4:	4610      	moveq	r0, r2
 80205c6:	4619      	moveq	r1, r3
 80205c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80205cc:	d019      	beq.n	8020602 <__aeabi_dmul+0x24a>
 80205ce:	ea94 0f0c 	teq	r4, ip
 80205d2:	d102      	bne.n	80205da <__aeabi_dmul+0x222>
 80205d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80205d8:	d113      	bne.n	8020602 <__aeabi_dmul+0x24a>
 80205da:	ea95 0f0c 	teq	r5, ip
 80205de:	d105      	bne.n	80205ec <__aeabi_dmul+0x234>
 80205e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80205e4:	bf1c      	itt	ne
 80205e6:	4610      	movne	r0, r2
 80205e8:	4619      	movne	r1, r3
 80205ea:	d10a      	bne.n	8020602 <__aeabi_dmul+0x24a>
 80205ec:	ea81 0103 	eor.w	r1, r1, r3
 80205f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80205f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80205fc:	f04f 0000 	mov.w	r0, #0
 8020600:	bd70      	pop	{r4, r5, r6, pc}
 8020602:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020606:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 802060a:	bd70      	pop	{r4, r5, r6, pc}

0802060c <__aeabi_ddiv>:
 802060c:	b570      	push	{r4, r5, r6, lr}
 802060e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020612:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802061a:	bf1d      	ittte	ne
 802061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020620:	ea94 0f0c 	teqne	r4, ip
 8020624:	ea95 0f0c 	teqne	r5, ip
 8020628:	f000 f8a7 	bleq	802077a <__aeabi_ddiv+0x16e>
 802062c:	eba4 0405 	sub.w	r4, r4, r5
 8020630:	ea81 0e03 	eor.w	lr, r1, r3
 8020634:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020638:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802063c:	f000 8088 	beq.w	8020750 <__aeabi_ddiv+0x144>
 8020640:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020644:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8020648:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 802064c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8020650:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020654:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020658:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802065c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8020660:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8020664:	429d      	cmp	r5, r3
 8020666:	bf08      	it	eq
 8020668:	4296      	cmpeq	r6, r2
 802066a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 802066e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8020672:	d202      	bcs.n	802067a <__aeabi_ddiv+0x6e>
 8020674:	085b      	lsrs	r3, r3, #1
 8020676:	ea4f 0232 	mov.w	r2, r2, rrx
 802067a:	1ab6      	subs	r6, r6, r2
 802067c:	eb65 0503 	sbc.w	r5, r5, r3
 8020680:	085b      	lsrs	r3, r3, #1
 8020682:	ea4f 0232 	mov.w	r2, r2, rrx
 8020686:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 802068a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 802068e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020692:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020696:	bf22      	ittt	cs
 8020698:	1ab6      	subcs	r6, r6, r2
 802069a:	4675      	movcs	r5, lr
 802069c:	ea40 000c 	orrcs.w	r0, r0, ip
 80206a0:	085b      	lsrs	r3, r3, #1
 80206a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80206a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80206aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206ae:	bf22      	ittt	cs
 80206b0:	1ab6      	subcs	r6, r6, r2
 80206b2:	4675      	movcs	r5, lr
 80206b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80206b8:	085b      	lsrs	r3, r3, #1
 80206ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80206be:	ebb6 0e02 	subs.w	lr, r6, r2
 80206c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206c6:	bf22      	ittt	cs
 80206c8:	1ab6      	subcs	r6, r6, r2
 80206ca:	4675      	movcs	r5, lr
 80206cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80206d0:	085b      	lsrs	r3, r3, #1
 80206d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80206d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80206da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206de:	bf22      	ittt	cs
 80206e0:	1ab6      	subcs	r6, r6, r2
 80206e2:	4675      	movcs	r5, lr
 80206e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80206e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80206ec:	d018      	beq.n	8020720 <__aeabi_ddiv+0x114>
 80206ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80206f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80206f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80206fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80206fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8020702:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8020706:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802070a:	d1c0      	bne.n	802068e <__aeabi_ddiv+0x82>
 802070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020710:	d10b      	bne.n	802072a <__aeabi_ddiv+0x11e>
 8020712:	ea41 0100 	orr.w	r1, r1, r0
 8020716:	f04f 0000 	mov.w	r0, #0
 802071a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 802071e:	e7b6      	b.n	802068e <__aeabi_ddiv+0x82>
 8020720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020724:	bf04      	itt	eq
 8020726:	4301      	orreq	r1, r0
 8020728:	2000      	moveq	r0, #0
 802072a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 802072e:	bf88      	it	hi
 8020730:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020734:	f63f aeaf 	bhi.w	8020496 <__aeabi_dmul+0xde>
 8020738:	ebb5 0c03 	subs.w	ip, r5, r3
 802073c:	bf04      	itt	eq
 802073e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8020742:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020746:	f150 0000 	adcs.w	r0, r0, #0
 802074a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802074e:	bd70      	pop	{r4, r5, r6, pc}
 8020750:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8020754:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020758:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 802075c:	bfc2      	ittt	gt
 802075e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020762:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020766:	bd70      	popgt	{r4, r5, r6, pc}
 8020768:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802076c:	f04f 0e00 	mov.w	lr, #0
 8020770:	3c01      	subs	r4, #1
 8020772:	e690      	b.n	8020496 <__aeabi_dmul+0xde>
 8020774:	ea45 0e06 	orr.w	lr, r5, r6
 8020778:	e68d      	b.n	8020496 <__aeabi_dmul+0xde>
 802077a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802077e:	ea94 0f0c 	teq	r4, ip
 8020782:	bf08      	it	eq
 8020784:	ea95 0f0c 	teqeq	r5, ip
 8020788:	f43f af3b 	beq.w	8020602 <__aeabi_dmul+0x24a>
 802078c:	ea94 0f0c 	teq	r4, ip
 8020790:	d10a      	bne.n	80207a8 <__aeabi_ddiv+0x19c>
 8020792:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020796:	f47f af34 	bne.w	8020602 <__aeabi_dmul+0x24a>
 802079a:	ea95 0f0c 	teq	r5, ip
 802079e:	f47f af25 	bne.w	80205ec <__aeabi_dmul+0x234>
 80207a2:	4610      	mov	r0, r2
 80207a4:	4619      	mov	r1, r3
 80207a6:	e72c      	b.n	8020602 <__aeabi_dmul+0x24a>
 80207a8:	ea95 0f0c 	teq	r5, ip
 80207ac:	d106      	bne.n	80207bc <__aeabi_ddiv+0x1b0>
 80207ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80207b2:	f43f aefd 	beq.w	80205b0 <__aeabi_dmul+0x1f8>
 80207b6:	4610      	mov	r0, r2
 80207b8:	4619      	mov	r1, r3
 80207ba:	e722      	b.n	8020602 <__aeabi_dmul+0x24a>
 80207bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80207c0:	bf18      	it	ne
 80207c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80207c6:	f47f aec5 	bne.w	8020554 <__aeabi_dmul+0x19c>
 80207ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80207ce:	f47f af0d 	bne.w	80205ec <__aeabi_dmul+0x234>
 80207d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80207d6:	f47f aeeb 	bne.w	80205b0 <__aeabi_dmul+0x1f8>
 80207da:	e712      	b.n	8020602 <__aeabi_dmul+0x24a>

080207dc <__gedf2>:
 80207dc:	f04f 3cff 	mov.w	ip, #4294967295
 80207e0:	e006      	b.n	80207f0 <__cmpdf2+0x4>
 80207e2:	bf00      	nop

080207e4 <__ledf2>:
 80207e4:	f04f 0c01 	mov.w	ip, #1
 80207e8:	e002      	b.n	80207f0 <__cmpdf2+0x4>
 80207ea:	bf00      	nop

080207ec <__cmpdf2>:
 80207ec:	f04f 0c01 	mov.w	ip, #1
 80207f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80207f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80207f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80207fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020800:	bf18      	it	ne
 8020802:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020806:	d01b      	beq.n	8020840 <__cmpdf2+0x54>
 8020808:	b001      	add	sp, #4
 802080a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 802080e:	bf0c      	ite	eq
 8020810:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020814:	ea91 0f03 	teqne	r1, r3
 8020818:	bf02      	ittt	eq
 802081a:	ea90 0f02 	teqeq	r0, r2
 802081e:	2000      	moveq	r0, #0
 8020820:	4770      	bxeq	lr
 8020822:	f110 0f00 	cmn.w	r0, #0
 8020826:	ea91 0f03 	teq	r1, r3
 802082a:	bf58      	it	pl
 802082c:	4299      	cmppl	r1, r3
 802082e:	bf08      	it	eq
 8020830:	4290      	cmpeq	r0, r2
 8020832:	bf2c      	ite	cs
 8020834:	17d8      	asrcs	r0, r3, #31
 8020836:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 802083a:	f040 0001 	orr.w	r0, r0, #1
 802083e:	4770      	bx	lr
 8020840:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020844:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020848:	d102      	bne.n	8020850 <__cmpdf2+0x64>
 802084a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 802084e:	d107      	bne.n	8020860 <__cmpdf2+0x74>
 8020850:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020854:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020858:	d1d6      	bne.n	8020808 <__cmpdf2+0x1c>
 802085a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 802085e:	d0d3      	beq.n	8020808 <__cmpdf2+0x1c>
 8020860:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020864:	4770      	bx	lr
 8020866:	bf00      	nop

08020868 <__aeabi_cdrcmple>:
 8020868:	4684      	mov	ip, r0
 802086a:	4610      	mov	r0, r2
 802086c:	4662      	mov	r2, ip
 802086e:	468c      	mov	ip, r1
 8020870:	4619      	mov	r1, r3
 8020872:	4663      	mov	r3, ip
 8020874:	e000      	b.n	8020878 <__aeabi_cdcmpeq>
 8020876:	bf00      	nop

08020878 <__aeabi_cdcmpeq>:
 8020878:	b501      	push	{r0, lr}
 802087a:	f7ff ffb7 	bl	80207ec <__cmpdf2>
 802087e:	2800      	cmp	r0, #0
 8020880:	bf48      	it	mi
 8020882:	f110 0f00 	cmnmi.w	r0, #0
 8020886:	bd01      	pop	{r0, pc}

08020888 <__aeabi_dcmpeq>:
 8020888:	f84d ed08 	str.w	lr, [sp, #-8]!
 802088c:	f7ff fff4 	bl	8020878 <__aeabi_cdcmpeq>
 8020890:	bf0c      	ite	eq
 8020892:	2001      	moveq	r0, #1
 8020894:	2000      	movne	r0, #0
 8020896:	f85d fb08 	ldr.w	pc, [sp], #8
 802089a:	bf00      	nop

0802089c <__aeabi_dcmplt>:
 802089c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208a0:	f7ff ffea 	bl	8020878 <__aeabi_cdcmpeq>
 80208a4:	bf34      	ite	cc
 80208a6:	2001      	movcc	r0, #1
 80208a8:	2000      	movcs	r0, #0
 80208aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80208ae:	bf00      	nop

080208b0 <__aeabi_dcmple>:
 80208b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208b4:	f7ff ffe0 	bl	8020878 <__aeabi_cdcmpeq>
 80208b8:	bf94      	ite	ls
 80208ba:	2001      	movls	r0, #1
 80208bc:	2000      	movhi	r0, #0
 80208be:	f85d fb08 	ldr.w	pc, [sp], #8
 80208c2:	bf00      	nop

080208c4 <__aeabi_dcmpge>:
 80208c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208c8:	f7ff ffce 	bl	8020868 <__aeabi_cdrcmple>
 80208cc:	bf94      	ite	ls
 80208ce:	2001      	movls	r0, #1
 80208d0:	2000      	movhi	r0, #0
 80208d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80208d6:	bf00      	nop

080208d8 <__aeabi_dcmpgt>:
 80208d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208dc:	f7ff ffc4 	bl	8020868 <__aeabi_cdrcmple>
 80208e0:	bf34      	ite	cc
 80208e2:	2001      	movcc	r0, #1
 80208e4:	2000      	movcs	r0, #0
 80208e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80208ea:	bf00      	nop

080208ec <__aeabi_d2f>:
 80208ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80208f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80208f4:	bf24      	itt	cs
 80208f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80208fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80208fe:	d90d      	bls.n	802091c <__aeabi_d2f+0x30>
 8020900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8020904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 802090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8020910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8020914:	bf08      	it	eq
 8020916:	f020 0001 	biceq.w	r0, r0, #1
 802091a:	4770      	bx	lr
 802091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8020920:	d121      	bne.n	8020966 <__aeabi_d2f+0x7a>
 8020922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8020926:	bfbc      	itt	lt
 8020928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 802092c:	4770      	bxlt	lr
 802092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8020936:	f1c2 0218 	rsb	r2, r2, #24
 802093a:	f1c2 0c20 	rsb	ip, r2, #32
 802093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8020942:	fa20 f002 	lsr.w	r0, r0, r2
 8020946:	bf18      	it	ne
 8020948:	f040 0001 	orrne.w	r0, r0, #1
 802094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8020954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8020958:	ea40 000c 	orr.w	r0, r0, ip
 802095c:	fa23 f302 	lsr.w	r3, r3, r2
 8020960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8020964:	e7cc      	b.n	8020900 <__aeabi_d2f+0x14>
 8020966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 802096a:	d107      	bne.n	802097c <__aeabi_d2f+0x90>
 802096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8020970:	bf1e      	ittt	ne
 8020972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8020976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 802097a:	4770      	bxne	lr
 802097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8020980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8020984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020988:	4770      	bx	lr
 802098a:	bf00      	nop

0802098c <__aeabi_uldivmod>:
 802098c:	b953      	cbnz	r3, 80209a4 <__aeabi_uldivmod+0x18>
 802098e:	b94a      	cbnz	r2, 80209a4 <__aeabi_uldivmod+0x18>
 8020990:	2900      	cmp	r1, #0
 8020992:	bf08      	it	eq
 8020994:	2800      	cmpeq	r0, #0
 8020996:	bf1c      	itt	ne
 8020998:	f04f 31ff 	movne.w	r1, #4294967295
 802099c:	f04f 30ff 	movne.w	r0, #4294967295
 80209a0:	f000 b972 	b.w	8020c88 <__aeabi_idiv0>
 80209a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80209a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80209ac:	f000 f806 	bl	80209bc <__udivmoddi4>
 80209b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80209b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80209b8:	b004      	add	sp, #16
 80209ba:	4770      	bx	lr

080209bc <__udivmoddi4>:
 80209bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80209c0:	9e08      	ldr	r6, [sp, #32]
 80209c2:	4604      	mov	r4, r0
 80209c4:	4688      	mov	r8, r1
 80209c6:	2b00      	cmp	r3, #0
 80209c8:	d14b      	bne.n	8020a62 <__udivmoddi4+0xa6>
 80209ca:	428a      	cmp	r2, r1
 80209cc:	4615      	mov	r5, r2
 80209ce:	d967      	bls.n	8020aa0 <__udivmoddi4+0xe4>
 80209d0:	fab2 f282 	clz	r2, r2
 80209d4:	b14a      	cbz	r2, 80209ea <__udivmoddi4+0x2e>
 80209d6:	f1c2 0720 	rsb	r7, r2, #32
 80209da:	fa01 f302 	lsl.w	r3, r1, r2
 80209de:	fa20 f707 	lsr.w	r7, r0, r7
 80209e2:	4095      	lsls	r5, r2
 80209e4:	ea47 0803 	orr.w	r8, r7, r3
 80209e8:	4094      	lsls	r4, r2
 80209ea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80209ee:	0c23      	lsrs	r3, r4, #16
 80209f0:	fbb8 f7fe 	udiv	r7, r8, lr
 80209f4:	fa1f fc85 	uxth.w	ip, r5
 80209f8:	fb0e 8817 	mls	r8, lr, r7, r8
 80209fc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8020a00:	fb07 f10c 	mul.w	r1, r7, ip
 8020a04:	4299      	cmp	r1, r3
 8020a06:	d909      	bls.n	8020a1c <__udivmoddi4+0x60>
 8020a08:	18eb      	adds	r3, r5, r3
 8020a0a:	f107 30ff 	add.w	r0, r7, #4294967295
 8020a0e:	f080 811b 	bcs.w	8020c48 <__udivmoddi4+0x28c>
 8020a12:	4299      	cmp	r1, r3
 8020a14:	f240 8118 	bls.w	8020c48 <__udivmoddi4+0x28c>
 8020a18:	3f02      	subs	r7, #2
 8020a1a:	442b      	add	r3, r5
 8020a1c:	1a5b      	subs	r3, r3, r1
 8020a1e:	b2a4      	uxth	r4, r4
 8020a20:	fbb3 f0fe 	udiv	r0, r3, lr
 8020a24:	fb0e 3310 	mls	r3, lr, r0, r3
 8020a28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020a2c:	fb00 fc0c 	mul.w	ip, r0, ip
 8020a30:	45a4      	cmp	ip, r4
 8020a32:	d909      	bls.n	8020a48 <__udivmoddi4+0x8c>
 8020a34:	192c      	adds	r4, r5, r4
 8020a36:	f100 33ff 	add.w	r3, r0, #4294967295
 8020a3a:	f080 8107 	bcs.w	8020c4c <__udivmoddi4+0x290>
 8020a3e:	45a4      	cmp	ip, r4
 8020a40:	f240 8104 	bls.w	8020c4c <__udivmoddi4+0x290>
 8020a44:	3802      	subs	r0, #2
 8020a46:	442c      	add	r4, r5
 8020a48:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8020a4c:	eba4 040c 	sub.w	r4, r4, ip
 8020a50:	2700      	movs	r7, #0
 8020a52:	b11e      	cbz	r6, 8020a5c <__udivmoddi4+0xa0>
 8020a54:	40d4      	lsrs	r4, r2
 8020a56:	2300      	movs	r3, #0
 8020a58:	e9c6 4300 	strd	r4, r3, [r6]
 8020a5c:	4639      	mov	r1, r7
 8020a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020a62:	428b      	cmp	r3, r1
 8020a64:	d909      	bls.n	8020a7a <__udivmoddi4+0xbe>
 8020a66:	2e00      	cmp	r6, #0
 8020a68:	f000 80eb 	beq.w	8020c42 <__udivmoddi4+0x286>
 8020a6c:	2700      	movs	r7, #0
 8020a6e:	e9c6 0100 	strd	r0, r1, [r6]
 8020a72:	4638      	mov	r0, r7
 8020a74:	4639      	mov	r1, r7
 8020a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020a7a:	fab3 f783 	clz	r7, r3
 8020a7e:	2f00      	cmp	r7, #0
 8020a80:	d147      	bne.n	8020b12 <__udivmoddi4+0x156>
 8020a82:	428b      	cmp	r3, r1
 8020a84:	d302      	bcc.n	8020a8c <__udivmoddi4+0xd0>
 8020a86:	4282      	cmp	r2, r0
 8020a88:	f200 80fa 	bhi.w	8020c80 <__udivmoddi4+0x2c4>
 8020a8c:	1a84      	subs	r4, r0, r2
 8020a8e:	eb61 0303 	sbc.w	r3, r1, r3
 8020a92:	2001      	movs	r0, #1
 8020a94:	4698      	mov	r8, r3
 8020a96:	2e00      	cmp	r6, #0
 8020a98:	d0e0      	beq.n	8020a5c <__udivmoddi4+0xa0>
 8020a9a:	e9c6 4800 	strd	r4, r8, [r6]
 8020a9e:	e7dd      	b.n	8020a5c <__udivmoddi4+0xa0>
 8020aa0:	b902      	cbnz	r2, 8020aa4 <__udivmoddi4+0xe8>
 8020aa2:	deff      	udf	#255	; 0xff
 8020aa4:	fab2 f282 	clz	r2, r2
 8020aa8:	2a00      	cmp	r2, #0
 8020aaa:	f040 808f 	bne.w	8020bcc <__udivmoddi4+0x210>
 8020aae:	1b49      	subs	r1, r1, r5
 8020ab0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020ab4:	fa1f f885 	uxth.w	r8, r5
 8020ab8:	2701      	movs	r7, #1
 8020aba:	fbb1 fcfe 	udiv	ip, r1, lr
 8020abe:	0c23      	lsrs	r3, r4, #16
 8020ac0:	fb0e 111c 	mls	r1, lr, ip, r1
 8020ac4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020ac8:	fb08 f10c 	mul.w	r1, r8, ip
 8020acc:	4299      	cmp	r1, r3
 8020ace:	d907      	bls.n	8020ae0 <__udivmoddi4+0x124>
 8020ad0:	18eb      	adds	r3, r5, r3
 8020ad2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8020ad6:	d202      	bcs.n	8020ade <__udivmoddi4+0x122>
 8020ad8:	4299      	cmp	r1, r3
 8020ada:	f200 80cd 	bhi.w	8020c78 <__udivmoddi4+0x2bc>
 8020ade:	4684      	mov	ip, r0
 8020ae0:	1a59      	subs	r1, r3, r1
 8020ae2:	b2a3      	uxth	r3, r4
 8020ae4:	fbb1 f0fe 	udiv	r0, r1, lr
 8020ae8:	fb0e 1410 	mls	r4, lr, r0, r1
 8020aec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8020af0:	fb08 f800 	mul.w	r8, r8, r0
 8020af4:	45a0      	cmp	r8, r4
 8020af6:	d907      	bls.n	8020b08 <__udivmoddi4+0x14c>
 8020af8:	192c      	adds	r4, r5, r4
 8020afa:	f100 33ff 	add.w	r3, r0, #4294967295
 8020afe:	d202      	bcs.n	8020b06 <__udivmoddi4+0x14a>
 8020b00:	45a0      	cmp	r8, r4
 8020b02:	f200 80b6 	bhi.w	8020c72 <__udivmoddi4+0x2b6>
 8020b06:	4618      	mov	r0, r3
 8020b08:	eba4 0408 	sub.w	r4, r4, r8
 8020b0c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8020b10:	e79f      	b.n	8020a52 <__udivmoddi4+0x96>
 8020b12:	f1c7 0c20 	rsb	ip, r7, #32
 8020b16:	40bb      	lsls	r3, r7
 8020b18:	fa22 fe0c 	lsr.w	lr, r2, ip
 8020b1c:	ea4e 0e03 	orr.w	lr, lr, r3
 8020b20:	fa01 f407 	lsl.w	r4, r1, r7
 8020b24:	fa20 f50c 	lsr.w	r5, r0, ip
 8020b28:	fa21 f30c 	lsr.w	r3, r1, ip
 8020b2c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8020b30:	4325      	orrs	r5, r4
 8020b32:	fbb3 f9f8 	udiv	r9, r3, r8
 8020b36:	0c2c      	lsrs	r4, r5, #16
 8020b38:	fb08 3319 	mls	r3, r8, r9, r3
 8020b3c:	fa1f fa8e 	uxth.w	sl, lr
 8020b40:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8020b44:	fb09 f40a 	mul.w	r4, r9, sl
 8020b48:	429c      	cmp	r4, r3
 8020b4a:	fa02 f207 	lsl.w	r2, r2, r7
 8020b4e:	fa00 f107 	lsl.w	r1, r0, r7
 8020b52:	d90b      	bls.n	8020b6c <__udivmoddi4+0x1b0>
 8020b54:	eb1e 0303 	adds.w	r3, lr, r3
 8020b58:	f109 30ff 	add.w	r0, r9, #4294967295
 8020b5c:	f080 8087 	bcs.w	8020c6e <__udivmoddi4+0x2b2>
 8020b60:	429c      	cmp	r4, r3
 8020b62:	f240 8084 	bls.w	8020c6e <__udivmoddi4+0x2b2>
 8020b66:	f1a9 0902 	sub.w	r9, r9, #2
 8020b6a:	4473      	add	r3, lr
 8020b6c:	1b1b      	subs	r3, r3, r4
 8020b6e:	b2ad      	uxth	r5, r5
 8020b70:	fbb3 f0f8 	udiv	r0, r3, r8
 8020b74:	fb08 3310 	mls	r3, r8, r0, r3
 8020b78:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8020b7c:	fb00 fa0a 	mul.w	sl, r0, sl
 8020b80:	45a2      	cmp	sl, r4
 8020b82:	d908      	bls.n	8020b96 <__udivmoddi4+0x1da>
 8020b84:	eb1e 0404 	adds.w	r4, lr, r4
 8020b88:	f100 33ff 	add.w	r3, r0, #4294967295
 8020b8c:	d26b      	bcs.n	8020c66 <__udivmoddi4+0x2aa>
 8020b8e:	45a2      	cmp	sl, r4
 8020b90:	d969      	bls.n	8020c66 <__udivmoddi4+0x2aa>
 8020b92:	3802      	subs	r0, #2
 8020b94:	4474      	add	r4, lr
 8020b96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020b9a:	fba0 8902 	umull	r8, r9, r0, r2
 8020b9e:	eba4 040a 	sub.w	r4, r4, sl
 8020ba2:	454c      	cmp	r4, r9
 8020ba4:	46c2      	mov	sl, r8
 8020ba6:	464b      	mov	r3, r9
 8020ba8:	d354      	bcc.n	8020c54 <__udivmoddi4+0x298>
 8020baa:	d051      	beq.n	8020c50 <__udivmoddi4+0x294>
 8020bac:	2e00      	cmp	r6, #0
 8020bae:	d069      	beq.n	8020c84 <__udivmoddi4+0x2c8>
 8020bb0:	ebb1 050a 	subs.w	r5, r1, sl
 8020bb4:	eb64 0403 	sbc.w	r4, r4, r3
 8020bb8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8020bbc:	40fd      	lsrs	r5, r7
 8020bbe:	40fc      	lsrs	r4, r7
 8020bc0:	ea4c 0505 	orr.w	r5, ip, r5
 8020bc4:	e9c6 5400 	strd	r5, r4, [r6]
 8020bc8:	2700      	movs	r7, #0
 8020bca:	e747      	b.n	8020a5c <__udivmoddi4+0xa0>
 8020bcc:	f1c2 0320 	rsb	r3, r2, #32
 8020bd0:	fa20 f703 	lsr.w	r7, r0, r3
 8020bd4:	4095      	lsls	r5, r2
 8020bd6:	fa01 f002 	lsl.w	r0, r1, r2
 8020bda:	fa21 f303 	lsr.w	r3, r1, r3
 8020bde:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020be2:	4338      	orrs	r0, r7
 8020be4:	0c01      	lsrs	r1, r0, #16
 8020be6:	fbb3 f7fe 	udiv	r7, r3, lr
 8020bea:	fa1f f885 	uxth.w	r8, r5
 8020bee:	fb0e 3317 	mls	r3, lr, r7, r3
 8020bf2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020bf6:	fb07 f308 	mul.w	r3, r7, r8
 8020bfa:	428b      	cmp	r3, r1
 8020bfc:	fa04 f402 	lsl.w	r4, r4, r2
 8020c00:	d907      	bls.n	8020c12 <__udivmoddi4+0x256>
 8020c02:	1869      	adds	r1, r5, r1
 8020c04:	f107 3cff 	add.w	ip, r7, #4294967295
 8020c08:	d22f      	bcs.n	8020c6a <__udivmoddi4+0x2ae>
 8020c0a:	428b      	cmp	r3, r1
 8020c0c:	d92d      	bls.n	8020c6a <__udivmoddi4+0x2ae>
 8020c0e:	3f02      	subs	r7, #2
 8020c10:	4429      	add	r1, r5
 8020c12:	1acb      	subs	r3, r1, r3
 8020c14:	b281      	uxth	r1, r0
 8020c16:	fbb3 f0fe 	udiv	r0, r3, lr
 8020c1a:	fb0e 3310 	mls	r3, lr, r0, r3
 8020c1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020c22:	fb00 f308 	mul.w	r3, r0, r8
 8020c26:	428b      	cmp	r3, r1
 8020c28:	d907      	bls.n	8020c3a <__udivmoddi4+0x27e>
 8020c2a:	1869      	adds	r1, r5, r1
 8020c2c:	f100 3cff 	add.w	ip, r0, #4294967295
 8020c30:	d217      	bcs.n	8020c62 <__udivmoddi4+0x2a6>
 8020c32:	428b      	cmp	r3, r1
 8020c34:	d915      	bls.n	8020c62 <__udivmoddi4+0x2a6>
 8020c36:	3802      	subs	r0, #2
 8020c38:	4429      	add	r1, r5
 8020c3a:	1ac9      	subs	r1, r1, r3
 8020c3c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8020c40:	e73b      	b.n	8020aba <__udivmoddi4+0xfe>
 8020c42:	4637      	mov	r7, r6
 8020c44:	4630      	mov	r0, r6
 8020c46:	e709      	b.n	8020a5c <__udivmoddi4+0xa0>
 8020c48:	4607      	mov	r7, r0
 8020c4a:	e6e7      	b.n	8020a1c <__udivmoddi4+0x60>
 8020c4c:	4618      	mov	r0, r3
 8020c4e:	e6fb      	b.n	8020a48 <__udivmoddi4+0x8c>
 8020c50:	4541      	cmp	r1, r8
 8020c52:	d2ab      	bcs.n	8020bac <__udivmoddi4+0x1f0>
 8020c54:	ebb8 0a02 	subs.w	sl, r8, r2
 8020c58:	eb69 020e 	sbc.w	r2, r9, lr
 8020c5c:	3801      	subs	r0, #1
 8020c5e:	4613      	mov	r3, r2
 8020c60:	e7a4      	b.n	8020bac <__udivmoddi4+0x1f0>
 8020c62:	4660      	mov	r0, ip
 8020c64:	e7e9      	b.n	8020c3a <__udivmoddi4+0x27e>
 8020c66:	4618      	mov	r0, r3
 8020c68:	e795      	b.n	8020b96 <__udivmoddi4+0x1da>
 8020c6a:	4667      	mov	r7, ip
 8020c6c:	e7d1      	b.n	8020c12 <__udivmoddi4+0x256>
 8020c6e:	4681      	mov	r9, r0
 8020c70:	e77c      	b.n	8020b6c <__udivmoddi4+0x1b0>
 8020c72:	3802      	subs	r0, #2
 8020c74:	442c      	add	r4, r5
 8020c76:	e747      	b.n	8020b08 <__udivmoddi4+0x14c>
 8020c78:	f1ac 0c02 	sub.w	ip, ip, #2
 8020c7c:	442b      	add	r3, r5
 8020c7e:	e72f      	b.n	8020ae0 <__udivmoddi4+0x124>
 8020c80:	4638      	mov	r0, r7
 8020c82:	e708      	b.n	8020a96 <__udivmoddi4+0xda>
 8020c84:	4637      	mov	r7, r6
 8020c86:	e6e9      	b.n	8020a5c <__udivmoddi4+0xa0>

08020c88 <__aeabi_idiv0>:
 8020c88:	4770      	bx	lr
 8020c8a:	bf00      	nop

08020c8c <_ZN7EncoderC1Ev>:
#include "encoder.hpp"
#include "declare_extern.h"

Encoder::Encoder() : distance_(0)
 8020c8c:	b480      	push	{r7}
 8020c8e:	b083      	sub	sp, #12
 8020c90:	af00      	add	r7, sp, #0
 8020c92:	6078      	str	r0, [r7, #4]
                   , distance_stack_(0)
                   , distance_difference_(0) {}
 8020c94:	687b      	ldr	r3, [r7, #4]
 8020c96:	f04f 0200 	mov.w	r2, #0
 8020c9a:	601a      	str	r2, [r3, #0]
 8020c9c:	687b      	ldr	r3, [r7, #4]
 8020c9e:	f04f 0200 	mov.w	r2, #0
 8020ca2:	605a      	str	r2, [r3, #4]
 8020ca4:	687b      	ldr	r3, [r7, #4]
 8020ca6:	f04f 0200 	mov.w	r2, #0
 8020caa:	609a      	str	r2, [r3, #8]
 8020cac:	687b      	ldr	r3, [r7, #4]
 8020cae:	4618      	mov	r0, r3
 8020cb0:	370c      	adds	r7, #12
 8020cb2:	46bd      	mov	sp, r7
 8020cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cb8:	4770      	bx	lr
	...

08020cbc <_ZN7Encoder4InitEv>:

void Encoder::Init()
{
 8020cbc:	b580      	push	{r7, lr}
 8020cbe:	b082      	sub	sp, #8
 8020cc0:	af00      	add	r7, sp, #0
 8020cc2:	6078      	str	r0, [r7, #4]
	if(HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL) != HAL_OK)
 8020cc4:	213c      	movs	r1, #60	; 0x3c
 8020cc6:	4812      	ldr	r0, [pc, #72]	; (8020d10 <_ZN7Encoder4InitEv+0x54>)
 8020cc8:	f005 fc5c 	bl	8026584 <HAL_TIM_Encoder_Start>
 8020ccc:	4603      	mov	r3, r0
 8020cce:	2b00      	cmp	r3, #0
 8020cd0:	bf14      	ite	ne
 8020cd2:	2301      	movne	r3, #1
 8020cd4:	2300      	moveq	r3, #0
 8020cd6:	b2db      	uxtb	r3, r3
 8020cd8:	2b00      	cmp	r3, #0
 8020cda:	d004      	beq.n	8020ce6 <_ZN7Encoder4InitEv+0x2a>
	{
#ifdef DEBUG_MODE
        g_error_handler_tim8 = true;
 8020cdc:	4b0d      	ldr	r3, [pc, #52]	; (8020d14 <_ZN7Encoder4InitEv+0x58>)
 8020cde:	2201      	movs	r2, #1
 8020ce0:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

		Error_Handler();
 8020ce2:	f001 fd4d 	bl	8022780 <Error_Handler>
	}

	if(HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL) != HAL_OK)
 8020ce6:	213c      	movs	r1, #60	; 0x3c
 8020ce8:	480b      	ldr	r0, [pc, #44]	; (8020d18 <_ZN7Encoder4InitEv+0x5c>)
 8020cea:	f005 fc4b 	bl	8026584 <HAL_TIM_Encoder_Start>
 8020cee:	4603      	mov	r3, r0
 8020cf0:	2b00      	cmp	r3, #0
 8020cf2:	bf14      	ite	ne
 8020cf4:	2301      	movne	r3, #1
 8020cf6:	2300      	moveq	r3, #0
 8020cf8:	b2db      	uxtb	r3, r3
 8020cfa:	2b00      	cmp	r3, #0
 8020cfc:	d004      	beq.n	8020d08 <_ZN7Encoder4InitEv+0x4c>
	{
#ifdef DEBUG_MODE
        g_error_handler_tim4 = true;
 8020cfe:	4b07      	ldr	r3, [pc, #28]	; (8020d1c <_ZN7Encoder4InitEv+0x60>)
 8020d00:	2201      	movs	r2, #1
 8020d02:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

		Error_Handler();
 8020d04:	f001 fd3c 	bl	8022780 <Error_Handler>
	}
}
 8020d08:	bf00      	nop
 8020d0a:	3708      	adds	r7, #8
 8020d0c:	46bd      	mov	sp, r7
 8020d0e:	bd80      	pop	{r7, pc}
 8020d10:	20000818 	.word	0x20000818
 8020d14:	20000303 	.word	0x20000303
 8020d18:	20000858 	.word	0x20000858
 8020d1c:	20000302 	.word	0x20000302

08020d20 <_ZN7Encoder6UpdateEv>:

void Encoder::Update()
{
 8020d20:	b590      	push	{r4, r7, lr}
 8020d22:	b087      	sub	sp, #28
 8020d24:	af00      	add	r7, sp, #0
 8020d26:	6078      	str	r0, [r7, #4]
	int16_t count_l = static_cast<int16_t>((TIM8 -> CNT) - START_COUNT);
 8020d28:	4b39      	ldr	r3, [pc, #228]	; (8020e10 <_ZN7Encoder6UpdateEv+0xf0>)
 8020d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020d2c:	b29b      	uxth	r3, r3
 8020d2e:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8020d32:	3b7f      	subs	r3, #127	; 0x7f
 8020d34:	b29b      	uxth	r3, r3
 8020d36:	82fb      	strh	r3, [r7, #22]
	int16_t count_r = static_cast<int16_t>(START_COUNT - (TIM4 -> CNT));
 8020d38:	4b36      	ldr	r3, [pc, #216]	; (8020e14 <_ZN7Encoder6UpdateEv+0xf4>)
 8020d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020d3c:	b29b      	uxth	r3, r3
 8020d3e:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 8020d42:	337f      	adds	r3, #127	; 0x7f
 8020d44:	b29b      	uxth	r3, r3
 8020d46:	82bb      	strh	r3, [r7, #20]
	TIM8 -> CNT = START_COUNT;
 8020d48:	4b31      	ldr	r3, [pc, #196]	; (8020e10 <_ZN7Encoder6UpdateEv+0xf0>)
 8020d4a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020d4e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = START_COUNT;
 8020d50:	4b30      	ldr	r3, [pc, #192]	; (8020e14 <_ZN7Encoder6UpdateEv+0xf4>)
 8020d52:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8020d56:	625a      	str	r2, [r3, #36]	; 0x24
	float distance_l = static_cast<float>(count_l * DISTANCE_PER_COUNT);
 8020d58:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020d5c:	4618      	mov	r0, r3
 8020d5e:	f7ff fac1 	bl	80202e4 <__aeabi_i2d>
 8020d62:	a329      	add	r3, pc, #164	; (adr r3, 8020e08 <_ZN7Encoder6UpdateEv+0xe8>)
 8020d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d68:	f7ff fb26 	bl	80203b8 <__aeabi_dmul>
 8020d6c:	4603      	mov	r3, r0
 8020d6e:	460c      	mov	r4, r1
 8020d70:	4618      	mov	r0, r3
 8020d72:	4621      	mov	r1, r4
 8020d74:	f7ff fdba 	bl	80208ec <__aeabi_d2f>
 8020d78:	4603      	mov	r3, r0
 8020d7a:	613b      	str	r3, [r7, #16]
	float distance_r = static_cast<float>(count_r * DISTANCE_PER_COUNT);
 8020d7c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8020d80:	4618      	mov	r0, r3
 8020d82:	f7ff faaf 	bl	80202e4 <__aeabi_i2d>
 8020d86:	a320      	add	r3, pc, #128	; (adr r3, 8020e08 <_ZN7Encoder6UpdateEv+0xe8>)
 8020d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d8c:	f7ff fb14 	bl	80203b8 <__aeabi_dmul>
 8020d90:	4603      	mov	r3, r0
 8020d92:	460c      	mov	r4, r1
 8020d94:	4618      	mov	r0, r3
 8020d96:	4621      	mov	r1, r4
 8020d98:	f7ff fda8 	bl	80208ec <__aeabi_d2f>
 8020d9c:	4603      	mov	r3, r0
 8020d9e:	60fb      	str	r3, [r7, #12]
	float distance = (distance_l + distance_r) / 2.0;
 8020da0:	ed97 7a04 	vldr	s14, [r7, #16]
 8020da4:	edd7 7a03 	vldr	s15, [r7, #12]
 8020da8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8020dac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8020db0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8020db4:	edc7 7a02 	vstr	s15, [r7, #8]

	distance_ = distance;
 8020db8:	687b      	ldr	r3, [r7, #4]
 8020dba:	68ba      	ldr	r2, [r7, #8]
 8020dbc:	601a      	str	r2, [r3, #0]
	distance_stack_ += distance;
 8020dbe:	687b      	ldr	r3, [r7, #4]
 8020dc0:	ed93 7a01 	vldr	s14, [r3, #4]
 8020dc4:	edd7 7a02 	vldr	s15, [r7, #8]
 8020dc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8020dcc:	687b      	ldr	r3, [r7, #4]
 8020dce:	edc3 7a01 	vstr	s15, [r3, #4]
	distance_difference_ = distance_r - distance_l;
 8020dd2:	ed97 7a03 	vldr	s14, [r7, #12]
 8020dd6:	edd7 7a04 	vldr	s15, [r7, #16]
 8020dda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8020dde:	687b      	ldr	r3, [r7, #4]
 8020de0:	edc3 7a02 	vstr	s15, [r3, #8]

#ifdef DEBUG_MODE
	g_enc_cnt_l = count_l;
 8020de4:	4a0c      	ldr	r2, [pc, #48]	; (8020e18 <_ZN7Encoder6UpdateEv+0xf8>)
 8020de6:	8afb      	ldrh	r3, [r7, #22]
 8020de8:	8013      	strh	r3, [r2, #0]
	g_enc_cnt_r = count_r;
 8020dea:	4a0c      	ldr	r2, [pc, #48]	; (8020e1c <_ZN7Encoder6UpdateEv+0xfc>)
 8020dec:	8abb      	ldrh	r3, [r7, #20]
 8020dee:	8013      	strh	r3, [r2, #0]
	g_distance_l = distance_l;
 8020df0:	4a0b      	ldr	r2, [pc, #44]	; (8020e20 <_ZN7Encoder6UpdateEv+0x100>)
 8020df2:	693b      	ldr	r3, [r7, #16]
 8020df4:	6013      	str	r3, [r2, #0]
	g_distance_r = distance_r;
 8020df6:	4a0b      	ldr	r2, [pc, #44]	; (8020e24 <_ZN7Encoder6UpdateEv+0x104>)
 8020df8:	68fb      	ldr	r3, [r7, #12]
 8020dfa:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8020dfc:	bf00      	nop
 8020dfe:	371c      	adds	r7, #28
 8020e00:	46bd      	mov	sp, r7
 8020e02:	bd90      	pop	{r4, r7, pc}
 8020e04:	f3af 8000 	nop.w
 8020e08:	5d35653d 	.word	0x5d35653d
 8020e0c:	3f7d744f 	.word	0x3f7d744f
 8020e10:	40010400 	.word	0x40010400
 8020e14:	40000800 	.word	0x40000800
 8020e18:	200004aa 	.word	0x200004aa
 8020e1c:	200004ac 	.word	0x200004ac
 8020e20:	200004b0 	.word	0x200004b0
 8020e24:	200004b4 	.word	0x200004b4

08020e28 <_ZN7Encoder18ResetDistanceStackEv>:
	TIM8 -> CNT = START_COUNT;
	TIM4 -> CNT = START_COUNT;
}

void Encoder::ResetDistanceStack()
{
 8020e28:	b480      	push	{r7}
 8020e2a:	b083      	sub	sp, #12
 8020e2c:	af00      	add	r7, sp, #0
 8020e2e:	6078      	str	r0, [r7, #4]
	distance_stack_ = 0.0;
 8020e30:	687b      	ldr	r3, [r7, #4]
 8020e32:	f04f 0200 	mov.w	r2, #0
 8020e36:	605a      	str	r2, [r3, #4]
}
 8020e38:	bf00      	nop
 8020e3a:	370c      	adds	r7, #12
 8020e3c:	46bd      	mov	sp, r7
 8020e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e42:	4770      	bx	lr

08020e44 <_ZN7Encoder11GetDistanceEv>:

float Encoder::GetDistance()
{
 8020e44:	b480      	push	{r7}
 8020e46:	b083      	sub	sp, #12
 8020e48:	af00      	add	r7, sp, #0
 8020e4a:	6078      	str	r0, [r7, #4]
	return distance_;
 8020e4c:	687b      	ldr	r3, [r7, #4]
 8020e4e:	681b      	ldr	r3, [r3, #0]
 8020e50:	ee07 3a90 	vmov	s15, r3
}
 8020e54:	eeb0 0a67 	vmov.f32	s0, s15
 8020e58:	370c      	adds	r7, #12
 8020e5a:	46bd      	mov	sp, r7
 8020e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e60:	4770      	bx	lr

08020e62 <_ZN7Encoder16GetDistanceStackEv>:

float Encoder::GetDistanceStack()
{
 8020e62:	b480      	push	{r7}
 8020e64:	b083      	sub	sp, #12
 8020e66:	af00      	add	r7, sp, #0
 8020e68:	6078      	str	r0, [r7, #4]
	return distance_stack_;
 8020e6a:	687b      	ldr	r3, [r7, #4]
 8020e6c:	685b      	ldr	r3, [r3, #4]
 8020e6e:	ee07 3a90 	vmov	s15, r3
}
 8020e72:	eeb0 0a67 	vmov.f32	s0, s15
 8020e76:	370c      	adds	r7, #12
 8020e78:	46bd      	mov	sp, r7
 8020e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e7e:	4770      	bx	lr

08020e80 <_ZN7Encoder15AngularVelocityEv>:

float Encoder::AngularVelocity()
{
 8020e80:	b590      	push	{r4, r7, lr}
 8020e82:	b083      	sub	sp, #12
 8020e84:	af00      	add	r7, sp, #0
 8020e86:	6078      	str	r0, [r7, #4]
	return distance_difference_ / (TIM6_PERIOD * MACHINE_TREAD);
 8020e88:	687b      	ldr	r3, [r7, #4]
 8020e8a:	689b      	ldr	r3, [r3, #8]
 8020e8c:	4618      	mov	r0, r3
 8020e8e:	f7ff fa3b 	bl	8020308 <__aeabi_f2d>
 8020e92:	a309      	add	r3, pc, #36	; (adr r3, 8020eb8 <_ZN7Encoder15AngularVelocityEv+0x38>)
 8020e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e98:	f7ff fbb8 	bl	802060c <__aeabi_ddiv>
 8020e9c:	4603      	mov	r3, r0
 8020e9e:	460c      	mov	r4, r1
 8020ea0:	4618      	mov	r0, r3
 8020ea2:	4621      	mov	r1, r4
 8020ea4:	f7ff fd22 	bl	80208ec <__aeabi_d2f>
 8020ea8:	4603      	mov	r3, r0
 8020eaa:	ee07 3a90 	vmov	s15, r3
 8020eae:	eeb0 0a67 	vmov.f32	s0, s15
 8020eb2:	370c      	adds	r7, #12
 8020eb4:	46bd      	mov	sp, r7
 8020eb6:	bd90      	pop	{r4, r7, pc}
 8020eb8:	00000000 	.word	0x00000000
 8020ebc:	4063d800 	.word	0x4063d800

08020ec0 <_ZN8Iim42652C1Ev>:
#include "iim_42652.hpp"
#include "declare_extern.h"

Iim42652::Iim42652() : degree_stack_z_(0) {}
 8020ec0:	b490      	push	{r4, r7}
 8020ec2:	b082      	sub	sp, #8
 8020ec4:	af00      	add	r7, sp, #0
 8020ec6:	6078      	str	r0, [r7, #4]
 8020ec8:	687a      	ldr	r2, [r7, #4]
 8020eca:	f04f 0300 	mov.w	r3, #0
 8020ece:	f04f 0400 	mov.w	r4, #0
 8020ed2:	e9c2 3400 	strd	r3, r4, [r2]
 8020ed6:	687b      	ldr	r3, [r7, #4]
 8020ed8:	4618      	mov	r0, r3
 8020eda:	3708      	adds	r7, #8
 8020edc:	46bd      	mov	sp, r7
 8020ede:	bc90      	pop	{r4, r7}
 8020ee0:	4770      	bx	lr

08020ee2 <_ZN3LedC1Ev>:
#include "led.hpp"

Led::Led() : interrupt_count_(0)
 8020ee2:	b480      	push	{r7}
 8020ee4:	b083      	sub	sp, #12
 8020ee6:	af00      	add	r7, sp, #0
 8020ee8:	6078      	str	r0, [r7, #4]
           , interrupt_timer_(0) {}
 8020eea:	687b      	ldr	r3, [r7, #4]
 8020eec:	2200      	movs	r2, #0
 8020eee:	701a      	strb	r2, [r3, #0]
 8020ef0:	687b      	ldr	r3, [r7, #4]
 8020ef2:	2200      	movs	r2, #0
 8020ef4:	705a      	strb	r2, [r3, #1]
 8020ef6:	687b      	ldr	r3, [r7, #4]
 8020ef8:	4618      	mov	r0, r3
 8020efa:	370c      	adds	r7, #12
 8020efc:	46bd      	mov	sp, r7
 8020efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f02:	4770      	bx	lr

08020f04 <_ZN3Led10ColorOrderEc>:

void Led::ColorOrder(char color)
{
 8020f04:	b580      	push	{r7, lr}
 8020f06:	b082      	sub	sp, #8
 8020f08:	af00      	add	r7, sp, #0
 8020f0a:	6078      	str	r0, [r7, #4]
 8020f0c:	460b      	mov	r3, r1
 8020f0e:	70fb      	strb	r3, [r7, #3]
    switch(color)
 8020f10:	78fb      	ldrb	r3, [r7, #3]
 8020f12:	3b42      	subs	r3, #66	; 0x42
 8020f14:	2b17      	cmp	r3, #23
 8020f16:	f200 80b8 	bhi.w	802108a <_ZN3Led10ColorOrderEc+0x186>
 8020f1a:	a201      	add	r2, pc, #4	; (adr r2, 8020f20 <_ZN3Led10ColorOrderEc+0x1c>)
 8020f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020f20:	08020fcd 	.word	0x08020fcd
 8020f24:	08021019 	.word	0x08021019
 8020f28:	0802108b 	.word	0x0802108b
 8020f2c:	0802108b 	.word	0x0802108b
 8020f30:	0802108b 	.word	0x0802108b
 8020f34:	08020fa7 	.word	0x08020fa7
 8020f38:	0802108b 	.word	0x0802108b
 8020f3c:	0802108b 	.word	0x0802108b
 8020f40:	0802108b 	.word	0x0802108b
 8020f44:	0802108b 	.word	0x0802108b
 8020f48:	0802108b 	.word	0x0802108b
 8020f4c:	0802103f 	.word	0x0802103f
 8020f50:	0802108b 	.word	0x0802108b
 8020f54:	0802108b 	.word	0x0802108b
 8020f58:	0802108b 	.word	0x0802108b
 8020f5c:	0802108b 	.word	0x0802108b
 8020f60:	08020f81 	.word	0x08020f81
 8020f64:	0802108b 	.word	0x0802108b
 8020f68:	0802108b 	.word	0x0802108b
 8020f6c:	0802108b 	.word	0x0802108b
 8020f70:	0802108b 	.word	0x0802108b
 8020f74:	08021065 	.word	0x08021065
 8020f78:	0802108b 	.word	0x0802108b
 8020f7c:	08020ff3 	.word	0x08020ff3
    {
        case 'R': R_ON;  G_OFF; B_OFF; break;
 8020f80:	2200      	movs	r2, #0
 8020f82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020f86:	484c      	ldr	r0, [pc, #304]	; (80210b8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020f88:	f004 fbd4 	bl	8025734 <HAL_GPIO_WritePin>
 8020f8c:	2201      	movs	r2, #1
 8020f8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020f92:	4849      	ldr	r0, [pc, #292]	; (80210b8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020f94:	f004 fbce 	bl	8025734 <HAL_GPIO_WritePin>
 8020f98:	2201      	movs	r2, #1
 8020f9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020f9e:	4846      	ldr	r0, [pc, #280]	; (80210b8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020fa0:	f004 fbc8 	bl	8025734 <HAL_GPIO_WritePin>
 8020fa4:	e084      	b.n	80210b0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'G': R_OFF; G_ON;  B_OFF; break;
 8020fa6:	2201      	movs	r2, #1
 8020fa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020fac:	4842      	ldr	r0, [pc, #264]	; (80210b8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020fae:	f004 fbc1 	bl	8025734 <HAL_GPIO_WritePin>
 8020fb2:	2200      	movs	r2, #0
 8020fb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020fb8:	483f      	ldr	r0, [pc, #252]	; (80210b8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020fba:	f004 fbbb 	bl	8025734 <HAL_GPIO_WritePin>
 8020fbe:	2201      	movs	r2, #1
 8020fc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020fc4:	483c      	ldr	r0, [pc, #240]	; (80210b8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020fc6:	f004 fbb5 	bl	8025734 <HAL_GPIO_WritePin>
 8020fca:	e071      	b.n	80210b0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'B': R_OFF; G_OFF; B_ON;  break;
 8020fcc:	2201      	movs	r2, #1
 8020fce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020fd2:	4839      	ldr	r0, [pc, #228]	; (80210b8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020fd4:	f004 fbae 	bl	8025734 <HAL_GPIO_WritePin>
 8020fd8:	2201      	movs	r2, #1
 8020fda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020fde:	4836      	ldr	r0, [pc, #216]	; (80210b8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020fe0:	f004 fba8 	bl	8025734 <HAL_GPIO_WritePin>
 8020fe4:	2200      	movs	r2, #0
 8020fe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020fea:	4833      	ldr	r0, [pc, #204]	; (80210b8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020fec:	f004 fba2 	bl	8025734 <HAL_GPIO_WritePin>
 8020ff0:	e05e      	b.n	80210b0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'Y': R_ON;  G_ON;  B_OFF; break;
 8020ff2:	2200      	movs	r2, #0
 8020ff4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020ff8:	482f      	ldr	r0, [pc, #188]	; (80210b8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020ffa:	f004 fb9b 	bl	8025734 <HAL_GPIO_WritePin>
 8020ffe:	2200      	movs	r2, #0
 8021000:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021004:	482c      	ldr	r0, [pc, #176]	; (80210b8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021006:	f004 fb95 	bl	8025734 <HAL_GPIO_WritePin>
 802100a:	2201      	movs	r2, #1
 802100c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021010:	4829      	ldr	r0, [pc, #164]	; (80210b8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021012:	f004 fb8f 	bl	8025734 <HAL_GPIO_WritePin>
 8021016:	e04b      	b.n	80210b0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'C': R_OFF; G_ON;  B_ON;  break;
 8021018:	2201      	movs	r2, #1
 802101a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802101e:	4826      	ldr	r0, [pc, #152]	; (80210b8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021020:	f004 fb88 	bl	8025734 <HAL_GPIO_WritePin>
 8021024:	2200      	movs	r2, #0
 8021026:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802102a:	4823      	ldr	r0, [pc, #140]	; (80210b8 <_ZN3Led10ColorOrderEc+0x1b4>)
 802102c:	f004 fb82 	bl	8025734 <HAL_GPIO_WritePin>
 8021030:	2200      	movs	r2, #0
 8021032:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021036:	4820      	ldr	r0, [pc, #128]	; (80210b8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021038:	f004 fb7c 	bl	8025734 <HAL_GPIO_WritePin>
 802103c:	e038      	b.n	80210b0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'M': R_ON;  G_OFF; B_ON;  break;
 802103e:	2200      	movs	r2, #0
 8021040:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021044:	481c      	ldr	r0, [pc, #112]	; (80210b8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021046:	f004 fb75 	bl	8025734 <HAL_GPIO_WritePin>
 802104a:	2201      	movs	r2, #1
 802104c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021050:	4819      	ldr	r0, [pc, #100]	; (80210b8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021052:	f004 fb6f 	bl	8025734 <HAL_GPIO_WritePin>
 8021056:	2200      	movs	r2, #0
 8021058:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 802105c:	4816      	ldr	r0, [pc, #88]	; (80210b8 <_ZN3Led10ColorOrderEc+0x1b4>)
 802105e:	f004 fb69 	bl	8025734 <HAL_GPIO_WritePin>
 8021062:	e025      	b.n	80210b0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'W': R_ON;  G_ON;  B_ON;  break;
 8021064:	2200      	movs	r2, #0
 8021066:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 802106a:	4813      	ldr	r0, [pc, #76]	; (80210b8 <_ZN3Led10ColorOrderEc+0x1b4>)
 802106c:	f004 fb62 	bl	8025734 <HAL_GPIO_WritePin>
 8021070:	2200      	movs	r2, #0
 8021072:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8021076:	4810      	ldr	r0, [pc, #64]	; (80210b8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021078:	f004 fb5c 	bl	8025734 <HAL_GPIO_WritePin>
 802107c:	2200      	movs	r2, #0
 802107e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8021082:	480d      	ldr	r0, [pc, #52]	; (80210b8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021084:	f004 fb56 	bl	8025734 <HAL_GPIO_WritePin>
 8021088:	e012      	b.n	80210b0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'X': // fall through
        default:  R_OFF; G_OFF; B_OFF; break;
 802108a:	2201      	movs	r2, #1
 802108c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8021090:	4809      	ldr	r0, [pc, #36]	; (80210b8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8021092:	f004 fb4f 	bl	8025734 <HAL_GPIO_WritePin>
 8021096:	2201      	movs	r2, #1
 8021098:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 802109c:	4806      	ldr	r0, [pc, #24]	; (80210b8 <_ZN3Led10ColorOrderEc+0x1b4>)
 802109e:	f004 fb49 	bl	8025734 <HAL_GPIO_WritePin>
 80210a2:	2201      	movs	r2, #1
 80210a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80210a8:	4803      	ldr	r0, [pc, #12]	; (80210b8 <_ZN3Led10ColorOrderEc+0x1b4>)
 80210aa:	f004 fb43 	bl	8025734 <HAL_GPIO_WritePin>
 80210ae:	bf00      	nop
    }
}
 80210b0:	bf00      	nop
 80210b2:	3708      	adds	r7, #8
 80210b4:	46bd      	mov	sp, r7
 80210b6:	bd80      	pop	{r7, pc}
 80210b8:	40020800 	.word	0x40020800

080210bc <_ZN3Led5BlinkEhcc>:

void Led::Blink(uint8_t times, char color_1, char color_2)
{
 80210bc:	b580      	push	{r7, lr}
 80210be:	b084      	sub	sp, #16
 80210c0:	af00      	add	r7, sp, #0
 80210c2:	6078      	str	r0, [r7, #4]
 80210c4:	4608      	mov	r0, r1
 80210c6:	4611      	mov	r1, r2
 80210c8:	461a      	mov	r2, r3
 80210ca:	4603      	mov	r3, r0
 80210cc:	70fb      	strb	r3, [r7, #3]
 80210ce:	460b      	mov	r3, r1
 80210d0:	70bb      	strb	r3, [r7, #2]
 80210d2:	4613      	mov	r3, r2
 80210d4:	707b      	strb	r3, [r7, #1]
    for(uint8_t i = 0; i < times; i++)
 80210d6:	2300      	movs	r3, #0
 80210d8:	73fb      	strb	r3, [r7, #15]
 80210da:	7bfa      	ldrb	r2, [r7, #15]
 80210dc:	78fb      	ldrb	r3, [r7, #3]
 80210de:	429a      	cmp	r2, r3
 80210e0:	d215      	bcs.n	802110e <_ZN3Led5BlinkEhcc+0x52>
    {
        ColorOrder(color_1);
 80210e2:	78bb      	ldrb	r3, [r7, #2]
 80210e4:	4619      	mov	r1, r3
 80210e6:	6878      	ldr	r0, [r7, #4]
 80210e8:	f7ff ff0c 	bl	8020f04 <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 80210ec:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80210f0:	f003 f8d8 	bl	80242a4 <HAL_Delay>
        ColorOrder(color_2);
 80210f4:	787b      	ldrb	r3, [r7, #1]
 80210f6:	4619      	mov	r1, r3
 80210f8:	6878      	ldr	r0, [r7, #4]
 80210fa:	f7ff ff03 	bl	8020f04 <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 80210fe:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021102:	f003 f8cf 	bl	80242a4 <HAL_Delay>
    for(uint8_t i = 0; i < times; i++)
 8021106:	7bfb      	ldrb	r3, [r7, #15]
 8021108:	3301      	adds	r3, #1
 802110a:	73fb      	strb	r3, [r7, #15]
 802110c:	e7e5      	b.n	80210da <_ZN3Led5BlinkEhcc+0x1e>
    }
}
 802110e:	bf00      	nop
 8021110:	3710      	adds	r7, #16
 8021112:	46bd      	mov	sp, r7
 8021114:	bd80      	pop	{r7, pc}

08021116 <_ZN10LineSensorC1Ev>:
#include "line_sensor.hpp"

LineSensor::LineSensor() : line_sensors_buff_{0}
 8021116:	b580      	push	{r7, lr}
 8021118:	b082      	sub	sp, #8
 802111a:	af00      	add	r7, sp, #0
 802111c:	6078      	str	r0, [r7, #4]
                         , consecutive_line_sensors_buff_{{0}}
                         , max_line_sensors_valu_{0}
                         , min_line_sensors_valu_{0}
                         , line_sensors_valu_{0}
                         , emergency_stop_flag_(false) {}
 802111e:	687b      	ldr	r3, [r7, #4]
 8021120:	461a      	mov	r2, r3
 8021122:	2300      	movs	r3, #0
 8021124:	6013      	str	r3, [r2, #0]
 8021126:	6053      	str	r3, [r2, #4]
 8021128:	6093      	str	r3, [r2, #8]
 802112a:	60d3      	str	r3, [r2, #12]
 802112c:	6113      	str	r3, [r2, #16]
 802112e:	6153      	str	r3, [r2, #20]
 8021130:	6193      	str	r3, [r2, #24]
 8021132:	687b      	ldr	r3, [r7, #4]
 8021134:	331c      	adds	r3, #28
 8021136:	f44f 728c 	mov.w	r2, #280	; 0x118
 802113a:	2100      	movs	r1, #0
 802113c:	4618      	mov	r0, r3
 802113e:	f006 f92d 	bl	802739c <memset>
 8021142:	687b      	ldr	r3, [r7, #4]
 8021144:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8021148:	2200      	movs	r2, #0
 802114a:	601a      	str	r2, [r3, #0]
 802114c:	605a      	str	r2, [r3, #4]
 802114e:	609a      	str	r2, [r3, #8]
 8021150:	60da      	str	r2, [r3, #12]
 8021152:	611a      	str	r2, [r3, #16]
 8021154:	615a      	str	r2, [r3, #20]
 8021156:	619a      	str	r2, [r3, #24]
 8021158:	687b      	ldr	r3, [r7, #4]
 802115a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 802115e:	2200      	movs	r2, #0
 8021160:	601a      	str	r2, [r3, #0]
 8021162:	605a      	str	r2, [r3, #4]
 8021164:	609a      	str	r2, [r3, #8]
 8021166:	60da      	str	r2, [r3, #12]
 8021168:	611a      	str	r2, [r3, #16]
 802116a:	615a      	str	r2, [r3, #20]
 802116c:	619a      	str	r2, [r3, #24]
 802116e:	687b      	ldr	r3, [r7, #4]
 8021170:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8021174:	2200      	movs	r2, #0
 8021176:	601a      	str	r2, [r3, #0]
 8021178:	605a      	str	r2, [r3, #4]
 802117a:	609a      	str	r2, [r3, #8]
 802117c:	60da      	str	r2, [r3, #12]
 802117e:	611a      	str	r2, [r3, #16]
 8021180:	615a      	str	r2, [r3, #20]
 8021182:	619a      	str	r2, [r3, #24]
 8021184:	687b      	ldr	r3, [r7, #4]
 8021186:	2200      	movs	r2, #0
 8021188:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 802118c:	687b      	ldr	r3, [r7, #4]
 802118e:	4618      	mov	r0, r3
 8021190:	3708      	adds	r7, #8
 8021192:	46bd      	mov	sp, r7
 8021194:	bd80      	pop	{r7, pc}
	...

08021198 <_ZN10LineSensor4InitEv>:

void LineSensor::Init()
{
 8021198:	b580      	push	{r7, lr}
 802119a:	b082      	sub	sp, #8
 802119c:	af00      	add	r7, sp, #0
 802119e:	6078      	str	r0, [r7, #4]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)line_sensors_buff_, NUM_OF_LINE_SENSORS) != HAL_OK)
 80211a0:	687b      	ldr	r3, [r7, #4]
 80211a2:	220e      	movs	r2, #14
 80211a4:	4619      	mov	r1, r3
 80211a6:	4815      	ldr	r0, [pc, #84]	; (80211fc <_ZN10LineSensor4InitEv+0x64>)
 80211a8:	f003 f8e2 	bl	8024370 <HAL_ADC_Start_DMA>
 80211ac:	4603      	mov	r3, r0
 80211ae:	2b00      	cmp	r3, #0
 80211b0:	bf14      	ite	ne
 80211b2:	2301      	movne	r3, #1
 80211b4:	2300      	moveq	r3, #0
 80211b6:	b2db      	uxtb	r3, r3
 80211b8:	2b00      	cmp	r3, #0
 80211ba:	d004      	beq.n	80211c6 <_ZN10LineSensor4InitEv+0x2e>
    {
#ifdef DEBUG_MODE
        g_error_handler_adc1 = true;
 80211bc:	4b10      	ldr	r3, [pc, #64]	; (8021200 <_ZN10LineSensor4InitEv+0x68>)
 80211be:	2201      	movs	r2, #1
 80211c0:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 80211c2:	f001 fadd 	bl	8022780 <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1) != HAL_OK)
 80211c6:	2100      	movs	r1, #0
 80211c8:	480e      	ldr	r0, [pc, #56]	; (8021204 <_ZN10LineSensor4InitEv+0x6c>)
 80211ca:	f005 f90b 	bl	80263e4 <HAL_TIM_PWM_Start>
 80211ce:	4603      	mov	r3, r0
 80211d0:	2b00      	cmp	r3, #0
 80211d2:	bf14      	ite	ne
 80211d4:	2301      	movne	r3, #1
 80211d6:	2300      	moveq	r3, #0
 80211d8:	b2db      	uxtb	r3, r3
 80211da:	2b00      	cmp	r3, #0
 80211dc:	d004      	beq.n	80211e8 <_ZN10LineSensor4InitEv+0x50>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim11 = true;
 80211de:	4b0a      	ldr	r3, [pc, #40]	; (8021208 <_ZN10LineSensor4InitEv+0x70>)
 80211e0:	2201      	movs	r2, #1
 80211e2:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 80211e4:	f001 facc 	bl	8022780 <Error_Handler>
    }

    __HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, LINE_SENSORS_LED_COMPARE);
 80211e8:	4b06      	ldr	r3, [pc, #24]	; (8021204 <_ZN10LineSensor4InitEv+0x6c>)
 80211ea:	681b      	ldr	r3, [r3, #0]
 80211ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80211f0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80211f2:	bf00      	nop
 80211f4:	3708      	adds	r7, #8
 80211f6:	46bd      	mov	sp, r7
 80211f8:	bd80      	pop	{r7, pc}
 80211fa:	bf00      	nop
 80211fc:	200009c4 	.word	0x200009c4
 8021200:	200002fe 	.word	0x200002fe
 8021204:	20000a0c 	.word	0x20000a0c
 8021208:	200002ff 	.word	0x200002ff

0802120c <_ZN10LineSensor20StoreConsecutiveBuffEv>:

void LineSensor::StoreConsecutiveBuff()
{
 802120c:	b480      	push	{r7}
 802120e:	b085      	sub	sp, #20
 8021210:	af00      	add	r7, sp, #0
 8021212:	6078      	str	r0, [r7, #4]
    static uint8_t times = 0;

    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021214:	2300      	movs	r3, #0
 8021216:	60fb      	str	r3, [r7, #12]
 8021218:	68fb      	ldr	r3, [r7, #12]
 802121a:	2b0d      	cmp	r3, #13
 802121c:	dc16      	bgt.n	802124c <_ZN10LineSensor20StoreConsecutiveBuffEv+0x40>
    {
        consecutive_line_sensors_buff_[times][i] = line_sensors_buff_[i];
 802121e:	4b15      	ldr	r3, [pc, #84]	; (8021274 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021220:	781b      	ldrb	r3, [r3, #0]
 8021222:	4619      	mov	r1, r3
 8021224:	687b      	ldr	r3, [r7, #4]
 8021226:	68fa      	ldr	r2, [r7, #12]
 8021228:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 802122c:	687a      	ldr	r2, [r7, #4]
 802122e:	460b      	mov	r3, r1
 8021230:	00db      	lsls	r3, r3, #3
 8021232:	1a5b      	subs	r3, r3, r1
 8021234:	005b      	lsls	r3, r3, #1
 8021236:	68f9      	ldr	r1, [r7, #12]
 8021238:	440b      	add	r3, r1
 802123a:	330c      	adds	r3, #12
 802123c:	005b      	lsls	r3, r3, #1
 802123e:	4413      	add	r3, r2
 8021240:	4602      	mov	r2, r0
 8021242:	809a      	strh	r2, [r3, #4]
    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021244:	68fb      	ldr	r3, [r7, #12]
 8021246:	3301      	adds	r3, #1
 8021248:	60fb      	str	r3, [r7, #12]
 802124a:	e7e5      	b.n	8021218 <_ZN10LineSensor20StoreConsecutiveBuffEv+0xc>
    }

    times++;
 802124c:	4b09      	ldr	r3, [pc, #36]	; (8021274 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 802124e:	781b      	ldrb	r3, [r3, #0]
 8021250:	3301      	adds	r3, #1
 8021252:	b2da      	uxtb	r2, r3
 8021254:	4b07      	ldr	r3, [pc, #28]	; (8021274 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021256:	701a      	strb	r2, [r3, #0]
    if(times >= CONSECUTIVE_TIMES) times = 0;
 8021258:	4b06      	ldr	r3, [pc, #24]	; (8021274 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 802125a:	781b      	ldrb	r3, [r3, #0]
 802125c:	2b09      	cmp	r3, #9
 802125e:	d902      	bls.n	8021266 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x5a>
 8021260:	4b04      	ldr	r3, [pc, #16]	; (8021274 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021262:	2200      	movs	r2, #0
 8021264:	701a      	strb	r2, [r3, #0]
}
 8021266:	bf00      	nop
 8021268:	3714      	adds	r7, #20
 802126a:	46bd      	mov	sp, r7
 802126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021270:	4770      	bx	lr
 8021272:	bf00      	nop
 8021274:	2000002c 	.word	0x2000002c

08021278 <_ZN10LineSensor9MergeSortEPthh>:

void LineSensor::MergeSort(uint16_t array[], uint8_t first_index, uint8_t last_index)
{
 8021278:	b5b0      	push	{r4, r5, r7, lr}
 802127a:	b088      	sub	sp, #32
 802127c:	af00      	add	r7, sp, #0
 802127e:	60f8      	str	r0, [r7, #12]
 8021280:	60b9      	str	r1, [r7, #8]
 8021282:	4611      	mov	r1, r2
 8021284:	461a      	mov	r2, r3
 8021286:	460b      	mov	r3, r1
 8021288:	71fb      	strb	r3, [r7, #7]
 802128a:	4613      	mov	r3, r2
 802128c:	71bb      	strb	r3, [r7, #6]

    for(i = first_index; i <= last_index; i++)
    {
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
        else                                     array[i] = temp_array[right--];
    }
 802128e:	466b      	mov	r3, sp
 8021290:	461d      	mov	r5, r3
    if(first_index >= last_index) return;
 8021292:	79fa      	ldrb	r2, [r7, #7]
 8021294:	79bb      	ldrb	r3, [r7, #6]
 8021296:	429a      	cmp	r2, r3
 8021298:	f080 80ba 	bcs.w	8021410 <_ZN10LineSensor9MergeSortEPthh+0x198>
    uint16_t temp_array[last_index+1];
 802129c:	79b8      	ldrb	r0, [r7, #6]
 802129e:	61b8      	str	r0, [r7, #24]
 80212a0:	4603      	mov	r3, r0
 80212a2:	3301      	adds	r3, #1
 80212a4:	4619      	mov	r1, r3
 80212a6:	f04f 0200 	mov.w	r2, #0
 80212aa:	f04f 0300 	mov.w	r3, #0
 80212ae:	f04f 0400 	mov.w	r4, #0
 80212b2:	0114      	lsls	r4, r2, #4
 80212b4:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80212b8:	010b      	lsls	r3, r1, #4
 80212ba:	4603      	mov	r3, r0
 80212bc:	3301      	adds	r3, #1
 80212be:	4619      	mov	r1, r3
 80212c0:	f04f 0200 	mov.w	r2, #0
 80212c4:	f04f 0300 	mov.w	r3, #0
 80212c8:	f04f 0400 	mov.w	r4, #0
 80212cc:	0114      	lsls	r4, r2, #4
 80212ce:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80212d2:	010b      	lsls	r3, r1, #4
 80212d4:	4603      	mov	r3, r0
 80212d6:	3301      	adds	r3, #1
 80212d8:	005b      	lsls	r3, r3, #1
 80212da:	3301      	adds	r3, #1
 80212dc:	3307      	adds	r3, #7
 80212de:	08db      	lsrs	r3, r3, #3
 80212e0:	00db      	lsls	r3, r3, #3
 80212e2:	ebad 0d03 	sub.w	sp, sp, r3
 80212e6:	466b      	mov	r3, sp
 80212e8:	3301      	adds	r3, #1
 80212ea:	085b      	lsrs	r3, r3, #1
 80212ec:	005b      	lsls	r3, r3, #1
 80212ee:	617b      	str	r3, [r7, #20]
    middle = (first_index + last_index) / 2;
 80212f0:	79fa      	ldrb	r2, [r7, #7]
 80212f2:	79bb      	ldrb	r3, [r7, #6]
 80212f4:	4413      	add	r3, r2
 80212f6:	0fda      	lsrs	r2, r3, #31
 80212f8:	4413      	add	r3, r2
 80212fa:	105b      	asrs	r3, r3, #1
 80212fc:	74fb      	strb	r3, [r7, #19]
    MergeSort(array, first_index, middle);
 80212fe:	7cfb      	ldrb	r3, [r7, #19]
 8021300:	79fa      	ldrb	r2, [r7, #7]
 8021302:	68b9      	ldr	r1, [r7, #8]
 8021304:	68f8      	ldr	r0, [r7, #12]
 8021306:	f7ff ffb7 	bl	8021278 <_ZN10LineSensor9MergeSortEPthh>
    MergeSort(array, middle+1, last_index);
 802130a:	7cfb      	ldrb	r3, [r7, #19]
 802130c:	3301      	adds	r3, #1
 802130e:	b2da      	uxtb	r2, r3
 8021310:	79bb      	ldrb	r3, [r7, #6]
 8021312:	68b9      	ldr	r1, [r7, #8]
 8021314:	68f8      	ldr	r0, [r7, #12]
 8021316:	f7ff ffaf 	bl	8021278 <_ZN10LineSensor9MergeSortEPthh>
    for(i = middle; i >= first_index; i--)
 802131a:	7cfb      	ldrb	r3, [r7, #19]
 802131c:	77bb      	strb	r3, [r7, #30]
 802131e:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021322:	79fb      	ldrb	r3, [r7, #7]
 8021324:	429a      	cmp	r2, r3
 8021326:	db11      	blt.n	802134c <_ZN10LineSensor9MergeSortEPthh+0xd4>
        temp_array[i] = array[i];
 8021328:	f997 301e 	ldrsb.w	r3, [r7, #30]
 802132c:	005b      	lsls	r3, r3, #1
 802132e:	68ba      	ldr	r2, [r7, #8]
 8021330:	4413      	add	r3, r2
 8021332:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021336:	8819      	ldrh	r1, [r3, #0]
 8021338:	697b      	ldr	r3, [r7, #20]
 802133a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle; i >= first_index; i--)
 802133e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021342:	b2db      	uxtb	r3, r3
 8021344:	3b01      	subs	r3, #1
 8021346:	b2db      	uxtb	r3, r3
 8021348:	77bb      	strb	r3, [r7, #30]
 802134a:	e7e8      	b.n	802131e <_ZN10LineSensor9MergeSortEPthh+0xa6>
    for(i = middle+1; i <= last_index; i++)
 802134c:	7cfb      	ldrb	r3, [r7, #19]
 802134e:	3301      	adds	r3, #1
 8021350:	b2db      	uxtb	r3, r3
 8021352:	77bb      	strb	r3, [r7, #30]
 8021354:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8021358:	79bb      	ldrb	r3, [r7, #6]
 802135a:	429a      	cmp	r2, r3
 802135c:	dc17      	bgt.n	802138e <_ZN10LineSensor9MergeSortEPthh+0x116>
        temp_array[last_index - (i - (middle+1))] = array[i];
 802135e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021362:	005b      	lsls	r3, r3, #1
 8021364:	68ba      	ldr	r2, [r7, #8]
 8021366:	4413      	add	r3, r2
 8021368:	79b9      	ldrb	r1, [r7, #6]
 802136a:	f997 001e 	ldrsb.w	r0, [r7, #30]
 802136e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8021372:	3201      	adds	r2, #1
 8021374:	1a82      	subs	r2, r0, r2
 8021376:	1a8a      	subs	r2, r1, r2
 8021378:	8819      	ldrh	r1, [r3, #0]
 802137a:	697b      	ldr	r3, [r7, #20]
 802137c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for(i = middle+1; i <= last_index; i++)
 8021380:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021384:	b2db      	uxtb	r3, r3
 8021386:	3301      	adds	r3, #1
 8021388:	b2db      	uxtb	r3, r3
 802138a:	77bb      	strb	r3, [r7, #30]
 802138c:	e7e2      	b.n	8021354 <_ZN10LineSensor9MergeSortEPthh+0xdc>
    left  = first_index;
 802138e:	79fb      	ldrb	r3, [r7, #7]
 8021390:	77fb      	strb	r3, [r7, #31]
    right = last_index;
 8021392:	79bb      	ldrb	r3, [r7, #6]
 8021394:	777b      	strb	r3, [r7, #29]
    for(i = first_index; i <= last_index; i++)
 8021396:	79fb      	ldrb	r3, [r7, #7]
 8021398:	77bb      	strb	r3, [r7, #30]
 802139a:	f997 201e 	ldrsb.w	r2, [r7, #30]
 802139e:	79bb      	ldrb	r3, [r7, #6]
 80213a0:	429a      	cmp	r2, r3
 80213a2:	dc33      	bgt.n	802140c <_ZN10LineSensor9MergeSortEPthh+0x194>
        if(temp_array[left] < temp_array[right]) array[i] = temp_array[left++];
 80213a4:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80213a8:	697b      	ldr	r3, [r7, #20]
 80213aa:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80213ae:	f997 101d 	ldrsb.w	r1, [r7, #29]
 80213b2:	697b      	ldr	r3, [r7, #20]
 80213b4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80213b8:	429a      	cmp	r2, r3
 80213ba:	d210      	bcs.n	80213de <_ZN10LineSensor9MergeSortEPthh+0x166>
 80213bc:	f997 201f 	ldrsb.w	r2, [r7, #31]
 80213c0:	b2d3      	uxtb	r3, r2
 80213c2:	3301      	adds	r3, #1
 80213c4:	b2db      	uxtb	r3, r3
 80213c6:	77fb      	strb	r3, [r7, #31]
 80213c8:	4611      	mov	r1, r2
 80213ca:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80213ce:	005b      	lsls	r3, r3, #1
 80213d0:	68ba      	ldr	r2, [r7, #8]
 80213d2:	4413      	add	r3, r2
 80213d4:	697a      	ldr	r2, [r7, #20]
 80213d6:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80213da:	801a      	strh	r2, [r3, #0]
 80213dc:	e00f      	b.n	80213fe <_ZN10LineSensor9MergeSortEPthh+0x186>
        else                                     array[i] = temp_array[right--];
 80213de:	f997 201d 	ldrsb.w	r2, [r7, #29]
 80213e2:	b2d3      	uxtb	r3, r2
 80213e4:	3b01      	subs	r3, #1
 80213e6:	b2db      	uxtb	r3, r3
 80213e8:	777b      	strb	r3, [r7, #29]
 80213ea:	4611      	mov	r1, r2
 80213ec:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80213f0:	005b      	lsls	r3, r3, #1
 80213f2:	68ba      	ldr	r2, [r7, #8]
 80213f4:	4413      	add	r3, r2
 80213f6:	697a      	ldr	r2, [r7, #20]
 80213f8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80213fc:	801a      	strh	r2, [r3, #0]
    for(i = first_index; i <= last_index; i++)
 80213fe:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8021402:	b2db      	uxtb	r3, r3
 8021404:	3301      	adds	r3, #1
 8021406:	b2db      	uxtb	r3, r3
 8021408:	77bb      	strb	r3, [r7, #30]
 802140a:	e7c6      	b.n	802139a <_ZN10LineSensor9MergeSortEPthh+0x122>
 802140c:	46ad      	mov	sp, r5
 802140e:	e001      	b.n	8021414 <_ZN10LineSensor9MergeSortEPthh+0x19c>
    if(first_index >= last_index) return;
 8021410:	bf00      	nop
 8021412:	46ad      	mov	sp, r5
}
 8021414:	3720      	adds	r7, #32
 8021416:	46bd      	mov	sp, r7
 8021418:	bdb0      	pop	{r4, r5, r7, pc}
	...

0802141c <_ZN10LineSensor6UpdateEv>:

void LineSensor::Update()
{
 802141c:	b590      	push	{r4, r7, lr}
 802141e:	b08b      	sub	sp, #44	; 0x2c
 8021420:	af00      	add	r7, sp, #0
 8021422:	6078      	str	r0, [r7, #4]
    uint8_t i, j;
    uint16_t temp_array[CONSECUTIVE_TIMES];
    uint16_t median, max, min, normalized;
    bool emergency = true;
 8021424:	2301      	movs	r3, #1
 8021426:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 802142a:	2300      	movs	r3, #0
 802142c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021434:	2b0d      	cmp	r3, #13
 8021436:	f200 80c8 	bhi.w	80215ca <_ZN10LineSensor6UpdateEv+0x1ae>
    {
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 802143a:	2300      	movs	r3, #0
 802143c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021440:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021444:	2b09      	cmp	r3, #9
 8021446:	d81b      	bhi.n	8021480 <_ZN10LineSensor6UpdateEv+0x64>
        {
            temp_array[j] = consecutive_line_sensors_buff_[j][i];
 8021448:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802144c:	f897 4027 	ldrb.w	r4, [r7, #39]	; 0x27
 8021450:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8021454:	6878      	ldr	r0, [r7, #4]
 8021456:	4613      	mov	r3, r2
 8021458:	00db      	lsls	r3, r3, #3
 802145a:	1a9b      	subs	r3, r3, r2
 802145c:	005b      	lsls	r3, r3, #1
 802145e:	4423      	add	r3, r4
 8021460:	330c      	adds	r3, #12
 8021462:	005b      	lsls	r3, r3, #1
 8021464:	4403      	add	r3, r0
 8021466:	889a      	ldrh	r2, [r3, #4]
 8021468:	004b      	lsls	r3, r1, #1
 802146a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 802146e:	440b      	add	r3, r1
 8021470:	f823 2c20 	strh.w	r2, [r3, #-32]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021474:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021478:	3301      	adds	r3, #1
 802147a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 802147e:	e7df      	b.n	8021440 <_ZN10LineSensor6UpdateEv+0x24>
        }

        MergeSort(temp_array, 0, CONSECUTIVE_TIMES-1);
 8021480:	f107 0108 	add.w	r1, r7, #8
 8021484:	2309      	movs	r3, #9
 8021486:	2200      	movs	r2, #0
 8021488:	6878      	ldr	r0, [r7, #4]
 802148a:	f7ff fef5 	bl	8021278 <_ZN10LineSensor9MergeSortEPthh>
        median = temp_array[HALF_CONSECUTIVE_TIMES];
 802148e:	8a7b      	ldrh	r3, [r7, #18]
 8021490:	83fb      	strh	r3, [r7, #30]

#ifdef DEBUG_MODE
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 8021492:	2300      	movs	r3, #0
 8021494:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8021498:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802149c:	2b09      	cmp	r3, #9
 802149e:	d81a      	bhi.n	80214d6 <_ZN10LineSensor6UpdateEv+0xba>
        {
            g_consecutive_line_buff[i][j] = temp_array[j];
 80214a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80214a4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80214a8:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80214ac:	005b      	lsls	r3, r3, #1
 80214ae:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80214b2:	4403      	add	r3, r0
 80214b4:	f833 4c20 	ldrh.w	r4, [r3, #-32]
 80214b8:	4848      	ldr	r0, [pc, #288]	; (80215dc <_ZN10LineSensor6UpdateEv+0x1c0>)
 80214ba:	4613      	mov	r3, r2
 80214bc:	009b      	lsls	r3, r3, #2
 80214be:	4413      	add	r3, r2
 80214c0:	005b      	lsls	r3, r3, #1
 80214c2:	440b      	add	r3, r1
 80214c4:	4622      	mov	r2, r4
 80214c6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        for(j = 0; j < CONSECUTIVE_TIMES; j++)
 80214ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80214ce:	3301      	adds	r3, #1
 80214d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80214d4:	e7e0      	b.n	8021498 <_ZN10LineSensor6UpdateEv+0x7c>
        }
#endif // DEBUG_MODE

        max = max_line_sensors_valu_[i];
 80214d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80214da:	687a      	ldr	r2, [r7, #4]
 80214dc:	3398      	adds	r3, #152	; 0x98
 80214de:	005b      	lsls	r3, r3, #1
 80214e0:	4413      	add	r3, r2
 80214e2:	889b      	ldrh	r3, [r3, #4]
 80214e4:	84bb      	strh	r3, [r7, #36]	; 0x24
        min = min_line_sensors_valu_[i];
 80214e6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80214ea:	687b      	ldr	r3, [r7, #4]
 80214ec:	32a8      	adds	r2, #168	; 0xa8
 80214ee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80214f2:	847b      	strh	r3, [r7, #34]	; 0x22
        if(max < median || max == 0) max = median;
 80214f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80214f6:	8bfb      	ldrh	r3, [r7, #30]
 80214f8:	429a      	cmp	r2, r3
 80214fa:	d302      	bcc.n	8021502 <_ZN10LineSensor6UpdateEv+0xe6>
 80214fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80214fe:	2b00      	cmp	r3, #0
 8021500:	d101      	bne.n	8021506 <_ZN10LineSensor6UpdateEv+0xea>
 8021502:	8bfb      	ldrh	r3, [r7, #30]
 8021504:	84bb      	strh	r3, [r7, #36]	; 0x24
        if(min > median || min == 0) min = median;
 8021506:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8021508:	8bfb      	ldrh	r3, [r7, #30]
 802150a:	429a      	cmp	r2, r3
 802150c:	d802      	bhi.n	8021514 <_ZN10LineSensor6UpdateEv+0xf8>
 802150e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021510:	2b00      	cmp	r3, #0
 8021512:	d101      	bne.n	8021518 <_ZN10LineSensor6UpdateEv+0xfc>
 8021514:	8bfb      	ldrh	r3, [r7, #30]
 8021516:	847b      	strh	r3, [r7, #34]	; 0x22
        max_line_sensors_valu_[i] = max;
 8021518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802151c:	687a      	ldr	r2, [r7, #4]
 802151e:	3398      	adds	r3, #152	; 0x98
 8021520:	005b      	lsls	r3, r3, #1
 8021522:	4413      	add	r3, r2
 8021524:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021526:	809a      	strh	r2, [r3, #4]
        min_line_sensors_valu_[i] = min;
 8021528:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802152c:	687b      	ldr	r3, [r7, #4]
 802152e:	32a8      	adds	r2, #168	; 0xa8
 8021530:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8021532:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

#ifdef DEBUG_MODE
        g_max_line_valu[i] = max_line_sensors_valu_[i];
 8021536:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802153a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802153e:	6879      	ldr	r1, [r7, #4]
 8021540:	3398      	adds	r3, #152	; 0x98
 8021542:	005b      	lsls	r3, r3, #1
 8021544:	440b      	add	r3, r1
 8021546:	8899      	ldrh	r1, [r3, #4]
 8021548:	4b25      	ldr	r3, [pc, #148]	; (80215e0 <_ZN10LineSensor6UpdateEv+0x1c4>)
 802154a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        g_min_line_valu[i] = min_line_sensors_valu_[i];
 802154e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8021552:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021556:	687a      	ldr	r2, [r7, #4]
 8021558:	31a8      	adds	r1, #168	; 0xa8
 802155a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 802155e:	4a21      	ldr	r2, [pc, #132]	; (80215e4 <_ZN10LineSensor6UpdateEv+0x1c8>)
 8021560:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
#endif // DEBUG_MODE

        if(max > min)
 8021564:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021566:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021568:	429a      	cmp	r2, r3
 802156a:	d928      	bls.n	80215be <_ZN10LineSensor6UpdateEv+0x1a2>
        {
            normalized = MAX_NORMALIZED_VALU * (median - min) / (max - min);
 802156c:	8bfa      	ldrh	r2, [r7, #30]
 802156e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021570:	1ad3      	subs	r3, r2, r3
 8021572:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8021576:	fb02 f203 	mul.w	r2, r2, r3
 802157a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 802157c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802157e:	1acb      	subs	r3, r1, r3
 8021580:	fb92 f3f3 	sdiv	r3, r2, r3
 8021584:	83bb      	strh	r3, [r7, #28]
            line_sensors_valu_[i] = normalized;
 8021586:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802158a:	687a      	ldr	r2, [r7, #4]
 802158c:	33b4      	adds	r3, #180	; 0xb4
 802158e:	005b      	lsls	r3, r3, #1
 8021590:	4413      	add	r3, r2
 8021592:	8bba      	ldrh	r2, [r7, #28]
 8021594:	809a      	strh	r2, [r3, #4]

#ifdef DEBUG_MODE
            g_line_valu[i] = line_sensors_valu_[i];
 8021596:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802159a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802159e:	6879      	ldr	r1, [r7, #4]
 80215a0:	33b4      	adds	r3, #180	; 0xb4
 80215a2:	005b      	lsls	r3, r3, #1
 80215a4:	440b      	add	r3, r1
 80215a6:	8899      	ldrh	r1, [r3, #4]
 80215a8:	4b0f      	ldr	r3, [pc, #60]	; (80215e8 <_ZN10LineSensor6UpdateEv+0x1cc>)
 80215aa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
#endif // DEBUG_MODE

            if(normalized < EMERGENCY_STOP_BORDER) emergency = false;
 80215ae:	8bbb      	ldrh	r3, [r7, #28]
 80215b0:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80215b4:	4293      	cmp	r3, r2
 80215b6:	d802      	bhi.n	80215be <_ZN10LineSensor6UpdateEv+0x1a2>
 80215b8:	2300      	movs	r3, #0
 80215ba:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    for(i = 0; i < NUM_OF_LINE_SENSORS; i++)
 80215be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80215c2:	3301      	adds	r3, #1
 80215c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80215c8:	e732      	b.n	8021430 <_ZN10LineSensor6UpdateEv+0x14>
        }
    }
    emergency_stop_flag_ = emergency;
 80215ca:	687b      	ldr	r3, [r7, #4]
 80215cc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80215d0:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
}
 80215d4:	bf00      	nop
 80215d6:	372c      	adds	r7, #44	; 0x2c
 80215d8:	46bd      	mov	sp, r7
 80215da:	bd90      	pop	{r4, r7, pc}
 80215dc:	20000320 	.word	0x20000320
 80215e0:	20000438 	.word	0x20000438
 80215e4:	20000454 	.word	0x20000454
 80215e8:	20000470 	.word	0x20000470

080215ec <_ZN10LineSensor19LeftRightDifferenceEv>:

float LineSensor::LeftRightDifference()
{
 80215ec:	b5b0      	push	{r4, r5, r7, lr}
 80215ee:	b086      	sub	sp, #24
 80215f0:	af00      	add	r7, sp, #0
 80215f2:	6078      	str	r0, [r7, #4]
    uint8_t i;
    uint32_t left = 0, right = 0;
 80215f4:	2300      	movs	r3, #0
 80215f6:	613b      	str	r3, [r7, #16]
 80215f8:	2300      	movs	r3, #0
 80215fa:	60fb      	str	r3, [r7, #12]

    for(i = 0; i < HALF_NUM_OF_LINE_SENSORS; i++)
 80215fc:	2300      	movs	r3, #0
 80215fe:	75fb      	strb	r3, [r7, #23]
 8021600:	7dfb      	ldrb	r3, [r7, #23]
 8021602:	2b06      	cmp	r3, #6
 8021604:	d80d      	bhi.n	8021622 <_ZN10LineSensor19LeftRightDifferenceEv+0x36>
    {
        left += line_sensors_valu_[i];
 8021606:	7dfb      	ldrb	r3, [r7, #23]
 8021608:	687a      	ldr	r2, [r7, #4]
 802160a:	33b4      	adds	r3, #180	; 0xb4
 802160c:	005b      	lsls	r3, r3, #1
 802160e:	4413      	add	r3, r2
 8021610:	889b      	ldrh	r3, [r3, #4]
 8021612:	461a      	mov	r2, r3
 8021614:	693b      	ldr	r3, [r7, #16]
 8021616:	4413      	add	r3, r2
 8021618:	613b      	str	r3, [r7, #16]
    for(i = 0; i < HALF_NUM_OF_LINE_SENSORS; i++)
 802161a:	7dfb      	ldrb	r3, [r7, #23]
 802161c:	3301      	adds	r3, #1
 802161e:	75fb      	strb	r3, [r7, #23]
 8021620:	e7ee      	b.n	8021600 <_ZN10LineSensor19LeftRightDifferenceEv+0x14>
    }
    for(i = HALF_NUM_OF_LINE_SENSORS; i < NUM_OF_LINE_SENSORS; i++)
 8021622:	2307      	movs	r3, #7
 8021624:	75fb      	strb	r3, [r7, #23]
 8021626:	7dfb      	ldrb	r3, [r7, #23]
 8021628:	2b0d      	cmp	r3, #13
 802162a:	d80d      	bhi.n	8021648 <_ZN10LineSensor19LeftRightDifferenceEv+0x5c>
    {
        right += line_sensors_valu_[i];
 802162c:	7dfb      	ldrb	r3, [r7, #23]
 802162e:	687a      	ldr	r2, [r7, #4]
 8021630:	33b4      	adds	r3, #180	; 0xb4
 8021632:	005b      	lsls	r3, r3, #1
 8021634:	4413      	add	r3, r2
 8021636:	889b      	ldrh	r3, [r3, #4]
 8021638:	461a      	mov	r2, r3
 802163a:	68fb      	ldr	r3, [r7, #12]
 802163c:	4413      	add	r3, r2
 802163e:	60fb      	str	r3, [r7, #12]
    for(i = HALF_NUM_OF_LINE_SENSORS; i < NUM_OF_LINE_SENSORS; i++)
 8021640:	7dfb      	ldrb	r3, [r7, #23]
 8021642:	3301      	adds	r3, #1
 8021644:	75fb      	strb	r3, [r7, #23]
 8021646:	e7ee      	b.n	8021626 <_ZN10LineSensor19LeftRightDifferenceEv+0x3a>
    }

#ifdef DEBUG_MODE
    g_line_left = left;
 8021648:	4a11      	ldr	r2, [pc, #68]	; (8021690 <_ZN10LineSensor19LeftRightDifferenceEv+0xa4>)
 802164a:	693b      	ldr	r3, [r7, #16]
 802164c:	6013      	str	r3, [r2, #0]
    g_line_right = right;
 802164e:	4a11      	ldr	r2, [pc, #68]	; (8021694 <_ZN10LineSensor19LeftRightDifferenceEv+0xa8>)
 8021650:	68fb      	ldr	r3, [r7, #12]
 8021652:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    float difference = right * LINE_SENSOR_CORRECTION - left;
 8021654:	68f8      	ldr	r0, [r7, #12]
 8021656:	f7fe fe35 	bl	80202c4 <__aeabi_ui2d>
 802165a:	4604      	mov	r4, r0
 802165c:	460d      	mov	r5, r1
 802165e:	6938      	ldr	r0, [r7, #16]
 8021660:	f7fe fe30 	bl	80202c4 <__aeabi_ui2d>
 8021664:	4602      	mov	r2, r0
 8021666:	460b      	mov	r3, r1
 8021668:	4620      	mov	r0, r4
 802166a:	4629      	mov	r1, r5
 802166c:	f7fe fcec 	bl	8020048 <__aeabi_dsub>
 8021670:	4603      	mov	r3, r0
 8021672:	460c      	mov	r4, r1
 8021674:	4618      	mov	r0, r3
 8021676:	4621      	mov	r1, r4
 8021678:	f7ff f938 	bl	80208ec <__aeabi_d2f>
 802167c:	4603      	mov	r3, r0
 802167e:	60bb      	str	r3, [r7, #8]

    return difference;
 8021680:	68bb      	ldr	r3, [r7, #8]
 8021682:	ee07 3a90 	vmov	s15, r3
}
 8021686:	eeb0 0a67 	vmov.f32	s0, s15
 802168a:	3718      	adds	r7, #24
 802168c:	46bd      	mov	sp, r7
 802168e:	bdb0      	pop	{r4, r5, r7, pc}
 8021690:	2000048c 	.word	0x2000048c
 8021694:	20000490 	.word	0x20000490

08021698 <_ZN10LineSensor20GetEmergencyStopFlagEv>:

bool LineSensor::GetEmergencyStopFlag()
{
 8021698:	b480      	push	{r7}
 802169a:	b083      	sub	sp, #12
 802169c:	af00      	add	r7, sp, #0
 802169e:	6078      	str	r0, [r7, #4]
    return emergency_stop_flag_;
 80216a0:	687b      	ldr	r3, [r7, #4]
 80216a2:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
}
 80216a6:	4618      	mov	r0, r3
 80216a8:	370c      	adds	r7, #12
 80216aa:	46bd      	mov	sp, r7
 80216ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216b0:	4770      	bx	lr
	...

080216b4 <_ZN10LineSensor16CheckCalibrationEv>:

bool LineSensor::CheckCalibration()
{
 80216b4:	b480      	push	{r7}
 80216b6:	b085      	sub	sp, #20
 80216b8:	af00      	add	r7, sp, #0
 80216ba:	6078      	str	r0, [r7, #4]
    static uint16_t timer = 0;
    static uint16_t pre_max[NUM_OF_LINE_SENSORS] = {0};
    static uint16_t pre_min[NUM_OF_LINE_SENSORS] = {0};
    uint16_t max, min;
    bool result = true;
 80216bc:	2301      	movs	r3, #1
 80216be:	73fb      	strb	r3, [r7, #15]

    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 80216c0:	2300      	movs	r3, #0
 80216c2:	73bb      	strb	r3, [r7, #14]
 80216c4:	7bbb      	ldrb	r3, [r7, #14]
 80216c6:	2b0d      	cmp	r3, #13
 80216c8:	d82d      	bhi.n	8021726 <_ZN10LineSensor16CheckCalibrationEv+0x72>
    {
        max = max_line_sensors_valu_[i];
 80216ca:	7bbb      	ldrb	r3, [r7, #14]
 80216cc:	687a      	ldr	r2, [r7, #4]
 80216ce:	3398      	adds	r3, #152	; 0x98
 80216d0:	005b      	lsls	r3, r3, #1
 80216d2:	4413      	add	r3, r2
 80216d4:	889b      	ldrh	r3, [r3, #4]
 80216d6:	81bb      	strh	r3, [r7, #12]
        min = min_line_sensors_valu_[i];
 80216d8:	7bba      	ldrb	r2, [r7, #14]
 80216da:	687b      	ldr	r3, [r7, #4]
 80216dc:	32a8      	adds	r2, #168	; 0xa8
 80216de:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80216e2:	817b      	strh	r3, [r7, #10]

        if(pre_max[i] != max)      result = false;
 80216e4:	7bbb      	ldrb	r3, [r7, #14]
 80216e6:	4a1e      	ldr	r2, [pc, #120]	; (8021760 <_ZN10LineSensor16CheckCalibrationEv+0xac>)
 80216e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80216ec:	89ba      	ldrh	r2, [r7, #12]
 80216ee:	429a      	cmp	r2, r3
 80216f0:	d002      	beq.n	80216f8 <_ZN10LineSensor16CheckCalibrationEv+0x44>
 80216f2:	2300      	movs	r3, #0
 80216f4:	73fb      	strb	r3, [r7, #15]
 80216f6:	e008      	b.n	802170a <_ZN10LineSensor16CheckCalibrationEv+0x56>
        else if(pre_min[i] != min) result = false;
 80216f8:	7bbb      	ldrb	r3, [r7, #14]
 80216fa:	4a1a      	ldr	r2, [pc, #104]	; (8021764 <_ZN10LineSensor16CheckCalibrationEv+0xb0>)
 80216fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021700:	897a      	ldrh	r2, [r7, #10]
 8021702:	429a      	cmp	r2, r3
 8021704:	d001      	beq.n	802170a <_ZN10LineSensor16CheckCalibrationEv+0x56>
 8021706:	2300      	movs	r3, #0
 8021708:	73fb      	strb	r3, [r7, #15]

        pre_max[i] = max;
 802170a:	7bbb      	ldrb	r3, [r7, #14]
 802170c:	4914      	ldr	r1, [pc, #80]	; (8021760 <_ZN10LineSensor16CheckCalibrationEv+0xac>)
 802170e:	89ba      	ldrh	r2, [r7, #12]
 8021710:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        pre_min[i] = min;
 8021714:	7bbb      	ldrb	r3, [r7, #14]
 8021716:	4913      	ldr	r1, [pc, #76]	; (8021764 <_ZN10LineSensor16CheckCalibrationEv+0xb0>)
 8021718:	897a      	ldrh	r2, [r7, #10]
 802171a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 802171e:	7bbb      	ldrb	r3, [r7, #14]
 8021720:	3301      	adds	r3, #1
 8021722:	73bb      	strb	r3, [r7, #14]
 8021724:	e7ce      	b.n	80216c4 <_ZN10LineSensor16CheckCalibrationEv+0x10>
    }

    if(result)
 8021726:	7bfb      	ldrb	r3, [r7, #15]
 8021728:	2b00      	cmp	r3, #0
 802172a:	d00e      	beq.n	802174a <_ZN10LineSensor16CheckCalibrationEv+0x96>
    {
        if(timer < CALIBRATION_SUCCESS_TIME)
 802172c:	4b0e      	ldr	r3, [pc, #56]	; (8021768 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 802172e:	881b      	ldrh	r3, [r3, #0]
 8021730:	f240 52db 	movw	r2, #1499	; 0x5db
 8021734:	4293      	cmp	r3, r2
 8021736:	d80b      	bhi.n	8021750 <_ZN10LineSensor16CheckCalibrationEv+0x9c>
        {
            timer++;
 8021738:	4b0b      	ldr	r3, [pc, #44]	; (8021768 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 802173a:	881b      	ldrh	r3, [r3, #0]
 802173c:	3301      	adds	r3, #1
 802173e:	b29a      	uxth	r2, r3
 8021740:	4b09      	ldr	r3, [pc, #36]	; (8021768 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 8021742:	801a      	strh	r2, [r3, #0]
            result = false;
 8021744:	2300      	movs	r3, #0
 8021746:	73fb      	strb	r3, [r7, #15]
 8021748:	e002      	b.n	8021750 <_ZN10LineSensor16CheckCalibrationEv+0x9c>
        }
    }
    else timer = 0;
 802174a:	4b07      	ldr	r3, [pc, #28]	; (8021768 <_ZN10LineSensor16CheckCalibrationEv+0xb4>)
 802174c:	2200      	movs	r2, #0
 802174e:	801a      	strh	r2, [r3, #0]
    
    return result;
 8021750:	7bfb      	ldrb	r3, [r7, #15]
}
 8021752:	4618      	mov	r0, r3
 8021754:	3714      	adds	r7, #20
 8021756:	46bd      	mov	sp, r7
 8021758:	f85d 7b04 	ldr.w	r7, [sp], #4
 802175c:	4770      	bx	lr
 802175e:	bf00      	nop
 8021760:	20000030 	.word	0x20000030
 8021764:	2000004c 	.word	0x2000004c
 8021768:	2000002e 	.word	0x2000002e

0802176c <_ZN10LineSensor15MonitorLineBuffEv>:

#ifdef DEBUG_MODE
void LineSensor::MonitorLineBuff()
{
 802176c:	b480      	push	{r7}
 802176e:	b085      	sub	sp, #20
 8021770:	af00      	add	r7, sp, #0
 8021772:	6078      	str	r0, [r7, #4]
    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021774:	2300      	movs	r3, #0
 8021776:	73fb      	strb	r3, [r7, #15]
 8021778:	7bfb      	ldrb	r3, [r7, #15]
 802177a:	2b0d      	cmp	r3, #13
 802177c:	d80b      	bhi.n	8021796 <_ZN10LineSensor15MonitorLineBuffEv+0x2a>
    {
        g_line_buff[i] = line_sensors_buff_[i];
 802177e:	7bf9      	ldrb	r1, [r7, #15]
 8021780:	7bfb      	ldrb	r3, [r7, #15]
 8021782:	687a      	ldr	r2, [r7, #4]
 8021784:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8021788:	4a06      	ldr	r2, [pc, #24]	; (80217a4 <_ZN10LineSensor15MonitorLineBuffEv+0x38>)
 802178a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i = 0; i < NUM_OF_LINE_SENSORS; i++)
 802178e:	7bfb      	ldrb	r3, [r7, #15]
 8021790:	3301      	adds	r3, #1
 8021792:	73fb      	strb	r3, [r7, #15]
 8021794:	e7f0      	b.n	8021778 <_ZN10LineSensor15MonitorLineBuffEv+0xc>
    }
}
 8021796:	bf00      	nop
 8021798:	3714      	adds	r7, #20
 802179a:	46bd      	mov	sp, r7
 802179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217a0:	4770      	bx	lr
 80217a2:	bf00      	nop
 80217a4:	20000304 	.word	0x20000304

080217a8 <_ZN9LineTraceC1EP10LineSensor>:
#include "line_trace.hpp"

LineTrace::LineTrace(LineSensor *line_sensor) : integral_error_(0)
 80217a8:	b480      	push	{r7}
 80217aa:	b083      	sub	sp, #12
 80217ac:	af00      	add	r7, sp, #0
 80217ae:	6078      	str	r0, [r7, #4]
 80217b0:	6039      	str	r1, [r7, #0]
 80217b2:	687b      	ldr	r3, [r7, #4]
 80217b4:	f04f 0200 	mov.w	r2, #0
 80217b8:	601a      	str	r2, [r3, #0]
{
    line_sensor_ = line_sensor;
 80217ba:	687b      	ldr	r3, [r7, #4]
 80217bc:	683a      	ldr	r2, [r7, #0]
 80217be:	605a      	str	r2, [r3, #4]
}
 80217c0:	687b      	ldr	r3, [r7, #4]
 80217c2:	4618      	mov	r0, r3
 80217c4:	370c      	adds	r7, #12
 80217c6:	46bd      	mov	sp, r7
 80217c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217cc:	4770      	bx	lr
	...

080217d0 <_ZN9LineTrace13LineTraceOnlyEv>:

float LineTrace::LineTraceOnly()
{
 80217d0:	b580      	push	{r7, lr}
 80217d2:	b086      	sub	sp, #24
 80217d4:	af00      	add	r7, sp, #0
 80217d6:	6078      	str	r0, [r7, #4]
    float p_gain = LINE_ONLY_P_GAIN;
 80217d8:	4b0b      	ldr	r3, [pc, #44]	; (8021808 <_ZN9LineTrace13LineTraceOnlyEv+0x38>)
 80217da:	617b      	str	r3, [r7, #20]
    float i_gain = LINE_ONLY_I_GAIN;
 80217dc:	f04f 0300 	mov.w	r3, #0
 80217e0:	613b      	str	r3, [r7, #16]
    float d_gain = LINE_ONLY_D_GAIN;
 80217e2:	f04f 0300 	mov.w	r3, #0
 80217e6:	60fb      	str	r3, [r7, #12]

    return PidControl(p_gain, i_gain, d_gain);
 80217e8:	ed97 1a03 	vldr	s2, [r7, #12]
 80217ec:	edd7 0a04 	vldr	s1, [r7, #16]
 80217f0:	ed97 0a05 	vldr	s0, [r7, #20]
 80217f4:	6878      	ldr	r0, [r7, #4]
 80217f6:	f000 f80b 	bl	8021810 <_ZN9LineTrace10PidControlEfff>
 80217fa:	eef0 7a40 	vmov.f32	s15, s0
}
 80217fe:	eeb0 0a67 	vmov.f32	s0, s15
 8021802:	3718      	adds	r7, #24
 8021804:	46bd      	mov	sp, r7
 8021806:	bd80      	pop	{r7, pc}
 8021808:	38d1b717 	.word	0x38d1b717
 802180c:	00000000 	.word	0x00000000

08021810 <_ZN9LineTrace10PidControlEfff>:

    return PidControl(p_gain, i_gain, d_gain);
}

float LineTrace::PidControl(float p_gain, float i_gain, float d_gain)
{
 8021810:	b590      	push	{r4, r7, lr}
 8021812:	b08b      	sub	sp, #44	; 0x2c
 8021814:	af00      	add	r7, sp, #0
 8021816:	60f8      	str	r0, [r7, #12]
 8021818:	ed87 0a02 	vstr	s0, [r7, #8]
 802181c:	edc7 0a01 	vstr	s1, [r7, #4]
 8021820:	ed87 1a00 	vstr	s2, [r7]
    static float pre_error = line_sensor_->LeftRightDifference();
 8021824:	4b52      	ldr	r3, [pc, #328]	; (8021970 <_ZN9LineTrace10PidControlEfff+0x160>)
 8021826:	781b      	ldrb	r3, [r3, #0]
 8021828:	f3bf 8f5b 	dmb	ish
 802182c:	b2db      	uxtb	r3, r3
 802182e:	f003 0301 	and.w	r3, r3, #1
 8021832:	2b00      	cmp	r3, #0
 8021834:	bf0c      	ite	eq
 8021836:	2301      	moveq	r3, #1
 8021838:	2300      	movne	r3, #0
 802183a:	b2db      	uxtb	r3, r3
 802183c:	2b00      	cmp	r3, #0
 802183e:	d017      	beq.n	8021870 <_ZN9LineTrace10PidControlEfff+0x60>
 8021840:	484b      	ldr	r0, [pc, #300]	; (8021970 <_ZN9LineTrace10PidControlEfff+0x160>)
 8021842:	f005 fd77 	bl	8027334 <__cxa_guard_acquire>
 8021846:	4603      	mov	r3, r0
 8021848:	2b00      	cmp	r3, #0
 802184a:	bf14      	ite	ne
 802184c:	2301      	movne	r3, #1
 802184e:	2300      	moveq	r3, #0
 8021850:	b2db      	uxtb	r3, r3
 8021852:	2b00      	cmp	r3, #0
 8021854:	d00c      	beq.n	8021870 <_ZN9LineTrace10PidControlEfff+0x60>
 8021856:	68fb      	ldr	r3, [r7, #12]
 8021858:	685b      	ldr	r3, [r3, #4]
 802185a:	4618      	mov	r0, r3
 802185c:	f7ff fec6 	bl	80215ec <_ZN10LineSensor19LeftRightDifferenceEv>
 8021860:	eef0 7a40 	vmov.f32	s15, s0
 8021864:	4b43      	ldr	r3, [pc, #268]	; (8021974 <_ZN9LineTrace10PidControlEfff+0x164>)
 8021866:	edc3 7a00 	vstr	s15, [r3]
 802186a:	4841      	ldr	r0, [pc, #260]	; (8021970 <_ZN9LineTrace10PidControlEfff+0x160>)
 802186c:	f005 fd6e 	bl	802734c <__cxa_guard_release>
    float error, differential_error, integral_error;
    float p, d, i;

    error = line_sensor_->LeftRightDifference();
 8021870:	68fb      	ldr	r3, [r7, #12]
 8021872:	685b      	ldr	r3, [r3, #4]
 8021874:	4618      	mov	r0, r3
 8021876:	f7ff feb9 	bl	80215ec <_ZN10LineSensor19LeftRightDifferenceEv>
 802187a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    differential_error = (error - pre_error) / TIM6_PERIOD_S;
 802187e:	4b3d      	ldr	r3, [pc, #244]	; (8021974 <_ZN9LineTrace10PidControlEfff+0x164>)
 8021880:	edd3 7a00 	vldr	s15, [r3]
 8021884:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8021888:	ee77 7a67 	vsub.f32	s15, s14, s15
 802188c:	ee17 0a90 	vmov	r0, s15
 8021890:	f7fe fd3a 	bl	8020308 <__aeabi_f2d>
 8021894:	a334      	add	r3, pc, #208	; (adr r3, 8021968 <_ZN9LineTrace10PidControlEfff+0x158>)
 8021896:	e9d3 2300 	ldrd	r2, r3, [r3]
 802189a:	f7fe feb7 	bl	802060c <__aeabi_ddiv>
 802189e:	4603      	mov	r3, r0
 80218a0:	460c      	mov	r4, r1
 80218a2:	4618      	mov	r0, r3
 80218a4:	4621      	mov	r1, r4
 80218a6:	f7ff f821 	bl	80208ec <__aeabi_d2f>
 80218aa:	4603      	mov	r3, r0
 80218ac:	623b      	str	r3, [r7, #32]
    integral_error = (error + pre_error) / 2.0 * TIM6_PERIOD_S;
 80218ae:	4b31      	ldr	r3, [pc, #196]	; (8021974 <_ZN9LineTrace10PidControlEfff+0x164>)
 80218b0:	ed93 7a00 	vldr	s14, [r3]
 80218b4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80218b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80218bc:	ee17 0a90 	vmov	r0, s15
 80218c0:	f7fe fd22 	bl	8020308 <__aeabi_f2d>
 80218c4:	f04f 0200 	mov.w	r2, #0
 80218c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80218cc:	f7fe fe9e 	bl	802060c <__aeabi_ddiv>
 80218d0:	4603      	mov	r3, r0
 80218d2:	460c      	mov	r4, r1
 80218d4:	4618      	mov	r0, r3
 80218d6:	4621      	mov	r1, r4
 80218d8:	a323      	add	r3, pc, #140	; (adr r3, 8021968 <_ZN9LineTrace10PidControlEfff+0x158>)
 80218da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80218de:	f7fe fd6b 	bl	80203b8 <__aeabi_dmul>
 80218e2:	4603      	mov	r3, r0
 80218e4:	460c      	mov	r4, r1
 80218e6:	4618      	mov	r0, r3
 80218e8:	4621      	mov	r1, r4
 80218ea:	f7fe ffff 	bl	80208ec <__aeabi_d2f>
 80218ee:	4603      	mov	r3, r0
 80218f0:	61fb      	str	r3, [r7, #28]
    SetIntegralError(integral_error);
 80218f2:	ed97 0a07 	vldr	s0, [r7, #28]
 80218f6:	68f8      	ldr	r0, [r7, #12]
 80218f8:	f000 f844 	bl	8021984 <_ZN9LineTrace16SetIntegralErrorEf>

    p = p_gain * error;
 80218fc:	ed97 7a02 	vldr	s14, [r7, #8]
 8021900:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8021904:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021908:	edc7 7a06 	vstr	s15, [r7, #24]
    d = d_gain * differential_error;
 802190c:	ed97 7a00 	vldr	s14, [r7]
 8021910:	edd7 7a08 	vldr	s15, [r7, #32]
 8021914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021918:	edc7 7a05 	vstr	s15, [r7, #20]
    i = i_gain * integral_error_;
 802191c:	68fb      	ldr	r3, [r7, #12]
 802191e:	edd3 7a00 	vldr	s15, [r3]
 8021922:	ed97 7a01 	vldr	s14, [r7, #4]
 8021926:	ee67 7a27 	vmul.f32	s15, s14, s15
 802192a:	edc7 7a04 	vstr	s15, [r7, #16]

#ifdef DEBUG_MODE
    g_trace_p = p;
 802192e:	4a12      	ldr	r2, [pc, #72]	; (8021978 <_ZN9LineTrace10PidControlEfff+0x168>)
 8021930:	69bb      	ldr	r3, [r7, #24]
 8021932:	6013      	str	r3, [r2, #0]
    g_trace_d = d;
 8021934:	4a11      	ldr	r2, [pc, #68]	; (802197c <_ZN9LineTrace10PidControlEfff+0x16c>)
 8021936:	697b      	ldr	r3, [r7, #20]
 8021938:	6013      	str	r3, [r2, #0]
    g_trace_i = i;
 802193a:	4a11      	ldr	r2, [pc, #68]	; (8021980 <_ZN9LineTrace10PidControlEfff+0x170>)
 802193c:	693b      	ldr	r3, [r7, #16]
 802193e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    pre_error = error;
 8021940:	4a0c      	ldr	r2, [pc, #48]	; (8021974 <_ZN9LineTrace10PidControlEfff+0x164>)
 8021942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021944:	6013      	str	r3, [r2, #0]

    return p + d + i;
 8021946:	ed97 7a06 	vldr	s14, [r7, #24]
 802194a:	edd7 7a05 	vldr	s15, [r7, #20]
 802194e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8021952:	edd7 7a04 	vldr	s15, [r7, #16]
 8021956:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 802195a:	eeb0 0a67 	vmov.f32	s0, s15
 802195e:	372c      	adds	r7, #44	; 0x2c
 8021960:	46bd      	mov	sp, r7
 8021962:	bd90      	pop	{r4, r7, pc}
 8021964:	f3af 8000 	nop.w
 8021968:	47ae147b 	.word	0x47ae147b
 802196c:	3f547ae1 	.word	0x3f547ae1
 8021970:	2000006c 	.word	0x2000006c
 8021974:	20000068 	.word	0x20000068
 8021978:	200004d8 	.word	0x200004d8
 802197c:	200004e0 	.word	0x200004e0
 8021980:	200004dc 	.word	0x200004dc

08021984 <_ZN9LineTrace16SetIntegralErrorEf>:

void LineTrace::SetIntegralError(float integral_error)
{
 8021984:	b480      	push	{r7}
 8021986:	b083      	sub	sp, #12
 8021988:	af00      	add	r7, sp, #0
 802198a:	6078      	str	r0, [r7, #4]
 802198c:	ed87 0a00 	vstr	s0, [r7]
    integral_error_ += integral_error;
 8021990:	687b      	ldr	r3, [r7, #4]
 8021992:	ed93 7a00 	vldr	s14, [r3]
 8021996:	edd7 7a00 	vldr	s15, [r7]
 802199a:	ee77 7a27 	vadd.f32	s15, s14, s15
 802199e:	687b      	ldr	r3, [r7, #4]
 80219a0:	edc3 7a00 	vstr	s15, [r3]
}
 80219a4:	bf00      	nop
 80219a6:	370c      	adds	r7, #12
 80219a8:	46bd      	mov	sp, r7
 80219aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219ae:	4770      	bx	lr

080219b0 <_ZN6LoggerC1Ev>:
#include "logger.hpp"
#include <math.h>
#include <string.h>

Logger::Logger() : const_distance_log_(), radian_log_(), various_log_(), const_distance_copy_(), radian_copy_(), various_copy_(), accel_address_(), decel_address_(), periodic_write_enable_(0), accel_position_write_enable_(0), excess_stack_(0), target_velocity_(MIN_VELOCITY) {}
 80219b0:	b580      	push	{r7, lr}
 80219b2:	b082      	sub	sp, #8
 80219b4:	af00      	add	r7, sp, #0
 80219b6:	6078      	str	r0, [r7, #4]
 80219b8:	687a      	ldr	r2, [r7, #4]
 80219ba:	2309      	movs	r3, #9
 80219bc:	2b00      	cmp	r3, #0
 80219be:	db05      	blt.n	80219cc <_ZN6LoggerC1Ev+0x1c>
 80219c0:	f04f 0100 	mov.w	r1, #0
 80219c4:	6011      	str	r1, [r2, #0]
 80219c6:	3204      	adds	r2, #4
 80219c8:	3b01      	subs	r3, #1
 80219ca:	e7f7      	b.n	80219bc <_ZN6LoggerC1Ev+0xc>
 80219cc:	687b      	ldr	r3, [r7, #4]
 80219ce:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80219d2:	2309      	movs	r3, #9
 80219d4:	2b00      	cmp	r3, #0
 80219d6:	db05      	blt.n	80219e4 <_ZN6LoggerC1Ev+0x34>
 80219d8:	f04f 0100 	mov.w	r1, #0
 80219dc:	6011      	str	r1, [r2, #0]
 80219de:	3204      	adds	r2, #4
 80219e0:	3b01      	subs	r3, #1
 80219e2:	e7f7      	b.n	80219d4 <_ZN6LoggerC1Ev+0x24>
 80219e4:	687b      	ldr	r3, [r7, #4]
 80219e6:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80219ea:	2309      	movs	r3, #9
 80219ec:	2b00      	cmp	r3, #0
 80219ee:	db04      	blt.n	80219fa <_ZN6LoggerC1Ev+0x4a>
 80219f0:	2100      	movs	r1, #0
 80219f2:	8011      	strh	r1, [r2, #0]
 80219f4:	3202      	adds	r2, #2
 80219f6:	3b01      	subs	r3, #1
 80219f8:	e7f8      	b.n	80219ec <_ZN6LoggerC1Ev+0x3c>
 80219fa:	687b      	ldr	r3, [r7, #4]
 80219fc:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8021a00:	2309      	movs	r3, #9
 8021a02:	2b00      	cmp	r3, #0
 8021a04:	db05      	blt.n	8021a12 <_ZN6LoggerC1Ev+0x62>
 8021a06:	f04f 0100 	mov.w	r1, #0
 8021a0a:	6011      	str	r1, [r2, #0]
 8021a0c:	3204      	adds	r2, #4
 8021a0e:	3b01      	subs	r3, #1
 8021a10:	e7f7      	b.n	8021a02 <_ZN6LoggerC1Ev+0x52>
 8021a12:	687b      	ldr	r3, [r7, #4]
 8021a14:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 8021a18:	2309      	movs	r3, #9
 8021a1a:	2b00      	cmp	r3, #0
 8021a1c:	db05      	blt.n	8021a2a <_ZN6LoggerC1Ev+0x7a>
 8021a1e:	f04f 0100 	mov.w	r1, #0
 8021a22:	6011      	str	r1, [r2, #0]
 8021a24:	3204      	adds	r2, #4
 8021a26:	3b01      	subs	r3, #1
 8021a28:	e7f7      	b.n	8021a1a <_ZN6LoggerC1Ev+0x6a>
 8021a2a:	687b      	ldr	r3, [r7, #4]
 8021a2c:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8021a30:	2309      	movs	r3, #9
 8021a32:	2b00      	cmp	r3, #0
 8021a34:	db04      	blt.n	8021a40 <_ZN6LoggerC1Ev+0x90>
 8021a36:	2100      	movs	r1, #0
 8021a38:	8011      	strh	r1, [r2, #0]
 8021a3a:	3202      	adds	r2, #2
 8021a3c:	3b01      	subs	r3, #1
 8021a3e:	e7f8      	b.n	8021a32 <_ZN6LoggerC1Ev+0x82>
 8021a40:	687b      	ldr	r3, [r7, #4]
 8021a42:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 8021a46:	2304      	movs	r3, #4
 8021a48:	2b00      	cmp	r3, #0
 8021a4a:	db04      	blt.n	8021a56 <_ZN6LoggerC1Ev+0xa6>
 8021a4c:	2100      	movs	r1, #0
 8021a4e:	8011      	strh	r1, [r2, #0]
 8021a50:	3202      	adds	r2, #2
 8021a52:	3b01      	subs	r3, #1
 8021a54:	e7f8      	b.n	8021a48 <_ZN6LoggerC1Ev+0x98>
 8021a56:	687b      	ldr	r3, [r7, #4]
 8021a58:	f103 02d2 	add.w	r2, r3, #210	; 0xd2
 8021a5c:	2304      	movs	r3, #4
 8021a5e:	2b00      	cmp	r3, #0
 8021a60:	db04      	blt.n	8021a6c <_ZN6LoggerC1Ev+0xbc>
 8021a62:	2100      	movs	r1, #0
 8021a64:	8011      	strh	r1, [r2, #0]
 8021a66:	3202      	adds	r2, #2
 8021a68:	3b01      	subs	r3, #1
 8021a6a:	e7f8      	b.n	8021a5e <_ZN6LoggerC1Ev+0xae>
 8021a6c:	687b      	ldr	r3, [r7, #4]
 8021a6e:	2200      	movs	r2, #0
 8021a70:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8021a74:	687b      	ldr	r3, [r7, #4]
 8021a76:	2200      	movs	r2, #0
 8021a78:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 8021a7c:	687b      	ldr	r3, [r7, #4]
 8021a7e:	f04f 0200 	mov.w	r2, #0
 8021a82:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8021a86:	687b      	ldr	r3, [r7, #4]
 8021a88:	4a0b      	ldr	r2, [pc, #44]	; (8021ab8 <_ZN6LoggerC1Ev+0x108>)
 8021a8a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8021a8e:	687b      	ldr	r3, [r7, #4]
 8021a90:	33e8      	adds	r3, #232	; 0xe8
 8021a92:	4618      	mov	r0, r3
 8021a94:	f7ff f8fa 	bl	8020c8c <_ZN7EncoderC1Ev>
 8021a98:	687b      	ldr	r3, [r7, #4]
 8021a9a:	33f8      	adds	r3, #248	; 0xf8
 8021a9c:	4618      	mov	r0, r3
 8021a9e:	f7ff fa0f 	bl	8020ec0 <_ZN8Iim42652C1Ev>
 8021aa2:	687b      	ldr	r3, [r7, #4]
 8021aa4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8021aa8:	4618      	mov	r0, r3
 8021aaa:	f001 f827 	bl	8022afc <_ZN10SideSensorC1Ev>
 8021aae:	687b      	ldr	r3, [r7, #4]
 8021ab0:	4618      	mov	r0, r3
 8021ab2:	3708      	adds	r7, #8
 8021ab4:	46bd      	mov	sp, r7
 8021ab6:	bd80      	pop	{r7, pc}
 8021ab8:	3fa66666 	.word	0x3fa66666

08021abc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8021abc:	b580      	push	{r7, lr}
 8021abe:	b082      	sub	sp, #8
 8021ac0:	af00      	add	r7, sp, #0
 8021ac2:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 8021ac4:	687b      	ldr	r3, [r7, #4]
 8021ac6:	681b      	ldr	r3, [r3, #0]
 8021ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8021acc:	d101      	bne.n	8021ad2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    InterruptTim2();
 8021ace:	f002 fae5 	bl	802409c <InterruptTim2>
  }
  if(htim->Instance == TIM6)
 8021ad2:	687b      	ldr	r3, [r7, #4]
 8021ad4:	681b      	ldr	r3, [r3, #0]
 8021ad6:	4a08      	ldr	r2, [pc, #32]	; (8021af8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8021ad8:	4293      	cmp	r3, r2
 8021ada:	d101      	bne.n	8021ae0 <HAL_TIM_PeriodElapsedCallback+0x24>
  {
    InterruptTim6();
 8021adc:	f002 face 	bl	802407c <InterruptTim6>
  }
  if(htim->Instance == TIM7)
 8021ae0:	687b      	ldr	r3, [r7, #4]
 8021ae2:	681b      	ldr	r3, [r3, #0]
 8021ae4:	4a05      	ldr	r2, [pc, #20]	; (8021afc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8021ae6:	4293      	cmp	r3, r2
 8021ae8:	d101      	bne.n	8021aee <HAL_TIM_PeriodElapsedCallback+0x32>
  {
    InterruptTim7();
 8021aea:	f002 fab7 	bl	802405c <InterruptTim7>
  }
}
 8021aee:	bf00      	nop
 8021af0:	3708      	adds	r7, #8
 8021af2:	46bd      	mov	sp, r7
 8021af4:	bd80      	pop	{r7, pc}
 8021af6:	bf00      	nop
 8021af8:	40001000 	.word	0x40001000
 8021afc:	40001400 	.word	0x40001400

08021b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8021b00:	b580      	push	{r7, lr}
 8021b02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8021b04:	f002 fb5c 	bl	80241c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8021b08:	f000 f822 	bl	8021b50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8021b0c:	f000 fd68 	bl	80225e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8021b10:	f000 fd46 	bl	80225a0 <MX_DMA_Init>
  MX_ADC1_Init();
 8021b14:	f000 f886 	bl	8021c24 <MX_ADC1_Init>
  MX_I2C2_Init();
 8021b18:	f000 f98c 	bl	8021e34 <MX_I2C2_Init>
  MX_SPI3_Init();
 8021b1c:	f000 f9b8 	bl	8021e90 <MX_SPI3_Init>
  MX_TIM1_Init();
 8021b20:	f000 f9ec 	bl	8021efc <MX_TIM1_Init>
  MX_TIM3_Init();
 8021b24:	f000 fac8 	bl	80220b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8021b28:	f000 fb40 	bl	80221ac <MX_TIM4_Init>
  MX_TIM6_Init();
 8021b2c:	f000 fbe0 	bl	80222f0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8021b30:	f000 fc14 	bl	802235c <MX_TIM7_Init>
  MX_TIM8_Init();
 8021b34:	f000 fc48 	bl	80223c8 <MX_TIM8_Init>
  MX_TIM11_Init();
 8021b38:	f000 fc9e 	bl	8022478 <MX_TIM11_Init>
  MX_TIM12_Init();
 8021b3c:	f000 fcea 	bl	8022514 <MX_TIM12_Init>
  MX_TIM2_Init();
 8021b40:	f000 fa6c 	bl	802201c <MX_TIM2_Init>
  MX_TIM5_Init();
 8021b44:	f000 fb86 	bl	8022254 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  Init();
 8021b48:	f002 fa7e 	bl	8024048 <Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8021b4c:	e7fe      	b.n	8021b4c <main+0x4c>
	...

08021b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8021b50:	b580      	push	{r7, lr}
 8021b52:	b094      	sub	sp, #80	; 0x50
 8021b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8021b56:	f107 0320 	add.w	r3, r7, #32
 8021b5a:	2230      	movs	r2, #48	; 0x30
 8021b5c:	2100      	movs	r1, #0
 8021b5e:	4618      	mov	r0, r3
 8021b60:	f005 fc1c 	bl	802739c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8021b64:	f107 030c 	add.w	r3, r7, #12
 8021b68:	2200      	movs	r2, #0
 8021b6a:	601a      	str	r2, [r3, #0]
 8021b6c:	605a      	str	r2, [r3, #4]
 8021b6e:	609a      	str	r2, [r3, #8]
 8021b70:	60da      	str	r2, [r3, #12]
 8021b72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8021b74:	2300      	movs	r3, #0
 8021b76:	60bb      	str	r3, [r7, #8]
 8021b78:	4b28      	ldr	r3, [pc, #160]	; (8021c1c <SystemClock_Config+0xcc>)
 8021b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021b7c:	4a27      	ldr	r2, [pc, #156]	; (8021c1c <SystemClock_Config+0xcc>)
 8021b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021b82:	6413      	str	r3, [r2, #64]	; 0x40
 8021b84:	4b25      	ldr	r3, [pc, #148]	; (8021c1c <SystemClock_Config+0xcc>)
 8021b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021b8c:	60bb      	str	r3, [r7, #8]
 8021b8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8021b90:	2300      	movs	r3, #0
 8021b92:	607b      	str	r3, [r7, #4]
 8021b94:	4b22      	ldr	r3, [pc, #136]	; (8021c20 <SystemClock_Config+0xd0>)
 8021b96:	681b      	ldr	r3, [r3, #0]
 8021b98:	4a21      	ldr	r2, [pc, #132]	; (8021c20 <SystemClock_Config+0xd0>)
 8021b9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8021b9e:	6013      	str	r3, [r2, #0]
 8021ba0:	4b1f      	ldr	r3, [pc, #124]	; (8021c20 <SystemClock_Config+0xd0>)
 8021ba2:	681b      	ldr	r3, [r3, #0]
 8021ba4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8021ba8:	607b      	str	r3, [r7, #4]
 8021baa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8021bac:	2301      	movs	r3, #1
 8021bae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8021bb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021bb4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8021bb6:	2302      	movs	r3, #2
 8021bb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8021bba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8021bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8021bc0:	2306      	movs	r3, #6
 8021bc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8021bc4:	23a8      	movs	r3, #168	; 0xa8
 8021bc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8021bc8:	2302      	movs	r3, #2
 8021bca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8021bcc:	2304      	movs	r3, #4
 8021bce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8021bd0:	f107 0320 	add.w	r3, r7, #32
 8021bd4:	4618      	mov	r0, r3
 8021bd6:	f003 feff 	bl	80259d8 <HAL_RCC_OscConfig>
 8021bda:	4603      	mov	r3, r0
 8021bdc:	2b00      	cmp	r3, #0
 8021bde:	d001      	beq.n	8021be4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8021be0:	f000 fdce 	bl	8022780 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8021be4:	230f      	movs	r3, #15
 8021be6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8021be8:	2302      	movs	r3, #2
 8021bea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8021bec:	2300      	movs	r3, #0
 8021bee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8021bf0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8021bf4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8021bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021bfa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8021bfc:	f107 030c 	add.w	r3, r7, #12
 8021c00:	2105      	movs	r1, #5
 8021c02:	4618      	mov	r0, r3
 8021c04:	f004 f958 	bl	8025eb8 <HAL_RCC_ClockConfig>
 8021c08:	4603      	mov	r3, r0
 8021c0a:	2b00      	cmp	r3, #0
 8021c0c:	d001      	beq.n	8021c12 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8021c0e:	f000 fdb7 	bl	8022780 <Error_Handler>
  }
}
 8021c12:	bf00      	nop
 8021c14:	3750      	adds	r7, #80	; 0x50
 8021c16:	46bd      	mov	sp, r7
 8021c18:	bd80      	pop	{r7, pc}
 8021c1a:	bf00      	nop
 8021c1c:	40023800 	.word	0x40023800
 8021c20:	40007000 	.word	0x40007000

08021c24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8021c24:	b580      	push	{r7, lr}
 8021c26:	b084      	sub	sp, #16
 8021c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8021c2a:	463b      	mov	r3, r7
 8021c2c:	2200      	movs	r2, #0
 8021c2e:	601a      	str	r2, [r3, #0]
 8021c30:	605a      	str	r2, [r3, #4]
 8021c32:	609a      	str	r2, [r3, #8]
 8021c34:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8021c36:	4b7c      	ldr	r3, [pc, #496]	; (8021e28 <MX_ADC1_Init+0x204>)
 8021c38:	4a7c      	ldr	r2, [pc, #496]	; (8021e2c <MX_ADC1_Init+0x208>)
 8021c3a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8021c3c:	4b7a      	ldr	r3, [pc, #488]	; (8021e28 <MX_ADC1_Init+0x204>)
 8021c3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8021c42:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8021c44:	4b78      	ldr	r3, [pc, #480]	; (8021e28 <MX_ADC1_Init+0x204>)
 8021c46:	2200      	movs	r2, #0
 8021c48:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8021c4a:	4b77      	ldr	r3, [pc, #476]	; (8021e28 <MX_ADC1_Init+0x204>)
 8021c4c:	2201      	movs	r2, #1
 8021c4e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8021c50:	4b75      	ldr	r3, [pc, #468]	; (8021e28 <MX_ADC1_Init+0x204>)
 8021c52:	2201      	movs	r2, #1
 8021c54:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8021c56:	4b74      	ldr	r3, [pc, #464]	; (8021e28 <MX_ADC1_Init+0x204>)
 8021c58:	2200      	movs	r2, #0
 8021c5a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8021c5e:	4b72      	ldr	r3, [pc, #456]	; (8021e28 <MX_ADC1_Init+0x204>)
 8021c60:	2200      	movs	r2, #0
 8021c62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8021c64:	4b70      	ldr	r3, [pc, #448]	; (8021e28 <MX_ADC1_Init+0x204>)
 8021c66:	4a72      	ldr	r2, [pc, #456]	; (8021e30 <MX_ADC1_Init+0x20c>)
 8021c68:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8021c6a:	4b6f      	ldr	r3, [pc, #444]	; (8021e28 <MX_ADC1_Init+0x204>)
 8021c6c:	2200      	movs	r2, #0
 8021c6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8021c70:	4b6d      	ldr	r3, [pc, #436]	; (8021e28 <MX_ADC1_Init+0x204>)
 8021c72:	220e      	movs	r2, #14
 8021c74:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8021c76:	4b6c      	ldr	r3, [pc, #432]	; (8021e28 <MX_ADC1_Init+0x204>)
 8021c78:	2201      	movs	r2, #1
 8021c7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8021c7e:	4b6a      	ldr	r3, [pc, #424]	; (8021e28 <MX_ADC1_Init+0x204>)
 8021c80:	2201      	movs	r2, #1
 8021c82:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8021c84:	4868      	ldr	r0, [pc, #416]	; (8021e28 <MX_ADC1_Init+0x204>)
 8021c86:	f002 fb2f 	bl	80242e8 <HAL_ADC_Init>
 8021c8a:	4603      	mov	r3, r0
 8021c8c:	2b00      	cmp	r3, #0
 8021c8e:	d001      	beq.n	8021c94 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8021c90:	f000 fd76 	bl	8022780 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8021c94:	2303      	movs	r3, #3
 8021c96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8021c98:	2301      	movs	r3, #1
 8021c9a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8021c9c:	2301      	movs	r3, #1
 8021c9e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021ca0:	463b      	mov	r3, r7
 8021ca2:	4619      	mov	r1, r3
 8021ca4:	4860      	ldr	r0, [pc, #384]	; (8021e28 <MX_ADC1_Init+0x204>)
 8021ca6:	f002 fc73 	bl	8024590 <HAL_ADC_ConfigChannel>
 8021caa:	4603      	mov	r3, r0
 8021cac:	2b00      	cmp	r3, #0
 8021cae:	d001      	beq.n	8021cb4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8021cb0:	f000 fd66 	bl	8022780 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8021cb4:	2304      	movs	r3, #4
 8021cb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8021cb8:	2302      	movs	r3, #2
 8021cba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021cbc:	463b      	mov	r3, r7
 8021cbe:	4619      	mov	r1, r3
 8021cc0:	4859      	ldr	r0, [pc, #356]	; (8021e28 <MX_ADC1_Init+0x204>)
 8021cc2:	f002 fc65 	bl	8024590 <HAL_ADC_ConfigChannel>
 8021cc6:	4603      	mov	r3, r0
 8021cc8:	2b00      	cmp	r3, #0
 8021cca:	d001      	beq.n	8021cd0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8021ccc:	f000 fd58 	bl	8022780 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8021cd0:	2305      	movs	r3, #5
 8021cd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8021cd4:	2303      	movs	r3, #3
 8021cd6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021cd8:	463b      	mov	r3, r7
 8021cda:	4619      	mov	r1, r3
 8021cdc:	4852      	ldr	r0, [pc, #328]	; (8021e28 <MX_ADC1_Init+0x204>)
 8021cde:	f002 fc57 	bl	8024590 <HAL_ADC_ConfigChannel>
 8021ce2:	4603      	mov	r3, r0
 8021ce4:	2b00      	cmp	r3, #0
 8021ce6:	d001      	beq.n	8021cec <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8021ce8:	f000 fd4a 	bl	8022780 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8021cec:	2306      	movs	r3, #6
 8021cee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8021cf0:	2304      	movs	r3, #4
 8021cf2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021cf4:	463b      	mov	r3, r7
 8021cf6:	4619      	mov	r1, r3
 8021cf8:	484b      	ldr	r0, [pc, #300]	; (8021e28 <MX_ADC1_Init+0x204>)
 8021cfa:	f002 fc49 	bl	8024590 <HAL_ADC_ConfigChannel>
 8021cfe:	4603      	mov	r3, r0
 8021d00:	2b00      	cmp	r3, #0
 8021d02:	d001      	beq.n	8021d08 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8021d04:	f000 fd3c 	bl	8022780 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8021d08:	2307      	movs	r3, #7
 8021d0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8021d0c:	2305      	movs	r3, #5
 8021d0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021d10:	463b      	mov	r3, r7
 8021d12:	4619      	mov	r1, r3
 8021d14:	4844      	ldr	r0, [pc, #272]	; (8021e28 <MX_ADC1_Init+0x204>)
 8021d16:	f002 fc3b 	bl	8024590 <HAL_ADC_ConfigChannel>
 8021d1a:	4603      	mov	r3, r0
 8021d1c:	2b00      	cmp	r3, #0
 8021d1e:	d001      	beq.n	8021d24 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8021d20:	f000 fd2e 	bl	8022780 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8021d24:	230e      	movs	r3, #14
 8021d26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8021d28:	2306      	movs	r3, #6
 8021d2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021d2c:	463b      	mov	r3, r7
 8021d2e:	4619      	mov	r1, r3
 8021d30:	483d      	ldr	r0, [pc, #244]	; (8021e28 <MX_ADC1_Init+0x204>)
 8021d32:	f002 fc2d 	bl	8024590 <HAL_ADC_ConfigChannel>
 8021d36:	4603      	mov	r3, r0
 8021d38:	2b00      	cmp	r3, #0
 8021d3a:	d001      	beq.n	8021d40 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8021d3c:	f000 fd20 	bl	8022780 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8021d40:	230f      	movs	r3, #15
 8021d42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8021d44:	2307      	movs	r3, #7
 8021d46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021d48:	463b      	mov	r3, r7
 8021d4a:	4619      	mov	r1, r3
 8021d4c:	4836      	ldr	r0, [pc, #216]	; (8021e28 <MX_ADC1_Init+0x204>)
 8021d4e:	f002 fc1f 	bl	8024590 <HAL_ADC_ConfigChannel>
 8021d52:	4603      	mov	r3, r0
 8021d54:	2b00      	cmp	r3, #0
 8021d56:	d001      	beq.n	8021d5c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8021d58:	f000 fd12 	bl	8022780 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8021d5c:	230a      	movs	r3, #10
 8021d5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8021d60:	2308      	movs	r3, #8
 8021d62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021d64:	463b      	mov	r3, r7
 8021d66:	4619      	mov	r1, r3
 8021d68:	482f      	ldr	r0, [pc, #188]	; (8021e28 <MX_ADC1_Init+0x204>)
 8021d6a:	f002 fc11 	bl	8024590 <HAL_ADC_ConfigChannel>
 8021d6e:	4603      	mov	r3, r0
 8021d70:	2b00      	cmp	r3, #0
 8021d72:	d001      	beq.n	8021d78 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8021d74:	f000 fd04 	bl	8022780 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8021d78:	230b      	movs	r3, #11
 8021d7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8021d7c:	2309      	movs	r3, #9
 8021d7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021d80:	463b      	mov	r3, r7
 8021d82:	4619      	mov	r1, r3
 8021d84:	4828      	ldr	r0, [pc, #160]	; (8021e28 <MX_ADC1_Init+0x204>)
 8021d86:	f002 fc03 	bl	8024590 <HAL_ADC_ConfigChannel>
 8021d8a:	4603      	mov	r3, r0
 8021d8c:	2b00      	cmp	r3, #0
 8021d8e:	d001      	beq.n	8021d94 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8021d90:	f000 fcf6 	bl	8022780 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8021d94:	230c      	movs	r3, #12
 8021d96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8021d98:	230a      	movs	r3, #10
 8021d9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021d9c:	463b      	mov	r3, r7
 8021d9e:	4619      	mov	r1, r3
 8021da0:	4821      	ldr	r0, [pc, #132]	; (8021e28 <MX_ADC1_Init+0x204>)
 8021da2:	f002 fbf5 	bl	8024590 <HAL_ADC_ConfigChannel>
 8021da6:	4603      	mov	r3, r0
 8021da8:	2b00      	cmp	r3, #0
 8021daa:	d001      	beq.n	8021db0 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8021dac:	f000 fce8 	bl	8022780 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8021db0:	230d      	movs	r3, #13
 8021db2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8021db4:	230b      	movs	r3, #11
 8021db6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021db8:	463b      	mov	r3, r7
 8021dba:	4619      	mov	r1, r3
 8021dbc:	481a      	ldr	r0, [pc, #104]	; (8021e28 <MX_ADC1_Init+0x204>)
 8021dbe:	f002 fbe7 	bl	8024590 <HAL_ADC_ConfigChannel>
 8021dc2:	4603      	mov	r3, r0
 8021dc4:	2b00      	cmp	r3, #0
 8021dc6:	d001      	beq.n	8021dcc <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8021dc8:	f000 fcda 	bl	8022780 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8021dcc:	2302      	movs	r3, #2
 8021dce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8021dd0:	230c      	movs	r3, #12
 8021dd2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021dd4:	463b      	mov	r3, r7
 8021dd6:	4619      	mov	r1, r3
 8021dd8:	4813      	ldr	r0, [pc, #76]	; (8021e28 <MX_ADC1_Init+0x204>)
 8021dda:	f002 fbd9 	bl	8024590 <HAL_ADC_ConfigChannel>
 8021dde:	4603      	mov	r3, r0
 8021de0:	2b00      	cmp	r3, #0
 8021de2:	d001      	beq.n	8021de8 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8021de4:	f000 fccc 	bl	8022780 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8021de8:	2301      	movs	r3, #1
 8021dea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8021dec:	230d      	movs	r3, #13
 8021dee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021df0:	463b      	mov	r3, r7
 8021df2:	4619      	mov	r1, r3
 8021df4:	480c      	ldr	r0, [pc, #48]	; (8021e28 <MX_ADC1_Init+0x204>)
 8021df6:	f002 fbcb 	bl	8024590 <HAL_ADC_ConfigChannel>
 8021dfa:	4603      	mov	r3, r0
 8021dfc:	2b00      	cmp	r3, #0
 8021dfe:	d001      	beq.n	8021e04 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8021e00:	f000 fcbe 	bl	8022780 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8021e04:	2300      	movs	r3, #0
 8021e06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8021e08:	230e      	movs	r3, #14
 8021e0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021e0c:	463b      	mov	r3, r7
 8021e0e:	4619      	mov	r1, r3
 8021e10:	4805      	ldr	r0, [pc, #20]	; (8021e28 <MX_ADC1_Init+0x204>)
 8021e12:	f002 fbbd 	bl	8024590 <HAL_ADC_ConfigChannel>
 8021e16:	4603      	mov	r3, r0
 8021e18:	2b00      	cmp	r3, #0
 8021e1a:	d001      	beq.n	8021e20 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 8021e1c:	f000 fcb0 	bl	8022780 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8021e20:	bf00      	nop
 8021e22:	3710      	adds	r7, #16
 8021e24:	46bd      	mov	sp, r7
 8021e26:	bd80      	pop	{r7, pc}
 8021e28:	200009c4 	.word	0x200009c4
 8021e2c:	40012000 	.word	0x40012000
 8021e30:	0f000001 	.word	0x0f000001

08021e34 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8021e34:	b580      	push	{r7, lr}
 8021e36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8021e38:	4b12      	ldr	r3, [pc, #72]	; (8021e84 <MX_I2C2_Init+0x50>)
 8021e3a:	4a13      	ldr	r2, [pc, #76]	; (8021e88 <MX_I2C2_Init+0x54>)
 8021e3c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8021e3e:	4b11      	ldr	r3, [pc, #68]	; (8021e84 <MX_I2C2_Init+0x50>)
 8021e40:	4a12      	ldr	r2, [pc, #72]	; (8021e8c <MX_I2C2_Init+0x58>)
 8021e42:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8021e44:	4b0f      	ldr	r3, [pc, #60]	; (8021e84 <MX_I2C2_Init+0x50>)
 8021e46:	2200      	movs	r2, #0
 8021e48:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8021e4a:	4b0e      	ldr	r3, [pc, #56]	; (8021e84 <MX_I2C2_Init+0x50>)
 8021e4c:	2200      	movs	r2, #0
 8021e4e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8021e50:	4b0c      	ldr	r3, [pc, #48]	; (8021e84 <MX_I2C2_Init+0x50>)
 8021e52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8021e56:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8021e58:	4b0a      	ldr	r3, [pc, #40]	; (8021e84 <MX_I2C2_Init+0x50>)
 8021e5a:	2200      	movs	r2, #0
 8021e5c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8021e5e:	4b09      	ldr	r3, [pc, #36]	; (8021e84 <MX_I2C2_Init+0x50>)
 8021e60:	2200      	movs	r2, #0
 8021e62:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8021e64:	4b07      	ldr	r3, [pc, #28]	; (8021e84 <MX_I2C2_Init+0x50>)
 8021e66:	2200      	movs	r2, #0
 8021e68:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8021e6a:	4b06      	ldr	r3, [pc, #24]	; (8021e84 <MX_I2C2_Init+0x50>)
 8021e6c:	2200      	movs	r2, #0
 8021e6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8021e70:	4804      	ldr	r0, [pc, #16]	; (8021e84 <MX_I2C2_Init+0x50>)
 8021e72:	f003 fc79 	bl	8025768 <HAL_I2C_Init>
 8021e76:	4603      	mov	r3, r0
 8021e78:	2b00      	cmp	r3, #0
 8021e7a:	d001      	beq.n	8021e80 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8021e7c:	f000 fc80 	bl	8022780 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8021e80:	bf00      	nop
 8021e82:	bd80      	pop	{r7, pc}
 8021e84:	20000898 	.word	0x20000898
 8021e88:	40005800 	.word	0x40005800
 8021e8c:	000186a0 	.word	0x000186a0

08021e90 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8021e90:	b580      	push	{r7, lr}
 8021e92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8021e94:	4b17      	ldr	r3, [pc, #92]	; (8021ef4 <MX_SPI3_Init+0x64>)
 8021e96:	4a18      	ldr	r2, [pc, #96]	; (8021ef8 <MX_SPI3_Init+0x68>)
 8021e98:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8021e9a:	4b16      	ldr	r3, [pc, #88]	; (8021ef4 <MX_SPI3_Init+0x64>)
 8021e9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8021ea0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8021ea2:	4b14      	ldr	r3, [pc, #80]	; (8021ef4 <MX_SPI3_Init+0x64>)
 8021ea4:	2200      	movs	r2, #0
 8021ea6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8021ea8:	4b12      	ldr	r3, [pc, #72]	; (8021ef4 <MX_SPI3_Init+0x64>)
 8021eaa:	2200      	movs	r2, #0
 8021eac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8021eae:	4b11      	ldr	r3, [pc, #68]	; (8021ef4 <MX_SPI3_Init+0x64>)
 8021eb0:	2200      	movs	r2, #0
 8021eb2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8021eb4:	4b0f      	ldr	r3, [pc, #60]	; (8021ef4 <MX_SPI3_Init+0x64>)
 8021eb6:	2200      	movs	r2, #0
 8021eb8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8021eba:	4b0e      	ldr	r3, [pc, #56]	; (8021ef4 <MX_SPI3_Init+0x64>)
 8021ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8021ec0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8021ec2:	4b0c      	ldr	r3, [pc, #48]	; (8021ef4 <MX_SPI3_Init+0x64>)
 8021ec4:	2238      	movs	r2, #56	; 0x38
 8021ec6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8021ec8:	4b0a      	ldr	r3, [pc, #40]	; (8021ef4 <MX_SPI3_Init+0x64>)
 8021eca:	2200      	movs	r2, #0
 8021ecc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8021ece:	4b09      	ldr	r3, [pc, #36]	; (8021ef4 <MX_SPI3_Init+0x64>)
 8021ed0:	2200      	movs	r2, #0
 8021ed2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8021ed4:	4b07      	ldr	r3, [pc, #28]	; (8021ef4 <MX_SPI3_Init+0x64>)
 8021ed6:	2200      	movs	r2, #0
 8021ed8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8021eda:	4b06      	ldr	r3, [pc, #24]	; (8021ef4 <MX_SPI3_Init+0x64>)
 8021edc:	220a      	movs	r2, #10
 8021ede:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8021ee0:	4804      	ldr	r0, [pc, #16]	; (8021ef4 <MX_SPI3_Init+0x64>)
 8021ee2:	f004 f9a1 	bl	8026228 <HAL_SPI_Init>
 8021ee6:	4603      	mov	r3, r0
 8021ee8:	2b00      	cmp	r3, #0
 8021eea:	d001      	beq.n	8021ef0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8021eec:	f000 fc48 	bl	8022780 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8021ef0:	bf00      	nop
 8021ef2:	bd80      	pop	{r7, pc}
 8021ef4:	2000096c 	.word	0x2000096c
 8021ef8:	40003c00 	.word	0x40003c00

08021efc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8021efc:	b580      	push	{r7, lr}
 8021efe:	b092      	sub	sp, #72	; 0x48
 8021f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021f02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8021f06:	2200      	movs	r2, #0
 8021f08:	601a      	str	r2, [r3, #0]
 8021f0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8021f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021f10:	2200      	movs	r2, #0
 8021f12:	601a      	str	r2, [r3, #0]
 8021f14:	605a      	str	r2, [r3, #4]
 8021f16:	609a      	str	r2, [r3, #8]
 8021f18:	60da      	str	r2, [r3, #12]
 8021f1a:	611a      	str	r2, [r3, #16]
 8021f1c:	615a      	str	r2, [r3, #20]
 8021f1e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8021f20:	1d3b      	adds	r3, r7, #4
 8021f22:	2220      	movs	r2, #32
 8021f24:	2100      	movs	r1, #0
 8021f26:	4618      	mov	r0, r3
 8021f28:	f005 fa38 	bl	802739c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8021f2c:	4b39      	ldr	r3, [pc, #228]	; (8022014 <MX_TIM1_Init+0x118>)
 8021f2e:	4a3a      	ldr	r2, [pc, #232]	; (8022018 <MX_TIM1_Init+0x11c>)
 8021f30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8021f32:	4b38      	ldr	r3, [pc, #224]	; (8022014 <MX_TIM1_Init+0x118>)
 8021f34:	2201      	movs	r2, #1
 8021f36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021f38:	4b36      	ldr	r3, [pc, #216]	; (8022014 <MX_TIM1_Init+0x118>)
 8021f3a:	2200      	movs	r2, #0
 8021f3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1049;
 8021f3e:	4b35      	ldr	r3, [pc, #212]	; (8022014 <MX_TIM1_Init+0x118>)
 8021f40:	f240 4219 	movw	r2, #1049	; 0x419
 8021f44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021f46:	4b33      	ldr	r3, [pc, #204]	; (8022014 <MX_TIM1_Init+0x118>)
 8021f48:	2200      	movs	r2, #0
 8021f4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8021f4c:	4b31      	ldr	r3, [pc, #196]	; (8022014 <MX_TIM1_Init+0x118>)
 8021f4e:	2200      	movs	r2, #0
 8021f50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021f52:	4b30      	ldr	r3, [pc, #192]	; (8022014 <MX_TIM1_Init+0x118>)
 8021f54:	2200      	movs	r2, #0
 8021f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8021f58:	482e      	ldr	r0, [pc, #184]	; (8022014 <MX_TIM1_Init+0x118>)
 8021f5a:	f004 fa18 	bl	802638e <HAL_TIM_PWM_Init>
 8021f5e:	4603      	mov	r3, r0
 8021f60:	2b00      	cmp	r3, #0
 8021f62:	d001      	beq.n	8021f68 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8021f64:	f000 fc0c 	bl	8022780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021f68:	2300      	movs	r3, #0
 8021f6a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021f6c:	2300      	movs	r3, #0
 8021f6e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8021f70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8021f74:	4619      	mov	r1, r3
 8021f76:	4827      	ldr	r0, [pc, #156]	; (8022014 <MX_TIM1_Init+0x118>)
 8021f78:	f005 f8fa 	bl	8027170 <HAL_TIMEx_MasterConfigSynchronization>
 8021f7c:	4603      	mov	r3, r0
 8021f7e:	2b00      	cmp	r3, #0
 8021f80:	d001      	beq.n	8021f86 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8021f82:	f000 fbfd 	bl	8022780 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8021f86:	2360      	movs	r3, #96	; 0x60
 8021f88:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8021f8a:	2300      	movs	r3, #0
 8021f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8021f8e:	2300      	movs	r3, #0
 8021f90:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8021f92:	2300      	movs	r3, #0
 8021f94:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8021f96:	2300      	movs	r3, #0
 8021f98:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8021f9a:	2300      	movs	r3, #0
 8021f9c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8021f9e:	2300      	movs	r3, #0
 8021fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8021fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021fa6:	2204      	movs	r2, #4
 8021fa8:	4619      	mov	r1, r3
 8021faa:	481a      	ldr	r0, [pc, #104]	; (8022014 <MX_TIM1_Init+0x118>)
 8021fac:	f004 fc2a 	bl	8026804 <HAL_TIM_PWM_ConfigChannel>
 8021fb0:	4603      	mov	r3, r0
 8021fb2:	2b00      	cmp	r3, #0
 8021fb4:	d001      	beq.n	8021fba <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8021fb6:	f000 fbe3 	bl	8022780 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8021fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021fbe:	220c      	movs	r2, #12
 8021fc0:	4619      	mov	r1, r3
 8021fc2:	4814      	ldr	r0, [pc, #80]	; (8022014 <MX_TIM1_Init+0x118>)
 8021fc4:	f004 fc1e 	bl	8026804 <HAL_TIM_PWM_ConfigChannel>
 8021fc8:	4603      	mov	r3, r0
 8021fca:	2b00      	cmp	r3, #0
 8021fcc:	d001      	beq.n	8021fd2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8021fce:	f000 fbd7 	bl	8022780 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8021fd2:	2300      	movs	r3, #0
 8021fd4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8021fd6:	2300      	movs	r3, #0
 8021fd8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8021fda:	2300      	movs	r3, #0
 8021fdc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8021fde:	2300      	movs	r3, #0
 8021fe0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8021fe2:	2300      	movs	r3, #0
 8021fe4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8021fe6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8021fea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8021fec:	2300      	movs	r3, #0
 8021fee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8021ff0:	1d3b      	adds	r3, r7, #4
 8021ff2:	4619      	mov	r1, r3
 8021ff4:	4807      	ldr	r0, [pc, #28]	; (8022014 <MX_TIM1_Init+0x118>)
 8021ff6:	f005 f937 	bl	8027268 <HAL_TIMEx_ConfigBreakDeadTime>
 8021ffa:	4603      	mov	r3, r0
 8021ffc:	2b00      	cmp	r3, #0
 8021ffe:	d001      	beq.n	8022004 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8022000:	f000 fbbe 	bl	8022780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8022004:	4803      	ldr	r0, [pc, #12]	; (8022014 <MX_TIM1_Init+0x118>)
 8022006:	f001 fb55 	bl	80236b4 <HAL_TIM_MspPostInit>

}
 802200a:	bf00      	nop
 802200c:	3748      	adds	r7, #72	; 0x48
 802200e:	46bd      	mov	sp, r7
 8022010:	bd80      	pop	{r7, pc}
 8022012:	bf00      	nop
 8022014:	20000aec 	.word	0x20000aec
 8022018:	40010000 	.word	0x40010000

0802201c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 802201c:	b580      	push	{r7, lr}
 802201e:	b086      	sub	sp, #24
 8022020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8022022:	f107 0308 	add.w	r3, r7, #8
 8022026:	2200      	movs	r2, #0
 8022028:	601a      	str	r2, [r3, #0]
 802202a:	605a      	str	r2, [r3, #4]
 802202c:	609a      	str	r2, [r3, #8]
 802202e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8022030:	463b      	mov	r3, r7
 8022032:	2200      	movs	r2, #0
 8022034:	601a      	str	r2, [r3, #0]
 8022036:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8022038:	4b1d      	ldr	r3, [pc, #116]	; (80220b0 <MX_TIM2_Init+0x94>)
 802203a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 802203e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8022040:	4b1b      	ldr	r3, [pc, #108]	; (80220b0 <MX_TIM2_Init+0x94>)
 8022042:	2204      	movs	r2, #4
 8022044:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8022046:	4b1a      	ldr	r3, [pc, #104]	; (80220b0 <MX_TIM2_Init+0x94>)
 8022048:	2200      	movs	r2, #0
 802204a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 104999;
 802204c:	4b18      	ldr	r3, [pc, #96]	; (80220b0 <MX_TIM2_Init+0x94>)
 802204e:	4a19      	ldr	r2, [pc, #100]	; (80220b4 <MX_TIM2_Init+0x98>)
 8022050:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8022052:	4b17      	ldr	r3, [pc, #92]	; (80220b0 <MX_TIM2_Init+0x94>)
 8022054:	2200      	movs	r2, #0
 8022056:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8022058:	4b15      	ldr	r3, [pc, #84]	; (80220b0 <MX_TIM2_Init+0x94>)
 802205a:	2200      	movs	r2, #0
 802205c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 802205e:	4814      	ldr	r0, [pc, #80]	; (80220b0 <MX_TIM2_Init+0x94>)
 8022060:	f004 f946 	bl	80262f0 <HAL_TIM_Base_Init>
 8022064:	4603      	mov	r3, r0
 8022066:	2b00      	cmp	r3, #0
 8022068:	d001      	beq.n	802206e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 802206a:	f000 fb89 	bl	8022780 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802206e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8022072:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8022074:	f107 0308 	add.w	r3, r7, #8
 8022078:	4619      	mov	r1, r3
 802207a:	480d      	ldr	r0, [pc, #52]	; (80220b0 <MX_TIM2_Init+0x94>)
 802207c:	f004 fc88 	bl	8026990 <HAL_TIM_ConfigClockSource>
 8022080:	4603      	mov	r3, r0
 8022082:	2b00      	cmp	r3, #0
 8022084:	d001      	beq.n	802208a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8022086:	f000 fb7b 	bl	8022780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802208a:	2300      	movs	r3, #0
 802208c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802208e:	2300      	movs	r3, #0
 8022090:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8022092:	463b      	mov	r3, r7
 8022094:	4619      	mov	r1, r3
 8022096:	4806      	ldr	r0, [pc, #24]	; (80220b0 <MX_TIM2_Init+0x94>)
 8022098:	f005 f86a 	bl	8027170 <HAL_TIMEx_MasterConfigSynchronization>
 802209c:	4603      	mov	r3, r0
 802209e:	2b00      	cmp	r3, #0
 80220a0:	d001      	beq.n	80220a6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80220a2:	f000 fb6d 	bl	8022780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80220a6:	bf00      	nop
 80220a8:	3718      	adds	r7, #24
 80220aa:	46bd      	mov	sp, r7
 80220ac:	bd80      	pop	{r7, pc}
 80220ae:	bf00      	nop
 80220b0:	20000b2c 	.word	0x20000b2c
 80220b4:	00019a27 	.word	0x00019a27

080220b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80220b8:	b580      	push	{r7, lr}
 80220ba:	b08a      	sub	sp, #40	; 0x28
 80220bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80220be:	f107 0320 	add.w	r3, r7, #32
 80220c2:	2200      	movs	r2, #0
 80220c4:	601a      	str	r2, [r3, #0]
 80220c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80220c8:	1d3b      	adds	r3, r7, #4
 80220ca:	2200      	movs	r2, #0
 80220cc:	601a      	str	r2, [r3, #0]
 80220ce:	605a      	str	r2, [r3, #4]
 80220d0:	609a      	str	r2, [r3, #8]
 80220d2:	60da      	str	r2, [r3, #12]
 80220d4:	611a      	str	r2, [r3, #16]
 80220d6:	615a      	str	r2, [r3, #20]
 80220d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80220da:	4b32      	ldr	r3, [pc, #200]	; (80221a4 <MX_TIM3_Init+0xec>)
 80220dc:	4a32      	ldr	r2, [pc, #200]	; (80221a8 <MX_TIM3_Init+0xf0>)
 80220de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80220e0:	4b30      	ldr	r3, [pc, #192]	; (80221a4 <MX_TIM3_Init+0xec>)
 80220e2:	2200      	movs	r2, #0
 80220e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80220e6:	4b2f      	ldr	r3, [pc, #188]	; (80221a4 <MX_TIM3_Init+0xec>)
 80220e8:	2200      	movs	r2, #0
 80220ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80220ec:	4b2d      	ldr	r3, [pc, #180]	; (80221a4 <MX_TIM3_Init+0xec>)
 80220ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80220f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80220f4:	4b2b      	ldr	r3, [pc, #172]	; (80221a4 <MX_TIM3_Init+0xec>)
 80220f6:	2200      	movs	r2, #0
 80220f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80220fa:	4b2a      	ldr	r3, [pc, #168]	; (80221a4 <MX_TIM3_Init+0xec>)
 80220fc:	2200      	movs	r2, #0
 80220fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8022100:	4828      	ldr	r0, [pc, #160]	; (80221a4 <MX_TIM3_Init+0xec>)
 8022102:	f004 f944 	bl	802638e <HAL_TIM_PWM_Init>
 8022106:	4603      	mov	r3, r0
 8022108:	2b00      	cmp	r3, #0
 802210a:	d001      	beq.n	8022110 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 802210c:	f000 fb38 	bl	8022780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8022110:	2300      	movs	r3, #0
 8022112:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8022114:	2300      	movs	r3, #0
 8022116:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8022118:	f107 0320 	add.w	r3, r7, #32
 802211c:	4619      	mov	r1, r3
 802211e:	4821      	ldr	r0, [pc, #132]	; (80221a4 <MX_TIM3_Init+0xec>)
 8022120:	f005 f826 	bl	8027170 <HAL_TIMEx_MasterConfigSynchronization>
 8022124:	4603      	mov	r3, r0
 8022126:	2b00      	cmp	r3, #0
 8022128:	d001      	beq.n	802212e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 802212a:	f000 fb29 	bl	8022780 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 802212e:	2360      	movs	r3, #96	; 0x60
 8022130:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8022132:	2300      	movs	r3, #0
 8022134:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8022136:	2300      	movs	r3, #0
 8022138:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 802213a:	2300      	movs	r3, #0
 802213c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 802213e:	1d3b      	adds	r3, r7, #4
 8022140:	2200      	movs	r2, #0
 8022142:	4619      	mov	r1, r3
 8022144:	4817      	ldr	r0, [pc, #92]	; (80221a4 <MX_TIM3_Init+0xec>)
 8022146:	f004 fb5d 	bl	8026804 <HAL_TIM_PWM_ConfigChannel>
 802214a:	4603      	mov	r3, r0
 802214c:	2b00      	cmp	r3, #0
 802214e:	d001      	beq.n	8022154 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8022150:	f000 fb16 	bl	8022780 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8022154:	1d3b      	adds	r3, r7, #4
 8022156:	2204      	movs	r2, #4
 8022158:	4619      	mov	r1, r3
 802215a:	4812      	ldr	r0, [pc, #72]	; (80221a4 <MX_TIM3_Init+0xec>)
 802215c:	f004 fb52 	bl	8026804 <HAL_TIM_PWM_ConfigChannel>
 8022160:	4603      	mov	r3, r0
 8022162:	2b00      	cmp	r3, #0
 8022164:	d001      	beq.n	802216a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8022166:	f000 fb0b 	bl	8022780 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 802216a:	1d3b      	adds	r3, r7, #4
 802216c:	2208      	movs	r2, #8
 802216e:	4619      	mov	r1, r3
 8022170:	480c      	ldr	r0, [pc, #48]	; (80221a4 <MX_TIM3_Init+0xec>)
 8022172:	f004 fb47 	bl	8026804 <HAL_TIM_PWM_ConfigChannel>
 8022176:	4603      	mov	r3, r0
 8022178:	2b00      	cmp	r3, #0
 802217a:	d001      	beq.n	8022180 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 802217c:	f000 fb00 	bl	8022780 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8022180:	1d3b      	adds	r3, r7, #4
 8022182:	220c      	movs	r2, #12
 8022184:	4619      	mov	r1, r3
 8022186:	4807      	ldr	r0, [pc, #28]	; (80221a4 <MX_TIM3_Init+0xec>)
 8022188:	f004 fb3c 	bl	8026804 <HAL_TIM_PWM_ConfigChannel>
 802218c:	4603      	mov	r3, r0
 802218e:	2b00      	cmp	r3, #0
 8022190:	d001      	beq.n	8022196 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8022192:	f000 faf5 	bl	8022780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8022196:	4803      	ldr	r0, [pc, #12]	; (80221a4 <MX_TIM3_Init+0xec>)
 8022198:	f001 fa8c 	bl	80236b4 <HAL_TIM_MspPostInit>

}
 802219c:	bf00      	nop
 802219e:	3728      	adds	r7, #40	; 0x28
 80221a0:	46bd      	mov	sp, r7
 80221a2:	bd80      	pop	{r7, pc}
 80221a4:	2000092c 	.word	0x2000092c
 80221a8:	40000400 	.word	0x40000400

080221ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80221ac:	b580      	push	{r7, lr}
 80221ae:	b08c      	sub	sp, #48	; 0x30
 80221b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80221b2:	f107 030c 	add.w	r3, r7, #12
 80221b6:	2224      	movs	r2, #36	; 0x24
 80221b8:	2100      	movs	r1, #0
 80221ba:	4618      	mov	r0, r3
 80221bc:	f005 f8ee 	bl	802739c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80221c0:	1d3b      	adds	r3, r7, #4
 80221c2:	2200      	movs	r2, #0
 80221c4:	601a      	str	r2, [r3, #0]
 80221c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80221c8:	4b20      	ldr	r3, [pc, #128]	; (802224c <MX_TIM4_Init+0xa0>)
 80221ca:	4a21      	ldr	r2, [pc, #132]	; (8022250 <MX_TIM4_Init+0xa4>)
 80221cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80221ce:	4b1f      	ldr	r3, [pc, #124]	; (802224c <MX_TIM4_Init+0xa0>)
 80221d0:	2200      	movs	r2, #0
 80221d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80221d4:	4b1d      	ldr	r3, [pc, #116]	; (802224c <MX_TIM4_Init+0xa0>)
 80221d6:	2200      	movs	r2, #0
 80221d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80221da:	4b1c      	ldr	r3, [pc, #112]	; (802224c <MX_TIM4_Init+0xa0>)
 80221dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80221e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80221e2:	4b1a      	ldr	r3, [pc, #104]	; (802224c <MX_TIM4_Init+0xa0>)
 80221e4:	2200      	movs	r2, #0
 80221e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80221e8:	4b18      	ldr	r3, [pc, #96]	; (802224c <MX_TIM4_Init+0xa0>)
 80221ea:	2200      	movs	r2, #0
 80221ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80221ee:	2303      	movs	r3, #3
 80221f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80221f2:	2300      	movs	r3, #0
 80221f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80221f6:	2301      	movs	r3, #1
 80221f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80221fa:	2300      	movs	r3, #0
 80221fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80221fe:	2300      	movs	r3, #0
 8022200:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8022202:	2300      	movs	r3, #0
 8022204:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8022206:	2301      	movs	r3, #1
 8022208:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 802220a:	2300      	movs	r3, #0
 802220c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 802220e:	2300      	movs	r3, #0
 8022210:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8022212:	f107 030c 	add.w	r3, r7, #12
 8022216:	4619      	mov	r1, r3
 8022218:	480c      	ldr	r0, [pc, #48]	; (802224c <MX_TIM4_Init+0xa0>)
 802221a:	f004 f921 	bl	8026460 <HAL_TIM_Encoder_Init>
 802221e:	4603      	mov	r3, r0
 8022220:	2b00      	cmp	r3, #0
 8022222:	d001      	beq.n	8022228 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8022224:	f000 faac 	bl	8022780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8022228:	2300      	movs	r3, #0
 802222a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802222c:	2300      	movs	r3, #0
 802222e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8022230:	1d3b      	adds	r3, r7, #4
 8022232:	4619      	mov	r1, r3
 8022234:	4805      	ldr	r0, [pc, #20]	; (802224c <MX_TIM4_Init+0xa0>)
 8022236:	f004 ff9b 	bl	8027170 <HAL_TIMEx_MasterConfigSynchronization>
 802223a:	4603      	mov	r3, r0
 802223c:	2b00      	cmp	r3, #0
 802223e:	d001      	beq.n	8022244 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8022240:	f000 fa9e 	bl	8022780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8022244:	bf00      	nop
 8022246:	3730      	adds	r7, #48	; 0x30
 8022248:	46bd      	mov	sp, r7
 802224a:	bd80      	pop	{r7, pc}
 802224c:	20000858 	.word	0x20000858
 8022250:	40000800 	.word	0x40000800

08022254 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8022254:	b580      	push	{r7, lr}
 8022256:	b086      	sub	sp, #24
 8022258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 802225a:	f107 0308 	add.w	r3, r7, #8
 802225e:	2200      	movs	r2, #0
 8022260:	601a      	str	r2, [r3, #0]
 8022262:	605a      	str	r2, [r3, #4]
 8022264:	609a      	str	r2, [r3, #8]
 8022266:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8022268:	463b      	mov	r3, r7
 802226a:	2200      	movs	r2, #0
 802226c:	601a      	str	r2, [r3, #0]
 802226e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8022270:	4b1d      	ldr	r3, [pc, #116]	; (80222e8 <MX_TIM5_Init+0x94>)
 8022272:	4a1e      	ldr	r2, [pc, #120]	; (80222ec <MX_TIM5_Init+0x98>)
 8022274:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4;
 8022276:	4b1c      	ldr	r3, [pc, #112]	; (80222e8 <MX_TIM5_Init+0x94>)
 8022278:	2204      	movs	r2, #4
 802227a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 802227c:	4b1a      	ldr	r3, [pc, #104]	; (80222e8 <MX_TIM5_Init+0x94>)
 802227e:	2200      	movs	r2, #0
 8022280:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20999;
 8022282:	4b19      	ldr	r3, [pc, #100]	; (80222e8 <MX_TIM5_Init+0x94>)
 8022284:	f245 2207 	movw	r2, #20999	; 0x5207
 8022288:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802228a:	4b17      	ldr	r3, [pc, #92]	; (80222e8 <MX_TIM5_Init+0x94>)
 802228c:	2200      	movs	r2, #0
 802228e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8022290:	4b15      	ldr	r3, [pc, #84]	; (80222e8 <MX_TIM5_Init+0x94>)
 8022292:	2200      	movs	r2, #0
 8022294:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8022296:	4814      	ldr	r0, [pc, #80]	; (80222e8 <MX_TIM5_Init+0x94>)
 8022298:	f004 f82a 	bl	80262f0 <HAL_TIM_Base_Init>
 802229c:	4603      	mov	r3, r0
 802229e:	2b00      	cmp	r3, #0
 80222a0:	d001      	beq.n	80222a6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80222a2:	f000 fa6d 	bl	8022780 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80222a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80222aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80222ac:	f107 0308 	add.w	r3, r7, #8
 80222b0:	4619      	mov	r1, r3
 80222b2:	480d      	ldr	r0, [pc, #52]	; (80222e8 <MX_TIM5_Init+0x94>)
 80222b4:	f004 fb6c 	bl	8026990 <HAL_TIM_ConfigClockSource>
 80222b8:	4603      	mov	r3, r0
 80222ba:	2b00      	cmp	r3, #0
 80222bc:	d001      	beq.n	80222c2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80222be:	f000 fa5f 	bl	8022780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80222c2:	2300      	movs	r3, #0
 80222c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80222c6:	2300      	movs	r3, #0
 80222c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80222ca:	463b      	mov	r3, r7
 80222cc:	4619      	mov	r1, r3
 80222ce:	4806      	ldr	r0, [pc, #24]	; (80222e8 <MX_TIM5_Init+0x94>)
 80222d0:	f004 ff4e 	bl	8027170 <HAL_TIMEx_MasterConfigSynchronization>
 80222d4:	4603      	mov	r3, r0
 80222d6:	2b00      	cmp	r3, #0
 80222d8:	d001      	beq.n	80222de <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80222da:	f000 fa51 	bl	8022780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80222de:	bf00      	nop
 80222e0:	3718      	adds	r7, #24
 80222e2:	46bd      	mov	sp, r7
 80222e4:	bd80      	pop	{r7, pc}
 80222e6:	bf00      	nop
 80222e8:	200008ec 	.word	0x200008ec
 80222ec:	40000c00 	.word	0x40000c00

080222f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80222f0:	b580      	push	{r7, lr}
 80222f2:	b082      	sub	sp, #8
 80222f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80222f6:	463b      	mov	r3, r7
 80222f8:	2200      	movs	r2, #0
 80222fa:	601a      	str	r2, [r3, #0]
 80222fc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80222fe:	4b15      	ldr	r3, [pc, #84]	; (8022354 <MX_TIM6_Init+0x64>)
 8022300:	4a15      	ldr	r2, [pc, #84]	; (8022358 <MX_TIM6_Init+0x68>)
 8022302:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 8022304:	4b13      	ldr	r3, [pc, #76]	; (8022354 <MX_TIM6_Init+0x64>)
 8022306:	2204      	movs	r2, #4
 8022308:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 802230a:	4b12      	ldr	r3, [pc, #72]	; (8022354 <MX_TIM6_Init+0x64>)
 802230c:	2200      	movs	r2, #0
 802230e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10499;
 8022310:	4b10      	ldr	r3, [pc, #64]	; (8022354 <MX_TIM6_Init+0x64>)
 8022312:	f642 1203 	movw	r2, #10499	; 0x2903
 8022316:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8022318:	4b0e      	ldr	r3, [pc, #56]	; (8022354 <MX_TIM6_Init+0x64>)
 802231a:	2200      	movs	r2, #0
 802231c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 802231e:	480d      	ldr	r0, [pc, #52]	; (8022354 <MX_TIM6_Init+0x64>)
 8022320:	f003 ffe6 	bl	80262f0 <HAL_TIM_Base_Init>
 8022324:	4603      	mov	r3, r0
 8022326:	2b00      	cmp	r3, #0
 8022328:	d001      	beq.n	802232e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 802232a:	f000 fa29 	bl	8022780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802232e:	2300      	movs	r3, #0
 8022330:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8022332:	2300      	movs	r3, #0
 8022334:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8022336:	463b      	mov	r3, r7
 8022338:	4619      	mov	r1, r3
 802233a:	4806      	ldr	r0, [pc, #24]	; (8022354 <MX_TIM6_Init+0x64>)
 802233c:	f004 ff18 	bl	8027170 <HAL_TIMEx_MasterConfigSynchronization>
 8022340:	4603      	mov	r3, r0
 8022342:	2b00      	cmp	r3, #0
 8022344:	d001      	beq.n	802234a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8022346:	f000 fa1b 	bl	8022780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 802234a:	bf00      	nop
 802234c:	3708      	adds	r7, #8
 802234e:	46bd      	mov	sp, r7
 8022350:	bd80      	pop	{r7, pc}
 8022352:	bf00      	nop
 8022354:	20000aac 	.word	0x20000aac
 8022358:	40001000 	.word	0x40001000

0802235c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 802235c:	b580      	push	{r7, lr}
 802235e:	b082      	sub	sp, #8
 8022360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8022362:	463b      	mov	r3, r7
 8022364:	2200      	movs	r2, #0
 8022366:	601a      	str	r2, [r3, #0]
 8022368:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 802236a:	4b15      	ldr	r3, [pc, #84]	; (80223c0 <MX_TIM7_Init+0x64>)
 802236c:	4a15      	ldr	r2, [pc, #84]	; (80223c4 <MX_TIM7_Init+0x68>)
 802236e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 8022370:	4b13      	ldr	r3, [pc, #76]	; (80223c0 <MX_TIM7_Init+0x64>)
 8022372:	2204      	movs	r2, #4
 8022374:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8022376:	4b12      	ldr	r3, [pc, #72]	; (80223c0 <MX_TIM7_Init+0x64>)
 8022378:	2200      	movs	r2, #0
 802237a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1049;
 802237c:	4b10      	ldr	r3, [pc, #64]	; (80223c0 <MX_TIM7_Init+0x64>)
 802237e:	f240 4219 	movw	r2, #1049	; 0x419
 8022382:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8022384:	4b0e      	ldr	r3, [pc, #56]	; (80223c0 <MX_TIM7_Init+0x64>)
 8022386:	2200      	movs	r2, #0
 8022388:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 802238a:	480d      	ldr	r0, [pc, #52]	; (80223c0 <MX_TIM7_Init+0x64>)
 802238c:	f003 ffb0 	bl	80262f0 <HAL_TIM_Base_Init>
 8022390:	4603      	mov	r3, r0
 8022392:	2b00      	cmp	r3, #0
 8022394:	d001      	beq.n	802239a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8022396:	f000 f9f3 	bl	8022780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802239a:	2300      	movs	r3, #0
 802239c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802239e:	2300      	movs	r3, #0
 80223a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80223a2:	463b      	mov	r3, r7
 80223a4:	4619      	mov	r1, r3
 80223a6:	4806      	ldr	r0, [pc, #24]	; (80223c0 <MX_TIM7_Init+0x64>)
 80223a8:	f004 fee2 	bl	8027170 <HAL_TIMEx_MasterConfigSynchronization>
 80223ac:	4603      	mov	r3, r0
 80223ae:	2b00      	cmp	r3, #0
 80223b0:	d001      	beq.n	80223b6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80223b2:	f000 f9e5 	bl	8022780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80223b6:	bf00      	nop
 80223b8:	3708      	adds	r7, #8
 80223ba:	46bd      	mov	sp, r7
 80223bc:	bd80      	pop	{r7, pc}
 80223be:	bf00      	nop
 80223c0:	20000bac 	.word	0x20000bac
 80223c4:	40001400 	.word	0x40001400

080223c8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80223c8:	b580      	push	{r7, lr}
 80223ca:	b08c      	sub	sp, #48	; 0x30
 80223cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80223ce:	f107 030c 	add.w	r3, r7, #12
 80223d2:	2224      	movs	r2, #36	; 0x24
 80223d4:	2100      	movs	r1, #0
 80223d6:	4618      	mov	r0, r3
 80223d8:	f004 ffe0 	bl	802739c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80223dc:	1d3b      	adds	r3, r7, #4
 80223de:	2200      	movs	r2, #0
 80223e0:	601a      	str	r2, [r3, #0]
 80223e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80223e4:	4b22      	ldr	r3, [pc, #136]	; (8022470 <MX_TIM8_Init+0xa8>)
 80223e6:	4a23      	ldr	r2, [pc, #140]	; (8022474 <MX_TIM8_Init+0xac>)
 80223e8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80223ea:	4b21      	ldr	r3, [pc, #132]	; (8022470 <MX_TIM8_Init+0xa8>)
 80223ec:	2200      	movs	r2, #0
 80223ee:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80223f0:	4b1f      	ldr	r3, [pc, #124]	; (8022470 <MX_TIM8_Init+0xa8>)
 80223f2:	2200      	movs	r2, #0
 80223f4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80223f6:	4b1e      	ldr	r3, [pc, #120]	; (8022470 <MX_TIM8_Init+0xa8>)
 80223f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80223fc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80223fe:	4b1c      	ldr	r3, [pc, #112]	; (8022470 <MX_TIM8_Init+0xa8>)
 8022400:	2200      	movs	r2, #0
 8022402:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8022404:	4b1a      	ldr	r3, [pc, #104]	; (8022470 <MX_TIM8_Init+0xa8>)
 8022406:	2200      	movs	r2, #0
 8022408:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802240a:	4b19      	ldr	r3, [pc, #100]	; (8022470 <MX_TIM8_Init+0xa8>)
 802240c:	2200      	movs	r2, #0
 802240e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8022410:	2303      	movs	r3, #3
 8022412:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8022414:	2300      	movs	r3, #0
 8022416:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8022418:	2301      	movs	r3, #1
 802241a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 802241c:	2300      	movs	r3, #0
 802241e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8022420:	2300      	movs	r3, #0
 8022422:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8022424:	2300      	movs	r3, #0
 8022426:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8022428:	2301      	movs	r3, #1
 802242a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 802242c:	2300      	movs	r3, #0
 802242e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8022430:	2300      	movs	r3, #0
 8022432:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8022434:	f107 030c 	add.w	r3, r7, #12
 8022438:	4619      	mov	r1, r3
 802243a:	480d      	ldr	r0, [pc, #52]	; (8022470 <MX_TIM8_Init+0xa8>)
 802243c:	f004 f810 	bl	8026460 <HAL_TIM_Encoder_Init>
 8022440:	4603      	mov	r3, r0
 8022442:	2b00      	cmp	r3, #0
 8022444:	d001      	beq.n	802244a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8022446:	f000 f99b 	bl	8022780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802244a:	2300      	movs	r3, #0
 802244c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802244e:	2300      	movs	r3, #0
 8022450:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8022452:	1d3b      	adds	r3, r7, #4
 8022454:	4619      	mov	r1, r3
 8022456:	4806      	ldr	r0, [pc, #24]	; (8022470 <MX_TIM8_Init+0xa8>)
 8022458:	f004 fe8a 	bl	8027170 <HAL_TIMEx_MasterConfigSynchronization>
 802245c:	4603      	mov	r3, r0
 802245e:	2b00      	cmp	r3, #0
 8022460:	d001      	beq.n	8022466 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8022462:	f000 f98d 	bl	8022780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8022466:	bf00      	nop
 8022468:	3730      	adds	r7, #48	; 0x30
 802246a:	46bd      	mov	sp, r7
 802246c:	bd80      	pop	{r7, pc}
 802246e:	bf00      	nop
 8022470:	20000818 	.word	0x20000818
 8022474:	40010400 	.word	0x40010400

08022478 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8022478:	b580      	push	{r7, lr}
 802247a:	b088      	sub	sp, #32
 802247c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 802247e:	1d3b      	adds	r3, r7, #4
 8022480:	2200      	movs	r2, #0
 8022482:	601a      	str	r2, [r3, #0]
 8022484:	605a      	str	r2, [r3, #4]
 8022486:	609a      	str	r2, [r3, #8]
 8022488:	60da      	str	r2, [r3, #12]
 802248a:	611a      	str	r2, [r3, #16]
 802248c:	615a      	str	r2, [r3, #20]
 802248e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8022490:	4b1e      	ldr	r3, [pc, #120]	; (802250c <MX_TIM11_Init+0x94>)
 8022492:	4a1f      	ldr	r2, [pc, #124]	; (8022510 <MX_TIM11_Init+0x98>)
 8022494:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8022496:	4b1d      	ldr	r3, [pc, #116]	; (802250c <MX_TIM11_Init+0x94>)
 8022498:	2200      	movs	r2, #0
 802249a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 802249c:	4b1b      	ldr	r3, [pc, #108]	; (802250c <MX_TIM11_Init+0x94>)
 802249e:	2200      	movs	r2, #0
 80224a0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1679;
 80224a2:	4b1a      	ldr	r3, [pc, #104]	; (802250c <MX_TIM11_Init+0x94>)
 80224a4:	f240 628f 	movw	r2, #1679	; 0x68f
 80224a8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80224aa:	4b18      	ldr	r3, [pc, #96]	; (802250c <MX_TIM11_Init+0x94>)
 80224ac:	2200      	movs	r2, #0
 80224ae:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80224b0:	4b16      	ldr	r3, [pc, #88]	; (802250c <MX_TIM11_Init+0x94>)
 80224b2:	2200      	movs	r2, #0
 80224b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80224b6:	4815      	ldr	r0, [pc, #84]	; (802250c <MX_TIM11_Init+0x94>)
 80224b8:	f003 ff1a 	bl	80262f0 <HAL_TIM_Base_Init>
 80224bc:	4603      	mov	r3, r0
 80224be:	2b00      	cmp	r3, #0
 80224c0:	d001      	beq.n	80224c6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80224c2:	f000 f95d 	bl	8022780 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80224c6:	4811      	ldr	r0, [pc, #68]	; (802250c <MX_TIM11_Init+0x94>)
 80224c8:	f003 ff61 	bl	802638e <HAL_TIM_PWM_Init>
 80224cc:	4603      	mov	r3, r0
 80224ce:	2b00      	cmp	r3, #0
 80224d0:	d001      	beq.n	80224d6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80224d2:	f000 f955 	bl	8022780 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80224d6:	2360      	movs	r3, #96	; 0x60
 80224d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80224da:	2300      	movs	r3, #0
 80224dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80224de:	2300      	movs	r3, #0
 80224e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80224e2:	2300      	movs	r3, #0
 80224e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80224e6:	1d3b      	adds	r3, r7, #4
 80224e8:	2200      	movs	r2, #0
 80224ea:	4619      	mov	r1, r3
 80224ec:	4807      	ldr	r0, [pc, #28]	; (802250c <MX_TIM11_Init+0x94>)
 80224ee:	f004 f989 	bl	8026804 <HAL_TIM_PWM_ConfigChannel>
 80224f2:	4603      	mov	r3, r0
 80224f4:	2b00      	cmp	r3, #0
 80224f6:	d001      	beq.n	80224fc <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80224f8:	f000 f942 	bl	8022780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80224fc:	4803      	ldr	r0, [pc, #12]	; (802250c <MX_TIM11_Init+0x94>)
 80224fe:	f001 f8d9 	bl	80236b4 <HAL_TIM_MspPostInit>

}
 8022502:	bf00      	nop
 8022504:	3720      	adds	r7, #32
 8022506:	46bd      	mov	sp, r7
 8022508:	bd80      	pop	{r7, pc}
 802250a:	bf00      	nop
 802250c:	20000a0c 	.word	0x20000a0c
 8022510:	40014800 	.word	0x40014800

08022514 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8022514:	b580      	push	{r7, lr}
 8022516:	b088      	sub	sp, #32
 8022518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 802251a:	1d3b      	adds	r3, r7, #4
 802251c:	2200      	movs	r2, #0
 802251e:	601a      	str	r2, [r3, #0]
 8022520:	605a      	str	r2, [r3, #4]
 8022522:	609a      	str	r2, [r3, #8]
 8022524:	60da      	str	r2, [r3, #12]
 8022526:	611a      	str	r2, [r3, #16]
 8022528:	615a      	str	r2, [r3, #20]
 802252a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 802252c:	4b1a      	ldr	r3, [pc, #104]	; (8022598 <MX_TIM12_Init+0x84>)
 802252e:	4a1b      	ldr	r2, [pc, #108]	; (802259c <MX_TIM12_Init+0x88>)
 8022530:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 880;
 8022532:	4b19      	ldr	r3, [pc, #100]	; (8022598 <MX_TIM12_Init+0x84>)
 8022534:	f44f 725c 	mov.w	r2, #880	; 0x370
 8022538:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 802253a:	4b17      	ldr	r3, [pc, #92]	; (8022598 <MX_TIM12_Init+0x84>)
 802253c:	2200      	movs	r2, #0
 802253e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 53;
 8022540:	4b15      	ldr	r3, [pc, #84]	; (8022598 <MX_TIM12_Init+0x84>)
 8022542:	2235      	movs	r2, #53	; 0x35
 8022544:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8022546:	4b14      	ldr	r3, [pc, #80]	; (8022598 <MX_TIM12_Init+0x84>)
 8022548:	2200      	movs	r2, #0
 802254a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 802254c:	4b12      	ldr	r3, [pc, #72]	; (8022598 <MX_TIM12_Init+0x84>)
 802254e:	2200      	movs	r2, #0
 8022550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8022552:	4811      	ldr	r0, [pc, #68]	; (8022598 <MX_TIM12_Init+0x84>)
 8022554:	f003 ff1b 	bl	802638e <HAL_TIM_PWM_Init>
 8022558:	4603      	mov	r3, r0
 802255a:	2b00      	cmp	r3, #0
 802255c:	d001      	beq.n	8022562 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 802255e:	f000 f90f 	bl	8022780 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8022562:	2360      	movs	r3, #96	; 0x60
 8022564:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8022566:	2300      	movs	r3, #0
 8022568:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 802256a:	2300      	movs	r3, #0
 802256c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 802256e:	2300      	movs	r3, #0
 8022570:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8022572:	1d3b      	adds	r3, r7, #4
 8022574:	2204      	movs	r2, #4
 8022576:	4619      	mov	r1, r3
 8022578:	4807      	ldr	r0, [pc, #28]	; (8022598 <MX_TIM12_Init+0x84>)
 802257a:	f004 f943 	bl	8026804 <HAL_TIM_PWM_ConfigChannel>
 802257e:	4603      	mov	r3, r0
 8022580:	2b00      	cmp	r3, #0
 8022582:	d001      	beq.n	8022588 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8022584:	f000 f8fc 	bl	8022780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8022588:	4803      	ldr	r0, [pc, #12]	; (8022598 <MX_TIM12_Init+0x84>)
 802258a:	f001 f893 	bl	80236b4 <HAL_TIM_MspPostInit>

}
 802258e:	bf00      	nop
 8022590:	3720      	adds	r7, #32
 8022592:	46bd      	mov	sp, r7
 8022594:	bd80      	pop	{r7, pc}
 8022596:	bf00      	nop
 8022598:	20000b6c 	.word	0x20000b6c
 802259c:	40001800 	.word	0x40001800

080225a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80225a0:	b580      	push	{r7, lr}
 80225a2:	b082      	sub	sp, #8
 80225a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80225a6:	2300      	movs	r3, #0
 80225a8:	607b      	str	r3, [r7, #4]
 80225aa:	4b0c      	ldr	r3, [pc, #48]	; (80225dc <MX_DMA_Init+0x3c>)
 80225ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80225ae:	4a0b      	ldr	r2, [pc, #44]	; (80225dc <MX_DMA_Init+0x3c>)
 80225b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80225b4:	6313      	str	r3, [r2, #48]	; 0x30
 80225b6:	4b09      	ldr	r3, [pc, #36]	; (80225dc <MX_DMA_Init+0x3c>)
 80225b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80225ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80225be:	607b      	str	r3, [r7, #4]
 80225c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80225c2:	2200      	movs	r2, #0
 80225c4:	2100      	movs	r1, #0
 80225c6:	2038      	movs	r0, #56	; 0x38
 80225c8:	f002 fb5d 	bl	8024c86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80225cc:	2038      	movs	r0, #56	; 0x38
 80225ce:	f002 fb76 	bl	8024cbe <HAL_NVIC_EnableIRQ>

}
 80225d2:	bf00      	nop
 80225d4:	3708      	adds	r7, #8
 80225d6:	46bd      	mov	sp, r7
 80225d8:	bd80      	pop	{r7, pc}
 80225da:	bf00      	nop
 80225dc:	40023800 	.word	0x40023800

080225e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80225e0:	b580      	push	{r7, lr}
 80225e2:	b08a      	sub	sp, #40	; 0x28
 80225e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80225e6:	f107 0314 	add.w	r3, r7, #20
 80225ea:	2200      	movs	r2, #0
 80225ec:	601a      	str	r2, [r3, #0]
 80225ee:	605a      	str	r2, [r3, #4]
 80225f0:	609a      	str	r2, [r3, #8]
 80225f2:	60da      	str	r2, [r3, #12]
 80225f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80225f6:	2300      	movs	r3, #0
 80225f8:	613b      	str	r3, [r7, #16]
 80225fa:	4b5c      	ldr	r3, [pc, #368]	; (802276c <MX_GPIO_Init+0x18c>)
 80225fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80225fe:	4a5b      	ldr	r2, [pc, #364]	; (802276c <MX_GPIO_Init+0x18c>)
 8022600:	f043 0304 	orr.w	r3, r3, #4
 8022604:	6313      	str	r3, [r2, #48]	; 0x30
 8022606:	4b59      	ldr	r3, [pc, #356]	; (802276c <MX_GPIO_Init+0x18c>)
 8022608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802260a:	f003 0304 	and.w	r3, r3, #4
 802260e:	613b      	str	r3, [r7, #16]
 8022610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8022612:	2300      	movs	r3, #0
 8022614:	60fb      	str	r3, [r7, #12]
 8022616:	4b55      	ldr	r3, [pc, #340]	; (802276c <MX_GPIO_Init+0x18c>)
 8022618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802261a:	4a54      	ldr	r2, [pc, #336]	; (802276c <MX_GPIO_Init+0x18c>)
 802261c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022620:	6313      	str	r3, [r2, #48]	; 0x30
 8022622:	4b52      	ldr	r3, [pc, #328]	; (802276c <MX_GPIO_Init+0x18c>)
 8022624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802262a:	60fb      	str	r3, [r7, #12]
 802262c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802262e:	2300      	movs	r3, #0
 8022630:	60bb      	str	r3, [r7, #8]
 8022632:	4b4e      	ldr	r3, [pc, #312]	; (802276c <MX_GPIO_Init+0x18c>)
 8022634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022636:	4a4d      	ldr	r2, [pc, #308]	; (802276c <MX_GPIO_Init+0x18c>)
 8022638:	f043 0301 	orr.w	r3, r3, #1
 802263c:	6313      	str	r3, [r2, #48]	; 0x30
 802263e:	4b4b      	ldr	r3, [pc, #300]	; (802276c <MX_GPIO_Init+0x18c>)
 8022640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022642:	f003 0301 	and.w	r3, r3, #1
 8022646:	60bb      	str	r3, [r7, #8]
 8022648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 802264a:	2300      	movs	r3, #0
 802264c:	607b      	str	r3, [r7, #4]
 802264e:	4b47      	ldr	r3, [pc, #284]	; (802276c <MX_GPIO_Init+0x18c>)
 8022650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022652:	4a46      	ldr	r2, [pc, #280]	; (802276c <MX_GPIO_Init+0x18c>)
 8022654:	f043 0302 	orr.w	r3, r3, #2
 8022658:	6313      	str	r3, [r2, #48]	; 0x30
 802265a:	4b44      	ldr	r3, [pc, #272]	; (802276c <MX_GPIO_Init+0x18c>)
 802265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802265e:	f003 0302 	and.w	r3, r3, #2
 8022662:	607b      	str	r3, [r7, #4]
 8022664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8022666:	2300      	movs	r3, #0
 8022668:	603b      	str	r3, [r7, #0]
 802266a:	4b40      	ldr	r3, [pc, #256]	; (802276c <MX_GPIO_Init+0x18c>)
 802266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802266e:	4a3f      	ldr	r2, [pc, #252]	; (802276c <MX_GPIO_Init+0x18c>)
 8022670:	f043 0308 	orr.w	r3, r3, #8
 8022674:	6313      	str	r3, [r2, #48]	; 0x30
 8022676:	4b3d      	ldr	r3, [pc, #244]	; (802276c <MX_GPIO_Init+0x18c>)
 8022678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802267a:	f003 0308 	and.w	r3, r3, #8
 802267e:	603b      	str	r3, [r7, #0]
 8022680:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8022682:	2200      	movs	r2, #0
 8022684:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8022688:	4839      	ldr	r0, [pc, #228]	; (8022770 <MX_GPIO_Init+0x190>)
 802268a:	f003 f853 	bl	8025734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 802268e:	2201      	movs	r2, #1
 8022690:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8022694:	4837      	ldr	r0, [pc, #220]	; (8022774 <MX_GPIO_Init+0x194>)
 8022696:	f003 f84d 	bl	8025734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 802269a:	2200      	movs	r2, #0
 802269c:	f44f 4105 	mov.w	r1, #34048	; 0x8500
 80226a0:	4835      	ldr	r0, [pc, #212]	; (8022778 <MX_GPIO_Init+0x198>)
 80226a2:	f003 f847 	bl	8025734 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80226a6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80226aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80226ac:	2301      	movs	r3, #1
 80226ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80226b0:	2300      	movs	r3, #0
 80226b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80226b4:	2300      	movs	r3, #0
 80226b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80226b8:	f107 0314 	add.w	r3, r7, #20
 80226bc:	4619      	mov	r1, r3
 80226be:	482c      	ldr	r0, [pc, #176]	; (8022770 <MX_GPIO_Init+0x190>)
 80226c0:	f002 fe86 	bl	80253d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80226c4:	2307      	movs	r3, #7
 80226c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80226c8:	2300      	movs	r3, #0
 80226ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80226cc:	2301      	movs	r3, #1
 80226ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80226d0:	f107 0314 	add.w	r3, r7, #20
 80226d4:	4619      	mov	r1, r3
 80226d6:	4827      	ldr	r0, [pc, #156]	; (8022774 <MX_GPIO_Init+0x194>)
 80226d8:	f002 fe7a 	bl	80253d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80226dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80226e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80226e2:	2301      	movs	r3, #1
 80226e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80226e6:	2300      	movs	r3, #0
 80226e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80226ea:	2300      	movs	r3, #0
 80226ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80226ee:	f107 0314 	add.w	r3, r7, #20
 80226f2:	4619      	mov	r1, r3
 80226f4:	481f      	ldr	r0, [pc, #124]	; (8022774 <MX_GPIO_Init+0x194>)
 80226f6:	f002 fe6b 	bl	80253d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_8;
 80226fa:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 80226fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8022700:	2300      	movs	r3, #0
 8022702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022704:	2300      	movs	r3, #0
 8022706:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8022708:	f107 0314 	add.w	r3, r7, #20
 802270c:	4619      	mov	r1, r3
 802270e:	4819      	ldr	r0, [pc, #100]	; (8022774 <MX_GPIO_Init+0x194>)
 8022710:	f002 fe5e 	bl	80253d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15;
 8022714:	f44f 4305 	mov.w	r3, #34048	; 0x8500
 8022718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 802271a:	2301      	movs	r3, #1
 802271c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802271e:	2300      	movs	r3, #0
 8022720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8022722:	2300      	movs	r3, #0
 8022724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8022726:	f107 0314 	add.w	r3, r7, #20
 802272a:	4619      	mov	r1, r3
 802272c:	4812      	ldr	r0, [pc, #72]	; (8022778 <MX_GPIO_Init+0x198>)
 802272e:	f002 fe4f 	bl	80253d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8022732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8022736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8022738:	2300      	movs	r3, #0
 802273a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 802273c:	2301      	movs	r3, #1
 802273e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8022740:	f107 0314 	add.w	r3, r7, #20
 8022744:	4619      	mov	r1, r3
 8022746:	480c      	ldr	r0, [pc, #48]	; (8022778 <MX_GPIO_Init+0x198>)
 8022748:	f002 fe42 	bl	80253d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 802274c:	2304      	movs	r3, #4
 802274e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8022750:	2300      	movs	r3, #0
 8022752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022754:	2300      	movs	r3, #0
 8022756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8022758:	f107 0314 	add.w	r3, r7, #20
 802275c:	4619      	mov	r1, r3
 802275e:	4807      	ldr	r0, [pc, #28]	; (802277c <MX_GPIO_Init+0x19c>)
 8022760:	f002 fe36 	bl	80253d0 <HAL_GPIO_Init>

}
 8022764:	bf00      	nop
 8022766:	3728      	adds	r7, #40	; 0x28
 8022768:	46bd      	mov	sp, r7
 802276a:	bd80      	pop	{r7, pc}
 802276c:	40023800 	.word	0x40023800
 8022770:	40020800 	.word	0x40020800
 8022774:	40020400 	.word	0x40020400
 8022778:	40020000 	.word	0x40020000
 802277c:	40020c00 	.word	0x40020c00

08022780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8022780:	b480      	push	{r7}
 8022782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8022784:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8022786:	e7fe      	b.n	8022786 <Error_Handler+0x6>

08022788 <_ZN5Motor4InitEv>:
#include "motor.hpp"
#include "declare_extern.h"

void Motor::Init()
{
 8022788:	b580      	push	{r7, lr}
 802278a:	b082      	sub	sp, #8
 802278c:	af00      	add	r7, sp, #0
 802278e:	6078      	str	r0, [r7, #4]
    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 8022790:	2104      	movs	r1, #4
 8022792:	4812      	ldr	r0, [pc, #72]	; (80227dc <_ZN5Motor4InitEv+0x54>)
 8022794:	f003 fe26 	bl	80263e4 <HAL_TIM_PWM_Start>
 8022798:	4603      	mov	r3, r0
 802279a:	2b00      	cmp	r3, #0
 802279c:	bf14      	ite	ne
 802279e:	2301      	movne	r3, #1
 80227a0:	2300      	moveq	r3, #0
 80227a2:	b2db      	uxtb	r3, r3
 80227a4:	2b00      	cmp	r3, #0
 80227a6:	d004      	beq.n	80227b2 <_ZN5Motor4InitEv+0x2a>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim1_ch2 = true; // MOTOR_R
 80227a8:	4b0d      	ldr	r3, [pc, #52]	; (80227e0 <_ZN5Motor4InitEv+0x58>)
 80227aa:	2201      	movs	r2, #1
 80227ac:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 80227ae:	f7ff ffe7 	bl	8022780 <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
 80227b2:	210c      	movs	r1, #12
 80227b4:	4809      	ldr	r0, [pc, #36]	; (80227dc <_ZN5Motor4InitEv+0x54>)
 80227b6:	f003 fe15 	bl	80263e4 <HAL_TIM_PWM_Start>
 80227ba:	4603      	mov	r3, r0
 80227bc:	2b00      	cmp	r3, #0
 80227be:	bf14      	ite	ne
 80227c0:	2301      	movne	r3, #1
 80227c2:	2300      	moveq	r3, #0
 80227c4:	b2db      	uxtb	r3, r3
 80227c6:	2b00      	cmp	r3, #0
 80227c8:	d004      	beq.n	80227d4 <_ZN5Motor4InitEv+0x4c>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim1_ch4 = true; // MOTOR_L
 80227ca:	4b06      	ldr	r3, [pc, #24]	; (80227e4 <_ZN5Motor4InitEv+0x5c>)
 80227cc:	2201      	movs	r2, #1
 80227ce:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 80227d0:	f7ff ffd6 	bl	8022780 <Error_Handler>
    }
}
 80227d4:	bf00      	nop
 80227d6:	3708      	adds	r7, #8
 80227d8:	46bd      	mov	sp, r7
 80227da:	bd80      	pop	{r7, pc}
 80227dc:	20000aec 	.word	0x20000aec
 80227e0:	20000300 	.word	0x20000300
 80227e4:	20000301 	.word	0x20000301

080227e8 <_ZN5Motor5DriveEff>:

void Motor::Drive(float translation_ratio, float rotation_ratio)
{
 80227e8:	b580      	push	{r7, lr}
 80227ea:	b08a      	sub	sp, #40	; 0x28
 80227ec:	af00      	add	r7, sp, #0
 80227ee:	60f8      	str	r0, [r7, #12]
 80227f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80227f4:	edc7 0a01 	vstr	s1, [r7, #4]
#ifdef DEBUG_MODE
    g_translation_ratio = translation_ratio;
 80227f8:	4a89      	ldr	r2, [pc, #548]	; (8022a20 <_ZN5Motor5DriveEff+0x238>)
 80227fa:	68bb      	ldr	r3, [r7, #8]
 80227fc:	6013      	str	r3, [r2, #0]
    g_rotation_ratio    = rotation_ratio;
 80227fe:	4a89      	ldr	r2, [pc, #548]	; (8022a24 <_ZN5Motor5DriveEff+0x23c>)
 8022800:	687b      	ldr	r3, [r7, #4]
 8022802:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    if(translation_ratio > LIMIT_TRANS_DUTY)       translation_ratio =  LIMIT_TRANS_DUTY;
 8022804:	68b8      	ldr	r0, [r7, #8]
 8022806:	f7fd fd7f 	bl	8020308 <__aeabi_f2d>
 802280a:	a381      	add	r3, pc, #516	; (adr r3, 8022a10 <_ZN5Motor5DriveEff+0x228>)
 802280c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022810:	f7fe f862 	bl	80208d8 <__aeabi_dcmpgt>
 8022814:	4603      	mov	r3, r0
 8022816:	2b00      	cmp	r3, #0
 8022818:	d002      	beq.n	8022820 <_ZN5Motor5DriveEff+0x38>
 802281a:	4b83      	ldr	r3, [pc, #524]	; (8022a28 <_ZN5Motor5DriveEff+0x240>)
 802281c:	60bb      	str	r3, [r7, #8]
 802281e:	e00c      	b.n	802283a <_ZN5Motor5DriveEff+0x52>
    else if(translation_ratio < -LIMIT_TRANS_DUTY) translation_ratio = -LIMIT_TRANS_DUTY;
 8022820:	68b8      	ldr	r0, [r7, #8]
 8022822:	f7fd fd71 	bl	8020308 <__aeabi_f2d>
 8022826:	a37c      	add	r3, pc, #496	; (adr r3, 8022a18 <_ZN5Motor5DriveEff+0x230>)
 8022828:	e9d3 2300 	ldrd	r2, r3, [r3]
 802282c:	f7fe f836 	bl	802089c <__aeabi_dcmplt>
 8022830:	4603      	mov	r3, r0
 8022832:	2b00      	cmp	r3, #0
 8022834:	d001      	beq.n	802283a <_ZN5Motor5DriveEff+0x52>
 8022836:	4b7d      	ldr	r3, [pc, #500]	; (8022a2c <_ZN5Motor5DriveEff+0x244>)
 8022838:	60bb      	str	r3, [r7, #8]

    float sum = translation_ratio + rotation_ratio;
 802283a:	ed97 7a02 	vldr	s14, [r7, #8]
 802283e:	edd7 7a01 	vldr	s15, [r7, #4]
 8022842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8022846:	edc7 7a06 	vstr	s15, [r7, #24]
    float excess = 0;
 802284a:	f04f 0300 	mov.w	r3, #0
 802284e:	627b      	str	r3, [r7, #36]	; 0x24

    if(sum > 1.0)       excess = sum - 1.0;
 8022850:	edd7 7a06 	vldr	s15, [r7, #24]
 8022854:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022858:	eef4 7ac7 	vcmpe.f32	s15, s14
 802285c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022860:	dd08      	ble.n	8022874 <_ZN5Motor5DriveEff+0x8c>
 8022862:	edd7 7a06 	vldr	s15, [r7, #24]
 8022866:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802286a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802286e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8022872:	e010      	b.n	8022896 <_ZN5Motor5DriveEff+0xae>
    else if(sum < -1.0) excess = sum + 1.0;
 8022874:	edd7 7a06 	vldr	s15, [r7, #24]
 8022878:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 802287c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022884:	d507      	bpl.n	8022896 <_ZN5Motor5DriveEff+0xae>
 8022886:	edd7 7a06 	vldr	s15, [r7, #24]
 802288a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802288e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022892:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    translation_ratio -= excess;
 8022896:	ed97 7a02 	vldr	s14, [r7, #8]
 802289a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 802289e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80228a2:	edc7 7a02 	vstr	s15, [r7, #8]

#ifdef DEBUG_MODE
    g_sum_raito = sum;
 80228a6:	4a62      	ldr	r2, [pc, #392]	; (8022a30 <_ZN5Motor5DriveEff+0x248>)
 80228a8:	69bb      	ldr	r3, [r7, #24]
 80228aa:	6013      	str	r3, [r2, #0]
    g_excess_ratio = excess;
 80228ac:	4a61      	ldr	r2, [pc, #388]	; (8022a34 <_ZN5Motor5DriveEff+0x24c>)
 80228ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80228b0:	6013      	str	r3, [r2, #0]
    g_reduced_translation = translation_ratio;
 80228b2:	4a61      	ldr	r2, [pc, #388]	; (8022a38 <_ZN5Motor5DriveEff+0x250>)
 80228b4:	68bb      	ldr	r3, [r7, #8]
 80228b6:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    float duty_l = translation_ratio - rotation_ratio;
 80228b8:	ed97 7a02 	vldr	s14, [r7, #8]
 80228bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80228c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80228c4:	edc7 7a08 	vstr	s15, [r7, #32]
    float duty_r = translation_ratio + rotation_ratio;
 80228c8:	ed97 7a02 	vldr	s14, [r7, #8]
 80228cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80228d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80228d4:	edc7 7a07 	vstr	s15, [r7, #28]

    if(duty_l > 1.0)       duty_l =  1.0;
 80228d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80228dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80228e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80228e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80228e8:	dd03      	ble.n	80228f2 <_ZN5Motor5DriveEff+0x10a>
 80228ea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80228ee:	623b      	str	r3, [r7, #32]
 80228f0:	e00a      	b.n	8022908 <_ZN5Motor5DriveEff+0x120>
    else if(duty_l < -1.0) duty_l = -1.0;
 80228f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80228f6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80228fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80228fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022902:	d501      	bpl.n	8022908 <_ZN5Motor5DriveEff+0x120>
 8022904:	4b4d      	ldr	r3, [pc, #308]	; (8022a3c <_ZN5Motor5DriveEff+0x254>)
 8022906:	623b      	str	r3, [r7, #32]

    if(duty_r > 1.0)       duty_r =  1.0;
 8022908:	edd7 7a07 	vldr	s15, [r7, #28]
 802290c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022910:	eef4 7ac7 	vcmpe.f32	s15, s14
 8022914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022918:	dd03      	ble.n	8022922 <_ZN5Motor5DriveEff+0x13a>
 802291a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 802291e:	61fb      	str	r3, [r7, #28]
 8022920:	e00a      	b.n	8022938 <_ZN5Motor5DriveEff+0x150>
    else if(duty_r < -1.0) duty_r = -1.0;
 8022922:	edd7 7a07 	vldr	s15, [r7, #28]
 8022926:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 802292a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802292e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022932:	d501      	bpl.n	8022938 <_ZN5Motor5DriveEff+0x150>
 8022934:	4b41      	ldr	r3, [pc, #260]	; (8022a3c <_ZN5Motor5DriveEff+0x254>)
 8022936:	61fb      	str	r3, [r7, #28]

#ifdef DEBUG_MODE
    g_duty_l = duty_l;
 8022938:	4a41      	ldr	r2, [pc, #260]	; (8022a40 <_ZN5Motor5DriveEff+0x258>)
 802293a:	6a3b      	ldr	r3, [r7, #32]
 802293c:	6013      	str	r3, [r2, #0]
    g_duty_r = duty_r;
 802293e:	4a41      	ldr	r2, [pc, #260]	; (8022a44 <_ZN5Motor5DriveEff+0x25c>)
 8022940:	69fb      	ldr	r3, [r7, #28]
 8022942:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    int16_t count_l = static_cast<int16_t>(COUNTER_PERIOD * duty_l);
 8022944:	edd7 7a08 	vldr	s15, [r7, #32]
 8022948:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8022a48 <_ZN5Motor5DriveEff+0x260>
 802294c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022950:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8022954:	ee17 3a90 	vmov	r3, s15
 8022958:	b21b      	sxth	r3, r3
 802295a:	82fb      	strh	r3, [r7, #22]
    int16_t count_r = static_cast<int16_t>(COUNTER_PERIOD * duty_r);
 802295c:	edd7 7a07 	vldr	s15, [r7, #28]
 8022960:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8022a48 <_ZN5Motor5DriveEff+0x260>
 8022964:	ee67 7a87 	vmul.f32	s15, s15, s14
 8022968:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802296c:	ee17 3a90 	vmov	r3, s15
 8022970:	b21b      	sxth	r3, r3
 8022972:	82bb      	strh	r3, [r7, #20]

    if(count_l < 0) { count_l *= -1; BACKWARD_L; }
 8022974:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8022978:	2b00      	cmp	r3, #0
 802297a:	da0d      	bge.n	8022998 <_ZN5Motor5DriveEff+0x1b0>
 802297c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8022980:	b29b      	uxth	r3, r3
 8022982:	425b      	negs	r3, r3
 8022984:	b29b      	uxth	r3, r3
 8022986:	b21b      	sxth	r3, r3
 8022988:	82fb      	strh	r3, [r7, #22]
 802298a:	2200      	movs	r2, #0
 802298c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8022990:	482e      	ldr	r0, [pc, #184]	; (8022a4c <_ZN5Motor5DriveEff+0x264>)
 8022992:	f002 fecf 	bl	8025734 <HAL_GPIO_WritePin>
 8022996:	e009      	b.n	80229ac <_ZN5Motor5DriveEff+0x1c4>
    else if(count_l >= 0) FORWARD_L;
 8022998:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802299c:	2b00      	cmp	r3, #0
 802299e:	db05      	blt.n	80229ac <_ZN5Motor5DriveEff+0x1c4>
 80229a0:	2201      	movs	r2, #1
 80229a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80229a6:	4829      	ldr	r0, [pc, #164]	; (8022a4c <_ZN5Motor5DriveEff+0x264>)
 80229a8:	f002 fec4 	bl	8025734 <HAL_GPIO_WritePin>

    if(count_r < 0) { count_r *= -1; BACKWARD_R; }
 80229ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80229b0:	2b00      	cmp	r3, #0
 80229b2:	da0d      	bge.n	80229d0 <_ZN5Motor5DriveEff+0x1e8>
 80229b4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80229b8:	b29b      	uxth	r3, r3
 80229ba:	425b      	negs	r3, r3
 80229bc:	b29b      	uxth	r3, r3
 80229be:	b21b      	sxth	r3, r3
 80229c0:	82bb      	strh	r3, [r7, #20]
 80229c2:	2201      	movs	r2, #1
 80229c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80229c8:	4820      	ldr	r0, [pc, #128]	; (8022a4c <_ZN5Motor5DriveEff+0x264>)
 80229ca:	f002 feb3 	bl	8025734 <HAL_GPIO_WritePin>
 80229ce:	e009      	b.n	80229e4 <_ZN5Motor5DriveEff+0x1fc>
    else if(count_r >= 0) FORWARD_R;
 80229d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80229d4:	2b00      	cmp	r3, #0
 80229d6:	db05      	blt.n	80229e4 <_ZN5Motor5DriveEff+0x1fc>
 80229d8:	2200      	movs	r2, #0
 80229da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80229de:	481b      	ldr	r0, [pc, #108]	; (8022a4c <_ZN5Motor5DriveEff+0x264>)
 80229e0:	f002 fea8 	bl	8025734 <HAL_GPIO_WritePin>

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, count_l);
 80229e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80229e8:	4b19      	ldr	r3, [pc, #100]	; (8022a50 <_ZN5Motor5DriveEff+0x268>)
 80229ea:	681b      	ldr	r3, [r3, #0]
 80229ec:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, count_r);
 80229ee:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80229f2:	4b17      	ldr	r3, [pc, #92]	; (8022a50 <_ZN5Motor5DriveEff+0x268>)
 80229f4:	681b      	ldr	r3, [r3, #0]
 80229f6:	641a      	str	r2, [r3, #64]	; 0x40

#ifdef DEBUG_MODE
    g_motor_compare_l = count_l;
 80229f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80229fc:	4b15      	ldr	r3, [pc, #84]	; (8022a54 <_ZN5Motor5DriveEff+0x26c>)
 80229fe:	801a      	strh	r2, [r3, #0]
    g_motor_compare_r = count_r;
 8022a00:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8022a04:	4b14      	ldr	r3, [pc, #80]	; (8022a58 <_ZN5Motor5DriveEff+0x270>)
 8022a06:	801a      	strh	r2, [r3, #0]
#endif // DEBUG_MODE
 8022a08:	bf00      	nop
 8022a0a:	3728      	adds	r7, #40	; 0x28
 8022a0c:	46bd      	mov	sp, r7
 8022a0e:	bd80      	pop	{r7, pc}
 8022a10:	cccccccd 	.word	0xcccccccd
 8022a14:	3feccccc 	.word	0x3feccccc
 8022a18:	cccccccd 	.word	0xcccccccd
 8022a1c:	bfeccccc 	.word	0xbfeccccc
 8022a20:	200004b8 	.word	0x200004b8
 8022a24:	200004bc 	.word	0x200004bc
 8022a28:	3f666666 	.word	0x3f666666
 8022a2c:	bf666666 	.word	0xbf666666
 8022a30:	200004c0 	.word	0x200004c0
 8022a34:	200004c4 	.word	0x200004c4
 8022a38:	200004c8 	.word	0x200004c8
 8022a3c:	bf800000 	.word	0xbf800000
 8022a40:	200004cc 	.word	0x200004cc
 8022a44:	200004d0 	.word	0x200004d0
 8022a48:	44832000 	.word	0x44832000
 8022a4c:	40020000 	.word	0x40020000
 8022a50:	20000aec 	.word	0x20000aec
 8022a54:	200004d4 	.word	0x200004d4
 8022a58:	200004d6 	.word	0x200004d6

08022a5c <_ZN12RotarySwitch5StateEv>:
#include "rotary_switch.hpp"

uint8_t RotarySwitch::State()
{
 8022a5c:	b580      	push	{r7, lr}
 8022a5e:	b084      	sub	sp, #16
 8022a60:	af00      	add	r7, sp, #0
 8022a62:	6078      	str	r0, [r7, #4]
    uint8_t switch_state = 0x00;
 8022a64:	2300      	movs	r3, #0
 8022a66:	73fb      	strb	r3, [r7, #15]

    if(PIN_1 == 0) switch_state |= 0x01;
 8022a68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8022a6c:	4821      	ldr	r0, [pc, #132]	; (8022af4 <_ZN12RotarySwitch5StateEv+0x98>)
 8022a6e:	f002 fe49 	bl	8025704 <HAL_GPIO_ReadPin>
 8022a72:	4603      	mov	r3, r0
 8022a74:	2b00      	cmp	r3, #0
 8022a76:	bf0c      	ite	eq
 8022a78:	2301      	moveq	r3, #1
 8022a7a:	2300      	movne	r3, #0
 8022a7c:	b2db      	uxtb	r3, r3
 8022a7e:	2b00      	cmp	r3, #0
 8022a80:	d003      	beq.n	8022a8a <_ZN12RotarySwitch5StateEv+0x2e>
 8022a82:	7bfb      	ldrb	r3, [r7, #15]
 8022a84:	f043 0301 	orr.w	r3, r3, #1
 8022a88:	73fb      	strb	r3, [r7, #15]
    if(PIN_2 == 0) switch_state |= 0x02;
 8022a8a:	2104      	movs	r1, #4
 8022a8c:	481a      	ldr	r0, [pc, #104]	; (8022af8 <_ZN12RotarySwitch5StateEv+0x9c>)
 8022a8e:	f002 fe39 	bl	8025704 <HAL_GPIO_ReadPin>
 8022a92:	4603      	mov	r3, r0
 8022a94:	2b00      	cmp	r3, #0
 8022a96:	bf0c      	ite	eq
 8022a98:	2301      	moveq	r3, #1
 8022a9a:	2300      	movne	r3, #0
 8022a9c:	b2db      	uxtb	r3, r3
 8022a9e:	2b00      	cmp	r3, #0
 8022aa0:	d003      	beq.n	8022aaa <_ZN12RotarySwitch5StateEv+0x4e>
 8022aa2:	7bfb      	ldrb	r3, [r7, #15]
 8022aa4:	f043 0302 	orr.w	r3, r3, #2
 8022aa8:	73fb      	strb	r3, [r7, #15]
    if(PIN_4 == 0) switch_state |= 0x04;
 8022aaa:	2102      	movs	r1, #2
 8022aac:	4812      	ldr	r0, [pc, #72]	; (8022af8 <_ZN12RotarySwitch5StateEv+0x9c>)
 8022aae:	f002 fe29 	bl	8025704 <HAL_GPIO_ReadPin>
 8022ab2:	4603      	mov	r3, r0
 8022ab4:	2b00      	cmp	r3, #0
 8022ab6:	bf0c      	ite	eq
 8022ab8:	2301      	moveq	r3, #1
 8022aba:	2300      	movne	r3, #0
 8022abc:	b2db      	uxtb	r3, r3
 8022abe:	2b00      	cmp	r3, #0
 8022ac0:	d003      	beq.n	8022aca <_ZN12RotarySwitch5StateEv+0x6e>
 8022ac2:	7bfb      	ldrb	r3, [r7, #15]
 8022ac4:	f043 0304 	orr.w	r3, r3, #4
 8022ac8:	73fb      	strb	r3, [r7, #15]
    if(PIN_8 == 0) switch_state |= 0x08;
 8022aca:	2101      	movs	r1, #1
 8022acc:	480a      	ldr	r0, [pc, #40]	; (8022af8 <_ZN12RotarySwitch5StateEv+0x9c>)
 8022ace:	f002 fe19 	bl	8025704 <HAL_GPIO_ReadPin>
 8022ad2:	4603      	mov	r3, r0
 8022ad4:	2b00      	cmp	r3, #0
 8022ad6:	bf0c      	ite	eq
 8022ad8:	2301      	moveq	r3, #1
 8022ada:	2300      	movne	r3, #0
 8022adc:	b2db      	uxtb	r3, r3
 8022ade:	2b00      	cmp	r3, #0
 8022ae0:	d003      	beq.n	8022aea <_ZN12RotarySwitch5StateEv+0x8e>
 8022ae2:	7bfb      	ldrb	r3, [r7, #15]
 8022ae4:	f043 0308 	orr.w	r3, r3, #8
 8022ae8:	73fb      	strb	r3, [r7, #15]

    return switch_state;
 8022aea:	7bfb      	ldrb	r3, [r7, #15]
 8022aec:	4618      	mov	r0, r3
 8022aee:	3710      	adds	r7, #16
 8022af0:	46bd      	mov	sp, r7
 8022af2:	bd80      	pop	{r7, pc}
 8022af4:	40020000 	.word	0x40020000
 8022af8:	40020400 	.word	0x40020400

08022afc <_ZN10SideSensorC1Ev>:
#include "side_sensor.hpp"

SideSensor::SideSensor() : read_state_flags_(0)
 8022afc:	b480      	push	{r7}
 8022afe:	b083      	sub	sp, #12
 8022b00:	af00      	add	r7, sp, #0
 8022b02:	6078      	str	r0, [r7, #4]
                         , write_state_flags_(0)
                         , exception_flags_(0)
                         , master_count_(0)
                         , goal_marker_count_(0)
                         , corner_marker_count_(0)
                         , cross_line_count_(0) {}
 8022b04:	687b      	ldr	r3, [r7, #4]
 8022b06:	2200      	movs	r2, #0
 8022b08:	701a      	strb	r2, [r3, #0]
 8022b0a:	687b      	ldr	r3, [r7, #4]
 8022b0c:	2200      	movs	r2, #0
 8022b0e:	705a      	strb	r2, [r3, #1]
 8022b10:	687b      	ldr	r3, [r7, #4]
 8022b12:	2200      	movs	r2, #0
 8022b14:	709a      	strb	r2, [r3, #2]
 8022b16:	687b      	ldr	r3, [r7, #4]
 8022b18:	2200      	movs	r2, #0
 8022b1a:	70da      	strb	r2, [r3, #3]
 8022b1c:	687b      	ldr	r3, [r7, #4]
 8022b1e:	2200      	movs	r2, #0
 8022b20:	711a      	strb	r2, [r3, #4]
 8022b22:	687b      	ldr	r3, [r7, #4]
 8022b24:	2200      	movs	r2, #0
 8022b26:	715a      	strb	r2, [r3, #5]
 8022b28:	687b      	ldr	r3, [r7, #4]
 8022b2a:	2200      	movs	r2, #0
 8022b2c:	719a      	strb	r2, [r3, #6]
 8022b2e:	687b      	ldr	r3, [r7, #4]
 8022b30:	4618      	mov	r0, r3
 8022b32:	370c      	adds	r7, #12
 8022b34:	46bd      	mov	sp, r7
 8022b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b3a:	4770      	bx	lr

08022b3c <_ZN10SideSensor11UpdateStateEv>:

void SideSensor::UpdateState()
{
 8022b3c:	b580      	push	{r7, lr}
 8022b3e:	b084      	sub	sp, #16
 8022b40:	af00      	add	r7, sp, #0
 8022b42:	6078      	str	r0, [r7, #4]
    uint8_t io_state = 0xFF; // Lower bits represent the positions of sensors.
 8022b44:	23ff      	movs	r3, #255	; 0xff
 8022b46:	73fb      	strb	r3, [r7, #15]

    if(IO_OUTSIDE_L == 0) io_state &= 0xF7; // 0111
 8022b48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8022b4c:	4849      	ldr	r0, [pc, #292]	; (8022c74 <_ZN10SideSensor11UpdateStateEv+0x138>)
 8022b4e:	f002 fdd9 	bl	8025704 <HAL_GPIO_ReadPin>
 8022b52:	4603      	mov	r3, r0
 8022b54:	2b00      	cmp	r3, #0
 8022b56:	bf0c      	ite	eq
 8022b58:	2301      	moveq	r3, #1
 8022b5a:	2300      	movne	r3, #0
 8022b5c:	b2db      	uxtb	r3, r3
 8022b5e:	2b00      	cmp	r3, #0
 8022b60:	d003      	beq.n	8022b6a <_ZN10SideSensor11UpdateStateEv+0x2e>
 8022b62:	7bfb      	ldrb	r3, [r7, #15]
 8022b64:	f023 0308 	bic.w	r3, r3, #8
 8022b68:	73fb      	strb	r3, [r7, #15]
    if(IO_INSIDE_L == 0)  io_state &= 0xFB; // 1011
 8022b6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8022b6e:	4841      	ldr	r0, [pc, #260]	; (8022c74 <_ZN10SideSensor11UpdateStateEv+0x138>)
 8022b70:	f002 fdc8 	bl	8025704 <HAL_GPIO_ReadPin>
 8022b74:	4603      	mov	r3, r0
 8022b76:	2b00      	cmp	r3, #0
 8022b78:	bf0c      	ite	eq
 8022b7a:	2301      	moveq	r3, #1
 8022b7c:	2300      	movne	r3, #0
 8022b7e:	b2db      	uxtb	r3, r3
 8022b80:	2b00      	cmp	r3, #0
 8022b82:	d003      	beq.n	8022b8c <_ZN10SideSensor11UpdateStateEv+0x50>
 8022b84:	7bfb      	ldrb	r3, [r7, #15]
 8022b86:	f023 0304 	bic.w	r3, r3, #4
 8022b8a:	73fb      	strb	r3, [r7, #15]
    if(IO_INSIDE_R == 0)  io_state &= 0xFD; // 1101
 8022b8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8022b90:	4838      	ldr	r0, [pc, #224]	; (8022c74 <_ZN10SideSensor11UpdateStateEv+0x138>)
 8022b92:	f002 fdb7 	bl	8025704 <HAL_GPIO_ReadPin>
 8022b96:	4603      	mov	r3, r0
 8022b98:	2b00      	cmp	r3, #0
 8022b9a:	bf0c      	ite	eq
 8022b9c:	2301      	moveq	r3, #1
 8022b9e:	2300      	movne	r3, #0
 8022ba0:	b2db      	uxtb	r3, r3
 8022ba2:	2b00      	cmp	r3, #0
 8022ba4:	d003      	beq.n	8022bae <_ZN10SideSensor11UpdateStateEv+0x72>
 8022ba6:	7bfb      	ldrb	r3, [r7, #15]
 8022ba8:	f023 0302 	bic.w	r3, r3, #2
 8022bac:	73fb      	strb	r3, [r7, #15]
    if(IO_OUTSIDE_R == 0) io_state &= 0xFE; // 1110
 8022bae:	2104      	movs	r1, #4
 8022bb0:	4831      	ldr	r0, [pc, #196]	; (8022c78 <_ZN10SideSensor11UpdateStateEv+0x13c>)
 8022bb2:	f002 fda7 	bl	8025704 <HAL_GPIO_ReadPin>
 8022bb6:	4603      	mov	r3, r0
 8022bb8:	2b00      	cmp	r3, #0
 8022bba:	bf0c      	ite	eq
 8022bbc:	2301      	moveq	r3, #1
 8022bbe:	2300      	movne	r3, #0
 8022bc0:	b2db      	uxtb	r3, r3
 8022bc2:	2b00      	cmp	r3, #0
 8022bc4:	d003      	beq.n	8022bce <_ZN10SideSensor11UpdateStateEv+0x92>
 8022bc6:	7bfb      	ldrb	r3, [r7, #15]
 8022bc8:	f023 0301 	bic.w	r3, r3, #1
 8022bcc:	73fb      	strb	r3, [r7, #15]

    read_state_flags_ <<= 4;
 8022bce:	687b      	ldr	r3, [r7, #4]
 8022bd0:	781b      	ldrb	r3, [r3, #0]
 8022bd2:	011b      	lsls	r3, r3, #4
 8022bd4:	b2da      	uxtb	r2, r3
 8022bd6:	687b      	ldr	r3, [r7, #4]
 8022bd8:	701a      	strb	r2, [r3, #0]

    switch(io_state)
 8022bda:	7bfb      	ldrb	r3, [r7, #15]
 8022bdc:	3bf0      	subs	r3, #240	; 0xf0
 8022bde:	2b0f      	cmp	r3, #15
 8022be0:	d842      	bhi.n	8022c68 <_ZN10SideSensor11UpdateStateEv+0x12c>
 8022be2:	a201      	add	r2, pc, #4	; (adr r2, 8022be8 <_ZN10SideSensor11UpdateStateEv+0xac>)
 8022be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022be8:	08022c59 	.word	0x08022c59
 8022bec:	08022c59 	.word	0x08022c59
 8022bf0:	08022c59 	.word	0x08022c59
 8022bf4:	08022c49 	.word	0x08022c49
 8022bf8:	08022c59 	.word	0x08022c59
 8022bfc:	08022c69 	.word	0x08022c69
 8022c00:	08022c59 	.word	0x08022c59
 8022c04:	08022c49 	.word	0x08022c49
 8022c08:	08022c59 	.word	0x08022c59
 8022c0c:	08022c59 	.word	0x08022c59
 8022c10:	08022c69 	.word	0x08022c69
 8022c14:	08022c49 	.word	0x08022c49
 8022c18:	08022c39 	.word	0x08022c39
 8022c1c:	08022c69 	.word	0x08022c69
 8022c20:	08022c69 	.word	0x08022c69
 8022c24:	08022c29 	.word	0x08022c29
    {
        case 0xFF: // 1111
            read_state_flags_ |= 0x08; break;
 8022c28:	687b      	ldr	r3, [r7, #4]
 8022c2a:	781b      	ldrb	r3, [r3, #0]
 8022c2c:	f043 0308 	orr.w	r3, r3, #8
 8022c30:	b2da      	uxtb	r2, r3
 8022c32:	687b      	ldr	r3, [r7, #4]
 8022c34:	701a      	strb	r2, [r3, #0]
 8022c36:	e018      	b.n	8022c6a <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xFC: // 1100  If through goal, increase pattern.
            read_state_flags_ |= 0x04; break;
 8022c38:	687b      	ldr	r3, [r7, #4]
 8022c3a:	781b      	ldrb	r3, [r3, #0]
 8022c3c:	f043 0304 	orr.w	r3, r3, #4
 8022c40:	b2da      	uxtb	r2, r3
 8022c42:	687b      	ldr	r3, [r7, #4]
 8022c44:	701a      	strb	r2, [r3, #0]
 8022c46:	e010      	b.n	8022c6a <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xFB: // 1011
        case 0xF7: // 0111
        case 0xF3: // 0011
            read_state_flags_ |= 0x02; break;
 8022c48:	687b      	ldr	r3, [r7, #4]
 8022c4a:	781b      	ldrb	r3, [r3, #0]
 8022c4c:	f043 0302 	orr.w	r3, r3, #2
 8022c50:	b2da      	uxtb	r2, r3
 8022c52:	687b      	ldr	r3, [r7, #4]
 8022c54:	701a      	strb	r2, [r3, #0]
 8022c56:	e008      	b.n	8022c6a <_ZN10SideSensor11UpdateStateEv+0x12e>
        case 0xF4: // 0100
        case 0xF0: // 0000
        case 0xF1: // 0001
        case 0xF8: // 1000
        case 0xF9: // 1001
            read_state_flags_ |= 0x01; break;
 8022c58:	687b      	ldr	r3, [r7, #4]
 8022c5a:	781b      	ldrb	r3, [r3, #0]
 8022c5c:	f043 0301 	orr.w	r3, r3, #1
 8022c60:	b2da      	uxtb	r2, r3
 8022c62:	687b      	ldr	r3, [r7, #4]
 8022c64:	701a      	strb	r2, [r3, #0]
 8022c66:	e000      	b.n	8022c6a <_ZN10SideSensor11UpdateStateEv+0x12e>
        default: break;
 8022c68:	bf00      	nop
    }
}
 8022c6a:	bf00      	nop
 8022c6c:	3710      	adds	r7, #16
 8022c6e:	46bd      	mov	sp, r7
 8022c70:	bd80      	pop	{r7, pc}
 8022c72:	bf00      	nop
 8022c74:	40020400 	.word	0x40020400
 8022c78:	40020c00 	.word	0x40020c00

08022c7c <_ZN10SideSensor6UpdateEv>:

void SideSensor::Update()
{
 8022c7c:	b580      	push	{r7, lr}
 8022c7e:	b084      	sub	sp, #16
 8022c80:	af00      	add	r7, sp, #0
 8022c82:	6078      	str	r0, [r7, #4]
    uint8_t ignore_flag = exception_flags_ & 0x01;
 8022c84:	687b      	ldr	r3, [r7, #4]
 8022c86:	789b      	ldrb	r3, [r3, #2]
 8022c88:	f003 0301 	and.w	r3, r3, #1
 8022c8c:	73fb      	strb	r3, [r7, #15]

    /* Ignore judgment */
    if(ignore_flag == 0x01)
 8022c8e:	7bfb      	ldrb	r3, [r7, #15]
 8022c90:	2b01      	cmp	r3, #1
 8022c92:	d111      	bne.n	8022cb8 <_ZN10SideSensor6UpdateEv+0x3c>
    {
        if(master_count_ < IGNORE_COUNT) master_count_++;
 8022c94:	687b      	ldr	r3, [r7, #4]
 8022c96:	78db      	ldrb	r3, [r3, #3]
 8022c98:	2b04      	cmp	r3, #4
 8022c9a:	d806      	bhi.n	8022caa <_ZN10SideSensor6UpdateEv+0x2e>
 8022c9c:	687b      	ldr	r3, [r7, #4]
 8022c9e:	78db      	ldrb	r3, [r3, #3]
 8022ca0:	3301      	adds	r3, #1
 8022ca2:	b2da      	uxtb	r2, r3
 8022ca4:	687b      	ldr	r3, [r7, #4]
 8022ca6:	70da      	strb	r2, [r3, #3]
 8022ca8:	e031      	b.n	8022d0e <_ZN10SideSensor6UpdateEv+0x92>
        else exception_flags_ >>= 1; 
 8022caa:	687b      	ldr	r3, [r7, #4]
 8022cac:	789b      	ldrb	r3, [r3, #2]
 8022cae:	105b      	asrs	r3, r3, #1
 8022cb0:	b2da      	uxtb	r2, r3
 8022cb2:	687b      	ldr	r3, [r7, #4]
 8022cb4:	709a      	strb	r2, [r3, #2]
 8022cb6:	e02a      	b.n	8022d0e <_ZN10SideSensor6UpdateEv+0x92>
    }
    else if(ignore_flag == 0x00)
 8022cb8:	7bfb      	ldrb	r3, [r7, #15]
 8022cba:	2b00      	cmp	r3, #0
 8022cbc:	d127      	bne.n	8022d0e <_ZN10SideSensor6UpdateEv+0x92>
    {
        UpdateState();
 8022cbe:	6878      	ldr	r0, [r7, #4]
 8022cc0:	f7ff ff3c 	bl	8022b3c <_ZN10SideSensor11UpdateStateEv>

        uint8_t now_state = read_state_flags_;
 8022cc4:	687b      	ldr	r3, [r7, #4]
 8022cc6:	781b      	ldrb	r3, [r3, #0]
 8022cc8:	73bb      	strb	r3, [r7, #14]
        uint8_t pre_state = (now_state << 4) | (now_state >> 4);
 8022cca:	7bbb      	ldrb	r3, [r7, #14]
 8022ccc:	011b      	lsls	r3, r3, #4
 8022cce:	b25a      	sxtb	r2, r3
 8022cd0:	7bbb      	ldrb	r3, [r7, #14]
 8022cd2:	111b      	asrs	r3, r3, #4
 8022cd4:	b25b      	sxtb	r3, r3
 8022cd6:	4313      	orrs	r3, r2
 8022cd8:	b25b      	sxtb	r3, r3
 8022cda:	737b      	strb	r3, [r7, #13]

        if(pre_state != now_state)
 8022cdc:	7b7a      	ldrb	r2, [r7, #13]
 8022cde:	7bbb      	ldrb	r3, [r7, #14]
 8022ce0:	429a      	cmp	r2, r3
 8022ce2:	d003      	beq.n	8022cec <_ZN10SideSensor6UpdateEv+0x70>
        {
            NoiseTolerance();
 8022ce4:	6878      	ldr	r0, [r7, #4]
 8022ce6:	f000 f819 	bl	8022d1c <_ZN10SideSensor14NoiseToleranceEv>
 8022cea:	e010      	b.n	8022d0e <_ZN10SideSensor6UpdateEv+0x92>
        }
        else if(pre_state == now_state)
 8022cec:	7b7a      	ldrb	r2, [r7, #13]
 8022cee:	7bbb      	ldrb	r3, [r7, #14]
 8022cf0:	429a      	cmp	r2, r3
 8022cf2:	d10c      	bne.n	8022d0e <_ZN10SideSensor6UpdateEv+0x92>
        {
            exception_flags_ &= 0xF3; // noise_count = 0
 8022cf4:	687b      	ldr	r3, [r7, #4]
 8022cf6:	789b      	ldrb	r3, [r3, #2]
 8022cf8:	f023 030c 	bic.w	r3, r3, #12
 8022cfc:	b2da      	uxtb	r2, r3
 8022cfe:	687b      	ldr	r3, [r7, #4]
 8022d00:	709a      	strb	r2, [r3, #2]
            ConfirmState();
 8022d02:	6878      	ldr	r0, [r7, #4]
 8022d04:	f000 f85a 	bl	8022dbc <_ZN10SideSensor12ConfirmStateEv>
            CountUp();
 8022d08:	6878      	ldr	r0, [r7, #4]
 8022d0a:	f000 f8c6 	bl	8022e9a <_ZN10SideSensor7CountUpEv>
        }
    }

#ifdef DEBUG_MODE
    Monitor();
 8022d0e:	6878      	ldr	r0, [r7, #4]
 8022d10:	f000 f984 	bl	802301c <_ZN10SideSensor7MonitorEv>
#endif // DEBUG_MODE
}
 8022d14:	bf00      	nop
 8022d16:	3710      	adds	r7, #16
 8022d18:	46bd      	mov	sp, r7
 8022d1a:	bd80      	pop	{r7, pc}

08022d1c <_ZN10SideSensor14NoiseToleranceEv>:

void SideSensor::NoiseTolerance()
{
 8022d1c:	b580      	push	{r7, lr}
 8022d1e:	b084      	sub	sp, #16
 8022d20:	af00      	add	r7, sp, #0
 8022d22:	6078      	str	r0, [r7, #4]
    uint8_t noise_count = (exception_flags_ & 0x0C) >> 2;
 8022d24:	687b      	ldr	r3, [r7, #4]
 8022d26:	789b      	ldrb	r3, [r3, #2]
 8022d28:	109b      	asrs	r3, r3, #2
 8022d2a:	b2db      	uxtb	r3, r3
 8022d2c:	f003 0303 	and.w	r3, r3, #3
 8022d30:	73fb      	strb	r3, [r7, #15]

    if(noise_count == 0x00)
 8022d32:	7bfb      	ldrb	r3, [r7, #15]
 8022d34:	2b00      	cmp	r3, #0
 8022d36:	d11f      	bne.n	8022d78 <_ZN10SideSensor14NoiseToleranceEv+0x5c>
    {
        /* Update before_noise_state */
        exception_flags_ = (exception_flags_ & 0x0F) | (read_state_flags_ & 0xF0);
 8022d38:	687b      	ldr	r3, [r7, #4]
 8022d3a:	789b      	ldrb	r3, [r3, #2]
 8022d3c:	f003 030f 	and.w	r3, r3, #15
 8022d40:	b2da      	uxtb	r2, r3
 8022d42:	687b      	ldr	r3, [r7, #4]
 8022d44:	781b      	ldrb	r3, [r3, #0]
 8022d46:	f023 030f 	bic.w	r3, r3, #15
 8022d4a:	b2db      	uxtb	r3, r3
 8022d4c:	4313      	orrs	r3, r2
 8022d4e:	b2da      	uxtb	r2, r3
 8022d50:	687b      	ldr	r3, [r7, #4]
 8022d52:	709a      	strb	r2, [r3, #2]
        /* Count up noise_count */
        noise_count++;
 8022d54:	7bfb      	ldrb	r3, [r7, #15]
 8022d56:	3301      	adds	r3, #1
 8022d58:	73fb      	strb	r3, [r7, #15]
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
 8022d5a:	687b      	ldr	r3, [r7, #4]
 8022d5c:	789b      	ldrb	r3, [r3, #2]
 8022d5e:	b25b      	sxtb	r3, r3
 8022d60:	f023 030c 	bic.w	r3, r3, #12
 8022d64:	b25a      	sxtb	r2, r3
 8022d66:	7bfb      	ldrb	r3, [r7, #15]
 8022d68:	009b      	lsls	r3, r3, #2
 8022d6a:	b25b      	sxtb	r3, r3
 8022d6c:	4313      	orrs	r3, r2
 8022d6e:	b25b      	sxtb	r3, r3
 8022d70:	b2da      	uxtb	r2, r3
 8022d72:	687b      	ldr	r3, [r7, #4]
 8022d74:	709a      	strb	r2, [r3, #2]

        ConfirmState();
        CountUp();
    }
    else master_count_ = 0;
}
 8022d76:	e01d      	b.n	8022db4 <_ZN10SideSensor14NoiseToleranceEv+0x98>
    else if(noise_count == 0x01)
 8022d78:	7bfb      	ldrb	r3, [r7, #15]
 8022d7a:	2b01      	cmp	r3, #1
 8022d7c:	d117      	bne.n	8022dae <_ZN10SideSensor14NoiseToleranceEv+0x92>
        noise_count++;
 8022d7e:	7bfb      	ldrb	r3, [r7, #15]
 8022d80:	3301      	adds	r3, #1
 8022d82:	73fb      	strb	r3, [r7, #15]
        exception_flags_ = (exception_flags_ & 0xF3) | (noise_count << 2);
 8022d84:	687b      	ldr	r3, [r7, #4]
 8022d86:	789b      	ldrb	r3, [r3, #2]
 8022d88:	b25b      	sxtb	r3, r3
 8022d8a:	f023 030c 	bic.w	r3, r3, #12
 8022d8e:	b25a      	sxtb	r2, r3
 8022d90:	7bfb      	ldrb	r3, [r7, #15]
 8022d92:	009b      	lsls	r3, r3, #2
 8022d94:	b25b      	sxtb	r3, r3
 8022d96:	4313      	orrs	r3, r2
 8022d98:	b25b      	sxtb	r3, r3
 8022d9a:	b2da      	uxtb	r2, r3
 8022d9c:	687b      	ldr	r3, [r7, #4]
 8022d9e:	709a      	strb	r2, [r3, #2]
        ConfirmState();
 8022da0:	6878      	ldr	r0, [r7, #4]
 8022da2:	f000 f80b 	bl	8022dbc <_ZN10SideSensor12ConfirmStateEv>
        CountUp();
 8022da6:	6878      	ldr	r0, [r7, #4]
 8022da8:	f000 f877 	bl	8022e9a <_ZN10SideSensor7CountUpEv>
}
 8022dac:	e002      	b.n	8022db4 <_ZN10SideSensor14NoiseToleranceEv+0x98>
    else master_count_ = 0;
 8022dae:	687b      	ldr	r3, [r7, #4]
 8022db0:	2200      	movs	r2, #0
 8022db2:	70da      	strb	r2, [r3, #3]
}
 8022db4:	bf00      	nop
 8022db6:	3710      	adds	r7, #16
 8022db8:	46bd      	mov	sp, r7
 8022dba:	bd80      	pop	{r7, pc}

08022dbc <_ZN10SideSensor12ConfirmStateEv>:

void SideSensor::ConfirmState()
{
 8022dbc:	b480      	push	{r7}
 8022dbe:	b085      	sub	sp, #20
 8022dc0:	af00      	add	r7, sp, #0
 8022dc2:	6078      	str	r0, [r7, #4]
    uint8_t before_noise_state = exception_flags_ >> 4;
 8022dc4:	687b      	ldr	r3, [r7, #4]
 8022dc6:	789b      	ldrb	r3, [r3, #2]
 8022dc8:	111b      	asrs	r3, r3, #4
 8022dca:	73bb      	strb	r3, [r7, #14]
    uint8_t now_state = read_state_flags_ & 0x0F;
 8022dcc:	687b      	ldr	r3, [r7, #4]
 8022dce:	781b      	ldrb	r3, [r3, #0]
 8022dd0:	f003 030f 	and.w	r3, r3, #15
 8022dd4:	737b      	strb	r3, [r7, #13]
    uint8_t count = master_count_;
 8022dd6:	687b      	ldr	r3, [r7, #4]
 8022dd8:	78db      	ldrb	r3, [r3, #3]
 8022dda:	73fb      	strb	r3, [r7, #15]

    if(before_noise_state != now_state)
 8022ddc:	7bba      	ldrb	r2, [r7, #14]
 8022dde:	7b7b      	ldrb	r3, [r7, #13]
 8022de0:	429a      	cmp	r2, r3
 8022de2:	d010      	beq.n	8022e06 <_ZN10SideSensor12ConfirmStateEv+0x4a>
    {
        /* Update before_noise_state */
        exception_flags_ = (exception_flags_ & 0x0F) | (now_state << 4);
 8022de4:	687b      	ldr	r3, [r7, #4]
 8022de6:	789b      	ldrb	r3, [r3, #2]
 8022de8:	b25b      	sxtb	r3, r3
 8022dea:	f003 030f 	and.w	r3, r3, #15
 8022dee:	b25a      	sxtb	r2, r3
 8022df0:	7b7b      	ldrb	r3, [r7, #13]
 8022df2:	011b      	lsls	r3, r3, #4
 8022df4:	b25b      	sxtb	r3, r3
 8022df6:	4313      	orrs	r3, r2
 8022df8:	b25b      	sxtb	r3, r3
 8022dfa:	b2da      	uxtb	r2, r3
 8022dfc:	687b      	ldr	r3, [r7, #4]
 8022dfe:	709a      	strb	r2, [r3, #2]
        count = 0;
 8022e00:	2300      	movs	r3, #0
 8022e02:	73fb      	strb	r3, [r7, #15]
 8022e04:	e005      	b.n	8022e12 <_ZN10SideSensor12ConfirmStateEv+0x56>
    }
    else if(count < MAX_INTERRUPT_COUNT) count++;
 8022e06:	7bfb      	ldrb	r3, [r7, #15]
 8022e08:	2bf9      	cmp	r3, #249	; 0xf9
 8022e0a:	d802      	bhi.n	8022e12 <_ZN10SideSensor12ConfirmStateEv+0x56>
 8022e0c:	7bfb      	ldrb	r3, [r7, #15]
 8022e0e:	3301      	adds	r3, #1
 8022e10:	73fb      	strb	r3, [r7, #15]

    master_count_ = count;
 8022e12:	687b      	ldr	r3, [r7, #4]
 8022e14:	7bfa      	ldrb	r2, [r7, #15]
 8022e16:	70da      	strb	r2, [r3, #3]

    if(now_state == 0x08 && count >= BLACK_BLACK_COUNT)
 8022e18:	7b7b      	ldrb	r3, [r7, #13]
 8022e1a:	2b08      	cmp	r3, #8
 8022e1c:	d10d      	bne.n	8022e3a <_ZN10SideSensor12ConfirmStateEv+0x7e>
 8022e1e:	7bfb      	ldrb	r3, [r7, #15]
 8022e20:	2b01      	cmp	r3, #1
 8022e22:	d90a      	bls.n	8022e3a <_ZN10SideSensor12ConfirmStateEv+0x7e>
    {
        write_state_flags_ = (write_state_flags_ & 0xF0) | 0x08;
 8022e24:	687b      	ldr	r3, [r7, #4]
 8022e26:	785b      	ldrb	r3, [r3, #1]
 8022e28:	f023 030f 	bic.w	r3, r3, #15
 8022e2c:	b2db      	uxtb	r3, r3
 8022e2e:	f043 0308 	orr.w	r3, r3, #8
 8022e32:	b2da      	uxtb	r2, r3
 8022e34:	687b      	ldr	r3, [r7, #4]
 8022e36:	705a      	strb	r2, [r3, #1]
 8022e38:	e029      	b.n	8022e8e <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x04 && count >= BLACK_WHITE_COUNT)
 8022e3a:	7b7b      	ldrb	r3, [r7, #13]
 8022e3c:	2b04      	cmp	r3, #4
 8022e3e:	d10a      	bne.n	8022e56 <_ZN10SideSensor12ConfirmStateEv+0x9a>
 8022e40:	7bfb      	ldrb	r3, [r7, #15]
 8022e42:	2b00      	cmp	r3, #0
 8022e44:	d007      	beq.n	8022e56 <_ZN10SideSensor12ConfirmStateEv+0x9a>
    {
        write_state_flags_ |= 0x04;
 8022e46:	687b      	ldr	r3, [r7, #4]
 8022e48:	785b      	ldrb	r3, [r3, #1]
 8022e4a:	f043 0304 	orr.w	r3, r3, #4
 8022e4e:	b2da      	uxtb	r2, r3
 8022e50:	687b      	ldr	r3, [r7, #4]
 8022e52:	705a      	strb	r2, [r3, #1]
 8022e54:	e01b      	b.n	8022e8e <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x02 && count >= WHITE_BLACK_COUNT)
 8022e56:	7b7b      	ldrb	r3, [r7, #13]
 8022e58:	2b02      	cmp	r3, #2
 8022e5a:	d10a      	bne.n	8022e72 <_ZN10SideSensor12ConfirmStateEv+0xb6>
 8022e5c:	7bfb      	ldrb	r3, [r7, #15]
 8022e5e:	2b00      	cmp	r3, #0
 8022e60:	d007      	beq.n	8022e72 <_ZN10SideSensor12ConfirmStateEv+0xb6>
    {
        write_state_flags_ |= 0x02;
 8022e62:	687b      	ldr	r3, [r7, #4]
 8022e64:	785b      	ldrb	r3, [r3, #1]
 8022e66:	f043 0302 	orr.w	r3, r3, #2
 8022e6a:	b2da      	uxtb	r2, r3
 8022e6c:	687b      	ldr	r3, [r7, #4]
 8022e6e:	705a      	strb	r2, [r3, #1]
 8022e70:	e00d      	b.n	8022e8e <_ZN10SideSensor12ConfirmStateEv+0xd2>
    }
    else if(now_state == 0x01 && count >= WHITE_WHITE_COUNT)
 8022e72:	7b7b      	ldrb	r3, [r7, #13]
 8022e74:	2b01      	cmp	r3, #1
 8022e76:	d10a      	bne.n	8022e8e <_ZN10SideSensor12ConfirmStateEv+0xd2>
    {
        write_state_flags_ = (write_state_flags_ & 0xF8) | 0x01;
 8022e78:	687b      	ldr	r3, [r7, #4]
 8022e7a:	785b      	ldrb	r3, [r3, #1]
 8022e7c:	f023 0307 	bic.w	r3, r3, #7
 8022e80:	b2db      	uxtb	r3, r3
 8022e82:	f043 0301 	orr.w	r3, r3, #1
 8022e86:	b2da      	uxtb	r2, r3
 8022e88:	687b      	ldr	r3, [r7, #4]
 8022e8a:	705a      	strb	r2, [r3, #1]
    }
}
 8022e8c:	e7ff      	b.n	8022e8e <_ZN10SideSensor12ConfirmStateEv+0xd2>
 8022e8e:	bf00      	nop
 8022e90:	3714      	adds	r7, #20
 8022e92:	46bd      	mov	sp, r7
 8022e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e98:	4770      	bx	lr

08022e9a <_ZN10SideSensor7CountUpEv>:

void SideSensor::CountUp()
{
 8022e9a:	b480      	push	{r7}
 8022e9c:	b085      	sub	sp, #20
 8022e9e:	af00      	add	r7, sp, #0
 8022ea0:	6078      	str	r0, [r7, #4]
    uint8_t state = write_state_flags_;
 8022ea2:	687b      	ldr	r3, [r7, #4]
 8022ea4:	785b      	ldrb	r3, [r3, #1]
 8022ea6:	73fb      	strb	r3, [r7, #15]
    uint8_t black_flag   = (state & 0x08) >> 3;
 8022ea8:	7bfb      	ldrb	r3, [r7, #15]
 8022eaa:	10db      	asrs	r3, r3, #3
 8022eac:	b2db      	uxtb	r3, r3
 8022eae:	f003 0301 	and.w	r3, r3, #1
 8022eb2:	73bb      	strb	r3, [r7, #14]
    uint8_t goal_flag    = (state & 0x04) >> 2;
 8022eb4:	7bfb      	ldrb	r3, [r7, #15]
 8022eb6:	109b      	asrs	r3, r3, #2
 8022eb8:	b2db      	uxtb	r3, r3
 8022eba:	f003 0301 	and.w	r3, r3, #1
 8022ebe:	737b      	strb	r3, [r7, #13]
    uint8_t corner_flag  = (state & 0x02) >> 1;
 8022ec0:	7bfb      	ldrb	r3, [r7, #15]
 8022ec2:	105b      	asrs	r3, r3, #1
 8022ec4:	b2db      	uxtb	r3, r3
 8022ec6:	f003 0301 	and.w	r3, r3, #1
 8022eca:	733b      	strb	r3, [r7, #12]
    uint8_t cross_flag   =  state & 0x01;
 8022ecc:	7bfb      	ldrb	r3, [r7, #15]
 8022ece:	f003 0301 	and.w	r3, r3, #1
 8022ed2:	72fb      	strb	r3, [r7, #11]
    uint8_t goal_reach   = (state & 0x80) >> 7;
 8022ed4:	7bfb      	ldrb	r3, [r7, #15]
 8022ed6:	09db      	lsrs	r3, r3, #7
 8022ed8:	72bb      	strb	r3, [r7, #10]
    uint8_t corner_reach = (state & 0x40) >> 6;
 8022eda:	7bfb      	ldrb	r3, [r7, #15]
 8022edc:	119b      	asrs	r3, r3, #6
 8022ede:	b2db      	uxtb	r3, r3
 8022ee0:	f003 0301 	and.w	r3, r3, #1
 8022ee4:	727b      	strb	r3, [r7, #9]
    uint8_t cross_reach  = (state & 0x20) >> 5;
 8022ee6:	7bfb      	ldrb	r3, [r7, #15]
 8022ee8:	115b      	asrs	r3, r3, #5
 8022eea:	b2db      	uxtb	r3, r3
 8022eec:	f003 0301 	and.w	r3, r3, #1
 8022ef0:	723b      	strb	r3, [r7, #8]

    if(cross_flag == 0x01 && black_flag == 0x01)
 8022ef2:	7afb      	ldrb	r3, [r7, #11]
 8022ef4:	2b01      	cmp	r3, #1
 8022ef6:	d10b      	bne.n	8022f10 <_ZN10SideSensor7CountUpEv+0x76>
 8022ef8:	7bbb      	ldrb	r3, [r7, #14]
 8022efa:	2b01      	cmp	r3, #1
 8022efc:	d108      	bne.n	8022f10 <_ZN10SideSensor7CountUpEv+0x76>
    {
        state &= 0xF7; // black_flag = false
 8022efe:	7bfb      	ldrb	r3, [r7, #15]
 8022f00:	f023 0308 	bic.w	r3, r3, #8
 8022f04:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 8022f06:	7bfb      	ldrb	r3, [r7, #15]
 8022f08:	f043 0320 	orr.w	r3, r3, #32
 8022f0c:	73fb      	strb	r3, [r7, #15]
 8022f0e:	e02d      	b.n	8022f6c <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_flag == 0x01 && goal_reach == 0x01)
 8022f10:	7afb      	ldrb	r3, [r7, #11]
 8022f12:	2b01      	cmp	r3, #1
 8022f14:	d10b      	bne.n	8022f2e <_ZN10SideSensor7CountUpEv+0x94>
 8022f16:	7abb      	ldrb	r3, [r7, #10]
 8022f18:	2b01      	cmp	r3, #1
 8022f1a:	d108      	bne.n	8022f2e <_ZN10SideSensor7CountUpEv+0x94>
    {
        state &= 0x7F; // goal_reach = false
 8022f1c:	7bfb      	ldrb	r3, [r7, #15]
 8022f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8022f22:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 8022f24:	7bfb      	ldrb	r3, [r7, #15]
 8022f26:	f043 0320 	orr.w	r3, r3, #32
 8022f2a:	73fb      	strb	r3, [r7, #15]
 8022f2c:	e01e      	b.n	8022f6c <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_flag == 0x01 && corner_reach == 0x01)
 8022f2e:	7afb      	ldrb	r3, [r7, #11]
 8022f30:	2b01      	cmp	r3, #1
 8022f32:	d10b      	bne.n	8022f4c <_ZN10SideSensor7CountUpEv+0xb2>
 8022f34:	7a7b      	ldrb	r3, [r7, #9]
 8022f36:	2b01      	cmp	r3, #1
 8022f38:	d108      	bne.n	8022f4c <_ZN10SideSensor7CountUpEv+0xb2>
    {
        state &= 0xBF; // corner_reach = false
 8022f3a:	7bfb      	ldrb	r3, [r7, #15]
 8022f3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8022f40:	73fb      	strb	r3, [r7, #15]
        state |= 0x20; // cross_reach = true
 8022f42:	7bfb      	ldrb	r3, [r7, #15]
 8022f44:	f043 0320 	orr.w	r3, r3, #32
 8022f48:	73fb      	strb	r3, [r7, #15]
 8022f4a:	e00f      	b.n	8022f6c <_ZN10SideSensor7CountUpEv+0xd2>
    }
    else if(cross_reach == 0x01 && black_flag == 0x01)
 8022f4c:	7a3b      	ldrb	r3, [r7, #8]
 8022f4e:	2b01      	cmp	r3, #1
 8022f50:	d10c      	bne.n	8022f6c <_ZN10SideSensor7CountUpEv+0xd2>
 8022f52:	7bbb      	ldrb	r3, [r7, #14]
 8022f54:	2b01      	cmp	r3, #1
 8022f56:	d109      	bne.n	8022f6c <_ZN10SideSensor7CountUpEv+0xd2>
    {
        state &= 0xDF; // cross_reach = false
 8022f58:	7bfb      	ldrb	r3, [r7, #15]
 8022f5a:	f023 0320 	bic.w	r3, r3, #32
 8022f5e:	73fb      	strb	r3, [r7, #15]
        cross_line_count_++;
 8022f60:	687b      	ldr	r3, [r7, #4]
 8022f62:	799b      	ldrb	r3, [r3, #6]
 8022f64:	3301      	adds	r3, #1
 8022f66:	b2da      	uxtb	r2, r3
 8022f68:	687b      	ldr	r3, [r7, #4]
 8022f6a:	719a      	strb	r2, [r3, #6]
    }

    black_flag   = (state & 0x08) >> 3;
 8022f6c:	7bfb      	ldrb	r3, [r7, #15]
 8022f6e:	10db      	asrs	r3, r3, #3
 8022f70:	b2db      	uxtb	r3, r3
 8022f72:	f003 0301 	and.w	r3, r3, #1
 8022f76:	73bb      	strb	r3, [r7, #14]
    goal_reach   = (state & 0x80) >> 7;
 8022f78:	7bfb      	ldrb	r3, [r7, #15]
 8022f7a:	09db      	lsrs	r3, r3, #7
 8022f7c:	72bb      	strb	r3, [r7, #10]
    corner_reach = (state & 0x40) >> 6;
 8022f7e:	7bfb      	ldrb	r3, [r7, #15]
 8022f80:	119b      	asrs	r3, r3, #6
 8022f82:	b2db      	uxtb	r3, r3
 8022f84:	f003 0301 	and.w	r3, r3, #1
 8022f88:	727b      	strb	r3, [r7, #9]
    
    if(goal_flag == 0x01 && black_flag == 0x01)
 8022f8a:	7b7b      	ldrb	r3, [r7, #13]
 8022f8c:	2b01      	cmp	r3, #1
 8022f8e:	d10b      	bne.n	8022fa8 <_ZN10SideSensor7CountUpEv+0x10e>
 8022f90:	7bbb      	ldrb	r3, [r7, #14]
 8022f92:	2b01      	cmp	r3, #1
 8022f94:	d108      	bne.n	8022fa8 <_ZN10SideSensor7CountUpEv+0x10e>
    {
        state &= 0xF7; // black_flag = false
 8022f96:	7bfb      	ldrb	r3, [r7, #15]
 8022f98:	f023 0308 	bic.w	r3, r3, #8
 8022f9c:	73fb      	strb	r3, [r7, #15]
        state |= 0x80; // goal_reach = true
 8022f9e:	7bfb      	ldrb	r3, [r7, #15]
 8022fa0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8022fa4:	73fb      	strb	r3, [r7, #15]
 8022fa6:	e02f      	b.n	8023008 <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(goal_reach == 0x01 && black_flag == 0x01)
 8022fa8:	7abb      	ldrb	r3, [r7, #10]
 8022faa:	2b01      	cmp	r3, #1
 8022fac:	d10d      	bne.n	8022fca <_ZN10SideSensor7CountUpEv+0x130>
 8022fae:	7bbb      	ldrb	r3, [r7, #14]
 8022fb0:	2b01      	cmp	r3, #1
 8022fb2:	d10a      	bne.n	8022fca <_ZN10SideSensor7CountUpEv+0x130>
    {
        state &= 0x7F; // goal_reach = false
 8022fb4:	7bfb      	ldrb	r3, [r7, #15]
 8022fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8022fba:	73fb      	strb	r3, [r7, #15]
        goal_marker_count_++;
 8022fbc:	687b      	ldr	r3, [r7, #4]
 8022fbe:	791b      	ldrb	r3, [r3, #4]
 8022fc0:	3301      	adds	r3, #1
 8022fc2:	b2da      	uxtb	r2, r3
 8022fc4:	687b      	ldr	r3, [r7, #4]
 8022fc6:	711a      	strb	r2, [r3, #4]
 8022fc8:	e01e      	b.n	8023008 <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(corner_flag == 0x01 && black_flag == 0x01)
 8022fca:	7b3b      	ldrb	r3, [r7, #12]
 8022fcc:	2b01      	cmp	r3, #1
 8022fce:	d10b      	bne.n	8022fe8 <_ZN10SideSensor7CountUpEv+0x14e>
 8022fd0:	7bbb      	ldrb	r3, [r7, #14]
 8022fd2:	2b01      	cmp	r3, #1
 8022fd4:	d108      	bne.n	8022fe8 <_ZN10SideSensor7CountUpEv+0x14e>
    {
        state &= 0xF7; // black_flag = false
 8022fd6:	7bfb      	ldrb	r3, [r7, #15]
 8022fd8:	f023 0308 	bic.w	r3, r3, #8
 8022fdc:	73fb      	strb	r3, [r7, #15]
        state |= 0x40; // corner_reach = true
 8022fde:	7bfb      	ldrb	r3, [r7, #15]
 8022fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022fe4:	73fb      	strb	r3, [r7, #15]
 8022fe6:	e00f      	b.n	8023008 <_ZN10SideSensor7CountUpEv+0x16e>
    }
    else if(corner_reach == 0x01 && black_flag == 0x01)
 8022fe8:	7a7b      	ldrb	r3, [r7, #9]
 8022fea:	2b01      	cmp	r3, #1
 8022fec:	d10c      	bne.n	8023008 <_ZN10SideSensor7CountUpEv+0x16e>
 8022fee:	7bbb      	ldrb	r3, [r7, #14]
 8022ff0:	2b01      	cmp	r3, #1
 8022ff2:	d109      	bne.n	8023008 <_ZN10SideSensor7CountUpEv+0x16e>
    {
        state &= 0xBF; // corner_reach = false
 8022ff4:	7bfb      	ldrb	r3, [r7, #15]
 8022ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8022ffa:	73fb      	strb	r3, [r7, #15]
        corner_marker_count_++;
 8022ffc:	687b      	ldr	r3, [r7, #4]
 8022ffe:	795b      	ldrb	r3, [r3, #5]
 8023000:	3301      	adds	r3, #1
 8023002:	b2da      	uxtb	r2, r3
 8023004:	687b      	ldr	r3, [r7, #4]
 8023006:	715a      	strb	r2, [r3, #5]
    }

    write_state_flags_ = state;
 8023008:	687b      	ldr	r3, [r7, #4]
 802300a:	7bfa      	ldrb	r2, [r7, #15]
 802300c:	705a      	strb	r2, [r3, #1]
}
 802300e:	bf00      	nop
 8023010:	3714      	adds	r7, #20
 8023012:	46bd      	mov	sp, r7
 8023014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023018:	4770      	bx	lr
	...

0802301c <_ZN10SideSensor7MonitorEv>:
    return cross_line_count_;
}

#ifdef DEBUG_MODE
void SideSensor::Monitor()
{
 802301c:	b480      	push	{r7}
 802301e:	b083      	sub	sp, #12
 8023020:	af00      	add	r7, sp, #0
 8023022:	6078      	str	r0, [r7, #4]
    /* read_state_flags_ */
    g_side_pre_state = (read_state_flags_ & 0xF0) >> 4;
 8023024:	687b      	ldr	r3, [r7, #4]
 8023026:	781b      	ldrb	r3, [r3, #0]
 8023028:	091b      	lsrs	r3, r3, #4
 802302a:	b2da      	uxtb	r2, r3
 802302c:	4b3a      	ldr	r3, [pc, #232]	; (8023118 <_ZN10SideSensor7MonitorEv+0xfc>)
 802302e:	701a      	strb	r2, [r3, #0]
    g_side_now_state =  read_state_flags_ & 0x0F;
 8023030:	687b      	ldr	r3, [r7, #4]
 8023032:	781b      	ldrb	r3, [r3, #0]
 8023034:	f003 030f 	and.w	r3, r3, #15
 8023038:	b2da      	uxtb	r2, r3
 802303a:	4b38      	ldr	r3, [pc, #224]	; (802311c <_ZN10SideSensor7MonitorEv+0x100>)
 802303c:	701a      	strb	r2, [r3, #0]

    if(g_side_pre_state != g_side_now_state) g_side_change_state_count++;
 802303e:	4b36      	ldr	r3, [pc, #216]	; (8023118 <_ZN10SideSensor7MonitorEv+0xfc>)
 8023040:	781a      	ldrb	r2, [r3, #0]
 8023042:	4b36      	ldr	r3, [pc, #216]	; (802311c <_ZN10SideSensor7MonitorEv+0x100>)
 8023044:	781b      	ldrb	r3, [r3, #0]
 8023046:	429a      	cmp	r2, r3
 8023048:	d004      	beq.n	8023054 <_ZN10SideSensor7MonitorEv+0x38>
 802304a:	4b35      	ldr	r3, [pc, #212]	; (8023120 <_ZN10SideSensor7MonitorEv+0x104>)
 802304c:	681b      	ldr	r3, [r3, #0]
 802304e:	3301      	adds	r3, #1
 8023050:	4a33      	ldr	r2, [pc, #204]	; (8023120 <_ZN10SideSensor7MonitorEv+0x104>)
 8023052:	6013      	str	r3, [r2, #0]

    /* write_state_flags_ upper bit */
    g_side_goal_reach   = (write_state_flags_ & 0x80) >> 7;
 8023054:	687b      	ldr	r3, [r7, #4]
 8023056:	785b      	ldrb	r3, [r3, #1]
 8023058:	09db      	lsrs	r3, r3, #7
 802305a:	b2da      	uxtb	r2, r3
 802305c:	4b31      	ldr	r3, [pc, #196]	; (8023124 <_ZN10SideSensor7MonitorEv+0x108>)
 802305e:	701a      	strb	r2, [r3, #0]
    g_side_corner_reach = (write_state_flags_ & 0x40) >> 6;
 8023060:	687b      	ldr	r3, [r7, #4]
 8023062:	785b      	ldrb	r3, [r3, #1]
 8023064:	119b      	asrs	r3, r3, #6
 8023066:	b2db      	uxtb	r3, r3
 8023068:	f003 0301 	and.w	r3, r3, #1
 802306c:	b2da      	uxtb	r2, r3
 802306e:	4b2e      	ldr	r3, [pc, #184]	; (8023128 <_ZN10SideSensor7MonitorEv+0x10c>)
 8023070:	701a      	strb	r2, [r3, #0]
    g_side_cross_reach  = (write_state_flags_ & 0x20) >> 5;
 8023072:	687b      	ldr	r3, [r7, #4]
 8023074:	785b      	ldrb	r3, [r3, #1]
 8023076:	115b      	asrs	r3, r3, #5
 8023078:	b2db      	uxtb	r3, r3
 802307a:	f003 0301 	and.w	r3, r3, #1
 802307e:	b2da      	uxtb	r2, r3
 8023080:	4b2a      	ldr	r3, [pc, #168]	; (802312c <_ZN10SideSensor7MonitorEv+0x110>)
 8023082:	701a      	strb	r2, [r3, #0]

    /* write_state_flags_ lower bit */
    g_side_black_flag  = (write_state_flags_ & 0x08) >> 3;
 8023084:	687b      	ldr	r3, [r7, #4]
 8023086:	785b      	ldrb	r3, [r3, #1]
 8023088:	10db      	asrs	r3, r3, #3
 802308a:	b2db      	uxtb	r3, r3
 802308c:	f003 0301 	and.w	r3, r3, #1
 8023090:	b2da      	uxtb	r2, r3
 8023092:	4b27      	ldr	r3, [pc, #156]	; (8023130 <_ZN10SideSensor7MonitorEv+0x114>)
 8023094:	701a      	strb	r2, [r3, #0]
    g_side_goal_flag   = (write_state_flags_ & 0x04) >> 2;
 8023096:	687b      	ldr	r3, [r7, #4]
 8023098:	785b      	ldrb	r3, [r3, #1]
 802309a:	109b      	asrs	r3, r3, #2
 802309c:	b2db      	uxtb	r3, r3
 802309e:	f003 0301 	and.w	r3, r3, #1
 80230a2:	b2da      	uxtb	r2, r3
 80230a4:	4b23      	ldr	r3, [pc, #140]	; (8023134 <_ZN10SideSensor7MonitorEv+0x118>)
 80230a6:	701a      	strb	r2, [r3, #0]
    g_side_corner_flag = (write_state_flags_ & 0x02) >> 1;
 80230a8:	687b      	ldr	r3, [r7, #4]
 80230aa:	785b      	ldrb	r3, [r3, #1]
 80230ac:	105b      	asrs	r3, r3, #1
 80230ae:	b2db      	uxtb	r3, r3
 80230b0:	f003 0301 	and.w	r3, r3, #1
 80230b4:	b2da      	uxtb	r2, r3
 80230b6:	4b20      	ldr	r3, [pc, #128]	; (8023138 <_ZN10SideSensor7MonitorEv+0x11c>)
 80230b8:	701a      	strb	r2, [r3, #0]
    g_side_cross_flag  =  write_state_flags_ & 0x01;
 80230ba:	687b      	ldr	r3, [r7, #4]
 80230bc:	785b      	ldrb	r3, [r3, #1]
 80230be:	f003 0301 	and.w	r3, r3, #1
 80230c2:	b2da      	uxtb	r2, r3
 80230c4:	4b1d      	ldr	r3, [pc, #116]	; (802313c <_ZN10SideSensor7MonitorEv+0x120>)
 80230c6:	701a      	strb	r2, [r3, #0]

    /* exception_flags_ */
    g_side_before_noise_state = (exception_flags_ & 0xF0) >> 4;
 80230c8:	687b      	ldr	r3, [r7, #4]
 80230ca:	789b      	ldrb	r3, [r3, #2]
 80230cc:	091b      	lsrs	r3, r3, #4
 80230ce:	b2da      	uxtb	r2, r3
 80230d0:	4b1b      	ldr	r3, [pc, #108]	; (8023140 <_ZN10SideSensor7MonitorEv+0x124>)
 80230d2:	701a      	strb	r2, [r3, #0]
    g_side_noise_count        = (exception_flags_ & 0x0C) >> 2;
 80230d4:	687b      	ldr	r3, [r7, #4]
 80230d6:	789b      	ldrb	r3, [r3, #2]
 80230d8:	109b      	asrs	r3, r3, #2
 80230da:	b2db      	uxtb	r3, r3
 80230dc:	f003 0303 	and.w	r3, r3, #3
 80230e0:	b2da      	uxtb	r2, r3
 80230e2:	4b18      	ldr	r3, [pc, #96]	; (8023144 <_ZN10SideSensor7MonitorEv+0x128>)
 80230e4:	701a      	strb	r2, [r3, #0]
    g_side_ignore_flag        =  exception_flags_ & 0x01;
 80230e6:	687b      	ldr	r3, [r7, #4]
 80230e8:	789b      	ldrb	r3, [r3, #2]
 80230ea:	f003 0301 	and.w	r3, r3, #1
 80230ee:	b2da      	uxtb	r2, r3
 80230f0:	4b15      	ldr	r3, [pc, #84]	; (8023148 <_ZN10SideSensor7MonitorEv+0x12c>)
 80230f2:	701a      	strb	r2, [r3, #0]

    g_goal_count   = goal_marker_count_;
 80230f4:	687b      	ldr	r3, [r7, #4]
 80230f6:	791a      	ldrb	r2, [r3, #4]
 80230f8:	4b14      	ldr	r3, [pc, #80]	; (802314c <_ZN10SideSensor7MonitorEv+0x130>)
 80230fa:	701a      	strb	r2, [r3, #0]
    g_corner_count = corner_marker_count_;
 80230fc:	687b      	ldr	r3, [r7, #4]
 80230fe:	795a      	ldrb	r2, [r3, #5]
 8023100:	4b13      	ldr	r3, [pc, #76]	; (8023150 <_ZN10SideSensor7MonitorEv+0x134>)
 8023102:	701a      	strb	r2, [r3, #0]
    g_cross_count  = cross_line_count_;
 8023104:	687b      	ldr	r3, [r7, #4]
 8023106:	799a      	ldrb	r2, [r3, #6]
 8023108:	4b12      	ldr	r3, [pc, #72]	; (8023154 <_ZN10SideSensor7MonitorEv+0x138>)
 802310a:	701a      	strb	r2, [r3, #0]
}
 802310c:	bf00      	nop
 802310e:	370c      	adds	r7, #12
 8023110:	46bd      	mov	sp, r7
 8023112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023116:	4770      	bx	lr
 8023118:	20000494 	.word	0x20000494
 802311c:	20000495 	.word	0x20000495
 8023120:	20000498 	.word	0x20000498
 8023124:	2000049c 	.word	0x2000049c
 8023128:	2000049d 	.word	0x2000049d
 802312c:	2000049e 	.word	0x2000049e
 8023130:	2000049f 	.word	0x2000049f
 8023134:	200004a0 	.word	0x200004a0
 8023138:	200004a1 	.word	0x200004a1
 802313c:	200004a2 	.word	0x200004a2
 8023140:	200004a3 	.word	0x200004a3
 8023144:	200004a4 	.word	0x200004a4
 8023148:	200004a5 	.word	0x200004a5
 802314c:	200004a6 	.word	0x200004a6
 8023150:	200004a7 	.word	0x200004a7
 8023154:	200004a8 	.word	0x200004a8

08023158 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8023158:	b480      	push	{r7}
 802315a:	b083      	sub	sp, #12
 802315c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802315e:	2300      	movs	r3, #0
 8023160:	607b      	str	r3, [r7, #4]
 8023162:	4b10      	ldr	r3, [pc, #64]	; (80231a4 <HAL_MspInit+0x4c>)
 8023164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023166:	4a0f      	ldr	r2, [pc, #60]	; (80231a4 <HAL_MspInit+0x4c>)
 8023168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802316c:	6453      	str	r3, [r2, #68]	; 0x44
 802316e:	4b0d      	ldr	r3, [pc, #52]	; (80231a4 <HAL_MspInit+0x4c>)
 8023170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8023176:	607b      	str	r3, [r7, #4]
 8023178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 802317a:	2300      	movs	r3, #0
 802317c:	603b      	str	r3, [r7, #0]
 802317e:	4b09      	ldr	r3, [pc, #36]	; (80231a4 <HAL_MspInit+0x4c>)
 8023180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023182:	4a08      	ldr	r2, [pc, #32]	; (80231a4 <HAL_MspInit+0x4c>)
 8023184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8023188:	6413      	str	r3, [r2, #64]	; 0x40
 802318a:	4b06      	ldr	r3, [pc, #24]	; (80231a4 <HAL_MspInit+0x4c>)
 802318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802318e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8023192:	603b      	str	r3, [r7, #0]
 8023194:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8023196:	bf00      	nop
 8023198:	370c      	adds	r7, #12
 802319a:	46bd      	mov	sp, r7
 802319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80231a0:	4770      	bx	lr
 80231a2:	bf00      	nop
 80231a4:	40023800 	.word	0x40023800

080231a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80231a8:	b580      	push	{r7, lr}
 80231aa:	b08a      	sub	sp, #40	; 0x28
 80231ac:	af00      	add	r7, sp, #0
 80231ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80231b0:	f107 0314 	add.w	r3, r7, #20
 80231b4:	2200      	movs	r2, #0
 80231b6:	601a      	str	r2, [r3, #0]
 80231b8:	605a      	str	r2, [r3, #4]
 80231ba:	609a      	str	r2, [r3, #8]
 80231bc:	60da      	str	r2, [r3, #12]
 80231be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80231c0:	687b      	ldr	r3, [r7, #4]
 80231c2:	681b      	ldr	r3, [r3, #0]
 80231c4:	4a3c      	ldr	r2, [pc, #240]	; (80232b8 <HAL_ADC_MspInit+0x110>)
 80231c6:	4293      	cmp	r3, r2
 80231c8:	d171      	bne.n	80232ae <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80231ca:	2300      	movs	r3, #0
 80231cc:	613b      	str	r3, [r7, #16]
 80231ce:	4b3b      	ldr	r3, [pc, #236]	; (80232bc <HAL_ADC_MspInit+0x114>)
 80231d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80231d2:	4a3a      	ldr	r2, [pc, #232]	; (80232bc <HAL_ADC_MspInit+0x114>)
 80231d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80231d8:	6453      	str	r3, [r2, #68]	; 0x44
 80231da:	4b38      	ldr	r3, [pc, #224]	; (80232bc <HAL_ADC_MspInit+0x114>)
 80231dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80231de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80231e2:	613b      	str	r3, [r7, #16]
 80231e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80231e6:	2300      	movs	r3, #0
 80231e8:	60fb      	str	r3, [r7, #12]
 80231ea:	4b34      	ldr	r3, [pc, #208]	; (80232bc <HAL_ADC_MspInit+0x114>)
 80231ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80231ee:	4a33      	ldr	r2, [pc, #204]	; (80232bc <HAL_ADC_MspInit+0x114>)
 80231f0:	f043 0304 	orr.w	r3, r3, #4
 80231f4:	6313      	str	r3, [r2, #48]	; 0x30
 80231f6:	4b31      	ldr	r3, [pc, #196]	; (80232bc <HAL_ADC_MspInit+0x114>)
 80231f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80231fa:	f003 0304 	and.w	r3, r3, #4
 80231fe:	60fb      	str	r3, [r7, #12]
 8023200:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023202:	2300      	movs	r3, #0
 8023204:	60bb      	str	r3, [r7, #8]
 8023206:	4b2d      	ldr	r3, [pc, #180]	; (80232bc <HAL_ADC_MspInit+0x114>)
 8023208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802320a:	4a2c      	ldr	r2, [pc, #176]	; (80232bc <HAL_ADC_MspInit+0x114>)
 802320c:	f043 0301 	orr.w	r3, r3, #1
 8023210:	6313      	str	r3, [r2, #48]	; 0x30
 8023212:	4b2a      	ldr	r3, [pc, #168]	; (80232bc <HAL_ADC_MspInit+0x114>)
 8023214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023216:	f003 0301 	and.w	r3, r3, #1
 802321a:	60bb      	str	r3, [r7, #8]
 802321c:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 802321e:	233f      	movs	r3, #63	; 0x3f
 8023220:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8023222:	2303      	movs	r3, #3
 8023224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023226:	2300      	movs	r3, #0
 8023228:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802322a:	f107 0314 	add.w	r3, r7, #20
 802322e:	4619      	mov	r1, r3
 8023230:	4823      	ldr	r0, [pc, #140]	; (80232c0 <HAL_ADC_MspInit+0x118>)
 8023232:	f002 f8cd 	bl	80253d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8023236:	23ff      	movs	r3, #255	; 0xff
 8023238:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802323a:	2303      	movs	r3, #3
 802323c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802323e:	2300      	movs	r3, #0
 8023240:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023242:	f107 0314 	add.w	r3, r7, #20
 8023246:	4619      	mov	r1, r3
 8023248:	481e      	ldr	r0, [pc, #120]	; (80232c4 <HAL_ADC_MspInit+0x11c>)
 802324a:	f002 f8c1 	bl	80253d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 802324e:	4b1e      	ldr	r3, [pc, #120]	; (80232c8 <HAL_ADC_MspInit+0x120>)
 8023250:	4a1e      	ldr	r2, [pc, #120]	; (80232cc <HAL_ADC_MspInit+0x124>)
 8023252:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8023254:	4b1c      	ldr	r3, [pc, #112]	; (80232c8 <HAL_ADC_MspInit+0x120>)
 8023256:	2200      	movs	r2, #0
 8023258:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 802325a:	4b1b      	ldr	r3, [pc, #108]	; (80232c8 <HAL_ADC_MspInit+0x120>)
 802325c:	2200      	movs	r2, #0
 802325e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8023260:	4b19      	ldr	r3, [pc, #100]	; (80232c8 <HAL_ADC_MspInit+0x120>)
 8023262:	2200      	movs	r2, #0
 8023264:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8023266:	4b18      	ldr	r3, [pc, #96]	; (80232c8 <HAL_ADC_MspInit+0x120>)
 8023268:	f44f 6280 	mov.w	r2, #1024	; 0x400
 802326c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 802326e:	4b16      	ldr	r3, [pc, #88]	; (80232c8 <HAL_ADC_MspInit+0x120>)
 8023270:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8023274:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8023276:	4b14      	ldr	r3, [pc, #80]	; (80232c8 <HAL_ADC_MspInit+0x120>)
 8023278:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 802327c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 802327e:	4b12      	ldr	r3, [pc, #72]	; (80232c8 <HAL_ADC_MspInit+0x120>)
 8023280:	f44f 7280 	mov.w	r2, #256	; 0x100
 8023284:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8023286:	4b10      	ldr	r3, [pc, #64]	; (80232c8 <HAL_ADC_MspInit+0x120>)
 8023288:	2200      	movs	r2, #0
 802328a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 802328c:	4b0e      	ldr	r3, [pc, #56]	; (80232c8 <HAL_ADC_MspInit+0x120>)
 802328e:	2200      	movs	r2, #0
 8023290:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8023292:	480d      	ldr	r0, [pc, #52]	; (80232c8 <HAL_ADC_MspInit+0x120>)
 8023294:	f001 fd2e 	bl	8024cf4 <HAL_DMA_Init>
 8023298:	4603      	mov	r3, r0
 802329a:	2b00      	cmp	r3, #0
 802329c:	d001      	beq.n	80232a2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 802329e:	f7ff fa6f 	bl	8022780 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80232a2:	687b      	ldr	r3, [r7, #4]
 80232a4:	4a08      	ldr	r2, [pc, #32]	; (80232c8 <HAL_ADC_MspInit+0x120>)
 80232a6:	639a      	str	r2, [r3, #56]	; 0x38
 80232a8:	4a07      	ldr	r2, [pc, #28]	; (80232c8 <HAL_ADC_MspInit+0x120>)
 80232aa:	687b      	ldr	r3, [r7, #4]
 80232ac:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80232ae:	bf00      	nop
 80232b0:	3728      	adds	r7, #40	; 0x28
 80232b2:	46bd      	mov	sp, r7
 80232b4:	bd80      	pop	{r7, pc}
 80232b6:	bf00      	nop
 80232b8:	40012000 	.word	0x40012000
 80232bc:	40023800 	.word	0x40023800
 80232c0:	40020800 	.word	0x40020800
 80232c4:	40020000 	.word	0x40020000
 80232c8:	20000a4c 	.word	0x20000a4c
 80232cc:	40026410 	.word	0x40026410

080232d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80232d0:	b580      	push	{r7, lr}
 80232d2:	b08a      	sub	sp, #40	; 0x28
 80232d4:	af00      	add	r7, sp, #0
 80232d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80232d8:	f107 0314 	add.w	r3, r7, #20
 80232dc:	2200      	movs	r2, #0
 80232de:	601a      	str	r2, [r3, #0]
 80232e0:	605a      	str	r2, [r3, #4]
 80232e2:	609a      	str	r2, [r3, #8]
 80232e4:	60da      	str	r2, [r3, #12]
 80232e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80232e8:	687b      	ldr	r3, [r7, #4]
 80232ea:	681b      	ldr	r3, [r3, #0]
 80232ec:	4a19      	ldr	r2, [pc, #100]	; (8023354 <HAL_I2C_MspInit+0x84>)
 80232ee:	4293      	cmp	r3, r2
 80232f0:	d12c      	bne.n	802334c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80232f2:	2300      	movs	r3, #0
 80232f4:	613b      	str	r3, [r7, #16]
 80232f6:	4b18      	ldr	r3, [pc, #96]	; (8023358 <HAL_I2C_MspInit+0x88>)
 80232f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80232fa:	4a17      	ldr	r2, [pc, #92]	; (8023358 <HAL_I2C_MspInit+0x88>)
 80232fc:	f043 0302 	orr.w	r3, r3, #2
 8023300:	6313      	str	r3, [r2, #48]	; 0x30
 8023302:	4b15      	ldr	r3, [pc, #84]	; (8023358 <HAL_I2C_MspInit+0x88>)
 8023304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023306:	f003 0302 	and.w	r3, r3, #2
 802330a:	613b      	str	r3, [r7, #16]
 802330c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 802330e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8023312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8023314:	2312      	movs	r3, #18
 8023316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8023318:	2301      	movs	r3, #1
 802331a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802331c:	2303      	movs	r3, #3
 802331e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8023320:	2304      	movs	r3, #4
 8023322:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023324:	f107 0314 	add.w	r3, r7, #20
 8023328:	4619      	mov	r1, r3
 802332a:	480c      	ldr	r0, [pc, #48]	; (802335c <HAL_I2C_MspInit+0x8c>)
 802332c:	f002 f850 	bl	80253d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8023330:	2300      	movs	r3, #0
 8023332:	60fb      	str	r3, [r7, #12]
 8023334:	4b08      	ldr	r3, [pc, #32]	; (8023358 <HAL_I2C_MspInit+0x88>)
 8023336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023338:	4a07      	ldr	r2, [pc, #28]	; (8023358 <HAL_I2C_MspInit+0x88>)
 802333a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 802333e:	6413      	str	r3, [r2, #64]	; 0x40
 8023340:	4b05      	ldr	r3, [pc, #20]	; (8023358 <HAL_I2C_MspInit+0x88>)
 8023342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023344:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8023348:	60fb      	str	r3, [r7, #12]
 802334a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 802334c:	bf00      	nop
 802334e:	3728      	adds	r7, #40	; 0x28
 8023350:	46bd      	mov	sp, r7
 8023352:	bd80      	pop	{r7, pc}
 8023354:	40005800 	.word	0x40005800
 8023358:	40023800 	.word	0x40023800
 802335c:	40020400 	.word	0x40020400

08023360 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8023360:	b580      	push	{r7, lr}
 8023362:	b08a      	sub	sp, #40	; 0x28
 8023364:	af00      	add	r7, sp, #0
 8023366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023368:	f107 0314 	add.w	r3, r7, #20
 802336c:	2200      	movs	r2, #0
 802336e:	601a      	str	r2, [r3, #0]
 8023370:	605a      	str	r2, [r3, #4]
 8023372:	609a      	str	r2, [r3, #8]
 8023374:	60da      	str	r2, [r3, #12]
 8023376:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8023378:	687b      	ldr	r3, [r7, #4]
 802337a:	681b      	ldr	r3, [r3, #0]
 802337c:	4a19      	ldr	r2, [pc, #100]	; (80233e4 <HAL_SPI_MspInit+0x84>)
 802337e:	4293      	cmp	r3, r2
 8023380:	d12c      	bne.n	80233dc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8023382:	2300      	movs	r3, #0
 8023384:	613b      	str	r3, [r7, #16]
 8023386:	4b18      	ldr	r3, [pc, #96]	; (80233e8 <HAL_SPI_MspInit+0x88>)
 8023388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802338a:	4a17      	ldr	r2, [pc, #92]	; (80233e8 <HAL_SPI_MspInit+0x88>)
 802338c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8023390:	6413      	str	r3, [r2, #64]	; 0x40
 8023392:	4b15      	ldr	r3, [pc, #84]	; (80233e8 <HAL_SPI_MspInit+0x88>)
 8023394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023396:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802339a:	613b      	str	r3, [r7, #16]
 802339c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 802339e:	2300      	movs	r3, #0
 80233a0:	60fb      	str	r3, [r7, #12]
 80233a2:	4b11      	ldr	r3, [pc, #68]	; (80233e8 <HAL_SPI_MspInit+0x88>)
 80233a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80233a6:	4a10      	ldr	r2, [pc, #64]	; (80233e8 <HAL_SPI_MspInit+0x88>)
 80233a8:	f043 0304 	orr.w	r3, r3, #4
 80233ac:	6313      	str	r3, [r2, #48]	; 0x30
 80233ae:	4b0e      	ldr	r3, [pc, #56]	; (80233e8 <HAL_SPI_MspInit+0x88>)
 80233b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80233b2:	f003 0304 	and.w	r3, r3, #4
 80233b6:	60fb      	str	r3, [r7, #12]
 80233b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80233ba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80233be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80233c0:	2302      	movs	r3, #2
 80233c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80233c4:	2300      	movs	r3, #0
 80233c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80233c8:	2303      	movs	r3, #3
 80233ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80233cc:	2306      	movs	r3, #6
 80233ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80233d0:	f107 0314 	add.w	r3, r7, #20
 80233d4:	4619      	mov	r1, r3
 80233d6:	4805      	ldr	r0, [pc, #20]	; (80233ec <HAL_SPI_MspInit+0x8c>)
 80233d8:	f001 fffa 	bl	80253d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80233dc:	bf00      	nop
 80233de:	3728      	adds	r7, #40	; 0x28
 80233e0:	46bd      	mov	sp, r7
 80233e2:	bd80      	pop	{r7, pc}
 80233e4:	40003c00 	.word	0x40003c00
 80233e8:	40023800 	.word	0x40023800
 80233ec:	40020800 	.word	0x40020800

080233f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80233f0:	b480      	push	{r7}
 80233f2:	b087      	sub	sp, #28
 80233f4:	af00      	add	r7, sp, #0
 80233f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80233f8:	687b      	ldr	r3, [r7, #4]
 80233fa:	681b      	ldr	r3, [r3, #0]
 80233fc:	4a1f      	ldr	r2, [pc, #124]	; (802347c <HAL_TIM_PWM_MspInit+0x8c>)
 80233fe:	4293      	cmp	r3, r2
 8023400:	d10e      	bne.n	8023420 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8023402:	2300      	movs	r3, #0
 8023404:	617b      	str	r3, [r7, #20]
 8023406:	4b1e      	ldr	r3, [pc, #120]	; (8023480 <HAL_TIM_PWM_MspInit+0x90>)
 8023408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802340a:	4a1d      	ldr	r2, [pc, #116]	; (8023480 <HAL_TIM_PWM_MspInit+0x90>)
 802340c:	f043 0301 	orr.w	r3, r3, #1
 8023410:	6453      	str	r3, [r2, #68]	; 0x44
 8023412:	4b1b      	ldr	r3, [pc, #108]	; (8023480 <HAL_TIM_PWM_MspInit+0x90>)
 8023414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023416:	f003 0301 	and.w	r3, r3, #1
 802341a:	617b      	str	r3, [r7, #20]
 802341c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 802341e:	e026      	b.n	802346e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8023420:	687b      	ldr	r3, [r7, #4]
 8023422:	681b      	ldr	r3, [r3, #0]
 8023424:	4a17      	ldr	r2, [pc, #92]	; (8023484 <HAL_TIM_PWM_MspInit+0x94>)
 8023426:	4293      	cmp	r3, r2
 8023428:	d10e      	bne.n	8023448 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 802342a:	2300      	movs	r3, #0
 802342c:	613b      	str	r3, [r7, #16]
 802342e:	4b14      	ldr	r3, [pc, #80]	; (8023480 <HAL_TIM_PWM_MspInit+0x90>)
 8023430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023432:	4a13      	ldr	r2, [pc, #76]	; (8023480 <HAL_TIM_PWM_MspInit+0x90>)
 8023434:	f043 0302 	orr.w	r3, r3, #2
 8023438:	6413      	str	r3, [r2, #64]	; 0x40
 802343a:	4b11      	ldr	r3, [pc, #68]	; (8023480 <HAL_TIM_PWM_MspInit+0x90>)
 802343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802343e:	f003 0302 	and.w	r3, r3, #2
 8023442:	613b      	str	r3, [r7, #16]
 8023444:	693b      	ldr	r3, [r7, #16]
}
 8023446:	e012      	b.n	802346e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 8023448:	687b      	ldr	r3, [r7, #4]
 802344a:	681b      	ldr	r3, [r3, #0]
 802344c:	4a0e      	ldr	r2, [pc, #56]	; (8023488 <HAL_TIM_PWM_MspInit+0x98>)
 802344e:	4293      	cmp	r3, r2
 8023450:	d10d      	bne.n	802346e <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8023452:	2300      	movs	r3, #0
 8023454:	60fb      	str	r3, [r7, #12]
 8023456:	4b0a      	ldr	r3, [pc, #40]	; (8023480 <HAL_TIM_PWM_MspInit+0x90>)
 8023458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802345a:	4a09      	ldr	r2, [pc, #36]	; (8023480 <HAL_TIM_PWM_MspInit+0x90>)
 802345c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023460:	6413      	str	r3, [r2, #64]	; 0x40
 8023462:	4b07      	ldr	r3, [pc, #28]	; (8023480 <HAL_TIM_PWM_MspInit+0x90>)
 8023464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802346a:	60fb      	str	r3, [r7, #12]
 802346c:	68fb      	ldr	r3, [r7, #12]
}
 802346e:	bf00      	nop
 8023470:	371c      	adds	r7, #28
 8023472:	46bd      	mov	sp, r7
 8023474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023478:	4770      	bx	lr
 802347a:	bf00      	nop
 802347c:	40010000 	.word	0x40010000
 8023480:	40023800 	.word	0x40023800
 8023484:	40000400 	.word	0x40000400
 8023488:	40001800 	.word	0x40001800

0802348c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 802348c:	b580      	push	{r7, lr}
 802348e:	b088      	sub	sp, #32
 8023490:	af00      	add	r7, sp, #0
 8023492:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8023494:	687b      	ldr	r3, [r7, #4]
 8023496:	681b      	ldr	r3, [r3, #0]
 8023498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802349c:	d116      	bne.n	80234cc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 802349e:	2300      	movs	r3, #0
 80234a0:	61fb      	str	r3, [r7, #28]
 80234a2:	4b40      	ldr	r3, [pc, #256]	; (80235a4 <HAL_TIM_Base_MspInit+0x118>)
 80234a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80234a6:	4a3f      	ldr	r2, [pc, #252]	; (80235a4 <HAL_TIM_Base_MspInit+0x118>)
 80234a8:	f043 0301 	orr.w	r3, r3, #1
 80234ac:	6413      	str	r3, [r2, #64]	; 0x40
 80234ae:	4b3d      	ldr	r3, [pc, #244]	; (80235a4 <HAL_TIM_Base_MspInit+0x118>)
 80234b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80234b2:	f003 0301 	and.w	r3, r3, #1
 80234b6:	61fb      	str	r3, [r7, #28]
 80234b8:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80234ba:	2200      	movs	r2, #0
 80234bc:	2100      	movs	r1, #0
 80234be:	201c      	movs	r0, #28
 80234c0:	f001 fbe1 	bl	8024c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80234c4:	201c      	movs	r0, #28
 80234c6:	f001 fbfa 	bl	8024cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80234ca:	e066      	b.n	802359a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM5)
 80234cc:	687b      	ldr	r3, [r7, #4]
 80234ce:	681b      	ldr	r3, [r3, #0]
 80234d0:	4a35      	ldr	r2, [pc, #212]	; (80235a8 <HAL_TIM_Base_MspInit+0x11c>)
 80234d2:	4293      	cmp	r3, r2
 80234d4:	d116      	bne.n	8023504 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80234d6:	2300      	movs	r3, #0
 80234d8:	61bb      	str	r3, [r7, #24]
 80234da:	4b32      	ldr	r3, [pc, #200]	; (80235a4 <HAL_TIM_Base_MspInit+0x118>)
 80234dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80234de:	4a31      	ldr	r2, [pc, #196]	; (80235a4 <HAL_TIM_Base_MspInit+0x118>)
 80234e0:	f043 0308 	orr.w	r3, r3, #8
 80234e4:	6413      	str	r3, [r2, #64]	; 0x40
 80234e6:	4b2f      	ldr	r3, [pc, #188]	; (80235a4 <HAL_TIM_Base_MspInit+0x118>)
 80234e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80234ea:	f003 0308 	and.w	r3, r3, #8
 80234ee:	61bb      	str	r3, [r7, #24]
 80234f0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80234f2:	2200      	movs	r2, #0
 80234f4:	2100      	movs	r1, #0
 80234f6:	2032      	movs	r0, #50	; 0x32
 80234f8:	f001 fbc5 	bl	8024c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80234fc:	2032      	movs	r0, #50	; 0x32
 80234fe:	f001 fbde 	bl	8024cbe <HAL_NVIC_EnableIRQ>
}
 8023502:	e04a      	b.n	802359a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM6)
 8023504:	687b      	ldr	r3, [r7, #4]
 8023506:	681b      	ldr	r3, [r3, #0]
 8023508:	4a28      	ldr	r2, [pc, #160]	; (80235ac <HAL_TIM_Base_MspInit+0x120>)
 802350a:	4293      	cmp	r3, r2
 802350c:	d116      	bne.n	802353c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 802350e:	2300      	movs	r3, #0
 8023510:	617b      	str	r3, [r7, #20]
 8023512:	4b24      	ldr	r3, [pc, #144]	; (80235a4 <HAL_TIM_Base_MspInit+0x118>)
 8023514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023516:	4a23      	ldr	r2, [pc, #140]	; (80235a4 <HAL_TIM_Base_MspInit+0x118>)
 8023518:	f043 0310 	orr.w	r3, r3, #16
 802351c:	6413      	str	r3, [r2, #64]	; 0x40
 802351e:	4b21      	ldr	r3, [pc, #132]	; (80235a4 <HAL_TIM_Base_MspInit+0x118>)
 8023520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023522:	f003 0310 	and.w	r3, r3, #16
 8023526:	617b      	str	r3, [r7, #20]
 8023528:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 802352a:	2200      	movs	r2, #0
 802352c:	2100      	movs	r1, #0
 802352e:	2036      	movs	r0, #54	; 0x36
 8023530:	f001 fba9 	bl	8024c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8023534:	2036      	movs	r0, #54	; 0x36
 8023536:	f001 fbc2 	bl	8024cbe <HAL_NVIC_EnableIRQ>
}
 802353a:	e02e      	b.n	802359a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 802353c:	687b      	ldr	r3, [r7, #4]
 802353e:	681b      	ldr	r3, [r3, #0]
 8023540:	4a1b      	ldr	r2, [pc, #108]	; (80235b0 <HAL_TIM_Base_MspInit+0x124>)
 8023542:	4293      	cmp	r3, r2
 8023544:	d116      	bne.n	8023574 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8023546:	2300      	movs	r3, #0
 8023548:	613b      	str	r3, [r7, #16]
 802354a:	4b16      	ldr	r3, [pc, #88]	; (80235a4 <HAL_TIM_Base_MspInit+0x118>)
 802354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802354e:	4a15      	ldr	r2, [pc, #84]	; (80235a4 <HAL_TIM_Base_MspInit+0x118>)
 8023550:	f043 0320 	orr.w	r3, r3, #32
 8023554:	6413      	str	r3, [r2, #64]	; 0x40
 8023556:	4b13      	ldr	r3, [pc, #76]	; (80235a4 <HAL_TIM_Base_MspInit+0x118>)
 8023558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802355a:	f003 0320 	and.w	r3, r3, #32
 802355e:	613b      	str	r3, [r7, #16]
 8023560:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8023562:	2200      	movs	r2, #0
 8023564:	2100      	movs	r1, #0
 8023566:	2037      	movs	r0, #55	; 0x37
 8023568:	f001 fb8d 	bl	8024c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 802356c:	2037      	movs	r0, #55	; 0x37
 802356e:	f001 fba6 	bl	8024cbe <HAL_NVIC_EnableIRQ>
}
 8023572:	e012      	b.n	802359a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 8023574:	687b      	ldr	r3, [r7, #4]
 8023576:	681b      	ldr	r3, [r3, #0]
 8023578:	4a0e      	ldr	r2, [pc, #56]	; (80235b4 <HAL_TIM_Base_MspInit+0x128>)
 802357a:	4293      	cmp	r3, r2
 802357c:	d10d      	bne.n	802359a <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 802357e:	2300      	movs	r3, #0
 8023580:	60fb      	str	r3, [r7, #12]
 8023582:	4b08      	ldr	r3, [pc, #32]	; (80235a4 <HAL_TIM_Base_MspInit+0x118>)
 8023584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023586:	4a07      	ldr	r2, [pc, #28]	; (80235a4 <HAL_TIM_Base_MspInit+0x118>)
 8023588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802358c:	6453      	str	r3, [r2, #68]	; 0x44
 802358e:	4b05      	ldr	r3, [pc, #20]	; (80235a4 <HAL_TIM_Base_MspInit+0x118>)
 8023590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023592:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8023596:	60fb      	str	r3, [r7, #12]
 8023598:	68fb      	ldr	r3, [r7, #12]
}
 802359a:	bf00      	nop
 802359c:	3720      	adds	r7, #32
 802359e:	46bd      	mov	sp, r7
 80235a0:	bd80      	pop	{r7, pc}
 80235a2:	bf00      	nop
 80235a4:	40023800 	.word	0x40023800
 80235a8:	40000c00 	.word	0x40000c00
 80235ac:	40001000 	.word	0x40001000
 80235b0:	40001400 	.word	0x40001400
 80235b4:	40014800 	.word	0x40014800

080235b8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80235b8:	b580      	push	{r7, lr}
 80235ba:	b08c      	sub	sp, #48	; 0x30
 80235bc:	af00      	add	r7, sp, #0
 80235be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80235c0:	f107 031c 	add.w	r3, r7, #28
 80235c4:	2200      	movs	r2, #0
 80235c6:	601a      	str	r2, [r3, #0]
 80235c8:	605a      	str	r2, [r3, #4]
 80235ca:	609a      	str	r2, [r3, #8]
 80235cc:	60da      	str	r2, [r3, #12]
 80235ce:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80235d0:	687b      	ldr	r3, [r7, #4]
 80235d2:	681b      	ldr	r3, [r3, #0]
 80235d4:	4a32      	ldr	r2, [pc, #200]	; (80236a0 <HAL_TIM_Encoder_MspInit+0xe8>)
 80235d6:	4293      	cmp	r3, r2
 80235d8:	d12c      	bne.n	8023634 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80235da:	2300      	movs	r3, #0
 80235dc:	61bb      	str	r3, [r7, #24]
 80235de:	4b31      	ldr	r3, [pc, #196]	; (80236a4 <HAL_TIM_Encoder_MspInit+0xec>)
 80235e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80235e2:	4a30      	ldr	r2, [pc, #192]	; (80236a4 <HAL_TIM_Encoder_MspInit+0xec>)
 80235e4:	f043 0304 	orr.w	r3, r3, #4
 80235e8:	6413      	str	r3, [r2, #64]	; 0x40
 80235ea:	4b2e      	ldr	r3, [pc, #184]	; (80236a4 <HAL_TIM_Encoder_MspInit+0xec>)
 80235ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80235ee:	f003 0304 	and.w	r3, r3, #4
 80235f2:	61bb      	str	r3, [r7, #24]
 80235f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80235f6:	2300      	movs	r3, #0
 80235f8:	617b      	str	r3, [r7, #20]
 80235fa:	4b2a      	ldr	r3, [pc, #168]	; (80236a4 <HAL_TIM_Encoder_MspInit+0xec>)
 80235fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80235fe:	4a29      	ldr	r2, [pc, #164]	; (80236a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8023600:	f043 0302 	orr.w	r3, r3, #2
 8023604:	6313      	str	r3, [r2, #48]	; 0x30
 8023606:	4b27      	ldr	r3, [pc, #156]	; (80236a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8023608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802360a:	f003 0302 	and.w	r3, r3, #2
 802360e:	617b      	str	r3, [r7, #20]
 8023610:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8023612:	23c0      	movs	r3, #192	; 0xc0
 8023614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023616:	2302      	movs	r3, #2
 8023618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802361a:	2300      	movs	r3, #0
 802361c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802361e:	2300      	movs	r3, #0
 8023620:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8023622:	2302      	movs	r3, #2
 8023624:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023626:	f107 031c 	add.w	r3, r7, #28
 802362a:	4619      	mov	r1, r3
 802362c:	481e      	ldr	r0, [pc, #120]	; (80236a8 <HAL_TIM_Encoder_MspInit+0xf0>)
 802362e:	f001 fecf 	bl	80253d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8023632:	e030      	b.n	8023696 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8023634:	687b      	ldr	r3, [r7, #4]
 8023636:	681b      	ldr	r3, [r3, #0]
 8023638:	4a1c      	ldr	r2, [pc, #112]	; (80236ac <HAL_TIM_Encoder_MspInit+0xf4>)
 802363a:	4293      	cmp	r3, r2
 802363c:	d12b      	bne.n	8023696 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 802363e:	2300      	movs	r3, #0
 8023640:	613b      	str	r3, [r7, #16]
 8023642:	4b18      	ldr	r3, [pc, #96]	; (80236a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8023644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023646:	4a17      	ldr	r2, [pc, #92]	; (80236a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8023648:	f043 0302 	orr.w	r3, r3, #2
 802364c:	6453      	str	r3, [r2, #68]	; 0x44
 802364e:	4b15      	ldr	r3, [pc, #84]	; (80236a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8023650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023652:	f003 0302 	and.w	r3, r3, #2
 8023656:	613b      	str	r3, [r7, #16]
 8023658:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 802365a:	2300      	movs	r3, #0
 802365c:	60fb      	str	r3, [r7, #12]
 802365e:	4b11      	ldr	r3, [pc, #68]	; (80236a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8023660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023662:	4a10      	ldr	r2, [pc, #64]	; (80236a4 <HAL_TIM_Encoder_MspInit+0xec>)
 8023664:	f043 0304 	orr.w	r3, r3, #4
 8023668:	6313      	str	r3, [r2, #48]	; 0x30
 802366a:	4b0e      	ldr	r3, [pc, #56]	; (80236a4 <HAL_TIM_Encoder_MspInit+0xec>)
 802366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802366e:	f003 0304 	and.w	r3, r3, #4
 8023672:	60fb      	str	r3, [r7, #12]
 8023674:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8023676:	23c0      	movs	r3, #192	; 0xc0
 8023678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802367a:	2302      	movs	r3, #2
 802367c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802367e:	2300      	movs	r3, #0
 8023680:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023682:	2300      	movs	r3, #0
 8023684:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8023686:	2303      	movs	r3, #3
 8023688:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802368a:	f107 031c 	add.w	r3, r7, #28
 802368e:	4619      	mov	r1, r3
 8023690:	4807      	ldr	r0, [pc, #28]	; (80236b0 <HAL_TIM_Encoder_MspInit+0xf8>)
 8023692:	f001 fe9d 	bl	80253d0 <HAL_GPIO_Init>
}
 8023696:	bf00      	nop
 8023698:	3730      	adds	r7, #48	; 0x30
 802369a:	46bd      	mov	sp, r7
 802369c:	bd80      	pop	{r7, pc}
 802369e:	bf00      	nop
 80236a0:	40000800 	.word	0x40000800
 80236a4:	40023800 	.word	0x40023800
 80236a8:	40020400 	.word	0x40020400
 80236ac:	40010400 	.word	0x40010400
 80236b0:	40020800 	.word	0x40020800

080236b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80236b4:	b580      	push	{r7, lr}
 80236b6:	b08c      	sub	sp, #48	; 0x30
 80236b8:	af00      	add	r7, sp, #0
 80236ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80236bc:	f107 031c 	add.w	r3, r7, #28
 80236c0:	2200      	movs	r2, #0
 80236c2:	601a      	str	r2, [r3, #0]
 80236c4:	605a      	str	r2, [r3, #4]
 80236c6:	609a      	str	r2, [r3, #8]
 80236c8:	60da      	str	r2, [r3, #12]
 80236ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80236cc:	687b      	ldr	r3, [r7, #4]
 80236ce:	681b      	ldr	r3, [r3, #0]
 80236d0:	4a59      	ldr	r2, [pc, #356]	; (8023838 <HAL_TIM_MspPostInit+0x184>)
 80236d2:	4293      	cmp	r3, r2
 80236d4:	d11f      	bne.n	8023716 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80236d6:	2300      	movs	r3, #0
 80236d8:	61bb      	str	r3, [r7, #24]
 80236da:	4b58      	ldr	r3, [pc, #352]	; (802383c <HAL_TIM_MspPostInit+0x188>)
 80236dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80236de:	4a57      	ldr	r2, [pc, #348]	; (802383c <HAL_TIM_MspPostInit+0x188>)
 80236e0:	f043 0301 	orr.w	r3, r3, #1
 80236e4:	6313      	str	r3, [r2, #48]	; 0x30
 80236e6:	4b55      	ldr	r3, [pc, #340]	; (802383c <HAL_TIM_MspPostInit+0x188>)
 80236e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80236ea:	f003 0301 	and.w	r3, r3, #1
 80236ee:	61bb      	str	r3, [r7, #24]
 80236f0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80236f2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80236f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80236f8:	2302      	movs	r3, #2
 80236fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80236fc:	2300      	movs	r3, #0
 80236fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023700:	2300      	movs	r3, #0
 8023702:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8023704:	2301      	movs	r3, #1
 8023706:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023708:	f107 031c 	add.w	r3, r7, #28
 802370c:	4619      	mov	r1, r3
 802370e:	484c      	ldr	r0, [pc, #304]	; (8023840 <HAL_TIM_MspPostInit+0x18c>)
 8023710:	f001 fe5e 	bl	80253d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8023714:	e08b      	b.n	802382e <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM3)
 8023716:	687b      	ldr	r3, [r7, #4]
 8023718:	681b      	ldr	r3, [r3, #0]
 802371a:	4a4a      	ldr	r2, [pc, #296]	; (8023844 <HAL_TIM_MspPostInit+0x190>)
 802371c:	4293      	cmp	r3, r2
 802371e:	d13d      	bne.n	802379c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8023720:	2300      	movs	r3, #0
 8023722:	617b      	str	r3, [r7, #20]
 8023724:	4b45      	ldr	r3, [pc, #276]	; (802383c <HAL_TIM_MspPostInit+0x188>)
 8023726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023728:	4a44      	ldr	r2, [pc, #272]	; (802383c <HAL_TIM_MspPostInit+0x188>)
 802372a:	f043 0304 	orr.w	r3, r3, #4
 802372e:	6313      	str	r3, [r2, #48]	; 0x30
 8023730:	4b42      	ldr	r3, [pc, #264]	; (802383c <HAL_TIM_MspPostInit+0x188>)
 8023732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023734:	f003 0304 	and.w	r3, r3, #4
 8023738:	617b      	str	r3, [r7, #20]
 802373a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 802373c:	2300      	movs	r3, #0
 802373e:	613b      	str	r3, [r7, #16]
 8023740:	4b3e      	ldr	r3, [pc, #248]	; (802383c <HAL_TIM_MspPostInit+0x188>)
 8023742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023744:	4a3d      	ldr	r2, [pc, #244]	; (802383c <HAL_TIM_MspPostInit+0x188>)
 8023746:	f043 0302 	orr.w	r3, r3, #2
 802374a:	6313      	str	r3, [r2, #48]	; 0x30
 802374c:	4b3b      	ldr	r3, [pc, #236]	; (802383c <HAL_TIM_MspPostInit+0x188>)
 802374e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023750:	f003 0302 	and.w	r3, r3, #2
 8023754:	613b      	str	r3, [r7, #16]
 8023756:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8023758:	f44f 7340 	mov.w	r3, #768	; 0x300
 802375c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802375e:	2302      	movs	r3, #2
 8023760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023762:	2300      	movs	r3, #0
 8023764:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023766:	2300      	movs	r3, #0
 8023768:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 802376a:	2302      	movs	r3, #2
 802376c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802376e:	f107 031c 	add.w	r3, r7, #28
 8023772:	4619      	mov	r1, r3
 8023774:	4834      	ldr	r0, [pc, #208]	; (8023848 <HAL_TIM_MspPostInit+0x194>)
 8023776:	f001 fe2b 	bl	80253d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 802377a:	2330      	movs	r3, #48	; 0x30
 802377c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802377e:	2302      	movs	r3, #2
 8023780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023782:	2300      	movs	r3, #0
 8023784:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8023786:	2300      	movs	r3, #0
 8023788:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 802378a:	2302      	movs	r3, #2
 802378c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802378e:	f107 031c 	add.w	r3, r7, #28
 8023792:	4619      	mov	r1, r3
 8023794:	482d      	ldr	r0, [pc, #180]	; (802384c <HAL_TIM_MspPostInit+0x198>)
 8023796:	f001 fe1b 	bl	80253d0 <HAL_GPIO_Init>
}
 802379a:	e048      	b.n	802382e <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM11)
 802379c:	687b      	ldr	r3, [r7, #4]
 802379e:	681b      	ldr	r3, [r3, #0]
 80237a0:	4a2b      	ldr	r2, [pc, #172]	; (8023850 <HAL_TIM_MspPostInit+0x19c>)
 80237a2:	4293      	cmp	r3, r2
 80237a4:	d11f      	bne.n	80237e6 <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80237a6:	2300      	movs	r3, #0
 80237a8:	60fb      	str	r3, [r7, #12]
 80237aa:	4b24      	ldr	r3, [pc, #144]	; (802383c <HAL_TIM_MspPostInit+0x188>)
 80237ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80237ae:	4a23      	ldr	r2, [pc, #140]	; (802383c <HAL_TIM_MspPostInit+0x188>)
 80237b0:	f043 0302 	orr.w	r3, r3, #2
 80237b4:	6313      	str	r3, [r2, #48]	; 0x30
 80237b6:	4b21      	ldr	r3, [pc, #132]	; (802383c <HAL_TIM_MspPostInit+0x188>)
 80237b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80237ba:	f003 0302 	and.w	r3, r3, #2
 80237be:	60fb      	str	r3, [r7, #12]
 80237c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80237c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80237c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80237c8:	2302      	movs	r3, #2
 80237ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80237cc:	2300      	movs	r3, #0
 80237ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80237d0:	2300      	movs	r3, #0
 80237d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80237d4:	2303      	movs	r3, #3
 80237d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80237d8:	f107 031c 	add.w	r3, r7, #28
 80237dc:	4619      	mov	r1, r3
 80237de:	481b      	ldr	r0, [pc, #108]	; (802384c <HAL_TIM_MspPostInit+0x198>)
 80237e0:	f001 fdf6 	bl	80253d0 <HAL_GPIO_Init>
}
 80237e4:	e023      	b.n	802382e <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM12)
 80237e6:	687b      	ldr	r3, [r7, #4]
 80237e8:	681b      	ldr	r3, [r3, #0]
 80237ea:	4a1a      	ldr	r2, [pc, #104]	; (8023854 <HAL_TIM_MspPostInit+0x1a0>)
 80237ec:	4293      	cmp	r3, r2
 80237ee:	d11e      	bne.n	802382e <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80237f0:	2300      	movs	r3, #0
 80237f2:	60bb      	str	r3, [r7, #8]
 80237f4:	4b11      	ldr	r3, [pc, #68]	; (802383c <HAL_TIM_MspPostInit+0x188>)
 80237f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80237f8:	4a10      	ldr	r2, [pc, #64]	; (802383c <HAL_TIM_MspPostInit+0x188>)
 80237fa:	f043 0302 	orr.w	r3, r3, #2
 80237fe:	6313      	str	r3, [r2, #48]	; 0x30
 8023800:	4b0e      	ldr	r3, [pc, #56]	; (802383c <HAL_TIM_MspPostInit+0x188>)
 8023802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023804:	f003 0302 	and.w	r3, r3, #2
 8023808:	60bb      	str	r3, [r7, #8]
 802380a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 802380c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8023810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023812:	2302      	movs	r3, #2
 8023814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023816:	2300      	movs	r3, #0
 8023818:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802381a:	2300      	movs	r3, #0
 802381c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 802381e:	2309      	movs	r3, #9
 8023820:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8023822:	f107 031c 	add.w	r3, r7, #28
 8023826:	4619      	mov	r1, r3
 8023828:	4808      	ldr	r0, [pc, #32]	; (802384c <HAL_TIM_MspPostInit+0x198>)
 802382a:	f001 fdd1 	bl	80253d0 <HAL_GPIO_Init>
}
 802382e:	bf00      	nop
 8023830:	3730      	adds	r7, #48	; 0x30
 8023832:	46bd      	mov	sp, r7
 8023834:	bd80      	pop	{r7, pc}
 8023836:	bf00      	nop
 8023838:	40010000 	.word	0x40010000
 802383c:	40023800 	.word	0x40023800
 8023840:	40020000 	.word	0x40020000
 8023844:	40000400 	.word	0x40000400
 8023848:	40020800 	.word	0x40020800
 802384c:	40020400 	.word	0x40020400
 8023850:	40014800 	.word	0x40014800
 8023854:	40001800 	.word	0x40001800

08023858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8023858:	b480      	push	{r7}
 802385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 802385c:	e7fe      	b.n	802385c <NMI_Handler+0x4>

0802385e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 802385e:	b480      	push	{r7}
 8023860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8023862:	e7fe      	b.n	8023862 <HardFault_Handler+0x4>

08023864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8023864:	b480      	push	{r7}
 8023866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8023868:	e7fe      	b.n	8023868 <MemManage_Handler+0x4>

0802386a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802386a:	b480      	push	{r7}
 802386c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 802386e:	e7fe      	b.n	802386e <BusFault_Handler+0x4>

08023870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8023870:	b480      	push	{r7}
 8023872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8023874:	e7fe      	b.n	8023874 <UsageFault_Handler+0x4>

08023876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8023876:	b480      	push	{r7}
 8023878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 802387a:	bf00      	nop
 802387c:	46bd      	mov	sp, r7
 802387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023882:	4770      	bx	lr

08023884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8023884:	b480      	push	{r7}
 8023886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8023888:	bf00      	nop
 802388a:	46bd      	mov	sp, r7
 802388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023890:	4770      	bx	lr

08023892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8023892:	b480      	push	{r7}
 8023894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8023896:	bf00      	nop
 8023898:	46bd      	mov	sp, r7
 802389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802389e:	4770      	bx	lr

080238a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80238a0:	b580      	push	{r7, lr}
 80238a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80238a4:	f000 fcde 	bl	8024264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80238a8:	bf00      	nop
 80238aa:	bd80      	pop	{r7, pc}

080238ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80238ac:	b580      	push	{r7, lr}
 80238ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80238b0:	4802      	ldr	r0, [pc, #8]	; (80238bc <TIM2_IRQHandler+0x10>)
 80238b2:	f002 fe9e 	bl	80265f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80238b6:	bf00      	nop
 80238b8:	bd80      	pop	{r7, pc}
 80238ba:	bf00      	nop
 80238bc:	20000b2c 	.word	0x20000b2c

080238c0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80238c0:	b580      	push	{r7, lr}
 80238c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80238c4:	4802      	ldr	r0, [pc, #8]	; (80238d0 <TIM5_IRQHandler+0x10>)
 80238c6:	f002 fe94 	bl	80265f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80238ca:	bf00      	nop
 80238cc:	bd80      	pop	{r7, pc}
 80238ce:	bf00      	nop
 80238d0:	200008ec 	.word	0x200008ec

080238d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80238d4:	b580      	push	{r7, lr}
 80238d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80238d8:	4802      	ldr	r0, [pc, #8]	; (80238e4 <TIM6_DAC_IRQHandler+0x10>)
 80238da:	f002 fe8a 	bl	80265f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80238de:	bf00      	nop
 80238e0:	bd80      	pop	{r7, pc}
 80238e2:	bf00      	nop
 80238e4:	20000aac 	.word	0x20000aac

080238e8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80238e8:	b580      	push	{r7, lr}
 80238ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80238ec:	4802      	ldr	r0, [pc, #8]	; (80238f8 <TIM7_IRQHandler+0x10>)
 80238ee:	f002 fe80 	bl	80265f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80238f2:	bf00      	nop
 80238f4:	bd80      	pop	{r7, pc}
 80238f6:	bf00      	nop
 80238f8:	20000bac 	.word	0x20000bac

080238fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80238fc:	b580      	push	{r7, lr}
 80238fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8023900:	4802      	ldr	r0, [pc, #8]	; (802390c <DMA2_Stream0_IRQHandler+0x10>)
 8023902:	f001 fafd 	bl	8024f00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8023906:	bf00      	nop
 8023908:	bd80      	pop	{r7, pc}
 802390a:	bf00      	nop
 802390c:	20000a4c 	.word	0x20000a4c

08023910 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8023910:	b480      	push	{r7}
 8023912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8023914:	4b08      	ldr	r3, [pc, #32]	; (8023938 <SystemInit+0x28>)
 8023916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802391a:	4a07      	ldr	r2, [pc, #28]	; (8023938 <SystemInit+0x28>)
 802391c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8023920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8023924:	4b04      	ldr	r3, [pc, #16]	; (8023938 <SystemInit+0x28>)
 8023926:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 802392a:	609a      	str	r2, [r3, #8]
#endif
}
 802392c:	bf00      	nop
 802392e:	46bd      	mov	sp, r7
 8023930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023934:	4770      	bx	lr
 8023936:	bf00      	nop
 8023938:	e000ed00 	.word	0xe000ed00

0802393c <_ZN4TestC1EP7EncoderP3LedP10LineSensorP9LineTraceP5MotorP12RotarySwitchP10SideSensorP15VelocityControl>:
#include "test.hpp"

#ifdef TEST_MODE
Test::Test(Encoder *encoder,
 802393c:	b480      	push	{r7}
 802393e:	b085      	sub	sp, #20
 8023940:	af00      	add	r7, sp, #0
 8023942:	60f8      	str	r0, [r7, #12]
 8023944:	60b9      	str	r1, [r7, #8]
 8023946:	607a      	str	r2, [r7, #4]
 8023948:	603b      	str	r3, [r7, #0]
           Motor *motor,
           RotarySwitch *rotary_switch,
           SideSensor *side_sensor,
           VelocityControl *velocity_control)
{
    encoder_ = encoder;
 802394a:	68fb      	ldr	r3, [r7, #12]
 802394c:	68ba      	ldr	r2, [r7, #8]
 802394e:	601a      	str	r2, [r3, #0]
    led_ = led;
 8023950:	68fb      	ldr	r3, [r7, #12]
 8023952:	687a      	ldr	r2, [r7, #4]
 8023954:	605a      	str	r2, [r3, #4]
    line_sensor_ = line_sensor;
 8023956:	68fb      	ldr	r3, [r7, #12]
 8023958:	683a      	ldr	r2, [r7, #0]
 802395a:	609a      	str	r2, [r3, #8]
    line_trace_ = line_trace;
 802395c:	68fb      	ldr	r3, [r7, #12]
 802395e:	69ba      	ldr	r2, [r7, #24]
 8023960:	60da      	str	r2, [r3, #12]
    motor_ = motor;
 8023962:	68fb      	ldr	r3, [r7, #12]
 8023964:	69fa      	ldr	r2, [r7, #28]
 8023966:	611a      	str	r2, [r3, #16]
    rotary_switch_ = rotary_switch;
 8023968:	68fb      	ldr	r3, [r7, #12]
 802396a:	6a3a      	ldr	r2, [r7, #32]
 802396c:	615a      	str	r2, [r3, #20]
    side_sensor_ = side_sensor;
 802396e:	68fb      	ldr	r3, [r7, #12]
 8023970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023972:	619a      	str	r2, [r3, #24]
    velocity_control_ = velocity_control;
 8023974:	68fb      	ldr	r3, [r7, #12]
 8023976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023978:	61da      	str	r2, [r3, #28]
}
 802397a:	68fb      	ldr	r3, [r7, #12]
 802397c:	4618      	mov	r0, r3
 802397e:	3714      	adds	r7, #20
 8023980:	46bd      	mov	sp, r7
 8023982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023986:	4770      	bx	lr

08023988 <_ZN4Test4InitEv>:

void Test::Init()
{
 8023988:	b580      	push	{r7, lr}
 802398a:	b082      	sub	sp, #8
 802398c:	af00      	add	r7, sp, #0
 802398e:	6078      	str	r0, [r7, #4]
    encoder_->Init();
 8023990:	687b      	ldr	r3, [r7, #4]
 8023992:	681b      	ldr	r3, [r3, #0]
 8023994:	4618      	mov	r0, r3
 8023996:	f7fd f991 	bl	8020cbc <_ZN7Encoder4InitEv>
    line_sensor_->Init();
 802399a:	687b      	ldr	r3, [r7, #4]
 802399c:	689b      	ldr	r3, [r3, #8]
 802399e:	4618      	mov	r0, r3
 80239a0:	f7fd fbfa 	bl	8021198 <_ZN10LineSensor4InitEv>
    motor_->Init();
 80239a4:	687b      	ldr	r3, [r7, #4]
 80239a6:	691b      	ldr	r3, [r3, #16]
 80239a8:	4618      	mov	r0, r3
 80239aa:	f7fe feed 	bl	8022788 <_ZN5Motor4InitEv>

    led_->Blink(3, 'Y', 'M');
 80239ae:	687b      	ldr	r3, [r7, #4]
 80239b0:	6858      	ldr	r0, [r3, #4]
 80239b2:	234d      	movs	r3, #77	; 0x4d
 80239b4:	2259      	movs	r2, #89	; 0x59
 80239b6:	2103      	movs	r1, #3
 80239b8:	f7fd fb80 	bl	80210bc <_ZN3Led5BlinkEhcc>
    led_->ColorOrder('X');
 80239bc:	687b      	ldr	r3, [r7, #4]
 80239be:	685b      	ldr	r3, [r3, #4]
 80239c0:	2158      	movs	r1, #88	; 0x58
 80239c2:	4618      	mov	r0, r3
 80239c4:	f7fd fa9e 	bl	8020f04 <_ZN3Led10ColorOrderEc>
    HAL_TIM_Base_Start_IT(&htim7);
 80239c8:	4804      	ldr	r0, [pc, #16]	; (80239dc <_ZN4Test4InitEv+0x54>)
 80239ca:	f002 fcbc 	bl	8026346 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim6);
 80239ce:	4804      	ldr	r0, [pc, #16]	; (80239e0 <_ZN4Test4InitEv+0x58>)
 80239d0:	f002 fcb9 	bl	8026346 <HAL_TIM_Base_Start_IT>
}
 80239d4:	bf00      	nop
 80239d6:	3708      	adds	r7, #8
 80239d8:	46bd      	mov	sp, r7
 80239da:	bd80      	pop	{r7, pc}
 80239dc:	20000bac 	.word	0x20000bac
 80239e0:	20000aac 	.word	0x20000aac

080239e4 <_ZN4Test6Timer7Ev>:

void Test::Timer7()
{
 80239e4:	b580      	push	{r7, lr}
 80239e6:	b082      	sub	sp, #8
 80239e8:	af00      	add	r7, sp, #0
 80239ea:	6078      	str	r0, [r7, #4]
    line_sensor_->StoreConsecutiveBuff();
 80239ec:	687b      	ldr	r3, [r7, #4]
 80239ee:	689b      	ldr	r3, [r3, #8]
 80239f0:	4618      	mov	r0, r3
 80239f2:	f7fd fc0b 	bl	802120c <_ZN10LineSensor20StoreConsecutiveBuffEv>
}
 80239f6:	bf00      	nop
 80239f8:	3708      	adds	r7, #8
 80239fa:	46bd      	mov	sp, r7
 80239fc:	bd80      	pop	{r7, pc}

080239fe <_ZN4Test6Timer6Ev>:

void Test::Timer6()
{
 80239fe:	b580      	push	{r7, lr}
 8023a00:	b082      	sub	sp, #8
 8023a02:	af00      	add	r7, sp, #0
 8023a04:	6078      	str	r0, [r7, #4]
    TestLineSensor();
 8023a06:	6878      	ldr	r0, [r7, #4]
 8023a08:	f000 f810 	bl	8023a2c <_ZN4Test14TestLineSensorEv>
    TestSideSensor();
 8023a0c:	6878      	ldr	r0, [r7, #4]
 8023a0e:	f000 f853 	bl	8023ab8 <_ZN4Test14TestSideSensorEv>
    TestEncoder();
 8023a12:	6878      	ldr	r0, [r7, #4]
 8023a14:	f000 f90e 	bl	8023c34 <_ZN4Test11TestEncoderEv>
    MonitorLog();
 8023a18:	6878      	ldr	r0, [r7, #4]
 8023a1a:	f000 f951 	bl	8023cc0 <_ZN4Test10MonitorLogEv>
    TestMotor();
 8023a1e:	6878      	ldr	r0, [r7, #4]
 8023a20:	f000 f85c 	bl	8023adc <_ZN4Test9TestMotorEv>
}
 8023a24:	bf00      	nop
 8023a26:	3708      	adds	r7, #8
 8023a28:	46bd      	mov	sp, r7
 8023a2a:	bd80      	pop	{r7, pc}

08023a2c <_ZN4Test14TestLineSensorEv>:

void Test::TestLineSensor()
{
 8023a2c:	b580      	push	{r7, lr}
 8023a2e:	b082      	sub	sp, #8
 8023a30:	af00      	add	r7, sp, #0
 8023a32:	6078      	str	r0, [r7, #4]
    line_sensor_->Update();
 8023a34:	687b      	ldr	r3, [r7, #4]
 8023a36:	689b      	ldr	r3, [r3, #8]
 8023a38:	4618      	mov	r0, r3
 8023a3a:	f7fd fcef 	bl	802141c <_ZN10LineSensor6UpdateEv>
    line_sensor_->MonitorLineBuff();
 8023a3e:	687b      	ldr	r3, [r7, #4]
 8023a40:	689b      	ldr	r3, [r3, #8]
 8023a42:	4618      	mov	r0, r3
 8023a44:	f7fd fe92 	bl	802176c <_ZN10LineSensor15MonitorLineBuffEv>
    g_line_diff = line_sensor_->LeftRightDifference();
 8023a48:	687b      	ldr	r3, [r7, #4]
 8023a4a:	689b      	ldr	r3, [r3, #8]
 8023a4c:	4618      	mov	r0, r3
 8023a4e:	f7fd fdcd 	bl	80215ec <_ZN10LineSensor19LeftRightDifferenceEv>
 8023a52:	eef0 7a40 	vmov.f32	s15, s0
 8023a56:	4b15      	ldr	r3, [pc, #84]	; (8023aac <_ZN4Test14TestLineSensorEv+0x80>)
 8023a58:	edc3 7a00 	vstr	s15, [r3]
    g_line_emer = line_sensor_->GetEmergencyStopFlag();
 8023a5c:	687b      	ldr	r3, [r7, #4]
 8023a5e:	689b      	ldr	r3, [r3, #8]
 8023a60:	4618      	mov	r0, r3
 8023a62:	f7fd fe19 	bl	8021698 <_ZN10LineSensor20GetEmergencyStopFlagEv>
 8023a66:	4603      	mov	r3, r0
 8023a68:	461a      	mov	r2, r3
 8023a6a:	4b11      	ldr	r3, [pc, #68]	; (8023ab0 <_ZN4Test14TestLineSensorEv+0x84>)
 8023a6c:	701a      	strb	r2, [r3, #0]
    g_line_calib = line_sensor_->CheckCalibration();
 8023a6e:	687b      	ldr	r3, [r7, #4]
 8023a70:	689b      	ldr	r3, [r3, #8]
 8023a72:	4618      	mov	r0, r3
 8023a74:	f7fd fe1e 	bl	80216b4 <_ZN10LineSensor16CheckCalibrationEv>
 8023a78:	4603      	mov	r3, r0
 8023a7a:	461a      	mov	r2, r3
 8023a7c:	4b0d      	ldr	r3, [pc, #52]	; (8023ab4 <_ZN4Test14TestLineSensorEv+0x88>)
 8023a7e:	701a      	strb	r2, [r3, #0]
    if(g_line_calib) led_->ColorOrder('X');
 8023a80:	4b0c      	ldr	r3, [pc, #48]	; (8023ab4 <_ZN4Test14TestLineSensorEv+0x88>)
 8023a82:	781b      	ldrb	r3, [r3, #0]
 8023a84:	2b00      	cmp	r3, #0
 8023a86:	d006      	beq.n	8023a96 <_ZN4Test14TestLineSensorEv+0x6a>
 8023a88:	687b      	ldr	r3, [r7, #4]
 8023a8a:	685b      	ldr	r3, [r3, #4]
 8023a8c:	2158      	movs	r1, #88	; 0x58
 8023a8e:	4618      	mov	r0, r3
 8023a90:	f7fd fa38 	bl	8020f04 <_ZN3Led10ColorOrderEc>
    else led_->ColorOrder('R');
}
 8023a94:	e005      	b.n	8023aa2 <_ZN4Test14TestLineSensorEv+0x76>
    else led_->ColorOrder('R');
 8023a96:	687b      	ldr	r3, [r7, #4]
 8023a98:	685b      	ldr	r3, [r3, #4]
 8023a9a:	2152      	movs	r1, #82	; 0x52
 8023a9c:	4618      	mov	r0, r3
 8023a9e:	f7fd fa31 	bl	8020f04 <_ZN3Led10ColorOrderEc>
}
 8023aa2:	bf00      	nop
 8023aa4:	3708      	adds	r7, #8
 8023aa6:	46bd      	mov	sp, r7
 8023aa8:	bd80      	pop	{r7, pc}
 8023aaa:	bf00      	nop
 8023aac:	200002f8 	.word	0x200002f8
 8023ab0:	200002fc 	.word	0x200002fc
 8023ab4:	200002fd 	.word	0x200002fd

08023ab8 <_ZN4Test14TestSideSensorEv>:

void Test::TestSideSensor()
{
 8023ab8:	b580      	push	{r7, lr}
 8023aba:	b082      	sub	sp, #8
 8023abc:	af00      	add	r7, sp, #0
 8023abe:	6078      	str	r0, [r7, #4]
    side_sensor_->Update();
 8023ac0:	687b      	ldr	r3, [r7, #4]
 8023ac2:	699b      	ldr	r3, [r3, #24]
 8023ac4:	4618      	mov	r0, r3
 8023ac6:	f7ff f8d9 	bl	8022c7c <_ZN10SideSensor6UpdateEv>
    side_sensor_->Monitor();
 8023aca:	687b      	ldr	r3, [r7, #4]
 8023acc:	699b      	ldr	r3, [r3, #24]
 8023ace:	4618      	mov	r0, r3
 8023ad0:	f7ff faa4 	bl	802301c <_ZN10SideSensor7MonitorEv>
}
 8023ad4:	bf00      	nop
 8023ad6:	3708      	adds	r7, #8
 8023ad8:	46bd      	mov	sp, r7
 8023ada:	bd80      	pop	{r7, pc}

08023adc <_ZN4Test9TestMotorEv>:

void Test::TestMotor()
{
 8023adc:	b580      	push	{r7, lr}
 8023ade:	b082      	sub	sp, #8
 8023ae0:	af00      	add	r7, sp, #0
 8023ae2:	6078      	str	r0, [r7, #4]
    g_switch_state = rotary_switch_->State();
 8023ae4:	687b      	ldr	r3, [r7, #4]
 8023ae6:	695b      	ldr	r3, [r3, #20]
 8023ae8:	4618      	mov	r0, r3
 8023aea:	f7fe ffb7 	bl	8022a5c <_ZN12RotarySwitch5StateEv>
 8023aee:	4603      	mov	r3, r0
 8023af0:	461a      	mov	r2, r3
 8023af2:	4b33      	ldr	r3, [pc, #204]	; (8023bc0 <_ZN4Test9TestMotorEv+0xe4>)
 8023af4:	701a      	strb	r2, [r3, #0]

    switch(g_switch_state)
 8023af6:	4b32      	ldr	r3, [pc, #200]	; (8023bc0 <_ZN4Test9TestMotorEv+0xe4>)
 8023af8:	781b      	ldrb	r3, [r3, #0]
 8023afa:	2b0f      	cmp	r3, #15
 8023afc:	d852      	bhi.n	8023ba4 <_ZN4Test9TestMotorEv+0xc8>
 8023afe:	a201      	add	r2, pc, #4	; (adr r2, 8023b04 <_ZN4Test9TestMotorEv+0x28>)
 8023b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023b04:	08023b55 	.word	0x08023b55
 8023b08:	08023b69 	.word	0x08023b69
 8023b0c:	08023ba5 	.word	0x08023ba5
 8023b10:	08023b7d 	.word	0x08023b7d
 8023b14:	08023b91 	.word	0x08023b91
 8023b18:	08023ba5 	.word	0x08023ba5
 8023b1c:	08023ba5 	.word	0x08023ba5
 8023b20:	08023ba5 	.word	0x08023ba5
 8023b24:	08023ba5 	.word	0x08023ba5
 8023b28:	08023ba5 	.word	0x08023ba5
 8023b2c:	08023ba5 	.word	0x08023ba5
 8023b30:	08023ba5 	.word	0x08023ba5
 8023b34:	08023ba5 	.word	0x08023ba5
 8023b38:	08023ba5 	.word	0x08023ba5
 8023b3c:	08023b45 	.word	0x08023b45
 8023b40:	08023b4d 	.word	0x08023b4d
    {
        case 0x0E: TestVelocityControl(); break;
 8023b44:	6878      	ldr	r0, [r7, #4]
 8023b46:	f000 f89f 	bl	8023c88 <_ZN4Test19TestVelocityControlEv>
 8023b4a:	e035      	b.n	8023bb8 <_ZN4Test9TestMotorEv+0xdc>
        case 0x0F: TestLineTrace();       break;
 8023b4c:	6878      	ldr	r0, [r7, #4]
 8023b4e:	f000 f841 	bl	8023bd4 <_ZN4Test13TestLineTraceEv>
 8023b52:	e031      	b.n	8023bb8 <_ZN4Test9TestMotorEv+0xdc>
        case 0x00: motor_->Drive(0.2, 0);   break;
 8023b54:	687b      	ldr	r3, [r7, #4]
 8023b56:	691b      	ldr	r3, [r3, #16]
 8023b58:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8023bc4 <_ZN4Test9TestMotorEv+0xe8>
 8023b5c:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8023bc8 <_ZN4Test9TestMotorEv+0xec>
 8023b60:	4618      	mov	r0, r3
 8023b62:	f7fe fe41 	bl	80227e8 <_ZN5Motor5DriveEff>
 8023b66:	e027      	b.n	8023bb8 <_ZN4Test9TestMotorEv+0xdc>
        case 0x01: motor_->Drive(-0.2, 0);  break;
 8023b68:	687b      	ldr	r3, [r7, #4]
 8023b6a:	691b      	ldr	r3, [r3, #16]
 8023b6c:	eddf 0a15 	vldr	s1, [pc, #84]	; 8023bc4 <_ZN4Test9TestMotorEv+0xe8>
 8023b70:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8023bcc <_ZN4Test9TestMotorEv+0xf0>
 8023b74:	4618      	mov	r0, r3
 8023b76:	f7fe fe37 	bl	80227e8 <_ZN5Motor5DriveEff>
 8023b7a:	e01d      	b.n	8023bb8 <_ZN4Test9TestMotorEv+0xdc>
        case 0x03: motor_->Drive(1.0, 0);   break;
 8023b7c:	687b      	ldr	r3, [r7, #4]
 8023b7e:	691b      	ldr	r3, [r3, #16]
 8023b80:	eddf 0a10 	vldr	s1, [pc, #64]	; 8023bc4 <_ZN4Test9TestMotorEv+0xe8>
 8023b84:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8023b88:	4618      	mov	r0, r3
 8023b8a:	f7fe fe2d 	bl	80227e8 <_ZN5Motor5DriveEff>
 8023b8e:	e013      	b.n	8023bb8 <_ZN4Test9TestMotorEv+0xdc>
        case 0x04: motor_->Drive(0.5, 0.6); break;
 8023b90:	687b      	ldr	r3, [r7, #4]
 8023b92:	691b      	ldr	r3, [r3, #16]
 8023b94:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8023bd0 <_ZN4Test9TestMotorEv+0xf4>
 8023b98:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8023b9c:	4618      	mov	r0, r3
 8023b9e:	f7fe fe23 	bl	80227e8 <_ZN5Motor5DriveEff>
 8023ba2:	e009      	b.n	8023bb8 <_ZN4Test9TestMotorEv+0xdc>
        default:   motor_->Drive(0, 0);     break;
 8023ba4:	687b      	ldr	r3, [r7, #4]
 8023ba6:	691b      	ldr	r3, [r3, #16]
 8023ba8:	eddf 0a06 	vldr	s1, [pc, #24]	; 8023bc4 <_ZN4Test9TestMotorEv+0xe8>
 8023bac:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8023bc4 <_ZN4Test9TestMotorEv+0xe8>
 8023bb0:	4618      	mov	r0, r3
 8023bb2:	f7fe fe19 	bl	80227e8 <_ZN5Motor5DriveEff>
 8023bb6:	bf00      	nop
    }
}
 8023bb8:	bf00      	nop
 8023bba:	3708      	adds	r7, #8
 8023bbc:	46bd      	mov	sp, r7
 8023bbe:	bd80      	pop	{r7, pc}
 8023bc0:	20000518 	.word	0x20000518
 8023bc4:	00000000 	.word	0x00000000
 8023bc8:	3e4ccccd 	.word	0x3e4ccccd
 8023bcc:	be4ccccd 	.word	0xbe4ccccd
 8023bd0:	3f19999a 	.word	0x3f19999a

08023bd4 <_ZN4Test13TestLineTraceEv>:

void Test::TestLineTrace()
{
 8023bd4:	b580      	push	{r7, lr}
 8023bd6:	b084      	sub	sp, #16
 8023bd8:	af00      	add	r7, sp, #0
 8023bda:	6078      	str	r0, [r7, #4]
    if(g_goal_count < 2)
 8023bdc:	4b13      	ldr	r3, [pc, #76]	; (8023c2c <_ZN4Test13TestLineTraceEv+0x58>)
 8023bde:	781b      	ldrb	r3, [r3, #0]
 8023be0:	2b01      	cmp	r3, #1
 8023be2:	d810      	bhi.n	8023c06 <_ZN4Test13TestLineTraceEv+0x32>
    {
        float rotat = line_trace_->LineTraceOnly();
 8023be4:	687b      	ldr	r3, [r7, #4]
 8023be6:	68db      	ldr	r3, [r3, #12]
 8023be8:	4618      	mov	r0, r3
 8023bea:	f7fd fdf1 	bl	80217d0 <_ZN9LineTrace13LineTraceOnlyEv>
 8023bee:	ed87 0a03 	vstr	s0, [r7, #12]

        motor_->Drive(0, rotat);
 8023bf2:	687b      	ldr	r3, [r7, #4]
 8023bf4:	691b      	ldr	r3, [r3, #16]
 8023bf6:	edd7 0a03 	vldr	s1, [r7, #12]
 8023bfa:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8023c30 <_ZN4Test13TestLineTraceEv+0x5c>
 8023bfe:	4618      	mov	r0, r3
 8023c00:	f7fe fdf2 	bl	80227e8 <_ZN5Motor5DriveEff>
    else
    {
        led_->ColorOrder('Y');
        motor_->Drive(0 ,0);
    }
}
 8023c04:	e00e      	b.n	8023c24 <_ZN4Test13TestLineTraceEv+0x50>
        led_->ColorOrder('Y');
 8023c06:	687b      	ldr	r3, [r7, #4]
 8023c08:	685b      	ldr	r3, [r3, #4]
 8023c0a:	2159      	movs	r1, #89	; 0x59
 8023c0c:	4618      	mov	r0, r3
 8023c0e:	f7fd f979 	bl	8020f04 <_ZN3Led10ColorOrderEc>
        motor_->Drive(0 ,0);
 8023c12:	687b      	ldr	r3, [r7, #4]
 8023c14:	691b      	ldr	r3, [r3, #16]
 8023c16:	eddf 0a06 	vldr	s1, [pc, #24]	; 8023c30 <_ZN4Test13TestLineTraceEv+0x5c>
 8023c1a:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8023c30 <_ZN4Test13TestLineTraceEv+0x5c>
 8023c1e:	4618      	mov	r0, r3
 8023c20:	f7fe fde2 	bl	80227e8 <_ZN5Motor5DriveEff>
}
 8023c24:	bf00      	nop
 8023c26:	3710      	adds	r7, #16
 8023c28:	46bd      	mov	sp, r7
 8023c2a:	bd80      	pop	{r7, pc}
 8023c2c:	200004a6 	.word	0x200004a6
 8023c30:	00000000 	.word	0x00000000

08023c34 <_ZN4Test11TestEncoderEv>:

void Test::TestEncoder()
{
 8023c34:	b580      	push	{r7, lr}
 8023c36:	b082      	sub	sp, #8
 8023c38:	af00      	add	r7, sp, #0
 8023c3a:	6078      	str	r0, [r7, #4]
    encoder_->Update();
 8023c3c:	687b      	ldr	r3, [r7, #4]
 8023c3e:	681b      	ldr	r3, [r3, #0]
 8023c40:	4618      	mov	r0, r3
 8023c42:	f7fd f86d 	bl	8020d20 <_ZN7Encoder6UpdateEv>
    g_velocity = (encoder_->GetDistance()) / TIM6_PERIOD;
 8023c46:	687b      	ldr	r3, [r7, #4]
 8023c48:	681b      	ldr	r3, [r3, #0]
 8023c4a:	4618      	mov	r0, r3
 8023c4c:	f7fd f8fa 	bl	8020e44 <_ZN7Encoder11GetDistanceEv>
 8023c50:	eef0 6a40 	vmov.f32	s13, s0
 8023c54:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 8023c58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8023c5c:	4b08      	ldr	r3, [pc, #32]	; (8023c80 <_ZN4Test11TestEncoderEv+0x4c>)
 8023c5e:	edc3 7a00 	vstr	s15, [r3]
    g_angular_velocity = encoder_->AngularVelocity();
 8023c62:	687b      	ldr	r3, [r7, #4]
 8023c64:	681b      	ldr	r3, [r3, #0]
 8023c66:	4618      	mov	r0, r3
 8023c68:	f7fd f90a 	bl	8020e80 <_ZN7Encoder15AngularVelocityEv>
 8023c6c:	eef0 7a40 	vmov.f32	s15, s0
 8023c70:	4b04      	ldr	r3, [pc, #16]	; (8023c84 <_ZN4Test11TestEncoderEv+0x50>)
 8023c72:	edc3 7a00 	vstr	s15, [r3]
}
 8023c76:	bf00      	nop
 8023c78:	3708      	adds	r7, #8
 8023c7a:	46bd      	mov	sp, r7
 8023c7c:	bd80      	pop	{r7, pc}
 8023c7e:	bf00      	nop
 8023c80:	20000070 	.word	0x20000070
 8023c84:	20000074 	.word	0x20000074

08023c88 <_ZN4Test19TestVelocityControlEv>:

void Test::TestVelocityControl()
{
 8023c88:	b580      	push	{r7, lr}
 8023c8a:	b084      	sub	sp, #16
 8023c8c:	af00      	add	r7, sp, #0
 8023c8e:	6078      	str	r0, [r7, #4]
    float trans = velocity_control_->DeterminePidGain(1.0);
 8023c90:	687b      	ldr	r3, [r7, #4]
 8023c92:	69db      	ldr	r3, [r3, #28]
 8023c94:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8023c98:	4618      	mov	r0, r3
 8023c9a:	f000 f86c 	bl	8023d76 <_ZN15VelocityControl16DeterminePidGainEf>
 8023c9e:	ed87 0a03 	vstr	s0, [r7, #12]

    motor_->Drive(trans, 0);
 8023ca2:	687b      	ldr	r3, [r7, #4]
 8023ca4:	691b      	ldr	r3, [r3, #16]
 8023ca6:	eddf 0a05 	vldr	s1, [pc, #20]	; 8023cbc <_ZN4Test19TestVelocityControlEv+0x34>
 8023caa:	ed97 0a03 	vldr	s0, [r7, #12]
 8023cae:	4618      	mov	r0, r3
 8023cb0:	f7fe fd9a 	bl	80227e8 <_ZN5Motor5DriveEff>
}
 8023cb4:	bf00      	nop
 8023cb6:	3710      	adds	r7, #16
 8023cb8:	46bd      	mov	sp, r7
 8023cba:	bd80      	pop	{r7, pc}
 8023cbc:	00000000 	.word	0x00000000

08023cc0 <_ZN4Test10MonitorLogEv>:

void Test::MonitorLog()
{
 8023cc0:	b590      	push	{r4, r7, lr}
 8023cc2:	b085      	sub	sp, #20
 8023cc4:	af00      	add	r7, sp, #0
 8023cc6:	6078      	str	r0, [r7, #4]
    float distance = encoder_->GetDistanceStack();
 8023cc8:	687b      	ldr	r3, [r7, #4]
 8023cca:	681b      	ldr	r3, [r3, #0]
 8023ccc:	4618      	mov	r0, r3
 8023cce:	f7fd f8c8 	bl	8020e62 <_ZN7Encoder16GetDistanceStackEv>
 8023cd2:	ed87 0a03 	vstr	s0, [r7, #12]

    if(distance < LOGGING_CONST_DISTANCE) return;
 8023cd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8023cda:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8023cde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023ce6:	d428      	bmi.n	8023d3a <_ZN4Test10MonitorLogEv+0x7a>
    encoder_->ResetDistanceStack();
 8023ce8:	687b      	ldr	r3, [r7, #4]
 8023cea:	681b      	ldr	r3, [r3, #0]
 8023cec:	4618      	mov	r0, r3
 8023cee:	f7fd f89b 	bl	8020e28 <_ZN7Encoder18ResetDistanceStackEv>

    static uint16_t log_index = 0;   // Count up when interrupt.

    g_distance_log[log_index] = distance;
 8023cf2:	4b14      	ldr	r3, [pc, #80]	; (8023d44 <_ZN4Test10MonitorLogEv+0x84>)
 8023cf4:	881b      	ldrh	r3, [r3, #0]
 8023cf6:	4a14      	ldr	r2, [pc, #80]	; (8023d48 <_ZN4Test10MonitorLogEv+0x88>)
 8023cf8:	009b      	lsls	r3, r3, #2
 8023cfa:	4413      	add	r3, r2
 8023cfc:	68fa      	ldr	r2, [r7, #12]
 8023cfe:	601a      	str	r2, [r3, #0]
    g_angular_log[log_index] = encoder_->AngularVelocity();
 8023d00:	687b      	ldr	r3, [r7, #4]
 8023d02:	681a      	ldr	r2, [r3, #0]
 8023d04:	4b0f      	ldr	r3, [pc, #60]	; (8023d44 <_ZN4Test10MonitorLogEv+0x84>)
 8023d06:	881b      	ldrh	r3, [r3, #0]
 8023d08:	461c      	mov	r4, r3
 8023d0a:	4610      	mov	r0, r2
 8023d0c:	f7fd f8b8 	bl	8020e80 <_ZN7Encoder15AngularVelocityEv>
 8023d10:	eef0 7a40 	vmov.f32	s15, s0
 8023d14:	4a0d      	ldr	r2, [pc, #52]	; (8023d4c <_ZN4Test10MonitorLogEv+0x8c>)
 8023d16:	00a3      	lsls	r3, r4, #2
 8023d18:	4413      	add	r3, r2
 8023d1a:	edc3 7a00 	vstr	s15, [r3]

    log_index++;
 8023d1e:	4b09      	ldr	r3, [pc, #36]	; (8023d44 <_ZN4Test10MonitorLogEv+0x84>)
 8023d20:	881b      	ldrh	r3, [r3, #0]
 8023d22:	3301      	adds	r3, #1
 8023d24:	b29a      	uxth	r2, r3
 8023d26:	4b07      	ldr	r3, [pc, #28]	; (8023d44 <_ZN4Test10MonitorLogEv+0x84>)
 8023d28:	801a      	strh	r2, [r3, #0]
    if(log_index >= MAX_LOG_INDEX) log_index = 0;
 8023d2a:	4b06      	ldr	r3, [pc, #24]	; (8023d44 <_ZN4Test10MonitorLogEv+0x84>)
 8023d2c:	881b      	ldrh	r3, [r3, #0]
 8023d2e:	2b4f      	cmp	r3, #79	; 0x4f
 8023d30:	d904      	bls.n	8023d3c <_ZN4Test10MonitorLogEv+0x7c>
 8023d32:	4b04      	ldr	r3, [pc, #16]	; (8023d44 <_ZN4Test10MonitorLogEv+0x84>)
 8023d34:	2200      	movs	r2, #0
 8023d36:	801a      	strh	r2, [r3, #0]
 8023d38:	e000      	b.n	8023d3c <_ZN4Test10MonitorLogEv+0x7c>
    if(distance < LOGGING_CONST_DISTANCE) return;
 8023d3a:	bf00      	nop
}
 8023d3c:	3714      	adds	r7, #20
 8023d3e:	46bd      	mov	sp, r7
 8023d40:	bd90      	pop	{r4, r7, pc}
 8023d42:	bf00      	nop
 8023d44:	2000051a 	.word	0x2000051a
 8023d48:	20000078 	.word	0x20000078
 8023d4c:	200001b8 	.word	0x200001b8

08023d50 <_ZN15VelocityControlC1EP7Encoder>:
#include "velocity_control.hpp"
#include "declare_extern.h"

VelocityControl::VelocityControl(Encoder *encoder) : integral_error_(0)
 8023d50:	b480      	push	{r7}
 8023d52:	b083      	sub	sp, #12
 8023d54:	af00      	add	r7, sp, #0
 8023d56:	6078      	str	r0, [r7, #4]
 8023d58:	6039      	str	r1, [r7, #0]
 8023d5a:	687b      	ldr	r3, [r7, #4]
 8023d5c:	f04f 0200 	mov.w	r2, #0
 8023d60:	601a      	str	r2, [r3, #0]
{
    encoder_ = encoder;
 8023d62:	687b      	ldr	r3, [r7, #4]
 8023d64:	683a      	ldr	r2, [r7, #0]
 8023d66:	605a      	str	r2, [r3, #4]
}
 8023d68:	687b      	ldr	r3, [r7, #4]
 8023d6a:	4618      	mov	r0, r3
 8023d6c:	370c      	adds	r7, #12
 8023d6e:	46bd      	mov	sp, r7
 8023d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d74:	4770      	bx	lr

08023d76 <_ZN15VelocityControl16DeterminePidGainEf>:

float VelocityControl::DeterminePidGain(float target_velocity)
{
 8023d76:	b580      	push	{r7, lr}
 8023d78:	b086      	sub	sp, #24
 8023d7a:	af00      	add	r7, sp, #0
 8023d7c:	6078      	str	r0, [r7, #4]
 8023d7e:	ed87 0a00 	vstr	s0, [r7]
    float p_gain = 0, i_gain = 0, d_gain = 0;
 8023d82:	f04f 0300 	mov.w	r3, #0
 8023d86:	617b      	str	r3, [r7, #20]
 8023d88:	f04f 0300 	mov.w	r3, #0
 8023d8c:	613b      	str	r3, [r7, #16]
 8023d8e:	f04f 0300 	mov.w	r3, #0
 8023d92:	60fb      	str	r3, [r7, #12]

    if(target_velocity < MAX_VELOCITY)
 8023d94:	edd7 7a00 	vldr	s15, [r7]
 8023d98:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8023d9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8023da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023da4:	d509      	bpl.n	8023dba <_ZN15VelocityControl16DeterminePidGainEf+0x44>
    {
        p_gain = VELOCITY_P_GAIN;
 8023da6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8023daa:	617b      	str	r3, [r7, #20]
        i_gain = VELOCITY_I_GAIN;
 8023dac:	f04f 0300 	mov.w	r3, #0
 8023db0:	613b      	str	r3, [r7, #16]
        d_gain = VELOCITY_D_GAIN;
 8023db2:	f04f 0300 	mov.w	r3, #0
 8023db6:	60fb      	str	r3, [r7, #12]
 8023db8:	e008      	b.n	8023dcc <_ZN15VelocityControl16DeterminePidGainEf+0x56>
    }
    else // Error handler
    {
        p_gain = 0;
 8023dba:	f04f 0300 	mov.w	r3, #0
 8023dbe:	617b      	str	r3, [r7, #20]
        i_gain = 0;
 8023dc0:	f04f 0300 	mov.w	r3, #0
 8023dc4:	613b      	str	r3, [r7, #16]
        d_gain = 0;
 8023dc6:	f04f 0300 	mov.w	r3, #0
 8023dca:	60fb      	str	r3, [r7, #12]
    }

    return PidControl(target_velocity, p_gain, i_gain, d_gain);
 8023dcc:	edd7 1a03 	vldr	s3, [r7, #12]
 8023dd0:	ed97 1a04 	vldr	s2, [r7, #16]
 8023dd4:	edd7 0a05 	vldr	s1, [r7, #20]
 8023dd8:	ed97 0a00 	vldr	s0, [r7]
 8023ddc:	6878      	ldr	r0, [r7, #4]
 8023dde:	f000 f807 	bl	8023df0 <_ZN15VelocityControl10PidControlEffff>
 8023de2:	eef0 7a40 	vmov.f32	s15, s0
}
 8023de6:	eeb0 0a67 	vmov.f32	s0, s15
 8023dea:	3718      	adds	r7, #24
 8023dec:	46bd      	mov	sp, r7
 8023dee:	bd80      	pop	{r7, pc}

08023df0 <_ZN15VelocityControl10PidControlEffff>:

float VelocityControl::PidControl(float target, float p_gain, float i_gain, float d_gain)
{
 8023df0:	b5b0      	push	{r4, r5, r7, lr}
 8023df2:	b08e      	sub	sp, #56	; 0x38
 8023df4:	af00      	add	r7, sp, #0
 8023df6:	6178      	str	r0, [r7, #20]
 8023df8:	ed87 0a04 	vstr	s0, [r7, #16]
 8023dfc:	edc7 0a03 	vstr	s1, [r7, #12]
 8023e00:	ed87 1a02 	vstr	s2, [r7, #8]
 8023e04:	edc7 1a01 	vstr	s3, [r7, #4]
    float current = encoder_->GetDistance() / TIM6_PERIOD; // [mm/ms]
 8023e08:	697b      	ldr	r3, [r7, #20]
 8023e0a:	685b      	ldr	r3, [r3, #4]
 8023e0c:	4618      	mov	r0, r3
 8023e0e:	f7fd f819 	bl	8020e44 <_ZN7Encoder11GetDistanceEv>
 8023e12:	eef0 6a40 	vmov.f32	s13, s0
 8023e16:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 8023e1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8023e1e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    static float pre_filter = 0.0;
    float filter = pre_filter * (1.0 - VELOCITY_LPF_RATIO) + (current * VELOCITY_LPF_RATIO);
 8023e22:	4b71      	ldr	r3, [pc, #452]	; (8023fe8 <_ZN15VelocityControl10PidControlEffff+0x1f8>)
 8023e24:	681b      	ldr	r3, [r3, #0]
 8023e26:	4618      	mov	r0, r3
 8023e28:	f7fc fa6e 	bl	8020308 <__aeabi_f2d>
 8023e2c:	a368      	add	r3, pc, #416	; (adr r3, 8023fd0 <_ZN15VelocityControl10PidControlEffff+0x1e0>)
 8023e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e32:	f7fc fac1 	bl	80203b8 <__aeabi_dmul>
 8023e36:	4603      	mov	r3, r0
 8023e38:	460c      	mov	r4, r1
 8023e3a:	4625      	mov	r5, r4
 8023e3c:	461c      	mov	r4, r3
 8023e3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8023e40:	f7fc fa62 	bl	8020308 <__aeabi_f2d>
 8023e44:	a364      	add	r3, pc, #400	; (adr r3, 8023fd8 <_ZN15VelocityControl10PidControlEffff+0x1e8>)
 8023e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e4a:	f7fc fab5 	bl	80203b8 <__aeabi_dmul>
 8023e4e:	4602      	mov	r2, r0
 8023e50:	460b      	mov	r3, r1
 8023e52:	4620      	mov	r0, r4
 8023e54:	4629      	mov	r1, r5
 8023e56:	f7fc f8f9 	bl	802004c <__adddf3>
 8023e5a:	4603      	mov	r3, r0
 8023e5c:	460c      	mov	r4, r1
 8023e5e:	4618      	mov	r0, r3
 8023e60:	4621      	mov	r1, r4
 8023e62:	f7fc fd43 	bl	80208ec <__aeabi_d2f>
 8023e66:	4603      	mov	r3, r0
 8023e68:	633b      	str	r3, [r7, #48]	; 0x30
    pre_filter = filter;
 8023e6a:	4a5f      	ldr	r2, [pc, #380]	; (8023fe8 <_ZN15VelocityControl10PidControlEffff+0x1f8>)
 8023e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023e6e:	6013      	str	r3, [r2, #0]

    float error = target - filter;
 8023e70:	ed97 7a04 	vldr	s14, [r7, #16]
 8023e74:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8023e78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023e7c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    static float pre_error = error;
 8023e80:	4b5a      	ldr	r3, [pc, #360]	; (8023fec <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8023e82:	781b      	ldrb	r3, [r3, #0]
 8023e84:	f3bf 8f5b 	dmb	ish
 8023e88:	b2db      	uxtb	r3, r3
 8023e8a:	f003 0301 	and.w	r3, r3, #1
 8023e8e:	2b00      	cmp	r3, #0
 8023e90:	bf0c      	ite	eq
 8023e92:	2301      	moveq	r3, #1
 8023e94:	2300      	movne	r3, #0
 8023e96:	b2db      	uxtb	r3, r3
 8023e98:	2b00      	cmp	r3, #0
 8023e9a:	d010      	beq.n	8023ebe <_ZN15VelocityControl10PidControlEffff+0xce>
 8023e9c:	4853      	ldr	r0, [pc, #332]	; (8023fec <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8023e9e:	f003 fa49 	bl	8027334 <__cxa_guard_acquire>
 8023ea2:	4603      	mov	r3, r0
 8023ea4:	2b00      	cmp	r3, #0
 8023ea6:	bf14      	ite	ne
 8023ea8:	2301      	movne	r3, #1
 8023eaa:	2300      	moveq	r3, #0
 8023eac:	b2db      	uxtb	r3, r3
 8023eae:	2b00      	cmp	r3, #0
 8023eb0:	d005      	beq.n	8023ebe <_ZN15VelocityControl10PidControlEffff+0xce>
 8023eb2:	4a4f      	ldr	r2, [pc, #316]	; (8023ff0 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8023eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023eb6:	6013      	str	r3, [r2, #0]
 8023eb8:	484c      	ldr	r0, [pc, #304]	; (8023fec <_ZN15VelocityControl10PidControlEffff+0x1fc>)
 8023eba:	f003 fa47 	bl	802734c <__cxa_guard_release>

    float differential_error = (error - pre_error) / TIM6_PERIOD_S;
 8023ebe:	4b4c      	ldr	r3, [pc, #304]	; (8023ff0 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8023ec0:	edd3 7a00 	vldr	s15, [r3]
 8023ec4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8023ec8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023ecc:	ee17 0a90 	vmov	r0, s15
 8023ed0:	f7fc fa1a 	bl	8020308 <__aeabi_f2d>
 8023ed4:	a342      	add	r3, pc, #264	; (adr r3, 8023fe0 <_ZN15VelocityControl10PidControlEffff+0x1f0>)
 8023ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023eda:	f7fc fb97 	bl	802060c <__aeabi_ddiv>
 8023ede:	4603      	mov	r3, r0
 8023ee0:	460c      	mov	r4, r1
 8023ee2:	4618      	mov	r0, r3
 8023ee4:	4621      	mov	r1, r4
 8023ee6:	f7fc fd01 	bl	80208ec <__aeabi_d2f>
 8023eea:	4603      	mov	r3, r0
 8023eec:	62bb      	str	r3, [r7, #40]	; 0x28
    float integral_error = (error + pre_error) / 2.0 * TIM6_PERIOD_S;
 8023eee:	4b40      	ldr	r3, [pc, #256]	; (8023ff0 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8023ef0:	ed93 7a00 	vldr	s14, [r3]
 8023ef4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8023ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8023efc:	ee17 0a90 	vmov	r0, s15
 8023f00:	f7fc fa02 	bl	8020308 <__aeabi_f2d>
 8023f04:	f04f 0200 	mov.w	r2, #0
 8023f08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8023f0c:	f7fc fb7e 	bl	802060c <__aeabi_ddiv>
 8023f10:	4603      	mov	r3, r0
 8023f12:	460c      	mov	r4, r1
 8023f14:	4618      	mov	r0, r3
 8023f16:	4621      	mov	r1, r4
 8023f18:	a331      	add	r3, pc, #196	; (adr r3, 8023fe0 <_ZN15VelocityControl10PidControlEffff+0x1f0>)
 8023f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f1e:	f7fc fa4b 	bl	80203b8 <__aeabi_dmul>
 8023f22:	4603      	mov	r3, r0
 8023f24:	460c      	mov	r4, r1
 8023f26:	4618      	mov	r0, r3
 8023f28:	4621      	mov	r1, r4
 8023f2a:	f7fc fcdf 	bl	80208ec <__aeabi_d2f>
 8023f2e:	4603      	mov	r3, r0
 8023f30:	627b      	str	r3, [r7, #36]	; 0x24
    SetIntegralError(integral_error);
 8023f32:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8023f36:	6978      	ldr	r0, [r7, #20]
 8023f38:	f000 f870 	bl	802401c <_ZN15VelocityControl16SetIntegralErrorEf>
    pre_error = error;
 8023f3c:	4a2c      	ldr	r2, [pc, #176]	; (8023ff0 <_ZN15VelocityControl10PidControlEffff+0x200>)
 8023f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023f40:	6013      	str	r3, [r2, #0]

    float p = p_gain * error;
 8023f42:	ed97 7a03 	vldr	s14, [r7, #12]
 8023f46:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8023f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8023f4e:	edc7 7a08 	vstr	s15, [r7, #32]
    float d = d_gain * differential_error;
 8023f52:	ed97 7a01 	vldr	s14, [r7, #4]
 8023f56:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8023f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8023f5e:	edc7 7a07 	vstr	s15, [r7, #28]
    float i = i_gain * integral_error_;
 8023f62:	697b      	ldr	r3, [r7, #20]
 8023f64:	edd3 7a00 	vldr	s15, [r3]
 8023f68:	ed97 7a02 	vldr	s14, [r7, #8]
 8023f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8023f70:	edc7 7a06 	vstr	s15, [r7, #24]

#ifdef DEBUG_MODE
    g_target_velocity  = target;
 8023f74:	4a1f      	ldr	r2, [pc, #124]	; (8023ff4 <_ZN15VelocityControl10PidControlEffff+0x204>)
 8023f76:	693b      	ldr	r3, [r7, #16]
 8023f78:	6013      	str	r3, [r2, #0]
    g_current_velocity = current;
 8023f7a:	4a1f      	ldr	r2, [pc, #124]	; (8023ff8 <_ZN15VelocityControl10PidControlEffff+0x208>)
 8023f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023f7e:	6013      	str	r3, [r2, #0]
    g_filter_velocity  = filter;
 8023f80:	4a1e      	ldr	r2, [pc, #120]	; (8023ffc <_ZN15VelocityControl10PidControlEffff+0x20c>)
 8023f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023f84:	6013      	str	r3, [r2, #0]
    g_velocity_error   = error;
 8023f86:	4a1e      	ldr	r2, [pc, #120]	; (8024000 <_ZN15VelocityControl10PidControlEffff+0x210>)
 8023f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023f8a:	6013      	str	r3, [r2, #0]
    g_velocity_p = p;       g_velocity_d = d;       g_velocity_i = i;
 8023f8c:	4a1d      	ldr	r2, [pc, #116]	; (8024004 <_ZN15VelocityControl10PidControlEffff+0x214>)
 8023f8e:	6a3b      	ldr	r3, [r7, #32]
 8023f90:	6013      	str	r3, [r2, #0]
 8023f92:	4a1d      	ldr	r2, [pc, #116]	; (8024008 <_ZN15VelocityControl10PidControlEffff+0x218>)
 8023f94:	69fb      	ldr	r3, [r7, #28]
 8023f96:	6013      	str	r3, [r2, #0]
 8023f98:	4a1c      	ldr	r2, [pc, #112]	; (802400c <_ZN15VelocityControl10PidControlEffff+0x21c>)
 8023f9a:	69bb      	ldr	r3, [r7, #24]
 8023f9c:	6013      	str	r3, [r2, #0]
    g_velocity_p_gain = p;  g_velocity_d_gain = p;  g_velocity_i_gain = p;
 8023f9e:	4a1c      	ldr	r2, [pc, #112]	; (8024010 <_ZN15VelocityControl10PidControlEffff+0x220>)
 8023fa0:	6a3b      	ldr	r3, [r7, #32]
 8023fa2:	6013      	str	r3, [r2, #0]
 8023fa4:	4a1b      	ldr	r2, [pc, #108]	; (8024014 <_ZN15VelocityControl10PidControlEffff+0x224>)
 8023fa6:	6a3b      	ldr	r3, [r7, #32]
 8023fa8:	6013      	str	r3, [r2, #0]
 8023faa:	4a1b      	ldr	r2, [pc, #108]	; (8024018 <_ZN15VelocityControl10PidControlEffff+0x228>)
 8023fac:	6a3b      	ldr	r3, [r7, #32]
 8023fae:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE

    return p + d + i;
 8023fb0:	ed97 7a08 	vldr	s14, [r7, #32]
 8023fb4:	edd7 7a07 	vldr	s15, [r7, #28]
 8023fb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8023fbc:	edd7 7a06 	vldr	s15, [r7, #24]
 8023fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8023fc4:	eeb0 0a67 	vmov.f32	s0, s15
 8023fc8:	3738      	adds	r7, #56	; 0x38
 8023fca:	46bd      	mov	sp, r7
 8023fcc:	bdb0      	pop	{r4, r5, r7, pc}
 8023fce:	bf00      	nop
 8023fd0:	33333334 	.word	0x33333334
 8023fd4:	3fd33333 	.word	0x3fd33333
 8023fd8:	66666666 	.word	0x66666666
 8023fdc:	3fe66666 	.word	0x3fe66666
 8023fe0:	47ae147b 	.word	0x47ae147b
 8023fe4:	3f547ae1 	.word	0x3f547ae1
 8023fe8:	2000051c 	.word	0x2000051c
 8023fec:	20000524 	.word	0x20000524
 8023ff0:	20000520 	.word	0x20000520
 8023ff4:	200004e4 	.word	0x200004e4
 8023ff8:	200004e8 	.word	0x200004e8
 8023ffc:	200004ec 	.word	0x200004ec
 8024000:	200004f0 	.word	0x200004f0
 8024004:	200004f4 	.word	0x200004f4
 8024008:	200004fc 	.word	0x200004fc
 802400c:	200004f8 	.word	0x200004f8
 8024010:	20000500 	.word	0x20000500
 8024014:	20000508 	.word	0x20000508
 8024018:	20000504 	.word	0x20000504

0802401c <_ZN15VelocityControl16SetIntegralErrorEf>:

void VelocityControl::SetIntegralError(float integral_error)
{
 802401c:	b480      	push	{r7}
 802401e:	b083      	sub	sp, #12
 8024020:	af00      	add	r7, sp, #0
 8024022:	6078      	str	r0, [r7, #4]
 8024024:	ed87 0a00 	vstr	s0, [r7]
    integral_error_ += integral_error;
 8024028:	687b      	ldr	r3, [r7, #4]
 802402a:	ed93 7a00 	vldr	s14, [r3]
 802402e:	edd7 7a00 	vldr	s15, [r7]
 8024032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8024036:	687b      	ldr	r3, [r7, #4]
 8024038:	edc3 7a00 	vstr	s15, [r3]
}
 802403c:	bf00      	nop
 802403e:	370c      	adds	r7, #12
 8024040:	46bd      	mov	sp, r7
 8024042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024046:	4770      	bx	lr

08024048 <Init>:
    &velocity_control
);
#endif // TEST_MODE

void Init()
{
 8024048:	b580      	push	{r7, lr}
 802404a:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Init();
#else // TEST_MODE
    test.Init();
 802404c:	4802      	ldr	r0, [pc, #8]	; (8024058 <Init+0x10>)
 802404e:	f7ff fc9b 	bl	8023988 <_ZN4Test4InitEv>
#endif // TEST_MODE
}
 8024052:	bf00      	nop
 8024054:	bd80      	pop	{r7, pc}
 8024056:	bf00      	nop
 8024058:	200007f8 	.word	0x200007f8

0802405c <InterruptTim7>:

void InterruptTim7()
{
 802405c:	b580      	push	{r7, lr}
 802405e:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Timer7();
#else // TEST_MODE
    test.Timer7();
 8024060:	4804      	ldr	r0, [pc, #16]	; (8024074 <InterruptTim7+0x18>)
 8024062:	f7ff fcbf 	bl	80239e4 <_ZN4Test6Timer7Ev>
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim7++;
 8024066:	4b04      	ldr	r3, [pc, #16]	; (8024078 <InterruptTim7+0x1c>)
 8024068:	681b      	ldr	r3, [r3, #0]
 802406a:	3301      	adds	r3, #1
 802406c:	4a02      	ldr	r2, [pc, #8]	; (8024078 <InterruptTim7+0x1c>)
 802406e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8024070:	bf00      	nop
 8024072:	bd80      	pop	{r7, pc}
 8024074:	200007f8 	.word	0x200007f8
 8024078:	2000050c 	.word	0x2000050c

0802407c <InterruptTim6>:

void InterruptTim6()
{
 802407c:	b580      	push	{r7, lr}
 802407e:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.RunMode();
#else // TEST_MODE
    test.Timer6();
 8024080:	4804      	ldr	r0, [pc, #16]	; (8024094 <InterruptTim6+0x18>)
 8024082:	f7ff fcbc 	bl	80239fe <_ZN4Test6Timer6Ev>
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim6++;
 8024086:	4b04      	ldr	r3, [pc, #16]	; (8024098 <InterruptTim6+0x1c>)
 8024088:	681b      	ldr	r3, [r3, #0]
 802408a:	3301      	adds	r3, #1
 802408c:	4a02      	ldr	r2, [pc, #8]	; (8024098 <InterruptTim6+0x1c>)
 802408e:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8024090:	bf00      	nop
 8024092:	bd80      	pop	{r7, pc}
 8024094:	200007f8 	.word	0x200007f8
 8024098:	20000510 	.word	0x20000510

0802409c <InterruptTim2>:

void InterruptTim2()
{
 802409c:	b480      	push	{r7}
 802409e:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.UpdateRunMode();
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim2++;
 80240a0:	4b04      	ldr	r3, [pc, #16]	; (80240b4 <InterruptTim2+0x18>)
 80240a2:	681b      	ldr	r3, [r3, #0]
 80240a4:	3301      	adds	r3, #1
 80240a6:	4a03      	ldr	r2, [pc, #12]	; (80240b4 <InterruptTim2+0x18>)
 80240a8:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
 80240aa:	bf00      	nop
 80240ac:	46bd      	mov	sp, r7
 80240ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80240b2:	4770      	bx	lr
 80240b4:	20000514 	.word	0x20000514

080240b8 <_Z41__static_initialization_and_destruction_0ii>:
 80240b8:	b580      	push	{r7, lr}
 80240ba:	b088      	sub	sp, #32
 80240bc:	af06      	add	r7, sp, #24
 80240be:	6078      	str	r0, [r7, #4]
 80240c0:	6039      	str	r1, [r7, #0]
 80240c2:	687b      	ldr	r3, [r7, #4]
 80240c4:	2b01      	cmp	r3, #1
 80240c6:	d12e      	bne.n	8024126 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 80240c8:	683b      	ldr	r3, [r7, #0]
 80240ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80240ce:	4293      	cmp	r3, r2
 80240d0:	d129      	bne.n	8024126 <_Z41__static_initialization_and_destruction_0ii+0x6e>
Encoder encoder;
 80240d2:	4817      	ldr	r0, [pc, #92]	; (8024130 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80240d4:	f7fc fdda 	bl	8020c8c <_ZN7EncoderC1Ev>
Iim42652 iim_42652;
 80240d8:	4816      	ldr	r0, [pc, #88]	; (8024134 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80240da:	f7fc fef1 	bl	8020ec0 <_ZN8Iim42652C1Ev>
Led led;
 80240de:	4816      	ldr	r0, [pc, #88]	; (8024138 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80240e0:	f7fc feff 	bl	8020ee2 <_ZN3LedC1Ev>
LineSensor line_sensor;
 80240e4:	4815      	ldr	r0, [pc, #84]	; (802413c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80240e6:	f7fd f816 	bl	8021116 <_ZN10LineSensorC1Ev>
LineTrace line_trace(&line_sensor);
 80240ea:	4914      	ldr	r1, [pc, #80]	; (802413c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80240ec:	4814      	ldr	r0, [pc, #80]	; (8024140 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80240ee:	f7fd fb5b 	bl	80217a8 <_ZN9LineTraceC1EP10LineSensor>
Logger logger;
 80240f2:	4814      	ldr	r0, [pc, #80]	; (8024144 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80240f4:	f7fd fc5c 	bl	80219b0 <_ZN6LoggerC1Ev>
SideSensor side_sensor;
 80240f8:	4813      	ldr	r0, [pc, #76]	; (8024148 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80240fa:	f7fe fcff 	bl	8022afc <_ZN10SideSensorC1Ev>
VelocityControl velocity_control(&encoder);
 80240fe:	490c      	ldr	r1, [pc, #48]	; (8024130 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8024100:	4812      	ldr	r0, [pc, #72]	; (802414c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8024102:	f7ff fe25 	bl	8023d50 <_ZN15VelocityControlC1EP7Encoder>
);
 8024106:	4b11      	ldr	r3, [pc, #68]	; (802414c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8024108:	9304      	str	r3, [sp, #16]
 802410a:	4b0f      	ldr	r3, [pc, #60]	; (8024148 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 802410c:	9303      	str	r3, [sp, #12]
 802410e:	4b10      	ldr	r3, [pc, #64]	; (8024150 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8024110:	9302      	str	r3, [sp, #8]
 8024112:	4b10      	ldr	r3, [pc, #64]	; (8024154 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8024114:	9301      	str	r3, [sp, #4]
 8024116:	4b0a      	ldr	r3, [pc, #40]	; (8024140 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8024118:	9300      	str	r3, [sp, #0]
 802411a:	4b08      	ldr	r3, [pc, #32]	; (802413c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 802411c:	4a06      	ldr	r2, [pc, #24]	; (8024138 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 802411e:	4904      	ldr	r1, [pc, #16]	; (8024130 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8024120:	480d      	ldr	r0, [pc, #52]	; (8024158 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8024122:	f7ff fc0b 	bl	802393c <_ZN4TestC1EP7EncoderP3LedP10LineSensorP9LineTraceP5MotorP12RotarySwitchP10SideSensorP15VelocityControl>
 8024126:	bf00      	nop
 8024128:	3708      	adds	r7, #8
 802412a:	46bd      	mov	sp, r7
 802412c:	bd80      	pop	{r7, pc}
 802412e:	bf00      	nop
 8024130:	20000528 	.word	0x20000528
 8024134:	20000538 	.word	0x20000538
 8024138:	20000540 	.word	0x20000540
 802413c:	20000544 	.word	0x20000544
 8024140:	200006d0 	.word	0x200006d0
 8024144:	200006d8 	.word	0x200006d8
 8024148:	200007e8 	.word	0x200007e8
 802414c:	200007f0 	.word	0x200007f0
 8024150:	200007e4 	.word	0x200007e4
 8024154:	200007e0 	.word	0x200007e0
 8024158:	200007f8 	.word	0x200007f8

0802415c <_GLOBAL__sub_I_encoder>:
 802415c:	b580      	push	{r7, lr}
 802415e:	af00      	add	r7, sp, #0
 8024160:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8024164:	2001      	movs	r0, #1
 8024166:	f7ff ffa7 	bl	80240b8 <_Z41__static_initialization_and_destruction_0ii>
 802416a:	bd80      	pop	{r7, pc}

0802416c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 802416c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80241a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8024170:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8024172:	e003      	b.n	802417c <LoopCopyDataInit>

08024174 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8024174:	4b0c      	ldr	r3, [pc, #48]	; (80241a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8024176:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8024178:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 802417a:	3104      	adds	r1, #4

0802417c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 802417c:	480b      	ldr	r0, [pc, #44]	; (80241ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 802417e:	4b0c      	ldr	r3, [pc, #48]	; (80241b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8024180:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8024182:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8024184:	d3f6      	bcc.n	8024174 <CopyDataInit>
  ldr  r2, =_sbss
 8024186:	4a0b      	ldr	r2, [pc, #44]	; (80241b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8024188:	e002      	b.n	8024190 <LoopFillZerobss>

0802418a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 802418a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 802418c:	f842 3b04 	str.w	r3, [r2], #4

08024190 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8024190:	4b09      	ldr	r3, [pc, #36]	; (80241b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8024192:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8024194:	d3f9      	bcc.n	802418a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8024196:	f7ff fbbb 	bl	8023910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 802419a:	f003 f8db 	bl	8027354 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802419e:	f7fd fcaf 	bl	8021b00 <main>
  bx  lr    
 80241a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80241a4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80241a8:	080273f8 	.word	0x080273f8
  ldr  r0, =_sdata
 80241ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80241b0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80241b4:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80241b8:	20000bf0 	.word	0x20000bf0

080241bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80241bc:	e7fe      	b.n	80241bc <ADC_IRQHandler>
	...

080241c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80241c0:	b580      	push	{r7, lr}
 80241c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80241c4:	4b0e      	ldr	r3, [pc, #56]	; (8024200 <HAL_Init+0x40>)
 80241c6:	681b      	ldr	r3, [r3, #0]
 80241c8:	4a0d      	ldr	r2, [pc, #52]	; (8024200 <HAL_Init+0x40>)
 80241ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80241ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80241d0:	4b0b      	ldr	r3, [pc, #44]	; (8024200 <HAL_Init+0x40>)
 80241d2:	681b      	ldr	r3, [r3, #0]
 80241d4:	4a0a      	ldr	r2, [pc, #40]	; (8024200 <HAL_Init+0x40>)
 80241d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80241da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80241dc:	4b08      	ldr	r3, [pc, #32]	; (8024200 <HAL_Init+0x40>)
 80241de:	681b      	ldr	r3, [r3, #0]
 80241e0:	4a07      	ldr	r2, [pc, #28]	; (8024200 <HAL_Init+0x40>)
 80241e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80241e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80241e8:	2003      	movs	r0, #3
 80241ea:	f000 fd41 	bl	8024c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80241ee:	2001      	movs	r0, #1
 80241f0:	f000 f808 	bl	8024204 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80241f4:	f7fe ffb0 	bl	8023158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80241f8:	2300      	movs	r3, #0
}
 80241fa:	4618      	mov	r0, r3
 80241fc:	bd80      	pop	{r7, pc}
 80241fe:	bf00      	nop
 8024200:	40023c00 	.word	0x40023c00

08024204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8024204:	b580      	push	{r7, lr}
 8024206:	b082      	sub	sp, #8
 8024208:	af00      	add	r7, sp, #0
 802420a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 802420c:	4b12      	ldr	r3, [pc, #72]	; (8024258 <HAL_InitTick+0x54>)
 802420e:	681a      	ldr	r2, [r3, #0]
 8024210:	4b12      	ldr	r3, [pc, #72]	; (802425c <HAL_InitTick+0x58>)
 8024212:	781b      	ldrb	r3, [r3, #0]
 8024214:	4619      	mov	r1, r3
 8024216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 802421a:	fbb3 f3f1 	udiv	r3, r3, r1
 802421e:	fbb2 f3f3 	udiv	r3, r2, r3
 8024222:	4618      	mov	r0, r3
 8024224:	f000 fd59 	bl	8024cda <HAL_SYSTICK_Config>
 8024228:	4603      	mov	r3, r0
 802422a:	2b00      	cmp	r3, #0
 802422c:	d001      	beq.n	8024232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 802422e:	2301      	movs	r3, #1
 8024230:	e00e      	b.n	8024250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8024232:	687b      	ldr	r3, [r7, #4]
 8024234:	2b0f      	cmp	r3, #15
 8024236:	d80a      	bhi.n	802424e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8024238:	2200      	movs	r2, #0
 802423a:	6879      	ldr	r1, [r7, #4]
 802423c:	f04f 30ff 	mov.w	r0, #4294967295
 8024240:	f000 fd21 	bl	8024c86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8024244:	4a06      	ldr	r2, [pc, #24]	; (8024260 <HAL_InitTick+0x5c>)
 8024246:	687b      	ldr	r3, [r7, #4]
 8024248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 802424a:	2300      	movs	r3, #0
 802424c:	e000      	b.n	8024250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 802424e:	2301      	movs	r3, #1
}
 8024250:	4618      	mov	r0, r3
 8024252:	3708      	adds	r7, #8
 8024254:	46bd      	mov	sp, r7
 8024256:	bd80      	pop	{r7, pc}
 8024258:	20000000 	.word	0x20000000
 802425c:	20000008 	.word	0x20000008
 8024260:	20000004 	.word	0x20000004

08024264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8024264:	b480      	push	{r7}
 8024266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8024268:	4b06      	ldr	r3, [pc, #24]	; (8024284 <HAL_IncTick+0x20>)
 802426a:	781b      	ldrb	r3, [r3, #0]
 802426c:	461a      	mov	r2, r3
 802426e:	4b06      	ldr	r3, [pc, #24]	; (8024288 <HAL_IncTick+0x24>)
 8024270:	681b      	ldr	r3, [r3, #0]
 8024272:	4413      	add	r3, r2
 8024274:	4a04      	ldr	r2, [pc, #16]	; (8024288 <HAL_IncTick+0x24>)
 8024276:	6013      	str	r3, [r2, #0]
}
 8024278:	bf00      	nop
 802427a:	46bd      	mov	sp, r7
 802427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024280:	4770      	bx	lr
 8024282:	bf00      	nop
 8024284:	20000008 	.word	0x20000008
 8024288:	20000bec 	.word	0x20000bec

0802428c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 802428c:	b480      	push	{r7}
 802428e:	af00      	add	r7, sp, #0
  return uwTick;
 8024290:	4b03      	ldr	r3, [pc, #12]	; (80242a0 <HAL_GetTick+0x14>)
 8024292:	681b      	ldr	r3, [r3, #0]
}
 8024294:	4618      	mov	r0, r3
 8024296:	46bd      	mov	sp, r7
 8024298:	f85d 7b04 	ldr.w	r7, [sp], #4
 802429c:	4770      	bx	lr
 802429e:	bf00      	nop
 80242a0:	20000bec 	.word	0x20000bec

080242a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80242a4:	b580      	push	{r7, lr}
 80242a6:	b084      	sub	sp, #16
 80242a8:	af00      	add	r7, sp, #0
 80242aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80242ac:	f7ff ffee 	bl	802428c <HAL_GetTick>
 80242b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80242b2:	687b      	ldr	r3, [r7, #4]
 80242b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80242b6:	68fb      	ldr	r3, [r7, #12]
 80242b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80242bc:	d005      	beq.n	80242ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80242be:	4b09      	ldr	r3, [pc, #36]	; (80242e4 <HAL_Delay+0x40>)
 80242c0:	781b      	ldrb	r3, [r3, #0]
 80242c2:	461a      	mov	r2, r3
 80242c4:	68fb      	ldr	r3, [r7, #12]
 80242c6:	4413      	add	r3, r2
 80242c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80242ca:	bf00      	nop
 80242cc:	f7ff ffde 	bl	802428c <HAL_GetTick>
 80242d0:	4602      	mov	r2, r0
 80242d2:	68bb      	ldr	r3, [r7, #8]
 80242d4:	1ad3      	subs	r3, r2, r3
 80242d6:	68fa      	ldr	r2, [r7, #12]
 80242d8:	429a      	cmp	r2, r3
 80242da:	d8f7      	bhi.n	80242cc <HAL_Delay+0x28>
  {
  }
}
 80242dc:	bf00      	nop
 80242de:	3710      	adds	r7, #16
 80242e0:	46bd      	mov	sp, r7
 80242e2:	bd80      	pop	{r7, pc}
 80242e4:	20000008 	.word	0x20000008

080242e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80242e8:	b580      	push	{r7, lr}
 80242ea:	b084      	sub	sp, #16
 80242ec:	af00      	add	r7, sp, #0
 80242ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80242f0:	2300      	movs	r3, #0
 80242f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80242f4:	687b      	ldr	r3, [r7, #4]
 80242f6:	2b00      	cmp	r3, #0
 80242f8:	d101      	bne.n	80242fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80242fa:	2301      	movs	r3, #1
 80242fc:	e033      	b.n	8024366 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80242fe:	687b      	ldr	r3, [r7, #4]
 8024300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024302:	2b00      	cmp	r3, #0
 8024304:	d109      	bne.n	802431a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8024306:	6878      	ldr	r0, [r7, #4]
 8024308:	f7fe ff4e 	bl	80231a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 802430c:	687b      	ldr	r3, [r7, #4]
 802430e:	2200      	movs	r2, #0
 8024310:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8024312:	687b      	ldr	r3, [r7, #4]
 8024314:	2200      	movs	r2, #0
 8024316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 802431a:	687b      	ldr	r3, [r7, #4]
 802431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802431e:	f003 0310 	and.w	r3, r3, #16
 8024322:	2b00      	cmp	r3, #0
 8024324:	d118      	bne.n	8024358 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8024326:	687b      	ldr	r3, [r7, #4]
 8024328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802432a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 802432e:	f023 0302 	bic.w	r3, r3, #2
 8024332:	f043 0202 	orr.w	r2, r3, #2
 8024336:	687b      	ldr	r3, [r7, #4]
 8024338:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 802433a:	6878      	ldr	r0, [r7, #4]
 802433c:	f000 fa4a 	bl	80247d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8024340:	687b      	ldr	r3, [r7, #4]
 8024342:	2200      	movs	r2, #0
 8024344:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8024346:	687b      	ldr	r3, [r7, #4]
 8024348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802434a:	f023 0303 	bic.w	r3, r3, #3
 802434e:	f043 0201 	orr.w	r2, r3, #1
 8024352:	687b      	ldr	r3, [r7, #4]
 8024354:	641a      	str	r2, [r3, #64]	; 0x40
 8024356:	e001      	b.n	802435c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8024358:	2301      	movs	r3, #1
 802435a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 802435c:	687b      	ldr	r3, [r7, #4]
 802435e:	2200      	movs	r2, #0
 8024360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8024364:	7bfb      	ldrb	r3, [r7, #15]
}
 8024366:	4618      	mov	r0, r3
 8024368:	3710      	adds	r7, #16
 802436a:	46bd      	mov	sp, r7
 802436c:	bd80      	pop	{r7, pc}
	...

08024370 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8024370:	b580      	push	{r7, lr}
 8024372:	b086      	sub	sp, #24
 8024374:	af00      	add	r7, sp, #0
 8024376:	60f8      	str	r0, [r7, #12]
 8024378:	60b9      	str	r1, [r7, #8]
 802437a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 802437c:	2300      	movs	r3, #0
 802437e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8024380:	68fb      	ldr	r3, [r7, #12]
 8024382:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8024386:	2b01      	cmp	r3, #1
 8024388:	d101      	bne.n	802438e <HAL_ADC_Start_DMA+0x1e>
 802438a:	2302      	movs	r3, #2
 802438c:	e0cc      	b.n	8024528 <HAL_ADC_Start_DMA+0x1b8>
 802438e:	68fb      	ldr	r3, [r7, #12]
 8024390:	2201      	movs	r2, #1
 8024392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8024396:	68fb      	ldr	r3, [r7, #12]
 8024398:	681b      	ldr	r3, [r3, #0]
 802439a:	689b      	ldr	r3, [r3, #8]
 802439c:	f003 0301 	and.w	r3, r3, #1
 80243a0:	2b01      	cmp	r3, #1
 80243a2:	d018      	beq.n	80243d6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80243a4:	68fb      	ldr	r3, [r7, #12]
 80243a6:	681b      	ldr	r3, [r3, #0]
 80243a8:	689a      	ldr	r2, [r3, #8]
 80243aa:	68fb      	ldr	r3, [r7, #12]
 80243ac:	681b      	ldr	r3, [r3, #0]
 80243ae:	f042 0201 	orr.w	r2, r2, #1
 80243b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80243b4:	4b5e      	ldr	r3, [pc, #376]	; (8024530 <HAL_ADC_Start_DMA+0x1c0>)
 80243b6:	681b      	ldr	r3, [r3, #0]
 80243b8:	4a5e      	ldr	r2, [pc, #376]	; (8024534 <HAL_ADC_Start_DMA+0x1c4>)
 80243ba:	fba2 2303 	umull	r2, r3, r2, r3
 80243be:	0c9a      	lsrs	r2, r3, #18
 80243c0:	4613      	mov	r3, r2
 80243c2:	005b      	lsls	r3, r3, #1
 80243c4:	4413      	add	r3, r2
 80243c6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80243c8:	e002      	b.n	80243d0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80243ca:	693b      	ldr	r3, [r7, #16]
 80243cc:	3b01      	subs	r3, #1
 80243ce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80243d0:	693b      	ldr	r3, [r7, #16]
 80243d2:	2b00      	cmp	r3, #0
 80243d4:	d1f9      	bne.n	80243ca <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80243d6:	68fb      	ldr	r3, [r7, #12]
 80243d8:	681b      	ldr	r3, [r3, #0]
 80243da:	689b      	ldr	r3, [r3, #8]
 80243dc:	f003 0301 	and.w	r3, r3, #1
 80243e0:	2b01      	cmp	r3, #1
 80243e2:	f040 80a0 	bne.w	8024526 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80243e6:	68fb      	ldr	r3, [r7, #12]
 80243e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80243ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80243ee:	f023 0301 	bic.w	r3, r3, #1
 80243f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80243f6:	68fb      	ldr	r3, [r7, #12]
 80243f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80243fa:	68fb      	ldr	r3, [r7, #12]
 80243fc:	681b      	ldr	r3, [r3, #0]
 80243fe:	685b      	ldr	r3, [r3, #4]
 8024400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8024404:	2b00      	cmp	r3, #0
 8024406:	d007      	beq.n	8024418 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8024408:	68fb      	ldr	r3, [r7, #12]
 802440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802440c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8024410:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8024414:	68fb      	ldr	r3, [r7, #12]
 8024416:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8024418:	68fb      	ldr	r3, [r7, #12]
 802441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802441c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8024420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8024424:	d106      	bne.n	8024434 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8024426:	68fb      	ldr	r3, [r7, #12]
 8024428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802442a:	f023 0206 	bic.w	r2, r3, #6
 802442e:	68fb      	ldr	r3, [r7, #12]
 8024430:	645a      	str	r2, [r3, #68]	; 0x44
 8024432:	e002      	b.n	802443a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8024434:	68fb      	ldr	r3, [r7, #12]
 8024436:	2200      	movs	r2, #0
 8024438:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 802443a:	68fb      	ldr	r3, [r7, #12]
 802443c:	2200      	movs	r2, #0
 802443e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8024442:	4b3d      	ldr	r3, [pc, #244]	; (8024538 <HAL_ADC_Start_DMA+0x1c8>)
 8024444:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8024446:	68fb      	ldr	r3, [r7, #12]
 8024448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802444a:	4a3c      	ldr	r2, [pc, #240]	; (802453c <HAL_ADC_Start_DMA+0x1cc>)
 802444c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 802444e:	68fb      	ldr	r3, [r7, #12]
 8024450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024452:	4a3b      	ldr	r2, [pc, #236]	; (8024540 <HAL_ADC_Start_DMA+0x1d0>)
 8024454:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8024456:	68fb      	ldr	r3, [r7, #12]
 8024458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802445a:	4a3a      	ldr	r2, [pc, #232]	; (8024544 <HAL_ADC_Start_DMA+0x1d4>)
 802445c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 802445e:	68fb      	ldr	r3, [r7, #12]
 8024460:	681b      	ldr	r3, [r3, #0]
 8024462:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8024466:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8024468:	68fb      	ldr	r3, [r7, #12]
 802446a:	681b      	ldr	r3, [r3, #0]
 802446c:	685a      	ldr	r2, [r3, #4]
 802446e:	68fb      	ldr	r3, [r7, #12]
 8024470:	681b      	ldr	r3, [r3, #0]
 8024472:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8024476:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8024478:	68fb      	ldr	r3, [r7, #12]
 802447a:	681b      	ldr	r3, [r3, #0]
 802447c:	689a      	ldr	r2, [r3, #8]
 802447e:	68fb      	ldr	r3, [r7, #12]
 8024480:	681b      	ldr	r3, [r3, #0]
 8024482:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8024486:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8024488:	68fb      	ldr	r3, [r7, #12]
 802448a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 802448c:	68fb      	ldr	r3, [r7, #12]
 802448e:	681b      	ldr	r3, [r3, #0]
 8024490:	334c      	adds	r3, #76	; 0x4c
 8024492:	4619      	mov	r1, r3
 8024494:	68ba      	ldr	r2, [r7, #8]
 8024496:	687b      	ldr	r3, [r7, #4]
 8024498:	f000 fcda 	bl	8024e50 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 802449c:	697b      	ldr	r3, [r7, #20]
 802449e:	685b      	ldr	r3, [r3, #4]
 80244a0:	f003 031f 	and.w	r3, r3, #31
 80244a4:	2b00      	cmp	r3, #0
 80244a6:	d12a      	bne.n	80244fe <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80244a8:	68fb      	ldr	r3, [r7, #12]
 80244aa:	681b      	ldr	r3, [r3, #0]
 80244ac:	4a26      	ldr	r2, [pc, #152]	; (8024548 <HAL_ADC_Start_DMA+0x1d8>)
 80244ae:	4293      	cmp	r3, r2
 80244b0:	d015      	beq.n	80244de <HAL_ADC_Start_DMA+0x16e>
 80244b2:	68fb      	ldr	r3, [r7, #12]
 80244b4:	681b      	ldr	r3, [r3, #0]
 80244b6:	4a25      	ldr	r2, [pc, #148]	; (802454c <HAL_ADC_Start_DMA+0x1dc>)
 80244b8:	4293      	cmp	r3, r2
 80244ba:	d105      	bne.n	80244c8 <HAL_ADC_Start_DMA+0x158>
 80244bc:	4b1e      	ldr	r3, [pc, #120]	; (8024538 <HAL_ADC_Start_DMA+0x1c8>)
 80244be:	685b      	ldr	r3, [r3, #4]
 80244c0:	f003 031f 	and.w	r3, r3, #31
 80244c4:	2b00      	cmp	r3, #0
 80244c6:	d00a      	beq.n	80244de <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80244c8:	68fb      	ldr	r3, [r7, #12]
 80244ca:	681b      	ldr	r3, [r3, #0]
 80244cc:	4a20      	ldr	r2, [pc, #128]	; (8024550 <HAL_ADC_Start_DMA+0x1e0>)
 80244ce:	4293      	cmp	r3, r2
 80244d0:	d129      	bne.n	8024526 <HAL_ADC_Start_DMA+0x1b6>
 80244d2:	4b19      	ldr	r3, [pc, #100]	; (8024538 <HAL_ADC_Start_DMA+0x1c8>)
 80244d4:	685b      	ldr	r3, [r3, #4]
 80244d6:	f003 031f 	and.w	r3, r3, #31
 80244da:	2b0f      	cmp	r3, #15
 80244dc:	d823      	bhi.n	8024526 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80244de:	68fb      	ldr	r3, [r7, #12]
 80244e0:	681b      	ldr	r3, [r3, #0]
 80244e2:	689b      	ldr	r3, [r3, #8]
 80244e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80244e8:	2b00      	cmp	r3, #0
 80244ea:	d11c      	bne.n	8024526 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80244ec:	68fb      	ldr	r3, [r7, #12]
 80244ee:	681b      	ldr	r3, [r3, #0]
 80244f0:	689a      	ldr	r2, [r3, #8]
 80244f2:	68fb      	ldr	r3, [r7, #12]
 80244f4:	681b      	ldr	r3, [r3, #0]
 80244f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80244fa:	609a      	str	r2, [r3, #8]
 80244fc:	e013      	b.n	8024526 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80244fe:	68fb      	ldr	r3, [r7, #12]
 8024500:	681b      	ldr	r3, [r3, #0]
 8024502:	4a11      	ldr	r2, [pc, #68]	; (8024548 <HAL_ADC_Start_DMA+0x1d8>)
 8024504:	4293      	cmp	r3, r2
 8024506:	d10e      	bne.n	8024526 <HAL_ADC_Start_DMA+0x1b6>
 8024508:	68fb      	ldr	r3, [r7, #12]
 802450a:	681b      	ldr	r3, [r3, #0]
 802450c:	689b      	ldr	r3, [r3, #8]
 802450e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8024512:	2b00      	cmp	r3, #0
 8024514:	d107      	bne.n	8024526 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8024516:	68fb      	ldr	r3, [r7, #12]
 8024518:	681b      	ldr	r3, [r3, #0]
 802451a:	689a      	ldr	r2, [r3, #8]
 802451c:	68fb      	ldr	r3, [r7, #12]
 802451e:	681b      	ldr	r3, [r3, #0]
 8024520:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8024524:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8024526:	2300      	movs	r3, #0
}
 8024528:	4618      	mov	r0, r3
 802452a:	3718      	adds	r7, #24
 802452c:	46bd      	mov	sp, r7
 802452e:	bd80      	pop	{r7, pc}
 8024530:	20000000 	.word	0x20000000
 8024534:	431bde83 	.word	0x431bde83
 8024538:	40012300 	.word	0x40012300
 802453c:	080249cd 	.word	0x080249cd
 8024540:	08024a87 	.word	0x08024a87
 8024544:	08024aa3 	.word	0x08024aa3
 8024548:	40012000 	.word	0x40012000
 802454c:	40012100 	.word	0x40012100
 8024550:	40012200 	.word	0x40012200

08024554 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8024554:	b480      	push	{r7}
 8024556:	b083      	sub	sp, #12
 8024558:	af00      	add	r7, sp, #0
 802455a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 802455c:	bf00      	nop
 802455e:	370c      	adds	r7, #12
 8024560:	46bd      	mov	sp, r7
 8024562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024566:	4770      	bx	lr

08024568 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8024568:	b480      	push	{r7}
 802456a:	b083      	sub	sp, #12
 802456c:	af00      	add	r7, sp, #0
 802456e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8024570:	bf00      	nop
 8024572:	370c      	adds	r7, #12
 8024574:	46bd      	mov	sp, r7
 8024576:	f85d 7b04 	ldr.w	r7, [sp], #4
 802457a:	4770      	bx	lr

0802457c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 802457c:	b480      	push	{r7}
 802457e:	b083      	sub	sp, #12
 8024580:	af00      	add	r7, sp, #0
 8024582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8024584:	bf00      	nop
 8024586:	370c      	adds	r7, #12
 8024588:	46bd      	mov	sp, r7
 802458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802458e:	4770      	bx	lr

08024590 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8024590:	b480      	push	{r7}
 8024592:	b085      	sub	sp, #20
 8024594:	af00      	add	r7, sp, #0
 8024596:	6078      	str	r0, [r7, #4]
 8024598:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 802459a:	2300      	movs	r3, #0
 802459c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 802459e:	687b      	ldr	r3, [r7, #4]
 80245a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80245a4:	2b01      	cmp	r3, #1
 80245a6:	d101      	bne.n	80245ac <HAL_ADC_ConfigChannel+0x1c>
 80245a8:	2302      	movs	r3, #2
 80245aa:	e105      	b.n	80247b8 <HAL_ADC_ConfigChannel+0x228>
 80245ac:	687b      	ldr	r3, [r7, #4]
 80245ae:	2201      	movs	r2, #1
 80245b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80245b4:	683b      	ldr	r3, [r7, #0]
 80245b6:	681b      	ldr	r3, [r3, #0]
 80245b8:	2b09      	cmp	r3, #9
 80245ba:	d925      	bls.n	8024608 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80245bc:	687b      	ldr	r3, [r7, #4]
 80245be:	681b      	ldr	r3, [r3, #0]
 80245c0:	68d9      	ldr	r1, [r3, #12]
 80245c2:	683b      	ldr	r3, [r7, #0]
 80245c4:	681b      	ldr	r3, [r3, #0]
 80245c6:	b29b      	uxth	r3, r3
 80245c8:	461a      	mov	r2, r3
 80245ca:	4613      	mov	r3, r2
 80245cc:	005b      	lsls	r3, r3, #1
 80245ce:	4413      	add	r3, r2
 80245d0:	3b1e      	subs	r3, #30
 80245d2:	2207      	movs	r2, #7
 80245d4:	fa02 f303 	lsl.w	r3, r2, r3
 80245d8:	43da      	mvns	r2, r3
 80245da:	687b      	ldr	r3, [r7, #4]
 80245dc:	681b      	ldr	r3, [r3, #0]
 80245de:	400a      	ands	r2, r1
 80245e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80245e2:	687b      	ldr	r3, [r7, #4]
 80245e4:	681b      	ldr	r3, [r3, #0]
 80245e6:	68d9      	ldr	r1, [r3, #12]
 80245e8:	683b      	ldr	r3, [r7, #0]
 80245ea:	689a      	ldr	r2, [r3, #8]
 80245ec:	683b      	ldr	r3, [r7, #0]
 80245ee:	681b      	ldr	r3, [r3, #0]
 80245f0:	b29b      	uxth	r3, r3
 80245f2:	4618      	mov	r0, r3
 80245f4:	4603      	mov	r3, r0
 80245f6:	005b      	lsls	r3, r3, #1
 80245f8:	4403      	add	r3, r0
 80245fa:	3b1e      	subs	r3, #30
 80245fc:	409a      	lsls	r2, r3
 80245fe:	687b      	ldr	r3, [r7, #4]
 8024600:	681b      	ldr	r3, [r3, #0]
 8024602:	430a      	orrs	r2, r1
 8024604:	60da      	str	r2, [r3, #12]
 8024606:	e022      	b.n	802464e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8024608:	687b      	ldr	r3, [r7, #4]
 802460a:	681b      	ldr	r3, [r3, #0]
 802460c:	6919      	ldr	r1, [r3, #16]
 802460e:	683b      	ldr	r3, [r7, #0]
 8024610:	681b      	ldr	r3, [r3, #0]
 8024612:	b29b      	uxth	r3, r3
 8024614:	461a      	mov	r2, r3
 8024616:	4613      	mov	r3, r2
 8024618:	005b      	lsls	r3, r3, #1
 802461a:	4413      	add	r3, r2
 802461c:	2207      	movs	r2, #7
 802461e:	fa02 f303 	lsl.w	r3, r2, r3
 8024622:	43da      	mvns	r2, r3
 8024624:	687b      	ldr	r3, [r7, #4]
 8024626:	681b      	ldr	r3, [r3, #0]
 8024628:	400a      	ands	r2, r1
 802462a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 802462c:	687b      	ldr	r3, [r7, #4]
 802462e:	681b      	ldr	r3, [r3, #0]
 8024630:	6919      	ldr	r1, [r3, #16]
 8024632:	683b      	ldr	r3, [r7, #0]
 8024634:	689a      	ldr	r2, [r3, #8]
 8024636:	683b      	ldr	r3, [r7, #0]
 8024638:	681b      	ldr	r3, [r3, #0]
 802463a:	b29b      	uxth	r3, r3
 802463c:	4618      	mov	r0, r3
 802463e:	4603      	mov	r3, r0
 8024640:	005b      	lsls	r3, r3, #1
 8024642:	4403      	add	r3, r0
 8024644:	409a      	lsls	r2, r3
 8024646:	687b      	ldr	r3, [r7, #4]
 8024648:	681b      	ldr	r3, [r3, #0]
 802464a:	430a      	orrs	r2, r1
 802464c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 802464e:	683b      	ldr	r3, [r7, #0]
 8024650:	685b      	ldr	r3, [r3, #4]
 8024652:	2b06      	cmp	r3, #6
 8024654:	d824      	bhi.n	80246a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8024656:	687b      	ldr	r3, [r7, #4]
 8024658:	681b      	ldr	r3, [r3, #0]
 802465a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 802465c:	683b      	ldr	r3, [r7, #0]
 802465e:	685a      	ldr	r2, [r3, #4]
 8024660:	4613      	mov	r3, r2
 8024662:	009b      	lsls	r3, r3, #2
 8024664:	4413      	add	r3, r2
 8024666:	3b05      	subs	r3, #5
 8024668:	221f      	movs	r2, #31
 802466a:	fa02 f303 	lsl.w	r3, r2, r3
 802466e:	43da      	mvns	r2, r3
 8024670:	687b      	ldr	r3, [r7, #4]
 8024672:	681b      	ldr	r3, [r3, #0]
 8024674:	400a      	ands	r2, r1
 8024676:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8024678:	687b      	ldr	r3, [r7, #4]
 802467a:	681b      	ldr	r3, [r3, #0]
 802467c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 802467e:	683b      	ldr	r3, [r7, #0]
 8024680:	681b      	ldr	r3, [r3, #0]
 8024682:	b29b      	uxth	r3, r3
 8024684:	4618      	mov	r0, r3
 8024686:	683b      	ldr	r3, [r7, #0]
 8024688:	685a      	ldr	r2, [r3, #4]
 802468a:	4613      	mov	r3, r2
 802468c:	009b      	lsls	r3, r3, #2
 802468e:	4413      	add	r3, r2
 8024690:	3b05      	subs	r3, #5
 8024692:	fa00 f203 	lsl.w	r2, r0, r3
 8024696:	687b      	ldr	r3, [r7, #4]
 8024698:	681b      	ldr	r3, [r3, #0]
 802469a:	430a      	orrs	r2, r1
 802469c:	635a      	str	r2, [r3, #52]	; 0x34
 802469e:	e04c      	b.n	802473a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80246a0:	683b      	ldr	r3, [r7, #0]
 80246a2:	685b      	ldr	r3, [r3, #4]
 80246a4:	2b0c      	cmp	r3, #12
 80246a6:	d824      	bhi.n	80246f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80246a8:	687b      	ldr	r3, [r7, #4]
 80246aa:	681b      	ldr	r3, [r3, #0]
 80246ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80246ae:	683b      	ldr	r3, [r7, #0]
 80246b0:	685a      	ldr	r2, [r3, #4]
 80246b2:	4613      	mov	r3, r2
 80246b4:	009b      	lsls	r3, r3, #2
 80246b6:	4413      	add	r3, r2
 80246b8:	3b23      	subs	r3, #35	; 0x23
 80246ba:	221f      	movs	r2, #31
 80246bc:	fa02 f303 	lsl.w	r3, r2, r3
 80246c0:	43da      	mvns	r2, r3
 80246c2:	687b      	ldr	r3, [r7, #4]
 80246c4:	681b      	ldr	r3, [r3, #0]
 80246c6:	400a      	ands	r2, r1
 80246c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80246ca:	687b      	ldr	r3, [r7, #4]
 80246cc:	681b      	ldr	r3, [r3, #0]
 80246ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80246d0:	683b      	ldr	r3, [r7, #0]
 80246d2:	681b      	ldr	r3, [r3, #0]
 80246d4:	b29b      	uxth	r3, r3
 80246d6:	4618      	mov	r0, r3
 80246d8:	683b      	ldr	r3, [r7, #0]
 80246da:	685a      	ldr	r2, [r3, #4]
 80246dc:	4613      	mov	r3, r2
 80246de:	009b      	lsls	r3, r3, #2
 80246e0:	4413      	add	r3, r2
 80246e2:	3b23      	subs	r3, #35	; 0x23
 80246e4:	fa00 f203 	lsl.w	r2, r0, r3
 80246e8:	687b      	ldr	r3, [r7, #4]
 80246ea:	681b      	ldr	r3, [r3, #0]
 80246ec:	430a      	orrs	r2, r1
 80246ee:	631a      	str	r2, [r3, #48]	; 0x30
 80246f0:	e023      	b.n	802473a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80246f2:	687b      	ldr	r3, [r7, #4]
 80246f4:	681b      	ldr	r3, [r3, #0]
 80246f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80246f8:	683b      	ldr	r3, [r7, #0]
 80246fa:	685a      	ldr	r2, [r3, #4]
 80246fc:	4613      	mov	r3, r2
 80246fe:	009b      	lsls	r3, r3, #2
 8024700:	4413      	add	r3, r2
 8024702:	3b41      	subs	r3, #65	; 0x41
 8024704:	221f      	movs	r2, #31
 8024706:	fa02 f303 	lsl.w	r3, r2, r3
 802470a:	43da      	mvns	r2, r3
 802470c:	687b      	ldr	r3, [r7, #4]
 802470e:	681b      	ldr	r3, [r3, #0]
 8024710:	400a      	ands	r2, r1
 8024712:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8024714:	687b      	ldr	r3, [r7, #4]
 8024716:	681b      	ldr	r3, [r3, #0]
 8024718:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 802471a:	683b      	ldr	r3, [r7, #0]
 802471c:	681b      	ldr	r3, [r3, #0]
 802471e:	b29b      	uxth	r3, r3
 8024720:	4618      	mov	r0, r3
 8024722:	683b      	ldr	r3, [r7, #0]
 8024724:	685a      	ldr	r2, [r3, #4]
 8024726:	4613      	mov	r3, r2
 8024728:	009b      	lsls	r3, r3, #2
 802472a:	4413      	add	r3, r2
 802472c:	3b41      	subs	r3, #65	; 0x41
 802472e:	fa00 f203 	lsl.w	r2, r0, r3
 8024732:	687b      	ldr	r3, [r7, #4]
 8024734:	681b      	ldr	r3, [r3, #0]
 8024736:	430a      	orrs	r2, r1
 8024738:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 802473a:	4b22      	ldr	r3, [pc, #136]	; (80247c4 <HAL_ADC_ConfigChannel+0x234>)
 802473c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 802473e:	687b      	ldr	r3, [r7, #4]
 8024740:	681b      	ldr	r3, [r3, #0]
 8024742:	4a21      	ldr	r2, [pc, #132]	; (80247c8 <HAL_ADC_ConfigChannel+0x238>)
 8024744:	4293      	cmp	r3, r2
 8024746:	d109      	bne.n	802475c <HAL_ADC_ConfigChannel+0x1cc>
 8024748:	683b      	ldr	r3, [r7, #0]
 802474a:	681b      	ldr	r3, [r3, #0]
 802474c:	2b12      	cmp	r3, #18
 802474e:	d105      	bne.n	802475c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8024750:	68fb      	ldr	r3, [r7, #12]
 8024752:	685b      	ldr	r3, [r3, #4]
 8024754:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8024758:	68fb      	ldr	r3, [r7, #12]
 802475a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 802475c:	687b      	ldr	r3, [r7, #4]
 802475e:	681b      	ldr	r3, [r3, #0]
 8024760:	4a19      	ldr	r2, [pc, #100]	; (80247c8 <HAL_ADC_ConfigChannel+0x238>)
 8024762:	4293      	cmp	r3, r2
 8024764:	d123      	bne.n	80247ae <HAL_ADC_ConfigChannel+0x21e>
 8024766:	683b      	ldr	r3, [r7, #0]
 8024768:	681b      	ldr	r3, [r3, #0]
 802476a:	2b10      	cmp	r3, #16
 802476c:	d003      	beq.n	8024776 <HAL_ADC_ConfigChannel+0x1e6>
 802476e:	683b      	ldr	r3, [r7, #0]
 8024770:	681b      	ldr	r3, [r3, #0]
 8024772:	2b11      	cmp	r3, #17
 8024774:	d11b      	bne.n	80247ae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8024776:	68fb      	ldr	r3, [r7, #12]
 8024778:	685b      	ldr	r3, [r3, #4]
 802477a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 802477e:	68fb      	ldr	r3, [r7, #12]
 8024780:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8024782:	683b      	ldr	r3, [r7, #0]
 8024784:	681b      	ldr	r3, [r3, #0]
 8024786:	2b10      	cmp	r3, #16
 8024788:	d111      	bne.n	80247ae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 802478a:	4b10      	ldr	r3, [pc, #64]	; (80247cc <HAL_ADC_ConfigChannel+0x23c>)
 802478c:	681b      	ldr	r3, [r3, #0]
 802478e:	4a10      	ldr	r2, [pc, #64]	; (80247d0 <HAL_ADC_ConfigChannel+0x240>)
 8024790:	fba2 2303 	umull	r2, r3, r2, r3
 8024794:	0c9a      	lsrs	r2, r3, #18
 8024796:	4613      	mov	r3, r2
 8024798:	009b      	lsls	r3, r3, #2
 802479a:	4413      	add	r3, r2
 802479c:	005b      	lsls	r3, r3, #1
 802479e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80247a0:	e002      	b.n	80247a8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80247a2:	68bb      	ldr	r3, [r7, #8]
 80247a4:	3b01      	subs	r3, #1
 80247a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80247a8:	68bb      	ldr	r3, [r7, #8]
 80247aa:	2b00      	cmp	r3, #0
 80247ac:	d1f9      	bne.n	80247a2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80247ae:	687b      	ldr	r3, [r7, #4]
 80247b0:	2200      	movs	r2, #0
 80247b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80247b6:	2300      	movs	r3, #0
}
 80247b8:	4618      	mov	r0, r3
 80247ba:	3714      	adds	r7, #20
 80247bc:	46bd      	mov	sp, r7
 80247be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80247c2:	4770      	bx	lr
 80247c4:	40012300 	.word	0x40012300
 80247c8:	40012000 	.word	0x40012000
 80247cc:	20000000 	.word	0x20000000
 80247d0:	431bde83 	.word	0x431bde83

080247d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80247d4:	b480      	push	{r7}
 80247d6:	b085      	sub	sp, #20
 80247d8:	af00      	add	r7, sp, #0
 80247da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80247dc:	4b79      	ldr	r3, [pc, #484]	; (80249c4 <ADC_Init+0x1f0>)
 80247de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80247e0:	68fb      	ldr	r3, [r7, #12]
 80247e2:	685b      	ldr	r3, [r3, #4]
 80247e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80247e8:	68fb      	ldr	r3, [r7, #12]
 80247ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80247ec:	68fb      	ldr	r3, [r7, #12]
 80247ee:	685a      	ldr	r2, [r3, #4]
 80247f0:	687b      	ldr	r3, [r7, #4]
 80247f2:	685b      	ldr	r3, [r3, #4]
 80247f4:	431a      	orrs	r2, r3
 80247f6:	68fb      	ldr	r3, [r7, #12]
 80247f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80247fa:	687b      	ldr	r3, [r7, #4]
 80247fc:	681b      	ldr	r3, [r3, #0]
 80247fe:	685a      	ldr	r2, [r3, #4]
 8024800:	687b      	ldr	r3, [r7, #4]
 8024802:	681b      	ldr	r3, [r3, #0]
 8024804:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8024808:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 802480a:	687b      	ldr	r3, [r7, #4]
 802480c:	681b      	ldr	r3, [r3, #0]
 802480e:	6859      	ldr	r1, [r3, #4]
 8024810:	687b      	ldr	r3, [r7, #4]
 8024812:	691b      	ldr	r3, [r3, #16]
 8024814:	021a      	lsls	r2, r3, #8
 8024816:	687b      	ldr	r3, [r7, #4]
 8024818:	681b      	ldr	r3, [r3, #0]
 802481a:	430a      	orrs	r2, r1
 802481c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 802481e:	687b      	ldr	r3, [r7, #4]
 8024820:	681b      	ldr	r3, [r3, #0]
 8024822:	685a      	ldr	r2, [r3, #4]
 8024824:	687b      	ldr	r3, [r7, #4]
 8024826:	681b      	ldr	r3, [r3, #0]
 8024828:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 802482c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 802482e:	687b      	ldr	r3, [r7, #4]
 8024830:	681b      	ldr	r3, [r3, #0]
 8024832:	6859      	ldr	r1, [r3, #4]
 8024834:	687b      	ldr	r3, [r7, #4]
 8024836:	689a      	ldr	r2, [r3, #8]
 8024838:	687b      	ldr	r3, [r7, #4]
 802483a:	681b      	ldr	r3, [r3, #0]
 802483c:	430a      	orrs	r2, r1
 802483e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8024840:	687b      	ldr	r3, [r7, #4]
 8024842:	681b      	ldr	r3, [r3, #0]
 8024844:	689a      	ldr	r2, [r3, #8]
 8024846:	687b      	ldr	r3, [r7, #4]
 8024848:	681b      	ldr	r3, [r3, #0]
 802484a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 802484e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8024850:	687b      	ldr	r3, [r7, #4]
 8024852:	681b      	ldr	r3, [r3, #0]
 8024854:	6899      	ldr	r1, [r3, #8]
 8024856:	687b      	ldr	r3, [r7, #4]
 8024858:	68da      	ldr	r2, [r3, #12]
 802485a:	687b      	ldr	r3, [r7, #4]
 802485c:	681b      	ldr	r3, [r3, #0]
 802485e:	430a      	orrs	r2, r1
 8024860:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8024862:	687b      	ldr	r3, [r7, #4]
 8024864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024866:	4a58      	ldr	r2, [pc, #352]	; (80249c8 <ADC_Init+0x1f4>)
 8024868:	4293      	cmp	r3, r2
 802486a:	d022      	beq.n	80248b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 802486c:	687b      	ldr	r3, [r7, #4]
 802486e:	681b      	ldr	r3, [r3, #0]
 8024870:	689a      	ldr	r2, [r3, #8]
 8024872:	687b      	ldr	r3, [r7, #4]
 8024874:	681b      	ldr	r3, [r3, #0]
 8024876:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 802487a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 802487c:	687b      	ldr	r3, [r7, #4]
 802487e:	681b      	ldr	r3, [r3, #0]
 8024880:	6899      	ldr	r1, [r3, #8]
 8024882:	687b      	ldr	r3, [r7, #4]
 8024884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8024886:	687b      	ldr	r3, [r7, #4]
 8024888:	681b      	ldr	r3, [r3, #0]
 802488a:	430a      	orrs	r2, r1
 802488c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 802488e:	687b      	ldr	r3, [r7, #4]
 8024890:	681b      	ldr	r3, [r3, #0]
 8024892:	689a      	ldr	r2, [r3, #8]
 8024894:	687b      	ldr	r3, [r7, #4]
 8024896:	681b      	ldr	r3, [r3, #0]
 8024898:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 802489c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 802489e:	687b      	ldr	r3, [r7, #4]
 80248a0:	681b      	ldr	r3, [r3, #0]
 80248a2:	6899      	ldr	r1, [r3, #8]
 80248a4:	687b      	ldr	r3, [r7, #4]
 80248a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80248a8:	687b      	ldr	r3, [r7, #4]
 80248aa:	681b      	ldr	r3, [r3, #0]
 80248ac:	430a      	orrs	r2, r1
 80248ae:	609a      	str	r2, [r3, #8]
 80248b0:	e00f      	b.n	80248d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80248b2:	687b      	ldr	r3, [r7, #4]
 80248b4:	681b      	ldr	r3, [r3, #0]
 80248b6:	689a      	ldr	r2, [r3, #8]
 80248b8:	687b      	ldr	r3, [r7, #4]
 80248ba:	681b      	ldr	r3, [r3, #0]
 80248bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80248c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80248c2:	687b      	ldr	r3, [r7, #4]
 80248c4:	681b      	ldr	r3, [r3, #0]
 80248c6:	689a      	ldr	r2, [r3, #8]
 80248c8:	687b      	ldr	r3, [r7, #4]
 80248ca:	681b      	ldr	r3, [r3, #0]
 80248cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80248d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80248d2:	687b      	ldr	r3, [r7, #4]
 80248d4:	681b      	ldr	r3, [r3, #0]
 80248d6:	689a      	ldr	r2, [r3, #8]
 80248d8:	687b      	ldr	r3, [r7, #4]
 80248da:	681b      	ldr	r3, [r3, #0]
 80248dc:	f022 0202 	bic.w	r2, r2, #2
 80248e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80248e2:	687b      	ldr	r3, [r7, #4]
 80248e4:	681b      	ldr	r3, [r3, #0]
 80248e6:	6899      	ldr	r1, [r3, #8]
 80248e8:	687b      	ldr	r3, [r7, #4]
 80248ea:	7e1b      	ldrb	r3, [r3, #24]
 80248ec:	005a      	lsls	r2, r3, #1
 80248ee:	687b      	ldr	r3, [r7, #4]
 80248f0:	681b      	ldr	r3, [r3, #0]
 80248f2:	430a      	orrs	r2, r1
 80248f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80248f6:	687b      	ldr	r3, [r7, #4]
 80248f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80248fc:	2b00      	cmp	r3, #0
 80248fe:	d01b      	beq.n	8024938 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8024900:	687b      	ldr	r3, [r7, #4]
 8024902:	681b      	ldr	r3, [r3, #0]
 8024904:	685a      	ldr	r2, [r3, #4]
 8024906:	687b      	ldr	r3, [r7, #4]
 8024908:	681b      	ldr	r3, [r3, #0]
 802490a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802490e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8024910:	687b      	ldr	r3, [r7, #4]
 8024912:	681b      	ldr	r3, [r3, #0]
 8024914:	685a      	ldr	r2, [r3, #4]
 8024916:	687b      	ldr	r3, [r7, #4]
 8024918:	681b      	ldr	r3, [r3, #0]
 802491a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 802491e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8024920:	687b      	ldr	r3, [r7, #4]
 8024922:	681b      	ldr	r3, [r3, #0]
 8024924:	6859      	ldr	r1, [r3, #4]
 8024926:	687b      	ldr	r3, [r7, #4]
 8024928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802492a:	3b01      	subs	r3, #1
 802492c:	035a      	lsls	r2, r3, #13
 802492e:	687b      	ldr	r3, [r7, #4]
 8024930:	681b      	ldr	r3, [r3, #0]
 8024932:	430a      	orrs	r2, r1
 8024934:	605a      	str	r2, [r3, #4]
 8024936:	e007      	b.n	8024948 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8024938:	687b      	ldr	r3, [r7, #4]
 802493a:	681b      	ldr	r3, [r3, #0]
 802493c:	685a      	ldr	r2, [r3, #4]
 802493e:	687b      	ldr	r3, [r7, #4]
 8024940:	681b      	ldr	r3, [r3, #0]
 8024942:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8024946:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8024948:	687b      	ldr	r3, [r7, #4]
 802494a:	681b      	ldr	r3, [r3, #0]
 802494c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802494e:	687b      	ldr	r3, [r7, #4]
 8024950:	681b      	ldr	r3, [r3, #0]
 8024952:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8024956:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8024958:	687b      	ldr	r3, [r7, #4]
 802495a:	681b      	ldr	r3, [r3, #0]
 802495c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 802495e:	687b      	ldr	r3, [r7, #4]
 8024960:	69db      	ldr	r3, [r3, #28]
 8024962:	3b01      	subs	r3, #1
 8024964:	051a      	lsls	r2, r3, #20
 8024966:	687b      	ldr	r3, [r7, #4]
 8024968:	681b      	ldr	r3, [r3, #0]
 802496a:	430a      	orrs	r2, r1
 802496c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 802496e:	687b      	ldr	r3, [r7, #4]
 8024970:	681b      	ldr	r3, [r3, #0]
 8024972:	689a      	ldr	r2, [r3, #8]
 8024974:	687b      	ldr	r3, [r7, #4]
 8024976:	681b      	ldr	r3, [r3, #0]
 8024978:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 802497c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 802497e:	687b      	ldr	r3, [r7, #4]
 8024980:	681b      	ldr	r3, [r3, #0]
 8024982:	6899      	ldr	r1, [r3, #8]
 8024984:	687b      	ldr	r3, [r7, #4]
 8024986:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802498a:	025a      	lsls	r2, r3, #9
 802498c:	687b      	ldr	r3, [r7, #4]
 802498e:	681b      	ldr	r3, [r3, #0]
 8024990:	430a      	orrs	r2, r1
 8024992:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8024994:	687b      	ldr	r3, [r7, #4]
 8024996:	681b      	ldr	r3, [r3, #0]
 8024998:	689a      	ldr	r2, [r3, #8]
 802499a:	687b      	ldr	r3, [r7, #4]
 802499c:	681b      	ldr	r3, [r3, #0]
 802499e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80249a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80249a4:	687b      	ldr	r3, [r7, #4]
 80249a6:	681b      	ldr	r3, [r3, #0]
 80249a8:	6899      	ldr	r1, [r3, #8]
 80249aa:	687b      	ldr	r3, [r7, #4]
 80249ac:	695b      	ldr	r3, [r3, #20]
 80249ae:	029a      	lsls	r2, r3, #10
 80249b0:	687b      	ldr	r3, [r7, #4]
 80249b2:	681b      	ldr	r3, [r3, #0]
 80249b4:	430a      	orrs	r2, r1
 80249b6:	609a      	str	r2, [r3, #8]
}
 80249b8:	bf00      	nop
 80249ba:	3714      	adds	r7, #20
 80249bc:	46bd      	mov	sp, r7
 80249be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80249c2:	4770      	bx	lr
 80249c4:	40012300 	.word	0x40012300
 80249c8:	0f000001 	.word	0x0f000001

080249cc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80249cc:	b580      	push	{r7, lr}
 80249ce:	b084      	sub	sp, #16
 80249d0:	af00      	add	r7, sp, #0
 80249d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80249d4:	687b      	ldr	r3, [r7, #4]
 80249d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80249d8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80249da:	68fb      	ldr	r3, [r7, #12]
 80249dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80249de:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80249e2:	2b00      	cmp	r3, #0
 80249e4:	d13c      	bne.n	8024a60 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80249e6:	68fb      	ldr	r3, [r7, #12]
 80249e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80249ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80249ee:	68fb      	ldr	r3, [r7, #12]
 80249f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80249f2:	68fb      	ldr	r3, [r7, #12]
 80249f4:	681b      	ldr	r3, [r3, #0]
 80249f6:	689b      	ldr	r3, [r3, #8]
 80249f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80249fc:	2b00      	cmp	r3, #0
 80249fe:	d12b      	bne.n	8024a58 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8024a00:	68fb      	ldr	r3, [r7, #12]
 8024a02:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8024a04:	2b00      	cmp	r3, #0
 8024a06:	d127      	bne.n	8024a58 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8024a08:	68fb      	ldr	r3, [r7, #12]
 8024a0a:	681b      	ldr	r3, [r3, #0]
 8024a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024a0e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8024a12:	2b00      	cmp	r3, #0
 8024a14:	d006      	beq.n	8024a24 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8024a16:	68fb      	ldr	r3, [r7, #12]
 8024a18:	681b      	ldr	r3, [r3, #0]
 8024a1a:	689b      	ldr	r3, [r3, #8]
 8024a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8024a20:	2b00      	cmp	r3, #0
 8024a22:	d119      	bne.n	8024a58 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8024a24:	68fb      	ldr	r3, [r7, #12]
 8024a26:	681b      	ldr	r3, [r3, #0]
 8024a28:	685a      	ldr	r2, [r3, #4]
 8024a2a:	68fb      	ldr	r3, [r7, #12]
 8024a2c:	681b      	ldr	r3, [r3, #0]
 8024a2e:	f022 0220 	bic.w	r2, r2, #32
 8024a32:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8024a34:	68fb      	ldr	r3, [r7, #12]
 8024a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8024a3c:	68fb      	ldr	r3, [r7, #12]
 8024a3e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8024a40:	68fb      	ldr	r3, [r7, #12]
 8024a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8024a48:	2b00      	cmp	r3, #0
 8024a4a:	d105      	bne.n	8024a58 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8024a4c:	68fb      	ldr	r3, [r7, #12]
 8024a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a50:	f043 0201 	orr.w	r2, r3, #1
 8024a54:	68fb      	ldr	r3, [r7, #12]
 8024a56:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8024a58:	68f8      	ldr	r0, [r7, #12]
 8024a5a:	f7ff fd7b 	bl	8024554 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8024a5e:	e00e      	b.n	8024a7e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8024a60:	68fb      	ldr	r3, [r7, #12]
 8024a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024a64:	f003 0310 	and.w	r3, r3, #16
 8024a68:	2b00      	cmp	r3, #0
 8024a6a:	d003      	beq.n	8024a74 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8024a6c:	68f8      	ldr	r0, [r7, #12]
 8024a6e:	f7ff fd85 	bl	802457c <HAL_ADC_ErrorCallback>
}
 8024a72:	e004      	b.n	8024a7e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8024a74:	68fb      	ldr	r3, [r7, #12]
 8024a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8024a7a:	6878      	ldr	r0, [r7, #4]
 8024a7c:	4798      	blx	r3
}
 8024a7e:	bf00      	nop
 8024a80:	3710      	adds	r7, #16
 8024a82:	46bd      	mov	sp, r7
 8024a84:	bd80      	pop	{r7, pc}

08024a86 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8024a86:	b580      	push	{r7, lr}
 8024a88:	b084      	sub	sp, #16
 8024a8a:	af00      	add	r7, sp, #0
 8024a8c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8024a8e:	687b      	ldr	r3, [r7, #4]
 8024a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024a92:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8024a94:	68f8      	ldr	r0, [r7, #12]
 8024a96:	f7ff fd67 	bl	8024568 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8024a9a:	bf00      	nop
 8024a9c:	3710      	adds	r7, #16
 8024a9e:	46bd      	mov	sp, r7
 8024aa0:	bd80      	pop	{r7, pc}

08024aa2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8024aa2:	b580      	push	{r7, lr}
 8024aa4:	b084      	sub	sp, #16
 8024aa6:	af00      	add	r7, sp, #0
 8024aa8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8024aaa:	687b      	ldr	r3, [r7, #4]
 8024aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024aae:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8024ab0:	68fb      	ldr	r3, [r7, #12]
 8024ab2:	2240      	movs	r2, #64	; 0x40
 8024ab4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8024ab6:	68fb      	ldr	r3, [r7, #12]
 8024ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024aba:	f043 0204 	orr.w	r2, r3, #4
 8024abe:	68fb      	ldr	r3, [r7, #12]
 8024ac0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8024ac2:	68f8      	ldr	r0, [r7, #12]
 8024ac4:	f7ff fd5a 	bl	802457c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8024ac8:	bf00      	nop
 8024aca:	3710      	adds	r7, #16
 8024acc:	46bd      	mov	sp, r7
 8024ace:	bd80      	pop	{r7, pc}

08024ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8024ad0:	b480      	push	{r7}
 8024ad2:	b085      	sub	sp, #20
 8024ad4:	af00      	add	r7, sp, #0
 8024ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8024ad8:	687b      	ldr	r3, [r7, #4]
 8024ada:	f003 0307 	and.w	r3, r3, #7
 8024ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8024ae0:	4b0c      	ldr	r3, [pc, #48]	; (8024b14 <__NVIC_SetPriorityGrouping+0x44>)
 8024ae2:	68db      	ldr	r3, [r3, #12]
 8024ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8024ae6:	68ba      	ldr	r2, [r7, #8]
 8024ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8024aec:	4013      	ands	r3, r2
 8024aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8024af0:	68fb      	ldr	r3, [r7, #12]
 8024af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8024af4:	68bb      	ldr	r3, [r7, #8]
 8024af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8024af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8024afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8024b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8024b02:	4a04      	ldr	r2, [pc, #16]	; (8024b14 <__NVIC_SetPriorityGrouping+0x44>)
 8024b04:	68bb      	ldr	r3, [r7, #8]
 8024b06:	60d3      	str	r3, [r2, #12]
}
 8024b08:	bf00      	nop
 8024b0a:	3714      	adds	r7, #20
 8024b0c:	46bd      	mov	sp, r7
 8024b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024b12:	4770      	bx	lr
 8024b14:	e000ed00 	.word	0xe000ed00

08024b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8024b18:	b480      	push	{r7}
 8024b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8024b1c:	4b04      	ldr	r3, [pc, #16]	; (8024b30 <__NVIC_GetPriorityGrouping+0x18>)
 8024b1e:	68db      	ldr	r3, [r3, #12]
 8024b20:	0a1b      	lsrs	r3, r3, #8
 8024b22:	f003 0307 	and.w	r3, r3, #7
}
 8024b26:	4618      	mov	r0, r3
 8024b28:	46bd      	mov	sp, r7
 8024b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024b2e:	4770      	bx	lr
 8024b30:	e000ed00 	.word	0xe000ed00

08024b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8024b34:	b480      	push	{r7}
 8024b36:	b083      	sub	sp, #12
 8024b38:	af00      	add	r7, sp, #0
 8024b3a:	4603      	mov	r3, r0
 8024b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8024b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024b42:	2b00      	cmp	r3, #0
 8024b44:	db0b      	blt.n	8024b5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8024b46:	79fb      	ldrb	r3, [r7, #7]
 8024b48:	f003 021f 	and.w	r2, r3, #31
 8024b4c:	4907      	ldr	r1, [pc, #28]	; (8024b6c <__NVIC_EnableIRQ+0x38>)
 8024b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024b52:	095b      	lsrs	r3, r3, #5
 8024b54:	2001      	movs	r0, #1
 8024b56:	fa00 f202 	lsl.w	r2, r0, r2
 8024b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8024b5e:	bf00      	nop
 8024b60:	370c      	adds	r7, #12
 8024b62:	46bd      	mov	sp, r7
 8024b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024b68:	4770      	bx	lr
 8024b6a:	bf00      	nop
 8024b6c:	e000e100 	.word	0xe000e100

08024b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8024b70:	b480      	push	{r7}
 8024b72:	b083      	sub	sp, #12
 8024b74:	af00      	add	r7, sp, #0
 8024b76:	4603      	mov	r3, r0
 8024b78:	6039      	str	r1, [r7, #0]
 8024b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8024b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024b80:	2b00      	cmp	r3, #0
 8024b82:	db0a      	blt.n	8024b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8024b84:	683b      	ldr	r3, [r7, #0]
 8024b86:	b2da      	uxtb	r2, r3
 8024b88:	490c      	ldr	r1, [pc, #48]	; (8024bbc <__NVIC_SetPriority+0x4c>)
 8024b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024b8e:	0112      	lsls	r2, r2, #4
 8024b90:	b2d2      	uxtb	r2, r2
 8024b92:	440b      	add	r3, r1
 8024b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8024b98:	e00a      	b.n	8024bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8024b9a:	683b      	ldr	r3, [r7, #0]
 8024b9c:	b2da      	uxtb	r2, r3
 8024b9e:	4908      	ldr	r1, [pc, #32]	; (8024bc0 <__NVIC_SetPriority+0x50>)
 8024ba0:	79fb      	ldrb	r3, [r7, #7]
 8024ba2:	f003 030f 	and.w	r3, r3, #15
 8024ba6:	3b04      	subs	r3, #4
 8024ba8:	0112      	lsls	r2, r2, #4
 8024baa:	b2d2      	uxtb	r2, r2
 8024bac:	440b      	add	r3, r1
 8024bae:	761a      	strb	r2, [r3, #24]
}
 8024bb0:	bf00      	nop
 8024bb2:	370c      	adds	r7, #12
 8024bb4:	46bd      	mov	sp, r7
 8024bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024bba:	4770      	bx	lr
 8024bbc:	e000e100 	.word	0xe000e100
 8024bc0:	e000ed00 	.word	0xe000ed00

08024bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8024bc4:	b480      	push	{r7}
 8024bc6:	b089      	sub	sp, #36	; 0x24
 8024bc8:	af00      	add	r7, sp, #0
 8024bca:	60f8      	str	r0, [r7, #12]
 8024bcc:	60b9      	str	r1, [r7, #8]
 8024bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8024bd0:	68fb      	ldr	r3, [r7, #12]
 8024bd2:	f003 0307 	and.w	r3, r3, #7
 8024bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8024bd8:	69fb      	ldr	r3, [r7, #28]
 8024bda:	f1c3 0307 	rsb	r3, r3, #7
 8024bde:	2b04      	cmp	r3, #4
 8024be0:	bf28      	it	cs
 8024be2:	2304      	movcs	r3, #4
 8024be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8024be6:	69fb      	ldr	r3, [r7, #28]
 8024be8:	3304      	adds	r3, #4
 8024bea:	2b06      	cmp	r3, #6
 8024bec:	d902      	bls.n	8024bf4 <NVIC_EncodePriority+0x30>
 8024bee:	69fb      	ldr	r3, [r7, #28]
 8024bf0:	3b03      	subs	r3, #3
 8024bf2:	e000      	b.n	8024bf6 <NVIC_EncodePriority+0x32>
 8024bf4:	2300      	movs	r3, #0
 8024bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8024bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8024bfc:	69bb      	ldr	r3, [r7, #24]
 8024bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8024c02:	43da      	mvns	r2, r3
 8024c04:	68bb      	ldr	r3, [r7, #8]
 8024c06:	401a      	ands	r2, r3
 8024c08:	697b      	ldr	r3, [r7, #20]
 8024c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8024c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8024c10:	697b      	ldr	r3, [r7, #20]
 8024c12:	fa01 f303 	lsl.w	r3, r1, r3
 8024c16:	43d9      	mvns	r1, r3
 8024c18:	687b      	ldr	r3, [r7, #4]
 8024c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8024c1c:	4313      	orrs	r3, r2
         );
}
 8024c1e:	4618      	mov	r0, r3
 8024c20:	3724      	adds	r7, #36	; 0x24
 8024c22:	46bd      	mov	sp, r7
 8024c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024c28:	4770      	bx	lr
	...

08024c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8024c2c:	b580      	push	{r7, lr}
 8024c2e:	b082      	sub	sp, #8
 8024c30:	af00      	add	r7, sp, #0
 8024c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8024c34:	687b      	ldr	r3, [r7, #4]
 8024c36:	3b01      	subs	r3, #1
 8024c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8024c3c:	d301      	bcc.n	8024c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8024c3e:	2301      	movs	r3, #1
 8024c40:	e00f      	b.n	8024c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8024c42:	4a0a      	ldr	r2, [pc, #40]	; (8024c6c <SysTick_Config+0x40>)
 8024c44:	687b      	ldr	r3, [r7, #4]
 8024c46:	3b01      	subs	r3, #1
 8024c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8024c4a:	210f      	movs	r1, #15
 8024c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8024c50:	f7ff ff8e 	bl	8024b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8024c54:	4b05      	ldr	r3, [pc, #20]	; (8024c6c <SysTick_Config+0x40>)
 8024c56:	2200      	movs	r2, #0
 8024c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8024c5a:	4b04      	ldr	r3, [pc, #16]	; (8024c6c <SysTick_Config+0x40>)
 8024c5c:	2207      	movs	r2, #7
 8024c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8024c60:	2300      	movs	r3, #0
}
 8024c62:	4618      	mov	r0, r3
 8024c64:	3708      	adds	r7, #8
 8024c66:	46bd      	mov	sp, r7
 8024c68:	bd80      	pop	{r7, pc}
 8024c6a:	bf00      	nop
 8024c6c:	e000e010 	.word	0xe000e010

08024c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8024c70:	b580      	push	{r7, lr}
 8024c72:	b082      	sub	sp, #8
 8024c74:	af00      	add	r7, sp, #0
 8024c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8024c78:	6878      	ldr	r0, [r7, #4]
 8024c7a:	f7ff ff29 	bl	8024ad0 <__NVIC_SetPriorityGrouping>
}
 8024c7e:	bf00      	nop
 8024c80:	3708      	adds	r7, #8
 8024c82:	46bd      	mov	sp, r7
 8024c84:	bd80      	pop	{r7, pc}

08024c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8024c86:	b580      	push	{r7, lr}
 8024c88:	b086      	sub	sp, #24
 8024c8a:	af00      	add	r7, sp, #0
 8024c8c:	4603      	mov	r3, r0
 8024c8e:	60b9      	str	r1, [r7, #8]
 8024c90:	607a      	str	r2, [r7, #4]
 8024c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8024c94:	2300      	movs	r3, #0
 8024c96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8024c98:	f7ff ff3e 	bl	8024b18 <__NVIC_GetPriorityGrouping>
 8024c9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8024c9e:	687a      	ldr	r2, [r7, #4]
 8024ca0:	68b9      	ldr	r1, [r7, #8]
 8024ca2:	6978      	ldr	r0, [r7, #20]
 8024ca4:	f7ff ff8e 	bl	8024bc4 <NVIC_EncodePriority>
 8024ca8:	4602      	mov	r2, r0
 8024caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8024cae:	4611      	mov	r1, r2
 8024cb0:	4618      	mov	r0, r3
 8024cb2:	f7ff ff5d 	bl	8024b70 <__NVIC_SetPriority>
}
 8024cb6:	bf00      	nop
 8024cb8:	3718      	adds	r7, #24
 8024cba:	46bd      	mov	sp, r7
 8024cbc:	bd80      	pop	{r7, pc}

08024cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8024cbe:	b580      	push	{r7, lr}
 8024cc0:	b082      	sub	sp, #8
 8024cc2:	af00      	add	r7, sp, #0
 8024cc4:	4603      	mov	r3, r0
 8024cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8024cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8024ccc:	4618      	mov	r0, r3
 8024cce:	f7ff ff31 	bl	8024b34 <__NVIC_EnableIRQ>
}
 8024cd2:	bf00      	nop
 8024cd4:	3708      	adds	r7, #8
 8024cd6:	46bd      	mov	sp, r7
 8024cd8:	bd80      	pop	{r7, pc}

08024cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8024cda:	b580      	push	{r7, lr}
 8024cdc:	b082      	sub	sp, #8
 8024cde:	af00      	add	r7, sp, #0
 8024ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8024ce2:	6878      	ldr	r0, [r7, #4]
 8024ce4:	f7ff ffa2 	bl	8024c2c <SysTick_Config>
 8024ce8:	4603      	mov	r3, r0
}
 8024cea:	4618      	mov	r0, r3
 8024cec:	3708      	adds	r7, #8
 8024cee:	46bd      	mov	sp, r7
 8024cf0:	bd80      	pop	{r7, pc}
	...

08024cf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8024cf4:	b580      	push	{r7, lr}
 8024cf6:	b086      	sub	sp, #24
 8024cf8:	af00      	add	r7, sp, #0
 8024cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8024cfc:	2300      	movs	r3, #0
 8024cfe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8024d00:	f7ff fac4 	bl	802428c <HAL_GetTick>
 8024d04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8024d06:	687b      	ldr	r3, [r7, #4]
 8024d08:	2b00      	cmp	r3, #0
 8024d0a:	d101      	bne.n	8024d10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8024d0c:	2301      	movs	r3, #1
 8024d0e:	e099      	b.n	8024e44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8024d10:	687b      	ldr	r3, [r7, #4]
 8024d12:	2200      	movs	r2, #0
 8024d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8024d18:	687b      	ldr	r3, [r7, #4]
 8024d1a:	2202      	movs	r2, #2
 8024d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8024d20:	687b      	ldr	r3, [r7, #4]
 8024d22:	681b      	ldr	r3, [r3, #0]
 8024d24:	681a      	ldr	r2, [r3, #0]
 8024d26:	687b      	ldr	r3, [r7, #4]
 8024d28:	681b      	ldr	r3, [r3, #0]
 8024d2a:	f022 0201 	bic.w	r2, r2, #1
 8024d2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8024d30:	e00f      	b.n	8024d52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8024d32:	f7ff faab 	bl	802428c <HAL_GetTick>
 8024d36:	4602      	mov	r2, r0
 8024d38:	693b      	ldr	r3, [r7, #16]
 8024d3a:	1ad3      	subs	r3, r2, r3
 8024d3c:	2b05      	cmp	r3, #5
 8024d3e:	d908      	bls.n	8024d52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8024d40:	687b      	ldr	r3, [r7, #4]
 8024d42:	2220      	movs	r2, #32
 8024d44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8024d46:	687b      	ldr	r3, [r7, #4]
 8024d48:	2203      	movs	r2, #3
 8024d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8024d4e:	2303      	movs	r3, #3
 8024d50:	e078      	b.n	8024e44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8024d52:	687b      	ldr	r3, [r7, #4]
 8024d54:	681b      	ldr	r3, [r3, #0]
 8024d56:	681b      	ldr	r3, [r3, #0]
 8024d58:	f003 0301 	and.w	r3, r3, #1
 8024d5c:	2b00      	cmp	r3, #0
 8024d5e:	d1e8      	bne.n	8024d32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8024d60:	687b      	ldr	r3, [r7, #4]
 8024d62:	681b      	ldr	r3, [r3, #0]
 8024d64:	681b      	ldr	r3, [r3, #0]
 8024d66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8024d68:	697a      	ldr	r2, [r7, #20]
 8024d6a:	4b38      	ldr	r3, [pc, #224]	; (8024e4c <HAL_DMA_Init+0x158>)
 8024d6c:	4013      	ands	r3, r2
 8024d6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8024d70:	687b      	ldr	r3, [r7, #4]
 8024d72:	685a      	ldr	r2, [r3, #4]
 8024d74:	687b      	ldr	r3, [r7, #4]
 8024d76:	689b      	ldr	r3, [r3, #8]
 8024d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8024d7a:	687b      	ldr	r3, [r7, #4]
 8024d7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8024d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8024d80:	687b      	ldr	r3, [r7, #4]
 8024d82:	691b      	ldr	r3, [r3, #16]
 8024d84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8024d86:	687b      	ldr	r3, [r7, #4]
 8024d88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8024d8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8024d8c:	687b      	ldr	r3, [r7, #4]
 8024d8e:	699b      	ldr	r3, [r3, #24]
 8024d90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8024d92:	687b      	ldr	r3, [r7, #4]
 8024d94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8024d96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8024d98:	687b      	ldr	r3, [r7, #4]
 8024d9a:	6a1b      	ldr	r3, [r3, #32]
 8024d9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8024d9e:	697a      	ldr	r2, [r7, #20]
 8024da0:	4313      	orrs	r3, r2
 8024da2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8024da4:	687b      	ldr	r3, [r7, #4]
 8024da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024da8:	2b04      	cmp	r3, #4
 8024daa:	d107      	bne.n	8024dbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8024dac:	687b      	ldr	r3, [r7, #4]
 8024dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8024db0:	687b      	ldr	r3, [r7, #4]
 8024db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024db4:	4313      	orrs	r3, r2
 8024db6:	697a      	ldr	r2, [r7, #20]
 8024db8:	4313      	orrs	r3, r2
 8024dba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8024dbc:	687b      	ldr	r3, [r7, #4]
 8024dbe:	681b      	ldr	r3, [r3, #0]
 8024dc0:	697a      	ldr	r2, [r7, #20]
 8024dc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8024dc4:	687b      	ldr	r3, [r7, #4]
 8024dc6:	681b      	ldr	r3, [r3, #0]
 8024dc8:	695b      	ldr	r3, [r3, #20]
 8024dca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8024dcc:	697b      	ldr	r3, [r7, #20]
 8024dce:	f023 0307 	bic.w	r3, r3, #7
 8024dd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8024dd4:	687b      	ldr	r3, [r7, #4]
 8024dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024dd8:	697a      	ldr	r2, [r7, #20]
 8024dda:	4313      	orrs	r3, r2
 8024ddc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8024dde:	687b      	ldr	r3, [r7, #4]
 8024de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024de2:	2b04      	cmp	r3, #4
 8024de4:	d117      	bne.n	8024e16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8024de6:	687b      	ldr	r3, [r7, #4]
 8024de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024dea:	697a      	ldr	r2, [r7, #20]
 8024dec:	4313      	orrs	r3, r2
 8024dee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8024df0:	687b      	ldr	r3, [r7, #4]
 8024df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024df4:	2b00      	cmp	r3, #0
 8024df6:	d00e      	beq.n	8024e16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8024df8:	6878      	ldr	r0, [r7, #4]
 8024dfa:	f000 fa6f 	bl	80252dc <DMA_CheckFifoParam>
 8024dfe:	4603      	mov	r3, r0
 8024e00:	2b00      	cmp	r3, #0
 8024e02:	d008      	beq.n	8024e16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8024e04:	687b      	ldr	r3, [r7, #4]
 8024e06:	2240      	movs	r2, #64	; 0x40
 8024e08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8024e0a:	687b      	ldr	r3, [r7, #4]
 8024e0c:	2201      	movs	r2, #1
 8024e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8024e12:	2301      	movs	r3, #1
 8024e14:	e016      	b.n	8024e44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8024e16:	687b      	ldr	r3, [r7, #4]
 8024e18:	681b      	ldr	r3, [r3, #0]
 8024e1a:	697a      	ldr	r2, [r7, #20]
 8024e1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8024e1e:	6878      	ldr	r0, [r7, #4]
 8024e20:	f000 fa26 	bl	8025270 <DMA_CalcBaseAndBitshift>
 8024e24:	4603      	mov	r3, r0
 8024e26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8024e28:	687b      	ldr	r3, [r7, #4]
 8024e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024e2c:	223f      	movs	r2, #63	; 0x3f
 8024e2e:	409a      	lsls	r2, r3
 8024e30:	68fb      	ldr	r3, [r7, #12]
 8024e32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8024e34:	687b      	ldr	r3, [r7, #4]
 8024e36:	2200      	movs	r2, #0
 8024e38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8024e3a:	687b      	ldr	r3, [r7, #4]
 8024e3c:	2201      	movs	r2, #1
 8024e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8024e42:	2300      	movs	r3, #0
}
 8024e44:	4618      	mov	r0, r3
 8024e46:	3718      	adds	r7, #24
 8024e48:	46bd      	mov	sp, r7
 8024e4a:	bd80      	pop	{r7, pc}
 8024e4c:	f010803f 	.word	0xf010803f

08024e50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8024e50:	b580      	push	{r7, lr}
 8024e52:	b086      	sub	sp, #24
 8024e54:	af00      	add	r7, sp, #0
 8024e56:	60f8      	str	r0, [r7, #12]
 8024e58:	60b9      	str	r1, [r7, #8]
 8024e5a:	607a      	str	r2, [r7, #4]
 8024e5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8024e5e:	2300      	movs	r3, #0
 8024e60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8024e62:	68fb      	ldr	r3, [r7, #12]
 8024e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024e66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8024e68:	68fb      	ldr	r3, [r7, #12]
 8024e6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8024e6e:	2b01      	cmp	r3, #1
 8024e70:	d101      	bne.n	8024e76 <HAL_DMA_Start_IT+0x26>
 8024e72:	2302      	movs	r3, #2
 8024e74:	e040      	b.n	8024ef8 <HAL_DMA_Start_IT+0xa8>
 8024e76:	68fb      	ldr	r3, [r7, #12]
 8024e78:	2201      	movs	r2, #1
 8024e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8024e7e:	68fb      	ldr	r3, [r7, #12]
 8024e80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8024e84:	b2db      	uxtb	r3, r3
 8024e86:	2b01      	cmp	r3, #1
 8024e88:	d12f      	bne.n	8024eea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8024e8a:	68fb      	ldr	r3, [r7, #12]
 8024e8c:	2202      	movs	r2, #2
 8024e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8024e92:	68fb      	ldr	r3, [r7, #12]
 8024e94:	2200      	movs	r2, #0
 8024e96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8024e98:	683b      	ldr	r3, [r7, #0]
 8024e9a:	687a      	ldr	r2, [r7, #4]
 8024e9c:	68b9      	ldr	r1, [r7, #8]
 8024e9e:	68f8      	ldr	r0, [r7, #12]
 8024ea0:	f000 f9b8 	bl	8025214 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8024ea4:	68fb      	ldr	r3, [r7, #12]
 8024ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024ea8:	223f      	movs	r2, #63	; 0x3f
 8024eaa:	409a      	lsls	r2, r3
 8024eac:	693b      	ldr	r3, [r7, #16]
 8024eae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8024eb0:	68fb      	ldr	r3, [r7, #12]
 8024eb2:	681b      	ldr	r3, [r3, #0]
 8024eb4:	681a      	ldr	r2, [r3, #0]
 8024eb6:	68fb      	ldr	r3, [r7, #12]
 8024eb8:	681b      	ldr	r3, [r3, #0]
 8024eba:	f042 0216 	orr.w	r2, r2, #22
 8024ebe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8024ec0:	68fb      	ldr	r3, [r7, #12]
 8024ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8024ec4:	2b00      	cmp	r3, #0
 8024ec6:	d007      	beq.n	8024ed8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8024ec8:	68fb      	ldr	r3, [r7, #12]
 8024eca:	681b      	ldr	r3, [r3, #0]
 8024ecc:	681a      	ldr	r2, [r3, #0]
 8024ece:	68fb      	ldr	r3, [r7, #12]
 8024ed0:	681b      	ldr	r3, [r3, #0]
 8024ed2:	f042 0208 	orr.w	r2, r2, #8
 8024ed6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8024ed8:	68fb      	ldr	r3, [r7, #12]
 8024eda:	681b      	ldr	r3, [r3, #0]
 8024edc:	681a      	ldr	r2, [r3, #0]
 8024ede:	68fb      	ldr	r3, [r7, #12]
 8024ee0:	681b      	ldr	r3, [r3, #0]
 8024ee2:	f042 0201 	orr.w	r2, r2, #1
 8024ee6:	601a      	str	r2, [r3, #0]
 8024ee8:	e005      	b.n	8024ef6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8024eea:	68fb      	ldr	r3, [r7, #12]
 8024eec:	2200      	movs	r2, #0
 8024eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8024ef2:	2302      	movs	r3, #2
 8024ef4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8024ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8024ef8:	4618      	mov	r0, r3
 8024efa:	3718      	adds	r7, #24
 8024efc:	46bd      	mov	sp, r7
 8024efe:	bd80      	pop	{r7, pc}

08024f00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8024f00:	b580      	push	{r7, lr}
 8024f02:	b086      	sub	sp, #24
 8024f04:	af00      	add	r7, sp, #0
 8024f06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8024f08:	2300      	movs	r3, #0
 8024f0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8024f0c:	4b92      	ldr	r3, [pc, #584]	; (8025158 <HAL_DMA_IRQHandler+0x258>)
 8024f0e:	681b      	ldr	r3, [r3, #0]
 8024f10:	4a92      	ldr	r2, [pc, #584]	; (802515c <HAL_DMA_IRQHandler+0x25c>)
 8024f12:	fba2 2303 	umull	r2, r3, r2, r3
 8024f16:	0a9b      	lsrs	r3, r3, #10
 8024f18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8024f1a:	687b      	ldr	r3, [r7, #4]
 8024f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024f1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8024f20:	693b      	ldr	r3, [r7, #16]
 8024f22:	681b      	ldr	r3, [r3, #0]
 8024f24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8024f26:	687b      	ldr	r3, [r7, #4]
 8024f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024f2a:	2208      	movs	r2, #8
 8024f2c:	409a      	lsls	r2, r3
 8024f2e:	68fb      	ldr	r3, [r7, #12]
 8024f30:	4013      	ands	r3, r2
 8024f32:	2b00      	cmp	r3, #0
 8024f34:	d01a      	beq.n	8024f6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8024f36:	687b      	ldr	r3, [r7, #4]
 8024f38:	681b      	ldr	r3, [r3, #0]
 8024f3a:	681b      	ldr	r3, [r3, #0]
 8024f3c:	f003 0304 	and.w	r3, r3, #4
 8024f40:	2b00      	cmp	r3, #0
 8024f42:	d013      	beq.n	8024f6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8024f44:	687b      	ldr	r3, [r7, #4]
 8024f46:	681b      	ldr	r3, [r3, #0]
 8024f48:	681a      	ldr	r2, [r3, #0]
 8024f4a:	687b      	ldr	r3, [r7, #4]
 8024f4c:	681b      	ldr	r3, [r3, #0]
 8024f4e:	f022 0204 	bic.w	r2, r2, #4
 8024f52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8024f54:	687b      	ldr	r3, [r7, #4]
 8024f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024f58:	2208      	movs	r2, #8
 8024f5a:	409a      	lsls	r2, r3
 8024f5c:	693b      	ldr	r3, [r7, #16]
 8024f5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8024f60:	687b      	ldr	r3, [r7, #4]
 8024f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024f64:	f043 0201 	orr.w	r2, r3, #1
 8024f68:	687b      	ldr	r3, [r7, #4]
 8024f6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8024f6c:	687b      	ldr	r3, [r7, #4]
 8024f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024f70:	2201      	movs	r2, #1
 8024f72:	409a      	lsls	r2, r3
 8024f74:	68fb      	ldr	r3, [r7, #12]
 8024f76:	4013      	ands	r3, r2
 8024f78:	2b00      	cmp	r3, #0
 8024f7a:	d012      	beq.n	8024fa2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8024f7c:	687b      	ldr	r3, [r7, #4]
 8024f7e:	681b      	ldr	r3, [r3, #0]
 8024f80:	695b      	ldr	r3, [r3, #20]
 8024f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8024f86:	2b00      	cmp	r3, #0
 8024f88:	d00b      	beq.n	8024fa2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8024f8a:	687b      	ldr	r3, [r7, #4]
 8024f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024f8e:	2201      	movs	r2, #1
 8024f90:	409a      	lsls	r2, r3
 8024f92:	693b      	ldr	r3, [r7, #16]
 8024f94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8024f96:	687b      	ldr	r3, [r7, #4]
 8024f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024f9a:	f043 0202 	orr.w	r2, r3, #2
 8024f9e:	687b      	ldr	r3, [r7, #4]
 8024fa0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8024fa2:	687b      	ldr	r3, [r7, #4]
 8024fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024fa6:	2204      	movs	r2, #4
 8024fa8:	409a      	lsls	r2, r3
 8024faa:	68fb      	ldr	r3, [r7, #12]
 8024fac:	4013      	ands	r3, r2
 8024fae:	2b00      	cmp	r3, #0
 8024fb0:	d012      	beq.n	8024fd8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8024fb2:	687b      	ldr	r3, [r7, #4]
 8024fb4:	681b      	ldr	r3, [r3, #0]
 8024fb6:	681b      	ldr	r3, [r3, #0]
 8024fb8:	f003 0302 	and.w	r3, r3, #2
 8024fbc:	2b00      	cmp	r3, #0
 8024fbe:	d00b      	beq.n	8024fd8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8024fc0:	687b      	ldr	r3, [r7, #4]
 8024fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024fc4:	2204      	movs	r2, #4
 8024fc6:	409a      	lsls	r2, r3
 8024fc8:	693b      	ldr	r3, [r7, #16]
 8024fca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8024fcc:	687b      	ldr	r3, [r7, #4]
 8024fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024fd0:	f043 0204 	orr.w	r2, r3, #4
 8024fd4:	687b      	ldr	r3, [r7, #4]
 8024fd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8024fd8:	687b      	ldr	r3, [r7, #4]
 8024fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024fdc:	2210      	movs	r2, #16
 8024fde:	409a      	lsls	r2, r3
 8024fe0:	68fb      	ldr	r3, [r7, #12]
 8024fe2:	4013      	ands	r3, r2
 8024fe4:	2b00      	cmp	r3, #0
 8024fe6:	d043      	beq.n	8025070 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8024fe8:	687b      	ldr	r3, [r7, #4]
 8024fea:	681b      	ldr	r3, [r3, #0]
 8024fec:	681b      	ldr	r3, [r3, #0]
 8024fee:	f003 0308 	and.w	r3, r3, #8
 8024ff2:	2b00      	cmp	r3, #0
 8024ff4:	d03c      	beq.n	8025070 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8024ff6:	687b      	ldr	r3, [r7, #4]
 8024ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024ffa:	2210      	movs	r2, #16
 8024ffc:	409a      	lsls	r2, r3
 8024ffe:	693b      	ldr	r3, [r7, #16]
 8025000:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8025002:	687b      	ldr	r3, [r7, #4]
 8025004:	681b      	ldr	r3, [r3, #0]
 8025006:	681b      	ldr	r3, [r3, #0]
 8025008:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 802500c:	2b00      	cmp	r3, #0
 802500e:	d018      	beq.n	8025042 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8025010:	687b      	ldr	r3, [r7, #4]
 8025012:	681b      	ldr	r3, [r3, #0]
 8025014:	681b      	ldr	r3, [r3, #0]
 8025016:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802501a:	2b00      	cmp	r3, #0
 802501c:	d108      	bne.n	8025030 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 802501e:	687b      	ldr	r3, [r7, #4]
 8025020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025022:	2b00      	cmp	r3, #0
 8025024:	d024      	beq.n	8025070 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8025026:	687b      	ldr	r3, [r7, #4]
 8025028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802502a:	6878      	ldr	r0, [r7, #4]
 802502c:	4798      	blx	r3
 802502e:	e01f      	b.n	8025070 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8025030:	687b      	ldr	r3, [r7, #4]
 8025032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8025034:	2b00      	cmp	r3, #0
 8025036:	d01b      	beq.n	8025070 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8025038:	687b      	ldr	r3, [r7, #4]
 802503a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802503c:	6878      	ldr	r0, [r7, #4]
 802503e:	4798      	blx	r3
 8025040:	e016      	b.n	8025070 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8025042:	687b      	ldr	r3, [r7, #4]
 8025044:	681b      	ldr	r3, [r3, #0]
 8025046:	681b      	ldr	r3, [r3, #0]
 8025048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802504c:	2b00      	cmp	r3, #0
 802504e:	d107      	bne.n	8025060 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8025050:	687b      	ldr	r3, [r7, #4]
 8025052:	681b      	ldr	r3, [r3, #0]
 8025054:	681a      	ldr	r2, [r3, #0]
 8025056:	687b      	ldr	r3, [r7, #4]
 8025058:	681b      	ldr	r3, [r3, #0]
 802505a:	f022 0208 	bic.w	r2, r2, #8
 802505e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8025060:	687b      	ldr	r3, [r7, #4]
 8025062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025064:	2b00      	cmp	r3, #0
 8025066:	d003      	beq.n	8025070 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8025068:	687b      	ldr	r3, [r7, #4]
 802506a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802506c:	6878      	ldr	r0, [r7, #4]
 802506e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8025070:	687b      	ldr	r3, [r7, #4]
 8025072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8025074:	2220      	movs	r2, #32
 8025076:	409a      	lsls	r2, r3
 8025078:	68fb      	ldr	r3, [r7, #12]
 802507a:	4013      	ands	r3, r2
 802507c:	2b00      	cmp	r3, #0
 802507e:	f000 808e 	beq.w	802519e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8025082:	687b      	ldr	r3, [r7, #4]
 8025084:	681b      	ldr	r3, [r3, #0]
 8025086:	681b      	ldr	r3, [r3, #0]
 8025088:	f003 0310 	and.w	r3, r3, #16
 802508c:	2b00      	cmp	r3, #0
 802508e:	f000 8086 	beq.w	802519e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8025092:	687b      	ldr	r3, [r7, #4]
 8025094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8025096:	2220      	movs	r2, #32
 8025098:	409a      	lsls	r2, r3
 802509a:	693b      	ldr	r3, [r7, #16]
 802509c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 802509e:	687b      	ldr	r3, [r7, #4]
 80250a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80250a4:	b2db      	uxtb	r3, r3
 80250a6:	2b05      	cmp	r3, #5
 80250a8:	d136      	bne.n	8025118 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80250aa:	687b      	ldr	r3, [r7, #4]
 80250ac:	681b      	ldr	r3, [r3, #0]
 80250ae:	681a      	ldr	r2, [r3, #0]
 80250b0:	687b      	ldr	r3, [r7, #4]
 80250b2:	681b      	ldr	r3, [r3, #0]
 80250b4:	f022 0216 	bic.w	r2, r2, #22
 80250b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80250ba:	687b      	ldr	r3, [r7, #4]
 80250bc:	681b      	ldr	r3, [r3, #0]
 80250be:	695a      	ldr	r2, [r3, #20]
 80250c0:	687b      	ldr	r3, [r7, #4]
 80250c2:	681b      	ldr	r3, [r3, #0]
 80250c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80250c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80250ca:	687b      	ldr	r3, [r7, #4]
 80250cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80250ce:	2b00      	cmp	r3, #0
 80250d0:	d103      	bne.n	80250da <HAL_DMA_IRQHandler+0x1da>
 80250d2:	687b      	ldr	r3, [r7, #4]
 80250d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80250d6:	2b00      	cmp	r3, #0
 80250d8:	d007      	beq.n	80250ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80250da:	687b      	ldr	r3, [r7, #4]
 80250dc:	681b      	ldr	r3, [r3, #0]
 80250de:	681a      	ldr	r2, [r3, #0]
 80250e0:	687b      	ldr	r3, [r7, #4]
 80250e2:	681b      	ldr	r3, [r3, #0]
 80250e4:	f022 0208 	bic.w	r2, r2, #8
 80250e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80250ea:	687b      	ldr	r3, [r7, #4]
 80250ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80250ee:	223f      	movs	r2, #63	; 0x3f
 80250f0:	409a      	lsls	r2, r3
 80250f2:	693b      	ldr	r3, [r7, #16]
 80250f4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80250f6:	687b      	ldr	r3, [r7, #4]
 80250f8:	2200      	movs	r2, #0
 80250fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80250fe:	687b      	ldr	r3, [r7, #4]
 8025100:	2201      	movs	r2, #1
 8025102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8025106:	687b      	ldr	r3, [r7, #4]
 8025108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802510a:	2b00      	cmp	r3, #0
 802510c:	d07d      	beq.n	802520a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 802510e:	687b      	ldr	r3, [r7, #4]
 8025110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8025112:	6878      	ldr	r0, [r7, #4]
 8025114:	4798      	blx	r3
        }
        return;
 8025116:	e078      	b.n	802520a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8025118:	687b      	ldr	r3, [r7, #4]
 802511a:	681b      	ldr	r3, [r3, #0]
 802511c:	681b      	ldr	r3, [r3, #0]
 802511e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8025122:	2b00      	cmp	r3, #0
 8025124:	d01c      	beq.n	8025160 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8025126:	687b      	ldr	r3, [r7, #4]
 8025128:	681b      	ldr	r3, [r3, #0]
 802512a:	681b      	ldr	r3, [r3, #0]
 802512c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8025130:	2b00      	cmp	r3, #0
 8025132:	d108      	bne.n	8025146 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8025134:	687b      	ldr	r3, [r7, #4]
 8025136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025138:	2b00      	cmp	r3, #0
 802513a:	d030      	beq.n	802519e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 802513c:	687b      	ldr	r3, [r7, #4]
 802513e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8025140:	6878      	ldr	r0, [r7, #4]
 8025142:	4798      	blx	r3
 8025144:	e02b      	b.n	802519e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8025146:	687b      	ldr	r3, [r7, #4]
 8025148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802514a:	2b00      	cmp	r3, #0
 802514c:	d027      	beq.n	802519e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 802514e:	687b      	ldr	r3, [r7, #4]
 8025150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025152:	6878      	ldr	r0, [r7, #4]
 8025154:	4798      	blx	r3
 8025156:	e022      	b.n	802519e <HAL_DMA_IRQHandler+0x29e>
 8025158:	20000000 	.word	0x20000000
 802515c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8025160:	687b      	ldr	r3, [r7, #4]
 8025162:	681b      	ldr	r3, [r3, #0]
 8025164:	681b      	ldr	r3, [r3, #0]
 8025166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802516a:	2b00      	cmp	r3, #0
 802516c:	d10f      	bne.n	802518e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 802516e:	687b      	ldr	r3, [r7, #4]
 8025170:	681b      	ldr	r3, [r3, #0]
 8025172:	681a      	ldr	r2, [r3, #0]
 8025174:	687b      	ldr	r3, [r7, #4]
 8025176:	681b      	ldr	r3, [r3, #0]
 8025178:	f022 0210 	bic.w	r2, r2, #16
 802517c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 802517e:	687b      	ldr	r3, [r7, #4]
 8025180:	2200      	movs	r2, #0
 8025182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8025186:	687b      	ldr	r3, [r7, #4]
 8025188:	2201      	movs	r2, #1
 802518a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 802518e:	687b      	ldr	r3, [r7, #4]
 8025190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025192:	2b00      	cmp	r3, #0
 8025194:	d003      	beq.n	802519e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8025196:	687b      	ldr	r3, [r7, #4]
 8025198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802519a:	6878      	ldr	r0, [r7, #4]
 802519c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 802519e:	687b      	ldr	r3, [r7, #4]
 80251a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80251a2:	2b00      	cmp	r3, #0
 80251a4:	d032      	beq.n	802520c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80251a6:	687b      	ldr	r3, [r7, #4]
 80251a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80251aa:	f003 0301 	and.w	r3, r3, #1
 80251ae:	2b00      	cmp	r3, #0
 80251b0:	d022      	beq.n	80251f8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80251b2:	687b      	ldr	r3, [r7, #4]
 80251b4:	2205      	movs	r2, #5
 80251b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80251ba:	687b      	ldr	r3, [r7, #4]
 80251bc:	681b      	ldr	r3, [r3, #0]
 80251be:	681a      	ldr	r2, [r3, #0]
 80251c0:	687b      	ldr	r3, [r7, #4]
 80251c2:	681b      	ldr	r3, [r3, #0]
 80251c4:	f022 0201 	bic.w	r2, r2, #1
 80251c8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80251ca:	68bb      	ldr	r3, [r7, #8]
 80251cc:	3301      	adds	r3, #1
 80251ce:	60bb      	str	r3, [r7, #8]
 80251d0:	697a      	ldr	r2, [r7, #20]
 80251d2:	429a      	cmp	r2, r3
 80251d4:	d307      	bcc.n	80251e6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80251d6:	687b      	ldr	r3, [r7, #4]
 80251d8:	681b      	ldr	r3, [r3, #0]
 80251da:	681b      	ldr	r3, [r3, #0]
 80251dc:	f003 0301 	and.w	r3, r3, #1
 80251e0:	2b00      	cmp	r3, #0
 80251e2:	d1f2      	bne.n	80251ca <HAL_DMA_IRQHandler+0x2ca>
 80251e4:	e000      	b.n	80251e8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80251e6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80251e8:	687b      	ldr	r3, [r7, #4]
 80251ea:	2200      	movs	r2, #0
 80251ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80251f0:	687b      	ldr	r3, [r7, #4]
 80251f2:	2201      	movs	r2, #1
 80251f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80251f8:	687b      	ldr	r3, [r7, #4]
 80251fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80251fc:	2b00      	cmp	r3, #0
 80251fe:	d005      	beq.n	802520c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8025200:	687b      	ldr	r3, [r7, #4]
 8025202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8025204:	6878      	ldr	r0, [r7, #4]
 8025206:	4798      	blx	r3
 8025208:	e000      	b.n	802520c <HAL_DMA_IRQHandler+0x30c>
        return;
 802520a:	bf00      	nop
    }
  }
}
 802520c:	3718      	adds	r7, #24
 802520e:	46bd      	mov	sp, r7
 8025210:	bd80      	pop	{r7, pc}
 8025212:	bf00      	nop

08025214 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8025214:	b480      	push	{r7}
 8025216:	b085      	sub	sp, #20
 8025218:	af00      	add	r7, sp, #0
 802521a:	60f8      	str	r0, [r7, #12]
 802521c:	60b9      	str	r1, [r7, #8]
 802521e:	607a      	str	r2, [r7, #4]
 8025220:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8025222:	68fb      	ldr	r3, [r7, #12]
 8025224:	681b      	ldr	r3, [r3, #0]
 8025226:	681a      	ldr	r2, [r3, #0]
 8025228:	68fb      	ldr	r3, [r7, #12]
 802522a:	681b      	ldr	r3, [r3, #0]
 802522c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8025230:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8025232:	68fb      	ldr	r3, [r7, #12]
 8025234:	681b      	ldr	r3, [r3, #0]
 8025236:	683a      	ldr	r2, [r7, #0]
 8025238:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 802523a:	68fb      	ldr	r3, [r7, #12]
 802523c:	689b      	ldr	r3, [r3, #8]
 802523e:	2b40      	cmp	r3, #64	; 0x40
 8025240:	d108      	bne.n	8025254 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8025242:	68fb      	ldr	r3, [r7, #12]
 8025244:	681b      	ldr	r3, [r3, #0]
 8025246:	687a      	ldr	r2, [r7, #4]
 8025248:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 802524a:	68fb      	ldr	r3, [r7, #12]
 802524c:	681b      	ldr	r3, [r3, #0]
 802524e:	68ba      	ldr	r2, [r7, #8]
 8025250:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8025252:	e007      	b.n	8025264 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8025254:	68fb      	ldr	r3, [r7, #12]
 8025256:	681b      	ldr	r3, [r3, #0]
 8025258:	68ba      	ldr	r2, [r7, #8]
 802525a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 802525c:	68fb      	ldr	r3, [r7, #12]
 802525e:	681b      	ldr	r3, [r3, #0]
 8025260:	687a      	ldr	r2, [r7, #4]
 8025262:	60da      	str	r2, [r3, #12]
}
 8025264:	bf00      	nop
 8025266:	3714      	adds	r7, #20
 8025268:	46bd      	mov	sp, r7
 802526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802526e:	4770      	bx	lr

08025270 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8025270:	b480      	push	{r7}
 8025272:	b085      	sub	sp, #20
 8025274:	af00      	add	r7, sp, #0
 8025276:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8025278:	687b      	ldr	r3, [r7, #4]
 802527a:	681b      	ldr	r3, [r3, #0]
 802527c:	b2db      	uxtb	r3, r3
 802527e:	3b10      	subs	r3, #16
 8025280:	4a14      	ldr	r2, [pc, #80]	; (80252d4 <DMA_CalcBaseAndBitshift+0x64>)
 8025282:	fba2 2303 	umull	r2, r3, r2, r3
 8025286:	091b      	lsrs	r3, r3, #4
 8025288:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 802528a:	4a13      	ldr	r2, [pc, #76]	; (80252d8 <DMA_CalcBaseAndBitshift+0x68>)
 802528c:	68fb      	ldr	r3, [r7, #12]
 802528e:	4413      	add	r3, r2
 8025290:	781b      	ldrb	r3, [r3, #0]
 8025292:	461a      	mov	r2, r3
 8025294:	687b      	ldr	r3, [r7, #4]
 8025296:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8025298:	68fb      	ldr	r3, [r7, #12]
 802529a:	2b03      	cmp	r3, #3
 802529c:	d909      	bls.n	80252b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 802529e:	687b      	ldr	r3, [r7, #4]
 80252a0:	681b      	ldr	r3, [r3, #0]
 80252a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80252a6:	f023 0303 	bic.w	r3, r3, #3
 80252aa:	1d1a      	adds	r2, r3, #4
 80252ac:	687b      	ldr	r3, [r7, #4]
 80252ae:	659a      	str	r2, [r3, #88]	; 0x58
 80252b0:	e007      	b.n	80252c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80252b2:	687b      	ldr	r3, [r7, #4]
 80252b4:	681b      	ldr	r3, [r3, #0]
 80252b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80252ba:	f023 0303 	bic.w	r3, r3, #3
 80252be:	687a      	ldr	r2, [r7, #4]
 80252c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80252c2:	687b      	ldr	r3, [r7, #4]
 80252c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80252c6:	4618      	mov	r0, r3
 80252c8:	3714      	adds	r7, #20
 80252ca:	46bd      	mov	sp, r7
 80252cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252d0:	4770      	bx	lr
 80252d2:	bf00      	nop
 80252d4:	aaaaaaab 	.word	0xaaaaaaab
 80252d8:	080273dc 	.word	0x080273dc

080252dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80252dc:	b480      	push	{r7}
 80252de:	b085      	sub	sp, #20
 80252e0:	af00      	add	r7, sp, #0
 80252e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80252e4:	2300      	movs	r3, #0
 80252e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80252e8:	687b      	ldr	r3, [r7, #4]
 80252ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80252ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80252ee:	687b      	ldr	r3, [r7, #4]
 80252f0:	699b      	ldr	r3, [r3, #24]
 80252f2:	2b00      	cmp	r3, #0
 80252f4:	d11f      	bne.n	8025336 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80252f6:	68bb      	ldr	r3, [r7, #8]
 80252f8:	2b03      	cmp	r3, #3
 80252fa:	d855      	bhi.n	80253a8 <DMA_CheckFifoParam+0xcc>
 80252fc:	a201      	add	r2, pc, #4	; (adr r2, 8025304 <DMA_CheckFifoParam+0x28>)
 80252fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8025302:	bf00      	nop
 8025304:	08025315 	.word	0x08025315
 8025308:	08025327 	.word	0x08025327
 802530c:	08025315 	.word	0x08025315
 8025310:	080253a9 	.word	0x080253a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8025314:	687b      	ldr	r3, [r7, #4]
 8025316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025318:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802531c:	2b00      	cmp	r3, #0
 802531e:	d045      	beq.n	80253ac <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8025320:	2301      	movs	r3, #1
 8025322:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8025324:	e042      	b.n	80253ac <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8025326:	687b      	ldr	r3, [r7, #4]
 8025328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802532a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802532e:	d13f      	bne.n	80253b0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8025330:	2301      	movs	r3, #1
 8025332:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8025334:	e03c      	b.n	80253b0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8025336:	687b      	ldr	r3, [r7, #4]
 8025338:	699b      	ldr	r3, [r3, #24]
 802533a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 802533e:	d121      	bne.n	8025384 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8025340:	68bb      	ldr	r3, [r7, #8]
 8025342:	2b03      	cmp	r3, #3
 8025344:	d836      	bhi.n	80253b4 <DMA_CheckFifoParam+0xd8>
 8025346:	a201      	add	r2, pc, #4	; (adr r2, 802534c <DMA_CheckFifoParam+0x70>)
 8025348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802534c:	0802535d 	.word	0x0802535d
 8025350:	08025363 	.word	0x08025363
 8025354:	0802535d 	.word	0x0802535d
 8025358:	08025375 	.word	0x08025375
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 802535c:	2301      	movs	r3, #1
 802535e:	73fb      	strb	r3, [r7, #15]
      break;
 8025360:	e02f      	b.n	80253c2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8025362:	687b      	ldr	r3, [r7, #4]
 8025364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025366:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802536a:	2b00      	cmp	r3, #0
 802536c:	d024      	beq.n	80253b8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 802536e:	2301      	movs	r3, #1
 8025370:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8025372:	e021      	b.n	80253b8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8025374:	687b      	ldr	r3, [r7, #4]
 8025376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025378:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 802537c:	d11e      	bne.n	80253bc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 802537e:	2301      	movs	r3, #1
 8025380:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8025382:	e01b      	b.n	80253bc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8025384:	68bb      	ldr	r3, [r7, #8]
 8025386:	2b02      	cmp	r3, #2
 8025388:	d902      	bls.n	8025390 <DMA_CheckFifoParam+0xb4>
 802538a:	2b03      	cmp	r3, #3
 802538c:	d003      	beq.n	8025396 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 802538e:	e018      	b.n	80253c2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8025390:	2301      	movs	r3, #1
 8025392:	73fb      	strb	r3, [r7, #15]
      break;
 8025394:	e015      	b.n	80253c2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8025396:	687b      	ldr	r3, [r7, #4]
 8025398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802539a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 802539e:	2b00      	cmp	r3, #0
 80253a0:	d00e      	beq.n	80253c0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80253a2:	2301      	movs	r3, #1
 80253a4:	73fb      	strb	r3, [r7, #15]
      break;
 80253a6:	e00b      	b.n	80253c0 <DMA_CheckFifoParam+0xe4>
      break;
 80253a8:	bf00      	nop
 80253aa:	e00a      	b.n	80253c2 <DMA_CheckFifoParam+0xe6>
      break;
 80253ac:	bf00      	nop
 80253ae:	e008      	b.n	80253c2 <DMA_CheckFifoParam+0xe6>
      break;
 80253b0:	bf00      	nop
 80253b2:	e006      	b.n	80253c2 <DMA_CheckFifoParam+0xe6>
      break;
 80253b4:	bf00      	nop
 80253b6:	e004      	b.n	80253c2 <DMA_CheckFifoParam+0xe6>
      break;
 80253b8:	bf00      	nop
 80253ba:	e002      	b.n	80253c2 <DMA_CheckFifoParam+0xe6>
      break;   
 80253bc:	bf00      	nop
 80253be:	e000      	b.n	80253c2 <DMA_CheckFifoParam+0xe6>
      break;
 80253c0:	bf00      	nop
    }
  } 
  
  return status; 
 80253c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80253c4:	4618      	mov	r0, r3
 80253c6:	3714      	adds	r7, #20
 80253c8:	46bd      	mov	sp, r7
 80253ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80253ce:	4770      	bx	lr

080253d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80253d0:	b480      	push	{r7}
 80253d2:	b089      	sub	sp, #36	; 0x24
 80253d4:	af00      	add	r7, sp, #0
 80253d6:	6078      	str	r0, [r7, #4]
 80253d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80253da:	2300      	movs	r3, #0
 80253dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80253de:	2300      	movs	r3, #0
 80253e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80253e2:	2300      	movs	r3, #0
 80253e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80253e6:	2300      	movs	r3, #0
 80253e8:	61fb      	str	r3, [r7, #28]
 80253ea:	e16b      	b.n	80256c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80253ec:	2201      	movs	r2, #1
 80253ee:	69fb      	ldr	r3, [r7, #28]
 80253f0:	fa02 f303 	lsl.w	r3, r2, r3
 80253f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80253f6:	683b      	ldr	r3, [r7, #0]
 80253f8:	681b      	ldr	r3, [r3, #0]
 80253fa:	697a      	ldr	r2, [r7, #20]
 80253fc:	4013      	ands	r3, r2
 80253fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8025400:	693a      	ldr	r2, [r7, #16]
 8025402:	697b      	ldr	r3, [r7, #20]
 8025404:	429a      	cmp	r2, r3
 8025406:	f040 815a 	bne.w	80256be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 802540a:	683b      	ldr	r3, [r7, #0]
 802540c:	685b      	ldr	r3, [r3, #4]
 802540e:	2b01      	cmp	r3, #1
 8025410:	d00b      	beq.n	802542a <HAL_GPIO_Init+0x5a>
 8025412:	683b      	ldr	r3, [r7, #0]
 8025414:	685b      	ldr	r3, [r3, #4]
 8025416:	2b02      	cmp	r3, #2
 8025418:	d007      	beq.n	802542a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 802541a:	683b      	ldr	r3, [r7, #0]
 802541c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 802541e:	2b11      	cmp	r3, #17
 8025420:	d003      	beq.n	802542a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8025422:	683b      	ldr	r3, [r7, #0]
 8025424:	685b      	ldr	r3, [r3, #4]
 8025426:	2b12      	cmp	r3, #18
 8025428:	d130      	bne.n	802548c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 802542a:	687b      	ldr	r3, [r7, #4]
 802542c:	689b      	ldr	r3, [r3, #8]
 802542e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8025430:	69fb      	ldr	r3, [r7, #28]
 8025432:	005b      	lsls	r3, r3, #1
 8025434:	2203      	movs	r2, #3
 8025436:	fa02 f303 	lsl.w	r3, r2, r3
 802543a:	43db      	mvns	r3, r3
 802543c:	69ba      	ldr	r2, [r7, #24]
 802543e:	4013      	ands	r3, r2
 8025440:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8025442:	683b      	ldr	r3, [r7, #0]
 8025444:	68da      	ldr	r2, [r3, #12]
 8025446:	69fb      	ldr	r3, [r7, #28]
 8025448:	005b      	lsls	r3, r3, #1
 802544a:	fa02 f303 	lsl.w	r3, r2, r3
 802544e:	69ba      	ldr	r2, [r7, #24]
 8025450:	4313      	orrs	r3, r2
 8025452:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8025454:	687b      	ldr	r3, [r7, #4]
 8025456:	69ba      	ldr	r2, [r7, #24]
 8025458:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802545a:	687b      	ldr	r3, [r7, #4]
 802545c:	685b      	ldr	r3, [r3, #4]
 802545e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8025460:	2201      	movs	r2, #1
 8025462:	69fb      	ldr	r3, [r7, #28]
 8025464:	fa02 f303 	lsl.w	r3, r2, r3
 8025468:	43db      	mvns	r3, r3
 802546a:	69ba      	ldr	r2, [r7, #24]
 802546c:	4013      	ands	r3, r2
 802546e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8025470:	683b      	ldr	r3, [r7, #0]
 8025472:	685b      	ldr	r3, [r3, #4]
 8025474:	091b      	lsrs	r3, r3, #4
 8025476:	f003 0201 	and.w	r2, r3, #1
 802547a:	69fb      	ldr	r3, [r7, #28]
 802547c:	fa02 f303 	lsl.w	r3, r2, r3
 8025480:	69ba      	ldr	r2, [r7, #24]
 8025482:	4313      	orrs	r3, r2
 8025484:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8025486:	687b      	ldr	r3, [r7, #4]
 8025488:	69ba      	ldr	r2, [r7, #24]
 802548a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 802548c:	687b      	ldr	r3, [r7, #4]
 802548e:	68db      	ldr	r3, [r3, #12]
 8025490:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8025492:	69fb      	ldr	r3, [r7, #28]
 8025494:	005b      	lsls	r3, r3, #1
 8025496:	2203      	movs	r2, #3
 8025498:	fa02 f303 	lsl.w	r3, r2, r3
 802549c:	43db      	mvns	r3, r3
 802549e:	69ba      	ldr	r2, [r7, #24]
 80254a0:	4013      	ands	r3, r2
 80254a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80254a4:	683b      	ldr	r3, [r7, #0]
 80254a6:	689a      	ldr	r2, [r3, #8]
 80254a8:	69fb      	ldr	r3, [r7, #28]
 80254aa:	005b      	lsls	r3, r3, #1
 80254ac:	fa02 f303 	lsl.w	r3, r2, r3
 80254b0:	69ba      	ldr	r2, [r7, #24]
 80254b2:	4313      	orrs	r3, r2
 80254b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80254b6:	687b      	ldr	r3, [r7, #4]
 80254b8:	69ba      	ldr	r2, [r7, #24]
 80254ba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80254bc:	683b      	ldr	r3, [r7, #0]
 80254be:	685b      	ldr	r3, [r3, #4]
 80254c0:	2b02      	cmp	r3, #2
 80254c2:	d003      	beq.n	80254cc <HAL_GPIO_Init+0xfc>
 80254c4:	683b      	ldr	r3, [r7, #0]
 80254c6:	685b      	ldr	r3, [r3, #4]
 80254c8:	2b12      	cmp	r3, #18
 80254ca:	d123      	bne.n	8025514 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80254cc:	69fb      	ldr	r3, [r7, #28]
 80254ce:	08da      	lsrs	r2, r3, #3
 80254d0:	687b      	ldr	r3, [r7, #4]
 80254d2:	3208      	adds	r2, #8
 80254d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80254d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80254da:	69fb      	ldr	r3, [r7, #28]
 80254dc:	f003 0307 	and.w	r3, r3, #7
 80254e0:	009b      	lsls	r3, r3, #2
 80254e2:	220f      	movs	r2, #15
 80254e4:	fa02 f303 	lsl.w	r3, r2, r3
 80254e8:	43db      	mvns	r3, r3
 80254ea:	69ba      	ldr	r2, [r7, #24]
 80254ec:	4013      	ands	r3, r2
 80254ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80254f0:	683b      	ldr	r3, [r7, #0]
 80254f2:	691a      	ldr	r2, [r3, #16]
 80254f4:	69fb      	ldr	r3, [r7, #28]
 80254f6:	f003 0307 	and.w	r3, r3, #7
 80254fa:	009b      	lsls	r3, r3, #2
 80254fc:	fa02 f303 	lsl.w	r3, r2, r3
 8025500:	69ba      	ldr	r2, [r7, #24]
 8025502:	4313      	orrs	r3, r2
 8025504:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8025506:	69fb      	ldr	r3, [r7, #28]
 8025508:	08da      	lsrs	r2, r3, #3
 802550a:	687b      	ldr	r3, [r7, #4]
 802550c:	3208      	adds	r2, #8
 802550e:	69b9      	ldr	r1, [r7, #24]
 8025510:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8025514:	687b      	ldr	r3, [r7, #4]
 8025516:	681b      	ldr	r3, [r3, #0]
 8025518:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 802551a:	69fb      	ldr	r3, [r7, #28]
 802551c:	005b      	lsls	r3, r3, #1
 802551e:	2203      	movs	r2, #3
 8025520:	fa02 f303 	lsl.w	r3, r2, r3
 8025524:	43db      	mvns	r3, r3
 8025526:	69ba      	ldr	r2, [r7, #24]
 8025528:	4013      	ands	r3, r2
 802552a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 802552c:	683b      	ldr	r3, [r7, #0]
 802552e:	685b      	ldr	r3, [r3, #4]
 8025530:	f003 0203 	and.w	r2, r3, #3
 8025534:	69fb      	ldr	r3, [r7, #28]
 8025536:	005b      	lsls	r3, r3, #1
 8025538:	fa02 f303 	lsl.w	r3, r2, r3
 802553c:	69ba      	ldr	r2, [r7, #24]
 802553e:	4313      	orrs	r3, r2
 8025540:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8025542:	687b      	ldr	r3, [r7, #4]
 8025544:	69ba      	ldr	r2, [r7, #24]
 8025546:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8025548:	683b      	ldr	r3, [r7, #0]
 802554a:	685b      	ldr	r3, [r3, #4]
 802554c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8025550:	2b00      	cmp	r3, #0
 8025552:	f000 80b4 	beq.w	80256be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8025556:	2300      	movs	r3, #0
 8025558:	60fb      	str	r3, [r7, #12]
 802555a:	4b5f      	ldr	r3, [pc, #380]	; (80256d8 <HAL_GPIO_Init+0x308>)
 802555c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802555e:	4a5e      	ldr	r2, [pc, #376]	; (80256d8 <HAL_GPIO_Init+0x308>)
 8025560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8025564:	6453      	str	r3, [r2, #68]	; 0x44
 8025566:	4b5c      	ldr	r3, [pc, #368]	; (80256d8 <HAL_GPIO_Init+0x308>)
 8025568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802556a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802556e:	60fb      	str	r3, [r7, #12]
 8025570:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8025572:	4a5a      	ldr	r2, [pc, #360]	; (80256dc <HAL_GPIO_Init+0x30c>)
 8025574:	69fb      	ldr	r3, [r7, #28]
 8025576:	089b      	lsrs	r3, r3, #2
 8025578:	3302      	adds	r3, #2
 802557a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802557e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8025580:	69fb      	ldr	r3, [r7, #28]
 8025582:	f003 0303 	and.w	r3, r3, #3
 8025586:	009b      	lsls	r3, r3, #2
 8025588:	220f      	movs	r2, #15
 802558a:	fa02 f303 	lsl.w	r3, r2, r3
 802558e:	43db      	mvns	r3, r3
 8025590:	69ba      	ldr	r2, [r7, #24]
 8025592:	4013      	ands	r3, r2
 8025594:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8025596:	687b      	ldr	r3, [r7, #4]
 8025598:	4a51      	ldr	r2, [pc, #324]	; (80256e0 <HAL_GPIO_Init+0x310>)
 802559a:	4293      	cmp	r3, r2
 802559c:	d02b      	beq.n	80255f6 <HAL_GPIO_Init+0x226>
 802559e:	687b      	ldr	r3, [r7, #4]
 80255a0:	4a50      	ldr	r2, [pc, #320]	; (80256e4 <HAL_GPIO_Init+0x314>)
 80255a2:	4293      	cmp	r3, r2
 80255a4:	d025      	beq.n	80255f2 <HAL_GPIO_Init+0x222>
 80255a6:	687b      	ldr	r3, [r7, #4]
 80255a8:	4a4f      	ldr	r2, [pc, #316]	; (80256e8 <HAL_GPIO_Init+0x318>)
 80255aa:	4293      	cmp	r3, r2
 80255ac:	d01f      	beq.n	80255ee <HAL_GPIO_Init+0x21e>
 80255ae:	687b      	ldr	r3, [r7, #4]
 80255b0:	4a4e      	ldr	r2, [pc, #312]	; (80256ec <HAL_GPIO_Init+0x31c>)
 80255b2:	4293      	cmp	r3, r2
 80255b4:	d019      	beq.n	80255ea <HAL_GPIO_Init+0x21a>
 80255b6:	687b      	ldr	r3, [r7, #4]
 80255b8:	4a4d      	ldr	r2, [pc, #308]	; (80256f0 <HAL_GPIO_Init+0x320>)
 80255ba:	4293      	cmp	r3, r2
 80255bc:	d013      	beq.n	80255e6 <HAL_GPIO_Init+0x216>
 80255be:	687b      	ldr	r3, [r7, #4]
 80255c0:	4a4c      	ldr	r2, [pc, #304]	; (80256f4 <HAL_GPIO_Init+0x324>)
 80255c2:	4293      	cmp	r3, r2
 80255c4:	d00d      	beq.n	80255e2 <HAL_GPIO_Init+0x212>
 80255c6:	687b      	ldr	r3, [r7, #4]
 80255c8:	4a4b      	ldr	r2, [pc, #300]	; (80256f8 <HAL_GPIO_Init+0x328>)
 80255ca:	4293      	cmp	r3, r2
 80255cc:	d007      	beq.n	80255de <HAL_GPIO_Init+0x20e>
 80255ce:	687b      	ldr	r3, [r7, #4]
 80255d0:	4a4a      	ldr	r2, [pc, #296]	; (80256fc <HAL_GPIO_Init+0x32c>)
 80255d2:	4293      	cmp	r3, r2
 80255d4:	d101      	bne.n	80255da <HAL_GPIO_Init+0x20a>
 80255d6:	2307      	movs	r3, #7
 80255d8:	e00e      	b.n	80255f8 <HAL_GPIO_Init+0x228>
 80255da:	2308      	movs	r3, #8
 80255dc:	e00c      	b.n	80255f8 <HAL_GPIO_Init+0x228>
 80255de:	2306      	movs	r3, #6
 80255e0:	e00a      	b.n	80255f8 <HAL_GPIO_Init+0x228>
 80255e2:	2305      	movs	r3, #5
 80255e4:	e008      	b.n	80255f8 <HAL_GPIO_Init+0x228>
 80255e6:	2304      	movs	r3, #4
 80255e8:	e006      	b.n	80255f8 <HAL_GPIO_Init+0x228>
 80255ea:	2303      	movs	r3, #3
 80255ec:	e004      	b.n	80255f8 <HAL_GPIO_Init+0x228>
 80255ee:	2302      	movs	r3, #2
 80255f0:	e002      	b.n	80255f8 <HAL_GPIO_Init+0x228>
 80255f2:	2301      	movs	r3, #1
 80255f4:	e000      	b.n	80255f8 <HAL_GPIO_Init+0x228>
 80255f6:	2300      	movs	r3, #0
 80255f8:	69fa      	ldr	r2, [r7, #28]
 80255fa:	f002 0203 	and.w	r2, r2, #3
 80255fe:	0092      	lsls	r2, r2, #2
 8025600:	4093      	lsls	r3, r2
 8025602:	69ba      	ldr	r2, [r7, #24]
 8025604:	4313      	orrs	r3, r2
 8025606:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8025608:	4934      	ldr	r1, [pc, #208]	; (80256dc <HAL_GPIO_Init+0x30c>)
 802560a:	69fb      	ldr	r3, [r7, #28]
 802560c:	089b      	lsrs	r3, r3, #2
 802560e:	3302      	adds	r3, #2
 8025610:	69ba      	ldr	r2, [r7, #24]
 8025612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8025616:	4b3a      	ldr	r3, [pc, #232]	; (8025700 <HAL_GPIO_Init+0x330>)
 8025618:	681b      	ldr	r3, [r3, #0]
 802561a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802561c:	693b      	ldr	r3, [r7, #16]
 802561e:	43db      	mvns	r3, r3
 8025620:	69ba      	ldr	r2, [r7, #24]
 8025622:	4013      	ands	r3, r2
 8025624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8025626:	683b      	ldr	r3, [r7, #0]
 8025628:	685b      	ldr	r3, [r3, #4]
 802562a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802562e:	2b00      	cmp	r3, #0
 8025630:	d003      	beq.n	802563a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8025632:	69ba      	ldr	r2, [r7, #24]
 8025634:	693b      	ldr	r3, [r7, #16]
 8025636:	4313      	orrs	r3, r2
 8025638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 802563a:	4a31      	ldr	r2, [pc, #196]	; (8025700 <HAL_GPIO_Init+0x330>)
 802563c:	69bb      	ldr	r3, [r7, #24]
 802563e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8025640:	4b2f      	ldr	r3, [pc, #188]	; (8025700 <HAL_GPIO_Init+0x330>)
 8025642:	685b      	ldr	r3, [r3, #4]
 8025644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8025646:	693b      	ldr	r3, [r7, #16]
 8025648:	43db      	mvns	r3, r3
 802564a:	69ba      	ldr	r2, [r7, #24]
 802564c:	4013      	ands	r3, r2
 802564e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8025650:	683b      	ldr	r3, [r7, #0]
 8025652:	685b      	ldr	r3, [r3, #4]
 8025654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8025658:	2b00      	cmp	r3, #0
 802565a:	d003      	beq.n	8025664 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 802565c:	69ba      	ldr	r2, [r7, #24]
 802565e:	693b      	ldr	r3, [r7, #16]
 8025660:	4313      	orrs	r3, r2
 8025662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8025664:	4a26      	ldr	r2, [pc, #152]	; (8025700 <HAL_GPIO_Init+0x330>)
 8025666:	69bb      	ldr	r3, [r7, #24]
 8025668:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 802566a:	4b25      	ldr	r3, [pc, #148]	; (8025700 <HAL_GPIO_Init+0x330>)
 802566c:	689b      	ldr	r3, [r3, #8]
 802566e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8025670:	693b      	ldr	r3, [r7, #16]
 8025672:	43db      	mvns	r3, r3
 8025674:	69ba      	ldr	r2, [r7, #24]
 8025676:	4013      	ands	r3, r2
 8025678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 802567a:	683b      	ldr	r3, [r7, #0]
 802567c:	685b      	ldr	r3, [r3, #4]
 802567e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8025682:	2b00      	cmp	r3, #0
 8025684:	d003      	beq.n	802568e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8025686:	69ba      	ldr	r2, [r7, #24]
 8025688:	693b      	ldr	r3, [r7, #16]
 802568a:	4313      	orrs	r3, r2
 802568c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 802568e:	4a1c      	ldr	r2, [pc, #112]	; (8025700 <HAL_GPIO_Init+0x330>)
 8025690:	69bb      	ldr	r3, [r7, #24]
 8025692:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8025694:	4b1a      	ldr	r3, [pc, #104]	; (8025700 <HAL_GPIO_Init+0x330>)
 8025696:	68db      	ldr	r3, [r3, #12]
 8025698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802569a:	693b      	ldr	r3, [r7, #16]
 802569c:	43db      	mvns	r3, r3
 802569e:	69ba      	ldr	r2, [r7, #24]
 80256a0:	4013      	ands	r3, r2
 80256a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80256a4:	683b      	ldr	r3, [r7, #0]
 80256a6:	685b      	ldr	r3, [r3, #4]
 80256a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80256ac:	2b00      	cmp	r3, #0
 80256ae:	d003      	beq.n	80256b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80256b0:	69ba      	ldr	r2, [r7, #24]
 80256b2:	693b      	ldr	r3, [r7, #16]
 80256b4:	4313      	orrs	r3, r2
 80256b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80256b8:	4a11      	ldr	r2, [pc, #68]	; (8025700 <HAL_GPIO_Init+0x330>)
 80256ba:	69bb      	ldr	r3, [r7, #24]
 80256bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80256be:	69fb      	ldr	r3, [r7, #28]
 80256c0:	3301      	adds	r3, #1
 80256c2:	61fb      	str	r3, [r7, #28]
 80256c4:	69fb      	ldr	r3, [r7, #28]
 80256c6:	2b0f      	cmp	r3, #15
 80256c8:	f67f ae90 	bls.w	80253ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80256cc:	bf00      	nop
 80256ce:	3724      	adds	r7, #36	; 0x24
 80256d0:	46bd      	mov	sp, r7
 80256d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80256d6:	4770      	bx	lr
 80256d8:	40023800 	.word	0x40023800
 80256dc:	40013800 	.word	0x40013800
 80256e0:	40020000 	.word	0x40020000
 80256e4:	40020400 	.word	0x40020400
 80256e8:	40020800 	.word	0x40020800
 80256ec:	40020c00 	.word	0x40020c00
 80256f0:	40021000 	.word	0x40021000
 80256f4:	40021400 	.word	0x40021400
 80256f8:	40021800 	.word	0x40021800
 80256fc:	40021c00 	.word	0x40021c00
 8025700:	40013c00 	.word	0x40013c00

08025704 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8025704:	b480      	push	{r7}
 8025706:	b085      	sub	sp, #20
 8025708:	af00      	add	r7, sp, #0
 802570a:	6078      	str	r0, [r7, #4]
 802570c:	460b      	mov	r3, r1
 802570e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8025710:	687b      	ldr	r3, [r7, #4]
 8025712:	691a      	ldr	r2, [r3, #16]
 8025714:	887b      	ldrh	r3, [r7, #2]
 8025716:	4013      	ands	r3, r2
 8025718:	2b00      	cmp	r3, #0
 802571a:	d002      	beq.n	8025722 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 802571c:	2301      	movs	r3, #1
 802571e:	73fb      	strb	r3, [r7, #15]
 8025720:	e001      	b.n	8025726 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8025722:	2300      	movs	r3, #0
 8025724:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8025726:	7bfb      	ldrb	r3, [r7, #15]
}
 8025728:	4618      	mov	r0, r3
 802572a:	3714      	adds	r7, #20
 802572c:	46bd      	mov	sp, r7
 802572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025732:	4770      	bx	lr

08025734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8025734:	b480      	push	{r7}
 8025736:	b083      	sub	sp, #12
 8025738:	af00      	add	r7, sp, #0
 802573a:	6078      	str	r0, [r7, #4]
 802573c:	460b      	mov	r3, r1
 802573e:	807b      	strh	r3, [r7, #2]
 8025740:	4613      	mov	r3, r2
 8025742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8025744:	787b      	ldrb	r3, [r7, #1]
 8025746:	2b00      	cmp	r3, #0
 8025748:	d003      	beq.n	8025752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 802574a:	887a      	ldrh	r2, [r7, #2]
 802574c:	687b      	ldr	r3, [r7, #4]
 802574e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8025750:	e003      	b.n	802575a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8025752:	887b      	ldrh	r3, [r7, #2]
 8025754:	041a      	lsls	r2, r3, #16
 8025756:	687b      	ldr	r3, [r7, #4]
 8025758:	619a      	str	r2, [r3, #24]
}
 802575a:	bf00      	nop
 802575c:	370c      	adds	r7, #12
 802575e:	46bd      	mov	sp, r7
 8025760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025764:	4770      	bx	lr
	...

08025768 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8025768:	b580      	push	{r7, lr}
 802576a:	b084      	sub	sp, #16
 802576c:	af00      	add	r7, sp, #0
 802576e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8025770:	687b      	ldr	r3, [r7, #4]
 8025772:	2b00      	cmp	r3, #0
 8025774:	d101      	bne.n	802577a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8025776:	2301      	movs	r3, #1
 8025778:	e11f      	b.n	80259ba <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 802577a:	687b      	ldr	r3, [r7, #4]
 802577c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8025780:	b2db      	uxtb	r3, r3
 8025782:	2b00      	cmp	r3, #0
 8025784:	d106      	bne.n	8025794 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8025786:	687b      	ldr	r3, [r7, #4]
 8025788:	2200      	movs	r2, #0
 802578a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 802578e:	6878      	ldr	r0, [r7, #4]
 8025790:	f7fd fd9e 	bl	80232d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8025794:	687b      	ldr	r3, [r7, #4]
 8025796:	2224      	movs	r2, #36	; 0x24
 8025798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 802579c:	687b      	ldr	r3, [r7, #4]
 802579e:	681b      	ldr	r3, [r3, #0]
 80257a0:	681a      	ldr	r2, [r3, #0]
 80257a2:	687b      	ldr	r3, [r7, #4]
 80257a4:	681b      	ldr	r3, [r3, #0]
 80257a6:	f022 0201 	bic.w	r2, r2, #1
 80257aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80257ac:	687b      	ldr	r3, [r7, #4]
 80257ae:	681b      	ldr	r3, [r3, #0]
 80257b0:	681a      	ldr	r2, [r3, #0]
 80257b2:	687b      	ldr	r3, [r7, #4]
 80257b4:	681b      	ldr	r3, [r3, #0]
 80257b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80257ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80257bc:	687b      	ldr	r3, [r7, #4]
 80257be:	681b      	ldr	r3, [r3, #0]
 80257c0:	681a      	ldr	r2, [r3, #0]
 80257c2:	687b      	ldr	r3, [r7, #4]
 80257c4:	681b      	ldr	r3, [r3, #0]
 80257c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80257ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80257cc:	f000 fd18 	bl	8026200 <HAL_RCC_GetPCLK1Freq>
 80257d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80257d2:	687b      	ldr	r3, [r7, #4]
 80257d4:	685b      	ldr	r3, [r3, #4]
 80257d6:	4a7b      	ldr	r2, [pc, #492]	; (80259c4 <HAL_I2C_Init+0x25c>)
 80257d8:	4293      	cmp	r3, r2
 80257da:	d807      	bhi.n	80257ec <HAL_I2C_Init+0x84>
 80257dc:	68fb      	ldr	r3, [r7, #12]
 80257de:	4a7a      	ldr	r2, [pc, #488]	; (80259c8 <HAL_I2C_Init+0x260>)
 80257e0:	4293      	cmp	r3, r2
 80257e2:	bf94      	ite	ls
 80257e4:	2301      	movls	r3, #1
 80257e6:	2300      	movhi	r3, #0
 80257e8:	b2db      	uxtb	r3, r3
 80257ea:	e006      	b.n	80257fa <HAL_I2C_Init+0x92>
 80257ec:	68fb      	ldr	r3, [r7, #12]
 80257ee:	4a77      	ldr	r2, [pc, #476]	; (80259cc <HAL_I2C_Init+0x264>)
 80257f0:	4293      	cmp	r3, r2
 80257f2:	bf94      	ite	ls
 80257f4:	2301      	movls	r3, #1
 80257f6:	2300      	movhi	r3, #0
 80257f8:	b2db      	uxtb	r3, r3
 80257fa:	2b00      	cmp	r3, #0
 80257fc:	d001      	beq.n	8025802 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80257fe:	2301      	movs	r3, #1
 8025800:	e0db      	b.n	80259ba <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8025802:	68fb      	ldr	r3, [r7, #12]
 8025804:	4a72      	ldr	r2, [pc, #456]	; (80259d0 <HAL_I2C_Init+0x268>)
 8025806:	fba2 2303 	umull	r2, r3, r2, r3
 802580a:	0c9b      	lsrs	r3, r3, #18
 802580c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 802580e:	687b      	ldr	r3, [r7, #4]
 8025810:	681b      	ldr	r3, [r3, #0]
 8025812:	685b      	ldr	r3, [r3, #4]
 8025814:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8025818:	687b      	ldr	r3, [r7, #4]
 802581a:	681b      	ldr	r3, [r3, #0]
 802581c:	68ba      	ldr	r2, [r7, #8]
 802581e:	430a      	orrs	r2, r1
 8025820:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8025822:	687b      	ldr	r3, [r7, #4]
 8025824:	681b      	ldr	r3, [r3, #0]
 8025826:	6a1b      	ldr	r3, [r3, #32]
 8025828:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 802582c:	687b      	ldr	r3, [r7, #4]
 802582e:	685b      	ldr	r3, [r3, #4]
 8025830:	4a64      	ldr	r2, [pc, #400]	; (80259c4 <HAL_I2C_Init+0x25c>)
 8025832:	4293      	cmp	r3, r2
 8025834:	d802      	bhi.n	802583c <HAL_I2C_Init+0xd4>
 8025836:	68bb      	ldr	r3, [r7, #8]
 8025838:	3301      	adds	r3, #1
 802583a:	e009      	b.n	8025850 <HAL_I2C_Init+0xe8>
 802583c:	68bb      	ldr	r3, [r7, #8]
 802583e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8025842:	fb02 f303 	mul.w	r3, r2, r3
 8025846:	4a63      	ldr	r2, [pc, #396]	; (80259d4 <HAL_I2C_Init+0x26c>)
 8025848:	fba2 2303 	umull	r2, r3, r2, r3
 802584c:	099b      	lsrs	r3, r3, #6
 802584e:	3301      	adds	r3, #1
 8025850:	687a      	ldr	r2, [r7, #4]
 8025852:	6812      	ldr	r2, [r2, #0]
 8025854:	430b      	orrs	r3, r1
 8025856:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8025858:	687b      	ldr	r3, [r7, #4]
 802585a:	681b      	ldr	r3, [r3, #0]
 802585c:	69db      	ldr	r3, [r3, #28]
 802585e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8025862:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8025866:	687b      	ldr	r3, [r7, #4]
 8025868:	685b      	ldr	r3, [r3, #4]
 802586a:	4956      	ldr	r1, [pc, #344]	; (80259c4 <HAL_I2C_Init+0x25c>)
 802586c:	428b      	cmp	r3, r1
 802586e:	d80d      	bhi.n	802588c <HAL_I2C_Init+0x124>
 8025870:	68fb      	ldr	r3, [r7, #12]
 8025872:	1e59      	subs	r1, r3, #1
 8025874:	687b      	ldr	r3, [r7, #4]
 8025876:	685b      	ldr	r3, [r3, #4]
 8025878:	005b      	lsls	r3, r3, #1
 802587a:	fbb1 f3f3 	udiv	r3, r1, r3
 802587e:	3301      	adds	r3, #1
 8025880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025884:	2b04      	cmp	r3, #4
 8025886:	bf38      	it	cc
 8025888:	2304      	movcc	r3, #4
 802588a:	e04f      	b.n	802592c <HAL_I2C_Init+0x1c4>
 802588c:	687b      	ldr	r3, [r7, #4]
 802588e:	689b      	ldr	r3, [r3, #8]
 8025890:	2b00      	cmp	r3, #0
 8025892:	d111      	bne.n	80258b8 <HAL_I2C_Init+0x150>
 8025894:	68fb      	ldr	r3, [r7, #12]
 8025896:	1e58      	subs	r0, r3, #1
 8025898:	687b      	ldr	r3, [r7, #4]
 802589a:	6859      	ldr	r1, [r3, #4]
 802589c:	460b      	mov	r3, r1
 802589e:	005b      	lsls	r3, r3, #1
 80258a0:	440b      	add	r3, r1
 80258a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80258a6:	3301      	adds	r3, #1
 80258a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80258ac:	2b00      	cmp	r3, #0
 80258ae:	bf0c      	ite	eq
 80258b0:	2301      	moveq	r3, #1
 80258b2:	2300      	movne	r3, #0
 80258b4:	b2db      	uxtb	r3, r3
 80258b6:	e012      	b.n	80258de <HAL_I2C_Init+0x176>
 80258b8:	68fb      	ldr	r3, [r7, #12]
 80258ba:	1e58      	subs	r0, r3, #1
 80258bc:	687b      	ldr	r3, [r7, #4]
 80258be:	6859      	ldr	r1, [r3, #4]
 80258c0:	460b      	mov	r3, r1
 80258c2:	009b      	lsls	r3, r3, #2
 80258c4:	440b      	add	r3, r1
 80258c6:	0099      	lsls	r1, r3, #2
 80258c8:	440b      	add	r3, r1
 80258ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80258ce:	3301      	adds	r3, #1
 80258d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80258d4:	2b00      	cmp	r3, #0
 80258d6:	bf0c      	ite	eq
 80258d8:	2301      	moveq	r3, #1
 80258da:	2300      	movne	r3, #0
 80258dc:	b2db      	uxtb	r3, r3
 80258de:	2b00      	cmp	r3, #0
 80258e0:	d001      	beq.n	80258e6 <HAL_I2C_Init+0x17e>
 80258e2:	2301      	movs	r3, #1
 80258e4:	e022      	b.n	802592c <HAL_I2C_Init+0x1c4>
 80258e6:	687b      	ldr	r3, [r7, #4]
 80258e8:	689b      	ldr	r3, [r3, #8]
 80258ea:	2b00      	cmp	r3, #0
 80258ec:	d10e      	bne.n	802590c <HAL_I2C_Init+0x1a4>
 80258ee:	68fb      	ldr	r3, [r7, #12]
 80258f0:	1e58      	subs	r0, r3, #1
 80258f2:	687b      	ldr	r3, [r7, #4]
 80258f4:	6859      	ldr	r1, [r3, #4]
 80258f6:	460b      	mov	r3, r1
 80258f8:	005b      	lsls	r3, r3, #1
 80258fa:	440b      	add	r3, r1
 80258fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8025900:	3301      	adds	r3, #1
 8025902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 802590a:	e00f      	b.n	802592c <HAL_I2C_Init+0x1c4>
 802590c:	68fb      	ldr	r3, [r7, #12]
 802590e:	1e58      	subs	r0, r3, #1
 8025910:	687b      	ldr	r3, [r7, #4]
 8025912:	6859      	ldr	r1, [r3, #4]
 8025914:	460b      	mov	r3, r1
 8025916:	009b      	lsls	r3, r3, #2
 8025918:	440b      	add	r3, r1
 802591a:	0099      	lsls	r1, r3, #2
 802591c:	440b      	add	r3, r1
 802591e:	fbb0 f3f3 	udiv	r3, r0, r3
 8025922:	3301      	adds	r3, #1
 8025924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8025928:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 802592c:	6879      	ldr	r1, [r7, #4]
 802592e:	6809      	ldr	r1, [r1, #0]
 8025930:	4313      	orrs	r3, r2
 8025932:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8025934:	687b      	ldr	r3, [r7, #4]
 8025936:	681b      	ldr	r3, [r3, #0]
 8025938:	681b      	ldr	r3, [r3, #0]
 802593a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 802593e:	687b      	ldr	r3, [r7, #4]
 8025940:	69da      	ldr	r2, [r3, #28]
 8025942:	687b      	ldr	r3, [r7, #4]
 8025944:	6a1b      	ldr	r3, [r3, #32]
 8025946:	431a      	orrs	r2, r3
 8025948:	687b      	ldr	r3, [r7, #4]
 802594a:	681b      	ldr	r3, [r3, #0]
 802594c:	430a      	orrs	r2, r1
 802594e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8025950:	687b      	ldr	r3, [r7, #4]
 8025952:	681b      	ldr	r3, [r3, #0]
 8025954:	689b      	ldr	r3, [r3, #8]
 8025956:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 802595a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 802595e:	687a      	ldr	r2, [r7, #4]
 8025960:	6911      	ldr	r1, [r2, #16]
 8025962:	687a      	ldr	r2, [r7, #4]
 8025964:	68d2      	ldr	r2, [r2, #12]
 8025966:	4311      	orrs	r1, r2
 8025968:	687a      	ldr	r2, [r7, #4]
 802596a:	6812      	ldr	r2, [r2, #0]
 802596c:	430b      	orrs	r3, r1
 802596e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8025970:	687b      	ldr	r3, [r7, #4]
 8025972:	681b      	ldr	r3, [r3, #0]
 8025974:	68db      	ldr	r3, [r3, #12]
 8025976:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 802597a:	687b      	ldr	r3, [r7, #4]
 802597c:	695a      	ldr	r2, [r3, #20]
 802597e:	687b      	ldr	r3, [r7, #4]
 8025980:	699b      	ldr	r3, [r3, #24]
 8025982:	431a      	orrs	r2, r3
 8025984:	687b      	ldr	r3, [r7, #4]
 8025986:	681b      	ldr	r3, [r3, #0]
 8025988:	430a      	orrs	r2, r1
 802598a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 802598c:	687b      	ldr	r3, [r7, #4]
 802598e:	681b      	ldr	r3, [r3, #0]
 8025990:	681a      	ldr	r2, [r3, #0]
 8025992:	687b      	ldr	r3, [r7, #4]
 8025994:	681b      	ldr	r3, [r3, #0]
 8025996:	f042 0201 	orr.w	r2, r2, #1
 802599a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 802599c:	687b      	ldr	r3, [r7, #4]
 802599e:	2200      	movs	r2, #0
 80259a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80259a2:	687b      	ldr	r3, [r7, #4]
 80259a4:	2220      	movs	r2, #32
 80259a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80259aa:	687b      	ldr	r3, [r7, #4]
 80259ac:	2200      	movs	r2, #0
 80259ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80259b0:	687b      	ldr	r3, [r7, #4]
 80259b2:	2200      	movs	r2, #0
 80259b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80259b8:	2300      	movs	r3, #0
}
 80259ba:	4618      	mov	r0, r3
 80259bc:	3710      	adds	r7, #16
 80259be:	46bd      	mov	sp, r7
 80259c0:	bd80      	pop	{r7, pc}
 80259c2:	bf00      	nop
 80259c4:	000186a0 	.word	0x000186a0
 80259c8:	001e847f 	.word	0x001e847f
 80259cc:	003d08ff 	.word	0x003d08ff
 80259d0:	431bde83 	.word	0x431bde83
 80259d4:	10624dd3 	.word	0x10624dd3

080259d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80259d8:	b580      	push	{r7, lr}
 80259da:	b086      	sub	sp, #24
 80259dc:	af00      	add	r7, sp, #0
 80259de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80259e0:	687b      	ldr	r3, [r7, #4]
 80259e2:	2b00      	cmp	r3, #0
 80259e4:	d101      	bne.n	80259ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80259e6:	2301      	movs	r3, #1
 80259e8:	e25b      	b.n	8025ea2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80259ea:	687b      	ldr	r3, [r7, #4]
 80259ec:	681b      	ldr	r3, [r3, #0]
 80259ee:	f003 0301 	and.w	r3, r3, #1
 80259f2:	2b00      	cmp	r3, #0
 80259f4:	d075      	beq.n	8025ae2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80259f6:	4ba3      	ldr	r3, [pc, #652]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 80259f8:	689b      	ldr	r3, [r3, #8]
 80259fa:	f003 030c 	and.w	r3, r3, #12
 80259fe:	2b04      	cmp	r3, #4
 8025a00:	d00c      	beq.n	8025a1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8025a02:	4ba0      	ldr	r3, [pc, #640]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025a04:	689b      	ldr	r3, [r3, #8]
 8025a06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8025a0a:	2b08      	cmp	r3, #8
 8025a0c:	d112      	bne.n	8025a34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8025a0e:	4b9d      	ldr	r3, [pc, #628]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025a10:	685b      	ldr	r3, [r3, #4]
 8025a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8025a16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8025a1a:	d10b      	bne.n	8025a34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8025a1c:	4b99      	ldr	r3, [pc, #612]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025a1e:	681b      	ldr	r3, [r3, #0]
 8025a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8025a24:	2b00      	cmp	r3, #0
 8025a26:	d05b      	beq.n	8025ae0 <HAL_RCC_OscConfig+0x108>
 8025a28:	687b      	ldr	r3, [r7, #4]
 8025a2a:	685b      	ldr	r3, [r3, #4]
 8025a2c:	2b00      	cmp	r3, #0
 8025a2e:	d157      	bne.n	8025ae0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8025a30:	2301      	movs	r3, #1
 8025a32:	e236      	b.n	8025ea2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8025a34:	687b      	ldr	r3, [r7, #4]
 8025a36:	685b      	ldr	r3, [r3, #4]
 8025a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8025a3c:	d106      	bne.n	8025a4c <HAL_RCC_OscConfig+0x74>
 8025a3e:	4b91      	ldr	r3, [pc, #580]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025a40:	681b      	ldr	r3, [r3, #0]
 8025a42:	4a90      	ldr	r2, [pc, #576]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8025a48:	6013      	str	r3, [r2, #0]
 8025a4a:	e01d      	b.n	8025a88 <HAL_RCC_OscConfig+0xb0>
 8025a4c:	687b      	ldr	r3, [r7, #4]
 8025a4e:	685b      	ldr	r3, [r3, #4]
 8025a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8025a54:	d10c      	bne.n	8025a70 <HAL_RCC_OscConfig+0x98>
 8025a56:	4b8b      	ldr	r3, [pc, #556]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025a58:	681b      	ldr	r3, [r3, #0]
 8025a5a:	4a8a      	ldr	r2, [pc, #552]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8025a60:	6013      	str	r3, [r2, #0]
 8025a62:	4b88      	ldr	r3, [pc, #544]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025a64:	681b      	ldr	r3, [r3, #0]
 8025a66:	4a87      	ldr	r2, [pc, #540]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8025a6c:	6013      	str	r3, [r2, #0]
 8025a6e:	e00b      	b.n	8025a88 <HAL_RCC_OscConfig+0xb0>
 8025a70:	4b84      	ldr	r3, [pc, #528]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025a72:	681b      	ldr	r3, [r3, #0]
 8025a74:	4a83      	ldr	r2, [pc, #524]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8025a7a:	6013      	str	r3, [r2, #0]
 8025a7c:	4b81      	ldr	r3, [pc, #516]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025a7e:	681b      	ldr	r3, [r3, #0]
 8025a80:	4a80      	ldr	r2, [pc, #512]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8025a86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8025a88:	687b      	ldr	r3, [r7, #4]
 8025a8a:	685b      	ldr	r3, [r3, #4]
 8025a8c:	2b00      	cmp	r3, #0
 8025a8e:	d013      	beq.n	8025ab8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8025a90:	f7fe fbfc 	bl	802428c <HAL_GetTick>
 8025a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8025a96:	e008      	b.n	8025aaa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8025a98:	f7fe fbf8 	bl	802428c <HAL_GetTick>
 8025a9c:	4602      	mov	r2, r0
 8025a9e:	693b      	ldr	r3, [r7, #16]
 8025aa0:	1ad3      	subs	r3, r2, r3
 8025aa2:	2b64      	cmp	r3, #100	; 0x64
 8025aa4:	d901      	bls.n	8025aaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8025aa6:	2303      	movs	r3, #3
 8025aa8:	e1fb      	b.n	8025ea2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8025aaa:	4b76      	ldr	r3, [pc, #472]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025aac:	681b      	ldr	r3, [r3, #0]
 8025aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8025ab2:	2b00      	cmp	r3, #0
 8025ab4:	d0f0      	beq.n	8025a98 <HAL_RCC_OscConfig+0xc0>
 8025ab6:	e014      	b.n	8025ae2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8025ab8:	f7fe fbe8 	bl	802428c <HAL_GetTick>
 8025abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8025abe:	e008      	b.n	8025ad2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8025ac0:	f7fe fbe4 	bl	802428c <HAL_GetTick>
 8025ac4:	4602      	mov	r2, r0
 8025ac6:	693b      	ldr	r3, [r7, #16]
 8025ac8:	1ad3      	subs	r3, r2, r3
 8025aca:	2b64      	cmp	r3, #100	; 0x64
 8025acc:	d901      	bls.n	8025ad2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8025ace:	2303      	movs	r3, #3
 8025ad0:	e1e7      	b.n	8025ea2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8025ad2:	4b6c      	ldr	r3, [pc, #432]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025ad4:	681b      	ldr	r3, [r3, #0]
 8025ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8025ada:	2b00      	cmp	r3, #0
 8025adc:	d1f0      	bne.n	8025ac0 <HAL_RCC_OscConfig+0xe8>
 8025ade:	e000      	b.n	8025ae2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8025ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8025ae2:	687b      	ldr	r3, [r7, #4]
 8025ae4:	681b      	ldr	r3, [r3, #0]
 8025ae6:	f003 0302 	and.w	r3, r3, #2
 8025aea:	2b00      	cmp	r3, #0
 8025aec:	d063      	beq.n	8025bb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8025aee:	4b65      	ldr	r3, [pc, #404]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025af0:	689b      	ldr	r3, [r3, #8]
 8025af2:	f003 030c 	and.w	r3, r3, #12
 8025af6:	2b00      	cmp	r3, #0
 8025af8:	d00b      	beq.n	8025b12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8025afa:	4b62      	ldr	r3, [pc, #392]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025afc:	689b      	ldr	r3, [r3, #8]
 8025afe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8025b02:	2b08      	cmp	r3, #8
 8025b04:	d11c      	bne.n	8025b40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8025b06:	4b5f      	ldr	r3, [pc, #380]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025b08:	685b      	ldr	r3, [r3, #4]
 8025b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8025b0e:	2b00      	cmp	r3, #0
 8025b10:	d116      	bne.n	8025b40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8025b12:	4b5c      	ldr	r3, [pc, #368]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025b14:	681b      	ldr	r3, [r3, #0]
 8025b16:	f003 0302 	and.w	r3, r3, #2
 8025b1a:	2b00      	cmp	r3, #0
 8025b1c:	d005      	beq.n	8025b2a <HAL_RCC_OscConfig+0x152>
 8025b1e:	687b      	ldr	r3, [r7, #4]
 8025b20:	68db      	ldr	r3, [r3, #12]
 8025b22:	2b01      	cmp	r3, #1
 8025b24:	d001      	beq.n	8025b2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8025b26:	2301      	movs	r3, #1
 8025b28:	e1bb      	b.n	8025ea2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8025b2a:	4b56      	ldr	r3, [pc, #344]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025b2c:	681b      	ldr	r3, [r3, #0]
 8025b2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8025b32:	687b      	ldr	r3, [r7, #4]
 8025b34:	691b      	ldr	r3, [r3, #16]
 8025b36:	00db      	lsls	r3, r3, #3
 8025b38:	4952      	ldr	r1, [pc, #328]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025b3a:	4313      	orrs	r3, r2
 8025b3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8025b3e:	e03a      	b.n	8025bb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8025b40:	687b      	ldr	r3, [r7, #4]
 8025b42:	68db      	ldr	r3, [r3, #12]
 8025b44:	2b00      	cmp	r3, #0
 8025b46:	d020      	beq.n	8025b8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8025b48:	4b4f      	ldr	r3, [pc, #316]	; (8025c88 <HAL_RCC_OscConfig+0x2b0>)
 8025b4a:	2201      	movs	r2, #1
 8025b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8025b4e:	f7fe fb9d 	bl	802428c <HAL_GetTick>
 8025b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8025b54:	e008      	b.n	8025b68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8025b56:	f7fe fb99 	bl	802428c <HAL_GetTick>
 8025b5a:	4602      	mov	r2, r0
 8025b5c:	693b      	ldr	r3, [r7, #16]
 8025b5e:	1ad3      	subs	r3, r2, r3
 8025b60:	2b02      	cmp	r3, #2
 8025b62:	d901      	bls.n	8025b68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8025b64:	2303      	movs	r3, #3
 8025b66:	e19c      	b.n	8025ea2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8025b68:	4b46      	ldr	r3, [pc, #280]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025b6a:	681b      	ldr	r3, [r3, #0]
 8025b6c:	f003 0302 	and.w	r3, r3, #2
 8025b70:	2b00      	cmp	r3, #0
 8025b72:	d0f0      	beq.n	8025b56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8025b74:	4b43      	ldr	r3, [pc, #268]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025b76:	681b      	ldr	r3, [r3, #0]
 8025b78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8025b7c:	687b      	ldr	r3, [r7, #4]
 8025b7e:	691b      	ldr	r3, [r3, #16]
 8025b80:	00db      	lsls	r3, r3, #3
 8025b82:	4940      	ldr	r1, [pc, #256]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025b84:	4313      	orrs	r3, r2
 8025b86:	600b      	str	r3, [r1, #0]
 8025b88:	e015      	b.n	8025bb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8025b8a:	4b3f      	ldr	r3, [pc, #252]	; (8025c88 <HAL_RCC_OscConfig+0x2b0>)
 8025b8c:	2200      	movs	r2, #0
 8025b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8025b90:	f7fe fb7c 	bl	802428c <HAL_GetTick>
 8025b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8025b96:	e008      	b.n	8025baa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8025b98:	f7fe fb78 	bl	802428c <HAL_GetTick>
 8025b9c:	4602      	mov	r2, r0
 8025b9e:	693b      	ldr	r3, [r7, #16]
 8025ba0:	1ad3      	subs	r3, r2, r3
 8025ba2:	2b02      	cmp	r3, #2
 8025ba4:	d901      	bls.n	8025baa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8025ba6:	2303      	movs	r3, #3
 8025ba8:	e17b      	b.n	8025ea2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8025baa:	4b36      	ldr	r3, [pc, #216]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025bac:	681b      	ldr	r3, [r3, #0]
 8025bae:	f003 0302 	and.w	r3, r3, #2
 8025bb2:	2b00      	cmp	r3, #0
 8025bb4:	d1f0      	bne.n	8025b98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8025bb6:	687b      	ldr	r3, [r7, #4]
 8025bb8:	681b      	ldr	r3, [r3, #0]
 8025bba:	f003 0308 	and.w	r3, r3, #8
 8025bbe:	2b00      	cmp	r3, #0
 8025bc0:	d030      	beq.n	8025c24 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8025bc2:	687b      	ldr	r3, [r7, #4]
 8025bc4:	695b      	ldr	r3, [r3, #20]
 8025bc6:	2b00      	cmp	r3, #0
 8025bc8:	d016      	beq.n	8025bf8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8025bca:	4b30      	ldr	r3, [pc, #192]	; (8025c8c <HAL_RCC_OscConfig+0x2b4>)
 8025bcc:	2201      	movs	r2, #1
 8025bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8025bd0:	f7fe fb5c 	bl	802428c <HAL_GetTick>
 8025bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8025bd6:	e008      	b.n	8025bea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8025bd8:	f7fe fb58 	bl	802428c <HAL_GetTick>
 8025bdc:	4602      	mov	r2, r0
 8025bde:	693b      	ldr	r3, [r7, #16]
 8025be0:	1ad3      	subs	r3, r2, r3
 8025be2:	2b02      	cmp	r3, #2
 8025be4:	d901      	bls.n	8025bea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8025be6:	2303      	movs	r3, #3
 8025be8:	e15b      	b.n	8025ea2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8025bea:	4b26      	ldr	r3, [pc, #152]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8025bee:	f003 0302 	and.w	r3, r3, #2
 8025bf2:	2b00      	cmp	r3, #0
 8025bf4:	d0f0      	beq.n	8025bd8 <HAL_RCC_OscConfig+0x200>
 8025bf6:	e015      	b.n	8025c24 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8025bf8:	4b24      	ldr	r3, [pc, #144]	; (8025c8c <HAL_RCC_OscConfig+0x2b4>)
 8025bfa:	2200      	movs	r2, #0
 8025bfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8025bfe:	f7fe fb45 	bl	802428c <HAL_GetTick>
 8025c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8025c04:	e008      	b.n	8025c18 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8025c06:	f7fe fb41 	bl	802428c <HAL_GetTick>
 8025c0a:	4602      	mov	r2, r0
 8025c0c:	693b      	ldr	r3, [r7, #16]
 8025c0e:	1ad3      	subs	r3, r2, r3
 8025c10:	2b02      	cmp	r3, #2
 8025c12:	d901      	bls.n	8025c18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8025c14:	2303      	movs	r3, #3
 8025c16:	e144      	b.n	8025ea2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8025c18:	4b1a      	ldr	r3, [pc, #104]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8025c1c:	f003 0302 	and.w	r3, r3, #2
 8025c20:	2b00      	cmp	r3, #0
 8025c22:	d1f0      	bne.n	8025c06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8025c24:	687b      	ldr	r3, [r7, #4]
 8025c26:	681b      	ldr	r3, [r3, #0]
 8025c28:	f003 0304 	and.w	r3, r3, #4
 8025c2c:	2b00      	cmp	r3, #0
 8025c2e:	f000 80a0 	beq.w	8025d72 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8025c32:	2300      	movs	r3, #0
 8025c34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8025c36:	4b13      	ldr	r3, [pc, #76]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8025c3e:	2b00      	cmp	r3, #0
 8025c40:	d10f      	bne.n	8025c62 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8025c42:	2300      	movs	r3, #0
 8025c44:	60bb      	str	r3, [r7, #8]
 8025c46:	4b0f      	ldr	r3, [pc, #60]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025c4a:	4a0e      	ldr	r2, [pc, #56]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8025c50:	6413      	str	r3, [r2, #64]	; 0x40
 8025c52:	4b0c      	ldr	r3, [pc, #48]	; (8025c84 <HAL_RCC_OscConfig+0x2ac>)
 8025c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8025c5a:	60bb      	str	r3, [r7, #8]
 8025c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8025c5e:	2301      	movs	r3, #1
 8025c60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8025c62:	4b0b      	ldr	r3, [pc, #44]	; (8025c90 <HAL_RCC_OscConfig+0x2b8>)
 8025c64:	681b      	ldr	r3, [r3, #0]
 8025c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025c6a:	2b00      	cmp	r3, #0
 8025c6c:	d121      	bne.n	8025cb2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8025c6e:	4b08      	ldr	r3, [pc, #32]	; (8025c90 <HAL_RCC_OscConfig+0x2b8>)
 8025c70:	681b      	ldr	r3, [r3, #0]
 8025c72:	4a07      	ldr	r2, [pc, #28]	; (8025c90 <HAL_RCC_OscConfig+0x2b8>)
 8025c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8025c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8025c7a:	f7fe fb07 	bl	802428c <HAL_GetTick>
 8025c7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8025c80:	e011      	b.n	8025ca6 <HAL_RCC_OscConfig+0x2ce>
 8025c82:	bf00      	nop
 8025c84:	40023800 	.word	0x40023800
 8025c88:	42470000 	.word	0x42470000
 8025c8c:	42470e80 	.word	0x42470e80
 8025c90:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8025c94:	f7fe fafa 	bl	802428c <HAL_GetTick>
 8025c98:	4602      	mov	r2, r0
 8025c9a:	693b      	ldr	r3, [r7, #16]
 8025c9c:	1ad3      	subs	r3, r2, r3
 8025c9e:	2b02      	cmp	r3, #2
 8025ca0:	d901      	bls.n	8025ca6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8025ca2:	2303      	movs	r3, #3
 8025ca4:	e0fd      	b.n	8025ea2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8025ca6:	4b81      	ldr	r3, [pc, #516]	; (8025eac <HAL_RCC_OscConfig+0x4d4>)
 8025ca8:	681b      	ldr	r3, [r3, #0]
 8025caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8025cae:	2b00      	cmp	r3, #0
 8025cb0:	d0f0      	beq.n	8025c94 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8025cb2:	687b      	ldr	r3, [r7, #4]
 8025cb4:	689b      	ldr	r3, [r3, #8]
 8025cb6:	2b01      	cmp	r3, #1
 8025cb8:	d106      	bne.n	8025cc8 <HAL_RCC_OscConfig+0x2f0>
 8025cba:	4b7d      	ldr	r3, [pc, #500]	; (8025eb0 <HAL_RCC_OscConfig+0x4d8>)
 8025cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8025cbe:	4a7c      	ldr	r2, [pc, #496]	; (8025eb0 <HAL_RCC_OscConfig+0x4d8>)
 8025cc0:	f043 0301 	orr.w	r3, r3, #1
 8025cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8025cc6:	e01c      	b.n	8025d02 <HAL_RCC_OscConfig+0x32a>
 8025cc8:	687b      	ldr	r3, [r7, #4]
 8025cca:	689b      	ldr	r3, [r3, #8]
 8025ccc:	2b05      	cmp	r3, #5
 8025cce:	d10c      	bne.n	8025cea <HAL_RCC_OscConfig+0x312>
 8025cd0:	4b77      	ldr	r3, [pc, #476]	; (8025eb0 <HAL_RCC_OscConfig+0x4d8>)
 8025cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8025cd4:	4a76      	ldr	r2, [pc, #472]	; (8025eb0 <HAL_RCC_OscConfig+0x4d8>)
 8025cd6:	f043 0304 	orr.w	r3, r3, #4
 8025cda:	6713      	str	r3, [r2, #112]	; 0x70
 8025cdc:	4b74      	ldr	r3, [pc, #464]	; (8025eb0 <HAL_RCC_OscConfig+0x4d8>)
 8025cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8025ce0:	4a73      	ldr	r2, [pc, #460]	; (8025eb0 <HAL_RCC_OscConfig+0x4d8>)
 8025ce2:	f043 0301 	orr.w	r3, r3, #1
 8025ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8025ce8:	e00b      	b.n	8025d02 <HAL_RCC_OscConfig+0x32a>
 8025cea:	4b71      	ldr	r3, [pc, #452]	; (8025eb0 <HAL_RCC_OscConfig+0x4d8>)
 8025cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8025cee:	4a70      	ldr	r2, [pc, #448]	; (8025eb0 <HAL_RCC_OscConfig+0x4d8>)
 8025cf0:	f023 0301 	bic.w	r3, r3, #1
 8025cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8025cf6:	4b6e      	ldr	r3, [pc, #440]	; (8025eb0 <HAL_RCC_OscConfig+0x4d8>)
 8025cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8025cfa:	4a6d      	ldr	r2, [pc, #436]	; (8025eb0 <HAL_RCC_OscConfig+0x4d8>)
 8025cfc:	f023 0304 	bic.w	r3, r3, #4
 8025d00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8025d02:	687b      	ldr	r3, [r7, #4]
 8025d04:	689b      	ldr	r3, [r3, #8]
 8025d06:	2b00      	cmp	r3, #0
 8025d08:	d015      	beq.n	8025d36 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8025d0a:	f7fe fabf 	bl	802428c <HAL_GetTick>
 8025d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8025d10:	e00a      	b.n	8025d28 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8025d12:	f7fe fabb 	bl	802428c <HAL_GetTick>
 8025d16:	4602      	mov	r2, r0
 8025d18:	693b      	ldr	r3, [r7, #16]
 8025d1a:	1ad3      	subs	r3, r2, r3
 8025d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8025d20:	4293      	cmp	r3, r2
 8025d22:	d901      	bls.n	8025d28 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8025d24:	2303      	movs	r3, #3
 8025d26:	e0bc      	b.n	8025ea2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8025d28:	4b61      	ldr	r3, [pc, #388]	; (8025eb0 <HAL_RCC_OscConfig+0x4d8>)
 8025d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8025d2c:	f003 0302 	and.w	r3, r3, #2
 8025d30:	2b00      	cmp	r3, #0
 8025d32:	d0ee      	beq.n	8025d12 <HAL_RCC_OscConfig+0x33a>
 8025d34:	e014      	b.n	8025d60 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8025d36:	f7fe faa9 	bl	802428c <HAL_GetTick>
 8025d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8025d3c:	e00a      	b.n	8025d54 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8025d3e:	f7fe faa5 	bl	802428c <HAL_GetTick>
 8025d42:	4602      	mov	r2, r0
 8025d44:	693b      	ldr	r3, [r7, #16]
 8025d46:	1ad3      	subs	r3, r2, r3
 8025d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8025d4c:	4293      	cmp	r3, r2
 8025d4e:	d901      	bls.n	8025d54 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8025d50:	2303      	movs	r3, #3
 8025d52:	e0a6      	b.n	8025ea2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8025d54:	4b56      	ldr	r3, [pc, #344]	; (8025eb0 <HAL_RCC_OscConfig+0x4d8>)
 8025d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8025d58:	f003 0302 	and.w	r3, r3, #2
 8025d5c:	2b00      	cmp	r3, #0
 8025d5e:	d1ee      	bne.n	8025d3e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8025d60:	7dfb      	ldrb	r3, [r7, #23]
 8025d62:	2b01      	cmp	r3, #1
 8025d64:	d105      	bne.n	8025d72 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8025d66:	4b52      	ldr	r3, [pc, #328]	; (8025eb0 <HAL_RCC_OscConfig+0x4d8>)
 8025d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8025d6a:	4a51      	ldr	r2, [pc, #324]	; (8025eb0 <HAL_RCC_OscConfig+0x4d8>)
 8025d6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8025d70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8025d72:	687b      	ldr	r3, [r7, #4]
 8025d74:	699b      	ldr	r3, [r3, #24]
 8025d76:	2b00      	cmp	r3, #0
 8025d78:	f000 8092 	beq.w	8025ea0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8025d7c:	4b4c      	ldr	r3, [pc, #304]	; (8025eb0 <HAL_RCC_OscConfig+0x4d8>)
 8025d7e:	689b      	ldr	r3, [r3, #8]
 8025d80:	f003 030c 	and.w	r3, r3, #12
 8025d84:	2b08      	cmp	r3, #8
 8025d86:	d05c      	beq.n	8025e42 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8025d88:	687b      	ldr	r3, [r7, #4]
 8025d8a:	699b      	ldr	r3, [r3, #24]
 8025d8c:	2b02      	cmp	r3, #2
 8025d8e:	d141      	bne.n	8025e14 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8025d90:	4b48      	ldr	r3, [pc, #288]	; (8025eb4 <HAL_RCC_OscConfig+0x4dc>)
 8025d92:	2200      	movs	r2, #0
 8025d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8025d96:	f7fe fa79 	bl	802428c <HAL_GetTick>
 8025d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8025d9c:	e008      	b.n	8025db0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8025d9e:	f7fe fa75 	bl	802428c <HAL_GetTick>
 8025da2:	4602      	mov	r2, r0
 8025da4:	693b      	ldr	r3, [r7, #16]
 8025da6:	1ad3      	subs	r3, r2, r3
 8025da8:	2b02      	cmp	r3, #2
 8025daa:	d901      	bls.n	8025db0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8025dac:	2303      	movs	r3, #3
 8025dae:	e078      	b.n	8025ea2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8025db0:	4b3f      	ldr	r3, [pc, #252]	; (8025eb0 <HAL_RCC_OscConfig+0x4d8>)
 8025db2:	681b      	ldr	r3, [r3, #0]
 8025db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8025db8:	2b00      	cmp	r3, #0
 8025dba:	d1f0      	bne.n	8025d9e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8025dbc:	687b      	ldr	r3, [r7, #4]
 8025dbe:	69da      	ldr	r2, [r3, #28]
 8025dc0:	687b      	ldr	r3, [r7, #4]
 8025dc2:	6a1b      	ldr	r3, [r3, #32]
 8025dc4:	431a      	orrs	r2, r3
 8025dc6:	687b      	ldr	r3, [r7, #4]
 8025dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025dca:	019b      	lsls	r3, r3, #6
 8025dcc:	431a      	orrs	r2, r3
 8025dce:	687b      	ldr	r3, [r7, #4]
 8025dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025dd2:	085b      	lsrs	r3, r3, #1
 8025dd4:	3b01      	subs	r3, #1
 8025dd6:	041b      	lsls	r3, r3, #16
 8025dd8:	431a      	orrs	r2, r3
 8025dda:	687b      	ldr	r3, [r7, #4]
 8025ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025dde:	061b      	lsls	r3, r3, #24
 8025de0:	4933      	ldr	r1, [pc, #204]	; (8025eb0 <HAL_RCC_OscConfig+0x4d8>)
 8025de2:	4313      	orrs	r3, r2
 8025de4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8025de6:	4b33      	ldr	r3, [pc, #204]	; (8025eb4 <HAL_RCC_OscConfig+0x4dc>)
 8025de8:	2201      	movs	r2, #1
 8025dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8025dec:	f7fe fa4e 	bl	802428c <HAL_GetTick>
 8025df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8025df2:	e008      	b.n	8025e06 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8025df4:	f7fe fa4a 	bl	802428c <HAL_GetTick>
 8025df8:	4602      	mov	r2, r0
 8025dfa:	693b      	ldr	r3, [r7, #16]
 8025dfc:	1ad3      	subs	r3, r2, r3
 8025dfe:	2b02      	cmp	r3, #2
 8025e00:	d901      	bls.n	8025e06 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8025e02:	2303      	movs	r3, #3
 8025e04:	e04d      	b.n	8025ea2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8025e06:	4b2a      	ldr	r3, [pc, #168]	; (8025eb0 <HAL_RCC_OscConfig+0x4d8>)
 8025e08:	681b      	ldr	r3, [r3, #0]
 8025e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8025e0e:	2b00      	cmp	r3, #0
 8025e10:	d0f0      	beq.n	8025df4 <HAL_RCC_OscConfig+0x41c>
 8025e12:	e045      	b.n	8025ea0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8025e14:	4b27      	ldr	r3, [pc, #156]	; (8025eb4 <HAL_RCC_OscConfig+0x4dc>)
 8025e16:	2200      	movs	r2, #0
 8025e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8025e1a:	f7fe fa37 	bl	802428c <HAL_GetTick>
 8025e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8025e20:	e008      	b.n	8025e34 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8025e22:	f7fe fa33 	bl	802428c <HAL_GetTick>
 8025e26:	4602      	mov	r2, r0
 8025e28:	693b      	ldr	r3, [r7, #16]
 8025e2a:	1ad3      	subs	r3, r2, r3
 8025e2c:	2b02      	cmp	r3, #2
 8025e2e:	d901      	bls.n	8025e34 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8025e30:	2303      	movs	r3, #3
 8025e32:	e036      	b.n	8025ea2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8025e34:	4b1e      	ldr	r3, [pc, #120]	; (8025eb0 <HAL_RCC_OscConfig+0x4d8>)
 8025e36:	681b      	ldr	r3, [r3, #0]
 8025e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8025e3c:	2b00      	cmp	r3, #0
 8025e3e:	d1f0      	bne.n	8025e22 <HAL_RCC_OscConfig+0x44a>
 8025e40:	e02e      	b.n	8025ea0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8025e42:	687b      	ldr	r3, [r7, #4]
 8025e44:	699b      	ldr	r3, [r3, #24]
 8025e46:	2b01      	cmp	r3, #1
 8025e48:	d101      	bne.n	8025e4e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8025e4a:	2301      	movs	r3, #1
 8025e4c:	e029      	b.n	8025ea2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8025e4e:	4b18      	ldr	r3, [pc, #96]	; (8025eb0 <HAL_RCC_OscConfig+0x4d8>)
 8025e50:	685b      	ldr	r3, [r3, #4]
 8025e52:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8025e54:	68fb      	ldr	r3, [r7, #12]
 8025e56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8025e5a:	687b      	ldr	r3, [r7, #4]
 8025e5c:	69db      	ldr	r3, [r3, #28]
 8025e5e:	429a      	cmp	r2, r3
 8025e60:	d11c      	bne.n	8025e9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8025e62:	68fb      	ldr	r3, [r7, #12]
 8025e64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8025e68:	687b      	ldr	r3, [r7, #4]
 8025e6a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8025e6c:	429a      	cmp	r2, r3
 8025e6e:	d115      	bne.n	8025e9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8025e70:	68fa      	ldr	r2, [r7, #12]
 8025e72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8025e76:	4013      	ands	r3, r2
 8025e78:	687a      	ldr	r2, [r7, #4]
 8025e7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8025e7c:	4293      	cmp	r3, r2
 8025e7e:	d10d      	bne.n	8025e9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8025e80:	68fb      	ldr	r3, [r7, #12]
 8025e82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8025e86:	687b      	ldr	r3, [r7, #4]
 8025e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8025e8a:	429a      	cmp	r2, r3
 8025e8c:	d106      	bne.n	8025e9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8025e8e:	68fb      	ldr	r3, [r7, #12]
 8025e90:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8025e94:	687b      	ldr	r3, [r7, #4]
 8025e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8025e98:	429a      	cmp	r2, r3
 8025e9a:	d001      	beq.n	8025ea0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8025e9c:	2301      	movs	r3, #1
 8025e9e:	e000      	b.n	8025ea2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8025ea0:	2300      	movs	r3, #0
}
 8025ea2:	4618      	mov	r0, r3
 8025ea4:	3718      	adds	r7, #24
 8025ea6:	46bd      	mov	sp, r7
 8025ea8:	bd80      	pop	{r7, pc}
 8025eaa:	bf00      	nop
 8025eac:	40007000 	.word	0x40007000
 8025eb0:	40023800 	.word	0x40023800
 8025eb4:	42470060 	.word	0x42470060

08025eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8025eb8:	b580      	push	{r7, lr}
 8025eba:	b084      	sub	sp, #16
 8025ebc:	af00      	add	r7, sp, #0
 8025ebe:	6078      	str	r0, [r7, #4]
 8025ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8025ec2:	687b      	ldr	r3, [r7, #4]
 8025ec4:	2b00      	cmp	r3, #0
 8025ec6:	d101      	bne.n	8025ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8025ec8:	2301      	movs	r3, #1
 8025eca:	e0cc      	b.n	8026066 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8025ecc:	4b68      	ldr	r3, [pc, #416]	; (8026070 <HAL_RCC_ClockConfig+0x1b8>)
 8025ece:	681b      	ldr	r3, [r3, #0]
 8025ed0:	f003 030f 	and.w	r3, r3, #15
 8025ed4:	683a      	ldr	r2, [r7, #0]
 8025ed6:	429a      	cmp	r2, r3
 8025ed8:	d90c      	bls.n	8025ef4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8025eda:	4b65      	ldr	r3, [pc, #404]	; (8026070 <HAL_RCC_ClockConfig+0x1b8>)
 8025edc:	683a      	ldr	r2, [r7, #0]
 8025ede:	b2d2      	uxtb	r2, r2
 8025ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8025ee2:	4b63      	ldr	r3, [pc, #396]	; (8026070 <HAL_RCC_ClockConfig+0x1b8>)
 8025ee4:	681b      	ldr	r3, [r3, #0]
 8025ee6:	f003 030f 	and.w	r3, r3, #15
 8025eea:	683a      	ldr	r2, [r7, #0]
 8025eec:	429a      	cmp	r2, r3
 8025eee:	d001      	beq.n	8025ef4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8025ef0:	2301      	movs	r3, #1
 8025ef2:	e0b8      	b.n	8026066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8025ef4:	687b      	ldr	r3, [r7, #4]
 8025ef6:	681b      	ldr	r3, [r3, #0]
 8025ef8:	f003 0302 	and.w	r3, r3, #2
 8025efc:	2b00      	cmp	r3, #0
 8025efe:	d020      	beq.n	8025f42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8025f00:	687b      	ldr	r3, [r7, #4]
 8025f02:	681b      	ldr	r3, [r3, #0]
 8025f04:	f003 0304 	and.w	r3, r3, #4
 8025f08:	2b00      	cmp	r3, #0
 8025f0a:	d005      	beq.n	8025f18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8025f0c:	4b59      	ldr	r3, [pc, #356]	; (8026074 <HAL_RCC_ClockConfig+0x1bc>)
 8025f0e:	689b      	ldr	r3, [r3, #8]
 8025f10:	4a58      	ldr	r2, [pc, #352]	; (8026074 <HAL_RCC_ClockConfig+0x1bc>)
 8025f12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8025f16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8025f18:	687b      	ldr	r3, [r7, #4]
 8025f1a:	681b      	ldr	r3, [r3, #0]
 8025f1c:	f003 0308 	and.w	r3, r3, #8
 8025f20:	2b00      	cmp	r3, #0
 8025f22:	d005      	beq.n	8025f30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8025f24:	4b53      	ldr	r3, [pc, #332]	; (8026074 <HAL_RCC_ClockConfig+0x1bc>)
 8025f26:	689b      	ldr	r3, [r3, #8]
 8025f28:	4a52      	ldr	r2, [pc, #328]	; (8026074 <HAL_RCC_ClockConfig+0x1bc>)
 8025f2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8025f2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8025f30:	4b50      	ldr	r3, [pc, #320]	; (8026074 <HAL_RCC_ClockConfig+0x1bc>)
 8025f32:	689b      	ldr	r3, [r3, #8]
 8025f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8025f38:	687b      	ldr	r3, [r7, #4]
 8025f3a:	689b      	ldr	r3, [r3, #8]
 8025f3c:	494d      	ldr	r1, [pc, #308]	; (8026074 <HAL_RCC_ClockConfig+0x1bc>)
 8025f3e:	4313      	orrs	r3, r2
 8025f40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8025f42:	687b      	ldr	r3, [r7, #4]
 8025f44:	681b      	ldr	r3, [r3, #0]
 8025f46:	f003 0301 	and.w	r3, r3, #1
 8025f4a:	2b00      	cmp	r3, #0
 8025f4c:	d044      	beq.n	8025fd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8025f4e:	687b      	ldr	r3, [r7, #4]
 8025f50:	685b      	ldr	r3, [r3, #4]
 8025f52:	2b01      	cmp	r3, #1
 8025f54:	d107      	bne.n	8025f66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8025f56:	4b47      	ldr	r3, [pc, #284]	; (8026074 <HAL_RCC_ClockConfig+0x1bc>)
 8025f58:	681b      	ldr	r3, [r3, #0]
 8025f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8025f5e:	2b00      	cmp	r3, #0
 8025f60:	d119      	bne.n	8025f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8025f62:	2301      	movs	r3, #1
 8025f64:	e07f      	b.n	8026066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8025f66:	687b      	ldr	r3, [r7, #4]
 8025f68:	685b      	ldr	r3, [r3, #4]
 8025f6a:	2b02      	cmp	r3, #2
 8025f6c:	d003      	beq.n	8025f76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8025f6e:	687b      	ldr	r3, [r7, #4]
 8025f70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8025f72:	2b03      	cmp	r3, #3
 8025f74:	d107      	bne.n	8025f86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8025f76:	4b3f      	ldr	r3, [pc, #252]	; (8026074 <HAL_RCC_ClockConfig+0x1bc>)
 8025f78:	681b      	ldr	r3, [r3, #0]
 8025f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8025f7e:	2b00      	cmp	r3, #0
 8025f80:	d109      	bne.n	8025f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8025f82:	2301      	movs	r3, #1
 8025f84:	e06f      	b.n	8026066 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8025f86:	4b3b      	ldr	r3, [pc, #236]	; (8026074 <HAL_RCC_ClockConfig+0x1bc>)
 8025f88:	681b      	ldr	r3, [r3, #0]
 8025f8a:	f003 0302 	and.w	r3, r3, #2
 8025f8e:	2b00      	cmp	r3, #0
 8025f90:	d101      	bne.n	8025f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8025f92:	2301      	movs	r3, #1
 8025f94:	e067      	b.n	8026066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8025f96:	4b37      	ldr	r3, [pc, #220]	; (8026074 <HAL_RCC_ClockConfig+0x1bc>)
 8025f98:	689b      	ldr	r3, [r3, #8]
 8025f9a:	f023 0203 	bic.w	r2, r3, #3
 8025f9e:	687b      	ldr	r3, [r7, #4]
 8025fa0:	685b      	ldr	r3, [r3, #4]
 8025fa2:	4934      	ldr	r1, [pc, #208]	; (8026074 <HAL_RCC_ClockConfig+0x1bc>)
 8025fa4:	4313      	orrs	r3, r2
 8025fa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8025fa8:	f7fe f970 	bl	802428c <HAL_GetTick>
 8025fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8025fae:	e00a      	b.n	8025fc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8025fb0:	f7fe f96c 	bl	802428c <HAL_GetTick>
 8025fb4:	4602      	mov	r2, r0
 8025fb6:	68fb      	ldr	r3, [r7, #12]
 8025fb8:	1ad3      	subs	r3, r2, r3
 8025fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8025fbe:	4293      	cmp	r3, r2
 8025fc0:	d901      	bls.n	8025fc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8025fc2:	2303      	movs	r3, #3
 8025fc4:	e04f      	b.n	8026066 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8025fc6:	4b2b      	ldr	r3, [pc, #172]	; (8026074 <HAL_RCC_ClockConfig+0x1bc>)
 8025fc8:	689b      	ldr	r3, [r3, #8]
 8025fca:	f003 020c 	and.w	r2, r3, #12
 8025fce:	687b      	ldr	r3, [r7, #4]
 8025fd0:	685b      	ldr	r3, [r3, #4]
 8025fd2:	009b      	lsls	r3, r3, #2
 8025fd4:	429a      	cmp	r2, r3
 8025fd6:	d1eb      	bne.n	8025fb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8025fd8:	4b25      	ldr	r3, [pc, #148]	; (8026070 <HAL_RCC_ClockConfig+0x1b8>)
 8025fda:	681b      	ldr	r3, [r3, #0]
 8025fdc:	f003 030f 	and.w	r3, r3, #15
 8025fe0:	683a      	ldr	r2, [r7, #0]
 8025fe2:	429a      	cmp	r2, r3
 8025fe4:	d20c      	bcs.n	8026000 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8025fe6:	4b22      	ldr	r3, [pc, #136]	; (8026070 <HAL_RCC_ClockConfig+0x1b8>)
 8025fe8:	683a      	ldr	r2, [r7, #0]
 8025fea:	b2d2      	uxtb	r2, r2
 8025fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8025fee:	4b20      	ldr	r3, [pc, #128]	; (8026070 <HAL_RCC_ClockConfig+0x1b8>)
 8025ff0:	681b      	ldr	r3, [r3, #0]
 8025ff2:	f003 030f 	and.w	r3, r3, #15
 8025ff6:	683a      	ldr	r2, [r7, #0]
 8025ff8:	429a      	cmp	r2, r3
 8025ffa:	d001      	beq.n	8026000 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8025ffc:	2301      	movs	r3, #1
 8025ffe:	e032      	b.n	8026066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8026000:	687b      	ldr	r3, [r7, #4]
 8026002:	681b      	ldr	r3, [r3, #0]
 8026004:	f003 0304 	and.w	r3, r3, #4
 8026008:	2b00      	cmp	r3, #0
 802600a:	d008      	beq.n	802601e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 802600c:	4b19      	ldr	r3, [pc, #100]	; (8026074 <HAL_RCC_ClockConfig+0x1bc>)
 802600e:	689b      	ldr	r3, [r3, #8]
 8026010:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8026014:	687b      	ldr	r3, [r7, #4]
 8026016:	68db      	ldr	r3, [r3, #12]
 8026018:	4916      	ldr	r1, [pc, #88]	; (8026074 <HAL_RCC_ClockConfig+0x1bc>)
 802601a:	4313      	orrs	r3, r2
 802601c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 802601e:	687b      	ldr	r3, [r7, #4]
 8026020:	681b      	ldr	r3, [r3, #0]
 8026022:	f003 0308 	and.w	r3, r3, #8
 8026026:	2b00      	cmp	r3, #0
 8026028:	d009      	beq.n	802603e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 802602a:	4b12      	ldr	r3, [pc, #72]	; (8026074 <HAL_RCC_ClockConfig+0x1bc>)
 802602c:	689b      	ldr	r3, [r3, #8]
 802602e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8026032:	687b      	ldr	r3, [r7, #4]
 8026034:	691b      	ldr	r3, [r3, #16]
 8026036:	00db      	lsls	r3, r3, #3
 8026038:	490e      	ldr	r1, [pc, #56]	; (8026074 <HAL_RCC_ClockConfig+0x1bc>)
 802603a:	4313      	orrs	r3, r2
 802603c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 802603e:	f000 f821 	bl	8026084 <HAL_RCC_GetSysClockFreq>
 8026042:	4601      	mov	r1, r0
 8026044:	4b0b      	ldr	r3, [pc, #44]	; (8026074 <HAL_RCC_ClockConfig+0x1bc>)
 8026046:	689b      	ldr	r3, [r3, #8]
 8026048:	091b      	lsrs	r3, r3, #4
 802604a:	f003 030f 	and.w	r3, r3, #15
 802604e:	4a0a      	ldr	r2, [pc, #40]	; (8026078 <HAL_RCC_ClockConfig+0x1c0>)
 8026050:	5cd3      	ldrb	r3, [r2, r3]
 8026052:	fa21 f303 	lsr.w	r3, r1, r3
 8026056:	4a09      	ldr	r2, [pc, #36]	; (802607c <HAL_RCC_ClockConfig+0x1c4>)
 8026058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 802605a:	4b09      	ldr	r3, [pc, #36]	; (8026080 <HAL_RCC_ClockConfig+0x1c8>)
 802605c:	681b      	ldr	r3, [r3, #0]
 802605e:	4618      	mov	r0, r3
 8026060:	f7fe f8d0 	bl	8024204 <HAL_InitTick>

  return HAL_OK;
 8026064:	2300      	movs	r3, #0
}
 8026066:	4618      	mov	r0, r3
 8026068:	3710      	adds	r7, #16
 802606a:	46bd      	mov	sp, r7
 802606c:	bd80      	pop	{r7, pc}
 802606e:	bf00      	nop
 8026070:	40023c00 	.word	0x40023c00
 8026074:	40023800 	.word	0x40023800
 8026078:	080273c4 	.word	0x080273c4
 802607c:	20000000 	.word	0x20000000
 8026080:	20000004 	.word	0x20000004

08026084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8026084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026086:	b085      	sub	sp, #20
 8026088:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 802608a:	2300      	movs	r3, #0
 802608c:	607b      	str	r3, [r7, #4]
 802608e:	2300      	movs	r3, #0
 8026090:	60fb      	str	r3, [r7, #12]
 8026092:	2300      	movs	r3, #0
 8026094:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8026096:	2300      	movs	r3, #0
 8026098:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 802609a:	4b50      	ldr	r3, [pc, #320]	; (80261dc <HAL_RCC_GetSysClockFreq+0x158>)
 802609c:	689b      	ldr	r3, [r3, #8]
 802609e:	f003 030c 	and.w	r3, r3, #12
 80260a2:	2b04      	cmp	r3, #4
 80260a4:	d007      	beq.n	80260b6 <HAL_RCC_GetSysClockFreq+0x32>
 80260a6:	2b08      	cmp	r3, #8
 80260a8:	d008      	beq.n	80260bc <HAL_RCC_GetSysClockFreq+0x38>
 80260aa:	2b00      	cmp	r3, #0
 80260ac:	f040 808d 	bne.w	80261ca <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80260b0:	4b4b      	ldr	r3, [pc, #300]	; (80261e0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80260b2:	60bb      	str	r3, [r7, #8]
       break;
 80260b4:	e08c      	b.n	80261d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80260b6:	4b4b      	ldr	r3, [pc, #300]	; (80261e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80260b8:	60bb      	str	r3, [r7, #8]
      break;
 80260ba:	e089      	b.n	80261d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80260bc:	4b47      	ldr	r3, [pc, #284]	; (80261dc <HAL_RCC_GetSysClockFreq+0x158>)
 80260be:	685b      	ldr	r3, [r3, #4]
 80260c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80260c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80260c6:	4b45      	ldr	r3, [pc, #276]	; (80261dc <HAL_RCC_GetSysClockFreq+0x158>)
 80260c8:	685b      	ldr	r3, [r3, #4]
 80260ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80260ce:	2b00      	cmp	r3, #0
 80260d0:	d023      	beq.n	802611a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80260d2:	4b42      	ldr	r3, [pc, #264]	; (80261dc <HAL_RCC_GetSysClockFreq+0x158>)
 80260d4:	685b      	ldr	r3, [r3, #4]
 80260d6:	099b      	lsrs	r3, r3, #6
 80260d8:	f04f 0400 	mov.w	r4, #0
 80260dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80260e0:	f04f 0200 	mov.w	r2, #0
 80260e4:	ea03 0501 	and.w	r5, r3, r1
 80260e8:	ea04 0602 	and.w	r6, r4, r2
 80260ec:	4a3d      	ldr	r2, [pc, #244]	; (80261e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80260ee:	fb02 f106 	mul.w	r1, r2, r6
 80260f2:	2200      	movs	r2, #0
 80260f4:	fb02 f205 	mul.w	r2, r2, r5
 80260f8:	440a      	add	r2, r1
 80260fa:	493a      	ldr	r1, [pc, #232]	; (80261e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80260fc:	fba5 0101 	umull	r0, r1, r5, r1
 8026100:	1853      	adds	r3, r2, r1
 8026102:	4619      	mov	r1, r3
 8026104:	687b      	ldr	r3, [r7, #4]
 8026106:	f04f 0400 	mov.w	r4, #0
 802610a:	461a      	mov	r2, r3
 802610c:	4623      	mov	r3, r4
 802610e:	f7fa fc3d 	bl	802098c <__aeabi_uldivmod>
 8026112:	4603      	mov	r3, r0
 8026114:	460c      	mov	r4, r1
 8026116:	60fb      	str	r3, [r7, #12]
 8026118:	e049      	b.n	80261ae <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802611a:	4b30      	ldr	r3, [pc, #192]	; (80261dc <HAL_RCC_GetSysClockFreq+0x158>)
 802611c:	685b      	ldr	r3, [r3, #4]
 802611e:	099b      	lsrs	r3, r3, #6
 8026120:	f04f 0400 	mov.w	r4, #0
 8026124:	f240 11ff 	movw	r1, #511	; 0x1ff
 8026128:	f04f 0200 	mov.w	r2, #0
 802612c:	ea03 0501 	and.w	r5, r3, r1
 8026130:	ea04 0602 	and.w	r6, r4, r2
 8026134:	4629      	mov	r1, r5
 8026136:	4632      	mov	r2, r6
 8026138:	f04f 0300 	mov.w	r3, #0
 802613c:	f04f 0400 	mov.w	r4, #0
 8026140:	0154      	lsls	r4, r2, #5
 8026142:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8026146:	014b      	lsls	r3, r1, #5
 8026148:	4619      	mov	r1, r3
 802614a:	4622      	mov	r2, r4
 802614c:	1b49      	subs	r1, r1, r5
 802614e:	eb62 0206 	sbc.w	r2, r2, r6
 8026152:	f04f 0300 	mov.w	r3, #0
 8026156:	f04f 0400 	mov.w	r4, #0
 802615a:	0194      	lsls	r4, r2, #6
 802615c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8026160:	018b      	lsls	r3, r1, #6
 8026162:	1a5b      	subs	r3, r3, r1
 8026164:	eb64 0402 	sbc.w	r4, r4, r2
 8026168:	f04f 0100 	mov.w	r1, #0
 802616c:	f04f 0200 	mov.w	r2, #0
 8026170:	00e2      	lsls	r2, r4, #3
 8026172:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8026176:	00d9      	lsls	r1, r3, #3
 8026178:	460b      	mov	r3, r1
 802617a:	4614      	mov	r4, r2
 802617c:	195b      	adds	r3, r3, r5
 802617e:	eb44 0406 	adc.w	r4, r4, r6
 8026182:	f04f 0100 	mov.w	r1, #0
 8026186:	f04f 0200 	mov.w	r2, #0
 802618a:	02a2      	lsls	r2, r4, #10
 802618c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8026190:	0299      	lsls	r1, r3, #10
 8026192:	460b      	mov	r3, r1
 8026194:	4614      	mov	r4, r2
 8026196:	4618      	mov	r0, r3
 8026198:	4621      	mov	r1, r4
 802619a:	687b      	ldr	r3, [r7, #4]
 802619c:	f04f 0400 	mov.w	r4, #0
 80261a0:	461a      	mov	r2, r3
 80261a2:	4623      	mov	r3, r4
 80261a4:	f7fa fbf2 	bl	802098c <__aeabi_uldivmod>
 80261a8:	4603      	mov	r3, r0
 80261aa:	460c      	mov	r4, r1
 80261ac:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80261ae:	4b0b      	ldr	r3, [pc, #44]	; (80261dc <HAL_RCC_GetSysClockFreq+0x158>)
 80261b0:	685b      	ldr	r3, [r3, #4]
 80261b2:	0c1b      	lsrs	r3, r3, #16
 80261b4:	f003 0303 	and.w	r3, r3, #3
 80261b8:	3301      	adds	r3, #1
 80261ba:	005b      	lsls	r3, r3, #1
 80261bc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80261be:	68fa      	ldr	r2, [r7, #12]
 80261c0:	683b      	ldr	r3, [r7, #0]
 80261c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80261c6:	60bb      	str	r3, [r7, #8]
      break;
 80261c8:	e002      	b.n	80261d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80261ca:	4b05      	ldr	r3, [pc, #20]	; (80261e0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80261cc:	60bb      	str	r3, [r7, #8]
      break;
 80261ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80261d0:	68bb      	ldr	r3, [r7, #8]
}
 80261d2:	4618      	mov	r0, r3
 80261d4:	3714      	adds	r7, #20
 80261d6:	46bd      	mov	sp, r7
 80261d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80261da:	bf00      	nop
 80261dc:	40023800 	.word	0x40023800
 80261e0:	00f42400 	.word	0x00f42400
 80261e4:	00b71b00 	.word	0x00b71b00

080261e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80261e8:	b480      	push	{r7}
 80261ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80261ec:	4b03      	ldr	r3, [pc, #12]	; (80261fc <HAL_RCC_GetHCLKFreq+0x14>)
 80261ee:	681b      	ldr	r3, [r3, #0]
}
 80261f0:	4618      	mov	r0, r3
 80261f2:	46bd      	mov	sp, r7
 80261f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80261f8:	4770      	bx	lr
 80261fa:	bf00      	nop
 80261fc:	20000000 	.word	0x20000000

08026200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8026200:	b580      	push	{r7, lr}
 8026202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8026204:	f7ff fff0 	bl	80261e8 <HAL_RCC_GetHCLKFreq>
 8026208:	4601      	mov	r1, r0
 802620a:	4b05      	ldr	r3, [pc, #20]	; (8026220 <HAL_RCC_GetPCLK1Freq+0x20>)
 802620c:	689b      	ldr	r3, [r3, #8]
 802620e:	0a9b      	lsrs	r3, r3, #10
 8026210:	f003 0307 	and.w	r3, r3, #7
 8026214:	4a03      	ldr	r2, [pc, #12]	; (8026224 <HAL_RCC_GetPCLK1Freq+0x24>)
 8026216:	5cd3      	ldrb	r3, [r2, r3]
 8026218:	fa21 f303 	lsr.w	r3, r1, r3
}
 802621c:	4618      	mov	r0, r3
 802621e:	bd80      	pop	{r7, pc}
 8026220:	40023800 	.word	0x40023800
 8026224:	080273d4 	.word	0x080273d4

08026228 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8026228:	b580      	push	{r7, lr}
 802622a:	b082      	sub	sp, #8
 802622c:	af00      	add	r7, sp, #0
 802622e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8026230:	687b      	ldr	r3, [r7, #4]
 8026232:	2b00      	cmp	r3, #0
 8026234:	d101      	bne.n	802623a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8026236:	2301      	movs	r3, #1
 8026238:	e056      	b.n	80262e8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802623a:	687b      	ldr	r3, [r7, #4]
 802623c:	2200      	movs	r2, #0
 802623e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8026240:	687b      	ldr	r3, [r7, #4]
 8026242:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8026246:	b2db      	uxtb	r3, r3
 8026248:	2b00      	cmp	r3, #0
 802624a:	d106      	bne.n	802625a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 802624c:	687b      	ldr	r3, [r7, #4]
 802624e:	2200      	movs	r2, #0
 8026250:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8026254:	6878      	ldr	r0, [r7, #4]
 8026256:	f7fd f883 	bl	8023360 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 802625a:	687b      	ldr	r3, [r7, #4]
 802625c:	2202      	movs	r2, #2
 802625e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8026262:	687b      	ldr	r3, [r7, #4]
 8026264:	681b      	ldr	r3, [r3, #0]
 8026266:	681a      	ldr	r2, [r3, #0]
 8026268:	687b      	ldr	r3, [r7, #4]
 802626a:	681b      	ldr	r3, [r3, #0]
 802626c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8026270:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8026272:	687b      	ldr	r3, [r7, #4]
 8026274:	685a      	ldr	r2, [r3, #4]
 8026276:	687b      	ldr	r3, [r7, #4]
 8026278:	689b      	ldr	r3, [r3, #8]
 802627a:	431a      	orrs	r2, r3
 802627c:	687b      	ldr	r3, [r7, #4]
 802627e:	68db      	ldr	r3, [r3, #12]
 8026280:	431a      	orrs	r2, r3
 8026282:	687b      	ldr	r3, [r7, #4]
 8026284:	691b      	ldr	r3, [r3, #16]
 8026286:	431a      	orrs	r2, r3
 8026288:	687b      	ldr	r3, [r7, #4]
 802628a:	695b      	ldr	r3, [r3, #20]
 802628c:	431a      	orrs	r2, r3
 802628e:	687b      	ldr	r3, [r7, #4]
 8026290:	699b      	ldr	r3, [r3, #24]
 8026292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8026296:	431a      	orrs	r2, r3
 8026298:	687b      	ldr	r3, [r7, #4]
 802629a:	69db      	ldr	r3, [r3, #28]
 802629c:	431a      	orrs	r2, r3
 802629e:	687b      	ldr	r3, [r7, #4]
 80262a0:	6a1b      	ldr	r3, [r3, #32]
 80262a2:	ea42 0103 	orr.w	r1, r2, r3
 80262a6:	687b      	ldr	r3, [r7, #4]
 80262a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80262aa:	687b      	ldr	r3, [r7, #4]
 80262ac:	681b      	ldr	r3, [r3, #0]
 80262ae:	430a      	orrs	r2, r1
 80262b0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80262b2:	687b      	ldr	r3, [r7, #4]
 80262b4:	699b      	ldr	r3, [r3, #24]
 80262b6:	0c1b      	lsrs	r3, r3, #16
 80262b8:	f003 0104 	and.w	r1, r3, #4
 80262bc:	687b      	ldr	r3, [r7, #4]
 80262be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80262c0:	687b      	ldr	r3, [r7, #4]
 80262c2:	681b      	ldr	r3, [r3, #0]
 80262c4:	430a      	orrs	r2, r1
 80262c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80262c8:	687b      	ldr	r3, [r7, #4]
 80262ca:	681b      	ldr	r3, [r3, #0]
 80262cc:	69da      	ldr	r2, [r3, #28]
 80262ce:	687b      	ldr	r3, [r7, #4]
 80262d0:	681b      	ldr	r3, [r3, #0]
 80262d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80262d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80262d8:	687b      	ldr	r3, [r7, #4]
 80262da:	2200      	movs	r2, #0
 80262dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80262de:	687b      	ldr	r3, [r7, #4]
 80262e0:	2201      	movs	r2, #1
 80262e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80262e6:	2300      	movs	r3, #0
}
 80262e8:	4618      	mov	r0, r3
 80262ea:	3708      	adds	r7, #8
 80262ec:	46bd      	mov	sp, r7
 80262ee:	bd80      	pop	{r7, pc}

080262f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80262f0:	b580      	push	{r7, lr}
 80262f2:	b082      	sub	sp, #8
 80262f4:	af00      	add	r7, sp, #0
 80262f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80262f8:	687b      	ldr	r3, [r7, #4]
 80262fa:	2b00      	cmp	r3, #0
 80262fc:	d101      	bne.n	8026302 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80262fe:	2301      	movs	r3, #1
 8026300:	e01d      	b.n	802633e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8026302:	687b      	ldr	r3, [r7, #4]
 8026304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8026308:	b2db      	uxtb	r3, r3
 802630a:	2b00      	cmp	r3, #0
 802630c:	d106      	bne.n	802631c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802630e:	687b      	ldr	r3, [r7, #4]
 8026310:	2200      	movs	r2, #0
 8026312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8026316:	6878      	ldr	r0, [r7, #4]
 8026318:	f7fd f8b8 	bl	802348c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802631c:	687b      	ldr	r3, [r7, #4]
 802631e:	2202      	movs	r2, #2
 8026320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8026324:	687b      	ldr	r3, [r7, #4]
 8026326:	681a      	ldr	r2, [r3, #0]
 8026328:	687b      	ldr	r3, [r7, #4]
 802632a:	3304      	adds	r3, #4
 802632c:	4619      	mov	r1, r3
 802632e:	4610      	mov	r0, r2
 8026330:	f000 fc0e 	bl	8026b50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8026334:	687b      	ldr	r3, [r7, #4]
 8026336:	2201      	movs	r2, #1
 8026338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802633c:	2300      	movs	r3, #0
}
 802633e:	4618      	mov	r0, r3
 8026340:	3708      	adds	r7, #8
 8026342:	46bd      	mov	sp, r7
 8026344:	bd80      	pop	{r7, pc}

08026346 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8026346:	b480      	push	{r7}
 8026348:	b085      	sub	sp, #20
 802634a:	af00      	add	r7, sp, #0
 802634c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 802634e:	687b      	ldr	r3, [r7, #4]
 8026350:	681b      	ldr	r3, [r3, #0]
 8026352:	68da      	ldr	r2, [r3, #12]
 8026354:	687b      	ldr	r3, [r7, #4]
 8026356:	681b      	ldr	r3, [r3, #0]
 8026358:	f042 0201 	orr.w	r2, r2, #1
 802635c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802635e:	687b      	ldr	r3, [r7, #4]
 8026360:	681b      	ldr	r3, [r3, #0]
 8026362:	689b      	ldr	r3, [r3, #8]
 8026364:	f003 0307 	and.w	r3, r3, #7
 8026368:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802636a:	68fb      	ldr	r3, [r7, #12]
 802636c:	2b06      	cmp	r3, #6
 802636e:	d007      	beq.n	8026380 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8026370:	687b      	ldr	r3, [r7, #4]
 8026372:	681b      	ldr	r3, [r3, #0]
 8026374:	681a      	ldr	r2, [r3, #0]
 8026376:	687b      	ldr	r3, [r7, #4]
 8026378:	681b      	ldr	r3, [r3, #0]
 802637a:	f042 0201 	orr.w	r2, r2, #1
 802637e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8026380:	2300      	movs	r3, #0
}
 8026382:	4618      	mov	r0, r3
 8026384:	3714      	adds	r7, #20
 8026386:	46bd      	mov	sp, r7
 8026388:	f85d 7b04 	ldr.w	r7, [sp], #4
 802638c:	4770      	bx	lr

0802638e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 802638e:	b580      	push	{r7, lr}
 8026390:	b082      	sub	sp, #8
 8026392:	af00      	add	r7, sp, #0
 8026394:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8026396:	687b      	ldr	r3, [r7, #4]
 8026398:	2b00      	cmp	r3, #0
 802639a:	d101      	bne.n	80263a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 802639c:	2301      	movs	r3, #1
 802639e:	e01d      	b.n	80263dc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80263a0:	687b      	ldr	r3, [r7, #4]
 80263a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80263a6:	b2db      	uxtb	r3, r3
 80263a8:	2b00      	cmp	r3, #0
 80263aa:	d106      	bne.n	80263ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80263ac:	687b      	ldr	r3, [r7, #4]
 80263ae:	2200      	movs	r2, #0
 80263b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80263b4:	6878      	ldr	r0, [r7, #4]
 80263b6:	f7fd f81b 	bl	80233f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80263ba:	687b      	ldr	r3, [r7, #4]
 80263bc:	2202      	movs	r2, #2
 80263be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80263c2:	687b      	ldr	r3, [r7, #4]
 80263c4:	681a      	ldr	r2, [r3, #0]
 80263c6:	687b      	ldr	r3, [r7, #4]
 80263c8:	3304      	adds	r3, #4
 80263ca:	4619      	mov	r1, r3
 80263cc:	4610      	mov	r0, r2
 80263ce:	f000 fbbf 	bl	8026b50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80263d2:	687b      	ldr	r3, [r7, #4]
 80263d4:	2201      	movs	r2, #1
 80263d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80263da:	2300      	movs	r3, #0
}
 80263dc:	4618      	mov	r0, r3
 80263de:	3708      	adds	r7, #8
 80263e0:	46bd      	mov	sp, r7
 80263e2:	bd80      	pop	{r7, pc}

080263e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80263e4:	b580      	push	{r7, lr}
 80263e6:	b084      	sub	sp, #16
 80263e8:	af00      	add	r7, sp, #0
 80263ea:	6078      	str	r0, [r7, #4]
 80263ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80263ee:	687b      	ldr	r3, [r7, #4]
 80263f0:	681b      	ldr	r3, [r3, #0]
 80263f2:	2201      	movs	r2, #1
 80263f4:	6839      	ldr	r1, [r7, #0]
 80263f6:	4618      	mov	r0, r3
 80263f8:	f000 fe94 	bl	8027124 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80263fc:	687b      	ldr	r3, [r7, #4]
 80263fe:	681b      	ldr	r3, [r3, #0]
 8026400:	4a15      	ldr	r2, [pc, #84]	; (8026458 <HAL_TIM_PWM_Start+0x74>)
 8026402:	4293      	cmp	r3, r2
 8026404:	d004      	beq.n	8026410 <HAL_TIM_PWM_Start+0x2c>
 8026406:	687b      	ldr	r3, [r7, #4]
 8026408:	681b      	ldr	r3, [r3, #0]
 802640a:	4a14      	ldr	r2, [pc, #80]	; (802645c <HAL_TIM_PWM_Start+0x78>)
 802640c:	4293      	cmp	r3, r2
 802640e:	d101      	bne.n	8026414 <HAL_TIM_PWM_Start+0x30>
 8026410:	2301      	movs	r3, #1
 8026412:	e000      	b.n	8026416 <HAL_TIM_PWM_Start+0x32>
 8026414:	2300      	movs	r3, #0
 8026416:	2b00      	cmp	r3, #0
 8026418:	d007      	beq.n	802642a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 802641a:	687b      	ldr	r3, [r7, #4]
 802641c:	681b      	ldr	r3, [r3, #0]
 802641e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8026420:	687b      	ldr	r3, [r7, #4]
 8026422:	681b      	ldr	r3, [r3, #0]
 8026424:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8026428:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 802642a:	687b      	ldr	r3, [r7, #4]
 802642c:	681b      	ldr	r3, [r3, #0]
 802642e:	689b      	ldr	r3, [r3, #8]
 8026430:	f003 0307 	and.w	r3, r3, #7
 8026434:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8026436:	68fb      	ldr	r3, [r7, #12]
 8026438:	2b06      	cmp	r3, #6
 802643a:	d007      	beq.n	802644c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 802643c:	687b      	ldr	r3, [r7, #4]
 802643e:	681b      	ldr	r3, [r3, #0]
 8026440:	681a      	ldr	r2, [r3, #0]
 8026442:	687b      	ldr	r3, [r7, #4]
 8026444:	681b      	ldr	r3, [r3, #0]
 8026446:	f042 0201 	orr.w	r2, r2, #1
 802644a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 802644c:	2300      	movs	r3, #0
}
 802644e:	4618      	mov	r0, r3
 8026450:	3710      	adds	r7, #16
 8026452:	46bd      	mov	sp, r7
 8026454:	bd80      	pop	{r7, pc}
 8026456:	bf00      	nop
 8026458:	40010000 	.word	0x40010000
 802645c:	40010400 	.word	0x40010400

08026460 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8026460:	b580      	push	{r7, lr}
 8026462:	b086      	sub	sp, #24
 8026464:	af00      	add	r7, sp, #0
 8026466:	6078      	str	r0, [r7, #4]
 8026468:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 802646a:	687b      	ldr	r3, [r7, #4]
 802646c:	2b00      	cmp	r3, #0
 802646e:	d101      	bne.n	8026474 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8026470:	2301      	movs	r3, #1
 8026472:	e083      	b.n	802657c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8026474:	687b      	ldr	r3, [r7, #4]
 8026476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802647a:	b2db      	uxtb	r3, r3
 802647c:	2b00      	cmp	r3, #0
 802647e:	d106      	bne.n	802648e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8026480:	687b      	ldr	r3, [r7, #4]
 8026482:	2200      	movs	r2, #0
 8026484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8026488:	6878      	ldr	r0, [r7, #4]
 802648a:	f7fd f895 	bl	80235b8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802648e:	687b      	ldr	r3, [r7, #4]
 8026490:	2202      	movs	r2, #2
 8026492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8026496:	687b      	ldr	r3, [r7, #4]
 8026498:	681b      	ldr	r3, [r3, #0]
 802649a:	689b      	ldr	r3, [r3, #8]
 802649c:	687a      	ldr	r2, [r7, #4]
 802649e:	6812      	ldr	r2, [r2, #0]
 80264a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80264a4:	f023 0307 	bic.w	r3, r3, #7
 80264a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80264aa:	687b      	ldr	r3, [r7, #4]
 80264ac:	681a      	ldr	r2, [r3, #0]
 80264ae:	687b      	ldr	r3, [r7, #4]
 80264b0:	3304      	adds	r3, #4
 80264b2:	4619      	mov	r1, r3
 80264b4:	4610      	mov	r0, r2
 80264b6:	f000 fb4b 	bl	8026b50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80264ba:	687b      	ldr	r3, [r7, #4]
 80264bc:	681b      	ldr	r3, [r3, #0]
 80264be:	689b      	ldr	r3, [r3, #8]
 80264c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80264c2:	687b      	ldr	r3, [r7, #4]
 80264c4:	681b      	ldr	r3, [r3, #0]
 80264c6:	699b      	ldr	r3, [r3, #24]
 80264c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80264ca:	687b      	ldr	r3, [r7, #4]
 80264cc:	681b      	ldr	r3, [r3, #0]
 80264ce:	6a1b      	ldr	r3, [r3, #32]
 80264d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80264d2:	683b      	ldr	r3, [r7, #0]
 80264d4:	681b      	ldr	r3, [r3, #0]
 80264d6:	697a      	ldr	r2, [r7, #20]
 80264d8:	4313      	orrs	r3, r2
 80264da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80264dc:	693b      	ldr	r3, [r7, #16]
 80264de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80264e2:	f023 0303 	bic.w	r3, r3, #3
 80264e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80264e8:	683b      	ldr	r3, [r7, #0]
 80264ea:	689a      	ldr	r2, [r3, #8]
 80264ec:	683b      	ldr	r3, [r7, #0]
 80264ee:	699b      	ldr	r3, [r3, #24]
 80264f0:	021b      	lsls	r3, r3, #8
 80264f2:	4313      	orrs	r3, r2
 80264f4:	693a      	ldr	r2, [r7, #16]
 80264f6:	4313      	orrs	r3, r2
 80264f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80264fa:	693b      	ldr	r3, [r7, #16]
 80264fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8026500:	f023 030c 	bic.w	r3, r3, #12
 8026504:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8026506:	693b      	ldr	r3, [r7, #16]
 8026508:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802650c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8026510:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8026512:	683b      	ldr	r3, [r7, #0]
 8026514:	68da      	ldr	r2, [r3, #12]
 8026516:	683b      	ldr	r3, [r7, #0]
 8026518:	69db      	ldr	r3, [r3, #28]
 802651a:	021b      	lsls	r3, r3, #8
 802651c:	4313      	orrs	r3, r2
 802651e:	693a      	ldr	r2, [r7, #16]
 8026520:	4313      	orrs	r3, r2
 8026522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8026524:	683b      	ldr	r3, [r7, #0]
 8026526:	691b      	ldr	r3, [r3, #16]
 8026528:	011a      	lsls	r2, r3, #4
 802652a:	683b      	ldr	r3, [r7, #0]
 802652c:	6a1b      	ldr	r3, [r3, #32]
 802652e:	031b      	lsls	r3, r3, #12
 8026530:	4313      	orrs	r3, r2
 8026532:	693a      	ldr	r2, [r7, #16]
 8026534:	4313      	orrs	r3, r2
 8026536:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8026538:	68fb      	ldr	r3, [r7, #12]
 802653a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 802653e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8026540:	68fb      	ldr	r3, [r7, #12]
 8026542:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8026546:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8026548:	683b      	ldr	r3, [r7, #0]
 802654a:	685a      	ldr	r2, [r3, #4]
 802654c:	683b      	ldr	r3, [r7, #0]
 802654e:	695b      	ldr	r3, [r3, #20]
 8026550:	011b      	lsls	r3, r3, #4
 8026552:	4313      	orrs	r3, r2
 8026554:	68fa      	ldr	r2, [r7, #12]
 8026556:	4313      	orrs	r3, r2
 8026558:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 802655a:	687b      	ldr	r3, [r7, #4]
 802655c:	681b      	ldr	r3, [r3, #0]
 802655e:	697a      	ldr	r2, [r7, #20]
 8026560:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8026562:	687b      	ldr	r3, [r7, #4]
 8026564:	681b      	ldr	r3, [r3, #0]
 8026566:	693a      	ldr	r2, [r7, #16]
 8026568:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 802656a:	687b      	ldr	r3, [r7, #4]
 802656c:	681b      	ldr	r3, [r3, #0]
 802656e:	68fa      	ldr	r2, [r7, #12]
 8026570:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8026572:	687b      	ldr	r3, [r7, #4]
 8026574:	2201      	movs	r2, #1
 8026576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802657a:	2300      	movs	r3, #0
}
 802657c:	4618      	mov	r0, r3
 802657e:	3718      	adds	r7, #24
 8026580:	46bd      	mov	sp, r7
 8026582:	bd80      	pop	{r7, pc}

08026584 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8026584:	b580      	push	{r7, lr}
 8026586:	b082      	sub	sp, #8
 8026588:	af00      	add	r7, sp, #0
 802658a:	6078      	str	r0, [r7, #4]
 802658c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 802658e:	683b      	ldr	r3, [r7, #0]
 8026590:	2b00      	cmp	r3, #0
 8026592:	d002      	beq.n	802659a <HAL_TIM_Encoder_Start+0x16>
 8026594:	2b04      	cmp	r3, #4
 8026596:	d008      	beq.n	80265aa <HAL_TIM_Encoder_Start+0x26>
 8026598:	e00f      	b.n	80265ba <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 802659a:	687b      	ldr	r3, [r7, #4]
 802659c:	681b      	ldr	r3, [r3, #0]
 802659e:	2201      	movs	r2, #1
 80265a0:	2100      	movs	r1, #0
 80265a2:	4618      	mov	r0, r3
 80265a4:	f000 fdbe 	bl	8027124 <TIM_CCxChannelCmd>
      break;
 80265a8:	e016      	b.n	80265d8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80265aa:	687b      	ldr	r3, [r7, #4]
 80265ac:	681b      	ldr	r3, [r3, #0]
 80265ae:	2201      	movs	r2, #1
 80265b0:	2104      	movs	r1, #4
 80265b2:	4618      	mov	r0, r3
 80265b4:	f000 fdb6 	bl	8027124 <TIM_CCxChannelCmd>
      break;
 80265b8:	e00e      	b.n	80265d8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80265ba:	687b      	ldr	r3, [r7, #4]
 80265bc:	681b      	ldr	r3, [r3, #0]
 80265be:	2201      	movs	r2, #1
 80265c0:	2100      	movs	r1, #0
 80265c2:	4618      	mov	r0, r3
 80265c4:	f000 fdae 	bl	8027124 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80265c8:	687b      	ldr	r3, [r7, #4]
 80265ca:	681b      	ldr	r3, [r3, #0]
 80265cc:	2201      	movs	r2, #1
 80265ce:	2104      	movs	r1, #4
 80265d0:	4618      	mov	r0, r3
 80265d2:	f000 fda7 	bl	8027124 <TIM_CCxChannelCmd>
      break;
 80265d6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80265d8:	687b      	ldr	r3, [r7, #4]
 80265da:	681b      	ldr	r3, [r3, #0]
 80265dc:	681a      	ldr	r2, [r3, #0]
 80265de:	687b      	ldr	r3, [r7, #4]
 80265e0:	681b      	ldr	r3, [r3, #0]
 80265e2:	f042 0201 	orr.w	r2, r2, #1
 80265e6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80265e8:	2300      	movs	r3, #0
}
 80265ea:	4618      	mov	r0, r3
 80265ec:	3708      	adds	r7, #8
 80265ee:	46bd      	mov	sp, r7
 80265f0:	bd80      	pop	{r7, pc}

080265f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80265f2:	b580      	push	{r7, lr}
 80265f4:	b082      	sub	sp, #8
 80265f6:	af00      	add	r7, sp, #0
 80265f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80265fa:	687b      	ldr	r3, [r7, #4]
 80265fc:	681b      	ldr	r3, [r3, #0]
 80265fe:	691b      	ldr	r3, [r3, #16]
 8026600:	f003 0302 	and.w	r3, r3, #2
 8026604:	2b02      	cmp	r3, #2
 8026606:	d122      	bne.n	802664e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8026608:	687b      	ldr	r3, [r7, #4]
 802660a:	681b      	ldr	r3, [r3, #0]
 802660c:	68db      	ldr	r3, [r3, #12]
 802660e:	f003 0302 	and.w	r3, r3, #2
 8026612:	2b02      	cmp	r3, #2
 8026614:	d11b      	bne.n	802664e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8026616:	687b      	ldr	r3, [r7, #4]
 8026618:	681b      	ldr	r3, [r3, #0]
 802661a:	f06f 0202 	mvn.w	r2, #2
 802661e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8026620:	687b      	ldr	r3, [r7, #4]
 8026622:	2201      	movs	r2, #1
 8026624:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8026626:	687b      	ldr	r3, [r7, #4]
 8026628:	681b      	ldr	r3, [r3, #0]
 802662a:	699b      	ldr	r3, [r3, #24]
 802662c:	f003 0303 	and.w	r3, r3, #3
 8026630:	2b00      	cmp	r3, #0
 8026632:	d003      	beq.n	802663c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8026634:	6878      	ldr	r0, [r7, #4]
 8026636:	f000 fa6c 	bl	8026b12 <HAL_TIM_IC_CaptureCallback>
 802663a:	e005      	b.n	8026648 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 802663c:	6878      	ldr	r0, [r7, #4]
 802663e:	f000 fa5e 	bl	8026afe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8026642:	6878      	ldr	r0, [r7, #4]
 8026644:	f000 fa6f 	bl	8026b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8026648:	687b      	ldr	r3, [r7, #4]
 802664a:	2200      	movs	r2, #0
 802664c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 802664e:	687b      	ldr	r3, [r7, #4]
 8026650:	681b      	ldr	r3, [r3, #0]
 8026652:	691b      	ldr	r3, [r3, #16]
 8026654:	f003 0304 	and.w	r3, r3, #4
 8026658:	2b04      	cmp	r3, #4
 802665a:	d122      	bne.n	80266a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 802665c:	687b      	ldr	r3, [r7, #4]
 802665e:	681b      	ldr	r3, [r3, #0]
 8026660:	68db      	ldr	r3, [r3, #12]
 8026662:	f003 0304 	and.w	r3, r3, #4
 8026666:	2b04      	cmp	r3, #4
 8026668:	d11b      	bne.n	80266a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 802666a:	687b      	ldr	r3, [r7, #4]
 802666c:	681b      	ldr	r3, [r3, #0]
 802666e:	f06f 0204 	mvn.w	r2, #4
 8026672:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8026674:	687b      	ldr	r3, [r7, #4]
 8026676:	2202      	movs	r2, #2
 8026678:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 802667a:	687b      	ldr	r3, [r7, #4]
 802667c:	681b      	ldr	r3, [r3, #0]
 802667e:	699b      	ldr	r3, [r3, #24]
 8026680:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8026684:	2b00      	cmp	r3, #0
 8026686:	d003      	beq.n	8026690 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8026688:	6878      	ldr	r0, [r7, #4]
 802668a:	f000 fa42 	bl	8026b12 <HAL_TIM_IC_CaptureCallback>
 802668e:	e005      	b.n	802669c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8026690:	6878      	ldr	r0, [r7, #4]
 8026692:	f000 fa34 	bl	8026afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8026696:	6878      	ldr	r0, [r7, #4]
 8026698:	f000 fa45 	bl	8026b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802669c:	687b      	ldr	r3, [r7, #4]
 802669e:	2200      	movs	r2, #0
 80266a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80266a2:	687b      	ldr	r3, [r7, #4]
 80266a4:	681b      	ldr	r3, [r3, #0]
 80266a6:	691b      	ldr	r3, [r3, #16]
 80266a8:	f003 0308 	and.w	r3, r3, #8
 80266ac:	2b08      	cmp	r3, #8
 80266ae:	d122      	bne.n	80266f6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80266b0:	687b      	ldr	r3, [r7, #4]
 80266b2:	681b      	ldr	r3, [r3, #0]
 80266b4:	68db      	ldr	r3, [r3, #12]
 80266b6:	f003 0308 	and.w	r3, r3, #8
 80266ba:	2b08      	cmp	r3, #8
 80266bc:	d11b      	bne.n	80266f6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80266be:	687b      	ldr	r3, [r7, #4]
 80266c0:	681b      	ldr	r3, [r3, #0]
 80266c2:	f06f 0208 	mvn.w	r2, #8
 80266c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80266c8:	687b      	ldr	r3, [r7, #4]
 80266ca:	2204      	movs	r2, #4
 80266cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80266ce:	687b      	ldr	r3, [r7, #4]
 80266d0:	681b      	ldr	r3, [r3, #0]
 80266d2:	69db      	ldr	r3, [r3, #28]
 80266d4:	f003 0303 	and.w	r3, r3, #3
 80266d8:	2b00      	cmp	r3, #0
 80266da:	d003      	beq.n	80266e4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80266dc:	6878      	ldr	r0, [r7, #4]
 80266de:	f000 fa18 	bl	8026b12 <HAL_TIM_IC_CaptureCallback>
 80266e2:	e005      	b.n	80266f0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80266e4:	6878      	ldr	r0, [r7, #4]
 80266e6:	f000 fa0a 	bl	8026afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80266ea:	6878      	ldr	r0, [r7, #4]
 80266ec:	f000 fa1b 	bl	8026b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80266f0:	687b      	ldr	r3, [r7, #4]
 80266f2:	2200      	movs	r2, #0
 80266f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80266f6:	687b      	ldr	r3, [r7, #4]
 80266f8:	681b      	ldr	r3, [r3, #0]
 80266fa:	691b      	ldr	r3, [r3, #16]
 80266fc:	f003 0310 	and.w	r3, r3, #16
 8026700:	2b10      	cmp	r3, #16
 8026702:	d122      	bne.n	802674a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8026704:	687b      	ldr	r3, [r7, #4]
 8026706:	681b      	ldr	r3, [r3, #0]
 8026708:	68db      	ldr	r3, [r3, #12]
 802670a:	f003 0310 	and.w	r3, r3, #16
 802670e:	2b10      	cmp	r3, #16
 8026710:	d11b      	bne.n	802674a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8026712:	687b      	ldr	r3, [r7, #4]
 8026714:	681b      	ldr	r3, [r3, #0]
 8026716:	f06f 0210 	mvn.w	r2, #16
 802671a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 802671c:	687b      	ldr	r3, [r7, #4]
 802671e:	2208      	movs	r2, #8
 8026720:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8026722:	687b      	ldr	r3, [r7, #4]
 8026724:	681b      	ldr	r3, [r3, #0]
 8026726:	69db      	ldr	r3, [r3, #28]
 8026728:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802672c:	2b00      	cmp	r3, #0
 802672e:	d003      	beq.n	8026738 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8026730:	6878      	ldr	r0, [r7, #4]
 8026732:	f000 f9ee 	bl	8026b12 <HAL_TIM_IC_CaptureCallback>
 8026736:	e005      	b.n	8026744 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8026738:	6878      	ldr	r0, [r7, #4]
 802673a:	f000 f9e0 	bl	8026afe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802673e:	6878      	ldr	r0, [r7, #4]
 8026740:	f000 f9f1 	bl	8026b26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8026744:	687b      	ldr	r3, [r7, #4]
 8026746:	2200      	movs	r2, #0
 8026748:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 802674a:	687b      	ldr	r3, [r7, #4]
 802674c:	681b      	ldr	r3, [r3, #0]
 802674e:	691b      	ldr	r3, [r3, #16]
 8026750:	f003 0301 	and.w	r3, r3, #1
 8026754:	2b01      	cmp	r3, #1
 8026756:	d10e      	bne.n	8026776 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8026758:	687b      	ldr	r3, [r7, #4]
 802675a:	681b      	ldr	r3, [r3, #0]
 802675c:	68db      	ldr	r3, [r3, #12]
 802675e:	f003 0301 	and.w	r3, r3, #1
 8026762:	2b01      	cmp	r3, #1
 8026764:	d107      	bne.n	8026776 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8026766:	687b      	ldr	r3, [r7, #4]
 8026768:	681b      	ldr	r3, [r3, #0]
 802676a:	f06f 0201 	mvn.w	r2, #1
 802676e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8026770:	6878      	ldr	r0, [r7, #4]
 8026772:	f7fb f9a3 	bl	8021abc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8026776:	687b      	ldr	r3, [r7, #4]
 8026778:	681b      	ldr	r3, [r3, #0]
 802677a:	691b      	ldr	r3, [r3, #16]
 802677c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8026780:	2b80      	cmp	r3, #128	; 0x80
 8026782:	d10e      	bne.n	80267a2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8026784:	687b      	ldr	r3, [r7, #4]
 8026786:	681b      	ldr	r3, [r3, #0]
 8026788:	68db      	ldr	r3, [r3, #12]
 802678a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802678e:	2b80      	cmp	r3, #128	; 0x80
 8026790:	d107      	bne.n	80267a2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8026792:	687b      	ldr	r3, [r7, #4]
 8026794:	681b      	ldr	r3, [r3, #0]
 8026796:	f06f 0280 	mvn.w	r2, #128	; 0x80
 802679a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 802679c:	6878      	ldr	r0, [r7, #4]
 802679e:	f000 fdbf 	bl	8027320 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80267a2:	687b      	ldr	r3, [r7, #4]
 80267a4:	681b      	ldr	r3, [r3, #0]
 80267a6:	691b      	ldr	r3, [r3, #16]
 80267a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80267ac:	2b40      	cmp	r3, #64	; 0x40
 80267ae:	d10e      	bne.n	80267ce <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80267b0:	687b      	ldr	r3, [r7, #4]
 80267b2:	681b      	ldr	r3, [r3, #0]
 80267b4:	68db      	ldr	r3, [r3, #12]
 80267b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80267ba:	2b40      	cmp	r3, #64	; 0x40
 80267bc:	d107      	bne.n	80267ce <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80267be:	687b      	ldr	r3, [r7, #4]
 80267c0:	681b      	ldr	r3, [r3, #0]
 80267c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80267c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80267c8:	6878      	ldr	r0, [r7, #4]
 80267ca:	f000 f9b6 	bl	8026b3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80267ce:	687b      	ldr	r3, [r7, #4]
 80267d0:	681b      	ldr	r3, [r3, #0]
 80267d2:	691b      	ldr	r3, [r3, #16]
 80267d4:	f003 0320 	and.w	r3, r3, #32
 80267d8:	2b20      	cmp	r3, #32
 80267da:	d10e      	bne.n	80267fa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80267dc:	687b      	ldr	r3, [r7, #4]
 80267de:	681b      	ldr	r3, [r3, #0]
 80267e0:	68db      	ldr	r3, [r3, #12]
 80267e2:	f003 0320 	and.w	r3, r3, #32
 80267e6:	2b20      	cmp	r3, #32
 80267e8:	d107      	bne.n	80267fa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80267ea:	687b      	ldr	r3, [r7, #4]
 80267ec:	681b      	ldr	r3, [r3, #0]
 80267ee:	f06f 0220 	mvn.w	r2, #32
 80267f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80267f4:	6878      	ldr	r0, [r7, #4]
 80267f6:	f000 fd89 	bl	802730c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80267fa:	bf00      	nop
 80267fc:	3708      	adds	r7, #8
 80267fe:	46bd      	mov	sp, r7
 8026800:	bd80      	pop	{r7, pc}
	...

08026804 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8026804:	b580      	push	{r7, lr}
 8026806:	b084      	sub	sp, #16
 8026808:	af00      	add	r7, sp, #0
 802680a:	60f8      	str	r0, [r7, #12]
 802680c:	60b9      	str	r1, [r7, #8]
 802680e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8026810:	68fb      	ldr	r3, [r7, #12]
 8026812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8026816:	2b01      	cmp	r3, #1
 8026818:	d101      	bne.n	802681e <HAL_TIM_PWM_ConfigChannel+0x1a>
 802681a:	2302      	movs	r3, #2
 802681c:	e0b4      	b.n	8026988 <HAL_TIM_PWM_ConfigChannel+0x184>
 802681e:	68fb      	ldr	r3, [r7, #12]
 8026820:	2201      	movs	r2, #1
 8026822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8026826:	68fb      	ldr	r3, [r7, #12]
 8026828:	2202      	movs	r2, #2
 802682a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 802682e:	687b      	ldr	r3, [r7, #4]
 8026830:	2b0c      	cmp	r3, #12
 8026832:	f200 809f 	bhi.w	8026974 <HAL_TIM_PWM_ConfigChannel+0x170>
 8026836:	a201      	add	r2, pc, #4	; (adr r2, 802683c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8026838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802683c:	08026871 	.word	0x08026871
 8026840:	08026975 	.word	0x08026975
 8026844:	08026975 	.word	0x08026975
 8026848:	08026975 	.word	0x08026975
 802684c:	080268b1 	.word	0x080268b1
 8026850:	08026975 	.word	0x08026975
 8026854:	08026975 	.word	0x08026975
 8026858:	08026975 	.word	0x08026975
 802685c:	080268f3 	.word	0x080268f3
 8026860:	08026975 	.word	0x08026975
 8026864:	08026975 	.word	0x08026975
 8026868:	08026975 	.word	0x08026975
 802686c:	08026933 	.word	0x08026933
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8026870:	68fb      	ldr	r3, [r7, #12]
 8026872:	681b      	ldr	r3, [r3, #0]
 8026874:	68b9      	ldr	r1, [r7, #8]
 8026876:	4618      	mov	r0, r3
 8026878:	f000 fa0a 	bl	8026c90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 802687c:	68fb      	ldr	r3, [r7, #12]
 802687e:	681b      	ldr	r3, [r3, #0]
 8026880:	699a      	ldr	r2, [r3, #24]
 8026882:	68fb      	ldr	r3, [r7, #12]
 8026884:	681b      	ldr	r3, [r3, #0]
 8026886:	f042 0208 	orr.w	r2, r2, #8
 802688a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 802688c:	68fb      	ldr	r3, [r7, #12]
 802688e:	681b      	ldr	r3, [r3, #0]
 8026890:	699a      	ldr	r2, [r3, #24]
 8026892:	68fb      	ldr	r3, [r7, #12]
 8026894:	681b      	ldr	r3, [r3, #0]
 8026896:	f022 0204 	bic.w	r2, r2, #4
 802689a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 802689c:	68fb      	ldr	r3, [r7, #12]
 802689e:	681b      	ldr	r3, [r3, #0]
 80268a0:	6999      	ldr	r1, [r3, #24]
 80268a2:	68bb      	ldr	r3, [r7, #8]
 80268a4:	691a      	ldr	r2, [r3, #16]
 80268a6:	68fb      	ldr	r3, [r7, #12]
 80268a8:	681b      	ldr	r3, [r3, #0]
 80268aa:	430a      	orrs	r2, r1
 80268ac:	619a      	str	r2, [r3, #24]
      break;
 80268ae:	e062      	b.n	8026976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80268b0:	68fb      	ldr	r3, [r7, #12]
 80268b2:	681b      	ldr	r3, [r3, #0]
 80268b4:	68b9      	ldr	r1, [r7, #8]
 80268b6:	4618      	mov	r0, r3
 80268b8:	f000 fa5a 	bl	8026d70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80268bc:	68fb      	ldr	r3, [r7, #12]
 80268be:	681b      	ldr	r3, [r3, #0]
 80268c0:	699a      	ldr	r2, [r3, #24]
 80268c2:	68fb      	ldr	r3, [r7, #12]
 80268c4:	681b      	ldr	r3, [r3, #0]
 80268c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80268ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80268cc:	68fb      	ldr	r3, [r7, #12]
 80268ce:	681b      	ldr	r3, [r3, #0]
 80268d0:	699a      	ldr	r2, [r3, #24]
 80268d2:	68fb      	ldr	r3, [r7, #12]
 80268d4:	681b      	ldr	r3, [r3, #0]
 80268d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80268da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80268dc:	68fb      	ldr	r3, [r7, #12]
 80268de:	681b      	ldr	r3, [r3, #0]
 80268e0:	6999      	ldr	r1, [r3, #24]
 80268e2:	68bb      	ldr	r3, [r7, #8]
 80268e4:	691b      	ldr	r3, [r3, #16]
 80268e6:	021a      	lsls	r2, r3, #8
 80268e8:	68fb      	ldr	r3, [r7, #12]
 80268ea:	681b      	ldr	r3, [r3, #0]
 80268ec:	430a      	orrs	r2, r1
 80268ee:	619a      	str	r2, [r3, #24]
      break;
 80268f0:	e041      	b.n	8026976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80268f2:	68fb      	ldr	r3, [r7, #12]
 80268f4:	681b      	ldr	r3, [r3, #0]
 80268f6:	68b9      	ldr	r1, [r7, #8]
 80268f8:	4618      	mov	r0, r3
 80268fa:	f000 faaf 	bl	8026e5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80268fe:	68fb      	ldr	r3, [r7, #12]
 8026900:	681b      	ldr	r3, [r3, #0]
 8026902:	69da      	ldr	r2, [r3, #28]
 8026904:	68fb      	ldr	r3, [r7, #12]
 8026906:	681b      	ldr	r3, [r3, #0]
 8026908:	f042 0208 	orr.w	r2, r2, #8
 802690c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 802690e:	68fb      	ldr	r3, [r7, #12]
 8026910:	681b      	ldr	r3, [r3, #0]
 8026912:	69da      	ldr	r2, [r3, #28]
 8026914:	68fb      	ldr	r3, [r7, #12]
 8026916:	681b      	ldr	r3, [r3, #0]
 8026918:	f022 0204 	bic.w	r2, r2, #4
 802691c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 802691e:	68fb      	ldr	r3, [r7, #12]
 8026920:	681b      	ldr	r3, [r3, #0]
 8026922:	69d9      	ldr	r1, [r3, #28]
 8026924:	68bb      	ldr	r3, [r7, #8]
 8026926:	691a      	ldr	r2, [r3, #16]
 8026928:	68fb      	ldr	r3, [r7, #12]
 802692a:	681b      	ldr	r3, [r3, #0]
 802692c:	430a      	orrs	r2, r1
 802692e:	61da      	str	r2, [r3, #28]
      break;
 8026930:	e021      	b.n	8026976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8026932:	68fb      	ldr	r3, [r7, #12]
 8026934:	681b      	ldr	r3, [r3, #0]
 8026936:	68b9      	ldr	r1, [r7, #8]
 8026938:	4618      	mov	r0, r3
 802693a:	f000 fb03 	bl	8026f44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 802693e:	68fb      	ldr	r3, [r7, #12]
 8026940:	681b      	ldr	r3, [r3, #0]
 8026942:	69da      	ldr	r2, [r3, #28]
 8026944:	68fb      	ldr	r3, [r7, #12]
 8026946:	681b      	ldr	r3, [r3, #0]
 8026948:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802694c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 802694e:	68fb      	ldr	r3, [r7, #12]
 8026950:	681b      	ldr	r3, [r3, #0]
 8026952:	69da      	ldr	r2, [r3, #28]
 8026954:	68fb      	ldr	r3, [r7, #12]
 8026956:	681b      	ldr	r3, [r3, #0]
 8026958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802695c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 802695e:	68fb      	ldr	r3, [r7, #12]
 8026960:	681b      	ldr	r3, [r3, #0]
 8026962:	69d9      	ldr	r1, [r3, #28]
 8026964:	68bb      	ldr	r3, [r7, #8]
 8026966:	691b      	ldr	r3, [r3, #16]
 8026968:	021a      	lsls	r2, r3, #8
 802696a:	68fb      	ldr	r3, [r7, #12]
 802696c:	681b      	ldr	r3, [r3, #0]
 802696e:	430a      	orrs	r2, r1
 8026970:	61da      	str	r2, [r3, #28]
      break;
 8026972:	e000      	b.n	8026976 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8026974:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8026976:	68fb      	ldr	r3, [r7, #12]
 8026978:	2201      	movs	r2, #1
 802697a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802697e:	68fb      	ldr	r3, [r7, #12]
 8026980:	2200      	movs	r2, #0
 8026982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8026986:	2300      	movs	r3, #0
}
 8026988:	4618      	mov	r0, r3
 802698a:	3710      	adds	r7, #16
 802698c:	46bd      	mov	sp, r7
 802698e:	bd80      	pop	{r7, pc}

08026990 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8026990:	b580      	push	{r7, lr}
 8026992:	b084      	sub	sp, #16
 8026994:	af00      	add	r7, sp, #0
 8026996:	6078      	str	r0, [r7, #4]
 8026998:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 802699a:	687b      	ldr	r3, [r7, #4]
 802699c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80269a0:	2b01      	cmp	r3, #1
 80269a2:	d101      	bne.n	80269a8 <HAL_TIM_ConfigClockSource+0x18>
 80269a4:	2302      	movs	r3, #2
 80269a6:	e0a6      	b.n	8026af6 <HAL_TIM_ConfigClockSource+0x166>
 80269a8:	687b      	ldr	r3, [r7, #4]
 80269aa:	2201      	movs	r2, #1
 80269ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80269b0:	687b      	ldr	r3, [r7, #4]
 80269b2:	2202      	movs	r2, #2
 80269b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80269b8:	687b      	ldr	r3, [r7, #4]
 80269ba:	681b      	ldr	r3, [r3, #0]
 80269bc:	689b      	ldr	r3, [r3, #8]
 80269be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80269c0:	68fb      	ldr	r3, [r7, #12]
 80269c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80269c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80269c8:	68fb      	ldr	r3, [r7, #12]
 80269ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80269ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80269d0:	687b      	ldr	r3, [r7, #4]
 80269d2:	681b      	ldr	r3, [r3, #0]
 80269d4:	68fa      	ldr	r2, [r7, #12]
 80269d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80269d8:	683b      	ldr	r3, [r7, #0]
 80269da:	681b      	ldr	r3, [r3, #0]
 80269dc:	2b40      	cmp	r3, #64	; 0x40
 80269de:	d067      	beq.n	8026ab0 <HAL_TIM_ConfigClockSource+0x120>
 80269e0:	2b40      	cmp	r3, #64	; 0x40
 80269e2:	d80b      	bhi.n	80269fc <HAL_TIM_ConfigClockSource+0x6c>
 80269e4:	2b10      	cmp	r3, #16
 80269e6:	d073      	beq.n	8026ad0 <HAL_TIM_ConfigClockSource+0x140>
 80269e8:	2b10      	cmp	r3, #16
 80269ea:	d802      	bhi.n	80269f2 <HAL_TIM_ConfigClockSource+0x62>
 80269ec:	2b00      	cmp	r3, #0
 80269ee:	d06f      	beq.n	8026ad0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80269f0:	e078      	b.n	8026ae4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80269f2:	2b20      	cmp	r3, #32
 80269f4:	d06c      	beq.n	8026ad0 <HAL_TIM_ConfigClockSource+0x140>
 80269f6:	2b30      	cmp	r3, #48	; 0x30
 80269f8:	d06a      	beq.n	8026ad0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80269fa:	e073      	b.n	8026ae4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80269fc:	2b70      	cmp	r3, #112	; 0x70
 80269fe:	d00d      	beq.n	8026a1c <HAL_TIM_ConfigClockSource+0x8c>
 8026a00:	2b70      	cmp	r3, #112	; 0x70
 8026a02:	d804      	bhi.n	8026a0e <HAL_TIM_ConfigClockSource+0x7e>
 8026a04:	2b50      	cmp	r3, #80	; 0x50
 8026a06:	d033      	beq.n	8026a70 <HAL_TIM_ConfigClockSource+0xe0>
 8026a08:	2b60      	cmp	r3, #96	; 0x60
 8026a0a:	d041      	beq.n	8026a90 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8026a0c:	e06a      	b.n	8026ae4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8026a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8026a12:	d066      	beq.n	8026ae2 <HAL_TIM_ConfigClockSource+0x152>
 8026a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8026a18:	d017      	beq.n	8026a4a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8026a1a:	e063      	b.n	8026ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8026a1c:	687b      	ldr	r3, [r7, #4]
 8026a1e:	6818      	ldr	r0, [r3, #0]
 8026a20:	683b      	ldr	r3, [r7, #0]
 8026a22:	6899      	ldr	r1, [r3, #8]
 8026a24:	683b      	ldr	r3, [r7, #0]
 8026a26:	685a      	ldr	r2, [r3, #4]
 8026a28:	683b      	ldr	r3, [r7, #0]
 8026a2a:	68db      	ldr	r3, [r3, #12]
 8026a2c:	f000 fb5a 	bl	80270e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8026a30:	687b      	ldr	r3, [r7, #4]
 8026a32:	681b      	ldr	r3, [r3, #0]
 8026a34:	689b      	ldr	r3, [r3, #8]
 8026a36:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8026a38:	68fb      	ldr	r3, [r7, #12]
 8026a3a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8026a3e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8026a40:	687b      	ldr	r3, [r7, #4]
 8026a42:	681b      	ldr	r3, [r3, #0]
 8026a44:	68fa      	ldr	r2, [r7, #12]
 8026a46:	609a      	str	r2, [r3, #8]
      break;
 8026a48:	e04c      	b.n	8026ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8026a4a:	687b      	ldr	r3, [r7, #4]
 8026a4c:	6818      	ldr	r0, [r3, #0]
 8026a4e:	683b      	ldr	r3, [r7, #0]
 8026a50:	6899      	ldr	r1, [r3, #8]
 8026a52:	683b      	ldr	r3, [r7, #0]
 8026a54:	685a      	ldr	r2, [r3, #4]
 8026a56:	683b      	ldr	r3, [r7, #0]
 8026a58:	68db      	ldr	r3, [r3, #12]
 8026a5a:	f000 fb43 	bl	80270e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8026a5e:	687b      	ldr	r3, [r7, #4]
 8026a60:	681b      	ldr	r3, [r3, #0]
 8026a62:	689a      	ldr	r2, [r3, #8]
 8026a64:	687b      	ldr	r3, [r7, #4]
 8026a66:	681b      	ldr	r3, [r3, #0]
 8026a68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8026a6c:	609a      	str	r2, [r3, #8]
      break;
 8026a6e:	e039      	b.n	8026ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8026a70:	687b      	ldr	r3, [r7, #4]
 8026a72:	6818      	ldr	r0, [r3, #0]
 8026a74:	683b      	ldr	r3, [r7, #0]
 8026a76:	6859      	ldr	r1, [r3, #4]
 8026a78:	683b      	ldr	r3, [r7, #0]
 8026a7a:	68db      	ldr	r3, [r3, #12]
 8026a7c:	461a      	mov	r2, r3
 8026a7e:	f000 fab7 	bl	8026ff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8026a82:	687b      	ldr	r3, [r7, #4]
 8026a84:	681b      	ldr	r3, [r3, #0]
 8026a86:	2150      	movs	r1, #80	; 0x50
 8026a88:	4618      	mov	r0, r3
 8026a8a:	f000 fb10 	bl	80270ae <TIM_ITRx_SetConfig>
      break;
 8026a8e:	e029      	b.n	8026ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8026a90:	687b      	ldr	r3, [r7, #4]
 8026a92:	6818      	ldr	r0, [r3, #0]
 8026a94:	683b      	ldr	r3, [r7, #0]
 8026a96:	6859      	ldr	r1, [r3, #4]
 8026a98:	683b      	ldr	r3, [r7, #0]
 8026a9a:	68db      	ldr	r3, [r3, #12]
 8026a9c:	461a      	mov	r2, r3
 8026a9e:	f000 fad6 	bl	802704e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8026aa2:	687b      	ldr	r3, [r7, #4]
 8026aa4:	681b      	ldr	r3, [r3, #0]
 8026aa6:	2160      	movs	r1, #96	; 0x60
 8026aa8:	4618      	mov	r0, r3
 8026aaa:	f000 fb00 	bl	80270ae <TIM_ITRx_SetConfig>
      break;
 8026aae:	e019      	b.n	8026ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8026ab0:	687b      	ldr	r3, [r7, #4]
 8026ab2:	6818      	ldr	r0, [r3, #0]
 8026ab4:	683b      	ldr	r3, [r7, #0]
 8026ab6:	6859      	ldr	r1, [r3, #4]
 8026ab8:	683b      	ldr	r3, [r7, #0]
 8026aba:	68db      	ldr	r3, [r3, #12]
 8026abc:	461a      	mov	r2, r3
 8026abe:	f000 fa97 	bl	8026ff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8026ac2:	687b      	ldr	r3, [r7, #4]
 8026ac4:	681b      	ldr	r3, [r3, #0]
 8026ac6:	2140      	movs	r1, #64	; 0x40
 8026ac8:	4618      	mov	r0, r3
 8026aca:	f000 faf0 	bl	80270ae <TIM_ITRx_SetConfig>
      break;
 8026ace:	e009      	b.n	8026ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8026ad0:	687b      	ldr	r3, [r7, #4]
 8026ad2:	681a      	ldr	r2, [r3, #0]
 8026ad4:	683b      	ldr	r3, [r7, #0]
 8026ad6:	681b      	ldr	r3, [r3, #0]
 8026ad8:	4619      	mov	r1, r3
 8026ada:	4610      	mov	r0, r2
 8026adc:	f000 fae7 	bl	80270ae <TIM_ITRx_SetConfig>
      break;
 8026ae0:	e000      	b.n	8026ae4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8026ae2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8026ae4:	687b      	ldr	r3, [r7, #4]
 8026ae6:	2201      	movs	r2, #1
 8026ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8026aec:	687b      	ldr	r3, [r7, #4]
 8026aee:	2200      	movs	r2, #0
 8026af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8026af4:	2300      	movs	r3, #0
}
 8026af6:	4618      	mov	r0, r3
 8026af8:	3710      	adds	r7, #16
 8026afa:	46bd      	mov	sp, r7
 8026afc:	bd80      	pop	{r7, pc}

08026afe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8026afe:	b480      	push	{r7}
 8026b00:	b083      	sub	sp, #12
 8026b02:	af00      	add	r7, sp, #0
 8026b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8026b06:	bf00      	nop
 8026b08:	370c      	adds	r7, #12
 8026b0a:	46bd      	mov	sp, r7
 8026b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b10:	4770      	bx	lr

08026b12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8026b12:	b480      	push	{r7}
 8026b14:	b083      	sub	sp, #12
 8026b16:	af00      	add	r7, sp, #0
 8026b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8026b1a:	bf00      	nop
 8026b1c:	370c      	adds	r7, #12
 8026b1e:	46bd      	mov	sp, r7
 8026b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b24:	4770      	bx	lr

08026b26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8026b26:	b480      	push	{r7}
 8026b28:	b083      	sub	sp, #12
 8026b2a:	af00      	add	r7, sp, #0
 8026b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8026b2e:	bf00      	nop
 8026b30:	370c      	adds	r7, #12
 8026b32:	46bd      	mov	sp, r7
 8026b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b38:	4770      	bx	lr

08026b3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8026b3a:	b480      	push	{r7}
 8026b3c:	b083      	sub	sp, #12
 8026b3e:	af00      	add	r7, sp, #0
 8026b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8026b42:	bf00      	nop
 8026b44:	370c      	adds	r7, #12
 8026b46:	46bd      	mov	sp, r7
 8026b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026b4c:	4770      	bx	lr
	...

08026b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8026b50:	b480      	push	{r7}
 8026b52:	b085      	sub	sp, #20
 8026b54:	af00      	add	r7, sp, #0
 8026b56:	6078      	str	r0, [r7, #4]
 8026b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8026b5a:	687b      	ldr	r3, [r7, #4]
 8026b5c:	681b      	ldr	r3, [r3, #0]
 8026b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8026b60:	687b      	ldr	r3, [r7, #4]
 8026b62:	4a40      	ldr	r2, [pc, #256]	; (8026c64 <TIM_Base_SetConfig+0x114>)
 8026b64:	4293      	cmp	r3, r2
 8026b66:	d013      	beq.n	8026b90 <TIM_Base_SetConfig+0x40>
 8026b68:	687b      	ldr	r3, [r7, #4]
 8026b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8026b6e:	d00f      	beq.n	8026b90 <TIM_Base_SetConfig+0x40>
 8026b70:	687b      	ldr	r3, [r7, #4]
 8026b72:	4a3d      	ldr	r2, [pc, #244]	; (8026c68 <TIM_Base_SetConfig+0x118>)
 8026b74:	4293      	cmp	r3, r2
 8026b76:	d00b      	beq.n	8026b90 <TIM_Base_SetConfig+0x40>
 8026b78:	687b      	ldr	r3, [r7, #4]
 8026b7a:	4a3c      	ldr	r2, [pc, #240]	; (8026c6c <TIM_Base_SetConfig+0x11c>)
 8026b7c:	4293      	cmp	r3, r2
 8026b7e:	d007      	beq.n	8026b90 <TIM_Base_SetConfig+0x40>
 8026b80:	687b      	ldr	r3, [r7, #4]
 8026b82:	4a3b      	ldr	r2, [pc, #236]	; (8026c70 <TIM_Base_SetConfig+0x120>)
 8026b84:	4293      	cmp	r3, r2
 8026b86:	d003      	beq.n	8026b90 <TIM_Base_SetConfig+0x40>
 8026b88:	687b      	ldr	r3, [r7, #4]
 8026b8a:	4a3a      	ldr	r2, [pc, #232]	; (8026c74 <TIM_Base_SetConfig+0x124>)
 8026b8c:	4293      	cmp	r3, r2
 8026b8e:	d108      	bne.n	8026ba2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8026b90:	68fb      	ldr	r3, [r7, #12]
 8026b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8026b96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8026b98:	683b      	ldr	r3, [r7, #0]
 8026b9a:	685b      	ldr	r3, [r3, #4]
 8026b9c:	68fa      	ldr	r2, [r7, #12]
 8026b9e:	4313      	orrs	r3, r2
 8026ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8026ba2:	687b      	ldr	r3, [r7, #4]
 8026ba4:	4a2f      	ldr	r2, [pc, #188]	; (8026c64 <TIM_Base_SetConfig+0x114>)
 8026ba6:	4293      	cmp	r3, r2
 8026ba8:	d02b      	beq.n	8026c02 <TIM_Base_SetConfig+0xb2>
 8026baa:	687b      	ldr	r3, [r7, #4]
 8026bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8026bb0:	d027      	beq.n	8026c02 <TIM_Base_SetConfig+0xb2>
 8026bb2:	687b      	ldr	r3, [r7, #4]
 8026bb4:	4a2c      	ldr	r2, [pc, #176]	; (8026c68 <TIM_Base_SetConfig+0x118>)
 8026bb6:	4293      	cmp	r3, r2
 8026bb8:	d023      	beq.n	8026c02 <TIM_Base_SetConfig+0xb2>
 8026bba:	687b      	ldr	r3, [r7, #4]
 8026bbc:	4a2b      	ldr	r2, [pc, #172]	; (8026c6c <TIM_Base_SetConfig+0x11c>)
 8026bbe:	4293      	cmp	r3, r2
 8026bc0:	d01f      	beq.n	8026c02 <TIM_Base_SetConfig+0xb2>
 8026bc2:	687b      	ldr	r3, [r7, #4]
 8026bc4:	4a2a      	ldr	r2, [pc, #168]	; (8026c70 <TIM_Base_SetConfig+0x120>)
 8026bc6:	4293      	cmp	r3, r2
 8026bc8:	d01b      	beq.n	8026c02 <TIM_Base_SetConfig+0xb2>
 8026bca:	687b      	ldr	r3, [r7, #4]
 8026bcc:	4a29      	ldr	r2, [pc, #164]	; (8026c74 <TIM_Base_SetConfig+0x124>)
 8026bce:	4293      	cmp	r3, r2
 8026bd0:	d017      	beq.n	8026c02 <TIM_Base_SetConfig+0xb2>
 8026bd2:	687b      	ldr	r3, [r7, #4]
 8026bd4:	4a28      	ldr	r2, [pc, #160]	; (8026c78 <TIM_Base_SetConfig+0x128>)
 8026bd6:	4293      	cmp	r3, r2
 8026bd8:	d013      	beq.n	8026c02 <TIM_Base_SetConfig+0xb2>
 8026bda:	687b      	ldr	r3, [r7, #4]
 8026bdc:	4a27      	ldr	r2, [pc, #156]	; (8026c7c <TIM_Base_SetConfig+0x12c>)
 8026bde:	4293      	cmp	r3, r2
 8026be0:	d00f      	beq.n	8026c02 <TIM_Base_SetConfig+0xb2>
 8026be2:	687b      	ldr	r3, [r7, #4]
 8026be4:	4a26      	ldr	r2, [pc, #152]	; (8026c80 <TIM_Base_SetConfig+0x130>)
 8026be6:	4293      	cmp	r3, r2
 8026be8:	d00b      	beq.n	8026c02 <TIM_Base_SetConfig+0xb2>
 8026bea:	687b      	ldr	r3, [r7, #4]
 8026bec:	4a25      	ldr	r2, [pc, #148]	; (8026c84 <TIM_Base_SetConfig+0x134>)
 8026bee:	4293      	cmp	r3, r2
 8026bf0:	d007      	beq.n	8026c02 <TIM_Base_SetConfig+0xb2>
 8026bf2:	687b      	ldr	r3, [r7, #4]
 8026bf4:	4a24      	ldr	r2, [pc, #144]	; (8026c88 <TIM_Base_SetConfig+0x138>)
 8026bf6:	4293      	cmp	r3, r2
 8026bf8:	d003      	beq.n	8026c02 <TIM_Base_SetConfig+0xb2>
 8026bfa:	687b      	ldr	r3, [r7, #4]
 8026bfc:	4a23      	ldr	r2, [pc, #140]	; (8026c8c <TIM_Base_SetConfig+0x13c>)
 8026bfe:	4293      	cmp	r3, r2
 8026c00:	d108      	bne.n	8026c14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8026c02:	68fb      	ldr	r3, [r7, #12]
 8026c04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8026c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8026c0a:	683b      	ldr	r3, [r7, #0]
 8026c0c:	68db      	ldr	r3, [r3, #12]
 8026c0e:	68fa      	ldr	r2, [r7, #12]
 8026c10:	4313      	orrs	r3, r2
 8026c12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8026c14:	68fb      	ldr	r3, [r7, #12]
 8026c16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8026c1a:	683b      	ldr	r3, [r7, #0]
 8026c1c:	695b      	ldr	r3, [r3, #20]
 8026c1e:	4313      	orrs	r3, r2
 8026c20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8026c22:	687b      	ldr	r3, [r7, #4]
 8026c24:	68fa      	ldr	r2, [r7, #12]
 8026c26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8026c28:	683b      	ldr	r3, [r7, #0]
 8026c2a:	689a      	ldr	r2, [r3, #8]
 8026c2c:	687b      	ldr	r3, [r7, #4]
 8026c2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8026c30:	683b      	ldr	r3, [r7, #0]
 8026c32:	681a      	ldr	r2, [r3, #0]
 8026c34:	687b      	ldr	r3, [r7, #4]
 8026c36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8026c38:	687b      	ldr	r3, [r7, #4]
 8026c3a:	4a0a      	ldr	r2, [pc, #40]	; (8026c64 <TIM_Base_SetConfig+0x114>)
 8026c3c:	4293      	cmp	r3, r2
 8026c3e:	d003      	beq.n	8026c48 <TIM_Base_SetConfig+0xf8>
 8026c40:	687b      	ldr	r3, [r7, #4]
 8026c42:	4a0c      	ldr	r2, [pc, #48]	; (8026c74 <TIM_Base_SetConfig+0x124>)
 8026c44:	4293      	cmp	r3, r2
 8026c46:	d103      	bne.n	8026c50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8026c48:	683b      	ldr	r3, [r7, #0]
 8026c4a:	691a      	ldr	r2, [r3, #16]
 8026c4c:	687b      	ldr	r3, [r7, #4]
 8026c4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8026c50:	687b      	ldr	r3, [r7, #4]
 8026c52:	2201      	movs	r2, #1
 8026c54:	615a      	str	r2, [r3, #20]
}
 8026c56:	bf00      	nop
 8026c58:	3714      	adds	r7, #20
 8026c5a:	46bd      	mov	sp, r7
 8026c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026c60:	4770      	bx	lr
 8026c62:	bf00      	nop
 8026c64:	40010000 	.word	0x40010000
 8026c68:	40000400 	.word	0x40000400
 8026c6c:	40000800 	.word	0x40000800
 8026c70:	40000c00 	.word	0x40000c00
 8026c74:	40010400 	.word	0x40010400
 8026c78:	40014000 	.word	0x40014000
 8026c7c:	40014400 	.word	0x40014400
 8026c80:	40014800 	.word	0x40014800
 8026c84:	40001800 	.word	0x40001800
 8026c88:	40001c00 	.word	0x40001c00
 8026c8c:	40002000 	.word	0x40002000

08026c90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8026c90:	b480      	push	{r7}
 8026c92:	b087      	sub	sp, #28
 8026c94:	af00      	add	r7, sp, #0
 8026c96:	6078      	str	r0, [r7, #4]
 8026c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8026c9a:	687b      	ldr	r3, [r7, #4]
 8026c9c:	6a1b      	ldr	r3, [r3, #32]
 8026c9e:	f023 0201 	bic.w	r2, r3, #1
 8026ca2:	687b      	ldr	r3, [r7, #4]
 8026ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8026ca6:	687b      	ldr	r3, [r7, #4]
 8026ca8:	6a1b      	ldr	r3, [r3, #32]
 8026caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8026cac:	687b      	ldr	r3, [r7, #4]
 8026cae:	685b      	ldr	r3, [r3, #4]
 8026cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8026cb2:	687b      	ldr	r3, [r7, #4]
 8026cb4:	699b      	ldr	r3, [r3, #24]
 8026cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8026cb8:	68fb      	ldr	r3, [r7, #12]
 8026cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8026cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8026cc0:	68fb      	ldr	r3, [r7, #12]
 8026cc2:	f023 0303 	bic.w	r3, r3, #3
 8026cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8026cc8:	683b      	ldr	r3, [r7, #0]
 8026cca:	681b      	ldr	r3, [r3, #0]
 8026ccc:	68fa      	ldr	r2, [r7, #12]
 8026cce:	4313      	orrs	r3, r2
 8026cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8026cd2:	697b      	ldr	r3, [r7, #20]
 8026cd4:	f023 0302 	bic.w	r3, r3, #2
 8026cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8026cda:	683b      	ldr	r3, [r7, #0]
 8026cdc:	689b      	ldr	r3, [r3, #8]
 8026cde:	697a      	ldr	r2, [r7, #20]
 8026ce0:	4313      	orrs	r3, r2
 8026ce2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8026ce4:	687b      	ldr	r3, [r7, #4]
 8026ce6:	4a20      	ldr	r2, [pc, #128]	; (8026d68 <TIM_OC1_SetConfig+0xd8>)
 8026ce8:	4293      	cmp	r3, r2
 8026cea:	d003      	beq.n	8026cf4 <TIM_OC1_SetConfig+0x64>
 8026cec:	687b      	ldr	r3, [r7, #4]
 8026cee:	4a1f      	ldr	r2, [pc, #124]	; (8026d6c <TIM_OC1_SetConfig+0xdc>)
 8026cf0:	4293      	cmp	r3, r2
 8026cf2:	d10c      	bne.n	8026d0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8026cf4:	697b      	ldr	r3, [r7, #20]
 8026cf6:	f023 0308 	bic.w	r3, r3, #8
 8026cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8026cfc:	683b      	ldr	r3, [r7, #0]
 8026cfe:	68db      	ldr	r3, [r3, #12]
 8026d00:	697a      	ldr	r2, [r7, #20]
 8026d02:	4313      	orrs	r3, r2
 8026d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8026d06:	697b      	ldr	r3, [r7, #20]
 8026d08:	f023 0304 	bic.w	r3, r3, #4
 8026d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8026d0e:	687b      	ldr	r3, [r7, #4]
 8026d10:	4a15      	ldr	r2, [pc, #84]	; (8026d68 <TIM_OC1_SetConfig+0xd8>)
 8026d12:	4293      	cmp	r3, r2
 8026d14:	d003      	beq.n	8026d1e <TIM_OC1_SetConfig+0x8e>
 8026d16:	687b      	ldr	r3, [r7, #4]
 8026d18:	4a14      	ldr	r2, [pc, #80]	; (8026d6c <TIM_OC1_SetConfig+0xdc>)
 8026d1a:	4293      	cmp	r3, r2
 8026d1c:	d111      	bne.n	8026d42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8026d1e:	693b      	ldr	r3, [r7, #16]
 8026d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8026d24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8026d26:	693b      	ldr	r3, [r7, #16]
 8026d28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8026d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8026d2e:	683b      	ldr	r3, [r7, #0]
 8026d30:	695b      	ldr	r3, [r3, #20]
 8026d32:	693a      	ldr	r2, [r7, #16]
 8026d34:	4313      	orrs	r3, r2
 8026d36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8026d38:	683b      	ldr	r3, [r7, #0]
 8026d3a:	699b      	ldr	r3, [r3, #24]
 8026d3c:	693a      	ldr	r2, [r7, #16]
 8026d3e:	4313      	orrs	r3, r2
 8026d40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8026d42:	687b      	ldr	r3, [r7, #4]
 8026d44:	693a      	ldr	r2, [r7, #16]
 8026d46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8026d48:	687b      	ldr	r3, [r7, #4]
 8026d4a:	68fa      	ldr	r2, [r7, #12]
 8026d4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8026d4e:	683b      	ldr	r3, [r7, #0]
 8026d50:	685a      	ldr	r2, [r3, #4]
 8026d52:	687b      	ldr	r3, [r7, #4]
 8026d54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8026d56:	687b      	ldr	r3, [r7, #4]
 8026d58:	697a      	ldr	r2, [r7, #20]
 8026d5a:	621a      	str	r2, [r3, #32]
}
 8026d5c:	bf00      	nop
 8026d5e:	371c      	adds	r7, #28
 8026d60:	46bd      	mov	sp, r7
 8026d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026d66:	4770      	bx	lr
 8026d68:	40010000 	.word	0x40010000
 8026d6c:	40010400 	.word	0x40010400

08026d70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8026d70:	b480      	push	{r7}
 8026d72:	b087      	sub	sp, #28
 8026d74:	af00      	add	r7, sp, #0
 8026d76:	6078      	str	r0, [r7, #4]
 8026d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8026d7a:	687b      	ldr	r3, [r7, #4]
 8026d7c:	6a1b      	ldr	r3, [r3, #32]
 8026d7e:	f023 0210 	bic.w	r2, r3, #16
 8026d82:	687b      	ldr	r3, [r7, #4]
 8026d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8026d86:	687b      	ldr	r3, [r7, #4]
 8026d88:	6a1b      	ldr	r3, [r3, #32]
 8026d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8026d8c:	687b      	ldr	r3, [r7, #4]
 8026d8e:	685b      	ldr	r3, [r3, #4]
 8026d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8026d92:	687b      	ldr	r3, [r7, #4]
 8026d94:	699b      	ldr	r3, [r3, #24]
 8026d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8026d98:	68fb      	ldr	r3, [r7, #12]
 8026d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8026d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8026da0:	68fb      	ldr	r3, [r7, #12]
 8026da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8026da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8026da8:	683b      	ldr	r3, [r7, #0]
 8026daa:	681b      	ldr	r3, [r3, #0]
 8026dac:	021b      	lsls	r3, r3, #8
 8026dae:	68fa      	ldr	r2, [r7, #12]
 8026db0:	4313      	orrs	r3, r2
 8026db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8026db4:	697b      	ldr	r3, [r7, #20]
 8026db6:	f023 0320 	bic.w	r3, r3, #32
 8026dba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8026dbc:	683b      	ldr	r3, [r7, #0]
 8026dbe:	689b      	ldr	r3, [r3, #8]
 8026dc0:	011b      	lsls	r3, r3, #4
 8026dc2:	697a      	ldr	r2, [r7, #20]
 8026dc4:	4313      	orrs	r3, r2
 8026dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8026dc8:	687b      	ldr	r3, [r7, #4]
 8026dca:	4a22      	ldr	r2, [pc, #136]	; (8026e54 <TIM_OC2_SetConfig+0xe4>)
 8026dcc:	4293      	cmp	r3, r2
 8026dce:	d003      	beq.n	8026dd8 <TIM_OC2_SetConfig+0x68>
 8026dd0:	687b      	ldr	r3, [r7, #4]
 8026dd2:	4a21      	ldr	r2, [pc, #132]	; (8026e58 <TIM_OC2_SetConfig+0xe8>)
 8026dd4:	4293      	cmp	r3, r2
 8026dd6:	d10d      	bne.n	8026df4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8026dd8:	697b      	ldr	r3, [r7, #20]
 8026dda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8026dde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8026de0:	683b      	ldr	r3, [r7, #0]
 8026de2:	68db      	ldr	r3, [r3, #12]
 8026de4:	011b      	lsls	r3, r3, #4
 8026de6:	697a      	ldr	r2, [r7, #20]
 8026de8:	4313      	orrs	r3, r2
 8026dea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8026dec:	697b      	ldr	r3, [r7, #20]
 8026dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8026df2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8026df4:	687b      	ldr	r3, [r7, #4]
 8026df6:	4a17      	ldr	r2, [pc, #92]	; (8026e54 <TIM_OC2_SetConfig+0xe4>)
 8026df8:	4293      	cmp	r3, r2
 8026dfa:	d003      	beq.n	8026e04 <TIM_OC2_SetConfig+0x94>
 8026dfc:	687b      	ldr	r3, [r7, #4]
 8026dfe:	4a16      	ldr	r2, [pc, #88]	; (8026e58 <TIM_OC2_SetConfig+0xe8>)
 8026e00:	4293      	cmp	r3, r2
 8026e02:	d113      	bne.n	8026e2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8026e04:	693b      	ldr	r3, [r7, #16]
 8026e06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8026e0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8026e0c:	693b      	ldr	r3, [r7, #16]
 8026e0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8026e12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8026e14:	683b      	ldr	r3, [r7, #0]
 8026e16:	695b      	ldr	r3, [r3, #20]
 8026e18:	009b      	lsls	r3, r3, #2
 8026e1a:	693a      	ldr	r2, [r7, #16]
 8026e1c:	4313      	orrs	r3, r2
 8026e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8026e20:	683b      	ldr	r3, [r7, #0]
 8026e22:	699b      	ldr	r3, [r3, #24]
 8026e24:	009b      	lsls	r3, r3, #2
 8026e26:	693a      	ldr	r2, [r7, #16]
 8026e28:	4313      	orrs	r3, r2
 8026e2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8026e2c:	687b      	ldr	r3, [r7, #4]
 8026e2e:	693a      	ldr	r2, [r7, #16]
 8026e30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8026e32:	687b      	ldr	r3, [r7, #4]
 8026e34:	68fa      	ldr	r2, [r7, #12]
 8026e36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8026e38:	683b      	ldr	r3, [r7, #0]
 8026e3a:	685a      	ldr	r2, [r3, #4]
 8026e3c:	687b      	ldr	r3, [r7, #4]
 8026e3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8026e40:	687b      	ldr	r3, [r7, #4]
 8026e42:	697a      	ldr	r2, [r7, #20]
 8026e44:	621a      	str	r2, [r3, #32]
}
 8026e46:	bf00      	nop
 8026e48:	371c      	adds	r7, #28
 8026e4a:	46bd      	mov	sp, r7
 8026e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026e50:	4770      	bx	lr
 8026e52:	bf00      	nop
 8026e54:	40010000 	.word	0x40010000
 8026e58:	40010400 	.word	0x40010400

08026e5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8026e5c:	b480      	push	{r7}
 8026e5e:	b087      	sub	sp, #28
 8026e60:	af00      	add	r7, sp, #0
 8026e62:	6078      	str	r0, [r7, #4]
 8026e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8026e66:	687b      	ldr	r3, [r7, #4]
 8026e68:	6a1b      	ldr	r3, [r3, #32]
 8026e6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8026e6e:	687b      	ldr	r3, [r7, #4]
 8026e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8026e72:	687b      	ldr	r3, [r7, #4]
 8026e74:	6a1b      	ldr	r3, [r3, #32]
 8026e76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8026e78:	687b      	ldr	r3, [r7, #4]
 8026e7a:	685b      	ldr	r3, [r3, #4]
 8026e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8026e7e:	687b      	ldr	r3, [r7, #4]
 8026e80:	69db      	ldr	r3, [r3, #28]
 8026e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8026e84:	68fb      	ldr	r3, [r7, #12]
 8026e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8026e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8026e8c:	68fb      	ldr	r3, [r7, #12]
 8026e8e:	f023 0303 	bic.w	r3, r3, #3
 8026e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8026e94:	683b      	ldr	r3, [r7, #0]
 8026e96:	681b      	ldr	r3, [r3, #0]
 8026e98:	68fa      	ldr	r2, [r7, #12]
 8026e9a:	4313      	orrs	r3, r2
 8026e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8026e9e:	697b      	ldr	r3, [r7, #20]
 8026ea0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8026ea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8026ea6:	683b      	ldr	r3, [r7, #0]
 8026ea8:	689b      	ldr	r3, [r3, #8]
 8026eaa:	021b      	lsls	r3, r3, #8
 8026eac:	697a      	ldr	r2, [r7, #20]
 8026eae:	4313      	orrs	r3, r2
 8026eb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8026eb2:	687b      	ldr	r3, [r7, #4]
 8026eb4:	4a21      	ldr	r2, [pc, #132]	; (8026f3c <TIM_OC3_SetConfig+0xe0>)
 8026eb6:	4293      	cmp	r3, r2
 8026eb8:	d003      	beq.n	8026ec2 <TIM_OC3_SetConfig+0x66>
 8026eba:	687b      	ldr	r3, [r7, #4]
 8026ebc:	4a20      	ldr	r2, [pc, #128]	; (8026f40 <TIM_OC3_SetConfig+0xe4>)
 8026ebe:	4293      	cmp	r3, r2
 8026ec0:	d10d      	bne.n	8026ede <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8026ec2:	697b      	ldr	r3, [r7, #20]
 8026ec4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8026ec8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8026eca:	683b      	ldr	r3, [r7, #0]
 8026ecc:	68db      	ldr	r3, [r3, #12]
 8026ece:	021b      	lsls	r3, r3, #8
 8026ed0:	697a      	ldr	r2, [r7, #20]
 8026ed2:	4313      	orrs	r3, r2
 8026ed4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8026ed6:	697b      	ldr	r3, [r7, #20]
 8026ed8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8026edc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8026ede:	687b      	ldr	r3, [r7, #4]
 8026ee0:	4a16      	ldr	r2, [pc, #88]	; (8026f3c <TIM_OC3_SetConfig+0xe0>)
 8026ee2:	4293      	cmp	r3, r2
 8026ee4:	d003      	beq.n	8026eee <TIM_OC3_SetConfig+0x92>
 8026ee6:	687b      	ldr	r3, [r7, #4]
 8026ee8:	4a15      	ldr	r2, [pc, #84]	; (8026f40 <TIM_OC3_SetConfig+0xe4>)
 8026eea:	4293      	cmp	r3, r2
 8026eec:	d113      	bne.n	8026f16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8026eee:	693b      	ldr	r3, [r7, #16]
 8026ef0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8026ef6:	693b      	ldr	r3, [r7, #16]
 8026ef8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8026efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8026efe:	683b      	ldr	r3, [r7, #0]
 8026f00:	695b      	ldr	r3, [r3, #20]
 8026f02:	011b      	lsls	r3, r3, #4
 8026f04:	693a      	ldr	r2, [r7, #16]
 8026f06:	4313      	orrs	r3, r2
 8026f08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8026f0a:	683b      	ldr	r3, [r7, #0]
 8026f0c:	699b      	ldr	r3, [r3, #24]
 8026f0e:	011b      	lsls	r3, r3, #4
 8026f10:	693a      	ldr	r2, [r7, #16]
 8026f12:	4313      	orrs	r3, r2
 8026f14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8026f16:	687b      	ldr	r3, [r7, #4]
 8026f18:	693a      	ldr	r2, [r7, #16]
 8026f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8026f1c:	687b      	ldr	r3, [r7, #4]
 8026f1e:	68fa      	ldr	r2, [r7, #12]
 8026f20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8026f22:	683b      	ldr	r3, [r7, #0]
 8026f24:	685a      	ldr	r2, [r3, #4]
 8026f26:	687b      	ldr	r3, [r7, #4]
 8026f28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8026f2a:	687b      	ldr	r3, [r7, #4]
 8026f2c:	697a      	ldr	r2, [r7, #20]
 8026f2e:	621a      	str	r2, [r3, #32]
}
 8026f30:	bf00      	nop
 8026f32:	371c      	adds	r7, #28
 8026f34:	46bd      	mov	sp, r7
 8026f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026f3a:	4770      	bx	lr
 8026f3c:	40010000 	.word	0x40010000
 8026f40:	40010400 	.word	0x40010400

08026f44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8026f44:	b480      	push	{r7}
 8026f46:	b087      	sub	sp, #28
 8026f48:	af00      	add	r7, sp, #0
 8026f4a:	6078      	str	r0, [r7, #4]
 8026f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8026f4e:	687b      	ldr	r3, [r7, #4]
 8026f50:	6a1b      	ldr	r3, [r3, #32]
 8026f52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8026f56:	687b      	ldr	r3, [r7, #4]
 8026f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8026f5a:	687b      	ldr	r3, [r7, #4]
 8026f5c:	6a1b      	ldr	r3, [r3, #32]
 8026f5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8026f60:	687b      	ldr	r3, [r7, #4]
 8026f62:	685b      	ldr	r3, [r3, #4]
 8026f64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8026f66:	687b      	ldr	r3, [r7, #4]
 8026f68:	69db      	ldr	r3, [r3, #28]
 8026f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8026f6c:	68fb      	ldr	r3, [r7, #12]
 8026f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8026f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8026f74:	68fb      	ldr	r3, [r7, #12]
 8026f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8026f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8026f7c:	683b      	ldr	r3, [r7, #0]
 8026f7e:	681b      	ldr	r3, [r3, #0]
 8026f80:	021b      	lsls	r3, r3, #8
 8026f82:	68fa      	ldr	r2, [r7, #12]
 8026f84:	4313      	orrs	r3, r2
 8026f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8026f88:	693b      	ldr	r3, [r7, #16]
 8026f8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8026f8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8026f90:	683b      	ldr	r3, [r7, #0]
 8026f92:	689b      	ldr	r3, [r3, #8]
 8026f94:	031b      	lsls	r3, r3, #12
 8026f96:	693a      	ldr	r2, [r7, #16]
 8026f98:	4313      	orrs	r3, r2
 8026f9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8026f9c:	687b      	ldr	r3, [r7, #4]
 8026f9e:	4a12      	ldr	r2, [pc, #72]	; (8026fe8 <TIM_OC4_SetConfig+0xa4>)
 8026fa0:	4293      	cmp	r3, r2
 8026fa2:	d003      	beq.n	8026fac <TIM_OC4_SetConfig+0x68>
 8026fa4:	687b      	ldr	r3, [r7, #4]
 8026fa6:	4a11      	ldr	r2, [pc, #68]	; (8026fec <TIM_OC4_SetConfig+0xa8>)
 8026fa8:	4293      	cmp	r3, r2
 8026faa:	d109      	bne.n	8026fc0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8026fac:	697b      	ldr	r3, [r7, #20]
 8026fae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8026fb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8026fb4:	683b      	ldr	r3, [r7, #0]
 8026fb6:	695b      	ldr	r3, [r3, #20]
 8026fb8:	019b      	lsls	r3, r3, #6
 8026fba:	697a      	ldr	r2, [r7, #20]
 8026fbc:	4313      	orrs	r3, r2
 8026fbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8026fc0:	687b      	ldr	r3, [r7, #4]
 8026fc2:	697a      	ldr	r2, [r7, #20]
 8026fc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8026fc6:	687b      	ldr	r3, [r7, #4]
 8026fc8:	68fa      	ldr	r2, [r7, #12]
 8026fca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8026fcc:	683b      	ldr	r3, [r7, #0]
 8026fce:	685a      	ldr	r2, [r3, #4]
 8026fd0:	687b      	ldr	r3, [r7, #4]
 8026fd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8026fd4:	687b      	ldr	r3, [r7, #4]
 8026fd6:	693a      	ldr	r2, [r7, #16]
 8026fd8:	621a      	str	r2, [r3, #32]
}
 8026fda:	bf00      	nop
 8026fdc:	371c      	adds	r7, #28
 8026fde:	46bd      	mov	sp, r7
 8026fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026fe4:	4770      	bx	lr
 8026fe6:	bf00      	nop
 8026fe8:	40010000 	.word	0x40010000
 8026fec:	40010400 	.word	0x40010400

08026ff0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8026ff0:	b480      	push	{r7}
 8026ff2:	b087      	sub	sp, #28
 8026ff4:	af00      	add	r7, sp, #0
 8026ff6:	60f8      	str	r0, [r7, #12]
 8026ff8:	60b9      	str	r1, [r7, #8]
 8026ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8026ffc:	68fb      	ldr	r3, [r7, #12]
 8026ffe:	6a1b      	ldr	r3, [r3, #32]
 8027000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8027002:	68fb      	ldr	r3, [r7, #12]
 8027004:	6a1b      	ldr	r3, [r3, #32]
 8027006:	f023 0201 	bic.w	r2, r3, #1
 802700a:	68fb      	ldr	r3, [r7, #12]
 802700c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802700e:	68fb      	ldr	r3, [r7, #12]
 8027010:	699b      	ldr	r3, [r3, #24]
 8027012:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8027014:	693b      	ldr	r3, [r7, #16]
 8027016:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802701a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 802701c:	687b      	ldr	r3, [r7, #4]
 802701e:	011b      	lsls	r3, r3, #4
 8027020:	693a      	ldr	r2, [r7, #16]
 8027022:	4313      	orrs	r3, r2
 8027024:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8027026:	697b      	ldr	r3, [r7, #20]
 8027028:	f023 030a 	bic.w	r3, r3, #10
 802702c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 802702e:	697a      	ldr	r2, [r7, #20]
 8027030:	68bb      	ldr	r3, [r7, #8]
 8027032:	4313      	orrs	r3, r2
 8027034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8027036:	68fb      	ldr	r3, [r7, #12]
 8027038:	693a      	ldr	r2, [r7, #16]
 802703a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802703c:	68fb      	ldr	r3, [r7, #12]
 802703e:	697a      	ldr	r2, [r7, #20]
 8027040:	621a      	str	r2, [r3, #32]
}
 8027042:	bf00      	nop
 8027044:	371c      	adds	r7, #28
 8027046:	46bd      	mov	sp, r7
 8027048:	f85d 7b04 	ldr.w	r7, [sp], #4
 802704c:	4770      	bx	lr

0802704e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802704e:	b480      	push	{r7}
 8027050:	b087      	sub	sp, #28
 8027052:	af00      	add	r7, sp, #0
 8027054:	60f8      	str	r0, [r7, #12]
 8027056:	60b9      	str	r1, [r7, #8]
 8027058:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802705a:	68fb      	ldr	r3, [r7, #12]
 802705c:	6a1b      	ldr	r3, [r3, #32]
 802705e:	f023 0210 	bic.w	r2, r3, #16
 8027062:	68fb      	ldr	r3, [r7, #12]
 8027064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8027066:	68fb      	ldr	r3, [r7, #12]
 8027068:	699b      	ldr	r3, [r3, #24]
 802706a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802706c:	68fb      	ldr	r3, [r7, #12]
 802706e:	6a1b      	ldr	r3, [r3, #32]
 8027070:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8027072:	697b      	ldr	r3, [r7, #20]
 8027074:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8027078:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 802707a:	687b      	ldr	r3, [r7, #4]
 802707c:	031b      	lsls	r3, r3, #12
 802707e:	697a      	ldr	r2, [r7, #20]
 8027080:	4313      	orrs	r3, r2
 8027082:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8027084:	693b      	ldr	r3, [r7, #16]
 8027086:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 802708a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 802708c:	68bb      	ldr	r3, [r7, #8]
 802708e:	011b      	lsls	r3, r3, #4
 8027090:	693a      	ldr	r2, [r7, #16]
 8027092:	4313      	orrs	r3, r2
 8027094:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8027096:	68fb      	ldr	r3, [r7, #12]
 8027098:	697a      	ldr	r2, [r7, #20]
 802709a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802709c:	68fb      	ldr	r3, [r7, #12]
 802709e:	693a      	ldr	r2, [r7, #16]
 80270a0:	621a      	str	r2, [r3, #32]
}
 80270a2:	bf00      	nop
 80270a4:	371c      	adds	r7, #28
 80270a6:	46bd      	mov	sp, r7
 80270a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80270ac:	4770      	bx	lr

080270ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80270ae:	b480      	push	{r7}
 80270b0:	b085      	sub	sp, #20
 80270b2:	af00      	add	r7, sp, #0
 80270b4:	6078      	str	r0, [r7, #4]
 80270b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80270b8:	687b      	ldr	r3, [r7, #4]
 80270ba:	689b      	ldr	r3, [r3, #8]
 80270bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80270be:	68fb      	ldr	r3, [r7, #12]
 80270c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80270c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80270c6:	683a      	ldr	r2, [r7, #0]
 80270c8:	68fb      	ldr	r3, [r7, #12]
 80270ca:	4313      	orrs	r3, r2
 80270cc:	f043 0307 	orr.w	r3, r3, #7
 80270d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80270d2:	687b      	ldr	r3, [r7, #4]
 80270d4:	68fa      	ldr	r2, [r7, #12]
 80270d6:	609a      	str	r2, [r3, #8]
}
 80270d8:	bf00      	nop
 80270da:	3714      	adds	r7, #20
 80270dc:	46bd      	mov	sp, r7
 80270de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80270e2:	4770      	bx	lr

080270e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80270e4:	b480      	push	{r7}
 80270e6:	b087      	sub	sp, #28
 80270e8:	af00      	add	r7, sp, #0
 80270ea:	60f8      	str	r0, [r7, #12]
 80270ec:	60b9      	str	r1, [r7, #8]
 80270ee:	607a      	str	r2, [r7, #4]
 80270f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80270f2:	68fb      	ldr	r3, [r7, #12]
 80270f4:	689b      	ldr	r3, [r3, #8]
 80270f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80270f8:	697b      	ldr	r3, [r7, #20]
 80270fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80270fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8027100:	683b      	ldr	r3, [r7, #0]
 8027102:	021a      	lsls	r2, r3, #8
 8027104:	687b      	ldr	r3, [r7, #4]
 8027106:	431a      	orrs	r2, r3
 8027108:	68bb      	ldr	r3, [r7, #8]
 802710a:	4313      	orrs	r3, r2
 802710c:	697a      	ldr	r2, [r7, #20]
 802710e:	4313      	orrs	r3, r2
 8027110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8027112:	68fb      	ldr	r3, [r7, #12]
 8027114:	697a      	ldr	r2, [r7, #20]
 8027116:	609a      	str	r2, [r3, #8]
}
 8027118:	bf00      	nop
 802711a:	371c      	adds	r7, #28
 802711c:	46bd      	mov	sp, r7
 802711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027122:	4770      	bx	lr

08027124 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8027124:	b480      	push	{r7}
 8027126:	b087      	sub	sp, #28
 8027128:	af00      	add	r7, sp, #0
 802712a:	60f8      	str	r0, [r7, #12]
 802712c:	60b9      	str	r1, [r7, #8]
 802712e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8027130:	68bb      	ldr	r3, [r7, #8]
 8027132:	f003 031f 	and.w	r3, r3, #31
 8027136:	2201      	movs	r2, #1
 8027138:	fa02 f303 	lsl.w	r3, r2, r3
 802713c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 802713e:	68fb      	ldr	r3, [r7, #12]
 8027140:	6a1a      	ldr	r2, [r3, #32]
 8027142:	697b      	ldr	r3, [r7, #20]
 8027144:	43db      	mvns	r3, r3
 8027146:	401a      	ands	r2, r3
 8027148:	68fb      	ldr	r3, [r7, #12]
 802714a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 802714c:	68fb      	ldr	r3, [r7, #12]
 802714e:	6a1a      	ldr	r2, [r3, #32]
 8027150:	68bb      	ldr	r3, [r7, #8]
 8027152:	f003 031f 	and.w	r3, r3, #31
 8027156:	6879      	ldr	r1, [r7, #4]
 8027158:	fa01 f303 	lsl.w	r3, r1, r3
 802715c:	431a      	orrs	r2, r3
 802715e:	68fb      	ldr	r3, [r7, #12]
 8027160:	621a      	str	r2, [r3, #32]
}
 8027162:	bf00      	nop
 8027164:	371c      	adds	r7, #28
 8027166:	46bd      	mov	sp, r7
 8027168:	f85d 7b04 	ldr.w	r7, [sp], #4
 802716c:	4770      	bx	lr
	...

08027170 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8027170:	b480      	push	{r7}
 8027172:	b085      	sub	sp, #20
 8027174:	af00      	add	r7, sp, #0
 8027176:	6078      	str	r0, [r7, #4]
 8027178:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 802717a:	687b      	ldr	r3, [r7, #4]
 802717c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8027180:	2b01      	cmp	r3, #1
 8027182:	d101      	bne.n	8027188 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8027184:	2302      	movs	r3, #2
 8027186:	e05a      	b.n	802723e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8027188:	687b      	ldr	r3, [r7, #4]
 802718a:	2201      	movs	r2, #1
 802718c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8027190:	687b      	ldr	r3, [r7, #4]
 8027192:	2202      	movs	r2, #2
 8027194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8027198:	687b      	ldr	r3, [r7, #4]
 802719a:	681b      	ldr	r3, [r3, #0]
 802719c:	685b      	ldr	r3, [r3, #4]
 802719e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80271a0:	687b      	ldr	r3, [r7, #4]
 80271a2:	681b      	ldr	r3, [r3, #0]
 80271a4:	689b      	ldr	r3, [r3, #8]
 80271a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80271a8:	68fb      	ldr	r3, [r7, #12]
 80271aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80271ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80271b0:	683b      	ldr	r3, [r7, #0]
 80271b2:	681b      	ldr	r3, [r3, #0]
 80271b4:	68fa      	ldr	r2, [r7, #12]
 80271b6:	4313      	orrs	r3, r2
 80271b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80271ba:	687b      	ldr	r3, [r7, #4]
 80271bc:	681b      	ldr	r3, [r3, #0]
 80271be:	68fa      	ldr	r2, [r7, #12]
 80271c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80271c2:	687b      	ldr	r3, [r7, #4]
 80271c4:	681b      	ldr	r3, [r3, #0]
 80271c6:	4a21      	ldr	r2, [pc, #132]	; (802724c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80271c8:	4293      	cmp	r3, r2
 80271ca:	d022      	beq.n	8027212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80271cc:	687b      	ldr	r3, [r7, #4]
 80271ce:	681b      	ldr	r3, [r3, #0]
 80271d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80271d4:	d01d      	beq.n	8027212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80271d6:	687b      	ldr	r3, [r7, #4]
 80271d8:	681b      	ldr	r3, [r3, #0]
 80271da:	4a1d      	ldr	r2, [pc, #116]	; (8027250 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80271dc:	4293      	cmp	r3, r2
 80271de:	d018      	beq.n	8027212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80271e0:	687b      	ldr	r3, [r7, #4]
 80271e2:	681b      	ldr	r3, [r3, #0]
 80271e4:	4a1b      	ldr	r2, [pc, #108]	; (8027254 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80271e6:	4293      	cmp	r3, r2
 80271e8:	d013      	beq.n	8027212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80271ea:	687b      	ldr	r3, [r7, #4]
 80271ec:	681b      	ldr	r3, [r3, #0]
 80271ee:	4a1a      	ldr	r2, [pc, #104]	; (8027258 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80271f0:	4293      	cmp	r3, r2
 80271f2:	d00e      	beq.n	8027212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80271f4:	687b      	ldr	r3, [r7, #4]
 80271f6:	681b      	ldr	r3, [r3, #0]
 80271f8:	4a18      	ldr	r2, [pc, #96]	; (802725c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80271fa:	4293      	cmp	r3, r2
 80271fc:	d009      	beq.n	8027212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80271fe:	687b      	ldr	r3, [r7, #4]
 8027200:	681b      	ldr	r3, [r3, #0]
 8027202:	4a17      	ldr	r2, [pc, #92]	; (8027260 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8027204:	4293      	cmp	r3, r2
 8027206:	d004      	beq.n	8027212 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8027208:	687b      	ldr	r3, [r7, #4]
 802720a:	681b      	ldr	r3, [r3, #0]
 802720c:	4a15      	ldr	r2, [pc, #84]	; (8027264 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 802720e:	4293      	cmp	r3, r2
 8027210:	d10c      	bne.n	802722c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8027212:	68bb      	ldr	r3, [r7, #8]
 8027214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8027218:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 802721a:	683b      	ldr	r3, [r7, #0]
 802721c:	685b      	ldr	r3, [r3, #4]
 802721e:	68ba      	ldr	r2, [r7, #8]
 8027220:	4313      	orrs	r3, r2
 8027222:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8027224:	687b      	ldr	r3, [r7, #4]
 8027226:	681b      	ldr	r3, [r3, #0]
 8027228:	68ba      	ldr	r2, [r7, #8]
 802722a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802722c:	687b      	ldr	r3, [r7, #4]
 802722e:	2201      	movs	r2, #1
 8027230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8027234:	687b      	ldr	r3, [r7, #4]
 8027236:	2200      	movs	r2, #0
 8027238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802723c:	2300      	movs	r3, #0
}
 802723e:	4618      	mov	r0, r3
 8027240:	3714      	adds	r7, #20
 8027242:	46bd      	mov	sp, r7
 8027244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027248:	4770      	bx	lr
 802724a:	bf00      	nop
 802724c:	40010000 	.word	0x40010000
 8027250:	40000400 	.word	0x40000400
 8027254:	40000800 	.word	0x40000800
 8027258:	40000c00 	.word	0x40000c00
 802725c:	40010400 	.word	0x40010400
 8027260:	40014000 	.word	0x40014000
 8027264:	40001800 	.word	0x40001800

08027268 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8027268:	b480      	push	{r7}
 802726a:	b085      	sub	sp, #20
 802726c:	af00      	add	r7, sp, #0
 802726e:	6078      	str	r0, [r7, #4]
 8027270:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8027272:	2300      	movs	r3, #0
 8027274:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8027276:	687b      	ldr	r3, [r7, #4]
 8027278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802727c:	2b01      	cmp	r3, #1
 802727e:	d101      	bne.n	8027284 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8027280:	2302      	movs	r3, #2
 8027282:	e03d      	b.n	8027300 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8027284:	687b      	ldr	r3, [r7, #4]
 8027286:	2201      	movs	r2, #1
 8027288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 802728c:	68fb      	ldr	r3, [r7, #12]
 802728e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8027292:	683b      	ldr	r3, [r7, #0]
 8027294:	68db      	ldr	r3, [r3, #12]
 8027296:	4313      	orrs	r3, r2
 8027298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 802729a:	68fb      	ldr	r3, [r7, #12]
 802729c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80272a0:	683b      	ldr	r3, [r7, #0]
 80272a2:	689b      	ldr	r3, [r3, #8]
 80272a4:	4313      	orrs	r3, r2
 80272a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80272a8:	68fb      	ldr	r3, [r7, #12]
 80272aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80272ae:	683b      	ldr	r3, [r7, #0]
 80272b0:	685b      	ldr	r3, [r3, #4]
 80272b2:	4313      	orrs	r3, r2
 80272b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80272b6:	68fb      	ldr	r3, [r7, #12]
 80272b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80272bc:	683b      	ldr	r3, [r7, #0]
 80272be:	681b      	ldr	r3, [r3, #0]
 80272c0:	4313      	orrs	r3, r2
 80272c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80272c4:	68fb      	ldr	r3, [r7, #12]
 80272c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80272ca:	683b      	ldr	r3, [r7, #0]
 80272cc:	691b      	ldr	r3, [r3, #16]
 80272ce:	4313      	orrs	r3, r2
 80272d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80272d2:	68fb      	ldr	r3, [r7, #12]
 80272d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80272d8:	683b      	ldr	r3, [r7, #0]
 80272da:	695b      	ldr	r3, [r3, #20]
 80272dc:	4313      	orrs	r3, r2
 80272de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80272e0:	68fb      	ldr	r3, [r7, #12]
 80272e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80272e6:	683b      	ldr	r3, [r7, #0]
 80272e8:	69db      	ldr	r3, [r3, #28]
 80272ea:	4313      	orrs	r3, r2
 80272ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80272ee:	687b      	ldr	r3, [r7, #4]
 80272f0:	681b      	ldr	r3, [r3, #0]
 80272f2:	68fa      	ldr	r2, [r7, #12]
 80272f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80272f6:	687b      	ldr	r3, [r7, #4]
 80272f8:	2200      	movs	r2, #0
 80272fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80272fe:	2300      	movs	r3, #0
}
 8027300:	4618      	mov	r0, r3
 8027302:	3714      	adds	r7, #20
 8027304:	46bd      	mov	sp, r7
 8027306:	f85d 7b04 	ldr.w	r7, [sp], #4
 802730a:	4770      	bx	lr

0802730c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 802730c:	b480      	push	{r7}
 802730e:	b083      	sub	sp, #12
 8027310:	af00      	add	r7, sp, #0
 8027312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8027314:	bf00      	nop
 8027316:	370c      	adds	r7, #12
 8027318:	46bd      	mov	sp, r7
 802731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802731e:	4770      	bx	lr

08027320 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8027320:	b480      	push	{r7}
 8027322:	b083      	sub	sp, #12
 8027324:	af00      	add	r7, sp, #0
 8027326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8027328:	bf00      	nop
 802732a:	370c      	adds	r7, #12
 802732c:	46bd      	mov	sp, r7
 802732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8027332:	4770      	bx	lr

08027334 <__cxa_guard_acquire>:
 8027334:	6803      	ldr	r3, [r0, #0]
 8027336:	07db      	lsls	r3, r3, #31
 8027338:	d406      	bmi.n	8027348 <__cxa_guard_acquire+0x14>
 802733a:	7843      	ldrb	r3, [r0, #1]
 802733c:	b103      	cbz	r3, 8027340 <__cxa_guard_acquire+0xc>
 802733e:	deff      	udf	#255	; 0xff
 8027340:	2301      	movs	r3, #1
 8027342:	7043      	strb	r3, [r0, #1]
 8027344:	4618      	mov	r0, r3
 8027346:	4770      	bx	lr
 8027348:	2000      	movs	r0, #0
 802734a:	4770      	bx	lr

0802734c <__cxa_guard_release>:
 802734c:	2301      	movs	r3, #1
 802734e:	6003      	str	r3, [r0, #0]
 8027350:	4770      	bx	lr
	...

08027354 <__libc_init_array>:
 8027354:	b570      	push	{r4, r5, r6, lr}
 8027356:	4e0d      	ldr	r6, [pc, #52]	; (802738c <__libc_init_array+0x38>)
 8027358:	4c0d      	ldr	r4, [pc, #52]	; (8027390 <__libc_init_array+0x3c>)
 802735a:	1ba4      	subs	r4, r4, r6
 802735c:	10a4      	asrs	r4, r4, #2
 802735e:	2500      	movs	r5, #0
 8027360:	42a5      	cmp	r5, r4
 8027362:	d109      	bne.n	8027378 <__libc_init_array+0x24>
 8027364:	4e0b      	ldr	r6, [pc, #44]	; (8027394 <__libc_init_array+0x40>)
 8027366:	4c0c      	ldr	r4, [pc, #48]	; (8027398 <__libc_init_array+0x44>)
 8027368:	f000 f820 	bl	80273ac <_init>
 802736c:	1ba4      	subs	r4, r4, r6
 802736e:	10a4      	asrs	r4, r4, #2
 8027370:	2500      	movs	r5, #0
 8027372:	42a5      	cmp	r5, r4
 8027374:	d105      	bne.n	8027382 <__libc_init_array+0x2e>
 8027376:	bd70      	pop	{r4, r5, r6, pc}
 8027378:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802737c:	4798      	blx	r3
 802737e:	3501      	adds	r5, #1
 8027380:	e7ee      	b.n	8027360 <__libc_init_array+0xc>
 8027382:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8027386:	4798      	blx	r3
 8027388:	3501      	adds	r5, #1
 802738a:	e7f2      	b.n	8027372 <__libc_init_array+0x1e>
 802738c:	080273ec 	.word	0x080273ec
 8027390:	080273ec 	.word	0x080273ec
 8027394:	080273ec 	.word	0x080273ec
 8027398:	080273f4 	.word	0x080273f4

0802739c <memset>:
 802739c:	4402      	add	r2, r0
 802739e:	4603      	mov	r3, r0
 80273a0:	4293      	cmp	r3, r2
 80273a2:	d100      	bne.n	80273a6 <memset+0xa>
 80273a4:	4770      	bx	lr
 80273a6:	f803 1b01 	strb.w	r1, [r3], #1
 80273aa:	e7f9      	b.n	80273a0 <memset+0x4>

080273ac <_init>:
 80273ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80273ae:	bf00      	nop
 80273b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80273b2:	bc08      	pop	{r3}
 80273b4:	469e      	mov	lr, r3
 80273b6:	4770      	bx	lr

080273b8 <_fini>:
 80273b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80273ba:	bf00      	nop
 80273bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80273be:	bc08      	pop	{r3}
 80273c0:	469e      	mov	lr, r3
 80273c2:	4770      	bx	lr
