
alias2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078b0  08020000  08020000  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  080278b0  080278b0  000278b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027b58  08027b58  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08027b58  08027b58  00027b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027b60  08027b60  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08027b60  08027b60  00027b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08027b68  08027b68  00027b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08027b6c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000111b0  200001e0  08027d48  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20011390  08027d48  00031390  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000297cf  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000044de  00000000  00000000  000599db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001558  00000000  00000000  0005dec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013a8  00000000  00000000  0005f418  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025295  00000000  00000000  000607c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001497b  00000000  00000000  00085a55  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cca9b  00000000  00000000  0009a3d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00166e6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061d4  00000000  00000000  00166ee8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08020000 <__do_global_dtors_aux>:
 8020000:	b510      	push	{r4, lr}
 8020002:	4c05      	ldr	r4, [pc, #20]	; (8020018 <__do_global_dtors_aux+0x18>)
 8020004:	7823      	ldrb	r3, [r4, #0]
 8020006:	b933      	cbnz	r3, 8020016 <__do_global_dtors_aux+0x16>
 8020008:	4b04      	ldr	r3, [pc, #16]	; (802001c <__do_global_dtors_aux+0x1c>)
 802000a:	b113      	cbz	r3, 8020012 <__do_global_dtors_aux+0x12>
 802000c:	4804      	ldr	r0, [pc, #16]	; (8020020 <__do_global_dtors_aux+0x20>)
 802000e:	f3af 8000 	nop.w
 8020012:	2301      	movs	r3, #1
 8020014:	7023      	strb	r3, [r4, #0]
 8020016:	bd10      	pop	{r4, pc}
 8020018:	200001e0 	.word	0x200001e0
 802001c:	00000000 	.word	0x00000000
 8020020:	08027898 	.word	0x08027898

08020024 <frame_dummy>:
 8020024:	b508      	push	{r3, lr}
 8020026:	4b03      	ldr	r3, [pc, #12]	; (8020034 <frame_dummy+0x10>)
 8020028:	b11b      	cbz	r3, 8020032 <frame_dummy+0xe>
 802002a:	4903      	ldr	r1, [pc, #12]	; (8020038 <frame_dummy+0x14>)
 802002c:	4803      	ldr	r0, [pc, #12]	; (802003c <frame_dummy+0x18>)
 802002e:	f3af 8000 	nop.w
 8020032:	bd08      	pop	{r3, pc}
 8020034:	00000000 	.word	0x00000000
 8020038:	200001e4 	.word	0x200001e4
 802003c:	08027898 	.word	0x08027898

08020040 <strlen>:
 8020040:	4603      	mov	r3, r0
 8020042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020046:	2a00      	cmp	r2, #0
 8020048:	d1fb      	bne.n	8020042 <strlen+0x2>
 802004a:	1a18      	subs	r0, r3, r0
 802004c:	3801      	subs	r0, #1
 802004e:	4770      	bx	lr

08020050 <__aeabi_drsub>:
 8020050:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8020054:	e002      	b.n	802005c <__adddf3>
 8020056:	bf00      	nop

08020058 <__aeabi_dsub>:
 8020058:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0802005c <__adddf3>:
 802005c:	b530      	push	{r4, r5, lr}
 802005e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8020062:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8020066:	ea94 0f05 	teq	r4, r5
 802006a:	bf08      	it	eq
 802006c:	ea90 0f02 	teqeq	r0, r2
 8020070:	bf1f      	itttt	ne
 8020072:	ea54 0c00 	orrsne.w	ip, r4, r0
 8020076:	ea55 0c02 	orrsne.w	ip, r5, r2
 802007a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 802007e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020082:	f000 80e2 	beq.w	802024a <__adddf3+0x1ee>
 8020086:	ea4f 5454 	mov.w	r4, r4, lsr #21
 802008a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 802008e:	bfb8      	it	lt
 8020090:	426d      	neglt	r5, r5
 8020092:	dd0c      	ble.n	80200ae <__adddf3+0x52>
 8020094:	442c      	add	r4, r5
 8020096:	ea80 0202 	eor.w	r2, r0, r2
 802009a:	ea81 0303 	eor.w	r3, r1, r3
 802009e:	ea82 0000 	eor.w	r0, r2, r0
 80200a2:	ea83 0101 	eor.w	r1, r3, r1
 80200a6:	ea80 0202 	eor.w	r2, r0, r2
 80200aa:	ea81 0303 	eor.w	r3, r1, r3
 80200ae:	2d36      	cmp	r5, #54	; 0x36
 80200b0:	bf88      	it	hi
 80200b2:	bd30      	pophi	{r4, r5, pc}
 80200b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80200b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80200bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80200c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80200c4:	d002      	beq.n	80200cc <__adddf3+0x70>
 80200c6:	4240      	negs	r0, r0
 80200c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80200cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80200d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80200d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80200d8:	d002      	beq.n	80200e0 <__adddf3+0x84>
 80200da:	4252      	negs	r2, r2
 80200dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80200e0:	ea94 0f05 	teq	r4, r5
 80200e4:	f000 80a7 	beq.w	8020236 <__adddf3+0x1da>
 80200e8:	f1a4 0401 	sub.w	r4, r4, #1
 80200ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80200f0:	db0d      	blt.n	802010e <__adddf3+0xb2>
 80200f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80200f6:	fa22 f205 	lsr.w	r2, r2, r5
 80200fa:	1880      	adds	r0, r0, r2
 80200fc:	f141 0100 	adc.w	r1, r1, #0
 8020100:	fa03 f20e 	lsl.w	r2, r3, lr
 8020104:	1880      	adds	r0, r0, r2
 8020106:	fa43 f305 	asr.w	r3, r3, r5
 802010a:	4159      	adcs	r1, r3
 802010c:	e00e      	b.n	802012c <__adddf3+0xd0>
 802010e:	f1a5 0520 	sub.w	r5, r5, #32
 8020112:	f10e 0e20 	add.w	lr, lr, #32
 8020116:	2a01      	cmp	r2, #1
 8020118:	fa03 fc0e 	lsl.w	ip, r3, lr
 802011c:	bf28      	it	cs
 802011e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020122:	fa43 f305 	asr.w	r3, r3, r5
 8020126:	18c0      	adds	r0, r0, r3
 8020128:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802012c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020130:	d507      	bpl.n	8020142 <__adddf3+0xe6>
 8020132:	f04f 0e00 	mov.w	lr, #0
 8020136:	f1dc 0c00 	rsbs	ip, ip, #0
 802013a:	eb7e 0000 	sbcs.w	r0, lr, r0
 802013e:	eb6e 0101 	sbc.w	r1, lr, r1
 8020142:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8020146:	d31b      	bcc.n	8020180 <__adddf3+0x124>
 8020148:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 802014c:	d30c      	bcc.n	8020168 <__adddf3+0x10c>
 802014e:	0849      	lsrs	r1, r1, #1
 8020150:	ea5f 0030 	movs.w	r0, r0, rrx
 8020154:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8020158:	f104 0401 	add.w	r4, r4, #1
 802015c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8020160:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8020164:	f080 809a 	bcs.w	802029c <__adddf3+0x240>
 8020168:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 802016c:	bf08      	it	eq
 802016e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020172:	f150 0000 	adcs.w	r0, r0, #0
 8020176:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802017a:	ea41 0105 	orr.w	r1, r1, r5
 802017e:	bd30      	pop	{r4, r5, pc}
 8020180:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8020184:	4140      	adcs	r0, r0
 8020186:	eb41 0101 	adc.w	r1, r1, r1
 802018a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 802018e:	f1a4 0401 	sub.w	r4, r4, #1
 8020192:	d1e9      	bne.n	8020168 <__adddf3+0x10c>
 8020194:	f091 0f00 	teq	r1, #0
 8020198:	bf04      	itt	eq
 802019a:	4601      	moveq	r1, r0
 802019c:	2000      	moveq	r0, #0
 802019e:	fab1 f381 	clz	r3, r1
 80201a2:	bf08      	it	eq
 80201a4:	3320      	addeq	r3, #32
 80201a6:	f1a3 030b 	sub.w	r3, r3, #11
 80201aa:	f1b3 0220 	subs.w	r2, r3, #32
 80201ae:	da0c      	bge.n	80201ca <__adddf3+0x16e>
 80201b0:	320c      	adds	r2, #12
 80201b2:	dd08      	ble.n	80201c6 <__adddf3+0x16a>
 80201b4:	f102 0c14 	add.w	ip, r2, #20
 80201b8:	f1c2 020c 	rsb	r2, r2, #12
 80201bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80201c0:	fa21 f102 	lsr.w	r1, r1, r2
 80201c4:	e00c      	b.n	80201e0 <__adddf3+0x184>
 80201c6:	f102 0214 	add.w	r2, r2, #20
 80201ca:	bfd8      	it	le
 80201cc:	f1c2 0c20 	rsble	ip, r2, #32
 80201d0:	fa01 f102 	lsl.w	r1, r1, r2
 80201d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80201d8:	bfdc      	itt	le
 80201da:	ea41 010c 	orrle.w	r1, r1, ip
 80201de:	4090      	lslle	r0, r2
 80201e0:	1ae4      	subs	r4, r4, r3
 80201e2:	bfa2      	ittt	ge
 80201e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80201e8:	4329      	orrge	r1, r5
 80201ea:	bd30      	popge	{r4, r5, pc}
 80201ec:	ea6f 0404 	mvn.w	r4, r4
 80201f0:	3c1f      	subs	r4, #31
 80201f2:	da1c      	bge.n	802022e <__adddf3+0x1d2>
 80201f4:	340c      	adds	r4, #12
 80201f6:	dc0e      	bgt.n	8020216 <__adddf3+0x1ba>
 80201f8:	f104 0414 	add.w	r4, r4, #20
 80201fc:	f1c4 0220 	rsb	r2, r4, #32
 8020200:	fa20 f004 	lsr.w	r0, r0, r4
 8020204:	fa01 f302 	lsl.w	r3, r1, r2
 8020208:	ea40 0003 	orr.w	r0, r0, r3
 802020c:	fa21 f304 	lsr.w	r3, r1, r4
 8020210:	ea45 0103 	orr.w	r1, r5, r3
 8020214:	bd30      	pop	{r4, r5, pc}
 8020216:	f1c4 040c 	rsb	r4, r4, #12
 802021a:	f1c4 0220 	rsb	r2, r4, #32
 802021e:	fa20 f002 	lsr.w	r0, r0, r2
 8020222:	fa01 f304 	lsl.w	r3, r1, r4
 8020226:	ea40 0003 	orr.w	r0, r0, r3
 802022a:	4629      	mov	r1, r5
 802022c:	bd30      	pop	{r4, r5, pc}
 802022e:	fa21 f004 	lsr.w	r0, r1, r4
 8020232:	4629      	mov	r1, r5
 8020234:	bd30      	pop	{r4, r5, pc}
 8020236:	f094 0f00 	teq	r4, #0
 802023a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 802023e:	bf06      	itte	eq
 8020240:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8020244:	3401      	addeq	r4, #1
 8020246:	3d01      	subne	r5, #1
 8020248:	e74e      	b.n	80200e8 <__adddf3+0x8c>
 802024a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802024e:	bf18      	it	ne
 8020250:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8020254:	d029      	beq.n	80202aa <__adddf3+0x24e>
 8020256:	ea94 0f05 	teq	r4, r5
 802025a:	bf08      	it	eq
 802025c:	ea90 0f02 	teqeq	r0, r2
 8020260:	d005      	beq.n	802026e <__adddf3+0x212>
 8020262:	ea54 0c00 	orrs.w	ip, r4, r0
 8020266:	bf04      	itt	eq
 8020268:	4619      	moveq	r1, r3
 802026a:	4610      	moveq	r0, r2
 802026c:	bd30      	pop	{r4, r5, pc}
 802026e:	ea91 0f03 	teq	r1, r3
 8020272:	bf1e      	ittt	ne
 8020274:	2100      	movne	r1, #0
 8020276:	2000      	movne	r0, #0
 8020278:	bd30      	popne	{r4, r5, pc}
 802027a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 802027e:	d105      	bne.n	802028c <__adddf3+0x230>
 8020280:	0040      	lsls	r0, r0, #1
 8020282:	4149      	adcs	r1, r1
 8020284:	bf28      	it	cs
 8020286:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 802028a:	bd30      	pop	{r4, r5, pc}
 802028c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8020290:	bf3c      	itt	cc
 8020292:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8020296:	bd30      	popcc	{r4, r5, pc}
 8020298:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 802029c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80202a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80202a4:	f04f 0000 	mov.w	r0, #0
 80202a8:	bd30      	pop	{r4, r5, pc}
 80202aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80202ae:	bf1a      	itte	ne
 80202b0:	4619      	movne	r1, r3
 80202b2:	4610      	movne	r0, r2
 80202b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80202b8:	bf1c      	itt	ne
 80202ba:	460b      	movne	r3, r1
 80202bc:	4602      	movne	r2, r0
 80202be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80202c2:	bf06      	itte	eq
 80202c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80202c8:	ea91 0f03 	teqeq	r1, r3
 80202cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80202d0:	bd30      	pop	{r4, r5, pc}
 80202d2:	bf00      	nop

080202d4 <__aeabi_ui2d>:
 80202d4:	f090 0f00 	teq	r0, #0
 80202d8:	bf04      	itt	eq
 80202da:	2100      	moveq	r1, #0
 80202dc:	4770      	bxeq	lr
 80202de:	b530      	push	{r4, r5, lr}
 80202e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80202e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80202e8:	f04f 0500 	mov.w	r5, #0
 80202ec:	f04f 0100 	mov.w	r1, #0
 80202f0:	e750      	b.n	8020194 <__adddf3+0x138>
 80202f2:	bf00      	nop

080202f4 <__aeabi_i2d>:
 80202f4:	f090 0f00 	teq	r0, #0
 80202f8:	bf04      	itt	eq
 80202fa:	2100      	moveq	r1, #0
 80202fc:	4770      	bxeq	lr
 80202fe:	b530      	push	{r4, r5, lr}
 8020300:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020304:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020308:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 802030c:	bf48      	it	mi
 802030e:	4240      	negmi	r0, r0
 8020310:	f04f 0100 	mov.w	r1, #0
 8020314:	e73e      	b.n	8020194 <__adddf3+0x138>
 8020316:	bf00      	nop

08020318 <__aeabi_f2d>:
 8020318:	0042      	lsls	r2, r0, #1
 802031a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802031e:	ea4f 0131 	mov.w	r1, r1, rrx
 8020322:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020326:	bf1f      	itttt	ne
 8020328:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 802032c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8020330:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8020334:	4770      	bxne	lr
 8020336:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 802033a:	bf08      	it	eq
 802033c:	4770      	bxeq	lr
 802033e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8020342:	bf04      	itt	eq
 8020344:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8020348:	4770      	bxeq	lr
 802034a:	b530      	push	{r4, r5, lr}
 802034c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8020350:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020354:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020358:	e71c      	b.n	8020194 <__adddf3+0x138>
 802035a:	bf00      	nop

0802035c <__aeabi_ul2d>:
 802035c:	ea50 0201 	orrs.w	r2, r0, r1
 8020360:	bf08      	it	eq
 8020362:	4770      	bxeq	lr
 8020364:	b530      	push	{r4, r5, lr}
 8020366:	f04f 0500 	mov.w	r5, #0
 802036a:	e00a      	b.n	8020382 <__aeabi_l2d+0x16>

0802036c <__aeabi_l2d>:
 802036c:	ea50 0201 	orrs.w	r2, r0, r1
 8020370:	bf08      	it	eq
 8020372:	4770      	bxeq	lr
 8020374:	b530      	push	{r4, r5, lr}
 8020376:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 802037a:	d502      	bpl.n	8020382 <__aeabi_l2d+0x16>
 802037c:	4240      	negs	r0, r0
 802037e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020382:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020386:	f104 0432 	add.w	r4, r4, #50	; 0x32
 802038a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 802038e:	f43f aed8 	beq.w	8020142 <__adddf3+0xe6>
 8020392:	f04f 0203 	mov.w	r2, #3
 8020396:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802039a:	bf18      	it	ne
 802039c:	3203      	addne	r2, #3
 802039e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80203a2:	bf18      	it	ne
 80203a4:	3203      	addne	r2, #3
 80203a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80203aa:	f1c2 0320 	rsb	r3, r2, #32
 80203ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80203b2:	fa20 f002 	lsr.w	r0, r0, r2
 80203b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80203ba:	ea40 000e 	orr.w	r0, r0, lr
 80203be:	fa21 f102 	lsr.w	r1, r1, r2
 80203c2:	4414      	add	r4, r2
 80203c4:	e6bd      	b.n	8020142 <__adddf3+0xe6>
 80203c6:	bf00      	nop

080203c8 <__aeabi_dmul>:
 80203c8:	b570      	push	{r4, r5, r6, lr}
 80203ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80203ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80203d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80203d6:	bf1d      	ittte	ne
 80203d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80203dc:	ea94 0f0c 	teqne	r4, ip
 80203e0:	ea95 0f0c 	teqne	r5, ip
 80203e4:	f000 f8de 	bleq	80205a4 <__aeabi_dmul+0x1dc>
 80203e8:	442c      	add	r4, r5
 80203ea:	ea81 0603 	eor.w	r6, r1, r3
 80203ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80203f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80203f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80203fa:	bf18      	it	ne
 80203fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8020400:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020408:	d038      	beq.n	802047c <__aeabi_dmul+0xb4>
 802040a:	fba0 ce02 	umull	ip, lr, r0, r2
 802040e:	f04f 0500 	mov.w	r5, #0
 8020412:	fbe1 e502 	umlal	lr, r5, r1, r2
 8020416:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 802041a:	fbe0 e503 	umlal	lr, r5, r0, r3
 802041e:	f04f 0600 	mov.w	r6, #0
 8020422:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020426:	f09c 0f00 	teq	ip, #0
 802042a:	bf18      	it	ne
 802042c:	f04e 0e01 	orrne.w	lr, lr, #1
 8020430:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8020434:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8020438:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 802043c:	d204      	bcs.n	8020448 <__aeabi_dmul+0x80>
 802043e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8020442:	416d      	adcs	r5, r5
 8020444:	eb46 0606 	adc.w	r6, r6, r6
 8020448:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 802044c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8020450:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8020454:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8020458:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 802045c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8020460:	bf88      	it	hi
 8020462:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020466:	d81e      	bhi.n	80204a6 <__aeabi_dmul+0xde>
 8020468:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 802046c:	bf08      	it	eq
 802046e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8020472:	f150 0000 	adcs.w	r0, r0, #0
 8020476:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802047a:	bd70      	pop	{r4, r5, r6, pc}
 802047c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8020480:	ea46 0101 	orr.w	r1, r6, r1
 8020484:	ea40 0002 	orr.w	r0, r0, r2
 8020488:	ea81 0103 	eor.w	r1, r1, r3
 802048c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8020490:	bfc2      	ittt	gt
 8020492:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020496:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 802049a:	bd70      	popgt	{r4, r5, r6, pc}
 802049c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80204a0:	f04f 0e00 	mov.w	lr, #0
 80204a4:	3c01      	subs	r4, #1
 80204a6:	f300 80ab 	bgt.w	8020600 <__aeabi_dmul+0x238>
 80204aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80204ae:	bfde      	ittt	le
 80204b0:	2000      	movle	r0, #0
 80204b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80204b6:	bd70      	pople	{r4, r5, r6, pc}
 80204b8:	f1c4 0400 	rsb	r4, r4, #0
 80204bc:	3c20      	subs	r4, #32
 80204be:	da35      	bge.n	802052c <__aeabi_dmul+0x164>
 80204c0:	340c      	adds	r4, #12
 80204c2:	dc1b      	bgt.n	80204fc <__aeabi_dmul+0x134>
 80204c4:	f104 0414 	add.w	r4, r4, #20
 80204c8:	f1c4 0520 	rsb	r5, r4, #32
 80204cc:	fa00 f305 	lsl.w	r3, r0, r5
 80204d0:	fa20 f004 	lsr.w	r0, r0, r4
 80204d4:	fa01 f205 	lsl.w	r2, r1, r5
 80204d8:	ea40 0002 	orr.w	r0, r0, r2
 80204dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80204e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80204e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80204e8:	fa21 f604 	lsr.w	r6, r1, r4
 80204ec:	eb42 0106 	adc.w	r1, r2, r6
 80204f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80204f4:	bf08      	it	eq
 80204f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80204fa:	bd70      	pop	{r4, r5, r6, pc}
 80204fc:	f1c4 040c 	rsb	r4, r4, #12
 8020500:	f1c4 0520 	rsb	r5, r4, #32
 8020504:	fa00 f304 	lsl.w	r3, r0, r4
 8020508:	fa20 f005 	lsr.w	r0, r0, r5
 802050c:	fa01 f204 	lsl.w	r2, r1, r4
 8020510:	ea40 0002 	orr.w	r0, r0, r2
 8020514:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020518:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802051c:	f141 0100 	adc.w	r1, r1, #0
 8020520:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020524:	bf08      	it	eq
 8020526:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802052a:	bd70      	pop	{r4, r5, r6, pc}
 802052c:	f1c4 0520 	rsb	r5, r4, #32
 8020530:	fa00 f205 	lsl.w	r2, r0, r5
 8020534:	ea4e 0e02 	orr.w	lr, lr, r2
 8020538:	fa20 f304 	lsr.w	r3, r0, r4
 802053c:	fa01 f205 	lsl.w	r2, r1, r5
 8020540:	ea43 0302 	orr.w	r3, r3, r2
 8020544:	fa21 f004 	lsr.w	r0, r1, r4
 8020548:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 802054c:	fa21 f204 	lsr.w	r2, r1, r4
 8020550:	ea20 0002 	bic.w	r0, r0, r2
 8020554:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8020558:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 802055c:	bf08      	it	eq
 802055e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8020562:	bd70      	pop	{r4, r5, r6, pc}
 8020564:	f094 0f00 	teq	r4, #0
 8020568:	d10f      	bne.n	802058a <__aeabi_dmul+0x1c2>
 802056a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 802056e:	0040      	lsls	r0, r0, #1
 8020570:	eb41 0101 	adc.w	r1, r1, r1
 8020574:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020578:	bf08      	it	eq
 802057a:	3c01      	subeq	r4, #1
 802057c:	d0f7      	beq.n	802056e <__aeabi_dmul+0x1a6>
 802057e:	ea41 0106 	orr.w	r1, r1, r6
 8020582:	f095 0f00 	teq	r5, #0
 8020586:	bf18      	it	ne
 8020588:	4770      	bxne	lr
 802058a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 802058e:	0052      	lsls	r2, r2, #1
 8020590:	eb43 0303 	adc.w	r3, r3, r3
 8020594:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8020598:	bf08      	it	eq
 802059a:	3d01      	subeq	r5, #1
 802059c:	d0f7      	beq.n	802058e <__aeabi_dmul+0x1c6>
 802059e:	ea43 0306 	orr.w	r3, r3, r6
 80205a2:	4770      	bx	lr
 80205a4:	ea94 0f0c 	teq	r4, ip
 80205a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80205ac:	bf18      	it	ne
 80205ae:	ea95 0f0c 	teqne	r5, ip
 80205b2:	d00c      	beq.n	80205ce <__aeabi_dmul+0x206>
 80205b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80205b8:	bf18      	it	ne
 80205ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80205be:	d1d1      	bne.n	8020564 <__aeabi_dmul+0x19c>
 80205c0:	ea81 0103 	eor.w	r1, r1, r3
 80205c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80205c8:	f04f 0000 	mov.w	r0, #0
 80205cc:	bd70      	pop	{r4, r5, r6, pc}
 80205ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80205d2:	bf06      	itte	eq
 80205d4:	4610      	moveq	r0, r2
 80205d6:	4619      	moveq	r1, r3
 80205d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80205dc:	d019      	beq.n	8020612 <__aeabi_dmul+0x24a>
 80205de:	ea94 0f0c 	teq	r4, ip
 80205e2:	d102      	bne.n	80205ea <__aeabi_dmul+0x222>
 80205e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80205e8:	d113      	bne.n	8020612 <__aeabi_dmul+0x24a>
 80205ea:	ea95 0f0c 	teq	r5, ip
 80205ee:	d105      	bne.n	80205fc <__aeabi_dmul+0x234>
 80205f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80205f4:	bf1c      	itt	ne
 80205f6:	4610      	movne	r0, r2
 80205f8:	4619      	movne	r1, r3
 80205fa:	d10a      	bne.n	8020612 <__aeabi_dmul+0x24a>
 80205fc:	ea81 0103 	eor.w	r1, r1, r3
 8020600:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020604:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020608:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802060c:	f04f 0000 	mov.w	r0, #0
 8020610:	bd70      	pop	{r4, r5, r6, pc}
 8020612:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020616:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 802061a:	bd70      	pop	{r4, r5, r6, pc}

0802061c <__aeabi_ddiv>:
 802061c:	b570      	push	{r4, r5, r6, lr}
 802061e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020622:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020626:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802062a:	bf1d      	ittte	ne
 802062c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020630:	ea94 0f0c 	teqne	r4, ip
 8020634:	ea95 0f0c 	teqne	r5, ip
 8020638:	f000 f8a7 	bleq	802078a <__aeabi_ddiv+0x16e>
 802063c:	eba4 0405 	sub.w	r4, r4, r5
 8020640:	ea81 0e03 	eor.w	lr, r1, r3
 8020644:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020648:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802064c:	f000 8088 	beq.w	8020760 <__aeabi_ddiv+0x144>
 8020650:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020654:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8020658:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 802065c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8020660:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8020664:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8020668:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 802066c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8020670:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8020674:	429d      	cmp	r5, r3
 8020676:	bf08      	it	eq
 8020678:	4296      	cmpeq	r6, r2
 802067a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 802067e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8020682:	d202      	bcs.n	802068a <__aeabi_ddiv+0x6e>
 8020684:	085b      	lsrs	r3, r3, #1
 8020686:	ea4f 0232 	mov.w	r2, r2, rrx
 802068a:	1ab6      	subs	r6, r6, r2
 802068c:	eb65 0503 	sbc.w	r5, r5, r3
 8020690:	085b      	lsrs	r3, r3, #1
 8020692:	ea4f 0232 	mov.w	r2, r2, rrx
 8020696:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 802069a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 802069e:	ebb6 0e02 	subs.w	lr, r6, r2
 80206a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206a6:	bf22      	ittt	cs
 80206a8:	1ab6      	subcs	r6, r6, r2
 80206aa:	4675      	movcs	r5, lr
 80206ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80206b0:	085b      	lsrs	r3, r3, #1
 80206b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80206b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80206ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206be:	bf22      	ittt	cs
 80206c0:	1ab6      	subcs	r6, r6, r2
 80206c2:	4675      	movcs	r5, lr
 80206c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80206c8:	085b      	lsrs	r3, r3, #1
 80206ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80206ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80206d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206d6:	bf22      	ittt	cs
 80206d8:	1ab6      	subcs	r6, r6, r2
 80206da:	4675      	movcs	r5, lr
 80206dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80206e0:	085b      	lsrs	r3, r3, #1
 80206e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80206e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80206ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80206ee:	bf22      	ittt	cs
 80206f0:	1ab6      	subcs	r6, r6, r2
 80206f2:	4675      	movcs	r5, lr
 80206f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80206f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80206fc:	d018      	beq.n	8020730 <__aeabi_ddiv+0x114>
 80206fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8020702:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8020706:	ea4f 1606 	mov.w	r6, r6, lsl #4
 802070a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 802070e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8020712:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8020716:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802071a:	d1c0      	bne.n	802069e <__aeabi_ddiv+0x82>
 802071c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020720:	d10b      	bne.n	802073a <__aeabi_ddiv+0x11e>
 8020722:	ea41 0100 	orr.w	r1, r1, r0
 8020726:	f04f 0000 	mov.w	r0, #0
 802072a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 802072e:	e7b6      	b.n	802069e <__aeabi_ddiv+0x82>
 8020730:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020734:	bf04      	itt	eq
 8020736:	4301      	orreq	r1, r0
 8020738:	2000      	moveq	r0, #0
 802073a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 802073e:	bf88      	it	hi
 8020740:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8020744:	f63f aeaf 	bhi.w	80204a6 <__aeabi_dmul+0xde>
 8020748:	ebb5 0c03 	subs.w	ip, r5, r3
 802074c:	bf04      	itt	eq
 802074e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8020752:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8020756:	f150 0000 	adcs.w	r0, r0, #0
 802075a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 802075e:	bd70      	pop	{r4, r5, r6, pc}
 8020760:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8020764:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8020768:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 802076c:	bfc2      	ittt	gt
 802076e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8020772:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8020776:	bd70      	popgt	{r4, r5, r6, pc}
 8020778:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 802077c:	f04f 0e00 	mov.w	lr, #0
 8020780:	3c01      	subs	r4, #1
 8020782:	e690      	b.n	80204a6 <__aeabi_dmul+0xde>
 8020784:	ea45 0e06 	orr.w	lr, r5, r6
 8020788:	e68d      	b.n	80204a6 <__aeabi_dmul+0xde>
 802078a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802078e:	ea94 0f0c 	teq	r4, ip
 8020792:	bf08      	it	eq
 8020794:	ea95 0f0c 	teqeq	r5, ip
 8020798:	f43f af3b 	beq.w	8020612 <__aeabi_dmul+0x24a>
 802079c:	ea94 0f0c 	teq	r4, ip
 80207a0:	d10a      	bne.n	80207b8 <__aeabi_ddiv+0x19c>
 80207a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80207a6:	f47f af34 	bne.w	8020612 <__aeabi_dmul+0x24a>
 80207aa:	ea95 0f0c 	teq	r5, ip
 80207ae:	f47f af25 	bne.w	80205fc <__aeabi_dmul+0x234>
 80207b2:	4610      	mov	r0, r2
 80207b4:	4619      	mov	r1, r3
 80207b6:	e72c      	b.n	8020612 <__aeabi_dmul+0x24a>
 80207b8:	ea95 0f0c 	teq	r5, ip
 80207bc:	d106      	bne.n	80207cc <__aeabi_ddiv+0x1b0>
 80207be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80207c2:	f43f aefd 	beq.w	80205c0 <__aeabi_dmul+0x1f8>
 80207c6:	4610      	mov	r0, r2
 80207c8:	4619      	mov	r1, r3
 80207ca:	e722      	b.n	8020612 <__aeabi_dmul+0x24a>
 80207cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80207d0:	bf18      	it	ne
 80207d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80207d6:	f47f aec5 	bne.w	8020564 <__aeabi_dmul+0x19c>
 80207da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80207de:	f47f af0d 	bne.w	80205fc <__aeabi_dmul+0x234>
 80207e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80207e6:	f47f aeeb 	bne.w	80205c0 <__aeabi_dmul+0x1f8>
 80207ea:	e712      	b.n	8020612 <__aeabi_dmul+0x24a>

080207ec <__gedf2>:
 80207ec:	f04f 3cff 	mov.w	ip, #4294967295
 80207f0:	e006      	b.n	8020800 <__cmpdf2+0x4>
 80207f2:	bf00      	nop

080207f4 <__ledf2>:
 80207f4:	f04f 0c01 	mov.w	ip, #1
 80207f8:	e002      	b.n	8020800 <__cmpdf2+0x4>
 80207fa:	bf00      	nop

080207fc <__cmpdf2>:
 80207fc:	f04f 0c01 	mov.w	ip, #1
 8020800:	f84d cd04 	str.w	ip, [sp, #-4]!
 8020804:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020808:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 802080c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020810:	bf18      	it	ne
 8020812:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020816:	d01b      	beq.n	8020850 <__cmpdf2+0x54>
 8020818:	b001      	add	sp, #4
 802081a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 802081e:	bf0c      	ite	eq
 8020820:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020824:	ea91 0f03 	teqne	r1, r3
 8020828:	bf02      	ittt	eq
 802082a:	ea90 0f02 	teqeq	r0, r2
 802082e:	2000      	moveq	r0, #0
 8020830:	4770      	bxeq	lr
 8020832:	f110 0f00 	cmn.w	r0, #0
 8020836:	ea91 0f03 	teq	r1, r3
 802083a:	bf58      	it	pl
 802083c:	4299      	cmppl	r1, r3
 802083e:	bf08      	it	eq
 8020840:	4290      	cmpeq	r0, r2
 8020842:	bf2c      	ite	cs
 8020844:	17d8      	asrcs	r0, r3, #31
 8020846:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 802084a:	f040 0001 	orr.w	r0, r0, #1
 802084e:	4770      	bx	lr
 8020850:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020854:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020858:	d102      	bne.n	8020860 <__cmpdf2+0x64>
 802085a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 802085e:	d107      	bne.n	8020870 <__cmpdf2+0x74>
 8020860:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020864:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020868:	d1d6      	bne.n	8020818 <__cmpdf2+0x1c>
 802086a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 802086e:	d0d3      	beq.n	8020818 <__cmpdf2+0x1c>
 8020870:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020874:	4770      	bx	lr
 8020876:	bf00      	nop

08020878 <__aeabi_cdrcmple>:
 8020878:	4684      	mov	ip, r0
 802087a:	4610      	mov	r0, r2
 802087c:	4662      	mov	r2, ip
 802087e:	468c      	mov	ip, r1
 8020880:	4619      	mov	r1, r3
 8020882:	4663      	mov	r3, ip
 8020884:	e000      	b.n	8020888 <__aeabi_cdcmpeq>
 8020886:	bf00      	nop

08020888 <__aeabi_cdcmpeq>:
 8020888:	b501      	push	{r0, lr}
 802088a:	f7ff ffb7 	bl	80207fc <__cmpdf2>
 802088e:	2800      	cmp	r0, #0
 8020890:	bf48      	it	mi
 8020892:	f110 0f00 	cmnmi.w	r0, #0
 8020896:	bd01      	pop	{r0, pc}

08020898 <__aeabi_dcmpeq>:
 8020898:	f84d ed08 	str.w	lr, [sp, #-8]!
 802089c:	f7ff fff4 	bl	8020888 <__aeabi_cdcmpeq>
 80208a0:	bf0c      	ite	eq
 80208a2:	2001      	moveq	r0, #1
 80208a4:	2000      	movne	r0, #0
 80208a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80208aa:	bf00      	nop

080208ac <__aeabi_dcmplt>:
 80208ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208b0:	f7ff ffea 	bl	8020888 <__aeabi_cdcmpeq>
 80208b4:	bf34      	ite	cc
 80208b6:	2001      	movcc	r0, #1
 80208b8:	2000      	movcs	r0, #0
 80208ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80208be:	bf00      	nop

080208c0 <__aeabi_dcmple>:
 80208c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208c4:	f7ff ffe0 	bl	8020888 <__aeabi_cdcmpeq>
 80208c8:	bf94      	ite	ls
 80208ca:	2001      	movls	r0, #1
 80208cc:	2000      	movhi	r0, #0
 80208ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80208d2:	bf00      	nop

080208d4 <__aeabi_dcmpge>:
 80208d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208d8:	f7ff ffce 	bl	8020878 <__aeabi_cdrcmple>
 80208dc:	bf94      	ite	ls
 80208de:	2001      	movls	r0, #1
 80208e0:	2000      	movhi	r0, #0
 80208e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80208e6:	bf00      	nop

080208e8 <__aeabi_dcmpgt>:
 80208e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80208ec:	f7ff ffc4 	bl	8020878 <__aeabi_cdrcmple>
 80208f0:	bf34      	ite	cc
 80208f2:	2001      	movcc	r0, #1
 80208f4:	2000      	movcs	r0, #0
 80208f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80208fa:	bf00      	nop

080208fc <__aeabi_dcmpun>:
 80208fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020904:	d102      	bne.n	802090c <__aeabi_dcmpun+0x10>
 8020906:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 802090a:	d10a      	bne.n	8020922 <__aeabi_dcmpun+0x26>
 802090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020914:	d102      	bne.n	802091c <__aeabi_dcmpun+0x20>
 8020916:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 802091a:	d102      	bne.n	8020922 <__aeabi_dcmpun+0x26>
 802091c:	f04f 0000 	mov.w	r0, #0
 8020920:	4770      	bx	lr
 8020922:	f04f 0001 	mov.w	r0, #1
 8020926:	4770      	bx	lr

08020928 <__aeabi_d2iz>:
 8020928:	ea4f 0241 	mov.w	r2, r1, lsl #1
 802092c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020930:	d215      	bcs.n	802095e <__aeabi_d2iz+0x36>
 8020932:	d511      	bpl.n	8020958 <__aeabi_d2iz+0x30>
 8020934:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020938:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 802093c:	d912      	bls.n	8020964 <__aeabi_d2iz+0x3c>
 802093e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020942:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020946:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 802094a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 802094e:	fa23 f002 	lsr.w	r0, r3, r2
 8020952:	bf18      	it	ne
 8020954:	4240      	negne	r0, r0
 8020956:	4770      	bx	lr
 8020958:	f04f 0000 	mov.w	r0, #0
 802095c:	4770      	bx	lr
 802095e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020962:	d105      	bne.n	8020970 <__aeabi_d2iz+0x48>
 8020964:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8020968:	bf08      	it	eq
 802096a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 802096e:	4770      	bx	lr
 8020970:	f04f 0000 	mov.w	r0, #0
 8020974:	4770      	bx	lr
 8020976:	bf00      	nop

08020978 <__aeabi_d2f>:
 8020978:	ea4f 0241 	mov.w	r2, r1, lsl #1
 802097c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8020980:	bf24      	itt	cs
 8020982:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8020986:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 802098a:	d90d      	bls.n	80209a8 <__aeabi_d2f+0x30>
 802098c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8020990:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8020994:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8020998:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 802099c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80209a0:	bf08      	it	eq
 80209a2:	f020 0001 	biceq.w	r0, r0, #1
 80209a6:	4770      	bx	lr
 80209a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80209ac:	d121      	bne.n	80209f2 <__aeabi_d2f+0x7a>
 80209ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80209b2:	bfbc      	itt	lt
 80209b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80209b8:	4770      	bxlt	lr
 80209ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80209be:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80209c2:	f1c2 0218 	rsb	r2, r2, #24
 80209c6:	f1c2 0c20 	rsb	ip, r2, #32
 80209ca:	fa10 f30c 	lsls.w	r3, r0, ip
 80209ce:	fa20 f002 	lsr.w	r0, r0, r2
 80209d2:	bf18      	it	ne
 80209d4:	f040 0001 	orrne.w	r0, r0, #1
 80209d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80209dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80209e0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80209e4:	ea40 000c 	orr.w	r0, r0, ip
 80209e8:	fa23 f302 	lsr.w	r3, r3, r2
 80209ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80209f0:	e7cc      	b.n	802098c <__aeabi_d2f+0x14>
 80209f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80209f6:	d107      	bne.n	8020a08 <__aeabi_d2f+0x90>
 80209f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80209fc:	bf1e      	ittt	ne
 80209fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8020a02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8020a06:	4770      	bxne	lr
 8020a08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8020a0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8020a10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8020a14:	4770      	bx	lr
 8020a16:	bf00      	nop

08020a18 <__aeabi_uldivmod>:
 8020a18:	b953      	cbnz	r3, 8020a30 <__aeabi_uldivmod+0x18>
 8020a1a:	b94a      	cbnz	r2, 8020a30 <__aeabi_uldivmod+0x18>
 8020a1c:	2900      	cmp	r1, #0
 8020a1e:	bf08      	it	eq
 8020a20:	2800      	cmpeq	r0, #0
 8020a22:	bf1c      	itt	ne
 8020a24:	f04f 31ff 	movne.w	r1, #4294967295
 8020a28:	f04f 30ff 	movne.w	r0, #4294967295
 8020a2c:	f000 b972 	b.w	8020d14 <__aeabi_idiv0>
 8020a30:	f1ad 0c08 	sub.w	ip, sp, #8
 8020a34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020a38:	f000 f806 	bl	8020a48 <__udivmoddi4>
 8020a3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020a40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020a44:	b004      	add	sp, #16
 8020a46:	4770      	bx	lr

08020a48 <__udivmoddi4>:
 8020a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020a4c:	9e08      	ldr	r6, [sp, #32]
 8020a4e:	4604      	mov	r4, r0
 8020a50:	4688      	mov	r8, r1
 8020a52:	2b00      	cmp	r3, #0
 8020a54:	d14b      	bne.n	8020aee <__udivmoddi4+0xa6>
 8020a56:	428a      	cmp	r2, r1
 8020a58:	4615      	mov	r5, r2
 8020a5a:	d967      	bls.n	8020b2c <__udivmoddi4+0xe4>
 8020a5c:	fab2 f282 	clz	r2, r2
 8020a60:	b14a      	cbz	r2, 8020a76 <__udivmoddi4+0x2e>
 8020a62:	f1c2 0720 	rsb	r7, r2, #32
 8020a66:	fa01 f302 	lsl.w	r3, r1, r2
 8020a6a:	fa20 f707 	lsr.w	r7, r0, r7
 8020a6e:	4095      	lsls	r5, r2
 8020a70:	ea47 0803 	orr.w	r8, r7, r3
 8020a74:	4094      	lsls	r4, r2
 8020a76:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020a7a:	0c23      	lsrs	r3, r4, #16
 8020a7c:	fbb8 f7fe 	udiv	r7, r8, lr
 8020a80:	fa1f fc85 	uxth.w	ip, r5
 8020a84:	fb0e 8817 	mls	r8, lr, r7, r8
 8020a88:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8020a8c:	fb07 f10c 	mul.w	r1, r7, ip
 8020a90:	4299      	cmp	r1, r3
 8020a92:	d909      	bls.n	8020aa8 <__udivmoddi4+0x60>
 8020a94:	18eb      	adds	r3, r5, r3
 8020a96:	f107 30ff 	add.w	r0, r7, #4294967295
 8020a9a:	f080 811b 	bcs.w	8020cd4 <__udivmoddi4+0x28c>
 8020a9e:	4299      	cmp	r1, r3
 8020aa0:	f240 8118 	bls.w	8020cd4 <__udivmoddi4+0x28c>
 8020aa4:	3f02      	subs	r7, #2
 8020aa6:	442b      	add	r3, r5
 8020aa8:	1a5b      	subs	r3, r3, r1
 8020aaa:	b2a4      	uxth	r4, r4
 8020aac:	fbb3 f0fe 	udiv	r0, r3, lr
 8020ab0:	fb0e 3310 	mls	r3, lr, r0, r3
 8020ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020ab8:	fb00 fc0c 	mul.w	ip, r0, ip
 8020abc:	45a4      	cmp	ip, r4
 8020abe:	d909      	bls.n	8020ad4 <__udivmoddi4+0x8c>
 8020ac0:	192c      	adds	r4, r5, r4
 8020ac2:	f100 33ff 	add.w	r3, r0, #4294967295
 8020ac6:	f080 8107 	bcs.w	8020cd8 <__udivmoddi4+0x290>
 8020aca:	45a4      	cmp	ip, r4
 8020acc:	f240 8104 	bls.w	8020cd8 <__udivmoddi4+0x290>
 8020ad0:	3802      	subs	r0, #2
 8020ad2:	442c      	add	r4, r5
 8020ad4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8020ad8:	eba4 040c 	sub.w	r4, r4, ip
 8020adc:	2700      	movs	r7, #0
 8020ade:	b11e      	cbz	r6, 8020ae8 <__udivmoddi4+0xa0>
 8020ae0:	40d4      	lsrs	r4, r2
 8020ae2:	2300      	movs	r3, #0
 8020ae4:	e9c6 4300 	strd	r4, r3, [r6]
 8020ae8:	4639      	mov	r1, r7
 8020aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020aee:	428b      	cmp	r3, r1
 8020af0:	d909      	bls.n	8020b06 <__udivmoddi4+0xbe>
 8020af2:	2e00      	cmp	r6, #0
 8020af4:	f000 80eb 	beq.w	8020cce <__udivmoddi4+0x286>
 8020af8:	2700      	movs	r7, #0
 8020afa:	e9c6 0100 	strd	r0, r1, [r6]
 8020afe:	4638      	mov	r0, r7
 8020b00:	4639      	mov	r1, r7
 8020b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b06:	fab3 f783 	clz	r7, r3
 8020b0a:	2f00      	cmp	r7, #0
 8020b0c:	d147      	bne.n	8020b9e <__udivmoddi4+0x156>
 8020b0e:	428b      	cmp	r3, r1
 8020b10:	d302      	bcc.n	8020b18 <__udivmoddi4+0xd0>
 8020b12:	4282      	cmp	r2, r0
 8020b14:	f200 80fa 	bhi.w	8020d0c <__udivmoddi4+0x2c4>
 8020b18:	1a84      	subs	r4, r0, r2
 8020b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8020b1e:	2001      	movs	r0, #1
 8020b20:	4698      	mov	r8, r3
 8020b22:	2e00      	cmp	r6, #0
 8020b24:	d0e0      	beq.n	8020ae8 <__udivmoddi4+0xa0>
 8020b26:	e9c6 4800 	strd	r4, r8, [r6]
 8020b2a:	e7dd      	b.n	8020ae8 <__udivmoddi4+0xa0>
 8020b2c:	b902      	cbnz	r2, 8020b30 <__udivmoddi4+0xe8>
 8020b2e:	deff      	udf	#255	; 0xff
 8020b30:	fab2 f282 	clz	r2, r2
 8020b34:	2a00      	cmp	r2, #0
 8020b36:	f040 808f 	bne.w	8020c58 <__udivmoddi4+0x210>
 8020b3a:	1b49      	subs	r1, r1, r5
 8020b3c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020b40:	fa1f f885 	uxth.w	r8, r5
 8020b44:	2701      	movs	r7, #1
 8020b46:	fbb1 fcfe 	udiv	ip, r1, lr
 8020b4a:	0c23      	lsrs	r3, r4, #16
 8020b4c:	fb0e 111c 	mls	r1, lr, ip, r1
 8020b50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8020b54:	fb08 f10c 	mul.w	r1, r8, ip
 8020b58:	4299      	cmp	r1, r3
 8020b5a:	d907      	bls.n	8020b6c <__udivmoddi4+0x124>
 8020b5c:	18eb      	adds	r3, r5, r3
 8020b5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8020b62:	d202      	bcs.n	8020b6a <__udivmoddi4+0x122>
 8020b64:	4299      	cmp	r1, r3
 8020b66:	f200 80cd 	bhi.w	8020d04 <__udivmoddi4+0x2bc>
 8020b6a:	4684      	mov	ip, r0
 8020b6c:	1a59      	subs	r1, r3, r1
 8020b6e:	b2a3      	uxth	r3, r4
 8020b70:	fbb1 f0fe 	udiv	r0, r1, lr
 8020b74:	fb0e 1410 	mls	r4, lr, r0, r1
 8020b78:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8020b7c:	fb08 f800 	mul.w	r8, r8, r0
 8020b80:	45a0      	cmp	r8, r4
 8020b82:	d907      	bls.n	8020b94 <__udivmoddi4+0x14c>
 8020b84:	192c      	adds	r4, r5, r4
 8020b86:	f100 33ff 	add.w	r3, r0, #4294967295
 8020b8a:	d202      	bcs.n	8020b92 <__udivmoddi4+0x14a>
 8020b8c:	45a0      	cmp	r8, r4
 8020b8e:	f200 80b6 	bhi.w	8020cfe <__udivmoddi4+0x2b6>
 8020b92:	4618      	mov	r0, r3
 8020b94:	eba4 0408 	sub.w	r4, r4, r8
 8020b98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8020b9c:	e79f      	b.n	8020ade <__udivmoddi4+0x96>
 8020b9e:	f1c7 0c20 	rsb	ip, r7, #32
 8020ba2:	40bb      	lsls	r3, r7
 8020ba4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8020ba8:	ea4e 0e03 	orr.w	lr, lr, r3
 8020bac:	fa01 f407 	lsl.w	r4, r1, r7
 8020bb0:	fa20 f50c 	lsr.w	r5, r0, ip
 8020bb4:	fa21 f30c 	lsr.w	r3, r1, ip
 8020bb8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8020bbc:	4325      	orrs	r5, r4
 8020bbe:	fbb3 f9f8 	udiv	r9, r3, r8
 8020bc2:	0c2c      	lsrs	r4, r5, #16
 8020bc4:	fb08 3319 	mls	r3, r8, r9, r3
 8020bc8:	fa1f fa8e 	uxth.w	sl, lr
 8020bcc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8020bd0:	fb09 f40a 	mul.w	r4, r9, sl
 8020bd4:	429c      	cmp	r4, r3
 8020bd6:	fa02 f207 	lsl.w	r2, r2, r7
 8020bda:	fa00 f107 	lsl.w	r1, r0, r7
 8020bde:	d90b      	bls.n	8020bf8 <__udivmoddi4+0x1b0>
 8020be0:	eb1e 0303 	adds.w	r3, lr, r3
 8020be4:	f109 30ff 	add.w	r0, r9, #4294967295
 8020be8:	f080 8087 	bcs.w	8020cfa <__udivmoddi4+0x2b2>
 8020bec:	429c      	cmp	r4, r3
 8020bee:	f240 8084 	bls.w	8020cfa <__udivmoddi4+0x2b2>
 8020bf2:	f1a9 0902 	sub.w	r9, r9, #2
 8020bf6:	4473      	add	r3, lr
 8020bf8:	1b1b      	subs	r3, r3, r4
 8020bfa:	b2ad      	uxth	r5, r5
 8020bfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8020c00:	fb08 3310 	mls	r3, r8, r0, r3
 8020c04:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8020c08:	fb00 fa0a 	mul.w	sl, r0, sl
 8020c0c:	45a2      	cmp	sl, r4
 8020c0e:	d908      	bls.n	8020c22 <__udivmoddi4+0x1da>
 8020c10:	eb1e 0404 	adds.w	r4, lr, r4
 8020c14:	f100 33ff 	add.w	r3, r0, #4294967295
 8020c18:	d26b      	bcs.n	8020cf2 <__udivmoddi4+0x2aa>
 8020c1a:	45a2      	cmp	sl, r4
 8020c1c:	d969      	bls.n	8020cf2 <__udivmoddi4+0x2aa>
 8020c1e:	3802      	subs	r0, #2
 8020c20:	4474      	add	r4, lr
 8020c22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8020c26:	fba0 8902 	umull	r8, r9, r0, r2
 8020c2a:	eba4 040a 	sub.w	r4, r4, sl
 8020c2e:	454c      	cmp	r4, r9
 8020c30:	46c2      	mov	sl, r8
 8020c32:	464b      	mov	r3, r9
 8020c34:	d354      	bcc.n	8020ce0 <__udivmoddi4+0x298>
 8020c36:	d051      	beq.n	8020cdc <__udivmoddi4+0x294>
 8020c38:	2e00      	cmp	r6, #0
 8020c3a:	d069      	beq.n	8020d10 <__udivmoddi4+0x2c8>
 8020c3c:	ebb1 050a 	subs.w	r5, r1, sl
 8020c40:	eb64 0403 	sbc.w	r4, r4, r3
 8020c44:	fa04 fc0c 	lsl.w	ip, r4, ip
 8020c48:	40fd      	lsrs	r5, r7
 8020c4a:	40fc      	lsrs	r4, r7
 8020c4c:	ea4c 0505 	orr.w	r5, ip, r5
 8020c50:	e9c6 5400 	strd	r5, r4, [r6]
 8020c54:	2700      	movs	r7, #0
 8020c56:	e747      	b.n	8020ae8 <__udivmoddi4+0xa0>
 8020c58:	f1c2 0320 	rsb	r3, r2, #32
 8020c5c:	fa20 f703 	lsr.w	r7, r0, r3
 8020c60:	4095      	lsls	r5, r2
 8020c62:	fa01 f002 	lsl.w	r0, r1, r2
 8020c66:	fa21 f303 	lsr.w	r3, r1, r3
 8020c6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8020c6e:	4338      	orrs	r0, r7
 8020c70:	0c01      	lsrs	r1, r0, #16
 8020c72:	fbb3 f7fe 	udiv	r7, r3, lr
 8020c76:	fa1f f885 	uxth.w	r8, r5
 8020c7a:	fb0e 3317 	mls	r3, lr, r7, r3
 8020c7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020c82:	fb07 f308 	mul.w	r3, r7, r8
 8020c86:	428b      	cmp	r3, r1
 8020c88:	fa04 f402 	lsl.w	r4, r4, r2
 8020c8c:	d907      	bls.n	8020c9e <__udivmoddi4+0x256>
 8020c8e:	1869      	adds	r1, r5, r1
 8020c90:	f107 3cff 	add.w	ip, r7, #4294967295
 8020c94:	d22f      	bcs.n	8020cf6 <__udivmoddi4+0x2ae>
 8020c96:	428b      	cmp	r3, r1
 8020c98:	d92d      	bls.n	8020cf6 <__udivmoddi4+0x2ae>
 8020c9a:	3f02      	subs	r7, #2
 8020c9c:	4429      	add	r1, r5
 8020c9e:	1acb      	subs	r3, r1, r3
 8020ca0:	b281      	uxth	r1, r0
 8020ca2:	fbb3 f0fe 	udiv	r0, r3, lr
 8020ca6:	fb0e 3310 	mls	r3, lr, r0, r3
 8020caa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020cae:	fb00 f308 	mul.w	r3, r0, r8
 8020cb2:	428b      	cmp	r3, r1
 8020cb4:	d907      	bls.n	8020cc6 <__udivmoddi4+0x27e>
 8020cb6:	1869      	adds	r1, r5, r1
 8020cb8:	f100 3cff 	add.w	ip, r0, #4294967295
 8020cbc:	d217      	bcs.n	8020cee <__udivmoddi4+0x2a6>
 8020cbe:	428b      	cmp	r3, r1
 8020cc0:	d915      	bls.n	8020cee <__udivmoddi4+0x2a6>
 8020cc2:	3802      	subs	r0, #2
 8020cc4:	4429      	add	r1, r5
 8020cc6:	1ac9      	subs	r1, r1, r3
 8020cc8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8020ccc:	e73b      	b.n	8020b46 <__udivmoddi4+0xfe>
 8020cce:	4637      	mov	r7, r6
 8020cd0:	4630      	mov	r0, r6
 8020cd2:	e709      	b.n	8020ae8 <__udivmoddi4+0xa0>
 8020cd4:	4607      	mov	r7, r0
 8020cd6:	e6e7      	b.n	8020aa8 <__udivmoddi4+0x60>
 8020cd8:	4618      	mov	r0, r3
 8020cda:	e6fb      	b.n	8020ad4 <__udivmoddi4+0x8c>
 8020cdc:	4541      	cmp	r1, r8
 8020cde:	d2ab      	bcs.n	8020c38 <__udivmoddi4+0x1f0>
 8020ce0:	ebb8 0a02 	subs.w	sl, r8, r2
 8020ce4:	eb69 020e 	sbc.w	r2, r9, lr
 8020ce8:	3801      	subs	r0, #1
 8020cea:	4613      	mov	r3, r2
 8020cec:	e7a4      	b.n	8020c38 <__udivmoddi4+0x1f0>
 8020cee:	4660      	mov	r0, ip
 8020cf0:	e7e9      	b.n	8020cc6 <__udivmoddi4+0x27e>
 8020cf2:	4618      	mov	r0, r3
 8020cf4:	e795      	b.n	8020c22 <__udivmoddi4+0x1da>
 8020cf6:	4667      	mov	r7, ip
 8020cf8:	e7d1      	b.n	8020c9e <__udivmoddi4+0x256>
 8020cfa:	4681      	mov	r9, r0
 8020cfc:	e77c      	b.n	8020bf8 <__udivmoddi4+0x1b0>
 8020cfe:	3802      	subs	r0, #2
 8020d00:	442c      	add	r4, r5
 8020d02:	e747      	b.n	8020b94 <__udivmoddi4+0x14c>
 8020d04:	f1ac 0c02 	sub.w	ip, ip, #2
 8020d08:	442b      	add	r3, r5
 8020d0a:	e72f      	b.n	8020b6c <__udivmoddi4+0x124>
 8020d0c:	4638      	mov	r0, r7
 8020d0e:	e708      	b.n	8020b22 <__udivmoddi4+0xda>
 8020d10:	4637      	mov	r7, r6
 8020d12:	e6e9      	b.n	8020ae8 <__udivmoddi4+0xa0>

08020d14 <__aeabi_idiv0>:
 8020d14:	4770      	bx	lr
 8020d16:	bf00      	nop

08020d18 <_ZN7EncoderC1Ev>:
#include "encoder.hpp"
#include "declare_extern.h"

Encoder::Encoder() : distance_(0)
 8020d18:	b480      	push	{r7}
 8020d1a:	b083      	sub	sp, #12
 8020d1c:	af00      	add	r7, sp, #0
 8020d1e:	6078      	str	r0, [r7, #4]
                   , distance_stack_(0)
                   , distance_difference_(0) {}
 8020d20:	687b      	ldr	r3, [r7, #4]
 8020d22:	f04f 0200 	mov.w	r2, #0
 8020d26:	601a      	str	r2, [r3, #0]
 8020d28:	687b      	ldr	r3, [r7, #4]
 8020d2a:	f04f 0200 	mov.w	r2, #0
 8020d2e:	605a      	str	r2, [r3, #4]
 8020d30:	687b      	ldr	r3, [r7, #4]
 8020d32:	f04f 0200 	mov.w	r2, #0
 8020d36:	609a      	str	r2, [r3, #8]
 8020d38:	687b      	ldr	r3, [r7, #4]
 8020d3a:	4618      	mov	r0, r3
 8020d3c:	370c      	adds	r7, #12
 8020d3e:	46bd      	mov	sp, r7
 8020d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d44:	4770      	bx	lr
	...

08020d48 <_ZN7Encoder4InitEv>:

void Encoder::Init()
{
 8020d48:	b580      	push	{r7, lr}
 8020d4a:	b082      	sub	sp, #8
 8020d4c:	af00      	add	r7, sp, #0
 8020d4e:	6078      	str	r0, [r7, #4]
	if(HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL) != HAL_OK)
 8020d50:	213c      	movs	r1, #60	; 0x3c
 8020d52:	4812      	ldr	r0, [pc, #72]	; (8020d9c <_ZN7Encoder4InitEv+0x54>)
 8020d54:	f004 f970 	bl	8025038 <HAL_TIM_Encoder_Start>
 8020d58:	4603      	mov	r3, r0
 8020d5a:	2b00      	cmp	r3, #0
 8020d5c:	bf14      	ite	ne
 8020d5e:	2301      	movne	r3, #1
 8020d60:	2300      	moveq	r3, #0
 8020d62:	b2db      	uxtb	r3, r3
 8020d64:	2b00      	cmp	r3, #0
 8020d66:	d004      	beq.n	8020d72 <_ZN7Encoder4InitEv+0x2a>
	{
#ifdef DEBUG_MODE
        g_error_handler_tim8 = true;
 8020d68:	4b0d      	ldr	r3, [pc, #52]	; (8020da0 <_ZN7Encoder4InitEv+0x58>)
 8020d6a:	2201      	movs	r2, #1
 8020d6c:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

		Error_Handler();
 8020d6e:	f001 f8df 	bl	8021f30 <Error_Handler>
	}

	if(HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_ALL) != HAL_OK)
 8020d72:	213c      	movs	r1, #60	; 0x3c
 8020d74:	480b      	ldr	r0, [pc, #44]	; (8020da4 <_ZN7Encoder4InitEv+0x5c>)
 8020d76:	f004 f95f 	bl	8025038 <HAL_TIM_Encoder_Start>
 8020d7a:	4603      	mov	r3, r0
 8020d7c:	2b00      	cmp	r3, #0
 8020d7e:	bf14      	ite	ne
 8020d80:	2301      	movne	r3, #1
 8020d82:	2300      	moveq	r3, #0
 8020d84:	b2db      	uxtb	r3, r3
 8020d86:	2b00      	cmp	r3, #0
 8020d88:	d004      	beq.n	8020d94 <_ZN7Encoder4InitEv+0x4c>
	{
#ifdef DEBUG_MODE
        g_error_handler_tim4 = true;
 8020d8a:	4b07      	ldr	r3, [pc, #28]	; (8020da8 <_ZN7Encoder4InitEv+0x60>)
 8020d8c:	2201      	movs	r2, #1
 8020d8e:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

		Error_Handler();
 8020d90:	f001 f8ce 	bl	8021f30 <Error_Handler>
	}
}
 8020d94:	bf00      	nop
 8020d96:	3708      	adds	r7, #8
 8020d98:	46bd      	mov	sp, r7
 8020d9a:	bd80      	pop	{r7, pc}
 8020d9c:	20010fb4 	.word	0x20010fb4
 8020da0:	20000209 	.word	0x20000209
 8020da4:	20010ff4 	.word	0x20010ff4
 8020da8:	20000208 	.word	0x20000208

08020dac <_ZN8Iim42652C1Ev>:
#include "iim_42652.hpp"
#include "declare_extern.h"

Iim42652::Iim42652() : degree_stack_z_(0) {}
 8020dac:	b490      	push	{r4, r7}
 8020dae:	b082      	sub	sp, #8
 8020db0:	af00      	add	r7, sp, #0
 8020db2:	6078      	str	r0, [r7, #4]
 8020db4:	687a      	ldr	r2, [r7, #4]
 8020db6:	f04f 0300 	mov.w	r3, #0
 8020dba:	f04f 0400 	mov.w	r4, #0
 8020dbe:	e9c2 3400 	strd	r3, r4, [r2]
 8020dc2:	687b      	ldr	r3, [r7, #4]
 8020dc4:	4618      	mov	r0, r3
 8020dc6:	3708      	adds	r7, #8
 8020dc8:	46bd      	mov	sp, r7
 8020dca:	bc90      	pop	{r4, r7}
 8020dcc:	4770      	bx	lr

08020dce <_ZN8Iim4265217ResetDegreeStackZEv>:
    g_deg_z = degree_z;
#endif // DEBUG_MODE
}

void Iim42652::ResetDegreeStackZ()
{
 8020dce:	b490      	push	{r4, r7}
 8020dd0:	b082      	sub	sp, #8
 8020dd2:	af00      	add	r7, sp, #0
 8020dd4:	6078      	str	r0, [r7, #4]
    degree_stack_z_ = 0.0;
 8020dd6:	687a      	ldr	r2, [r7, #4]
 8020dd8:	f04f 0300 	mov.w	r3, #0
 8020ddc:	f04f 0400 	mov.w	r4, #0
 8020de0:	e9c2 3400 	strd	r3, r4, [r2]
}
 8020de4:	bf00      	nop
 8020de6:	3708      	adds	r7, #8
 8020de8:	46bd      	mov	sp, r7
 8020dea:	bc90      	pop	{r4, r7}
 8020dec:	4770      	bx	lr

08020dee <_ZN8Iim4265215GetDegreeStackZEv>:

double Iim42652::GetDegreeStackZ()
{
 8020dee:	b490      	push	{r4, r7}
 8020df0:	b082      	sub	sp, #8
 8020df2:	af00      	add	r7, sp, #0
 8020df4:	6078      	str	r0, [r7, #4]
    return degree_stack_z_;
 8020df6:	687b      	ldr	r3, [r7, #4]
 8020df8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8020dfc:	ec44 3b17 	vmov	d7, r3, r4
}
 8020e00:	eeb0 0a47 	vmov.f32	s0, s14
 8020e04:	eef0 0a67 	vmov.f32	s1, s15
 8020e08:	3708      	adds	r7, #8
 8020e0a:	46bd      	mov	sp, r7
 8020e0c:	bc90      	pop	{r4, r7}
 8020e0e:	4770      	bx	lr

08020e10 <_ZN3LedC1Ev>:
#include "led.hpp"

Led::Led() : interrupt_count_(0)
 8020e10:	b480      	push	{r7}
 8020e12:	b083      	sub	sp, #12
 8020e14:	af00      	add	r7, sp, #0
 8020e16:	6078      	str	r0, [r7, #4]
           , interrupt_timer_(0) {}
 8020e18:	687b      	ldr	r3, [r7, #4]
 8020e1a:	2200      	movs	r2, #0
 8020e1c:	701a      	strb	r2, [r3, #0]
 8020e1e:	687b      	ldr	r3, [r7, #4]
 8020e20:	2200      	movs	r2, #0
 8020e22:	705a      	strb	r2, [r3, #1]
 8020e24:	687b      	ldr	r3, [r7, #4]
 8020e26:	4618      	mov	r0, r3
 8020e28:	370c      	adds	r7, #12
 8020e2a:	46bd      	mov	sp, r7
 8020e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e30:	4770      	bx	lr
	...

08020e34 <_ZN3Led10ColorOrderEc>:

void Led::ColorOrder(char color)
{
 8020e34:	b580      	push	{r7, lr}
 8020e36:	b082      	sub	sp, #8
 8020e38:	af00      	add	r7, sp, #0
 8020e3a:	6078      	str	r0, [r7, #4]
 8020e3c:	460b      	mov	r3, r1
 8020e3e:	70fb      	strb	r3, [r7, #3]
    switch(color)
 8020e40:	78fb      	ldrb	r3, [r7, #3]
 8020e42:	3b42      	subs	r3, #66	; 0x42
 8020e44:	2b17      	cmp	r3, #23
 8020e46:	f200 80b8 	bhi.w	8020fba <_ZN3Led10ColorOrderEc+0x186>
 8020e4a:	a201      	add	r2, pc, #4	; (adr r2, 8020e50 <_ZN3Led10ColorOrderEc+0x1c>)
 8020e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020e50:	08020efd 	.word	0x08020efd
 8020e54:	08020f49 	.word	0x08020f49
 8020e58:	08020fbb 	.word	0x08020fbb
 8020e5c:	08020fbb 	.word	0x08020fbb
 8020e60:	08020fbb 	.word	0x08020fbb
 8020e64:	08020ed7 	.word	0x08020ed7
 8020e68:	08020fbb 	.word	0x08020fbb
 8020e6c:	08020fbb 	.word	0x08020fbb
 8020e70:	08020fbb 	.word	0x08020fbb
 8020e74:	08020fbb 	.word	0x08020fbb
 8020e78:	08020fbb 	.word	0x08020fbb
 8020e7c:	08020f6f 	.word	0x08020f6f
 8020e80:	08020fbb 	.word	0x08020fbb
 8020e84:	08020fbb 	.word	0x08020fbb
 8020e88:	08020fbb 	.word	0x08020fbb
 8020e8c:	08020fbb 	.word	0x08020fbb
 8020e90:	08020eb1 	.word	0x08020eb1
 8020e94:	08020fbb 	.word	0x08020fbb
 8020e98:	08020fbb 	.word	0x08020fbb
 8020e9c:	08020fbb 	.word	0x08020fbb
 8020ea0:	08020fbb 	.word	0x08020fbb
 8020ea4:	08020f95 	.word	0x08020f95
 8020ea8:	08020fbb 	.word	0x08020fbb
 8020eac:	08020f23 	.word	0x08020f23
    {
        case 'R': R_ON;  G_OFF; B_OFF; break;
 8020eb0:	2200      	movs	r2, #0
 8020eb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020eb6:	484c      	ldr	r0, [pc, #304]	; (8020fe8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020eb8:	f003 f996 	bl	80241e8 <HAL_GPIO_WritePin>
 8020ebc:	2201      	movs	r2, #1
 8020ebe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020ec2:	4849      	ldr	r0, [pc, #292]	; (8020fe8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020ec4:	f003 f990 	bl	80241e8 <HAL_GPIO_WritePin>
 8020ec8:	2201      	movs	r2, #1
 8020eca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020ece:	4846      	ldr	r0, [pc, #280]	; (8020fe8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020ed0:	f003 f98a 	bl	80241e8 <HAL_GPIO_WritePin>
 8020ed4:	e084      	b.n	8020fe0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'G': R_OFF; G_ON;  B_OFF; break;
 8020ed6:	2201      	movs	r2, #1
 8020ed8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020edc:	4842      	ldr	r0, [pc, #264]	; (8020fe8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020ede:	f003 f983 	bl	80241e8 <HAL_GPIO_WritePin>
 8020ee2:	2200      	movs	r2, #0
 8020ee4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020ee8:	483f      	ldr	r0, [pc, #252]	; (8020fe8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020eea:	f003 f97d 	bl	80241e8 <HAL_GPIO_WritePin>
 8020eee:	2201      	movs	r2, #1
 8020ef0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020ef4:	483c      	ldr	r0, [pc, #240]	; (8020fe8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020ef6:	f003 f977 	bl	80241e8 <HAL_GPIO_WritePin>
 8020efa:	e071      	b.n	8020fe0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'B': R_OFF; G_OFF; B_ON;  break;
 8020efc:	2201      	movs	r2, #1
 8020efe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020f02:	4839      	ldr	r0, [pc, #228]	; (8020fe8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020f04:	f003 f970 	bl	80241e8 <HAL_GPIO_WritePin>
 8020f08:	2201      	movs	r2, #1
 8020f0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020f0e:	4836      	ldr	r0, [pc, #216]	; (8020fe8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020f10:	f003 f96a 	bl	80241e8 <HAL_GPIO_WritePin>
 8020f14:	2200      	movs	r2, #0
 8020f16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020f1a:	4833      	ldr	r0, [pc, #204]	; (8020fe8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020f1c:	f003 f964 	bl	80241e8 <HAL_GPIO_WritePin>
 8020f20:	e05e      	b.n	8020fe0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'Y': R_ON;  G_ON;  B_OFF; break;
 8020f22:	2200      	movs	r2, #0
 8020f24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020f28:	482f      	ldr	r0, [pc, #188]	; (8020fe8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020f2a:	f003 f95d 	bl	80241e8 <HAL_GPIO_WritePin>
 8020f2e:	2200      	movs	r2, #0
 8020f30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020f34:	482c      	ldr	r0, [pc, #176]	; (8020fe8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020f36:	f003 f957 	bl	80241e8 <HAL_GPIO_WritePin>
 8020f3a:	2201      	movs	r2, #1
 8020f3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020f40:	4829      	ldr	r0, [pc, #164]	; (8020fe8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020f42:	f003 f951 	bl	80241e8 <HAL_GPIO_WritePin>
 8020f46:	e04b      	b.n	8020fe0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'C': R_OFF; G_ON;  B_ON;  break;
 8020f48:	2201      	movs	r2, #1
 8020f4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020f4e:	4826      	ldr	r0, [pc, #152]	; (8020fe8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020f50:	f003 f94a 	bl	80241e8 <HAL_GPIO_WritePin>
 8020f54:	2200      	movs	r2, #0
 8020f56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020f5a:	4823      	ldr	r0, [pc, #140]	; (8020fe8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020f5c:	f003 f944 	bl	80241e8 <HAL_GPIO_WritePin>
 8020f60:	2200      	movs	r2, #0
 8020f62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020f66:	4820      	ldr	r0, [pc, #128]	; (8020fe8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020f68:	f003 f93e 	bl	80241e8 <HAL_GPIO_WritePin>
 8020f6c:	e038      	b.n	8020fe0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'M': R_ON;  G_OFF; B_ON;  break;
 8020f6e:	2200      	movs	r2, #0
 8020f70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020f74:	481c      	ldr	r0, [pc, #112]	; (8020fe8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020f76:	f003 f937 	bl	80241e8 <HAL_GPIO_WritePin>
 8020f7a:	2201      	movs	r2, #1
 8020f7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020f80:	4819      	ldr	r0, [pc, #100]	; (8020fe8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020f82:	f003 f931 	bl	80241e8 <HAL_GPIO_WritePin>
 8020f86:	2200      	movs	r2, #0
 8020f88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020f8c:	4816      	ldr	r0, [pc, #88]	; (8020fe8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020f8e:	f003 f92b 	bl	80241e8 <HAL_GPIO_WritePin>
 8020f92:	e025      	b.n	8020fe0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'W': R_ON;  G_ON;  B_ON;  break;
 8020f94:	2200      	movs	r2, #0
 8020f96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020f9a:	4813      	ldr	r0, [pc, #76]	; (8020fe8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020f9c:	f003 f924 	bl	80241e8 <HAL_GPIO_WritePin>
 8020fa0:	2200      	movs	r2, #0
 8020fa2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020fa6:	4810      	ldr	r0, [pc, #64]	; (8020fe8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020fa8:	f003 f91e 	bl	80241e8 <HAL_GPIO_WritePin>
 8020fac:	2200      	movs	r2, #0
 8020fae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020fb2:	480d      	ldr	r0, [pc, #52]	; (8020fe8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020fb4:	f003 f918 	bl	80241e8 <HAL_GPIO_WritePin>
 8020fb8:	e012      	b.n	8020fe0 <_ZN3Led10ColorOrderEc+0x1ac>
        case 'X': // fall through
        default:  R_OFF; G_OFF; B_OFF; break;
 8020fba:	2201      	movs	r2, #1
 8020fbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8020fc0:	4809      	ldr	r0, [pc, #36]	; (8020fe8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020fc2:	f003 f911 	bl	80241e8 <HAL_GPIO_WritePin>
 8020fc6:	2201      	movs	r2, #1
 8020fc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8020fcc:	4806      	ldr	r0, [pc, #24]	; (8020fe8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020fce:	f003 f90b 	bl	80241e8 <HAL_GPIO_WritePin>
 8020fd2:	2201      	movs	r2, #1
 8020fd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8020fd8:	4803      	ldr	r0, [pc, #12]	; (8020fe8 <_ZN3Led10ColorOrderEc+0x1b4>)
 8020fda:	f003 f905 	bl	80241e8 <HAL_GPIO_WritePin>
 8020fde:	bf00      	nop
    }
}
 8020fe0:	bf00      	nop
 8020fe2:	3708      	adds	r7, #8
 8020fe4:	46bd      	mov	sp, r7
 8020fe6:	bd80      	pop	{r7, pc}
 8020fe8:	40020800 	.word	0x40020800

08020fec <_ZN3Led5BlinkEhcc>:

void Led::Blink(uint8_t times, char color_1, char color_2)
{
 8020fec:	b580      	push	{r7, lr}
 8020fee:	b084      	sub	sp, #16
 8020ff0:	af00      	add	r7, sp, #0
 8020ff2:	6078      	str	r0, [r7, #4]
 8020ff4:	4608      	mov	r0, r1
 8020ff6:	4611      	mov	r1, r2
 8020ff8:	461a      	mov	r2, r3
 8020ffa:	4603      	mov	r3, r0
 8020ffc:	70fb      	strb	r3, [r7, #3]
 8020ffe:	460b      	mov	r3, r1
 8021000:	70bb      	strb	r3, [r7, #2]
 8021002:	4613      	mov	r3, r2
 8021004:	707b      	strb	r3, [r7, #1]
    for(uint8_t i = 0; i < times; i++)
 8021006:	2300      	movs	r3, #0
 8021008:	73fb      	strb	r3, [r7, #15]
 802100a:	7bfa      	ldrb	r2, [r7, #15]
 802100c:	78fb      	ldrb	r3, [r7, #3]
 802100e:	429a      	cmp	r2, r3
 8021010:	d215      	bcs.n	802103e <_ZN3Led5BlinkEhcc+0x52>
    {
        ColorOrder(color_1);
 8021012:	78bb      	ldrb	r3, [r7, #2]
 8021014:	4619      	mov	r1, r3
 8021016:	6878      	ldr	r0, [r7, #4]
 8021018:	f7ff ff0c 	bl	8020e34 <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 802101c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021020:	f001 fe9a 	bl	8022d58 <HAL_Delay>
        ColorOrder(color_2);
 8021024:	787b      	ldrb	r3, [r7, #1]
 8021026:	4619      	mov	r1, r3
 8021028:	6878      	ldr	r0, [r7, #4]
 802102a:	f7ff ff03 	bl	8020e34 <_ZN3Led10ColorOrderEc>
        HAL_Delay(BLINK_INTERVAL_MS);
 802102e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8021032:	f001 fe91 	bl	8022d58 <HAL_Delay>
    for(uint8_t i = 0; i < times; i++)
 8021036:	7bfb      	ldrb	r3, [r7, #15]
 8021038:	3301      	adds	r3, #1
 802103a:	73fb      	strb	r3, [r7, #15]
 802103c:	e7e5      	b.n	802100a <_ZN3Led5BlinkEhcc+0x1e>
    }
}
 802103e:	bf00      	nop
 8021040:	3710      	adds	r7, #16
 8021042:	46bd      	mov	sp, r7
 8021044:	bd80      	pop	{r7, pc}

08021046 <_ZN10LineSensorC1Ev>:
#include "line_sensor.hpp"

LineSensor::LineSensor() : line_sensors_buff_{0}
 8021046:	b580      	push	{r7, lr}
 8021048:	b082      	sub	sp, #8
 802104a:	af00      	add	r7, sp, #0
 802104c:	6078      	str	r0, [r7, #4]
                         , consecutive_line_sensors_buff_{{0}}
                         , max_line_sensors_valu_{0}
                         , min_line_sensors_valu_{0}
                         , line_sensors_valu_{0}
                         , emergency_stop_flag_(false) {}
 802104e:	687b      	ldr	r3, [r7, #4]
 8021050:	461a      	mov	r2, r3
 8021052:	2300      	movs	r3, #0
 8021054:	6013      	str	r3, [r2, #0]
 8021056:	6053      	str	r3, [r2, #4]
 8021058:	6093      	str	r3, [r2, #8]
 802105a:	60d3      	str	r3, [r2, #12]
 802105c:	6113      	str	r3, [r2, #16]
 802105e:	6153      	str	r3, [r2, #20]
 8021060:	6193      	str	r3, [r2, #24]
 8021062:	687b      	ldr	r3, [r7, #4]
 8021064:	331c      	adds	r3, #28
 8021066:	f44f 728c 	mov.w	r2, #280	; 0x118
 802106a:	2100      	movs	r1, #0
 802106c:	4618      	mov	r0, r3
 802106e:	f004 fef0 	bl	8025e52 <memset>
 8021072:	687b      	ldr	r3, [r7, #4]
 8021074:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8021078:	2200      	movs	r2, #0
 802107a:	601a      	str	r2, [r3, #0]
 802107c:	605a      	str	r2, [r3, #4]
 802107e:	609a      	str	r2, [r3, #8]
 8021080:	60da      	str	r2, [r3, #12]
 8021082:	611a      	str	r2, [r3, #16]
 8021084:	615a      	str	r2, [r3, #20]
 8021086:	619a      	str	r2, [r3, #24]
 8021088:	687b      	ldr	r3, [r7, #4]
 802108a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 802108e:	2200      	movs	r2, #0
 8021090:	601a      	str	r2, [r3, #0]
 8021092:	605a      	str	r2, [r3, #4]
 8021094:	609a      	str	r2, [r3, #8]
 8021096:	60da      	str	r2, [r3, #12]
 8021098:	611a      	str	r2, [r3, #16]
 802109a:	615a      	str	r2, [r3, #20]
 802109c:	619a      	str	r2, [r3, #24]
 802109e:	687b      	ldr	r3, [r7, #4]
 80210a0:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80210a4:	2200      	movs	r2, #0
 80210a6:	601a      	str	r2, [r3, #0]
 80210a8:	605a      	str	r2, [r3, #4]
 80210aa:	609a      	str	r2, [r3, #8]
 80210ac:	60da      	str	r2, [r3, #12]
 80210ae:	611a      	str	r2, [r3, #16]
 80210b0:	615a      	str	r2, [r3, #20]
 80210b2:	619a      	str	r2, [r3, #24]
 80210b4:	687b      	ldr	r3, [r7, #4]
 80210b6:	2200      	movs	r2, #0
 80210b8:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 80210bc:	687b      	ldr	r3, [r7, #4]
 80210be:	4618      	mov	r0, r3
 80210c0:	3708      	adds	r7, #8
 80210c2:	46bd      	mov	sp, r7
 80210c4:	bd80      	pop	{r7, pc}
	...

080210c8 <_ZN10LineSensor4InitEv>:

void LineSensor::Init()
{
 80210c8:	b580      	push	{r7, lr}
 80210ca:	b082      	sub	sp, #8
 80210cc:	af00      	add	r7, sp, #0
 80210ce:	6078      	str	r0, [r7, #4]
    if(HAL_ADC_Start_DMA(&hadc1, (uint32_t *)line_sensors_buff_, NUM_OF_LINE_SENSORS) != HAL_OK)
 80210d0:	687b      	ldr	r3, [r7, #4]
 80210d2:	220e      	movs	r2, #14
 80210d4:	4619      	mov	r1, r3
 80210d6:	4815      	ldr	r0, [pc, #84]	; (802112c <_ZN10LineSensor4InitEv+0x64>)
 80210d8:	f001 fea4 	bl	8022e24 <HAL_ADC_Start_DMA>
 80210dc:	4603      	mov	r3, r0
 80210de:	2b00      	cmp	r3, #0
 80210e0:	bf14      	ite	ne
 80210e2:	2301      	movne	r3, #1
 80210e4:	2300      	moveq	r3, #0
 80210e6:	b2db      	uxtb	r3, r3
 80210e8:	2b00      	cmp	r3, #0
 80210ea:	d004      	beq.n	80210f6 <_ZN10LineSensor4InitEv+0x2e>
    {
#ifdef DEBUG_MODE
        g_error_handler_adc1 = true;
 80210ec:	4b10      	ldr	r3, [pc, #64]	; (8021130 <_ZN10LineSensor4InitEv+0x68>)
 80210ee:	2201      	movs	r2, #1
 80210f0:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 80210f2:	f000 ff1d 	bl	8021f30 <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1) != HAL_OK)
 80210f6:	2100      	movs	r1, #0
 80210f8:	480e      	ldr	r0, [pc, #56]	; (8021134 <_ZN10LineSensor4InitEv+0x6c>)
 80210fa:	f003 fecd 	bl	8024e98 <HAL_TIM_PWM_Start>
 80210fe:	4603      	mov	r3, r0
 8021100:	2b00      	cmp	r3, #0
 8021102:	bf14      	ite	ne
 8021104:	2301      	movne	r3, #1
 8021106:	2300      	moveq	r3, #0
 8021108:	b2db      	uxtb	r3, r3
 802110a:	2b00      	cmp	r3, #0
 802110c:	d004      	beq.n	8021118 <_ZN10LineSensor4InitEv+0x50>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim11 = true;
 802110e:	4b0a      	ldr	r3, [pc, #40]	; (8021138 <_ZN10LineSensor4InitEv+0x70>)
 8021110:	2201      	movs	r2, #1
 8021112:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8021114:	f000 ff0c 	bl	8021f30 <Error_Handler>
    }

    __HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, LINE_SENSORS_LED_COMPARE);
 8021118:	4b06      	ldr	r3, [pc, #24]	; (8021134 <_ZN10LineSensor4InitEv+0x6c>)
 802111a:	681b      	ldr	r3, [r3, #0]
 802111c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8021120:	635a      	str	r2, [r3, #52]	; 0x34
}
 8021122:	bf00      	nop
 8021124:	3708      	adds	r7, #8
 8021126:	46bd      	mov	sp, r7
 8021128:	bd80      	pop	{r7, pc}
 802112a:	bf00      	nop
 802112c:	20011160 	.word	0x20011160
 8021130:	20000204 	.word	0x20000204
 8021134:	200111a8 	.word	0x200111a8
 8021138:	20000205 	.word	0x20000205

0802113c <_ZN10LineSensor20StoreConsecutiveBuffEv>:

void LineSensor::StoreConsecutiveBuff()
{
 802113c:	b480      	push	{r7}
 802113e:	b085      	sub	sp, #20
 8021140:	af00      	add	r7, sp, #0
 8021142:	6078      	str	r0, [r7, #4]
    static uint8_t times = 0;

    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021144:	2300      	movs	r3, #0
 8021146:	60fb      	str	r3, [r7, #12]
 8021148:	68fb      	ldr	r3, [r7, #12]
 802114a:	2b0d      	cmp	r3, #13
 802114c:	dc16      	bgt.n	802117c <_ZN10LineSensor20StoreConsecutiveBuffEv+0x40>
    {
        consecutive_line_sensors_buff_[times][i] = line_sensors_buff_[i];
 802114e:	4b15      	ldr	r3, [pc, #84]	; (80211a4 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021150:	781b      	ldrb	r3, [r3, #0]
 8021152:	4619      	mov	r1, r3
 8021154:	687b      	ldr	r3, [r7, #4]
 8021156:	68fa      	ldr	r2, [r7, #12]
 8021158:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 802115c:	687a      	ldr	r2, [r7, #4]
 802115e:	460b      	mov	r3, r1
 8021160:	00db      	lsls	r3, r3, #3
 8021162:	1a5b      	subs	r3, r3, r1
 8021164:	005b      	lsls	r3, r3, #1
 8021166:	68f9      	ldr	r1, [r7, #12]
 8021168:	440b      	add	r3, r1
 802116a:	330c      	adds	r3, #12
 802116c:	005b      	lsls	r3, r3, #1
 802116e:	4413      	add	r3, r2
 8021170:	4602      	mov	r2, r0
 8021172:	809a      	strh	r2, [r3, #4]
    for(int i = 0; i < NUM_OF_LINE_SENSORS; i++)
 8021174:	68fb      	ldr	r3, [r7, #12]
 8021176:	3301      	adds	r3, #1
 8021178:	60fb      	str	r3, [r7, #12]
 802117a:	e7e5      	b.n	8021148 <_ZN10LineSensor20StoreConsecutiveBuffEv+0xc>
    }

    times++;
 802117c:	4b09      	ldr	r3, [pc, #36]	; (80211a4 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 802117e:	781b      	ldrb	r3, [r3, #0]
 8021180:	3301      	adds	r3, #1
 8021182:	b2da      	uxtb	r2, r3
 8021184:	4b07      	ldr	r3, [pc, #28]	; (80211a4 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021186:	701a      	strb	r2, [r3, #0]
    if(times >= CONSECUTIVE_TIMES) times = 0;
 8021188:	4b06      	ldr	r3, [pc, #24]	; (80211a4 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 802118a:	781b      	ldrb	r3, [r3, #0]
 802118c:	2b09      	cmp	r3, #9
 802118e:	d902      	bls.n	8021196 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x5a>
 8021190:	4b04      	ldr	r3, [pc, #16]	; (80211a4 <_ZN10LineSensor20StoreConsecutiveBuffEv+0x68>)
 8021192:	2200      	movs	r2, #0
 8021194:	701a      	strb	r2, [r3, #0]
}
 8021196:	bf00      	nop
 8021198:	3714      	adds	r7, #20
 802119a:	46bd      	mov	sp, r7
 802119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211a0:	4770      	bx	lr
 80211a2:	bf00      	nop
 80211a4:	200001fc 	.word	0x200001fc

080211a8 <_ZN9LineTraceC1EP10LineSensor>:
#include "line_trace.hpp"

LineTrace::LineTrace(LineSensor *line_sensor) : integral_error_(0)
 80211a8:	b480      	push	{r7}
 80211aa:	b083      	sub	sp, #12
 80211ac:	af00      	add	r7, sp, #0
 80211ae:	6078      	str	r0, [r7, #4]
 80211b0:	6039      	str	r1, [r7, #0]
 80211b2:	687b      	ldr	r3, [r7, #4]
 80211b4:	f04f 0200 	mov.w	r2, #0
 80211b8:	601a      	str	r2, [r3, #0]
{
    line_sensor_ = line_sensor;
 80211ba:	687b      	ldr	r3, [r7, #4]
 80211bc:	683a      	ldr	r2, [r7, #0]
 80211be:	605a      	str	r2, [r3, #4]
}
 80211c0:	687b      	ldr	r3, [r7, #4]
 80211c2:	4618      	mov	r0, r3
 80211c4:	370c      	adds	r7, #12
 80211c6:	46bd      	mov	sp, r7
 80211c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211cc:	4770      	bx	lr

080211ce <_ZN6LoggerC1Ev>:
#include "logger.hpp"
#include <math.h>
#include <string.h>

Logger::Logger() {}
 80211ce:	b580      	push	{r7, lr}
 80211d0:	b082      	sub	sp, #8
 80211d2:	af00      	add	r7, sp, #0
 80211d4:	6078      	str	r0, [r7, #4]
 80211d6:	687b      	ldr	r3, [r7, #4]
 80211d8:	33e8      	adds	r3, #232	; 0xe8
 80211da:	4618      	mov	r0, r3
 80211dc:	f7ff fd9c 	bl	8020d18 <_ZN7EncoderC1Ev>
 80211e0:	687b      	ldr	r3, [r7, #4]
 80211e2:	33f8      	adds	r3, #248	; 0xf8
 80211e4:	4618      	mov	r0, r3
 80211e6:	f7ff fde1 	bl	8020dac <_ZN8Iim42652C1Ev>
 80211ea:	687b      	ldr	r3, [r7, #4]
 80211ec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80211f0:	4618      	mov	r0, r3
 80211f2:	f000 ff33 	bl	802205c <_ZN10SideSensorC1Ev>
 80211f6:	687b      	ldr	r3, [r7, #4]
 80211f8:	4618      	mov	r0, r3
 80211fa:	3708      	adds	r7, #8
 80211fc:	46bd      	mov	sp, r7
 80211fe:	bd80      	pop	{r7, pc}

08021200 <_ZN7Logger2C1EP7EncoderP5FlashP3LedP8Iim42652P10SideSensor>:
#include "logger2.hpp"
#include "declare_extern.h"
#include <math.h>

Logger2::Logger2(Encoder *encoder,
 8021200:	b480      	push	{r7}
 8021202:	b085      	sub	sp, #20
 8021204:	af00      	add	r7, sp, #0
 8021206:	60f8      	str	r0, [r7, #12]
 8021208:	60b9      	str	r1, [r7, #8]
 802120a:	607a      	str	r2, [r7, #4]
 802120c:	603b      	str	r3, [r7, #0]
                   , success_emergency_code_store_(false)
                   , logging_radian_buff_(0)
                   , loading_now_address_(0)
                   , uncorrected_address_buff_(0)
                   , logging_now_address_(0)
                   , target_velocity_(MIN_VELOCITY)
 802120e:	68fb      	ldr	r3, [r7, #12]
 8021210:	2200      	movs	r2, #0
 8021212:	701a      	strb	r2, [r3, #0]
 8021214:	68fb      	ldr	r3, [r7, #12]
 8021216:	2200      	movs	r2, #0
 8021218:	705a      	strb	r2, [r3, #1]
 802121a:	68fb      	ldr	r3, [r7, #12]
 802121c:	f04f 0200 	mov.w	r2, #0
 8021220:	605a      	str	r2, [r3, #4]
 8021222:	68fb      	ldr	r3, [r7, #12]
 8021224:	2200      	movs	r2, #0
 8021226:	811a      	strh	r2, [r3, #8]
 8021228:	68fb      	ldr	r3, [r7, #12]
 802122a:	2200      	movs	r2, #0
 802122c:	815a      	strh	r2, [r3, #10]
 802122e:	68fb      	ldr	r3, [r7, #12]
 8021230:	2200      	movs	r2, #0
 8021232:	819a      	strh	r2, [r3, #12]
 8021234:	68fb      	ldr	r3, [r7, #12]
 8021236:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 802123a:	611a      	str	r2, [r3, #16]
{
    encoder_ = encoder;
 802123c:	68fb      	ldr	r3, [r7, #12]
 802123e:	68ba      	ldr	r2, [r7, #8]
 8021240:	615a      	str	r2, [r3, #20]
    flash_ = flash;
 8021242:	68fb      	ldr	r3, [r7, #12]
 8021244:	687a      	ldr	r2, [r7, #4]
 8021246:	619a      	str	r2, [r3, #24]
    led_ = led;
 8021248:	68fb      	ldr	r3, [r7, #12]
 802124a:	683a      	ldr	r2, [r7, #0]
 802124c:	61da      	str	r2, [r3, #28]
    iim_42652_ = iim_42652;
 802124e:	68fb      	ldr	r3, [r7, #12]
 8021250:	69ba      	ldr	r2, [r7, #24]
 8021252:	621a      	str	r2, [r3, #32]
    side_sensor_ = side_sensor;
 8021254:	68fb      	ldr	r3, [r7, #12]
 8021256:	69fa      	ldr	r2, [r7, #28]
 8021258:	625a      	str	r2, [r3, #36]	; 0x24
}
 802125a:	68fb      	ldr	r3, [r7, #12]
 802125c:	4618      	mov	r0, r3
 802125e:	3714      	adds	r7, #20
 8021260:	46bd      	mov	sp, r7
 8021262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021266:	4770      	bx	lr

08021268 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8021268:	b580      	push	{r7, lr}
 802126a:	b082      	sub	sp, #8
 802126c:	af00      	add	r7, sp, #0
 802126e:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 8021270:	687b      	ldr	r3, [r7, #4]
 8021272:	681b      	ldr	r3, [r3, #0]
 8021274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8021278:	d101      	bne.n	802127e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    InterruptTim2();
 802127a:	f001 fc49 	bl	8022b10 <InterruptTim2>
  }
  if(htim->Instance == TIM6)
 802127e:	687b      	ldr	r3, [r7, #4]
 8021280:	681b      	ldr	r3, [r3, #0]
 8021282:	4a08      	ldr	r2, [pc, #32]	; (80212a4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8021284:	4293      	cmp	r3, r2
 8021286:	d101      	bne.n	802128c <HAL_TIM_PeriodElapsedCallback+0x24>
  {
    InterruptTim6();
 8021288:	f001 fc32 	bl	8022af0 <InterruptTim6>
  }
  if(htim->Instance == TIM7)
 802128c:	687b      	ldr	r3, [r7, #4]
 802128e:	681b      	ldr	r3, [r3, #0]
 8021290:	4a05      	ldr	r2, [pc, #20]	; (80212a8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8021292:	4293      	cmp	r3, r2
 8021294:	d101      	bne.n	802129a <HAL_TIM_PeriodElapsedCallback+0x32>
  {
    InterruptTim7();
 8021296:	f001 fc1b 	bl	8022ad0 <InterruptTim7>
  }
}
 802129a:	bf00      	nop
 802129c:	3708      	adds	r7, #8
 802129e:	46bd      	mov	sp, r7
 80212a0:	bd80      	pop	{r7, pc}
 80212a2:	bf00      	nop
 80212a4:	40001000 	.word	0x40001000
 80212a8:	40001400 	.word	0x40001400

080212ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80212ac:	b580      	push	{r7, lr}
 80212ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80212b0:	f001 fce0 	bl	8022c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80212b4:	f000 f824 	bl	8021300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80212b8:	f000 fd6a 	bl	8021d90 <MX_GPIO_Init>
  MX_DMA_Init();
 80212bc:	f000 fd48 	bl	8021d50 <MX_DMA_Init>
  MX_ADC1_Init();
 80212c0:	f000 f888 	bl	80213d4 <MX_ADC1_Init>
  MX_I2C2_Init();
 80212c4:	f000 f98e 	bl	80215e4 <MX_I2C2_Init>
  MX_SPI3_Init();
 80212c8:	f000 f9ba 	bl	8021640 <MX_SPI3_Init>
  MX_TIM1_Init();
 80212cc:	f000 f9ee 	bl	80216ac <MX_TIM1_Init>
  MX_TIM3_Init();
 80212d0:	f000 faca 	bl	8021868 <MX_TIM3_Init>
  MX_TIM4_Init();
 80212d4:	f000 fb42 	bl	802195c <MX_TIM4_Init>
  MX_TIM6_Init();
 80212d8:	f000 fbe2 	bl	8021aa0 <MX_TIM6_Init>
  MX_TIM7_Init();
 80212dc:	f000 fc16 	bl	8021b0c <MX_TIM7_Init>
  MX_TIM8_Init();
 80212e0:	f000 fc4a 	bl	8021b78 <MX_TIM8_Init>
  MX_TIM11_Init();
 80212e4:	f000 fca0 	bl	8021c28 <MX_TIM11_Init>
  MX_TIM12_Init();
 80212e8:	f000 fcec 	bl	8021cc4 <MX_TIM12_Init>
  MX_TIM2_Init();
 80212ec:	f000 fa6e 	bl	80217cc <MX_TIM2_Init>
  MX_TIM5_Init();
 80212f0:	f000 fb88 	bl	8021a04 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  Init();
 80212f4:	f001 fbe2 	bl	8022abc <Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
#ifdef TEST_MODE
    Loop();
 80212f8:	f001 fc18 	bl	8022b2c <Loop>
 80212fc:	e7fc      	b.n	80212f8 <main+0x4c>
	...

08021300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8021300:	b580      	push	{r7, lr}
 8021302:	b094      	sub	sp, #80	; 0x50
 8021304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8021306:	f107 0320 	add.w	r3, r7, #32
 802130a:	2230      	movs	r2, #48	; 0x30
 802130c:	2100      	movs	r1, #0
 802130e:	4618      	mov	r0, r3
 8021310:	f004 fd9f 	bl	8025e52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8021314:	f107 030c 	add.w	r3, r7, #12
 8021318:	2200      	movs	r2, #0
 802131a:	601a      	str	r2, [r3, #0]
 802131c:	605a      	str	r2, [r3, #4]
 802131e:	609a      	str	r2, [r3, #8]
 8021320:	60da      	str	r2, [r3, #12]
 8021322:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8021324:	2300      	movs	r3, #0
 8021326:	60bb      	str	r3, [r7, #8]
 8021328:	4b28      	ldr	r3, [pc, #160]	; (80213cc <SystemClock_Config+0xcc>)
 802132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802132c:	4a27      	ldr	r2, [pc, #156]	; (80213cc <SystemClock_Config+0xcc>)
 802132e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021332:	6413      	str	r3, [r2, #64]	; 0x40
 8021334:	4b25      	ldr	r3, [pc, #148]	; (80213cc <SystemClock_Config+0xcc>)
 8021336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802133c:	60bb      	str	r3, [r7, #8]
 802133e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8021340:	2300      	movs	r3, #0
 8021342:	607b      	str	r3, [r7, #4]
 8021344:	4b22      	ldr	r3, [pc, #136]	; (80213d0 <SystemClock_Config+0xd0>)
 8021346:	681b      	ldr	r3, [r3, #0]
 8021348:	4a21      	ldr	r2, [pc, #132]	; (80213d0 <SystemClock_Config+0xd0>)
 802134a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802134e:	6013      	str	r3, [r2, #0]
 8021350:	4b1f      	ldr	r3, [pc, #124]	; (80213d0 <SystemClock_Config+0xd0>)
 8021352:	681b      	ldr	r3, [r3, #0]
 8021354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8021358:	607b      	str	r3, [r7, #4]
 802135a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 802135c:	2301      	movs	r3, #1
 802135e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8021360:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8021364:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8021366:	2302      	movs	r3, #2
 8021368:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 802136a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802136e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8021370:	2306      	movs	r3, #6
 8021372:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8021374:	23a8      	movs	r3, #168	; 0xa8
 8021376:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8021378:	2302      	movs	r3, #2
 802137a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 802137c:	2304      	movs	r3, #4
 802137e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8021380:	f107 0320 	add.w	r3, r7, #32
 8021384:	4618      	mov	r0, r3
 8021386:	f003 f881 	bl	802448c <HAL_RCC_OscConfig>
 802138a:	4603      	mov	r3, r0
 802138c:	2b00      	cmp	r3, #0
 802138e:	d001      	beq.n	8021394 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8021390:	f000 fdce 	bl	8021f30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8021394:	230f      	movs	r3, #15
 8021396:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8021398:	2302      	movs	r3, #2
 802139a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 802139c:	2300      	movs	r3, #0
 802139e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80213a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80213a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80213a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80213aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80213ac:	f107 030c 	add.w	r3, r7, #12
 80213b0:	2105      	movs	r1, #5
 80213b2:	4618      	mov	r0, r3
 80213b4:	f003 fada 	bl	802496c <HAL_RCC_ClockConfig>
 80213b8:	4603      	mov	r3, r0
 80213ba:	2b00      	cmp	r3, #0
 80213bc:	d001      	beq.n	80213c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80213be:	f000 fdb7 	bl	8021f30 <Error_Handler>
  }
}
 80213c2:	bf00      	nop
 80213c4:	3750      	adds	r7, #80	; 0x50
 80213c6:	46bd      	mov	sp, r7
 80213c8:	bd80      	pop	{r7, pc}
 80213ca:	bf00      	nop
 80213cc:	40023800 	.word	0x40023800
 80213d0:	40007000 	.word	0x40007000

080213d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80213d4:	b580      	push	{r7, lr}
 80213d6:	b084      	sub	sp, #16
 80213d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80213da:	463b      	mov	r3, r7
 80213dc:	2200      	movs	r2, #0
 80213de:	601a      	str	r2, [r3, #0]
 80213e0:	605a      	str	r2, [r3, #4]
 80213e2:	609a      	str	r2, [r3, #8]
 80213e4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80213e6:	4b7c      	ldr	r3, [pc, #496]	; (80215d8 <MX_ADC1_Init+0x204>)
 80213e8:	4a7c      	ldr	r2, [pc, #496]	; (80215dc <MX_ADC1_Init+0x208>)
 80213ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80213ec:	4b7a      	ldr	r3, [pc, #488]	; (80215d8 <MX_ADC1_Init+0x204>)
 80213ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80213f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80213f4:	4b78      	ldr	r3, [pc, #480]	; (80215d8 <MX_ADC1_Init+0x204>)
 80213f6:	2200      	movs	r2, #0
 80213f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80213fa:	4b77      	ldr	r3, [pc, #476]	; (80215d8 <MX_ADC1_Init+0x204>)
 80213fc:	2201      	movs	r2, #1
 80213fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8021400:	4b75      	ldr	r3, [pc, #468]	; (80215d8 <MX_ADC1_Init+0x204>)
 8021402:	2201      	movs	r2, #1
 8021404:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8021406:	4b74      	ldr	r3, [pc, #464]	; (80215d8 <MX_ADC1_Init+0x204>)
 8021408:	2200      	movs	r2, #0
 802140a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 802140e:	4b72      	ldr	r3, [pc, #456]	; (80215d8 <MX_ADC1_Init+0x204>)
 8021410:	2200      	movs	r2, #0
 8021412:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8021414:	4b70      	ldr	r3, [pc, #448]	; (80215d8 <MX_ADC1_Init+0x204>)
 8021416:	4a72      	ldr	r2, [pc, #456]	; (80215e0 <MX_ADC1_Init+0x20c>)
 8021418:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 802141a:	4b6f      	ldr	r3, [pc, #444]	; (80215d8 <MX_ADC1_Init+0x204>)
 802141c:	2200      	movs	r2, #0
 802141e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8021420:	4b6d      	ldr	r3, [pc, #436]	; (80215d8 <MX_ADC1_Init+0x204>)
 8021422:	220e      	movs	r2, #14
 8021424:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8021426:	4b6c      	ldr	r3, [pc, #432]	; (80215d8 <MX_ADC1_Init+0x204>)
 8021428:	2201      	movs	r2, #1
 802142a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 802142e:	4b6a      	ldr	r3, [pc, #424]	; (80215d8 <MX_ADC1_Init+0x204>)
 8021430:	2201      	movs	r2, #1
 8021432:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8021434:	4868      	ldr	r0, [pc, #416]	; (80215d8 <MX_ADC1_Init+0x204>)
 8021436:	f001 fcb1 	bl	8022d9c <HAL_ADC_Init>
 802143a:	4603      	mov	r3, r0
 802143c:	2b00      	cmp	r3, #0
 802143e:	d001      	beq.n	8021444 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8021440:	f000 fd76 	bl	8021f30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8021444:	2303      	movs	r3, #3
 8021446:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8021448:	2301      	movs	r3, #1
 802144a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 802144c:	2301      	movs	r3, #1
 802144e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021450:	463b      	mov	r3, r7
 8021452:	4619      	mov	r1, r3
 8021454:	4860      	ldr	r0, [pc, #384]	; (80215d8 <MX_ADC1_Init+0x204>)
 8021456:	f001 fdf5 	bl	8023044 <HAL_ADC_ConfigChannel>
 802145a:	4603      	mov	r3, r0
 802145c:	2b00      	cmp	r3, #0
 802145e:	d001      	beq.n	8021464 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8021460:	f000 fd66 	bl	8021f30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8021464:	2304      	movs	r3, #4
 8021466:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8021468:	2302      	movs	r3, #2
 802146a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802146c:	463b      	mov	r3, r7
 802146e:	4619      	mov	r1, r3
 8021470:	4859      	ldr	r0, [pc, #356]	; (80215d8 <MX_ADC1_Init+0x204>)
 8021472:	f001 fde7 	bl	8023044 <HAL_ADC_ConfigChannel>
 8021476:	4603      	mov	r3, r0
 8021478:	2b00      	cmp	r3, #0
 802147a:	d001      	beq.n	8021480 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 802147c:	f000 fd58 	bl	8021f30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8021480:	2305      	movs	r3, #5
 8021482:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8021484:	2303      	movs	r3, #3
 8021486:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021488:	463b      	mov	r3, r7
 802148a:	4619      	mov	r1, r3
 802148c:	4852      	ldr	r0, [pc, #328]	; (80215d8 <MX_ADC1_Init+0x204>)
 802148e:	f001 fdd9 	bl	8023044 <HAL_ADC_ConfigChannel>
 8021492:	4603      	mov	r3, r0
 8021494:	2b00      	cmp	r3, #0
 8021496:	d001      	beq.n	802149c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8021498:	f000 fd4a 	bl	8021f30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 802149c:	2306      	movs	r3, #6
 802149e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80214a0:	2304      	movs	r3, #4
 80214a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80214a4:	463b      	mov	r3, r7
 80214a6:	4619      	mov	r1, r3
 80214a8:	484b      	ldr	r0, [pc, #300]	; (80215d8 <MX_ADC1_Init+0x204>)
 80214aa:	f001 fdcb 	bl	8023044 <HAL_ADC_ConfigChannel>
 80214ae:	4603      	mov	r3, r0
 80214b0:	2b00      	cmp	r3, #0
 80214b2:	d001      	beq.n	80214b8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80214b4:	f000 fd3c 	bl	8021f30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80214b8:	2307      	movs	r3, #7
 80214ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80214bc:	2305      	movs	r3, #5
 80214be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80214c0:	463b      	mov	r3, r7
 80214c2:	4619      	mov	r1, r3
 80214c4:	4844      	ldr	r0, [pc, #272]	; (80215d8 <MX_ADC1_Init+0x204>)
 80214c6:	f001 fdbd 	bl	8023044 <HAL_ADC_ConfigChannel>
 80214ca:	4603      	mov	r3, r0
 80214cc:	2b00      	cmp	r3, #0
 80214ce:	d001      	beq.n	80214d4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80214d0:	f000 fd2e 	bl	8021f30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80214d4:	230e      	movs	r3, #14
 80214d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80214d8:	2306      	movs	r3, #6
 80214da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80214dc:	463b      	mov	r3, r7
 80214de:	4619      	mov	r1, r3
 80214e0:	483d      	ldr	r0, [pc, #244]	; (80215d8 <MX_ADC1_Init+0x204>)
 80214e2:	f001 fdaf 	bl	8023044 <HAL_ADC_ConfigChannel>
 80214e6:	4603      	mov	r3, r0
 80214e8:	2b00      	cmp	r3, #0
 80214ea:	d001      	beq.n	80214f0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80214ec:	f000 fd20 	bl	8021f30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80214f0:	230f      	movs	r3, #15
 80214f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80214f4:	2307      	movs	r3, #7
 80214f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80214f8:	463b      	mov	r3, r7
 80214fa:	4619      	mov	r1, r3
 80214fc:	4836      	ldr	r0, [pc, #216]	; (80215d8 <MX_ADC1_Init+0x204>)
 80214fe:	f001 fda1 	bl	8023044 <HAL_ADC_ConfigChannel>
 8021502:	4603      	mov	r3, r0
 8021504:	2b00      	cmp	r3, #0
 8021506:	d001      	beq.n	802150c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8021508:	f000 fd12 	bl	8021f30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 802150c:	230a      	movs	r3, #10
 802150e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8021510:	2308      	movs	r3, #8
 8021512:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021514:	463b      	mov	r3, r7
 8021516:	4619      	mov	r1, r3
 8021518:	482f      	ldr	r0, [pc, #188]	; (80215d8 <MX_ADC1_Init+0x204>)
 802151a:	f001 fd93 	bl	8023044 <HAL_ADC_ConfigChannel>
 802151e:	4603      	mov	r3, r0
 8021520:	2b00      	cmp	r3, #0
 8021522:	d001      	beq.n	8021528 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8021524:	f000 fd04 	bl	8021f30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8021528:	230b      	movs	r3, #11
 802152a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 802152c:	2309      	movs	r3, #9
 802152e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021530:	463b      	mov	r3, r7
 8021532:	4619      	mov	r1, r3
 8021534:	4828      	ldr	r0, [pc, #160]	; (80215d8 <MX_ADC1_Init+0x204>)
 8021536:	f001 fd85 	bl	8023044 <HAL_ADC_ConfigChannel>
 802153a:	4603      	mov	r3, r0
 802153c:	2b00      	cmp	r3, #0
 802153e:	d001      	beq.n	8021544 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8021540:	f000 fcf6 	bl	8021f30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8021544:	230c      	movs	r3, #12
 8021546:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8021548:	230a      	movs	r3, #10
 802154a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802154c:	463b      	mov	r3, r7
 802154e:	4619      	mov	r1, r3
 8021550:	4821      	ldr	r0, [pc, #132]	; (80215d8 <MX_ADC1_Init+0x204>)
 8021552:	f001 fd77 	bl	8023044 <HAL_ADC_ConfigChannel>
 8021556:	4603      	mov	r3, r0
 8021558:	2b00      	cmp	r3, #0
 802155a:	d001      	beq.n	8021560 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 802155c:	f000 fce8 	bl	8021f30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8021560:	230d      	movs	r3, #13
 8021562:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8021564:	230b      	movs	r3, #11
 8021566:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021568:	463b      	mov	r3, r7
 802156a:	4619      	mov	r1, r3
 802156c:	481a      	ldr	r0, [pc, #104]	; (80215d8 <MX_ADC1_Init+0x204>)
 802156e:	f001 fd69 	bl	8023044 <HAL_ADC_ConfigChannel>
 8021572:	4603      	mov	r3, r0
 8021574:	2b00      	cmp	r3, #0
 8021576:	d001      	beq.n	802157c <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8021578:	f000 fcda 	bl	8021f30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 802157c:	2302      	movs	r3, #2
 802157e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8021580:	230c      	movs	r3, #12
 8021582:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8021584:	463b      	mov	r3, r7
 8021586:	4619      	mov	r1, r3
 8021588:	4813      	ldr	r0, [pc, #76]	; (80215d8 <MX_ADC1_Init+0x204>)
 802158a:	f001 fd5b 	bl	8023044 <HAL_ADC_ConfigChannel>
 802158e:	4603      	mov	r3, r0
 8021590:	2b00      	cmp	r3, #0
 8021592:	d001      	beq.n	8021598 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8021594:	f000 fccc 	bl	8021f30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8021598:	2301      	movs	r3, #1
 802159a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 802159c:	230d      	movs	r3, #13
 802159e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80215a0:	463b      	mov	r3, r7
 80215a2:	4619      	mov	r1, r3
 80215a4:	480c      	ldr	r0, [pc, #48]	; (80215d8 <MX_ADC1_Init+0x204>)
 80215a6:	f001 fd4d 	bl	8023044 <HAL_ADC_ConfigChannel>
 80215aa:	4603      	mov	r3, r0
 80215ac:	2b00      	cmp	r3, #0
 80215ae:	d001      	beq.n	80215b4 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 80215b0:	f000 fcbe 	bl	8021f30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80215b4:	2300      	movs	r3, #0
 80215b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80215b8:	230e      	movs	r3, #14
 80215ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80215bc:	463b      	mov	r3, r7
 80215be:	4619      	mov	r1, r3
 80215c0:	4805      	ldr	r0, [pc, #20]	; (80215d8 <MX_ADC1_Init+0x204>)
 80215c2:	f001 fd3f 	bl	8023044 <HAL_ADC_ConfigChannel>
 80215c6:	4603      	mov	r3, r0
 80215c8:	2b00      	cmp	r3, #0
 80215ca:	d001      	beq.n	80215d0 <MX_ADC1_Init+0x1fc>
  {
    Error_Handler();
 80215cc:	f000 fcb0 	bl	8021f30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80215d0:	bf00      	nop
 80215d2:	3710      	adds	r7, #16
 80215d4:	46bd      	mov	sp, r7
 80215d6:	bd80      	pop	{r7, pc}
 80215d8:	20011160 	.word	0x20011160
 80215dc:	40012000 	.word	0x40012000
 80215e0:	0f000001 	.word	0x0f000001

080215e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80215e4:	b580      	push	{r7, lr}
 80215e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80215e8:	4b12      	ldr	r3, [pc, #72]	; (8021634 <MX_I2C2_Init+0x50>)
 80215ea:	4a13      	ldr	r2, [pc, #76]	; (8021638 <MX_I2C2_Init+0x54>)
 80215ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80215ee:	4b11      	ldr	r3, [pc, #68]	; (8021634 <MX_I2C2_Init+0x50>)
 80215f0:	4a12      	ldr	r2, [pc, #72]	; (802163c <MX_I2C2_Init+0x58>)
 80215f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80215f4:	4b0f      	ldr	r3, [pc, #60]	; (8021634 <MX_I2C2_Init+0x50>)
 80215f6:	2200      	movs	r2, #0
 80215f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80215fa:	4b0e      	ldr	r3, [pc, #56]	; (8021634 <MX_I2C2_Init+0x50>)
 80215fc:	2200      	movs	r2, #0
 80215fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8021600:	4b0c      	ldr	r3, [pc, #48]	; (8021634 <MX_I2C2_Init+0x50>)
 8021602:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8021606:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8021608:	4b0a      	ldr	r3, [pc, #40]	; (8021634 <MX_I2C2_Init+0x50>)
 802160a:	2200      	movs	r2, #0
 802160c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 802160e:	4b09      	ldr	r3, [pc, #36]	; (8021634 <MX_I2C2_Init+0x50>)
 8021610:	2200      	movs	r2, #0
 8021612:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8021614:	4b07      	ldr	r3, [pc, #28]	; (8021634 <MX_I2C2_Init+0x50>)
 8021616:	2200      	movs	r2, #0
 8021618:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 802161a:	4b06      	ldr	r3, [pc, #24]	; (8021634 <MX_I2C2_Init+0x50>)
 802161c:	2200      	movs	r2, #0
 802161e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8021620:	4804      	ldr	r0, [pc, #16]	; (8021634 <MX_I2C2_Init+0x50>)
 8021622:	f002 fdfb 	bl	802421c <HAL_I2C_Init>
 8021626:	4603      	mov	r3, r0
 8021628:	2b00      	cmp	r3, #0
 802162a:	d001      	beq.n	8021630 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 802162c:	f000 fc80 	bl	8021f30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8021630:	bf00      	nop
 8021632:	bd80      	pop	{r7, pc}
 8021634:	20011034 	.word	0x20011034
 8021638:	40005800 	.word	0x40005800
 802163c:	000186a0 	.word	0x000186a0

08021640 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8021640:	b580      	push	{r7, lr}
 8021642:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8021644:	4b17      	ldr	r3, [pc, #92]	; (80216a4 <MX_SPI3_Init+0x64>)
 8021646:	4a18      	ldr	r2, [pc, #96]	; (80216a8 <MX_SPI3_Init+0x68>)
 8021648:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 802164a:	4b16      	ldr	r3, [pc, #88]	; (80216a4 <MX_SPI3_Init+0x64>)
 802164c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8021650:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8021652:	4b14      	ldr	r3, [pc, #80]	; (80216a4 <MX_SPI3_Init+0x64>)
 8021654:	2200      	movs	r2, #0
 8021656:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8021658:	4b12      	ldr	r3, [pc, #72]	; (80216a4 <MX_SPI3_Init+0x64>)
 802165a:	2200      	movs	r2, #0
 802165c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 802165e:	4b11      	ldr	r3, [pc, #68]	; (80216a4 <MX_SPI3_Init+0x64>)
 8021660:	2200      	movs	r2, #0
 8021662:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8021664:	4b0f      	ldr	r3, [pc, #60]	; (80216a4 <MX_SPI3_Init+0x64>)
 8021666:	2200      	movs	r2, #0
 8021668:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 802166a:	4b0e      	ldr	r3, [pc, #56]	; (80216a4 <MX_SPI3_Init+0x64>)
 802166c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8021670:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8021672:	4b0c      	ldr	r3, [pc, #48]	; (80216a4 <MX_SPI3_Init+0x64>)
 8021674:	2238      	movs	r2, #56	; 0x38
 8021676:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8021678:	4b0a      	ldr	r3, [pc, #40]	; (80216a4 <MX_SPI3_Init+0x64>)
 802167a:	2200      	movs	r2, #0
 802167c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 802167e:	4b09      	ldr	r3, [pc, #36]	; (80216a4 <MX_SPI3_Init+0x64>)
 8021680:	2200      	movs	r2, #0
 8021682:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8021684:	4b07      	ldr	r3, [pc, #28]	; (80216a4 <MX_SPI3_Init+0x64>)
 8021686:	2200      	movs	r2, #0
 8021688:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 802168a:	4b06      	ldr	r3, [pc, #24]	; (80216a4 <MX_SPI3_Init+0x64>)
 802168c:	220a      	movs	r2, #10
 802168e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8021690:	4804      	ldr	r0, [pc, #16]	; (80216a4 <MX_SPI3_Init+0x64>)
 8021692:	f003 fb23 	bl	8024cdc <HAL_SPI_Init>
 8021696:	4603      	mov	r3, r0
 8021698:	2b00      	cmp	r3, #0
 802169a:	d001      	beq.n	80216a0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 802169c:	f000 fc48 	bl	8021f30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80216a0:	bf00      	nop
 80216a2:	bd80      	pop	{r7, pc}
 80216a4:	20011108 	.word	0x20011108
 80216a8:	40003c00 	.word	0x40003c00

080216ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80216ac:	b580      	push	{r7, lr}
 80216ae:	b092      	sub	sp, #72	; 0x48
 80216b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80216b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80216b6:	2200      	movs	r2, #0
 80216b8:	601a      	str	r2, [r3, #0]
 80216ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80216bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80216c0:	2200      	movs	r2, #0
 80216c2:	601a      	str	r2, [r3, #0]
 80216c4:	605a      	str	r2, [r3, #4]
 80216c6:	609a      	str	r2, [r3, #8]
 80216c8:	60da      	str	r2, [r3, #12]
 80216ca:	611a      	str	r2, [r3, #16]
 80216cc:	615a      	str	r2, [r3, #20]
 80216ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80216d0:	1d3b      	adds	r3, r7, #4
 80216d2:	2220      	movs	r2, #32
 80216d4:	2100      	movs	r1, #0
 80216d6:	4618      	mov	r0, r3
 80216d8:	f004 fbbb 	bl	8025e52 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80216dc:	4b39      	ldr	r3, [pc, #228]	; (80217c4 <MX_TIM1_Init+0x118>)
 80216de:	4a3a      	ldr	r2, [pc, #232]	; (80217c8 <MX_TIM1_Init+0x11c>)
 80216e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80216e2:	4b38      	ldr	r3, [pc, #224]	; (80217c4 <MX_TIM1_Init+0x118>)
 80216e4:	2201      	movs	r2, #1
 80216e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80216e8:	4b36      	ldr	r3, [pc, #216]	; (80217c4 <MX_TIM1_Init+0x118>)
 80216ea:	2200      	movs	r2, #0
 80216ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1049;
 80216ee:	4b35      	ldr	r3, [pc, #212]	; (80217c4 <MX_TIM1_Init+0x118>)
 80216f0:	f240 4219 	movw	r2, #1049	; 0x419
 80216f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80216f6:	4b33      	ldr	r3, [pc, #204]	; (80217c4 <MX_TIM1_Init+0x118>)
 80216f8:	2200      	movs	r2, #0
 80216fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80216fc:	4b31      	ldr	r3, [pc, #196]	; (80217c4 <MX_TIM1_Init+0x118>)
 80216fe:	2200      	movs	r2, #0
 8021700:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021702:	4b30      	ldr	r3, [pc, #192]	; (80217c4 <MX_TIM1_Init+0x118>)
 8021704:	2200      	movs	r2, #0
 8021706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8021708:	482e      	ldr	r0, [pc, #184]	; (80217c4 <MX_TIM1_Init+0x118>)
 802170a:	f003 fb9a 	bl	8024e42 <HAL_TIM_PWM_Init>
 802170e:	4603      	mov	r3, r0
 8021710:	2b00      	cmp	r3, #0
 8021712:	d001      	beq.n	8021718 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8021714:	f000 fc0c 	bl	8021f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021718:	2300      	movs	r3, #0
 802171a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802171c:	2300      	movs	r3, #0
 802171e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8021720:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8021724:	4619      	mov	r1, r3
 8021726:	4827      	ldr	r0, [pc, #156]	; (80217c4 <MX_TIM1_Init+0x118>)
 8021728:	f004 fa7c 	bl	8025c24 <HAL_TIMEx_MasterConfigSynchronization>
 802172c:	4603      	mov	r3, r0
 802172e:	2b00      	cmp	r3, #0
 8021730:	d001      	beq.n	8021736 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8021732:	f000 fbfd 	bl	8021f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8021736:	2360      	movs	r3, #96	; 0x60
 8021738:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 802173a:	2300      	movs	r3, #0
 802173c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 802173e:	2300      	movs	r3, #0
 8021740:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8021742:	2300      	movs	r3, #0
 8021744:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8021746:	2300      	movs	r3, #0
 8021748:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 802174a:	2300      	movs	r3, #0
 802174c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 802174e:	2300      	movs	r3, #0
 8021750:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8021752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8021756:	2204      	movs	r2, #4
 8021758:	4619      	mov	r1, r3
 802175a:	481a      	ldr	r0, [pc, #104]	; (80217c4 <MX_TIM1_Init+0x118>)
 802175c:	f003 fdac 	bl	80252b8 <HAL_TIM_PWM_ConfigChannel>
 8021760:	4603      	mov	r3, r0
 8021762:	2b00      	cmp	r3, #0
 8021764:	d001      	beq.n	802176a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8021766:	f000 fbe3 	bl	8021f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 802176a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802176e:	220c      	movs	r2, #12
 8021770:	4619      	mov	r1, r3
 8021772:	4814      	ldr	r0, [pc, #80]	; (80217c4 <MX_TIM1_Init+0x118>)
 8021774:	f003 fda0 	bl	80252b8 <HAL_TIM_PWM_ConfigChannel>
 8021778:	4603      	mov	r3, r0
 802177a:	2b00      	cmp	r3, #0
 802177c:	d001      	beq.n	8021782 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 802177e:	f000 fbd7 	bl	8021f30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8021782:	2300      	movs	r3, #0
 8021784:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8021786:	2300      	movs	r3, #0
 8021788:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 802178a:	2300      	movs	r3, #0
 802178c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 802178e:	2300      	movs	r3, #0
 8021790:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8021792:	2300      	movs	r3, #0
 8021794:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8021796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 802179a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 802179c:	2300      	movs	r3, #0
 802179e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80217a0:	1d3b      	adds	r3, r7, #4
 80217a2:	4619      	mov	r1, r3
 80217a4:	4807      	ldr	r0, [pc, #28]	; (80217c4 <MX_TIM1_Init+0x118>)
 80217a6:	f004 fab9 	bl	8025d1c <HAL_TIMEx_ConfigBreakDeadTime>
 80217aa:	4603      	mov	r3, r0
 80217ac:	2b00      	cmp	r3, #0
 80217ae:	d001      	beq.n	80217b4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80217b0:	f000 fbbe 	bl	8021f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80217b4:	4803      	ldr	r0, [pc, #12]	; (80217c4 <MX_TIM1_Init+0x118>)
 80217b6:	f000 ff1f 	bl	80225f8 <HAL_TIM_MspPostInit>

}
 80217ba:	bf00      	nop
 80217bc:	3748      	adds	r7, #72	; 0x48
 80217be:	46bd      	mov	sp, r7
 80217c0:	bd80      	pop	{r7, pc}
 80217c2:	bf00      	nop
 80217c4:	20011288 	.word	0x20011288
 80217c8:	40010000 	.word	0x40010000

080217cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80217cc:	b580      	push	{r7, lr}
 80217ce:	b086      	sub	sp, #24
 80217d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80217d2:	f107 0308 	add.w	r3, r7, #8
 80217d6:	2200      	movs	r2, #0
 80217d8:	601a      	str	r2, [r3, #0]
 80217da:	605a      	str	r2, [r3, #4]
 80217dc:	609a      	str	r2, [r3, #8]
 80217de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80217e0:	463b      	mov	r3, r7
 80217e2:	2200      	movs	r2, #0
 80217e4:	601a      	str	r2, [r3, #0]
 80217e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80217e8:	4b1d      	ldr	r3, [pc, #116]	; (8021860 <MX_TIM2_Init+0x94>)
 80217ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80217ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 80217f0:	4b1b      	ldr	r3, [pc, #108]	; (8021860 <MX_TIM2_Init+0x94>)
 80217f2:	2204      	movs	r2, #4
 80217f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80217f6:	4b1a      	ldr	r3, [pc, #104]	; (8021860 <MX_TIM2_Init+0x94>)
 80217f8:	2200      	movs	r2, #0
 80217fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 104999;
 80217fc:	4b18      	ldr	r3, [pc, #96]	; (8021860 <MX_TIM2_Init+0x94>)
 80217fe:	4a19      	ldr	r2, [pc, #100]	; (8021864 <MX_TIM2_Init+0x98>)
 8021800:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021802:	4b17      	ldr	r3, [pc, #92]	; (8021860 <MX_TIM2_Init+0x94>)
 8021804:	2200      	movs	r2, #0
 8021806:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021808:	4b15      	ldr	r3, [pc, #84]	; (8021860 <MX_TIM2_Init+0x94>)
 802180a:	2200      	movs	r2, #0
 802180c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 802180e:	4814      	ldr	r0, [pc, #80]	; (8021860 <MX_TIM2_Init+0x94>)
 8021810:	f003 fac8 	bl	8024da4 <HAL_TIM_Base_Init>
 8021814:	4603      	mov	r3, r0
 8021816:	2b00      	cmp	r3, #0
 8021818:	d001      	beq.n	802181e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 802181a:	f000 fb89 	bl	8021f30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 802181e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021822:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8021824:	f107 0308 	add.w	r3, r7, #8
 8021828:	4619      	mov	r1, r3
 802182a:	480d      	ldr	r0, [pc, #52]	; (8021860 <MX_TIM2_Init+0x94>)
 802182c:	f003 fe0a 	bl	8025444 <HAL_TIM_ConfigClockSource>
 8021830:	4603      	mov	r3, r0
 8021832:	2b00      	cmp	r3, #0
 8021834:	d001      	beq.n	802183a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8021836:	f000 fb7b 	bl	8021f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802183a:	2300      	movs	r3, #0
 802183c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 802183e:	2300      	movs	r3, #0
 8021840:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8021842:	463b      	mov	r3, r7
 8021844:	4619      	mov	r1, r3
 8021846:	4806      	ldr	r0, [pc, #24]	; (8021860 <MX_TIM2_Init+0x94>)
 8021848:	f004 f9ec 	bl	8025c24 <HAL_TIMEx_MasterConfigSynchronization>
 802184c:	4603      	mov	r3, r0
 802184e:	2b00      	cmp	r3, #0
 8021850:	d001      	beq.n	8021856 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8021852:	f000 fb6d 	bl	8021f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8021856:	bf00      	nop
 8021858:	3718      	adds	r7, #24
 802185a:	46bd      	mov	sp, r7
 802185c:	bd80      	pop	{r7, pc}
 802185e:	bf00      	nop
 8021860:	200112c8 	.word	0x200112c8
 8021864:	00019a27 	.word	0x00019a27

08021868 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8021868:	b580      	push	{r7, lr}
 802186a:	b08a      	sub	sp, #40	; 0x28
 802186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802186e:	f107 0320 	add.w	r3, r7, #32
 8021872:	2200      	movs	r2, #0
 8021874:	601a      	str	r2, [r3, #0]
 8021876:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8021878:	1d3b      	adds	r3, r7, #4
 802187a:	2200      	movs	r2, #0
 802187c:	601a      	str	r2, [r3, #0]
 802187e:	605a      	str	r2, [r3, #4]
 8021880:	609a      	str	r2, [r3, #8]
 8021882:	60da      	str	r2, [r3, #12]
 8021884:	611a      	str	r2, [r3, #16]
 8021886:	615a      	str	r2, [r3, #20]
 8021888:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 802188a:	4b32      	ldr	r3, [pc, #200]	; (8021954 <MX_TIM3_Init+0xec>)
 802188c:	4a32      	ldr	r2, [pc, #200]	; (8021958 <MX_TIM3_Init+0xf0>)
 802188e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8021890:	4b30      	ldr	r3, [pc, #192]	; (8021954 <MX_TIM3_Init+0xec>)
 8021892:	2200      	movs	r2, #0
 8021894:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021896:	4b2f      	ldr	r3, [pc, #188]	; (8021954 <MX_TIM3_Init+0xec>)
 8021898:	2200      	movs	r2, #0
 802189a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 802189c:	4b2d      	ldr	r3, [pc, #180]	; (8021954 <MX_TIM3_Init+0xec>)
 802189e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80218a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80218a4:	4b2b      	ldr	r3, [pc, #172]	; (8021954 <MX_TIM3_Init+0xec>)
 80218a6:	2200      	movs	r2, #0
 80218a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80218aa:	4b2a      	ldr	r3, [pc, #168]	; (8021954 <MX_TIM3_Init+0xec>)
 80218ac:	2200      	movs	r2, #0
 80218ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80218b0:	4828      	ldr	r0, [pc, #160]	; (8021954 <MX_TIM3_Init+0xec>)
 80218b2:	f003 fac6 	bl	8024e42 <HAL_TIM_PWM_Init>
 80218b6:	4603      	mov	r3, r0
 80218b8:	2b00      	cmp	r3, #0
 80218ba:	d001      	beq.n	80218c0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80218bc:	f000 fb38 	bl	8021f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80218c0:	2300      	movs	r3, #0
 80218c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80218c4:	2300      	movs	r3, #0
 80218c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80218c8:	f107 0320 	add.w	r3, r7, #32
 80218cc:	4619      	mov	r1, r3
 80218ce:	4821      	ldr	r0, [pc, #132]	; (8021954 <MX_TIM3_Init+0xec>)
 80218d0:	f004 f9a8 	bl	8025c24 <HAL_TIMEx_MasterConfigSynchronization>
 80218d4:	4603      	mov	r3, r0
 80218d6:	2b00      	cmp	r3, #0
 80218d8:	d001      	beq.n	80218de <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80218da:	f000 fb29 	bl	8021f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80218de:	2360      	movs	r3, #96	; 0x60
 80218e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80218e2:	2300      	movs	r3, #0
 80218e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80218e6:	2300      	movs	r3, #0
 80218e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80218ea:	2300      	movs	r3, #0
 80218ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80218ee:	1d3b      	adds	r3, r7, #4
 80218f0:	2200      	movs	r2, #0
 80218f2:	4619      	mov	r1, r3
 80218f4:	4817      	ldr	r0, [pc, #92]	; (8021954 <MX_TIM3_Init+0xec>)
 80218f6:	f003 fcdf 	bl	80252b8 <HAL_TIM_PWM_ConfigChannel>
 80218fa:	4603      	mov	r3, r0
 80218fc:	2b00      	cmp	r3, #0
 80218fe:	d001      	beq.n	8021904 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8021900:	f000 fb16 	bl	8021f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8021904:	1d3b      	adds	r3, r7, #4
 8021906:	2204      	movs	r2, #4
 8021908:	4619      	mov	r1, r3
 802190a:	4812      	ldr	r0, [pc, #72]	; (8021954 <MX_TIM3_Init+0xec>)
 802190c:	f003 fcd4 	bl	80252b8 <HAL_TIM_PWM_ConfigChannel>
 8021910:	4603      	mov	r3, r0
 8021912:	2b00      	cmp	r3, #0
 8021914:	d001      	beq.n	802191a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8021916:	f000 fb0b 	bl	8021f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 802191a:	1d3b      	adds	r3, r7, #4
 802191c:	2208      	movs	r2, #8
 802191e:	4619      	mov	r1, r3
 8021920:	480c      	ldr	r0, [pc, #48]	; (8021954 <MX_TIM3_Init+0xec>)
 8021922:	f003 fcc9 	bl	80252b8 <HAL_TIM_PWM_ConfigChannel>
 8021926:	4603      	mov	r3, r0
 8021928:	2b00      	cmp	r3, #0
 802192a:	d001      	beq.n	8021930 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 802192c:	f000 fb00 	bl	8021f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8021930:	1d3b      	adds	r3, r7, #4
 8021932:	220c      	movs	r2, #12
 8021934:	4619      	mov	r1, r3
 8021936:	4807      	ldr	r0, [pc, #28]	; (8021954 <MX_TIM3_Init+0xec>)
 8021938:	f003 fcbe 	bl	80252b8 <HAL_TIM_PWM_ConfigChannel>
 802193c:	4603      	mov	r3, r0
 802193e:	2b00      	cmp	r3, #0
 8021940:	d001      	beq.n	8021946 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8021942:	f000 faf5 	bl	8021f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8021946:	4803      	ldr	r0, [pc, #12]	; (8021954 <MX_TIM3_Init+0xec>)
 8021948:	f000 fe56 	bl	80225f8 <HAL_TIM_MspPostInit>

}
 802194c:	bf00      	nop
 802194e:	3728      	adds	r7, #40	; 0x28
 8021950:	46bd      	mov	sp, r7
 8021952:	bd80      	pop	{r7, pc}
 8021954:	200110c8 	.word	0x200110c8
 8021958:	40000400 	.word	0x40000400

0802195c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 802195c:	b580      	push	{r7, lr}
 802195e:	b08c      	sub	sp, #48	; 0x30
 8021960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8021962:	f107 030c 	add.w	r3, r7, #12
 8021966:	2224      	movs	r2, #36	; 0x24
 8021968:	2100      	movs	r1, #0
 802196a:	4618      	mov	r0, r3
 802196c:	f004 fa71 	bl	8025e52 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021970:	1d3b      	adds	r3, r7, #4
 8021972:	2200      	movs	r2, #0
 8021974:	601a      	str	r2, [r3, #0]
 8021976:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8021978:	4b20      	ldr	r3, [pc, #128]	; (80219fc <MX_TIM4_Init+0xa0>)
 802197a:	4a21      	ldr	r2, [pc, #132]	; (8021a00 <MX_TIM4_Init+0xa4>)
 802197c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 802197e:	4b1f      	ldr	r3, [pc, #124]	; (80219fc <MX_TIM4_Init+0xa0>)
 8021980:	2200      	movs	r2, #0
 8021982:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021984:	4b1d      	ldr	r3, [pc, #116]	; (80219fc <MX_TIM4_Init+0xa0>)
 8021986:	2200      	movs	r2, #0
 8021988:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 802198a:	4b1c      	ldr	r3, [pc, #112]	; (80219fc <MX_TIM4_Init+0xa0>)
 802198c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021990:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021992:	4b1a      	ldr	r3, [pc, #104]	; (80219fc <MX_TIM4_Init+0xa0>)
 8021994:	2200      	movs	r2, #0
 8021996:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021998:	4b18      	ldr	r3, [pc, #96]	; (80219fc <MX_TIM4_Init+0xa0>)
 802199a:	2200      	movs	r2, #0
 802199c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 802199e:	2303      	movs	r3, #3
 80219a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80219a2:	2300      	movs	r3, #0
 80219a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80219a6:	2301      	movs	r3, #1
 80219a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80219aa:	2300      	movs	r3, #0
 80219ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80219ae:	2300      	movs	r3, #0
 80219b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80219b2:	2300      	movs	r3, #0
 80219b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80219b6:	2301      	movs	r3, #1
 80219b8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80219ba:	2300      	movs	r3, #0
 80219bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80219be:	2300      	movs	r3, #0
 80219c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80219c2:	f107 030c 	add.w	r3, r7, #12
 80219c6:	4619      	mov	r1, r3
 80219c8:	480c      	ldr	r0, [pc, #48]	; (80219fc <MX_TIM4_Init+0xa0>)
 80219ca:	f003 faa3 	bl	8024f14 <HAL_TIM_Encoder_Init>
 80219ce:	4603      	mov	r3, r0
 80219d0:	2b00      	cmp	r3, #0
 80219d2:	d001      	beq.n	80219d8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80219d4:	f000 faac 	bl	8021f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80219d8:	2300      	movs	r3, #0
 80219da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80219dc:	2300      	movs	r3, #0
 80219de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80219e0:	1d3b      	adds	r3, r7, #4
 80219e2:	4619      	mov	r1, r3
 80219e4:	4805      	ldr	r0, [pc, #20]	; (80219fc <MX_TIM4_Init+0xa0>)
 80219e6:	f004 f91d 	bl	8025c24 <HAL_TIMEx_MasterConfigSynchronization>
 80219ea:	4603      	mov	r3, r0
 80219ec:	2b00      	cmp	r3, #0
 80219ee:	d001      	beq.n	80219f4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80219f0:	f000 fa9e 	bl	8021f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80219f4:	bf00      	nop
 80219f6:	3730      	adds	r7, #48	; 0x30
 80219f8:	46bd      	mov	sp, r7
 80219fa:	bd80      	pop	{r7, pc}
 80219fc:	20010ff4 	.word	0x20010ff4
 8021a00:	40000800 	.word	0x40000800

08021a04 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8021a04:	b580      	push	{r7, lr}
 8021a06:	b086      	sub	sp, #24
 8021a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8021a0a:	f107 0308 	add.w	r3, r7, #8
 8021a0e:	2200      	movs	r2, #0
 8021a10:	601a      	str	r2, [r3, #0]
 8021a12:	605a      	str	r2, [r3, #4]
 8021a14:	609a      	str	r2, [r3, #8]
 8021a16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021a18:	463b      	mov	r3, r7
 8021a1a:	2200      	movs	r2, #0
 8021a1c:	601a      	str	r2, [r3, #0]
 8021a1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8021a20:	4b1d      	ldr	r3, [pc, #116]	; (8021a98 <MX_TIM5_Init+0x94>)
 8021a22:	4a1e      	ldr	r2, [pc, #120]	; (8021a9c <MX_TIM5_Init+0x98>)
 8021a24:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 4;
 8021a26:	4b1c      	ldr	r3, [pc, #112]	; (8021a98 <MX_TIM5_Init+0x94>)
 8021a28:	2204      	movs	r2, #4
 8021a2a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021a2c:	4b1a      	ldr	r3, [pc, #104]	; (8021a98 <MX_TIM5_Init+0x94>)
 8021a2e:	2200      	movs	r2, #0
 8021a30:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20999;
 8021a32:	4b19      	ldr	r3, [pc, #100]	; (8021a98 <MX_TIM5_Init+0x94>)
 8021a34:	f245 2207 	movw	r2, #20999	; 0x5207
 8021a38:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021a3a:	4b17      	ldr	r3, [pc, #92]	; (8021a98 <MX_TIM5_Init+0x94>)
 8021a3c:	2200      	movs	r2, #0
 8021a3e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021a40:	4b15      	ldr	r3, [pc, #84]	; (8021a98 <MX_TIM5_Init+0x94>)
 8021a42:	2200      	movs	r2, #0
 8021a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8021a46:	4814      	ldr	r0, [pc, #80]	; (8021a98 <MX_TIM5_Init+0x94>)
 8021a48:	f003 f9ac 	bl	8024da4 <HAL_TIM_Base_Init>
 8021a4c:	4603      	mov	r3, r0
 8021a4e:	2b00      	cmp	r3, #0
 8021a50:	d001      	beq.n	8021a56 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8021a52:	f000 fa6d 	bl	8021f30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8021a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021a5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8021a5c:	f107 0308 	add.w	r3, r7, #8
 8021a60:	4619      	mov	r1, r3
 8021a62:	480d      	ldr	r0, [pc, #52]	; (8021a98 <MX_TIM5_Init+0x94>)
 8021a64:	f003 fcee 	bl	8025444 <HAL_TIM_ConfigClockSource>
 8021a68:	4603      	mov	r3, r0
 8021a6a:	2b00      	cmp	r3, #0
 8021a6c:	d001      	beq.n	8021a72 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8021a6e:	f000 fa5f 	bl	8021f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021a72:	2300      	movs	r3, #0
 8021a74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021a76:	2300      	movs	r3, #0
 8021a78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8021a7a:	463b      	mov	r3, r7
 8021a7c:	4619      	mov	r1, r3
 8021a7e:	4806      	ldr	r0, [pc, #24]	; (8021a98 <MX_TIM5_Init+0x94>)
 8021a80:	f004 f8d0 	bl	8025c24 <HAL_TIMEx_MasterConfigSynchronization>
 8021a84:	4603      	mov	r3, r0
 8021a86:	2b00      	cmp	r3, #0
 8021a88:	d001      	beq.n	8021a8e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8021a8a:	f000 fa51 	bl	8021f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8021a8e:	bf00      	nop
 8021a90:	3718      	adds	r7, #24
 8021a92:	46bd      	mov	sp, r7
 8021a94:	bd80      	pop	{r7, pc}
 8021a96:	bf00      	nop
 8021a98:	20011088 	.word	0x20011088
 8021a9c:	40000c00 	.word	0x40000c00

08021aa0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8021aa0:	b580      	push	{r7, lr}
 8021aa2:	b082      	sub	sp, #8
 8021aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021aa6:	463b      	mov	r3, r7
 8021aa8:	2200      	movs	r2, #0
 8021aaa:	601a      	str	r2, [r3, #0]
 8021aac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8021aae:	4b15      	ldr	r3, [pc, #84]	; (8021b04 <MX_TIM6_Init+0x64>)
 8021ab0:	4a15      	ldr	r2, [pc, #84]	; (8021b08 <MX_TIM6_Init+0x68>)
 8021ab2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4;
 8021ab4:	4b13      	ldr	r3, [pc, #76]	; (8021b04 <MX_TIM6_Init+0x64>)
 8021ab6:	2204      	movs	r2, #4
 8021ab8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021aba:	4b12      	ldr	r3, [pc, #72]	; (8021b04 <MX_TIM6_Init+0x64>)
 8021abc:	2200      	movs	r2, #0
 8021abe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10499;
 8021ac0:	4b10      	ldr	r3, [pc, #64]	; (8021b04 <MX_TIM6_Init+0x64>)
 8021ac2:	f642 1203 	movw	r2, #10499	; 0x2903
 8021ac6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021ac8:	4b0e      	ldr	r3, [pc, #56]	; (8021b04 <MX_TIM6_Init+0x64>)
 8021aca:	2200      	movs	r2, #0
 8021acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8021ace:	480d      	ldr	r0, [pc, #52]	; (8021b04 <MX_TIM6_Init+0x64>)
 8021ad0:	f003 f968 	bl	8024da4 <HAL_TIM_Base_Init>
 8021ad4:	4603      	mov	r3, r0
 8021ad6:	2b00      	cmp	r3, #0
 8021ad8:	d001      	beq.n	8021ade <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8021ada:	f000 fa29 	bl	8021f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021ade:	2300      	movs	r3, #0
 8021ae0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021ae2:	2300      	movs	r3, #0
 8021ae4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8021ae6:	463b      	mov	r3, r7
 8021ae8:	4619      	mov	r1, r3
 8021aea:	4806      	ldr	r0, [pc, #24]	; (8021b04 <MX_TIM6_Init+0x64>)
 8021aec:	f004 f89a 	bl	8025c24 <HAL_TIMEx_MasterConfigSynchronization>
 8021af0:	4603      	mov	r3, r0
 8021af2:	2b00      	cmp	r3, #0
 8021af4:	d001      	beq.n	8021afa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8021af6:	f000 fa1b 	bl	8021f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8021afa:	bf00      	nop
 8021afc:	3708      	adds	r7, #8
 8021afe:	46bd      	mov	sp, r7
 8021b00:	bd80      	pop	{r7, pc}
 8021b02:	bf00      	nop
 8021b04:	20011248 	.word	0x20011248
 8021b08:	40001000 	.word	0x40001000

08021b0c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8021b0c:	b580      	push	{r7, lr}
 8021b0e:	b082      	sub	sp, #8
 8021b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021b12:	463b      	mov	r3, r7
 8021b14:	2200      	movs	r2, #0
 8021b16:	601a      	str	r2, [r3, #0]
 8021b18:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8021b1a:	4b15      	ldr	r3, [pc, #84]	; (8021b70 <MX_TIM7_Init+0x64>)
 8021b1c:	4a15      	ldr	r2, [pc, #84]	; (8021b74 <MX_TIM7_Init+0x68>)
 8021b1e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 4;
 8021b20:	4b13      	ldr	r3, [pc, #76]	; (8021b70 <MX_TIM7_Init+0x64>)
 8021b22:	2204      	movs	r2, #4
 8021b24:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021b26:	4b12      	ldr	r3, [pc, #72]	; (8021b70 <MX_TIM7_Init+0x64>)
 8021b28:	2200      	movs	r2, #0
 8021b2a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1049;
 8021b2c:	4b10      	ldr	r3, [pc, #64]	; (8021b70 <MX_TIM7_Init+0x64>)
 8021b2e:	f240 4219 	movw	r2, #1049	; 0x419
 8021b32:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021b34:	4b0e      	ldr	r3, [pc, #56]	; (8021b70 <MX_TIM7_Init+0x64>)
 8021b36:	2200      	movs	r2, #0
 8021b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8021b3a:	480d      	ldr	r0, [pc, #52]	; (8021b70 <MX_TIM7_Init+0x64>)
 8021b3c:	f003 f932 	bl	8024da4 <HAL_TIM_Base_Init>
 8021b40:	4603      	mov	r3, r0
 8021b42:	2b00      	cmp	r3, #0
 8021b44:	d001      	beq.n	8021b4a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8021b46:	f000 f9f3 	bl	8021f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021b4a:	2300      	movs	r3, #0
 8021b4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021b4e:	2300      	movs	r3, #0
 8021b50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8021b52:	463b      	mov	r3, r7
 8021b54:	4619      	mov	r1, r3
 8021b56:	4806      	ldr	r0, [pc, #24]	; (8021b70 <MX_TIM7_Init+0x64>)
 8021b58:	f004 f864 	bl	8025c24 <HAL_TIMEx_MasterConfigSynchronization>
 8021b5c:	4603      	mov	r3, r0
 8021b5e:	2b00      	cmp	r3, #0
 8021b60:	d001      	beq.n	8021b66 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8021b62:	f000 f9e5 	bl	8021f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8021b66:	bf00      	nop
 8021b68:	3708      	adds	r7, #8
 8021b6a:	46bd      	mov	sp, r7
 8021b6c:	bd80      	pop	{r7, pc}
 8021b6e:	bf00      	nop
 8021b70:	20011348 	.word	0x20011348
 8021b74:	40001400 	.word	0x40001400

08021b78 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8021b78:	b580      	push	{r7, lr}
 8021b7a:	b08c      	sub	sp, #48	; 0x30
 8021b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8021b7e:	f107 030c 	add.w	r3, r7, #12
 8021b82:	2224      	movs	r2, #36	; 0x24
 8021b84:	2100      	movs	r1, #0
 8021b86:	4618      	mov	r0, r3
 8021b88:	f004 f963 	bl	8025e52 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8021b8c:	1d3b      	adds	r3, r7, #4
 8021b8e:	2200      	movs	r2, #0
 8021b90:	601a      	str	r2, [r3, #0]
 8021b92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8021b94:	4b22      	ldr	r3, [pc, #136]	; (8021c20 <MX_TIM8_Init+0xa8>)
 8021b96:	4a23      	ldr	r2, [pc, #140]	; (8021c24 <MX_TIM8_Init+0xac>)
 8021b98:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8021b9a:	4b21      	ldr	r3, [pc, #132]	; (8021c20 <MX_TIM8_Init+0xa8>)
 8021b9c:	2200      	movs	r2, #0
 8021b9e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021ba0:	4b1f      	ldr	r3, [pc, #124]	; (8021c20 <MX_TIM8_Init+0xa8>)
 8021ba2:	2200      	movs	r2, #0
 8021ba4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8021ba6:	4b1e      	ldr	r3, [pc, #120]	; (8021c20 <MX_TIM8_Init+0xa8>)
 8021ba8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021bac:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021bae:	4b1c      	ldr	r3, [pc, #112]	; (8021c20 <MX_TIM8_Init+0xa8>)
 8021bb0:	2200      	movs	r2, #0
 8021bb2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8021bb4:	4b1a      	ldr	r3, [pc, #104]	; (8021c20 <MX_TIM8_Init+0xa8>)
 8021bb6:	2200      	movs	r2, #0
 8021bb8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021bba:	4b19      	ldr	r3, [pc, #100]	; (8021c20 <MX_TIM8_Init+0xa8>)
 8021bbc:	2200      	movs	r2, #0
 8021bbe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8021bc0:	2303      	movs	r3, #3
 8021bc2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8021bc4:	2300      	movs	r3, #0
 8021bc6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8021bc8:	2301      	movs	r3, #1
 8021bca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8021bcc:	2300      	movs	r3, #0
 8021bce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8021bd0:	2300      	movs	r3, #0
 8021bd2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8021bd4:	2300      	movs	r3, #0
 8021bd6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8021bd8:	2301      	movs	r3, #1
 8021bda:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8021bdc:	2300      	movs	r3, #0
 8021bde:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8021be0:	2300      	movs	r3, #0
 8021be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8021be4:	f107 030c 	add.w	r3, r7, #12
 8021be8:	4619      	mov	r1, r3
 8021bea:	480d      	ldr	r0, [pc, #52]	; (8021c20 <MX_TIM8_Init+0xa8>)
 8021bec:	f003 f992 	bl	8024f14 <HAL_TIM_Encoder_Init>
 8021bf0:	4603      	mov	r3, r0
 8021bf2:	2b00      	cmp	r3, #0
 8021bf4:	d001      	beq.n	8021bfa <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8021bf6:	f000 f99b 	bl	8021f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8021bfa:	2300      	movs	r3, #0
 8021bfc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8021bfe:	2300      	movs	r3, #0
 8021c00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8021c02:	1d3b      	adds	r3, r7, #4
 8021c04:	4619      	mov	r1, r3
 8021c06:	4806      	ldr	r0, [pc, #24]	; (8021c20 <MX_TIM8_Init+0xa8>)
 8021c08:	f004 f80c 	bl	8025c24 <HAL_TIMEx_MasterConfigSynchronization>
 8021c0c:	4603      	mov	r3, r0
 8021c0e:	2b00      	cmp	r3, #0
 8021c10:	d001      	beq.n	8021c16 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8021c12:	f000 f98d 	bl	8021f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8021c16:	bf00      	nop
 8021c18:	3730      	adds	r7, #48	; 0x30
 8021c1a:	46bd      	mov	sp, r7
 8021c1c:	bd80      	pop	{r7, pc}
 8021c1e:	bf00      	nop
 8021c20:	20010fb4 	.word	0x20010fb4
 8021c24:	40010400 	.word	0x40010400

08021c28 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8021c28:	b580      	push	{r7, lr}
 8021c2a:	b088      	sub	sp, #32
 8021c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8021c2e:	1d3b      	adds	r3, r7, #4
 8021c30:	2200      	movs	r2, #0
 8021c32:	601a      	str	r2, [r3, #0]
 8021c34:	605a      	str	r2, [r3, #4]
 8021c36:	609a      	str	r2, [r3, #8]
 8021c38:	60da      	str	r2, [r3, #12]
 8021c3a:	611a      	str	r2, [r3, #16]
 8021c3c:	615a      	str	r2, [r3, #20]
 8021c3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8021c40:	4b1e      	ldr	r3, [pc, #120]	; (8021cbc <MX_TIM11_Init+0x94>)
 8021c42:	4a1f      	ldr	r2, [pc, #124]	; (8021cc0 <MX_TIM11_Init+0x98>)
 8021c44:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8021c46:	4b1d      	ldr	r3, [pc, #116]	; (8021cbc <MX_TIM11_Init+0x94>)
 8021c48:	2200      	movs	r2, #0
 8021c4a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021c4c:	4b1b      	ldr	r3, [pc, #108]	; (8021cbc <MX_TIM11_Init+0x94>)
 8021c4e:	2200      	movs	r2, #0
 8021c50:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1679;
 8021c52:	4b1a      	ldr	r3, [pc, #104]	; (8021cbc <MX_TIM11_Init+0x94>)
 8021c54:	f240 628f 	movw	r2, #1679	; 0x68f
 8021c58:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021c5a:	4b18      	ldr	r3, [pc, #96]	; (8021cbc <MX_TIM11_Init+0x94>)
 8021c5c:	2200      	movs	r2, #0
 8021c5e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021c60:	4b16      	ldr	r3, [pc, #88]	; (8021cbc <MX_TIM11_Init+0x94>)
 8021c62:	2200      	movs	r2, #0
 8021c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8021c66:	4815      	ldr	r0, [pc, #84]	; (8021cbc <MX_TIM11_Init+0x94>)
 8021c68:	f003 f89c 	bl	8024da4 <HAL_TIM_Base_Init>
 8021c6c:	4603      	mov	r3, r0
 8021c6e:	2b00      	cmp	r3, #0
 8021c70:	d001      	beq.n	8021c76 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8021c72:	f000 f95d 	bl	8021f30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8021c76:	4811      	ldr	r0, [pc, #68]	; (8021cbc <MX_TIM11_Init+0x94>)
 8021c78:	f003 f8e3 	bl	8024e42 <HAL_TIM_PWM_Init>
 8021c7c:	4603      	mov	r3, r0
 8021c7e:	2b00      	cmp	r3, #0
 8021c80:	d001      	beq.n	8021c86 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8021c82:	f000 f955 	bl	8021f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8021c86:	2360      	movs	r3, #96	; 0x60
 8021c88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8021c8a:	2300      	movs	r3, #0
 8021c8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8021c8e:	2300      	movs	r3, #0
 8021c90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8021c92:	2300      	movs	r3, #0
 8021c94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8021c96:	1d3b      	adds	r3, r7, #4
 8021c98:	2200      	movs	r2, #0
 8021c9a:	4619      	mov	r1, r3
 8021c9c:	4807      	ldr	r0, [pc, #28]	; (8021cbc <MX_TIM11_Init+0x94>)
 8021c9e:	f003 fb0b 	bl	80252b8 <HAL_TIM_PWM_ConfigChannel>
 8021ca2:	4603      	mov	r3, r0
 8021ca4:	2b00      	cmp	r3, #0
 8021ca6:	d001      	beq.n	8021cac <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8021ca8:	f000 f942 	bl	8021f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8021cac:	4803      	ldr	r0, [pc, #12]	; (8021cbc <MX_TIM11_Init+0x94>)
 8021cae:	f000 fca3 	bl	80225f8 <HAL_TIM_MspPostInit>

}
 8021cb2:	bf00      	nop
 8021cb4:	3720      	adds	r7, #32
 8021cb6:	46bd      	mov	sp, r7
 8021cb8:	bd80      	pop	{r7, pc}
 8021cba:	bf00      	nop
 8021cbc:	200111a8 	.word	0x200111a8
 8021cc0:	40014800 	.word	0x40014800

08021cc4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8021cc4:	b580      	push	{r7, lr}
 8021cc6:	b088      	sub	sp, #32
 8021cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8021cca:	1d3b      	adds	r3, r7, #4
 8021ccc:	2200      	movs	r2, #0
 8021cce:	601a      	str	r2, [r3, #0]
 8021cd0:	605a      	str	r2, [r3, #4]
 8021cd2:	609a      	str	r2, [r3, #8]
 8021cd4:	60da      	str	r2, [r3, #12]
 8021cd6:	611a      	str	r2, [r3, #16]
 8021cd8:	615a      	str	r2, [r3, #20]
 8021cda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8021cdc:	4b1a      	ldr	r3, [pc, #104]	; (8021d48 <MX_TIM12_Init+0x84>)
 8021cde:	4a1b      	ldr	r2, [pc, #108]	; (8021d4c <MX_TIM12_Init+0x88>)
 8021ce0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 880;
 8021ce2:	4b19      	ldr	r3, [pc, #100]	; (8021d48 <MX_TIM12_Init+0x84>)
 8021ce4:	f44f 725c 	mov.w	r2, #880	; 0x370
 8021ce8:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021cea:	4b17      	ldr	r3, [pc, #92]	; (8021d48 <MX_TIM12_Init+0x84>)
 8021cec:	2200      	movs	r2, #0
 8021cee:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 53;
 8021cf0:	4b15      	ldr	r3, [pc, #84]	; (8021d48 <MX_TIM12_Init+0x84>)
 8021cf2:	2235      	movs	r2, #53	; 0x35
 8021cf4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8021cf6:	4b14      	ldr	r3, [pc, #80]	; (8021d48 <MX_TIM12_Init+0x84>)
 8021cf8:	2200      	movs	r2, #0
 8021cfa:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021cfc:	4b12      	ldr	r3, [pc, #72]	; (8021d48 <MX_TIM12_Init+0x84>)
 8021cfe:	2200      	movs	r2, #0
 8021d00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8021d02:	4811      	ldr	r0, [pc, #68]	; (8021d48 <MX_TIM12_Init+0x84>)
 8021d04:	f003 f89d 	bl	8024e42 <HAL_TIM_PWM_Init>
 8021d08:	4603      	mov	r3, r0
 8021d0a:	2b00      	cmp	r3, #0
 8021d0c:	d001      	beq.n	8021d12 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8021d0e:	f000 f90f 	bl	8021f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8021d12:	2360      	movs	r3, #96	; 0x60
 8021d14:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8021d16:	2300      	movs	r3, #0
 8021d18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8021d1a:	2300      	movs	r3, #0
 8021d1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8021d1e:	2300      	movs	r3, #0
 8021d20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8021d22:	1d3b      	adds	r3, r7, #4
 8021d24:	2204      	movs	r2, #4
 8021d26:	4619      	mov	r1, r3
 8021d28:	4807      	ldr	r0, [pc, #28]	; (8021d48 <MX_TIM12_Init+0x84>)
 8021d2a:	f003 fac5 	bl	80252b8 <HAL_TIM_PWM_ConfigChannel>
 8021d2e:	4603      	mov	r3, r0
 8021d30:	2b00      	cmp	r3, #0
 8021d32:	d001      	beq.n	8021d38 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8021d34:	f000 f8fc 	bl	8021f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8021d38:	4803      	ldr	r0, [pc, #12]	; (8021d48 <MX_TIM12_Init+0x84>)
 8021d3a:	f000 fc5d 	bl	80225f8 <HAL_TIM_MspPostInit>

}
 8021d3e:	bf00      	nop
 8021d40:	3720      	adds	r7, #32
 8021d42:	46bd      	mov	sp, r7
 8021d44:	bd80      	pop	{r7, pc}
 8021d46:	bf00      	nop
 8021d48:	20011308 	.word	0x20011308
 8021d4c:	40001800 	.word	0x40001800

08021d50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8021d50:	b580      	push	{r7, lr}
 8021d52:	b082      	sub	sp, #8
 8021d54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8021d56:	2300      	movs	r3, #0
 8021d58:	607b      	str	r3, [r7, #4]
 8021d5a:	4b0c      	ldr	r3, [pc, #48]	; (8021d8c <MX_DMA_Init+0x3c>)
 8021d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021d5e:	4a0b      	ldr	r2, [pc, #44]	; (8021d8c <MX_DMA_Init+0x3c>)
 8021d60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8021d64:	6313      	str	r3, [r2, #48]	; 0x30
 8021d66:	4b09      	ldr	r3, [pc, #36]	; (8021d8c <MX_DMA_Init+0x3c>)
 8021d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8021d6e:	607b      	str	r3, [r7, #4]
 8021d70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8021d72:	2200      	movs	r2, #0
 8021d74:	2100      	movs	r1, #0
 8021d76:	2038      	movs	r0, #56	; 0x38
 8021d78:	f001 fcdf 	bl	802373a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8021d7c:	2038      	movs	r0, #56	; 0x38
 8021d7e:	f001 fcf8 	bl	8023772 <HAL_NVIC_EnableIRQ>

}
 8021d82:	bf00      	nop
 8021d84:	3708      	adds	r7, #8
 8021d86:	46bd      	mov	sp, r7
 8021d88:	bd80      	pop	{r7, pc}
 8021d8a:	bf00      	nop
 8021d8c:	40023800 	.word	0x40023800

08021d90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8021d90:	b580      	push	{r7, lr}
 8021d92:	b08a      	sub	sp, #40	; 0x28
 8021d94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021d96:	f107 0314 	add.w	r3, r7, #20
 8021d9a:	2200      	movs	r2, #0
 8021d9c:	601a      	str	r2, [r3, #0]
 8021d9e:	605a      	str	r2, [r3, #4]
 8021da0:	609a      	str	r2, [r3, #8]
 8021da2:	60da      	str	r2, [r3, #12]
 8021da4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8021da6:	2300      	movs	r3, #0
 8021da8:	613b      	str	r3, [r7, #16]
 8021daa:	4b5c      	ldr	r3, [pc, #368]	; (8021f1c <MX_GPIO_Init+0x18c>)
 8021dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021dae:	4a5b      	ldr	r2, [pc, #364]	; (8021f1c <MX_GPIO_Init+0x18c>)
 8021db0:	f043 0304 	orr.w	r3, r3, #4
 8021db4:	6313      	str	r3, [r2, #48]	; 0x30
 8021db6:	4b59      	ldr	r3, [pc, #356]	; (8021f1c <MX_GPIO_Init+0x18c>)
 8021db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021dba:	f003 0304 	and.w	r3, r3, #4
 8021dbe:	613b      	str	r3, [r7, #16]
 8021dc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8021dc2:	2300      	movs	r3, #0
 8021dc4:	60fb      	str	r3, [r7, #12]
 8021dc6:	4b55      	ldr	r3, [pc, #340]	; (8021f1c <MX_GPIO_Init+0x18c>)
 8021dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021dca:	4a54      	ldr	r2, [pc, #336]	; (8021f1c <MX_GPIO_Init+0x18c>)
 8021dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8021dd2:	4b52      	ldr	r3, [pc, #328]	; (8021f1c <MX_GPIO_Init+0x18c>)
 8021dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021dda:	60fb      	str	r3, [r7, #12]
 8021ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8021dde:	2300      	movs	r3, #0
 8021de0:	60bb      	str	r3, [r7, #8]
 8021de2:	4b4e      	ldr	r3, [pc, #312]	; (8021f1c <MX_GPIO_Init+0x18c>)
 8021de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021de6:	4a4d      	ldr	r2, [pc, #308]	; (8021f1c <MX_GPIO_Init+0x18c>)
 8021de8:	f043 0301 	orr.w	r3, r3, #1
 8021dec:	6313      	str	r3, [r2, #48]	; 0x30
 8021dee:	4b4b      	ldr	r3, [pc, #300]	; (8021f1c <MX_GPIO_Init+0x18c>)
 8021df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021df2:	f003 0301 	and.w	r3, r3, #1
 8021df6:	60bb      	str	r3, [r7, #8]
 8021df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8021dfa:	2300      	movs	r3, #0
 8021dfc:	607b      	str	r3, [r7, #4]
 8021dfe:	4b47      	ldr	r3, [pc, #284]	; (8021f1c <MX_GPIO_Init+0x18c>)
 8021e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021e02:	4a46      	ldr	r2, [pc, #280]	; (8021f1c <MX_GPIO_Init+0x18c>)
 8021e04:	f043 0302 	orr.w	r3, r3, #2
 8021e08:	6313      	str	r3, [r2, #48]	; 0x30
 8021e0a:	4b44      	ldr	r3, [pc, #272]	; (8021f1c <MX_GPIO_Init+0x18c>)
 8021e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021e0e:	f003 0302 	and.w	r3, r3, #2
 8021e12:	607b      	str	r3, [r7, #4]
 8021e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8021e16:	2300      	movs	r3, #0
 8021e18:	603b      	str	r3, [r7, #0]
 8021e1a:	4b40      	ldr	r3, [pc, #256]	; (8021f1c <MX_GPIO_Init+0x18c>)
 8021e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021e1e:	4a3f      	ldr	r2, [pc, #252]	; (8021f1c <MX_GPIO_Init+0x18c>)
 8021e20:	f043 0308 	orr.w	r3, r3, #8
 8021e24:	6313      	str	r3, [r2, #48]	; 0x30
 8021e26:	4b3d      	ldr	r3, [pc, #244]	; (8021f1c <MX_GPIO_Init+0x18c>)
 8021e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021e2a:	f003 0308 	and.w	r3, r3, #8
 8021e2e:	603b      	str	r3, [r7, #0]
 8021e30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8021e32:	2200      	movs	r2, #0
 8021e34:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8021e38:	4839      	ldr	r0, [pc, #228]	; (8021f20 <MX_GPIO_Init+0x190>)
 8021e3a:	f002 f9d5 	bl	80241e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8021e3e:	2201      	movs	r2, #1
 8021e40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8021e44:	4837      	ldr	r0, [pc, #220]	; (8021f24 <MX_GPIO_Init+0x194>)
 8021e46:	f002 f9cf 	bl	80241e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8021e4a:	2200      	movs	r2, #0
 8021e4c:	f44f 4105 	mov.w	r1, #34048	; 0x8500
 8021e50:	4835      	ldr	r0, [pc, #212]	; (8021f28 <MX_GPIO_Init+0x198>)
 8021e52:	f002 f9c9 	bl	80241e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8021e56:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8021e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8021e5c:	2301      	movs	r3, #1
 8021e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021e60:	2300      	movs	r3, #0
 8021e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021e64:	2300      	movs	r3, #0
 8021e66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021e68:	f107 0314 	add.w	r3, r7, #20
 8021e6c:	4619      	mov	r1, r3
 8021e6e:	482c      	ldr	r0, [pc, #176]	; (8021f20 <MX_GPIO_Init+0x190>)
 8021e70:	f002 f808 	bl	8023e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8021e74:	2307      	movs	r3, #7
 8021e76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8021e78:	2300      	movs	r3, #0
 8021e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8021e7c:	2301      	movs	r3, #1
 8021e7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021e80:	f107 0314 	add.w	r3, r7, #20
 8021e84:	4619      	mov	r1, r3
 8021e86:	4827      	ldr	r0, [pc, #156]	; (8021f24 <MX_GPIO_Init+0x194>)
 8021e88:	f001 fffc 	bl	8023e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8021e8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8021e92:	2301      	movs	r3, #1
 8021e94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021e96:	2300      	movs	r3, #0
 8021e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021e9a:	2300      	movs	r3, #0
 8021e9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021e9e:	f107 0314 	add.w	r3, r7, #20
 8021ea2:	4619      	mov	r1, r3
 8021ea4:	481f      	ldr	r0, [pc, #124]	; (8021f24 <MX_GPIO_Init+0x194>)
 8021ea6:	f001 ffed 	bl	8023e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_8;
 8021eaa:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8021eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8021eb0:	2300      	movs	r3, #0
 8021eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021eb4:	2300      	movs	r3, #0
 8021eb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021eb8:	f107 0314 	add.w	r3, r7, #20
 8021ebc:	4619      	mov	r1, r3
 8021ebe:	4819      	ldr	r0, [pc, #100]	; (8021f24 <MX_GPIO_Init+0x194>)
 8021ec0:	f001 ffe0 	bl	8023e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_15;
 8021ec4:	f44f 4305 	mov.w	r3, #34048	; 0x8500
 8021ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8021eca:	2301      	movs	r3, #1
 8021ecc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021ece:	2300      	movs	r3, #0
 8021ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021ed2:	2300      	movs	r3, #0
 8021ed4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021ed6:	f107 0314 	add.w	r3, r7, #20
 8021eda:	4619      	mov	r1, r3
 8021edc:	4812      	ldr	r0, [pc, #72]	; (8021f28 <MX_GPIO_Init+0x198>)
 8021ede:	f001 ffd1 	bl	8023e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8021ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021ee6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8021ee8:	2300      	movs	r3, #0
 8021eea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8021eec:	2301      	movs	r3, #1
 8021eee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021ef0:	f107 0314 	add.w	r3, r7, #20
 8021ef4:	4619      	mov	r1, r3
 8021ef6:	480c      	ldr	r0, [pc, #48]	; (8021f28 <MX_GPIO_Init+0x198>)
 8021ef8:	f001 ffc4 	bl	8023e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8021efc:	2304      	movs	r3, #4
 8021efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8021f00:	2300      	movs	r3, #0
 8021f02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021f04:	2300      	movs	r3, #0
 8021f06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8021f08:	f107 0314 	add.w	r3, r7, #20
 8021f0c:	4619      	mov	r1, r3
 8021f0e:	4807      	ldr	r0, [pc, #28]	; (8021f2c <MX_GPIO_Init+0x19c>)
 8021f10:	f001 ffb8 	bl	8023e84 <HAL_GPIO_Init>

}
 8021f14:	bf00      	nop
 8021f16:	3728      	adds	r7, #40	; 0x28
 8021f18:	46bd      	mov	sp, r7
 8021f1a:	bd80      	pop	{r7, pc}
 8021f1c:	40023800 	.word	0x40023800
 8021f20:	40020800 	.word	0x40020800
 8021f24:	40020400 	.word	0x40020400
 8021f28:	40020000 	.word	0x40020000
 8021f2c:	40020c00 	.word	0x40020c00

08021f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8021f30:	b480      	push	{r7}
 8021f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8021f34:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8021f36:	e7fe      	b.n	8021f36 <Error_Handler+0x6>

08021f38 <_ZN5Motor4InitEv>:
#include "motor.hpp"
#include "declare_extern.h"

void Motor::Init()
{
 8021f38:	b580      	push	{r7, lr}
 8021f3a:	b082      	sub	sp, #8
 8021f3c:	af00      	add	r7, sp, #0
 8021f3e:	6078      	str	r0, [r7, #4]
    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 8021f40:	2104      	movs	r1, #4
 8021f42:	4812      	ldr	r0, [pc, #72]	; (8021f8c <_ZN5Motor4InitEv+0x54>)
 8021f44:	f002 ffa8 	bl	8024e98 <HAL_TIM_PWM_Start>
 8021f48:	4603      	mov	r3, r0
 8021f4a:	2b00      	cmp	r3, #0
 8021f4c:	bf14      	ite	ne
 8021f4e:	2301      	movne	r3, #1
 8021f50:	2300      	moveq	r3, #0
 8021f52:	b2db      	uxtb	r3, r3
 8021f54:	2b00      	cmp	r3, #0
 8021f56:	d004      	beq.n	8021f62 <_ZN5Motor4InitEv+0x2a>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim1_ch2 = true; // MOTOR_R
 8021f58:	4b0d      	ldr	r3, [pc, #52]	; (8021f90 <_ZN5Motor4InitEv+0x58>)
 8021f5a:	2201      	movs	r2, #1
 8021f5c:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8021f5e:	f7ff ffe7 	bl	8021f30 <Error_Handler>
    }

    if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8021f62:	210c      	movs	r1, #12
 8021f64:	4809      	ldr	r0, [pc, #36]	; (8021f8c <_ZN5Motor4InitEv+0x54>)
 8021f66:	f002 ff97 	bl	8024e98 <HAL_TIM_PWM_Start>
 8021f6a:	4603      	mov	r3, r0
 8021f6c:	2b00      	cmp	r3, #0
 8021f6e:	bf14      	ite	ne
 8021f70:	2301      	movne	r3, #1
 8021f72:	2300      	moveq	r3, #0
 8021f74:	b2db      	uxtb	r3, r3
 8021f76:	2b00      	cmp	r3, #0
 8021f78:	d004      	beq.n	8021f84 <_ZN5Motor4InitEv+0x4c>
    {
#ifdef DEBUG_MODE
        g_error_handler_tim1_ch4 = true; // MOTOR_L
 8021f7a:	4b06      	ldr	r3, [pc, #24]	; (8021f94 <_ZN5Motor4InitEv+0x5c>)
 8021f7c:	2201      	movs	r2, #1
 8021f7e:	701a      	strb	r2, [r3, #0]
#endif // DEBUG_MODE

        Error_Handler();
 8021f80:	f7ff ffd6 	bl	8021f30 <Error_Handler>
    }
}
 8021f84:	bf00      	nop
 8021f86:	3708      	adds	r7, #8
 8021f88:	46bd      	mov	sp, r7
 8021f8a:	bd80      	pop	{r7, pc}
 8021f8c:	20011288 	.word	0x20011288
 8021f90:	20000206 	.word	0x20000206
 8021f94:	20000207 	.word	0x20000207

08021f98 <_ZN5PrintC1EP5Flash>:
#include <stdio.h>
#include <string.h>

extern float g_swo_test;

Print::Print(Flash *flash)
 8021f98:	b480      	push	{r7}
 8021f9a:	b083      	sub	sp, #12
 8021f9c:	af00      	add	r7, sp, #0
 8021f9e:	6078      	str	r0, [r7, #4]
 8021fa0:	6039      	str	r1, [r7, #0]
{
    flash_ = flash;
 8021fa2:	687b      	ldr	r3, [r7, #4]
 8021fa4:	f503 3385 	add.w	r3, r3, #68096	; 0x10a00
 8021fa8:	3368      	adds	r3, #104	; 0x68
 8021faa:	683a      	ldr	r2, [r7, #0]
 8021fac:	601a      	str	r2, [r3, #0]
}
 8021fae:	687b      	ldr	r3, [r7, #4]
 8021fb0:	4618      	mov	r0, r3
 8021fb2:	370c      	adds	r7, #12
 8021fb4:	46bd      	mov	sp, r7
 8021fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021fba:	4770      	bx	lr

08021fbc <_ZN12RotarySwitch5StateEv>:
#include "rotary_switch.hpp"

uint8_t RotarySwitch::State()
{
 8021fbc:	b580      	push	{r7, lr}
 8021fbe:	b084      	sub	sp, #16
 8021fc0:	af00      	add	r7, sp, #0
 8021fc2:	6078      	str	r0, [r7, #4]
    uint8_t switch_state = 0x00;
 8021fc4:	2300      	movs	r3, #0
 8021fc6:	73fb      	strb	r3, [r7, #15]

    if(PIN_1 == 0) switch_state |= 0x01;
 8021fc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8021fcc:	4821      	ldr	r0, [pc, #132]	; (8022054 <_ZN12RotarySwitch5StateEv+0x98>)
 8021fce:	f002 f8f3 	bl	80241b8 <HAL_GPIO_ReadPin>
 8021fd2:	4603      	mov	r3, r0
 8021fd4:	2b00      	cmp	r3, #0
 8021fd6:	bf0c      	ite	eq
 8021fd8:	2301      	moveq	r3, #1
 8021fda:	2300      	movne	r3, #0
 8021fdc:	b2db      	uxtb	r3, r3
 8021fde:	2b00      	cmp	r3, #0
 8021fe0:	d003      	beq.n	8021fea <_ZN12RotarySwitch5StateEv+0x2e>
 8021fe2:	7bfb      	ldrb	r3, [r7, #15]
 8021fe4:	f043 0301 	orr.w	r3, r3, #1
 8021fe8:	73fb      	strb	r3, [r7, #15]
    if(PIN_2 == 0) switch_state |= 0x02;
 8021fea:	2104      	movs	r1, #4
 8021fec:	481a      	ldr	r0, [pc, #104]	; (8022058 <_ZN12RotarySwitch5StateEv+0x9c>)
 8021fee:	f002 f8e3 	bl	80241b8 <HAL_GPIO_ReadPin>
 8021ff2:	4603      	mov	r3, r0
 8021ff4:	2b00      	cmp	r3, #0
 8021ff6:	bf0c      	ite	eq
 8021ff8:	2301      	moveq	r3, #1
 8021ffa:	2300      	movne	r3, #0
 8021ffc:	b2db      	uxtb	r3, r3
 8021ffe:	2b00      	cmp	r3, #0
 8022000:	d003      	beq.n	802200a <_ZN12RotarySwitch5StateEv+0x4e>
 8022002:	7bfb      	ldrb	r3, [r7, #15]
 8022004:	f043 0302 	orr.w	r3, r3, #2
 8022008:	73fb      	strb	r3, [r7, #15]
    if(PIN_4 == 0) switch_state |= 0x04;
 802200a:	2102      	movs	r1, #2
 802200c:	4812      	ldr	r0, [pc, #72]	; (8022058 <_ZN12RotarySwitch5StateEv+0x9c>)
 802200e:	f002 f8d3 	bl	80241b8 <HAL_GPIO_ReadPin>
 8022012:	4603      	mov	r3, r0
 8022014:	2b00      	cmp	r3, #0
 8022016:	bf0c      	ite	eq
 8022018:	2301      	moveq	r3, #1
 802201a:	2300      	movne	r3, #0
 802201c:	b2db      	uxtb	r3, r3
 802201e:	2b00      	cmp	r3, #0
 8022020:	d003      	beq.n	802202a <_ZN12RotarySwitch5StateEv+0x6e>
 8022022:	7bfb      	ldrb	r3, [r7, #15]
 8022024:	f043 0304 	orr.w	r3, r3, #4
 8022028:	73fb      	strb	r3, [r7, #15]
    if(PIN_8 == 0) switch_state |= 0x08;
 802202a:	2101      	movs	r1, #1
 802202c:	480a      	ldr	r0, [pc, #40]	; (8022058 <_ZN12RotarySwitch5StateEv+0x9c>)
 802202e:	f002 f8c3 	bl	80241b8 <HAL_GPIO_ReadPin>
 8022032:	4603      	mov	r3, r0
 8022034:	2b00      	cmp	r3, #0
 8022036:	bf0c      	ite	eq
 8022038:	2301      	moveq	r3, #1
 802203a:	2300      	movne	r3, #0
 802203c:	b2db      	uxtb	r3, r3
 802203e:	2b00      	cmp	r3, #0
 8022040:	d003      	beq.n	802204a <_ZN12RotarySwitch5StateEv+0x8e>
 8022042:	7bfb      	ldrb	r3, [r7, #15]
 8022044:	f043 0308 	orr.w	r3, r3, #8
 8022048:	73fb      	strb	r3, [r7, #15]

    return switch_state;
 802204a:	7bfb      	ldrb	r3, [r7, #15]
 802204c:	4618      	mov	r0, r3
 802204e:	3710      	adds	r7, #16
 8022050:	46bd      	mov	sp, r7
 8022052:	bd80      	pop	{r7, pc}
 8022054:	40020000 	.word	0x40020000
 8022058:	40020400 	.word	0x40020400

0802205c <_ZN10SideSensorC1Ev>:
#include "side_sensor.hpp"

SideSensor::SideSensor() : read_state_flags_(0)
 802205c:	b480      	push	{r7}
 802205e:	b083      	sub	sp, #12
 8022060:	af00      	add	r7, sp, #0
 8022062:	6078      	str	r0, [r7, #4]
                         , write_state_flags_(0)
                         , exception_flags_(0)
                         , master_count_(0)
                         , goal_marker_count_(0)
                         , corner_marker_count_(0)
                         , cross_line_count_(0) {}
 8022064:	687b      	ldr	r3, [r7, #4]
 8022066:	2200      	movs	r2, #0
 8022068:	701a      	strb	r2, [r3, #0]
 802206a:	687b      	ldr	r3, [r7, #4]
 802206c:	2200      	movs	r2, #0
 802206e:	705a      	strb	r2, [r3, #1]
 8022070:	687b      	ldr	r3, [r7, #4]
 8022072:	2200      	movs	r2, #0
 8022074:	709a      	strb	r2, [r3, #2]
 8022076:	687b      	ldr	r3, [r7, #4]
 8022078:	2200      	movs	r2, #0
 802207a:	70da      	strb	r2, [r3, #3]
 802207c:	687b      	ldr	r3, [r7, #4]
 802207e:	2200      	movs	r2, #0
 8022080:	711a      	strb	r2, [r3, #4]
 8022082:	687b      	ldr	r3, [r7, #4]
 8022084:	2200      	movs	r2, #0
 8022086:	715a      	strb	r2, [r3, #5]
 8022088:	687b      	ldr	r3, [r7, #4]
 802208a:	2200      	movs	r2, #0
 802208c:	719a      	strb	r2, [r3, #6]
 802208e:	687b      	ldr	r3, [r7, #4]
 8022090:	4618      	mov	r0, r3
 8022092:	370c      	adds	r7, #12
 8022094:	46bd      	mov	sp, r7
 8022096:	f85d 7b04 	ldr.w	r7, [sp], #4
 802209a:	4770      	bx	lr

0802209c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 802209c:	b480      	push	{r7}
 802209e:	b083      	sub	sp, #12
 80220a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80220a2:	2300      	movs	r3, #0
 80220a4:	607b      	str	r3, [r7, #4]
 80220a6:	4b10      	ldr	r3, [pc, #64]	; (80220e8 <HAL_MspInit+0x4c>)
 80220a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80220aa:	4a0f      	ldr	r2, [pc, #60]	; (80220e8 <HAL_MspInit+0x4c>)
 80220ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80220b0:	6453      	str	r3, [r2, #68]	; 0x44
 80220b2:	4b0d      	ldr	r3, [pc, #52]	; (80220e8 <HAL_MspInit+0x4c>)
 80220b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80220b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80220ba:	607b      	str	r3, [r7, #4]
 80220bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80220be:	2300      	movs	r3, #0
 80220c0:	603b      	str	r3, [r7, #0]
 80220c2:	4b09      	ldr	r3, [pc, #36]	; (80220e8 <HAL_MspInit+0x4c>)
 80220c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80220c6:	4a08      	ldr	r2, [pc, #32]	; (80220e8 <HAL_MspInit+0x4c>)
 80220c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80220cc:	6413      	str	r3, [r2, #64]	; 0x40
 80220ce:	4b06      	ldr	r3, [pc, #24]	; (80220e8 <HAL_MspInit+0x4c>)
 80220d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80220d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80220d6:	603b      	str	r3, [r7, #0]
 80220d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80220da:	bf00      	nop
 80220dc:	370c      	adds	r7, #12
 80220de:	46bd      	mov	sp, r7
 80220e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220e4:	4770      	bx	lr
 80220e6:	bf00      	nop
 80220e8:	40023800 	.word	0x40023800

080220ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80220ec:	b580      	push	{r7, lr}
 80220ee:	b08a      	sub	sp, #40	; 0x28
 80220f0:	af00      	add	r7, sp, #0
 80220f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80220f4:	f107 0314 	add.w	r3, r7, #20
 80220f8:	2200      	movs	r2, #0
 80220fa:	601a      	str	r2, [r3, #0]
 80220fc:	605a      	str	r2, [r3, #4]
 80220fe:	609a      	str	r2, [r3, #8]
 8022100:	60da      	str	r2, [r3, #12]
 8022102:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8022104:	687b      	ldr	r3, [r7, #4]
 8022106:	681b      	ldr	r3, [r3, #0]
 8022108:	4a3c      	ldr	r2, [pc, #240]	; (80221fc <HAL_ADC_MspInit+0x110>)
 802210a:	4293      	cmp	r3, r2
 802210c:	d171      	bne.n	80221f2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 802210e:	2300      	movs	r3, #0
 8022110:	613b      	str	r3, [r7, #16]
 8022112:	4b3b      	ldr	r3, [pc, #236]	; (8022200 <HAL_ADC_MspInit+0x114>)
 8022114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022116:	4a3a      	ldr	r2, [pc, #232]	; (8022200 <HAL_ADC_MspInit+0x114>)
 8022118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802211c:	6453      	str	r3, [r2, #68]	; 0x44
 802211e:	4b38      	ldr	r3, [pc, #224]	; (8022200 <HAL_ADC_MspInit+0x114>)
 8022120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022126:	613b      	str	r3, [r7, #16]
 8022128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 802212a:	2300      	movs	r3, #0
 802212c:	60fb      	str	r3, [r7, #12]
 802212e:	4b34      	ldr	r3, [pc, #208]	; (8022200 <HAL_ADC_MspInit+0x114>)
 8022130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022132:	4a33      	ldr	r2, [pc, #204]	; (8022200 <HAL_ADC_MspInit+0x114>)
 8022134:	f043 0304 	orr.w	r3, r3, #4
 8022138:	6313      	str	r3, [r2, #48]	; 0x30
 802213a:	4b31      	ldr	r3, [pc, #196]	; (8022200 <HAL_ADC_MspInit+0x114>)
 802213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802213e:	f003 0304 	and.w	r3, r3, #4
 8022142:	60fb      	str	r3, [r7, #12]
 8022144:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8022146:	2300      	movs	r3, #0
 8022148:	60bb      	str	r3, [r7, #8]
 802214a:	4b2d      	ldr	r3, [pc, #180]	; (8022200 <HAL_ADC_MspInit+0x114>)
 802214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802214e:	4a2c      	ldr	r2, [pc, #176]	; (8022200 <HAL_ADC_MspInit+0x114>)
 8022150:	f043 0301 	orr.w	r3, r3, #1
 8022154:	6313      	str	r3, [r2, #48]	; 0x30
 8022156:	4b2a      	ldr	r3, [pc, #168]	; (8022200 <HAL_ADC_MspInit+0x114>)
 8022158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802215a:	f003 0301 	and.w	r3, r3, #1
 802215e:	60bb      	str	r3, [r7, #8]
 8022160:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8022162:	233f      	movs	r3, #63	; 0x3f
 8022164:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8022166:	2303      	movs	r3, #3
 8022168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802216a:	2300      	movs	r3, #0
 802216c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802216e:	f107 0314 	add.w	r3, r7, #20
 8022172:	4619      	mov	r1, r3
 8022174:	4823      	ldr	r0, [pc, #140]	; (8022204 <HAL_ADC_MspInit+0x118>)
 8022176:	f001 fe85 	bl	8023e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 802217a:	23ff      	movs	r3, #255	; 0xff
 802217c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 802217e:	2303      	movs	r3, #3
 8022180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022182:	2300      	movs	r3, #0
 8022184:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8022186:	f107 0314 	add.w	r3, r7, #20
 802218a:	4619      	mov	r1, r3
 802218c:	481e      	ldr	r0, [pc, #120]	; (8022208 <HAL_ADC_MspInit+0x11c>)
 802218e:	f001 fe79 	bl	8023e84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8022192:	4b1e      	ldr	r3, [pc, #120]	; (802220c <HAL_ADC_MspInit+0x120>)
 8022194:	4a1e      	ldr	r2, [pc, #120]	; (8022210 <HAL_ADC_MspInit+0x124>)
 8022196:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8022198:	4b1c      	ldr	r3, [pc, #112]	; (802220c <HAL_ADC_MspInit+0x120>)
 802219a:	2200      	movs	r2, #0
 802219c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 802219e:	4b1b      	ldr	r3, [pc, #108]	; (802220c <HAL_ADC_MspInit+0x120>)
 80221a0:	2200      	movs	r2, #0
 80221a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80221a4:	4b19      	ldr	r3, [pc, #100]	; (802220c <HAL_ADC_MspInit+0x120>)
 80221a6:	2200      	movs	r2, #0
 80221a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80221aa:	4b18      	ldr	r3, [pc, #96]	; (802220c <HAL_ADC_MspInit+0x120>)
 80221ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80221b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80221b2:	4b16      	ldr	r3, [pc, #88]	; (802220c <HAL_ADC_MspInit+0x120>)
 80221b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80221b8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80221ba:	4b14      	ldr	r3, [pc, #80]	; (802220c <HAL_ADC_MspInit+0x120>)
 80221bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80221c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80221c2:	4b12      	ldr	r3, [pc, #72]	; (802220c <HAL_ADC_MspInit+0x120>)
 80221c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80221c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80221ca:	4b10      	ldr	r3, [pc, #64]	; (802220c <HAL_ADC_MspInit+0x120>)
 80221cc:	2200      	movs	r2, #0
 80221ce:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80221d0:	4b0e      	ldr	r3, [pc, #56]	; (802220c <HAL_ADC_MspInit+0x120>)
 80221d2:	2200      	movs	r2, #0
 80221d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80221d6:	480d      	ldr	r0, [pc, #52]	; (802220c <HAL_ADC_MspInit+0x120>)
 80221d8:	f001 fae6 	bl	80237a8 <HAL_DMA_Init>
 80221dc:	4603      	mov	r3, r0
 80221de:	2b00      	cmp	r3, #0
 80221e0:	d001      	beq.n	80221e6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80221e2:	f7ff fea5 	bl	8021f30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80221e6:	687b      	ldr	r3, [r7, #4]
 80221e8:	4a08      	ldr	r2, [pc, #32]	; (802220c <HAL_ADC_MspInit+0x120>)
 80221ea:	639a      	str	r2, [r3, #56]	; 0x38
 80221ec:	4a07      	ldr	r2, [pc, #28]	; (802220c <HAL_ADC_MspInit+0x120>)
 80221ee:	687b      	ldr	r3, [r7, #4]
 80221f0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80221f2:	bf00      	nop
 80221f4:	3728      	adds	r7, #40	; 0x28
 80221f6:	46bd      	mov	sp, r7
 80221f8:	bd80      	pop	{r7, pc}
 80221fa:	bf00      	nop
 80221fc:	40012000 	.word	0x40012000
 8022200:	40023800 	.word	0x40023800
 8022204:	40020800 	.word	0x40020800
 8022208:	40020000 	.word	0x40020000
 802220c:	200111e8 	.word	0x200111e8
 8022210:	40026410 	.word	0x40026410

08022214 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8022214:	b580      	push	{r7, lr}
 8022216:	b08a      	sub	sp, #40	; 0x28
 8022218:	af00      	add	r7, sp, #0
 802221a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802221c:	f107 0314 	add.w	r3, r7, #20
 8022220:	2200      	movs	r2, #0
 8022222:	601a      	str	r2, [r3, #0]
 8022224:	605a      	str	r2, [r3, #4]
 8022226:	609a      	str	r2, [r3, #8]
 8022228:	60da      	str	r2, [r3, #12]
 802222a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 802222c:	687b      	ldr	r3, [r7, #4]
 802222e:	681b      	ldr	r3, [r3, #0]
 8022230:	4a19      	ldr	r2, [pc, #100]	; (8022298 <HAL_I2C_MspInit+0x84>)
 8022232:	4293      	cmp	r3, r2
 8022234:	d12c      	bne.n	8022290 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8022236:	2300      	movs	r3, #0
 8022238:	613b      	str	r3, [r7, #16]
 802223a:	4b18      	ldr	r3, [pc, #96]	; (802229c <HAL_I2C_MspInit+0x88>)
 802223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802223e:	4a17      	ldr	r2, [pc, #92]	; (802229c <HAL_I2C_MspInit+0x88>)
 8022240:	f043 0302 	orr.w	r3, r3, #2
 8022244:	6313      	str	r3, [r2, #48]	; 0x30
 8022246:	4b15      	ldr	r3, [pc, #84]	; (802229c <HAL_I2C_MspInit+0x88>)
 8022248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802224a:	f003 0302 	and.w	r3, r3, #2
 802224e:	613b      	str	r3, [r7, #16]
 8022250:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8022252:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8022256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8022258:	2312      	movs	r3, #18
 802225a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802225c:	2301      	movs	r3, #1
 802225e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8022260:	2303      	movs	r3, #3
 8022262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8022264:	2304      	movs	r3, #4
 8022266:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8022268:	f107 0314 	add.w	r3, r7, #20
 802226c:	4619      	mov	r1, r3
 802226e:	480c      	ldr	r0, [pc, #48]	; (80222a0 <HAL_I2C_MspInit+0x8c>)
 8022270:	f001 fe08 	bl	8023e84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8022274:	2300      	movs	r3, #0
 8022276:	60fb      	str	r3, [r7, #12]
 8022278:	4b08      	ldr	r3, [pc, #32]	; (802229c <HAL_I2C_MspInit+0x88>)
 802227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802227c:	4a07      	ldr	r2, [pc, #28]	; (802229c <HAL_I2C_MspInit+0x88>)
 802227e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8022282:	6413      	str	r3, [r2, #64]	; 0x40
 8022284:	4b05      	ldr	r3, [pc, #20]	; (802229c <HAL_I2C_MspInit+0x88>)
 8022286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022288:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802228c:	60fb      	str	r3, [r7, #12]
 802228e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8022290:	bf00      	nop
 8022292:	3728      	adds	r7, #40	; 0x28
 8022294:	46bd      	mov	sp, r7
 8022296:	bd80      	pop	{r7, pc}
 8022298:	40005800 	.word	0x40005800
 802229c:	40023800 	.word	0x40023800
 80222a0:	40020400 	.word	0x40020400

080222a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80222a4:	b580      	push	{r7, lr}
 80222a6:	b08a      	sub	sp, #40	; 0x28
 80222a8:	af00      	add	r7, sp, #0
 80222aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80222ac:	f107 0314 	add.w	r3, r7, #20
 80222b0:	2200      	movs	r2, #0
 80222b2:	601a      	str	r2, [r3, #0]
 80222b4:	605a      	str	r2, [r3, #4]
 80222b6:	609a      	str	r2, [r3, #8]
 80222b8:	60da      	str	r2, [r3, #12]
 80222ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80222bc:	687b      	ldr	r3, [r7, #4]
 80222be:	681b      	ldr	r3, [r3, #0]
 80222c0:	4a19      	ldr	r2, [pc, #100]	; (8022328 <HAL_SPI_MspInit+0x84>)
 80222c2:	4293      	cmp	r3, r2
 80222c4:	d12c      	bne.n	8022320 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80222c6:	2300      	movs	r3, #0
 80222c8:	613b      	str	r3, [r7, #16]
 80222ca:	4b18      	ldr	r3, [pc, #96]	; (802232c <HAL_SPI_MspInit+0x88>)
 80222cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80222ce:	4a17      	ldr	r2, [pc, #92]	; (802232c <HAL_SPI_MspInit+0x88>)
 80222d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80222d4:	6413      	str	r3, [r2, #64]	; 0x40
 80222d6:	4b15      	ldr	r3, [pc, #84]	; (802232c <HAL_SPI_MspInit+0x88>)
 80222d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80222da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80222de:	613b      	str	r3, [r7, #16]
 80222e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80222e2:	2300      	movs	r3, #0
 80222e4:	60fb      	str	r3, [r7, #12]
 80222e6:	4b11      	ldr	r3, [pc, #68]	; (802232c <HAL_SPI_MspInit+0x88>)
 80222e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80222ea:	4a10      	ldr	r2, [pc, #64]	; (802232c <HAL_SPI_MspInit+0x88>)
 80222ec:	f043 0304 	orr.w	r3, r3, #4
 80222f0:	6313      	str	r3, [r2, #48]	; 0x30
 80222f2:	4b0e      	ldr	r3, [pc, #56]	; (802232c <HAL_SPI_MspInit+0x88>)
 80222f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80222f6:	f003 0304 	and.w	r3, r3, #4
 80222fa:	60fb      	str	r3, [r7, #12]
 80222fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80222fe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8022302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022304:	2302      	movs	r3, #2
 8022306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022308:	2300      	movs	r3, #0
 802230a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802230c:	2303      	movs	r3, #3
 802230e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8022310:	2306      	movs	r3, #6
 8022312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8022314:	f107 0314 	add.w	r3, r7, #20
 8022318:	4619      	mov	r1, r3
 802231a:	4805      	ldr	r0, [pc, #20]	; (8022330 <HAL_SPI_MspInit+0x8c>)
 802231c:	f001 fdb2 	bl	8023e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8022320:	bf00      	nop
 8022322:	3728      	adds	r7, #40	; 0x28
 8022324:	46bd      	mov	sp, r7
 8022326:	bd80      	pop	{r7, pc}
 8022328:	40003c00 	.word	0x40003c00
 802232c:	40023800 	.word	0x40023800
 8022330:	40020800 	.word	0x40020800

08022334 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8022334:	b480      	push	{r7}
 8022336:	b087      	sub	sp, #28
 8022338:	af00      	add	r7, sp, #0
 802233a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 802233c:	687b      	ldr	r3, [r7, #4]
 802233e:	681b      	ldr	r3, [r3, #0]
 8022340:	4a1f      	ldr	r2, [pc, #124]	; (80223c0 <HAL_TIM_PWM_MspInit+0x8c>)
 8022342:	4293      	cmp	r3, r2
 8022344:	d10e      	bne.n	8022364 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8022346:	2300      	movs	r3, #0
 8022348:	617b      	str	r3, [r7, #20]
 802234a:	4b1e      	ldr	r3, [pc, #120]	; (80223c4 <HAL_TIM_PWM_MspInit+0x90>)
 802234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802234e:	4a1d      	ldr	r2, [pc, #116]	; (80223c4 <HAL_TIM_PWM_MspInit+0x90>)
 8022350:	f043 0301 	orr.w	r3, r3, #1
 8022354:	6453      	str	r3, [r2, #68]	; 0x44
 8022356:	4b1b      	ldr	r3, [pc, #108]	; (80223c4 <HAL_TIM_PWM_MspInit+0x90>)
 8022358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802235a:	f003 0301 	and.w	r3, r3, #1
 802235e:	617b      	str	r3, [r7, #20]
 8022360:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8022362:	e026      	b.n	80223b2 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8022364:	687b      	ldr	r3, [r7, #4]
 8022366:	681b      	ldr	r3, [r3, #0]
 8022368:	4a17      	ldr	r2, [pc, #92]	; (80223c8 <HAL_TIM_PWM_MspInit+0x94>)
 802236a:	4293      	cmp	r3, r2
 802236c:	d10e      	bne.n	802238c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 802236e:	2300      	movs	r3, #0
 8022370:	613b      	str	r3, [r7, #16]
 8022372:	4b14      	ldr	r3, [pc, #80]	; (80223c4 <HAL_TIM_PWM_MspInit+0x90>)
 8022374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022376:	4a13      	ldr	r2, [pc, #76]	; (80223c4 <HAL_TIM_PWM_MspInit+0x90>)
 8022378:	f043 0302 	orr.w	r3, r3, #2
 802237c:	6413      	str	r3, [r2, #64]	; 0x40
 802237e:	4b11      	ldr	r3, [pc, #68]	; (80223c4 <HAL_TIM_PWM_MspInit+0x90>)
 8022380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022382:	f003 0302 	and.w	r3, r3, #2
 8022386:	613b      	str	r3, [r7, #16]
 8022388:	693b      	ldr	r3, [r7, #16]
}
 802238a:	e012      	b.n	80223b2 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM12)
 802238c:	687b      	ldr	r3, [r7, #4]
 802238e:	681b      	ldr	r3, [r3, #0]
 8022390:	4a0e      	ldr	r2, [pc, #56]	; (80223cc <HAL_TIM_PWM_MspInit+0x98>)
 8022392:	4293      	cmp	r3, r2
 8022394:	d10d      	bne.n	80223b2 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8022396:	2300      	movs	r3, #0
 8022398:	60fb      	str	r3, [r7, #12]
 802239a:	4b0a      	ldr	r3, [pc, #40]	; (80223c4 <HAL_TIM_PWM_MspInit+0x90>)
 802239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802239e:	4a09      	ldr	r2, [pc, #36]	; (80223c4 <HAL_TIM_PWM_MspInit+0x90>)
 80223a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80223a4:	6413      	str	r3, [r2, #64]	; 0x40
 80223a6:	4b07      	ldr	r3, [pc, #28]	; (80223c4 <HAL_TIM_PWM_MspInit+0x90>)
 80223a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80223aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80223ae:	60fb      	str	r3, [r7, #12]
 80223b0:	68fb      	ldr	r3, [r7, #12]
}
 80223b2:	bf00      	nop
 80223b4:	371c      	adds	r7, #28
 80223b6:	46bd      	mov	sp, r7
 80223b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223bc:	4770      	bx	lr
 80223be:	bf00      	nop
 80223c0:	40010000 	.word	0x40010000
 80223c4:	40023800 	.word	0x40023800
 80223c8:	40000400 	.word	0x40000400
 80223cc:	40001800 	.word	0x40001800

080223d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80223d0:	b580      	push	{r7, lr}
 80223d2:	b088      	sub	sp, #32
 80223d4:	af00      	add	r7, sp, #0
 80223d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80223d8:	687b      	ldr	r3, [r7, #4]
 80223da:	681b      	ldr	r3, [r3, #0]
 80223dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80223e0:	d116      	bne.n	8022410 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80223e2:	2300      	movs	r3, #0
 80223e4:	61fb      	str	r3, [r7, #28]
 80223e6:	4b40      	ldr	r3, [pc, #256]	; (80224e8 <HAL_TIM_Base_MspInit+0x118>)
 80223e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80223ea:	4a3f      	ldr	r2, [pc, #252]	; (80224e8 <HAL_TIM_Base_MspInit+0x118>)
 80223ec:	f043 0301 	orr.w	r3, r3, #1
 80223f0:	6413      	str	r3, [r2, #64]	; 0x40
 80223f2:	4b3d      	ldr	r3, [pc, #244]	; (80224e8 <HAL_TIM_Base_MspInit+0x118>)
 80223f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80223f6:	f003 0301 	and.w	r3, r3, #1
 80223fa:	61fb      	str	r3, [r7, #28]
 80223fc:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80223fe:	2200      	movs	r2, #0
 8022400:	2100      	movs	r1, #0
 8022402:	201c      	movs	r0, #28
 8022404:	f001 f999 	bl	802373a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8022408:	201c      	movs	r0, #28
 802240a:	f001 f9b2 	bl	8023772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 802240e:	e066      	b.n	80224de <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM5)
 8022410:	687b      	ldr	r3, [r7, #4]
 8022412:	681b      	ldr	r3, [r3, #0]
 8022414:	4a35      	ldr	r2, [pc, #212]	; (80224ec <HAL_TIM_Base_MspInit+0x11c>)
 8022416:	4293      	cmp	r3, r2
 8022418:	d116      	bne.n	8022448 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 802241a:	2300      	movs	r3, #0
 802241c:	61bb      	str	r3, [r7, #24]
 802241e:	4b32      	ldr	r3, [pc, #200]	; (80224e8 <HAL_TIM_Base_MspInit+0x118>)
 8022420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022422:	4a31      	ldr	r2, [pc, #196]	; (80224e8 <HAL_TIM_Base_MspInit+0x118>)
 8022424:	f043 0308 	orr.w	r3, r3, #8
 8022428:	6413      	str	r3, [r2, #64]	; 0x40
 802242a:	4b2f      	ldr	r3, [pc, #188]	; (80224e8 <HAL_TIM_Base_MspInit+0x118>)
 802242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802242e:	f003 0308 	and.w	r3, r3, #8
 8022432:	61bb      	str	r3, [r7, #24]
 8022434:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8022436:	2200      	movs	r2, #0
 8022438:	2100      	movs	r1, #0
 802243a:	2032      	movs	r0, #50	; 0x32
 802243c:	f001 f97d 	bl	802373a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8022440:	2032      	movs	r0, #50	; 0x32
 8022442:	f001 f996 	bl	8023772 <HAL_NVIC_EnableIRQ>
}
 8022446:	e04a      	b.n	80224de <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM6)
 8022448:	687b      	ldr	r3, [r7, #4]
 802244a:	681b      	ldr	r3, [r3, #0]
 802244c:	4a28      	ldr	r2, [pc, #160]	; (80224f0 <HAL_TIM_Base_MspInit+0x120>)
 802244e:	4293      	cmp	r3, r2
 8022450:	d116      	bne.n	8022480 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8022452:	2300      	movs	r3, #0
 8022454:	617b      	str	r3, [r7, #20]
 8022456:	4b24      	ldr	r3, [pc, #144]	; (80224e8 <HAL_TIM_Base_MspInit+0x118>)
 8022458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802245a:	4a23      	ldr	r2, [pc, #140]	; (80224e8 <HAL_TIM_Base_MspInit+0x118>)
 802245c:	f043 0310 	orr.w	r3, r3, #16
 8022460:	6413      	str	r3, [r2, #64]	; 0x40
 8022462:	4b21      	ldr	r3, [pc, #132]	; (80224e8 <HAL_TIM_Base_MspInit+0x118>)
 8022464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022466:	f003 0310 	and.w	r3, r3, #16
 802246a:	617b      	str	r3, [r7, #20]
 802246c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 802246e:	2200      	movs	r2, #0
 8022470:	2100      	movs	r1, #0
 8022472:	2036      	movs	r0, #54	; 0x36
 8022474:	f001 f961 	bl	802373a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8022478:	2036      	movs	r0, #54	; 0x36
 802247a:	f001 f97a 	bl	8023772 <HAL_NVIC_EnableIRQ>
}
 802247e:	e02e      	b.n	80224de <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 8022480:	687b      	ldr	r3, [r7, #4]
 8022482:	681b      	ldr	r3, [r3, #0]
 8022484:	4a1b      	ldr	r2, [pc, #108]	; (80224f4 <HAL_TIM_Base_MspInit+0x124>)
 8022486:	4293      	cmp	r3, r2
 8022488:	d116      	bne.n	80224b8 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 802248a:	2300      	movs	r3, #0
 802248c:	613b      	str	r3, [r7, #16]
 802248e:	4b16      	ldr	r3, [pc, #88]	; (80224e8 <HAL_TIM_Base_MspInit+0x118>)
 8022490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022492:	4a15      	ldr	r2, [pc, #84]	; (80224e8 <HAL_TIM_Base_MspInit+0x118>)
 8022494:	f043 0320 	orr.w	r3, r3, #32
 8022498:	6413      	str	r3, [r2, #64]	; 0x40
 802249a:	4b13      	ldr	r3, [pc, #76]	; (80224e8 <HAL_TIM_Base_MspInit+0x118>)
 802249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802249e:	f003 0320 	and.w	r3, r3, #32
 80224a2:	613b      	str	r3, [r7, #16]
 80224a4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80224a6:	2200      	movs	r2, #0
 80224a8:	2100      	movs	r1, #0
 80224aa:	2037      	movs	r0, #55	; 0x37
 80224ac:	f001 f945 	bl	802373a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80224b0:	2037      	movs	r0, #55	; 0x37
 80224b2:	f001 f95e 	bl	8023772 <HAL_NVIC_EnableIRQ>
}
 80224b6:	e012      	b.n	80224de <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM11)
 80224b8:	687b      	ldr	r3, [r7, #4]
 80224ba:	681b      	ldr	r3, [r3, #0]
 80224bc:	4a0e      	ldr	r2, [pc, #56]	; (80224f8 <HAL_TIM_Base_MspInit+0x128>)
 80224be:	4293      	cmp	r3, r2
 80224c0:	d10d      	bne.n	80224de <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80224c2:	2300      	movs	r3, #0
 80224c4:	60fb      	str	r3, [r7, #12]
 80224c6:	4b08      	ldr	r3, [pc, #32]	; (80224e8 <HAL_TIM_Base_MspInit+0x118>)
 80224c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80224ca:	4a07      	ldr	r2, [pc, #28]	; (80224e8 <HAL_TIM_Base_MspInit+0x118>)
 80224cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80224d0:	6453      	str	r3, [r2, #68]	; 0x44
 80224d2:	4b05      	ldr	r3, [pc, #20]	; (80224e8 <HAL_TIM_Base_MspInit+0x118>)
 80224d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80224d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80224da:	60fb      	str	r3, [r7, #12]
 80224dc:	68fb      	ldr	r3, [r7, #12]
}
 80224de:	bf00      	nop
 80224e0:	3720      	adds	r7, #32
 80224e2:	46bd      	mov	sp, r7
 80224e4:	bd80      	pop	{r7, pc}
 80224e6:	bf00      	nop
 80224e8:	40023800 	.word	0x40023800
 80224ec:	40000c00 	.word	0x40000c00
 80224f0:	40001000 	.word	0x40001000
 80224f4:	40001400 	.word	0x40001400
 80224f8:	40014800 	.word	0x40014800

080224fc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80224fc:	b580      	push	{r7, lr}
 80224fe:	b08c      	sub	sp, #48	; 0x30
 8022500:	af00      	add	r7, sp, #0
 8022502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8022504:	f107 031c 	add.w	r3, r7, #28
 8022508:	2200      	movs	r2, #0
 802250a:	601a      	str	r2, [r3, #0]
 802250c:	605a      	str	r2, [r3, #4]
 802250e:	609a      	str	r2, [r3, #8]
 8022510:	60da      	str	r2, [r3, #12]
 8022512:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8022514:	687b      	ldr	r3, [r7, #4]
 8022516:	681b      	ldr	r3, [r3, #0]
 8022518:	4a32      	ldr	r2, [pc, #200]	; (80225e4 <HAL_TIM_Encoder_MspInit+0xe8>)
 802251a:	4293      	cmp	r3, r2
 802251c:	d12c      	bne.n	8022578 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 802251e:	2300      	movs	r3, #0
 8022520:	61bb      	str	r3, [r7, #24]
 8022522:	4b31      	ldr	r3, [pc, #196]	; (80225e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8022524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022526:	4a30      	ldr	r2, [pc, #192]	; (80225e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8022528:	f043 0304 	orr.w	r3, r3, #4
 802252c:	6413      	str	r3, [r2, #64]	; 0x40
 802252e:	4b2e      	ldr	r3, [pc, #184]	; (80225e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8022530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022532:	f003 0304 	and.w	r3, r3, #4
 8022536:	61bb      	str	r3, [r7, #24]
 8022538:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 802253a:	2300      	movs	r3, #0
 802253c:	617b      	str	r3, [r7, #20]
 802253e:	4b2a      	ldr	r3, [pc, #168]	; (80225e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8022540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022542:	4a29      	ldr	r2, [pc, #164]	; (80225e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8022544:	f043 0302 	orr.w	r3, r3, #2
 8022548:	6313      	str	r3, [r2, #48]	; 0x30
 802254a:	4b27      	ldr	r3, [pc, #156]	; (80225e8 <HAL_TIM_Encoder_MspInit+0xec>)
 802254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802254e:	f003 0302 	and.w	r3, r3, #2
 8022552:	617b      	str	r3, [r7, #20]
 8022554:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8022556:	23c0      	movs	r3, #192	; 0xc0
 8022558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802255a:	2302      	movs	r3, #2
 802255c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802255e:	2300      	movs	r3, #0
 8022560:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8022562:	2300      	movs	r3, #0
 8022564:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8022566:	2302      	movs	r3, #2
 8022568:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802256a:	f107 031c 	add.w	r3, r7, #28
 802256e:	4619      	mov	r1, r3
 8022570:	481e      	ldr	r0, [pc, #120]	; (80225ec <HAL_TIM_Encoder_MspInit+0xf0>)
 8022572:	f001 fc87 	bl	8023e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8022576:	e030      	b.n	80225da <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8022578:	687b      	ldr	r3, [r7, #4]
 802257a:	681b      	ldr	r3, [r3, #0]
 802257c:	4a1c      	ldr	r2, [pc, #112]	; (80225f0 <HAL_TIM_Encoder_MspInit+0xf4>)
 802257e:	4293      	cmp	r3, r2
 8022580:	d12b      	bne.n	80225da <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8022582:	2300      	movs	r3, #0
 8022584:	613b      	str	r3, [r7, #16]
 8022586:	4b18      	ldr	r3, [pc, #96]	; (80225e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8022588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802258a:	4a17      	ldr	r2, [pc, #92]	; (80225e8 <HAL_TIM_Encoder_MspInit+0xec>)
 802258c:	f043 0302 	orr.w	r3, r3, #2
 8022590:	6453      	str	r3, [r2, #68]	; 0x44
 8022592:	4b15      	ldr	r3, [pc, #84]	; (80225e8 <HAL_TIM_Encoder_MspInit+0xec>)
 8022594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022596:	f003 0302 	and.w	r3, r3, #2
 802259a:	613b      	str	r3, [r7, #16]
 802259c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 802259e:	2300      	movs	r3, #0
 80225a0:	60fb      	str	r3, [r7, #12]
 80225a2:	4b11      	ldr	r3, [pc, #68]	; (80225e8 <HAL_TIM_Encoder_MspInit+0xec>)
 80225a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80225a6:	4a10      	ldr	r2, [pc, #64]	; (80225e8 <HAL_TIM_Encoder_MspInit+0xec>)
 80225a8:	f043 0304 	orr.w	r3, r3, #4
 80225ac:	6313      	str	r3, [r2, #48]	; 0x30
 80225ae:	4b0e      	ldr	r3, [pc, #56]	; (80225e8 <HAL_TIM_Encoder_MspInit+0xec>)
 80225b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80225b2:	f003 0304 	and.w	r3, r3, #4
 80225b6:	60fb      	str	r3, [r7, #12]
 80225b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80225ba:	23c0      	movs	r3, #192	; 0xc0
 80225bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80225be:	2302      	movs	r3, #2
 80225c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80225c2:	2300      	movs	r3, #0
 80225c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80225c6:	2300      	movs	r3, #0
 80225c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80225ca:	2303      	movs	r3, #3
 80225cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80225ce:	f107 031c 	add.w	r3, r7, #28
 80225d2:	4619      	mov	r1, r3
 80225d4:	4807      	ldr	r0, [pc, #28]	; (80225f4 <HAL_TIM_Encoder_MspInit+0xf8>)
 80225d6:	f001 fc55 	bl	8023e84 <HAL_GPIO_Init>
}
 80225da:	bf00      	nop
 80225dc:	3730      	adds	r7, #48	; 0x30
 80225de:	46bd      	mov	sp, r7
 80225e0:	bd80      	pop	{r7, pc}
 80225e2:	bf00      	nop
 80225e4:	40000800 	.word	0x40000800
 80225e8:	40023800 	.word	0x40023800
 80225ec:	40020400 	.word	0x40020400
 80225f0:	40010400 	.word	0x40010400
 80225f4:	40020800 	.word	0x40020800

080225f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80225f8:	b580      	push	{r7, lr}
 80225fa:	b08c      	sub	sp, #48	; 0x30
 80225fc:	af00      	add	r7, sp, #0
 80225fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8022600:	f107 031c 	add.w	r3, r7, #28
 8022604:	2200      	movs	r2, #0
 8022606:	601a      	str	r2, [r3, #0]
 8022608:	605a      	str	r2, [r3, #4]
 802260a:	609a      	str	r2, [r3, #8]
 802260c:	60da      	str	r2, [r3, #12]
 802260e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8022610:	687b      	ldr	r3, [r7, #4]
 8022612:	681b      	ldr	r3, [r3, #0]
 8022614:	4a59      	ldr	r2, [pc, #356]	; (802277c <HAL_TIM_MspPostInit+0x184>)
 8022616:	4293      	cmp	r3, r2
 8022618:	d11f      	bne.n	802265a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802261a:	2300      	movs	r3, #0
 802261c:	61bb      	str	r3, [r7, #24]
 802261e:	4b58      	ldr	r3, [pc, #352]	; (8022780 <HAL_TIM_MspPostInit+0x188>)
 8022620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022622:	4a57      	ldr	r2, [pc, #348]	; (8022780 <HAL_TIM_MspPostInit+0x188>)
 8022624:	f043 0301 	orr.w	r3, r3, #1
 8022628:	6313      	str	r3, [r2, #48]	; 0x30
 802262a:	4b55      	ldr	r3, [pc, #340]	; (8022780 <HAL_TIM_MspPostInit+0x188>)
 802262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802262e:	f003 0301 	and.w	r3, r3, #1
 8022632:	61bb      	str	r3, [r7, #24]
 8022634:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8022636:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 802263a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802263c:	2302      	movs	r3, #2
 802263e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022640:	2300      	movs	r3, #0
 8022642:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8022644:	2300      	movs	r3, #0
 8022646:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8022648:	2301      	movs	r3, #1
 802264a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802264c:	f107 031c 	add.w	r3, r7, #28
 8022650:	4619      	mov	r1, r3
 8022652:	484c      	ldr	r0, [pc, #304]	; (8022784 <HAL_TIM_MspPostInit+0x18c>)
 8022654:	f001 fc16 	bl	8023e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8022658:	e08b      	b.n	8022772 <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM3)
 802265a:	687b      	ldr	r3, [r7, #4]
 802265c:	681b      	ldr	r3, [r3, #0]
 802265e:	4a4a      	ldr	r2, [pc, #296]	; (8022788 <HAL_TIM_MspPostInit+0x190>)
 8022660:	4293      	cmp	r3, r2
 8022662:	d13d      	bne.n	80226e0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8022664:	2300      	movs	r3, #0
 8022666:	617b      	str	r3, [r7, #20]
 8022668:	4b45      	ldr	r3, [pc, #276]	; (8022780 <HAL_TIM_MspPostInit+0x188>)
 802266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802266c:	4a44      	ldr	r2, [pc, #272]	; (8022780 <HAL_TIM_MspPostInit+0x188>)
 802266e:	f043 0304 	orr.w	r3, r3, #4
 8022672:	6313      	str	r3, [r2, #48]	; 0x30
 8022674:	4b42      	ldr	r3, [pc, #264]	; (8022780 <HAL_TIM_MspPostInit+0x188>)
 8022676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022678:	f003 0304 	and.w	r3, r3, #4
 802267c:	617b      	str	r3, [r7, #20]
 802267e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8022680:	2300      	movs	r3, #0
 8022682:	613b      	str	r3, [r7, #16]
 8022684:	4b3e      	ldr	r3, [pc, #248]	; (8022780 <HAL_TIM_MspPostInit+0x188>)
 8022686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022688:	4a3d      	ldr	r2, [pc, #244]	; (8022780 <HAL_TIM_MspPostInit+0x188>)
 802268a:	f043 0302 	orr.w	r3, r3, #2
 802268e:	6313      	str	r3, [r2, #48]	; 0x30
 8022690:	4b3b      	ldr	r3, [pc, #236]	; (8022780 <HAL_TIM_MspPostInit+0x188>)
 8022692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022694:	f003 0302 	and.w	r3, r3, #2
 8022698:	613b      	str	r3, [r7, #16]
 802269a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 802269c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80226a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80226a2:	2302      	movs	r3, #2
 80226a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80226a6:	2300      	movs	r3, #0
 80226a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80226aa:	2300      	movs	r3, #0
 80226ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80226ae:	2302      	movs	r3, #2
 80226b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80226b2:	f107 031c 	add.w	r3, r7, #28
 80226b6:	4619      	mov	r1, r3
 80226b8:	4834      	ldr	r0, [pc, #208]	; (802278c <HAL_TIM_MspPostInit+0x194>)
 80226ba:	f001 fbe3 	bl	8023e84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80226be:	2330      	movs	r3, #48	; 0x30
 80226c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80226c2:	2302      	movs	r3, #2
 80226c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80226c6:	2300      	movs	r3, #0
 80226c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80226ca:	2300      	movs	r3, #0
 80226cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80226ce:	2302      	movs	r3, #2
 80226d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80226d2:	f107 031c 	add.w	r3, r7, #28
 80226d6:	4619      	mov	r1, r3
 80226d8:	482d      	ldr	r0, [pc, #180]	; (8022790 <HAL_TIM_MspPostInit+0x198>)
 80226da:	f001 fbd3 	bl	8023e84 <HAL_GPIO_Init>
}
 80226de:	e048      	b.n	8022772 <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM11)
 80226e0:	687b      	ldr	r3, [r7, #4]
 80226e2:	681b      	ldr	r3, [r3, #0]
 80226e4:	4a2b      	ldr	r2, [pc, #172]	; (8022794 <HAL_TIM_MspPostInit+0x19c>)
 80226e6:	4293      	cmp	r3, r2
 80226e8:	d11f      	bne.n	802272a <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80226ea:	2300      	movs	r3, #0
 80226ec:	60fb      	str	r3, [r7, #12]
 80226ee:	4b24      	ldr	r3, [pc, #144]	; (8022780 <HAL_TIM_MspPostInit+0x188>)
 80226f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80226f2:	4a23      	ldr	r2, [pc, #140]	; (8022780 <HAL_TIM_MspPostInit+0x188>)
 80226f4:	f043 0302 	orr.w	r3, r3, #2
 80226f8:	6313      	str	r3, [r2, #48]	; 0x30
 80226fa:	4b21      	ldr	r3, [pc, #132]	; (8022780 <HAL_TIM_MspPostInit+0x188>)
 80226fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80226fe:	f003 0302 	and.w	r3, r3, #2
 8022702:	60fb      	str	r3, [r7, #12]
 8022704:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8022706:	f44f 7300 	mov.w	r3, #512	; 0x200
 802270a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802270c:	2302      	movs	r3, #2
 802270e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022710:	2300      	movs	r3, #0
 8022712:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8022714:	2300      	movs	r3, #0
 8022716:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8022718:	2303      	movs	r3, #3
 802271a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802271c:	f107 031c 	add.w	r3, r7, #28
 8022720:	4619      	mov	r1, r3
 8022722:	481b      	ldr	r0, [pc, #108]	; (8022790 <HAL_TIM_MspPostInit+0x198>)
 8022724:	f001 fbae 	bl	8023e84 <HAL_GPIO_Init>
}
 8022728:	e023      	b.n	8022772 <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM12)
 802272a:	687b      	ldr	r3, [r7, #4]
 802272c:	681b      	ldr	r3, [r3, #0]
 802272e:	4a1a      	ldr	r2, [pc, #104]	; (8022798 <HAL_TIM_MspPostInit+0x1a0>)
 8022730:	4293      	cmp	r3, r2
 8022732:	d11e      	bne.n	8022772 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8022734:	2300      	movs	r3, #0
 8022736:	60bb      	str	r3, [r7, #8]
 8022738:	4b11      	ldr	r3, [pc, #68]	; (8022780 <HAL_TIM_MspPostInit+0x188>)
 802273a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802273c:	4a10      	ldr	r2, [pc, #64]	; (8022780 <HAL_TIM_MspPostInit+0x188>)
 802273e:	f043 0302 	orr.w	r3, r3, #2
 8022742:	6313      	str	r3, [r2, #48]	; 0x30
 8022744:	4b0e      	ldr	r3, [pc, #56]	; (8022780 <HAL_TIM_MspPostInit+0x188>)
 8022746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022748:	f003 0302 	and.w	r3, r3, #2
 802274c:	60bb      	str	r3, [r7, #8]
 802274e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8022750:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8022754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022756:	2302      	movs	r3, #2
 8022758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802275a:	2300      	movs	r3, #0
 802275c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 802275e:	2300      	movs	r3, #0
 8022760:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8022762:	2309      	movs	r3, #9
 8022764:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8022766:	f107 031c 	add.w	r3, r7, #28
 802276a:	4619      	mov	r1, r3
 802276c:	4808      	ldr	r0, [pc, #32]	; (8022790 <HAL_TIM_MspPostInit+0x198>)
 802276e:	f001 fb89 	bl	8023e84 <HAL_GPIO_Init>
}
 8022772:	bf00      	nop
 8022774:	3730      	adds	r7, #48	; 0x30
 8022776:	46bd      	mov	sp, r7
 8022778:	bd80      	pop	{r7, pc}
 802277a:	bf00      	nop
 802277c:	40010000 	.word	0x40010000
 8022780:	40023800 	.word	0x40023800
 8022784:	40020000 	.word	0x40020000
 8022788:	40000400 	.word	0x40000400
 802278c:	40020800 	.word	0x40020800
 8022790:	40020400 	.word	0x40020400
 8022794:	40014800 	.word	0x40014800
 8022798:	40001800 	.word	0x40001800

0802279c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 802279c:	b480      	push	{r7}
 802279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80227a0:	e7fe      	b.n	80227a0 <NMI_Handler+0x4>

080227a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80227a2:	b480      	push	{r7}
 80227a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80227a6:	e7fe      	b.n	80227a6 <HardFault_Handler+0x4>

080227a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80227a8:	b480      	push	{r7}
 80227aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80227ac:	e7fe      	b.n	80227ac <MemManage_Handler+0x4>

080227ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80227ae:	b480      	push	{r7}
 80227b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80227b2:	e7fe      	b.n	80227b2 <BusFault_Handler+0x4>

080227b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80227b4:	b480      	push	{r7}
 80227b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80227b8:	e7fe      	b.n	80227b8 <UsageFault_Handler+0x4>

080227ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80227ba:	b480      	push	{r7}
 80227bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80227be:	bf00      	nop
 80227c0:	46bd      	mov	sp, r7
 80227c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227c6:	4770      	bx	lr

080227c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80227c8:	b480      	push	{r7}
 80227ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80227cc:	bf00      	nop
 80227ce:	46bd      	mov	sp, r7
 80227d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227d4:	4770      	bx	lr

080227d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80227d6:	b480      	push	{r7}
 80227d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80227da:	bf00      	nop
 80227dc:	46bd      	mov	sp, r7
 80227de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227e2:	4770      	bx	lr

080227e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80227e4:	b580      	push	{r7, lr}
 80227e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80227e8:	f000 fa96 	bl	8022d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80227ec:	bf00      	nop
 80227ee:	bd80      	pop	{r7, pc}

080227f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80227f0:	b580      	push	{r7, lr}
 80227f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80227f4:	4802      	ldr	r0, [pc, #8]	; (8022800 <TIM2_IRQHandler+0x10>)
 80227f6:	f002 fc56 	bl	80250a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80227fa:	bf00      	nop
 80227fc:	bd80      	pop	{r7, pc}
 80227fe:	bf00      	nop
 8022800:	200112c8 	.word	0x200112c8

08022804 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8022804:	b580      	push	{r7, lr}
 8022806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8022808:	4802      	ldr	r0, [pc, #8]	; (8022814 <TIM5_IRQHandler+0x10>)
 802280a:	f002 fc4c 	bl	80250a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 802280e:	bf00      	nop
 8022810:	bd80      	pop	{r7, pc}
 8022812:	bf00      	nop
 8022814:	20011088 	.word	0x20011088

08022818 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8022818:	b580      	push	{r7, lr}
 802281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 802281c:	4802      	ldr	r0, [pc, #8]	; (8022828 <TIM6_DAC_IRQHandler+0x10>)
 802281e:	f002 fc42 	bl	80250a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8022822:	bf00      	nop
 8022824:	bd80      	pop	{r7, pc}
 8022826:	bf00      	nop
 8022828:	20011248 	.word	0x20011248

0802282c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 802282c:	b580      	push	{r7, lr}
 802282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8022830:	4802      	ldr	r0, [pc, #8]	; (802283c <TIM7_IRQHandler+0x10>)
 8022832:	f002 fc38 	bl	80250a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8022836:	bf00      	nop
 8022838:	bd80      	pop	{r7, pc}
 802283a:	bf00      	nop
 802283c:	20011348 	.word	0x20011348

08022840 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8022840:	b580      	push	{r7, lr}
 8022842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8022844:	4802      	ldr	r0, [pc, #8]	; (8022850 <DMA2_Stream0_IRQHandler+0x10>)
 8022846:	f001 f8b5 	bl	80239b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 802284a:	bf00      	nop
 802284c:	bd80      	pop	{r7, pc}
 802284e:	bf00      	nop
 8022850:	200111e8 	.word	0x200111e8

08022854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8022854:	b580      	push	{r7, lr}
 8022856:	b086      	sub	sp, #24
 8022858:	af00      	add	r7, sp, #0
 802285a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 802285c:	4a14      	ldr	r2, [pc, #80]	; (80228b0 <_sbrk+0x5c>)
 802285e:	4b15      	ldr	r3, [pc, #84]	; (80228b4 <_sbrk+0x60>)
 8022860:	1ad3      	subs	r3, r2, r3
 8022862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8022864:	697b      	ldr	r3, [r7, #20]
 8022866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8022868:	4b13      	ldr	r3, [pc, #76]	; (80228b8 <_sbrk+0x64>)
 802286a:	681b      	ldr	r3, [r3, #0]
 802286c:	2b00      	cmp	r3, #0
 802286e:	d102      	bne.n	8022876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8022870:	4b11      	ldr	r3, [pc, #68]	; (80228b8 <_sbrk+0x64>)
 8022872:	4a12      	ldr	r2, [pc, #72]	; (80228bc <_sbrk+0x68>)
 8022874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8022876:	4b10      	ldr	r3, [pc, #64]	; (80228b8 <_sbrk+0x64>)
 8022878:	681a      	ldr	r2, [r3, #0]
 802287a:	687b      	ldr	r3, [r7, #4]
 802287c:	4413      	add	r3, r2
 802287e:	693a      	ldr	r2, [r7, #16]
 8022880:	429a      	cmp	r2, r3
 8022882:	d207      	bcs.n	8022894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8022884:	f003 fab0 	bl	8025de8 <__errno>
 8022888:	4602      	mov	r2, r0
 802288a:	230c      	movs	r3, #12
 802288c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 802288e:	f04f 33ff 	mov.w	r3, #4294967295
 8022892:	e009      	b.n	80228a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8022894:	4b08      	ldr	r3, [pc, #32]	; (80228b8 <_sbrk+0x64>)
 8022896:	681b      	ldr	r3, [r3, #0]
 8022898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 802289a:	4b07      	ldr	r3, [pc, #28]	; (80228b8 <_sbrk+0x64>)
 802289c:	681a      	ldr	r2, [r3, #0]
 802289e:	687b      	ldr	r3, [r7, #4]
 80228a0:	4413      	add	r3, r2
 80228a2:	4a05      	ldr	r2, [pc, #20]	; (80228b8 <_sbrk+0x64>)
 80228a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80228a6:	68fb      	ldr	r3, [r7, #12]
}
 80228a8:	4618      	mov	r0, r3
 80228aa:	3718      	adds	r7, #24
 80228ac:	46bd      	mov	sp, r7
 80228ae:	bd80      	pop	{r7, pc}
 80228b0:	20020000 	.word	0x20020000
 80228b4:	00000400 	.word	0x00000400
 80228b8:	20000218 	.word	0x20000218
 80228bc:	20011390 	.word	0x20011390

080228c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80228c0:	b480      	push	{r7}
 80228c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80228c4:	4b08      	ldr	r3, [pc, #32]	; (80228e8 <SystemInit+0x28>)
 80228c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80228ca:	4a07      	ldr	r2, [pc, #28]	; (80228e8 <SystemInit+0x28>)
 80228cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80228d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80228d4:	4b04      	ldr	r3, [pc, #16]	; (80228e8 <SystemInit+0x28>)
 80228d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80228da:	609a      	str	r2, [r3, #8]
#endif
}
 80228dc:	bf00      	nop
 80228de:	46bd      	mov	sp, r7
 80228e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228e4:	4770      	bx	lr
 80228e6:	bf00      	nop
 80228e8:	e000ed00 	.word	0xe000ed00

080228ec <_ZN4TestC1EP7EncoderP8Iim42652P3LedP10LineSensorP9LineTraceP5MotorP12RotarySwitchP10SideSensorP15VelocityControl>:
#include "declare_extern.h"
#include <stdio.h>
#include <math.h>

#ifdef TEST_MODE
Test::Test(Encoder *encoder,
 80228ec:	b480      	push	{r7}
 80228ee:	b085      	sub	sp, #20
 80228f0:	af00      	add	r7, sp, #0
 80228f2:	60f8      	str	r0, [r7, #12]
 80228f4:	60b9      	str	r1, [r7, #8]
 80228f6:	607a      	str	r2, [r7, #4]
 80228f8:	603b      	str	r3, [r7, #0]
           Motor *motor,
           RotarySwitch *rotary_switch,
           SideSensor *side_sensor,
           VelocityControl *velocity_control)
{
    encoder_ = encoder;
 80228fa:	68fb      	ldr	r3, [r7, #12]
 80228fc:	68ba      	ldr	r2, [r7, #8]
 80228fe:	601a      	str	r2, [r3, #0]
    iim_42652_ = iim_42652;
 8022900:	68fb      	ldr	r3, [r7, #12]
 8022902:	687a      	ldr	r2, [r7, #4]
 8022904:	605a      	str	r2, [r3, #4]
    led_ = led;
 8022906:	68fb      	ldr	r3, [r7, #12]
 8022908:	683a      	ldr	r2, [r7, #0]
 802290a:	609a      	str	r2, [r3, #8]
    line_sensor_ = line_sensor;
 802290c:	68fb      	ldr	r3, [r7, #12]
 802290e:	69ba      	ldr	r2, [r7, #24]
 8022910:	60da      	str	r2, [r3, #12]
    line_trace_ = line_trace;
 8022912:	68fb      	ldr	r3, [r7, #12]
 8022914:	69fa      	ldr	r2, [r7, #28]
 8022916:	611a      	str	r2, [r3, #16]
    motor_ = motor;
 8022918:	68fb      	ldr	r3, [r7, #12]
 802291a:	6a3a      	ldr	r2, [r7, #32]
 802291c:	615a      	str	r2, [r3, #20]
    rotary_switch_ = rotary_switch;
 802291e:	68fb      	ldr	r3, [r7, #12]
 8022920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022922:	619a      	str	r2, [r3, #24]
    side_sensor_ = side_sensor;
 8022924:	68fb      	ldr	r3, [r7, #12]
 8022926:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8022928:	61da      	str	r2, [r3, #28]
    velocity_control_ = velocity_control;
 802292a:	68fb      	ldr	r3, [r7, #12]
 802292c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802292e:	621a      	str	r2, [r3, #32]
}
 8022930:	68fb      	ldr	r3, [r7, #12]
 8022932:	4618      	mov	r0, r3
 8022934:	3714      	adds	r7, #20
 8022936:	46bd      	mov	sp, r7
 8022938:	f85d 7b04 	ldr.w	r7, [sp], #4
 802293c:	4770      	bx	lr
	...

08022940 <_ZN4Test4InitEv>:

void Test::Init()
{
 8022940:	b580      	push	{r7, lr}
 8022942:	b082      	sub	sp, #8
 8022944:	af00      	add	r7, sp, #0
 8022946:	6078      	str	r0, [r7, #4]
    encoder_->Init();
 8022948:	687b      	ldr	r3, [r7, #4]
 802294a:	681b      	ldr	r3, [r3, #0]
 802294c:	4618      	mov	r0, r3
 802294e:	f7fe f9fb 	bl	8020d48 <_ZN7Encoder4InitEv>
    line_sensor_->Init();
 8022952:	687b      	ldr	r3, [r7, #4]
 8022954:	68db      	ldr	r3, [r3, #12]
 8022956:	4618      	mov	r0, r3
 8022958:	f7fe fbb6 	bl	80210c8 <_ZN10LineSensor4InitEv>
    motor_->Init();
 802295c:	687b      	ldr	r3, [r7, #4]
 802295e:	695b      	ldr	r3, [r3, #20]
 8022960:	4618      	mov	r0, r3
 8022962:	f7ff fae9 	bl	8021f38 <_ZN5Motor4InitEv>

    if(rotary_switch_->State() != 0x00)
 8022966:	687b      	ldr	r3, [r7, #4]
 8022968:	699b      	ldr	r3, [r3, #24]
 802296a:	4618      	mov	r0, r3
 802296c:	f7ff fb26 	bl	8021fbc <_ZN12RotarySwitch5StateEv>
 8022970:	4603      	mov	r3, r0
 8022972:	2b00      	cmp	r3, #0
 8022974:	bf14      	ite	ne
 8022976:	2301      	movne	r3, #1
 8022978:	2300      	moveq	r3, #0
 802297a:	b2db      	uxtb	r3, r3
 802297c:	2b00      	cmp	r3, #0
 802297e:	d013      	beq.n	80229a8 <_ZN4Test4InitEv+0x68>
    {
        led_->Blink(3, 'Y', 'M');
 8022980:	687b      	ldr	r3, [r7, #4]
 8022982:	6898      	ldr	r0, [r3, #8]
 8022984:	234d      	movs	r3, #77	; 0x4d
 8022986:	2259      	movs	r2, #89	; 0x59
 8022988:	2103      	movs	r1, #3
 802298a:	f7fe fb2f 	bl	8020fec <_ZN3Led5BlinkEhcc>
        led_->ColorOrder('X');
 802298e:	687b      	ldr	r3, [r7, #4]
 8022990:	689b      	ldr	r3, [r3, #8]
 8022992:	2158      	movs	r1, #88	; 0x58
 8022994:	4618      	mov	r0, r3
 8022996:	f7fe fa4d 	bl	8020e34 <_ZN3Led10ColorOrderEc>

        HAL_TIM_Base_Start_IT(&htim7);
 802299a:	4809      	ldr	r0, [pc, #36]	; (80229c0 <_ZN4Test4InitEv+0x80>)
 802299c:	f002 fa2d 	bl	8024dfa <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Start_IT(&htim6);
 80229a0:	4808      	ldr	r0, [pc, #32]	; (80229c4 <_ZN4Test4InitEv+0x84>)
 80229a2:	f002 fa2a 	bl	8024dfa <HAL_TIM_Base_Start_IT>
    }
    else led_->Blink(3, 'B', 'X');
}
 80229a6:	e006      	b.n	80229b6 <_ZN4Test4InitEv+0x76>
    else led_->Blink(3, 'B', 'X');
 80229a8:	687b      	ldr	r3, [r7, #4]
 80229aa:	6898      	ldr	r0, [r3, #8]
 80229ac:	2358      	movs	r3, #88	; 0x58
 80229ae:	2242      	movs	r2, #66	; 0x42
 80229b0:	2103      	movs	r1, #3
 80229b2:	f7fe fb1b 	bl	8020fec <_ZN3Led5BlinkEhcc>
}
 80229b6:	bf00      	nop
 80229b8:	3708      	adds	r7, #8
 80229ba:	46bd      	mov	sp, r7
 80229bc:	bd80      	pop	{r7, pc}
 80229be:	bf00      	nop
 80229c0:	20011348 	.word	0x20011348
 80229c4:	20011248 	.word	0x20011248

080229c8 <_ZN4Test4LoopEv>:

void Test::Loop()
{
 80229c8:	b480      	push	{r7}
 80229ca:	b083      	sub	sp, #12
 80229cc:	af00      	add	r7, sp, #0
 80229ce:	6078      	str	r0, [r7, #4]
    //printf("Hello,World!!\r\n");
}
 80229d0:	bf00      	nop
 80229d2:	370c      	adds	r7, #12
 80229d4:	46bd      	mov	sp, r7
 80229d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229da:	4770      	bx	lr

080229dc <_ZN4Test6Timer7Ev>:

void Test::Timer7()
{
 80229dc:	b580      	push	{r7, lr}
 80229de:	b082      	sub	sp, #8
 80229e0:	af00      	add	r7, sp, #0
 80229e2:	6078      	str	r0, [r7, #4]
    line_sensor_->StoreConsecutiveBuff();
 80229e4:	687b      	ldr	r3, [r7, #4]
 80229e6:	68db      	ldr	r3, [r3, #12]
 80229e8:	4618      	mov	r0, r3
 80229ea:	f7fe fba7 	bl	802113c <_ZN10LineSensor20StoreConsecutiveBuffEv>
}
 80229ee:	bf00      	nop
 80229f0:	3708      	adds	r7, #8
 80229f2:	46bd      	mov	sp, r7
 80229f4:	bd80      	pop	{r7, pc}

080229f6 <_ZN4Test6Timer6Ev>:

void Test::Timer6()
{
 80229f6:	b580      	push	{r7, lr}
 80229f8:	b082      	sub	sp, #8
 80229fa:	af00      	add	r7, sp, #0
 80229fc:	6078      	str	r0, [r7, #4]
    TestImu();
 80229fe:	6878      	ldr	r0, [r7, #4]
 8022a00:	f000 f806 	bl	8022a10 <_ZN4Test7TestImuEv>
    //TestLineSensor();
    //TestSideSensor();
    //TestEncoder();
    //MonitorLog();
    //TestMotor();
}
 8022a04:	bf00      	nop
 8022a06:	3708      	adds	r7, #8
 8022a08:	46bd      	mov	sp, r7
 8022a0a:	bd80      	pop	{r7, pc}
 8022a0c:	0000      	movs	r0, r0
	...

08022a10 <_ZN4Test7TestImuEv>:

void Test::TestImu()
{
 8022a10:	b590      	push	{r4, r7, lr}
 8022a12:	b087      	sub	sp, #28
 8022a14:	af00      	add	r7, sp, #0
 8022a16:	6078      	str	r0, [r7, #4]
    double degree = iim_42652_->GetDegreeStackZ();
 8022a18:	687b      	ldr	r3, [r7, #4]
 8022a1a:	685b      	ldr	r3, [r3, #4]
 8022a1c:	4618      	mov	r0, r3
 8022a1e:	f7fe f9e6 	bl	8020dee <_ZN8Iim4265215GetDegreeStackZEv>
 8022a22:	ed87 0b04 	vstr	d0, [r7, #16]
    float radian = static_cast<float>(degree * M_PI / 180.0);
 8022a26:	a319      	add	r3, pc, #100	; (adr r3, 8022a8c <_ZN4Test7TestImuEv+0x7c>)
 8022a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022a2c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8022a30:	f7fd fcca 	bl	80203c8 <__aeabi_dmul>
 8022a34:	4603      	mov	r3, r0
 8022a36:	460c      	mov	r4, r1
 8022a38:	4618      	mov	r0, r3
 8022a3a:	4621      	mov	r1, r4
 8022a3c:	f04f 0200 	mov.w	r2, #0
 8022a40:	4b0f      	ldr	r3, [pc, #60]	; (8022a80 <_ZN4Test7TestImuEv+0x70>)
 8022a42:	f7fd fdeb 	bl	802061c <__aeabi_ddiv>
 8022a46:	4603      	mov	r3, r0
 8022a48:	460c      	mov	r4, r1
 8022a4a:	4618      	mov	r0, r3
 8022a4c:	4621      	mov	r1, r4
 8022a4e:	f7fd ff93 	bl	8020978 <__aeabi_d2f>
 8022a52:	4603      	mov	r3, r0
 8022a54:	60fb      	str	r3, [r7, #12]
    iim_42652_->ResetDegreeStackZ();
 8022a56:	687b      	ldr	r3, [r7, #4]
 8022a58:	685b      	ldr	r3, [r3, #4]
 8022a5a:	4618      	mov	r0, r3
 8022a5c:	f7fe f9b7 	bl	8020dce <_ZN8Iim4265217ResetDegreeStackZEv>
    //logging_radian_buff_ = radian;
    g_radian = radian;
 8022a60:	4a08      	ldr	r2, [pc, #32]	; (8022a84 <_ZN4Test7TestImuEv+0x74>)
 8022a62:	68fb      	ldr	r3, [r7, #12]
 8022a64:	6013      	str	r3, [r2, #0]
    monitor_count++;
 8022a66:	4b08      	ldr	r3, [pc, #32]	; (8022a88 <_ZN4Test7TestImuEv+0x78>)
 8022a68:	881b      	ldrh	r3, [r3, #0]
 8022a6a:	3301      	adds	r3, #1
 8022a6c:	b29a      	uxth	r2, r3
 8022a6e:	4b06      	ldr	r3, [pc, #24]	; (8022a88 <_ZN4Test7TestImuEv+0x78>)
 8022a70:	801a      	strh	r2, [r3, #0]
}
 8022a72:	bf00      	nop
 8022a74:	371c      	adds	r7, #28
 8022a76:	46bd      	mov	sp, r7
 8022a78:	bd90      	pop	{r4, r7, pc}
 8022a7a:	bf00      	nop
 8022a7c:	f3af 8000 	nop.w
 8022a80:	40668000 	.word	0x40668000
 8022a84:	20000200 	.word	0x20000200
 8022a88:	20010fb0 	.word	0x20010fb0
 8022a8c:	54442d18 	.word	0x54442d18
 8022a90:	400921fb 	.word	0x400921fb

08022a94 <_ZN15VelocityControlC1EP7Encoder>:
#include "velocity_control.hpp"
#include "declare_extern.h"

VelocityControl::VelocityControl(Encoder *encoder) : integral_error_(0)
 8022a94:	b480      	push	{r7}
 8022a96:	b083      	sub	sp, #12
 8022a98:	af00      	add	r7, sp, #0
 8022a9a:	6078      	str	r0, [r7, #4]
 8022a9c:	6039      	str	r1, [r7, #0]
 8022a9e:	687b      	ldr	r3, [r7, #4]
 8022aa0:	f04f 0200 	mov.w	r2, #0
 8022aa4:	601a      	str	r2, [r3, #0]
{
    encoder_ = encoder;
 8022aa6:	687b      	ldr	r3, [r7, #4]
 8022aa8:	683a      	ldr	r2, [r7, #0]
 8022aaa:	605a      	str	r2, [r3, #4]
}
 8022aac:	687b      	ldr	r3, [r7, #4]
 8022aae:	4618      	mov	r0, r3
 8022ab0:	370c      	adds	r7, #12
 8022ab2:	46bd      	mov	sp, r7
 8022ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ab8:	4770      	bx	lr
	...

08022abc <Init>:
    &velocity_control
);
#endif // TEST_MODE

void Init()
{
 8022abc:	b580      	push	{r7, lr}
 8022abe:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Init();
#else // TEST_MODE
    test.Init();
 8022ac0:	4802      	ldr	r0, [pc, #8]	; (8022acc <Init+0x10>)
 8022ac2:	f7ff ff3d 	bl	8022940 <_ZN4Test4InitEv>
#endif // TEST_MODE
}
 8022ac6:	bf00      	nop
 8022ac8:	bd80      	pop	{r7, pc}
 8022aca:	bf00      	nop
 8022acc:	20010f84 	.word	0x20010f84

08022ad0 <InterruptTim7>:

void InterruptTim7()
{
 8022ad0:	b580      	push	{r7, lr}
 8022ad2:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Timer7();
#else // TEST_MODE
    test.Timer7();
 8022ad4:	4804      	ldr	r0, [pc, #16]	; (8022ae8 <InterruptTim7+0x18>)
 8022ad6:	f7ff ff81 	bl	80229dc <_ZN4Test6Timer7Ev>
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim7++;
 8022ada:	4b04      	ldr	r3, [pc, #16]	; (8022aec <InterruptTim7+0x1c>)
 8022adc:	681b      	ldr	r3, [r3, #0]
 8022ade:	3301      	adds	r3, #1
 8022ae0:	4a02      	ldr	r2, [pc, #8]	; (8022aec <InterruptTim7+0x1c>)
 8022ae2:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8022ae4:	bf00      	nop
 8022ae6:	bd80      	pop	{r7, pc}
 8022ae8:	20010f84 	.word	0x20010f84
 8022aec:	2000020c 	.word	0x2000020c

08022af0 <InterruptTim6>:

void InterruptTim6()
{
 8022af0:	b580      	push	{r7, lr}
 8022af2:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.RunMode();
#else // TEST_MODE
    test.Timer6();
 8022af4:	4804      	ldr	r0, [pc, #16]	; (8022b08 <InterruptTim6+0x18>)
 8022af6:	f7ff ff7e 	bl	80229f6 <_ZN4Test6Timer6Ev>
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim6++;
 8022afa:	4b04      	ldr	r3, [pc, #16]	; (8022b0c <InterruptTim6+0x1c>)
 8022afc:	681b      	ldr	r3, [r3, #0]
 8022afe:	3301      	adds	r3, #1
 8022b00:	4a02      	ldr	r2, [pc, #8]	; (8022b0c <InterruptTim6+0x1c>)
 8022b02:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8022b04:	bf00      	nop
 8022b06:	bd80      	pop	{r7, pc}
 8022b08:	20010f84 	.word	0x20010f84
 8022b0c:	20000210 	.word	0x20000210

08022b10 <InterruptTim2>:

void InterruptTim2()
{
 8022b10:	b480      	push	{r7}
 8022b12:	af00      	add	r7, sp, #0
#ifndef TEST_MODE
    run.Timer2();
#endif // TEST_MODE

#ifdef DEBUG_MODE
    g_tim2++;
 8022b14:	4b04      	ldr	r3, [pc, #16]	; (8022b28 <InterruptTim2+0x18>)
 8022b16:	681b      	ldr	r3, [r3, #0]
 8022b18:	3301      	adds	r3, #1
 8022b1a:	4a03      	ldr	r2, [pc, #12]	; (8022b28 <InterruptTim2+0x18>)
 8022b1c:	6013      	str	r3, [r2, #0]
#endif // DEBUG_MODE
}
 8022b1e:	bf00      	nop
 8022b20:	46bd      	mov	sp, r7
 8022b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b26:	4770      	bx	lr
 8022b28:	20000214 	.word	0x20000214

08022b2c <Loop>:

#ifdef TEST_MODE
void Loop()
{
 8022b2c:	b580      	push	{r7, lr}
 8022b2e:	af00      	add	r7, sp, #0
    test.Loop();
 8022b30:	4802      	ldr	r0, [pc, #8]	; (8022b3c <Loop+0x10>)
 8022b32:	f7ff ff49 	bl	80229c8 <_ZN4Test4LoopEv>
}
 8022b36:	bf00      	nop
 8022b38:	bd80      	pop	{r7, pc}
 8022b3a:	bf00      	nop
 8022b3c:	20010f84 	.word	0x20010f84

08022b40 <_Z41__static_initialization_and_destruction_0ii>:
 8022b40:	b580      	push	{r7, lr}
 8022b42:	b088      	sub	sp, #32
 8022b44:	af06      	add	r7, sp, #24
 8022b46:	6078      	str	r0, [r7, #4]
 8022b48:	6039      	str	r1, [r7, #0]
 8022b4a:	687b      	ldr	r3, [r7, #4]
 8022b4c:	2b01      	cmp	r3, #1
 8022b4e:	d13e      	bne.n	8022bce <_Z41__static_initialization_and_destruction_0ii+0x8e>
 8022b50:	683b      	ldr	r3, [r7, #0]
 8022b52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022b56:	4293      	cmp	r3, r2
 8022b58:	d139      	bne.n	8022bce <_Z41__static_initialization_and_destruction_0ii+0x8e>
Encoder encoder;
 8022b5a:	481f      	ldr	r0, [pc, #124]	; (8022bd8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8022b5c:	f7fe f8dc 	bl	8020d18 <_ZN7EncoderC1Ev>
Iim42652 iim_42652;
 8022b60:	481e      	ldr	r0, [pc, #120]	; (8022bdc <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8022b62:	f7fe f923 	bl	8020dac <_ZN8Iim42652C1Ev>
Led led;
 8022b66:	481e      	ldr	r0, [pc, #120]	; (8022be0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8022b68:	f7fe f952 	bl	8020e10 <_ZN3LedC1Ev>
LineSensor line_sensor;
 8022b6c:	481d      	ldr	r0, [pc, #116]	; (8022be4 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8022b6e:	f7fe fa6a 	bl	8021046 <_ZN10LineSensorC1Ev>
LineTrace line_trace(&line_sensor);
 8022b72:	491c      	ldr	r1, [pc, #112]	; (8022be4 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8022b74:	481c      	ldr	r0, [pc, #112]	; (8022be8 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8022b76:	f7fe fb17 	bl	80211a8 <_ZN9LineTraceC1EP10LineSensor>
Logger logger;
 8022b7a:	481c      	ldr	r0, [pc, #112]	; (8022bec <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8022b7c:	f7fe fb27 	bl	80211ce <_ZN6LoggerC1Ev>
Print print(&flash);
 8022b80:	491b      	ldr	r1, [pc, #108]	; (8022bf0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8022b82:	481c      	ldr	r0, [pc, #112]	; (8022bf4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8022b84:	f7ff fa08 	bl	8021f98 <_ZN5PrintC1EP5Flash>
SideSensor side_sensor;
 8022b88:	481b      	ldr	r0, [pc, #108]	; (8022bf8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8022b8a:	f7ff fa67 	bl	802205c <_ZN10SideSensorC1Ev>
Logger2 logger2(&encoder, &flash, &led, &iim_42652, &side_sensor);
 8022b8e:	4b1a      	ldr	r3, [pc, #104]	; (8022bf8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8022b90:	9301      	str	r3, [sp, #4]
 8022b92:	4b12      	ldr	r3, [pc, #72]	; (8022bdc <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8022b94:	9300      	str	r3, [sp, #0]
 8022b96:	4b12      	ldr	r3, [pc, #72]	; (8022be0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8022b98:	4a15      	ldr	r2, [pc, #84]	; (8022bf0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8022b9a:	490f      	ldr	r1, [pc, #60]	; (8022bd8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8022b9c:	4817      	ldr	r0, [pc, #92]	; (8022bfc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8022b9e:	f7fe fb2f 	bl	8021200 <_ZN7Logger2C1EP7EncoderP5FlashP3LedP8Iim42652P10SideSensor>
VelocityControl velocity_control(&encoder);
 8022ba2:	490d      	ldr	r1, [pc, #52]	; (8022bd8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8022ba4:	4816      	ldr	r0, [pc, #88]	; (8022c00 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8022ba6:	f7ff ff75 	bl	8022a94 <_ZN15VelocityControlC1EP7Encoder>
);
 8022baa:	4b15      	ldr	r3, [pc, #84]	; (8022c00 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8022bac:	9305      	str	r3, [sp, #20]
 8022bae:	4b12      	ldr	r3, [pc, #72]	; (8022bf8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8022bb0:	9304      	str	r3, [sp, #16]
 8022bb2:	4b14      	ldr	r3, [pc, #80]	; (8022c04 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8022bb4:	9303      	str	r3, [sp, #12]
 8022bb6:	4b14      	ldr	r3, [pc, #80]	; (8022c08 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8022bb8:	9302      	str	r3, [sp, #8]
 8022bba:	4b0b      	ldr	r3, [pc, #44]	; (8022be8 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8022bbc:	9301      	str	r3, [sp, #4]
 8022bbe:	4b09      	ldr	r3, [pc, #36]	; (8022be4 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8022bc0:	9300      	str	r3, [sp, #0]
 8022bc2:	4b07      	ldr	r3, [pc, #28]	; (8022be0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8022bc4:	4a05      	ldr	r2, [pc, #20]	; (8022bdc <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8022bc6:	4904      	ldr	r1, [pc, #16]	; (8022bd8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8022bc8:	4810      	ldr	r0, [pc, #64]	; (8022c0c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8022bca:	f7ff fe8f 	bl	80228ec <_ZN4TestC1EP7EncoderP8Iim42652P3LedP10LineSensorP9LineTraceP5MotorP12RotarySwitchP10SideSensorP15VelocityControl>
}
 8022bce:	bf00      	nop
 8022bd0:	3708      	adds	r7, #8
 8022bd2:	46bd      	mov	sp, r7
 8022bd4:	bd80      	pop	{r7, pc}
 8022bd6:	bf00      	nop
 8022bd8:	2000021c 	.word	0x2000021c
 8022bdc:	20000230 	.word	0x20000230
 8022be0:	20000238 	.word	0x20000238
 8022be4:	2000023c 	.word	0x2000023c
 8022be8:	200003c8 	.word	0x200003c8
 8022bec:	200003d0 	.word	0x200003d0
 8022bf0:	20000228 	.word	0x20000228
 8022bf4:	200004dc 	.word	0x200004dc
 8022bf8:	20010f4c 	.word	0x20010f4c
 8022bfc:	20010f54 	.word	0x20010f54
 8022c00:	20010f7c 	.word	0x20010f7c
 8022c04:	20010f48 	.word	0x20010f48
 8022c08:	200004d8 	.word	0x200004d8
 8022c0c:	20010f84 	.word	0x20010f84

08022c10 <_GLOBAL__sub_I_encoder>:
 8022c10:	b580      	push	{r7, lr}
 8022c12:	af00      	add	r7, sp, #0
 8022c14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8022c18:	2001      	movs	r0, #1
 8022c1a:	f7ff ff91 	bl	8022b40 <_Z41__static_initialization_and_destruction_0ii>
 8022c1e:	bd80      	pop	{r7, pc}

08022c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8022c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8022c58 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8022c24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8022c26:	e003      	b.n	8022c30 <LoopCopyDataInit>

08022c28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8022c28:	4b0c      	ldr	r3, [pc, #48]	; (8022c5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8022c2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8022c2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8022c2e:	3104      	adds	r1, #4

08022c30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8022c30:	480b      	ldr	r0, [pc, #44]	; (8022c60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8022c32:	4b0c      	ldr	r3, [pc, #48]	; (8022c64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8022c34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8022c36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8022c38:	d3f6      	bcc.n	8022c28 <CopyDataInit>
  ldr  r2, =_sbss
 8022c3a:	4a0b      	ldr	r2, [pc, #44]	; (8022c68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8022c3c:	e002      	b.n	8022c44 <LoopFillZerobss>

08022c3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8022c3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8022c40:	f842 3b04 	str.w	r3, [r2], #4

08022c44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8022c44:	4b09      	ldr	r3, [pc, #36]	; (8022c6c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8022c46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8022c48:	d3f9      	bcc.n	8022c3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8022c4a:	f7ff fe39 	bl	80228c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8022c4e:	f003 f8d1 	bl	8025df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8022c52:	f7fe fb2b 	bl	80212ac <main>
  bx  lr    
 8022c56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8022c58:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8022c5c:	08027b6c 	.word	0x08027b6c
  ldr  r0, =_sdata
 8022c60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8022c64:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8022c68:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8022c6c:	20011390 	.word	0x20011390

08022c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8022c70:	e7fe      	b.n	8022c70 <ADC_IRQHandler>
	...

08022c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8022c74:	b580      	push	{r7, lr}
 8022c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8022c78:	4b0e      	ldr	r3, [pc, #56]	; (8022cb4 <HAL_Init+0x40>)
 8022c7a:	681b      	ldr	r3, [r3, #0]
 8022c7c:	4a0d      	ldr	r2, [pc, #52]	; (8022cb4 <HAL_Init+0x40>)
 8022c7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8022c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8022c84:	4b0b      	ldr	r3, [pc, #44]	; (8022cb4 <HAL_Init+0x40>)
 8022c86:	681b      	ldr	r3, [r3, #0]
 8022c88:	4a0a      	ldr	r2, [pc, #40]	; (8022cb4 <HAL_Init+0x40>)
 8022c8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8022c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8022c90:	4b08      	ldr	r3, [pc, #32]	; (8022cb4 <HAL_Init+0x40>)
 8022c92:	681b      	ldr	r3, [r3, #0]
 8022c94:	4a07      	ldr	r2, [pc, #28]	; (8022cb4 <HAL_Init+0x40>)
 8022c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8022c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8022c9c:	2003      	movs	r0, #3
 8022c9e:	f000 fd41 	bl	8023724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8022ca2:	2001      	movs	r0, #1
 8022ca4:	f000 f808 	bl	8022cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8022ca8:	f7ff f9f8 	bl	802209c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8022cac:	2300      	movs	r3, #0
}
 8022cae:	4618      	mov	r0, r3
 8022cb0:	bd80      	pop	{r7, pc}
 8022cb2:	bf00      	nop
 8022cb4:	40023c00 	.word	0x40023c00

08022cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8022cb8:	b580      	push	{r7, lr}
 8022cba:	b082      	sub	sp, #8
 8022cbc:	af00      	add	r7, sp, #0
 8022cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8022cc0:	4b12      	ldr	r3, [pc, #72]	; (8022d0c <HAL_InitTick+0x54>)
 8022cc2:	681a      	ldr	r2, [r3, #0]
 8022cc4:	4b12      	ldr	r3, [pc, #72]	; (8022d10 <HAL_InitTick+0x58>)
 8022cc6:	781b      	ldrb	r3, [r3, #0]
 8022cc8:	4619      	mov	r1, r3
 8022cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8022cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8022cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8022cd6:	4618      	mov	r0, r3
 8022cd8:	f000 fd59 	bl	802378e <HAL_SYSTICK_Config>
 8022cdc:	4603      	mov	r3, r0
 8022cde:	2b00      	cmp	r3, #0
 8022ce0:	d001      	beq.n	8022ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8022ce2:	2301      	movs	r3, #1
 8022ce4:	e00e      	b.n	8022d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8022ce6:	687b      	ldr	r3, [r7, #4]
 8022ce8:	2b0f      	cmp	r3, #15
 8022cea:	d80a      	bhi.n	8022d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8022cec:	2200      	movs	r2, #0
 8022cee:	6879      	ldr	r1, [r7, #4]
 8022cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8022cf4:	f000 fd21 	bl	802373a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8022cf8:	4a06      	ldr	r2, [pc, #24]	; (8022d14 <HAL_InitTick+0x5c>)
 8022cfa:	687b      	ldr	r3, [r7, #4]
 8022cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8022cfe:	2300      	movs	r3, #0
 8022d00:	e000      	b.n	8022d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8022d02:	2301      	movs	r3, #1
}
 8022d04:	4618      	mov	r0, r3
 8022d06:	3708      	adds	r7, #8
 8022d08:	46bd      	mov	sp, r7
 8022d0a:	bd80      	pop	{r7, pc}
 8022d0c:	20000000 	.word	0x20000000
 8022d10:	20000008 	.word	0x20000008
 8022d14:	20000004 	.word	0x20000004

08022d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8022d18:	b480      	push	{r7}
 8022d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8022d1c:	4b06      	ldr	r3, [pc, #24]	; (8022d38 <HAL_IncTick+0x20>)
 8022d1e:	781b      	ldrb	r3, [r3, #0]
 8022d20:	461a      	mov	r2, r3
 8022d22:	4b06      	ldr	r3, [pc, #24]	; (8022d3c <HAL_IncTick+0x24>)
 8022d24:	681b      	ldr	r3, [r3, #0]
 8022d26:	4413      	add	r3, r2
 8022d28:	4a04      	ldr	r2, [pc, #16]	; (8022d3c <HAL_IncTick+0x24>)
 8022d2a:	6013      	str	r3, [r2, #0]
}
 8022d2c:	bf00      	nop
 8022d2e:	46bd      	mov	sp, r7
 8022d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d34:	4770      	bx	lr
 8022d36:	bf00      	nop
 8022d38:	20000008 	.word	0x20000008
 8022d3c:	20011388 	.word	0x20011388

08022d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8022d40:	b480      	push	{r7}
 8022d42:	af00      	add	r7, sp, #0
  return uwTick;
 8022d44:	4b03      	ldr	r3, [pc, #12]	; (8022d54 <HAL_GetTick+0x14>)
 8022d46:	681b      	ldr	r3, [r3, #0]
}
 8022d48:	4618      	mov	r0, r3
 8022d4a:	46bd      	mov	sp, r7
 8022d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d50:	4770      	bx	lr
 8022d52:	bf00      	nop
 8022d54:	20011388 	.word	0x20011388

08022d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8022d58:	b580      	push	{r7, lr}
 8022d5a:	b084      	sub	sp, #16
 8022d5c:	af00      	add	r7, sp, #0
 8022d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8022d60:	f7ff ffee 	bl	8022d40 <HAL_GetTick>
 8022d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8022d66:	687b      	ldr	r3, [r7, #4]
 8022d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8022d6a:	68fb      	ldr	r3, [r7, #12]
 8022d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022d70:	d005      	beq.n	8022d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8022d72:	4b09      	ldr	r3, [pc, #36]	; (8022d98 <HAL_Delay+0x40>)
 8022d74:	781b      	ldrb	r3, [r3, #0]
 8022d76:	461a      	mov	r2, r3
 8022d78:	68fb      	ldr	r3, [r7, #12]
 8022d7a:	4413      	add	r3, r2
 8022d7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8022d7e:	bf00      	nop
 8022d80:	f7ff ffde 	bl	8022d40 <HAL_GetTick>
 8022d84:	4602      	mov	r2, r0
 8022d86:	68bb      	ldr	r3, [r7, #8]
 8022d88:	1ad3      	subs	r3, r2, r3
 8022d8a:	68fa      	ldr	r2, [r7, #12]
 8022d8c:	429a      	cmp	r2, r3
 8022d8e:	d8f7      	bhi.n	8022d80 <HAL_Delay+0x28>
  {
  }
}
 8022d90:	bf00      	nop
 8022d92:	3710      	adds	r7, #16
 8022d94:	46bd      	mov	sp, r7
 8022d96:	bd80      	pop	{r7, pc}
 8022d98:	20000008 	.word	0x20000008

08022d9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8022d9c:	b580      	push	{r7, lr}
 8022d9e:	b084      	sub	sp, #16
 8022da0:	af00      	add	r7, sp, #0
 8022da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8022da4:	2300      	movs	r3, #0
 8022da6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8022da8:	687b      	ldr	r3, [r7, #4]
 8022daa:	2b00      	cmp	r3, #0
 8022dac:	d101      	bne.n	8022db2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8022dae:	2301      	movs	r3, #1
 8022db0:	e033      	b.n	8022e1a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8022db2:	687b      	ldr	r3, [r7, #4]
 8022db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022db6:	2b00      	cmp	r3, #0
 8022db8:	d109      	bne.n	8022dce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8022dba:	6878      	ldr	r0, [r7, #4]
 8022dbc:	f7ff f996 	bl	80220ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8022dc0:	687b      	ldr	r3, [r7, #4]
 8022dc2:	2200      	movs	r2, #0
 8022dc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8022dc6:	687b      	ldr	r3, [r7, #4]
 8022dc8:	2200      	movs	r2, #0
 8022dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8022dce:	687b      	ldr	r3, [r7, #4]
 8022dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022dd2:	f003 0310 	and.w	r3, r3, #16
 8022dd6:	2b00      	cmp	r3, #0
 8022dd8:	d118      	bne.n	8022e0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8022dda:	687b      	ldr	r3, [r7, #4]
 8022ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022dde:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8022de2:	f023 0302 	bic.w	r3, r3, #2
 8022de6:	f043 0202 	orr.w	r2, r3, #2
 8022dea:	687b      	ldr	r3, [r7, #4]
 8022dec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8022dee:	6878      	ldr	r0, [r7, #4]
 8022df0:	f000 fa4a 	bl	8023288 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8022df4:	687b      	ldr	r3, [r7, #4]
 8022df6:	2200      	movs	r2, #0
 8022df8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8022dfa:	687b      	ldr	r3, [r7, #4]
 8022dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022dfe:	f023 0303 	bic.w	r3, r3, #3
 8022e02:	f043 0201 	orr.w	r2, r3, #1
 8022e06:	687b      	ldr	r3, [r7, #4]
 8022e08:	641a      	str	r2, [r3, #64]	; 0x40
 8022e0a:	e001      	b.n	8022e10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8022e0c:	2301      	movs	r3, #1
 8022e0e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8022e10:	687b      	ldr	r3, [r7, #4]
 8022e12:	2200      	movs	r2, #0
 8022e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8022e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8022e1a:	4618      	mov	r0, r3
 8022e1c:	3710      	adds	r7, #16
 8022e1e:	46bd      	mov	sp, r7
 8022e20:	bd80      	pop	{r7, pc}
	...

08022e24 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8022e24:	b580      	push	{r7, lr}
 8022e26:	b086      	sub	sp, #24
 8022e28:	af00      	add	r7, sp, #0
 8022e2a:	60f8      	str	r0, [r7, #12]
 8022e2c:	60b9      	str	r1, [r7, #8]
 8022e2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8022e30:	2300      	movs	r3, #0
 8022e32:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8022e34:	68fb      	ldr	r3, [r7, #12]
 8022e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8022e3a:	2b01      	cmp	r3, #1
 8022e3c:	d101      	bne.n	8022e42 <HAL_ADC_Start_DMA+0x1e>
 8022e3e:	2302      	movs	r3, #2
 8022e40:	e0cc      	b.n	8022fdc <HAL_ADC_Start_DMA+0x1b8>
 8022e42:	68fb      	ldr	r3, [r7, #12]
 8022e44:	2201      	movs	r2, #1
 8022e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8022e4a:	68fb      	ldr	r3, [r7, #12]
 8022e4c:	681b      	ldr	r3, [r3, #0]
 8022e4e:	689b      	ldr	r3, [r3, #8]
 8022e50:	f003 0301 	and.w	r3, r3, #1
 8022e54:	2b01      	cmp	r3, #1
 8022e56:	d018      	beq.n	8022e8a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8022e58:	68fb      	ldr	r3, [r7, #12]
 8022e5a:	681b      	ldr	r3, [r3, #0]
 8022e5c:	689a      	ldr	r2, [r3, #8]
 8022e5e:	68fb      	ldr	r3, [r7, #12]
 8022e60:	681b      	ldr	r3, [r3, #0]
 8022e62:	f042 0201 	orr.w	r2, r2, #1
 8022e66:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8022e68:	4b5e      	ldr	r3, [pc, #376]	; (8022fe4 <HAL_ADC_Start_DMA+0x1c0>)
 8022e6a:	681b      	ldr	r3, [r3, #0]
 8022e6c:	4a5e      	ldr	r2, [pc, #376]	; (8022fe8 <HAL_ADC_Start_DMA+0x1c4>)
 8022e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8022e72:	0c9a      	lsrs	r2, r3, #18
 8022e74:	4613      	mov	r3, r2
 8022e76:	005b      	lsls	r3, r3, #1
 8022e78:	4413      	add	r3, r2
 8022e7a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8022e7c:	e002      	b.n	8022e84 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8022e7e:	693b      	ldr	r3, [r7, #16]
 8022e80:	3b01      	subs	r3, #1
 8022e82:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8022e84:	693b      	ldr	r3, [r7, #16]
 8022e86:	2b00      	cmp	r3, #0
 8022e88:	d1f9      	bne.n	8022e7e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8022e8a:	68fb      	ldr	r3, [r7, #12]
 8022e8c:	681b      	ldr	r3, [r3, #0]
 8022e8e:	689b      	ldr	r3, [r3, #8]
 8022e90:	f003 0301 	and.w	r3, r3, #1
 8022e94:	2b01      	cmp	r3, #1
 8022e96:	f040 80a0 	bne.w	8022fda <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8022e9a:	68fb      	ldr	r3, [r7, #12]
 8022e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022e9e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8022ea2:	f023 0301 	bic.w	r3, r3, #1
 8022ea6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8022eaa:	68fb      	ldr	r3, [r7, #12]
 8022eac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8022eae:	68fb      	ldr	r3, [r7, #12]
 8022eb0:	681b      	ldr	r3, [r3, #0]
 8022eb2:	685b      	ldr	r3, [r3, #4]
 8022eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8022eb8:	2b00      	cmp	r3, #0
 8022eba:	d007      	beq.n	8022ecc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8022ebc:	68fb      	ldr	r3, [r7, #12]
 8022ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022ec0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8022ec4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8022ec8:	68fb      	ldr	r3, [r7, #12]
 8022eca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8022ecc:	68fb      	ldr	r3, [r7, #12]
 8022ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022ed0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8022ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8022ed8:	d106      	bne.n	8022ee8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8022eda:	68fb      	ldr	r3, [r7, #12]
 8022edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022ede:	f023 0206 	bic.w	r2, r3, #6
 8022ee2:	68fb      	ldr	r3, [r7, #12]
 8022ee4:	645a      	str	r2, [r3, #68]	; 0x44
 8022ee6:	e002      	b.n	8022eee <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8022ee8:	68fb      	ldr	r3, [r7, #12]
 8022eea:	2200      	movs	r2, #0
 8022eec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8022eee:	68fb      	ldr	r3, [r7, #12]
 8022ef0:	2200      	movs	r2, #0
 8022ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8022ef6:	4b3d      	ldr	r3, [pc, #244]	; (8022fec <HAL_ADC_Start_DMA+0x1c8>)
 8022ef8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8022efa:	68fb      	ldr	r3, [r7, #12]
 8022efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022efe:	4a3c      	ldr	r2, [pc, #240]	; (8022ff0 <HAL_ADC_Start_DMA+0x1cc>)
 8022f00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8022f02:	68fb      	ldr	r3, [r7, #12]
 8022f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022f06:	4a3b      	ldr	r2, [pc, #236]	; (8022ff4 <HAL_ADC_Start_DMA+0x1d0>)
 8022f08:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8022f0a:	68fb      	ldr	r3, [r7, #12]
 8022f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022f0e:	4a3a      	ldr	r2, [pc, #232]	; (8022ff8 <HAL_ADC_Start_DMA+0x1d4>)
 8022f10:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8022f12:	68fb      	ldr	r3, [r7, #12]
 8022f14:	681b      	ldr	r3, [r3, #0]
 8022f16:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8022f1a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8022f1c:	68fb      	ldr	r3, [r7, #12]
 8022f1e:	681b      	ldr	r3, [r3, #0]
 8022f20:	685a      	ldr	r2, [r3, #4]
 8022f22:	68fb      	ldr	r3, [r7, #12]
 8022f24:	681b      	ldr	r3, [r3, #0]
 8022f26:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8022f2a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8022f2c:	68fb      	ldr	r3, [r7, #12]
 8022f2e:	681b      	ldr	r3, [r3, #0]
 8022f30:	689a      	ldr	r2, [r3, #8]
 8022f32:	68fb      	ldr	r3, [r7, #12]
 8022f34:	681b      	ldr	r3, [r3, #0]
 8022f36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8022f3a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8022f3c:	68fb      	ldr	r3, [r7, #12]
 8022f3e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8022f40:	68fb      	ldr	r3, [r7, #12]
 8022f42:	681b      	ldr	r3, [r3, #0]
 8022f44:	334c      	adds	r3, #76	; 0x4c
 8022f46:	4619      	mov	r1, r3
 8022f48:	68ba      	ldr	r2, [r7, #8]
 8022f4a:	687b      	ldr	r3, [r7, #4]
 8022f4c:	f000 fcda 	bl	8023904 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8022f50:	697b      	ldr	r3, [r7, #20]
 8022f52:	685b      	ldr	r3, [r3, #4]
 8022f54:	f003 031f 	and.w	r3, r3, #31
 8022f58:	2b00      	cmp	r3, #0
 8022f5a:	d12a      	bne.n	8022fb2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8022f5c:	68fb      	ldr	r3, [r7, #12]
 8022f5e:	681b      	ldr	r3, [r3, #0]
 8022f60:	4a26      	ldr	r2, [pc, #152]	; (8022ffc <HAL_ADC_Start_DMA+0x1d8>)
 8022f62:	4293      	cmp	r3, r2
 8022f64:	d015      	beq.n	8022f92 <HAL_ADC_Start_DMA+0x16e>
 8022f66:	68fb      	ldr	r3, [r7, #12]
 8022f68:	681b      	ldr	r3, [r3, #0]
 8022f6a:	4a25      	ldr	r2, [pc, #148]	; (8023000 <HAL_ADC_Start_DMA+0x1dc>)
 8022f6c:	4293      	cmp	r3, r2
 8022f6e:	d105      	bne.n	8022f7c <HAL_ADC_Start_DMA+0x158>
 8022f70:	4b1e      	ldr	r3, [pc, #120]	; (8022fec <HAL_ADC_Start_DMA+0x1c8>)
 8022f72:	685b      	ldr	r3, [r3, #4]
 8022f74:	f003 031f 	and.w	r3, r3, #31
 8022f78:	2b00      	cmp	r3, #0
 8022f7a:	d00a      	beq.n	8022f92 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8022f7c:	68fb      	ldr	r3, [r7, #12]
 8022f7e:	681b      	ldr	r3, [r3, #0]
 8022f80:	4a20      	ldr	r2, [pc, #128]	; (8023004 <HAL_ADC_Start_DMA+0x1e0>)
 8022f82:	4293      	cmp	r3, r2
 8022f84:	d129      	bne.n	8022fda <HAL_ADC_Start_DMA+0x1b6>
 8022f86:	4b19      	ldr	r3, [pc, #100]	; (8022fec <HAL_ADC_Start_DMA+0x1c8>)
 8022f88:	685b      	ldr	r3, [r3, #4]
 8022f8a:	f003 031f 	and.w	r3, r3, #31
 8022f8e:	2b0f      	cmp	r3, #15
 8022f90:	d823      	bhi.n	8022fda <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8022f92:	68fb      	ldr	r3, [r7, #12]
 8022f94:	681b      	ldr	r3, [r3, #0]
 8022f96:	689b      	ldr	r3, [r3, #8]
 8022f98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8022f9c:	2b00      	cmp	r3, #0
 8022f9e:	d11c      	bne.n	8022fda <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8022fa0:	68fb      	ldr	r3, [r7, #12]
 8022fa2:	681b      	ldr	r3, [r3, #0]
 8022fa4:	689a      	ldr	r2, [r3, #8]
 8022fa6:	68fb      	ldr	r3, [r7, #12]
 8022fa8:	681b      	ldr	r3, [r3, #0]
 8022faa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8022fae:	609a      	str	r2, [r3, #8]
 8022fb0:	e013      	b.n	8022fda <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8022fb2:	68fb      	ldr	r3, [r7, #12]
 8022fb4:	681b      	ldr	r3, [r3, #0]
 8022fb6:	4a11      	ldr	r2, [pc, #68]	; (8022ffc <HAL_ADC_Start_DMA+0x1d8>)
 8022fb8:	4293      	cmp	r3, r2
 8022fba:	d10e      	bne.n	8022fda <HAL_ADC_Start_DMA+0x1b6>
 8022fbc:	68fb      	ldr	r3, [r7, #12]
 8022fbe:	681b      	ldr	r3, [r3, #0]
 8022fc0:	689b      	ldr	r3, [r3, #8]
 8022fc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8022fc6:	2b00      	cmp	r3, #0
 8022fc8:	d107      	bne.n	8022fda <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8022fca:	68fb      	ldr	r3, [r7, #12]
 8022fcc:	681b      	ldr	r3, [r3, #0]
 8022fce:	689a      	ldr	r2, [r3, #8]
 8022fd0:	68fb      	ldr	r3, [r7, #12]
 8022fd2:	681b      	ldr	r3, [r3, #0]
 8022fd4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8022fd8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8022fda:	2300      	movs	r3, #0
}
 8022fdc:	4618      	mov	r0, r3
 8022fde:	3718      	adds	r7, #24
 8022fe0:	46bd      	mov	sp, r7
 8022fe2:	bd80      	pop	{r7, pc}
 8022fe4:	20000000 	.word	0x20000000
 8022fe8:	431bde83 	.word	0x431bde83
 8022fec:	40012300 	.word	0x40012300
 8022ff0:	08023481 	.word	0x08023481
 8022ff4:	0802353b 	.word	0x0802353b
 8022ff8:	08023557 	.word	0x08023557
 8022ffc:	40012000 	.word	0x40012000
 8023000:	40012100 	.word	0x40012100
 8023004:	40012200 	.word	0x40012200

08023008 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8023008:	b480      	push	{r7}
 802300a:	b083      	sub	sp, #12
 802300c:	af00      	add	r7, sp, #0
 802300e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8023010:	bf00      	nop
 8023012:	370c      	adds	r7, #12
 8023014:	46bd      	mov	sp, r7
 8023016:	f85d 7b04 	ldr.w	r7, [sp], #4
 802301a:	4770      	bx	lr

0802301c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 802301c:	b480      	push	{r7}
 802301e:	b083      	sub	sp, #12
 8023020:	af00      	add	r7, sp, #0
 8023022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8023024:	bf00      	nop
 8023026:	370c      	adds	r7, #12
 8023028:	46bd      	mov	sp, r7
 802302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802302e:	4770      	bx	lr

08023030 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8023030:	b480      	push	{r7}
 8023032:	b083      	sub	sp, #12
 8023034:	af00      	add	r7, sp, #0
 8023036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8023038:	bf00      	nop
 802303a:	370c      	adds	r7, #12
 802303c:	46bd      	mov	sp, r7
 802303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023042:	4770      	bx	lr

08023044 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8023044:	b480      	push	{r7}
 8023046:	b085      	sub	sp, #20
 8023048:	af00      	add	r7, sp, #0
 802304a:	6078      	str	r0, [r7, #4]
 802304c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 802304e:	2300      	movs	r3, #0
 8023050:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8023052:	687b      	ldr	r3, [r7, #4]
 8023054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8023058:	2b01      	cmp	r3, #1
 802305a:	d101      	bne.n	8023060 <HAL_ADC_ConfigChannel+0x1c>
 802305c:	2302      	movs	r3, #2
 802305e:	e105      	b.n	802326c <HAL_ADC_ConfigChannel+0x228>
 8023060:	687b      	ldr	r3, [r7, #4]
 8023062:	2201      	movs	r2, #1
 8023064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8023068:	683b      	ldr	r3, [r7, #0]
 802306a:	681b      	ldr	r3, [r3, #0]
 802306c:	2b09      	cmp	r3, #9
 802306e:	d925      	bls.n	80230bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8023070:	687b      	ldr	r3, [r7, #4]
 8023072:	681b      	ldr	r3, [r3, #0]
 8023074:	68d9      	ldr	r1, [r3, #12]
 8023076:	683b      	ldr	r3, [r7, #0]
 8023078:	681b      	ldr	r3, [r3, #0]
 802307a:	b29b      	uxth	r3, r3
 802307c:	461a      	mov	r2, r3
 802307e:	4613      	mov	r3, r2
 8023080:	005b      	lsls	r3, r3, #1
 8023082:	4413      	add	r3, r2
 8023084:	3b1e      	subs	r3, #30
 8023086:	2207      	movs	r2, #7
 8023088:	fa02 f303 	lsl.w	r3, r2, r3
 802308c:	43da      	mvns	r2, r3
 802308e:	687b      	ldr	r3, [r7, #4]
 8023090:	681b      	ldr	r3, [r3, #0]
 8023092:	400a      	ands	r2, r1
 8023094:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8023096:	687b      	ldr	r3, [r7, #4]
 8023098:	681b      	ldr	r3, [r3, #0]
 802309a:	68d9      	ldr	r1, [r3, #12]
 802309c:	683b      	ldr	r3, [r7, #0]
 802309e:	689a      	ldr	r2, [r3, #8]
 80230a0:	683b      	ldr	r3, [r7, #0]
 80230a2:	681b      	ldr	r3, [r3, #0]
 80230a4:	b29b      	uxth	r3, r3
 80230a6:	4618      	mov	r0, r3
 80230a8:	4603      	mov	r3, r0
 80230aa:	005b      	lsls	r3, r3, #1
 80230ac:	4403      	add	r3, r0
 80230ae:	3b1e      	subs	r3, #30
 80230b0:	409a      	lsls	r2, r3
 80230b2:	687b      	ldr	r3, [r7, #4]
 80230b4:	681b      	ldr	r3, [r3, #0]
 80230b6:	430a      	orrs	r2, r1
 80230b8:	60da      	str	r2, [r3, #12]
 80230ba:	e022      	b.n	8023102 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80230bc:	687b      	ldr	r3, [r7, #4]
 80230be:	681b      	ldr	r3, [r3, #0]
 80230c0:	6919      	ldr	r1, [r3, #16]
 80230c2:	683b      	ldr	r3, [r7, #0]
 80230c4:	681b      	ldr	r3, [r3, #0]
 80230c6:	b29b      	uxth	r3, r3
 80230c8:	461a      	mov	r2, r3
 80230ca:	4613      	mov	r3, r2
 80230cc:	005b      	lsls	r3, r3, #1
 80230ce:	4413      	add	r3, r2
 80230d0:	2207      	movs	r2, #7
 80230d2:	fa02 f303 	lsl.w	r3, r2, r3
 80230d6:	43da      	mvns	r2, r3
 80230d8:	687b      	ldr	r3, [r7, #4]
 80230da:	681b      	ldr	r3, [r3, #0]
 80230dc:	400a      	ands	r2, r1
 80230de:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80230e0:	687b      	ldr	r3, [r7, #4]
 80230e2:	681b      	ldr	r3, [r3, #0]
 80230e4:	6919      	ldr	r1, [r3, #16]
 80230e6:	683b      	ldr	r3, [r7, #0]
 80230e8:	689a      	ldr	r2, [r3, #8]
 80230ea:	683b      	ldr	r3, [r7, #0]
 80230ec:	681b      	ldr	r3, [r3, #0]
 80230ee:	b29b      	uxth	r3, r3
 80230f0:	4618      	mov	r0, r3
 80230f2:	4603      	mov	r3, r0
 80230f4:	005b      	lsls	r3, r3, #1
 80230f6:	4403      	add	r3, r0
 80230f8:	409a      	lsls	r2, r3
 80230fa:	687b      	ldr	r3, [r7, #4]
 80230fc:	681b      	ldr	r3, [r3, #0]
 80230fe:	430a      	orrs	r2, r1
 8023100:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8023102:	683b      	ldr	r3, [r7, #0]
 8023104:	685b      	ldr	r3, [r3, #4]
 8023106:	2b06      	cmp	r3, #6
 8023108:	d824      	bhi.n	8023154 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 802310a:	687b      	ldr	r3, [r7, #4]
 802310c:	681b      	ldr	r3, [r3, #0]
 802310e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8023110:	683b      	ldr	r3, [r7, #0]
 8023112:	685a      	ldr	r2, [r3, #4]
 8023114:	4613      	mov	r3, r2
 8023116:	009b      	lsls	r3, r3, #2
 8023118:	4413      	add	r3, r2
 802311a:	3b05      	subs	r3, #5
 802311c:	221f      	movs	r2, #31
 802311e:	fa02 f303 	lsl.w	r3, r2, r3
 8023122:	43da      	mvns	r2, r3
 8023124:	687b      	ldr	r3, [r7, #4]
 8023126:	681b      	ldr	r3, [r3, #0]
 8023128:	400a      	ands	r2, r1
 802312a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 802312c:	687b      	ldr	r3, [r7, #4]
 802312e:	681b      	ldr	r3, [r3, #0]
 8023130:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8023132:	683b      	ldr	r3, [r7, #0]
 8023134:	681b      	ldr	r3, [r3, #0]
 8023136:	b29b      	uxth	r3, r3
 8023138:	4618      	mov	r0, r3
 802313a:	683b      	ldr	r3, [r7, #0]
 802313c:	685a      	ldr	r2, [r3, #4]
 802313e:	4613      	mov	r3, r2
 8023140:	009b      	lsls	r3, r3, #2
 8023142:	4413      	add	r3, r2
 8023144:	3b05      	subs	r3, #5
 8023146:	fa00 f203 	lsl.w	r2, r0, r3
 802314a:	687b      	ldr	r3, [r7, #4]
 802314c:	681b      	ldr	r3, [r3, #0]
 802314e:	430a      	orrs	r2, r1
 8023150:	635a      	str	r2, [r3, #52]	; 0x34
 8023152:	e04c      	b.n	80231ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8023154:	683b      	ldr	r3, [r7, #0]
 8023156:	685b      	ldr	r3, [r3, #4]
 8023158:	2b0c      	cmp	r3, #12
 802315a:	d824      	bhi.n	80231a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 802315c:	687b      	ldr	r3, [r7, #4]
 802315e:	681b      	ldr	r3, [r3, #0]
 8023160:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8023162:	683b      	ldr	r3, [r7, #0]
 8023164:	685a      	ldr	r2, [r3, #4]
 8023166:	4613      	mov	r3, r2
 8023168:	009b      	lsls	r3, r3, #2
 802316a:	4413      	add	r3, r2
 802316c:	3b23      	subs	r3, #35	; 0x23
 802316e:	221f      	movs	r2, #31
 8023170:	fa02 f303 	lsl.w	r3, r2, r3
 8023174:	43da      	mvns	r2, r3
 8023176:	687b      	ldr	r3, [r7, #4]
 8023178:	681b      	ldr	r3, [r3, #0]
 802317a:	400a      	ands	r2, r1
 802317c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 802317e:	687b      	ldr	r3, [r7, #4]
 8023180:	681b      	ldr	r3, [r3, #0]
 8023182:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8023184:	683b      	ldr	r3, [r7, #0]
 8023186:	681b      	ldr	r3, [r3, #0]
 8023188:	b29b      	uxth	r3, r3
 802318a:	4618      	mov	r0, r3
 802318c:	683b      	ldr	r3, [r7, #0]
 802318e:	685a      	ldr	r2, [r3, #4]
 8023190:	4613      	mov	r3, r2
 8023192:	009b      	lsls	r3, r3, #2
 8023194:	4413      	add	r3, r2
 8023196:	3b23      	subs	r3, #35	; 0x23
 8023198:	fa00 f203 	lsl.w	r2, r0, r3
 802319c:	687b      	ldr	r3, [r7, #4]
 802319e:	681b      	ldr	r3, [r3, #0]
 80231a0:	430a      	orrs	r2, r1
 80231a2:	631a      	str	r2, [r3, #48]	; 0x30
 80231a4:	e023      	b.n	80231ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80231a6:	687b      	ldr	r3, [r7, #4]
 80231a8:	681b      	ldr	r3, [r3, #0]
 80231aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80231ac:	683b      	ldr	r3, [r7, #0]
 80231ae:	685a      	ldr	r2, [r3, #4]
 80231b0:	4613      	mov	r3, r2
 80231b2:	009b      	lsls	r3, r3, #2
 80231b4:	4413      	add	r3, r2
 80231b6:	3b41      	subs	r3, #65	; 0x41
 80231b8:	221f      	movs	r2, #31
 80231ba:	fa02 f303 	lsl.w	r3, r2, r3
 80231be:	43da      	mvns	r2, r3
 80231c0:	687b      	ldr	r3, [r7, #4]
 80231c2:	681b      	ldr	r3, [r3, #0]
 80231c4:	400a      	ands	r2, r1
 80231c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80231c8:	687b      	ldr	r3, [r7, #4]
 80231ca:	681b      	ldr	r3, [r3, #0]
 80231cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80231ce:	683b      	ldr	r3, [r7, #0]
 80231d0:	681b      	ldr	r3, [r3, #0]
 80231d2:	b29b      	uxth	r3, r3
 80231d4:	4618      	mov	r0, r3
 80231d6:	683b      	ldr	r3, [r7, #0]
 80231d8:	685a      	ldr	r2, [r3, #4]
 80231da:	4613      	mov	r3, r2
 80231dc:	009b      	lsls	r3, r3, #2
 80231de:	4413      	add	r3, r2
 80231e0:	3b41      	subs	r3, #65	; 0x41
 80231e2:	fa00 f203 	lsl.w	r2, r0, r3
 80231e6:	687b      	ldr	r3, [r7, #4]
 80231e8:	681b      	ldr	r3, [r3, #0]
 80231ea:	430a      	orrs	r2, r1
 80231ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80231ee:	4b22      	ldr	r3, [pc, #136]	; (8023278 <HAL_ADC_ConfigChannel+0x234>)
 80231f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80231f2:	687b      	ldr	r3, [r7, #4]
 80231f4:	681b      	ldr	r3, [r3, #0]
 80231f6:	4a21      	ldr	r2, [pc, #132]	; (802327c <HAL_ADC_ConfigChannel+0x238>)
 80231f8:	4293      	cmp	r3, r2
 80231fa:	d109      	bne.n	8023210 <HAL_ADC_ConfigChannel+0x1cc>
 80231fc:	683b      	ldr	r3, [r7, #0]
 80231fe:	681b      	ldr	r3, [r3, #0]
 8023200:	2b12      	cmp	r3, #18
 8023202:	d105      	bne.n	8023210 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8023204:	68fb      	ldr	r3, [r7, #12]
 8023206:	685b      	ldr	r3, [r3, #4]
 8023208:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 802320c:	68fb      	ldr	r3, [r7, #12]
 802320e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8023210:	687b      	ldr	r3, [r7, #4]
 8023212:	681b      	ldr	r3, [r3, #0]
 8023214:	4a19      	ldr	r2, [pc, #100]	; (802327c <HAL_ADC_ConfigChannel+0x238>)
 8023216:	4293      	cmp	r3, r2
 8023218:	d123      	bne.n	8023262 <HAL_ADC_ConfigChannel+0x21e>
 802321a:	683b      	ldr	r3, [r7, #0]
 802321c:	681b      	ldr	r3, [r3, #0]
 802321e:	2b10      	cmp	r3, #16
 8023220:	d003      	beq.n	802322a <HAL_ADC_ConfigChannel+0x1e6>
 8023222:	683b      	ldr	r3, [r7, #0]
 8023224:	681b      	ldr	r3, [r3, #0]
 8023226:	2b11      	cmp	r3, #17
 8023228:	d11b      	bne.n	8023262 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 802322a:	68fb      	ldr	r3, [r7, #12]
 802322c:	685b      	ldr	r3, [r3, #4]
 802322e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8023232:	68fb      	ldr	r3, [r7, #12]
 8023234:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8023236:	683b      	ldr	r3, [r7, #0]
 8023238:	681b      	ldr	r3, [r3, #0]
 802323a:	2b10      	cmp	r3, #16
 802323c:	d111      	bne.n	8023262 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 802323e:	4b10      	ldr	r3, [pc, #64]	; (8023280 <HAL_ADC_ConfigChannel+0x23c>)
 8023240:	681b      	ldr	r3, [r3, #0]
 8023242:	4a10      	ldr	r2, [pc, #64]	; (8023284 <HAL_ADC_ConfigChannel+0x240>)
 8023244:	fba2 2303 	umull	r2, r3, r2, r3
 8023248:	0c9a      	lsrs	r2, r3, #18
 802324a:	4613      	mov	r3, r2
 802324c:	009b      	lsls	r3, r3, #2
 802324e:	4413      	add	r3, r2
 8023250:	005b      	lsls	r3, r3, #1
 8023252:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8023254:	e002      	b.n	802325c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8023256:	68bb      	ldr	r3, [r7, #8]
 8023258:	3b01      	subs	r3, #1
 802325a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 802325c:	68bb      	ldr	r3, [r7, #8]
 802325e:	2b00      	cmp	r3, #0
 8023260:	d1f9      	bne.n	8023256 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8023262:	687b      	ldr	r3, [r7, #4]
 8023264:	2200      	movs	r2, #0
 8023266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 802326a:	2300      	movs	r3, #0
}
 802326c:	4618      	mov	r0, r3
 802326e:	3714      	adds	r7, #20
 8023270:	46bd      	mov	sp, r7
 8023272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023276:	4770      	bx	lr
 8023278:	40012300 	.word	0x40012300
 802327c:	40012000 	.word	0x40012000
 8023280:	20000000 	.word	0x20000000
 8023284:	431bde83 	.word	0x431bde83

08023288 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8023288:	b480      	push	{r7}
 802328a:	b085      	sub	sp, #20
 802328c:	af00      	add	r7, sp, #0
 802328e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8023290:	4b79      	ldr	r3, [pc, #484]	; (8023478 <ADC_Init+0x1f0>)
 8023292:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8023294:	68fb      	ldr	r3, [r7, #12]
 8023296:	685b      	ldr	r3, [r3, #4]
 8023298:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 802329c:	68fb      	ldr	r3, [r7, #12]
 802329e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80232a0:	68fb      	ldr	r3, [r7, #12]
 80232a2:	685a      	ldr	r2, [r3, #4]
 80232a4:	687b      	ldr	r3, [r7, #4]
 80232a6:	685b      	ldr	r3, [r3, #4]
 80232a8:	431a      	orrs	r2, r3
 80232aa:	68fb      	ldr	r3, [r7, #12]
 80232ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80232ae:	687b      	ldr	r3, [r7, #4]
 80232b0:	681b      	ldr	r3, [r3, #0]
 80232b2:	685a      	ldr	r2, [r3, #4]
 80232b4:	687b      	ldr	r3, [r7, #4]
 80232b6:	681b      	ldr	r3, [r3, #0]
 80232b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80232bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80232be:	687b      	ldr	r3, [r7, #4]
 80232c0:	681b      	ldr	r3, [r3, #0]
 80232c2:	6859      	ldr	r1, [r3, #4]
 80232c4:	687b      	ldr	r3, [r7, #4]
 80232c6:	691b      	ldr	r3, [r3, #16]
 80232c8:	021a      	lsls	r2, r3, #8
 80232ca:	687b      	ldr	r3, [r7, #4]
 80232cc:	681b      	ldr	r3, [r3, #0]
 80232ce:	430a      	orrs	r2, r1
 80232d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80232d2:	687b      	ldr	r3, [r7, #4]
 80232d4:	681b      	ldr	r3, [r3, #0]
 80232d6:	685a      	ldr	r2, [r3, #4]
 80232d8:	687b      	ldr	r3, [r7, #4]
 80232da:	681b      	ldr	r3, [r3, #0]
 80232dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80232e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80232e2:	687b      	ldr	r3, [r7, #4]
 80232e4:	681b      	ldr	r3, [r3, #0]
 80232e6:	6859      	ldr	r1, [r3, #4]
 80232e8:	687b      	ldr	r3, [r7, #4]
 80232ea:	689a      	ldr	r2, [r3, #8]
 80232ec:	687b      	ldr	r3, [r7, #4]
 80232ee:	681b      	ldr	r3, [r3, #0]
 80232f0:	430a      	orrs	r2, r1
 80232f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80232f4:	687b      	ldr	r3, [r7, #4]
 80232f6:	681b      	ldr	r3, [r3, #0]
 80232f8:	689a      	ldr	r2, [r3, #8]
 80232fa:	687b      	ldr	r3, [r7, #4]
 80232fc:	681b      	ldr	r3, [r3, #0]
 80232fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8023302:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8023304:	687b      	ldr	r3, [r7, #4]
 8023306:	681b      	ldr	r3, [r3, #0]
 8023308:	6899      	ldr	r1, [r3, #8]
 802330a:	687b      	ldr	r3, [r7, #4]
 802330c:	68da      	ldr	r2, [r3, #12]
 802330e:	687b      	ldr	r3, [r7, #4]
 8023310:	681b      	ldr	r3, [r3, #0]
 8023312:	430a      	orrs	r2, r1
 8023314:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8023316:	687b      	ldr	r3, [r7, #4]
 8023318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802331a:	4a58      	ldr	r2, [pc, #352]	; (802347c <ADC_Init+0x1f4>)
 802331c:	4293      	cmp	r3, r2
 802331e:	d022      	beq.n	8023366 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8023320:	687b      	ldr	r3, [r7, #4]
 8023322:	681b      	ldr	r3, [r3, #0]
 8023324:	689a      	ldr	r2, [r3, #8]
 8023326:	687b      	ldr	r3, [r7, #4]
 8023328:	681b      	ldr	r3, [r3, #0]
 802332a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 802332e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8023330:	687b      	ldr	r3, [r7, #4]
 8023332:	681b      	ldr	r3, [r3, #0]
 8023334:	6899      	ldr	r1, [r3, #8]
 8023336:	687b      	ldr	r3, [r7, #4]
 8023338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802333a:	687b      	ldr	r3, [r7, #4]
 802333c:	681b      	ldr	r3, [r3, #0]
 802333e:	430a      	orrs	r2, r1
 8023340:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8023342:	687b      	ldr	r3, [r7, #4]
 8023344:	681b      	ldr	r3, [r3, #0]
 8023346:	689a      	ldr	r2, [r3, #8]
 8023348:	687b      	ldr	r3, [r7, #4]
 802334a:	681b      	ldr	r3, [r3, #0]
 802334c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8023350:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8023352:	687b      	ldr	r3, [r7, #4]
 8023354:	681b      	ldr	r3, [r3, #0]
 8023356:	6899      	ldr	r1, [r3, #8]
 8023358:	687b      	ldr	r3, [r7, #4]
 802335a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802335c:	687b      	ldr	r3, [r7, #4]
 802335e:	681b      	ldr	r3, [r3, #0]
 8023360:	430a      	orrs	r2, r1
 8023362:	609a      	str	r2, [r3, #8]
 8023364:	e00f      	b.n	8023386 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8023366:	687b      	ldr	r3, [r7, #4]
 8023368:	681b      	ldr	r3, [r3, #0]
 802336a:	689a      	ldr	r2, [r3, #8]
 802336c:	687b      	ldr	r3, [r7, #4]
 802336e:	681b      	ldr	r3, [r3, #0]
 8023370:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8023374:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8023376:	687b      	ldr	r3, [r7, #4]
 8023378:	681b      	ldr	r3, [r3, #0]
 802337a:	689a      	ldr	r2, [r3, #8]
 802337c:	687b      	ldr	r3, [r7, #4]
 802337e:	681b      	ldr	r3, [r3, #0]
 8023380:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8023384:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8023386:	687b      	ldr	r3, [r7, #4]
 8023388:	681b      	ldr	r3, [r3, #0]
 802338a:	689a      	ldr	r2, [r3, #8]
 802338c:	687b      	ldr	r3, [r7, #4]
 802338e:	681b      	ldr	r3, [r3, #0]
 8023390:	f022 0202 	bic.w	r2, r2, #2
 8023394:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8023396:	687b      	ldr	r3, [r7, #4]
 8023398:	681b      	ldr	r3, [r3, #0]
 802339a:	6899      	ldr	r1, [r3, #8]
 802339c:	687b      	ldr	r3, [r7, #4]
 802339e:	7e1b      	ldrb	r3, [r3, #24]
 80233a0:	005a      	lsls	r2, r3, #1
 80233a2:	687b      	ldr	r3, [r7, #4]
 80233a4:	681b      	ldr	r3, [r3, #0]
 80233a6:	430a      	orrs	r2, r1
 80233a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80233aa:	687b      	ldr	r3, [r7, #4]
 80233ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80233b0:	2b00      	cmp	r3, #0
 80233b2:	d01b      	beq.n	80233ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80233b4:	687b      	ldr	r3, [r7, #4]
 80233b6:	681b      	ldr	r3, [r3, #0]
 80233b8:	685a      	ldr	r2, [r3, #4]
 80233ba:	687b      	ldr	r3, [r7, #4]
 80233bc:	681b      	ldr	r3, [r3, #0]
 80233be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80233c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80233c4:	687b      	ldr	r3, [r7, #4]
 80233c6:	681b      	ldr	r3, [r3, #0]
 80233c8:	685a      	ldr	r2, [r3, #4]
 80233ca:	687b      	ldr	r3, [r7, #4]
 80233cc:	681b      	ldr	r3, [r3, #0]
 80233ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80233d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80233d4:	687b      	ldr	r3, [r7, #4]
 80233d6:	681b      	ldr	r3, [r3, #0]
 80233d8:	6859      	ldr	r1, [r3, #4]
 80233da:	687b      	ldr	r3, [r7, #4]
 80233dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80233de:	3b01      	subs	r3, #1
 80233e0:	035a      	lsls	r2, r3, #13
 80233e2:	687b      	ldr	r3, [r7, #4]
 80233e4:	681b      	ldr	r3, [r3, #0]
 80233e6:	430a      	orrs	r2, r1
 80233e8:	605a      	str	r2, [r3, #4]
 80233ea:	e007      	b.n	80233fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80233ec:	687b      	ldr	r3, [r7, #4]
 80233ee:	681b      	ldr	r3, [r3, #0]
 80233f0:	685a      	ldr	r2, [r3, #4]
 80233f2:	687b      	ldr	r3, [r7, #4]
 80233f4:	681b      	ldr	r3, [r3, #0]
 80233f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80233fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80233fc:	687b      	ldr	r3, [r7, #4]
 80233fe:	681b      	ldr	r3, [r3, #0]
 8023400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023402:	687b      	ldr	r3, [r7, #4]
 8023404:	681b      	ldr	r3, [r3, #0]
 8023406:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 802340a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 802340c:	687b      	ldr	r3, [r7, #4]
 802340e:	681b      	ldr	r3, [r3, #0]
 8023410:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8023412:	687b      	ldr	r3, [r7, #4]
 8023414:	69db      	ldr	r3, [r3, #28]
 8023416:	3b01      	subs	r3, #1
 8023418:	051a      	lsls	r2, r3, #20
 802341a:	687b      	ldr	r3, [r7, #4]
 802341c:	681b      	ldr	r3, [r3, #0]
 802341e:	430a      	orrs	r2, r1
 8023420:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8023422:	687b      	ldr	r3, [r7, #4]
 8023424:	681b      	ldr	r3, [r3, #0]
 8023426:	689a      	ldr	r2, [r3, #8]
 8023428:	687b      	ldr	r3, [r7, #4]
 802342a:	681b      	ldr	r3, [r3, #0]
 802342c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8023430:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8023432:	687b      	ldr	r3, [r7, #4]
 8023434:	681b      	ldr	r3, [r3, #0]
 8023436:	6899      	ldr	r1, [r3, #8]
 8023438:	687b      	ldr	r3, [r7, #4]
 802343a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802343e:	025a      	lsls	r2, r3, #9
 8023440:	687b      	ldr	r3, [r7, #4]
 8023442:	681b      	ldr	r3, [r3, #0]
 8023444:	430a      	orrs	r2, r1
 8023446:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8023448:	687b      	ldr	r3, [r7, #4]
 802344a:	681b      	ldr	r3, [r3, #0]
 802344c:	689a      	ldr	r2, [r3, #8]
 802344e:	687b      	ldr	r3, [r7, #4]
 8023450:	681b      	ldr	r3, [r3, #0]
 8023452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8023456:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8023458:	687b      	ldr	r3, [r7, #4]
 802345a:	681b      	ldr	r3, [r3, #0]
 802345c:	6899      	ldr	r1, [r3, #8]
 802345e:	687b      	ldr	r3, [r7, #4]
 8023460:	695b      	ldr	r3, [r3, #20]
 8023462:	029a      	lsls	r2, r3, #10
 8023464:	687b      	ldr	r3, [r7, #4]
 8023466:	681b      	ldr	r3, [r3, #0]
 8023468:	430a      	orrs	r2, r1
 802346a:	609a      	str	r2, [r3, #8]
}
 802346c:	bf00      	nop
 802346e:	3714      	adds	r7, #20
 8023470:	46bd      	mov	sp, r7
 8023472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023476:	4770      	bx	lr
 8023478:	40012300 	.word	0x40012300
 802347c:	0f000001 	.word	0x0f000001

08023480 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8023480:	b580      	push	{r7, lr}
 8023482:	b084      	sub	sp, #16
 8023484:	af00      	add	r7, sp, #0
 8023486:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8023488:	687b      	ldr	r3, [r7, #4]
 802348a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802348c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 802348e:	68fb      	ldr	r3, [r7, #12]
 8023490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023492:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8023496:	2b00      	cmp	r3, #0
 8023498:	d13c      	bne.n	8023514 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 802349a:	68fb      	ldr	r3, [r7, #12]
 802349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802349e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80234a2:	68fb      	ldr	r3, [r7, #12]
 80234a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80234a6:	68fb      	ldr	r3, [r7, #12]
 80234a8:	681b      	ldr	r3, [r3, #0]
 80234aa:	689b      	ldr	r3, [r3, #8]
 80234ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80234b0:	2b00      	cmp	r3, #0
 80234b2:	d12b      	bne.n	802350c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80234b4:	68fb      	ldr	r3, [r7, #12]
 80234b6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80234b8:	2b00      	cmp	r3, #0
 80234ba:	d127      	bne.n	802350c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80234bc:	68fb      	ldr	r3, [r7, #12]
 80234be:	681b      	ldr	r3, [r3, #0]
 80234c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80234c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80234c6:	2b00      	cmp	r3, #0
 80234c8:	d006      	beq.n	80234d8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80234ca:	68fb      	ldr	r3, [r7, #12]
 80234cc:	681b      	ldr	r3, [r3, #0]
 80234ce:	689b      	ldr	r3, [r3, #8]
 80234d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80234d4:	2b00      	cmp	r3, #0
 80234d6:	d119      	bne.n	802350c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80234d8:	68fb      	ldr	r3, [r7, #12]
 80234da:	681b      	ldr	r3, [r3, #0]
 80234dc:	685a      	ldr	r2, [r3, #4]
 80234de:	68fb      	ldr	r3, [r7, #12]
 80234e0:	681b      	ldr	r3, [r3, #0]
 80234e2:	f022 0220 	bic.w	r2, r2, #32
 80234e6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80234e8:	68fb      	ldr	r3, [r7, #12]
 80234ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80234ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80234f0:	68fb      	ldr	r3, [r7, #12]
 80234f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80234f4:	68fb      	ldr	r3, [r7, #12]
 80234f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80234f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80234fc:	2b00      	cmp	r3, #0
 80234fe:	d105      	bne.n	802350c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8023500:	68fb      	ldr	r3, [r7, #12]
 8023502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023504:	f043 0201 	orr.w	r2, r3, #1
 8023508:	68fb      	ldr	r3, [r7, #12]
 802350a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 802350c:	68f8      	ldr	r0, [r7, #12]
 802350e:	f7ff fd7b 	bl	8023008 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8023512:	e00e      	b.n	8023532 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8023514:	68fb      	ldr	r3, [r7, #12]
 8023516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023518:	f003 0310 	and.w	r3, r3, #16
 802351c:	2b00      	cmp	r3, #0
 802351e:	d003      	beq.n	8023528 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8023520:	68f8      	ldr	r0, [r7, #12]
 8023522:	f7ff fd85 	bl	8023030 <HAL_ADC_ErrorCallback>
}
 8023526:	e004      	b.n	8023532 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8023528:	68fb      	ldr	r3, [r7, #12]
 802352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802352c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802352e:	6878      	ldr	r0, [r7, #4]
 8023530:	4798      	blx	r3
}
 8023532:	bf00      	nop
 8023534:	3710      	adds	r7, #16
 8023536:	46bd      	mov	sp, r7
 8023538:	bd80      	pop	{r7, pc}

0802353a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 802353a:	b580      	push	{r7, lr}
 802353c:	b084      	sub	sp, #16
 802353e:	af00      	add	r7, sp, #0
 8023540:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8023542:	687b      	ldr	r3, [r7, #4]
 8023544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023546:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8023548:	68f8      	ldr	r0, [r7, #12]
 802354a:	f7ff fd67 	bl	802301c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 802354e:	bf00      	nop
 8023550:	3710      	adds	r7, #16
 8023552:	46bd      	mov	sp, r7
 8023554:	bd80      	pop	{r7, pc}

08023556 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8023556:	b580      	push	{r7, lr}
 8023558:	b084      	sub	sp, #16
 802355a:	af00      	add	r7, sp, #0
 802355c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 802355e:	687b      	ldr	r3, [r7, #4]
 8023560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023562:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8023564:	68fb      	ldr	r3, [r7, #12]
 8023566:	2240      	movs	r2, #64	; 0x40
 8023568:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 802356a:	68fb      	ldr	r3, [r7, #12]
 802356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802356e:	f043 0204 	orr.w	r2, r3, #4
 8023572:	68fb      	ldr	r3, [r7, #12]
 8023574:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8023576:	68f8      	ldr	r0, [r7, #12]
 8023578:	f7ff fd5a 	bl	8023030 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 802357c:	bf00      	nop
 802357e:	3710      	adds	r7, #16
 8023580:	46bd      	mov	sp, r7
 8023582:	bd80      	pop	{r7, pc}

08023584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8023584:	b480      	push	{r7}
 8023586:	b085      	sub	sp, #20
 8023588:	af00      	add	r7, sp, #0
 802358a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 802358c:	687b      	ldr	r3, [r7, #4]
 802358e:	f003 0307 	and.w	r3, r3, #7
 8023592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8023594:	4b0c      	ldr	r3, [pc, #48]	; (80235c8 <__NVIC_SetPriorityGrouping+0x44>)
 8023596:	68db      	ldr	r3, [r3, #12]
 8023598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 802359a:	68ba      	ldr	r2, [r7, #8]
 802359c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80235a0:	4013      	ands	r3, r2
 80235a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80235a4:	68fb      	ldr	r3, [r7, #12]
 80235a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80235a8:	68bb      	ldr	r3, [r7, #8]
 80235aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80235ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80235b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80235b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80235b6:	4a04      	ldr	r2, [pc, #16]	; (80235c8 <__NVIC_SetPriorityGrouping+0x44>)
 80235b8:	68bb      	ldr	r3, [r7, #8]
 80235ba:	60d3      	str	r3, [r2, #12]
}
 80235bc:	bf00      	nop
 80235be:	3714      	adds	r7, #20
 80235c0:	46bd      	mov	sp, r7
 80235c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235c6:	4770      	bx	lr
 80235c8:	e000ed00 	.word	0xe000ed00

080235cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80235cc:	b480      	push	{r7}
 80235ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80235d0:	4b04      	ldr	r3, [pc, #16]	; (80235e4 <__NVIC_GetPriorityGrouping+0x18>)
 80235d2:	68db      	ldr	r3, [r3, #12]
 80235d4:	0a1b      	lsrs	r3, r3, #8
 80235d6:	f003 0307 	and.w	r3, r3, #7
}
 80235da:	4618      	mov	r0, r3
 80235dc:	46bd      	mov	sp, r7
 80235de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235e2:	4770      	bx	lr
 80235e4:	e000ed00 	.word	0xe000ed00

080235e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80235e8:	b480      	push	{r7}
 80235ea:	b083      	sub	sp, #12
 80235ec:	af00      	add	r7, sp, #0
 80235ee:	4603      	mov	r3, r0
 80235f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80235f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80235f6:	2b00      	cmp	r3, #0
 80235f8:	db0b      	blt.n	8023612 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80235fa:	79fb      	ldrb	r3, [r7, #7]
 80235fc:	f003 021f 	and.w	r2, r3, #31
 8023600:	4907      	ldr	r1, [pc, #28]	; (8023620 <__NVIC_EnableIRQ+0x38>)
 8023602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023606:	095b      	lsrs	r3, r3, #5
 8023608:	2001      	movs	r0, #1
 802360a:	fa00 f202 	lsl.w	r2, r0, r2
 802360e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8023612:	bf00      	nop
 8023614:	370c      	adds	r7, #12
 8023616:	46bd      	mov	sp, r7
 8023618:	f85d 7b04 	ldr.w	r7, [sp], #4
 802361c:	4770      	bx	lr
 802361e:	bf00      	nop
 8023620:	e000e100 	.word	0xe000e100

08023624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8023624:	b480      	push	{r7}
 8023626:	b083      	sub	sp, #12
 8023628:	af00      	add	r7, sp, #0
 802362a:	4603      	mov	r3, r0
 802362c:	6039      	str	r1, [r7, #0]
 802362e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8023630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023634:	2b00      	cmp	r3, #0
 8023636:	db0a      	blt.n	802364e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8023638:	683b      	ldr	r3, [r7, #0]
 802363a:	b2da      	uxtb	r2, r3
 802363c:	490c      	ldr	r1, [pc, #48]	; (8023670 <__NVIC_SetPriority+0x4c>)
 802363e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023642:	0112      	lsls	r2, r2, #4
 8023644:	b2d2      	uxtb	r2, r2
 8023646:	440b      	add	r3, r1
 8023648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 802364c:	e00a      	b.n	8023664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802364e:	683b      	ldr	r3, [r7, #0]
 8023650:	b2da      	uxtb	r2, r3
 8023652:	4908      	ldr	r1, [pc, #32]	; (8023674 <__NVIC_SetPriority+0x50>)
 8023654:	79fb      	ldrb	r3, [r7, #7]
 8023656:	f003 030f 	and.w	r3, r3, #15
 802365a:	3b04      	subs	r3, #4
 802365c:	0112      	lsls	r2, r2, #4
 802365e:	b2d2      	uxtb	r2, r2
 8023660:	440b      	add	r3, r1
 8023662:	761a      	strb	r2, [r3, #24]
}
 8023664:	bf00      	nop
 8023666:	370c      	adds	r7, #12
 8023668:	46bd      	mov	sp, r7
 802366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802366e:	4770      	bx	lr
 8023670:	e000e100 	.word	0xe000e100
 8023674:	e000ed00 	.word	0xe000ed00

08023678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8023678:	b480      	push	{r7}
 802367a:	b089      	sub	sp, #36	; 0x24
 802367c:	af00      	add	r7, sp, #0
 802367e:	60f8      	str	r0, [r7, #12]
 8023680:	60b9      	str	r1, [r7, #8]
 8023682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8023684:	68fb      	ldr	r3, [r7, #12]
 8023686:	f003 0307 	and.w	r3, r3, #7
 802368a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802368c:	69fb      	ldr	r3, [r7, #28]
 802368e:	f1c3 0307 	rsb	r3, r3, #7
 8023692:	2b04      	cmp	r3, #4
 8023694:	bf28      	it	cs
 8023696:	2304      	movcs	r3, #4
 8023698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 802369a:	69fb      	ldr	r3, [r7, #28]
 802369c:	3304      	adds	r3, #4
 802369e:	2b06      	cmp	r3, #6
 80236a0:	d902      	bls.n	80236a8 <NVIC_EncodePriority+0x30>
 80236a2:	69fb      	ldr	r3, [r7, #28]
 80236a4:	3b03      	subs	r3, #3
 80236a6:	e000      	b.n	80236aa <NVIC_EncodePriority+0x32>
 80236a8:	2300      	movs	r3, #0
 80236aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80236ac:	f04f 32ff 	mov.w	r2, #4294967295
 80236b0:	69bb      	ldr	r3, [r7, #24]
 80236b2:	fa02 f303 	lsl.w	r3, r2, r3
 80236b6:	43da      	mvns	r2, r3
 80236b8:	68bb      	ldr	r3, [r7, #8]
 80236ba:	401a      	ands	r2, r3
 80236bc:	697b      	ldr	r3, [r7, #20]
 80236be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80236c0:	f04f 31ff 	mov.w	r1, #4294967295
 80236c4:	697b      	ldr	r3, [r7, #20]
 80236c6:	fa01 f303 	lsl.w	r3, r1, r3
 80236ca:	43d9      	mvns	r1, r3
 80236cc:	687b      	ldr	r3, [r7, #4]
 80236ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80236d0:	4313      	orrs	r3, r2
         );
}
 80236d2:	4618      	mov	r0, r3
 80236d4:	3724      	adds	r7, #36	; 0x24
 80236d6:	46bd      	mov	sp, r7
 80236d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236dc:	4770      	bx	lr
	...

080236e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80236e0:	b580      	push	{r7, lr}
 80236e2:	b082      	sub	sp, #8
 80236e4:	af00      	add	r7, sp, #0
 80236e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80236e8:	687b      	ldr	r3, [r7, #4]
 80236ea:	3b01      	subs	r3, #1
 80236ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80236f0:	d301      	bcc.n	80236f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80236f2:	2301      	movs	r3, #1
 80236f4:	e00f      	b.n	8023716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80236f6:	4a0a      	ldr	r2, [pc, #40]	; (8023720 <SysTick_Config+0x40>)
 80236f8:	687b      	ldr	r3, [r7, #4]
 80236fa:	3b01      	subs	r3, #1
 80236fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80236fe:	210f      	movs	r1, #15
 8023700:	f04f 30ff 	mov.w	r0, #4294967295
 8023704:	f7ff ff8e 	bl	8023624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8023708:	4b05      	ldr	r3, [pc, #20]	; (8023720 <SysTick_Config+0x40>)
 802370a:	2200      	movs	r2, #0
 802370c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 802370e:	4b04      	ldr	r3, [pc, #16]	; (8023720 <SysTick_Config+0x40>)
 8023710:	2207      	movs	r2, #7
 8023712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8023714:	2300      	movs	r3, #0
}
 8023716:	4618      	mov	r0, r3
 8023718:	3708      	adds	r7, #8
 802371a:	46bd      	mov	sp, r7
 802371c:	bd80      	pop	{r7, pc}
 802371e:	bf00      	nop
 8023720:	e000e010 	.word	0xe000e010

08023724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8023724:	b580      	push	{r7, lr}
 8023726:	b082      	sub	sp, #8
 8023728:	af00      	add	r7, sp, #0
 802372a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 802372c:	6878      	ldr	r0, [r7, #4]
 802372e:	f7ff ff29 	bl	8023584 <__NVIC_SetPriorityGrouping>
}
 8023732:	bf00      	nop
 8023734:	3708      	adds	r7, #8
 8023736:	46bd      	mov	sp, r7
 8023738:	bd80      	pop	{r7, pc}

0802373a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 802373a:	b580      	push	{r7, lr}
 802373c:	b086      	sub	sp, #24
 802373e:	af00      	add	r7, sp, #0
 8023740:	4603      	mov	r3, r0
 8023742:	60b9      	str	r1, [r7, #8]
 8023744:	607a      	str	r2, [r7, #4]
 8023746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8023748:	2300      	movs	r3, #0
 802374a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 802374c:	f7ff ff3e 	bl	80235cc <__NVIC_GetPriorityGrouping>
 8023750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8023752:	687a      	ldr	r2, [r7, #4]
 8023754:	68b9      	ldr	r1, [r7, #8]
 8023756:	6978      	ldr	r0, [r7, #20]
 8023758:	f7ff ff8e 	bl	8023678 <NVIC_EncodePriority>
 802375c:	4602      	mov	r2, r0
 802375e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8023762:	4611      	mov	r1, r2
 8023764:	4618      	mov	r0, r3
 8023766:	f7ff ff5d 	bl	8023624 <__NVIC_SetPriority>
}
 802376a:	bf00      	nop
 802376c:	3718      	adds	r7, #24
 802376e:	46bd      	mov	sp, r7
 8023770:	bd80      	pop	{r7, pc}

08023772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8023772:	b580      	push	{r7, lr}
 8023774:	b082      	sub	sp, #8
 8023776:	af00      	add	r7, sp, #0
 8023778:	4603      	mov	r3, r0
 802377a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 802377c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8023780:	4618      	mov	r0, r3
 8023782:	f7ff ff31 	bl	80235e8 <__NVIC_EnableIRQ>
}
 8023786:	bf00      	nop
 8023788:	3708      	adds	r7, #8
 802378a:	46bd      	mov	sp, r7
 802378c:	bd80      	pop	{r7, pc}

0802378e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802378e:	b580      	push	{r7, lr}
 8023790:	b082      	sub	sp, #8
 8023792:	af00      	add	r7, sp, #0
 8023794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8023796:	6878      	ldr	r0, [r7, #4]
 8023798:	f7ff ffa2 	bl	80236e0 <SysTick_Config>
 802379c:	4603      	mov	r3, r0
}
 802379e:	4618      	mov	r0, r3
 80237a0:	3708      	adds	r7, #8
 80237a2:	46bd      	mov	sp, r7
 80237a4:	bd80      	pop	{r7, pc}
	...

080237a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80237a8:	b580      	push	{r7, lr}
 80237aa:	b086      	sub	sp, #24
 80237ac:	af00      	add	r7, sp, #0
 80237ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80237b0:	2300      	movs	r3, #0
 80237b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80237b4:	f7ff fac4 	bl	8022d40 <HAL_GetTick>
 80237b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80237ba:	687b      	ldr	r3, [r7, #4]
 80237bc:	2b00      	cmp	r3, #0
 80237be:	d101      	bne.n	80237c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80237c0:	2301      	movs	r3, #1
 80237c2:	e099      	b.n	80238f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80237c4:	687b      	ldr	r3, [r7, #4]
 80237c6:	2200      	movs	r2, #0
 80237c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80237cc:	687b      	ldr	r3, [r7, #4]
 80237ce:	2202      	movs	r2, #2
 80237d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80237d4:	687b      	ldr	r3, [r7, #4]
 80237d6:	681b      	ldr	r3, [r3, #0]
 80237d8:	681a      	ldr	r2, [r3, #0]
 80237da:	687b      	ldr	r3, [r7, #4]
 80237dc:	681b      	ldr	r3, [r3, #0]
 80237de:	f022 0201 	bic.w	r2, r2, #1
 80237e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80237e4:	e00f      	b.n	8023806 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80237e6:	f7ff faab 	bl	8022d40 <HAL_GetTick>
 80237ea:	4602      	mov	r2, r0
 80237ec:	693b      	ldr	r3, [r7, #16]
 80237ee:	1ad3      	subs	r3, r2, r3
 80237f0:	2b05      	cmp	r3, #5
 80237f2:	d908      	bls.n	8023806 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80237f4:	687b      	ldr	r3, [r7, #4]
 80237f6:	2220      	movs	r2, #32
 80237f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80237fa:	687b      	ldr	r3, [r7, #4]
 80237fc:	2203      	movs	r2, #3
 80237fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8023802:	2303      	movs	r3, #3
 8023804:	e078      	b.n	80238f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8023806:	687b      	ldr	r3, [r7, #4]
 8023808:	681b      	ldr	r3, [r3, #0]
 802380a:	681b      	ldr	r3, [r3, #0]
 802380c:	f003 0301 	and.w	r3, r3, #1
 8023810:	2b00      	cmp	r3, #0
 8023812:	d1e8      	bne.n	80237e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8023814:	687b      	ldr	r3, [r7, #4]
 8023816:	681b      	ldr	r3, [r3, #0]
 8023818:	681b      	ldr	r3, [r3, #0]
 802381a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 802381c:	697a      	ldr	r2, [r7, #20]
 802381e:	4b38      	ldr	r3, [pc, #224]	; (8023900 <HAL_DMA_Init+0x158>)
 8023820:	4013      	ands	r3, r2
 8023822:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8023824:	687b      	ldr	r3, [r7, #4]
 8023826:	685a      	ldr	r2, [r3, #4]
 8023828:	687b      	ldr	r3, [r7, #4]
 802382a:	689b      	ldr	r3, [r3, #8]
 802382c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802382e:	687b      	ldr	r3, [r7, #4]
 8023830:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8023832:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8023834:	687b      	ldr	r3, [r7, #4]
 8023836:	691b      	ldr	r3, [r3, #16]
 8023838:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802383a:	687b      	ldr	r3, [r7, #4]
 802383c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 802383e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8023840:	687b      	ldr	r3, [r7, #4]
 8023842:	699b      	ldr	r3, [r3, #24]
 8023844:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8023846:	687b      	ldr	r3, [r7, #4]
 8023848:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 802384a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 802384c:	687b      	ldr	r3, [r7, #4]
 802384e:	6a1b      	ldr	r3, [r3, #32]
 8023850:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8023852:	697a      	ldr	r2, [r7, #20]
 8023854:	4313      	orrs	r3, r2
 8023856:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8023858:	687b      	ldr	r3, [r7, #4]
 802385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802385c:	2b04      	cmp	r3, #4
 802385e:	d107      	bne.n	8023870 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8023860:	687b      	ldr	r3, [r7, #4]
 8023862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8023864:	687b      	ldr	r3, [r7, #4]
 8023866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023868:	4313      	orrs	r3, r2
 802386a:	697a      	ldr	r2, [r7, #20]
 802386c:	4313      	orrs	r3, r2
 802386e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8023870:	687b      	ldr	r3, [r7, #4]
 8023872:	681b      	ldr	r3, [r3, #0]
 8023874:	697a      	ldr	r2, [r7, #20]
 8023876:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8023878:	687b      	ldr	r3, [r7, #4]
 802387a:	681b      	ldr	r3, [r3, #0]
 802387c:	695b      	ldr	r3, [r3, #20]
 802387e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8023880:	697b      	ldr	r3, [r7, #20]
 8023882:	f023 0307 	bic.w	r3, r3, #7
 8023886:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8023888:	687b      	ldr	r3, [r7, #4]
 802388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802388c:	697a      	ldr	r2, [r7, #20]
 802388e:	4313      	orrs	r3, r2
 8023890:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8023892:	687b      	ldr	r3, [r7, #4]
 8023894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023896:	2b04      	cmp	r3, #4
 8023898:	d117      	bne.n	80238ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 802389a:	687b      	ldr	r3, [r7, #4]
 802389c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802389e:	697a      	ldr	r2, [r7, #20]
 80238a0:	4313      	orrs	r3, r2
 80238a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80238a4:	687b      	ldr	r3, [r7, #4]
 80238a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80238a8:	2b00      	cmp	r3, #0
 80238aa:	d00e      	beq.n	80238ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80238ac:	6878      	ldr	r0, [r7, #4]
 80238ae:	f000 fa6f 	bl	8023d90 <DMA_CheckFifoParam>
 80238b2:	4603      	mov	r3, r0
 80238b4:	2b00      	cmp	r3, #0
 80238b6:	d008      	beq.n	80238ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80238b8:	687b      	ldr	r3, [r7, #4]
 80238ba:	2240      	movs	r2, #64	; 0x40
 80238bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80238be:	687b      	ldr	r3, [r7, #4]
 80238c0:	2201      	movs	r2, #1
 80238c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80238c6:	2301      	movs	r3, #1
 80238c8:	e016      	b.n	80238f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80238ca:	687b      	ldr	r3, [r7, #4]
 80238cc:	681b      	ldr	r3, [r3, #0]
 80238ce:	697a      	ldr	r2, [r7, #20]
 80238d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80238d2:	6878      	ldr	r0, [r7, #4]
 80238d4:	f000 fa26 	bl	8023d24 <DMA_CalcBaseAndBitshift>
 80238d8:	4603      	mov	r3, r0
 80238da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80238dc:	687b      	ldr	r3, [r7, #4]
 80238de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80238e0:	223f      	movs	r2, #63	; 0x3f
 80238e2:	409a      	lsls	r2, r3
 80238e4:	68fb      	ldr	r3, [r7, #12]
 80238e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80238e8:	687b      	ldr	r3, [r7, #4]
 80238ea:	2200      	movs	r2, #0
 80238ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80238ee:	687b      	ldr	r3, [r7, #4]
 80238f0:	2201      	movs	r2, #1
 80238f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80238f6:	2300      	movs	r3, #0
}
 80238f8:	4618      	mov	r0, r3
 80238fa:	3718      	adds	r7, #24
 80238fc:	46bd      	mov	sp, r7
 80238fe:	bd80      	pop	{r7, pc}
 8023900:	f010803f 	.word	0xf010803f

08023904 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8023904:	b580      	push	{r7, lr}
 8023906:	b086      	sub	sp, #24
 8023908:	af00      	add	r7, sp, #0
 802390a:	60f8      	str	r0, [r7, #12]
 802390c:	60b9      	str	r1, [r7, #8]
 802390e:	607a      	str	r2, [r7, #4]
 8023910:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8023912:	2300      	movs	r3, #0
 8023914:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8023916:	68fb      	ldr	r3, [r7, #12]
 8023918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 802391a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 802391c:	68fb      	ldr	r3, [r7, #12]
 802391e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8023922:	2b01      	cmp	r3, #1
 8023924:	d101      	bne.n	802392a <HAL_DMA_Start_IT+0x26>
 8023926:	2302      	movs	r3, #2
 8023928:	e040      	b.n	80239ac <HAL_DMA_Start_IT+0xa8>
 802392a:	68fb      	ldr	r3, [r7, #12]
 802392c:	2201      	movs	r2, #1
 802392e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8023932:	68fb      	ldr	r3, [r7, #12]
 8023934:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8023938:	b2db      	uxtb	r3, r3
 802393a:	2b01      	cmp	r3, #1
 802393c:	d12f      	bne.n	802399e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 802393e:	68fb      	ldr	r3, [r7, #12]
 8023940:	2202      	movs	r2, #2
 8023942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8023946:	68fb      	ldr	r3, [r7, #12]
 8023948:	2200      	movs	r2, #0
 802394a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 802394c:	683b      	ldr	r3, [r7, #0]
 802394e:	687a      	ldr	r2, [r7, #4]
 8023950:	68b9      	ldr	r1, [r7, #8]
 8023952:	68f8      	ldr	r0, [r7, #12]
 8023954:	f000 f9b8 	bl	8023cc8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023958:	68fb      	ldr	r3, [r7, #12]
 802395a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802395c:	223f      	movs	r2, #63	; 0x3f
 802395e:	409a      	lsls	r2, r3
 8023960:	693b      	ldr	r3, [r7, #16]
 8023962:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8023964:	68fb      	ldr	r3, [r7, #12]
 8023966:	681b      	ldr	r3, [r3, #0]
 8023968:	681a      	ldr	r2, [r3, #0]
 802396a:	68fb      	ldr	r3, [r7, #12]
 802396c:	681b      	ldr	r3, [r3, #0]
 802396e:	f042 0216 	orr.w	r2, r2, #22
 8023972:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8023974:	68fb      	ldr	r3, [r7, #12]
 8023976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023978:	2b00      	cmp	r3, #0
 802397a:	d007      	beq.n	802398c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 802397c:	68fb      	ldr	r3, [r7, #12]
 802397e:	681b      	ldr	r3, [r3, #0]
 8023980:	681a      	ldr	r2, [r3, #0]
 8023982:	68fb      	ldr	r3, [r7, #12]
 8023984:	681b      	ldr	r3, [r3, #0]
 8023986:	f042 0208 	orr.w	r2, r2, #8
 802398a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 802398c:	68fb      	ldr	r3, [r7, #12]
 802398e:	681b      	ldr	r3, [r3, #0]
 8023990:	681a      	ldr	r2, [r3, #0]
 8023992:	68fb      	ldr	r3, [r7, #12]
 8023994:	681b      	ldr	r3, [r3, #0]
 8023996:	f042 0201 	orr.w	r2, r2, #1
 802399a:	601a      	str	r2, [r3, #0]
 802399c:	e005      	b.n	80239aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 802399e:	68fb      	ldr	r3, [r7, #12]
 80239a0:	2200      	movs	r2, #0
 80239a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80239a6:	2302      	movs	r3, #2
 80239a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80239aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80239ac:	4618      	mov	r0, r3
 80239ae:	3718      	adds	r7, #24
 80239b0:	46bd      	mov	sp, r7
 80239b2:	bd80      	pop	{r7, pc}

080239b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80239b4:	b580      	push	{r7, lr}
 80239b6:	b086      	sub	sp, #24
 80239b8:	af00      	add	r7, sp, #0
 80239ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80239bc:	2300      	movs	r3, #0
 80239be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80239c0:	4b92      	ldr	r3, [pc, #584]	; (8023c0c <HAL_DMA_IRQHandler+0x258>)
 80239c2:	681b      	ldr	r3, [r3, #0]
 80239c4:	4a92      	ldr	r2, [pc, #584]	; (8023c10 <HAL_DMA_IRQHandler+0x25c>)
 80239c6:	fba2 2303 	umull	r2, r3, r2, r3
 80239ca:	0a9b      	lsrs	r3, r3, #10
 80239cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80239ce:	687b      	ldr	r3, [r7, #4]
 80239d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80239d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80239d4:	693b      	ldr	r3, [r7, #16]
 80239d6:	681b      	ldr	r3, [r3, #0]
 80239d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80239da:	687b      	ldr	r3, [r7, #4]
 80239dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80239de:	2208      	movs	r2, #8
 80239e0:	409a      	lsls	r2, r3
 80239e2:	68fb      	ldr	r3, [r7, #12]
 80239e4:	4013      	ands	r3, r2
 80239e6:	2b00      	cmp	r3, #0
 80239e8:	d01a      	beq.n	8023a20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80239ea:	687b      	ldr	r3, [r7, #4]
 80239ec:	681b      	ldr	r3, [r3, #0]
 80239ee:	681b      	ldr	r3, [r3, #0]
 80239f0:	f003 0304 	and.w	r3, r3, #4
 80239f4:	2b00      	cmp	r3, #0
 80239f6:	d013      	beq.n	8023a20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80239f8:	687b      	ldr	r3, [r7, #4]
 80239fa:	681b      	ldr	r3, [r3, #0]
 80239fc:	681a      	ldr	r2, [r3, #0]
 80239fe:	687b      	ldr	r3, [r7, #4]
 8023a00:	681b      	ldr	r3, [r3, #0]
 8023a02:	f022 0204 	bic.w	r2, r2, #4
 8023a06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8023a08:	687b      	ldr	r3, [r7, #4]
 8023a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023a0c:	2208      	movs	r2, #8
 8023a0e:	409a      	lsls	r2, r3
 8023a10:	693b      	ldr	r3, [r7, #16]
 8023a12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8023a14:	687b      	ldr	r3, [r7, #4]
 8023a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023a18:	f043 0201 	orr.w	r2, r3, #1
 8023a1c:	687b      	ldr	r3, [r7, #4]
 8023a1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8023a20:	687b      	ldr	r3, [r7, #4]
 8023a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023a24:	2201      	movs	r2, #1
 8023a26:	409a      	lsls	r2, r3
 8023a28:	68fb      	ldr	r3, [r7, #12]
 8023a2a:	4013      	ands	r3, r2
 8023a2c:	2b00      	cmp	r3, #0
 8023a2e:	d012      	beq.n	8023a56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8023a30:	687b      	ldr	r3, [r7, #4]
 8023a32:	681b      	ldr	r3, [r3, #0]
 8023a34:	695b      	ldr	r3, [r3, #20]
 8023a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023a3a:	2b00      	cmp	r3, #0
 8023a3c:	d00b      	beq.n	8023a56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8023a3e:	687b      	ldr	r3, [r7, #4]
 8023a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023a42:	2201      	movs	r2, #1
 8023a44:	409a      	lsls	r2, r3
 8023a46:	693b      	ldr	r3, [r7, #16]
 8023a48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8023a4a:	687b      	ldr	r3, [r7, #4]
 8023a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023a4e:	f043 0202 	orr.w	r2, r3, #2
 8023a52:	687b      	ldr	r3, [r7, #4]
 8023a54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8023a56:	687b      	ldr	r3, [r7, #4]
 8023a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023a5a:	2204      	movs	r2, #4
 8023a5c:	409a      	lsls	r2, r3
 8023a5e:	68fb      	ldr	r3, [r7, #12]
 8023a60:	4013      	ands	r3, r2
 8023a62:	2b00      	cmp	r3, #0
 8023a64:	d012      	beq.n	8023a8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8023a66:	687b      	ldr	r3, [r7, #4]
 8023a68:	681b      	ldr	r3, [r3, #0]
 8023a6a:	681b      	ldr	r3, [r3, #0]
 8023a6c:	f003 0302 	and.w	r3, r3, #2
 8023a70:	2b00      	cmp	r3, #0
 8023a72:	d00b      	beq.n	8023a8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8023a74:	687b      	ldr	r3, [r7, #4]
 8023a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023a78:	2204      	movs	r2, #4
 8023a7a:	409a      	lsls	r2, r3
 8023a7c:	693b      	ldr	r3, [r7, #16]
 8023a7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8023a80:	687b      	ldr	r3, [r7, #4]
 8023a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023a84:	f043 0204 	orr.w	r2, r3, #4
 8023a88:	687b      	ldr	r3, [r7, #4]
 8023a8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8023a8c:	687b      	ldr	r3, [r7, #4]
 8023a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023a90:	2210      	movs	r2, #16
 8023a92:	409a      	lsls	r2, r3
 8023a94:	68fb      	ldr	r3, [r7, #12]
 8023a96:	4013      	ands	r3, r2
 8023a98:	2b00      	cmp	r3, #0
 8023a9a:	d043      	beq.n	8023b24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8023a9c:	687b      	ldr	r3, [r7, #4]
 8023a9e:	681b      	ldr	r3, [r3, #0]
 8023aa0:	681b      	ldr	r3, [r3, #0]
 8023aa2:	f003 0308 	and.w	r3, r3, #8
 8023aa6:	2b00      	cmp	r3, #0
 8023aa8:	d03c      	beq.n	8023b24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8023aaa:	687b      	ldr	r3, [r7, #4]
 8023aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023aae:	2210      	movs	r2, #16
 8023ab0:	409a      	lsls	r2, r3
 8023ab2:	693b      	ldr	r3, [r7, #16]
 8023ab4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8023ab6:	687b      	ldr	r3, [r7, #4]
 8023ab8:	681b      	ldr	r3, [r3, #0]
 8023aba:	681b      	ldr	r3, [r3, #0]
 8023abc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8023ac0:	2b00      	cmp	r3, #0
 8023ac2:	d018      	beq.n	8023af6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8023ac4:	687b      	ldr	r3, [r7, #4]
 8023ac6:	681b      	ldr	r3, [r3, #0]
 8023ac8:	681b      	ldr	r3, [r3, #0]
 8023aca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8023ace:	2b00      	cmp	r3, #0
 8023ad0:	d108      	bne.n	8023ae4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8023ad2:	687b      	ldr	r3, [r7, #4]
 8023ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023ad6:	2b00      	cmp	r3, #0
 8023ad8:	d024      	beq.n	8023b24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8023ada:	687b      	ldr	r3, [r7, #4]
 8023adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023ade:	6878      	ldr	r0, [r7, #4]
 8023ae0:	4798      	blx	r3
 8023ae2:	e01f      	b.n	8023b24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8023ae4:	687b      	ldr	r3, [r7, #4]
 8023ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8023ae8:	2b00      	cmp	r3, #0
 8023aea:	d01b      	beq.n	8023b24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8023aec:	687b      	ldr	r3, [r7, #4]
 8023aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8023af0:	6878      	ldr	r0, [r7, #4]
 8023af2:	4798      	blx	r3
 8023af4:	e016      	b.n	8023b24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8023af6:	687b      	ldr	r3, [r7, #4]
 8023af8:	681b      	ldr	r3, [r3, #0]
 8023afa:	681b      	ldr	r3, [r3, #0]
 8023afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023b00:	2b00      	cmp	r3, #0
 8023b02:	d107      	bne.n	8023b14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8023b04:	687b      	ldr	r3, [r7, #4]
 8023b06:	681b      	ldr	r3, [r3, #0]
 8023b08:	681a      	ldr	r2, [r3, #0]
 8023b0a:	687b      	ldr	r3, [r7, #4]
 8023b0c:	681b      	ldr	r3, [r3, #0]
 8023b0e:	f022 0208 	bic.w	r2, r2, #8
 8023b12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8023b14:	687b      	ldr	r3, [r7, #4]
 8023b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023b18:	2b00      	cmp	r3, #0
 8023b1a:	d003      	beq.n	8023b24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8023b1c:	687b      	ldr	r3, [r7, #4]
 8023b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023b20:	6878      	ldr	r0, [r7, #4]
 8023b22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8023b24:	687b      	ldr	r3, [r7, #4]
 8023b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023b28:	2220      	movs	r2, #32
 8023b2a:	409a      	lsls	r2, r3
 8023b2c:	68fb      	ldr	r3, [r7, #12]
 8023b2e:	4013      	ands	r3, r2
 8023b30:	2b00      	cmp	r3, #0
 8023b32:	f000 808e 	beq.w	8023c52 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8023b36:	687b      	ldr	r3, [r7, #4]
 8023b38:	681b      	ldr	r3, [r3, #0]
 8023b3a:	681b      	ldr	r3, [r3, #0]
 8023b3c:	f003 0310 	and.w	r3, r3, #16
 8023b40:	2b00      	cmp	r3, #0
 8023b42:	f000 8086 	beq.w	8023c52 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8023b46:	687b      	ldr	r3, [r7, #4]
 8023b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023b4a:	2220      	movs	r2, #32
 8023b4c:	409a      	lsls	r2, r3
 8023b4e:	693b      	ldr	r3, [r7, #16]
 8023b50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8023b52:	687b      	ldr	r3, [r7, #4]
 8023b54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8023b58:	b2db      	uxtb	r3, r3
 8023b5a:	2b05      	cmp	r3, #5
 8023b5c:	d136      	bne.n	8023bcc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8023b5e:	687b      	ldr	r3, [r7, #4]
 8023b60:	681b      	ldr	r3, [r3, #0]
 8023b62:	681a      	ldr	r2, [r3, #0]
 8023b64:	687b      	ldr	r3, [r7, #4]
 8023b66:	681b      	ldr	r3, [r3, #0]
 8023b68:	f022 0216 	bic.w	r2, r2, #22
 8023b6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8023b6e:	687b      	ldr	r3, [r7, #4]
 8023b70:	681b      	ldr	r3, [r3, #0]
 8023b72:	695a      	ldr	r2, [r3, #20]
 8023b74:	687b      	ldr	r3, [r7, #4]
 8023b76:	681b      	ldr	r3, [r3, #0]
 8023b78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8023b7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8023b7e:	687b      	ldr	r3, [r7, #4]
 8023b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023b82:	2b00      	cmp	r3, #0
 8023b84:	d103      	bne.n	8023b8e <HAL_DMA_IRQHandler+0x1da>
 8023b86:	687b      	ldr	r3, [r7, #4]
 8023b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8023b8a:	2b00      	cmp	r3, #0
 8023b8c:	d007      	beq.n	8023b9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8023b8e:	687b      	ldr	r3, [r7, #4]
 8023b90:	681b      	ldr	r3, [r3, #0]
 8023b92:	681a      	ldr	r2, [r3, #0]
 8023b94:	687b      	ldr	r3, [r7, #4]
 8023b96:	681b      	ldr	r3, [r3, #0]
 8023b98:	f022 0208 	bic.w	r2, r2, #8
 8023b9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8023b9e:	687b      	ldr	r3, [r7, #4]
 8023ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8023ba2:	223f      	movs	r2, #63	; 0x3f
 8023ba4:	409a      	lsls	r2, r3
 8023ba6:	693b      	ldr	r3, [r7, #16]
 8023ba8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8023baa:	687b      	ldr	r3, [r7, #4]
 8023bac:	2200      	movs	r2, #0
 8023bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8023bb2:	687b      	ldr	r3, [r7, #4]
 8023bb4:	2201      	movs	r2, #1
 8023bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8023bba:	687b      	ldr	r3, [r7, #4]
 8023bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8023bbe:	2b00      	cmp	r3, #0
 8023bc0:	d07d      	beq.n	8023cbe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8023bc2:	687b      	ldr	r3, [r7, #4]
 8023bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8023bc6:	6878      	ldr	r0, [r7, #4]
 8023bc8:	4798      	blx	r3
        }
        return;
 8023bca:	e078      	b.n	8023cbe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8023bcc:	687b      	ldr	r3, [r7, #4]
 8023bce:	681b      	ldr	r3, [r3, #0]
 8023bd0:	681b      	ldr	r3, [r3, #0]
 8023bd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8023bd6:	2b00      	cmp	r3, #0
 8023bd8:	d01c      	beq.n	8023c14 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8023bda:	687b      	ldr	r3, [r7, #4]
 8023bdc:	681b      	ldr	r3, [r3, #0]
 8023bde:	681b      	ldr	r3, [r3, #0]
 8023be0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8023be4:	2b00      	cmp	r3, #0
 8023be6:	d108      	bne.n	8023bfa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8023be8:	687b      	ldr	r3, [r7, #4]
 8023bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023bec:	2b00      	cmp	r3, #0
 8023bee:	d030      	beq.n	8023c52 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8023bf0:	687b      	ldr	r3, [r7, #4]
 8023bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8023bf4:	6878      	ldr	r0, [r7, #4]
 8023bf6:	4798      	blx	r3
 8023bf8:	e02b      	b.n	8023c52 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8023bfa:	687b      	ldr	r3, [r7, #4]
 8023bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023bfe:	2b00      	cmp	r3, #0
 8023c00:	d027      	beq.n	8023c52 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8023c02:	687b      	ldr	r3, [r7, #4]
 8023c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023c06:	6878      	ldr	r0, [r7, #4]
 8023c08:	4798      	blx	r3
 8023c0a:	e022      	b.n	8023c52 <HAL_DMA_IRQHandler+0x29e>
 8023c0c:	20000000 	.word	0x20000000
 8023c10:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8023c14:	687b      	ldr	r3, [r7, #4]
 8023c16:	681b      	ldr	r3, [r3, #0]
 8023c18:	681b      	ldr	r3, [r3, #0]
 8023c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023c1e:	2b00      	cmp	r3, #0
 8023c20:	d10f      	bne.n	8023c42 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8023c22:	687b      	ldr	r3, [r7, #4]
 8023c24:	681b      	ldr	r3, [r3, #0]
 8023c26:	681a      	ldr	r2, [r3, #0]
 8023c28:	687b      	ldr	r3, [r7, #4]
 8023c2a:	681b      	ldr	r3, [r3, #0]
 8023c2c:	f022 0210 	bic.w	r2, r2, #16
 8023c30:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8023c32:	687b      	ldr	r3, [r7, #4]
 8023c34:	2200      	movs	r2, #0
 8023c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8023c3a:	687b      	ldr	r3, [r7, #4]
 8023c3c:	2201      	movs	r2, #1
 8023c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8023c42:	687b      	ldr	r3, [r7, #4]
 8023c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023c46:	2b00      	cmp	r3, #0
 8023c48:	d003      	beq.n	8023c52 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8023c4a:	687b      	ldr	r3, [r7, #4]
 8023c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023c4e:	6878      	ldr	r0, [r7, #4]
 8023c50:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8023c52:	687b      	ldr	r3, [r7, #4]
 8023c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023c56:	2b00      	cmp	r3, #0
 8023c58:	d032      	beq.n	8023cc0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8023c5a:	687b      	ldr	r3, [r7, #4]
 8023c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8023c5e:	f003 0301 	and.w	r3, r3, #1
 8023c62:	2b00      	cmp	r3, #0
 8023c64:	d022      	beq.n	8023cac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8023c66:	687b      	ldr	r3, [r7, #4]
 8023c68:	2205      	movs	r2, #5
 8023c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8023c6e:	687b      	ldr	r3, [r7, #4]
 8023c70:	681b      	ldr	r3, [r3, #0]
 8023c72:	681a      	ldr	r2, [r3, #0]
 8023c74:	687b      	ldr	r3, [r7, #4]
 8023c76:	681b      	ldr	r3, [r3, #0]
 8023c78:	f022 0201 	bic.w	r2, r2, #1
 8023c7c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8023c7e:	68bb      	ldr	r3, [r7, #8]
 8023c80:	3301      	adds	r3, #1
 8023c82:	60bb      	str	r3, [r7, #8]
 8023c84:	697a      	ldr	r2, [r7, #20]
 8023c86:	429a      	cmp	r2, r3
 8023c88:	d307      	bcc.n	8023c9a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8023c8a:	687b      	ldr	r3, [r7, #4]
 8023c8c:	681b      	ldr	r3, [r3, #0]
 8023c8e:	681b      	ldr	r3, [r3, #0]
 8023c90:	f003 0301 	and.w	r3, r3, #1
 8023c94:	2b00      	cmp	r3, #0
 8023c96:	d1f2      	bne.n	8023c7e <HAL_DMA_IRQHandler+0x2ca>
 8023c98:	e000      	b.n	8023c9c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8023c9a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8023c9c:	687b      	ldr	r3, [r7, #4]
 8023c9e:	2200      	movs	r2, #0
 8023ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8023ca4:	687b      	ldr	r3, [r7, #4]
 8023ca6:	2201      	movs	r2, #1
 8023ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8023cac:	687b      	ldr	r3, [r7, #4]
 8023cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023cb0:	2b00      	cmp	r3, #0
 8023cb2:	d005      	beq.n	8023cc0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8023cb4:	687b      	ldr	r3, [r7, #4]
 8023cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8023cb8:	6878      	ldr	r0, [r7, #4]
 8023cba:	4798      	blx	r3
 8023cbc:	e000      	b.n	8023cc0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8023cbe:	bf00      	nop
    }
  }
}
 8023cc0:	3718      	adds	r7, #24
 8023cc2:	46bd      	mov	sp, r7
 8023cc4:	bd80      	pop	{r7, pc}
 8023cc6:	bf00      	nop

08023cc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8023cc8:	b480      	push	{r7}
 8023cca:	b085      	sub	sp, #20
 8023ccc:	af00      	add	r7, sp, #0
 8023cce:	60f8      	str	r0, [r7, #12]
 8023cd0:	60b9      	str	r1, [r7, #8]
 8023cd2:	607a      	str	r2, [r7, #4]
 8023cd4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8023cd6:	68fb      	ldr	r3, [r7, #12]
 8023cd8:	681b      	ldr	r3, [r3, #0]
 8023cda:	681a      	ldr	r2, [r3, #0]
 8023cdc:	68fb      	ldr	r3, [r7, #12]
 8023cde:	681b      	ldr	r3, [r3, #0]
 8023ce0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8023ce4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8023ce6:	68fb      	ldr	r3, [r7, #12]
 8023ce8:	681b      	ldr	r3, [r3, #0]
 8023cea:	683a      	ldr	r2, [r7, #0]
 8023cec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8023cee:	68fb      	ldr	r3, [r7, #12]
 8023cf0:	689b      	ldr	r3, [r3, #8]
 8023cf2:	2b40      	cmp	r3, #64	; 0x40
 8023cf4:	d108      	bne.n	8023d08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8023cf6:	68fb      	ldr	r3, [r7, #12]
 8023cf8:	681b      	ldr	r3, [r3, #0]
 8023cfa:	687a      	ldr	r2, [r7, #4]
 8023cfc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8023cfe:	68fb      	ldr	r3, [r7, #12]
 8023d00:	681b      	ldr	r3, [r3, #0]
 8023d02:	68ba      	ldr	r2, [r7, #8]
 8023d04:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8023d06:	e007      	b.n	8023d18 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8023d08:	68fb      	ldr	r3, [r7, #12]
 8023d0a:	681b      	ldr	r3, [r3, #0]
 8023d0c:	68ba      	ldr	r2, [r7, #8]
 8023d0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8023d10:	68fb      	ldr	r3, [r7, #12]
 8023d12:	681b      	ldr	r3, [r3, #0]
 8023d14:	687a      	ldr	r2, [r7, #4]
 8023d16:	60da      	str	r2, [r3, #12]
}
 8023d18:	bf00      	nop
 8023d1a:	3714      	adds	r7, #20
 8023d1c:	46bd      	mov	sp, r7
 8023d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d22:	4770      	bx	lr

08023d24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8023d24:	b480      	push	{r7}
 8023d26:	b085      	sub	sp, #20
 8023d28:	af00      	add	r7, sp, #0
 8023d2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8023d2c:	687b      	ldr	r3, [r7, #4]
 8023d2e:	681b      	ldr	r3, [r3, #0]
 8023d30:	b2db      	uxtb	r3, r3
 8023d32:	3b10      	subs	r3, #16
 8023d34:	4a14      	ldr	r2, [pc, #80]	; (8023d88 <DMA_CalcBaseAndBitshift+0x64>)
 8023d36:	fba2 2303 	umull	r2, r3, r2, r3
 8023d3a:	091b      	lsrs	r3, r3, #4
 8023d3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8023d3e:	4a13      	ldr	r2, [pc, #76]	; (8023d8c <DMA_CalcBaseAndBitshift+0x68>)
 8023d40:	68fb      	ldr	r3, [r7, #12]
 8023d42:	4413      	add	r3, r2
 8023d44:	781b      	ldrb	r3, [r3, #0]
 8023d46:	461a      	mov	r2, r3
 8023d48:	687b      	ldr	r3, [r7, #4]
 8023d4a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8023d4c:	68fb      	ldr	r3, [r7, #12]
 8023d4e:	2b03      	cmp	r3, #3
 8023d50:	d909      	bls.n	8023d66 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8023d52:	687b      	ldr	r3, [r7, #4]
 8023d54:	681b      	ldr	r3, [r3, #0]
 8023d56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8023d5a:	f023 0303 	bic.w	r3, r3, #3
 8023d5e:	1d1a      	adds	r2, r3, #4
 8023d60:	687b      	ldr	r3, [r7, #4]
 8023d62:	659a      	str	r2, [r3, #88]	; 0x58
 8023d64:	e007      	b.n	8023d76 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8023d66:	687b      	ldr	r3, [r7, #4]
 8023d68:	681b      	ldr	r3, [r3, #0]
 8023d6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8023d6e:	f023 0303 	bic.w	r3, r3, #3
 8023d72:	687a      	ldr	r2, [r7, #4]
 8023d74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8023d76:	687b      	ldr	r3, [r7, #4]
 8023d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8023d7a:	4618      	mov	r0, r3
 8023d7c:	3714      	adds	r7, #20
 8023d7e:	46bd      	mov	sp, r7
 8023d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d84:	4770      	bx	lr
 8023d86:	bf00      	nop
 8023d88:	aaaaaaab 	.word	0xaaaaaaab
 8023d8c:	080278c8 	.word	0x080278c8

08023d90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8023d90:	b480      	push	{r7}
 8023d92:	b085      	sub	sp, #20
 8023d94:	af00      	add	r7, sp, #0
 8023d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8023d98:	2300      	movs	r3, #0
 8023d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8023d9c:	687b      	ldr	r3, [r7, #4]
 8023d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023da0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8023da2:	687b      	ldr	r3, [r7, #4]
 8023da4:	699b      	ldr	r3, [r3, #24]
 8023da6:	2b00      	cmp	r3, #0
 8023da8:	d11f      	bne.n	8023dea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8023daa:	68bb      	ldr	r3, [r7, #8]
 8023dac:	2b03      	cmp	r3, #3
 8023dae:	d855      	bhi.n	8023e5c <DMA_CheckFifoParam+0xcc>
 8023db0:	a201      	add	r2, pc, #4	; (adr r2, 8023db8 <DMA_CheckFifoParam+0x28>)
 8023db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023db6:	bf00      	nop
 8023db8:	08023dc9 	.word	0x08023dc9
 8023dbc:	08023ddb 	.word	0x08023ddb
 8023dc0:	08023dc9 	.word	0x08023dc9
 8023dc4:	08023e5d 	.word	0x08023e5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023dc8:	687b      	ldr	r3, [r7, #4]
 8023dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023dcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023dd0:	2b00      	cmp	r3, #0
 8023dd2:	d045      	beq.n	8023e60 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8023dd4:	2301      	movs	r3, #1
 8023dd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023dd8:	e042      	b.n	8023e60 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8023dda:	687b      	ldr	r3, [r7, #4]
 8023ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023dde:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8023de2:	d13f      	bne.n	8023e64 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8023de4:	2301      	movs	r3, #1
 8023de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023de8:	e03c      	b.n	8023e64 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8023dea:	687b      	ldr	r3, [r7, #4]
 8023dec:	699b      	ldr	r3, [r3, #24]
 8023dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8023df2:	d121      	bne.n	8023e38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8023df4:	68bb      	ldr	r3, [r7, #8]
 8023df6:	2b03      	cmp	r3, #3
 8023df8:	d836      	bhi.n	8023e68 <DMA_CheckFifoParam+0xd8>
 8023dfa:	a201      	add	r2, pc, #4	; (adr r2, 8023e00 <DMA_CheckFifoParam+0x70>)
 8023dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023e00:	08023e11 	.word	0x08023e11
 8023e04:	08023e17 	.word	0x08023e17
 8023e08:	08023e11 	.word	0x08023e11
 8023e0c:	08023e29 	.word	0x08023e29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8023e10:	2301      	movs	r3, #1
 8023e12:	73fb      	strb	r3, [r7, #15]
      break;
 8023e14:	e02f      	b.n	8023e76 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023e16:	687b      	ldr	r3, [r7, #4]
 8023e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023e1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023e1e:	2b00      	cmp	r3, #0
 8023e20:	d024      	beq.n	8023e6c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8023e22:	2301      	movs	r3, #1
 8023e24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8023e26:	e021      	b.n	8023e6c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8023e28:	687b      	ldr	r3, [r7, #4]
 8023e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023e2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8023e30:	d11e      	bne.n	8023e70 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8023e32:	2301      	movs	r3, #1
 8023e34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8023e36:	e01b      	b.n	8023e70 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8023e38:	68bb      	ldr	r3, [r7, #8]
 8023e3a:	2b02      	cmp	r3, #2
 8023e3c:	d902      	bls.n	8023e44 <DMA_CheckFifoParam+0xb4>
 8023e3e:	2b03      	cmp	r3, #3
 8023e40:	d003      	beq.n	8023e4a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8023e42:	e018      	b.n	8023e76 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8023e44:	2301      	movs	r3, #1
 8023e46:	73fb      	strb	r3, [r7, #15]
      break;
 8023e48:	e015      	b.n	8023e76 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8023e4a:	687b      	ldr	r3, [r7, #4]
 8023e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023e4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8023e52:	2b00      	cmp	r3, #0
 8023e54:	d00e      	beq.n	8023e74 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8023e56:	2301      	movs	r3, #1
 8023e58:	73fb      	strb	r3, [r7, #15]
      break;
 8023e5a:	e00b      	b.n	8023e74 <DMA_CheckFifoParam+0xe4>
      break;
 8023e5c:	bf00      	nop
 8023e5e:	e00a      	b.n	8023e76 <DMA_CheckFifoParam+0xe6>
      break;
 8023e60:	bf00      	nop
 8023e62:	e008      	b.n	8023e76 <DMA_CheckFifoParam+0xe6>
      break;
 8023e64:	bf00      	nop
 8023e66:	e006      	b.n	8023e76 <DMA_CheckFifoParam+0xe6>
      break;
 8023e68:	bf00      	nop
 8023e6a:	e004      	b.n	8023e76 <DMA_CheckFifoParam+0xe6>
      break;
 8023e6c:	bf00      	nop
 8023e6e:	e002      	b.n	8023e76 <DMA_CheckFifoParam+0xe6>
      break;   
 8023e70:	bf00      	nop
 8023e72:	e000      	b.n	8023e76 <DMA_CheckFifoParam+0xe6>
      break;
 8023e74:	bf00      	nop
    }
  } 
  
  return status; 
 8023e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8023e78:	4618      	mov	r0, r3
 8023e7a:	3714      	adds	r7, #20
 8023e7c:	46bd      	mov	sp, r7
 8023e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e82:	4770      	bx	lr

08023e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8023e84:	b480      	push	{r7}
 8023e86:	b089      	sub	sp, #36	; 0x24
 8023e88:	af00      	add	r7, sp, #0
 8023e8a:	6078      	str	r0, [r7, #4]
 8023e8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8023e8e:	2300      	movs	r3, #0
 8023e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8023e92:	2300      	movs	r3, #0
 8023e94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8023e96:	2300      	movs	r3, #0
 8023e98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8023e9a:	2300      	movs	r3, #0
 8023e9c:	61fb      	str	r3, [r7, #28]
 8023e9e:	e16b      	b.n	8024178 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8023ea0:	2201      	movs	r2, #1
 8023ea2:	69fb      	ldr	r3, [r7, #28]
 8023ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8023ea8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8023eaa:	683b      	ldr	r3, [r7, #0]
 8023eac:	681b      	ldr	r3, [r3, #0]
 8023eae:	697a      	ldr	r2, [r7, #20]
 8023eb0:	4013      	ands	r3, r2
 8023eb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8023eb4:	693a      	ldr	r2, [r7, #16]
 8023eb6:	697b      	ldr	r3, [r7, #20]
 8023eb8:	429a      	cmp	r2, r3
 8023eba:	f040 815a 	bne.w	8024172 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8023ebe:	683b      	ldr	r3, [r7, #0]
 8023ec0:	685b      	ldr	r3, [r3, #4]
 8023ec2:	2b01      	cmp	r3, #1
 8023ec4:	d00b      	beq.n	8023ede <HAL_GPIO_Init+0x5a>
 8023ec6:	683b      	ldr	r3, [r7, #0]
 8023ec8:	685b      	ldr	r3, [r3, #4]
 8023eca:	2b02      	cmp	r3, #2
 8023ecc:	d007      	beq.n	8023ede <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8023ece:	683b      	ldr	r3, [r7, #0]
 8023ed0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8023ed2:	2b11      	cmp	r3, #17
 8023ed4:	d003      	beq.n	8023ede <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8023ed6:	683b      	ldr	r3, [r7, #0]
 8023ed8:	685b      	ldr	r3, [r3, #4]
 8023eda:	2b12      	cmp	r3, #18
 8023edc:	d130      	bne.n	8023f40 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8023ede:	687b      	ldr	r3, [r7, #4]
 8023ee0:	689b      	ldr	r3, [r3, #8]
 8023ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8023ee4:	69fb      	ldr	r3, [r7, #28]
 8023ee6:	005b      	lsls	r3, r3, #1
 8023ee8:	2203      	movs	r2, #3
 8023eea:	fa02 f303 	lsl.w	r3, r2, r3
 8023eee:	43db      	mvns	r3, r3
 8023ef0:	69ba      	ldr	r2, [r7, #24]
 8023ef2:	4013      	ands	r3, r2
 8023ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8023ef6:	683b      	ldr	r3, [r7, #0]
 8023ef8:	68da      	ldr	r2, [r3, #12]
 8023efa:	69fb      	ldr	r3, [r7, #28]
 8023efc:	005b      	lsls	r3, r3, #1
 8023efe:	fa02 f303 	lsl.w	r3, r2, r3
 8023f02:	69ba      	ldr	r2, [r7, #24]
 8023f04:	4313      	orrs	r3, r2
 8023f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8023f08:	687b      	ldr	r3, [r7, #4]
 8023f0a:	69ba      	ldr	r2, [r7, #24]
 8023f0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8023f0e:	687b      	ldr	r3, [r7, #4]
 8023f10:	685b      	ldr	r3, [r3, #4]
 8023f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8023f14:	2201      	movs	r2, #1
 8023f16:	69fb      	ldr	r3, [r7, #28]
 8023f18:	fa02 f303 	lsl.w	r3, r2, r3
 8023f1c:	43db      	mvns	r3, r3
 8023f1e:	69ba      	ldr	r2, [r7, #24]
 8023f20:	4013      	ands	r3, r2
 8023f22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8023f24:	683b      	ldr	r3, [r7, #0]
 8023f26:	685b      	ldr	r3, [r3, #4]
 8023f28:	091b      	lsrs	r3, r3, #4
 8023f2a:	f003 0201 	and.w	r2, r3, #1
 8023f2e:	69fb      	ldr	r3, [r7, #28]
 8023f30:	fa02 f303 	lsl.w	r3, r2, r3
 8023f34:	69ba      	ldr	r2, [r7, #24]
 8023f36:	4313      	orrs	r3, r2
 8023f38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8023f3a:	687b      	ldr	r3, [r7, #4]
 8023f3c:	69ba      	ldr	r2, [r7, #24]
 8023f3e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8023f40:	687b      	ldr	r3, [r7, #4]
 8023f42:	68db      	ldr	r3, [r3, #12]
 8023f44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8023f46:	69fb      	ldr	r3, [r7, #28]
 8023f48:	005b      	lsls	r3, r3, #1
 8023f4a:	2203      	movs	r2, #3
 8023f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8023f50:	43db      	mvns	r3, r3
 8023f52:	69ba      	ldr	r2, [r7, #24]
 8023f54:	4013      	ands	r3, r2
 8023f56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8023f58:	683b      	ldr	r3, [r7, #0]
 8023f5a:	689a      	ldr	r2, [r3, #8]
 8023f5c:	69fb      	ldr	r3, [r7, #28]
 8023f5e:	005b      	lsls	r3, r3, #1
 8023f60:	fa02 f303 	lsl.w	r3, r2, r3
 8023f64:	69ba      	ldr	r2, [r7, #24]
 8023f66:	4313      	orrs	r3, r2
 8023f68:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8023f6a:	687b      	ldr	r3, [r7, #4]
 8023f6c:	69ba      	ldr	r2, [r7, #24]
 8023f6e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8023f70:	683b      	ldr	r3, [r7, #0]
 8023f72:	685b      	ldr	r3, [r3, #4]
 8023f74:	2b02      	cmp	r3, #2
 8023f76:	d003      	beq.n	8023f80 <HAL_GPIO_Init+0xfc>
 8023f78:	683b      	ldr	r3, [r7, #0]
 8023f7a:	685b      	ldr	r3, [r3, #4]
 8023f7c:	2b12      	cmp	r3, #18
 8023f7e:	d123      	bne.n	8023fc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8023f80:	69fb      	ldr	r3, [r7, #28]
 8023f82:	08da      	lsrs	r2, r3, #3
 8023f84:	687b      	ldr	r3, [r7, #4]
 8023f86:	3208      	adds	r2, #8
 8023f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8023f8e:	69fb      	ldr	r3, [r7, #28]
 8023f90:	f003 0307 	and.w	r3, r3, #7
 8023f94:	009b      	lsls	r3, r3, #2
 8023f96:	220f      	movs	r2, #15
 8023f98:	fa02 f303 	lsl.w	r3, r2, r3
 8023f9c:	43db      	mvns	r3, r3
 8023f9e:	69ba      	ldr	r2, [r7, #24]
 8023fa0:	4013      	ands	r3, r2
 8023fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8023fa4:	683b      	ldr	r3, [r7, #0]
 8023fa6:	691a      	ldr	r2, [r3, #16]
 8023fa8:	69fb      	ldr	r3, [r7, #28]
 8023faa:	f003 0307 	and.w	r3, r3, #7
 8023fae:	009b      	lsls	r3, r3, #2
 8023fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8023fb4:	69ba      	ldr	r2, [r7, #24]
 8023fb6:	4313      	orrs	r3, r2
 8023fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8023fba:	69fb      	ldr	r3, [r7, #28]
 8023fbc:	08da      	lsrs	r2, r3, #3
 8023fbe:	687b      	ldr	r3, [r7, #4]
 8023fc0:	3208      	adds	r2, #8
 8023fc2:	69b9      	ldr	r1, [r7, #24]
 8023fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8023fc8:	687b      	ldr	r3, [r7, #4]
 8023fca:	681b      	ldr	r3, [r3, #0]
 8023fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8023fce:	69fb      	ldr	r3, [r7, #28]
 8023fd0:	005b      	lsls	r3, r3, #1
 8023fd2:	2203      	movs	r2, #3
 8023fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8023fd8:	43db      	mvns	r3, r3
 8023fda:	69ba      	ldr	r2, [r7, #24]
 8023fdc:	4013      	ands	r3, r2
 8023fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8023fe0:	683b      	ldr	r3, [r7, #0]
 8023fe2:	685b      	ldr	r3, [r3, #4]
 8023fe4:	f003 0203 	and.w	r2, r3, #3
 8023fe8:	69fb      	ldr	r3, [r7, #28]
 8023fea:	005b      	lsls	r3, r3, #1
 8023fec:	fa02 f303 	lsl.w	r3, r2, r3
 8023ff0:	69ba      	ldr	r2, [r7, #24]
 8023ff2:	4313      	orrs	r3, r2
 8023ff4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8023ff6:	687b      	ldr	r3, [r7, #4]
 8023ff8:	69ba      	ldr	r2, [r7, #24]
 8023ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8023ffc:	683b      	ldr	r3, [r7, #0]
 8023ffe:	685b      	ldr	r3, [r3, #4]
 8024000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8024004:	2b00      	cmp	r3, #0
 8024006:	f000 80b4 	beq.w	8024172 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 802400a:	2300      	movs	r3, #0
 802400c:	60fb      	str	r3, [r7, #12]
 802400e:	4b5f      	ldr	r3, [pc, #380]	; (802418c <HAL_GPIO_Init+0x308>)
 8024010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8024012:	4a5e      	ldr	r2, [pc, #376]	; (802418c <HAL_GPIO_Init+0x308>)
 8024014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8024018:	6453      	str	r3, [r2, #68]	; 0x44
 802401a:	4b5c      	ldr	r3, [pc, #368]	; (802418c <HAL_GPIO_Init+0x308>)
 802401c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802401e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8024022:	60fb      	str	r3, [r7, #12]
 8024024:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8024026:	4a5a      	ldr	r2, [pc, #360]	; (8024190 <HAL_GPIO_Init+0x30c>)
 8024028:	69fb      	ldr	r3, [r7, #28]
 802402a:	089b      	lsrs	r3, r3, #2
 802402c:	3302      	adds	r3, #2
 802402e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8024032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8024034:	69fb      	ldr	r3, [r7, #28]
 8024036:	f003 0303 	and.w	r3, r3, #3
 802403a:	009b      	lsls	r3, r3, #2
 802403c:	220f      	movs	r2, #15
 802403e:	fa02 f303 	lsl.w	r3, r2, r3
 8024042:	43db      	mvns	r3, r3
 8024044:	69ba      	ldr	r2, [r7, #24]
 8024046:	4013      	ands	r3, r2
 8024048:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 802404a:	687b      	ldr	r3, [r7, #4]
 802404c:	4a51      	ldr	r2, [pc, #324]	; (8024194 <HAL_GPIO_Init+0x310>)
 802404e:	4293      	cmp	r3, r2
 8024050:	d02b      	beq.n	80240aa <HAL_GPIO_Init+0x226>
 8024052:	687b      	ldr	r3, [r7, #4]
 8024054:	4a50      	ldr	r2, [pc, #320]	; (8024198 <HAL_GPIO_Init+0x314>)
 8024056:	4293      	cmp	r3, r2
 8024058:	d025      	beq.n	80240a6 <HAL_GPIO_Init+0x222>
 802405a:	687b      	ldr	r3, [r7, #4]
 802405c:	4a4f      	ldr	r2, [pc, #316]	; (802419c <HAL_GPIO_Init+0x318>)
 802405e:	4293      	cmp	r3, r2
 8024060:	d01f      	beq.n	80240a2 <HAL_GPIO_Init+0x21e>
 8024062:	687b      	ldr	r3, [r7, #4]
 8024064:	4a4e      	ldr	r2, [pc, #312]	; (80241a0 <HAL_GPIO_Init+0x31c>)
 8024066:	4293      	cmp	r3, r2
 8024068:	d019      	beq.n	802409e <HAL_GPIO_Init+0x21a>
 802406a:	687b      	ldr	r3, [r7, #4]
 802406c:	4a4d      	ldr	r2, [pc, #308]	; (80241a4 <HAL_GPIO_Init+0x320>)
 802406e:	4293      	cmp	r3, r2
 8024070:	d013      	beq.n	802409a <HAL_GPIO_Init+0x216>
 8024072:	687b      	ldr	r3, [r7, #4]
 8024074:	4a4c      	ldr	r2, [pc, #304]	; (80241a8 <HAL_GPIO_Init+0x324>)
 8024076:	4293      	cmp	r3, r2
 8024078:	d00d      	beq.n	8024096 <HAL_GPIO_Init+0x212>
 802407a:	687b      	ldr	r3, [r7, #4]
 802407c:	4a4b      	ldr	r2, [pc, #300]	; (80241ac <HAL_GPIO_Init+0x328>)
 802407e:	4293      	cmp	r3, r2
 8024080:	d007      	beq.n	8024092 <HAL_GPIO_Init+0x20e>
 8024082:	687b      	ldr	r3, [r7, #4]
 8024084:	4a4a      	ldr	r2, [pc, #296]	; (80241b0 <HAL_GPIO_Init+0x32c>)
 8024086:	4293      	cmp	r3, r2
 8024088:	d101      	bne.n	802408e <HAL_GPIO_Init+0x20a>
 802408a:	2307      	movs	r3, #7
 802408c:	e00e      	b.n	80240ac <HAL_GPIO_Init+0x228>
 802408e:	2308      	movs	r3, #8
 8024090:	e00c      	b.n	80240ac <HAL_GPIO_Init+0x228>
 8024092:	2306      	movs	r3, #6
 8024094:	e00a      	b.n	80240ac <HAL_GPIO_Init+0x228>
 8024096:	2305      	movs	r3, #5
 8024098:	e008      	b.n	80240ac <HAL_GPIO_Init+0x228>
 802409a:	2304      	movs	r3, #4
 802409c:	e006      	b.n	80240ac <HAL_GPIO_Init+0x228>
 802409e:	2303      	movs	r3, #3
 80240a0:	e004      	b.n	80240ac <HAL_GPIO_Init+0x228>
 80240a2:	2302      	movs	r3, #2
 80240a4:	e002      	b.n	80240ac <HAL_GPIO_Init+0x228>
 80240a6:	2301      	movs	r3, #1
 80240a8:	e000      	b.n	80240ac <HAL_GPIO_Init+0x228>
 80240aa:	2300      	movs	r3, #0
 80240ac:	69fa      	ldr	r2, [r7, #28]
 80240ae:	f002 0203 	and.w	r2, r2, #3
 80240b2:	0092      	lsls	r2, r2, #2
 80240b4:	4093      	lsls	r3, r2
 80240b6:	69ba      	ldr	r2, [r7, #24]
 80240b8:	4313      	orrs	r3, r2
 80240ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80240bc:	4934      	ldr	r1, [pc, #208]	; (8024190 <HAL_GPIO_Init+0x30c>)
 80240be:	69fb      	ldr	r3, [r7, #28]
 80240c0:	089b      	lsrs	r3, r3, #2
 80240c2:	3302      	adds	r3, #2
 80240c4:	69ba      	ldr	r2, [r7, #24]
 80240c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80240ca:	4b3a      	ldr	r3, [pc, #232]	; (80241b4 <HAL_GPIO_Init+0x330>)
 80240cc:	681b      	ldr	r3, [r3, #0]
 80240ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80240d0:	693b      	ldr	r3, [r7, #16]
 80240d2:	43db      	mvns	r3, r3
 80240d4:	69ba      	ldr	r2, [r7, #24]
 80240d6:	4013      	ands	r3, r2
 80240d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80240da:	683b      	ldr	r3, [r7, #0]
 80240dc:	685b      	ldr	r3, [r3, #4]
 80240de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80240e2:	2b00      	cmp	r3, #0
 80240e4:	d003      	beq.n	80240ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80240e6:	69ba      	ldr	r2, [r7, #24]
 80240e8:	693b      	ldr	r3, [r7, #16]
 80240ea:	4313      	orrs	r3, r2
 80240ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80240ee:	4a31      	ldr	r2, [pc, #196]	; (80241b4 <HAL_GPIO_Init+0x330>)
 80240f0:	69bb      	ldr	r3, [r7, #24]
 80240f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80240f4:	4b2f      	ldr	r3, [pc, #188]	; (80241b4 <HAL_GPIO_Init+0x330>)
 80240f6:	685b      	ldr	r3, [r3, #4]
 80240f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80240fa:	693b      	ldr	r3, [r7, #16]
 80240fc:	43db      	mvns	r3, r3
 80240fe:	69ba      	ldr	r2, [r7, #24]
 8024100:	4013      	ands	r3, r2
 8024102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8024104:	683b      	ldr	r3, [r7, #0]
 8024106:	685b      	ldr	r3, [r3, #4]
 8024108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802410c:	2b00      	cmp	r3, #0
 802410e:	d003      	beq.n	8024118 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8024110:	69ba      	ldr	r2, [r7, #24]
 8024112:	693b      	ldr	r3, [r7, #16]
 8024114:	4313      	orrs	r3, r2
 8024116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8024118:	4a26      	ldr	r2, [pc, #152]	; (80241b4 <HAL_GPIO_Init+0x330>)
 802411a:	69bb      	ldr	r3, [r7, #24]
 802411c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 802411e:	4b25      	ldr	r3, [pc, #148]	; (80241b4 <HAL_GPIO_Init+0x330>)
 8024120:	689b      	ldr	r3, [r3, #8]
 8024122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8024124:	693b      	ldr	r3, [r7, #16]
 8024126:	43db      	mvns	r3, r3
 8024128:	69ba      	ldr	r2, [r7, #24]
 802412a:	4013      	ands	r3, r2
 802412c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 802412e:	683b      	ldr	r3, [r7, #0]
 8024130:	685b      	ldr	r3, [r3, #4]
 8024132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8024136:	2b00      	cmp	r3, #0
 8024138:	d003      	beq.n	8024142 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 802413a:	69ba      	ldr	r2, [r7, #24]
 802413c:	693b      	ldr	r3, [r7, #16]
 802413e:	4313      	orrs	r3, r2
 8024140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8024142:	4a1c      	ldr	r2, [pc, #112]	; (80241b4 <HAL_GPIO_Init+0x330>)
 8024144:	69bb      	ldr	r3, [r7, #24]
 8024146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8024148:	4b1a      	ldr	r3, [pc, #104]	; (80241b4 <HAL_GPIO_Init+0x330>)
 802414a:	68db      	ldr	r3, [r3, #12]
 802414c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802414e:	693b      	ldr	r3, [r7, #16]
 8024150:	43db      	mvns	r3, r3
 8024152:	69ba      	ldr	r2, [r7, #24]
 8024154:	4013      	ands	r3, r2
 8024156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8024158:	683b      	ldr	r3, [r7, #0]
 802415a:	685b      	ldr	r3, [r3, #4]
 802415c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8024160:	2b00      	cmp	r3, #0
 8024162:	d003      	beq.n	802416c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8024164:	69ba      	ldr	r2, [r7, #24]
 8024166:	693b      	ldr	r3, [r7, #16]
 8024168:	4313      	orrs	r3, r2
 802416a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 802416c:	4a11      	ldr	r2, [pc, #68]	; (80241b4 <HAL_GPIO_Init+0x330>)
 802416e:	69bb      	ldr	r3, [r7, #24]
 8024170:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8024172:	69fb      	ldr	r3, [r7, #28]
 8024174:	3301      	adds	r3, #1
 8024176:	61fb      	str	r3, [r7, #28]
 8024178:	69fb      	ldr	r3, [r7, #28]
 802417a:	2b0f      	cmp	r3, #15
 802417c:	f67f ae90 	bls.w	8023ea0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8024180:	bf00      	nop
 8024182:	3724      	adds	r7, #36	; 0x24
 8024184:	46bd      	mov	sp, r7
 8024186:	f85d 7b04 	ldr.w	r7, [sp], #4
 802418a:	4770      	bx	lr
 802418c:	40023800 	.word	0x40023800
 8024190:	40013800 	.word	0x40013800
 8024194:	40020000 	.word	0x40020000
 8024198:	40020400 	.word	0x40020400
 802419c:	40020800 	.word	0x40020800
 80241a0:	40020c00 	.word	0x40020c00
 80241a4:	40021000 	.word	0x40021000
 80241a8:	40021400 	.word	0x40021400
 80241ac:	40021800 	.word	0x40021800
 80241b0:	40021c00 	.word	0x40021c00
 80241b4:	40013c00 	.word	0x40013c00

080241b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80241b8:	b480      	push	{r7}
 80241ba:	b085      	sub	sp, #20
 80241bc:	af00      	add	r7, sp, #0
 80241be:	6078      	str	r0, [r7, #4]
 80241c0:	460b      	mov	r3, r1
 80241c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80241c4:	687b      	ldr	r3, [r7, #4]
 80241c6:	691a      	ldr	r2, [r3, #16]
 80241c8:	887b      	ldrh	r3, [r7, #2]
 80241ca:	4013      	ands	r3, r2
 80241cc:	2b00      	cmp	r3, #0
 80241ce:	d002      	beq.n	80241d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80241d0:	2301      	movs	r3, #1
 80241d2:	73fb      	strb	r3, [r7, #15]
 80241d4:	e001      	b.n	80241da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80241d6:	2300      	movs	r3, #0
 80241d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80241da:	7bfb      	ldrb	r3, [r7, #15]
}
 80241dc:	4618      	mov	r0, r3
 80241de:	3714      	adds	r7, #20
 80241e0:	46bd      	mov	sp, r7
 80241e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241e6:	4770      	bx	lr

080241e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80241e8:	b480      	push	{r7}
 80241ea:	b083      	sub	sp, #12
 80241ec:	af00      	add	r7, sp, #0
 80241ee:	6078      	str	r0, [r7, #4]
 80241f0:	460b      	mov	r3, r1
 80241f2:	807b      	strh	r3, [r7, #2]
 80241f4:	4613      	mov	r3, r2
 80241f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80241f8:	787b      	ldrb	r3, [r7, #1]
 80241fa:	2b00      	cmp	r3, #0
 80241fc:	d003      	beq.n	8024206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80241fe:	887a      	ldrh	r2, [r7, #2]
 8024200:	687b      	ldr	r3, [r7, #4]
 8024202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8024204:	e003      	b.n	802420e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8024206:	887b      	ldrh	r3, [r7, #2]
 8024208:	041a      	lsls	r2, r3, #16
 802420a:	687b      	ldr	r3, [r7, #4]
 802420c:	619a      	str	r2, [r3, #24]
}
 802420e:	bf00      	nop
 8024210:	370c      	adds	r7, #12
 8024212:	46bd      	mov	sp, r7
 8024214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024218:	4770      	bx	lr
	...

0802421c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 802421c:	b580      	push	{r7, lr}
 802421e:	b084      	sub	sp, #16
 8024220:	af00      	add	r7, sp, #0
 8024222:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8024224:	687b      	ldr	r3, [r7, #4]
 8024226:	2b00      	cmp	r3, #0
 8024228:	d101      	bne.n	802422e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 802422a:	2301      	movs	r3, #1
 802422c:	e11f      	b.n	802446e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 802422e:	687b      	ldr	r3, [r7, #4]
 8024230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8024234:	b2db      	uxtb	r3, r3
 8024236:	2b00      	cmp	r3, #0
 8024238:	d106      	bne.n	8024248 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 802423a:	687b      	ldr	r3, [r7, #4]
 802423c:	2200      	movs	r2, #0
 802423e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8024242:	6878      	ldr	r0, [r7, #4]
 8024244:	f7fd ffe6 	bl	8022214 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8024248:	687b      	ldr	r3, [r7, #4]
 802424a:	2224      	movs	r2, #36	; 0x24
 802424c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8024250:	687b      	ldr	r3, [r7, #4]
 8024252:	681b      	ldr	r3, [r3, #0]
 8024254:	681a      	ldr	r2, [r3, #0]
 8024256:	687b      	ldr	r3, [r7, #4]
 8024258:	681b      	ldr	r3, [r3, #0]
 802425a:	f022 0201 	bic.w	r2, r2, #1
 802425e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8024260:	687b      	ldr	r3, [r7, #4]
 8024262:	681b      	ldr	r3, [r3, #0]
 8024264:	681a      	ldr	r2, [r3, #0]
 8024266:	687b      	ldr	r3, [r7, #4]
 8024268:	681b      	ldr	r3, [r3, #0]
 802426a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 802426e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8024270:	687b      	ldr	r3, [r7, #4]
 8024272:	681b      	ldr	r3, [r3, #0]
 8024274:	681a      	ldr	r2, [r3, #0]
 8024276:	687b      	ldr	r3, [r7, #4]
 8024278:	681b      	ldr	r3, [r3, #0]
 802427a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 802427e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8024280:	f000 fd18 	bl	8024cb4 <HAL_RCC_GetPCLK1Freq>
 8024284:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8024286:	687b      	ldr	r3, [r7, #4]
 8024288:	685b      	ldr	r3, [r3, #4]
 802428a:	4a7b      	ldr	r2, [pc, #492]	; (8024478 <HAL_I2C_Init+0x25c>)
 802428c:	4293      	cmp	r3, r2
 802428e:	d807      	bhi.n	80242a0 <HAL_I2C_Init+0x84>
 8024290:	68fb      	ldr	r3, [r7, #12]
 8024292:	4a7a      	ldr	r2, [pc, #488]	; (802447c <HAL_I2C_Init+0x260>)
 8024294:	4293      	cmp	r3, r2
 8024296:	bf94      	ite	ls
 8024298:	2301      	movls	r3, #1
 802429a:	2300      	movhi	r3, #0
 802429c:	b2db      	uxtb	r3, r3
 802429e:	e006      	b.n	80242ae <HAL_I2C_Init+0x92>
 80242a0:	68fb      	ldr	r3, [r7, #12]
 80242a2:	4a77      	ldr	r2, [pc, #476]	; (8024480 <HAL_I2C_Init+0x264>)
 80242a4:	4293      	cmp	r3, r2
 80242a6:	bf94      	ite	ls
 80242a8:	2301      	movls	r3, #1
 80242aa:	2300      	movhi	r3, #0
 80242ac:	b2db      	uxtb	r3, r3
 80242ae:	2b00      	cmp	r3, #0
 80242b0:	d001      	beq.n	80242b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80242b2:	2301      	movs	r3, #1
 80242b4:	e0db      	b.n	802446e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80242b6:	68fb      	ldr	r3, [r7, #12]
 80242b8:	4a72      	ldr	r2, [pc, #456]	; (8024484 <HAL_I2C_Init+0x268>)
 80242ba:	fba2 2303 	umull	r2, r3, r2, r3
 80242be:	0c9b      	lsrs	r3, r3, #18
 80242c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80242c2:	687b      	ldr	r3, [r7, #4]
 80242c4:	681b      	ldr	r3, [r3, #0]
 80242c6:	685b      	ldr	r3, [r3, #4]
 80242c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80242cc:	687b      	ldr	r3, [r7, #4]
 80242ce:	681b      	ldr	r3, [r3, #0]
 80242d0:	68ba      	ldr	r2, [r7, #8]
 80242d2:	430a      	orrs	r2, r1
 80242d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80242d6:	687b      	ldr	r3, [r7, #4]
 80242d8:	681b      	ldr	r3, [r3, #0]
 80242da:	6a1b      	ldr	r3, [r3, #32]
 80242dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80242e0:	687b      	ldr	r3, [r7, #4]
 80242e2:	685b      	ldr	r3, [r3, #4]
 80242e4:	4a64      	ldr	r2, [pc, #400]	; (8024478 <HAL_I2C_Init+0x25c>)
 80242e6:	4293      	cmp	r3, r2
 80242e8:	d802      	bhi.n	80242f0 <HAL_I2C_Init+0xd4>
 80242ea:	68bb      	ldr	r3, [r7, #8]
 80242ec:	3301      	adds	r3, #1
 80242ee:	e009      	b.n	8024304 <HAL_I2C_Init+0xe8>
 80242f0:	68bb      	ldr	r3, [r7, #8]
 80242f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80242f6:	fb02 f303 	mul.w	r3, r2, r3
 80242fa:	4a63      	ldr	r2, [pc, #396]	; (8024488 <HAL_I2C_Init+0x26c>)
 80242fc:	fba2 2303 	umull	r2, r3, r2, r3
 8024300:	099b      	lsrs	r3, r3, #6
 8024302:	3301      	adds	r3, #1
 8024304:	687a      	ldr	r2, [r7, #4]
 8024306:	6812      	ldr	r2, [r2, #0]
 8024308:	430b      	orrs	r3, r1
 802430a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 802430c:	687b      	ldr	r3, [r7, #4]
 802430e:	681b      	ldr	r3, [r3, #0]
 8024310:	69db      	ldr	r3, [r3, #28]
 8024312:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8024316:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 802431a:	687b      	ldr	r3, [r7, #4]
 802431c:	685b      	ldr	r3, [r3, #4]
 802431e:	4956      	ldr	r1, [pc, #344]	; (8024478 <HAL_I2C_Init+0x25c>)
 8024320:	428b      	cmp	r3, r1
 8024322:	d80d      	bhi.n	8024340 <HAL_I2C_Init+0x124>
 8024324:	68fb      	ldr	r3, [r7, #12]
 8024326:	1e59      	subs	r1, r3, #1
 8024328:	687b      	ldr	r3, [r7, #4]
 802432a:	685b      	ldr	r3, [r3, #4]
 802432c:	005b      	lsls	r3, r3, #1
 802432e:	fbb1 f3f3 	udiv	r3, r1, r3
 8024332:	3301      	adds	r3, #1
 8024334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024338:	2b04      	cmp	r3, #4
 802433a:	bf38      	it	cc
 802433c:	2304      	movcc	r3, #4
 802433e:	e04f      	b.n	80243e0 <HAL_I2C_Init+0x1c4>
 8024340:	687b      	ldr	r3, [r7, #4]
 8024342:	689b      	ldr	r3, [r3, #8]
 8024344:	2b00      	cmp	r3, #0
 8024346:	d111      	bne.n	802436c <HAL_I2C_Init+0x150>
 8024348:	68fb      	ldr	r3, [r7, #12]
 802434a:	1e58      	subs	r0, r3, #1
 802434c:	687b      	ldr	r3, [r7, #4]
 802434e:	6859      	ldr	r1, [r3, #4]
 8024350:	460b      	mov	r3, r1
 8024352:	005b      	lsls	r3, r3, #1
 8024354:	440b      	add	r3, r1
 8024356:	fbb0 f3f3 	udiv	r3, r0, r3
 802435a:	3301      	adds	r3, #1
 802435c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024360:	2b00      	cmp	r3, #0
 8024362:	bf0c      	ite	eq
 8024364:	2301      	moveq	r3, #1
 8024366:	2300      	movne	r3, #0
 8024368:	b2db      	uxtb	r3, r3
 802436a:	e012      	b.n	8024392 <HAL_I2C_Init+0x176>
 802436c:	68fb      	ldr	r3, [r7, #12]
 802436e:	1e58      	subs	r0, r3, #1
 8024370:	687b      	ldr	r3, [r7, #4]
 8024372:	6859      	ldr	r1, [r3, #4]
 8024374:	460b      	mov	r3, r1
 8024376:	009b      	lsls	r3, r3, #2
 8024378:	440b      	add	r3, r1
 802437a:	0099      	lsls	r1, r3, #2
 802437c:	440b      	add	r3, r1
 802437e:	fbb0 f3f3 	udiv	r3, r0, r3
 8024382:	3301      	adds	r3, #1
 8024384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8024388:	2b00      	cmp	r3, #0
 802438a:	bf0c      	ite	eq
 802438c:	2301      	moveq	r3, #1
 802438e:	2300      	movne	r3, #0
 8024390:	b2db      	uxtb	r3, r3
 8024392:	2b00      	cmp	r3, #0
 8024394:	d001      	beq.n	802439a <HAL_I2C_Init+0x17e>
 8024396:	2301      	movs	r3, #1
 8024398:	e022      	b.n	80243e0 <HAL_I2C_Init+0x1c4>
 802439a:	687b      	ldr	r3, [r7, #4]
 802439c:	689b      	ldr	r3, [r3, #8]
 802439e:	2b00      	cmp	r3, #0
 80243a0:	d10e      	bne.n	80243c0 <HAL_I2C_Init+0x1a4>
 80243a2:	68fb      	ldr	r3, [r7, #12]
 80243a4:	1e58      	subs	r0, r3, #1
 80243a6:	687b      	ldr	r3, [r7, #4]
 80243a8:	6859      	ldr	r1, [r3, #4]
 80243aa:	460b      	mov	r3, r1
 80243ac:	005b      	lsls	r3, r3, #1
 80243ae:	440b      	add	r3, r1
 80243b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80243b4:	3301      	adds	r3, #1
 80243b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80243ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80243be:	e00f      	b.n	80243e0 <HAL_I2C_Init+0x1c4>
 80243c0:	68fb      	ldr	r3, [r7, #12]
 80243c2:	1e58      	subs	r0, r3, #1
 80243c4:	687b      	ldr	r3, [r7, #4]
 80243c6:	6859      	ldr	r1, [r3, #4]
 80243c8:	460b      	mov	r3, r1
 80243ca:	009b      	lsls	r3, r3, #2
 80243cc:	440b      	add	r3, r1
 80243ce:	0099      	lsls	r1, r3, #2
 80243d0:	440b      	add	r3, r1
 80243d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80243d6:	3301      	adds	r3, #1
 80243d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80243dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80243e0:	6879      	ldr	r1, [r7, #4]
 80243e2:	6809      	ldr	r1, [r1, #0]
 80243e4:	4313      	orrs	r3, r2
 80243e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80243e8:	687b      	ldr	r3, [r7, #4]
 80243ea:	681b      	ldr	r3, [r3, #0]
 80243ec:	681b      	ldr	r3, [r3, #0]
 80243ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80243f2:	687b      	ldr	r3, [r7, #4]
 80243f4:	69da      	ldr	r2, [r3, #28]
 80243f6:	687b      	ldr	r3, [r7, #4]
 80243f8:	6a1b      	ldr	r3, [r3, #32]
 80243fa:	431a      	orrs	r2, r3
 80243fc:	687b      	ldr	r3, [r7, #4]
 80243fe:	681b      	ldr	r3, [r3, #0]
 8024400:	430a      	orrs	r2, r1
 8024402:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8024404:	687b      	ldr	r3, [r7, #4]
 8024406:	681b      	ldr	r3, [r3, #0]
 8024408:	689b      	ldr	r3, [r3, #8]
 802440a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 802440e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8024412:	687a      	ldr	r2, [r7, #4]
 8024414:	6911      	ldr	r1, [r2, #16]
 8024416:	687a      	ldr	r2, [r7, #4]
 8024418:	68d2      	ldr	r2, [r2, #12]
 802441a:	4311      	orrs	r1, r2
 802441c:	687a      	ldr	r2, [r7, #4]
 802441e:	6812      	ldr	r2, [r2, #0]
 8024420:	430b      	orrs	r3, r1
 8024422:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8024424:	687b      	ldr	r3, [r7, #4]
 8024426:	681b      	ldr	r3, [r3, #0]
 8024428:	68db      	ldr	r3, [r3, #12]
 802442a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 802442e:	687b      	ldr	r3, [r7, #4]
 8024430:	695a      	ldr	r2, [r3, #20]
 8024432:	687b      	ldr	r3, [r7, #4]
 8024434:	699b      	ldr	r3, [r3, #24]
 8024436:	431a      	orrs	r2, r3
 8024438:	687b      	ldr	r3, [r7, #4]
 802443a:	681b      	ldr	r3, [r3, #0]
 802443c:	430a      	orrs	r2, r1
 802443e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8024440:	687b      	ldr	r3, [r7, #4]
 8024442:	681b      	ldr	r3, [r3, #0]
 8024444:	681a      	ldr	r2, [r3, #0]
 8024446:	687b      	ldr	r3, [r7, #4]
 8024448:	681b      	ldr	r3, [r3, #0]
 802444a:	f042 0201 	orr.w	r2, r2, #1
 802444e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8024450:	687b      	ldr	r3, [r7, #4]
 8024452:	2200      	movs	r2, #0
 8024454:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8024456:	687b      	ldr	r3, [r7, #4]
 8024458:	2220      	movs	r2, #32
 802445a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 802445e:	687b      	ldr	r3, [r7, #4]
 8024460:	2200      	movs	r2, #0
 8024462:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8024464:	687b      	ldr	r3, [r7, #4]
 8024466:	2200      	movs	r2, #0
 8024468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 802446c:	2300      	movs	r3, #0
}
 802446e:	4618      	mov	r0, r3
 8024470:	3710      	adds	r7, #16
 8024472:	46bd      	mov	sp, r7
 8024474:	bd80      	pop	{r7, pc}
 8024476:	bf00      	nop
 8024478:	000186a0 	.word	0x000186a0
 802447c:	001e847f 	.word	0x001e847f
 8024480:	003d08ff 	.word	0x003d08ff
 8024484:	431bde83 	.word	0x431bde83
 8024488:	10624dd3 	.word	0x10624dd3

0802448c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 802448c:	b580      	push	{r7, lr}
 802448e:	b086      	sub	sp, #24
 8024490:	af00      	add	r7, sp, #0
 8024492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8024494:	687b      	ldr	r3, [r7, #4]
 8024496:	2b00      	cmp	r3, #0
 8024498:	d101      	bne.n	802449e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 802449a:	2301      	movs	r3, #1
 802449c:	e25b      	b.n	8024956 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 802449e:	687b      	ldr	r3, [r7, #4]
 80244a0:	681b      	ldr	r3, [r3, #0]
 80244a2:	f003 0301 	and.w	r3, r3, #1
 80244a6:	2b00      	cmp	r3, #0
 80244a8:	d075      	beq.n	8024596 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80244aa:	4ba3      	ldr	r3, [pc, #652]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 80244ac:	689b      	ldr	r3, [r3, #8]
 80244ae:	f003 030c 	and.w	r3, r3, #12
 80244b2:	2b04      	cmp	r3, #4
 80244b4:	d00c      	beq.n	80244d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80244b6:	4ba0      	ldr	r3, [pc, #640]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 80244b8:	689b      	ldr	r3, [r3, #8]
 80244ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80244be:	2b08      	cmp	r3, #8
 80244c0:	d112      	bne.n	80244e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80244c2:	4b9d      	ldr	r3, [pc, #628]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 80244c4:	685b      	ldr	r3, [r3, #4]
 80244c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80244ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80244ce:	d10b      	bne.n	80244e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80244d0:	4b99      	ldr	r3, [pc, #612]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 80244d2:	681b      	ldr	r3, [r3, #0]
 80244d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80244d8:	2b00      	cmp	r3, #0
 80244da:	d05b      	beq.n	8024594 <HAL_RCC_OscConfig+0x108>
 80244dc:	687b      	ldr	r3, [r7, #4]
 80244de:	685b      	ldr	r3, [r3, #4]
 80244e0:	2b00      	cmp	r3, #0
 80244e2:	d157      	bne.n	8024594 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80244e4:	2301      	movs	r3, #1
 80244e6:	e236      	b.n	8024956 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80244e8:	687b      	ldr	r3, [r7, #4]
 80244ea:	685b      	ldr	r3, [r3, #4]
 80244ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80244f0:	d106      	bne.n	8024500 <HAL_RCC_OscConfig+0x74>
 80244f2:	4b91      	ldr	r3, [pc, #580]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 80244f4:	681b      	ldr	r3, [r3, #0]
 80244f6:	4a90      	ldr	r2, [pc, #576]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 80244f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80244fc:	6013      	str	r3, [r2, #0]
 80244fe:	e01d      	b.n	802453c <HAL_RCC_OscConfig+0xb0>
 8024500:	687b      	ldr	r3, [r7, #4]
 8024502:	685b      	ldr	r3, [r3, #4]
 8024504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8024508:	d10c      	bne.n	8024524 <HAL_RCC_OscConfig+0x98>
 802450a:	4b8b      	ldr	r3, [pc, #556]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 802450c:	681b      	ldr	r3, [r3, #0]
 802450e:	4a8a      	ldr	r2, [pc, #552]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 8024510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8024514:	6013      	str	r3, [r2, #0]
 8024516:	4b88      	ldr	r3, [pc, #544]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 8024518:	681b      	ldr	r3, [r3, #0]
 802451a:	4a87      	ldr	r2, [pc, #540]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 802451c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8024520:	6013      	str	r3, [r2, #0]
 8024522:	e00b      	b.n	802453c <HAL_RCC_OscConfig+0xb0>
 8024524:	4b84      	ldr	r3, [pc, #528]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 8024526:	681b      	ldr	r3, [r3, #0]
 8024528:	4a83      	ldr	r2, [pc, #524]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 802452a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 802452e:	6013      	str	r3, [r2, #0]
 8024530:	4b81      	ldr	r3, [pc, #516]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 8024532:	681b      	ldr	r3, [r3, #0]
 8024534:	4a80      	ldr	r2, [pc, #512]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 8024536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802453a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 802453c:	687b      	ldr	r3, [r7, #4]
 802453e:	685b      	ldr	r3, [r3, #4]
 8024540:	2b00      	cmp	r3, #0
 8024542:	d013      	beq.n	802456c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8024544:	f7fe fbfc 	bl	8022d40 <HAL_GetTick>
 8024548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802454a:	e008      	b.n	802455e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 802454c:	f7fe fbf8 	bl	8022d40 <HAL_GetTick>
 8024550:	4602      	mov	r2, r0
 8024552:	693b      	ldr	r3, [r7, #16]
 8024554:	1ad3      	subs	r3, r2, r3
 8024556:	2b64      	cmp	r3, #100	; 0x64
 8024558:	d901      	bls.n	802455e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 802455a:	2303      	movs	r3, #3
 802455c:	e1fb      	b.n	8024956 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 802455e:	4b76      	ldr	r3, [pc, #472]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 8024560:	681b      	ldr	r3, [r3, #0]
 8024562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8024566:	2b00      	cmp	r3, #0
 8024568:	d0f0      	beq.n	802454c <HAL_RCC_OscConfig+0xc0>
 802456a:	e014      	b.n	8024596 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802456c:	f7fe fbe8 	bl	8022d40 <HAL_GetTick>
 8024570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8024572:	e008      	b.n	8024586 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8024574:	f7fe fbe4 	bl	8022d40 <HAL_GetTick>
 8024578:	4602      	mov	r2, r0
 802457a:	693b      	ldr	r3, [r7, #16]
 802457c:	1ad3      	subs	r3, r2, r3
 802457e:	2b64      	cmp	r3, #100	; 0x64
 8024580:	d901      	bls.n	8024586 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8024582:	2303      	movs	r3, #3
 8024584:	e1e7      	b.n	8024956 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8024586:	4b6c      	ldr	r3, [pc, #432]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 8024588:	681b      	ldr	r3, [r3, #0]
 802458a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802458e:	2b00      	cmp	r3, #0
 8024590:	d1f0      	bne.n	8024574 <HAL_RCC_OscConfig+0xe8>
 8024592:	e000      	b.n	8024596 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8024594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8024596:	687b      	ldr	r3, [r7, #4]
 8024598:	681b      	ldr	r3, [r3, #0]
 802459a:	f003 0302 	and.w	r3, r3, #2
 802459e:	2b00      	cmp	r3, #0
 80245a0:	d063      	beq.n	802466a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80245a2:	4b65      	ldr	r3, [pc, #404]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 80245a4:	689b      	ldr	r3, [r3, #8]
 80245a6:	f003 030c 	and.w	r3, r3, #12
 80245aa:	2b00      	cmp	r3, #0
 80245ac:	d00b      	beq.n	80245c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80245ae:	4b62      	ldr	r3, [pc, #392]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 80245b0:	689b      	ldr	r3, [r3, #8]
 80245b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80245b6:	2b08      	cmp	r3, #8
 80245b8:	d11c      	bne.n	80245f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80245ba:	4b5f      	ldr	r3, [pc, #380]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 80245bc:	685b      	ldr	r3, [r3, #4]
 80245be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80245c2:	2b00      	cmp	r3, #0
 80245c4:	d116      	bne.n	80245f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80245c6:	4b5c      	ldr	r3, [pc, #368]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 80245c8:	681b      	ldr	r3, [r3, #0]
 80245ca:	f003 0302 	and.w	r3, r3, #2
 80245ce:	2b00      	cmp	r3, #0
 80245d0:	d005      	beq.n	80245de <HAL_RCC_OscConfig+0x152>
 80245d2:	687b      	ldr	r3, [r7, #4]
 80245d4:	68db      	ldr	r3, [r3, #12]
 80245d6:	2b01      	cmp	r3, #1
 80245d8:	d001      	beq.n	80245de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80245da:	2301      	movs	r3, #1
 80245dc:	e1bb      	b.n	8024956 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80245de:	4b56      	ldr	r3, [pc, #344]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 80245e0:	681b      	ldr	r3, [r3, #0]
 80245e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80245e6:	687b      	ldr	r3, [r7, #4]
 80245e8:	691b      	ldr	r3, [r3, #16]
 80245ea:	00db      	lsls	r3, r3, #3
 80245ec:	4952      	ldr	r1, [pc, #328]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 80245ee:	4313      	orrs	r3, r2
 80245f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80245f2:	e03a      	b.n	802466a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80245f4:	687b      	ldr	r3, [r7, #4]
 80245f6:	68db      	ldr	r3, [r3, #12]
 80245f8:	2b00      	cmp	r3, #0
 80245fa:	d020      	beq.n	802463e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80245fc:	4b4f      	ldr	r3, [pc, #316]	; (802473c <HAL_RCC_OscConfig+0x2b0>)
 80245fe:	2201      	movs	r2, #1
 8024600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8024602:	f7fe fb9d 	bl	8022d40 <HAL_GetTick>
 8024606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8024608:	e008      	b.n	802461c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802460a:	f7fe fb99 	bl	8022d40 <HAL_GetTick>
 802460e:	4602      	mov	r2, r0
 8024610:	693b      	ldr	r3, [r7, #16]
 8024612:	1ad3      	subs	r3, r2, r3
 8024614:	2b02      	cmp	r3, #2
 8024616:	d901      	bls.n	802461c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8024618:	2303      	movs	r3, #3
 802461a:	e19c      	b.n	8024956 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802461c:	4b46      	ldr	r3, [pc, #280]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 802461e:	681b      	ldr	r3, [r3, #0]
 8024620:	f003 0302 	and.w	r3, r3, #2
 8024624:	2b00      	cmp	r3, #0
 8024626:	d0f0      	beq.n	802460a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8024628:	4b43      	ldr	r3, [pc, #268]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 802462a:	681b      	ldr	r3, [r3, #0]
 802462c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8024630:	687b      	ldr	r3, [r7, #4]
 8024632:	691b      	ldr	r3, [r3, #16]
 8024634:	00db      	lsls	r3, r3, #3
 8024636:	4940      	ldr	r1, [pc, #256]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 8024638:	4313      	orrs	r3, r2
 802463a:	600b      	str	r3, [r1, #0]
 802463c:	e015      	b.n	802466a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802463e:	4b3f      	ldr	r3, [pc, #252]	; (802473c <HAL_RCC_OscConfig+0x2b0>)
 8024640:	2200      	movs	r2, #0
 8024642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8024644:	f7fe fb7c 	bl	8022d40 <HAL_GetTick>
 8024648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802464a:	e008      	b.n	802465e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 802464c:	f7fe fb78 	bl	8022d40 <HAL_GetTick>
 8024650:	4602      	mov	r2, r0
 8024652:	693b      	ldr	r3, [r7, #16]
 8024654:	1ad3      	subs	r3, r2, r3
 8024656:	2b02      	cmp	r3, #2
 8024658:	d901      	bls.n	802465e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 802465a:	2303      	movs	r3, #3
 802465c:	e17b      	b.n	8024956 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 802465e:	4b36      	ldr	r3, [pc, #216]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 8024660:	681b      	ldr	r3, [r3, #0]
 8024662:	f003 0302 	and.w	r3, r3, #2
 8024666:	2b00      	cmp	r3, #0
 8024668:	d1f0      	bne.n	802464c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 802466a:	687b      	ldr	r3, [r7, #4]
 802466c:	681b      	ldr	r3, [r3, #0]
 802466e:	f003 0308 	and.w	r3, r3, #8
 8024672:	2b00      	cmp	r3, #0
 8024674:	d030      	beq.n	80246d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8024676:	687b      	ldr	r3, [r7, #4]
 8024678:	695b      	ldr	r3, [r3, #20]
 802467a:	2b00      	cmp	r3, #0
 802467c:	d016      	beq.n	80246ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 802467e:	4b30      	ldr	r3, [pc, #192]	; (8024740 <HAL_RCC_OscConfig+0x2b4>)
 8024680:	2201      	movs	r2, #1
 8024682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8024684:	f7fe fb5c 	bl	8022d40 <HAL_GetTick>
 8024688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802468a:	e008      	b.n	802469e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 802468c:	f7fe fb58 	bl	8022d40 <HAL_GetTick>
 8024690:	4602      	mov	r2, r0
 8024692:	693b      	ldr	r3, [r7, #16]
 8024694:	1ad3      	subs	r3, r2, r3
 8024696:	2b02      	cmp	r3, #2
 8024698:	d901      	bls.n	802469e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 802469a:	2303      	movs	r3, #3
 802469c:	e15b      	b.n	8024956 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 802469e:	4b26      	ldr	r3, [pc, #152]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 80246a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80246a2:	f003 0302 	and.w	r3, r3, #2
 80246a6:	2b00      	cmp	r3, #0
 80246a8:	d0f0      	beq.n	802468c <HAL_RCC_OscConfig+0x200>
 80246aa:	e015      	b.n	80246d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80246ac:	4b24      	ldr	r3, [pc, #144]	; (8024740 <HAL_RCC_OscConfig+0x2b4>)
 80246ae:	2200      	movs	r2, #0
 80246b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80246b2:	f7fe fb45 	bl	8022d40 <HAL_GetTick>
 80246b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80246b8:	e008      	b.n	80246cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80246ba:	f7fe fb41 	bl	8022d40 <HAL_GetTick>
 80246be:	4602      	mov	r2, r0
 80246c0:	693b      	ldr	r3, [r7, #16]
 80246c2:	1ad3      	subs	r3, r2, r3
 80246c4:	2b02      	cmp	r3, #2
 80246c6:	d901      	bls.n	80246cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80246c8:	2303      	movs	r3, #3
 80246ca:	e144      	b.n	8024956 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80246cc:	4b1a      	ldr	r3, [pc, #104]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 80246ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80246d0:	f003 0302 	and.w	r3, r3, #2
 80246d4:	2b00      	cmp	r3, #0
 80246d6:	d1f0      	bne.n	80246ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80246d8:	687b      	ldr	r3, [r7, #4]
 80246da:	681b      	ldr	r3, [r3, #0]
 80246dc:	f003 0304 	and.w	r3, r3, #4
 80246e0:	2b00      	cmp	r3, #0
 80246e2:	f000 80a0 	beq.w	8024826 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80246e6:	2300      	movs	r3, #0
 80246e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80246ea:	4b13      	ldr	r3, [pc, #76]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 80246ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80246ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80246f2:	2b00      	cmp	r3, #0
 80246f4:	d10f      	bne.n	8024716 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80246f6:	2300      	movs	r3, #0
 80246f8:	60bb      	str	r3, [r7, #8]
 80246fa:	4b0f      	ldr	r3, [pc, #60]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 80246fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80246fe:	4a0e      	ldr	r2, [pc, #56]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 8024700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8024704:	6413      	str	r3, [r2, #64]	; 0x40
 8024706:	4b0c      	ldr	r3, [pc, #48]	; (8024738 <HAL_RCC_OscConfig+0x2ac>)
 8024708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802470a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802470e:	60bb      	str	r3, [r7, #8]
 8024710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8024712:	2301      	movs	r3, #1
 8024714:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8024716:	4b0b      	ldr	r3, [pc, #44]	; (8024744 <HAL_RCC_OscConfig+0x2b8>)
 8024718:	681b      	ldr	r3, [r3, #0]
 802471a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802471e:	2b00      	cmp	r3, #0
 8024720:	d121      	bne.n	8024766 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8024722:	4b08      	ldr	r3, [pc, #32]	; (8024744 <HAL_RCC_OscConfig+0x2b8>)
 8024724:	681b      	ldr	r3, [r3, #0]
 8024726:	4a07      	ldr	r2, [pc, #28]	; (8024744 <HAL_RCC_OscConfig+0x2b8>)
 8024728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 802472c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 802472e:	f7fe fb07 	bl	8022d40 <HAL_GetTick>
 8024732:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8024734:	e011      	b.n	802475a <HAL_RCC_OscConfig+0x2ce>
 8024736:	bf00      	nop
 8024738:	40023800 	.word	0x40023800
 802473c:	42470000 	.word	0x42470000
 8024740:	42470e80 	.word	0x42470e80
 8024744:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8024748:	f7fe fafa 	bl	8022d40 <HAL_GetTick>
 802474c:	4602      	mov	r2, r0
 802474e:	693b      	ldr	r3, [r7, #16]
 8024750:	1ad3      	subs	r3, r2, r3
 8024752:	2b02      	cmp	r3, #2
 8024754:	d901      	bls.n	802475a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8024756:	2303      	movs	r3, #3
 8024758:	e0fd      	b.n	8024956 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 802475a:	4b81      	ldr	r3, [pc, #516]	; (8024960 <HAL_RCC_OscConfig+0x4d4>)
 802475c:	681b      	ldr	r3, [r3, #0]
 802475e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8024762:	2b00      	cmp	r3, #0
 8024764:	d0f0      	beq.n	8024748 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8024766:	687b      	ldr	r3, [r7, #4]
 8024768:	689b      	ldr	r3, [r3, #8]
 802476a:	2b01      	cmp	r3, #1
 802476c:	d106      	bne.n	802477c <HAL_RCC_OscConfig+0x2f0>
 802476e:	4b7d      	ldr	r3, [pc, #500]	; (8024964 <HAL_RCC_OscConfig+0x4d8>)
 8024770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024772:	4a7c      	ldr	r2, [pc, #496]	; (8024964 <HAL_RCC_OscConfig+0x4d8>)
 8024774:	f043 0301 	orr.w	r3, r3, #1
 8024778:	6713      	str	r3, [r2, #112]	; 0x70
 802477a:	e01c      	b.n	80247b6 <HAL_RCC_OscConfig+0x32a>
 802477c:	687b      	ldr	r3, [r7, #4]
 802477e:	689b      	ldr	r3, [r3, #8]
 8024780:	2b05      	cmp	r3, #5
 8024782:	d10c      	bne.n	802479e <HAL_RCC_OscConfig+0x312>
 8024784:	4b77      	ldr	r3, [pc, #476]	; (8024964 <HAL_RCC_OscConfig+0x4d8>)
 8024786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024788:	4a76      	ldr	r2, [pc, #472]	; (8024964 <HAL_RCC_OscConfig+0x4d8>)
 802478a:	f043 0304 	orr.w	r3, r3, #4
 802478e:	6713      	str	r3, [r2, #112]	; 0x70
 8024790:	4b74      	ldr	r3, [pc, #464]	; (8024964 <HAL_RCC_OscConfig+0x4d8>)
 8024792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8024794:	4a73      	ldr	r2, [pc, #460]	; (8024964 <HAL_RCC_OscConfig+0x4d8>)
 8024796:	f043 0301 	orr.w	r3, r3, #1
 802479a:	6713      	str	r3, [r2, #112]	; 0x70
 802479c:	e00b      	b.n	80247b6 <HAL_RCC_OscConfig+0x32a>
 802479e:	4b71      	ldr	r3, [pc, #452]	; (8024964 <HAL_RCC_OscConfig+0x4d8>)
 80247a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80247a2:	4a70      	ldr	r2, [pc, #448]	; (8024964 <HAL_RCC_OscConfig+0x4d8>)
 80247a4:	f023 0301 	bic.w	r3, r3, #1
 80247a8:	6713      	str	r3, [r2, #112]	; 0x70
 80247aa:	4b6e      	ldr	r3, [pc, #440]	; (8024964 <HAL_RCC_OscConfig+0x4d8>)
 80247ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80247ae:	4a6d      	ldr	r2, [pc, #436]	; (8024964 <HAL_RCC_OscConfig+0x4d8>)
 80247b0:	f023 0304 	bic.w	r3, r3, #4
 80247b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80247b6:	687b      	ldr	r3, [r7, #4]
 80247b8:	689b      	ldr	r3, [r3, #8]
 80247ba:	2b00      	cmp	r3, #0
 80247bc:	d015      	beq.n	80247ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80247be:	f7fe fabf 	bl	8022d40 <HAL_GetTick>
 80247c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80247c4:	e00a      	b.n	80247dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80247c6:	f7fe fabb 	bl	8022d40 <HAL_GetTick>
 80247ca:	4602      	mov	r2, r0
 80247cc:	693b      	ldr	r3, [r7, #16]
 80247ce:	1ad3      	subs	r3, r2, r3
 80247d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80247d4:	4293      	cmp	r3, r2
 80247d6:	d901      	bls.n	80247dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80247d8:	2303      	movs	r3, #3
 80247da:	e0bc      	b.n	8024956 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80247dc:	4b61      	ldr	r3, [pc, #388]	; (8024964 <HAL_RCC_OscConfig+0x4d8>)
 80247de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80247e0:	f003 0302 	and.w	r3, r3, #2
 80247e4:	2b00      	cmp	r3, #0
 80247e6:	d0ee      	beq.n	80247c6 <HAL_RCC_OscConfig+0x33a>
 80247e8:	e014      	b.n	8024814 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80247ea:	f7fe faa9 	bl	8022d40 <HAL_GetTick>
 80247ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80247f0:	e00a      	b.n	8024808 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80247f2:	f7fe faa5 	bl	8022d40 <HAL_GetTick>
 80247f6:	4602      	mov	r2, r0
 80247f8:	693b      	ldr	r3, [r7, #16]
 80247fa:	1ad3      	subs	r3, r2, r3
 80247fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8024800:	4293      	cmp	r3, r2
 8024802:	d901      	bls.n	8024808 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8024804:	2303      	movs	r3, #3
 8024806:	e0a6      	b.n	8024956 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8024808:	4b56      	ldr	r3, [pc, #344]	; (8024964 <HAL_RCC_OscConfig+0x4d8>)
 802480a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 802480c:	f003 0302 	and.w	r3, r3, #2
 8024810:	2b00      	cmp	r3, #0
 8024812:	d1ee      	bne.n	80247f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8024814:	7dfb      	ldrb	r3, [r7, #23]
 8024816:	2b01      	cmp	r3, #1
 8024818:	d105      	bne.n	8024826 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 802481a:	4b52      	ldr	r3, [pc, #328]	; (8024964 <HAL_RCC_OscConfig+0x4d8>)
 802481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802481e:	4a51      	ldr	r2, [pc, #324]	; (8024964 <HAL_RCC_OscConfig+0x4d8>)
 8024820:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8024824:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8024826:	687b      	ldr	r3, [r7, #4]
 8024828:	699b      	ldr	r3, [r3, #24]
 802482a:	2b00      	cmp	r3, #0
 802482c:	f000 8092 	beq.w	8024954 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8024830:	4b4c      	ldr	r3, [pc, #304]	; (8024964 <HAL_RCC_OscConfig+0x4d8>)
 8024832:	689b      	ldr	r3, [r3, #8]
 8024834:	f003 030c 	and.w	r3, r3, #12
 8024838:	2b08      	cmp	r3, #8
 802483a:	d05c      	beq.n	80248f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 802483c:	687b      	ldr	r3, [r7, #4]
 802483e:	699b      	ldr	r3, [r3, #24]
 8024840:	2b02      	cmp	r3, #2
 8024842:	d141      	bne.n	80248c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8024844:	4b48      	ldr	r3, [pc, #288]	; (8024968 <HAL_RCC_OscConfig+0x4dc>)
 8024846:	2200      	movs	r2, #0
 8024848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 802484a:	f7fe fa79 	bl	8022d40 <HAL_GetTick>
 802484e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8024850:	e008      	b.n	8024864 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8024852:	f7fe fa75 	bl	8022d40 <HAL_GetTick>
 8024856:	4602      	mov	r2, r0
 8024858:	693b      	ldr	r3, [r7, #16]
 802485a:	1ad3      	subs	r3, r2, r3
 802485c:	2b02      	cmp	r3, #2
 802485e:	d901      	bls.n	8024864 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8024860:	2303      	movs	r3, #3
 8024862:	e078      	b.n	8024956 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8024864:	4b3f      	ldr	r3, [pc, #252]	; (8024964 <HAL_RCC_OscConfig+0x4d8>)
 8024866:	681b      	ldr	r3, [r3, #0]
 8024868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 802486c:	2b00      	cmp	r3, #0
 802486e:	d1f0      	bne.n	8024852 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8024870:	687b      	ldr	r3, [r7, #4]
 8024872:	69da      	ldr	r2, [r3, #28]
 8024874:	687b      	ldr	r3, [r7, #4]
 8024876:	6a1b      	ldr	r3, [r3, #32]
 8024878:	431a      	orrs	r2, r3
 802487a:	687b      	ldr	r3, [r7, #4]
 802487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802487e:	019b      	lsls	r3, r3, #6
 8024880:	431a      	orrs	r2, r3
 8024882:	687b      	ldr	r3, [r7, #4]
 8024884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024886:	085b      	lsrs	r3, r3, #1
 8024888:	3b01      	subs	r3, #1
 802488a:	041b      	lsls	r3, r3, #16
 802488c:	431a      	orrs	r2, r3
 802488e:	687b      	ldr	r3, [r7, #4]
 8024890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024892:	061b      	lsls	r3, r3, #24
 8024894:	4933      	ldr	r1, [pc, #204]	; (8024964 <HAL_RCC_OscConfig+0x4d8>)
 8024896:	4313      	orrs	r3, r2
 8024898:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 802489a:	4b33      	ldr	r3, [pc, #204]	; (8024968 <HAL_RCC_OscConfig+0x4dc>)
 802489c:	2201      	movs	r2, #1
 802489e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80248a0:	f7fe fa4e 	bl	8022d40 <HAL_GetTick>
 80248a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80248a6:	e008      	b.n	80248ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80248a8:	f7fe fa4a 	bl	8022d40 <HAL_GetTick>
 80248ac:	4602      	mov	r2, r0
 80248ae:	693b      	ldr	r3, [r7, #16]
 80248b0:	1ad3      	subs	r3, r2, r3
 80248b2:	2b02      	cmp	r3, #2
 80248b4:	d901      	bls.n	80248ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80248b6:	2303      	movs	r3, #3
 80248b8:	e04d      	b.n	8024956 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80248ba:	4b2a      	ldr	r3, [pc, #168]	; (8024964 <HAL_RCC_OscConfig+0x4d8>)
 80248bc:	681b      	ldr	r3, [r3, #0]
 80248be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80248c2:	2b00      	cmp	r3, #0
 80248c4:	d0f0      	beq.n	80248a8 <HAL_RCC_OscConfig+0x41c>
 80248c6:	e045      	b.n	8024954 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80248c8:	4b27      	ldr	r3, [pc, #156]	; (8024968 <HAL_RCC_OscConfig+0x4dc>)
 80248ca:	2200      	movs	r2, #0
 80248cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80248ce:	f7fe fa37 	bl	8022d40 <HAL_GetTick>
 80248d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80248d4:	e008      	b.n	80248e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80248d6:	f7fe fa33 	bl	8022d40 <HAL_GetTick>
 80248da:	4602      	mov	r2, r0
 80248dc:	693b      	ldr	r3, [r7, #16]
 80248de:	1ad3      	subs	r3, r2, r3
 80248e0:	2b02      	cmp	r3, #2
 80248e2:	d901      	bls.n	80248e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80248e4:	2303      	movs	r3, #3
 80248e6:	e036      	b.n	8024956 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80248e8:	4b1e      	ldr	r3, [pc, #120]	; (8024964 <HAL_RCC_OscConfig+0x4d8>)
 80248ea:	681b      	ldr	r3, [r3, #0]
 80248ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80248f0:	2b00      	cmp	r3, #0
 80248f2:	d1f0      	bne.n	80248d6 <HAL_RCC_OscConfig+0x44a>
 80248f4:	e02e      	b.n	8024954 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80248f6:	687b      	ldr	r3, [r7, #4]
 80248f8:	699b      	ldr	r3, [r3, #24]
 80248fa:	2b01      	cmp	r3, #1
 80248fc:	d101      	bne.n	8024902 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80248fe:	2301      	movs	r3, #1
 8024900:	e029      	b.n	8024956 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8024902:	4b18      	ldr	r3, [pc, #96]	; (8024964 <HAL_RCC_OscConfig+0x4d8>)
 8024904:	685b      	ldr	r3, [r3, #4]
 8024906:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8024908:	68fb      	ldr	r3, [r7, #12]
 802490a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 802490e:	687b      	ldr	r3, [r7, #4]
 8024910:	69db      	ldr	r3, [r3, #28]
 8024912:	429a      	cmp	r2, r3
 8024914:	d11c      	bne.n	8024950 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8024916:	68fb      	ldr	r3, [r7, #12]
 8024918:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 802491c:	687b      	ldr	r3, [r7, #4]
 802491e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8024920:	429a      	cmp	r2, r3
 8024922:	d115      	bne.n	8024950 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8024924:	68fa      	ldr	r2, [r7, #12]
 8024926:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 802492a:	4013      	ands	r3, r2
 802492c:	687a      	ldr	r2, [r7, #4]
 802492e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8024930:	4293      	cmp	r3, r2
 8024932:	d10d      	bne.n	8024950 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8024934:	68fb      	ldr	r3, [r7, #12]
 8024936:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 802493a:	687b      	ldr	r3, [r7, #4]
 802493c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 802493e:	429a      	cmp	r2, r3
 8024940:	d106      	bne.n	8024950 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8024942:	68fb      	ldr	r3, [r7, #12]
 8024944:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8024948:	687b      	ldr	r3, [r7, #4]
 802494a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 802494c:	429a      	cmp	r2, r3
 802494e:	d001      	beq.n	8024954 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8024950:	2301      	movs	r3, #1
 8024952:	e000      	b.n	8024956 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8024954:	2300      	movs	r3, #0
}
 8024956:	4618      	mov	r0, r3
 8024958:	3718      	adds	r7, #24
 802495a:	46bd      	mov	sp, r7
 802495c:	bd80      	pop	{r7, pc}
 802495e:	bf00      	nop
 8024960:	40007000 	.word	0x40007000
 8024964:	40023800 	.word	0x40023800
 8024968:	42470060 	.word	0x42470060

0802496c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 802496c:	b580      	push	{r7, lr}
 802496e:	b084      	sub	sp, #16
 8024970:	af00      	add	r7, sp, #0
 8024972:	6078      	str	r0, [r7, #4]
 8024974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8024976:	687b      	ldr	r3, [r7, #4]
 8024978:	2b00      	cmp	r3, #0
 802497a:	d101      	bne.n	8024980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 802497c:	2301      	movs	r3, #1
 802497e:	e0cc      	b.n	8024b1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8024980:	4b68      	ldr	r3, [pc, #416]	; (8024b24 <HAL_RCC_ClockConfig+0x1b8>)
 8024982:	681b      	ldr	r3, [r3, #0]
 8024984:	f003 030f 	and.w	r3, r3, #15
 8024988:	683a      	ldr	r2, [r7, #0]
 802498a:	429a      	cmp	r2, r3
 802498c:	d90c      	bls.n	80249a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802498e:	4b65      	ldr	r3, [pc, #404]	; (8024b24 <HAL_RCC_ClockConfig+0x1b8>)
 8024990:	683a      	ldr	r2, [r7, #0]
 8024992:	b2d2      	uxtb	r2, r2
 8024994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8024996:	4b63      	ldr	r3, [pc, #396]	; (8024b24 <HAL_RCC_ClockConfig+0x1b8>)
 8024998:	681b      	ldr	r3, [r3, #0]
 802499a:	f003 030f 	and.w	r3, r3, #15
 802499e:	683a      	ldr	r2, [r7, #0]
 80249a0:	429a      	cmp	r2, r3
 80249a2:	d001      	beq.n	80249a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80249a4:	2301      	movs	r3, #1
 80249a6:	e0b8      	b.n	8024b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80249a8:	687b      	ldr	r3, [r7, #4]
 80249aa:	681b      	ldr	r3, [r3, #0]
 80249ac:	f003 0302 	and.w	r3, r3, #2
 80249b0:	2b00      	cmp	r3, #0
 80249b2:	d020      	beq.n	80249f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80249b4:	687b      	ldr	r3, [r7, #4]
 80249b6:	681b      	ldr	r3, [r3, #0]
 80249b8:	f003 0304 	and.w	r3, r3, #4
 80249bc:	2b00      	cmp	r3, #0
 80249be:	d005      	beq.n	80249cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80249c0:	4b59      	ldr	r3, [pc, #356]	; (8024b28 <HAL_RCC_ClockConfig+0x1bc>)
 80249c2:	689b      	ldr	r3, [r3, #8]
 80249c4:	4a58      	ldr	r2, [pc, #352]	; (8024b28 <HAL_RCC_ClockConfig+0x1bc>)
 80249c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80249ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80249cc:	687b      	ldr	r3, [r7, #4]
 80249ce:	681b      	ldr	r3, [r3, #0]
 80249d0:	f003 0308 	and.w	r3, r3, #8
 80249d4:	2b00      	cmp	r3, #0
 80249d6:	d005      	beq.n	80249e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80249d8:	4b53      	ldr	r3, [pc, #332]	; (8024b28 <HAL_RCC_ClockConfig+0x1bc>)
 80249da:	689b      	ldr	r3, [r3, #8]
 80249dc:	4a52      	ldr	r2, [pc, #328]	; (8024b28 <HAL_RCC_ClockConfig+0x1bc>)
 80249de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80249e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80249e4:	4b50      	ldr	r3, [pc, #320]	; (8024b28 <HAL_RCC_ClockConfig+0x1bc>)
 80249e6:	689b      	ldr	r3, [r3, #8]
 80249e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80249ec:	687b      	ldr	r3, [r7, #4]
 80249ee:	689b      	ldr	r3, [r3, #8]
 80249f0:	494d      	ldr	r1, [pc, #308]	; (8024b28 <HAL_RCC_ClockConfig+0x1bc>)
 80249f2:	4313      	orrs	r3, r2
 80249f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80249f6:	687b      	ldr	r3, [r7, #4]
 80249f8:	681b      	ldr	r3, [r3, #0]
 80249fa:	f003 0301 	and.w	r3, r3, #1
 80249fe:	2b00      	cmp	r3, #0
 8024a00:	d044      	beq.n	8024a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8024a02:	687b      	ldr	r3, [r7, #4]
 8024a04:	685b      	ldr	r3, [r3, #4]
 8024a06:	2b01      	cmp	r3, #1
 8024a08:	d107      	bne.n	8024a1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8024a0a:	4b47      	ldr	r3, [pc, #284]	; (8024b28 <HAL_RCC_ClockConfig+0x1bc>)
 8024a0c:	681b      	ldr	r3, [r3, #0]
 8024a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8024a12:	2b00      	cmp	r3, #0
 8024a14:	d119      	bne.n	8024a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8024a16:	2301      	movs	r3, #1
 8024a18:	e07f      	b.n	8024b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8024a1a:	687b      	ldr	r3, [r7, #4]
 8024a1c:	685b      	ldr	r3, [r3, #4]
 8024a1e:	2b02      	cmp	r3, #2
 8024a20:	d003      	beq.n	8024a2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8024a22:	687b      	ldr	r3, [r7, #4]
 8024a24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8024a26:	2b03      	cmp	r3, #3
 8024a28:	d107      	bne.n	8024a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8024a2a:	4b3f      	ldr	r3, [pc, #252]	; (8024b28 <HAL_RCC_ClockConfig+0x1bc>)
 8024a2c:	681b      	ldr	r3, [r3, #0]
 8024a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8024a32:	2b00      	cmp	r3, #0
 8024a34:	d109      	bne.n	8024a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8024a36:	2301      	movs	r3, #1
 8024a38:	e06f      	b.n	8024b1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8024a3a:	4b3b      	ldr	r3, [pc, #236]	; (8024b28 <HAL_RCC_ClockConfig+0x1bc>)
 8024a3c:	681b      	ldr	r3, [r3, #0]
 8024a3e:	f003 0302 	and.w	r3, r3, #2
 8024a42:	2b00      	cmp	r3, #0
 8024a44:	d101      	bne.n	8024a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8024a46:	2301      	movs	r3, #1
 8024a48:	e067      	b.n	8024b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8024a4a:	4b37      	ldr	r3, [pc, #220]	; (8024b28 <HAL_RCC_ClockConfig+0x1bc>)
 8024a4c:	689b      	ldr	r3, [r3, #8]
 8024a4e:	f023 0203 	bic.w	r2, r3, #3
 8024a52:	687b      	ldr	r3, [r7, #4]
 8024a54:	685b      	ldr	r3, [r3, #4]
 8024a56:	4934      	ldr	r1, [pc, #208]	; (8024b28 <HAL_RCC_ClockConfig+0x1bc>)
 8024a58:	4313      	orrs	r3, r2
 8024a5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8024a5c:	f7fe f970 	bl	8022d40 <HAL_GetTick>
 8024a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8024a62:	e00a      	b.n	8024a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8024a64:	f7fe f96c 	bl	8022d40 <HAL_GetTick>
 8024a68:	4602      	mov	r2, r0
 8024a6a:	68fb      	ldr	r3, [r7, #12]
 8024a6c:	1ad3      	subs	r3, r2, r3
 8024a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8024a72:	4293      	cmp	r3, r2
 8024a74:	d901      	bls.n	8024a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8024a76:	2303      	movs	r3, #3
 8024a78:	e04f      	b.n	8024b1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8024a7a:	4b2b      	ldr	r3, [pc, #172]	; (8024b28 <HAL_RCC_ClockConfig+0x1bc>)
 8024a7c:	689b      	ldr	r3, [r3, #8]
 8024a7e:	f003 020c 	and.w	r2, r3, #12
 8024a82:	687b      	ldr	r3, [r7, #4]
 8024a84:	685b      	ldr	r3, [r3, #4]
 8024a86:	009b      	lsls	r3, r3, #2
 8024a88:	429a      	cmp	r2, r3
 8024a8a:	d1eb      	bne.n	8024a64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8024a8c:	4b25      	ldr	r3, [pc, #148]	; (8024b24 <HAL_RCC_ClockConfig+0x1b8>)
 8024a8e:	681b      	ldr	r3, [r3, #0]
 8024a90:	f003 030f 	and.w	r3, r3, #15
 8024a94:	683a      	ldr	r2, [r7, #0]
 8024a96:	429a      	cmp	r2, r3
 8024a98:	d20c      	bcs.n	8024ab4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8024a9a:	4b22      	ldr	r3, [pc, #136]	; (8024b24 <HAL_RCC_ClockConfig+0x1b8>)
 8024a9c:	683a      	ldr	r2, [r7, #0]
 8024a9e:	b2d2      	uxtb	r2, r2
 8024aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8024aa2:	4b20      	ldr	r3, [pc, #128]	; (8024b24 <HAL_RCC_ClockConfig+0x1b8>)
 8024aa4:	681b      	ldr	r3, [r3, #0]
 8024aa6:	f003 030f 	and.w	r3, r3, #15
 8024aaa:	683a      	ldr	r2, [r7, #0]
 8024aac:	429a      	cmp	r2, r3
 8024aae:	d001      	beq.n	8024ab4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8024ab0:	2301      	movs	r3, #1
 8024ab2:	e032      	b.n	8024b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8024ab4:	687b      	ldr	r3, [r7, #4]
 8024ab6:	681b      	ldr	r3, [r3, #0]
 8024ab8:	f003 0304 	and.w	r3, r3, #4
 8024abc:	2b00      	cmp	r3, #0
 8024abe:	d008      	beq.n	8024ad2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8024ac0:	4b19      	ldr	r3, [pc, #100]	; (8024b28 <HAL_RCC_ClockConfig+0x1bc>)
 8024ac2:	689b      	ldr	r3, [r3, #8]
 8024ac4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8024ac8:	687b      	ldr	r3, [r7, #4]
 8024aca:	68db      	ldr	r3, [r3, #12]
 8024acc:	4916      	ldr	r1, [pc, #88]	; (8024b28 <HAL_RCC_ClockConfig+0x1bc>)
 8024ace:	4313      	orrs	r3, r2
 8024ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8024ad2:	687b      	ldr	r3, [r7, #4]
 8024ad4:	681b      	ldr	r3, [r3, #0]
 8024ad6:	f003 0308 	and.w	r3, r3, #8
 8024ada:	2b00      	cmp	r3, #0
 8024adc:	d009      	beq.n	8024af2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8024ade:	4b12      	ldr	r3, [pc, #72]	; (8024b28 <HAL_RCC_ClockConfig+0x1bc>)
 8024ae0:	689b      	ldr	r3, [r3, #8]
 8024ae2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8024ae6:	687b      	ldr	r3, [r7, #4]
 8024ae8:	691b      	ldr	r3, [r3, #16]
 8024aea:	00db      	lsls	r3, r3, #3
 8024aec:	490e      	ldr	r1, [pc, #56]	; (8024b28 <HAL_RCC_ClockConfig+0x1bc>)
 8024aee:	4313      	orrs	r3, r2
 8024af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8024af2:	f000 f821 	bl	8024b38 <HAL_RCC_GetSysClockFreq>
 8024af6:	4601      	mov	r1, r0
 8024af8:	4b0b      	ldr	r3, [pc, #44]	; (8024b28 <HAL_RCC_ClockConfig+0x1bc>)
 8024afa:	689b      	ldr	r3, [r3, #8]
 8024afc:	091b      	lsrs	r3, r3, #4
 8024afe:	f003 030f 	and.w	r3, r3, #15
 8024b02:	4a0a      	ldr	r2, [pc, #40]	; (8024b2c <HAL_RCC_ClockConfig+0x1c0>)
 8024b04:	5cd3      	ldrb	r3, [r2, r3]
 8024b06:	fa21 f303 	lsr.w	r3, r1, r3
 8024b0a:	4a09      	ldr	r2, [pc, #36]	; (8024b30 <HAL_RCC_ClockConfig+0x1c4>)
 8024b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8024b0e:	4b09      	ldr	r3, [pc, #36]	; (8024b34 <HAL_RCC_ClockConfig+0x1c8>)
 8024b10:	681b      	ldr	r3, [r3, #0]
 8024b12:	4618      	mov	r0, r3
 8024b14:	f7fe f8d0 	bl	8022cb8 <HAL_InitTick>

  return HAL_OK;
 8024b18:	2300      	movs	r3, #0
}
 8024b1a:	4618      	mov	r0, r3
 8024b1c:	3710      	adds	r7, #16
 8024b1e:	46bd      	mov	sp, r7
 8024b20:	bd80      	pop	{r7, pc}
 8024b22:	bf00      	nop
 8024b24:	40023c00 	.word	0x40023c00
 8024b28:	40023800 	.word	0x40023800
 8024b2c:	080278b0 	.word	0x080278b0
 8024b30:	20000000 	.word	0x20000000
 8024b34:	20000004 	.word	0x20000004

08024b38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8024b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024b3a:	b085      	sub	sp, #20
 8024b3c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8024b3e:	2300      	movs	r3, #0
 8024b40:	607b      	str	r3, [r7, #4]
 8024b42:	2300      	movs	r3, #0
 8024b44:	60fb      	str	r3, [r7, #12]
 8024b46:	2300      	movs	r3, #0
 8024b48:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8024b4a:	2300      	movs	r3, #0
 8024b4c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8024b4e:	4b50      	ldr	r3, [pc, #320]	; (8024c90 <HAL_RCC_GetSysClockFreq+0x158>)
 8024b50:	689b      	ldr	r3, [r3, #8]
 8024b52:	f003 030c 	and.w	r3, r3, #12
 8024b56:	2b04      	cmp	r3, #4
 8024b58:	d007      	beq.n	8024b6a <HAL_RCC_GetSysClockFreq+0x32>
 8024b5a:	2b08      	cmp	r3, #8
 8024b5c:	d008      	beq.n	8024b70 <HAL_RCC_GetSysClockFreq+0x38>
 8024b5e:	2b00      	cmp	r3, #0
 8024b60:	f040 808d 	bne.w	8024c7e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8024b64:	4b4b      	ldr	r3, [pc, #300]	; (8024c94 <HAL_RCC_GetSysClockFreq+0x15c>)
 8024b66:	60bb      	str	r3, [r7, #8]
       break;
 8024b68:	e08c      	b.n	8024c84 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8024b6a:	4b4b      	ldr	r3, [pc, #300]	; (8024c98 <HAL_RCC_GetSysClockFreq+0x160>)
 8024b6c:	60bb      	str	r3, [r7, #8]
      break;
 8024b6e:	e089      	b.n	8024c84 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8024b70:	4b47      	ldr	r3, [pc, #284]	; (8024c90 <HAL_RCC_GetSysClockFreq+0x158>)
 8024b72:	685b      	ldr	r3, [r3, #4]
 8024b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8024b78:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8024b7a:	4b45      	ldr	r3, [pc, #276]	; (8024c90 <HAL_RCC_GetSysClockFreq+0x158>)
 8024b7c:	685b      	ldr	r3, [r3, #4]
 8024b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8024b82:	2b00      	cmp	r3, #0
 8024b84:	d023      	beq.n	8024bce <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8024b86:	4b42      	ldr	r3, [pc, #264]	; (8024c90 <HAL_RCC_GetSysClockFreq+0x158>)
 8024b88:	685b      	ldr	r3, [r3, #4]
 8024b8a:	099b      	lsrs	r3, r3, #6
 8024b8c:	f04f 0400 	mov.w	r4, #0
 8024b90:	f240 11ff 	movw	r1, #511	; 0x1ff
 8024b94:	f04f 0200 	mov.w	r2, #0
 8024b98:	ea03 0501 	and.w	r5, r3, r1
 8024b9c:	ea04 0602 	and.w	r6, r4, r2
 8024ba0:	4a3d      	ldr	r2, [pc, #244]	; (8024c98 <HAL_RCC_GetSysClockFreq+0x160>)
 8024ba2:	fb02 f106 	mul.w	r1, r2, r6
 8024ba6:	2200      	movs	r2, #0
 8024ba8:	fb02 f205 	mul.w	r2, r2, r5
 8024bac:	440a      	add	r2, r1
 8024bae:	493a      	ldr	r1, [pc, #232]	; (8024c98 <HAL_RCC_GetSysClockFreq+0x160>)
 8024bb0:	fba5 0101 	umull	r0, r1, r5, r1
 8024bb4:	1853      	adds	r3, r2, r1
 8024bb6:	4619      	mov	r1, r3
 8024bb8:	687b      	ldr	r3, [r7, #4]
 8024bba:	f04f 0400 	mov.w	r4, #0
 8024bbe:	461a      	mov	r2, r3
 8024bc0:	4623      	mov	r3, r4
 8024bc2:	f7fb ff29 	bl	8020a18 <__aeabi_uldivmod>
 8024bc6:	4603      	mov	r3, r0
 8024bc8:	460c      	mov	r4, r1
 8024bca:	60fb      	str	r3, [r7, #12]
 8024bcc:	e049      	b.n	8024c62 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8024bce:	4b30      	ldr	r3, [pc, #192]	; (8024c90 <HAL_RCC_GetSysClockFreq+0x158>)
 8024bd0:	685b      	ldr	r3, [r3, #4]
 8024bd2:	099b      	lsrs	r3, r3, #6
 8024bd4:	f04f 0400 	mov.w	r4, #0
 8024bd8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8024bdc:	f04f 0200 	mov.w	r2, #0
 8024be0:	ea03 0501 	and.w	r5, r3, r1
 8024be4:	ea04 0602 	and.w	r6, r4, r2
 8024be8:	4629      	mov	r1, r5
 8024bea:	4632      	mov	r2, r6
 8024bec:	f04f 0300 	mov.w	r3, #0
 8024bf0:	f04f 0400 	mov.w	r4, #0
 8024bf4:	0154      	lsls	r4, r2, #5
 8024bf6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8024bfa:	014b      	lsls	r3, r1, #5
 8024bfc:	4619      	mov	r1, r3
 8024bfe:	4622      	mov	r2, r4
 8024c00:	1b49      	subs	r1, r1, r5
 8024c02:	eb62 0206 	sbc.w	r2, r2, r6
 8024c06:	f04f 0300 	mov.w	r3, #0
 8024c0a:	f04f 0400 	mov.w	r4, #0
 8024c0e:	0194      	lsls	r4, r2, #6
 8024c10:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8024c14:	018b      	lsls	r3, r1, #6
 8024c16:	1a5b      	subs	r3, r3, r1
 8024c18:	eb64 0402 	sbc.w	r4, r4, r2
 8024c1c:	f04f 0100 	mov.w	r1, #0
 8024c20:	f04f 0200 	mov.w	r2, #0
 8024c24:	00e2      	lsls	r2, r4, #3
 8024c26:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8024c2a:	00d9      	lsls	r1, r3, #3
 8024c2c:	460b      	mov	r3, r1
 8024c2e:	4614      	mov	r4, r2
 8024c30:	195b      	adds	r3, r3, r5
 8024c32:	eb44 0406 	adc.w	r4, r4, r6
 8024c36:	f04f 0100 	mov.w	r1, #0
 8024c3a:	f04f 0200 	mov.w	r2, #0
 8024c3e:	02a2      	lsls	r2, r4, #10
 8024c40:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8024c44:	0299      	lsls	r1, r3, #10
 8024c46:	460b      	mov	r3, r1
 8024c48:	4614      	mov	r4, r2
 8024c4a:	4618      	mov	r0, r3
 8024c4c:	4621      	mov	r1, r4
 8024c4e:	687b      	ldr	r3, [r7, #4]
 8024c50:	f04f 0400 	mov.w	r4, #0
 8024c54:	461a      	mov	r2, r3
 8024c56:	4623      	mov	r3, r4
 8024c58:	f7fb fede 	bl	8020a18 <__aeabi_uldivmod>
 8024c5c:	4603      	mov	r3, r0
 8024c5e:	460c      	mov	r4, r1
 8024c60:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8024c62:	4b0b      	ldr	r3, [pc, #44]	; (8024c90 <HAL_RCC_GetSysClockFreq+0x158>)
 8024c64:	685b      	ldr	r3, [r3, #4]
 8024c66:	0c1b      	lsrs	r3, r3, #16
 8024c68:	f003 0303 	and.w	r3, r3, #3
 8024c6c:	3301      	adds	r3, #1
 8024c6e:	005b      	lsls	r3, r3, #1
 8024c70:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8024c72:	68fa      	ldr	r2, [r7, #12]
 8024c74:	683b      	ldr	r3, [r7, #0]
 8024c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8024c7a:	60bb      	str	r3, [r7, #8]
      break;
 8024c7c:	e002      	b.n	8024c84 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8024c7e:	4b05      	ldr	r3, [pc, #20]	; (8024c94 <HAL_RCC_GetSysClockFreq+0x15c>)
 8024c80:	60bb      	str	r3, [r7, #8]
      break;
 8024c82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8024c84:	68bb      	ldr	r3, [r7, #8]
}
 8024c86:	4618      	mov	r0, r3
 8024c88:	3714      	adds	r7, #20
 8024c8a:	46bd      	mov	sp, r7
 8024c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024c8e:	bf00      	nop
 8024c90:	40023800 	.word	0x40023800
 8024c94:	00f42400 	.word	0x00f42400
 8024c98:	00b71b00 	.word	0x00b71b00

08024c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8024c9c:	b480      	push	{r7}
 8024c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8024ca0:	4b03      	ldr	r3, [pc, #12]	; (8024cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8024ca2:	681b      	ldr	r3, [r3, #0]
}
 8024ca4:	4618      	mov	r0, r3
 8024ca6:	46bd      	mov	sp, r7
 8024ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024cac:	4770      	bx	lr
 8024cae:	bf00      	nop
 8024cb0:	20000000 	.word	0x20000000

08024cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8024cb4:	b580      	push	{r7, lr}
 8024cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8024cb8:	f7ff fff0 	bl	8024c9c <HAL_RCC_GetHCLKFreq>
 8024cbc:	4601      	mov	r1, r0
 8024cbe:	4b05      	ldr	r3, [pc, #20]	; (8024cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8024cc0:	689b      	ldr	r3, [r3, #8]
 8024cc2:	0a9b      	lsrs	r3, r3, #10
 8024cc4:	f003 0307 	and.w	r3, r3, #7
 8024cc8:	4a03      	ldr	r2, [pc, #12]	; (8024cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8024cca:	5cd3      	ldrb	r3, [r2, r3]
 8024ccc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8024cd0:	4618      	mov	r0, r3
 8024cd2:	bd80      	pop	{r7, pc}
 8024cd4:	40023800 	.word	0x40023800
 8024cd8:	080278c0 	.word	0x080278c0

08024cdc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8024cdc:	b580      	push	{r7, lr}
 8024cde:	b082      	sub	sp, #8
 8024ce0:	af00      	add	r7, sp, #0
 8024ce2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8024ce4:	687b      	ldr	r3, [r7, #4]
 8024ce6:	2b00      	cmp	r3, #0
 8024ce8:	d101      	bne.n	8024cee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8024cea:	2301      	movs	r3, #1
 8024cec:	e056      	b.n	8024d9c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8024cee:	687b      	ldr	r3, [r7, #4]
 8024cf0:	2200      	movs	r2, #0
 8024cf2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8024cf4:	687b      	ldr	r3, [r7, #4]
 8024cf6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8024cfa:	b2db      	uxtb	r3, r3
 8024cfc:	2b00      	cmp	r3, #0
 8024cfe:	d106      	bne.n	8024d0e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8024d00:	687b      	ldr	r3, [r7, #4]
 8024d02:	2200      	movs	r2, #0
 8024d04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8024d08:	6878      	ldr	r0, [r7, #4]
 8024d0a:	f7fd facb 	bl	80222a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8024d0e:	687b      	ldr	r3, [r7, #4]
 8024d10:	2202      	movs	r2, #2
 8024d12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8024d16:	687b      	ldr	r3, [r7, #4]
 8024d18:	681b      	ldr	r3, [r3, #0]
 8024d1a:	681a      	ldr	r2, [r3, #0]
 8024d1c:	687b      	ldr	r3, [r7, #4]
 8024d1e:	681b      	ldr	r3, [r3, #0]
 8024d20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8024d24:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8024d26:	687b      	ldr	r3, [r7, #4]
 8024d28:	685a      	ldr	r2, [r3, #4]
 8024d2a:	687b      	ldr	r3, [r7, #4]
 8024d2c:	689b      	ldr	r3, [r3, #8]
 8024d2e:	431a      	orrs	r2, r3
 8024d30:	687b      	ldr	r3, [r7, #4]
 8024d32:	68db      	ldr	r3, [r3, #12]
 8024d34:	431a      	orrs	r2, r3
 8024d36:	687b      	ldr	r3, [r7, #4]
 8024d38:	691b      	ldr	r3, [r3, #16]
 8024d3a:	431a      	orrs	r2, r3
 8024d3c:	687b      	ldr	r3, [r7, #4]
 8024d3e:	695b      	ldr	r3, [r3, #20]
 8024d40:	431a      	orrs	r2, r3
 8024d42:	687b      	ldr	r3, [r7, #4]
 8024d44:	699b      	ldr	r3, [r3, #24]
 8024d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8024d4a:	431a      	orrs	r2, r3
 8024d4c:	687b      	ldr	r3, [r7, #4]
 8024d4e:	69db      	ldr	r3, [r3, #28]
 8024d50:	431a      	orrs	r2, r3
 8024d52:	687b      	ldr	r3, [r7, #4]
 8024d54:	6a1b      	ldr	r3, [r3, #32]
 8024d56:	ea42 0103 	orr.w	r1, r2, r3
 8024d5a:	687b      	ldr	r3, [r7, #4]
 8024d5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8024d5e:	687b      	ldr	r3, [r7, #4]
 8024d60:	681b      	ldr	r3, [r3, #0]
 8024d62:	430a      	orrs	r2, r1
 8024d64:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8024d66:	687b      	ldr	r3, [r7, #4]
 8024d68:	699b      	ldr	r3, [r3, #24]
 8024d6a:	0c1b      	lsrs	r3, r3, #16
 8024d6c:	f003 0104 	and.w	r1, r3, #4
 8024d70:	687b      	ldr	r3, [r7, #4]
 8024d72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024d74:	687b      	ldr	r3, [r7, #4]
 8024d76:	681b      	ldr	r3, [r3, #0]
 8024d78:	430a      	orrs	r2, r1
 8024d7a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8024d7c:	687b      	ldr	r3, [r7, #4]
 8024d7e:	681b      	ldr	r3, [r3, #0]
 8024d80:	69da      	ldr	r2, [r3, #28]
 8024d82:	687b      	ldr	r3, [r7, #4]
 8024d84:	681b      	ldr	r3, [r3, #0]
 8024d86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8024d8a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8024d8c:	687b      	ldr	r3, [r7, #4]
 8024d8e:	2200      	movs	r2, #0
 8024d90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8024d92:	687b      	ldr	r3, [r7, #4]
 8024d94:	2201      	movs	r2, #1
 8024d96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8024d9a:	2300      	movs	r3, #0
}
 8024d9c:	4618      	mov	r0, r3
 8024d9e:	3708      	adds	r7, #8
 8024da0:	46bd      	mov	sp, r7
 8024da2:	bd80      	pop	{r7, pc}

08024da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8024da4:	b580      	push	{r7, lr}
 8024da6:	b082      	sub	sp, #8
 8024da8:	af00      	add	r7, sp, #0
 8024daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8024dac:	687b      	ldr	r3, [r7, #4]
 8024dae:	2b00      	cmp	r3, #0
 8024db0:	d101      	bne.n	8024db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8024db2:	2301      	movs	r3, #1
 8024db4:	e01d      	b.n	8024df2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8024db6:	687b      	ldr	r3, [r7, #4]
 8024db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8024dbc:	b2db      	uxtb	r3, r3
 8024dbe:	2b00      	cmp	r3, #0
 8024dc0:	d106      	bne.n	8024dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8024dc2:	687b      	ldr	r3, [r7, #4]
 8024dc4:	2200      	movs	r2, #0
 8024dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8024dca:	6878      	ldr	r0, [r7, #4]
 8024dcc:	f7fd fb00 	bl	80223d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8024dd0:	687b      	ldr	r3, [r7, #4]
 8024dd2:	2202      	movs	r2, #2
 8024dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8024dd8:	687b      	ldr	r3, [r7, #4]
 8024dda:	681a      	ldr	r2, [r3, #0]
 8024ddc:	687b      	ldr	r3, [r7, #4]
 8024dde:	3304      	adds	r3, #4
 8024de0:	4619      	mov	r1, r3
 8024de2:	4610      	mov	r0, r2
 8024de4:	f000 fc0e 	bl	8025604 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8024de8:	687b      	ldr	r3, [r7, #4]
 8024dea:	2201      	movs	r2, #1
 8024dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8024df0:	2300      	movs	r3, #0
}
 8024df2:	4618      	mov	r0, r3
 8024df4:	3708      	adds	r7, #8
 8024df6:	46bd      	mov	sp, r7
 8024df8:	bd80      	pop	{r7, pc}

08024dfa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8024dfa:	b480      	push	{r7}
 8024dfc:	b085      	sub	sp, #20
 8024dfe:	af00      	add	r7, sp, #0
 8024e00:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8024e02:	687b      	ldr	r3, [r7, #4]
 8024e04:	681b      	ldr	r3, [r3, #0]
 8024e06:	68da      	ldr	r2, [r3, #12]
 8024e08:	687b      	ldr	r3, [r7, #4]
 8024e0a:	681b      	ldr	r3, [r3, #0]
 8024e0c:	f042 0201 	orr.w	r2, r2, #1
 8024e10:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8024e12:	687b      	ldr	r3, [r7, #4]
 8024e14:	681b      	ldr	r3, [r3, #0]
 8024e16:	689b      	ldr	r3, [r3, #8]
 8024e18:	f003 0307 	and.w	r3, r3, #7
 8024e1c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8024e1e:	68fb      	ldr	r3, [r7, #12]
 8024e20:	2b06      	cmp	r3, #6
 8024e22:	d007      	beq.n	8024e34 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8024e24:	687b      	ldr	r3, [r7, #4]
 8024e26:	681b      	ldr	r3, [r3, #0]
 8024e28:	681a      	ldr	r2, [r3, #0]
 8024e2a:	687b      	ldr	r3, [r7, #4]
 8024e2c:	681b      	ldr	r3, [r3, #0]
 8024e2e:	f042 0201 	orr.w	r2, r2, #1
 8024e32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8024e34:	2300      	movs	r3, #0
}
 8024e36:	4618      	mov	r0, r3
 8024e38:	3714      	adds	r7, #20
 8024e3a:	46bd      	mov	sp, r7
 8024e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024e40:	4770      	bx	lr

08024e42 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8024e42:	b580      	push	{r7, lr}
 8024e44:	b082      	sub	sp, #8
 8024e46:	af00      	add	r7, sp, #0
 8024e48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8024e4a:	687b      	ldr	r3, [r7, #4]
 8024e4c:	2b00      	cmp	r3, #0
 8024e4e:	d101      	bne.n	8024e54 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8024e50:	2301      	movs	r3, #1
 8024e52:	e01d      	b.n	8024e90 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8024e54:	687b      	ldr	r3, [r7, #4]
 8024e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8024e5a:	b2db      	uxtb	r3, r3
 8024e5c:	2b00      	cmp	r3, #0
 8024e5e:	d106      	bne.n	8024e6e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8024e60:	687b      	ldr	r3, [r7, #4]
 8024e62:	2200      	movs	r2, #0
 8024e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8024e68:	6878      	ldr	r0, [r7, #4]
 8024e6a:	f7fd fa63 	bl	8022334 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8024e6e:	687b      	ldr	r3, [r7, #4]
 8024e70:	2202      	movs	r2, #2
 8024e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8024e76:	687b      	ldr	r3, [r7, #4]
 8024e78:	681a      	ldr	r2, [r3, #0]
 8024e7a:	687b      	ldr	r3, [r7, #4]
 8024e7c:	3304      	adds	r3, #4
 8024e7e:	4619      	mov	r1, r3
 8024e80:	4610      	mov	r0, r2
 8024e82:	f000 fbbf 	bl	8025604 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8024e86:	687b      	ldr	r3, [r7, #4]
 8024e88:	2201      	movs	r2, #1
 8024e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8024e8e:	2300      	movs	r3, #0
}
 8024e90:	4618      	mov	r0, r3
 8024e92:	3708      	adds	r7, #8
 8024e94:	46bd      	mov	sp, r7
 8024e96:	bd80      	pop	{r7, pc}

08024e98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8024e98:	b580      	push	{r7, lr}
 8024e9a:	b084      	sub	sp, #16
 8024e9c:	af00      	add	r7, sp, #0
 8024e9e:	6078      	str	r0, [r7, #4]
 8024ea0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8024ea2:	687b      	ldr	r3, [r7, #4]
 8024ea4:	681b      	ldr	r3, [r3, #0]
 8024ea6:	2201      	movs	r2, #1
 8024ea8:	6839      	ldr	r1, [r7, #0]
 8024eaa:	4618      	mov	r0, r3
 8024eac:	f000 fe94 	bl	8025bd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8024eb0:	687b      	ldr	r3, [r7, #4]
 8024eb2:	681b      	ldr	r3, [r3, #0]
 8024eb4:	4a15      	ldr	r2, [pc, #84]	; (8024f0c <HAL_TIM_PWM_Start+0x74>)
 8024eb6:	4293      	cmp	r3, r2
 8024eb8:	d004      	beq.n	8024ec4 <HAL_TIM_PWM_Start+0x2c>
 8024eba:	687b      	ldr	r3, [r7, #4]
 8024ebc:	681b      	ldr	r3, [r3, #0]
 8024ebe:	4a14      	ldr	r2, [pc, #80]	; (8024f10 <HAL_TIM_PWM_Start+0x78>)
 8024ec0:	4293      	cmp	r3, r2
 8024ec2:	d101      	bne.n	8024ec8 <HAL_TIM_PWM_Start+0x30>
 8024ec4:	2301      	movs	r3, #1
 8024ec6:	e000      	b.n	8024eca <HAL_TIM_PWM_Start+0x32>
 8024ec8:	2300      	movs	r3, #0
 8024eca:	2b00      	cmp	r3, #0
 8024ecc:	d007      	beq.n	8024ede <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8024ece:	687b      	ldr	r3, [r7, #4]
 8024ed0:	681b      	ldr	r3, [r3, #0]
 8024ed2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8024ed4:	687b      	ldr	r3, [r7, #4]
 8024ed6:	681b      	ldr	r3, [r3, #0]
 8024ed8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8024edc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8024ede:	687b      	ldr	r3, [r7, #4]
 8024ee0:	681b      	ldr	r3, [r3, #0]
 8024ee2:	689b      	ldr	r3, [r3, #8]
 8024ee4:	f003 0307 	and.w	r3, r3, #7
 8024ee8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8024eea:	68fb      	ldr	r3, [r7, #12]
 8024eec:	2b06      	cmp	r3, #6
 8024eee:	d007      	beq.n	8024f00 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8024ef0:	687b      	ldr	r3, [r7, #4]
 8024ef2:	681b      	ldr	r3, [r3, #0]
 8024ef4:	681a      	ldr	r2, [r3, #0]
 8024ef6:	687b      	ldr	r3, [r7, #4]
 8024ef8:	681b      	ldr	r3, [r3, #0]
 8024efa:	f042 0201 	orr.w	r2, r2, #1
 8024efe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8024f00:	2300      	movs	r3, #0
}
 8024f02:	4618      	mov	r0, r3
 8024f04:	3710      	adds	r7, #16
 8024f06:	46bd      	mov	sp, r7
 8024f08:	bd80      	pop	{r7, pc}
 8024f0a:	bf00      	nop
 8024f0c:	40010000 	.word	0x40010000
 8024f10:	40010400 	.word	0x40010400

08024f14 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8024f14:	b580      	push	{r7, lr}
 8024f16:	b086      	sub	sp, #24
 8024f18:	af00      	add	r7, sp, #0
 8024f1a:	6078      	str	r0, [r7, #4]
 8024f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8024f1e:	687b      	ldr	r3, [r7, #4]
 8024f20:	2b00      	cmp	r3, #0
 8024f22:	d101      	bne.n	8024f28 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8024f24:	2301      	movs	r3, #1
 8024f26:	e083      	b.n	8025030 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8024f28:	687b      	ldr	r3, [r7, #4]
 8024f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8024f2e:	b2db      	uxtb	r3, r3
 8024f30:	2b00      	cmp	r3, #0
 8024f32:	d106      	bne.n	8024f42 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8024f34:	687b      	ldr	r3, [r7, #4]
 8024f36:	2200      	movs	r2, #0
 8024f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8024f3c:	6878      	ldr	r0, [r7, #4]
 8024f3e:	f7fd fadd 	bl	80224fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8024f42:	687b      	ldr	r3, [r7, #4]
 8024f44:	2202      	movs	r2, #2
 8024f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8024f4a:	687b      	ldr	r3, [r7, #4]
 8024f4c:	681b      	ldr	r3, [r3, #0]
 8024f4e:	689b      	ldr	r3, [r3, #8]
 8024f50:	687a      	ldr	r2, [r7, #4]
 8024f52:	6812      	ldr	r2, [r2, #0]
 8024f54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8024f58:	f023 0307 	bic.w	r3, r3, #7
 8024f5c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8024f5e:	687b      	ldr	r3, [r7, #4]
 8024f60:	681a      	ldr	r2, [r3, #0]
 8024f62:	687b      	ldr	r3, [r7, #4]
 8024f64:	3304      	adds	r3, #4
 8024f66:	4619      	mov	r1, r3
 8024f68:	4610      	mov	r0, r2
 8024f6a:	f000 fb4b 	bl	8025604 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8024f6e:	687b      	ldr	r3, [r7, #4]
 8024f70:	681b      	ldr	r3, [r3, #0]
 8024f72:	689b      	ldr	r3, [r3, #8]
 8024f74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8024f76:	687b      	ldr	r3, [r7, #4]
 8024f78:	681b      	ldr	r3, [r3, #0]
 8024f7a:	699b      	ldr	r3, [r3, #24]
 8024f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8024f7e:	687b      	ldr	r3, [r7, #4]
 8024f80:	681b      	ldr	r3, [r3, #0]
 8024f82:	6a1b      	ldr	r3, [r3, #32]
 8024f84:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8024f86:	683b      	ldr	r3, [r7, #0]
 8024f88:	681b      	ldr	r3, [r3, #0]
 8024f8a:	697a      	ldr	r2, [r7, #20]
 8024f8c:	4313      	orrs	r3, r2
 8024f8e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8024f90:	693b      	ldr	r3, [r7, #16]
 8024f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8024f96:	f023 0303 	bic.w	r3, r3, #3
 8024f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8024f9c:	683b      	ldr	r3, [r7, #0]
 8024f9e:	689a      	ldr	r2, [r3, #8]
 8024fa0:	683b      	ldr	r3, [r7, #0]
 8024fa2:	699b      	ldr	r3, [r3, #24]
 8024fa4:	021b      	lsls	r3, r3, #8
 8024fa6:	4313      	orrs	r3, r2
 8024fa8:	693a      	ldr	r2, [r7, #16]
 8024faa:	4313      	orrs	r3, r2
 8024fac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8024fae:	693b      	ldr	r3, [r7, #16]
 8024fb0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8024fb4:	f023 030c 	bic.w	r3, r3, #12
 8024fb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8024fba:	693b      	ldr	r3, [r7, #16]
 8024fbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8024fc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8024fc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8024fc6:	683b      	ldr	r3, [r7, #0]
 8024fc8:	68da      	ldr	r2, [r3, #12]
 8024fca:	683b      	ldr	r3, [r7, #0]
 8024fcc:	69db      	ldr	r3, [r3, #28]
 8024fce:	021b      	lsls	r3, r3, #8
 8024fd0:	4313      	orrs	r3, r2
 8024fd2:	693a      	ldr	r2, [r7, #16]
 8024fd4:	4313      	orrs	r3, r2
 8024fd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8024fd8:	683b      	ldr	r3, [r7, #0]
 8024fda:	691b      	ldr	r3, [r3, #16]
 8024fdc:	011a      	lsls	r2, r3, #4
 8024fde:	683b      	ldr	r3, [r7, #0]
 8024fe0:	6a1b      	ldr	r3, [r3, #32]
 8024fe2:	031b      	lsls	r3, r3, #12
 8024fe4:	4313      	orrs	r3, r2
 8024fe6:	693a      	ldr	r2, [r7, #16]
 8024fe8:	4313      	orrs	r3, r2
 8024fea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8024fec:	68fb      	ldr	r3, [r7, #12]
 8024fee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8024ff2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8024ff4:	68fb      	ldr	r3, [r7, #12]
 8024ff6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8024ffa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8024ffc:	683b      	ldr	r3, [r7, #0]
 8024ffe:	685a      	ldr	r2, [r3, #4]
 8025000:	683b      	ldr	r3, [r7, #0]
 8025002:	695b      	ldr	r3, [r3, #20]
 8025004:	011b      	lsls	r3, r3, #4
 8025006:	4313      	orrs	r3, r2
 8025008:	68fa      	ldr	r2, [r7, #12]
 802500a:	4313      	orrs	r3, r2
 802500c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 802500e:	687b      	ldr	r3, [r7, #4]
 8025010:	681b      	ldr	r3, [r3, #0]
 8025012:	697a      	ldr	r2, [r7, #20]
 8025014:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8025016:	687b      	ldr	r3, [r7, #4]
 8025018:	681b      	ldr	r3, [r3, #0]
 802501a:	693a      	ldr	r2, [r7, #16]
 802501c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 802501e:	687b      	ldr	r3, [r7, #4]
 8025020:	681b      	ldr	r3, [r3, #0]
 8025022:	68fa      	ldr	r2, [r7, #12]
 8025024:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8025026:	687b      	ldr	r3, [r7, #4]
 8025028:	2201      	movs	r2, #1
 802502a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 802502e:	2300      	movs	r3, #0
}
 8025030:	4618      	mov	r0, r3
 8025032:	3718      	adds	r7, #24
 8025034:	46bd      	mov	sp, r7
 8025036:	bd80      	pop	{r7, pc}

08025038 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8025038:	b580      	push	{r7, lr}
 802503a:	b082      	sub	sp, #8
 802503c:	af00      	add	r7, sp, #0
 802503e:	6078      	str	r0, [r7, #4]
 8025040:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8025042:	683b      	ldr	r3, [r7, #0]
 8025044:	2b00      	cmp	r3, #0
 8025046:	d002      	beq.n	802504e <HAL_TIM_Encoder_Start+0x16>
 8025048:	2b04      	cmp	r3, #4
 802504a:	d008      	beq.n	802505e <HAL_TIM_Encoder_Start+0x26>
 802504c:	e00f      	b.n	802506e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 802504e:	687b      	ldr	r3, [r7, #4]
 8025050:	681b      	ldr	r3, [r3, #0]
 8025052:	2201      	movs	r2, #1
 8025054:	2100      	movs	r1, #0
 8025056:	4618      	mov	r0, r3
 8025058:	f000 fdbe 	bl	8025bd8 <TIM_CCxChannelCmd>
      break;
 802505c:	e016      	b.n	802508c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 802505e:	687b      	ldr	r3, [r7, #4]
 8025060:	681b      	ldr	r3, [r3, #0]
 8025062:	2201      	movs	r2, #1
 8025064:	2104      	movs	r1, #4
 8025066:	4618      	mov	r0, r3
 8025068:	f000 fdb6 	bl	8025bd8 <TIM_CCxChannelCmd>
      break;
 802506c:	e00e      	b.n	802508c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 802506e:	687b      	ldr	r3, [r7, #4]
 8025070:	681b      	ldr	r3, [r3, #0]
 8025072:	2201      	movs	r2, #1
 8025074:	2100      	movs	r1, #0
 8025076:	4618      	mov	r0, r3
 8025078:	f000 fdae 	bl	8025bd8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 802507c:	687b      	ldr	r3, [r7, #4]
 802507e:	681b      	ldr	r3, [r3, #0]
 8025080:	2201      	movs	r2, #1
 8025082:	2104      	movs	r1, #4
 8025084:	4618      	mov	r0, r3
 8025086:	f000 fda7 	bl	8025bd8 <TIM_CCxChannelCmd>
      break;
 802508a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 802508c:	687b      	ldr	r3, [r7, #4]
 802508e:	681b      	ldr	r3, [r3, #0]
 8025090:	681a      	ldr	r2, [r3, #0]
 8025092:	687b      	ldr	r3, [r7, #4]
 8025094:	681b      	ldr	r3, [r3, #0]
 8025096:	f042 0201 	orr.w	r2, r2, #1
 802509a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 802509c:	2300      	movs	r3, #0
}
 802509e:	4618      	mov	r0, r3
 80250a0:	3708      	adds	r7, #8
 80250a2:	46bd      	mov	sp, r7
 80250a4:	bd80      	pop	{r7, pc}

080250a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80250a6:	b580      	push	{r7, lr}
 80250a8:	b082      	sub	sp, #8
 80250aa:	af00      	add	r7, sp, #0
 80250ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80250ae:	687b      	ldr	r3, [r7, #4]
 80250b0:	681b      	ldr	r3, [r3, #0]
 80250b2:	691b      	ldr	r3, [r3, #16]
 80250b4:	f003 0302 	and.w	r3, r3, #2
 80250b8:	2b02      	cmp	r3, #2
 80250ba:	d122      	bne.n	8025102 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80250bc:	687b      	ldr	r3, [r7, #4]
 80250be:	681b      	ldr	r3, [r3, #0]
 80250c0:	68db      	ldr	r3, [r3, #12]
 80250c2:	f003 0302 	and.w	r3, r3, #2
 80250c6:	2b02      	cmp	r3, #2
 80250c8:	d11b      	bne.n	8025102 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80250ca:	687b      	ldr	r3, [r7, #4]
 80250cc:	681b      	ldr	r3, [r3, #0]
 80250ce:	f06f 0202 	mvn.w	r2, #2
 80250d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80250d4:	687b      	ldr	r3, [r7, #4]
 80250d6:	2201      	movs	r2, #1
 80250d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80250da:	687b      	ldr	r3, [r7, #4]
 80250dc:	681b      	ldr	r3, [r3, #0]
 80250de:	699b      	ldr	r3, [r3, #24]
 80250e0:	f003 0303 	and.w	r3, r3, #3
 80250e4:	2b00      	cmp	r3, #0
 80250e6:	d003      	beq.n	80250f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80250e8:	6878      	ldr	r0, [r7, #4]
 80250ea:	f000 fa6c 	bl	80255c6 <HAL_TIM_IC_CaptureCallback>
 80250ee:	e005      	b.n	80250fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80250f0:	6878      	ldr	r0, [r7, #4]
 80250f2:	f000 fa5e 	bl	80255b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80250f6:	6878      	ldr	r0, [r7, #4]
 80250f8:	f000 fa6f 	bl	80255da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80250fc:	687b      	ldr	r3, [r7, #4]
 80250fe:	2200      	movs	r2, #0
 8025100:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8025102:	687b      	ldr	r3, [r7, #4]
 8025104:	681b      	ldr	r3, [r3, #0]
 8025106:	691b      	ldr	r3, [r3, #16]
 8025108:	f003 0304 	and.w	r3, r3, #4
 802510c:	2b04      	cmp	r3, #4
 802510e:	d122      	bne.n	8025156 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8025110:	687b      	ldr	r3, [r7, #4]
 8025112:	681b      	ldr	r3, [r3, #0]
 8025114:	68db      	ldr	r3, [r3, #12]
 8025116:	f003 0304 	and.w	r3, r3, #4
 802511a:	2b04      	cmp	r3, #4
 802511c:	d11b      	bne.n	8025156 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 802511e:	687b      	ldr	r3, [r7, #4]
 8025120:	681b      	ldr	r3, [r3, #0]
 8025122:	f06f 0204 	mvn.w	r2, #4
 8025126:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8025128:	687b      	ldr	r3, [r7, #4]
 802512a:	2202      	movs	r2, #2
 802512c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 802512e:	687b      	ldr	r3, [r7, #4]
 8025130:	681b      	ldr	r3, [r3, #0]
 8025132:	699b      	ldr	r3, [r3, #24]
 8025134:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8025138:	2b00      	cmp	r3, #0
 802513a:	d003      	beq.n	8025144 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802513c:	6878      	ldr	r0, [r7, #4]
 802513e:	f000 fa42 	bl	80255c6 <HAL_TIM_IC_CaptureCallback>
 8025142:	e005      	b.n	8025150 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8025144:	6878      	ldr	r0, [r7, #4]
 8025146:	f000 fa34 	bl	80255b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802514a:	6878      	ldr	r0, [r7, #4]
 802514c:	f000 fa45 	bl	80255da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8025150:	687b      	ldr	r3, [r7, #4]
 8025152:	2200      	movs	r2, #0
 8025154:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8025156:	687b      	ldr	r3, [r7, #4]
 8025158:	681b      	ldr	r3, [r3, #0]
 802515a:	691b      	ldr	r3, [r3, #16]
 802515c:	f003 0308 	and.w	r3, r3, #8
 8025160:	2b08      	cmp	r3, #8
 8025162:	d122      	bne.n	80251aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8025164:	687b      	ldr	r3, [r7, #4]
 8025166:	681b      	ldr	r3, [r3, #0]
 8025168:	68db      	ldr	r3, [r3, #12]
 802516a:	f003 0308 	and.w	r3, r3, #8
 802516e:	2b08      	cmp	r3, #8
 8025170:	d11b      	bne.n	80251aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8025172:	687b      	ldr	r3, [r7, #4]
 8025174:	681b      	ldr	r3, [r3, #0]
 8025176:	f06f 0208 	mvn.w	r2, #8
 802517a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 802517c:	687b      	ldr	r3, [r7, #4]
 802517e:	2204      	movs	r2, #4
 8025180:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8025182:	687b      	ldr	r3, [r7, #4]
 8025184:	681b      	ldr	r3, [r3, #0]
 8025186:	69db      	ldr	r3, [r3, #28]
 8025188:	f003 0303 	and.w	r3, r3, #3
 802518c:	2b00      	cmp	r3, #0
 802518e:	d003      	beq.n	8025198 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8025190:	6878      	ldr	r0, [r7, #4]
 8025192:	f000 fa18 	bl	80255c6 <HAL_TIM_IC_CaptureCallback>
 8025196:	e005      	b.n	80251a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8025198:	6878      	ldr	r0, [r7, #4]
 802519a:	f000 fa0a 	bl	80255b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802519e:	6878      	ldr	r0, [r7, #4]
 80251a0:	f000 fa1b 	bl	80255da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80251a4:	687b      	ldr	r3, [r7, #4]
 80251a6:	2200      	movs	r2, #0
 80251a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80251aa:	687b      	ldr	r3, [r7, #4]
 80251ac:	681b      	ldr	r3, [r3, #0]
 80251ae:	691b      	ldr	r3, [r3, #16]
 80251b0:	f003 0310 	and.w	r3, r3, #16
 80251b4:	2b10      	cmp	r3, #16
 80251b6:	d122      	bne.n	80251fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80251b8:	687b      	ldr	r3, [r7, #4]
 80251ba:	681b      	ldr	r3, [r3, #0]
 80251bc:	68db      	ldr	r3, [r3, #12]
 80251be:	f003 0310 	and.w	r3, r3, #16
 80251c2:	2b10      	cmp	r3, #16
 80251c4:	d11b      	bne.n	80251fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80251c6:	687b      	ldr	r3, [r7, #4]
 80251c8:	681b      	ldr	r3, [r3, #0]
 80251ca:	f06f 0210 	mvn.w	r2, #16
 80251ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80251d0:	687b      	ldr	r3, [r7, #4]
 80251d2:	2208      	movs	r2, #8
 80251d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80251d6:	687b      	ldr	r3, [r7, #4]
 80251d8:	681b      	ldr	r3, [r3, #0]
 80251da:	69db      	ldr	r3, [r3, #28]
 80251dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80251e0:	2b00      	cmp	r3, #0
 80251e2:	d003      	beq.n	80251ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80251e4:	6878      	ldr	r0, [r7, #4]
 80251e6:	f000 f9ee 	bl	80255c6 <HAL_TIM_IC_CaptureCallback>
 80251ea:	e005      	b.n	80251f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80251ec:	6878      	ldr	r0, [r7, #4]
 80251ee:	f000 f9e0 	bl	80255b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80251f2:	6878      	ldr	r0, [r7, #4]
 80251f4:	f000 f9f1 	bl	80255da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80251f8:	687b      	ldr	r3, [r7, #4]
 80251fa:	2200      	movs	r2, #0
 80251fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80251fe:	687b      	ldr	r3, [r7, #4]
 8025200:	681b      	ldr	r3, [r3, #0]
 8025202:	691b      	ldr	r3, [r3, #16]
 8025204:	f003 0301 	and.w	r3, r3, #1
 8025208:	2b01      	cmp	r3, #1
 802520a:	d10e      	bne.n	802522a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 802520c:	687b      	ldr	r3, [r7, #4]
 802520e:	681b      	ldr	r3, [r3, #0]
 8025210:	68db      	ldr	r3, [r3, #12]
 8025212:	f003 0301 	and.w	r3, r3, #1
 8025216:	2b01      	cmp	r3, #1
 8025218:	d107      	bne.n	802522a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 802521a:	687b      	ldr	r3, [r7, #4]
 802521c:	681b      	ldr	r3, [r3, #0]
 802521e:	f06f 0201 	mvn.w	r2, #1
 8025222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8025224:	6878      	ldr	r0, [r7, #4]
 8025226:	f7fc f81f 	bl	8021268 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 802522a:	687b      	ldr	r3, [r7, #4]
 802522c:	681b      	ldr	r3, [r3, #0]
 802522e:	691b      	ldr	r3, [r3, #16]
 8025230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025234:	2b80      	cmp	r3, #128	; 0x80
 8025236:	d10e      	bne.n	8025256 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8025238:	687b      	ldr	r3, [r7, #4]
 802523a:	681b      	ldr	r3, [r3, #0]
 802523c:	68db      	ldr	r3, [r3, #12]
 802523e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8025242:	2b80      	cmp	r3, #128	; 0x80
 8025244:	d107      	bne.n	8025256 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8025246:	687b      	ldr	r3, [r7, #4]
 8025248:	681b      	ldr	r3, [r3, #0]
 802524a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 802524e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8025250:	6878      	ldr	r0, [r7, #4]
 8025252:	f000 fdbf 	bl	8025dd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8025256:	687b      	ldr	r3, [r7, #4]
 8025258:	681b      	ldr	r3, [r3, #0]
 802525a:	691b      	ldr	r3, [r3, #16]
 802525c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8025260:	2b40      	cmp	r3, #64	; 0x40
 8025262:	d10e      	bne.n	8025282 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8025264:	687b      	ldr	r3, [r7, #4]
 8025266:	681b      	ldr	r3, [r3, #0]
 8025268:	68db      	ldr	r3, [r3, #12]
 802526a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802526e:	2b40      	cmp	r3, #64	; 0x40
 8025270:	d107      	bne.n	8025282 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8025272:	687b      	ldr	r3, [r7, #4]
 8025274:	681b      	ldr	r3, [r3, #0]
 8025276:	f06f 0240 	mvn.w	r2, #64	; 0x40
 802527a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 802527c:	6878      	ldr	r0, [r7, #4]
 802527e:	f000 f9b6 	bl	80255ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8025282:	687b      	ldr	r3, [r7, #4]
 8025284:	681b      	ldr	r3, [r3, #0]
 8025286:	691b      	ldr	r3, [r3, #16]
 8025288:	f003 0320 	and.w	r3, r3, #32
 802528c:	2b20      	cmp	r3, #32
 802528e:	d10e      	bne.n	80252ae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8025290:	687b      	ldr	r3, [r7, #4]
 8025292:	681b      	ldr	r3, [r3, #0]
 8025294:	68db      	ldr	r3, [r3, #12]
 8025296:	f003 0320 	and.w	r3, r3, #32
 802529a:	2b20      	cmp	r3, #32
 802529c:	d107      	bne.n	80252ae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 802529e:	687b      	ldr	r3, [r7, #4]
 80252a0:	681b      	ldr	r3, [r3, #0]
 80252a2:	f06f 0220 	mvn.w	r2, #32
 80252a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80252a8:	6878      	ldr	r0, [r7, #4]
 80252aa:	f000 fd89 	bl	8025dc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80252ae:	bf00      	nop
 80252b0:	3708      	adds	r7, #8
 80252b2:	46bd      	mov	sp, r7
 80252b4:	bd80      	pop	{r7, pc}
	...

080252b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80252b8:	b580      	push	{r7, lr}
 80252ba:	b084      	sub	sp, #16
 80252bc:	af00      	add	r7, sp, #0
 80252be:	60f8      	str	r0, [r7, #12]
 80252c0:	60b9      	str	r1, [r7, #8]
 80252c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80252c4:	68fb      	ldr	r3, [r7, #12]
 80252c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80252ca:	2b01      	cmp	r3, #1
 80252cc:	d101      	bne.n	80252d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80252ce:	2302      	movs	r3, #2
 80252d0:	e0b4      	b.n	802543c <HAL_TIM_PWM_ConfigChannel+0x184>
 80252d2:	68fb      	ldr	r3, [r7, #12]
 80252d4:	2201      	movs	r2, #1
 80252d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80252da:	68fb      	ldr	r3, [r7, #12]
 80252dc:	2202      	movs	r2, #2
 80252de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80252e2:	687b      	ldr	r3, [r7, #4]
 80252e4:	2b0c      	cmp	r3, #12
 80252e6:	f200 809f 	bhi.w	8025428 <HAL_TIM_PWM_ConfigChannel+0x170>
 80252ea:	a201      	add	r2, pc, #4	; (adr r2, 80252f0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80252ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80252f0:	08025325 	.word	0x08025325
 80252f4:	08025429 	.word	0x08025429
 80252f8:	08025429 	.word	0x08025429
 80252fc:	08025429 	.word	0x08025429
 8025300:	08025365 	.word	0x08025365
 8025304:	08025429 	.word	0x08025429
 8025308:	08025429 	.word	0x08025429
 802530c:	08025429 	.word	0x08025429
 8025310:	080253a7 	.word	0x080253a7
 8025314:	08025429 	.word	0x08025429
 8025318:	08025429 	.word	0x08025429
 802531c:	08025429 	.word	0x08025429
 8025320:	080253e7 	.word	0x080253e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8025324:	68fb      	ldr	r3, [r7, #12]
 8025326:	681b      	ldr	r3, [r3, #0]
 8025328:	68b9      	ldr	r1, [r7, #8]
 802532a:	4618      	mov	r0, r3
 802532c:	f000 fa0a 	bl	8025744 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8025330:	68fb      	ldr	r3, [r7, #12]
 8025332:	681b      	ldr	r3, [r3, #0]
 8025334:	699a      	ldr	r2, [r3, #24]
 8025336:	68fb      	ldr	r3, [r7, #12]
 8025338:	681b      	ldr	r3, [r3, #0]
 802533a:	f042 0208 	orr.w	r2, r2, #8
 802533e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8025340:	68fb      	ldr	r3, [r7, #12]
 8025342:	681b      	ldr	r3, [r3, #0]
 8025344:	699a      	ldr	r2, [r3, #24]
 8025346:	68fb      	ldr	r3, [r7, #12]
 8025348:	681b      	ldr	r3, [r3, #0]
 802534a:	f022 0204 	bic.w	r2, r2, #4
 802534e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8025350:	68fb      	ldr	r3, [r7, #12]
 8025352:	681b      	ldr	r3, [r3, #0]
 8025354:	6999      	ldr	r1, [r3, #24]
 8025356:	68bb      	ldr	r3, [r7, #8]
 8025358:	691a      	ldr	r2, [r3, #16]
 802535a:	68fb      	ldr	r3, [r7, #12]
 802535c:	681b      	ldr	r3, [r3, #0]
 802535e:	430a      	orrs	r2, r1
 8025360:	619a      	str	r2, [r3, #24]
      break;
 8025362:	e062      	b.n	802542a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8025364:	68fb      	ldr	r3, [r7, #12]
 8025366:	681b      	ldr	r3, [r3, #0]
 8025368:	68b9      	ldr	r1, [r7, #8]
 802536a:	4618      	mov	r0, r3
 802536c:	f000 fa5a 	bl	8025824 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8025370:	68fb      	ldr	r3, [r7, #12]
 8025372:	681b      	ldr	r3, [r3, #0]
 8025374:	699a      	ldr	r2, [r3, #24]
 8025376:	68fb      	ldr	r3, [r7, #12]
 8025378:	681b      	ldr	r3, [r3, #0]
 802537a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802537e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8025380:	68fb      	ldr	r3, [r7, #12]
 8025382:	681b      	ldr	r3, [r3, #0]
 8025384:	699a      	ldr	r2, [r3, #24]
 8025386:	68fb      	ldr	r3, [r7, #12]
 8025388:	681b      	ldr	r3, [r3, #0]
 802538a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802538e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8025390:	68fb      	ldr	r3, [r7, #12]
 8025392:	681b      	ldr	r3, [r3, #0]
 8025394:	6999      	ldr	r1, [r3, #24]
 8025396:	68bb      	ldr	r3, [r7, #8]
 8025398:	691b      	ldr	r3, [r3, #16]
 802539a:	021a      	lsls	r2, r3, #8
 802539c:	68fb      	ldr	r3, [r7, #12]
 802539e:	681b      	ldr	r3, [r3, #0]
 80253a0:	430a      	orrs	r2, r1
 80253a2:	619a      	str	r2, [r3, #24]
      break;
 80253a4:	e041      	b.n	802542a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80253a6:	68fb      	ldr	r3, [r7, #12]
 80253a8:	681b      	ldr	r3, [r3, #0]
 80253aa:	68b9      	ldr	r1, [r7, #8]
 80253ac:	4618      	mov	r0, r3
 80253ae:	f000 faaf 	bl	8025910 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80253b2:	68fb      	ldr	r3, [r7, #12]
 80253b4:	681b      	ldr	r3, [r3, #0]
 80253b6:	69da      	ldr	r2, [r3, #28]
 80253b8:	68fb      	ldr	r3, [r7, #12]
 80253ba:	681b      	ldr	r3, [r3, #0]
 80253bc:	f042 0208 	orr.w	r2, r2, #8
 80253c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80253c2:	68fb      	ldr	r3, [r7, #12]
 80253c4:	681b      	ldr	r3, [r3, #0]
 80253c6:	69da      	ldr	r2, [r3, #28]
 80253c8:	68fb      	ldr	r3, [r7, #12]
 80253ca:	681b      	ldr	r3, [r3, #0]
 80253cc:	f022 0204 	bic.w	r2, r2, #4
 80253d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80253d2:	68fb      	ldr	r3, [r7, #12]
 80253d4:	681b      	ldr	r3, [r3, #0]
 80253d6:	69d9      	ldr	r1, [r3, #28]
 80253d8:	68bb      	ldr	r3, [r7, #8]
 80253da:	691a      	ldr	r2, [r3, #16]
 80253dc:	68fb      	ldr	r3, [r7, #12]
 80253de:	681b      	ldr	r3, [r3, #0]
 80253e0:	430a      	orrs	r2, r1
 80253e2:	61da      	str	r2, [r3, #28]
      break;
 80253e4:	e021      	b.n	802542a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80253e6:	68fb      	ldr	r3, [r7, #12]
 80253e8:	681b      	ldr	r3, [r3, #0]
 80253ea:	68b9      	ldr	r1, [r7, #8]
 80253ec:	4618      	mov	r0, r3
 80253ee:	f000 fb03 	bl	80259f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80253f2:	68fb      	ldr	r3, [r7, #12]
 80253f4:	681b      	ldr	r3, [r3, #0]
 80253f6:	69da      	ldr	r2, [r3, #28]
 80253f8:	68fb      	ldr	r3, [r7, #12]
 80253fa:	681b      	ldr	r3, [r3, #0]
 80253fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8025400:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8025402:	68fb      	ldr	r3, [r7, #12]
 8025404:	681b      	ldr	r3, [r3, #0]
 8025406:	69da      	ldr	r2, [r3, #28]
 8025408:	68fb      	ldr	r3, [r7, #12]
 802540a:	681b      	ldr	r3, [r3, #0]
 802540c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8025410:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8025412:	68fb      	ldr	r3, [r7, #12]
 8025414:	681b      	ldr	r3, [r3, #0]
 8025416:	69d9      	ldr	r1, [r3, #28]
 8025418:	68bb      	ldr	r3, [r7, #8]
 802541a:	691b      	ldr	r3, [r3, #16]
 802541c:	021a      	lsls	r2, r3, #8
 802541e:	68fb      	ldr	r3, [r7, #12]
 8025420:	681b      	ldr	r3, [r3, #0]
 8025422:	430a      	orrs	r2, r1
 8025424:	61da      	str	r2, [r3, #28]
      break;
 8025426:	e000      	b.n	802542a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8025428:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 802542a:	68fb      	ldr	r3, [r7, #12]
 802542c:	2201      	movs	r2, #1
 802542e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8025432:	68fb      	ldr	r3, [r7, #12]
 8025434:	2200      	movs	r2, #0
 8025436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802543a:	2300      	movs	r3, #0
}
 802543c:	4618      	mov	r0, r3
 802543e:	3710      	adds	r7, #16
 8025440:	46bd      	mov	sp, r7
 8025442:	bd80      	pop	{r7, pc}

08025444 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8025444:	b580      	push	{r7, lr}
 8025446:	b084      	sub	sp, #16
 8025448:	af00      	add	r7, sp, #0
 802544a:	6078      	str	r0, [r7, #4]
 802544c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 802544e:	687b      	ldr	r3, [r7, #4]
 8025450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8025454:	2b01      	cmp	r3, #1
 8025456:	d101      	bne.n	802545c <HAL_TIM_ConfigClockSource+0x18>
 8025458:	2302      	movs	r3, #2
 802545a:	e0a6      	b.n	80255aa <HAL_TIM_ConfigClockSource+0x166>
 802545c:	687b      	ldr	r3, [r7, #4]
 802545e:	2201      	movs	r2, #1
 8025460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8025464:	687b      	ldr	r3, [r7, #4]
 8025466:	2202      	movs	r2, #2
 8025468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 802546c:	687b      	ldr	r3, [r7, #4]
 802546e:	681b      	ldr	r3, [r3, #0]
 8025470:	689b      	ldr	r3, [r3, #8]
 8025472:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8025474:	68fb      	ldr	r3, [r7, #12]
 8025476:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 802547a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802547c:	68fb      	ldr	r3, [r7, #12]
 802547e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8025482:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8025484:	687b      	ldr	r3, [r7, #4]
 8025486:	681b      	ldr	r3, [r3, #0]
 8025488:	68fa      	ldr	r2, [r7, #12]
 802548a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 802548c:	683b      	ldr	r3, [r7, #0]
 802548e:	681b      	ldr	r3, [r3, #0]
 8025490:	2b40      	cmp	r3, #64	; 0x40
 8025492:	d067      	beq.n	8025564 <HAL_TIM_ConfigClockSource+0x120>
 8025494:	2b40      	cmp	r3, #64	; 0x40
 8025496:	d80b      	bhi.n	80254b0 <HAL_TIM_ConfigClockSource+0x6c>
 8025498:	2b10      	cmp	r3, #16
 802549a:	d073      	beq.n	8025584 <HAL_TIM_ConfigClockSource+0x140>
 802549c:	2b10      	cmp	r3, #16
 802549e:	d802      	bhi.n	80254a6 <HAL_TIM_ConfigClockSource+0x62>
 80254a0:	2b00      	cmp	r3, #0
 80254a2:	d06f      	beq.n	8025584 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80254a4:	e078      	b.n	8025598 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80254a6:	2b20      	cmp	r3, #32
 80254a8:	d06c      	beq.n	8025584 <HAL_TIM_ConfigClockSource+0x140>
 80254aa:	2b30      	cmp	r3, #48	; 0x30
 80254ac:	d06a      	beq.n	8025584 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80254ae:	e073      	b.n	8025598 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80254b0:	2b70      	cmp	r3, #112	; 0x70
 80254b2:	d00d      	beq.n	80254d0 <HAL_TIM_ConfigClockSource+0x8c>
 80254b4:	2b70      	cmp	r3, #112	; 0x70
 80254b6:	d804      	bhi.n	80254c2 <HAL_TIM_ConfigClockSource+0x7e>
 80254b8:	2b50      	cmp	r3, #80	; 0x50
 80254ba:	d033      	beq.n	8025524 <HAL_TIM_ConfigClockSource+0xe0>
 80254bc:	2b60      	cmp	r3, #96	; 0x60
 80254be:	d041      	beq.n	8025544 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80254c0:	e06a      	b.n	8025598 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80254c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80254c6:	d066      	beq.n	8025596 <HAL_TIM_ConfigClockSource+0x152>
 80254c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80254cc:	d017      	beq.n	80254fe <HAL_TIM_ConfigClockSource+0xba>
      break;
 80254ce:	e063      	b.n	8025598 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80254d0:	687b      	ldr	r3, [r7, #4]
 80254d2:	6818      	ldr	r0, [r3, #0]
 80254d4:	683b      	ldr	r3, [r7, #0]
 80254d6:	6899      	ldr	r1, [r3, #8]
 80254d8:	683b      	ldr	r3, [r7, #0]
 80254da:	685a      	ldr	r2, [r3, #4]
 80254dc:	683b      	ldr	r3, [r7, #0]
 80254de:	68db      	ldr	r3, [r3, #12]
 80254e0:	f000 fb5a 	bl	8025b98 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80254e4:	687b      	ldr	r3, [r7, #4]
 80254e6:	681b      	ldr	r3, [r3, #0]
 80254e8:	689b      	ldr	r3, [r3, #8]
 80254ea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80254ec:	68fb      	ldr	r3, [r7, #12]
 80254ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80254f2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80254f4:	687b      	ldr	r3, [r7, #4]
 80254f6:	681b      	ldr	r3, [r3, #0]
 80254f8:	68fa      	ldr	r2, [r7, #12]
 80254fa:	609a      	str	r2, [r3, #8]
      break;
 80254fc:	e04c      	b.n	8025598 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80254fe:	687b      	ldr	r3, [r7, #4]
 8025500:	6818      	ldr	r0, [r3, #0]
 8025502:	683b      	ldr	r3, [r7, #0]
 8025504:	6899      	ldr	r1, [r3, #8]
 8025506:	683b      	ldr	r3, [r7, #0]
 8025508:	685a      	ldr	r2, [r3, #4]
 802550a:	683b      	ldr	r3, [r7, #0]
 802550c:	68db      	ldr	r3, [r3, #12]
 802550e:	f000 fb43 	bl	8025b98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8025512:	687b      	ldr	r3, [r7, #4]
 8025514:	681b      	ldr	r3, [r3, #0]
 8025516:	689a      	ldr	r2, [r3, #8]
 8025518:	687b      	ldr	r3, [r7, #4]
 802551a:	681b      	ldr	r3, [r3, #0]
 802551c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8025520:	609a      	str	r2, [r3, #8]
      break;
 8025522:	e039      	b.n	8025598 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8025524:	687b      	ldr	r3, [r7, #4]
 8025526:	6818      	ldr	r0, [r3, #0]
 8025528:	683b      	ldr	r3, [r7, #0]
 802552a:	6859      	ldr	r1, [r3, #4]
 802552c:	683b      	ldr	r3, [r7, #0]
 802552e:	68db      	ldr	r3, [r3, #12]
 8025530:	461a      	mov	r2, r3
 8025532:	f000 fab7 	bl	8025aa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8025536:	687b      	ldr	r3, [r7, #4]
 8025538:	681b      	ldr	r3, [r3, #0]
 802553a:	2150      	movs	r1, #80	; 0x50
 802553c:	4618      	mov	r0, r3
 802553e:	f000 fb10 	bl	8025b62 <TIM_ITRx_SetConfig>
      break;
 8025542:	e029      	b.n	8025598 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8025544:	687b      	ldr	r3, [r7, #4]
 8025546:	6818      	ldr	r0, [r3, #0]
 8025548:	683b      	ldr	r3, [r7, #0]
 802554a:	6859      	ldr	r1, [r3, #4]
 802554c:	683b      	ldr	r3, [r7, #0]
 802554e:	68db      	ldr	r3, [r3, #12]
 8025550:	461a      	mov	r2, r3
 8025552:	f000 fad6 	bl	8025b02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8025556:	687b      	ldr	r3, [r7, #4]
 8025558:	681b      	ldr	r3, [r3, #0]
 802555a:	2160      	movs	r1, #96	; 0x60
 802555c:	4618      	mov	r0, r3
 802555e:	f000 fb00 	bl	8025b62 <TIM_ITRx_SetConfig>
      break;
 8025562:	e019      	b.n	8025598 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8025564:	687b      	ldr	r3, [r7, #4]
 8025566:	6818      	ldr	r0, [r3, #0]
 8025568:	683b      	ldr	r3, [r7, #0]
 802556a:	6859      	ldr	r1, [r3, #4]
 802556c:	683b      	ldr	r3, [r7, #0]
 802556e:	68db      	ldr	r3, [r3, #12]
 8025570:	461a      	mov	r2, r3
 8025572:	f000 fa97 	bl	8025aa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8025576:	687b      	ldr	r3, [r7, #4]
 8025578:	681b      	ldr	r3, [r3, #0]
 802557a:	2140      	movs	r1, #64	; 0x40
 802557c:	4618      	mov	r0, r3
 802557e:	f000 faf0 	bl	8025b62 <TIM_ITRx_SetConfig>
      break;
 8025582:	e009      	b.n	8025598 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8025584:	687b      	ldr	r3, [r7, #4]
 8025586:	681a      	ldr	r2, [r3, #0]
 8025588:	683b      	ldr	r3, [r7, #0]
 802558a:	681b      	ldr	r3, [r3, #0]
 802558c:	4619      	mov	r1, r3
 802558e:	4610      	mov	r0, r2
 8025590:	f000 fae7 	bl	8025b62 <TIM_ITRx_SetConfig>
      break;
 8025594:	e000      	b.n	8025598 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8025596:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8025598:	687b      	ldr	r3, [r7, #4]
 802559a:	2201      	movs	r2, #1
 802559c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80255a0:	687b      	ldr	r3, [r7, #4]
 80255a2:	2200      	movs	r2, #0
 80255a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80255a8:	2300      	movs	r3, #0
}
 80255aa:	4618      	mov	r0, r3
 80255ac:	3710      	adds	r7, #16
 80255ae:	46bd      	mov	sp, r7
 80255b0:	bd80      	pop	{r7, pc}

080255b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80255b2:	b480      	push	{r7}
 80255b4:	b083      	sub	sp, #12
 80255b6:	af00      	add	r7, sp, #0
 80255b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80255ba:	bf00      	nop
 80255bc:	370c      	adds	r7, #12
 80255be:	46bd      	mov	sp, r7
 80255c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255c4:	4770      	bx	lr

080255c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80255c6:	b480      	push	{r7}
 80255c8:	b083      	sub	sp, #12
 80255ca:	af00      	add	r7, sp, #0
 80255cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80255ce:	bf00      	nop
 80255d0:	370c      	adds	r7, #12
 80255d2:	46bd      	mov	sp, r7
 80255d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255d8:	4770      	bx	lr

080255da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80255da:	b480      	push	{r7}
 80255dc:	b083      	sub	sp, #12
 80255de:	af00      	add	r7, sp, #0
 80255e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80255e2:	bf00      	nop
 80255e4:	370c      	adds	r7, #12
 80255e6:	46bd      	mov	sp, r7
 80255e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80255ec:	4770      	bx	lr

080255ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80255ee:	b480      	push	{r7}
 80255f0:	b083      	sub	sp, #12
 80255f2:	af00      	add	r7, sp, #0
 80255f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80255f6:	bf00      	nop
 80255f8:	370c      	adds	r7, #12
 80255fa:	46bd      	mov	sp, r7
 80255fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025600:	4770      	bx	lr
	...

08025604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8025604:	b480      	push	{r7}
 8025606:	b085      	sub	sp, #20
 8025608:	af00      	add	r7, sp, #0
 802560a:	6078      	str	r0, [r7, #4]
 802560c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 802560e:	687b      	ldr	r3, [r7, #4]
 8025610:	681b      	ldr	r3, [r3, #0]
 8025612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8025614:	687b      	ldr	r3, [r7, #4]
 8025616:	4a40      	ldr	r2, [pc, #256]	; (8025718 <TIM_Base_SetConfig+0x114>)
 8025618:	4293      	cmp	r3, r2
 802561a:	d013      	beq.n	8025644 <TIM_Base_SetConfig+0x40>
 802561c:	687b      	ldr	r3, [r7, #4]
 802561e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8025622:	d00f      	beq.n	8025644 <TIM_Base_SetConfig+0x40>
 8025624:	687b      	ldr	r3, [r7, #4]
 8025626:	4a3d      	ldr	r2, [pc, #244]	; (802571c <TIM_Base_SetConfig+0x118>)
 8025628:	4293      	cmp	r3, r2
 802562a:	d00b      	beq.n	8025644 <TIM_Base_SetConfig+0x40>
 802562c:	687b      	ldr	r3, [r7, #4]
 802562e:	4a3c      	ldr	r2, [pc, #240]	; (8025720 <TIM_Base_SetConfig+0x11c>)
 8025630:	4293      	cmp	r3, r2
 8025632:	d007      	beq.n	8025644 <TIM_Base_SetConfig+0x40>
 8025634:	687b      	ldr	r3, [r7, #4]
 8025636:	4a3b      	ldr	r2, [pc, #236]	; (8025724 <TIM_Base_SetConfig+0x120>)
 8025638:	4293      	cmp	r3, r2
 802563a:	d003      	beq.n	8025644 <TIM_Base_SetConfig+0x40>
 802563c:	687b      	ldr	r3, [r7, #4]
 802563e:	4a3a      	ldr	r2, [pc, #232]	; (8025728 <TIM_Base_SetConfig+0x124>)
 8025640:	4293      	cmp	r3, r2
 8025642:	d108      	bne.n	8025656 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8025644:	68fb      	ldr	r3, [r7, #12]
 8025646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802564a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 802564c:	683b      	ldr	r3, [r7, #0]
 802564e:	685b      	ldr	r3, [r3, #4]
 8025650:	68fa      	ldr	r2, [r7, #12]
 8025652:	4313      	orrs	r3, r2
 8025654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8025656:	687b      	ldr	r3, [r7, #4]
 8025658:	4a2f      	ldr	r2, [pc, #188]	; (8025718 <TIM_Base_SetConfig+0x114>)
 802565a:	4293      	cmp	r3, r2
 802565c:	d02b      	beq.n	80256b6 <TIM_Base_SetConfig+0xb2>
 802565e:	687b      	ldr	r3, [r7, #4]
 8025660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8025664:	d027      	beq.n	80256b6 <TIM_Base_SetConfig+0xb2>
 8025666:	687b      	ldr	r3, [r7, #4]
 8025668:	4a2c      	ldr	r2, [pc, #176]	; (802571c <TIM_Base_SetConfig+0x118>)
 802566a:	4293      	cmp	r3, r2
 802566c:	d023      	beq.n	80256b6 <TIM_Base_SetConfig+0xb2>
 802566e:	687b      	ldr	r3, [r7, #4]
 8025670:	4a2b      	ldr	r2, [pc, #172]	; (8025720 <TIM_Base_SetConfig+0x11c>)
 8025672:	4293      	cmp	r3, r2
 8025674:	d01f      	beq.n	80256b6 <TIM_Base_SetConfig+0xb2>
 8025676:	687b      	ldr	r3, [r7, #4]
 8025678:	4a2a      	ldr	r2, [pc, #168]	; (8025724 <TIM_Base_SetConfig+0x120>)
 802567a:	4293      	cmp	r3, r2
 802567c:	d01b      	beq.n	80256b6 <TIM_Base_SetConfig+0xb2>
 802567e:	687b      	ldr	r3, [r7, #4]
 8025680:	4a29      	ldr	r2, [pc, #164]	; (8025728 <TIM_Base_SetConfig+0x124>)
 8025682:	4293      	cmp	r3, r2
 8025684:	d017      	beq.n	80256b6 <TIM_Base_SetConfig+0xb2>
 8025686:	687b      	ldr	r3, [r7, #4]
 8025688:	4a28      	ldr	r2, [pc, #160]	; (802572c <TIM_Base_SetConfig+0x128>)
 802568a:	4293      	cmp	r3, r2
 802568c:	d013      	beq.n	80256b6 <TIM_Base_SetConfig+0xb2>
 802568e:	687b      	ldr	r3, [r7, #4]
 8025690:	4a27      	ldr	r2, [pc, #156]	; (8025730 <TIM_Base_SetConfig+0x12c>)
 8025692:	4293      	cmp	r3, r2
 8025694:	d00f      	beq.n	80256b6 <TIM_Base_SetConfig+0xb2>
 8025696:	687b      	ldr	r3, [r7, #4]
 8025698:	4a26      	ldr	r2, [pc, #152]	; (8025734 <TIM_Base_SetConfig+0x130>)
 802569a:	4293      	cmp	r3, r2
 802569c:	d00b      	beq.n	80256b6 <TIM_Base_SetConfig+0xb2>
 802569e:	687b      	ldr	r3, [r7, #4]
 80256a0:	4a25      	ldr	r2, [pc, #148]	; (8025738 <TIM_Base_SetConfig+0x134>)
 80256a2:	4293      	cmp	r3, r2
 80256a4:	d007      	beq.n	80256b6 <TIM_Base_SetConfig+0xb2>
 80256a6:	687b      	ldr	r3, [r7, #4]
 80256a8:	4a24      	ldr	r2, [pc, #144]	; (802573c <TIM_Base_SetConfig+0x138>)
 80256aa:	4293      	cmp	r3, r2
 80256ac:	d003      	beq.n	80256b6 <TIM_Base_SetConfig+0xb2>
 80256ae:	687b      	ldr	r3, [r7, #4]
 80256b0:	4a23      	ldr	r2, [pc, #140]	; (8025740 <TIM_Base_SetConfig+0x13c>)
 80256b2:	4293      	cmp	r3, r2
 80256b4:	d108      	bne.n	80256c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80256b6:	68fb      	ldr	r3, [r7, #12]
 80256b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80256bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80256be:	683b      	ldr	r3, [r7, #0]
 80256c0:	68db      	ldr	r3, [r3, #12]
 80256c2:	68fa      	ldr	r2, [r7, #12]
 80256c4:	4313      	orrs	r3, r2
 80256c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80256c8:	68fb      	ldr	r3, [r7, #12]
 80256ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80256ce:	683b      	ldr	r3, [r7, #0]
 80256d0:	695b      	ldr	r3, [r3, #20]
 80256d2:	4313      	orrs	r3, r2
 80256d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80256d6:	687b      	ldr	r3, [r7, #4]
 80256d8:	68fa      	ldr	r2, [r7, #12]
 80256da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80256dc:	683b      	ldr	r3, [r7, #0]
 80256de:	689a      	ldr	r2, [r3, #8]
 80256e0:	687b      	ldr	r3, [r7, #4]
 80256e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80256e4:	683b      	ldr	r3, [r7, #0]
 80256e6:	681a      	ldr	r2, [r3, #0]
 80256e8:	687b      	ldr	r3, [r7, #4]
 80256ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80256ec:	687b      	ldr	r3, [r7, #4]
 80256ee:	4a0a      	ldr	r2, [pc, #40]	; (8025718 <TIM_Base_SetConfig+0x114>)
 80256f0:	4293      	cmp	r3, r2
 80256f2:	d003      	beq.n	80256fc <TIM_Base_SetConfig+0xf8>
 80256f4:	687b      	ldr	r3, [r7, #4]
 80256f6:	4a0c      	ldr	r2, [pc, #48]	; (8025728 <TIM_Base_SetConfig+0x124>)
 80256f8:	4293      	cmp	r3, r2
 80256fa:	d103      	bne.n	8025704 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80256fc:	683b      	ldr	r3, [r7, #0]
 80256fe:	691a      	ldr	r2, [r3, #16]
 8025700:	687b      	ldr	r3, [r7, #4]
 8025702:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8025704:	687b      	ldr	r3, [r7, #4]
 8025706:	2201      	movs	r2, #1
 8025708:	615a      	str	r2, [r3, #20]
}
 802570a:	bf00      	nop
 802570c:	3714      	adds	r7, #20
 802570e:	46bd      	mov	sp, r7
 8025710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025714:	4770      	bx	lr
 8025716:	bf00      	nop
 8025718:	40010000 	.word	0x40010000
 802571c:	40000400 	.word	0x40000400
 8025720:	40000800 	.word	0x40000800
 8025724:	40000c00 	.word	0x40000c00
 8025728:	40010400 	.word	0x40010400
 802572c:	40014000 	.word	0x40014000
 8025730:	40014400 	.word	0x40014400
 8025734:	40014800 	.word	0x40014800
 8025738:	40001800 	.word	0x40001800
 802573c:	40001c00 	.word	0x40001c00
 8025740:	40002000 	.word	0x40002000

08025744 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8025744:	b480      	push	{r7}
 8025746:	b087      	sub	sp, #28
 8025748:	af00      	add	r7, sp, #0
 802574a:	6078      	str	r0, [r7, #4]
 802574c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802574e:	687b      	ldr	r3, [r7, #4]
 8025750:	6a1b      	ldr	r3, [r3, #32]
 8025752:	f023 0201 	bic.w	r2, r3, #1
 8025756:	687b      	ldr	r3, [r7, #4]
 8025758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802575a:	687b      	ldr	r3, [r7, #4]
 802575c:	6a1b      	ldr	r3, [r3, #32]
 802575e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8025760:	687b      	ldr	r3, [r7, #4]
 8025762:	685b      	ldr	r3, [r3, #4]
 8025764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8025766:	687b      	ldr	r3, [r7, #4]
 8025768:	699b      	ldr	r3, [r3, #24]
 802576a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 802576c:	68fb      	ldr	r3, [r7, #12]
 802576e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8025772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8025774:	68fb      	ldr	r3, [r7, #12]
 8025776:	f023 0303 	bic.w	r3, r3, #3
 802577a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 802577c:	683b      	ldr	r3, [r7, #0]
 802577e:	681b      	ldr	r3, [r3, #0]
 8025780:	68fa      	ldr	r2, [r7, #12]
 8025782:	4313      	orrs	r3, r2
 8025784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8025786:	697b      	ldr	r3, [r7, #20]
 8025788:	f023 0302 	bic.w	r3, r3, #2
 802578c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 802578e:	683b      	ldr	r3, [r7, #0]
 8025790:	689b      	ldr	r3, [r3, #8]
 8025792:	697a      	ldr	r2, [r7, #20]
 8025794:	4313      	orrs	r3, r2
 8025796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8025798:	687b      	ldr	r3, [r7, #4]
 802579a:	4a20      	ldr	r2, [pc, #128]	; (802581c <TIM_OC1_SetConfig+0xd8>)
 802579c:	4293      	cmp	r3, r2
 802579e:	d003      	beq.n	80257a8 <TIM_OC1_SetConfig+0x64>
 80257a0:	687b      	ldr	r3, [r7, #4]
 80257a2:	4a1f      	ldr	r2, [pc, #124]	; (8025820 <TIM_OC1_SetConfig+0xdc>)
 80257a4:	4293      	cmp	r3, r2
 80257a6:	d10c      	bne.n	80257c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80257a8:	697b      	ldr	r3, [r7, #20]
 80257aa:	f023 0308 	bic.w	r3, r3, #8
 80257ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80257b0:	683b      	ldr	r3, [r7, #0]
 80257b2:	68db      	ldr	r3, [r3, #12]
 80257b4:	697a      	ldr	r2, [r7, #20]
 80257b6:	4313      	orrs	r3, r2
 80257b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80257ba:	697b      	ldr	r3, [r7, #20]
 80257bc:	f023 0304 	bic.w	r3, r3, #4
 80257c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80257c2:	687b      	ldr	r3, [r7, #4]
 80257c4:	4a15      	ldr	r2, [pc, #84]	; (802581c <TIM_OC1_SetConfig+0xd8>)
 80257c6:	4293      	cmp	r3, r2
 80257c8:	d003      	beq.n	80257d2 <TIM_OC1_SetConfig+0x8e>
 80257ca:	687b      	ldr	r3, [r7, #4]
 80257cc:	4a14      	ldr	r2, [pc, #80]	; (8025820 <TIM_OC1_SetConfig+0xdc>)
 80257ce:	4293      	cmp	r3, r2
 80257d0:	d111      	bne.n	80257f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80257d2:	693b      	ldr	r3, [r7, #16]
 80257d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80257d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80257da:	693b      	ldr	r3, [r7, #16]
 80257dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80257e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80257e2:	683b      	ldr	r3, [r7, #0]
 80257e4:	695b      	ldr	r3, [r3, #20]
 80257e6:	693a      	ldr	r2, [r7, #16]
 80257e8:	4313      	orrs	r3, r2
 80257ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80257ec:	683b      	ldr	r3, [r7, #0]
 80257ee:	699b      	ldr	r3, [r3, #24]
 80257f0:	693a      	ldr	r2, [r7, #16]
 80257f2:	4313      	orrs	r3, r2
 80257f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80257f6:	687b      	ldr	r3, [r7, #4]
 80257f8:	693a      	ldr	r2, [r7, #16]
 80257fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80257fc:	687b      	ldr	r3, [r7, #4]
 80257fe:	68fa      	ldr	r2, [r7, #12]
 8025800:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8025802:	683b      	ldr	r3, [r7, #0]
 8025804:	685a      	ldr	r2, [r3, #4]
 8025806:	687b      	ldr	r3, [r7, #4]
 8025808:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802580a:	687b      	ldr	r3, [r7, #4]
 802580c:	697a      	ldr	r2, [r7, #20]
 802580e:	621a      	str	r2, [r3, #32]
}
 8025810:	bf00      	nop
 8025812:	371c      	adds	r7, #28
 8025814:	46bd      	mov	sp, r7
 8025816:	f85d 7b04 	ldr.w	r7, [sp], #4
 802581a:	4770      	bx	lr
 802581c:	40010000 	.word	0x40010000
 8025820:	40010400 	.word	0x40010400

08025824 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8025824:	b480      	push	{r7}
 8025826:	b087      	sub	sp, #28
 8025828:	af00      	add	r7, sp, #0
 802582a:	6078      	str	r0, [r7, #4]
 802582c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802582e:	687b      	ldr	r3, [r7, #4]
 8025830:	6a1b      	ldr	r3, [r3, #32]
 8025832:	f023 0210 	bic.w	r2, r3, #16
 8025836:	687b      	ldr	r3, [r7, #4]
 8025838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802583a:	687b      	ldr	r3, [r7, #4]
 802583c:	6a1b      	ldr	r3, [r3, #32]
 802583e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8025840:	687b      	ldr	r3, [r7, #4]
 8025842:	685b      	ldr	r3, [r3, #4]
 8025844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8025846:	687b      	ldr	r3, [r7, #4]
 8025848:	699b      	ldr	r3, [r3, #24]
 802584a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 802584c:	68fb      	ldr	r3, [r7, #12]
 802584e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8025852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8025854:	68fb      	ldr	r3, [r7, #12]
 8025856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802585a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 802585c:	683b      	ldr	r3, [r7, #0]
 802585e:	681b      	ldr	r3, [r3, #0]
 8025860:	021b      	lsls	r3, r3, #8
 8025862:	68fa      	ldr	r2, [r7, #12]
 8025864:	4313      	orrs	r3, r2
 8025866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8025868:	697b      	ldr	r3, [r7, #20]
 802586a:	f023 0320 	bic.w	r3, r3, #32
 802586e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8025870:	683b      	ldr	r3, [r7, #0]
 8025872:	689b      	ldr	r3, [r3, #8]
 8025874:	011b      	lsls	r3, r3, #4
 8025876:	697a      	ldr	r2, [r7, #20]
 8025878:	4313      	orrs	r3, r2
 802587a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 802587c:	687b      	ldr	r3, [r7, #4]
 802587e:	4a22      	ldr	r2, [pc, #136]	; (8025908 <TIM_OC2_SetConfig+0xe4>)
 8025880:	4293      	cmp	r3, r2
 8025882:	d003      	beq.n	802588c <TIM_OC2_SetConfig+0x68>
 8025884:	687b      	ldr	r3, [r7, #4]
 8025886:	4a21      	ldr	r2, [pc, #132]	; (802590c <TIM_OC2_SetConfig+0xe8>)
 8025888:	4293      	cmp	r3, r2
 802588a:	d10d      	bne.n	80258a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 802588c:	697b      	ldr	r3, [r7, #20]
 802588e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8025892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8025894:	683b      	ldr	r3, [r7, #0]
 8025896:	68db      	ldr	r3, [r3, #12]
 8025898:	011b      	lsls	r3, r3, #4
 802589a:	697a      	ldr	r2, [r7, #20]
 802589c:	4313      	orrs	r3, r2
 802589e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80258a0:	697b      	ldr	r3, [r7, #20]
 80258a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80258a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80258a8:	687b      	ldr	r3, [r7, #4]
 80258aa:	4a17      	ldr	r2, [pc, #92]	; (8025908 <TIM_OC2_SetConfig+0xe4>)
 80258ac:	4293      	cmp	r3, r2
 80258ae:	d003      	beq.n	80258b8 <TIM_OC2_SetConfig+0x94>
 80258b0:	687b      	ldr	r3, [r7, #4]
 80258b2:	4a16      	ldr	r2, [pc, #88]	; (802590c <TIM_OC2_SetConfig+0xe8>)
 80258b4:	4293      	cmp	r3, r2
 80258b6:	d113      	bne.n	80258e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80258b8:	693b      	ldr	r3, [r7, #16]
 80258ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80258be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80258c0:	693b      	ldr	r3, [r7, #16]
 80258c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80258c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80258c8:	683b      	ldr	r3, [r7, #0]
 80258ca:	695b      	ldr	r3, [r3, #20]
 80258cc:	009b      	lsls	r3, r3, #2
 80258ce:	693a      	ldr	r2, [r7, #16]
 80258d0:	4313      	orrs	r3, r2
 80258d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80258d4:	683b      	ldr	r3, [r7, #0]
 80258d6:	699b      	ldr	r3, [r3, #24]
 80258d8:	009b      	lsls	r3, r3, #2
 80258da:	693a      	ldr	r2, [r7, #16]
 80258dc:	4313      	orrs	r3, r2
 80258de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80258e0:	687b      	ldr	r3, [r7, #4]
 80258e2:	693a      	ldr	r2, [r7, #16]
 80258e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80258e6:	687b      	ldr	r3, [r7, #4]
 80258e8:	68fa      	ldr	r2, [r7, #12]
 80258ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80258ec:	683b      	ldr	r3, [r7, #0]
 80258ee:	685a      	ldr	r2, [r3, #4]
 80258f0:	687b      	ldr	r3, [r7, #4]
 80258f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80258f4:	687b      	ldr	r3, [r7, #4]
 80258f6:	697a      	ldr	r2, [r7, #20]
 80258f8:	621a      	str	r2, [r3, #32]
}
 80258fa:	bf00      	nop
 80258fc:	371c      	adds	r7, #28
 80258fe:	46bd      	mov	sp, r7
 8025900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025904:	4770      	bx	lr
 8025906:	bf00      	nop
 8025908:	40010000 	.word	0x40010000
 802590c:	40010400 	.word	0x40010400

08025910 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8025910:	b480      	push	{r7}
 8025912:	b087      	sub	sp, #28
 8025914:	af00      	add	r7, sp, #0
 8025916:	6078      	str	r0, [r7, #4]
 8025918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 802591a:	687b      	ldr	r3, [r7, #4]
 802591c:	6a1b      	ldr	r3, [r3, #32]
 802591e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8025922:	687b      	ldr	r3, [r7, #4]
 8025924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8025926:	687b      	ldr	r3, [r7, #4]
 8025928:	6a1b      	ldr	r3, [r3, #32]
 802592a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802592c:	687b      	ldr	r3, [r7, #4]
 802592e:	685b      	ldr	r3, [r3, #4]
 8025930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8025932:	687b      	ldr	r3, [r7, #4]
 8025934:	69db      	ldr	r3, [r3, #28]
 8025936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8025938:	68fb      	ldr	r3, [r7, #12]
 802593a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802593e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8025940:	68fb      	ldr	r3, [r7, #12]
 8025942:	f023 0303 	bic.w	r3, r3, #3
 8025946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8025948:	683b      	ldr	r3, [r7, #0]
 802594a:	681b      	ldr	r3, [r3, #0]
 802594c:	68fa      	ldr	r2, [r7, #12]
 802594e:	4313      	orrs	r3, r2
 8025950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8025952:	697b      	ldr	r3, [r7, #20]
 8025954:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8025958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 802595a:	683b      	ldr	r3, [r7, #0]
 802595c:	689b      	ldr	r3, [r3, #8]
 802595e:	021b      	lsls	r3, r3, #8
 8025960:	697a      	ldr	r2, [r7, #20]
 8025962:	4313      	orrs	r3, r2
 8025964:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8025966:	687b      	ldr	r3, [r7, #4]
 8025968:	4a21      	ldr	r2, [pc, #132]	; (80259f0 <TIM_OC3_SetConfig+0xe0>)
 802596a:	4293      	cmp	r3, r2
 802596c:	d003      	beq.n	8025976 <TIM_OC3_SetConfig+0x66>
 802596e:	687b      	ldr	r3, [r7, #4]
 8025970:	4a20      	ldr	r2, [pc, #128]	; (80259f4 <TIM_OC3_SetConfig+0xe4>)
 8025972:	4293      	cmp	r3, r2
 8025974:	d10d      	bne.n	8025992 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8025976:	697b      	ldr	r3, [r7, #20]
 8025978:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 802597c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 802597e:	683b      	ldr	r3, [r7, #0]
 8025980:	68db      	ldr	r3, [r3, #12]
 8025982:	021b      	lsls	r3, r3, #8
 8025984:	697a      	ldr	r2, [r7, #20]
 8025986:	4313      	orrs	r3, r2
 8025988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 802598a:	697b      	ldr	r3, [r7, #20]
 802598c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8025990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8025992:	687b      	ldr	r3, [r7, #4]
 8025994:	4a16      	ldr	r2, [pc, #88]	; (80259f0 <TIM_OC3_SetConfig+0xe0>)
 8025996:	4293      	cmp	r3, r2
 8025998:	d003      	beq.n	80259a2 <TIM_OC3_SetConfig+0x92>
 802599a:	687b      	ldr	r3, [r7, #4]
 802599c:	4a15      	ldr	r2, [pc, #84]	; (80259f4 <TIM_OC3_SetConfig+0xe4>)
 802599e:	4293      	cmp	r3, r2
 80259a0:	d113      	bne.n	80259ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80259a2:	693b      	ldr	r3, [r7, #16]
 80259a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80259a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80259aa:	693b      	ldr	r3, [r7, #16]
 80259ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80259b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80259b2:	683b      	ldr	r3, [r7, #0]
 80259b4:	695b      	ldr	r3, [r3, #20]
 80259b6:	011b      	lsls	r3, r3, #4
 80259b8:	693a      	ldr	r2, [r7, #16]
 80259ba:	4313      	orrs	r3, r2
 80259bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80259be:	683b      	ldr	r3, [r7, #0]
 80259c0:	699b      	ldr	r3, [r3, #24]
 80259c2:	011b      	lsls	r3, r3, #4
 80259c4:	693a      	ldr	r2, [r7, #16]
 80259c6:	4313      	orrs	r3, r2
 80259c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80259ca:	687b      	ldr	r3, [r7, #4]
 80259cc:	693a      	ldr	r2, [r7, #16]
 80259ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80259d0:	687b      	ldr	r3, [r7, #4]
 80259d2:	68fa      	ldr	r2, [r7, #12]
 80259d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80259d6:	683b      	ldr	r3, [r7, #0]
 80259d8:	685a      	ldr	r2, [r3, #4]
 80259da:	687b      	ldr	r3, [r7, #4]
 80259dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80259de:	687b      	ldr	r3, [r7, #4]
 80259e0:	697a      	ldr	r2, [r7, #20]
 80259e2:	621a      	str	r2, [r3, #32]
}
 80259e4:	bf00      	nop
 80259e6:	371c      	adds	r7, #28
 80259e8:	46bd      	mov	sp, r7
 80259ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80259ee:	4770      	bx	lr
 80259f0:	40010000 	.word	0x40010000
 80259f4:	40010400 	.word	0x40010400

080259f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80259f8:	b480      	push	{r7}
 80259fa:	b087      	sub	sp, #28
 80259fc:	af00      	add	r7, sp, #0
 80259fe:	6078      	str	r0, [r7, #4]
 8025a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8025a02:	687b      	ldr	r3, [r7, #4]
 8025a04:	6a1b      	ldr	r3, [r3, #32]
 8025a06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8025a0a:	687b      	ldr	r3, [r7, #4]
 8025a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8025a0e:	687b      	ldr	r3, [r7, #4]
 8025a10:	6a1b      	ldr	r3, [r3, #32]
 8025a12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8025a14:	687b      	ldr	r3, [r7, #4]
 8025a16:	685b      	ldr	r3, [r3, #4]
 8025a18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8025a1a:	687b      	ldr	r3, [r7, #4]
 8025a1c:	69db      	ldr	r3, [r3, #28]
 8025a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8025a20:	68fb      	ldr	r3, [r7, #12]
 8025a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8025a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8025a28:	68fb      	ldr	r3, [r7, #12]
 8025a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8025a2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8025a30:	683b      	ldr	r3, [r7, #0]
 8025a32:	681b      	ldr	r3, [r3, #0]
 8025a34:	021b      	lsls	r3, r3, #8
 8025a36:	68fa      	ldr	r2, [r7, #12]
 8025a38:	4313      	orrs	r3, r2
 8025a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8025a3c:	693b      	ldr	r3, [r7, #16]
 8025a3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8025a42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8025a44:	683b      	ldr	r3, [r7, #0]
 8025a46:	689b      	ldr	r3, [r3, #8]
 8025a48:	031b      	lsls	r3, r3, #12
 8025a4a:	693a      	ldr	r2, [r7, #16]
 8025a4c:	4313      	orrs	r3, r2
 8025a4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8025a50:	687b      	ldr	r3, [r7, #4]
 8025a52:	4a12      	ldr	r2, [pc, #72]	; (8025a9c <TIM_OC4_SetConfig+0xa4>)
 8025a54:	4293      	cmp	r3, r2
 8025a56:	d003      	beq.n	8025a60 <TIM_OC4_SetConfig+0x68>
 8025a58:	687b      	ldr	r3, [r7, #4]
 8025a5a:	4a11      	ldr	r2, [pc, #68]	; (8025aa0 <TIM_OC4_SetConfig+0xa8>)
 8025a5c:	4293      	cmp	r3, r2
 8025a5e:	d109      	bne.n	8025a74 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8025a60:	697b      	ldr	r3, [r7, #20]
 8025a62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8025a66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8025a68:	683b      	ldr	r3, [r7, #0]
 8025a6a:	695b      	ldr	r3, [r3, #20]
 8025a6c:	019b      	lsls	r3, r3, #6
 8025a6e:	697a      	ldr	r2, [r7, #20]
 8025a70:	4313      	orrs	r3, r2
 8025a72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8025a74:	687b      	ldr	r3, [r7, #4]
 8025a76:	697a      	ldr	r2, [r7, #20]
 8025a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8025a7a:	687b      	ldr	r3, [r7, #4]
 8025a7c:	68fa      	ldr	r2, [r7, #12]
 8025a7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8025a80:	683b      	ldr	r3, [r7, #0]
 8025a82:	685a      	ldr	r2, [r3, #4]
 8025a84:	687b      	ldr	r3, [r7, #4]
 8025a86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8025a88:	687b      	ldr	r3, [r7, #4]
 8025a8a:	693a      	ldr	r2, [r7, #16]
 8025a8c:	621a      	str	r2, [r3, #32]
}
 8025a8e:	bf00      	nop
 8025a90:	371c      	adds	r7, #28
 8025a92:	46bd      	mov	sp, r7
 8025a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025a98:	4770      	bx	lr
 8025a9a:	bf00      	nop
 8025a9c:	40010000 	.word	0x40010000
 8025aa0:	40010400 	.word	0x40010400

08025aa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8025aa4:	b480      	push	{r7}
 8025aa6:	b087      	sub	sp, #28
 8025aa8:	af00      	add	r7, sp, #0
 8025aaa:	60f8      	str	r0, [r7, #12]
 8025aac:	60b9      	str	r1, [r7, #8]
 8025aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8025ab0:	68fb      	ldr	r3, [r7, #12]
 8025ab2:	6a1b      	ldr	r3, [r3, #32]
 8025ab4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8025ab6:	68fb      	ldr	r3, [r7, #12]
 8025ab8:	6a1b      	ldr	r3, [r3, #32]
 8025aba:	f023 0201 	bic.w	r2, r3, #1
 8025abe:	68fb      	ldr	r3, [r7, #12]
 8025ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8025ac2:	68fb      	ldr	r3, [r7, #12]
 8025ac4:	699b      	ldr	r3, [r3, #24]
 8025ac6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8025ac8:	693b      	ldr	r3, [r7, #16]
 8025aca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8025ace:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8025ad0:	687b      	ldr	r3, [r7, #4]
 8025ad2:	011b      	lsls	r3, r3, #4
 8025ad4:	693a      	ldr	r2, [r7, #16]
 8025ad6:	4313      	orrs	r3, r2
 8025ad8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8025ada:	697b      	ldr	r3, [r7, #20]
 8025adc:	f023 030a 	bic.w	r3, r3, #10
 8025ae0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8025ae2:	697a      	ldr	r2, [r7, #20]
 8025ae4:	68bb      	ldr	r3, [r7, #8]
 8025ae6:	4313      	orrs	r3, r2
 8025ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8025aea:	68fb      	ldr	r3, [r7, #12]
 8025aec:	693a      	ldr	r2, [r7, #16]
 8025aee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8025af0:	68fb      	ldr	r3, [r7, #12]
 8025af2:	697a      	ldr	r2, [r7, #20]
 8025af4:	621a      	str	r2, [r3, #32]
}
 8025af6:	bf00      	nop
 8025af8:	371c      	adds	r7, #28
 8025afa:	46bd      	mov	sp, r7
 8025afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b00:	4770      	bx	lr

08025b02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8025b02:	b480      	push	{r7}
 8025b04:	b087      	sub	sp, #28
 8025b06:	af00      	add	r7, sp, #0
 8025b08:	60f8      	str	r0, [r7, #12]
 8025b0a:	60b9      	str	r1, [r7, #8]
 8025b0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8025b0e:	68fb      	ldr	r3, [r7, #12]
 8025b10:	6a1b      	ldr	r3, [r3, #32]
 8025b12:	f023 0210 	bic.w	r2, r3, #16
 8025b16:	68fb      	ldr	r3, [r7, #12]
 8025b18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8025b1a:	68fb      	ldr	r3, [r7, #12]
 8025b1c:	699b      	ldr	r3, [r3, #24]
 8025b1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8025b20:	68fb      	ldr	r3, [r7, #12]
 8025b22:	6a1b      	ldr	r3, [r3, #32]
 8025b24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8025b26:	697b      	ldr	r3, [r7, #20]
 8025b28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8025b2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8025b2e:	687b      	ldr	r3, [r7, #4]
 8025b30:	031b      	lsls	r3, r3, #12
 8025b32:	697a      	ldr	r2, [r7, #20]
 8025b34:	4313      	orrs	r3, r2
 8025b36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8025b38:	693b      	ldr	r3, [r7, #16]
 8025b3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8025b3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8025b40:	68bb      	ldr	r3, [r7, #8]
 8025b42:	011b      	lsls	r3, r3, #4
 8025b44:	693a      	ldr	r2, [r7, #16]
 8025b46:	4313      	orrs	r3, r2
 8025b48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8025b4a:	68fb      	ldr	r3, [r7, #12]
 8025b4c:	697a      	ldr	r2, [r7, #20]
 8025b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8025b50:	68fb      	ldr	r3, [r7, #12]
 8025b52:	693a      	ldr	r2, [r7, #16]
 8025b54:	621a      	str	r2, [r3, #32]
}
 8025b56:	bf00      	nop
 8025b58:	371c      	adds	r7, #28
 8025b5a:	46bd      	mov	sp, r7
 8025b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b60:	4770      	bx	lr

08025b62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8025b62:	b480      	push	{r7}
 8025b64:	b085      	sub	sp, #20
 8025b66:	af00      	add	r7, sp, #0
 8025b68:	6078      	str	r0, [r7, #4]
 8025b6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8025b6c:	687b      	ldr	r3, [r7, #4]
 8025b6e:	689b      	ldr	r3, [r3, #8]
 8025b70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8025b72:	68fb      	ldr	r3, [r7, #12]
 8025b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8025b78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8025b7a:	683a      	ldr	r2, [r7, #0]
 8025b7c:	68fb      	ldr	r3, [r7, #12]
 8025b7e:	4313      	orrs	r3, r2
 8025b80:	f043 0307 	orr.w	r3, r3, #7
 8025b84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8025b86:	687b      	ldr	r3, [r7, #4]
 8025b88:	68fa      	ldr	r2, [r7, #12]
 8025b8a:	609a      	str	r2, [r3, #8]
}
 8025b8c:	bf00      	nop
 8025b8e:	3714      	adds	r7, #20
 8025b90:	46bd      	mov	sp, r7
 8025b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025b96:	4770      	bx	lr

08025b98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8025b98:	b480      	push	{r7}
 8025b9a:	b087      	sub	sp, #28
 8025b9c:	af00      	add	r7, sp, #0
 8025b9e:	60f8      	str	r0, [r7, #12]
 8025ba0:	60b9      	str	r1, [r7, #8]
 8025ba2:	607a      	str	r2, [r7, #4]
 8025ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8025ba6:	68fb      	ldr	r3, [r7, #12]
 8025ba8:	689b      	ldr	r3, [r3, #8]
 8025baa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8025bac:	697b      	ldr	r3, [r7, #20]
 8025bae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8025bb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8025bb4:	683b      	ldr	r3, [r7, #0]
 8025bb6:	021a      	lsls	r2, r3, #8
 8025bb8:	687b      	ldr	r3, [r7, #4]
 8025bba:	431a      	orrs	r2, r3
 8025bbc:	68bb      	ldr	r3, [r7, #8]
 8025bbe:	4313      	orrs	r3, r2
 8025bc0:	697a      	ldr	r2, [r7, #20]
 8025bc2:	4313      	orrs	r3, r2
 8025bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8025bc6:	68fb      	ldr	r3, [r7, #12]
 8025bc8:	697a      	ldr	r2, [r7, #20]
 8025bca:	609a      	str	r2, [r3, #8]
}
 8025bcc:	bf00      	nop
 8025bce:	371c      	adds	r7, #28
 8025bd0:	46bd      	mov	sp, r7
 8025bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025bd6:	4770      	bx	lr

08025bd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8025bd8:	b480      	push	{r7}
 8025bda:	b087      	sub	sp, #28
 8025bdc:	af00      	add	r7, sp, #0
 8025bde:	60f8      	str	r0, [r7, #12]
 8025be0:	60b9      	str	r1, [r7, #8]
 8025be2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8025be4:	68bb      	ldr	r3, [r7, #8]
 8025be6:	f003 031f 	and.w	r3, r3, #31
 8025bea:	2201      	movs	r2, #1
 8025bec:	fa02 f303 	lsl.w	r3, r2, r3
 8025bf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8025bf2:	68fb      	ldr	r3, [r7, #12]
 8025bf4:	6a1a      	ldr	r2, [r3, #32]
 8025bf6:	697b      	ldr	r3, [r7, #20]
 8025bf8:	43db      	mvns	r3, r3
 8025bfa:	401a      	ands	r2, r3
 8025bfc:	68fb      	ldr	r3, [r7, #12]
 8025bfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8025c00:	68fb      	ldr	r3, [r7, #12]
 8025c02:	6a1a      	ldr	r2, [r3, #32]
 8025c04:	68bb      	ldr	r3, [r7, #8]
 8025c06:	f003 031f 	and.w	r3, r3, #31
 8025c0a:	6879      	ldr	r1, [r7, #4]
 8025c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8025c10:	431a      	orrs	r2, r3
 8025c12:	68fb      	ldr	r3, [r7, #12]
 8025c14:	621a      	str	r2, [r3, #32]
}
 8025c16:	bf00      	nop
 8025c18:	371c      	adds	r7, #28
 8025c1a:	46bd      	mov	sp, r7
 8025c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025c20:	4770      	bx	lr
	...

08025c24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8025c24:	b480      	push	{r7}
 8025c26:	b085      	sub	sp, #20
 8025c28:	af00      	add	r7, sp, #0
 8025c2a:	6078      	str	r0, [r7, #4]
 8025c2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8025c2e:	687b      	ldr	r3, [r7, #4]
 8025c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8025c34:	2b01      	cmp	r3, #1
 8025c36:	d101      	bne.n	8025c3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8025c38:	2302      	movs	r3, #2
 8025c3a:	e05a      	b.n	8025cf2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8025c3c:	687b      	ldr	r3, [r7, #4]
 8025c3e:	2201      	movs	r2, #1
 8025c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8025c44:	687b      	ldr	r3, [r7, #4]
 8025c46:	2202      	movs	r2, #2
 8025c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8025c4c:	687b      	ldr	r3, [r7, #4]
 8025c4e:	681b      	ldr	r3, [r3, #0]
 8025c50:	685b      	ldr	r3, [r3, #4]
 8025c52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8025c54:	687b      	ldr	r3, [r7, #4]
 8025c56:	681b      	ldr	r3, [r3, #0]
 8025c58:	689b      	ldr	r3, [r3, #8]
 8025c5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8025c5c:	68fb      	ldr	r3, [r7, #12]
 8025c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8025c62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8025c64:	683b      	ldr	r3, [r7, #0]
 8025c66:	681b      	ldr	r3, [r3, #0]
 8025c68:	68fa      	ldr	r2, [r7, #12]
 8025c6a:	4313      	orrs	r3, r2
 8025c6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8025c6e:	687b      	ldr	r3, [r7, #4]
 8025c70:	681b      	ldr	r3, [r3, #0]
 8025c72:	68fa      	ldr	r2, [r7, #12]
 8025c74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8025c76:	687b      	ldr	r3, [r7, #4]
 8025c78:	681b      	ldr	r3, [r3, #0]
 8025c7a:	4a21      	ldr	r2, [pc, #132]	; (8025d00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8025c7c:	4293      	cmp	r3, r2
 8025c7e:	d022      	beq.n	8025cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8025c80:	687b      	ldr	r3, [r7, #4]
 8025c82:	681b      	ldr	r3, [r3, #0]
 8025c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8025c88:	d01d      	beq.n	8025cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8025c8a:	687b      	ldr	r3, [r7, #4]
 8025c8c:	681b      	ldr	r3, [r3, #0]
 8025c8e:	4a1d      	ldr	r2, [pc, #116]	; (8025d04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8025c90:	4293      	cmp	r3, r2
 8025c92:	d018      	beq.n	8025cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8025c94:	687b      	ldr	r3, [r7, #4]
 8025c96:	681b      	ldr	r3, [r3, #0]
 8025c98:	4a1b      	ldr	r2, [pc, #108]	; (8025d08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8025c9a:	4293      	cmp	r3, r2
 8025c9c:	d013      	beq.n	8025cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8025c9e:	687b      	ldr	r3, [r7, #4]
 8025ca0:	681b      	ldr	r3, [r3, #0]
 8025ca2:	4a1a      	ldr	r2, [pc, #104]	; (8025d0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8025ca4:	4293      	cmp	r3, r2
 8025ca6:	d00e      	beq.n	8025cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8025ca8:	687b      	ldr	r3, [r7, #4]
 8025caa:	681b      	ldr	r3, [r3, #0]
 8025cac:	4a18      	ldr	r2, [pc, #96]	; (8025d10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8025cae:	4293      	cmp	r3, r2
 8025cb0:	d009      	beq.n	8025cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8025cb2:	687b      	ldr	r3, [r7, #4]
 8025cb4:	681b      	ldr	r3, [r3, #0]
 8025cb6:	4a17      	ldr	r2, [pc, #92]	; (8025d14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8025cb8:	4293      	cmp	r3, r2
 8025cba:	d004      	beq.n	8025cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8025cbc:	687b      	ldr	r3, [r7, #4]
 8025cbe:	681b      	ldr	r3, [r3, #0]
 8025cc0:	4a15      	ldr	r2, [pc, #84]	; (8025d18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8025cc2:	4293      	cmp	r3, r2
 8025cc4:	d10c      	bne.n	8025ce0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8025cc6:	68bb      	ldr	r3, [r7, #8]
 8025cc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8025ccc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8025cce:	683b      	ldr	r3, [r7, #0]
 8025cd0:	685b      	ldr	r3, [r3, #4]
 8025cd2:	68ba      	ldr	r2, [r7, #8]
 8025cd4:	4313      	orrs	r3, r2
 8025cd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8025cd8:	687b      	ldr	r3, [r7, #4]
 8025cda:	681b      	ldr	r3, [r3, #0]
 8025cdc:	68ba      	ldr	r2, [r7, #8]
 8025cde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8025ce0:	687b      	ldr	r3, [r7, #4]
 8025ce2:	2201      	movs	r2, #1
 8025ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8025ce8:	687b      	ldr	r3, [r7, #4]
 8025cea:	2200      	movs	r2, #0
 8025cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8025cf0:	2300      	movs	r3, #0
}
 8025cf2:	4618      	mov	r0, r3
 8025cf4:	3714      	adds	r7, #20
 8025cf6:	46bd      	mov	sp, r7
 8025cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025cfc:	4770      	bx	lr
 8025cfe:	bf00      	nop
 8025d00:	40010000 	.word	0x40010000
 8025d04:	40000400 	.word	0x40000400
 8025d08:	40000800 	.word	0x40000800
 8025d0c:	40000c00 	.word	0x40000c00
 8025d10:	40010400 	.word	0x40010400
 8025d14:	40014000 	.word	0x40014000
 8025d18:	40001800 	.word	0x40001800

08025d1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8025d1c:	b480      	push	{r7}
 8025d1e:	b085      	sub	sp, #20
 8025d20:	af00      	add	r7, sp, #0
 8025d22:	6078      	str	r0, [r7, #4]
 8025d24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8025d26:	2300      	movs	r3, #0
 8025d28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8025d2a:	687b      	ldr	r3, [r7, #4]
 8025d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8025d30:	2b01      	cmp	r3, #1
 8025d32:	d101      	bne.n	8025d38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8025d34:	2302      	movs	r3, #2
 8025d36:	e03d      	b.n	8025db4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8025d38:	687b      	ldr	r3, [r7, #4]
 8025d3a:	2201      	movs	r2, #1
 8025d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8025d40:	68fb      	ldr	r3, [r7, #12]
 8025d42:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8025d46:	683b      	ldr	r3, [r7, #0]
 8025d48:	68db      	ldr	r3, [r3, #12]
 8025d4a:	4313      	orrs	r3, r2
 8025d4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8025d4e:	68fb      	ldr	r3, [r7, #12]
 8025d50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8025d54:	683b      	ldr	r3, [r7, #0]
 8025d56:	689b      	ldr	r3, [r3, #8]
 8025d58:	4313      	orrs	r3, r2
 8025d5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8025d5c:	68fb      	ldr	r3, [r7, #12]
 8025d5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8025d62:	683b      	ldr	r3, [r7, #0]
 8025d64:	685b      	ldr	r3, [r3, #4]
 8025d66:	4313      	orrs	r3, r2
 8025d68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8025d6a:	68fb      	ldr	r3, [r7, #12]
 8025d6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8025d70:	683b      	ldr	r3, [r7, #0]
 8025d72:	681b      	ldr	r3, [r3, #0]
 8025d74:	4313      	orrs	r3, r2
 8025d76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8025d78:	68fb      	ldr	r3, [r7, #12]
 8025d7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8025d7e:	683b      	ldr	r3, [r7, #0]
 8025d80:	691b      	ldr	r3, [r3, #16]
 8025d82:	4313      	orrs	r3, r2
 8025d84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8025d86:	68fb      	ldr	r3, [r7, #12]
 8025d88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8025d8c:	683b      	ldr	r3, [r7, #0]
 8025d8e:	695b      	ldr	r3, [r3, #20]
 8025d90:	4313      	orrs	r3, r2
 8025d92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8025d94:	68fb      	ldr	r3, [r7, #12]
 8025d96:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8025d9a:	683b      	ldr	r3, [r7, #0]
 8025d9c:	69db      	ldr	r3, [r3, #28]
 8025d9e:	4313      	orrs	r3, r2
 8025da0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8025da2:	687b      	ldr	r3, [r7, #4]
 8025da4:	681b      	ldr	r3, [r3, #0]
 8025da6:	68fa      	ldr	r2, [r7, #12]
 8025da8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8025daa:	687b      	ldr	r3, [r7, #4]
 8025dac:	2200      	movs	r2, #0
 8025dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8025db2:	2300      	movs	r3, #0
}
 8025db4:	4618      	mov	r0, r3
 8025db6:	3714      	adds	r7, #20
 8025db8:	46bd      	mov	sp, r7
 8025dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025dbe:	4770      	bx	lr

08025dc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8025dc0:	b480      	push	{r7}
 8025dc2:	b083      	sub	sp, #12
 8025dc4:	af00      	add	r7, sp, #0
 8025dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8025dc8:	bf00      	nop
 8025dca:	370c      	adds	r7, #12
 8025dcc:	46bd      	mov	sp, r7
 8025dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025dd2:	4770      	bx	lr

08025dd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8025dd4:	b480      	push	{r7}
 8025dd6:	b083      	sub	sp, #12
 8025dd8:	af00      	add	r7, sp, #0
 8025dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8025ddc:	bf00      	nop
 8025dde:	370c      	adds	r7, #12
 8025de0:	46bd      	mov	sp, r7
 8025de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025de6:	4770      	bx	lr

08025de8 <__errno>:
 8025de8:	4b01      	ldr	r3, [pc, #4]	; (8025df0 <__errno+0x8>)
 8025dea:	6818      	ldr	r0, [r3, #0]
 8025dec:	4770      	bx	lr
 8025dee:	bf00      	nop
 8025df0:	2000000c 	.word	0x2000000c

08025df4 <__libc_init_array>:
 8025df4:	b570      	push	{r4, r5, r6, lr}
 8025df6:	4e0d      	ldr	r6, [pc, #52]	; (8025e2c <__libc_init_array+0x38>)
 8025df8:	4c0d      	ldr	r4, [pc, #52]	; (8025e30 <__libc_init_array+0x3c>)
 8025dfa:	1ba4      	subs	r4, r4, r6
 8025dfc:	10a4      	asrs	r4, r4, #2
 8025dfe:	2500      	movs	r5, #0
 8025e00:	42a5      	cmp	r5, r4
 8025e02:	d109      	bne.n	8025e18 <__libc_init_array+0x24>
 8025e04:	4e0b      	ldr	r6, [pc, #44]	; (8025e34 <__libc_init_array+0x40>)
 8025e06:	4c0c      	ldr	r4, [pc, #48]	; (8025e38 <__libc_init_array+0x44>)
 8025e08:	f001 fd46 	bl	8027898 <_init>
 8025e0c:	1ba4      	subs	r4, r4, r6
 8025e0e:	10a4      	asrs	r4, r4, #2
 8025e10:	2500      	movs	r5, #0
 8025e12:	42a5      	cmp	r5, r4
 8025e14:	d105      	bne.n	8025e22 <__libc_init_array+0x2e>
 8025e16:	bd70      	pop	{r4, r5, r6, pc}
 8025e18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8025e1c:	4798      	blx	r3
 8025e1e:	3501      	adds	r5, #1
 8025e20:	e7ee      	b.n	8025e00 <__libc_init_array+0xc>
 8025e22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8025e26:	4798      	blx	r3
 8025e28:	3501      	adds	r5, #1
 8025e2a:	e7f2      	b.n	8025e12 <__libc_init_array+0x1e>
 8025e2c:	08027b60 	.word	0x08027b60
 8025e30:	08027b60 	.word	0x08027b60
 8025e34:	08027b60 	.word	0x08027b60
 8025e38:	08027b68 	.word	0x08027b68

08025e3c <memcpy>:
 8025e3c:	b510      	push	{r4, lr}
 8025e3e:	1e43      	subs	r3, r0, #1
 8025e40:	440a      	add	r2, r1
 8025e42:	4291      	cmp	r1, r2
 8025e44:	d100      	bne.n	8025e48 <memcpy+0xc>
 8025e46:	bd10      	pop	{r4, pc}
 8025e48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025e4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025e50:	e7f7      	b.n	8025e42 <memcpy+0x6>

08025e52 <memset>:
 8025e52:	4402      	add	r2, r0
 8025e54:	4603      	mov	r3, r0
 8025e56:	4293      	cmp	r3, r2
 8025e58:	d100      	bne.n	8025e5c <memset+0xa>
 8025e5a:	4770      	bx	lr
 8025e5c:	f803 1b01 	strb.w	r1, [r3], #1
 8025e60:	e7f9      	b.n	8025e56 <memset+0x4>

08025e62 <__cvt>:
 8025e62:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025e66:	ec55 4b10 	vmov	r4, r5, d0
 8025e6a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8025e6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8025e70:	2d00      	cmp	r5, #0
 8025e72:	460e      	mov	r6, r1
 8025e74:	4691      	mov	r9, r2
 8025e76:	4619      	mov	r1, r3
 8025e78:	bfb8      	it	lt
 8025e7a:	4622      	movlt	r2, r4
 8025e7c:	462b      	mov	r3, r5
 8025e7e:	f027 0720 	bic.w	r7, r7, #32
 8025e82:	bfbb      	ittet	lt
 8025e84:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8025e88:	461d      	movlt	r5, r3
 8025e8a:	2300      	movge	r3, #0
 8025e8c:	232d      	movlt	r3, #45	; 0x2d
 8025e8e:	bfb8      	it	lt
 8025e90:	4614      	movlt	r4, r2
 8025e92:	2f46      	cmp	r7, #70	; 0x46
 8025e94:	700b      	strb	r3, [r1, #0]
 8025e96:	d004      	beq.n	8025ea2 <__cvt+0x40>
 8025e98:	2f45      	cmp	r7, #69	; 0x45
 8025e9a:	d100      	bne.n	8025e9e <__cvt+0x3c>
 8025e9c:	3601      	adds	r6, #1
 8025e9e:	2102      	movs	r1, #2
 8025ea0:	e000      	b.n	8025ea4 <__cvt+0x42>
 8025ea2:	2103      	movs	r1, #3
 8025ea4:	ab03      	add	r3, sp, #12
 8025ea6:	9301      	str	r3, [sp, #4]
 8025ea8:	ab02      	add	r3, sp, #8
 8025eaa:	9300      	str	r3, [sp, #0]
 8025eac:	4632      	mov	r2, r6
 8025eae:	4653      	mov	r3, sl
 8025eb0:	ec45 4b10 	vmov	d0, r4, r5
 8025eb4:	f000 fbac 	bl	8026610 <_dtoa_r>
 8025eb8:	2f47      	cmp	r7, #71	; 0x47
 8025eba:	4680      	mov	r8, r0
 8025ebc:	d102      	bne.n	8025ec4 <__cvt+0x62>
 8025ebe:	f019 0f01 	tst.w	r9, #1
 8025ec2:	d026      	beq.n	8025f12 <__cvt+0xb0>
 8025ec4:	2f46      	cmp	r7, #70	; 0x46
 8025ec6:	eb08 0906 	add.w	r9, r8, r6
 8025eca:	d111      	bne.n	8025ef0 <__cvt+0x8e>
 8025ecc:	f898 3000 	ldrb.w	r3, [r8]
 8025ed0:	2b30      	cmp	r3, #48	; 0x30
 8025ed2:	d10a      	bne.n	8025eea <__cvt+0x88>
 8025ed4:	2200      	movs	r2, #0
 8025ed6:	2300      	movs	r3, #0
 8025ed8:	4620      	mov	r0, r4
 8025eda:	4629      	mov	r1, r5
 8025edc:	f7fa fcdc 	bl	8020898 <__aeabi_dcmpeq>
 8025ee0:	b918      	cbnz	r0, 8025eea <__cvt+0x88>
 8025ee2:	f1c6 0601 	rsb	r6, r6, #1
 8025ee6:	f8ca 6000 	str.w	r6, [sl]
 8025eea:	f8da 3000 	ldr.w	r3, [sl]
 8025eee:	4499      	add	r9, r3
 8025ef0:	2200      	movs	r2, #0
 8025ef2:	2300      	movs	r3, #0
 8025ef4:	4620      	mov	r0, r4
 8025ef6:	4629      	mov	r1, r5
 8025ef8:	f7fa fcce 	bl	8020898 <__aeabi_dcmpeq>
 8025efc:	b938      	cbnz	r0, 8025f0e <__cvt+0xac>
 8025efe:	2230      	movs	r2, #48	; 0x30
 8025f00:	9b03      	ldr	r3, [sp, #12]
 8025f02:	454b      	cmp	r3, r9
 8025f04:	d205      	bcs.n	8025f12 <__cvt+0xb0>
 8025f06:	1c59      	adds	r1, r3, #1
 8025f08:	9103      	str	r1, [sp, #12]
 8025f0a:	701a      	strb	r2, [r3, #0]
 8025f0c:	e7f8      	b.n	8025f00 <__cvt+0x9e>
 8025f0e:	f8cd 900c 	str.w	r9, [sp, #12]
 8025f12:	9b03      	ldr	r3, [sp, #12]
 8025f14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025f16:	eba3 0308 	sub.w	r3, r3, r8
 8025f1a:	4640      	mov	r0, r8
 8025f1c:	6013      	str	r3, [r2, #0]
 8025f1e:	b004      	add	sp, #16
 8025f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08025f24 <__exponent>:
 8025f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025f26:	2900      	cmp	r1, #0
 8025f28:	4604      	mov	r4, r0
 8025f2a:	bfba      	itte	lt
 8025f2c:	4249      	neglt	r1, r1
 8025f2e:	232d      	movlt	r3, #45	; 0x2d
 8025f30:	232b      	movge	r3, #43	; 0x2b
 8025f32:	2909      	cmp	r1, #9
 8025f34:	f804 2b02 	strb.w	r2, [r4], #2
 8025f38:	7043      	strb	r3, [r0, #1]
 8025f3a:	dd20      	ble.n	8025f7e <__exponent+0x5a>
 8025f3c:	f10d 0307 	add.w	r3, sp, #7
 8025f40:	461f      	mov	r7, r3
 8025f42:	260a      	movs	r6, #10
 8025f44:	fb91 f5f6 	sdiv	r5, r1, r6
 8025f48:	fb06 1115 	mls	r1, r6, r5, r1
 8025f4c:	3130      	adds	r1, #48	; 0x30
 8025f4e:	2d09      	cmp	r5, #9
 8025f50:	f803 1c01 	strb.w	r1, [r3, #-1]
 8025f54:	f103 32ff 	add.w	r2, r3, #4294967295
 8025f58:	4629      	mov	r1, r5
 8025f5a:	dc09      	bgt.n	8025f70 <__exponent+0x4c>
 8025f5c:	3130      	adds	r1, #48	; 0x30
 8025f5e:	3b02      	subs	r3, #2
 8025f60:	f802 1c01 	strb.w	r1, [r2, #-1]
 8025f64:	42bb      	cmp	r3, r7
 8025f66:	4622      	mov	r2, r4
 8025f68:	d304      	bcc.n	8025f74 <__exponent+0x50>
 8025f6a:	1a10      	subs	r0, r2, r0
 8025f6c:	b003      	add	sp, #12
 8025f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025f70:	4613      	mov	r3, r2
 8025f72:	e7e7      	b.n	8025f44 <__exponent+0x20>
 8025f74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025f78:	f804 2b01 	strb.w	r2, [r4], #1
 8025f7c:	e7f2      	b.n	8025f64 <__exponent+0x40>
 8025f7e:	2330      	movs	r3, #48	; 0x30
 8025f80:	4419      	add	r1, r3
 8025f82:	7083      	strb	r3, [r0, #2]
 8025f84:	1d02      	adds	r2, r0, #4
 8025f86:	70c1      	strb	r1, [r0, #3]
 8025f88:	e7ef      	b.n	8025f6a <__exponent+0x46>
	...

08025f8c <_printf_float>:
 8025f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f90:	b08d      	sub	sp, #52	; 0x34
 8025f92:	460c      	mov	r4, r1
 8025f94:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8025f98:	4616      	mov	r6, r2
 8025f9a:	461f      	mov	r7, r3
 8025f9c:	4605      	mov	r5, r0
 8025f9e:	f001 f8ef 	bl	8027180 <_localeconv_r>
 8025fa2:	6803      	ldr	r3, [r0, #0]
 8025fa4:	9304      	str	r3, [sp, #16]
 8025fa6:	4618      	mov	r0, r3
 8025fa8:	f7fa f84a 	bl	8020040 <strlen>
 8025fac:	2300      	movs	r3, #0
 8025fae:	930a      	str	r3, [sp, #40]	; 0x28
 8025fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8025fb4:	9005      	str	r0, [sp, #20]
 8025fb6:	3307      	adds	r3, #7
 8025fb8:	f023 0307 	bic.w	r3, r3, #7
 8025fbc:	f103 0208 	add.w	r2, r3, #8
 8025fc0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8025fc4:	f8d4 b000 	ldr.w	fp, [r4]
 8025fc8:	f8c8 2000 	str.w	r2, [r8]
 8025fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025fd0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8025fd4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8025fd8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8025fdc:	9307      	str	r3, [sp, #28]
 8025fde:	f8cd 8018 	str.w	r8, [sp, #24]
 8025fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8025fe6:	4ba7      	ldr	r3, [pc, #668]	; (8026284 <_printf_float+0x2f8>)
 8025fe8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8025fec:	f7fa fc86 	bl	80208fc <__aeabi_dcmpun>
 8025ff0:	bb70      	cbnz	r0, 8026050 <_printf_float+0xc4>
 8025ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8025ff6:	4ba3      	ldr	r3, [pc, #652]	; (8026284 <_printf_float+0x2f8>)
 8025ff8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8025ffc:	f7fa fc60 	bl	80208c0 <__aeabi_dcmple>
 8026000:	bb30      	cbnz	r0, 8026050 <_printf_float+0xc4>
 8026002:	2200      	movs	r2, #0
 8026004:	2300      	movs	r3, #0
 8026006:	4640      	mov	r0, r8
 8026008:	4649      	mov	r1, r9
 802600a:	f7fa fc4f 	bl	80208ac <__aeabi_dcmplt>
 802600e:	b110      	cbz	r0, 8026016 <_printf_float+0x8a>
 8026010:	232d      	movs	r3, #45	; 0x2d
 8026012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026016:	4a9c      	ldr	r2, [pc, #624]	; (8026288 <_printf_float+0x2fc>)
 8026018:	4b9c      	ldr	r3, [pc, #624]	; (802628c <_printf_float+0x300>)
 802601a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 802601e:	bf8c      	ite	hi
 8026020:	4690      	movhi	r8, r2
 8026022:	4698      	movls	r8, r3
 8026024:	2303      	movs	r3, #3
 8026026:	f02b 0204 	bic.w	r2, fp, #4
 802602a:	6123      	str	r3, [r4, #16]
 802602c:	6022      	str	r2, [r4, #0]
 802602e:	f04f 0900 	mov.w	r9, #0
 8026032:	9700      	str	r7, [sp, #0]
 8026034:	4633      	mov	r3, r6
 8026036:	aa0b      	add	r2, sp, #44	; 0x2c
 8026038:	4621      	mov	r1, r4
 802603a:	4628      	mov	r0, r5
 802603c:	f000 f9e6 	bl	802640c <_printf_common>
 8026040:	3001      	adds	r0, #1
 8026042:	f040 808d 	bne.w	8026160 <_printf_float+0x1d4>
 8026046:	f04f 30ff 	mov.w	r0, #4294967295
 802604a:	b00d      	add	sp, #52	; 0x34
 802604c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026050:	4642      	mov	r2, r8
 8026052:	464b      	mov	r3, r9
 8026054:	4640      	mov	r0, r8
 8026056:	4649      	mov	r1, r9
 8026058:	f7fa fc50 	bl	80208fc <__aeabi_dcmpun>
 802605c:	b110      	cbz	r0, 8026064 <_printf_float+0xd8>
 802605e:	4a8c      	ldr	r2, [pc, #560]	; (8026290 <_printf_float+0x304>)
 8026060:	4b8c      	ldr	r3, [pc, #560]	; (8026294 <_printf_float+0x308>)
 8026062:	e7da      	b.n	802601a <_printf_float+0x8e>
 8026064:	6861      	ldr	r1, [r4, #4]
 8026066:	1c4b      	adds	r3, r1, #1
 8026068:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 802606c:	a80a      	add	r0, sp, #40	; 0x28
 802606e:	d13e      	bne.n	80260ee <_printf_float+0x162>
 8026070:	2306      	movs	r3, #6
 8026072:	6063      	str	r3, [r4, #4]
 8026074:	2300      	movs	r3, #0
 8026076:	e9cd 0302 	strd	r0, r3, [sp, #8]
 802607a:	ab09      	add	r3, sp, #36	; 0x24
 802607c:	9300      	str	r3, [sp, #0]
 802607e:	ec49 8b10 	vmov	d0, r8, r9
 8026082:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8026086:	6022      	str	r2, [r4, #0]
 8026088:	f8cd a004 	str.w	sl, [sp, #4]
 802608c:	6861      	ldr	r1, [r4, #4]
 802608e:	4628      	mov	r0, r5
 8026090:	f7ff fee7 	bl	8025e62 <__cvt>
 8026094:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8026098:	2b47      	cmp	r3, #71	; 0x47
 802609a:	4680      	mov	r8, r0
 802609c:	d109      	bne.n	80260b2 <_printf_float+0x126>
 802609e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80260a0:	1cd8      	adds	r0, r3, #3
 80260a2:	db02      	blt.n	80260aa <_printf_float+0x11e>
 80260a4:	6862      	ldr	r2, [r4, #4]
 80260a6:	4293      	cmp	r3, r2
 80260a8:	dd47      	ble.n	802613a <_printf_float+0x1ae>
 80260aa:	f1aa 0a02 	sub.w	sl, sl, #2
 80260ae:	fa5f fa8a 	uxtb.w	sl, sl
 80260b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80260b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80260b8:	d824      	bhi.n	8026104 <_printf_float+0x178>
 80260ba:	3901      	subs	r1, #1
 80260bc:	4652      	mov	r2, sl
 80260be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80260c2:	9109      	str	r1, [sp, #36]	; 0x24
 80260c4:	f7ff ff2e 	bl	8025f24 <__exponent>
 80260c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80260ca:	1813      	adds	r3, r2, r0
 80260cc:	2a01      	cmp	r2, #1
 80260ce:	4681      	mov	r9, r0
 80260d0:	6123      	str	r3, [r4, #16]
 80260d2:	dc02      	bgt.n	80260da <_printf_float+0x14e>
 80260d4:	6822      	ldr	r2, [r4, #0]
 80260d6:	07d1      	lsls	r1, r2, #31
 80260d8:	d501      	bpl.n	80260de <_printf_float+0x152>
 80260da:	3301      	adds	r3, #1
 80260dc:	6123      	str	r3, [r4, #16]
 80260de:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80260e2:	2b00      	cmp	r3, #0
 80260e4:	d0a5      	beq.n	8026032 <_printf_float+0xa6>
 80260e6:	232d      	movs	r3, #45	; 0x2d
 80260e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80260ec:	e7a1      	b.n	8026032 <_printf_float+0xa6>
 80260ee:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80260f2:	f000 8177 	beq.w	80263e4 <_printf_float+0x458>
 80260f6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80260fa:	d1bb      	bne.n	8026074 <_printf_float+0xe8>
 80260fc:	2900      	cmp	r1, #0
 80260fe:	d1b9      	bne.n	8026074 <_printf_float+0xe8>
 8026100:	2301      	movs	r3, #1
 8026102:	e7b6      	b.n	8026072 <_printf_float+0xe6>
 8026104:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8026108:	d119      	bne.n	802613e <_printf_float+0x1b2>
 802610a:	2900      	cmp	r1, #0
 802610c:	6863      	ldr	r3, [r4, #4]
 802610e:	dd0c      	ble.n	802612a <_printf_float+0x19e>
 8026110:	6121      	str	r1, [r4, #16]
 8026112:	b913      	cbnz	r3, 802611a <_printf_float+0x18e>
 8026114:	6822      	ldr	r2, [r4, #0]
 8026116:	07d2      	lsls	r2, r2, #31
 8026118:	d502      	bpl.n	8026120 <_printf_float+0x194>
 802611a:	3301      	adds	r3, #1
 802611c:	440b      	add	r3, r1
 802611e:	6123      	str	r3, [r4, #16]
 8026120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026122:	65a3      	str	r3, [r4, #88]	; 0x58
 8026124:	f04f 0900 	mov.w	r9, #0
 8026128:	e7d9      	b.n	80260de <_printf_float+0x152>
 802612a:	b913      	cbnz	r3, 8026132 <_printf_float+0x1a6>
 802612c:	6822      	ldr	r2, [r4, #0]
 802612e:	07d0      	lsls	r0, r2, #31
 8026130:	d501      	bpl.n	8026136 <_printf_float+0x1aa>
 8026132:	3302      	adds	r3, #2
 8026134:	e7f3      	b.n	802611e <_printf_float+0x192>
 8026136:	2301      	movs	r3, #1
 8026138:	e7f1      	b.n	802611e <_printf_float+0x192>
 802613a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 802613e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8026142:	4293      	cmp	r3, r2
 8026144:	db05      	blt.n	8026152 <_printf_float+0x1c6>
 8026146:	6822      	ldr	r2, [r4, #0]
 8026148:	6123      	str	r3, [r4, #16]
 802614a:	07d1      	lsls	r1, r2, #31
 802614c:	d5e8      	bpl.n	8026120 <_printf_float+0x194>
 802614e:	3301      	adds	r3, #1
 8026150:	e7e5      	b.n	802611e <_printf_float+0x192>
 8026152:	2b00      	cmp	r3, #0
 8026154:	bfd4      	ite	le
 8026156:	f1c3 0302 	rsble	r3, r3, #2
 802615a:	2301      	movgt	r3, #1
 802615c:	4413      	add	r3, r2
 802615e:	e7de      	b.n	802611e <_printf_float+0x192>
 8026160:	6823      	ldr	r3, [r4, #0]
 8026162:	055a      	lsls	r2, r3, #21
 8026164:	d407      	bmi.n	8026176 <_printf_float+0x1ea>
 8026166:	6923      	ldr	r3, [r4, #16]
 8026168:	4642      	mov	r2, r8
 802616a:	4631      	mov	r1, r6
 802616c:	4628      	mov	r0, r5
 802616e:	47b8      	blx	r7
 8026170:	3001      	adds	r0, #1
 8026172:	d12b      	bne.n	80261cc <_printf_float+0x240>
 8026174:	e767      	b.n	8026046 <_printf_float+0xba>
 8026176:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 802617a:	f240 80dc 	bls.w	8026336 <_printf_float+0x3aa>
 802617e:	2200      	movs	r2, #0
 8026180:	2300      	movs	r3, #0
 8026182:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8026186:	f7fa fb87 	bl	8020898 <__aeabi_dcmpeq>
 802618a:	2800      	cmp	r0, #0
 802618c:	d033      	beq.n	80261f6 <_printf_float+0x26a>
 802618e:	2301      	movs	r3, #1
 8026190:	4a41      	ldr	r2, [pc, #260]	; (8026298 <_printf_float+0x30c>)
 8026192:	4631      	mov	r1, r6
 8026194:	4628      	mov	r0, r5
 8026196:	47b8      	blx	r7
 8026198:	3001      	adds	r0, #1
 802619a:	f43f af54 	beq.w	8026046 <_printf_float+0xba>
 802619e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80261a2:	429a      	cmp	r2, r3
 80261a4:	db02      	blt.n	80261ac <_printf_float+0x220>
 80261a6:	6823      	ldr	r3, [r4, #0]
 80261a8:	07d8      	lsls	r0, r3, #31
 80261aa:	d50f      	bpl.n	80261cc <_printf_float+0x240>
 80261ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80261b0:	4631      	mov	r1, r6
 80261b2:	4628      	mov	r0, r5
 80261b4:	47b8      	blx	r7
 80261b6:	3001      	adds	r0, #1
 80261b8:	f43f af45 	beq.w	8026046 <_printf_float+0xba>
 80261bc:	f04f 0800 	mov.w	r8, #0
 80261c0:	f104 091a 	add.w	r9, r4, #26
 80261c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80261c6:	3b01      	subs	r3, #1
 80261c8:	4543      	cmp	r3, r8
 80261ca:	dc09      	bgt.n	80261e0 <_printf_float+0x254>
 80261cc:	6823      	ldr	r3, [r4, #0]
 80261ce:	079b      	lsls	r3, r3, #30
 80261d0:	f100 8103 	bmi.w	80263da <_printf_float+0x44e>
 80261d4:	68e0      	ldr	r0, [r4, #12]
 80261d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80261d8:	4298      	cmp	r0, r3
 80261da:	bfb8      	it	lt
 80261dc:	4618      	movlt	r0, r3
 80261de:	e734      	b.n	802604a <_printf_float+0xbe>
 80261e0:	2301      	movs	r3, #1
 80261e2:	464a      	mov	r2, r9
 80261e4:	4631      	mov	r1, r6
 80261e6:	4628      	mov	r0, r5
 80261e8:	47b8      	blx	r7
 80261ea:	3001      	adds	r0, #1
 80261ec:	f43f af2b 	beq.w	8026046 <_printf_float+0xba>
 80261f0:	f108 0801 	add.w	r8, r8, #1
 80261f4:	e7e6      	b.n	80261c4 <_printf_float+0x238>
 80261f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80261f8:	2b00      	cmp	r3, #0
 80261fa:	dc2b      	bgt.n	8026254 <_printf_float+0x2c8>
 80261fc:	2301      	movs	r3, #1
 80261fe:	4a26      	ldr	r2, [pc, #152]	; (8026298 <_printf_float+0x30c>)
 8026200:	4631      	mov	r1, r6
 8026202:	4628      	mov	r0, r5
 8026204:	47b8      	blx	r7
 8026206:	3001      	adds	r0, #1
 8026208:	f43f af1d 	beq.w	8026046 <_printf_float+0xba>
 802620c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802620e:	b923      	cbnz	r3, 802621a <_printf_float+0x28e>
 8026210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026212:	b913      	cbnz	r3, 802621a <_printf_float+0x28e>
 8026214:	6823      	ldr	r3, [r4, #0]
 8026216:	07d9      	lsls	r1, r3, #31
 8026218:	d5d8      	bpl.n	80261cc <_printf_float+0x240>
 802621a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802621e:	4631      	mov	r1, r6
 8026220:	4628      	mov	r0, r5
 8026222:	47b8      	blx	r7
 8026224:	3001      	adds	r0, #1
 8026226:	f43f af0e 	beq.w	8026046 <_printf_float+0xba>
 802622a:	f04f 0900 	mov.w	r9, #0
 802622e:	f104 0a1a 	add.w	sl, r4, #26
 8026232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026234:	425b      	negs	r3, r3
 8026236:	454b      	cmp	r3, r9
 8026238:	dc01      	bgt.n	802623e <_printf_float+0x2b2>
 802623a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802623c:	e794      	b.n	8026168 <_printf_float+0x1dc>
 802623e:	2301      	movs	r3, #1
 8026240:	4652      	mov	r2, sl
 8026242:	4631      	mov	r1, r6
 8026244:	4628      	mov	r0, r5
 8026246:	47b8      	blx	r7
 8026248:	3001      	adds	r0, #1
 802624a:	f43f aefc 	beq.w	8026046 <_printf_float+0xba>
 802624e:	f109 0901 	add.w	r9, r9, #1
 8026252:	e7ee      	b.n	8026232 <_printf_float+0x2a6>
 8026254:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026256:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8026258:	429a      	cmp	r2, r3
 802625a:	bfa8      	it	ge
 802625c:	461a      	movge	r2, r3
 802625e:	2a00      	cmp	r2, #0
 8026260:	4691      	mov	r9, r2
 8026262:	dd07      	ble.n	8026274 <_printf_float+0x2e8>
 8026264:	4613      	mov	r3, r2
 8026266:	4631      	mov	r1, r6
 8026268:	4642      	mov	r2, r8
 802626a:	4628      	mov	r0, r5
 802626c:	47b8      	blx	r7
 802626e:	3001      	adds	r0, #1
 8026270:	f43f aee9 	beq.w	8026046 <_printf_float+0xba>
 8026274:	f104 031a 	add.w	r3, r4, #26
 8026278:	f04f 0b00 	mov.w	fp, #0
 802627c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8026280:	9306      	str	r3, [sp, #24]
 8026282:	e015      	b.n	80262b0 <_printf_float+0x324>
 8026284:	7fefffff 	.word	0x7fefffff
 8026288:	080278d4 	.word	0x080278d4
 802628c:	080278d0 	.word	0x080278d0
 8026290:	080278dc 	.word	0x080278dc
 8026294:	080278d8 	.word	0x080278d8
 8026298:	080278e0 	.word	0x080278e0
 802629c:	2301      	movs	r3, #1
 802629e:	9a06      	ldr	r2, [sp, #24]
 80262a0:	4631      	mov	r1, r6
 80262a2:	4628      	mov	r0, r5
 80262a4:	47b8      	blx	r7
 80262a6:	3001      	adds	r0, #1
 80262a8:	f43f aecd 	beq.w	8026046 <_printf_float+0xba>
 80262ac:	f10b 0b01 	add.w	fp, fp, #1
 80262b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80262b4:	ebaa 0309 	sub.w	r3, sl, r9
 80262b8:	455b      	cmp	r3, fp
 80262ba:	dcef      	bgt.n	802629c <_printf_float+0x310>
 80262bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80262c0:	429a      	cmp	r2, r3
 80262c2:	44d0      	add	r8, sl
 80262c4:	db15      	blt.n	80262f2 <_printf_float+0x366>
 80262c6:	6823      	ldr	r3, [r4, #0]
 80262c8:	07da      	lsls	r2, r3, #31
 80262ca:	d412      	bmi.n	80262f2 <_printf_float+0x366>
 80262cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80262ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80262d0:	eba3 020a 	sub.w	r2, r3, sl
 80262d4:	eba3 0a01 	sub.w	sl, r3, r1
 80262d8:	4592      	cmp	sl, r2
 80262da:	bfa8      	it	ge
 80262dc:	4692      	movge	sl, r2
 80262de:	f1ba 0f00 	cmp.w	sl, #0
 80262e2:	dc0e      	bgt.n	8026302 <_printf_float+0x376>
 80262e4:	f04f 0800 	mov.w	r8, #0
 80262e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80262ec:	f104 091a 	add.w	r9, r4, #26
 80262f0:	e019      	b.n	8026326 <_printf_float+0x39a>
 80262f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80262f6:	4631      	mov	r1, r6
 80262f8:	4628      	mov	r0, r5
 80262fa:	47b8      	blx	r7
 80262fc:	3001      	adds	r0, #1
 80262fe:	d1e5      	bne.n	80262cc <_printf_float+0x340>
 8026300:	e6a1      	b.n	8026046 <_printf_float+0xba>
 8026302:	4653      	mov	r3, sl
 8026304:	4642      	mov	r2, r8
 8026306:	4631      	mov	r1, r6
 8026308:	4628      	mov	r0, r5
 802630a:	47b8      	blx	r7
 802630c:	3001      	adds	r0, #1
 802630e:	d1e9      	bne.n	80262e4 <_printf_float+0x358>
 8026310:	e699      	b.n	8026046 <_printf_float+0xba>
 8026312:	2301      	movs	r3, #1
 8026314:	464a      	mov	r2, r9
 8026316:	4631      	mov	r1, r6
 8026318:	4628      	mov	r0, r5
 802631a:	47b8      	blx	r7
 802631c:	3001      	adds	r0, #1
 802631e:	f43f ae92 	beq.w	8026046 <_printf_float+0xba>
 8026322:	f108 0801 	add.w	r8, r8, #1
 8026326:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802632a:	1a9b      	subs	r3, r3, r2
 802632c:	eba3 030a 	sub.w	r3, r3, sl
 8026330:	4543      	cmp	r3, r8
 8026332:	dcee      	bgt.n	8026312 <_printf_float+0x386>
 8026334:	e74a      	b.n	80261cc <_printf_float+0x240>
 8026336:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026338:	2a01      	cmp	r2, #1
 802633a:	dc01      	bgt.n	8026340 <_printf_float+0x3b4>
 802633c:	07db      	lsls	r3, r3, #31
 802633e:	d53a      	bpl.n	80263b6 <_printf_float+0x42a>
 8026340:	2301      	movs	r3, #1
 8026342:	4642      	mov	r2, r8
 8026344:	4631      	mov	r1, r6
 8026346:	4628      	mov	r0, r5
 8026348:	47b8      	blx	r7
 802634a:	3001      	adds	r0, #1
 802634c:	f43f ae7b 	beq.w	8026046 <_printf_float+0xba>
 8026350:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8026354:	4631      	mov	r1, r6
 8026356:	4628      	mov	r0, r5
 8026358:	47b8      	blx	r7
 802635a:	3001      	adds	r0, #1
 802635c:	f108 0801 	add.w	r8, r8, #1
 8026360:	f43f ae71 	beq.w	8026046 <_printf_float+0xba>
 8026364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026366:	2200      	movs	r2, #0
 8026368:	f103 3aff 	add.w	sl, r3, #4294967295
 802636c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8026370:	2300      	movs	r3, #0
 8026372:	f7fa fa91 	bl	8020898 <__aeabi_dcmpeq>
 8026376:	b9c8      	cbnz	r0, 80263ac <_printf_float+0x420>
 8026378:	4653      	mov	r3, sl
 802637a:	4642      	mov	r2, r8
 802637c:	4631      	mov	r1, r6
 802637e:	4628      	mov	r0, r5
 8026380:	47b8      	blx	r7
 8026382:	3001      	adds	r0, #1
 8026384:	d10e      	bne.n	80263a4 <_printf_float+0x418>
 8026386:	e65e      	b.n	8026046 <_printf_float+0xba>
 8026388:	2301      	movs	r3, #1
 802638a:	4652      	mov	r2, sl
 802638c:	4631      	mov	r1, r6
 802638e:	4628      	mov	r0, r5
 8026390:	47b8      	blx	r7
 8026392:	3001      	adds	r0, #1
 8026394:	f43f ae57 	beq.w	8026046 <_printf_float+0xba>
 8026398:	f108 0801 	add.w	r8, r8, #1
 802639c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802639e:	3b01      	subs	r3, #1
 80263a0:	4543      	cmp	r3, r8
 80263a2:	dcf1      	bgt.n	8026388 <_printf_float+0x3fc>
 80263a4:	464b      	mov	r3, r9
 80263a6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80263aa:	e6de      	b.n	802616a <_printf_float+0x1de>
 80263ac:	f04f 0800 	mov.w	r8, #0
 80263b0:	f104 0a1a 	add.w	sl, r4, #26
 80263b4:	e7f2      	b.n	802639c <_printf_float+0x410>
 80263b6:	2301      	movs	r3, #1
 80263b8:	e7df      	b.n	802637a <_printf_float+0x3ee>
 80263ba:	2301      	movs	r3, #1
 80263bc:	464a      	mov	r2, r9
 80263be:	4631      	mov	r1, r6
 80263c0:	4628      	mov	r0, r5
 80263c2:	47b8      	blx	r7
 80263c4:	3001      	adds	r0, #1
 80263c6:	f43f ae3e 	beq.w	8026046 <_printf_float+0xba>
 80263ca:	f108 0801 	add.w	r8, r8, #1
 80263ce:	68e3      	ldr	r3, [r4, #12]
 80263d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80263d2:	1a9b      	subs	r3, r3, r2
 80263d4:	4543      	cmp	r3, r8
 80263d6:	dcf0      	bgt.n	80263ba <_printf_float+0x42e>
 80263d8:	e6fc      	b.n	80261d4 <_printf_float+0x248>
 80263da:	f04f 0800 	mov.w	r8, #0
 80263de:	f104 0919 	add.w	r9, r4, #25
 80263e2:	e7f4      	b.n	80263ce <_printf_float+0x442>
 80263e4:	2900      	cmp	r1, #0
 80263e6:	f43f ae8b 	beq.w	8026100 <_printf_float+0x174>
 80263ea:	2300      	movs	r3, #0
 80263ec:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80263f0:	ab09      	add	r3, sp, #36	; 0x24
 80263f2:	9300      	str	r3, [sp, #0]
 80263f4:	ec49 8b10 	vmov	d0, r8, r9
 80263f8:	6022      	str	r2, [r4, #0]
 80263fa:	f8cd a004 	str.w	sl, [sp, #4]
 80263fe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8026402:	4628      	mov	r0, r5
 8026404:	f7ff fd2d 	bl	8025e62 <__cvt>
 8026408:	4680      	mov	r8, r0
 802640a:	e648      	b.n	802609e <_printf_float+0x112>

0802640c <_printf_common>:
 802640c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026410:	4691      	mov	r9, r2
 8026412:	461f      	mov	r7, r3
 8026414:	688a      	ldr	r2, [r1, #8]
 8026416:	690b      	ldr	r3, [r1, #16]
 8026418:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802641c:	4293      	cmp	r3, r2
 802641e:	bfb8      	it	lt
 8026420:	4613      	movlt	r3, r2
 8026422:	f8c9 3000 	str.w	r3, [r9]
 8026426:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802642a:	4606      	mov	r6, r0
 802642c:	460c      	mov	r4, r1
 802642e:	b112      	cbz	r2, 8026436 <_printf_common+0x2a>
 8026430:	3301      	adds	r3, #1
 8026432:	f8c9 3000 	str.w	r3, [r9]
 8026436:	6823      	ldr	r3, [r4, #0]
 8026438:	0699      	lsls	r1, r3, #26
 802643a:	bf42      	ittt	mi
 802643c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8026440:	3302      	addmi	r3, #2
 8026442:	f8c9 3000 	strmi.w	r3, [r9]
 8026446:	6825      	ldr	r5, [r4, #0]
 8026448:	f015 0506 	ands.w	r5, r5, #6
 802644c:	d107      	bne.n	802645e <_printf_common+0x52>
 802644e:	f104 0a19 	add.w	sl, r4, #25
 8026452:	68e3      	ldr	r3, [r4, #12]
 8026454:	f8d9 2000 	ldr.w	r2, [r9]
 8026458:	1a9b      	subs	r3, r3, r2
 802645a:	42ab      	cmp	r3, r5
 802645c:	dc28      	bgt.n	80264b0 <_printf_common+0xa4>
 802645e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8026462:	6822      	ldr	r2, [r4, #0]
 8026464:	3300      	adds	r3, #0
 8026466:	bf18      	it	ne
 8026468:	2301      	movne	r3, #1
 802646a:	0692      	lsls	r2, r2, #26
 802646c:	d42d      	bmi.n	80264ca <_printf_common+0xbe>
 802646e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026472:	4639      	mov	r1, r7
 8026474:	4630      	mov	r0, r6
 8026476:	47c0      	blx	r8
 8026478:	3001      	adds	r0, #1
 802647a:	d020      	beq.n	80264be <_printf_common+0xb2>
 802647c:	6823      	ldr	r3, [r4, #0]
 802647e:	68e5      	ldr	r5, [r4, #12]
 8026480:	f8d9 2000 	ldr.w	r2, [r9]
 8026484:	f003 0306 	and.w	r3, r3, #6
 8026488:	2b04      	cmp	r3, #4
 802648a:	bf08      	it	eq
 802648c:	1aad      	subeq	r5, r5, r2
 802648e:	68a3      	ldr	r3, [r4, #8]
 8026490:	6922      	ldr	r2, [r4, #16]
 8026492:	bf0c      	ite	eq
 8026494:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026498:	2500      	movne	r5, #0
 802649a:	4293      	cmp	r3, r2
 802649c:	bfc4      	itt	gt
 802649e:	1a9b      	subgt	r3, r3, r2
 80264a0:	18ed      	addgt	r5, r5, r3
 80264a2:	f04f 0900 	mov.w	r9, #0
 80264a6:	341a      	adds	r4, #26
 80264a8:	454d      	cmp	r5, r9
 80264aa:	d11a      	bne.n	80264e2 <_printf_common+0xd6>
 80264ac:	2000      	movs	r0, #0
 80264ae:	e008      	b.n	80264c2 <_printf_common+0xb6>
 80264b0:	2301      	movs	r3, #1
 80264b2:	4652      	mov	r2, sl
 80264b4:	4639      	mov	r1, r7
 80264b6:	4630      	mov	r0, r6
 80264b8:	47c0      	blx	r8
 80264ba:	3001      	adds	r0, #1
 80264bc:	d103      	bne.n	80264c6 <_printf_common+0xba>
 80264be:	f04f 30ff 	mov.w	r0, #4294967295
 80264c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80264c6:	3501      	adds	r5, #1
 80264c8:	e7c3      	b.n	8026452 <_printf_common+0x46>
 80264ca:	18e1      	adds	r1, r4, r3
 80264cc:	1c5a      	adds	r2, r3, #1
 80264ce:	2030      	movs	r0, #48	; 0x30
 80264d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80264d4:	4422      	add	r2, r4
 80264d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80264da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80264de:	3302      	adds	r3, #2
 80264e0:	e7c5      	b.n	802646e <_printf_common+0x62>
 80264e2:	2301      	movs	r3, #1
 80264e4:	4622      	mov	r2, r4
 80264e6:	4639      	mov	r1, r7
 80264e8:	4630      	mov	r0, r6
 80264ea:	47c0      	blx	r8
 80264ec:	3001      	adds	r0, #1
 80264ee:	d0e6      	beq.n	80264be <_printf_common+0xb2>
 80264f0:	f109 0901 	add.w	r9, r9, #1
 80264f4:	e7d8      	b.n	80264a8 <_printf_common+0x9c>

080264f6 <quorem>:
 80264f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80264fa:	6903      	ldr	r3, [r0, #16]
 80264fc:	690c      	ldr	r4, [r1, #16]
 80264fe:	42a3      	cmp	r3, r4
 8026500:	4680      	mov	r8, r0
 8026502:	f2c0 8082 	blt.w	802660a <quorem+0x114>
 8026506:	3c01      	subs	r4, #1
 8026508:	f101 0714 	add.w	r7, r1, #20
 802650c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8026510:	f100 0614 	add.w	r6, r0, #20
 8026514:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8026518:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 802651c:	eb06 030c 	add.w	r3, r6, ip
 8026520:	3501      	adds	r5, #1
 8026522:	eb07 090c 	add.w	r9, r7, ip
 8026526:	9301      	str	r3, [sp, #4]
 8026528:	fbb0 f5f5 	udiv	r5, r0, r5
 802652c:	b395      	cbz	r5, 8026594 <quorem+0x9e>
 802652e:	f04f 0a00 	mov.w	sl, #0
 8026532:	4638      	mov	r0, r7
 8026534:	46b6      	mov	lr, r6
 8026536:	46d3      	mov	fp, sl
 8026538:	f850 2b04 	ldr.w	r2, [r0], #4
 802653c:	b293      	uxth	r3, r2
 802653e:	fb05 a303 	mla	r3, r5, r3, sl
 8026542:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8026546:	b29b      	uxth	r3, r3
 8026548:	ebab 0303 	sub.w	r3, fp, r3
 802654c:	0c12      	lsrs	r2, r2, #16
 802654e:	f8de b000 	ldr.w	fp, [lr]
 8026552:	fb05 a202 	mla	r2, r5, r2, sl
 8026556:	fa13 f38b 	uxtah	r3, r3, fp
 802655a:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 802655e:	fa1f fb82 	uxth.w	fp, r2
 8026562:	f8de 2000 	ldr.w	r2, [lr]
 8026566:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 802656a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802656e:	b29b      	uxth	r3, r3
 8026570:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8026574:	4581      	cmp	r9, r0
 8026576:	ea4f 4b22 	mov.w	fp, r2, asr #16
 802657a:	f84e 3b04 	str.w	r3, [lr], #4
 802657e:	d2db      	bcs.n	8026538 <quorem+0x42>
 8026580:	f856 300c 	ldr.w	r3, [r6, ip]
 8026584:	b933      	cbnz	r3, 8026594 <quorem+0x9e>
 8026586:	9b01      	ldr	r3, [sp, #4]
 8026588:	3b04      	subs	r3, #4
 802658a:	429e      	cmp	r6, r3
 802658c:	461a      	mov	r2, r3
 802658e:	d330      	bcc.n	80265f2 <quorem+0xfc>
 8026590:	f8c8 4010 	str.w	r4, [r8, #16]
 8026594:	4640      	mov	r0, r8
 8026596:	f001 f81f 	bl	80275d8 <__mcmp>
 802659a:	2800      	cmp	r0, #0
 802659c:	db25      	blt.n	80265ea <quorem+0xf4>
 802659e:	3501      	adds	r5, #1
 80265a0:	4630      	mov	r0, r6
 80265a2:	f04f 0c00 	mov.w	ip, #0
 80265a6:	f857 2b04 	ldr.w	r2, [r7], #4
 80265aa:	f8d0 e000 	ldr.w	lr, [r0]
 80265ae:	b293      	uxth	r3, r2
 80265b0:	ebac 0303 	sub.w	r3, ip, r3
 80265b4:	0c12      	lsrs	r2, r2, #16
 80265b6:	fa13 f38e 	uxtah	r3, r3, lr
 80265ba:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80265be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80265c2:	b29b      	uxth	r3, r3
 80265c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80265c8:	45b9      	cmp	r9, r7
 80265ca:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80265ce:	f840 3b04 	str.w	r3, [r0], #4
 80265d2:	d2e8      	bcs.n	80265a6 <quorem+0xb0>
 80265d4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80265d8:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80265dc:	b92a      	cbnz	r2, 80265ea <quorem+0xf4>
 80265de:	3b04      	subs	r3, #4
 80265e0:	429e      	cmp	r6, r3
 80265e2:	461a      	mov	r2, r3
 80265e4:	d30b      	bcc.n	80265fe <quorem+0x108>
 80265e6:	f8c8 4010 	str.w	r4, [r8, #16]
 80265ea:	4628      	mov	r0, r5
 80265ec:	b003      	add	sp, #12
 80265ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80265f2:	6812      	ldr	r2, [r2, #0]
 80265f4:	3b04      	subs	r3, #4
 80265f6:	2a00      	cmp	r2, #0
 80265f8:	d1ca      	bne.n	8026590 <quorem+0x9a>
 80265fa:	3c01      	subs	r4, #1
 80265fc:	e7c5      	b.n	802658a <quorem+0x94>
 80265fe:	6812      	ldr	r2, [r2, #0]
 8026600:	3b04      	subs	r3, #4
 8026602:	2a00      	cmp	r2, #0
 8026604:	d1ef      	bne.n	80265e6 <quorem+0xf0>
 8026606:	3c01      	subs	r4, #1
 8026608:	e7ea      	b.n	80265e0 <quorem+0xea>
 802660a:	2000      	movs	r0, #0
 802660c:	e7ee      	b.n	80265ec <quorem+0xf6>
	...

08026610 <_dtoa_r>:
 8026610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026614:	ec57 6b10 	vmov	r6, r7, d0
 8026618:	b097      	sub	sp, #92	; 0x5c
 802661a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802661c:	9106      	str	r1, [sp, #24]
 802661e:	4604      	mov	r4, r0
 8026620:	920b      	str	r2, [sp, #44]	; 0x2c
 8026622:	9312      	str	r3, [sp, #72]	; 0x48
 8026624:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8026628:	e9cd 6700 	strd	r6, r7, [sp]
 802662c:	b93d      	cbnz	r5, 802663e <_dtoa_r+0x2e>
 802662e:	2010      	movs	r0, #16
 8026630:	f000 fdb4 	bl	802719c <malloc>
 8026634:	6260      	str	r0, [r4, #36]	; 0x24
 8026636:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802663a:	6005      	str	r5, [r0, #0]
 802663c:	60c5      	str	r5, [r0, #12]
 802663e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026640:	6819      	ldr	r1, [r3, #0]
 8026642:	b151      	cbz	r1, 802665a <_dtoa_r+0x4a>
 8026644:	685a      	ldr	r2, [r3, #4]
 8026646:	604a      	str	r2, [r1, #4]
 8026648:	2301      	movs	r3, #1
 802664a:	4093      	lsls	r3, r2
 802664c:	608b      	str	r3, [r1, #8]
 802664e:	4620      	mov	r0, r4
 8026650:	f000 fde0 	bl	8027214 <_Bfree>
 8026654:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026656:	2200      	movs	r2, #0
 8026658:	601a      	str	r2, [r3, #0]
 802665a:	1e3b      	subs	r3, r7, #0
 802665c:	bfbb      	ittet	lt
 802665e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8026662:	9301      	strlt	r3, [sp, #4]
 8026664:	2300      	movge	r3, #0
 8026666:	2201      	movlt	r2, #1
 8026668:	bfac      	ite	ge
 802666a:	f8c8 3000 	strge.w	r3, [r8]
 802666e:	f8c8 2000 	strlt.w	r2, [r8]
 8026672:	4baf      	ldr	r3, [pc, #700]	; (8026930 <_dtoa_r+0x320>)
 8026674:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8026678:	ea33 0308 	bics.w	r3, r3, r8
 802667c:	d114      	bne.n	80266a8 <_dtoa_r+0x98>
 802667e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8026680:	f242 730f 	movw	r3, #9999	; 0x270f
 8026684:	6013      	str	r3, [r2, #0]
 8026686:	9b00      	ldr	r3, [sp, #0]
 8026688:	b923      	cbnz	r3, 8026694 <_dtoa_r+0x84>
 802668a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 802668e:	2800      	cmp	r0, #0
 8026690:	f000 8542 	beq.w	8027118 <_dtoa_r+0xb08>
 8026694:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026696:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8026944 <_dtoa_r+0x334>
 802669a:	2b00      	cmp	r3, #0
 802669c:	f000 8544 	beq.w	8027128 <_dtoa_r+0xb18>
 80266a0:	f10b 0303 	add.w	r3, fp, #3
 80266a4:	f000 bd3e 	b.w	8027124 <_dtoa_r+0xb14>
 80266a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80266ac:	2200      	movs	r2, #0
 80266ae:	2300      	movs	r3, #0
 80266b0:	4630      	mov	r0, r6
 80266b2:	4639      	mov	r1, r7
 80266b4:	f7fa f8f0 	bl	8020898 <__aeabi_dcmpeq>
 80266b8:	4681      	mov	r9, r0
 80266ba:	b168      	cbz	r0, 80266d8 <_dtoa_r+0xc8>
 80266bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80266be:	2301      	movs	r3, #1
 80266c0:	6013      	str	r3, [r2, #0]
 80266c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80266c4:	2b00      	cmp	r3, #0
 80266c6:	f000 8524 	beq.w	8027112 <_dtoa_r+0xb02>
 80266ca:	4b9a      	ldr	r3, [pc, #616]	; (8026934 <_dtoa_r+0x324>)
 80266cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80266ce:	f103 3bff 	add.w	fp, r3, #4294967295
 80266d2:	6013      	str	r3, [r2, #0]
 80266d4:	f000 bd28 	b.w	8027128 <_dtoa_r+0xb18>
 80266d8:	aa14      	add	r2, sp, #80	; 0x50
 80266da:	a915      	add	r1, sp, #84	; 0x54
 80266dc:	ec47 6b10 	vmov	d0, r6, r7
 80266e0:	4620      	mov	r0, r4
 80266e2:	f000 fff0 	bl	80276c6 <__d2b>
 80266e6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80266ea:	9004      	str	r0, [sp, #16]
 80266ec:	2d00      	cmp	r5, #0
 80266ee:	d07c      	beq.n	80267ea <_dtoa_r+0x1da>
 80266f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80266f4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80266f8:	46b2      	mov	sl, r6
 80266fa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80266fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8026702:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8026706:	2200      	movs	r2, #0
 8026708:	4b8b      	ldr	r3, [pc, #556]	; (8026938 <_dtoa_r+0x328>)
 802670a:	4650      	mov	r0, sl
 802670c:	4659      	mov	r1, fp
 802670e:	f7f9 fca3 	bl	8020058 <__aeabi_dsub>
 8026712:	a381      	add	r3, pc, #516	; (adr r3, 8026918 <_dtoa_r+0x308>)
 8026714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026718:	f7f9 fe56 	bl	80203c8 <__aeabi_dmul>
 802671c:	a380      	add	r3, pc, #512	; (adr r3, 8026920 <_dtoa_r+0x310>)
 802671e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026722:	f7f9 fc9b 	bl	802005c <__adddf3>
 8026726:	4606      	mov	r6, r0
 8026728:	4628      	mov	r0, r5
 802672a:	460f      	mov	r7, r1
 802672c:	f7f9 fde2 	bl	80202f4 <__aeabi_i2d>
 8026730:	a37d      	add	r3, pc, #500	; (adr r3, 8026928 <_dtoa_r+0x318>)
 8026732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026736:	f7f9 fe47 	bl	80203c8 <__aeabi_dmul>
 802673a:	4602      	mov	r2, r0
 802673c:	460b      	mov	r3, r1
 802673e:	4630      	mov	r0, r6
 8026740:	4639      	mov	r1, r7
 8026742:	f7f9 fc8b 	bl	802005c <__adddf3>
 8026746:	4606      	mov	r6, r0
 8026748:	460f      	mov	r7, r1
 802674a:	f7fa f8ed 	bl	8020928 <__aeabi_d2iz>
 802674e:	2200      	movs	r2, #0
 8026750:	4682      	mov	sl, r0
 8026752:	2300      	movs	r3, #0
 8026754:	4630      	mov	r0, r6
 8026756:	4639      	mov	r1, r7
 8026758:	f7fa f8a8 	bl	80208ac <__aeabi_dcmplt>
 802675c:	b148      	cbz	r0, 8026772 <_dtoa_r+0x162>
 802675e:	4650      	mov	r0, sl
 8026760:	f7f9 fdc8 	bl	80202f4 <__aeabi_i2d>
 8026764:	4632      	mov	r2, r6
 8026766:	463b      	mov	r3, r7
 8026768:	f7fa f896 	bl	8020898 <__aeabi_dcmpeq>
 802676c:	b908      	cbnz	r0, 8026772 <_dtoa_r+0x162>
 802676e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026772:	f1ba 0f16 	cmp.w	sl, #22
 8026776:	d859      	bhi.n	802682c <_dtoa_r+0x21c>
 8026778:	4970      	ldr	r1, [pc, #448]	; (802693c <_dtoa_r+0x32c>)
 802677a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 802677e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8026782:	e9d1 0100 	ldrd	r0, r1, [r1]
 8026786:	f7fa f8af 	bl	80208e8 <__aeabi_dcmpgt>
 802678a:	2800      	cmp	r0, #0
 802678c:	d050      	beq.n	8026830 <_dtoa_r+0x220>
 802678e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026792:	2300      	movs	r3, #0
 8026794:	930f      	str	r3, [sp, #60]	; 0x3c
 8026796:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8026798:	1b5d      	subs	r5, r3, r5
 802679a:	f1b5 0801 	subs.w	r8, r5, #1
 802679e:	bf49      	itett	mi
 80267a0:	f1c5 0301 	rsbmi	r3, r5, #1
 80267a4:	2300      	movpl	r3, #0
 80267a6:	9305      	strmi	r3, [sp, #20]
 80267a8:	f04f 0800 	movmi.w	r8, #0
 80267ac:	bf58      	it	pl
 80267ae:	9305      	strpl	r3, [sp, #20]
 80267b0:	f1ba 0f00 	cmp.w	sl, #0
 80267b4:	db3e      	blt.n	8026834 <_dtoa_r+0x224>
 80267b6:	2300      	movs	r3, #0
 80267b8:	44d0      	add	r8, sl
 80267ba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80267be:	9307      	str	r3, [sp, #28]
 80267c0:	9b06      	ldr	r3, [sp, #24]
 80267c2:	2b09      	cmp	r3, #9
 80267c4:	f200 8090 	bhi.w	80268e8 <_dtoa_r+0x2d8>
 80267c8:	2b05      	cmp	r3, #5
 80267ca:	bfc4      	itt	gt
 80267cc:	3b04      	subgt	r3, #4
 80267ce:	9306      	strgt	r3, [sp, #24]
 80267d0:	9b06      	ldr	r3, [sp, #24]
 80267d2:	f1a3 0302 	sub.w	r3, r3, #2
 80267d6:	bfcc      	ite	gt
 80267d8:	2500      	movgt	r5, #0
 80267da:	2501      	movle	r5, #1
 80267dc:	2b03      	cmp	r3, #3
 80267de:	f200 808f 	bhi.w	8026900 <_dtoa_r+0x2f0>
 80267e2:	e8df f003 	tbb	[pc, r3]
 80267e6:	7f7d      	.short	0x7f7d
 80267e8:	7131      	.short	0x7131
 80267ea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80267ee:	441d      	add	r5, r3
 80267f0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80267f4:	2820      	cmp	r0, #32
 80267f6:	dd13      	ble.n	8026820 <_dtoa_r+0x210>
 80267f8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80267fc:	9b00      	ldr	r3, [sp, #0]
 80267fe:	fa08 f800 	lsl.w	r8, r8, r0
 8026802:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8026806:	fa23 f000 	lsr.w	r0, r3, r0
 802680a:	ea48 0000 	orr.w	r0, r8, r0
 802680e:	f7f9 fd61 	bl	80202d4 <__aeabi_ui2d>
 8026812:	2301      	movs	r3, #1
 8026814:	4682      	mov	sl, r0
 8026816:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 802681a:	3d01      	subs	r5, #1
 802681c:	9313      	str	r3, [sp, #76]	; 0x4c
 802681e:	e772      	b.n	8026706 <_dtoa_r+0xf6>
 8026820:	9b00      	ldr	r3, [sp, #0]
 8026822:	f1c0 0020 	rsb	r0, r0, #32
 8026826:	fa03 f000 	lsl.w	r0, r3, r0
 802682a:	e7f0      	b.n	802680e <_dtoa_r+0x1fe>
 802682c:	2301      	movs	r3, #1
 802682e:	e7b1      	b.n	8026794 <_dtoa_r+0x184>
 8026830:	900f      	str	r0, [sp, #60]	; 0x3c
 8026832:	e7b0      	b.n	8026796 <_dtoa_r+0x186>
 8026834:	9b05      	ldr	r3, [sp, #20]
 8026836:	eba3 030a 	sub.w	r3, r3, sl
 802683a:	9305      	str	r3, [sp, #20]
 802683c:	f1ca 0300 	rsb	r3, sl, #0
 8026840:	9307      	str	r3, [sp, #28]
 8026842:	2300      	movs	r3, #0
 8026844:	930e      	str	r3, [sp, #56]	; 0x38
 8026846:	e7bb      	b.n	80267c0 <_dtoa_r+0x1b0>
 8026848:	2301      	movs	r3, #1
 802684a:	930a      	str	r3, [sp, #40]	; 0x28
 802684c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802684e:	2b00      	cmp	r3, #0
 8026850:	dd59      	ble.n	8026906 <_dtoa_r+0x2f6>
 8026852:	9302      	str	r3, [sp, #8]
 8026854:	4699      	mov	r9, r3
 8026856:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8026858:	2200      	movs	r2, #0
 802685a:	6072      	str	r2, [r6, #4]
 802685c:	2204      	movs	r2, #4
 802685e:	f102 0014 	add.w	r0, r2, #20
 8026862:	4298      	cmp	r0, r3
 8026864:	6871      	ldr	r1, [r6, #4]
 8026866:	d953      	bls.n	8026910 <_dtoa_r+0x300>
 8026868:	4620      	mov	r0, r4
 802686a:	f000 fc9f 	bl	80271ac <_Balloc>
 802686e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026870:	6030      	str	r0, [r6, #0]
 8026872:	f1b9 0f0e 	cmp.w	r9, #14
 8026876:	f8d3 b000 	ldr.w	fp, [r3]
 802687a:	f200 80e6 	bhi.w	8026a4a <_dtoa_r+0x43a>
 802687e:	2d00      	cmp	r5, #0
 8026880:	f000 80e3 	beq.w	8026a4a <_dtoa_r+0x43a>
 8026884:	ed9d 7b00 	vldr	d7, [sp]
 8026888:	f1ba 0f00 	cmp.w	sl, #0
 802688c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8026890:	dd74      	ble.n	802697c <_dtoa_r+0x36c>
 8026892:	4a2a      	ldr	r2, [pc, #168]	; (802693c <_dtoa_r+0x32c>)
 8026894:	f00a 030f 	and.w	r3, sl, #15
 8026898:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 802689c:	ed93 7b00 	vldr	d7, [r3]
 80268a0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80268a4:	06f0      	lsls	r0, r6, #27
 80268a6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80268aa:	d565      	bpl.n	8026978 <_dtoa_r+0x368>
 80268ac:	4b24      	ldr	r3, [pc, #144]	; (8026940 <_dtoa_r+0x330>)
 80268ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80268b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80268b6:	f7f9 feb1 	bl	802061c <__aeabi_ddiv>
 80268ba:	e9cd 0100 	strd	r0, r1, [sp]
 80268be:	f006 060f 	and.w	r6, r6, #15
 80268c2:	2503      	movs	r5, #3
 80268c4:	4f1e      	ldr	r7, [pc, #120]	; (8026940 <_dtoa_r+0x330>)
 80268c6:	e04c      	b.n	8026962 <_dtoa_r+0x352>
 80268c8:	2301      	movs	r3, #1
 80268ca:	930a      	str	r3, [sp, #40]	; 0x28
 80268cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80268ce:	4453      	add	r3, sl
 80268d0:	f103 0901 	add.w	r9, r3, #1
 80268d4:	9302      	str	r3, [sp, #8]
 80268d6:	464b      	mov	r3, r9
 80268d8:	2b01      	cmp	r3, #1
 80268da:	bfb8      	it	lt
 80268dc:	2301      	movlt	r3, #1
 80268de:	e7ba      	b.n	8026856 <_dtoa_r+0x246>
 80268e0:	2300      	movs	r3, #0
 80268e2:	e7b2      	b.n	802684a <_dtoa_r+0x23a>
 80268e4:	2300      	movs	r3, #0
 80268e6:	e7f0      	b.n	80268ca <_dtoa_r+0x2ba>
 80268e8:	2501      	movs	r5, #1
 80268ea:	2300      	movs	r3, #0
 80268ec:	9306      	str	r3, [sp, #24]
 80268ee:	950a      	str	r5, [sp, #40]	; 0x28
 80268f0:	f04f 33ff 	mov.w	r3, #4294967295
 80268f4:	9302      	str	r3, [sp, #8]
 80268f6:	4699      	mov	r9, r3
 80268f8:	2200      	movs	r2, #0
 80268fa:	2312      	movs	r3, #18
 80268fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80268fe:	e7aa      	b.n	8026856 <_dtoa_r+0x246>
 8026900:	2301      	movs	r3, #1
 8026902:	930a      	str	r3, [sp, #40]	; 0x28
 8026904:	e7f4      	b.n	80268f0 <_dtoa_r+0x2e0>
 8026906:	2301      	movs	r3, #1
 8026908:	9302      	str	r3, [sp, #8]
 802690a:	4699      	mov	r9, r3
 802690c:	461a      	mov	r2, r3
 802690e:	e7f5      	b.n	80268fc <_dtoa_r+0x2ec>
 8026910:	3101      	adds	r1, #1
 8026912:	6071      	str	r1, [r6, #4]
 8026914:	0052      	lsls	r2, r2, #1
 8026916:	e7a2      	b.n	802685e <_dtoa_r+0x24e>
 8026918:	636f4361 	.word	0x636f4361
 802691c:	3fd287a7 	.word	0x3fd287a7
 8026920:	8b60c8b3 	.word	0x8b60c8b3
 8026924:	3fc68a28 	.word	0x3fc68a28
 8026928:	509f79fb 	.word	0x509f79fb
 802692c:	3fd34413 	.word	0x3fd34413
 8026930:	7ff00000 	.word	0x7ff00000
 8026934:	080278e1 	.word	0x080278e1
 8026938:	3ff80000 	.word	0x3ff80000
 802693c:	08027978 	.word	0x08027978
 8026940:	08027950 	.word	0x08027950
 8026944:	080278eb 	.word	0x080278eb
 8026948:	07f1      	lsls	r1, r6, #31
 802694a:	d508      	bpl.n	802695e <_dtoa_r+0x34e>
 802694c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8026950:	e9d7 2300 	ldrd	r2, r3, [r7]
 8026954:	f7f9 fd38 	bl	80203c8 <__aeabi_dmul>
 8026958:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802695c:	3501      	adds	r5, #1
 802695e:	1076      	asrs	r6, r6, #1
 8026960:	3708      	adds	r7, #8
 8026962:	2e00      	cmp	r6, #0
 8026964:	d1f0      	bne.n	8026948 <_dtoa_r+0x338>
 8026966:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 802696a:	e9dd 0100 	ldrd	r0, r1, [sp]
 802696e:	f7f9 fe55 	bl	802061c <__aeabi_ddiv>
 8026972:	e9cd 0100 	strd	r0, r1, [sp]
 8026976:	e01a      	b.n	80269ae <_dtoa_r+0x39e>
 8026978:	2502      	movs	r5, #2
 802697a:	e7a3      	b.n	80268c4 <_dtoa_r+0x2b4>
 802697c:	f000 80a0 	beq.w	8026ac0 <_dtoa_r+0x4b0>
 8026980:	f1ca 0600 	rsb	r6, sl, #0
 8026984:	4b9f      	ldr	r3, [pc, #636]	; (8026c04 <_dtoa_r+0x5f4>)
 8026986:	4fa0      	ldr	r7, [pc, #640]	; (8026c08 <_dtoa_r+0x5f8>)
 8026988:	f006 020f 	and.w	r2, r6, #15
 802698c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8026990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026994:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8026998:	f7f9 fd16 	bl	80203c8 <__aeabi_dmul>
 802699c:	e9cd 0100 	strd	r0, r1, [sp]
 80269a0:	1136      	asrs	r6, r6, #4
 80269a2:	2300      	movs	r3, #0
 80269a4:	2502      	movs	r5, #2
 80269a6:	2e00      	cmp	r6, #0
 80269a8:	d17f      	bne.n	8026aaa <_dtoa_r+0x49a>
 80269aa:	2b00      	cmp	r3, #0
 80269ac:	d1e1      	bne.n	8026972 <_dtoa_r+0x362>
 80269ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80269b0:	2b00      	cmp	r3, #0
 80269b2:	f000 8087 	beq.w	8026ac4 <_dtoa_r+0x4b4>
 80269b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80269ba:	2200      	movs	r2, #0
 80269bc:	4b93      	ldr	r3, [pc, #588]	; (8026c0c <_dtoa_r+0x5fc>)
 80269be:	4630      	mov	r0, r6
 80269c0:	4639      	mov	r1, r7
 80269c2:	f7f9 ff73 	bl	80208ac <__aeabi_dcmplt>
 80269c6:	2800      	cmp	r0, #0
 80269c8:	d07c      	beq.n	8026ac4 <_dtoa_r+0x4b4>
 80269ca:	f1b9 0f00 	cmp.w	r9, #0
 80269ce:	d079      	beq.n	8026ac4 <_dtoa_r+0x4b4>
 80269d0:	9b02      	ldr	r3, [sp, #8]
 80269d2:	2b00      	cmp	r3, #0
 80269d4:	dd35      	ble.n	8026a42 <_dtoa_r+0x432>
 80269d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80269da:	9308      	str	r3, [sp, #32]
 80269dc:	4639      	mov	r1, r7
 80269de:	2200      	movs	r2, #0
 80269e0:	4b8b      	ldr	r3, [pc, #556]	; (8026c10 <_dtoa_r+0x600>)
 80269e2:	4630      	mov	r0, r6
 80269e4:	f7f9 fcf0 	bl	80203c8 <__aeabi_dmul>
 80269e8:	e9cd 0100 	strd	r0, r1, [sp]
 80269ec:	9f02      	ldr	r7, [sp, #8]
 80269ee:	3501      	adds	r5, #1
 80269f0:	4628      	mov	r0, r5
 80269f2:	f7f9 fc7f 	bl	80202f4 <__aeabi_i2d>
 80269f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80269fa:	f7f9 fce5 	bl	80203c8 <__aeabi_dmul>
 80269fe:	2200      	movs	r2, #0
 8026a00:	4b84      	ldr	r3, [pc, #528]	; (8026c14 <_dtoa_r+0x604>)
 8026a02:	f7f9 fb2b 	bl	802005c <__adddf3>
 8026a06:	4605      	mov	r5, r0
 8026a08:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8026a0c:	2f00      	cmp	r7, #0
 8026a0e:	d15d      	bne.n	8026acc <_dtoa_r+0x4bc>
 8026a10:	2200      	movs	r2, #0
 8026a12:	4b81      	ldr	r3, [pc, #516]	; (8026c18 <_dtoa_r+0x608>)
 8026a14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026a18:	f7f9 fb1e 	bl	8020058 <__aeabi_dsub>
 8026a1c:	462a      	mov	r2, r5
 8026a1e:	4633      	mov	r3, r6
 8026a20:	e9cd 0100 	strd	r0, r1, [sp]
 8026a24:	f7f9 ff60 	bl	80208e8 <__aeabi_dcmpgt>
 8026a28:	2800      	cmp	r0, #0
 8026a2a:	f040 8288 	bne.w	8026f3e <_dtoa_r+0x92e>
 8026a2e:	462a      	mov	r2, r5
 8026a30:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8026a34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026a38:	f7f9 ff38 	bl	80208ac <__aeabi_dcmplt>
 8026a3c:	2800      	cmp	r0, #0
 8026a3e:	f040 827c 	bne.w	8026f3a <_dtoa_r+0x92a>
 8026a42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8026a46:	e9cd 2300 	strd	r2, r3, [sp]
 8026a4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8026a4c:	2b00      	cmp	r3, #0
 8026a4e:	f2c0 8150 	blt.w	8026cf2 <_dtoa_r+0x6e2>
 8026a52:	f1ba 0f0e 	cmp.w	sl, #14
 8026a56:	f300 814c 	bgt.w	8026cf2 <_dtoa_r+0x6e2>
 8026a5a:	4b6a      	ldr	r3, [pc, #424]	; (8026c04 <_dtoa_r+0x5f4>)
 8026a5c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8026a60:	ed93 7b00 	vldr	d7, [r3]
 8026a64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026a66:	2b00      	cmp	r3, #0
 8026a68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8026a6c:	f280 80d8 	bge.w	8026c20 <_dtoa_r+0x610>
 8026a70:	f1b9 0f00 	cmp.w	r9, #0
 8026a74:	f300 80d4 	bgt.w	8026c20 <_dtoa_r+0x610>
 8026a78:	f040 825e 	bne.w	8026f38 <_dtoa_r+0x928>
 8026a7c:	2200      	movs	r2, #0
 8026a7e:	4b66      	ldr	r3, [pc, #408]	; (8026c18 <_dtoa_r+0x608>)
 8026a80:	ec51 0b17 	vmov	r0, r1, d7
 8026a84:	f7f9 fca0 	bl	80203c8 <__aeabi_dmul>
 8026a88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8026a8c:	f7f9 ff22 	bl	80208d4 <__aeabi_dcmpge>
 8026a90:	464f      	mov	r7, r9
 8026a92:	464e      	mov	r6, r9
 8026a94:	2800      	cmp	r0, #0
 8026a96:	f040 8234 	bne.w	8026f02 <_dtoa_r+0x8f2>
 8026a9a:	2331      	movs	r3, #49	; 0x31
 8026a9c:	f10b 0501 	add.w	r5, fp, #1
 8026aa0:	f88b 3000 	strb.w	r3, [fp]
 8026aa4:	f10a 0a01 	add.w	sl, sl, #1
 8026aa8:	e22f      	b.n	8026f0a <_dtoa_r+0x8fa>
 8026aaa:	07f2      	lsls	r2, r6, #31
 8026aac:	d505      	bpl.n	8026aba <_dtoa_r+0x4aa>
 8026aae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8026ab2:	f7f9 fc89 	bl	80203c8 <__aeabi_dmul>
 8026ab6:	3501      	adds	r5, #1
 8026ab8:	2301      	movs	r3, #1
 8026aba:	1076      	asrs	r6, r6, #1
 8026abc:	3708      	adds	r7, #8
 8026abe:	e772      	b.n	80269a6 <_dtoa_r+0x396>
 8026ac0:	2502      	movs	r5, #2
 8026ac2:	e774      	b.n	80269ae <_dtoa_r+0x39e>
 8026ac4:	f8cd a020 	str.w	sl, [sp, #32]
 8026ac8:	464f      	mov	r7, r9
 8026aca:	e791      	b.n	80269f0 <_dtoa_r+0x3e0>
 8026acc:	4b4d      	ldr	r3, [pc, #308]	; (8026c04 <_dtoa_r+0x5f4>)
 8026ace:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8026ad2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8026ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026ad8:	2b00      	cmp	r3, #0
 8026ada:	d047      	beq.n	8026b6c <_dtoa_r+0x55c>
 8026adc:	4602      	mov	r2, r0
 8026ade:	460b      	mov	r3, r1
 8026ae0:	2000      	movs	r0, #0
 8026ae2:	494e      	ldr	r1, [pc, #312]	; (8026c1c <_dtoa_r+0x60c>)
 8026ae4:	f7f9 fd9a 	bl	802061c <__aeabi_ddiv>
 8026ae8:	462a      	mov	r2, r5
 8026aea:	4633      	mov	r3, r6
 8026aec:	f7f9 fab4 	bl	8020058 <__aeabi_dsub>
 8026af0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8026af4:	465d      	mov	r5, fp
 8026af6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026afa:	f7f9 ff15 	bl	8020928 <__aeabi_d2iz>
 8026afe:	4606      	mov	r6, r0
 8026b00:	f7f9 fbf8 	bl	80202f4 <__aeabi_i2d>
 8026b04:	4602      	mov	r2, r0
 8026b06:	460b      	mov	r3, r1
 8026b08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026b0c:	f7f9 faa4 	bl	8020058 <__aeabi_dsub>
 8026b10:	3630      	adds	r6, #48	; 0x30
 8026b12:	f805 6b01 	strb.w	r6, [r5], #1
 8026b16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8026b1a:	e9cd 0100 	strd	r0, r1, [sp]
 8026b1e:	f7f9 fec5 	bl	80208ac <__aeabi_dcmplt>
 8026b22:	2800      	cmp	r0, #0
 8026b24:	d163      	bne.n	8026bee <_dtoa_r+0x5de>
 8026b26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8026b2a:	2000      	movs	r0, #0
 8026b2c:	4937      	ldr	r1, [pc, #220]	; (8026c0c <_dtoa_r+0x5fc>)
 8026b2e:	f7f9 fa93 	bl	8020058 <__aeabi_dsub>
 8026b32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8026b36:	f7f9 feb9 	bl	80208ac <__aeabi_dcmplt>
 8026b3a:	2800      	cmp	r0, #0
 8026b3c:	f040 80b7 	bne.w	8026cae <_dtoa_r+0x69e>
 8026b40:	eba5 030b 	sub.w	r3, r5, fp
 8026b44:	429f      	cmp	r7, r3
 8026b46:	f77f af7c 	ble.w	8026a42 <_dtoa_r+0x432>
 8026b4a:	2200      	movs	r2, #0
 8026b4c:	4b30      	ldr	r3, [pc, #192]	; (8026c10 <_dtoa_r+0x600>)
 8026b4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8026b52:	f7f9 fc39 	bl	80203c8 <__aeabi_dmul>
 8026b56:	2200      	movs	r2, #0
 8026b58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8026b5c:	4b2c      	ldr	r3, [pc, #176]	; (8026c10 <_dtoa_r+0x600>)
 8026b5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026b62:	f7f9 fc31 	bl	80203c8 <__aeabi_dmul>
 8026b66:	e9cd 0100 	strd	r0, r1, [sp]
 8026b6a:	e7c4      	b.n	8026af6 <_dtoa_r+0x4e6>
 8026b6c:	462a      	mov	r2, r5
 8026b6e:	4633      	mov	r3, r6
 8026b70:	f7f9 fc2a 	bl	80203c8 <__aeabi_dmul>
 8026b74:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8026b78:	eb0b 0507 	add.w	r5, fp, r7
 8026b7c:	465e      	mov	r6, fp
 8026b7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026b82:	f7f9 fed1 	bl	8020928 <__aeabi_d2iz>
 8026b86:	4607      	mov	r7, r0
 8026b88:	f7f9 fbb4 	bl	80202f4 <__aeabi_i2d>
 8026b8c:	3730      	adds	r7, #48	; 0x30
 8026b8e:	4602      	mov	r2, r0
 8026b90:	460b      	mov	r3, r1
 8026b92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026b96:	f7f9 fa5f 	bl	8020058 <__aeabi_dsub>
 8026b9a:	f806 7b01 	strb.w	r7, [r6], #1
 8026b9e:	42ae      	cmp	r6, r5
 8026ba0:	e9cd 0100 	strd	r0, r1, [sp]
 8026ba4:	f04f 0200 	mov.w	r2, #0
 8026ba8:	d126      	bne.n	8026bf8 <_dtoa_r+0x5e8>
 8026baa:	4b1c      	ldr	r3, [pc, #112]	; (8026c1c <_dtoa_r+0x60c>)
 8026bac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8026bb0:	f7f9 fa54 	bl	802005c <__adddf3>
 8026bb4:	4602      	mov	r2, r0
 8026bb6:	460b      	mov	r3, r1
 8026bb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026bbc:	f7f9 fe94 	bl	80208e8 <__aeabi_dcmpgt>
 8026bc0:	2800      	cmp	r0, #0
 8026bc2:	d174      	bne.n	8026cae <_dtoa_r+0x69e>
 8026bc4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8026bc8:	2000      	movs	r0, #0
 8026bca:	4914      	ldr	r1, [pc, #80]	; (8026c1c <_dtoa_r+0x60c>)
 8026bcc:	f7f9 fa44 	bl	8020058 <__aeabi_dsub>
 8026bd0:	4602      	mov	r2, r0
 8026bd2:	460b      	mov	r3, r1
 8026bd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026bd8:	f7f9 fe68 	bl	80208ac <__aeabi_dcmplt>
 8026bdc:	2800      	cmp	r0, #0
 8026bde:	f43f af30 	beq.w	8026a42 <_dtoa_r+0x432>
 8026be2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8026be6:	2b30      	cmp	r3, #48	; 0x30
 8026be8:	f105 32ff 	add.w	r2, r5, #4294967295
 8026bec:	d002      	beq.n	8026bf4 <_dtoa_r+0x5e4>
 8026bee:	f8dd a020 	ldr.w	sl, [sp, #32]
 8026bf2:	e04a      	b.n	8026c8a <_dtoa_r+0x67a>
 8026bf4:	4615      	mov	r5, r2
 8026bf6:	e7f4      	b.n	8026be2 <_dtoa_r+0x5d2>
 8026bf8:	4b05      	ldr	r3, [pc, #20]	; (8026c10 <_dtoa_r+0x600>)
 8026bfa:	f7f9 fbe5 	bl	80203c8 <__aeabi_dmul>
 8026bfe:	e9cd 0100 	strd	r0, r1, [sp]
 8026c02:	e7bc      	b.n	8026b7e <_dtoa_r+0x56e>
 8026c04:	08027978 	.word	0x08027978
 8026c08:	08027950 	.word	0x08027950
 8026c0c:	3ff00000 	.word	0x3ff00000
 8026c10:	40240000 	.word	0x40240000
 8026c14:	401c0000 	.word	0x401c0000
 8026c18:	40140000 	.word	0x40140000
 8026c1c:	3fe00000 	.word	0x3fe00000
 8026c20:	e9dd 6700 	ldrd	r6, r7, [sp]
 8026c24:	465d      	mov	r5, fp
 8026c26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8026c2a:	4630      	mov	r0, r6
 8026c2c:	4639      	mov	r1, r7
 8026c2e:	f7f9 fcf5 	bl	802061c <__aeabi_ddiv>
 8026c32:	f7f9 fe79 	bl	8020928 <__aeabi_d2iz>
 8026c36:	4680      	mov	r8, r0
 8026c38:	f7f9 fb5c 	bl	80202f4 <__aeabi_i2d>
 8026c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8026c40:	f7f9 fbc2 	bl	80203c8 <__aeabi_dmul>
 8026c44:	4602      	mov	r2, r0
 8026c46:	460b      	mov	r3, r1
 8026c48:	4630      	mov	r0, r6
 8026c4a:	4639      	mov	r1, r7
 8026c4c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8026c50:	f7f9 fa02 	bl	8020058 <__aeabi_dsub>
 8026c54:	f805 6b01 	strb.w	r6, [r5], #1
 8026c58:	eba5 060b 	sub.w	r6, r5, fp
 8026c5c:	45b1      	cmp	r9, r6
 8026c5e:	4602      	mov	r2, r0
 8026c60:	460b      	mov	r3, r1
 8026c62:	d139      	bne.n	8026cd8 <_dtoa_r+0x6c8>
 8026c64:	f7f9 f9fa 	bl	802005c <__adddf3>
 8026c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8026c6c:	4606      	mov	r6, r0
 8026c6e:	460f      	mov	r7, r1
 8026c70:	f7f9 fe3a 	bl	80208e8 <__aeabi_dcmpgt>
 8026c74:	b9c8      	cbnz	r0, 8026caa <_dtoa_r+0x69a>
 8026c76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8026c7a:	4630      	mov	r0, r6
 8026c7c:	4639      	mov	r1, r7
 8026c7e:	f7f9 fe0b 	bl	8020898 <__aeabi_dcmpeq>
 8026c82:	b110      	cbz	r0, 8026c8a <_dtoa_r+0x67a>
 8026c84:	f018 0f01 	tst.w	r8, #1
 8026c88:	d10f      	bne.n	8026caa <_dtoa_r+0x69a>
 8026c8a:	9904      	ldr	r1, [sp, #16]
 8026c8c:	4620      	mov	r0, r4
 8026c8e:	f000 fac1 	bl	8027214 <_Bfree>
 8026c92:	2300      	movs	r3, #0
 8026c94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8026c96:	702b      	strb	r3, [r5, #0]
 8026c98:	f10a 0301 	add.w	r3, sl, #1
 8026c9c:	6013      	str	r3, [r2, #0]
 8026c9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026ca0:	2b00      	cmp	r3, #0
 8026ca2:	f000 8241 	beq.w	8027128 <_dtoa_r+0xb18>
 8026ca6:	601d      	str	r5, [r3, #0]
 8026ca8:	e23e      	b.n	8027128 <_dtoa_r+0xb18>
 8026caa:	f8cd a020 	str.w	sl, [sp, #32]
 8026cae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8026cb2:	2a39      	cmp	r2, #57	; 0x39
 8026cb4:	f105 33ff 	add.w	r3, r5, #4294967295
 8026cb8:	d108      	bne.n	8026ccc <_dtoa_r+0x6bc>
 8026cba:	459b      	cmp	fp, r3
 8026cbc:	d10a      	bne.n	8026cd4 <_dtoa_r+0x6c4>
 8026cbe:	9b08      	ldr	r3, [sp, #32]
 8026cc0:	3301      	adds	r3, #1
 8026cc2:	9308      	str	r3, [sp, #32]
 8026cc4:	2330      	movs	r3, #48	; 0x30
 8026cc6:	f88b 3000 	strb.w	r3, [fp]
 8026cca:	465b      	mov	r3, fp
 8026ccc:	781a      	ldrb	r2, [r3, #0]
 8026cce:	3201      	adds	r2, #1
 8026cd0:	701a      	strb	r2, [r3, #0]
 8026cd2:	e78c      	b.n	8026bee <_dtoa_r+0x5de>
 8026cd4:	461d      	mov	r5, r3
 8026cd6:	e7ea      	b.n	8026cae <_dtoa_r+0x69e>
 8026cd8:	2200      	movs	r2, #0
 8026cda:	4b9b      	ldr	r3, [pc, #620]	; (8026f48 <_dtoa_r+0x938>)
 8026cdc:	f7f9 fb74 	bl	80203c8 <__aeabi_dmul>
 8026ce0:	2200      	movs	r2, #0
 8026ce2:	2300      	movs	r3, #0
 8026ce4:	4606      	mov	r6, r0
 8026ce6:	460f      	mov	r7, r1
 8026ce8:	f7f9 fdd6 	bl	8020898 <__aeabi_dcmpeq>
 8026cec:	2800      	cmp	r0, #0
 8026cee:	d09a      	beq.n	8026c26 <_dtoa_r+0x616>
 8026cf0:	e7cb      	b.n	8026c8a <_dtoa_r+0x67a>
 8026cf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026cf4:	2a00      	cmp	r2, #0
 8026cf6:	f000 808b 	beq.w	8026e10 <_dtoa_r+0x800>
 8026cfa:	9a06      	ldr	r2, [sp, #24]
 8026cfc:	2a01      	cmp	r2, #1
 8026cfe:	dc6e      	bgt.n	8026dde <_dtoa_r+0x7ce>
 8026d00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8026d02:	2a00      	cmp	r2, #0
 8026d04:	d067      	beq.n	8026dd6 <_dtoa_r+0x7c6>
 8026d06:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8026d0a:	9f07      	ldr	r7, [sp, #28]
 8026d0c:	9d05      	ldr	r5, [sp, #20]
 8026d0e:	9a05      	ldr	r2, [sp, #20]
 8026d10:	2101      	movs	r1, #1
 8026d12:	441a      	add	r2, r3
 8026d14:	4620      	mov	r0, r4
 8026d16:	9205      	str	r2, [sp, #20]
 8026d18:	4498      	add	r8, r3
 8026d1a:	f000 fb1b 	bl	8027354 <__i2b>
 8026d1e:	4606      	mov	r6, r0
 8026d20:	2d00      	cmp	r5, #0
 8026d22:	dd0c      	ble.n	8026d3e <_dtoa_r+0x72e>
 8026d24:	f1b8 0f00 	cmp.w	r8, #0
 8026d28:	dd09      	ble.n	8026d3e <_dtoa_r+0x72e>
 8026d2a:	4545      	cmp	r5, r8
 8026d2c:	9a05      	ldr	r2, [sp, #20]
 8026d2e:	462b      	mov	r3, r5
 8026d30:	bfa8      	it	ge
 8026d32:	4643      	movge	r3, r8
 8026d34:	1ad2      	subs	r2, r2, r3
 8026d36:	9205      	str	r2, [sp, #20]
 8026d38:	1aed      	subs	r5, r5, r3
 8026d3a:	eba8 0803 	sub.w	r8, r8, r3
 8026d3e:	9b07      	ldr	r3, [sp, #28]
 8026d40:	b1eb      	cbz	r3, 8026d7e <_dtoa_r+0x76e>
 8026d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026d44:	2b00      	cmp	r3, #0
 8026d46:	d067      	beq.n	8026e18 <_dtoa_r+0x808>
 8026d48:	b18f      	cbz	r7, 8026d6e <_dtoa_r+0x75e>
 8026d4a:	4631      	mov	r1, r6
 8026d4c:	463a      	mov	r2, r7
 8026d4e:	4620      	mov	r0, r4
 8026d50:	f000 fba0 	bl	8027494 <__pow5mult>
 8026d54:	9a04      	ldr	r2, [sp, #16]
 8026d56:	4601      	mov	r1, r0
 8026d58:	4606      	mov	r6, r0
 8026d5a:	4620      	mov	r0, r4
 8026d5c:	f000 fb03 	bl	8027366 <__multiply>
 8026d60:	9904      	ldr	r1, [sp, #16]
 8026d62:	9008      	str	r0, [sp, #32]
 8026d64:	4620      	mov	r0, r4
 8026d66:	f000 fa55 	bl	8027214 <_Bfree>
 8026d6a:	9b08      	ldr	r3, [sp, #32]
 8026d6c:	9304      	str	r3, [sp, #16]
 8026d6e:	9b07      	ldr	r3, [sp, #28]
 8026d70:	1bda      	subs	r2, r3, r7
 8026d72:	d004      	beq.n	8026d7e <_dtoa_r+0x76e>
 8026d74:	9904      	ldr	r1, [sp, #16]
 8026d76:	4620      	mov	r0, r4
 8026d78:	f000 fb8c 	bl	8027494 <__pow5mult>
 8026d7c:	9004      	str	r0, [sp, #16]
 8026d7e:	2101      	movs	r1, #1
 8026d80:	4620      	mov	r0, r4
 8026d82:	f000 fae7 	bl	8027354 <__i2b>
 8026d86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026d88:	4607      	mov	r7, r0
 8026d8a:	2b00      	cmp	r3, #0
 8026d8c:	f000 81d0 	beq.w	8027130 <_dtoa_r+0xb20>
 8026d90:	461a      	mov	r2, r3
 8026d92:	4601      	mov	r1, r0
 8026d94:	4620      	mov	r0, r4
 8026d96:	f000 fb7d 	bl	8027494 <__pow5mult>
 8026d9a:	9b06      	ldr	r3, [sp, #24]
 8026d9c:	2b01      	cmp	r3, #1
 8026d9e:	4607      	mov	r7, r0
 8026da0:	dc40      	bgt.n	8026e24 <_dtoa_r+0x814>
 8026da2:	9b00      	ldr	r3, [sp, #0]
 8026da4:	2b00      	cmp	r3, #0
 8026da6:	d139      	bne.n	8026e1c <_dtoa_r+0x80c>
 8026da8:	9b01      	ldr	r3, [sp, #4]
 8026daa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8026dae:	2b00      	cmp	r3, #0
 8026db0:	d136      	bne.n	8026e20 <_dtoa_r+0x810>
 8026db2:	9b01      	ldr	r3, [sp, #4]
 8026db4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8026db8:	0d1b      	lsrs	r3, r3, #20
 8026dba:	051b      	lsls	r3, r3, #20
 8026dbc:	b12b      	cbz	r3, 8026dca <_dtoa_r+0x7ba>
 8026dbe:	9b05      	ldr	r3, [sp, #20]
 8026dc0:	3301      	adds	r3, #1
 8026dc2:	9305      	str	r3, [sp, #20]
 8026dc4:	f108 0801 	add.w	r8, r8, #1
 8026dc8:	2301      	movs	r3, #1
 8026dca:	9307      	str	r3, [sp, #28]
 8026dcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026dce:	2b00      	cmp	r3, #0
 8026dd0:	d12a      	bne.n	8026e28 <_dtoa_r+0x818>
 8026dd2:	2001      	movs	r0, #1
 8026dd4:	e030      	b.n	8026e38 <_dtoa_r+0x828>
 8026dd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8026dd8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8026ddc:	e795      	b.n	8026d0a <_dtoa_r+0x6fa>
 8026dde:	9b07      	ldr	r3, [sp, #28]
 8026de0:	f109 37ff 	add.w	r7, r9, #4294967295
 8026de4:	42bb      	cmp	r3, r7
 8026de6:	bfbf      	itttt	lt
 8026de8:	9b07      	ldrlt	r3, [sp, #28]
 8026dea:	9707      	strlt	r7, [sp, #28]
 8026dec:	1afa      	sublt	r2, r7, r3
 8026dee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8026df0:	bfbb      	ittet	lt
 8026df2:	189b      	addlt	r3, r3, r2
 8026df4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8026df6:	1bdf      	subge	r7, r3, r7
 8026df8:	2700      	movlt	r7, #0
 8026dfa:	f1b9 0f00 	cmp.w	r9, #0
 8026dfe:	bfb5      	itete	lt
 8026e00:	9b05      	ldrlt	r3, [sp, #20]
 8026e02:	9d05      	ldrge	r5, [sp, #20]
 8026e04:	eba3 0509 	sublt.w	r5, r3, r9
 8026e08:	464b      	movge	r3, r9
 8026e0a:	bfb8      	it	lt
 8026e0c:	2300      	movlt	r3, #0
 8026e0e:	e77e      	b.n	8026d0e <_dtoa_r+0x6fe>
 8026e10:	9f07      	ldr	r7, [sp, #28]
 8026e12:	9d05      	ldr	r5, [sp, #20]
 8026e14:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8026e16:	e783      	b.n	8026d20 <_dtoa_r+0x710>
 8026e18:	9a07      	ldr	r2, [sp, #28]
 8026e1a:	e7ab      	b.n	8026d74 <_dtoa_r+0x764>
 8026e1c:	2300      	movs	r3, #0
 8026e1e:	e7d4      	b.n	8026dca <_dtoa_r+0x7ba>
 8026e20:	9b00      	ldr	r3, [sp, #0]
 8026e22:	e7d2      	b.n	8026dca <_dtoa_r+0x7ba>
 8026e24:	2300      	movs	r3, #0
 8026e26:	9307      	str	r3, [sp, #28]
 8026e28:	693b      	ldr	r3, [r7, #16]
 8026e2a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8026e2e:	6918      	ldr	r0, [r3, #16]
 8026e30:	f000 fa42 	bl	80272b8 <__hi0bits>
 8026e34:	f1c0 0020 	rsb	r0, r0, #32
 8026e38:	4440      	add	r0, r8
 8026e3a:	f010 001f 	ands.w	r0, r0, #31
 8026e3e:	d047      	beq.n	8026ed0 <_dtoa_r+0x8c0>
 8026e40:	f1c0 0320 	rsb	r3, r0, #32
 8026e44:	2b04      	cmp	r3, #4
 8026e46:	dd3b      	ble.n	8026ec0 <_dtoa_r+0x8b0>
 8026e48:	9b05      	ldr	r3, [sp, #20]
 8026e4a:	f1c0 001c 	rsb	r0, r0, #28
 8026e4e:	4403      	add	r3, r0
 8026e50:	9305      	str	r3, [sp, #20]
 8026e52:	4405      	add	r5, r0
 8026e54:	4480      	add	r8, r0
 8026e56:	9b05      	ldr	r3, [sp, #20]
 8026e58:	2b00      	cmp	r3, #0
 8026e5a:	dd05      	ble.n	8026e68 <_dtoa_r+0x858>
 8026e5c:	461a      	mov	r2, r3
 8026e5e:	9904      	ldr	r1, [sp, #16]
 8026e60:	4620      	mov	r0, r4
 8026e62:	f000 fb65 	bl	8027530 <__lshift>
 8026e66:	9004      	str	r0, [sp, #16]
 8026e68:	f1b8 0f00 	cmp.w	r8, #0
 8026e6c:	dd05      	ble.n	8026e7a <_dtoa_r+0x86a>
 8026e6e:	4639      	mov	r1, r7
 8026e70:	4642      	mov	r2, r8
 8026e72:	4620      	mov	r0, r4
 8026e74:	f000 fb5c 	bl	8027530 <__lshift>
 8026e78:	4607      	mov	r7, r0
 8026e7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026e7c:	b353      	cbz	r3, 8026ed4 <_dtoa_r+0x8c4>
 8026e7e:	4639      	mov	r1, r7
 8026e80:	9804      	ldr	r0, [sp, #16]
 8026e82:	f000 fba9 	bl	80275d8 <__mcmp>
 8026e86:	2800      	cmp	r0, #0
 8026e88:	da24      	bge.n	8026ed4 <_dtoa_r+0x8c4>
 8026e8a:	2300      	movs	r3, #0
 8026e8c:	220a      	movs	r2, #10
 8026e8e:	9904      	ldr	r1, [sp, #16]
 8026e90:	4620      	mov	r0, r4
 8026e92:	f000 f9d6 	bl	8027242 <__multadd>
 8026e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026e98:	9004      	str	r0, [sp, #16]
 8026e9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026e9e:	2b00      	cmp	r3, #0
 8026ea0:	f000 814d 	beq.w	802713e <_dtoa_r+0xb2e>
 8026ea4:	2300      	movs	r3, #0
 8026ea6:	4631      	mov	r1, r6
 8026ea8:	220a      	movs	r2, #10
 8026eaa:	4620      	mov	r0, r4
 8026eac:	f000 f9c9 	bl	8027242 <__multadd>
 8026eb0:	9b02      	ldr	r3, [sp, #8]
 8026eb2:	2b00      	cmp	r3, #0
 8026eb4:	4606      	mov	r6, r0
 8026eb6:	dc4f      	bgt.n	8026f58 <_dtoa_r+0x948>
 8026eb8:	9b06      	ldr	r3, [sp, #24]
 8026eba:	2b02      	cmp	r3, #2
 8026ebc:	dd4c      	ble.n	8026f58 <_dtoa_r+0x948>
 8026ebe:	e011      	b.n	8026ee4 <_dtoa_r+0x8d4>
 8026ec0:	d0c9      	beq.n	8026e56 <_dtoa_r+0x846>
 8026ec2:	9a05      	ldr	r2, [sp, #20]
 8026ec4:	331c      	adds	r3, #28
 8026ec6:	441a      	add	r2, r3
 8026ec8:	9205      	str	r2, [sp, #20]
 8026eca:	441d      	add	r5, r3
 8026ecc:	4498      	add	r8, r3
 8026ece:	e7c2      	b.n	8026e56 <_dtoa_r+0x846>
 8026ed0:	4603      	mov	r3, r0
 8026ed2:	e7f6      	b.n	8026ec2 <_dtoa_r+0x8b2>
 8026ed4:	f1b9 0f00 	cmp.w	r9, #0
 8026ed8:	dc38      	bgt.n	8026f4c <_dtoa_r+0x93c>
 8026eda:	9b06      	ldr	r3, [sp, #24]
 8026edc:	2b02      	cmp	r3, #2
 8026ede:	dd35      	ble.n	8026f4c <_dtoa_r+0x93c>
 8026ee0:	f8cd 9008 	str.w	r9, [sp, #8]
 8026ee4:	9b02      	ldr	r3, [sp, #8]
 8026ee6:	b963      	cbnz	r3, 8026f02 <_dtoa_r+0x8f2>
 8026ee8:	4639      	mov	r1, r7
 8026eea:	2205      	movs	r2, #5
 8026eec:	4620      	mov	r0, r4
 8026eee:	f000 f9a8 	bl	8027242 <__multadd>
 8026ef2:	4601      	mov	r1, r0
 8026ef4:	4607      	mov	r7, r0
 8026ef6:	9804      	ldr	r0, [sp, #16]
 8026ef8:	f000 fb6e 	bl	80275d8 <__mcmp>
 8026efc:	2800      	cmp	r0, #0
 8026efe:	f73f adcc 	bgt.w	8026a9a <_dtoa_r+0x48a>
 8026f02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026f04:	465d      	mov	r5, fp
 8026f06:	ea6f 0a03 	mvn.w	sl, r3
 8026f0a:	f04f 0900 	mov.w	r9, #0
 8026f0e:	4639      	mov	r1, r7
 8026f10:	4620      	mov	r0, r4
 8026f12:	f000 f97f 	bl	8027214 <_Bfree>
 8026f16:	2e00      	cmp	r6, #0
 8026f18:	f43f aeb7 	beq.w	8026c8a <_dtoa_r+0x67a>
 8026f1c:	f1b9 0f00 	cmp.w	r9, #0
 8026f20:	d005      	beq.n	8026f2e <_dtoa_r+0x91e>
 8026f22:	45b1      	cmp	r9, r6
 8026f24:	d003      	beq.n	8026f2e <_dtoa_r+0x91e>
 8026f26:	4649      	mov	r1, r9
 8026f28:	4620      	mov	r0, r4
 8026f2a:	f000 f973 	bl	8027214 <_Bfree>
 8026f2e:	4631      	mov	r1, r6
 8026f30:	4620      	mov	r0, r4
 8026f32:	f000 f96f 	bl	8027214 <_Bfree>
 8026f36:	e6a8      	b.n	8026c8a <_dtoa_r+0x67a>
 8026f38:	2700      	movs	r7, #0
 8026f3a:	463e      	mov	r6, r7
 8026f3c:	e7e1      	b.n	8026f02 <_dtoa_r+0x8f2>
 8026f3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8026f42:	463e      	mov	r6, r7
 8026f44:	e5a9      	b.n	8026a9a <_dtoa_r+0x48a>
 8026f46:	bf00      	nop
 8026f48:	40240000 	.word	0x40240000
 8026f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026f4e:	f8cd 9008 	str.w	r9, [sp, #8]
 8026f52:	2b00      	cmp	r3, #0
 8026f54:	f000 80fa 	beq.w	802714c <_dtoa_r+0xb3c>
 8026f58:	2d00      	cmp	r5, #0
 8026f5a:	dd05      	ble.n	8026f68 <_dtoa_r+0x958>
 8026f5c:	4631      	mov	r1, r6
 8026f5e:	462a      	mov	r2, r5
 8026f60:	4620      	mov	r0, r4
 8026f62:	f000 fae5 	bl	8027530 <__lshift>
 8026f66:	4606      	mov	r6, r0
 8026f68:	9b07      	ldr	r3, [sp, #28]
 8026f6a:	2b00      	cmp	r3, #0
 8026f6c:	d04c      	beq.n	8027008 <_dtoa_r+0x9f8>
 8026f6e:	6871      	ldr	r1, [r6, #4]
 8026f70:	4620      	mov	r0, r4
 8026f72:	f000 f91b 	bl	80271ac <_Balloc>
 8026f76:	6932      	ldr	r2, [r6, #16]
 8026f78:	3202      	adds	r2, #2
 8026f7a:	4605      	mov	r5, r0
 8026f7c:	0092      	lsls	r2, r2, #2
 8026f7e:	f106 010c 	add.w	r1, r6, #12
 8026f82:	300c      	adds	r0, #12
 8026f84:	f7fe ff5a 	bl	8025e3c <memcpy>
 8026f88:	2201      	movs	r2, #1
 8026f8a:	4629      	mov	r1, r5
 8026f8c:	4620      	mov	r0, r4
 8026f8e:	f000 facf 	bl	8027530 <__lshift>
 8026f92:	9b00      	ldr	r3, [sp, #0]
 8026f94:	f8cd b014 	str.w	fp, [sp, #20]
 8026f98:	f003 0301 	and.w	r3, r3, #1
 8026f9c:	46b1      	mov	r9, r6
 8026f9e:	9307      	str	r3, [sp, #28]
 8026fa0:	4606      	mov	r6, r0
 8026fa2:	4639      	mov	r1, r7
 8026fa4:	9804      	ldr	r0, [sp, #16]
 8026fa6:	f7ff faa6 	bl	80264f6 <quorem>
 8026faa:	4649      	mov	r1, r9
 8026fac:	4605      	mov	r5, r0
 8026fae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8026fb2:	9804      	ldr	r0, [sp, #16]
 8026fb4:	f000 fb10 	bl	80275d8 <__mcmp>
 8026fb8:	4632      	mov	r2, r6
 8026fba:	9000      	str	r0, [sp, #0]
 8026fbc:	4639      	mov	r1, r7
 8026fbe:	4620      	mov	r0, r4
 8026fc0:	f000 fb24 	bl	802760c <__mdiff>
 8026fc4:	68c3      	ldr	r3, [r0, #12]
 8026fc6:	4602      	mov	r2, r0
 8026fc8:	bb03      	cbnz	r3, 802700c <_dtoa_r+0x9fc>
 8026fca:	4601      	mov	r1, r0
 8026fcc:	9008      	str	r0, [sp, #32]
 8026fce:	9804      	ldr	r0, [sp, #16]
 8026fd0:	f000 fb02 	bl	80275d8 <__mcmp>
 8026fd4:	9a08      	ldr	r2, [sp, #32]
 8026fd6:	4603      	mov	r3, r0
 8026fd8:	4611      	mov	r1, r2
 8026fda:	4620      	mov	r0, r4
 8026fdc:	9308      	str	r3, [sp, #32]
 8026fde:	f000 f919 	bl	8027214 <_Bfree>
 8026fe2:	9b08      	ldr	r3, [sp, #32]
 8026fe4:	b9a3      	cbnz	r3, 8027010 <_dtoa_r+0xa00>
 8026fe6:	9a06      	ldr	r2, [sp, #24]
 8026fe8:	b992      	cbnz	r2, 8027010 <_dtoa_r+0xa00>
 8026fea:	9a07      	ldr	r2, [sp, #28]
 8026fec:	b982      	cbnz	r2, 8027010 <_dtoa_r+0xa00>
 8026fee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8026ff2:	d029      	beq.n	8027048 <_dtoa_r+0xa38>
 8026ff4:	9b00      	ldr	r3, [sp, #0]
 8026ff6:	2b00      	cmp	r3, #0
 8026ff8:	dd01      	ble.n	8026ffe <_dtoa_r+0x9ee>
 8026ffa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8026ffe:	9b05      	ldr	r3, [sp, #20]
 8027000:	1c5d      	adds	r5, r3, #1
 8027002:	f883 8000 	strb.w	r8, [r3]
 8027006:	e782      	b.n	8026f0e <_dtoa_r+0x8fe>
 8027008:	4630      	mov	r0, r6
 802700a:	e7c2      	b.n	8026f92 <_dtoa_r+0x982>
 802700c:	2301      	movs	r3, #1
 802700e:	e7e3      	b.n	8026fd8 <_dtoa_r+0x9c8>
 8027010:	9a00      	ldr	r2, [sp, #0]
 8027012:	2a00      	cmp	r2, #0
 8027014:	db04      	blt.n	8027020 <_dtoa_r+0xa10>
 8027016:	d125      	bne.n	8027064 <_dtoa_r+0xa54>
 8027018:	9a06      	ldr	r2, [sp, #24]
 802701a:	bb1a      	cbnz	r2, 8027064 <_dtoa_r+0xa54>
 802701c:	9a07      	ldr	r2, [sp, #28]
 802701e:	bb0a      	cbnz	r2, 8027064 <_dtoa_r+0xa54>
 8027020:	2b00      	cmp	r3, #0
 8027022:	ddec      	ble.n	8026ffe <_dtoa_r+0x9ee>
 8027024:	2201      	movs	r2, #1
 8027026:	9904      	ldr	r1, [sp, #16]
 8027028:	4620      	mov	r0, r4
 802702a:	f000 fa81 	bl	8027530 <__lshift>
 802702e:	4639      	mov	r1, r7
 8027030:	9004      	str	r0, [sp, #16]
 8027032:	f000 fad1 	bl	80275d8 <__mcmp>
 8027036:	2800      	cmp	r0, #0
 8027038:	dc03      	bgt.n	8027042 <_dtoa_r+0xa32>
 802703a:	d1e0      	bne.n	8026ffe <_dtoa_r+0x9ee>
 802703c:	f018 0f01 	tst.w	r8, #1
 8027040:	d0dd      	beq.n	8026ffe <_dtoa_r+0x9ee>
 8027042:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8027046:	d1d8      	bne.n	8026ffa <_dtoa_r+0x9ea>
 8027048:	9b05      	ldr	r3, [sp, #20]
 802704a:	9a05      	ldr	r2, [sp, #20]
 802704c:	1c5d      	adds	r5, r3, #1
 802704e:	2339      	movs	r3, #57	; 0x39
 8027050:	7013      	strb	r3, [r2, #0]
 8027052:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8027056:	2b39      	cmp	r3, #57	; 0x39
 8027058:	f105 32ff 	add.w	r2, r5, #4294967295
 802705c:	d04f      	beq.n	80270fe <_dtoa_r+0xaee>
 802705e:	3301      	adds	r3, #1
 8027060:	7013      	strb	r3, [r2, #0]
 8027062:	e754      	b.n	8026f0e <_dtoa_r+0x8fe>
 8027064:	9a05      	ldr	r2, [sp, #20]
 8027066:	2b00      	cmp	r3, #0
 8027068:	f102 0501 	add.w	r5, r2, #1
 802706c:	dd06      	ble.n	802707c <_dtoa_r+0xa6c>
 802706e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8027072:	d0e9      	beq.n	8027048 <_dtoa_r+0xa38>
 8027074:	f108 0801 	add.w	r8, r8, #1
 8027078:	9b05      	ldr	r3, [sp, #20]
 802707a:	e7c2      	b.n	8027002 <_dtoa_r+0x9f2>
 802707c:	9a02      	ldr	r2, [sp, #8]
 802707e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8027082:	eba5 030b 	sub.w	r3, r5, fp
 8027086:	4293      	cmp	r3, r2
 8027088:	d021      	beq.n	80270ce <_dtoa_r+0xabe>
 802708a:	2300      	movs	r3, #0
 802708c:	220a      	movs	r2, #10
 802708e:	9904      	ldr	r1, [sp, #16]
 8027090:	4620      	mov	r0, r4
 8027092:	f000 f8d6 	bl	8027242 <__multadd>
 8027096:	45b1      	cmp	r9, r6
 8027098:	9004      	str	r0, [sp, #16]
 802709a:	f04f 0300 	mov.w	r3, #0
 802709e:	f04f 020a 	mov.w	r2, #10
 80270a2:	4649      	mov	r1, r9
 80270a4:	4620      	mov	r0, r4
 80270a6:	d105      	bne.n	80270b4 <_dtoa_r+0xaa4>
 80270a8:	f000 f8cb 	bl	8027242 <__multadd>
 80270ac:	4681      	mov	r9, r0
 80270ae:	4606      	mov	r6, r0
 80270b0:	9505      	str	r5, [sp, #20]
 80270b2:	e776      	b.n	8026fa2 <_dtoa_r+0x992>
 80270b4:	f000 f8c5 	bl	8027242 <__multadd>
 80270b8:	4631      	mov	r1, r6
 80270ba:	4681      	mov	r9, r0
 80270bc:	2300      	movs	r3, #0
 80270be:	220a      	movs	r2, #10
 80270c0:	4620      	mov	r0, r4
 80270c2:	f000 f8be 	bl	8027242 <__multadd>
 80270c6:	4606      	mov	r6, r0
 80270c8:	e7f2      	b.n	80270b0 <_dtoa_r+0xaa0>
 80270ca:	f04f 0900 	mov.w	r9, #0
 80270ce:	2201      	movs	r2, #1
 80270d0:	9904      	ldr	r1, [sp, #16]
 80270d2:	4620      	mov	r0, r4
 80270d4:	f000 fa2c 	bl	8027530 <__lshift>
 80270d8:	4639      	mov	r1, r7
 80270da:	9004      	str	r0, [sp, #16]
 80270dc:	f000 fa7c 	bl	80275d8 <__mcmp>
 80270e0:	2800      	cmp	r0, #0
 80270e2:	dcb6      	bgt.n	8027052 <_dtoa_r+0xa42>
 80270e4:	d102      	bne.n	80270ec <_dtoa_r+0xadc>
 80270e6:	f018 0f01 	tst.w	r8, #1
 80270ea:	d1b2      	bne.n	8027052 <_dtoa_r+0xa42>
 80270ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80270f0:	2b30      	cmp	r3, #48	; 0x30
 80270f2:	f105 32ff 	add.w	r2, r5, #4294967295
 80270f6:	f47f af0a 	bne.w	8026f0e <_dtoa_r+0x8fe>
 80270fa:	4615      	mov	r5, r2
 80270fc:	e7f6      	b.n	80270ec <_dtoa_r+0xadc>
 80270fe:	4593      	cmp	fp, r2
 8027100:	d105      	bne.n	802710e <_dtoa_r+0xafe>
 8027102:	2331      	movs	r3, #49	; 0x31
 8027104:	f10a 0a01 	add.w	sl, sl, #1
 8027108:	f88b 3000 	strb.w	r3, [fp]
 802710c:	e6ff      	b.n	8026f0e <_dtoa_r+0x8fe>
 802710e:	4615      	mov	r5, r2
 8027110:	e79f      	b.n	8027052 <_dtoa_r+0xa42>
 8027112:	f8df b064 	ldr.w	fp, [pc, #100]	; 8027178 <_dtoa_r+0xb68>
 8027116:	e007      	b.n	8027128 <_dtoa_r+0xb18>
 8027118:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802711a:	f8df b060 	ldr.w	fp, [pc, #96]	; 802717c <_dtoa_r+0xb6c>
 802711e:	b11b      	cbz	r3, 8027128 <_dtoa_r+0xb18>
 8027120:	f10b 0308 	add.w	r3, fp, #8
 8027124:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8027126:	6013      	str	r3, [r2, #0]
 8027128:	4658      	mov	r0, fp
 802712a:	b017      	add	sp, #92	; 0x5c
 802712c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027130:	9b06      	ldr	r3, [sp, #24]
 8027132:	2b01      	cmp	r3, #1
 8027134:	f77f ae35 	ble.w	8026da2 <_dtoa_r+0x792>
 8027138:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802713a:	9307      	str	r3, [sp, #28]
 802713c:	e649      	b.n	8026dd2 <_dtoa_r+0x7c2>
 802713e:	9b02      	ldr	r3, [sp, #8]
 8027140:	2b00      	cmp	r3, #0
 8027142:	dc03      	bgt.n	802714c <_dtoa_r+0xb3c>
 8027144:	9b06      	ldr	r3, [sp, #24]
 8027146:	2b02      	cmp	r3, #2
 8027148:	f73f aecc 	bgt.w	8026ee4 <_dtoa_r+0x8d4>
 802714c:	465d      	mov	r5, fp
 802714e:	4639      	mov	r1, r7
 8027150:	9804      	ldr	r0, [sp, #16]
 8027152:	f7ff f9d0 	bl	80264f6 <quorem>
 8027156:	f100 0830 	add.w	r8, r0, #48	; 0x30
 802715a:	f805 8b01 	strb.w	r8, [r5], #1
 802715e:	9a02      	ldr	r2, [sp, #8]
 8027160:	eba5 030b 	sub.w	r3, r5, fp
 8027164:	429a      	cmp	r2, r3
 8027166:	ddb0      	ble.n	80270ca <_dtoa_r+0xaba>
 8027168:	2300      	movs	r3, #0
 802716a:	220a      	movs	r2, #10
 802716c:	9904      	ldr	r1, [sp, #16]
 802716e:	4620      	mov	r0, r4
 8027170:	f000 f867 	bl	8027242 <__multadd>
 8027174:	9004      	str	r0, [sp, #16]
 8027176:	e7ea      	b.n	802714e <_dtoa_r+0xb3e>
 8027178:	080278e0 	.word	0x080278e0
 802717c:	080278e2 	.word	0x080278e2

08027180 <_localeconv_r>:
 8027180:	4b04      	ldr	r3, [pc, #16]	; (8027194 <_localeconv_r+0x14>)
 8027182:	681b      	ldr	r3, [r3, #0]
 8027184:	6a18      	ldr	r0, [r3, #32]
 8027186:	4b04      	ldr	r3, [pc, #16]	; (8027198 <_localeconv_r+0x18>)
 8027188:	2800      	cmp	r0, #0
 802718a:	bf08      	it	eq
 802718c:	4618      	moveq	r0, r3
 802718e:	30f0      	adds	r0, #240	; 0xf0
 8027190:	4770      	bx	lr
 8027192:	bf00      	nop
 8027194:	2000000c 	.word	0x2000000c
 8027198:	20000070 	.word	0x20000070

0802719c <malloc>:
 802719c:	4b02      	ldr	r3, [pc, #8]	; (80271a8 <malloc+0xc>)
 802719e:	4601      	mov	r1, r0
 80271a0:	6818      	ldr	r0, [r3, #0]
 80271a2:	f000 baed 	b.w	8027780 <_malloc_r>
 80271a6:	bf00      	nop
 80271a8:	2000000c 	.word	0x2000000c

080271ac <_Balloc>:
 80271ac:	b570      	push	{r4, r5, r6, lr}
 80271ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80271b0:	4604      	mov	r4, r0
 80271b2:	460e      	mov	r6, r1
 80271b4:	b93d      	cbnz	r5, 80271c6 <_Balloc+0x1a>
 80271b6:	2010      	movs	r0, #16
 80271b8:	f7ff fff0 	bl	802719c <malloc>
 80271bc:	6260      	str	r0, [r4, #36]	; 0x24
 80271be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80271c2:	6005      	str	r5, [r0, #0]
 80271c4:	60c5      	str	r5, [r0, #12]
 80271c6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80271c8:	68eb      	ldr	r3, [r5, #12]
 80271ca:	b183      	cbz	r3, 80271ee <_Balloc+0x42>
 80271cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80271ce:	68db      	ldr	r3, [r3, #12]
 80271d0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80271d4:	b9b8      	cbnz	r0, 8027206 <_Balloc+0x5a>
 80271d6:	2101      	movs	r1, #1
 80271d8:	fa01 f506 	lsl.w	r5, r1, r6
 80271dc:	1d6a      	adds	r2, r5, #5
 80271de:	0092      	lsls	r2, r2, #2
 80271e0:	4620      	mov	r0, r4
 80271e2:	f000 fabf 	bl	8027764 <_calloc_r>
 80271e6:	b160      	cbz	r0, 8027202 <_Balloc+0x56>
 80271e8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80271ec:	e00e      	b.n	802720c <_Balloc+0x60>
 80271ee:	2221      	movs	r2, #33	; 0x21
 80271f0:	2104      	movs	r1, #4
 80271f2:	4620      	mov	r0, r4
 80271f4:	f000 fab6 	bl	8027764 <_calloc_r>
 80271f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80271fa:	60e8      	str	r0, [r5, #12]
 80271fc:	68db      	ldr	r3, [r3, #12]
 80271fe:	2b00      	cmp	r3, #0
 8027200:	d1e4      	bne.n	80271cc <_Balloc+0x20>
 8027202:	2000      	movs	r0, #0
 8027204:	bd70      	pop	{r4, r5, r6, pc}
 8027206:	6802      	ldr	r2, [r0, #0]
 8027208:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 802720c:	2300      	movs	r3, #0
 802720e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8027212:	e7f7      	b.n	8027204 <_Balloc+0x58>

08027214 <_Bfree>:
 8027214:	b570      	push	{r4, r5, r6, lr}
 8027216:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8027218:	4606      	mov	r6, r0
 802721a:	460d      	mov	r5, r1
 802721c:	b93c      	cbnz	r4, 802722e <_Bfree+0x1a>
 802721e:	2010      	movs	r0, #16
 8027220:	f7ff ffbc 	bl	802719c <malloc>
 8027224:	6270      	str	r0, [r6, #36]	; 0x24
 8027226:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802722a:	6004      	str	r4, [r0, #0]
 802722c:	60c4      	str	r4, [r0, #12]
 802722e:	b13d      	cbz	r5, 8027240 <_Bfree+0x2c>
 8027230:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8027232:	686a      	ldr	r2, [r5, #4]
 8027234:	68db      	ldr	r3, [r3, #12]
 8027236:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802723a:	6029      	str	r1, [r5, #0]
 802723c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8027240:	bd70      	pop	{r4, r5, r6, pc}

08027242 <__multadd>:
 8027242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027246:	690d      	ldr	r5, [r1, #16]
 8027248:	461f      	mov	r7, r3
 802724a:	4606      	mov	r6, r0
 802724c:	460c      	mov	r4, r1
 802724e:	f101 0c14 	add.w	ip, r1, #20
 8027252:	2300      	movs	r3, #0
 8027254:	f8dc 0000 	ldr.w	r0, [ip]
 8027258:	b281      	uxth	r1, r0
 802725a:	fb02 7101 	mla	r1, r2, r1, r7
 802725e:	0c0f      	lsrs	r7, r1, #16
 8027260:	0c00      	lsrs	r0, r0, #16
 8027262:	fb02 7000 	mla	r0, r2, r0, r7
 8027266:	b289      	uxth	r1, r1
 8027268:	3301      	adds	r3, #1
 802726a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 802726e:	429d      	cmp	r5, r3
 8027270:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8027274:	f84c 1b04 	str.w	r1, [ip], #4
 8027278:	dcec      	bgt.n	8027254 <__multadd+0x12>
 802727a:	b1d7      	cbz	r7, 80272b2 <__multadd+0x70>
 802727c:	68a3      	ldr	r3, [r4, #8]
 802727e:	42ab      	cmp	r3, r5
 8027280:	dc12      	bgt.n	80272a8 <__multadd+0x66>
 8027282:	6861      	ldr	r1, [r4, #4]
 8027284:	4630      	mov	r0, r6
 8027286:	3101      	adds	r1, #1
 8027288:	f7ff ff90 	bl	80271ac <_Balloc>
 802728c:	6922      	ldr	r2, [r4, #16]
 802728e:	3202      	adds	r2, #2
 8027290:	f104 010c 	add.w	r1, r4, #12
 8027294:	4680      	mov	r8, r0
 8027296:	0092      	lsls	r2, r2, #2
 8027298:	300c      	adds	r0, #12
 802729a:	f7fe fdcf 	bl	8025e3c <memcpy>
 802729e:	4621      	mov	r1, r4
 80272a0:	4630      	mov	r0, r6
 80272a2:	f7ff ffb7 	bl	8027214 <_Bfree>
 80272a6:	4644      	mov	r4, r8
 80272a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80272ac:	3501      	adds	r5, #1
 80272ae:	615f      	str	r7, [r3, #20]
 80272b0:	6125      	str	r5, [r4, #16]
 80272b2:	4620      	mov	r0, r4
 80272b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080272b8 <__hi0bits>:
 80272b8:	0c02      	lsrs	r2, r0, #16
 80272ba:	0412      	lsls	r2, r2, #16
 80272bc:	4603      	mov	r3, r0
 80272be:	b9b2      	cbnz	r2, 80272ee <__hi0bits+0x36>
 80272c0:	0403      	lsls	r3, r0, #16
 80272c2:	2010      	movs	r0, #16
 80272c4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80272c8:	bf04      	itt	eq
 80272ca:	021b      	lsleq	r3, r3, #8
 80272cc:	3008      	addeq	r0, #8
 80272ce:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80272d2:	bf04      	itt	eq
 80272d4:	011b      	lsleq	r3, r3, #4
 80272d6:	3004      	addeq	r0, #4
 80272d8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80272dc:	bf04      	itt	eq
 80272de:	009b      	lsleq	r3, r3, #2
 80272e0:	3002      	addeq	r0, #2
 80272e2:	2b00      	cmp	r3, #0
 80272e4:	db06      	blt.n	80272f4 <__hi0bits+0x3c>
 80272e6:	005b      	lsls	r3, r3, #1
 80272e8:	d503      	bpl.n	80272f2 <__hi0bits+0x3a>
 80272ea:	3001      	adds	r0, #1
 80272ec:	4770      	bx	lr
 80272ee:	2000      	movs	r0, #0
 80272f0:	e7e8      	b.n	80272c4 <__hi0bits+0xc>
 80272f2:	2020      	movs	r0, #32
 80272f4:	4770      	bx	lr

080272f6 <__lo0bits>:
 80272f6:	6803      	ldr	r3, [r0, #0]
 80272f8:	f013 0207 	ands.w	r2, r3, #7
 80272fc:	4601      	mov	r1, r0
 80272fe:	d00b      	beq.n	8027318 <__lo0bits+0x22>
 8027300:	07da      	lsls	r2, r3, #31
 8027302:	d423      	bmi.n	802734c <__lo0bits+0x56>
 8027304:	0798      	lsls	r0, r3, #30
 8027306:	bf49      	itett	mi
 8027308:	085b      	lsrmi	r3, r3, #1
 802730a:	089b      	lsrpl	r3, r3, #2
 802730c:	2001      	movmi	r0, #1
 802730e:	600b      	strmi	r3, [r1, #0]
 8027310:	bf5c      	itt	pl
 8027312:	600b      	strpl	r3, [r1, #0]
 8027314:	2002      	movpl	r0, #2
 8027316:	4770      	bx	lr
 8027318:	b298      	uxth	r0, r3
 802731a:	b9a8      	cbnz	r0, 8027348 <__lo0bits+0x52>
 802731c:	0c1b      	lsrs	r3, r3, #16
 802731e:	2010      	movs	r0, #16
 8027320:	f013 0fff 	tst.w	r3, #255	; 0xff
 8027324:	bf04      	itt	eq
 8027326:	0a1b      	lsreq	r3, r3, #8
 8027328:	3008      	addeq	r0, #8
 802732a:	071a      	lsls	r2, r3, #28
 802732c:	bf04      	itt	eq
 802732e:	091b      	lsreq	r3, r3, #4
 8027330:	3004      	addeq	r0, #4
 8027332:	079a      	lsls	r2, r3, #30
 8027334:	bf04      	itt	eq
 8027336:	089b      	lsreq	r3, r3, #2
 8027338:	3002      	addeq	r0, #2
 802733a:	07da      	lsls	r2, r3, #31
 802733c:	d402      	bmi.n	8027344 <__lo0bits+0x4e>
 802733e:	085b      	lsrs	r3, r3, #1
 8027340:	d006      	beq.n	8027350 <__lo0bits+0x5a>
 8027342:	3001      	adds	r0, #1
 8027344:	600b      	str	r3, [r1, #0]
 8027346:	4770      	bx	lr
 8027348:	4610      	mov	r0, r2
 802734a:	e7e9      	b.n	8027320 <__lo0bits+0x2a>
 802734c:	2000      	movs	r0, #0
 802734e:	4770      	bx	lr
 8027350:	2020      	movs	r0, #32
 8027352:	4770      	bx	lr

08027354 <__i2b>:
 8027354:	b510      	push	{r4, lr}
 8027356:	460c      	mov	r4, r1
 8027358:	2101      	movs	r1, #1
 802735a:	f7ff ff27 	bl	80271ac <_Balloc>
 802735e:	2201      	movs	r2, #1
 8027360:	6144      	str	r4, [r0, #20]
 8027362:	6102      	str	r2, [r0, #16]
 8027364:	bd10      	pop	{r4, pc}

08027366 <__multiply>:
 8027366:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802736a:	4614      	mov	r4, r2
 802736c:	690a      	ldr	r2, [r1, #16]
 802736e:	6923      	ldr	r3, [r4, #16]
 8027370:	429a      	cmp	r2, r3
 8027372:	bfb8      	it	lt
 8027374:	460b      	movlt	r3, r1
 8027376:	4688      	mov	r8, r1
 8027378:	bfbc      	itt	lt
 802737a:	46a0      	movlt	r8, r4
 802737c:	461c      	movlt	r4, r3
 802737e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8027382:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8027386:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802738a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802738e:	eb07 0609 	add.w	r6, r7, r9
 8027392:	42b3      	cmp	r3, r6
 8027394:	bfb8      	it	lt
 8027396:	3101      	addlt	r1, #1
 8027398:	f7ff ff08 	bl	80271ac <_Balloc>
 802739c:	f100 0514 	add.w	r5, r0, #20
 80273a0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80273a4:	462b      	mov	r3, r5
 80273a6:	2200      	movs	r2, #0
 80273a8:	4573      	cmp	r3, lr
 80273aa:	d316      	bcc.n	80273da <__multiply+0x74>
 80273ac:	f104 0214 	add.w	r2, r4, #20
 80273b0:	f108 0114 	add.w	r1, r8, #20
 80273b4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80273b8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80273bc:	9300      	str	r3, [sp, #0]
 80273be:	9b00      	ldr	r3, [sp, #0]
 80273c0:	9201      	str	r2, [sp, #4]
 80273c2:	4293      	cmp	r3, r2
 80273c4:	d80c      	bhi.n	80273e0 <__multiply+0x7a>
 80273c6:	2e00      	cmp	r6, #0
 80273c8:	dd03      	ble.n	80273d2 <__multiply+0x6c>
 80273ca:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80273ce:	2b00      	cmp	r3, #0
 80273d0:	d05d      	beq.n	802748e <__multiply+0x128>
 80273d2:	6106      	str	r6, [r0, #16]
 80273d4:	b003      	add	sp, #12
 80273d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80273da:	f843 2b04 	str.w	r2, [r3], #4
 80273de:	e7e3      	b.n	80273a8 <__multiply+0x42>
 80273e0:	f8b2 b000 	ldrh.w	fp, [r2]
 80273e4:	f1bb 0f00 	cmp.w	fp, #0
 80273e8:	d023      	beq.n	8027432 <__multiply+0xcc>
 80273ea:	4689      	mov	r9, r1
 80273ec:	46ac      	mov	ip, r5
 80273ee:	f04f 0800 	mov.w	r8, #0
 80273f2:	f859 4b04 	ldr.w	r4, [r9], #4
 80273f6:	f8dc a000 	ldr.w	sl, [ip]
 80273fa:	b2a3      	uxth	r3, r4
 80273fc:	fa1f fa8a 	uxth.w	sl, sl
 8027400:	fb0b a303 	mla	r3, fp, r3, sl
 8027404:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8027408:	f8dc 4000 	ldr.w	r4, [ip]
 802740c:	4443      	add	r3, r8
 802740e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8027412:	fb0b 840a 	mla	r4, fp, sl, r8
 8027416:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 802741a:	46e2      	mov	sl, ip
 802741c:	b29b      	uxth	r3, r3
 802741e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8027422:	454f      	cmp	r7, r9
 8027424:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8027428:	f84a 3b04 	str.w	r3, [sl], #4
 802742c:	d82b      	bhi.n	8027486 <__multiply+0x120>
 802742e:	f8cc 8004 	str.w	r8, [ip, #4]
 8027432:	9b01      	ldr	r3, [sp, #4]
 8027434:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8027438:	3204      	adds	r2, #4
 802743a:	f1ba 0f00 	cmp.w	sl, #0
 802743e:	d020      	beq.n	8027482 <__multiply+0x11c>
 8027440:	682b      	ldr	r3, [r5, #0]
 8027442:	4689      	mov	r9, r1
 8027444:	46a8      	mov	r8, r5
 8027446:	f04f 0b00 	mov.w	fp, #0
 802744a:	f8b9 c000 	ldrh.w	ip, [r9]
 802744e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8027452:	fb0a 440c 	mla	r4, sl, ip, r4
 8027456:	445c      	add	r4, fp
 8027458:	46c4      	mov	ip, r8
 802745a:	b29b      	uxth	r3, r3
 802745c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8027460:	f84c 3b04 	str.w	r3, [ip], #4
 8027464:	f859 3b04 	ldr.w	r3, [r9], #4
 8027468:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 802746c:	0c1b      	lsrs	r3, r3, #16
 802746e:	fb0a b303 	mla	r3, sl, r3, fp
 8027472:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8027476:	454f      	cmp	r7, r9
 8027478:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 802747c:	d805      	bhi.n	802748a <__multiply+0x124>
 802747e:	f8c8 3004 	str.w	r3, [r8, #4]
 8027482:	3504      	adds	r5, #4
 8027484:	e79b      	b.n	80273be <__multiply+0x58>
 8027486:	46d4      	mov	ip, sl
 8027488:	e7b3      	b.n	80273f2 <__multiply+0x8c>
 802748a:	46e0      	mov	r8, ip
 802748c:	e7dd      	b.n	802744a <__multiply+0xe4>
 802748e:	3e01      	subs	r6, #1
 8027490:	e799      	b.n	80273c6 <__multiply+0x60>
	...

08027494 <__pow5mult>:
 8027494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027498:	4615      	mov	r5, r2
 802749a:	f012 0203 	ands.w	r2, r2, #3
 802749e:	4606      	mov	r6, r0
 80274a0:	460f      	mov	r7, r1
 80274a2:	d007      	beq.n	80274b4 <__pow5mult+0x20>
 80274a4:	3a01      	subs	r2, #1
 80274a6:	4c21      	ldr	r4, [pc, #132]	; (802752c <__pow5mult+0x98>)
 80274a8:	2300      	movs	r3, #0
 80274aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80274ae:	f7ff fec8 	bl	8027242 <__multadd>
 80274b2:	4607      	mov	r7, r0
 80274b4:	10ad      	asrs	r5, r5, #2
 80274b6:	d035      	beq.n	8027524 <__pow5mult+0x90>
 80274b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80274ba:	b93c      	cbnz	r4, 80274cc <__pow5mult+0x38>
 80274bc:	2010      	movs	r0, #16
 80274be:	f7ff fe6d 	bl	802719c <malloc>
 80274c2:	6270      	str	r0, [r6, #36]	; 0x24
 80274c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80274c8:	6004      	str	r4, [r0, #0]
 80274ca:	60c4      	str	r4, [r0, #12]
 80274cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80274d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80274d4:	b94c      	cbnz	r4, 80274ea <__pow5mult+0x56>
 80274d6:	f240 2171 	movw	r1, #625	; 0x271
 80274da:	4630      	mov	r0, r6
 80274dc:	f7ff ff3a 	bl	8027354 <__i2b>
 80274e0:	2300      	movs	r3, #0
 80274e2:	f8c8 0008 	str.w	r0, [r8, #8]
 80274e6:	4604      	mov	r4, r0
 80274e8:	6003      	str	r3, [r0, #0]
 80274ea:	f04f 0800 	mov.w	r8, #0
 80274ee:	07eb      	lsls	r3, r5, #31
 80274f0:	d50a      	bpl.n	8027508 <__pow5mult+0x74>
 80274f2:	4639      	mov	r1, r7
 80274f4:	4622      	mov	r2, r4
 80274f6:	4630      	mov	r0, r6
 80274f8:	f7ff ff35 	bl	8027366 <__multiply>
 80274fc:	4639      	mov	r1, r7
 80274fe:	4681      	mov	r9, r0
 8027500:	4630      	mov	r0, r6
 8027502:	f7ff fe87 	bl	8027214 <_Bfree>
 8027506:	464f      	mov	r7, r9
 8027508:	106d      	asrs	r5, r5, #1
 802750a:	d00b      	beq.n	8027524 <__pow5mult+0x90>
 802750c:	6820      	ldr	r0, [r4, #0]
 802750e:	b938      	cbnz	r0, 8027520 <__pow5mult+0x8c>
 8027510:	4622      	mov	r2, r4
 8027512:	4621      	mov	r1, r4
 8027514:	4630      	mov	r0, r6
 8027516:	f7ff ff26 	bl	8027366 <__multiply>
 802751a:	6020      	str	r0, [r4, #0]
 802751c:	f8c0 8000 	str.w	r8, [r0]
 8027520:	4604      	mov	r4, r0
 8027522:	e7e4      	b.n	80274ee <__pow5mult+0x5a>
 8027524:	4638      	mov	r0, r7
 8027526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802752a:	bf00      	nop
 802752c:	08027a40 	.word	0x08027a40

08027530 <__lshift>:
 8027530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027534:	460c      	mov	r4, r1
 8027536:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802753a:	6923      	ldr	r3, [r4, #16]
 802753c:	6849      	ldr	r1, [r1, #4]
 802753e:	eb0a 0903 	add.w	r9, sl, r3
 8027542:	68a3      	ldr	r3, [r4, #8]
 8027544:	4607      	mov	r7, r0
 8027546:	4616      	mov	r6, r2
 8027548:	f109 0501 	add.w	r5, r9, #1
 802754c:	42ab      	cmp	r3, r5
 802754e:	db32      	blt.n	80275b6 <__lshift+0x86>
 8027550:	4638      	mov	r0, r7
 8027552:	f7ff fe2b 	bl	80271ac <_Balloc>
 8027556:	2300      	movs	r3, #0
 8027558:	4680      	mov	r8, r0
 802755a:	f100 0114 	add.w	r1, r0, #20
 802755e:	461a      	mov	r2, r3
 8027560:	4553      	cmp	r3, sl
 8027562:	db2b      	blt.n	80275bc <__lshift+0x8c>
 8027564:	6920      	ldr	r0, [r4, #16]
 8027566:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802756a:	f104 0314 	add.w	r3, r4, #20
 802756e:	f016 021f 	ands.w	r2, r6, #31
 8027572:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8027576:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802757a:	d025      	beq.n	80275c8 <__lshift+0x98>
 802757c:	f1c2 0e20 	rsb	lr, r2, #32
 8027580:	2000      	movs	r0, #0
 8027582:	681e      	ldr	r6, [r3, #0]
 8027584:	468a      	mov	sl, r1
 8027586:	4096      	lsls	r6, r2
 8027588:	4330      	orrs	r0, r6
 802758a:	f84a 0b04 	str.w	r0, [sl], #4
 802758e:	f853 0b04 	ldr.w	r0, [r3], #4
 8027592:	459c      	cmp	ip, r3
 8027594:	fa20 f00e 	lsr.w	r0, r0, lr
 8027598:	d814      	bhi.n	80275c4 <__lshift+0x94>
 802759a:	6048      	str	r0, [r1, #4]
 802759c:	b108      	cbz	r0, 80275a2 <__lshift+0x72>
 802759e:	f109 0502 	add.w	r5, r9, #2
 80275a2:	3d01      	subs	r5, #1
 80275a4:	4638      	mov	r0, r7
 80275a6:	f8c8 5010 	str.w	r5, [r8, #16]
 80275aa:	4621      	mov	r1, r4
 80275ac:	f7ff fe32 	bl	8027214 <_Bfree>
 80275b0:	4640      	mov	r0, r8
 80275b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80275b6:	3101      	adds	r1, #1
 80275b8:	005b      	lsls	r3, r3, #1
 80275ba:	e7c7      	b.n	802754c <__lshift+0x1c>
 80275bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80275c0:	3301      	adds	r3, #1
 80275c2:	e7cd      	b.n	8027560 <__lshift+0x30>
 80275c4:	4651      	mov	r1, sl
 80275c6:	e7dc      	b.n	8027582 <__lshift+0x52>
 80275c8:	3904      	subs	r1, #4
 80275ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80275ce:	f841 2f04 	str.w	r2, [r1, #4]!
 80275d2:	459c      	cmp	ip, r3
 80275d4:	d8f9      	bhi.n	80275ca <__lshift+0x9a>
 80275d6:	e7e4      	b.n	80275a2 <__lshift+0x72>

080275d8 <__mcmp>:
 80275d8:	6903      	ldr	r3, [r0, #16]
 80275da:	690a      	ldr	r2, [r1, #16]
 80275dc:	1a9b      	subs	r3, r3, r2
 80275de:	b530      	push	{r4, r5, lr}
 80275e0:	d10c      	bne.n	80275fc <__mcmp+0x24>
 80275e2:	0092      	lsls	r2, r2, #2
 80275e4:	3014      	adds	r0, #20
 80275e6:	3114      	adds	r1, #20
 80275e8:	1884      	adds	r4, r0, r2
 80275ea:	4411      	add	r1, r2
 80275ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80275f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80275f4:	4295      	cmp	r5, r2
 80275f6:	d003      	beq.n	8027600 <__mcmp+0x28>
 80275f8:	d305      	bcc.n	8027606 <__mcmp+0x2e>
 80275fa:	2301      	movs	r3, #1
 80275fc:	4618      	mov	r0, r3
 80275fe:	bd30      	pop	{r4, r5, pc}
 8027600:	42a0      	cmp	r0, r4
 8027602:	d3f3      	bcc.n	80275ec <__mcmp+0x14>
 8027604:	e7fa      	b.n	80275fc <__mcmp+0x24>
 8027606:	f04f 33ff 	mov.w	r3, #4294967295
 802760a:	e7f7      	b.n	80275fc <__mcmp+0x24>

0802760c <__mdiff>:
 802760c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027610:	460d      	mov	r5, r1
 8027612:	4607      	mov	r7, r0
 8027614:	4611      	mov	r1, r2
 8027616:	4628      	mov	r0, r5
 8027618:	4614      	mov	r4, r2
 802761a:	f7ff ffdd 	bl	80275d8 <__mcmp>
 802761e:	1e06      	subs	r6, r0, #0
 8027620:	d108      	bne.n	8027634 <__mdiff+0x28>
 8027622:	4631      	mov	r1, r6
 8027624:	4638      	mov	r0, r7
 8027626:	f7ff fdc1 	bl	80271ac <_Balloc>
 802762a:	2301      	movs	r3, #1
 802762c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8027630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027634:	bfa4      	itt	ge
 8027636:	4623      	movge	r3, r4
 8027638:	462c      	movge	r4, r5
 802763a:	4638      	mov	r0, r7
 802763c:	6861      	ldr	r1, [r4, #4]
 802763e:	bfa6      	itte	ge
 8027640:	461d      	movge	r5, r3
 8027642:	2600      	movge	r6, #0
 8027644:	2601      	movlt	r6, #1
 8027646:	f7ff fdb1 	bl	80271ac <_Balloc>
 802764a:	692b      	ldr	r3, [r5, #16]
 802764c:	60c6      	str	r6, [r0, #12]
 802764e:	6926      	ldr	r6, [r4, #16]
 8027650:	f105 0914 	add.w	r9, r5, #20
 8027654:	f104 0214 	add.w	r2, r4, #20
 8027658:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 802765c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8027660:	f100 0514 	add.w	r5, r0, #20
 8027664:	f04f 0e00 	mov.w	lr, #0
 8027668:	f852 ab04 	ldr.w	sl, [r2], #4
 802766c:	f859 4b04 	ldr.w	r4, [r9], #4
 8027670:	fa1e f18a 	uxtah	r1, lr, sl
 8027674:	b2a3      	uxth	r3, r4
 8027676:	1ac9      	subs	r1, r1, r3
 8027678:	0c23      	lsrs	r3, r4, #16
 802767a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 802767e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8027682:	b289      	uxth	r1, r1
 8027684:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8027688:	45c8      	cmp	r8, r9
 802768a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 802768e:	4694      	mov	ip, r2
 8027690:	f845 3b04 	str.w	r3, [r5], #4
 8027694:	d8e8      	bhi.n	8027668 <__mdiff+0x5c>
 8027696:	45bc      	cmp	ip, r7
 8027698:	d304      	bcc.n	80276a4 <__mdiff+0x98>
 802769a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 802769e:	b183      	cbz	r3, 80276c2 <__mdiff+0xb6>
 80276a0:	6106      	str	r6, [r0, #16]
 80276a2:	e7c5      	b.n	8027630 <__mdiff+0x24>
 80276a4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80276a8:	fa1e f381 	uxtah	r3, lr, r1
 80276ac:	141a      	asrs	r2, r3, #16
 80276ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80276b2:	b29b      	uxth	r3, r3
 80276b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80276b8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80276bc:	f845 3b04 	str.w	r3, [r5], #4
 80276c0:	e7e9      	b.n	8027696 <__mdiff+0x8a>
 80276c2:	3e01      	subs	r6, #1
 80276c4:	e7e9      	b.n	802769a <__mdiff+0x8e>

080276c6 <__d2b>:
 80276c6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80276ca:	460e      	mov	r6, r1
 80276cc:	2101      	movs	r1, #1
 80276ce:	ec59 8b10 	vmov	r8, r9, d0
 80276d2:	4615      	mov	r5, r2
 80276d4:	f7ff fd6a 	bl	80271ac <_Balloc>
 80276d8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80276dc:	4607      	mov	r7, r0
 80276de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80276e2:	bb34      	cbnz	r4, 8027732 <__d2b+0x6c>
 80276e4:	9301      	str	r3, [sp, #4]
 80276e6:	f1b8 0300 	subs.w	r3, r8, #0
 80276ea:	d027      	beq.n	802773c <__d2b+0x76>
 80276ec:	a802      	add	r0, sp, #8
 80276ee:	f840 3d08 	str.w	r3, [r0, #-8]!
 80276f2:	f7ff fe00 	bl	80272f6 <__lo0bits>
 80276f6:	9900      	ldr	r1, [sp, #0]
 80276f8:	b1f0      	cbz	r0, 8027738 <__d2b+0x72>
 80276fa:	9a01      	ldr	r2, [sp, #4]
 80276fc:	f1c0 0320 	rsb	r3, r0, #32
 8027700:	fa02 f303 	lsl.w	r3, r2, r3
 8027704:	430b      	orrs	r3, r1
 8027706:	40c2      	lsrs	r2, r0
 8027708:	617b      	str	r3, [r7, #20]
 802770a:	9201      	str	r2, [sp, #4]
 802770c:	9b01      	ldr	r3, [sp, #4]
 802770e:	61bb      	str	r3, [r7, #24]
 8027710:	2b00      	cmp	r3, #0
 8027712:	bf14      	ite	ne
 8027714:	2102      	movne	r1, #2
 8027716:	2101      	moveq	r1, #1
 8027718:	6139      	str	r1, [r7, #16]
 802771a:	b1c4      	cbz	r4, 802774e <__d2b+0x88>
 802771c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8027720:	4404      	add	r4, r0
 8027722:	6034      	str	r4, [r6, #0]
 8027724:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8027728:	6028      	str	r0, [r5, #0]
 802772a:	4638      	mov	r0, r7
 802772c:	b003      	add	sp, #12
 802772e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027736:	e7d5      	b.n	80276e4 <__d2b+0x1e>
 8027738:	6179      	str	r1, [r7, #20]
 802773a:	e7e7      	b.n	802770c <__d2b+0x46>
 802773c:	a801      	add	r0, sp, #4
 802773e:	f7ff fdda 	bl	80272f6 <__lo0bits>
 8027742:	9b01      	ldr	r3, [sp, #4]
 8027744:	617b      	str	r3, [r7, #20]
 8027746:	2101      	movs	r1, #1
 8027748:	6139      	str	r1, [r7, #16]
 802774a:	3020      	adds	r0, #32
 802774c:	e7e5      	b.n	802771a <__d2b+0x54>
 802774e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8027752:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8027756:	6030      	str	r0, [r6, #0]
 8027758:	6918      	ldr	r0, [r3, #16]
 802775a:	f7ff fdad 	bl	80272b8 <__hi0bits>
 802775e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8027762:	e7e1      	b.n	8027728 <__d2b+0x62>

08027764 <_calloc_r>:
 8027764:	b538      	push	{r3, r4, r5, lr}
 8027766:	fb02 f401 	mul.w	r4, r2, r1
 802776a:	4621      	mov	r1, r4
 802776c:	f000 f808 	bl	8027780 <_malloc_r>
 8027770:	4605      	mov	r5, r0
 8027772:	b118      	cbz	r0, 802777c <_calloc_r+0x18>
 8027774:	4622      	mov	r2, r4
 8027776:	2100      	movs	r1, #0
 8027778:	f7fe fb6b 	bl	8025e52 <memset>
 802777c:	4628      	mov	r0, r5
 802777e:	bd38      	pop	{r3, r4, r5, pc}

08027780 <_malloc_r>:
 8027780:	b570      	push	{r4, r5, r6, lr}
 8027782:	1ccd      	adds	r5, r1, #3
 8027784:	f025 0503 	bic.w	r5, r5, #3
 8027788:	3508      	adds	r5, #8
 802778a:	2d0c      	cmp	r5, #12
 802778c:	bf38      	it	cc
 802778e:	250c      	movcc	r5, #12
 8027790:	2d00      	cmp	r5, #0
 8027792:	4606      	mov	r6, r0
 8027794:	db01      	blt.n	802779a <_malloc_r+0x1a>
 8027796:	42a9      	cmp	r1, r5
 8027798:	d903      	bls.n	80277a2 <_malloc_r+0x22>
 802779a:	230c      	movs	r3, #12
 802779c:	6033      	str	r3, [r6, #0]
 802779e:	2000      	movs	r0, #0
 80277a0:	bd70      	pop	{r4, r5, r6, pc}
 80277a2:	f000 f869 	bl	8027878 <__malloc_lock>
 80277a6:	4a21      	ldr	r2, [pc, #132]	; (802782c <_malloc_r+0xac>)
 80277a8:	6814      	ldr	r4, [r2, #0]
 80277aa:	4621      	mov	r1, r4
 80277ac:	b991      	cbnz	r1, 80277d4 <_malloc_r+0x54>
 80277ae:	4c20      	ldr	r4, [pc, #128]	; (8027830 <_malloc_r+0xb0>)
 80277b0:	6823      	ldr	r3, [r4, #0]
 80277b2:	b91b      	cbnz	r3, 80277bc <_malloc_r+0x3c>
 80277b4:	4630      	mov	r0, r6
 80277b6:	f000 f83d 	bl	8027834 <_sbrk_r>
 80277ba:	6020      	str	r0, [r4, #0]
 80277bc:	4629      	mov	r1, r5
 80277be:	4630      	mov	r0, r6
 80277c0:	f000 f838 	bl	8027834 <_sbrk_r>
 80277c4:	1c43      	adds	r3, r0, #1
 80277c6:	d124      	bne.n	8027812 <_malloc_r+0x92>
 80277c8:	230c      	movs	r3, #12
 80277ca:	6033      	str	r3, [r6, #0]
 80277cc:	4630      	mov	r0, r6
 80277ce:	f000 f854 	bl	802787a <__malloc_unlock>
 80277d2:	e7e4      	b.n	802779e <_malloc_r+0x1e>
 80277d4:	680b      	ldr	r3, [r1, #0]
 80277d6:	1b5b      	subs	r3, r3, r5
 80277d8:	d418      	bmi.n	802780c <_malloc_r+0x8c>
 80277da:	2b0b      	cmp	r3, #11
 80277dc:	d90f      	bls.n	80277fe <_malloc_r+0x7e>
 80277de:	600b      	str	r3, [r1, #0]
 80277e0:	50cd      	str	r5, [r1, r3]
 80277e2:	18cc      	adds	r4, r1, r3
 80277e4:	4630      	mov	r0, r6
 80277e6:	f000 f848 	bl	802787a <__malloc_unlock>
 80277ea:	f104 000b 	add.w	r0, r4, #11
 80277ee:	1d23      	adds	r3, r4, #4
 80277f0:	f020 0007 	bic.w	r0, r0, #7
 80277f4:	1ac3      	subs	r3, r0, r3
 80277f6:	d0d3      	beq.n	80277a0 <_malloc_r+0x20>
 80277f8:	425a      	negs	r2, r3
 80277fa:	50e2      	str	r2, [r4, r3]
 80277fc:	e7d0      	b.n	80277a0 <_malloc_r+0x20>
 80277fe:	428c      	cmp	r4, r1
 8027800:	684b      	ldr	r3, [r1, #4]
 8027802:	bf16      	itet	ne
 8027804:	6063      	strne	r3, [r4, #4]
 8027806:	6013      	streq	r3, [r2, #0]
 8027808:	460c      	movne	r4, r1
 802780a:	e7eb      	b.n	80277e4 <_malloc_r+0x64>
 802780c:	460c      	mov	r4, r1
 802780e:	6849      	ldr	r1, [r1, #4]
 8027810:	e7cc      	b.n	80277ac <_malloc_r+0x2c>
 8027812:	1cc4      	adds	r4, r0, #3
 8027814:	f024 0403 	bic.w	r4, r4, #3
 8027818:	42a0      	cmp	r0, r4
 802781a:	d005      	beq.n	8027828 <_malloc_r+0xa8>
 802781c:	1a21      	subs	r1, r4, r0
 802781e:	4630      	mov	r0, r6
 8027820:	f000 f808 	bl	8027834 <_sbrk_r>
 8027824:	3001      	adds	r0, #1
 8027826:	d0cf      	beq.n	80277c8 <_malloc_r+0x48>
 8027828:	6025      	str	r5, [r4, #0]
 802782a:	e7db      	b.n	80277e4 <_malloc_r+0x64>
 802782c:	20010fa8 	.word	0x20010fa8
 8027830:	20010fac 	.word	0x20010fac

08027834 <_sbrk_r>:
 8027834:	b538      	push	{r3, r4, r5, lr}
 8027836:	4c06      	ldr	r4, [pc, #24]	; (8027850 <_sbrk_r+0x1c>)
 8027838:	2300      	movs	r3, #0
 802783a:	4605      	mov	r5, r0
 802783c:	4608      	mov	r0, r1
 802783e:	6023      	str	r3, [r4, #0]
 8027840:	f7fb f808 	bl	8022854 <_sbrk>
 8027844:	1c43      	adds	r3, r0, #1
 8027846:	d102      	bne.n	802784e <_sbrk_r+0x1a>
 8027848:	6823      	ldr	r3, [r4, #0]
 802784a:	b103      	cbz	r3, 802784e <_sbrk_r+0x1a>
 802784c:	602b      	str	r3, [r5, #0]
 802784e:	bd38      	pop	{r3, r4, r5, pc}
 8027850:	2001138c 	.word	0x2001138c

08027854 <__ascii_mbtowc>:
 8027854:	b082      	sub	sp, #8
 8027856:	b901      	cbnz	r1, 802785a <__ascii_mbtowc+0x6>
 8027858:	a901      	add	r1, sp, #4
 802785a:	b142      	cbz	r2, 802786e <__ascii_mbtowc+0x1a>
 802785c:	b14b      	cbz	r3, 8027872 <__ascii_mbtowc+0x1e>
 802785e:	7813      	ldrb	r3, [r2, #0]
 8027860:	600b      	str	r3, [r1, #0]
 8027862:	7812      	ldrb	r2, [r2, #0]
 8027864:	1c10      	adds	r0, r2, #0
 8027866:	bf18      	it	ne
 8027868:	2001      	movne	r0, #1
 802786a:	b002      	add	sp, #8
 802786c:	4770      	bx	lr
 802786e:	4610      	mov	r0, r2
 8027870:	e7fb      	b.n	802786a <__ascii_mbtowc+0x16>
 8027872:	f06f 0001 	mvn.w	r0, #1
 8027876:	e7f8      	b.n	802786a <__ascii_mbtowc+0x16>

08027878 <__malloc_lock>:
 8027878:	4770      	bx	lr

0802787a <__malloc_unlock>:
 802787a:	4770      	bx	lr

0802787c <__ascii_wctomb>:
 802787c:	b149      	cbz	r1, 8027892 <__ascii_wctomb+0x16>
 802787e:	2aff      	cmp	r2, #255	; 0xff
 8027880:	bf85      	ittet	hi
 8027882:	238a      	movhi	r3, #138	; 0x8a
 8027884:	6003      	strhi	r3, [r0, #0]
 8027886:	700a      	strbls	r2, [r1, #0]
 8027888:	f04f 30ff 	movhi.w	r0, #4294967295
 802788c:	bf98      	it	ls
 802788e:	2001      	movls	r0, #1
 8027890:	4770      	bx	lr
 8027892:	4608      	mov	r0, r1
 8027894:	4770      	bx	lr
	...

08027898 <_init>:
 8027898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802789a:	bf00      	nop
 802789c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802789e:	bc08      	pop	{r3}
 80278a0:	469e      	mov	lr, r3
 80278a2:	4770      	bx	lr

080278a4 <_fini>:
 80278a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80278a6:	bf00      	nop
 80278a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80278aa:	bc08      	pop	{r3}
 80278ac:	469e      	mov	lr, r3
 80278ae:	4770      	bx	lr
